//----------------------------------------------------------------------------
//  Aspose.Cells.dll: Aspose.Cells, Version=21.6.0.0, Culture=neutral, PublicKeyToken=716fcc553a201e56
//----------------------------------------------------------------------------
//  The code is automatically generated by the GenCodeNET tool.
//----------------------------------------------------------------------------
//  .NET Framework: 4.0
//----------------------------------------------------------------------------
//  UnitName: DDN.Aspose.Cells
//  Author: ying32
//----------------------------------------------------------------------------

unit DDN.Aspose.Cells;

{$IFDEF FPC}
  {$mode delphi}//{$H+}
  {$modeswitch advancedrecords}
  {$modeswitch prefixedattributes} // Custom attributes featureï¼Œfpc3.2.2+
{$ENDIF}

interface

uses
  DDN.Runtime,
  DDN.mscorlib,
  DDN.System.Drawing,
  DDN.System.Data,
  DDN.System.Web,
  DDN.System;

type

{ enums }

  //-------------namespace: Aspose.Cells----------------
  [DNTypeName('Aspose.Cells.AccessCacheOptions')]
  DNAccessCacheOptions = type Integer;
  DNAccessCacheOptionsHelper = record helper for DNAccessCacheOptions
  public const
    None = 0;
    PositionAndSize = 3;
    CellsData = 9;
    CellDisplay = 1048710;
    GetFormula = 2097152;
    SetFormula = 4194304;
    CalculateFormula = 8388617;
    ConditionalFormatting = 16777225;
    Validation = 33554441;
    All = -1;
  end;


  //-------------namespace: Aspose.Cells----------------
  [DNTypeName('Aspose.Cells.AutoFitMergedCellsType')]
  DNAutoFitMergedCellsType = type Integer;
  DNAutoFitMergedCellsTypeHelper = record helper for DNAutoFitMergedCellsType
  public const
    None = 0;
    FirstLine = 1;
    LastLine = 2;
    EachLine = 3;
  end;


  //-------------namespace: Aspose.Cells----------------
  [DNTypeName('Aspose.Cells.AutoFitWrappedTextType')]
  DNAutoFitWrappedTextType = type Integer;
  DNAutoFitWrappedTextTypeHelper = record helper for DNAutoFitWrappedTextType
  public const
    Default_ = 0;
    Paragraph = 1;
  end;


  //-------------namespace: Aspose.Cells----------------
  [DNTypeName('Aspose.Cells.BackgroundType')]
  DNBackgroundType = type Integer;
  DNBackgroundTypeHelper = record helper for DNBackgroundType
  public const
    None = 0;
    Solid = 1;
    Gray50 = 2;
    Gray75 = 3;
    Gray25 = 4;
    HorizontalStripe = 5;
    VerticalStripe = 6;
    ReverseDiagonalStripe = 7;
    DiagonalStripe = 8;
    DiagonalCrosshatch = 9;
    ThickDiagonalCrosshatch = 10;
    ThinHorizontalStripe = 11;
    ThinVerticalStripe = 12;
    ThinReverseDiagonalStripe = 13;
    ThinDiagonalStripe = 14;
    ThinHorizontalCrosshatch = 15;
    ThinDiagonalCrosshatch = 16;
    Gray12 = 17;
    Gray6 = 18;
  end;


  //-------------namespace: Aspose.Cells----------------
  [DNTypeName('Aspose.Cells.BorderType')]
  DNBorderType = type Integer;
  DNBorderTypeHelper = record helper for DNBorderType
  public const
    LeftBorder = 1;
    RightBorder = 2;
    TopBorder = 4;
    BottomBorder = 8;
    DiagonalDown = 16;
    DiagonalUp = 32;
    Vertical = 64;
    Horizontal = 128;
  end;


  //-------------namespace: Aspose.Cells----------------
  [DNTypeName('Aspose.Cells.BuiltinStyleType')]
  DNBuiltinStyleType = type Integer;
  DNBuiltinStyleTypeHelper = record helper for DNBuiltinStyleType
  public const
    Normal = 0;
    RowLevel = 1;
    ColumnLevel = 2;
    Comma = 3;
    Currency = 4;
    Percent = 5;
    Comma1 = 6;
    Currency1 = 7;
    Hyperlink = 8;
    FollowedHyperlink = 9;
    Note = 10;
    WarningText = 11;
    Title = 15;
    Header1 = 16;
    Header2 = 17;
    Header3 = 18;
    Header4 = 19;
    Input = 20;
    Output = 21;
    Calculation = 22;
    CheckCell = 23;
    LinkedCell = 24;
    Total = 25;
    Good = 26;
    Bad = 27;
    Neutral = 28;
    Accent1 = 29;
    TwentyPercentAccent1 = 30;
    FortyPercentAccent1 = 31;
    SixtyPercentAccent1 = 32;
    Accent2 = 33;
    TwentyPercentAccent2 = 34;
    FortyPercentAccent2 = 35;
    SixtyPercentAccent2 = 36;
    Accent3 = 37;
    TwentyPercentAccent3 = 38;
    FortyPercentAccent3 = 39;
    SixtyPercentAccent3 = 40;
    Accent4 = 41;
    TwentyPercentAccent4 = 42;
    FortyPercentAccent4 = 43;
    SixtyPercentAccent4 = 44;
    Accent5 = 45;
    TwentyPercentAccent5 = 46;
    FortyPercentAccent5 = 47;
    SixtyPercentAccent5 = 48;
    Accent6 = 49;
    TwentyPercentAccent6 = 50;
    FortyPercentAccent6 = 51;
    SixtyPercentAccent6 = 52;
    ExplanatoryText = 53;
  end;


  //-------------namespace: Aspose.Cells----------------
  [DNTypeName('Aspose.Cells.CalcModeType')]
  DNCalcModeType = type Integer;
  DNCalcModeTypeHelper = record helper for DNCalcModeType
  public const
    Automatic = 0;
    AutomaticExceptTable = 1;
    Manual = 2;
  end;


  //-------------namespace: Aspose.Cells----------------
  [DNTypeName('Aspose.Cells.CalculationPrecisionStrategy')]
  DNCalculationPrecisionStrategy = type Integer;
  DNCalculationPrecisionStrategyHelper = record helper for DNCalculationPrecisionStrategy
  public const
    None = 0;
    Round = 1;
    Decimal = 2;
  end;


  //-------------namespace: Aspose.Cells----------------
  [DNTypeName('Aspose.Cells.CellBorderType')]
  DNCellBorderType = type Integer;
  DNCellBorderTypeHelper = record helper for DNCellBorderType
  public const
    None = 0;
    Thin = 1;
    Medium = 2;
    Dashed = 3;
    Dotted = 4;
    Thick = 5;
    Double = 6;
    Hair = 7;
    MediumDashed = 8;
    DashDot = 9;
    MediumDashDot = 10;
    DashDotDot = 11;
    MediumDashDotDot = 12;
    SlantedDashDot = 13;
  end;


  //-------------namespace: Aspose.Cells----------------
  [DNTypeName('Aspose.Cells.CellValueFormatStrategy')]
  DNCellValueFormatStrategy = type Integer;
  DNCellValueFormatStrategyHelper = record helper for DNCellValueFormatStrategy
  public const
    None = 0;
    CellStyle = 1;
    DisplayStyle = 2;
  end;


  //-------------namespace: Aspose.Cells----------------
  [DNTypeName('Aspose.Cells.CellValueType')]
  DNCellValueType = type Integer;
  DNCellValueTypeHelper = record helper for DNCellValueType
  public const
    IsBool = 0;
    IsDateTime = 1;
    IsError = 2;
    IsNull = 3;
    IsNumeric = 4;
    IsString = 5;
    IsUnknown = 6;
  end;


  //-------------namespace: Aspose.Cells.Charts----------------
  [DNTypeName('Aspose.Cells.Charts.AxisType')]
  DNAxisType = type Integer;
  DNAxisTypeHelper = record helper for DNAxisType
  public const
    Category = 0;
    Value = 1;
    Series = 2;
  end;


  //-------------namespace: Aspose.Cells.Charts----------------
  [DNTypeName('Aspose.Cells.Charts.BackgroundMode')]
  DNBackgroundMode = type Integer;
  DNBackgroundModeHelper = record helper for DNBackgroundMode
  public const
    Automatic = 0;
    Opaque = 1;
    Transparent = 2;
  end;


  //-------------namespace: Aspose.Cells.Charts----------------
  [DNTypeName('Aspose.Cells.Charts.Bar3DShapeType')]
  DNBar3DShapeType = type Integer;
  DNBar3DShapeTypeHelper = record helper for DNBar3DShapeType
  public const
    Box = 0;
    PyramidToPoint = 1;
    PyramidToMax = 2;
    Cylinder = 3;
    ConeToPoint = 4;
    ConeToMax = 5;
  end;


  //-------------namespace: Aspose.Cells.Charts----------------
  [DNTypeName('Aspose.Cells.Charts.BubbleSizeRepresents')]
  DNBubbleSizeRepresents = type Integer;
  DNBubbleSizeRepresentsHelper = record helper for DNBubbleSizeRepresents
  public const
    SizeIsArea = 0;
    SizeIsWidth = 1;
  end;


  //-------------namespace: Aspose.Cells.Charts----------------
  [DNTypeName('Aspose.Cells.Charts.CategoryType')]
  DNCategoryType = type Integer;
  DNCategoryTypeHelper = record helper for DNCategoryType
  public const
    AutomaticScale = 0;
    CategoryScale = 1;
    TimeScale = 2;
  end;


  //-------------namespace: Aspose.Cells.Charts----------------
  [DNTypeName('Aspose.Cells.Charts.ChartLineFormattingType')]
  DNChartLineFormattingType = type Integer;
  DNChartLineFormattingTypeHelper = record helper for DNChartLineFormattingType
  public const
    Automatic = 0;
    Solid = 1;
    None = 2;
    Gradient = 3;
  end;


  //-------------namespace: Aspose.Cells.Charts----------------
  [DNTypeName('Aspose.Cells.Charts.ChartMarkerType')]
  DNChartMarkerType = type Integer;
  DNChartMarkerTypeHelper = record helper for DNChartMarkerType
  public const
    Automatic = 0;
    Circle = 1;
    Dash = 2;
    Diamond = 3;
    Dot = 4;
    None = 5;
    SquarePlus = 6;
    Square = 7;
    SquareStar = 8;
    Triangle = 9;
    SquareX = 10;
    Picture = 11;
  end;


  //-------------namespace: Aspose.Cells.Charts----------------
  [DNTypeName('Aspose.Cells.Charts.ChartSplitType')]
  DNChartSplitType = type Integer;
  DNChartSplitTypeHelper = record helper for DNChartSplitType
  public const
    Position = 0;
    Value = 1;
    PercentValue = 2;
    Custom = 3;
    Auto = 4;
  end;


  //-------------namespace: Aspose.Cells.Charts----------------
  [DNTypeName('Aspose.Cells.Charts.ChartTextDirectionType')]
  DNChartTextDirectionType = type Integer;
  DNChartTextDirectionTypeHelper = record helper for DNChartTextDirectionType
  public const
    Horizontal = 0;
    Vertical = 1;
    Rotate90 = 2;
    Rotate270 = 3;
    Stacked = 4;
  end;


  //-------------namespace: Aspose.Cells.Charts----------------
  [DNTypeName('Aspose.Cells.Charts.ChartType')]
  DNChartType = type Integer;
  DNChartTypeHelper = record helper for DNChartType
  public const
    Area = 0;
    AreaStacked = 1;
    Area100PercentStacked = 2;
    Area3D = 3;
    Area3DStacked = 4;
    Area3D100PercentStacked = 5;
    Bar = 6;
    BarStacked = 7;
    Bar100PercentStacked = 8;
    Bar3DClustered = 9;
    Bar3DStacked = 10;
    Bar3D100PercentStacked = 11;
    Bubble = 12;
    Bubble3D = 13;
    Column = 14;
    ColumnStacked = 15;
    Column100PercentStacked = 16;
    Column3D = 17;
    Column3DClustered = 18;
    Column3DStacked = 19;
    Column3D100PercentStacked = 20;
    Cone = 21;
    ConeStacked = 22;
    Cone100PercentStacked = 23;
    ConicalBar = 24;
    ConicalBarStacked = 25;
    ConicalBar100PercentStacked = 26;
    ConicalColumn3D = 27;
    Cylinder = 28;
    CylinderStacked = 29;
    Cylinder100PercentStacked = 30;
    CylindricalBar = 31;
    CylindricalBarStacked = 32;
    CylindricalBar100PercentStacked = 33;
    CylindricalColumn3D = 34;
    Doughnut = 35;
    DoughnutExploded = 36;
    Line = 37;
    LineStacked = 38;
    Line100PercentStacked = 39;
    LineWithDataMarkers = 40;
    LineStackedWithDataMarkers = 41;
    Line100PercentStackedWithDataMarkers = 42;
    Line3D = 43;
    Pie = 44;
    Pie3D = 45;
    PiePie = 46;
    PieExploded = 47;
    Pie3DExploded = 48;
    PieBar = 49;
    Pyramid = 50;
    PyramidStacked = 51;
    Pyramid100PercentStacked = 52;
    PyramidBar = 53;
    PyramidBarStacked = 54;
    PyramidBar100PercentStacked = 55;
    PyramidColumn3D = 56;
    Radar = 57;
    RadarWithDataMarkers = 58;
    RadarFilled = 59;
    Scatter = 60;
    ScatterConnectedByCurvesWithDataMarker = 61;
    ScatterConnectedByCurvesWithoutDataMarker = 62;
    ScatterConnectedByLinesWithDataMarker = 63;
    ScatterConnectedByLinesWithoutDataMarker = 64;
    StockHighLowClose = 65;
    StockOpenHighLowClose = 66;
    StockVolumeHighLowClose = 67;
    StockVolumeOpenHighLowClose = 68;
    Surface3D = 69;
    SurfaceWireframe3D = 70;
    SurfaceContour = 71;
    SurfaceContourWireframe = 72;
    BoxWhisker = 73;
    Funnel = 74;
    ParetoLine = 75;
    Sunburst = 76;
    Treemap = 77;
    Waterfall = 78;
    Histogram = 79;
    Map = 80;
  end;


  //-------------namespace: Aspose.Cells.Charts----------------
  [DNTypeName('Aspose.Cells.Charts.CrossType')]
  DNCrossType = type Integer;
  DNCrossTypeHelper = record helper for DNCrossType
  public const
    Automatic = 0;
    Maximum = 1;
    Minimum = 2;
    Custom = 3;
  end;


  //-------------namespace: Aspose.Cells.Charts----------------
  [DNTypeName('Aspose.Cells.Charts.DataLabelsSeparatorType')]
  DNDataLabelsSeparatorType = type Integer;
  DNDataLabelsSeparatorTypeHelper = record helper for DNDataLabelsSeparatorType
  public const
    Auto = 0;
    Space = 1;
    Comma = 2;
    Semicolon = 3;
    Period = 4;
    NewLine = 5;
    Custom = 6;
  end;


  //-------------namespace: Aspose.Cells.Charts----------------
  [DNTypeName('Aspose.Cells.Charts.DataLablesSeparatorType')]
  DNDataLablesSeparatorType = type Integer;
  DNDataLablesSeparatorTypeHelper = record helper for DNDataLablesSeparatorType
  public const
    Auto = 0;
    Space = 1;
    Comma = 2;
    Semicolon = 3;
    Period = 4;
    NewLine = 5;
    Custom = 6;
  end;


  //-------------namespace: Aspose.Cells.Charts----------------
  [DNTypeName('Aspose.Cells.Charts.DisplayUnitType')]
  DNDisplayUnitType = type Integer;
  DNDisplayUnitTypeHelper = record helper for DNDisplayUnitType
  public const
    None = 0;
    Hundreds = 1;
    Thousands = 2;
    TenThousands = 3;
    HundredThousands = 4;
    Millions = 5;
    TenMillions = 6;
    HundredMillions = 7;
    Billions = 8;
    Trillions = 9;
    Percentage = 10;
    Cust = 11;
  end;


  //-------------namespace: Aspose.Cells.Charts----------------
  [DNTypeName('Aspose.Cells.Charts.ErrorBarDisplayType')]
  DNErrorBarDisplayType = type Integer;
  DNErrorBarDisplayTypeHelper = record helper for DNErrorBarDisplayType
  public const
    Both = 0;
    Minus = 1;
    None = 2;
    Plus = 3;
  end;


  //-------------namespace: Aspose.Cells.Charts----------------
  [DNTypeName('Aspose.Cells.Charts.ErrorBarType')]
  DNErrorBarType = type Integer;
  DNErrorBarTypeHelper = record helper for DNErrorBarType
  public const
    Custom = 0;
    FixedValue = 1;
    Percent = 2;
    StDev = 3;
    StError = 4;
  end;


  //-------------namespace: Aspose.Cells.Charts----------------
  [DNTypeName('Aspose.Cells.Charts.FormattingType')]
  DNFormattingType = type Integer;
  DNFormattingTypeHelper = record helper for DNFormattingType
  public const
    Automatic = 0;
    None = 1;
    Custom = 2;
  end;


  //-------------namespace: Aspose.Cells.Charts----------------
  [DNTypeName('Aspose.Cells.Charts.LabelPositionType')]
  DNLabelPositionType = type Integer;
  DNLabelPositionTypeHelper = record helper for DNLabelPositionType
  public const
    Center = 0;
    InsideBase = 1;
    InsideEnd = 2;
    OutsideEnd = 3;
    Above = 4;
    Below = 5;
    Left = 6;
    Right = 7;
    BestFit = 8;
    Moved = 9;
  end;


  //-------------namespace: Aspose.Cells.Charts----------------
  [DNTypeName('Aspose.Cells.Charts.LegendPositionType')]
  DNLegendPositionType = type Integer;
  DNLegendPositionTypeHelper = record helper for DNLegendPositionType
  public const
    Bottom = 0;
    Corner = 1;
    Top = 2;
    Right = 3;
    Left = 4;
    NotDocked = 7;
  end;


  //-------------namespace: Aspose.Cells.Charts----------------
  [DNTypeName('Aspose.Cells.Charts.MapChartLabelLayout')]
  DNMapChartLabelLayout = type Integer;
  DNMapChartLabelLayoutHelper = record helper for DNMapChartLabelLayout
  public const
    BestFitOnly = 0;
    ShowAll = 1;
    None = 2;
  end;


  //-------------namespace: Aspose.Cells.Charts----------------
  [DNTypeName('Aspose.Cells.Charts.MapChartProjectionType')]
  DNMapChartProjectionType = type Integer;
  DNMapChartProjectionTypeHelper = record helper for DNMapChartProjectionType
  public const
    Automatic = 0;
    Mercator = 1;
    Miller = 2;
    Albers = 3;
  end;


  //-------------namespace: Aspose.Cells.Charts----------------
  [DNTypeName('Aspose.Cells.Charts.MapChartRegionType')]
  DNMapChartRegionType = type Integer;
  DNMapChartRegionTypeHelper = record helper for DNMapChartRegionType
  public const
    Automatic = 0;
    DataOnly = 1;
    CountryRegionList = 2;
    World = 3;
  end;


  //-------------namespace: Aspose.Cells.Charts----------------
  [DNTypeName('Aspose.Cells.Charts.PlotDataByType')]
  DNPlotDataByType = type Integer;
  DNPlotDataByTypeHelper = record helper for DNPlotDataByType
  public const
    Row = 0;
    Column = 1;
  end;


  //-------------namespace: Aspose.Cells.Charts----------------
  [DNTypeName('Aspose.Cells.Charts.PlotEmptyCellsType')]
  DNPlotEmptyCellsType = type Integer;
  DNPlotEmptyCellsTypeHelper = record helper for DNPlotEmptyCellsType
  public const
    NotPlotted = 0;
    Zero = 1;
    Interpolated = 2;
  end;


  //-------------namespace: Aspose.Cells.Charts----------------
  [DNTypeName('Aspose.Cells.Charts.QuartileCalculationType')]
  DNQuartileCalculationType = type Integer;
  DNQuartileCalculationTypeHelper = record helper for DNQuartileCalculationType
  public const
    Exclusive = 0;
    Inclusive = 1;
  end;


  //-------------namespace: Aspose.Cells.Charts----------------
  [DNTypeName('Aspose.Cells.Charts.SparklineAxisMinMaxType')]
  DNSparklineAxisMinMaxType = type Integer;
  DNSparklineAxisMinMaxTypeHelper = record helper for DNSparklineAxisMinMaxType
  public const
    AutoIndividual = 0;
    Group = 1;
    Custom = 2;
  end;


  //-------------namespace: Aspose.Cells.Charts----------------
  [DNTypeName('Aspose.Cells.Charts.SparklinePresetStyleType')]
  DNSparklinePresetStyleType = type Integer;
  DNSparklinePresetStyleTypeHelper = record helper for DNSparklinePresetStyleType
  public const
    Style1 = 0;
    Style2 = 1;
    Style3 = 2;
    Style4 = 3;
    Style5 = 4;
    Style6 = 5;
    Style7 = 6;
    Style8 = 7;
    Style9 = 8;
    Style10 = 9;
    Style11 = 10;
    Style12 = 11;
    Style13 = 12;
    Style14 = 13;
    Style15 = 14;
    Style16 = 15;
    Style17 = 16;
    Style18 = 17;
    Style19 = 18;
    Style20 = 19;
    Style21 = 20;
    Style22 = 21;
    Style23 = 22;
    Style24 = 23;
    Style25 = 24;
    Style26 = 25;
    Style27 = 26;
    Style28 = 27;
    Style29 = 28;
    Style30 = 29;
    Style31 = 30;
    Style32 = 31;
    Style33 = 32;
    Style34 = 33;
    Style35 = 34;
    Style36 = 35;
    Custom = 36;
  end;


  //-------------namespace: Aspose.Cells.Charts----------------
  [DNTypeName('Aspose.Cells.Charts.SparklineType')]
  DNSparklineType = type Integer;
  DNSparklineTypeHelper = record helper for DNSparklineType
  public const
    Line = 0;
    Column = 1;
    Stacked = 2;
  end;


  //-------------namespace: Aspose.Cells.Charts----------------
  [DNTypeName('Aspose.Cells.Charts.TickLabelPositionType')]
  DNTickLabelPositionType = type Integer;
  DNTickLabelPositionTypeHelper = record helper for DNTickLabelPositionType
  public const
    High = 0;
    Low = 1;
    NextToAxis = 2;
    None = 3;
  end;


  //-------------namespace: Aspose.Cells.Charts----------------
  [DNTypeName('Aspose.Cells.Charts.TickMarkType')]
  DNTickMarkType = type Integer;
  DNTickMarkTypeHelper = record helper for DNTickMarkType
  public const
    Cross = 0;
    Inside = 1;
    None = 2;
    Outside = 3;
  end;


  //-------------namespace: Aspose.Cells.Charts----------------
  [DNTypeName('Aspose.Cells.Charts.TimeUnit')]
  DNTimeUnit = type Integer;
  DNTimeUnitHelper = record helper for DNTimeUnit
  public const
    Days = 0;
    Months = 1;
    Years = 2;
  end;


  //-------------namespace: Aspose.Cells.Charts----------------
  [DNTypeName('Aspose.Cells.Charts.TrendlineType')]
  DNTrendlineType = type Integer;
  DNTrendlineTypeHelper = record helper for DNTrendlineType
  public const
    Exponential = 0;
    Linear = 1;
    Logarithmic = 2;
    MovingAverage = 3;
    Polynomial = 4;
    Power = 5;
  end;


  //-------------namespace: Aspose.Cells----------------
  [DNTypeName('Aspose.Cells.ColorType')]
  DNColorType = type Integer;
  DNColorTypeHelper = record helper for DNColorType
  public const
    Automatic = 0;
    AutomaticIndex = 1;
    RGB = 2;
    IndexedColor = 3;
    Theme = 4;
  end;


  //-------------namespace: Aspose.Cells----------------
  [DNTypeName('Aspose.Cells.ConsolidationFunction')]
  DNConsolidationFunction = type Integer;
  DNConsolidationFunctionHelper = record helper for DNConsolidationFunction
  public const
    Sum = 0;
    Count = 1;
    Average = 2;
    Max = 3;
    Min = 4;
    Product = 5;
    CountNums = 6;
    StdDev = 7;
    StdDevp = 8;
    Var_ = 9;
    Varp = 10;
    DistinctCount = 11;
  end;


  //-------------namespace: Aspose.Cells----------------
  [DNTypeName('Aspose.Cells.ContentDisposition')]
  DNContentDisposition = type Integer;
  DNContentDispositionHelper = record helper for DNContentDisposition
  public const
    Inline_ = 0;
    Attachment = 1;
  end;


  //-------------namespace: Aspose.Cells----------------
  [DNTypeName('Aspose.Cells.CopyFormatType')]
  DNCopyFormatType = type Integer;
  DNCopyFormatTypeHelper = record helper for DNCopyFormatType
  public const
    SameAsAbove = 0;
    SameAsBelow = 1;
    Clear = 2;
  end;


  //-------------namespace: Aspose.Cells----------------
  [DNTypeName('Aspose.Cells.CountryCode')]
  DNCountryCode = type Integer;
  DNCountryCodeHelper = record helper for DNCountryCode
  public const
    Default_ = 0;
    USA = 1;
    Canada = 2;
    LatinAmeric = 3;
    Russia = 7;
    Egypt = 20;
    Greece = 30;
    Netherlands = 31;
    Belgium = 32;
    France = 33;
    Spain = 34;
    Hungary = 36;
    Italy = 39;
    Switzerland = 41;
    Austria = 43;
    UnitedKingdom = 44;
    Denmark = 45;
    Sweden = 46;
    Norway = 47;
    Poland = 48;
    Germany = 49;
    Mexico = 52;
    Brazil = 55;
    Australia = 61;
    NewZealand = 64;
    Thailand = 66;
    Japan = 81;
    SouthKorea = 82;
    VietNam = 84;
    China = 86;
    Turkey = 90;
    India = 91;
    Algeria = 213;
    Morocco = 216;
    Libya = 218;
    Portugal = 351;
    Iceland = 354;
    Finland = 358;
    Czech = 420;
    Taiwan = 886;
    Lebanon = 961;
    Jordan = 962;
    Syria = 963;
    Iraq = 964;
    Kuwait = 965;
    Saudi = 966;
    UnitedArabEmirates = 971;
    Israel = 972;
    Qatar = 974;
    Iran = 981;
  end;


  //-------------namespace: Aspose.Cells----------------
  [DNTypeName('Aspose.Cells.DataBarAxisPosition')]
  DNDataBarAxisPosition = type Integer;
  DNDataBarAxisPositionHelper = record helper for DNDataBarAxisPosition
  public const
    Automatic = 0;
    Midpoint = 1;
    None = 2;
  end;


  //-------------namespace: Aspose.Cells----------------
  [DNTypeName('Aspose.Cells.DataBarBorderType')]
  DNDataBarBorderType = type Integer;
  DNDataBarBorderTypeHelper = record helper for DNDataBarBorderType
  public const
    None = 0;
    Solid = 1;
  end;


  //-------------namespace: Aspose.Cells----------------
  [DNTypeName('Aspose.Cells.DataBarFillType')]
  DNDataBarFillType = type Integer;
  DNDataBarFillTypeHelper = record helper for DNDataBarFillType
  public const
    Solid = 0;
    Gradient = 1;
  end;


  //-------------namespace: Aspose.Cells----------------
  [DNTypeName('Aspose.Cells.DataBarNegativeColorType')]
  DNDataBarNegativeColorType = type Integer;
  DNDataBarNegativeColorTypeHelper = record helper for DNDataBarNegativeColorType
  public const
    Color = 0;
    SameAsPositive = 1;
  end;


  //-------------namespace: Aspose.Cells----------------
  [DNTypeName('Aspose.Cells.DateTimeGroupingType')]
  DNDateTimeGroupingType = type Integer;
  DNDateTimeGroupingTypeHelper = record helper for DNDateTimeGroupingType
  public const
    Day = 0;
    Hour = 1;
    Minute = 2;
    Month = 3;
    Second = 4;
    Year = 5;
  end;


  //-------------namespace: Aspose.Cells----------------
  [DNTypeName('Aspose.Cells.DefaultEditLanguage')]
  DNDefaultEditLanguage = type Integer;
  DNDefaultEditLanguageHelper = record helper for DNDefaultEditLanguage
  public const
    Auto = 0;
    English = 1;
    CJK = 2;
  end;


  //-------------namespace: Aspose.Cells.DigitalSignatures----------------
  [DNTypeName('Aspose.Cells.DigitalSignatures.XAdESType')]
  DNXAdESType = type Integer;
  DNXAdESTypeHelper = record helper for DNXAdESType
  public const
    None = 0;
    XAdES = 1;
  end;


  //-------------namespace: Aspose.Cells----------------
  [DNTypeName('Aspose.Cells.DirectoryType')]
  DNDirectoryType = type Integer;
  DNDirectoryTypeHelper = record helper for DNDirectoryType
  public const
    Volume = 0;
    SameVolume = 1;
    DownDirectory = 2;
    UpDirectory = 3;
  end;


  //-------------namespace: Aspose.Cells----------------
  [DNTypeName('Aspose.Cells.DisplayDrawingObjects')]
  DNDisplayDrawingObjects = type Integer;
  DNDisplayDrawingObjectsHelper = record helper for DNDisplayDrawingObjects
  public const
    DisplayShapes = 0;
    Placeholders = 1;
    Hide = 2;
  end;


  //-------------namespace: Aspose.Cells.Drawing.ActiveXControls----------------
  [DNTypeName('Aspose.Cells.Drawing.ActiveXControls.ActiveXPersistenceType')]
  DNActiveXPersistenceType = type Integer;
  DNActiveXPersistenceTypeHelper = record helper for DNActiveXPersistenceType
  public const
    PropertyBag = 0;
    Storage = 1;
    Stream = 2;
    StreamInit = 3;
  end;


  //-------------namespace: Aspose.Cells.Drawing.ActiveXControls----------------
  [DNTypeName('Aspose.Cells.Drawing.ActiveXControls.ControlBorderType')]
  DNControlBorderType = type Integer;
  DNControlBorderTypeHelper = record helper for DNControlBorderType
  public const
    None = 0;
    Single = 1;
  end;


  //-------------namespace: Aspose.Cells.Drawing.ActiveXControls----------------
  [DNTypeName('Aspose.Cells.Drawing.ActiveXControls.ControlCaptionAlignmentType')]
  DNControlCaptionAlignmentType = type Integer;
  DNControlCaptionAlignmentTypeHelper = record helper for DNControlCaptionAlignmentType
  public const
    Left = 0;
    Right = 1;
  end;


  //-------------namespace: Aspose.Cells.Drawing.ActiveXControls----------------
  [DNTypeName('Aspose.Cells.Drawing.ActiveXControls.ControlListStyle')]
  DNControlListStyle = type Integer;
  DNControlListStyleHelper = record helper for DNControlListStyle
  public const
    Plain = 0;
    Option = 1;
  end;


  //-------------namespace: Aspose.Cells.Drawing.ActiveXControls----------------
  [DNTypeName('Aspose.Cells.Drawing.ActiveXControls.ControlMatchEntryType')]
  DNControlMatchEntryType = type Integer;
  DNControlMatchEntryTypeHelper = record helper for DNControlMatchEntryType
  public const
    FirstLetter = 0;
    Complete = 1;
    None = 2;
  end;


  //-------------namespace: Aspose.Cells.Drawing.ActiveXControls----------------
  [DNTypeName('Aspose.Cells.Drawing.ActiveXControls.ControlMousePointerType')]
  DNControlMousePointerType = type Integer;
  DNControlMousePointerTypeHelper = record helper for DNControlMousePointerType
  public const
    Default_ = 0;
    Arrow = 1;
    Cross = 2;
    IBeam = 3;
    SizeNESW = 6;
    SizeNS = 7;
    SizeNWSE = 8;
    SizeWE = 9;
    UpArrow = 10;
    HourGlass = 11;
    NoDrop = 12;
    AppStarting = 13;
    Help = 14;
    SizeAll = 15;
    Custom = 99;
  end;


  //-------------namespace: Aspose.Cells.Drawing.ActiveXControls----------------
  [DNTypeName('Aspose.Cells.Drawing.ActiveXControls.ControlPictureAlignmentType')]
  DNControlPictureAlignmentType = type Integer;
  DNControlPictureAlignmentTypeHelper = record helper for DNControlPictureAlignmentType
  public const
    TopLeft = 0;
    TopRight = 1;
    Center = 2;
    BottomLeft = 3;
    BottomRight = 4;
  end;


  //-------------namespace: Aspose.Cells.Drawing.ActiveXControls----------------
  [DNTypeName('Aspose.Cells.Drawing.ActiveXControls.ControlPicturePositionType')]
  DNControlPicturePositionType = type Integer;
  DNControlPicturePositionTypeHelper = record helper for DNControlPicturePositionType
  public const
    RightTop = 2;
    BelowLeft = 6;
    BelowCenter = 65543;
    LeftTop = 131072;
    BelowRight = 131080;
    RightCenter = 196613;
    Center = 262148;
    LeftCenter = 327683;
    AboveLeft = 393216;
    RightBottom = 393224;
    AboveCenter = 458753;
    AboveRight = 524290;
    LeftBottom = 524294;
  end;


  //-------------namespace: Aspose.Cells.Drawing.ActiveXControls----------------
  [DNTypeName('Aspose.Cells.Drawing.ActiveXControls.ControlPictureSizeMode')]
  DNControlPictureSizeMode = type Integer;
  DNControlPictureSizeModeHelper = record helper for DNControlPictureSizeMode
  public const
    Clip = 0;
    Stretch = 1;
    Zoom = 3;
  end;


  //-------------namespace: Aspose.Cells.Drawing.ActiveXControls----------------
  [DNTypeName('Aspose.Cells.Drawing.ActiveXControls.ControlScrollBarType')]
  DNControlScrollBarType = type Integer;
  DNControlScrollBarTypeHelper = record helper for DNControlScrollBarType
  public const
    None = 0;
    Horizontal = 1;
    BarsVertical = 2;
    BarsBoth = 3;
  end;


  //-------------namespace: Aspose.Cells.Drawing.ActiveXControls----------------
  [DNTypeName('Aspose.Cells.Drawing.ActiveXControls.ControlScrollOrientation')]
  DNControlScrollOrientation = type Integer;
  DNControlScrollOrientationHelper = record helper for DNControlScrollOrientation
  public const
    Vertical = 0;
    Horizontal = 1;
    Auto = 3;
  end;


  //-------------namespace: Aspose.Cells.Drawing.ActiveXControls----------------
  [DNTypeName('Aspose.Cells.Drawing.ActiveXControls.ControlSpecialEffectType')]
  DNControlSpecialEffectType = type Integer;
  DNControlSpecialEffectTypeHelper = record helper for DNControlSpecialEffectType
  public const
    Flat = 0;
    Raised = 1;
    Sunken = 2;
    Etched = 3;
    Bump = 6;
  end;


  //-------------namespace: Aspose.Cells.Drawing.ActiveXControls----------------
  [DNTypeName('Aspose.Cells.Drawing.ActiveXControls.ControlType')]
  DNControlType = type Integer;
  DNControlTypeHelper = record helper for DNControlType
  public const
    CommandButton = 0;
    ComboBox = 1;
    CheckBox = 2;
    ListBox = 3;
    TextBox = 4;
    SpinButton = 5;
    RadioButton = 6;
    Label_ = 7;
    Image = 8;
    ToggleButton = 9;
    ScrollBar = 10;
    Unknown = 11;
  end;


  //-------------namespace: Aspose.Cells.Drawing.ActiveXControls----------------
  [DNTypeName('Aspose.Cells.Drawing.ActiveXControls.DropButtonStyle')]
  DNDropButtonStyle = type Integer;
  DNDropButtonStyleHelper = record helper for DNDropButtonStyle
  public const
    Plain = 0;
    Arrow = 1;
    Ellipsis = 2;
    Reduce = 3;
  end;


  //-------------namespace: Aspose.Cells.Drawing.ActiveXControls----------------
  [DNTypeName('Aspose.Cells.Drawing.ActiveXControls.InputMethodEditorMode')]
  DNInputMethodEditorMode = type Integer;
  DNInputMethodEditorModeHelper = record helper for DNInputMethodEditorMode
  public const
    NoControl = 0;
    On_ = 1;
    Off = 2;
    Disable = 3;
    Hiragana = 4;
    Katakana = 5;
    KatakanaHalf = 6;
    AlphaFull = 7;
    Alpha = 8;
    HangulFull = 9;
    Hangul = 10;
    HanziFull = 11;
    Hanzi = 12;
  end;


  //-------------namespace: Aspose.Cells.Drawing.ActiveXControls----------------
  [DNTypeName('Aspose.Cells.Drawing.ActiveXControls.ShowDropButtonType')]
  DNShowDropButtonType = type Integer;
  DNShowDropButtonTypeHelper = record helper for DNShowDropButtonType
  public const
    Never = 0;
    Focus = 1;
    Always = 2;
  end;


  //-------------namespace: Aspose.Cells.Drawing----------------
  [DNTypeName('Aspose.Cells.Drawing.AutoShapeType')]
  DNAutoShapeType = type Integer;
  DNAutoShapeTypeHelper = record helper for DNAutoShapeType
  public const
    NotPrimitive = 0;
    Rectangle = 1;
    RoundedRectangle = 2;
    Oval = 3;
    Diamond = 4;
    IsoscelesTriangle = 5;
    RightTriangle = 6;
    Parallelogram = 7;
    Trapezoid = 8;
    Hexagon = 9;
    Octagon = 10;
    Cross = 11;
    Star5 = 12;
    RightArrow = 13;
    HomePlate = 15;
    Cube = 16;
    Balloon = 17;
    Seal = 18;
    Arc = 19;
    Line = 20;
    Plaque = 21;
    Can = 22;
    Donut = 23;
    TextSimple = 24;
    TextOctagon = 25;
    TextHexagon = 26;
    TextCurve = 27;
    TextWave = 28;
    TextRing = 29;
    TextOnCurve = 30;
    msosptTextOnRing = 31;
    StraightConnector = 32;
    BentConnector2 = 33;
    ElbowConnector = 34;
    BentConnector4 = 35;
    BentConnector5 = 36;
    CurvedConnector2 = 37;
    CurvedConnector = 38;
    CurvedConnector4 = 39;
    CurvedConnector5 = 40;
    LineCalloutNoBorder2 = 41;
    LineCalloutNoBorder3 = 42;
    LineCalloutNoBorder4 = 43;
    LineCalloutWithAccentBar2 = 44;
    LineCalloutWithAccentBar3 = 45;
    LineCalloutWithAccentBar4 = 46;
    LineCalloutWithBorder2 = 47;
    LineCalloutWithBorder3 = 48;
    LineCalloutWithBorder4 = 49;
    LineCalloutWithBorderAndAccentBar2 = 50;
    LineCalloutWithBorderAndAccentBar3 = 51;
    LineCalloutWithBorderAndAccentBar4 = 52;
    DownRibbon = 53;
    UpRibbon = 54;
    Chevron = 55;
    RegularPentagon = 56;
    NoSymbol = 57;
    Star8 = 58;
    Star16 = 59;
    Star32 = 60;
    RectangularCallout = 61;
    RoundedRectangularCallout = 62;
    OvalCallout = 63;
    Wave = 64;
    FoldedCorner = 65;
    LeftArrow = 66;
    DownArrow = 67;
    UpArrow = 68;
    LeftRightArrow = 69;
    UpDownArrow = 70;
    Explosion1 = 71;
    Explosion2 = 72;
    LightningBolt = 73;
    Heart = 74;
    PictureFrame = 75;
    QuadArrow = 76;
    LeftArrowCallout = 77;
    RightArrowCallout = 78;
    UpArrowCallout = 79;
    DownArrowCallout = 80;
    LeftRightArrowCallout = 81;
    UpDownArrowCallout = 82;
    QuadArrowCallout = 83;
    Bevel = 84;
    LeftBracket = 85;
    RightBracket = 86;
    LeftBrace = 87;
    RightBrace = 88;
    LeftUpArrow = 89;
    BentUpArrow = 90;
    BentArrow = 91;
    Star24 = 92;
    StripedRightArrow = 93;
    NotchedRightArrow = 94;
    BlockArc = 95;
    SmileyFace = 96;
    VerticalScroll = 97;
    HorizontalScroll = 98;
    CircularArrow = 99;
    NotchedCircularArrow = 100;
    UTurnArrow = 101;
    CurvedRightArrow = 102;
    CurvedLeftArrow = 103;
    CurvedUpArrow = 104;
    CurvedDownArrow = 105;
    CloudCallout = 106;
    CurvedDownRibbon = 107;
    CurvedUpRibbon = 108;
    FlowChartProcess = 109;
    FlowChartDecision = 110;
    FlowChartData = 111;
    FlowChartPredefinedProcess = 112;
    FlowChartInternalStorage = 113;
    FlowChartDocument = 114;
    FlowChartMultidocument = 115;
    FlowChartTerminator = 116;
    FlowChartPreparation = 117;
    FlowChartManualInput = 118;
    FlowChartManualOperation = 119;
    FlowChartConnector = 120;
    FlowChartCard = 121;
    FlowChartPunchedTape = 122;
    FlowChartSummingJunction = 123;
    FlowChartOr = 124;
    FlowChartCollate = 125;
    FlowChartSort = 126;
    FlowChartExtract = 127;
    FlowChartMerge = 128;
    FlowChartOfflineStorage = 129;
    FlowChartStoredData = 130;
    FlowChartSequentialAccessStorage = 131;
    FlowChartMagneticDisk = 132;
    FlowChartDirectAccessStorage = 133;
    FlowChartDisplay = 134;
    FlowChartDelay = 135;
    TextPlainText = 136;
    TextStop = 137;
    TextTriangle = 138;
    TextTriangleInverted = 139;
    TextChevron = 140;
    TextChevronInverted = 141;
    TextRingInside = 142;
    TextRingOutside = 143;
    TextArchUpCurve = 144;
    TextArchDownCurve = 145;
    TextCircleCurve = 146;
    TextButtonCurve = 147;
    TextArchUpPour = 148;
    TextArchDownPour = 149;
    TextCirclePour = 150;
    TextButtonPour = 151;
    TextCurveUp = 152;
    TextCurveDown = 153;
    TextCascadeUp = 154;
    TextCascadeDown = 155;
    TextWave1 = 156;
    TextWave2 = 157;
    TextDoubleWave1 = 158;
    TextWave3 = 158;
    TextWave4 = 159;
    TextDoubleWave2 = 159;
    TextInflate = 160;
    TextDeflate = 161;
    TextInflateBottom = 162;
    TextDeflateBottom = 163;
    TextInflateTop = 164;
    TextDeflateTop = 165;
    TextDeflateInflate = 166;
    TextDeflateInflateDeflate = 167;
    TextFadeRight = 168;
    TextFadeLeft = 169;
    TextFadeUp = 170;
    TextFadeDown = 171;
    TextSlantUp = 172;
    TextSlantDown = 173;
    TextCanUp = 174;
    TextCanDown = 175;
    FlowChartAlternateProcess = 176;
    FlowChartOffpageConnector = 177;
    LineCalloutNoBorder1 = 178;
    LineCalloutWithAccentBar1 = 179;
    LineCalloutWithBorder1 = 180;
    LineCalloutWithBorderAndAccentBar1 = 181;
    LeftRightUpArrow = 182;
    Sun = 183;
    Moon = 184;
    DoubleBracket = 185;
    DoubleBrace = 186;
    Star4 = 187;
    DoubleWave = 188;
    BlankActionButton = 189;
    HomeActionButton = 190;
    HelpActionButton = 191;
    InformationActionButton = 192;
    ForwardNextActionButton = 193;
    BackPreviousActionButton = 194;
    EndActionButton = 195;
    BeginningActionButton = 196;
    ReturnActionButton = 197;
    DocumentActionButton = 198;
    SoundActionButton = 199;
    MovieActionButton = 200;
    HostControl = 201;
    TextBox = 202;
    Heptagon = 2049;
    Decagon = 2050;
    Dodecagon = 2051;
    Star6 = 2052;
    Star7 = 2053;
    Star10 = 2054;
    Star12 = 2055;
    RoundSingleCornerRectangle = 2056;
    RoundSameSideCornerRectangle = 2057;
    RoundDiagonalCornerRectangle = 2058;
    SnipRoundSingleCornerRectangle = 2059;
    SnipSingleCornerRectangle = 2060;
    SnipSameSideCornerRectangle = 2061;
    SnipDiagonalCornerRectangle = 2062;
    Teardrop = 2063;
    Pie = 2064;
    HalfFrame = 2066;
    L_Shape = 2067;
    DiagonalStripe = 2068;
    Chord = 2069;
    Cloud = 2070;
    MathPlus = 2071;
    MathMinus = 2072;
    MathMultiply = 2073;
    MathDivide = 2074;
    MathEqual = 2075;
    MathNotEqual = 2076;
    LineInv = 2077;
    NonIsoscelesTrapezoid = 2078;
    PieWedge = 2079;
    LeftCircularArrow = 2080;
    LeftRightCircularArrow = 2081;
    SwooshArrow = 2082;
    LeftRightRibbon = 2083;
    TextNoShape = 2084;
    Gear6 = 2097;
    Gear9 = 2098;
    Funnel = 2099;
    CornerTabs = 2100;
    SquareTabs = 2101;
    PlaqueTabs = 2102;
    ChartX = 2103;
    ChartStar = 2104;
    ChartPlus = 2105;
    Frame = 2106;
    Model3D = 2107;
    RoundCallout = 2108;
    TextArchLeftPour = 2109;
    TextArchRightPour = 2110;
    TextArchLeftCurve = 2111;
    TextArchRightCurve = 2112;
    Unknown = 4095;
  end;


  //-------------namespace: Aspose.Cells.Drawing----------------
  [DNTypeName('Aspose.Cells.Drawing.BevelPresetType')]
  DNBevelPresetType = type Integer;
  DNBevelPresetTypeHelper = record helper for DNBevelPresetType
  public const
    None = 0;
    Angle = 1;
    ArtDeco = 2;
    Circle = 3;
    Convex = 4;
    CoolSlant = 5;
    Cross = 6;
    Divot = 7;
    HardEdge = 8;
    RelaxedInset = 9;
    Riblet = 10;
    Slope = 11;
    SoftRound = 12;
  end;


  //-------------namespace: Aspose.Cells.Drawing----------------
  [DNTypeName('Aspose.Cells.Drawing.BevelType')]
  DNBevelType = type Integer;
  DNBevelTypeHelper = record helper for DNBevelType
  public const
    None = 0;
    Angle = 1;
    ArtDeco = 2;
    Circle = 3;
    Convex = 4;
    CoolSlant = 5;
    Cross = 6;
    Divot = 7;
    HardEdge = 8;
    RelaxedInset = 9;
    Riblet = 10;
    Slope = 11;
    SoftRound = 12;
  end;


  //-------------namespace: Aspose.Cells.Drawing----------------
  [DNTypeName('Aspose.Cells.Drawing.CheckValueType')]
  DNCheckValueType = type Integer;
  DNCheckValueTypeHelper = record helper for DNCheckValueType
  public const
    UnChecked = 0;
    Checked = 1;
    Mixed = 2;
  end;


  //-------------namespace: Aspose.Cells.Drawing----------------
  [DNTypeName('Aspose.Cells.Drawing.DataLabelShapeType')]
  DNDataLabelShapeType = type Integer;
  DNDataLabelShapeTypeHelper = record helper for DNDataLabelShapeType
  public const
    Rect = 0;
    RoundRect = 1;
    Ellipse = 2;
    RightArrowCallout = 3;
    DownArrowCallout = 4;
    LeftArrowCallout = 5;
    UpArrowCallout = 6;
    WedgeRectCallout = 7;
    WedgeRoundRectCallout = 8;
    WedgeEllipseCallout = 9;
    LineCallout = 10;
    BentLineCallout = 11;
    LineWithAccentBarCallout = 12;
    BentLineWithAccentBarCallout = 13;
  end;


  //-------------namespace: Aspose.Cells.Drawing----------------
  [DNTypeName('Aspose.Cells.Drawing.FillPattern')]
  DNFillPattern = type Integer;
  DNFillPatternHelper = record helper for DNFillPattern
  public const
    None = 0;
    Solid = 1;
    Gray5 = 2;
    Gray10 = 3;
    Gray20 = 4;
    Gray30 = 5;
    Gray40 = 6;
    Gray50 = 7;
    Gray60 = 8;
    Gray70 = 9;
    Gray75 = 10;
    Gray80 = 11;
    Gray90 = 12;
    Gray25 = 13;
    LightDownwardDiagonal = 14;
    LightUpwardDiagonal = 15;
    DarkDownwardDiagonal = 16;
    DarkUpwardDiagonal = 17;
    WideDownwardDiagonal = 18;
    WideUpwardDiagonal = 19;
    LightVertical = 20;
    LightHorizontal = 21;
    NarrowVertical = 22;
    NarrowHorizontal = 23;
    DarkVertical = 24;
    DarkHorizontal = 25;
    DashedDownwardDiagonal = 26;
    DashedUpwardDiagonal = 27;
    DashedVertical = 28;
    DashedHorizontal = 29;
    SmallConfetti = 30;
    LargeConfetti = 31;
    ZigZag = 32;
    Wave = 33;
    DiagonalBrick = 34;
    HorizontalBrick = 35;
    Weave = 36;
    Plaid = 37;
    Divot = 38;
    DottedGrid = 39;
    DottedDiamond = 40;
    Shingle = 41;
    Trellis = 42;
    Sphere = 43;
    SmallGrid = 44;
    LargeGrid = 45;
    SmallCheckerBoard = 46;
    LargeCheckerBoard = 47;
    OutlinedDiamond = 48;
    SolidDiamond = 49;
    Unknown = 50;
  end;


  //-------------namespace: Aspose.Cells.Drawing----------------
  [DNTypeName('Aspose.Cells.Drawing.FillPictureType')]
  DNFillPictureType = type Integer;
  DNFillPictureTypeHelper = record helper for DNFillPictureType
  public const
    Stretch = 0;
    Stack = 1;
    StackAndScale = 2;
  end;


  //-------------namespace: Aspose.Cells.Drawing----------------
  [DNTypeName('Aspose.Cells.Drawing.FillType')]
  DNFillType = type Integer;
  DNFillTypeHelper = record helper for DNFillType
  public const
    Automatic = 0;
    None = 1;
    Solid = 2;
    Gradient = 3;
    Texture = 4;
    Pattern = 5;
    Group = 6;
  end;


  //-------------namespace: Aspose.Cells.Drawing----------------
  [DNTypeName('Aspose.Cells.Drawing.FormatSetType')]
  DNFormatSetType = type Integer;
  DNFormatSetTypeHelper = record helper for DNFormatSetType
  public const
    None = 0;
    IsGradientSet = 1;
    IsTextureSet = 2;
    IsPatternSet = 3;
  end;


  //-------------namespace: Aspose.Cells.Drawing----------------
  [DNTypeName('Aspose.Cells.Drawing.GradientColorType')]
  DNGradientColorType = type Integer;
  DNGradientColorTypeHelper = record helper for DNGradientColorType
  public const
    None = 0;
    OneColor = 1;
    PresetColors = 2;
    TwoColors = 3;
  end;


  //-------------namespace: Aspose.Cells.Drawing----------------
  [DNTypeName('Aspose.Cells.Drawing.GradientDirectionType')]
  DNGradientDirectionType = type Integer;
  DNGradientDirectionTypeHelper = record helper for DNGradientDirectionType
  public const
    FromUpperLeftCorner = 0;
    FromUpperRightCorner = 1;
    FromLowerLeftCorner = 2;
    FromLowerRightCorner = 3;
    FromCenter = 4;
    Unknown = 5;
  end;


  //-------------namespace: Aspose.Cells.Drawing----------------
  [DNTypeName('Aspose.Cells.Drawing.GradientFillType')]
  DNGradientFillType = type Integer;
  DNGradientFillTypeHelper = record helper for DNGradientFillType
  public const
    Linear = 0;
    Radial = 1;
    Rectangle = 2;
    Path = 3;
  end;


  //-------------namespace: Aspose.Cells.Drawing----------------
  [DNTypeName('Aspose.Cells.Drawing.GradientPresetType')]
  DNGradientPresetType = type Integer;
  DNGradientPresetTypeHelper = record helper for DNGradientPresetType
  public const
    Brass = 0;
    CalmWater = 1;
    Chrome = 2;
    ChromeII = 3;
    Daybreak = 4;
    Desert = 5;
    EarlySunset = 6;
    Fire = 7;
    Fog = 8;
    Gold = 9;
    GoldII = 10;
    Horizon = 11;
    LateSunset = 12;
    Mahogany = 13;
    Moss = 14;
    Nightfall = 15;
    Ocean = 16;
    Parchment = 17;
    Peacock = 18;
    Rainbow = 19;
    RainbowII = 20;
    Sapphire = 21;
    Silver = 22;
    Wheat = 23;
    Unknown = 24;
  end;


  //-------------namespace: Aspose.Cells.Drawing----------------
  [DNTypeName('Aspose.Cells.Drawing.GradientStyleType')]
  DNGradientStyleType = type Integer;
  DNGradientStyleTypeHelper = record helper for DNGradientStyleType
  public const
    DiagonalDown = 0;
    DiagonalUp = 1;
    FromCenter = 2;
    FromCorner = 3;
    Horizontal = 4;
    Vertical = 5;
    Unknown = 6;
  end;


  //-------------namespace: Aspose.Cells.Drawing----------------
  [DNTypeName('Aspose.Cells.Drawing.ImageType')]
  DNImageType = type Integer;
  DNImageTypeHelper = record helper for DNImageType
  public const
    Unknown = 0;
    Emf = 2;
    Wmf = 3;
    Pict = 4;
    Jpeg = 5;
    Png = 6;
    Bmp = 7;
    Gif = 66;
    Tiff = 67;
    Svg = 68;
    Svm = 69;
    Gltf = 70;
    OfficeCompatibleEmf = 71;
    WebP = 72;
  end;


  //-------------namespace: Aspose.Cells.Drawing----------------
  [DNTypeName('Aspose.Cells.Drawing.LightRigDirectionType')]
  DNLightRigDirectionType = type Integer;
  DNLightRigDirectionTypeHelper = record helper for DNLightRigDirectionType
  public const
    Bottom = 0;
    BottomLeft = 1;
    BottomRight = 2;
    Left = 3;
    Right = 4;
    Top = 5;
    TopLeft = 6;
    TopRight = 7;
  end;


  //-------------namespace: Aspose.Cells.Drawing----------------
  [DNTypeName('Aspose.Cells.Drawing.LightRigType')]
  DNLightRigType = type Integer;
  DNLightRigTypeHelper = record helper for DNLightRigType
  public const
    Balanced = 0;
    BrightRoom = 1;
    Chilly = 2;
    Contrasting = 3;
    Flat = 4;
    Flood = 5;
    Freezing = 6;
    Glow = 7;
    Harsh = 8;
    LegacyFlat1 = 9;
    LegacyFlat2 = 10;
    LegacyFlat3 = 11;
    LegacyFlat4 = 12;
    LegacyHarsh1 = 13;
    LegacyHarsh2 = 14;
    LegacyHarsh3 = 15;
    LegacyHarsh4 = 16;
    LegacyNormal1 = 17;
    LegacyNormal2 = 18;
    LegacyNormal3 = 19;
    LegacyNormal4 = 20;
    Morning = 21;
    Soft = 22;
    Sunrise = 23;
    Sunset = 24;
    ThreePoint = 25;
    TwoPoint = 26;
    None = 27;
  end;


  //-------------namespace: Aspose.Cells.Drawing----------------
  [DNTypeName('Aspose.Cells.Drawing.LineCapType')]
  DNLineCapType = type Integer;
  DNLineCapTypeHelper = record helper for DNLineCapType
  public const
    Square = 0;
    Round = 1;
    Flat = 2;
    None = 3;
  end;


  //-------------namespace: Aspose.Cells.Drawing----------------
  [DNTypeName('Aspose.Cells.Drawing.LineJoinType')]
  DNLineJoinType = type Integer;
  DNLineJoinTypeHelper = record helper for DNLineJoinType
  public const
    Round = 0;
    Bevel = 1;
    Miter = 2;
    None = 3;
  end;


  //-------------namespace: Aspose.Cells.Drawing----------------
  [DNTypeName('Aspose.Cells.Drawing.LineType')]
  DNLineType = type Integer;
  DNLineTypeHelper = record helper for DNLineType
  public const
    Solid = 0;
    Dash = 1;
    Dot = 2;
    DashDot = 3;
    DashDotDot = 4;
    DarkGray = 6;
    MediumGray = 7;
    LightGray = 8;
  end;


  //-------------namespace: Aspose.Cells.Drawing----------------
  [DNTypeName('Aspose.Cells.Drawing.MirrorType')]
  DNMirrorType = type Integer;
  DNMirrorTypeHelper = record helper for DNMirrorType
  public const
    None = 0;
    Horizonal = 1;
    Vertical = 2;
    Both = 3;
  end;


  //-------------namespace: Aspose.Cells.Drawing----------------
  [DNTypeName('Aspose.Cells.Drawing.MsoArrowheadLength')]
  DNMsoArrowheadLength = type Integer;
  DNMsoArrowheadLengthHelper = record helper for DNMsoArrowheadLength
  public const
    Short = 0;
    Medium = 1;
    Long = 2;
  end;


  //-------------namespace: Aspose.Cells.Drawing----------------
  [DNTypeName('Aspose.Cells.Drawing.MsoArrowheadStyle')]
  DNMsoArrowheadStyle = type Integer;
  DNMsoArrowheadStyleHelper = record helper for DNMsoArrowheadStyle
  public const
    None = 0;
    Arrow = 1;
    ArrowStealth = 2;
    ArrowDiamond = 3;
    ArrowOval = 4;
    ArrowOpen = 5;
  end;


  //-------------namespace: Aspose.Cells.Drawing----------------
  [DNTypeName('Aspose.Cells.Drawing.MsoArrowheadWidth')]
  DNMsoArrowheadWidth = type Integer;
  DNMsoArrowheadWidthHelper = record helper for DNMsoArrowheadWidth
  public const
    Narrow = 0;
    Medium = 1;
    Wide = 2;
  end;


  //-------------namespace: Aspose.Cells.Drawing----------------
  [DNTypeName('Aspose.Cells.Drawing.MsoDrawingType')]
  DNMsoDrawingType = type Integer;
  DNMsoDrawingTypeHelper = record helper for DNMsoDrawingType
  public const
    Group = 0;
    Line = 1;
    Rectangle = 2;
    Oval = 3;
    Arc = 4;
    Chart = 5;
    TextBox = 6;
    Button = 7;
    Picture = 8;
    Polygon = 9;
    CheckBox = 11;
    RadioButton = 12;
    Label_ = 14;
    DialogBox = 15;
    Spinner = 16;
    ScrollBar = 17;
    ListBox = 18;
    GroupBox = 19;
    ComboBox = 20;
    OleObject = 24;
    Comment = 25;
    Unknown = 29;
    CellsDrawing = 30;
    Slicer = 31;
    WebExtension = 32;
    SmartArt = 33;
    CustomXml = 34;
    Model3D = 35;
  end;


  //-------------namespace: Aspose.Cells.Drawing----------------
  [DNTypeName('Aspose.Cells.Drawing.MsoLineDashStyle')]
  DNMsoLineDashStyle = type Integer;
  DNMsoLineDashStyleHelper = record helper for DNMsoLineDashStyle
  public const
    Dash = 0;
    DashDot = 1;
    DashDotDot = 2;
    DashLongDash = 3;
    DashLongDashDot = 4;
    RoundDot = 5;
    Solid = 6;
    SquareDot = 7;
    Custom = 8;
  end;


  //-------------namespace: Aspose.Cells.Drawing----------------
  [DNTypeName('Aspose.Cells.Drawing.MsoLineStyle')]
  DNMsoLineStyle = type Integer;
  DNMsoLineStyleHelper = record helper for DNMsoLineStyle
  public const
    Single = 0;
    ThickBetweenThin = 1;
    ThinThick = 2;
    ThickThin = 3;
    ThinThin = 4;
  end;


  //-------------namespace: Aspose.Cells.Drawing----------------
  [DNTypeName('Aspose.Cells.Drawing.MsoPresetTextEffect')]
  DNMsoPresetTextEffect = type Integer;
  DNMsoPresetTextEffectHelper = record helper for DNMsoPresetTextEffect
  public const
    TextEffect1 = 0;
    TextEffect2 = 1;
    TextEffect3 = 2;
    TextEffect4 = 3;
    TextEffect5 = 4;
    TextEffect6 = 5;
    TextEffect7 = 6;
    TextEffect8 = 7;
    TextEffect9 = 8;
    TextEffect10 = 9;
    TextEffect11 = 10;
    TextEffect12 = 11;
    TextEffect13 = 12;
    TextEffect14 = 13;
    TextEffect15 = 14;
    TextEffect16 = 15;
    TextEffect17 = 16;
    TextEffect18 = 17;
    TextEffect19 = 18;
    TextEffect20 = 19;
    TextEffect21 = 20;
    TextEffect22 = 21;
    TextEffect23 = 22;
    TextEffect24 = 23;
    TextEffect25 = 24;
    TextEffect26 = 25;
    TextEffect27 = 26;
    TextEffect28 = 27;
    TextEffect29 = 28;
    TextEffect30 = 29;
  end;


  //-------------namespace: Aspose.Cells.Drawing----------------
  [DNTypeName('Aspose.Cells.Drawing.MsoPresetTextEffectShape')]
  DNMsoPresetTextEffectShape = type Integer;
  DNMsoPresetTextEffectShapeHelper = record helper for DNMsoPresetTextEffectShape
  public const
    PlainText = 136;
    Stop = 137;
    TriangleUp = 138;
    TriangleDown = 139;
    ChevronUp = 140;
    ChevronDown = 141;
    RingInside = 142;
    RingOutside = 143;
    ArchUpCurve = 144;
    ArchDownCurve = 145;
    CircleCurve = 146;
    ButtonCurve = 147;
    ArchUpPour = 148;
    ArchDownPour = 149;
    CirclePour = 150;
    ButtonPour = 151;
    CurveUp = 152;
    CurveDown = 153;
    CascadeUp = 154;
    CascadeDown = 155;
    Wave1 = 156;
    Wave2 = 157;
    DoubleWave1 = 158;
    DoubleWave2 = 159;
    Inflate = 160;
    Deflate = 161;
    InflateBottom = 162;
    DeflateBottom = 163;
    InflateTop = 164;
    DeflateTop = 165;
    DeflateInflate = 166;
    DeflateInflateDeflate = 167;
    FadeRight = 168;
    FadeLeft = 169;
    FadeUp = 170;
    FadeDown = 171;
    SlantUp = 172;
    SlantDown = 173;
    CanUp = 174;
    CanDown = 175;
    Mixed = 255;
  end;


  //-------------namespace: Aspose.Cells.Drawing----------------
  [DNTypeName('Aspose.Cells.Drawing.PlacementType')]
  DNPlacementType = type Integer;
  DNPlacementTypeHelper = record helper for DNPlacementType
  public const
    FreeFloating = 0;
    Move = 1;
    MoveAndSize = 2;
  end;


  //-------------namespace: Aspose.Cells.Drawing----------------
  [DNTypeName('Aspose.Cells.Drawing.PresetCameraType')]
  DNPresetCameraType = type Integer;
  DNPresetCameraTypeHelper = record helper for DNPresetCameraType
  public const
    IsometricBottomDown = 0;
    IsometricBottomUp = 1;
    IsometricLeftDown = 2;
    IsometricLeftUp = 3;
    IsometricOffAxis1Left = 4;
    IsometricOffAxis1Right = 5;
    IsometricOffAxis1Top = 6;
    IsometricOffAxis2Left = 7;
    IsometricOffAxis2Right = 8;
    IsometricOffAxis2Top = 9;
    IsometricOffAxis3Bottom = 10;
    IsometricOffAxis3Left = 11;
    IsometricOffAxis3Right = 12;
    IsometricOffAxis4Bottom = 13;
    IsometricOffAxis4Left = 14;
    IsometricOffAxis4Right = 15;
    IsometricRightDown = 16;
    IsometricRightUp = 17;
    IsometricTopDown = 18;
    IsometricTopUp = 19;
    LegacyObliqueBottom = 20;
    LegacyObliqueBottomLeft = 21;
    LegacyObliqueBottomRight = 22;
    LegacyObliqueFront = 23;
    LegacyObliqueLeft = 24;
    LegacyObliqueRight = 25;
    LegacyObliqueTop = 26;
    LegacyObliqueTopLeft = 27;
    LegacyObliqueTopRight = 28;
    LegacyPerspectiveBottom = 29;
    LegacyPerspectiveBottomLeft = 30;
    LegacyPerspectiveBottomRight = 31;
    LegacyPerspectiveFront = 32;
    LegacyPerspectiveLeft = 33;
    LegacyPerspectiveRight = 34;
    LegacyPerspectiveTop = 35;
    LegacyPerspectiveTopLeft = 36;
    LegacyPerspectiveTopRight = 37;
    ObliqueBottom = 38;
    ObliqueBottomLeft = 39;
    ObliqueBottomRight = 40;
    ObliqueLeft = 41;
    ObliqueRight = 42;
    ObliqueTop = 43;
    ObliqueTopLeft = 44;
    ObliqueTopRight = 45;
    OrthographicFront = 46;
    PerspectiveAbove = 47;
    PerspectiveAboveLeftFacing = 48;
    PerspectiveAboveRightFacing = 49;
    PerspectiveBelow = 50;
    PerspectiveContrastingLeftFacing = 51;
    PerspectiveContrastingRightFacing = 52;
    PerspectiveFront = 53;
    PerspectiveHeroicExtremeLeftFacing = 54;
    PerspectiveHeroicExtremeRightFacing = 55;
    PerspectiveHeroicLeftFacing = 56;
    PerspectiveHeroicRightFacing = 57;
    PerspectiveLeft = 58;
    PerspectiveRelaxed = 59;
    PerspectiveRelaxedModerately = 60;
    PerspectiveRight = 61;
  end;


  //-------------namespace: Aspose.Cells.Drawing----------------
  [DNTypeName('Aspose.Cells.Drawing.PresetMaterialType')]
  DNPresetMaterialType = type Integer;
  DNPresetMaterialTypeHelper = record helper for DNPresetMaterialType
  public const
    Clear = 0;
    DarkEdge = 1;
    Flat = 2;
    LegacyMatte = 3;
    LegacyMetal = 4;
    LegacyPlastic = 5;
    LegacyWireframe = 6;
    Matte = 7;
    Metal = 8;
    Plastic = 9;
    Powder = 10;
    SoftEdge = 11;
    SoftMetal = 12;
    TranslucentPowder = 13;
    WarmMatte = 14;
  end;


  //-------------namespace: Aspose.Cells.Drawing----------------
  [DNTypeName('Aspose.Cells.Drawing.PresetShadowType')]
  DNPresetShadowType = type Integer;
  DNPresetShadowTypeHelper = record helper for DNPresetShadowType
  public const
    NoShadow = 0;
    Custom = 1;
    OffsetDiagonalBottomRight = 2;
    OffsetBottom = 3;
    OffsetDiagonalBottomLeft = 4;
    OffsetRight = 5;
    OffsetCenter = 6;
    OffsetLeft = 7;
    OffsetDiagonalTopRight = 8;
    OffsetTop = 9;
    OffsetDiagonalTopLeft = 10;
    InsideDiagonalTopLeft = 11;
    InsideTop = 12;
    InsideDiagonalTopRight = 13;
    InsideLeft = 14;
    InsideCenter = 15;
    InsideRight = 16;
    InsideDiagonalBottomLeft = 17;
    InsideBottom = 18;
    InsideDiagonalBottomRight = 19;
    PerspectiveDiagonalUpperLeft = 20;
    PerspectiveDiagonalUpperRight = 21;
    Below = 22;
    PerspectiveDiagonalLowerLeft = 23;
    PerspectiveDiagonalLowerRight = 24;
  end;


  //-------------namespace: Aspose.Cells.Drawing----------------
  [DNTypeName('Aspose.Cells.Drawing.PresetWordArtStyle')]
  DNPresetWordArtStyle = type Integer;
  DNPresetWordArtStyleHelper = record helper for DNPresetWordArtStyle
  public const
    WordArtStyle1 = 1;
    WordArtStyle2 = 2;
    WordArtStyle3 = 3;
    WordArtStyle4 = 4;
    WordArtStyle5 = 5;
    WordArtStyle6 = 6;
    WordArtStyle7 = 7;
    WordArtStyle8 = 8;
    WordArtStyle9 = 9;
    WordArtStyle10 = 10;
    WordArtStyle11 = 11;
    WordArtStyle12 = 12;
    WordArtStyle13 = 13;
    WordArtStyle14 = 14;
    WordArtStyle15 = 15;
    WordArtStyle16 = 16;
    WordArtStyle17 = 17;
    WordArtStyle18 = 18;
    WordArtStyle19 = 19;
    WordArtStyle20 = 20;
  end;


  //-------------namespace: Aspose.Cells.Drawing----------------
  [DNTypeName('Aspose.Cells.Drawing.RectangleAlignmentType')]
  DNRectangleAlignmentType = type Integer;
  DNRectangleAlignmentTypeHelper = record helper for DNRectangleAlignmentType
  public const
    Bottom = 0;
    BottomLeft = 1;
    BottomRight = 2;
    Center = 3;
    Left = 4;
    Right = 5;
    Top = 6;
    TopLeft = 7;
    TopRight = 8;
  end;


  //-------------namespace: Aspose.Cells.Drawing----------------
  [DNTypeName('Aspose.Cells.Drawing.ReflectionEffectType')]
  DNReflectionEffectType = type Integer;
  DNReflectionEffectTypeHelper = record helper for DNReflectionEffectType
  public const
    None = 0;
    Custom = 1;
    TightReflectionTouching = 2;
    HalfReflectionTouching = 3;
    FullReflectionTouching = 4;
    TightReflection4PtOffset = 5;
    HalfReflection4PtOffset = 6;
    FullReflection4PtOffset = 7;
    TightReflection8PtOffset = 8;
    HalfReflection8PtOffset = 9;
    FullReflection8PtOffset = 10;
  end;


  //-------------namespace: Aspose.Cells.Drawing----------------
  [DNTypeName('Aspose.Cells.Drawing.SelectionType')]
  DNSelectionType = type Integer;
  DNSelectionTypeHelper = record helper for DNSelectionType
  public const
    Single = 0;
    Multi = 1;
    Extend = 2;
  end;


  //-------------namespace: Aspose.Cells.Drawing----------------
  [DNTypeName('Aspose.Cells.Drawing.ShapeAnchorType')]
  DNShapeAnchorType = type Integer;
  DNShapeAnchorTypeHelper = record helper for DNShapeAnchorType
  public const
    TwoCellAnchor = 0;
    OneCellAnchor = 1;
  end;


  //-------------namespace: Aspose.Cells.Drawing----------------
  [DNTypeName('Aspose.Cells.Drawing.ShapeLockType')]
  DNShapeLockType = type Integer;
  DNShapeLockTypeHelper = record helper for DNShapeLockType
  public const
    Group = 0;
    AdjustHandles = 1;
    Text = 2;
    Points = 3;
    Crop = 4;
    Selection = 5;
    Move = 6;
    AspectRatio = 7;
    Rotation = 8;
    Ungroup = 9;
    Resize = 10;
    ShapeType = 11;
    Arrowhead = 12;
  end;


  //-------------namespace: Aspose.Cells.Drawing----------------
  [DNTypeName('Aspose.Cells.Drawing.ShapePathType')]
  DNShapePathType = type Integer;
  DNShapePathTypeHelper = record helper for DNShapePathType
  public const
    LineTo = 0;
    CubicBezierCurveTo = 1;
    MoveTo = 2;
    Close = 3;
    End_ = 4;
    Escape = 5;
    ArcTo = 6;
    Unknown = 7;
  end;


  //-------------namespace: Aspose.Cells.Drawing----------------
  [DNTypeName('Aspose.Cells.Drawing.TextOverflowType')]
  DNTextOverflowType = type Integer;
  DNTextOverflowTypeHelper = record helper for DNTextOverflowType
  public const
    Clip = 0;
    Ellipsis = 1;
    Overflow = 2;
  end;


  //-------------namespace: Aspose.Cells.Drawing.Texts----------------
  [DNTypeName('Aspose.Cells.Drawing.Texts.BulletType')]
  DNBulletType = type Integer;
  DNBulletTypeHelper = record helper for DNBulletType
  public const
    None = 0;
    Character = 1;
    Picture = 2;
    AutoNumbered = 3;
  end;


  //-------------namespace: Aspose.Cells.Drawing.Texts----------------
  [DNTypeName('Aspose.Cells.Drawing.Texts.LineSpaceSizeType')]
  DNLineSpaceSizeType = type Integer;
  DNLineSpaceSizeTypeHelper = record helper for DNLineSpaceSizeType
  public const
    Percentage = 0;
    Points = 1;
  end;


  //-------------namespace: Aspose.Cells.Drawing.Texts----------------
  [DNTypeName('Aspose.Cells.Drawing.Texts.TextAutonumberScheme')]
  DNTextAutonumberScheme = type Integer;
  DNTextAutonumberSchemeHelper = record helper for DNTextAutonumberScheme
  public const
    None = 0;
    AlphaLcParenBoth = 1;
    AlphaLcParenR = 2;
    AlphaLcPeriod = 3;
    AlphaUcParenBoth = 4;
    AlphaUcParenR = 5;
    AlphaUcPeriod = 6;
    Arabic1Minus = 7;
    Arabic2Minus = 8;
    ArabicDbPeriod = 9;
    ArabicDbPlain = 10;
    ArabicParenBoth = 11;
    ArabicParenR = 12;
    ArabicPeriod = 13;
    ArabicPlain = 14;
    CircleNumDbPlain = 15;
    CircleNumWdBlackPlain = 16;
    CircleNumWdWhitePlain = 17;
    Ea1ChsPeriod = 18;
    Ea1ChsPlain = 19;
    Ea1ChtPeriod = 20;
    Ea1ChtPlain = 21;
    Ea1JpnChsDbPeriod = 22;
    Ea1JpnKorPeriod = 23;
    Ea1JpnKorPlain = 24;
    Hebrew2Minus = 25;
    HindiAlpha1Period = 26;
    HindiAlphaPeriod = 27;
    HindiNumParenR = 28;
    HindiNumPeriod = 29;
    RomanLcParenBoth = 30;
    RomanLcParenR = 31;
    RomanLcPeriod = 32;
    RomanUcParenBoth = 33;
    RomanUcParenR = 34;
    RomanUcPeriod = 35;
    ThaiAlphaParenBoth = 36;
    ThaiAlphaParenR = 37;
    ThaiAlphaPeriod = 38;
    ThaiNumParenBoth = 39;
    ThaiNumParenR = 40;
    ThaiNumPeriod = 41;
  end;


  //-------------namespace: Aspose.Cells.Drawing.Texts----------------
  [DNTypeName('Aspose.Cells.Drawing.Texts.TextFontAlignType')]
  DNTextFontAlignType = type Integer;
  DNTextFontAlignTypeHelper = record helper for DNTextFontAlignType
  public const
    Automatic = 0;
    Bottom = 1;
    Baseline = 2;
    Center = 3;
    Top = 4;
  end;


  //-------------namespace: Aspose.Cells.Drawing.Texts----------------
  [DNTypeName('Aspose.Cells.Drawing.Texts.TextNodeType')]
  DNTextNodeType = type Integer;
  DNTextNodeTypeHelper = record helper for DNTextNodeType
  public const
    TextRun = 0;
    TextParagraph = 1;
    Equation = 2;
  end;


  //-------------namespace: Aspose.Cells.Drawing.Texts----------------
  [DNTypeName('Aspose.Cells.Drawing.Texts.TextTabAlignmentType')]
  DNTextTabAlignmentType = type Integer;
  DNTextTabAlignmentTypeHelper = record helper for DNTextTabAlignmentType
  public const
    Center = 0;
    Decimal = 1;
    Left = 2;
    Right = 3;
  end;


  //-------------namespace: Aspose.Cells.Drawing.Texts----------------
  [DNTypeName('Aspose.Cells.Drawing.Texts.TextVerticalType')]
  DNTextVerticalType = type Integer;
  DNTextVerticalTypeHelper = record helper for DNTextVerticalType
  public const
    Vertical = 0;
    Horizontal = 1;
    VerticalLeftToRight = 2;
    Vertical90 = 3;
    Vertical270 = 4;
    Stacked = 5;
    StackedRightToLeft = 6;
  end;


  //-------------namespace: Aspose.Cells.Drawing----------------
  [DNTypeName('Aspose.Cells.Drawing.TextureType')]
  DNTextureType = type Integer;
  DNTextureTypeHelper = record helper for DNTextureType
  public const
    BlueTissuePaper = 0;
    Bouquet = 1;
    BrownMarble = 2;
    Canvas = 3;
    Cork = 4;
    Denim = 5;
    FishFossil = 6;
    Granite = 7;
    GreenMarble = 8;
    MediumWood = 9;
    Newsprint = 10;
    Oak = 11;
    PaperBag = 12;
    Papyrus = 13;
    Parchment = 14;
    PinkTissuePaper = 15;
    PurpleMesh = 16;
    RecycledPaper = 17;
    Sand = 18;
    Stationery = 19;
    Walnut = 20;
    WaterDroplets = 21;
    WhiteMarble = 22;
    WovenMat = 23;
    Unknown = 24;
  end;


  //-------------namespace: Aspose.Cells.Drawing----------------
  [DNTypeName('Aspose.Cells.Drawing.WeightType')]
  DNWeightType = type Integer;
  DNWeightTypeHelper = record helper for DNWeightType
  public const
    SingleLine = 0;
    MediumLine = 1;
    WideLine = 2;
    HairLine = -1;
  end;


  //-------------namespace: Aspose.Cells----------------
  [DNTypeName('Aspose.Cells.DynamicFilterType')]
  DNDynamicFilterType = type Integer;
  DNDynamicFilterTypeHelper = record helper for DNDynamicFilterType
  public const
    AboveAverage = 0;
    BelowAverage = 1;
    LastMonth = 2;
    LastQuarter = 3;
    LastWeek = 4;
    LastYear = 5;
    January = 6;
    October = 7;
    November = 8;
    December = 9;
    February = 10;
    March = 11;
    April = 12;
    May = 13;
    June = 14;
    July = 15;
    August = 16;
    September = 17;
    NextMonth = 18;
    NextQuarter = 19;
    NextWeek = 20;
    NextYear = 21;
    None = 22;
    Quarter1 = 23;
    Quarter2 = 24;
    Quarter3 = 25;
    Quarter4 = 26;
    ThisMonth = 27;
    ThisQuarter = 28;
    ThisWeek = 29;
    ThisYear = 30;
    Today = 31;
    Tomorrow = 32;
    YearToDate = 33;
    Yesterday = 34;
  end;


  //-------------namespace: Aspose.Cells----------------
  [DNTypeName('Aspose.Cells.EmfRenderSetting')]
  DNEmfRenderSetting = type Integer;
  DNEmfRenderSettingHelper = record helper for DNEmfRenderSetting
  public const
    EmfOnly = 0;
    EmfPlusPrefer = 1;
  end;


  //-------------namespace: Aspose.Cells----------------
  [DNTypeName('Aspose.Cells.EncryptionType')]
  DNEncryptionType = type Integer;
  DNEncryptionTypeHelper = record helper for DNEncryptionType
  public const
    XOR_ = 0;
    Compatible = 1;
    EnhancedCryptographicProviderV1 = 2;
    StrongCryptographicProvider = 3;
  end;


  //-------------namespace: Aspose.Cells----------------
  [DNTypeName('Aspose.Cells.ErrorCheckType')]
  DNErrorCheckType = type Integer;
  DNErrorCheckTypeHelper = record helper for DNErrorCheckType
  public const
    Calc = 1;
    EmptyCellRef = 2;
    TextNumber = 4;
    InconsistRange = 8;
    InconsistFormula = 16;
    TextDate = 32;
    UnproctedFormula = 64;
    Validation = 128;
    CalculatedColumn = 129;
  end;


  //-------------namespace: Aspose.Cells----------------
  [DNTypeName('Aspose.Cells.ExceptionType')]
  DNExceptionType = type Integer;
  DNExceptionTypeHelper = record helper for DNExceptionType
  public const
    Chart = 0;
    DataType = 1;
    DataValidation = 2;
    ConditionalFormatting = 3;
    FileFormat = 4;
    Formula = 5;
    InvalidData = 6;
    InvalidOperator = 7;
    IncorrectPassword = 8;
    License = 9;
    Limitation = 10;
    PageSetup = 11;
    PivotTable = 12;
    Shape = 13;
    Sparkline = 14;
    SheetName = 15;
    SheetType = 16;
    Interrupted = 17;
    IO = 18;
    Permission = 19;
    UnsupportedFeature = 20;
    UnsupportedStream = 21;
    UndisclosedInformation = 22;
  end;


  //-------------namespace: Aspose.Cells.ExternalConnections----------------
  [DNTypeName('Aspose.Cells.ExternalConnections.ConnectionDataSourceType')]
  DNConnectionDataSourceType = type Integer;
  DNConnectionDataSourceTypeHelper = record helper for DNConnectionDataSourceType
  public const
    ODBCBasedSource = 1;
    DAOBasedSource = 2;
    FileBasedDataBaseSource = 3;
    WebQuery = 4;
    OLEDBBasedSource = 5;
    TextBasedSource = 6;
    ADORecordSet = 7;
    DSP = 8;
    OLEDBDataModel = 100;
    DataFeedDataModel = 101;
    WorksheetDataModel = 102;
    Table = 102;
    TextDataModel = 103;
    Unknown = 255;
  end;


  //-------------namespace: Aspose.Cells.ExternalConnections----------------
  [DNTypeName('Aspose.Cells.ExternalConnections.ConnectionParameterType')]
  DNConnectionParameterType = type Integer;
  DNConnectionParameterTypeHelper = record helper for DNConnectionParameterType
  public const
    Cell = 0;
    Prompt = 1;
    Value = 2;
  end;


  //-------------namespace: Aspose.Cells.ExternalConnections----------------
  [DNTypeName('Aspose.Cells.ExternalConnections.CredentialsMethodType')]
  DNCredentialsMethodType = type Integer;
  DNCredentialsMethodTypeHelper = record helper for DNCredentialsMethodType
  public const
    Integrated = 0;
    None = 1;
    Prompt = 2;
    Stored_ = 3;
  end;


  //-------------namespace: Aspose.Cells.ExternalConnections----------------
  [DNTypeName('Aspose.Cells.ExternalConnections.HtmlFormatHandlingType')]
  DNHtmlFormatHandlingType = type Integer;
  DNHtmlFormatHandlingTypeHelper = record helper for DNHtmlFormatHandlingType
  public const
    All = 0;
    None = 1;
    Rtf = 2;
  end;


  //-------------namespace: Aspose.Cells.ExternalConnections----------------
  [DNTypeName('Aspose.Cells.ExternalConnections.OLEDBCommandType')]
  DNOLEDBCommandType = type Integer;
  DNOLEDBCommandTypeHelper = record helper for DNOLEDBCommandType
  public const
    None = 0;
    CubeName = 1;
    SqlStatement = 2;
    TableName = 3;
    DefaultInformation = 4;
    WebBasedList = 5;
  end;


  //-------------namespace: Aspose.Cells.ExternalConnections----------------
  [DNTypeName('Aspose.Cells.ExternalConnections.ReConnectionMethodType')]
  DNReConnectionMethodType = type Integer;
  DNReConnectionMethodTypeHelper = record helper for DNReConnectionMethodType
  public const
    Required = 1;
    Always = 2;
    Never = 3;
  end;


  //-------------namespace: Aspose.Cells.ExternalConnections----------------
  [DNTypeName('Aspose.Cells.ExternalConnections.SqlDataType')]
  DNSqlDataType = type Integer;
  DNSqlDataTypeHelper = record helper for DNSqlDataType
  public const
    SqlUnknownType = 0;
    SqlChar = 1;
    SqlNumeric = 2;
    SqlDecimal = 3;
    SqlInteger = 4;
    SqlSmallInt = 5;
    SqlFloat = 6;
    SqlReal = 7;
    SqlDouble = 8;
    SqlTypeDate = 9;
    SqlTypeTime = 10;
    SqlTypeTimestamp = 11;
    SqlVarChar = 12;
    SqlIntervalYear = 101;
    SqlIntervalMonth = 102;
    SqlIntervalDay = 103;
    SqlIntervalHour = 104;
    SqlIntervalMinute = 105;
    SqlIntervalSecond = 106;
    SqlIntervalYearToMonth = 107;
    SqlIntervalDayToHour = 108;
    SqlIntervalDayToMinute = 109;
    SqlIntervalDayToSecond = 110;
    SqlIntervalHourToMinute = 111;
    SqlIntervalHourToSecond = 112;
    SqlIntervalMinuteToSecond = 113;
    SqlUnsignedOffset = -22;
    SqlSignedOffset = -20;
    SqlGUID = -11;
    SqlWLongVarchar = -10;
    SqlWVarchar = -9;
    SqlWChar = -8;
    SqlBit = -7;
    SqlTinyInt = -6;
    SqlBigInt = -5;
    SqlLongVarBinary = -4;
    SqlVarBinary = -3;
    SqlBinary = -2;
    SqlLongVarChar = -1;
  end;


  //-------------namespace: Aspose.Cells----------------
  [DNTypeName('Aspose.Cells.ExternalLinkType')]
  DNExternalLinkType = type Integer;
  DNExternalLinkTypeHelper = record helper for DNExternalLinkType
  public const
    DDELink = 0;
    External_ = 1;
  end;


  //-------------namespace: Aspose.Cells----------------
  [DNTypeName('Aspose.Cells.FileFormatType')]
  DNFileFormatType = type Integer;
  DNFileFormatTypeHelper = record helper for DNFileFormatType
  public const
    CSV = 1;
    Excel97To2003 = 5;
    Xlsx = 6;
    Xlsm = 7;
    Xltx = 8;
    Xltm = 9;
    Xlam = 10;
    TabDelimited = 11;
    TSV = 11;
    Html = 12;
    Pdf = 13;
    ODS = 14;
    SpreadsheetML = 15;
    Excel2003XML = 15;
    Xlsb = 16;
    MHtml = 17;
    XPS = 20;
    Tiff = 21;
    Excel95 = 22;
    Excel4 = 23;
    Excel3 = 24;
    Excel2 = 25;
    Pptx = 26;
    Docx = 27;
    SVG = 28;
    Dif = 30;
    Doc = 31;
    Ppt = 32;
    MapiMessage = 33;
    MsEquation = 34;
    Ole10Native = 35;
    Vsd = 36;
    VSDX = 37;
    Docm = 38;
    Dotx = 39;
    Dotm = 40;
    Pptm = 41;
    Potx = 42;
    Potm = 43;
    Ppsx = 44;
    Ppsm = 45;
    Ooxml = 46;
    ODT = 47;
    Odp = 48;
    ODF = 49;
    ODG = 50;
    Xml = 51;
    Xlt = 52;
    OTT = 53;
    Bmp = 54;
    OTS = 55;
    Numbers09 = 56;
    Numbers = 56;
    Markdown = 57;
    GraphChart = 58;
    Fods = 59;
    SXC = 60;
    Otp = 61;
    Numbers35 = 62;
    Unknown = 255;
  end;


  //-------------namespace: Aspose.Cells----------------
  [DNTypeName('Aspose.Cells.FilterOperatorType')]
  DNFilterOperatorType = type Integer;
  DNFilterOperatorTypeHelper = record helper for DNFilterOperatorType
  public const
    LessOrEqual = 0;
    LessThan = 1;
    Equal = 2;
    GreaterThan = 3;
    NotEqual = 4;
    GreaterOrEqual = 5;
    None = 6;
    BeginsWith = 7;
    EndsWith = 8;
    Contains_ = 9;
    NotContains = 10;
  end;


  //-------------namespace: Aspose.Cells----------------
  [DNTypeName('Aspose.Cells.FilterType')]
  DNFilterType = type Integer;
  DNFilterTypeHelper = record helper for DNFilterType
  public const
    ColorFilter = 0;
    CustomFilters = 1;
    DynamicFilter = 2;
    MultipleFilters = 3;
    IconFilter = 4;
    Top10 = 5;
    None = 6;
  end;


  //-------------namespace: Aspose.Cells----------------
  [DNTypeName('Aspose.Cells.FontSchemeType')]
  DNFontSchemeType = type Integer;
  DNFontSchemeTypeHelper = record helper for DNFontSchemeType
  public const
    None = 0;
    Major = 1;
    Minor = 2;
  end;


  //-------------namespace: Aspose.Cells----------------
  [DNTypeName('Aspose.Cells.FontSourceType')]
  DNFontSourceType = type Integer;
  DNFontSourceTypeHelper = record helper for DNFontSourceType
  public const
    FontFile = 0;
    FontsFolder = 1;
    MemoryFont = 2;
  end;


  //-------------namespace: Aspose.Cells----------------
  [DNTypeName('Aspose.Cells.FontUnderlineType')]
  DNFontUnderlineType = type Integer;
  DNFontUnderlineTypeHelper = record helper for DNFontUnderlineType
  public const
    None = 0;
    Single = 1;
    Double = 2;
    Accounting = 3;
    DoubleAccounting = 4;
    Dash = 5;
    DashDotDotHeavy = 6;
    DashDotHeavy = 7;
    DashedHeavy = 8;
    DashLong = 9;
    DashLongHeavy = 10;
    DotDash = 11;
    DotDotDash = 12;
    Dotted = 13;
    DottedHeavy = 14;
    Heavy = 15;
    Wave = 16;
    WavyDouble = 17;
    WavyHeavy = 18;
    Words = 19;
  end;


  //-------------namespace: Aspose.Cells----------------
  [DNTypeName('Aspose.Cells.FormatConditionType')]
  DNFormatConditionType = type Integer;
  DNFormatConditionTypeHelper = record helper for DNFormatConditionType
  public const
    CellValue = 0;
    Expression = 1;
    ColorScale = 2;
    DataBar = 3;
    IconSet = 4;
    Top10 = 5;
    UniqueValues = 6;
    DuplicateValues = 7;
    ContainsText = 8;
    NotContainsText = 9;
    BeginsWith = 10;
    EndsWith = 11;
    ContainsBlanks = 12;
    NotContainsBlanks = 13;
    ContainsErrors = 14;
    NotContainsErrors = 15;
    TimePeriod = 16;
    AboveAverage = 17;
  end;


  //-------------namespace: Aspose.Cells----------------
  [DNTypeName('Aspose.Cells.FormatConditionValueType')]
  DNFormatConditionValueType = type Integer;
  DNFormatConditionValueTypeHelper = record helper for DNFormatConditionValueType
  public const
    Formula = 0;
    Max = 1;
    Min = 2;
    Number = 3;
    Percent = 4;
    Percentile = 5;
    AutomaticMax = 6;
    AutomaticMin = 7;
  end;


  //-------------namespace: Aspose.Cells----------------
  [DNTypeName('Aspose.Cells.GridlineType')]
  DNGridlineType = type Integer;
  DNGridlineTypeHelper = record helper for DNGridlineType
  public const
    Dotted = 0;
    Hair = 1;
  end;


  //-------------namespace: Aspose.Cells----------------
  [DNTypeName('Aspose.Cells.HeaderFooterCommandType')]
  DNHeaderFooterCommandType = type Integer;
  DNHeaderFooterCommandTypeHelper = record helper for DNHeaderFooterCommandType
  public const
    Text = 0;
    CurrentPage = 1;
    Pagecount = 2;
    CurrentDate = 3;
    CurrentTime = 4;
    SheetName = 5;
    FileName = 6;
    FilePath = 7;
    Picture = 8;
  end;


  //-------------namespace: Aspose.Cells----------------
  [DNTypeName('Aspose.Cells.HtmlCrossType')]
  DNHtmlCrossType = type Integer;
  DNHtmlCrossTypeHelper = record helper for DNHtmlCrossType
  public const
    Default_ = 0;
    MSExport = 1;
    Cross = 2;
    CrossHideRight = 3;
    FitToCell = 4;
  end;


  //-------------namespace: Aspose.Cells----------------
  [DNTypeName('Aspose.Cells.HtmlExportDataOptions')]
  DNHtmlExportDataOptions = type Integer;
  DNHtmlExportDataOptionsHelper = record helper for DNHtmlExportDataOptions
  public const
    Table = 1;
    All = 255;
  end;


  //-------------namespace: Aspose.Cells----------------
  [DNTypeName('Aspose.Cells.HtmlHiddenColDisplayType')]
  DNHtmlHiddenColDisplayType = type Integer;
  DNHtmlHiddenColDisplayTypeHelper = record helper for DNHtmlHiddenColDisplayType
  public const
    Hidden = 0;
    Remove = 1;
  end;


  //-------------namespace: Aspose.Cells----------------
  [DNTypeName('Aspose.Cells.HtmlHiddenRowDisplayType')]
  DNHtmlHiddenRowDisplayType = type Integer;
  DNHtmlHiddenRowDisplayTypeHelper = record helper for DNHtmlHiddenRowDisplayType
  public const
    Hidden = 0;
    Remove = 1;
  end;


  //-------------namespace: Aspose.Cells----------------
  [DNTypeName('Aspose.Cells.HtmlLinkTargetType')]
  DNHtmlLinkTargetType = type Integer;
  DNHtmlLinkTargetTypeHelper = record helper for DNHtmlLinkTargetType
  public const
    Blank = 0;
    Parent = 1;
    Self = 2;
    Top = 3;
  end;


  //-------------namespace: Aspose.Cells----------------
  [DNTypeName('Aspose.Cells.IconSetType')]
  DNIconSetType = type Integer;
  DNIconSetTypeHelper = record helper for DNIconSetType
  public const
    Arrows3 = 0;
    ArrowsGray3 = 1;
    Flags3 = 2;
    Signs3 = 3;
    Symbols3 = 4;
    Symbols32 = 5;
    TrafficLights31 = 6;
    TrafficLights32 = 7;
    Arrows4 = 8;
    ArrowsGray4 = 9;
    Rating4 = 10;
    RedToBlack4 = 11;
    TrafficLights4 = 12;
    Arrows5 = 13;
    ArrowsGray5 = 14;
    Quarters5 = 15;
    Rating5 = 16;
    Stars3 = 17;
    Boxes5 = 18;
    Triangles3 = 19;
    None = 20;
    CustomSet = 21;
    Smilies3 = 22;
    ColorSmilies3 = 23;
  end;


  //-------------namespace: Aspose.Cells----------------
  [DNTypeName('Aspose.Cells.LoadDataFilterOptions')]
  DNLoadDataFilterOptions = type Integer;
  DNLoadDataFilterOptionsHelper = record helper for DNLoadDataFilterOptions
  public const
    None = 0;
    CellBlank = 1;
    CellString = 2;
    CellNumeric = 4;
    CellError = 8;
    CellBool = 16;
    CellValue = 31;
    Formula = 32;
    Chart = 256;
    MergedArea = 1024;
    ConditionalFormatting = 2048;
    DataValidation = 4096;
    PivotTable = 8192;
    Table = 16384;
    Hyperlinks = 32768;
    SheetSettings = 65536;
    BookSettings = 1048576;
    Settings = 1114112;
    XmlMap = 2097152;
    Structure = 4194304;
    DocumentProperties = 8388608;
    DefinedNames = 16777216;
    VBA = 33554432;
    Style = 67108864;
    CellData = 67108927;
    Picture = 134217728;
    OleObject = 268435456;
    Shape = 402653696;
    Drawing = 402653952;
    SheetData = 403701759;
    All = 2147483647;
  end;


  //-------------namespace: Aspose.Cells----------------
  [DNTypeName('Aspose.Cells.LoadFormat')]
  DNLoadFormat = type Integer;
  DNLoadFormatHelper = record helper for DNLoadFormat
  public const
    Auto = 0;
    CSV = 1;
    Excel97To2003 = 5;
    Xlsx = 6;
    Tsv = 11;
    TabDelimited = 11;
    Html = 12;
    MHtml = 13;
    Ods = 14;
    SpreadsheetML = 15;
    Xlsb = 16;
    Numbers = 56;
    Fods = 59;
    Sxc = 60;
    Unknown = 255;
  end;


  //-------------namespace: Aspose.Cells----------------
  [DNTypeName('Aspose.Cells.LookAtType')]
  DNLookAtType = type Integer;
  DNLookAtTypeHelper = record helper for DNLookAtType
  public const
    Contains_ = 0;
    StartWith = 1;
    EndWith = 2;
    EntireContent = 3;
  end;


  //-------------namespace: Aspose.Cells----------------
  [DNTypeName('Aspose.Cells.LookInType')]
  DNLookInType = type Integer;
  DNLookInTypeHelper = record helper for DNLookInType
  public const
    Formulas = 0;
    Values = 1;
    ValuesExcludeFormulaCell = 2;
    Comments = 3;
    OnlyFormulas = 4;
    OriginalValues = 5;
  end;


  //-------------namespace: Aspose.Cells.Markup----------------
  [DNTypeName('Aspose.Cells.Markup.SmartTagShowType')]
  DNSmartTagShowType = type Integer;
  DNSmartTagShowTypeHelper = record helper for DNSmartTagShowType
  public const
    All = 0;
    NoSmartTagIndicator = 1;
    None = 2;
  end;


  //-------------namespace: Aspose.Cells----------------
  [DNTypeName('Aspose.Cells.MemorySetting')]
  DNMemorySetting = type Integer;
  DNMemorySettingHelper = record helper for DNMemorySetting
  public const
    Normal = 0;
    MemoryPreference = 1;
  end;


  //-------------namespace: Aspose.Cells.Metadata----------------
  [DNTypeName('Aspose.Cells.Metadata.MetadataType')]
  DNMetadataType = type Integer;
  DNMetadataTypeHelper = record helper for DNMetadataType
  public const
    Encryption = 1;
    Decryption = 2;
    DocumentProperties = 4;
  end;


  //-------------namespace: Aspose.Cells----------------
  [DNTypeName('Aspose.Cells.NumberCategoryType')]
  DNNumberCategoryType = type Integer;
  DNNumberCategoryTypeHelper = record helper for DNNumberCategoryType
  public const
    General = 0;
    Text = 1;
    Number = 2;
    Date = 3;
    Time = 4;
    Fraction = 5;
    Scientific = 6;
  end;


  //-------------namespace: Aspose.Cells.Ods----------------
  [DNTypeName('Aspose.Cells.Ods.OdsCellFieldType')]
  DNOdsCellFieldType = type Integer;
  DNOdsCellFieldTypeHelper = record helper for DNOdsCellFieldType
  public const
    Date = 0;
    SheetName = 1;
    Title = 2;
  end;


  //-------------namespace: Aspose.Cells.Ods----------------
  [DNTypeName('Aspose.Cells.Ods.OdsGeneratorType')]
  DNOdsGeneratorType = type Integer;
  DNOdsGeneratorTypeHelper = record helper for DNOdsGeneratorType
  public const
    LibreOffice = 0;
    OpenOffice = 1;
  end;


  //-------------namespace: Aspose.Cells.Ods----------------
  [DNTypeName('Aspose.Cells.Ods.OdsPageBackgroundGraphicPositionType')]
  DNOdsPageBackgroundGraphicPositionType = type Integer;
  DNOdsPageBackgroundGraphicPositionTypeHelper = record helper for DNOdsPageBackgroundGraphicPositionType
  public const
    TopLeft = 0;
    TopCenter = 1;
    TopRight = 2;
    CenterLeft = 3;
    CenterCenter = 4;
    CenterRight = 5;
    BottomLeft = 6;
    BottomCenter = 7;
    BottomRight = 8;
  end;


  //-------------namespace: Aspose.Cells.Ods----------------
  [DNTypeName('Aspose.Cells.Ods.OdsPageBackgroundGraphicType')]
  DNOdsPageBackgroundGraphicType = type Integer;
  DNOdsPageBackgroundGraphicTypeHelper = record helper for DNOdsPageBackgroundGraphicType
  public const
    Position = 0;
    Area = 1;
    Tile = 2;
  end;


  //-------------namespace: Aspose.Cells.Ods----------------
  [DNTypeName('Aspose.Cells.Ods.OdsPageBackgroundType')]
  DNOdsPageBackgroundType = type Integer;
  DNOdsPageBackgroundTypeHelper = record helper for DNOdsPageBackgroundType
  public const
    None = 0;
    Color = 1;
    Graphic = 2;
  end;


  //-------------namespace: Aspose.Cells----------------
  [DNTypeName('Aspose.Cells.OoxmlCompliance')]
  DNOoxmlCompliance = type Integer;
  DNOoxmlComplianceHelper = record helper for DNOoxmlCompliance
  public const
    Ecma376_2006 = 0;
    Iso29500_2008_Strict = 1;
  end;


  //-------------namespace: Aspose.Cells----------------
  [DNTypeName('Aspose.Cells.OoxmlCompressionType')]
  DNOoxmlCompressionType = type Integer;
  DNOoxmlCompressionTypeHelper = record helper for DNOoxmlCompressionType
  public const
    Level1 = 1;
    Level2 = 2;
    Level3 = 3;
    Level4 = 4;
    Level5 = 5;
    Level6 = 6;
    Level7 = 7;
    Level8 = 8;
    Level9 = 9;
  end;


  //-------------namespace: Aspose.Cells----------------
  [DNTypeName('Aspose.Cells.OperatorType')]
  DNOperatorType = type Integer;
  DNOperatorTypeHelper = record helper for DNOperatorType
  public const
    Between = 0;
    Equal = 1;
    GreaterThan = 2;
    GreaterOrEqual = 3;
    LessThan = 4;
    LessOrEqual = 5;
    None = 6;
    NotBetween = 7;
    NotEqual = 8;
  end;


  //-------------namespace: Aspose.Cells----------------
  [DNTypeName('Aspose.Cells.PageLayoutAlignmentType')]
  DNPageLayoutAlignmentType = type Integer;
  DNPageLayoutAlignmentTypeHelper = record helper for DNPageLayoutAlignmentType
  public const
    Bottom = 0;
    Center = 1;
    Left = 2;
    Right = 3;
    Top = 4;
  end;


  //-------------namespace: Aspose.Cells----------------
  [DNTypeName('Aspose.Cells.PageOrientationType')]
  DNPageOrientationType = type Integer;
  DNPageOrientationTypeHelper = record helper for DNPageOrientationType
  public const
    Landscape = 0;
    Portrait = 1;
  end;


  //-------------namespace: Aspose.Cells----------------
  [DNTypeName('Aspose.Cells.PaneStateType')]
  DNPaneStateType = type Integer;
  DNPaneStateTypeHelper = record helper for DNPaneStateType
  public const
    Frozen = 0;
    FrozenSplit = 1;
    Split = 2;
    Normal = 3;
  end;


  //-------------namespace: Aspose.Cells----------------
  [DNTypeName('Aspose.Cells.PaperSizeType')]
  DNPaperSizeType = type Integer;
  DNPaperSizeTypeHelper = record helper for DNPaperSizeType
  public const
    Custom = 0;
    PaperLetter = 1;
    PaperLetterSmall = 2;
    PaperTabloid = 3;
    PaperLedger = 4;
    PaperLegal = 5;
    PaperStatement = 6;
    PaperExecutive = 7;
    PaperA3 = 8;
    PaperA4 = 9;
    PaperA4Small = 10;
    PaperA5 = 11;
    PaperB4 = 12;
    PaperB5 = 13;
    PaperFolio = 14;
    PaperQuarto = 15;
    Paper10x14 = 16;
    Paper11x17 = 17;
    PaperNote = 18;
    PaperEnvelope9 = 19;
    PaperEnvelope10 = 20;
    PaperEnvelope11 = 21;
    PaperEnvelope12 = 22;
    PaperEnvelope14 = 23;
    PaperCSheet = 24;
    PaperDSheet = 25;
    PaperESheet = 26;
    PaperEnvelopeDL = 27;
    PaperEnvelopeC5 = 28;
    PaperEnvelopeC3 = 29;
    PaperEnvelopeC4 = 30;
    PaperEnvelopeC6 = 31;
    PaperEnvelopeC65 = 32;
    PaperEnvelopeB4 = 33;
    PaperEnvelopeB5 = 34;
    PaperEnvelopeB6 = 35;
    PaperEnvelopeItaly = 36;
    PaperEnvelopeMonarch = 37;
    PaperEnvelopePersonal = 38;
    PaperFanfoldUS = 39;
    PaperFanfoldStdGerman = 40;
    PaperFanfoldLegalGerman = 41;
    PaperISOB4 = 42;
    PaperJapanesePostcard = 43;
    Paper9x11 = 44;
    Paper10x11 = 45;
    Paper15x11 = 46;
    PaperEnvelopeInvite = 47;
    PaperLetterExtra = 50;
    PaperLegalExtra = 51;
    PaperTabloidExtra = 52;
    PaperA4Extra = 53;
    PaperLetterTransverse = 54;
    PaperA4Transverse = 55;
    PaperLetterExtraTransverse = 56;
    PaperSuperA = 57;
    PaperSuperB = 58;
    PaperLetterPlus = 59;
    PaperA4Plus = 60;
    PaperA5Transverse = 61;
    PaperJISB5Transverse = 62;
    PaperA3Extra = 63;
    PaperA5Extra = 64;
    PaperISOB5Extra = 65;
    PaperA2 = 66;
    PaperA3Transverse = 67;
    PaperA3ExtraTransverse = 68;
    PaperJapaneseDoublePostcard = 69;
    PaperA6 = 70;
    PaperJapaneseEnvelopeKaku2 = 71;
    PaperJapaneseEnvelopeKaku3 = 72;
    PaperJapaneseEnvelopeChou3 = 73;
    PaperJapaneseEnvelopeChou4 = 74;
    PaperLetterRotated = 75;
    PaperA3Rotated = 76;
    PaperA4Rotated = 77;
    PaperA5Rotated = 78;
    PaperJISB4Rotated = 79;
    PaperJISB5Rotated = 80;
    PaperJapanesePostcardRotated = 81;
    PaperJapaneseDoublePostcardRotated = 82;
    PaperA6Rotated = 83;
    PaperJapaneseEnvelopeKaku2Rotated = 84;
    PaperJapaneseEnvelopeKaku3Rotated = 85;
    PaperJapaneseEnvelopeChou3Rotated = 86;
    PaperJapaneseEnvelopeChou4Rotated = 87;
    PaperJISB6 = 88;
    PaperJISB6Rotated = 89;
    Paper12x11 = 90;
    PaperJapaneseEnvelopeYou4 = 91;
    PaperJapaneseEnvelopeYou4Rotated = 92;
    PaperPRC16K = 93;
    PaperPRC32K = 94;
    PaperPRCBig32K = 95;
    PaperPRCEnvelope1 = 96;
    PaperPRCEnvelope2 = 97;
    PaperPRCEnvelope3 = 98;
    PaperPRCEnvelope4 = 99;
    PaperPRCEnvelope5 = 100;
    PaperPRCEnvelope6 = 101;
    PaperPRCEnvelope7 = 102;
    PaperPRCEnvelope8 = 103;
    PaperPRCEnvelope9 = 104;
    PaperPRCEnvelope10 = 105;
    PaperPRC16KRotated = 106;
    PaperPRC32KRotated = 107;
    PaperPRCBig32KRotated = 108;
    PaperPRCEnvelope1Rotated = 109;
    PaperPRCEnvelope2Rotated = 110;
    PaperPRCEnvelope3Rotated = 111;
    PaperPRCEnvelope4Rotated = 112;
    PaperPRCEnvelope5Rotated = 113;
    PaperPRCEnvelope6Rotated = 114;
    PaperPRCEnvelope7Rotated = 115;
    PaperPRCEnvelope8Rotated = 116;
    PaperPRCEnvelope9Rotated = 117;
    PaperPRCEnvelope10Rotated = 118;
    PaperB3 = 300;
    PaperBusinessCard = 301;
    PaperThermal = 302;
  end;


  //-------------namespace: Aspose.Cells----------------
  [DNTypeName('Aspose.Cells.ParameterType')]
  DNParameterType = type Integer;
  DNParameterTypeHelper = record helper for DNParameterType
  public const
    Reference = 0;
    Value = 1;
    Array_ = 2;
  end;


  //-------------namespace: Aspose.Cells----------------
  [DNTypeName('Aspose.Cells.PasteType')]
  DNPasteType = type Integer;
  DNPasteTypeHelper = record helper for DNPasteType
  public const
    All = 0;
    Default_ = 1;
    AllExceptBorders = 2;
    DefaultExceptBorders = 3;
    ColumnWidths = 4;
    RowHeights = 5;
    Comments = 6;
    Formats = 7;
    Formulas = 8;
    FormulasAndNumberFormats = 9;
    Validation = 10;
    Values = 11;
    ValuesAndNumberFormats = 12;
  end;


  //-------------namespace: Aspose.Cells.Pivot----------------
  [DNTypeName('Aspose.Cells.Pivot.PivotConditionFormatRuleType')]
  DNPivotConditionFormatRuleType = type Integer;
  DNPivotConditionFormatRuleTypeHelper = record helper for DNPivotConditionFormatRuleType
  public const
    None = 0;
    All = 1;
    Row = 2;
    Column = 3;
  end;


  //-------------namespace: Aspose.Cells.Pivot----------------
  [DNTypeName('Aspose.Cells.Pivot.PivotConditionFormatScopeType')]
  DNPivotConditionFormatScopeType = type Integer;
  DNPivotConditionFormatScopeTypeHelper = record helper for DNPivotConditionFormatScopeType
  public const
    Data = 0;
    Field = 1;
    Selection = 2;
  end;


  //-------------namespace: Aspose.Cells.Pivot----------------
  [DNTypeName('Aspose.Cells.Pivot.PivotFieldDataDisplayFormat')]
  DNPivotFieldDataDisplayFormat = type Integer;
  DNPivotFieldDataDisplayFormatHelper = record helper for DNPivotFieldDataDisplayFormat
  public const
    Normal = 0;
    DifferenceFrom = 1;
    PercentageOf = 2;
    PercentageDifferenceFrom = 3;
    RunningTotalIn = 4;
    PercentageOfRow = 5;
    PercentageOfColumn = 6;
    PercentageOfTotal = 7;
    Index = 8;
    PercentageOfParentRowTotal = 9;
    PercentageOfParentColumnTotal = 10;
    PercentageOfParentTotal = 11;
    PercentageOfRunningTotalIn = 12;
    RankSmallestToLargest = 13;
    RankLargestToSmallest = 14;
  end;


  //-------------namespace: Aspose.Cells.Pivot----------------
  [DNTypeName('Aspose.Cells.Pivot.PivotFieldSubtotalType')]
  DNPivotFieldSubtotalType = type Integer;
  DNPivotFieldSubtotalTypeHelper = record helper for DNPivotFieldSubtotalType
  public const
    None = 0;
    Automatic = 1;
    Sum = 2;
    Count = 4;
    Average = 8;
    Max = 16;
    Min = 32;
    Product = 64;
    CountNums = 128;
    Stdev = 256;
    Stdevp = 512;
    Var_ = 1024;
    Varp = 2048;
  end;


  //-------------namespace: Aspose.Cells.Pivot----------------
  [DNTypeName('Aspose.Cells.Pivot.PivotFieldType')]
  DNPivotFieldType = type Integer;
  DNPivotFieldTypeHelper = record helper for DNPivotFieldType
  public const
    Undefined = 0;
    Row = 1;
    Column = 2;
    Page = 4;
    Data = 8;
  end;


  //-------------namespace: Aspose.Cells.Pivot----------------
  [DNTypeName('Aspose.Cells.Pivot.PivotFilterType')]
  DNPivotFilterType = type Integer;
  DNPivotFilterTypeHelper = record helper for DNPivotFilterType
  public const
    CaptionBeginsWith = 0;
    CaptionBetween = 1;
    CaptionContains = 2;
    CaptionEndsWith = 3;
    CaptionEqual = 4;
    CaptionGreaterThan = 5;
    CaptionGreaterThanOrEqual = 6;
    CaptionLessThan = 7;
    CaptionLessThanOrEqual = 8;
    CaptionNotBeginsWith = 9;
    CaptionNotBetween = 10;
    CaptionNotContains = 11;
    CaptionNotEndsWith = 12;
    CaptionNotEqual = 13;
    Count = 14;
    DateBetween = 15;
    DateEqual = 16;
    DateNewerThan = 17;
    DateNewerThanOrEqual = 18;
    DateNotBetween = 19;
    DateNotEqual = 20;
    DateOlderThan = 21;
    DateOlderThanOrEqual = 22;
    LastMonth = 23;
    LastQuarter = 24;
    LastWeek = 25;
    LastYear = 26;
    M1 = 27;
    M2 = 28;
    M3 = 29;
    M4 = 30;
    M5 = 31;
    M6 = 32;
    M7 = 33;
    M8 = 34;
    M9 = 35;
    M10 = 36;
    M11 = 37;
    M12 = 38;
    NextMonth = 39;
    NextQuarter = 40;
    NextWeek = 41;
    NextYear = 42;
    Percent = 43;
    Q1 = 44;
    Q2 = 45;
    Q3 = 46;
    Q4 = 47;
    Sum = 48;
    ThisMonth = 49;
    ThisQuarter = 50;
    ThisWeek = 51;
    ThisYear = 52;
    Today = 53;
    Tomorrow = 54;
    Unknown = 55;
    ValueBetween = 56;
    ValueEqual = 57;
    ValueGreaterThan = 58;
    ValueGreaterThanOrEqual = 59;
    ValueLessThan = 60;
    ValueLessThanOrEqual = 61;
    ValueNotBetween = 62;
    ValueNotEqual = 63;
    YearToDate = 64;
    Yesterday = 65;
  end;


  //-------------namespace: Aspose.Cells.Pivot----------------
  [DNTypeName('Aspose.Cells.Pivot.PivotGroupByType')]
  DNPivotGroupByType = type Integer;
  DNPivotGroupByTypeHelper = record helper for DNPivotGroupByType
  public const
    RangeOfValues = 0;
    Seconds = 1;
    Minutes = 2;
    Hours = 3;
    Days = 4;
    Months = 5;
    Quarters = 6;
    Years = 7;
  end;


  //-------------namespace: Aspose.Cells.Pivot----------------
  [DNTypeName('Aspose.Cells.Pivot.PivotItemPosition')]
  DNPivotItemPosition = type Integer;
  DNPivotItemPositionHelper = record helper for DNPivotItemPosition
  public const
    Previous = 0;
    Next = 1;
    Custom = 2;
  end;


  //-------------namespace: Aspose.Cells.Pivot----------------
  [DNTypeName('Aspose.Cells.Pivot.PivotMissingItemLimitType')]
  DNPivotMissingItemLimitType = type Integer;
  DNPivotMissingItemLimitTypeHelper = record helper for DNPivotMissingItemLimitType
  public const
    Automatic = 0;
    Max = 1;
    None = 2;
  end;


  //-------------namespace: Aspose.Cells.Pivot----------------
  [DNTypeName('Aspose.Cells.Pivot.PivotTableAutoFormatType')]
  DNPivotTableAutoFormatType = type Integer;
  DNPivotTableAutoFormatTypeHelper = record helper for DNPivotTableAutoFormatType
  public const
    None = 0;
    Classic = 1;
    Report1 = 2;
    Report2 = 3;
    Report3 = 4;
    Report4 = 5;
    Report5 = 6;
    Report6 = 7;
    Report7 = 8;
    Report8 = 9;
    Report9 = 10;
    Report10 = 11;
    Table1 = 12;
    Table2 = 13;
    Table3 = 14;
    Table4 = 15;
    Table5 = 16;
    Table6 = 17;
    Table7 = 18;
    Table8 = 19;
    Table9 = 20;
    Table10 = 21;
  end;


  //-------------namespace: Aspose.Cells.Pivot----------------
  [DNTypeName('Aspose.Cells.Pivot.PivotTableStyleType')]
  DNPivotTableStyleType = type Integer;
  DNPivotTableStyleTypeHelper = record helper for DNPivotTableStyleType
  public const
    None = 0;
    PivotTableStyleLight1 = 1;
    PivotTableStyleLight2 = 2;
    PivotTableStyleLight3 = 3;
    PivotTableStyleLight4 = 4;
    PivotTableStyleLight5 = 5;
    PivotTableStyleLight6 = 6;
    PivotTableStyleLight7 = 7;
    PivotTableStyleLight8 = 8;
    PivotTableStyleLight9 = 9;
    PivotTableStyleLight10 = 10;
    PivotTableStyleLight11 = 11;
    PivotTableStyleLight12 = 12;
    PivotTableStyleLight13 = 13;
    PivotTableStyleLight14 = 14;
    PivotTableStyleLight15 = 15;
    PivotTableStyleLight16 = 16;
    PivotTableStyleLight17 = 17;
    PivotTableStyleLight18 = 18;
    PivotTableStyleLight19 = 19;
    PivotTableStyleLight20 = 20;
    PivotTableStyleLight21 = 21;
    PivotTableStyleLight22 = 22;
    PivotTableStyleLight23 = 23;
    PivotTableStyleLight24 = 24;
    PivotTableStyleLight25 = 25;
    PivotTableStyleLight26 = 26;
    PivotTableStyleLight27 = 27;
    PivotTableStyleLight28 = 28;
    PivotTableStyleMedium1 = 29;
    PivotTableStyleMedium2 = 30;
    PivotTableStyleMedium3 = 31;
    PivotTableStyleMedium4 = 32;
    PivotTableStyleMedium5 = 33;
    PivotTableStyleMedium6 = 34;
    PivotTableStyleMedium7 = 35;
    PivotTableStyleMedium8 = 36;
    PivotTableStyleMedium9 = 37;
    PivotTableStyleMedium10 = 38;
    PivotTableStyleMedium11 = 39;
    PivotTableStyleMedium12 = 40;
    PivotTableStyleMedium13 = 41;
    PivotTableStyleMedium14 = 42;
    PivotTableStyleMedium15 = 43;
    PivotTableStyleMedium16 = 44;
    PivotTableStyleMedium17 = 45;
    PivotTableStyleMedium18 = 46;
    PivotTableStyleMedium19 = 47;
    PivotTableStyleMedium20 = 48;
    PivotTableStyleMedium21 = 49;
    PivotTableStyleMedium22 = 50;
    PivotTableStyleMedium23 = 51;
    PivotTableStyleMedium24 = 52;
    PivotTableStyleMedium25 = 53;
    PivotTableStyleMedium26 = 54;
    PivotTableStyleMedium27 = 55;
    PivotTableStyleMedium28 = 56;
    PivotTableStyleDark1 = 57;
    PivotTableStyleDark2 = 58;
    PivotTableStyleDark3 = 59;
    PivotTableStyleDark4 = 60;
    PivotTableStyleDark5 = 61;
    PivotTableStyleDark6 = 62;
    PivotTableStyleDark7 = 63;
    PivotTableStyleDark8 = 64;
    PivotTableStyleDark9 = 65;
    PivotTableStyleDark10 = 66;
    PivotTableStyleDark11 = 67;
    PivotTableStyleDark12 = 68;
    PivotTableStyleDark13 = 69;
    PivotTableStyleDark14 = 70;
    PivotTableStyleDark15 = 71;
    PivotTableStyleDark16 = 72;
    PivotTableStyleDark17 = 73;
    PivotTableStyleDark18 = 74;
    PivotTableStyleDark19 = 75;
    PivotTableStyleDark20 = 76;
    PivotTableStyleDark21 = 77;
    PivotTableStyleDark22 = 78;
    PivotTableStyleDark23 = 79;
    PivotTableStyleDark24 = 80;
    PivotTableStyleDark25 = 81;
    PivotTableStyleDark26 = 82;
    PivotTableStyleDark27 = 83;
    PivotTableStyleDark28 = 84;
    Custom = 85;
  end;


  //-------------namespace: Aspose.Cells----------------
  [DNTypeName('Aspose.Cells.PrintCommentsType')]
  DNPrintCommentsType = type Integer;
  DNPrintCommentsTypeHelper = record helper for DNPrintCommentsType
  public const
    PrintInPlace = 0;
    PrintNoComments = 1;
    PrintSheetEnd = 2;
  end;


  //-------------namespace: Aspose.Cells----------------
  [DNTypeName('Aspose.Cells.PrintErrorsType')]
  DNPrintErrorsType = type Integer;
  DNPrintErrorsTypeHelper = record helper for DNPrintErrorsType
  public const
    PrintErrorsBlank = 0;
    PrintErrorsDash = 1;
    PrintErrorsDisplayed = 2;
    PrintErrorsNA = 3;
  end;


  //-------------namespace: Aspose.Cells----------------
  [DNTypeName('Aspose.Cells.PrintingPageType')]
  DNPrintingPageType = type Integer;
  DNPrintingPageTypeHelper = record helper for DNPrintingPageType
  public const
    Default_ = 0;
    IgnoreBlank = 1;
    IgnoreStyle = 2;
  end;


  //-------------namespace: Aspose.Cells----------------
  [DNTypeName('Aspose.Cells.PrintOrderType')]
  DNPrintOrderType = type Integer;
  DNPrintOrderTypeHelper = record helper for DNPrintOrderType
  public const
    DownThenOver = 0;
    OverThenDown = 1;
  end;


  //-------------namespace: Aspose.Cells----------------
  [DNTypeName('Aspose.Cells.PrintSizeType')]
  DNPrintSizeType = type Integer;
  DNPrintSizeTypeHelper = record helper for DNPrintSizeType
  public const
    Full = 0;
    Fit = 1;
    Custom = 2;
  end;


  //-------------namespace: Aspose.Cells.Properties----------------
  [DNTypeName('Aspose.Cells.Properties.PropertyType')]
  DNPropertyType = type Integer;
  DNPropertyTypeHelper = record helper for DNPropertyType
  public const
    Boolean = 0;
    DateTime = 1;
    Double = 2;
    Number = 3;
    String_ = 4;
    Blob = 5;
  end;


  //-------------namespace: Aspose.Cells----------------
  [DNTypeName('Aspose.Cells.ProtectionType')]
  DNProtectionType = type Integer;
  DNProtectionTypeHelper = record helper for DNProtectionType
  public const
    All = 0;
    Contents = 1;
    Objects = 2;
    Scenarios = 3;
    Structure = 4;
    Windows = 5;
    None = 6;
  end;


  //-------------namespace: Aspose.Cells----------------
  [DNTypeName('Aspose.Cells.RenameStrategy')]
  DNRenameStrategy = type Integer;
  DNRenameStrategyHelper = record helper for DNRenameStrategy
  public const
    Exception = 0;
    Digit = 1;
    Letter = 2;
  end;


  //-------------namespace: Aspose.Cells.Rendering----------------
  [DNTypeName('Aspose.Cells.Rendering.ColorDepth')]
  DNColorDepth = type Integer;
  DNColorDepthHelper = record helper for DNColorDepth
  public const
    Default_ = 0;
    Format1bpp = 1;
    Format4bpp = 4;
    Format8bpp = 8;
    Format24bpp = 24;
    Format32bpp = 32;
  end;


  //-------------namespace: Aspose.Cells.Rendering----------------
  [DNTypeName('Aspose.Cells.Rendering.DrawObjectEnum')]
  DNDrawObjectEnum = type Integer;
  DNDrawObjectEnumHelper = record helper for DNDrawObjectEnum
  public const
    Image = 0;
    Cell = 1;
  end;


  //-------------namespace: Aspose.Cells.Rendering----------------
  [DNTypeName('Aspose.Cells.Rendering.PdfCompliance')]
  DNPdfCompliance = type Integer;
  DNPdfComplianceHelper = record helper for DNPdfCompliance
  public const
    None = 0;
    PdfA1b = 1;
    PdfA1a = 2;
  end;


  //-------------namespace: Aspose.Cells.Rendering----------------
  [DNTypeName('Aspose.Cells.Rendering.PdfCompressionCore')]
  DNPdfCompressionCore = type Integer;
  DNPdfCompressionCoreHelper = record helper for DNPdfCompressionCore
  public const
    None = 0;
    Rle = 1;
    Lzw = 2;
    Flate = 3;
  end;


  //-------------namespace: Aspose.Cells.Rendering----------------
  [DNTypeName('Aspose.Cells.Rendering.PdfCustomPropertiesExport')]
  DNPdfCustomPropertiesExport = type Integer;
  DNPdfCustomPropertiesExportHelper = record helper for DNPdfCustomPropertiesExport
  public const
    None = 0;
    Standard = 1;
  end;


  //-------------namespace: Aspose.Cells.Rendering----------------
  [DNTypeName('Aspose.Cells.Rendering.PdfFontEncoding')]
  DNPdfFontEncoding = type Integer;
  DNPdfFontEncodingHelper = record helper for DNPdfFontEncoding
  public const
    Identity = 0;
    AnsiPrefer = 1;
  end;


  //-------------namespace: Aspose.Cells.Rendering----------------
  [DNTypeName('Aspose.Cells.Rendering.PdfOptimizationType')]
  DNPdfOptimizationType = type Integer;
  DNPdfOptimizationTypeHelper = record helper for DNPdfOptimizationType
  public const
    Standard = 0;
    MinimumSize = 1;
  end;


  //-------------namespace: Aspose.Cells.Rendering----------------
  [DNTypeName('Aspose.Cells.Rendering.TiffCompression')]
  DNTiffCompression = type Integer;
  DNTiffCompressionHelper = record helper for DNTiffCompression
  public const
    CompressionNone = 0;
    CompressionRle = 1;
    CompressionLZW = 2;
    CompressionCCITT3 = 3;
    CompressionCCITT4 = 4;
  end;


  //-------------namespace: Aspose.Cells----------------
  [DNTypeName('Aspose.Cells.ResourceLoadingType')]
  DNResourceLoadingType = type Integer;
  DNResourceLoadingTypeHelper = record helper for DNResourceLoadingType
  public const
    Default_ = 0;
    Skip = 1;
    UserProvided = 2;
  end;


  //-------------namespace: Aspose.Cells.Revisions----------------
  [DNTypeName('Aspose.Cells.Revisions.RevisionActionType')]
  DNRevisionActionType = type Integer;
  DNRevisionActionTypeHelper = record helper for DNRevisionActionType
  public const
    Add = 0;
    Delete = 1;
    DeleteColumn = 2;
    DeleteRow = 3;
    InsertColumn = 4;
    InsertRow = 5;
  end;


  //-------------namespace: Aspose.Cells.Revisions----------------
  [DNTypeName('Aspose.Cells.Revisions.RevisionType')]
  DNRevisionType = type Integer;
  DNRevisionTypeHelper = record helper for DNRevisionType
  public const
    CustomView = 0;
    DefinedName = 1;
    ChangeCells = 2;
    AutoFormat = 3;
    MergeConflict = 4;
    Comment = 5;
    Format = 6;
    InsertSheet = 7;
    MoveCells = 8;
    Undo = 9;
    QueryTable = 10;
    InsertDelete = 11;
    RenameSheet = 12;
    Unknown = 13;
  end;


  //-------------namespace: Aspose.Cells----------------
  [DNTypeName('Aspose.Cells.SaveFormat')]
  DNSaveFormat = type Integer;
  DNSaveFormatHelper = record helper for DNSaveFormat
  public const
    Auto = 0;
    Csv = 1;
    Excel97To2003 = 5;
    Xlsx = 6;
    Xlsm = 7;
    Xltx = 8;
    Xltm = 9;
    Xlam = 10;
    TSV = 11;
    TabDelimited = 11;
    Html = 12;
    Pdf = 13;
    Ods = 14;
    SpreadsheetML = 15;
    Xlsb = 16;
    MHtml = 17;
    Xps = 20;
    TIFF = 21;
    Svg = 28;
    Dif = 30;
    Numbers = 56;
    Markdown = 57;
    FODS = 59;
    Sxc = 60;
    Pptx = 61;
    Docx = 62;
    Unknown = 255;
  end;


  //-------------namespace: Aspose.Cells----------------
  [DNTypeName('Aspose.Cells.SheetType')]
  DNSheetType = type Integer;
  DNSheetTypeHelper = record helper for DNSheetType
  public const
    VB = 0;
    Worksheet = 1;
    Chart = 2;
    BIFF4Macro = 3;
    InternationalMacro = 4;
    Other = 5;
    Dialog = 6;
  end;


  //-------------namespace: Aspose.Cells----------------
  [DNTypeName('Aspose.Cells.ShiftType')]
  DNShiftType = type Integer;
  DNShiftTypeHelper = record helper for DNShiftType
  public const
    Down = 0;
    Left = 1;
    None = 2;
    Right = 3;
    Up = 4;
  end;


  //-------------namespace: Aspose.Cells.Slicers----------------
  [DNTypeName('Aspose.Cells.Slicers.SlicerCacheCrossFilterType')]
  DNSlicerCacheCrossFilterType = type Integer;
  DNSlicerCacheCrossFilterTypeHelper = record helper for DNSlicerCacheCrossFilterType
  public const
    None = 0;
    ShowItemsWithDataAtTop = 1;
    ShowItemsWithNoData = 2;
  end;


  //-------------namespace: Aspose.Cells.Slicers----------------
  [DNTypeName('Aspose.Cells.Slicers.SlicerCacheItemSortType')]
  DNSlicerCacheItemSortType = type Integer;
  DNSlicerCacheItemSortTypeHelper = record helper for DNSlicerCacheItemSortType
  public const
    Ascending = 0;
    Descending = 1;
  end;


  //-------------namespace: Aspose.Cells.Slicers----------------
  [DNTypeName('Aspose.Cells.Slicers.SlicerStyleType')]
  DNSlicerStyleType = type Integer;
  DNSlicerStyleTypeHelper = record helper for DNSlicerStyleType
  public const
    SlicerStyleLight1 = 0;
    SlicerStyleLight2 = 1;
    SlicerStyleLight3 = 2;
    SlicerStyleLight4 = 3;
    SlicerStyleLight5 = 4;
    SlicerStyleLight6 = 5;
    SlicerStyleOther1 = 6;
    SlicerStyleOther2 = 7;
    SlicerStyleDark1 = 8;
    SlicerStyleDark2 = 9;
    SlicerStyleDark3 = 10;
    SlicerStyleDark4 = 11;
    SlicerStyleDark5 = 12;
    SlicerStyleDark6 = 13;
    Custom = 14;
  end;


  //-------------namespace: Aspose.Cells----------------
  [DNTypeName('Aspose.Cells.SortOnType')]
  DNSortOnType = type Integer;
  DNSortOnTypeHelper = record helper for DNSortOnType
  public const
    Value = 0;
    CellColor = 1;
    FontColor = 2;
    Icon = 3;
  end;


  //-------------namespace: Aspose.Cells----------------
  [DNTypeName('Aspose.Cells.SortOrder')]
  DNSortOrder = type Integer;
  DNSortOrderHelper = record helper for DNSortOrder
  public const
    Ascending = 0;
    Descending = 1;
  end;


  //-------------namespace: Aspose.Cells----------------
  [DNTypeName('Aspose.Cells.StyleModifyFlag')]
  DNStyleModifyFlag = type Integer;
  DNStyleModifyFlagHelper = record helper for DNStyleModifyFlag
  public const
    All = 0;
    Borders = 1;
    LeftBorder = 2;
    RightBorder = 3;
    TopBorder = 4;
    BottomBorder = 5;
    HorizontalBorder = 6;
    VerticalBorder = 7;
    Diagonal = 8;
    DiagonalDownBorder = 9;
    DiagonalUpBorder = 10;
    Font = 11;
    FontSize = 12;
    FontName = 13;
    FontFamily = 14;
    FontCharset = 15;
    FontColor = 16;
    FontWeight = 17;
    FontItalic = 18;
    FontUnderline = 19;
    FontStrike = 20;
    FontSubscript = 21;
    FontSuperscript = 22;
    FontScript = 23;
    NumberFormat = 24;
    HorizontalAlignment = 25;
    VerticalAlignment = 26;
    Indent = 27;
    Rotation = 28;
    WrapText = 29;
    ShrinkToFit = 30;
    TextDirection = 31;
    CellShading = 32;
    Pattern = 33;
    ForegroundColor = 34;
    BackgroundColor = 35;
    Locked = 36;
    HideFormula = 37;
    AlignmentSettings = 38;
    ProtectionSettings = 39;
    FontScheme = 40;
    FontDirty = 41;
    FontSpellingError = 42;
    FontUFillTx = 43;
    FontSpacing = 44;
    FontKerning = 45;
    FontEqualize = 46;
    FontCap = 47;
    RelativeIndent = 48;
  end;


  //-------------namespace: Aspose.Cells.Tables----------------
  [DNTypeName('Aspose.Cells.Tables.TableDataSourceType')]
  DNTableDataSourceType = type Integer;
  DNTableDataSourceTypeHelper = record helper for DNTableDataSourceType
  public const
    Worksheet = 0;
    SharePoint = 1;
    XML = 2;
    QueryTable = 3;
  end;


  //-------------namespace: Aspose.Cells.Tables----------------
  [DNTypeName('Aspose.Cells.Tables.TableStyleElementType')]
  DNTableStyleElementType = type Integer;
  DNTableStyleElementTypeHelper = record helper for DNTableStyleElementType
  public const
    WholeTable = 0;
    PageFieldLabels = 1;
    PageFieldValues = 2;
    FirstColumnStripe = 3;
    SecondColumnStripe = 4;
    FirstRowStripe = 5;
    SecondRowStripe = 6;
    LastColumn = 7;
    FirstColumn = 8;
    HeaderRow = 9;
    TotalRow = 10;
    FirstHeaderCell = 11;
    LastHeaderCell = 12;
    FirstTotalCell = 13;
    LastTotalCell = 14;
    FirstSubtotalColumn = 15;
    SecondSubtotalColumn = 16;
    ThirdSubtotalColumn = 17;
    BlankRow = 18;
    FirstSubtotalRow = 19;
    SecondSubtotalRow = 20;
    ThirdSubtotalRow = 21;
    FirstColumnSubheading = 22;
    SecondColumnSubheading = 23;
    ThirdColumnSubheading = 24;
    FirstRowSubheading = 25;
    SecondRowSubheading = 26;
    ThirdRowSubheading = 27;
    GrandTotalColumn = 28;
    GrandTotalRow = 29;
  end;


  //-------------namespace: Aspose.Cells.Tables----------------
  [DNTypeName('Aspose.Cells.Tables.TableStyleType')]
  DNTableStyleType = type Integer;
  DNTableStyleTypeHelper = record helper for DNTableStyleType
  public const
    None = 0;
    TableStyleLight1 = 1;
    TableStyleLight2 = 2;
    TableStyleLight3 = 3;
    TableStyleLight4 = 4;
    TableStyleLight5 = 5;
    TableStyleLight6 = 6;
    TableStyleLight7 = 7;
    TableStyleLight8 = 8;
    TableStyleLight9 = 9;
    TableStyleLight10 = 10;
    TableStyleLight11 = 11;
    TableStyleLight12 = 12;
    TableStyleLight13 = 13;
    TableStyleLight14 = 14;
    TableStyleLight15 = 15;
    TableStyleLight16 = 16;
    TableStyleLight17 = 17;
    TableStyleLight18 = 18;
    TableStyleLight19 = 19;
    TableStyleLight20 = 20;
    TableStyleLight21 = 21;
    TableStyleMedium1 = 22;
    TableStyleMedium2 = 23;
    TableStyleMedium3 = 24;
    TableStyleMedium4 = 25;
    TableStyleMedium5 = 26;
    TableStyleMedium6 = 27;
    TableStyleMedium7 = 28;
    TableStyleMedium8 = 29;
    TableStyleMedium9 = 30;
    TableStyleMedium10 = 31;
    TableStyleMedium11 = 32;
    TableStyleMedium12 = 33;
    TableStyleMedium13 = 34;
    TableStyleMedium14 = 35;
    TableStyleMedium15 = 36;
    TableStyleMedium16 = 37;
    TableStyleMedium17 = 38;
    TableStyleMedium18 = 39;
    TableStyleMedium19 = 40;
    TableStyleMedium20 = 41;
    TableStyleMedium21 = 42;
    TableStyleMedium22 = 43;
    TableStyleMedium23 = 44;
    TableStyleMedium24 = 45;
    TableStyleMedium25 = 46;
    TableStyleMedium26 = 47;
    TableStyleMedium27 = 48;
    TableStyleMedium28 = 49;
    TableStyleDark1 = 50;
    TableStyleDark2 = 51;
    TableStyleDark3 = 52;
    TableStyleDark4 = 53;
    TableStyleDark5 = 54;
    TableStyleDark6 = 55;
    TableStyleDark7 = 56;
    TableStyleDark8 = 57;
    TableStyleDark9 = 58;
    TableStyleDark10 = 59;
    TableStyleDark11 = 60;
    Custom = 61;
  end;


  //-------------namespace: Aspose.Cells.Tables----------------
  [DNTypeName('Aspose.Cells.Tables.TotalsCalculation')]
  DNTotalsCalculation = type Integer;
  DNTotalsCalculationHelper = record helper for DNTotalsCalculation
  public const
    None = 0;
    Average = 1;
    Count = 2;
    CountNums = 3;
    Max = 4;
    Min = 5;
    Sum = 6;
    StdDev = 7;
    Var_ = 8;
    Custom = 9;
  end;


  //-------------namespace: Aspose.Cells----------------
  [DNTypeName('Aspose.Cells.TargetModeType')]
  DNTargetModeType = type Integer;
  DNTargetModeTypeHelper = record helper for DNTargetModeType
  public const
    External_ = 0;
    FilePath = 1;
    Email = 2;
    CellReference = 3;
  end;


  //-------------namespace: Aspose.Cells----------------
  [DNTypeName('Aspose.Cells.TextAlignmentType')]
  DNTextAlignmentType = type Integer;
  DNTextAlignmentTypeHelper = record helper for DNTextAlignmentType
  public const
    Bottom = 0;
    Center = 1;
    CenterAcross = 2;
    Distributed = 3;
    Fill = 4;
    General = 5;
    Justify = 6;
    Left = 7;
    Right = 8;
    Top = 9;
    JustifiedLow = 10;
    ThaiDistributed = 11;
  end;


  //-------------namespace: Aspose.Cells----------------
  [DNTypeName('Aspose.Cells.TextCapsType')]
  DNTextCapsType = type Integer;
  DNTextCapsTypeHelper = record helper for DNTextCapsType
  public const
    None = 0;
    All = 1;
    Small = 2;
  end;


  //-------------namespace: Aspose.Cells----------------
  [DNTypeName('Aspose.Cells.TextCrossType')]
  DNTextCrossType = type Integer;
  DNTextCrossTypeHelper = record helper for DNTextCrossType
  public const
    Default_ = 1;
    CrossKeep = 2;
    CrossOverride = 3;
    StrictInCell = 4;
  end;


  //-------------namespace: Aspose.Cells----------------
  [DNTypeName('Aspose.Cells.TextDirectionType')]
  DNTextDirectionType = type Integer;
  DNTextDirectionTypeHelper = record helper for DNTextDirectionType
  public const
    Context = 0;
    LeftToRight = 1;
    RightToLeft = 2;
  end;


  //-------------namespace: Aspose.Cells----------------
  [DNTypeName('Aspose.Cells.TextOrientationType')]
  DNTextOrientationType = type Integer;
  DNTextOrientationTypeHelper = record helper for DNTextOrientationType
  public const
    ClockWise = 0;
    CounterClockWise = 1;
    NoRotation = 2;
    TopToBottom = 3;
  end;


  //-------------namespace: Aspose.Cells----------------
  [DNTypeName('Aspose.Cells.TextStrikeType')]
  DNTextStrikeType = type Integer;
  DNTextStrikeTypeHelper = record helper for DNTextStrikeType
  public const
    Single = 0;
    Double = 1;
    None = 2;
  end;


  //-------------namespace: Aspose.Cells----------------
  [DNTypeName('Aspose.Cells.ThemeColorType')]
  DNThemeColorType = type Integer;
  DNThemeColorTypeHelper = record helper for DNThemeColorType
  public const
    Background1 = 0;
    Text1 = 1;
    Background2 = 2;
    Text2 = 3;
    Accent1 = 4;
    Accent2 = 5;
    Accent3 = 6;
    Accent4 = 7;
    Accent5 = 8;
    Accent6 = 9;
    Hyperlink = 10;
    FollowedHyperlink = 11;
    StyleColor = 12;
  end;


  //-------------namespace: Aspose.Cells----------------
  [DNTypeName('Aspose.Cells.TimePeriodType')]
  DNTimePeriodType = type Integer;
  DNTimePeriodTypeHelper = record helper for DNTimePeriodType
  public const
    Today = 0;
    Yesterday = 1;
    Tomorrow = 2;
    Last7Days = 3;
    ThisMonth = 4;
    LastMonth = 5;
    NextMonth = 6;
    ThisWeek = 7;
    LastWeek = 8;
    NextWeek = 9;
    ThisYear = 10;
    LastYear = 11;
    NextYear = 12;
  end;


  //-------------namespace: Aspose.Cells----------------
  [DNTypeName('Aspose.Cells.TxtLoadStyleStrategy')]
  DNTxtLoadStyleStrategy = type Integer;
  DNTxtLoadStyleStrategyHelper = record helper for DNTxtLoadStyleStrategy
  public const
    None = 0;
    BuiltIn = 1;
    ExactFormat = 2;
  end;


  //-------------namespace: Aspose.Cells----------------
  [DNTypeName('Aspose.Cells.TxtValueQuoteType')]
  DNTxtValueQuoteType = type Integer;
  DNTxtValueQuoteTypeHelper = record helper for DNTxtValueQuoteType
  public const
    Normal = 0;
    Always = 1;
    Minimum = 2;
    Never = 3;
  end;


  //-------------namespace: Aspose.Cells----------------
  [DNTypeName('Aspose.Cells.UpdateLinksType')]
  DNUpdateLinksType = type Integer;
  DNUpdateLinksTypeHelper = record helper for DNUpdateLinksType
  public const
    UserSet = 0;
    Never = 1;
    Always = 2;
  end;


  //-------------namespace: Aspose.Cells----------------
  [DNTypeName('Aspose.Cells.ValidationAlertType')]
  DNValidationAlertType = type Integer;
  DNValidationAlertTypeHelper = record helper for DNValidationAlertType
  public const
    Information = 0;
    Stop = 1;
    Warning = 2;
  end;


  //-------------namespace: Aspose.Cells----------------
  [DNTypeName('Aspose.Cells.ValidationType')]
  DNValidationType = type Integer;
  DNValidationTypeHelper = record helper for DNValidationType
  public const
    AnyValue = 0;
    WholeNumber = 1;
    Decimal = 2;
    List = 3;
    Date = 4;
    Time = 5;
    TextLength = 6;
    Custom = 7;
  end;


  //-------------namespace: Aspose.Cells.Vba----------------
  [DNTypeName('Aspose.Cells.Vba.VbaModuleType')]
  DNVbaModuleType = type Integer;
  DNVbaModuleTypeHelper = record helper for DNVbaModuleType
  public const
    Procedural = 0;
    Document = 1;
    Class_ = 2;
    Designer = 3;
  end;


  //-------------namespace: Aspose.Cells.Vba----------------
  [DNTypeName('Aspose.Cells.Vba.VbaProjectReferenceType')]
  DNVbaProjectReferenceType = type Integer;
  DNVbaProjectReferenceTypeHelper = record helper for DNVbaProjectReferenceType
  public const
    Registered = 0;
    Control = 1;
    Project = 2;
  end;


  //-------------namespace: Aspose.Cells----------------
  [DNTypeName('Aspose.Cells.ViewType')]
  DNViewType = type Integer;
  DNViewTypeHelper = record helper for DNViewType
  public const
    NormalView = 0;
    PageBreakPreview = 1;
    PageLayoutView = 2;
  end;


  //-------------namespace: Aspose.Cells----------------
  [DNTypeName('Aspose.Cells.VisibilityType')]
  DNVisibilityType = type Integer;
  DNVisibilityTypeHelper = record helper for DNVisibilityType
  public const
    Visible = 0;
    Hidden = 1;
    VeryHidden = 2;
  end;


  //-------------namespace: Aspose.Cells----------------
  [DNTypeName('Aspose.Cells.WarningType')]
  DNWarningType = type Integer;
  DNWarningTypeHelper = record helper for DNWarningType
  public const
    FontSubstitution = 0;
    DuplicateDefinedName = 1;
    UnsupportedFileFormat = 2;
    InvalidTextOfDefinedName = 3;
    InvalidFontName = 4;
    InvalidAutoFilterRange = 5;
  end;


  //-------------namespace: Aspose.Cells.WebExtensions----------------
  [DNTypeName('Aspose.Cells.WebExtensions.WebExtensionStoreType')]
  DNWebExtensionStoreType = type Integer;
  DNWebExtensionStoreTypeHelper = record helper for DNWebExtensionStoreType
  public const
    OMEX = 0;
    SPCatalog = 1;
    SPApp = 2;
    Exchange = 3;
    FileSystem = 4;
    Registry = 5;
    ExCatalog = 6;
  end;




type


{ declares }

  DNICellsDataTable = interface; // type: Aspose.Cells.ICellsDataTable, namespace: Aspose.Cells
  DNICustomFunction = interface; // type: Aspose.Cells.ICustomFunction, namespace: Aspose.Cells
  DNICustomParser = interface; // type: Aspose.Cells.ICustomParser, namespace: Aspose.Cells
  DNIExportObjectListener = interface; // type: Aspose.Cells.IExportObjectListener, namespace: Aspose.Cells
  DNIFilePathProvider = interface; // type: Aspose.Cells.IFilePathProvider, namespace: Aspose.Cells
  DNISmartMarkerCallBack = interface; // type: Aspose.Cells.ISmartMarkerCallBack, namespace: Aspose.Cells
  DNIStreamProvider = interface; // type: Aspose.Cells.IStreamProvider, namespace: Aspose.Cells
  DNIWarningCallback = interface; // type: Aspose.Cells.IWarningCallback, namespace: Aspose.Cells
  DNLightCellsDataHandler = interface; // type: Aspose.Cells.LightCellsDataHandler, namespace: Aspose.Cells
  DNLightCellsDataProvider = interface; // type: Aspose.Cells.LightCellsDataProvider, namespace: Aspose.Cells
  DNIPageSavingCallback = interface; // type: Aspose.Cells.Rendering.IPageSavingCallback, namespace: Aspose.Cells.Rendering
  DNAboveAverage = interface; // type: Aspose.Cells.AboveAverage, namespace: Aspose.Cells
  DNAbstractCalculationEngine = interface; // type: Aspose.Cells.AbstractCalculationEngine, namespace: Aspose.Cells
  DNAbstractCalculationMonitor = interface; // type: Aspose.Cells.AbstractCalculationMonitor, namespace: Aspose.Cells
  DNAutoFilter = interface; // type: Aspose.Cells.AutoFilter, namespace: Aspose.Cells
  DNAutoFitterOptions = interface; // type: Aspose.Cells.AutoFitterOptions, namespace: Aspose.Cells
  DNBorder = interface; // type: Aspose.Cells.Border, namespace: Aspose.Cells
  DNBorderCollection = interface; // type: Aspose.Cells.BorderCollection, namespace: Aspose.Cells
  DNCalculationCell = interface; // type: Aspose.Cells.CalculationCell, namespace: Aspose.Cells
  DNCalculationData = interface; // type: Aspose.Cells.CalculationData, namespace: Aspose.Cells
  DNCalculationOptions = interface; // type: Aspose.Cells.CalculationOptions, namespace: Aspose.Cells
  DNCell = interface; // type: Aspose.Cells.Cell, namespace: Aspose.Cells
  DNCells = interface; // type: Aspose.Cells.Cells, namespace: Aspose.Cells
  DNCellsColor = interface; // type: Aspose.Cells.CellsColor, namespace: Aspose.Cells
  DNCellsFactory = interface; // type: Aspose.Cells.CellsFactory, namespace: Aspose.Cells
  DNCellsHelper = interface; // type: Aspose.Cells.CellsHelper, namespace: Aspose.Cells
  DNCellWatch = interface; // type: Aspose.Cells.CellWatch, namespace: Aspose.Cells
  DNAxis = interface; // type: Aspose.Cells.Charts.Axis, namespace: Aspose.Cells.Charts
  DNChart = interface; // type: Aspose.Cells.Charts.Chart, namespace: Aspose.Cells.Charts
  DNChartDataTable = interface; // type: Aspose.Cells.Charts.ChartDataTable, namespace: Aspose.Cells.Charts
  DNChartFrame = interface; // type: Aspose.Cells.Charts.ChartFrame, namespace: Aspose.Cells.Charts
  DNChartArea = interface; // type: Aspose.Cells.Charts.ChartArea, namespace: Aspose.Cells.Charts
  DNChartTextFrame = interface; // type: Aspose.Cells.Charts.ChartTextFrame, namespace: Aspose.Cells.Charts
  DNDataLabels = interface; // type: Aspose.Cells.Charts.DataLabels, namespace: Aspose.Cells.Charts
  DNDisplayUnitLabel = interface; // type: Aspose.Cells.Charts.DisplayUnitLabel, namespace: Aspose.Cells.Charts
  DNLegend = interface; // type: Aspose.Cells.Charts.Legend, namespace: Aspose.Cells.Charts
  DNTitle = interface; // type: Aspose.Cells.Charts.Title, namespace: Aspose.Cells.Charts
  DNPlotArea = interface; // type: Aspose.Cells.Charts.PlotArea, namespace: Aspose.Cells.Charts
  DNChartPoint = interface; // type: Aspose.Cells.Charts.ChartPoint, namespace: Aspose.Cells.Charts
  DNChartPointCollection = interface; // type: Aspose.Cells.Charts.ChartPointCollection, namespace: Aspose.Cells.Charts
  DNDropBars = interface; // type: Aspose.Cells.Charts.DropBars, namespace: Aspose.Cells.Charts
  DNLegendEntry = interface; // type: Aspose.Cells.Charts.LegendEntry, namespace: Aspose.Cells.Charts
  DNMarker = interface; // type: Aspose.Cells.Charts.Marker, namespace: Aspose.Cells.Charts
  DNPivotOptions = interface; // type: Aspose.Cells.Charts.PivotOptions, namespace: Aspose.Cells.Charts
  DNSeries = interface; // type: Aspose.Cells.Charts.Series, namespace: Aspose.Cells.Charts
  DNSeriesLayoutProperties = interface; // type: Aspose.Cells.Charts.SeriesLayoutProperties, namespace: Aspose.Cells.Charts
  DNSparkline = interface; // type: Aspose.Cells.Charts.Sparkline, namespace: Aspose.Cells.Charts
  DNSparklineGroup = interface; // type: Aspose.Cells.Charts.SparklineGroup, namespace: Aspose.Cells.Charts
  DNTickLabels = interface; // type: Aspose.Cells.Charts.TickLabels, namespace: Aspose.Cells.Charts
  DNCellWatchCollection = interface; // type: Aspose.Cells.CellWatchCollection, namespace: Aspose.Cells
  DNChartCollection = interface; // type: Aspose.Cells.Charts.ChartCollection, namespace: Aspose.Cells.Charts
  DNLegendEntryCollection = interface; // type: Aspose.Cells.Charts.LegendEntryCollection, namespace: Aspose.Cells.Charts
  DNSeriesCollection = interface; // type: Aspose.Cells.Charts.SeriesCollection, namespace: Aspose.Cells.Charts
  DNSparklineCollection = interface; // type: Aspose.Cells.Charts.SparklineCollection, namespace: Aspose.Cells.Charts
  DNSparklineGroupCollection = interface; // type: Aspose.Cells.Charts.SparklineGroupCollection, namespace: Aspose.Cells.Charts
  DNTrendlineCollection = interface; // type: Aspose.Cells.Charts.TrendlineCollection, namespace: Aspose.Cells.Charts
  DNColumnCollection = interface; // type: Aspose.Cells.ColumnCollection, namespace: Aspose.Cells
  DNCommentCollection = interface; // type: Aspose.Cells.CommentCollection, namespace: Aspose.Cells
  DNConditionalFormattingIconCollection = interface; // type: Aspose.Cells.ConditionalFormattingIconCollection, namespace: Aspose.Cells
  DNConditionalFormattingValueCollection = interface; // type: Aspose.Cells.ConditionalFormattingValueCollection, namespace: Aspose.Cells
  DNCustomFilterCollection = interface; // type: Aspose.Cells.CustomFilterCollection, namespace: Aspose.Cells
  DNDataSorterKeyCollection = interface; // type: Aspose.Cells.DataSorterKeyCollection, namespace: Aspose.Cells
  DNCheckBoxCollection = interface; // type: Aspose.Cells.Drawing.CheckBoxCollection, namespace: Aspose.Cells.Drawing
  DNGradientStopCollection = interface; // type: Aspose.Cells.Drawing.GradientStopCollection, namespace: Aspose.Cells.Drawing
  DNOleObjectCollection = interface; // type: Aspose.Cells.Drawing.OleObjectCollection, namespace: Aspose.Cells.Drawing
  DNPictureCollection = interface; // type: Aspose.Cells.Drawing.PictureCollection, namespace: Aspose.Cells.Drawing
  DNShapeCollection = interface; // type: Aspose.Cells.Drawing.ShapeCollection, namespace: Aspose.Cells.Drawing
  DNShapeGuideCollection = interface; // type: Aspose.Cells.Drawing.ShapeGuideCollection, namespace: Aspose.Cells.Drawing
  DNShapePathCollection = interface; // type: Aspose.Cells.Drawing.ShapePathCollection, namespace: Aspose.Cells.Drawing
  DNShapePathPointCollection = interface; // type: Aspose.Cells.Drawing.ShapePathPointCollection, namespace: Aspose.Cells.Drawing
  DNShapeSegmentPathCollection = interface; // type: Aspose.Cells.Drawing.ShapeSegmentPathCollection, namespace: Aspose.Cells.Drawing
  DNTextBoxCollection = interface; // type: Aspose.Cells.Drawing.TextBoxCollection, namespace: Aspose.Cells.Drawing
  DNTextTabStopCollection = interface; // type: Aspose.Cells.Drawing.Texts.TextTabStopCollection, namespace: Aspose.Cells.Drawing.Texts
  DNErrorCheckOptionCollection = interface; // type: Aspose.Cells.ErrorCheckOptionCollection, namespace: Aspose.Cells
  DNConnectionParameterCollection = interface; // type: Aspose.Cells.ExternalConnections.ConnectionParameterCollection, namespace: Aspose.Cells.ExternalConnections
  DNExternalConnectionCollection = interface; // type: Aspose.Cells.ExternalConnections.ExternalConnectionCollection, namespace: Aspose.Cells.ExternalConnections
  DNFilterColumnCollection = interface; // type: Aspose.Cells.FilterColumnCollection, namespace: Aspose.Cells
  DNFontSettingCollection = interface; // type: Aspose.Cells.Drawing.Texts.FontSettingCollection, namespace: Aspose.Cells.Drawing.Texts
  DNConditionalFormattingCollection = interface; // type: Aspose.Cells.ConditionalFormattingCollection, namespace: Aspose.Cells
  DNHorizontalPageBreakCollection = interface; // type: Aspose.Cells.HorizontalPageBreakCollection, namespace: Aspose.Cells
  DNHyperlinkCollection = interface; // type: Aspose.Cells.HyperlinkCollection, namespace: Aspose.Cells
  DNCustomXmlPartCollection = interface; // type: Aspose.Cells.Markup.CustomXmlPartCollection, namespace: Aspose.Cells.Markup
  DNSmartTagCollection = interface; // type: Aspose.Cells.Markup.SmartTagCollection, namespace: Aspose.Cells.Markup
  DNSmartTagPropertyCollection = interface; // type: Aspose.Cells.Markup.SmartTagPropertyCollection, namespace: Aspose.Cells.Markup
  DNNameCollection = interface; // type: Aspose.Cells.NameCollection, namespace: Aspose.Cells
  DNOdsCellFieldCollection = interface; // type: Aspose.Cells.Ods.OdsCellFieldCollection, namespace: Aspose.Cells.Ods
  DNPivotFilterCollection = interface; // type: Aspose.Cells.Pivot.PivotFilterCollection, namespace: Aspose.Cells.Pivot
  DNPivotFormatConditionCollection = interface; // type: Aspose.Cells.Pivot.PivotFormatConditionCollection, namespace: Aspose.Cells.Pivot
  DNPivotTableCollection = interface; // type: Aspose.Cells.Pivot.PivotTableCollection, namespace: Aspose.Cells.Pivot
  DNContentTypePropertyCollection = interface; // type: Aspose.Cells.Properties.ContentTypePropertyCollection, namespace: Aspose.Cells.Properties
  DNCustomPropertyCollection = interface; // type: Aspose.Cells.Properties.CustomPropertyCollection, namespace: Aspose.Cells.Properties
  DNProtectedRangeCollection = interface; // type: Aspose.Cells.ProtectedRangeCollection, namespace: Aspose.Cells
  DNQueryTableCollection = interface; // type: Aspose.Cells.QueryTableCollection, namespace: Aspose.Cells
  DNPowerQueryFormulaCollction = interface; // type: Aspose.Cells.QueryTables.PowerQueryFormulaCollction, namespace: Aspose.Cells.QueryTables
  DNPowerQueryFormulaItemCollection = interface; // type: Aspose.Cells.QueryTables.PowerQueryFormulaItemCollection, namespace: Aspose.Cells.QueryTables
  DNPowerQueryFormulaParameterCollection = interface; // type: Aspose.Cells.QueryTables.PowerQueryFormulaParameterCollection, namespace: Aspose.Cells.QueryTables
  DNRangeCollection = interface; // type: Aspose.Cells.RangeCollection, namespace: Aspose.Cells
  DNReferredAreaCollection = interface; // type: Aspose.Cells.ReferredAreaCollection, namespace: Aspose.Cells
  DNRevisionCollection = interface; // type: Aspose.Cells.Revisions.RevisionCollection, namespace: Aspose.Cells.Revisions
  DNRevisionLogCollection = interface; // type: Aspose.Cells.Revisions.RevisionLogCollection, namespace: Aspose.Cells.Revisions
  DNScenarioCollection = interface; // type: Aspose.Cells.ScenarioCollection, namespace: Aspose.Cells
  DNScenarioInputCellCollection = interface; // type: Aspose.Cells.ScenarioInputCellCollection, namespace: Aspose.Cells
  DNSlicerCollection = interface; // type: Aspose.Cells.Slicers.SlicerCollection, namespace: Aspose.Cells.Slicers
  DNSlicerCacheItemCollection = interface; // type: Aspose.Cells.Slicers.SlicerCacheItemCollection, namespace: Aspose.Cells.Slicers
  DNDxfCollection = interface; // type: Aspose.Cells.DxfCollection, namespace: Aspose.Cells
  DNListColumnCollection = interface; // type: Aspose.Cells.Tables.ListColumnCollection, namespace: Aspose.Cells.Tables
  DNListObjectCollection = interface; // type: Aspose.Cells.Tables.ListObjectCollection, namespace: Aspose.Cells.Tables
  DNTableStyleCollection = interface; // type: Aspose.Cells.Tables.TableStyleCollection, namespace: Aspose.Cells.Tables
  DNTableStyleElementCollection = interface; // type: Aspose.Cells.Tables.TableStyleElementCollection, namespace: Aspose.Cells.Tables
  DNThreadedCommentCollection = interface; // type: Aspose.Cells.ThreadedCommentCollection, namespace: Aspose.Cells
  DNThreadedCommentAuthorCollection = interface; // type: Aspose.Cells.ThreadedCommentAuthorCollection, namespace: Aspose.Cells
  DNValidationCollection = interface; // type: Aspose.Cells.ValidationCollection, namespace: Aspose.Cells
  DNVbaModuleCollection = interface; // type: Aspose.Cells.Vba.VbaModuleCollection, namespace: Aspose.Cells.Vba
  DNVbaProjectReferenceCollection = interface; // type: Aspose.Cells.Vba.VbaProjectReferenceCollection, namespace: Aspose.Cells.Vba
  DNVerticalPageBreakCollection = interface; // type: Aspose.Cells.VerticalPageBreakCollection, namespace: Aspose.Cells
  DNWebExtensionCollection = interface; // type: Aspose.Cells.WebExtensions.WebExtensionCollection, namespace: Aspose.Cells.WebExtensions
  DNWebExtensionBindingCollection = interface; // type: Aspose.Cells.WebExtensions.WebExtensionBindingCollection, namespace: Aspose.Cells.WebExtensions
  DNWebExtensionPropertyCollection = interface; // type: Aspose.Cells.WebExtensions.WebExtensionPropertyCollection, namespace: Aspose.Cells.WebExtensions
  DNWebExtensionReferenceCollection = interface; // type: Aspose.Cells.WebExtensions.WebExtensionReferenceCollection, namespace: Aspose.Cells.WebExtensions
  DNWebExtensionTaskPaneCollection = interface; // type: Aspose.Cells.WebExtensions.WebExtensionTaskPaneCollection, namespace: Aspose.Cells.WebExtensions
  DNWorksheetCollection = interface; // type: Aspose.Cells.WorksheetCollection, namespace: Aspose.Cells
  DNXmlMapCollection = interface; // type: Aspose.Cells.XmlMapCollection, namespace: Aspose.Cells
  DNCollectionBase<T> = interface; // type: Aspose.Cells.CollectionBase`1, namespace: Aspose.Cells
  DNColorFilter = interface; // type: Aspose.Cells.ColorFilter, namespace: Aspose.Cells
  DNColorScale = interface; // type: Aspose.Cells.ColorScale, namespace: Aspose.Cells
  DNColumn = interface; // type: Aspose.Cells.Column, namespace: Aspose.Cells
  DNComment = interface; // type: Aspose.Cells.Comment, namespace: Aspose.Cells
  DNConditionalFormattingIcon = interface; // type: Aspose.Cells.ConditionalFormattingIcon, namespace: Aspose.Cells
  DNConditionalFormattingResult = interface; // type: Aspose.Cells.ConditionalFormattingResult, namespace: Aspose.Cells
  DNConditionalFormattingValue = interface; // type: Aspose.Cells.ConditionalFormattingValue, namespace: Aspose.Cells
  DNCopyOptions = interface; // type: Aspose.Cells.CopyOptions, namespace: Aspose.Cells
  DNCustomFilter = interface; // type: Aspose.Cells.CustomFilter, namespace: Aspose.Cells
  DNCustomImplementationFactory = interface; // type: Aspose.Cells.CustomImplementationFactory, namespace: Aspose.Cells
  DNDataBar = interface; // type: Aspose.Cells.DataBar, namespace: Aspose.Cells
  DNDataBarBorder = interface; // type: Aspose.Cells.DataBarBorder, namespace: Aspose.Cells
  DNDataSorter = interface; // type: Aspose.Cells.DataSorter, namespace: Aspose.Cells
  DNDataSorterKey = interface; // type: Aspose.Cells.DataSorterKey, namespace: Aspose.Cells
  DNDateTimeGroupItem = interface; // type: Aspose.Cells.DateTimeGroupItem, namespace: Aspose.Cells
  DNDeleteOptions = interface; // type: Aspose.Cells.DeleteOptions, namespace: Aspose.Cells
  DNDigitalSignature = interface; // type: Aspose.Cells.DigitalSignatures.DigitalSignature, namespace: Aspose.Cells.DigitalSignatures
  DNDigitalSignatureCollection = interface; // type: Aspose.Cells.DigitalSignatures.DigitalSignatureCollection, namespace: Aspose.Cells.DigitalSignatures
  DNActiveXControlBase = interface; // type: Aspose.Cells.Drawing.ActiveXControls.ActiveXControlBase, namespace: Aspose.Cells.Drawing.ActiveXControls
  DNActiveXControl = interface; // type: Aspose.Cells.Drawing.ActiveXControls.ActiveXControl, namespace: Aspose.Cells.Drawing.ActiveXControls
  DNCheckBoxActiveXControl = interface; // type: Aspose.Cells.Drawing.ActiveXControls.CheckBoxActiveXControl, namespace: Aspose.Cells.Drawing.ActiveXControls
  DNComboBoxActiveXControl = interface; // type: Aspose.Cells.Drawing.ActiveXControls.ComboBoxActiveXControl, namespace: Aspose.Cells.Drawing.ActiveXControls
  DNCommandButtonActiveXControl = interface; // type: Aspose.Cells.Drawing.ActiveXControls.CommandButtonActiveXControl, namespace: Aspose.Cells.Drawing.ActiveXControls
  DNImageActiveXControl = interface; // type: Aspose.Cells.Drawing.ActiveXControls.ImageActiveXControl, namespace: Aspose.Cells.Drawing.ActiveXControls
  DNLabelActiveXControl = interface; // type: Aspose.Cells.Drawing.ActiveXControls.LabelActiveXControl, namespace: Aspose.Cells.Drawing.ActiveXControls
  DNListBoxActiveXControl = interface; // type: Aspose.Cells.Drawing.ActiveXControls.ListBoxActiveXControl, namespace: Aspose.Cells.Drawing.ActiveXControls
  DNSpinButtonActiveXControl = interface; // type: Aspose.Cells.Drawing.ActiveXControls.SpinButtonActiveXControl, namespace: Aspose.Cells.Drawing.ActiveXControls
  DNScrollBarActiveXControl = interface; // type: Aspose.Cells.Drawing.ActiveXControls.ScrollBarActiveXControl, namespace: Aspose.Cells.Drawing.ActiveXControls
  DNTextBoxActiveXControl = interface; // type: Aspose.Cells.Drawing.ActiveXControls.TextBoxActiveXControl, namespace: Aspose.Cells.Drawing.ActiveXControls
  DNToggleButtonActiveXControl = interface; // type: Aspose.Cells.Drawing.ActiveXControls.ToggleButtonActiveXControl, namespace: Aspose.Cells.Drawing.ActiveXControls
  DNRadioButtonActiveXControl = interface; // type: Aspose.Cells.Drawing.ActiveXControls.RadioButtonActiveXControl, namespace: Aspose.Cells.Drawing.ActiveXControls
  DNUnknownControl = interface; // type: Aspose.Cells.Drawing.ActiveXControls.UnknownControl, namespace: Aspose.Cells.Drawing.ActiveXControls
  DNArea = interface; // type: Aspose.Cells.Drawing.Area, namespace: Aspose.Cells.Drawing
  DNFloor = interface; // type: Aspose.Cells.Charts.Floor, namespace: Aspose.Cells.Charts
  DNWalls = interface; // type: Aspose.Cells.Charts.Walls, namespace: Aspose.Cells.Charts
  DNBevel = interface; // type: Aspose.Cells.Drawing.Bevel, namespace: Aspose.Cells.Drawing
  DNColorHelper = interface; // type: Aspose.Cells.Drawing.ColorHelper, namespace: Aspose.Cells.Drawing
  DNFill = interface; // type: Aspose.Cells.Drawing.Fill, namespace: Aspose.Cells.Drawing
  DNAutomaticFill = interface; // type: Aspose.Cells.Drawing.AutomaticFill, namespace: Aspose.Cells.Drawing
  DNGradientFill = interface; // type: Aspose.Cells.Drawing.GradientFill, namespace: Aspose.Cells.Drawing
  DNGroupFill = interface; // type: Aspose.Cells.Drawing.GroupFill, namespace: Aspose.Cells.Drawing
  DNNoneFill = interface; // type: Aspose.Cells.Drawing.NoneFill, namespace: Aspose.Cells.Drawing
  DNPatternFill = interface; // type: Aspose.Cells.Drawing.PatternFill, namespace: Aspose.Cells.Drawing
  DNSolidFill = interface; // type: Aspose.Cells.Drawing.SolidFill, namespace: Aspose.Cells.Drawing
  DNTextureFill = interface; // type: Aspose.Cells.Drawing.TextureFill, namespace: Aspose.Cells.Drawing
  DNFillFormat = interface; // type: Aspose.Cells.Drawing.FillFormat, namespace: Aspose.Cells.Drawing
  DNLineFormat = interface; // type: Aspose.Cells.Drawing.LineFormat, namespace: Aspose.Cells.Drawing
  DNFormat3D = interface; // type: Aspose.Cells.Drawing.Format3D, namespace: Aspose.Cells.Drawing
  DNGeometry = interface; // type: Aspose.Cells.Drawing.Geometry, namespace: Aspose.Cells.Drawing
  DNCustomGeometry = interface; // type: Aspose.Cells.Drawing.CustomGeometry, namespace: Aspose.Cells.Drawing
  DNGlowEffect = interface; // type: Aspose.Cells.Drawing.GlowEffect, namespace: Aspose.Cells.Drawing
  DNGradientStop = interface; // type: Aspose.Cells.Drawing.GradientStop, namespace: Aspose.Cells.Drawing
  DNLine = interface; // type: Aspose.Cells.Drawing.Line, namespace: Aspose.Cells.Drawing
  DNErrorBar = interface; // type: Aspose.Cells.Charts.ErrorBar, namespace: Aspose.Cells.Charts
  DNTrendline = interface; // type: Aspose.Cells.Charts.Trendline, namespace: Aspose.Cells.Charts
  DNMsoFillFormat = interface; // type: Aspose.Cells.Drawing.MsoFillFormat, namespace: Aspose.Cells.Drawing
  DNMsoFillFormatHelper = interface; // type: Aspose.Cells.Drawing.MsoFillFormatHelper, namespace: Aspose.Cells.Drawing
  DNMsoFormatPicture = interface; // type: Aspose.Cells.Drawing.MsoFormatPicture, namespace: Aspose.Cells.Drawing
  DNMsoLineFormat = interface; // type: Aspose.Cells.Drawing.MsoLineFormat, namespace: Aspose.Cells.Drawing
  DNMsoLineFormatHelper = interface; // type: Aspose.Cells.Drawing.MsoLineFormatHelper, namespace: Aspose.Cells.Drawing
  DNMsoTextFrame = interface; // type: Aspose.Cells.Drawing.MsoTextFrame, namespace: Aspose.Cells.Drawing
  DNPicFormatOption = interface; // type: Aspose.Cells.Drawing.PicFormatOption, namespace: Aspose.Cells.Drawing
  DNReflectionEffect = interface; // type: Aspose.Cells.Drawing.ReflectionEffect, namespace: Aspose.Cells.Drawing
  DNShadowEffect = interface; // type: Aspose.Cells.Drawing.ShadowEffect, namespace: Aspose.Cells.Drawing
  DNShape = interface; // type: Aspose.Cells.Drawing.Shape, namespace: Aspose.Cells.Drawing
  DNArcShape = interface; // type: Aspose.Cells.Drawing.ArcShape, namespace: Aspose.Cells.Drawing
  DNButton = interface; // type: Aspose.Cells.Drawing.Button, namespace: Aspose.Cells.Drawing
  DNCellsDrawing = interface; // type: Aspose.Cells.Drawing.CellsDrawing, namespace: Aspose.Cells.Drawing
  DNChartShape = interface; // type: Aspose.Cells.Drawing.ChartShape, namespace: Aspose.Cells.Drawing
  DNCheckBox = interface; // type: Aspose.Cells.Drawing.CheckBox, namespace: Aspose.Cells.Drawing
  DNComboBox = interface; // type: Aspose.Cells.Drawing.ComboBox, namespace: Aspose.Cells.Drawing
  DNCommentShape = interface; // type: Aspose.Cells.Drawing.CommentShape, namespace: Aspose.Cells.Drawing
  DNCustomXmlShape = interface; // type: Aspose.Cells.Drawing.CustomXmlShape, namespace: Aspose.Cells.Drawing
  DNDialogBox = interface; // type: Aspose.Cells.Drawing.DialogBox, namespace: Aspose.Cells.Drawing
  DNGroupBox = interface; // type: Aspose.Cells.Drawing.GroupBox, namespace: Aspose.Cells.Drawing
  DNGroupShape = interface; // type: Aspose.Cells.Drawing.GroupShape, namespace: Aspose.Cells.Drawing
  DNLabel = interface; // type: Aspose.Cells.Drawing.Label, namespace: Aspose.Cells.Drawing
  DNLineShape = interface; // type: Aspose.Cells.Drawing.LineShape, namespace: Aspose.Cells.Drawing
  DNListBox = interface; // type: Aspose.Cells.Drawing.ListBox, namespace: Aspose.Cells.Drawing
  DNOleObject = interface; // type: Aspose.Cells.Drawing.OleObject, namespace: Aspose.Cells.Drawing
  DNOval = interface; // type: Aspose.Cells.Drawing.Oval, namespace: Aspose.Cells.Drawing
  DNPicture = interface; // type: Aspose.Cells.Drawing.Picture, namespace: Aspose.Cells.Drawing
  DNRadioButton = interface; // type: Aspose.Cells.Drawing.RadioButton, namespace: Aspose.Cells.Drawing
  DNRectangleShape = interface; // type: Aspose.Cells.Drawing.RectangleShape, namespace: Aspose.Cells.Drawing
  DNScrollBar = interface; // type: Aspose.Cells.Drawing.ScrollBar, namespace: Aspose.Cells.Drawing
  DNSmartArtShape = interface; // type: Aspose.Cells.Drawing.SmartArtShape, namespace: Aspose.Cells.Drawing
  DNSpinner = interface; // type: Aspose.Cells.Drawing.Spinner, namespace: Aspose.Cells.Drawing
  DNTextBox = interface; // type: Aspose.Cells.Drawing.TextBox, namespace: Aspose.Cells.Drawing
  DNWebExtensionShape = interface; // type: Aspose.Cells.Drawing.WebExtensionShape, namespace: Aspose.Cells.Drawing
  DNShapeFormat = interface; // type: Aspose.Cells.Drawing.ShapeFormat, namespace: Aspose.Cells.Drawing
  DNShapeGuide = interface; // type: Aspose.Cells.Drawing.ShapeGuide, namespace: Aspose.Cells.Drawing
  DNShapePath = interface; // type: Aspose.Cells.Drawing.ShapePath, namespace: Aspose.Cells.Drawing
  DNShapePathPoint = interface; // type: Aspose.Cells.Drawing.ShapePathPoint, namespace: Aspose.Cells.Drawing
  DNShapePropertyCollection = interface; // type: Aspose.Cells.Drawing.ShapePropertyCollection, namespace: Aspose.Cells.Drawing
  DNShapeSegmentPath = interface; // type: Aspose.Cells.Drawing.ShapeSegmentPath, namespace: Aspose.Cells.Drawing
  DNSignatureLine = interface; // type: Aspose.Cells.Drawing.SignatureLine, namespace: Aspose.Cells.Drawing
  DNTextEffectFormat = interface; // type: Aspose.Cells.Drawing.TextEffectFormat, namespace: Aspose.Cells.Drawing
  DNBullet = interface; // type: Aspose.Cells.Drawing.Texts.Bullet, namespace: Aspose.Cells.Drawing.Texts
  DNBulletValue = interface; // type: Aspose.Cells.Drawing.Texts.BulletValue, namespace: Aspose.Cells.Drawing.Texts
  DNAutoNumberedBulletValue = interface; // type: Aspose.Cells.Drawing.Texts.AutoNumberedBulletValue, namespace: Aspose.Cells.Drawing.Texts
  DNCharacterBulletValue = interface; // type: Aspose.Cells.Drawing.Texts.CharacterBulletValue, namespace: Aspose.Cells.Drawing.Texts
  DNNoneBulletValue = interface; // type: Aspose.Cells.Drawing.Texts.NoneBulletValue, namespace: Aspose.Cells.Drawing.Texts
  DNPictureBulletValue = interface; // type: Aspose.Cells.Drawing.Texts.PictureBulletValue, namespace: Aspose.Cells.Drawing.Texts
  DNShapeTextAlignment = interface; // type: Aspose.Cells.Drawing.Texts.ShapeTextAlignment, namespace: Aspose.Cells.Drawing.Texts
  DNTextParagraphCollection = interface; // type: Aspose.Cells.Drawing.Texts.TextParagraphCollection, namespace: Aspose.Cells.Drawing.Texts
  DNTextTabStop = interface; // type: Aspose.Cells.Drawing.Texts.TextTabStop, namespace: Aspose.Cells.Drawing.Texts
  DNThreeDFormat = interface; // type: Aspose.Cells.Drawing.ThreeDFormat, namespace: Aspose.Cells.Drawing
  DNTilePicOption = interface; // type: Aspose.Cells.Drawing.TilePicOption, namespace: Aspose.Cells.Drawing
  DNDynamicFilter = interface; // type: Aspose.Cells.DynamicFilter, namespace: Aspose.Cells
  DNErrorCheckOption = interface; // type: Aspose.Cells.ErrorCheckOption, namespace: Aspose.Cells
  DNExportObjectEvent = interface; // type: Aspose.Cells.ExportObjectEvent, namespace: Aspose.Cells
  DNExportTableOptions = interface; // type: Aspose.Cells.ExportTableOptions, namespace: Aspose.Cells
  DNConnectionParameter = interface; // type: Aspose.Cells.ExternalConnections.ConnectionParameter, namespace: Aspose.Cells.ExternalConnections
  DNExternalConnection = interface; // type: Aspose.Cells.ExternalConnections.ExternalConnection, namespace: Aspose.Cells.ExternalConnections
  DNDBConnection = interface; // type: Aspose.Cells.ExternalConnections.DBConnection, namespace: Aspose.Cells.ExternalConnections
  DNWebQueryConnection = interface; // type: Aspose.Cells.ExternalConnections.WebQueryConnection, namespace: Aspose.Cells.ExternalConnections
  DNExternalLink = interface; // type: Aspose.Cells.ExternalLink, namespace: Aspose.Cells
  DNExternalLinkCollection = interface; // type: Aspose.Cells.ExternalLinkCollection, namespace: Aspose.Cells
  DNFileFormatInfo = interface; // type: Aspose.Cells.FileFormatInfo, namespace: Aspose.Cells
  DNFileFormatUtil = interface; // type: Aspose.Cells.FileFormatUtil, namespace: Aspose.Cells
  DNFilterColumn = interface; // type: Aspose.Cells.FilterColumn, namespace: Aspose.Cells
  DNFindOptions = interface; // type: Aspose.Cells.FindOptions, namespace: Aspose.Cells
  DNFont = interface; // type: Aspose.Cells.Font, namespace: Aspose.Cells
  DNTextOptions = interface; // type: Aspose.Cells.Drawing.Texts.TextOptions, namespace: Aspose.Cells.Drawing.Texts
  DNFontConfigs = interface; // type: Aspose.Cells.FontConfigs, namespace: Aspose.Cells
  DNFontSetting = interface; // type: Aspose.Cells.FontSetting, namespace: Aspose.Cells
  DNTextParagraph = interface; // type: Aspose.Cells.Drawing.Texts.TextParagraph, namespace: Aspose.Cells.Drawing.Texts
  DNFontSourceBase = interface; // type: Aspose.Cells.FontSourceBase, namespace: Aspose.Cells
  DNFileFontSource = interface; // type: Aspose.Cells.FileFontSource, namespace: Aspose.Cells
  DNFolderFontSource = interface; // type: Aspose.Cells.FolderFontSource, namespace: Aspose.Cells
  DNMemoryFontSource = interface; // type: Aspose.Cells.MemoryFontSource, namespace: Aspose.Cells
  DNFormatCondition = interface; // type: Aspose.Cells.FormatCondition, namespace: Aspose.Cells
  DNFormatConditionCollection = interface; // type: Aspose.Cells.FormatConditionCollection, namespace: Aspose.Cells
  DNFormulaParseOptions = interface; // type: Aspose.Cells.FormulaParseOptions, namespace: Aspose.Cells
  DNGlobalizationSettings = interface; // type: Aspose.Cells.GlobalizationSettings, namespace: Aspose.Cells
  DNHeaderFooterCommand = interface; // type: Aspose.Cells.HeaderFooterCommand, namespace: Aspose.Cells
  DNHorizontalPageBreak = interface; // type: Aspose.Cells.HorizontalPageBreak, namespace: Aspose.Cells
  DNHyperlink = interface; // type: Aspose.Cells.Hyperlink, namespace: Aspose.Cells
  DNIconFilter = interface; // type: Aspose.Cells.IconFilter, namespace: Aspose.Cells
  DNIconSet = interface; // type: Aspose.Cells.IconSet, namespace: Aspose.Cells
  DNImportTableOptions = interface; // type: Aspose.Cells.ImportTableOptions, namespace: Aspose.Cells
  DNIndividualFontConfigs = interface; // type: Aspose.Cells.IndividualFontConfigs, namespace: Aspose.Cells
  DNInsertOptions = interface; // type: Aspose.Cells.InsertOptions, namespace: Aspose.Cells
  DNInterruptMonitor = interface; // type: Aspose.Cells.InterruptMonitor, namespace: Aspose.Cells
  DNLicense = interface; // type: Aspose.Cells.License, namespace: Aspose.Cells
  DNLoadFilter = interface; // type: Aspose.Cells.LoadFilter, namespace: Aspose.Cells
  DNLoadOptions = interface; // type: Aspose.Cells.LoadOptions, namespace: Aspose.Cells
  DNAbstractTextLoadOptions = interface; // type: Aspose.Cells.AbstractTextLoadOptions, namespace: Aspose.Cells
  DNHtmlLoadOptions = interface; // type: Aspose.Cells.HtmlLoadOptions, namespace: Aspose.Cells
  DNTxtLoadOptions = interface; // type: Aspose.Cells.TxtLoadOptions, namespace: Aspose.Cells
  DNOdsLoadOptions = interface; // type: Aspose.Cells.OdsLoadOptions, namespace: Aspose.Cells
  DNCustomXmlPart = interface; // type: Aspose.Cells.Markup.CustomXmlPart, namespace: Aspose.Cells.Markup
  DNSmartTag = interface; // type: Aspose.Cells.Markup.SmartTag, namespace: Aspose.Cells.Markup
  DNSmartTagOptions = interface; // type: Aspose.Cells.Markup.SmartTagOptions, namespace: Aspose.Cells.Markup
  DNSmartTagProperty = interface; // type: Aspose.Cells.Markup.SmartTagProperty, namespace: Aspose.Cells.Markup
  DNMetadataOptions = interface; // type: Aspose.Cells.Metadata.MetadataOptions, namespace: Aspose.Cells.Metadata
  DNWorkbookMetadata = interface; // type: Aspose.Cells.Metadata.WorkbookMetadata, namespace: Aspose.Cells.Metadata
  DNMetered = interface; // type: Aspose.Cells.Metered, namespace: Aspose.Cells
  DNName = interface; // type: Aspose.Cells.Name, namespace: Aspose.Cells
  DNNegativeBarFormat = interface; // type: Aspose.Cells.NegativeBarFormat, namespace: Aspose.Cells
  DNOdsCellField = interface; // type: Aspose.Cells.Ods.OdsCellField, namespace: Aspose.Cells.Ods
  DNOdsPageBackground = interface; // type: Aspose.Cells.Ods.OdsPageBackground, namespace: Aspose.Cells.Ods
  DNOutline = interface; // type: Aspose.Cells.Outline, namespace: Aspose.Cells
  DNPageSetup = interface; // type: Aspose.Cells.PageSetup, namespace: Aspose.Cells
  DNPaneCollection = interface; // type: Aspose.Cells.PaneCollection, namespace: Aspose.Cells
  DNPasteOptions = interface; // type: Aspose.Cells.PasteOptions, namespace: Aspose.Cells
  DNPivotField = interface; // type: Aspose.Cells.Pivot.PivotField, namespace: Aspose.Cells.Pivot
  DNPivotFieldCollection = interface; // type: Aspose.Cells.Pivot.PivotFieldCollection, namespace: Aspose.Cells.Pivot
  DNPivotFilter = interface; // type: Aspose.Cells.Pivot.PivotFilter, namespace: Aspose.Cells.Pivot
  DNPivotFormatCondition = interface; // type: Aspose.Cells.Pivot.PivotFormatCondition, namespace: Aspose.Cells.Pivot
  DNPivotItem = interface; // type: Aspose.Cells.Pivot.PivotItem, namespace: Aspose.Cells.Pivot
  DNPivotItemCollection = interface; // type: Aspose.Cells.Pivot.PivotItemCollection, namespace: Aspose.Cells.Pivot
  DNPivotPageFields = interface; // type: Aspose.Cells.Pivot.PivotPageFields, namespace: Aspose.Cells.Pivot
  DNPivotTable = interface; // type: Aspose.Cells.Pivot.PivotTable, namespace: Aspose.Cells.Pivot
  DNSxRng = interface; // type: Aspose.Cells.Pivot.SxRng, namespace: Aspose.Cells.Pivot
  DNContentTypeProperty = interface; // type: Aspose.Cells.Properties.ContentTypeProperty, namespace: Aspose.Cells.Properties
  DNCustomProperty = interface; // type: Aspose.Cells.Properties.CustomProperty, namespace: Aspose.Cells.Properties
  DNDocumentProperty = interface; // type: Aspose.Cells.Properties.DocumentProperty, namespace: Aspose.Cells.Properties
  DNDocumentPropertyCollection = interface; // type: Aspose.Cells.Properties.DocumentPropertyCollection, namespace: Aspose.Cells.Properties
  DNBuiltInDocumentPropertyCollection = interface; // type: Aspose.Cells.Properties.BuiltInDocumentPropertyCollection, namespace: Aspose.Cells.Properties
  DNCustomDocumentPropertyCollection = interface; // type: Aspose.Cells.Properties.CustomDocumentPropertyCollection, namespace: Aspose.Cells.Properties
  DNProtectedRange = interface; // type: Aspose.Cells.ProtectedRange, namespace: Aspose.Cells
  DNProtection = interface; // type: Aspose.Cells.Protection, namespace: Aspose.Cells
  DNQueryTable = interface; // type: Aspose.Cells.QueryTable, namespace: Aspose.Cells
  DNDataMashup = interface; // type: Aspose.Cells.QueryTables.DataMashup, namespace: Aspose.Cells.QueryTables
  DNPowerQueryFormula = interface; // type: Aspose.Cells.QueryTables.PowerQueryFormula, namespace: Aspose.Cells.QueryTables
  DNPowerQueryFormulaFunction = interface; // type: Aspose.Cells.QueryTables.PowerQueryFormulaFunction, namespace: Aspose.Cells.QueryTables
  DNPowerQueryFormulaItem = interface; // type: Aspose.Cells.QueryTables.PowerQueryFormulaItem, namespace: Aspose.Cells.QueryTables
  DNPowerQueryFormulaParameter = interface; // type: Aspose.Cells.QueryTables.PowerQueryFormulaParameter, namespace: Aspose.Cells.QueryTables
  DNRange = interface; // type: Aspose.Cells.Range, namespace: Aspose.Cells
  DNReferredArea = interface; // type: Aspose.Cells.ReferredArea, namespace: Aspose.Cells
  DNDrawObject = interface; // type: Aspose.Cells.Rendering.DrawObject, namespace: Aspose.Cells.Rendering
  DNDrawObjectEventHandler = interface; // type: Aspose.Cells.Rendering.DrawObjectEventHandler, namespace: Aspose.Cells.Rendering
  DNImageOrPrintOptions = interface; // type: Aspose.Cells.Rendering.ImageOrPrintOptions, namespace: Aspose.Cells.Rendering
  DNPageSavingArgs = interface; // type: Aspose.Cells.Rendering.PageSavingArgs, namespace: Aspose.Cells.Rendering
  DNPageEndSavingArgs = interface; // type: Aspose.Cells.Rendering.PageEndSavingArgs, namespace: Aspose.Cells.Rendering
  DNPageStartSavingArgs = interface; // type: Aspose.Cells.Rendering.PageStartSavingArgs, namespace: Aspose.Cells.Rendering
  DNPdfBookmarkEntry = interface; // type: Aspose.Cells.Rendering.PdfBookmarkEntry, namespace: Aspose.Cells.Rendering
  DNPdfSecurityOptions = interface; // type: Aspose.Cells.Rendering.PdfSecurity.PdfSecurityOptions, namespace: Aspose.Cells.Rendering.PdfSecurity
  DNSheetPrintingPreview = interface; // type: Aspose.Cells.Rendering.SheetPrintingPreview, namespace: Aspose.Cells.Rendering
  DNSheetRender = interface; // type: Aspose.Cells.Rendering.SheetRender, namespace: Aspose.Cells.Rendering
  DNWorkbookPrintingPreview = interface; // type: Aspose.Cells.Rendering.WorkbookPrintingPreview, namespace: Aspose.Cells.Rendering
  DNWorkbookRender = interface; // type: Aspose.Cells.Rendering.WorkbookRender, namespace: Aspose.Cells.Rendering
  DNReplaceOptions = interface; // type: Aspose.Cells.ReplaceOptions, namespace: Aspose.Cells
  DNRevision = interface; // type: Aspose.Cells.Revisions.Revision, namespace: Aspose.Cells.Revisions
  DNRevisionAutoFormat = interface; // type: Aspose.Cells.Revisions.RevisionAutoFormat, namespace: Aspose.Cells.Revisions
  DNRevisionCellChange = interface; // type: Aspose.Cells.Revisions.RevisionCellChange, namespace: Aspose.Cells.Revisions
  DNRevisionCellComment = interface; // type: Aspose.Cells.Revisions.RevisionCellComment, namespace: Aspose.Cells.Revisions
  DNRevisionCellMove = interface; // type: Aspose.Cells.Revisions.RevisionCellMove, namespace: Aspose.Cells.Revisions
  DNRevisionCustomView = interface; // type: Aspose.Cells.Revisions.RevisionCustomView, namespace: Aspose.Cells.Revisions
  DNRevisionDefinedName = interface; // type: Aspose.Cells.Revisions.RevisionDefinedName, namespace: Aspose.Cells.Revisions
  DNRevisionFormat = interface; // type: Aspose.Cells.Revisions.RevisionFormat, namespace: Aspose.Cells.Revisions
  DNRevisionInsertDelete = interface; // type: Aspose.Cells.Revisions.RevisionInsertDelete, namespace: Aspose.Cells.Revisions
  DNRevisionInsertSheet = interface; // type: Aspose.Cells.Revisions.RevisionInsertSheet, namespace: Aspose.Cells.Revisions
  DNRevisionMergeConflict = interface; // type: Aspose.Cells.Revisions.RevisionMergeConflict, namespace: Aspose.Cells.Revisions
  DNRevisionQueryTable = interface; // type: Aspose.Cells.Revisions.RevisionQueryTable, namespace: Aspose.Cells.Revisions
  DNRevisionRenameSheet = interface; // type: Aspose.Cells.Revisions.RevisionRenameSheet, namespace: Aspose.Cells.Revisions
  DNRevisionLog = interface; // type: Aspose.Cells.Revisions.RevisionLog, namespace: Aspose.Cells.Revisions
  DNRow = interface; // type: Aspose.Cells.Row, namespace: Aspose.Cells
  DNRowCollection = interface; // type: Aspose.Cells.RowCollection, namespace: Aspose.Cells
  DNSaveOptions = interface; // type: Aspose.Cells.SaveOptions, namespace: Aspose.Cells
  DNDifSaveOptions = interface; // type: Aspose.Cells.DifSaveOptions, namespace: Aspose.Cells
  DNDocxSaveOptions = interface; // type: Aspose.Cells.DocxSaveOptions, namespace: Aspose.Cells
  DNHtmlSaveOptions = interface; // type: Aspose.Cells.HtmlSaveOptions, namespace: Aspose.Cells
  DNImageSaveOptions = interface; // type: Aspose.Cells.ImageSaveOptions, namespace: Aspose.Cells
  DNSvgSaveOptions = interface; // type: Aspose.Cells.SvgSaveOptions, namespace: Aspose.Cells
  DNMarkdownSaveOptions = interface; // type: Aspose.Cells.MarkdownSaveOptions, namespace: Aspose.Cells
  DNOdsSaveOptions = interface; // type: Aspose.Cells.OdsSaveOptions, namespace: Aspose.Cells
  DNOoxmlSaveOptions = interface; // type: Aspose.Cells.OoxmlSaveOptions, namespace: Aspose.Cells
  DNPdfSaveOptions = interface; // type: Aspose.Cells.PdfSaveOptions, namespace: Aspose.Cells
  DNPptxSaveOptions = interface; // type: Aspose.Cells.PptxSaveOptions, namespace: Aspose.Cells
  DNSpreadsheetML2003SaveOptions = interface; // type: Aspose.Cells.SpreadsheetML2003SaveOptions, namespace: Aspose.Cells
  DNTxtSaveOptions = interface; // type: Aspose.Cells.TxtSaveOptions, namespace: Aspose.Cells
  DNXlsbSaveOptions = interface; // type: Aspose.Cells.XlsbSaveOptions, namespace: Aspose.Cells
  DNXlsSaveOptions = interface; // type: Aspose.Cells.XlsSaveOptions, namespace: Aspose.Cells
  DNXpsSaveOptions = interface; // type: Aspose.Cells.XpsSaveOptions, namespace: Aspose.Cells
  DNScenario = interface; // type: Aspose.Cells.Scenario, namespace: Aspose.Cells
  DNScenarioInputCell = interface; // type: Aspose.Cells.ScenarioInputCell, namespace: Aspose.Cells
  DNSlicer = interface; // type: Aspose.Cells.Slicers.Slicer, namespace: Aspose.Cells.Slicers
  DNSlicerCache = interface; // type: Aspose.Cells.Slicers.SlicerCache, namespace: Aspose.Cells.Slicers
  DNSlicerCacheItem = interface; // type: Aspose.Cells.Slicers.SlicerCacheItem, namespace: Aspose.Cells.Slicers
  DNStreamProviderOptions = interface; // type: Aspose.Cells.StreamProviderOptions, namespace: Aspose.Cells
  DNStyle = interface; // type: Aspose.Cells.Style, namespace: Aspose.Cells
  DNStyleCollection = interface; // type: Aspose.Cells.StyleCollection, namespace: Aspose.Cells
  DNStyleFlag = interface; // type: Aspose.Cells.StyleFlag, namespace: Aspose.Cells
  DNSubtotalSetting = interface; // type: Aspose.Cells.SubtotalSetting, namespace: Aspose.Cells
  DNListColumn = interface; // type: Aspose.Cells.Tables.ListColumn, namespace: Aspose.Cells.Tables
  DNListObject = interface; // type: Aspose.Cells.Tables.ListObject, namespace: Aspose.Cells.Tables
  DNTableStyle = interface; // type: Aspose.Cells.Tables.TableStyle, namespace: Aspose.Cells.Tables
  DNTableStyleElement = interface; // type: Aspose.Cells.Tables.TableStyleElement, namespace: Aspose.Cells.Tables
  DNTableToRangeOptions = interface; // type: Aspose.Cells.Tables.TableToRangeOptions, namespace: Aspose.Cells.Tables
  DNThemeColor = interface; // type: Aspose.Cells.ThemeColor, namespace: Aspose.Cells
  DNThreadedComment = interface; // type: Aspose.Cells.ThreadedComment, namespace: Aspose.Cells
  DNThreadedCommentAuthor = interface; // type: Aspose.Cells.ThreadedCommentAuthor, namespace: Aspose.Cells
  DNTop10 = interface; // type: Aspose.Cells.Top10, namespace: Aspose.Cells
  DNTop10Filter = interface; // type: Aspose.Cells.Top10Filter, namespace: Aspose.Cells
  DNUnionRange = interface; // type: Aspose.Cells.UnionRange, namespace: Aspose.Cells
  DNExportRangeToJsonOptions = interface; // type: Aspose.Cells.Utility.ExportRangeToJsonOptions, namespace: Aspose.Cells.Utility
  DNJsonLayoutOptions = interface; // type: Aspose.Cells.Utility.JsonLayoutOptions, namespace: Aspose.Cells.Utility
  DNJsonUtility = interface; // type: Aspose.Cells.Utility.JsonUtility, namespace: Aspose.Cells.Utility
  DNValidation = interface; // type: Aspose.Cells.Validation, namespace: Aspose.Cells
  DNVbaModule = interface; // type: Aspose.Cells.Vba.VbaModule, namespace: Aspose.Cells.Vba
  DNVbaProject = interface; // type: Aspose.Cells.Vba.VbaProject, namespace: Aspose.Cells.Vba
  DNVbaProjectReference = interface; // type: Aspose.Cells.Vba.VbaProjectReference, namespace: Aspose.Cells.Vba
  DNVerticalPageBreak = interface; // type: Aspose.Cells.VerticalPageBreak, namespace: Aspose.Cells
  DNWarningInfo = interface; // type: Aspose.Cells.WarningInfo, namespace: Aspose.Cells
  DNWebExtension = interface; // type: Aspose.Cells.WebExtensions.WebExtension, namespace: Aspose.Cells.WebExtensions
  DNWebExtensionBinding = interface; // type: Aspose.Cells.WebExtensions.WebExtensionBinding, namespace: Aspose.Cells.WebExtensions
  DNWebExtensionProperty = interface; // type: Aspose.Cells.WebExtensions.WebExtensionProperty, namespace: Aspose.Cells.WebExtensions
  DNWebExtensionReference = interface; // type: Aspose.Cells.WebExtensions.WebExtensionReference, namespace: Aspose.Cells.WebExtensions
  DNWebExtensionTaskPane = interface; // type: Aspose.Cells.WebExtensions.WebExtensionTaskPane, namespace: Aspose.Cells.WebExtensions
  DNWorkbook = interface; // type: Aspose.Cells.Workbook, namespace: Aspose.Cells
  DNWorkbookDesigner = interface; // type: Aspose.Cells.WorkbookDesigner, namespace: Aspose.Cells
  DNWorkbookSettings = interface; // type: Aspose.Cells.WorkbookSettings, namespace: Aspose.Cells
  DNWorksheet = interface; // type: Aspose.Cells.Worksheet, namespace: Aspose.Cells
  DNWriteProtection = interface; // type: Aspose.Cells.WriteProtection, namespace: Aspose.Cells
  DNXmlColumnProperty = interface; // type: Aspose.Cells.XmlColumnProperty, namespace: Aspose.Cells
  DNXmlDataBinding = interface; // type: Aspose.Cells.XmlDataBinding, namespace: Aspose.Cells
  DNXmlMap = interface; // type: Aspose.Cells.XmlMap, namespace: Aspose.Cells
  DNSmartTagSetting = interface; // type: Aspose.Cells.Markup.SmartTagSetting, namespace: Aspose.Cells.Markup
  DNMultipleFilterCollection = interface; // type: Aspose.Cells.MultipleFilterCollection, namespace: Aspose.Cells
  DNCellsException = interface; // type: Aspose.Cells.CellsException, namespace: Aspose.Cells
  DNCellArea = interface; // type: Aspose.Cells.CellArea, namespace: Aspose.Cells


{ objects }

  //-------------namespace: Aspose.Cells----------------
  [DNTypeName('Aspose.Cells.ICellsDataTable')]
  DNICellsDataTable = interface(DDN.mscorlib.DNObject)
  ['{9D828D3E-9414-3329-A2CC-9616A0735080}']
  { getters & setters } 

    function get_Columns: TArray<string>;
    function get_Count: Int32;
    function get_Item(columnIndex: Int32): DDN.mscorlib.DNObject; overload;
    function get_Item(columnName: string): DDN.mscorlib.DNObject; overload;

  { methods } 

    procedure BeforeFirst;
    function Next: Boolean;

  { propertys } 

    property Columns: TArray<string> read get_Columns;
    property Count: Int32 read get_Count;
    property Item[columnIndex: Int32]: DDN.mscorlib.DNObject read get_Item; default;
    property Item[columnName: string]: DDN.mscorlib.DNObject read get_Item; default;
  end;

  //-------------namespace: Aspose.Cells----------------
  [DNTypeName('Aspose.Cells.ICustomFunction')]
  DNICustomFunction = interface(DDN.mscorlib.DNObject)
  ['{46BFF052-3D0F-35A7-AC02-DB4669497BD9}']
  { methods } 

    function CalculateCustomFunction(functionName: string; paramsList: DDN.mscorlib.DNArrayList; contextObjects: DDN.mscorlib.DNArrayList): DDN.mscorlib.DNObject;

  end;

  //-------------namespace: Aspose.Cells----------------
  [DNTypeName('Aspose.Cells.ICustomParser')]
  DNICustomParser = interface(DDN.mscorlib.DNObject)
  ['{4A55C564-704E-35DE-BD6E-E7629A0A80FD}']
  { methods } 

    function ParseObject(value: string): DDN.mscorlib.DNObject;
    function GetFormat: string;

  end;

  //-------------namespace: Aspose.Cells----------------
  [DNTypeName('Aspose.Cells.IExportObjectListener')]
  DNIExportObjectListener = interface(DDN.mscorlib.DNObject)
  ['{971994BF-4126-3637-8120-B417D2B45CA9}']
  { methods } 

    function ExportObject(e: DNExportObjectEvent): DDN.mscorlib.DNObject;

  end;

  //-------------namespace: Aspose.Cells----------------
  [DNTypeName('Aspose.Cells.IFilePathProvider')]
  DNIFilePathProvider = interface(DDN.mscorlib.DNObject)
  ['{6B165796-0113-36E5-B9E9-915618589062}']
  { methods } 

    function GetFullName(sheetName: string): string;

  end;

  //-------------namespace: Aspose.Cells----------------
  [DNTypeName('Aspose.Cells.ISmartMarkerCallBack')]
  DNISmartMarkerCallBack = interface(DDN.mscorlib.DNObject)
  ['{AE1756CB-F104-3D9B-83C9-20C3F8B31122}']
  { methods } 

    procedure Process(sheetIndex: Int32; rowIndex: Int32; colIndex: Int32; tableName: string; columnName: string);

  end;

  //-------------namespace: Aspose.Cells----------------
  [DNTypeName('Aspose.Cells.IStreamProvider')]
  DNIStreamProvider = interface(DDN.mscorlib.DNObject)
  ['{04008A5A-1FF8-3E26-9645-8B88669AE372}']
  { methods } 

    procedure InitStream(options: DNStreamProviderOptions);
    procedure CloseStream(options: DNStreamProviderOptions);

  end;

  //-------------namespace: Aspose.Cells----------------
  [DNTypeName('Aspose.Cells.IWarningCallback')]
  DNIWarningCallback = interface(DDN.mscorlib.DNObject)
  ['{C3A26AF5-FCE8-3100-961E-4907E7C11E14}']
  { methods } 

    procedure Warning(warningInfo: DNWarningInfo);

  end;

  //-------------namespace: Aspose.Cells----------------
  [DNTypeName('Aspose.Cells.LightCellsDataHandler')]
  DNLightCellsDataHandler = interface(DDN.mscorlib.DNObject)
  ['{BDBC6223-AE14-33B8-BB42-42FB443A26A1}']
  { methods } 

    function StartSheet(sheet: DNWorksheet): Boolean;
    function StartRow(rowIndex: Int32): Boolean;
    function ProcessRow(row: DNRow): Boolean;
    function StartCell(columnIndex: Int32): Boolean;
    function ProcessCell(cell: DNCell): Boolean;

  end;

  //-------------namespace: Aspose.Cells----------------
  [DNTypeName('Aspose.Cells.LightCellsDataProvider')]
  DNLightCellsDataProvider = interface(DDN.mscorlib.DNObject)
  ['{C2E815BD-9D2E-30E7-8FD8-E7440184CF57}']
  { methods } 

    function StartSheet(sheetIndex: Int32): Boolean;
    function NextRow: Int32;
    procedure StartRow(row: DNRow);
    function NextCell: Int32;
    procedure StartCell(cell: DNCell);
    function IsGatherString: Boolean;

  end;

  //-------------namespace: Aspose.Cells.Rendering----------------
  [DNTypeName('Aspose.Cells.Rendering.IPageSavingCallback')]
  DNIPageSavingCallback = interface(DDN.mscorlib.DNObject)
  ['{8FD528EC-770F-3C30-BDEE-1947090E3085}']
  { methods } 

    procedure PageStartSaving(args: DNPageStartSavingArgs);
    procedure PageEndSaving(args: DNPageEndSavingArgs);

  end;

  //-------------namespace: Aspose.Cells----------------
  DNAboveAverageClass = interface(DDN.mscorlib.DNObjectClass)
  ['{65348485-A503-5F62-8DA2-B691473052DF}']
  { constructors } 

    {class} function init: DNAboveAverage;

  end;

  [DNTypeName('Aspose.Cells.AboveAverage')]
  DNAboveAverage = interface(DDN.mscorlib.DNObject)
  ['{0983160A-2486-3119-9261-6418AF1C8F87}']
  { getters & setters } 

    function get_IsAboveAverage: Boolean;
    procedure set_IsAboveAverage(value: Boolean);
    function get_IsEqualAverage: Boolean;
    procedure set_IsEqualAverage(value: Boolean);
    function get_StdDev: Int32;
    procedure set_StdDev(value: Int32);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property IsAboveAverage: Boolean read get_IsAboveAverage write set_IsAboveAverage;
    property IsEqualAverage: Boolean read get_IsEqualAverage write set_IsEqualAverage;
    property StdDev: Int32 read get_StdDev write set_StdDev;
  end;

  TDNAboveAverage = class(TDNGenericImport<DNAboveAverageClass, DNAboveAverage>) end;

  //-------------namespace: Aspose.Cells----------------
  DNAbstractCalculationEngineClass = interface(DDN.mscorlib.DNObjectClass)
  ['{CFC3855D-6F08-516D-A90A-FF5ADF2C45C9}']
  end;

  [DNTypeName('Aspose.Cells.AbstractCalculationEngine')]
  DNAbstractCalculationEngine = interface(DDN.mscorlib.DNObject)
  ['{A6E818F1-1AD7-36F1-8523-7F5C0B1D92EB}']
  { getters & setters } 

    function get_IsParamLiteralRequired: Boolean;
    function get_ProcessBuiltInFunctions: Boolean;

  { methods } 

    procedure Calculate(data: DNCalculationData);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property IsParamLiteralRequired: Boolean read get_IsParamLiteralRequired;
    property ProcessBuiltInFunctions: Boolean read get_ProcessBuiltInFunctions;
  end;

  TDNAbstractCalculationEngine = class(TDNGenericImport<DNAbstractCalculationEngineClass, DNAbstractCalculationEngine>) end;

  //-------------namespace: Aspose.Cells----------------
  DNAbstractCalculationMonitorClass = interface(DDN.mscorlib.DNObjectClass)
  ['{B26EE762-8307-588D-9801-CD090C7ED3A6}']
  end;

  [DNTypeName('Aspose.Cells.AbstractCalculationMonitor')]
  DNAbstractCalculationMonitor = interface(DDN.mscorlib.DNObject)
  ['{F1297480-B72D-3335-92B9-02F333CAA266}']
  { getters & setters } 

    function get_OriginalValue: DDN.mscorlib.DNObject;
    function get_ValueChanged: Boolean;
    function get_CalculatedValue: DDN.mscorlib.DNObject;

  { methods } 

    procedure BeforeCalculate(sheetIndex: Int32; rowIndex: Int32; colIndex: Int32);
    procedure AfterCalculate(sheetIndex: Int32; rowIndex: Int32; colIndex: Int32);
    function OnCircular(circularCellsData: DDN.mscorlib.DNIEnumerator): Boolean;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property OriginalValue: DDN.mscorlib.DNObject read get_OriginalValue;
    property ValueChanged: Boolean read get_ValueChanged;
    property CalculatedValue: DDN.mscorlib.DNObject read get_CalculatedValue;
  end;

  TDNAbstractCalculationMonitor = class(TDNGenericImport<DNAbstractCalculationMonitorClass, DNAbstractCalculationMonitor>) end;

  //-------------namespace: Aspose.Cells----------------
  DNAutoFilterClass = interface(DDN.mscorlib.DNObjectClass)
  ['{413B363F-A09E-5FB3-8168-588C9DA27667}']
  end;

  [DNTypeName('Aspose.Cells.AutoFilter')]
  DNAutoFilter = interface(DDN.mscorlib.DNObject)
  ['{129FF2F8-EE89-3F74-A5EF-53828411140B}']
  { getters & setters } 

    function get_Sorter: DNDataSorter;
    function get_Range: string;
    procedure set_Range(value: string);
    function get_ShowFilterButton: Boolean;
    procedure set_ShowFilterButton(value: Boolean);
    function get_FilterColumns: DNFilterColumnCollection;

  { methods } 

    procedure SetRange(row: Int32; startColumn: Int32; endColumn: Int32);
    procedure AddFilter(fieldIndex: Int32; criteria: string);
    procedure AddDateFilter(fieldIndex: Int32; dateTimeGroupingType: DNDateTimeGroupingType; year: Int32; month: Int32; day: Int32; hour: Int32; minute: Int32; second: Int32);
    procedure RemoveDateFilter(fieldIndex: Int32; dateTimeGroupingType: DNDateTimeGroupingType; year: Int32; month: Int32; day: Int32; hour: Int32; minute: Int32; second: Int32);
    procedure RemoveFilter(fieldIndex: Int32; criteria: string); overload;
    procedure Filter(fieldIndex: Int32; criteria: string);
    procedure FilterTop10(fieldIndex: Int32; isTop: Boolean; isPercent: Boolean; itemCount: Int32);
    procedure DynamicFilter(fieldIndex: Int32; dynamicFilterType: DNDynamicFilterType);
    procedure AddFontColorFilter(fieldIndex: Int32; color: DNCellsColor);
    procedure AddFillColorFilter(fieldIndex: Int32; pattern: DNBackgroundType; foregroundColor: DNCellsColor; backgroundColor: DNCellsColor);
    procedure AddIconFilter(fieldIndex: Int32; iconSetType: DNIconSetType; iconId: Int32);
    procedure MatchBlanks(fieldIndex: Int32);
    procedure MatchNonBlanks(fieldIndex: Int32);
    procedure Custom(fieldIndex: Int32; operatorType1: DNFilterOperatorType; criteria1: DDN.mscorlib.DNObject); overload;
    procedure Custom(fieldIndex: Int32; operatorType1: DNFilterOperatorType; criteria1: DDN.mscorlib.DNObject; isAnd: Boolean; operatorType2: DNFilterOperatorType; criteria2: DDN.mscorlib.DNObject); overload;
    procedure ShowAll;
    procedure RemoveFilter(fieldIndex: Int32); overload;
    function Refresh: TArray<Int32>; overload;
    function Refresh(hideRows: Boolean): TArray<Int32>; overload;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Sorter: DNDataSorter read get_Sorter;
    property Range: string read get_Range write set_Range;
    property ShowFilterButton: Boolean read get_ShowFilterButton write set_ShowFilterButton;
    property FilterColumns: DNFilterColumnCollection read get_FilterColumns;
  end;

  TDNAutoFilter = class(TDNGenericImport<DNAutoFilterClass, DNAutoFilter>) end;

  //-------------namespace: Aspose.Cells----------------
  DNAutoFitterOptionsClass = interface(DDN.mscorlib.DNObjectClass)
  ['{4CD1F678-4397-5751-ADDB-8034B4757289}']
  { constructors } 

    {class} function init: DNAutoFitterOptions;

  end;

  [DNTypeName('Aspose.Cells.AutoFitterOptions')]
  DNAutoFitterOptions = interface(DDN.mscorlib.DNObject)
  ['{F22C6652-4DEB-3062-B97A-FCE99CB09D82}']
  { getters & setters } 

    function get_DefaultEditLanguage: DNDefaultEditLanguage;
    procedure set_DefaultEditLanguage(value: DNDefaultEditLanguage);
    function get_AutoFitMergedCells: Boolean;
    procedure set_AutoFitMergedCells(value: Boolean);
    function get_AutoFitMergedCellsType: DNAutoFitMergedCellsType;
    procedure set_AutoFitMergedCellsType(value: DNAutoFitMergedCellsType);
    function get_OnlyAuto: Boolean;
    procedure set_OnlyAuto(value: Boolean);
    function get_IgnoreHidden: Boolean;
    procedure set_IgnoreHidden(value: Boolean);
    function get_MaxRowHeight: Double;
    procedure set_MaxRowHeight(value: Double);
    function get_AutoFitWrappedTextType: DNAutoFitWrappedTextType;
    procedure set_AutoFitWrappedTextType(value: DNAutoFitWrappedTextType);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property DefaultEditLanguage: DNDefaultEditLanguage read get_DefaultEditLanguage write set_DefaultEditLanguage;
    property AutoFitMergedCells: Boolean read get_AutoFitMergedCells write set_AutoFitMergedCells;
    property AutoFitMergedCellsType: DNAutoFitMergedCellsType read get_AutoFitMergedCellsType write set_AutoFitMergedCellsType;
    property OnlyAuto: Boolean read get_OnlyAuto write set_OnlyAuto;
    property IgnoreHidden: Boolean read get_IgnoreHidden write set_IgnoreHidden;
    property MaxRowHeight: Double read get_MaxRowHeight write set_MaxRowHeight;
    property AutoFitWrappedTextType: DNAutoFitWrappedTextType read get_AutoFitWrappedTextType write set_AutoFitWrappedTextType;
  end;

  TDNAutoFitterOptions = class(TDNGenericImport<DNAutoFitterOptionsClass, DNAutoFitterOptions>) end;

  //-------------namespace: Aspose.Cells----------------
  DNBorderClass = interface(DDN.mscorlib.DNObjectClass)
  ['{156C581B-ABEA-5CDE-A9A8-ED5D9B93BE23}']
  end;

  [DNTypeName('Aspose.Cells.Border')]
  DNBorder = interface(DDN.mscorlib.DNObject)
  ['{98F782CF-7936-3786-A877-07BBB28D0409}']
  { getters & setters } 

    function get_ThemeColor: DNThemeColor;
    procedure set_ThemeColor(value: DNThemeColor);
    function get_Color: DDN.System.Drawing.DNColor;
    procedure set_Color(value: DDN.System.Drawing.DNColor);
    function get_ArgbColor: Int32;
    procedure set_ArgbColor(value: Int32);
    function get_LineStyle: DNCellBorderType;
    procedure set_LineStyle(value: DNCellBorderType);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property ThemeColor: DNThemeColor read get_ThemeColor write set_ThemeColor;
    property Color: DDN.System.Drawing.DNColor read get_Color write set_Color;
    property ArgbColor: Int32 read get_ArgbColor write set_ArgbColor;
    property LineStyle: DNCellBorderType read get_LineStyle write set_LineStyle;
  end;

  TDNBorder = class(TDNGenericImport<DNBorderClass, DNBorder>) end;

  //-------------namespace: Aspose.Cells----------------
  DNBorderCollectionClass = interface(DDN.mscorlib.DNObjectClass)
  ['{34D26A30-E514-52E5-A1D4-958EE0ECE8A6}']
  end;

  [DNTypeName('Aspose.Cells.BorderCollection')]
  DNBorderCollection = interface(DDN.mscorlib.DNObject)
  ['{40E2CFD5-3BB5-3861-A2D8-880A13678BDE}']
  { getters & setters } 

    function get_Item(borderType: DNBorderType): DNBorder;
    function get_DiagonalColor: DDN.System.Drawing.DNColor;
    procedure set_DiagonalColor(value: DDN.System.Drawing.DNColor);
    function get_DiagonalStyle: DNCellBorderType;
    procedure set_DiagonalStyle(value: DNCellBorderType);

  { methods } 

    procedure SetColor(color: DDN.System.Drawing.DNColor);
    procedure SetStyle(style: DNCellBorderType);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Item[borderType: DNBorderType]: DNBorder read get_Item; default;
    property DiagonalColor: DDN.System.Drawing.DNColor read get_DiagonalColor write set_DiagonalColor;
    property DiagonalStyle: DNCellBorderType read get_DiagonalStyle write set_DiagonalStyle;
  end;

  TDNBorderCollection = class(TDNGenericImport<DNBorderCollectionClass, DNBorderCollection>) end;

  //-------------namespace: Aspose.Cells----------------
  DNCalculationCellClass = interface(DDN.mscorlib.DNObjectClass)
  ['{3D1E7A5B-B09C-5139-BEBD-A3605841D03D}']
  end;

  [DNTypeName('Aspose.Cells.CalculationCell')]
  DNCalculationCell = interface(DDN.mscorlib.DNObject)
  ['{BB27924D-0E53-36D9-8DBC-509A6D8DDFA9}']
  { getters & setters } 

    function get_Workbook: DNWorkbook;
    function get_Worksheet: DNWorksheet;
    function get_CellRow: Int32;
    function get_CellColumn: Int32;
    function get_Cell: DNCell;

  { methods } 

    procedure SetCalculatedValue(v: DDN.mscorlib.DNObject);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Workbook: DNWorkbook read get_Workbook;
    property Worksheet: DNWorksheet read get_Worksheet;
    property CellRow: Int32 read get_CellRow;
    property CellColumn: Int32 read get_CellColumn;
    property Cell: DNCell read get_Cell;
  end;

  TDNCalculationCell = class(TDNGenericImport<DNCalculationCellClass, DNCalculationCell>) end;

  //-------------namespace: Aspose.Cells----------------
  DNCalculationDataClass = interface(DDN.mscorlib.DNObjectClass)
  ['{910601AA-1AAF-5883-8C78-D3EBC4508A33}']
  end;

  [DNTypeName('Aspose.Cells.CalculationData')]
  DNCalculationData = interface(DDN.mscorlib.DNObject)
  ['{F4137B84-CBCB-34C7-A7D2-FCA79230A971}']
  { getters & setters } 

    function get_CalculatedValue: DDN.mscorlib.DNObject;
    procedure set_CalculatedValue(value: DDN.mscorlib.DNObject);
    function get_Workbook: DNWorkbook;
    function get_Worksheet: DNWorksheet;
    function get_CellRow: Int32;
    function get_CellColumn: Int32;
    function get_Cell: DNCell;
    function get_FunctionName: string;
    function get_ParamCount: Int32;

  { methods } 

    function GetParamValue(index: Int32): DDN.mscorlib.DNObject;
    function GetParamText(index: Int32): string;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property CalculatedValue: DDN.mscorlib.DNObject read get_CalculatedValue write set_CalculatedValue;
    property Workbook: DNWorkbook read get_Workbook;
    property Worksheet: DNWorksheet read get_Worksheet;
    property CellRow: Int32 read get_CellRow;
    property CellColumn: Int32 read get_CellColumn;
    property Cell: DNCell read get_Cell;
    property FunctionName: string read get_FunctionName;
    property ParamCount: Int32 read get_ParamCount;
  end;

  TDNCalculationData = class(TDNGenericImport<DNCalculationDataClass, DNCalculationData>) end;

  //-------------namespace: Aspose.Cells----------------
  DNCalculationOptionsClass = interface(DDN.mscorlib.DNObjectClass)
  ['{A1358E8C-C697-529E-AB16-C453F1BB6CB8}']
  { constructors } 

    {class} function init: DNCalculationOptions;

  end;

  [DNTypeName('Aspose.Cells.CalculationOptions')]
  DNCalculationOptions = interface(DDN.mscorlib.DNObject)
  ['{246947CD-902D-3B14-B7A7-C1F461D870FE}']
  { getters & setters } 

    function get_IgnoreError: Boolean;
    procedure set_IgnoreError(value: Boolean);
    function get_CustomFunction: DNICustomFunction;
    procedure set_CustomFunction(value: DNICustomFunction);
    function get_CustomEngine: DNAbstractCalculationEngine;
    procedure set_CustomEngine(value: DNAbstractCalculationEngine);
    function get_CalculationMonitor: DNAbstractCalculationMonitor;
    procedure set_CalculationMonitor(value: DNAbstractCalculationMonitor);
    function get_CalcStackSize: Int32;
    procedure set_CalcStackSize(value: Int32);
    function get_PrecisionStrategy: DNCalculationPrecisionStrategy;
    procedure set_PrecisionStrategy(value: DNCalculationPrecisionStrategy);
    function get_Recursive: Boolean;
    procedure set_Recursive(value: Boolean);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property IgnoreError: Boolean read get_IgnoreError write set_IgnoreError;
    property CustomFunction: DNICustomFunction read get_CustomFunction write set_CustomFunction;
    property CustomEngine: DNAbstractCalculationEngine read get_CustomEngine write set_CustomEngine;
    property CalculationMonitor: DNAbstractCalculationMonitor read get_CalculationMonitor write set_CalculationMonitor;
    property CalcStackSize: Int32 read get_CalcStackSize write set_CalcStackSize;
    property PrecisionStrategy: DNCalculationPrecisionStrategy read get_PrecisionStrategy write set_PrecisionStrategy;
    property Recursive: Boolean read get_Recursive write set_Recursive;
  end;

  TDNCalculationOptions = class(TDNGenericImport<DNCalculationOptionsClass, DNCalculationOptions>) end;

  //-------------namespace: Aspose.Cells----------------
  DNCellClass = interface(DDN.mscorlib.DNObjectClass)
  ['{EDC27DD2-0396-5A92-A300-1B781B4B4C73}']
  end;

  [DNTypeName('Aspose.Cells.Cell')]
  DNCell = interface(DDN.mscorlib.DNObject)
  ['{E899A3E7-C9D3-30F1-8F3A-5EF77E76137D}']
  { getters & setters } 

    function get_Worksheet: DNWorksheet;
    function get_DateTimeValue: DDN.mscorlib.DNDateTime;
    function get_Row: Int32;
    function get_Column: Int32;
    function get_IsFormula: Boolean;
    function get_Type: DNCellValueType;
    function get_Name: string;
    function get_IsErrorValue: Boolean;
    function get_IsNumericValue: Boolean;
    function get_StringValue: string;
    function get_StringValueWithoutFormat: string;
    function get_NumberCategoryType: DNNumberCategoryType;
    function get_DisplayStringValue: string;
    function get_IntValue: Int32;
    function get_DoubleValue: Double;
    function get_FloatValue: Single;
    function get_BoolValue: Boolean;
    function get_SharedStyleIndex: Int32;
    function get_Formula: string;
    procedure set_Formula(value: string);
    function get_FormulaLocal: string;
    procedure set_FormulaLocal(value: string);
    function get_R1C1Formula: string;
    procedure set_R1C1Formula(value: string);
    function get_ContainsExternalLink: Boolean;
    function get_IsArrayHeader: Boolean;
    function get_IsArrayFormula: Boolean;
    function get_IsInArray: Boolean;
    function get_IsSharedFormula: Boolean;
    function get_IsTableFormula: Boolean;
    function get_IsInTable: Boolean;
    function get_Value: DDN.mscorlib.DNObject;
    procedure set_Value(value: DDN.mscorlib.DNObject);
    function get_IsStyleSet: Boolean;
    function get_IsMerged: Boolean;
    function get_Comment: DNComment;
    function get_HtmlString: string;
    procedure set_HtmlString(value: string);

  { methods } 

    procedure SetSharedFormula(sharedFormula: string; rowNumber: Int32; columnNumber: Int32); overload;
    procedure RemoveArrayFormula(leaveNormalFormula: Boolean);
    procedure SetAddInFormula(addInFileName: string; addInFunction: string);
    procedure Copy(cell: DNCell);
    function Characters(startIndex: Int32; length: Int32): DNFontSetting;
    function IsRichText: Boolean;
    function GetCharacters: TArray<DNFontSetting>; overload;
    function GetCharacters(flag: Boolean): TArray<DNFontSetting>; overload;
    procedure SetCharacters(characters: TArray<DNFontSetting>);
    function GetMergedRange: DNRange;
    function GetHtmlString(html5: Boolean): string;
    function ToString: string;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean; overload;
    function GetHashCode: Int32;
    function Equals(cell: DNCell): Boolean; overload;
    function GetConditionalFormattingResult: DNConditionalFormattingResult;
    function GetValidation: DNValidation;
    function GetValidationValue: Boolean;
    function GetTable: DNListObject;
    procedure Calculate(options: DNCalculationOptions); overload;
    procedure Calculate(ignoreError: Boolean; customFunction: DNICustomFunction); overload;
    procedure PutValue(boolValue: Boolean); overload;
    procedure PutValue(intValue: Int32); overload;
    procedure PutValue(doubleValue: Double); overload;
    procedure PutValue(stringValue: string; isConverted: Boolean; setStyle: Boolean); overload;
    procedure PutValue(stringValue: string; isConverted: Boolean); overload;
    procedure PutValue(stringValue: string); overload;
    procedure PutValue(dateTime: DDN.mscorlib.DNDateTime); overload;
    procedure PutValue(objectValue: DDN.mscorlib.DNObject); overload;
    function GetStringValue(formatStrategy: DNCellValueFormatStrategy): string;
    function GetWidthOfValue: Int32;
    function GetHeightOfValue: Int32;
    function GetDisplayStyle: DNStyle; overload;
    function GetDisplayStyle(includeMergedBorders: Boolean): DNStyle; overload;
    function GetFormatConditions: TArray<DNFormatConditionCollection>;
    function GetStyle: DNStyle; overload;
    function GetStyle(checkBorders: Boolean): DNStyle; overload;
    procedure SetStyle(style: DNStyle); overload;
    procedure SetStyle(style: DNStyle; explicitFlag: Boolean); overload;
    procedure SetStyle(style: DNStyle; flag: DNStyleFlag); overload;
    procedure SetFormula(formula: string; value: DDN.mscorlib.DNObject); overload;
    function GetFormula(isR1C1: Boolean; isLocal: Boolean): string;
    procedure SetFormula(formula: string; isR1C1: Boolean; isLocal: Boolean; value: DDN.mscorlib.DNObject); overload;
    procedure SetFormula(formula: string; options: DNFormulaParseOptions; value: DDN.mscorlib.DNObject); overload;
    procedure SetArrayFormula(arrayFormula: string; rowNumber: Int32; columnNumber: Int32; isR1C1: Boolean; isLocal: Boolean); overload;
    procedure SetArrayFormula(arrayFormula: string; rowNumber: Int32; columnNumber: Int32; options: DNFormulaParseOptions); overload;
    procedure SetArrayFormula(arrayFormula: string; rowNumber: Int32; columnNumber: Int32; options: DNFormulaParseOptions; values: TArray<TArray<DDN.mscorlib.DNObject>>); overload;
    procedure SetSharedFormula(sharedFormula: string; rowNumber: Int32; columnNumber: Int32; isR1C1: Boolean; isLocal: Boolean); overload;
    procedure SetSharedFormula(sharedFormula: string; rowNumber: Int32; columnNumber: Int32; options: DNFormulaParseOptions); overload;
    procedure SetSharedFormula(sharedFormula: string; rowNumber: Int32; columnNumber: Int32; options: DNFormulaParseOptions; values: TArray<TArray<DDN.mscorlib.DNObject>>); overload;
    function GetPrecedents: DNReferredAreaCollection;
    function GetDependents(isAll: Boolean): TArray<DNCell>;
    function GetLeafs: DDN.mscorlib.DNIEnumerator;
    function GetArrayRange: DNCellArea;
    function SetDynamicArrayFormula(arrayFormula: string; options: DNFormulaParseOptions; calculateValue: Boolean): DNCellArea; overload;
    function SetDynamicArrayFormula(arrayFormula: string; options: DNFormulaParseOptions; values: TArray<TArray<DDN.mscorlib.DNObject>>; calculateRange: Boolean; calculateValue: Boolean): DNCellArea; overload;
    procedure SetArrayFormula(arrayFormula: string; rowNumber: Int32; columnNumber: Int32); overload;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    property Worksheet: DNWorksheet read get_Worksheet;
    property DateTimeValue: DDN.mscorlib.DNDateTime read get_DateTimeValue;
    property Row: Int32 read get_Row;
    property Column: Int32 read get_Column;
    property IsFormula: Boolean read get_IsFormula;
    property &Type: DNCellValueType read get_Type;
    property Name: string read get_Name;
    property IsErrorValue: Boolean read get_IsErrorValue;
    property IsNumericValue: Boolean read get_IsNumericValue;
    property StringValue: string read get_StringValue;
    property StringValueWithoutFormat: string read get_StringValueWithoutFormat;
    property NumberCategoryType: DNNumberCategoryType read get_NumberCategoryType;
    property DisplayStringValue: string read get_DisplayStringValue;
    property IntValue: Int32 read get_IntValue;
    property DoubleValue: Double read get_DoubleValue;
    property FloatValue: Single read get_FloatValue;
    property BoolValue: Boolean read get_BoolValue;
    property SharedStyleIndex: Int32 read get_SharedStyleIndex;
    property Formula: string read get_Formula write set_Formula;
    property FormulaLocal: string read get_FormulaLocal write set_FormulaLocal;
    property R1C1Formula: string read get_R1C1Formula write set_R1C1Formula;
    property ContainsExternalLink: Boolean read get_ContainsExternalLink;
    property IsArrayHeader: Boolean read get_IsArrayHeader;
    property IsArrayFormula: Boolean read get_IsArrayFormula;
    property IsInArray: Boolean read get_IsInArray;
    property IsSharedFormula: Boolean read get_IsSharedFormula;
    property IsTableFormula: Boolean read get_IsTableFormula;
    property IsInTable: Boolean read get_IsInTable;
    property Value: DDN.mscorlib.DNObject read get_Value write set_Value;
    property IsStyleSet: Boolean read get_IsStyleSet;
    property IsMerged: Boolean read get_IsMerged;
    property Comment: DNComment read get_Comment;
    property HtmlString: string read get_HtmlString write set_HtmlString;
  end;

  TDNCell = class(TDNGenericImport<DNCellClass, DNCell>) end;

  //-------------namespace: Aspose.Cells----------------
  DNCellsClass = interface(DNObjectClass)
  ['{138E5E0F-4D8E-50C3-9889-57E4A0C361B4}']
  end;

  [DNTypeName('Aspose.Cells.Cells')]
  DNCells = interface(DDN.mscorlib.DNIDisposable)
  ['{A0A589A5-EBCD-3D6B-A80E-5472CE8E8BDB}']
  { getters & setters } 

    function get_OdsCellFields: DNOdsCellFieldCollection;
    function get_Count: Int32;
    function get_CountLarge: Int64;
    function get_Item(index: Int32): DNCell; overload;
    function get_Rows: DNRowCollection;
    function get_MergedCells: DDN.mscorlib.DNArrayList;
    function get_Item(row: Int32; column: Int32): DNCell; overload;
    function get_Item(cellName: string): DNCell; overload;
    function get_MultiThreadReading: Boolean;
    procedure set_MultiThreadReading(value: Boolean);
    function get_MemorySetting: DNMemorySetting;
    procedure set_MemorySetting(value: DNMemorySetting);
    function get_Style: DNStyle;
    procedure set_Style(value: DNStyle);
    function get_StandardWidthInch: Double;
    procedure set_StandardWidthInch(value: Double);
    function get_StandardWidthPixels: Int32;
    procedure set_StandardWidthPixels(value: Int32);
    function get_StandardWidth: Double;
    procedure set_StandardWidth(value: Double);
    function get_StandardHeight: Double;
    procedure set_StandardHeight(value: Double);
    function get_StandardHeightPixels: Int32;
    procedure set_StandardHeightPixels(value: Int32);
    function get_PreserveString: Boolean;
    procedure set_PreserveString(value: Boolean);
    function get_MinRow: Int32;
    function get_MaxRow: Int32;
    function get_MinColumn: Int32;
    function get_MaxColumn: Int32;
    function get_MinDataRow: Int32;
    function get_MaxDataRow: Int32;
    function get_MinDataColumn: Int32;
    function get_MaxDataColumn: Int32;
    function get_IsDefaultRowHeightMatched: Boolean;
    procedure set_IsDefaultRowHeightMatched(value: Boolean);
    function get_IsDefaultRowHidden: Boolean;
    procedure set_IsDefaultRowHidden(value: Boolean);
    function get_Columns: DNColumnCollection;
    function get_Ranges: DNRangeCollection;
    function get_LastCell: DNCell;
    function get_MaxDisplayRange: DNRange;
    function get_FirstCell: DNCell;

  { methods } 

    function ImportDataView(dataView: DDN.System.Data.DNDataView; firstRow: Int32; firstColumn: Int32; insertRows: Boolean): Int32; overload;
    function ImportDataView(dataView: DDN.System.Data.DNDataView; firstRow: Int32; firstColumn: Int32; totalRows: Int32; totalColumns: Int32): Int32; overload;
    function ImportDataView(dataView: DDN.System.Data.DNDataView; firstRow: Int32; firstColumn: Int32; totalRows: Int32; totalColumns: Int32; insertRows: Boolean): Int32; overload;
    function ImportDataView(dataView: DDN.System.Data.DNDataView; isFieldNameShown: Boolean; firstRow: Int32; firstColumn: Int32; totalRows: Int32; totalColumns: Int32; insertRows: Boolean): Int32; overload;
    function ImportDataView(dataView: DDN.System.Data.DNDataView; isFieldNameShown: Boolean; firstRow: Int32; firstColumn: Int32; rowNumber: Int32; columnNumber: Int32; insertRows: Boolean; numberFormatString: string): Int32; overload;
    function ImportDataView(dataView: DDN.System.Data.DNDataView; isFieldNameShown: Boolean; firstRow: Int32; firstColumn: Int32; insertRows: Boolean): Int32; overload;
    function ImportDataGridAsString(dataGrid: DDN.System.Web.DNDataGrid; firstRow: Int32; firstColumn: Int32; insertRows: Boolean): Int32;
    function ImportGridView(gridView: DDN.System.Web.DNGridView; firstRow: Int32; firstColumn: Int32; options: DNImportTableOptions): Int32;
    function ImportDataGrid(dataGrid: DDN.System.Web.DNDataGrid; firstRow: Int32; firstColumn: Int32; insertRows: Boolean): Int32; overload;
    function ImportDataGrid(dataGrid: DDN.System.Web.DNDataGrid; firstRow: Int32; firstColumn: Int32; totalRows: Int32; totalColumns: Int32; insertRows: Boolean): Int32; overload;
    function ImportDataGrid(dataGrid: DDN.System.Web.DNDataGrid; firstRow: Int32; firstColumn: Int32; totalRows: Int32; totalColumns: Int32; insertRows: Boolean; importStyle: Boolean): Int32; overload;
    function FindFormula(formula: string; previousCell: DNCell): DNCell;
    function FindFormulaContains(formula: string; previousCell: DNCell): DNCell;
    function Find(what: DDN.mscorlib.DNObject; previousCell: DNCell): DNCell; overload;
    function Find(what: DDN.mscorlib.DNObject; previousCell: DNCell; findOptions: DNFindOptions): DNCell; overload;
    function EndCellInRow(rowIndex: Int32): DNCell; overload;
    function EndCellInColumn(columnIndex: Int16): DNCell; overload;
    function EndCellInColumn(startRow: Int32; endRow: Int32; startColumn: Int16; endColumn: Int16): DNCell; overload;
    function EndCellInRow(startRow: Int32; endRow: Int32; startColumn: Int32; endColumn: Int32): DNCell; overload;
    procedure MoveRange(sourceArea: DNCellArea; destRow: Int32; destColumn: Int32);
    procedure InsertCutCells(cutRange: DNRange; row: Int32; column: Int32; shiftType: DNShiftType);
    procedure InsertRange(area: DNCellArea; shiftNumber: Int32; shiftType: DNShiftType; updateReference: Boolean); overload;
    procedure InsertRange(area: DNCellArea; shiftType: DNShiftType); overload;
    procedure InsertRange(area: DNCellArea; shiftNumber: Int32; shiftType: DNShiftType); overload;
    procedure DeleteRange(startRow: Int32; startColumn: Int32; endRow: Int32; endColumn: Int32; shiftType: DNShiftType);
    function ExportArray(firstRow: Int32; firstColumn: Int32; totalRows: Int32; totalColumns: Int32): TArray<DDN.mscorlib.DNObject>;
    function ExportTypeArray(firstRow: Int32; firstColumn: Int32; totalRows: Int32; totalColumns: Int32): TArray<DNCellValueType>;
    function ImportCustomObjects(list: DDN.mscorlib.DNICollection; propertyNames: TArray<string>; isPropertyNameShown: Boolean; firstRow: Int32; firstColumn: Int32; rowNumber: Int32; insertRows: Boolean; dateFormatString: string; convertStringToNumber: Boolean): Int32; overload;
    function ImportCustomObjects(list: DDN.mscorlib.DNICollection; firstRow: Int32; firstColumn: Int32; options: DNImportTableOptions): Int32; overload;
    function RetrieveSubtotalSetting(ca: DNCellArea): DNSubtotalSetting;
    procedure Subtotal(ca: DNCellArea; groupBy: Int32; &function: DNConsolidationFunction; totalList: TArray<Int32>); overload;
    procedure Subtotal(ca: DNCellArea; groupBy: Int32; &function: DNConsolidationFunction; totalList: TArray<Int32>; replace: Boolean; pageBreaks: Boolean; summaryBelowData: Boolean); overload;
    procedure RemoveFormulas;
    procedure RemoveDuplicates; overload;
    procedure RemoveDuplicates(startRow: Int32; startColumn: Int32; endRow: Int32; endColumn: Int32); overload;
    procedure RemoveDuplicates(startRow: Int32; startColumn: Int32; endRow: Int32; endColumn: Int32; hasHeaders: Boolean; columnOffsets: TArray<Int32>); overload;
    procedure ConvertStringToNumericValue;
    function GetDependents(isAll: Boolean; row: Int32; column: Int32): TArray<DNCell>;
    function GetCellStyle(row: Int32; column: Int32): DNStyle;
    procedure Merge(firstRow: Int32; firstColumn: Int32; totalRows: Int32; totalColumns: Int32; checkConflict: Boolean; mergeConflict: Boolean); overload;
    procedure UnMerge(firstRow: Int32; firstColumn: Int32; totalRows: Int32; totalColumns: Int32);
    procedure ClearMergedCells;
    procedure HideRow(row: Int32);
    procedure UnhideRow(row: Int32; height: Double);
    procedure HideRows(row: Int32; totalRows: Int32);
    procedure UnhideRows(row: Int32; totalRows: Int32; height: Double);
    procedure SetRowHeightPixel(row: Int32; pixels: Int32);
    procedure SetRowHeightInch(row: Int32; inches: Double);
    procedure SetRowHeight(row: Int32; height: Double);
    procedure HideColumn(column: Int32);
    procedure UnhideColumn(column: Int32; width: Double);
    procedure HideColumns(column: Int32; totalColumns: Int32);
    procedure UnhideColumns(column: Int32; totalColumns: Int32; width: Double);
    function GetRowHeight(row: Int32): Double;
    function GetViewRowHeight(row: Int32): Double;
    function GetRowHeightPixel(row: Int32): Int32;
    function GetRowHeightInch(row: Int32): Double;
    function GetViewRowHeightInch(row: Int32): Double;
    procedure SetColumnWidthPixel(column: Int32; pixels: Int32);
    procedure SetColumnWidthInch(column: Int32; inches: Double);
    procedure SetColumnWidth(column: Int32; width: Double);
    function GetColumnWidthPixel(column: Int32): Int32;
    function GetColumnWidthInch(column: Int32): Double;
    function GetColumnWidth(column: Int32): Double;
    function GetViewColumnWidthPixel(column: Int32): Int32;
    procedure SetViewColumnWidthPixel(column: Int32; pixels: Int32);
    function GetLastDataRow(column: Int32): Int32;
    procedure ApplyColumnStyle(column: Int32; style: DNStyle; flag: DNStyleFlag);
    procedure ApplyRowStyle(row: Int32; style: DNStyle; flag: DNStyleFlag);
    procedure ApplyStyle(style: DNStyle; flag: DNStyleFlag);
    procedure CopyColumns(sourceCells0: DNCells; sourceColumnIndex: Int32; destinationColumnIndex: Int32; columnNumber: Int32; pasteOptions: DNPasteOptions); overload;
    procedure CopyColumn(sourceCells: DNCells; sourceColumnIndex: Int32; destinationColumnIndex: Int32);
    procedure CopyColumns(sourceCells0: DNCells; sourceColumnIndex: Int32; destinationColumnIndex: Int32; columnNumber: Int32); overload;
    procedure CopyColumns(sourceCells: DNCells; sourceColumnIndex: Int32; sourceTotalColumns: Int32; destinationColumnIndex: Int32; destinationTotalColumns: Int32); overload;
    procedure CopyRow(sourceCells: DNCells; sourceRowIndex: Int32; destinationRowIndex: Int32);
    procedure CopyRows(sourceCells: DNCells; sourceRowIndex: Int32; destinationRowIndex: Int32; rowNumber: Int32); overload;
    procedure CopyRows(sourceCells0: DNCells; sourceRowIndex: Int32; destinationRowIndex: Int32; rowNumber: Int32; copyOptions: DNCopyOptions); overload;
    procedure CopyRows(sourceCells0: DNCells; sourceRowIndex: Int32; destinationRowIndex: Int32; rowNumber: Int32; copyOptions: DNCopyOptions; pasteOptions: DNPasteOptions); overload;
    function GetGroupedRowOutlineLevel(rowIndex: Int32): Int32;
    function GetGroupedColumnOutlineLevel(columnIndex: Int32): Int32;
    function GetMaxGroupedColumnOutlineLevel: Int32;
    function GetMaxGroupedRowOutlineLevel: Int32;
    procedure ShowGroupDetail(isVertical: Boolean; index: Int32);
    procedure HideGroupDetail(isVertical: Boolean; index: Int32);
    procedure UngroupColumns(firstIndex: Int32; lastIndex: Int32);
    procedure GroupColumns(firstIndex: Int32; lastIndex: Int32); overload;
    procedure GroupColumns(firstIndex: Int32; lastIndex: Int32; isHidden: Boolean); overload;
    procedure UngroupRows(firstIndex: Int32; lastIndex: Int32; isAll: Boolean); overload;
    procedure UngroupRows(firstIndex: Int32; lastIndex: Int32); overload;
    procedure GroupRows(firstIndex: Int32; lastIndex: Int32; isHidden: Boolean); overload;
    procedure GroupRows(firstIndex: Int32; lastIndex: Int32); overload;
    procedure DeleteColumn(columnIndex: Int32; updateReference: Boolean); overload;
    procedure DeleteColumn(columnIndex: Int32); overload;
    procedure DeleteColumns(columnIndex: Int32; totalColumns: Int32; updateReference: Boolean);
    function IsDeletingRangeEnabled(startRow: Int32; startColumn: Int32; totalRows: Int32; totalColumns: Int32): Boolean;
    function DeleteRows(rowIndex: Int32; totalRows: Int32): Boolean; overload;
    procedure DeleteRow(rowIndex: Int32);
    function DeleteRows(rowIndex: Int32; totalRows: Int32; updateReference: Boolean): Boolean; overload;
    procedure DeleteBlankColumns; overload;
    procedure DeleteBlankColumns(options: DNDeleteOptions); overload;
    function IsBlankColumn(columnIndex: Int32): Boolean;
    procedure DeleteBlankRows; overload;
    procedure DeleteBlankRows(options: DNDeleteOptions); overload;
    procedure InsertColumns(columnIndex: Int32; totalColumns: Int32); overload;
    procedure InsertColumns(columnIndex: Int32; totalColumns: Int32; updateReference: Boolean); overload;
    procedure InsertColumn(columnIndex: Int32; updateReference: Boolean); overload;
    procedure InsertColumn(columnIndex: Int32); overload;
    procedure InsertRows(rowIndex: Int32; totalRows: Int32; updateReference: Boolean); overload;
    procedure InsertRows(rowIndex: Int32; totalRows: Int32; options: DNInsertOptions); overload;
    procedure InsertRows(rowIndex: Int32; totalRows: Int32); overload;
    procedure InsertRow(rowIndex: Int32);
    procedure ClearRange(range: DNCellArea); overload;
    procedure ClearRange(startRow: Int32; startColumn: Int32; endRow: Int32; endColumn: Int32); overload;
    procedure ClearContents(range: DNCellArea); overload;
    procedure ClearContents(startRow: Int32; startColumn: Int32; endRow: Int32; endColumn: Int32); overload;
    procedure ClearFormats(range: DNCellArea); overload;
    procedure ClearFormats(startRow: Int32; startColumn: Int32; endRow: Int32; endColumn: Int32); overload;
    procedure LinkToXmlMap(mapName: string; row: Int32; column: Int32; path: string);
    function ImportDataView(dataView: DDN.System.Data.DNDataView; firstRow: Int32; firstColumn: Int32): Int32; overload;
    procedure Dispose;
    function GetEnumerator: DDN.mscorlib.DNIEnumerator;
    function GetRowEnumerator: DDN.mscorlib.DNIEnumerator;
    function GetCell(row: Int32; column: Int32): DNCell;
    function GetRow(row: Int32): DNRow;
    function CheckCell(row: Int32; column: Int32): DNCell;
    function CheckRow(row: Int32): DNRow;
    function CheckColumn(columnIndex: Int32): DNColumn;
    function IsRowHidden(rowIndex: Int32): Boolean;
    function IsColumnHidden(columnIndex: Int32): Boolean;
    procedure AddRange(rangeObject: DNRange);
    function CreateRange(upperLeftCell: string; lowerRightCell: string): DNRange; overload;
    function CreateRange(firstRow: Int32; firstColumn: Int32; totalRows: Int32; totalColumns: Int32): DNRange; overload;
    function CreateRange(address: string): DNRange; overload;
    function CreateRange(firstIndex: Int32; number: Int32; isVertical: Boolean): DNRange; overload;
    procedure Clear;
    function ExportDataTable(firstRow: Int32; firstColumn: Int32; totalRows: Int32; totalColumns: Int32): DDN.System.Data.DNDataTable; overload;
    function ExportDataTable(firstRow: Int32; firstColumn: Int32; totalRows: Int32; totalColumns: Int32; exportColumnName: Boolean): DDN.System.Data.DNDataTable; overload;
    function ExportDataTableAsString(firstRow: Int32; firstColumn: Int32; totalRows: Int32; totalColumns: Int32): DDN.System.Data.DNDataTable; overload;
    function ExportDataTableAsString(firstRow: Int32; firstColumn: Int32; totalRows: Int32; totalColumns: Int32; exportColumnName: Boolean): DDN.System.Data.DNDataTable; overload;
    function ExportDataTable(firstRow: Int32; firstColumn: Int32; totalRows: Int32; totalColumns: Int32; options: DNExportTableOptions): DDN.System.Data.DNDataTable; overload;
    function ImportData(table: DNICellsDataTable; firstRow: Int32; firstColumn: Int32; options: DNImportTableOptions): Int32; overload;
    function ImportData(table: DDN.System.Data.DNDataTable; firstRow: Int32; firstColumn: Int32; options: DNImportTableOptions): Int32; overload;
    function ImportData(dataView: DDN.System.Data.DNDataView; firstRow: Int32; firstColumn: Int32; options: DNImportTableOptions): Int32; overload;
    function Import(dataReader: DDN.System.Data.DNIDataReader; firstRow: Int32; firstColumn: Int32; options: DNImportTableOptions): Int32;
    function ImportDataTable(dataTable: DDN.System.Data.DNDataTable; isFieldNameShown: Boolean; startCell: string): Int32; overload;
    function ImportDataTable(dataTable: DDN.System.Data.DNDataTable; isFieldNameShown: Boolean; firstRow: Int32; firstColumn: Int32; insertRows: Boolean; convertStringToNumber: Boolean): Int32; overload;
    function ImportDataTable(dataTable: DDN.System.Data.DNDataTable; isFieldNameShown: Boolean; firstRow: Int32; firstColumn: Int32): Int32; overload;
    function ImportDataTable(dataTable: DDN.System.Data.DNDataTable; isFieldNameShown: Boolean; firstRow: Int32; firstColumn: Int32; insertRows: Boolean): Int32; overload;
    function ImportDataTable(dataTable: DDN.System.Data.DNDataTable; isFieldNameShown: Boolean; firstRow: Int32; firstColumn: Int32; totalRows: Int32; totalColumns: Int32): Int32; overload;
    function ImportFromDataReader(reader: DDN.System.Data.DNSqlDataReader; firstRow: Int32; firstColumn: Int32; insertRows: Boolean): Int32; overload;
    function ImportDataReader(reader: DDN.System.Data.DNSqlDataReader; firstRow: Int32; firstColumn: Int32; insertRows: Boolean): Int32; overload;
    function ImportFromDataReader(reader: DDN.System.Data.DNSqlDataReader; isFieldNameShown: Boolean; firstRow: Int32; firstColumn: Int32; insertRows: Boolean): Int32; overload;
    function ImportDataReader(reader: DDN.System.Data.DNSqlDataReader; isFieldNameShown: Boolean; firstRow: Int32; firstColumn: Int32; insertRows: Boolean): Int32; overload;
    function ImportFromDataReader(reader: DDN.System.Data.DNSqlDataReader; isFieldNameShown: Boolean; firstRow: Int32; firstColumn: Int32; insertRows: Boolean; dateFormatString: string; convertStringToNumber: Boolean): Int32; overload;
    function ImportDataReader(reader: DDN.System.Data.DNSqlDataReader; isFieldNameShown: Boolean; firstRow: Int32; firstColumn: Int32; insertRows: Boolean; dateFormatString: string; convertStringToNumber: Boolean): Int32; overload;
    function ImportFromDataReader(reader: DDN.System.Data.DNOleDbDataReader; isFieldNameShown: Boolean; firstRow: Int32; firstColumn: Int32; insertRows: Boolean; dateFormatString: string; convertStringToNumber: Boolean): Int32; overload;
    function ImportDataReader(reader: DDN.System.Data.DNOleDbDataReader; isFieldNameShown: Boolean; firstRow: Int32; firstColumn: Int32; insertRows: Boolean; dateFormatString: string; convertStringToNumber: Boolean): Int32; overload;
    function ImportFromDataReader(reader: DDN.System.Data.DNOleDbDataReader; isFieldNameShown: Boolean; firstRow: Int32; firstColumn: Int32; insertRows: Boolean): Int32; overload;
    function ImportDataReader(reader: DDN.System.Data.DNOleDbDataReader; isFieldNameShown: Boolean; firstRow: Int32; firstColumn: Int32; insertRows: Boolean): Int32; overload;
    function ImportFromDataReader(reader: DDN.System.Data.DNOleDbDataReader; firstRow: Int32; firstColumn: Int32; insertRows: Boolean): Int32; overload;
    function ImportDataReader(reader: DDN.System.Data.DNOleDbDataReader; firstRow: Int32; firstColumn: Int32; insertRows: Boolean): Int32; overload;
    function ImportData(reader: DDN.System.Data.DNIDataReader; firstRow: Int32; firstColumn: Int32): Int32; overload;
    function ImportData(reader: DDN.System.Data.DNIDataReader; firstRow: Int32; firstColumn: Int32; options: DNImportTableOptions): Int32; overload;
    function ImportDataReader(reader: DDN.System.Data.DNIDataReader; isFieldNameShown: Boolean; firstRow: Int32; firstColumn: Int32; insertRows: Boolean; dateFormatString: string; convertStringToNumber: Boolean): Int32; overload;
    function ImportDataTable(dataTable: DDN.System.Data.DNDataTable; isFieldNameShown: Boolean; firstRow: Int32; firstColumn: Int32; rowNumber: Int32; columnNumber: Int32; insertRows: Boolean; dateFormatString: string): Int32; overload;
    function ImportDataTable(dataTable: DDN.System.Data.DNDataTable; isFieldNameShown: Boolean; firstRow: Int32; firstColumn: Int32; rowNumber: Int32; columnNumber: Int32; insertRows: Boolean; dateFormatString: string; convertStringToNumber: Boolean): Int32; overload;
    procedure ImportDataRow(dataRow: DDN.System.Data.DNDataRow; row: Int32; firstColumn: Int32);
    function ImportDataTable(dataTable: DDN.System.Data.DNDataTable; isFieldNameShown: Boolean; firstRow: Int32; firstColumn: Int32; rowNumber: Int32; columnNumber: Int32; insertRows: Boolean): Int32; overload;
    procedure ImportTwoDimensionArray(objArray: TArray<DDN.mscorlib.DNObject>; firstRow: Int32; firstColumn: Int32); overload;
    procedure ImportTwoDimensionArray(objArray: TArray<DDN.mscorlib.DNObject>; firstRow: Int32; firstColumn: Int32; convertStringToNumber: Boolean); overload;
    procedure ImportTwoDimensionArray(objArray: TArray<DDN.mscorlib.DNObject>; styles: TArray<DDN.mscorlib.DNObject>; firstRow: Int32; firstColumn: Int32; convertStringToNumber: Boolean); overload;
    procedure ImportTwoDimensionArray(objArray: TArray<DDN.mscorlib.DNObject>; styles: TArray<DDN.mscorlib.DNObject>; firstRow: Int32; firstColumn: Int32; opts: DNTxtLoadOptions); overload;
    procedure ImportObjectArray(objArray: TArray<DDN.mscorlib.DNObject>; firstRow: Int32; firstColumn: Int32; isVertical: Boolean); overload;
    procedure ImportArrayList(arrayList: DDN.mscorlib.DNArrayList; firstRow: Int32; firstColumn: Int32; isVertical: Boolean);
    procedure ImportObjectArray(objArray: TArray<DDN.mscorlib.DNObject>; firstRow: Int32; firstColumn: Int32; isVertical: Boolean; skip: Int32); overload;
    procedure ImportArray(stringArray: TArray<string>; firstRow: Int32; firstColumn: Int32); overload;
    procedure ImportFormulaArray(stringArray: TArray<string>; firstRow: Int32; firstColumn: Int32; isVertical: Boolean);
    procedure ImportArray(stringArray: TArray<string>; firstRow: Int32; firstColumn: Int32; isVertical: Boolean); overload;
    procedure ImportArray(intArray: TArray<Int32>; firstRow: Int32; firstColumn: Int32); overload;
    procedure ImportArray(intArray: TArray<Int32>; firstRow: Int32; firstColumn: Int32; isVertical: Boolean); overload;
    procedure ImportArray(doubleArray: TArray<Double>; firstRow: Int32; firstColumn: Int32); overload;
    procedure ImportArray(doubleArray: TArray<Double>; firstRow: Int32; firstColumn: Int32; isVertical: Boolean); overload;
    procedure TextToColumns(row: Int32; column: Int32; totalRows: Int32; options: DNTxtLoadOptions);
    procedure ImportCSV(fileName: string; splitter: string; convertNumericData: Boolean; firstRow: Int32; firstColumn: Int32); overload;
    procedure ImportCSV(stream: DDN.mscorlib.DNStream; splitter: string; convertNumericData: Boolean; firstRow: Int32; firstColumn: Int32); overload;
    procedure ImportCSV(fileName: string; options: DNTxtLoadOptions; firstRow: Int32; firstColumn: Int32); overload;
    procedure ImportCSV(stream: DDN.mscorlib.DNStream; options: DNTxtLoadOptions; firstRow: Int32; firstColumn: Int32); overload;
    procedure Merge(firstRow: Int32; firstColumn: Int32; totalRows: Int32; totalColumns: Int32); overload;
    procedure Merge(firstRow: Int32; firstColumn: Int32; totalRows: Int32; totalColumns: Int32; mergeConflict: Boolean); overload;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property OdsCellFields: DNOdsCellFieldCollection read get_OdsCellFields;
    property Count: Int32 read get_Count;
    property CountLarge: Int64 read get_CountLarge;
    property Item[index: Int32]: DNCell read get_Item; default;
    property Rows: DNRowCollection read get_Rows;
    property MergedCells: DDN.mscorlib.DNArrayList read get_MergedCells;
    property Item[row: Int32; column: Int32]: DNCell read get_Item; default;
    property Item[cellName: string]: DNCell read get_Item; default;
    property MultiThreadReading: Boolean read get_MultiThreadReading write set_MultiThreadReading;
    property MemorySetting: DNMemorySetting read get_MemorySetting write set_MemorySetting;
    property Style: DNStyle read get_Style write set_Style;
    property StandardWidthInch: Double read get_StandardWidthInch write set_StandardWidthInch;
    property StandardWidthPixels: Int32 read get_StandardWidthPixels write set_StandardWidthPixels;
    property StandardWidth: Double read get_StandardWidth write set_StandardWidth;
    property StandardHeight: Double read get_StandardHeight write set_StandardHeight;
    property StandardHeightPixels: Int32 read get_StandardHeightPixels write set_StandardHeightPixels;
    property PreserveString: Boolean read get_PreserveString write set_PreserveString;
    property MinRow: Int32 read get_MinRow;
    property MaxRow: Int32 read get_MaxRow;
    property MinColumn: Int32 read get_MinColumn;
    property MaxColumn: Int32 read get_MaxColumn;
    property MinDataRow: Int32 read get_MinDataRow;
    property MaxDataRow: Int32 read get_MaxDataRow;
    property MinDataColumn: Int32 read get_MinDataColumn;
    property MaxDataColumn: Int32 read get_MaxDataColumn;
    property IsDefaultRowHeightMatched: Boolean read get_IsDefaultRowHeightMatched write set_IsDefaultRowHeightMatched;
    property IsDefaultRowHidden: Boolean read get_IsDefaultRowHidden write set_IsDefaultRowHidden;
    property Columns: DNColumnCollection read get_Columns;
    property Ranges: DNRangeCollection read get_Ranges;
    property LastCell: DNCell read get_LastCell;
    property MaxDisplayRange: DNRange read get_MaxDisplayRange;
    property FirstCell: DNCell read get_FirstCell;
  end;

  TDNCells = class(TDNGenericImport<DNCellsClass, DNCells>) end;

  //-------------namespace: Aspose.Cells----------------
  DNCellsColorClass = interface(DDN.mscorlib.DNObjectClass)
  ['{F1746607-3083-5076-8D64-A0830C674CEB}']
  end;

  [DNTypeName('Aspose.Cells.CellsColor')]
  DNCellsColor = interface(DDN.mscorlib.DNObject)
  ['{209DDDB6-D7E1-37C1-95B9-AD9361EC79CC}']
  { getters & setters } 

    function get_IsShapeColor: Boolean;
    procedure set_IsShapeColor(value: Boolean);
    function get_Type: DNColorType;
    function get_ThemeColor: DNThemeColor;
    procedure set_ThemeColor(value: DNThemeColor);
    function get_ColorIndex: Int32;
    procedure set_ColorIndex(value: Int32);
    function get_Color: DDN.System.Drawing.DNColor;
    procedure set_Color(value: DDN.System.Drawing.DNColor);
    function get_Argb: Int32;
    procedure set_Argb(value: Int32);
    function get_Transparency: Double;
    procedure set_Transparency(value: Double);

  { methods } 

    procedure SetTintOfShapeColor(tint: Double);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property IsShapeColor: Boolean read get_IsShapeColor write set_IsShapeColor;
    property &Type: DNColorType read get_Type;
    property ThemeColor: DNThemeColor read get_ThemeColor write set_ThemeColor;
    property ColorIndex: Int32 read get_ColorIndex write set_ColorIndex;
    property Color: DDN.System.Drawing.DNColor read get_Color write set_Color;
    property Argb: Int32 read get_Argb write set_Argb;
    property Transparency: Double read get_Transparency write set_Transparency;
  end;

  TDNCellsColor = class(TDNGenericImport<DNCellsColorClass, DNCellsColor>) end;

  //-------------namespace: Aspose.Cells----------------
  DNCellsFactoryClass = interface(DDN.mscorlib.DNObjectClass)
  ['{5278C3F0-4C6C-50A6-923F-1F947A66569C}']
  { constructors } 

    {class} function init: DNCellsFactory;

  end;

  [DNTypeName('Aspose.Cells.CellsFactory')]
  DNCellsFactory = interface(DDN.mscorlib.DNObject)
  ['{09C1BFF7-174B-30B7-9FDA-82EDB490D631}']
  { methods } 

    function CreateStyle: DNStyle;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNCellsFactory = class(TDNGenericImport<DNCellsFactoryClass, DNCellsFactory>) end;

  //-------------namespace: Aspose.Cells----------------
  DNCellsHelperClass = interface(DDN.mscorlib.DNObjectClass)
  ['{6182F2F7-6F29-5E1E-8241-8B7960A79CA2}']
  { static getter & setter } 

    {class} function get_SignificantDigits: Int32;
    {class} procedure set_SignificantDigits(value: Int32);
    {class} function get_DPI: Double;
    {class} procedure set_DPI(value: Double);
    {class} function get_StartupPath: string;
    {class} procedure set_StartupPath(value: string);
    {class} function get_AltStartPath: string;
    {class} procedure set_AltStartPath(value: string);
    {class} function get_LibraryPath: string;
    {class} procedure set_LibraryPath(value: string);
    {class} function get_CustomImplementationFactory: DNCustomImplementationFactory;
    {class} procedure set_CustomImplementationFactory(value: DNCustomImplementationFactory);
    {class} function get_IsCloudPlatform: Boolean;
    {class} procedure set_IsCloudPlatform(value: Boolean);

  { static methods } 

    {class} function GetTextWidth(text: string; font: DNFont; scaling: Double): Double;
    {class} function GetVersion: string;
    {class} procedure CellNameToIndex(cellName: string; out row: Int32; out column: Int32);
    {class} function CellIndexToName(row: Int32; column: Int32): string;
    {class} function ColumnIndexToName(column: Int32): string;
    {class} function ColumnNameToIndex(columnName: string): Int32;
    {class} function RowIndexToName(row: Int32): string;
    {class} function RowNameToIndex(rowName: string): Int32;
    {class} function ConvertR1C1FormulaToA1(r1c1Formula: string; row: Int32; column: Int32): string;
    {class} function ConvertA1FormulaToR1C1(formula: string; row: Int32; column: Int32): string;
    {class} function GetDateTimeFromDouble(doubleValue: Double; date1904: Boolean): DDN.mscorlib.DNDateTime;
    {class} function GetDoubleFromDateTime(dateTime: DDN.mscorlib.DNDateTime; date1904: Boolean): Double;
    {class} function GetUsedColors(workbook: DNWorkbook): TArray<DDN.System.Drawing.DNColor>;
    {class} procedure AddAddInFunction(&function: string; minCountOfParameters: Int32; maxCountOfParameters: Int32; paramersType: TArray<DNParameterType>; functionValueType: DNParameterType);
    {class} procedure MergeFiles(files: TArray<string>; cachedFile: string; destFile: string);
    {class} function CreateSafeSheetName(nameProposal: string): string; overload;
    {class} function CreateSafeSheetName(nameProposal: string; replaceChar: Char): string; overload;

  { static propertys } 

    {class} property SignificantDigits: Int32 read get_SignificantDigits write set_SignificantDigits;
    {class} property DPI: Double read get_DPI write set_DPI;
    {class} property StartupPath: string read get_StartupPath write set_StartupPath;
    {class} property AltStartPath: string read get_AltStartPath write set_AltStartPath;
    {class} property LibraryPath: string read get_LibraryPath write set_LibraryPath;
    {class} property CustomImplementationFactory: DNCustomImplementationFactory read get_CustomImplementationFactory write set_CustomImplementationFactory;
    {class} property IsCloudPlatform: Boolean read get_IsCloudPlatform write set_IsCloudPlatform;
  end;

  [DNTypeName('Aspose.Cells.CellsHelper')]
  DNCellsHelper = interface(DDN.mscorlib.DNObject)
  ['{D87959FB-F02D-3E17-AF88-D56C786203E9}']
  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNCellsHelper = class(TDNGenericImport<DNCellsHelperClass, DNCellsHelper>) end;

  //-------------namespace: Aspose.Cells----------------
  DNCellWatchClass = interface(DDN.mscorlib.DNObjectClass)
  ['{04FA91F6-B506-5F4A-8252-FB5B7A8438EA}']
  { constructors } 

    {class} function init: DNCellWatch;

  end;

  [DNTypeName('Aspose.Cells.CellWatch')]
  DNCellWatch = interface(DDN.mscorlib.DNObject)
  ['{9A340EE4-44C5-3F3C-8E04-A22108616862}']
  { getters & setters } 

    function get_Row: Int32;
    procedure set_Row(value: Int32);
    function get_Column: Int32;
    procedure set_Column(value: Int32);
    function get_CellName: string;
    procedure set_CellName(value: string);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Row: Int32 read get_Row write set_Row;
    property Column: Int32 read get_Column write set_Column;
    property CellName: string read get_CellName write set_CellName;
  end;

  TDNCellWatch = class(TDNGenericImport<DNCellWatchClass, DNCellWatch>) end;

  //-------------namespace: Aspose.Cells.Charts----------------
  DNAxisClass = interface(DDN.mscorlib.DNObjectClass)
  ['{B1E05970-E7D7-5E30-8545-6EBEEA0E4495}']
  end;

  [DNTypeName('Aspose.Cells.Charts.Axis')]
  DNAxis = interface(DDN.mscorlib.DNObject)
  ['{2D523194-8F60-376E-99CF-685770DBE7D7}']
  { getters & setters } 

    function get_Area: DNArea;
    function get_IsAutomaticMinValue: Boolean;
    procedure set_IsAutomaticMinValue(value: Boolean);
    function get_MinValue: DDN.mscorlib.DNObject;
    procedure set_MinValue(value: DDN.mscorlib.DNObject);
    function get_IsAutomaticMaxValue: Boolean;
    procedure set_IsAutomaticMaxValue(value: Boolean);
    function get_MaxValue: DDN.mscorlib.DNObject;
    procedure set_MaxValue(value: DDN.mscorlib.DNObject);
    function get_IsAutomaticMajorUnit: Boolean;
    procedure set_IsAutomaticMajorUnit(value: Boolean);
    function get_MajorUnit: Double;
    procedure set_MajorUnit(value: Double);
    function get_IsAutomaticMinorUnit: Boolean;
    procedure set_IsAutomaticMinorUnit(value: Boolean);
    function get_MinorUnit: Double;
    procedure set_MinorUnit(value: Double);
    function get_AxisLine: DNLine;
    function get_MajorTickMark: DNTickMarkType;
    procedure set_MajorTickMark(value: DNTickMarkType);
    function get_MinorTickMark: DNTickMarkType;
    procedure set_MinorTickMark(value: DNTickMarkType);
    function get_TickLabelPosition: DNTickLabelPositionType;
    procedure set_TickLabelPosition(value: DNTickLabelPositionType);
    function get_CrossAt: Double;
    procedure set_CrossAt(value: Double);
    function get_CrossType: DNCrossType;
    procedure set_CrossType(value: DNCrossType);
    function get_LogBase: Double;
    procedure set_LogBase(value: Double);
    function get_IsLogarithmic: Boolean;
    procedure set_IsLogarithmic(value: Boolean);
    function get_IsPlotOrderReversed: Boolean;
    procedure set_IsPlotOrderReversed(value: Boolean);
    function get_AxisBetweenCategories: Boolean;
    procedure set_AxisBetweenCategories(value: Boolean);
    function get_TickLabels: DNTickLabels;
    function get_TickLabelSpacing: Int32;
    procedure set_TickLabelSpacing(value: Int32);
    function get_IsAutoTickLabelSpacing: Boolean;
    procedure set_IsAutoTickLabelSpacing(value: Boolean);
    function get_TickMarkSpacing: Int32;
    procedure set_TickMarkSpacing(value: Int32);
    function get_DisplayUnit: DNDisplayUnitType;
    procedure set_DisplayUnit(value: DNDisplayUnitType);
    function get_CustUnit: Int32;
    procedure set_CustUnit(value: Int32);
    function get_DisplayUnitLabel: DNDisplayUnitLabel;
    function get_IsDisplayUnitLabelShown: Boolean;
    procedure set_IsDisplayUnitLabelShown(value: Boolean);
    function get_Title: DNTitle;
    function get_CategoryType: DNCategoryType;
    procedure set_CategoryType(value: DNCategoryType);
    function get_BaseUnitScale: DNTimeUnit;
    procedure set_BaseUnitScale(value: DNTimeUnit);
    function get_MajorUnitScale: DNTimeUnit;
    procedure set_MajorUnitScale(value: DNTimeUnit);
    function get_MinorUnitScale: DNTimeUnit;
    procedure set_MinorUnitScale(value: DNTimeUnit);
    function get_IsVisible: Boolean;
    procedure set_IsVisible(value: Boolean);
    function get_MajorGridLines: DNLine;
    function get_MinorGridLines: DNLine;
    function get_HasMultiLevelLabels: Boolean;
    procedure set_HasMultiLevelLabels(value: Boolean);
    function get_AxisLabels: DDN.mscorlib.DNArrayList;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Area: DNArea read get_Area;
    property IsAutomaticMinValue: Boolean read get_IsAutomaticMinValue write set_IsAutomaticMinValue;
    property MinValue: DDN.mscorlib.DNObject read get_MinValue write set_MinValue;
    property IsAutomaticMaxValue: Boolean read get_IsAutomaticMaxValue write set_IsAutomaticMaxValue;
    property MaxValue: DDN.mscorlib.DNObject read get_MaxValue write set_MaxValue;
    property IsAutomaticMajorUnit: Boolean read get_IsAutomaticMajorUnit write set_IsAutomaticMajorUnit;
    property MajorUnit: Double read get_MajorUnit write set_MajorUnit;
    property IsAutomaticMinorUnit: Boolean read get_IsAutomaticMinorUnit write set_IsAutomaticMinorUnit;
    property MinorUnit: Double read get_MinorUnit write set_MinorUnit;
    property AxisLine: DNLine read get_AxisLine;
    property MajorTickMark: DNTickMarkType read get_MajorTickMark write set_MajorTickMark;
    property MinorTickMark: DNTickMarkType read get_MinorTickMark write set_MinorTickMark;
    property TickLabelPosition: DNTickLabelPositionType read get_TickLabelPosition write set_TickLabelPosition;
    property CrossAt: Double read get_CrossAt write set_CrossAt;
    property CrossType: DNCrossType read get_CrossType write set_CrossType;
    property LogBase: Double read get_LogBase write set_LogBase;
    property IsLogarithmic: Boolean read get_IsLogarithmic write set_IsLogarithmic;
    property IsPlotOrderReversed: Boolean read get_IsPlotOrderReversed write set_IsPlotOrderReversed;
    property AxisBetweenCategories: Boolean read get_AxisBetweenCategories write set_AxisBetweenCategories;
    property TickLabels: DNTickLabels read get_TickLabels;
    property TickLabelSpacing: Int32 read get_TickLabelSpacing write set_TickLabelSpacing;
    property IsAutoTickLabelSpacing: Boolean read get_IsAutoTickLabelSpacing write set_IsAutoTickLabelSpacing;
    property TickMarkSpacing: Int32 read get_TickMarkSpacing write set_TickMarkSpacing;
    property DisplayUnit: DNDisplayUnitType read get_DisplayUnit write set_DisplayUnit;
    property CustUnit: Int32 read get_CustUnit write set_CustUnit;
    property DisplayUnitLabel: DNDisplayUnitLabel read get_DisplayUnitLabel;
    property IsDisplayUnitLabelShown: Boolean read get_IsDisplayUnitLabelShown write set_IsDisplayUnitLabelShown;
    property Title: DNTitle read get_Title;
    property CategoryType: DNCategoryType read get_CategoryType write set_CategoryType;
    property BaseUnitScale: DNTimeUnit read get_BaseUnitScale write set_BaseUnitScale;
    property MajorUnitScale: DNTimeUnit read get_MajorUnitScale write set_MajorUnitScale;
    property MinorUnitScale: DNTimeUnit read get_MinorUnitScale write set_MinorUnitScale;
    property IsVisible: Boolean read get_IsVisible write set_IsVisible;
    property MajorGridLines: DNLine read get_MajorGridLines;
    property MinorGridLines: DNLine read get_MinorGridLines;
    property HasMultiLevelLabels: Boolean read get_HasMultiLevelLabels write set_HasMultiLevelLabels;
    property AxisLabels: DDN.mscorlib.DNArrayList read get_AxisLabels;
  end;

  TDNAxis = class(TDNGenericImport<DNAxisClass, DNAxis>) end;

  //-------------namespace: Aspose.Cells.Charts----------------
  DNChartClass = interface(DDN.mscorlib.DNObjectClass)
  ['{C84BC57F-C1DB-5B69-BB5F-470EC6B2D8EC}']
  end;

  [DNTypeName('Aspose.Cells.Charts.Chart')]
  DNChart = interface(DDN.mscorlib.DNObject)
  ['{9314917D-B876-3249-8DE8-F46F54244A31}']
  { getters & setters } 

    function get_Style: Int32;
    procedure set_Style(value: Int32);
    function get_ChartObject: DNChartShape;
    function get_HidePivotFieldButtons: Boolean;
    procedure set_HidePivotFieldButtons(value: Boolean);
    function get_PivotOptions: DNPivotOptions;
    function get_PivotSource: string;
    procedure set_PivotSource(value: string);
    function get_PlotBy: DNPlotDataByType;
    function get_PlotEmptyCellsType: DNPlotEmptyCellsType;
    procedure set_PlotEmptyCellsType(value: DNPlotEmptyCellsType);
    function get_PlotVisibleCells: Boolean;
    procedure set_PlotVisibleCells(value: Boolean);
    function get_DisplayNaAsBlank: Boolean;
    procedure set_DisplayNaAsBlank(value: Boolean);
    function get_Name: string;
    procedure set_Name(value: string);
    function get_SizeWithWindow: Boolean;
    procedure set_SizeWithWindow(value: Boolean);
    function get_Worksheet: DNWorksheet;
    function get_Shapes: DNShapeCollection;
    function get_PrintSize: DNPrintSizeType;
    procedure set_PrintSize(value: DNPrintSizeType);
    function get_Type: DNChartType;
    procedure set_Type(value: DNChartType);
    function get_NSeries: DNSeriesCollection;
    function get_Title: DNTitle;
    function get_SubTitle: DNTitle;
    function get_PlotArea: DNPlotArea;
    function get_ChartArea: DNChartArea;
    function get_CategoryAxis: DNAxis;
    function get_ValueAxis: DNAxis;
    function get_SecondValueAxis: DNAxis;
    function get_SecondCategoryAxis: DNAxis;
    function get_SeriesAxis: DNAxis;
    function get_Legend: DNLegend;
    function get_ChartDataTable: DNChartDataTable;
    function get_ShowLegend: Boolean;
    procedure set_ShowLegend(value: Boolean);
    function get_IsRectangularCornered: Boolean;
    procedure set_IsRectangularCornered(value: Boolean);
    function get_ShowDataTable: Boolean;
    procedure set_ShowDataTable(value: Boolean);
    function get_FirstSliceAngle: Int32;
    procedure set_FirstSliceAngle(value: Int32);
    function get_GapWidth: Int32;
    procedure set_GapWidth(value: Int32);
    function get_GapDepth: Int32;
    procedure set_GapDepth(value: Int32);
    function get_Floor: DNFloor;
    function get_Walls: DNWalls;
    function get_BackWall: DNWalls;
    function get_SideWall: DNWalls;
    function get_WallsAndGridlines2D: Boolean;
    procedure set_WallsAndGridlines2D(value: Boolean);
    function get_RotationAngle: Int32;
    procedure set_RotationAngle(value: Int32);
    function get_Elevation: Int32;
    procedure set_Elevation(value: Int32);
    function get_RightAngleAxes: Boolean;
    procedure set_RightAngleAxes(value: Boolean);
    function get_AutoScaling: Boolean;
    procedure set_AutoScaling(value: Boolean);
    function get_HeightPercent: Int32;
    procedure set_HeightPercent(value: Int32);
    function get_Perspective: Int16;
    procedure set_Perspective(value: Int16);
    function get_Is3D: Boolean;
    function get_DepthPercent: Int32;
    procedure set_DepthPercent(value: Int32);
    function get_ActualChartSize: DDN.System.Drawing.DNSize;
    function get_Placement: DNPlacementType;
    procedure set_Placement(value: DNPlacementType);
    function get_PageSetup: DNPageSetup;
    function get_Line: DNLine;

  { methods } 

    function ToImage: DDN.System.Drawing.DNBitmap; overload;
    function ToImage(options: DNImageOrPrintOptions): DDN.System.Drawing.DNBitmap; overload;
    procedure ToImage(imageFile: string); overload;
    procedure ToImage(imageFile: string; imageFormat: DDN.System.Drawing.DNImageFormat); overload;
    procedure ToImage(imageFile: string; jpegQuality: Int64); overload;
    procedure ToImage(stream: DDN.mscorlib.DNStream; jpegQuality: Int64); overload;
    procedure ToImage(stream: DDN.mscorlib.DNStream; imageFormat: DDN.System.Drawing.DNImageFormat); overload;
    procedure ToPdf(fileName: string); overload;
    procedure ToPdf(fileName: string; desiredPageWidth: Single; desiredPageHeight: Single; hAlignmentType: DNPageLayoutAlignmentType; vAlignmentType: DNPageLayoutAlignmentType); overload;
    procedure ToPdf(stream: DDN.mscorlib.DNStream); overload;
    procedure ToPdf(stream: DDN.mscorlib.DNStream; desiredPageWidth: Single; desiredPageHeight: Single; hAlignmentType: DNPageLayoutAlignmentType; vAlignmentType: DNPageLayoutAlignmentType); overload;
    procedure ToImage(imageFile: string; options: DNImageOrPrintOptions); overload;
    procedure ToImage(stream: DDN.mscorlib.DNStream; options: DNImageOrPrintOptions); overload;
    function HasAxis(aixsType: DNAxisType; isPrimary: Boolean): Boolean;
    function SwitchRowColumn: Boolean;
    function GetChartDataRange: string;
    procedure SetChartDataRange(area: string; isVertical: Boolean);
    function IsChartDataChanged: Boolean;
    procedure RefreshPivotData;
    procedure Move(upperLeftRow: Int32; upperLeftColumn: Int32; lowerRightRow: Int32; lowerRightColumn: Int32);
    procedure Calculate;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Style: Int32 read get_Style write set_Style;
    property ChartObject: DNChartShape read get_ChartObject;
    property HidePivotFieldButtons: Boolean read get_HidePivotFieldButtons write set_HidePivotFieldButtons;
    property PivotOptions: DNPivotOptions read get_PivotOptions;
    property PivotSource: string read get_PivotSource write set_PivotSource;
    property PlotBy: DNPlotDataByType read get_PlotBy;
    property PlotEmptyCellsType: DNPlotEmptyCellsType read get_PlotEmptyCellsType write set_PlotEmptyCellsType;
    property PlotVisibleCells: Boolean read get_PlotVisibleCells write set_PlotVisibleCells;
    property DisplayNaAsBlank: Boolean read get_DisplayNaAsBlank write set_DisplayNaAsBlank;
    property Name: string read get_Name write set_Name;
    property SizeWithWindow: Boolean read get_SizeWithWindow write set_SizeWithWindow;
    property Worksheet: DNWorksheet read get_Worksheet;
    property Shapes: DNShapeCollection read get_Shapes;
    property PrintSize: DNPrintSizeType read get_PrintSize write set_PrintSize;
    property &Type: DNChartType read get_Type write set_Type;
    property NSeries: DNSeriesCollection read get_NSeries;
    property Title: DNTitle read get_Title;
    property SubTitle: DNTitle read get_SubTitle;
    property PlotArea: DNPlotArea read get_PlotArea;
    property ChartArea: DNChartArea read get_ChartArea;
    property CategoryAxis: DNAxis read get_CategoryAxis;
    property ValueAxis: DNAxis read get_ValueAxis;
    property SecondValueAxis: DNAxis read get_SecondValueAxis;
    property SecondCategoryAxis: DNAxis read get_SecondCategoryAxis;
    property SeriesAxis: DNAxis read get_SeriesAxis;
    property Legend: DNLegend read get_Legend;
    property ChartDataTable: DNChartDataTable read get_ChartDataTable;
    property ShowLegend: Boolean read get_ShowLegend write set_ShowLegend;
    property IsRectangularCornered: Boolean read get_IsRectangularCornered write set_IsRectangularCornered;
    property ShowDataTable: Boolean read get_ShowDataTable write set_ShowDataTable;
    property FirstSliceAngle: Int32 read get_FirstSliceAngle write set_FirstSliceAngle;
    property GapWidth: Int32 read get_GapWidth write set_GapWidth;
    property GapDepth: Int32 read get_GapDepth write set_GapDepth;
    property Floor: DNFloor read get_Floor;
    property Walls: DNWalls read get_Walls;
    property BackWall: DNWalls read get_BackWall;
    property SideWall: DNWalls read get_SideWall;
    property WallsAndGridlines2D: Boolean read get_WallsAndGridlines2D write set_WallsAndGridlines2D;
    property RotationAngle: Int32 read get_RotationAngle write set_RotationAngle;
    property Elevation: Int32 read get_Elevation write set_Elevation;
    property RightAngleAxes: Boolean read get_RightAngleAxes write set_RightAngleAxes;
    property AutoScaling: Boolean read get_AutoScaling write set_AutoScaling;
    property HeightPercent: Int32 read get_HeightPercent write set_HeightPercent;
    property Perspective: Int16 read get_Perspective write set_Perspective;
    property Is3D: Boolean read get_Is3D;
    property DepthPercent: Int32 read get_DepthPercent write set_DepthPercent;
    property ActualChartSize: DDN.System.Drawing.DNSize read get_ActualChartSize;
    property Placement: DNPlacementType read get_Placement write set_Placement;
    property PageSetup: DNPageSetup read get_PageSetup;
    property Line: DNLine read get_Line;
  end;

  TDNChart = class(TDNGenericImport<DNChartClass, DNChart>) end;

  //-------------namespace: Aspose.Cells.Charts----------------
  DNChartDataTableClass = interface(DDN.mscorlib.DNObjectClass)
  ['{CA2F420F-A4BA-5226-98C1-804325C2900E}']
  end;

  [DNTypeName('Aspose.Cells.Charts.ChartDataTable')]
  DNChartDataTable = interface(DDN.mscorlib.DNObject)
  ['{C48F443C-9480-37EB-B0BC-E9953284975F}']
  { getters & setters } 

    function get_Font: DNFont;
    function get_AutoScaleFont: Boolean;
    procedure set_AutoScaleFont(value: Boolean);
    function get_BackgroundMode: DNBackgroundMode;
    procedure set_BackgroundMode(value: DNBackgroundMode);
    function get_Background: DNBackgroundMode;
    procedure set_Background(value: DNBackgroundMode);
    function get_HasBorderHorizontal: Boolean;
    procedure set_HasBorderHorizontal(value: Boolean);
    function get_HasBorderVertical: Boolean;
    procedure set_HasBorderVertical(value: Boolean);
    function get_HasBorderOutline: Boolean;
    procedure set_HasBorderOutline(value: Boolean);
    function get_ShowLegendKey: Boolean;
    procedure set_ShowLegendKey(value: Boolean);
    function get_Border: DNLine;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Font: DNFont read get_Font;
    property AutoScaleFont: Boolean read get_AutoScaleFont write set_AutoScaleFont;
    property BackgroundMode: DNBackgroundMode read get_BackgroundMode write set_BackgroundMode;
    property Background: DNBackgroundMode read get_Background write set_Background;
    property HasBorderHorizontal: Boolean read get_HasBorderHorizontal write set_HasBorderHorizontal;
    property HasBorderVertical: Boolean read get_HasBorderVertical write set_HasBorderVertical;
    property HasBorderOutline: Boolean read get_HasBorderOutline write set_HasBorderOutline;
    property ShowLegendKey: Boolean read get_ShowLegendKey write set_ShowLegendKey;
    property Border: DNLine read get_Border;
  end;

  TDNChartDataTable = class(TDNGenericImport<DNChartDataTableClass, DNChartDataTable>) end;

  //-------------namespace: Aspose.Cells.Charts----------------
  DNChartFrameClass = interface(DDN.mscorlib.DNObjectClass)
  ['{770A28E9-4076-5CCF-9DD2-713B297F2CC1}']
  end;

  [DNTypeName('Aspose.Cells.Charts.ChartFrame')]
  DNChartFrame = interface(DDN.mscorlib.DNObject)
  ['{766EA04A-5575-34A5-A401-F9F4F122D790}']
  { getters & setters } 

    function get_IsInnerMode: Boolean;
    procedure set_IsInnerMode(value: Boolean);
    function get_Border: DNLine;
    function get_Area: DNArea;
    function get_TextFont: DNFont;
    function get_Font: DNFont;
    function get_AutoScaleFont: Boolean;
    procedure set_AutoScaleFont(value: Boolean);
    function get_BackgroundMode: DNBackgroundMode;
    procedure set_BackgroundMode(value: DNBackgroundMode);
    function get_Background: DNBackgroundMode;
    procedure set_Background(value: DNBackgroundMode);
    function get_IsAutomaticSize: Boolean;
    procedure set_IsAutomaticSize(value: Boolean);
    function get_X: Int32;
    procedure set_X(value: Int32);
    function get_Y: Int32;
    procedure set_Y(value: Int32);
    function get_Height: Int32;
    procedure set_Height(value: Int32);
    function get_Width: Int32;
    procedure set_Width(value: Int32);
    function get_Shadow: Boolean;
    function get_ShapeProperties: DNShapePropertyCollection;
    function get_IsDefaultPosBeSet: Boolean;
    function get_DefaultX: Int32;
    function get_DefaultY: Int32;
    function get_DefaultWidth: Int32;
    function get_DefaultHeight: Int32;

  { methods } 

    procedure SetPositionAuto;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property IsInnerMode: Boolean read get_IsInnerMode write set_IsInnerMode;
    property Border: DNLine read get_Border;
    property Area: DNArea read get_Area;
    property TextFont: DNFont read get_TextFont;
    property Font: DNFont read get_Font;
    property AutoScaleFont: Boolean read get_AutoScaleFont write set_AutoScaleFont;
    property BackgroundMode: DNBackgroundMode read get_BackgroundMode write set_BackgroundMode;
    property Background: DNBackgroundMode read get_Background write set_Background;
    property IsAutomaticSize: Boolean read get_IsAutomaticSize write set_IsAutomaticSize;
    property X: Int32 read get_X write set_X;
    property Y: Int32 read get_Y write set_Y;
    property Height: Int32 read get_Height write set_Height;
    property Width: Int32 read get_Width write set_Width;
    property Shadow: Boolean read get_Shadow;
    property ShapeProperties: DNShapePropertyCollection read get_ShapeProperties;
    property IsDefaultPosBeSet: Boolean read get_IsDefaultPosBeSet;
    property DefaultX: Int32 read get_DefaultX;
    property DefaultY: Int32 read get_DefaultY;
    property DefaultWidth: Int32 read get_DefaultWidth;
    property DefaultHeight: Int32 read get_DefaultHeight;
  end;

  TDNChartFrame = class(TDNGenericImport<DNChartFrameClass, DNChartFrame>) end;

  //-------------namespace: Aspose.Cells.Charts----------------
  DNChartAreaClass = interface(DNChartFrameClass)
  ['{D5FCECA9-F6B4-5604-A9B5-0AC6B0C3355F}']
  end;

  [DNTypeName('Aspose.Cells.Charts.ChartArea')]
  DNChartArea = interface(DNChartFrame)
  ['{9015F893-EC7A-364A-8AA8-F3FF14FB676E}']
  { getters & setters } 

    function get_X: Int32;
    procedure set_X(value: Int32);
    function get_Y: Int32;
    procedure set_Y(value: Int32);
    function get_Height: Int32;
    procedure set_Height(value: Int32);
    function get_Width: Int32;
    procedure set_Width(value: Int32);
    function get_Font: DNFont;
    function get_IsInnerMode: Boolean;
    procedure set_IsInnerMode(value: Boolean);
    function get_Border: DNLine;
    function get_Area: DNArea;
    function get_TextFont: DNFont;
    function get_AutoScaleFont: Boolean;
    procedure set_AutoScaleFont(value: Boolean);
    function get_BackgroundMode: DNBackgroundMode;
    procedure set_BackgroundMode(value: DNBackgroundMode);
    function get_Background: DNBackgroundMode;
    procedure set_Background(value: DNBackgroundMode);
    function get_IsAutomaticSize: Boolean;
    procedure set_IsAutomaticSize(value: Boolean);
    function get_Shadow: Boolean;
    function get_ShapeProperties: DNShapePropertyCollection;
    function get_IsDefaultPosBeSet: Boolean;
    function get_DefaultX: Int32;
    function get_DefaultY: Int32;
    function get_DefaultWidth: Int32;
    function get_DefaultHeight: Int32;

  { methods } 

    procedure SetPositionAuto;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property X: Int32 read get_X write set_X;
    property Y: Int32 read get_Y write set_Y;
    property Height: Int32 read get_Height write set_Height;
    property Width: Int32 read get_Width write set_Width;
    property Font: DNFont read get_Font;
    property IsInnerMode: Boolean read get_IsInnerMode write set_IsInnerMode;
    property Border: DNLine read get_Border;
    property Area: DNArea read get_Area;
    property TextFont: DNFont read get_TextFont;
    property AutoScaleFont: Boolean read get_AutoScaleFont write set_AutoScaleFont;
    property BackgroundMode: DNBackgroundMode read get_BackgroundMode write set_BackgroundMode;
    property Background: DNBackgroundMode read get_Background write set_Background;
    property IsAutomaticSize: Boolean read get_IsAutomaticSize write set_IsAutomaticSize;
    property Shadow: Boolean read get_Shadow;
    property ShapeProperties: DNShapePropertyCollection read get_ShapeProperties;
    property IsDefaultPosBeSet: Boolean read get_IsDefaultPosBeSet;
    property DefaultX: Int32 read get_DefaultX;
    property DefaultY: Int32 read get_DefaultY;
    property DefaultWidth: Int32 read get_DefaultWidth;
    property DefaultHeight: Int32 read get_DefaultHeight;
  end;

  TDNChartArea = class(TDNGenericImport<DNChartAreaClass, DNChartArea>) end;

  //-------------namespace: Aspose.Cells.Charts----------------
  DNChartTextFrameClass = interface(DNChartFrameClass)
  ['{E16A3156-507E-59E0-AFF8-8C653567F172}']
  end;

  [DNTypeName('Aspose.Cells.Charts.ChartTextFrame')]
  DNChartTextFrame = interface(DNChartFrame)
  ['{E4A9C2AF-DE51-3607-B576-E8CC687D1831}']
  { getters & setters } 

    function get_IsAutoText: Boolean;
    procedure set_IsAutoText(value: Boolean);
    function get_IsDeleted: Boolean;
    procedure set_IsDeleted(value: Boolean);
    function get_TextHorizontalAlignment: DNTextAlignmentType;
    procedure set_TextHorizontalAlignment(value: DNTextAlignmentType);
    function get_TextVerticalAlignment: DNTextAlignmentType;
    procedure set_TextVerticalAlignment(value: DNTextAlignmentType);
    function get_RotationAngle: Int32;
    procedure set_RotationAngle(value: Int32);
    function get_Text: string;
    procedure set_Text(value: string);
    function get_LinkedSource: string;
    procedure set_LinkedSource(value: string);
    function get_TextDirection: DNTextDirectionType;
    procedure set_TextDirection(value: DNTextDirectionType);
    function get_ReadingOrder: DNTextDirectionType;
    procedure set_ReadingOrder(value: DNTextDirectionType);
    function get_DirectionType: DNChartTextDirectionType;
    procedure set_DirectionType(value: DNChartTextDirectionType);
    function get_IsTextWrapped: Boolean;
    procedure set_IsTextWrapped(value: Boolean);
    function get_IsResizeShapeToFitText: Boolean;
    procedure set_IsResizeShapeToFitText(value: Boolean);
    function get_IsInnerMode: Boolean;
    procedure set_IsInnerMode(value: Boolean);
    function get_Border: DNLine;
    function get_Area: DNArea;
    function get_TextFont: DNFont;
    function get_Font: DNFont;
    function get_AutoScaleFont: Boolean;
    procedure set_AutoScaleFont(value: Boolean);
    function get_BackgroundMode: DNBackgroundMode;
    procedure set_BackgroundMode(value: DNBackgroundMode);
    function get_Background: DNBackgroundMode;
    procedure set_Background(value: DNBackgroundMode);
    function get_IsAutomaticSize: Boolean;
    procedure set_IsAutomaticSize(value: Boolean);
    function get_X: Int32;
    procedure set_X(value: Int32);
    function get_Y: Int32;
    procedure set_Y(value: Int32);
    function get_Height: Int32;
    procedure set_Height(value: Int32);
    function get_Width: Int32;
    procedure set_Width(value: Int32);
    function get_Shadow: Boolean;
    function get_ShapeProperties: DNShapePropertyCollection;
    function get_IsDefaultPosBeSet: Boolean;
    function get_DefaultX: Int32;
    function get_DefaultY: Int32;
    function get_DefaultWidth: Int32;
    function get_DefaultHeight: Int32;

  { methods } 

    function Characters(startIndex: Int32; length: Int32): DNFontSetting;
    procedure SetPositionAuto;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property IsAutoText: Boolean read get_IsAutoText write set_IsAutoText;
    property IsDeleted: Boolean read get_IsDeleted write set_IsDeleted;
    property TextHorizontalAlignment: DNTextAlignmentType read get_TextHorizontalAlignment write set_TextHorizontalAlignment;
    property TextVerticalAlignment: DNTextAlignmentType read get_TextVerticalAlignment write set_TextVerticalAlignment;
    property RotationAngle: Int32 read get_RotationAngle write set_RotationAngle;
    property Text: string read get_Text write set_Text;
    property LinkedSource: string read get_LinkedSource write set_LinkedSource;
    property TextDirection: DNTextDirectionType read get_TextDirection write set_TextDirection;
    property ReadingOrder: DNTextDirectionType read get_ReadingOrder write set_ReadingOrder;
    property DirectionType: DNChartTextDirectionType read get_DirectionType write set_DirectionType;
    property IsTextWrapped: Boolean read get_IsTextWrapped write set_IsTextWrapped;
    property IsResizeShapeToFitText: Boolean read get_IsResizeShapeToFitText write set_IsResizeShapeToFitText;
    property IsInnerMode: Boolean read get_IsInnerMode write set_IsInnerMode;
    property Border: DNLine read get_Border;
    property Area: DNArea read get_Area;
    property TextFont: DNFont read get_TextFont;
    property Font: DNFont read get_Font;
    property AutoScaleFont: Boolean read get_AutoScaleFont write set_AutoScaleFont;
    property BackgroundMode: DNBackgroundMode read get_BackgroundMode write set_BackgroundMode;
    property Background: DNBackgroundMode read get_Background write set_Background;
    property IsAutomaticSize: Boolean read get_IsAutomaticSize write set_IsAutomaticSize;
    property X: Int32 read get_X write set_X;
    property Y: Int32 read get_Y write set_Y;
    property Height: Int32 read get_Height write set_Height;
    property Width: Int32 read get_Width write set_Width;
    property Shadow: Boolean read get_Shadow;
    property ShapeProperties: DNShapePropertyCollection read get_ShapeProperties;
    property IsDefaultPosBeSet: Boolean read get_IsDefaultPosBeSet;
    property DefaultX: Int32 read get_DefaultX;
    property DefaultY: Int32 read get_DefaultY;
    property DefaultWidth: Int32 read get_DefaultWidth;
    property DefaultHeight: Int32 read get_DefaultHeight;
  end;

  TDNChartTextFrame = class(TDNGenericImport<DNChartTextFrameClass, DNChartTextFrame>) end;

  //-------------namespace: Aspose.Cells.Charts----------------
  DNDataLabelsClass = interface(DNChartTextFrameClass)
  ['{92033AD8-3CDD-5B1A-A7F1-4432F1A01978}']
  end;

  [DNTypeName('Aspose.Cells.Charts.DataLabels')]
  DNDataLabels = interface(DNChartTextFrame)
  ['{E2736172-2CC8-33A9-BED1-76A88806A320}']
  { getters & setters } 

    function get_Border: DNLine;
    function get_Area: DNArea;
    function get_IsAutoText: Boolean;
    procedure set_IsAutoText(value: Boolean);
    function get_DirectionType: DNChartTextDirectionType;
    procedure set_DirectionType(value: DNChartTextDirectionType);
    function get_Text: string;
    procedure set_Text(value: string);
    function get_IsTextWrapped: Boolean;
    procedure set_IsTextWrapped(value: Boolean);
    function get_LinkedSource: string;
    procedure set_LinkedSource(value: string);
    function get_BackgroundMode: DNBackgroundMode;
    procedure set_BackgroundMode(value: DNBackgroundMode);
    function get_ShowValue: Boolean;
    procedure set_ShowValue(value: Boolean);
    function get_ShowCellRange: Boolean;
    procedure set_ShowCellRange(value: Boolean);
    function get_ShowPercentage: Boolean;
    procedure set_ShowPercentage(value: Boolean);
    function get_ShowBubbleSize: Boolean;
    procedure set_ShowBubbleSize(value: Boolean);
    function get_ShowCategoryName: Boolean;
    procedure set_ShowCategoryName(value: Boolean);
    function get_ShowSeriesName: Boolean;
    procedure set_ShowSeriesName(value: Boolean);
    function get_ShowLegendKey: Boolean;
    procedure set_ShowLegendKey(value: Boolean);
    function get_NumberFormat: string;
    procedure set_NumberFormat(value: string);
    function get_Number: Int32;
    procedure set_Number(value: Int32);
    function get_NumberFormatLinked: Boolean;
    procedure set_NumberFormatLinked(value: Boolean);
    function get_Font: DNFont;
    function get_Separator: DNDataLablesSeparatorType;
    procedure set_Separator(value: DNDataLablesSeparatorType);
    function get_SeparatorType: DNDataLabelsSeparatorType;
    procedure set_SeparatorType(value: DNDataLabelsSeparatorType);
    function get_SeparatorValue: string;
    procedure set_SeparatorValue(value: string);
    function get_Position: DNLabelPositionType;
    procedure set_Position(value: DNLabelPositionType);
    function get_ShapeType: DNDataLabelShapeType;
    procedure set_ShapeType(value: DNDataLabelShapeType);
    function get_IsDeleted: Boolean;
    procedure set_IsDeleted(value: Boolean);
    function get_TextHorizontalAlignment: DNTextAlignmentType;
    procedure set_TextHorizontalAlignment(value: DNTextAlignmentType);
    function get_TextVerticalAlignment: DNTextAlignmentType;
    procedure set_TextVerticalAlignment(value: DNTextAlignmentType);
    function get_RotationAngle: Int32;
    procedure set_RotationAngle(value: Int32);
    function get_TextDirection: DNTextDirectionType;
    procedure set_TextDirection(value: DNTextDirectionType);
    function get_ReadingOrder: DNTextDirectionType;
    procedure set_ReadingOrder(value: DNTextDirectionType);
    function get_IsResizeShapeToFitText: Boolean;
    procedure set_IsResizeShapeToFitText(value: Boolean);
    function get_IsInnerMode: Boolean;
    procedure set_IsInnerMode(value: Boolean);
    function get_TextFont: DNFont;
    function get_AutoScaleFont: Boolean;
    procedure set_AutoScaleFont(value: Boolean);
    function get_Background: DNBackgroundMode;
    procedure set_Background(value: DNBackgroundMode);
    function get_IsAutomaticSize: Boolean;
    procedure set_IsAutomaticSize(value: Boolean);
    function get_X: Int32;
    procedure set_X(value: Int32);
    function get_Y: Int32;
    procedure set_Y(value: Int32);
    function get_Height: Int32;
    procedure set_Height(value: Int32);
    function get_Width: Int32;
    procedure set_Width(value: Int32);
    function get_Shadow: Boolean;
    function get_ShapeProperties: DNShapePropertyCollection;
    function get_IsDefaultPosBeSet: Boolean;
    function get_DefaultX: Int32;
    function get_DefaultY: Int32;
    function get_DefaultWidth: Int32;
    function get_DefaultHeight: Int32;

  { methods } 

    function Characters(startIndex: Int32; length: Int32): DNFontSetting;
    procedure SetPositionAuto;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Border: DNLine read get_Border;
    property Area: DNArea read get_Area;
    property IsAutoText: Boolean read get_IsAutoText write set_IsAutoText;
    property DirectionType: DNChartTextDirectionType read get_DirectionType write set_DirectionType;
    property Text: string read get_Text write set_Text;
    property IsTextWrapped: Boolean read get_IsTextWrapped write set_IsTextWrapped;
    property LinkedSource: string read get_LinkedSource write set_LinkedSource;
    property BackgroundMode: DNBackgroundMode read get_BackgroundMode write set_BackgroundMode;
    property ShowValue: Boolean read get_ShowValue write set_ShowValue;
    property ShowCellRange: Boolean read get_ShowCellRange write set_ShowCellRange;
    property ShowPercentage: Boolean read get_ShowPercentage write set_ShowPercentage;
    property ShowBubbleSize: Boolean read get_ShowBubbleSize write set_ShowBubbleSize;
    property ShowCategoryName: Boolean read get_ShowCategoryName write set_ShowCategoryName;
    property ShowSeriesName: Boolean read get_ShowSeriesName write set_ShowSeriesName;
    property ShowLegendKey: Boolean read get_ShowLegendKey write set_ShowLegendKey;
    property NumberFormat: string read get_NumberFormat write set_NumberFormat;
    property Number: Int32 read get_Number write set_Number;
    property NumberFormatLinked: Boolean read get_NumberFormatLinked write set_NumberFormatLinked;
    property Font: DNFont read get_Font;
    property Separator: DNDataLablesSeparatorType read get_Separator write set_Separator;
    property SeparatorType: DNDataLabelsSeparatorType read get_SeparatorType write set_SeparatorType;
    property SeparatorValue: string read get_SeparatorValue write set_SeparatorValue;
    property Position: DNLabelPositionType read get_Position write set_Position;
    property ShapeType: DNDataLabelShapeType read get_ShapeType write set_ShapeType;
    property IsDeleted: Boolean read get_IsDeleted write set_IsDeleted;
    property TextHorizontalAlignment: DNTextAlignmentType read get_TextHorizontalAlignment write set_TextHorizontalAlignment;
    property TextVerticalAlignment: DNTextAlignmentType read get_TextVerticalAlignment write set_TextVerticalAlignment;
    property RotationAngle: Int32 read get_RotationAngle write set_RotationAngle;
    property TextDirection: DNTextDirectionType read get_TextDirection write set_TextDirection;
    property ReadingOrder: DNTextDirectionType read get_ReadingOrder write set_ReadingOrder;
    property IsResizeShapeToFitText: Boolean read get_IsResizeShapeToFitText write set_IsResizeShapeToFitText;
    property IsInnerMode: Boolean read get_IsInnerMode write set_IsInnerMode;
    property TextFont: DNFont read get_TextFont;
    property AutoScaleFont: Boolean read get_AutoScaleFont write set_AutoScaleFont;
    property Background: DNBackgroundMode read get_Background write set_Background;
    property IsAutomaticSize: Boolean read get_IsAutomaticSize write set_IsAutomaticSize;
    property X: Int32 read get_X write set_X;
    property Y: Int32 read get_Y write set_Y;
    property Height: Int32 read get_Height write set_Height;
    property Width: Int32 read get_Width write set_Width;
    property Shadow: Boolean read get_Shadow;
    property ShapeProperties: DNShapePropertyCollection read get_ShapeProperties;
    property IsDefaultPosBeSet: Boolean read get_IsDefaultPosBeSet;
    property DefaultX: Int32 read get_DefaultX;
    property DefaultY: Int32 read get_DefaultY;
    property DefaultWidth: Int32 read get_DefaultWidth;
    property DefaultHeight: Int32 read get_DefaultHeight;
  end;

  TDNDataLabels = class(TDNGenericImport<DNDataLabelsClass, DNDataLabels>) end;

  //-------------namespace: Aspose.Cells.Charts----------------
  DNDisplayUnitLabelClass = interface(DNChartTextFrameClass)
  ['{6C445F4F-0F9E-5550-B81F-E6D448051353}']
  end;

  [DNTypeName('Aspose.Cells.Charts.DisplayUnitLabel')]
  DNDisplayUnitLabel = interface(DNChartTextFrame)
  ['{200EE937-F507-36FB-98CA-B838B3CA1AB2}']
  { getters & setters } 

    function get_Text: string;
    procedure set_Text(value: string);
    function get_Font: DNFont;
    function get_AutoScaleFont: Boolean;
    procedure set_AutoScaleFont(value: Boolean);
    function get_IsAutoText: Boolean;
    procedure set_IsAutoText(value: Boolean);
    function get_IsDeleted: Boolean;
    procedure set_IsDeleted(value: Boolean);
    function get_TextHorizontalAlignment: DNTextAlignmentType;
    procedure set_TextHorizontalAlignment(value: DNTextAlignmentType);
    function get_TextVerticalAlignment: DNTextAlignmentType;
    procedure set_TextVerticalAlignment(value: DNTextAlignmentType);
    function get_RotationAngle: Int32;
    procedure set_RotationAngle(value: Int32);
    function get_LinkedSource: string;
    procedure set_LinkedSource(value: string);
    function get_TextDirection: DNTextDirectionType;
    procedure set_TextDirection(value: DNTextDirectionType);
    function get_ReadingOrder: DNTextDirectionType;
    procedure set_ReadingOrder(value: DNTextDirectionType);
    function get_DirectionType: DNChartTextDirectionType;
    procedure set_DirectionType(value: DNChartTextDirectionType);
    function get_IsTextWrapped: Boolean;
    procedure set_IsTextWrapped(value: Boolean);
    function get_IsResizeShapeToFitText: Boolean;
    procedure set_IsResizeShapeToFitText(value: Boolean);
    function get_IsInnerMode: Boolean;
    procedure set_IsInnerMode(value: Boolean);
    function get_Border: DNLine;
    function get_Area: DNArea;
    function get_TextFont: DNFont;
    function get_BackgroundMode: DNBackgroundMode;
    procedure set_BackgroundMode(value: DNBackgroundMode);
    function get_Background: DNBackgroundMode;
    procedure set_Background(value: DNBackgroundMode);
    function get_IsAutomaticSize: Boolean;
    procedure set_IsAutomaticSize(value: Boolean);
    function get_X: Int32;
    procedure set_X(value: Int32);
    function get_Y: Int32;
    procedure set_Y(value: Int32);
    function get_Height: Int32;
    procedure set_Height(value: Int32);
    function get_Width: Int32;
    procedure set_Width(value: Int32);
    function get_Shadow: Boolean;
    function get_ShapeProperties: DNShapePropertyCollection;
    function get_IsDefaultPosBeSet: Boolean;
    function get_DefaultX: Int32;
    function get_DefaultY: Int32;
    function get_DefaultWidth: Int32;
    function get_DefaultHeight: Int32;

  { methods } 

    function Characters(startIndex: Int32; length: Int32): DNFontSetting;
    procedure SetPositionAuto;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Text: string read get_Text write set_Text;
    property Font: DNFont read get_Font;
    property AutoScaleFont: Boolean read get_AutoScaleFont write set_AutoScaleFont;
    property IsAutoText: Boolean read get_IsAutoText write set_IsAutoText;
    property IsDeleted: Boolean read get_IsDeleted write set_IsDeleted;
    property TextHorizontalAlignment: DNTextAlignmentType read get_TextHorizontalAlignment write set_TextHorizontalAlignment;
    property TextVerticalAlignment: DNTextAlignmentType read get_TextVerticalAlignment write set_TextVerticalAlignment;
    property RotationAngle: Int32 read get_RotationAngle write set_RotationAngle;
    property LinkedSource: string read get_LinkedSource write set_LinkedSource;
    property TextDirection: DNTextDirectionType read get_TextDirection write set_TextDirection;
    property ReadingOrder: DNTextDirectionType read get_ReadingOrder write set_ReadingOrder;
    property DirectionType: DNChartTextDirectionType read get_DirectionType write set_DirectionType;
    property IsTextWrapped: Boolean read get_IsTextWrapped write set_IsTextWrapped;
    property IsResizeShapeToFitText: Boolean read get_IsResizeShapeToFitText write set_IsResizeShapeToFitText;
    property IsInnerMode: Boolean read get_IsInnerMode write set_IsInnerMode;
    property Border: DNLine read get_Border;
    property Area: DNArea read get_Area;
    property TextFont: DNFont read get_TextFont;
    property BackgroundMode: DNBackgroundMode read get_BackgroundMode write set_BackgroundMode;
    property Background: DNBackgroundMode read get_Background write set_Background;
    property IsAutomaticSize: Boolean read get_IsAutomaticSize write set_IsAutomaticSize;
    property X: Int32 read get_X write set_X;
    property Y: Int32 read get_Y write set_Y;
    property Height: Int32 read get_Height write set_Height;
    property Width: Int32 read get_Width write set_Width;
    property Shadow: Boolean read get_Shadow;
    property ShapeProperties: DNShapePropertyCollection read get_ShapeProperties;
    property IsDefaultPosBeSet: Boolean read get_IsDefaultPosBeSet;
    property DefaultX: Int32 read get_DefaultX;
    property DefaultY: Int32 read get_DefaultY;
    property DefaultWidth: Int32 read get_DefaultWidth;
    property DefaultHeight: Int32 read get_DefaultHeight;
  end;

  TDNDisplayUnitLabel = class(TDNGenericImport<DNDisplayUnitLabelClass, DNDisplayUnitLabel>) end;

  //-------------namespace: Aspose.Cells.Charts----------------
  DNLegendClass = interface(DNChartTextFrameClass)
  ['{A11700CE-1F90-5E78-8104-8A4F2044D173}']
  end;

  [DNTypeName('Aspose.Cells.Charts.Legend')]
  DNLegend = interface(DNChartTextFrame)
  ['{25EB655F-3C68-382C-9C27-30243E30C2ED}']
  { getters & setters } 

    function get_Position: DNLegendPositionType;
    procedure set_Position(value: DNLegendPositionType);
    function get_LegendEntries: DNLegendEntryCollection;
    function get_LegendEntriesLabels: DDN.mscorlib.DNArrayList;
    function get_IsOverLay: Boolean;
    procedure set_IsOverLay(value: Boolean);
    function get_IsAutoText: Boolean;
    procedure set_IsAutoText(value: Boolean);
    function get_IsDeleted: Boolean;
    procedure set_IsDeleted(value: Boolean);
    function get_TextHorizontalAlignment: DNTextAlignmentType;
    procedure set_TextHorizontalAlignment(value: DNTextAlignmentType);
    function get_TextVerticalAlignment: DNTextAlignmentType;
    procedure set_TextVerticalAlignment(value: DNTextAlignmentType);
    function get_RotationAngle: Int32;
    procedure set_RotationAngle(value: Int32);
    function get_Text: string;
    procedure set_Text(value: string);
    function get_LinkedSource: string;
    procedure set_LinkedSource(value: string);
    function get_TextDirection: DNTextDirectionType;
    procedure set_TextDirection(value: DNTextDirectionType);
    function get_ReadingOrder: DNTextDirectionType;
    procedure set_ReadingOrder(value: DNTextDirectionType);
    function get_DirectionType: DNChartTextDirectionType;
    procedure set_DirectionType(value: DNChartTextDirectionType);
    function get_IsTextWrapped: Boolean;
    procedure set_IsTextWrapped(value: Boolean);
    function get_IsResizeShapeToFitText: Boolean;
    procedure set_IsResizeShapeToFitText(value: Boolean);
    function get_IsInnerMode: Boolean;
    procedure set_IsInnerMode(value: Boolean);
    function get_Border: DNLine;
    function get_Area: DNArea;
    function get_TextFont: DNFont;
    function get_Font: DNFont;
    function get_AutoScaleFont: Boolean;
    procedure set_AutoScaleFont(value: Boolean);
    function get_BackgroundMode: DNBackgroundMode;
    procedure set_BackgroundMode(value: DNBackgroundMode);
    function get_Background: DNBackgroundMode;
    procedure set_Background(value: DNBackgroundMode);
    function get_IsAutomaticSize: Boolean;
    procedure set_IsAutomaticSize(value: Boolean);
    function get_X: Int32;
    procedure set_X(value: Int32);
    function get_Y: Int32;
    procedure set_Y(value: Int32);
    function get_Height: Int32;
    procedure set_Height(value: Int32);
    function get_Width: Int32;
    procedure set_Width(value: Int32);
    function get_Shadow: Boolean;
    function get_ShapeProperties: DNShapePropertyCollection;
    function get_IsDefaultPosBeSet: Boolean;
    function get_DefaultX: Int32;
    function get_DefaultY: Int32;
    function get_DefaultWidth: Int32;
    function get_DefaultHeight: Int32;

  { methods } 

    function Characters(startIndex: Int32; length: Int32): DNFontSetting;
    procedure SetPositionAuto;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Position: DNLegendPositionType read get_Position write set_Position;
    property LegendEntries: DNLegendEntryCollection read get_LegendEntries;
    property LegendEntriesLabels: DDN.mscorlib.DNArrayList read get_LegendEntriesLabels;
    property IsOverLay: Boolean read get_IsOverLay write set_IsOverLay;
    property IsAutoText: Boolean read get_IsAutoText write set_IsAutoText;
    property IsDeleted: Boolean read get_IsDeleted write set_IsDeleted;
    property TextHorizontalAlignment: DNTextAlignmentType read get_TextHorizontalAlignment write set_TextHorizontalAlignment;
    property TextVerticalAlignment: DNTextAlignmentType read get_TextVerticalAlignment write set_TextVerticalAlignment;
    property RotationAngle: Int32 read get_RotationAngle write set_RotationAngle;
    property Text: string read get_Text write set_Text;
    property LinkedSource: string read get_LinkedSource write set_LinkedSource;
    property TextDirection: DNTextDirectionType read get_TextDirection write set_TextDirection;
    property ReadingOrder: DNTextDirectionType read get_ReadingOrder write set_ReadingOrder;
    property DirectionType: DNChartTextDirectionType read get_DirectionType write set_DirectionType;
    property IsTextWrapped: Boolean read get_IsTextWrapped write set_IsTextWrapped;
    property IsResizeShapeToFitText: Boolean read get_IsResizeShapeToFitText write set_IsResizeShapeToFitText;
    property IsInnerMode: Boolean read get_IsInnerMode write set_IsInnerMode;
    property Border: DNLine read get_Border;
    property Area: DNArea read get_Area;
    property TextFont: DNFont read get_TextFont;
    property Font: DNFont read get_Font;
    property AutoScaleFont: Boolean read get_AutoScaleFont write set_AutoScaleFont;
    property BackgroundMode: DNBackgroundMode read get_BackgroundMode write set_BackgroundMode;
    property Background: DNBackgroundMode read get_Background write set_Background;
    property IsAutomaticSize: Boolean read get_IsAutomaticSize write set_IsAutomaticSize;
    property X: Int32 read get_X write set_X;
    property Y: Int32 read get_Y write set_Y;
    property Height: Int32 read get_Height write set_Height;
    property Width: Int32 read get_Width write set_Width;
    property Shadow: Boolean read get_Shadow;
    property ShapeProperties: DNShapePropertyCollection read get_ShapeProperties;
    property IsDefaultPosBeSet: Boolean read get_IsDefaultPosBeSet;
    property DefaultX: Int32 read get_DefaultX;
    property DefaultY: Int32 read get_DefaultY;
    property DefaultWidth: Int32 read get_DefaultWidth;
    property DefaultHeight: Int32 read get_DefaultHeight;
  end;

  TDNLegend = class(TDNGenericImport<DNLegendClass, DNLegend>) end;

  //-------------namespace: Aspose.Cells.Charts----------------
  DNTitleClass = interface(DNChartTextFrameClass)
  ['{7DC9C812-6B11-5C6A-A67F-077C3F676E52}']
  end;

  [DNTypeName('Aspose.Cells.Charts.Title')]
  DNTitle = interface(DNChartTextFrame)
  ['{5C911F59-81B3-3362-984D-9E967A46E06C}']
  { getters & setters } 

    function get_Text: string;
    procedure set_Text(value: string);
    function get_IsVisible: Boolean;
    procedure set_IsVisible(value: Boolean);
    function get_X: Int32;
    procedure set_X(value: Int32);
    function get_Y: Int32;
    procedure set_Y(value: Int32);
    function get_OverLay: Boolean;
    procedure set_OverLay(value: Boolean);
    function get_IsAutoText: Boolean;
    procedure set_IsAutoText(value: Boolean);
    function get_IsDeleted: Boolean;
    procedure set_IsDeleted(value: Boolean);
    function get_TextHorizontalAlignment: DNTextAlignmentType;
    procedure set_TextHorizontalAlignment(value: DNTextAlignmentType);
    function get_TextVerticalAlignment: DNTextAlignmentType;
    procedure set_TextVerticalAlignment(value: DNTextAlignmentType);
    function get_RotationAngle: Int32;
    procedure set_RotationAngle(value: Int32);
    function get_LinkedSource: string;
    procedure set_LinkedSource(value: string);
    function get_TextDirection: DNTextDirectionType;
    procedure set_TextDirection(value: DNTextDirectionType);
    function get_ReadingOrder: DNTextDirectionType;
    procedure set_ReadingOrder(value: DNTextDirectionType);
    function get_DirectionType: DNChartTextDirectionType;
    procedure set_DirectionType(value: DNChartTextDirectionType);
    function get_IsTextWrapped: Boolean;
    procedure set_IsTextWrapped(value: Boolean);
    function get_IsResizeShapeToFitText: Boolean;
    procedure set_IsResizeShapeToFitText(value: Boolean);
    function get_IsInnerMode: Boolean;
    procedure set_IsInnerMode(value: Boolean);
    function get_Border: DNLine;
    function get_Area: DNArea;
    function get_TextFont: DNFont;
    function get_Font: DNFont;
    function get_AutoScaleFont: Boolean;
    procedure set_AutoScaleFont(value: Boolean);
    function get_BackgroundMode: DNBackgroundMode;
    procedure set_BackgroundMode(value: DNBackgroundMode);
    function get_Background: DNBackgroundMode;
    procedure set_Background(value: DNBackgroundMode);
    function get_IsAutomaticSize: Boolean;
    procedure set_IsAutomaticSize(value: Boolean);
    function get_Height: Int32;
    procedure set_Height(value: Int32);
    function get_Width: Int32;
    procedure set_Width(value: Int32);
    function get_Shadow: Boolean;
    function get_ShapeProperties: DNShapePropertyCollection;
    function get_IsDefaultPosBeSet: Boolean;
    function get_DefaultX: Int32;
    function get_DefaultY: Int32;
    function get_DefaultWidth: Int32;
    function get_DefaultHeight: Int32;

  { methods } 

    function Characters: TArray<DNFontSetting>; overload;
    function Characters(startIndex: Int32; length: Int32): DNFontSetting; overload;
    procedure SetPositionAuto;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Text: string read get_Text write set_Text;
    property IsVisible: Boolean read get_IsVisible write set_IsVisible;
    property X: Int32 read get_X write set_X;
    property Y: Int32 read get_Y write set_Y;
    property OverLay: Boolean read get_OverLay write set_OverLay;
    property IsAutoText: Boolean read get_IsAutoText write set_IsAutoText;
    property IsDeleted: Boolean read get_IsDeleted write set_IsDeleted;
    property TextHorizontalAlignment: DNTextAlignmentType read get_TextHorizontalAlignment write set_TextHorizontalAlignment;
    property TextVerticalAlignment: DNTextAlignmentType read get_TextVerticalAlignment write set_TextVerticalAlignment;
    property RotationAngle: Int32 read get_RotationAngle write set_RotationAngle;
    property LinkedSource: string read get_LinkedSource write set_LinkedSource;
    property TextDirection: DNTextDirectionType read get_TextDirection write set_TextDirection;
    property ReadingOrder: DNTextDirectionType read get_ReadingOrder write set_ReadingOrder;
    property DirectionType: DNChartTextDirectionType read get_DirectionType write set_DirectionType;
    property IsTextWrapped: Boolean read get_IsTextWrapped write set_IsTextWrapped;
    property IsResizeShapeToFitText: Boolean read get_IsResizeShapeToFitText write set_IsResizeShapeToFitText;
    property IsInnerMode: Boolean read get_IsInnerMode write set_IsInnerMode;
    property Border: DNLine read get_Border;
    property Area: DNArea read get_Area;
    property TextFont: DNFont read get_TextFont;
    property Font: DNFont read get_Font;
    property AutoScaleFont: Boolean read get_AutoScaleFont write set_AutoScaleFont;
    property BackgroundMode: DNBackgroundMode read get_BackgroundMode write set_BackgroundMode;
    property Background: DNBackgroundMode read get_Background write set_Background;
    property IsAutomaticSize: Boolean read get_IsAutomaticSize write set_IsAutomaticSize;
    property Height: Int32 read get_Height write set_Height;
    property Width: Int32 read get_Width write set_Width;
    property Shadow: Boolean read get_Shadow;
    property ShapeProperties: DNShapePropertyCollection read get_ShapeProperties;
    property IsDefaultPosBeSet: Boolean read get_IsDefaultPosBeSet;
    property DefaultX: Int32 read get_DefaultX;
    property DefaultY: Int32 read get_DefaultY;
    property DefaultWidth: Int32 read get_DefaultWidth;
    property DefaultHeight: Int32 read get_DefaultHeight;
  end;

  TDNTitle = class(TDNGenericImport<DNTitleClass, DNTitle>) end;

  //-------------namespace: Aspose.Cells.Charts----------------
  DNPlotAreaClass = interface(DNChartFrameClass)
  ['{532BE37C-09AC-5838-BC0A-CE4A135F371C}']
  end;

  [DNTypeName('Aspose.Cells.Charts.PlotArea')]
  DNPlotArea = interface(DNChartFrame)
  ['{C7D276A4-5D70-3297-8EA1-3F904DBF9B2C}']
  { getters & setters } 

    function get_X: Int32;
    procedure set_X(value: Int32);
    function get_Y: Int32;
    procedure set_Y(value: Int32);
    function get_Height: Int32;
    procedure set_Height(value: Int32);
    function get_Width: Int32;
    procedure set_Width(value: Int32);
    function get_InnerX: Int32;
    procedure set_InnerX(value: Int32);
    function get_InnerY: Int32;
    procedure set_InnerY(value: Int32);
    function get_InnerHeight: Int32;
    procedure set_InnerHeight(value: Int32);
    function get_InnerWidth: Int32;
    procedure set_InnerWidth(value: Int32);
    function get_IsAutomaticSize: Boolean;
    procedure set_IsAutomaticSize(value: Boolean);
    function get_IsInnerMode: Boolean;
    procedure set_IsInnerMode(value: Boolean);
    function get_Border: DNLine;
    function get_Area: DNArea;
    function get_TextFont: DNFont;
    function get_Font: DNFont;
    function get_AutoScaleFont: Boolean;
    procedure set_AutoScaleFont(value: Boolean);
    function get_BackgroundMode: DNBackgroundMode;
    procedure set_BackgroundMode(value: DNBackgroundMode);
    function get_Background: DNBackgroundMode;
    procedure set_Background(value: DNBackgroundMode);
    function get_Shadow: Boolean;
    function get_ShapeProperties: DNShapePropertyCollection;
    function get_IsDefaultPosBeSet: Boolean;
    function get_DefaultX: Int32;
    function get_DefaultY: Int32;
    function get_DefaultWidth: Int32;
    function get_DefaultHeight: Int32;

  { methods } 

    procedure SetPositionAuto;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property X: Int32 read get_X write set_X;
    property Y: Int32 read get_Y write set_Y;
    property Height: Int32 read get_Height write set_Height;
    property Width: Int32 read get_Width write set_Width;
    property InnerX: Int32 read get_InnerX write set_InnerX;
    property InnerY: Int32 read get_InnerY write set_InnerY;
    property InnerHeight: Int32 read get_InnerHeight write set_InnerHeight;
    property InnerWidth: Int32 read get_InnerWidth write set_InnerWidth;
    property IsAutomaticSize: Boolean read get_IsAutomaticSize write set_IsAutomaticSize;
    property IsInnerMode: Boolean read get_IsInnerMode write set_IsInnerMode;
    property Border: DNLine read get_Border;
    property Area: DNArea read get_Area;
    property TextFont: DNFont read get_TextFont;
    property Font: DNFont read get_Font;
    property AutoScaleFont: Boolean read get_AutoScaleFont write set_AutoScaleFont;
    property BackgroundMode: DNBackgroundMode read get_BackgroundMode write set_BackgroundMode;
    property Background: DNBackgroundMode read get_Background write set_Background;
    property Shadow: Boolean read get_Shadow;
    property ShapeProperties: DNShapePropertyCollection read get_ShapeProperties;
    property IsDefaultPosBeSet: Boolean read get_IsDefaultPosBeSet;
    property DefaultX: Int32 read get_DefaultX;
    property DefaultY: Int32 read get_DefaultY;
    property DefaultWidth: Int32 read get_DefaultWidth;
    property DefaultHeight: Int32 read get_DefaultHeight;
  end;

  TDNPlotArea = class(TDNGenericImport<DNPlotAreaClass, DNPlotArea>) end;

  //-------------namespace: Aspose.Cells.Charts----------------
  DNChartPointClass = interface(DDN.mscorlib.DNObjectClass)
  ['{29DFA16C-312F-5053-8D60-D83200E82A18}']
  end;

  [DNTypeName('Aspose.Cells.Charts.ChartPoint')]
  DNChartPoint = interface(DDN.mscorlib.DNObject)
  ['{E30C9BE8-0B1D-351C-8AB1-4451DE67A870}']
  { getters & setters } 

    function get_Explosion: Int32;
    procedure set_Explosion(value: Int32);
    function get_Shadow: Boolean;
    procedure set_Shadow(value: Boolean);
    function get_Border: DNLine;
    function get_Area: DNArea;
    function get_Marker: DNMarker;
    function get_DataLabels: DNDataLabels;
    function get_YValue: DDN.mscorlib.DNObject;
    procedure set_YValue(value: DDN.mscorlib.DNObject);
    function get_YValueType: DNCellValueType;
    function get_XValue: DDN.mscorlib.DNObject;
    procedure set_XValue(value: DDN.mscorlib.DNObject);
    function get_XValueType: DNCellValueType;
    function get_ShapeProperties: DNShapePropertyCollection;
    function get_IsInSecondaryPlot: Boolean;
    procedure set_IsInSecondaryPlot(value: Boolean);
    function get_ShapeX: Int32;
    function get_ShapeY: Int32;
    function get_ShapeWidth: Int32;
    function get_ShapeHeight: Int32;
    function get_ShapeXPx: Int32;
    function get_ShapeYPx: Int32;
    function get_ShapeWidthPx: Int32;
    function get_ShapeHeightPx: Int32;
    function get_BorderWidthPx: Int32;
    function get_RadiusPx: Int32;
    function get_InnerRadiusPx: Int32;
    function get_StartAngle: Single;
    function get_EndAngle: Single;
    function get_ArcStartPointXPx: Single;
    function get_ArcStartPointYPx: Single;
    function get_ArcEndPointXPx: Single;
    function get_ArcEndPointYPx: Single;
    function get_InnerArcStartPointXPx: Single;
    function get_InnerArcStartPointYPx: Single;
    function get_InnerArcEndPointXPx: Single;
    function get_InnerArcEndPointYPx: Single;

  { methods } 

    function GetTopPointCount: Int32;
    function GetTopPointXPx(index: Int32): Single;
    function GetTopPointYPx(index: Int32): Single;
    function GetBottomPointCount: Int32;
    function GetBottomPointXPx(index: Int32): Single;
    function GetBottomPointYPx(index: Int32): Single;
    function GetOnCategoryAxisPointCount: Int32;
    function GetOnCategoryAxisPointXPx(index: Int32): Single;
    function GetOnCategoryAxisPointYPx(index: Int32): Single;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Explosion: Int32 read get_Explosion write set_Explosion;
    property Shadow: Boolean read get_Shadow write set_Shadow;
    property Border: DNLine read get_Border;
    property Area: DNArea read get_Area;
    property Marker: DNMarker read get_Marker;
    property DataLabels: DNDataLabels read get_DataLabels;
    property YValue: DDN.mscorlib.DNObject read get_YValue write set_YValue;
    property YValueType: DNCellValueType read get_YValueType;
    property XValue: DDN.mscorlib.DNObject read get_XValue write set_XValue;
    property XValueType: DNCellValueType read get_XValueType;
    property ShapeProperties: DNShapePropertyCollection read get_ShapeProperties;
    property IsInSecondaryPlot: Boolean read get_IsInSecondaryPlot write set_IsInSecondaryPlot;
    property ShapeX: Int32 read get_ShapeX;
    property ShapeY: Int32 read get_ShapeY;
    property ShapeWidth: Int32 read get_ShapeWidth;
    property ShapeHeight: Int32 read get_ShapeHeight;
    property ShapeXPx: Int32 read get_ShapeXPx;
    property ShapeYPx: Int32 read get_ShapeYPx;
    property ShapeWidthPx: Int32 read get_ShapeWidthPx;
    property ShapeHeightPx: Int32 read get_ShapeHeightPx;
    property BorderWidthPx: Int32 read get_BorderWidthPx;
    property RadiusPx: Int32 read get_RadiusPx;
    property InnerRadiusPx: Int32 read get_InnerRadiusPx;
    property StartAngle: Single read get_StartAngle;
    property EndAngle: Single read get_EndAngle;
    property ArcStartPointXPx: Single read get_ArcStartPointXPx;
    property ArcStartPointYPx: Single read get_ArcStartPointYPx;
    property ArcEndPointXPx: Single read get_ArcEndPointXPx;
    property ArcEndPointYPx: Single read get_ArcEndPointYPx;
    property InnerArcStartPointXPx: Single read get_InnerArcStartPointXPx;
    property InnerArcStartPointYPx: Single read get_InnerArcStartPointYPx;
    property InnerArcEndPointXPx: Single read get_InnerArcEndPointXPx;
    property InnerArcEndPointYPx: Single read get_InnerArcEndPointYPx;
  end;

  TDNChartPoint = class(TDNGenericImport<DNChartPointClass, DNChartPoint>) end;

  //-------------namespace: Aspose.Cells.Charts----------------
  DNChartPointCollectionClass = interface(DDN.mscorlib.DNObjectClass)
  ['{59D1ECDD-FD23-5A7B-BFC6-F4800D210473}']
  end;

  [DNTypeName('Aspose.Cells.Charts.ChartPointCollection')]
  DNChartPointCollection = interface(DDN.mscorlib.DNObject)
  ['{FF74254D-4F12-3C00-AFB2-818645B5670D}']
  { getters & setters } 

    function get_Count: Int32;
    function get_Item(index: Int32): DNChartPoint;

  { methods } 

    function GetEnumerator: DDN.mscorlib.DNIEnumerator;
    procedure Clear;
    procedure RemoveAt(index: Int32);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Count: Int32 read get_Count;
    property Item[index: Int32]: DNChartPoint read get_Item; default;
  end;

  TDNChartPointCollection = class(TDNGenericImport<DNChartPointCollectionClass, DNChartPointCollection>) end;

  //-------------namespace: Aspose.Cells.Charts----------------
  DNDropBarsClass = interface(DDN.mscorlib.DNObjectClass)
  ['{312D0733-4791-5A78-A984-6ECFB800C098}']
  end;

  [DNTypeName('Aspose.Cells.Charts.DropBars')]
  DNDropBars = interface(DDN.mscorlib.DNObject)
  ['{74A97EEA-BCB1-3A32-B29F-54CEACFB2569}']
  { getters & setters } 

    function get_Border: DNLine;
    function get_Area: DNArea;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Border: DNLine read get_Border;
    property Area: DNArea read get_Area;
  end;

  TDNDropBars = class(TDNGenericImport<DNDropBarsClass, DNDropBars>) end;

  //-------------namespace: Aspose.Cells.Charts----------------
  DNLegendEntryClass = interface(DDN.mscorlib.DNObjectClass)
  ['{7A50F5E0-E0CC-5F66-9B94-528585E70C7B}']
  end;

  [DNTypeName('Aspose.Cells.Charts.LegendEntry')]
  DNLegendEntry = interface(DDN.mscorlib.DNObject)
  ['{93278A99-70AA-3491-AF2C-3352E39A21DE}']
  { getters & setters } 

    function get_IsDeleted: Boolean;
    procedure set_IsDeleted(value: Boolean);
    function get_Font: DNFont;
    function get_TextFont: DNFont;
    function get_IsTextNoFill: Boolean;
    procedure set_IsTextNoFill(value: Boolean);
    function get_AutoScaleFont: Boolean;
    procedure set_AutoScaleFont(value: Boolean);
    function get_Background: DNBackgroundMode;
    procedure set_Background(value: DNBackgroundMode);
    function get_BackgroundMode: DNBackgroundMode;
    procedure set_BackgroundMode(value: DNBackgroundMode);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property IsDeleted: Boolean read get_IsDeleted write set_IsDeleted;
    property Font: DNFont read get_Font;
    property TextFont: DNFont read get_TextFont;
    property IsTextNoFill: Boolean read get_IsTextNoFill write set_IsTextNoFill;
    property AutoScaleFont: Boolean read get_AutoScaleFont write set_AutoScaleFont;
    property Background: DNBackgroundMode read get_Background write set_Background;
    property BackgroundMode: DNBackgroundMode read get_BackgroundMode write set_BackgroundMode;
  end;

  TDNLegendEntry = class(TDNGenericImport<DNLegendEntryClass, DNLegendEntry>) end;

  //-------------namespace: Aspose.Cells.Charts----------------
  DNMarkerClass = interface(DDN.mscorlib.DNObjectClass)
  ['{F5C1A4D5-D409-5D9A-93FC-D974ED00C66B}']
  end;

  [DNTypeName('Aspose.Cells.Charts.Marker')]
  DNMarker = interface(DDN.mscorlib.DNObject)
  ['{30CF5F99-601B-3C15-B3EB-E8AD99A89AD1}']
  { getters & setters } 

    function get_Border: DNLine;
    function get_Area: DNArea;
    function get_MarkerStyle: DNChartMarkerType;
    procedure set_MarkerStyle(value: DNChartMarkerType);
    function get_MarkerSize: Int32;
    procedure set_MarkerSize(value: Int32);
    function get_MarkerSizePx: Int32;
    procedure set_MarkerSizePx(value: Int32);
    function get_ForegroundColor: DDN.System.Drawing.DNColor;
    procedure set_ForegroundColor(value: DDN.System.Drawing.DNColor);
    function get_ForegroundColorSetType: DNFormattingType;
    procedure set_ForegroundColorSetType(value: DNFormattingType);
    function get_BackgroundColor: DDN.System.Drawing.DNColor;
    procedure set_BackgroundColor(value: DDN.System.Drawing.DNColor);
    function get_BackgroundColorSetType: DNFormattingType;
    procedure set_BackgroundColorSetType(value: DNFormattingType);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Border: DNLine read get_Border;
    property Area: DNArea read get_Area;
    property MarkerStyle: DNChartMarkerType read get_MarkerStyle write set_MarkerStyle;
    property MarkerSize: Int32 read get_MarkerSize write set_MarkerSize;
    property MarkerSizePx: Int32 read get_MarkerSizePx write set_MarkerSizePx;
    property ForegroundColor: DDN.System.Drawing.DNColor read get_ForegroundColor write set_ForegroundColor;
    property ForegroundColorSetType: DNFormattingType read get_ForegroundColorSetType write set_ForegroundColorSetType;
    property BackgroundColor: DDN.System.Drawing.DNColor read get_BackgroundColor write set_BackgroundColor;
    property BackgroundColorSetType: DNFormattingType read get_BackgroundColorSetType write set_BackgroundColorSetType;
  end;

  TDNMarker = class(TDNGenericImport<DNMarkerClass, DNMarker>) end;

  //-------------namespace: Aspose.Cells.Charts----------------
  DNPivotOptionsClass = interface(DDN.mscorlib.DNObjectClass)
  ['{E194FD1D-30ED-5A36-93EC-28F9427EDE3D}']
  end;

  [DNTypeName('Aspose.Cells.Charts.PivotOptions')]
  DNPivotOptions = interface(DDN.mscorlib.DNObject)
  ['{85D02D1B-9FBD-37E0-8DA1-F1D75A9ED19B}']
  { getters & setters } 

    function get_DropZoneFilter: Boolean;
    procedure set_DropZoneFilter(value: Boolean);
    function get_DropZoneCategories: Boolean;
    procedure set_DropZoneCategories(value: Boolean);
    function get_DropZoneData: Boolean;
    procedure set_DropZoneData(value: Boolean);
    function get_DropZoneSeries: Boolean;
    procedure set_DropZoneSeries(value: Boolean);
    function get_DropZonesVisible: Boolean;
    procedure set_DropZonesVisible(value: Boolean);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property DropZoneFilter: Boolean read get_DropZoneFilter write set_DropZoneFilter;
    property DropZoneCategories: Boolean read get_DropZoneCategories write set_DropZoneCategories;
    property DropZoneData: Boolean read get_DropZoneData write set_DropZoneData;
    property DropZoneSeries: Boolean read get_DropZoneSeries write set_DropZoneSeries;
    property DropZonesVisible: Boolean read get_DropZonesVisible write set_DropZonesVisible;
  end;

  TDNPivotOptions = class(TDNGenericImport<DNPivotOptionsClass, DNPivotOptions>) end;

  //-------------namespace: Aspose.Cells.Charts----------------
  DNSeriesClass = interface(DDN.mscorlib.DNObjectClass)
  ['{12FB4714-DEFD-5ECB-A9AB-204A3BBB61D4}']
  end;

  [DNTypeName('Aspose.Cells.Charts.Series')]
  DNSeries = interface(DDN.mscorlib.DNObject)
  ['{4EC1D8B0-F78B-3C00-9C29-E2469456F303}']
  { getters & setters } 

    function get_LayoutProperties: DNSeriesLayoutProperties;
    function get_Points: DNChartPointCollection;
    function get_Area: DNArea;
    function get_Border: DNLine;
    function get_Name: string;
    procedure set_Name(value: string);
    function get_DisplayName: string;
    function get_CountOfDataValues: Int32;
    function get_IsVerticalValues: Boolean;
    function get_Values: string;
    procedure set_Values(value: string);
    function get_ValuesFormatCode: string;
    procedure set_ValuesFormatCode(value: string);
    function get_XValues: string;
    procedure set_XValues(value: string);
    function get_BubbleSizes: string;
    procedure set_BubbleSizes(value: string);
    function get_TrendLines: DNTrendlineCollection;
    function get_Smooth: Boolean;
    procedure set_Smooth(value: Boolean);
    function get_Shadow: Boolean;
    procedure set_Shadow(value: Boolean);
    function get_Has3DEffect: Boolean;
    procedure set_Has3DEffect(value: Boolean);
    function get_Bar3DShapeType: DNBar3DShapeType;
    procedure set_Bar3DShapeType(value: DNBar3DShapeType);
    function get_BarShape: DNBar3DShapeType;
    procedure set_BarShape(value: DNBar3DShapeType);
    function get_DataLabels: DNDataLabels;
    function get_Type: DNChartType;
    procedure set_Type(value: DNChartType);
    function get_Marker: DNMarker;
    function get_PlotOnSecondAxis: Boolean;
    procedure set_PlotOnSecondAxis(value: Boolean);
    function get_XErrorBar: DNErrorBar;
    function get_YErrorBar: DNErrorBar;
    function get_HasHiLoLines: Boolean;
    procedure set_HasHiLoLines(value: Boolean);
    function get_HiLoLines: DNLine;
    function get_HasSeriesLines: Boolean;
    procedure set_HasSeriesLines(value: Boolean);
    function get_SeriesLines: DNLine;
    function get_HasDropLines: Boolean;
    procedure set_HasDropLines(value: Boolean);
    function get_DropLines: DNLine;
    function get_HasUpDownBars: Boolean;
    procedure set_HasUpDownBars(value: Boolean);
    function get_UpBars: DNDropBars;
    function get_DownBars: DNDropBars;
    function get_IsColorVaried: Boolean;
    procedure set_IsColorVaried(value: Boolean);
    function get_GapWidth: Int16;
    procedure set_GapWidth(value: Int16);
    function get_FirstSliceAngle: Int16;
    procedure set_FirstSliceAngle(value: Int16);
    function get_Overlap: Int16;
    procedure set_Overlap(value: Int16);
    function get_SecondPlotSize: Int16;
    procedure set_SecondPlotSize(value: Int16);
    function get_SplitType: DNChartSplitType;
    procedure set_SplitType(value: DNChartSplitType);
    function get_SplitValue: Double;
    procedure set_SplitValue(value: Double);
    function get_IsAutoSplit: Boolean;
    function get_BubbleScale: Int32;
    procedure set_BubbleScale(value: Int32);
    function get_SizeRepresents: DNBubbleSizeRepresents;
    procedure set_SizeRepresents(value: DNBubbleSizeRepresents);
    function get_ShowNegativeBubbles: Boolean;
    procedure set_ShowNegativeBubbles(value: Boolean);
    function get_DoughnutHoleSize: Int32;
    procedure set_DoughnutHoleSize(value: Int32);
    function get_Explosion: Int32;
    procedure set_Explosion(value: Int32);
    function get_HasRadarAxisLabels: Boolean;
    procedure set_HasRadarAxisLabels(value: Boolean);
    function get_HasLeaderLines: Boolean;
    procedure set_HasLeaderLines(value: Boolean);
    function get_LeaderLines: DNLine;
    function get_LegendEntry: DNLegendEntry;
    function get_ShapeProperties: DNShapePropertyCollection;

  { methods } 

    procedure Move(count: Int32);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property LayoutProperties: DNSeriesLayoutProperties read get_LayoutProperties;
    property Points: DNChartPointCollection read get_Points;
    property Area: DNArea read get_Area;
    property Border: DNLine read get_Border;
    property Name: string read get_Name write set_Name;
    property DisplayName: string read get_DisplayName;
    property CountOfDataValues: Int32 read get_CountOfDataValues;
    property IsVerticalValues: Boolean read get_IsVerticalValues;
    property Values: string read get_Values write set_Values;
    property ValuesFormatCode: string read get_ValuesFormatCode write set_ValuesFormatCode;
    property XValues: string read get_XValues write set_XValues;
    property BubbleSizes: string read get_BubbleSizes write set_BubbleSizes;
    property TrendLines: DNTrendlineCollection read get_TrendLines;
    property Smooth: Boolean read get_Smooth write set_Smooth;
    property Shadow: Boolean read get_Shadow write set_Shadow;
    property Has3DEffect: Boolean read get_Has3DEffect write set_Has3DEffect;
    property Bar3DShapeType: DNBar3DShapeType read get_Bar3DShapeType write set_Bar3DShapeType;
    property BarShape: DNBar3DShapeType read get_BarShape write set_BarShape;
    property DataLabels: DNDataLabels read get_DataLabels;
    property &Type: DNChartType read get_Type write set_Type;
    property Marker: DNMarker read get_Marker;
    property PlotOnSecondAxis: Boolean read get_PlotOnSecondAxis write set_PlotOnSecondAxis;
    property XErrorBar: DNErrorBar read get_XErrorBar;
    property YErrorBar: DNErrorBar read get_YErrorBar;
    property HasHiLoLines: Boolean read get_HasHiLoLines write set_HasHiLoLines;
    property HiLoLines: DNLine read get_HiLoLines;
    property HasSeriesLines: Boolean read get_HasSeriesLines write set_HasSeriesLines;
    property SeriesLines: DNLine read get_SeriesLines;
    property HasDropLines: Boolean read get_HasDropLines write set_HasDropLines;
    property DropLines: DNLine read get_DropLines;
    property HasUpDownBars: Boolean read get_HasUpDownBars write set_HasUpDownBars;
    property UpBars: DNDropBars read get_UpBars;
    property DownBars: DNDropBars read get_DownBars;
    property IsColorVaried: Boolean read get_IsColorVaried write set_IsColorVaried;
    property GapWidth: Int16 read get_GapWidth write set_GapWidth;
    property FirstSliceAngle: Int16 read get_FirstSliceAngle write set_FirstSliceAngle;
    property Overlap: Int16 read get_Overlap write set_Overlap;
    property SecondPlotSize: Int16 read get_SecondPlotSize write set_SecondPlotSize;
    property SplitType: DNChartSplitType read get_SplitType write set_SplitType;
    property SplitValue: Double read get_SplitValue write set_SplitValue;
    property IsAutoSplit: Boolean read get_IsAutoSplit;
    property BubbleScale: Int32 read get_BubbleScale write set_BubbleScale;
    property SizeRepresents: DNBubbleSizeRepresents read get_SizeRepresents write set_SizeRepresents;
    property ShowNegativeBubbles: Boolean read get_ShowNegativeBubbles write set_ShowNegativeBubbles;
    property DoughnutHoleSize: Int32 read get_DoughnutHoleSize write set_DoughnutHoleSize;
    property Explosion: Int32 read get_Explosion write set_Explosion;
    property HasRadarAxisLabels: Boolean read get_HasRadarAxisLabels write set_HasRadarAxisLabels;
    property HasLeaderLines: Boolean read get_HasLeaderLines write set_HasLeaderLines;
    property LeaderLines: DNLine read get_LeaderLines;
    property LegendEntry: DNLegendEntry read get_LegendEntry;
    property ShapeProperties: DNShapePropertyCollection read get_ShapeProperties;
  end;

  TDNSeries = class(TDNGenericImport<DNSeriesClass, DNSeries>) end;

  //-------------namespace: Aspose.Cells.Charts----------------
  DNSeriesLayoutPropertiesClass = interface(DDN.mscorlib.DNObjectClass)
  ['{E1949A15-32B9-5BF8-8979-1EE63F4A7B8F}']
  { constructors } 

    {class} function init: DNSeriesLayoutProperties;

  end;

  [DNTypeName('Aspose.Cells.Charts.SeriesLayoutProperties')]
  DNSeriesLayoutProperties = interface(DDN.mscorlib.DNObject)
  ['{4951B904-79D7-3215-AC07-0FA1797E6717}']
  { getters & setters } 

    function get_ShowConnectorLines: Boolean;
    procedure set_ShowConnectorLines(value: Boolean);
    function get_ShowMeanLine: Boolean;
    procedure set_ShowMeanLine(value: Boolean);
    function get_ShowOutlierPoints: Boolean;
    procedure set_ShowOutlierPoints(value: Boolean);
    function get_ShowMeanMarker: Boolean;
    procedure set_ShowMeanMarker(value: Boolean);
    function get_ShowInnerPoints: Boolean;
    procedure set_ShowInnerPoints(value: Boolean);
    function get_Subtotals: TArray<Int32>;
    procedure set_Subtotals(value: TArray<Int32>);
    function get_QuartileCalculation: DNQuartileCalculationType;
    procedure set_QuartileCalculation(value: DNQuartileCalculationType);
    function get_MapLabelLayout: DNMapChartLabelLayout;
    procedure set_MapLabelLayout(value: DNMapChartLabelLayout);
    function get_MapChartRegionType: DNMapChartRegionType;
    procedure set_MapChartRegionType(value: DNMapChartRegionType);
    function get_MapChartProjectionType: DNMapChartProjectionType;
    procedure set_MapChartProjectionType(value: DNMapChartProjectionType);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property ShowConnectorLines: Boolean read get_ShowConnectorLines write set_ShowConnectorLines;
    property ShowMeanLine: Boolean read get_ShowMeanLine write set_ShowMeanLine;
    property ShowOutlierPoints: Boolean read get_ShowOutlierPoints write set_ShowOutlierPoints;
    property ShowMeanMarker: Boolean read get_ShowMeanMarker write set_ShowMeanMarker;
    property ShowInnerPoints: Boolean read get_ShowInnerPoints write set_ShowInnerPoints;
    property Subtotals: TArray<Int32> read get_Subtotals write set_Subtotals;
    property QuartileCalculation: DNQuartileCalculationType read get_QuartileCalculation write set_QuartileCalculation;
    property MapLabelLayout: DNMapChartLabelLayout read get_MapLabelLayout write set_MapLabelLayout;
    property MapChartRegionType: DNMapChartRegionType read get_MapChartRegionType write set_MapChartRegionType;
    property MapChartProjectionType: DNMapChartProjectionType read get_MapChartProjectionType write set_MapChartProjectionType;
  end;

  TDNSeriesLayoutProperties = class(TDNGenericImport<DNSeriesLayoutPropertiesClass, DNSeriesLayoutProperties>) end;

  //-------------namespace: Aspose.Cells.Charts----------------
  DNSparklineClass = interface(DDN.mscorlib.DNObjectClass)
  ['{572878A1-67C9-5BE4-B000-7985DCDFC76D}']
  end;

  [DNTypeName('Aspose.Cells.Charts.Sparkline')]
  DNSparkline = interface(DDN.mscorlib.DNObject)
  ['{46B7A2CC-38AD-3682-88F2-4F1A7DF7FCBA}']
  { getters & setters } 

    function get_DataRange: string;
    procedure set_DataRange(value: string);
    function get_Row: Int32;
    function get_Column: Int32;

  { methods } 

    function ToImage(options: DNImageOrPrintOptions): DDN.System.Drawing.DNBitmap; overload;
    procedure ToImage(fileName: string; options: DNImageOrPrintOptions); overload;
    procedure ToImage(stream: DDN.mscorlib.DNStream; options: DNImageOrPrintOptions); overload;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property DataRange: string read get_DataRange write set_DataRange;
    property Row: Int32 read get_Row;
    property Column: Int32 read get_Column;
  end;

  TDNSparkline = class(TDNGenericImport<DNSparklineClass, DNSparkline>) end;

  //-------------namespace: Aspose.Cells.Charts----------------
  DNSparklineGroupClass = interface(DDN.mscorlib.DNObjectClass)
  ['{A319D14D-1702-5F09-89D1-0CFBC3684CCA}']
  end;

  [DNTypeName('Aspose.Cells.Charts.SparklineGroup')]
  DNSparklineGroup = interface(DDN.mscorlib.DNObject)
  ['{FC886C33-6B36-3589-AA9D-65F715A75911}']
  { getters & setters } 

    function get_PresetStyle: DNSparklinePresetStyleType;
    procedure set_PresetStyle(value: DNSparklinePresetStyleType);
    function get_SparklineCollection: DNSparklineCollection;
    function get_Type: DNSparklineType;
    procedure set_Type(value: DNSparklineType);
    function get_PlotEmptyCellsType: DNPlotEmptyCellsType;
    procedure set_PlotEmptyCellsType(value: DNPlotEmptyCellsType);
    function get_DisplayHidden: Boolean;
    procedure set_DisplayHidden(value: Boolean);
    function get_ShowHighPoint: Boolean;
    procedure set_ShowHighPoint(value: Boolean);
    function get_HighPointColor: DNCellsColor;
    procedure set_HighPointColor(value: DNCellsColor);
    function get_ShowLowPoint: Boolean;
    procedure set_ShowLowPoint(value: Boolean);
    function get_LowPointColor: DNCellsColor;
    procedure set_LowPointColor(value: DNCellsColor);
    function get_ShowNegativePoints: Boolean;
    procedure set_ShowNegativePoints(value: Boolean);
    function get_NegativePointsColor: DNCellsColor;
    procedure set_NegativePointsColor(value: DNCellsColor);
    function get_ShowFirstPoint: Boolean;
    procedure set_ShowFirstPoint(value: Boolean);
    function get_FirstPointColor: DNCellsColor;
    procedure set_FirstPointColor(value: DNCellsColor);
    function get_ShowLastPoint: Boolean;
    procedure set_ShowLastPoint(value: Boolean);
    function get_LastPointColor: DNCellsColor;
    procedure set_LastPointColor(value: DNCellsColor);
    function get_ShowMarkers: Boolean;
    procedure set_ShowMarkers(value: Boolean);
    function get_MarkersColor: DNCellsColor;
    procedure set_MarkersColor(value: DNCellsColor);
    function get_SeriesColor: DNCellsColor;
    procedure set_SeriesColor(value: DNCellsColor);
    function get_PlotRightToLeft: Boolean;
    procedure set_PlotRightToLeft(value: Boolean);
    function get_LineWeight: Double;
    procedure set_LineWeight(value: Double);
    function get_HorizontalAxisColor: DNCellsColor;
    procedure set_HorizontalAxisColor(value: DNCellsColor);
    function get_ShowHorizontalAxis: Boolean;
    procedure set_ShowHorizontalAxis(value: Boolean);
    function get_HorizontalAxisDateRange: string;
    procedure set_HorizontalAxisDateRange(value: string);
    function get_VerticalAxisMaxValueType: DNSparklineAxisMinMaxType;
    procedure set_VerticalAxisMaxValueType(value: DNSparklineAxisMinMaxType);
    function get_VerticalAxisMaxValue: Double;
    procedure set_VerticalAxisMaxValue(value: Double);
    function get_VerticalAxisMinValueType: DNSparklineAxisMinMaxType;
    procedure set_VerticalAxisMinValueType(value: DNSparklineAxisMinMaxType);
    function get_VerticalAxisMinValue: Double;
    procedure set_VerticalAxisMinValue(value: Double);

  { methods } 

    procedure ResetRanges(dataRange: string; isVertical: Boolean; locationRange: DNCellArea);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property PresetStyle: DNSparklinePresetStyleType read get_PresetStyle write set_PresetStyle;
    property SparklineCollection: DNSparklineCollection read get_SparklineCollection;
    property &Type: DNSparklineType read get_Type write set_Type;
    property PlotEmptyCellsType: DNPlotEmptyCellsType read get_PlotEmptyCellsType write set_PlotEmptyCellsType;
    property DisplayHidden: Boolean read get_DisplayHidden write set_DisplayHidden;
    property ShowHighPoint: Boolean read get_ShowHighPoint write set_ShowHighPoint;
    property HighPointColor: DNCellsColor read get_HighPointColor write set_HighPointColor;
    property ShowLowPoint: Boolean read get_ShowLowPoint write set_ShowLowPoint;
    property LowPointColor: DNCellsColor read get_LowPointColor write set_LowPointColor;
    property ShowNegativePoints: Boolean read get_ShowNegativePoints write set_ShowNegativePoints;
    property NegativePointsColor: DNCellsColor read get_NegativePointsColor write set_NegativePointsColor;
    property ShowFirstPoint: Boolean read get_ShowFirstPoint write set_ShowFirstPoint;
    property FirstPointColor: DNCellsColor read get_FirstPointColor write set_FirstPointColor;
    property ShowLastPoint: Boolean read get_ShowLastPoint write set_ShowLastPoint;
    property LastPointColor: DNCellsColor read get_LastPointColor write set_LastPointColor;
    property ShowMarkers: Boolean read get_ShowMarkers write set_ShowMarkers;
    property MarkersColor: DNCellsColor read get_MarkersColor write set_MarkersColor;
    property SeriesColor: DNCellsColor read get_SeriesColor write set_SeriesColor;
    property PlotRightToLeft: Boolean read get_PlotRightToLeft write set_PlotRightToLeft;
    property LineWeight: Double read get_LineWeight write set_LineWeight;
    property HorizontalAxisColor: DNCellsColor read get_HorizontalAxisColor write set_HorizontalAxisColor;
    property ShowHorizontalAxis: Boolean read get_ShowHorizontalAxis write set_ShowHorizontalAxis;
    property HorizontalAxisDateRange: string read get_HorizontalAxisDateRange write set_HorizontalAxisDateRange;
    property VerticalAxisMaxValueType: DNSparklineAxisMinMaxType read get_VerticalAxisMaxValueType write set_VerticalAxisMaxValueType;
    property VerticalAxisMaxValue: Double read get_VerticalAxisMaxValue write set_VerticalAxisMaxValue;
    property VerticalAxisMinValueType: DNSparklineAxisMinMaxType read get_VerticalAxisMinValueType write set_VerticalAxisMinValueType;
    property VerticalAxisMinValue: Double read get_VerticalAxisMinValue write set_VerticalAxisMinValue;
  end;

  TDNSparklineGroup = class(TDNGenericImport<DNSparklineGroupClass, DNSparklineGroup>) end;

  //-------------namespace: Aspose.Cells.Charts----------------
  DNTickLabelsClass = interface(DDN.mscorlib.DNObjectClass)
  ['{177F5E5C-DB79-5084-8459-A7EE5A9B940C}']
  end;

  [DNTypeName('Aspose.Cells.Charts.TickLabels')]
  DNTickLabels = interface(DDN.mscorlib.DNObject)
  ['{B33BBC4F-4E92-3476-AEC2-9A96928738BE}']
  { getters & setters } 

    function get_Font: DNFont;
    function get_AutoScaleFont: Boolean;
    procedure set_AutoScaleFont(value: Boolean);
    function get_BackgroundMode: DNBackgroundMode;
    procedure set_BackgroundMode(value: DNBackgroundMode);
    function get_RotationAngle: Int32;
    procedure set_RotationAngle(value: Int32);
    function get_IsAutomaticRotation: Boolean;
    procedure set_IsAutomaticRotation(value: Boolean);
    function get_NumberFormat: string;
    procedure set_NumberFormat(value: string);
    function get_Number: Int32;
    procedure set_Number(value: Int32);
    function get_NumberFormatLinked: Boolean;
    procedure set_NumberFormatLinked(value: Boolean);
    function get_DisplayNumberFormat: string;
    function get_Offset: Int32;
    procedure set_Offset(value: Int32);
    function get_TextDirection: DNTextDirectionType;
    procedure set_TextDirection(value: DNTextDirectionType);
    function get_ReadingOrder: DNTextDirectionType;
    procedure set_ReadingOrder(value: DNTextDirectionType);
    function get_DirectionType: DNChartTextDirectionType;
    procedure set_DirectionType(value: DNChartTextDirectionType);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Font: DNFont read get_Font;
    property AutoScaleFont: Boolean read get_AutoScaleFont write set_AutoScaleFont;
    property BackgroundMode: DNBackgroundMode read get_BackgroundMode write set_BackgroundMode;
    property RotationAngle: Int32 read get_RotationAngle write set_RotationAngle;
    property IsAutomaticRotation: Boolean read get_IsAutomaticRotation write set_IsAutomaticRotation;
    property NumberFormat: string read get_NumberFormat write set_NumberFormat;
    property Number: Int32 read get_Number write set_Number;
    property NumberFormatLinked: Boolean read get_NumberFormatLinked write set_NumberFormatLinked;
    property DisplayNumberFormat: string read get_DisplayNumberFormat;
    property Offset: Int32 read get_Offset write set_Offset;
    property TextDirection: DNTextDirectionType read get_TextDirection write set_TextDirection;
    property ReadingOrder: DNTextDirectionType read get_ReadingOrder write set_ReadingOrder;
    property DirectionType: DNChartTextDirectionType read get_DirectionType write set_DirectionType;
  end;

  TDNTickLabels = class(TDNGenericImport<DNTickLabelsClass, DNTickLabels>) end;

  //-------------namespace: Aspose.Cells----------------
  DNCellWatchCollectionClass = interface(DNObjectClass)
  ['{43EB6020-D80E-5332-8BD5-9EE48F990C9A}']
  { constructors } 

    {class} function init: DNCellWatchCollection;

  end;

  [DNTypeName('Aspose.Cells.CellWatchCollection')]
  DNCellWatchCollection = interface(DNObject)
  ['{A15658A0-CD53-36ED-BBBF-146BE7089FF5}']
  { getters & setters } 

    function get_Item(index: Int32): DNCellWatch; overload;
    function get_Item(cellName: string): DNCellWatch; overload;
    function get_Capacity: Int32;
    procedure set_Capacity(value: Int32);
    function get_Count: Int32;

  { methods } 

    function Add(row: Int32; column: Int32): Int32; overload;
    function Add(cellName: string): Int32; overload;
    function BinarySearch(item: DNCellWatch): Int32; overload;
    function BinarySearch(item: DNCellWatch; comparer: DDN.mscorlib.DNIComparer<DNCellWatch>): Int32; overload;
    function BinarySearch(index: Int32; count: Int32; item: DNCellWatch; comparer: DDN.mscorlib.DNIComparer<DNCellWatch>): Int32; overload;
    function &Contains(item: DNCellWatch): Boolean;
    procedure CopyTo(&array: TArray<DNCellWatch>); overload;
    procedure CopyTo(&array: TArray<DNCellWatch>; arrayIndex: Int32); overload;
    procedure CopyTo(index: Int32; &array: TArray<DNCellWatch>; arrayIndex: Int32; count: Int32); overload;
    function Exists(match: DDN.mscorlib.DNPredicate<DNCellWatch>): Boolean;
    function Find(match: DDN.mscorlib.DNPredicate<DNCellWatch>): DNCellWatch;
    function FindAll(match: DDN.mscorlib.DNPredicate<DNCellWatch>): DDN.mscorlib.DNList<DNCellWatch>;
    function FindIndex(match: DDN.mscorlib.DNPredicate<DNCellWatch>): Int32; overload;
    function FindIndex(startIndex: Int32; match: DDN.mscorlib.DNPredicate<DNCellWatch>): Int32; overload;
    function FindIndex(startIndex: Int32; count: Int32; match: DDN.mscorlib.DNPredicate<DNCellWatch>): Int32; overload;
    function FindLast(match: DDN.mscorlib.DNPredicate<DNCellWatch>): DNCellWatch;
    function FindLastIndex(match: DDN.mscorlib.DNPredicate<DNCellWatch>): Int32; overload;
    function FindLastIndex(startIndex: Int32; match: DDN.mscorlib.DNPredicate<DNCellWatch>): Int32; overload;
    function FindLastIndex(startIndex: Int32; count: Int32; match: DDN.mscorlib.DNPredicate<DNCellWatch>): Int32; overload;
    function IndexOf(item: DNCellWatch): Int32; overload;
    function IndexOf(item: DNCellWatch; index: Int32): Int32; overload;
    function IndexOf(item: DNCellWatch; index: Int32; count: Int32): Int32; overload;
    function LastIndexOf(item: DNCellWatch): Int32; overload;
    function LastIndexOf(item: DNCellWatch; index: Int32): Int32; overload;
    function LastIndexOf(item: DNCellWatch; index: Int32; count: Int32): Int32; overload;
    function GetEnumerator: DDN.mscorlib.DNIEnumerator<DNCellWatch>;
    procedure RemoveAt(index: Int32);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Item[index: Int32]: DNCellWatch read get_Item; default;
    property Item[cellName: string]: DNCellWatch read get_Item; default;
    property Capacity: Int32 read get_Capacity write set_Capacity;
    property Count: Int32 read get_Count;
  end;

  TDNCellWatchCollection = class(TDNGenericImport<DNCellWatchCollectionClass, DNCellWatchCollection>) end;

  //-------------namespace: Aspose.Cells.Charts----------------
  DNChartCollectionClass = interface(DNObjectClass)
  ['{C47B6A23-00E6-5F24-A156-5EAF59A6FF8C}']
  end;

  [DNTypeName('Aspose.Cells.Charts.ChartCollection')]
  DNChartCollection = interface(DNObject)
  ['{7BD5C430-11D3-3EBC-9DB1-5B2BCE9FACF9}']
  { getters & setters } 

    function get_Item(index: Int32): DNChart; overload;
    function get_Item(name: string): DNChart; overload;
    function get_Capacity: Int32;
    procedure set_Capacity(value: Int32);
    function get_Count: Int32;

  { methods } 

    function AddFloatingChart(&type: DNChartType; left: Int32; top: Int32; width: Int32; height: Int32): Int32;
    function Add(&type: DNChartType; upperLeftRow: Int32; upperLeftColumn: Int32; lowerRightRow: Int32; lowerRightColumn: Int32): Int32;
    procedure RemoveAt(index: Int32);
    procedure Clear;
    function BinarySearch(item: DNChart): Int32; overload;
    function BinarySearch(item: DNChart; comparer: DDN.mscorlib.DNIComparer<DNChart>): Int32; overload;
    function BinarySearch(index: Int32; count: Int32; item: DNChart; comparer: DDN.mscorlib.DNIComparer<DNChart>): Int32; overload;
    function &Contains(item: DNChart): Boolean;
    procedure CopyTo(&array: TArray<DNChart>); overload;
    procedure CopyTo(&array: TArray<DNChart>; arrayIndex: Int32); overload;
    procedure CopyTo(index: Int32; &array: TArray<DNChart>; arrayIndex: Int32; count: Int32); overload;
    function Exists(match: DDN.mscorlib.DNPredicate<DNChart>): Boolean;
    function Find(match: DDN.mscorlib.DNPredicate<DNChart>): DNChart;
    function FindAll(match: DDN.mscorlib.DNPredicate<DNChart>): DDN.mscorlib.DNList<DNChart>;
    function FindIndex(match: DDN.mscorlib.DNPredicate<DNChart>): Int32; overload;
    function FindIndex(startIndex: Int32; match: DDN.mscorlib.DNPredicate<DNChart>): Int32; overload;
    function FindIndex(startIndex: Int32; count: Int32; match: DDN.mscorlib.DNPredicate<DNChart>): Int32; overload;
    function FindLast(match: DDN.mscorlib.DNPredicate<DNChart>): DNChart;
    function FindLastIndex(match: DDN.mscorlib.DNPredicate<DNChart>): Int32; overload;
    function FindLastIndex(startIndex: Int32; match: DDN.mscorlib.DNPredicate<DNChart>): Int32; overload;
    function FindLastIndex(startIndex: Int32; count: Int32; match: DDN.mscorlib.DNPredicate<DNChart>): Int32; overload;
    function IndexOf(item: DNChart): Int32; overload;
    function IndexOf(item: DNChart; index: Int32): Int32; overload;
    function IndexOf(item: DNChart; index: Int32; count: Int32): Int32; overload;
    function LastIndexOf(item: DNChart): Int32; overload;
    function LastIndexOf(item: DNChart; index: Int32): Int32; overload;
    function LastIndexOf(item: DNChart; index: Int32; count: Int32): Int32; overload;
    function GetEnumerator: DDN.mscorlib.DNIEnumerator<DNChart>;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Item[index: Int32]: DNChart read get_Item; default;
    property Item[name: string]: DNChart read get_Item; default;
    property Capacity: Int32 read get_Capacity write set_Capacity;
    property Count: Int32 read get_Count;
  end;

  TDNChartCollection = class(TDNGenericImport<DNChartCollectionClass, DNChartCollection>) end;

  //-------------namespace: Aspose.Cells.Charts----------------
  DNLegendEntryCollectionClass = interface(DNObjectClass)
  ['{106C9CE3-611A-5EF3-A969-6075FCB82ACD}']
  end;

  [DNTypeName('Aspose.Cells.Charts.LegendEntryCollection')]
  DNLegendEntryCollection = interface(DNObject)
  ['{614B3C82-73BB-3199-BF5A-04B2BC3C8E3D}']
  { getters & setters } 

    function get_Item(index: Int32): DNLegendEntry;
    function get_Capacity: Int32;
    procedure set_Capacity(value: Int32);
    function get_Count: Int32;

  { methods } 

    function BinarySearch(item: DNLegendEntry): Int32; overload;
    function BinarySearch(item: DNLegendEntry; comparer: DDN.mscorlib.DNIComparer<DNLegendEntry>): Int32; overload;
    function BinarySearch(index: Int32; count: Int32; item: DNLegendEntry; comparer: DDN.mscorlib.DNIComparer<DNLegendEntry>): Int32; overload;
    function &Contains(item: DNLegendEntry): Boolean;
    procedure CopyTo(&array: TArray<DNLegendEntry>); overload;
    procedure CopyTo(&array: TArray<DNLegendEntry>; arrayIndex: Int32); overload;
    procedure CopyTo(index: Int32; &array: TArray<DNLegendEntry>; arrayIndex: Int32; count: Int32); overload;
    function Exists(match: DDN.mscorlib.DNPredicate<DNLegendEntry>): Boolean;
    function Find(match: DDN.mscorlib.DNPredicate<DNLegendEntry>): DNLegendEntry;
    function FindAll(match: DDN.mscorlib.DNPredicate<DNLegendEntry>): DDN.mscorlib.DNList<DNLegendEntry>;
    function FindIndex(match: DDN.mscorlib.DNPredicate<DNLegendEntry>): Int32; overload;
    function FindIndex(startIndex: Int32; match: DDN.mscorlib.DNPredicate<DNLegendEntry>): Int32; overload;
    function FindIndex(startIndex: Int32; count: Int32; match: DDN.mscorlib.DNPredicate<DNLegendEntry>): Int32; overload;
    function FindLast(match: DDN.mscorlib.DNPredicate<DNLegendEntry>): DNLegendEntry;
    function FindLastIndex(match: DDN.mscorlib.DNPredicate<DNLegendEntry>): Int32; overload;
    function FindLastIndex(startIndex: Int32; match: DDN.mscorlib.DNPredicate<DNLegendEntry>): Int32; overload;
    function FindLastIndex(startIndex: Int32; count: Int32; match: DDN.mscorlib.DNPredicate<DNLegendEntry>): Int32; overload;
    function IndexOf(item: DNLegendEntry): Int32; overload;
    function IndexOf(item: DNLegendEntry; index: Int32): Int32; overload;
    function IndexOf(item: DNLegendEntry; index: Int32; count: Int32): Int32; overload;
    function LastIndexOf(item: DNLegendEntry): Int32; overload;
    function LastIndexOf(item: DNLegendEntry; index: Int32): Int32; overload;
    function LastIndexOf(item: DNLegendEntry; index: Int32; count: Int32): Int32; overload;
    function GetEnumerator: DDN.mscorlib.DNIEnumerator<DNLegendEntry>;
    procedure RemoveAt(index: Int32);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Item[index: Int32]: DNLegendEntry read get_Item; default;
    property Capacity: Int32 read get_Capacity write set_Capacity;
    property Count: Int32 read get_Count;
  end;

  TDNLegendEntryCollection = class(TDNGenericImport<DNLegendEntryCollectionClass, DNLegendEntryCollection>) end;

  //-------------namespace: Aspose.Cells.Charts----------------
  DNSeriesCollectionClass = interface(DNObjectClass)
  ['{86F97DC2-2B1E-5FB5-A761-BDC40935BFC7}']
  end;

  [DNTypeName('Aspose.Cells.Charts.SeriesCollection')]
  DNSeriesCollection = interface(DNObject)
  ['{57941404-7B71-333A-AA82-14DCF7895445}']
  { getters & setters } 

    function get_Item(index: Int32): DNSeries;
    function get_CategoryData: string;
    procedure set_CategoryData(value: string);
    function get_SecondCategoryData: string;
    procedure set_SecondCategoryData(value: string);
    function get_IsColorVaried: Boolean;
    procedure set_IsColorVaried(value: Boolean);
    function get_Capacity: Int32;
    procedure set_Capacity(value: Int32);
    function get_Count: Int32;

  { methods } 

    function GetSeriesByOrder(order: Int32): DNSeries;
    procedure RemoveAt(index: Int32);
    procedure ChangeSeriesOrder(sourceIndex: Int32; destIndex: Int32);
    function AddR1C1(area: string; isVertical: Boolean): Int32;
    function Add(area: string; isVertical: Boolean): Int32;
    procedure Clear;
    function BinarySearch(item: DNSeries): Int32; overload;
    function BinarySearch(item: DNSeries; comparer: DDN.mscorlib.DNIComparer<DNSeries>): Int32; overload;
    function BinarySearch(index: Int32; count: Int32; item: DNSeries; comparer: DDN.mscorlib.DNIComparer<DNSeries>): Int32; overload;
    function &Contains(item: DNSeries): Boolean;
    procedure CopyTo(&array: TArray<DNSeries>); overload;
    procedure CopyTo(&array: TArray<DNSeries>; arrayIndex: Int32); overload;
    procedure CopyTo(index: Int32; &array: TArray<DNSeries>; arrayIndex: Int32; count: Int32); overload;
    function Exists(match: DDN.mscorlib.DNPredicate<DNSeries>): Boolean;
    function Find(match: DDN.mscorlib.DNPredicate<DNSeries>): DNSeries;
    function FindAll(match: DDN.mscorlib.DNPredicate<DNSeries>): DDN.mscorlib.DNList<DNSeries>;
    function FindIndex(match: DDN.mscorlib.DNPredicate<DNSeries>): Int32; overload;
    function FindIndex(startIndex: Int32; match: DDN.mscorlib.DNPredicate<DNSeries>): Int32; overload;
    function FindIndex(startIndex: Int32; count: Int32; match: DDN.mscorlib.DNPredicate<DNSeries>): Int32; overload;
    function FindLast(match: DDN.mscorlib.DNPredicate<DNSeries>): DNSeries;
    function FindLastIndex(match: DDN.mscorlib.DNPredicate<DNSeries>): Int32; overload;
    function FindLastIndex(startIndex: Int32; match: DDN.mscorlib.DNPredicate<DNSeries>): Int32; overload;
    function FindLastIndex(startIndex: Int32; count: Int32; match: DDN.mscorlib.DNPredicate<DNSeries>): Int32; overload;
    function IndexOf(item: DNSeries): Int32; overload;
    function IndexOf(item: DNSeries; index: Int32): Int32; overload;
    function IndexOf(item: DNSeries; index: Int32; count: Int32): Int32; overload;
    function LastIndexOf(item: DNSeries): Int32; overload;
    function LastIndexOf(item: DNSeries; index: Int32): Int32; overload;
    function LastIndexOf(item: DNSeries; index: Int32; count: Int32): Int32; overload;
    function GetEnumerator: DDN.mscorlib.DNIEnumerator<DNSeries>;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Item[index: Int32]: DNSeries read get_Item; default;
    property CategoryData: string read get_CategoryData write set_CategoryData;
    property SecondCategoryData: string read get_SecondCategoryData write set_SecondCategoryData;
    property IsColorVaried: Boolean read get_IsColorVaried write set_IsColorVaried;
    property Capacity: Int32 read get_Capacity write set_Capacity;
    property Count: Int32 read get_Count;
  end;

  TDNSeriesCollection = class(TDNGenericImport<DNSeriesCollectionClass, DNSeriesCollection>) end;

  //-------------namespace: Aspose.Cells.Charts----------------
  DNSparklineCollectionClass = interface(DNObjectClass)
  ['{165EFF1A-43A5-56CD-AB5C-E2DE8D237BA6}']
  end;

  [DNTypeName('Aspose.Cells.Charts.SparklineCollection')]
  DNSparklineCollection = interface(DNObject)
  ['{3A1EAD61-FDD6-3EB5-9500-E7C41430E186}']
  { getters & setters } 

    function get_Item(index: Int32): DNSparkline;
    function get_Capacity: Int32;
    procedure set_Capacity(value: Int32);
    function get_Count: Int32;

  { methods } 

    function Add(dataRange: string; row: Int32; column: Int32): Int32;
    procedure Remove(o: DDN.mscorlib.DNObject);
    function BinarySearch(item: DNSparkline): Int32; overload;
    function BinarySearch(item: DNSparkline; comparer: DDN.mscorlib.DNIComparer<DNSparkline>): Int32; overload;
    function BinarySearch(index: Int32; count: Int32; item: DNSparkline; comparer: DDN.mscorlib.DNIComparer<DNSparkline>): Int32; overload;
    function &Contains(item: DNSparkline): Boolean;
    procedure CopyTo(&array: TArray<DNSparkline>); overload;
    procedure CopyTo(&array: TArray<DNSparkline>; arrayIndex: Int32); overload;
    procedure CopyTo(index: Int32; &array: TArray<DNSparkline>; arrayIndex: Int32; count: Int32); overload;
    function Exists(match: DDN.mscorlib.DNPredicate<DNSparkline>): Boolean;
    function Find(match: DDN.mscorlib.DNPredicate<DNSparkline>): DNSparkline;
    function FindAll(match: DDN.mscorlib.DNPredicate<DNSparkline>): DDN.mscorlib.DNList<DNSparkline>;
    function FindIndex(match: DDN.mscorlib.DNPredicate<DNSparkline>): Int32; overload;
    function FindIndex(startIndex: Int32; match: DDN.mscorlib.DNPredicate<DNSparkline>): Int32; overload;
    function FindIndex(startIndex: Int32; count: Int32; match: DDN.mscorlib.DNPredicate<DNSparkline>): Int32; overload;
    function FindLast(match: DDN.mscorlib.DNPredicate<DNSparkline>): DNSparkline;
    function FindLastIndex(match: DDN.mscorlib.DNPredicate<DNSparkline>): Int32; overload;
    function FindLastIndex(startIndex: Int32; match: DDN.mscorlib.DNPredicate<DNSparkline>): Int32; overload;
    function FindLastIndex(startIndex: Int32; count: Int32; match: DDN.mscorlib.DNPredicate<DNSparkline>): Int32; overload;
    function IndexOf(item: DNSparkline): Int32; overload;
    function IndexOf(item: DNSparkline; index: Int32): Int32; overload;
    function IndexOf(item: DNSparkline; index: Int32; count: Int32): Int32; overload;
    function LastIndexOf(item: DNSparkline): Int32; overload;
    function LastIndexOf(item: DNSparkline; index: Int32): Int32; overload;
    function LastIndexOf(item: DNSparkline; index: Int32; count: Int32): Int32; overload;
    function GetEnumerator: DDN.mscorlib.DNIEnumerator<DNSparkline>;
    procedure RemoveAt(index: Int32);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Item[index: Int32]: DNSparkline read get_Item; default;
    property Capacity: Int32 read get_Capacity write set_Capacity;
    property Count: Int32 read get_Count;
  end;

  TDNSparklineCollection = class(TDNGenericImport<DNSparklineCollectionClass, DNSparklineCollection>) end;

  //-------------namespace: Aspose.Cells.Charts----------------
  DNSparklineGroupCollectionClass = interface(DNObjectClass)
  ['{C21B7E5F-7C5D-5168-8A65-D30EC3B790FE}']
  end;

  [DNTypeName('Aspose.Cells.Charts.SparklineGroupCollection')]
  DNSparklineGroupCollection = interface(DNObject)
  ['{89EC08CB-AE12-3574-893B-0B0E6C3571FB}']
  { getters & setters } 

    function get_Item(index: Int32): DNSparklineGroup;
    function get_Capacity: Int32;
    procedure set_Capacity(value: Int32);
    function get_Count: Int32;

  { methods } 

    function Add(&type: DNSparklineType; dataRange: string; isVertical: Boolean; locationRange: DNCellArea): Int32;
    procedure ClearSparklines(cellArea: DNCellArea);
    procedure ClearSparklineGroups(cellArea: DNCellArea);
    function BinarySearch(item: DNSparklineGroup): Int32; overload;
    function BinarySearch(item: DNSparklineGroup; comparer: DDN.mscorlib.DNIComparer<DNSparklineGroup>): Int32; overload;
    function BinarySearch(index: Int32; count: Int32; item: DNSparklineGroup; comparer: DDN.mscorlib.DNIComparer<DNSparklineGroup>): Int32; overload;
    function &Contains(item: DNSparklineGroup): Boolean;
    procedure CopyTo(&array: TArray<DNSparklineGroup>); overload;
    procedure CopyTo(&array: TArray<DNSparklineGroup>; arrayIndex: Int32); overload;
    procedure CopyTo(index: Int32; &array: TArray<DNSparklineGroup>; arrayIndex: Int32; count: Int32); overload;
    function Exists(match: DDN.mscorlib.DNPredicate<DNSparklineGroup>): Boolean;
    function Find(match: DDN.mscorlib.DNPredicate<DNSparklineGroup>): DNSparklineGroup;
    function FindAll(match: DDN.mscorlib.DNPredicate<DNSparklineGroup>): DDN.mscorlib.DNList<DNSparklineGroup>;
    function FindIndex(match: DDN.mscorlib.DNPredicate<DNSparklineGroup>): Int32; overload;
    function FindIndex(startIndex: Int32; match: DDN.mscorlib.DNPredicate<DNSparklineGroup>): Int32; overload;
    function FindIndex(startIndex: Int32; count: Int32; match: DDN.mscorlib.DNPredicate<DNSparklineGroup>): Int32; overload;
    function FindLast(match: DDN.mscorlib.DNPredicate<DNSparklineGroup>): DNSparklineGroup;
    function FindLastIndex(match: DDN.mscorlib.DNPredicate<DNSparklineGroup>): Int32; overload;
    function FindLastIndex(startIndex: Int32; match: DDN.mscorlib.DNPredicate<DNSparklineGroup>): Int32; overload;
    function FindLastIndex(startIndex: Int32; count: Int32; match: DDN.mscorlib.DNPredicate<DNSparklineGroup>): Int32; overload;
    function IndexOf(item: DNSparklineGroup): Int32; overload;
    function IndexOf(item: DNSparklineGroup; index: Int32): Int32; overload;
    function IndexOf(item: DNSparklineGroup; index: Int32; count: Int32): Int32; overload;
    function LastIndexOf(item: DNSparklineGroup): Int32; overload;
    function LastIndexOf(item: DNSparklineGroup; index: Int32): Int32; overload;
    function LastIndexOf(item: DNSparklineGroup; index: Int32; count: Int32): Int32; overload;
    function GetEnumerator: DDN.mscorlib.DNIEnumerator<DNSparklineGroup>;
    procedure RemoveAt(index: Int32);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Item[index: Int32]: DNSparklineGroup read get_Item; default;
    property Capacity: Int32 read get_Capacity write set_Capacity;
    property Count: Int32 read get_Count;
  end;

  TDNSparklineGroupCollection = class(TDNGenericImport<DNSparklineGroupCollectionClass, DNSparklineGroupCollection>) end;

  //-------------namespace: Aspose.Cells.Charts----------------
  DNTrendlineCollectionClass = interface(DNObjectClass)
  ['{A53C785C-E6BD-50CD-80C0-BBF743367026}']
  end;

  [DNTypeName('Aspose.Cells.Charts.TrendlineCollection')]
  DNTrendlineCollection = interface(DNObject)
  ['{F9924C0A-3A3B-3296-978A-C00B3B4D6E6B}']
  { getters & setters } 

    function get_Item(index: Int32): DNTrendline;
    function get_Capacity: Int32;
    procedure set_Capacity(value: Int32);
    function get_Count: Int32;

  { methods } 

    function Add(&type: DNTrendlineType): Int32; overload;
    function Add(&type: DNTrendlineType; name: string): Int32; overload;
    function BinarySearch(item: DNTrendline): Int32; overload;
    function BinarySearch(item: DNTrendline; comparer: DDN.mscorlib.DNIComparer<DNTrendline>): Int32; overload;
    function BinarySearch(index: Int32; count: Int32; item: DNTrendline; comparer: DDN.mscorlib.DNIComparer<DNTrendline>): Int32; overload;
    function &Contains(item: DNTrendline): Boolean;
    procedure CopyTo(&array: TArray<DNTrendline>); overload;
    procedure CopyTo(&array: TArray<DNTrendline>; arrayIndex: Int32); overload;
    procedure CopyTo(index: Int32; &array: TArray<DNTrendline>; arrayIndex: Int32; count: Int32); overload;
    function Exists(match: DDN.mscorlib.DNPredicate<DNTrendline>): Boolean;
    function Find(match: DDN.mscorlib.DNPredicate<DNTrendline>): DNTrendline;
    function FindAll(match: DDN.mscorlib.DNPredicate<DNTrendline>): DDN.mscorlib.DNList<DNTrendline>;
    function FindIndex(match: DDN.mscorlib.DNPredicate<DNTrendline>): Int32; overload;
    function FindIndex(startIndex: Int32; match: DDN.mscorlib.DNPredicate<DNTrendline>): Int32; overload;
    function FindIndex(startIndex: Int32; count: Int32; match: DDN.mscorlib.DNPredicate<DNTrendline>): Int32; overload;
    function FindLast(match: DDN.mscorlib.DNPredicate<DNTrendline>): DNTrendline;
    function FindLastIndex(match: DDN.mscorlib.DNPredicate<DNTrendline>): Int32; overload;
    function FindLastIndex(startIndex: Int32; match: DDN.mscorlib.DNPredicate<DNTrendline>): Int32; overload;
    function FindLastIndex(startIndex: Int32; count: Int32; match: DDN.mscorlib.DNPredicate<DNTrendline>): Int32; overload;
    function IndexOf(item: DNTrendline): Int32; overload;
    function IndexOf(item: DNTrendline; index: Int32): Int32; overload;
    function IndexOf(item: DNTrendline; index: Int32; count: Int32): Int32; overload;
    function LastIndexOf(item: DNTrendline): Int32; overload;
    function LastIndexOf(item: DNTrendline; index: Int32): Int32; overload;
    function LastIndexOf(item: DNTrendline; index: Int32; count: Int32): Int32; overload;
    function GetEnumerator: DDN.mscorlib.DNIEnumerator<DNTrendline>;
    procedure RemoveAt(index: Int32);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Item[index: Int32]: DNTrendline read get_Item; default;
    property Capacity: Int32 read get_Capacity write set_Capacity;
    property Count: Int32 read get_Count;
  end;

  TDNTrendlineCollection = class(TDNGenericImport<DNTrendlineCollectionClass, DNTrendlineCollection>) end;

  //-------------namespace: Aspose.Cells----------------
  DNColumnCollectionClass = interface(DNObjectClass)
  ['{E67AA4B9-0A87-5EF1-A460-EFAC1382ED35}']
  end;

  [DNTypeName('Aspose.Cells.ColumnCollection')]
  DNColumnCollection = interface(DNObject)
  ['{97F9993E-BFF4-3B90-8960-E47DC1BB0382}']
  { getters & setters } 

    function get_Item(columnIndex: Int32): DNColumn;
    function get_Capacity: Int32;
    procedure set_Capacity(value: Int32);
    function get_Count: Int32;

  { methods } 

    function GetByIndex(index: Int32): DNColumn;
    function GetColumnByIndex(index: Int32): DNColumn;
    function BinarySearch(item: DNColumn): Int32; overload;
    function BinarySearch(item: DNColumn; comparer: DDN.mscorlib.DNIComparer<DNColumn>): Int32; overload;
    function BinarySearch(index: Int32; count: Int32; item: DNColumn; comparer: DDN.mscorlib.DNIComparer<DNColumn>): Int32; overload;
    function &Contains(item: DNColumn): Boolean;
    procedure CopyTo(&array: TArray<DNColumn>); overload;
    procedure CopyTo(&array: TArray<DNColumn>; arrayIndex: Int32); overload;
    procedure CopyTo(index: Int32; &array: TArray<DNColumn>; arrayIndex: Int32; count: Int32); overload;
    function Exists(match: DDN.mscorlib.DNPredicate<DNColumn>): Boolean;
    function Find(match: DDN.mscorlib.DNPredicate<DNColumn>): DNColumn;
    function FindAll(match: DDN.mscorlib.DNPredicate<DNColumn>): DDN.mscorlib.DNList<DNColumn>;
    function FindIndex(match: DDN.mscorlib.DNPredicate<DNColumn>): Int32; overload;
    function FindIndex(startIndex: Int32; match: DDN.mscorlib.DNPredicate<DNColumn>): Int32; overload;
    function FindIndex(startIndex: Int32; count: Int32; match: DDN.mscorlib.DNPredicate<DNColumn>): Int32; overload;
    function FindLast(match: DDN.mscorlib.DNPredicate<DNColumn>): DNColumn;
    function FindLastIndex(match: DDN.mscorlib.DNPredicate<DNColumn>): Int32; overload;
    function FindLastIndex(startIndex: Int32; match: DDN.mscorlib.DNPredicate<DNColumn>): Int32; overload;
    function FindLastIndex(startIndex: Int32; count: Int32; match: DDN.mscorlib.DNPredicate<DNColumn>): Int32; overload;
    function IndexOf(item: DNColumn): Int32; overload;
    function IndexOf(item: DNColumn; index: Int32): Int32; overload;
    function IndexOf(item: DNColumn; index: Int32; count: Int32): Int32; overload;
    function LastIndexOf(item: DNColumn): Int32; overload;
    function LastIndexOf(item: DNColumn; index: Int32): Int32; overload;
    function LastIndexOf(item: DNColumn; index: Int32; count: Int32): Int32; overload;
    function GetEnumerator: DDN.mscorlib.DNIEnumerator<DNColumn>;
    procedure RemoveAt(index: Int32);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Item[columnIndex: Int32]: DNColumn read get_Item; default;
    property Capacity: Int32 read get_Capacity write set_Capacity;
    property Count: Int32 read get_Count;
  end;

  TDNColumnCollection = class(TDNGenericImport<DNColumnCollectionClass, DNColumnCollection>) end;

  //-------------namespace: Aspose.Cells----------------
  DNCommentCollectionClass = interface(DNObjectClass)
  ['{BED0AD9E-5193-57A4-9685-5D97E3E9C9BC}']
  end;

  [DNTypeName('Aspose.Cells.CommentCollection')]
  DNCommentCollection = interface(DNObject)
  ['{8C33E2E3-868B-39DA-970D-08F58FC5733A}']
  { getters & setters } 

    function get_Item(index: Int32): DNComment; overload;
    function get_Item(cellName: string): DNComment; overload;
    function get_Item(row: Int32; column: Int32): DNComment; overload;
    function get_Capacity: Int32;
    procedure set_Capacity(value: Int32);
    function get_Count: Int32;

  { methods } 

    function AddThreadedComment(row: Int32; column: Int32; text: string; author: DNThreadedCommentAuthor): Int32; overload;
    function AddThreadedComment(cellName: string; text: string; author: DNThreadedCommentAuthor): Int32; overload;
    function GetThreadedComments(row: Int32; column: Int32): DNThreadedCommentCollection; overload;
    function GetThreadedComments(cellName: string): DNThreadedCommentCollection; overload;
    function Add(row: Int32; column: Int32): Int32; overload;
    function Add(cellName: string): Int32; overload;
    procedure RemoveAt(cellName: string); overload;
    procedure RemoveAt(row: Int32; column: Int32); overload;
    procedure Clear;
    function BinarySearch(item: DNComment): Int32; overload;
    function BinarySearch(item: DNComment; comparer: DDN.mscorlib.DNIComparer<DNComment>): Int32; overload;
    function BinarySearch(index: Int32; count: Int32; item: DNComment; comparer: DDN.mscorlib.DNIComparer<DNComment>): Int32; overload;
    function &Contains(item: DNComment): Boolean;
    procedure CopyTo(&array: TArray<DNComment>); overload;
    procedure CopyTo(&array: TArray<DNComment>; arrayIndex: Int32); overload;
    procedure CopyTo(index: Int32; &array: TArray<DNComment>; arrayIndex: Int32; count: Int32); overload;
    function Exists(match: DDN.mscorlib.DNPredicate<DNComment>): Boolean;
    function Find(match: DDN.mscorlib.DNPredicate<DNComment>): DNComment;
    function FindAll(match: DDN.mscorlib.DNPredicate<DNComment>): DDN.mscorlib.DNList<DNComment>;
    function FindIndex(match: DDN.mscorlib.DNPredicate<DNComment>): Int32; overload;
    function FindIndex(startIndex: Int32; match: DDN.mscorlib.DNPredicate<DNComment>): Int32; overload;
    function FindIndex(startIndex: Int32; count: Int32; match: DDN.mscorlib.DNPredicate<DNComment>): Int32; overload;
    function FindLast(match: DDN.mscorlib.DNPredicate<DNComment>): DNComment;
    function FindLastIndex(match: DDN.mscorlib.DNPredicate<DNComment>): Int32; overload;
    function FindLastIndex(startIndex: Int32; match: DDN.mscorlib.DNPredicate<DNComment>): Int32; overload;
    function FindLastIndex(startIndex: Int32; count: Int32; match: DDN.mscorlib.DNPredicate<DNComment>): Int32; overload;
    function IndexOf(item: DNComment): Int32; overload;
    function IndexOf(item: DNComment; index: Int32): Int32; overload;
    function IndexOf(item: DNComment; index: Int32; count: Int32): Int32; overload;
    function LastIndexOf(item: DNComment): Int32; overload;
    function LastIndexOf(item: DNComment; index: Int32): Int32; overload;
    function LastIndexOf(item: DNComment; index: Int32; count: Int32): Int32; overload;
    function GetEnumerator: DDN.mscorlib.DNIEnumerator<DNComment>;
    procedure RemoveAt(index: Int32); overload;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Item[index: Int32]: DNComment read get_Item; default;
    property Item[cellName: string]: DNComment read get_Item; default;
    property Item[row: Int32; column: Int32]: DNComment read get_Item; default;
    property Capacity: Int32 read get_Capacity write set_Capacity;
    property Count: Int32 read get_Count;
  end;

  TDNCommentCollection = class(TDNGenericImport<DNCommentCollectionClass, DNCommentCollection>) end;

  //-------------namespace: Aspose.Cells----------------
  DNConditionalFormattingIconCollectionClass = interface(DNObjectClass)
  ['{43D302DB-1CC3-5C4E-B992-C8AC91018D67}']
  end;

  [DNTypeName('Aspose.Cells.ConditionalFormattingIconCollection')]
  DNConditionalFormattingIconCollection = interface(DNObject)
  ['{1B87EAF2-5263-3F3E-AB09-0765D063591E}']
  { getters & setters } 

    function get_Item(index: Int32): DNConditionalFormattingIcon;
    function get_Capacity: Int32;
    procedure set_Capacity(value: Int32);
    function get_Count: Int32;

  { methods } 

    function Add(&type: DNIconSetType; index: Int32): Int32; overload;
    function Add(cficon: DNConditionalFormattingIcon): Int32; overload;
    function BinarySearch(item: DNConditionalFormattingIcon): Int32; overload;
    function BinarySearch(item: DNConditionalFormattingIcon; comparer: DDN.mscorlib.DNIComparer<DNConditionalFormattingIcon>): Int32; overload;
    function BinarySearch(index: Int32; count: Int32; item: DNConditionalFormattingIcon; comparer: DDN.mscorlib.DNIComparer<DNConditionalFormattingIcon>): Int32; overload;
    function &Contains(item: DNConditionalFormattingIcon): Boolean;
    procedure CopyTo(&array: TArray<DNConditionalFormattingIcon>); overload;
    procedure CopyTo(&array: TArray<DNConditionalFormattingIcon>; arrayIndex: Int32); overload;
    procedure CopyTo(index: Int32; &array: TArray<DNConditionalFormattingIcon>; arrayIndex: Int32; count: Int32); overload;
    function Exists(match: DDN.mscorlib.DNPredicate<DNConditionalFormattingIcon>): Boolean;
    function Find(match: DDN.mscorlib.DNPredicate<DNConditionalFormattingIcon>): DNConditionalFormattingIcon;
    function FindAll(match: DDN.mscorlib.DNPredicate<DNConditionalFormattingIcon>): DDN.mscorlib.DNList<DNConditionalFormattingIcon>;
    function FindIndex(match: DDN.mscorlib.DNPredicate<DNConditionalFormattingIcon>): Int32; overload;
    function FindIndex(startIndex: Int32; match: DDN.mscorlib.DNPredicate<DNConditionalFormattingIcon>): Int32; overload;
    function FindIndex(startIndex: Int32; count: Int32; match: DDN.mscorlib.DNPredicate<DNConditionalFormattingIcon>): Int32; overload;
    function FindLast(match: DDN.mscorlib.DNPredicate<DNConditionalFormattingIcon>): DNConditionalFormattingIcon;
    function FindLastIndex(match: DDN.mscorlib.DNPredicate<DNConditionalFormattingIcon>): Int32; overload;
    function FindLastIndex(startIndex: Int32; match: DDN.mscorlib.DNPredicate<DNConditionalFormattingIcon>): Int32; overload;
    function FindLastIndex(startIndex: Int32; count: Int32; match: DDN.mscorlib.DNPredicate<DNConditionalFormattingIcon>): Int32; overload;
    function IndexOf(item: DNConditionalFormattingIcon): Int32; overload;
    function IndexOf(item: DNConditionalFormattingIcon; index: Int32): Int32; overload;
    function IndexOf(item: DNConditionalFormattingIcon; index: Int32; count: Int32): Int32; overload;
    function LastIndexOf(item: DNConditionalFormattingIcon): Int32; overload;
    function LastIndexOf(item: DNConditionalFormattingIcon; index: Int32): Int32; overload;
    function LastIndexOf(item: DNConditionalFormattingIcon; index: Int32; count: Int32): Int32; overload;
    function GetEnumerator: DDN.mscorlib.DNIEnumerator<DNConditionalFormattingIcon>;
    procedure RemoveAt(index: Int32);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Item[index: Int32]: DNConditionalFormattingIcon read get_Item; default;
    property Capacity: Int32 read get_Capacity write set_Capacity;
    property Count: Int32 read get_Count;
  end;

  TDNConditionalFormattingIconCollection = class(TDNGenericImport<DNConditionalFormattingIconCollectionClass, DNConditionalFormattingIconCollection>) end;

  //-------------namespace: Aspose.Cells----------------
  DNConditionalFormattingValueCollectionClass = interface(DNObjectClass)
  ['{6CB096D1-7A30-5D0D-943A-5F91E2541726}']
  end;

  [DNTypeName('Aspose.Cells.ConditionalFormattingValueCollection')]
  DNConditionalFormattingValueCollection = interface(DNObject)
  ['{88D06D82-4622-3D6A-9EFF-8D687A6782DC}']
  { getters & setters } 

    function get_Item(index: Int32): DNConditionalFormattingValue;
    function get_Capacity: Int32;
    procedure set_Capacity(value: Int32);
    function get_Count: Int32;

  { methods } 

    function Add(&type: DNFormatConditionValueType; value: string): Int32;
    function BinarySearch(item: DNConditionalFormattingValue): Int32; overload;
    function BinarySearch(item: DNConditionalFormattingValue; comparer: DDN.mscorlib.DNIComparer<DNConditionalFormattingValue>): Int32; overload;
    function BinarySearch(index: Int32; count: Int32; item: DNConditionalFormattingValue; comparer: DDN.mscorlib.DNIComparer<DNConditionalFormattingValue>): Int32; overload;
    function &Contains(item: DNConditionalFormattingValue): Boolean;
    procedure CopyTo(&array: TArray<DNConditionalFormattingValue>); overload;
    procedure CopyTo(&array: TArray<DNConditionalFormattingValue>; arrayIndex: Int32); overload;
    procedure CopyTo(index: Int32; &array: TArray<DNConditionalFormattingValue>; arrayIndex: Int32; count: Int32); overload;
    function Exists(match: DDN.mscorlib.DNPredicate<DNConditionalFormattingValue>): Boolean;
    function Find(match: DDN.mscorlib.DNPredicate<DNConditionalFormattingValue>): DNConditionalFormattingValue;
    function FindAll(match: DDN.mscorlib.DNPredicate<DNConditionalFormattingValue>): DDN.mscorlib.DNList<DNConditionalFormattingValue>;
    function FindIndex(match: DDN.mscorlib.DNPredicate<DNConditionalFormattingValue>): Int32; overload;
    function FindIndex(startIndex: Int32; match: DDN.mscorlib.DNPredicate<DNConditionalFormattingValue>): Int32; overload;
    function FindIndex(startIndex: Int32; count: Int32; match: DDN.mscorlib.DNPredicate<DNConditionalFormattingValue>): Int32; overload;
    function FindLast(match: DDN.mscorlib.DNPredicate<DNConditionalFormattingValue>): DNConditionalFormattingValue;
    function FindLastIndex(match: DDN.mscorlib.DNPredicate<DNConditionalFormattingValue>): Int32; overload;
    function FindLastIndex(startIndex: Int32; match: DDN.mscorlib.DNPredicate<DNConditionalFormattingValue>): Int32; overload;
    function FindLastIndex(startIndex: Int32; count: Int32; match: DDN.mscorlib.DNPredicate<DNConditionalFormattingValue>): Int32; overload;
    function IndexOf(item: DNConditionalFormattingValue): Int32; overload;
    function IndexOf(item: DNConditionalFormattingValue; index: Int32): Int32; overload;
    function IndexOf(item: DNConditionalFormattingValue; index: Int32; count: Int32): Int32; overload;
    function LastIndexOf(item: DNConditionalFormattingValue): Int32; overload;
    function LastIndexOf(item: DNConditionalFormattingValue; index: Int32): Int32; overload;
    function LastIndexOf(item: DNConditionalFormattingValue; index: Int32; count: Int32): Int32; overload;
    function GetEnumerator: DDN.mscorlib.DNIEnumerator<DNConditionalFormattingValue>;
    procedure RemoveAt(index: Int32);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Item[index: Int32]: DNConditionalFormattingValue read get_Item; default;
    property Capacity: Int32 read get_Capacity write set_Capacity;
    property Count: Int32 read get_Count;
  end;

  TDNConditionalFormattingValueCollection = class(TDNGenericImport<DNConditionalFormattingValueCollectionClass, DNConditionalFormattingValueCollection>) end;

  //-------------namespace: Aspose.Cells----------------
  DNCustomFilterCollectionClass = interface(DNObjectClass)
  ['{DBA3B473-01F0-5B75-B98E-1670E3D7FBB7}']
  { constructors } 

    {class} function init: DNCustomFilterCollection;

  end;

  [DNTypeName('Aspose.Cells.CustomFilterCollection')]
  DNCustomFilterCollection = interface(DNObject)
  ['{FAEE49EC-D85F-365B-BCCA-45739034FC11}']
  { getters & setters } 

    function get_And: Boolean;
    procedure set_And(value: Boolean);
    function get_Item(index: Int32): DNCustomFilter;
    function get_Capacity: Int32;
    procedure set_Capacity(value: Int32);
    function get_Count: Int32;

  { methods } 

    function BinarySearch(item: DNCustomFilter): Int32; overload;
    function BinarySearch(item: DNCustomFilter; comparer: DDN.mscorlib.DNIComparer<DNCustomFilter>): Int32; overload;
    function BinarySearch(index: Int32; count: Int32; item: DNCustomFilter; comparer: DDN.mscorlib.DNIComparer<DNCustomFilter>): Int32; overload;
    function &Contains(item: DNCustomFilter): Boolean;
    procedure CopyTo(&array: TArray<DNCustomFilter>); overload;
    procedure CopyTo(&array: TArray<DNCustomFilter>; arrayIndex: Int32); overload;
    procedure CopyTo(index: Int32; &array: TArray<DNCustomFilter>; arrayIndex: Int32; count: Int32); overload;
    function Exists(match: DDN.mscorlib.DNPredicate<DNCustomFilter>): Boolean;
    function Find(match: DDN.mscorlib.DNPredicate<DNCustomFilter>): DNCustomFilter;
    function FindAll(match: DDN.mscorlib.DNPredicate<DNCustomFilter>): DDN.mscorlib.DNList<DNCustomFilter>;
    function FindIndex(match: DDN.mscorlib.DNPredicate<DNCustomFilter>): Int32; overload;
    function FindIndex(startIndex: Int32; match: DDN.mscorlib.DNPredicate<DNCustomFilter>): Int32; overload;
    function FindIndex(startIndex: Int32; count: Int32; match: DDN.mscorlib.DNPredicate<DNCustomFilter>): Int32; overload;
    function FindLast(match: DDN.mscorlib.DNPredicate<DNCustomFilter>): DNCustomFilter;
    function FindLastIndex(match: DDN.mscorlib.DNPredicate<DNCustomFilter>): Int32; overload;
    function FindLastIndex(startIndex: Int32; match: DDN.mscorlib.DNPredicate<DNCustomFilter>): Int32; overload;
    function FindLastIndex(startIndex: Int32; count: Int32; match: DDN.mscorlib.DNPredicate<DNCustomFilter>): Int32; overload;
    function IndexOf(item: DNCustomFilter): Int32; overload;
    function IndexOf(item: DNCustomFilter; index: Int32): Int32; overload;
    function IndexOf(item: DNCustomFilter; index: Int32; count: Int32): Int32; overload;
    function LastIndexOf(item: DNCustomFilter): Int32; overload;
    function LastIndexOf(item: DNCustomFilter; index: Int32): Int32; overload;
    function LastIndexOf(item: DNCustomFilter; index: Int32; count: Int32): Int32; overload;
    function GetEnumerator: DDN.mscorlib.DNIEnumerator<DNCustomFilter>;
    procedure RemoveAt(index: Int32);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property &And: Boolean read get_And write set_And;
    property Item[index: Int32]: DNCustomFilter read get_Item; default;
    property Capacity: Int32 read get_Capacity write set_Capacity;
    property Count: Int32 read get_Count;
  end;

  TDNCustomFilterCollection = class(TDNGenericImport<DNCustomFilterCollectionClass, DNCustomFilterCollection>) end;

  //-------------namespace: Aspose.Cells----------------
  DNDataSorterKeyCollectionClass = interface(DNObjectClass)
  ['{C4A87B48-2DBA-5E70-BCC5-110A7CA6731E}']
  { constructors } 

    {class} function init: DNDataSorterKeyCollection;

  end;

  [DNTypeName('Aspose.Cells.DataSorterKeyCollection')]
  DNDataSorterKeyCollection = interface(DNObject)
  ['{7A14F0DD-3025-3185-B43A-83C9EBB0BCCC}']
  { getters & setters } 

    function get_Item(index: Int32): DNDataSorterKey;
    function get_Capacity: Int32;
    procedure set_Capacity(value: Int32);
    function get_Count: Int32;

  { methods } 

    function BinarySearch(item: DNDataSorterKey): Int32; overload;
    function BinarySearch(item: DNDataSorterKey; comparer: DDN.mscorlib.DNIComparer<DNDataSorterKey>): Int32; overload;
    function BinarySearch(index: Int32; count: Int32; item: DNDataSorterKey; comparer: DDN.mscorlib.DNIComparer<DNDataSorterKey>): Int32; overload;
    function &Contains(item: DNDataSorterKey): Boolean;
    procedure CopyTo(&array: TArray<DNDataSorterKey>); overload;
    procedure CopyTo(&array: TArray<DNDataSorterKey>; arrayIndex: Int32); overload;
    procedure CopyTo(index: Int32; &array: TArray<DNDataSorterKey>; arrayIndex: Int32; count: Int32); overload;
    function Exists(match: DDN.mscorlib.DNPredicate<DNDataSorterKey>): Boolean;
    function Find(match: DDN.mscorlib.DNPredicate<DNDataSorterKey>): DNDataSorterKey;
    function FindAll(match: DDN.mscorlib.DNPredicate<DNDataSorterKey>): DDN.mscorlib.DNList<DNDataSorterKey>;
    function FindIndex(match: DDN.mscorlib.DNPredicate<DNDataSorterKey>): Int32; overload;
    function FindIndex(startIndex: Int32; match: DDN.mscorlib.DNPredicate<DNDataSorterKey>): Int32; overload;
    function FindIndex(startIndex: Int32; count: Int32; match: DDN.mscorlib.DNPredicate<DNDataSorterKey>): Int32; overload;
    function FindLast(match: DDN.mscorlib.DNPredicate<DNDataSorterKey>): DNDataSorterKey;
    function FindLastIndex(match: DDN.mscorlib.DNPredicate<DNDataSorterKey>): Int32; overload;
    function FindLastIndex(startIndex: Int32; match: DDN.mscorlib.DNPredicate<DNDataSorterKey>): Int32; overload;
    function FindLastIndex(startIndex: Int32; count: Int32; match: DDN.mscorlib.DNPredicate<DNDataSorterKey>): Int32; overload;
    function IndexOf(item: DNDataSorterKey): Int32; overload;
    function IndexOf(item: DNDataSorterKey; index: Int32): Int32; overload;
    function IndexOf(item: DNDataSorterKey; index: Int32; count: Int32): Int32; overload;
    function LastIndexOf(item: DNDataSorterKey): Int32; overload;
    function LastIndexOf(item: DNDataSorterKey; index: Int32): Int32; overload;
    function LastIndexOf(item: DNDataSorterKey; index: Int32; count: Int32): Int32; overload;
    function GetEnumerator: DDN.mscorlib.DNIEnumerator<DNDataSorterKey>;
    procedure RemoveAt(index: Int32);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Item[index: Int32]: DNDataSorterKey read get_Item; default;
    property Capacity: Int32 read get_Capacity write set_Capacity;
    property Count: Int32 read get_Count;
  end;

  TDNDataSorterKeyCollection = class(TDNGenericImport<DNDataSorterKeyCollectionClass, DNDataSorterKeyCollection>) end;

  //-------------namespace: Aspose.Cells.Drawing----------------
  DNCheckBoxCollectionClass = interface(DNObjectClass)
  ['{843B6CEB-22A1-5239-AAC9-4057978CE5EE}']
  end;

  [DNTypeName('Aspose.Cells.Drawing.CheckBoxCollection')]
  DNCheckBoxCollection = interface(DNObject)
  ['{D2E840D1-8335-3A81-AFEC-92A65F8A93BF}']
  { getters & setters } 

    function get_Item(index: Int32): DNCheckBox;
    function get_Capacity: Int32;
    procedure set_Capacity(value: Int32);
    function get_Count: Int32;

  { methods } 

    function Add(upperLeftRow: Int32; upperLeftColumn: Int32; height: Int32; width: Int32): Int32;
    function BinarySearch(item: DNCheckBox): Int32; overload;
    function BinarySearch(item: DNCheckBox; comparer: DDN.mscorlib.DNIComparer<DNCheckBox>): Int32; overload;
    function BinarySearch(index: Int32; count: Int32; item: DNCheckBox; comparer: DDN.mscorlib.DNIComparer<DNCheckBox>): Int32; overload;
    function &Contains(item: DNCheckBox): Boolean;
    procedure CopyTo(&array: TArray<DNCheckBox>); overload;
    procedure CopyTo(&array: TArray<DNCheckBox>; arrayIndex: Int32); overload;
    procedure CopyTo(index: Int32; &array: TArray<DNCheckBox>; arrayIndex: Int32; count: Int32); overload;
    function Exists(match: DDN.mscorlib.DNPredicate<DNCheckBox>): Boolean;
    function Find(match: DDN.mscorlib.DNPredicate<DNCheckBox>): DNCheckBox;
    function FindAll(match: DDN.mscorlib.DNPredicate<DNCheckBox>): DDN.mscorlib.DNList<DNCheckBox>;
    function FindIndex(match: DDN.mscorlib.DNPredicate<DNCheckBox>): Int32; overload;
    function FindIndex(startIndex: Int32; match: DDN.mscorlib.DNPredicate<DNCheckBox>): Int32; overload;
    function FindIndex(startIndex: Int32; count: Int32; match: DDN.mscorlib.DNPredicate<DNCheckBox>): Int32; overload;
    function FindLast(match: DDN.mscorlib.DNPredicate<DNCheckBox>): DNCheckBox;
    function FindLastIndex(match: DDN.mscorlib.DNPredicate<DNCheckBox>): Int32; overload;
    function FindLastIndex(startIndex: Int32; match: DDN.mscorlib.DNPredicate<DNCheckBox>): Int32; overload;
    function FindLastIndex(startIndex: Int32; count: Int32; match: DDN.mscorlib.DNPredicate<DNCheckBox>): Int32; overload;
    function IndexOf(item: DNCheckBox): Int32; overload;
    function IndexOf(item: DNCheckBox; index: Int32): Int32; overload;
    function IndexOf(item: DNCheckBox; index: Int32; count: Int32): Int32; overload;
    function LastIndexOf(item: DNCheckBox): Int32; overload;
    function LastIndexOf(item: DNCheckBox; index: Int32): Int32; overload;
    function LastIndexOf(item: DNCheckBox; index: Int32; count: Int32): Int32; overload;
    function GetEnumerator: DDN.mscorlib.DNIEnumerator<DNCheckBox>;
    procedure RemoveAt(index: Int32);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Item[index: Int32]: DNCheckBox read get_Item; default;
    property Capacity: Int32 read get_Capacity write set_Capacity;
    property Count: Int32 read get_Count;
  end;

  TDNCheckBoxCollection = class(TDNGenericImport<DNCheckBoxCollectionClass, DNCheckBoxCollection>) end;

  //-------------namespace: Aspose.Cells.Drawing----------------
  DNGradientStopCollectionClass = interface(DNObjectClass)
  ['{2A48E7D8-05C7-5E5F-8830-BCEBA4AD8DC6}']
  end;

  [DNTypeName('Aspose.Cells.Drawing.GradientStopCollection')]
  DNGradientStopCollection = interface(DNObject)
  ['{60364C74-7E8E-3598-BB9B-81119452BFD6}']
  { getters & setters } 

    function get_Item(index: Int32): DNGradientStop;
    procedure set_Item(index: Int32; value: DNGradientStop);
    function get_Capacity: Int32;
    procedure set_Capacity(value: Int32);
    function get_Count: Int32;

  { methods } 

    procedure Add(position: Double; color: DNCellsColor; alpha: Int32); overload;
    procedure Add(position: Double; color: DDN.System.Drawing.DNColor; alpha: Int32); overload;
    function BinarySearch(item: DNGradientStop): Int32; overload;
    function BinarySearch(item: DNGradientStop; comparer: DDN.mscorlib.DNIComparer<DNGradientStop>): Int32; overload;
    function BinarySearch(index: Int32; count: Int32; item: DNGradientStop; comparer: DDN.mscorlib.DNIComparer<DNGradientStop>): Int32; overload;
    function &Contains(item: DNGradientStop): Boolean;
    procedure CopyTo(&array: TArray<DNGradientStop>); overload;
    procedure CopyTo(&array: TArray<DNGradientStop>; arrayIndex: Int32); overload;
    procedure CopyTo(index: Int32; &array: TArray<DNGradientStop>; arrayIndex: Int32; count: Int32); overload;
    function Exists(match: DDN.mscorlib.DNPredicate<DNGradientStop>): Boolean;
    function Find(match: DDN.mscorlib.DNPredicate<DNGradientStop>): DNGradientStop;
    function FindAll(match: DDN.mscorlib.DNPredicate<DNGradientStop>): DDN.mscorlib.DNList<DNGradientStop>;
    function FindIndex(match: DDN.mscorlib.DNPredicate<DNGradientStop>): Int32; overload;
    function FindIndex(startIndex: Int32; match: DDN.mscorlib.DNPredicate<DNGradientStop>): Int32; overload;
    function FindIndex(startIndex: Int32; count: Int32; match: DDN.mscorlib.DNPredicate<DNGradientStop>): Int32; overload;
    function FindLast(match: DDN.mscorlib.DNPredicate<DNGradientStop>): DNGradientStop;
    function FindLastIndex(match: DDN.mscorlib.DNPredicate<DNGradientStop>): Int32; overload;
    function FindLastIndex(startIndex: Int32; match: DDN.mscorlib.DNPredicate<DNGradientStop>): Int32; overload;
    function FindLastIndex(startIndex: Int32; count: Int32; match: DDN.mscorlib.DNPredicate<DNGradientStop>): Int32; overload;
    function IndexOf(item: DNGradientStop): Int32; overload;
    function IndexOf(item: DNGradientStop; index: Int32): Int32; overload;
    function IndexOf(item: DNGradientStop; index: Int32; count: Int32): Int32; overload;
    function LastIndexOf(item: DNGradientStop): Int32; overload;
    function LastIndexOf(item: DNGradientStop; index: Int32): Int32; overload;
    function LastIndexOf(item: DNGradientStop; index: Int32; count: Int32): Int32; overload;
    function GetEnumerator: DDN.mscorlib.DNIEnumerator<DNGradientStop>;
    procedure RemoveAt(index: Int32);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Item[index: Int32]: DNGradientStop read get_Item write set_Item; default;
    property Capacity: Int32 read get_Capacity write set_Capacity;
    property Count: Int32 read get_Count;
  end;

  TDNGradientStopCollection = class(TDNGenericImport<DNGradientStopCollectionClass, DNGradientStopCollection>) end;

  //-------------namespace: Aspose.Cells.Drawing----------------
  DNOleObjectCollectionClass = interface(DNObjectClass)
  ['{7A0C0A79-71D4-516D-AB76-226F8EE26743}']
  end;

  [DNTypeName('Aspose.Cells.Drawing.OleObjectCollection')]
  DNOleObjectCollection = interface(DNObject)
  ['{9555C2C5-FEA8-3673-AB0D-16B56CCC884D}']
  { getters & setters } 

    function get_Item(index: Int32): DNOleObject;
    function get_Capacity: Int32;
    procedure set_Capacity(value: Int32);
    function get_Count: Int32;

  { methods } 

    function Add(upperLeftRow: Int32; upperLeftColumn: Int32; height: Int32; width: Int32; imageData: TArray<Byte>): Int32; overload;
    function Add(upperLeftRow: Int32; upperLeftColumn: Int32; height: Int32; width: Int32; imageData: TArray<Byte>; linkedFile: string): Int32; overload;
    procedure Clear;
    procedure RemoveAt(index: Int32);
    function BinarySearch(item: DNOleObject): Int32; overload;
    function BinarySearch(item: DNOleObject; comparer: DDN.mscorlib.DNIComparer<DNOleObject>): Int32; overload;
    function BinarySearch(index: Int32; count: Int32; item: DNOleObject; comparer: DDN.mscorlib.DNIComparer<DNOleObject>): Int32; overload;
    function &Contains(item: DNOleObject): Boolean;
    procedure CopyTo(&array: TArray<DNOleObject>); overload;
    procedure CopyTo(&array: TArray<DNOleObject>; arrayIndex: Int32); overload;
    procedure CopyTo(index: Int32; &array: TArray<DNOleObject>; arrayIndex: Int32; count: Int32); overload;
    function Exists(match: DDN.mscorlib.DNPredicate<DNOleObject>): Boolean;
    function Find(match: DDN.mscorlib.DNPredicate<DNOleObject>): DNOleObject;
    function FindAll(match: DDN.mscorlib.DNPredicate<DNOleObject>): DDN.mscorlib.DNList<DNOleObject>;
    function FindIndex(match: DDN.mscorlib.DNPredicate<DNOleObject>): Int32; overload;
    function FindIndex(startIndex: Int32; match: DDN.mscorlib.DNPredicate<DNOleObject>): Int32; overload;
    function FindIndex(startIndex: Int32; count: Int32; match: DDN.mscorlib.DNPredicate<DNOleObject>): Int32; overload;
    function FindLast(match: DDN.mscorlib.DNPredicate<DNOleObject>): DNOleObject;
    function FindLastIndex(match: DDN.mscorlib.DNPredicate<DNOleObject>): Int32; overload;
    function FindLastIndex(startIndex: Int32; match: DDN.mscorlib.DNPredicate<DNOleObject>): Int32; overload;
    function FindLastIndex(startIndex: Int32; count: Int32; match: DDN.mscorlib.DNPredicate<DNOleObject>): Int32; overload;
    function IndexOf(item: DNOleObject): Int32; overload;
    function IndexOf(item: DNOleObject; index: Int32): Int32; overload;
    function IndexOf(item: DNOleObject; index: Int32; count: Int32): Int32; overload;
    function LastIndexOf(item: DNOleObject): Int32; overload;
    function LastIndexOf(item: DNOleObject; index: Int32): Int32; overload;
    function LastIndexOf(item: DNOleObject; index: Int32; count: Int32): Int32; overload;
    function GetEnumerator: DDN.mscorlib.DNIEnumerator<DNOleObject>;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Item[index: Int32]: DNOleObject read get_Item; default;
    property Capacity: Int32 read get_Capacity write set_Capacity;
    property Count: Int32 read get_Count;
  end;

  TDNOleObjectCollection = class(TDNGenericImport<DNOleObjectCollectionClass, DNOleObjectCollection>) end;

  //-------------namespace: Aspose.Cells.Drawing----------------
  DNPictureCollectionClass = interface(DNObjectClass)
  ['{87A756EF-C343-588D-90A9-9CBB8EA5C627}']
  end;

  [DNTypeName('Aspose.Cells.Drawing.PictureCollection')]
  DNPictureCollection = interface(DNObject)
  ['{1166BD18-DB39-3B1A-894B-DCE82A0838FC}']
  { getters & setters } 

    function get_Item(index: Int32): DNPicture;
    function get_Capacity: Int32;
    procedure set_Capacity(value: Int32);
    function get_Count: Int32;

  { methods } 

    function Add(upperLeftRow: Int32; upperLeftColumn: Int32; lowerRightRow: Int32; lowerRightColumn: Int32; stream: DDN.mscorlib.DNStream): Int32; overload;
    function Add(upperLeftRow: Int32; upperLeftColumn: Int32; lowerRightRow: Int32; lowerRightColumn: Int32; fileName: string): Int32; overload;
    function Add(upperLeftRow: Int32; upperLeftColumn: Int32; stream: DDN.mscorlib.DNStream): Int32; overload;
    function Add(upperLeftRow: Int32; upperLeftColumn: Int32; fileName: string): Int32; overload;
    function Add(upperLeftRow: Int32; upperLeftColumn: Int32; stream: DDN.mscorlib.DNStream; widthScale: Int32; heightScale: Int32): Int32; overload;
    function Add(upperLeftRow: Int32; upperLeftColumn: Int32; fileName: string; widthScale: Int32; heightScale: Int32): Int32; overload;
    procedure Clear;
    procedure RemoveAt(index: Int32);
    function BinarySearch(item: DNPicture): Int32; overload;
    function BinarySearch(item: DNPicture; comparer: DDN.mscorlib.DNIComparer<DNPicture>): Int32; overload;
    function BinarySearch(index: Int32; count: Int32; item: DNPicture; comparer: DDN.mscorlib.DNIComparer<DNPicture>): Int32; overload;
    function &Contains(item: DNPicture): Boolean;
    procedure CopyTo(&array: TArray<DNPicture>); overload;
    procedure CopyTo(&array: TArray<DNPicture>; arrayIndex: Int32); overload;
    procedure CopyTo(index: Int32; &array: TArray<DNPicture>; arrayIndex: Int32; count: Int32); overload;
    function Exists(match: DDN.mscorlib.DNPredicate<DNPicture>): Boolean;
    function Find(match: DDN.mscorlib.DNPredicate<DNPicture>): DNPicture;
    function FindAll(match: DDN.mscorlib.DNPredicate<DNPicture>): DDN.mscorlib.DNList<DNPicture>;
    function FindIndex(match: DDN.mscorlib.DNPredicate<DNPicture>): Int32; overload;
    function FindIndex(startIndex: Int32; match: DDN.mscorlib.DNPredicate<DNPicture>): Int32; overload;
    function FindIndex(startIndex: Int32; count: Int32; match: DDN.mscorlib.DNPredicate<DNPicture>): Int32; overload;
    function FindLast(match: DDN.mscorlib.DNPredicate<DNPicture>): DNPicture;
    function FindLastIndex(match: DDN.mscorlib.DNPredicate<DNPicture>): Int32; overload;
    function FindLastIndex(startIndex: Int32; match: DDN.mscorlib.DNPredicate<DNPicture>): Int32; overload;
    function FindLastIndex(startIndex: Int32; count: Int32; match: DDN.mscorlib.DNPredicate<DNPicture>): Int32; overload;
    function IndexOf(item: DNPicture): Int32; overload;
    function IndexOf(item: DNPicture; index: Int32): Int32; overload;
    function IndexOf(item: DNPicture; index: Int32; count: Int32): Int32; overload;
    function LastIndexOf(item: DNPicture): Int32; overload;
    function LastIndexOf(item: DNPicture; index: Int32): Int32; overload;
    function LastIndexOf(item: DNPicture; index: Int32; count: Int32): Int32; overload;
    function GetEnumerator: DDN.mscorlib.DNIEnumerator<DNPicture>;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Item[index: Int32]: DNPicture read get_Item; default;
    property Capacity: Int32 read get_Capacity write set_Capacity;
    property Count: Int32 read get_Count;
  end;

  TDNPictureCollection = class(TDNGenericImport<DNPictureCollectionClass, DNPictureCollection>) end;

  //-------------namespace: Aspose.Cells.Drawing----------------
  DNShapeCollectionClass = interface(DNObjectClass)
  ['{4DFF8958-599A-511C-8D6E-4E6BD90064A7}']
  end;

  [DNTypeName('Aspose.Cells.Drawing.ShapeCollection')]
  DNShapeCollection = interface(DNObject)
  ['{EBE27A46-6B0A-3F39-AA95-4914A9D2F4C1}']
  { getters & setters } 

    function get_Item(index: Int32): DNShape; overload;
    function get_Item(name: string): DNShape; overload;
    function get_Capacity: Int32;
    procedure set_Capacity(value: Int32);
    function get_Count: Int32;

  { methods } 

    function AddCopy(sourceShape: DNShape; upperLeftRow: Int32; top: Int32; upperLeftColumn: Int32; left: Int32): DNShape;
    function AddCheckBox(upperLeftRow: Int32; top: Int32; upperLeftColumn: Int32; left: Int32; height: Int32; width: Int32): DNCheckBox;
    function AddTextBox(upperLeftRow: Int32; top: Int32; upperLeftColumn: Int32; left: Int32; height: Int32; width: Int32): DNTextBox;
    function AddSpinner(upperLeftRow: Int32; top: Int32; upperLeftColumn: Int32; left: Int32; height: Int32; width: Int32): DNSpinner;
    function AddScrollBar(upperLeftRow: Int32; top: Int32; upperLeftColumn: Int32; left: Int32; height: Int32; width: Int32): DNScrollBar;
    function AddRadioButton(upperLeftRow: Int32; top: Int32; upperLeftColumn: Int32; left: Int32; height: Int32; width: Int32): DNRadioButton;
    function AddListBox(upperLeftRow: Int32; top: Int32; upperLeftColumn: Int32; left: Int32; height: Int32; width: Int32): DNListBox;
    function AddComboBox(upperLeftRow: Int32; top: Int32; upperLeftColumn: Int32; left: Int32; height: Int32; width: Int32): DNComboBox;
    function AddGroupBox(upperLeftRow: Int32; top: Int32; upperLeftColumn: Int32; left: Int32; height: Int32; width: Int32): DNGroupBox;
    function AddButton(upperLeftRow: Int32; top: Int32; upperLeftColumn: Int32; left: Int32; height: Int32; width: Int32): DNButton;
    function AddLabel(upperLeftRow: Int32; top: Int32; upperLeftColumn: Int32; left: Int32; height: Int32; width: Int32): DNLabel;
    function AddLabelInChart(top: Int32; left: Int32; height: Int32; width: Int32): DNLabel;
    function AddTextBoxInChart(top: Int32; left: Int32; height: Int32; width: Int32): DNTextBox;
    function AddTextEffectInChart(effect: DNMsoPresetTextEffect; text: string; fontName: string; size: Int32; fontBold: Boolean; fontItalic: Boolean; top: Int32; left: Int32; height: Int32; width: Int32): DNShape;
    function AddTextEffect(effect: DNMsoPresetTextEffect; text: string; fontName: string; size: Int32; fontBold: Boolean; fontItalic: Boolean; upperLeftRow: Int32; top: Int32; upperLeftColumn: Int32; left: Int32; height: Int32; width: Int32): DNShape;
    function AddWordArt(style: DNPresetWordArtStyle; text: string; upperLeftRow: Int32; top: Int32; upperLeftColumn: Int32; left: Int32; height: Int32; width: Int32): DNShape;
    function AddRectangle(upperLeftRow: Int32; top: Int32; upperLeftColumn: Int32; left: Int32; height: Int32; width: Int32): DNRectangleShape;
    function AddOval(upperLeftRow: Int32; top: Int32; upperLeftColumn: Int32; left: Int32; height: Int32; width: Int32): DNOval;
    function AddLine(upperLeftRow: Int32; top: Int32; upperLeftColumn: Int32; left: Int32; height: Int32; width: Int32): DNLineShape;
    function AddFreeFloatingShape(&type: DNMsoDrawingType; top: Int32; left: Int32; height: Int32; width: Int32; imageData: TArray<Byte>; isOriginalSize: Boolean): DNShape;
    function AddShapeInChart(&type: DNMsoDrawingType; placement: DNPlacementType; left: Int32; top: Int32; right: Int32; bottom: Int32; imageData: TArray<Byte>): DNShape; overload;
    function AddShapeInChart(&type: DNMsoDrawingType; placement: DNPlacementType; left: Int32; top: Int32; right: Int32; bottom: Int32): DNShape; overload;
    function AddArc(upperLeftRow: Int32; top: Int32; upperLeftColumn: Int32; left: Int32; height: Int32; width: Int32): DNArcShape;
    function AddShape(&type: DNMsoDrawingType; upperLeftRow: Int32; top: Int32; upperLeftColumn: Int32; left: Int32; height: Int32; width: Int32): DNShape;
    function AddAutoShape(&type: DNAutoShapeType; upperLeftRow: Int32; top: Int32; upperLeftColumn: Int32; left: Int32; height: Int32; width: Int32): DNShape;
    function AddAutoShapeInChart(&type: DNAutoShapeType; top: Int32; left: Int32; height: Int32; width: Int32): DNShape;
    function AddActiveXControl(&type: DNControlType; topRow: Int32; top: Int32; leftColumn: Int32; left: Int32; width: Int32; height: Int32): DNShape;
    function AddPicture(upperLeftRow: Int32; upperLeftColumn: Int32; lowerRightRow: Int32; lowerRightColumn: Int32; stream: DDN.mscorlib.DNStream): DNPicture; overload;
    function AddPicture(upperLeftRow: Int32; upperLeftColumn: Int32; stream: DDN.mscorlib.DNStream; widthScale: Int32; heightScale: Int32): DNPicture; overload;
    function AddSvg(upperLeftRow: Int32; top: Int32; upperLeftColumn: Int32; left: Int32; height: Int32; width: Int32; svgData: TArray<Byte>; compatibleImageData: TArray<Byte>): DNPicture;
    function AddLinkedPicture(upperLeftRow: Int32; upperLeftColumn: Int32; height: Int32; width: Int32; sourceFullName: string): DNPicture;
    function AddOleObjectWithLinkedImage(upperLeftRow: Int32; upperLeftColumn: Int32; height: Int32; width: Int32; sourceFullName: string): DNOleObject;
    function AddPictureInChart(top: Int32; left: Int32; stream: DDN.mscorlib.DNStream; widthScale: Int32; heightScale: Int32): DNPicture;
    function AddOleObject(upperLeftRow: Int32; top: Int32; upperLeftColumn: Int32; left: Int32; height: Int32; width: Int32; imageData: TArray<Byte>): DNOleObject;
    procedure CopyCommentsInRange(shapes: DNShapeCollection; ca: DNCellArea; destRow: Int32; destColumn: Int32);
    procedure CopyInRange(sourceShapes: DNShapeCollection; ca: DNCellArea; destRow: Int32; destColumn: Int32; isContained: Boolean);
    procedure DeleteInRange(ca: DNCellArea);
    procedure DeleteShape(shape: DNShape);
    function Group(groupItems: TArray<DNShape>): DNGroupShape;
    procedure Ungroup(group: DNGroupShape);
    procedure RemoveAt(index: Int32);
    procedure Remove(shape: DNShape);
    procedure Clear;
    procedure UpdateSelectedValue;
    function BinarySearch(item: DNShape): Int32; overload;
    function BinarySearch(item: DNShape; comparer: DDN.mscorlib.DNIComparer<DNShape>): Int32; overload;
    function BinarySearch(index: Int32; count: Int32; item: DNShape; comparer: DDN.mscorlib.DNIComparer<DNShape>): Int32; overload;
    function &Contains(item: DNShape): Boolean;
    procedure CopyTo(&array: TArray<DNShape>); overload;
    procedure CopyTo(&array: TArray<DNShape>; arrayIndex: Int32); overload;
    procedure CopyTo(index: Int32; &array: TArray<DNShape>; arrayIndex: Int32; count: Int32); overload;
    function Exists(match: DDN.mscorlib.DNPredicate<DNShape>): Boolean;
    function Find(match: DDN.mscorlib.DNPredicate<DNShape>): DNShape;
    function FindAll(match: DDN.mscorlib.DNPredicate<DNShape>): DDN.mscorlib.DNList<DNShape>;
    function FindIndex(match: DDN.mscorlib.DNPredicate<DNShape>): Int32; overload;
    function FindIndex(startIndex: Int32; match: DDN.mscorlib.DNPredicate<DNShape>): Int32; overload;
    function FindIndex(startIndex: Int32; count: Int32; match: DDN.mscorlib.DNPredicate<DNShape>): Int32; overload;
    function FindLast(match: DDN.mscorlib.DNPredicate<DNShape>): DNShape;
    function FindLastIndex(match: DDN.mscorlib.DNPredicate<DNShape>): Int32; overload;
    function FindLastIndex(startIndex: Int32; match: DDN.mscorlib.DNPredicate<DNShape>): Int32; overload;
    function FindLastIndex(startIndex: Int32; count: Int32; match: DDN.mscorlib.DNPredicate<DNShape>): Int32; overload;
    function IndexOf(item: DNShape): Int32; overload;
    function IndexOf(item: DNShape; index: Int32): Int32; overload;
    function IndexOf(item: DNShape; index: Int32; count: Int32): Int32; overload;
    function LastIndexOf(item: DNShape): Int32; overload;
    function LastIndexOf(item: DNShape; index: Int32): Int32; overload;
    function LastIndexOf(item: DNShape; index: Int32; count: Int32): Int32; overload;
    function GetEnumerator: DDN.mscorlib.DNIEnumerator<DNShape>;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Item[index: Int32]: DNShape read get_Item; default;
    property Item[name: string]: DNShape read get_Item; default;
    property Capacity: Int32 read get_Capacity write set_Capacity;
    property Count: Int32 read get_Count;
  end;

  TDNShapeCollection = class(TDNGenericImport<DNShapeCollectionClass, DNShapeCollection>) end;

  //-------------namespace: Aspose.Cells.Drawing----------------
  DNShapeGuideCollectionClass = interface(DNObjectClass)
  ['{5B716042-8EB6-53C1-9ACB-DAACE60B40E3}']
  { constructors } 

    {class} function init: DNShapeGuideCollection;

  end;

  [DNTypeName('Aspose.Cells.Drawing.ShapeGuideCollection')]
  DNShapeGuideCollection = interface(DNObject)
  ['{DA39FE8E-AE5C-332B-A4F1-582470B06837}']
  { getters & setters } 

    function get_Item(index: Int32): DNShapeGuide;
    function get_Capacity: Int32;
    procedure set_Capacity(value: Int32);
    function get_Count: Int32;

  { methods } 

    function BinarySearch(item: DNShapeGuide): Int32; overload;
    function BinarySearch(item: DNShapeGuide; comparer: DDN.mscorlib.DNIComparer<DNShapeGuide>): Int32; overload;
    function BinarySearch(index: Int32; count: Int32; item: DNShapeGuide; comparer: DDN.mscorlib.DNIComparer<DNShapeGuide>): Int32; overload;
    function &Contains(item: DNShapeGuide): Boolean;
    procedure CopyTo(&array: TArray<DNShapeGuide>); overload;
    procedure CopyTo(&array: TArray<DNShapeGuide>; arrayIndex: Int32); overload;
    procedure CopyTo(index: Int32; &array: TArray<DNShapeGuide>; arrayIndex: Int32; count: Int32); overload;
    function Exists(match: DDN.mscorlib.DNPredicate<DNShapeGuide>): Boolean;
    function Find(match: DDN.mscorlib.DNPredicate<DNShapeGuide>): DNShapeGuide;
    function FindAll(match: DDN.mscorlib.DNPredicate<DNShapeGuide>): DDN.mscorlib.DNList<DNShapeGuide>;
    function FindIndex(match: DDN.mscorlib.DNPredicate<DNShapeGuide>): Int32; overload;
    function FindIndex(startIndex: Int32; match: DDN.mscorlib.DNPredicate<DNShapeGuide>): Int32; overload;
    function FindIndex(startIndex: Int32; count: Int32; match: DDN.mscorlib.DNPredicate<DNShapeGuide>): Int32; overload;
    function FindLast(match: DDN.mscorlib.DNPredicate<DNShapeGuide>): DNShapeGuide;
    function FindLastIndex(match: DDN.mscorlib.DNPredicate<DNShapeGuide>): Int32; overload;
    function FindLastIndex(startIndex: Int32; match: DDN.mscorlib.DNPredicate<DNShapeGuide>): Int32; overload;
    function FindLastIndex(startIndex: Int32; count: Int32; match: DDN.mscorlib.DNPredicate<DNShapeGuide>): Int32; overload;
    function IndexOf(item: DNShapeGuide): Int32; overload;
    function IndexOf(item: DNShapeGuide; index: Int32): Int32; overload;
    function IndexOf(item: DNShapeGuide; index: Int32; count: Int32): Int32; overload;
    function LastIndexOf(item: DNShapeGuide): Int32; overload;
    function LastIndexOf(item: DNShapeGuide; index: Int32): Int32; overload;
    function LastIndexOf(item: DNShapeGuide; index: Int32; count: Int32): Int32; overload;
    function GetEnumerator: DDN.mscorlib.DNIEnumerator<DNShapeGuide>;
    procedure RemoveAt(index: Int32);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Item[index: Int32]: DNShapeGuide read get_Item; default;
    property Capacity: Int32 read get_Capacity write set_Capacity;
    property Count: Int32 read get_Count;
  end;

  TDNShapeGuideCollection = class(TDNGenericImport<DNShapeGuideCollectionClass, DNShapeGuideCollection>) end;

  //-------------namespace: Aspose.Cells.Drawing----------------
  DNShapePathCollectionClass = interface(DNObjectClass)
  ['{87B6DA48-8E5B-549F-AADE-2CB3893950F0}']
  end;

  [DNTypeName('Aspose.Cells.Drawing.ShapePathCollection')]
  DNShapePathCollection = interface(DNObject)
  ['{895E78F1-941B-3D5E-A8E8-6EF8CCF43373}']
  { getters & setters } 

    function get_Count: Int32;
    function get_Item(index: Int32): DNShapePath;
    function get_Capacity: Int32;
    procedure set_Capacity(value: Int32);

  { methods } 

    function Add: Int32;
    function BinarySearch(item: DNShapePath): Int32; overload;
    function BinarySearch(item: DNShapePath; comparer: DDN.mscorlib.DNIComparer<DNShapePath>): Int32; overload;
    function BinarySearch(index: Int32; count: Int32; item: DNShapePath; comparer: DDN.mscorlib.DNIComparer<DNShapePath>): Int32; overload;
    function &Contains(item: DNShapePath): Boolean;
    procedure CopyTo(&array: TArray<DNShapePath>); overload;
    procedure CopyTo(&array: TArray<DNShapePath>; arrayIndex: Int32); overload;
    procedure CopyTo(index: Int32; &array: TArray<DNShapePath>; arrayIndex: Int32; count: Int32); overload;
    function Exists(match: DDN.mscorlib.DNPredicate<DNShapePath>): Boolean;
    function Find(match: DDN.mscorlib.DNPredicate<DNShapePath>): DNShapePath;
    function FindAll(match: DDN.mscorlib.DNPredicate<DNShapePath>): DDN.mscorlib.DNList<DNShapePath>;
    function FindIndex(match: DDN.mscorlib.DNPredicate<DNShapePath>): Int32; overload;
    function FindIndex(startIndex: Int32; match: DDN.mscorlib.DNPredicate<DNShapePath>): Int32; overload;
    function FindIndex(startIndex: Int32; count: Int32; match: DDN.mscorlib.DNPredicate<DNShapePath>): Int32; overload;
    function FindLast(match: DDN.mscorlib.DNPredicate<DNShapePath>): DNShapePath;
    function FindLastIndex(match: DDN.mscorlib.DNPredicate<DNShapePath>): Int32; overload;
    function FindLastIndex(startIndex: Int32; match: DDN.mscorlib.DNPredicate<DNShapePath>): Int32; overload;
    function FindLastIndex(startIndex: Int32; count: Int32; match: DDN.mscorlib.DNPredicate<DNShapePath>): Int32; overload;
    function IndexOf(item: DNShapePath): Int32; overload;
    function IndexOf(item: DNShapePath; index: Int32): Int32; overload;
    function IndexOf(item: DNShapePath; index: Int32; count: Int32): Int32; overload;
    function LastIndexOf(item: DNShapePath): Int32; overload;
    function LastIndexOf(item: DNShapePath; index: Int32): Int32; overload;
    function LastIndexOf(item: DNShapePath; index: Int32; count: Int32): Int32; overload;
    function GetEnumerator: DDN.mscorlib.DNIEnumerator<DNShapePath>;
    procedure RemoveAt(index: Int32);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Count: Int32 read get_Count;
    property Item[index: Int32]: DNShapePath read get_Item; default;
    property Capacity: Int32 read get_Capacity write set_Capacity;
  end;

  TDNShapePathCollection = class(TDNGenericImport<DNShapePathCollectionClass, DNShapePathCollection>) end;

  //-------------namespace: Aspose.Cells.Drawing----------------
  DNShapePathPointCollectionClass = interface(DNObjectClass)
  ['{569540DE-615D-5BB2-8357-0D4A92BBD3EF}']
  { constructors } 

    {class} function init: DNShapePathPointCollection;

  end;

  [DNTypeName('Aspose.Cells.Drawing.ShapePathPointCollection')]
  DNShapePathPointCollection = interface(DNObject)
  ['{08F5C4FA-DEC5-31B6-A829-A8098AE0A4A4}']
  { getters & setters } 

    function get_Item(index: Int32): DNShapePathPoint;
    function get_Capacity: Int32;
    procedure set_Capacity(value: Int32);
    function get_Count: Int32;

  { methods } 

    function Add(x: Int32; y: Int32): Int32;
    function BinarySearch(item: DNShapePathPoint): Int32; overload;
    function BinarySearch(item: DNShapePathPoint; comparer: DDN.mscorlib.DNIComparer<DNShapePathPoint>): Int32; overload;
    function BinarySearch(index: Int32; count: Int32; item: DNShapePathPoint; comparer: DDN.mscorlib.DNIComparer<DNShapePathPoint>): Int32; overload;
    function &Contains(item: DNShapePathPoint): Boolean;
    procedure CopyTo(&array: TArray<DNShapePathPoint>); overload;
    procedure CopyTo(&array: TArray<DNShapePathPoint>; arrayIndex: Int32); overload;
    procedure CopyTo(index: Int32; &array: TArray<DNShapePathPoint>; arrayIndex: Int32; count: Int32); overload;
    function Exists(match: DDN.mscorlib.DNPredicate<DNShapePathPoint>): Boolean;
    function Find(match: DDN.mscorlib.DNPredicate<DNShapePathPoint>): DNShapePathPoint;
    function FindAll(match: DDN.mscorlib.DNPredicate<DNShapePathPoint>): DDN.mscorlib.DNList<DNShapePathPoint>;
    function FindIndex(match: DDN.mscorlib.DNPredicate<DNShapePathPoint>): Int32; overload;
    function FindIndex(startIndex: Int32; match: DDN.mscorlib.DNPredicate<DNShapePathPoint>): Int32; overload;
    function FindIndex(startIndex: Int32; count: Int32; match: DDN.mscorlib.DNPredicate<DNShapePathPoint>): Int32; overload;
    function FindLast(match: DDN.mscorlib.DNPredicate<DNShapePathPoint>): DNShapePathPoint;
    function FindLastIndex(match: DDN.mscorlib.DNPredicate<DNShapePathPoint>): Int32; overload;
    function FindLastIndex(startIndex: Int32; match: DDN.mscorlib.DNPredicate<DNShapePathPoint>): Int32; overload;
    function FindLastIndex(startIndex: Int32; count: Int32; match: DDN.mscorlib.DNPredicate<DNShapePathPoint>): Int32; overload;
    function IndexOf(item: DNShapePathPoint): Int32; overload;
    function IndexOf(item: DNShapePathPoint; index: Int32): Int32; overload;
    function IndexOf(item: DNShapePathPoint; index: Int32; count: Int32): Int32; overload;
    function LastIndexOf(item: DNShapePathPoint): Int32; overload;
    function LastIndexOf(item: DNShapePathPoint; index: Int32): Int32; overload;
    function LastIndexOf(item: DNShapePathPoint; index: Int32; count: Int32): Int32; overload;
    function GetEnumerator: DDN.mscorlib.DNIEnumerator<DNShapePathPoint>;
    procedure RemoveAt(index: Int32);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Item[index: Int32]: DNShapePathPoint read get_Item; default;
    property Capacity: Int32 read get_Capacity write set_Capacity;
    property Count: Int32 read get_Count;
  end;

  TDNShapePathPointCollection = class(TDNGenericImport<DNShapePathPointCollectionClass, DNShapePathPointCollection>) end;

  //-------------namespace: Aspose.Cells.Drawing----------------
  DNShapeSegmentPathCollectionClass = interface(DNObjectClass)
  ['{C4710596-7346-5EDC-A18D-E39C183618D1}']
  { constructors } 

    {class} function init: DNShapeSegmentPathCollection;

  end;

  [DNTypeName('Aspose.Cells.Drawing.ShapeSegmentPathCollection')]
  DNShapeSegmentPathCollection = interface(DNObject)
  ['{97CD3E94-8120-3B24-8CF4-581EA3CCBF6A}']
  { getters & setters } 

    function get_Item(index: Int32): DNShapeSegmentPath;
    function get_Capacity: Int32;
    procedure set_Capacity(value: Int32);
    function get_Count: Int32;

  { methods } 

    function Add(&type: DNShapePathType): Int32;
    function BinarySearch(item: DNShapeSegmentPath): Int32; overload;
    function BinarySearch(item: DNShapeSegmentPath; comparer: DDN.mscorlib.DNIComparer<DNShapeSegmentPath>): Int32; overload;
    function BinarySearch(index: Int32; count: Int32; item: DNShapeSegmentPath; comparer: DDN.mscorlib.DNIComparer<DNShapeSegmentPath>): Int32; overload;
    function &Contains(item: DNShapeSegmentPath): Boolean;
    procedure CopyTo(&array: TArray<DNShapeSegmentPath>); overload;
    procedure CopyTo(&array: TArray<DNShapeSegmentPath>; arrayIndex: Int32); overload;
    procedure CopyTo(index: Int32; &array: TArray<DNShapeSegmentPath>; arrayIndex: Int32; count: Int32); overload;
    function Exists(match: DDN.mscorlib.DNPredicate<DNShapeSegmentPath>): Boolean;
    function Find(match: DDN.mscorlib.DNPredicate<DNShapeSegmentPath>): DNShapeSegmentPath;
    function FindAll(match: DDN.mscorlib.DNPredicate<DNShapeSegmentPath>): DDN.mscorlib.DNList<DNShapeSegmentPath>;
    function FindIndex(match: DDN.mscorlib.DNPredicate<DNShapeSegmentPath>): Int32; overload;
    function FindIndex(startIndex: Int32; match: DDN.mscorlib.DNPredicate<DNShapeSegmentPath>): Int32; overload;
    function FindIndex(startIndex: Int32; count: Int32; match: DDN.mscorlib.DNPredicate<DNShapeSegmentPath>): Int32; overload;
    function FindLast(match: DDN.mscorlib.DNPredicate<DNShapeSegmentPath>): DNShapeSegmentPath;
    function FindLastIndex(match: DDN.mscorlib.DNPredicate<DNShapeSegmentPath>): Int32; overload;
    function FindLastIndex(startIndex: Int32; match: DDN.mscorlib.DNPredicate<DNShapeSegmentPath>): Int32; overload;
    function FindLastIndex(startIndex: Int32; count: Int32; match: DDN.mscorlib.DNPredicate<DNShapeSegmentPath>): Int32; overload;
    function IndexOf(item: DNShapeSegmentPath): Int32; overload;
    function IndexOf(item: DNShapeSegmentPath; index: Int32): Int32; overload;
    function IndexOf(item: DNShapeSegmentPath; index: Int32; count: Int32): Int32; overload;
    function LastIndexOf(item: DNShapeSegmentPath): Int32; overload;
    function LastIndexOf(item: DNShapeSegmentPath; index: Int32): Int32; overload;
    function LastIndexOf(item: DNShapeSegmentPath; index: Int32; count: Int32): Int32; overload;
    function GetEnumerator: DDN.mscorlib.DNIEnumerator<DNShapeSegmentPath>;
    procedure RemoveAt(index: Int32);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Item[index: Int32]: DNShapeSegmentPath read get_Item; default;
    property Capacity: Int32 read get_Capacity write set_Capacity;
    property Count: Int32 read get_Count;
  end;

  TDNShapeSegmentPathCollection = class(TDNGenericImport<DNShapeSegmentPathCollectionClass, DNShapeSegmentPathCollection>) end;

  //-------------namespace: Aspose.Cells.Drawing----------------
  DNTextBoxCollectionClass = interface(DNObjectClass)
  ['{F8DE997F-0A90-5FD5-AE6B-4CFF632525C0}']
  end;

  [DNTypeName('Aspose.Cells.Drawing.TextBoxCollection')]
  DNTextBoxCollection = interface(DNObject)
  ['{A9C71681-AE8E-32E3-90CC-868B1F2F15B6}']
  { getters & setters } 

    function get_Item(index: Int32): DNTextBox; overload;
    function get_Item(name: string): DNTextBox; overload;
    function get_Capacity: Int32;
    procedure set_Capacity(value: Int32);
    function get_Count: Int32;

  { methods } 

    function Add(upperLeftRow: Int32; upperLeftColumn: Int32; height: Int32; width: Int32): Int32;
    procedure RemoveAt(index: Int32);
    procedure Clear;
    function BinarySearch(item: DNTextBox): Int32; overload;
    function BinarySearch(item: DNTextBox; comparer: DDN.mscorlib.DNIComparer<DNTextBox>): Int32; overload;
    function BinarySearch(index: Int32; count: Int32; item: DNTextBox; comparer: DDN.mscorlib.DNIComparer<DNTextBox>): Int32; overload;
    function &Contains(item: DNTextBox): Boolean;
    procedure CopyTo(&array: TArray<DNTextBox>); overload;
    procedure CopyTo(&array: TArray<DNTextBox>; arrayIndex: Int32); overload;
    procedure CopyTo(index: Int32; &array: TArray<DNTextBox>; arrayIndex: Int32; count: Int32); overload;
    function Exists(match: DDN.mscorlib.DNPredicate<DNTextBox>): Boolean;
    function Find(match: DDN.mscorlib.DNPredicate<DNTextBox>): DNTextBox;
    function FindAll(match: DDN.mscorlib.DNPredicate<DNTextBox>): DDN.mscorlib.DNList<DNTextBox>;
    function FindIndex(match: DDN.mscorlib.DNPredicate<DNTextBox>): Int32; overload;
    function FindIndex(startIndex: Int32; match: DDN.mscorlib.DNPredicate<DNTextBox>): Int32; overload;
    function FindIndex(startIndex: Int32; count: Int32; match: DDN.mscorlib.DNPredicate<DNTextBox>): Int32; overload;
    function FindLast(match: DDN.mscorlib.DNPredicate<DNTextBox>): DNTextBox;
    function FindLastIndex(match: DDN.mscorlib.DNPredicate<DNTextBox>): Int32; overload;
    function FindLastIndex(startIndex: Int32; match: DDN.mscorlib.DNPredicate<DNTextBox>): Int32; overload;
    function FindLastIndex(startIndex: Int32; count: Int32; match: DDN.mscorlib.DNPredicate<DNTextBox>): Int32; overload;
    function IndexOf(item: DNTextBox): Int32; overload;
    function IndexOf(item: DNTextBox; index: Int32): Int32; overload;
    function IndexOf(item: DNTextBox; index: Int32; count: Int32): Int32; overload;
    function LastIndexOf(item: DNTextBox): Int32; overload;
    function LastIndexOf(item: DNTextBox; index: Int32): Int32; overload;
    function LastIndexOf(item: DNTextBox; index: Int32; count: Int32): Int32; overload;
    function GetEnumerator: DDN.mscorlib.DNIEnumerator<DNTextBox>;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Item[index: Int32]: DNTextBox read get_Item; default;
    property Item[name: string]: DNTextBox read get_Item; default;
    property Capacity: Int32 read get_Capacity write set_Capacity;
    property Count: Int32 read get_Count;
  end;

  TDNTextBoxCollection = class(TDNGenericImport<DNTextBoxCollectionClass, DNTextBoxCollection>) end;

  //-------------namespace: Aspose.Cells.Drawing.Texts----------------
  DNTextTabStopCollectionClass = interface(DNObjectClass)
  ['{BC0B1EEE-D7C3-5219-88A8-B5A239CE86DF}']
  { constructors } 

    {class} function init: DNTextTabStopCollection;

  end;

  [DNTypeName('Aspose.Cells.Drawing.Texts.TextTabStopCollection')]
  DNTextTabStopCollection = interface(DNObject)
  ['{5603C5BA-2C0E-3D47-925D-E81A3A6BE216}']
  { getters & setters } 

    function get_Item(index: Int32): DNTextTabStop;
    function get_Capacity: Int32;
    procedure set_Capacity(value: Int32);
    function get_Count: Int32;

  { methods } 

    function Add(tabAlignment: DNTextTabAlignmentType; tabPosition: Double): Int32;
    function BinarySearch(item: DNTextTabStop): Int32; overload;
    function BinarySearch(item: DNTextTabStop; comparer: DDN.mscorlib.DNIComparer<DNTextTabStop>): Int32; overload;
    function BinarySearch(index: Int32; count: Int32; item: DNTextTabStop; comparer: DDN.mscorlib.DNIComparer<DNTextTabStop>): Int32; overload;
    function &Contains(item: DNTextTabStop): Boolean;
    procedure CopyTo(&array: TArray<DNTextTabStop>); overload;
    procedure CopyTo(&array: TArray<DNTextTabStop>; arrayIndex: Int32); overload;
    procedure CopyTo(index: Int32; &array: TArray<DNTextTabStop>; arrayIndex: Int32; count: Int32); overload;
    function Exists(match: DDN.mscorlib.DNPredicate<DNTextTabStop>): Boolean;
    function Find(match: DDN.mscorlib.DNPredicate<DNTextTabStop>): DNTextTabStop;
    function FindAll(match: DDN.mscorlib.DNPredicate<DNTextTabStop>): DDN.mscorlib.DNList<DNTextTabStop>;
    function FindIndex(match: DDN.mscorlib.DNPredicate<DNTextTabStop>): Int32; overload;
    function FindIndex(startIndex: Int32; match: DDN.mscorlib.DNPredicate<DNTextTabStop>): Int32; overload;
    function FindIndex(startIndex: Int32; count: Int32; match: DDN.mscorlib.DNPredicate<DNTextTabStop>): Int32; overload;
    function FindLast(match: DDN.mscorlib.DNPredicate<DNTextTabStop>): DNTextTabStop;
    function FindLastIndex(match: DDN.mscorlib.DNPredicate<DNTextTabStop>): Int32; overload;
    function FindLastIndex(startIndex: Int32; match: DDN.mscorlib.DNPredicate<DNTextTabStop>): Int32; overload;
    function FindLastIndex(startIndex: Int32; count: Int32; match: DDN.mscorlib.DNPredicate<DNTextTabStop>): Int32; overload;
    function IndexOf(item: DNTextTabStop): Int32; overload;
    function IndexOf(item: DNTextTabStop; index: Int32): Int32; overload;
    function IndexOf(item: DNTextTabStop; index: Int32; count: Int32): Int32; overload;
    function LastIndexOf(item: DNTextTabStop): Int32; overload;
    function LastIndexOf(item: DNTextTabStop; index: Int32): Int32; overload;
    function LastIndexOf(item: DNTextTabStop; index: Int32; count: Int32): Int32; overload;
    function GetEnumerator: DDN.mscorlib.DNIEnumerator<DNTextTabStop>;
    procedure RemoveAt(index: Int32);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Item[index: Int32]: DNTextTabStop read get_Item; default;
    property Capacity: Int32 read get_Capacity write set_Capacity;
    property Count: Int32 read get_Count;
  end;

  TDNTextTabStopCollection = class(TDNGenericImport<DNTextTabStopCollectionClass, DNTextTabStopCollection>) end;

  //-------------namespace: Aspose.Cells----------------
  DNErrorCheckOptionCollectionClass = interface(DNObjectClass)
  ['{AED4BD6D-3369-5921-BA8D-636A7C0001F4}']
  end;

  [DNTypeName('Aspose.Cells.ErrorCheckOptionCollection')]
  DNErrorCheckOptionCollection = interface(DNObject)
  ['{C19EF225-F537-365A-AA6E-C378636C586A}']
  { getters & setters } 

    function get_Item(index: Int32): DNErrorCheckOption;
    function get_Capacity: Int32;
    procedure set_Capacity(value: Int32);
    function get_Count: Int32;

  { methods } 

    function Add: Int32;
    function BinarySearch(item: DNErrorCheckOption): Int32; overload;
    function BinarySearch(item: DNErrorCheckOption; comparer: DDN.mscorlib.DNIComparer<DNErrorCheckOption>): Int32; overload;
    function BinarySearch(index: Int32; count: Int32; item: DNErrorCheckOption; comparer: DDN.mscorlib.DNIComparer<DNErrorCheckOption>): Int32; overload;
    function &Contains(item: DNErrorCheckOption): Boolean;
    procedure CopyTo(&array: TArray<DNErrorCheckOption>); overload;
    procedure CopyTo(&array: TArray<DNErrorCheckOption>; arrayIndex: Int32); overload;
    procedure CopyTo(index: Int32; &array: TArray<DNErrorCheckOption>; arrayIndex: Int32; count: Int32); overload;
    function Exists(match: DDN.mscorlib.DNPredicate<DNErrorCheckOption>): Boolean;
    function Find(match: DDN.mscorlib.DNPredicate<DNErrorCheckOption>): DNErrorCheckOption;
    function FindAll(match: DDN.mscorlib.DNPredicate<DNErrorCheckOption>): DDN.mscorlib.DNList<DNErrorCheckOption>;
    function FindIndex(match: DDN.mscorlib.DNPredicate<DNErrorCheckOption>): Int32; overload;
    function FindIndex(startIndex: Int32; match: DDN.mscorlib.DNPredicate<DNErrorCheckOption>): Int32; overload;
    function FindIndex(startIndex: Int32; count: Int32; match: DDN.mscorlib.DNPredicate<DNErrorCheckOption>): Int32; overload;
    function FindLast(match: DDN.mscorlib.DNPredicate<DNErrorCheckOption>): DNErrorCheckOption;
    function FindLastIndex(match: DDN.mscorlib.DNPredicate<DNErrorCheckOption>): Int32; overload;
    function FindLastIndex(startIndex: Int32; match: DDN.mscorlib.DNPredicate<DNErrorCheckOption>): Int32; overload;
    function FindLastIndex(startIndex: Int32; count: Int32; match: DDN.mscorlib.DNPredicate<DNErrorCheckOption>): Int32; overload;
    function IndexOf(item: DNErrorCheckOption): Int32; overload;
    function IndexOf(item: DNErrorCheckOption; index: Int32): Int32; overload;
    function IndexOf(item: DNErrorCheckOption; index: Int32; count: Int32): Int32; overload;
    function LastIndexOf(item: DNErrorCheckOption): Int32; overload;
    function LastIndexOf(item: DNErrorCheckOption; index: Int32): Int32; overload;
    function LastIndexOf(item: DNErrorCheckOption; index: Int32; count: Int32): Int32; overload;
    function GetEnumerator: DDN.mscorlib.DNIEnumerator<DNErrorCheckOption>;
    procedure RemoveAt(index: Int32);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Item[index: Int32]: DNErrorCheckOption read get_Item; default;
    property Capacity: Int32 read get_Capacity write set_Capacity;
    property Count: Int32 read get_Count;
  end;

  TDNErrorCheckOptionCollection = class(TDNGenericImport<DNErrorCheckOptionCollectionClass, DNErrorCheckOptionCollection>) end;

  //-------------namespace: Aspose.Cells.ExternalConnections----------------
  DNConnectionParameterCollectionClass = interface(DNObjectClass)
  ['{74727973-264E-5E2B-A935-2C20078A0991}']
  end;

  [DNTypeName('Aspose.Cells.ExternalConnections.ConnectionParameterCollection')]
  DNConnectionParameterCollection = interface(DNObject)
  ['{818D9DC0-EEDB-385C-9144-77AB6386ED36}']
  { getters & setters } 

    function get_Item(index: Int32): DNConnectionParameter; overload;
    procedure set_Item(index: Int32; value: DNConnectionParameter);
    function get_Item(connParamName: string): DNConnectionParameter; overload;
    function get_Capacity: Int32;
    procedure set_Capacity(value: Int32);
    function get_Count: Int32;

  { methods } 

    function BinarySearch(item: DNConnectionParameter): Int32; overload;
    function BinarySearch(item: DNConnectionParameter; comparer: DDN.mscorlib.DNIComparer<DNConnectionParameter>): Int32; overload;
    function BinarySearch(index: Int32; count: Int32; item: DNConnectionParameter; comparer: DDN.mscorlib.DNIComparer<DNConnectionParameter>): Int32; overload;
    function &Contains(item: DNConnectionParameter): Boolean;
    procedure CopyTo(&array: TArray<DNConnectionParameter>); overload;
    procedure CopyTo(&array: TArray<DNConnectionParameter>; arrayIndex: Int32); overload;
    procedure CopyTo(index: Int32; &array: TArray<DNConnectionParameter>; arrayIndex: Int32; count: Int32); overload;
    function Exists(match: DDN.mscorlib.DNPredicate<DNConnectionParameter>): Boolean;
    function Find(match: DDN.mscorlib.DNPredicate<DNConnectionParameter>): DNConnectionParameter;
    function FindAll(match: DDN.mscorlib.DNPredicate<DNConnectionParameter>): DDN.mscorlib.DNList<DNConnectionParameter>;
    function FindIndex(match: DDN.mscorlib.DNPredicate<DNConnectionParameter>): Int32; overload;
    function FindIndex(startIndex: Int32; match: DDN.mscorlib.DNPredicate<DNConnectionParameter>): Int32; overload;
    function FindIndex(startIndex: Int32; count: Int32; match: DDN.mscorlib.DNPredicate<DNConnectionParameter>): Int32; overload;
    function FindLast(match: DDN.mscorlib.DNPredicate<DNConnectionParameter>): DNConnectionParameter;
    function FindLastIndex(match: DDN.mscorlib.DNPredicate<DNConnectionParameter>): Int32; overload;
    function FindLastIndex(startIndex: Int32; match: DDN.mscorlib.DNPredicate<DNConnectionParameter>): Int32; overload;
    function FindLastIndex(startIndex: Int32; count: Int32; match: DDN.mscorlib.DNPredicate<DNConnectionParameter>): Int32; overload;
    function IndexOf(item: DNConnectionParameter): Int32; overload;
    function IndexOf(item: DNConnectionParameter; index: Int32): Int32; overload;
    function IndexOf(item: DNConnectionParameter; index: Int32; count: Int32): Int32; overload;
    function LastIndexOf(item: DNConnectionParameter): Int32; overload;
    function LastIndexOf(item: DNConnectionParameter; index: Int32): Int32; overload;
    function LastIndexOf(item: DNConnectionParameter; index: Int32; count: Int32): Int32; overload;
    function GetEnumerator: DDN.mscorlib.DNIEnumerator<DNConnectionParameter>;
    procedure RemoveAt(index: Int32);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Item[index: Int32]: DNConnectionParameter read get_Item write set_Item; default;
    property Item[connParamName: string]: DNConnectionParameter read get_Item; default;
    property Capacity: Int32 read get_Capacity write set_Capacity;
    property Count: Int32 read get_Count;
  end;

  TDNConnectionParameterCollection = class(TDNGenericImport<DNConnectionParameterCollectionClass, DNConnectionParameterCollection>) end;

  //-------------namespace: Aspose.Cells.ExternalConnections----------------
  DNExternalConnectionCollectionClass = interface(DNObjectClass)
  ['{C26D1B4E-0593-5918-87CF-8BEFA8A577B0}']
  end;

  [DNTypeName('Aspose.Cells.ExternalConnections.ExternalConnectionCollection')]
  DNExternalConnectionCollection = interface(DNObject)
  ['{883BDC1F-941F-30D5-A29E-82921A2F7836}']
  { getters & setters } 

    function get_Item(index: Int32): DNExternalConnection; overload;
    procedure set_Item(index: Int32; value: DNExternalConnection);
    function get_Item(connectionName: string): DNExternalConnection; overload;
    function get_Capacity: Int32;
    procedure set_Capacity(value: Int32);
    function get_Count: Int32;

  { methods } 

    function GetExternalConnectionById(connId: Int32): DNExternalConnection;
    function BinarySearch(item: DNExternalConnection): Int32; overload;
    function BinarySearch(item: DNExternalConnection; comparer: DDN.mscorlib.DNIComparer<DNExternalConnection>): Int32; overload;
    function BinarySearch(index: Int32; count: Int32; item: DNExternalConnection; comparer: DDN.mscorlib.DNIComparer<DNExternalConnection>): Int32; overload;
    function &Contains(item: DNExternalConnection): Boolean;
    procedure CopyTo(&array: TArray<DNExternalConnection>); overload;
    procedure CopyTo(&array: TArray<DNExternalConnection>; arrayIndex: Int32); overload;
    procedure CopyTo(index: Int32; &array: TArray<DNExternalConnection>; arrayIndex: Int32; count: Int32); overload;
    function Exists(match: DDN.mscorlib.DNPredicate<DNExternalConnection>): Boolean;
    function Find(match: DDN.mscorlib.DNPredicate<DNExternalConnection>): DNExternalConnection;
    function FindAll(match: DDN.mscorlib.DNPredicate<DNExternalConnection>): DDN.mscorlib.DNList<DNExternalConnection>;
    function FindIndex(match: DDN.mscorlib.DNPredicate<DNExternalConnection>): Int32; overload;
    function FindIndex(startIndex: Int32; match: DDN.mscorlib.DNPredicate<DNExternalConnection>): Int32; overload;
    function FindIndex(startIndex: Int32; count: Int32; match: DDN.mscorlib.DNPredicate<DNExternalConnection>): Int32; overload;
    function FindLast(match: DDN.mscorlib.DNPredicate<DNExternalConnection>): DNExternalConnection;
    function FindLastIndex(match: DDN.mscorlib.DNPredicate<DNExternalConnection>): Int32; overload;
    function FindLastIndex(startIndex: Int32; match: DDN.mscorlib.DNPredicate<DNExternalConnection>): Int32; overload;
    function FindLastIndex(startIndex: Int32; count: Int32; match: DDN.mscorlib.DNPredicate<DNExternalConnection>): Int32; overload;
    function IndexOf(item: DNExternalConnection): Int32; overload;
    function IndexOf(item: DNExternalConnection; index: Int32): Int32; overload;
    function IndexOf(item: DNExternalConnection; index: Int32; count: Int32): Int32; overload;
    function LastIndexOf(item: DNExternalConnection): Int32; overload;
    function LastIndexOf(item: DNExternalConnection; index: Int32): Int32; overload;
    function LastIndexOf(item: DNExternalConnection; index: Int32; count: Int32): Int32; overload;
    function GetEnumerator: DDN.mscorlib.DNIEnumerator<DNExternalConnection>;
    procedure RemoveAt(index: Int32);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Item[index: Int32]: DNExternalConnection read get_Item write set_Item; default;
    property Item[connectionName: string]: DNExternalConnection read get_Item; default;
    property Capacity: Int32 read get_Capacity write set_Capacity;
    property Count: Int32 read get_Count;
  end;

  TDNExternalConnectionCollection = class(TDNGenericImport<DNExternalConnectionCollectionClass, DNExternalConnectionCollection>) end;

  //-------------namespace: Aspose.Cells----------------
  DNFilterColumnCollectionClass = interface(DNObjectClass)
  ['{17440A73-7AE5-57BB-A07B-4C52F7545DB7}']
  end;

  [DNTypeName('Aspose.Cells.FilterColumnCollection')]
  DNFilterColumnCollection = interface(DNObject)
  ['{5948F07E-6649-320C-A1AE-CB75A22DC179}']
  { getters & setters } 

    function get_Item(fieldIndex: Int32): DNFilterColumn;
    function get_Capacity: Int32;
    procedure set_Capacity(value: Int32);
    function get_Count: Int32;

  { methods } 

    procedure RemoveAt(index: Int32);
    function GetByIndex(index: Int32): DNFilterColumn;
    function BinarySearch(item: DNFilterColumn): Int32; overload;
    function BinarySearch(item: DNFilterColumn; comparer: DDN.mscorlib.DNIComparer<DNFilterColumn>): Int32; overload;
    function BinarySearch(index: Int32; count: Int32; item: DNFilterColumn; comparer: DDN.mscorlib.DNIComparer<DNFilterColumn>): Int32; overload;
    function &Contains(item: DNFilterColumn): Boolean;
    procedure CopyTo(&array: TArray<DNFilterColumn>); overload;
    procedure CopyTo(&array: TArray<DNFilterColumn>; arrayIndex: Int32); overload;
    procedure CopyTo(index: Int32; &array: TArray<DNFilterColumn>; arrayIndex: Int32; count: Int32); overload;
    function Exists(match: DDN.mscorlib.DNPredicate<DNFilterColumn>): Boolean;
    function Find(match: DDN.mscorlib.DNPredicate<DNFilterColumn>): DNFilterColumn;
    function FindAll(match: DDN.mscorlib.DNPredicate<DNFilterColumn>): DDN.mscorlib.DNList<DNFilterColumn>;
    function FindIndex(match: DDN.mscorlib.DNPredicate<DNFilterColumn>): Int32; overload;
    function FindIndex(startIndex: Int32; match: DDN.mscorlib.DNPredicate<DNFilterColumn>): Int32; overload;
    function FindIndex(startIndex: Int32; count: Int32; match: DDN.mscorlib.DNPredicate<DNFilterColumn>): Int32; overload;
    function FindLast(match: DDN.mscorlib.DNPredicate<DNFilterColumn>): DNFilterColumn;
    function FindLastIndex(match: DDN.mscorlib.DNPredicate<DNFilterColumn>): Int32; overload;
    function FindLastIndex(startIndex: Int32; match: DDN.mscorlib.DNPredicate<DNFilterColumn>): Int32; overload;
    function FindLastIndex(startIndex: Int32; count: Int32; match: DDN.mscorlib.DNPredicate<DNFilterColumn>): Int32; overload;
    function IndexOf(item: DNFilterColumn): Int32; overload;
    function IndexOf(item: DNFilterColumn; index: Int32): Int32; overload;
    function IndexOf(item: DNFilterColumn; index: Int32; count: Int32): Int32; overload;
    function LastIndexOf(item: DNFilterColumn): Int32; overload;
    function LastIndexOf(item: DNFilterColumn; index: Int32): Int32; overload;
    function LastIndexOf(item: DNFilterColumn; index: Int32; count: Int32): Int32; overload;
    function GetEnumerator: DDN.mscorlib.DNIEnumerator<DNFilterColumn>;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Item[fieldIndex: Int32]: DNFilterColumn read get_Item; default;
    property Capacity: Int32 read get_Capacity write set_Capacity;
    property Count: Int32 read get_Count;
  end;

  TDNFilterColumnCollection = class(TDNGenericImport<DNFilterColumnCollectionClass, DNFilterColumnCollection>) end;

  //-------------namespace: Aspose.Cells.Drawing.Texts----------------
  DNFontSettingCollectionClass = interface(DNObjectClass)
  ['{51D870EA-5CF1-5924-B1D7-1281E3E42D6A}']
  end;

  [DNTypeName('Aspose.Cells.Drawing.Texts.FontSettingCollection')]
  DNFontSettingCollection = interface(DNObject)
  ['{C90D91CD-9E8A-3471-B474-43D7DD65E690}']
  { getters & setters } 

    function get_TextAlignment: DNShapeTextAlignment;
    function get_TextParagraphs: DNTextParagraphCollection;
    function get_Text: string;
    procedure set_Text(value: string);
    function get_HtmlString: string;
    procedure set_HtmlString(value: string);
    function get_Item(index: Int32): DNFontSetting;
    function get_Capacity: Int32;
    procedure set_Capacity(value: Int32);
    function get_Count: Int32;

  { methods } 

    procedure SetWordArtStyle(style: DNPresetWordArtStyle);
    function GetParagraphEnumerator: DDN.mscorlib.DNIEnumerator;
    procedure AppendText(text: string);
    procedure InsertText(index: Int32; text: string);
    procedure Replace(index: Int32; count: Int32; text: string);
    procedure DeleteText(index: Int32; count: Int32);
    procedure Format(startIndex: Int32; length: Int32; font: DNFont; flag: DNStyleFlag);
    procedure Clear;
    function BinarySearch(item: DNFontSetting): Int32; overload;
    function BinarySearch(item: DNFontSetting; comparer: DDN.mscorlib.DNIComparer<DNFontSetting>): Int32; overload;
    function BinarySearch(index: Int32; count: Int32; item: DNFontSetting; comparer: DDN.mscorlib.DNIComparer<DNFontSetting>): Int32; overload;
    function &Contains(item: DNFontSetting): Boolean;
    procedure CopyTo(&array: TArray<DNFontSetting>); overload;
    procedure CopyTo(&array: TArray<DNFontSetting>; arrayIndex: Int32); overload;
    procedure CopyTo(index: Int32; &array: TArray<DNFontSetting>; arrayIndex: Int32; count: Int32); overload;
    function Exists(match: DDN.mscorlib.DNPredicate<DNFontSetting>): Boolean;
    function Find(match: DDN.mscorlib.DNPredicate<DNFontSetting>): DNFontSetting;
    function FindAll(match: DDN.mscorlib.DNPredicate<DNFontSetting>): DDN.mscorlib.DNList<DNFontSetting>;
    function FindIndex(match: DDN.mscorlib.DNPredicate<DNFontSetting>): Int32; overload;
    function FindIndex(startIndex: Int32; match: DDN.mscorlib.DNPredicate<DNFontSetting>): Int32; overload;
    function FindIndex(startIndex: Int32; count: Int32; match: DDN.mscorlib.DNPredicate<DNFontSetting>): Int32; overload;
    function FindLast(match: DDN.mscorlib.DNPredicate<DNFontSetting>): DNFontSetting;
    function FindLastIndex(match: DDN.mscorlib.DNPredicate<DNFontSetting>): Int32; overload;
    function FindLastIndex(startIndex: Int32; match: DDN.mscorlib.DNPredicate<DNFontSetting>): Int32; overload;
    function FindLastIndex(startIndex: Int32; count: Int32; match: DDN.mscorlib.DNPredicate<DNFontSetting>): Int32; overload;
    function IndexOf(item: DNFontSetting): Int32; overload;
    function IndexOf(item: DNFontSetting; index: Int32): Int32; overload;
    function IndexOf(item: DNFontSetting; index: Int32; count: Int32): Int32; overload;
    function LastIndexOf(item: DNFontSetting): Int32; overload;
    function LastIndexOf(item: DNFontSetting; index: Int32): Int32; overload;
    function LastIndexOf(item: DNFontSetting; index: Int32; count: Int32): Int32; overload;
    function GetEnumerator: DDN.mscorlib.DNIEnumerator<DNFontSetting>;
    procedure RemoveAt(index: Int32);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property TextAlignment: DNShapeTextAlignment read get_TextAlignment;
    property TextParagraphs: DNTextParagraphCollection read get_TextParagraphs;
    property Text: string read get_Text write set_Text;
    property HtmlString: string read get_HtmlString write set_HtmlString;
    property Item[index: Int32]: DNFontSetting read get_Item; default;
    property Capacity: Int32 read get_Capacity write set_Capacity;
    property Count: Int32 read get_Count;
  end;

  TDNFontSettingCollection = class(TDNGenericImport<DNFontSettingCollectionClass, DNFontSettingCollection>) end;

  //-------------namespace: Aspose.Cells----------------
  DNConditionalFormattingCollectionClass = interface(DNObjectClass)
  ['{E888D741-8BC9-585E-86C3-1562FD0789E8}']
  end;

  [DNTypeName('Aspose.Cells.ConditionalFormattingCollection')]
  DNConditionalFormattingCollection = interface(DNObject)
  ['{5A294ADB-351A-3079-9282-461BC61744C3}']
  { getters & setters } 

    function get_Item(index: Int32): DNFormatConditionCollection;
    function get_Capacity: Int32;
    procedure set_Capacity(value: Int32);
    function get_Count: Int32;

  { methods } 

    procedure RemoveArea(startRow: Int32; startColumn: Int32; totalRows: Int32; totalColumns: Int32);
    procedure Copy(cfs: DNConditionalFormattingCollection);
    function Add: Int32;
    function BinarySearch(item: DNFormatConditionCollection): Int32; overload;
    function BinarySearch(item: DNFormatConditionCollection; comparer: DDN.mscorlib.DNIComparer<DNFormatConditionCollection>): Int32; overload;
    function BinarySearch(index: Int32; count: Int32; item: DNFormatConditionCollection; comparer: DDN.mscorlib.DNIComparer<DNFormatConditionCollection>): Int32; overload;
    function &Contains(item: DNFormatConditionCollection): Boolean;
    procedure CopyTo(&array: TArray<DNFormatConditionCollection>); overload;
    procedure CopyTo(&array: TArray<DNFormatConditionCollection>; arrayIndex: Int32); overload;
    procedure CopyTo(index: Int32; &array: TArray<DNFormatConditionCollection>; arrayIndex: Int32; count: Int32); overload;
    function Exists(match: DDN.mscorlib.DNPredicate<DNFormatConditionCollection>): Boolean;
    function Find(match: DDN.mscorlib.DNPredicate<DNFormatConditionCollection>): DNFormatConditionCollection;
    function FindAll(match: DDN.mscorlib.DNPredicate<DNFormatConditionCollection>): DDN.mscorlib.DNList<DNFormatConditionCollection>;
    function FindIndex(match: DDN.mscorlib.DNPredicate<DNFormatConditionCollection>): Int32; overload;
    function FindIndex(startIndex: Int32; match: DDN.mscorlib.DNPredicate<DNFormatConditionCollection>): Int32; overload;
    function FindIndex(startIndex: Int32; count: Int32; match: DDN.mscorlib.DNPredicate<DNFormatConditionCollection>): Int32; overload;
    function FindLast(match: DDN.mscorlib.DNPredicate<DNFormatConditionCollection>): DNFormatConditionCollection;
    function FindLastIndex(match: DDN.mscorlib.DNPredicate<DNFormatConditionCollection>): Int32; overload;
    function FindLastIndex(startIndex: Int32; match: DDN.mscorlib.DNPredicate<DNFormatConditionCollection>): Int32; overload;
    function FindLastIndex(startIndex: Int32; count: Int32; match: DDN.mscorlib.DNPredicate<DNFormatConditionCollection>): Int32; overload;
    function IndexOf(item: DNFormatConditionCollection): Int32; overload;
    function IndexOf(item: DNFormatConditionCollection; index: Int32): Int32; overload;
    function IndexOf(item: DNFormatConditionCollection; index: Int32; count: Int32): Int32; overload;
    function LastIndexOf(item: DNFormatConditionCollection): Int32; overload;
    function LastIndexOf(item: DNFormatConditionCollection; index: Int32): Int32; overload;
    function LastIndexOf(item: DNFormatConditionCollection; index: Int32; count: Int32): Int32; overload;
    function GetEnumerator: DDN.mscorlib.DNIEnumerator<DNFormatConditionCollection>;
    procedure RemoveAt(index: Int32);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Item[index: Int32]: DNFormatConditionCollection read get_Item; default;
    property Capacity: Int32 read get_Capacity write set_Capacity;
    property Count: Int32 read get_Count;
  end;

  TDNConditionalFormattingCollection = class(TDNGenericImport<DNConditionalFormattingCollectionClass, DNConditionalFormattingCollection>) end;

  //-------------namespace: Aspose.Cells----------------
  DNHorizontalPageBreakCollectionClass = interface(DNObjectClass)
  ['{1DD66642-42E4-5B11-B15F-824F8E90C6C2}']
  end;

  [DNTypeName('Aspose.Cells.HorizontalPageBreakCollection')]
  DNHorizontalPageBreakCollection = interface(DNObject)
  ['{62D8CDFB-E20F-3570-94CD-E36A4BDC93FC}']
  { getters & setters } 

    function get_Item(index: Int32): DNHorizontalPageBreak; overload;
    function get_Item(cellName: string): DNHorizontalPageBreak; overload;
    function get_Capacity: Int32;
    procedure set_Capacity(value: Int32);
    function get_Count: Int32;

  { methods } 

    function Add(row: Int32; startColumn: Int32; endColumn: Int32): Int32; overload;
    function Add(row: Int32): Int32; overload;
    function Add(row: Int32; column: Int32): Int32; overload;
    function Add(cellName: string): Int32; overload;
    procedure RemoveAt(index: Int32);
    function BinarySearch(item: DNHorizontalPageBreak): Int32; overload;
    function BinarySearch(item: DNHorizontalPageBreak; comparer: DDN.mscorlib.DNIComparer<DNHorizontalPageBreak>): Int32; overload;
    function BinarySearch(index: Int32; count: Int32; item: DNHorizontalPageBreak; comparer: DDN.mscorlib.DNIComparer<DNHorizontalPageBreak>): Int32; overload;
    function &Contains(item: DNHorizontalPageBreak): Boolean;
    procedure CopyTo(&array: TArray<DNHorizontalPageBreak>); overload;
    procedure CopyTo(&array: TArray<DNHorizontalPageBreak>; arrayIndex: Int32); overload;
    procedure CopyTo(index: Int32; &array: TArray<DNHorizontalPageBreak>; arrayIndex: Int32; count: Int32); overload;
    function Exists(match: DDN.mscorlib.DNPredicate<DNHorizontalPageBreak>): Boolean;
    function Find(match: DDN.mscorlib.DNPredicate<DNHorizontalPageBreak>): DNHorizontalPageBreak;
    function FindAll(match: DDN.mscorlib.DNPredicate<DNHorizontalPageBreak>): DDN.mscorlib.DNList<DNHorizontalPageBreak>;
    function FindIndex(match: DDN.mscorlib.DNPredicate<DNHorizontalPageBreak>): Int32; overload;
    function FindIndex(startIndex: Int32; match: DDN.mscorlib.DNPredicate<DNHorizontalPageBreak>): Int32; overload;
    function FindIndex(startIndex: Int32; count: Int32; match: DDN.mscorlib.DNPredicate<DNHorizontalPageBreak>): Int32; overload;
    function FindLast(match: DDN.mscorlib.DNPredicate<DNHorizontalPageBreak>): DNHorizontalPageBreak;
    function FindLastIndex(match: DDN.mscorlib.DNPredicate<DNHorizontalPageBreak>): Int32; overload;
    function FindLastIndex(startIndex: Int32; match: DDN.mscorlib.DNPredicate<DNHorizontalPageBreak>): Int32; overload;
    function FindLastIndex(startIndex: Int32; count: Int32; match: DDN.mscorlib.DNPredicate<DNHorizontalPageBreak>): Int32; overload;
    function IndexOf(item: DNHorizontalPageBreak): Int32; overload;
    function IndexOf(item: DNHorizontalPageBreak; index: Int32): Int32; overload;
    function IndexOf(item: DNHorizontalPageBreak; index: Int32; count: Int32): Int32; overload;
    function LastIndexOf(item: DNHorizontalPageBreak): Int32; overload;
    function LastIndexOf(item: DNHorizontalPageBreak; index: Int32): Int32; overload;
    function LastIndexOf(item: DNHorizontalPageBreak; index: Int32; count: Int32): Int32; overload;
    function GetEnumerator: DDN.mscorlib.DNIEnumerator<DNHorizontalPageBreak>;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Item[index: Int32]: DNHorizontalPageBreak read get_Item; default;
    property Item[cellName: string]: DNHorizontalPageBreak read get_Item; default;
    property Capacity: Int32 read get_Capacity write set_Capacity;
    property Count: Int32 read get_Count;
  end;

  TDNHorizontalPageBreakCollection = class(TDNGenericImport<DNHorizontalPageBreakCollectionClass, DNHorizontalPageBreakCollection>) end;

  //-------------namespace: Aspose.Cells----------------
  DNHyperlinkCollectionClass = interface(DNObjectClass)
  ['{A478A603-19E0-5D2A-855F-4EDDC4F2EB14}']
  end;

  [DNTypeName('Aspose.Cells.HyperlinkCollection')]
  DNHyperlinkCollection = interface(DNObject)
  ['{E3FC9F92-0498-3CEB-89EC-947A8850AE00}']
  { getters & setters } 

    function get_Item(index: Int32): DNHyperlink;
    function get_Capacity: Int32;
    procedure set_Capacity(value: Int32);
    function get_Count: Int32;

  { methods } 

    function Add(firstRow: Int32; firstColumn: Int32; totalRows: Int32; totalColumns: Int32; address: string): Int32; overload;
    function Add(cellName: string; totalRows: Int32; totalColumns: Int32; address: string): Int32; overload;
    function Add(startCellName: string; endCellName: string; address: string; textToDisplay: string; screenTip: string): Int32; overload;
    procedure RemoveAt(index: Int32);
    procedure Clear;
    function BinarySearch(item: DNHyperlink): Int32; overload;
    function BinarySearch(item: DNHyperlink; comparer: DDN.mscorlib.DNIComparer<DNHyperlink>): Int32; overload;
    function BinarySearch(index: Int32; count: Int32; item: DNHyperlink; comparer: DDN.mscorlib.DNIComparer<DNHyperlink>): Int32; overload;
    function &Contains(item: DNHyperlink): Boolean;
    procedure CopyTo(&array: TArray<DNHyperlink>); overload;
    procedure CopyTo(&array: TArray<DNHyperlink>; arrayIndex: Int32); overload;
    procedure CopyTo(index: Int32; &array: TArray<DNHyperlink>; arrayIndex: Int32; count: Int32); overload;
    function Exists(match: DDN.mscorlib.DNPredicate<DNHyperlink>): Boolean;
    function Find(match: DDN.mscorlib.DNPredicate<DNHyperlink>): DNHyperlink;
    function FindAll(match: DDN.mscorlib.DNPredicate<DNHyperlink>): DDN.mscorlib.DNList<DNHyperlink>;
    function FindIndex(match: DDN.mscorlib.DNPredicate<DNHyperlink>): Int32; overload;
    function FindIndex(startIndex: Int32; match: DDN.mscorlib.DNPredicate<DNHyperlink>): Int32; overload;
    function FindIndex(startIndex: Int32; count: Int32; match: DDN.mscorlib.DNPredicate<DNHyperlink>): Int32; overload;
    function FindLast(match: DDN.mscorlib.DNPredicate<DNHyperlink>): DNHyperlink;
    function FindLastIndex(match: DDN.mscorlib.DNPredicate<DNHyperlink>): Int32; overload;
    function FindLastIndex(startIndex: Int32; match: DDN.mscorlib.DNPredicate<DNHyperlink>): Int32; overload;
    function FindLastIndex(startIndex: Int32; count: Int32; match: DDN.mscorlib.DNPredicate<DNHyperlink>): Int32; overload;
    function IndexOf(item: DNHyperlink): Int32; overload;
    function IndexOf(item: DNHyperlink; index: Int32): Int32; overload;
    function IndexOf(item: DNHyperlink; index: Int32; count: Int32): Int32; overload;
    function LastIndexOf(item: DNHyperlink): Int32; overload;
    function LastIndexOf(item: DNHyperlink; index: Int32): Int32; overload;
    function LastIndexOf(item: DNHyperlink; index: Int32; count: Int32): Int32; overload;
    function GetEnumerator: DDN.mscorlib.DNIEnumerator<DNHyperlink>;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Item[index: Int32]: DNHyperlink read get_Item; default;
    property Capacity: Int32 read get_Capacity write set_Capacity;
    property Count: Int32 read get_Count;
  end;

  TDNHyperlinkCollection = class(TDNGenericImport<DNHyperlinkCollectionClass, DNHyperlinkCollection>) end;

  //-------------namespace: Aspose.Cells.Markup----------------
  DNCustomXmlPartCollectionClass = interface(DNObjectClass)
  ['{C28221F8-E524-5970-9FB6-EEE8C9DF0A4F}']
  end;

  [DNTypeName('Aspose.Cells.Markup.CustomXmlPartCollection')]
  DNCustomXmlPartCollection = interface(DNObject)
  ['{5731EF58-7B76-347B-B36C-2E3480D11712}']
  { getters & setters } 

    function get_Item(index: Int32): DNCustomXmlPart;
    function get_Capacity: Int32;
    procedure set_Capacity(value: Int32);
    function get_Count: Int32;

  { methods } 

    function Add(data: TArray<Byte>; shemaData: TArray<Byte>): Int32;
    function SelectByID(id: string): DNCustomXmlPart;
    function BinarySearch(item: DNCustomXmlPart): Int32; overload;
    function BinarySearch(item: DNCustomXmlPart; comparer: DDN.mscorlib.DNIComparer<DNCustomXmlPart>): Int32; overload;
    function BinarySearch(index: Int32; count: Int32; item: DNCustomXmlPart; comparer: DDN.mscorlib.DNIComparer<DNCustomXmlPart>): Int32; overload;
    function &Contains(item: DNCustomXmlPart): Boolean;
    procedure CopyTo(&array: TArray<DNCustomXmlPart>); overload;
    procedure CopyTo(&array: TArray<DNCustomXmlPart>; arrayIndex: Int32); overload;
    procedure CopyTo(index: Int32; &array: TArray<DNCustomXmlPart>; arrayIndex: Int32; count: Int32); overload;
    function Exists(match: DDN.mscorlib.DNPredicate<DNCustomXmlPart>): Boolean;
    function Find(match: DDN.mscorlib.DNPredicate<DNCustomXmlPart>): DNCustomXmlPart;
    function FindAll(match: DDN.mscorlib.DNPredicate<DNCustomXmlPart>): DDN.mscorlib.DNList<DNCustomXmlPart>;
    function FindIndex(match: DDN.mscorlib.DNPredicate<DNCustomXmlPart>): Int32; overload;
    function FindIndex(startIndex: Int32; match: DDN.mscorlib.DNPredicate<DNCustomXmlPart>): Int32; overload;
    function FindIndex(startIndex: Int32; count: Int32; match: DDN.mscorlib.DNPredicate<DNCustomXmlPart>): Int32; overload;
    function FindLast(match: DDN.mscorlib.DNPredicate<DNCustomXmlPart>): DNCustomXmlPart;
    function FindLastIndex(match: DDN.mscorlib.DNPredicate<DNCustomXmlPart>): Int32; overload;
    function FindLastIndex(startIndex: Int32; match: DDN.mscorlib.DNPredicate<DNCustomXmlPart>): Int32; overload;
    function FindLastIndex(startIndex: Int32; count: Int32; match: DDN.mscorlib.DNPredicate<DNCustomXmlPart>): Int32; overload;
    function IndexOf(item: DNCustomXmlPart): Int32; overload;
    function IndexOf(item: DNCustomXmlPart; index: Int32): Int32; overload;
    function IndexOf(item: DNCustomXmlPart; index: Int32; count: Int32): Int32; overload;
    function LastIndexOf(item: DNCustomXmlPart): Int32; overload;
    function LastIndexOf(item: DNCustomXmlPart; index: Int32): Int32; overload;
    function LastIndexOf(item: DNCustomXmlPart; index: Int32; count: Int32): Int32; overload;
    function GetEnumerator: DDN.mscorlib.DNIEnumerator<DNCustomXmlPart>;
    procedure RemoveAt(index: Int32);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Item[index: Int32]: DNCustomXmlPart read get_Item; default;
    property Capacity: Int32 read get_Capacity write set_Capacity;
    property Count: Int32 read get_Count;
  end;

  TDNCustomXmlPartCollection = class(TDNGenericImport<DNCustomXmlPartCollectionClass, DNCustomXmlPartCollection>) end;

  //-------------namespace: Aspose.Cells.Markup----------------
  DNSmartTagCollectionClass = interface(DNObjectClass)
  ['{E0A0BD9E-C8F3-5A36-BB9F-F0B4EA64E04D}']
  end;

  [DNTypeName('Aspose.Cells.Markup.SmartTagCollection')]
  DNSmartTagCollection = interface(DNObject)
  ['{CC55097B-4892-32FA-9502-6ADFC8470776}']
  { getters & setters } 

    function get_Row: Int32;
    function get_Column: Int32;
    function get_Item(index: Int32): DNSmartTag;
    function get_Capacity: Int32;
    procedure set_Capacity(value: Int32);
    function get_Count: Int32;

  { methods } 

    function Add(uri: string; name: string): Int32;
    function BinarySearch(item: DNSmartTag): Int32; overload;
    function BinarySearch(item: DNSmartTag; comparer: DDN.mscorlib.DNIComparer<DNSmartTag>): Int32; overload;
    function BinarySearch(index: Int32; count: Int32; item: DNSmartTag; comparer: DDN.mscorlib.DNIComparer<DNSmartTag>): Int32; overload;
    function &Contains(item: DNSmartTag): Boolean;
    procedure CopyTo(&array: TArray<DNSmartTag>); overload;
    procedure CopyTo(&array: TArray<DNSmartTag>; arrayIndex: Int32); overload;
    procedure CopyTo(index: Int32; &array: TArray<DNSmartTag>; arrayIndex: Int32; count: Int32); overload;
    function Exists(match: DDN.mscorlib.DNPredicate<DNSmartTag>): Boolean;
    function Find(match: DDN.mscorlib.DNPredicate<DNSmartTag>): DNSmartTag;
    function FindAll(match: DDN.mscorlib.DNPredicate<DNSmartTag>): DDN.mscorlib.DNList<DNSmartTag>;
    function FindIndex(match: DDN.mscorlib.DNPredicate<DNSmartTag>): Int32; overload;
    function FindIndex(startIndex: Int32; match: DDN.mscorlib.DNPredicate<DNSmartTag>): Int32; overload;
    function FindIndex(startIndex: Int32; count: Int32; match: DDN.mscorlib.DNPredicate<DNSmartTag>): Int32; overload;
    function FindLast(match: DDN.mscorlib.DNPredicate<DNSmartTag>): DNSmartTag;
    function FindLastIndex(match: DDN.mscorlib.DNPredicate<DNSmartTag>): Int32; overload;
    function FindLastIndex(startIndex: Int32; match: DDN.mscorlib.DNPredicate<DNSmartTag>): Int32; overload;
    function FindLastIndex(startIndex: Int32; count: Int32; match: DDN.mscorlib.DNPredicate<DNSmartTag>): Int32; overload;
    function IndexOf(item: DNSmartTag): Int32; overload;
    function IndexOf(item: DNSmartTag; index: Int32): Int32; overload;
    function IndexOf(item: DNSmartTag; index: Int32; count: Int32): Int32; overload;
    function LastIndexOf(item: DNSmartTag): Int32; overload;
    function LastIndexOf(item: DNSmartTag; index: Int32): Int32; overload;
    function LastIndexOf(item: DNSmartTag; index: Int32; count: Int32): Int32; overload;
    function GetEnumerator: DDN.mscorlib.DNIEnumerator<DNSmartTag>;
    procedure RemoveAt(index: Int32);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Row: Int32 read get_Row;
    property Column: Int32 read get_Column;
    property Item[index: Int32]: DNSmartTag read get_Item; default;
    property Capacity: Int32 read get_Capacity write set_Capacity;
    property Count: Int32 read get_Count;
  end;

  TDNSmartTagCollection = class(TDNGenericImport<DNSmartTagCollectionClass, DNSmartTagCollection>) end;

  //-------------namespace: Aspose.Cells.Markup----------------
  DNSmartTagPropertyCollectionClass = interface(DNObjectClass)
  ['{7802A69A-AB09-5EC1-B917-C6073F744CBE}']
  { constructors } 

    {class} function init: DNSmartTagPropertyCollection;

  end;

  [DNTypeName('Aspose.Cells.Markup.SmartTagPropertyCollection')]
  DNSmartTagPropertyCollection = interface(DNObject)
  ['{E39FFD45-2075-30B0-A2F4-AB1972FF0746}']
  { getters & setters } 

    function get_Item(index: Int32): DNSmartTagProperty; overload;
    function get_Item(name: string): DNSmartTagProperty; overload;
    function get_Capacity: Int32;
    procedure set_Capacity(value: Int32);
    function get_Count: Int32;

  { methods } 

    function Add(name: string; value: string): Int32;
    function BinarySearch(item: DNSmartTagProperty): Int32; overload;
    function BinarySearch(item: DNSmartTagProperty; comparer: DDN.mscorlib.DNIComparer<DNSmartTagProperty>): Int32; overload;
    function BinarySearch(index: Int32; count: Int32; item: DNSmartTagProperty; comparer: DDN.mscorlib.DNIComparer<DNSmartTagProperty>): Int32; overload;
    function &Contains(item: DNSmartTagProperty): Boolean;
    procedure CopyTo(&array: TArray<DNSmartTagProperty>); overload;
    procedure CopyTo(&array: TArray<DNSmartTagProperty>; arrayIndex: Int32); overload;
    procedure CopyTo(index: Int32; &array: TArray<DNSmartTagProperty>; arrayIndex: Int32; count: Int32); overload;
    function Exists(match: DDN.mscorlib.DNPredicate<DNSmartTagProperty>): Boolean;
    function Find(match: DDN.mscorlib.DNPredicate<DNSmartTagProperty>): DNSmartTagProperty;
    function FindAll(match: DDN.mscorlib.DNPredicate<DNSmartTagProperty>): DDN.mscorlib.DNList<DNSmartTagProperty>;
    function FindIndex(match: DDN.mscorlib.DNPredicate<DNSmartTagProperty>): Int32; overload;
    function FindIndex(startIndex: Int32; match: DDN.mscorlib.DNPredicate<DNSmartTagProperty>): Int32; overload;
    function FindIndex(startIndex: Int32; count: Int32; match: DDN.mscorlib.DNPredicate<DNSmartTagProperty>): Int32; overload;
    function FindLast(match: DDN.mscorlib.DNPredicate<DNSmartTagProperty>): DNSmartTagProperty;
    function FindLastIndex(match: DDN.mscorlib.DNPredicate<DNSmartTagProperty>): Int32; overload;
    function FindLastIndex(startIndex: Int32; match: DDN.mscorlib.DNPredicate<DNSmartTagProperty>): Int32; overload;
    function FindLastIndex(startIndex: Int32; count: Int32; match: DDN.mscorlib.DNPredicate<DNSmartTagProperty>): Int32; overload;
    function IndexOf(item: DNSmartTagProperty): Int32; overload;
    function IndexOf(item: DNSmartTagProperty; index: Int32): Int32; overload;
    function IndexOf(item: DNSmartTagProperty; index: Int32; count: Int32): Int32; overload;
    function LastIndexOf(item: DNSmartTagProperty): Int32; overload;
    function LastIndexOf(item: DNSmartTagProperty; index: Int32): Int32; overload;
    function LastIndexOf(item: DNSmartTagProperty; index: Int32; count: Int32): Int32; overload;
    function GetEnumerator: DDN.mscorlib.DNIEnumerator<DNSmartTagProperty>;
    procedure RemoveAt(index: Int32);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Item[index: Int32]: DNSmartTagProperty read get_Item; default;
    property Item[name: string]: DNSmartTagProperty read get_Item; default;
    property Capacity: Int32 read get_Capacity write set_Capacity;
    property Count: Int32 read get_Count;
  end;

  TDNSmartTagPropertyCollection = class(TDNGenericImport<DNSmartTagPropertyCollectionClass, DNSmartTagPropertyCollection>) end;

  //-------------namespace: Aspose.Cells----------------
  DNNameCollectionClass = interface(DNObjectClass)
  ['{F5884B62-11C5-54C0-9AC2-EE45A43F3A11}']
  end;

  [DNTypeName('Aspose.Cells.NameCollection')]
  DNNameCollection = interface(DNObject)
  ['{A44CEBF2-ADC2-31C4-8F99-DACF50F64684}']
  { getters & setters } 

    function get_Item(index: Int32): DNName; overload;
    function get_Item(text: string): DNName; overload;
    function get_Capacity: Int32;
    procedure set_Capacity(value: Int32);
    function get_Count: Int32;

  { methods } 

    function Add(text: string): Int32;
    procedure Remove(names: TArray<string>); overload;
    procedure Remove(text: string); overload;
    procedure RemoveAt(index: Int32);
    procedure Clear;
    procedure RemoveDuplicateNames;
    procedure Sort;
    function BinarySearch(item: DNName): Int32; overload;
    function BinarySearch(item: DNName; comparer: DDN.mscorlib.DNIComparer<DNName>): Int32; overload;
    function BinarySearch(index: Int32; count: Int32; item: DNName; comparer: DDN.mscorlib.DNIComparer<DNName>): Int32; overload;
    function &Contains(item: DNName): Boolean;
    procedure CopyTo(&array: TArray<DNName>); overload;
    procedure CopyTo(&array: TArray<DNName>; arrayIndex: Int32); overload;
    procedure CopyTo(index: Int32; &array: TArray<DNName>; arrayIndex: Int32; count: Int32); overload;
    function Exists(match: DDN.mscorlib.DNPredicate<DNName>): Boolean;
    function Find(match: DDN.mscorlib.DNPredicate<DNName>): DNName;
    function FindAll(match: DDN.mscorlib.DNPredicate<DNName>): DDN.mscorlib.DNList<DNName>;
    function FindIndex(match: DDN.mscorlib.DNPredicate<DNName>): Int32; overload;
    function FindIndex(startIndex: Int32; match: DDN.mscorlib.DNPredicate<DNName>): Int32; overload;
    function FindIndex(startIndex: Int32; count: Int32; match: DDN.mscorlib.DNPredicate<DNName>): Int32; overload;
    function FindLast(match: DDN.mscorlib.DNPredicate<DNName>): DNName;
    function FindLastIndex(match: DDN.mscorlib.DNPredicate<DNName>): Int32; overload;
    function FindLastIndex(startIndex: Int32; match: DDN.mscorlib.DNPredicate<DNName>): Int32; overload;
    function FindLastIndex(startIndex: Int32; count: Int32; match: DDN.mscorlib.DNPredicate<DNName>): Int32; overload;
    function IndexOf(item: DNName): Int32; overload;
    function IndexOf(item: DNName; index: Int32): Int32; overload;
    function IndexOf(item: DNName; index: Int32; count: Int32): Int32; overload;
    function LastIndexOf(item: DNName): Int32; overload;
    function LastIndexOf(item: DNName; index: Int32): Int32; overload;
    function LastIndexOf(item: DNName; index: Int32; count: Int32): Int32; overload;
    function GetEnumerator: DDN.mscorlib.DNIEnumerator<DNName>;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Item[index: Int32]: DNName read get_Item; default;
    property Item[text: string]: DNName read get_Item; default;
    property Capacity: Int32 read get_Capacity write set_Capacity;
    property Count: Int32 read get_Count;
  end;

  TDNNameCollection = class(TDNGenericImport<DNNameCollectionClass, DNNameCollection>) end;

  //-------------namespace: Aspose.Cells.Ods----------------
  DNOdsCellFieldCollectionClass = interface(DNObjectClass)
  ['{29659E8E-D100-5F0D-9745-7FA940707992}']
  end;

  [DNTypeName('Aspose.Cells.Ods.OdsCellFieldCollection')]
  DNOdsCellFieldCollection = interface(DNObject)
  ['{C0D2D9D5-833D-3BF6-BE6B-661C3BA736E3}']
  { getters & setters } 

    function get_Item(index: Int32): DNOdsCellField; overload;
    function get_Item(row: Int32; column: Int32): DNOdsCellField; overload;
    function get_Capacity: Int32;
    procedure set_Capacity(value: Int32);
    function get_Count: Int32;

  { methods } 

    function Add(row: Int32; column: Int32; fieldType: DNOdsCellFieldType; format: string): Int32;
    procedure UpdateFieldsValue;
    function BinarySearch(item: DNOdsCellField): Int32; overload;
    function BinarySearch(item: DNOdsCellField; comparer: DDN.mscorlib.DNIComparer<DNOdsCellField>): Int32; overload;
    function BinarySearch(index: Int32; count: Int32; item: DNOdsCellField; comparer: DDN.mscorlib.DNIComparer<DNOdsCellField>): Int32; overload;
    function &Contains(item: DNOdsCellField): Boolean;
    procedure CopyTo(&array: TArray<DNOdsCellField>); overload;
    procedure CopyTo(&array: TArray<DNOdsCellField>; arrayIndex: Int32); overload;
    procedure CopyTo(index: Int32; &array: TArray<DNOdsCellField>; arrayIndex: Int32; count: Int32); overload;
    function Exists(match: DDN.mscorlib.DNPredicate<DNOdsCellField>): Boolean;
    function Find(match: DDN.mscorlib.DNPredicate<DNOdsCellField>): DNOdsCellField;
    function FindAll(match: DDN.mscorlib.DNPredicate<DNOdsCellField>): DDN.mscorlib.DNList<DNOdsCellField>;
    function FindIndex(match: DDN.mscorlib.DNPredicate<DNOdsCellField>): Int32; overload;
    function FindIndex(startIndex: Int32; match: DDN.mscorlib.DNPredicate<DNOdsCellField>): Int32; overload;
    function FindIndex(startIndex: Int32; count: Int32; match: DDN.mscorlib.DNPredicate<DNOdsCellField>): Int32; overload;
    function FindLast(match: DDN.mscorlib.DNPredicate<DNOdsCellField>): DNOdsCellField;
    function FindLastIndex(match: DDN.mscorlib.DNPredicate<DNOdsCellField>): Int32; overload;
    function FindLastIndex(startIndex: Int32; match: DDN.mscorlib.DNPredicate<DNOdsCellField>): Int32; overload;
    function FindLastIndex(startIndex: Int32; count: Int32; match: DDN.mscorlib.DNPredicate<DNOdsCellField>): Int32; overload;
    function IndexOf(item: DNOdsCellField): Int32; overload;
    function IndexOf(item: DNOdsCellField; index: Int32): Int32; overload;
    function IndexOf(item: DNOdsCellField; index: Int32; count: Int32): Int32; overload;
    function LastIndexOf(item: DNOdsCellField): Int32; overload;
    function LastIndexOf(item: DNOdsCellField; index: Int32): Int32; overload;
    function LastIndexOf(item: DNOdsCellField; index: Int32; count: Int32): Int32; overload;
    function GetEnumerator: DDN.mscorlib.DNIEnumerator<DNOdsCellField>;
    procedure RemoveAt(index: Int32);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Item[index: Int32]: DNOdsCellField read get_Item; default;
    property Item[row: Int32; column: Int32]: DNOdsCellField read get_Item; default;
    property Capacity: Int32 read get_Capacity write set_Capacity;
    property Count: Int32 read get_Count;
  end;

  TDNOdsCellFieldCollection = class(TDNGenericImport<DNOdsCellFieldCollectionClass, DNOdsCellFieldCollection>) end;

  //-------------namespace: Aspose.Cells.Pivot----------------
  DNPivotFilterCollectionClass = interface(DNObjectClass)
  ['{D45C0301-E251-5C0B-8FE7-54A02D65A911}']
  end;

  [DNTypeName('Aspose.Cells.Pivot.PivotFilterCollection')]
  DNPivotFilterCollection = interface(DNObject)
  ['{B69CA4DA-C7EB-3F7E-89C0-D7B57CD3848F}']
  { getters & setters } 

    function get_Item(index: Int32): DNPivotFilter;
    function get_Capacity: Int32;
    procedure set_Capacity(value: Int32);
    function get_Count: Int32;

  { methods } 

    function Add(fieldIndex: Int32; &type: DNPivotFilterType): Int32;
    procedure ClearFilter(fieldIndex: Int32);
    function BinarySearch(item: DNPivotFilter): Int32; overload;
    function BinarySearch(item: DNPivotFilter; comparer: DDN.mscorlib.DNIComparer<DNPivotFilter>): Int32; overload;
    function BinarySearch(index: Int32; count: Int32; item: DNPivotFilter; comparer: DDN.mscorlib.DNIComparer<DNPivotFilter>): Int32; overload;
    function &Contains(item: DNPivotFilter): Boolean;
    procedure CopyTo(&array: TArray<DNPivotFilter>); overload;
    procedure CopyTo(&array: TArray<DNPivotFilter>; arrayIndex: Int32); overload;
    procedure CopyTo(index: Int32; &array: TArray<DNPivotFilter>; arrayIndex: Int32; count: Int32); overload;
    function Exists(match: DDN.mscorlib.DNPredicate<DNPivotFilter>): Boolean;
    function Find(match: DDN.mscorlib.DNPredicate<DNPivotFilter>): DNPivotFilter;
    function FindAll(match: DDN.mscorlib.DNPredicate<DNPivotFilter>): DDN.mscorlib.DNList<DNPivotFilter>;
    function FindIndex(match: DDN.mscorlib.DNPredicate<DNPivotFilter>): Int32; overload;
    function FindIndex(startIndex: Int32; match: DDN.mscorlib.DNPredicate<DNPivotFilter>): Int32; overload;
    function FindIndex(startIndex: Int32; count: Int32; match: DDN.mscorlib.DNPredicate<DNPivotFilter>): Int32; overload;
    function FindLast(match: DDN.mscorlib.DNPredicate<DNPivotFilter>): DNPivotFilter;
    function FindLastIndex(match: DDN.mscorlib.DNPredicate<DNPivotFilter>): Int32; overload;
    function FindLastIndex(startIndex: Int32; match: DDN.mscorlib.DNPredicate<DNPivotFilter>): Int32; overload;
    function FindLastIndex(startIndex: Int32; count: Int32; match: DDN.mscorlib.DNPredicate<DNPivotFilter>): Int32; overload;
    function IndexOf(item: DNPivotFilter): Int32; overload;
    function IndexOf(item: DNPivotFilter; index: Int32): Int32; overload;
    function IndexOf(item: DNPivotFilter; index: Int32; count: Int32): Int32; overload;
    function LastIndexOf(item: DNPivotFilter): Int32; overload;
    function LastIndexOf(item: DNPivotFilter; index: Int32): Int32; overload;
    function LastIndexOf(item: DNPivotFilter; index: Int32; count: Int32): Int32; overload;
    function GetEnumerator: DDN.mscorlib.DNIEnumerator<DNPivotFilter>;
    procedure RemoveAt(index: Int32);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Item[index: Int32]: DNPivotFilter read get_Item; default;
    property Capacity: Int32 read get_Capacity write set_Capacity;
    property Count: Int32 read get_Count;
  end;

  TDNPivotFilterCollection = class(TDNGenericImport<DNPivotFilterCollectionClass, DNPivotFilterCollection>) end;

  //-------------namespace: Aspose.Cells.Pivot----------------
  DNPivotFormatConditionCollectionClass = interface(DNObjectClass)
  ['{4A5C3AFD-4A8D-51D6-85DB-A9F70217A550}']
  end;

  [DNTypeName('Aspose.Cells.Pivot.PivotFormatConditionCollection')]
  DNPivotFormatConditionCollection = interface(DNObject)
  ['{B33CA31E-BBA8-3216-A6E4-9AD476EF591B}']
  { getters & setters } 

    function get_Item(index: Int32): DNPivotFormatCondition;
    function get_Capacity: Int32;
    procedure set_Capacity(value: Int32);
    function get_Count: Int32;

  { methods } 

    function Add: Int32;
    function BinarySearch(item: DNPivotFormatCondition): Int32; overload;
    function BinarySearch(item: DNPivotFormatCondition; comparer: DDN.mscorlib.DNIComparer<DNPivotFormatCondition>): Int32; overload;
    function BinarySearch(index: Int32; count: Int32; item: DNPivotFormatCondition; comparer: DDN.mscorlib.DNIComparer<DNPivotFormatCondition>): Int32; overload;
    function &Contains(item: DNPivotFormatCondition): Boolean;
    procedure CopyTo(&array: TArray<DNPivotFormatCondition>); overload;
    procedure CopyTo(&array: TArray<DNPivotFormatCondition>; arrayIndex: Int32); overload;
    procedure CopyTo(index: Int32; &array: TArray<DNPivotFormatCondition>; arrayIndex: Int32; count: Int32); overload;
    function Exists(match: DDN.mscorlib.DNPredicate<DNPivotFormatCondition>): Boolean;
    function Find(match: DDN.mscorlib.DNPredicate<DNPivotFormatCondition>): DNPivotFormatCondition;
    function FindAll(match: DDN.mscorlib.DNPredicate<DNPivotFormatCondition>): DDN.mscorlib.DNList<DNPivotFormatCondition>;
    function FindIndex(match: DDN.mscorlib.DNPredicate<DNPivotFormatCondition>): Int32; overload;
    function FindIndex(startIndex: Int32; match: DDN.mscorlib.DNPredicate<DNPivotFormatCondition>): Int32; overload;
    function FindIndex(startIndex: Int32; count: Int32; match: DDN.mscorlib.DNPredicate<DNPivotFormatCondition>): Int32; overload;
    function FindLast(match: DDN.mscorlib.DNPredicate<DNPivotFormatCondition>): DNPivotFormatCondition;
    function FindLastIndex(match: DDN.mscorlib.DNPredicate<DNPivotFormatCondition>): Int32; overload;
    function FindLastIndex(startIndex: Int32; match: DDN.mscorlib.DNPredicate<DNPivotFormatCondition>): Int32; overload;
    function FindLastIndex(startIndex: Int32; count: Int32; match: DDN.mscorlib.DNPredicate<DNPivotFormatCondition>): Int32; overload;
    function IndexOf(item: DNPivotFormatCondition): Int32; overload;
    function IndexOf(item: DNPivotFormatCondition; index: Int32): Int32; overload;
    function IndexOf(item: DNPivotFormatCondition; index: Int32; count: Int32): Int32; overload;
    function LastIndexOf(item: DNPivotFormatCondition): Int32; overload;
    function LastIndexOf(item: DNPivotFormatCondition; index: Int32): Int32; overload;
    function LastIndexOf(item: DNPivotFormatCondition; index: Int32; count: Int32): Int32; overload;
    function GetEnumerator: DDN.mscorlib.DNIEnumerator<DNPivotFormatCondition>;
    procedure RemoveAt(index: Int32);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Item[index: Int32]: DNPivotFormatCondition read get_Item; default;
    property Capacity: Int32 read get_Capacity write set_Capacity;
    property Count: Int32 read get_Count;
  end;

  TDNPivotFormatConditionCollection = class(TDNGenericImport<DNPivotFormatConditionCollectionClass, DNPivotFormatConditionCollection>) end;

  //-------------namespace: Aspose.Cells.Pivot----------------
  DNPivotTableCollectionClass = interface(DNObjectClass)
  ['{E3F3A015-7F3A-534A-94E6-7B64650854DF}']
  end;

  [DNTypeName('Aspose.Cells.Pivot.PivotTableCollection')]
  DNPivotTableCollection = interface(DNObject)
  ['{B35EF239-7979-3C72-A808-ADDA4F78B532}']
  { getters & setters } 

    function get_Item(index: Int32): DNPivotTable; overload;
    function get_Item(name: string): DNPivotTable; overload;
    function get_Item(row: Int32; column: Int32): DNPivotTable; overload;
    function get_Capacity: Int32;
    procedure set_Capacity(value: Int32);
    function get_Count: Int32;

  { methods } 

    procedure Dispose;
    function Add(sourceData: string; destCellName: string; tableName: string): Int32; overload;
    function Add(sourceData: string; destCellName: string; tableName: string; useSameSource: Boolean): Int32; overload;
    function Add(sourceData: string; row: Int32; column: Int32; tableName: string): Int32; overload;
    function Add(sourceData: string; row: Int32; column: Int32; tableName: string; useSameSource: Boolean): Int32; overload;
    function Add(pivotTable: DNPivotTable; destCellName: string; tableName: string): Int32; overload;
    function Add(pivotTable: DNPivotTable; row: Int32; column: Int32; tableName: string): Int32; overload;
    function Add(sourceData: TArray<string>; isAutoPage: Boolean; pageFields: DNPivotPageFields; destCellName: string; tableName: string): Int32; overload;
    function Add(sourceData: TArray<string>; isAutoPage: Boolean; pageFields: DNPivotPageFields; row: Int32; column: Int32; tableName: string): Int32; overload;
    procedure Clear;
    procedure Remove(pivotTable: DNPivotTable);
    procedure RemoveAt(index: Int32);
    function BinarySearch(item: DNPivotTable): Int32; overload;
    function BinarySearch(item: DNPivotTable; comparer: DDN.mscorlib.DNIComparer<DNPivotTable>): Int32; overload;
    function BinarySearch(index: Int32; count: Int32; item: DNPivotTable; comparer: DDN.mscorlib.DNIComparer<DNPivotTable>): Int32; overload;
    function &Contains(item: DNPivotTable): Boolean;
    procedure CopyTo(&array: TArray<DNPivotTable>); overload;
    procedure CopyTo(&array: TArray<DNPivotTable>; arrayIndex: Int32); overload;
    procedure CopyTo(index: Int32; &array: TArray<DNPivotTable>; arrayIndex: Int32; count: Int32); overload;
    function Exists(match: DDN.mscorlib.DNPredicate<DNPivotTable>): Boolean;
    function Find(match: DDN.mscorlib.DNPredicate<DNPivotTable>): DNPivotTable;
    function FindAll(match: DDN.mscorlib.DNPredicate<DNPivotTable>): DDN.mscorlib.DNList<DNPivotTable>;
    function FindIndex(match: DDN.mscorlib.DNPredicate<DNPivotTable>): Int32; overload;
    function FindIndex(startIndex: Int32; match: DDN.mscorlib.DNPredicate<DNPivotTable>): Int32; overload;
    function FindIndex(startIndex: Int32; count: Int32; match: DDN.mscorlib.DNPredicate<DNPivotTable>): Int32; overload;
    function FindLast(match: DDN.mscorlib.DNPredicate<DNPivotTable>): DNPivotTable;
    function FindLastIndex(match: DDN.mscorlib.DNPredicate<DNPivotTable>): Int32; overload;
    function FindLastIndex(startIndex: Int32; match: DDN.mscorlib.DNPredicate<DNPivotTable>): Int32; overload;
    function FindLastIndex(startIndex: Int32; count: Int32; match: DDN.mscorlib.DNPredicate<DNPivotTable>): Int32; overload;
    function IndexOf(item: DNPivotTable): Int32; overload;
    function IndexOf(item: DNPivotTable; index: Int32): Int32; overload;
    function IndexOf(item: DNPivotTable; index: Int32; count: Int32): Int32; overload;
    function LastIndexOf(item: DNPivotTable): Int32; overload;
    function LastIndexOf(item: DNPivotTable; index: Int32): Int32; overload;
    function LastIndexOf(item: DNPivotTable; index: Int32; count: Int32): Int32; overload;
    function GetEnumerator: DDN.mscorlib.DNIEnumerator<DNPivotTable>;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Item[index: Int32]: DNPivotTable read get_Item; default;
    property Item[name: string]: DNPivotTable read get_Item; default;
    property Item[row: Int32; column: Int32]: DNPivotTable read get_Item; default;
    property Capacity: Int32 read get_Capacity write set_Capacity;
    property Count: Int32 read get_Count;
  end;

  TDNPivotTableCollection = class(TDNGenericImport<DNPivotTableCollectionClass, DNPivotTableCollection>) end;

  //-------------namespace: Aspose.Cells.Properties----------------
  DNContentTypePropertyCollectionClass = interface(DNObjectClass)
  ['{CB7402AB-E9E8-5E0B-BEA1-A627EA6FF24D}']
  end;

  [DNTypeName('Aspose.Cells.Properties.ContentTypePropertyCollection')]
  DNContentTypePropertyCollection = interface(DNObject)
  ['{FA3B83B3-9390-3E3C-94BC-54DF34D5C9B3}']
  { getters & setters } 

    function get_Item(index: Int32): DNContentTypeProperty; overload;
    function get_Item(name: string): DNContentTypeProperty; overload;
    function get_Capacity: Int32;
    procedure set_Capacity(value: Int32);
    function get_Count: Int32;

  { methods } 

    function Add(name: string; value: string): Int32; overload;
    function Add(name: string; value: string; &type: string): Int32; overload;
    function BinarySearch(item: DNContentTypeProperty): Int32; overload;
    function BinarySearch(item: DNContentTypeProperty; comparer: DDN.mscorlib.DNIComparer<DNContentTypeProperty>): Int32; overload;
    function BinarySearch(index: Int32; count: Int32; item: DNContentTypeProperty; comparer: DDN.mscorlib.DNIComparer<DNContentTypeProperty>): Int32; overload;
    function &Contains(item: DNContentTypeProperty): Boolean;
    procedure CopyTo(&array: TArray<DNContentTypeProperty>); overload;
    procedure CopyTo(&array: TArray<DNContentTypeProperty>; arrayIndex: Int32); overload;
    procedure CopyTo(index: Int32; &array: TArray<DNContentTypeProperty>; arrayIndex: Int32; count: Int32); overload;
    function Exists(match: DDN.mscorlib.DNPredicate<DNContentTypeProperty>): Boolean;
    function Find(match: DDN.mscorlib.DNPredicate<DNContentTypeProperty>): DNContentTypeProperty;
    function FindAll(match: DDN.mscorlib.DNPredicate<DNContentTypeProperty>): DDN.mscorlib.DNList<DNContentTypeProperty>;
    function FindIndex(match: DDN.mscorlib.DNPredicate<DNContentTypeProperty>): Int32; overload;
    function FindIndex(startIndex: Int32; match: DDN.mscorlib.DNPredicate<DNContentTypeProperty>): Int32; overload;
    function FindIndex(startIndex: Int32; count: Int32; match: DDN.mscorlib.DNPredicate<DNContentTypeProperty>): Int32; overload;
    function FindLast(match: DDN.mscorlib.DNPredicate<DNContentTypeProperty>): DNContentTypeProperty;
    function FindLastIndex(match: DDN.mscorlib.DNPredicate<DNContentTypeProperty>): Int32; overload;
    function FindLastIndex(startIndex: Int32; match: DDN.mscorlib.DNPredicate<DNContentTypeProperty>): Int32; overload;
    function FindLastIndex(startIndex: Int32; count: Int32; match: DDN.mscorlib.DNPredicate<DNContentTypeProperty>): Int32; overload;
    function IndexOf(item: DNContentTypeProperty): Int32; overload;
    function IndexOf(item: DNContentTypeProperty; index: Int32): Int32; overload;
    function IndexOf(item: DNContentTypeProperty; index: Int32; count: Int32): Int32; overload;
    function LastIndexOf(item: DNContentTypeProperty): Int32; overload;
    function LastIndexOf(item: DNContentTypeProperty; index: Int32): Int32; overload;
    function LastIndexOf(item: DNContentTypeProperty; index: Int32; count: Int32): Int32; overload;
    function GetEnumerator: DDN.mscorlib.DNIEnumerator<DNContentTypeProperty>;
    procedure RemoveAt(index: Int32);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Item[index: Int32]: DNContentTypeProperty read get_Item; default;
    property Item[name: string]: DNContentTypeProperty read get_Item; default;
    property Capacity: Int32 read get_Capacity write set_Capacity;
    property Count: Int32 read get_Count;
  end;

  TDNContentTypePropertyCollection = class(TDNGenericImport<DNContentTypePropertyCollectionClass, DNContentTypePropertyCollection>) end;

  //-------------namespace: Aspose.Cells.Properties----------------
  DNCustomPropertyCollectionClass = interface(DNObjectClass)
  ['{A794922E-8B70-5F63-B3D8-DEBF47FBBA42}']
  end;

  [DNTypeName('Aspose.Cells.Properties.CustomPropertyCollection')]
  DNCustomPropertyCollection = interface(DNObject)
  ['{653BDEDE-9CDB-3B3C-A047-C9B0772591AB}']
  { getters & setters } 

    function get_Item(index: Int32): DNCustomProperty; overload;
    function get_Item(name: string): DNCustomProperty; overload;
    function get_Capacity: Int32;
    procedure set_Capacity(value: Int32);
    function get_Count: Int32;

  { methods } 

    function Add(name: string; value: string): Int32;
    function BinarySearch(item: DNCustomProperty): Int32; overload;
    function BinarySearch(item: DNCustomProperty; comparer: DDN.mscorlib.DNIComparer<DNCustomProperty>): Int32; overload;
    function BinarySearch(index: Int32; count: Int32; item: DNCustomProperty; comparer: DDN.mscorlib.DNIComparer<DNCustomProperty>): Int32; overload;
    function &Contains(item: DNCustomProperty): Boolean;
    procedure CopyTo(&array: TArray<DNCustomProperty>); overload;
    procedure CopyTo(&array: TArray<DNCustomProperty>; arrayIndex: Int32); overload;
    procedure CopyTo(index: Int32; &array: TArray<DNCustomProperty>; arrayIndex: Int32; count: Int32); overload;
    function Exists(match: DDN.mscorlib.DNPredicate<DNCustomProperty>): Boolean;
    function Find(match: DDN.mscorlib.DNPredicate<DNCustomProperty>): DNCustomProperty;
    function FindAll(match: DDN.mscorlib.DNPredicate<DNCustomProperty>): DDN.mscorlib.DNList<DNCustomProperty>;
    function FindIndex(match: DDN.mscorlib.DNPredicate<DNCustomProperty>): Int32; overload;
    function FindIndex(startIndex: Int32; match: DDN.mscorlib.DNPredicate<DNCustomProperty>): Int32; overload;
    function FindIndex(startIndex: Int32; count: Int32; match: DDN.mscorlib.DNPredicate<DNCustomProperty>): Int32; overload;
    function FindLast(match: DDN.mscorlib.DNPredicate<DNCustomProperty>): DNCustomProperty;
    function FindLastIndex(match: DDN.mscorlib.DNPredicate<DNCustomProperty>): Int32; overload;
    function FindLastIndex(startIndex: Int32; match: DDN.mscorlib.DNPredicate<DNCustomProperty>): Int32; overload;
    function FindLastIndex(startIndex: Int32; count: Int32; match: DDN.mscorlib.DNPredicate<DNCustomProperty>): Int32; overload;
    function IndexOf(item: DNCustomProperty): Int32; overload;
    function IndexOf(item: DNCustomProperty; index: Int32): Int32; overload;
    function IndexOf(item: DNCustomProperty; index: Int32; count: Int32): Int32; overload;
    function LastIndexOf(item: DNCustomProperty): Int32; overload;
    function LastIndexOf(item: DNCustomProperty; index: Int32): Int32; overload;
    function LastIndexOf(item: DNCustomProperty; index: Int32; count: Int32): Int32; overload;
    function GetEnumerator: DDN.mscorlib.DNIEnumerator<DNCustomProperty>;
    procedure RemoveAt(index: Int32);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Item[index: Int32]: DNCustomProperty read get_Item; default;
    property Item[name: string]: DNCustomProperty read get_Item; default;
    property Capacity: Int32 read get_Capacity write set_Capacity;
    property Count: Int32 read get_Count;
  end;

  TDNCustomPropertyCollection = class(TDNGenericImport<DNCustomPropertyCollectionClass, DNCustomPropertyCollection>) end;

  //-------------namespace: Aspose.Cells----------------
  DNProtectedRangeCollectionClass = interface(DNObjectClass)
  ['{9AB4698B-24D8-50F9-B170-3B8CBC70DB7C}']
  end;

  [DNTypeName('Aspose.Cells.ProtectedRangeCollection')]
  DNProtectedRangeCollection = interface(DNObject)
  ['{B036A2CE-25DB-3C7A-AB79-A0FFE11EE1BA}']
  { getters & setters } 

    function get_Item(index: Int32): DNProtectedRange;
    function get_Capacity: Int32;
    procedure set_Capacity(value: Int32);
    function get_Count: Int32;

  { methods } 

    function Add(name: string; startRow: Int32; startColumn: Int32; endRow: Int32; endColumn: Int32): Int32;
    function BinarySearch(item: DNProtectedRange): Int32; overload;
    function BinarySearch(item: DNProtectedRange; comparer: DDN.mscorlib.DNIComparer<DNProtectedRange>): Int32; overload;
    function BinarySearch(index: Int32; count: Int32; item: DNProtectedRange; comparer: DDN.mscorlib.DNIComparer<DNProtectedRange>): Int32; overload;
    function &Contains(item: DNProtectedRange): Boolean;
    procedure CopyTo(&array: TArray<DNProtectedRange>); overload;
    procedure CopyTo(&array: TArray<DNProtectedRange>; arrayIndex: Int32); overload;
    procedure CopyTo(index: Int32; &array: TArray<DNProtectedRange>; arrayIndex: Int32; count: Int32); overload;
    function Exists(match: DDN.mscorlib.DNPredicate<DNProtectedRange>): Boolean;
    function Find(match: DDN.mscorlib.DNPredicate<DNProtectedRange>): DNProtectedRange;
    function FindAll(match: DDN.mscorlib.DNPredicate<DNProtectedRange>): DDN.mscorlib.DNList<DNProtectedRange>;
    function FindIndex(match: DDN.mscorlib.DNPredicate<DNProtectedRange>): Int32; overload;
    function FindIndex(startIndex: Int32; match: DDN.mscorlib.DNPredicate<DNProtectedRange>): Int32; overload;
    function FindIndex(startIndex: Int32; count: Int32; match: DDN.mscorlib.DNPredicate<DNProtectedRange>): Int32; overload;
    function FindLast(match: DDN.mscorlib.DNPredicate<DNProtectedRange>): DNProtectedRange;
    function FindLastIndex(match: DDN.mscorlib.DNPredicate<DNProtectedRange>): Int32; overload;
    function FindLastIndex(startIndex: Int32; match: DDN.mscorlib.DNPredicate<DNProtectedRange>): Int32; overload;
    function FindLastIndex(startIndex: Int32; count: Int32; match: DDN.mscorlib.DNPredicate<DNProtectedRange>): Int32; overload;
    function IndexOf(item: DNProtectedRange): Int32; overload;
    function IndexOf(item: DNProtectedRange; index: Int32): Int32; overload;
    function IndexOf(item: DNProtectedRange; index: Int32; count: Int32): Int32; overload;
    function LastIndexOf(item: DNProtectedRange): Int32; overload;
    function LastIndexOf(item: DNProtectedRange; index: Int32): Int32; overload;
    function LastIndexOf(item: DNProtectedRange; index: Int32; count: Int32): Int32; overload;
    function GetEnumerator: DDN.mscorlib.DNIEnumerator<DNProtectedRange>;
    procedure RemoveAt(index: Int32);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Item[index: Int32]: DNProtectedRange read get_Item; default;
    property Capacity: Int32 read get_Capacity write set_Capacity;
    property Count: Int32 read get_Count;
  end;

  TDNProtectedRangeCollection = class(TDNGenericImport<DNProtectedRangeCollectionClass, DNProtectedRangeCollection>) end;

  //-------------namespace: Aspose.Cells----------------
  DNQueryTableCollectionClass = interface(DNObjectClass)
  ['{0E32E268-CC52-5F0D-9136-852B58253606}']
  end;

  [DNTypeName('Aspose.Cells.QueryTableCollection')]
  DNQueryTableCollection = interface(DNObject)
  ['{A6D93445-BD46-3DBF-AA4A-562A1AF27034}']
  { getters & setters } 

    function get_Item(index: Int32): DNQueryTable;
    function get_Capacity: Int32;
    procedure set_Capacity(value: Int32);
    function get_Count: Int32;

  { methods } 

    function BinarySearch(item: DNQueryTable): Int32; overload;
    function BinarySearch(item: DNQueryTable; comparer: DDN.mscorlib.DNIComparer<DNQueryTable>): Int32; overload;
    function BinarySearch(index: Int32; count: Int32; item: DNQueryTable; comparer: DDN.mscorlib.DNIComparer<DNQueryTable>): Int32; overload;
    function &Contains(item: DNQueryTable): Boolean;
    procedure CopyTo(&array: TArray<DNQueryTable>); overload;
    procedure CopyTo(&array: TArray<DNQueryTable>; arrayIndex: Int32); overload;
    procedure CopyTo(index: Int32; &array: TArray<DNQueryTable>; arrayIndex: Int32; count: Int32); overload;
    function Exists(match: DDN.mscorlib.DNPredicate<DNQueryTable>): Boolean;
    function Find(match: DDN.mscorlib.DNPredicate<DNQueryTable>): DNQueryTable;
    function FindAll(match: DDN.mscorlib.DNPredicate<DNQueryTable>): DDN.mscorlib.DNList<DNQueryTable>;
    function FindIndex(match: DDN.mscorlib.DNPredicate<DNQueryTable>): Int32; overload;
    function FindIndex(startIndex: Int32; match: DDN.mscorlib.DNPredicate<DNQueryTable>): Int32; overload;
    function FindIndex(startIndex: Int32; count: Int32; match: DDN.mscorlib.DNPredicate<DNQueryTable>): Int32; overload;
    function FindLast(match: DDN.mscorlib.DNPredicate<DNQueryTable>): DNQueryTable;
    function FindLastIndex(match: DDN.mscorlib.DNPredicate<DNQueryTable>): Int32; overload;
    function FindLastIndex(startIndex: Int32; match: DDN.mscorlib.DNPredicate<DNQueryTable>): Int32; overload;
    function FindLastIndex(startIndex: Int32; count: Int32; match: DDN.mscorlib.DNPredicate<DNQueryTable>): Int32; overload;
    function IndexOf(item: DNQueryTable): Int32; overload;
    function IndexOf(item: DNQueryTable; index: Int32): Int32; overload;
    function IndexOf(item: DNQueryTable; index: Int32; count: Int32): Int32; overload;
    function LastIndexOf(item: DNQueryTable): Int32; overload;
    function LastIndexOf(item: DNQueryTable; index: Int32): Int32; overload;
    function LastIndexOf(item: DNQueryTable; index: Int32; count: Int32): Int32; overload;
    function GetEnumerator: DDN.mscorlib.DNIEnumerator<DNQueryTable>;
    procedure RemoveAt(index: Int32);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Item[index: Int32]: DNQueryTable read get_Item; default;
    property Capacity: Int32 read get_Capacity write set_Capacity;
    property Count: Int32 read get_Count;
  end;

  TDNQueryTableCollection = class(TDNGenericImport<DNQueryTableCollectionClass, DNQueryTableCollection>) end;

  //-------------namespace: Aspose.Cells.QueryTables----------------
  DNPowerQueryFormulaCollctionClass = interface(DNObjectClass)
  ['{4E5BCF16-2B76-5086-BF8B-CBAE04AF25A7}']
  end;

  [DNTypeName('Aspose.Cells.QueryTables.PowerQueryFormulaCollction')]
  DNPowerQueryFormulaCollction = interface(DNObject)
  ['{A0214F59-B7BE-34AB-AFF5-AD2DFA758257}']
  { getters & setters } 

    function get_Item(index: Int32): DNPowerQueryFormula; overload;
    function get_Item(name: string): DNPowerQueryFormula; overload;
    function get_Capacity: Int32;
    procedure set_Capacity(value: Int32);
    function get_Count: Int32;

  { methods } 

    function BinarySearch(item: DNPowerQueryFormula): Int32; overload;
    function BinarySearch(item: DNPowerQueryFormula; comparer: DDN.mscorlib.DNIComparer<DNPowerQueryFormula>): Int32; overload;
    function BinarySearch(index: Int32; count: Int32; item: DNPowerQueryFormula; comparer: DDN.mscorlib.DNIComparer<DNPowerQueryFormula>): Int32; overload;
    function &Contains(item: DNPowerQueryFormula): Boolean;
    procedure CopyTo(&array: TArray<DNPowerQueryFormula>); overload;
    procedure CopyTo(&array: TArray<DNPowerQueryFormula>; arrayIndex: Int32); overload;
    procedure CopyTo(index: Int32; &array: TArray<DNPowerQueryFormula>; arrayIndex: Int32; count: Int32); overload;
    function Exists(match: DDN.mscorlib.DNPredicate<DNPowerQueryFormula>): Boolean;
    function Find(match: DDN.mscorlib.DNPredicate<DNPowerQueryFormula>): DNPowerQueryFormula;
    function FindAll(match: DDN.mscorlib.DNPredicate<DNPowerQueryFormula>): DDN.mscorlib.DNList<DNPowerQueryFormula>;
    function FindIndex(match: DDN.mscorlib.DNPredicate<DNPowerQueryFormula>): Int32; overload;
    function FindIndex(startIndex: Int32; match: DDN.mscorlib.DNPredicate<DNPowerQueryFormula>): Int32; overload;
    function FindIndex(startIndex: Int32; count: Int32; match: DDN.mscorlib.DNPredicate<DNPowerQueryFormula>): Int32; overload;
    function FindLast(match: DDN.mscorlib.DNPredicate<DNPowerQueryFormula>): DNPowerQueryFormula;
    function FindLastIndex(match: DDN.mscorlib.DNPredicate<DNPowerQueryFormula>): Int32; overload;
    function FindLastIndex(startIndex: Int32; match: DDN.mscorlib.DNPredicate<DNPowerQueryFormula>): Int32; overload;
    function FindLastIndex(startIndex: Int32; count: Int32; match: DDN.mscorlib.DNPredicate<DNPowerQueryFormula>): Int32; overload;
    function IndexOf(item: DNPowerQueryFormula): Int32; overload;
    function IndexOf(item: DNPowerQueryFormula; index: Int32): Int32; overload;
    function IndexOf(item: DNPowerQueryFormula; index: Int32; count: Int32): Int32; overload;
    function LastIndexOf(item: DNPowerQueryFormula): Int32; overload;
    function LastIndexOf(item: DNPowerQueryFormula; index: Int32): Int32; overload;
    function LastIndexOf(item: DNPowerQueryFormula; index: Int32; count: Int32): Int32; overload;
    function GetEnumerator: DDN.mscorlib.DNIEnumerator<DNPowerQueryFormula>;
    procedure RemoveAt(index: Int32);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Item[index: Int32]: DNPowerQueryFormula read get_Item; default;
    property Item[name: string]: DNPowerQueryFormula read get_Item; default;
    property Capacity: Int32 read get_Capacity write set_Capacity;
    property Count: Int32 read get_Count;
  end;

  TDNPowerQueryFormulaCollction = class(TDNGenericImport<DNPowerQueryFormulaCollctionClass, DNPowerQueryFormulaCollction>) end;

  //-------------namespace: Aspose.Cells.QueryTables----------------
  DNPowerQueryFormulaItemCollectionClass = interface(DNObjectClass)
  ['{D679A8DC-D23C-5391-BFF7-2FCCB6F02A23}']
  end;

  [DNTypeName('Aspose.Cells.QueryTables.PowerQueryFormulaItemCollection')]
  DNPowerQueryFormulaItemCollection = interface(DNObject)
  ['{EFF65510-8454-3D18-8623-EA98AB4769E0}']
  { getters & setters } 

    function get_Item(index: Int32): DNPowerQueryFormulaItem; overload;
    function get_Item(name: string): DNPowerQueryFormulaItem; overload;
    function get_Capacity: Int32;
    procedure set_Capacity(value: Int32);
    function get_Count: Int32;

  { methods } 

    function BinarySearch(item: DNPowerQueryFormulaItem): Int32; overload;
    function BinarySearch(item: DNPowerQueryFormulaItem; comparer: DDN.mscorlib.DNIComparer<DNPowerQueryFormulaItem>): Int32; overload;
    function BinarySearch(index: Int32; count: Int32; item: DNPowerQueryFormulaItem; comparer: DDN.mscorlib.DNIComparer<DNPowerQueryFormulaItem>): Int32; overload;
    function &Contains(item: DNPowerQueryFormulaItem): Boolean;
    procedure CopyTo(&array: TArray<DNPowerQueryFormulaItem>); overload;
    procedure CopyTo(&array: TArray<DNPowerQueryFormulaItem>; arrayIndex: Int32); overload;
    procedure CopyTo(index: Int32; &array: TArray<DNPowerQueryFormulaItem>; arrayIndex: Int32; count: Int32); overload;
    function Exists(match: DDN.mscorlib.DNPredicate<DNPowerQueryFormulaItem>): Boolean;
    function Find(match: DDN.mscorlib.DNPredicate<DNPowerQueryFormulaItem>): DNPowerQueryFormulaItem;
    function FindAll(match: DDN.mscorlib.DNPredicate<DNPowerQueryFormulaItem>): DDN.mscorlib.DNList<DNPowerQueryFormulaItem>;
    function FindIndex(match: DDN.mscorlib.DNPredicate<DNPowerQueryFormulaItem>): Int32; overload;
    function FindIndex(startIndex: Int32; match: DDN.mscorlib.DNPredicate<DNPowerQueryFormulaItem>): Int32; overload;
    function FindIndex(startIndex: Int32; count: Int32; match: DDN.mscorlib.DNPredicate<DNPowerQueryFormulaItem>): Int32; overload;
    function FindLast(match: DDN.mscorlib.DNPredicate<DNPowerQueryFormulaItem>): DNPowerQueryFormulaItem;
    function FindLastIndex(match: DDN.mscorlib.DNPredicate<DNPowerQueryFormulaItem>): Int32; overload;
    function FindLastIndex(startIndex: Int32; match: DDN.mscorlib.DNPredicate<DNPowerQueryFormulaItem>): Int32; overload;
    function FindLastIndex(startIndex: Int32; count: Int32; match: DDN.mscorlib.DNPredicate<DNPowerQueryFormulaItem>): Int32; overload;
    function IndexOf(item: DNPowerQueryFormulaItem): Int32; overload;
    function IndexOf(item: DNPowerQueryFormulaItem; index: Int32): Int32; overload;
    function IndexOf(item: DNPowerQueryFormulaItem; index: Int32; count: Int32): Int32; overload;
    function LastIndexOf(item: DNPowerQueryFormulaItem): Int32; overload;
    function LastIndexOf(item: DNPowerQueryFormulaItem; index: Int32): Int32; overload;
    function LastIndexOf(item: DNPowerQueryFormulaItem; index: Int32; count: Int32): Int32; overload;
    function GetEnumerator: DDN.mscorlib.DNIEnumerator<DNPowerQueryFormulaItem>;
    procedure RemoveAt(index: Int32);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Item[index: Int32]: DNPowerQueryFormulaItem read get_Item; default;
    property Item[name: string]: DNPowerQueryFormulaItem read get_Item; default;
    property Capacity: Int32 read get_Capacity write set_Capacity;
    property Count: Int32 read get_Count;
  end;

  TDNPowerQueryFormulaItemCollection = class(TDNGenericImport<DNPowerQueryFormulaItemCollectionClass, DNPowerQueryFormulaItemCollection>) end;

  //-------------namespace: Aspose.Cells.QueryTables----------------
  DNPowerQueryFormulaParameterCollectionClass = interface(DNObjectClass)
  ['{EF43A89F-36F6-5A32-BCE4-E1C226F4132E}']
  { constructors } 

    {class} function init: DNPowerQueryFormulaParameterCollection;

  end;

  [DNTypeName('Aspose.Cells.QueryTables.PowerQueryFormulaParameterCollection')]
  DNPowerQueryFormulaParameterCollection = interface(DNObject)
  ['{6976D06A-8EF6-34B1-A65C-2A493C87CD15}']
  { getters & setters } 

    function get_Item(index: Int32): DNPowerQueryFormulaParameter; overload;
    function get_Item(name: string): DNPowerQueryFormulaParameter; overload;
    function get_Capacity: Int32;
    procedure set_Capacity(value: Int32);
    function get_Count: Int32;

  { methods } 

    function BinarySearch(item: DNPowerQueryFormulaParameter): Int32; overload;
    function BinarySearch(item: DNPowerQueryFormulaParameter; comparer: DDN.mscorlib.DNIComparer<DNPowerQueryFormulaParameter>): Int32; overload;
    function BinarySearch(index: Int32; count: Int32; item: DNPowerQueryFormulaParameter; comparer: DDN.mscorlib.DNIComparer<DNPowerQueryFormulaParameter>): Int32; overload;
    function &Contains(item: DNPowerQueryFormulaParameter): Boolean;
    procedure CopyTo(&array: TArray<DNPowerQueryFormulaParameter>); overload;
    procedure CopyTo(&array: TArray<DNPowerQueryFormulaParameter>; arrayIndex: Int32); overload;
    procedure CopyTo(index: Int32; &array: TArray<DNPowerQueryFormulaParameter>; arrayIndex: Int32; count: Int32); overload;
    function Exists(match: DDN.mscorlib.DNPredicate<DNPowerQueryFormulaParameter>): Boolean;
    function Find(match: DDN.mscorlib.DNPredicate<DNPowerQueryFormulaParameter>): DNPowerQueryFormulaParameter;
    function FindAll(match: DDN.mscorlib.DNPredicate<DNPowerQueryFormulaParameter>): DDN.mscorlib.DNList<DNPowerQueryFormulaParameter>;
    function FindIndex(match: DDN.mscorlib.DNPredicate<DNPowerQueryFormulaParameter>): Int32; overload;
    function FindIndex(startIndex: Int32; match: DDN.mscorlib.DNPredicate<DNPowerQueryFormulaParameter>): Int32; overload;
    function FindIndex(startIndex: Int32; count: Int32; match: DDN.mscorlib.DNPredicate<DNPowerQueryFormulaParameter>): Int32; overload;
    function FindLast(match: DDN.mscorlib.DNPredicate<DNPowerQueryFormulaParameter>): DNPowerQueryFormulaParameter;
    function FindLastIndex(match: DDN.mscorlib.DNPredicate<DNPowerQueryFormulaParameter>): Int32; overload;
    function FindLastIndex(startIndex: Int32; match: DDN.mscorlib.DNPredicate<DNPowerQueryFormulaParameter>): Int32; overload;
    function FindLastIndex(startIndex: Int32; count: Int32; match: DDN.mscorlib.DNPredicate<DNPowerQueryFormulaParameter>): Int32; overload;
    function IndexOf(item: DNPowerQueryFormulaParameter): Int32; overload;
    function IndexOf(item: DNPowerQueryFormulaParameter; index: Int32): Int32; overload;
    function IndexOf(item: DNPowerQueryFormulaParameter; index: Int32; count: Int32): Int32; overload;
    function LastIndexOf(item: DNPowerQueryFormulaParameter): Int32; overload;
    function LastIndexOf(item: DNPowerQueryFormulaParameter; index: Int32): Int32; overload;
    function LastIndexOf(item: DNPowerQueryFormulaParameter; index: Int32; count: Int32): Int32; overload;
    function GetEnumerator: DDN.mscorlib.DNIEnumerator<DNPowerQueryFormulaParameter>;
    procedure RemoveAt(index: Int32);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Item[index: Int32]: DNPowerQueryFormulaParameter read get_Item; default;
    property Item[name: string]: DNPowerQueryFormulaParameter read get_Item; default;
    property Capacity: Int32 read get_Capacity write set_Capacity;
    property Count: Int32 read get_Count;
  end;

  TDNPowerQueryFormulaParameterCollection = class(TDNGenericImport<DNPowerQueryFormulaParameterCollectionClass, DNPowerQueryFormulaParameterCollection>) end;

  //-------------namespace: Aspose.Cells----------------
  DNRangeCollectionClass = interface(DNObjectClass)
  ['{9D0CE5A1-A084-594A-833F-A5498A58C0AD}']
  end;

  [DNTypeName('Aspose.Cells.RangeCollection')]
  DNRangeCollection = interface(DNObject)
  ['{3207AC2F-8E83-370B-870D-AD21303C7F46}']
  { getters & setters } 

    function get_Item(index: Int32): DNRange;
    function get_Capacity: Int32;
    procedure set_Capacity(value: Int32);
    function get_Count: Int32;

  { methods } 

    function Add(range: DNRange): Int32;
    function BinarySearch(item: DNRange): Int32; overload;
    function BinarySearch(item: DNRange; comparer: DDN.mscorlib.DNIComparer<DNRange>): Int32; overload;
    function BinarySearch(index: Int32; count: Int32; item: DNRange; comparer: DDN.mscorlib.DNIComparer<DNRange>): Int32; overload;
    function &Contains(item: DNRange): Boolean;
    procedure CopyTo(&array: TArray<DNRange>); overload;
    procedure CopyTo(&array: TArray<DNRange>; arrayIndex: Int32); overload;
    procedure CopyTo(index: Int32; &array: TArray<DNRange>; arrayIndex: Int32; count: Int32); overload;
    function Exists(match: DDN.mscorlib.DNPredicate<DNRange>): Boolean;
    function Find(match: DDN.mscorlib.DNPredicate<DNRange>): DNRange;
    function FindAll(match: DDN.mscorlib.DNPredicate<DNRange>): DDN.mscorlib.DNList<DNRange>;
    function FindIndex(match: DDN.mscorlib.DNPredicate<DNRange>): Int32; overload;
    function FindIndex(startIndex: Int32; match: DDN.mscorlib.DNPredicate<DNRange>): Int32; overload;
    function FindIndex(startIndex: Int32; count: Int32; match: DDN.mscorlib.DNPredicate<DNRange>): Int32; overload;
    function FindLast(match: DDN.mscorlib.DNPredicate<DNRange>): DNRange;
    function FindLastIndex(match: DDN.mscorlib.DNPredicate<DNRange>): Int32; overload;
    function FindLastIndex(startIndex: Int32; match: DDN.mscorlib.DNPredicate<DNRange>): Int32; overload;
    function FindLastIndex(startIndex: Int32; count: Int32; match: DDN.mscorlib.DNPredicate<DNRange>): Int32; overload;
    function IndexOf(item: DNRange): Int32; overload;
    function IndexOf(item: DNRange; index: Int32): Int32; overload;
    function IndexOf(item: DNRange; index: Int32; count: Int32): Int32; overload;
    function LastIndexOf(item: DNRange): Int32; overload;
    function LastIndexOf(item: DNRange; index: Int32): Int32; overload;
    function LastIndexOf(item: DNRange; index: Int32; count: Int32): Int32; overload;
    function GetEnumerator: DDN.mscorlib.DNIEnumerator<DNRange>;
    procedure RemoveAt(index: Int32);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Item[index: Int32]: DNRange read get_Item; default;
    property Capacity: Int32 read get_Capacity write set_Capacity;
    property Count: Int32 read get_Count;
  end;

  TDNRangeCollection = class(TDNGenericImport<DNRangeCollectionClass, DNRangeCollection>) end;

  //-------------namespace: Aspose.Cells----------------
  DNReferredAreaCollectionClass = interface(DNObjectClass)
  ['{418426B5-CE14-5956-8A39-E58B0EF239D5}']
  end;

  [DNTypeName('Aspose.Cells.ReferredAreaCollection')]
  DNReferredAreaCollection = interface(DNObject)
  ['{0DABF001-056B-3831-BE72-FF2BFDA1E850}']
  { getters & setters } 

    function get_Item(index: Int32): DNReferredArea;
    function get_Capacity: Int32;
    procedure set_Capacity(value: Int32);
    function get_Count: Int32;

  { methods } 

    function BinarySearch(item: DNReferredArea): Int32; overload;
    function BinarySearch(item: DNReferredArea; comparer: DDN.mscorlib.DNIComparer<DNReferredArea>): Int32; overload;
    function BinarySearch(index: Int32; count: Int32; item: DNReferredArea; comparer: DDN.mscorlib.DNIComparer<DNReferredArea>): Int32; overload;
    function &Contains(item: DNReferredArea): Boolean;
    procedure CopyTo(&array: TArray<DNReferredArea>); overload;
    procedure CopyTo(&array: TArray<DNReferredArea>; arrayIndex: Int32); overload;
    procedure CopyTo(index: Int32; &array: TArray<DNReferredArea>; arrayIndex: Int32; count: Int32); overload;
    function Exists(match: DDN.mscorlib.DNPredicate<DNReferredArea>): Boolean;
    function Find(match: DDN.mscorlib.DNPredicate<DNReferredArea>): DNReferredArea;
    function FindAll(match: DDN.mscorlib.DNPredicate<DNReferredArea>): DDN.mscorlib.DNList<DNReferredArea>;
    function FindIndex(match: DDN.mscorlib.DNPredicate<DNReferredArea>): Int32; overload;
    function FindIndex(startIndex: Int32; match: DDN.mscorlib.DNPredicate<DNReferredArea>): Int32; overload;
    function FindIndex(startIndex: Int32; count: Int32; match: DDN.mscorlib.DNPredicate<DNReferredArea>): Int32; overload;
    function FindLast(match: DDN.mscorlib.DNPredicate<DNReferredArea>): DNReferredArea;
    function FindLastIndex(match: DDN.mscorlib.DNPredicate<DNReferredArea>): Int32; overload;
    function FindLastIndex(startIndex: Int32; match: DDN.mscorlib.DNPredicate<DNReferredArea>): Int32; overload;
    function FindLastIndex(startIndex: Int32; count: Int32; match: DDN.mscorlib.DNPredicate<DNReferredArea>): Int32; overload;
    function IndexOf(item: DNReferredArea): Int32; overload;
    function IndexOf(item: DNReferredArea; index: Int32): Int32; overload;
    function IndexOf(item: DNReferredArea; index: Int32; count: Int32): Int32; overload;
    function LastIndexOf(item: DNReferredArea): Int32; overload;
    function LastIndexOf(item: DNReferredArea; index: Int32): Int32; overload;
    function LastIndexOf(item: DNReferredArea; index: Int32; count: Int32): Int32; overload;
    function GetEnumerator: DDN.mscorlib.DNIEnumerator<DNReferredArea>;
    procedure RemoveAt(index: Int32);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Item[index: Int32]: DNReferredArea read get_Item; default;
    property Capacity: Int32 read get_Capacity write set_Capacity;
    property Count: Int32 read get_Count;
  end;

  TDNReferredAreaCollection = class(TDNGenericImport<DNReferredAreaCollectionClass, DNReferredAreaCollection>) end;

  //-------------namespace: Aspose.Cells.Revisions----------------
  DNRevisionCollectionClass = interface(DNObjectClass)
  ['{CBD053CA-C7F2-5AFC-BD3F-FA1C79F427C9}']
  end;

  [DNTypeName('Aspose.Cells.Revisions.RevisionCollection')]
  DNRevisionCollection = interface(DNObject)
  ['{BFFBA6C3-F251-3483-AFEE-1B9EB4A31187}']
  { getters & setters } 

    function get_Item(index: Int32): DNRevision;
    function get_Capacity: Int32;
    procedure set_Capacity(value: Int32);
    function get_Count: Int32;

  { methods } 

    function BinarySearch(item: DNRevision): Int32; overload;
    function BinarySearch(item: DNRevision; comparer: DDN.mscorlib.DNIComparer<DNRevision>): Int32; overload;
    function BinarySearch(index: Int32; count: Int32; item: DNRevision; comparer: DDN.mscorlib.DNIComparer<DNRevision>): Int32; overload;
    function &Contains(item: DNRevision): Boolean;
    procedure CopyTo(&array: TArray<DNRevision>); overload;
    procedure CopyTo(&array: TArray<DNRevision>; arrayIndex: Int32); overload;
    procedure CopyTo(index: Int32; &array: TArray<DNRevision>; arrayIndex: Int32; count: Int32); overload;
    function Exists(match: DDN.mscorlib.DNPredicate<DNRevision>): Boolean;
    function Find(match: DDN.mscorlib.DNPredicate<DNRevision>): DNRevision;
    function FindAll(match: DDN.mscorlib.DNPredicate<DNRevision>): DDN.mscorlib.DNList<DNRevision>;
    function FindIndex(match: DDN.mscorlib.DNPredicate<DNRevision>): Int32; overload;
    function FindIndex(startIndex: Int32; match: DDN.mscorlib.DNPredicate<DNRevision>): Int32; overload;
    function FindIndex(startIndex: Int32; count: Int32; match: DDN.mscorlib.DNPredicate<DNRevision>): Int32; overload;
    function FindLast(match: DDN.mscorlib.DNPredicate<DNRevision>): DNRevision;
    function FindLastIndex(match: DDN.mscorlib.DNPredicate<DNRevision>): Int32; overload;
    function FindLastIndex(startIndex: Int32; match: DDN.mscorlib.DNPredicate<DNRevision>): Int32; overload;
    function FindLastIndex(startIndex: Int32; count: Int32; match: DDN.mscorlib.DNPredicate<DNRevision>): Int32; overload;
    function IndexOf(item: DNRevision): Int32; overload;
    function IndexOf(item: DNRevision; index: Int32): Int32; overload;
    function IndexOf(item: DNRevision; index: Int32; count: Int32): Int32; overload;
    function LastIndexOf(item: DNRevision): Int32; overload;
    function LastIndexOf(item: DNRevision; index: Int32): Int32; overload;
    function LastIndexOf(item: DNRevision; index: Int32; count: Int32): Int32; overload;
    function GetEnumerator: DDN.mscorlib.DNIEnumerator<DNRevision>;
    procedure RemoveAt(index: Int32);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Item[index: Int32]: DNRevision read get_Item; default;
    property Capacity: Int32 read get_Capacity write set_Capacity;
    property Count: Int32 read get_Count;
  end;

  TDNRevisionCollection = class(TDNGenericImport<DNRevisionCollectionClass, DNRevisionCollection>) end;

  //-------------namespace: Aspose.Cells.Revisions----------------
  DNRevisionLogCollectionClass = interface(DNObjectClass)
  ['{60B5CE3C-97D9-5944-BD20-501E71680883}']
  end;

  [DNTypeName('Aspose.Cells.Revisions.RevisionLogCollection')]
  DNRevisionLogCollection = interface(DNObject)
  ['{EF56C981-B556-329B-806A-58200533AE7C}']
  { getters & setters } 

    function get_DaysPreservingHistory: Int32;
    procedure set_DaysPreservingHistory(value: Int32);
    function get_Item(index: Int32): DNRevisionLog;
    function get_Capacity: Int32;
    procedure set_Capacity(value: Int32);
    function get_Count: Int32;

  { methods } 

    function BinarySearch(item: DNRevisionLog): Int32; overload;
    function BinarySearch(item: DNRevisionLog; comparer: DDN.mscorlib.DNIComparer<DNRevisionLog>): Int32; overload;
    function BinarySearch(index: Int32; count: Int32; item: DNRevisionLog; comparer: DDN.mscorlib.DNIComparer<DNRevisionLog>): Int32; overload;
    function &Contains(item: DNRevisionLog): Boolean;
    procedure CopyTo(&array: TArray<DNRevisionLog>); overload;
    procedure CopyTo(&array: TArray<DNRevisionLog>; arrayIndex: Int32); overload;
    procedure CopyTo(index: Int32; &array: TArray<DNRevisionLog>; arrayIndex: Int32; count: Int32); overload;
    function Exists(match: DDN.mscorlib.DNPredicate<DNRevisionLog>): Boolean;
    function Find(match: DDN.mscorlib.DNPredicate<DNRevisionLog>): DNRevisionLog;
    function FindAll(match: DDN.mscorlib.DNPredicate<DNRevisionLog>): DDN.mscorlib.DNList<DNRevisionLog>;
    function FindIndex(match: DDN.mscorlib.DNPredicate<DNRevisionLog>): Int32; overload;
    function FindIndex(startIndex: Int32; match: DDN.mscorlib.DNPredicate<DNRevisionLog>): Int32; overload;
    function FindIndex(startIndex: Int32; count: Int32; match: DDN.mscorlib.DNPredicate<DNRevisionLog>): Int32; overload;
    function FindLast(match: DDN.mscorlib.DNPredicate<DNRevisionLog>): DNRevisionLog;
    function FindLastIndex(match: DDN.mscorlib.DNPredicate<DNRevisionLog>): Int32; overload;
    function FindLastIndex(startIndex: Int32; match: DDN.mscorlib.DNPredicate<DNRevisionLog>): Int32; overload;
    function FindLastIndex(startIndex: Int32; count: Int32; match: DDN.mscorlib.DNPredicate<DNRevisionLog>): Int32; overload;
    function IndexOf(item: DNRevisionLog): Int32; overload;
    function IndexOf(item: DNRevisionLog; index: Int32): Int32; overload;
    function IndexOf(item: DNRevisionLog; index: Int32; count: Int32): Int32; overload;
    function LastIndexOf(item: DNRevisionLog): Int32; overload;
    function LastIndexOf(item: DNRevisionLog; index: Int32): Int32; overload;
    function LastIndexOf(item: DNRevisionLog; index: Int32; count: Int32): Int32; overload;
    function GetEnumerator: DDN.mscorlib.DNIEnumerator<DNRevisionLog>;
    procedure RemoveAt(index: Int32);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property DaysPreservingHistory: Int32 read get_DaysPreservingHistory write set_DaysPreservingHistory;
    property Item[index: Int32]: DNRevisionLog read get_Item; default;
    property Capacity: Int32 read get_Capacity write set_Capacity;
    property Count: Int32 read get_Count;
  end;

  TDNRevisionLogCollection = class(TDNGenericImport<DNRevisionLogCollectionClass, DNRevisionLogCollection>) end;

  //-------------namespace: Aspose.Cells----------------
  DNScenarioCollectionClass = interface(DNObjectClass)
  ['{DEA6A84D-ABCA-59E8-B972-D0ACBFD78E2F}']
  end;

  [DNTypeName('Aspose.Cells.ScenarioCollection')]
  DNScenarioCollection = interface(DNObject)
  ['{0B395981-2432-3D1A-810B-5F6983E71CD4}']
  { getters & setters } 

    function get_ActiveIndex: Int32;
    procedure set_ActiveIndex(value: Int32);
    function get_LastSelected: Int32;
    procedure set_LastSelected(value: Int32);
    function get_Item(index: Int32): DNScenario;
    function get_Capacity: Int32;
    procedure set_Capacity(value: Int32);
    function get_Count: Int32;

  { methods } 

    function Add(name: string): Int32;
    function BinarySearch(item: DNScenario): Int32; overload;
    function BinarySearch(item: DNScenario; comparer: DDN.mscorlib.DNIComparer<DNScenario>): Int32; overload;
    function BinarySearch(index: Int32; count: Int32; item: DNScenario; comparer: DDN.mscorlib.DNIComparer<DNScenario>): Int32; overload;
    function &Contains(item: DNScenario): Boolean;
    procedure CopyTo(&array: TArray<DNScenario>); overload;
    procedure CopyTo(&array: TArray<DNScenario>; arrayIndex: Int32); overload;
    procedure CopyTo(index: Int32; &array: TArray<DNScenario>; arrayIndex: Int32; count: Int32); overload;
    function Exists(match: DDN.mscorlib.DNPredicate<DNScenario>): Boolean;
    function Find(match: DDN.mscorlib.DNPredicate<DNScenario>): DNScenario;
    function FindAll(match: DDN.mscorlib.DNPredicate<DNScenario>): DDN.mscorlib.DNList<DNScenario>;
    function FindIndex(match: DDN.mscorlib.DNPredicate<DNScenario>): Int32; overload;
    function FindIndex(startIndex: Int32; match: DDN.mscorlib.DNPredicate<DNScenario>): Int32; overload;
    function FindIndex(startIndex: Int32; count: Int32; match: DDN.mscorlib.DNPredicate<DNScenario>): Int32; overload;
    function FindLast(match: DDN.mscorlib.DNPredicate<DNScenario>): DNScenario;
    function FindLastIndex(match: DDN.mscorlib.DNPredicate<DNScenario>): Int32; overload;
    function FindLastIndex(startIndex: Int32; match: DDN.mscorlib.DNPredicate<DNScenario>): Int32; overload;
    function FindLastIndex(startIndex: Int32; count: Int32; match: DDN.mscorlib.DNPredicate<DNScenario>): Int32; overload;
    function IndexOf(item: DNScenario): Int32; overload;
    function IndexOf(item: DNScenario; index: Int32): Int32; overload;
    function IndexOf(item: DNScenario; index: Int32; count: Int32): Int32; overload;
    function LastIndexOf(item: DNScenario): Int32; overload;
    function LastIndexOf(item: DNScenario; index: Int32): Int32; overload;
    function LastIndexOf(item: DNScenario; index: Int32; count: Int32): Int32; overload;
    function GetEnumerator: DDN.mscorlib.DNIEnumerator<DNScenario>;
    procedure RemoveAt(index: Int32);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property ActiveIndex: Int32 read get_ActiveIndex write set_ActiveIndex;
    property LastSelected: Int32 read get_LastSelected write set_LastSelected;
    property Item[index: Int32]: DNScenario read get_Item; default;
    property Capacity: Int32 read get_Capacity write set_Capacity;
    property Count: Int32 read get_Count;
  end;

  TDNScenarioCollection = class(TDNGenericImport<DNScenarioCollectionClass, DNScenarioCollection>) end;

  //-------------namespace: Aspose.Cells----------------
  DNScenarioInputCellCollectionClass = interface(DNObjectClass)
  ['{06078FFC-1BE6-5C28-AFE5-F36089015558}']
  end;

  [DNTypeName('Aspose.Cells.ScenarioInputCellCollection')]
  DNScenarioInputCellCollection = interface(DNObject)
  ['{9F6F9239-E317-319C-9C7C-78927A149F33}']
  { getters & setters } 

    function get_Item(index: Int32): DNScenarioInputCell;
    function get_Capacity: Int32;
    procedure set_Capacity(value: Int32);
    function get_Count: Int32;

  { methods } 

    function Add(row: Int32; column: Int32; value: string): Int32;
    function BinarySearch(item: DNScenarioInputCell): Int32; overload;
    function BinarySearch(item: DNScenarioInputCell; comparer: DDN.mscorlib.DNIComparer<DNScenarioInputCell>): Int32; overload;
    function BinarySearch(index: Int32; count: Int32; item: DNScenarioInputCell; comparer: DDN.mscorlib.DNIComparer<DNScenarioInputCell>): Int32; overload;
    function &Contains(item: DNScenarioInputCell): Boolean;
    procedure CopyTo(&array: TArray<DNScenarioInputCell>); overload;
    procedure CopyTo(&array: TArray<DNScenarioInputCell>; arrayIndex: Int32); overload;
    procedure CopyTo(index: Int32; &array: TArray<DNScenarioInputCell>; arrayIndex: Int32; count: Int32); overload;
    function Exists(match: DDN.mscorlib.DNPredicate<DNScenarioInputCell>): Boolean;
    function Find(match: DDN.mscorlib.DNPredicate<DNScenarioInputCell>): DNScenarioInputCell;
    function FindAll(match: DDN.mscorlib.DNPredicate<DNScenarioInputCell>): DDN.mscorlib.DNList<DNScenarioInputCell>;
    function FindIndex(match: DDN.mscorlib.DNPredicate<DNScenarioInputCell>): Int32; overload;
    function FindIndex(startIndex: Int32; match: DDN.mscorlib.DNPredicate<DNScenarioInputCell>): Int32; overload;
    function FindIndex(startIndex: Int32; count: Int32; match: DDN.mscorlib.DNPredicate<DNScenarioInputCell>): Int32; overload;
    function FindLast(match: DDN.mscorlib.DNPredicate<DNScenarioInputCell>): DNScenarioInputCell;
    function FindLastIndex(match: DDN.mscorlib.DNPredicate<DNScenarioInputCell>): Int32; overload;
    function FindLastIndex(startIndex: Int32; match: DDN.mscorlib.DNPredicate<DNScenarioInputCell>): Int32; overload;
    function FindLastIndex(startIndex: Int32; count: Int32; match: DDN.mscorlib.DNPredicate<DNScenarioInputCell>): Int32; overload;
    function IndexOf(item: DNScenarioInputCell): Int32; overload;
    function IndexOf(item: DNScenarioInputCell; index: Int32): Int32; overload;
    function IndexOf(item: DNScenarioInputCell; index: Int32; count: Int32): Int32; overload;
    function LastIndexOf(item: DNScenarioInputCell): Int32; overload;
    function LastIndexOf(item: DNScenarioInputCell; index: Int32): Int32; overload;
    function LastIndexOf(item: DNScenarioInputCell; index: Int32; count: Int32): Int32; overload;
    function GetEnumerator: DDN.mscorlib.DNIEnumerator<DNScenarioInputCell>;
    procedure RemoveAt(index: Int32);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Item[index: Int32]: DNScenarioInputCell read get_Item; default;
    property Capacity: Int32 read get_Capacity write set_Capacity;
    property Count: Int32 read get_Count;
  end;

  TDNScenarioInputCellCollection = class(TDNGenericImport<DNScenarioInputCellCollectionClass, DNScenarioInputCellCollection>) end;

  //-------------namespace: Aspose.Cells.Slicers----------------
  DNSlicerCollectionClass = interface(DNObjectClass)
  ['{36A6F78B-575B-536B-BEB4-49B54468DA78}']
  end;

  [DNTypeName('Aspose.Cells.Slicers.SlicerCollection')]
  DNSlicerCollection = interface(DNObject)
  ['{5F4581E2-D648-3F87-8FBD-5BE8D96C438D}']
  { getters & setters } 

    function get_Item(index: Int32): DNSlicer; overload;
    function get_Item(name: string): DNSlicer; overload;
    function get_Capacity: Int32;
    procedure set_Capacity(value: Int32);
    function get_Count: Int32;

  { methods } 

    procedure Remove(slicer: DNSlicer);
    procedure RemoveAt(index: Int32);
    function Add(pivot: DNPivotTable; destCellName: string; baseFieldName: string): Int32; overload;
    function Add(pivot: DNPivotTable; row: Int32; column: Int32; baseFieldName: string): Int32; overload;
    function Add(pivot: DNPivotTable; row: Int32; column: Int32; baseFieldIndex: Int32): Int32; overload;
    function Add(pivot: DNPivotTable; destCellName: string; baseFieldIndex: Int32): Int32; overload;
    function Add(pivot: DNPivotTable; row: Int32; column: Int32; baseField: DNPivotField): Int32; overload;
    function Add(pivot: DNPivotTable; destCellName: string; baseField: DNPivotField): Int32; overload;
    function Add(table: DNListObject; index: Int32; destCellName: string): Int32; overload;
    function Add(table: DNListObject; listColumn: DNListColumn; destCellName: string): Int32; overload;
    function Add(table: DNListObject; listColumn: DNListColumn; row: Int32; column: Int32): Int32; overload;
    function BinarySearch(item: DNSlicer): Int32; overload;
    function BinarySearch(item: DNSlicer; comparer: DDN.mscorlib.DNIComparer<DNSlicer>): Int32; overload;
    function BinarySearch(index: Int32; count: Int32; item: DNSlicer; comparer: DDN.mscorlib.DNIComparer<DNSlicer>): Int32; overload;
    function &Contains(item: DNSlicer): Boolean;
    procedure CopyTo(&array: TArray<DNSlicer>); overload;
    procedure CopyTo(&array: TArray<DNSlicer>; arrayIndex: Int32); overload;
    procedure CopyTo(index: Int32; &array: TArray<DNSlicer>; arrayIndex: Int32; count: Int32); overload;
    function Exists(match: DDN.mscorlib.DNPredicate<DNSlicer>): Boolean;
    function Find(match: DDN.mscorlib.DNPredicate<DNSlicer>): DNSlicer;
    function FindAll(match: DDN.mscorlib.DNPredicate<DNSlicer>): DDN.mscorlib.DNList<DNSlicer>;
    function FindIndex(match: DDN.mscorlib.DNPredicate<DNSlicer>): Int32; overload;
    function FindIndex(startIndex: Int32; match: DDN.mscorlib.DNPredicate<DNSlicer>): Int32; overload;
    function FindIndex(startIndex: Int32; count: Int32; match: DDN.mscorlib.DNPredicate<DNSlicer>): Int32; overload;
    function FindLast(match: DDN.mscorlib.DNPredicate<DNSlicer>): DNSlicer;
    function FindLastIndex(match: DDN.mscorlib.DNPredicate<DNSlicer>): Int32; overload;
    function FindLastIndex(startIndex: Int32; match: DDN.mscorlib.DNPredicate<DNSlicer>): Int32; overload;
    function FindLastIndex(startIndex: Int32; count: Int32; match: DDN.mscorlib.DNPredicate<DNSlicer>): Int32; overload;
    function IndexOf(item: DNSlicer): Int32; overload;
    function IndexOf(item: DNSlicer; index: Int32): Int32; overload;
    function IndexOf(item: DNSlicer; index: Int32; count: Int32): Int32; overload;
    function LastIndexOf(item: DNSlicer): Int32; overload;
    function LastIndexOf(item: DNSlicer; index: Int32): Int32; overload;
    function LastIndexOf(item: DNSlicer; index: Int32; count: Int32): Int32; overload;
    function GetEnumerator: DDN.mscorlib.DNIEnumerator<DNSlicer>;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Item[index: Int32]: DNSlicer read get_Item; default;
    property Item[name: string]: DNSlicer read get_Item; default;
    property Capacity: Int32 read get_Capacity write set_Capacity;
    property Count: Int32 read get_Count;
  end;

  TDNSlicerCollection = class(TDNGenericImport<DNSlicerCollectionClass, DNSlicerCollection>) end;

  //-------------namespace: Aspose.Cells.Slicers----------------
  DNSlicerCacheItemCollectionClass = interface(DNObjectClass)
  ['{D61D2E33-B55D-5EFF-B0B5-2E2D76D3F251}']
  end;

  [DNTypeName('Aspose.Cells.Slicers.SlicerCacheItemCollection')]
  DNSlicerCacheItemCollection = interface(DNObject)
  ['{00D23D45-65EF-3844-AA5E-A2697E100C83}']
  { getters & setters } 

    function get_Item(index: Int32): DNSlicerCacheItem;
    function get_Count: Int32;
    function get_Capacity: Int32;
    procedure set_Capacity(value: Int32);

  { methods } 

    function BinarySearch(item: DNSlicerCacheItem): Int32; overload;
    function BinarySearch(item: DNSlicerCacheItem; comparer: DDN.mscorlib.DNIComparer<DNSlicerCacheItem>): Int32; overload;
    function BinarySearch(index: Int32; count: Int32; item: DNSlicerCacheItem; comparer: DDN.mscorlib.DNIComparer<DNSlicerCacheItem>): Int32; overload;
    function &Contains(item: DNSlicerCacheItem): Boolean;
    procedure CopyTo(&array: TArray<DNSlicerCacheItem>); overload;
    procedure CopyTo(&array: TArray<DNSlicerCacheItem>; arrayIndex: Int32); overload;
    procedure CopyTo(index: Int32; &array: TArray<DNSlicerCacheItem>; arrayIndex: Int32; count: Int32); overload;
    function Exists(match: DDN.mscorlib.DNPredicate<DNSlicerCacheItem>): Boolean;
    function Find(match: DDN.mscorlib.DNPredicate<DNSlicerCacheItem>): DNSlicerCacheItem;
    function FindAll(match: DDN.mscorlib.DNPredicate<DNSlicerCacheItem>): DDN.mscorlib.DNList<DNSlicerCacheItem>;
    function FindIndex(match: DDN.mscorlib.DNPredicate<DNSlicerCacheItem>): Int32; overload;
    function FindIndex(startIndex: Int32; match: DDN.mscorlib.DNPredicate<DNSlicerCacheItem>): Int32; overload;
    function FindIndex(startIndex: Int32; count: Int32; match: DDN.mscorlib.DNPredicate<DNSlicerCacheItem>): Int32; overload;
    function FindLast(match: DDN.mscorlib.DNPredicate<DNSlicerCacheItem>): DNSlicerCacheItem;
    function FindLastIndex(match: DDN.mscorlib.DNPredicate<DNSlicerCacheItem>): Int32; overload;
    function FindLastIndex(startIndex: Int32; match: DDN.mscorlib.DNPredicate<DNSlicerCacheItem>): Int32; overload;
    function FindLastIndex(startIndex: Int32; count: Int32; match: DDN.mscorlib.DNPredicate<DNSlicerCacheItem>): Int32; overload;
    function IndexOf(item: DNSlicerCacheItem): Int32; overload;
    function IndexOf(item: DNSlicerCacheItem; index: Int32): Int32; overload;
    function IndexOf(item: DNSlicerCacheItem; index: Int32; count: Int32): Int32; overload;
    function LastIndexOf(item: DNSlicerCacheItem): Int32; overload;
    function LastIndexOf(item: DNSlicerCacheItem; index: Int32): Int32; overload;
    function LastIndexOf(item: DNSlicerCacheItem; index: Int32; count: Int32): Int32; overload;
    function GetEnumerator: DDN.mscorlib.DNIEnumerator<DNSlicerCacheItem>;
    procedure RemoveAt(index: Int32);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Item[index: Int32]: DNSlicerCacheItem read get_Item; default;
    property Count: Int32 read get_Count;
    property Capacity: Int32 read get_Capacity write set_Capacity;
  end;

  TDNSlicerCacheItemCollection = class(TDNGenericImport<DNSlicerCacheItemCollectionClass, DNSlicerCacheItemCollection>) end;

  //-------------namespace: Aspose.Cells----------------
  DNDxfCollectionClass = interface(DNObjectClass)
  ['{E65F483B-473C-5BAC-8FC2-189489179400}']
  end;

  [DNTypeName('Aspose.Cells.DxfCollection')]
  DNDxfCollection = interface(DNObject)
  ['{D4C12B2A-E0F5-3BB7-B77B-F7036610D610}']
  { getters & setters } 

    function get_Item(index: Int32): DNStyle;
    function get_Capacity: Int32;
    procedure set_Capacity(value: Int32);
    function get_Count: Int32;

  { methods } 

    function BinarySearch(item: DNStyle): Int32; overload;
    function BinarySearch(item: DNStyle; comparer: DDN.mscorlib.DNIComparer<DNStyle>): Int32; overload;
    function BinarySearch(index: Int32; count: Int32; item: DNStyle; comparer: DDN.mscorlib.DNIComparer<DNStyle>): Int32; overload;
    function &Contains(item: DNStyle): Boolean;
    procedure CopyTo(&array: TArray<DNStyle>); overload;
    procedure CopyTo(&array: TArray<DNStyle>; arrayIndex: Int32); overload;
    procedure CopyTo(index: Int32; &array: TArray<DNStyle>; arrayIndex: Int32; count: Int32); overload;
    function Exists(match: DDN.mscorlib.DNPredicate<DNStyle>): Boolean;
    function Find(match: DDN.mscorlib.DNPredicate<DNStyle>): DNStyle;
    function FindAll(match: DDN.mscorlib.DNPredicate<DNStyle>): DDN.mscorlib.DNList<DNStyle>;
    function FindIndex(match: DDN.mscorlib.DNPredicate<DNStyle>): Int32; overload;
    function FindIndex(startIndex: Int32; match: DDN.mscorlib.DNPredicate<DNStyle>): Int32; overload;
    function FindIndex(startIndex: Int32; count: Int32; match: DDN.mscorlib.DNPredicate<DNStyle>): Int32; overload;
    function FindLast(match: DDN.mscorlib.DNPredicate<DNStyle>): DNStyle;
    function FindLastIndex(match: DDN.mscorlib.DNPredicate<DNStyle>): Int32; overload;
    function FindLastIndex(startIndex: Int32; match: DDN.mscorlib.DNPredicate<DNStyle>): Int32; overload;
    function FindLastIndex(startIndex: Int32; count: Int32; match: DDN.mscorlib.DNPredicate<DNStyle>): Int32; overload;
    function IndexOf(item: DNStyle): Int32; overload;
    function IndexOf(item: DNStyle; index: Int32): Int32; overload;
    function IndexOf(item: DNStyle; index: Int32; count: Int32): Int32; overload;
    function LastIndexOf(item: DNStyle): Int32; overload;
    function LastIndexOf(item: DNStyle; index: Int32): Int32; overload;
    function LastIndexOf(item: DNStyle; index: Int32; count: Int32): Int32; overload;
    function GetEnumerator: DDN.mscorlib.DNIEnumerator<DNStyle>;
    procedure RemoveAt(index: Int32);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Item[index: Int32]: DNStyle read get_Item; default;
    property Capacity: Int32 read get_Capacity write set_Capacity;
    property Count: Int32 read get_Count;
  end;

  TDNDxfCollection = class(TDNGenericImport<DNDxfCollectionClass, DNDxfCollection>) end;

  //-------------namespace: Aspose.Cells.Tables----------------
  DNListColumnCollectionClass = interface(DNObjectClass)
  ['{A9822DE0-6BAC-532D-9F33-8FAEA2CB9B84}']
  end;

  [DNTypeName('Aspose.Cells.Tables.ListColumnCollection')]
  DNListColumnCollection = interface(DNObject)
  ['{9DF75E1C-821F-35A1-8F03-95B259F8F402}']
  { getters & setters } 

    function get_Item(index: Int32): DNListColumn; overload;
    function get_Item(name: string): DNListColumn; overload;
    function get_Capacity: Int32;
    procedure set_Capacity(value: Int32);
    function get_Count: Int32;

  { methods } 

    function BinarySearch(item: DNListColumn): Int32; overload;
    function BinarySearch(item: DNListColumn; comparer: DDN.mscorlib.DNIComparer<DNListColumn>): Int32; overload;
    function BinarySearch(index: Int32; count: Int32; item: DNListColumn; comparer: DDN.mscorlib.DNIComparer<DNListColumn>): Int32; overload;
    function &Contains(item: DNListColumn): Boolean;
    procedure CopyTo(&array: TArray<DNListColumn>); overload;
    procedure CopyTo(&array: TArray<DNListColumn>; arrayIndex: Int32); overload;
    procedure CopyTo(index: Int32; &array: TArray<DNListColumn>; arrayIndex: Int32; count: Int32); overload;
    function Exists(match: DDN.mscorlib.DNPredicate<DNListColumn>): Boolean;
    function Find(match: DDN.mscorlib.DNPredicate<DNListColumn>): DNListColumn;
    function FindAll(match: DDN.mscorlib.DNPredicate<DNListColumn>): DDN.mscorlib.DNList<DNListColumn>;
    function FindIndex(match: DDN.mscorlib.DNPredicate<DNListColumn>): Int32; overload;
    function FindIndex(startIndex: Int32; match: DDN.mscorlib.DNPredicate<DNListColumn>): Int32; overload;
    function FindIndex(startIndex: Int32; count: Int32; match: DDN.mscorlib.DNPredicate<DNListColumn>): Int32; overload;
    function FindLast(match: DDN.mscorlib.DNPredicate<DNListColumn>): DNListColumn;
    function FindLastIndex(match: DDN.mscorlib.DNPredicate<DNListColumn>): Int32; overload;
    function FindLastIndex(startIndex: Int32; match: DDN.mscorlib.DNPredicate<DNListColumn>): Int32; overload;
    function FindLastIndex(startIndex: Int32; count: Int32; match: DDN.mscorlib.DNPredicate<DNListColumn>): Int32; overload;
    function IndexOf(item: DNListColumn): Int32; overload;
    function IndexOf(item: DNListColumn; index: Int32): Int32; overload;
    function IndexOf(item: DNListColumn; index: Int32; count: Int32): Int32; overload;
    function LastIndexOf(item: DNListColumn): Int32; overload;
    function LastIndexOf(item: DNListColumn; index: Int32): Int32; overload;
    function LastIndexOf(item: DNListColumn; index: Int32; count: Int32): Int32; overload;
    function GetEnumerator: DDN.mscorlib.DNIEnumerator<DNListColumn>;
    procedure RemoveAt(index: Int32);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Item[index: Int32]: DNListColumn read get_Item; default;
    property Item[name: string]: DNListColumn read get_Item; default;
    property Capacity: Int32 read get_Capacity write set_Capacity;
    property Count: Int32 read get_Count;
  end;

  TDNListColumnCollection = class(TDNGenericImport<DNListColumnCollectionClass, DNListColumnCollection>) end;

  //-------------namespace: Aspose.Cells.Tables----------------
  DNListObjectCollectionClass = interface(DNObjectClass)
  ['{4CEF8690-7F70-5BFD-AFC6-3B347DCDED84}']
  end;

  [DNTypeName('Aspose.Cells.Tables.ListObjectCollection')]
  DNListObjectCollection = interface(DNObject)
  ['{6258B5B1-8B78-373B-8803-353CD3AA3FA7}']
  { getters & setters } 

    function get_Item(index: Int32): DNListObject; overload;
    function get_Item(tableName: string): DNListObject; overload;
    function get_Capacity: Int32;
    procedure set_Capacity(value: Int32);
    function get_Count: Int32;

  { methods } 

    function Add(startRow: Int32; startColumn: Int32; endRow: Int32; endColumn: Int32; hasHeaders: Boolean): Int32; overload;
    function Add(startCell: string; endCell: string; hasHeaders: Boolean): Int32; overload;
    procedure UpdateColumnName;
    function BinarySearch(item: DNListObject): Int32; overload;
    function BinarySearch(item: DNListObject; comparer: DDN.mscorlib.DNIComparer<DNListObject>): Int32; overload;
    function BinarySearch(index: Int32; count: Int32; item: DNListObject; comparer: DDN.mscorlib.DNIComparer<DNListObject>): Int32; overload;
    function &Contains(item: DNListObject): Boolean;
    procedure CopyTo(&array: TArray<DNListObject>); overload;
    procedure CopyTo(&array: TArray<DNListObject>; arrayIndex: Int32); overload;
    procedure CopyTo(index: Int32; &array: TArray<DNListObject>; arrayIndex: Int32; count: Int32); overload;
    function Exists(match: DDN.mscorlib.DNPredicate<DNListObject>): Boolean;
    function Find(match: DDN.mscorlib.DNPredicate<DNListObject>): DNListObject;
    function FindAll(match: DDN.mscorlib.DNPredicate<DNListObject>): DDN.mscorlib.DNList<DNListObject>;
    function FindIndex(match: DDN.mscorlib.DNPredicate<DNListObject>): Int32; overload;
    function FindIndex(startIndex: Int32; match: DDN.mscorlib.DNPredicate<DNListObject>): Int32; overload;
    function FindIndex(startIndex: Int32; count: Int32; match: DDN.mscorlib.DNPredicate<DNListObject>): Int32; overload;
    function FindLast(match: DDN.mscorlib.DNPredicate<DNListObject>): DNListObject;
    function FindLastIndex(match: DDN.mscorlib.DNPredicate<DNListObject>): Int32; overload;
    function FindLastIndex(startIndex: Int32; match: DDN.mscorlib.DNPredicate<DNListObject>): Int32; overload;
    function FindLastIndex(startIndex: Int32; count: Int32; match: DDN.mscorlib.DNPredicate<DNListObject>): Int32; overload;
    function IndexOf(item: DNListObject): Int32; overload;
    function IndexOf(item: DNListObject; index: Int32): Int32; overload;
    function IndexOf(item: DNListObject; index: Int32; count: Int32): Int32; overload;
    function LastIndexOf(item: DNListObject): Int32; overload;
    function LastIndexOf(item: DNListObject; index: Int32): Int32; overload;
    function LastIndexOf(item: DNListObject; index: Int32; count: Int32): Int32; overload;
    function GetEnumerator: DDN.mscorlib.DNIEnumerator<DNListObject>;
    procedure RemoveAt(index: Int32);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Item[index: Int32]: DNListObject read get_Item; default;
    property Item[tableName: string]: DNListObject read get_Item; default;
    property Capacity: Int32 read get_Capacity write set_Capacity;
    property Count: Int32 read get_Count;
  end;

  TDNListObjectCollection = class(TDNGenericImport<DNListObjectCollectionClass, DNListObjectCollection>) end;

  //-------------namespace: Aspose.Cells.Tables----------------
  DNTableStyleCollectionClass = interface(DNObjectClass)
  ['{A0945A6E-9DC7-5D65-84F8-1B3E527D4397}']
  end;

  [DNTypeName('Aspose.Cells.Tables.TableStyleCollection')]
  DNTableStyleCollection = interface(DNObject)
  ['{F0DD2C17-5BC4-38BD-BE8D-EB585474C327}']
  { getters & setters } 

    function get_Item(index: Int32): DNTableStyle; overload;
    function get_Item(name: string): DNTableStyle; overload;
    function get_Capacity: Int32;
    procedure set_Capacity(value: Int32);
    function get_Count: Int32;

  { methods } 

    function AddTableStyle(name: string): Int32;
    function AddPivotTableStyle(name: string): Int32;
    function GetBuiltinTableStyle(&type: DNTableStyleType): DNTableStyle;
    function BinarySearch(item: DNTableStyle): Int32; overload;
    function BinarySearch(item: DNTableStyle; comparer: DDN.mscorlib.DNIComparer<DNTableStyle>): Int32; overload;
    function BinarySearch(index: Int32; count: Int32; item: DNTableStyle; comparer: DDN.mscorlib.DNIComparer<DNTableStyle>): Int32; overload;
    function &Contains(item: DNTableStyle): Boolean;
    procedure CopyTo(&array: TArray<DNTableStyle>); overload;
    procedure CopyTo(&array: TArray<DNTableStyle>; arrayIndex: Int32); overload;
    procedure CopyTo(index: Int32; &array: TArray<DNTableStyle>; arrayIndex: Int32; count: Int32); overload;
    function Exists(match: DDN.mscorlib.DNPredicate<DNTableStyle>): Boolean;
    function Find(match: DDN.mscorlib.DNPredicate<DNTableStyle>): DNTableStyle;
    function FindAll(match: DDN.mscorlib.DNPredicate<DNTableStyle>): DDN.mscorlib.DNList<DNTableStyle>;
    function FindIndex(match: DDN.mscorlib.DNPredicate<DNTableStyle>): Int32; overload;
    function FindIndex(startIndex: Int32; match: DDN.mscorlib.DNPredicate<DNTableStyle>): Int32; overload;
    function FindIndex(startIndex: Int32; count: Int32; match: DDN.mscorlib.DNPredicate<DNTableStyle>): Int32; overload;
    function FindLast(match: DDN.mscorlib.DNPredicate<DNTableStyle>): DNTableStyle;
    function FindLastIndex(match: DDN.mscorlib.DNPredicate<DNTableStyle>): Int32; overload;
    function FindLastIndex(startIndex: Int32; match: DDN.mscorlib.DNPredicate<DNTableStyle>): Int32; overload;
    function FindLastIndex(startIndex: Int32; count: Int32; match: DDN.mscorlib.DNPredicate<DNTableStyle>): Int32; overload;
    function IndexOf(item: DNTableStyle): Int32; overload;
    function IndexOf(item: DNTableStyle; index: Int32): Int32; overload;
    function IndexOf(item: DNTableStyle; index: Int32; count: Int32): Int32; overload;
    function LastIndexOf(item: DNTableStyle): Int32; overload;
    function LastIndexOf(item: DNTableStyle; index: Int32): Int32; overload;
    function LastIndexOf(item: DNTableStyle; index: Int32; count: Int32): Int32; overload;
    function GetEnumerator: DDN.mscorlib.DNIEnumerator<DNTableStyle>;
    procedure RemoveAt(index: Int32);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Item[index: Int32]: DNTableStyle read get_Item; default;
    property Item[name: string]: DNTableStyle read get_Item; default;
    property Capacity: Int32 read get_Capacity write set_Capacity;
    property Count: Int32 read get_Count;
  end;

  TDNTableStyleCollection = class(TDNGenericImport<DNTableStyleCollectionClass, DNTableStyleCollection>) end;

  //-------------namespace: Aspose.Cells.Tables----------------
  DNTableStyleElementCollectionClass = interface(DNObjectClass)
  ['{31433D79-1EF7-5E65-8A9E-22AAF0775918}']
  end;

  [DNTypeName('Aspose.Cells.Tables.TableStyleElementCollection')]
  DNTableStyleElementCollection = interface(DNObject)
  ['{415DBDC0-801B-3E7C-9E67-9FE6E7381CB3}']
  { getters & setters } 

    function get_Item(index: Int32): DNTableStyleElement; overload;
    function get_Item(&type: DNTableStyleElementType): DNTableStyleElement; overload;
    function get_Capacity: Int32;
    procedure set_Capacity(value: Int32);
    function get_Count: Int32;

  { methods } 

    function Add(&type: DNTableStyleElementType): Int32;
    function BinarySearch(item: DNTableStyleElement): Int32; overload;
    function BinarySearch(item: DNTableStyleElement; comparer: DDN.mscorlib.DNIComparer<DNTableStyleElement>): Int32; overload;
    function BinarySearch(index: Int32; count: Int32; item: DNTableStyleElement; comparer: DDN.mscorlib.DNIComparer<DNTableStyleElement>): Int32; overload;
    function &Contains(item: DNTableStyleElement): Boolean;
    procedure CopyTo(&array: TArray<DNTableStyleElement>); overload;
    procedure CopyTo(&array: TArray<DNTableStyleElement>; arrayIndex: Int32); overload;
    procedure CopyTo(index: Int32; &array: TArray<DNTableStyleElement>; arrayIndex: Int32; count: Int32); overload;
    function Exists(match: DDN.mscorlib.DNPredicate<DNTableStyleElement>): Boolean;
    function Find(match: DDN.mscorlib.DNPredicate<DNTableStyleElement>): DNTableStyleElement;
    function FindAll(match: DDN.mscorlib.DNPredicate<DNTableStyleElement>): DDN.mscorlib.DNList<DNTableStyleElement>;
    function FindIndex(match: DDN.mscorlib.DNPredicate<DNTableStyleElement>): Int32; overload;
    function FindIndex(startIndex: Int32; match: DDN.mscorlib.DNPredicate<DNTableStyleElement>): Int32; overload;
    function FindIndex(startIndex: Int32; count: Int32; match: DDN.mscorlib.DNPredicate<DNTableStyleElement>): Int32; overload;
    function FindLast(match: DDN.mscorlib.DNPredicate<DNTableStyleElement>): DNTableStyleElement;
    function FindLastIndex(match: DDN.mscorlib.DNPredicate<DNTableStyleElement>): Int32; overload;
    function FindLastIndex(startIndex: Int32; match: DDN.mscorlib.DNPredicate<DNTableStyleElement>): Int32; overload;
    function FindLastIndex(startIndex: Int32; count: Int32; match: DDN.mscorlib.DNPredicate<DNTableStyleElement>): Int32; overload;
    function IndexOf(item: DNTableStyleElement): Int32; overload;
    function IndexOf(item: DNTableStyleElement; index: Int32): Int32; overload;
    function IndexOf(item: DNTableStyleElement; index: Int32; count: Int32): Int32; overload;
    function LastIndexOf(item: DNTableStyleElement): Int32; overload;
    function LastIndexOf(item: DNTableStyleElement; index: Int32): Int32; overload;
    function LastIndexOf(item: DNTableStyleElement; index: Int32; count: Int32): Int32; overload;
    function GetEnumerator: DDN.mscorlib.DNIEnumerator<DNTableStyleElement>;
    procedure RemoveAt(index: Int32);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Item[index: Int32]: DNTableStyleElement read get_Item; default;
    property Item[&type: DNTableStyleElementType]: DNTableStyleElement read get_Item; default;
    property Capacity: Int32 read get_Capacity write set_Capacity;
    property Count: Int32 read get_Count;
  end;

  TDNTableStyleElementCollection = class(TDNGenericImport<DNTableStyleElementCollectionClass, DNTableStyleElementCollection>) end;

  //-------------namespace: Aspose.Cells----------------
  DNThreadedCommentCollectionClass = interface(DNObjectClass)
  ['{DD6F8152-DCB7-5528-9244-ED2A54A9DC44}']
  end;

  [DNTypeName('Aspose.Cells.ThreadedCommentCollection')]
  DNThreadedCommentCollection = interface(DNObject)
  ['{43E8658F-A26A-37F6-98BE-1E7A761A5B4D}']
  { getters & setters } 

    function get_Item(index: Int32): DNThreadedComment;
    function get_Capacity: Int32;
    procedure set_Capacity(value: Int32);
    function get_Count: Int32;

  { methods } 

    function Add(text: string; author: DNThreadedCommentAuthor): Int32;
    function BinarySearch(item: DNThreadedComment): Int32; overload;
    function BinarySearch(item: DNThreadedComment; comparer: DDN.mscorlib.DNIComparer<DNThreadedComment>): Int32; overload;
    function BinarySearch(index: Int32; count: Int32; item: DNThreadedComment; comparer: DDN.mscorlib.DNIComparer<DNThreadedComment>): Int32; overload;
    function &Contains(item: DNThreadedComment): Boolean;
    procedure CopyTo(&array: TArray<DNThreadedComment>); overload;
    procedure CopyTo(&array: TArray<DNThreadedComment>; arrayIndex: Int32); overload;
    procedure CopyTo(index: Int32; &array: TArray<DNThreadedComment>; arrayIndex: Int32; count: Int32); overload;
    function Exists(match: DDN.mscorlib.DNPredicate<DNThreadedComment>): Boolean;
    function Find(match: DDN.mscorlib.DNPredicate<DNThreadedComment>): DNThreadedComment;
    function FindAll(match: DDN.mscorlib.DNPredicate<DNThreadedComment>): DDN.mscorlib.DNList<DNThreadedComment>;
    function FindIndex(match: DDN.mscorlib.DNPredicate<DNThreadedComment>): Int32; overload;
    function FindIndex(startIndex: Int32; match: DDN.mscorlib.DNPredicate<DNThreadedComment>): Int32; overload;
    function FindIndex(startIndex: Int32; count: Int32; match: DDN.mscorlib.DNPredicate<DNThreadedComment>): Int32; overload;
    function FindLast(match: DDN.mscorlib.DNPredicate<DNThreadedComment>): DNThreadedComment;
    function FindLastIndex(match: DDN.mscorlib.DNPredicate<DNThreadedComment>): Int32; overload;
    function FindLastIndex(startIndex: Int32; match: DDN.mscorlib.DNPredicate<DNThreadedComment>): Int32; overload;
    function FindLastIndex(startIndex: Int32; count: Int32; match: DDN.mscorlib.DNPredicate<DNThreadedComment>): Int32; overload;
    function IndexOf(item: DNThreadedComment): Int32; overload;
    function IndexOf(item: DNThreadedComment; index: Int32): Int32; overload;
    function IndexOf(item: DNThreadedComment; index: Int32; count: Int32): Int32; overload;
    function LastIndexOf(item: DNThreadedComment): Int32; overload;
    function LastIndexOf(item: DNThreadedComment; index: Int32): Int32; overload;
    function LastIndexOf(item: DNThreadedComment; index: Int32; count: Int32): Int32; overload;
    function GetEnumerator: DDN.mscorlib.DNIEnumerator<DNThreadedComment>;
    procedure RemoveAt(index: Int32);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Item[index: Int32]: DNThreadedComment read get_Item; default;
    property Capacity: Int32 read get_Capacity write set_Capacity;
    property Count: Int32 read get_Count;
  end;

  TDNThreadedCommentCollection = class(TDNGenericImport<DNThreadedCommentCollectionClass, DNThreadedCommentCollection>) end;

  //-------------namespace: Aspose.Cells----------------
  DNThreadedCommentAuthorCollectionClass = interface(DNObjectClass)
  ['{58D6FA9E-6A90-5284-9AEF-CE49CE226E7D}']
  { constructors } 

    {class} function init: DNThreadedCommentAuthorCollection;

  end;

  [DNTypeName('Aspose.Cells.ThreadedCommentAuthorCollection')]
  DNThreadedCommentAuthorCollection = interface(DNObject)
  ['{93C80F8F-AA0B-37CA-B263-ECD413F3AE2A}']
  { getters & setters } 

    function get_CurrentPerson: DNThreadedCommentAuthor;
    procedure set_CurrentPerson(value: DNThreadedCommentAuthor);
    function get_Item(index: Int32): DNThreadedCommentAuthor; overload;
    function get_Item(name: string): DNThreadedCommentAuthor; overload;
    function get_Capacity: Int32;
    procedure set_Capacity(value: Int32);
    function get_Count: Int32;

  { methods } 

    function Add(name: string; userId: string; providerId: string): Int32;
    function BinarySearch(item: DNThreadedCommentAuthor): Int32; overload;
    function BinarySearch(item: DNThreadedCommentAuthor; comparer: DDN.mscorlib.DNIComparer<DNThreadedCommentAuthor>): Int32; overload;
    function BinarySearch(index: Int32; count: Int32; item: DNThreadedCommentAuthor; comparer: DDN.mscorlib.DNIComparer<DNThreadedCommentAuthor>): Int32; overload;
    function &Contains(item: DNThreadedCommentAuthor): Boolean;
    procedure CopyTo(&array: TArray<DNThreadedCommentAuthor>); overload;
    procedure CopyTo(&array: TArray<DNThreadedCommentAuthor>; arrayIndex: Int32); overload;
    procedure CopyTo(index: Int32; &array: TArray<DNThreadedCommentAuthor>; arrayIndex: Int32; count: Int32); overload;
    function Exists(match: DDN.mscorlib.DNPredicate<DNThreadedCommentAuthor>): Boolean;
    function Find(match: DDN.mscorlib.DNPredicate<DNThreadedCommentAuthor>): DNThreadedCommentAuthor;
    function FindAll(match: DDN.mscorlib.DNPredicate<DNThreadedCommentAuthor>): DDN.mscorlib.DNList<DNThreadedCommentAuthor>;
    function FindIndex(match: DDN.mscorlib.DNPredicate<DNThreadedCommentAuthor>): Int32; overload;
    function FindIndex(startIndex: Int32; match: DDN.mscorlib.DNPredicate<DNThreadedCommentAuthor>): Int32; overload;
    function FindIndex(startIndex: Int32; count: Int32; match: DDN.mscorlib.DNPredicate<DNThreadedCommentAuthor>): Int32; overload;
    function FindLast(match: DDN.mscorlib.DNPredicate<DNThreadedCommentAuthor>): DNThreadedCommentAuthor;
    function FindLastIndex(match: DDN.mscorlib.DNPredicate<DNThreadedCommentAuthor>): Int32; overload;
    function FindLastIndex(startIndex: Int32; match: DDN.mscorlib.DNPredicate<DNThreadedCommentAuthor>): Int32; overload;
    function FindLastIndex(startIndex: Int32; count: Int32; match: DDN.mscorlib.DNPredicate<DNThreadedCommentAuthor>): Int32; overload;
    function IndexOf(item: DNThreadedCommentAuthor): Int32; overload;
    function IndexOf(item: DNThreadedCommentAuthor; index: Int32): Int32; overload;
    function IndexOf(item: DNThreadedCommentAuthor; index: Int32; count: Int32): Int32; overload;
    function LastIndexOf(item: DNThreadedCommentAuthor): Int32; overload;
    function LastIndexOf(item: DNThreadedCommentAuthor; index: Int32): Int32; overload;
    function LastIndexOf(item: DNThreadedCommentAuthor; index: Int32; count: Int32): Int32; overload;
    function GetEnumerator: DDN.mscorlib.DNIEnumerator<DNThreadedCommentAuthor>;
    procedure RemoveAt(index: Int32);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property CurrentPerson: DNThreadedCommentAuthor read get_CurrentPerson write set_CurrentPerson;
    property Item[index: Int32]: DNThreadedCommentAuthor read get_Item; default;
    property Item[name: string]: DNThreadedCommentAuthor read get_Item; default;
    property Capacity: Int32 read get_Capacity write set_Capacity;
    property Count: Int32 read get_Count;
  end;

  TDNThreadedCommentAuthorCollection = class(TDNGenericImport<DNThreadedCommentAuthorCollectionClass, DNThreadedCommentAuthorCollection>) end;

  //-------------namespace: Aspose.Cells----------------
  DNValidationCollectionClass = interface(DNObjectClass)
  ['{95BD876E-4423-58DC-97D5-1ABB7B2F97AE}']
  end;

  [DNTypeName('Aspose.Cells.ValidationCollection')]
  DNValidationCollection = interface(DNObject)
  ['{74E6D367-BEF3-374E-96BC-0CE4A02E3B32}']
  { getters & setters } 

    function get_Item(index: Int32): DNValidation;
    function get_Capacity: Int32;
    procedure set_Capacity(value: Int32);
    function get_Count: Int32;

  { methods } 

    function Add: Int32; overload;
    function Add(ca: DNCellArea): Int32; overload;
    procedure RemoveACell(row: Int32; column: Int32);
    procedure RemoveArea(ca: DNCellArea);
    function GetValidationInCell(row: Int32; column: Int32): DNValidation;
    function BinarySearch(item: DNValidation): Int32; overload;
    function BinarySearch(item: DNValidation; comparer: DDN.mscorlib.DNIComparer<DNValidation>): Int32; overload;
    function BinarySearch(index: Int32; count: Int32; item: DNValidation; comparer: DDN.mscorlib.DNIComparer<DNValidation>): Int32; overload;
    function &Contains(item: DNValidation): Boolean;
    procedure CopyTo(&array: TArray<DNValidation>); overload;
    procedure CopyTo(&array: TArray<DNValidation>; arrayIndex: Int32); overload;
    procedure CopyTo(index: Int32; &array: TArray<DNValidation>; arrayIndex: Int32; count: Int32); overload;
    function Exists(match: DDN.mscorlib.DNPredicate<DNValidation>): Boolean;
    function Find(match: DDN.mscorlib.DNPredicate<DNValidation>): DNValidation;
    function FindAll(match: DDN.mscorlib.DNPredicate<DNValidation>): DDN.mscorlib.DNList<DNValidation>;
    function FindIndex(match: DDN.mscorlib.DNPredicate<DNValidation>): Int32; overload;
    function FindIndex(startIndex: Int32; match: DDN.mscorlib.DNPredicate<DNValidation>): Int32; overload;
    function FindIndex(startIndex: Int32; count: Int32; match: DDN.mscorlib.DNPredicate<DNValidation>): Int32; overload;
    function FindLast(match: DDN.mscorlib.DNPredicate<DNValidation>): DNValidation;
    function FindLastIndex(match: DDN.mscorlib.DNPredicate<DNValidation>): Int32; overload;
    function FindLastIndex(startIndex: Int32; match: DDN.mscorlib.DNPredicate<DNValidation>): Int32; overload;
    function FindLastIndex(startIndex: Int32; count: Int32; match: DDN.mscorlib.DNPredicate<DNValidation>): Int32; overload;
    function IndexOf(item: DNValidation): Int32; overload;
    function IndexOf(item: DNValidation; index: Int32): Int32; overload;
    function IndexOf(item: DNValidation; index: Int32; count: Int32): Int32; overload;
    function LastIndexOf(item: DNValidation): Int32; overload;
    function LastIndexOf(item: DNValidation; index: Int32): Int32; overload;
    function LastIndexOf(item: DNValidation; index: Int32; count: Int32): Int32; overload;
    function GetEnumerator: DDN.mscorlib.DNIEnumerator<DNValidation>;
    procedure RemoveAt(index: Int32);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Item[index: Int32]: DNValidation read get_Item; default;
    property Capacity: Int32 read get_Capacity write set_Capacity;
    property Count: Int32 read get_Count;
  end;

  TDNValidationCollection = class(TDNGenericImport<DNValidationCollectionClass, DNValidationCollection>) end;

  //-------------namespace: Aspose.Cells.Vba----------------
  DNVbaModuleCollectionClass = interface(DNObjectClass)
  ['{6527AC90-1EA6-5963-BD3D-CDF8F91A5A95}']
  end;

  [DNTypeName('Aspose.Cells.Vba.VbaModuleCollection')]
  DNVbaModuleCollection = interface(DNObject)
  ['{B78BB495-27DB-3A41-A942-429FA11F33EF}']
  { getters & setters } 

    function get_Item(index: Int32): DNVbaModule; overload;
    function get_Item(name: string): DNVbaModule; overload;
    function get_Capacity: Int32;
    procedure set_Capacity(value: Int32);
    function get_Count: Int32;

  { methods } 

    procedure AddDesignerStorage(name: string; data: TArray<Byte>);
    function GetDesignerStorage(name: string): TArray<Byte>;
    function Add(sheet: DNWorksheet): Int32; overload;
    function Add(&type: DNVbaModuleType; name: string): Int32; overload;
    procedure Remove(sheet: DNWorksheet); overload;
    procedure Remove(name: string); overload;
    function BinarySearch(item: DNVbaModule): Int32; overload;
    function BinarySearch(item: DNVbaModule; comparer: DDN.mscorlib.DNIComparer<DNVbaModule>): Int32; overload;
    function BinarySearch(index: Int32; count: Int32; item: DNVbaModule; comparer: DDN.mscorlib.DNIComparer<DNVbaModule>): Int32; overload;
    function &Contains(item: DNVbaModule): Boolean;
    procedure CopyTo(&array: TArray<DNVbaModule>); overload;
    procedure CopyTo(&array: TArray<DNVbaModule>; arrayIndex: Int32); overload;
    procedure CopyTo(index: Int32; &array: TArray<DNVbaModule>; arrayIndex: Int32; count: Int32); overload;
    function Exists(match: DDN.mscorlib.DNPredicate<DNVbaModule>): Boolean;
    function Find(match: DDN.mscorlib.DNPredicate<DNVbaModule>): DNVbaModule;
    function FindAll(match: DDN.mscorlib.DNPredicate<DNVbaModule>): DDN.mscorlib.DNList<DNVbaModule>;
    function FindIndex(match: DDN.mscorlib.DNPredicate<DNVbaModule>): Int32; overload;
    function FindIndex(startIndex: Int32; match: DDN.mscorlib.DNPredicate<DNVbaModule>): Int32; overload;
    function FindIndex(startIndex: Int32; count: Int32; match: DDN.mscorlib.DNPredicate<DNVbaModule>): Int32; overload;
    function FindLast(match: DDN.mscorlib.DNPredicate<DNVbaModule>): DNVbaModule;
    function FindLastIndex(match: DDN.mscorlib.DNPredicate<DNVbaModule>): Int32; overload;
    function FindLastIndex(startIndex: Int32; match: DDN.mscorlib.DNPredicate<DNVbaModule>): Int32; overload;
    function FindLastIndex(startIndex: Int32; count: Int32; match: DDN.mscorlib.DNPredicate<DNVbaModule>): Int32; overload;
    function IndexOf(item: DNVbaModule): Int32; overload;
    function IndexOf(item: DNVbaModule; index: Int32): Int32; overload;
    function IndexOf(item: DNVbaModule; index: Int32; count: Int32): Int32; overload;
    function LastIndexOf(item: DNVbaModule): Int32; overload;
    function LastIndexOf(item: DNVbaModule; index: Int32): Int32; overload;
    function LastIndexOf(item: DNVbaModule; index: Int32; count: Int32): Int32; overload;
    function GetEnumerator: DDN.mscorlib.DNIEnumerator<DNVbaModule>;
    procedure RemoveAt(index: Int32);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Item[index: Int32]: DNVbaModule read get_Item; default;
    property Item[name: string]: DNVbaModule read get_Item; default;
    property Capacity: Int32 read get_Capacity write set_Capacity;
    property Count: Int32 read get_Count;
  end;

  TDNVbaModuleCollection = class(TDNGenericImport<DNVbaModuleCollectionClass, DNVbaModuleCollection>) end;

  //-------------namespace: Aspose.Cells.Vba----------------
  DNVbaProjectReferenceCollectionClass = interface(DNObjectClass)
  ['{A144CA5C-5FF8-5153-9AF5-E46C5713A274}']
  end;

  [DNTypeName('Aspose.Cells.Vba.VbaProjectReferenceCollection')]
  DNVbaProjectReferenceCollection = interface(DNObject)
  ['{439C575D-1DA3-36A2-B406-ADD6B3BEFF1D}']
  { getters & setters } 

    function get_Item(i: Int32): DNVbaProjectReference;
    function get_Capacity: Int32;
    procedure set_Capacity(value: Int32);
    function get_Count: Int32;

  { methods } 

    function AddRegisteredReference(name: string; libid: string): Int32;
    function AddControlRefrernce(name: string; libid: string; twiddledlibid: string; extendedLibid: string): Int32;
    function AddProjectRefrernce(name: string; absoluteLibid: string; relativeLibid: string): Int32;
    procedure Copy(source: DNVbaProjectReferenceCollection);
    function BinarySearch(item: DNVbaProjectReference): Int32; overload;
    function BinarySearch(item: DNVbaProjectReference; comparer: DDN.mscorlib.DNIComparer<DNVbaProjectReference>): Int32; overload;
    function BinarySearch(index: Int32; count: Int32; item: DNVbaProjectReference; comparer: DDN.mscorlib.DNIComparer<DNVbaProjectReference>): Int32; overload;
    function &Contains(item: DNVbaProjectReference): Boolean;
    procedure CopyTo(&array: TArray<DNVbaProjectReference>); overload;
    procedure CopyTo(&array: TArray<DNVbaProjectReference>; arrayIndex: Int32); overload;
    procedure CopyTo(index: Int32; &array: TArray<DNVbaProjectReference>; arrayIndex: Int32; count: Int32); overload;
    function Exists(match: DDN.mscorlib.DNPredicate<DNVbaProjectReference>): Boolean;
    function Find(match: DDN.mscorlib.DNPredicate<DNVbaProjectReference>): DNVbaProjectReference;
    function FindAll(match: DDN.mscorlib.DNPredicate<DNVbaProjectReference>): DDN.mscorlib.DNList<DNVbaProjectReference>;
    function FindIndex(match: DDN.mscorlib.DNPredicate<DNVbaProjectReference>): Int32; overload;
    function FindIndex(startIndex: Int32; match: DDN.mscorlib.DNPredicate<DNVbaProjectReference>): Int32; overload;
    function FindIndex(startIndex: Int32; count: Int32; match: DDN.mscorlib.DNPredicate<DNVbaProjectReference>): Int32; overload;
    function FindLast(match: DDN.mscorlib.DNPredicate<DNVbaProjectReference>): DNVbaProjectReference;
    function FindLastIndex(match: DDN.mscorlib.DNPredicate<DNVbaProjectReference>): Int32; overload;
    function FindLastIndex(startIndex: Int32; match: DDN.mscorlib.DNPredicate<DNVbaProjectReference>): Int32; overload;
    function FindLastIndex(startIndex: Int32; count: Int32; match: DDN.mscorlib.DNPredicate<DNVbaProjectReference>): Int32; overload;
    function IndexOf(item: DNVbaProjectReference): Int32; overload;
    function IndexOf(item: DNVbaProjectReference; index: Int32): Int32; overload;
    function IndexOf(item: DNVbaProjectReference; index: Int32; count: Int32): Int32; overload;
    function LastIndexOf(item: DNVbaProjectReference): Int32; overload;
    function LastIndexOf(item: DNVbaProjectReference; index: Int32): Int32; overload;
    function LastIndexOf(item: DNVbaProjectReference; index: Int32; count: Int32): Int32; overload;
    function GetEnumerator: DDN.mscorlib.DNIEnumerator<DNVbaProjectReference>;
    procedure RemoveAt(index: Int32);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Item[i: Int32]: DNVbaProjectReference read get_Item; default;
    property Capacity: Int32 read get_Capacity write set_Capacity;
    property Count: Int32 read get_Count;
  end;

  TDNVbaProjectReferenceCollection = class(TDNGenericImport<DNVbaProjectReferenceCollectionClass, DNVbaProjectReferenceCollection>) end;

  //-------------namespace: Aspose.Cells----------------
  DNVerticalPageBreakCollectionClass = interface(DNObjectClass)
  ['{56905132-A853-50C4-993B-139CE646C202}']
  end;

  [DNTypeName('Aspose.Cells.VerticalPageBreakCollection')]
  DNVerticalPageBreakCollection = interface(DNObject)
  ['{8361CC26-21A3-33D8-AFF2-44E43ECEA4F8}']
  { getters & setters } 

    function get_Item(index: Int32): DNVerticalPageBreak; overload;
    function get_Item(cellName: string): DNVerticalPageBreak; overload;
    function get_Capacity: Int32;
    procedure set_Capacity(value: Int32);
    function get_Count: Int32;

  { methods } 

    function Add(startRow: Int32; endRow: Int32; column: Int32): Int32; overload;
    function Add(column: Int32): Int32; overload;
    function Add(row: Int32; column: Int32): Int32; overload;
    function Add(cellName: string): Int32; overload;
    procedure RemoveAt(index: Int32);
    function BinarySearch(item: DNVerticalPageBreak): Int32; overload;
    function BinarySearch(item: DNVerticalPageBreak; comparer: DDN.mscorlib.DNIComparer<DNVerticalPageBreak>): Int32; overload;
    function BinarySearch(index: Int32; count: Int32; item: DNVerticalPageBreak; comparer: DDN.mscorlib.DNIComparer<DNVerticalPageBreak>): Int32; overload;
    function &Contains(item: DNVerticalPageBreak): Boolean;
    procedure CopyTo(&array: TArray<DNVerticalPageBreak>); overload;
    procedure CopyTo(&array: TArray<DNVerticalPageBreak>; arrayIndex: Int32); overload;
    procedure CopyTo(index: Int32; &array: TArray<DNVerticalPageBreak>; arrayIndex: Int32; count: Int32); overload;
    function Exists(match: DDN.mscorlib.DNPredicate<DNVerticalPageBreak>): Boolean;
    function Find(match: DDN.mscorlib.DNPredicate<DNVerticalPageBreak>): DNVerticalPageBreak;
    function FindAll(match: DDN.mscorlib.DNPredicate<DNVerticalPageBreak>): DDN.mscorlib.DNList<DNVerticalPageBreak>;
    function FindIndex(match: DDN.mscorlib.DNPredicate<DNVerticalPageBreak>): Int32; overload;
    function FindIndex(startIndex: Int32; match: DDN.mscorlib.DNPredicate<DNVerticalPageBreak>): Int32; overload;
    function FindIndex(startIndex: Int32; count: Int32; match: DDN.mscorlib.DNPredicate<DNVerticalPageBreak>): Int32; overload;
    function FindLast(match: DDN.mscorlib.DNPredicate<DNVerticalPageBreak>): DNVerticalPageBreak;
    function FindLastIndex(match: DDN.mscorlib.DNPredicate<DNVerticalPageBreak>): Int32; overload;
    function FindLastIndex(startIndex: Int32; match: DDN.mscorlib.DNPredicate<DNVerticalPageBreak>): Int32; overload;
    function FindLastIndex(startIndex: Int32; count: Int32; match: DDN.mscorlib.DNPredicate<DNVerticalPageBreak>): Int32; overload;
    function IndexOf(item: DNVerticalPageBreak): Int32; overload;
    function IndexOf(item: DNVerticalPageBreak; index: Int32): Int32; overload;
    function IndexOf(item: DNVerticalPageBreak; index: Int32; count: Int32): Int32; overload;
    function LastIndexOf(item: DNVerticalPageBreak): Int32; overload;
    function LastIndexOf(item: DNVerticalPageBreak; index: Int32): Int32; overload;
    function LastIndexOf(item: DNVerticalPageBreak; index: Int32; count: Int32): Int32; overload;
    function GetEnumerator: DDN.mscorlib.DNIEnumerator<DNVerticalPageBreak>;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Item[index: Int32]: DNVerticalPageBreak read get_Item; default;
    property Item[cellName: string]: DNVerticalPageBreak read get_Item; default;
    property Capacity: Int32 read get_Capacity write set_Capacity;
    property Count: Int32 read get_Count;
  end;

  TDNVerticalPageBreakCollection = class(TDNGenericImport<DNVerticalPageBreakCollectionClass, DNVerticalPageBreakCollection>) end;

  //-------------namespace: Aspose.Cells.WebExtensions----------------
  DNWebExtensionCollectionClass = interface(DNObjectClass)
  ['{A5584237-44F1-57E9-B487-6CFF67354446}']
  end;

  [DNTypeName('Aspose.Cells.WebExtensions.WebExtensionCollection')]
  DNWebExtensionCollection = interface(DNObject)
  ['{00C2CCEC-3EE2-38E6-A5B5-52ACF23D7316}']
  { getters & setters } 

    function get_Item(index: Int32): DNWebExtension;
    function get_Capacity: Int32;
    procedure set_Capacity(value: Int32);
    function get_Count: Int32;

  { methods } 

    function Add: Int32;
    procedure RemoveAt(index: Int32);
    function BinarySearch(item: DNWebExtension): Int32; overload;
    function BinarySearch(item: DNWebExtension; comparer: DDN.mscorlib.DNIComparer<DNWebExtension>): Int32; overload;
    function BinarySearch(index: Int32; count: Int32; item: DNWebExtension; comparer: DDN.mscorlib.DNIComparer<DNWebExtension>): Int32; overload;
    function &Contains(item: DNWebExtension): Boolean;
    procedure CopyTo(&array: TArray<DNWebExtension>); overload;
    procedure CopyTo(&array: TArray<DNWebExtension>; arrayIndex: Int32); overload;
    procedure CopyTo(index: Int32; &array: TArray<DNWebExtension>; arrayIndex: Int32; count: Int32); overload;
    function Exists(match: DDN.mscorlib.DNPredicate<DNWebExtension>): Boolean;
    function Find(match: DDN.mscorlib.DNPredicate<DNWebExtension>): DNWebExtension;
    function FindAll(match: DDN.mscorlib.DNPredicate<DNWebExtension>): DDN.mscorlib.DNList<DNWebExtension>;
    function FindIndex(match: DDN.mscorlib.DNPredicate<DNWebExtension>): Int32; overload;
    function FindIndex(startIndex: Int32; match: DDN.mscorlib.DNPredicate<DNWebExtension>): Int32; overload;
    function FindIndex(startIndex: Int32; count: Int32; match: DDN.mscorlib.DNPredicate<DNWebExtension>): Int32; overload;
    function FindLast(match: DDN.mscorlib.DNPredicate<DNWebExtension>): DNWebExtension;
    function FindLastIndex(match: DDN.mscorlib.DNPredicate<DNWebExtension>): Int32; overload;
    function FindLastIndex(startIndex: Int32; match: DDN.mscorlib.DNPredicate<DNWebExtension>): Int32; overload;
    function FindLastIndex(startIndex: Int32; count: Int32; match: DDN.mscorlib.DNPredicate<DNWebExtension>): Int32; overload;
    function IndexOf(item: DNWebExtension): Int32; overload;
    function IndexOf(item: DNWebExtension; index: Int32): Int32; overload;
    function IndexOf(item: DNWebExtension; index: Int32; count: Int32): Int32; overload;
    function LastIndexOf(item: DNWebExtension): Int32; overload;
    function LastIndexOf(item: DNWebExtension; index: Int32): Int32; overload;
    function LastIndexOf(item: DNWebExtension; index: Int32; count: Int32): Int32; overload;
    function GetEnumerator: DDN.mscorlib.DNIEnumerator<DNWebExtension>;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Item[index: Int32]: DNWebExtension read get_Item; default;
    property Capacity: Int32 read get_Capacity write set_Capacity;
    property Count: Int32 read get_Count;
  end;

  TDNWebExtensionCollection = class(TDNGenericImport<DNWebExtensionCollectionClass, DNWebExtensionCollection>) end;

  //-------------namespace: Aspose.Cells.WebExtensions----------------
  DNWebExtensionBindingCollectionClass = interface(DNObjectClass)
  ['{C014E9CF-173E-560F-BF62-9F3864DDFD07}']
  { constructors } 

    {class} function init: DNWebExtensionBindingCollection;

  end;

  [DNTypeName('Aspose.Cells.WebExtensions.WebExtensionBindingCollection')]
  DNWebExtensionBindingCollection = interface(DNObject)
  ['{72BE3206-C775-3133-BD8C-1E4D4CBF5B25}']
  { getters & setters } 

    function get_Item(index: Int32): DNWebExtensionBinding;
    function get_Capacity: Int32;
    procedure set_Capacity(value: Int32);
    function get_Count: Int32;

  { methods } 

    function Add: Int32;
    function BinarySearch(item: DNWebExtensionBinding): Int32; overload;
    function BinarySearch(item: DNWebExtensionBinding; comparer: DDN.mscorlib.DNIComparer<DNWebExtensionBinding>): Int32; overload;
    function BinarySearch(index: Int32; count: Int32; item: DNWebExtensionBinding; comparer: DDN.mscorlib.DNIComparer<DNWebExtensionBinding>): Int32; overload;
    function &Contains(item: DNWebExtensionBinding): Boolean;
    procedure CopyTo(&array: TArray<DNWebExtensionBinding>); overload;
    procedure CopyTo(&array: TArray<DNWebExtensionBinding>; arrayIndex: Int32); overload;
    procedure CopyTo(index: Int32; &array: TArray<DNWebExtensionBinding>; arrayIndex: Int32; count: Int32); overload;
    function Exists(match: DDN.mscorlib.DNPredicate<DNWebExtensionBinding>): Boolean;
    function Find(match: DDN.mscorlib.DNPredicate<DNWebExtensionBinding>): DNWebExtensionBinding;
    function FindAll(match: DDN.mscorlib.DNPredicate<DNWebExtensionBinding>): DDN.mscorlib.DNList<DNWebExtensionBinding>;
    function FindIndex(match: DDN.mscorlib.DNPredicate<DNWebExtensionBinding>): Int32; overload;
    function FindIndex(startIndex: Int32; match: DDN.mscorlib.DNPredicate<DNWebExtensionBinding>): Int32; overload;
    function FindIndex(startIndex: Int32; count: Int32; match: DDN.mscorlib.DNPredicate<DNWebExtensionBinding>): Int32; overload;
    function FindLast(match: DDN.mscorlib.DNPredicate<DNWebExtensionBinding>): DNWebExtensionBinding;
    function FindLastIndex(match: DDN.mscorlib.DNPredicate<DNWebExtensionBinding>): Int32; overload;
    function FindLastIndex(startIndex: Int32; match: DDN.mscorlib.DNPredicate<DNWebExtensionBinding>): Int32; overload;
    function FindLastIndex(startIndex: Int32; count: Int32; match: DDN.mscorlib.DNPredicate<DNWebExtensionBinding>): Int32; overload;
    function IndexOf(item: DNWebExtensionBinding): Int32; overload;
    function IndexOf(item: DNWebExtensionBinding; index: Int32): Int32; overload;
    function IndexOf(item: DNWebExtensionBinding; index: Int32; count: Int32): Int32; overload;
    function LastIndexOf(item: DNWebExtensionBinding): Int32; overload;
    function LastIndexOf(item: DNWebExtensionBinding; index: Int32): Int32; overload;
    function LastIndexOf(item: DNWebExtensionBinding; index: Int32; count: Int32): Int32; overload;
    function GetEnumerator: DDN.mscorlib.DNIEnumerator<DNWebExtensionBinding>;
    procedure RemoveAt(index: Int32);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Item[index: Int32]: DNWebExtensionBinding read get_Item; default;
    property Capacity: Int32 read get_Capacity write set_Capacity;
    property Count: Int32 read get_Count;
  end;

  TDNWebExtensionBindingCollection = class(TDNGenericImport<DNWebExtensionBindingCollectionClass, DNWebExtensionBindingCollection>) end;

  //-------------namespace: Aspose.Cells.WebExtensions----------------
  DNWebExtensionPropertyCollectionClass = interface(DNObjectClass)
  ['{D24D5B85-F837-5CC5-921D-B77E1D9BA019}']
  { constructors } 

    {class} function init: DNWebExtensionPropertyCollection;

  end;

  [DNTypeName('Aspose.Cells.WebExtensions.WebExtensionPropertyCollection')]
  DNWebExtensionPropertyCollection = interface(DNObject)
  ['{E2092158-A069-3FC8-9341-7FDECC303070}']
  { getters & setters } 

    function get_Item(index: Int32): DNWebExtensionProperty; overload;
    function get_Item(name: string): DNWebExtensionProperty; overload;
    function get_Capacity: Int32;
    procedure set_Capacity(value: Int32);
    function get_Count: Int32;

  { methods } 

    function Add(name: string; value: string): Int32;
    procedure RemoveAt(name: string); overload;
    function BinarySearch(item: DNWebExtensionProperty): Int32; overload;
    function BinarySearch(item: DNWebExtensionProperty; comparer: DDN.mscorlib.DNIComparer<DNWebExtensionProperty>): Int32; overload;
    function BinarySearch(index: Int32; count: Int32; item: DNWebExtensionProperty; comparer: DDN.mscorlib.DNIComparer<DNWebExtensionProperty>): Int32; overload;
    function &Contains(item: DNWebExtensionProperty): Boolean;
    procedure CopyTo(&array: TArray<DNWebExtensionProperty>); overload;
    procedure CopyTo(&array: TArray<DNWebExtensionProperty>; arrayIndex: Int32); overload;
    procedure CopyTo(index: Int32; &array: TArray<DNWebExtensionProperty>; arrayIndex: Int32; count: Int32); overload;
    function Exists(match: DDN.mscorlib.DNPredicate<DNWebExtensionProperty>): Boolean;
    function Find(match: DDN.mscorlib.DNPredicate<DNWebExtensionProperty>): DNWebExtensionProperty;
    function FindAll(match: DDN.mscorlib.DNPredicate<DNWebExtensionProperty>): DDN.mscorlib.DNList<DNWebExtensionProperty>;
    function FindIndex(match: DDN.mscorlib.DNPredicate<DNWebExtensionProperty>): Int32; overload;
    function FindIndex(startIndex: Int32; match: DDN.mscorlib.DNPredicate<DNWebExtensionProperty>): Int32; overload;
    function FindIndex(startIndex: Int32; count: Int32; match: DDN.mscorlib.DNPredicate<DNWebExtensionProperty>): Int32; overload;
    function FindLast(match: DDN.mscorlib.DNPredicate<DNWebExtensionProperty>): DNWebExtensionProperty;
    function FindLastIndex(match: DDN.mscorlib.DNPredicate<DNWebExtensionProperty>): Int32; overload;
    function FindLastIndex(startIndex: Int32; match: DDN.mscorlib.DNPredicate<DNWebExtensionProperty>): Int32; overload;
    function FindLastIndex(startIndex: Int32; count: Int32; match: DDN.mscorlib.DNPredicate<DNWebExtensionProperty>): Int32; overload;
    function IndexOf(item: DNWebExtensionProperty): Int32; overload;
    function IndexOf(item: DNWebExtensionProperty; index: Int32): Int32; overload;
    function IndexOf(item: DNWebExtensionProperty; index: Int32; count: Int32): Int32; overload;
    function LastIndexOf(item: DNWebExtensionProperty): Int32; overload;
    function LastIndexOf(item: DNWebExtensionProperty; index: Int32): Int32; overload;
    function LastIndexOf(item: DNWebExtensionProperty; index: Int32; count: Int32): Int32; overload;
    function GetEnumerator: DDN.mscorlib.DNIEnumerator<DNWebExtensionProperty>;
    procedure RemoveAt(index: Int32); overload;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Item[index: Int32]: DNWebExtensionProperty read get_Item; default;
    property Item[name: string]: DNWebExtensionProperty read get_Item; default;
    property Capacity: Int32 read get_Capacity write set_Capacity;
    property Count: Int32 read get_Count;
  end;

  TDNWebExtensionPropertyCollection = class(TDNGenericImport<DNWebExtensionPropertyCollectionClass, DNWebExtensionPropertyCollection>) end;

  //-------------namespace: Aspose.Cells.WebExtensions----------------
  DNWebExtensionReferenceCollectionClass = interface(DNObjectClass)
  ['{B362B568-27A1-507E-9C47-2328E98A24BB}']
  { constructors } 

    {class} function init: DNWebExtensionReferenceCollection;

  end;

  [DNTypeName('Aspose.Cells.WebExtensions.WebExtensionReferenceCollection')]
  DNWebExtensionReferenceCollection = interface(DNObject)
  ['{9305189B-D910-308E-9572-76AA61E29EBC}']
  { getters & setters } 

    function get_Item(index: Int32): DNWebExtensionReference;
    function get_Capacity: Int32;
    procedure set_Capacity(value: Int32);
    function get_Count: Int32;

  { methods } 

    function Add: Int32;
    function BinarySearch(item: DNWebExtensionReference): Int32; overload;
    function BinarySearch(item: DNWebExtensionReference; comparer: DDN.mscorlib.DNIComparer<DNWebExtensionReference>): Int32; overload;
    function BinarySearch(index: Int32; count: Int32; item: DNWebExtensionReference; comparer: DDN.mscorlib.DNIComparer<DNWebExtensionReference>): Int32; overload;
    function &Contains(item: DNWebExtensionReference): Boolean;
    procedure CopyTo(&array: TArray<DNWebExtensionReference>); overload;
    procedure CopyTo(&array: TArray<DNWebExtensionReference>; arrayIndex: Int32); overload;
    procedure CopyTo(index: Int32; &array: TArray<DNWebExtensionReference>; arrayIndex: Int32; count: Int32); overload;
    function Exists(match: DDN.mscorlib.DNPredicate<DNWebExtensionReference>): Boolean;
    function Find(match: DDN.mscorlib.DNPredicate<DNWebExtensionReference>): DNWebExtensionReference;
    function FindAll(match: DDN.mscorlib.DNPredicate<DNWebExtensionReference>): DDN.mscorlib.DNList<DNWebExtensionReference>;
    function FindIndex(match: DDN.mscorlib.DNPredicate<DNWebExtensionReference>): Int32; overload;
    function FindIndex(startIndex: Int32; match: DDN.mscorlib.DNPredicate<DNWebExtensionReference>): Int32; overload;
    function FindIndex(startIndex: Int32; count: Int32; match: DDN.mscorlib.DNPredicate<DNWebExtensionReference>): Int32; overload;
    function FindLast(match: DDN.mscorlib.DNPredicate<DNWebExtensionReference>): DNWebExtensionReference;
    function FindLastIndex(match: DDN.mscorlib.DNPredicate<DNWebExtensionReference>): Int32; overload;
    function FindLastIndex(startIndex: Int32; match: DDN.mscorlib.DNPredicate<DNWebExtensionReference>): Int32; overload;
    function FindLastIndex(startIndex: Int32; count: Int32; match: DDN.mscorlib.DNPredicate<DNWebExtensionReference>): Int32; overload;
    function IndexOf(item: DNWebExtensionReference): Int32; overload;
    function IndexOf(item: DNWebExtensionReference; index: Int32): Int32; overload;
    function IndexOf(item: DNWebExtensionReference; index: Int32; count: Int32): Int32; overload;
    function LastIndexOf(item: DNWebExtensionReference): Int32; overload;
    function LastIndexOf(item: DNWebExtensionReference; index: Int32): Int32; overload;
    function LastIndexOf(item: DNWebExtensionReference; index: Int32; count: Int32): Int32; overload;
    function GetEnumerator: DDN.mscorlib.DNIEnumerator<DNWebExtensionReference>;
    procedure RemoveAt(index: Int32);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Item[index: Int32]: DNWebExtensionReference read get_Item; default;
    property Capacity: Int32 read get_Capacity write set_Capacity;
    property Count: Int32 read get_Count;
  end;

  TDNWebExtensionReferenceCollection = class(TDNGenericImport<DNWebExtensionReferenceCollectionClass, DNWebExtensionReferenceCollection>) end;

  //-------------namespace: Aspose.Cells.WebExtensions----------------
  DNWebExtensionTaskPaneCollectionClass = interface(DNObjectClass)
  ['{FE0A9D59-2D65-58DD-88AC-EA749D4C02EB}']
  end;

  [DNTypeName('Aspose.Cells.WebExtensions.WebExtensionTaskPaneCollection')]
  DNWebExtensionTaskPaneCollection = interface(DNObject)
  ['{FA11FEFE-5E60-3EC9-8A98-2B8B26D64B2B}']
  { getters & setters } 

    function get_Item(index: Int32): DNWebExtensionTaskPane;
    function get_Capacity: Int32;
    procedure set_Capacity(value: Int32);
    function get_Count: Int32;

  { methods } 

    function Add: Int32;
    function BinarySearch(item: DNWebExtensionTaskPane): Int32; overload;
    function BinarySearch(item: DNWebExtensionTaskPane; comparer: DDN.mscorlib.DNIComparer<DNWebExtensionTaskPane>): Int32; overload;
    function BinarySearch(index: Int32; count: Int32; item: DNWebExtensionTaskPane; comparer: DDN.mscorlib.DNIComparer<DNWebExtensionTaskPane>): Int32; overload;
    function &Contains(item: DNWebExtensionTaskPane): Boolean;
    procedure CopyTo(&array: TArray<DNWebExtensionTaskPane>); overload;
    procedure CopyTo(&array: TArray<DNWebExtensionTaskPane>; arrayIndex: Int32); overload;
    procedure CopyTo(index: Int32; &array: TArray<DNWebExtensionTaskPane>; arrayIndex: Int32; count: Int32); overload;
    function Exists(match: DDN.mscorlib.DNPredicate<DNWebExtensionTaskPane>): Boolean;
    function Find(match: DDN.mscorlib.DNPredicate<DNWebExtensionTaskPane>): DNWebExtensionTaskPane;
    function FindAll(match: DDN.mscorlib.DNPredicate<DNWebExtensionTaskPane>): DDN.mscorlib.DNList<DNWebExtensionTaskPane>;
    function FindIndex(match: DDN.mscorlib.DNPredicate<DNWebExtensionTaskPane>): Int32; overload;
    function FindIndex(startIndex: Int32; match: DDN.mscorlib.DNPredicate<DNWebExtensionTaskPane>): Int32; overload;
    function FindIndex(startIndex: Int32; count: Int32; match: DDN.mscorlib.DNPredicate<DNWebExtensionTaskPane>): Int32; overload;
    function FindLast(match: DDN.mscorlib.DNPredicate<DNWebExtensionTaskPane>): DNWebExtensionTaskPane;
    function FindLastIndex(match: DDN.mscorlib.DNPredicate<DNWebExtensionTaskPane>): Int32; overload;
    function FindLastIndex(startIndex: Int32; match: DDN.mscorlib.DNPredicate<DNWebExtensionTaskPane>): Int32; overload;
    function FindLastIndex(startIndex: Int32; count: Int32; match: DDN.mscorlib.DNPredicate<DNWebExtensionTaskPane>): Int32; overload;
    function IndexOf(item: DNWebExtensionTaskPane): Int32; overload;
    function IndexOf(item: DNWebExtensionTaskPane; index: Int32): Int32; overload;
    function IndexOf(item: DNWebExtensionTaskPane; index: Int32; count: Int32): Int32; overload;
    function LastIndexOf(item: DNWebExtensionTaskPane): Int32; overload;
    function LastIndexOf(item: DNWebExtensionTaskPane; index: Int32): Int32; overload;
    function LastIndexOf(item: DNWebExtensionTaskPane; index: Int32; count: Int32): Int32; overload;
    function GetEnumerator: DDN.mscorlib.DNIEnumerator<DNWebExtensionTaskPane>;
    procedure RemoveAt(index: Int32);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Item[index: Int32]: DNWebExtensionTaskPane read get_Item; default;
    property Capacity: Int32 read get_Capacity write set_Capacity;
    property Count: Int32 read get_Count;
  end;

  TDNWebExtensionTaskPaneCollection = class(TDNGenericImport<DNWebExtensionTaskPaneCollectionClass, DNWebExtensionTaskPaneCollection>) end;

  //-------------namespace: Aspose.Cells----------------
  DNWorksheetCollectionClass = interface(DNObjectClass)
  ['{C4FDBFF1-AEA9-51AA-8926-C6B6651DB448}']
  end;

  [DNTypeName('Aspose.Cells.WorksheetCollection')]
  DNWorksheetCollection = interface(DNObject)
  ['{D94541A9-CBC1-3103-9B3A-AEBD96D8E607}']
  { getters & setters } 

    function get_WebExtensionTaskPanes: DNWebExtensionTaskPaneCollection;
    function get_WebExtensions: DNWebExtensionCollection;
    function get_ThreadedCommentAuthors: DNThreadedCommentAuthorCollection;
    function get_IsRefreshAllConnections: Boolean;
    procedure set_IsRefreshAllConnections(value: Boolean);
    function get_Names: DNNameCollection;
    function get_Item(index: Int32): DNWorksheet; overload;
    function get_Item(sheetName: string): DNWorksheet; overload;
    function get_ActiveSheetIndex: Int32;
    procedure set_ActiveSheetIndex(value: Int32);
    function get_Dxfs: DNDxfCollection;
    function get_XmlMaps: DNXmlMapCollection;
    procedure set_XmlMaps(value: DNXmlMapCollection);
    function get_BuiltInDocumentProperties: DNBuiltInDocumentPropertyCollection;
    function get_CustomDocumentProperties: DNCustomDocumentPropertyCollection;
    function get_OleSize: DDN.mscorlib.DNObject;
    procedure set_OleSize(value: DDN.mscorlib.DNObject);
    function get_ExternalLinks: DNExternalLinkCollection;
    function get_TableStyles: DNTableStyleCollection;
    function get_RevisionLogs: DNRevisionLogCollection;
    function get_Capacity: Int32;
    procedure set_Capacity(value: Int32);
    function get_Count: Int32;

  { methods } 

    procedure SetOleSize(startRow: Int32; endRow: Int32; startColumn: Int32; endColumn: Int32);
    procedure ClearPivottables;
    procedure RefreshPivotTables;
    function CreateRange(address: string; sheetIndex: Int32): DNRange;
    function CreateUnionRange(address: string; sheetIndex: Int32): DNUnionRange;
    function GetSheetByCodeName(codeName: string): DNWorksheet;
    procedure SortNames;
    function Insert(index: Int32; sheetType: DNSheetType): DNWorksheet; overload;
    function Insert(index: Int32; sheetType: DNSheetType; sheetName: string): DNWorksheet; overload;
    function Add(&type: DNSheetType): Int32; overload;
    procedure SwapSheet(sheetIndex1: Int32; sheetIndex2: Int32);
    function Add: Int32; overload;
    function Add(sheetName: string): DNWorksheet; overload;
    function RegisterAddInFunction(addInFile: string; functionName: string; lib: Boolean): Int32; overload;
    function RegisterAddInFunction(id: Int32; functionName: string): string; overload;
    procedure RemoveAt(name: string); overload;
    procedure RemoveAt(index: Int32); overload;
    procedure Clear;
    function AddCopy(sheetName: string): Int32; overload;
    function AddCopy(sheetIndex: Int32): Int32; overload;
    function GetRangeByName(rangeName: string): DNRange;
    function GetNamedRanges: TArray<DNRange>;
    function GetNamedRangesAndTables: TArray<DNRange>;
    function BinarySearch(item: DNWorksheet): Int32; overload;
    function BinarySearch(item: DNWorksheet; comparer: DDN.mscorlib.DNIComparer<DNWorksheet>): Int32; overload;
    function BinarySearch(index: Int32; count: Int32; item: DNWorksheet; comparer: DDN.mscorlib.DNIComparer<DNWorksheet>): Int32; overload;
    function &Contains(item: DNWorksheet): Boolean;
    procedure CopyTo(&array: TArray<DNWorksheet>); overload;
    procedure CopyTo(&array: TArray<DNWorksheet>; arrayIndex: Int32); overload;
    procedure CopyTo(index: Int32; &array: TArray<DNWorksheet>; arrayIndex: Int32; count: Int32); overload;
    function Exists(match: DDN.mscorlib.DNPredicate<DNWorksheet>): Boolean;
    function Find(match: DDN.mscorlib.DNPredicate<DNWorksheet>): DNWorksheet;
    function FindAll(match: DDN.mscorlib.DNPredicate<DNWorksheet>): DDN.mscorlib.DNList<DNWorksheet>;
    function FindIndex(match: DDN.mscorlib.DNPredicate<DNWorksheet>): Int32; overload;
    function FindIndex(startIndex: Int32; match: DDN.mscorlib.DNPredicate<DNWorksheet>): Int32; overload;
    function FindIndex(startIndex: Int32; count: Int32; match: DDN.mscorlib.DNPredicate<DNWorksheet>): Int32; overload;
    function FindLast(match: DDN.mscorlib.DNPredicate<DNWorksheet>): DNWorksheet;
    function FindLastIndex(match: DDN.mscorlib.DNPredicate<DNWorksheet>): Int32; overload;
    function FindLastIndex(startIndex: Int32; match: DDN.mscorlib.DNPredicate<DNWorksheet>): Int32; overload;
    function FindLastIndex(startIndex: Int32; count: Int32; match: DDN.mscorlib.DNPredicate<DNWorksheet>): Int32; overload;
    function IndexOf(item: DNWorksheet): Int32; overload;
    function IndexOf(item: DNWorksheet; index: Int32): Int32; overload;
    function IndexOf(item: DNWorksheet; index: Int32; count: Int32): Int32; overload;
    function LastIndexOf(item: DNWorksheet): Int32; overload;
    function LastIndexOf(item: DNWorksheet; index: Int32): Int32; overload;
    function LastIndexOf(item: DNWorksheet; index: Int32; count: Int32): Int32; overload;
    function GetEnumerator: DDN.mscorlib.DNIEnumerator<DNWorksheet>;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property WebExtensionTaskPanes: DNWebExtensionTaskPaneCollection read get_WebExtensionTaskPanes;
    property WebExtensions: DNWebExtensionCollection read get_WebExtensions;
    property ThreadedCommentAuthors: DNThreadedCommentAuthorCollection read get_ThreadedCommentAuthors;
    property IsRefreshAllConnections: Boolean read get_IsRefreshAllConnections write set_IsRefreshAllConnections;
    property Names: DNNameCollection read get_Names;
    property Item[index: Int32]: DNWorksheet read get_Item; default;
    property Item[sheetName: string]: DNWorksheet read get_Item; default;
    property ActiveSheetIndex: Int32 read get_ActiveSheetIndex write set_ActiveSheetIndex;
    property Dxfs: DNDxfCollection read get_Dxfs;
    property XmlMaps: DNXmlMapCollection read get_XmlMaps write set_XmlMaps;
    property BuiltInDocumentProperties: DNBuiltInDocumentPropertyCollection read get_BuiltInDocumentProperties;
    property CustomDocumentProperties: DNCustomDocumentPropertyCollection read get_CustomDocumentProperties;
    property OleSize: DDN.mscorlib.DNObject read get_OleSize write set_OleSize;
    property ExternalLinks: DNExternalLinkCollection read get_ExternalLinks;
    property TableStyles: DNTableStyleCollection read get_TableStyles;
    property RevisionLogs: DNRevisionLogCollection read get_RevisionLogs;
    property Capacity: Int32 read get_Capacity write set_Capacity;
    property Count: Int32 read get_Count;
  end;

  TDNWorksheetCollection = class(TDNGenericImport<DNWorksheetCollectionClass, DNWorksheetCollection>) end;

  //-------------namespace: Aspose.Cells----------------
  DNXmlMapCollectionClass = interface(DNObjectClass)
  ['{DF8AD2C2-92AC-5624-93A3-0EC66320C0EF}']
  end;

  [DNTypeName('Aspose.Cells.XmlMapCollection')]
  DNXmlMapCollection = interface(DNObject)
  ['{2681C691-F2F5-3F17-A068-B9E4C77E7A3E}']
  { getters & setters } 

    function get_Item(index: Int32): DNXmlMap;
    function get_Capacity: Int32;
    procedure set_Capacity(value: Int32);
    function get_Count: Int32;

  { methods } 

    function Add(url: string): Int32;
    procedure Clear;
    function BinarySearch(item: DNXmlMap): Int32; overload;
    function BinarySearch(item: DNXmlMap; comparer: DDN.mscorlib.DNIComparer<DNXmlMap>): Int32; overload;
    function BinarySearch(index: Int32; count: Int32; item: DNXmlMap; comparer: DDN.mscorlib.DNIComparer<DNXmlMap>): Int32; overload;
    function &Contains(item: DNXmlMap): Boolean;
    procedure CopyTo(&array: TArray<DNXmlMap>); overload;
    procedure CopyTo(&array: TArray<DNXmlMap>; arrayIndex: Int32); overload;
    procedure CopyTo(index: Int32; &array: TArray<DNXmlMap>; arrayIndex: Int32; count: Int32); overload;
    function Exists(match: DDN.mscorlib.DNPredicate<DNXmlMap>): Boolean;
    function Find(match: DDN.mscorlib.DNPredicate<DNXmlMap>): DNXmlMap;
    function FindAll(match: DDN.mscorlib.DNPredicate<DNXmlMap>): DDN.mscorlib.DNList<DNXmlMap>;
    function FindIndex(match: DDN.mscorlib.DNPredicate<DNXmlMap>): Int32; overload;
    function FindIndex(startIndex: Int32; match: DDN.mscorlib.DNPredicate<DNXmlMap>): Int32; overload;
    function FindIndex(startIndex: Int32; count: Int32; match: DDN.mscorlib.DNPredicate<DNXmlMap>): Int32; overload;
    function FindLast(match: DDN.mscorlib.DNPredicate<DNXmlMap>): DNXmlMap;
    function FindLastIndex(match: DDN.mscorlib.DNPredicate<DNXmlMap>): Int32; overload;
    function FindLastIndex(startIndex: Int32; match: DDN.mscorlib.DNPredicate<DNXmlMap>): Int32; overload;
    function FindLastIndex(startIndex: Int32; count: Int32; match: DDN.mscorlib.DNPredicate<DNXmlMap>): Int32; overload;
    function IndexOf(item: DNXmlMap): Int32; overload;
    function IndexOf(item: DNXmlMap; index: Int32): Int32; overload;
    function IndexOf(item: DNXmlMap; index: Int32; count: Int32): Int32; overload;
    function LastIndexOf(item: DNXmlMap): Int32; overload;
    function LastIndexOf(item: DNXmlMap; index: Int32): Int32; overload;
    function LastIndexOf(item: DNXmlMap; index: Int32; count: Int32): Int32; overload;
    function GetEnumerator: DDN.mscorlib.DNIEnumerator<DNXmlMap>;
    procedure RemoveAt(index: Int32);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Item[index: Int32]: DNXmlMap read get_Item; default;
    property Capacity: Int32 read get_Capacity write set_Capacity;
    property Count: Int32 read get_Count;
  end;

  TDNXmlMapCollection = class(TDNGenericImport<DNXmlMapCollectionClass, DNXmlMapCollection>) end;

  //-------------namespace: Aspose.Cells----------------
  DNCollectionBaseClass<T> = interface(DNObjectClass)
  ['{FFAB760B-9B78-54F5-8DD0-632BAEB0634E}']
  end;

  [DNTypeName('Aspose.Cells.CollectionBase`1')]
  DNCollectionBase<T> = interface(DDN.mscorlib.DNIList<T>)
  ['{ECF5F922-C21D-38BB-93B9-9ECFE3D6B44C}']
  { getters & setters } 

    function get_Capacity: Int32;
    procedure set_Capacity(value: Int32);
    function get_Count: Int32;

  { methods } 

    function BinarySearch(item: T): Int32; overload;
    function BinarySearch(item: T; comparer: DDN.mscorlib.DNIComparer<T>): Int32; overload;
    function BinarySearch(index: Int32; count: Int32; item: T; comparer: DDN.mscorlib.DNIComparer<T>): Int32; overload;
    function &Contains(item: T): Boolean;
    procedure CopyTo(&array: TArray<T>); overload;
    procedure CopyTo(&array: TArray<T>; arrayIndex: Int32); overload;
    procedure CopyTo(index: Int32; &array: TArray<T>; arrayIndex: Int32; count: Int32); overload;
    function Exists(match: DDN.mscorlib.DNPredicate<T>): Boolean;
    function Find(match: DDN.mscorlib.DNPredicate<T>): T;
    function FindAll(match: DDN.mscorlib.DNPredicate<T>): DDN.mscorlib.DNList<T>;
    function FindIndex(match: DDN.mscorlib.DNPredicate<T>): Int32; overload;
    function FindIndex(startIndex: Int32; match: DDN.mscorlib.DNPredicate<T>): Int32; overload;
    function FindIndex(startIndex: Int32; count: Int32; match: DDN.mscorlib.DNPredicate<T>): Int32; overload;
    function FindLast(match: DDN.mscorlib.DNPredicate<T>): T;
    function FindLastIndex(match: DDN.mscorlib.DNPredicate<T>): Int32; overload;
    function FindLastIndex(startIndex: Int32; match: DDN.mscorlib.DNPredicate<T>): Int32; overload;
    function FindLastIndex(startIndex: Int32; count: Int32; match: DDN.mscorlib.DNPredicate<T>): Int32; overload;
    function IndexOf(item: T): Int32; overload;
    function IndexOf(item: T; index: Int32): Int32; overload;
    function IndexOf(item: T; index: Int32; count: Int32): Int32; overload;
    function LastIndexOf(item: T): Int32; overload;
    function LastIndexOf(item: T; index: Int32): Int32; overload;
    function LastIndexOf(item: T; index: Int32; count: Int32): Int32; overload;
    function GetEnumerator: DDN.mscorlib.DNIEnumerator<T>;
    procedure RemoveAt(index: Int32);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Capacity: Int32 read get_Capacity write set_Capacity;
    property Count: Int32 read get_Count;
  end;

  TDNCollectionBase<T> = class(TDNGenericImport<DNCollectionBaseClass<T>, DNCollectionBase<T>>) end;

  //-------------namespace: Aspose.Cells----------------
  DNColorFilterClass = interface(DDN.mscorlib.DNObjectClass)
  ['{8E088387-A0B9-5D21-8554-815D13B9A85A}']
  end;

  [DNTypeName('Aspose.Cells.ColorFilter')]
  DNColorFilter = interface(DDN.mscorlib.DNObject)
  ['{05213502-2DB5-3219-8F1E-EF5971EBB70A}']
  { getters & setters } 

    function get_FilterByFillColor: Boolean;
    procedure set_FilterByFillColor(value: Boolean);

  { methods } 

    function GetColor(sheets: DNWorksheetCollection): DDN.System.Drawing.DNColor;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property FilterByFillColor: Boolean read get_FilterByFillColor write set_FilterByFillColor;
  end;

  TDNColorFilter = class(TDNGenericImport<DNColorFilterClass, DNColorFilter>) end;

  //-------------namespace: Aspose.Cells----------------
  DNColorScaleClass = interface(DDN.mscorlib.DNObjectClass)
  ['{A09DFC48-6EE8-568E-BECC-CD435CCD1B40}']
  end;

  [DNTypeName('Aspose.Cells.ColorScale')]
  DNColorScale = interface(DDN.mscorlib.DNObject)
  ['{48FB4922-97E1-3A80-906E-9060C72B34BA}']
  { getters & setters } 

    function get_Is3ColorScale: Boolean;
    procedure set_Is3ColorScale(value: Boolean);
    function get_MinCfvo: DNConditionalFormattingValue;
    function get_MidCfvo: DNConditionalFormattingValue;
    function get_MaxCfvo: DNConditionalFormattingValue;
    function get_MinColor: DDN.System.Drawing.DNColor;
    procedure set_MinColor(value: DDN.System.Drawing.DNColor);
    function get_MidColor: DDN.System.Drawing.DNColor;
    procedure set_MidColor(value: DDN.System.Drawing.DNColor);
    function get_MaxColor: DDN.System.Drawing.DNColor;
    procedure set_MaxColor(value: DDN.System.Drawing.DNColor);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Is3ColorScale: Boolean read get_Is3ColorScale write set_Is3ColorScale;
    property MinCfvo: DNConditionalFormattingValue read get_MinCfvo;
    property MidCfvo: DNConditionalFormattingValue read get_MidCfvo;
    property MaxCfvo: DNConditionalFormattingValue read get_MaxCfvo;
    property MinColor: DDN.System.Drawing.DNColor read get_MinColor write set_MinColor;
    property MidColor: DDN.System.Drawing.DNColor read get_MidColor write set_MidColor;
    property MaxColor: DDN.System.Drawing.DNColor read get_MaxColor write set_MaxColor;
  end;

  TDNColorScale = class(TDNGenericImport<DNColorScaleClass, DNColorScale>) end;

  //-------------namespace: Aspose.Cells----------------
  DNColumnClass = interface(DDN.mscorlib.DNObjectClass)
  ['{A743F3B6-34AF-5CA0-926A-4137C225B56E}']
  end;

  [DNTypeName('Aspose.Cells.Column')]
  DNColumn = interface(DDN.mscorlib.DNObject)
  ['{1361795C-2D86-3573-A10E-2720A130CADD}']
  { getters & setters } 

    function get_Index: Int32;
    function get_Width: Double;
    procedure set_Width(value: Double);
    function get_GroupLevel: Byte;
    function get_IsHidden: Boolean;
    procedure set_IsHidden(value: Boolean);
    function get_Style: DNStyle;

  { methods } 

    procedure ApplyStyle(style: DNStyle; flag: DNStyleFlag);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Index: Int32 read get_Index;
    property Width: Double read get_Width write set_Width;
    property GroupLevel: Byte read get_GroupLevel;
    property IsHidden: Boolean read get_IsHidden write set_IsHidden;
    property Style: DNStyle read get_Style;
  end;

  TDNColumn = class(TDNGenericImport<DNColumnClass, DNColumn>) end;

  //-------------namespace: Aspose.Cells----------------
  DNCommentClass = interface(DDN.mscorlib.DNObjectClass)
  ['{5D675DF6-DC7A-5E0A-A43F-664F69D27861}']
  end;

  [DNTypeName('Aspose.Cells.Comment')]
  DNComment = interface(DDN.mscorlib.DNObject)
  ['{80D67FA3-C600-3F85-B758-AD40008F6CAF}']
  { getters & setters } 

    function get_Author: string;
    procedure set_Author(value: string);
    function get_CommentShape: DNCommentShape;
    function get_Row: Int32;
    function get_Column: Int32;
    function get_ThreadedComments: DNThreadedCommentCollection;
    function get_Note: string;
    procedure set_Note(value: string);
    function get_HtmlNote: string;
    procedure set_HtmlNote(value: string);
    function get_Font: DNFont;
    function get_IsVisible: Boolean;
    procedure set_IsVisible(value: Boolean);
    function get_TextOrientationType: DNTextOrientationType;
    procedure set_TextOrientationType(value: DNTextOrientationType);
    function get_TextHorizontalAlignment: DNTextAlignmentType;
    procedure set_TextHorizontalAlignment(value: DNTextAlignmentType);
    function get_TextVerticalAlignment: DNTextAlignmentType;
    procedure set_TextVerticalAlignment(value: DNTextAlignmentType);
    function get_AutoSize: Boolean;
    procedure set_AutoSize(value: Boolean);
    function get_HeightCM: Double;
    procedure set_HeightCM(value: Double);
    function get_WidthCM: Double;
    procedure set_WidthCM(value: Double);
    function get_Width: Int32;
    procedure set_Width(value: Int32);
    function get_Height: Int32;
    procedure set_Height(value: Int32);
    function get_WidthInch: Double;
    procedure set_WidthInch(value: Double);
    function get_HeightInch: Double;
    procedure set_HeightInch(value: Double);

  { methods } 

    procedure FormatCharacters(startIndex: Int32; length: Int32; font: DNFont; flag: DNStyleFlag);
    function Characters(startIndex: Int32; length: Int32): DNFontSetting;
    function GetCharacters: DDN.mscorlib.DNArrayList;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Author: string read get_Author write set_Author;
    property CommentShape: DNCommentShape read get_CommentShape;
    property Row: Int32 read get_Row;
    property Column: Int32 read get_Column;
    property ThreadedComments: DNThreadedCommentCollection read get_ThreadedComments;
    property Note: string read get_Note write set_Note;
    property HtmlNote: string read get_HtmlNote write set_HtmlNote;
    property Font: DNFont read get_Font;
    property IsVisible: Boolean read get_IsVisible write set_IsVisible;
    property TextOrientationType: DNTextOrientationType read get_TextOrientationType write set_TextOrientationType;
    property TextHorizontalAlignment: DNTextAlignmentType read get_TextHorizontalAlignment write set_TextHorizontalAlignment;
    property TextVerticalAlignment: DNTextAlignmentType read get_TextVerticalAlignment write set_TextVerticalAlignment;
    property AutoSize: Boolean read get_AutoSize write set_AutoSize;
    property HeightCM: Double read get_HeightCM write set_HeightCM;
    property WidthCM: Double read get_WidthCM write set_WidthCM;
    property Width: Int32 read get_Width write set_Width;
    property Height: Int32 read get_Height write set_Height;
    property WidthInch: Double read get_WidthInch write set_WidthInch;
    property HeightInch: Double read get_HeightInch write set_HeightInch;
  end;

  TDNComment = class(TDNGenericImport<DNCommentClass, DNComment>) end;

  //-------------namespace: Aspose.Cells----------------
  DNConditionalFormattingIconClass = interface(DDN.mscorlib.DNObjectClass)
  ['{360273C5-EB0A-55D3-8FB5-B3D5C8D1A4C9}']
  { static methods } 

    {class} function GetIconImageData(&type: DNIconSetType; index: Int32): TArray<Byte>;

  end;

  [DNTypeName('Aspose.Cells.ConditionalFormattingIcon')]
  DNConditionalFormattingIcon = interface(DDN.mscorlib.DNObject)
  ['{5E302DAD-9848-3C63-9727-98D28A1406D8}']
  { getters & setters } 

    function get_ImageData: TArray<Byte>;
    function get_Type: DNIconSetType;
    procedure set_Type(value: DNIconSetType);
    function get_Index: Int32;
    procedure set_Index(value: Int32);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property ImageData: TArray<Byte> read get_ImageData;
    property &Type: DNIconSetType read get_Type write set_Type;
    property Index: Int32 read get_Index write set_Index;
  end;

  TDNConditionalFormattingIcon = class(TDNGenericImport<DNConditionalFormattingIconClass, DNConditionalFormattingIcon>) end;

  //-------------namespace: Aspose.Cells----------------
  DNConditionalFormattingResultClass = interface(DDN.mscorlib.DNObjectClass)
  ['{47441B7E-5E81-5080-8F2A-08937DFC91FB}']
  end;

  [DNTypeName('Aspose.Cells.ConditionalFormattingResult')]
  DNConditionalFormattingResult = interface(DDN.mscorlib.DNObject)
  ['{07DC9EF0-A15B-37C6-9CAE-1C6CC3E4ACCE}']
  { getters & setters } 

    function get_ConditionalStyle: DNStyle;
    function get_ConditionalFormattingIcon: DNConditionalFormattingIcon;
    function get_ConditionalFormattingDataBar: DNDataBar;
    function get_ConditionalFormattingColorScale: DNColorScale;
    function get_ColorScaleResult: DDN.System.Drawing.DNColor;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property ConditionalStyle: DNStyle read get_ConditionalStyle;
    property ConditionalFormattingIcon: DNConditionalFormattingIcon read get_ConditionalFormattingIcon;
    property ConditionalFormattingDataBar: DNDataBar read get_ConditionalFormattingDataBar;
    property ConditionalFormattingColorScale: DNColorScale read get_ConditionalFormattingColorScale;
    property ColorScaleResult: DDN.System.Drawing.DNColor read get_ColorScaleResult;
  end;

  TDNConditionalFormattingResult = class(TDNGenericImport<DNConditionalFormattingResultClass, DNConditionalFormattingResult>) end;

  //-------------namespace: Aspose.Cells----------------
  DNConditionalFormattingValueClass = interface(DDN.mscorlib.DNObjectClass)
  ['{D795619F-2BF7-5E23-AD61-B6140B20B366}']
  end;

  [DNTypeName('Aspose.Cells.ConditionalFormattingValue')]
  DNConditionalFormattingValue = interface(DDN.mscorlib.DNObject)
  ['{0156C8EB-0973-3491-B10D-C40E77376FE1}']
  { getters & setters } 

    function get_Value: DDN.mscorlib.DNObject;
    procedure set_Value(value: DDN.mscorlib.DNObject);
    function get_Type: DNFormatConditionValueType;
    procedure set_Type(value: DNFormatConditionValueType);
    function get_IsGTE: Boolean;
    procedure set_IsGTE(value: Boolean);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Value: DDN.mscorlib.DNObject read get_Value write set_Value;
    property &Type: DNFormatConditionValueType read get_Type write set_Type;
    property IsGTE: Boolean read get_IsGTE write set_IsGTE;
  end;

  TDNConditionalFormattingValue = class(TDNGenericImport<DNConditionalFormattingValueClass, DNConditionalFormattingValue>) end;

  //-------------namespace: Aspose.Cells----------------
  DNCopyOptionsClass = interface(DDN.mscorlib.DNObjectClass)
  ['{DA21183F-AD15-5FDF-B9D7-0560D0672EF3}']
  { constructors } 

    {class} function init: DNCopyOptions;

  end;

  [DNTypeName('Aspose.Cells.CopyOptions')]
  DNCopyOptions = interface(DDN.mscorlib.DNObject)
  ['{AC2C90DB-4354-3871-8BD9-7A8376B93522}']
  { getters & setters } 

    function get_KeepMacros: Boolean;
    procedure set_KeepMacros(value: Boolean);
    function get_ExtendToAdjacentRange: Boolean;
    procedure set_ExtendToAdjacentRange(value: Boolean);
    function get_CopyNames: Boolean;
    procedure set_CopyNames(value: Boolean);
    function get_CopyInvalidFormulasAsValues: Boolean;
    procedure set_CopyInvalidFormulasAsValues(value: Boolean);
    function get_ColumnCharacterWidth: Boolean;
    procedure set_ColumnCharacterWidth(value: Boolean);
    function get_ReferToSheetWithSameName: Boolean;
    procedure set_ReferToSheetWithSameName(value: Boolean);
    function get_ReferToDestinationSheet: Boolean;
    procedure set_ReferToDestinationSheet(value: Boolean);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property KeepMacros: Boolean read get_KeepMacros write set_KeepMacros;
    property ExtendToAdjacentRange: Boolean read get_ExtendToAdjacentRange write set_ExtendToAdjacentRange;
    property CopyNames: Boolean read get_CopyNames write set_CopyNames;
    property CopyInvalidFormulasAsValues: Boolean read get_CopyInvalidFormulasAsValues write set_CopyInvalidFormulasAsValues;
    property ColumnCharacterWidth: Boolean read get_ColumnCharacterWidth write set_ColumnCharacterWidth;
    property ReferToSheetWithSameName: Boolean read get_ReferToSheetWithSameName write set_ReferToSheetWithSameName;
    property ReferToDestinationSheet: Boolean read get_ReferToDestinationSheet write set_ReferToDestinationSheet;
  end;

  TDNCopyOptions = class(TDNGenericImport<DNCopyOptionsClass, DNCopyOptions>) end;

  //-------------namespace: Aspose.Cells----------------
  DNCustomFilterClass = interface(DDN.mscorlib.DNObjectClass)
  ['{DF1BB80F-F08D-5E05-9BB8-70AA9F025714}']
  end;

  [DNTypeName('Aspose.Cells.CustomFilter')]
  DNCustomFilter = interface(DDN.mscorlib.DNObject)
  ['{E4937B3B-AD43-3D8D-9C1E-8E91C9F29E30}']
  { getters & setters } 

    function get_FilterOperatorType: DNFilterOperatorType;
    procedure set_FilterOperatorType(value: DNFilterOperatorType);
    function get_Criteria: DDN.mscorlib.DNObject;
    procedure set_Criteria(value: DDN.mscorlib.DNObject);

  { methods } 

    procedure SetCriteria(filterOperator: DNFilterOperatorType; criteria: DDN.mscorlib.DNObject);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property FilterOperatorType: DNFilterOperatorType read get_FilterOperatorType write set_FilterOperatorType;
    property Criteria: DDN.mscorlib.DNObject read get_Criteria write set_Criteria;
  end;

  TDNCustomFilter = class(TDNGenericImport<DNCustomFilterClass, DNCustomFilter>) end;

  //-------------namespace: Aspose.Cells----------------
  DNCustomImplementationFactoryClass = interface(DDN.mscorlib.DNObjectClass)
  ['{8ED0726C-58D2-5E08-A28D-5CCA95BEA723}']
  { constructors } 

    {class} function init: DNCustomImplementationFactory;

  end;

  [DNTypeName('Aspose.Cells.CustomImplementationFactory')]
  DNCustomImplementationFactory = interface(DDN.mscorlib.DNObject)
  ['{EFA5C7D7-4B75-357F-B2F3-6842865E10A2}']
  { methods } 

    function CreateMemoryStream: DDN.mscorlib.DNMemoryStream; overload;
    function CreateMemoryStream(capacity: Int32): DDN.mscorlib.DNMemoryStream; overload;
    function CreateCultureInfo(lcid: Int32): DDN.mscorlib.DNCultureInfo;
    function CreateRandomInstance: DDN.mscorlib.DNRandom;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNCustomImplementationFactory = class(TDNGenericImport<DNCustomImplementationFactoryClass, DNCustomImplementationFactory>) end;

  //-------------namespace: Aspose.Cells----------------
  DNDataBarClass = interface(DDN.mscorlib.DNObjectClass)
  ['{4AD72698-93FF-5268-A78A-C6BA8DAF8CA1}']
  end;

  [DNTypeName('Aspose.Cells.DataBar')]
  DNDataBar = interface(DDN.mscorlib.DNObject)
  ['{4FF91B7F-51C6-369A-BBBD-940DE12BD4C4}']
  { getters & setters } 

    function get_AxisColor: DDN.System.Drawing.DNColor;
    procedure set_AxisColor(value: DDN.System.Drawing.DNColor);
    function get_AxisPosition: DNDataBarAxisPosition;
    procedure set_AxisPosition(value: DNDataBarAxisPosition);
    function get_BarFillType: DNDataBarFillType;
    procedure set_BarFillType(value: DNDataBarFillType);
    function get_Direction: DNTextDirectionType;
    procedure set_Direction(value: DNTextDirectionType);
    function get_BarBorder: DNDataBarBorder;
    function get_NegativeBarFormat: DNNegativeBarFormat;
    function get_MinCfvo: DNConditionalFormattingValue;
    function get_MaxCfvo: DNConditionalFormattingValue;
    function get_Color: DDN.System.Drawing.DNColor;
    procedure set_Color(value: DDN.System.Drawing.DNColor);
    function get_MinLength: Int32;
    procedure set_MinLength(value: Int32);
    function get_MaxLength: Int32;
    procedure set_MaxLength(value: Int32);
    function get_ShowValue: Boolean;
    procedure set_ShowValue(value: Boolean);

  { methods } 

    function ToImage(cell: DNCell; imgOpts: DNImageOrPrintOptions): TArray<Byte>;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property AxisColor: DDN.System.Drawing.DNColor read get_AxisColor write set_AxisColor;
    property AxisPosition: DNDataBarAxisPosition read get_AxisPosition write set_AxisPosition;
    property BarFillType: DNDataBarFillType read get_BarFillType write set_BarFillType;
    property Direction: DNTextDirectionType read get_Direction write set_Direction;
    property BarBorder: DNDataBarBorder read get_BarBorder;
    property NegativeBarFormat: DNNegativeBarFormat read get_NegativeBarFormat;
    property MinCfvo: DNConditionalFormattingValue read get_MinCfvo;
    property MaxCfvo: DNConditionalFormattingValue read get_MaxCfvo;
    property Color: DDN.System.Drawing.DNColor read get_Color write set_Color;
    property MinLength: Int32 read get_MinLength write set_MinLength;
    property MaxLength: Int32 read get_MaxLength write set_MaxLength;
    property ShowValue: Boolean read get_ShowValue write set_ShowValue;
  end;

  TDNDataBar = class(TDNGenericImport<DNDataBarClass, DNDataBar>) end;

  //-------------namespace: Aspose.Cells----------------
  DNDataBarBorderClass = interface(DDN.mscorlib.DNObjectClass)
  ['{B3911E9E-7FB5-5C26-A2C7-E9EFDC03C447}']
  end;

  [DNTypeName('Aspose.Cells.DataBarBorder')]
  DNDataBarBorder = interface(DDN.mscorlib.DNObject)
  ['{FC73842E-2BE4-355E-A843-E56C3F4D242B}']
  { getters & setters } 

    function get_Color: DDN.System.Drawing.DNColor;
    procedure set_Color(value: DDN.System.Drawing.DNColor);
    function get_Type: DNDataBarBorderType;
    procedure set_Type(value: DNDataBarBorderType);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Color: DDN.System.Drawing.DNColor read get_Color write set_Color;
    property &Type: DNDataBarBorderType read get_Type write set_Type;
  end;

  TDNDataBarBorder = class(TDNGenericImport<DNDataBarBorderClass, DNDataBarBorder>) end;

  //-------------namespace: Aspose.Cells----------------
  DNDataSorterClass = interface(DDN.mscorlib.DNObjectClass)
  ['{6E1DA466-D7BE-5EE9-A66B-B0EDBE2CB4CC}']
  end;

  [DNTypeName('Aspose.Cells.DataSorter')]
  DNDataSorter = interface(DDN.mscorlib.DNObject)
  ['{8510FFA9-B77A-3CC0-A338-F17677EF4295}']
  { getters & setters } 

    function get_Keys: DNDataSorterKeyCollection;
    function get_HasHeaders: Boolean;
    procedure set_HasHeaders(value: Boolean);
    function get_Key1: Int32;
    procedure set_Key1(value: Int32);
    function get_Order1: DNSortOrder;
    procedure set_Order1(value: DNSortOrder);
    function get_Key2: Int32;
    procedure set_Key2(value: Int32);
    function get_Order2: DNSortOrder;
    procedure set_Order2(value: DNSortOrder);
    function get_Key3: Int32;
    procedure set_Key3(value: Int32);
    function get_Order3: DNSortOrder;
    procedure set_Order3(value: DNSortOrder);
    function get_SortLeftToRight: Boolean;
    procedure set_SortLeftToRight(value: Boolean);
    function get_CaseSensitive: Boolean;
    procedure set_CaseSensitive(value: Boolean);
    function get_SortAsNumber: Boolean;
    procedure set_SortAsNumber(value: Boolean);

  { methods } 

    procedure Clear;
    procedure AddKey(key: Int32; order: DNSortOrder); overload;
    procedure AddKey(key: Int32; order: DNSortOrder; customList: string); overload;
    procedure AddKey(key: Int32; &type: DNSortOnType; order: DNSortOrder; customList: DDN.mscorlib.DNObject); overload;
    procedure AddKey(key: Int32; order: DNSortOrder; customList: TArray<string>); overload;
    procedure Sort(cells: DNCells; startRow: Int32; startColumn: Int32; endRow: Int32; endColumn: Int32); overload;
    procedure Sort(cells: DNCells; area: DNCellArea); overload;
    procedure Sort; overload;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Keys: DNDataSorterKeyCollection read get_Keys;
    property HasHeaders: Boolean read get_HasHeaders write set_HasHeaders;
    property Key1: Int32 read get_Key1 write set_Key1;
    property Order1: DNSortOrder read get_Order1 write set_Order1;
    property Key2: Int32 read get_Key2 write set_Key2;
    property Order2: DNSortOrder read get_Order2 write set_Order2;
    property Key3: Int32 read get_Key3 write set_Key3;
    property Order3: DNSortOrder read get_Order3 write set_Order3;
    property SortLeftToRight: Boolean read get_SortLeftToRight write set_SortLeftToRight;
    property CaseSensitive: Boolean read get_CaseSensitive write set_CaseSensitive;
    property SortAsNumber: Boolean read get_SortAsNumber write set_SortAsNumber;
  end;

  TDNDataSorter = class(TDNGenericImport<DNDataSorterClass, DNDataSorter>) end;

  //-------------namespace: Aspose.Cells----------------
  DNDataSorterKeyClass = interface(DDN.mscorlib.DNObjectClass)
  ['{42DE09DB-698D-5F1C-B9C8-C7C3EF0FA712}']
  end;

  [DNTypeName('Aspose.Cells.DataSorterKey')]
  DNDataSorterKey = interface(DDN.mscorlib.DNObject)
  ['{78565B59-1121-3C30-9A46-760511A65C16}']
  { getters & setters } 

    function get_Order: DNSortOrder;
    function get_Index: Int32;
    function get_Type: DNSortOnType;
    function get_IconSetType: DNIconSetType;
    function get_IconId: Int32;
    function get_Color: DDN.System.Drawing.DNColor;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Order: DNSortOrder read get_Order;
    property Index: Int32 read get_Index;
    property &Type: DNSortOnType read get_Type;
    property IconSetType: DNIconSetType read get_IconSetType;
    property IconId: Int32 read get_IconId;
    property Color: DDN.System.Drawing.DNColor read get_Color;
  end;

  TDNDataSorterKey = class(TDNGenericImport<DNDataSorterKeyClass, DNDataSorterKey>) end;

  //-------------namespace: Aspose.Cells----------------
  DNDateTimeGroupItemClass = interface(DDN.mscorlib.DNObjectClass)
  ['{135F6C95-3F7D-581F-9D8A-DDC86AFE7017}']
  { constructors } 

    {class} function init(&type: DNDateTimeGroupingType; year: Int32; month: Int32; day: Int32; hour: Int32; minute: Int32; second: Int32): DNDateTimeGroupItem;

  end;

  [DNTypeName('Aspose.Cells.DateTimeGroupItem')]
  DNDateTimeGroupItem = interface(DDN.mscorlib.DNObject)
  ['{94A8A218-318F-3CAF-917F-FD5DE6841C90}']
  { getters & setters } 

    function get_MinValue: DDN.mscorlib.DNDateTime;
    function get_DateTimeGroupingType: DNDateTimeGroupingType;
    procedure set_DateTimeGroupingType(value: DNDateTimeGroupingType);
    function get_Year: Int32;
    procedure set_Year(value: Int32);
    function get_Month: Int32;
    procedure set_Month(value: Int32);
    function get_Day: Int32;
    procedure set_Day(value: Int32);
    function get_Hour: Int32;
    procedure set_Hour(value: Int32);
    function get_Minute: Int32;
    procedure set_Minute(value: Int32);
    function get_Second: Int32;
    procedure set_Second(value: Int32);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property MinValue: DDN.mscorlib.DNDateTime read get_MinValue;
    property DateTimeGroupingType: DNDateTimeGroupingType read get_DateTimeGroupingType write set_DateTimeGroupingType;
    property Year: Int32 read get_Year write set_Year;
    property Month: Int32 read get_Month write set_Month;
    property Day: Int32 read get_Day write set_Day;
    property Hour: Int32 read get_Hour write set_Hour;
    property Minute: Int32 read get_Minute write set_Minute;
    property Second: Int32 read get_Second write set_Second;
  end;

  TDNDateTimeGroupItem = class(TDNGenericImport<DNDateTimeGroupItemClass, DNDateTimeGroupItem>) end;

  //-------------namespace: Aspose.Cells----------------
  DNDeleteOptionsClass = interface(DDN.mscorlib.DNObjectClass)
  ['{EFBC72D3-5FE6-5FAA-9658-CFDB1124293B}']
  { constructors } 

    {class} function init: DNDeleteOptions;

  end;

  [DNTypeName('Aspose.Cells.DeleteOptions')]
  DNDeleteOptions = interface(DDN.mscorlib.DNObject)
  ['{8E7B88EC-82E3-3CB2-B60E-126C3F3563A6}']
  { getters & setters } 

    function get_UpdateReference: Boolean;
    procedure set_UpdateReference(value: Boolean);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property UpdateReference: Boolean read get_UpdateReference write set_UpdateReference;
  end;

  TDNDeleteOptions = class(TDNGenericImport<DNDeleteOptionsClass, DNDeleteOptions>) end;

  //-------------namespace: Aspose.Cells.DigitalSignatures----------------
  DNDigitalSignatureClass = interface(DDN.mscorlib.DNObjectClass)
  ['{10C2B1C1-F6D5-5E42-A3B3-BEF2F2355AB6}']
  { constructors } 

    {class} function init(certificate: DDN.System.DNX509Certificate2; comments: string; signTime: DDN.mscorlib.DNDateTime): DNDigitalSignature; overload;
    {class} function init(rawData: TArray<Byte>; password: string; comments: string; signTime: DDN.mscorlib.DNDateTime): DNDigitalSignature; overload;

  end;

  [DNTypeName('Aspose.Cells.DigitalSignatures.DigitalSignature')]
  DNDigitalSignature = interface(DDN.mscorlib.DNObject)
  ['{9B69910D-A8BA-3A23-8D19-226E83E5FE7E}']
  { getters & setters } 

    function get_Certificate: DDN.System.DNX509Certificate2;
    procedure set_Certificate(value: DDN.System.DNX509Certificate2);
    function get_Comments: string;
    procedure set_Comments(value: string);
    function get_SignTime: DDN.mscorlib.DNDateTime;
    procedure set_SignTime(value: DDN.mscorlib.DNDateTime);
    function get_Id: DDN.mscorlib.DNGuid;
    procedure set_Id(value: DDN.mscorlib.DNGuid);
    function get_Text: string;
    procedure set_Text(value: string);
    function get_Image: TArray<Byte>;
    procedure set_Image(value: TArray<Byte>);
    function get_ProviderId: DDN.mscorlib.DNGuid;
    procedure set_ProviderId(value: DDN.mscorlib.DNGuid);
    function get_IsValid: Boolean;
    function get_XAdESType: DNXAdESType;
    procedure set_XAdESType(value: DNXAdESType);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Certificate: DDN.System.DNX509Certificate2 read get_Certificate write set_Certificate;
    property Comments: string read get_Comments write set_Comments;
    property SignTime: DDN.mscorlib.DNDateTime read get_SignTime write set_SignTime;
    property Id: DDN.mscorlib.DNGuid read get_Id write set_Id;
    property Text: string read get_Text write set_Text;
    property Image: TArray<Byte> read get_Image write set_Image;
    property ProviderId: DDN.mscorlib.DNGuid read get_ProviderId write set_ProviderId;
    property IsValid: Boolean read get_IsValid;
    property XAdESType: DNXAdESType read get_XAdESType write set_XAdESType;
  end;

  TDNDigitalSignature = class(TDNGenericImport<DNDigitalSignatureClass, DNDigitalSignature>) end;

  //-------------namespace: Aspose.Cells.DigitalSignatures----------------
  DNDigitalSignatureCollectionClass = interface(DNObjectClass)
  ['{27A2A69F-21E9-51D7-9CF5-6CB8BB6D15D8}']
  { constructors } 

    {class} function init: DNDigitalSignatureCollection;

  end;

  [DNTypeName('Aspose.Cells.DigitalSignatures.DigitalSignatureCollection')]
  DNDigitalSignatureCollection = interface(DDN.mscorlib.DNIEnumerable)
  ['{BAE53C1C-D9A3-3EA4-B6B5-1D19B40A1FB6}']
  { methods } 

    procedure Add(digitalSignature: DNDigitalSignature);
    function GetEnumerator: DDN.mscorlib.DNIEnumerator;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNDigitalSignatureCollection = class(TDNGenericImport<DNDigitalSignatureCollectionClass, DNDigitalSignatureCollection>) end;

  //-------------namespace: Aspose.Cells.Drawing.ActiveXControls----------------
  DNActiveXControlBaseClass = interface(DDN.mscorlib.DNObjectClass)
  ['{849A308C-B406-5E65-BC2C-F044FB05E0BE}']
  end;

  [DNTypeName('Aspose.Cells.Drawing.ActiveXControls.ActiveXControlBase')]
  DNActiveXControlBase = interface(DDN.mscorlib.DNObject)
  ['{CA4B1BFA-9A33-3F9C-AA9B-9B3ACFE09749}']
  { getters & setters } 

    function get_Workbook: DNWorkbook;
    function get_Type: DNControlType;
    function get_Width: Double;
    procedure set_Width(value: Double);
    function get_Height: Double;
    procedure set_Height(value: Double);
    function get_MouseIcon: TArray<Byte>;
    procedure set_MouseIcon(value: TArray<Byte>);
    function get_MousePointer: DNControlMousePointerType;
    procedure set_MousePointer(value: DNControlMousePointerType);
    function get_ForeOleColor: Int32;
    procedure set_ForeOleColor(value: Int32);
    function get_BackOleColor: Int32;
    procedure set_BackOleColor(value: Int32);
    function get_IsVisible: Boolean;
    procedure set_IsVisible(value: Boolean);
    function get_Shadow: Boolean;
    procedure set_Shadow(value: Boolean);
    function get_LinkedCell: string;
    procedure set_LinkedCell(value: string);
    function get_ListFillRange: string;
    procedure set_ListFillRange(value: string);
    function get_Data: TArray<Byte>;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Workbook: DNWorkbook read get_Workbook;
    property &Type: DNControlType read get_Type;
    property Width: Double read get_Width write set_Width;
    property Height: Double read get_Height write set_Height;
    property MouseIcon: TArray<Byte> read get_MouseIcon write set_MouseIcon;
    property MousePointer: DNControlMousePointerType read get_MousePointer write set_MousePointer;
    property ForeOleColor: Int32 read get_ForeOleColor write set_ForeOleColor;
    property BackOleColor: Int32 read get_BackOleColor write set_BackOleColor;
    property IsVisible: Boolean read get_IsVisible write set_IsVisible;
    property Shadow: Boolean read get_Shadow write set_Shadow;
    property LinkedCell: string read get_LinkedCell write set_LinkedCell;
    property ListFillRange: string read get_ListFillRange write set_ListFillRange;
    property Data: TArray<Byte> read get_Data;
  end;

  TDNActiveXControlBase = class(TDNGenericImport<DNActiveXControlBaseClass, DNActiveXControlBase>) end;

  //-------------namespace: Aspose.Cells.Drawing.ActiveXControls----------------
  DNActiveXControlClass = interface(DNActiveXControlBaseClass)
  ['{62053E90-E8EA-5502-9CC5-7271688DD620}']
  end;

  [DNTypeName('Aspose.Cells.Drawing.ActiveXControls.ActiveXControl')]
  DNActiveXControl = interface(DNActiveXControlBase)
  ['{E82C68FE-378B-34C1-8583-0D5DDD188257}']
  { getters & setters } 

    function get_IsEnabled: Boolean;
    procedure set_IsEnabled(value: Boolean);
    function get_IsLocked: Boolean;
    procedure set_IsLocked(value: Boolean);
    function get_IsTransparent: Boolean;
    procedure set_IsTransparent(value: Boolean);
    function get_IsAutoSize: Boolean;
    procedure set_IsAutoSize(value: Boolean);
    function get_IMEMode: DNInputMethodEditorMode;
    procedure set_IMEMode(value: DNInputMethodEditorMode);
    function get_Font: DNFont;
    function get_TextAlign: DNTextAlignmentType;
    procedure set_TextAlign(value: DNTextAlignmentType);
    function get_Data: TArray<Byte>;
    function get_Workbook: DNWorkbook;
    function get_Type: DNControlType;
    function get_Width: Double;
    procedure set_Width(value: Double);
    function get_Height: Double;
    procedure set_Height(value: Double);
    function get_MouseIcon: TArray<Byte>;
    procedure set_MouseIcon(value: TArray<Byte>);
    function get_MousePointer: DNControlMousePointerType;
    procedure set_MousePointer(value: DNControlMousePointerType);
    function get_ForeOleColor: Int32;
    procedure set_ForeOleColor(value: Int32);
    function get_BackOleColor: Int32;
    procedure set_BackOleColor(value: Int32);
    function get_IsVisible: Boolean;
    procedure set_IsVisible(value: Boolean);
    function get_Shadow: Boolean;
    procedure set_Shadow(value: Boolean);
    function get_LinkedCell: string;
    procedure set_LinkedCell(value: string);
    function get_ListFillRange: string;
    procedure set_ListFillRange(value: string);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property IsEnabled: Boolean read get_IsEnabled write set_IsEnabled;
    property IsLocked: Boolean read get_IsLocked write set_IsLocked;
    property IsTransparent: Boolean read get_IsTransparent write set_IsTransparent;
    property IsAutoSize: Boolean read get_IsAutoSize write set_IsAutoSize;
    property IMEMode: DNInputMethodEditorMode read get_IMEMode write set_IMEMode;
    property Font: DNFont read get_Font;
    property TextAlign: DNTextAlignmentType read get_TextAlign write set_TextAlign;
    property Data: TArray<Byte> read get_Data;
    property Workbook: DNWorkbook read get_Workbook;
    property &Type: DNControlType read get_Type;
    property Width: Double read get_Width write set_Width;
    property Height: Double read get_Height write set_Height;
    property MouseIcon: TArray<Byte> read get_MouseIcon write set_MouseIcon;
    property MousePointer: DNControlMousePointerType read get_MousePointer write set_MousePointer;
    property ForeOleColor: Int32 read get_ForeOleColor write set_ForeOleColor;
    property BackOleColor: Int32 read get_BackOleColor write set_BackOleColor;
    property IsVisible: Boolean read get_IsVisible write set_IsVisible;
    property Shadow: Boolean read get_Shadow write set_Shadow;
    property LinkedCell: string read get_LinkedCell write set_LinkedCell;
    property ListFillRange: string read get_ListFillRange write set_ListFillRange;
  end;

  TDNActiveXControl = class(TDNGenericImport<DNActiveXControlClass, DNActiveXControl>) end;

  //-------------namespace: Aspose.Cells.Drawing.ActiveXControls----------------
  DNCheckBoxActiveXControlClass = interface(DNActiveXControlClass)
  ['{A0AFABCE-AF15-59D2-8102-7235B17CF09D}']
  end;

  [DNTypeName('Aspose.Cells.Drawing.ActiveXControls.CheckBoxActiveXControl')]
  DNCheckBoxActiveXControl = interface(DNActiveXControl)
  ['{FCA4E78C-05B9-373A-9C62-9A678487534C}']
  { getters & setters } 

    function get_Type: DNControlType;
    function get_GroupName: string;
    procedure set_GroupName(value: string);
    function get_Alignment: DNControlCaptionAlignmentType;
    procedure set_Alignment(value: DNControlCaptionAlignmentType);
    function get_IsWordWrapped: Boolean;
    procedure set_IsWordWrapped(value: Boolean);
    function get_Caption: string;
    procedure set_Caption(value: string);
    function get_PicturePosition: DNControlPicturePositionType;
    procedure set_PicturePosition(value: DNControlPicturePositionType);
    function get_SpecialEffect: DNControlSpecialEffectType;
    procedure set_SpecialEffect(value: DNControlSpecialEffectType);
    function get_Picture: TArray<Byte>;
    procedure set_Picture(value: TArray<Byte>);
    function get_Accelerator: Char;
    procedure set_Accelerator(value: Char);
    function get_Value: DNCheckValueType;
    procedure set_Value(value: DNCheckValueType);
    function get_IsTripleState: Boolean;
    procedure set_IsTripleState(value: Boolean);
    function get_IsEnabled: Boolean;
    procedure set_IsEnabled(value: Boolean);
    function get_IsLocked: Boolean;
    procedure set_IsLocked(value: Boolean);
    function get_IsTransparent: Boolean;
    procedure set_IsTransparent(value: Boolean);
    function get_IsAutoSize: Boolean;
    procedure set_IsAutoSize(value: Boolean);
    function get_IMEMode: DNInputMethodEditorMode;
    procedure set_IMEMode(value: DNInputMethodEditorMode);
    function get_Font: DNFont;
    function get_TextAlign: DNTextAlignmentType;
    procedure set_TextAlign(value: DNTextAlignmentType);
    function get_Data: TArray<Byte>;
    function get_Workbook: DNWorkbook;
    function get_Width: Double;
    procedure set_Width(value: Double);
    function get_Height: Double;
    procedure set_Height(value: Double);
    function get_MouseIcon: TArray<Byte>;
    procedure set_MouseIcon(value: TArray<Byte>);
    function get_MousePointer: DNControlMousePointerType;
    procedure set_MousePointer(value: DNControlMousePointerType);
    function get_ForeOleColor: Int32;
    procedure set_ForeOleColor(value: Int32);
    function get_BackOleColor: Int32;
    procedure set_BackOleColor(value: Int32);
    function get_IsVisible: Boolean;
    procedure set_IsVisible(value: Boolean);
    function get_Shadow: Boolean;
    procedure set_Shadow(value: Boolean);
    function get_LinkedCell: string;
    procedure set_LinkedCell(value: string);
    function get_ListFillRange: string;
    procedure set_ListFillRange(value: string);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property &Type: DNControlType read get_Type;
    property GroupName: string read get_GroupName write set_GroupName;
    property Alignment: DNControlCaptionAlignmentType read get_Alignment write set_Alignment;
    property IsWordWrapped: Boolean read get_IsWordWrapped write set_IsWordWrapped;
    property Caption: string read get_Caption write set_Caption;
    property PicturePosition: DNControlPicturePositionType read get_PicturePosition write set_PicturePosition;
    property SpecialEffect: DNControlSpecialEffectType read get_SpecialEffect write set_SpecialEffect;
    property Picture: TArray<Byte> read get_Picture write set_Picture;
    property Accelerator: Char read get_Accelerator write set_Accelerator;
    property Value: DNCheckValueType read get_Value write set_Value;
    property IsTripleState: Boolean read get_IsTripleState write set_IsTripleState;
    property IsEnabled: Boolean read get_IsEnabled write set_IsEnabled;
    property IsLocked: Boolean read get_IsLocked write set_IsLocked;
    property IsTransparent: Boolean read get_IsTransparent write set_IsTransparent;
    property IsAutoSize: Boolean read get_IsAutoSize write set_IsAutoSize;
    property IMEMode: DNInputMethodEditorMode read get_IMEMode write set_IMEMode;
    property Font: DNFont read get_Font;
    property TextAlign: DNTextAlignmentType read get_TextAlign write set_TextAlign;
    property Data: TArray<Byte> read get_Data;
    property Workbook: DNWorkbook read get_Workbook;
    property Width: Double read get_Width write set_Width;
    property Height: Double read get_Height write set_Height;
    property MouseIcon: TArray<Byte> read get_MouseIcon write set_MouseIcon;
    property MousePointer: DNControlMousePointerType read get_MousePointer write set_MousePointer;
    property ForeOleColor: Int32 read get_ForeOleColor write set_ForeOleColor;
    property BackOleColor: Int32 read get_BackOleColor write set_BackOleColor;
    property IsVisible: Boolean read get_IsVisible write set_IsVisible;
    property Shadow: Boolean read get_Shadow write set_Shadow;
    property LinkedCell: string read get_LinkedCell write set_LinkedCell;
    property ListFillRange: string read get_ListFillRange write set_ListFillRange;
  end;

  TDNCheckBoxActiveXControl = class(TDNGenericImport<DNCheckBoxActiveXControlClass, DNCheckBoxActiveXControl>) end;

  //-------------namespace: Aspose.Cells.Drawing.ActiveXControls----------------
  DNComboBoxActiveXControlClass = interface(DNActiveXControlClass)
  ['{5E682035-2A96-58C6-A986-51B6D798814E}']
  end;

  [DNTypeName('Aspose.Cells.Drawing.ActiveXControls.ComboBoxActiveXControl')]
  DNComboBoxActiveXControl = interface(DNActiveXControl)
  ['{E7D6FB56-BE46-3489-BDB1-088E74FC014B}']
  { getters & setters } 

    function get_Type: DNControlType;
    function get_MaxLength: Int32;
    procedure set_MaxLength(value: Int32);
    function get_ListWidth: Double;
    procedure set_ListWidth(value: Double);
    function get_BoundColumn: Int32;
    procedure set_BoundColumn(value: Int32);
    function get_TextColumn: Int32;
    procedure set_TextColumn(value: Int32);
    function get_ColumnCount: Int32;
    procedure set_ColumnCount(value: Int32);
    function get_ListRows: Int32;
    procedure set_ListRows(value: Int32);
    function get_MatchEntry: DNControlMatchEntryType;
    procedure set_MatchEntry(value: DNControlMatchEntryType);
    function get_DropButtonStyle: DNDropButtonStyle;
    procedure set_DropButtonStyle(value: DNDropButtonStyle);
    function get_ShowDropButtonTypeWhen: DNShowDropButtonType;
    procedure set_ShowDropButtonTypeWhen(value: DNShowDropButtonType);
    function get_ListStyle: DNControlListStyle;
    procedure set_ListStyle(value: DNControlListStyle);
    function get_BorderStyle: DNControlBorderType;
    procedure set_BorderStyle(value: DNControlBorderType);
    function get_BorderOleColor: Int32;
    procedure set_BorderOleColor(value: Int32);
    function get_SpecialEffect: DNControlSpecialEffectType;
    procedure set_SpecialEffect(value: DNControlSpecialEffectType);
    function get_IsEditable: Boolean;
    procedure set_IsEditable(value: Boolean);
    function get_ShowColumnHeads: Boolean;
    procedure set_ShowColumnHeads(value: Boolean);
    function get_IsDragBehaviorEnabled: Boolean;
    procedure set_IsDragBehaviorEnabled(value: Boolean);
    function get_EnterFieldBehavior: Boolean;
    procedure set_EnterFieldBehavior(value: Boolean);
    function get_IsAutoWordSelected: Boolean;
    procedure set_IsAutoWordSelected(value: Boolean);
    function get_SelectionMargin: Boolean;
    procedure set_SelectionMargin(value: Boolean);
    function get_Value: string;
    procedure set_Value(value: string);
    function get_HideSelection: Boolean;
    procedure set_HideSelection(value: Boolean);
    function get_ColumnWidths: Double;
    procedure set_ColumnWidths(value: Double);
    function get_IsEnabled: Boolean;
    procedure set_IsEnabled(value: Boolean);
    function get_IsLocked: Boolean;
    procedure set_IsLocked(value: Boolean);
    function get_IsTransparent: Boolean;
    procedure set_IsTransparent(value: Boolean);
    function get_IsAutoSize: Boolean;
    procedure set_IsAutoSize(value: Boolean);
    function get_IMEMode: DNInputMethodEditorMode;
    procedure set_IMEMode(value: DNInputMethodEditorMode);
    function get_Font: DNFont;
    function get_TextAlign: DNTextAlignmentType;
    procedure set_TextAlign(value: DNTextAlignmentType);
    function get_Data: TArray<Byte>;
    function get_Workbook: DNWorkbook;
    function get_Width: Double;
    procedure set_Width(value: Double);
    function get_Height: Double;
    procedure set_Height(value: Double);
    function get_MouseIcon: TArray<Byte>;
    procedure set_MouseIcon(value: TArray<Byte>);
    function get_MousePointer: DNControlMousePointerType;
    procedure set_MousePointer(value: DNControlMousePointerType);
    function get_ForeOleColor: Int32;
    procedure set_ForeOleColor(value: Int32);
    function get_BackOleColor: Int32;
    procedure set_BackOleColor(value: Int32);
    function get_IsVisible: Boolean;
    procedure set_IsVisible(value: Boolean);
    function get_Shadow: Boolean;
    procedure set_Shadow(value: Boolean);
    function get_LinkedCell: string;
    procedure set_LinkedCell(value: string);
    function get_ListFillRange: string;
    procedure set_ListFillRange(value: string);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property &Type: DNControlType read get_Type;
    property MaxLength: Int32 read get_MaxLength write set_MaxLength;
    property ListWidth: Double read get_ListWidth write set_ListWidth;
    property BoundColumn: Int32 read get_BoundColumn write set_BoundColumn;
    property TextColumn: Int32 read get_TextColumn write set_TextColumn;
    property ColumnCount: Int32 read get_ColumnCount write set_ColumnCount;
    property ListRows: Int32 read get_ListRows write set_ListRows;
    property MatchEntry: DNControlMatchEntryType read get_MatchEntry write set_MatchEntry;
    property DropButtonStyle: DNDropButtonStyle read get_DropButtonStyle write set_DropButtonStyle;
    property ShowDropButtonTypeWhen: DNShowDropButtonType read get_ShowDropButtonTypeWhen write set_ShowDropButtonTypeWhen;
    property ListStyle: DNControlListStyle read get_ListStyle write set_ListStyle;
    property BorderStyle: DNControlBorderType read get_BorderStyle write set_BorderStyle;
    property BorderOleColor: Int32 read get_BorderOleColor write set_BorderOleColor;
    property SpecialEffect: DNControlSpecialEffectType read get_SpecialEffect write set_SpecialEffect;
    property IsEditable: Boolean read get_IsEditable write set_IsEditable;
    property ShowColumnHeads: Boolean read get_ShowColumnHeads write set_ShowColumnHeads;
    property IsDragBehaviorEnabled: Boolean read get_IsDragBehaviorEnabled write set_IsDragBehaviorEnabled;
    property EnterFieldBehavior: Boolean read get_EnterFieldBehavior write set_EnterFieldBehavior;
    property IsAutoWordSelected: Boolean read get_IsAutoWordSelected write set_IsAutoWordSelected;
    property SelectionMargin: Boolean read get_SelectionMargin write set_SelectionMargin;
    property Value: string read get_Value write set_Value;
    property HideSelection: Boolean read get_HideSelection write set_HideSelection;
    property ColumnWidths: Double read get_ColumnWidths write set_ColumnWidths;
    property IsEnabled: Boolean read get_IsEnabled write set_IsEnabled;
    property IsLocked: Boolean read get_IsLocked write set_IsLocked;
    property IsTransparent: Boolean read get_IsTransparent write set_IsTransparent;
    property IsAutoSize: Boolean read get_IsAutoSize write set_IsAutoSize;
    property IMEMode: DNInputMethodEditorMode read get_IMEMode write set_IMEMode;
    property Font: DNFont read get_Font;
    property TextAlign: DNTextAlignmentType read get_TextAlign write set_TextAlign;
    property Data: TArray<Byte> read get_Data;
    property Workbook: DNWorkbook read get_Workbook;
    property Width: Double read get_Width write set_Width;
    property Height: Double read get_Height write set_Height;
    property MouseIcon: TArray<Byte> read get_MouseIcon write set_MouseIcon;
    property MousePointer: DNControlMousePointerType read get_MousePointer write set_MousePointer;
    property ForeOleColor: Int32 read get_ForeOleColor write set_ForeOleColor;
    property BackOleColor: Int32 read get_BackOleColor write set_BackOleColor;
    property IsVisible: Boolean read get_IsVisible write set_IsVisible;
    property Shadow: Boolean read get_Shadow write set_Shadow;
    property LinkedCell: string read get_LinkedCell write set_LinkedCell;
    property ListFillRange: string read get_ListFillRange write set_ListFillRange;
  end;

  TDNComboBoxActiveXControl = class(TDNGenericImport<DNComboBoxActiveXControlClass, DNComboBoxActiveXControl>) end;

  //-------------namespace: Aspose.Cells.Drawing.ActiveXControls----------------
  DNCommandButtonActiveXControlClass = interface(DNActiveXControlClass)
  ['{4F19F9F9-714B-5A91-9880-19CF2C285E93}']
  end;

  [DNTypeName('Aspose.Cells.Drawing.ActiveXControls.CommandButtonActiveXControl')]
  DNCommandButtonActiveXControl = interface(DNActiveXControl)
  ['{C0701881-74BF-31E8-8C37-822B7E5479D8}']
  { getters & setters } 

    function get_Type: DNControlType;
    function get_Caption: string;
    procedure set_Caption(value: string);
    function get_PicturePosition: DNControlPicturePositionType;
    procedure set_PicturePosition(value: DNControlPicturePositionType);
    function get_Picture: TArray<Byte>;
    procedure set_Picture(value: TArray<Byte>);
    function get_Accelerator: Char;
    procedure set_Accelerator(value: Char);
    function get_TakeFocusOnClick: Boolean;
    procedure set_TakeFocusOnClick(value: Boolean);
    function get_IsWordWrapped: Boolean;
    procedure set_IsWordWrapped(value: Boolean);
    function get_IsEnabled: Boolean;
    procedure set_IsEnabled(value: Boolean);
    function get_IsLocked: Boolean;
    procedure set_IsLocked(value: Boolean);
    function get_IsTransparent: Boolean;
    procedure set_IsTransparent(value: Boolean);
    function get_IsAutoSize: Boolean;
    procedure set_IsAutoSize(value: Boolean);
    function get_IMEMode: DNInputMethodEditorMode;
    procedure set_IMEMode(value: DNInputMethodEditorMode);
    function get_Font: DNFont;
    function get_TextAlign: DNTextAlignmentType;
    procedure set_TextAlign(value: DNTextAlignmentType);
    function get_Data: TArray<Byte>;
    function get_Workbook: DNWorkbook;
    function get_Width: Double;
    procedure set_Width(value: Double);
    function get_Height: Double;
    procedure set_Height(value: Double);
    function get_MouseIcon: TArray<Byte>;
    procedure set_MouseIcon(value: TArray<Byte>);
    function get_MousePointer: DNControlMousePointerType;
    procedure set_MousePointer(value: DNControlMousePointerType);
    function get_ForeOleColor: Int32;
    procedure set_ForeOleColor(value: Int32);
    function get_BackOleColor: Int32;
    procedure set_BackOleColor(value: Int32);
    function get_IsVisible: Boolean;
    procedure set_IsVisible(value: Boolean);
    function get_Shadow: Boolean;
    procedure set_Shadow(value: Boolean);
    function get_LinkedCell: string;
    procedure set_LinkedCell(value: string);
    function get_ListFillRange: string;
    procedure set_ListFillRange(value: string);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property &Type: DNControlType read get_Type;
    property Caption: string read get_Caption write set_Caption;
    property PicturePosition: DNControlPicturePositionType read get_PicturePosition write set_PicturePosition;
    property Picture: TArray<Byte> read get_Picture write set_Picture;
    property Accelerator: Char read get_Accelerator write set_Accelerator;
    property TakeFocusOnClick: Boolean read get_TakeFocusOnClick write set_TakeFocusOnClick;
    property IsWordWrapped: Boolean read get_IsWordWrapped write set_IsWordWrapped;
    property IsEnabled: Boolean read get_IsEnabled write set_IsEnabled;
    property IsLocked: Boolean read get_IsLocked write set_IsLocked;
    property IsTransparent: Boolean read get_IsTransparent write set_IsTransparent;
    property IsAutoSize: Boolean read get_IsAutoSize write set_IsAutoSize;
    property IMEMode: DNInputMethodEditorMode read get_IMEMode write set_IMEMode;
    property Font: DNFont read get_Font;
    property TextAlign: DNTextAlignmentType read get_TextAlign write set_TextAlign;
    property Data: TArray<Byte> read get_Data;
    property Workbook: DNWorkbook read get_Workbook;
    property Width: Double read get_Width write set_Width;
    property Height: Double read get_Height write set_Height;
    property MouseIcon: TArray<Byte> read get_MouseIcon write set_MouseIcon;
    property MousePointer: DNControlMousePointerType read get_MousePointer write set_MousePointer;
    property ForeOleColor: Int32 read get_ForeOleColor write set_ForeOleColor;
    property BackOleColor: Int32 read get_BackOleColor write set_BackOleColor;
    property IsVisible: Boolean read get_IsVisible write set_IsVisible;
    property Shadow: Boolean read get_Shadow write set_Shadow;
    property LinkedCell: string read get_LinkedCell write set_LinkedCell;
    property ListFillRange: string read get_ListFillRange write set_ListFillRange;
  end;

  TDNCommandButtonActiveXControl = class(TDNGenericImport<DNCommandButtonActiveXControlClass, DNCommandButtonActiveXControl>) end;

  //-------------namespace: Aspose.Cells.Drawing.ActiveXControls----------------
  DNImageActiveXControlClass = interface(DNActiveXControlClass)
  ['{C7F8F86B-1817-5AEC-9F6E-06A9EC2787AF}']
  end;

  [DNTypeName('Aspose.Cells.Drawing.ActiveXControls.ImageActiveXControl')]
  DNImageActiveXControl = interface(DNActiveXControl)
  ['{26B60CE5-C435-3971-BD19-D80A654E8063}']
  { getters & setters } 

    function get_Type: DNControlType;
    function get_IsAutoSize: Boolean;
    procedure set_IsAutoSize(value: Boolean);
    function get_BorderOleColor: Int32;
    procedure set_BorderOleColor(value: Int32);
    function get_BorderStyle: DNControlBorderType;
    procedure set_BorderStyle(value: DNControlBorderType);
    function get_PictureSizeMode: DNControlPictureSizeMode;
    procedure set_PictureSizeMode(value: DNControlPictureSizeMode);
    function get_SpecialEffect: DNControlSpecialEffectType;
    procedure set_SpecialEffect(value: DNControlSpecialEffectType);
    function get_Picture: TArray<Byte>;
    procedure set_Picture(value: TArray<Byte>);
    function get_PictureAlignment: DNControlPictureAlignmentType;
    procedure set_PictureAlignment(value: DNControlPictureAlignmentType);
    function get_IsTiled: Boolean;
    procedure set_IsTiled(value: Boolean);
    function get_IsEnabled: Boolean;
    procedure set_IsEnabled(value: Boolean);
    function get_IsLocked: Boolean;
    procedure set_IsLocked(value: Boolean);
    function get_IsTransparent: Boolean;
    procedure set_IsTransparent(value: Boolean);
    function get_IMEMode: DNInputMethodEditorMode;
    procedure set_IMEMode(value: DNInputMethodEditorMode);
    function get_Font: DNFont;
    function get_TextAlign: DNTextAlignmentType;
    procedure set_TextAlign(value: DNTextAlignmentType);
    function get_Data: TArray<Byte>;
    function get_Workbook: DNWorkbook;
    function get_Width: Double;
    procedure set_Width(value: Double);
    function get_Height: Double;
    procedure set_Height(value: Double);
    function get_MouseIcon: TArray<Byte>;
    procedure set_MouseIcon(value: TArray<Byte>);
    function get_MousePointer: DNControlMousePointerType;
    procedure set_MousePointer(value: DNControlMousePointerType);
    function get_ForeOleColor: Int32;
    procedure set_ForeOleColor(value: Int32);
    function get_BackOleColor: Int32;
    procedure set_BackOleColor(value: Int32);
    function get_IsVisible: Boolean;
    procedure set_IsVisible(value: Boolean);
    function get_Shadow: Boolean;
    procedure set_Shadow(value: Boolean);
    function get_LinkedCell: string;
    procedure set_LinkedCell(value: string);
    function get_ListFillRange: string;
    procedure set_ListFillRange(value: string);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property &Type: DNControlType read get_Type;
    property IsAutoSize: Boolean read get_IsAutoSize write set_IsAutoSize;
    property BorderOleColor: Int32 read get_BorderOleColor write set_BorderOleColor;
    property BorderStyle: DNControlBorderType read get_BorderStyle write set_BorderStyle;
    property PictureSizeMode: DNControlPictureSizeMode read get_PictureSizeMode write set_PictureSizeMode;
    property SpecialEffect: DNControlSpecialEffectType read get_SpecialEffect write set_SpecialEffect;
    property Picture: TArray<Byte> read get_Picture write set_Picture;
    property PictureAlignment: DNControlPictureAlignmentType read get_PictureAlignment write set_PictureAlignment;
    property IsTiled: Boolean read get_IsTiled write set_IsTiled;
    property IsEnabled: Boolean read get_IsEnabled write set_IsEnabled;
    property IsLocked: Boolean read get_IsLocked write set_IsLocked;
    property IsTransparent: Boolean read get_IsTransparent write set_IsTransparent;
    property IMEMode: DNInputMethodEditorMode read get_IMEMode write set_IMEMode;
    property Font: DNFont read get_Font;
    property TextAlign: DNTextAlignmentType read get_TextAlign write set_TextAlign;
    property Data: TArray<Byte> read get_Data;
    property Workbook: DNWorkbook read get_Workbook;
    property Width: Double read get_Width write set_Width;
    property Height: Double read get_Height write set_Height;
    property MouseIcon: TArray<Byte> read get_MouseIcon write set_MouseIcon;
    property MousePointer: DNControlMousePointerType read get_MousePointer write set_MousePointer;
    property ForeOleColor: Int32 read get_ForeOleColor write set_ForeOleColor;
    property BackOleColor: Int32 read get_BackOleColor write set_BackOleColor;
    property IsVisible: Boolean read get_IsVisible write set_IsVisible;
    property Shadow: Boolean read get_Shadow write set_Shadow;
    property LinkedCell: string read get_LinkedCell write set_LinkedCell;
    property ListFillRange: string read get_ListFillRange write set_ListFillRange;
  end;

  TDNImageActiveXControl = class(TDNGenericImport<DNImageActiveXControlClass, DNImageActiveXControl>) end;

  //-------------namespace: Aspose.Cells.Drawing.ActiveXControls----------------
  DNLabelActiveXControlClass = interface(DNActiveXControlClass)
  ['{EBEDFE14-2552-56FB-9215-60082DF8CD82}']
  end;

  [DNTypeName('Aspose.Cells.Drawing.ActiveXControls.LabelActiveXControl')]
  DNLabelActiveXControl = interface(DNActiveXControl)
  ['{2873AF0A-1A6A-3EA3-9A72-0BA54C02C21A}']
  { getters & setters } 

    function get_Type: DNControlType;
    function get_Caption: string;
    procedure set_Caption(value: string);
    function get_PicturePosition: DNControlPicturePositionType;
    procedure set_PicturePosition(value: DNControlPicturePositionType);
    function get_BorderOleColor: Int32;
    procedure set_BorderOleColor(value: Int32);
    function get_BorderStyle: DNControlBorderType;
    procedure set_BorderStyle(value: DNControlBorderType);
    function get_SpecialEffect: DNControlSpecialEffectType;
    procedure set_SpecialEffect(value: DNControlSpecialEffectType);
    function get_Picture: TArray<Byte>;
    procedure set_Picture(value: TArray<Byte>);
    function get_Accelerator: Char;
    procedure set_Accelerator(value: Char);
    function get_IsWordWrapped: Boolean;
    procedure set_IsWordWrapped(value: Boolean);
    function get_IsEnabled: Boolean;
    procedure set_IsEnabled(value: Boolean);
    function get_IsLocked: Boolean;
    procedure set_IsLocked(value: Boolean);
    function get_IsTransparent: Boolean;
    procedure set_IsTransparent(value: Boolean);
    function get_IsAutoSize: Boolean;
    procedure set_IsAutoSize(value: Boolean);
    function get_IMEMode: DNInputMethodEditorMode;
    procedure set_IMEMode(value: DNInputMethodEditorMode);
    function get_Font: DNFont;
    function get_TextAlign: DNTextAlignmentType;
    procedure set_TextAlign(value: DNTextAlignmentType);
    function get_Data: TArray<Byte>;
    function get_Workbook: DNWorkbook;
    function get_Width: Double;
    procedure set_Width(value: Double);
    function get_Height: Double;
    procedure set_Height(value: Double);
    function get_MouseIcon: TArray<Byte>;
    procedure set_MouseIcon(value: TArray<Byte>);
    function get_MousePointer: DNControlMousePointerType;
    procedure set_MousePointer(value: DNControlMousePointerType);
    function get_ForeOleColor: Int32;
    procedure set_ForeOleColor(value: Int32);
    function get_BackOleColor: Int32;
    procedure set_BackOleColor(value: Int32);
    function get_IsVisible: Boolean;
    procedure set_IsVisible(value: Boolean);
    function get_Shadow: Boolean;
    procedure set_Shadow(value: Boolean);
    function get_LinkedCell: string;
    procedure set_LinkedCell(value: string);
    function get_ListFillRange: string;
    procedure set_ListFillRange(value: string);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property &Type: DNControlType read get_Type;
    property Caption: string read get_Caption write set_Caption;
    property PicturePosition: DNControlPicturePositionType read get_PicturePosition write set_PicturePosition;
    property BorderOleColor: Int32 read get_BorderOleColor write set_BorderOleColor;
    property BorderStyle: DNControlBorderType read get_BorderStyle write set_BorderStyle;
    property SpecialEffect: DNControlSpecialEffectType read get_SpecialEffect write set_SpecialEffect;
    property Picture: TArray<Byte> read get_Picture write set_Picture;
    property Accelerator: Char read get_Accelerator write set_Accelerator;
    property IsWordWrapped: Boolean read get_IsWordWrapped write set_IsWordWrapped;
    property IsEnabled: Boolean read get_IsEnabled write set_IsEnabled;
    property IsLocked: Boolean read get_IsLocked write set_IsLocked;
    property IsTransparent: Boolean read get_IsTransparent write set_IsTransparent;
    property IsAutoSize: Boolean read get_IsAutoSize write set_IsAutoSize;
    property IMEMode: DNInputMethodEditorMode read get_IMEMode write set_IMEMode;
    property Font: DNFont read get_Font;
    property TextAlign: DNTextAlignmentType read get_TextAlign write set_TextAlign;
    property Data: TArray<Byte> read get_Data;
    property Workbook: DNWorkbook read get_Workbook;
    property Width: Double read get_Width write set_Width;
    property Height: Double read get_Height write set_Height;
    property MouseIcon: TArray<Byte> read get_MouseIcon write set_MouseIcon;
    property MousePointer: DNControlMousePointerType read get_MousePointer write set_MousePointer;
    property ForeOleColor: Int32 read get_ForeOleColor write set_ForeOleColor;
    property BackOleColor: Int32 read get_BackOleColor write set_BackOleColor;
    property IsVisible: Boolean read get_IsVisible write set_IsVisible;
    property Shadow: Boolean read get_Shadow write set_Shadow;
    property LinkedCell: string read get_LinkedCell write set_LinkedCell;
    property ListFillRange: string read get_ListFillRange write set_ListFillRange;
  end;

  TDNLabelActiveXControl = class(TDNGenericImport<DNLabelActiveXControlClass, DNLabelActiveXControl>) end;

  //-------------namespace: Aspose.Cells.Drawing.ActiveXControls----------------
  DNListBoxActiveXControlClass = interface(DNActiveXControlClass)
  ['{D528DC3A-7B78-5F80-8383-96E9540ED5A9}']
  end;

  [DNTypeName('Aspose.Cells.Drawing.ActiveXControls.ListBoxActiveXControl')]
  DNListBoxActiveXControl = interface(DNActiveXControl)
  ['{93076C3A-316A-39B9-8181-652E5382969F}']
  { getters & setters } 

    function get_Type: DNControlType;
    function get_ScrollBars: DNControlScrollBarType;
    procedure set_ScrollBars(value: DNControlScrollBarType);
    function get_ListWidth: Double;
    procedure set_ListWidth(value: Double);
    function get_BoundColumn: Int32;
    procedure set_BoundColumn(value: Int32);
    function get_TextColumn: Int32;
    procedure set_TextColumn(value: Int32);
    function get_ColumnCount: Int32;
    procedure set_ColumnCount(value: Int32);
    function get_MatchEntry: DNControlMatchEntryType;
    procedure set_MatchEntry(value: DNControlMatchEntryType);
    function get_ListStyle: DNControlListStyle;
    procedure set_ListStyle(value: DNControlListStyle);
    function get_SelectionType: DNSelectionType;
    procedure set_SelectionType(value: DNSelectionType);
    function get_Value: string;
    procedure set_Value(value: string);
    function get_BorderStyle: DNControlBorderType;
    procedure set_BorderStyle(value: DNControlBorderType);
    function get_BorderOleColor: Int32;
    procedure set_BorderOleColor(value: Int32);
    function get_SpecialEffect: DNControlSpecialEffectType;
    procedure set_SpecialEffect(value: DNControlSpecialEffectType);
    function get_ShowColumnHeads: Boolean;
    procedure set_ShowColumnHeads(value: Boolean);
    function get_IntegralHeight: Boolean;
    procedure set_IntegralHeight(value: Boolean);
    function get_ColumnWidths: Double;
    procedure set_ColumnWidths(value: Double);
    function get_IsEnabled: Boolean;
    procedure set_IsEnabled(value: Boolean);
    function get_IsLocked: Boolean;
    procedure set_IsLocked(value: Boolean);
    function get_IsTransparent: Boolean;
    procedure set_IsTransparent(value: Boolean);
    function get_IsAutoSize: Boolean;
    procedure set_IsAutoSize(value: Boolean);
    function get_IMEMode: DNInputMethodEditorMode;
    procedure set_IMEMode(value: DNInputMethodEditorMode);
    function get_Font: DNFont;
    function get_TextAlign: DNTextAlignmentType;
    procedure set_TextAlign(value: DNTextAlignmentType);
    function get_Data: TArray<Byte>;
    function get_Workbook: DNWorkbook;
    function get_Width: Double;
    procedure set_Width(value: Double);
    function get_Height: Double;
    procedure set_Height(value: Double);
    function get_MouseIcon: TArray<Byte>;
    procedure set_MouseIcon(value: TArray<Byte>);
    function get_MousePointer: DNControlMousePointerType;
    procedure set_MousePointer(value: DNControlMousePointerType);
    function get_ForeOleColor: Int32;
    procedure set_ForeOleColor(value: Int32);
    function get_BackOleColor: Int32;
    procedure set_BackOleColor(value: Int32);
    function get_IsVisible: Boolean;
    procedure set_IsVisible(value: Boolean);
    function get_Shadow: Boolean;
    procedure set_Shadow(value: Boolean);
    function get_LinkedCell: string;
    procedure set_LinkedCell(value: string);
    function get_ListFillRange: string;
    procedure set_ListFillRange(value: string);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property &Type: DNControlType read get_Type;
    property ScrollBars: DNControlScrollBarType read get_ScrollBars write set_ScrollBars;
    property ListWidth: Double read get_ListWidth write set_ListWidth;
    property BoundColumn: Int32 read get_BoundColumn write set_BoundColumn;
    property TextColumn: Int32 read get_TextColumn write set_TextColumn;
    property ColumnCount: Int32 read get_ColumnCount write set_ColumnCount;
    property MatchEntry: DNControlMatchEntryType read get_MatchEntry write set_MatchEntry;
    property ListStyle: DNControlListStyle read get_ListStyle write set_ListStyle;
    property SelectionType: DNSelectionType read get_SelectionType write set_SelectionType;
    property Value: string read get_Value write set_Value;
    property BorderStyle: DNControlBorderType read get_BorderStyle write set_BorderStyle;
    property BorderOleColor: Int32 read get_BorderOleColor write set_BorderOleColor;
    property SpecialEffect: DNControlSpecialEffectType read get_SpecialEffect write set_SpecialEffect;
    property ShowColumnHeads: Boolean read get_ShowColumnHeads write set_ShowColumnHeads;
    property IntegralHeight: Boolean read get_IntegralHeight write set_IntegralHeight;
    property ColumnWidths: Double read get_ColumnWidths write set_ColumnWidths;
    property IsEnabled: Boolean read get_IsEnabled write set_IsEnabled;
    property IsLocked: Boolean read get_IsLocked write set_IsLocked;
    property IsTransparent: Boolean read get_IsTransparent write set_IsTransparent;
    property IsAutoSize: Boolean read get_IsAutoSize write set_IsAutoSize;
    property IMEMode: DNInputMethodEditorMode read get_IMEMode write set_IMEMode;
    property Font: DNFont read get_Font;
    property TextAlign: DNTextAlignmentType read get_TextAlign write set_TextAlign;
    property Data: TArray<Byte> read get_Data;
    property Workbook: DNWorkbook read get_Workbook;
    property Width: Double read get_Width write set_Width;
    property Height: Double read get_Height write set_Height;
    property MouseIcon: TArray<Byte> read get_MouseIcon write set_MouseIcon;
    property MousePointer: DNControlMousePointerType read get_MousePointer write set_MousePointer;
    property ForeOleColor: Int32 read get_ForeOleColor write set_ForeOleColor;
    property BackOleColor: Int32 read get_BackOleColor write set_BackOleColor;
    property IsVisible: Boolean read get_IsVisible write set_IsVisible;
    property Shadow: Boolean read get_Shadow write set_Shadow;
    property LinkedCell: string read get_LinkedCell write set_LinkedCell;
    property ListFillRange: string read get_ListFillRange write set_ListFillRange;
  end;

  TDNListBoxActiveXControl = class(TDNGenericImport<DNListBoxActiveXControlClass, DNListBoxActiveXControl>) end;

  //-------------namespace: Aspose.Cells.Drawing.ActiveXControls----------------
  DNSpinButtonActiveXControlClass = interface(DNActiveXControlClass)
  ['{C8D1F897-8120-50A4-8BA8-23306ECEA204}']
  end;

  [DNTypeName('Aspose.Cells.Drawing.ActiveXControls.SpinButtonActiveXControl')]
  DNSpinButtonActiveXControl = interface(DNActiveXControl)
  ['{2275BC7F-4396-31A1-B385-CB3063AD2AE5}']
  { getters & setters } 

    function get_Type: DNControlType;
    function get_Min: Int32;
    procedure set_Min(value: Int32);
    function get_Max: Int32;
    procedure set_Max(value: Int32);
    function get_Position: Int32;
    procedure set_Position(value: Int32);
    function get_SmallChange: Int32;
    procedure set_SmallChange(value: Int32);
    function get_Orientation: DNControlScrollOrientation;
    procedure set_Orientation(value: DNControlScrollOrientation);
    function get_IsEnabled: Boolean;
    procedure set_IsEnabled(value: Boolean);
    function get_IsLocked: Boolean;
    procedure set_IsLocked(value: Boolean);
    function get_IsTransparent: Boolean;
    procedure set_IsTransparent(value: Boolean);
    function get_IsAutoSize: Boolean;
    procedure set_IsAutoSize(value: Boolean);
    function get_IMEMode: DNInputMethodEditorMode;
    procedure set_IMEMode(value: DNInputMethodEditorMode);
    function get_Font: DNFont;
    function get_TextAlign: DNTextAlignmentType;
    procedure set_TextAlign(value: DNTextAlignmentType);
    function get_Data: TArray<Byte>;
    function get_Workbook: DNWorkbook;
    function get_Width: Double;
    procedure set_Width(value: Double);
    function get_Height: Double;
    procedure set_Height(value: Double);
    function get_MouseIcon: TArray<Byte>;
    procedure set_MouseIcon(value: TArray<Byte>);
    function get_MousePointer: DNControlMousePointerType;
    procedure set_MousePointer(value: DNControlMousePointerType);
    function get_ForeOleColor: Int32;
    procedure set_ForeOleColor(value: Int32);
    function get_BackOleColor: Int32;
    procedure set_BackOleColor(value: Int32);
    function get_IsVisible: Boolean;
    procedure set_IsVisible(value: Boolean);
    function get_Shadow: Boolean;
    procedure set_Shadow(value: Boolean);
    function get_LinkedCell: string;
    procedure set_LinkedCell(value: string);
    function get_ListFillRange: string;
    procedure set_ListFillRange(value: string);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property &Type: DNControlType read get_Type;
    property Min: Int32 read get_Min write set_Min;
    property Max: Int32 read get_Max write set_Max;
    property Position: Int32 read get_Position write set_Position;
    property SmallChange: Int32 read get_SmallChange write set_SmallChange;
    property Orientation: DNControlScrollOrientation read get_Orientation write set_Orientation;
    property IsEnabled: Boolean read get_IsEnabled write set_IsEnabled;
    property IsLocked: Boolean read get_IsLocked write set_IsLocked;
    property IsTransparent: Boolean read get_IsTransparent write set_IsTransparent;
    property IsAutoSize: Boolean read get_IsAutoSize write set_IsAutoSize;
    property IMEMode: DNInputMethodEditorMode read get_IMEMode write set_IMEMode;
    property Font: DNFont read get_Font;
    property TextAlign: DNTextAlignmentType read get_TextAlign write set_TextAlign;
    property Data: TArray<Byte> read get_Data;
    property Workbook: DNWorkbook read get_Workbook;
    property Width: Double read get_Width write set_Width;
    property Height: Double read get_Height write set_Height;
    property MouseIcon: TArray<Byte> read get_MouseIcon write set_MouseIcon;
    property MousePointer: DNControlMousePointerType read get_MousePointer write set_MousePointer;
    property ForeOleColor: Int32 read get_ForeOleColor write set_ForeOleColor;
    property BackOleColor: Int32 read get_BackOleColor write set_BackOleColor;
    property IsVisible: Boolean read get_IsVisible write set_IsVisible;
    property Shadow: Boolean read get_Shadow write set_Shadow;
    property LinkedCell: string read get_LinkedCell write set_LinkedCell;
    property ListFillRange: string read get_ListFillRange write set_ListFillRange;
  end;

  TDNSpinButtonActiveXControl = class(TDNGenericImport<DNSpinButtonActiveXControlClass, DNSpinButtonActiveXControl>) end;

  //-------------namespace: Aspose.Cells.Drawing.ActiveXControls----------------
  DNScrollBarActiveXControlClass = interface(DNSpinButtonActiveXControlClass)
  ['{1F4B59A2-E35B-5682-941D-5DC751791E28}']
  end;

  [DNTypeName('Aspose.Cells.Drawing.ActiveXControls.ScrollBarActiveXControl')]
  DNScrollBarActiveXControl = interface(DNSpinButtonActiveXControl)
  ['{F712C246-B5E4-377F-A9F0-B28D74869C84}']
  { getters & setters } 

    function get_Type: DNControlType;
    function get_LargeChange: Int32;
    procedure set_LargeChange(value: Int32);
    function get_Min: Int32;
    procedure set_Min(value: Int32);
    function get_Max: Int32;
    procedure set_Max(value: Int32);
    function get_Position: Int32;
    procedure set_Position(value: Int32);
    function get_SmallChange: Int32;
    procedure set_SmallChange(value: Int32);
    function get_Orientation: DNControlScrollOrientation;
    procedure set_Orientation(value: DNControlScrollOrientation);
    function get_IsEnabled: Boolean;
    procedure set_IsEnabled(value: Boolean);
    function get_IsLocked: Boolean;
    procedure set_IsLocked(value: Boolean);
    function get_IsTransparent: Boolean;
    procedure set_IsTransparent(value: Boolean);
    function get_IsAutoSize: Boolean;
    procedure set_IsAutoSize(value: Boolean);
    function get_IMEMode: DNInputMethodEditorMode;
    procedure set_IMEMode(value: DNInputMethodEditorMode);
    function get_Font: DNFont;
    function get_TextAlign: DNTextAlignmentType;
    procedure set_TextAlign(value: DNTextAlignmentType);
    function get_Data: TArray<Byte>;
    function get_Workbook: DNWorkbook;
    function get_Width: Double;
    procedure set_Width(value: Double);
    function get_Height: Double;
    procedure set_Height(value: Double);
    function get_MouseIcon: TArray<Byte>;
    procedure set_MouseIcon(value: TArray<Byte>);
    function get_MousePointer: DNControlMousePointerType;
    procedure set_MousePointer(value: DNControlMousePointerType);
    function get_ForeOleColor: Int32;
    procedure set_ForeOleColor(value: Int32);
    function get_BackOleColor: Int32;
    procedure set_BackOleColor(value: Int32);
    function get_IsVisible: Boolean;
    procedure set_IsVisible(value: Boolean);
    function get_Shadow: Boolean;
    procedure set_Shadow(value: Boolean);
    function get_LinkedCell: string;
    procedure set_LinkedCell(value: string);
    function get_ListFillRange: string;
    procedure set_ListFillRange(value: string);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property &Type: DNControlType read get_Type;
    property LargeChange: Int32 read get_LargeChange write set_LargeChange;
    property Min: Int32 read get_Min write set_Min;
    property Max: Int32 read get_Max write set_Max;
    property Position: Int32 read get_Position write set_Position;
    property SmallChange: Int32 read get_SmallChange write set_SmallChange;
    property Orientation: DNControlScrollOrientation read get_Orientation write set_Orientation;
    property IsEnabled: Boolean read get_IsEnabled write set_IsEnabled;
    property IsLocked: Boolean read get_IsLocked write set_IsLocked;
    property IsTransparent: Boolean read get_IsTransparent write set_IsTransparent;
    property IsAutoSize: Boolean read get_IsAutoSize write set_IsAutoSize;
    property IMEMode: DNInputMethodEditorMode read get_IMEMode write set_IMEMode;
    property Font: DNFont read get_Font;
    property TextAlign: DNTextAlignmentType read get_TextAlign write set_TextAlign;
    property Data: TArray<Byte> read get_Data;
    property Workbook: DNWorkbook read get_Workbook;
    property Width: Double read get_Width write set_Width;
    property Height: Double read get_Height write set_Height;
    property MouseIcon: TArray<Byte> read get_MouseIcon write set_MouseIcon;
    property MousePointer: DNControlMousePointerType read get_MousePointer write set_MousePointer;
    property ForeOleColor: Int32 read get_ForeOleColor write set_ForeOleColor;
    property BackOleColor: Int32 read get_BackOleColor write set_BackOleColor;
    property IsVisible: Boolean read get_IsVisible write set_IsVisible;
    property Shadow: Boolean read get_Shadow write set_Shadow;
    property LinkedCell: string read get_LinkedCell write set_LinkedCell;
    property ListFillRange: string read get_ListFillRange write set_ListFillRange;
  end;

  TDNScrollBarActiveXControl = class(TDNGenericImport<DNScrollBarActiveXControlClass, DNScrollBarActiveXControl>) end;

  //-------------namespace: Aspose.Cells.Drawing.ActiveXControls----------------
  DNTextBoxActiveXControlClass = interface(DNActiveXControlClass)
  ['{9CFCD949-D0ED-5FE4-806C-39624D950B19}']
  end;

  [DNTypeName('Aspose.Cells.Drawing.ActiveXControls.TextBoxActiveXControl')]
  DNTextBoxActiveXControl = interface(DNActiveXControl)
  ['{9E60DDC5-E846-3A01-B39C-61A49AE7AFF1}']
  { getters & setters } 

    function get_Type: DNControlType;
    function get_BorderStyle: DNControlBorderType;
    procedure set_BorderStyle(value: DNControlBorderType);
    function get_BorderOleColor: Int32;
    procedure set_BorderOleColor(value: Int32);
    function get_SpecialEffect: DNControlSpecialEffectType;
    procedure set_SpecialEffect(value: DNControlSpecialEffectType);
    function get_MaxLength: Int32;
    procedure set_MaxLength(value: Int32);
    function get_ScrollBars: DNControlScrollBarType;
    procedure set_ScrollBars(value: DNControlScrollBarType);
    function get_PasswordChar: Char;
    procedure set_PasswordChar(value: Char);
    function get_IsEditable: Boolean;
    procedure set_IsEditable(value: Boolean);
    function get_IntegralHeight: Boolean;
    procedure set_IntegralHeight(value: Boolean);
    function get_IsDragBehaviorEnabled: Boolean;
    procedure set_IsDragBehaviorEnabled(value: Boolean);
    function get_EnterKeyBehavior: Boolean;
    procedure set_EnterKeyBehavior(value: Boolean);
    function get_EnterFieldBehavior: Boolean;
    procedure set_EnterFieldBehavior(value: Boolean);
    function get_TabKeyBehavior: Boolean;
    procedure set_TabKeyBehavior(value: Boolean);
    function get_HideSelection: Boolean;
    procedure set_HideSelection(value: Boolean);
    function get_IsAutoTab: Boolean;
    procedure set_IsAutoTab(value: Boolean);
    function get_IsMultiLine: Boolean;
    procedure set_IsMultiLine(value: Boolean);
    function get_IsAutoWordSelected: Boolean;
    procedure set_IsAutoWordSelected(value: Boolean);
    function get_IsWordWrapped: Boolean;
    procedure set_IsWordWrapped(value: Boolean);
    function get_Text: string;
    procedure set_Text(value: string);
    function get_DropButtonStyle: DNDropButtonStyle;
    procedure set_DropButtonStyle(value: DNDropButtonStyle);
    function get_ShowDropButtonTypeWhen: DNShowDropButtonType;
    procedure set_ShowDropButtonTypeWhen(value: DNShowDropButtonType);
    function get_IsEnabled: Boolean;
    procedure set_IsEnabled(value: Boolean);
    function get_IsLocked: Boolean;
    procedure set_IsLocked(value: Boolean);
    function get_IsTransparent: Boolean;
    procedure set_IsTransparent(value: Boolean);
    function get_IsAutoSize: Boolean;
    procedure set_IsAutoSize(value: Boolean);
    function get_IMEMode: DNInputMethodEditorMode;
    procedure set_IMEMode(value: DNInputMethodEditorMode);
    function get_Font: DNFont;
    function get_TextAlign: DNTextAlignmentType;
    procedure set_TextAlign(value: DNTextAlignmentType);
    function get_Data: TArray<Byte>;
    function get_Workbook: DNWorkbook;
    function get_Width: Double;
    procedure set_Width(value: Double);
    function get_Height: Double;
    procedure set_Height(value: Double);
    function get_MouseIcon: TArray<Byte>;
    procedure set_MouseIcon(value: TArray<Byte>);
    function get_MousePointer: DNControlMousePointerType;
    procedure set_MousePointer(value: DNControlMousePointerType);
    function get_ForeOleColor: Int32;
    procedure set_ForeOleColor(value: Int32);
    function get_BackOleColor: Int32;
    procedure set_BackOleColor(value: Int32);
    function get_IsVisible: Boolean;
    procedure set_IsVisible(value: Boolean);
    function get_Shadow: Boolean;
    procedure set_Shadow(value: Boolean);
    function get_LinkedCell: string;
    procedure set_LinkedCell(value: string);
    function get_ListFillRange: string;
    procedure set_ListFillRange(value: string);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property &Type: DNControlType read get_Type;
    property BorderStyle: DNControlBorderType read get_BorderStyle write set_BorderStyle;
    property BorderOleColor: Int32 read get_BorderOleColor write set_BorderOleColor;
    property SpecialEffect: DNControlSpecialEffectType read get_SpecialEffect write set_SpecialEffect;
    property MaxLength: Int32 read get_MaxLength write set_MaxLength;
    property ScrollBars: DNControlScrollBarType read get_ScrollBars write set_ScrollBars;
    property PasswordChar: Char read get_PasswordChar write set_PasswordChar;
    property IsEditable: Boolean read get_IsEditable write set_IsEditable;
    property IntegralHeight: Boolean read get_IntegralHeight write set_IntegralHeight;
    property IsDragBehaviorEnabled: Boolean read get_IsDragBehaviorEnabled write set_IsDragBehaviorEnabled;
    property EnterKeyBehavior: Boolean read get_EnterKeyBehavior write set_EnterKeyBehavior;
    property EnterFieldBehavior: Boolean read get_EnterFieldBehavior write set_EnterFieldBehavior;
    property TabKeyBehavior: Boolean read get_TabKeyBehavior write set_TabKeyBehavior;
    property HideSelection: Boolean read get_HideSelection write set_HideSelection;
    property IsAutoTab: Boolean read get_IsAutoTab write set_IsAutoTab;
    property IsMultiLine: Boolean read get_IsMultiLine write set_IsMultiLine;
    property IsAutoWordSelected: Boolean read get_IsAutoWordSelected write set_IsAutoWordSelected;
    property IsWordWrapped: Boolean read get_IsWordWrapped write set_IsWordWrapped;
    property Text: string read get_Text write set_Text;
    property DropButtonStyle: DNDropButtonStyle read get_DropButtonStyle write set_DropButtonStyle;
    property ShowDropButtonTypeWhen: DNShowDropButtonType read get_ShowDropButtonTypeWhen write set_ShowDropButtonTypeWhen;
    property IsEnabled: Boolean read get_IsEnabled write set_IsEnabled;
    property IsLocked: Boolean read get_IsLocked write set_IsLocked;
    property IsTransparent: Boolean read get_IsTransparent write set_IsTransparent;
    property IsAutoSize: Boolean read get_IsAutoSize write set_IsAutoSize;
    property IMEMode: DNInputMethodEditorMode read get_IMEMode write set_IMEMode;
    property Font: DNFont read get_Font;
    property TextAlign: DNTextAlignmentType read get_TextAlign write set_TextAlign;
    property Data: TArray<Byte> read get_Data;
    property Workbook: DNWorkbook read get_Workbook;
    property Width: Double read get_Width write set_Width;
    property Height: Double read get_Height write set_Height;
    property MouseIcon: TArray<Byte> read get_MouseIcon write set_MouseIcon;
    property MousePointer: DNControlMousePointerType read get_MousePointer write set_MousePointer;
    property ForeOleColor: Int32 read get_ForeOleColor write set_ForeOleColor;
    property BackOleColor: Int32 read get_BackOleColor write set_BackOleColor;
    property IsVisible: Boolean read get_IsVisible write set_IsVisible;
    property Shadow: Boolean read get_Shadow write set_Shadow;
    property LinkedCell: string read get_LinkedCell write set_LinkedCell;
    property ListFillRange: string read get_ListFillRange write set_ListFillRange;
  end;

  TDNTextBoxActiveXControl = class(TDNGenericImport<DNTextBoxActiveXControlClass, DNTextBoxActiveXControl>) end;

  //-------------namespace: Aspose.Cells.Drawing.ActiveXControls----------------
  DNToggleButtonActiveXControlClass = interface(DNActiveXControlClass)
  ['{FD910989-58AA-5252-B5DC-CEBDFBA47B62}']
  end;

  [DNTypeName('Aspose.Cells.Drawing.ActiveXControls.ToggleButtonActiveXControl')]
  DNToggleButtonActiveXControl = interface(DNActiveXControl)
  ['{530D0950-5BF8-392E-A75B-9F66CD08E759}']
  { getters & setters } 

    function get_Type: DNControlType;
    function get_Caption: string;
    procedure set_Caption(value: string);
    function get_PicturePosition: DNControlPicturePositionType;
    procedure set_PicturePosition(value: DNControlPicturePositionType);
    function get_SpecialEffect: DNControlSpecialEffectType;
    procedure set_SpecialEffect(value: DNControlSpecialEffectType);
    function get_Picture: TArray<Byte>;
    procedure set_Picture(value: TArray<Byte>);
    function get_Accelerator: Char;
    procedure set_Accelerator(value: Char);
    function get_Value: DNCheckValueType;
    procedure set_Value(value: DNCheckValueType);
    function get_IsTripleState: Boolean;
    procedure set_IsTripleState(value: Boolean);
    function get_IsEnabled: Boolean;
    procedure set_IsEnabled(value: Boolean);
    function get_IsLocked: Boolean;
    procedure set_IsLocked(value: Boolean);
    function get_IsTransparent: Boolean;
    procedure set_IsTransparent(value: Boolean);
    function get_IsAutoSize: Boolean;
    procedure set_IsAutoSize(value: Boolean);
    function get_IMEMode: DNInputMethodEditorMode;
    procedure set_IMEMode(value: DNInputMethodEditorMode);
    function get_Font: DNFont;
    function get_TextAlign: DNTextAlignmentType;
    procedure set_TextAlign(value: DNTextAlignmentType);
    function get_Data: TArray<Byte>;
    function get_Workbook: DNWorkbook;
    function get_Width: Double;
    procedure set_Width(value: Double);
    function get_Height: Double;
    procedure set_Height(value: Double);
    function get_MouseIcon: TArray<Byte>;
    procedure set_MouseIcon(value: TArray<Byte>);
    function get_MousePointer: DNControlMousePointerType;
    procedure set_MousePointer(value: DNControlMousePointerType);
    function get_ForeOleColor: Int32;
    procedure set_ForeOleColor(value: Int32);
    function get_BackOleColor: Int32;
    procedure set_BackOleColor(value: Int32);
    function get_IsVisible: Boolean;
    procedure set_IsVisible(value: Boolean);
    function get_Shadow: Boolean;
    procedure set_Shadow(value: Boolean);
    function get_LinkedCell: string;
    procedure set_LinkedCell(value: string);
    function get_ListFillRange: string;
    procedure set_ListFillRange(value: string);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property &Type: DNControlType read get_Type;
    property Caption: string read get_Caption write set_Caption;
    property PicturePosition: DNControlPicturePositionType read get_PicturePosition write set_PicturePosition;
    property SpecialEffect: DNControlSpecialEffectType read get_SpecialEffect write set_SpecialEffect;
    property Picture: TArray<Byte> read get_Picture write set_Picture;
    property Accelerator: Char read get_Accelerator write set_Accelerator;
    property Value: DNCheckValueType read get_Value write set_Value;
    property IsTripleState: Boolean read get_IsTripleState write set_IsTripleState;
    property IsEnabled: Boolean read get_IsEnabled write set_IsEnabled;
    property IsLocked: Boolean read get_IsLocked write set_IsLocked;
    property IsTransparent: Boolean read get_IsTransparent write set_IsTransparent;
    property IsAutoSize: Boolean read get_IsAutoSize write set_IsAutoSize;
    property IMEMode: DNInputMethodEditorMode read get_IMEMode write set_IMEMode;
    property Font: DNFont read get_Font;
    property TextAlign: DNTextAlignmentType read get_TextAlign write set_TextAlign;
    property Data: TArray<Byte> read get_Data;
    property Workbook: DNWorkbook read get_Workbook;
    property Width: Double read get_Width write set_Width;
    property Height: Double read get_Height write set_Height;
    property MouseIcon: TArray<Byte> read get_MouseIcon write set_MouseIcon;
    property MousePointer: DNControlMousePointerType read get_MousePointer write set_MousePointer;
    property ForeOleColor: Int32 read get_ForeOleColor write set_ForeOleColor;
    property BackOleColor: Int32 read get_BackOleColor write set_BackOleColor;
    property IsVisible: Boolean read get_IsVisible write set_IsVisible;
    property Shadow: Boolean read get_Shadow write set_Shadow;
    property LinkedCell: string read get_LinkedCell write set_LinkedCell;
    property ListFillRange: string read get_ListFillRange write set_ListFillRange;
  end;

  TDNToggleButtonActiveXControl = class(TDNGenericImport<DNToggleButtonActiveXControlClass, DNToggleButtonActiveXControl>) end;

  //-------------namespace: Aspose.Cells.Drawing.ActiveXControls----------------
  DNRadioButtonActiveXControlClass = interface(DNToggleButtonActiveXControlClass)
  ['{9D56DE8B-CEFE-5258-A2DA-13F64149405D}']
  end;

  [DNTypeName('Aspose.Cells.Drawing.ActiveXControls.RadioButtonActiveXControl')]
  DNRadioButtonActiveXControl = interface(DNToggleButtonActiveXControl)
  ['{39BF113E-6C84-328B-8DEE-8F6C3A43A7EB}']
  { getters & setters } 

    function get_Type: DNControlType;
    function get_GroupName: string;
    procedure set_GroupName(value: string);
    function get_Alignment: DNControlCaptionAlignmentType;
    procedure set_Alignment(value: DNControlCaptionAlignmentType);
    function get_IsWordWrapped: Boolean;
    procedure set_IsWordWrapped(value: Boolean);
    function get_Caption: string;
    procedure set_Caption(value: string);
    function get_PicturePosition: DNControlPicturePositionType;
    procedure set_PicturePosition(value: DNControlPicturePositionType);
    function get_SpecialEffect: DNControlSpecialEffectType;
    procedure set_SpecialEffect(value: DNControlSpecialEffectType);
    function get_Picture: TArray<Byte>;
    procedure set_Picture(value: TArray<Byte>);
    function get_Accelerator: Char;
    procedure set_Accelerator(value: Char);
    function get_Value: DNCheckValueType;
    procedure set_Value(value: DNCheckValueType);
    function get_IsTripleState: Boolean;
    procedure set_IsTripleState(value: Boolean);
    function get_IsEnabled: Boolean;
    procedure set_IsEnabled(value: Boolean);
    function get_IsLocked: Boolean;
    procedure set_IsLocked(value: Boolean);
    function get_IsTransparent: Boolean;
    procedure set_IsTransparent(value: Boolean);
    function get_IsAutoSize: Boolean;
    procedure set_IsAutoSize(value: Boolean);
    function get_IMEMode: DNInputMethodEditorMode;
    procedure set_IMEMode(value: DNInputMethodEditorMode);
    function get_Font: DNFont;
    function get_TextAlign: DNTextAlignmentType;
    procedure set_TextAlign(value: DNTextAlignmentType);
    function get_Data: TArray<Byte>;
    function get_Workbook: DNWorkbook;
    function get_Width: Double;
    procedure set_Width(value: Double);
    function get_Height: Double;
    procedure set_Height(value: Double);
    function get_MouseIcon: TArray<Byte>;
    procedure set_MouseIcon(value: TArray<Byte>);
    function get_MousePointer: DNControlMousePointerType;
    procedure set_MousePointer(value: DNControlMousePointerType);
    function get_ForeOleColor: Int32;
    procedure set_ForeOleColor(value: Int32);
    function get_BackOleColor: Int32;
    procedure set_BackOleColor(value: Int32);
    function get_IsVisible: Boolean;
    procedure set_IsVisible(value: Boolean);
    function get_Shadow: Boolean;
    procedure set_Shadow(value: Boolean);
    function get_LinkedCell: string;
    procedure set_LinkedCell(value: string);
    function get_ListFillRange: string;
    procedure set_ListFillRange(value: string);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property &Type: DNControlType read get_Type;
    property GroupName: string read get_GroupName write set_GroupName;
    property Alignment: DNControlCaptionAlignmentType read get_Alignment write set_Alignment;
    property IsWordWrapped: Boolean read get_IsWordWrapped write set_IsWordWrapped;
    property Caption: string read get_Caption write set_Caption;
    property PicturePosition: DNControlPicturePositionType read get_PicturePosition write set_PicturePosition;
    property SpecialEffect: DNControlSpecialEffectType read get_SpecialEffect write set_SpecialEffect;
    property Picture: TArray<Byte> read get_Picture write set_Picture;
    property Accelerator: Char read get_Accelerator write set_Accelerator;
    property Value: DNCheckValueType read get_Value write set_Value;
    property IsTripleState: Boolean read get_IsTripleState write set_IsTripleState;
    property IsEnabled: Boolean read get_IsEnabled write set_IsEnabled;
    property IsLocked: Boolean read get_IsLocked write set_IsLocked;
    property IsTransparent: Boolean read get_IsTransparent write set_IsTransparent;
    property IsAutoSize: Boolean read get_IsAutoSize write set_IsAutoSize;
    property IMEMode: DNInputMethodEditorMode read get_IMEMode write set_IMEMode;
    property Font: DNFont read get_Font;
    property TextAlign: DNTextAlignmentType read get_TextAlign write set_TextAlign;
    property Data: TArray<Byte> read get_Data;
    property Workbook: DNWorkbook read get_Workbook;
    property Width: Double read get_Width write set_Width;
    property Height: Double read get_Height write set_Height;
    property MouseIcon: TArray<Byte> read get_MouseIcon write set_MouseIcon;
    property MousePointer: DNControlMousePointerType read get_MousePointer write set_MousePointer;
    property ForeOleColor: Int32 read get_ForeOleColor write set_ForeOleColor;
    property BackOleColor: Int32 read get_BackOleColor write set_BackOleColor;
    property IsVisible: Boolean read get_IsVisible write set_IsVisible;
    property Shadow: Boolean read get_Shadow write set_Shadow;
    property LinkedCell: string read get_LinkedCell write set_LinkedCell;
    property ListFillRange: string read get_ListFillRange write set_ListFillRange;
  end;

  TDNRadioButtonActiveXControl = class(TDNGenericImport<DNRadioButtonActiveXControlClass, DNRadioButtonActiveXControl>) end;

  //-------------namespace: Aspose.Cells.Drawing.ActiveXControls----------------
  DNUnknownControlClass = interface(DNActiveXControlClass)
  ['{D37A95DC-CA97-5827-9C6B-F2726181BDF6}']
  end;

  [DNTypeName('Aspose.Cells.Drawing.ActiveXControls.UnknownControl')]
  DNUnknownControl = interface(DNActiveXControl)
  ['{B6747D6A-D272-3A5F-9A09-C943C1D05A4D}']
  { getters & setters } 

    function get_PersistenceType: DNActiveXPersistenceType;
    function get_Data: TArray<Byte>;
    function get_Type: DNControlType;
    function get_IsEnabled: Boolean;
    procedure set_IsEnabled(value: Boolean);
    function get_IsLocked: Boolean;
    procedure set_IsLocked(value: Boolean);
    function get_IsTransparent: Boolean;
    procedure set_IsTransparent(value: Boolean);
    function get_IsAutoSize: Boolean;
    procedure set_IsAutoSize(value: Boolean);
    function get_IMEMode: DNInputMethodEditorMode;
    procedure set_IMEMode(value: DNInputMethodEditorMode);
    function get_Font: DNFont;
    function get_TextAlign: DNTextAlignmentType;
    procedure set_TextAlign(value: DNTextAlignmentType);
    function get_Workbook: DNWorkbook;
    function get_Width: Double;
    procedure set_Width(value: Double);
    function get_Height: Double;
    procedure set_Height(value: Double);
    function get_MouseIcon: TArray<Byte>;
    procedure set_MouseIcon(value: TArray<Byte>);
    function get_MousePointer: DNControlMousePointerType;
    procedure set_MousePointer(value: DNControlMousePointerType);
    function get_ForeOleColor: Int32;
    procedure set_ForeOleColor(value: Int32);
    function get_BackOleColor: Int32;
    procedure set_BackOleColor(value: Int32);
    function get_IsVisible: Boolean;
    procedure set_IsVisible(value: Boolean);
    function get_Shadow: Boolean;
    procedure set_Shadow(value: Boolean);
    function get_LinkedCell: string;
    procedure set_LinkedCell(value: string);
    function get_ListFillRange: string;
    procedure set_ListFillRange(value: string);

  { methods } 

    function GetRelationshipData(relId: string): TArray<Byte>;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property PersistenceType: DNActiveXPersistenceType read get_PersistenceType;
    property Data: TArray<Byte> read get_Data;
    property &Type: DNControlType read get_Type;
    property IsEnabled: Boolean read get_IsEnabled write set_IsEnabled;
    property IsLocked: Boolean read get_IsLocked write set_IsLocked;
    property IsTransparent: Boolean read get_IsTransparent write set_IsTransparent;
    property IsAutoSize: Boolean read get_IsAutoSize write set_IsAutoSize;
    property IMEMode: DNInputMethodEditorMode read get_IMEMode write set_IMEMode;
    property Font: DNFont read get_Font;
    property TextAlign: DNTextAlignmentType read get_TextAlign write set_TextAlign;
    property Workbook: DNWorkbook read get_Workbook;
    property Width: Double read get_Width write set_Width;
    property Height: Double read get_Height write set_Height;
    property MouseIcon: TArray<Byte> read get_MouseIcon write set_MouseIcon;
    property MousePointer: DNControlMousePointerType read get_MousePointer write set_MousePointer;
    property ForeOleColor: Int32 read get_ForeOleColor write set_ForeOleColor;
    property BackOleColor: Int32 read get_BackOleColor write set_BackOleColor;
    property IsVisible: Boolean read get_IsVisible write set_IsVisible;
    property Shadow: Boolean read get_Shadow write set_Shadow;
    property LinkedCell: string read get_LinkedCell write set_LinkedCell;
    property ListFillRange: string read get_ListFillRange write set_ListFillRange;
  end;

  TDNUnknownControl = class(TDNGenericImport<DNUnknownControlClass, DNUnknownControl>) end;

  //-------------namespace: Aspose.Cells.Drawing----------------
  DNAreaClass = interface(DDN.mscorlib.DNObjectClass)
  ['{82B08785-C8F9-5887-93C8-F0F3ECA800DE}']
  end;

  [DNTypeName('Aspose.Cells.Drawing.Area')]
  DNArea = interface(DDN.mscorlib.DNObject)
  ['{99EA9EA3-5E3C-3111-A036-F283E40DF291}']
  { getters & setters } 

    function get_BackgroundColor: DDN.System.Drawing.DNColor;
    procedure set_BackgroundColor(value: DDN.System.Drawing.DNColor);
    function get_ForegroundColor: DDN.System.Drawing.DNColor;
    procedure set_ForegroundColor(value: DDN.System.Drawing.DNColor);
    function get_Formatting: DNFormattingType;
    procedure set_Formatting(value: DNFormattingType);
    function get_InvertIfNegative: Boolean;
    procedure set_InvertIfNegative(value: Boolean);
    function get_FillFormat: DNFillFormat;
    function get_Transparency: Double;
    procedure set_Transparency(value: Double);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property BackgroundColor: DDN.System.Drawing.DNColor read get_BackgroundColor write set_BackgroundColor;
    property ForegroundColor: DDN.System.Drawing.DNColor read get_ForegroundColor write set_ForegroundColor;
    property Formatting: DNFormattingType read get_Formatting write set_Formatting;
    property InvertIfNegative: Boolean read get_InvertIfNegative write set_InvertIfNegative;
    property FillFormat: DNFillFormat read get_FillFormat;
    property Transparency: Double read get_Transparency write set_Transparency;
  end;

  TDNArea = class(TDNGenericImport<DNAreaClass, DNArea>) end;

  //-------------namespace: Aspose.Cells.Charts----------------
  DNFloorClass = interface(DNAreaClass)
  ['{D0465578-497E-5027-A970-A8182A5DC8FE}']
  end;

  [DNTypeName('Aspose.Cells.Charts.Floor')]
  DNFloor = interface(DNArea)
  ['{9153906A-FAD1-36EC-9526-2090DEDBD24D}']
  { getters & setters } 

    function get_Border: DNLine;
    procedure set_Border(value: DNLine);
    function get_BackgroundColor: DDN.System.Drawing.DNColor;
    procedure set_BackgroundColor(value: DDN.System.Drawing.DNColor);
    function get_ForegroundColor: DDN.System.Drawing.DNColor;
    procedure set_ForegroundColor(value: DDN.System.Drawing.DNColor);
    function get_Formatting: DNFormattingType;
    procedure set_Formatting(value: DNFormattingType);
    function get_InvertIfNegative: Boolean;
    procedure set_InvertIfNegative(value: Boolean);
    function get_FillFormat: DNFillFormat;
    function get_Transparency: Double;
    procedure set_Transparency(value: Double);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Border: DNLine read get_Border write set_Border;
    property BackgroundColor: DDN.System.Drawing.DNColor read get_BackgroundColor write set_BackgroundColor;
    property ForegroundColor: DDN.System.Drawing.DNColor read get_ForegroundColor write set_ForegroundColor;
    property Formatting: DNFormattingType read get_Formatting write set_Formatting;
    property InvertIfNegative: Boolean read get_InvertIfNegative write set_InvertIfNegative;
    property FillFormat: DNFillFormat read get_FillFormat;
    property Transparency: Double read get_Transparency write set_Transparency;
  end;

  TDNFloor = class(TDNGenericImport<DNFloorClass, DNFloor>) end;

  //-------------namespace: Aspose.Cells.Charts----------------
  DNWallsClass = interface(DNFloorClass)
  ['{6754671C-FD6A-5C68-90C9-BC0A9B26338F}']
  end;

  [DNTypeName('Aspose.Cells.Charts.Walls')]
  DNWalls = interface(DNFloor)
  ['{42900F52-F279-3FBB-A186-4148E8C63C94}']
  { getters & setters } 

    function get_CenterX: Int32;
    function get_CenterY: Int32;
    function get_Width: Int32;
    function get_Depth: Int32;
    function get_Height: Int32;
    function get_CenterXPx: Int32;
    function get_CenterYPx: Int32;
    function get_WidthPx: Int32;
    function get_DepthPx: Int32;
    function get_HeightPx: Int32;
    function get_Border: DNLine;
    procedure set_Border(value: DNLine);
    function get_BackgroundColor: DDN.System.Drawing.DNColor;
    procedure set_BackgroundColor(value: DDN.System.Drawing.DNColor);
    function get_ForegroundColor: DDN.System.Drawing.DNColor;
    procedure set_ForegroundColor(value: DDN.System.Drawing.DNColor);
    function get_Formatting: DNFormattingType;
    procedure set_Formatting(value: DNFormattingType);
    function get_InvertIfNegative: Boolean;
    procedure set_InvertIfNegative(value: Boolean);
    function get_FillFormat: DNFillFormat;
    function get_Transparency: Double;
    procedure set_Transparency(value: Double);

  { methods } 

    function GetCubePointCount: Int32;
    function GetCubePointXPx(index: Int32): Single;
    function GetCubePointYPx(index: Int32): Single;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property CenterX: Int32 read get_CenterX;
    property CenterY: Int32 read get_CenterY;
    property Width: Int32 read get_Width;
    property Depth: Int32 read get_Depth;
    property Height: Int32 read get_Height;
    property CenterXPx: Int32 read get_CenterXPx;
    property CenterYPx: Int32 read get_CenterYPx;
    property WidthPx: Int32 read get_WidthPx;
    property DepthPx: Int32 read get_DepthPx;
    property HeightPx: Int32 read get_HeightPx;
    property Border: DNLine read get_Border write set_Border;
    property BackgroundColor: DDN.System.Drawing.DNColor read get_BackgroundColor write set_BackgroundColor;
    property ForegroundColor: DDN.System.Drawing.DNColor read get_ForegroundColor write set_ForegroundColor;
    property Formatting: DNFormattingType read get_Formatting write set_Formatting;
    property InvertIfNegative: Boolean read get_InvertIfNegative write set_InvertIfNegative;
    property FillFormat: DNFillFormat read get_FillFormat;
    property Transparency: Double read get_Transparency write set_Transparency;
  end;

  TDNWalls = class(TDNGenericImport<DNWallsClass, DNWalls>) end;

  //-------------namespace: Aspose.Cells.Drawing----------------
  DNBevelClass = interface(DDN.mscorlib.DNObjectClass)
  ['{18F877A9-FD22-5295-9559-D074F5937D42}']
  end;

  [DNTypeName('Aspose.Cells.Drawing.Bevel')]
  DNBevel = interface(DDN.mscorlib.DNObject)
  ['{9CF5C25B-3C00-3552-82C4-1E56BCDFF64A}']
  { getters & setters } 

    function get_Width: Double;
    procedure set_Width(value: Double);
    function get_Height: Double;
    procedure set_Height(value: Double);
    function get_Type: DNBevelPresetType;
    procedure set_Type(value: DNBevelPresetType);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Width: Double read get_Width write set_Width;
    property Height: Double read get_Height write set_Height;
    property &Type: DNBevelPresetType read get_Type write set_Type;
  end;

  TDNBevel = class(TDNGenericImport<DNBevelClass, DNBevel>) end;

  //-------------namespace: Aspose.Cells.Drawing----------------
  DNColorHelperClass = interface(DDN.mscorlib.DNObjectClass)
  ['{B0D04B2C-F040-59A2-83F0-3EDF3C76A635}']
  { static methods } 

    {class} function FromOleColor(oleColor: Int32): DDN.System.Drawing.DNColor;
    {class} function ToOleColor(color: DDN.System.Drawing.DNColor; workbook: DNWorkbook): Int32;

  end;

  [DNTypeName('Aspose.Cells.Drawing.ColorHelper')]
  DNColorHelper = interface(DDN.mscorlib.DNObject)
  ['{8EE28BA5-C6CB-37FC-A2C6-27BFBBAFEDEC}']
  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNColorHelper = class(TDNGenericImport<DNColorHelperClass, DNColorHelper>) end;

  //-------------namespace: Aspose.Cells.Drawing----------------
  DNFillClass = interface(DDN.mscorlib.DNObjectClass)
  ['{5CA9D41D-9693-58A6-ACA7-7CEF08F80FE7}']
  end;

  [DNTypeName('Aspose.Cells.Drawing.Fill')]
  DNFill = interface(DDN.mscorlib.DNObject)
  ['{0A72DA4D-479A-37DA-8572-73BDC52C2792}']
  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNFill = class(TDNGenericImport<DNFillClass, DNFill>) end;

  //-------------namespace: Aspose.Cells.Drawing----------------
  DNAutomaticFillClass = interface(DNFillClass)
  ['{995188CC-A473-596C-AEA2-DCCC0B9C8E79}']
  end;

  [DNTypeName('Aspose.Cells.Drawing.AutomaticFill')]
  DNAutomaticFill = interface(DNFill)
  ['{6482C679-F94B-3F6A-B816-D8E25F853E8C}']
  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNAutomaticFill = class(TDNGenericImport<DNAutomaticFillClass, DNAutomaticFill>) end;

  //-------------namespace: Aspose.Cells.Drawing----------------
  DNGradientFillClass = interface(DNFillClass)
  ['{455F1D00-A622-5311-9B36-71DFEDA699D9}']
  end;

  [DNTypeName('Aspose.Cells.Drawing.GradientFill')]
  DNGradientFill = interface(DNFill)
  ['{48498416-4D21-3D14-A31E-16A756B3A7E2}']
  { getters & setters } 

    function get_GradientStops: DNGradientStopCollection;
    function get_FillType: DNGradientFillType;
    function get_DirectionType: DNGradientDirectionType;
    function get_Angle: Single;
    procedure set_Angle(value: Single);

  { methods } 

    procedure SetGradient(&type: DNGradientFillType; angle: Double; direction: DNGradientDirectionType);
    procedure SetOneColorGradient(color: DDN.System.Drawing.DNColor; degree: Double; style: DNGradientStyleType; variant: Int32);
    procedure SetTwoColorGradient(color1: DDN.System.Drawing.DNColor; color2: DDN.System.Drawing.DNColor; style: DNGradientStyleType; variant: Int32); overload;
    procedure SetTwoColorGradient(color1: DDN.System.Drawing.DNColor; transparency1: Double; color2: DDN.System.Drawing.DNColor; transparency2: Double; style: DNGradientStyleType; variant: Int32); overload;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property GradientStops: DNGradientStopCollection read get_GradientStops;
    property FillType: DNGradientFillType read get_FillType;
    property DirectionType: DNGradientDirectionType read get_DirectionType;
    property Angle: Single read get_Angle write set_Angle;
  end;

  TDNGradientFill = class(TDNGenericImport<DNGradientFillClass, DNGradientFill>) end;

  //-------------namespace: Aspose.Cells.Drawing----------------
  DNGroupFillClass = interface(DNFillClass)
  ['{0E538EEF-DFB3-57A1-AC6E-170BFF128AD2}']
  end;

  [DNTypeName('Aspose.Cells.Drawing.GroupFill')]
  DNGroupFill = interface(DNFill)
  ['{036CC05D-8CE2-3AA2-8DBE-B7F601476F8C}']
  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNGroupFill = class(TDNGenericImport<DNGroupFillClass, DNGroupFill>) end;

  //-------------namespace: Aspose.Cells.Drawing----------------
  DNNoneFillClass = interface(DNFillClass)
  ['{B5E37114-1D56-5306-BD95-65688324AD02}']
  end;

  [DNTypeName('Aspose.Cells.Drawing.NoneFill')]
  DNNoneFill = interface(DNFill)
  ['{98D1EC5C-CC2E-3F9C-9956-420739703E60}']
  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNNoneFill = class(TDNGenericImport<DNNoneFillClass, DNNoneFill>) end;

  //-------------namespace: Aspose.Cells.Drawing----------------
  DNPatternFillClass = interface(DNFillClass)
  ['{8675D2EF-B431-5E25-A351-6900A8113296}']
  end;

  [DNTypeName('Aspose.Cells.Drawing.PatternFill')]
  DNPatternFill = interface(DNFill)
  ['{B3C8E427-EDDE-363B-BB54-CA4099CF65CC}']
  { getters & setters } 

    function get_Pattern: DNFillPattern;
    procedure set_Pattern(value: DNFillPattern);
    function get_BackgroundColor: DDN.System.Drawing.DNColor;
    procedure set_BackgroundColor(value: DDN.System.Drawing.DNColor);
    function get_BackgroundCellsColor: DNCellsColor;
    procedure set_BackgroundCellsColor(value: DNCellsColor);
    function get_ForegroundColor: DDN.System.Drawing.DNColor;
    procedure set_ForegroundColor(value: DDN.System.Drawing.DNColor);
    function get_ForegroundCellsColor: DNCellsColor;
    procedure set_ForegroundCellsColor(value: DNCellsColor);
    function get_ForeTransparency: Double;
    procedure set_ForeTransparency(value: Double);
    function get_BackTransparency: Double;
    procedure set_BackTransparency(value: Double);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Pattern: DNFillPattern read get_Pattern write set_Pattern;
    property BackgroundColor: DDN.System.Drawing.DNColor read get_BackgroundColor write set_BackgroundColor;
    property BackgroundCellsColor: DNCellsColor read get_BackgroundCellsColor write set_BackgroundCellsColor;
    property ForegroundColor: DDN.System.Drawing.DNColor read get_ForegroundColor write set_ForegroundColor;
    property ForegroundCellsColor: DNCellsColor read get_ForegroundCellsColor write set_ForegroundCellsColor;
    property ForeTransparency: Double read get_ForeTransparency write set_ForeTransparency;
    property BackTransparency: Double read get_BackTransparency write set_BackTransparency;
  end;

  TDNPatternFill = class(TDNGenericImport<DNPatternFillClass, DNPatternFill>) end;

  //-------------namespace: Aspose.Cells.Drawing----------------
  DNSolidFillClass = interface(DNFillClass)
  ['{DBF118A0-4B79-5020-8689-108D1B5919F9}']
  end;

  [DNTypeName('Aspose.Cells.Drawing.SolidFill')]
  DNSolidFill = interface(DNFill)
  ['{F88884CE-F006-3EC4-91D6-2262EA561DDA}']
  { getters & setters } 

    function get_Color: DDN.System.Drawing.DNColor;
    procedure set_Color(value: DDN.System.Drawing.DNColor);
    function get_CellsColor: DNCellsColor;
    procedure set_CellsColor(value: DNCellsColor);
    function get_Transparency: Double;
    procedure set_Transparency(value: Double);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Color: DDN.System.Drawing.DNColor read get_Color write set_Color;
    property CellsColor: DNCellsColor read get_CellsColor write set_CellsColor;
    property Transparency: Double read get_Transparency write set_Transparency;
  end;

  TDNSolidFill = class(TDNGenericImport<DNSolidFillClass, DNSolidFill>) end;

  //-------------namespace: Aspose.Cells.Drawing----------------
  DNTextureFillClass = interface(DNFillClass)
  ['{910BF699-EEAE-5F21-BE34-72D29AA4367F}']
  end;

  [DNTypeName('Aspose.Cells.Drawing.TextureFill')]
  DNTextureFill = interface(DNFill)
  ['{0BA3057C-C4F3-3E71-9982-6760D1E1EB22}']
  { getters & setters } 

    function get_Type: DNTextureType;
    procedure set_Type(value: DNTextureType);
    function get_ImageData: TArray<Byte>;
    procedure set_ImageData(value: TArray<Byte>);
    function get_IsTiling: Boolean;
    procedure set_IsTiling(value: Boolean);
    function get_PicFormatOption: DNPicFormatOption;
    procedure set_PicFormatOption(value: DNPicFormatOption);
    function get_TilePicOption: DNTilePicOption;
    procedure set_TilePicOption(value: DNTilePicOption);
    function get_PictureFormatType: DNFillPictureType;
    procedure set_PictureFormatType(value: DNFillPictureType);
    function get_Scale: Double;
    procedure set_Scale(value: Double);
    function get_Transparency: Double;
    procedure set_Transparency(value: Double);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property &Type: DNTextureType read get_Type write set_Type;
    property ImageData: TArray<Byte> read get_ImageData write set_ImageData;
    property IsTiling: Boolean read get_IsTiling write set_IsTiling;
    property PicFormatOption: DNPicFormatOption read get_PicFormatOption write set_PicFormatOption;
    property TilePicOption: DNTilePicOption read get_TilePicOption write set_TilePicOption;
    property PictureFormatType: DNFillPictureType read get_PictureFormatType write set_PictureFormatType;
    property Scale: Double read get_Scale write set_Scale;
    property Transparency: Double read get_Transparency write set_Transparency;
  end;

  TDNTextureFill = class(TDNGenericImport<DNTextureFillClass, DNTextureFill>) end;

  //-------------namespace: Aspose.Cells.Drawing----------------
  DNFillFormatClass = interface(DDN.mscorlib.DNObjectClass)
  ['{1F8A2007-5FAC-5C2A-90E0-EC760932F432}']
  end;

  [DNTypeName('Aspose.Cells.Drawing.FillFormat')]
  DNFillFormat = interface(DDN.mscorlib.DNObject)
  ['{D1BF70F9-0ECD-31D1-90B9-6549FF456B1D}']
  { getters & setters } 

    function get_Type: DNFillType;
    procedure set_Type(value: DNFillType);
    function get_FillType: DNFillType;
    procedure set_FillType(value: DNFillType);
    function get_Transparency: Double;
    procedure set_Transparency(value: Double);
    function get_SetType: DNFormatSetType;
    procedure set_SetType(value: DNFormatSetType);
    function get_GradientFill: DNGradientFill;
    function get_TextureFill: DNTextureFill;
    function get_SolidFill: DNSolidFill;
    function get_PatternFill: DNPatternFill;
    function get_GradientColorType: DNGradientColorType;
    function get_GradientStyle: DNGradientStyleType;
    function get_GradientColor1: DDN.System.Drawing.DNColor;
    function get_GradientColor2: DDN.System.Drawing.DNColor;
    function get_GradientDegree: Double;
    function get_GradientVariant: Int32;
    function get_PresetColor: DNGradientPresetType;
    function get_Texture: DNTextureType;
    procedure set_Texture(value: DNTextureType);
    function get_Pattern: DNFillPattern;
    procedure set_Pattern(value: DNFillPattern);
    function get_PictureFormatType: DNFillPictureType;
    procedure set_PictureFormatType(value: DNFillPictureType);
    function get_Scale: Double;
    procedure set_Scale(value: Double);
    function get_ImageData: TArray<Byte>;
    procedure set_ImageData(value: TArray<Byte>);

  { methods } 

    procedure SetOneColorGradient(color: DDN.System.Drawing.DNColor; degree: Double; style: DNGradientStyleType; variant: Int32);
    procedure SetTwoColorGradient(color1: DDN.System.Drawing.DNColor; color2: DDN.System.Drawing.DNColor; style: DNGradientStyleType; variant: Int32); overload;
    procedure SetTwoColorGradient(color1: DDN.System.Drawing.DNColor; transparency1: Double; color2: DDN.System.Drawing.DNColor; transparency2: Double; style: DNGradientStyleType; variant: Int32); overload;
    procedure SetPresetColorGradient(presetColor: DNGradientPresetType; style: DNGradientStyleType; variant: Int32);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property &Type: DNFillType read get_Type write set_Type;
    property FillType: DNFillType read get_FillType write set_FillType;
    property Transparency: Double read get_Transparency write set_Transparency;
    property SetType: DNFormatSetType read get_SetType write set_SetType;
    property GradientFill: DNGradientFill read get_GradientFill;
    property TextureFill: DNTextureFill read get_TextureFill;
    property SolidFill: DNSolidFill read get_SolidFill;
    property PatternFill: DNPatternFill read get_PatternFill;
    property GradientColorType: DNGradientColorType read get_GradientColorType;
    property GradientStyle: DNGradientStyleType read get_GradientStyle;
    property GradientColor1: DDN.System.Drawing.DNColor read get_GradientColor1;
    property GradientColor2: DDN.System.Drawing.DNColor read get_GradientColor2;
    property GradientDegree: Double read get_GradientDegree;
    property GradientVariant: Int32 read get_GradientVariant;
    property PresetColor: DNGradientPresetType read get_PresetColor;
    property Texture: DNTextureType read get_Texture write set_Texture;
    property Pattern: DNFillPattern read get_Pattern write set_Pattern;
    property PictureFormatType: DNFillPictureType read get_PictureFormatType write set_PictureFormatType;
    property Scale: Double read get_Scale write set_Scale;
    property ImageData: TArray<Byte> read get_ImageData write set_ImageData;
  end;

  TDNFillFormat = class(TDNGenericImport<DNFillFormatClass, DNFillFormat>) end;

  //-------------namespace: Aspose.Cells.Drawing----------------
  DNLineFormatClass = interface(DNFillFormatClass)
  ['{4D148680-6698-5C05-A899-4596FC4EC9D4}']
  end;

  [DNTypeName('Aspose.Cells.Drawing.LineFormat')]
  DNLineFormat = interface(DNFillFormat)
  ['{2458C823-6A41-33C7-A796-7A7E3CE50B64}']
  { getters & setters } 

    function get_CompoundType: DNMsoLineStyle;
    procedure set_CompoundType(value: DNMsoLineStyle);
    function get_DashStyle: DNMsoLineDashStyle;
    procedure set_DashStyle(value: DNMsoLineDashStyle);
    function get_CapType: DNLineCapType;
    procedure set_CapType(value: DNLineCapType);
    function get_JoinType: DNLineJoinType;
    procedure set_JoinType(value: DNLineJoinType);
    function get_BeginArrowheadStyle: DNMsoArrowheadStyle;
    procedure set_BeginArrowheadStyle(value: DNMsoArrowheadStyle);
    function get_BeginArrowheadWidth: DNMsoArrowheadWidth;
    procedure set_BeginArrowheadWidth(value: DNMsoArrowheadWidth);
    function get_BeginArrowheadLength: DNMsoArrowheadLength;
    procedure set_BeginArrowheadLength(value: DNMsoArrowheadLength);
    function get_EndArrowheadStyle: DNMsoArrowheadStyle;
    procedure set_EndArrowheadStyle(value: DNMsoArrowheadStyle);
    function get_EndArrowheadWidth: DNMsoArrowheadWidth;
    procedure set_EndArrowheadWidth(value: DNMsoArrowheadWidth);
    function get_EndArrowheadLength: DNMsoArrowheadLength;
    procedure set_EndArrowheadLength(value: DNMsoArrowheadLength);
    function get_Weight: Double;
    procedure set_Weight(value: Double);
    function get_Type: DNFillType;
    procedure set_Type(value: DNFillType);
    function get_FillType: DNFillType;
    procedure set_FillType(value: DNFillType);
    function get_Transparency: Double;
    procedure set_Transparency(value: Double);
    function get_SetType: DNFormatSetType;
    procedure set_SetType(value: DNFormatSetType);
    function get_GradientFill: DNGradientFill;
    function get_TextureFill: DNTextureFill;
    function get_SolidFill: DNSolidFill;
    function get_PatternFill: DNPatternFill;
    function get_GradientColorType: DNGradientColorType;
    function get_GradientStyle: DNGradientStyleType;
    function get_GradientColor1: DDN.System.Drawing.DNColor;
    function get_GradientColor2: DDN.System.Drawing.DNColor;
    function get_GradientDegree: Double;
    function get_GradientVariant: Int32;
    function get_PresetColor: DNGradientPresetType;
    function get_Texture: DNTextureType;
    procedure set_Texture(value: DNTextureType);
    function get_Pattern: DNFillPattern;
    procedure set_Pattern(value: DNFillPattern);
    function get_PictureFormatType: DNFillPictureType;
    procedure set_PictureFormatType(value: DNFillPictureType);
    function get_Scale: Double;
    procedure set_Scale(value: Double);
    function get_ImageData: TArray<Byte>;
    procedure set_ImageData(value: TArray<Byte>);

  { methods } 

    procedure SetOneColorGradient(color: DDN.System.Drawing.DNColor; degree: Double; style: DNGradientStyleType; variant: Int32);
    procedure SetTwoColorGradient(color1: DDN.System.Drawing.DNColor; color2: DDN.System.Drawing.DNColor; style: DNGradientStyleType; variant: Int32); overload;
    procedure SetTwoColorGradient(color1: DDN.System.Drawing.DNColor; transparency1: Double; color2: DDN.System.Drawing.DNColor; transparency2: Double; style: DNGradientStyleType; variant: Int32); overload;
    procedure SetPresetColorGradient(presetColor: DNGradientPresetType; style: DNGradientStyleType; variant: Int32);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property CompoundType: DNMsoLineStyle read get_CompoundType write set_CompoundType;
    property DashStyle: DNMsoLineDashStyle read get_DashStyle write set_DashStyle;
    property CapType: DNLineCapType read get_CapType write set_CapType;
    property JoinType: DNLineJoinType read get_JoinType write set_JoinType;
    property BeginArrowheadStyle: DNMsoArrowheadStyle read get_BeginArrowheadStyle write set_BeginArrowheadStyle;
    property BeginArrowheadWidth: DNMsoArrowheadWidth read get_BeginArrowheadWidth write set_BeginArrowheadWidth;
    property BeginArrowheadLength: DNMsoArrowheadLength read get_BeginArrowheadLength write set_BeginArrowheadLength;
    property EndArrowheadStyle: DNMsoArrowheadStyle read get_EndArrowheadStyle write set_EndArrowheadStyle;
    property EndArrowheadWidth: DNMsoArrowheadWidth read get_EndArrowheadWidth write set_EndArrowheadWidth;
    property EndArrowheadLength: DNMsoArrowheadLength read get_EndArrowheadLength write set_EndArrowheadLength;
    property Weight: Double read get_Weight write set_Weight;
    property &Type: DNFillType read get_Type write set_Type;
    property FillType: DNFillType read get_FillType write set_FillType;
    property Transparency: Double read get_Transparency write set_Transparency;
    property SetType: DNFormatSetType read get_SetType write set_SetType;
    property GradientFill: DNGradientFill read get_GradientFill;
    property TextureFill: DNTextureFill read get_TextureFill;
    property SolidFill: DNSolidFill read get_SolidFill;
    property PatternFill: DNPatternFill read get_PatternFill;
    property GradientColorType: DNGradientColorType read get_GradientColorType;
    property GradientStyle: DNGradientStyleType read get_GradientStyle;
    property GradientColor1: DDN.System.Drawing.DNColor read get_GradientColor1;
    property GradientColor2: DDN.System.Drawing.DNColor read get_GradientColor2;
    property GradientDegree: Double read get_GradientDegree;
    property GradientVariant: Int32 read get_GradientVariant;
    property PresetColor: DNGradientPresetType read get_PresetColor;
    property Texture: DNTextureType read get_Texture write set_Texture;
    property Pattern: DNFillPattern read get_Pattern write set_Pattern;
    property PictureFormatType: DNFillPictureType read get_PictureFormatType write set_PictureFormatType;
    property Scale: Double read get_Scale write set_Scale;
    property ImageData: TArray<Byte> read get_ImageData write set_ImageData;
  end;

  TDNLineFormat = class(TDNGenericImport<DNLineFormatClass, DNLineFormat>) end;

  //-------------namespace: Aspose.Cells.Drawing----------------
  DNFormat3DClass = interface(DDN.mscorlib.DNObjectClass)
  ['{4D460D01-C9E4-5B60-8B3A-8DA7924B2714}']
  end;

  [DNTypeName('Aspose.Cells.Drawing.Format3D')]
  DNFormat3D = interface(DDN.mscorlib.DNObject)
  ['{E7451057-C240-3454-85A6-AFA1FE1A1B43}']
  { getters & setters } 

    function get_TopBevel: DNBevel;
    function get_SurfaceMaterialType: DNPresetMaterialType;
    procedure set_SurfaceMaterialType(value: DNPresetMaterialType);
    function get_SurfaceLightingType: DNLightRigType;
    procedure set_SurfaceLightingType(value: DNLightRigType);
    function get_LightingAngle: Double;
    procedure set_LightingAngle(value: Double);

  { methods } 

    function HasTopBevelData: Boolean;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property TopBevel: DNBevel read get_TopBevel;
    property SurfaceMaterialType: DNPresetMaterialType read get_SurfaceMaterialType write set_SurfaceMaterialType;
    property SurfaceLightingType: DNLightRigType read get_SurfaceLightingType write set_SurfaceLightingType;
    property LightingAngle: Double read get_LightingAngle write set_LightingAngle;
  end;

  TDNFormat3D = class(TDNGenericImport<DNFormat3DClass, DNFormat3D>) end;

  //-------------namespace: Aspose.Cells.Drawing----------------
  DNGeometryClass = interface(DDN.mscorlib.DNObjectClass)
  ['{A9E7AF8F-115F-5870-9A26-C00725A88C29}']
  end;

  [DNTypeName('Aspose.Cells.Drawing.Geometry')]
  DNGeometry = interface(DDN.mscorlib.DNObject)
  ['{AE245FB3-29AB-37E4-A1F0-8F8FDA46DA7F}']
  { getters & setters } 

    function get_ShapeAdjustValues: DNShapeGuideCollection;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property ShapeAdjustValues: DNShapeGuideCollection read get_ShapeAdjustValues;
  end;

  TDNGeometry = class(TDNGenericImport<DNGeometryClass, DNGeometry>) end;

  //-------------namespace: Aspose.Cells.Drawing----------------
  DNCustomGeometryClass = interface(DNGeometryClass)
  ['{E491DDB9-94C3-5501-A505-AEE5B65D44D9}']
  end;

  [DNTypeName('Aspose.Cells.Drawing.CustomGeometry')]
  DNCustomGeometry = interface(DNGeometry)
  ['{188E46BE-6F1F-3ECF-A7F8-288133979C34}']
  { getters & setters } 

    function get_Paths: DNShapePathCollection;
    function get_ShapeAdjustValues: DNShapeGuideCollection;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Paths: DNShapePathCollection read get_Paths;
    property ShapeAdjustValues: DNShapeGuideCollection read get_ShapeAdjustValues;
  end;

  TDNCustomGeometry = class(TDNGenericImport<DNCustomGeometryClass, DNCustomGeometry>) end;

  //-------------namespace: Aspose.Cells.Drawing----------------
  DNGlowEffectClass = interface(DDN.mscorlib.DNObjectClass)
  ['{0DB17035-A9B9-59F5-B9C3-04392071C135}']
  end;

  [DNTypeName('Aspose.Cells.Drawing.GlowEffect')]
  DNGlowEffect = interface(DDN.mscorlib.DNObject)
  ['{10C5F938-FCE5-36B6-A0F9-ADC8AB575559}']
  { getters & setters } 

    function get_Color: DNCellsColor;
    procedure set_Color(value: DNCellsColor);
    function get_Radius: Double;
    procedure set_Radius(value: Double);
    function get_Size: Double;
    procedure set_Size(value: Double);
    function get_Transparency: Double;
    procedure set_Transparency(value: Double);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Color: DNCellsColor read get_Color write set_Color;
    property Radius: Double read get_Radius write set_Radius;
    property Size: Double read get_Size write set_Size;
    property Transparency: Double read get_Transparency write set_Transparency;
  end;

  TDNGlowEffect = class(TDNGenericImport<DNGlowEffectClass, DNGlowEffect>) end;

  //-------------namespace: Aspose.Cells.Drawing----------------
  DNGradientStopClass = interface(DDN.mscorlib.DNObjectClass)
  ['{3A5B4D64-EE43-5E0B-92C0-D71CA2626FE7}']
  end;

  [DNTypeName('Aspose.Cells.Drawing.GradientStop')]
  DNGradientStop = interface(DDN.mscorlib.DNObject)
  ['{C91CB130-27F1-3870-8A64-E4A4E3C32693}']
  { getters & setters } 

    function get_Position: Double;
    procedure set_Position(value: Double);
    function get_CellsColor: DNCellsColor;
    function get_Transparency: Double;
    procedure set_Transparency(value: Double);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Position: Double read get_Position write set_Position;
    property CellsColor: DNCellsColor read get_CellsColor;
    property Transparency: Double read get_Transparency write set_Transparency;
  end;

  TDNGradientStop = class(TDNGenericImport<DNGradientStopClass, DNGradientStop>) end;

  //-------------namespace: Aspose.Cells.Drawing----------------
  DNLineClass = interface(DDN.mscorlib.DNObjectClass)
  ['{E6E4CC86-6ECC-5511-965F-FCA233EC135C}']
  end;

  [DNTypeName('Aspose.Cells.Drawing.Line')]
  DNLine = interface(DDN.mscorlib.DNObject)
  ['{024360BA-999F-3BB7-9A36-3CFBE3F879CC}']
  { getters & setters } 

    function get_CompoundType: DNMsoLineStyle;
    procedure set_CompoundType(value: DNMsoLineStyle);
    function get_DashType: DNMsoLineDashStyle;
    procedure set_DashType(value: DNMsoLineDashStyle);
    function get_CapType: DNLineCapType;
    procedure set_CapType(value: DNLineCapType);
    function get_JoinType: DNLineJoinType;
    procedure set_JoinType(value: DNLineJoinType);
    function get_BeginType: DNMsoArrowheadStyle;
    procedure set_BeginType(value: DNMsoArrowheadStyle);
    function get_EndType: DNMsoArrowheadStyle;
    procedure set_EndType(value: DNMsoArrowheadStyle);
    function get_BeginArrowLength: DNMsoArrowheadLength;
    procedure set_BeginArrowLength(value: DNMsoArrowheadLength);
    function get_EndArrowLength: DNMsoArrowheadLength;
    procedure set_EndArrowLength(value: DNMsoArrowheadLength);
    function get_BeginArrowWidth: DNMsoArrowheadWidth;
    procedure set_BeginArrowWidth(value: DNMsoArrowheadWidth);
    function get_EndArrowWidth: DNMsoArrowheadWidth;
    procedure set_EndArrowWidth(value: DNMsoArrowheadWidth);
    function get_ThemeColor: DNThemeColor;
    procedure set_ThemeColor(value: DNThemeColor);
    function get_Color: DDN.System.Drawing.DNColor;
    procedure set_Color(value: DDN.System.Drawing.DNColor);
    function get_Transparency: Double;
    procedure set_Transparency(value: Double);
    function get_Style: DNLineType;
    procedure set_Style(value: DNLineType);
    function get_Weight: DNWeightType;
    procedure set_Weight(value: DNWeightType);
    function get_WeightPt: Double;
    procedure set_WeightPt(value: Double);
    function get_WeightPx: Double;
    procedure set_WeightPx(value: Double);
    function get_FormattingType: DNChartLineFormattingType;
    procedure set_FormattingType(value: DNChartLineFormattingType);
    function get_IsAutomaticColor: Boolean;
    function get_IsVisible: Boolean;
    procedure set_IsVisible(value: Boolean);
    function get_IsAuto: Boolean;
    procedure set_IsAuto(value: Boolean);
    function get_GradientFill: DNGradientFill;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property CompoundType: DNMsoLineStyle read get_CompoundType write set_CompoundType;
    property DashType: DNMsoLineDashStyle read get_DashType write set_DashType;
    property CapType: DNLineCapType read get_CapType write set_CapType;
    property JoinType: DNLineJoinType read get_JoinType write set_JoinType;
    property BeginType: DNMsoArrowheadStyle read get_BeginType write set_BeginType;
    property EndType: DNMsoArrowheadStyle read get_EndType write set_EndType;
    property BeginArrowLength: DNMsoArrowheadLength read get_BeginArrowLength write set_BeginArrowLength;
    property EndArrowLength: DNMsoArrowheadLength read get_EndArrowLength write set_EndArrowLength;
    property BeginArrowWidth: DNMsoArrowheadWidth read get_BeginArrowWidth write set_BeginArrowWidth;
    property EndArrowWidth: DNMsoArrowheadWidth read get_EndArrowWidth write set_EndArrowWidth;
    property ThemeColor: DNThemeColor read get_ThemeColor write set_ThemeColor;
    property Color: DDN.System.Drawing.DNColor read get_Color write set_Color;
    property Transparency: Double read get_Transparency write set_Transparency;
    property Style: DNLineType read get_Style write set_Style;
    property Weight: DNWeightType read get_Weight write set_Weight;
    property WeightPt: Double read get_WeightPt write set_WeightPt;
    property WeightPx: Double read get_WeightPx write set_WeightPx;
    property FormattingType: DNChartLineFormattingType read get_FormattingType write set_FormattingType;
    property IsAutomaticColor: Boolean read get_IsAutomaticColor;
    property IsVisible: Boolean read get_IsVisible write set_IsVisible;
    property IsAuto: Boolean read get_IsAuto write set_IsAuto;
    property GradientFill: DNGradientFill read get_GradientFill;
  end;

  TDNLine = class(TDNGenericImport<DNLineClass, DNLine>) end;

  //-------------namespace: Aspose.Cells.Charts----------------
  DNErrorBarClass = interface(DNLineClass)
  ['{584F45F6-119C-5F32-A454-D4F9AAD0AFF9}']
  end;

  [DNTypeName('Aspose.Cells.Charts.ErrorBar')]
  DNErrorBar = interface(DNLine)
  ['{90D6AE2C-F481-3300-A324-39B62A4298E6}']
  { getters & setters } 

    function get_Type: DNErrorBarType;
    procedure set_Type(value: DNErrorBarType);
    function get_DisplayType: DNErrorBarDisplayType;
    procedure set_DisplayType(value: DNErrorBarDisplayType);
    function get_Amount: Double;
    procedure set_Amount(value: Double);
    function get_ShowMarkerTTop: Boolean;
    procedure set_ShowMarkerTTop(value: Boolean);
    function get_PlusValue: string;
    procedure set_PlusValue(value: string);
    function get_MinusValue: string;
    procedure set_MinusValue(value: string);
    function get_CompoundType: DNMsoLineStyle;
    procedure set_CompoundType(value: DNMsoLineStyle);
    function get_DashType: DNMsoLineDashStyle;
    procedure set_DashType(value: DNMsoLineDashStyle);
    function get_CapType: DNLineCapType;
    procedure set_CapType(value: DNLineCapType);
    function get_JoinType: DNLineJoinType;
    procedure set_JoinType(value: DNLineJoinType);
    function get_BeginType: DNMsoArrowheadStyle;
    procedure set_BeginType(value: DNMsoArrowheadStyle);
    function get_EndType: DNMsoArrowheadStyle;
    procedure set_EndType(value: DNMsoArrowheadStyle);
    function get_BeginArrowLength: DNMsoArrowheadLength;
    procedure set_BeginArrowLength(value: DNMsoArrowheadLength);
    function get_EndArrowLength: DNMsoArrowheadLength;
    procedure set_EndArrowLength(value: DNMsoArrowheadLength);
    function get_BeginArrowWidth: DNMsoArrowheadWidth;
    procedure set_BeginArrowWidth(value: DNMsoArrowheadWidth);
    function get_EndArrowWidth: DNMsoArrowheadWidth;
    procedure set_EndArrowWidth(value: DNMsoArrowheadWidth);
    function get_ThemeColor: DNThemeColor;
    procedure set_ThemeColor(value: DNThemeColor);
    function get_Color: DDN.System.Drawing.DNColor;
    procedure set_Color(value: DDN.System.Drawing.DNColor);
    function get_Transparency: Double;
    procedure set_Transparency(value: Double);
    function get_Style: DNLineType;
    procedure set_Style(value: DNLineType);
    function get_Weight: DNWeightType;
    procedure set_Weight(value: DNWeightType);
    function get_WeightPt: Double;
    procedure set_WeightPt(value: Double);
    function get_WeightPx: Double;
    procedure set_WeightPx(value: Double);
    function get_FormattingType: DNChartLineFormattingType;
    procedure set_FormattingType(value: DNChartLineFormattingType);
    function get_IsAutomaticColor: Boolean;
    function get_IsVisible: Boolean;
    procedure set_IsVisible(value: Boolean);
    function get_IsAuto: Boolean;
    procedure set_IsAuto(value: Boolean);
    function get_GradientFill: DNGradientFill;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property &Type: DNErrorBarType read get_Type write set_Type;
    property DisplayType: DNErrorBarDisplayType read get_DisplayType write set_DisplayType;
    property Amount: Double read get_Amount write set_Amount;
    property ShowMarkerTTop: Boolean read get_ShowMarkerTTop write set_ShowMarkerTTop;
    property PlusValue: string read get_PlusValue write set_PlusValue;
    property MinusValue: string read get_MinusValue write set_MinusValue;
    property CompoundType: DNMsoLineStyle read get_CompoundType write set_CompoundType;
    property DashType: DNMsoLineDashStyle read get_DashType write set_DashType;
    property CapType: DNLineCapType read get_CapType write set_CapType;
    property JoinType: DNLineJoinType read get_JoinType write set_JoinType;
    property BeginType: DNMsoArrowheadStyle read get_BeginType write set_BeginType;
    property EndType: DNMsoArrowheadStyle read get_EndType write set_EndType;
    property BeginArrowLength: DNMsoArrowheadLength read get_BeginArrowLength write set_BeginArrowLength;
    property EndArrowLength: DNMsoArrowheadLength read get_EndArrowLength write set_EndArrowLength;
    property BeginArrowWidth: DNMsoArrowheadWidth read get_BeginArrowWidth write set_BeginArrowWidth;
    property EndArrowWidth: DNMsoArrowheadWidth read get_EndArrowWidth write set_EndArrowWidth;
    property ThemeColor: DNThemeColor read get_ThemeColor write set_ThemeColor;
    property Color: DDN.System.Drawing.DNColor read get_Color write set_Color;
    property Transparency: Double read get_Transparency write set_Transparency;
    property Style: DNLineType read get_Style write set_Style;
    property Weight: DNWeightType read get_Weight write set_Weight;
    property WeightPt: Double read get_WeightPt write set_WeightPt;
    property WeightPx: Double read get_WeightPx write set_WeightPx;
    property FormattingType: DNChartLineFormattingType read get_FormattingType write set_FormattingType;
    property IsAutomaticColor: Boolean read get_IsAutomaticColor;
    property IsVisible: Boolean read get_IsVisible write set_IsVisible;
    property IsAuto: Boolean read get_IsAuto write set_IsAuto;
    property GradientFill: DNGradientFill read get_GradientFill;
  end;

  TDNErrorBar = class(TDNGenericImport<DNErrorBarClass, DNErrorBar>) end;

  //-------------namespace: Aspose.Cells.Charts----------------
  DNTrendlineClass = interface(DNLineClass)
  ['{2DB99B77-71AC-5C7C-8D2F-04006F56C054}']
  end;

  [DNTypeName('Aspose.Cells.Charts.Trendline')]
  DNTrendline = interface(DNLine)
  ['{BAE1B3BA-51BD-3B02-8F23-3477B94253EF}']
  { getters & setters } 

    function get_IsNameAuto: Boolean;
    procedure set_IsNameAuto(value: Boolean);
    function get_Type: DNTrendlineType;
    function get_Name: string;
    procedure set_Name(value: string);
    function get_Order: Int32;
    procedure set_Order(value: Int32);
    function get_Period: Int32;
    procedure set_Period(value: Int32);
    function get_Forward: Double;
    procedure set_Forward(value: Double);
    function get_Backward: Double;
    procedure set_Backward(value: Double);
    function get_DisplayEquation: Boolean;
    procedure set_DisplayEquation(value: Boolean);
    function get_DisplayRSquared: Boolean;
    procedure set_DisplayRSquared(value: Boolean);
    function get_Intercept: Double;
    procedure set_Intercept(value: Double);
    function get_DataLabels: DNDataLabels;
    function get_LegendEntry: DNLegendEntry;
    function get_CompoundType: DNMsoLineStyle;
    procedure set_CompoundType(value: DNMsoLineStyle);
    function get_DashType: DNMsoLineDashStyle;
    procedure set_DashType(value: DNMsoLineDashStyle);
    function get_CapType: DNLineCapType;
    procedure set_CapType(value: DNLineCapType);
    function get_JoinType: DNLineJoinType;
    procedure set_JoinType(value: DNLineJoinType);
    function get_BeginType: DNMsoArrowheadStyle;
    procedure set_BeginType(value: DNMsoArrowheadStyle);
    function get_EndType: DNMsoArrowheadStyle;
    procedure set_EndType(value: DNMsoArrowheadStyle);
    function get_BeginArrowLength: DNMsoArrowheadLength;
    procedure set_BeginArrowLength(value: DNMsoArrowheadLength);
    function get_EndArrowLength: DNMsoArrowheadLength;
    procedure set_EndArrowLength(value: DNMsoArrowheadLength);
    function get_BeginArrowWidth: DNMsoArrowheadWidth;
    procedure set_BeginArrowWidth(value: DNMsoArrowheadWidth);
    function get_EndArrowWidth: DNMsoArrowheadWidth;
    procedure set_EndArrowWidth(value: DNMsoArrowheadWidth);
    function get_ThemeColor: DNThemeColor;
    procedure set_ThemeColor(value: DNThemeColor);
    function get_Color: DDN.System.Drawing.DNColor;
    procedure set_Color(value: DDN.System.Drawing.DNColor);
    function get_Transparency: Double;
    procedure set_Transparency(value: Double);
    function get_Style: DNLineType;
    procedure set_Style(value: DNLineType);
    function get_Weight: DNWeightType;
    procedure set_Weight(value: DNWeightType);
    function get_WeightPt: Double;
    procedure set_WeightPt(value: Double);
    function get_WeightPx: Double;
    procedure set_WeightPx(value: Double);
    function get_FormattingType: DNChartLineFormattingType;
    procedure set_FormattingType(value: DNChartLineFormattingType);
    function get_IsAutomaticColor: Boolean;
    function get_IsVisible: Boolean;
    procedure set_IsVisible(value: Boolean);
    function get_IsAuto: Boolean;
    procedure set_IsAuto(value: Boolean);
    function get_GradientFill: DNGradientFill;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property IsNameAuto: Boolean read get_IsNameAuto write set_IsNameAuto;
    property &Type: DNTrendlineType read get_Type;
    property Name: string read get_Name write set_Name;
    property Order: Int32 read get_Order write set_Order;
    property Period: Int32 read get_Period write set_Period;
    property &Forward: Double read get_Forward write set_Forward;
    property Backward: Double read get_Backward write set_Backward;
    property DisplayEquation: Boolean read get_DisplayEquation write set_DisplayEquation;
    property DisplayRSquared: Boolean read get_DisplayRSquared write set_DisplayRSquared;
    property Intercept: Double read get_Intercept write set_Intercept;
    property DataLabels: DNDataLabels read get_DataLabels;
    property LegendEntry: DNLegendEntry read get_LegendEntry;
    property CompoundType: DNMsoLineStyle read get_CompoundType write set_CompoundType;
    property DashType: DNMsoLineDashStyle read get_DashType write set_DashType;
    property CapType: DNLineCapType read get_CapType write set_CapType;
    property JoinType: DNLineJoinType read get_JoinType write set_JoinType;
    property BeginType: DNMsoArrowheadStyle read get_BeginType write set_BeginType;
    property EndType: DNMsoArrowheadStyle read get_EndType write set_EndType;
    property BeginArrowLength: DNMsoArrowheadLength read get_BeginArrowLength write set_BeginArrowLength;
    property EndArrowLength: DNMsoArrowheadLength read get_EndArrowLength write set_EndArrowLength;
    property BeginArrowWidth: DNMsoArrowheadWidth read get_BeginArrowWidth write set_BeginArrowWidth;
    property EndArrowWidth: DNMsoArrowheadWidth read get_EndArrowWidth write set_EndArrowWidth;
    property ThemeColor: DNThemeColor read get_ThemeColor write set_ThemeColor;
    property Color: DDN.System.Drawing.DNColor read get_Color write set_Color;
    property Transparency: Double read get_Transparency write set_Transparency;
    property Style: DNLineType read get_Style write set_Style;
    property Weight: DNWeightType read get_Weight write set_Weight;
    property WeightPt: Double read get_WeightPt write set_WeightPt;
    property WeightPx: Double read get_WeightPx write set_WeightPx;
    property FormattingType: DNChartLineFormattingType read get_FormattingType write set_FormattingType;
    property IsAutomaticColor: Boolean read get_IsAutomaticColor;
    property IsVisible: Boolean read get_IsVisible write set_IsVisible;
    property IsAuto: Boolean read get_IsAuto write set_IsAuto;
    property GradientFill: DNGradientFill read get_GradientFill;
  end;

  TDNTrendline = class(TDNGenericImport<DNTrendlineClass, DNTrendline>) end;

  //-------------namespace: Aspose.Cells.Drawing----------------
  DNMsoFillFormatClass = interface(DDN.mscorlib.DNObjectClass)
  ['{34C0F086-FEBA-502F-9767-A3C5ECDCF321}']
  end;

  [DNTypeName('Aspose.Cells.Drawing.MsoFillFormat')]
  DNMsoFillFormat = interface(DDN.mscorlib.DNObject)
  ['{227762E2-69FF-3FCA-86B9-1EFEF0E04A3F}']
  { getters & setters } 

    function get_ForeColor: DDN.System.Drawing.DNColor;
    procedure set_ForeColor(value: DDN.System.Drawing.DNColor);
    function get_Transparency: Double;
    procedure set_Transparency(value: Double);
    function get_BackColor: DDN.System.Drawing.DNColor;
    procedure set_BackColor(value: DDN.System.Drawing.DNColor);
    function get_ImageData: TArray<Byte>;
    procedure set_ImageData(value: TArray<Byte>);
    function get_Texture: DNTextureType;
    function get_IsVisible: Boolean;
    procedure set_IsVisible(value: Boolean);

  { methods } 

    procedure SetOneColorGradient(color: DDN.System.Drawing.DNColor; degree: Double; style: DNGradientStyleType; variant: Int32);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property ForeColor: DDN.System.Drawing.DNColor read get_ForeColor write set_ForeColor;
    property Transparency: Double read get_Transparency write set_Transparency;
    property BackColor: DDN.System.Drawing.DNColor read get_BackColor write set_BackColor;
    property ImageData: TArray<Byte> read get_ImageData write set_ImageData;
    property Texture: DNTextureType read get_Texture;
    property IsVisible: Boolean read get_IsVisible write set_IsVisible;
  end;

  TDNMsoFillFormat = class(TDNGenericImport<DNMsoFillFormatClass, DNMsoFillFormat>) end;

  //-------------namespace: Aspose.Cells.Drawing----------------
  DNMsoFillFormatHelperClass = interface(DDN.mscorlib.DNObjectClass)
  ['{BC803D10-6B18-5F8F-B605-5CA574BFE5D1}']
  end;

  [DNTypeName('Aspose.Cells.Drawing.MsoFillFormatHelper')]
  DNMsoFillFormatHelper = interface(DDN.mscorlib.DNObject)
  ['{973991F4-3F84-3271-9812-1528F67ADD4D}']
  { getters & setters } 

    function get_ForeColor: DDN.System.Drawing.DNColor;
    procedure set_ForeColor(value: DDN.System.Drawing.DNColor);
    function get_ForeColorTransparency: Double;
    procedure set_ForeColorTransparency(value: Double);
    function get_BackColor: DDN.System.Drawing.DNColor;
    procedure set_BackColor(value: DDN.System.Drawing.DNColor);
    function get_ImageData: TArray<Byte>;
    procedure set_ImageData(value: TArray<Byte>);
    function get_Texture: DNTextureType;
    function get_IsVisible: Boolean;
    procedure set_IsVisible(value: Boolean);

  { methods } 

    procedure SetOneColorGradient(color: DDN.System.Drawing.DNColor; degree: Double; style: DNGradientStyleType; variant: Int32);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property ForeColor: DDN.System.Drawing.DNColor read get_ForeColor write set_ForeColor;
    property ForeColorTransparency: Double read get_ForeColorTransparency write set_ForeColorTransparency;
    property BackColor: DDN.System.Drawing.DNColor read get_BackColor write set_BackColor;
    property ImageData: TArray<Byte> read get_ImageData write set_ImageData;
    property Texture: DNTextureType read get_Texture;
    property IsVisible: Boolean read get_IsVisible write set_IsVisible;
  end;

  TDNMsoFillFormatHelper = class(TDNGenericImport<DNMsoFillFormatHelperClass, DNMsoFillFormatHelper>) end;

  //-------------namespace: Aspose.Cells.Drawing----------------
  DNMsoFormatPictureClass = interface(DDN.mscorlib.DNObjectClass)
  ['{F360762C-3FC7-5C7C-85DB-164736F060F1}']
  end;

  [DNTypeName('Aspose.Cells.Drawing.MsoFormatPicture')]
  DNMsoFormatPicture = interface(DDN.mscorlib.DNObject)
  ['{4DE0950F-EB59-3A35-85D1-2259BB80CE59}']
  { getters & setters } 

    function get_TopCrop: Double;
    procedure set_TopCrop(value: Double);
    function get_BottomCrop: Double;
    procedure set_BottomCrop(value: Double);
    function get_LeftCrop: Double;
    procedure set_LeftCrop(value: Double);
    function get_RightCrop: Double;
    procedure set_RightCrop(value: Double);
    function get_TransparentColor: DNCellsColor;
    procedure set_TransparentColor(value: DNCellsColor);
    function get_Contrast: Double;
    procedure set_Contrast(value: Double);
    function get_Brightness: Double;
    procedure set_Brightness(value: Double);
    function get_Gamma: Double;
    procedure set_Gamma(value: Double);
    function get_IsBiLevel: Boolean;
    procedure set_IsBiLevel(value: Boolean);
    function get_IsGray: Boolean;
    procedure set_IsGray(value: Boolean);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property TopCrop: Double read get_TopCrop write set_TopCrop;
    property BottomCrop: Double read get_BottomCrop write set_BottomCrop;
    property LeftCrop: Double read get_LeftCrop write set_LeftCrop;
    property RightCrop: Double read get_RightCrop write set_RightCrop;
    property TransparentColor: DNCellsColor read get_TransparentColor write set_TransparentColor;
    property Contrast: Double read get_Contrast write set_Contrast;
    property Brightness: Double read get_Brightness write set_Brightness;
    property Gamma: Double read get_Gamma write set_Gamma;
    property IsBiLevel: Boolean read get_IsBiLevel write set_IsBiLevel;
    property IsGray: Boolean read get_IsGray write set_IsGray;
  end;

  TDNMsoFormatPicture = class(TDNGenericImport<DNMsoFormatPictureClass, DNMsoFormatPicture>) end;

  //-------------namespace: Aspose.Cells.Drawing----------------
  DNMsoLineFormatClass = interface(DDN.mscorlib.DNObjectClass)
  ['{0C2CC688-29E0-58F6-BD3D-29EEECE50C72}']
  end;

  [DNTypeName('Aspose.Cells.Drawing.MsoLineFormat')]
  DNMsoLineFormat = interface(DDN.mscorlib.DNObject)
  ['{68400AB0-8261-3DC1-A5AA-F8738A02D961}']
  { getters & setters } 

    function get_IsVisible: Boolean;
    procedure set_IsVisible(value: Boolean);
    function get_Style: DNMsoLineStyle;
    procedure set_Style(value: DNMsoLineStyle);
    function get_ForeColor: DDN.System.Drawing.DNColor;
    procedure set_ForeColor(value: DDN.System.Drawing.DNColor);
    function get_BackColor: DDN.System.Drawing.DNColor;
    procedure set_BackColor(value: DDN.System.Drawing.DNColor);
    function get_DashStyle: DNMsoLineDashStyle;
    procedure set_DashStyle(value: DNMsoLineDashStyle);
    function get_Transparency: Double;
    procedure set_Transparency(value: Double);
    function get_Weight: Double;
    procedure set_Weight(value: Double);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property IsVisible: Boolean read get_IsVisible write set_IsVisible;
    property Style: DNMsoLineStyle read get_Style write set_Style;
    property ForeColor: DDN.System.Drawing.DNColor read get_ForeColor write set_ForeColor;
    property BackColor: DDN.System.Drawing.DNColor read get_BackColor write set_BackColor;
    property DashStyle: DNMsoLineDashStyle read get_DashStyle write set_DashStyle;
    property Transparency: Double read get_Transparency write set_Transparency;
    property Weight: Double read get_Weight write set_Weight;
  end;

  TDNMsoLineFormat = class(TDNGenericImport<DNMsoLineFormatClass, DNMsoLineFormat>) end;

  //-------------namespace: Aspose.Cells.Drawing----------------
  DNMsoLineFormatHelperClass = interface(DDN.mscorlib.DNObjectClass)
  ['{280D6FDA-3F58-5EE1-90B6-64B21A95A189}']
  end;

  [DNTypeName('Aspose.Cells.Drawing.MsoLineFormatHelper')]
  DNMsoLineFormatHelper = interface(DDN.mscorlib.DNObject)
  ['{213F8F76-0096-3388-8100-B123FDE75632}']
  { getters & setters } 

    function get_IsVisible: Boolean;
    procedure set_IsVisible(value: Boolean);
    function get_Style: DNMsoLineStyle;
    procedure set_Style(value: DNMsoLineStyle);
    function get_ForeColor: DDN.System.Drawing.DNColor;
    procedure set_ForeColor(value: DDN.System.Drawing.DNColor);
    function get_BackColor: DDN.System.Drawing.DNColor;
    procedure set_BackColor(value: DDN.System.Drawing.DNColor);
    function get_DashStyle: DNMsoLineDashStyle;
    procedure set_DashStyle(value: DNMsoLineDashStyle);
    function get_Transparency: Double;
    procedure set_Transparency(value: Double);
    function get_Weight: Double;
    procedure set_Weight(value: Double);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property IsVisible: Boolean read get_IsVisible write set_IsVisible;
    property Style: DNMsoLineStyle read get_Style write set_Style;
    property ForeColor: DDN.System.Drawing.DNColor read get_ForeColor write set_ForeColor;
    property BackColor: DDN.System.Drawing.DNColor read get_BackColor write set_BackColor;
    property DashStyle: DNMsoLineDashStyle read get_DashStyle write set_DashStyle;
    property Transparency: Double read get_Transparency write set_Transparency;
    property Weight: Double read get_Weight write set_Weight;
  end;

  TDNMsoLineFormatHelper = class(TDNGenericImport<DNMsoLineFormatHelperClass, DNMsoLineFormatHelper>) end;

  //-------------namespace: Aspose.Cells.Drawing----------------
  DNMsoTextFrameClass = interface(DDN.mscorlib.DNObjectClass)
  ['{8149E910-427F-5166-93FE-2A10900593B5}']
  end;

  [DNTypeName('Aspose.Cells.Drawing.MsoTextFrame')]
  DNMsoTextFrame = interface(DDN.mscorlib.DNObject)
  ['{A6050AF8-95F2-39BB-8162-735D3562F4D5}']
  { getters & setters } 

    function get_AutoSize: Boolean;
    procedure set_AutoSize(value: Boolean);
    function get_IsAutoMargin: Boolean;
    procedure set_IsAutoMargin(value: Boolean);
    function get_RotateTextWithShape: Boolean;
    procedure set_RotateTextWithShape(value: Boolean);
    function get_LeftMarginPt: Double;
    procedure set_LeftMarginPt(value: Double);
    function get_RightMarginPt: Double;
    procedure set_RightMarginPt(value: Double);
    function get_TopMarginPt: Double;
    procedure set_TopMarginPt(value: Double);
    function get_BottomMarginPt: Double;
    procedure set_BottomMarginPt(value: Double);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property AutoSize: Boolean read get_AutoSize write set_AutoSize;
    property IsAutoMargin: Boolean read get_IsAutoMargin write set_IsAutoMargin;
    property RotateTextWithShape: Boolean read get_RotateTextWithShape write set_RotateTextWithShape;
    property LeftMarginPt: Double read get_LeftMarginPt write set_LeftMarginPt;
    property RightMarginPt: Double read get_RightMarginPt write set_RightMarginPt;
    property TopMarginPt: Double read get_TopMarginPt write set_TopMarginPt;
    property BottomMarginPt: Double read get_BottomMarginPt write set_BottomMarginPt;
  end;

  TDNMsoTextFrame = class(TDNGenericImport<DNMsoTextFrameClass, DNMsoTextFrame>) end;

  //-------------namespace: Aspose.Cells.Drawing----------------
  DNPicFormatOptionClass = interface(DDN.mscorlib.DNObjectClass)
  ['{AAAE90AE-CF95-5C59-8F4D-6391122741E8}']
  { constructors } 

    {class} function init: DNPicFormatOption;

  end;

  [DNTypeName('Aspose.Cells.Drawing.PicFormatOption')]
  DNPicFormatOption = interface(DDN.mscorlib.DNObject)
  ['{EF57FCB7-4525-3B5A-BA53-E8E57577EE34}']
  { getters & setters } 

    function get_Type: DNFillPictureType;
    procedure set_Type(value: DNFillPictureType);
    function get_Scale: Double;
    procedure set_Scale(value: Double);
    function get_Left: Double;
    procedure set_Left(value: Double);
    function get_Top: Double;
    procedure set_Top(value: Double);
    function get_Bottom: Double;
    procedure set_Bottom(value: Double);
    function get_Right: Double;
    procedure set_Right(value: Double);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property &Type: DNFillPictureType read get_Type write set_Type;
    property Scale: Double read get_Scale write set_Scale;
    property Left: Double read get_Left write set_Left;
    property Top: Double read get_Top write set_Top;
    property Bottom: Double read get_Bottom write set_Bottom;
    property Right: Double read get_Right write set_Right;
  end;

  TDNPicFormatOption = class(TDNGenericImport<DNPicFormatOptionClass, DNPicFormatOption>) end;

  //-------------namespace: Aspose.Cells.Drawing----------------
  DNReflectionEffectClass = interface(DDN.mscorlib.DNObjectClass)
  ['{F033965E-AC3E-5FF7-81D8-792F57B34FB3}']
  end;

  [DNTypeName('Aspose.Cells.Drawing.ReflectionEffect')]
  DNReflectionEffect = interface(DDN.mscorlib.DNObject)
  ['{344BC1BD-E453-370D-94EF-8309C19150A7}']
  { getters & setters } 

    function get_Type: DNReflectionEffectType;
    procedure set_Type(value: DNReflectionEffectType);
    function get_Transparency: Double;
    procedure set_Transparency(value: Double);
    function get_Size: Double;
    procedure set_Size(value: Double);
    function get_Blur: Double;
    procedure set_Blur(value: Double);
    function get_Direction: Double;
    procedure set_Direction(value: Double);
    function get_Distance: Double;
    procedure set_Distance(value: Double);
    function get_FadeDirection: Double;
    procedure set_FadeDirection(value: Double);
    function get_RotWithShape: Boolean;
    procedure set_RotWithShape(value: Boolean);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property &Type: DNReflectionEffectType read get_Type write set_Type;
    property Transparency: Double read get_Transparency write set_Transparency;
    property Size: Double read get_Size write set_Size;
    property Blur: Double read get_Blur write set_Blur;
    property Direction: Double read get_Direction write set_Direction;
    property Distance: Double read get_Distance write set_Distance;
    property FadeDirection: Double read get_FadeDirection write set_FadeDirection;
    property RotWithShape: Boolean read get_RotWithShape write set_RotWithShape;
  end;

  TDNReflectionEffect = class(TDNGenericImport<DNReflectionEffectClass, DNReflectionEffect>) end;

  //-------------namespace: Aspose.Cells.Drawing----------------
  DNShadowEffectClass = interface(DDN.mscorlib.DNObjectClass)
  ['{ED7C1250-8254-54A7-9C03-6C099CF3A01B}']
  end;

  [DNTypeName('Aspose.Cells.Drawing.ShadowEffect')]
  DNShadowEffect = interface(DDN.mscorlib.DNObject)
  ['{2DAA33E5-4F54-315A-9A2B-A9FB3D42B44E}']
  { getters & setters } 

    function get_PresetType: DNPresetShadowType;
    procedure set_PresetType(value: DNPresetShadowType);
    function get_Color: DNCellsColor;
    procedure set_Color(value: DNCellsColor);
    function get_Transparency: Double;
    procedure set_Transparency(value: Double);
    function get_Size: Double;
    procedure set_Size(value: Double);
    function get_Blur: Double;
    procedure set_Blur(value: Double);
    function get_Angle: Double;
    procedure set_Angle(value: Double);
    function get_Distance: Double;
    procedure set_Distance(value: Double);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property PresetType: DNPresetShadowType read get_PresetType write set_PresetType;
    property Color: DNCellsColor read get_Color write set_Color;
    property Transparency: Double read get_Transparency write set_Transparency;
    property Size: Double read get_Size write set_Size;
    property Blur: Double read get_Blur write set_Blur;
    property Angle: Double read get_Angle write set_Angle;
    property Distance: Double read get_Distance write set_Distance;
  end;

  TDNShadowEffect = class(TDNGenericImport<DNShadowEffectClass, DNShadowEffect>) end;

  //-------------namespace: Aspose.Cells.Drawing----------------
  DNShapeClass = interface(DDN.mscorlib.DNObjectClass)
  ['{4334E44B-CEC2-5260-9E4F-8757A9D5AC95}']
  end;

  [DNTypeName('Aspose.Cells.Drawing.Shape')]
  DNShape = interface(DDN.mscorlib.DNObject)
  ['{D3E35918-E9AF-3E47-ADC7-3967C1F76C96}']
  { getters & setters } 

    function get_MacroName: string;
    procedure set_MacroName(value: string);
    function get_IsEquation: Boolean;
    function get_IsSmartArt: Boolean;
    function get_ZOrderPosition: Int32;
    procedure set_ZOrderPosition(value: Int32);
    function get_Name: string;
    procedure set_Name(value: string);
    function get_AlternativeText: string;
    procedure set_AlternativeText(value: string);
    function get_Title: string;
    procedure set_Title(value: string);
    function get_LineFormat: DNMsoLineFormat;
    function get_FillFormat: DNMsoFillFormat;
    function get_Format: DNShapeFormat;
    function get_Line: DNLineFormat;
    function get_Fill: DNFillFormat;
    function get_ShadowEffect: DNShadowEffect;
    function get_Reflection: DNReflectionEffect;
    function get_Glow: DNGlowEffect;
    function get_SoftEdges: Double;
    procedure set_SoftEdges(value: Double);
    function get_ThreeDFormat: DNThreeDFormat;
    function get_TextFrame: DNMsoTextFrame;
    function get_FormatPicture: DNMsoFormatPicture;
    function get_IsHidden: Boolean;
    procedure set_IsHidden(value: Boolean);
    function get_IsLockAspectRatio: Boolean;
    procedure set_IsLockAspectRatio(value: Boolean);
    function get_RotationAngle: Double;
    procedure set_RotationAngle(value: Double);
    function get_Hyperlink: DNHyperlink;
    function get_Id: Int32;
    function get_Spid: string;
    function get_Spt: Int32;
    function get_Worksheet: DNWorksheet;
    function get_IsGroup: Boolean;
    function get_IsWordArt: Boolean;
    function get_TextEffect: DNTextEffectFormat;
    function get_IsLocked: Boolean;
    procedure set_IsLocked(value: Boolean);
    function get_IsPrintable: Boolean;
    procedure set_IsPrintable(value: Boolean);
    function get_MsoDrawingType: DNMsoDrawingType;
    function get_AutoShapeType: DNAutoShapeType;
    procedure set_AutoShapeType(value: DNAutoShapeType);
    function get_AnchorType: DNShapeAnchorType;
    procedure set_AnchorType(value: DNShapeAnchorType);
    function get_Placement: DNPlacementType;
    procedure set_Placement(value: DNPlacementType);
    function get_UpperLeftRow: Int32;
    procedure set_UpperLeftRow(value: Int32);
    function get_UpperDeltaY: Int32;
    procedure set_UpperDeltaY(value: Int32);
    function get_UpperLeftColumn: Int32;
    procedure set_UpperLeftColumn(value: Int32);
    function get_UpperDeltaX: Int32;
    procedure set_UpperDeltaX(value: Int32);
    function get_LowerRightRow: Int32;
    procedure set_LowerRightRow(value: Int32);
    function get_LowerDeltaY: Int32;
    procedure set_LowerDeltaY(value: Int32);
    function get_LowerRightColumn: Int32;
    procedure set_LowerRightColumn(value: Int32);
    function get_LowerDeltaX: Int32;
    procedure set_LowerDeltaX(value: Int32);
    function get_Right: Int32;
    procedure set_Right(value: Int32);
    function get_Bottom: Int32;
    procedure set_Bottom(value: Int32);
    function get_Width: Int32;
    procedure set_Width(value: Int32);
    function get_WidthInch: Double;
    procedure set_WidthInch(value: Double);
    function get_WidthPt: Double;
    procedure set_WidthPt(value: Double);
    function get_WidthCM: Double;
    procedure set_WidthCM(value: Double);
    function get_Height: Int32;
    procedure set_Height(value: Int32);
    function get_HeightInch: Double;
    procedure set_HeightInch(value: Double);
    function get_HeightPt: Double;
    procedure set_HeightPt(value: Double);
    function get_HeightCM: Double;
    procedure set_HeightCM(value: Double);
    function get_Left: Int32;
    procedure set_Left(value: Int32);
    function get_LeftInch: Double;
    procedure set_LeftInch(value: Double);
    function get_LeftCM: Double;
    procedure set_LeftCM(value: Double);
    function get_Top: Int32;
    procedure set_Top(value: Int32);
    function get_TopInch: Double;
    procedure set_TopInch(value: Double);
    function get_TopCM: Double;
    procedure set_TopCM(value: Double);
    function get_TopToCorner: Int32;
    procedure set_TopToCorner(value: Int32);
    function get_LeftToCorner: Int32;
    procedure set_LeftToCorner(value: Int32);
    function get_X: Int32;
    procedure set_X(value: Int32);
    function get_Y: Int32;
    procedure set_Y(value: Int32);
    function get_WidthScale: Int32;
    procedure set_WidthScale(value: Int32);
    function get_HeightScale: Int32;
    procedure set_HeightScale(value: Int32);
    function get_TopInShape: Int32;
    procedure set_TopInShape(value: Int32);
    function get_LeftInShape: Int32;
    procedure set_LeftInShape(value: Int32);
    function get_WidthInShape: Int32;
    procedure set_WidthInShape(value: Int32);
    function get_HeightInShape: Int32;
    procedure set_HeightInShape(value: Int32);
    function get_Group: DNGroupShape;
    function get_Type: DNAutoShapeType;
    function get_HasLine: Boolean;
    procedure set_HasLine(value: Boolean);
    function get_IsFilled: Boolean;
    procedure set_IsFilled(value: Boolean);
    function get_IsFlippedHorizontally: Boolean;
    procedure set_IsFlippedHorizontally(value: Boolean);
    function get_IsFlippedVertically: Boolean;
    procedure set_IsFlippedVertically(value: Boolean);
    function get_ActualLowerRightRow: Int32;
    function get_ConnectionPoints: TArray<DDN.System.Drawing.DNPointF>;
    function get_RelativeToOriginalPictureSize: Boolean;
    procedure set_RelativeToOriginalPictureSize(value: Boolean);
    function get_LinkedCell: string;
    procedure set_LinkedCell(value: string);
    function get_InputRange: string;
    procedure set_InputRange(value: string);
    function get_TextShapeType: DNAutoShapeType;
    procedure set_TextShapeType(value: DNAutoShapeType);
    function get_TextBody: DNFontSettingCollection;
    function get_Font: DNFont;
    procedure set_Font(value: DNFont);
    function get_TextOptions: DNTextOptions;
    procedure set_TextOptions(value: DNTextOptions);
    function get_Text: string;
    procedure set_Text(value: string);
    function get_IsRichText: Boolean;
    function get_HtmlText: string;
    procedure set_HtmlText(value: string);
    function get_TextVerticalOverflow: DNTextOverflowType;
    procedure set_TextVerticalOverflow(value: DNTextOverflowType);
    function get_TextHorizontalOverflow: DNTextOverflowType;
    procedure set_TextHorizontalOverflow(value: DNTextOverflowType);
    function get_IsTextWrapped: Boolean;
    procedure set_IsTextWrapped(value: Boolean);
    function get_TextOrientationType: DNTextOrientationType;
    procedure set_TextOrientationType(value: DNTextOrientationType);
    function get_TextHorizontalAlignment: DNTextAlignmentType;
    procedure set_TextHorizontalAlignment(value: DNTextAlignmentType);
    function get_TextVerticalAlignment: DNTextAlignmentType;
    procedure set_TextVerticalAlignment(value: DNTextAlignmentType);
    function get_TextDirection: DNTextDirectionType;
    procedure set_TextDirection(value: DNTextDirectionType);
    function get_ControlData: TArray<Byte>;
    function get_ActiveXControl: DNActiveXControl;
    function get_Paths: DNShapePathCollection;
    function get_Geometry: DNGeometry;

  { methods } 

    function CalculateTextSize: TArray<Int32>;
    procedure FormatCharacters(startIndex: Int32; length: Int32; font: DNFont; flag: DNStyleFlag); overload;
    procedure FormatCharacters(startIndex: Int32; length: Int32; font: DNFont); overload;
    function Characters(startIndex: Int32; length: Int32): DNFontSetting;
    function GetCharacters: DDN.mscorlib.DNArrayList;
    procedure RemoveActiveXControl;
    procedure ToImage(stream: DDN.mscorlib.DNStream; imageFormat: DDN.System.Drawing.DNImageFormat); overload;
    procedure ToImage(imageFile: string; options: DNImageOrPrintOptions); overload;
    procedure ToImage(stream: DDN.mscorlib.DNStream; options: DNImageOrPrintOptions); overload;
    function ToImage(options: DNImageOrPrintOptions): DDN.System.Drawing.DNBitmap; overload;
    function GetLinkedCell(isR1C1: Boolean; isLocal: Boolean): string;
    procedure SetLinkedCell(formula: string; isR1C1: Boolean; isLocal: Boolean);
    function GetInputRange(isR1C1: Boolean; isLocal: Boolean): string;
    procedure SetInputRange(formula: string; isR1C1: Boolean; isLocal: Boolean);
    procedure UpdateSelectedValue;
    function GetResultOfSmartArt: DNGroupShape;
    procedure ToFrontOrBack(orders: Int32);
    function GetLockedProperty(&type: DNShapeLockType): Boolean;
    procedure SetLockedProperty(&type: DNShapeLockType; value: Boolean);
    function AddHyperlink(address: string): DNHyperlink;
    procedure RemoveHyperlink;
    procedure MoveToRange(upperLeftRow: Int32; upperLeftColumn: Int32; lowerRightRow: Int32; lowerRightColumn: Int32);
    procedure AlignTopRightCorner(topRow: Int32; rightColumn: Int32);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property MacroName: string read get_MacroName write set_MacroName;
    property IsEquation: Boolean read get_IsEquation;
    property IsSmartArt: Boolean read get_IsSmartArt;
    property ZOrderPosition: Int32 read get_ZOrderPosition write set_ZOrderPosition;
    property Name: string read get_Name write set_Name;
    property AlternativeText: string read get_AlternativeText write set_AlternativeText;
    property Title: string read get_Title write set_Title;
    property LineFormat: DNMsoLineFormat read get_LineFormat;
    property FillFormat: DNMsoFillFormat read get_FillFormat;
    property Format: DNShapeFormat read get_Format;
    property Line: DNLineFormat read get_Line;
    property Fill: DNFillFormat read get_Fill;
    property ShadowEffect: DNShadowEffect read get_ShadowEffect;
    property Reflection: DNReflectionEffect read get_Reflection;
    property Glow: DNGlowEffect read get_Glow;
    property SoftEdges: Double read get_SoftEdges write set_SoftEdges;
    property ThreeDFormat: DNThreeDFormat read get_ThreeDFormat;
    property TextFrame: DNMsoTextFrame read get_TextFrame;
    property FormatPicture: DNMsoFormatPicture read get_FormatPicture;
    property IsHidden: Boolean read get_IsHidden write set_IsHidden;
    property IsLockAspectRatio: Boolean read get_IsLockAspectRatio write set_IsLockAspectRatio;
    property RotationAngle: Double read get_RotationAngle write set_RotationAngle;
    property Hyperlink: DNHyperlink read get_Hyperlink;
    property Id: Int32 read get_Id;
    property Spid: string read get_Spid;
    property Spt: Int32 read get_Spt;
    property Worksheet: DNWorksheet read get_Worksheet;
    property IsGroup: Boolean read get_IsGroup;
    property IsWordArt: Boolean read get_IsWordArt;
    property TextEffect: DNTextEffectFormat read get_TextEffect;
    property IsLocked: Boolean read get_IsLocked write set_IsLocked;
    property IsPrintable: Boolean read get_IsPrintable write set_IsPrintable;
    property MsoDrawingType: DNMsoDrawingType read get_MsoDrawingType;
    property AutoShapeType: DNAutoShapeType read get_AutoShapeType write set_AutoShapeType;
    property AnchorType: DNShapeAnchorType read get_AnchorType write set_AnchorType;
    property Placement: DNPlacementType read get_Placement write set_Placement;
    property UpperLeftRow: Int32 read get_UpperLeftRow write set_UpperLeftRow;
    property UpperDeltaY: Int32 read get_UpperDeltaY write set_UpperDeltaY;
    property UpperLeftColumn: Int32 read get_UpperLeftColumn write set_UpperLeftColumn;
    property UpperDeltaX: Int32 read get_UpperDeltaX write set_UpperDeltaX;
    property LowerRightRow: Int32 read get_LowerRightRow write set_LowerRightRow;
    property LowerDeltaY: Int32 read get_LowerDeltaY write set_LowerDeltaY;
    property LowerRightColumn: Int32 read get_LowerRightColumn write set_LowerRightColumn;
    property LowerDeltaX: Int32 read get_LowerDeltaX write set_LowerDeltaX;
    property Right: Int32 read get_Right write set_Right;
    property Bottom: Int32 read get_Bottom write set_Bottom;
    property Width: Int32 read get_Width write set_Width;
    property WidthInch: Double read get_WidthInch write set_WidthInch;
    property WidthPt: Double read get_WidthPt write set_WidthPt;
    property WidthCM: Double read get_WidthCM write set_WidthCM;
    property Height: Int32 read get_Height write set_Height;
    property HeightInch: Double read get_HeightInch write set_HeightInch;
    property HeightPt: Double read get_HeightPt write set_HeightPt;
    property HeightCM: Double read get_HeightCM write set_HeightCM;
    property Left: Int32 read get_Left write set_Left;
    property LeftInch: Double read get_LeftInch write set_LeftInch;
    property LeftCM: Double read get_LeftCM write set_LeftCM;
    property Top: Int32 read get_Top write set_Top;
    property TopInch: Double read get_TopInch write set_TopInch;
    property TopCM: Double read get_TopCM write set_TopCM;
    property TopToCorner: Int32 read get_TopToCorner write set_TopToCorner;
    property LeftToCorner: Int32 read get_LeftToCorner write set_LeftToCorner;
    property X: Int32 read get_X write set_X;
    property Y: Int32 read get_Y write set_Y;
    property WidthScale: Int32 read get_WidthScale write set_WidthScale;
    property HeightScale: Int32 read get_HeightScale write set_HeightScale;
    property TopInShape: Int32 read get_TopInShape write set_TopInShape;
    property LeftInShape: Int32 read get_LeftInShape write set_LeftInShape;
    property WidthInShape: Int32 read get_WidthInShape write set_WidthInShape;
    property HeightInShape: Int32 read get_HeightInShape write set_HeightInShape;
    property Group: DNGroupShape read get_Group;
    property &Type: DNAutoShapeType read get_Type;
    property HasLine: Boolean read get_HasLine write set_HasLine;
    property IsFilled: Boolean read get_IsFilled write set_IsFilled;
    property IsFlippedHorizontally: Boolean read get_IsFlippedHorizontally write set_IsFlippedHorizontally;
    property IsFlippedVertically: Boolean read get_IsFlippedVertically write set_IsFlippedVertically;
    property ActualLowerRightRow: Int32 read get_ActualLowerRightRow;
    property ConnectionPoints: TArray<DDN.System.Drawing.DNPointF> read get_ConnectionPoints;
    property RelativeToOriginalPictureSize: Boolean read get_RelativeToOriginalPictureSize write set_RelativeToOriginalPictureSize;
    property LinkedCell: string read get_LinkedCell write set_LinkedCell;
    property InputRange: string read get_InputRange write set_InputRange;
    property TextShapeType: DNAutoShapeType read get_TextShapeType write set_TextShapeType;
    property TextBody: DNFontSettingCollection read get_TextBody;
    property Font: DNFont read get_Font write set_Font;
    property TextOptions: DNTextOptions read get_TextOptions write set_TextOptions;
    property Text: string read get_Text write set_Text;
    property IsRichText: Boolean read get_IsRichText;
    property HtmlText: string read get_HtmlText write set_HtmlText;
    property TextVerticalOverflow: DNTextOverflowType read get_TextVerticalOverflow write set_TextVerticalOverflow;
    property TextHorizontalOverflow: DNTextOverflowType read get_TextHorizontalOverflow write set_TextHorizontalOverflow;
    property IsTextWrapped: Boolean read get_IsTextWrapped write set_IsTextWrapped;
    property TextOrientationType: DNTextOrientationType read get_TextOrientationType write set_TextOrientationType;
    property TextHorizontalAlignment: DNTextAlignmentType read get_TextHorizontalAlignment write set_TextHorizontalAlignment;
    property TextVerticalAlignment: DNTextAlignmentType read get_TextVerticalAlignment write set_TextVerticalAlignment;
    property TextDirection: DNTextDirectionType read get_TextDirection write set_TextDirection;
    property ControlData: TArray<Byte> read get_ControlData;
    property ActiveXControl: DNActiveXControl read get_ActiveXControl;
    property Paths: DNShapePathCollection read get_Paths;
    property Geometry: DNGeometry read get_Geometry;
  end;

  TDNShape = class(TDNGenericImport<DNShapeClass, DNShape>) end;

  //-------------namespace: Aspose.Cells.Drawing----------------
  DNArcShapeClass = interface(DNShapeClass)
  ['{DE13EF9B-E6DD-5021-9283-C5BFE61F161E}']
  end;

  [DNTypeName('Aspose.Cells.Drawing.ArcShape')]
  DNArcShape = interface(DNShape)
  ['{F6C3DF28-8442-3CB8-A026-C06A679647D1}']
  { getters & setters } 

    function get_BeginArrowheadStyle: DNMsoArrowheadStyle;
    procedure set_BeginArrowheadStyle(value: DNMsoArrowheadStyle);
    function get_BeginArrowheadWidth: DNMsoArrowheadWidth;
    procedure set_BeginArrowheadWidth(value: DNMsoArrowheadWidth);
    function get_BeginArrowheadLength: DNMsoArrowheadLength;
    procedure set_BeginArrowheadLength(value: DNMsoArrowheadLength);
    function get_EndArrowheadStyle: DNMsoArrowheadStyle;
    procedure set_EndArrowheadStyle(value: DNMsoArrowheadStyle);
    function get_EndArrowheadWidth: DNMsoArrowheadWidth;
    procedure set_EndArrowheadWidth(value: DNMsoArrowheadWidth);
    function get_EndArrowheadLength: DNMsoArrowheadLength;
    procedure set_EndArrowheadLength(value: DNMsoArrowheadLength);
    function get_MacroName: string;
    procedure set_MacroName(value: string);
    function get_IsEquation: Boolean;
    function get_IsSmartArt: Boolean;
    function get_ZOrderPosition: Int32;
    procedure set_ZOrderPosition(value: Int32);
    function get_Name: string;
    procedure set_Name(value: string);
    function get_AlternativeText: string;
    procedure set_AlternativeText(value: string);
    function get_Title: string;
    procedure set_Title(value: string);
    function get_LineFormat: DNMsoLineFormat;
    function get_FillFormat: DNMsoFillFormat;
    function get_Format: DNShapeFormat;
    function get_Line: DNLineFormat;
    function get_Fill: DNFillFormat;
    function get_ShadowEffect: DNShadowEffect;
    function get_Reflection: DNReflectionEffect;
    function get_Glow: DNGlowEffect;
    function get_SoftEdges: Double;
    procedure set_SoftEdges(value: Double);
    function get_ThreeDFormat: DNThreeDFormat;
    function get_TextFrame: DNMsoTextFrame;
    function get_FormatPicture: DNMsoFormatPicture;
    function get_IsHidden: Boolean;
    procedure set_IsHidden(value: Boolean);
    function get_IsLockAspectRatio: Boolean;
    procedure set_IsLockAspectRatio(value: Boolean);
    function get_RotationAngle: Double;
    procedure set_RotationAngle(value: Double);
    function get_Hyperlink: DNHyperlink;
    function get_Id: Int32;
    function get_Spid: string;
    function get_Spt: Int32;
    function get_Worksheet: DNWorksheet;
    function get_IsGroup: Boolean;
    function get_IsWordArt: Boolean;
    function get_TextEffect: DNTextEffectFormat;
    function get_IsLocked: Boolean;
    procedure set_IsLocked(value: Boolean);
    function get_IsPrintable: Boolean;
    procedure set_IsPrintable(value: Boolean);
    function get_MsoDrawingType: DNMsoDrawingType;
    function get_AutoShapeType: DNAutoShapeType;
    procedure set_AutoShapeType(value: DNAutoShapeType);
    function get_AnchorType: DNShapeAnchorType;
    procedure set_AnchorType(value: DNShapeAnchorType);
    function get_Placement: DNPlacementType;
    procedure set_Placement(value: DNPlacementType);
    function get_UpperLeftRow: Int32;
    procedure set_UpperLeftRow(value: Int32);
    function get_UpperDeltaY: Int32;
    procedure set_UpperDeltaY(value: Int32);
    function get_UpperLeftColumn: Int32;
    procedure set_UpperLeftColumn(value: Int32);
    function get_UpperDeltaX: Int32;
    procedure set_UpperDeltaX(value: Int32);
    function get_LowerRightRow: Int32;
    procedure set_LowerRightRow(value: Int32);
    function get_LowerDeltaY: Int32;
    procedure set_LowerDeltaY(value: Int32);
    function get_LowerRightColumn: Int32;
    procedure set_LowerRightColumn(value: Int32);
    function get_LowerDeltaX: Int32;
    procedure set_LowerDeltaX(value: Int32);
    function get_Right: Int32;
    procedure set_Right(value: Int32);
    function get_Bottom: Int32;
    procedure set_Bottom(value: Int32);
    function get_Width: Int32;
    procedure set_Width(value: Int32);
    function get_WidthInch: Double;
    procedure set_WidthInch(value: Double);
    function get_WidthPt: Double;
    procedure set_WidthPt(value: Double);
    function get_WidthCM: Double;
    procedure set_WidthCM(value: Double);
    function get_Height: Int32;
    procedure set_Height(value: Int32);
    function get_HeightInch: Double;
    procedure set_HeightInch(value: Double);
    function get_HeightPt: Double;
    procedure set_HeightPt(value: Double);
    function get_HeightCM: Double;
    procedure set_HeightCM(value: Double);
    function get_Left: Int32;
    procedure set_Left(value: Int32);
    function get_LeftInch: Double;
    procedure set_LeftInch(value: Double);
    function get_LeftCM: Double;
    procedure set_LeftCM(value: Double);
    function get_Top: Int32;
    procedure set_Top(value: Int32);
    function get_TopInch: Double;
    procedure set_TopInch(value: Double);
    function get_TopCM: Double;
    procedure set_TopCM(value: Double);
    function get_TopToCorner: Int32;
    procedure set_TopToCorner(value: Int32);
    function get_LeftToCorner: Int32;
    procedure set_LeftToCorner(value: Int32);
    function get_X: Int32;
    procedure set_X(value: Int32);
    function get_Y: Int32;
    procedure set_Y(value: Int32);
    function get_WidthScale: Int32;
    procedure set_WidthScale(value: Int32);
    function get_HeightScale: Int32;
    procedure set_HeightScale(value: Int32);
    function get_TopInShape: Int32;
    procedure set_TopInShape(value: Int32);
    function get_LeftInShape: Int32;
    procedure set_LeftInShape(value: Int32);
    function get_WidthInShape: Int32;
    procedure set_WidthInShape(value: Int32);
    function get_HeightInShape: Int32;
    procedure set_HeightInShape(value: Int32);
    function get_Group: DNGroupShape;
    function get_Type: DNAutoShapeType;
    function get_HasLine: Boolean;
    procedure set_HasLine(value: Boolean);
    function get_IsFilled: Boolean;
    procedure set_IsFilled(value: Boolean);
    function get_IsFlippedHorizontally: Boolean;
    procedure set_IsFlippedHorizontally(value: Boolean);
    function get_IsFlippedVertically: Boolean;
    procedure set_IsFlippedVertically(value: Boolean);
    function get_ActualLowerRightRow: Int32;
    function get_ConnectionPoints: TArray<DDN.System.Drawing.DNPointF>;
    function get_RelativeToOriginalPictureSize: Boolean;
    procedure set_RelativeToOriginalPictureSize(value: Boolean);
    function get_LinkedCell: string;
    procedure set_LinkedCell(value: string);
    function get_InputRange: string;
    procedure set_InputRange(value: string);
    function get_TextShapeType: DNAutoShapeType;
    procedure set_TextShapeType(value: DNAutoShapeType);
    function get_TextBody: DNFontSettingCollection;
    function get_Font: DNFont;
    procedure set_Font(value: DNFont);
    function get_TextOptions: DNTextOptions;
    procedure set_TextOptions(value: DNTextOptions);
    function get_Text: string;
    procedure set_Text(value: string);
    function get_IsRichText: Boolean;
    function get_HtmlText: string;
    procedure set_HtmlText(value: string);
    function get_TextVerticalOverflow: DNTextOverflowType;
    procedure set_TextVerticalOverflow(value: DNTextOverflowType);
    function get_TextHorizontalOverflow: DNTextOverflowType;
    procedure set_TextHorizontalOverflow(value: DNTextOverflowType);
    function get_IsTextWrapped: Boolean;
    procedure set_IsTextWrapped(value: Boolean);
    function get_TextOrientationType: DNTextOrientationType;
    procedure set_TextOrientationType(value: DNTextOrientationType);
    function get_TextHorizontalAlignment: DNTextAlignmentType;
    procedure set_TextHorizontalAlignment(value: DNTextAlignmentType);
    function get_TextVerticalAlignment: DNTextAlignmentType;
    procedure set_TextVerticalAlignment(value: DNTextAlignmentType);
    function get_TextDirection: DNTextDirectionType;
    procedure set_TextDirection(value: DNTextDirectionType);
    function get_ControlData: TArray<Byte>;
    function get_ActiveXControl: DNActiveXControl;
    function get_Paths: DNShapePathCollection;
    function get_Geometry: DNGeometry;

  { methods } 

    function CalculateTextSize: TArray<Int32>;
    procedure FormatCharacters(startIndex: Int32; length: Int32; font: DNFont; flag: DNStyleFlag); overload;
    procedure FormatCharacters(startIndex: Int32; length: Int32; font: DNFont); overload;
    function Characters(startIndex: Int32; length: Int32): DNFontSetting;
    function GetCharacters: DDN.mscorlib.DNArrayList;
    procedure RemoveActiveXControl;
    procedure ToImage(stream: DDN.mscorlib.DNStream; imageFormat: DDN.System.Drawing.DNImageFormat); overload;
    procedure ToImage(imageFile: string; options: DNImageOrPrintOptions); overload;
    procedure ToImage(stream: DDN.mscorlib.DNStream; options: DNImageOrPrintOptions); overload;
    function ToImage(options: DNImageOrPrintOptions): DDN.System.Drawing.DNBitmap; overload;
    function GetLinkedCell(isR1C1: Boolean; isLocal: Boolean): string;
    procedure SetLinkedCell(formula: string; isR1C1: Boolean; isLocal: Boolean);
    function GetInputRange(isR1C1: Boolean; isLocal: Boolean): string;
    procedure SetInputRange(formula: string; isR1C1: Boolean; isLocal: Boolean);
    procedure UpdateSelectedValue;
    function GetResultOfSmartArt: DNGroupShape;
    procedure ToFrontOrBack(orders: Int32);
    function GetLockedProperty(&type: DNShapeLockType): Boolean;
    procedure SetLockedProperty(&type: DNShapeLockType; value: Boolean);
    function AddHyperlink(address: string): DNHyperlink;
    procedure RemoveHyperlink;
    procedure MoveToRange(upperLeftRow: Int32; upperLeftColumn: Int32; lowerRightRow: Int32; lowerRightColumn: Int32);
    procedure AlignTopRightCorner(topRow: Int32; rightColumn: Int32);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property BeginArrowheadStyle: DNMsoArrowheadStyle read get_BeginArrowheadStyle write set_BeginArrowheadStyle;
    property BeginArrowheadWidth: DNMsoArrowheadWidth read get_BeginArrowheadWidth write set_BeginArrowheadWidth;
    property BeginArrowheadLength: DNMsoArrowheadLength read get_BeginArrowheadLength write set_BeginArrowheadLength;
    property EndArrowheadStyle: DNMsoArrowheadStyle read get_EndArrowheadStyle write set_EndArrowheadStyle;
    property EndArrowheadWidth: DNMsoArrowheadWidth read get_EndArrowheadWidth write set_EndArrowheadWidth;
    property EndArrowheadLength: DNMsoArrowheadLength read get_EndArrowheadLength write set_EndArrowheadLength;
    property MacroName: string read get_MacroName write set_MacroName;
    property IsEquation: Boolean read get_IsEquation;
    property IsSmartArt: Boolean read get_IsSmartArt;
    property ZOrderPosition: Int32 read get_ZOrderPosition write set_ZOrderPosition;
    property Name: string read get_Name write set_Name;
    property AlternativeText: string read get_AlternativeText write set_AlternativeText;
    property Title: string read get_Title write set_Title;
    property LineFormat: DNMsoLineFormat read get_LineFormat;
    property FillFormat: DNMsoFillFormat read get_FillFormat;
    property Format: DNShapeFormat read get_Format;
    property Line: DNLineFormat read get_Line;
    property Fill: DNFillFormat read get_Fill;
    property ShadowEffect: DNShadowEffect read get_ShadowEffect;
    property Reflection: DNReflectionEffect read get_Reflection;
    property Glow: DNGlowEffect read get_Glow;
    property SoftEdges: Double read get_SoftEdges write set_SoftEdges;
    property ThreeDFormat: DNThreeDFormat read get_ThreeDFormat;
    property TextFrame: DNMsoTextFrame read get_TextFrame;
    property FormatPicture: DNMsoFormatPicture read get_FormatPicture;
    property IsHidden: Boolean read get_IsHidden write set_IsHidden;
    property IsLockAspectRatio: Boolean read get_IsLockAspectRatio write set_IsLockAspectRatio;
    property RotationAngle: Double read get_RotationAngle write set_RotationAngle;
    property Hyperlink: DNHyperlink read get_Hyperlink;
    property Id: Int32 read get_Id;
    property Spid: string read get_Spid;
    property Spt: Int32 read get_Spt;
    property Worksheet: DNWorksheet read get_Worksheet;
    property IsGroup: Boolean read get_IsGroup;
    property IsWordArt: Boolean read get_IsWordArt;
    property TextEffect: DNTextEffectFormat read get_TextEffect;
    property IsLocked: Boolean read get_IsLocked write set_IsLocked;
    property IsPrintable: Boolean read get_IsPrintable write set_IsPrintable;
    property MsoDrawingType: DNMsoDrawingType read get_MsoDrawingType;
    property AutoShapeType: DNAutoShapeType read get_AutoShapeType write set_AutoShapeType;
    property AnchorType: DNShapeAnchorType read get_AnchorType write set_AnchorType;
    property Placement: DNPlacementType read get_Placement write set_Placement;
    property UpperLeftRow: Int32 read get_UpperLeftRow write set_UpperLeftRow;
    property UpperDeltaY: Int32 read get_UpperDeltaY write set_UpperDeltaY;
    property UpperLeftColumn: Int32 read get_UpperLeftColumn write set_UpperLeftColumn;
    property UpperDeltaX: Int32 read get_UpperDeltaX write set_UpperDeltaX;
    property LowerRightRow: Int32 read get_LowerRightRow write set_LowerRightRow;
    property LowerDeltaY: Int32 read get_LowerDeltaY write set_LowerDeltaY;
    property LowerRightColumn: Int32 read get_LowerRightColumn write set_LowerRightColumn;
    property LowerDeltaX: Int32 read get_LowerDeltaX write set_LowerDeltaX;
    property Right: Int32 read get_Right write set_Right;
    property Bottom: Int32 read get_Bottom write set_Bottom;
    property Width: Int32 read get_Width write set_Width;
    property WidthInch: Double read get_WidthInch write set_WidthInch;
    property WidthPt: Double read get_WidthPt write set_WidthPt;
    property WidthCM: Double read get_WidthCM write set_WidthCM;
    property Height: Int32 read get_Height write set_Height;
    property HeightInch: Double read get_HeightInch write set_HeightInch;
    property HeightPt: Double read get_HeightPt write set_HeightPt;
    property HeightCM: Double read get_HeightCM write set_HeightCM;
    property Left: Int32 read get_Left write set_Left;
    property LeftInch: Double read get_LeftInch write set_LeftInch;
    property LeftCM: Double read get_LeftCM write set_LeftCM;
    property Top: Int32 read get_Top write set_Top;
    property TopInch: Double read get_TopInch write set_TopInch;
    property TopCM: Double read get_TopCM write set_TopCM;
    property TopToCorner: Int32 read get_TopToCorner write set_TopToCorner;
    property LeftToCorner: Int32 read get_LeftToCorner write set_LeftToCorner;
    property X: Int32 read get_X write set_X;
    property Y: Int32 read get_Y write set_Y;
    property WidthScale: Int32 read get_WidthScale write set_WidthScale;
    property HeightScale: Int32 read get_HeightScale write set_HeightScale;
    property TopInShape: Int32 read get_TopInShape write set_TopInShape;
    property LeftInShape: Int32 read get_LeftInShape write set_LeftInShape;
    property WidthInShape: Int32 read get_WidthInShape write set_WidthInShape;
    property HeightInShape: Int32 read get_HeightInShape write set_HeightInShape;
    property Group: DNGroupShape read get_Group;
    property &Type: DNAutoShapeType read get_Type;
    property HasLine: Boolean read get_HasLine write set_HasLine;
    property IsFilled: Boolean read get_IsFilled write set_IsFilled;
    property IsFlippedHorizontally: Boolean read get_IsFlippedHorizontally write set_IsFlippedHorizontally;
    property IsFlippedVertically: Boolean read get_IsFlippedVertically write set_IsFlippedVertically;
    property ActualLowerRightRow: Int32 read get_ActualLowerRightRow;
    property ConnectionPoints: TArray<DDN.System.Drawing.DNPointF> read get_ConnectionPoints;
    property RelativeToOriginalPictureSize: Boolean read get_RelativeToOriginalPictureSize write set_RelativeToOriginalPictureSize;
    property LinkedCell: string read get_LinkedCell write set_LinkedCell;
    property InputRange: string read get_InputRange write set_InputRange;
    property TextShapeType: DNAutoShapeType read get_TextShapeType write set_TextShapeType;
    property TextBody: DNFontSettingCollection read get_TextBody;
    property Font: DNFont read get_Font write set_Font;
    property TextOptions: DNTextOptions read get_TextOptions write set_TextOptions;
    property Text: string read get_Text write set_Text;
    property IsRichText: Boolean read get_IsRichText;
    property HtmlText: string read get_HtmlText write set_HtmlText;
    property TextVerticalOverflow: DNTextOverflowType read get_TextVerticalOverflow write set_TextVerticalOverflow;
    property TextHorizontalOverflow: DNTextOverflowType read get_TextHorizontalOverflow write set_TextHorizontalOverflow;
    property IsTextWrapped: Boolean read get_IsTextWrapped write set_IsTextWrapped;
    property TextOrientationType: DNTextOrientationType read get_TextOrientationType write set_TextOrientationType;
    property TextHorizontalAlignment: DNTextAlignmentType read get_TextHorizontalAlignment write set_TextHorizontalAlignment;
    property TextVerticalAlignment: DNTextAlignmentType read get_TextVerticalAlignment write set_TextVerticalAlignment;
    property TextDirection: DNTextDirectionType read get_TextDirection write set_TextDirection;
    property ControlData: TArray<Byte> read get_ControlData;
    property ActiveXControl: DNActiveXControl read get_ActiveXControl;
    property Paths: DNShapePathCollection read get_Paths;
    property Geometry: DNGeometry read get_Geometry;
  end;

  TDNArcShape = class(TDNGenericImport<DNArcShapeClass, DNArcShape>) end;

  //-------------namespace: Aspose.Cells.Drawing----------------
  DNButtonClass = interface(DNShapeClass)
  ['{3C6FF438-E5A3-5375-BE3C-31393DE462B7}']
  end;

  [DNTypeName('Aspose.Cells.Drawing.Button')]
  DNButton = interface(DNShape)
  ['{745DCDC5-35C2-3BF8-A027-9045E11EB7F4}']
  { getters & setters } 

    function get_MacroName: string;
    procedure set_MacroName(value: string);
    function get_IsEquation: Boolean;
    function get_IsSmartArt: Boolean;
    function get_ZOrderPosition: Int32;
    procedure set_ZOrderPosition(value: Int32);
    function get_Name: string;
    procedure set_Name(value: string);
    function get_AlternativeText: string;
    procedure set_AlternativeText(value: string);
    function get_Title: string;
    procedure set_Title(value: string);
    function get_LineFormat: DNMsoLineFormat;
    function get_FillFormat: DNMsoFillFormat;
    function get_Format: DNShapeFormat;
    function get_Line: DNLineFormat;
    function get_Fill: DNFillFormat;
    function get_ShadowEffect: DNShadowEffect;
    function get_Reflection: DNReflectionEffect;
    function get_Glow: DNGlowEffect;
    function get_SoftEdges: Double;
    procedure set_SoftEdges(value: Double);
    function get_ThreeDFormat: DNThreeDFormat;
    function get_TextFrame: DNMsoTextFrame;
    function get_FormatPicture: DNMsoFormatPicture;
    function get_IsHidden: Boolean;
    procedure set_IsHidden(value: Boolean);
    function get_IsLockAspectRatio: Boolean;
    procedure set_IsLockAspectRatio(value: Boolean);
    function get_RotationAngle: Double;
    procedure set_RotationAngle(value: Double);
    function get_Hyperlink: DNHyperlink;
    function get_Id: Int32;
    function get_Spid: string;
    function get_Spt: Int32;
    function get_Worksheet: DNWorksheet;
    function get_IsGroup: Boolean;
    function get_IsWordArt: Boolean;
    function get_TextEffect: DNTextEffectFormat;
    function get_IsLocked: Boolean;
    procedure set_IsLocked(value: Boolean);
    function get_IsPrintable: Boolean;
    procedure set_IsPrintable(value: Boolean);
    function get_MsoDrawingType: DNMsoDrawingType;
    function get_AutoShapeType: DNAutoShapeType;
    procedure set_AutoShapeType(value: DNAutoShapeType);
    function get_AnchorType: DNShapeAnchorType;
    procedure set_AnchorType(value: DNShapeAnchorType);
    function get_Placement: DNPlacementType;
    procedure set_Placement(value: DNPlacementType);
    function get_UpperLeftRow: Int32;
    procedure set_UpperLeftRow(value: Int32);
    function get_UpperDeltaY: Int32;
    procedure set_UpperDeltaY(value: Int32);
    function get_UpperLeftColumn: Int32;
    procedure set_UpperLeftColumn(value: Int32);
    function get_UpperDeltaX: Int32;
    procedure set_UpperDeltaX(value: Int32);
    function get_LowerRightRow: Int32;
    procedure set_LowerRightRow(value: Int32);
    function get_LowerDeltaY: Int32;
    procedure set_LowerDeltaY(value: Int32);
    function get_LowerRightColumn: Int32;
    procedure set_LowerRightColumn(value: Int32);
    function get_LowerDeltaX: Int32;
    procedure set_LowerDeltaX(value: Int32);
    function get_Right: Int32;
    procedure set_Right(value: Int32);
    function get_Bottom: Int32;
    procedure set_Bottom(value: Int32);
    function get_Width: Int32;
    procedure set_Width(value: Int32);
    function get_WidthInch: Double;
    procedure set_WidthInch(value: Double);
    function get_WidthPt: Double;
    procedure set_WidthPt(value: Double);
    function get_WidthCM: Double;
    procedure set_WidthCM(value: Double);
    function get_Height: Int32;
    procedure set_Height(value: Int32);
    function get_HeightInch: Double;
    procedure set_HeightInch(value: Double);
    function get_HeightPt: Double;
    procedure set_HeightPt(value: Double);
    function get_HeightCM: Double;
    procedure set_HeightCM(value: Double);
    function get_Left: Int32;
    procedure set_Left(value: Int32);
    function get_LeftInch: Double;
    procedure set_LeftInch(value: Double);
    function get_LeftCM: Double;
    procedure set_LeftCM(value: Double);
    function get_Top: Int32;
    procedure set_Top(value: Int32);
    function get_TopInch: Double;
    procedure set_TopInch(value: Double);
    function get_TopCM: Double;
    procedure set_TopCM(value: Double);
    function get_TopToCorner: Int32;
    procedure set_TopToCorner(value: Int32);
    function get_LeftToCorner: Int32;
    procedure set_LeftToCorner(value: Int32);
    function get_X: Int32;
    procedure set_X(value: Int32);
    function get_Y: Int32;
    procedure set_Y(value: Int32);
    function get_WidthScale: Int32;
    procedure set_WidthScale(value: Int32);
    function get_HeightScale: Int32;
    procedure set_HeightScale(value: Int32);
    function get_TopInShape: Int32;
    procedure set_TopInShape(value: Int32);
    function get_LeftInShape: Int32;
    procedure set_LeftInShape(value: Int32);
    function get_WidthInShape: Int32;
    procedure set_WidthInShape(value: Int32);
    function get_HeightInShape: Int32;
    procedure set_HeightInShape(value: Int32);
    function get_Group: DNGroupShape;
    function get_Type: DNAutoShapeType;
    function get_HasLine: Boolean;
    procedure set_HasLine(value: Boolean);
    function get_IsFilled: Boolean;
    procedure set_IsFilled(value: Boolean);
    function get_IsFlippedHorizontally: Boolean;
    procedure set_IsFlippedHorizontally(value: Boolean);
    function get_IsFlippedVertically: Boolean;
    procedure set_IsFlippedVertically(value: Boolean);
    function get_ActualLowerRightRow: Int32;
    function get_ConnectionPoints: TArray<DDN.System.Drawing.DNPointF>;
    function get_RelativeToOriginalPictureSize: Boolean;
    procedure set_RelativeToOriginalPictureSize(value: Boolean);
    function get_LinkedCell: string;
    procedure set_LinkedCell(value: string);
    function get_InputRange: string;
    procedure set_InputRange(value: string);
    function get_TextShapeType: DNAutoShapeType;
    procedure set_TextShapeType(value: DNAutoShapeType);
    function get_TextBody: DNFontSettingCollection;
    function get_Font: DNFont;
    procedure set_Font(value: DNFont);
    function get_TextOptions: DNTextOptions;
    procedure set_TextOptions(value: DNTextOptions);
    function get_Text: string;
    procedure set_Text(value: string);
    function get_IsRichText: Boolean;
    function get_HtmlText: string;
    procedure set_HtmlText(value: string);
    function get_TextVerticalOverflow: DNTextOverflowType;
    procedure set_TextVerticalOverflow(value: DNTextOverflowType);
    function get_TextHorizontalOverflow: DNTextOverflowType;
    procedure set_TextHorizontalOverflow(value: DNTextOverflowType);
    function get_IsTextWrapped: Boolean;
    procedure set_IsTextWrapped(value: Boolean);
    function get_TextOrientationType: DNTextOrientationType;
    procedure set_TextOrientationType(value: DNTextOrientationType);
    function get_TextHorizontalAlignment: DNTextAlignmentType;
    procedure set_TextHorizontalAlignment(value: DNTextAlignmentType);
    function get_TextVerticalAlignment: DNTextAlignmentType;
    procedure set_TextVerticalAlignment(value: DNTextAlignmentType);
    function get_TextDirection: DNTextDirectionType;
    procedure set_TextDirection(value: DNTextDirectionType);
    function get_ControlData: TArray<Byte>;
    function get_ActiveXControl: DNActiveXControl;
    function get_Paths: DNShapePathCollection;
    function get_Geometry: DNGeometry;

  { methods } 

    function CalculateTextSize: TArray<Int32>;
    procedure FormatCharacters(startIndex: Int32; length: Int32; font: DNFont; flag: DNStyleFlag); overload;
    procedure FormatCharacters(startIndex: Int32; length: Int32; font: DNFont); overload;
    function Characters(startIndex: Int32; length: Int32): DNFontSetting;
    function GetCharacters: DDN.mscorlib.DNArrayList;
    procedure RemoveActiveXControl;
    procedure ToImage(stream: DDN.mscorlib.DNStream; imageFormat: DDN.System.Drawing.DNImageFormat); overload;
    procedure ToImage(imageFile: string; options: DNImageOrPrintOptions); overload;
    procedure ToImage(stream: DDN.mscorlib.DNStream; options: DNImageOrPrintOptions); overload;
    function ToImage(options: DNImageOrPrintOptions): DDN.System.Drawing.DNBitmap; overload;
    function GetLinkedCell(isR1C1: Boolean; isLocal: Boolean): string;
    procedure SetLinkedCell(formula: string; isR1C1: Boolean; isLocal: Boolean);
    function GetInputRange(isR1C1: Boolean; isLocal: Boolean): string;
    procedure SetInputRange(formula: string; isR1C1: Boolean; isLocal: Boolean);
    procedure UpdateSelectedValue;
    function GetResultOfSmartArt: DNGroupShape;
    procedure ToFrontOrBack(orders: Int32);
    function GetLockedProperty(&type: DNShapeLockType): Boolean;
    procedure SetLockedProperty(&type: DNShapeLockType; value: Boolean);
    function AddHyperlink(address: string): DNHyperlink;
    procedure RemoveHyperlink;
    procedure MoveToRange(upperLeftRow: Int32; upperLeftColumn: Int32; lowerRightRow: Int32; lowerRightColumn: Int32);
    procedure AlignTopRightCorner(topRow: Int32; rightColumn: Int32);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property MacroName: string read get_MacroName write set_MacroName;
    property IsEquation: Boolean read get_IsEquation;
    property IsSmartArt: Boolean read get_IsSmartArt;
    property ZOrderPosition: Int32 read get_ZOrderPosition write set_ZOrderPosition;
    property Name: string read get_Name write set_Name;
    property AlternativeText: string read get_AlternativeText write set_AlternativeText;
    property Title: string read get_Title write set_Title;
    property LineFormat: DNMsoLineFormat read get_LineFormat;
    property FillFormat: DNMsoFillFormat read get_FillFormat;
    property Format: DNShapeFormat read get_Format;
    property Line: DNLineFormat read get_Line;
    property Fill: DNFillFormat read get_Fill;
    property ShadowEffect: DNShadowEffect read get_ShadowEffect;
    property Reflection: DNReflectionEffect read get_Reflection;
    property Glow: DNGlowEffect read get_Glow;
    property SoftEdges: Double read get_SoftEdges write set_SoftEdges;
    property ThreeDFormat: DNThreeDFormat read get_ThreeDFormat;
    property TextFrame: DNMsoTextFrame read get_TextFrame;
    property FormatPicture: DNMsoFormatPicture read get_FormatPicture;
    property IsHidden: Boolean read get_IsHidden write set_IsHidden;
    property IsLockAspectRatio: Boolean read get_IsLockAspectRatio write set_IsLockAspectRatio;
    property RotationAngle: Double read get_RotationAngle write set_RotationAngle;
    property Hyperlink: DNHyperlink read get_Hyperlink;
    property Id: Int32 read get_Id;
    property Spid: string read get_Spid;
    property Spt: Int32 read get_Spt;
    property Worksheet: DNWorksheet read get_Worksheet;
    property IsGroup: Boolean read get_IsGroup;
    property IsWordArt: Boolean read get_IsWordArt;
    property TextEffect: DNTextEffectFormat read get_TextEffect;
    property IsLocked: Boolean read get_IsLocked write set_IsLocked;
    property IsPrintable: Boolean read get_IsPrintable write set_IsPrintable;
    property MsoDrawingType: DNMsoDrawingType read get_MsoDrawingType;
    property AutoShapeType: DNAutoShapeType read get_AutoShapeType write set_AutoShapeType;
    property AnchorType: DNShapeAnchorType read get_AnchorType write set_AnchorType;
    property Placement: DNPlacementType read get_Placement write set_Placement;
    property UpperLeftRow: Int32 read get_UpperLeftRow write set_UpperLeftRow;
    property UpperDeltaY: Int32 read get_UpperDeltaY write set_UpperDeltaY;
    property UpperLeftColumn: Int32 read get_UpperLeftColumn write set_UpperLeftColumn;
    property UpperDeltaX: Int32 read get_UpperDeltaX write set_UpperDeltaX;
    property LowerRightRow: Int32 read get_LowerRightRow write set_LowerRightRow;
    property LowerDeltaY: Int32 read get_LowerDeltaY write set_LowerDeltaY;
    property LowerRightColumn: Int32 read get_LowerRightColumn write set_LowerRightColumn;
    property LowerDeltaX: Int32 read get_LowerDeltaX write set_LowerDeltaX;
    property Right: Int32 read get_Right write set_Right;
    property Bottom: Int32 read get_Bottom write set_Bottom;
    property Width: Int32 read get_Width write set_Width;
    property WidthInch: Double read get_WidthInch write set_WidthInch;
    property WidthPt: Double read get_WidthPt write set_WidthPt;
    property WidthCM: Double read get_WidthCM write set_WidthCM;
    property Height: Int32 read get_Height write set_Height;
    property HeightInch: Double read get_HeightInch write set_HeightInch;
    property HeightPt: Double read get_HeightPt write set_HeightPt;
    property HeightCM: Double read get_HeightCM write set_HeightCM;
    property Left: Int32 read get_Left write set_Left;
    property LeftInch: Double read get_LeftInch write set_LeftInch;
    property LeftCM: Double read get_LeftCM write set_LeftCM;
    property Top: Int32 read get_Top write set_Top;
    property TopInch: Double read get_TopInch write set_TopInch;
    property TopCM: Double read get_TopCM write set_TopCM;
    property TopToCorner: Int32 read get_TopToCorner write set_TopToCorner;
    property LeftToCorner: Int32 read get_LeftToCorner write set_LeftToCorner;
    property X: Int32 read get_X write set_X;
    property Y: Int32 read get_Y write set_Y;
    property WidthScale: Int32 read get_WidthScale write set_WidthScale;
    property HeightScale: Int32 read get_HeightScale write set_HeightScale;
    property TopInShape: Int32 read get_TopInShape write set_TopInShape;
    property LeftInShape: Int32 read get_LeftInShape write set_LeftInShape;
    property WidthInShape: Int32 read get_WidthInShape write set_WidthInShape;
    property HeightInShape: Int32 read get_HeightInShape write set_HeightInShape;
    property Group: DNGroupShape read get_Group;
    property &Type: DNAutoShapeType read get_Type;
    property HasLine: Boolean read get_HasLine write set_HasLine;
    property IsFilled: Boolean read get_IsFilled write set_IsFilled;
    property IsFlippedHorizontally: Boolean read get_IsFlippedHorizontally write set_IsFlippedHorizontally;
    property IsFlippedVertically: Boolean read get_IsFlippedVertically write set_IsFlippedVertically;
    property ActualLowerRightRow: Int32 read get_ActualLowerRightRow;
    property ConnectionPoints: TArray<DDN.System.Drawing.DNPointF> read get_ConnectionPoints;
    property RelativeToOriginalPictureSize: Boolean read get_RelativeToOriginalPictureSize write set_RelativeToOriginalPictureSize;
    property LinkedCell: string read get_LinkedCell write set_LinkedCell;
    property InputRange: string read get_InputRange write set_InputRange;
    property TextShapeType: DNAutoShapeType read get_TextShapeType write set_TextShapeType;
    property TextBody: DNFontSettingCollection read get_TextBody;
    property Font: DNFont read get_Font write set_Font;
    property TextOptions: DNTextOptions read get_TextOptions write set_TextOptions;
    property Text: string read get_Text write set_Text;
    property IsRichText: Boolean read get_IsRichText;
    property HtmlText: string read get_HtmlText write set_HtmlText;
    property TextVerticalOverflow: DNTextOverflowType read get_TextVerticalOverflow write set_TextVerticalOverflow;
    property TextHorizontalOverflow: DNTextOverflowType read get_TextHorizontalOverflow write set_TextHorizontalOverflow;
    property IsTextWrapped: Boolean read get_IsTextWrapped write set_IsTextWrapped;
    property TextOrientationType: DNTextOrientationType read get_TextOrientationType write set_TextOrientationType;
    property TextHorizontalAlignment: DNTextAlignmentType read get_TextHorizontalAlignment write set_TextHorizontalAlignment;
    property TextVerticalAlignment: DNTextAlignmentType read get_TextVerticalAlignment write set_TextVerticalAlignment;
    property TextDirection: DNTextDirectionType read get_TextDirection write set_TextDirection;
    property ControlData: TArray<Byte> read get_ControlData;
    property ActiveXControl: DNActiveXControl read get_ActiveXControl;
    property Paths: DNShapePathCollection read get_Paths;
    property Geometry: DNGeometry read get_Geometry;
  end;

  TDNButton = class(TDNGenericImport<DNButtonClass, DNButton>) end;

  //-------------namespace: Aspose.Cells.Drawing----------------
  DNCellsDrawingClass = interface(DNShapeClass)
  ['{4288923A-B985-54CE-8974-8DDC365C0DED}']
  end;

  [DNTypeName('Aspose.Cells.Drawing.CellsDrawing')]
  DNCellsDrawing = interface(DNShape)
  ['{6718200D-5637-36C7-A73E-33276B868CEC}']
  { getters & setters } 

    function get_MacroName: string;
    procedure set_MacroName(value: string);
    function get_IsEquation: Boolean;
    function get_IsSmartArt: Boolean;
    function get_ZOrderPosition: Int32;
    procedure set_ZOrderPosition(value: Int32);
    function get_Name: string;
    procedure set_Name(value: string);
    function get_AlternativeText: string;
    procedure set_AlternativeText(value: string);
    function get_Title: string;
    procedure set_Title(value: string);
    function get_LineFormat: DNMsoLineFormat;
    function get_FillFormat: DNMsoFillFormat;
    function get_Format: DNShapeFormat;
    function get_Line: DNLineFormat;
    function get_Fill: DNFillFormat;
    function get_ShadowEffect: DNShadowEffect;
    function get_Reflection: DNReflectionEffect;
    function get_Glow: DNGlowEffect;
    function get_SoftEdges: Double;
    procedure set_SoftEdges(value: Double);
    function get_ThreeDFormat: DNThreeDFormat;
    function get_TextFrame: DNMsoTextFrame;
    function get_FormatPicture: DNMsoFormatPicture;
    function get_IsHidden: Boolean;
    procedure set_IsHidden(value: Boolean);
    function get_IsLockAspectRatio: Boolean;
    procedure set_IsLockAspectRatio(value: Boolean);
    function get_RotationAngle: Double;
    procedure set_RotationAngle(value: Double);
    function get_Hyperlink: DNHyperlink;
    function get_Id: Int32;
    function get_Spid: string;
    function get_Spt: Int32;
    function get_Worksheet: DNWorksheet;
    function get_IsGroup: Boolean;
    function get_IsWordArt: Boolean;
    function get_TextEffect: DNTextEffectFormat;
    function get_IsLocked: Boolean;
    procedure set_IsLocked(value: Boolean);
    function get_IsPrintable: Boolean;
    procedure set_IsPrintable(value: Boolean);
    function get_MsoDrawingType: DNMsoDrawingType;
    function get_AutoShapeType: DNAutoShapeType;
    procedure set_AutoShapeType(value: DNAutoShapeType);
    function get_AnchorType: DNShapeAnchorType;
    procedure set_AnchorType(value: DNShapeAnchorType);
    function get_Placement: DNPlacementType;
    procedure set_Placement(value: DNPlacementType);
    function get_UpperLeftRow: Int32;
    procedure set_UpperLeftRow(value: Int32);
    function get_UpperDeltaY: Int32;
    procedure set_UpperDeltaY(value: Int32);
    function get_UpperLeftColumn: Int32;
    procedure set_UpperLeftColumn(value: Int32);
    function get_UpperDeltaX: Int32;
    procedure set_UpperDeltaX(value: Int32);
    function get_LowerRightRow: Int32;
    procedure set_LowerRightRow(value: Int32);
    function get_LowerDeltaY: Int32;
    procedure set_LowerDeltaY(value: Int32);
    function get_LowerRightColumn: Int32;
    procedure set_LowerRightColumn(value: Int32);
    function get_LowerDeltaX: Int32;
    procedure set_LowerDeltaX(value: Int32);
    function get_Right: Int32;
    procedure set_Right(value: Int32);
    function get_Bottom: Int32;
    procedure set_Bottom(value: Int32);
    function get_Width: Int32;
    procedure set_Width(value: Int32);
    function get_WidthInch: Double;
    procedure set_WidthInch(value: Double);
    function get_WidthPt: Double;
    procedure set_WidthPt(value: Double);
    function get_WidthCM: Double;
    procedure set_WidthCM(value: Double);
    function get_Height: Int32;
    procedure set_Height(value: Int32);
    function get_HeightInch: Double;
    procedure set_HeightInch(value: Double);
    function get_HeightPt: Double;
    procedure set_HeightPt(value: Double);
    function get_HeightCM: Double;
    procedure set_HeightCM(value: Double);
    function get_Left: Int32;
    procedure set_Left(value: Int32);
    function get_LeftInch: Double;
    procedure set_LeftInch(value: Double);
    function get_LeftCM: Double;
    procedure set_LeftCM(value: Double);
    function get_Top: Int32;
    procedure set_Top(value: Int32);
    function get_TopInch: Double;
    procedure set_TopInch(value: Double);
    function get_TopCM: Double;
    procedure set_TopCM(value: Double);
    function get_TopToCorner: Int32;
    procedure set_TopToCorner(value: Int32);
    function get_LeftToCorner: Int32;
    procedure set_LeftToCorner(value: Int32);
    function get_X: Int32;
    procedure set_X(value: Int32);
    function get_Y: Int32;
    procedure set_Y(value: Int32);
    function get_WidthScale: Int32;
    procedure set_WidthScale(value: Int32);
    function get_HeightScale: Int32;
    procedure set_HeightScale(value: Int32);
    function get_TopInShape: Int32;
    procedure set_TopInShape(value: Int32);
    function get_LeftInShape: Int32;
    procedure set_LeftInShape(value: Int32);
    function get_WidthInShape: Int32;
    procedure set_WidthInShape(value: Int32);
    function get_HeightInShape: Int32;
    procedure set_HeightInShape(value: Int32);
    function get_Group: DNGroupShape;
    function get_Type: DNAutoShapeType;
    function get_HasLine: Boolean;
    procedure set_HasLine(value: Boolean);
    function get_IsFilled: Boolean;
    procedure set_IsFilled(value: Boolean);
    function get_IsFlippedHorizontally: Boolean;
    procedure set_IsFlippedHorizontally(value: Boolean);
    function get_IsFlippedVertically: Boolean;
    procedure set_IsFlippedVertically(value: Boolean);
    function get_ActualLowerRightRow: Int32;
    function get_ConnectionPoints: TArray<DDN.System.Drawing.DNPointF>;
    function get_RelativeToOriginalPictureSize: Boolean;
    procedure set_RelativeToOriginalPictureSize(value: Boolean);
    function get_LinkedCell: string;
    procedure set_LinkedCell(value: string);
    function get_InputRange: string;
    procedure set_InputRange(value: string);
    function get_TextShapeType: DNAutoShapeType;
    procedure set_TextShapeType(value: DNAutoShapeType);
    function get_TextBody: DNFontSettingCollection;
    function get_Font: DNFont;
    procedure set_Font(value: DNFont);
    function get_TextOptions: DNTextOptions;
    procedure set_TextOptions(value: DNTextOptions);
    function get_Text: string;
    procedure set_Text(value: string);
    function get_IsRichText: Boolean;
    function get_HtmlText: string;
    procedure set_HtmlText(value: string);
    function get_TextVerticalOverflow: DNTextOverflowType;
    procedure set_TextVerticalOverflow(value: DNTextOverflowType);
    function get_TextHorizontalOverflow: DNTextOverflowType;
    procedure set_TextHorizontalOverflow(value: DNTextOverflowType);
    function get_IsTextWrapped: Boolean;
    procedure set_IsTextWrapped(value: Boolean);
    function get_TextOrientationType: DNTextOrientationType;
    procedure set_TextOrientationType(value: DNTextOrientationType);
    function get_TextHorizontalAlignment: DNTextAlignmentType;
    procedure set_TextHorizontalAlignment(value: DNTextAlignmentType);
    function get_TextVerticalAlignment: DNTextAlignmentType;
    procedure set_TextVerticalAlignment(value: DNTextAlignmentType);
    function get_TextDirection: DNTextDirectionType;
    procedure set_TextDirection(value: DNTextDirectionType);
    function get_ControlData: TArray<Byte>;
    function get_ActiveXControl: DNActiveXControl;
    function get_Paths: DNShapePathCollection;
    function get_Geometry: DNGeometry;

  { methods } 

    function CalculateTextSize: TArray<Int32>;
    procedure FormatCharacters(startIndex: Int32; length: Int32; font: DNFont; flag: DNStyleFlag); overload;
    procedure FormatCharacters(startIndex: Int32; length: Int32; font: DNFont); overload;
    function Characters(startIndex: Int32; length: Int32): DNFontSetting;
    function GetCharacters: DDN.mscorlib.DNArrayList;
    procedure RemoveActiveXControl;
    procedure ToImage(stream: DDN.mscorlib.DNStream; imageFormat: DDN.System.Drawing.DNImageFormat); overload;
    procedure ToImage(imageFile: string; options: DNImageOrPrintOptions); overload;
    procedure ToImage(stream: DDN.mscorlib.DNStream; options: DNImageOrPrintOptions); overload;
    function ToImage(options: DNImageOrPrintOptions): DDN.System.Drawing.DNBitmap; overload;
    function GetLinkedCell(isR1C1: Boolean; isLocal: Boolean): string;
    procedure SetLinkedCell(formula: string; isR1C1: Boolean; isLocal: Boolean);
    function GetInputRange(isR1C1: Boolean; isLocal: Boolean): string;
    procedure SetInputRange(formula: string; isR1C1: Boolean; isLocal: Boolean);
    procedure UpdateSelectedValue;
    function GetResultOfSmartArt: DNGroupShape;
    procedure ToFrontOrBack(orders: Int32);
    function GetLockedProperty(&type: DNShapeLockType): Boolean;
    procedure SetLockedProperty(&type: DNShapeLockType; value: Boolean);
    function AddHyperlink(address: string): DNHyperlink;
    procedure RemoveHyperlink;
    procedure MoveToRange(upperLeftRow: Int32; upperLeftColumn: Int32; lowerRightRow: Int32; lowerRightColumn: Int32);
    procedure AlignTopRightCorner(topRow: Int32; rightColumn: Int32);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property MacroName: string read get_MacroName write set_MacroName;
    property IsEquation: Boolean read get_IsEquation;
    property IsSmartArt: Boolean read get_IsSmartArt;
    property ZOrderPosition: Int32 read get_ZOrderPosition write set_ZOrderPosition;
    property Name: string read get_Name write set_Name;
    property AlternativeText: string read get_AlternativeText write set_AlternativeText;
    property Title: string read get_Title write set_Title;
    property LineFormat: DNMsoLineFormat read get_LineFormat;
    property FillFormat: DNMsoFillFormat read get_FillFormat;
    property Format: DNShapeFormat read get_Format;
    property Line: DNLineFormat read get_Line;
    property Fill: DNFillFormat read get_Fill;
    property ShadowEffect: DNShadowEffect read get_ShadowEffect;
    property Reflection: DNReflectionEffect read get_Reflection;
    property Glow: DNGlowEffect read get_Glow;
    property SoftEdges: Double read get_SoftEdges write set_SoftEdges;
    property ThreeDFormat: DNThreeDFormat read get_ThreeDFormat;
    property TextFrame: DNMsoTextFrame read get_TextFrame;
    property FormatPicture: DNMsoFormatPicture read get_FormatPicture;
    property IsHidden: Boolean read get_IsHidden write set_IsHidden;
    property IsLockAspectRatio: Boolean read get_IsLockAspectRatio write set_IsLockAspectRatio;
    property RotationAngle: Double read get_RotationAngle write set_RotationAngle;
    property Hyperlink: DNHyperlink read get_Hyperlink;
    property Id: Int32 read get_Id;
    property Spid: string read get_Spid;
    property Spt: Int32 read get_Spt;
    property Worksheet: DNWorksheet read get_Worksheet;
    property IsGroup: Boolean read get_IsGroup;
    property IsWordArt: Boolean read get_IsWordArt;
    property TextEffect: DNTextEffectFormat read get_TextEffect;
    property IsLocked: Boolean read get_IsLocked write set_IsLocked;
    property IsPrintable: Boolean read get_IsPrintable write set_IsPrintable;
    property MsoDrawingType: DNMsoDrawingType read get_MsoDrawingType;
    property AutoShapeType: DNAutoShapeType read get_AutoShapeType write set_AutoShapeType;
    property AnchorType: DNShapeAnchorType read get_AnchorType write set_AnchorType;
    property Placement: DNPlacementType read get_Placement write set_Placement;
    property UpperLeftRow: Int32 read get_UpperLeftRow write set_UpperLeftRow;
    property UpperDeltaY: Int32 read get_UpperDeltaY write set_UpperDeltaY;
    property UpperLeftColumn: Int32 read get_UpperLeftColumn write set_UpperLeftColumn;
    property UpperDeltaX: Int32 read get_UpperDeltaX write set_UpperDeltaX;
    property LowerRightRow: Int32 read get_LowerRightRow write set_LowerRightRow;
    property LowerDeltaY: Int32 read get_LowerDeltaY write set_LowerDeltaY;
    property LowerRightColumn: Int32 read get_LowerRightColumn write set_LowerRightColumn;
    property LowerDeltaX: Int32 read get_LowerDeltaX write set_LowerDeltaX;
    property Right: Int32 read get_Right write set_Right;
    property Bottom: Int32 read get_Bottom write set_Bottom;
    property Width: Int32 read get_Width write set_Width;
    property WidthInch: Double read get_WidthInch write set_WidthInch;
    property WidthPt: Double read get_WidthPt write set_WidthPt;
    property WidthCM: Double read get_WidthCM write set_WidthCM;
    property Height: Int32 read get_Height write set_Height;
    property HeightInch: Double read get_HeightInch write set_HeightInch;
    property HeightPt: Double read get_HeightPt write set_HeightPt;
    property HeightCM: Double read get_HeightCM write set_HeightCM;
    property Left: Int32 read get_Left write set_Left;
    property LeftInch: Double read get_LeftInch write set_LeftInch;
    property LeftCM: Double read get_LeftCM write set_LeftCM;
    property Top: Int32 read get_Top write set_Top;
    property TopInch: Double read get_TopInch write set_TopInch;
    property TopCM: Double read get_TopCM write set_TopCM;
    property TopToCorner: Int32 read get_TopToCorner write set_TopToCorner;
    property LeftToCorner: Int32 read get_LeftToCorner write set_LeftToCorner;
    property X: Int32 read get_X write set_X;
    property Y: Int32 read get_Y write set_Y;
    property WidthScale: Int32 read get_WidthScale write set_WidthScale;
    property HeightScale: Int32 read get_HeightScale write set_HeightScale;
    property TopInShape: Int32 read get_TopInShape write set_TopInShape;
    property LeftInShape: Int32 read get_LeftInShape write set_LeftInShape;
    property WidthInShape: Int32 read get_WidthInShape write set_WidthInShape;
    property HeightInShape: Int32 read get_HeightInShape write set_HeightInShape;
    property Group: DNGroupShape read get_Group;
    property &Type: DNAutoShapeType read get_Type;
    property HasLine: Boolean read get_HasLine write set_HasLine;
    property IsFilled: Boolean read get_IsFilled write set_IsFilled;
    property IsFlippedHorizontally: Boolean read get_IsFlippedHorizontally write set_IsFlippedHorizontally;
    property IsFlippedVertically: Boolean read get_IsFlippedVertically write set_IsFlippedVertically;
    property ActualLowerRightRow: Int32 read get_ActualLowerRightRow;
    property ConnectionPoints: TArray<DDN.System.Drawing.DNPointF> read get_ConnectionPoints;
    property RelativeToOriginalPictureSize: Boolean read get_RelativeToOriginalPictureSize write set_RelativeToOriginalPictureSize;
    property LinkedCell: string read get_LinkedCell write set_LinkedCell;
    property InputRange: string read get_InputRange write set_InputRange;
    property TextShapeType: DNAutoShapeType read get_TextShapeType write set_TextShapeType;
    property TextBody: DNFontSettingCollection read get_TextBody;
    property Font: DNFont read get_Font write set_Font;
    property TextOptions: DNTextOptions read get_TextOptions write set_TextOptions;
    property Text: string read get_Text write set_Text;
    property IsRichText: Boolean read get_IsRichText;
    property HtmlText: string read get_HtmlText write set_HtmlText;
    property TextVerticalOverflow: DNTextOverflowType read get_TextVerticalOverflow write set_TextVerticalOverflow;
    property TextHorizontalOverflow: DNTextOverflowType read get_TextHorizontalOverflow write set_TextHorizontalOverflow;
    property IsTextWrapped: Boolean read get_IsTextWrapped write set_IsTextWrapped;
    property TextOrientationType: DNTextOrientationType read get_TextOrientationType write set_TextOrientationType;
    property TextHorizontalAlignment: DNTextAlignmentType read get_TextHorizontalAlignment write set_TextHorizontalAlignment;
    property TextVerticalAlignment: DNTextAlignmentType read get_TextVerticalAlignment write set_TextVerticalAlignment;
    property TextDirection: DNTextDirectionType read get_TextDirection write set_TextDirection;
    property ControlData: TArray<Byte> read get_ControlData;
    property ActiveXControl: DNActiveXControl read get_ActiveXControl;
    property Paths: DNShapePathCollection read get_Paths;
    property Geometry: DNGeometry read get_Geometry;
  end;

  TDNCellsDrawing = class(TDNGenericImport<DNCellsDrawingClass, DNCellsDrawing>) end;

  //-------------namespace: Aspose.Cells.Drawing----------------
  DNChartShapeClass = interface(DNShapeClass)
  ['{78E12CBF-E442-5BA1-86A6-88C7CCDC0AE1}']
  end;

  [DNTypeName('Aspose.Cells.Drawing.ChartShape')]
  DNChartShape = interface(DNShape)
  ['{7A5EED02-A7F5-34BF-99C5-D1AF003D52CE}']
  { getters & setters } 

    function get_Chart: DNChart;
    function get_MacroName: string;
    procedure set_MacroName(value: string);
    function get_IsEquation: Boolean;
    function get_IsSmartArt: Boolean;
    function get_ZOrderPosition: Int32;
    procedure set_ZOrderPosition(value: Int32);
    function get_Name: string;
    procedure set_Name(value: string);
    function get_AlternativeText: string;
    procedure set_AlternativeText(value: string);
    function get_Title: string;
    procedure set_Title(value: string);
    function get_LineFormat: DNMsoLineFormat;
    function get_FillFormat: DNMsoFillFormat;
    function get_Format: DNShapeFormat;
    function get_Line: DNLineFormat;
    function get_Fill: DNFillFormat;
    function get_ShadowEffect: DNShadowEffect;
    function get_Reflection: DNReflectionEffect;
    function get_Glow: DNGlowEffect;
    function get_SoftEdges: Double;
    procedure set_SoftEdges(value: Double);
    function get_ThreeDFormat: DNThreeDFormat;
    function get_TextFrame: DNMsoTextFrame;
    function get_FormatPicture: DNMsoFormatPicture;
    function get_IsHidden: Boolean;
    procedure set_IsHidden(value: Boolean);
    function get_IsLockAspectRatio: Boolean;
    procedure set_IsLockAspectRatio(value: Boolean);
    function get_RotationAngle: Double;
    procedure set_RotationAngle(value: Double);
    function get_Hyperlink: DNHyperlink;
    function get_Id: Int32;
    function get_Spid: string;
    function get_Spt: Int32;
    function get_Worksheet: DNWorksheet;
    function get_IsGroup: Boolean;
    function get_IsWordArt: Boolean;
    function get_TextEffect: DNTextEffectFormat;
    function get_IsLocked: Boolean;
    procedure set_IsLocked(value: Boolean);
    function get_IsPrintable: Boolean;
    procedure set_IsPrintable(value: Boolean);
    function get_MsoDrawingType: DNMsoDrawingType;
    function get_AutoShapeType: DNAutoShapeType;
    procedure set_AutoShapeType(value: DNAutoShapeType);
    function get_AnchorType: DNShapeAnchorType;
    procedure set_AnchorType(value: DNShapeAnchorType);
    function get_Placement: DNPlacementType;
    procedure set_Placement(value: DNPlacementType);
    function get_UpperLeftRow: Int32;
    procedure set_UpperLeftRow(value: Int32);
    function get_UpperDeltaY: Int32;
    procedure set_UpperDeltaY(value: Int32);
    function get_UpperLeftColumn: Int32;
    procedure set_UpperLeftColumn(value: Int32);
    function get_UpperDeltaX: Int32;
    procedure set_UpperDeltaX(value: Int32);
    function get_LowerRightRow: Int32;
    procedure set_LowerRightRow(value: Int32);
    function get_LowerDeltaY: Int32;
    procedure set_LowerDeltaY(value: Int32);
    function get_LowerRightColumn: Int32;
    procedure set_LowerRightColumn(value: Int32);
    function get_LowerDeltaX: Int32;
    procedure set_LowerDeltaX(value: Int32);
    function get_Right: Int32;
    procedure set_Right(value: Int32);
    function get_Bottom: Int32;
    procedure set_Bottom(value: Int32);
    function get_Width: Int32;
    procedure set_Width(value: Int32);
    function get_WidthInch: Double;
    procedure set_WidthInch(value: Double);
    function get_WidthPt: Double;
    procedure set_WidthPt(value: Double);
    function get_WidthCM: Double;
    procedure set_WidthCM(value: Double);
    function get_Height: Int32;
    procedure set_Height(value: Int32);
    function get_HeightInch: Double;
    procedure set_HeightInch(value: Double);
    function get_HeightPt: Double;
    procedure set_HeightPt(value: Double);
    function get_HeightCM: Double;
    procedure set_HeightCM(value: Double);
    function get_Left: Int32;
    procedure set_Left(value: Int32);
    function get_LeftInch: Double;
    procedure set_LeftInch(value: Double);
    function get_LeftCM: Double;
    procedure set_LeftCM(value: Double);
    function get_Top: Int32;
    procedure set_Top(value: Int32);
    function get_TopInch: Double;
    procedure set_TopInch(value: Double);
    function get_TopCM: Double;
    procedure set_TopCM(value: Double);
    function get_TopToCorner: Int32;
    procedure set_TopToCorner(value: Int32);
    function get_LeftToCorner: Int32;
    procedure set_LeftToCorner(value: Int32);
    function get_X: Int32;
    procedure set_X(value: Int32);
    function get_Y: Int32;
    procedure set_Y(value: Int32);
    function get_WidthScale: Int32;
    procedure set_WidthScale(value: Int32);
    function get_HeightScale: Int32;
    procedure set_HeightScale(value: Int32);
    function get_TopInShape: Int32;
    procedure set_TopInShape(value: Int32);
    function get_LeftInShape: Int32;
    procedure set_LeftInShape(value: Int32);
    function get_WidthInShape: Int32;
    procedure set_WidthInShape(value: Int32);
    function get_HeightInShape: Int32;
    procedure set_HeightInShape(value: Int32);
    function get_Group: DNGroupShape;
    function get_Type: DNAutoShapeType;
    function get_HasLine: Boolean;
    procedure set_HasLine(value: Boolean);
    function get_IsFilled: Boolean;
    procedure set_IsFilled(value: Boolean);
    function get_IsFlippedHorizontally: Boolean;
    procedure set_IsFlippedHorizontally(value: Boolean);
    function get_IsFlippedVertically: Boolean;
    procedure set_IsFlippedVertically(value: Boolean);
    function get_ActualLowerRightRow: Int32;
    function get_ConnectionPoints: TArray<DDN.System.Drawing.DNPointF>;
    function get_RelativeToOriginalPictureSize: Boolean;
    procedure set_RelativeToOriginalPictureSize(value: Boolean);
    function get_LinkedCell: string;
    procedure set_LinkedCell(value: string);
    function get_InputRange: string;
    procedure set_InputRange(value: string);
    function get_TextShapeType: DNAutoShapeType;
    procedure set_TextShapeType(value: DNAutoShapeType);
    function get_TextBody: DNFontSettingCollection;
    function get_Font: DNFont;
    procedure set_Font(value: DNFont);
    function get_TextOptions: DNTextOptions;
    procedure set_TextOptions(value: DNTextOptions);
    function get_Text: string;
    procedure set_Text(value: string);
    function get_IsRichText: Boolean;
    function get_HtmlText: string;
    procedure set_HtmlText(value: string);
    function get_TextVerticalOverflow: DNTextOverflowType;
    procedure set_TextVerticalOverflow(value: DNTextOverflowType);
    function get_TextHorizontalOverflow: DNTextOverflowType;
    procedure set_TextHorizontalOverflow(value: DNTextOverflowType);
    function get_IsTextWrapped: Boolean;
    procedure set_IsTextWrapped(value: Boolean);
    function get_TextOrientationType: DNTextOrientationType;
    procedure set_TextOrientationType(value: DNTextOrientationType);
    function get_TextHorizontalAlignment: DNTextAlignmentType;
    procedure set_TextHorizontalAlignment(value: DNTextAlignmentType);
    function get_TextVerticalAlignment: DNTextAlignmentType;
    procedure set_TextVerticalAlignment(value: DNTextAlignmentType);
    function get_TextDirection: DNTextDirectionType;
    procedure set_TextDirection(value: DNTextDirectionType);
    function get_ControlData: TArray<Byte>;
    function get_ActiveXControl: DNActiveXControl;
    function get_Paths: DNShapePathCollection;
    function get_Geometry: DNGeometry;

  { methods } 

    function CalculateTextSize: TArray<Int32>;
    procedure FormatCharacters(startIndex: Int32; length: Int32; font: DNFont; flag: DNStyleFlag); overload;
    procedure FormatCharacters(startIndex: Int32; length: Int32; font: DNFont); overload;
    function Characters(startIndex: Int32; length: Int32): DNFontSetting;
    function GetCharacters: DDN.mscorlib.DNArrayList;
    procedure RemoveActiveXControl;
    procedure ToImage(stream: DDN.mscorlib.DNStream; imageFormat: DDN.System.Drawing.DNImageFormat); overload;
    procedure ToImage(imageFile: string; options: DNImageOrPrintOptions); overload;
    procedure ToImage(stream: DDN.mscorlib.DNStream; options: DNImageOrPrintOptions); overload;
    function ToImage(options: DNImageOrPrintOptions): DDN.System.Drawing.DNBitmap; overload;
    function GetLinkedCell(isR1C1: Boolean; isLocal: Boolean): string;
    procedure SetLinkedCell(formula: string; isR1C1: Boolean; isLocal: Boolean);
    function GetInputRange(isR1C1: Boolean; isLocal: Boolean): string;
    procedure SetInputRange(formula: string; isR1C1: Boolean; isLocal: Boolean);
    procedure UpdateSelectedValue;
    function GetResultOfSmartArt: DNGroupShape;
    procedure ToFrontOrBack(orders: Int32);
    function GetLockedProperty(&type: DNShapeLockType): Boolean;
    procedure SetLockedProperty(&type: DNShapeLockType; value: Boolean);
    function AddHyperlink(address: string): DNHyperlink;
    procedure RemoveHyperlink;
    procedure MoveToRange(upperLeftRow: Int32; upperLeftColumn: Int32; lowerRightRow: Int32; lowerRightColumn: Int32);
    procedure AlignTopRightCorner(topRow: Int32; rightColumn: Int32);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Chart: DNChart read get_Chart;
    property MacroName: string read get_MacroName write set_MacroName;
    property IsEquation: Boolean read get_IsEquation;
    property IsSmartArt: Boolean read get_IsSmartArt;
    property ZOrderPosition: Int32 read get_ZOrderPosition write set_ZOrderPosition;
    property Name: string read get_Name write set_Name;
    property AlternativeText: string read get_AlternativeText write set_AlternativeText;
    property Title: string read get_Title write set_Title;
    property LineFormat: DNMsoLineFormat read get_LineFormat;
    property FillFormat: DNMsoFillFormat read get_FillFormat;
    property Format: DNShapeFormat read get_Format;
    property Line: DNLineFormat read get_Line;
    property Fill: DNFillFormat read get_Fill;
    property ShadowEffect: DNShadowEffect read get_ShadowEffect;
    property Reflection: DNReflectionEffect read get_Reflection;
    property Glow: DNGlowEffect read get_Glow;
    property SoftEdges: Double read get_SoftEdges write set_SoftEdges;
    property ThreeDFormat: DNThreeDFormat read get_ThreeDFormat;
    property TextFrame: DNMsoTextFrame read get_TextFrame;
    property FormatPicture: DNMsoFormatPicture read get_FormatPicture;
    property IsHidden: Boolean read get_IsHidden write set_IsHidden;
    property IsLockAspectRatio: Boolean read get_IsLockAspectRatio write set_IsLockAspectRatio;
    property RotationAngle: Double read get_RotationAngle write set_RotationAngle;
    property Hyperlink: DNHyperlink read get_Hyperlink;
    property Id: Int32 read get_Id;
    property Spid: string read get_Spid;
    property Spt: Int32 read get_Spt;
    property Worksheet: DNWorksheet read get_Worksheet;
    property IsGroup: Boolean read get_IsGroup;
    property IsWordArt: Boolean read get_IsWordArt;
    property TextEffect: DNTextEffectFormat read get_TextEffect;
    property IsLocked: Boolean read get_IsLocked write set_IsLocked;
    property IsPrintable: Boolean read get_IsPrintable write set_IsPrintable;
    property MsoDrawingType: DNMsoDrawingType read get_MsoDrawingType;
    property AutoShapeType: DNAutoShapeType read get_AutoShapeType write set_AutoShapeType;
    property AnchorType: DNShapeAnchorType read get_AnchorType write set_AnchorType;
    property Placement: DNPlacementType read get_Placement write set_Placement;
    property UpperLeftRow: Int32 read get_UpperLeftRow write set_UpperLeftRow;
    property UpperDeltaY: Int32 read get_UpperDeltaY write set_UpperDeltaY;
    property UpperLeftColumn: Int32 read get_UpperLeftColumn write set_UpperLeftColumn;
    property UpperDeltaX: Int32 read get_UpperDeltaX write set_UpperDeltaX;
    property LowerRightRow: Int32 read get_LowerRightRow write set_LowerRightRow;
    property LowerDeltaY: Int32 read get_LowerDeltaY write set_LowerDeltaY;
    property LowerRightColumn: Int32 read get_LowerRightColumn write set_LowerRightColumn;
    property LowerDeltaX: Int32 read get_LowerDeltaX write set_LowerDeltaX;
    property Right: Int32 read get_Right write set_Right;
    property Bottom: Int32 read get_Bottom write set_Bottom;
    property Width: Int32 read get_Width write set_Width;
    property WidthInch: Double read get_WidthInch write set_WidthInch;
    property WidthPt: Double read get_WidthPt write set_WidthPt;
    property WidthCM: Double read get_WidthCM write set_WidthCM;
    property Height: Int32 read get_Height write set_Height;
    property HeightInch: Double read get_HeightInch write set_HeightInch;
    property HeightPt: Double read get_HeightPt write set_HeightPt;
    property HeightCM: Double read get_HeightCM write set_HeightCM;
    property Left: Int32 read get_Left write set_Left;
    property LeftInch: Double read get_LeftInch write set_LeftInch;
    property LeftCM: Double read get_LeftCM write set_LeftCM;
    property Top: Int32 read get_Top write set_Top;
    property TopInch: Double read get_TopInch write set_TopInch;
    property TopCM: Double read get_TopCM write set_TopCM;
    property TopToCorner: Int32 read get_TopToCorner write set_TopToCorner;
    property LeftToCorner: Int32 read get_LeftToCorner write set_LeftToCorner;
    property X: Int32 read get_X write set_X;
    property Y: Int32 read get_Y write set_Y;
    property WidthScale: Int32 read get_WidthScale write set_WidthScale;
    property HeightScale: Int32 read get_HeightScale write set_HeightScale;
    property TopInShape: Int32 read get_TopInShape write set_TopInShape;
    property LeftInShape: Int32 read get_LeftInShape write set_LeftInShape;
    property WidthInShape: Int32 read get_WidthInShape write set_WidthInShape;
    property HeightInShape: Int32 read get_HeightInShape write set_HeightInShape;
    property Group: DNGroupShape read get_Group;
    property &Type: DNAutoShapeType read get_Type;
    property HasLine: Boolean read get_HasLine write set_HasLine;
    property IsFilled: Boolean read get_IsFilled write set_IsFilled;
    property IsFlippedHorizontally: Boolean read get_IsFlippedHorizontally write set_IsFlippedHorizontally;
    property IsFlippedVertically: Boolean read get_IsFlippedVertically write set_IsFlippedVertically;
    property ActualLowerRightRow: Int32 read get_ActualLowerRightRow;
    property ConnectionPoints: TArray<DDN.System.Drawing.DNPointF> read get_ConnectionPoints;
    property RelativeToOriginalPictureSize: Boolean read get_RelativeToOriginalPictureSize write set_RelativeToOriginalPictureSize;
    property LinkedCell: string read get_LinkedCell write set_LinkedCell;
    property InputRange: string read get_InputRange write set_InputRange;
    property TextShapeType: DNAutoShapeType read get_TextShapeType write set_TextShapeType;
    property TextBody: DNFontSettingCollection read get_TextBody;
    property Font: DNFont read get_Font write set_Font;
    property TextOptions: DNTextOptions read get_TextOptions write set_TextOptions;
    property Text: string read get_Text write set_Text;
    property IsRichText: Boolean read get_IsRichText;
    property HtmlText: string read get_HtmlText write set_HtmlText;
    property TextVerticalOverflow: DNTextOverflowType read get_TextVerticalOverflow write set_TextVerticalOverflow;
    property TextHorizontalOverflow: DNTextOverflowType read get_TextHorizontalOverflow write set_TextHorizontalOverflow;
    property IsTextWrapped: Boolean read get_IsTextWrapped write set_IsTextWrapped;
    property TextOrientationType: DNTextOrientationType read get_TextOrientationType write set_TextOrientationType;
    property TextHorizontalAlignment: DNTextAlignmentType read get_TextHorizontalAlignment write set_TextHorizontalAlignment;
    property TextVerticalAlignment: DNTextAlignmentType read get_TextVerticalAlignment write set_TextVerticalAlignment;
    property TextDirection: DNTextDirectionType read get_TextDirection write set_TextDirection;
    property ControlData: TArray<Byte> read get_ControlData;
    property ActiveXControl: DNActiveXControl read get_ActiveXControl;
    property Paths: DNShapePathCollection read get_Paths;
    property Geometry: DNGeometry read get_Geometry;
  end;

  TDNChartShape = class(TDNGenericImport<DNChartShapeClass, DNChartShape>) end;

  //-------------namespace: Aspose.Cells.Drawing----------------
  DNCheckBoxClass = interface(DNShapeClass)
  ['{8F53115F-B264-543E-BCDD-6E0A50C2FC15}']
  end;

  [DNTypeName('Aspose.Cells.Drawing.CheckBox')]
  DNCheckBox = interface(DNShape)
  ['{B15BD1EB-1D97-3E8B-BDD2-72806A667F3D}']
  { getters & setters } 

    function get_Value: Boolean;
    procedure set_Value(value: Boolean);
    function get_CheckValue: DNCheckValueType;
    procedure set_CheckValue(value: DNCheckValueType);
    function get_CheckedValue: DNCheckValueType;
    procedure set_CheckedValue(value: DNCheckValueType);
    function get_Shadow: Boolean;
    procedure set_Shadow(value: Boolean);
    function get_MacroName: string;
    procedure set_MacroName(value: string);
    function get_IsEquation: Boolean;
    function get_IsSmartArt: Boolean;
    function get_ZOrderPosition: Int32;
    procedure set_ZOrderPosition(value: Int32);
    function get_Name: string;
    procedure set_Name(value: string);
    function get_AlternativeText: string;
    procedure set_AlternativeText(value: string);
    function get_Title: string;
    procedure set_Title(value: string);
    function get_LineFormat: DNMsoLineFormat;
    function get_FillFormat: DNMsoFillFormat;
    function get_Format: DNShapeFormat;
    function get_Line: DNLineFormat;
    function get_Fill: DNFillFormat;
    function get_ShadowEffect: DNShadowEffect;
    function get_Reflection: DNReflectionEffect;
    function get_Glow: DNGlowEffect;
    function get_SoftEdges: Double;
    procedure set_SoftEdges(value: Double);
    function get_ThreeDFormat: DNThreeDFormat;
    function get_TextFrame: DNMsoTextFrame;
    function get_FormatPicture: DNMsoFormatPicture;
    function get_IsHidden: Boolean;
    procedure set_IsHidden(value: Boolean);
    function get_IsLockAspectRatio: Boolean;
    procedure set_IsLockAspectRatio(value: Boolean);
    function get_RotationAngle: Double;
    procedure set_RotationAngle(value: Double);
    function get_Hyperlink: DNHyperlink;
    function get_Id: Int32;
    function get_Spid: string;
    function get_Spt: Int32;
    function get_Worksheet: DNWorksheet;
    function get_IsGroup: Boolean;
    function get_IsWordArt: Boolean;
    function get_TextEffect: DNTextEffectFormat;
    function get_IsLocked: Boolean;
    procedure set_IsLocked(value: Boolean);
    function get_IsPrintable: Boolean;
    procedure set_IsPrintable(value: Boolean);
    function get_MsoDrawingType: DNMsoDrawingType;
    function get_AutoShapeType: DNAutoShapeType;
    procedure set_AutoShapeType(value: DNAutoShapeType);
    function get_AnchorType: DNShapeAnchorType;
    procedure set_AnchorType(value: DNShapeAnchorType);
    function get_Placement: DNPlacementType;
    procedure set_Placement(value: DNPlacementType);
    function get_UpperLeftRow: Int32;
    procedure set_UpperLeftRow(value: Int32);
    function get_UpperDeltaY: Int32;
    procedure set_UpperDeltaY(value: Int32);
    function get_UpperLeftColumn: Int32;
    procedure set_UpperLeftColumn(value: Int32);
    function get_UpperDeltaX: Int32;
    procedure set_UpperDeltaX(value: Int32);
    function get_LowerRightRow: Int32;
    procedure set_LowerRightRow(value: Int32);
    function get_LowerDeltaY: Int32;
    procedure set_LowerDeltaY(value: Int32);
    function get_LowerRightColumn: Int32;
    procedure set_LowerRightColumn(value: Int32);
    function get_LowerDeltaX: Int32;
    procedure set_LowerDeltaX(value: Int32);
    function get_Right: Int32;
    procedure set_Right(value: Int32);
    function get_Bottom: Int32;
    procedure set_Bottom(value: Int32);
    function get_Width: Int32;
    procedure set_Width(value: Int32);
    function get_WidthInch: Double;
    procedure set_WidthInch(value: Double);
    function get_WidthPt: Double;
    procedure set_WidthPt(value: Double);
    function get_WidthCM: Double;
    procedure set_WidthCM(value: Double);
    function get_Height: Int32;
    procedure set_Height(value: Int32);
    function get_HeightInch: Double;
    procedure set_HeightInch(value: Double);
    function get_HeightPt: Double;
    procedure set_HeightPt(value: Double);
    function get_HeightCM: Double;
    procedure set_HeightCM(value: Double);
    function get_Left: Int32;
    procedure set_Left(value: Int32);
    function get_LeftInch: Double;
    procedure set_LeftInch(value: Double);
    function get_LeftCM: Double;
    procedure set_LeftCM(value: Double);
    function get_Top: Int32;
    procedure set_Top(value: Int32);
    function get_TopInch: Double;
    procedure set_TopInch(value: Double);
    function get_TopCM: Double;
    procedure set_TopCM(value: Double);
    function get_TopToCorner: Int32;
    procedure set_TopToCorner(value: Int32);
    function get_LeftToCorner: Int32;
    procedure set_LeftToCorner(value: Int32);
    function get_X: Int32;
    procedure set_X(value: Int32);
    function get_Y: Int32;
    procedure set_Y(value: Int32);
    function get_WidthScale: Int32;
    procedure set_WidthScale(value: Int32);
    function get_HeightScale: Int32;
    procedure set_HeightScale(value: Int32);
    function get_TopInShape: Int32;
    procedure set_TopInShape(value: Int32);
    function get_LeftInShape: Int32;
    procedure set_LeftInShape(value: Int32);
    function get_WidthInShape: Int32;
    procedure set_WidthInShape(value: Int32);
    function get_HeightInShape: Int32;
    procedure set_HeightInShape(value: Int32);
    function get_Group: DNGroupShape;
    function get_Type: DNAutoShapeType;
    function get_HasLine: Boolean;
    procedure set_HasLine(value: Boolean);
    function get_IsFilled: Boolean;
    procedure set_IsFilled(value: Boolean);
    function get_IsFlippedHorizontally: Boolean;
    procedure set_IsFlippedHorizontally(value: Boolean);
    function get_IsFlippedVertically: Boolean;
    procedure set_IsFlippedVertically(value: Boolean);
    function get_ActualLowerRightRow: Int32;
    function get_ConnectionPoints: TArray<DDN.System.Drawing.DNPointF>;
    function get_RelativeToOriginalPictureSize: Boolean;
    procedure set_RelativeToOriginalPictureSize(value: Boolean);
    function get_LinkedCell: string;
    procedure set_LinkedCell(value: string);
    function get_InputRange: string;
    procedure set_InputRange(value: string);
    function get_TextShapeType: DNAutoShapeType;
    procedure set_TextShapeType(value: DNAutoShapeType);
    function get_TextBody: DNFontSettingCollection;
    function get_Font: DNFont;
    procedure set_Font(value: DNFont);
    function get_TextOptions: DNTextOptions;
    procedure set_TextOptions(value: DNTextOptions);
    function get_Text: string;
    procedure set_Text(value: string);
    function get_IsRichText: Boolean;
    function get_HtmlText: string;
    procedure set_HtmlText(value: string);
    function get_TextVerticalOverflow: DNTextOverflowType;
    procedure set_TextVerticalOverflow(value: DNTextOverflowType);
    function get_TextHorizontalOverflow: DNTextOverflowType;
    procedure set_TextHorizontalOverflow(value: DNTextOverflowType);
    function get_IsTextWrapped: Boolean;
    procedure set_IsTextWrapped(value: Boolean);
    function get_TextOrientationType: DNTextOrientationType;
    procedure set_TextOrientationType(value: DNTextOrientationType);
    function get_TextHorizontalAlignment: DNTextAlignmentType;
    procedure set_TextHorizontalAlignment(value: DNTextAlignmentType);
    function get_TextVerticalAlignment: DNTextAlignmentType;
    procedure set_TextVerticalAlignment(value: DNTextAlignmentType);
    function get_TextDirection: DNTextDirectionType;
    procedure set_TextDirection(value: DNTextDirectionType);
    function get_ControlData: TArray<Byte>;
    function get_ActiveXControl: DNActiveXControl;
    function get_Paths: DNShapePathCollection;
    function get_Geometry: DNGeometry;

  { methods } 

    function CalculateTextSize: TArray<Int32>;
    procedure FormatCharacters(startIndex: Int32; length: Int32; font: DNFont; flag: DNStyleFlag); overload;
    procedure FormatCharacters(startIndex: Int32; length: Int32; font: DNFont); overload;
    function Characters(startIndex: Int32; length: Int32): DNFontSetting;
    function GetCharacters: DDN.mscorlib.DNArrayList;
    procedure RemoveActiveXControl;
    procedure ToImage(stream: DDN.mscorlib.DNStream; imageFormat: DDN.System.Drawing.DNImageFormat); overload;
    procedure ToImage(imageFile: string; options: DNImageOrPrintOptions); overload;
    procedure ToImage(stream: DDN.mscorlib.DNStream; options: DNImageOrPrintOptions); overload;
    function ToImage(options: DNImageOrPrintOptions): DDN.System.Drawing.DNBitmap; overload;
    function GetLinkedCell(isR1C1: Boolean; isLocal: Boolean): string;
    procedure SetLinkedCell(formula: string; isR1C1: Boolean; isLocal: Boolean);
    function GetInputRange(isR1C1: Boolean; isLocal: Boolean): string;
    procedure SetInputRange(formula: string; isR1C1: Boolean; isLocal: Boolean);
    procedure UpdateSelectedValue;
    function GetResultOfSmartArt: DNGroupShape;
    procedure ToFrontOrBack(orders: Int32);
    function GetLockedProperty(&type: DNShapeLockType): Boolean;
    procedure SetLockedProperty(&type: DNShapeLockType; value: Boolean);
    function AddHyperlink(address: string): DNHyperlink;
    procedure RemoveHyperlink;
    procedure MoveToRange(upperLeftRow: Int32; upperLeftColumn: Int32; lowerRightRow: Int32; lowerRightColumn: Int32);
    procedure AlignTopRightCorner(topRow: Int32; rightColumn: Int32);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Value: Boolean read get_Value write set_Value;
    property CheckValue: DNCheckValueType read get_CheckValue write set_CheckValue;
    property CheckedValue: DNCheckValueType read get_CheckedValue write set_CheckedValue;
    property Shadow: Boolean read get_Shadow write set_Shadow;
    property MacroName: string read get_MacroName write set_MacroName;
    property IsEquation: Boolean read get_IsEquation;
    property IsSmartArt: Boolean read get_IsSmartArt;
    property ZOrderPosition: Int32 read get_ZOrderPosition write set_ZOrderPosition;
    property Name: string read get_Name write set_Name;
    property AlternativeText: string read get_AlternativeText write set_AlternativeText;
    property Title: string read get_Title write set_Title;
    property LineFormat: DNMsoLineFormat read get_LineFormat;
    property FillFormat: DNMsoFillFormat read get_FillFormat;
    property Format: DNShapeFormat read get_Format;
    property Line: DNLineFormat read get_Line;
    property Fill: DNFillFormat read get_Fill;
    property ShadowEffect: DNShadowEffect read get_ShadowEffect;
    property Reflection: DNReflectionEffect read get_Reflection;
    property Glow: DNGlowEffect read get_Glow;
    property SoftEdges: Double read get_SoftEdges write set_SoftEdges;
    property ThreeDFormat: DNThreeDFormat read get_ThreeDFormat;
    property TextFrame: DNMsoTextFrame read get_TextFrame;
    property FormatPicture: DNMsoFormatPicture read get_FormatPicture;
    property IsHidden: Boolean read get_IsHidden write set_IsHidden;
    property IsLockAspectRatio: Boolean read get_IsLockAspectRatio write set_IsLockAspectRatio;
    property RotationAngle: Double read get_RotationAngle write set_RotationAngle;
    property Hyperlink: DNHyperlink read get_Hyperlink;
    property Id: Int32 read get_Id;
    property Spid: string read get_Spid;
    property Spt: Int32 read get_Spt;
    property Worksheet: DNWorksheet read get_Worksheet;
    property IsGroup: Boolean read get_IsGroup;
    property IsWordArt: Boolean read get_IsWordArt;
    property TextEffect: DNTextEffectFormat read get_TextEffect;
    property IsLocked: Boolean read get_IsLocked write set_IsLocked;
    property IsPrintable: Boolean read get_IsPrintable write set_IsPrintable;
    property MsoDrawingType: DNMsoDrawingType read get_MsoDrawingType;
    property AutoShapeType: DNAutoShapeType read get_AutoShapeType write set_AutoShapeType;
    property AnchorType: DNShapeAnchorType read get_AnchorType write set_AnchorType;
    property Placement: DNPlacementType read get_Placement write set_Placement;
    property UpperLeftRow: Int32 read get_UpperLeftRow write set_UpperLeftRow;
    property UpperDeltaY: Int32 read get_UpperDeltaY write set_UpperDeltaY;
    property UpperLeftColumn: Int32 read get_UpperLeftColumn write set_UpperLeftColumn;
    property UpperDeltaX: Int32 read get_UpperDeltaX write set_UpperDeltaX;
    property LowerRightRow: Int32 read get_LowerRightRow write set_LowerRightRow;
    property LowerDeltaY: Int32 read get_LowerDeltaY write set_LowerDeltaY;
    property LowerRightColumn: Int32 read get_LowerRightColumn write set_LowerRightColumn;
    property LowerDeltaX: Int32 read get_LowerDeltaX write set_LowerDeltaX;
    property Right: Int32 read get_Right write set_Right;
    property Bottom: Int32 read get_Bottom write set_Bottom;
    property Width: Int32 read get_Width write set_Width;
    property WidthInch: Double read get_WidthInch write set_WidthInch;
    property WidthPt: Double read get_WidthPt write set_WidthPt;
    property WidthCM: Double read get_WidthCM write set_WidthCM;
    property Height: Int32 read get_Height write set_Height;
    property HeightInch: Double read get_HeightInch write set_HeightInch;
    property HeightPt: Double read get_HeightPt write set_HeightPt;
    property HeightCM: Double read get_HeightCM write set_HeightCM;
    property Left: Int32 read get_Left write set_Left;
    property LeftInch: Double read get_LeftInch write set_LeftInch;
    property LeftCM: Double read get_LeftCM write set_LeftCM;
    property Top: Int32 read get_Top write set_Top;
    property TopInch: Double read get_TopInch write set_TopInch;
    property TopCM: Double read get_TopCM write set_TopCM;
    property TopToCorner: Int32 read get_TopToCorner write set_TopToCorner;
    property LeftToCorner: Int32 read get_LeftToCorner write set_LeftToCorner;
    property X: Int32 read get_X write set_X;
    property Y: Int32 read get_Y write set_Y;
    property WidthScale: Int32 read get_WidthScale write set_WidthScale;
    property HeightScale: Int32 read get_HeightScale write set_HeightScale;
    property TopInShape: Int32 read get_TopInShape write set_TopInShape;
    property LeftInShape: Int32 read get_LeftInShape write set_LeftInShape;
    property WidthInShape: Int32 read get_WidthInShape write set_WidthInShape;
    property HeightInShape: Int32 read get_HeightInShape write set_HeightInShape;
    property Group: DNGroupShape read get_Group;
    property &Type: DNAutoShapeType read get_Type;
    property HasLine: Boolean read get_HasLine write set_HasLine;
    property IsFilled: Boolean read get_IsFilled write set_IsFilled;
    property IsFlippedHorizontally: Boolean read get_IsFlippedHorizontally write set_IsFlippedHorizontally;
    property IsFlippedVertically: Boolean read get_IsFlippedVertically write set_IsFlippedVertically;
    property ActualLowerRightRow: Int32 read get_ActualLowerRightRow;
    property ConnectionPoints: TArray<DDN.System.Drawing.DNPointF> read get_ConnectionPoints;
    property RelativeToOriginalPictureSize: Boolean read get_RelativeToOriginalPictureSize write set_RelativeToOriginalPictureSize;
    property LinkedCell: string read get_LinkedCell write set_LinkedCell;
    property InputRange: string read get_InputRange write set_InputRange;
    property TextShapeType: DNAutoShapeType read get_TextShapeType write set_TextShapeType;
    property TextBody: DNFontSettingCollection read get_TextBody;
    property Font: DNFont read get_Font write set_Font;
    property TextOptions: DNTextOptions read get_TextOptions write set_TextOptions;
    property Text: string read get_Text write set_Text;
    property IsRichText: Boolean read get_IsRichText;
    property HtmlText: string read get_HtmlText write set_HtmlText;
    property TextVerticalOverflow: DNTextOverflowType read get_TextVerticalOverflow write set_TextVerticalOverflow;
    property TextHorizontalOverflow: DNTextOverflowType read get_TextHorizontalOverflow write set_TextHorizontalOverflow;
    property IsTextWrapped: Boolean read get_IsTextWrapped write set_IsTextWrapped;
    property TextOrientationType: DNTextOrientationType read get_TextOrientationType write set_TextOrientationType;
    property TextHorizontalAlignment: DNTextAlignmentType read get_TextHorizontalAlignment write set_TextHorizontalAlignment;
    property TextVerticalAlignment: DNTextAlignmentType read get_TextVerticalAlignment write set_TextVerticalAlignment;
    property TextDirection: DNTextDirectionType read get_TextDirection write set_TextDirection;
    property ControlData: TArray<Byte> read get_ControlData;
    property ActiveXControl: DNActiveXControl read get_ActiveXControl;
    property Paths: DNShapePathCollection read get_Paths;
    property Geometry: DNGeometry read get_Geometry;
  end;

  TDNCheckBox = class(TDNGenericImport<DNCheckBoxClass, DNCheckBox>) end;

  //-------------namespace: Aspose.Cells.Drawing----------------
  DNComboBoxClass = interface(DNShapeClass)
  ['{A69EB8E8-C05F-58C4-B10F-FE556B1DF904}']
  end;

  [DNTypeName('Aspose.Cells.Drawing.ComboBox')]
  DNComboBox = interface(DNShape)
  ['{180BB5C7-BBEF-3459-BE7A-8543B46D3FBF}']
  { getters & setters } 

    function get_SelectedIndex: Int32;
    procedure set_SelectedIndex(value: Int32);
    function get_SelectedValue: string;
    function get_SelectedCell: DNCell;
    function get_Shadow: Boolean;
    procedure set_Shadow(value: Boolean);
    function get_DropDownLines: Int32;
    procedure set_DropDownLines(value: Int32);
    function get_MacroName: string;
    procedure set_MacroName(value: string);
    function get_IsEquation: Boolean;
    function get_IsSmartArt: Boolean;
    function get_ZOrderPosition: Int32;
    procedure set_ZOrderPosition(value: Int32);
    function get_Name: string;
    procedure set_Name(value: string);
    function get_AlternativeText: string;
    procedure set_AlternativeText(value: string);
    function get_Title: string;
    procedure set_Title(value: string);
    function get_LineFormat: DNMsoLineFormat;
    function get_FillFormat: DNMsoFillFormat;
    function get_Format: DNShapeFormat;
    function get_Line: DNLineFormat;
    function get_Fill: DNFillFormat;
    function get_ShadowEffect: DNShadowEffect;
    function get_Reflection: DNReflectionEffect;
    function get_Glow: DNGlowEffect;
    function get_SoftEdges: Double;
    procedure set_SoftEdges(value: Double);
    function get_ThreeDFormat: DNThreeDFormat;
    function get_TextFrame: DNMsoTextFrame;
    function get_FormatPicture: DNMsoFormatPicture;
    function get_IsHidden: Boolean;
    procedure set_IsHidden(value: Boolean);
    function get_IsLockAspectRatio: Boolean;
    procedure set_IsLockAspectRatio(value: Boolean);
    function get_RotationAngle: Double;
    procedure set_RotationAngle(value: Double);
    function get_Hyperlink: DNHyperlink;
    function get_Id: Int32;
    function get_Spid: string;
    function get_Spt: Int32;
    function get_Worksheet: DNWorksheet;
    function get_IsGroup: Boolean;
    function get_IsWordArt: Boolean;
    function get_TextEffect: DNTextEffectFormat;
    function get_IsLocked: Boolean;
    procedure set_IsLocked(value: Boolean);
    function get_IsPrintable: Boolean;
    procedure set_IsPrintable(value: Boolean);
    function get_MsoDrawingType: DNMsoDrawingType;
    function get_AutoShapeType: DNAutoShapeType;
    procedure set_AutoShapeType(value: DNAutoShapeType);
    function get_AnchorType: DNShapeAnchorType;
    procedure set_AnchorType(value: DNShapeAnchorType);
    function get_Placement: DNPlacementType;
    procedure set_Placement(value: DNPlacementType);
    function get_UpperLeftRow: Int32;
    procedure set_UpperLeftRow(value: Int32);
    function get_UpperDeltaY: Int32;
    procedure set_UpperDeltaY(value: Int32);
    function get_UpperLeftColumn: Int32;
    procedure set_UpperLeftColumn(value: Int32);
    function get_UpperDeltaX: Int32;
    procedure set_UpperDeltaX(value: Int32);
    function get_LowerRightRow: Int32;
    procedure set_LowerRightRow(value: Int32);
    function get_LowerDeltaY: Int32;
    procedure set_LowerDeltaY(value: Int32);
    function get_LowerRightColumn: Int32;
    procedure set_LowerRightColumn(value: Int32);
    function get_LowerDeltaX: Int32;
    procedure set_LowerDeltaX(value: Int32);
    function get_Right: Int32;
    procedure set_Right(value: Int32);
    function get_Bottom: Int32;
    procedure set_Bottom(value: Int32);
    function get_Width: Int32;
    procedure set_Width(value: Int32);
    function get_WidthInch: Double;
    procedure set_WidthInch(value: Double);
    function get_WidthPt: Double;
    procedure set_WidthPt(value: Double);
    function get_WidthCM: Double;
    procedure set_WidthCM(value: Double);
    function get_Height: Int32;
    procedure set_Height(value: Int32);
    function get_HeightInch: Double;
    procedure set_HeightInch(value: Double);
    function get_HeightPt: Double;
    procedure set_HeightPt(value: Double);
    function get_HeightCM: Double;
    procedure set_HeightCM(value: Double);
    function get_Left: Int32;
    procedure set_Left(value: Int32);
    function get_LeftInch: Double;
    procedure set_LeftInch(value: Double);
    function get_LeftCM: Double;
    procedure set_LeftCM(value: Double);
    function get_Top: Int32;
    procedure set_Top(value: Int32);
    function get_TopInch: Double;
    procedure set_TopInch(value: Double);
    function get_TopCM: Double;
    procedure set_TopCM(value: Double);
    function get_TopToCorner: Int32;
    procedure set_TopToCorner(value: Int32);
    function get_LeftToCorner: Int32;
    procedure set_LeftToCorner(value: Int32);
    function get_X: Int32;
    procedure set_X(value: Int32);
    function get_Y: Int32;
    procedure set_Y(value: Int32);
    function get_WidthScale: Int32;
    procedure set_WidthScale(value: Int32);
    function get_HeightScale: Int32;
    procedure set_HeightScale(value: Int32);
    function get_TopInShape: Int32;
    procedure set_TopInShape(value: Int32);
    function get_LeftInShape: Int32;
    procedure set_LeftInShape(value: Int32);
    function get_WidthInShape: Int32;
    procedure set_WidthInShape(value: Int32);
    function get_HeightInShape: Int32;
    procedure set_HeightInShape(value: Int32);
    function get_Group: DNGroupShape;
    function get_Type: DNAutoShapeType;
    function get_HasLine: Boolean;
    procedure set_HasLine(value: Boolean);
    function get_IsFilled: Boolean;
    procedure set_IsFilled(value: Boolean);
    function get_IsFlippedHorizontally: Boolean;
    procedure set_IsFlippedHorizontally(value: Boolean);
    function get_IsFlippedVertically: Boolean;
    procedure set_IsFlippedVertically(value: Boolean);
    function get_ActualLowerRightRow: Int32;
    function get_ConnectionPoints: TArray<DDN.System.Drawing.DNPointF>;
    function get_RelativeToOriginalPictureSize: Boolean;
    procedure set_RelativeToOriginalPictureSize(value: Boolean);
    function get_LinkedCell: string;
    procedure set_LinkedCell(value: string);
    function get_InputRange: string;
    procedure set_InputRange(value: string);
    function get_TextShapeType: DNAutoShapeType;
    procedure set_TextShapeType(value: DNAutoShapeType);
    function get_TextBody: DNFontSettingCollection;
    function get_Font: DNFont;
    procedure set_Font(value: DNFont);
    function get_TextOptions: DNTextOptions;
    procedure set_TextOptions(value: DNTextOptions);
    function get_Text: string;
    procedure set_Text(value: string);
    function get_IsRichText: Boolean;
    function get_HtmlText: string;
    procedure set_HtmlText(value: string);
    function get_TextVerticalOverflow: DNTextOverflowType;
    procedure set_TextVerticalOverflow(value: DNTextOverflowType);
    function get_TextHorizontalOverflow: DNTextOverflowType;
    procedure set_TextHorizontalOverflow(value: DNTextOverflowType);
    function get_IsTextWrapped: Boolean;
    procedure set_IsTextWrapped(value: Boolean);
    function get_TextOrientationType: DNTextOrientationType;
    procedure set_TextOrientationType(value: DNTextOrientationType);
    function get_TextHorizontalAlignment: DNTextAlignmentType;
    procedure set_TextHorizontalAlignment(value: DNTextAlignmentType);
    function get_TextVerticalAlignment: DNTextAlignmentType;
    procedure set_TextVerticalAlignment(value: DNTextAlignmentType);
    function get_TextDirection: DNTextDirectionType;
    procedure set_TextDirection(value: DNTextDirectionType);
    function get_ControlData: TArray<Byte>;
    function get_ActiveXControl: DNActiveXControl;
    function get_Paths: DNShapePathCollection;
    function get_Geometry: DNGeometry;

  { methods } 

    function CalculateTextSize: TArray<Int32>;
    procedure FormatCharacters(startIndex: Int32; length: Int32; font: DNFont; flag: DNStyleFlag); overload;
    procedure FormatCharacters(startIndex: Int32; length: Int32; font: DNFont); overload;
    function Characters(startIndex: Int32; length: Int32): DNFontSetting;
    function GetCharacters: DDN.mscorlib.DNArrayList;
    procedure RemoveActiveXControl;
    procedure ToImage(stream: DDN.mscorlib.DNStream; imageFormat: DDN.System.Drawing.DNImageFormat); overload;
    procedure ToImage(imageFile: string; options: DNImageOrPrintOptions); overload;
    procedure ToImage(stream: DDN.mscorlib.DNStream; options: DNImageOrPrintOptions); overload;
    function ToImage(options: DNImageOrPrintOptions): DDN.System.Drawing.DNBitmap; overload;
    function GetLinkedCell(isR1C1: Boolean; isLocal: Boolean): string;
    procedure SetLinkedCell(formula: string; isR1C1: Boolean; isLocal: Boolean);
    function GetInputRange(isR1C1: Boolean; isLocal: Boolean): string;
    procedure SetInputRange(formula: string; isR1C1: Boolean; isLocal: Boolean);
    procedure UpdateSelectedValue;
    function GetResultOfSmartArt: DNGroupShape;
    procedure ToFrontOrBack(orders: Int32);
    function GetLockedProperty(&type: DNShapeLockType): Boolean;
    procedure SetLockedProperty(&type: DNShapeLockType; value: Boolean);
    function AddHyperlink(address: string): DNHyperlink;
    procedure RemoveHyperlink;
    procedure MoveToRange(upperLeftRow: Int32; upperLeftColumn: Int32; lowerRightRow: Int32; lowerRightColumn: Int32);
    procedure AlignTopRightCorner(topRow: Int32; rightColumn: Int32);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property SelectedIndex: Int32 read get_SelectedIndex write set_SelectedIndex;
    property SelectedValue: string read get_SelectedValue;
    property SelectedCell: DNCell read get_SelectedCell;
    property Shadow: Boolean read get_Shadow write set_Shadow;
    property DropDownLines: Int32 read get_DropDownLines write set_DropDownLines;
    property MacroName: string read get_MacroName write set_MacroName;
    property IsEquation: Boolean read get_IsEquation;
    property IsSmartArt: Boolean read get_IsSmartArt;
    property ZOrderPosition: Int32 read get_ZOrderPosition write set_ZOrderPosition;
    property Name: string read get_Name write set_Name;
    property AlternativeText: string read get_AlternativeText write set_AlternativeText;
    property Title: string read get_Title write set_Title;
    property LineFormat: DNMsoLineFormat read get_LineFormat;
    property FillFormat: DNMsoFillFormat read get_FillFormat;
    property Format: DNShapeFormat read get_Format;
    property Line: DNLineFormat read get_Line;
    property Fill: DNFillFormat read get_Fill;
    property ShadowEffect: DNShadowEffect read get_ShadowEffect;
    property Reflection: DNReflectionEffect read get_Reflection;
    property Glow: DNGlowEffect read get_Glow;
    property SoftEdges: Double read get_SoftEdges write set_SoftEdges;
    property ThreeDFormat: DNThreeDFormat read get_ThreeDFormat;
    property TextFrame: DNMsoTextFrame read get_TextFrame;
    property FormatPicture: DNMsoFormatPicture read get_FormatPicture;
    property IsHidden: Boolean read get_IsHidden write set_IsHidden;
    property IsLockAspectRatio: Boolean read get_IsLockAspectRatio write set_IsLockAspectRatio;
    property RotationAngle: Double read get_RotationAngle write set_RotationAngle;
    property Hyperlink: DNHyperlink read get_Hyperlink;
    property Id: Int32 read get_Id;
    property Spid: string read get_Spid;
    property Spt: Int32 read get_Spt;
    property Worksheet: DNWorksheet read get_Worksheet;
    property IsGroup: Boolean read get_IsGroup;
    property IsWordArt: Boolean read get_IsWordArt;
    property TextEffect: DNTextEffectFormat read get_TextEffect;
    property IsLocked: Boolean read get_IsLocked write set_IsLocked;
    property IsPrintable: Boolean read get_IsPrintable write set_IsPrintable;
    property MsoDrawingType: DNMsoDrawingType read get_MsoDrawingType;
    property AutoShapeType: DNAutoShapeType read get_AutoShapeType write set_AutoShapeType;
    property AnchorType: DNShapeAnchorType read get_AnchorType write set_AnchorType;
    property Placement: DNPlacementType read get_Placement write set_Placement;
    property UpperLeftRow: Int32 read get_UpperLeftRow write set_UpperLeftRow;
    property UpperDeltaY: Int32 read get_UpperDeltaY write set_UpperDeltaY;
    property UpperLeftColumn: Int32 read get_UpperLeftColumn write set_UpperLeftColumn;
    property UpperDeltaX: Int32 read get_UpperDeltaX write set_UpperDeltaX;
    property LowerRightRow: Int32 read get_LowerRightRow write set_LowerRightRow;
    property LowerDeltaY: Int32 read get_LowerDeltaY write set_LowerDeltaY;
    property LowerRightColumn: Int32 read get_LowerRightColumn write set_LowerRightColumn;
    property LowerDeltaX: Int32 read get_LowerDeltaX write set_LowerDeltaX;
    property Right: Int32 read get_Right write set_Right;
    property Bottom: Int32 read get_Bottom write set_Bottom;
    property Width: Int32 read get_Width write set_Width;
    property WidthInch: Double read get_WidthInch write set_WidthInch;
    property WidthPt: Double read get_WidthPt write set_WidthPt;
    property WidthCM: Double read get_WidthCM write set_WidthCM;
    property Height: Int32 read get_Height write set_Height;
    property HeightInch: Double read get_HeightInch write set_HeightInch;
    property HeightPt: Double read get_HeightPt write set_HeightPt;
    property HeightCM: Double read get_HeightCM write set_HeightCM;
    property Left: Int32 read get_Left write set_Left;
    property LeftInch: Double read get_LeftInch write set_LeftInch;
    property LeftCM: Double read get_LeftCM write set_LeftCM;
    property Top: Int32 read get_Top write set_Top;
    property TopInch: Double read get_TopInch write set_TopInch;
    property TopCM: Double read get_TopCM write set_TopCM;
    property TopToCorner: Int32 read get_TopToCorner write set_TopToCorner;
    property LeftToCorner: Int32 read get_LeftToCorner write set_LeftToCorner;
    property X: Int32 read get_X write set_X;
    property Y: Int32 read get_Y write set_Y;
    property WidthScale: Int32 read get_WidthScale write set_WidthScale;
    property HeightScale: Int32 read get_HeightScale write set_HeightScale;
    property TopInShape: Int32 read get_TopInShape write set_TopInShape;
    property LeftInShape: Int32 read get_LeftInShape write set_LeftInShape;
    property WidthInShape: Int32 read get_WidthInShape write set_WidthInShape;
    property HeightInShape: Int32 read get_HeightInShape write set_HeightInShape;
    property Group: DNGroupShape read get_Group;
    property &Type: DNAutoShapeType read get_Type;
    property HasLine: Boolean read get_HasLine write set_HasLine;
    property IsFilled: Boolean read get_IsFilled write set_IsFilled;
    property IsFlippedHorizontally: Boolean read get_IsFlippedHorizontally write set_IsFlippedHorizontally;
    property IsFlippedVertically: Boolean read get_IsFlippedVertically write set_IsFlippedVertically;
    property ActualLowerRightRow: Int32 read get_ActualLowerRightRow;
    property ConnectionPoints: TArray<DDN.System.Drawing.DNPointF> read get_ConnectionPoints;
    property RelativeToOriginalPictureSize: Boolean read get_RelativeToOriginalPictureSize write set_RelativeToOriginalPictureSize;
    property LinkedCell: string read get_LinkedCell write set_LinkedCell;
    property InputRange: string read get_InputRange write set_InputRange;
    property TextShapeType: DNAutoShapeType read get_TextShapeType write set_TextShapeType;
    property TextBody: DNFontSettingCollection read get_TextBody;
    property Font: DNFont read get_Font write set_Font;
    property TextOptions: DNTextOptions read get_TextOptions write set_TextOptions;
    property Text: string read get_Text write set_Text;
    property IsRichText: Boolean read get_IsRichText;
    property HtmlText: string read get_HtmlText write set_HtmlText;
    property TextVerticalOverflow: DNTextOverflowType read get_TextVerticalOverflow write set_TextVerticalOverflow;
    property TextHorizontalOverflow: DNTextOverflowType read get_TextHorizontalOverflow write set_TextHorizontalOverflow;
    property IsTextWrapped: Boolean read get_IsTextWrapped write set_IsTextWrapped;
    property TextOrientationType: DNTextOrientationType read get_TextOrientationType write set_TextOrientationType;
    property TextHorizontalAlignment: DNTextAlignmentType read get_TextHorizontalAlignment write set_TextHorizontalAlignment;
    property TextVerticalAlignment: DNTextAlignmentType read get_TextVerticalAlignment write set_TextVerticalAlignment;
    property TextDirection: DNTextDirectionType read get_TextDirection write set_TextDirection;
    property ControlData: TArray<Byte> read get_ControlData;
    property ActiveXControl: DNActiveXControl read get_ActiveXControl;
    property Paths: DNShapePathCollection read get_Paths;
    property Geometry: DNGeometry read get_Geometry;
  end;

  TDNComboBox = class(TDNGenericImport<DNComboBoxClass, DNComboBox>) end;

  //-------------namespace: Aspose.Cells.Drawing----------------
  DNCommentShapeClass = interface(DNShapeClass)
  ['{DC6B4946-5CAB-5A96-B250-E966D2CF5518}']
  end;

  [DNTypeName('Aspose.Cells.Drawing.CommentShape')]
  DNCommentShape = interface(DNShape)
  ['{80507E65-76B3-35C5-A346-976DF9BBF8B5}']
  { getters & setters } 

    function get_Comment: DNComment;
    function get_MacroName: string;
    procedure set_MacroName(value: string);
    function get_IsEquation: Boolean;
    function get_IsSmartArt: Boolean;
    function get_ZOrderPosition: Int32;
    procedure set_ZOrderPosition(value: Int32);
    function get_Name: string;
    procedure set_Name(value: string);
    function get_AlternativeText: string;
    procedure set_AlternativeText(value: string);
    function get_Title: string;
    procedure set_Title(value: string);
    function get_LineFormat: DNMsoLineFormat;
    function get_FillFormat: DNMsoFillFormat;
    function get_Format: DNShapeFormat;
    function get_Line: DNLineFormat;
    function get_Fill: DNFillFormat;
    function get_ShadowEffect: DNShadowEffect;
    function get_Reflection: DNReflectionEffect;
    function get_Glow: DNGlowEffect;
    function get_SoftEdges: Double;
    procedure set_SoftEdges(value: Double);
    function get_ThreeDFormat: DNThreeDFormat;
    function get_TextFrame: DNMsoTextFrame;
    function get_FormatPicture: DNMsoFormatPicture;
    function get_IsHidden: Boolean;
    procedure set_IsHidden(value: Boolean);
    function get_IsLockAspectRatio: Boolean;
    procedure set_IsLockAspectRatio(value: Boolean);
    function get_RotationAngle: Double;
    procedure set_RotationAngle(value: Double);
    function get_Hyperlink: DNHyperlink;
    function get_Id: Int32;
    function get_Spid: string;
    function get_Spt: Int32;
    function get_Worksheet: DNWorksheet;
    function get_IsGroup: Boolean;
    function get_IsWordArt: Boolean;
    function get_TextEffect: DNTextEffectFormat;
    function get_IsLocked: Boolean;
    procedure set_IsLocked(value: Boolean);
    function get_IsPrintable: Boolean;
    procedure set_IsPrintable(value: Boolean);
    function get_MsoDrawingType: DNMsoDrawingType;
    function get_AutoShapeType: DNAutoShapeType;
    procedure set_AutoShapeType(value: DNAutoShapeType);
    function get_AnchorType: DNShapeAnchorType;
    procedure set_AnchorType(value: DNShapeAnchorType);
    function get_Placement: DNPlacementType;
    procedure set_Placement(value: DNPlacementType);
    function get_UpperLeftRow: Int32;
    procedure set_UpperLeftRow(value: Int32);
    function get_UpperDeltaY: Int32;
    procedure set_UpperDeltaY(value: Int32);
    function get_UpperLeftColumn: Int32;
    procedure set_UpperLeftColumn(value: Int32);
    function get_UpperDeltaX: Int32;
    procedure set_UpperDeltaX(value: Int32);
    function get_LowerRightRow: Int32;
    procedure set_LowerRightRow(value: Int32);
    function get_LowerDeltaY: Int32;
    procedure set_LowerDeltaY(value: Int32);
    function get_LowerRightColumn: Int32;
    procedure set_LowerRightColumn(value: Int32);
    function get_LowerDeltaX: Int32;
    procedure set_LowerDeltaX(value: Int32);
    function get_Right: Int32;
    procedure set_Right(value: Int32);
    function get_Bottom: Int32;
    procedure set_Bottom(value: Int32);
    function get_Width: Int32;
    procedure set_Width(value: Int32);
    function get_WidthInch: Double;
    procedure set_WidthInch(value: Double);
    function get_WidthPt: Double;
    procedure set_WidthPt(value: Double);
    function get_WidthCM: Double;
    procedure set_WidthCM(value: Double);
    function get_Height: Int32;
    procedure set_Height(value: Int32);
    function get_HeightInch: Double;
    procedure set_HeightInch(value: Double);
    function get_HeightPt: Double;
    procedure set_HeightPt(value: Double);
    function get_HeightCM: Double;
    procedure set_HeightCM(value: Double);
    function get_Left: Int32;
    procedure set_Left(value: Int32);
    function get_LeftInch: Double;
    procedure set_LeftInch(value: Double);
    function get_LeftCM: Double;
    procedure set_LeftCM(value: Double);
    function get_Top: Int32;
    procedure set_Top(value: Int32);
    function get_TopInch: Double;
    procedure set_TopInch(value: Double);
    function get_TopCM: Double;
    procedure set_TopCM(value: Double);
    function get_TopToCorner: Int32;
    procedure set_TopToCorner(value: Int32);
    function get_LeftToCorner: Int32;
    procedure set_LeftToCorner(value: Int32);
    function get_X: Int32;
    procedure set_X(value: Int32);
    function get_Y: Int32;
    procedure set_Y(value: Int32);
    function get_WidthScale: Int32;
    procedure set_WidthScale(value: Int32);
    function get_HeightScale: Int32;
    procedure set_HeightScale(value: Int32);
    function get_TopInShape: Int32;
    procedure set_TopInShape(value: Int32);
    function get_LeftInShape: Int32;
    procedure set_LeftInShape(value: Int32);
    function get_WidthInShape: Int32;
    procedure set_WidthInShape(value: Int32);
    function get_HeightInShape: Int32;
    procedure set_HeightInShape(value: Int32);
    function get_Group: DNGroupShape;
    function get_Type: DNAutoShapeType;
    function get_HasLine: Boolean;
    procedure set_HasLine(value: Boolean);
    function get_IsFilled: Boolean;
    procedure set_IsFilled(value: Boolean);
    function get_IsFlippedHorizontally: Boolean;
    procedure set_IsFlippedHorizontally(value: Boolean);
    function get_IsFlippedVertically: Boolean;
    procedure set_IsFlippedVertically(value: Boolean);
    function get_ActualLowerRightRow: Int32;
    function get_ConnectionPoints: TArray<DDN.System.Drawing.DNPointF>;
    function get_RelativeToOriginalPictureSize: Boolean;
    procedure set_RelativeToOriginalPictureSize(value: Boolean);
    function get_LinkedCell: string;
    procedure set_LinkedCell(value: string);
    function get_InputRange: string;
    procedure set_InputRange(value: string);
    function get_TextShapeType: DNAutoShapeType;
    procedure set_TextShapeType(value: DNAutoShapeType);
    function get_TextBody: DNFontSettingCollection;
    function get_Font: DNFont;
    procedure set_Font(value: DNFont);
    function get_TextOptions: DNTextOptions;
    procedure set_TextOptions(value: DNTextOptions);
    function get_Text: string;
    procedure set_Text(value: string);
    function get_IsRichText: Boolean;
    function get_HtmlText: string;
    procedure set_HtmlText(value: string);
    function get_TextVerticalOverflow: DNTextOverflowType;
    procedure set_TextVerticalOverflow(value: DNTextOverflowType);
    function get_TextHorizontalOverflow: DNTextOverflowType;
    procedure set_TextHorizontalOverflow(value: DNTextOverflowType);
    function get_IsTextWrapped: Boolean;
    procedure set_IsTextWrapped(value: Boolean);
    function get_TextOrientationType: DNTextOrientationType;
    procedure set_TextOrientationType(value: DNTextOrientationType);
    function get_TextHorizontalAlignment: DNTextAlignmentType;
    procedure set_TextHorizontalAlignment(value: DNTextAlignmentType);
    function get_TextVerticalAlignment: DNTextAlignmentType;
    procedure set_TextVerticalAlignment(value: DNTextAlignmentType);
    function get_TextDirection: DNTextDirectionType;
    procedure set_TextDirection(value: DNTextDirectionType);
    function get_ControlData: TArray<Byte>;
    function get_ActiveXControl: DNActiveXControl;
    function get_Paths: DNShapePathCollection;
    function get_Geometry: DNGeometry;

  { methods } 

    function CalculateTextSize: TArray<Int32>;
    procedure FormatCharacters(startIndex: Int32; length: Int32; font: DNFont; flag: DNStyleFlag); overload;
    procedure FormatCharacters(startIndex: Int32; length: Int32; font: DNFont); overload;
    function Characters(startIndex: Int32; length: Int32): DNFontSetting;
    function GetCharacters: DDN.mscorlib.DNArrayList;
    procedure RemoveActiveXControl;
    procedure ToImage(stream: DDN.mscorlib.DNStream; imageFormat: DDN.System.Drawing.DNImageFormat); overload;
    procedure ToImage(imageFile: string; options: DNImageOrPrintOptions); overload;
    procedure ToImage(stream: DDN.mscorlib.DNStream; options: DNImageOrPrintOptions); overload;
    function ToImage(options: DNImageOrPrintOptions): DDN.System.Drawing.DNBitmap; overload;
    function GetLinkedCell(isR1C1: Boolean; isLocal: Boolean): string;
    procedure SetLinkedCell(formula: string; isR1C1: Boolean; isLocal: Boolean);
    function GetInputRange(isR1C1: Boolean; isLocal: Boolean): string;
    procedure SetInputRange(formula: string; isR1C1: Boolean; isLocal: Boolean);
    procedure UpdateSelectedValue;
    function GetResultOfSmartArt: DNGroupShape;
    procedure ToFrontOrBack(orders: Int32);
    function GetLockedProperty(&type: DNShapeLockType): Boolean;
    procedure SetLockedProperty(&type: DNShapeLockType; value: Boolean);
    function AddHyperlink(address: string): DNHyperlink;
    procedure RemoveHyperlink;
    procedure MoveToRange(upperLeftRow: Int32; upperLeftColumn: Int32; lowerRightRow: Int32; lowerRightColumn: Int32);
    procedure AlignTopRightCorner(topRow: Int32; rightColumn: Int32);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Comment: DNComment read get_Comment;
    property MacroName: string read get_MacroName write set_MacroName;
    property IsEquation: Boolean read get_IsEquation;
    property IsSmartArt: Boolean read get_IsSmartArt;
    property ZOrderPosition: Int32 read get_ZOrderPosition write set_ZOrderPosition;
    property Name: string read get_Name write set_Name;
    property AlternativeText: string read get_AlternativeText write set_AlternativeText;
    property Title: string read get_Title write set_Title;
    property LineFormat: DNMsoLineFormat read get_LineFormat;
    property FillFormat: DNMsoFillFormat read get_FillFormat;
    property Format: DNShapeFormat read get_Format;
    property Line: DNLineFormat read get_Line;
    property Fill: DNFillFormat read get_Fill;
    property ShadowEffect: DNShadowEffect read get_ShadowEffect;
    property Reflection: DNReflectionEffect read get_Reflection;
    property Glow: DNGlowEffect read get_Glow;
    property SoftEdges: Double read get_SoftEdges write set_SoftEdges;
    property ThreeDFormat: DNThreeDFormat read get_ThreeDFormat;
    property TextFrame: DNMsoTextFrame read get_TextFrame;
    property FormatPicture: DNMsoFormatPicture read get_FormatPicture;
    property IsHidden: Boolean read get_IsHidden write set_IsHidden;
    property IsLockAspectRatio: Boolean read get_IsLockAspectRatio write set_IsLockAspectRatio;
    property RotationAngle: Double read get_RotationAngle write set_RotationAngle;
    property Hyperlink: DNHyperlink read get_Hyperlink;
    property Id: Int32 read get_Id;
    property Spid: string read get_Spid;
    property Spt: Int32 read get_Spt;
    property Worksheet: DNWorksheet read get_Worksheet;
    property IsGroup: Boolean read get_IsGroup;
    property IsWordArt: Boolean read get_IsWordArt;
    property TextEffect: DNTextEffectFormat read get_TextEffect;
    property IsLocked: Boolean read get_IsLocked write set_IsLocked;
    property IsPrintable: Boolean read get_IsPrintable write set_IsPrintable;
    property MsoDrawingType: DNMsoDrawingType read get_MsoDrawingType;
    property AutoShapeType: DNAutoShapeType read get_AutoShapeType write set_AutoShapeType;
    property AnchorType: DNShapeAnchorType read get_AnchorType write set_AnchorType;
    property Placement: DNPlacementType read get_Placement write set_Placement;
    property UpperLeftRow: Int32 read get_UpperLeftRow write set_UpperLeftRow;
    property UpperDeltaY: Int32 read get_UpperDeltaY write set_UpperDeltaY;
    property UpperLeftColumn: Int32 read get_UpperLeftColumn write set_UpperLeftColumn;
    property UpperDeltaX: Int32 read get_UpperDeltaX write set_UpperDeltaX;
    property LowerRightRow: Int32 read get_LowerRightRow write set_LowerRightRow;
    property LowerDeltaY: Int32 read get_LowerDeltaY write set_LowerDeltaY;
    property LowerRightColumn: Int32 read get_LowerRightColumn write set_LowerRightColumn;
    property LowerDeltaX: Int32 read get_LowerDeltaX write set_LowerDeltaX;
    property Right: Int32 read get_Right write set_Right;
    property Bottom: Int32 read get_Bottom write set_Bottom;
    property Width: Int32 read get_Width write set_Width;
    property WidthInch: Double read get_WidthInch write set_WidthInch;
    property WidthPt: Double read get_WidthPt write set_WidthPt;
    property WidthCM: Double read get_WidthCM write set_WidthCM;
    property Height: Int32 read get_Height write set_Height;
    property HeightInch: Double read get_HeightInch write set_HeightInch;
    property HeightPt: Double read get_HeightPt write set_HeightPt;
    property HeightCM: Double read get_HeightCM write set_HeightCM;
    property Left: Int32 read get_Left write set_Left;
    property LeftInch: Double read get_LeftInch write set_LeftInch;
    property LeftCM: Double read get_LeftCM write set_LeftCM;
    property Top: Int32 read get_Top write set_Top;
    property TopInch: Double read get_TopInch write set_TopInch;
    property TopCM: Double read get_TopCM write set_TopCM;
    property TopToCorner: Int32 read get_TopToCorner write set_TopToCorner;
    property LeftToCorner: Int32 read get_LeftToCorner write set_LeftToCorner;
    property X: Int32 read get_X write set_X;
    property Y: Int32 read get_Y write set_Y;
    property WidthScale: Int32 read get_WidthScale write set_WidthScale;
    property HeightScale: Int32 read get_HeightScale write set_HeightScale;
    property TopInShape: Int32 read get_TopInShape write set_TopInShape;
    property LeftInShape: Int32 read get_LeftInShape write set_LeftInShape;
    property WidthInShape: Int32 read get_WidthInShape write set_WidthInShape;
    property HeightInShape: Int32 read get_HeightInShape write set_HeightInShape;
    property Group: DNGroupShape read get_Group;
    property &Type: DNAutoShapeType read get_Type;
    property HasLine: Boolean read get_HasLine write set_HasLine;
    property IsFilled: Boolean read get_IsFilled write set_IsFilled;
    property IsFlippedHorizontally: Boolean read get_IsFlippedHorizontally write set_IsFlippedHorizontally;
    property IsFlippedVertically: Boolean read get_IsFlippedVertically write set_IsFlippedVertically;
    property ActualLowerRightRow: Int32 read get_ActualLowerRightRow;
    property ConnectionPoints: TArray<DDN.System.Drawing.DNPointF> read get_ConnectionPoints;
    property RelativeToOriginalPictureSize: Boolean read get_RelativeToOriginalPictureSize write set_RelativeToOriginalPictureSize;
    property LinkedCell: string read get_LinkedCell write set_LinkedCell;
    property InputRange: string read get_InputRange write set_InputRange;
    property TextShapeType: DNAutoShapeType read get_TextShapeType write set_TextShapeType;
    property TextBody: DNFontSettingCollection read get_TextBody;
    property Font: DNFont read get_Font write set_Font;
    property TextOptions: DNTextOptions read get_TextOptions write set_TextOptions;
    property Text: string read get_Text write set_Text;
    property IsRichText: Boolean read get_IsRichText;
    property HtmlText: string read get_HtmlText write set_HtmlText;
    property TextVerticalOverflow: DNTextOverflowType read get_TextVerticalOverflow write set_TextVerticalOverflow;
    property TextHorizontalOverflow: DNTextOverflowType read get_TextHorizontalOverflow write set_TextHorizontalOverflow;
    property IsTextWrapped: Boolean read get_IsTextWrapped write set_IsTextWrapped;
    property TextOrientationType: DNTextOrientationType read get_TextOrientationType write set_TextOrientationType;
    property TextHorizontalAlignment: DNTextAlignmentType read get_TextHorizontalAlignment write set_TextHorizontalAlignment;
    property TextVerticalAlignment: DNTextAlignmentType read get_TextVerticalAlignment write set_TextVerticalAlignment;
    property TextDirection: DNTextDirectionType read get_TextDirection write set_TextDirection;
    property ControlData: TArray<Byte> read get_ControlData;
    property ActiveXControl: DNActiveXControl read get_ActiveXControl;
    property Paths: DNShapePathCollection read get_Paths;
    property Geometry: DNGeometry read get_Geometry;
  end;

  TDNCommentShape = class(TDNGenericImport<DNCommentShapeClass, DNCommentShape>) end;

  //-------------namespace: Aspose.Cells.Drawing----------------
  DNCustomXmlShapeClass = interface(DNShapeClass)
  ['{EC1DC7F0-DD96-567F-967C-469FCFAA9793}']
  end;

  [DNTypeName('Aspose.Cells.Drawing.CustomXmlShape')]
  DNCustomXmlShape = interface(DNShape)
  ['{D6FE6B7E-6DB9-31C5-BA5B-918B6AD95EFA}']
  { getters & setters } 

    function get_MacroName: string;
    procedure set_MacroName(value: string);
    function get_IsEquation: Boolean;
    function get_IsSmartArt: Boolean;
    function get_ZOrderPosition: Int32;
    procedure set_ZOrderPosition(value: Int32);
    function get_Name: string;
    procedure set_Name(value: string);
    function get_AlternativeText: string;
    procedure set_AlternativeText(value: string);
    function get_Title: string;
    procedure set_Title(value: string);
    function get_LineFormat: DNMsoLineFormat;
    function get_FillFormat: DNMsoFillFormat;
    function get_Format: DNShapeFormat;
    function get_Line: DNLineFormat;
    function get_Fill: DNFillFormat;
    function get_ShadowEffect: DNShadowEffect;
    function get_Reflection: DNReflectionEffect;
    function get_Glow: DNGlowEffect;
    function get_SoftEdges: Double;
    procedure set_SoftEdges(value: Double);
    function get_ThreeDFormat: DNThreeDFormat;
    function get_TextFrame: DNMsoTextFrame;
    function get_FormatPicture: DNMsoFormatPicture;
    function get_IsHidden: Boolean;
    procedure set_IsHidden(value: Boolean);
    function get_IsLockAspectRatio: Boolean;
    procedure set_IsLockAspectRatio(value: Boolean);
    function get_RotationAngle: Double;
    procedure set_RotationAngle(value: Double);
    function get_Hyperlink: DNHyperlink;
    function get_Id: Int32;
    function get_Spid: string;
    function get_Spt: Int32;
    function get_Worksheet: DNWorksheet;
    function get_IsGroup: Boolean;
    function get_IsWordArt: Boolean;
    function get_TextEffect: DNTextEffectFormat;
    function get_IsLocked: Boolean;
    procedure set_IsLocked(value: Boolean);
    function get_IsPrintable: Boolean;
    procedure set_IsPrintable(value: Boolean);
    function get_MsoDrawingType: DNMsoDrawingType;
    function get_AutoShapeType: DNAutoShapeType;
    procedure set_AutoShapeType(value: DNAutoShapeType);
    function get_AnchorType: DNShapeAnchorType;
    procedure set_AnchorType(value: DNShapeAnchorType);
    function get_Placement: DNPlacementType;
    procedure set_Placement(value: DNPlacementType);
    function get_UpperLeftRow: Int32;
    procedure set_UpperLeftRow(value: Int32);
    function get_UpperDeltaY: Int32;
    procedure set_UpperDeltaY(value: Int32);
    function get_UpperLeftColumn: Int32;
    procedure set_UpperLeftColumn(value: Int32);
    function get_UpperDeltaX: Int32;
    procedure set_UpperDeltaX(value: Int32);
    function get_LowerRightRow: Int32;
    procedure set_LowerRightRow(value: Int32);
    function get_LowerDeltaY: Int32;
    procedure set_LowerDeltaY(value: Int32);
    function get_LowerRightColumn: Int32;
    procedure set_LowerRightColumn(value: Int32);
    function get_LowerDeltaX: Int32;
    procedure set_LowerDeltaX(value: Int32);
    function get_Right: Int32;
    procedure set_Right(value: Int32);
    function get_Bottom: Int32;
    procedure set_Bottom(value: Int32);
    function get_Width: Int32;
    procedure set_Width(value: Int32);
    function get_WidthInch: Double;
    procedure set_WidthInch(value: Double);
    function get_WidthPt: Double;
    procedure set_WidthPt(value: Double);
    function get_WidthCM: Double;
    procedure set_WidthCM(value: Double);
    function get_Height: Int32;
    procedure set_Height(value: Int32);
    function get_HeightInch: Double;
    procedure set_HeightInch(value: Double);
    function get_HeightPt: Double;
    procedure set_HeightPt(value: Double);
    function get_HeightCM: Double;
    procedure set_HeightCM(value: Double);
    function get_Left: Int32;
    procedure set_Left(value: Int32);
    function get_LeftInch: Double;
    procedure set_LeftInch(value: Double);
    function get_LeftCM: Double;
    procedure set_LeftCM(value: Double);
    function get_Top: Int32;
    procedure set_Top(value: Int32);
    function get_TopInch: Double;
    procedure set_TopInch(value: Double);
    function get_TopCM: Double;
    procedure set_TopCM(value: Double);
    function get_TopToCorner: Int32;
    procedure set_TopToCorner(value: Int32);
    function get_LeftToCorner: Int32;
    procedure set_LeftToCorner(value: Int32);
    function get_X: Int32;
    procedure set_X(value: Int32);
    function get_Y: Int32;
    procedure set_Y(value: Int32);
    function get_WidthScale: Int32;
    procedure set_WidthScale(value: Int32);
    function get_HeightScale: Int32;
    procedure set_HeightScale(value: Int32);
    function get_TopInShape: Int32;
    procedure set_TopInShape(value: Int32);
    function get_LeftInShape: Int32;
    procedure set_LeftInShape(value: Int32);
    function get_WidthInShape: Int32;
    procedure set_WidthInShape(value: Int32);
    function get_HeightInShape: Int32;
    procedure set_HeightInShape(value: Int32);
    function get_Group: DNGroupShape;
    function get_Type: DNAutoShapeType;
    function get_HasLine: Boolean;
    procedure set_HasLine(value: Boolean);
    function get_IsFilled: Boolean;
    procedure set_IsFilled(value: Boolean);
    function get_IsFlippedHorizontally: Boolean;
    procedure set_IsFlippedHorizontally(value: Boolean);
    function get_IsFlippedVertically: Boolean;
    procedure set_IsFlippedVertically(value: Boolean);
    function get_ActualLowerRightRow: Int32;
    function get_ConnectionPoints: TArray<DDN.System.Drawing.DNPointF>;
    function get_RelativeToOriginalPictureSize: Boolean;
    procedure set_RelativeToOriginalPictureSize(value: Boolean);
    function get_LinkedCell: string;
    procedure set_LinkedCell(value: string);
    function get_InputRange: string;
    procedure set_InputRange(value: string);
    function get_TextShapeType: DNAutoShapeType;
    procedure set_TextShapeType(value: DNAutoShapeType);
    function get_TextBody: DNFontSettingCollection;
    function get_Font: DNFont;
    procedure set_Font(value: DNFont);
    function get_TextOptions: DNTextOptions;
    procedure set_TextOptions(value: DNTextOptions);
    function get_Text: string;
    procedure set_Text(value: string);
    function get_IsRichText: Boolean;
    function get_HtmlText: string;
    procedure set_HtmlText(value: string);
    function get_TextVerticalOverflow: DNTextOverflowType;
    procedure set_TextVerticalOverflow(value: DNTextOverflowType);
    function get_TextHorizontalOverflow: DNTextOverflowType;
    procedure set_TextHorizontalOverflow(value: DNTextOverflowType);
    function get_IsTextWrapped: Boolean;
    procedure set_IsTextWrapped(value: Boolean);
    function get_TextOrientationType: DNTextOrientationType;
    procedure set_TextOrientationType(value: DNTextOrientationType);
    function get_TextHorizontalAlignment: DNTextAlignmentType;
    procedure set_TextHorizontalAlignment(value: DNTextAlignmentType);
    function get_TextVerticalAlignment: DNTextAlignmentType;
    procedure set_TextVerticalAlignment(value: DNTextAlignmentType);
    function get_TextDirection: DNTextDirectionType;
    procedure set_TextDirection(value: DNTextDirectionType);
    function get_ControlData: TArray<Byte>;
    function get_ActiveXControl: DNActiveXControl;
    function get_Paths: DNShapePathCollection;
    function get_Geometry: DNGeometry;

  { methods } 

    function CalculateTextSize: TArray<Int32>;
    procedure FormatCharacters(startIndex: Int32; length: Int32; font: DNFont; flag: DNStyleFlag); overload;
    procedure FormatCharacters(startIndex: Int32; length: Int32; font: DNFont); overload;
    function Characters(startIndex: Int32; length: Int32): DNFontSetting;
    function GetCharacters: DDN.mscorlib.DNArrayList;
    procedure RemoveActiveXControl;
    procedure ToImage(stream: DDN.mscorlib.DNStream; imageFormat: DDN.System.Drawing.DNImageFormat); overload;
    procedure ToImage(imageFile: string; options: DNImageOrPrintOptions); overload;
    procedure ToImage(stream: DDN.mscorlib.DNStream; options: DNImageOrPrintOptions); overload;
    function ToImage(options: DNImageOrPrintOptions): DDN.System.Drawing.DNBitmap; overload;
    function GetLinkedCell(isR1C1: Boolean; isLocal: Boolean): string;
    procedure SetLinkedCell(formula: string; isR1C1: Boolean; isLocal: Boolean);
    function GetInputRange(isR1C1: Boolean; isLocal: Boolean): string;
    procedure SetInputRange(formula: string; isR1C1: Boolean; isLocal: Boolean);
    procedure UpdateSelectedValue;
    function GetResultOfSmartArt: DNGroupShape;
    procedure ToFrontOrBack(orders: Int32);
    function GetLockedProperty(&type: DNShapeLockType): Boolean;
    procedure SetLockedProperty(&type: DNShapeLockType; value: Boolean);
    function AddHyperlink(address: string): DNHyperlink;
    procedure RemoveHyperlink;
    procedure MoveToRange(upperLeftRow: Int32; upperLeftColumn: Int32; lowerRightRow: Int32; lowerRightColumn: Int32);
    procedure AlignTopRightCorner(topRow: Int32; rightColumn: Int32);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property MacroName: string read get_MacroName write set_MacroName;
    property IsEquation: Boolean read get_IsEquation;
    property IsSmartArt: Boolean read get_IsSmartArt;
    property ZOrderPosition: Int32 read get_ZOrderPosition write set_ZOrderPosition;
    property Name: string read get_Name write set_Name;
    property AlternativeText: string read get_AlternativeText write set_AlternativeText;
    property Title: string read get_Title write set_Title;
    property LineFormat: DNMsoLineFormat read get_LineFormat;
    property FillFormat: DNMsoFillFormat read get_FillFormat;
    property Format: DNShapeFormat read get_Format;
    property Line: DNLineFormat read get_Line;
    property Fill: DNFillFormat read get_Fill;
    property ShadowEffect: DNShadowEffect read get_ShadowEffect;
    property Reflection: DNReflectionEffect read get_Reflection;
    property Glow: DNGlowEffect read get_Glow;
    property SoftEdges: Double read get_SoftEdges write set_SoftEdges;
    property ThreeDFormat: DNThreeDFormat read get_ThreeDFormat;
    property TextFrame: DNMsoTextFrame read get_TextFrame;
    property FormatPicture: DNMsoFormatPicture read get_FormatPicture;
    property IsHidden: Boolean read get_IsHidden write set_IsHidden;
    property IsLockAspectRatio: Boolean read get_IsLockAspectRatio write set_IsLockAspectRatio;
    property RotationAngle: Double read get_RotationAngle write set_RotationAngle;
    property Hyperlink: DNHyperlink read get_Hyperlink;
    property Id: Int32 read get_Id;
    property Spid: string read get_Spid;
    property Spt: Int32 read get_Spt;
    property Worksheet: DNWorksheet read get_Worksheet;
    property IsGroup: Boolean read get_IsGroup;
    property IsWordArt: Boolean read get_IsWordArt;
    property TextEffect: DNTextEffectFormat read get_TextEffect;
    property IsLocked: Boolean read get_IsLocked write set_IsLocked;
    property IsPrintable: Boolean read get_IsPrintable write set_IsPrintable;
    property MsoDrawingType: DNMsoDrawingType read get_MsoDrawingType;
    property AutoShapeType: DNAutoShapeType read get_AutoShapeType write set_AutoShapeType;
    property AnchorType: DNShapeAnchorType read get_AnchorType write set_AnchorType;
    property Placement: DNPlacementType read get_Placement write set_Placement;
    property UpperLeftRow: Int32 read get_UpperLeftRow write set_UpperLeftRow;
    property UpperDeltaY: Int32 read get_UpperDeltaY write set_UpperDeltaY;
    property UpperLeftColumn: Int32 read get_UpperLeftColumn write set_UpperLeftColumn;
    property UpperDeltaX: Int32 read get_UpperDeltaX write set_UpperDeltaX;
    property LowerRightRow: Int32 read get_LowerRightRow write set_LowerRightRow;
    property LowerDeltaY: Int32 read get_LowerDeltaY write set_LowerDeltaY;
    property LowerRightColumn: Int32 read get_LowerRightColumn write set_LowerRightColumn;
    property LowerDeltaX: Int32 read get_LowerDeltaX write set_LowerDeltaX;
    property Right: Int32 read get_Right write set_Right;
    property Bottom: Int32 read get_Bottom write set_Bottom;
    property Width: Int32 read get_Width write set_Width;
    property WidthInch: Double read get_WidthInch write set_WidthInch;
    property WidthPt: Double read get_WidthPt write set_WidthPt;
    property WidthCM: Double read get_WidthCM write set_WidthCM;
    property Height: Int32 read get_Height write set_Height;
    property HeightInch: Double read get_HeightInch write set_HeightInch;
    property HeightPt: Double read get_HeightPt write set_HeightPt;
    property HeightCM: Double read get_HeightCM write set_HeightCM;
    property Left: Int32 read get_Left write set_Left;
    property LeftInch: Double read get_LeftInch write set_LeftInch;
    property LeftCM: Double read get_LeftCM write set_LeftCM;
    property Top: Int32 read get_Top write set_Top;
    property TopInch: Double read get_TopInch write set_TopInch;
    property TopCM: Double read get_TopCM write set_TopCM;
    property TopToCorner: Int32 read get_TopToCorner write set_TopToCorner;
    property LeftToCorner: Int32 read get_LeftToCorner write set_LeftToCorner;
    property X: Int32 read get_X write set_X;
    property Y: Int32 read get_Y write set_Y;
    property WidthScale: Int32 read get_WidthScale write set_WidthScale;
    property HeightScale: Int32 read get_HeightScale write set_HeightScale;
    property TopInShape: Int32 read get_TopInShape write set_TopInShape;
    property LeftInShape: Int32 read get_LeftInShape write set_LeftInShape;
    property WidthInShape: Int32 read get_WidthInShape write set_WidthInShape;
    property HeightInShape: Int32 read get_HeightInShape write set_HeightInShape;
    property Group: DNGroupShape read get_Group;
    property &Type: DNAutoShapeType read get_Type;
    property HasLine: Boolean read get_HasLine write set_HasLine;
    property IsFilled: Boolean read get_IsFilled write set_IsFilled;
    property IsFlippedHorizontally: Boolean read get_IsFlippedHorizontally write set_IsFlippedHorizontally;
    property IsFlippedVertically: Boolean read get_IsFlippedVertically write set_IsFlippedVertically;
    property ActualLowerRightRow: Int32 read get_ActualLowerRightRow;
    property ConnectionPoints: TArray<DDN.System.Drawing.DNPointF> read get_ConnectionPoints;
    property RelativeToOriginalPictureSize: Boolean read get_RelativeToOriginalPictureSize write set_RelativeToOriginalPictureSize;
    property LinkedCell: string read get_LinkedCell write set_LinkedCell;
    property InputRange: string read get_InputRange write set_InputRange;
    property TextShapeType: DNAutoShapeType read get_TextShapeType write set_TextShapeType;
    property TextBody: DNFontSettingCollection read get_TextBody;
    property Font: DNFont read get_Font write set_Font;
    property TextOptions: DNTextOptions read get_TextOptions write set_TextOptions;
    property Text: string read get_Text write set_Text;
    property IsRichText: Boolean read get_IsRichText;
    property HtmlText: string read get_HtmlText write set_HtmlText;
    property TextVerticalOverflow: DNTextOverflowType read get_TextVerticalOverflow write set_TextVerticalOverflow;
    property TextHorizontalOverflow: DNTextOverflowType read get_TextHorizontalOverflow write set_TextHorizontalOverflow;
    property IsTextWrapped: Boolean read get_IsTextWrapped write set_IsTextWrapped;
    property TextOrientationType: DNTextOrientationType read get_TextOrientationType write set_TextOrientationType;
    property TextHorizontalAlignment: DNTextAlignmentType read get_TextHorizontalAlignment write set_TextHorizontalAlignment;
    property TextVerticalAlignment: DNTextAlignmentType read get_TextVerticalAlignment write set_TextVerticalAlignment;
    property TextDirection: DNTextDirectionType read get_TextDirection write set_TextDirection;
    property ControlData: TArray<Byte> read get_ControlData;
    property ActiveXControl: DNActiveXControl read get_ActiveXControl;
    property Paths: DNShapePathCollection read get_Paths;
    property Geometry: DNGeometry read get_Geometry;
  end;

  TDNCustomXmlShape = class(TDNGenericImport<DNCustomXmlShapeClass, DNCustomXmlShape>) end;

  //-------------namespace: Aspose.Cells.Drawing----------------
  DNDialogBoxClass = interface(DNShapeClass)
  ['{64E4CE2A-86CD-5FF4-B501-57DCD9E033FC}']
  end;

  [DNTypeName('Aspose.Cells.Drawing.DialogBox')]
  DNDialogBox = interface(DNShape)
  ['{1D8CD234-10BD-3024-8C77-B3807EDEC736}']
  { getters & setters } 

    function get_MacroName: string;
    procedure set_MacroName(value: string);
    function get_IsEquation: Boolean;
    function get_IsSmartArt: Boolean;
    function get_ZOrderPosition: Int32;
    procedure set_ZOrderPosition(value: Int32);
    function get_Name: string;
    procedure set_Name(value: string);
    function get_AlternativeText: string;
    procedure set_AlternativeText(value: string);
    function get_Title: string;
    procedure set_Title(value: string);
    function get_LineFormat: DNMsoLineFormat;
    function get_FillFormat: DNMsoFillFormat;
    function get_Format: DNShapeFormat;
    function get_Line: DNLineFormat;
    function get_Fill: DNFillFormat;
    function get_ShadowEffect: DNShadowEffect;
    function get_Reflection: DNReflectionEffect;
    function get_Glow: DNGlowEffect;
    function get_SoftEdges: Double;
    procedure set_SoftEdges(value: Double);
    function get_ThreeDFormat: DNThreeDFormat;
    function get_TextFrame: DNMsoTextFrame;
    function get_FormatPicture: DNMsoFormatPicture;
    function get_IsHidden: Boolean;
    procedure set_IsHidden(value: Boolean);
    function get_IsLockAspectRatio: Boolean;
    procedure set_IsLockAspectRatio(value: Boolean);
    function get_RotationAngle: Double;
    procedure set_RotationAngle(value: Double);
    function get_Hyperlink: DNHyperlink;
    function get_Id: Int32;
    function get_Spid: string;
    function get_Spt: Int32;
    function get_Worksheet: DNWorksheet;
    function get_IsGroup: Boolean;
    function get_IsWordArt: Boolean;
    function get_TextEffect: DNTextEffectFormat;
    function get_IsLocked: Boolean;
    procedure set_IsLocked(value: Boolean);
    function get_IsPrintable: Boolean;
    procedure set_IsPrintable(value: Boolean);
    function get_MsoDrawingType: DNMsoDrawingType;
    function get_AutoShapeType: DNAutoShapeType;
    procedure set_AutoShapeType(value: DNAutoShapeType);
    function get_AnchorType: DNShapeAnchorType;
    procedure set_AnchorType(value: DNShapeAnchorType);
    function get_Placement: DNPlacementType;
    procedure set_Placement(value: DNPlacementType);
    function get_UpperLeftRow: Int32;
    procedure set_UpperLeftRow(value: Int32);
    function get_UpperDeltaY: Int32;
    procedure set_UpperDeltaY(value: Int32);
    function get_UpperLeftColumn: Int32;
    procedure set_UpperLeftColumn(value: Int32);
    function get_UpperDeltaX: Int32;
    procedure set_UpperDeltaX(value: Int32);
    function get_LowerRightRow: Int32;
    procedure set_LowerRightRow(value: Int32);
    function get_LowerDeltaY: Int32;
    procedure set_LowerDeltaY(value: Int32);
    function get_LowerRightColumn: Int32;
    procedure set_LowerRightColumn(value: Int32);
    function get_LowerDeltaX: Int32;
    procedure set_LowerDeltaX(value: Int32);
    function get_Right: Int32;
    procedure set_Right(value: Int32);
    function get_Bottom: Int32;
    procedure set_Bottom(value: Int32);
    function get_Width: Int32;
    procedure set_Width(value: Int32);
    function get_WidthInch: Double;
    procedure set_WidthInch(value: Double);
    function get_WidthPt: Double;
    procedure set_WidthPt(value: Double);
    function get_WidthCM: Double;
    procedure set_WidthCM(value: Double);
    function get_Height: Int32;
    procedure set_Height(value: Int32);
    function get_HeightInch: Double;
    procedure set_HeightInch(value: Double);
    function get_HeightPt: Double;
    procedure set_HeightPt(value: Double);
    function get_HeightCM: Double;
    procedure set_HeightCM(value: Double);
    function get_Left: Int32;
    procedure set_Left(value: Int32);
    function get_LeftInch: Double;
    procedure set_LeftInch(value: Double);
    function get_LeftCM: Double;
    procedure set_LeftCM(value: Double);
    function get_Top: Int32;
    procedure set_Top(value: Int32);
    function get_TopInch: Double;
    procedure set_TopInch(value: Double);
    function get_TopCM: Double;
    procedure set_TopCM(value: Double);
    function get_TopToCorner: Int32;
    procedure set_TopToCorner(value: Int32);
    function get_LeftToCorner: Int32;
    procedure set_LeftToCorner(value: Int32);
    function get_X: Int32;
    procedure set_X(value: Int32);
    function get_Y: Int32;
    procedure set_Y(value: Int32);
    function get_WidthScale: Int32;
    procedure set_WidthScale(value: Int32);
    function get_HeightScale: Int32;
    procedure set_HeightScale(value: Int32);
    function get_TopInShape: Int32;
    procedure set_TopInShape(value: Int32);
    function get_LeftInShape: Int32;
    procedure set_LeftInShape(value: Int32);
    function get_WidthInShape: Int32;
    procedure set_WidthInShape(value: Int32);
    function get_HeightInShape: Int32;
    procedure set_HeightInShape(value: Int32);
    function get_Group: DNGroupShape;
    function get_Type: DNAutoShapeType;
    function get_HasLine: Boolean;
    procedure set_HasLine(value: Boolean);
    function get_IsFilled: Boolean;
    procedure set_IsFilled(value: Boolean);
    function get_IsFlippedHorizontally: Boolean;
    procedure set_IsFlippedHorizontally(value: Boolean);
    function get_IsFlippedVertically: Boolean;
    procedure set_IsFlippedVertically(value: Boolean);
    function get_ActualLowerRightRow: Int32;
    function get_ConnectionPoints: TArray<DDN.System.Drawing.DNPointF>;
    function get_RelativeToOriginalPictureSize: Boolean;
    procedure set_RelativeToOriginalPictureSize(value: Boolean);
    function get_LinkedCell: string;
    procedure set_LinkedCell(value: string);
    function get_InputRange: string;
    procedure set_InputRange(value: string);
    function get_TextShapeType: DNAutoShapeType;
    procedure set_TextShapeType(value: DNAutoShapeType);
    function get_TextBody: DNFontSettingCollection;
    function get_Font: DNFont;
    procedure set_Font(value: DNFont);
    function get_TextOptions: DNTextOptions;
    procedure set_TextOptions(value: DNTextOptions);
    function get_Text: string;
    procedure set_Text(value: string);
    function get_IsRichText: Boolean;
    function get_HtmlText: string;
    procedure set_HtmlText(value: string);
    function get_TextVerticalOverflow: DNTextOverflowType;
    procedure set_TextVerticalOverflow(value: DNTextOverflowType);
    function get_TextHorizontalOverflow: DNTextOverflowType;
    procedure set_TextHorizontalOverflow(value: DNTextOverflowType);
    function get_IsTextWrapped: Boolean;
    procedure set_IsTextWrapped(value: Boolean);
    function get_TextOrientationType: DNTextOrientationType;
    procedure set_TextOrientationType(value: DNTextOrientationType);
    function get_TextHorizontalAlignment: DNTextAlignmentType;
    procedure set_TextHorizontalAlignment(value: DNTextAlignmentType);
    function get_TextVerticalAlignment: DNTextAlignmentType;
    procedure set_TextVerticalAlignment(value: DNTextAlignmentType);
    function get_TextDirection: DNTextDirectionType;
    procedure set_TextDirection(value: DNTextDirectionType);
    function get_ControlData: TArray<Byte>;
    function get_ActiveXControl: DNActiveXControl;
    function get_Paths: DNShapePathCollection;
    function get_Geometry: DNGeometry;

  { methods } 

    function CalculateTextSize: TArray<Int32>;
    procedure FormatCharacters(startIndex: Int32; length: Int32; font: DNFont; flag: DNStyleFlag); overload;
    procedure FormatCharacters(startIndex: Int32; length: Int32; font: DNFont); overload;
    function Characters(startIndex: Int32; length: Int32): DNFontSetting;
    function GetCharacters: DDN.mscorlib.DNArrayList;
    procedure RemoveActiveXControl;
    procedure ToImage(stream: DDN.mscorlib.DNStream; imageFormat: DDN.System.Drawing.DNImageFormat); overload;
    procedure ToImage(imageFile: string; options: DNImageOrPrintOptions); overload;
    procedure ToImage(stream: DDN.mscorlib.DNStream; options: DNImageOrPrintOptions); overload;
    function ToImage(options: DNImageOrPrintOptions): DDN.System.Drawing.DNBitmap; overload;
    function GetLinkedCell(isR1C1: Boolean; isLocal: Boolean): string;
    procedure SetLinkedCell(formula: string; isR1C1: Boolean; isLocal: Boolean);
    function GetInputRange(isR1C1: Boolean; isLocal: Boolean): string;
    procedure SetInputRange(formula: string; isR1C1: Boolean; isLocal: Boolean);
    procedure UpdateSelectedValue;
    function GetResultOfSmartArt: DNGroupShape;
    procedure ToFrontOrBack(orders: Int32);
    function GetLockedProperty(&type: DNShapeLockType): Boolean;
    procedure SetLockedProperty(&type: DNShapeLockType; value: Boolean);
    function AddHyperlink(address: string): DNHyperlink;
    procedure RemoveHyperlink;
    procedure MoveToRange(upperLeftRow: Int32; upperLeftColumn: Int32; lowerRightRow: Int32; lowerRightColumn: Int32);
    procedure AlignTopRightCorner(topRow: Int32; rightColumn: Int32);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property MacroName: string read get_MacroName write set_MacroName;
    property IsEquation: Boolean read get_IsEquation;
    property IsSmartArt: Boolean read get_IsSmartArt;
    property ZOrderPosition: Int32 read get_ZOrderPosition write set_ZOrderPosition;
    property Name: string read get_Name write set_Name;
    property AlternativeText: string read get_AlternativeText write set_AlternativeText;
    property Title: string read get_Title write set_Title;
    property LineFormat: DNMsoLineFormat read get_LineFormat;
    property FillFormat: DNMsoFillFormat read get_FillFormat;
    property Format: DNShapeFormat read get_Format;
    property Line: DNLineFormat read get_Line;
    property Fill: DNFillFormat read get_Fill;
    property ShadowEffect: DNShadowEffect read get_ShadowEffect;
    property Reflection: DNReflectionEffect read get_Reflection;
    property Glow: DNGlowEffect read get_Glow;
    property SoftEdges: Double read get_SoftEdges write set_SoftEdges;
    property ThreeDFormat: DNThreeDFormat read get_ThreeDFormat;
    property TextFrame: DNMsoTextFrame read get_TextFrame;
    property FormatPicture: DNMsoFormatPicture read get_FormatPicture;
    property IsHidden: Boolean read get_IsHidden write set_IsHidden;
    property IsLockAspectRatio: Boolean read get_IsLockAspectRatio write set_IsLockAspectRatio;
    property RotationAngle: Double read get_RotationAngle write set_RotationAngle;
    property Hyperlink: DNHyperlink read get_Hyperlink;
    property Id: Int32 read get_Id;
    property Spid: string read get_Spid;
    property Spt: Int32 read get_Spt;
    property Worksheet: DNWorksheet read get_Worksheet;
    property IsGroup: Boolean read get_IsGroup;
    property IsWordArt: Boolean read get_IsWordArt;
    property TextEffect: DNTextEffectFormat read get_TextEffect;
    property IsLocked: Boolean read get_IsLocked write set_IsLocked;
    property IsPrintable: Boolean read get_IsPrintable write set_IsPrintable;
    property MsoDrawingType: DNMsoDrawingType read get_MsoDrawingType;
    property AutoShapeType: DNAutoShapeType read get_AutoShapeType write set_AutoShapeType;
    property AnchorType: DNShapeAnchorType read get_AnchorType write set_AnchorType;
    property Placement: DNPlacementType read get_Placement write set_Placement;
    property UpperLeftRow: Int32 read get_UpperLeftRow write set_UpperLeftRow;
    property UpperDeltaY: Int32 read get_UpperDeltaY write set_UpperDeltaY;
    property UpperLeftColumn: Int32 read get_UpperLeftColumn write set_UpperLeftColumn;
    property UpperDeltaX: Int32 read get_UpperDeltaX write set_UpperDeltaX;
    property LowerRightRow: Int32 read get_LowerRightRow write set_LowerRightRow;
    property LowerDeltaY: Int32 read get_LowerDeltaY write set_LowerDeltaY;
    property LowerRightColumn: Int32 read get_LowerRightColumn write set_LowerRightColumn;
    property LowerDeltaX: Int32 read get_LowerDeltaX write set_LowerDeltaX;
    property Right: Int32 read get_Right write set_Right;
    property Bottom: Int32 read get_Bottom write set_Bottom;
    property Width: Int32 read get_Width write set_Width;
    property WidthInch: Double read get_WidthInch write set_WidthInch;
    property WidthPt: Double read get_WidthPt write set_WidthPt;
    property WidthCM: Double read get_WidthCM write set_WidthCM;
    property Height: Int32 read get_Height write set_Height;
    property HeightInch: Double read get_HeightInch write set_HeightInch;
    property HeightPt: Double read get_HeightPt write set_HeightPt;
    property HeightCM: Double read get_HeightCM write set_HeightCM;
    property Left: Int32 read get_Left write set_Left;
    property LeftInch: Double read get_LeftInch write set_LeftInch;
    property LeftCM: Double read get_LeftCM write set_LeftCM;
    property Top: Int32 read get_Top write set_Top;
    property TopInch: Double read get_TopInch write set_TopInch;
    property TopCM: Double read get_TopCM write set_TopCM;
    property TopToCorner: Int32 read get_TopToCorner write set_TopToCorner;
    property LeftToCorner: Int32 read get_LeftToCorner write set_LeftToCorner;
    property X: Int32 read get_X write set_X;
    property Y: Int32 read get_Y write set_Y;
    property WidthScale: Int32 read get_WidthScale write set_WidthScale;
    property HeightScale: Int32 read get_HeightScale write set_HeightScale;
    property TopInShape: Int32 read get_TopInShape write set_TopInShape;
    property LeftInShape: Int32 read get_LeftInShape write set_LeftInShape;
    property WidthInShape: Int32 read get_WidthInShape write set_WidthInShape;
    property HeightInShape: Int32 read get_HeightInShape write set_HeightInShape;
    property Group: DNGroupShape read get_Group;
    property &Type: DNAutoShapeType read get_Type;
    property HasLine: Boolean read get_HasLine write set_HasLine;
    property IsFilled: Boolean read get_IsFilled write set_IsFilled;
    property IsFlippedHorizontally: Boolean read get_IsFlippedHorizontally write set_IsFlippedHorizontally;
    property IsFlippedVertically: Boolean read get_IsFlippedVertically write set_IsFlippedVertically;
    property ActualLowerRightRow: Int32 read get_ActualLowerRightRow;
    property ConnectionPoints: TArray<DDN.System.Drawing.DNPointF> read get_ConnectionPoints;
    property RelativeToOriginalPictureSize: Boolean read get_RelativeToOriginalPictureSize write set_RelativeToOriginalPictureSize;
    property LinkedCell: string read get_LinkedCell write set_LinkedCell;
    property InputRange: string read get_InputRange write set_InputRange;
    property TextShapeType: DNAutoShapeType read get_TextShapeType write set_TextShapeType;
    property TextBody: DNFontSettingCollection read get_TextBody;
    property Font: DNFont read get_Font write set_Font;
    property TextOptions: DNTextOptions read get_TextOptions write set_TextOptions;
    property Text: string read get_Text write set_Text;
    property IsRichText: Boolean read get_IsRichText;
    property HtmlText: string read get_HtmlText write set_HtmlText;
    property TextVerticalOverflow: DNTextOverflowType read get_TextVerticalOverflow write set_TextVerticalOverflow;
    property TextHorizontalOverflow: DNTextOverflowType read get_TextHorizontalOverflow write set_TextHorizontalOverflow;
    property IsTextWrapped: Boolean read get_IsTextWrapped write set_IsTextWrapped;
    property TextOrientationType: DNTextOrientationType read get_TextOrientationType write set_TextOrientationType;
    property TextHorizontalAlignment: DNTextAlignmentType read get_TextHorizontalAlignment write set_TextHorizontalAlignment;
    property TextVerticalAlignment: DNTextAlignmentType read get_TextVerticalAlignment write set_TextVerticalAlignment;
    property TextDirection: DNTextDirectionType read get_TextDirection write set_TextDirection;
    property ControlData: TArray<Byte> read get_ControlData;
    property ActiveXControl: DNActiveXControl read get_ActiveXControl;
    property Paths: DNShapePathCollection read get_Paths;
    property Geometry: DNGeometry read get_Geometry;
  end;

  TDNDialogBox = class(TDNGenericImport<DNDialogBoxClass, DNDialogBox>) end;

  //-------------namespace: Aspose.Cells.Drawing----------------
  DNGroupBoxClass = interface(DNShapeClass)
  ['{38C168B1-42F8-56CF-925A-B4AC621CB26C}']
  end;

  [DNTypeName('Aspose.Cells.Drawing.GroupBox')]
  DNGroupBox = interface(DNShape)
  ['{9BE17448-5CC7-3EDD-AA79-AA60825CD7A0}']
  { getters & setters } 

    function get_Shadow: Boolean;
    procedure set_Shadow(value: Boolean);
    function get_MacroName: string;
    procedure set_MacroName(value: string);
    function get_IsEquation: Boolean;
    function get_IsSmartArt: Boolean;
    function get_ZOrderPosition: Int32;
    procedure set_ZOrderPosition(value: Int32);
    function get_Name: string;
    procedure set_Name(value: string);
    function get_AlternativeText: string;
    procedure set_AlternativeText(value: string);
    function get_Title: string;
    procedure set_Title(value: string);
    function get_LineFormat: DNMsoLineFormat;
    function get_FillFormat: DNMsoFillFormat;
    function get_Format: DNShapeFormat;
    function get_Line: DNLineFormat;
    function get_Fill: DNFillFormat;
    function get_ShadowEffect: DNShadowEffect;
    function get_Reflection: DNReflectionEffect;
    function get_Glow: DNGlowEffect;
    function get_SoftEdges: Double;
    procedure set_SoftEdges(value: Double);
    function get_ThreeDFormat: DNThreeDFormat;
    function get_TextFrame: DNMsoTextFrame;
    function get_FormatPicture: DNMsoFormatPicture;
    function get_IsHidden: Boolean;
    procedure set_IsHidden(value: Boolean);
    function get_IsLockAspectRatio: Boolean;
    procedure set_IsLockAspectRatio(value: Boolean);
    function get_RotationAngle: Double;
    procedure set_RotationAngle(value: Double);
    function get_Hyperlink: DNHyperlink;
    function get_Id: Int32;
    function get_Spid: string;
    function get_Spt: Int32;
    function get_Worksheet: DNWorksheet;
    function get_IsGroup: Boolean;
    function get_IsWordArt: Boolean;
    function get_TextEffect: DNTextEffectFormat;
    function get_IsLocked: Boolean;
    procedure set_IsLocked(value: Boolean);
    function get_IsPrintable: Boolean;
    procedure set_IsPrintable(value: Boolean);
    function get_MsoDrawingType: DNMsoDrawingType;
    function get_AutoShapeType: DNAutoShapeType;
    procedure set_AutoShapeType(value: DNAutoShapeType);
    function get_AnchorType: DNShapeAnchorType;
    procedure set_AnchorType(value: DNShapeAnchorType);
    function get_Placement: DNPlacementType;
    procedure set_Placement(value: DNPlacementType);
    function get_UpperLeftRow: Int32;
    procedure set_UpperLeftRow(value: Int32);
    function get_UpperDeltaY: Int32;
    procedure set_UpperDeltaY(value: Int32);
    function get_UpperLeftColumn: Int32;
    procedure set_UpperLeftColumn(value: Int32);
    function get_UpperDeltaX: Int32;
    procedure set_UpperDeltaX(value: Int32);
    function get_LowerRightRow: Int32;
    procedure set_LowerRightRow(value: Int32);
    function get_LowerDeltaY: Int32;
    procedure set_LowerDeltaY(value: Int32);
    function get_LowerRightColumn: Int32;
    procedure set_LowerRightColumn(value: Int32);
    function get_LowerDeltaX: Int32;
    procedure set_LowerDeltaX(value: Int32);
    function get_Right: Int32;
    procedure set_Right(value: Int32);
    function get_Bottom: Int32;
    procedure set_Bottom(value: Int32);
    function get_Width: Int32;
    procedure set_Width(value: Int32);
    function get_WidthInch: Double;
    procedure set_WidthInch(value: Double);
    function get_WidthPt: Double;
    procedure set_WidthPt(value: Double);
    function get_WidthCM: Double;
    procedure set_WidthCM(value: Double);
    function get_Height: Int32;
    procedure set_Height(value: Int32);
    function get_HeightInch: Double;
    procedure set_HeightInch(value: Double);
    function get_HeightPt: Double;
    procedure set_HeightPt(value: Double);
    function get_HeightCM: Double;
    procedure set_HeightCM(value: Double);
    function get_Left: Int32;
    procedure set_Left(value: Int32);
    function get_LeftInch: Double;
    procedure set_LeftInch(value: Double);
    function get_LeftCM: Double;
    procedure set_LeftCM(value: Double);
    function get_Top: Int32;
    procedure set_Top(value: Int32);
    function get_TopInch: Double;
    procedure set_TopInch(value: Double);
    function get_TopCM: Double;
    procedure set_TopCM(value: Double);
    function get_TopToCorner: Int32;
    procedure set_TopToCorner(value: Int32);
    function get_LeftToCorner: Int32;
    procedure set_LeftToCorner(value: Int32);
    function get_X: Int32;
    procedure set_X(value: Int32);
    function get_Y: Int32;
    procedure set_Y(value: Int32);
    function get_WidthScale: Int32;
    procedure set_WidthScale(value: Int32);
    function get_HeightScale: Int32;
    procedure set_HeightScale(value: Int32);
    function get_TopInShape: Int32;
    procedure set_TopInShape(value: Int32);
    function get_LeftInShape: Int32;
    procedure set_LeftInShape(value: Int32);
    function get_WidthInShape: Int32;
    procedure set_WidthInShape(value: Int32);
    function get_HeightInShape: Int32;
    procedure set_HeightInShape(value: Int32);
    function get_Group: DNGroupShape;
    function get_Type: DNAutoShapeType;
    function get_HasLine: Boolean;
    procedure set_HasLine(value: Boolean);
    function get_IsFilled: Boolean;
    procedure set_IsFilled(value: Boolean);
    function get_IsFlippedHorizontally: Boolean;
    procedure set_IsFlippedHorizontally(value: Boolean);
    function get_IsFlippedVertically: Boolean;
    procedure set_IsFlippedVertically(value: Boolean);
    function get_ActualLowerRightRow: Int32;
    function get_ConnectionPoints: TArray<DDN.System.Drawing.DNPointF>;
    function get_RelativeToOriginalPictureSize: Boolean;
    procedure set_RelativeToOriginalPictureSize(value: Boolean);
    function get_LinkedCell: string;
    procedure set_LinkedCell(value: string);
    function get_InputRange: string;
    procedure set_InputRange(value: string);
    function get_TextShapeType: DNAutoShapeType;
    procedure set_TextShapeType(value: DNAutoShapeType);
    function get_TextBody: DNFontSettingCollection;
    function get_Font: DNFont;
    procedure set_Font(value: DNFont);
    function get_TextOptions: DNTextOptions;
    procedure set_TextOptions(value: DNTextOptions);
    function get_Text: string;
    procedure set_Text(value: string);
    function get_IsRichText: Boolean;
    function get_HtmlText: string;
    procedure set_HtmlText(value: string);
    function get_TextVerticalOverflow: DNTextOverflowType;
    procedure set_TextVerticalOverflow(value: DNTextOverflowType);
    function get_TextHorizontalOverflow: DNTextOverflowType;
    procedure set_TextHorizontalOverflow(value: DNTextOverflowType);
    function get_IsTextWrapped: Boolean;
    procedure set_IsTextWrapped(value: Boolean);
    function get_TextOrientationType: DNTextOrientationType;
    procedure set_TextOrientationType(value: DNTextOrientationType);
    function get_TextHorizontalAlignment: DNTextAlignmentType;
    procedure set_TextHorizontalAlignment(value: DNTextAlignmentType);
    function get_TextVerticalAlignment: DNTextAlignmentType;
    procedure set_TextVerticalAlignment(value: DNTextAlignmentType);
    function get_TextDirection: DNTextDirectionType;
    procedure set_TextDirection(value: DNTextDirectionType);
    function get_ControlData: TArray<Byte>;
    function get_ActiveXControl: DNActiveXControl;
    function get_Paths: DNShapePathCollection;
    function get_Geometry: DNGeometry;

  { methods } 

    function CalculateTextSize: TArray<Int32>;
    procedure FormatCharacters(startIndex: Int32; length: Int32; font: DNFont; flag: DNStyleFlag); overload;
    procedure FormatCharacters(startIndex: Int32; length: Int32; font: DNFont); overload;
    function Characters(startIndex: Int32; length: Int32): DNFontSetting;
    function GetCharacters: DDN.mscorlib.DNArrayList;
    procedure RemoveActiveXControl;
    procedure ToImage(stream: DDN.mscorlib.DNStream; imageFormat: DDN.System.Drawing.DNImageFormat); overload;
    procedure ToImage(imageFile: string; options: DNImageOrPrintOptions); overload;
    procedure ToImage(stream: DDN.mscorlib.DNStream; options: DNImageOrPrintOptions); overload;
    function ToImage(options: DNImageOrPrintOptions): DDN.System.Drawing.DNBitmap; overload;
    function GetLinkedCell(isR1C1: Boolean; isLocal: Boolean): string;
    procedure SetLinkedCell(formula: string; isR1C1: Boolean; isLocal: Boolean);
    function GetInputRange(isR1C1: Boolean; isLocal: Boolean): string;
    procedure SetInputRange(formula: string; isR1C1: Boolean; isLocal: Boolean);
    procedure UpdateSelectedValue;
    function GetResultOfSmartArt: DNGroupShape;
    procedure ToFrontOrBack(orders: Int32);
    function GetLockedProperty(&type: DNShapeLockType): Boolean;
    procedure SetLockedProperty(&type: DNShapeLockType; value: Boolean);
    function AddHyperlink(address: string): DNHyperlink;
    procedure RemoveHyperlink;
    procedure MoveToRange(upperLeftRow: Int32; upperLeftColumn: Int32; lowerRightRow: Int32; lowerRightColumn: Int32);
    procedure AlignTopRightCorner(topRow: Int32; rightColumn: Int32);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Shadow: Boolean read get_Shadow write set_Shadow;
    property MacroName: string read get_MacroName write set_MacroName;
    property IsEquation: Boolean read get_IsEquation;
    property IsSmartArt: Boolean read get_IsSmartArt;
    property ZOrderPosition: Int32 read get_ZOrderPosition write set_ZOrderPosition;
    property Name: string read get_Name write set_Name;
    property AlternativeText: string read get_AlternativeText write set_AlternativeText;
    property Title: string read get_Title write set_Title;
    property LineFormat: DNMsoLineFormat read get_LineFormat;
    property FillFormat: DNMsoFillFormat read get_FillFormat;
    property Format: DNShapeFormat read get_Format;
    property Line: DNLineFormat read get_Line;
    property Fill: DNFillFormat read get_Fill;
    property ShadowEffect: DNShadowEffect read get_ShadowEffect;
    property Reflection: DNReflectionEffect read get_Reflection;
    property Glow: DNGlowEffect read get_Glow;
    property SoftEdges: Double read get_SoftEdges write set_SoftEdges;
    property ThreeDFormat: DNThreeDFormat read get_ThreeDFormat;
    property TextFrame: DNMsoTextFrame read get_TextFrame;
    property FormatPicture: DNMsoFormatPicture read get_FormatPicture;
    property IsHidden: Boolean read get_IsHidden write set_IsHidden;
    property IsLockAspectRatio: Boolean read get_IsLockAspectRatio write set_IsLockAspectRatio;
    property RotationAngle: Double read get_RotationAngle write set_RotationAngle;
    property Hyperlink: DNHyperlink read get_Hyperlink;
    property Id: Int32 read get_Id;
    property Spid: string read get_Spid;
    property Spt: Int32 read get_Spt;
    property Worksheet: DNWorksheet read get_Worksheet;
    property IsGroup: Boolean read get_IsGroup;
    property IsWordArt: Boolean read get_IsWordArt;
    property TextEffect: DNTextEffectFormat read get_TextEffect;
    property IsLocked: Boolean read get_IsLocked write set_IsLocked;
    property IsPrintable: Boolean read get_IsPrintable write set_IsPrintable;
    property MsoDrawingType: DNMsoDrawingType read get_MsoDrawingType;
    property AutoShapeType: DNAutoShapeType read get_AutoShapeType write set_AutoShapeType;
    property AnchorType: DNShapeAnchorType read get_AnchorType write set_AnchorType;
    property Placement: DNPlacementType read get_Placement write set_Placement;
    property UpperLeftRow: Int32 read get_UpperLeftRow write set_UpperLeftRow;
    property UpperDeltaY: Int32 read get_UpperDeltaY write set_UpperDeltaY;
    property UpperLeftColumn: Int32 read get_UpperLeftColumn write set_UpperLeftColumn;
    property UpperDeltaX: Int32 read get_UpperDeltaX write set_UpperDeltaX;
    property LowerRightRow: Int32 read get_LowerRightRow write set_LowerRightRow;
    property LowerDeltaY: Int32 read get_LowerDeltaY write set_LowerDeltaY;
    property LowerRightColumn: Int32 read get_LowerRightColumn write set_LowerRightColumn;
    property LowerDeltaX: Int32 read get_LowerDeltaX write set_LowerDeltaX;
    property Right: Int32 read get_Right write set_Right;
    property Bottom: Int32 read get_Bottom write set_Bottom;
    property Width: Int32 read get_Width write set_Width;
    property WidthInch: Double read get_WidthInch write set_WidthInch;
    property WidthPt: Double read get_WidthPt write set_WidthPt;
    property WidthCM: Double read get_WidthCM write set_WidthCM;
    property Height: Int32 read get_Height write set_Height;
    property HeightInch: Double read get_HeightInch write set_HeightInch;
    property HeightPt: Double read get_HeightPt write set_HeightPt;
    property HeightCM: Double read get_HeightCM write set_HeightCM;
    property Left: Int32 read get_Left write set_Left;
    property LeftInch: Double read get_LeftInch write set_LeftInch;
    property LeftCM: Double read get_LeftCM write set_LeftCM;
    property Top: Int32 read get_Top write set_Top;
    property TopInch: Double read get_TopInch write set_TopInch;
    property TopCM: Double read get_TopCM write set_TopCM;
    property TopToCorner: Int32 read get_TopToCorner write set_TopToCorner;
    property LeftToCorner: Int32 read get_LeftToCorner write set_LeftToCorner;
    property X: Int32 read get_X write set_X;
    property Y: Int32 read get_Y write set_Y;
    property WidthScale: Int32 read get_WidthScale write set_WidthScale;
    property HeightScale: Int32 read get_HeightScale write set_HeightScale;
    property TopInShape: Int32 read get_TopInShape write set_TopInShape;
    property LeftInShape: Int32 read get_LeftInShape write set_LeftInShape;
    property WidthInShape: Int32 read get_WidthInShape write set_WidthInShape;
    property HeightInShape: Int32 read get_HeightInShape write set_HeightInShape;
    property Group: DNGroupShape read get_Group;
    property &Type: DNAutoShapeType read get_Type;
    property HasLine: Boolean read get_HasLine write set_HasLine;
    property IsFilled: Boolean read get_IsFilled write set_IsFilled;
    property IsFlippedHorizontally: Boolean read get_IsFlippedHorizontally write set_IsFlippedHorizontally;
    property IsFlippedVertically: Boolean read get_IsFlippedVertically write set_IsFlippedVertically;
    property ActualLowerRightRow: Int32 read get_ActualLowerRightRow;
    property ConnectionPoints: TArray<DDN.System.Drawing.DNPointF> read get_ConnectionPoints;
    property RelativeToOriginalPictureSize: Boolean read get_RelativeToOriginalPictureSize write set_RelativeToOriginalPictureSize;
    property LinkedCell: string read get_LinkedCell write set_LinkedCell;
    property InputRange: string read get_InputRange write set_InputRange;
    property TextShapeType: DNAutoShapeType read get_TextShapeType write set_TextShapeType;
    property TextBody: DNFontSettingCollection read get_TextBody;
    property Font: DNFont read get_Font write set_Font;
    property TextOptions: DNTextOptions read get_TextOptions write set_TextOptions;
    property Text: string read get_Text write set_Text;
    property IsRichText: Boolean read get_IsRichText;
    property HtmlText: string read get_HtmlText write set_HtmlText;
    property TextVerticalOverflow: DNTextOverflowType read get_TextVerticalOverflow write set_TextVerticalOverflow;
    property TextHorizontalOverflow: DNTextOverflowType read get_TextHorizontalOverflow write set_TextHorizontalOverflow;
    property IsTextWrapped: Boolean read get_IsTextWrapped write set_IsTextWrapped;
    property TextOrientationType: DNTextOrientationType read get_TextOrientationType write set_TextOrientationType;
    property TextHorizontalAlignment: DNTextAlignmentType read get_TextHorizontalAlignment write set_TextHorizontalAlignment;
    property TextVerticalAlignment: DNTextAlignmentType read get_TextVerticalAlignment write set_TextVerticalAlignment;
    property TextDirection: DNTextDirectionType read get_TextDirection write set_TextDirection;
    property ControlData: TArray<Byte> read get_ControlData;
    property ActiveXControl: DNActiveXControl read get_ActiveXControl;
    property Paths: DNShapePathCollection read get_Paths;
    property Geometry: DNGeometry read get_Geometry;
  end;

  TDNGroupBox = class(TDNGenericImport<DNGroupBoxClass, DNGroupBox>) end;

  //-------------namespace: Aspose.Cells.Drawing----------------
  DNGroupShapeClass = interface(DNShapeClass)
  ['{86738BC4-5A57-5937-9A3E-EE1DCD58B33F}']
  end;

  [DNTypeName('Aspose.Cells.Drawing.GroupShape')]
  DNGroupShape = interface(DNShape)
  ['{80F5BCA6-50BD-3FA4-AB1F-EFD4E141FADB}']
  { getters & setters } 

    function get_Item(index: Int32): DNShape;
    function get_MacroName: string;
    procedure set_MacroName(value: string);
    function get_IsEquation: Boolean;
    function get_IsSmartArt: Boolean;
    function get_ZOrderPosition: Int32;
    procedure set_ZOrderPosition(value: Int32);
    function get_Name: string;
    procedure set_Name(value: string);
    function get_AlternativeText: string;
    procedure set_AlternativeText(value: string);
    function get_Title: string;
    procedure set_Title(value: string);
    function get_LineFormat: DNMsoLineFormat;
    function get_FillFormat: DNMsoFillFormat;
    function get_Format: DNShapeFormat;
    function get_Line: DNLineFormat;
    function get_Fill: DNFillFormat;
    function get_ShadowEffect: DNShadowEffect;
    function get_Reflection: DNReflectionEffect;
    function get_Glow: DNGlowEffect;
    function get_SoftEdges: Double;
    procedure set_SoftEdges(value: Double);
    function get_ThreeDFormat: DNThreeDFormat;
    function get_TextFrame: DNMsoTextFrame;
    function get_FormatPicture: DNMsoFormatPicture;
    function get_IsHidden: Boolean;
    procedure set_IsHidden(value: Boolean);
    function get_IsLockAspectRatio: Boolean;
    procedure set_IsLockAspectRatio(value: Boolean);
    function get_RotationAngle: Double;
    procedure set_RotationAngle(value: Double);
    function get_Hyperlink: DNHyperlink;
    function get_Id: Int32;
    function get_Spid: string;
    function get_Spt: Int32;
    function get_Worksheet: DNWorksheet;
    function get_IsGroup: Boolean;
    function get_IsWordArt: Boolean;
    function get_TextEffect: DNTextEffectFormat;
    function get_IsLocked: Boolean;
    procedure set_IsLocked(value: Boolean);
    function get_IsPrintable: Boolean;
    procedure set_IsPrintable(value: Boolean);
    function get_MsoDrawingType: DNMsoDrawingType;
    function get_AutoShapeType: DNAutoShapeType;
    procedure set_AutoShapeType(value: DNAutoShapeType);
    function get_AnchorType: DNShapeAnchorType;
    procedure set_AnchorType(value: DNShapeAnchorType);
    function get_Placement: DNPlacementType;
    procedure set_Placement(value: DNPlacementType);
    function get_UpperLeftRow: Int32;
    procedure set_UpperLeftRow(value: Int32);
    function get_UpperDeltaY: Int32;
    procedure set_UpperDeltaY(value: Int32);
    function get_UpperLeftColumn: Int32;
    procedure set_UpperLeftColumn(value: Int32);
    function get_UpperDeltaX: Int32;
    procedure set_UpperDeltaX(value: Int32);
    function get_LowerRightRow: Int32;
    procedure set_LowerRightRow(value: Int32);
    function get_LowerDeltaY: Int32;
    procedure set_LowerDeltaY(value: Int32);
    function get_LowerRightColumn: Int32;
    procedure set_LowerRightColumn(value: Int32);
    function get_LowerDeltaX: Int32;
    procedure set_LowerDeltaX(value: Int32);
    function get_Right: Int32;
    procedure set_Right(value: Int32);
    function get_Bottom: Int32;
    procedure set_Bottom(value: Int32);
    function get_Width: Int32;
    procedure set_Width(value: Int32);
    function get_WidthInch: Double;
    procedure set_WidthInch(value: Double);
    function get_WidthPt: Double;
    procedure set_WidthPt(value: Double);
    function get_WidthCM: Double;
    procedure set_WidthCM(value: Double);
    function get_Height: Int32;
    procedure set_Height(value: Int32);
    function get_HeightInch: Double;
    procedure set_HeightInch(value: Double);
    function get_HeightPt: Double;
    procedure set_HeightPt(value: Double);
    function get_HeightCM: Double;
    procedure set_HeightCM(value: Double);
    function get_Left: Int32;
    procedure set_Left(value: Int32);
    function get_LeftInch: Double;
    procedure set_LeftInch(value: Double);
    function get_LeftCM: Double;
    procedure set_LeftCM(value: Double);
    function get_Top: Int32;
    procedure set_Top(value: Int32);
    function get_TopInch: Double;
    procedure set_TopInch(value: Double);
    function get_TopCM: Double;
    procedure set_TopCM(value: Double);
    function get_TopToCorner: Int32;
    procedure set_TopToCorner(value: Int32);
    function get_LeftToCorner: Int32;
    procedure set_LeftToCorner(value: Int32);
    function get_X: Int32;
    procedure set_X(value: Int32);
    function get_Y: Int32;
    procedure set_Y(value: Int32);
    function get_WidthScale: Int32;
    procedure set_WidthScale(value: Int32);
    function get_HeightScale: Int32;
    procedure set_HeightScale(value: Int32);
    function get_TopInShape: Int32;
    procedure set_TopInShape(value: Int32);
    function get_LeftInShape: Int32;
    procedure set_LeftInShape(value: Int32);
    function get_WidthInShape: Int32;
    procedure set_WidthInShape(value: Int32);
    function get_HeightInShape: Int32;
    procedure set_HeightInShape(value: Int32);
    function get_Group: DNGroupShape;
    function get_Type: DNAutoShapeType;
    function get_HasLine: Boolean;
    procedure set_HasLine(value: Boolean);
    function get_IsFilled: Boolean;
    procedure set_IsFilled(value: Boolean);
    function get_IsFlippedHorizontally: Boolean;
    procedure set_IsFlippedHorizontally(value: Boolean);
    function get_IsFlippedVertically: Boolean;
    procedure set_IsFlippedVertically(value: Boolean);
    function get_ActualLowerRightRow: Int32;
    function get_ConnectionPoints: TArray<DDN.System.Drawing.DNPointF>;
    function get_RelativeToOriginalPictureSize: Boolean;
    procedure set_RelativeToOriginalPictureSize(value: Boolean);
    function get_LinkedCell: string;
    procedure set_LinkedCell(value: string);
    function get_InputRange: string;
    procedure set_InputRange(value: string);
    function get_TextShapeType: DNAutoShapeType;
    procedure set_TextShapeType(value: DNAutoShapeType);
    function get_TextBody: DNFontSettingCollection;
    function get_Font: DNFont;
    procedure set_Font(value: DNFont);
    function get_TextOptions: DNTextOptions;
    procedure set_TextOptions(value: DNTextOptions);
    function get_Text: string;
    procedure set_Text(value: string);
    function get_IsRichText: Boolean;
    function get_HtmlText: string;
    procedure set_HtmlText(value: string);
    function get_TextVerticalOverflow: DNTextOverflowType;
    procedure set_TextVerticalOverflow(value: DNTextOverflowType);
    function get_TextHorizontalOverflow: DNTextOverflowType;
    procedure set_TextHorizontalOverflow(value: DNTextOverflowType);
    function get_IsTextWrapped: Boolean;
    procedure set_IsTextWrapped(value: Boolean);
    function get_TextOrientationType: DNTextOrientationType;
    procedure set_TextOrientationType(value: DNTextOrientationType);
    function get_TextHorizontalAlignment: DNTextAlignmentType;
    procedure set_TextHorizontalAlignment(value: DNTextAlignmentType);
    function get_TextVerticalAlignment: DNTextAlignmentType;
    procedure set_TextVerticalAlignment(value: DNTextAlignmentType);
    function get_TextDirection: DNTextDirectionType;
    procedure set_TextDirection(value: DNTextDirectionType);
    function get_ControlData: TArray<Byte>;
    function get_ActiveXControl: DNActiveXControl;
    function get_Paths: DNShapePathCollection;
    function get_Geometry: DNGeometry;

  { methods } 

    procedure Ungroup;
    function GetGroupedShapes: TArray<DNShape>;
    function CalculateTextSize: TArray<Int32>;
    procedure FormatCharacters(startIndex: Int32; length: Int32; font: DNFont; flag: DNStyleFlag); overload;
    procedure FormatCharacters(startIndex: Int32; length: Int32; font: DNFont); overload;
    function Characters(startIndex: Int32; length: Int32): DNFontSetting;
    function GetCharacters: DDN.mscorlib.DNArrayList;
    procedure RemoveActiveXControl;
    procedure ToImage(stream: DDN.mscorlib.DNStream; imageFormat: DDN.System.Drawing.DNImageFormat); overload;
    procedure ToImage(imageFile: string; options: DNImageOrPrintOptions); overload;
    procedure ToImage(stream: DDN.mscorlib.DNStream; options: DNImageOrPrintOptions); overload;
    function ToImage(options: DNImageOrPrintOptions): DDN.System.Drawing.DNBitmap; overload;
    function GetLinkedCell(isR1C1: Boolean; isLocal: Boolean): string;
    procedure SetLinkedCell(formula: string; isR1C1: Boolean; isLocal: Boolean);
    function GetInputRange(isR1C1: Boolean; isLocal: Boolean): string;
    procedure SetInputRange(formula: string; isR1C1: Boolean; isLocal: Boolean);
    procedure UpdateSelectedValue;
    function GetResultOfSmartArt: DNGroupShape;
    procedure ToFrontOrBack(orders: Int32);
    function GetLockedProperty(&type: DNShapeLockType): Boolean;
    procedure SetLockedProperty(&type: DNShapeLockType; value: Boolean);
    function AddHyperlink(address: string): DNHyperlink;
    procedure RemoveHyperlink;
    procedure MoveToRange(upperLeftRow: Int32; upperLeftColumn: Int32; lowerRightRow: Int32; lowerRightColumn: Int32);
    procedure AlignTopRightCorner(topRow: Int32; rightColumn: Int32);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Item[index: Int32]: DNShape read get_Item; default;
    property MacroName: string read get_MacroName write set_MacroName;
    property IsEquation: Boolean read get_IsEquation;
    property IsSmartArt: Boolean read get_IsSmartArt;
    property ZOrderPosition: Int32 read get_ZOrderPosition write set_ZOrderPosition;
    property Name: string read get_Name write set_Name;
    property AlternativeText: string read get_AlternativeText write set_AlternativeText;
    property Title: string read get_Title write set_Title;
    property LineFormat: DNMsoLineFormat read get_LineFormat;
    property FillFormat: DNMsoFillFormat read get_FillFormat;
    property Format: DNShapeFormat read get_Format;
    property Line: DNLineFormat read get_Line;
    property Fill: DNFillFormat read get_Fill;
    property ShadowEffect: DNShadowEffect read get_ShadowEffect;
    property Reflection: DNReflectionEffect read get_Reflection;
    property Glow: DNGlowEffect read get_Glow;
    property SoftEdges: Double read get_SoftEdges write set_SoftEdges;
    property ThreeDFormat: DNThreeDFormat read get_ThreeDFormat;
    property TextFrame: DNMsoTextFrame read get_TextFrame;
    property FormatPicture: DNMsoFormatPicture read get_FormatPicture;
    property IsHidden: Boolean read get_IsHidden write set_IsHidden;
    property IsLockAspectRatio: Boolean read get_IsLockAspectRatio write set_IsLockAspectRatio;
    property RotationAngle: Double read get_RotationAngle write set_RotationAngle;
    property Hyperlink: DNHyperlink read get_Hyperlink;
    property Id: Int32 read get_Id;
    property Spid: string read get_Spid;
    property Spt: Int32 read get_Spt;
    property Worksheet: DNWorksheet read get_Worksheet;
    property IsGroup: Boolean read get_IsGroup;
    property IsWordArt: Boolean read get_IsWordArt;
    property TextEffect: DNTextEffectFormat read get_TextEffect;
    property IsLocked: Boolean read get_IsLocked write set_IsLocked;
    property IsPrintable: Boolean read get_IsPrintable write set_IsPrintable;
    property MsoDrawingType: DNMsoDrawingType read get_MsoDrawingType;
    property AutoShapeType: DNAutoShapeType read get_AutoShapeType write set_AutoShapeType;
    property AnchorType: DNShapeAnchorType read get_AnchorType write set_AnchorType;
    property Placement: DNPlacementType read get_Placement write set_Placement;
    property UpperLeftRow: Int32 read get_UpperLeftRow write set_UpperLeftRow;
    property UpperDeltaY: Int32 read get_UpperDeltaY write set_UpperDeltaY;
    property UpperLeftColumn: Int32 read get_UpperLeftColumn write set_UpperLeftColumn;
    property UpperDeltaX: Int32 read get_UpperDeltaX write set_UpperDeltaX;
    property LowerRightRow: Int32 read get_LowerRightRow write set_LowerRightRow;
    property LowerDeltaY: Int32 read get_LowerDeltaY write set_LowerDeltaY;
    property LowerRightColumn: Int32 read get_LowerRightColumn write set_LowerRightColumn;
    property LowerDeltaX: Int32 read get_LowerDeltaX write set_LowerDeltaX;
    property Right: Int32 read get_Right write set_Right;
    property Bottom: Int32 read get_Bottom write set_Bottom;
    property Width: Int32 read get_Width write set_Width;
    property WidthInch: Double read get_WidthInch write set_WidthInch;
    property WidthPt: Double read get_WidthPt write set_WidthPt;
    property WidthCM: Double read get_WidthCM write set_WidthCM;
    property Height: Int32 read get_Height write set_Height;
    property HeightInch: Double read get_HeightInch write set_HeightInch;
    property HeightPt: Double read get_HeightPt write set_HeightPt;
    property HeightCM: Double read get_HeightCM write set_HeightCM;
    property Left: Int32 read get_Left write set_Left;
    property LeftInch: Double read get_LeftInch write set_LeftInch;
    property LeftCM: Double read get_LeftCM write set_LeftCM;
    property Top: Int32 read get_Top write set_Top;
    property TopInch: Double read get_TopInch write set_TopInch;
    property TopCM: Double read get_TopCM write set_TopCM;
    property TopToCorner: Int32 read get_TopToCorner write set_TopToCorner;
    property LeftToCorner: Int32 read get_LeftToCorner write set_LeftToCorner;
    property X: Int32 read get_X write set_X;
    property Y: Int32 read get_Y write set_Y;
    property WidthScale: Int32 read get_WidthScale write set_WidthScale;
    property HeightScale: Int32 read get_HeightScale write set_HeightScale;
    property TopInShape: Int32 read get_TopInShape write set_TopInShape;
    property LeftInShape: Int32 read get_LeftInShape write set_LeftInShape;
    property WidthInShape: Int32 read get_WidthInShape write set_WidthInShape;
    property HeightInShape: Int32 read get_HeightInShape write set_HeightInShape;
    property Group: DNGroupShape read get_Group;
    property &Type: DNAutoShapeType read get_Type;
    property HasLine: Boolean read get_HasLine write set_HasLine;
    property IsFilled: Boolean read get_IsFilled write set_IsFilled;
    property IsFlippedHorizontally: Boolean read get_IsFlippedHorizontally write set_IsFlippedHorizontally;
    property IsFlippedVertically: Boolean read get_IsFlippedVertically write set_IsFlippedVertically;
    property ActualLowerRightRow: Int32 read get_ActualLowerRightRow;
    property ConnectionPoints: TArray<DDN.System.Drawing.DNPointF> read get_ConnectionPoints;
    property RelativeToOriginalPictureSize: Boolean read get_RelativeToOriginalPictureSize write set_RelativeToOriginalPictureSize;
    property LinkedCell: string read get_LinkedCell write set_LinkedCell;
    property InputRange: string read get_InputRange write set_InputRange;
    property TextShapeType: DNAutoShapeType read get_TextShapeType write set_TextShapeType;
    property TextBody: DNFontSettingCollection read get_TextBody;
    property Font: DNFont read get_Font write set_Font;
    property TextOptions: DNTextOptions read get_TextOptions write set_TextOptions;
    property Text: string read get_Text write set_Text;
    property IsRichText: Boolean read get_IsRichText;
    property HtmlText: string read get_HtmlText write set_HtmlText;
    property TextVerticalOverflow: DNTextOverflowType read get_TextVerticalOverflow write set_TextVerticalOverflow;
    property TextHorizontalOverflow: DNTextOverflowType read get_TextHorizontalOverflow write set_TextHorizontalOverflow;
    property IsTextWrapped: Boolean read get_IsTextWrapped write set_IsTextWrapped;
    property TextOrientationType: DNTextOrientationType read get_TextOrientationType write set_TextOrientationType;
    property TextHorizontalAlignment: DNTextAlignmentType read get_TextHorizontalAlignment write set_TextHorizontalAlignment;
    property TextVerticalAlignment: DNTextAlignmentType read get_TextVerticalAlignment write set_TextVerticalAlignment;
    property TextDirection: DNTextDirectionType read get_TextDirection write set_TextDirection;
    property ControlData: TArray<Byte> read get_ControlData;
    property ActiveXControl: DNActiveXControl read get_ActiveXControl;
    property Paths: DNShapePathCollection read get_Paths;
    property Geometry: DNGeometry read get_Geometry;
  end;

  TDNGroupShape = class(TDNGenericImport<DNGroupShapeClass, DNGroupShape>) end;

  //-------------namespace: Aspose.Cells.Drawing----------------
  DNLabelClass = interface(DNShapeClass)
  ['{E9901325-2D60-5196-9FDA-A2A50899FA3A}']
  end;

  [DNTypeName('Aspose.Cells.Drawing.Label')]
  DNLabel = interface(DNShape)
  ['{7DBF039A-6917-3FA8-869F-81221B89BBC3}']
  { getters & setters } 

    function get_MacroName: string;
    procedure set_MacroName(value: string);
    function get_IsEquation: Boolean;
    function get_IsSmartArt: Boolean;
    function get_ZOrderPosition: Int32;
    procedure set_ZOrderPosition(value: Int32);
    function get_Name: string;
    procedure set_Name(value: string);
    function get_AlternativeText: string;
    procedure set_AlternativeText(value: string);
    function get_Title: string;
    procedure set_Title(value: string);
    function get_LineFormat: DNMsoLineFormat;
    function get_FillFormat: DNMsoFillFormat;
    function get_Format: DNShapeFormat;
    function get_Line: DNLineFormat;
    function get_Fill: DNFillFormat;
    function get_ShadowEffect: DNShadowEffect;
    function get_Reflection: DNReflectionEffect;
    function get_Glow: DNGlowEffect;
    function get_SoftEdges: Double;
    procedure set_SoftEdges(value: Double);
    function get_ThreeDFormat: DNThreeDFormat;
    function get_TextFrame: DNMsoTextFrame;
    function get_FormatPicture: DNMsoFormatPicture;
    function get_IsHidden: Boolean;
    procedure set_IsHidden(value: Boolean);
    function get_IsLockAspectRatio: Boolean;
    procedure set_IsLockAspectRatio(value: Boolean);
    function get_RotationAngle: Double;
    procedure set_RotationAngle(value: Double);
    function get_Hyperlink: DNHyperlink;
    function get_Id: Int32;
    function get_Spid: string;
    function get_Spt: Int32;
    function get_Worksheet: DNWorksheet;
    function get_IsGroup: Boolean;
    function get_IsWordArt: Boolean;
    function get_TextEffect: DNTextEffectFormat;
    function get_IsLocked: Boolean;
    procedure set_IsLocked(value: Boolean);
    function get_IsPrintable: Boolean;
    procedure set_IsPrintable(value: Boolean);
    function get_MsoDrawingType: DNMsoDrawingType;
    function get_AutoShapeType: DNAutoShapeType;
    procedure set_AutoShapeType(value: DNAutoShapeType);
    function get_AnchorType: DNShapeAnchorType;
    procedure set_AnchorType(value: DNShapeAnchorType);
    function get_Placement: DNPlacementType;
    procedure set_Placement(value: DNPlacementType);
    function get_UpperLeftRow: Int32;
    procedure set_UpperLeftRow(value: Int32);
    function get_UpperDeltaY: Int32;
    procedure set_UpperDeltaY(value: Int32);
    function get_UpperLeftColumn: Int32;
    procedure set_UpperLeftColumn(value: Int32);
    function get_UpperDeltaX: Int32;
    procedure set_UpperDeltaX(value: Int32);
    function get_LowerRightRow: Int32;
    procedure set_LowerRightRow(value: Int32);
    function get_LowerDeltaY: Int32;
    procedure set_LowerDeltaY(value: Int32);
    function get_LowerRightColumn: Int32;
    procedure set_LowerRightColumn(value: Int32);
    function get_LowerDeltaX: Int32;
    procedure set_LowerDeltaX(value: Int32);
    function get_Right: Int32;
    procedure set_Right(value: Int32);
    function get_Bottom: Int32;
    procedure set_Bottom(value: Int32);
    function get_Width: Int32;
    procedure set_Width(value: Int32);
    function get_WidthInch: Double;
    procedure set_WidthInch(value: Double);
    function get_WidthPt: Double;
    procedure set_WidthPt(value: Double);
    function get_WidthCM: Double;
    procedure set_WidthCM(value: Double);
    function get_Height: Int32;
    procedure set_Height(value: Int32);
    function get_HeightInch: Double;
    procedure set_HeightInch(value: Double);
    function get_HeightPt: Double;
    procedure set_HeightPt(value: Double);
    function get_HeightCM: Double;
    procedure set_HeightCM(value: Double);
    function get_Left: Int32;
    procedure set_Left(value: Int32);
    function get_LeftInch: Double;
    procedure set_LeftInch(value: Double);
    function get_LeftCM: Double;
    procedure set_LeftCM(value: Double);
    function get_Top: Int32;
    procedure set_Top(value: Int32);
    function get_TopInch: Double;
    procedure set_TopInch(value: Double);
    function get_TopCM: Double;
    procedure set_TopCM(value: Double);
    function get_TopToCorner: Int32;
    procedure set_TopToCorner(value: Int32);
    function get_LeftToCorner: Int32;
    procedure set_LeftToCorner(value: Int32);
    function get_X: Int32;
    procedure set_X(value: Int32);
    function get_Y: Int32;
    procedure set_Y(value: Int32);
    function get_WidthScale: Int32;
    procedure set_WidthScale(value: Int32);
    function get_HeightScale: Int32;
    procedure set_HeightScale(value: Int32);
    function get_TopInShape: Int32;
    procedure set_TopInShape(value: Int32);
    function get_LeftInShape: Int32;
    procedure set_LeftInShape(value: Int32);
    function get_WidthInShape: Int32;
    procedure set_WidthInShape(value: Int32);
    function get_HeightInShape: Int32;
    procedure set_HeightInShape(value: Int32);
    function get_Group: DNGroupShape;
    function get_Type: DNAutoShapeType;
    function get_HasLine: Boolean;
    procedure set_HasLine(value: Boolean);
    function get_IsFilled: Boolean;
    procedure set_IsFilled(value: Boolean);
    function get_IsFlippedHorizontally: Boolean;
    procedure set_IsFlippedHorizontally(value: Boolean);
    function get_IsFlippedVertically: Boolean;
    procedure set_IsFlippedVertically(value: Boolean);
    function get_ActualLowerRightRow: Int32;
    function get_ConnectionPoints: TArray<DDN.System.Drawing.DNPointF>;
    function get_RelativeToOriginalPictureSize: Boolean;
    procedure set_RelativeToOriginalPictureSize(value: Boolean);
    function get_LinkedCell: string;
    procedure set_LinkedCell(value: string);
    function get_InputRange: string;
    procedure set_InputRange(value: string);
    function get_TextShapeType: DNAutoShapeType;
    procedure set_TextShapeType(value: DNAutoShapeType);
    function get_TextBody: DNFontSettingCollection;
    function get_Font: DNFont;
    procedure set_Font(value: DNFont);
    function get_TextOptions: DNTextOptions;
    procedure set_TextOptions(value: DNTextOptions);
    function get_Text: string;
    procedure set_Text(value: string);
    function get_IsRichText: Boolean;
    function get_HtmlText: string;
    procedure set_HtmlText(value: string);
    function get_TextVerticalOverflow: DNTextOverflowType;
    procedure set_TextVerticalOverflow(value: DNTextOverflowType);
    function get_TextHorizontalOverflow: DNTextOverflowType;
    procedure set_TextHorizontalOverflow(value: DNTextOverflowType);
    function get_IsTextWrapped: Boolean;
    procedure set_IsTextWrapped(value: Boolean);
    function get_TextOrientationType: DNTextOrientationType;
    procedure set_TextOrientationType(value: DNTextOrientationType);
    function get_TextHorizontalAlignment: DNTextAlignmentType;
    procedure set_TextHorizontalAlignment(value: DNTextAlignmentType);
    function get_TextVerticalAlignment: DNTextAlignmentType;
    procedure set_TextVerticalAlignment(value: DNTextAlignmentType);
    function get_TextDirection: DNTextDirectionType;
    procedure set_TextDirection(value: DNTextDirectionType);
    function get_ControlData: TArray<Byte>;
    function get_ActiveXControl: DNActiveXControl;
    function get_Paths: DNShapePathCollection;
    function get_Geometry: DNGeometry;

  { methods } 

    function CalculateTextSize: TArray<Int32>;
    procedure FormatCharacters(startIndex: Int32; length: Int32; font: DNFont; flag: DNStyleFlag); overload;
    procedure FormatCharacters(startIndex: Int32; length: Int32; font: DNFont); overload;
    function Characters(startIndex: Int32; length: Int32): DNFontSetting;
    function GetCharacters: DDN.mscorlib.DNArrayList;
    procedure RemoveActiveXControl;
    procedure ToImage(stream: DDN.mscorlib.DNStream; imageFormat: DDN.System.Drawing.DNImageFormat); overload;
    procedure ToImage(imageFile: string; options: DNImageOrPrintOptions); overload;
    procedure ToImage(stream: DDN.mscorlib.DNStream; options: DNImageOrPrintOptions); overload;
    function ToImage(options: DNImageOrPrintOptions): DDN.System.Drawing.DNBitmap; overload;
    function GetLinkedCell(isR1C1: Boolean; isLocal: Boolean): string;
    procedure SetLinkedCell(formula: string; isR1C1: Boolean; isLocal: Boolean);
    function GetInputRange(isR1C1: Boolean; isLocal: Boolean): string;
    procedure SetInputRange(formula: string; isR1C1: Boolean; isLocal: Boolean);
    procedure UpdateSelectedValue;
    function GetResultOfSmartArt: DNGroupShape;
    procedure ToFrontOrBack(orders: Int32);
    function GetLockedProperty(&type: DNShapeLockType): Boolean;
    procedure SetLockedProperty(&type: DNShapeLockType; value: Boolean);
    function AddHyperlink(address: string): DNHyperlink;
    procedure RemoveHyperlink;
    procedure MoveToRange(upperLeftRow: Int32; upperLeftColumn: Int32; lowerRightRow: Int32; lowerRightColumn: Int32);
    procedure AlignTopRightCorner(topRow: Int32; rightColumn: Int32);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property MacroName: string read get_MacroName write set_MacroName;
    property IsEquation: Boolean read get_IsEquation;
    property IsSmartArt: Boolean read get_IsSmartArt;
    property ZOrderPosition: Int32 read get_ZOrderPosition write set_ZOrderPosition;
    property Name: string read get_Name write set_Name;
    property AlternativeText: string read get_AlternativeText write set_AlternativeText;
    property Title: string read get_Title write set_Title;
    property LineFormat: DNMsoLineFormat read get_LineFormat;
    property FillFormat: DNMsoFillFormat read get_FillFormat;
    property Format: DNShapeFormat read get_Format;
    property Line: DNLineFormat read get_Line;
    property Fill: DNFillFormat read get_Fill;
    property ShadowEffect: DNShadowEffect read get_ShadowEffect;
    property Reflection: DNReflectionEffect read get_Reflection;
    property Glow: DNGlowEffect read get_Glow;
    property SoftEdges: Double read get_SoftEdges write set_SoftEdges;
    property ThreeDFormat: DNThreeDFormat read get_ThreeDFormat;
    property TextFrame: DNMsoTextFrame read get_TextFrame;
    property FormatPicture: DNMsoFormatPicture read get_FormatPicture;
    property IsHidden: Boolean read get_IsHidden write set_IsHidden;
    property IsLockAspectRatio: Boolean read get_IsLockAspectRatio write set_IsLockAspectRatio;
    property RotationAngle: Double read get_RotationAngle write set_RotationAngle;
    property Hyperlink: DNHyperlink read get_Hyperlink;
    property Id: Int32 read get_Id;
    property Spid: string read get_Spid;
    property Spt: Int32 read get_Spt;
    property Worksheet: DNWorksheet read get_Worksheet;
    property IsGroup: Boolean read get_IsGroup;
    property IsWordArt: Boolean read get_IsWordArt;
    property TextEffect: DNTextEffectFormat read get_TextEffect;
    property IsLocked: Boolean read get_IsLocked write set_IsLocked;
    property IsPrintable: Boolean read get_IsPrintable write set_IsPrintable;
    property MsoDrawingType: DNMsoDrawingType read get_MsoDrawingType;
    property AutoShapeType: DNAutoShapeType read get_AutoShapeType write set_AutoShapeType;
    property AnchorType: DNShapeAnchorType read get_AnchorType write set_AnchorType;
    property Placement: DNPlacementType read get_Placement write set_Placement;
    property UpperLeftRow: Int32 read get_UpperLeftRow write set_UpperLeftRow;
    property UpperDeltaY: Int32 read get_UpperDeltaY write set_UpperDeltaY;
    property UpperLeftColumn: Int32 read get_UpperLeftColumn write set_UpperLeftColumn;
    property UpperDeltaX: Int32 read get_UpperDeltaX write set_UpperDeltaX;
    property LowerRightRow: Int32 read get_LowerRightRow write set_LowerRightRow;
    property LowerDeltaY: Int32 read get_LowerDeltaY write set_LowerDeltaY;
    property LowerRightColumn: Int32 read get_LowerRightColumn write set_LowerRightColumn;
    property LowerDeltaX: Int32 read get_LowerDeltaX write set_LowerDeltaX;
    property Right: Int32 read get_Right write set_Right;
    property Bottom: Int32 read get_Bottom write set_Bottom;
    property Width: Int32 read get_Width write set_Width;
    property WidthInch: Double read get_WidthInch write set_WidthInch;
    property WidthPt: Double read get_WidthPt write set_WidthPt;
    property WidthCM: Double read get_WidthCM write set_WidthCM;
    property Height: Int32 read get_Height write set_Height;
    property HeightInch: Double read get_HeightInch write set_HeightInch;
    property HeightPt: Double read get_HeightPt write set_HeightPt;
    property HeightCM: Double read get_HeightCM write set_HeightCM;
    property Left: Int32 read get_Left write set_Left;
    property LeftInch: Double read get_LeftInch write set_LeftInch;
    property LeftCM: Double read get_LeftCM write set_LeftCM;
    property Top: Int32 read get_Top write set_Top;
    property TopInch: Double read get_TopInch write set_TopInch;
    property TopCM: Double read get_TopCM write set_TopCM;
    property TopToCorner: Int32 read get_TopToCorner write set_TopToCorner;
    property LeftToCorner: Int32 read get_LeftToCorner write set_LeftToCorner;
    property X: Int32 read get_X write set_X;
    property Y: Int32 read get_Y write set_Y;
    property WidthScale: Int32 read get_WidthScale write set_WidthScale;
    property HeightScale: Int32 read get_HeightScale write set_HeightScale;
    property TopInShape: Int32 read get_TopInShape write set_TopInShape;
    property LeftInShape: Int32 read get_LeftInShape write set_LeftInShape;
    property WidthInShape: Int32 read get_WidthInShape write set_WidthInShape;
    property HeightInShape: Int32 read get_HeightInShape write set_HeightInShape;
    property Group: DNGroupShape read get_Group;
    property &Type: DNAutoShapeType read get_Type;
    property HasLine: Boolean read get_HasLine write set_HasLine;
    property IsFilled: Boolean read get_IsFilled write set_IsFilled;
    property IsFlippedHorizontally: Boolean read get_IsFlippedHorizontally write set_IsFlippedHorizontally;
    property IsFlippedVertically: Boolean read get_IsFlippedVertically write set_IsFlippedVertically;
    property ActualLowerRightRow: Int32 read get_ActualLowerRightRow;
    property ConnectionPoints: TArray<DDN.System.Drawing.DNPointF> read get_ConnectionPoints;
    property RelativeToOriginalPictureSize: Boolean read get_RelativeToOriginalPictureSize write set_RelativeToOriginalPictureSize;
    property LinkedCell: string read get_LinkedCell write set_LinkedCell;
    property InputRange: string read get_InputRange write set_InputRange;
    property TextShapeType: DNAutoShapeType read get_TextShapeType write set_TextShapeType;
    property TextBody: DNFontSettingCollection read get_TextBody;
    property Font: DNFont read get_Font write set_Font;
    property TextOptions: DNTextOptions read get_TextOptions write set_TextOptions;
    property Text: string read get_Text write set_Text;
    property IsRichText: Boolean read get_IsRichText;
    property HtmlText: string read get_HtmlText write set_HtmlText;
    property TextVerticalOverflow: DNTextOverflowType read get_TextVerticalOverflow write set_TextVerticalOverflow;
    property TextHorizontalOverflow: DNTextOverflowType read get_TextHorizontalOverflow write set_TextHorizontalOverflow;
    property IsTextWrapped: Boolean read get_IsTextWrapped write set_IsTextWrapped;
    property TextOrientationType: DNTextOrientationType read get_TextOrientationType write set_TextOrientationType;
    property TextHorizontalAlignment: DNTextAlignmentType read get_TextHorizontalAlignment write set_TextHorizontalAlignment;
    property TextVerticalAlignment: DNTextAlignmentType read get_TextVerticalAlignment write set_TextVerticalAlignment;
    property TextDirection: DNTextDirectionType read get_TextDirection write set_TextDirection;
    property ControlData: TArray<Byte> read get_ControlData;
    property ActiveXControl: DNActiveXControl read get_ActiveXControl;
    property Paths: DNShapePathCollection read get_Paths;
    property Geometry: DNGeometry read get_Geometry;
  end;

  TDNLabel = class(TDNGenericImport<DNLabelClass, DNLabel>) end;

  //-------------namespace: Aspose.Cells.Drawing----------------
  DNLineShapeClass = interface(DNShapeClass)
  ['{4A892C08-25CC-508A-8773-BC134D177CDC}']
  end;

  [DNTypeName('Aspose.Cells.Drawing.LineShape')]
  DNLineShape = interface(DNShape)
  ['{41845FEF-0193-3D49-AC8D-FCDC1EBF855D}']
  { getters & setters } 

    function get_BeginArrowheadStyle: DNMsoArrowheadStyle;
    procedure set_BeginArrowheadStyle(value: DNMsoArrowheadStyle);
    function get_BeginArrowheadWidth: DNMsoArrowheadWidth;
    procedure set_BeginArrowheadWidth(value: DNMsoArrowheadWidth);
    function get_BeginArrowheadLength: DNMsoArrowheadLength;
    procedure set_BeginArrowheadLength(value: DNMsoArrowheadLength);
    function get_EndArrowheadStyle: DNMsoArrowheadStyle;
    procedure set_EndArrowheadStyle(value: DNMsoArrowheadStyle);
    function get_EndArrowheadWidth: DNMsoArrowheadWidth;
    procedure set_EndArrowheadWidth(value: DNMsoArrowheadWidth);
    function get_EndArrowheadLength: DNMsoArrowheadLength;
    procedure set_EndArrowheadLength(value: DNMsoArrowheadLength);
    function get_MacroName: string;
    procedure set_MacroName(value: string);
    function get_IsEquation: Boolean;
    function get_IsSmartArt: Boolean;
    function get_ZOrderPosition: Int32;
    procedure set_ZOrderPosition(value: Int32);
    function get_Name: string;
    procedure set_Name(value: string);
    function get_AlternativeText: string;
    procedure set_AlternativeText(value: string);
    function get_Title: string;
    procedure set_Title(value: string);
    function get_LineFormat: DNMsoLineFormat;
    function get_FillFormat: DNMsoFillFormat;
    function get_Format: DNShapeFormat;
    function get_Line: DNLineFormat;
    function get_Fill: DNFillFormat;
    function get_ShadowEffect: DNShadowEffect;
    function get_Reflection: DNReflectionEffect;
    function get_Glow: DNGlowEffect;
    function get_SoftEdges: Double;
    procedure set_SoftEdges(value: Double);
    function get_ThreeDFormat: DNThreeDFormat;
    function get_TextFrame: DNMsoTextFrame;
    function get_FormatPicture: DNMsoFormatPicture;
    function get_IsHidden: Boolean;
    procedure set_IsHidden(value: Boolean);
    function get_IsLockAspectRatio: Boolean;
    procedure set_IsLockAspectRatio(value: Boolean);
    function get_RotationAngle: Double;
    procedure set_RotationAngle(value: Double);
    function get_Hyperlink: DNHyperlink;
    function get_Id: Int32;
    function get_Spid: string;
    function get_Spt: Int32;
    function get_Worksheet: DNWorksheet;
    function get_IsGroup: Boolean;
    function get_IsWordArt: Boolean;
    function get_TextEffect: DNTextEffectFormat;
    function get_IsLocked: Boolean;
    procedure set_IsLocked(value: Boolean);
    function get_IsPrintable: Boolean;
    procedure set_IsPrintable(value: Boolean);
    function get_MsoDrawingType: DNMsoDrawingType;
    function get_AutoShapeType: DNAutoShapeType;
    procedure set_AutoShapeType(value: DNAutoShapeType);
    function get_AnchorType: DNShapeAnchorType;
    procedure set_AnchorType(value: DNShapeAnchorType);
    function get_Placement: DNPlacementType;
    procedure set_Placement(value: DNPlacementType);
    function get_UpperLeftRow: Int32;
    procedure set_UpperLeftRow(value: Int32);
    function get_UpperDeltaY: Int32;
    procedure set_UpperDeltaY(value: Int32);
    function get_UpperLeftColumn: Int32;
    procedure set_UpperLeftColumn(value: Int32);
    function get_UpperDeltaX: Int32;
    procedure set_UpperDeltaX(value: Int32);
    function get_LowerRightRow: Int32;
    procedure set_LowerRightRow(value: Int32);
    function get_LowerDeltaY: Int32;
    procedure set_LowerDeltaY(value: Int32);
    function get_LowerRightColumn: Int32;
    procedure set_LowerRightColumn(value: Int32);
    function get_LowerDeltaX: Int32;
    procedure set_LowerDeltaX(value: Int32);
    function get_Right: Int32;
    procedure set_Right(value: Int32);
    function get_Bottom: Int32;
    procedure set_Bottom(value: Int32);
    function get_Width: Int32;
    procedure set_Width(value: Int32);
    function get_WidthInch: Double;
    procedure set_WidthInch(value: Double);
    function get_WidthPt: Double;
    procedure set_WidthPt(value: Double);
    function get_WidthCM: Double;
    procedure set_WidthCM(value: Double);
    function get_Height: Int32;
    procedure set_Height(value: Int32);
    function get_HeightInch: Double;
    procedure set_HeightInch(value: Double);
    function get_HeightPt: Double;
    procedure set_HeightPt(value: Double);
    function get_HeightCM: Double;
    procedure set_HeightCM(value: Double);
    function get_Left: Int32;
    procedure set_Left(value: Int32);
    function get_LeftInch: Double;
    procedure set_LeftInch(value: Double);
    function get_LeftCM: Double;
    procedure set_LeftCM(value: Double);
    function get_Top: Int32;
    procedure set_Top(value: Int32);
    function get_TopInch: Double;
    procedure set_TopInch(value: Double);
    function get_TopCM: Double;
    procedure set_TopCM(value: Double);
    function get_TopToCorner: Int32;
    procedure set_TopToCorner(value: Int32);
    function get_LeftToCorner: Int32;
    procedure set_LeftToCorner(value: Int32);
    function get_X: Int32;
    procedure set_X(value: Int32);
    function get_Y: Int32;
    procedure set_Y(value: Int32);
    function get_WidthScale: Int32;
    procedure set_WidthScale(value: Int32);
    function get_HeightScale: Int32;
    procedure set_HeightScale(value: Int32);
    function get_TopInShape: Int32;
    procedure set_TopInShape(value: Int32);
    function get_LeftInShape: Int32;
    procedure set_LeftInShape(value: Int32);
    function get_WidthInShape: Int32;
    procedure set_WidthInShape(value: Int32);
    function get_HeightInShape: Int32;
    procedure set_HeightInShape(value: Int32);
    function get_Group: DNGroupShape;
    function get_Type: DNAutoShapeType;
    function get_HasLine: Boolean;
    procedure set_HasLine(value: Boolean);
    function get_IsFilled: Boolean;
    procedure set_IsFilled(value: Boolean);
    function get_IsFlippedHorizontally: Boolean;
    procedure set_IsFlippedHorizontally(value: Boolean);
    function get_IsFlippedVertically: Boolean;
    procedure set_IsFlippedVertically(value: Boolean);
    function get_ActualLowerRightRow: Int32;
    function get_ConnectionPoints: TArray<DDN.System.Drawing.DNPointF>;
    function get_RelativeToOriginalPictureSize: Boolean;
    procedure set_RelativeToOriginalPictureSize(value: Boolean);
    function get_LinkedCell: string;
    procedure set_LinkedCell(value: string);
    function get_InputRange: string;
    procedure set_InputRange(value: string);
    function get_TextShapeType: DNAutoShapeType;
    procedure set_TextShapeType(value: DNAutoShapeType);
    function get_TextBody: DNFontSettingCollection;
    function get_Font: DNFont;
    procedure set_Font(value: DNFont);
    function get_TextOptions: DNTextOptions;
    procedure set_TextOptions(value: DNTextOptions);
    function get_Text: string;
    procedure set_Text(value: string);
    function get_IsRichText: Boolean;
    function get_HtmlText: string;
    procedure set_HtmlText(value: string);
    function get_TextVerticalOverflow: DNTextOverflowType;
    procedure set_TextVerticalOverflow(value: DNTextOverflowType);
    function get_TextHorizontalOverflow: DNTextOverflowType;
    procedure set_TextHorizontalOverflow(value: DNTextOverflowType);
    function get_IsTextWrapped: Boolean;
    procedure set_IsTextWrapped(value: Boolean);
    function get_TextOrientationType: DNTextOrientationType;
    procedure set_TextOrientationType(value: DNTextOrientationType);
    function get_TextHorizontalAlignment: DNTextAlignmentType;
    procedure set_TextHorizontalAlignment(value: DNTextAlignmentType);
    function get_TextVerticalAlignment: DNTextAlignmentType;
    procedure set_TextVerticalAlignment(value: DNTextAlignmentType);
    function get_TextDirection: DNTextDirectionType;
    procedure set_TextDirection(value: DNTextDirectionType);
    function get_ControlData: TArray<Byte>;
    function get_ActiveXControl: DNActiveXControl;
    function get_Paths: DNShapePathCollection;
    function get_Geometry: DNGeometry;

  { methods } 

    function CalculateTextSize: TArray<Int32>;
    procedure FormatCharacters(startIndex: Int32; length: Int32; font: DNFont; flag: DNStyleFlag); overload;
    procedure FormatCharacters(startIndex: Int32; length: Int32; font: DNFont); overload;
    function Characters(startIndex: Int32; length: Int32): DNFontSetting;
    function GetCharacters: DDN.mscorlib.DNArrayList;
    procedure RemoveActiveXControl;
    procedure ToImage(stream: DDN.mscorlib.DNStream; imageFormat: DDN.System.Drawing.DNImageFormat); overload;
    procedure ToImage(imageFile: string; options: DNImageOrPrintOptions); overload;
    procedure ToImage(stream: DDN.mscorlib.DNStream; options: DNImageOrPrintOptions); overload;
    function ToImage(options: DNImageOrPrintOptions): DDN.System.Drawing.DNBitmap; overload;
    function GetLinkedCell(isR1C1: Boolean; isLocal: Boolean): string;
    procedure SetLinkedCell(formula: string; isR1C1: Boolean; isLocal: Boolean);
    function GetInputRange(isR1C1: Boolean; isLocal: Boolean): string;
    procedure SetInputRange(formula: string; isR1C1: Boolean; isLocal: Boolean);
    procedure UpdateSelectedValue;
    function GetResultOfSmartArt: DNGroupShape;
    procedure ToFrontOrBack(orders: Int32);
    function GetLockedProperty(&type: DNShapeLockType): Boolean;
    procedure SetLockedProperty(&type: DNShapeLockType; value: Boolean);
    function AddHyperlink(address: string): DNHyperlink;
    procedure RemoveHyperlink;
    procedure MoveToRange(upperLeftRow: Int32; upperLeftColumn: Int32; lowerRightRow: Int32; lowerRightColumn: Int32);
    procedure AlignTopRightCorner(topRow: Int32; rightColumn: Int32);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property BeginArrowheadStyle: DNMsoArrowheadStyle read get_BeginArrowheadStyle write set_BeginArrowheadStyle;
    property BeginArrowheadWidth: DNMsoArrowheadWidth read get_BeginArrowheadWidth write set_BeginArrowheadWidth;
    property BeginArrowheadLength: DNMsoArrowheadLength read get_BeginArrowheadLength write set_BeginArrowheadLength;
    property EndArrowheadStyle: DNMsoArrowheadStyle read get_EndArrowheadStyle write set_EndArrowheadStyle;
    property EndArrowheadWidth: DNMsoArrowheadWidth read get_EndArrowheadWidth write set_EndArrowheadWidth;
    property EndArrowheadLength: DNMsoArrowheadLength read get_EndArrowheadLength write set_EndArrowheadLength;
    property MacroName: string read get_MacroName write set_MacroName;
    property IsEquation: Boolean read get_IsEquation;
    property IsSmartArt: Boolean read get_IsSmartArt;
    property ZOrderPosition: Int32 read get_ZOrderPosition write set_ZOrderPosition;
    property Name: string read get_Name write set_Name;
    property AlternativeText: string read get_AlternativeText write set_AlternativeText;
    property Title: string read get_Title write set_Title;
    property LineFormat: DNMsoLineFormat read get_LineFormat;
    property FillFormat: DNMsoFillFormat read get_FillFormat;
    property Format: DNShapeFormat read get_Format;
    property Line: DNLineFormat read get_Line;
    property Fill: DNFillFormat read get_Fill;
    property ShadowEffect: DNShadowEffect read get_ShadowEffect;
    property Reflection: DNReflectionEffect read get_Reflection;
    property Glow: DNGlowEffect read get_Glow;
    property SoftEdges: Double read get_SoftEdges write set_SoftEdges;
    property ThreeDFormat: DNThreeDFormat read get_ThreeDFormat;
    property TextFrame: DNMsoTextFrame read get_TextFrame;
    property FormatPicture: DNMsoFormatPicture read get_FormatPicture;
    property IsHidden: Boolean read get_IsHidden write set_IsHidden;
    property IsLockAspectRatio: Boolean read get_IsLockAspectRatio write set_IsLockAspectRatio;
    property RotationAngle: Double read get_RotationAngle write set_RotationAngle;
    property Hyperlink: DNHyperlink read get_Hyperlink;
    property Id: Int32 read get_Id;
    property Spid: string read get_Spid;
    property Spt: Int32 read get_Spt;
    property Worksheet: DNWorksheet read get_Worksheet;
    property IsGroup: Boolean read get_IsGroup;
    property IsWordArt: Boolean read get_IsWordArt;
    property TextEffect: DNTextEffectFormat read get_TextEffect;
    property IsLocked: Boolean read get_IsLocked write set_IsLocked;
    property IsPrintable: Boolean read get_IsPrintable write set_IsPrintable;
    property MsoDrawingType: DNMsoDrawingType read get_MsoDrawingType;
    property AutoShapeType: DNAutoShapeType read get_AutoShapeType write set_AutoShapeType;
    property AnchorType: DNShapeAnchorType read get_AnchorType write set_AnchorType;
    property Placement: DNPlacementType read get_Placement write set_Placement;
    property UpperLeftRow: Int32 read get_UpperLeftRow write set_UpperLeftRow;
    property UpperDeltaY: Int32 read get_UpperDeltaY write set_UpperDeltaY;
    property UpperLeftColumn: Int32 read get_UpperLeftColumn write set_UpperLeftColumn;
    property UpperDeltaX: Int32 read get_UpperDeltaX write set_UpperDeltaX;
    property LowerRightRow: Int32 read get_LowerRightRow write set_LowerRightRow;
    property LowerDeltaY: Int32 read get_LowerDeltaY write set_LowerDeltaY;
    property LowerRightColumn: Int32 read get_LowerRightColumn write set_LowerRightColumn;
    property LowerDeltaX: Int32 read get_LowerDeltaX write set_LowerDeltaX;
    property Right: Int32 read get_Right write set_Right;
    property Bottom: Int32 read get_Bottom write set_Bottom;
    property Width: Int32 read get_Width write set_Width;
    property WidthInch: Double read get_WidthInch write set_WidthInch;
    property WidthPt: Double read get_WidthPt write set_WidthPt;
    property WidthCM: Double read get_WidthCM write set_WidthCM;
    property Height: Int32 read get_Height write set_Height;
    property HeightInch: Double read get_HeightInch write set_HeightInch;
    property HeightPt: Double read get_HeightPt write set_HeightPt;
    property HeightCM: Double read get_HeightCM write set_HeightCM;
    property Left: Int32 read get_Left write set_Left;
    property LeftInch: Double read get_LeftInch write set_LeftInch;
    property LeftCM: Double read get_LeftCM write set_LeftCM;
    property Top: Int32 read get_Top write set_Top;
    property TopInch: Double read get_TopInch write set_TopInch;
    property TopCM: Double read get_TopCM write set_TopCM;
    property TopToCorner: Int32 read get_TopToCorner write set_TopToCorner;
    property LeftToCorner: Int32 read get_LeftToCorner write set_LeftToCorner;
    property X: Int32 read get_X write set_X;
    property Y: Int32 read get_Y write set_Y;
    property WidthScale: Int32 read get_WidthScale write set_WidthScale;
    property HeightScale: Int32 read get_HeightScale write set_HeightScale;
    property TopInShape: Int32 read get_TopInShape write set_TopInShape;
    property LeftInShape: Int32 read get_LeftInShape write set_LeftInShape;
    property WidthInShape: Int32 read get_WidthInShape write set_WidthInShape;
    property HeightInShape: Int32 read get_HeightInShape write set_HeightInShape;
    property Group: DNGroupShape read get_Group;
    property &Type: DNAutoShapeType read get_Type;
    property HasLine: Boolean read get_HasLine write set_HasLine;
    property IsFilled: Boolean read get_IsFilled write set_IsFilled;
    property IsFlippedHorizontally: Boolean read get_IsFlippedHorizontally write set_IsFlippedHorizontally;
    property IsFlippedVertically: Boolean read get_IsFlippedVertically write set_IsFlippedVertically;
    property ActualLowerRightRow: Int32 read get_ActualLowerRightRow;
    property ConnectionPoints: TArray<DDN.System.Drawing.DNPointF> read get_ConnectionPoints;
    property RelativeToOriginalPictureSize: Boolean read get_RelativeToOriginalPictureSize write set_RelativeToOriginalPictureSize;
    property LinkedCell: string read get_LinkedCell write set_LinkedCell;
    property InputRange: string read get_InputRange write set_InputRange;
    property TextShapeType: DNAutoShapeType read get_TextShapeType write set_TextShapeType;
    property TextBody: DNFontSettingCollection read get_TextBody;
    property Font: DNFont read get_Font write set_Font;
    property TextOptions: DNTextOptions read get_TextOptions write set_TextOptions;
    property Text: string read get_Text write set_Text;
    property IsRichText: Boolean read get_IsRichText;
    property HtmlText: string read get_HtmlText write set_HtmlText;
    property TextVerticalOverflow: DNTextOverflowType read get_TextVerticalOverflow write set_TextVerticalOverflow;
    property TextHorizontalOverflow: DNTextOverflowType read get_TextHorizontalOverflow write set_TextHorizontalOverflow;
    property IsTextWrapped: Boolean read get_IsTextWrapped write set_IsTextWrapped;
    property TextOrientationType: DNTextOrientationType read get_TextOrientationType write set_TextOrientationType;
    property TextHorizontalAlignment: DNTextAlignmentType read get_TextHorizontalAlignment write set_TextHorizontalAlignment;
    property TextVerticalAlignment: DNTextAlignmentType read get_TextVerticalAlignment write set_TextVerticalAlignment;
    property TextDirection: DNTextDirectionType read get_TextDirection write set_TextDirection;
    property ControlData: TArray<Byte> read get_ControlData;
    property ActiveXControl: DNActiveXControl read get_ActiveXControl;
    property Paths: DNShapePathCollection read get_Paths;
    property Geometry: DNGeometry read get_Geometry;
  end;

  TDNLineShape = class(TDNGenericImport<DNLineShapeClass, DNLineShape>) end;

  //-------------namespace: Aspose.Cells.Drawing----------------
  DNListBoxClass = interface(DNShapeClass)
  ['{D3D32382-2E62-5F6A-96AA-241B0E432678}']
  end;

  [DNTypeName('Aspose.Cells.Drawing.ListBox')]
  DNListBox = interface(DNShape)
  ['{183AA1CC-0630-392F-968F-3A42092395AB}']
  { getters & setters } 

    function get_ItemCount: Int32;
    function get_SelectedIndex: Int32;
    procedure set_SelectedIndex(value: Int32);
    function get_SelectedCells: TArray<DNCell>;
    function get_Shadow: Boolean;
    procedure set_Shadow(value: Boolean);
    function get_SelectionType: DNSelectionType;
    procedure set_SelectionType(value: DNSelectionType);
    function get_PageChange: Int32;
    procedure set_PageChange(value: Int32);
    function get_MacroName: string;
    procedure set_MacroName(value: string);
    function get_IsEquation: Boolean;
    function get_IsSmartArt: Boolean;
    function get_ZOrderPosition: Int32;
    procedure set_ZOrderPosition(value: Int32);
    function get_Name: string;
    procedure set_Name(value: string);
    function get_AlternativeText: string;
    procedure set_AlternativeText(value: string);
    function get_Title: string;
    procedure set_Title(value: string);
    function get_LineFormat: DNMsoLineFormat;
    function get_FillFormat: DNMsoFillFormat;
    function get_Format: DNShapeFormat;
    function get_Line: DNLineFormat;
    function get_Fill: DNFillFormat;
    function get_ShadowEffect: DNShadowEffect;
    function get_Reflection: DNReflectionEffect;
    function get_Glow: DNGlowEffect;
    function get_SoftEdges: Double;
    procedure set_SoftEdges(value: Double);
    function get_ThreeDFormat: DNThreeDFormat;
    function get_TextFrame: DNMsoTextFrame;
    function get_FormatPicture: DNMsoFormatPicture;
    function get_IsHidden: Boolean;
    procedure set_IsHidden(value: Boolean);
    function get_IsLockAspectRatio: Boolean;
    procedure set_IsLockAspectRatio(value: Boolean);
    function get_RotationAngle: Double;
    procedure set_RotationAngle(value: Double);
    function get_Hyperlink: DNHyperlink;
    function get_Id: Int32;
    function get_Spid: string;
    function get_Spt: Int32;
    function get_Worksheet: DNWorksheet;
    function get_IsGroup: Boolean;
    function get_IsWordArt: Boolean;
    function get_TextEffect: DNTextEffectFormat;
    function get_IsLocked: Boolean;
    procedure set_IsLocked(value: Boolean);
    function get_IsPrintable: Boolean;
    procedure set_IsPrintable(value: Boolean);
    function get_MsoDrawingType: DNMsoDrawingType;
    function get_AutoShapeType: DNAutoShapeType;
    procedure set_AutoShapeType(value: DNAutoShapeType);
    function get_AnchorType: DNShapeAnchorType;
    procedure set_AnchorType(value: DNShapeAnchorType);
    function get_Placement: DNPlacementType;
    procedure set_Placement(value: DNPlacementType);
    function get_UpperLeftRow: Int32;
    procedure set_UpperLeftRow(value: Int32);
    function get_UpperDeltaY: Int32;
    procedure set_UpperDeltaY(value: Int32);
    function get_UpperLeftColumn: Int32;
    procedure set_UpperLeftColumn(value: Int32);
    function get_UpperDeltaX: Int32;
    procedure set_UpperDeltaX(value: Int32);
    function get_LowerRightRow: Int32;
    procedure set_LowerRightRow(value: Int32);
    function get_LowerDeltaY: Int32;
    procedure set_LowerDeltaY(value: Int32);
    function get_LowerRightColumn: Int32;
    procedure set_LowerRightColumn(value: Int32);
    function get_LowerDeltaX: Int32;
    procedure set_LowerDeltaX(value: Int32);
    function get_Right: Int32;
    procedure set_Right(value: Int32);
    function get_Bottom: Int32;
    procedure set_Bottom(value: Int32);
    function get_Width: Int32;
    procedure set_Width(value: Int32);
    function get_WidthInch: Double;
    procedure set_WidthInch(value: Double);
    function get_WidthPt: Double;
    procedure set_WidthPt(value: Double);
    function get_WidthCM: Double;
    procedure set_WidthCM(value: Double);
    function get_Height: Int32;
    procedure set_Height(value: Int32);
    function get_HeightInch: Double;
    procedure set_HeightInch(value: Double);
    function get_HeightPt: Double;
    procedure set_HeightPt(value: Double);
    function get_HeightCM: Double;
    procedure set_HeightCM(value: Double);
    function get_Left: Int32;
    procedure set_Left(value: Int32);
    function get_LeftInch: Double;
    procedure set_LeftInch(value: Double);
    function get_LeftCM: Double;
    procedure set_LeftCM(value: Double);
    function get_Top: Int32;
    procedure set_Top(value: Int32);
    function get_TopInch: Double;
    procedure set_TopInch(value: Double);
    function get_TopCM: Double;
    procedure set_TopCM(value: Double);
    function get_TopToCorner: Int32;
    procedure set_TopToCorner(value: Int32);
    function get_LeftToCorner: Int32;
    procedure set_LeftToCorner(value: Int32);
    function get_X: Int32;
    procedure set_X(value: Int32);
    function get_Y: Int32;
    procedure set_Y(value: Int32);
    function get_WidthScale: Int32;
    procedure set_WidthScale(value: Int32);
    function get_HeightScale: Int32;
    procedure set_HeightScale(value: Int32);
    function get_TopInShape: Int32;
    procedure set_TopInShape(value: Int32);
    function get_LeftInShape: Int32;
    procedure set_LeftInShape(value: Int32);
    function get_WidthInShape: Int32;
    procedure set_WidthInShape(value: Int32);
    function get_HeightInShape: Int32;
    procedure set_HeightInShape(value: Int32);
    function get_Group: DNGroupShape;
    function get_Type: DNAutoShapeType;
    function get_HasLine: Boolean;
    procedure set_HasLine(value: Boolean);
    function get_IsFilled: Boolean;
    procedure set_IsFilled(value: Boolean);
    function get_IsFlippedHorizontally: Boolean;
    procedure set_IsFlippedHorizontally(value: Boolean);
    function get_IsFlippedVertically: Boolean;
    procedure set_IsFlippedVertically(value: Boolean);
    function get_ActualLowerRightRow: Int32;
    function get_ConnectionPoints: TArray<DDN.System.Drawing.DNPointF>;
    function get_RelativeToOriginalPictureSize: Boolean;
    procedure set_RelativeToOriginalPictureSize(value: Boolean);
    function get_LinkedCell: string;
    procedure set_LinkedCell(value: string);
    function get_InputRange: string;
    procedure set_InputRange(value: string);
    function get_TextShapeType: DNAutoShapeType;
    procedure set_TextShapeType(value: DNAutoShapeType);
    function get_TextBody: DNFontSettingCollection;
    function get_Font: DNFont;
    procedure set_Font(value: DNFont);
    function get_TextOptions: DNTextOptions;
    procedure set_TextOptions(value: DNTextOptions);
    function get_Text: string;
    procedure set_Text(value: string);
    function get_IsRichText: Boolean;
    function get_HtmlText: string;
    procedure set_HtmlText(value: string);
    function get_TextVerticalOverflow: DNTextOverflowType;
    procedure set_TextVerticalOverflow(value: DNTextOverflowType);
    function get_TextHorizontalOverflow: DNTextOverflowType;
    procedure set_TextHorizontalOverflow(value: DNTextOverflowType);
    function get_IsTextWrapped: Boolean;
    procedure set_IsTextWrapped(value: Boolean);
    function get_TextOrientationType: DNTextOrientationType;
    procedure set_TextOrientationType(value: DNTextOrientationType);
    function get_TextHorizontalAlignment: DNTextAlignmentType;
    procedure set_TextHorizontalAlignment(value: DNTextAlignmentType);
    function get_TextVerticalAlignment: DNTextAlignmentType;
    procedure set_TextVerticalAlignment(value: DNTextAlignmentType);
    function get_TextDirection: DNTextDirectionType;
    procedure set_TextDirection(value: DNTextDirectionType);
    function get_ControlData: TArray<Byte>;
    function get_ActiveXControl: DNActiveXControl;
    function get_Paths: DNShapePathCollection;
    function get_Geometry: DNGeometry;

  { methods } 

    procedure SelectedItem(itemIndex: Int32; isSelected: Boolean);
    function IsSelected(itemIndex: Int32): Boolean;
    function CalculateTextSize: TArray<Int32>;
    procedure FormatCharacters(startIndex: Int32; length: Int32; font: DNFont; flag: DNStyleFlag); overload;
    procedure FormatCharacters(startIndex: Int32; length: Int32; font: DNFont); overload;
    function Characters(startIndex: Int32; length: Int32): DNFontSetting;
    function GetCharacters: DDN.mscorlib.DNArrayList;
    procedure RemoveActiveXControl;
    procedure ToImage(stream: DDN.mscorlib.DNStream; imageFormat: DDN.System.Drawing.DNImageFormat); overload;
    procedure ToImage(imageFile: string; options: DNImageOrPrintOptions); overload;
    procedure ToImage(stream: DDN.mscorlib.DNStream; options: DNImageOrPrintOptions); overload;
    function ToImage(options: DNImageOrPrintOptions): DDN.System.Drawing.DNBitmap; overload;
    function GetLinkedCell(isR1C1: Boolean; isLocal: Boolean): string;
    procedure SetLinkedCell(formula: string; isR1C1: Boolean; isLocal: Boolean);
    function GetInputRange(isR1C1: Boolean; isLocal: Boolean): string;
    procedure SetInputRange(formula: string; isR1C1: Boolean; isLocal: Boolean);
    procedure UpdateSelectedValue;
    function GetResultOfSmartArt: DNGroupShape;
    procedure ToFrontOrBack(orders: Int32);
    function GetLockedProperty(&type: DNShapeLockType): Boolean;
    procedure SetLockedProperty(&type: DNShapeLockType; value: Boolean);
    function AddHyperlink(address: string): DNHyperlink;
    procedure RemoveHyperlink;
    procedure MoveToRange(upperLeftRow: Int32; upperLeftColumn: Int32; lowerRightRow: Int32; lowerRightColumn: Int32);
    procedure AlignTopRightCorner(topRow: Int32; rightColumn: Int32);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property ItemCount: Int32 read get_ItemCount;
    property SelectedIndex: Int32 read get_SelectedIndex write set_SelectedIndex;
    property SelectedCells: TArray<DNCell> read get_SelectedCells;
    property Shadow: Boolean read get_Shadow write set_Shadow;
    property SelectionType: DNSelectionType read get_SelectionType write set_SelectionType;
    property PageChange: Int32 read get_PageChange write set_PageChange;
    property MacroName: string read get_MacroName write set_MacroName;
    property IsEquation: Boolean read get_IsEquation;
    property IsSmartArt: Boolean read get_IsSmartArt;
    property ZOrderPosition: Int32 read get_ZOrderPosition write set_ZOrderPosition;
    property Name: string read get_Name write set_Name;
    property AlternativeText: string read get_AlternativeText write set_AlternativeText;
    property Title: string read get_Title write set_Title;
    property LineFormat: DNMsoLineFormat read get_LineFormat;
    property FillFormat: DNMsoFillFormat read get_FillFormat;
    property Format: DNShapeFormat read get_Format;
    property Line: DNLineFormat read get_Line;
    property Fill: DNFillFormat read get_Fill;
    property ShadowEffect: DNShadowEffect read get_ShadowEffect;
    property Reflection: DNReflectionEffect read get_Reflection;
    property Glow: DNGlowEffect read get_Glow;
    property SoftEdges: Double read get_SoftEdges write set_SoftEdges;
    property ThreeDFormat: DNThreeDFormat read get_ThreeDFormat;
    property TextFrame: DNMsoTextFrame read get_TextFrame;
    property FormatPicture: DNMsoFormatPicture read get_FormatPicture;
    property IsHidden: Boolean read get_IsHidden write set_IsHidden;
    property IsLockAspectRatio: Boolean read get_IsLockAspectRatio write set_IsLockAspectRatio;
    property RotationAngle: Double read get_RotationAngle write set_RotationAngle;
    property Hyperlink: DNHyperlink read get_Hyperlink;
    property Id: Int32 read get_Id;
    property Spid: string read get_Spid;
    property Spt: Int32 read get_Spt;
    property Worksheet: DNWorksheet read get_Worksheet;
    property IsGroup: Boolean read get_IsGroup;
    property IsWordArt: Boolean read get_IsWordArt;
    property TextEffect: DNTextEffectFormat read get_TextEffect;
    property IsLocked: Boolean read get_IsLocked write set_IsLocked;
    property IsPrintable: Boolean read get_IsPrintable write set_IsPrintable;
    property MsoDrawingType: DNMsoDrawingType read get_MsoDrawingType;
    property AutoShapeType: DNAutoShapeType read get_AutoShapeType write set_AutoShapeType;
    property AnchorType: DNShapeAnchorType read get_AnchorType write set_AnchorType;
    property Placement: DNPlacementType read get_Placement write set_Placement;
    property UpperLeftRow: Int32 read get_UpperLeftRow write set_UpperLeftRow;
    property UpperDeltaY: Int32 read get_UpperDeltaY write set_UpperDeltaY;
    property UpperLeftColumn: Int32 read get_UpperLeftColumn write set_UpperLeftColumn;
    property UpperDeltaX: Int32 read get_UpperDeltaX write set_UpperDeltaX;
    property LowerRightRow: Int32 read get_LowerRightRow write set_LowerRightRow;
    property LowerDeltaY: Int32 read get_LowerDeltaY write set_LowerDeltaY;
    property LowerRightColumn: Int32 read get_LowerRightColumn write set_LowerRightColumn;
    property LowerDeltaX: Int32 read get_LowerDeltaX write set_LowerDeltaX;
    property Right: Int32 read get_Right write set_Right;
    property Bottom: Int32 read get_Bottom write set_Bottom;
    property Width: Int32 read get_Width write set_Width;
    property WidthInch: Double read get_WidthInch write set_WidthInch;
    property WidthPt: Double read get_WidthPt write set_WidthPt;
    property WidthCM: Double read get_WidthCM write set_WidthCM;
    property Height: Int32 read get_Height write set_Height;
    property HeightInch: Double read get_HeightInch write set_HeightInch;
    property HeightPt: Double read get_HeightPt write set_HeightPt;
    property HeightCM: Double read get_HeightCM write set_HeightCM;
    property Left: Int32 read get_Left write set_Left;
    property LeftInch: Double read get_LeftInch write set_LeftInch;
    property LeftCM: Double read get_LeftCM write set_LeftCM;
    property Top: Int32 read get_Top write set_Top;
    property TopInch: Double read get_TopInch write set_TopInch;
    property TopCM: Double read get_TopCM write set_TopCM;
    property TopToCorner: Int32 read get_TopToCorner write set_TopToCorner;
    property LeftToCorner: Int32 read get_LeftToCorner write set_LeftToCorner;
    property X: Int32 read get_X write set_X;
    property Y: Int32 read get_Y write set_Y;
    property WidthScale: Int32 read get_WidthScale write set_WidthScale;
    property HeightScale: Int32 read get_HeightScale write set_HeightScale;
    property TopInShape: Int32 read get_TopInShape write set_TopInShape;
    property LeftInShape: Int32 read get_LeftInShape write set_LeftInShape;
    property WidthInShape: Int32 read get_WidthInShape write set_WidthInShape;
    property HeightInShape: Int32 read get_HeightInShape write set_HeightInShape;
    property Group: DNGroupShape read get_Group;
    property &Type: DNAutoShapeType read get_Type;
    property HasLine: Boolean read get_HasLine write set_HasLine;
    property IsFilled: Boolean read get_IsFilled write set_IsFilled;
    property IsFlippedHorizontally: Boolean read get_IsFlippedHorizontally write set_IsFlippedHorizontally;
    property IsFlippedVertically: Boolean read get_IsFlippedVertically write set_IsFlippedVertically;
    property ActualLowerRightRow: Int32 read get_ActualLowerRightRow;
    property ConnectionPoints: TArray<DDN.System.Drawing.DNPointF> read get_ConnectionPoints;
    property RelativeToOriginalPictureSize: Boolean read get_RelativeToOriginalPictureSize write set_RelativeToOriginalPictureSize;
    property LinkedCell: string read get_LinkedCell write set_LinkedCell;
    property InputRange: string read get_InputRange write set_InputRange;
    property TextShapeType: DNAutoShapeType read get_TextShapeType write set_TextShapeType;
    property TextBody: DNFontSettingCollection read get_TextBody;
    property Font: DNFont read get_Font write set_Font;
    property TextOptions: DNTextOptions read get_TextOptions write set_TextOptions;
    property Text: string read get_Text write set_Text;
    property IsRichText: Boolean read get_IsRichText;
    property HtmlText: string read get_HtmlText write set_HtmlText;
    property TextVerticalOverflow: DNTextOverflowType read get_TextVerticalOverflow write set_TextVerticalOverflow;
    property TextHorizontalOverflow: DNTextOverflowType read get_TextHorizontalOverflow write set_TextHorizontalOverflow;
    property IsTextWrapped: Boolean read get_IsTextWrapped write set_IsTextWrapped;
    property TextOrientationType: DNTextOrientationType read get_TextOrientationType write set_TextOrientationType;
    property TextHorizontalAlignment: DNTextAlignmentType read get_TextHorizontalAlignment write set_TextHorizontalAlignment;
    property TextVerticalAlignment: DNTextAlignmentType read get_TextVerticalAlignment write set_TextVerticalAlignment;
    property TextDirection: DNTextDirectionType read get_TextDirection write set_TextDirection;
    property ControlData: TArray<Byte> read get_ControlData;
    property ActiveXControl: DNActiveXControl read get_ActiveXControl;
    property Paths: DNShapePathCollection read get_Paths;
    property Geometry: DNGeometry read get_Geometry;
  end;

  TDNListBox = class(TDNGenericImport<DNListBoxClass, DNListBox>) end;

  //-------------namespace: Aspose.Cells.Drawing----------------
  DNOleObjectClass = interface(DNShapeClass)
  ['{7E46298B-6FFD-5B22-A7DC-EDABD6F6DB18}']
  end;

  [DNTypeName('Aspose.Cells.Drawing.OleObject')]
  DNOleObject = interface(DNShape)
  ['{D0D4C434-AB62-3549-9A7F-ABC67551F973}']
  { getters & setters } 

    function get_IsAutoSize: Boolean;
    procedure set_IsAutoSize(value: Boolean);
    function get_IsLink: Boolean;
    procedure set_IsLink(value: Boolean);
    function get_DisplayAsIcon: Boolean;
    procedure set_DisplayAsIcon(value: Boolean);
    function get_ImageData: TArray<Byte>;
    procedure set_ImageData(value: TArray<Byte>);
    function get_ObjectData: TArray<Byte>;
    procedure set_ObjectData(value: TArray<Byte>);
    function get_FullObjectBin: TArray<Byte>;
    function get_ImageSourceFullName: string;
    procedure set_ImageSourceFullName(value: string);
    function get_ProgID: string;
    procedure set_ProgID(value: string);
    function get_FileFormatType: DNFileFormatType;
    procedure set_FileFormatType(value: DNFileFormatType);
    function get_ObjectSourceFullName: string;
    procedure set_ObjectSourceFullName(value: string);
    function get_Label: string;
    procedure set_Label(value: string);
    function get_SourceFullName: string;
    procedure set_SourceFullName(value: string);
    function get_AutoUpdate: Boolean;
    procedure set_AutoUpdate(value: Boolean);
    function get_AutoLoad: Boolean;
    procedure set_AutoLoad(value: Boolean);
    function get_ClassIdentifier: TArray<Byte>;
    procedure set_ClassIdentifier(value: TArray<Byte>);
    function get_ImageType: DNImageType;
    function get_MacroName: string;
    procedure set_MacroName(value: string);
    function get_IsEquation: Boolean;
    function get_IsSmartArt: Boolean;
    function get_ZOrderPosition: Int32;
    procedure set_ZOrderPosition(value: Int32);
    function get_Name: string;
    procedure set_Name(value: string);
    function get_AlternativeText: string;
    procedure set_AlternativeText(value: string);
    function get_Title: string;
    procedure set_Title(value: string);
    function get_LineFormat: DNMsoLineFormat;
    function get_FillFormat: DNMsoFillFormat;
    function get_Format: DNShapeFormat;
    function get_Line: DNLineFormat;
    function get_Fill: DNFillFormat;
    function get_ShadowEffect: DNShadowEffect;
    function get_Reflection: DNReflectionEffect;
    function get_Glow: DNGlowEffect;
    function get_SoftEdges: Double;
    procedure set_SoftEdges(value: Double);
    function get_ThreeDFormat: DNThreeDFormat;
    function get_TextFrame: DNMsoTextFrame;
    function get_FormatPicture: DNMsoFormatPicture;
    function get_IsHidden: Boolean;
    procedure set_IsHidden(value: Boolean);
    function get_IsLockAspectRatio: Boolean;
    procedure set_IsLockAspectRatio(value: Boolean);
    function get_RotationAngle: Double;
    procedure set_RotationAngle(value: Double);
    function get_Hyperlink: DNHyperlink;
    function get_Id: Int32;
    function get_Spid: string;
    function get_Spt: Int32;
    function get_Worksheet: DNWorksheet;
    function get_IsGroup: Boolean;
    function get_IsWordArt: Boolean;
    function get_TextEffect: DNTextEffectFormat;
    function get_IsLocked: Boolean;
    procedure set_IsLocked(value: Boolean);
    function get_IsPrintable: Boolean;
    procedure set_IsPrintable(value: Boolean);
    function get_MsoDrawingType: DNMsoDrawingType;
    function get_AutoShapeType: DNAutoShapeType;
    procedure set_AutoShapeType(value: DNAutoShapeType);
    function get_AnchorType: DNShapeAnchorType;
    procedure set_AnchorType(value: DNShapeAnchorType);
    function get_Placement: DNPlacementType;
    procedure set_Placement(value: DNPlacementType);
    function get_UpperLeftRow: Int32;
    procedure set_UpperLeftRow(value: Int32);
    function get_UpperDeltaY: Int32;
    procedure set_UpperDeltaY(value: Int32);
    function get_UpperLeftColumn: Int32;
    procedure set_UpperLeftColumn(value: Int32);
    function get_UpperDeltaX: Int32;
    procedure set_UpperDeltaX(value: Int32);
    function get_LowerRightRow: Int32;
    procedure set_LowerRightRow(value: Int32);
    function get_LowerDeltaY: Int32;
    procedure set_LowerDeltaY(value: Int32);
    function get_LowerRightColumn: Int32;
    procedure set_LowerRightColumn(value: Int32);
    function get_LowerDeltaX: Int32;
    procedure set_LowerDeltaX(value: Int32);
    function get_Right: Int32;
    procedure set_Right(value: Int32);
    function get_Bottom: Int32;
    procedure set_Bottom(value: Int32);
    function get_Width: Int32;
    procedure set_Width(value: Int32);
    function get_WidthInch: Double;
    procedure set_WidthInch(value: Double);
    function get_WidthPt: Double;
    procedure set_WidthPt(value: Double);
    function get_WidthCM: Double;
    procedure set_WidthCM(value: Double);
    function get_Height: Int32;
    procedure set_Height(value: Int32);
    function get_HeightInch: Double;
    procedure set_HeightInch(value: Double);
    function get_HeightPt: Double;
    procedure set_HeightPt(value: Double);
    function get_HeightCM: Double;
    procedure set_HeightCM(value: Double);
    function get_Left: Int32;
    procedure set_Left(value: Int32);
    function get_LeftInch: Double;
    procedure set_LeftInch(value: Double);
    function get_LeftCM: Double;
    procedure set_LeftCM(value: Double);
    function get_Top: Int32;
    procedure set_Top(value: Int32);
    function get_TopInch: Double;
    procedure set_TopInch(value: Double);
    function get_TopCM: Double;
    procedure set_TopCM(value: Double);
    function get_TopToCorner: Int32;
    procedure set_TopToCorner(value: Int32);
    function get_LeftToCorner: Int32;
    procedure set_LeftToCorner(value: Int32);
    function get_X: Int32;
    procedure set_X(value: Int32);
    function get_Y: Int32;
    procedure set_Y(value: Int32);
    function get_WidthScale: Int32;
    procedure set_WidthScale(value: Int32);
    function get_HeightScale: Int32;
    procedure set_HeightScale(value: Int32);
    function get_TopInShape: Int32;
    procedure set_TopInShape(value: Int32);
    function get_LeftInShape: Int32;
    procedure set_LeftInShape(value: Int32);
    function get_WidthInShape: Int32;
    procedure set_WidthInShape(value: Int32);
    function get_HeightInShape: Int32;
    procedure set_HeightInShape(value: Int32);
    function get_Group: DNGroupShape;
    function get_Type: DNAutoShapeType;
    function get_HasLine: Boolean;
    procedure set_HasLine(value: Boolean);
    function get_IsFilled: Boolean;
    procedure set_IsFilled(value: Boolean);
    function get_IsFlippedHorizontally: Boolean;
    procedure set_IsFlippedHorizontally(value: Boolean);
    function get_IsFlippedVertically: Boolean;
    procedure set_IsFlippedVertically(value: Boolean);
    function get_ActualLowerRightRow: Int32;
    function get_ConnectionPoints: TArray<DDN.System.Drawing.DNPointF>;
    function get_RelativeToOriginalPictureSize: Boolean;
    procedure set_RelativeToOriginalPictureSize(value: Boolean);
    function get_LinkedCell: string;
    procedure set_LinkedCell(value: string);
    function get_InputRange: string;
    procedure set_InputRange(value: string);
    function get_TextShapeType: DNAutoShapeType;
    procedure set_TextShapeType(value: DNAutoShapeType);
    function get_TextBody: DNFontSettingCollection;
    function get_Font: DNFont;
    procedure set_Font(value: DNFont);
    function get_TextOptions: DNTextOptions;
    procedure set_TextOptions(value: DNTextOptions);
    function get_Text: string;
    procedure set_Text(value: string);
    function get_IsRichText: Boolean;
    function get_HtmlText: string;
    procedure set_HtmlText(value: string);
    function get_TextVerticalOverflow: DNTextOverflowType;
    procedure set_TextVerticalOverflow(value: DNTextOverflowType);
    function get_TextHorizontalOverflow: DNTextOverflowType;
    procedure set_TextHorizontalOverflow(value: DNTextOverflowType);
    function get_IsTextWrapped: Boolean;
    procedure set_IsTextWrapped(value: Boolean);
    function get_TextOrientationType: DNTextOrientationType;
    procedure set_TextOrientationType(value: DNTextOrientationType);
    function get_TextHorizontalAlignment: DNTextAlignmentType;
    procedure set_TextHorizontalAlignment(value: DNTextAlignmentType);
    function get_TextVerticalAlignment: DNTextAlignmentType;
    procedure set_TextVerticalAlignment(value: DNTextAlignmentType);
    function get_TextDirection: DNTextDirectionType;
    procedure set_TextDirection(value: DNTextDirectionType);
    function get_ControlData: TArray<Byte>;
    function get_ActiveXControl: DNActiveXControl;
    function get_Paths: DNShapePathCollection;
    function get_Geometry: DNGeometry;

  { methods } 

    procedure SetEmbeddedObject(linkToFile: Boolean; objectData: TArray<Byte>; sourceFileName: string; displayAsIcon: Boolean; &label: string); overload;
    procedure SetEmbeddedObject(linkToFile: Boolean; objectData: TArray<Byte>; sourceFileName: string; displayAsIcon: Boolean; &label: string; updateIcon: Boolean); overload;
    procedure SetNativeSourceFullName(sourceFullName: string);
    function CalculateTextSize: TArray<Int32>;
    procedure FormatCharacters(startIndex: Int32; length: Int32; font: DNFont; flag: DNStyleFlag); overload;
    procedure FormatCharacters(startIndex: Int32; length: Int32; font: DNFont); overload;
    function Characters(startIndex: Int32; length: Int32): DNFontSetting;
    function GetCharacters: DDN.mscorlib.DNArrayList;
    procedure RemoveActiveXControl;
    procedure ToImage(stream: DDN.mscorlib.DNStream; imageFormat: DDN.System.Drawing.DNImageFormat); overload;
    procedure ToImage(imageFile: string; options: DNImageOrPrintOptions); overload;
    procedure ToImage(stream: DDN.mscorlib.DNStream; options: DNImageOrPrintOptions); overload;
    function ToImage(options: DNImageOrPrintOptions): DDN.System.Drawing.DNBitmap; overload;
    function GetLinkedCell(isR1C1: Boolean; isLocal: Boolean): string;
    procedure SetLinkedCell(formula: string; isR1C1: Boolean; isLocal: Boolean);
    function GetInputRange(isR1C1: Boolean; isLocal: Boolean): string;
    procedure SetInputRange(formula: string; isR1C1: Boolean; isLocal: Boolean);
    procedure UpdateSelectedValue;
    function GetResultOfSmartArt: DNGroupShape;
    procedure ToFrontOrBack(orders: Int32);
    function GetLockedProperty(&type: DNShapeLockType): Boolean;
    procedure SetLockedProperty(&type: DNShapeLockType; value: Boolean);
    function AddHyperlink(address: string): DNHyperlink;
    procedure RemoveHyperlink;
    procedure MoveToRange(upperLeftRow: Int32; upperLeftColumn: Int32; lowerRightRow: Int32; lowerRightColumn: Int32);
    procedure AlignTopRightCorner(topRow: Int32; rightColumn: Int32);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property IsAutoSize: Boolean read get_IsAutoSize write set_IsAutoSize;
    property IsLink: Boolean read get_IsLink write set_IsLink;
    property DisplayAsIcon: Boolean read get_DisplayAsIcon write set_DisplayAsIcon;
    property ImageData: TArray<Byte> read get_ImageData write set_ImageData;
    property ObjectData: TArray<Byte> read get_ObjectData write set_ObjectData;
    property FullObjectBin: TArray<Byte> read get_FullObjectBin;
    property ImageSourceFullName: string read get_ImageSourceFullName write set_ImageSourceFullName;
    property ProgID: string read get_ProgID write set_ProgID;
    property FileFormatType: DNFileFormatType read get_FileFormatType write set_FileFormatType;
    property ObjectSourceFullName: string read get_ObjectSourceFullName write set_ObjectSourceFullName;
    property &Label: string read get_Label write set_Label;
    property SourceFullName: string read get_SourceFullName write set_SourceFullName;
    property AutoUpdate: Boolean read get_AutoUpdate write set_AutoUpdate;
    property AutoLoad: Boolean read get_AutoLoad write set_AutoLoad;
    property ClassIdentifier: TArray<Byte> read get_ClassIdentifier write set_ClassIdentifier;
    property ImageType: DNImageType read get_ImageType;
    property MacroName: string read get_MacroName write set_MacroName;
    property IsEquation: Boolean read get_IsEquation;
    property IsSmartArt: Boolean read get_IsSmartArt;
    property ZOrderPosition: Int32 read get_ZOrderPosition write set_ZOrderPosition;
    property Name: string read get_Name write set_Name;
    property AlternativeText: string read get_AlternativeText write set_AlternativeText;
    property Title: string read get_Title write set_Title;
    property LineFormat: DNMsoLineFormat read get_LineFormat;
    property FillFormat: DNMsoFillFormat read get_FillFormat;
    property Format: DNShapeFormat read get_Format;
    property Line: DNLineFormat read get_Line;
    property Fill: DNFillFormat read get_Fill;
    property ShadowEffect: DNShadowEffect read get_ShadowEffect;
    property Reflection: DNReflectionEffect read get_Reflection;
    property Glow: DNGlowEffect read get_Glow;
    property SoftEdges: Double read get_SoftEdges write set_SoftEdges;
    property ThreeDFormat: DNThreeDFormat read get_ThreeDFormat;
    property TextFrame: DNMsoTextFrame read get_TextFrame;
    property FormatPicture: DNMsoFormatPicture read get_FormatPicture;
    property IsHidden: Boolean read get_IsHidden write set_IsHidden;
    property IsLockAspectRatio: Boolean read get_IsLockAspectRatio write set_IsLockAspectRatio;
    property RotationAngle: Double read get_RotationAngle write set_RotationAngle;
    property Hyperlink: DNHyperlink read get_Hyperlink;
    property Id: Int32 read get_Id;
    property Spid: string read get_Spid;
    property Spt: Int32 read get_Spt;
    property Worksheet: DNWorksheet read get_Worksheet;
    property IsGroup: Boolean read get_IsGroup;
    property IsWordArt: Boolean read get_IsWordArt;
    property TextEffect: DNTextEffectFormat read get_TextEffect;
    property IsLocked: Boolean read get_IsLocked write set_IsLocked;
    property IsPrintable: Boolean read get_IsPrintable write set_IsPrintable;
    property MsoDrawingType: DNMsoDrawingType read get_MsoDrawingType;
    property AutoShapeType: DNAutoShapeType read get_AutoShapeType write set_AutoShapeType;
    property AnchorType: DNShapeAnchorType read get_AnchorType write set_AnchorType;
    property Placement: DNPlacementType read get_Placement write set_Placement;
    property UpperLeftRow: Int32 read get_UpperLeftRow write set_UpperLeftRow;
    property UpperDeltaY: Int32 read get_UpperDeltaY write set_UpperDeltaY;
    property UpperLeftColumn: Int32 read get_UpperLeftColumn write set_UpperLeftColumn;
    property UpperDeltaX: Int32 read get_UpperDeltaX write set_UpperDeltaX;
    property LowerRightRow: Int32 read get_LowerRightRow write set_LowerRightRow;
    property LowerDeltaY: Int32 read get_LowerDeltaY write set_LowerDeltaY;
    property LowerRightColumn: Int32 read get_LowerRightColumn write set_LowerRightColumn;
    property LowerDeltaX: Int32 read get_LowerDeltaX write set_LowerDeltaX;
    property Right: Int32 read get_Right write set_Right;
    property Bottom: Int32 read get_Bottom write set_Bottom;
    property Width: Int32 read get_Width write set_Width;
    property WidthInch: Double read get_WidthInch write set_WidthInch;
    property WidthPt: Double read get_WidthPt write set_WidthPt;
    property WidthCM: Double read get_WidthCM write set_WidthCM;
    property Height: Int32 read get_Height write set_Height;
    property HeightInch: Double read get_HeightInch write set_HeightInch;
    property HeightPt: Double read get_HeightPt write set_HeightPt;
    property HeightCM: Double read get_HeightCM write set_HeightCM;
    property Left: Int32 read get_Left write set_Left;
    property LeftInch: Double read get_LeftInch write set_LeftInch;
    property LeftCM: Double read get_LeftCM write set_LeftCM;
    property Top: Int32 read get_Top write set_Top;
    property TopInch: Double read get_TopInch write set_TopInch;
    property TopCM: Double read get_TopCM write set_TopCM;
    property TopToCorner: Int32 read get_TopToCorner write set_TopToCorner;
    property LeftToCorner: Int32 read get_LeftToCorner write set_LeftToCorner;
    property X: Int32 read get_X write set_X;
    property Y: Int32 read get_Y write set_Y;
    property WidthScale: Int32 read get_WidthScale write set_WidthScale;
    property HeightScale: Int32 read get_HeightScale write set_HeightScale;
    property TopInShape: Int32 read get_TopInShape write set_TopInShape;
    property LeftInShape: Int32 read get_LeftInShape write set_LeftInShape;
    property WidthInShape: Int32 read get_WidthInShape write set_WidthInShape;
    property HeightInShape: Int32 read get_HeightInShape write set_HeightInShape;
    property Group: DNGroupShape read get_Group;
    property &Type: DNAutoShapeType read get_Type;
    property HasLine: Boolean read get_HasLine write set_HasLine;
    property IsFilled: Boolean read get_IsFilled write set_IsFilled;
    property IsFlippedHorizontally: Boolean read get_IsFlippedHorizontally write set_IsFlippedHorizontally;
    property IsFlippedVertically: Boolean read get_IsFlippedVertically write set_IsFlippedVertically;
    property ActualLowerRightRow: Int32 read get_ActualLowerRightRow;
    property ConnectionPoints: TArray<DDN.System.Drawing.DNPointF> read get_ConnectionPoints;
    property RelativeToOriginalPictureSize: Boolean read get_RelativeToOriginalPictureSize write set_RelativeToOriginalPictureSize;
    property LinkedCell: string read get_LinkedCell write set_LinkedCell;
    property InputRange: string read get_InputRange write set_InputRange;
    property TextShapeType: DNAutoShapeType read get_TextShapeType write set_TextShapeType;
    property TextBody: DNFontSettingCollection read get_TextBody;
    property Font: DNFont read get_Font write set_Font;
    property TextOptions: DNTextOptions read get_TextOptions write set_TextOptions;
    property Text: string read get_Text write set_Text;
    property IsRichText: Boolean read get_IsRichText;
    property HtmlText: string read get_HtmlText write set_HtmlText;
    property TextVerticalOverflow: DNTextOverflowType read get_TextVerticalOverflow write set_TextVerticalOverflow;
    property TextHorizontalOverflow: DNTextOverflowType read get_TextHorizontalOverflow write set_TextHorizontalOverflow;
    property IsTextWrapped: Boolean read get_IsTextWrapped write set_IsTextWrapped;
    property TextOrientationType: DNTextOrientationType read get_TextOrientationType write set_TextOrientationType;
    property TextHorizontalAlignment: DNTextAlignmentType read get_TextHorizontalAlignment write set_TextHorizontalAlignment;
    property TextVerticalAlignment: DNTextAlignmentType read get_TextVerticalAlignment write set_TextVerticalAlignment;
    property TextDirection: DNTextDirectionType read get_TextDirection write set_TextDirection;
    property ControlData: TArray<Byte> read get_ControlData;
    property ActiveXControl: DNActiveXControl read get_ActiveXControl;
    property Paths: DNShapePathCollection read get_Paths;
    property Geometry: DNGeometry read get_Geometry;
  end;

  TDNOleObject = class(TDNGenericImport<DNOleObjectClass, DNOleObject>) end;

  //-------------namespace: Aspose.Cells.Drawing----------------
  DNOvalClass = interface(DNShapeClass)
  ['{B2D495E6-C466-5677-B0F5-5FB3E1EC4680}']
  end;

  [DNTypeName('Aspose.Cells.Drawing.Oval')]
  DNOval = interface(DNShape)
  ['{CA041F25-2E09-3902-B38F-1D281FDDB83D}']
  { getters & setters } 

    function get_MacroName: string;
    procedure set_MacroName(value: string);
    function get_IsEquation: Boolean;
    function get_IsSmartArt: Boolean;
    function get_ZOrderPosition: Int32;
    procedure set_ZOrderPosition(value: Int32);
    function get_Name: string;
    procedure set_Name(value: string);
    function get_AlternativeText: string;
    procedure set_AlternativeText(value: string);
    function get_Title: string;
    procedure set_Title(value: string);
    function get_LineFormat: DNMsoLineFormat;
    function get_FillFormat: DNMsoFillFormat;
    function get_Format: DNShapeFormat;
    function get_Line: DNLineFormat;
    function get_Fill: DNFillFormat;
    function get_ShadowEffect: DNShadowEffect;
    function get_Reflection: DNReflectionEffect;
    function get_Glow: DNGlowEffect;
    function get_SoftEdges: Double;
    procedure set_SoftEdges(value: Double);
    function get_ThreeDFormat: DNThreeDFormat;
    function get_TextFrame: DNMsoTextFrame;
    function get_FormatPicture: DNMsoFormatPicture;
    function get_IsHidden: Boolean;
    procedure set_IsHidden(value: Boolean);
    function get_IsLockAspectRatio: Boolean;
    procedure set_IsLockAspectRatio(value: Boolean);
    function get_RotationAngle: Double;
    procedure set_RotationAngle(value: Double);
    function get_Hyperlink: DNHyperlink;
    function get_Id: Int32;
    function get_Spid: string;
    function get_Spt: Int32;
    function get_Worksheet: DNWorksheet;
    function get_IsGroup: Boolean;
    function get_IsWordArt: Boolean;
    function get_TextEffect: DNTextEffectFormat;
    function get_IsLocked: Boolean;
    procedure set_IsLocked(value: Boolean);
    function get_IsPrintable: Boolean;
    procedure set_IsPrintable(value: Boolean);
    function get_MsoDrawingType: DNMsoDrawingType;
    function get_AutoShapeType: DNAutoShapeType;
    procedure set_AutoShapeType(value: DNAutoShapeType);
    function get_AnchorType: DNShapeAnchorType;
    procedure set_AnchorType(value: DNShapeAnchorType);
    function get_Placement: DNPlacementType;
    procedure set_Placement(value: DNPlacementType);
    function get_UpperLeftRow: Int32;
    procedure set_UpperLeftRow(value: Int32);
    function get_UpperDeltaY: Int32;
    procedure set_UpperDeltaY(value: Int32);
    function get_UpperLeftColumn: Int32;
    procedure set_UpperLeftColumn(value: Int32);
    function get_UpperDeltaX: Int32;
    procedure set_UpperDeltaX(value: Int32);
    function get_LowerRightRow: Int32;
    procedure set_LowerRightRow(value: Int32);
    function get_LowerDeltaY: Int32;
    procedure set_LowerDeltaY(value: Int32);
    function get_LowerRightColumn: Int32;
    procedure set_LowerRightColumn(value: Int32);
    function get_LowerDeltaX: Int32;
    procedure set_LowerDeltaX(value: Int32);
    function get_Right: Int32;
    procedure set_Right(value: Int32);
    function get_Bottom: Int32;
    procedure set_Bottom(value: Int32);
    function get_Width: Int32;
    procedure set_Width(value: Int32);
    function get_WidthInch: Double;
    procedure set_WidthInch(value: Double);
    function get_WidthPt: Double;
    procedure set_WidthPt(value: Double);
    function get_WidthCM: Double;
    procedure set_WidthCM(value: Double);
    function get_Height: Int32;
    procedure set_Height(value: Int32);
    function get_HeightInch: Double;
    procedure set_HeightInch(value: Double);
    function get_HeightPt: Double;
    procedure set_HeightPt(value: Double);
    function get_HeightCM: Double;
    procedure set_HeightCM(value: Double);
    function get_Left: Int32;
    procedure set_Left(value: Int32);
    function get_LeftInch: Double;
    procedure set_LeftInch(value: Double);
    function get_LeftCM: Double;
    procedure set_LeftCM(value: Double);
    function get_Top: Int32;
    procedure set_Top(value: Int32);
    function get_TopInch: Double;
    procedure set_TopInch(value: Double);
    function get_TopCM: Double;
    procedure set_TopCM(value: Double);
    function get_TopToCorner: Int32;
    procedure set_TopToCorner(value: Int32);
    function get_LeftToCorner: Int32;
    procedure set_LeftToCorner(value: Int32);
    function get_X: Int32;
    procedure set_X(value: Int32);
    function get_Y: Int32;
    procedure set_Y(value: Int32);
    function get_WidthScale: Int32;
    procedure set_WidthScale(value: Int32);
    function get_HeightScale: Int32;
    procedure set_HeightScale(value: Int32);
    function get_TopInShape: Int32;
    procedure set_TopInShape(value: Int32);
    function get_LeftInShape: Int32;
    procedure set_LeftInShape(value: Int32);
    function get_WidthInShape: Int32;
    procedure set_WidthInShape(value: Int32);
    function get_HeightInShape: Int32;
    procedure set_HeightInShape(value: Int32);
    function get_Group: DNGroupShape;
    function get_Type: DNAutoShapeType;
    function get_HasLine: Boolean;
    procedure set_HasLine(value: Boolean);
    function get_IsFilled: Boolean;
    procedure set_IsFilled(value: Boolean);
    function get_IsFlippedHorizontally: Boolean;
    procedure set_IsFlippedHorizontally(value: Boolean);
    function get_IsFlippedVertically: Boolean;
    procedure set_IsFlippedVertically(value: Boolean);
    function get_ActualLowerRightRow: Int32;
    function get_ConnectionPoints: TArray<DDN.System.Drawing.DNPointF>;
    function get_RelativeToOriginalPictureSize: Boolean;
    procedure set_RelativeToOriginalPictureSize(value: Boolean);
    function get_LinkedCell: string;
    procedure set_LinkedCell(value: string);
    function get_InputRange: string;
    procedure set_InputRange(value: string);
    function get_TextShapeType: DNAutoShapeType;
    procedure set_TextShapeType(value: DNAutoShapeType);
    function get_TextBody: DNFontSettingCollection;
    function get_Font: DNFont;
    procedure set_Font(value: DNFont);
    function get_TextOptions: DNTextOptions;
    procedure set_TextOptions(value: DNTextOptions);
    function get_Text: string;
    procedure set_Text(value: string);
    function get_IsRichText: Boolean;
    function get_HtmlText: string;
    procedure set_HtmlText(value: string);
    function get_TextVerticalOverflow: DNTextOverflowType;
    procedure set_TextVerticalOverflow(value: DNTextOverflowType);
    function get_TextHorizontalOverflow: DNTextOverflowType;
    procedure set_TextHorizontalOverflow(value: DNTextOverflowType);
    function get_IsTextWrapped: Boolean;
    procedure set_IsTextWrapped(value: Boolean);
    function get_TextOrientationType: DNTextOrientationType;
    procedure set_TextOrientationType(value: DNTextOrientationType);
    function get_TextHorizontalAlignment: DNTextAlignmentType;
    procedure set_TextHorizontalAlignment(value: DNTextAlignmentType);
    function get_TextVerticalAlignment: DNTextAlignmentType;
    procedure set_TextVerticalAlignment(value: DNTextAlignmentType);
    function get_TextDirection: DNTextDirectionType;
    procedure set_TextDirection(value: DNTextDirectionType);
    function get_ControlData: TArray<Byte>;
    function get_ActiveXControl: DNActiveXControl;
    function get_Paths: DNShapePathCollection;
    function get_Geometry: DNGeometry;

  { methods } 

    function CalculateTextSize: TArray<Int32>;
    procedure FormatCharacters(startIndex: Int32; length: Int32; font: DNFont; flag: DNStyleFlag); overload;
    procedure FormatCharacters(startIndex: Int32; length: Int32; font: DNFont); overload;
    function Characters(startIndex: Int32; length: Int32): DNFontSetting;
    function GetCharacters: DDN.mscorlib.DNArrayList;
    procedure RemoveActiveXControl;
    procedure ToImage(stream: DDN.mscorlib.DNStream; imageFormat: DDN.System.Drawing.DNImageFormat); overload;
    procedure ToImage(imageFile: string; options: DNImageOrPrintOptions); overload;
    procedure ToImage(stream: DDN.mscorlib.DNStream; options: DNImageOrPrintOptions); overload;
    function ToImage(options: DNImageOrPrintOptions): DDN.System.Drawing.DNBitmap; overload;
    function GetLinkedCell(isR1C1: Boolean; isLocal: Boolean): string;
    procedure SetLinkedCell(formula: string; isR1C1: Boolean; isLocal: Boolean);
    function GetInputRange(isR1C1: Boolean; isLocal: Boolean): string;
    procedure SetInputRange(formula: string; isR1C1: Boolean; isLocal: Boolean);
    procedure UpdateSelectedValue;
    function GetResultOfSmartArt: DNGroupShape;
    procedure ToFrontOrBack(orders: Int32);
    function GetLockedProperty(&type: DNShapeLockType): Boolean;
    procedure SetLockedProperty(&type: DNShapeLockType; value: Boolean);
    function AddHyperlink(address: string): DNHyperlink;
    procedure RemoveHyperlink;
    procedure MoveToRange(upperLeftRow: Int32; upperLeftColumn: Int32; lowerRightRow: Int32; lowerRightColumn: Int32);
    procedure AlignTopRightCorner(topRow: Int32; rightColumn: Int32);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property MacroName: string read get_MacroName write set_MacroName;
    property IsEquation: Boolean read get_IsEquation;
    property IsSmartArt: Boolean read get_IsSmartArt;
    property ZOrderPosition: Int32 read get_ZOrderPosition write set_ZOrderPosition;
    property Name: string read get_Name write set_Name;
    property AlternativeText: string read get_AlternativeText write set_AlternativeText;
    property Title: string read get_Title write set_Title;
    property LineFormat: DNMsoLineFormat read get_LineFormat;
    property FillFormat: DNMsoFillFormat read get_FillFormat;
    property Format: DNShapeFormat read get_Format;
    property Line: DNLineFormat read get_Line;
    property Fill: DNFillFormat read get_Fill;
    property ShadowEffect: DNShadowEffect read get_ShadowEffect;
    property Reflection: DNReflectionEffect read get_Reflection;
    property Glow: DNGlowEffect read get_Glow;
    property SoftEdges: Double read get_SoftEdges write set_SoftEdges;
    property ThreeDFormat: DNThreeDFormat read get_ThreeDFormat;
    property TextFrame: DNMsoTextFrame read get_TextFrame;
    property FormatPicture: DNMsoFormatPicture read get_FormatPicture;
    property IsHidden: Boolean read get_IsHidden write set_IsHidden;
    property IsLockAspectRatio: Boolean read get_IsLockAspectRatio write set_IsLockAspectRatio;
    property RotationAngle: Double read get_RotationAngle write set_RotationAngle;
    property Hyperlink: DNHyperlink read get_Hyperlink;
    property Id: Int32 read get_Id;
    property Spid: string read get_Spid;
    property Spt: Int32 read get_Spt;
    property Worksheet: DNWorksheet read get_Worksheet;
    property IsGroup: Boolean read get_IsGroup;
    property IsWordArt: Boolean read get_IsWordArt;
    property TextEffect: DNTextEffectFormat read get_TextEffect;
    property IsLocked: Boolean read get_IsLocked write set_IsLocked;
    property IsPrintable: Boolean read get_IsPrintable write set_IsPrintable;
    property MsoDrawingType: DNMsoDrawingType read get_MsoDrawingType;
    property AutoShapeType: DNAutoShapeType read get_AutoShapeType write set_AutoShapeType;
    property AnchorType: DNShapeAnchorType read get_AnchorType write set_AnchorType;
    property Placement: DNPlacementType read get_Placement write set_Placement;
    property UpperLeftRow: Int32 read get_UpperLeftRow write set_UpperLeftRow;
    property UpperDeltaY: Int32 read get_UpperDeltaY write set_UpperDeltaY;
    property UpperLeftColumn: Int32 read get_UpperLeftColumn write set_UpperLeftColumn;
    property UpperDeltaX: Int32 read get_UpperDeltaX write set_UpperDeltaX;
    property LowerRightRow: Int32 read get_LowerRightRow write set_LowerRightRow;
    property LowerDeltaY: Int32 read get_LowerDeltaY write set_LowerDeltaY;
    property LowerRightColumn: Int32 read get_LowerRightColumn write set_LowerRightColumn;
    property LowerDeltaX: Int32 read get_LowerDeltaX write set_LowerDeltaX;
    property Right: Int32 read get_Right write set_Right;
    property Bottom: Int32 read get_Bottom write set_Bottom;
    property Width: Int32 read get_Width write set_Width;
    property WidthInch: Double read get_WidthInch write set_WidthInch;
    property WidthPt: Double read get_WidthPt write set_WidthPt;
    property WidthCM: Double read get_WidthCM write set_WidthCM;
    property Height: Int32 read get_Height write set_Height;
    property HeightInch: Double read get_HeightInch write set_HeightInch;
    property HeightPt: Double read get_HeightPt write set_HeightPt;
    property HeightCM: Double read get_HeightCM write set_HeightCM;
    property Left: Int32 read get_Left write set_Left;
    property LeftInch: Double read get_LeftInch write set_LeftInch;
    property LeftCM: Double read get_LeftCM write set_LeftCM;
    property Top: Int32 read get_Top write set_Top;
    property TopInch: Double read get_TopInch write set_TopInch;
    property TopCM: Double read get_TopCM write set_TopCM;
    property TopToCorner: Int32 read get_TopToCorner write set_TopToCorner;
    property LeftToCorner: Int32 read get_LeftToCorner write set_LeftToCorner;
    property X: Int32 read get_X write set_X;
    property Y: Int32 read get_Y write set_Y;
    property WidthScale: Int32 read get_WidthScale write set_WidthScale;
    property HeightScale: Int32 read get_HeightScale write set_HeightScale;
    property TopInShape: Int32 read get_TopInShape write set_TopInShape;
    property LeftInShape: Int32 read get_LeftInShape write set_LeftInShape;
    property WidthInShape: Int32 read get_WidthInShape write set_WidthInShape;
    property HeightInShape: Int32 read get_HeightInShape write set_HeightInShape;
    property Group: DNGroupShape read get_Group;
    property &Type: DNAutoShapeType read get_Type;
    property HasLine: Boolean read get_HasLine write set_HasLine;
    property IsFilled: Boolean read get_IsFilled write set_IsFilled;
    property IsFlippedHorizontally: Boolean read get_IsFlippedHorizontally write set_IsFlippedHorizontally;
    property IsFlippedVertically: Boolean read get_IsFlippedVertically write set_IsFlippedVertically;
    property ActualLowerRightRow: Int32 read get_ActualLowerRightRow;
    property ConnectionPoints: TArray<DDN.System.Drawing.DNPointF> read get_ConnectionPoints;
    property RelativeToOriginalPictureSize: Boolean read get_RelativeToOriginalPictureSize write set_RelativeToOriginalPictureSize;
    property LinkedCell: string read get_LinkedCell write set_LinkedCell;
    property InputRange: string read get_InputRange write set_InputRange;
    property TextShapeType: DNAutoShapeType read get_TextShapeType write set_TextShapeType;
    property TextBody: DNFontSettingCollection read get_TextBody;
    property Font: DNFont read get_Font write set_Font;
    property TextOptions: DNTextOptions read get_TextOptions write set_TextOptions;
    property Text: string read get_Text write set_Text;
    property IsRichText: Boolean read get_IsRichText;
    property HtmlText: string read get_HtmlText write set_HtmlText;
    property TextVerticalOverflow: DNTextOverflowType read get_TextVerticalOverflow write set_TextVerticalOverflow;
    property TextHorizontalOverflow: DNTextOverflowType read get_TextHorizontalOverflow write set_TextHorizontalOverflow;
    property IsTextWrapped: Boolean read get_IsTextWrapped write set_IsTextWrapped;
    property TextOrientationType: DNTextOrientationType read get_TextOrientationType write set_TextOrientationType;
    property TextHorizontalAlignment: DNTextAlignmentType read get_TextHorizontalAlignment write set_TextHorizontalAlignment;
    property TextVerticalAlignment: DNTextAlignmentType read get_TextVerticalAlignment write set_TextVerticalAlignment;
    property TextDirection: DNTextDirectionType read get_TextDirection write set_TextDirection;
    property ControlData: TArray<Byte> read get_ControlData;
    property ActiveXControl: DNActiveXControl read get_ActiveXControl;
    property Paths: DNShapePathCollection read get_Paths;
    property Geometry: DNGeometry read get_Geometry;
  end;

  TDNOval = class(TDNGenericImport<DNOvalClass, DNOval>) end;

  //-------------namespace: Aspose.Cells.Drawing----------------
  DNPictureClass = interface(DNShapeClass)
  ['{D5CA6942-A344-5FF6-915A-FFC2041873CD}']
  end;

  [DNTypeName('Aspose.Cells.Drawing.Picture')]
  DNPicture = interface(DNShape)
  ['{2D4B0738-52FB-3C6F-A3E3-0FD251D48852}']
  { getters & setters } 

    function get_OriginalHeight: Int32;
    function get_OriginalWidth: Int32;
    function get_BorderLineColor: DDN.System.Drawing.DNColor;
    procedure set_BorderLineColor(value: DDN.System.Drawing.DNColor);
    function get_BorderWeight: Double;
    procedure set_BorderWeight(value: Double);
    function get_Data: TArray<Byte>;
    procedure set_Data(value: TArray<Byte>);
    function get_SourceFullName: string;
    procedure set_SourceFullName(value: string);
    function get_Formula: string;
    procedure set_Formula(value: string);
    function get_IsAutoSize: Boolean;
    procedure set_IsAutoSize(value: Boolean);
    function get_IsLink: Boolean;
    procedure set_IsLink(value: Boolean);
    function get_IsDynamicDataExchange: Boolean;
    procedure set_IsDynamicDataExchange(value: Boolean);
    function get_DisplayAsIcon: Boolean;
    procedure set_DisplayAsIcon(value: Boolean);
    function get_ImageType: DNImageType;
    function get_OriginalHeightCM: Double;
    function get_OriginalWidthCM: Double;
    function get_OriginalHeightInch: Double;
    function get_OriginalWidthInch: Double;
    function get_SignatureLine: DNSignatureLine;
    procedure set_SignatureLine(value: DNSignatureLine);
    function get_MacroName: string;
    procedure set_MacroName(value: string);
    function get_IsEquation: Boolean;
    function get_IsSmartArt: Boolean;
    function get_ZOrderPosition: Int32;
    procedure set_ZOrderPosition(value: Int32);
    function get_Name: string;
    procedure set_Name(value: string);
    function get_AlternativeText: string;
    procedure set_AlternativeText(value: string);
    function get_Title: string;
    procedure set_Title(value: string);
    function get_LineFormat: DNMsoLineFormat;
    function get_FillFormat: DNMsoFillFormat;
    function get_Format: DNShapeFormat;
    function get_Line: DNLineFormat;
    function get_Fill: DNFillFormat;
    function get_ShadowEffect: DNShadowEffect;
    function get_Reflection: DNReflectionEffect;
    function get_Glow: DNGlowEffect;
    function get_SoftEdges: Double;
    procedure set_SoftEdges(value: Double);
    function get_ThreeDFormat: DNThreeDFormat;
    function get_TextFrame: DNMsoTextFrame;
    function get_FormatPicture: DNMsoFormatPicture;
    function get_IsHidden: Boolean;
    procedure set_IsHidden(value: Boolean);
    function get_IsLockAspectRatio: Boolean;
    procedure set_IsLockAspectRatio(value: Boolean);
    function get_RotationAngle: Double;
    procedure set_RotationAngle(value: Double);
    function get_Hyperlink: DNHyperlink;
    function get_Id: Int32;
    function get_Spid: string;
    function get_Spt: Int32;
    function get_Worksheet: DNWorksheet;
    function get_IsGroup: Boolean;
    function get_IsWordArt: Boolean;
    function get_TextEffect: DNTextEffectFormat;
    function get_IsLocked: Boolean;
    procedure set_IsLocked(value: Boolean);
    function get_IsPrintable: Boolean;
    procedure set_IsPrintable(value: Boolean);
    function get_MsoDrawingType: DNMsoDrawingType;
    function get_AutoShapeType: DNAutoShapeType;
    procedure set_AutoShapeType(value: DNAutoShapeType);
    function get_AnchorType: DNShapeAnchorType;
    procedure set_AnchorType(value: DNShapeAnchorType);
    function get_Placement: DNPlacementType;
    procedure set_Placement(value: DNPlacementType);
    function get_UpperLeftRow: Int32;
    procedure set_UpperLeftRow(value: Int32);
    function get_UpperDeltaY: Int32;
    procedure set_UpperDeltaY(value: Int32);
    function get_UpperLeftColumn: Int32;
    procedure set_UpperLeftColumn(value: Int32);
    function get_UpperDeltaX: Int32;
    procedure set_UpperDeltaX(value: Int32);
    function get_LowerRightRow: Int32;
    procedure set_LowerRightRow(value: Int32);
    function get_LowerDeltaY: Int32;
    procedure set_LowerDeltaY(value: Int32);
    function get_LowerRightColumn: Int32;
    procedure set_LowerRightColumn(value: Int32);
    function get_LowerDeltaX: Int32;
    procedure set_LowerDeltaX(value: Int32);
    function get_Right: Int32;
    procedure set_Right(value: Int32);
    function get_Bottom: Int32;
    procedure set_Bottom(value: Int32);
    function get_Width: Int32;
    procedure set_Width(value: Int32);
    function get_WidthInch: Double;
    procedure set_WidthInch(value: Double);
    function get_WidthPt: Double;
    procedure set_WidthPt(value: Double);
    function get_WidthCM: Double;
    procedure set_WidthCM(value: Double);
    function get_Height: Int32;
    procedure set_Height(value: Int32);
    function get_HeightInch: Double;
    procedure set_HeightInch(value: Double);
    function get_HeightPt: Double;
    procedure set_HeightPt(value: Double);
    function get_HeightCM: Double;
    procedure set_HeightCM(value: Double);
    function get_Left: Int32;
    procedure set_Left(value: Int32);
    function get_LeftInch: Double;
    procedure set_LeftInch(value: Double);
    function get_LeftCM: Double;
    procedure set_LeftCM(value: Double);
    function get_Top: Int32;
    procedure set_Top(value: Int32);
    function get_TopInch: Double;
    procedure set_TopInch(value: Double);
    function get_TopCM: Double;
    procedure set_TopCM(value: Double);
    function get_TopToCorner: Int32;
    procedure set_TopToCorner(value: Int32);
    function get_LeftToCorner: Int32;
    procedure set_LeftToCorner(value: Int32);
    function get_X: Int32;
    procedure set_X(value: Int32);
    function get_Y: Int32;
    procedure set_Y(value: Int32);
    function get_WidthScale: Int32;
    procedure set_WidthScale(value: Int32);
    function get_HeightScale: Int32;
    procedure set_HeightScale(value: Int32);
    function get_TopInShape: Int32;
    procedure set_TopInShape(value: Int32);
    function get_LeftInShape: Int32;
    procedure set_LeftInShape(value: Int32);
    function get_WidthInShape: Int32;
    procedure set_WidthInShape(value: Int32);
    function get_HeightInShape: Int32;
    procedure set_HeightInShape(value: Int32);
    function get_Group: DNGroupShape;
    function get_Type: DNAutoShapeType;
    function get_HasLine: Boolean;
    procedure set_HasLine(value: Boolean);
    function get_IsFilled: Boolean;
    procedure set_IsFilled(value: Boolean);
    function get_IsFlippedHorizontally: Boolean;
    procedure set_IsFlippedHorizontally(value: Boolean);
    function get_IsFlippedVertically: Boolean;
    procedure set_IsFlippedVertically(value: Boolean);
    function get_ActualLowerRightRow: Int32;
    function get_ConnectionPoints: TArray<DDN.System.Drawing.DNPointF>;
    function get_RelativeToOriginalPictureSize: Boolean;
    procedure set_RelativeToOriginalPictureSize(value: Boolean);
    function get_LinkedCell: string;
    procedure set_LinkedCell(value: string);
    function get_InputRange: string;
    procedure set_InputRange(value: string);
    function get_TextShapeType: DNAutoShapeType;
    procedure set_TextShapeType(value: DNAutoShapeType);
    function get_TextBody: DNFontSettingCollection;
    function get_Font: DNFont;
    procedure set_Font(value: DNFont);
    function get_TextOptions: DNTextOptions;
    procedure set_TextOptions(value: DNTextOptions);
    function get_Text: string;
    procedure set_Text(value: string);
    function get_IsRichText: Boolean;
    function get_HtmlText: string;
    procedure set_HtmlText(value: string);
    function get_TextVerticalOverflow: DNTextOverflowType;
    procedure set_TextVerticalOverflow(value: DNTextOverflowType);
    function get_TextHorizontalOverflow: DNTextOverflowType;
    procedure set_TextHorizontalOverflow(value: DNTextOverflowType);
    function get_IsTextWrapped: Boolean;
    procedure set_IsTextWrapped(value: Boolean);
    function get_TextOrientationType: DNTextOrientationType;
    procedure set_TextOrientationType(value: DNTextOrientationType);
    function get_TextHorizontalAlignment: DNTextAlignmentType;
    procedure set_TextHorizontalAlignment(value: DNTextAlignmentType);
    function get_TextVerticalAlignment: DNTextAlignmentType;
    procedure set_TextVerticalAlignment(value: DNTextAlignmentType);
    function get_TextDirection: DNTextDirectionType;
    procedure set_TextDirection(value: DNTextDirectionType);
    function get_ControlData: TArray<Byte>;
    function get_ActiveXControl: DNActiveXControl;
    function get_Paths: DNShapePathCollection;
    function get_Geometry: DNGeometry;

  { methods } 

    procedure Copy(source: DNPicture; options: DNCopyOptions);
    procedure Move(upperLeftRow: Int32; upperLeftColumn: Int32);
    function CalculateTextSize: TArray<Int32>;
    procedure FormatCharacters(startIndex: Int32; length: Int32; font: DNFont; flag: DNStyleFlag); overload;
    procedure FormatCharacters(startIndex: Int32; length: Int32; font: DNFont); overload;
    function Characters(startIndex: Int32; length: Int32): DNFontSetting;
    function GetCharacters: DDN.mscorlib.DNArrayList;
    procedure RemoveActiveXControl;
    procedure ToImage(stream: DDN.mscorlib.DNStream; imageFormat: DDN.System.Drawing.DNImageFormat); overload;
    procedure ToImage(imageFile: string; options: DNImageOrPrintOptions); overload;
    procedure ToImage(stream: DDN.mscorlib.DNStream; options: DNImageOrPrintOptions); overload;
    function ToImage(options: DNImageOrPrintOptions): DDN.System.Drawing.DNBitmap; overload;
    function GetLinkedCell(isR1C1: Boolean; isLocal: Boolean): string;
    procedure SetLinkedCell(formula: string; isR1C1: Boolean; isLocal: Boolean);
    function GetInputRange(isR1C1: Boolean; isLocal: Boolean): string;
    procedure SetInputRange(formula: string; isR1C1: Boolean; isLocal: Boolean);
    procedure UpdateSelectedValue;
    function GetResultOfSmartArt: DNGroupShape;
    procedure ToFrontOrBack(orders: Int32);
    function GetLockedProperty(&type: DNShapeLockType): Boolean;
    procedure SetLockedProperty(&type: DNShapeLockType; value: Boolean);
    function AddHyperlink(address: string): DNHyperlink;
    procedure RemoveHyperlink;
    procedure MoveToRange(upperLeftRow: Int32; upperLeftColumn: Int32; lowerRightRow: Int32; lowerRightColumn: Int32);
    procedure AlignTopRightCorner(topRow: Int32; rightColumn: Int32);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property OriginalHeight: Int32 read get_OriginalHeight;
    property OriginalWidth: Int32 read get_OriginalWidth;
    property BorderLineColor: DDN.System.Drawing.DNColor read get_BorderLineColor write set_BorderLineColor;
    property BorderWeight: Double read get_BorderWeight write set_BorderWeight;
    property Data: TArray<Byte> read get_Data write set_Data;
    property SourceFullName: string read get_SourceFullName write set_SourceFullName;
    property Formula: string read get_Formula write set_Formula;
    property IsAutoSize: Boolean read get_IsAutoSize write set_IsAutoSize;
    property IsLink: Boolean read get_IsLink write set_IsLink;
    property IsDynamicDataExchange: Boolean read get_IsDynamicDataExchange write set_IsDynamicDataExchange;
    property DisplayAsIcon: Boolean read get_DisplayAsIcon write set_DisplayAsIcon;
    property ImageType: DNImageType read get_ImageType;
    property OriginalHeightCM: Double read get_OriginalHeightCM;
    property OriginalWidthCM: Double read get_OriginalWidthCM;
    property OriginalHeightInch: Double read get_OriginalHeightInch;
    property OriginalWidthInch: Double read get_OriginalWidthInch;
    property SignatureLine: DNSignatureLine read get_SignatureLine write set_SignatureLine;
    property MacroName: string read get_MacroName write set_MacroName;
    property IsEquation: Boolean read get_IsEquation;
    property IsSmartArt: Boolean read get_IsSmartArt;
    property ZOrderPosition: Int32 read get_ZOrderPosition write set_ZOrderPosition;
    property Name: string read get_Name write set_Name;
    property AlternativeText: string read get_AlternativeText write set_AlternativeText;
    property Title: string read get_Title write set_Title;
    property LineFormat: DNMsoLineFormat read get_LineFormat;
    property FillFormat: DNMsoFillFormat read get_FillFormat;
    property Format: DNShapeFormat read get_Format;
    property Line: DNLineFormat read get_Line;
    property Fill: DNFillFormat read get_Fill;
    property ShadowEffect: DNShadowEffect read get_ShadowEffect;
    property Reflection: DNReflectionEffect read get_Reflection;
    property Glow: DNGlowEffect read get_Glow;
    property SoftEdges: Double read get_SoftEdges write set_SoftEdges;
    property ThreeDFormat: DNThreeDFormat read get_ThreeDFormat;
    property TextFrame: DNMsoTextFrame read get_TextFrame;
    property FormatPicture: DNMsoFormatPicture read get_FormatPicture;
    property IsHidden: Boolean read get_IsHidden write set_IsHidden;
    property IsLockAspectRatio: Boolean read get_IsLockAspectRatio write set_IsLockAspectRatio;
    property RotationAngle: Double read get_RotationAngle write set_RotationAngle;
    property Hyperlink: DNHyperlink read get_Hyperlink;
    property Id: Int32 read get_Id;
    property Spid: string read get_Spid;
    property Spt: Int32 read get_Spt;
    property Worksheet: DNWorksheet read get_Worksheet;
    property IsGroup: Boolean read get_IsGroup;
    property IsWordArt: Boolean read get_IsWordArt;
    property TextEffect: DNTextEffectFormat read get_TextEffect;
    property IsLocked: Boolean read get_IsLocked write set_IsLocked;
    property IsPrintable: Boolean read get_IsPrintable write set_IsPrintable;
    property MsoDrawingType: DNMsoDrawingType read get_MsoDrawingType;
    property AutoShapeType: DNAutoShapeType read get_AutoShapeType write set_AutoShapeType;
    property AnchorType: DNShapeAnchorType read get_AnchorType write set_AnchorType;
    property Placement: DNPlacementType read get_Placement write set_Placement;
    property UpperLeftRow: Int32 read get_UpperLeftRow write set_UpperLeftRow;
    property UpperDeltaY: Int32 read get_UpperDeltaY write set_UpperDeltaY;
    property UpperLeftColumn: Int32 read get_UpperLeftColumn write set_UpperLeftColumn;
    property UpperDeltaX: Int32 read get_UpperDeltaX write set_UpperDeltaX;
    property LowerRightRow: Int32 read get_LowerRightRow write set_LowerRightRow;
    property LowerDeltaY: Int32 read get_LowerDeltaY write set_LowerDeltaY;
    property LowerRightColumn: Int32 read get_LowerRightColumn write set_LowerRightColumn;
    property LowerDeltaX: Int32 read get_LowerDeltaX write set_LowerDeltaX;
    property Right: Int32 read get_Right write set_Right;
    property Bottom: Int32 read get_Bottom write set_Bottom;
    property Width: Int32 read get_Width write set_Width;
    property WidthInch: Double read get_WidthInch write set_WidthInch;
    property WidthPt: Double read get_WidthPt write set_WidthPt;
    property WidthCM: Double read get_WidthCM write set_WidthCM;
    property Height: Int32 read get_Height write set_Height;
    property HeightInch: Double read get_HeightInch write set_HeightInch;
    property HeightPt: Double read get_HeightPt write set_HeightPt;
    property HeightCM: Double read get_HeightCM write set_HeightCM;
    property Left: Int32 read get_Left write set_Left;
    property LeftInch: Double read get_LeftInch write set_LeftInch;
    property LeftCM: Double read get_LeftCM write set_LeftCM;
    property Top: Int32 read get_Top write set_Top;
    property TopInch: Double read get_TopInch write set_TopInch;
    property TopCM: Double read get_TopCM write set_TopCM;
    property TopToCorner: Int32 read get_TopToCorner write set_TopToCorner;
    property LeftToCorner: Int32 read get_LeftToCorner write set_LeftToCorner;
    property X: Int32 read get_X write set_X;
    property Y: Int32 read get_Y write set_Y;
    property WidthScale: Int32 read get_WidthScale write set_WidthScale;
    property HeightScale: Int32 read get_HeightScale write set_HeightScale;
    property TopInShape: Int32 read get_TopInShape write set_TopInShape;
    property LeftInShape: Int32 read get_LeftInShape write set_LeftInShape;
    property WidthInShape: Int32 read get_WidthInShape write set_WidthInShape;
    property HeightInShape: Int32 read get_HeightInShape write set_HeightInShape;
    property Group: DNGroupShape read get_Group;
    property &Type: DNAutoShapeType read get_Type;
    property HasLine: Boolean read get_HasLine write set_HasLine;
    property IsFilled: Boolean read get_IsFilled write set_IsFilled;
    property IsFlippedHorizontally: Boolean read get_IsFlippedHorizontally write set_IsFlippedHorizontally;
    property IsFlippedVertically: Boolean read get_IsFlippedVertically write set_IsFlippedVertically;
    property ActualLowerRightRow: Int32 read get_ActualLowerRightRow;
    property ConnectionPoints: TArray<DDN.System.Drawing.DNPointF> read get_ConnectionPoints;
    property RelativeToOriginalPictureSize: Boolean read get_RelativeToOriginalPictureSize write set_RelativeToOriginalPictureSize;
    property LinkedCell: string read get_LinkedCell write set_LinkedCell;
    property InputRange: string read get_InputRange write set_InputRange;
    property TextShapeType: DNAutoShapeType read get_TextShapeType write set_TextShapeType;
    property TextBody: DNFontSettingCollection read get_TextBody;
    property Font: DNFont read get_Font write set_Font;
    property TextOptions: DNTextOptions read get_TextOptions write set_TextOptions;
    property Text: string read get_Text write set_Text;
    property IsRichText: Boolean read get_IsRichText;
    property HtmlText: string read get_HtmlText write set_HtmlText;
    property TextVerticalOverflow: DNTextOverflowType read get_TextVerticalOverflow write set_TextVerticalOverflow;
    property TextHorizontalOverflow: DNTextOverflowType read get_TextHorizontalOverflow write set_TextHorizontalOverflow;
    property IsTextWrapped: Boolean read get_IsTextWrapped write set_IsTextWrapped;
    property TextOrientationType: DNTextOrientationType read get_TextOrientationType write set_TextOrientationType;
    property TextHorizontalAlignment: DNTextAlignmentType read get_TextHorizontalAlignment write set_TextHorizontalAlignment;
    property TextVerticalAlignment: DNTextAlignmentType read get_TextVerticalAlignment write set_TextVerticalAlignment;
    property TextDirection: DNTextDirectionType read get_TextDirection write set_TextDirection;
    property ControlData: TArray<Byte> read get_ControlData;
    property ActiveXControl: DNActiveXControl read get_ActiveXControl;
    property Paths: DNShapePathCollection read get_Paths;
    property Geometry: DNGeometry read get_Geometry;
  end;

  TDNPicture = class(TDNGenericImport<DNPictureClass, DNPicture>) end;

  //-------------namespace: Aspose.Cells.Drawing----------------
  DNRadioButtonClass = interface(DNShapeClass)
  ['{BC9CB720-5AF5-56A8-BE51-0E8B227C362D}']
  end;

  [DNTypeName('Aspose.Cells.Drawing.RadioButton')]
  DNRadioButton = interface(DNShape)
  ['{011F43ED-DC2A-3BE8-9FD5-6A7D1ED050E6}']
  { getters & setters } 

    function get_IsChecked: Boolean;
    procedure set_IsChecked(value: Boolean);
    function get_Shadow: Boolean;
    procedure set_Shadow(value: Boolean);
    function get_GroupBox: DNGroupBox;
    function get_MacroName: string;
    procedure set_MacroName(value: string);
    function get_IsEquation: Boolean;
    function get_IsSmartArt: Boolean;
    function get_ZOrderPosition: Int32;
    procedure set_ZOrderPosition(value: Int32);
    function get_Name: string;
    procedure set_Name(value: string);
    function get_AlternativeText: string;
    procedure set_AlternativeText(value: string);
    function get_Title: string;
    procedure set_Title(value: string);
    function get_LineFormat: DNMsoLineFormat;
    function get_FillFormat: DNMsoFillFormat;
    function get_Format: DNShapeFormat;
    function get_Line: DNLineFormat;
    function get_Fill: DNFillFormat;
    function get_ShadowEffect: DNShadowEffect;
    function get_Reflection: DNReflectionEffect;
    function get_Glow: DNGlowEffect;
    function get_SoftEdges: Double;
    procedure set_SoftEdges(value: Double);
    function get_ThreeDFormat: DNThreeDFormat;
    function get_TextFrame: DNMsoTextFrame;
    function get_FormatPicture: DNMsoFormatPicture;
    function get_IsHidden: Boolean;
    procedure set_IsHidden(value: Boolean);
    function get_IsLockAspectRatio: Boolean;
    procedure set_IsLockAspectRatio(value: Boolean);
    function get_RotationAngle: Double;
    procedure set_RotationAngle(value: Double);
    function get_Hyperlink: DNHyperlink;
    function get_Id: Int32;
    function get_Spid: string;
    function get_Spt: Int32;
    function get_Worksheet: DNWorksheet;
    function get_IsGroup: Boolean;
    function get_IsWordArt: Boolean;
    function get_TextEffect: DNTextEffectFormat;
    function get_IsLocked: Boolean;
    procedure set_IsLocked(value: Boolean);
    function get_IsPrintable: Boolean;
    procedure set_IsPrintable(value: Boolean);
    function get_MsoDrawingType: DNMsoDrawingType;
    function get_AutoShapeType: DNAutoShapeType;
    procedure set_AutoShapeType(value: DNAutoShapeType);
    function get_AnchorType: DNShapeAnchorType;
    procedure set_AnchorType(value: DNShapeAnchorType);
    function get_Placement: DNPlacementType;
    procedure set_Placement(value: DNPlacementType);
    function get_UpperLeftRow: Int32;
    procedure set_UpperLeftRow(value: Int32);
    function get_UpperDeltaY: Int32;
    procedure set_UpperDeltaY(value: Int32);
    function get_UpperLeftColumn: Int32;
    procedure set_UpperLeftColumn(value: Int32);
    function get_UpperDeltaX: Int32;
    procedure set_UpperDeltaX(value: Int32);
    function get_LowerRightRow: Int32;
    procedure set_LowerRightRow(value: Int32);
    function get_LowerDeltaY: Int32;
    procedure set_LowerDeltaY(value: Int32);
    function get_LowerRightColumn: Int32;
    procedure set_LowerRightColumn(value: Int32);
    function get_LowerDeltaX: Int32;
    procedure set_LowerDeltaX(value: Int32);
    function get_Right: Int32;
    procedure set_Right(value: Int32);
    function get_Bottom: Int32;
    procedure set_Bottom(value: Int32);
    function get_Width: Int32;
    procedure set_Width(value: Int32);
    function get_WidthInch: Double;
    procedure set_WidthInch(value: Double);
    function get_WidthPt: Double;
    procedure set_WidthPt(value: Double);
    function get_WidthCM: Double;
    procedure set_WidthCM(value: Double);
    function get_Height: Int32;
    procedure set_Height(value: Int32);
    function get_HeightInch: Double;
    procedure set_HeightInch(value: Double);
    function get_HeightPt: Double;
    procedure set_HeightPt(value: Double);
    function get_HeightCM: Double;
    procedure set_HeightCM(value: Double);
    function get_Left: Int32;
    procedure set_Left(value: Int32);
    function get_LeftInch: Double;
    procedure set_LeftInch(value: Double);
    function get_LeftCM: Double;
    procedure set_LeftCM(value: Double);
    function get_Top: Int32;
    procedure set_Top(value: Int32);
    function get_TopInch: Double;
    procedure set_TopInch(value: Double);
    function get_TopCM: Double;
    procedure set_TopCM(value: Double);
    function get_TopToCorner: Int32;
    procedure set_TopToCorner(value: Int32);
    function get_LeftToCorner: Int32;
    procedure set_LeftToCorner(value: Int32);
    function get_X: Int32;
    procedure set_X(value: Int32);
    function get_Y: Int32;
    procedure set_Y(value: Int32);
    function get_WidthScale: Int32;
    procedure set_WidthScale(value: Int32);
    function get_HeightScale: Int32;
    procedure set_HeightScale(value: Int32);
    function get_TopInShape: Int32;
    procedure set_TopInShape(value: Int32);
    function get_LeftInShape: Int32;
    procedure set_LeftInShape(value: Int32);
    function get_WidthInShape: Int32;
    procedure set_WidthInShape(value: Int32);
    function get_HeightInShape: Int32;
    procedure set_HeightInShape(value: Int32);
    function get_Group: DNGroupShape;
    function get_Type: DNAutoShapeType;
    function get_HasLine: Boolean;
    procedure set_HasLine(value: Boolean);
    function get_IsFilled: Boolean;
    procedure set_IsFilled(value: Boolean);
    function get_IsFlippedHorizontally: Boolean;
    procedure set_IsFlippedHorizontally(value: Boolean);
    function get_IsFlippedVertically: Boolean;
    procedure set_IsFlippedVertically(value: Boolean);
    function get_ActualLowerRightRow: Int32;
    function get_ConnectionPoints: TArray<DDN.System.Drawing.DNPointF>;
    function get_RelativeToOriginalPictureSize: Boolean;
    procedure set_RelativeToOriginalPictureSize(value: Boolean);
    function get_LinkedCell: string;
    procedure set_LinkedCell(value: string);
    function get_InputRange: string;
    procedure set_InputRange(value: string);
    function get_TextShapeType: DNAutoShapeType;
    procedure set_TextShapeType(value: DNAutoShapeType);
    function get_TextBody: DNFontSettingCollection;
    function get_Font: DNFont;
    procedure set_Font(value: DNFont);
    function get_TextOptions: DNTextOptions;
    procedure set_TextOptions(value: DNTextOptions);
    function get_Text: string;
    procedure set_Text(value: string);
    function get_IsRichText: Boolean;
    function get_HtmlText: string;
    procedure set_HtmlText(value: string);
    function get_TextVerticalOverflow: DNTextOverflowType;
    procedure set_TextVerticalOverflow(value: DNTextOverflowType);
    function get_TextHorizontalOverflow: DNTextOverflowType;
    procedure set_TextHorizontalOverflow(value: DNTextOverflowType);
    function get_IsTextWrapped: Boolean;
    procedure set_IsTextWrapped(value: Boolean);
    function get_TextOrientationType: DNTextOrientationType;
    procedure set_TextOrientationType(value: DNTextOrientationType);
    function get_TextHorizontalAlignment: DNTextAlignmentType;
    procedure set_TextHorizontalAlignment(value: DNTextAlignmentType);
    function get_TextVerticalAlignment: DNTextAlignmentType;
    procedure set_TextVerticalAlignment(value: DNTextAlignmentType);
    function get_TextDirection: DNTextDirectionType;
    procedure set_TextDirection(value: DNTextDirectionType);
    function get_ControlData: TArray<Byte>;
    function get_ActiveXControl: DNActiveXControl;
    function get_Paths: DNShapePathCollection;
    function get_Geometry: DNGeometry;

  { methods } 

    function CalculateTextSize: TArray<Int32>;
    procedure FormatCharacters(startIndex: Int32; length: Int32; font: DNFont; flag: DNStyleFlag); overload;
    procedure FormatCharacters(startIndex: Int32; length: Int32; font: DNFont); overload;
    function Characters(startIndex: Int32; length: Int32): DNFontSetting;
    function GetCharacters: DDN.mscorlib.DNArrayList;
    procedure RemoveActiveXControl;
    procedure ToImage(stream: DDN.mscorlib.DNStream; imageFormat: DDN.System.Drawing.DNImageFormat); overload;
    procedure ToImage(imageFile: string; options: DNImageOrPrintOptions); overload;
    procedure ToImage(stream: DDN.mscorlib.DNStream; options: DNImageOrPrintOptions); overload;
    function ToImage(options: DNImageOrPrintOptions): DDN.System.Drawing.DNBitmap; overload;
    function GetLinkedCell(isR1C1: Boolean; isLocal: Boolean): string;
    procedure SetLinkedCell(formula: string; isR1C1: Boolean; isLocal: Boolean);
    function GetInputRange(isR1C1: Boolean; isLocal: Boolean): string;
    procedure SetInputRange(formula: string; isR1C1: Boolean; isLocal: Boolean);
    procedure UpdateSelectedValue;
    function GetResultOfSmartArt: DNGroupShape;
    procedure ToFrontOrBack(orders: Int32);
    function GetLockedProperty(&type: DNShapeLockType): Boolean;
    procedure SetLockedProperty(&type: DNShapeLockType; value: Boolean);
    function AddHyperlink(address: string): DNHyperlink;
    procedure RemoveHyperlink;
    procedure MoveToRange(upperLeftRow: Int32; upperLeftColumn: Int32; lowerRightRow: Int32; lowerRightColumn: Int32);
    procedure AlignTopRightCorner(topRow: Int32; rightColumn: Int32);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property IsChecked: Boolean read get_IsChecked write set_IsChecked;
    property Shadow: Boolean read get_Shadow write set_Shadow;
    property GroupBox: DNGroupBox read get_GroupBox;
    property MacroName: string read get_MacroName write set_MacroName;
    property IsEquation: Boolean read get_IsEquation;
    property IsSmartArt: Boolean read get_IsSmartArt;
    property ZOrderPosition: Int32 read get_ZOrderPosition write set_ZOrderPosition;
    property Name: string read get_Name write set_Name;
    property AlternativeText: string read get_AlternativeText write set_AlternativeText;
    property Title: string read get_Title write set_Title;
    property LineFormat: DNMsoLineFormat read get_LineFormat;
    property FillFormat: DNMsoFillFormat read get_FillFormat;
    property Format: DNShapeFormat read get_Format;
    property Line: DNLineFormat read get_Line;
    property Fill: DNFillFormat read get_Fill;
    property ShadowEffect: DNShadowEffect read get_ShadowEffect;
    property Reflection: DNReflectionEffect read get_Reflection;
    property Glow: DNGlowEffect read get_Glow;
    property SoftEdges: Double read get_SoftEdges write set_SoftEdges;
    property ThreeDFormat: DNThreeDFormat read get_ThreeDFormat;
    property TextFrame: DNMsoTextFrame read get_TextFrame;
    property FormatPicture: DNMsoFormatPicture read get_FormatPicture;
    property IsHidden: Boolean read get_IsHidden write set_IsHidden;
    property IsLockAspectRatio: Boolean read get_IsLockAspectRatio write set_IsLockAspectRatio;
    property RotationAngle: Double read get_RotationAngle write set_RotationAngle;
    property Hyperlink: DNHyperlink read get_Hyperlink;
    property Id: Int32 read get_Id;
    property Spid: string read get_Spid;
    property Spt: Int32 read get_Spt;
    property Worksheet: DNWorksheet read get_Worksheet;
    property IsGroup: Boolean read get_IsGroup;
    property IsWordArt: Boolean read get_IsWordArt;
    property TextEffect: DNTextEffectFormat read get_TextEffect;
    property IsLocked: Boolean read get_IsLocked write set_IsLocked;
    property IsPrintable: Boolean read get_IsPrintable write set_IsPrintable;
    property MsoDrawingType: DNMsoDrawingType read get_MsoDrawingType;
    property AutoShapeType: DNAutoShapeType read get_AutoShapeType write set_AutoShapeType;
    property AnchorType: DNShapeAnchorType read get_AnchorType write set_AnchorType;
    property Placement: DNPlacementType read get_Placement write set_Placement;
    property UpperLeftRow: Int32 read get_UpperLeftRow write set_UpperLeftRow;
    property UpperDeltaY: Int32 read get_UpperDeltaY write set_UpperDeltaY;
    property UpperLeftColumn: Int32 read get_UpperLeftColumn write set_UpperLeftColumn;
    property UpperDeltaX: Int32 read get_UpperDeltaX write set_UpperDeltaX;
    property LowerRightRow: Int32 read get_LowerRightRow write set_LowerRightRow;
    property LowerDeltaY: Int32 read get_LowerDeltaY write set_LowerDeltaY;
    property LowerRightColumn: Int32 read get_LowerRightColumn write set_LowerRightColumn;
    property LowerDeltaX: Int32 read get_LowerDeltaX write set_LowerDeltaX;
    property Right: Int32 read get_Right write set_Right;
    property Bottom: Int32 read get_Bottom write set_Bottom;
    property Width: Int32 read get_Width write set_Width;
    property WidthInch: Double read get_WidthInch write set_WidthInch;
    property WidthPt: Double read get_WidthPt write set_WidthPt;
    property WidthCM: Double read get_WidthCM write set_WidthCM;
    property Height: Int32 read get_Height write set_Height;
    property HeightInch: Double read get_HeightInch write set_HeightInch;
    property HeightPt: Double read get_HeightPt write set_HeightPt;
    property HeightCM: Double read get_HeightCM write set_HeightCM;
    property Left: Int32 read get_Left write set_Left;
    property LeftInch: Double read get_LeftInch write set_LeftInch;
    property LeftCM: Double read get_LeftCM write set_LeftCM;
    property Top: Int32 read get_Top write set_Top;
    property TopInch: Double read get_TopInch write set_TopInch;
    property TopCM: Double read get_TopCM write set_TopCM;
    property TopToCorner: Int32 read get_TopToCorner write set_TopToCorner;
    property LeftToCorner: Int32 read get_LeftToCorner write set_LeftToCorner;
    property X: Int32 read get_X write set_X;
    property Y: Int32 read get_Y write set_Y;
    property WidthScale: Int32 read get_WidthScale write set_WidthScale;
    property HeightScale: Int32 read get_HeightScale write set_HeightScale;
    property TopInShape: Int32 read get_TopInShape write set_TopInShape;
    property LeftInShape: Int32 read get_LeftInShape write set_LeftInShape;
    property WidthInShape: Int32 read get_WidthInShape write set_WidthInShape;
    property HeightInShape: Int32 read get_HeightInShape write set_HeightInShape;
    property Group: DNGroupShape read get_Group;
    property &Type: DNAutoShapeType read get_Type;
    property HasLine: Boolean read get_HasLine write set_HasLine;
    property IsFilled: Boolean read get_IsFilled write set_IsFilled;
    property IsFlippedHorizontally: Boolean read get_IsFlippedHorizontally write set_IsFlippedHorizontally;
    property IsFlippedVertically: Boolean read get_IsFlippedVertically write set_IsFlippedVertically;
    property ActualLowerRightRow: Int32 read get_ActualLowerRightRow;
    property ConnectionPoints: TArray<DDN.System.Drawing.DNPointF> read get_ConnectionPoints;
    property RelativeToOriginalPictureSize: Boolean read get_RelativeToOriginalPictureSize write set_RelativeToOriginalPictureSize;
    property LinkedCell: string read get_LinkedCell write set_LinkedCell;
    property InputRange: string read get_InputRange write set_InputRange;
    property TextShapeType: DNAutoShapeType read get_TextShapeType write set_TextShapeType;
    property TextBody: DNFontSettingCollection read get_TextBody;
    property Font: DNFont read get_Font write set_Font;
    property TextOptions: DNTextOptions read get_TextOptions write set_TextOptions;
    property Text: string read get_Text write set_Text;
    property IsRichText: Boolean read get_IsRichText;
    property HtmlText: string read get_HtmlText write set_HtmlText;
    property TextVerticalOverflow: DNTextOverflowType read get_TextVerticalOverflow write set_TextVerticalOverflow;
    property TextHorizontalOverflow: DNTextOverflowType read get_TextHorizontalOverflow write set_TextHorizontalOverflow;
    property IsTextWrapped: Boolean read get_IsTextWrapped write set_IsTextWrapped;
    property TextOrientationType: DNTextOrientationType read get_TextOrientationType write set_TextOrientationType;
    property TextHorizontalAlignment: DNTextAlignmentType read get_TextHorizontalAlignment write set_TextHorizontalAlignment;
    property TextVerticalAlignment: DNTextAlignmentType read get_TextVerticalAlignment write set_TextVerticalAlignment;
    property TextDirection: DNTextDirectionType read get_TextDirection write set_TextDirection;
    property ControlData: TArray<Byte> read get_ControlData;
    property ActiveXControl: DNActiveXControl read get_ActiveXControl;
    property Paths: DNShapePathCollection read get_Paths;
    property Geometry: DNGeometry read get_Geometry;
  end;

  TDNRadioButton = class(TDNGenericImport<DNRadioButtonClass, DNRadioButton>) end;

  //-------------namespace: Aspose.Cells.Drawing----------------
  DNRectangleShapeClass = interface(DNShapeClass)
  ['{B16C0413-3A7F-5A89-9747-FBFC3F69CC90}']
  end;

  [DNTypeName('Aspose.Cells.Drawing.RectangleShape')]
  DNRectangleShape = interface(DNShape)
  ['{048E6BF1-62E0-3A8B-A05E-34CC0C7B9ABC}']
  { getters & setters } 

    function get_MacroName: string;
    procedure set_MacroName(value: string);
    function get_IsEquation: Boolean;
    function get_IsSmartArt: Boolean;
    function get_ZOrderPosition: Int32;
    procedure set_ZOrderPosition(value: Int32);
    function get_Name: string;
    procedure set_Name(value: string);
    function get_AlternativeText: string;
    procedure set_AlternativeText(value: string);
    function get_Title: string;
    procedure set_Title(value: string);
    function get_LineFormat: DNMsoLineFormat;
    function get_FillFormat: DNMsoFillFormat;
    function get_Format: DNShapeFormat;
    function get_Line: DNLineFormat;
    function get_Fill: DNFillFormat;
    function get_ShadowEffect: DNShadowEffect;
    function get_Reflection: DNReflectionEffect;
    function get_Glow: DNGlowEffect;
    function get_SoftEdges: Double;
    procedure set_SoftEdges(value: Double);
    function get_ThreeDFormat: DNThreeDFormat;
    function get_TextFrame: DNMsoTextFrame;
    function get_FormatPicture: DNMsoFormatPicture;
    function get_IsHidden: Boolean;
    procedure set_IsHidden(value: Boolean);
    function get_IsLockAspectRatio: Boolean;
    procedure set_IsLockAspectRatio(value: Boolean);
    function get_RotationAngle: Double;
    procedure set_RotationAngle(value: Double);
    function get_Hyperlink: DNHyperlink;
    function get_Id: Int32;
    function get_Spid: string;
    function get_Spt: Int32;
    function get_Worksheet: DNWorksheet;
    function get_IsGroup: Boolean;
    function get_IsWordArt: Boolean;
    function get_TextEffect: DNTextEffectFormat;
    function get_IsLocked: Boolean;
    procedure set_IsLocked(value: Boolean);
    function get_IsPrintable: Boolean;
    procedure set_IsPrintable(value: Boolean);
    function get_MsoDrawingType: DNMsoDrawingType;
    function get_AutoShapeType: DNAutoShapeType;
    procedure set_AutoShapeType(value: DNAutoShapeType);
    function get_AnchorType: DNShapeAnchorType;
    procedure set_AnchorType(value: DNShapeAnchorType);
    function get_Placement: DNPlacementType;
    procedure set_Placement(value: DNPlacementType);
    function get_UpperLeftRow: Int32;
    procedure set_UpperLeftRow(value: Int32);
    function get_UpperDeltaY: Int32;
    procedure set_UpperDeltaY(value: Int32);
    function get_UpperLeftColumn: Int32;
    procedure set_UpperLeftColumn(value: Int32);
    function get_UpperDeltaX: Int32;
    procedure set_UpperDeltaX(value: Int32);
    function get_LowerRightRow: Int32;
    procedure set_LowerRightRow(value: Int32);
    function get_LowerDeltaY: Int32;
    procedure set_LowerDeltaY(value: Int32);
    function get_LowerRightColumn: Int32;
    procedure set_LowerRightColumn(value: Int32);
    function get_LowerDeltaX: Int32;
    procedure set_LowerDeltaX(value: Int32);
    function get_Right: Int32;
    procedure set_Right(value: Int32);
    function get_Bottom: Int32;
    procedure set_Bottom(value: Int32);
    function get_Width: Int32;
    procedure set_Width(value: Int32);
    function get_WidthInch: Double;
    procedure set_WidthInch(value: Double);
    function get_WidthPt: Double;
    procedure set_WidthPt(value: Double);
    function get_WidthCM: Double;
    procedure set_WidthCM(value: Double);
    function get_Height: Int32;
    procedure set_Height(value: Int32);
    function get_HeightInch: Double;
    procedure set_HeightInch(value: Double);
    function get_HeightPt: Double;
    procedure set_HeightPt(value: Double);
    function get_HeightCM: Double;
    procedure set_HeightCM(value: Double);
    function get_Left: Int32;
    procedure set_Left(value: Int32);
    function get_LeftInch: Double;
    procedure set_LeftInch(value: Double);
    function get_LeftCM: Double;
    procedure set_LeftCM(value: Double);
    function get_Top: Int32;
    procedure set_Top(value: Int32);
    function get_TopInch: Double;
    procedure set_TopInch(value: Double);
    function get_TopCM: Double;
    procedure set_TopCM(value: Double);
    function get_TopToCorner: Int32;
    procedure set_TopToCorner(value: Int32);
    function get_LeftToCorner: Int32;
    procedure set_LeftToCorner(value: Int32);
    function get_X: Int32;
    procedure set_X(value: Int32);
    function get_Y: Int32;
    procedure set_Y(value: Int32);
    function get_WidthScale: Int32;
    procedure set_WidthScale(value: Int32);
    function get_HeightScale: Int32;
    procedure set_HeightScale(value: Int32);
    function get_TopInShape: Int32;
    procedure set_TopInShape(value: Int32);
    function get_LeftInShape: Int32;
    procedure set_LeftInShape(value: Int32);
    function get_WidthInShape: Int32;
    procedure set_WidthInShape(value: Int32);
    function get_HeightInShape: Int32;
    procedure set_HeightInShape(value: Int32);
    function get_Group: DNGroupShape;
    function get_Type: DNAutoShapeType;
    function get_HasLine: Boolean;
    procedure set_HasLine(value: Boolean);
    function get_IsFilled: Boolean;
    procedure set_IsFilled(value: Boolean);
    function get_IsFlippedHorizontally: Boolean;
    procedure set_IsFlippedHorizontally(value: Boolean);
    function get_IsFlippedVertically: Boolean;
    procedure set_IsFlippedVertically(value: Boolean);
    function get_ActualLowerRightRow: Int32;
    function get_ConnectionPoints: TArray<DDN.System.Drawing.DNPointF>;
    function get_RelativeToOriginalPictureSize: Boolean;
    procedure set_RelativeToOriginalPictureSize(value: Boolean);
    function get_LinkedCell: string;
    procedure set_LinkedCell(value: string);
    function get_InputRange: string;
    procedure set_InputRange(value: string);
    function get_TextShapeType: DNAutoShapeType;
    procedure set_TextShapeType(value: DNAutoShapeType);
    function get_TextBody: DNFontSettingCollection;
    function get_Font: DNFont;
    procedure set_Font(value: DNFont);
    function get_TextOptions: DNTextOptions;
    procedure set_TextOptions(value: DNTextOptions);
    function get_Text: string;
    procedure set_Text(value: string);
    function get_IsRichText: Boolean;
    function get_HtmlText: string;
    procedure set_HtmlText(value: string);
    function get_TextVerticalOverflow: DNTextOverflowType;
    procedure set_TextVerticalOverflow(value: DNTextOverflowType);
    function get_TextHorizontalOverflow: DNTextOverflowType;
    procedure set_TextHorizontalOverflow(value: DNTextOverflowType);
    function get_IsTextWrapped: Boolean;
    procedure set_IsTextWrapped(value: Boolean);
    function get_TextOrientationType: DNTextOrientationType;
    procedure set_TextOrientationType(value: DNTextOrientationType);
    function get_TextHorizontalAlignment: DNTextAlignmentType;
    procedure set_TextHorizontalAlignment(value: DNTextAlignmentType);
    function get_TextVerticalAlignment: DNTextAlignmentType;
    procedure set_TextVerticalAlignment(value: DNTextAlignmentType);
    function get_TextDirection: DNTextDirectionType;
    procedure set_TextDirection(value: DNTextDirectionType);
    function get_ControlData: TArray<Byte>;
    function get_ActiveXControl: DNActiveXControl;
    function get_Paths: DNShapePathCollection;
    function get_Geometry: DNGeometry;

  { methods } 

    function CalculateTextSize: TArray<Int32>;
    procedure FormatCharacters(startIndex: Int32; length: Int32; font: DNFont; flag: DNStyleFlag); overload;
    procedure FormatCharacters(startIndex: Int32; length: Int32; font: DNFont); overload;
    function Characters(startIndex: Int32; length: Int32): DNFontSetting;
    function GetCharacters: DDN.mscorlib.DNArrayList;
    procedure RemoveActiveXControl;
    procedure ToImage(stream: DDN.mscorlib.DNStream; imageFormat: DDN.System.Drawing.DNImageFormat); overload;
    procedure ToImage(imageFile: string; options: DNImageOrPrintOptions); overload;
    procedure ToImage(stream: DDN.mscorlib.DNStream; options: DNImageOrPrintOptions); overload;
    function ToImage(options: DNImageOrPrintOptions): DDN.System.Drawing.DNBitmap; overload;
    function GetLinkedCell(isR1C1: Boolean; isLocal: Boolean): string;
    procedure SetLinkedCell(formula: string; isR1C1: Boolean; isLocal: Boolean);
    function GetInputRange(isR1C1: Boolean; isLocal: Boolean): string;
    procedure SetInputRange(formula: string; isR1C1: Boolean; isLocal: Boolean);
    procedure UpdateSelectedValue;
    function GetResultOfSmartArt: DNGroupShape;
    procedure ToFrontOrBack(orders: Int32);
    function GetLockedProperty(&type: DNShapeLockType): Boolean;
    procedure SetLockedProperty(&type: DNShapeLockType; value: Boolean);
    function AddHyperlink(address: string): DNHyperlink;
    procedure RemoveHyperlink;
    procedure MoveToRange(upperLeftRow: Int32; upperLeftColumn: Int32; lowerRightRow: Int32; lowerRightColumn: Int32);
    procedure AlignTopRightCorner(topRow: Int32; rightColumn: Int32);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property MacroName: string read get_MacroName write set_MacroName;
    property IsEquation: Boolean read get_IsEquation;
    property IsSmartArt: Boolean read get_IsSmartArt;
    property ZOrderPosition: Int32 read get_ZOrderPosition write set_ZOrderPosition;
    property Name: string read get_Name write set_Name;
    property AlternativeText: string read get_AlternativeText write set_AlternativeText;
    property Title: string read get_Title write set_Title;
    property LineFormat: DNMsoLineFormat read get_LineFormat;
    property FillFormat: DNMsoFillFormat read get_FillFormat;
    property Format: DNShapeFormat read get_Format;
    property Line: DNLineFormat read get_Line;
    property Fill: DNFillFormat read get_Fill;
    property ShadowEffect: DNShadowEffect read get_ShadowEffect;
    property Reflection: DNReflectionEffect read get_Reflection;
    property Glow: DNGlowEffect read get_Glow;
    property SoftEdges: Double read get_SoftEdges write set_SoftEdges;
    property ThreeDFormat: DNThreeDFormat read get_ThreeDFormat;
    property TextFrame: DNMsoTextFrame read get_TextFrame;
    property FormatPicture: DNMsoFormatPicture read get_FormatPicture;
    property IsHidden: Boolean read get_IsHidden write set_IsHidden;
    property IsLockAspectRatio: Boolean read get_IsLockAspectRatio write set_IsLockAspectRatio;
    property RotationAngle: Double read get_RotationAngle write set_RotationAngle;
    property Hyperlink: DNHyperlink read get_Hyperlink;
    property Id: Int32 read get_Id;
    property Spid: string read get_Spid;
    property Spt: Int32 read get_Spt;
    property Worksheet: DNWorksheet read get_Worksheet;
    property IsGroup: Boolean read get_IsGroup;
    property IsWordArt: Boolean read get_IsWordArt;
    property TextEffect: DNTextEffectFormat read get_TextEffect;
    property IsLocked: Boolean read get_IsLocked write set_IsLocked;
    property IsPrintable: Boolean read get_IsPrintable write set_IsPrintable;
    property MsoDrawingType: DNMsoDrawingType read get_MsoDrawingType;
    property AutoShapeType: DNAutoShapeType read get_AutoShapeType write set_AutoShapeType;
    property AnchorType: DNShapeAnchorType read get_AnchorType write set_AnchorType;
    property Placement: DNPlacementType read get_Placement write set_Placement;
    property UpperLeftRow: Int32 read get_UpperLeftRow write set_UpperLeftRow;
    property UpperDeltaY: Int32 read get_UpperDeltaY write set_UpperDeltaY;
    property UpperLeftColumn: Int32 read get_UpperLeftColumn write set_UpperLeftColumn;
    property UpperDeltaX: Int32 read get_UpperDeltaX write set_UpperDeltaX;
    property LowerRightRow: Int32 read get_LowerRightRow write set_LowerRightRow;
    property LowerDeltaY: Int32 read get_LowerDeltaY write set_LowerDeltaY;
    property LowerRightColumn: Int32 read get_LowerRightColumn write set_LowerRightColumn;
    property LowerDeltaX: Int32 read get_LowerDeltaX write set_LowerDeltaX;
    property Right: Int32 read get_Right write set_Right;
    property Bottom: Int32 read get_Bottom write set_Bottom;
    property Width: Int32 read get_Width write set_Width;
    property WidthInch: Double read get_WidthInch write set_WidthInch;
    property WidthPt: Double read get_WidthPt write set_WidthPt;
    property WidthCM: Double read get_WidthCM write set_WidthCM;
    property Height: Int32 read get_Height write set_Height;
    property HeightInch: Double read get_HeightInch write set_HeightInch;
    property HeightPt: Double read get_HeightPt write set_HeightPt;
    property HeightCM: Double read get_HeightCM write set_HeightCM;
    property Left: Int32 read get_Left write set_Left;
    property LeftInch: Double read get_LeftInch write set_LeftInch;
    property LeftCM: Double read get_LeftCM write set_LeftCM;
    property Top: Int32 read get_Top write set_Top;
    property TopInch: Double read get_TopInch write set_TopInch;
    property TopCM: Double read get_TopCM write set_TopCM;
    property TopToCorner: Int32 read get_TopToCorner write set_TopToCorner;
    property LeftToCorner: Int32 read get_LeftToCorner write set_LeftToCorner;
    property X: Int32 read get_X write set_X;
    property Y: Int32 read get_Y write set_Y;
    property WidthScale: Int32 read get_WidthScale write set_WidthScale;
    property HeightScale: Int32 read get_HeightScale write set_HeightScale;
    property TopInShape: Int32 read get_TopInShape write set_TopInShape;
    property LeftInShape: Int32 read get_LeftInShape write set_LeftInShape;
    property WidthInShape: Int32 read get_WidthInShape write set_WidthInShape;
    property HeightInShape: Int32 read get_HeightInShape write set_HeightInShape;
    property Group: DNGroupShape read get_Group;
    property &Type: DNAutoShapeType read get_Type;
    property HasLine: Boolean read get_HasLine write set_HasLine;
    property IsFilled: Boolean read get_IsFilled write set_IsFilled;
    property IsFlippedHorizontally: Boolean read get_IsFlippedHorizontally write set_IsFlippedHorizontally;
    property IsFlippedVertically: Boolean read get_IsFlippedVertically write set_IsFlippedVertically;
    property ActualLowerRightRow: Int32 read get_ActualLowerRightRow;
    property ConnectionPoints: TArray<DDN.System.Drawing.DNPointF> read get_ConnectionPoints;
    property RelativeToOriginalPictureSize: Boolean read get_RelativeToOriginalPictureSize write set_RelativeToOriginalPictureSize;
    property LinkedCell: string read get_LinkedCell write set_LinkedCell;
    property InputRange: string read get_InputRange write set_InputRange;
    property TextShapeType: DNAutoShapeType read get_TextShapeType write set_TextShapeType;
    property TextBody: DNFontSettingCollection read get_TextBody;
    property Font: DNFont read get_Font write set_Font;
    property TextOptions: DNTextOptions read get_TextOptions write set_TextOptions;
    property Text: string read get_Text write set_Text;
    property IsRichText: Boolean read get_IsRichText;
    property HtmlText: string read get_HtmlText write set_HtmlText;
    property TextVerticalOverflow: DNTextOverflowType read get_TextVerticalOverflow write set_TextVerticalOverflow;
    property TextHorizontalOverflow: DNTextOverflowType read get_TextHorizontalOverflow write set_TextHorizontalOverflow;
    property IsTextWrapped: Boolean read get_IsTextWrapped write set_IsTextWrapped;
    property TextOrientationType: DNTextOrientationType read get_TextOrientationType write set_TextOrientationType;
    property TextHorizontalAlignment: DNTextAlignmentType read get_TextHorizontalAlignment write set_TextHorizontalAlignment;
    property TextVerticalAlignment: DNTextAlignmentType read get_TextVerticalAlignment write set_TextVerticalAlignment;
    property TextDirection: DNTextDirectionType read get_TextDirection write set_TextDirection;
    property ControlData: TArray<Byte> read get_ControlData;
    property ActiveXControl: DNActiveXControl read get_ActiveXControl;
    property Paths: DNShapePathCollection read get_Paths;
    property Geometry: DNGeometry read get_Geometry;
  end;

  TDNRectangleShape = class(TDNGenericImport<DNRectangleShapeClass, DNRectangleShape>) end;

  //-------------namespace: Aspose.Cells.Drawing----------------
  DNScrollBarClass = interface(DNShapeClass)
  ['{C84CDDE9-76CD-5265-A15E-616F551A4E95}']
  end;

  [DNTypeName('Aspose.Cells.Drawing.ScrollBar')]
  DNScrollBar = interface(DNShape)
  ['{DDF6560B-75DA-37D8-B108-02AE5ACE1F79}']
  { getters & setters } 

    function get_CurrentValue: Int32;
    procedure set_CurrentValue(value: Int32);
    function get_Min: Int32;
    procedure set_Min(value: Int32);
    function get_Max: Int32;
    procedure set_Max(value: Int32);
    function get_IncrementalChange: Int32;
    procedure set_IncrementalChange(value: Int32);
    function get_PageChange: Int32;
    procedure set_PageChange(value: Int32);
    function get_Shadow: Boolean;
    procedure set_Shadow(value: Boolean);
    function get_IsHorizontal: Boolean;
    procedure set_IsHorizontal(value: Boolean);
    function get_MacroName: string;
    procedure set_MacroName(value: string);
    function get_IsEquation: Boolean;
    function get_IsSmartArt: Boolean;
    function get_ZOrderPosition: Int32;
    procedure set_ZOrderPosition(value: Int32);
    function get_Name: string;
    procedure set_Name(value: string);
    function get_AlternativeText: string;
    procedure set_AlternativeText(value: string);
    function get_Title: string;
    procedure set_Title(value: string);
    function get_LineFormat: DNMsoLineFormat;
    function get_FillFormat: DNMsoFillFormat;
    function get_Format: DNShapeFormat;
    function get_Line: DNLineFormat;
    function get_Fill: DNFillFormat;
    function get_ShadowEffect: DNShadowEffect;
    function get_Reflection: DNReflectionEffect;
    function get_Glow: DNGlowEffect;
    function get_SoftEdges: Double;
    procedure set_SoftEdges(value: Double);
    function get_ThreeDFormat: DNThreeDFormat;
    function get_TextFrame: DNMsoTextFrame;
    function get_FormatPicture: DNMsoFormatPicture;
    function get_IsHidden: Boolean;
    procedure set_IsHidden(value: Boolean);
    function get_IsLockAspectRatio: Boolean;
    procedure set_IsLockAspectRatio(value: Boolean);
    function get_RotationAngle: Double;
    procedure set_RotationAngle(value: Double);
    function get_Hyperlink: DNHyperlink;
    function get_Id: Int32;
    function get_Spid: string;
    function get_Spt: Int32;
    function get_Worksheet: DNWorksheet;
    function get_IsGroup: Boolean;
    function get_IsWordArt: Boolean;
    function get_TextEffect: DNTextEffectFormat;
    function get_IsLocked: Boolean;
    procedure set_IsLocked(value: Boolean);
    function get_IsPrintable: Boolean;
    procedure set_IsPrintable(value: Boolean);
    function get_MsoDrawingType: DNMsoDrawingType;
    function get_AutoShapeType: DNAutoShapeType;
    procedure set_AutoShapeType(value: DNAutoShapeType);
    function get_AnchorType: DNShapeAnchorType;
    procedure set_AnchorType(value: DNShapeAnchorType);
    function get_Placement: DNPlacementType;
    procedure set_Placement(value: DNPlacementType);
    function get_UpperLeftRow: Int32;
    procedure set_UpperLeftRow(value: Int32);
    function get_UpperDeltaY: Int32;
    procedure set_UpperDeltaY(value: Int32);
    function get_UpperLeftColumn: Int32;
    procedure set_UpperLeftColumn(value: Int32);
    function get_UpperDeltaX: Int32;
    procedure set_UpperDeltaX(value: Int32);
    function get_LowerRightRow: Int32;
    procedure set_LowerRightRow(value: Int32);
    function get_LowerDeltaY: Int32;
    procedure set_LowerDeltaY(value: Int32);
    function get_LowerRightColumn: Int32;
    procedure set_LowerRightColumn(value: Int32);
    function get_LowerDeltaX: Int32;
    procedure set_LowerDeltaX(value: Int32);
    function get_Right: Int32;
    procedure set_Right(value: Int32);
    function get_Bottom: Int32;
    procedure set_Bottom(value: Int32);
    function get_Width: Int32;
    procedure set_Width(value: Int32);
    function get_WidthInch: Double;
    procedure set_WidthInch(value: Double);
    function get_WidthPt: Double;
    procedure set_WidthPt(value: Double);
    function get_WidthCM: Double;
    procedure set_WidthCM(value: Double);
    function get_Height: Int32;
    procedure set_Height(value: Int32);
    function get_HeightInch: Double;
    procedure set_HeightInch(value: Double);
    function get_HeightPt: Double;
    procedure set_HeightPt(value: Double);
    function get_HeightCM: Double;
    procedure set_HeightCM(value: Double);
    function get_Left: Int32;
    procedure set_Left(value: Int32);
    function get_LeftInch: Double;
    procedure set_LeftInch(value: Double);
    function get_LeftCM: Double;
    procedure set_LeftCM(value: Double);
    function get_Top: Int32;
    procedure set_Top(value: Int32);
    function get_TopInch: Double;
    procedure set_TopInch(value: Double);
    function get_TopCM: Double;
    procedure set_TopCM(value: Double);
    function get_TopToCorner: Int32;
    procedure set_TopToCorner(value: Int32);
    function get_LeftToCorner: Int32;
    procedure set_LeftToCorner(value: Int32);
    function get_X: Int32;
    procedure set_X(value: Int32);
    function get_Y: Int32;
    procedure set_Y(value: Int32);
    function get_WidthScale: Int32;
    procedure set_WidthScale(value: Int32);
    function get_HeightScale: Int32;
    procedure set_HeightScale(value: Int32);
    function get_TopInShape: Int32;
    procedure set_TopInShape(value: Int32);
    function get_LeftInShape: Int32;
    procedure set_LeftInShape(value: Int32);
    function get_WidthInShape: Int32;
    procedure set_WidthInShape(value: Int32);
    function get_HeightInShape: Int32;
    procedure set_HeightInShape(value: Int32);
    function get_Group: DNGroupShape;
    function get_Type: DNAutoShapeType;
    function get_HasLine: Boolean;
    procedure set_HasLine(value: Boolean);
    function get_IsFilled: Boolean;
    procedure set_IsFilled(value: Boolean);
    function get_IsFlippedHorizontally: Boolean;
    procedure set_IsFlippedHorizontally(value: Boolean);
    function get_IsFlippedVertically: Boolean;
    procedure set_IsFlippedVertically(value: Boolean);
    function get_ActualLowerRightRow: Int32;
    function get_ConnectionPoints: TArray<DDN.System.Drawing.DNPointF>;
    function get_RelativeToOriginalPictureSize: Boolean;
    procedure set_RelativeToOriginalPictureSize(value: Boolean);
    function get_LinkedCell: string;
    procedure set_LinkedCell(value: string);
    function get_InputRange: string;
    procedure set_InputRange(value: string);
    function get_TextShapeType: DNAutoShapeType;
    procedure set_TextShapeType(value: DNAutoShapeType);
    function get_TextBody: DNFontSettingCollection;
    function get_Font: DNFont;
    procedure set_Font(value: DNFont);
    function get_TextOptions: DNTextOptions;
    procedure set_TextOptions(value: DNTextOptions);
    function get_Text: string;
    procedure set_Text(value: string);
    function get_IsRichText: Boolean;
    function get_HtmlText: string;
    procedure set_HtmlText(value: string);
    function get_TextVerticalOverflow: DNTextOverflowType;
    procedure set_TextVerticalOverflow(value: DNTextOverflowType);
    function get_TextHorizontalOverflow: DNTextOverflowType;
    procedure set_TextHorizontalOverflow(value: DNTextOverflowType);
    function get_IsTextWrapped: Boolean;
    procedure set_IsTextWrapped(value: Boolean);
    function get_TextOrientationType: DNTextOrientationType;
    procedure set_TextOrientationType(value: DNTextOrientationType);
    function get_TextHorizontalAlignment: DNTextAlignmentType;
    procedure set_TextHorizontalAlignment(value: DNTextAlignmentType);
    function get_TextVerticalAlignment: DNTextAlignmentType;
    procedure set_TextVerticalAlignment(value: DNTextAlignmentType);
    function get_TextDirection: DNTextDirectionType;
    procedure set_TextDirection(value: DNTextDirectionType);
    function get_ControlData: TArray<Byte>;
    function get_ActiveXControl: DNActiveXControl;
    function get_Paths: DNShapePathCollection;
    function get_Geometry: DNGeometry;

  { methods } 

    function CalculateTextSize: TArray<Int32>;
    procedure FormatCharacters(startIndex: Int32; length: Int32; font: DNFont; flag: DNStyleFlag); overload;
    procedure FormatCharacters(startIndex: Int32; length: Int32; font: DNFont); overload;
    function Characters(startIndex: Int32; length: Int32): DNFontSetting;
    function GetCharacters: DDN.mscorlib.DNArrayList;
    procedure RemoveActiveXControl;
    procedure ToImage(stream: DDN.mscorlib.DNStream; imageFormat: DDN.System.Drawing.DNImageFormat); overload;
    procedure ToImage(imageFile: string; options: DNImageOrPrintOptions); overload;
    procedure ToImage(stream: DDN.mscorlib.DNStream; options: DNImageOrPrintOptions); overload;
    function ToImage(options: DNImageOrPrintOptions): DDN.System.Drawing.DNBitmap; overload;
    function GetLinkedCell(isR1C1: Boolean; isLocal: Boolean): string;
    procedure SetLinkedCell(formula: string; isR1C1: Boolean; isLocal: Boolean);
    function GetInputRange(isR1C1: Boolean; isLocal: Boolean): string;
    procedure SetInputRange(formula: string; isR1C1: Boolean; isLocal: Boolean);
    procedure UpdateSelectedValue;
    function GetResultOfSmartArt: DNGroupShape;
    procedure ToFrontOrBack(orders: Int32);
    function GetLockedProperty(&type: DNShapeLockType): Boolean;
    procedure SetLockedProperty(&type: DNShapeLockType; value: Boolean);
    function AddHyperlink(address: string): DNHyperlink;
    procedure RemoveHyperlink;
    procedure MoveToRange(upperLeftRow: Int32; upperLeftColumn: Int32; lowerRightRow: Int32; lowerRightColumn: Int32);
    procedure AlignTopRightCorner(topRow: Int32; rightColumn: Int32);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property CurrentValue: Int32 read get_CurrentValue write set_CurrentValue;
    property Min: Int32 read get_Min write set_Min;
    property Max: Int32 read get_Max write set_Max;
    property IncrementalChange: Int32 read get_IncrementalChange write set_IncrementalChange;
    property PageChange: Int32 read get_PageChange write set_PageChange;
    property Shadow: Boolean read get_Shadow write set_Shadow;
    property IsHorizontal: Boolean read get_IsHorizontal write set_IsHorizontal;
    property MacroName: string read get_MacroName write set_MacroName;
    property IsEquation: Boolean read get_IsEquation;
    property IsSmartArt: Boolean read get_IsSmartArt;
    property ZOrderPosition: Int32 read get_ZOrderPosition write set_ZOrderPosition;
    property Name: string read get_Name write set_Name;
    property AlternativeText: string read get_AlternativeText write set_AlternativeText;
    property Title: string read get_Title write set_Title;
    property LineFormat: DNMsoLineFormat read get_LineFormat;
    property FillFormat: DNMsoFillFormat read get_FillFormat;
    property Format: DNShapeFormat read get_Format;
    property Line: DNLineFormat read get_Line;
    property Fill: DNFillFormat read get_Fill;
    property ShadowEffect: DNShadowEffect read get_ShadowEffect;
    property Reflection: DNReflectionEffect read get_Reflection;
    property Glow: DNGlowEffect read get_Glow;
    property SoftEdges: Double read get_SoftEdges write set_SoftEdges;
    property ThreeDFormat: DNThreeDFormat read get_ThreeDFormat;
    property TextFrame: DNMsoTextFrame read get_TextFrame;
    property FormatPicture: DNMsoFormatPicture read get_FormatPicture;
    property IsHidden: Boolean read get_IsHidden write set_IsHidden;
    property IsLockAspectRatio: Boolean read get_IsLockAspectRatio write set_IsLockAspectRatio;
    property RotationAngle: Double read get_RotationAngle write set_RotationAngle;
    property Hyperlink: DNHyperlink read get_Hyperlink;
    property Id: Int32 read get_Id;
    property Spid: string read get_Spid;
    property Spt: Int32 read get_Spt;
    property Worksheet: DNWorksheet read get_Worksheet;
    property IsGroup: Boolean read get_IsGroup;
    property IsWordArt: Boolean read get_IsWordArt;
    property TextEffect: DNTextEffectFormat read get_TextEffect;
    property IsLocked: Boolean read get_IsLocked write set_IsLocked;
    property IsPrintable: Boolean read get_IsPrintable write set_IsPrintable;
    property MsoDrawingType: DNMsoDrawingType read get_MsoDrawingType;
    property AutoShapeType: DNAutoShapeType read get_AutoShapeType write set_AutoShapeType;
    property AnchorType: DNShapeAnchorType read get_AnchorType write set_AnchorType;
    property Placement: DNPlacementType read get_Placement write set_Placement;
    property UpperLeftRow: Int32 read get_UpperLeftRow write set_UpperLeftRow;
    property UpperDeltaY: Int32 read get_UpperDeltaY write set_UpperDeltaY;
    property UpperLeftColumn: Int32 read get_UpperLeftColumn write set_UpperLeftColumn;
    property UpperDeltaX: Int32 read get_UpperDeltaX write set_UpperDeltaX;
    property LowerRightRow: Int32 read get_LowerRightRow write set_LowerRightRow;
    property LowerDeltaY: Int32 read get_LowerDeltaY write set_LowerDeltaY;
    property LowerRightColumn: Int32 read get_LowerRightColumn write set_LowerRightColumn;
    property LowerDeltaX: Int32 read get_LowerDeltaX write set_LowerDeltaX;
    property Right: Int32 read get_Right write set_Right;
    property Bottom: Int32 read get_Bottom write set_Bottom;
    property Width: Int32 read get_Width write set_Width;
    property WidthInch: Double read get_WidthInch write set_WidthInch;
    property WidthPt: Double read get_WidthPt write set_WidthPt;
    property WidthCM: Double read get_WidthCM write set_WidthCM;
    property Height: Int32 read get_Height write set_Height;
    property HeightInch: Double read get_HeightInch write set_HeightInch;
    property HeightPt: Double read get_HeightPt write set_HeightPt;
    property HeightCM: Double read get_HeightCM write set_HeightCM;
    property Left: Int32 read get_Left write set_Left;
    property LeftInch: Double read get_LeftInch write set_LeftInch;
    property LeftCM: Double read get_LeftCM write set_LeftCM;
    property Top: Int32 read get_Top write set_Top;
    property TopInch: Double read get_TopInch write set_TopInch;
    property TopCM: Double read get_TopCM write set_TopCM;
    property TopToCorner: Int32 read get_TopToCorner write set_TopToCorner;
    property LeftToCorner: Int32 read get_LeftToCorner write set_LeftToCorner;
    property X: Int32 read get_X write set_X;
    property Y: Int32 read get_Y write set_Y;
    property WidthScale: Int32 read get_WidthScale write set_WidthScale;
    property HeightScale: Int32 read get_HeightScale write set_HeightScale;
    property TopInShape: Int32 read get_TopInShape write set_TopInShape;
    property LeftInShape: Int32 read get_LeftInShape write set_LeftInShape;
    property WidthInShape: Int32 read get_WidthInShape write set_WidthInShape;
    property HeightInShape: Int32 read get_HeightInShape write set_HeightInShape;
    property Group: DNGroupShape read get_Group;
    property &Type: DNAutoShapeType read get_Type;
    property HasLine: Boolean read get_HasLine write set_HasLine;
    property IsFilled: Boolean read get_IsFilled write set_IsFilled;
    property IsFlippedHorizontally: Boolean read get_IsFlippedHorizontally write set_IsFlippedHorizontally;
    property IsFlippedVertically: Boolean read get_IsFlippedVertically write set_IsFlippedVertically;
    property ActualLowerRightRow: Int32 read get_ActualLowerRightRow;
    property ConnectionPoints: TArray<DDN.System.Drawing.DNPointF> read get_ConnectionPoints;
    property RelativeToOriginalPictureSize: Boolean read get_RelativeToOriginalPictureSize write set_RelativeToOriginalPictureSize;
    property LinkedCell: string read get_LinkedCell write set_LinkedCell;
    property InputRange: string read get_InputRange write set_InputRange;
    property TextShapeType: DNAutoShapeType read get_TextShapeType write set_TextShapeType;
    property TextBody: DNFontSettingCollection read get_TextBody;
    property Font: DNFont read get_Font write set_Font;
    property TextOptions: DNTextOptions read get_TextOptions write set_TextOptions;
    property Text: string read get_Text write set_Text;
    property IsRichText: Boolean read get_IsRichText;
    property HtmlText: string read get_HtmlText write set_HtmlText;
    property TextVerticalOverflow: DNTextOverflowType read get_TextVerticalOverflow write set_TextVerticalOverflow;
    property TextHorizontalOverflow: DNTextOverflowType read get_TextHorizontalOverflow write set_TextHorizontalOverflow;
    property IsTextWrapped: Boolean read get_IsTextWrapped write set_IsTextWrapped;
    property TextOrientationType: DNTextOrientationType read get_TextOrientationType write set_TextOrientationType;
    property TextHorizontalAlignment: DNTextAlignmentType read get_TextHorizontalAlignment write set_TextHorizontalAlignment;
    property TextVerticalAlignment: DNTextAlignmentType read get_TextVerticalAlignment write set_TextVerticalAlignment;
    property TextDirection: DNTextDirectionType read get_TextDirection write set_TextDirection;
    property ControlData: TArray<Byte> read get_ControlData;
    property ActiveXControl: DNActiveXControl read get_ActiveXControl;
    property Paths: DNShapePathCollection read get_Paths;
    property Geometry: DNGeometry read get_Geometry;
  end;

  TDNScrollBar = class(TDNGenericImport<DNScrollBarClass, DNScrollBar>) end;

  //-------------namespace: Aspose.Cells.Drawing----------------
  DNSmartArtShapeClass = interface(DNShapeClass)
  ['{1C9DA229-8E63-5C21-9F2F-8EA50AA2EBAA}']
  end;

  [DNTypeName('Aspose.Cells.Drawing.SmartArtShape')]
  DNSmartArtShape = interface(DNShape)
  ['{E852D889-B2D0-3076-BE7C-3D83EB739AD8}']
  { getters & setters } 

    function get_MacroName: string;
    procedure set_MacroName(value: string);
    function get_IsEquation: Boolean;
    function get_IsSmartArt: Boolean;
    function get_ZOrderPosition: Int32;
    procedure set_ZOrderPosition(value: Int32);
    function get_Name: string;
    procedure set_Name(value: string);
    function get_AlternativeText: string;
    procedure set_AlternativeText(value: string);
    function get_Title: string;
    procedure set_Title(value: string);
    function get_LineFormat: DNMsoLineFormat;
    function get_FillFormat: DNMsoFillFormat;
    function get_Format: DNShapeFormat;
    function get_Line: DNLineFormat;
    function get_Fill: DNFillFormat;
    function get_ShadowEffect: DNShadowEffect;
    function get_Reflection: DNReflectionEffect;
    function get_Glow: DNGlowEffect;
    function get_SoftEdges: Double;
    procedure set_SoftEdges(value: Double);
    function get_ThreeDFormat: DNThreeDFormat;
    function get_TextFrame: DNMsoTextFrame;
    function get_FormatPicture: DNMsoFormatPicture;
    function get_IsHidden: Boolean;
    procedure set_IsHidden(value: Boolean);
    function get_IsLockAspectRatio: Boolean;
    procedure set_IsLockAspectRatio(value: Boolean);
    function get_RotationAngle: Double;
    procedure set_RotationAngle(value: Double);
    function get_Hyperlink: DNHyperlink;
    function get_Id: Int32;
    function get_Spid: string;
    function get_Spt: Int32;
    function get_Worksheet: DNWorksheet;
    function get_IsGroup: Boolean;
    function get_IsWordArt: Boolean;
    function get_TextEffect: DNTextEffectFormat;
    function get_IsLocked: Boolean;
    procedure set_IsLocked(value: Boolean);
    function get_IsPrintable: Boolean;
    procedure set_IsPrintable(value: Boolean);
    function get_MsoDrawingType: DNMsoDrawingType;
    function get_AutoShapeType: DNAutoShapeType;
    procedure set_AutoShapeType(value: DNAutoShapeType);
    function get_AnchorType: DNShapeAnchorType;
    procedure set_AnchorType(value: DNShapeAnchorType);
    function get_Placement: DNPlacementType;
    procedure set_Placement(value: DNPlacementType);
    function get_UpperLeftRow: Int32;
    procedure set_UpperLeftRow(value: Int32);
    function get_UpperDeltaY: Int32;
    procedure set_UpperDeltaY(value: Int32);
    function get_UpperLeftColumn: Int32;
    procedure set_UpperLeftColumn(value: Int32);
    function get_UpperDeltaX: Int32;
    procedure set_UpperDeltaX(value: Int32);
    function get_LowerRightRow: Int32;
    procedure set_LowerRightRow(value: Int32);
    function get_LowerDeltaY: Int32;
    procedure set_LowerDeltaY(value: Int32);
    function get_LowerRightColumn: Int32;
    procedure set_LowerRightColumn(value: Int32);
    function get_LowerDeltaX: Int32;
    procedure set_LowerDeltaX(value: Int32);
    function get_Right: Int32;
    procedure set_Right(value: Int32);
    function get_Bottom: Int32;
    procedure set_Bottom(value: Int32);
    function get_Width: Int32;
    procedure set_Width(value: Int32);
    function get_WidthInch: Double;
    procedure set_WidthInch(value: Double);
    function get_WidthPt: Double;
    procedure set_WidthPt(value: Double);
    function get_WidthCM: Double;
    procedure set_WidthCM(value: Double);
    function get_Height: Int32;
    procedure set_Height(value: Int32);
    function get_HeightInch: Double;
    procedure set_HeightInch(value: Double);
    function get_HeightPt: Double;
    procedure set_HeightPt(value: Double);
    function get_HeightCM: Double;
    procedure set_HeightCM(value: Double);
    function get_Left: Int32;
    procedure set_Left(value: Int32);
    function get_LeftInch: Double;
    procedure set_LeftInch(value: Double);
    function get_LeftCM: Double;
    procedure set_LeftCM(value: Double);
    function get_Top: Int32;
    procedure set_Top(value: Int32);
    function get_TopInch: Double;
    procedure set_TopInch(value: Double);
    function get_TopCM: Double;
    procedure set_TopCM(value: Double);
    function get_TopToCorner: Int32;
    procedure set_TopToCorner(value: Int32);
    function get_LeftToCorner: Int32;
    procedure set_LeftToCorner(value: Int32);
    function get_X: Int32;
    procedure set_X(value: Int32);
    function get_Y: Int32;
    procedure set_Y(value: Int32);
    function get_WidthScale: Int32;
    procedure set_WidthScale(value: Int32);
    function get_HeightScale: Int32;
    procedure set_HeightScale(value: Int32);
    function get_TopInShape: Int32;
    procedure set_TopInShape(value: Int32);
    function get_LeftInShape: Int32;
    procedure set_LeftInShape(value: Int32);
    function get_WidthInShape: Int32;
    procedure set_WidthInShape(value: Int32);
    function get_HeightInShape: Int32;
    procedure set_HeightInShape(value: Int32);
    function get_Group: DNGroupShape;
    function get_Type: DNAutoShapeType;
    function get_HasLine: Boolean;
    procedure set_HasLine(value: Boolean);
    function get_IsFilled: Boolean;
    procedure set_IsFilled(value: Boolean);
    function get_IsFlippedHorizontally: Boolean;
    procedure set_IsFlippedHorizontally(value: Boolean);
    function get_IsFlippedVertically: Boolean;
    procedure set_IsFlippedVertically(value: Boolean);
    function get_ActualLowerRightRow: Int32;
    function get_ConnectionPoints: TArray<DDN.System.Drawing.DNPointF>;
    function get_RelativeToOriginalPictureSize: Boolean;
    procedure set_RelativeToOriginalPictureSize(value: Boolean);
    function get_LinkedCell: string;
    procedure set_LinkedCell(value: string);
    function get_InputRange: string;
    procedure set_InputRange(value: string);
    function get_TextShapeType: DNAutoShapeType;
    procedure set_TextShapeType(value: DNAutoShapeType);
    function get_TextBody: DNFontSettingCollection;
    function get_Font: DNFont;
    procedure set_Font(value: DNFont);
    function get_TextOptions: DNTextOptions;
    procedure set_TextOptions(value: DNTextOptions);
    function get_Text: string;
    procedure set_Text(value: string);
    function get_IsRichText: Boolean;
    function get_HtmlText: string;
    procedure set_HtmlText(value: string);
    function get_TextVerticalOverflow: DNTextOverflowType;
    procedure set_TextVerticalOverflow(value: DNTextOverflowType);
    function get_TextHorizontalOverflow: DNTextOverflowType;
    procedure set_TextHorizontalOverflow(value: DNTextOverflowType);
    function get_IsTextWrapped: Boolean;
    procedure set_IsTextWrapped(value: Boolean);
    function get_TextOrientationType: DNTextOrientationType;
    procedure set_TextOrientationType(value: DNTextOrientationType);
    function get_TextHorizontalAlignment: DNTextAlignmentType;
    procedure set_TextHorizontalAlignment(value: DNTextAlignmentType);
    function get_TextVerticalAlignment: DNTextAlignmentType;
    procedure set_TextVerticalAlignment(value: DNTextAlignmentType);
    function get_TextDirection: DNTextDirectionType;
    procedure set_TextDirection(value: DNTextDirectionType);
    function get_ControlData: TArray<Byte>;
    function get_ActiveXControl: DNActiveXControl;
    function get_Paths: DNShapePathCollection;
    function get_Geometry: DNGeometry;

  { methods } 

    function GetResultOfSmartArt: DNGroupShape;
    function CalculateTextSize: TArray<Int32>;
    procedure FormatCharacters(startIndex: Int32; length: Int32; font: DNFont; flag: DNStyleFlag); overload;
    procedure FormatCharacters(startIndex: Int32; length: Int32; font: DNFont); overload;
    function Characters(startIndex: Int32; length: Int32): DNFontSetting;
    function GetCharacters: DDN.mscorlib.DNArrayList;
    procedure RemoveActiveXControl;
    procedure ToImage(stream: DDN.mscorlib.DNStream; imageFormat: DDN.System.Drawing.DNImageFormat); overload;
    procedure ToImage(imageFile: string; options: DNImageOrPrintOptions); overload;
    procedure ToImage(stream: DDN.mscorlib.DNStream; options: DNImageOrPrintOptions); overload;
    function ToImage(options: DNImageOrPrintOptions): DDN.System.Drawing.DNBitmap; overload;
    function GetLinkedCell(isR1C1: Boolean; isLocal: Boolean): string;
    procedure SetLinkedCell(formula: string; isR1C1: Boolean; isLocal: Boolean);
    function GetInputRange(isR1C1: Boolean; isLocal: Boolean): string;
    procedure SetInputRange(formula: string; isR1C1: Boolean; isLocal: Boolean);
    procedure UpdateSelectedValue;
    procedure ToFrontOrBack(orders: Int32);
    function GetLockedProperty(&type: DNShapeLockType): Boolean;
    procedure SetLockedProperty(&type: DNShapeLockType; value: Boolean);
    function AddHyperlink(address: string): DNHyperlink;
    procedure RemoveHyperlink;
    procedure MoveToRange(upperLeftRow: Int32; upperLeftColumn: Int32; lowerRightRow: Int32; lowerRightColumn: Int32);
    procedure AlignTopRightCorner(topRow: Int32; rightColumn: Int32);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property MacroName: string read get_MacroName write set_MacroName;
    property IsEquation: Boolean read get_IsEquation;
    property IsSmartArt: Boolean read get_IsSmartArt;
    property ZOrderPosition: Int32 read get_ZOrderPosition write set_ZOrderPosition;
    property Name: string read get_Name write set_Name;
    property AlternativeText: string read get_AlternativeText write set_AlternativeText;
    property Title: string read get_Title write set_Title;
    property LineFormat: DNMsoLineFormat read get_LineFormat;
    property FillFormat: DNMsoFillFormat read get_FillFormat;
    property Format: DNShapeFormat read get_Format;
    property Line: DNLineFormat read get_Line;
    property Fill: DNFillFormat read get_Fill;
    property ShadowEffect: DNShadowEffect read get_ShadowEffect;
    property Reflection: DNReflectionEffect read get_Reflection;
    property Glow: DNGlowEffect read get_Glow;
    property SoftEdges: Double read get_SoftEdges write set_SoftEdges;
    property ThreeDFormat: DNThreeDFormat read get_ThreeDFormat;
    property TextFrame: DNMsoTextFrame read get_TextFrame;
    property FormatPicture: DNMsoFormatPicture read get_FormatPicture;
    property IsHidden: Boolean read get_IsHidden write set_IsHidden;
    property IsLockAspectRatio: Boolean read get_IsLockAspectRatio write set_IsLockAspectRatio;
    property RotationAngle: Double read get_RotationAngle write set_RotationAngle;
    property Hyperlink: DNHyperlink read get_Hyperlink;
    property Id: Int32 read get_Id;
    property Spid: string read get_Spid;
    property Spt: Int32 read get_Spt;
    property Worksheet: DNWorksheet read get_Worksheet;
    property IsGroup: Boolean read get_IsGroup;
    property IsWordArt: Boolean read get_IsWordArt;
    property TextEffect: DNTextEffectFormat read get_TextEffect;
    property IsLocked: Boolean read get_IsLocked write set_IsLocked;
    property IsPrintable: Boolean read get_IsPrintable write set_IsPrintable;
    property MsoDrawingType: DNMsoDrawingType read get_MsoDrawingType;
    property AutoShapeType: DNAutoShapeType read get_AutoShapeType write set_AutoShapeType;
    property AnchorType: DNShapeAnchorType read get_AnchorType write set_AnchorType;
    property Placement: DNPlacementType read get_Placement write set_Placement;
    property UpperLeftRow: Int32 read get_UpperLeftRow write set_UpperLeftRow;
    property UpperDeltaY: Int32 read get_UpperDeltaY write set_UpperDeltaY;
    property UpperLeftColumn: Int32 read get_UpperLeftColumn write set_UpperLeftColumn;
    property UpperDeltaX: Int32 read get_UpperDeltaX write set_UpperDeltaX;
    property LowerRightRow: Int32 read get_LowerRightRow write set_LowerRightRow;
    property LowerDeltaY: Int32 read get_LowerDeltaY write set_LowerDeltaY;
    property LowerRightColumn: Int32 read get_LowerRightColumn write set_LowerRightColumn;
    property LowerDeltaX: Int32 read get_LowerDeltaX write set_LowerDeltaX;
    property Right: Int32 read get_Right write set_Right;
    property Bottom: Int32 read get_Bottom write set_Bottom;
    property Width: Int32 read get_Width write set_Width;
    property WidthInch: Double read get_WidthInch write set_WidthInch;
    property WidthPt: Double read get_WidthPt write set_WidthPt;
    property WidthCM: Double read get_WidthCM write set_WidthCM;
    property Height: Int32 read get_Height write set_Height;
    property HeightInch: Double read get_HeightInch write set_HeightInch;
    property HeightPt: Double read get_HeightPt write set_HeightPt;
    property HeightCM: Double read get_HeightCM write set_HeightCM;
    property Left: Int32 read get_Left write set_Left;
    property LeftInch: Double read get_LeftInch write set_LeftInch;
    property LeftCM: Double read get_LeftCM write set_LeftCM;
    property Top: Int32 read get_Top write set_Top;
    property TopInch: Double read get_TopInch write set_TopInch;
    property TopCM: Double read get_TopCM write set_TopCM;
    property TopToCorner: Int32 read get_TopToCorner write set_TopToCorner;
    property LeftToCorner: Int32 read get_LeftToCorner write set_LeftToCorner;
    property X: Int32 read get_X write set_X;
    property Y: Int32 read get_Y write set_Y;
    property WidthScale: Int32 read get_WidthScale write set_WidthScale;
    property HeightScale: Int32 read get_HeightScale write set_HeightScale;
    property TopInShape: Int32 read get_TopInShape write set_TopInShape;
    property LeftInShape: Int32 read get_LeftInShape write set_LeftInShape;
    property WidthInShape: Int32 read get_WidthInShape write set_WidthInShape;
    property HeightInShape: Int32 read get_HeightInShape write set_HeightInShape;
    property Group: DNGroupShape read get_Group;
    property &Type: DNAutoShapeType read get_Type;
    property HasLine: Boolean read get_HasLine write set_HasLine;
    property IsFilled: Boolean read get_IsFilled write set_IsFilled;
    property IsFlippedHorizontally: Boolean read get_IsFlippedHorizontally write set_IsFlippedHorizontally;
    property IsFlippedVertically: Boolean read get_IsFlippedVertically write set_IsFlippedVertically;
    property ActualLowerRightRow: Int32 read get_ActualLowerRightRow;
    property ConnectionPoints: TArray<DDN.System.Drawing.DNPointF> read get_ConnectionPoints;
    property RelativeToOriginalPictureSize: Boolean read get_RelativeToOriginalPictureSize write set_RelativeToOriginalPictureSize;
    property LinkedCell: string read get_LinkedCell write set_LinkedCell;
    property InputRange: string read get_InputRange write set_InputRange;
    property TextShapeType: DNAutoShapeType read get_TextShapeType write set_TextShapeType;
    property TextBody: DNFontSettingCollection read get_TextBody;
    property Font: DNFont read get_Font write set_Font;
    property TextOptions: DNTextOptions read get_TextOptions write set_TextOptions;
    property Text: string read get_Text write set_Text;
    property IsRichText: Boolean read get_IsRichText;
    property HtmlText: string read get_HtmlText write set_HtmlText;
    property TextVerticalOverflow: DNTextOverflowType read get_TextVerticalOverflow write set_TextVerticalOverflow;
    property TextHorizontalOverflow: DNTextOverflowType read get_TextHorizontalOverflow write set_TextHorizontalOverflow;
    property IsTextWrapped: Boolean read get_IsTextWrapped write set_IsTextWrapped;
    property TextOrientationType: DNTextOrientationType read get_TextOrientationType write set_TextOrientationType;
    property TextHorizontalAlignment: DNTextAlignmentType read get_TextHorizontalAlignment write set_TextHorizontalAlignment;
    property TextVerticalAlignment: DNTextAlignmentType read get_TextVerticalAlignment write set_TextVerticalAlignment;
    property TextDirection: DNTextDirectionType read get_TextDirection write set_TextDirection;
    property ControlData: TArray<Byte> read get_ControlData;
    property ActiveXControl: DNActiveXControl read get_ActiveXControl;
    property Paths: DNShapePathCollection read get_Paths;
    property Geometry: DNGeometry read get_Geometry;
  end;

  TDNSmartArtShape = class(TDNGenericImport<DNSmartArtShapeClass, DNSmartArtShape>) end;

  //-------------namespace: Aspose.Cells.Drawing----------------
  DNSpinnerClass = interface(DNShapeClass)
  ['{C1E90E31-C2D0-5D91-B415-C4357AF3B1A5}']
  end;

  [DNTypeName('Aspose.Cells.Drawing.Spinner')]
  DNSpinner = interface(DNShape)
  ['{F40946DA-3BBE-395D-85A7-53BDEBB4F486}']
  { getters & setters } 

    function get_CurrentValue: Int32;
    procedure set_CurrentValue(value: Int32);
    function get_Min: Int32;
    procedure set_Min(value: Int32);
    function get_Max: Int32;
    procedure set_Max(value: Int32);
    function get_IncrementalChange: Int32;
    procedure set_IncrementalChange(value: Int32);
    function get_Shadow: Boolean;
    procedure set_Shadow(value: Boolean);
    function get_IsHorizontal: Boolean;
    procedure set_IsHorizontal(value: Boolean);
    function get_MacroName: string;
    procedure set_MacroName(value: string);
    function get_IsEquation: Boolean;
    function get_IsSmartArt: Boolean;
    function get_ZOrderPosition: Int32;
    procedure set_ZOrderPosition(value: Int32);
    function get_Name: string;
    procedure set_Name(value: string);
    function get_AlternativeText: string;
    procedure set_AlternativeText(value: string);
    function get_Title: string;
    procedure set_Title(value: string);
    function get_LineFormat: DNMsoLineFormat;
    function get_FillFormat: DNMsoFillFormat;
    function get_Format: DNShapeFormat;
    function get_Line: DNLineFormat;
    function get_Fill: DNFillFormat;
    function get_ShadowEffect: DNShadowEffect;
    function get_Reflection: DNReflectionEffect;
    function get_Glow: DNGlowEffect;
    function get_SoftEdges: Double;
    procedure set_SoftEdges(value: Double);
    function get_ThreeDFormat: DNThreeDFormat;
    function get_TextFrame: DNMsoTextFrame;
    function get_FormatPicture: DNMsoFormatPicture;
    function get_IsHidden: Boolean;
    procedure set_IsHidden(value: Boolean);
    function get_IsLockAspectRatio: Boolean;
    procedure set_IsLockAspectRatio(value: Boolean);
    function get_RotationAngle: Double;
    procedure set_RotationAngle(value: Double);
    function get_Hyperlink: DNHyperlink;
    function get_Id: Int32;
    function get_Spid: string;
    function get_Spt: Int32;
    function get_Worksheet: DNWorksheet;
    function get_IsGroup: Boolean;
    function get_IsWordArt: Boolean;
    function get_TextEffect: DNTextEffectFormat;
    function get_IsLocked: Boolean;
    procedure set_IsLocked(value: Boolean);
    function get_IsPrintable: Boolean;
    procedure set_IsPrintable(value: Boolean);
    function get_MsoDrawingType: DNMsoDrawingType;
    function get_AutoShapeType: DNAutoShapeType;
    procedure set_AutoShapeType(value: DNAutoShapeType);
    function get_AnchorType: DNShapeAnchorType;
    procedure set_AnchorType(value: DNShapeAnchorType);
    function get_Placement: DNPlacementType;
    procedure set_Placement(value: DNPlacementType);
    function get_UpperLeftRow: Int32;
    procedure set_UpperLeftRow(value: Int32);
    function get_UpperDeltaY: Int32;
    procedure set_UpperDeltaY(value: Int32);
    function get_UpperLeftColumn: Int32;
    procedure set_UpperLeftColumn(value: Int32);
    function get_UpperDeltaX: Int32;
    procedure set_UpperDeltaX(value: Int32);
    function get_LowerRightRow: Int32;
    procedure set_LowerRightRow(value: Int32);
    function get_LowerDeltaY: Int32;
    procedure set_LowerDeltaY(value: Int32);
    function get_LowerRightColumn: Int32;
    procedure set_LowerRightColumn(value: Int32);
    function get_LowerDeltaX: Int32;
    procedure set_LowerDeltaX(value: Int32);
    function get_Right: Int32;
    procedure set_Right(value: Int32);
    function get_Bottom: Int32;
    procedure set_Bottom(value: Int32);
    function get_Width: Int32;
    procedure set_Width(value: Int32);
    function get_WidthInch: Double;
    procedure set_WidthInch(value: Double);
    function get_WidthPt: Double;
    procedure set_WidthPt(value: Double);
    function get_WidthCM: Double;
    procedure set_WidthCM(value: Double);
    function get_Height: Int32;
    procedure set_Height(value: Int32);
    function get_HeightInch: Double;
    procedure set_HeightInch(value: Double);
    function get_HeightPt: Double;
    procedure set_HeightPt(value: Double);
    function get_HeightCM: Double;
    procedure set_HeightCM(value: Double);
    function get_Left: Int32;
    procedure set_Left(value: Int32);
    function get_LeftInch: Double;
    procedure set_LeftInch(value: Double);
    function get_LeftCM: Double;
    procedure set_LeftCM(value: Double);
    function get_Top: Int32;
    procedure set_Top(value: Int32);
    function get_TopInch: Double;
    procedure set_TopInch(value: Double);
    function get_TopCM: Double;
    procedure set_TopCM(value: Double);
    function get_TopToCorner: Int32;
    procedure set_TopToCorner(value: Int32);
    function get_LeftToCorner: Int32;
    procedure set_LeftToCorner(value: Int32);
    function get_X: Int32;
    procedure set_X(value: Int32);
    function get_Y: Int32;
    procedure set_Y(value: Int32);
    function get_WidthScale: Int32;
    procedure set_WidthScale(value: Int32);
    function get_HeightScale: Int32;
    procedure set_HeightScale(value: Int32);
    function get_TopInShape: Int32;
    procedure set_TopInShape(value: Int32);
    function get_LeftInShape: Int32;
    procedure set_LeftInShape(value: Int32);
    function get_WidthInShape: Int32;
    procedure set_WidthInShape(value: Int32);
    function get_HeightInShape: Int32;
    procedure set_HeightInShape(value: Int32);
    function get_Group: DNGroupShape;
    function get_Type: DNAutoShapeType;
    function get_HasLine: Boolean;
    procedure set_HasLine(value: Boolean);
    function get_IsFilled: Boolean;
    procedure set_IsFilled(value: Boolean);
    function get_IsFlippedHorizontally: Boolean;
    procedure set_IsFlippedHorizontally(value: Boolean);
    function get_IsFlippedVertically: Boolean;
    procedure set_IsFlippedVertically(value: Boolean);
    function get_ActualLowerRightRow: Int32;
    function get_ConnectionPoints: TArray<DDN.System.Drawing.DNPointF>;
    function get_RelativeToOriginalPictureSize: Boolean;
    procedure set_RelativeToOriginalPictureSize(value: Boolean);
    function get_LinkedCell: string;
    procedure set_LinkedCell(value: string);
    function get_InputRange: string;
    procedure set_InputRange(value: string);
    function get_TextShapeType: DNAutoShapeType;
    procedure set_TextShapeType(value: DNAutoShapeType);
    function get_TextBody: DNFontSettingCollection;
    function get_Font: DNFont;
    procedure set_Font(value: DNFont);
    function get_TextOptions: DNTextOptions;
    procedure set_TextOptions(value: DNTextOptions);
    function get_Text: string;
    procedure set_Text(value: string);
    function get_IsRichText: Boolean;
    function get_HtmlText: string;
    procedure set_HtmlText(value: string);
    function get_TextVerticalOverflow: DNTextOverflowType;
    procedure set_TextVerticalOverflow(value: DNTextOverflowType);
    function get_TextHorizontalOverflow: DNTextOverflowType;
    procedure set_TextHorizontalOverflow(value: DNTextOverflowType);
    function get_IsTextWrapped: Boolean;
    procedure set_IsTextWrapped(value: Boolean);
    function get_TextOrientationType: DNTextOrientationType;
    procedure set_TextOrientationType(value: DNTextOrientationType);
    function get_TextHorizontalAlignment: DNTextAlignmentType;
    procedure set_TextHorizontalAlignment(value: DNTextAlignmentType);
    function get_TextVerticalAlignment: DNTextAlignmentType;
    procedure set_TextVerticalAlignment(value: DNTextAlignmentType);
    function get_TextDirection: DNTextDirectionType;
    procedure set_TextDirection(value: DNTextDirectionType);
    function get_ControlData: TArray<Byte>;
    function get_ActiveXControl: DNActiveXControl;
    function get_Paths: DNShapePathCollection;
    function get_Geometry: DNGeometry;

  { methods } 

    function CalculateTextSize: TArray<Int32>;
    procedure FormatCharacters(startIndex: Int32; length: Int32; font: DNFont; flag: DNStyleFlag); overload;
    procedure FormatCharacters(startIndex: Int32; length: Int32; font: DNFont); overload;
    function Characters(startIndex: Int32; length: Int32): DNFontSetting;
    function GetCharacters: DDN.mscorlib.DNArrayList;
    procedure RemoveActiveXControl;
    procedure ToImage(stream: DDN.mscorlib.DNStream; imageFormat: DDN.System.Drawing.DNImageFormat); overload;
    procedure ToImage(imageFile: string; options: DNImageOrPrintOptions); overload;
    procedure ToImage(stream: DDN.mscorlib.DNStream; options: DNImageOrPrintOptions); overload;
    function ToImage(options: DNImageOrPrintOptions): DDN.System.Drawing.DNBitmap; overload;
    function GetLinkedCell(isR1C1: Boolean; isLocal: Boolean): string;
    procedure SetLinkedCell(formula: string; isR1C1: Boolean; isLocal: Boolean);
    function GetInputRange(isR1C1: Boolean; isLocal: Boolean): string;
    procedure SetInputRange(formula: string; isR1C1: Boolean; isLocal: Boolean);
    procedure UpdateSelectedValue;
    function GetResultOfSmartArt: DNGroupShape;
    procedure ToFrontOrBack(orders: Int32);
    function GetLockedProperty(&type: DNShapeLockType): Boolean;
    procedure SetLockedProperty(&type: DNShapeLockType; value: Boolean);
    function AddHyperlink(address: string): DNHyperlink;
    procedure RemoveHyperlink;
    procedure MoveToRange(upperLeftRow: Int32; upperLeftColumn: Int32; lowerRightRow: Int32; lowerRightColumn: Int32);
    procedure AlignTopRightCorner(topRow: Int32; rightColumn: Int32);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property CurrentValue: Int32 read get_CurrentValue write set_CurrentValue;
    property Min: Int32 read get_Min write set_Min;
    property Max: Int32 read get_Max write set_Max;
    property IncrementalChange: Int32 read get_IncrementalChange write set_IncrementalChange;
    property Shadow: Boolean read get_Shadow write set_Shadow;
    property IsHorizontal: Boolean read get_IsHorizontal write set_IsHorizontal;
    property MacroName: string read get_MacroName write set_MacroName;
    property IsEquation: Boolean read get_IsEquation;
    property IsSmartArt: Boolean read get_IsSmartArt;
    property ZOrderPosition: Int32 read get_ZOrderPosition write set_ZOrderPosition;
    property Name: string read get_Name write set_Name;
    property AlternativeText: string read get_AlternativeText write set_AlternativeText;
    property Title: string read get_Title write set_Title;
    property LineFormat: DNMsoLineFormat read get_LineFormat;
    property FillFormat: DNMsoFillFormat read get_FillFormat;
    property Format: DNShapeFormat read get_Format;
    property Line: DNLineFormat read get_Line;
    property Fill: DNFillFormat read get_Fill;
    property ShadowEffect: DNShadowEffect read get_ShadowEffect;
    property Reflection: DNReflectionEffect read get_Reflection;
    property Glow: DNGlowEffect read get_Glow;
    property SoftEdges: Double read get_SoftEdges write set_SoftEdges;
    property ThreeDFormat: DNThreeDFormat read get_ThreeDFormat;
    property TextFrame: DNMsoTextFrame read get_TextFrame;
    property FormatPicture: DNMsoFormatPicture read get_FormatPicture;
    property IsHidden: Boolean read get_IsHidden write set_IsHidden;
    property IsLockAspectRatio: Boolean read get_IsLockAspectRatio write set_IsLockAspectRatio;
    property RotationAngle: Double read get_RotationAngle write set_RotationAngle;
    property Hyperlink: DNHyperlink read get_Hyperlink;
    property Id: Int32 read get_Id;
    property Spid: string read get_Spid;
    property Spt: Int32 read get_Spt;
    property Worksheet: DNWorksheet read get_Worksheet;
    property IsGroup: Boolean read get_IsGroup;
    property IsWordArt: Boolean read get_IsWordArt;
    property TextEffect: DNTextEffectFormat read get_TextEffect;
    property IsLocked: Boolean read get_IsLocked write set_IsLocked;
    property IsPrintable: Boolean read get_IsPrintable write set_IsPrintable;
    property MsoDrawingType: DNMsoDrawingType read get_MsoDrawingType;
    property AutoShapeType: DNAutoShapeType read get_AutoShapeType write set_AutoShapeType;
    property AnchorType: DNShapeAnchorType read get_AnchorType write set_AnchorType;
    property Placement: DNPlacementType read get_Placement write set_Placement;
    property UpperLeftRow: Int32 read get_UpperLeftRow write set_UpperLeftRow;
    property UpperDeltaY: Int32 read get_UpperDeltaY write set_UpperDeltaY;
    property UpperLeftColumn: Int32 read get_UpperLeftColumn write set_UpperLeftColumn;
    property UpperDeltaX: Int32 read get_UpperDeltaX write set_UpperDeltaX;
    property LowerRightRow: Int32 read get_LowerRightRow write set_LowerRightRow;
    property LowerDeltaY: Int32 read get_LowerDeltaY write set_LowerDeltaY;
    property LowerRightColumn: Int32 read get_LowerRightColumn write set_LowerRightColumn;
    property LowerDeltaX: Int32 read get_LowerDeltaX write set_LowerDeltaX;
    property Right: Int32 read get_Right write set_Right;
    property Bottom: Int32 read get_Bottom write set_Bottom;
    property Width: Int32 read get_Width write set_Width;
    property WidthInch: Double read get_WidthInch write set_WidthInch;
    property WidthPt: Double read get_WidthPt write set_WidthPt;
    property WidthCM: Double read get_WidthCM write set_WidthCM;
    property Height: Int32 read get_Height write set_Height;
    property HeightInch: Double read get_HeightInch write set_HeightInch;
    property HeightPt: Double read get_HeightPt write set_HeightPt;
    property HeightCM: Double read get_HeightCM write set_HeightCM;
    property Left: Int32 read get_Left write set_Left;
    property LeftInch: Double read get_LeftInch write set_LeftInch;
    property LeftCM: Double read get_LeftCM write set_LeftCM;
    property Top: Int32 read get_Top write set_Top;
    property TopInch: Double read get_TopInch write set_TopInch;
    property TopCM: Double read get_TopCM write set_TopCM;
    property TopToCorner: Int32 read get_TopToCorner write set_TopToCorner;
    property LeftToCorner: Int32 read get_LeftToCorner write set_LeftToCorner;
    property X: Int32 read get_X write set_X;
    property Y: Int32 read get_Y write set_Y;
    property WidthScale: Int32 read get_WidthScale write set_WidthScale;
    property HeightScale: Int32 read get_HeightScale write set_HeightScale;
    property TopInShape: Int32 read get_TopInShape write set_TopInShape;
    property LeftInShape: Int32 read get_LeftInShape write set_LeftInShape;
    property WidthInShape: Int32 read get_WidthInShape write set_WidthInShape;
    property HeightInShape: Int32 read get_HeightInShape write set_HeightInShape;
    property Group: DNGroupShape read get_Group;
    property &Type: DNAutoShapeType read get_Type;
    property HasLine: Boolean read get_HasLine write set_HasLine;
    property IsFilled: Boolean read get_IsFilled write set_IsFilled;
    property IsFlippedHorizontally: Boolean read get_IsFlippedHorizontally write set_IsFlippedHorizontally;
    property IsFlippedVertically: Boolean read get_IsFlippedVertically write set_IsFlippedVertically;
    property ActualLowerRightRow: Int32 read get_ActualLowerRightRow;
    property ConnectionPoints: TArray<DDN.System.Drawing.DNPointF> read get_ConnectionPoints;
    property RelativeToOriginalPictureSize: Boolean read get_RelativeToOriginalPictureSize write set_RelativeToOriginalPictureSize;
    property LinkedCell: string read get_LinkedCell write set_LinkedCell;
    property InputRange: string read get_InputRange write set_InputRange;
    property TextShapeType: DNAutoShapeType read get_TextShapeType write set_TextShapeType;
    property TextBody: DNFontSettingCollection read get_TextBody;
    property Font: DNFont read get_Font write set_Font;
    property TextOptions: DNTextOptions read get_TextOptions write set_TextOptions;
    property Text: string read get_Text write set_Text;
    property IsRichText: Boolean read get_IsRichText;
    property HtmlText: string read get_HtmlText write set_HtmlText;
    property TextVerticalOverflow: DNTextOverflowType read get_TextVerticalOverflow write set_TextVerticalOverflow;
    property TextHorizontalOverflow: DNTextOverflowType read get_TextHorizontalOverflow write set_TextHorizontalOverflow;
    property IsTextWrapped: Boolean read get_IsTextWrapped write set_IsTextWrapped;
    property TextOrientationType: DNTextOrientationType read get_TextOrientationType write set_TextOrientationType;
    property TextHorizontalAlignment: DNTextAlignmentType read get_TextHorizontalAlignment write set_TextHorizontalAlignment;
    property TextVerticalAlignment: DNTextAlignmentType read get_TextVerticalAlignment write set_TextVerticalAlignment;
    property TextDirection: DNTextDirectionType read get_TextDirection write set_TextDirection;
    property ControlData: TArray<Byte> read get_ControlData;
    property ActiveXControl: DNActiveXControl read get_ActiveXControl;
    property Paths: DNShapePathCollection read get_Paths;
    property Geometry: DNGeometry read get_Geometry;
  end;

  TDNSpinner = class(TDNGenericImport<DNSpinnerClass, DNSpinner>) end;

  //-------------namespace: Aspose.Cells.Drawing----------------
  DNTextBoxClass = interface(DNShapeClass)
  ['{AFDA98DE-789A-5BCC-AB03-A4FAC362D6DE}']
  end;

  [DNTypeName('Aspose.Cells.Drawing.TextBox')]
  DNTextBox = interface(DNShape)
  ['{EDE5FD3A-A25B-3946-8761-56DA508190B9}']
  { getters & setters } 

    function get_MacroName: string;
    procedure set_MacroName(value: string);
    function get_IsEquation: Boolean;
    function get_IsSmartArt: Boolean;
    function get_ZOrderPosition: Int32;
    procedure set_ZOrderPosition(value: Int32);
    function get_Name: string;
    procedure set_Name(value: string);
    function get_AlternativeText: string;
    procedure set_AlternativeText(value: string);
    function get_Title: string;
    procedure set_Title(value: string);
    function get_LineFormat: DNMsoLineFormat;
    function get_FillFormat: DNMsoFillFormat;
    function get_Format: DNShapeFormat;
    function get_Line: DNLineFormat;
    function get_Fill: DNFillFormat;
    function get_ShadowEffect: DNShadowEffect;
    function get_Reflection: DNReflectionEffect;
    function get_Glow: DNGlowEffect;
    function get_SoftEdges: Double;
    procedure set_SoftEdges(value: Double);
    function get_ThreeDFormat: DNThreeDFormat;
    function get_TextFrame: DNMsoTextFrame;
    function get_FormatPicture: DNMsoFormatPicture;
    function get_IsHidden: Boolean;
    procedure set_IsHidden(value: Boolean);
    function get_IsLockAspectRatio: Boolean;
    procedure set_IsLockAspectRatio(value: Boolean);
    function get_RotationAngle: Double;
    procedure set_RotationAngle(value: Double);
    function get_Hyperlink: DNHyperlink;
    function get_Id: Int32;
    function get_Spid: string;
    function get_Spt: Int32;
    function get_Worksheet: DNWorksheet;
    function get_IsGroup: Boolean;
    function get_IsWordArt: Boolean;
    function get_TextEffect: DNTextEffectFormat;
    function get_IsLocked: Boolean;
    procedure set_IsLocked(value: Boolean);
    function get_IsPrintable: Boolean;
    procedure set_IsPrintable(value: Boolean);
    function get_MsoDrawingType: DNMsoDrawingType;
    function get_AutoShapeType: DNAutoShapeType;
    procedure set_AutoShapeType(value: DNAutoShapeType);
    function get_AnchorType: DNShapeAnchorType;
    procedure set_AnchorType(value: DNShapeAnchorType);
    function get_Placement: DNPlacementType;
    procedure set_Placement(value: DNPlacementType);
    function get_UpperLeftRow: Int32;
    procedure set_UpperLeftRow(value: Int32);
    function get_UpperDeltaY: Int32;
    procedure set_UpperDeltaY(value: Int32);
    function get_UpperLeftColumn: Int32;
    procedure set_UpperLeftColumn(value: Int32);
    function get_UpperDeltaX: Int32;
    procedure set_UpperDeltaX(value: Int32);
    function get_LowerRightRow: Int32;
    procedure set_LowerRightRow(value: Int32);
    function get_LowerDeltaY: Int32;
    procedure set_LowerDeltaY(value: Int32);
    function get_LowerRightColumn: Int32;
    procedure set_LowerRightColumn(value: Int32);
    function get_LowerDeltaX: Int32;
    procedure set_LowerDeltaX(value: Int32);
    function get_Right: Int32;
    procedure set_Right(value: Int32);
    function get_Bottom: Int32;
    procedure set_Bottom(value: Int32);
    function get_Width: Int32;
    procedure set_Width(value: Int32);
    function get_WidthInch: Double;
    procedure set_WidthInch(value: Double);
    function get_WidthPt: Double;
    procedure set_WidthPt(value: Double);
    function get_WidthCM: Double;
    procedure set_WidthCM(value: Double);
    function get_Height: Int32;
    procedure set_Height(value: Int32);
    function get_HeightInch: Double;
    procedure set_HeightInch(value: Double);
    function get_HeightPt: Double;
    procedure set_HeightPt(value: Double);
    function get_HeightCM: Double;
    procedure set_HeightCM(value: Double);
    function get_Left: Int32;
    procedure set_Left(value: Int32);
    function get_LeftInch: Double;
    procedure set_LeftInch(value: Double);
    function get_LeftCM: Double;
    procedure set_LeftCM(value: Double);
    function get_Top: Int32;
    procedure set_Top(value: Int32);
    function get_TopInch: Double;
    procedure set_TopInch(value: Double);
    function get_TopCM: Double;
    procedure set_TopCM(value: Double);
    function get_TopToCorner: Int32;
    procedure set_TopToCorner(value: Int32);
    function get_LeftToCorner: Int32;
    procedure set_LeftToCorner(value: Int32);
    function get_X: Int32;
    procedure set_X(value: Int32);
    function get_Y: Int32;
    procedure set_Y(value: Int32);
    function get_WidthScale: Int32;
    procedure set_WidthScale(value: Int32);
    function get_HeightScale: Int32;
    procedure set_HeightScale(value: Int32);
    function get_TopInShape: Int32;
    procedure set_TopInShape(value: Int32);
    function get_LeftInShape: Int32;
    procedure set_LeftInShape(value: Int32);
    function get_WidthInShape: Int32;
    procedure set_WidthInShape(value: Int32);
    function get_HeightInShape: Int32;
    procedure set_HeightInShape(value: Int32);
    function get_Group: DNGroupShape;
    function get_Type: DNAutoShapeType;
    function get_HasLine: Boolean;
    procedure set_HasLine(value: Boolean);
    function get_IsFilled: Boolean;
    procedure set_IsFilled(value: Boolean);
    function get_IsFlippedHorizontally: Boolean;
    procedure set_IsFlippedHorizontally(value: Boolean);
    function get_IsFlippedVertically: Boolean;
    procedure set_IsFlippedVertically(value: Boolean);
    function get_ActualLowerRightRow: Int32;
    function get_ConnectionPoints: TArray<DDN.System.Drawing.DNPointF>;
    function get_RelativeToOriginalPictureSize: Boolean;
    procedure set_RelativeToOriginalPictureSize(value: Boolean);
    function get_LinkedCell: string;
    procedure set_LinkedCell(value: string);
    function get_InputRange: string;
    procedure set_InputRange(value: string);
    function get_TextShapeType: DNAutoShapeType;
    procedure set_TextShapeType(value: DNAutoShapeType);
    function get_TextBody: DNFontSettingCollection;
    function get_Font: DNFont;
    procedure set_Font(value: DNFont);
    function get_TextOptions: DNTextOptions;
    procedure set_TextOptions(value: DNTextOptions);
    function get_Text: string;
    procedure set_Text(value: string);
    function get_IsRichText: Boolean;
    function get_HtmlText: string;
    procedure set_HtmlText(value: string);
    function get_TextVerticalOverflow: DNTextOverflowType;
    procedure set_TextVerticalOverflow(value: DNTextOverflowType);
    function get_TextHorizontalOverflow: DNTextOverflowType;
    procedure set_TextHorizontalOverflow(value: DNTextOverflowType);
    function get_IsTextWrapped: Boolean;
    procedure set_IsTextWrapped(value: Boolean);
    function get_TextOrientationType: DNTextOrientationType;
    procedure set_TextOrientationType(value: DNTextOrientationType);
    function get_TextHorizontalAlignment: DNTextAlignmentType;
    procedure set_TextHorizontalAlignment(value: DNTextAlignmentType);
    function get_TextVerticalAlignment: DNTextAlignmentType;
    procedure set_TextVerticalAlignment(value: DNTextAlignmentType);
    function get_TextDirection: DNTextDirectionType;
    procedure set_TextDirection(value: DNTextDirectionType);
    function get_ControlData: TArray<Byte>;
    function get_ActiveXControl: DNActiveXControl;
    function get_Paths: DNShapePathCollection;
    function get_Geometry: DNGeometry;

  { methods } 

    function CalculateTextSize: TArray<Int32>;
    procedure FormatCharacters(startIndex: Int32; length: Int32; font: DNFont; flag: DNStyleFlag); overload;
    procedure FormatCharacters(startIndex: Int32; length: Int32; font: DNFont); overload;
    function Characters(startIndex: Int32; length: Int32): DNFontSetting;
    function GetCharacters: DDN.mscorlib.DNArrayList;
    procedure RemoveActiveXControl;
    procedure ToImage(stream: DDN.mscorlib.DNStream; imageFormat: DDN.System.Drawing.DNImageFormat); overload;
    procedure ToImage(imageFile: string; options: DNImageOrPrintOptions); overload;
    procedure ToImage(stream: DDN.mscorlib.DNStream; options: DNImageOrPrintOptions); overload;
    function ToImage(options: DNImageOrPrintOptions): DDN.System.Drawing.DNBitmap; overload;
    function GetLinkedCell(isR1C1: Boolean; isLocal: Boolean): string;
    procedure SetLinkedCell(formula: string; isR1C1: Boolean; isLocal: Boolean);
    function GetInputRange(isR1C1: Boolean; isLocal: Boolean): string;
    procedure SetInputRange(formula: string; isR1C1: Boolean; isLocal: Boolean);
    procedure UpdateSelectedValue;
    function GetResultOfSmartArt: DNGroupShape;
    procedure ToFrontOrBack(orders: Int32);
    function GetLockedProperty(&type: DNShapeLockType): Boolean;
    procedure SetLockedProperty(&type: DNShapeLockType; value: Boolean);
    function AddHyperlink(address: string): DNHyperlink;
    procedure RemoveHyperlink;
    procedure MoveToRange(upperLeftRow: Int32; upperLeftColumn: Int32; lowerRightRow: Int32; lowerRightColumn: Int32);
    procedure AlignTopRightCorner(topRow: Int32; rightColumn: Int32);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property MacroName: string read get_MacroName write set_MacroName;
    property IsEquation: Boolean read get_IsEquation;
    property IsSmartArt: Boolean read get_IsSmartArt;
    property ZOrderPosition: Int32 read get_ZOrderPosition write set_ZOrderPosition;
    property Name: string read get_Name write set_Name;
    property AlternativeText: string read get_AlternativeText write set_AlternativeText;
    property Title: string read get_Title write set_Title;
    property LineFormat: DNMsoLineFormat read get_LineFormat;
    property FillFormat: DNMsoFillFormat read get_FillFormat;
    property Format: DNShapeFormat read get_Format;
    property Line: DNLineFormat read get_Line;
    property Fill: DNFillFormat read get_Fill;
    property ShadowEffect: DNShadowEffect read get_ShadowEffect;
    property Reflection: DNReflectionEffect read get_Reflection;
    property Glow: DNGlowEffect read get_Glow;
    property SoftEdges: Double read get_SoftEdges write set_SoftEdges;
    property ThreeDFormat: DNThreeDFormat read get_ThreeDFormat;
    property TextFrame: DNMsoTextFrame read get_TextFrame;
    property FormatPicture: DNMsoFormatPicture read get_FormatPicture;
    property IsHidden: Boolean read get_IsHidden write set_IsHidden;
    property IsLockAspectRatio: Boolean read get_IsLockAspectRatio write set_IsLockAspectRatio;
    property RotationAngle: Double read get_RotationAngle write set_RotationAngle;
    property Hyperlink: DNHyperlink read get_Hyperlink;
    property Id: Int32 read get_Id;
    property Spid: string read get_Spid;
    property Spt: Int32 read get_Spt;
    property Worksheet: DNWorksheet read get_Worksheet;
    property IsGroup: Boolean read get_IsGroup;
    property IsWordArt: Boolean read get_IsWordArt;
    property TextEffect: DNTextEffectFormat read get_TextEffect;
    property IsLocked: Boolean read get_IsLocked write set_IsLocked;
    property IsPrintable: Boolean read get_IsPrintable write set_IsPrintable;
    property MsoDrawingType: DNMsoDrawingType read get_MsoDrawingType;
    property AutoShapeType: DNAutoShapeType read get_AutoShapeType write set_AutoShapeType;
    property AnchorType: DNShapeAnchorType read get_AnchorType write set_AnchorType;
    property Placement: DNPlacementType read get_Placement write set_Placement;
    property UpperLeftRow: Int32 read get_UpperLeftRow write set_UpperLeftRow;
    property UpperDeltaY: Int32 read get_UpperDeltaY write set_UpperDeltaY;
    property UpperLeftColumn: Int32 read get_UpperLeftColumn write set_UpperLeftColumn;
    property UpperDeltaX: Int32 read get_UpperDeltaX write set_UpperDeltaX;
    property LowerRightRow: Int32 read get_LowerRightRow write set_LowerRightRow;
    property LowerDeltaY: Int32 read get_LowerDeltaY write set_LowerDeltaY;
    property LowerRightColumn: Int32 read get_LowerRightColumn write set_LowerRightColumn;
    property LowerDeltaX: Int32 read get_LowerDeltaX write set_LowerDeltaX;
    property Right: Int32 read get_Right write set_Right;
    property Bottom: Int32 read get_Bottom write set_Bottom;
    property Width: Int32 read get_Width write set_Width;
    property WidthInch: Double read get_WidthInch write set_WidthInch;
    property WidthPt: Double read get_WidthPt write set_WidthPt;
    property WidthCM: Double read get_WidthCM write set_WidthCM;
    property Height: Int32 read get_Height write set_Height;
    property HeightInch: Double read get_HeightInch write set_HeightInch;
    property HeightPt: Double read get_HeightPt write set_HeightPt;
    property HeightCM: Double read get_HeightCM write set_HeightCM;
    property Left: Int32 read get_Left write set_Left;
    property LeftInch: Double read get_LeftInch write set_LeftInch;
    property LeftCM: Double read get_LeftCM write set_LeftCM;
    property Top: Int32 read get_Top write set_Top;
    property TopInch: Double read get_TopInch write set_TopInch;
    property TopCM: Double read get_TopCM write set_TopCM;
    property TopToCorner: Int32 read get_TopToCorner write set_TopToCorner;
    property LeftToCorner: Int32 read get_LeftToCorner write set_LeftToCorner;
    property X: Int32 read get_X write set_X;
    property Y: Int32 read get_Y write set_Y;
    property WidthScale: Int32 read get_WidthScale write set_WidthScale;
    property HeightScale: Int32 read get_HeightScale write set_HeightScale;
    property TopInShape: Int32 read get_TopInShape write set_TopInShape;
    property LeftInShape: Int32 read get_LeftInShape write set_LeftInShape;
    property WidthInShape: Int32 read get_WidthInShape write set_WidthInShape;
    property HeightInShape: Int32 read get_HeightInShape write set_HeightInShape;
    property Group: DNGroupShape read get_Group;
    property &Type: DNAutoShapeType read get_Type;
    property HasLine: Boolean read get_HasLine write set_HasLine;
    property IsFilled: Boolean read get_IsFilled write set_IsFilled;
    property IsFlippedHorizontally: Boolean read get_IsFlippedHorizontally write set_IsFlippedHorizontally;
    property IsFlippedVertically: Boolean read get_IsFlippedVertically write set_IsFlippedVertically;
    property ActualLowerRightRow: Int32 read get_ActualLowerRightRow;
    property ConnectionPoints: TArray<DDN.System.Drawing.DNPointF> read get_ConnectionPoints;
    property RelativeToOriginalPictureSize: Boolean read get_RelativeToOriginalPictureSize write set_RelativeToOriginalPictureSize;
    property LinkedCell: string read get_LinkedCell write set_LinkedCell;
    property InputRange: string read get_InputRange write set_InputRange;
    property TextShapeType: DNAutoShapeType read get_TextShapeType write set_TextShapeType;
    property TextBody: DNFontSettingCollection read get_TextBody;
    property Font: DNFont read get_Font write set_Font;
    property TextOptions: DNTextOptions read get_TextOptions write set_TextOptions;
    property Text: string read get_Text write set_Text;
    property IsRichText: Boolean read get_IsRichText;
    property HtmlText: string read get_HtmlText write set_HtmlText;
    property TextVerticalOverflow: DNTextOverflowType read get_TextVerticalOverflow write set_TextVerticalOverflow;
    property TextHorizontalOverflow: DNTextOverflowType read get_TextHorizontalOverflow write set_TextHorizontalOverflow;
    property IsTextWrapped: Boolean read get_IsTextWrapped write set_IsTextWrapped;
    property TextOrientationType: DNTextOrientationType read get_TextOrientationType write set_TextOrientationType;
    property TextHorizontalAlignment: DNTextAlignmentType read get_TextHorizontalAlignment write set_TextHorizontalAlignment;
    property TextVerticalAlignment: DNTextAlignmentType read get_TextVerticalAlignment write set_TextVerticalAlignment;
    property TextDirection: DNTextDirectionType read get_TextDirection write set_TextDirection;
    property ControlData: TArray<Byte> read get_ControlData;
    property ActiveXControl: DNActiveXControl read get_ActiveXControl;
    property Paths: DNShapePathCollection read get_Paths;
    property Geometry: DNGeometry read get_Geometry;
  end;

  TDNTextBox = class(TDNGenericImport<DNTextBoxClass, DNTextBox>) end;

  //-------------namespace: Aspose.Cells.Drawing----------------
  DNWebExtensionShapeClass = interface(DNShapeClass)
  ['{FE4F0A59-4A85-5235-8240-AD12956BD439}']
  end;

  [DNTypeName('Aspose.Cells.Drawing.WebExtensionShape')]
  DNWebExtensionShape = interface(DNShape)
  ['{DCE4BF7D-20B9-34AB-9630-162423EE2CDD}']
  { getters & setters } 

    function get_WebExtension: DNWebExtension;
    procedure set_WebExtension(value: DNWebExtension);
    function get_MacroName: string;
    procedure set_MacroName(value: string);
    function get_IsEquation: Boolean;
    function get_IsSmartArt: Boolean;
    function get_ZOrderPosition: Int32;
    procedure set_ZOrderPosition(value: Int32);
    function get_Name: string;
    procedure set_Name(value: string);
    function get_AlternativeText: string;
    procedure set_AlternativeText(value: string);
    function get_Title: string;
    procedure set_Title(value: string);
    function get_LineFormat: DNMsoLineFormat;
    function get_FillFormat: DNMsoFillFormat;
    function get_Format: DNShapeFormat;
    function get_Line: DNLineFormat;
    function get_Fill: DNFillFormat;
    function get_ShadowEffect: DNShadowEffect;
    function get_Reflection: DNReflectionEffect;
    function get_Glow: DNGlowEffect;
    function get_SoftEdges: Double;
    procedure set_SoftEdges(value: Double);
    function get_ThreeDFormat: DNThreeDFormat;
    function get_TextFrame: DNMsoTextFrame;
    function get_FormatPicture: DNMsoFormatPicture;
    function get_IsHidden: Boolean;
    procedure set_IsHidden(value: Boolean);
    function get_IsLockAspectRatio: Boolean;
    procedure set_IsLockAspectRatio(value: Boolean);
    function get_RotationAngle: Double;
    procedure set_RotationAngle(value: Double);
    function get_Hyperlink: DNHyperlink;
    function get_Id: Int32;
    function get_Spid: string;
    function get_Spt: Int32;
    function get_Worksheet: DNWorksheet;
    function get_IsGroup: Boolean;
    function get_IsWordArt: Boolean;
    function get_TextEffect: DNTextEffectFormat;
    function get_IsLocked: Boolean;
    procedure set_IsLocked(value: Boolean);
    function get_IsPrintable: Boolean;
    procedure set_IsPrintable(value: Boolean);
    function get_MsoDrawingType: DNMsoDrawingType;
    function get_AutoShapeType: DNAutoShapeType;
    procedure set_AutoShapeType(value: DNAutoShapeType);
    function get_AnchorType: DNShapeAnchorType;
    procedure set_AnchorType(value: DNShapeAnchorType);
    function get_Placement: DNPlacementType;
    procedure set_Placement(value: DNPlacementType);
    function get_UpperLeftRow: Int32;
    procedure set_UpperLeftRow(value: Int32);
    function get_UpperDeltaY: Int32;
    procedure set_UpperDeltaY(value: Int32);
    function get_UpperLeftColumn: Int32;
    procedure set_UpperLeftColumn(value: Int32);
    function get_UpperDeltaX: Int32;
    procedure set_UpperDeltaX(value: Int32);
    function get_LowerRightRow: Int32;
    procedure set_LowerRightRow(value: Int32);
    function get_LowerDeltaY: Int32;
    procedure set_LowerDeltaY(value: Int32);
    function get_LowerRightColumn: Int32;
    procedure set_LowerRightColumn(value: Int32);
    function get_LowerDeltaX: Int32;
    procedure set_LowerDeltaX(value: Int32);
    function get_Right: Int32;
    procedure set_Right(value: Int32);
    function get_Bottom: Int32;
    procedure set_Bottom(value: Int32);
    function get_Width: Int32;
    procedure set_Width(value: Int32);
    function get_WidthInch: Double;
    procedure set_WidthInch(value: Double);
    function get_WidthPt: Double;
    procedure set_WidthPt(value: Double);
    function get_WidthCM: Double;
    procedure set_WidthCM(value: Double);
    function get_Height: Int32;
    procedure set_Height(value: Int32);
    function get_HeightInch: Double;
    procedure set_HeightInch(value: Double);
    function get_HeightPt: Double;
    procedure set_HeightPt(value: Double);
    function get_HeightCM: Double;
    procedure set_HeightCM(value: Double);
    function get_Left: Int32;
    procedure set_Left(value: Int32);
    function get_LeftInch: Double;
    procedure set_LeftInch(value: Double);
    function get_LeftCM: Double;
    procedure set_LeftCM(value: Double);
    function get_Top: Int32;
    procedure set_Top(value: Int32);
    function get_TopInch: Double;
    procedure set_TopInch(value: Double);
    function get_TopCM: Double;
    procedure set_TopCM(value: Double);
    function get_TopToCorner: Int32;
    procedure set_TopToCorner(value: Int32);
    function get_LeftToCorner: Int32;
    procedure set_LeftToCorner(value: Int32);
    function get_X: Int32;
    procedure set_X(value: Int32);
    function get_Y: Int32;
    procedure set_Y(value: Int32);
    function get_WidthScale: Int32;
    procedure set_WidthScale(value: Int32);
    function get_HeightScale: Int32;
    procedure set_HeightScale(value: Int32);
    function get_TopInShape: Int32;
    procedure set_TopInShape(value: Int32);
    function get_LeftInShape: Int32;
    procedure set_LeftInShape(value: Int32);
    function get_WidthInShape: Int32;
    procedure set_WidthInShape(value: Int32);
    function get_HeightInShape: Int32;
    procedure set_HeightInShape(value: Int32);
    function get_Group: DNGroupShape;
    function get_Type: DNAutoShapeType;
    function get_HasLine: Boolean;
    procedure set_HasLine(value: Boolean);
    function get_IsFilled: Boolean;
    procedure set_IsFilled(value: Boolean);
    function get_IsFlippedHorizontally: Boolean;
    procedure set_IsFlippedHorizontally(value: Boolean);
    function get_IsFlippedVertically: Boolean;
    procedure set_IsFlippedVertically(value: Boolean);
    function get_ActualLowerRightRow: Int32;
    function get_ConnectionPoints: TArray<DDN.System.Drawing.DNPointF>;
    function get_RelativeToOriginalPictureSize: Boolean;
    procedure set_RelativeToOriginalPictureSize(value: Boolean);
    function get_LinkedCell: string;
    procedure set_LinkedCell(value: string);
    function get_InputRange: string;
    procedure set_InputRange(value: string);
    function get_TextShapeType: DNAutoShapeType;
    procedure set_TextShapeType(value: DNAutoShapeType);
    function get_TextBody: DNFontSettingCollection;
    function get_Font: DNFont;
    procedure set_Font(value: DNFont);
    function get_TextOptions: DNTextOptions;
    procedure set_TextOptions(value: DNTextOptions);
    function get_Text: string;
    procedure set_Text(value: string);
    function get_IsRichText: Boolean;
    function get_HtmlText: string;
    procedure set_HtmlText(value: string);
    function get_TextVerticalOverflow: DNTextOverflowType;
    procedure set_TextVerticalOverflow(value: DNTextOverflowType);
    function get_TextHorizontalOverflow: DNTextOverflowType;
    procedure set_TextHorizontalOverflow(value: DNTextOverflowType);
    function get_IsTextWrapped: Boolean;
    procedure set_IsTextWrapped(value: Boolean);
    function get_TextOrientationType: DNTextOrientationType;
    procedure set_TextOrientationType(value: DNTextOrientationType);
    function get_TextHorizontalAlignment: DNTextAlignmentType;
    procedure set_TextHorizontalAlignment(value: DNTextAlignmentType);
    function get_TextVerticalAlignment: DNTextAlignmentType;
    procedure set_TextVerticalAlignment(value: DNTextAlignmentType);
    function get_TextDirection: DNTextDirectionType;
    procedure set_TextDirection(value: DNTextDirectionType);
    function get_ControlData: TArray<Byte>;
    function get_ActiveXControl: DNActiveXControl;
    function get_Paths: DNShapePathCollection;
    function get_Geometry: DNGeometry;

  { methods } 

    function CalculateTextSize: TArray<Int32>;
    procedure FormatCharacters(startIndex: Int32; length: Int32; font: DNFont; flag: DNStyleFlag); overload;
    procedure FormatCharacters(startIndex: Int32; length: Int32; font: DNFont); overload;
    function Characters(startIndex: Int32; length: Int32): DNFontSetting;
    function GetCharacters: DDN.mscorlib.DNArrayList;
    procedure RemoveActiveXControl;
    procedure ToImage(stream: DDN.mscorlib.DNStream; imageFormat: DDN.System.Drawing.DNImageFormat); overload;
    procedure ToImage(imageFile: string; options: DNImageOrPrintOptions); overload;
    procedure ToImage(stream: DDN.mscorlib.DNStream; options: DNImageOrPrintOptions); overload;
    function ToImage(options: DNImageOrPrintOptions): DDN.System.Drawing.DNBitmap; overload;
    function GetLinkedCell(isR1C1: Boolean; isLocal: Boolean): string;
    procedure SetLinkedCell(formula: string; isR1C1: Boolean; isLocal: Boolean);
    function GetInputRange(isR1C1: Boolean; isLocal: Boolean): string;
    procedure SetInputRange(formula: string; isR1C1: Boolean; isLocal: Boolean);
    procedure UpdateSelectedValue;
    function GetResultOfSmartArt: DNGroupShape;
    procedure ToFrontOrBack(orders: Int32);
    function GetLockedProperty(&type: DNShapeLockType): Boolean;
    procedure SetLockedProperty(&type: DNShapeLockType; value: Boolean);
    function AddHyperlink(address: string): DNHyperlink;
    procedure RemoveHyperlink;
    procedure MoveToRange(upperLeftRow: Int32; upperLeftColumn: Int32; lowerRightRow: Int32; lowerRightColumn: Int32);
    procedure AlignTopRightCorner(topRow: Int32; rightColumn: Int32);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property WebExtension: DNWebExtension read get_WebExtension write set_WebExtension;
    property MacroName: string read get_MacroName write set_MacroName;
    property IsEquation: Boolean read get_IsEquation;
    property IsSmartArt: Boolean read get_IsSmartArt;
    property ZOrderPosition: Int32 read get_ZOrderPosition write set_ZOrderPosition;
    property Name: string read get_Name write set_Name;
    property AlternativeText: string read get_AlternativeText write set_AlternativeText;
    property Title: string read get_Title write set_Title;
    property LineFormat: DNMsoLineFormat read get_LineFormat;
    property FillFormat: DNMsoFillFormat read get_FillFormat;
    property Format: DNShapeFormat read get_Format;
    property Line: DNLineFormat read get_Line;
    property Fill: DNFillFormat read get_Fill;
    property ShadowEffect: DNShadowEffect read get_ShadowEffect;
    property Reflection: DNReflectionEffect read get_Reflection;
    property Glow: DNGlowEffect read get_Glow;
    property SoftEdges: Double read get_SoftEdges write set_SoftEdges;
    property ThreeDFormat: DNThreeDFormat read get_ThreeDFormat;
    property TextFrame: DNMsoTextFrame read get_TextFrame;
    property FormatPicture: DNMsoFormatPicture read get_FormatPicture;
    property IsHidden: Boolean read get_IsHidden write set_IsHidden;
    property IsLockAspectRatio: Boolean read get_IsLockAspectRatio write set_IsLockAspectRatio;
    property RotationAngle: Double read get_RotationAngle write set_RotationAngle;
    property Hyperlink: DNHyperlink read get_Hyperlink;
    property Id: Int32 read get_Id;
    property Spid: string read get_Spid;
    property Spt: Int32 read get_Spt;
    property Worksheet: DNWorksheet read get_Worksheet;
    property IsGroup: Boolean read get_IsGroup;
    property IsWordArt: Boolean read get_IsWordArt;
    property TextEffect: DNTextEffectFormat read get_TextEffect;
    property IsLocked: Boolean read get_IsLocked write set_IsLocked;
    property IsPrintable: Boolean read get_IsPrintable write set_IsPrintable;
    property MsoDrawingType: DNMsoDrawingType read get_MsoDrawingType;
    property AutoShapeType: DNAutoShapeType read get_AutoShapeType write set_AutoShapeType;
    property AnchorType: DNShapeAnchorType read get_AnchorType write set_AnchorType;
    property Placement: DNPlacementType read get_Placement write set_Placement;
    property UpperLeftRow: Int32 read get_UpperLeftRow write set_UpperLeftRow;
    property UpperDeltaY: Int32 read get_UpperDeltaY write set_UpperDeltaY;
    property UpperLeftColumn: Int32 read get_UpperLeftColumn write set_UpperLeftColumn;
    property UpperDeltaX: Int32 read get_UpperDeltaX write set_UpperDeltaX;
    property LowerRightRow: Int32 read get_LowerRightRow write set_LowerRightRow;
    property LowerDeltaY: Int32 read get_LowerDeltaY write set_LowerDeltaY;
    property LowerRightColumn: Int32 read get_LowerRightColumn write set_LowerRightColumn;
    property LowerDeltaX: Int32 read get_LowerDeltaX write set_LowerDeltaX;
    property Right: Int32 read get_Right write set_Right;
    property Bottom: Int32 read get_Bottom write set_Bottom;
    property Width: Int32 read get_Width write set_Width;
    property WidthInch: Double read get_WidthInch write set_WidthInch;
    property WidthPt: Double read get_WidthPt write set_WidthPt;
    property WidthCM: Double read get_WidthCM write set_WidthCM;
    property Height: Int32 read get_Height write set_Height;
    property HeightInch: Double read get_HeightInch write set_HeightInch;
    property HeightPt: Double read get_HeightPt write set_HeightPt;
    property HeightCM: Double read get_HeightCM write set_HeightCM;
    property Left: Int32 read get_Left write set_Left;
    property LeftInch: Double read get_LeftInch write set_LeftInch;
    property LeftCM: Double read get_LeftCM write set_LeftCM;
    property Top: Int32 read get_Top write set_Top;
    property TopInch: Double read get_TopInch write set_TopInch;
    property TopCM: Double read get_TopCM write set_TopCM;
    property TopToCorner: Int32 read get_TopToCorner write set_TopToCorner;
    property LeftToCorner: Int32 read get_LeftToCorner write set_LeftToCorner;
    property X: Int32 read get_X write set_X;
    property Y: Int32 read get_Y write set_Y;
    property WidthScale: Int32 read get_WidthScale write set_WidthScale;
    property HeightScale: Int32 read get_HeightScale write set_HeightScale;
    property TopInShape: Int32 read get_TopInShape write set_TopInShape;
    property LeftInShape: Int32 read get_LeftInShape write set_LeftInShape;
    property WidthInShape: Int32 read get_WidthInShape write set_WidthInShape;
    property HeightInShape: Int32 read get_HeightInShape write set_HeightInShape;
    property Group: DNGroupShape read get_Group;
    property &Type: DNAutoShapeType read get_Type;
    property HasLine: Boolean read get_HasLine write set_HasLine;
    property IsFilled: Boolean read get_IsFilled write set_IsFilled;
    property IsFlippedHorizontally: Boolean read get_IsFlippedHorizontally write set_IsFlippedHorizontally;
    property IsFlippedVertically: Boolean read get_IsFlippedVertically write set_IsFlippedVertically;
    property ActualLowerRightRow: Int32 read get_ActualLowerRightRow;
    property ConnectionPoints: TArray<DDN.System.Drawing.DNPointF> read get_ConnectionPoints;
    property RelativeToOriginalPictureSize: Boolean read get_RelativeToOriginalPictureSize write set_RelativeToOriginalPictureSize;
    property LinkedCell: string read get_LinkedCell write set_LinkedCell;
    property InputRange: string read get_InputRange write set_InputRange;
    property TextShapeType: DNAutoShapeType read get_TextShapeType write set_TextShapeType;
    property TextBody: DNFontSettingCollection read get_TextBody;
    property Font: DNFont read get_Font write set_Font;
    property TextOptions: DNTextOptions read get_TextOptions write set_TextOptions;
    property Text: string read get_Text write set_Text;
    property IsRichText: Boolean read get_IsRichText;
    property HtmlText: string read get_HtmlText write set_HtmlText;
    property TextVerticalOverflow: DNTextOverflowType read get_TextVerticalOverflow write set_TextVerticalOverflow;
    property TextHorizontalOverflow: DNTextOverflowType read get_TextHorizontalOverflow write set_TextHorizontalOverflow;
    property IsTextWrapped: Boolean read get_IsTextWrapped write set_IsTextWrapped;
    property TextOrientationType: DNTextOrientationType read get_TextOrientationType write set_TextOrientationType;
    property TextHorizontalAlignment: DNTextAlignmentType read get_TextHorizontalAlignment write set_TextHorizontalAlignment;
    property TextVerticalAlignment: DNTextAlignmentType read get_TextVerticalAlignment write set_TextVerticalAlignment;
    property TextDirection: DNTextDirectionType read get_TextDirection write set_TextDirection;
    property ControlData: TArray<Byte> read get_ControlData;
    property ActiveXControl: DNActiveXControl read get_ActiveXControl;
    property Paths: DNShapePathCollection read get_Paths;
    property Geometry: DNGeometry read get_Geometry;
  end;

  TDNWebExtensionShape = class(TDNGenericImport<DNWebExtensionShapeClass, DNWebExtensionShape>) end;

  //-------------namespace: Aspose.Cells.Drawing----------------
  DNShapeFormatClass = interface(DDN.mscorlib.DNObjectClass)
  ['{5D2DED2B-3888-5322-BD6C-5ABFE26620D4}']
  end;

  [DNTypeName('Aspose.Cells.Drawing.ShapeFormat')]
  DNShapeFormat = interface(DDN.mscorlib.DNObject)
  ['{5B090DCB-D942-3ABF-B440-9AD5534B7DE2}']
  { getters & setters } 

    function get_FillFormat: DNFillFormat;
    function get_Fill: DNFillFormat;
    function get_Outline: DNLineFormat;
    function get_Line: DNLineFormat;
    function get_ShadowEffect: DNShadowEffect;
    function get_GlowEffect: DNGlowEffect;
    function get_SoftEdgeRadius: Double;
    procedure set_SoftEdgeRadius(value: Double);

  { methods } 

    procedure ClearGlowEffect;
    function HasGlowEffect: Boolean;
    function HasFormat3D: Boolean;
    procedure ClearFormat3D;
    procedure ClearShadowEffect;
    function HasShadowEffect: Boolean;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property FillFormat: DNFillFormat read get_FillFormat;
    property Fill: DNFillFormat read get_Fill;
    property Outline: DNLineFormat read get_Outline;
    property Line: DNLineFormat read get_Line;
    property ShadowEffect: DNShadowEffect read get_ShadowEffect;
    property GlowEffect: DNGlowEffect read get_GlowEffect;
    property SoftEdgeRadius: Double read get_SoftEdgeRadius write set_SoftEdgeRadius;
  end;

  TDNShapeFormat = class(TDNGenericImport<DNShapeFormatClass, DNShapeFormat>) end;

  //-------------namespace: Aspose.Cells.Drawing----------------
  DNShapeGuideClass = interface(DDN.mscorlib.DNObjectClass)
  ['{9982CCA9-7C3B-5C3D-A37E-1ACCC04E9374}']
  end;

  [DNTypeName('Aspose.Cells.Drawing.ShapeGuide')]
  DNShapeGuide = interface(DDN.mscorlib.DNObject)
  ['{DFB924B7-C6FD-3828-BB19-AED20E96B7B2}']
  { getters & setters } 

    function get_Value: Double;
    procedure set_Value(value: Double);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Value: Double read get_Value write set_Value;
  end;

  TDNShapeGuide = class(TDNGenericImport<DNShapeGuideClass, DNShapeGuide>) end;

  //-------------namespace: Aspose.Cells.Drawing----------------
  DNShapePathClass = interface(DDN.mscorlib.DNObjectClass)
  ['{21BD3EFB-0E7F-5758-825D-6417130922DA}']
  { constructors } 

    {class} function init: DNShapePath;

  end;

  [DNTypeName('Aspose.Cells.Drawing.ShapePath')]
  DNShapePath = interface(DDN.mscorlib.DNObject)
  ['{C5B9FE90-E5C0-3094-9FE7-989383DA1F77}']
  { getters & setters } 

    function get_PathSegementList: DNShapeSegmentPathCollection;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property PathSegementList: DNShapeSegmentPathCollection read get_PathSegementList;
  end;

  TDNShapePath = class(TDNGenericImport<DNShapePathClass, DNShapePath>) end;

  //-------------namespace: Aspose.Cells.Drawing----------------
  DNShapePathPointClass = interface(DDN.mscorlib.DNObjectClass)
  ['{220524E7-FF8B-56D7-93BE-907D420B052E}']
  end;

  [DNTypeName('Aspose.Cells.Drawing.ShapePathPoint')]
  DNShapePathPoint = interface(DDN.mscorlib.DNObject)
  ['{5D2217BC-CB83-3564-9617-684CC8591C61}']
  { getters & setters } 

    function get_X: Int32;
    procedure set_X(value: Int32);
    function get_Y: Int32;
    procedure set_Y(value: Int32);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property X: Int32 read get_X write set_X;
    property Y: Int32 read get_Y write set_Y;
  end;

  TDNShapePathPoint = class(TDNGenericImport<DNShapePathPointClass, DNShapePathPoint>) end;

  //-------------namespace: Aspose.Cells.Drawing----------------
  DNShapePropertyCollectionClass = interface(DDN.mscorlib.DNObjectClass)
  ['{AEF636CF-1229-5CF6-BB63-AE7F2DB500A9}']
  end;

  [DNTypeName('Aspose.Cells.Drawing.ShapePropertyCollection')]
  DNShapePropertyCollection = interface(DDN.mscorlib.DNObject)
  ['{C3EC0DCD-6E83-36DC-9086-CC96A31A5DFF}']
  { getters & setters } 

    function get_GlowEffect: DNGlowEffect;
    function get_Format3D: DNFormat3D;
    function get_SoftEdgeRadius: Double;
    procedure set_SoftEdgeRadius(value: Double);
    function get_ShadowEffect: DNShadowEffect;

  { methods } 

    procedure ClearGlowEffect;
    function HasGlowEffect: Boolean;
    function HasFormat3D: Boolean;
    procedure ClearFormat3D;
    procedure ClearShadowEffect;
    function HasShadowEffect: Boolean;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property GlowEffect: DNGlowEffect read get_GlowEffect;
    property Format3D: DNFormat3D read get_Format3D;
    property SoftEdgeRadius: Double read get_SoftEdgeRadius write set_SoftEdgeRadius;
    property ShadowEffect: DNShadowEffect read get_ShadowEffect;
  end;

  TDNShapePropertyCollection = class(TDNGenericImport<DNShapePropertyCollectionClass, DNShapePropertyCollection>) end;

  //-------------namespace: Aspose.Cells.Drawing----------------
  DNShapeSegmentPathClass = interface(DDN.mscorlib.DNObjectClass)
  ['{4A73D504-3C6B-5D9B-8171-F81C9004837A}']
  end;

  [DNTypeName('Aspose.Cells.Drawing.ShapeSegmentPath')]
  DNShapeSegmentPath = interface(DDN.mscorlib.DNObject)
  ['{88E7178F-838A-3446-955C-C0DDDC9FC837}']
  { getters & setters } 

    function get_Type: DNShapePathType;
    function get_Points: DNShapePathPointCollection;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property &Type: DNShapePathType read get_Type;
    property Points: DNShapePathPointCollection read get_Points;
  end;

  TDNShapeSegmentPath = class(TDNGenericImport<DNShapeSegmentPathClass, DNShapeSegmentPath>) end;

  //-------------namespace: Aspose.Cells.Drawing----------------
  DNSignatureLineClass = interface(DDN.mscorlib.DNObjectClass)
  ['{A0EC2D7E-EAF8-514A-BE7A-F47B22DA5FEC}']
  { constructors } 

    {class} function init: DNSignatureLine;

  end;

  [DNTypeName('Aspose.Cells.Drawing.SignatureLine')]
  DNSignatureLine = interface(DDN.mscorlib.DNObject)
  ['{62960CDF-3CFF-3BEE-8430-23547B123455}']
  { getters & setters } 

    function get_Id: DDN.mscorlib.DNGuid;
    procedure set_Id(value: DDN.mscorlib.DNGuid);
    function get_ProviderId: DDN.mscorlib.DNGuid;
    procedure set_ProviderId(value: DDN.mscorlib.DNGuid);
    function get_Signer: string;
    procedure set_Signer(value: string);
    function get_Title: string;
    procedure set_Title(value: string);
    function get_Email: string;
    procedure set_Email(value: string);
    function get_IsLine: Boolean;
    procedure set_IsLine(value: Boolean);
    function get_AllowComments: Boolean;
    procedure set_AllowComments(value: Boolean);
    function get_ShowSignedDate: Boolean;
    procedure set_ShowSignedDate(value: Boolean);
    function get_Instructions: string;
    procedure set_Instructions(value: string);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Id: DDN.mscorlib.DNGuid read get_Id write set_Id;
    property ProviderId: DDN.mscorlib.DNGuid read get_ProviderId write set_ProviderId;
    property Signer: string read get_Signer write set_Signer;
    property Title: string read get_Title write set_Title;
    property Email: string read get_Email write set_Email;
    property IsLine: Boolean read get_IsLine write set_IsLine;
    property AllowComments: Boolean read get_AllowComments write set_AllowComments;
    property ShowSignedDate: Boolean read get_ShowSignedDate write set_ShowSignedDate;
    property Instructions: string read get_Instructions write set_Instructions;
  end;

  TDNSignatureLine = class(TDNGenericImport<DNSignatureLineClass, DNSignatureLine>) end;

  //-------------namespace: Aspose.Cells.Drawing----------------
  DNTextEffectFormatClass = interface(DDN.mscorlib.DNObjectClass)
  ['{BD9793F9-4361-5D7A-9ABD-07BD712A9B1E}']
  end;

  [DNTypeName('Aspose.Cells.Drawing.TextEffectFormat')]
  DNTextEffectFormat = interface(DDN.mscorlib.DNObject)
  ['{04D48D64-E80B-35F4-96BC-4506DA46CD21}']
  { getters & setters } 

    function get_Text: string;
    procedure set_Text(value: string);
    function get_FontName: string;
    procedure set_FontName(value: string);
    function get_FontBold: Boolean;
    procedure set_FontBold(value: Boolean);
    function get_FontItalic: Boolean;
    procedure set_FontItalic(value: Boolean);
    function get_RotatedChars: Boolean;
    procedure set_RotatedChars(value: Boolean);
    function get_FontSize: Int32;
    procedure set_FontSize(value: Int32);
    function get_PresetShape: DNMsoPresetTextEffectShape;
    procedure set_PresetShape(value: DNMsoPresetTextEffectShape);

  { methods } 

    procedure SetTextEffect(effect: DNMsoPresetTextEffect);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Text: string read get_Text write set_Text;
    property FontName: string read get_FontName write set_FontName;
    property FontBold: Boolean read get_FontBold write set_FontBold;
    property FontItalic: Boolean read get_FontItalic write set_FontItalic;
    property RotatedChars: Boolean read get_RotatedChars write set_RotatedChars;
    property FontSize: Int32 read get_FontSize write set_FontSize;
    property PresetShape: DNMsoPresetTextEffectShape read get_PresetShape write set_PresetShape;
  end;

  TDNTextEffectFormat = class(TDNGenericImport<DNTextEffectFormatClass, DNTextEffectFormat>) end;

  //-------------namespace: Aspose.Cells.Drawing.Texts----------------
  DNBulletClass = interface(DDN.mscorlib.DNObjectClass)
  ['{5DF7B401-9451-58CC-8773-973C158E1656}']
  end;

  [DNTypeName('Aspose.Cells.Drawing.Texts.Bullet')]
  DNBullet = interface(DDN.mscorlib.DNObject)
  ['{D10575C6-7C13-3C3A-99DE-A6A67F6D42B2}']
  { getters & setters } 

    function get_BulletValue: DNBulletValue;
    function get_Type: DNBulletType;
    procedure set_Type(value: DNBulletType);
    function get_FontName: string;
    procedure set_FontName(value: string);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property BulletValue: DNBulletValue read get_BulletValue;
    property &Type: DNBulletType read get_Type write set_Type;
    property FontName: string read get_FontName write set_FontName;
  end;

  TDNBullet = class(TDNGenericImport<DNBulletClass, DNBullet>) end;

  //-------------namespace: Aspose.Cells.Drawing.Texts----------------
  DNBulletValueClass = interface(DDN.mscorlib.DNObjectClass)
  ['{25CE51FB-E064-5410-BD78-73F69D37122E}']
  end;

  [DNTypeName('Aspose.Cells.Drawing.Texts.BulletValue')]
  DNBulletValue = interface(DDN.mscorlib.DNObject)
  ['{46B16A67-5996-3F74-A5ED-EBC8244653D2}']
  { getters & setters } 

    function get_Type: DNBulletType;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property &Type: DNBulletType read get_Type;
  end;

  TDNBulletValue = class(TDNGenericImport<DNBulletValueClass, DNBulletValue>) end;

  //-------------namespace: Aspose.Cells.Drawing.Texts----------------
  DNAutoNumberedBulletValueClass = interface(DNBulletValueClass)
  ['{7A9A31A1-092F-5CCF-BB6E-1C4629FE3942}']
  { constructors } 

    {class} function init: DNAutoNumberedBulletValue;

  end;

  [DNTypeName('Aspose.Cells.Drawing.Texts.AutoNumberedBulletValue')]
  DNAutoNumberedBulletValue = interface(DNBulletValue)
  ['{DBE0BF6D-FBC6-347A-9A0A-8544C963D85D}']
  { getters & setters } 

    function get_Type: DNBulletType;
    function get_StartAt: Int32;
    procedure set_StartAt(value: Int32);
    function get_AutonumberScheme: DNTextAutonumberScheme;
    procedure set_AutonumberScheme(value: DNTextAutonumberScheme);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property &Type: DNBulletType read get_Type;
    property StartAt: Int32 read get_StartAt write set_StartAt;
    property AutonumberScheme: DNTextAutonumberScheme read get_AutonumberScheme write set_AutonumberScheme;
  end;

  TDNAutoNumberedBulletValue = class(TDNGenericImport<DNAutoNumberedBulletValueClass, DNAutoNumberedBulletValue>) end;

  //-------------namespace: Aspose.Cells.Drawing.Texts----------------
  DNCharacterBulletValueClass = interface(DNBulletValueClass)
  ['{43C2C645-F24B-5829-B60F-58670EE2C021}']
  { constructors } 

    {class} function init: DNCharacterBulletValue;

  end;

  [DNTypeName('Aspose.Cells.Drawing.Texts.CharacterBulletValue')]
  DNCharacterBulletValue = interface(DNBulletValue)
  ['{C4E17A31-ABBA-3A86-BC7D-21FB252F6BDF}']
  { getters & setters } 

    function get_Type: DNBulletType;
    function get_Character: Char;
    procedure set_Character(value: Char);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property &Type: DNBulletType read get_Type;
    property Character: Char read get_Character write set_Character;
  end;

  TDNCharacterBulletValue = class(TDNGenericImport<DNCharacterBulletValueClass, DNCharacterBulletValue>) end;

  //-------------namespace: Aspose.Cells.Drawing.Texts----------------
  DNNoneBulletValueClass = interface(DNBulletValueClass)
  ['{6B608588-BDDC-5BB1-BE58-C732E5153DB5}']
  { constructors } 

    {class} function init: DNNoneBulletValue;

  end;

  [DNTypeName('Aspose.Cells.Drawing.Texts.NoneBulletValue')]
  DNNoneBulletValue = interface(DNBulletValue)
  ['{6466CA0B-0B60-30D7-96E4-1B6D3163B81D}']
  { getters & setters } 

    function get_Type: DNBulletType;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property &Type: DNBulletType read get_Type;
  end;

  TDNNoneBulletValue = class(TDNGenericImport<DNNoneBulletValueClass, DNNoneBulletValue>) end;

  //-------------namespace: Aspose.Cells.Drawing.Texts----------------
  DNPictureBulletValueClass = interface(DNBulletValueClass)
  ['{C872B370-01F1-53F8-874D-C1664244CCD0}']
  { constructors } 

    {class} function init: DNPictureBulletValue;

  end;

  [DNTypeName('Aspose.Cells.Drawing.Texts.PictureBulletValue')]
  DNPictureBulletValue = interface(DNBulletValue)
  ['{D1B1AA99-4EC6-3643-9740-5AAD3DC106FB}']
  { getters & setters } 

    function get_Type: DNBulletType;
    function get_ImageData: TArray<Byte>;
    procedure set_ImageData(value: TArray<Byte>);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property &Type: DNBulletType read get_Type;
    property ImageData: TArray<Byte> read get_ImageData write set_ImageData;
  end;

  TDNPictureBulletValue = class(TDNGenericImport<DNPictureBulletValueClass, DNPictureBulletValue>) end;

  //-------------namespace: Aspose.Cells.Drawing.Texts----------------
  DNShapeTextAlignmentClass = interface(DDN.mscorlib.DNObjectClass)
  ['{360EB745-CA99-557C-B4E2-7F9F1AF0B381}']
  end;

  [DNTypeName('Aspose.Cells.Drawing.Texts.ShapeTextAlignment')]
  DNShapeTextAlignment = interface(DDN.mscorlib.DNObject)
  ['{C56CEE06-325B-3808-BD14-993E0C715A4F}']
  { getters & setters } 

    function get_IsTextWrapped: Boolean;
    procedure set_IsTextWrapped(value: Boolean);
    function get_RotateTextWithShape: Boolean;
    procedure set_RotateTextWithShape(value: Boolean);
    function get_TextVerticalOverflow: DNTextOverflowType;
    procedure set_TextVerticalOverflow(value: DNTextOverflowType);
    function get_TextHorizontalOverflow: DNTextOverflowType;
    procedure set_TextHorizontalOverflow(value: DNTextOverflowType);
    function get_RotationAngle: Double;
    procedure set_RotationAngle(value: Double);
    function get_TextVerticalType: DNTextVerticalType;
    procedure set_TextVerticalType(value: DNTextVerticalType);
    function get_AutoSize: Boolean;
    procedure set_AutoSize(value: Boolean);
    function get_TextShapeType: DNAutoShapeType;
    procedure set_TextShapeType(value: DNAutoShapeType);
    function get_TopMarginPt: Double;
    procedure set_TopMarginPt(value: Double);
    function get_BottomMarginPt: Double;
    procedure set_BottomMarginPt(value: Double);
    function get_LeftMarginPt: Double;
    procedure set_LeftMarginPt(value: Double);
    function get_RightMarginPt: Double;
    procedure set_RightMarginPt(value: Double);
    function get_IsAutoMargin: Boolean;
    procedure set_IsAutoMargin(value: Boolean);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property IsTextWrapped: Boolean read get_IsTextWrapped write set_IsTextWrapped;
    property RotateTextWithShape: Boolean read get_RotateTextWithShape write set_RotateTextWithShape;
    property TextVerticalOverflow: DNTextOverflowType read get_TextVerticalOverflow write set_TextVerticalOverflow;
    property TextHorizontalOverflow: DNTextOverflowType read get_TextHorizontalOverflow write set_TextHorizontalOverflow;
    property RotationAngle: Double read get_RotationAngle write set_RotationAngle;
    property TextVerticalType: DNTextVerticalType read get_TextVerticalType write set_TextVerticalType;
    property AutoSize: Boolean read get_AutoSize write set_AutoSize;
    property TextShapeType: DNAutoShapeType read get_TextShapeType write set_TextShapeType;
    property TopMarginPt: Double read get_TopMarginPt write set_TopMarginPt;
    property BottomMarginPt: Double read get_BottomMarginPt write set_BottomMarginPt;
    property LeftMarginPt: Double read get_LeftMarginPt write set_LeftMarginPt;
    property RightMarginPt: Double read get_RightMarginPt write set_RightMarginPt;
    property IsAutoMargin: Boolean read get_IsAutoMargin write set_IsAutoMargin;
  end;

  TDNShapeTextAlignment = class(TDNGenericImport<DNShapeTextAlignmentClass, DNShapeTextAlignment>) end;

  //-------------namespace: Aspose.Cells.Drawing.Texts----------------
  DNTextParagraphCollectionClass = interface(DDN.mscorlib.DNObjectClass)
  ['{4F26C2BA-76CC-5275-94EA-B3FA9F9A2D4C}']
  end;

  [DNTypeName('Aspose.Cells.Drawing.Texts.TextParagraphCollection')]
  DNTextParagraphCollection = interface(DDN.mscorlib.DNObject)
  ['{217E4EAD-BD1F-3969-BC3A-D19801A8E282}']
  { getters & setters } 

    function get_Count: Int32;
    function get_Item(index: Int32): DNTextParagraph;

  { methods } 

    function GetEnumerator: DDN.mscorlib.DNIEnumerator;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Count: Int32 read get_Count;
    property Item[index: Int32]: DNTextParagraph read get_Item; default;
  end;

  TDNTextParagraphCollection = class(TDNGenericImport<DNTextParagraphCollectionClass, DNTextParagraphCollection>) end;

  //-------------namespace: Aspose.Cells.Drawing.Texts----------------
  DNTextTabStopClass = interface(DDN.mscorlib.DNObjectClass)
  ['{448D70B2-8E24-56FD-8541-EF35C2AF417A}']
  end;

  [DNTypeName('Aspose.Cells.Drawing.Texts.TextTabStop')]
  DNTextTabStop = interface(DDN.mscorlib.DNObject)
  ['{7752B05F-FDDE-3CA9-A0D1-05E1C29F9EF3}']
  { getters & setters } 

    function get_TabAlignment: DNTextTabAlignmentType;
    procedure set_TabAlignment(value: DNTextTabAlignmentType);
    function get_TabPosition: Double;
    procedure set_TabPosition(value: Double);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property TabAlignment: DNTextTabAlignmentType read get_TabAlignment write set_TabAlignment;
    property TabPosition: Double read get_TabPosition write set_TabPosition;
  end;

  TDNTextTabStop = class(TDNGenericImport<DNTextTabStopClass, DNTextTabStop>) end;

  //-------------namespace: Aspose.Cells.Drawing----------------
  DNThreeDFormatClass = interface(DDN.mscorlib.DNObjectClass)
  ['{0D238BF5-EC94-5B14-A898-A81A9605F35B}']
  end;

  [DNTypeName('Aspose.Cells.Drawing.ThreeDFormat')]
  DNThreeDFormat = interface(DDN.mscorlib.DNObject)
  ['{24D66952-33BB-3A72-B026-19771E68FE38}']
  { getters & setters } 

    function get_BottomBevelWidth: Double;
    procedure set_BottomBevelWidth(value: Double);
    function get_BottomBevelHeight: Double;
    procedure set_BottomBevelHeight(value: Double);
    function get_BottomBevelType: DNBevelType;
    procedure set_BottomBevelType(value: DNBevelType);
    function get_TopBevelWidth: Double;
    procedure set_TopBevelWidth(value: Double);
    function get_TopBevelHeight: Double;
    procedure set_TopBevelHeight(value: Double);
    function get_TopBevelType: DNBevelType;
    procedure set_TopBevelType(value: DNBevelType);
    function get_Material: DNPresetMaterialType;
    procedure set_Material(value: DNPresetMaterialType);
    function get_ContourColor: DNCellsColor;
    procedure set_ContourColor(value: DNCellsColor);
    function get_ContourWidth: Double;
    procedure set_ContourWidth(value: Double);
    function get_ExtrusionColor: DNCellsColor;
    procedure set_ExtrusionColor(value: DNCellsColor);
    function get_ExtrusionHeight: Double;
    procedure set_ExtrusionHeight(value: Double);
    function get_Z: Double;
    procedure set_Z(value: Double);
    function get_LightAngle: Double;
    procedure set_LightAngle(value: Double);
    function get_Lighting: DNLightRigType;
    procedure set_Lighting(value: DNLightRigType);
    function get_LightingDirection: DNLightRigDirectionType;
    procedure set_LightingDirection(value: DNLightRigDirectionType);
    function get_Perspective: Double;
    procedure set_Perspective(value: Double);
    function get_RotationX: Double;
    procedure set_RotationX(value: Double);
    function get_RotationY: Double;
    procedure set_RotationY(value: Double);
    function get_RotationZ: Double;
    procedure set_RotationZ(value: Double);
    function get_PresetCameraType: DNPresetCameraType;
    procedure set_PresetCameraType(value: DNPresetCameraType);

  { methods } 

    function GetHashCode: Int32;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property BottomBevelWidth: Double read get_BottomBevelWidth write set_BottomBevelWidth;
    property BottomBevelHeight: Double read get_BottomBevelHeight write set_BottomBevelHeight;
    property BottomBevelType: DNBevelType read get_BottomBevelType write set_BottomBevelType;
    property TopBevelWidth: Double read get_TopBevelWidth write set_TopBevelWidth;
    property TopBevelHeight: Double read get_TopBevelHeight write set_TopBevelHeight;
    property TopBevelType: DNBevelType read get_TopBevelType write set_TopBevelType;
    property Material: DNPresetMaterialType read get_Material write set_Material;
    property ContourColor: DNCellsColor read get_ContourColor write set_ContourColor;
    property ContourWidth: Double read get_ContourWidth write set_ContourWidth;
    property ExtrusionColor: DNCellsColor read get_ExtrusionColor write set_ExtrusionColor;
    property ExtrusionHeight: Double read get_ExtrusionHeight write set_ExtrusionHeight;
    property Z: Double read get_Z write set_Z;
    property LightAngle: Double read get_LightAngle write set_LightAngle;
    property Lighting: DNLightRigType read get_Lighting write set_Lighting;
    property LightingDirection: DNLightRigDirectionType read get_LightingDirection write set_LightingDirection;
    property Perspective: Double read get_Perspective write set_Perspective;
    property RotationX: Double read get_RotationX write set_RotationX;
    property RotationY: Double read get_RotationY write set_RotationY;
    property RotationZ: Double read get_RotationZ write set_RotationZ;
    property PresetCameraType: DNPresetCameraType read get_PresetCameraType write set_PresetCameraType;
  end;

  TDNThreeDFormat = class(TDNGenericImport<DNThreeDFormatClass, DNThreeDFormat>) end;

  //-------------namespace: Aspose.Cells.Drawing----------------
  DNTilePicOptionClass = interface(DDN.mscorlib.DNObjectClass)
  ['{4C54BECD-65F2-5BF5-935B-0A4C35A9BABD}']
  { constructors } 

    {class} function init: DNTilePicOption;

  end;

  [DNTypeName('Aspose.Cells.Drawing.TilePicOption')]
  DNTilePicOption = interface(DDN.mscorlib.DNObject)
  ['{7EA9E482-B0BF-3648-9E2E-18481AECC5B8}']
  { getters & setters } 

    function get_OffsetX: Double;
    procedure set_OffsetX(value: Double);
    function get_OffsetY: Double;
    procedure set_OffsetY(value: Double);
    function get_ScaleX: Double;
    procedure set_ScaleX(value: Double);
    function get_ScaleY: Double;
    procedure set_ScaleY(value: Double);
    function get_MirrorType: DNMirrorType;
    procedure set_MirrorType(value: DNMirrorType);
    function get_AlignmentType: DNRectangleAlignmentType;
    procedure set_AlignmentType(value: DNRectangleAlignmentType);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property OffsetX: Double read get_OffsetX write set_OffsetX;
    property OffsetY: Double read get_OffsetY write set_OffsetY;
    property ScaleX: Double read get_ScaleX write set_ScaleX;
    property ScaleY: Double read get_ScaleY write set_ScaleY;
    property MirrorType: DNMirrorType read get_MirrorType write set_MirrorType;
    property AlignmentType: DNRectangleAlignmentType read get_AlignmentType write set_AlignmentType;
  end;

  TDNTilePicOption = class(TDNGenericImport<DNTilePicOptionClass, DNTilePicOption>) end;

  //-------------namespace: Aspose.Cells----------------
  DNDynamicFilterClass = interface(DDN.mscorlib.DNObjectClass)
  ['{32113029-E8EE-5D63-A95C-225D542751E5}']
  end;

  [DNTypeName('Aspose.Cells.DynamicFilter')]
  DNDynamicFilter = interface(DDN.mscorlib.DNObject)
  ['{AEE1559C-5CB3-35EC-93C8-B9AD783DA98F}']
  { getters & setters } 

    function get_DynamicFilterType: DNDynamicFilterType;
    procedure set_DynamicFilterType(value: DNDynamicFilterType);
    function get_Value: DDN.mscorlib.DNObject;
    procedure set_Value(value: DDN.mscorlib.DNObject);
    function get_MaxValue: DDN.mscorlib.DNObject;
    procedure set_MaxValue(value: DDN.mscorlib.DNObject);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property DynamicFilterType: DNDynamicFilterType read get_DynamicFilterType write set_DynamicFilterType;
    property Value: DDN.mscorlib.DNObject read get_Value write set_Value;
    property MaxValue: DDN.mscorlib.DNObject read get_MaxValue write set_MaxValue;
  end;

  TDNDynamicFilter = class(TDNGenericImport<DNDynamicFilterClass, DNDynamicFilter>) end;

  //-------------namespace: Aspose.Cells----------------
  DNErrorCheckOptionClass = interface(DDN.mscorlib.DNObjectClass)
  ['{F9DA1A3C-A6B9-5172-9D2E-BCB0C01D8F38}']
  end;

  [DNTypeName('Aspose.Cells.ErrorCheckOption')]
  DNErrorCheckOption = interface(DDN.mscorlib.DNObject)
  ['{9B4B6556-4674-3D28-9E91-0C02DE222D17}']
  { methods } 

    function IsErrorCheck(errorCheckType: DNErrorCheckType): Boolean;
    procedure SetErrorCheck(errorCheckType: DNErrorCheckType; isCheck: Boolean);
    function GetCountOfRange: Int32;
    function AddRange(ca: DNCellArea): Int32;
    function GetRange(index: Int32): DNCellArea;
    procedure RemoveRange(index: Int32);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNErrorCheckOption = class(TDNGenericImport<DNErrorCheckOptionClass, DNErrorCheckOption>) end;

  //-------------namespace: Aspose.Cells----------------
  DNExportObjectEventClass = interface(DDN.mscorlib.DNObjectClass)
  ['{921C23EA-FCB3-570F-BE3A-2CD4F9EF4749}']
  end;

  [DNTypeName('Aspose.Cells.ExportObjectEvent')]
  DNExportObjectEvent = interface(DDN.mscorlib.DNObject)
  ['{2E94A7D1-7F47-3C9D-89A0-FB0113F83715}']
  { methods } 

    function GetSource: DDN.mscorlib.DNObject;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNExportObjectEvent = class(TDNGenericImport<DNExportObjectEventClass, DNExportObjectEvent>) end;

  //-------------namespace: Aspose.Cells----------------
  DNExportTableOptionsClass = interface(DDN.mscorlib.DNObjectClass)
  ['{2CC04435-59FC-59CC-91C7-ED5812B558B8}']
  { constructors } 

    {class} function init: DNExportTableOptions;

  end;

  [DNTypeName('Aspose.Cells.ExportTableOptions')]
  DNExportTableOptions = interface(DDN.mscorlib.DNObject)
  ['{2E35ABE2-CDC0-3A4B-9D7A-DA5D3568E375}']
  { getters & setters } 

    function get_DataTable: DDN.System.Data.DNDataTable;
    procedure set_DataTable(value: DDN.System.Data.DNDataTable);
    function get_ExportColumnName: Boolean;
    procedure set_ExportColumnName(value: Boolean);
    function get_SkipErrorValue: Boolean;
    procedure set_SkipErrorValue(value: Boolean);
    function get_PlotVisibleCells: Boolean;
    procedure set_PlotVisibleCells(value: Boolean);
    function get_PlotVisibleRows: Boolean;
    procedure set_PlotVisibleRows(value: Boolean);
    function get_PlotVisibleColumns: Boolean;
    procedure set_PlotVisibleColumns(value: Boolean);
    function get_ExportAsString: Boolean;
    procedure set_ExportAsString(value: Boolean);
    function get_ExportAsHtmlString: Boolean;
    procedure set_ExportAsHtmlString(value: Boolean);
    function get_FormatStrategy: DNCellValueFormatStrategy;
    procedure set_FormatStrategy(value: DNCellValueFormatStrategy);
    function get_CheckMixedValueType: Boolean;
    procedure set_CheckMixedValueType(value: Boolean);
    function get_IsVertical: Boolean;
    procedure set_IsVertical(value: Boolean);
    function get_Indexes: TArray<Int32>;
    procedure set_Indexes(value: TArray<Int32>);
    function get_RenameStrategy: DNRenameStrategy;
    procedure set_RenameStrategy(value: DNRenameStrategy);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property DataTable: DDN.System.Data.DNDataTable read get_DataTable write set_DataTable;
    property ExportColumnName: Boolean read get_ExportColumnName write set_ExportColumnName;
    property SkipErrorValue: Boolean read get_SkipErrorValue write set_SkipErrorValue;
    property PlotVisibleCells: Boolean read get_PlotVisibleCells write set_PlotVisibleCells;
    property PlotVisibleRows: Boolean read get_PlotVisibleRows write set_PlotVisibleRows;
    property PlotVisibleColumns: Boolean read get_PlotVisibleColumns write set_PlotVisibleColumns;
    property ExportAsString: Boolean read get_ExportAsString write set_ExportAsString;
    property ExportAsHtmlString: Boolean read get_ExportAsHtmlString write set_ExportAsHtmlString;
    property FormatStrategy: DNCellValueFormatStrategy read get_FormatStrategy write set_FormatStrategy;
    property CheckMixedValueType: Boolean read get_CheckMixedValueType write set_CheckMixedValueType;
    property IsVertical: Boolean read get_IsVertical write set_IsVertical;
    property Indexes: TArray<Int32> read get_Indexes write set_Indexes;
    property RenameStrategy: DNRenameStrategy read get_RenameStrategy write set_RenameStrategy;
  end;

  TDNExportTableOptions = class(TDNGenericImport<DNExportTableOptionsClass, DNExportTableOptions>) end;

  //-------------namespace: Aspose.Cells.ExternalConnections----------------
  DNConnectionParameterClass = interface(DDN.mscorlib.DNObjectClass)
  ['{D73CAC85-0882-5F16-8B6A-0DA82C30868D}']
  end;

  [DNTypeName('Aspose.Cells.ExternalConnections.ConnectionParameter')]
  DNConnectionParameter = interface(DDN.mscorlib.DNObject)
  ['{F192CDCE-A3F6-315D-8383-94C5A840CDCE}']
  { getters & setters } 

    function get_SqlType: DNSqlDataType;
    procedure set_SqlType(value: DNSqlDataType);
    function get_RefreshOnChange: Boolean;
    procedure set_RefreshOnChange(value: Boolean);
    function get_Prompt: string;
    procedure set_Prompt(value: string);
    function get_Type: DNConnectionParameterType;
    procedure set_Type(value: DNConnectionParameterType);
    function get_Name: string;
    procedure set_Name(value: string);
    function get_CellReference: string;
    procedure set_CellReference(value: string);
    function get_Value: DDN.mscorlib.DNObject;
    procedure set_Value(value: DDN.mscorlib.DNObject);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property SqlType: DNSqlDataType read get_SqlType write set_SqlType;
    property RefreshOnChange: Boolean read get_RefreshOnChange write set_RefreshOnChange;
    property Prompt: string read get_Prompt write set_Prompt;
    property &Type: DNConnectionParameterType read get_Type write set_Type;
    property Name: string read get_Name write set_Name;
    property CellReference: string read get_CellReference write set_CellReference;
    property Value: DDN.mscorlib.DNObject read get_Value write set_Value;
  end;

  TDNConnectionParameter = class(TDNGenericImport<DNConnectionParameterClass, DNConnectionParameter>) end;

  //-------------namespace: Aspose.Cells.ExternalConnections----------------
  DNExternalConnectionClass = interface(DDN.mscorlib.DNObjectClass)
  ['{57CD5540-7333-5C94-89C7-732EC9A9C09F}']
  end;

  [DNTypeName('Aspose.Cells.ExternalConnections.ExternalConnection')]
  DNExternalConnection = interface(DDN.mscorlib.DNObject)
  ['{5781272A-C69C-3400-A6AB-95FB0041EC83}']
  { getters & setters } 

    function get_Id: Int32;
    function get_PowerQueryFormula: DNPowerQueryFormula;
    function get_Type: DNConnectionDataSourceType;
    procedure set_Type(value: DNConnectionDataSourceType);
    function get_SourceFile: string;
    procedure set_SourceFile(value: string);
    function get_SSOId: string;
    procedure set_SSOId(value: string);
    function get_SavePassword: Boolean;
    procedure set_SavePassword(value: Boolean);
    function get_SaveData: Boolean;
    procedure set_SaveData(value: Boolean);
    function get_RefreshOnLoad: Boolean;
    procedure set_RefreshOnLoad(value: Boolean);
    function get_ReconnectionMethodType: DNReConnectionMethodType;
    procedure set_ReconnectionMethodType(value: DNReConnectionMethodType);
    function get_ReconnectionMethod: DNReConnectionMethodType;
    procedure set_ReconnectionMethod(value: DNReConnectionMethodType);
    function get_OnlyUseConnectionFile: Boolean;
    procedure set_OnlyUseConnectionFile(value: Boolean);
    function get_OdcFile: string;
    procedure set_OdcFile(value: string);
    function get_IsNew: Boolean;
    procedure set_IsNew(value: Boolean);
    function get_Name: string;
    procedure set_Name(value: string);
    function get_KeepAlive: Boolean;
    procedure set_KeepAlive(value: Boolean);
    function get_RefreshInternal: Int32;
    procedure set_RefreshInternal(value: Int32);
    function get_ConnectionId: Int32;
    function get_ConnectionDescription: string;
    procedure set_ConnectionDescription(value: string);
    function get_IsDeleted: Boolean;
    procedure set_IsDeleted(value: Boolean);
    function get_CredentialsMethodType: DNCredentialsMethodType;
    procedure set_CredentialsMethodType(value: DNCredentialsMethodType);
    function get_Credentials: DNCredentialsMethodType;
    procedure set_Credentials(value: DNCredentialsMethodType);
    function get_BackgroundRefresh: Boolean;
    procedure set_BackgroundRefresh(value: Boolean);
    function get_Parameters: DNConnectionParameterCollection;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Id: Int32 read get_Id;
    property PowerQueryFormula: DNPowerQueryFormula read get_PowerQueryFormula;
    property &Type: DNConnectionDataSourceType read get_Type write set_Type;
    property SourceFile: string read get_SourceFile write set_SourceFile;
    property SSOId: string read get_SSOId write set_SSOId;
    property SavePassword: Boolean read get_SavePassword write set_SavePassword;
    property SaveData: Boolean read get_SaveData write set_SaveData;
    property RefreshOnLoad: Boolean read get_RefreshOnLoad write set_RefreshOnLoad;
    property ReconnectionMethodType: DNReConnectionMethodType read get_ReconnectionMethodType write set_ReconnectionMethodType;
    property ReconnectionMethod: DNReConnectionMethodType read get_ReconnectionMethod write set_ReconnectionMethod;
    property OnlyUseConnectionFile: Boolean read get_OnlyUseConnectionFile write set_OnlyUseConnectionFile;
    property OdcFile: string read get_OdcFile write set_OdcFile;
    property IsNew: Boolean read get_IsNew write set_IsNew;
    property Name: string read get_Name write set_Name;
    property KeepAlive: Boolean read get_KeepAlive write set_KeepAlive;
    property RefreshInternal: Int32 read get_RefreshInternal write set_RefreshInternal;
    property ConnectionId: Int32 read get_ConnectionId;
    property ConnectionDescription: string read get_ConnectionDescription write set_ConnectionDescription;
    property IsDeleted: Boolean read get_IsDeleted write set_IsDeleted;
    property CredentialsMethodType: DNCredentialsMethodType read get_CredentialsMethodType write set_CredentialsMethodType;
    property Credentials: DNCredentialsMethodType read get_Credentials write set_Credentials;
    property BackgroundRefresh: Boolean read get_BackgroundRefresh write set_BackgroundRefresh;
    property Parameters: DNConnectionParameterCollection read get_Parameters;
  end;

  TDNExternalConnection = class(TDNGenericImport<DNExternalConnectionClass, DNExternalConnection>) end;

  //-------------namespace: Aspose.Cells.ExternalConnections----------------
  DNDBConnectionClass = interface(DNExternalConnectionClass)
  ['{C87D136B-A251-5822-A9A1-AEB718B7409C}']
  end;

  [DNTypeName('Aspose.Cells.ExternalConnections.DBConnection')]
  DNDBConnection = interface(DNExternalConnection)
  ['{E91C91C3-46D3-39FC-8422-AEEF171BD964}']
  { getters & setters } 

    function get_ConnectionInfo: string;
    procedure set_ConnectionInfo(value: string);
    function get_PowerQueryFormula: DNPowerQueryFormula;
    function get_CommandType: DNOLEDBCommandType;
    procedure set_CommandType(value: DNOLEDBCommandType);
    function get_Command: string;
    procedure set_Command(value: string);
    function get_SeverCommand: string;
    procedure set_SeverCommand(value: string);
    function get_Id: Int32;
    function get_Type: DNConnectionDataSourceType;
    procedure set_Type(value: DNConnectionDataSourceType);
    function get_SourceFile: string;
    procedure set_SourceFile(value: string);
    function get_SSOId: string;
    procedure set_SSOId(value: string);
    function get_SavePassword: Boolean;
    procedure set_SavePassword(value: Boolean);
    function get_SaveData: Boolean;
    procedure set_SaveData(value: Boolean);
    function get_RefreshOnLoad: Boolean;
    procedure set_RefreshOnLoad(value: Boolean);
    function get_ReconnectionMethodType: DNReConnectionMethodType;
    procedure set_ReconnectionMethodType(value: DNReConnectionMethodType);
    function get_ReconnectionMethod: DNReConnectionMethodType;
    procedure set_ReconnectionMethod(value: DNReConnectionMethodType);
    function get_OnlyUseConnectionFile: Boolean;
    procedure set_OnlyUseConnectionFile(value: Boolean);
    function get_OdcFile: string;
    procedure set_OdcFile(value: string);
    function get_IsNew: Boolean;
    procedure set_IsNew(value: Boolean);
    function get_Name: string;
    procedure set_Name(value: string);
    function get_KeepAlive: Boolean;
    procedure set_KeepAlive(value: Boolean);
    function get_RefreshInternal: Int32;
    procedure set_RefreshInternal(value: Int32);
    function get_ConnectionId: Int32;
    function get_ConnectionDescription: string;
    procedure set_ConnectionDescription(value: string);
    function get_IsDeleted: Boolean;
    procedure set_IsDeleted(value: Boolean);
    function get_CredentialsMethodType: DNCredentialsMethodType;
    procedure set_CredentialsMethodType(value: DNCredentialsMethodType);
    function get_Credentials: DNCredentialsMethodType;
    procedure set_Credentials(value: DNCredentialsMethodType);
    function get_BackgroundRefresh: Boolean;
    procedure set_BackgroundRefresh(value: Boolean);
    function get_Parameters: DNConnectionParameterCollection;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property ConnectionInfo: string read get_ConnectionInfo write set_ConnectionInfo;
    property PowerQueryFormula: DNPowerQueryFormula read get_PowerQueryFormula;
    property CommandType: DNOLEDBCommandType read get_CommandType write set_CommandType;
    property Command: string read get_Command write set_Command;
    property SeverCommand: string read get_SeverCommand write set_SeverCommand;
    property Id: Int32 read get_Id;
    property &Type: DNConnectionDataSourceType read get_Type write set_Type;
    property SourceFile: string read get_SourceFile write set_SourceFile;
    property SSOId: string read get_SSOId write set_SSOId;
    property SavePassword: Boolean read get_SavePassword write set_SavePassword;
    property SaveData: Boolean read get_SaveData write set_SaveData;
    property RefreshOnLoad: Boolean read get_RefreshOnLoad write set_RefreshOnLoad;
    property ReconnectionMethodType: DNReConnectionMethodType read get_ReconnectionMethodType write set_ReconnectionMethodType;
    property ReconnectionMethod: DNReConnectionMethodType read get_ReconnectionMethod write set_ReconnectionMethod;
    property OnlyUseConnectionFile: Boolean read get_OnlyUseConnectionFile write set_OnlyUseConnectionFile;
    property OdcFile: string read get_OdcFile write set_OdcFile;
    property IsNew: Boolean read get_IsNew write set_IsNew;
    property Name: string read get_Name write set_Name;
    property KeepAlive: Boolean read get_KeepAlive write set_KeepAlive;
    property RefreshInternal: Int32 read get_RefreshInternal write set_RefreshInternal;
    property ConnectionId: Int32 read get_ConnectionId;
    property ConnectionDescription: string read get_ConnectionDescription write set_ConnectionDescription;
    property IsDeleted: Boolean read get_IsDeleted write set_IsDeleted;
    property CredentialsMethodType: DNCredentialsMethodType read get_CredentialsMethodType write set_CredentialsMethodType;
    property Credentials: DNCredentialsMethodType read get_Credentials write set_Credentials;
    property BackgroundRefresh: Boolean read get_BackgroundRefresh write set_BackgroundRefresh;
    property Parameters: DNConnectionParameterCollection read get_Parameters;
  end;

  TDNDBConnection = class(TDNGenericImport<DNDBConnectionClass, DNDBConnection>) end;

  //-------------namespace: Aspose.Cells.ExternalConnections----------------
  DNWebQueryConnectionClass = interface(DNExternalConnectionClass)
  ['{6E5695E8-E040-570C-94D3-8F312D86B530}']
  end;

  [DNTypeName('Aspose.Cells.ExternalConnections.WebQueryConnection')]
  DNWebQueryConnection = interface(DNExternalConnection)
  ['{19994CAD-EC38-37D5-9931-DF32298C65B2}']
  { getters & setters } 

    function get_IsXml: Boolean;
    procedure set_IsXml(value: Boolean);
    function get_IsXl97: Boolean;
    procedure set_IsXl97(value: Boolean);
    function get_IsXl2000: Boolean;
    procedure set_IsXl2000(value: Boolean);
    function get_Url: string;
    procedure set_Url(value: string);
    function get_IsTextDates: Boolean;
    procedure set_IsTextDates(value: Boolean);
    function get_IsXmlSourceData: Boolean;
    procedure set_IsXmlSourceData(value: Boolean);
    function get_Post: string;
    procedure set_Post(value: string);
    function get_IsParsePre: Boolean;
    procedure set_IsParsePre(value: Boolean);
    function get_IsHtmlTables: Boolean;
    procedure set_IsHtmlTables(value: Boolean);
    function get_HtmlFormat: DNHtmlFormatHandlingType;
    procedure set_HtmlFormat(value: DNHtmlFormatHandlingType);
    function get_IsSameSettings: Boolean;
    procedure set_IsSameSettings(value: Boolean);
    function get_EditWebPage: string;
    procedure set_EditWebPage(value: string);
    function get_EditPage: string;
    procedure set_EditPage(value: string);
    function get_IsConsecutive: Boolean;
    procedure set_IsConsecutive(value: Boolean);
    function get_Id: Int32;
    function get_PowerQueryFormula: DNPowerQueryFormula;
    function get_Type: DNConnectionDataSourceType;
    procedure set_Type(value: DNConnectionDataSourceType);
    function get_SourceFile: string;
    procedure set_SourceFile(value: string);
    function get_SSOId: string;
    procedure set_SSOId(value: string);
    function get_SavePassword: Boolean;
    procedure set_SavePassword(value: Boolean);
    function get_SaveData: Boolean;
    procedure set_SaveData(value: Boolean);
    function get_RefreshOnLoad: Boolean;
    procedure set_RefreshOnLoad(value: Boolean);
    function get_ReconnectionMethodType: DNReConnectionMethodType;
    procedure set_ReconnectionMethodType(value: DNReConnectionMethodType);
    function get_ReconnectionMethod: DNReConnectionMethodType;
    procedure set_ReconnectionMethod(value: DNReConnectionMethodType);
    function get_OnlyUseConnectionFile: Boolean;
    procedure set_OnlyUseConnectionFile(value: Boolean);
    function get_OdcFile: string;
    procedure set_OdcFile(value: string);
    function get_IsNew: Boolean;
    procedure set_IsNew(value: Boolean);
    function get_Name: string;
    procedure set_Name(value: string);
    function get_KeepAlive: Boolean;
    procedure set_KeepAlive(value: Boolean);
    function get_RefreshInternal: Int32;
    procedure set_RefreshInternal(value: Int32);
    function get_ConnectionId: Int32;
    function get_ConnectionDescription: string;
    procedure set_ConnectionDescription(value: string);
    function get_IsDeleted: Boolean;
    procedure set_IsDeleted(value: Boolean);
    function get_CredentialsMethodType: DNCredentialsMethodType;
    procedure set_CredentialsMethodType(value: DNCredentialsMethodType);
    function get_Credentials: DNCredentialsMethodType;
    procedure set_Credentials(value: DNCredentialsMethodType);
    function get_BackgroundRefresh: Boolean;
    procedure set_BackgroundRefresh(value: Boolean);
    function get_Parameters: DNConnectionParameterCollection;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property IsXml: Boolean read get_IsXml write set_IsXml;
    property IsXl97: Boolean read get_IsXl97 write set_IsXl97;
    property IsXl2000: Boolean read get_IsXl2000 write set_IsXl2000;
    property Url: string read get_Url write set_Url;
    property IsTextDates: Boolean read get_IsTextDates write set_IsTextDates;
    property IsXmlSourceData: Boolean read get_IsXmlSourceData write set_IsXmlSourceData;
    property Post: string read get_Post write set_Post;
    property IsParsePre: Boolean read get_IsParsePre write set_IsParsePre;
    property IsHtmlTables: Boolean read get_IsHtmlTables write set_IsHtmlTables;
    property HtmlFormat: DNHtmlFormatHandlingType read get_HtmlFormat write set_HtmlFormat;
    property IsSameSettings: Boolean read get_IsSameSettings write set_IsSameSettings;
    property EditWebPage: string read get_EditWebPage write set_EditWebPage;
    property EditPage: string read get_EditPage write set_EditPage;
    property IsConsecutive: Boolean read get_IsConsecutive write set_IsConsecutive;
    property Id: Int32 read get_Id;
    property PowerQueryFormula: DNPowerQueryFormula read get_PowerQueryFormula;
    property &Type: DNConnectionDataSourceType read get_Type write set_Type;
    property SourceFile: string read get_SourceFile write set_SourceFile;
    property SSOId: string read get_SSOId write set_SSOId;
    property SavePassword: Boolean read get_SavePassword write set_SavePassword;
    property SaveData: Boolean read get_SaveData write set_SaveData;
    property RefreshOnLoad: Boolean read get_RefreshOnLoad write set_RefreshOnLoad;
    property ReconnectionMethodType: DNReConnectionMethodType read get_ReconnectionMethodType write set_ReconnectionMethodType;
    property ReconnectionMethod: DNReConnectionMethodType read get_ReconnectionMethod write set_ReconnectionMethod;
    property OnlyUseConnectionFile: Boolean read get_OnlyUseConnectionFile write set_OnlyUseConnectionFile;
    property OdcFile: string read get_OdcFile write set_OdcFile;
    property IsNew: Boolean read get_IsNew write set_IsNew;
    property Name: string read get_Name write set_Name;
    property KeepAlive: Boolean read get_KeepAlive write set_KeepAlive;
    property RefreshInternal: Int32 read get_RefreshInternal write set_RefreshInternal;
    property ConnectionId: Int32 read get_ConnectionId;
    property ConnectionDescription: string read get_ConnectionDescription write set_ConnectionDescription;
    property IsDeleted: Boolean read get_IsDeleted write set_IsDeleted;
    property CredentialsMethodType: DNCredentialsMethodType read get_CredentialsMethodType write set_CredentialsMethodType;
    property Credentials: DNCredentialsMethodType read get_Credentials write set_Credentials;
    property BackgroundRefresh: Boolean read get_BackgroundRefresh write set_BackgroundRefresh;
    property Parameters: DNConnectionParameterCollection read get_Parameters;
  end;

  TDNWebQueryConnection = class(TDNGenericImport<DNWebQueryConnectionClass, DNWebQueryConnection>) end;

  //-------------namespace: Aspose.Cells----------------
  DNExternalLinkClass = interface(DDN.mscorlib.DNObjectClass)
  ['{023154AB-7494-5B8B-8D58-87F100DF5243}']
  end;

  [DNTypeName('Aspose.Cells.ExternalLink')]
  DNExternalLink = interface(DDN.mscorlib.DNObject)
  ['{8FFD4BAA-E649-3276-8D13-8DA4CD34587F}']
  { getters & setters } 

    function get_Type: DNExternalLinkType;
    function get_OriginalDataSource: string;
    procedure set_OriginalDataSource(value: string);
    function get_DataSource: string;
    procedure set_DataSource(value: string);
    function get_IsReferred: Boolean;
    function get_IsVisible: Boolean;

  { methods } 

    procedure AddExternalName(text: string; referTo: string);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property &Type: DNExternalLinkType read get_Type;
    property OriginalDataSource: string read get_OriginalDataSource write set_OriginalDataSource;
    property DataSource: string read get_DataSource write set_DataSource;
    property IsReferred: Boolean read get_IsReferred;
    property IsVisible: Boolean read get_IsVisible;
  end;

  TDNExternalLink = class(TDNGenericImport<DNExternalLinkClass, DNExternalLink>) end;

  //-------------namespace: Aspose.Cells----------------
  DNExternalLinkCollectionClass = interface(DDN.mscorlib.DNObjectClass)
  ['{5E3CC501-BE5A-51FD-B6D0-34D312640C48}']
  end;

  [DNTypeName('Aspose.Cells.ExternalLinkCollection')]
  DNExternalLinkCollection = interface(DDN.mscorlib.DNObject)
  ['{647575C5-53FF-3AE5-9FB8-E8B5DCAB3E51}']
  { getters & setters } 

    function get_Count: Int32;
    function get_Item(index: Int32): DNExternalLink;

  { methods } 

    function Add(fileName: string; sheetNames: TArray<string>): Int32; overload;
    function Add(directoryType: DNDirectoryType; fileName: string; sheetNames: TArray<string>): Int32; overload;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Count: Int32 read get_Count;
    property Item[index: Int32]: DNExternalLink read get_Item; default;
  end;

  TDNExternalLinkCollection = class(TDNGenericImport<DNExternalLinkCollectionClass, DNExternalLinkCollection>) end;

  //-------------namespace: Aspose.Cells----------------
  DNFileFormatInfoClass = interface(DDN.mscorlib.DNObjectClass)
  ['{816105B2-FEE6-54A8-971B-CD20CE1E6A4D}']
  { constructors } 

    {class} function init: DNFileFormatInfo;

  end;

  [DNTypeName('Aspose.Cells.FileFormatInfo')]
  DNFileFormatInfo = interface(DDN.mscorlib.DNObject)
  ['{93401899-6084-3B9C-B1B3-E3DDD82C89ED}']
  { getters & setters } 

    function get_IsProtectedByRMS: Boolean;
    function get_IsEncrypted: Boolean;
    function get_FileFormatType: DNFileFormatType;
    function get_LoadFormat: DNLoadFormat;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property IsProtectedByRMS: Boolean read get_IsProtectedByRMS;
    property IsEncrypted: Boolean read get_IsEncrypted;
    property FileFormatType: DNFileFormatType read get_FileFormatType;
    property LoadFormat: DNLoadFormat read get_LoadFormat;
  end;

  TDNFileFormatInfo = class(TDNGenericImport<DNFileFormatInfoClass, DNFileFormatInfo>) end;

  //-------------namespace: Aspose.Cells----------------
  DNFileFormatUtilClass = interface(DDN.mscorlib.DNObjectClass)
  ['{141D03F4-5B33-54B9-A1DD-CB9BF03FEF03}']
  { static methods } 

    {class} function DetectFileFormat(stream: DDN.mscorlib.DNStream): DNFileFormatInfo; overload;
    {class} function DetectFileFormat(stream: DDN.mscorlib.DNStream; password: string): DNFileFormatInfo; overload;
    {class} function VerifyPassword(stream: DDN.mscorlib.DNStream; password: string): Boolean;
    {class} function DetectFileFormat(filePath: string): DNFileFormatInfo; overload;
    {class} function DetectFileFormat(filePath: string; password: string): DNFileFormatInfo; overload;
    {class} function FileFormatToSaveFormat(format: DNFileFormatType): DNSaveFormat;
    {class} function ExtensionToSaveFormat(extension: string): DNSaveFormat;
    {class} function IsTemplateFormat(extension: string): Boolean;
    {class} function LoadFormatToExtension(loadFormat: DNLoadFormat): string;
    {class} function LoadFormatToSaveFormat(loadFormat: DNLoadFormat): DNSaveFormat;
    {class} function SaveFormatToExtension(format: DNSaveFormat): string;
    {class} function SaveFormatToLoadFormat(saveFormat: DNSaveFormat): DNLoadFormat;

  end;

  [DNTypeName('Aspose.Cells.FileFormatUtil')]
  DNFileFormatUtil = interface(DDN.mscorlib.DNObject)
  ['{078D6299-E454-3ECE-A21D-023C322B2121}']
  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNFileFormatUtil = class(TDNGenericImport<DNFileFormatUtilClass, DNFileFormatUtil>) end;

  //-------------namespace: Aspose.Cells----------------
  DNFilterColumnClass = interface(DDN.mscorlib.DNObjectClass)
  ['{DB94B70A-7B18-53A6-8961-758FC6CEF3F4}']
  end;

  [DNTypeName('Aspose.Cells.FilterColumn')]
  DNFilterColumn = interface(DDN.mscorlib.DNObject)
  ['{04318860-8625-3BF2-A364-74327E751A60}']
  { getters & setters } 

    function get_IsDropdownVisible: Boolean;
    procedure set_IsDropdownVisible(value: Boolean);
    function get_Visibledropdown: Boolean;
    procedure set_Visibledropdown(value: Boolean);
    function get_Filter: DDN.mscorlib.DNObject;
    procedure set_Filter(value: DDN.mscorlib.DNObject);
    function get_FilterType: DNFilterType;
    procedure set_FilterType(value: DNFilterType);
    function get_FieldIndex: Int32;
    procedure set_FieldIndex(value: Int32);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property IsDropdownVisible: Boolean read get_IsDropdownVisible write set_IsDropdownVisible;
    property Visibledropdown: Boolean read get_Visibledropdown write set_Visibledropdown;
    property Filter: DDN.mscorlib.DNObject read get_Filter write set_Filter;
    property FilterType: DNFilterType read get_FilterType write set_FilterType;
    property FieldIndex: Int32 read get_FieldIndex write set_FieldIndex;
  end;

  TDNFilterColumn = class(TDNGenericImport<DNFilterColumnClass, DNFilterColumn>) end;

  //-------------namespace: Aspose.Cells----------------
  DNFindOptionsClass = interface(DDN.mscorlib.DNObjectClass)
  ['{6573A565-FEBC-51BC-91B8-C0D8A12CE054}']
  { constructors } 

    {class} function init: DNFindOptions;

  end;

  [DNTypeName('Aspose.Cells.FindOptions')]
  DNFindOptions = interface(DDN.mscorlib.DNObject)
  ['{3300B120-0B7E-36F0-962F-B2A3C32336AB}']
  { getters & setters } 

    function get_IsCaseSensitive: Boolean;
    procedure set_IsCaseSensitive(value: Boolean);
    function get_CaseSensitive: Boolean;
    procedure set_CaseSensitive(value: Boolean);
    function get_LookAtType: DNLookAtType;
    procedure set_LookAtType(value: DNLookAtType);
    function get_IsRangeSet: Boolean;
    function get_SearchNext: Boolean;
    procedure set_SearchNext(value: Boolean);
    function get_SearchBackward: Boolean;
    procedure set_SearchBackward(value: Boolean);
    function get_SeachOrderByRows: Boolean;
    procedure set_SeachOrderByRows(value: Boolean);
    function get_LookInType: DNLookInType;
    procedure set_LookInType(value: DNLookInType);
    function get_RegexKey: Boolean;
    procedure set_RegexKey(value: Boolean);
    function get_ValueTypeSensitive: Boolean;
    procedure set_ValueTypeSensitive(value: Boolean);
    function get_Style: DNStyle;
    procedure set_Style(value: DNStyle);
    function get_ConvertNumericData: Boolean;
    procedure set_ConvertNumericData(value: Boolean);

  { methods } 

    function GetRange: DNCellArea;
    procedure SetRange(ca: DNCellArea);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property IsCaseSensitive: Boolean read get_IsCaseSensitive write set_IsCaseSensitive;
    property CaseSensitive: Boolean read get_CaseSensitive write set_CaseSensitive;
    property LookAtType: DNLookAtType read get_LookAtType write set_LookAtType;
    property IsRangeSet: Boolean read get_IsRangeSet;
    property SearchNext: Boolean read get_SearchNext write set_SearchNext;
    property SearchBackward: Boolean read get_SearchBackward write set_SearchBackward;
    property SeachOrderByRows: Boolean read get_SeachOrderByRows write set_SeachOrderByRows;
    property LookInType: DNLookInType read get_LookInType write set_LookInType;
    property RegexKey: Boolean read get_RegexKey write set_RegexKey;
    property ValueTypeSensitive: Boolean read get_ValueTypeSensitive write set_ValueTypeSensitive;
    property Style: DNStyle read get_Style write set_Style;
    property ConvertNumericData: Boolean read get_ConvertNumericData write set_ConvertNumericData;
  end;

  TDNFindOptions = class(TDNGenericImport<DNFindOptionsClass, DNFindOptions>) end;

  //-------------namespace: Aspose.Cells----------------
  DNFontClass = interface(DDN.mscorlib.DNObjectClass)
  ['{F79B1486-6C0B-5A2D-AD31-A7A03F0E155B}']
  end;

  [DNTypeName('Aspose.Cells.Font')]
  DNFont = interface(DDN.mscorlib.DNObject)
  ['{EFA3DDFC-8343-346B-86A0-38D7A1FE633A}']
  { getters & setters } 

    function get_Charset: Int32;
    procedure set_Charset(value: Int32);
    function get_IsItalic: Boolean;
    procedure set_IsItalic(value: Boolean);
    function get_IsBold: Boolean;
    procedure set_IsBold(value: Boolean);
    function get_CapsType: DNTextCapsType;
    procedure set_CapsType(value: DNTextCapsType);
    function get_StrikeType: DNTextStrikeType;
    procedure set_StrikeType(value: DNTextStrikeType);
    function get_IsStrikeout: Boolean;
    procedure set_IsStrikeout(value: Boolean);
    function get_ScriptOffset: Double;
    procedure set_ScriptOffset(value: Double);
    function get_IsSuperscript: Boolean;
    procedure set_IsSuperscript(value: Boolean);
    function get_IsSubscript: Boolean;
    procedure set_IsSubscript(value: Boolean);
    function get_Underline: DNFontUnderlineType;
    procedure set_Underline(value: DNFontUnderlineType);
    function get_Name: string;
    procedure set_Name(value: string);
    function get_DoubleSize: Double;
    procedure set_DoubleSize(value: Double);
    function get_Size: Int32;
    procedure set_Size(value: Int32);
    function get_ThemeColor: DNThemeColor;
    procedure set_ThemeColor(value: DNThemeColor);
    function get_Color: DDN.System.Drawing.DNColor;
    procedure set_Color(value: DDN.System.Drawing.DNColor);
    function get_ArgbColor: Int32;
    procedure set_ArgbColor(value: Int32);
    function get_IsNormalizeHeights: Boolean;
    procedure set_IsNormalizeHeights(value: Boolean);
    function get_SchemeType: DNFontSchemeType;
    procedure set_SchemeType(value: DNFontSchemeType);

  { methods } 

    function Equals(font: DNFont): Boolean; overload;
    function ToString: string;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean; overload;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    property Charset: Int32 read get_Charset write set_Charset;
    property IsItalic: Boolean read get_IsItalic write set_IsItalic;
    property IsBold: Boolean read get_IsBold write set_IsBold;
    property CapsType: DNTextCapsType read get_CapsType write set_CapsType;
    property StrikeType: DNTextStrikeType read get_StrikeType write set_StrikeType;
    property IsStrikeout: Boolean read get_IsStrikeout write set_IsStrikeout;
    property ScriptOffset: Double read get_ScriptOffset write set_ScriptOffset;
    property IsSuperscript: Boolean read get_IsSuperscript write set_IsSuperscript;
    property IsSubscript: Boolean read get_IsSubscript write set_IsSubscript;
    property Underline: DNFontUnderlineType read get_Underline write set_Underline;
    property Name: string read get_Name write set_Name;
    property DoubleSize: Double read get_DoubleSize write set_DoubleSize;
    property Size: Int32 read get_Size write set_Size;
    property ThemeColor: DNThemeColor read get_ThemeColor write set_ThemeColor;
    property Color: DDN.System.Drawing.DNColor read get_Color write set_Color;
    property ArgbColor: Int32 read get_ArgbColor write set_ArgbColor;
    property IsNormalizeHeights: Boolean read get_IsNormalizeHeights write set_IsNormalizeHeights;
    property SchemeType: DNFontSchemeType read get_SchemeType write set_SchemeType;
  end;

  TDNFont = class(TDNGenericImport<DNFontClass, DNFont>) end;

  //-------------namespace: Aspose.Cells.Drawing.Texts----------------
  DNTextOptionsClass = interface(DNFontClass)
  ['{398DBA3A-22A5-5201-A5E0-B1280621ED80}']
  end;

  [DNTypeName('Aspose.Cells.Drawing.Texts.TextOptions')]
  DNTextOptions = interface(DNFont)
  ['{C31738D0-CA74-30B6-A4BD-DD1F9B3258C7}']
  { getters & setters } 

    function get_Name: string;
    procedure set_Name(value: string);
    function get_LatinName: string;
    procedure set_LatinName(value: string);
    function get_FarEastName: string;
    procedure set_FarEastName(value: string);
    function get_Fill: DNFillFormat;
    function get_Outline: DNLineFormat;
    function get_Shadow: DNShadowEffect;
    function get_UnderlineColor: DNCellsColor;
    procedure set_UnderlineColor(value: DNCellsColor);
    function get_Kerning: Double;
    procedure set_Kerning(value: Double);
    function get_Spacing: Double;
    procedure set_Spacing(value: Double);
    function get_Charset: Int32;
    procedure set_Charset(value: Int32);
    function get_IsItalic: Boolean;
    procedure set_IsItalic(value: Boolean);
    function get_IsBold: Boolean;
    procedure set_IsBold(value: Boolean);
    function get_CapsType: DNTextCapsType;
    procedure set_CapsType(value: DNTextCapsType);
    function get_StrikeType: DNTextStrikeType;
    procedure set_StrikeType(value: DNTextStrikeType);
    function get_IsStrikeout: Boolean;
    procedure set_IsStrikeout(value: Boolean);
    function get_ScriptOffset: Double;
    procedure set_ScriptOffset(value: Double);
    function get_IsSuperscript: Boolean;
    procedure set_IsSuperscript(value: Boolean);
    function get_IsSubscript: Boolean;
    procedure set_IsSubscript(value: Boolean);
    function get_Underline: DNFontUnderlineType;
    procedure set_Underline(value: DNFontUnderlineType);
    function get_DoubleSize: Double;
    procedure set_DoubleSize(value: Double);
    function get_Size: Int32;
    procedure set_Size(value: Int32);
    function get_ThemeColor: DNThemeColor;
    procedure set_ThemeColor(value: DNThemeColor);
    function get_Color: DDN.System.Drawing.DNColor;
    procedure set_Color(value: DDN.System.Drawing.DNColor);
    function get_ArgbColor: Int32;
    procedure set_ArgbColor(value: Int32);
    function get_IsNormalizeHeights: Boolean;
    procedure set_IsNormalizeHeights(value: Boolean);
    function get_SchemeType: DNFontSchemeType;
    procedure set_SchemeType(value: DNFontSchemeType);

  { methods } 

    function Equals(font: DNFont): Boolean; overload;
    function ToString: string;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean; overload;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    property Name: string read get_Name write set_Name;
    property LatinName: string read get_LatinName write set_LatinName;
    property FarEastName: string read get_FarEastName write set_FarEastName;
    property Fill: DNFillFormat read get_Fill;
    property Outline: DNLineFormat read get_Outline;
    property Shadow: DNShadowEffect read get_Shadow;
    property UnderlineColor: DNCellsColor read get_UnderlineColor write set_UnderlineColor;
    property Kerning: Double read get_Kerning write set_Kerning;
    property Spacing: Double read get_Spacing write set_Spacing;
    property Charset: Int32 read get_Charset write set_Charset;
    property IsItalic: Boolean read get_IsItalic write set_IsItalic;
    property IsBold: Boolean read get_IsBold write set_IsBold;
    property CapsType: DNTextCapsType read get_CapsType write set_CapsType;
    property StrikeType: DNTextStrikeType read get_StrikeType write set_StrikeType;
    property IsStrikeout: Boolean read get_IsStrikeout write set_IsStrikeout;
    property ScriptOffset: Double read get_ScriptOffset write set_ScriptOffset;
    property IsSuperscript: Boolean read get_IsSuperscript write set_IsSuperscript;
    property IsSubscript: Boolean read get_IsSubscript write set_IsSubscript;
    property Underline: DNFontUnderlineType read get_Underline write set_Underline;
    property DoubleSize: Double read get_DoubleSize write set_DoubleSize;
    property Size: Int32 read get_Size write set_Size;
    property ThemeColor: DNThemeColor read get_ThemeColor write set_ThemeColor;
    property Color: DDN.System.Drawing.DNColor read get_Color write set_Color;
    property ArgbColor: Int32 read get_ArgbColor write set_ArgbColor;
    property IsNormalizeHeights: Boolean read get_IsNormalizeHeights write set_IsNormalizeHeights;
    property SchemeType: DNFontSchemeType read get_SchemeType write set_SchemeType;
  end;

  TDNTextOptions = class(TDNGenericImport<DNTextOptionsClass, DNTextOptions>) end;

  //-------------namespace: Aspose.Cells----------------
  DNFontConfigsClass = interface(DDN.mscorlib.DNObjectClass)
  ['{39B98523-FDF1-50F0-911E-1ADEFA21ABA3}']
  { static getter & setter } 

    {class} function get_DefaultFontName: string;
    {class} procedure set_DefaultFontName(value: string);
    {class} function get_PreferSystemFontSubstitutes: Boolean;
    {class} procedure set_PreferSystemFontSubstitutes(value: Boolean);

  { constructors } 

    {class} function init: DNFontConfigs;

  { static methods } 

    {class} procedure SetFontSubstitutes(originalFontName: string; substituteFontNames: TArray<string>);
    {class} function GetFontSubstitutes(originalFontName: string): TArray<string>;
    {class} procedure SetFontFolder(fontFolder: string; recursive: Boolean);
    {class} procedure SetFontFolders(fontFolders: TArray<string>; recursive: Boolean);
    {class} procedure SetFontSources(sources: TArray<DNFontSourceBase>);
    {class} function GetFontSources: TArray<DNFontSourceBase>;

  { static propertys } 

    {class} property DefaultFontName: string read get_DefaultFontName write set_DefaultFontName;
    {class} property PreferSystemFontSubstitutes: Boolean read get_PreferSystemFontSubstitutes write set_PreferSystemFontSubstitutes;
  end;

  [DNTypeName('Aspose.Cells.FontConfigs')]
  DNFontConfigs = interface(DDN.mscorlib.DNObject)
  ['{4EF5D072-6CC1-33F3-9C43-65330D2FA493}']
  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNFontConfigs = class(TDNGenericImport<DNFontConfigsClass, DNFontConfigs>) end;

  //-------------namespace: Aspose.Cells----------------
  DNFontSettingClass = interface(DDN.mscorlib.DNObjectClass)
  ['{8CC19F79-75D1-5A6E-AB1F-2906278E259F}']
  { constructors } 

    {class} function init(startIndex: Int32; length: Int32; sheets: DNWorksheetCollection): DNFontSetting;

  end;

  [DNTypeName('Aspose.Cells.FontSetting')]
  DNFontSetting = interface(DDN.mscorlib.DNObject)
  ['{F3C71F38-ACF2-3008-B581-038CF666C856}']
  { getters & setters } 

    function get_Type: DNTextNodeType;
    function get_StartIndex: Int32;
    function get_Length: Int32;
    function get_Font: DNFont;
    function get_TextOptions: DNTextOptions;

  { methods } 

    procedure SetWordArtStyle(style: DNPresetWordArtStyle);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property &Type: DNTextNodeType read get_Type;
    property StartIndex: Int32 read get_StartIndex;
    property Length: Int32 read get_Length;
    property Font: DNFont read get_Font;
    property TextOptions: DNTextOptions read get_TextOptions;
  end;

  TDNFontSetting = class(TDNGenericImport<DNFontSettingClass, DNFontSetting>) end;

  //-------------namespace: Aspose.Cells.Drawing.Texts----------------
  DNTextParagraphClass = interface(DNFontSettingClass)
  ['{E98DE738-C82D-5B42-B6B5-0F0E3A63CD67}']
  end;

  [DNTypeName('Aspose.Cells.Drawing.Texts.TextParagraph')]
  DNTextParagraph = interface(DNFontSetting)
  ['{412EF4B3-66CB-37EF-9EA2-D1DDA4FC89B1}']
  { getters & setters } 

    function get_Bullet: DNBullet;
    function get_Type: DNTextNodeType;
    function get_LineSpaceSizeType: DNLineSpaceSizeType;
    procedure set_LineSpaceSizeType(value: DNLineSpaceSizeType);
    function get_LineSpace: Double;
    procedure set_LineSpace(value: Double);
    function get_SpaceAfterSizeType: DNLineSpaceSizeType;
    procedure set_SpaceAfterSizeType(value: DNLineSpaceSizeType);
    function get_SpaceAfter: Double;
    procedure set_SpaceAfter(value: Double);
    function get_SpaceBeforeSizeType: DNLineSpaceSizeType;
    procedure set_SpaceBeforeSizeType(value: DNLineSpaceSizeType);
    function get_SpaceBefore: Double;
    procedure set_SpaceBefore(value: Double);
    function get_Stops: DNTextTabStopCollection;
    function get_IsLatinLineBreak: Boolean;
    procedure set_IsLatinLineBreak(value: Boolean);
    function get_IsEastAsianLineBreak: Boolean;
    procedure set_IsEastAsianLineBreak(value: Boolean);
    function get_IsHangingPunctuation: Boolean;
    procedure set_IsHangingPunctuation(value: Boolean);
    function get_RightMargin: Double;
    procedure set_RightMargin(value: Double);
    function get_LeftMargin: Double;
    procedure set_LeftMargin(value: Double);
    function get_FirstLineIndent: Double;
    procedure set_FirstLineIndent(value: Double);
    function get_FontAlignType: DNTextFontAlignType;
    procedure set_FontAlignType(value: DNTextFontAlignType);
    function get_AlignmentType: DNTextAlignmentType;
    procedure set_AlignmentType(value: DNTextAlignmentType);
    function get_DefaultTabSize: Double;
    procedure set_DefaultTabSize(value: Double);
    function get_Children: TArray<DNFontSetting>;
    function get_StartIndex: Int32;
    function get_Length: Int32;
    function get_Font: DNFont;
    function get_TextOptions: DNTextOptions;

  { methods } 

    procedure SetWordArtStyle(style: DNPresetWordArtStyle);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Bullet: DNBullet read get_Bullet;
    property &Type: DNTextNodeType read get_Type;
    property LineSpaceSizeType: DNLineSpaceSizeType read get_LineSpaceSizeType write set_LineSpaceSizeType;
    property LineSpace: Double read get_LineSpace write set_LineSpace;
    property SpaceAfterSizeType: DNLineSpaceSizeType read get_SpaceAfterSizeType write set_SpaceAfterSizeType;
    property SpaceAfter: Double read get_SpaceAfter write set_SpaceAfter;
    property SpaceBeforeSizeType: DNLineSpaceSizeType read get_SpaceBeforeSizeType write set_SpaceBeforeSizeType;
    property SpaceBefore: Double read get_SpaceBefore write set_SpaceBefore;
    property Stops: DNTextTabStopCollection read get_Stops;
    property IsLatinLineBreak: Boolean read get_IsLatinLineBreak write set_IsLatinLineBreak;
    property IsEastAsianLineBreak: Boolean read get_IsEastAsianLineBreak write set_IsEastAsianLineBreak;
    property IsHangingPunctuation: Boolean read get_IsHangingPunctuation write set_IsHangingPunctuation;
    property RightMargin: Double read get_RightMargin write set_RightMargin;
    property LeftMargin: Double read get_LeftMargin write set_LeftMargin;
    property FirstLineIndent: Double read get_FirstLineIndent write set_FirstLineIndent;
    property FontAlignType: DNTextFontAlignType read get_FontAlignType write set_FontAlignType;
    property AlignmentType: DNTextAlignmentType read get_AlignmentType write set_AlignmentType;
    property DefaultTabSize: Double read get_DefaultTabSize write set_DefaultTabSize;
    property Children: TArray<DNFontSetting> read get_Children;
    property StartIndex: Int32 read get_StartIndex;
    property Length: Int32 read get_Length;
    property Font: DNFont read get_Font;
    property TextOptions: DNTextOptions read get_TextOptions;
  end;

  TDNTextParagraph = class(TDNGenericImport<DNTextParagraphClass, DNTextParagraph>) end;

  //-------------namespace: Aspose.Cells----------------
  DNFontSourceBaseClass = interface(DDN.mscorlib.DNObjectClass)
  ['{CF61A7D1-D3E7-5D94-9D4C-EE38DCFB4865}']
  end;

  [DNTypeName('Aspose.Cells.FontSourceBase')]
  DNFontSourceBase = interface(DDN.mscorlib.DNObject)
  ['{273B58A3-5280-3286-9B92-9CF5FC3533C5}']
  { getters & setters } 

    function get_Type: DNFontSourceType;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property &Type: DNFontSourceType read get_Type;
  end;

  TDNFontSourceBase = class(TDNGenericImport<DNFontSourceBaseClass, DNFontSourceBase>) end;

  //-------------namespace: Aspose.Cells----------------
  DNFileFontSourceClass = interface(DNFontSourceBaseClass)
  ['{CFE24F43-0077-59A6-9DCD-9B919F753F40}']
  { constructors } 

    {class} function init(filePath: string): DNFileFontSource;

  end;

  [DNTypeName('Aspose.Cells.FileFontSource')]
  DNFileFontSource = interface(DNFontSourceBase)
  ['{59648655-F98B-37C8-8DD9-75F9C8AF8D5C}']
  { getters & setters } 

    function get_FilePath: string;
    function get_Type: DNFontSourceType;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property FilePath: string read get_FilePath;
    property &Type: DNFontSourceType read get_Type;
  end;

  TDNFileFontSource = class(TDNGenericImport<DNFileFontSourceClass, DNFileFontSource>) end;

  //-------------namespace: Aspose.Cells----------------
  DNFolderFontSourceClass = interface(DNFontSourceBaseClass)
  ['{FC5B19DD-8DD5-5434-B5D8-ACAA7CD394A2}']
  { constructors } 

    {class} function init(folderPath: string; scanSubfolders: Boolean): DNFolderFontSource;

  end;

  [DNTypeName('Aspose.Cells.FolderFontSource')]
  DNFolderFontSource = interface(DNFontSourceBase)
  ['{62DB125F-2BB7-317C-A497-64EB8D3D779C}']
  { getters & setters } 

    function get_FolderPath: string;
    function get_ScanSubFolders: Boolean;
    function get_Type: DNFontSourceType;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property FolderPath: string read get_FolderPath;
    property ScanSubFolders: Boolean read get_ScanSubFolders;
    property &Type: DNFontSourceType read get_Type;
  end;

  TDNFolderFontSource = class(TDNGenericImport<DNFolderFontSourceClass, DNFolderFontSource>) end;

  //-------------namespace: Aspose.Cells----------------
  DNMemoryFontSourceClass = interface(DNFontSourceBaseClass)
  ['{FD78D885-8C96-5FC2-BCF3-69D22258A7E2}']
  { constructors } 

    {class} function init(fontData: TArray<Byte>): DNMemoryFontSource;

  end;

  [DNTypeName('Aspose.Cells.MemoryFontSource')]
  DNMemoryFontSource = interface(DNFontSourceBase)
  ['{CB2024BC-B4B3-3914-BEE3-A9C71BC492B6}']
  { getters & setters } 

    function get_FontData: TArray<Byte>;
    function get_Type: DNFontSourceType;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property FontData: TArray<Byte> read get_FontData;
    property &Type: DNFontSourceType read get_Type;
  end;

  TDNMemoryFontSource = class(TDNGenericImport<DNMemoryFontSourceClass, DNMemoryFontSource>) end;

  //-------------namespace: Aspose.Cells----------------
  DNFormatConditionClass = interface(DDN.mscorlib.DNObjectClass)
  ['{FF9143A1-C35B-580C-A857-9509D24D49D4}']
  end;

  [DNTypeName('Aspose.Cells.FormatCondition')]
  DNFormatCondition = interface(DDN.mscorlib.DNObject)
  ['{34EAB2F9-D711-3719-96C9-CCF2543E6035}']
  { getters & setters } 

    function get_Formula1: string;
    procedure set_Formula1(value: string);
    function get_Formula2: string;
    procedure set_Formula2(value: string);
    function get_Operator: DNOperatorType;
    procedure set_Operator(value: DNOperatorType);
    function get_StopIfTrue: Boolean;
    procedure set_StopIfTrue(value: Boolean);
    function get_Priority: Int32;
    procedure set_Priority(value: Int32);
    function get_Style: DNStyle;
    procedure set_Style(value: DNStyle);
    function get_Type: DNFormatConditionType;
    procedure set_Type(value: DNFormatConditionType);
    function get_IconSet: DNIconSet;
    function get_DataBar: DNDataBar;
    function get_ColorScale: DNColorScale;
    function get_Top10: DNTop10;
    function get_AboveAverage: DNAboveAverage;
    function get_Text: string;
    procedure set_Text(value: string);
    function get_TimePeriod: DNTimePeriodType;
    procedure set_TimePeriod(value: DNTimePeriodType);

  { methods } 

    function GetFormula1(isR1C1: Boolean; isLocal: Boolean): string; overload;
    function GetFormula2(isR1C1: Boolean; isLocal: Boolean): string; overload;
    function GetFormula1(isR1C1: Boolean; isLocal: Boolean; row: Int32; column: Int32): string; overload;
    function GetFormula2(isR1C1: Boolean; isLocal: Boolean; row: Int32; column: Int32): string; overload;
    procedure SetFormulas(formula1: string; formula2: string; isR1C1: Boolean; isLocal: Boolean);
    procedure SetFormula1(formula: string; isR1C1: Boolean; isLocal: Boolean);
    procedure SetFormula2(formula: string; isR1C1: Boolean; isLocal: Boolean);
    function GetFormula1(row: Int32; column: Int32): string; overload;
    function GetFormula2(row: Int32; column: Int32): string; overload;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Formula1: string read get_Formula1 write set_Formula1;
    property Formula2: string read get_Formula2 write set_Formula2;
    property Operator: DNOperatorType read get_Operator write set_Operator;
    property StopIfTrue: Boolean read get_StopIfTrue write set_StopIfTrue;
    property Priority: Int32 read get_Priority write set_Priority;
    property Style: DNStyle read get_Style write set_Style;
    property &Type: DNFormatConditionType read get_Type write set_Type;
    property IconSet: DNIconSet read get_IconSet;
    property DataBar: DNDataBar read get_DataBar;
    property ColorScale: DNColorScale read get_ColorScale;
    property Top10: DNTop10 read get_Top10;
    property AboveAverage: DNAboveAverage read get_AboveAverage;
    property Text: string read get_Text write set_Text;
    property TimePeriod: DNTimePeriodType read get_TimePeriod write set_TimePeriod;
  end;

  TDNFormatCondition = class(TDNGenericImport<DNFormatConditionClass, DNFormatCondition>) end;

  //-------------namespace: Aspose.Cells----------------
  DNFormatConditionCollectionClass = interface(DDN.mscorlib.DNObjectClass)
  ['{71122BCD-4731-52FA-B1B5-543E276C4348}']
  end;

  [DNTypeName('Aspose.Cells.FormatConditionCollection')]
  DNFormatConditionCollection = interface(DDN.mscorlib.DNObject)
  ['{0E545EA7-1E31-3EAA-B0B1-D118F424BC53}']
  { getters & setters } 

    function get_Count: Int32;
    function get_RangeCount: Int32;
    function get_Item(index: Int32): DNFormatCondition;

  { methods } 

    function Add(cellArea: DNCellArea; &type: DNFormatConditionType; operatorType: DNOperatorType; formula1: string; formula2: string): TArray<Int32>;
    function AddArea(cellArea: DNCellArea): Int32;
    function AddCondition(&type: DNFormatConditionType; operatorType: DNOperatorType; formula1: string; formula2: string): Int32; overload;
    function AddCondition(&type: DNFormatConditionType): Int32; overload;
    function GetCellArea(index: Int32): DNCellArea;
    procedure RemoveArea(index: Int32); overload;
    function RemoveArea(startRow: Int32; startColumn: Int32; totalRows: Int32; totalColumns: Int32): Boolean; overload;
    procedure RemoveCondition(index: Int32);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Count: Int32 read get_Count;
    property RangeCount: Int32 read get_RangeCount;
    property Item[index: Int32]: DNFormatCondition read get_Item; default;
  end;

  TDNFormatConditionCollection = class(TDNGenericImport<DNFormatConditionCollectionClass, DNFormatConditionCollection>) end;

  //-------------namespace: Aspose.Cells----------------
  DNFormulaParseOptionsClass = interface(DDN.mscorlib.DNObjectClass)
  ['{8EF434C8-D6A2-54AD-B98D-FE95A50FE0AE}']
  { constructors } 

    {class} function init: DNFormulaParseOptions;

  end;

  [DNTypeName('Aspose.Cells.FormulaParseOptions')]
  DNFormulaParseOptions = interface(DDN.mscorlib.DNObject)
  ['{D8D18C36-641E-3CFD-97B9-DA327EEB351C}']
  { getters & setters } 

    function get_LocaleDependent: Boolean;
    procedure set_LocaleDependent(value: Boolean);
    function get_R1C1Style: Boolean;
    procedure set_R1C1Style(value: Boolean);
    function get_CheckAddIn: Boolean;
    procedure set_CheckAddIn(value: Boolean);
    function get_Parse: Boolean;
    procedure set_Parse(value: Boolean);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property LocaleDependent: Boolean read get_LocaleDependent write set_LocaleDependent;
    property R1C1Style: Boolean read get_R1C1Style write set_R1C1Style;
    property CheckAddIn: Boolean read get_CheckAddIn write set_CheckAddIn;
    property Parse: Boolean read get_Parse write set_Parse;
  end;

  TDNFormulaParseOptions = class(TDNGenericImport<DNFormulaParseOptionsClass, DNFormulaParseOptions>) end;

  //-------------namespace: Aspose.Cells----------------
  DNGlobalizationSettingsClass = interface(DDN.mscorlib.DNObjectClass)
  ['{939085D1-55A9-54A3-BBB0-278C10210163}']
  { constructors } 

    {class} function init: DNGlobalizationSettings;

  end;

  [DNTypeName('Aspose.Cells.GlobalizationSettings')]
  DNGlobalizationSettings = interface(DDN.mscorlib.DNObject)
  ['{D03CAA60-E659-33CD-9633-DF02009FD4FA}']
  { getters & setters } 

    function get_ListSeparator: Char;
    function get_RowSeparatorOfFormulaArray: Char;
    function get_ColumnSeparatorOfFormulaArray: Char;

  { methods } 

    function GetPivotTotalName: string;
    function GetPivotGrandTotalName: string;
    function GetMultipleItemsName: string;
    function GetAllName: string;
    function GetColumnLablesName: string;
    function GetRowLablesName: string;
    function GetProtectionNameOfPivotTable: string;
    function GetColumnLabelsOfPivotTable: string;
    function GetRowLabelsNameOfPivotTable: string;
    function GetEmptyDataName: string;
    function GetSubTotalName(subTotalType: DNPivotFieldSubtotalType): string;
    function GetTotalName(functionType: DNConsolidationFunction): string;
    function GetGrandTotalName(functionType: DNConsolidationFunction): string;
    function GetOtherName: string;
    function GetTableRowTypeOfHeaders: string;
    function GetTableRowTypeOfData: string;
    function GetTableRowTypeOfAll: string;
    function GetTableRowTypeOfTotals: string;
    function GetTableRowTypeOfCurrent: string;
    function GetErrorValueString(err: string): string;
    function GetBooleanValueString(bv: Boolean): string;
    function GetLocalFunctionName(standardName: string): string;
    function GetStandardFunctionName(localName: string): string;
    function GetLocalBuiltInName(standardName: string): string;
    function GetStandardBuiltInName(localName: string): string;
    function GetStandardHeaderFooterFontStyleName(localfontStyleName: string): string;
    function GetCollationKey(v: string; ignoreCase: Boolean): DDN.mscorlib.DNIComparable;
    function Compare(v1: string; v2: string; ignoreCase: Boolean): Int32;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property ListSeparator: Char read get_ListSeparator;
    property RowSeparatorOfFormulaArray: Char read get_RowSeparatorOfFormulaArray;
    property ColumnSeparatorOfFormulaArray: Char read get_ColumnSeparatorOfFormulaArray;
  end;

  TDNGlobalizationSettings = class(TDNGenericImport<DNGlobalizationSettingsClass, DNGlobalizationSettings>) end;

  //-------------namespace: Aspose.Cells----------------
  DNHeaderFooterCommandClass = interface(DDN.mscorlib.DNObjectClass)
  ['{490B0073-0035-5486-B6E7-1808E67F40D6}']
  end;

  [DNTypeName('Aspose.Cells.HeaderFooterCommand')]
  DNHeaderFooterCommand = interface(DDN.mscorlib.DNObject)
  ['{0822801E-4BFF-3DCC-9825-E0B9286A76AE}']
  { getters & setters } 

    function get_Type: DNHeaderFooterCommandType;
    function get_Font: DNFont;
    function get_Text: string;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property &Type: DNHeaderFooterCommandType read get_Type;
    property Font: DNFont read get_Font;
    property Text: string read get_Text;
  end;

  TDNHeaderFooterCommand = class(TDNGenericImport<DNHeaderFooterCommandClass, DNHeaderFooterCommand>) end;

  //-------------namespace: Aspose.Cells----------------
  DNHorizontalPageBreakClass = interface(DDN.mscorlib.DNObjectClass)
  ['{3A9FB1B1-526C-5A4D-91C0-C80135391819}']
  end;

  [DNTypeName('Aspose.Cells.HorizontalPageBreak')]
  DNHorizontalPageBreak = interface(DDN.mscorlib.DNObject)
  ['{8E090E21-C724-3531-A14A-CF35F6B3AED8}']
  { getters & setters } 

    function get_StartColumn: Int32;
    function get_EndColumn: Int32;
    function get_Row: Int32;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property StartColumn: Int32 read get_StartColumn;
    property EndColumn: Int32 read get_EndColumn;
    property Row: Int32 read get_Row;
  end;

  TDNHorizontalPageBreak = class(TDNGenericImport<DNHorizontalPageBreakClass, DNHorizontalPageBreak>) end;

  //-------------namespace: Aspose.Cells----------------
  DNHyperlinkClass = interface(DDN.mscorlib.DNObjectClass)
  ['{80243503-B878-5C14-8582-C8129EF4754E}']
  end;

  [DNTypeName('Aspose.Cells.Hyperlink')]
  DNHyperlink = interface(DDN.mscorlib.DNObject)
  ['{B61F2F3D-A164-30B0-97B0-18AFEDBC41E9}']
  { getters & setters } 

    function get_Address: string;
    procedure set_Address(value: string);
    function get_TextToDisplay: string;
    procedure set_TextToDisplay(value: string);
    function get_Area: DNCellArea;
    function get_ScreenTip: string;
    procedure set_ScreenTip(value: string);
    function get_LinkType: DNTargetModeType;

  { methods } 

    procedure Delete;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Address: string read get_Address write set_Address;
    property TextToDisplay: string read get_TextToDisplay write set_TextToDisplay;
    property Area: DNCellArea read get_Area;
    property ScreenTip: string read get_ScreenTip write set_ScreenTip;
    property LinkType: DNTargetModeType read get_LinkType;
  end;

  TDNHyperlink = class(TDNGenericImport<DNHyperlinkClass, DNHyperlink>) end;

  //-------------namespace: Aspose.Cells----------------
  DNIconFilterClass = interface(DDN.mscorlib.DNObjectClass)
  ['{7766C057-DC39-55A5-B22A-3482EEB1CB73}']
  end;

  [DNTypeName('Aspose.Cells.IconFilter')]
  DNIconFilter = interface(DDN.mscorlib.DNObject)
  ['{E8E7584D-A523-36FC-A3B4-C6C20A9CB7F2}']
  { getters & setters } 

    function get_IconSetType: DNIconSetType;
    procedure set_IconSetType(value: DNIconSetType);
    function get_IconId: Int32;
    procedure set_IconId(value: Int32);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property IconSetType: DNIconSetType read get_IconSetType write set_IconSetType;
    property IconId: Int32 read get_IconId write set_IconId;
  end;

  TDNIconFilter = class(TDNGenericImport<DNIconFilterClass, DNIconFilter>) end;

  //-------------namespace: Aspose.Cells----------------
  DNIconSetClass = interface(DDN.mscorlib.DNObjectClass)
  ['{EC94D27B-BBBC-52DC-89A1-DC98338CBBFA}']
  end;

  [DNTypeName('Aspose.Cells.IconSet')]
  DNIconSet = interface(DDN.mscorlib.DNObject)
  ['{C76EF106-7BB1-3071-89EA-92C35181F4C0}']
  { getters & setters } 

    function get_CfIcons: DNConditionalFormattingIconCollection;
    function get_Cfvos: DNConditionalFormattingValueCollection;
    function get_Type: DNIconSetType;
    procedure set_Type(value: DNIconSetType);
    function get_IsCustom: Boolean;
    function get_ShowValue: Boolean;
    procedure set_ShowValue(value: Boolean);
    function get_Reverse: Boolean;
    procedure set_Reverse(value: Boolean);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property CfIcons: DNConditionalFormattingIconCollection read get_CfIcons;
    property Cfvos: DNConditionalFormattingValueCollection read get_Cfvos;
    property &Type: DNIconSetType read get_Type write set_Type;
    property IsCustom: Boolean read get_IsCustom;
    property ShowValue: Boolean read get_ShowValue write set_ShowValue;
    property Reverse: Boolean read get_Reverse write set_Reverse;
  end;

  TDNIconSet = class(TDNGenericImport<DNIconSetClass, DNIconSet>) end;

  //-------------namespace: Aspose.Cells----------------
  DNImportTableOptionsClass = interface(DDN.mscorlib.DNObjectClass)
  ['{E55A2233-8185-5036-A15F-F45ADC6FE617}']
  { constructors } 

    {class} function init: DNImportTableOptions;

  end;

  [DNTypeName('Aspose.Cells.ImportTableOptions')]
  DNImportTableOptions = interface(DDN.mscorlib.DNObject)
  ['{977FF3BD-8D03-3A93-9B3B-549AB9484C08}']
  { getters & setters } 

    function get_ConvertGridStyle: Boolean;
    procedure set_ConvertGridStyle(value: Boolean);
    function get_ConvertNumericData: Boolean;
    procedure set_ConvertNumericData(value: Boolean);
    function get_InsertRows: Boolean;
    procedure set_InsertRows(value: Boolean);
    function get_ShiftFirstRowDown: Boolean;
    procedure set_ShiftFirstRowDown(value: Boolean);
    function get_IsFieldNameShown: Boolean;
    procedure set_IsFieldNameShown(value: Boolean);
    function get_DateFormat: string;
    procedure set_DateFormat(value: string);
    function get_NumberFormats: TArray<string>;
    procedure set_NumberFormats(value: TArray<string>);
    function get_IsFormulas: TArray<Boolean>;
    procedure set_IsFormulas(value: TArray<Boolean>);
    function get_TotalRows: Int32;
    procedure set_TotalRows(value: Int32);
    function get_TotalColumns: Int32;
    procedure set_TotalColumns(value: Int32);
    function get_ColumnIndexes: TArray<Int32>;
    procedure set_ColumnIndexes(value: TArray<Int32>);
    function get_DefaultValues: TArray<DDN.mscorlib.DNObject>;
    procedure set_DefaultValues(value: TArray<DDN.mscorlib.DNObject>);
    function get_IsHtmlString: Boolean;
    procedure set_IsHtmlString(value: Boolean);
    function get_CheckMergedCells: Boolean;
    procedure set_CheckMergedCells(value: Boolean);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property ConvertGridStyle: Boolean read get_ConvertGridStyle write set_ConvertGridStyle;
    property ConvertNumericData: Boolean read get_ConvertNumericData write set_ConvertNumericData;
    property InsertRows: Boolean read get_InsertRows write set_InsertRows;
    property ShiftFirstRowDown: Boolean read get_ShiftFirstRowDown write set_ShiftFirstRowDown;
    property IsFieldNameShown: Boolean read get_IsFieldNameShown write set_IsFieldNameShown;
    property DateFormat: string read get_DateFormat write set_DateFormat;
    property NumberFormats: TArray<string> read get_NumberFormats write set_NumberFormats;
    property IsFormulas: TArray<Boolean> read get_IsFormulas write set_IsFormulas;
    property TotalRows: Int32 read get_TotalRows write set_TotalRows;
    property TotalColumns: Int32 read get_TotalColumns write set_TotalColumns;
    property ColumnIndexes: TArray<Int32> read get_ColumnIndexes write set_ColumnIndexes;
    property DefaultValues: TArray<DDN.mscorlib.DNObject> read get_DefaultValues write set_DefaultValues;
    property IsHtmlString: Boolean read get_IsHtmlString write set_IsHtmlString;
    property CheckMergedCells: Boolean read get_CheckMergedCells write set_CheckMergedCells;
  end;

  TDNImportTableOptions = class(TDNGenericImport<DNImportTableOptionsClass, DNImportTableOptions>) end;

  //-------------namespace: Aspose.Cells----------------
  DNIndividualFontConfigsClass = interface(DDN.mscorlib.DNObjectClass)
  ['{8CD257EE-588F-5C2D-9391-BF6EEB69E9E2}']
  { constructors } 

    {class} function init: DNIndividualFontConfigs;

  end;

  [DNTypeName('Aspose.Cells.IndividualFontConfigs')]
  DNIndividualFontConfigs = interface(DDN.mscorlib.DNObject)
  ['{7D7AAA0C-7A27-37A0-9796-F75C931D726C}']
  { methods } 

    procedure SetFontSubstitutes(originalFontName: string; substituteFontNames: TArray<string>);
    function GetFontSubstitutes(originalFontName: string): TArray<string>;
    procedure SetFontFolder(fontFolder: string; recursive: Boolean);
    procedure SetFontFolders(fontFolders: TArray<string>; recursive: Boolean);
    procedure SetFontSources(sources: TArray<DNFontSourceBase>);
    function GetFontSources: TArray<DNFontSourceBase>;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNIndividualFontConfigs = class(TDNGenericImport<DNIndividualFontConfigsClass, DNIndividualFontConfigs>) end;

  //-------------namespace: Aspose.Cells----------------
  DNInsertOptionsClass = interface(DDN.mscorlib.DNObjectClass)
  ['{9CA82D62-40C4-57C6-9B4E-2468F99B2C5E}']
  { constructors } 

    {class} function init: DNInsertOptions;

  end;

  [DNTypeName('Aspose.Cells.InsertOptions')]
  DNInsertOptions = interface(DDN.mscorlib.DNObject)
  ['{63F55A0A-80A3-3028-B8E2-D526D1F4F0F3}']
  { getters & setters } 

    function get_CopyFormatType: DNCopyFormatType;
    procedure set_CopyFormatType(value: DNCopyFormatType);
    function get_UpdateReference: Boolean;
    procedure set_UpdateReference(value: Boolean);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property CopyFormatType: DNCopyFormatType read get_CopyFormatType write set_CopyFormatType;
    property UpdateReference: Boolean read get_UpdateReference write set_UpdateReference;
  end;

  TDNInsertOptions = class(TDNGenericImport<DNInsertOptionsClass, DNInsertOptions>) end;

  //-------------namespace: Aspose.Cells----------------
  DNInterruptMonitorClass = interface(DDN.mscorlib.DNObjectClass)
  ['{7EEA3458-7322-5FAD-AD92-8E7CD93D1857}']
  { constructors } 

    {class} function init: DNInterruptMonitor;

  end;

  [DNTypeName('Aspose.Cells.InterruptMonitor')]
  DNInterruptMonitor = interface(DDN.mscorlib.DNObject)
  ['{86AE7395-A161-3F7B-9187-632BB4D81269}']
  { methods } 

    procedure Interrupt;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNInterruptMonitor = class(TDNGenericImport<DNInterruptMonitorClass, DNInterruptMonitor>) end;

  //-------------namespace: Aspose.Cells----------------
  DNLicenseClass = interface(DDN.mscorlib.DNObjectClass)
  ['{DAF205AD-9730-5636-803F-5E628823E4E6}']
  { constructors } 

    {class} function init: DNLicense;

  end;

  [DNTypeName('Aspose.Cells.License')]
  DNLicense = interface(DDN.mscorlib.DNObject)
  ['{11BFC9A6-3AE8-37C2-B5DC-F26521256433}']
  { methods } 

    procedure SetLicense(licenseName: string); overload;
    procedure SetLicense(stream: DDN.mscorlib.DNStream); overload;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNLicense = class(TDNGenericImport<DNLicenseClass, DNLicense>) end;

  //-------------namespace: Aspose.Cells----------------
  DNLoadFilterClass = interface(DDN.mscorlib.DNObjectClass)
  ['{0B96C2CC-E0EC-5DA7-AFF8-D9A04CDF7C2F}']
  { constructors } 

    {class} function init: DNLoadFilter; overload;
    {class} function init(opts: DNLoadDataFilterOptions): DNLoadFilter; overload;

  end;

  [DNTypeName('Aspose.Cells.LoadFilter')]
  DNLoadFilter = interface(DDN.mscorlib.DNObject)
  ['{F16486CB-85AA-306D-928C-9B27AB4DEDA6}']
  { getters & setters } 

    function get_LoadDataFilterOptions: DNLoadDataFilterOptions;
    procedure set_LoadDataFilterOptions(value: DNLoadDataFilterOptions);
    function get_SheetsInLoadingOrder: TArray<Int32>;

  { methods } 

    procedure StartSheet(sheet: DNWorksheet);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property LoadDataFilterOptions: DNLoadDataFilterOptions read get_LoadDataFilterOptions write set_LoadDataFilterOptions;
    property SheetsInLoadingOrder: TArray<Int32> read get_SheetsInLoadingOrder;
  end;

  TDNLoadFilter = class(TDNGenericImport<DNLoadFilterClass, DNLoadFilter>) end;

  //-------------namespace: Aspose.Cells----------------
  DNLoadOptionsClass = interface(DDN.mscorlib.DNObjectClass)
  ['{00D60D4F-038F-595C-B516-8CF91DD7A68D}']
  { constructors } 

    {class} function init: DNLoadOptions; overload;
    {class} function init(loadFormat: DNLoadFormat): DNLoadOptions; overload;

  end;

  [DNTypeName('Aspose.Cells.LoadOptions')]
  DNLoadOptions = interface(DDN.mscorlib.DNObject)
  ['{C981F25D-DBB4-3254-B5DC-9BD901348AD2}']
  { getters & setters } 

    function get_LoadFormat: DNLoadFormat;
    function get_Password: string;
    procedure set_Password(value: string);
    function get_ParsingFormulaOnOpen: Boolean;
    procedure set_ParsingFormulaOnOpen(value: Boolean);
    function get_ParsingPivotCachedRecords: Boolean;
    procedure set_ParsingPivotCachedRecords(value: Boolean);
    function get_LanguageCode: DNCountryCode;
    procedure set_LanguageCode(value: DNCountryCode);
    function get_Region: DNCountryCode;
    procedure set_Region(value: DNCountryCode);
    function get_CultureInfo: DDN.mscorlib.DNCultureInfo;
    procedure set_CultureInfo(value: DDN.mscorlib.DNCultureInfo);
    function get_StandardFont: string;
    procedure set_StandardFont(value: string);
    function get_StandardFontSize: Double;
    procedure set_StandardFontSize(value: Double);
    function get_InterruptMonitor: DNInterruptMonitor;
    procedure set_InterruptMonitor(value: DNInterruptMonitor);
    function get_IgnoreNotPrinted: Boolean;
    procedure set_IgnoreNotPrinted(value: Boolean);
    function get_CheckDataValid: Boolean;
    procedure set_CheckDataValid(value: Boolean);
    function get_CheckExcelRestriction: Boolean;
    procedure set_CheckExcelRestriction(value: Boolean);
    function get_KeepUnparsedData: Boolean;
    procedure set_KeepUnparsedData(value: Boolean);
    function get_LoadFilter: DNLoadFilter;
    procedure set_LoadFilter(value: DNLoadFilter);
    function get_LightCellsDataHandler: DNLightCellsDataHandler;
    procedure set_LightCellsDataHandler(value: DNLightCellsDataHandler);
    function get_MemorySetting: DNMemorySetting;
    procedure set_MemorySetting(value: DNMemorySetting);
    function get_WarningCallback: DNIWarningCallback;
    procedure set_WarningCallback(value: DNIWarningCallback);
    function get_AutoFitterOptions: DNAutoFitterOptions;
    procedure set_AutoFitterOptions(value: DNAutoFitterOptions);
    function get_AutoFilter: Boolean;
    procedure set_AutoFilter(value: Boolean);
    function get_FontConfigs: DNIndividualFontConfigs;
    procedure set_FontConfigs(value: DNIndividualFontConfigs);

  { methods } 

    procedure SetPaperSize(&type: DNPaperSizeType);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property LoadFormat: DNLoadFormat read get_LoadFormat;
    property Password: string read get_Password write set_Password;
    property ParsingFormulaOnOpen: Boolean read get_ParsingFormulaOnOpen write set_ParsingFormulaOnOpen;
    property ParsingPivotCachedRecords: Boolean read get_ParsingPivotCachedRecords write set_ParsingPivotCachedRecords;
    property LanguageCode: DNCountryCode read get_LanguageCode write set_LanguageCode;
    property Region: DNCountryCode read get_Region write set_Region;
    property CultureInfo: DDN.mscorlib.DNCultureInfo read get_CultureInfo write set_CultureInfo;
    property StandardFont: string read get_StandardFont write set_StandardFont;
    property StandardFontSize: Double read get_StandardFontSize write set_StandardFontSize;
    property InterruptMonitor: DNInterruptMonitor read get_InterruptMonitor write set_InterruptMonitor;
    property IgnoreNotPrinted: Boolean read get_IgnoreNotPrinted write set_IgnoreNotPrinted;
    property CheckDataValid: Boolean read get_CheckDataValid write set_CheckDataValid;
    property CheckExcelRestriction: Boolean read get_CheckExcelRestriction write set_CheckExcelRestriction;
    property KeepUnparsedData: Boolean read get_KeepUnparsedData write set_KeepUnparsedData;
    property LoadFilter: DNLoadFilter read get_LoadFilter write set_LoadFilter;
    property LightCellsDataHandler: DNLightCellsDataHandler read get_LightCellsDataHandler write set_LightCellsDataHandler;
    property MemorySetting: DNMemorySetting read get_MemorySetting write set_MemorySetting;
    property WarningCallback: DNIWarningCallback read get_WarningCallback write set_WarningCallback;
    property AutoFitterOptions: DNAutoFitterOptions read get_AutoFitterOptions write set_AutoFitterOptions;
    property AutoFilter: Boolean read get_AutoFilter write set_AutoFilter;
    property FontConfigs: DNIndividualFontConfigs read get_FontConfigs write set_FontConfigs;
  end;

  TDNLoadOptions = class(TDNGenericImport<DNLoadOptionsClass, DNLoadOptions>) end;

  //-------------namespace: Aspose.Cells----------------
  DNAbstractTextLoadOptionsClass = interface(DNLoadOptionsClass)
  ['{09C879EC-B5D4-5501-9008-64A602E398B5}']
  end;

  [DNTypeName('Aspose.Cells.AbstractTextLoadOptions')]
  DNAbstractTextLoadOptions = interface(DNLoadOptions)
  ['{53303D65-7FC2-324C-AE45-87F4502C472F}']
  { getters & setters } 

    function get_Encoding: DDN.mscorlib.DNEncoding;
    procedure set_Encoding(value: DDN.mscorlib.DNEncoding);
    function get_LoadStyleStrategy: DNTxtLoadStyleStrategy;
    procedure set_LoadStyleStrategy(value: DNTxtLoadStyleStrategy);
    function get_ConvertNumericData: Boolean;
    procedure set_ConvertNumericData(value: Boolean);
    function get_ConvertDateTimeData: Boolean;
    procedure set_ConvertDateTimeData(value: Boolean);
    function get_KeepPrecision: Boolean;
    procedure set_KeepPrecision(value: Boolean);
    function get_LoadFormat: DNLoadFormat;
    function get_Password: string;
    procedure set_Password(value: string);
    function get_ParsingFormulaOnOpen: Boolean;
    procedure set_ParsingFormulaOnOpen(value: Boolean);
    function get_ParsingPivotCachedRecords: Boolean;
    procedure set_ParsingPivotCachedRecords(value: Boolean);
    function get_LanguageCode: DNCountryCode;
    procedure set_LanguageCode(value: DNCountryCode);
    function get_Region: DNCountryCode;
    procedure set_Region(value: DNCountryCode);
    function get_CultureInfo: DDN.mscorlib.DNCultureInfo;
    procedure set_CultureInfo(value: DDN.mscorlib.DNCultureInfo);
    function get_StandardFont: string;
    procedure set_StandardFont(value: string);
    function get_StandardFontSize: Double;
    procedure set_StandardFontSize(value: Double);
    function get_InterruptMonitor: DNInterruptMonitor;
    procedure set_InterruptMonitor(value: DNInterruptMonitor);
    function get_IgnoreNotPrinted: Boolean;
    procedure set_IgnoreNotPrinted(value: Boolean);
    function get_CheckDataValid: Boolean;
    procedure set_CheckDataValid(value: Boolean);
    function get_CheckExcelRestriction: Boolean;
    procedure set_CheckExcelRestriction(value: Boolean);
    function get_KeepUnparsedData: Boolean;
    procedure set_KeepUnparsedData(value: Boolean);
    function get_LoadFilter: DNLoadFilter;
    procedure set_LoadFilter(value: DNLoadFilter);
    function get_LightCellsDataHandler: DNLightCellsDataHandler;
    procedure set_LightCellsDataHandler(value: DNLightCellsDataHandler);
    function get_MemorySetting: DNMemorySetting;
    procedure set_MemorySetting(value: DNMemorySetting);
    function get_WarningCallback: DNIWarningCallback;
    procedure set_WarningCallback(value: DNIWarningCallback);
    function get_AutoFitterOptions: DNAutoFitterOptions;
    procedure set_AutoFitterOptions(value: DNAutoFitterOptions);
    function get_AutoFilter: Boolean;
    procedure set_AutoFilter(value: Boolean);
    function get_FontConfigs: DNIndividualFontConfigs;
    procedure set_FontConfigs(value: DNIndividualFontConfigs);

  { methods } 

    procedure SetPaperSize(&type: DNPaperSizeType);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Encoding: DDN.mscorlib.DNEncoding read get_Encoding write set_Encoding;
    property LoadStyleStrategy: DNTxtLoadStyleStrategy read get_LoadStyleStrategy write set_LoadStyleStrategy;
    property ConvertNumericData: Boolean read get_ConvertNumericData write set_ConvertNumericData;
    property ConvertDateTimeData: Boolean read get_ConvertDateTimeData write set_ConvertDateTimeData;
    property KeepPrecision: Boolean read get_KeepPrecision write set_KeepPrecision;
    property LoadFormat: DNLoadFormat read get_LoadFormat;
    property Password: string read get_Password write set_Password;
    property ParsingFormulaOnOpen: Boolean read get_ParsingFormulaOnOpen write set_ParsingFormulaOnOpen;
    property ParsingPivotCachedRecords: Boolean read get_ParsingPivotCachedRecords write set_ParsingPivotCachedRecords;
    property LanguageCode: DNCountryCode read get_LanguageCode write set_LanguageCode;
    property Region: DNCountryCode read get_Region write set_Region;
    property CultureInfo: DDN.mscorlib.DNCultureInfo read get_CultureInfo write set_CultureInfo;
    property StandardFont: string read get_StandardFont write set_StandardFont;
    property StandardFontSize: Double read get_StandardFontSize write set_StandardFontSize;
    property InterruptMonitor: DNInterruptMonitor read get_InterruptMonitor write set_InterruptMonitor;
    property IgnoreNotPrinted: Boolean read get_IgnoreNotPrinted write set_IgnoreNotPrinted;
    property CheckDataValid: Boolean read get_CheckDataValid write set_CheckDataValid;
    property CheckExcelRestriction: Boolean read get_CheckExcelRestriction write set_CheckExcelRestriction;
    property KeepUnparsedData: Boolean read get_KeepUnparsedData write set_KeepUnparsedData;
    property LoadFilter: DNLoadFilter read get_LoadFilter write set_LoadFilter;
    property LightCellsDataHandler: DNLightCellsDataHandler read get_LightCellsDataHandler write set_LightCellsDataHandler;
    property MemorySetting: DNMemorySetting read get_MemorySetting write set_MemorySetting;
    property WarningCallback: DNIWarningCallback read get_WarningCallback write set_WarningCallback;
    property AutoFitterOptions: DNAutoFitterOptions read get_AutoFitterOptions write set_AutoFitterOptions;
    property AutoFilter: Boolean read get_AutoFilter write set_AutoFilter;
    property FontConfigs: DNIndividualFontConfigs read get_FontConfigs write set_FontConfigs;
  end;

  TDNAbstractTextLoadOptions = class(TDNGenericImport<DNAbstractTextLoadOptionsClass, DNAbstractTextLoadOptions>) end;

  //-------------namespace: Aspose.Cells----------------
  DNHtmlLoadOptionsClass = interface(DNAbstractTextLoadOptionsClass)
  ['{483B862C-B354-5EED-A543-F802AD0FB06C}']
  { constructors } 

    {class} function init: DNHtmlLoadOptions; overload;
    {class} function init(loadFormat: DNLoadFormat): DNHtmlLoadOptions; overload;

  end;

  [DNTypeName('Aspose.Cells.HtmlLoadOptions')]
  DNHtmlLoadOptions = interface(DNAbstractTextLoadOptions)
  ['{1FBDC63A-EF26-3F9D-B3EA-B29D328A8AA5}']
  { getters & setters } 

    function get_AttachedFilesDirectory: string;
    procedure set_AttachedFilesDirectory(value: string);
    function get_LoadFormulas: Boolean;
    procedure set_LoadFormulas(value: Boolean);
    function get_SupportDivTag: Boolean;
    procedure set_SupportDivTag(value: Boolean);
    function get_DeleteRedundantSpaces: Boolean;
    procedure set_DeleteRedundantSpaces(value: Boolean);
    function get_AutoFitColsAndRows: Boolean;
    procedure set_AutoFitColsAndRows(value: Boolean);
    function get_ConvertFormulasData: Boolean;
    procedure set_ConvertFormulasData(value: Boolean);
    function get_StreamProvider: DNIStreamProvider;
    procedure set_StreamProvider(value: DNIStreamProvider);
    function get_ProgId: string;
    function get_Encoding: DDN.mscorlib.DNEncoding;
    procedure set_Encoding(value: DDN.mscorlib.DNEncoding);
    function get_LoadStyleStrategy: DNTxtLoadStyleStrategy;
    procedure set_LoadStyleStrategy(value: DNTxtLoadStyleStrategy);
    function get_ConvertNumericData: Boolean;
    procedure set_ConvertNumericData(value: Boolean);
    function get_ConvertDateTimeData: Boolean;
    procedure set_ConvertDateTimeData(value: Boolean);
    function get_KeepPrecision: Boolean;
    procedure set_KeepPrecision(value: Boolean);
    function get_LoadFormat: DNLoadFormat;
    function get_Password: string;
    procedure set_Password(value: string);
    function get_ParsingFormulaOnOpen: Boolean;
    procedure set_ParsingFormulaOnOpen(value: Boolean);
    function get_ParsingPivotCachedRecords: Boolean;
    procedure set_ParsingPivotCachedRecords(value: Boolean);
    function get_LanguageCode: DNCountryCode;
    procedure set_LanguageCode(value: DNCountryCode);
    function get_Region: DNCountryCode;
    procedure set_Region(value: DNCountryCode);
    function get_CultureInfo: DDN.mscorlib.DNCultureInfo;
    procedure set_CultureInfo(value: DDN.mscorlib.DNCultureInfo);
    function get_StandardFont: string;
    procedure set_StandardFont(value: string);
    function get_StandardFontSize: Double;
    procedure set_StandardFontSize(value: Double);
    function get_InterruptMonitor: DNInterruptMonitor;
    procedure set_InterruptMonitor(value: DNInterruptMonitor);
    function get_IgnoreNotPrinted: Boolean;
    procedure set_IgnoreNotPrinted(value: Boolean);
    function get_CheckDataValid: Boolean;
    procedure set_CheckDataValid(value: Boolean);
    function get_CheckExcelRestriction: Boolean;
    procedure set_CheckExcelRestriction(value: Boolean);
    function get_KeepUnparsedData: Boolean;
    procedure set_KeepUnparsedData(value: Boolean);
    function get_LoadFilter: DNLoadFilter;
    procedure set_LoadFilter(value: DNLoadFilter);
    function get_LightCellsDataHandler: DNLightCellsDataHandler;
    procedure set_LightCellsDataHandler(value: DNLightCellsDataHandler);
    function get_MemorySetting: DNMemorySetting;
    procedure set_MemorySetting(value: DNMemorySetting);
    function get_WarningCallback: DNIWarningCallback;
    procedure set_WarningCallback(value: DNIWarningCallback);
    function get_AutoFitterOptions: DNAutoFitterOptions;
    procedure set_AutoFitterOptions(value: DNAutoFitterOptions);
    function get_AutoFilter: Boolean;
    procedure set_AutoFilter(value: Boolean);
    function get_FontConfigs: DNIndividualFontConfigs;
    procedure set_FontConfigs(value: DNIndividualFontConfigs);

  { methods } 

    procedure SetPaperSize(&type: DNPaperSizeType);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property AttachedFilesDirectory: string read get_AttachedFilesDirectory write set_AttachedFilesDirectory;
    property LoadFormulas: Boolean read get_LoadFormulas write set_LoadFormulas;
    property SupportDivTag: Boolean read get_SupportDivTag write set_SupportDivTag;
    property DeleteRedundantSpaces: Boolean read get_DeleteRedundantSpaces write set_DeleteRedundantSpaces;
    property AutoFitColsAndRows: Boolean read get_AutoFitColsAndRows write set_AutoFitColsAndRows;
    property ConvertFormulasData: Boolean read get_ConvertFormulasData write set_ConvertFormulasData;
    property StreamProvider: DNIStreamProvider read get_StreamProvider write set_StreamProvider;
    property ProgId: string read get_ProgId;
    property Encoding: DDN.mscorlib.DNEncoding read get_Encoding write set_Encoding;
    property LoadStyleStrategy: DNTxtLoadStyleStrategy read get_LoadStyleStrategy write set_LoadStyleStrategy;
    property ConvertNumericData: Boolean read get_ConvertNumericData write set_ConvertNumericData;
    property ConvertDateTimeData: Boolean read get_ConvertDateTimeData write set_ConvertDateTimeData;
    property KeepPrecision: Boolean read get_KeepPrecision write set_KeepPrecision;
    property LoadFormat: DNLoadFormat read get_LoadFormat;
    property Password: string read get_Password write set_Password;
    property ParsingFormulaOnOpen: Boolean read get_ParsingFormulaOnOpen write set_ParsingFormulaOnOpen;
    property ParsingPivotCachedRecords: Boolean read get_ParsingPivotCachedRecords write set_ParsingPivotCachedRecords;
    property LanguageCode: DNCountryCode read get_LanguageCode write set_LanguageCode;
    property Region: DNCountryCode read get_Region write set_Region;
    property CultureInfo: DDN.mscorlib.DNCultureInfo read get_CultureInfo write set_CultureInfo;
    property StandardFont: string read get_StandardFont write set_StandardFont;
    property StandardFontSize: Double read get_StandardFontSize write set_StandardFontSize;
    property InterruptMonitor: DNInterruptMonitor read get_InterruptMonitor write set_InterruptMonitor;
    property IgnoreNotPrinted: Boolean read get_IgnoreNotPrinted write set_IgnoreNotPrinted;
    property CheckDataValid: Boolean read get_CheckDataValid write set_CheckDataValid;
    property CheckExcelRestriction: Boolean read get_CheckExcelRestriction write set_CheckExcelRestriction;
    property KeepUnparsedData: Boolean read get_KeepUnparsedData write set_KeepUnparsedData;
    property LoadFilter: DNLoadFilter read get_LoadFilter write set_LoadFilter;
    property LightCellsDataHandler: DNLightCellsDataHandler read get_LightCellsDataHandler write set_LightCellsDataHandler;
    property MemorySetting: DNMemorySetting read get_MemorySetting write set_MemorySetting;
    property WarningCallback: DNIWarningCallback read get_WarningCallback write set_WarningCallback;
    property AutoFitterOptions: DNAutoFitterOptions read get_AutoFitterOptions write set_AutoFitterOptions;
    property AutoFilter: Boolean read get_AutoFilter write set_AutoFilter;
    property FontConfigs: DNIndividualFontConfigs read get_FontConfigs write set_FontConfigs;
  end;

  TDNHtmlLoadOptions = class(TDNGenericImport<DNHtmlLoadOptionsClass, DNHtmlLoadOptions>) end;

  //-------------namespace: Aspose.Cells----------------
  DNTxtLoadOptionsClass = interface(DNAbstractTextLoadOptionsClass)
  ['{25B647B6-269B-587C-BE03-1AEB6EAEAC0A}']
  { constructors } 

    {class} function init: DNTxtLoadOptions; overload;
    {class} function init(loadFormat: DNLoadFormat): DNTxtLoadOptions; overload;

  end;

  [DNTypeName('Aspose.Cells.TxtLoadOptions')]
  DNTxtLoadOptions = interface(DNAbstractTextLoadOptions)
  ['{CA1C381B-1D51-3F95-B711-3C557587E69A}']
  { getters & setters } 

    function get_Separator: Char;
    procedure set_Separator(value: Char);
    function get_SeparatorString: string;
    procedure set_SeparatorString(value: string);
    function get_IsMultiEncoded: Boolean;
    procedure set_IsMultiEncoded(value: Boolean);
    function get_PreferredParsers: TArray<DNICustomParser>;
    procedure set_PreferredParsers(value: TArray<DNICustomParser>);
    function get_HasFormula: Boolean;
    procedure set_HasFormula(value: Boolean);
    function get_HasTextQualifier: Boolean;
    procedure set_HasTextQualifier(value: Boolean);
    function get_TextQualifier: Char;
    procedure set_TextQualifier(value: Char);
    function get_TreatConsecutiveDelimitersAsOne: Boolean;
    procedure set_TreatConsecutiveDelimitersAsOne(value: Boolean);
    function get_TreatQuotePrefixAsValue: Boolean;
    procedure set_TreatQuotePrefixAsValue(value: Boolean);
    function get_Encoding: DDN.mscorlib.DNEncoding;
    procedure set_Encoding(value: DDN.mscorlib.DNEncoding);
    function get_LoadStyleStrategy: DNTxtLoadStyleStrategy;
    procedure set_LoadStyleStrategy(value: DNTxtLoadStyleStrategy);
    function get_ConvertNumericData: Boolean;
    procedure set_ConvertNumericData(value: Boolean);
    function get_ConvertDateTimeData: Boolean;
    procedure set_ConvertDateTimeData(value: Boolean);
    function get_KeepPrecision: Boolean;
    procedure set_KeepPrecision(value: Boolean);
    function get_LoadFormat: DNLoadFormat;
    function get_Password: string;
    procedure set_Password(value: string);
    function get_ParsingFormulaOnOpen: Boolean;
    procedure set_ParsingFormulaOnOpen(value: Boolean);
    function get_ParsingPivotCachedRecords: Boolean;
    procedure set_ParsingPivotCachedRecords(value: Boolean);
    function get_LanguageCode: DNCountryCode;
    procedure set_LanguageCode(value: DNCountryCode);
    function get_Region: DNCountryCode;
    procedure set_Region(value: DNCountryCode);
    function get_CultureInfo: DDN.mscorlib.DNCultureInfo;
    procedure set_CultureInfo(value: DDN.mscorlib.DNCultureInfo);
    function get_StandardFont: string;
    procedure set_StandardFont(value: string);
    function get_StandardFontSize: Double;
    procedure set_StandardFontSize(value: Double);
    function get_InterruptMonitor: DNInterruptMonitor;
    procedure set_InterruptMonitor(value: DNInterruptMonitor);
    function get_IgnoreNotPrinted: Boolean;
    procedure set_IgnoreNotPrinted(value: Boolean);
    function get_CheckDataValid: Boolean;
    procedure set_CheckDataValid(value: Boolean);
    function get_CheckExcelRestriction: Boolean;
    procedure set_CheckExcelRestriction(value: Boolean);
    function get_KeepUnparsedData: Boolean;
    procedure set_KeepUnparsedData(value: Boolean);
    function get_LoadFilter: DNLoadFilter;
    procedure set_LoadFilter(value: DNLoadFilter);
    function get_LightCellsDataHandler: DNLightCellsDataHandler;
    procedure set_LightCellsDataHandler(value: DNLightCellsDataHandler);
    function get_MemorySetting: DNMemorySetting;
    procedure set_MemorySetting(value: DNMemorySetting);
    function get_WarningCallback: DNIWarningCallback;
    procedure set_WarningCallback(value: DNIWarningCallback);
    function get_AutoFitterOptions: DNAutoFitterOptions;
    procedure set_AutoFitterOptions(value: DNAutoFitterOptions);
    function get_AutoFilter: Boolean;
    procedure set_AutoFilter(value: Boolean);
    function get_FontConfigs: DNIndividualFontConfigs;
    procedure set_FontConfigs(value: DNIndividualFontConfigs);

  { methods } 

    procedure SetPaperSize(&type: DNPaperSizeType);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Separator: Char read get_Separator write set_Separator;
    property SeparatorString: string read get_SeparatorString write set_SeparatorString;
    property IsMultiEncoded: Boolean read get_IsMultiEncoded write set_IsMultiEncoded;
    property PreferredParsers: TArray<DNICustomParser> read get_PreferredParsers write set_PreferredParsers;
    property HasFormula: Boolean read get_HasFormula write set_HasFormula;
    property HasTextQualifier: Boolean read get_HasTextQualifier write set_HasTextQualifier;
    property TextQualifier: Char read get_TextQualifier write set_TextQualifier;
    property TreatConsecutiveDelimitersAsOne: Boolean read get_TreatConsecutiveDelimitersAsOne write set_TreatConsecutiveDelimitersAsOne;
    property TreatQuotePrefixAsValue: Boolean read get_TreatQuotePrefixAsValue write set_TreatQuotePrefixAsValue;
    property Encoding: DDN.mscorlib.DNEncoding read get_Encoding write set_Encoding;
    property LoadStyleStrategy: DNTxtLoadStyleStrategy read get_LoadStyleStrategy write set_LoadStyleStrategy;
    property ConvertNumericData: Boolean read get_ConvertNumericData write set_ConvertNumericData;
    property ConvertDateTimeData: Boolean read get_ConvertDateTimeData write set_ConvertDateTimeData;
    property KeepPrecision: Boolean read get_KeepPrecision write set_KeepPrecision;
    property LoadFormat: DNLoadFormat read get_LoadFormat;
    property Password: string read get_Password write set_Password;
    property ParsingFormulaOnOpen: Boolean read get_ParsingFormulaOnOpen write set_ParsingFormulaOnOpen;
    property ParsingPivotCachedRecords: Boolean read get_ParsingPivotCachedRecords write set_ParsingPivotCachedRecords;
    property LanguageCode: DNCountryCode read get_LanguageCode write set_LanguageCode;
    property Region: DNCountryCode read get_Region write set_Region;
    property CultureInfo: DDN.mscorlib.DNCultureInfo read get_CultureInfo write set_CultureInfo;
    property StandardFont: string read get_StandardFont write set_StandardFont;
    property StandardFontSize: Double read get_StandardFontSize write set_StandardFontSize;
    property InterruptMonitor: DNInterruptMonitor read get_InterruptMonitor write set_InterruptMonitor;
    property IgnoreNotPrinted: Boolean read get_IgnoreNotPrinted write set_IgnoreNotPrinted;
    property CheckDataValid: Boolean read get_CheckDataValid write set_CheckDataValid;
    property CheckExcelRestriction: Boolean read get_CheckExcelRestriction write set_CheckExcelRestriction;
    property KeepUnparsedData: Boolean read get_KeepUnparsedData write set_KeepUnparsedData;
    property LoadFilter: DNLoadFilter read get_LoadFilter write set_LoadFilter;
    property LightCellsDataHandler: DNLightCellsDataHandler read get_LightCellsDataHandler write set_LightCellsDataHandler;
    property MemorySetting: DNMemorySetting read get_MemorySetting write set_MemorySetting;
    property WarningCallback: DNIWarningCallback read get_WarningCallback write set_WarningCallback;
    property AutoFitterOptions: DNAutoFitterOptions read get_AutoFitterOptions write set_AutoFitterOptions;
    property AutoFilter: Boolean read get_AutoFilter write set_AutoFilter;
    property FontConfigs: DNIndividualFontConfigs read get_FontConfigs write set_FontConfigs;
  end;

  TDNTxtLoadOptions = class(TDNGenericImport<DNTxtLoadOptionsClass, DNTxtLoadOptions>) end;

  //-------------namespace: Aspose.Cells----------------
  DNOdsLoadOptionsClass = interface(DNLoadOptionsClass)
  ['{81C44E3B-E7A0-59E6-A242-624A08BD1584}']
  { constructors } 

    {class} function init: DNOdsLoadOptions; overload;
    {class} function init(&type: DNLoadFormat): DNOdsLoadOptions; overload;

  end;

  [DNTypeName('Aspose.Cells.OdsLoadOptions')]
  DNOdsLoadOptions = interface(DNLoadOptions)
  ['{EC8372C7-2A83-3EC1-A5F9-8F8A75AF19BC}']
  { getters & setters } 

    function get_ApplyExcelDefaultStyleToHyperlink: Boolean;
    procedure set_ApplyExcelDefaultStyleToHyperlink(value: Boolean);
    function get_RefreshPivotTables: Boolean;
    procedure set_RefreshPivotTables(value: Boolean);
    function get_LoadFormat: DNLoadFormat;
    function get_Password: string;
    procedure set_Password(value: string);
    function get_ParsingFormulaOnOpen: Boolean;
    procedure set_ParsingFormulaOnOpen(value: Boolean);
    function get_ParsingPivotCachedRecords: Boolean;
    procedure set_ParsingPivotCachedRecords(value: Boolean);
    function get_LanguageCode: DNCountryCode;
    procedure set_LanguageCode(value: DNCountryCode);
    function get_Region: DNCountryCode;
    procedure set_Region(value: DNCountryCode);
    function get_CultureInfo: DDN.mscorlib.DNCultureInfo;
    procedure set_CultureInfo(value: DDN.mscorlib.DNCultureInfo);
    function get_StandardFont: string;
    procedure set_StandardFont(value: string);
    function get_StandardFontSize: Double;
    procedure set_StandardFontSize(value: Double);
    function get_InterruptMonitor: DNInterruptMonitor;
    procedure set_InterruptMonitor(value: DNInterruptMonitor);
    function get_IgnoreNotPrinted: Boolean;
    procedure set_IgnoreNotPrinted(value: Boolean);
    function get_CheckDataValid: Boolean;
    procedure set_CheckDataValid(value: Boolean);
    function get_CheckExcelRestriction: Boolean;
    procedure set_CheckExcelRestriction(value: Boolean);
    function get_KeepUnparsedData: Boolean;
    procedure set_KeepUnparsedData(value: Boolean);
    function get_LoadFilter: DNLoadFilter;
    procedure set_LoadFilter(value: DNLoadFilter);
    function get_LightCellsDataHandler: DNLightCellsDataHandler;
    procedure set_LightCellsDataHandler(value: DNLightCellsDataHandler);
    function get_MemorySetting: DNMemorySetting;
    procedure set_MemorySetting(value: DNMemorySetting);
    function get_WarningCallback: DNIWarningCallback;
    procedure set_WarningCallback(value: DNIWarningCallback);
    function get_AutoFitterOptions: DNAutoFitterOptions;
    procedure set_AutoFitterOptions(value: DNAutoFitterOptions);
    function get_AutoFilter: Boolean;
    procedure set_AutoFilter(value: Boolean);
    function get_FontConfigs: DNIndividualFontConfigs;
    procedure set_FontConfigs(value: DNIndividualFontConfigs);

  { methods } 

    procedure SetPaperSize(&type: DNPaperSizeType);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property ApplyExcelDefaultStyleToHyperlink: Boolean read get_ApplyExcelDefaultStyleToHyperlink write set_ApplyExcelDefaultStyleToHyperlink;
    property RefreshPivotTables: Boolean read get_RefreshPivotTables write set_RefreshPivotTables;
    property LoadFormat: DNLoadFormat read get_LoadFormat;
    property Password: string read get_Password write set_Password;
    property ParsingFormulaOnOpen: Boolean read get_ParsingFormulaOnOpen write set_ParsingFormulaOnOpen;
    property ParsingPivotCachedRecords: Boolean read get_ParsingPivotCachedRecords write set_ParsingPivotCachedRecords;
    property LanguageCode: DNCountryCode read get_LanguageCode write set_LanguageCode;
    property Region: DNCountryCode read get_Region write set_Region;
    property CultureInfo: DDN.mscorlib.DNCultureInfo read get_CultureInfo write set_CultureInfo;
    property StandardFont: string read get_StandardFont write set_StandardFont;
    property StandardFontSize: Double read get_StandardFontSize write set_StandardFontSize;
    property InterruptMonitor: DNInterruptMonitor read get_InterruptMonitor write set_InterruptMonitor;
    property IgnoreNotPrinted: Boolean read get_IgnoreNotPrinted write set_IgnoreNotPrinted;
    property CheckDataValid: Boolean read get_CheckDataValid write set_CheckDataValid;
    property CheckExcelRestriction: Boolean read get_CheckExcelRestriction write set_CheckExcelRestriction;
    property KeepUnparsedData: Boolean read get_KeepUnparsedData write set_KeepUnparsedData;
    property LoadFilter: DNLoadFilter read get_LoadFilter write set_LoadFilter;
    property LightCellsDataHandler: DNLightCellsDataHandler read get_LightCellsDataHandler write set_LightCellsDataHandler;
    property MemorySetting: DNMemorySetting read get_MemorySetting write set_MemorySetting;
    property WarningCallback: DNIWarningCallback read get_WarningCallback write set_WarningCallback;
    property AutoFitterOptions: DNAutoFitterOptions read get_AutoFitterOptions write set_AutoFitterOptions;
    property AutoFilter: Boolean read get_AutoFilter write set_AutoFilter;
    property FontConfigs: DNIndividualFontConfigs read get_FontConfigs write set_FontConfigs;
  end;

  TDNOdsLoadOptions = class(TDNGenericImport<DNOdsLoadOptionsClass, DNOdsLoadOptions>) end;

  //-------------namespace: Aspose.Cells.Markup----------------
  DNCustomXmlPartClass = interface(DDN.mscorlib.DNObjectClass)
  ['{61EF65C0-4F0A-55C4-A61A-602106448424}']
  end;

  [DNTypeName('Aspose.Cells.Markup.CustomXmlPart')]
  DNCustomXmlPart = interface(DDN.mscorlib.DNObject)
  ['{EDC0FFA8-9C39-340A-9331-7498F0EED6D8}']
  { getters & setters } 

    function get_Data: TArray<Byte>;
    procedure set_Data(value: TArray<Byte>);
    function get_SchemaData: TArray<Byte>;
    procedure set_SchemaData(value: TArray<Byte>);
    function get_ID: string;
    procedure set_ID(value: string);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Data: TArray<Byte> read get_Data write set_Data;
    property SchemaData: TArray<Byte> read get_SchemaData write set_SchemaData;
    property ID: string read get_ID write set_ID;
  end;

  TDNCustomXmlPart = class(TDNGenericImport<DNCustomXmlPartClass, DNCustomXmlPart>) end;

  //-------------namespace: Aspose.Cells.Markup----------------
  DNSmartTagClass = interface(DDN.mscorlib.DNObjectClass)
  ['{086612CB-06BA-537C-BE8F-5754A2BF4524}']
  end;

  [DNTypeName('Aspose.Cells.Markup.SmartTag')]
  DNSmartTag = interface(DDN.mscorlib.DNObject)
  ['{AA66B7CD-9051-39CD-B00D-1C2358D331FA}']
  { getters & setters } 

    function get_Deleted: Boolean;
    procedure set_Deleted(value: Boolean);
    function get_Properties: DNSmartTagPropertyCollection;
    procedure set_Properties(value: DNSmartTagPropertyCollection);
    function get_Uri: string;
    function get_Name: string;

  { methods } 

    procedure SetLink(uri: string; name: string);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Deleted: Boolean read get_Deleted write set_Deleted;
    property Properties: DNSmartTagPropertyCollection read get_Properties write set_Properties;
    property Uri: string read get_Uri;
    property Name: string read get_Name;
  end;

  TDNSmartTag = class(TDNGenericImport<DNSmartTagClass, DNSmartTag>) end;

  //-------------namespace: Aspose.Cells.Markup----------------
  DNSmartTagOptionsClass = interface(DDN.mscorlib.DNObjectClass)
  ['{73471701-9661-526F-82B5-D77035030BD0}']
  { constructors } 

    {class} function init: DNSmartTagOptions;

  end;

  [DNTypeName('Aspose.Cells.Markup.SmartTagOptions')]
  DNSmartTagOptions = interface(DDN.mscorlib.DNObject)
  ['{14F7ED66-A98A-3A50-B1C3-D0C3F0E14B7A}']
  { getters & setters } 

    function get_EmbedSmartTags: Boolean;
    procedure set_EmbedSmartTags(value: Boolean);
    function get_ShowType: DNSmartTagShowType;
    procedure set_ShowType(value: DNSmartTagShowType);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property EmbedSmartTags: Boolean read get_EmbedSmartTags write set_EmbedSmartTags;
    property ShowType: DNSmartTagShowType read get_ShowType write set_ShowType;
  end;

  TDNSmartTagOptions = class(TDNGenericImport<DNSmartTagOptionsClass, DNSmartTagOptions>) end;

  //-------------namespace: Aspose.Cells.Markup----------------
  DNSmartTagPropertyClass = interface(DDN.mscorlib.DNObjectClass)
  ['{2FC24BD6-3F9A-52A8-AE73-9FEE2D645591}']
  end;

  [DNTypeName('Aspose.Cells.Markup.SmartTagProperty')]
  DNSmartTagProperty = interface(DDN.mscorlib.DNObject)
  ['{97C73A52-7F98-3540-B297-E749C57C1744}']
  { getters & setters } 

    function get_Name: string;
    procedure set_Name(value: string);
    function get_Value: string;
    procedure set_Value(value: string);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Name: string read get_Name write set_Name;
    property Value: string read get_Value write set_Value;
  end;

  TDNSmartTagProperty = class(TDNGenericImport<DNSmartTagPropertyClass, DNSmartTagProperty>) end;

  //-------------namespace: Aspose.Cells.Metadata----------------
  DNMetadataOptionsClass = interface(DDN.mscorlib.DNObjectClass)
  ['{6ED63B31-614C-5395-A07C-FBBBD3778B1D}']
  { constructors } 

    {class} function init(metadataType: DNMetadataType): DNMetadataOptions;

  end;

  [DNTypeName('Aspose.Cells.Metadata.MetadataOptions')]
  DNMetadataOptions = interface(DDN.mscorlib.DNObject)
  ['{06B99F9F-AFD5-304D-9AD0-E374B2C621F4}']
  { getters & setters } 

    function get_MetadataType: DNMetadataType;
    function get_Password: string;
    procedure set_Password(value: string);
    function get_KeyLength: Int32;
    procedure set_KeyLength(value: Int32);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property MetadataType: DNMetadataType read get_MetadataType;
    property Password: string read get_Password write set_Password;
    property KeyLength: Int32 read get_KeyLength write set_KeyLength;
  end;

  TDNMetadataOptions = class(TDNGenericImport<DNMetadataOptionsClass, DNMetadataOptions>) end;

  //-------------namespace: Aspose.Cells.Metadata----------------
  DNWorkbookMetadataClass = interface(DDN.mscorlib.DNObjectClass)
  ['{6A47462F-66E8-50D6-8D36-3BB668E6A9F1}']
  { constructors } 

    {class} function init(fileName: string; options: DNMetadataOptions): DNWorkbookMetadata; overload;
    {class} function init(stream: DDN.mscorlib.DNStream; options: DNMetadataOptions): DNWorkbookMetadata; overload;

  end;

  [DNTypeName('Aspose.Cells.Metadata.WorkbookMetadata')]
  DNWorkbookMetadata = interface(DDN.mscorlib.DNObject)
  ['{2C520D63-B9C9-3562-A65B-2AFDAD522510}']
  { getters & setters } 

    function get_Options: DNMetadataOptions;
    function get_BuiltInDocumentProperties: DNBuiltInDocumentPropertyCollection;
    function get_CustomDocumentProperties: DNCustomDocumentPropertyCollection;

  { methods } 

    procedure Save(fileName: string); overload;
    procedure Save(stream: DDN.mscorlib.DNStream); overload;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Options: DNMetadataOptions read get_Options;
    property BuiltInDocumentProperties: DNBuiltInDocumentPropertyCollection read get_BuiltInDocumentProperties;
    property CustomDocumentProperties: DNCustomDocumentPropertyCollection read get_CustomDocumentProperties;
  end;

  TDNWorkbookMetadata = class(TDNGenericImport<DNWorkbookMetadataClass, DNWorkbookMetadata>) end;

  //-------------namespace: Aspose.Cells----------------
  DNMeteredClass = interface(DDN.mscorlib.DNObjectClass)
  ['{99F8C01E-5B95-5A13-BB86-C5BD0A8F7D7B}']
  { constructors } 

    {class} function init: DNMetered;

  { static methods } 

    {class} function GetConsumptionQuantity: DDN.mscorlib.DNDecimal;
    {class} function GetConsumptionCredit: DDN.mscorlib.DNDecimal;

  end;

  [DNTypeName('Aspose.Cells.Metered')]
  DNMetered = interface(DDN.mscorlib.DNObject)
  ['{8A9E6A10-24A2-3480-AD82-D083CFA18C6E}']
  { methods } 

    procedure SetMeteredKey(publicKey: string; privateKey: string);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNMetered = class(TDNGenericImport<DNMeteredClass, DNMetered>) end;

  //-------------namespace: Aspose.Cells----------------
  DNNameClass = interface(DDN.mscorlib.DNObjectClass)
  ['{24CC78A9-0D15-53A9-92DF-EE2E1D27642A}']
  end;

  [DNTypeName('Aspose.Cells.Name')]
  DNName = interface(DDN.mscorlib.DNObject)
  ['{37A9A4D6-B121-3CE5-8E11-C334F78A69C2}']
  { getters & setters } 

    function get_Comment: string;
    procedure set_Comment(value: string);
    function get_Text: string;
    procedure set_Text(value: string);
    function get_FullText: string;
    function get_RefersTo: string;
    procedure set_RefersTo(value: string);
    function get_R1C1RefersTo: string;
    procedure set_R1C1RefersTo(value: string);
    function get_IsReferred: Boolean;
    function get_IsVisible: Boolean;
    procedure set_IsVisible(value: Boolean);
    function get_SheetIndex: Int32;
    procedure set_SheetIndex(value: Int32);

  { methods } 

    function GetRefersTo(isR1C1: Boolean; isLocal: Boolean): string;
    procedure SetRefersTo(refersTo: string; isR1C1: Boolean; isLocal: Boolean);
    function ToString: string;
    function GetRanges: TArray<DNRange>; overload;
    function GetRanges(recalculate: Boolean): TArray<DNRange>; overload;
    function GetReferredAreas(recalculate: Boolean): TArray<DNReferredArea>;
    function GetRange: DNRange; overload;
    function GetRange(recalculate: Boolean): DNRange; overload;
    function GetRange(sheetIndex: Int32; row: Int32; column: Int32): DNRange; overload;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    property Comment: string read get_Comment write set_Comment;
    property Text: string read get_Text write set_Text;
    property FullText: string read get_FullText;
    property RefersTo: string read get_RefersTo write set_RefersTo;
    property R1C1RefersTo: string read get_R1C1RefersTo write set_R1C1RefersTo;
    property IsReferred: Boolean read get_IsReferred;
    property IsVisible: Boolean read get_IsVisible write set_IsVisible;
    property SheetIndex: Int32 read get_SheetIndex write set_SheetIndex;
  end;

  TDNName = class(TDNGenericImport<DNNameClass, DNName>) end;

  //-------------namespace: Aspose.Cells----------------
  DNNegativeBarFormatClass = interface(DDN.mscorlib.DNObjectClass)
  ['{345DAD0E-41B7-5688-958D-C650210FB427}']
  end;

  [DNTypeName('Aspose.Cells.NegativeBarFormat')]
  DNNegativeBarFormat = interface(DDN.mscorlib.DNObject)
  ['{B8AB8660-EF11-3D5D-B4D7-7CADD88E8791}']
  { getters & setters } 

    function get_BorderColor: DDN.System.Drawing.DNColor;
    procedure set_BorderColor(value: DDN.System.Drawing.DNColor);
    function get_BorderColorType: DNDataBarNegativeColorType;
    procedure set_BorderColorType(value: DNDataBarNegativeColorType);
    function get_Color: DDN.System.Drawing.DNColor;
    procedure set_Color(value: DDN.System.Drawing.DNColor);
    function get_ColorType: DNDataBarNegativeColorType;
    procedure set_ColorType(value: DNDataBarNegativeColorType);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property BorderColor: DDN.System.Drawing.DNColor read get_BorderColor write set_BorderColor;
    property BorderColorType: DNDataBarNegativeColorType read get_BorderColorType write set_BorderColorType;
    property Color: DDN.System.Drawing.DNColor read get_Color write set_Color;
    property ColorType: DNDataBarNegativeColorType read get_ColorType write set_ColorType;
  end;

  TDNNegativeBarFormat = class(TDNGenericImport<DNNegativeBarFormatClass, DNNegativeBarFormat>) end;

  //-------------namespace: Aspose.Cells.Ods----------------
  DNOdsCellFieldClass = interface(DDN.mscorlib.DNObjectClass)
  ['{4CF13334-E4C3-5162-8F37-CCB083BA4610}']
  end;

  [DNTypeName('Aspose.Cells.Ods.OdsCellField')]
  DNOdsCellField = interface(DDN.mscorlib.DNObject)
  ['{E750A888-4860-3E60-9ABE-99A198A71CFC}']
  { getters & setters } 

    function get_CustomFormat: string;
    procedure set_CustomFormat(value: string);
    function get_FieldType: DNOdsCellFieldType;
    procedure set_FieldType(value: DNOdsCellFieldType);
    function get_Row: Int32;
    procedure set_Row(value: Int32);
    function get_Column: Int32;
    procedure set_Column(value: Int32);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property CustomFormat: string read get_CustomFormat write set_CustomFormat;
    property FieldType: DNOdsCellFieldType read get_FieldType write set_FieldType;
    property Row: Int32 read get_Row write set_Row;
    property Column: Int32 read get_Column write set_Column;
  end;

  TDNOdsCellField = class(TDNGenericImport<DNOdsCellFieldClass, DNOdsCellField>) end;

  //-------------namespace: Aspose.Cells.Ods----------------
  DNOdsPageBackgroundClass = interface(DDN.mscorlib.DNObjectClass)
  ['{7DB4C07A-7E64-50BA-B1DA-ECF79C96AC23}']
  { constructors } 

    {class} function init: DNOdsPageBackground;

  end;

  [DNTypeName('Aspose.Cells.Ods.OdsPageBackground')]
  DNOdsPageBackground = interface(DDN.mscorlib.DNObject)
  ['{752380CE-9C92-3262-AF5A-F324E41C9D34}']
  { getters & setters } 

    function get_Type: DNOdsPageBackgroundType;
    procedure set_Type(value: DNOdsPageBackgroundType);
    function get_Color: DDN.System.Drawing.DNColor;
    procedure set_Color(value: DDN.System.Drawing.DNColor);
    function get_GraphicType: DNOdsPageBackgroundGraphicType;
    procedure set_GraphicType(value: DNOdsPageBackgroundGraphicType);
    function get_GraphicPositionType: DNOdsPageBackgroundGraphicPositionType;
    procedure set_GraphicPositionType(value: DNOdsPageBackgroundGraphicPositionType);
    function get_IsLink: Boolean;
    function get_LinkedGraphic: string;
    procedure set_LinkedGraphic(value: string);
    function get_GraphicData: TArray<Byte>;
    procedure set_GraphicData(value: TArray<Byte>);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property &Type: DNOdsPageBackgroundType read get_Type write set_Type;
    property Color: DDN.System.Drawing.DNColor read get_Color write set_Color;
    property GraphicType: DNOdsPageBackgroundGraphicType read get_GraphicType write set_GraphicType;
    property GraphicPositionType: DNOdsPageBackgroundGraphicPositionType read get_GraphicPositionType write set_GraphicPositionType;
    property IsLink: Boolean read get_IsLink;
    property LinkedGraphic: string read get_LinkedGraphic write set_LinkedGraphic;
    property GraphicData: TArray<Byte> read get_GraphicData write set_GraphicData;
  end;

  TDNOdsPageBackground = class(TDNGenericImport<DNOdsPageBackgroundClass, DNOdsPageBackground>) end;

  //-------------namespace: Aspose.Cells----------------
  DNOutlineClass = interface(DDN.mscorlib.DNObjectClass)
  ['{65E723C1-8B44-5877-B0DF-31FF3CB40B57}']
  end;

  [DNTypeName('Aspose.Cells.Outline')]
  DNOutline = interface(DDN.mscorlib.DNObject)
  ['{47D8DC63-11EC-36D5-B8BB-D679CBA2A5BB}']
  { getters & setters } 

    function get_SummaryRowBelow: Boolean;
    procedure set_SummaryRowBelow(value: Boolean);
    function get_SummaryColumnRight: Boolean;
    procedure set_SummaryColumnRight(value: Boolean);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property SummaryRowBelow: Boolean read get_SummaryRowBelow write set_SummaryRowBelow;
    property SummaryColumnRight: Boolean read get_SummaryColumnRight write set_SummaryColumnRight;
  end;

  TDNOutline = class(TDNGenericImport<DNOutlineClass, DNOutline>) end;

  //-------------namespace: Aspose.Cells----------------
  DNPageSetupClass = interface(DDN.mscorlib.DNObjectClass)
  ['{8F89FC30-9A0C-5D13-B513-D856297960D1}']
  end;

  [DNTypeName('Aspose.Cells.PageSetup')]
  DNPageSetup = interface(DDN.mscorlib.DNObject)
  ['{9C95574E-4D56-3F41-B549-353A4CB34096}']
  { getters & setters } 

    function get_ODSPageBackground: DNOdsPageBackground;
    function get_PrintArea: string;
    procedure set_PrintArea(value: string);
    function get_PrintTitleColumns: string;
    procedure set_PrintTitleColumns(value: string);
    function get_PrintTitleRows: string;
    procedure set_PrintTitleRows(value: string);
    function get_BlackAndWhite: Boolean;
    procedure set_BlackAndWhite(value: Boolean);
    function get_CenterHorizontally: Boolean;
    procedure set_CenterHorizontally(value: Boolean);
    function get_CenterVertically: Boolean;
    procedure set_CenterVertically(value: Boolean);
    function get_PrintDraft: Boolean;
    procedure set_PrintDraft(value: Boolean);
    function get_FooterMargin: Double;
    procedure set_FooterMargin(value: Double);
    function get_FooterMarginInch: Double;
    procedure set_FooterMarginInch(value: Double);
    function get_HeaderMargin: Double;
    procedure set_HeaderMargin(value: Double);
    function get_HeaderMarginInch: Double;
    procedure set_HeaderMarginInch(value: Double);
    function get_PrinterSettings: TArray<Byte>;
    procedure set_PrinterSettings(value: TArray<Byte>);
    function get_LeftMargin: Double;
    procedure set_LeftMargin(value: Double);
    function get_LeftMarginInch: Double;
    procedure set_LeftMarginInch(value: Double);
    function get_RightMargin: Double;
    procedure set_RightMargin(value: Double);
    function get_RightMarginInch: Double;
    procedure set_RightMarginInch(value: Double);
    function get_TopMargin: Double;
    procedure set_TopMargin(value: Double);
    function get_TopMarginInch: Double;
    procedure set_TopMarginInch(value: Double);
    function get_BottomMargin: Double;
    procedure set_BottomMargin(value: Double);
    function get_BottomMarginInch: Double;
    procedure set_BottomMarginInch(value: Double);
    function get_FirstPageNumber: Int32;
    procedure set_FirstPageNumber(value: Int32);
    function get_FitToPagesTall: Int32;
    procedure set_FitToPagesTall(value: Int32);
    function get_FitToPagesWide: Int32;
    procedure set_FitToPagesWide(value: Int32);
    function get_IsPercentScale: Boolean;
    procedure set_IsPercentScale(value: Boolean);
    function get_Order: DNPrintOrderType;
    procedure set_Order(value: DNPrintOrderType);
    function get_IsAutomaticPaperSize: Boolean;
    function get_PaperSize: DNPaperSizeType;
    procedure set_PaperSize(value: DNPaperSizeType);
    function get_PaperWidth: Double;
    function get_PaperHeight: Double;
    function get_Orientation: DNPageOrientationType;
    procedure set_Orientation(value: DNPageOrientationType);
    function get_PrintComments: DNPrintCommentsType;
    procedure set_PrintComments(value: DNPrintCommentsType);
    function get_PrintErrors: DNPrintErrorsType;
    procedure set_PrintErrors(value: DNPrintErrorsType);
    function get_PrintHeadings: Boolean;
    procedure set_PrintHeadings(value: Boolean);
    function get_PrintGridlines: Boolean;
    procedure set_PrintGridlines(value: Boolean);
    function get_Zoom: Int32;
    procedure set_Zoom(value: Int32);
    function get_IsAutoFirstPageNumber: Boolean;
    procedure set_IsAutoFirstPageNumber(value: Boolean);
    function get_PrintQuality: Int32;
    procedure set_PrintQuality(value: Int32);
    function get_PrintCopies: Int32;
    procedure set_PrintCopies(value: Int32);
    function get_IsHFDiffOddEven: Boolean;
    procedure set_IsHFDiffOddEven(value: Boolean);
    function get_IsHFDiffFirst: Boolean;
    procedure set_IsHFDiffFirst(value: Boolean);
    function get_IsHFScaleWithDoc: Boolean;
    procedure set_IsHFScaleWithDoc(value: Boolean);
    function get_IsHFAlignMargins: Boolean;
    procedure set_IsHFAlignMargins(value: Boolean);

  { methods } 

    function SetHeaderPicture(section: Int32; headerPicture: TArray<Byte>): DNPicture;
    function SetFooterPicture(section: Int32; footerPicture: TArray<Byte>): DNPicture;
    function SetPicture(isFirst: Boolean; isEven: Boolean; isHeader: Boolean; section: Int32; imageData: TArray<Byte>): DNPicture;
    function GetPicture(isHeader: Boolean; section: Int32): DNPicture; overload;
    function GetPicture(isFirst: Boolean; isEven: Boolean; isHeader: Boolean; section: Int32): DNPicture; overload;
    procedure Copy(source: DNPageSetup; copyOptions: DNCopyOptions);
    procedure SetFitToPages(wide: Int32; tall: Int32);
    procedure CustomPaperSize(width: Double; height: Double);
    procedure ClearHeaderFooter;
    function GetHeader(section: Int32): string;
    function GetCommands(headerFooterScript: string): TArray<DNHeaderFooterCommand>;
    function GetFooter(section: Int32): string;
    procedure SetHeader(section: Int32; headerScript: string);
    procedure SetFooter(section: Int32; footerScript: string);
    procedure SetEvenHeader(section: Int32; headerScript: string);
    function GetEvenHeader(section: Int32): string;
    procedure SetEvenFooter(section: Int32; footerScript: string);
    function GetEvenFooter(section: Int32): string;
    procedure SetFirstPageHeader(section: Int32; headerScript: string);
    function GetFirstPageHeader(section: Int32): string;
    procedure SetFirstPageFooter(section: Int32; footerScript: string);
    function GetFirstPageFooter(section: Int32): string;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property ODSPageBackground: DNOdsPageBackground read get_ODSPageBackground;
    property PrintArea: string read get_PrintArea write set_PrintArea;
    property PrintTitleColumns: string read get_PrintTitleColumns write set_PrintTitleColumns;
    property PrintTitleRows: string read get_PrintTitleRows write set_PrintTitleRows;
    property BlackAndWhite: Boolean read get_BlackAndWhite write set_BlackAndWhite;
    property CenterHorizontally: Boolean read get_CenterHorizontally write set_CenterHorizontally;
    property CenterVertically: Boolean read get_CenterVertically write set_CenterVertically;
    property PrintDraft: Boolean read get_PrintDraft write set_PrintDraft;
    property FooterMargin: Double read get_FooterMargin write set_FooterMargin;
    property FooterMarginInch: Double read get_FooterMarginInch write set_FooterMarginInch;
    property HeaderMargin: Double read get_HeaderMargin write set_HeaderMargin;
    property HeaderMarginInch: Double read get_HeaderMarginInch write set_HeaderMarginInch;
    property PrinterSettings: TArray<Byte> read get_PrinterSettings write set_PrinterSettings;
    property LeftMargin: Double read get_LeftMargin write set_LeftMargin;
    property LeftMarginInch: Double read get_LeftMarginInch write set_LeftMarginInch;
    property RightMargin: Double read get_RightMargin write set_RightMargin;
    property RightMarginInch: Double read get_RightMarginInch write set_RightMarginInch;
    property TopMargin: Double read get_TopMargin write set_TopMargin;
    property TopMarginInch: Double read get_TopMarginInch write set_TopMarginInch;
    property BottomMargin: Double read get_BottomMargin write set_BottomMargin;
    property BottomMarginInch: Double read get_BottomMarginInch write set_BottomMarginInch;
    property FirstPageNumber: Int32 read get_FirstPageNumber write set_FirstPageNumber;
    property FitToPagesTall: Int32 read get_FitToPagesTall write set_FitToPagesTall;
    property FitToPagesWide: Int32 read get_FitToPagesWide write set_FitToPagesWide;
    property IsPercentScale: Boolean read get_IsPercentScale write set_IsPercentScale;
    property Order: DNPrintOrderType read get_Order write set_Order;
    property IsAutomaticPaperSize: Boolean read get_IsAutomaticPaperSize;
    property PaperSize: DNPaperSizeType read get_PaperSize write set_PaperSize;
    property PaperWidth: Double read get_PaperWidth;
    property PaperHeight: Double read get_PaperHeight;
    property Orientation: DNPageOrientationType read get_Orientation write set_Orientation;
    property PrintComments: DNPrintCommentsType read get_PrintComments write set_PrintComments;
    property PrintErrors: DNPrintErrorsType read get_PrintErrors write set_PrintErrors;
    property PrintHeadings: Boolean read get_PrintHeadings write set_PrintHeadings;
    property PrintGridlines: Boolean read get_PrintGridlines write set_PrintGridlines;
    property Zoom: Int32 read get_Zoom write set_Zoom;
    property IsAutoFirstPageNumber: Boolean read get_IsAutoFirstPageNumber write set_IsAutoFirstPageNumber;
    property PrintQuality: Int32 read get_PrintQuality write set_PrintQuality;
    property PrintCopies: Int32 read get_PrintCopies write set_PrintCopies;
    property IsHFDiffOddEven: Boolean read get_IsHFDiffOddEven write set_IsHFDiffOddEven;
    property IsHFDiffFirst: Boolean read get_IsHFDiffFirst write set_IsHFDiffFirst;
    property IsHFScaleWithDoc: Boolean read get_IsHFScaleWithDoc write set_IsHFScaleWithDoc;
    property IsHFAlignMargins: Boolean read get_IsHFAlignMargins write set_IsHFAlignMargins;
  end;

  TDNPageSetup = class(TDNGenericImport<DNPageSetupClass, DNPageSetup>) end;

  //-------------namespace: Aspose.Cells----------------
  DNPaneCollectionClass = interface(DDN.mscorlib.DNObjectClass)
  ['{EE5F1D52-D6AF-5828-926E-A46A14EB65F3}']
  end;

  [DNTypeName('Aspose.Cells.PaneCollection')]
  DNPaneCollection = interface(DDN.mscorlib.DNObject)
  ['{6650612B-E7E8-35DF-B560-80E5FE2457F5}']
  { getters & setters } 

    function get_FirstVisibleRowOfBottomPane: Int32;
    procedure set_FirstVisibleRowOfBottomPane(value: Int32);
    function get_FirstVisibleColumnOfRightPane: Int32;
    procedure set_FirstVisibleColumnOfRightPane(value: Int32);
    function get_AcitvePaneType: DNRectangleAlignmentType;
    procedure set_AcitvePaneType(value: DNRectangleAlignmentType);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property FirstVisibleRowOfBottomPane: Int32 read get_FirstVisibleRowOfBottomPane write set_FirstVisibleRowOfBottomPane;
    property FirstVisibleColumnOfRightPane: Int32 read get_FirstVisibleColumnOfRightPane write set_FirstVisibleColumnOfRightPane;
    property AcitvePaneType: DNRectangleAlignmentType read get_AcitvePaneType write set_AcitvePaneType;
  end;

  TDNPaneCollection = class(TDNGenericImport<DNPaneCollectionClass, DNPaneCollection>) end;

  //-------------namespace: Aspose.Cells----------------
  DNPasteOptionsClass = interface(DDN.mscorlib.DNObjectClass)
  ['{4F3A0B77-6CBB-5D8B-9EE5-819A1E6F4DDC}']
  { constructors } 

    {class} function init: DNPasteOptions;

  end;

  [DNTypeName('Aspose.Cells.PasteOptions')]
  DNPasteOptions = interface(DDN.mscorlib.DNObject)
  ['{4CC8D2EC-D82F-3DB7-8CDA-479733223636}']
  { getters & setters } 

    function get_PasteType: DNPasteType;
    procedure set_PasteType(value: DNPasteType);
    function get_SkipBlanks: Boolean;
    procedure set_SkipBlanks(value: Boolean);
    function get_OnlyVisibleCells: Boolean;
    procedure set_OnlyVisibleCells(value: Boolean);
    function get_Transpose: Boolean;
    procedure set_Transpose(value: Boolean);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property PasteType: DNPasteType read get_PasteType write set_PasteType;
    property SkipBlanks: Boolean read get_SkipBlanks write set_SkipBlanks;
    property OnlyVisibleCells: Boolean read get_OnlyVisibleCells write set_OnlyVisibleCells;
    property Transpose: Boolean read get_Transpose write set_Transpose;
  end;

  TDNPasteOptions = class(TDNGenericImport<DNPasteOptionsClass, DNPasteOptions>) end;

  //-------------namespace: Aspose.Cells.Pivot----------------
  DNPivotFieldClass = interface(DDN.mscorlib.DNObjectClass)
  ['{4247E6F4-6ECD-5876-A5D9-FADE79734A12}']
  end;

  [DNTypeName('Aspose.Cells.Pivot.PivotField')]
  DNPivotField = interface(DDN.mscorlib.DNObject)
  ['{A60D1326-92BB-3DE5-8557-BB35CB5A7620}']
  { getters & setters } 

    function get_PivotItems: DNPivotItemCollection;
    function get_Range: DNSxRng;
    function get_IsCalculatedField: Boolean;
    function get_BaseIndex: Int32;
    procedure set_BaseIndex(value: Int32);
    function get_Position: Int32;
    function get_Name: string;
    function get_DisplayName: string;
    procedure set_DisplayName(value: string);
    function get_IsAutoSubtotals: Boolean;
    procedure set_IsAutoSubtotals(value: Boolean);
    function get_DragToColumn: Boolean;
    procedure set_DragToColumn(value: Boolean);
    function get_DragToHide: Boolean;
    procedure set_DragToHide(value: Boolean);
    function get_DragToRow: Boolean;
    procedure set_DragToRow(value: Boolean);
    function get_DragToPage: Boolean;
    procedure set_DragToPage(value: Boolean);
    function get_DragToData: Boolean;
    procedure set_DragToData(value: Boolean);
    function get_IsMultipleItemSelectionAllowed: Boolean;
    procedure set_IsMultipleItemSelectionAllowed(value: Boolean);
    function get_IsRepeatItemLabels: Boolean;
    procedure set_IsRepeatItemLabels(value: Boolean);
    function get_IsIncludeNewItemsInFilter: Boolean;
    procedure set_IsIncludeNewItemsInFilter(value: Boolean);
    function get_IsInsertPageBreaksBetweenItems: Boolean;
    procedure set_IsInsertPageBreaksBetweenItems(value: Boolean);
    function get_ShowAllItems: Boolean;
    procedure set_ShowAllItems(value: Boolean);
    function get_IsAutoSort: Boolean;
    procedure set_IsAutoSort(value: Boolean);
    function get_IsAscendSort: Boolean;
    procedure set_IsAscendSort(value: Boolean);
    function get_AutoSortField: Int32;
    procedure set_AutoSortField(value: Int32);
    function get_IsAutoShow: Boolean;
    procedure set_IsAutoShow(value: Boolean);
    function get_IsAscendShow: Boolean;
    procedure set_IsAscendShow(value: Boolean);
    function get_AutoShowCount: Int32;
    procedure set_AutoShowCount(value: Int32);
    function get_AutoShowField: Int32;
    procedure set_AutoShowField(value: Int32);
    function get_Function: DNConsolidationFunction;
    procedure set_Function(value: DNConsolidationFunction);
    function get_DataDisplayFormat: DNPivotFieldDataDisplayFormat;
    procedure set_DataDisplayFormat(value: DNPivotFieldDataDisplayFormat);
    function get_BaseFieldIndex: Int32;
    procedure set_BaseFieldIndex(value: Int32);
    function get_BaseItemPosition: DNPivotItemPosition;
    procedure set_BaseItemPosition(value: DNPivotItemPosition);
    function get_BaseItemIndex: Int32;
    procedure set_BaseItemIndex(value: Int32);
    function get_CurrentPageItem: Int16;
    procedure set_CurrentPageItem(value: Int16);
    function get_Number: Int32;
    procedure set_Number(value: Int32);
    function get_InsertBlankRow: Boolean;
    procedure set_InsertBlankRow(value: Boolean);
    function get_ShowSubtotalAtTop: Boolean;
    procedure set_ShowSubtotalAtTop(value: Boolean);
    function get_ShowInOutlineForm: Boolean;
    procedure set_ShowInOutlineForm(value: Boolean);
    function get_NumberFormat: string;
    procedure set_NumberFormat(value: string);
    function get_Items: TArray<string>;
    function get_OriginalItems: TArray<string>;
    function get_ItemCount: Int32;
    function get_ShowCompact: Boolean;
    procedure set_ShowCompact(value: Boolean);

  { methods } 

    function GetPivotFilterByType(&type: DNPivotFilterType): DNPivotFilter;
    function GetPivotFilters: DDN.mscorlib.DNArrayList;
    procedure InitPivotItems;
    function GetCalculatedFieldFormula: string;
    procedure SetSubtotals(subtotalType: DNPivotFieldSubtotalType; shown: Boolean);
    function GetSubtotals(subtotalType: DNPivotFieldSubtotalType): Boolean;
    function IsHiddenItem(index: Int32): Boolean;
    procedure HideItem(index: Int32; isHidden: Boolean); overload;
    function IsHiddenItemDetail(index: Int32): Boolean;
    procedure HideItemDetail(index: Int32; isHiddenDetail: Boolean);
    procedure HideDetail(isHiddenDetail: Boolean);
    procedure HideItem(itemValue: string; isHidden: Boolean); overload;
    procedure AddCalculatedItem(name: string; formula: string);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property PivotItems: DNPivotItemCollection read get_PivotItems;
    property Range: DNSxRng read get_Range;
    property IsCalculatedField: Boolean read get_IsCalculatedField;
    property BaseIndex: Int32 read get_BaseIndex write set_BaseIndex;
    property Position: Int32 read get_Position;
    property Name: string read get_Name;
    property DisplayName: string read get_DisplayName write set_DisplayName;
    property IsAutoSubtotals: Boolean read get_IsAutoSubtotals write set_IsAutoSubtotals;
    property DragToColumn: Boolean read get_DragToColumn write set_DragToColumn;
    property DragToHide: Boolean read get_DragToHide write set_DragToHide;
    property DragToRow: Boolean read get_DragToRow write set_DragToRow;
    property DragToPage: Boolean read get_DragToPage write set_DragToPage;
    property DragToData: Boolean read get_DragToData write set_DragToData;
    property IsMultipleItemSelectionAllowed: Boolean read get_IsMultipleItemSelectionAllowed write set_IsMultipleItemSelectionAllowed;
    property IsRepeatItemLabels: Boolean read get_IsRepeatItemLabels write set_IsRepeatItemLabels;
    property IsIncludeNewItemsInFilter: Boolean read get_IsIncludeNewItemsInFilter write set_IsIncludeNewItemsInFilter;
    property IsInsertPageBreaksBetweenItems: Boolean read get_IsInsertPageBreaksBetweenItems write set_IsInsertPageBreaksBetweenItems;
    property ShowAllItems: Boolean read get_ShowAllItems write set_ShowAllItems;
    property IsAutoSort: Boolean read get_IsAutoSort write set_IsAutoSort;
    property IsAscendSort: Boolean read get_IsAscendSort write set_IsAscendSort;
    property AutoSortField: Int32 read get_AutoSortField write set_AutoSortField;
    property IsAutoShow: Boolean read get_IsAutoShow write set_IsAutoShow;
    property IsAscendShow: Boolean read get_IsAscendShow write set_IsAscendShow;
    property AutoShowCount: Int32 read get_AutoShowCount write set_AutoShowCount;
    property AutoShowField: Int32 read get_AutoShowField write set_AutoShowField;
    property &Function: DNConsolidationFunction read get_Function write set_Function;
    property DataDisplayFormat: DNPivotFieldDataDisplayFormat read get_DataDisplayFormat write set_DataDisplayFormat;
    property BaseFieldIndex: Int32 read get_BaseFieldIndex write set_BaseFieldIndex;
    property BaseItemPosition: DNPivotItemPosition read get_BaseItemPosition write set_BaseItemPosition;
    property BaseItemIndex: Int32 read get_BaseItemIndex write set_BaseItemIndex;
    property CurrentPageItem: Int16 read get_CurrentPageItem write set_CurrentPageItem;
    property Number: Int32 read get_Number write set_Number;
    property InsertBlankRow: Boolean read get_InsertBlankRow write set_InsertBlankRow;
    property ShowSubtotalAtTop: Boolean read get_ShowSubtotalAtTop write set_ShowSubtotalAtTop;
    property ShowInOutlineForm: Boolean read get_ShowInOutlineForm write set_ShowInOutlineForm;
    property NumberFormat: string read get_NumberFormat write set_NumberFormat;
    property Items: TArray<string> read get_Items;
    property OriginalItems: TArray<string> read get_OriginalItems;
    property ItemCount: Int32 read get_ItemCount;
    property ShowCompact: Boolean read get_ShowCompact write set_ShowCompact;
  end;

  TDNPivotField = class(TDNGenericImport<DNPivotFieldClass, DNPivotField>) end;

  //-------------namespace: Aspose.Cells.Pivot----------------
  DNPivotFieldCollectionClass = interface(DNObjectClass)
  ['{03482C24-9228-5679-87C1-CC0072BA2261}']
  end;

  [DNTypeName('Aspose.Cells.Pivot.PivotFieldCollection')]
  DNPivotFieldCollection = interface(DDN.mscorlib.DNIEnumerable)
  ['{4DB0026F-84DB-3AD2-8640-CDF2C7DF0DA4}']
  { getters & setters } 

    function get_Type: DNPivotFieldType;
    function get_Count: Int32;
    function get_Item(index: Int32): DNPivotField; overload;
    function get_Item(name: string): DNPivotField; overload;

  { methods } 

    function GetEnumerator: DDN.mscorlib.DNIEnumerator;
    function AddByBaseIndex(baseFieldIndex: Int32): Int32;
    function Add(pivotField: DNPivotField): Int32;
    procedure Clear;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property &Type: DNPivotFieldType read get_Type;
    property Count: Int32 read get_Count;
    property Item[index: Int32]: DNPivotField read get_Item; default;
    property Item[name: string]: DNPivotField read get_Item; default;
  end;

  TDNPivotFieldCollection = class(TDNGenericImport<DNPivotFieldCollectionClass, DNPivotFieldCollection>) end;

  //-------------namespace: Aspose.Cells.Pivot----------------
  DNPivotFilterClass = interface(DDN.mscorlib.DNObjectClass)
  ['{BEB8E851-5FAD-5AEF-A76A-643D859CEFC9}']
  end;

  [DNTypeName('Aspose.Cells.Pivot.PivotFilter')]
  DNPivotFilter = interface(DDN.mscorlib.DNObject)
  ['{F4973E38-5A62-3AF6-99E1-F391B9F5642F}']
  { getters & setters } 

    function get_AutoFilter: DNAutoFilter;
    function get_FilterType: DNPivotFilterType;
    function get_FieldIndex: Int32;
    function get_Value1: string;
    procedure set_Value1(value: string);
    function get_Value2: string;
    procedure set_Value2(value: string);
    function get_MeasureFldIndex: Int32;
    procedure set_MeasureFldIndex(value: Int32);
    function get_MemberPropertyFieldIndex: Int32;
    procedure set_MemberPropertyFieldIndex(value: Int32);
    function get_Name: string;
    procedure set_Name(value: string);
    function get_EvaluationOrder: Int32;
    procedure set_EvaluationOrder(value: Int32);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property AutoFilter: DNAutoFilter read get_AutoFilter;
    property FilterType: DNPivotFilterType read get_FilterType;
    property FieldIndex: Int32 read get_FieldIndex;
    property Value1: string read get_Value1 write set_Value1;
    property Value2: string read get_Value2 write set_Value2;
    property MeasureFldIndex: Int32 read get_MeasureFldIndex write set_MeasureFldIndex;
    property MemberPropertyFieldIndex: Int32 read get_MemberPropertyFieldIndex write set_MemberPropertyFieldIndex;
    property Name: string read get_Name write set_Name;
    property EvaluationOrder: Int32 read get_EvaluationOrder write set_EvaluationOrder;
  end;

  TDNPivotFilter = class(TDNGenericImport<DNPivotFilterClass, DNPivotFilter>) end;

  //-------------namespace: Aspose.Cells.Pivot----------------
  DNPivotFormatConditionClass = interface(DDN.mscorlib.DNObjectClass)
  ['{9C6173C3-5F7E-5A4B-95A6-F64588377D9F}']
  end;

  [DNTypeName('Aspose.Cells.Pivot.PivotFormatCondition')]
  DNPivotFormatCondition = interface(DDN.mscorlib.DNObject)
  ['{CFD3F105-D1EA-3AC5-8825-FD74A072D320}']
  { getters & setters } 

    function get_ScopeType: DNPivotConditionFormatScopeType;
    procedure set_ScopeType(value: DNPivotConditionFormatScopeType);
    function get_RuleType: DNPivotConditionFormatRuleType;
    procedure set_RuleType(value: DNPivotConditionFormatRuleType);
    function get_FormatConditions: DNFormatConditionCollection;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property ScopeType: DNPivotConditionFormatScopeType read get_ScopeType write set_ScopeType;
    property RuleType: DNPivotConditionFormatRuleType read get_RuleType write set_RuleType;
    property FormatConditions: DNFormatConditionCollection read get_FormatConditions;
  end;

  TDNPivotFormatCondition = class(TDNGenericImport<DNPivotFormatConditionClass, DNPivotFormatCondition>) end;

  //-------------namespace: Aspose.Cells.Pivot----------------
  DNPivotItemClass = interface(DDN.mscorlib.DNObjectClass)
  ['{A186CBDD-2402-5653-883F-DC50D68D1911}']
  { static getter & setter } 

    procedure set_Position(value: Int32);
    procedure set_PositionInSameParentNode(value: Int32);

  { static propertys } 

    {class} property Position: Int32 write set_Position;
    {class} property PositionInSameParentNode: Int32 write set_PositionInSameParentNode;
  end;

  [DNTypeName('Aspose.Cells.Pivot.PivotItem')]
  DNPivotItem = interface(DDN.mscorlib.DNObject)
  ['{3EA22A05-EB98-35BF-97F0-B7D77C5EFEA1}']
  { getters & setters } 

    function get_IsHidden: Boolean;
    procedure set_IsHidden(value: Boolean);
    procedure set_Position(value: Int32);
    procedure set_PositionInSameParentNode(value: Int32);
    function get_Value: DDN.mscorlib.DNObject;
    function get_Name: string;
    function get_Index: Int32;
    procedure set_Index(value: Int32);

  { methods } 

    procedure Move(count: Int32; isSameParent: Boolean);
    function GetStringValue: string;
    function GetDoubleValue: Double;
    function GetDateTimeValue: DDN.mscorlib.DNDateTime;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property IsHidden: Boolean read get_IsHidden write set_IsHidden;
    property Position: Int32 write set_Position;
    property PositionInSameParentNode: Int32 write set_PositionInSameParentNode;
    property Value: DDN.mscorlib.DNObject read get_Value;
    property Name: string read get_Name;
    property Index: Int32 read get_Index write set_Index;
  end;

  TDNPivotItem = class(TDNGenericImport<DNPivotItemClass, DNPivotItem>) end;

  //-------------namespace: Aspose.Cells.Pivot----------------
  DNPivotItemCollectionClass = interface(DNObjectClass)
  ['{033ED0B8-E493-50C7-A1B9-C96F2BFF4419}']
  end;

  [DNTypeName('Aspose.Cells.Pivot.PivotItemCollection')]
  DNPivotItemCollection = interface(DDN.mscorlib.DNIEnumerable)
  ['{A11A144A-3489-3840-8877-BA279E2B8F9E}']
  { getters & setters } 

    function get_Item(index: Int32): DNPivotItem; overload;
    function get_Item(itemValue: string): DNPivotItem; overload;
    function get_Count: Int32;

  { methods } 

    function GetEnumerator: DDN.mscorlib.DNIEnumerator;
    procedure ChangeitemsOrder(sourceIndex: Int32; destIndex: Int32);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Item[index: Int32]: DNPivotItem read get_Item; default;
    property Item[itemValue: string]: DNPivotItem read get_Item; default;
    property Count: Int32 read get_Count;
  end;

  TDNPivotItemCollection = class(TDNGenericImport<DNPivotItemCollectionClass, DNPivotItemCollection>) end;

  //-------------namespace: Aspose.Cells.Pivot----------------
  DNPivotPageFieldsClass = interface(DDN.mscorlib.DNObjectClass)
  ['{F75DE91B-A539-5062-820A-8E607E81EBA8}']
  { constructors } 

    {class} function init: DNPivotPageFields;

  end;

  [DNTypeName('Aspose.Cells.Pivot.PivotPageFields')]
  DNPivotPageFields = interface(DDN.mscorlib.DNObject)
  ['{22B6533D-425A-3FA4-885A-CC1F7CD98651}']
  { getters & setters } 

    function get_PageFieldCount: Int32;

  { methods } 

    procedure AddPageField(pageItems: TArray<string>);
    procedure AddIdentify(rangeIndex: Int32; pageItemIndex: TArray<Int32>);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property PageFieldCount: Int32 read get_PageFieldCount;
  end;

  TDNPivotPageFields = class(TDNGenericImport<DNPivotPageFieldsClass, DNPivotPageFields>) end;

  //-------------namespace: Aspose.Cells.Pivot----------------
  DNPivotTableClass = interface(DNObjectClass)
  ['{B2CC9158-57A1-5F11-9EB5-0BC2629D9549}']
  end;

  [DNTypeName('Aspose.Cells.Pivot.PivotTable')]
  DNPivotTable = interface(DDN.mscorlib.DNIDisposable)
  ['{0AF8DDBA-C896-3D76-9FAD-6D52198DA7E9}']
  { getters & setters } 

    function get_IsExcel2003Compatible: Boolean;
    procedure set_IsExcel2003Compatible(value: Boolean);
    function get_RefreshedByWho: string;
    function get_RefreshDate: DDN.mscorlib.DNDateTime;
    function get_PivotTableStyleName: string;
    procedure set_PivotTableStyleName(value: string);
    function get_PivotTableStyleType: DNPivotTableStyleType;
    procedure set_PivotTableStyleType(value: DNPivotTableStyleType);
    function get_ColumnFields: DNPivotFieldCollection;
    function get_RowFields: DNPivotFieldCollection;
    function get_PageFields: DNPivotFieldCollection;
    function get_DataFields: DNPivotFieldCollection;
    function get_DataField: DNPivotField;
    function get_BaseFields: DNPivotFieldCollection;
    function get_PivotFilters: DNPivotFilterCollection;
    function get_ColumnRange: DNCellArea;
    function get_RowRange: DNCellArea;
    function get_DataBodyRange: DNCellArea;
    function get_TableRange1: DNCellArea;
    function get_TableRange2: DNCellArea;
    function get_ColumnGrand: Boolean;
    procedure set_ColumnGrand(value: Boolean);
    function get_IsGridDropZones: Boolean;
    procedure set_IsGridDropZones(value: Boolean);
    function get_RowGrand: Boolean;
    procedure set_RowGrand(value: Boolean);
    function get_DisplayNullString: Boolean;
    procedure set_DisplayNullString(value: Boolean);
    function get_NullString: string;
    procedure set_NullString(value: string);
    function get_DisplayErrorString: Boolean;
    procedure set_DisplayErrorString(value: Boolean);
    function get_ErrorString: string;
    procedure set_ErrorString(value: string);
    function get_IsAutoFormat: Boolean;
    procedure set_IsAutoFormat(value: Boolean);
    function get_AutoFormatType: DNPivotTableAutoFormatType;
    procedure set_AutoFormatType(value: DNPivotTableAutoFormatType);
    function get_HasBlankRows: Boolean;
    procedure set_HasBlankRows(value: Boolean);
    function get_MergeLabels: Boolean;
    procedure set_MergeLabels(value: Boolean);
    function get_PreserveFormatting: Boolean;
    procedure set_PreserveFormatting(value: Boolean);
    function get_ShowDrill: Boolean;
    procedure set_ShowDrill(value: Boolean);
    function get_EnableDrilldown: Boolean;
    procedure set_EnableDrilldown(value: Boolean);
    function get_EnableFieldDialog: Boolean;
    procedure set_EnableFieldDialog(value: Boolean);
    function get_EnableFieldList: Boolean;
    procedure set_EnableFieldList(value: Boolean);
    function get_EnableWizard: Boolean;
    procedure set_EnableWizard(value: Boolean);
    function get_SubtotalHiddenPageItems: Boolean;
    procedure set_SubtotalHiddenPageItems(value: Boolean);
    function get_GrandTotalName: string;
    procedure set_GrandTotalName(value: string);
    function get_ManualUpdate: Boolean;
    procedure set_ManualUpdate(value: Boolean);
    function get_IsMultipleFieldFilters: Boolean;
    procedure set_IsMultipleFieldFilters(value: Boolean);
    function get_MissingItemsLimit: DNPivotMissingItemLimitType;
    procedure set_MissingItemsLimit(value: DNPivotMissingItemLimitType);
    function get_EnableDataValueEditing: Boolean;
    procedure set_EnableDataValueEditing(value: Boolean);
    function get_ShowDataTips: Boolean;
    procedure set_ShowDataTips(value: Boolean);
    function get_ShowMemberPropertyTips: Boolean;
    procedure set_ShowMemberPropertyTips(value: Boolean);
    function get_ShowValuesRow: Boolean;
    procedure set_ShowValuesRow(value: Boolean);
    function get_ShowEmptyCol: Boolean;
    procedure set_ShowEmptyCol(value: Boolean);
    function get_ShowEmptyRow: Boolean;
    procedure set_ShowEmptyRow(value: Boolean);
    function get_FieldListSortAscending: Boolean;
    procedure set_FieldListSortAscending(value: Boolean);
    function get_PrintDrill: Boolean;
    procedure set_PrintDrill(value: Boolean);
    function get_AltTextTitle: string;
    procedure set_AltTextTitle(value: string);
    function get_AltTextDescription: string;
    procedure set_AltTextDescription(value: string);
    function get_Name: string;
    procedure set_Name(value: string);
    function get_ColumnHeaderCaption: string;
    procedure set_ColumnHeaderCaption(value: string);
    function get_Indent: Int32;
    procedure set_Indent(value: Int32);
    function get_RowHeaderCaption: string;
    procedure set_RowHeaderCaption(value: string);
    function get_ShowRowHeaderCaption: Boolean;
    procedure set_ShowRowHeaderCaption(value: Boolean);
    function get_CustomListSort: Boolean;
    procedure set_CustomListSort(value: Boolean);
    function get_PivotFormatConditions: DNPivotFormatConditionCollection;
    function get_PageFieldOrder: DNPrintOrderType;
    procedure set_PageFieldOrder(value: DNPrintOrderType);
    function get_PageFieldWrapCount: Int32;
    procedure set_PageFieldWrapCount(value: Int32);
    function get_Tag: string;
    procedure set_Tag(value: string);
    function get_SaveData: Boolean;
    procedure set_SaveData(value: Boolean);
    function get_RefreshDataOnOpeningFile: Boolean;
    procedure set_RefreshDataOnOpeningFile(value: Boolean);
    function get_RefreshDataFlag: Boolean;
    procedure set_RefreshDataFlag(value: Boolean);
    function get_ExternalConnectionDataSource: DNExternalConnection;
    function get_DataSource: TArray<string>;
    procedure set_DataSource(value: TArray<string>);
    function get_ItemPrintTitles: Boolean;
    procedure set_ItemPrintTitles(value: Boolean);
    function get_PrintTitles: Boolean;
    procedure set_PrintTitles(value: Boolean);
    function get_DisplayImmediateItems: Boolean;
    procedure set_DisplayImmediateItems(value: Boolean);
    function get_IsSelected: Boolean;
    procedure set_IsSelected(value: Boolean);
    function get_ShowPivotStyleRowHeader: Boolean;
    procedure set_ShowPivotStyleRowHeader(value: Boolean);
    function get_ShowPivotStyleColumnHeader: Boolean;
    procedure set_ShowPivotStyleColumnHeader(value: Boolean);
    function get_ShowPivotStyleRowStripes: Boolean;
    procedure set_ShowPivotStyleRowStripes(value: Boolean);
    function get_ShowPivotStyleColumnStripes: Boolean;
    procedure set_ShowPivotStyleColumnStripes(value: Boolean);
    function get_ShowPivotStyleLastColumn: Boolean;
    procedure set_ShowPivotStyleLastColumn(value: Boolean);

  { methods } 

    procedure ChangeDataSource(source: TArray<string>);
    function GetSource: TArray<string>;
    procedure RefreshData;
    procedure CalculateData;
    procedure ClearData;
    procedure CalculateRange;
    procedure FormatAll(style: DNStyle);
    procedure Format(row: Int32; column: Int32; style: DNStyle);
    procedure SetAutoGroupField(baseFieldIndex: Int32); overload;
    procedure SetAutoGroupField(pivotField: DNPivotField); overload;
    procedure SetManualGroupField(baseFieldIndex: Int32; startVal: Double; endVal: Double; groupByList: DDN.mscorlib.DNArrayList; intervalNum: Double); overload;
    procedure SetManualGroupField(pivotField: DNPivotField; startVal: Double; endVal: Double; groupByList: DDN.mscorlib.DNArrayList; intervalNum: Double); overload;
    procedure SetManualGroupField(baseFieldIndex: Int32; startVal: DDN.mscorlib.DNDateTime; endVal: DDN.mscorlib.DNDateTime; groupByList: DDN.mscorlib.DNArrayList; intervalNum: Int32); overload;
    procedure SetManualGroupField(pivotField: DNPivotField; startVal: DDN.mscorlib.DNDateTime; endVal: DDN.mscorlib.DNDateTime; groupByList: DDN.mscorlib.DNArrayList; intervalNum: Int32); overload;
    procedure SetUngroup(baseFieldIndex: Int32); overload;
    procedure SetUngroup(pivotField: DNPivotField); overload;
    function GetHorizontalBreaks: DDN.mscorlib.DNArrayList;
    procedure ShowInCompactForm;
    procedure ShowInOutlineForm;
    procedure ShowInTabularForm;
    function GetCellByDisplayName(displayName: string): DNCell;
    function GetChildren: TArray<DNPivotTable>;
    procedure Dispose;
    procedure CopyStyle(pivotTable: DNPivotTable);
    procedure ShowReportFilterPage(pageField: DNPivotField);
    procedure ShowReportFilterPageByName(fieldName: string);
    procedure ShowReportFilterPageByIndex(posIndex: Int32);
    procedure RemoveField(fieldType: DNPivotFieldType; fieldName: string); overload;
    procedure RemoveField(fieldType: DNPivotFieldType; baseFieldIndex: Int32); overload;
    procedure RemoveField(fieldType: DNPivotFieldType; pivotField: DNPivotField); overload;
    function AddFieldToArea(fieldType: DNPivotFieldType; fieldName: string): Int32; overload;
    function AddFieldToArea(fieldType: DNPivotFieldType; baseFieldIndex: Int32): Int32; overload;
    function AddFieldToArea(fieldType: DNPivotFieldType; pivotField: DNPivotField): Int32; overload;
    procedure AddCalculatedField(name: string; formula: string; dragToDataArea: Boolean); overload;
    procedure AddCalculatedField(name: string; formula: string); overload;
    function Fields(fieldType: DNPivotFieldType): DNPivotFieldCollection;
    procedure Move(row: Int32; column: Int32); overload;
    procedure Move(destCellName: string); overload;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property IsExcel2003Compatible: Boolean read get_IsExcel2003Compatible write set_IsExcel2003Compatible;
    property RefreshedByWho: string read get_RefreshedByWho;
    property RefreshDate: DDN.mscorlib.DNDateTime read get_RefreshDate;
    property PivotTableStyleName: string read get_PivotTableStyleName write set_PivotTableStyleName;
    property PivotTableStyleType: DNPivotTableStyleType read get_PivotTableStyleType write set_PivotTableStyleType;
    property ColumnFields: DNPivotFieldCollection read get_ColumnFields;
    property RowFields: DNPivotFieldCollection read get_RowFields;
    property PageFields: DNPivotFieldCollection read get_PageFields;
    property DataFields: DNPivotFieldCollection read get_DataFields;
    property DataField: DNPivotField read get_DataField;
    property BaseFields: DNPivotFieldCollection read get_BaseFields;
    property PivotFilters: DNPivotFilterCollection read get_PivotFilters;
    property ColumnRange: DNCellArea read get_ColumnRange;
    property RowRange: DNCellArea read get_RowRange;
    property DataBodyRange: DNCellArea read get_DataBodyRange;
    property TableRange1: DNCellArea read get_TableRange1;
    property TableRange2: DNCellArea read get_TableRange2;
    property ColumnGrand: Boolean read get_ColumnGrand write set_ColumnGrand;
    property IsGridDropZones: Boolean read get_IsGridDropZones write set_IsGridDropZones;
    property RowGrand: Boolean read get_RowGrand write set_RowGrand;
    property DisplayNullString: Boolean read get_DisplayNullString write set_DisplayNullString;
    property NullString: string read get_NullString write set_NullString;
    property DisplayErrorString: Boolean read get_DisplayErrorString write set_DisplayErrorString;
    property ErrorString: string read get_ErrorString write set_ErrorString;
    property IsAutoFormat: Boolean read get_IsAutoFormat write set_IsAutoFormat;
    property AutoFormatType: DNPivotTableAutoFormatType read get_AutoFormatType write set_AutoFormatType;
    property HasBlankRows: Boolean read get_HasBlankRows write set_HasBlankRows;
    property MergeLabels: Boolean read get_MergeLabels write set_MergeLabels;
    property PreserveFormatting: Boolean read get_PreserveFormatting write set_PreserveFormatting;
    property ShowDrill: Boolean read get_ShowDrill write set_ShowDrill;
    property EnableDrilldown: Boolean read get_EnableDrilldown write set_EnableDrilldown;
    property EnableFieldDialog: Boolean read get_EnableFieldDialog write set_EnableFieldDialog;
    property EnableFieldList: Boolean read get_EnableFieldList write set_EnableFieldList;
    property EnableWizard: Boolean read get_EnableWizard write set_EnableWizard;
    property SubtotalHiddenPageItems: Boolean read get_SubtotalHiddenPageItems write set_SubtotalHiddenPageItems;
    property GrandTotalName: string read get_GrandTotalName write set_GrandTotalName;
    property ManualUpdate: Boolean read get_ManualUpdate write set_ManualUpdate;
    property IsMultipleFieldFilters: Boolean read get_IsMultipleFieldFilters write set_IsMultipleFieldFilters;
    property MissingItemsLimit: DNPivotMissingItemLimitType read get_MissingItemsLimit write set_MissingItemsLimit;
    property EnableDataValueEditing: Boolean read get_EnableDataValueEditing write set_EnableDataValueEditing;
    property ShowDataTips: Boolean read get_ShowDataTips write set_ShowDataTips;
    property ShowMemberPropertyTips: Boolean read get_ShowMemberPropertyTips write set_ShowMemberPropertyTips;
    property ShowValuesRow: Boolean read get_ShowValuesRow write set_ShowValuesRow;
    property ShowEmptyCol: Boolean read get_ShowEmptyCol write set_ShowEmptyCol;
    property ShowEmptyRow: Boolean read get_ShowEmptyRow write set_ShowEmptyRow;
    property FieldListSortAscending: Boolean read get_FieldListSortAscending write set_FieldListSortAscending;
    property PrintDrill: Boolean read get_PrintDrill write set_PrintDrill;
    property AltTextTitle: string read get_AltTextTitle write set_AltTextTitle;
    property AltTextDescription: string read get_AltTextDescription write set_AltTextDescription;
    property Name: string read get_Name write set_Name;
    property ColumnHeaderCaption: string read get_ColumnHeaderCaption write set_ColumnHeaderCaption;
    property Indent: Int32 read get_Indent write set_Indent;
    property RowHeaderCaption: string read get_RowHeaderCaption write set_RowHeaderCaption;
    property ShowRowHeaderCaption: Boolean read get_ShowRowHeaderCaption write set_ShowRowHeaderCaption;
    property CustomListSort: Boolean read get_CustomListSort write set_CustomListSort;
    property PivotFormatConditions: DNPivotFormatConditionCollection read get_PivotFormatConditions;
    property PageFieldOrder: DNPrintOrderType read get_PageFieldOrder write set_PageFieldOrder;
    property PageFieldWrapCount: Int32 read get_PageFieldWrapCount write set_PageFieldWrapCount;
    property Tag: string read get_Tag write set_Tag;
    property SaveData: Boolean read get_SaveData write set_SaveData;
    property RefreshDataOnOpeningFile: Boolean read get_RefreshDataOnOpeningFile write set_RefreshDataOnOpeningFile;
    property RefreshDataFlag: Boolean read get_RefreshDataFlag write set_RefreshDataFlag;
    property ExternalConnectionDataSource: DNExternalConnection read get_ExternalConnectionDataSource;
    property DataSource: TArray<string> read get_DataSource write set_DataSource;
    property ItemPrintTitles: Boolean read get_ItemPrintTitles write set_ItemPrintTitles;
    property PrintTitles: Boolean read get_PrintTitles write set_PrintTitles;
    property DisplayImmediateItems: Boolean read get_DisplayImmediateItems write set_DisplayImmediateItems;
    property IsSelected: Boolean read get_IsSelected write set_IsSelected;
    property ShowPivotStyleRowHeader: Boolean read get_ShowPivotStyleRowHeader write set_ShowPivotStyleRowHeader;
    property ShowPivotStyleColumnHeader: Boolean read get_ShowPivotStyleColumnHeader write set_ShowPivotStyleColumnHeader;
    property ShowPivotStyleRowStripes: Boolean read get_ShowPivotStyleRowStripes write set_ShowPivotStyleRowStripes;
    property ShowPivotStyleColumnStripes: Boolean read get_ShowPivotStyleColumnStripes write set_ShowPivotStyleColumnStripes;
    property ShowPivotStyleLastColumn: Boolean read get_ShowPivotStyleLastColumn write set_ShowPivotStyleLastColumn;
  end;

  TDNPivotTable = class(TDNGenericImport<DNPivotTableClass, DNPivotTable>) end;

  //-------------namespace: Aspose.Cells.Pivot----------------
  DNSxRngClass = interface(DDN.mscorlib.DNObjectClass)
  ['{2839C1B8-DFA1-5133-B08C-3A3985621F6D}']
  end;

  [DNTypeName('Aspose.Cells.Pivot.SxRng')]
  DNSxRng = interface(DDN.mscorlib.DNObject)
  ['{043C107A-BB72-340F-A58F-5C7FE13C0FDB}']
  { getters & setters } 

    function get_IsAutoStart: DDN.mscorlib.DNObject;
    function get_IsAutoEnd: DDN.mscorlib.DNObject;
    function get_Start: DDN.mscorlib.DNObject;
    function get_End: DDN.mscorlib.DNObject;
    function get_By: DDN.mscorlib.DNObject;
    function get_GroupByTypes: TArray<Boolean>;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property IsAutoStart: DDN.mscorlib.DNObject read get_IsAutoStart;
    property IsAutoEnd: DDN.mscorlib.DNObject read get_IsAutoEnd;
    property Start: DDN.mscorlib.DNObject read get_Start;
    property &End: DDN.mscorlib.DNObject read get_End;
    property By: DDN.mscorlib.DNObject read get_By;
    property GroupByTypes: TArray<Boolean> read get_GroupByTypes;
  end;

  TDNSxRng = class(TDNGenericImport<DNSxRngClass, DNSxRng>) end;

  //-------------namespace: Aspose.Cells.Properties----------------
  DNContentTypePropertyClass = interface(DDN.mscorlib.DNObjectClass)
  ['{C0E1FD5C-42A2-5735-A93B-925485C05B2D}']
  end;

  [DNTypeName('Aspose.Cells.Properties.ContentTypeProperty')]
  DNContentTypeProperty = interface(DDN.mscorlib.DNObject)
  ['{22254E85-5002-35ED-8873-CE0CC6153B6E}']
  { getters & setters } 

    function get_Name: string;
    procedure set_Name(value: string);
    function get_Value: string;
    procedure set_Value(value: string);
    function get_Type: string;
    procedure set_Type(value: string);
    function get_IsNillable: Boolean;
    procedure set_IsNillable(value: Boolean);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Name: string read get_Name write set_Name;
    property Value: string read get_Value write set_Value;
    property &Type: string read get_Type write set_Type;
    property IsNillable: Boolean read get_IsNillable write set_IsNillable;
  end;

  TDNContentTypeProperty = class(TDNGenericImport<DNContentTypePropertyClass, DNContentTypeProperty>) end;

  //-------------namespace: Aspose.Cells.Properties----------------
  DNCustomPropertyClass = interface(DDN.mscorlib.DNObjectClass)
  ['{3F14F15C-4D4C-5940-B126-5E1B750CAFC8}']
  { constructors } 

    {class} function init: DNCustomProperty;

  end;

  [DNTypeName('Aspose.Cells.Properties.CustomProperty')]
  DNCustomProperty = interface(DDN.mscorlib.DNObject)
  ['{15807470-4B41-3CA2-BAE4-1BACCA20912A}']
  { getters & setters } 

    function get_Name: string;
    procedure set_Name(value: string);
    function get_StringValue: string;
    procedure set_StringValue(value: string);
    function get_Value: string;
    procedure set_Value(value: string);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Name: string read get_Name write set_Name;
    property StringValue: string read get_StringValue write set_StringValue;
    property Value: string read get_Value write set_Value;
  end;

  TDNCustomProperty = class(TDNGenericImport<DNCustomPropertyClass, DNCustomProperty>) end;

  //-------------namespace: Aspose.Cells.Properties----------------
  DNDocumentPropertyClass = interface(DDN.mscorlib.DNObjectClass)
  ['{962E040B-76A8-59DA-9FF6-28F361C72556}']
  end;

  [DNTypeName('Aspose.Cells.Properties.DocumentProperty')]
  DNDocumentProperty = interface(DDN.mscorlib.DNObject)
  ['{33257E93-0D15-312B-8766-25C17D147CF7}']
  { getters & setters } 

    function get_Name: string;
    function get_Value: DDN.mscorlib.DNObject;
    procedure set_Value(value: DDN.mscorlib.DNObject);
    function get_IsLinkedToContent: Boolean;
    function get_Source: string;
    function get_Type: DNPropertyType;
    function get_IsGeneratedName: Boolean;

  { methods } 

    function ToString: string;
    function ToInt: Int32;
    function ToDouble: Double;
    function ToDateTime: DDN.mscorlib.DNDateTime;
    function ToBool: Boolean;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    property Name: string read get_Name;
    property Value: DDN.mscorlib.DNObject read get_Value write set_Value;
    property IsLinkedToContent: Boolean read get_IsLinkedToContent;
    property Source: string read get_Source;
    property &Type: DNPropertyType read get_Type;
    property IsGeneratedName: Boolean read get_IsGeneratedName;
  end;

  TDNDocumentProperty = class(TDNGenericImport<DNDocumentPropertyClass, DNDocumentProperty>) end;

  //-------------namespace: Aspose.Cells.Properties----------------
  DNDocumentPropertyCollectionClass = interface(DNObjectClass)
  ['{047E3C42-D9C9-5714-A7C3-74F14BE65BF4}']
  end;

  [DNTypeName('Aspose.Cells.Properties.DocumentPropertyCollection')]
  DNDocumentPropertyCollection = interface(DDN.mscorlib.DNIEnumerable)
  ['{0CA1E2BC-D26A-3E58-9FFA-ED2C09629891}']
  { getters & setters } 

    function get_Count: Int32;
    function get_Item(name: string): DNDocumentProperty; overload;
    function get_Item(index: Int32): DNDocumentProperty; overload;

  { methods } 

    function GetEnumerator: DDN.mscorlib.DNIEnumerator;
    function &Contains(name: string): Boolean;
    function IndexOf(name: string): Int32;
    procedure Remove(name: string);
    procedure RemoveAt(index: Int32);
    procedure Clear;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Count: Int32 read get_Count;
    property Item[name: string]: DNDocumentProperty read get_Item; default;
    property Item[index: Int32]: DNDocumentProperty read get_Item; default;
  end;

  TDNDocumentPropertyCollection = class(TDNGenericImport<DNDocumentPropertyCollectionClass, DNDocumentPropertyCollection>) end;

  //-------------namespace: Aspose.Cells.Properties----------------
  DNBuiltInDocumentPropertyCollectionClass = interface(DNDocumentPropertyCollectionClass)
  ['{80A240BF-9676-52EE-8981-DBE425D9D523}']
  end;

  [DNTypeName('Aspose.Cells.Properties.BuiltInDocumentPropertyCollection')]
  DNBuiltInDocumentPropertyCollection = interface(DNDocumentPropertyCollection)
  ['{814C21B3-D3FC-3486-8EFC-45932AA53AE7}']
  { getters & setters } 

    function get_Item(name: string): DNDocumentProperty; overload;
    function get_Language: string;
    procedure set_Language(value: string);
    function get_Author: string;
    procedure set_Author(value: string);
    function get_Bytes: Int32;
    procedure set_Bytes(value: Int32);
    function get_Characters: Int32;
    procedure set_Characters(value: Int32);
    function get_CharactersWithSpaces: Int32;
    procedure set_CharactersWithSpaces(value: Int32);
    function get_Comments: string;
    procedure set_Comments(value: string);
    function get_Category: string;
    procedure set_Category(value: string);
    function get_ContentType: string;
    procedure set_ContentType(value: string);
    function get_ContentStatus: string;
    procedure set_ContentStatus(value: string);
    function get_Company: string;
    procedure set_Company(value: string);
    function get_HyperlinkBase: string;
    procedure set_HyperlinkBase(value: string);
    function get_CreatedTime: DDN.mscorlib.DNDateTime;
    procedure set_CreatedTime(value: DDN.mscorlib.DNDateTime);
    function get_CreatedUniversalTime: DDN.mscorlib.DNDateTime;
    procedure set_CreatedUniversalTime(value: DDN.mscorlib.DNDateTime);
    function get_Keywords: string;
    procedure set_Keywords(value: string);
    function get_LastPrinted: DDN.mscorlib.DNDateTime;
    procedure set_LastPrinted(value: DDN.mscorlib.DNDateTime);
    function get_LastPrintedUniversalTime: DDN.mscorlib.DNDateTime;
    procedure set_LastPrintedUniversalTime(value: DDN.mscorlib.DNDateTime);
    function get_LastSavedBy: string;
    procedure set_LastSavedBy(value: string);
    function get_LastSavedTime: DDN.mscorlib.DNDateTime;
    procedure set_LastSavedTime(value: DDN.mscorlib.DNDateTime);
    function get_LastSavedUniversalTime: DDN.mscorlib.DNDateTime;
    procedure set_LastSavedUniversalTime(value: DDN.mscorlib.DNDateTime);
    function get_Lines: Int32;
    procedure set_Lines(value: Int32);
    function get_Manager: string;
    procedure set_Manager(value: string);
    function get_NameOfApplication: string;
    procedure set_NameOfApplication(value: string);
    function get_Pages: Int32;
    procedure set_Pages(value: Int32);
    function get_Paragraphs: Int32;
    procedure set_Paragraphs(value: Int32);
    function get_RevisionNumber: Int32;
    procedure set_RevisionNumber(value: Int32);
    function get_Revision: string;
    procedure set_Revision(value: string);
    function get_Subject: string;
    procedure set_Subject(value: string);
    function get_Template: string;
    procedure set_Template(value: string);
    function get_Title: string;
    procedure set_Title(value: string);
    function get_TotalEditingTime: Double;
    procedure set_TotalEditingTime(value: Double);
    function get_Version: string;
    procedure set_Version(value: string);
    function get_DocumentVersion: string;
    procedure set_DocumentVersion(value: string);
    function get_ScaleCrop: Boolean;
    procedure set_ScaleCrop(value: Boolean);
    function get_LinksUpToDate: Boolean;
    procedure set_LinksUpToDate(value: Boolean);
    function get_Words: Int32;
    procedure set_Words(value: Int32);
    function get_Count: Int32;
    function get_Item(index: Int32): DNDocumentProperty; overload;

  { methods } 

    function GetEnumerator: DDN.mscorlib.DNIEnumerator;
    function &Contains(name: string): Boolean;
    function IndexOf(name: string): Int32;
    procedure Remove(name: string);
    procedure RemoveAt(index: Int32);
    procedure Clear;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Item[name: string]: DNDocumentProperty read get_Item; default;
    property Language: string read get_Language write set_Language;
    property Author: string read get_Author write set_Author;
    property Bytes: Int32 read get_Bytes write set_Bytes;
    property Characters: Int32 read get_Characters write set_Characters;
    property CharactersWithSpaces: Int32 read get_CharactersWithSpaces write set_CharactersWithSpaces;
    property Comments: string read get_Comments write set_Comments;
    property Category: string read get_Category write set_Category;
    property ContentType: string read get_ContentType write set_ContentType;
    property ContentStatus: string read get_ContentStatus write set_ContentStatus;
    property Company: string read get_Company write set_Company;
    property HyperlinkBase: string read get_HyperlinkBase write set_HyperlinkBase;
    property CreatedTime: DDN.mscorlib.DNDateTime read get_CreatedTime write set_CreatedTime;
    property CreatedUniversalTime: DDN.mscorlib.DNDateTime read get_CreatedUniversalTime write set_CreatedUniversalTime;
    property Keywords: string read get_Keywords write set_Keywords;
    property LastPrinted: DDN.mscorlib.DNDateTime read get_LastPrinted write set_LastPrinted;
    property LastPrintedUniversalTime: DDN.mscorlib.DNDateTime read get_LastPrintedUniversalTime write set_LastPrintedUniversalTime;
    property LastSavedBy: string read get_LastSavedBy write set_LastSavedBy;
    property LastSavedTime: DDN.mscorlib.DNDateTime read get_LastSavedTime write set_LastSavedTime;
    property LastSavedUniversalTime: DDN.mscorlib.DNDateTime read get_LastSavedUniversalTime write set_LastSavedUniversalTime;
    property Lines: Int32 read get_Lines write set_Lines;
    property Manager: string read get_Manager write set_Manager;
    property NameOfApplication: string read get_NameOfApplication write set_NameOfApplication;
    property Pages: Int32 read get_Pages write set_Pages;
    property Paragraphs: Int32 read get_Paragraphs write set_Paragraphs;
    property RevisionNumber: Int32 read get_RevisionNumber write set_RevisionNumber;
    property Revision: string read get_Revision write set_Revision;
    property Subject: string read get_Subject write set_Subject;
    property Template: string read get_Template write set_Template;
    property Title: string read get_Title write set_Title;
    property TotalEditingTime: Double read get_TotalEditingTime write set_TotalEditingTime;
    property Version: string read get_Version write set_Version;
    property DocumentVersion: string read get_DocumentVersion write set_DocumentVersion;
    property ScaleCrop: Boolean read get_ScaleCrop write set_ScaleCrop;
    property LinksUpToDate: Boolean read get_LinksUpToDate write set_LinksUpToDate;
    property Words: Int32 read get_Words write set_Words;
    property Count: Int32 read get_Count;
    property Item[index: Int32]: DNDocumentProperty read get_Item; default;
  end;

  TDNBuiltInDocumentPropertyCollection = class(TDNGenericImport<DNBuiltInDocumentPropertyCollectionClass, DNBuiltInDocumentPropertyCollection>) end;

  //-------------namespace: Aspose.Cells.Properties----------------
  DNCustomDocumentPropertyCollectionClass = interface(DNDocumentPropertyCollectionClass)
  ['{848A0884-DD8E-5B02-9614-5434E93482FB}']
  end;

  [DNTypeName('Aspose.Cells.Properties.CustomDocumentPropertyCollection')]
  DNCustomDocumentPropertyCollection = interface(DNDocumentPropertyCollection)
  ['{F821E8FE-C679-38F2-A85A-9446B31FAE75}']
  { getters & setters } 

    function get_Count: Int32;
    function get_Item(name: string): DNDocumentProperty; overload;
    function get_Item(index: Int32): DNDocumentProperty; overload;

  { methods } 

    function Add(name: string; value: string): DNDocumentProperty; overload;
    function Add(name: string; value: Int32): DNDocumentProperty; overload;
    function Add(name: string; value: DDN.mscorlib.DNDateTime): DNDocumentProperty; overload;
    function Add(name: string; value: Boolean): DNDocumentProperty; overload;
    function Add(name: string; value: Double): DNDocumentProperty; overload;
    function AddLinkToContent(name: string; source: string): DNDocumentProperty;
    procedure UpdateLinkedPropertyValue;
    procedure UpdateLinkedRange;
    function GetEnumerator: DDN.mscorlib.DNIEnumerator;
    function &Contains(name: string): Boolean;
    function IndexOf(name: string): Int32;
    procedure Remove(name: string);
    procedure RemoveAt(index: Int32);
    procedure Clear;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Count: Int32 read get_Count;
    property Item[name: string]: DNDocumentProperty read get_Item; default;
    property Item[index: Int32]: DNDocumentProperty read get_Item; default;
  end;

  TDNCustomDocumentPropertyCollection = class(TDNGenericImport<DNCustomDocumentPropertyCollectionClass, DNCustomDocumentPropertyCollection>) end;

  //-------------namespace: Aspose.Cells----------------
  DNProtectedRangeClass = interface(DDN.mscorlib.DNObjectClass)
  ['{A7B34F60-8A4E-5410-95AB-FFEC06557ED2}']
  end;

  [DNTypeName('Aspose.Cells.ProtectedRange')]
  DNProtectedRange = interface(DDN.mscorlib.DNObject)
  ['{329055BA-BB62-302F-8431-E67DED36F647}']
  { getters & setters } 

    function get_Name: string;
    procedure set_Name(value: string);
    function get_CellArea: DNCellArea;
    function get_Password: string;
    procedure set_Password(value: string);
    function get_SecurityDescriptor: string;
    procedure set_SecurityDescriptor(value: string);

  { methods } 

    function GetAreas: TArray<DNCellArea>;
    procedure AddArea(startRow: Int32; startColumn: Int32; endRow: Int32; endColumn: Int32);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Name: string read get_Name write set_Name;
    property CellArea: DNCellArea read get_CellArea;
    property Password: string read get_Password write set_Password;
    property SecurityDescriptor: string read get_SecurityDescriptor write set_SecurityDescriptor;
  end;

  TDNProtectedRange = class(TDNGenericImport<DNProtectedRangeClass, DNProtectedRange>) end;

  //-------------namespace: Aspose.Cells----------------
  DNProtectionClass = interface(DDN.mscorlib.DNObjectClass)
  ['{C29467D6-1CCC-565A-A060-3A2B5688195B}']
  end;

  [DNTypeName('Aspose.Cells.Protection')]
  DNProtection = interface(DDN.mscorlib.DNObject)
  ['{FDEED681-CFC9-3995-A0FA-1AD11488CA5C}']
  { getters & setters } 

    function get_AllowDeletingColumn: Boolean;
    procedure set_AllowDeletingColumn(value: Boolean);
    function get_IsDeletingColumnsAllowed: Boolean;
    procedure set_IsDeletingColumnsAllowed(value: Boolean);
    function get_AllowDeletingRow: Boolean;
    procedure set_AllowDeletingRow(value: Boolean);
    function get_IsDeletingRowsAllowed: Boolean;
    procedure set_IsDeletingRowsAllowed(value: Boolean);
    function get_AllowFiltering: Boolean;
    procedure set_AllowFiltering(value: Boolean);
    function get_IsFilteringAllowed: Boolean;
    procedure set_IsFilteringAllowed(value: Boolean);
    function get_AllowFormattingCell: Boolean;
    procedure set_AllowFormattingCell(value: Boolean);
    function get_IsFormattingCellsAllowed: Boolean;
    procedure set_IsFormattingCellsAllowed(value: Boolean);
    function get_AllowFormattingColumn: Boolean;
    procedure set_AllowFormattingColumn(value: Boolean);
    function get_IsFormattingColumnsAllowed: Boolean;
    procedure set_IsFormattingColumnsAllowed(value: Boolean);
    function get_AllowFormattingRow: Boolean;
    procedure set_AllowFormattingRow(value: Boolean);
    function get_IsFormattingRowsAllowed: Boolean;
    procedure set_IsFormattingRowsAllowed(value: Boolean);
    function get_AllowInsertingColumn: Boolean;
    procedure set_AllowInsertingColumn(value: Boolean);
    function get_IsInsertingColumnsAllowed: Boolean;
    procedure set_IsInsertingColumnsAllowed(value: Boolean);
    function get_AllowInsertingHyperlink: Boolean;
    procedure set_AllowInsertingHyperlink(value: Boolean);
    function get_IsInsertingHyperlinksAllowed: Boolean;
    procedure set_IsInsertingHyperlinksAllowed(value: Boolean);
    function get_AllowInsertingRow: Boolean;
    procedure set_AllowInsertingRow(value: Boolean);
    function get_IsInsertingRowsAllowed: Boolean;
    procedure set_IsInsertingRowsAllowed(value: Boolean);
    function get_AllowSorting: Boolean;
    procedure set_AllowSorting(value: Boolean);
    function get_IsSortingAllowed: Boolean;
    procedure set_IsSortingAllowed(value: Boolean);
    function get_AllowUsingPivotTable: Boolean;
    procedure set_AllowUsingPivotTable(value: Boolean);
    function get_IsUsingPivotTablesAllowed: Boolean;
    procedure set_IsUsingPivotTablesAllowed(value: Boolean);
    function get_AllowEditingContent: Boolean;
    procedure set_AllowEditingContent(value: Boolean);
    function get_IsEditingContentsAllowed: Boolean;
    procedure set_IsEditingContentsAllowed(value: Boolean);
    function get_AllowEditingObject: Boolean;
    procedure set_AllowEditingObject(value: Boolean);
    function get_IsEditingObjectsAllowed: Boolean;
    procedure set_IsEditingObjectsAllowed(value: Boolean);
    function get_AllowEditingScenario: Boolean;
    procedure set_AllowEditingScenario(value: Boolean);
    function get_IsEditingScenariosAllowed: Boolean;
    procedure set_IsEditingScenariosAllowed(value: Boolean);
    function get_Password: string;
    procedure set_Password(value: string);
    function get_IsProtectedWithPassword: Boolean;
    function get_AllowSelectingLockedCell: Boolean;
    procedure set_AllowSelectingLockedCell(value: Boolean);
    function get_IsSelectingLockedCellsAllowed: Boolean;
    procedure set_IsSelectingLockedCellsAllowed(value: Boolean);
    function get_AllowSelectingUnlockedCell: Boolean;
    procedure set_AllowSelectingUnlockedCell(value: Boolean);
    function get_IsSelectingUnlockedCellsAllowed: Boolean;
    procedure set_IsSelectingUnlockedCellsAllowed(value: Boolean);

  { methods } 

    procedure Copy(source: DNProtection);
    function GetPasswordHash: Int32;
    function VerifyPassword(password: string): Boolean;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property AllowDeletingColumn: Boolean read get_AllowDeletingColumn write set_AllowDeletingColumn;
    property IsDeletingColumnsAllowed: Boolean read get_IsDeletingColumnsAllowed write set_IsDeletingColumnsAllowed;
    property AllowDeletingRow: Boolean read get_AllowDeletingRow write set_AllowDeletingRow;
    property IsDeletingRowsAllowed: Boolean read get_IsDeletingRowsAllowed write set_IsDeletingRowsAllowed;
    property AllowFiltering: Boolean read get_AllowFiltering write set_AllowFiltering;
    property IsFilteringAllowed: Boolean read get_IsFilteringAllowed write set_IsFilteringAllowed;
    property AllowFormattingCell: Boolean read get_AllowFormattingCell write set_AllowFormattingCell;
    property IsFormattingCellsAllowed: Boolean read get_IsFormattingCellsAllowed write set_IsFormattingCellsAllowed;
    property AllowFormattingColumn: Boolean read get_AllowFormattingColumn write set_AllowFormattingColumn;
    property IsFormattingColumnsAllowed: Boolean read get_IsFormattingColumnsAllowed write set_IsFormattingColumnsAllowed;
    property AllowFormattingRow: Boolean read get_AllowFormattingRow write set_AllowFormattingRow;
    property IsFormattingRowsAllowed: Boolean read get_IsFormattingRowsAllowed write set_IsFormattingRowsAllowed;
    property AllowInsertingColumn: Boolean read get_AllowInsertingColumn write set_AllowInsertingColumn;
    property IsInsertingColumnsAllowed: Boolean read get_IsInsertingColumnsAllowed write set_IsInsertingColumnsAllowed;
    property AllowInsertingHyperlink: Boolean read get_AllowInsertingHyperlink write set_AllowInsertingHyperlink;
    property IsInsertingHyperlinksAllowed: Boolean read get_IsInsertingHyperlinksAllowed write set_IsInsertingHyperlinksAllowed;
    property AllowInsertingRow: Boolean read get_AllowInsertingRow write set_AllowInsertingRow;
    property IsInsertingRowsAllowed: Boolean read get_IsInsertingRowsAllowed write set_IsInsertingRowsAllowed;
    property AllowSorting: Boolean read get_AllowSorting write set_AllowSorting;
    property IsSortingAllowed: Boolean read get_IsSortingAllowed write set_IsSortingAllowed;
    property AllowUsingPivotTable: Boolean read get_AllowUsingPivotTable write set_AllowUsingPivotTable;
    property IsUsingPivotTablesAllowed: Boolean read get_IsUsingPivotTablesAllowed write set_IsUsingPivotTablesAllowed;
    property AllowEditingContent: Boolean read get_AllowEditingContent write set_AllowEditingContent;
    property IsEditingContentsAllowed: Boolean read get_IsEditingContentsAllowed write set_IsEditingContentsAllowed;
    property AllowEditingObject: Boolean read get_AllowEditingObject write set_AllowEditingObject;
    property IsEditingObjectsAllowed: Boolean read get_IsEditingObjectsAllowed write set_IsEditingObjectsAllowed;
    property AllowEditingScenario: Boolean read get_AllowEditingScenario write set_AllowEditingScenario;
    property IsEditingScenariosAllowed: Boolean read get_IsEditingScenariosAllowed write set_IsEditingScenariosAllowed;
    property Password: string read get_Password write set_Password;
    property IsProtectedWithPassword: Boolean read get_IsProtectedWithPassword;
    property AllowSelectingLockedCell: Boolean read get_AllowSelectingLockedCell write set_AllowSelectingLockedCell;
    property IsSelectingLockedCellsAllowed: Boolean read get_IsSelectingLockedCellsAllowed write set_IsSelectingLockedCellsAllowed;
    property AllowSelectingUnlockedCell: Boolean read get_AllowSelectingUnlockedCell write set_AllowSelectingUnlockedCell;
    property IsSelectingUnlockedCellsAllowed: Boolean read get_IsSelectingUnlockedCellsAllowed write set_IsSelectingUnlockedCellsAllowed;
  end;

  TDNProtection = class(TDNGenericImport<DNProtectionClass, DNProtection>) end;

  //-------------namespace: Aspose.Cells----------------
  DNQueryTableClass = interface(DDN.mscorlib.DNObjectClass)
  ['{3136ED2F-8BC8-5F71-B185-EEAB0B888157}']
  end;

  [DNTypeName('Aspose.Cells.QueryTable')]
  DNQueryTable = interface(DDN.mscorlib.DNObject)
  ['{679D18C3-E8F8-34CA-A4D8-93F15C2D2116}']
  { getters & setters } 

    function get_ConnectionId: Int32;
    function get_ExternalConnection: DNExternalConnection;
    function get_Name: string;
    function get_ResultRange: DNRange;
    function get_PreserveFormatting: Boolean;
    procedure set_PreserveFormatting(value: Boolean);
    function get_AdjustColumnWidth: Boolean;
    procedure set_AdjustColumnWidth(value: Boolean);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property ConnectionId: Int32 read get_ConnectionId;
    property ExternalConnection: DNExternalConnection read get_ExternalConnection;
    property Name: string read get_Name;
    property ResultRange: DNRange read get_ResultRange;
    property PreserveFormatting: Boolean read get_PreserveFormatting write set_PreserveFormatting;
    property AdjustColumnWidth: Boolean read get_AdjustColumnWidth write set_AdjustColumnWidth;
  end;

  TDNQueryTable = class(TDNGenericImport<DNQueryTableClass, DNQueryTable>) end;

  //-------------namespace: Aspose.Cells.QueryTables----------------
  DNDataMashupClass = interface(DDN.mscorlib.DNObjectClass)
  ['{7CC1D30C-C9A6-5ED0-B078-7E098E294729}']
  end;

  [DNTypeName('Aspose.Cells.QueryTables.DataMashup')]
  DNDataMashup = interface(DDN.mscorlib.DNObject)
  ['{D20D3551-0B7C-3441-BEC9-C07C47DEBEC5}']
  { getters & setters } 

    function get_PowerQueryFormulas: DNPowerQueryFormulaCollction;
    function get_PowerQueryFormulaParameters: DNPowerQueryFormulaParameterCollection;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property PowerQueryFormulas: DNPowerQueryFormulaCollction read get_PowerQueryFormulas;
    property PowerQueryFormulaParameters: DNPowerQueryFormulaParameterCollection read get_PowerQueryFormulaParameters;
  end;

  TDNDataMashup = class(TDNGenericImport<DNDataMashupClass, DNDataMashup>) end;

  //-------------namespace: Aspose.Cells.QueryTables----------------
  DNPowerQueryFormulaClass = interface(DDN.mscorlib.DNObjectClass)
  ['{0637AF15-DCA0-54BA-B861-7FC652A30D38}']
  end;

  [DNTypeName('Aspose.Cells.QueryTables.PowerQueryFormula')]
  DNPowerQueryFormula = interface(DDN.mscorlib.DNObject)
  ['{717B1870-44D2-3802-BBE3-4DA61F1376AA}']
  { getters & setters } 

    function get_FormulaDefinition: string;
    function get_Name: string;
    procedure set_Name(value: string);
    function get_PowerQueryFormulaItems: DNPowerQueryFormulaItemCollection;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property FormulaDefinition: string read get_FormulaDefinition;
    property Name: string read get_Name write set_Name;
    property PowerQueryFormulaItems: DNPowerQueryFormulaItemCollection read get_PowerQueryFormulaItems;
  end;

  TDNPowerQueryFormula = class(TDNGenericImport<DNPowerQueryFormulaClass, DNPowerQueryFormula>) end;

  //-------------namespace: Aspose.Cells.QueryTables----------------
  DNPowerQueryFormulaFunctionClass = interface(DNPowerQueryFormulaClass)
  ['{CA5895F6-370D-5651-9384-73779B391971}']
  end;

  [DNTypeName('Aspose.Cells.QueryTables.PowerQueryFormulaFunction')]
  DNPowerQueryFormulaFunction = interface(DNPowerQueryFormula)
  ['{2543BC05-C7C0-3793-BFF1-A64BB286B507}']
  { getters & setters } 

    function get_F: string;
    procedure set_F(value: string);
    function get_FormulaDefinition: string;
    function get_Name: string;
    procedure set_Name(value: string);
    function get_PowerQueryFormulaItems: DNPowerQueryFormulaItemCollection;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property F: string read get_F write set_F;
    property FormulaDefinition: string read get_FormulaDefinition;
    property Name: string read get_Name write set_Name;
    property PowerQueryFormulaItems: DNPowerQueryFormulaItemCollection read get_PowerQueryFormulaItems;
  end;

  TDNPowerQueryFormulaFunction = class(TDNGenericImport<DNPowerQueryFormulaFunctionClass, DNPowerQueryFormulaFunction>) end;

  //-------------namespace: Aspose.Cells.QueryTables----------------
  DNPowerQueryFormulaItemClass = interface(DDN.mscorlib.DNObjectClass)
  ['{60E800A2-EC53-59E6-8BC2-B9BA0DBEDC88}']
  end;

  [DNTypeName('Aspose.Cells.QueryTables.PowerQueryFormulaItem')]
  DNPowerQueryFormulaItem = interface(DDN.mscorlib.DNObject)
  ['{15D124B6-2482-3AA1-BD7C-198733FDA35B}']
  { getters & setters } 

    function get_Name: string;
    function get_Value: string;
    procedure set_Value(value: string);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Name: string read get_Name;
    property Value: string read get_Value write set_Value;
  end;

  TDNPowerQueryFormulaItem = class(TDNGenericImport<DNPowerQueryFormulaItemClass, DNPowerQueryFormulaItem>) end;

  //-------------namespace: Aspose.Cells.QueryTables----------------
  DNPowerQueryFormulaParameterClass = interface(DDN.mscorlib.DNObjectClass)
  ['{8397853D-66A0-5017-B46E-C5C20E51254D}']
  { constructors } 

    {class} function init: DNPowerQueryFormulaParameter;

  end;

  [DNTypeName('Aspose.Cells.QueryTables.PowerQueryFormulaParameter')]
  DNPowerQueryFormulaParameter = interface(DDN.mscorlib.DNObject)
  ['{59772A29-9567-384B-B12E-475EEC6A943E}']
  { getters & setters } 

    function get_Name: string;
    procedure set_Name(value: string);
    function get_Value: string;
    procedure set_Value(value: string);
    function get_ParameterDefinition: string;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Name: string read get_Name write set_Name;
    property Value: string read get_Value write set_Value;
    property ParameterDefinition: string read get_ParameterDefinition;
  end;

  TDNPowerQueryFormulaParameter = class(TDNGenericImport<DNPowerQueryFormulaParameterClass, DNPowerQueryFormulaParameter>) end;

  //-------------namespace: Aspose.Cells----------------
  DNRangeClass = interface(DDN.mscorlib.DNObjectClass)
  ['{3C36302C-C7D7-51A5-AAEA-6CF4739AB592}']
  end;

  [DNTypeName('Aspose.Cells.Range')]
  DNRange = interface(DDN.mscorlib.DNObject)
  ['{B21AA8C9-53BD-3DC0-8F98-C387C5422AC6}']
  { getters & setters } 

    function get_Hyperlinks: TArray<DNHyperlink>;
    function get_RowCount: Int32;
    function get_ColumnCount: Int32;
    function get_CellCount: Int32;
    function get_Name: string;
    procedure set_Name(value: string);
    function get_RefersTo: string;
    function get_Address: string;
    function get_FirstRow: Int32;
    function get_FirstColumn: Int32;
    function get_Value: DDN.mscorlib.DNObject;
    procedure set_Value(value: DDN.mscorlib.DNObject);
    function get_ColumnWidth: Double;
    procedure set_ColumnWidth(value: Double);
    function get_RowHeight: Double;
    procedure set_RowHeight(value: Double);
    function get_Item(rowOffset: Int32; columnOffset: Int32): DNCell;
    function get_EntireColumn: DNRange;
    function get_EntireRow: DNRange;
    function get_Worksheet: DNWorksheet;

  { methods } 

    function GetEnumerator: DDN.mscorlib.DNIEnumerator;
    function IsIntersect(range: DNRange): Boolean;
    function Intersect(range: DNRange): DNRange;
    function Union(range: DNRange): DDN.mscorlib.DNArrayList;
    procedure Merge;
    procedure UnMerge;
    procedure PutValue(stringValue: string; isConverted: Boolean; setStyle: Boolean);
    procedure ApplyStyle(style: DNStyle; flag: DNStyleFlag);
    procedure SetStyle(style: DNStyle);
    procedure SetOutlineBorders(borderStyle: DNCellBorderType; borderColor: DDN.System.Drawing.DNColor); overload;
    procedure SetOutlineBorders(borderStyles: TArray<DNCellBorderType>; borderColors: TArray<DDN.System.Drawing.DNColor>); overload;
    procedure SetOutlineBorder(borderEdge: DNBorderType; borderStyle: DNCellBorderType; borderColor: DDN.System.Drawing.DNColor);
    procedure MoveTo(destRow: Int32; destColumn: Int32);
    procedure CopyData(range: DNRange);
    procedure CopyValue(range: DNRange);
    procedure CopyStyle(range: DNRange);
    procedure Copy(range: DNRange; options: DNPasteOptions); overload;
    procedure Copy(range: DNRange); overload;
    function GetCellOrNull(rowOffset: Int32; columnOffset: Int32): DNCell;
    function GetOffset(rowOffset: Int32; columnOffset: Int32): DNRange;
    function ToString: string;
    function ExportDataTable: DDN.System.Data.DNDataTable; overload;
    function ExportDataTable(options: DNExportTableOptions): DDN.System.Data.DNDataTable; overload;
    function ExportDataTableAsString: DDN.System.Data.DNDataTable;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    property Hyperlinks: TArray<DNHyperlink> read get_Hyperlinks;
    property RowCount: Int32 read get_RowCount;
    property ColumnCount: Int32 read get_ColumnCount;
    property CellCount: Int32 read get_CellCount;
    property Name: string read get_Name write set_Name;
    property RefersTo: string read get_RefersTo;
    property Address: string read get_Address;
    property FirstRow: Int32 read get_FirstRow;
    property FirstColumn: Int32 read get_FirstColumn;
    property Value: DDN.mscorlib.DNObject read get_Value write set_Value;
    property ColumnWidth: Double read get_ColumnWidth write set_ColumnWidth;
    property RowHeight: Double read get_RowHeight write set_RowHeight;
    property Item[rowOffset: Int32; columnOffset: Int32]: DNCell read get_Item; default;
    property EntireColumn: DNRange read get_EntireColumn;
    property EntireRow: DNRange read get_EntireRow;
    property Worksheet: DNWorksheet read get_Worksheet;
  end;

  TDNRange = class(TDNGenericImport<DNRangeClass, DNRange>) end;

  //-------------namespace: Aspose.Cells----------------
  DNReferredAreaClass = interface(DDN.mscorlib.DNObjectClass)
  ['{25ACF5F2-600F-5F49-8914-6074D786E09C}']
  end;

  [DNTypeName('Aspose.Cells.ReferredArea')]
  DNReferredArea = interface(DDN.mscorlib.DNObject)
  ['{5F14E5EF-90E8-3AA1-940D-44D80B3C527B}']
  { getters & setters } 

    function get_IsExternalLink: Boolean;
    function get_ExternalFileName: string;
    function get_SheetName: string;
    function get_IsArea: Boolean;
    function get_EndColumn: Int32;
    function get_StartColumn: Int32;
    function get_EndRow: Int32;
    function get_StartRow: Int32;

  { methods } 

    function GetValues: DDN.mscorlib.DNObject; overload;
    function GetValues(calculateFormulas: Boolean): DDN.mscorlib.DNObject; overload;
    function GetValue(rowOffset: Int32; colOffset: Int32): DDN.mscorlib.DNObject; overload;
    function GetValue(rowOffset: Int32; colOffset: Int32; calculateFormulas: Boolean): DDN.mscorlib.DNObject; overload;
    function ToString: string;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    property IsExternalLink: Boolean read get_IsExternalLink;
    property ExternalFileName: string read get_ExternalFileName;
    property SheetName: string read get_SheetName;
    property IsArea: Boolean read get_IsArea;
    property EndColumn: Int32 read get_EndColumn;
    property StartColumn: Int32 read get_StartColumn;
    property EndRow: Int32 read get_EndRow;
    property StartRow: Int32 read get_StartRow;
  end;

  TDNReferredArea = class(TDNGenericImport<DNReferredAreaClass, DNReferredArea>) end;

  //-------------namespace: Aspose.Cells.Rendering----------------
  DNDrawObjectClass = interface(DDN.mscorlib.DNObjectClass)
  ['{8859F55F-35E9-55E8-BE17-81570B570E8C}']
  end;

  [DNTypeName('Aspose.Cells.Rendering.DrawObject')]
  DNDrawObject = interface(DDN.mscorlib.DNObject)
  ['{311B4072-055B-3B49-A04E-43F9BE51E317}']
  { getters & setters } 

    function get_Cell: DNCell;
    function get_Shape: DNShape;
    function get_ImageBytes: TArray<Byte>;
    function get_Type: DNDrawObjectEnum;
    function get_CurrentPage: Int32;
    function get_TotalPages: Int32;
    function get_SheetIndex: Int32;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Cell: DNCell read get_Cell;
    property Shape: DNShape read get_Shape;
    property ImageBytes: TArray<Byte> read get_ImageBytes;
    property &Type: DNDrawObjectEnum read get_Type;
    property CurrentPage: Int32 read get_CurrentPage;
    property TotalPages: Int32 read get_TotalPages;
    property SheetIndex: Int32 read get_SheetIndex;
  end;

  TDNDrawObject = class(TDNGenericImport<DNDrawObjectClass, DNDrawObject>) end;

  //-------------namespace: Aspose.Cells.Rendering----------------
  DNDrawObjectEventHandlerClass = interface(DDN.mscorlib.DNObjectClass)
  ['{3EAB9DEA-4B54-535F-BF0D-603AC1C1F6F0}']
  end;

  [DNTypeName('Aspose.Cells.Rendering.DrawObjectEventHandler')]
  DNDrawObjectEventHandler = interface(DDN.mscorlib.DNObject)
  ['{C3A0FA07-241C-3EFD-8730-EF0C555458C0}']
  { methods } 

    procedure Draw(drawObject: DNDrawObject; x: Single; y: Single; width: Single; height: Single);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNDrawObjectEventHandler = class(TDNGenericImport<DNDrawObjectEventHandlerClass, DNDrawObjectEventHandler>) end;

  //-------------namespace: Aspose.Cells.Rendering----------------
  DNImageOrPrintOptionsClass = interface(DDN.mscorlib.DNObjectClass)
  ['{AC6D35BA-0A17-520C-8F9E-EC4F62A4106F}']
  { constructors } 

    {class} function init: DNImageOrPrintOptions;

  end;

  [DNTypeName('Aspose.Cells.Rendering.ImageOrPrintOptions')]
  DNImageOrPrintOptions = interface(DDN.mscorlib.DNObject)
  ['{A963CDB7-3D8C-3B69-8C94-49A4C2605A92}']
  { getters & setters } 

    function get_SaveFormat: DNSaveFormat;
    procedure set_SaveFormat(value: DNSaveFormat);
    function get_CustomPrintPageEventHandler: DDN.System.Drawing.DNPrintPageEventHandler;
    procedure set_CustomPrintPageEventHandler(value: DDN.System.Drawing.DNPrintPageEventHandler);
    function get_CustomQueryPageSettingsEventHandler: DDN.System.Drawing.DNQueryPageSettingsEventHandler;
    procedure set_CustomQueryPageSettingsEventHandler(value: DDN.System.Drawing.DNQueryPageSettingsEventHandler);
    function get_PrintWithStatusDialog: Boolean;
    procedure set_PrintWithStatusDialog(value: Boolean);
    function get_HorizontalResolution: Int32;
    procedure set_HorizontalResolution(value: Int32);
    function get_VerticalResolution: Int32;
    procedure set_VerticalResolution(value: Int32);
    function get_TiffCompression: DNTiffCompression;
    procedure set_TiffCompression(value: DNTiffCompression);
    function get_TiffColorDepth: DNColorDepth;
    procedure set_TiffColorDepth(value: DNColorDepth);
    function get_PrintingPage: DNPrintingPageType;
    procedure set_PrintingPage(value: DNPrintingPageType);
    function get_Quality: Int32;
    procedure set_Quality(value: Int32);
    function get_ImageFormat: DDN.System.Drawing.DNImageFormat;
    procedure set_ImageFormat(value: DDN.System.Drawing.DNImageFormat);
    function get_ImageType: DNImageType;
    procedure set_ImageType(value: DNImageType);
    function get_IsCellAutoFit: Boolean;
    procedure set_IsCellAutoFit(value: Boolean);
    function get_IsImageFitToPage: Boolean;
    procedure set_IsImageFitToPage(value: Boolean);
    function get_OnePagePerSheet: Boolean;
    procedure set_OnePagePerSheet(value: Boolean);
    function get_AllColumnsInOnePagePerSheet: Boolean;
    procedure set_AllColumnsInOnePagePerSheet(value: Boolean);
    function get_DrawObjectEventHandler: DNDrawObjectEventHandler;
    procedure set_DrawObjectEventHandler(value: DNDrawObjectEventHandler);
    function get_ChartImageType: DDN.System.Drawing.DNImageFormat;
    procedure set_ChartImageType(value: DDN.System.Drawing.DNImageFormat);
    function get_EmbededImageNameInSvg: string;
    procedure set_EmbededImageNameInSvg(value: string);
    function get_SVGFitToViewPort: Boolean;
    procedure set_SVGFitToViewPort(value: Boolean);
    function get_OnlyArea: Boolean;
    procedure set_OnlyArea(value: Boolean);
    function get_TextRenderingHint: DDN.System.Drawing.DNTextRenderingHint;
    procedure set_TextRenderingHint(value: DDN.System.Drawing.DNTextRenderingHint);
    function get_SmoothingMode: DDN.System.Drawing.DNSmoothingMode;
    procedure set_SmoothingMode(value: DDN.System.Drawing.DNSmoothingMode);
    function get_Transparent: Boolean;
    procedure set_Transparent(value: Boolean);
    function get_PixelFormat: DDN.System.Drawing.DNPixelFormat;
    procedure set_PixelFormat(value: DDN.System.Drawing.DNPixelFormat);
    function get_WarningCallback: DNIWarningCallback;
    procedure set_WarningCallback(value: DNIWarningCallback);
    function get_PageSavingCallback: DNIPageSavingCallback;
    procedure set_PageSavingCallback(value: DNIPageSavingCallback);
    function get_IsFontSubstitutionCharGranularity: Boolean;
    procedure set_IsFontSubstitutionCharGranularity(value: Boolean);
    function get_PageIndex: Int32;
    procedure set_PageIndex(value: Int32);
    function get_PageCount: Int32;
    procedure set_PageCount(value: Int32);
    function get_DefaultFont: string;
    procedure set_DefaultFont(value: string);
    function get_CheckWorkbookDefaultFont: Boolean;
    procedure set_CheckWorkbookDefaultFont(value: Boolean);
    function get_OutputBlankPageWhenNothingToPrint: Boolean;
    procedure set_OutputBlankPageWhenNothingToPrint(value: Boolean);
    function get_GridlineType: DNGridlineType;
    procedure set_GridlineType(value: DNGridlineType);
    function get_TextCrossType: DNTextCrossType;
    procedure set_TextCrossType(value: DNTextCrossType);
    function get_EmfType: DDN.System.Drawing.DNEmfType;
    procedure set_EmfType(value: DDN.System.Drawing.DNEmfType);
    function get_DefaultEditLanguage: DNDefaultEditLanguage;
    procedure set_DefaultEditLanguage(value: DNDefaultEditLanguage);

  { methods } 

    procedure SetDesiredSize(desiredWidth: Int32; desiredHeight: Int32);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property SaveFormat: DNSaveFormat read get_SaveFormat write set_SaveFormat;
    property CustomPrintPageEventHandler: DDN.System.Drawing.DNPrintPageEventHandler read get_CustomPrintPageEventHandler write set_CustomPrintPageEventHandler;
    property CustomQueryPageSettingsEventHandler: DDN.System.Drawing.DNQueryPageSettingsEventHandler read get_CustomQueryPageSettingsEventHandler write set_CustomQueryPageSettingsEventHandler;
    property PrintWithStatusDialog: Boolean read get_PrintWithStatusDialog write set_PrintWithStatusDialog;
    property HorizontalResolution: Int32 read get_HorizontalResolution write set_HorizontalResolution;
    property VerticalResolution: Int32 read get_VerticalResolution write set_VerticalResolution;
    property TiffCompression: DNTiffCompression read get_TiffCompression write set_TiffCompression;
    property TiffColorDepth: DNColorDepth read get_TiffColorDepth write set_TiffColorDepth;
    property PrintingPage: DNPrintingPageType read get_PrintingPage write set_PrintingPage;
    property Quality: Int32 read get_Quality write set_Quality;
    property ImageFormat: DDN.System.Drawing.DNImageFormat read get_ImageFormat write set_ImageFormat;
    property ImageType: DNImageType read get_ImageType write set_ImageType;
    property IsCellAutoFit: Boolean read get_IsCellAutoFit write set_IsCellAutoFit;
    property IsImageFitToPage: Boolean read get_IsImageFitToPage write set_IsImageFitToPage;
    property OnePagePerSheet: Boolean read get_OnePagePerSheet write set_OnePagePerSheet;
    property AllColumnsInOnePagePerSheet: Boolean read get_AllColumnsInOnePagePerSheet write set_AllColumnsInOnePagePerSheet;
    property DrawObjectEventHandler: DNDrawObjectEventHandler read get_DrawObjectEventHandler write set_DrawObjectEventHandler;
    property ChartImageType: DDN.System.Drawing.DNImageFormat read get_ChartImageType write set_ChartImageType;
    property EmbededImageNameInSvg: string read get_EmbededImageNameInSvg write set_EmbededImageNameInSvg;
    property SVGFitToViewPort: Boolean read get_SVGFitToViewPort write set_SVGFitToViewPort;
    property OnlyArea: Boolean read get_OnlyArea write set_OnlyArea;
    property TextRenderingHint: DDN.System.Drawing.DNTextRenderingHint read get_TextRenderingHint write set_TextRenderingHint;
    property SmoothingMode: DDN.System.Drawing.DNSmoothingMode read get_SmoothingMode write set_SmoothingMode;
    property Transparent: Boolean read get_Transparent write set_Transparent;
    property PixelFormat: DDN.System.Drawing.DNPixelFormat read get_PixelFormat write set_PixelFormat;
    property WarningCallback: DNIWarningCallback read get_WarningCallback write set_WarningCallback;
    property PageSavingCallback: DNIPageSavingCallback read get_PageSavingCallback write set_PageSavingCallback;
    property IsFontSubstitutionCharGranularity: Boolean read get_IsFontSubstitutionCharGranularity write set_IsFontSubstitutionCharGranularity;
    property PageIndex: Int32 read get_PageIndex write set_PageIndex;
    property PageCount: Int32 read get_PageCount write set_PageCount;
    property DefaultFont: string read get_DefaultFont write set_DefaultFont;
    property CheckWorkbookDefaultFont: Boolean read get_CheckWorkbookDefaultFont write set_CheckWorkbookDefaultFont;
    property OutputBlankPageWhenNothingToPrint: Boolean read get_OutputBlankPageWhenNothingToPrint write set_OutputBlankPageWhenNothingToPrint;
    property GridlineType: DNGridlineType read get_GridlineType write set_GridlineType;
    property TextCrossType: DNTextCrossType read get_TextCrossType write set_TextCrossType;
    property EmfType: DDN.System.Drawing.DNEmfType read get_EmfType write set_EmfType;
    property DefaultEditLanguage: DNDefaultEditLanguage read get_DefaultEditLanguage write set_DefaultEditLanguage;
  end;

  TDNImageOrPrintOptions = class(TDNGenericImport<DNImageOrPrintOptionsClass, DNImageOrPrintOptions>) end;

  //-------------namespace: Aspose.Cells.Rendering----------------
  DNPageSavingArgsClass = interface(DDN.mscorlib.DNObjectClass)
  ['{90366516-3C3C-5381-8FF5-91AC03A6F516}']
  end;

  [DNTypeName('Aspose.Cells.Rendering.PageSavingArgs')]
  DNPageSavingArgs = interface(DDN.mscorlib.DNObject)
  ['{9599D3BE-6217-3BD1-9014-C697A17C7F77}']
  { getters & setters } 

    function get_PageIndex: Int32;
    function get_PageCount: Int32;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property PageIndex: Int32 read get_PageIndex;
    property PageCount: Int32 read get_PageCount;
  end;

  TDNPageSavingArgs = class(TDNGenericImport<DNPageSavingArgsClass, DNPageSavingArgs>) end;

  //-------------namespace: Aspose.Cells.Rendering----------------
  DNPageEndSavingArgsClass = interface(DNPageSavingArgsClass)
  ['{7CC343AF-5DB8-5311-90B8-D0E329E92095}']
  end;

  [DNTypeName('Aspose.Cells.Rendering.PageEndSavingArgs')]
  DNPageEndSavingArgs = interface(DNPageSavingArgs)
  ['{59C2E948-8DBB-3C9C-8E6A-79A7F83EBA9B}']
  { getters & setters } 

    function get_HasMorePages: Boolean;
    procedure set_HasMorePages(value: Boolean);
    function get_PageIndex: Int32;
    function get_PageCount: Int32;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property HasMorePages: Boolean read get_HasMorePages write set_HasMorePages;
    property PageIndex: Int32 read get_PageIndex;
    property PageCount: Int32 read get_PageCount;
  end;

  TDNPageEndSavingArgs = class(TDNGenericImport<DNPageEndSavingArgsClass, DNPageEndSavingArgs>) end;

  //-------------namespace: Aspose.Cells.Rendering----------------
  DNPageStartSavingArgsClass = interface(DNPageSavingArgsClass)
  ['{CD92A4CB-4281-532B-B85D-A313F233C650}']
  end;

  [DNTypeName('Aspose.Cells.Rendering.PageStartSavingArgs')]
  DNPageStartSavingArgs = interface(DNPageSavingArgs)
  ['{80C95EFF-AB78-3D04-A227-863C330BD342}']
  { getters & setters } 

    function get_IsToOutput: Boolean;
    procedure set_IsToOutput(value: Boolean);
    function get_PageIndex: Int32;
    function get_PageCount: Int32;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property IsToOutput: Boolean read get_IsToOutput write set_IsToOutput;
    property PageIndex: Int32 read get_PageIndex;
    property PageCount: Int32 read get_PageCount;
  end;

  TDNPageStartSavingArgs = class(TDNGenericImport<DNPageStartSavingArgsClass, DNPageStartSavingArgs>) end;

  //-------------namespace: Aspose.Cells.Rendering----------------
  DNPdfBookmarkEntryClass = interface(DDN.mscorlib.DNObjectClass)
  ['{598C0315-DFC5-59EF-92B5-9FBAC5C3924D}']
  { constructors } 

    {class} function init: DNPdfBookmarkEntry;

  end;

  [DNTypeName('Aspose.Cells.Rendering.PdfBookmarkEntry')]
  DNPdfBookmarkEntry = interface(DDN.mscorlib.DNObject)
  ['{6C740661-53BA-35E7-A6B8-6F5F82BCF184}']
  { getters & setters } 

    function get_Text: string;
    procedure set_Text(value: string);
    function get_Destination: DNCell;
    procedure set_Destination(value: DNCell);
    function get_DestinationName: string;
    procedure set_DestinationName(value: string);
    function get_SubEntry: DDN.mscorlib.DNArrayList;
    procedure set_SubEntry(value: DDN.mscorlib.DNArrayList);
    function get_IsOpen: Boolean;
    procedure set_IsOpen(value: Boolean);
    function get_IsCollapse: Boolean;
    procedure set_IsCollapse(value: Boolean);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Text: string read get_Text write set_Text;
    property Destination: DNCell read get_Destination write set_Destination;
    property DestinationName: string read get_DestinationName write set_DestinationName;
    property SubEntry: DDN.mscorlib.DNArrayList read get_SubEntry write set_SubEntry;
    property IsOpen: Boolean read get_IsOpen write set_IsOpen;
    property IsCollapse: Boolean read get_IsCollapse write set_IsCollapse;
  end;

  TDNPdfBookmarkEntry = class(TDNGenericImport<DNPdfBookmarkEntryClass, DNPdfBookmarkEntry>) end;

  //-------------namespace: Aspose.Cells.Rendering.PdfSecurity----------------
  DNPdfSecurityOptionsClass = interface(DDN.mscorlib.DNObjectClass)
  ['{1C1E2A65-9B2D-5B18-A325-E4F5BF64693B}']
  { constructors } 

    {class} function init: DNPdfSecurityOptions;

  end;

  [DNTypeName('Aspose.Cells.Rendering.PdfSecurity.PdfSecurityOptions')]
  DNPdfSecurityOptions = interface(DDN.mscorlib.DNObject)
  ['{C2707302-B17C-38C8-8BD9-88129872A77D}']
  { getters & setters } 

    function get_UserPassword: string;
    procedure set_UserPassword(value: string);
    function get_OwnerPassword: string;
    procedure set_OwnerPassword(value: string);
    function get_PrintPermission: Boolean;
    procedure set_PrintPermission(value: Boolean);
    function get_ModifyDocumentPermission: Boolean;
    procedure set_ModifyDocumentPermission(value: Boolean);
    function get_ExtractContentPermissionObsolete: Boolean;
    procedure set_ExtractContentPermissionObsolete(value: Boolean);
    function get_AnnotationsPermission: Boolean;
    procedure set_AnnotationsPermission(value: Boolean);
    function get_FillFormsPermission: Boolean;
    procedure set_FillFormsPermission(value: Boolean);
    function get_ExtractContentPermission: Boolean;
    procedure set_ExtractContentPermission(value: Boolean);
    function get_AccessibilityExtractContent: Boolean;
    procedure set_AccessibilityExtractContent(value: Boolean);
    function get_AssembleDocumentPermission: Boolean;
    procedure set_AssembleDocumentPermission(value: Boolean);
    function get_FullQualityPrintPermission: Boolean;
    procedure set_FullQualityPrintPermission(value: Boolean);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property UserPassword: string read get_UserPassword write set_UserPassword;
    property OwnerPassword: string read get_OwnerPassword write set_OwnerPassword;
    property PrintPermission: Boolean read get_PrintPermission write set_PrintPermission;
    property ModifyDocumentPermission: Boolean read get_ModifyDocumentPermission write set_ModifyDocumentPermission;
    property ExtractContentPermissionObsolete: Boolean read get_ExtractContentPermissionObsolete write set_ExtractContentPermissionObsolete;
    property AnnotationsPermission: Boolean read get_AnnotationsPermission write set_AnnotationsPermission;
    property FillFormsPermission: Boolean read get_FillFormsPermission write set_FillFormsPermission;
    property ExtractContentPermission: Boolean read get_ExtractContentPermission write set_ExtractContentPermission;
    property AccessibilityExtractContent: Boolean read get_AccessibilityExtractContent write set_AccessibilityExtractContent;
    property AssembleDocumentPermission: Boolean read get_AssembleDocumentPermission write set_AssembleDocumentPermission;
    property FullQualityPrintPermission: Boolean read get_FullQualityPrintPermission write set_FullQualityPrintPermission;
  end;

  TDNPdfSecurityOptions = class(TDNGenericImport<DNPdfSecurityOptionsClass, DNPdfSecurityOptions>) end;

  //-------------namespace: Aspose.Cells.Rendering----------------
  DNSheetPrintingPreviewClass = interface(DDN.mscorlib.DNObjectClass)
  ['{818C5393-FEA6-5A33-A424-16EBBD3C140D}']
  { constructors } 

    {class} function init(sheet: DNWorksheet; options: DNImageOrPrintOptions): DNSheetPrintingPreview;

  end;

  [DNTypeName('Aspose.Cells.Rendering.SheetPrintingPreview')]
  DNSheetPrintingPreview = interface(DDN.mscorlib.DNObject)
  ['{BE6296B2-52B9-38D1-927C-768BEA98CAFE}']
  { getters & setters } 

    function get_EvaluatedPageCount: Int32;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property EvaluatedPageCount: Int32 read get_EvaluatedPageCount;
  end;

  TDNSheetPrintingPreview = class(TDNGenericImport<DNSheetPrintingPreviewClass, DNSheetPrintingPreview>) end;

  //-------------namespace: Aspose.Cells.Rendering----------------
  DNSheetRenderClass = interface(DDN.mscorlib.DNObjectClass)
  ['{70B63DF0-D709-55F3-A86F-0E28366C1074}']
  { constructors } 

    {class} function init(worksheet: DNWorksheet; options: DNImageOrPrintOptions): DNSheetRender;

  end;

  [DNTypeName('Aspose.Cells.Rendering.SheetRender')]
  DNSheetRender = interface(DDN.mscorlib.DNObject)
  ['{74B20B17-1478-3043-9662-E93EA4727569}']
  { getters & setters } 

    function get_PageCount: Int32;
    function get_PageScale: Double;

  { methods } 

    function GetPageSize(pageIndex: Int32): DDN.System.Drawing.DNSize;
    procedure ToImage(pageIndex: Int32; g: DDN.System.Drawing.DNGraphics; x: Single; y: Single; width: Single; height: Single); overload;
    procedure ToImage(pageIndex: Int32; g: DDN.System.Drawing.DNGraphics; x: Single; y: Single); overload;
    procedure ToImage(pageIndex: Int32; fileName: string); overload;
    procedure ToImage(pageIndex: Int32; stream: DDN.mscorlib.DNStream); overload;
    function ToImage(pageIndex: Int32): DDN.System.Drawing.DNBitmap; overload;
    procedure ToTiff(stream: DDN.mscorlib.DNStream); overload;
    procedure ToTiff(filename: string); overload;
    procedure ToPrinter(PrinterName: string); overload;
    procedure ToPrinter(PrinterName: string; PrintPageIndex: Int32; PrintPageCount: Int32); overload;
    procedure ToPrinter(PrinterName: string; DocumentName: string); overload;
    procedure ToPrinter(PrinterSettings: DDN.System.Drawing.DNPrinterSettings); overload;
    function CustomPrint(nextPageAfterPrint: Boolean; printPageEventArgs: DDN.System.Drawing.DNPrintPageEventArgs): Int32;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property PageCount: Int32 read get_PageCount;
    property PageScale: Double read get_PageScale;
  end;

  TDNSheetRender = class(TDNGenericImport<DNSheetRenderClass, DNSheetRender>) end;

  //-------------namespace: Aspose.Cells.Rendering----------------
  DNWorkbookPrintingPreviewClass = interface(DDN.mscorlib.DNObjectClass)
  ['{67FD5B28-3D47-5BEE-A721-D13FB74A62A9}']
  { constructors } 

    {class} function init(workbook: DNWorkbook; options: DNImageOrPrintOptions): DNWorkbookPrintingPreview;

  end;

  [DNTypeName('Aspose.Cells.Rendering.WorkbookPrintingPreview')]
  DNWorkbookPrintingPreview = interface(DDN.mscorlib.DNObject)
  ['{D6AB1C39-3728-3908-80CD-88998FC96F18}']
  { getters & setters } 

    function get_EvaluatedPageCount: Int32;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property EvaluatedPageCount: Int32 read get_EvaluatedPageCount;
  end;

  TDNWorkbookPrintingPreview = class(TDNGenericImport<DNWorkbookPrintingPreviewClass, DNWorkbookPrintingPreview>) end;

  //-------------namespace: Aspose.Cells.Rendering----------------
  DNWorkbookRenderClass = interface(DDN.mscorlib.DNObjectClass)
  ['{345BD570-A1C0-59B1-91CE-26E315F888AE}']
  { constructors } 

    {class} function init(workbook: DNWorkbook; options: DNImageOrPrintOptions): DNWorkbookRender;

  end;

  [DNTypeName('Aspose.Cells.Rendering.WorkbookRender')]
  DNWorkbookRender = interface(DDN.mscorlib.DNObject)
  ['{9C2FFA2D-4432-3654-85CF-406A77323D68}']
  { getters & setters } 

    function get_PageCount: Int32;

  { methods } 

    function GetPageSize(pageIndex: Int32): DDN.System.Drawing.DNSize;
    procedure ToImage(stream: DDN.mscorlib.DNStream); overload;
    procedure ToImage(filename: string); overload;
    procedure ToImage(pageIndex: Int32; fileName: string); overload;
    procedure ToImage(pageIndex: Int32; stream: DDN.mscorlib.DNStream); overload;
    function ToImage(pageIndex: Int32): DDN.System.Drawing.DNBitmap; overload;
    procedure ToPrinter(PrinterName: string); overload;
    procedure ToPrinter(PrinterName: string; PrintPageIndex: Int32; PrintPageCount: Int32); overload;
    procedure ToPrinter(PrinterName: string; DocumentName: string); overload;
    procedure ToPrinter(PrinterSettings: DDN.System.Drawing.DNPrinterSettings); overload;
    function CustomPrint(nextPageAfterPrint: Boolean; printPageEventArgs: DDN.System.Drawing.DNPrintPageEventArgs): Int32;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property PageCount: Int32 read get_PageCount;
  end;

  TDNWorkbookRender = class(TDNGenericImport<DNWorkbookRenderClass, DNWorkbookRender>) end;

  //-------------namespace: Aspose.Cells----------------
  DNReplaceOptionsClass = interface(DDN.mscorlib.DNObjectClass)
  ['{AB781629-0E8F-5347-8C76-C51C2309068D}']
  { constructors } 

    {class} function init: DNReplaceOptions;

  end;

  [DNTypeName('Aspose.Cells.ReplaceOptions')]
  DNReplaceOptions = interface(DDN.mscorlib.DNObject)
  ['{3A9590F2-583A-3F7F-B01C-25190296B62B}']
  { getters & setters } 

    function get_CaseSensitive: Boolean;
    procedure set_CaseSensitive(value: Boolean);
    function get_MatchEntireCellContents: Boolean;
    procedure set_MatchEntireCellContents(value: Boolean);
    function get_RegexKey: Boolean;
    procedure set_RegexKey(value: Boolean);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property CaseSensitive: Boolean read get_CaseSensitive write set_CaseSensitive;
    property MatchEntireCellContents: Boolean read get_MatchEntireCellContents write set_MatchEntireCellContents;
    property RegexKey: Boolean read get_RegexKey write set_RegexKey;
  end;

  TDNReplaceOptions = class(TDNGenericImport<DNReplaceOptionsClass, DNReplaceOptions>) end;

  //-------------namespace: Aspose.Cells.Revisions----------------
  DNRevisionClass = interface(DDN.mscorlib.DNObjectClass)
  ['{B8651030-90BF-542F-AC2C-F8F79AF8F577}']
  end;

  [DNTypeName('Aspose.Cells.Revisions.Revision')]
  DNRevision = interface(DDN.mscorlib.DNObject)
  ['{56C910B9-CD01-3877-A6D7-B1AF375A9512}']
  { getters & setters } 

    function get_Type: DNRevisionType;
    function get_Worksheet: DNWorksheet;
    function get_Id: Int32;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property &Type: DNRevisionType read get_Type;
    property Worksheet: DNWorksheet read get_Worksheet;
    property Id: Int32 read get_Id;
  end;

  TDNRevision = class(TDNGenericImport<DNRevisionClass, DNRevision>) end;

  //-------------namespace: Aspose.Cells.Revisions----------------
  DNRevisionAutoFormatClass = interface(DNRevisionClass)
  ['{886E4EF4-4D2A-536B-8112-CCBD4D715B1A}']
  end;

  [DNTypeName('Aspose.Cells.Revisions.RevisionAutoFormat')]
  DNRevisionAutoFormat = interface(DNRevision)
  ['{B727FCB0-9B8E-3D22-A934-C634EA68E6FF}']
  { getters & setters } 

    function get_Type: DNRevisionType;
    function get_CellArea: DNCellArea;
    function get_Worksheet: DNWorksheet;
    function get_Id: Int32;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property &Type: DNRevisionType read get_Type;
    property CellArea: DNCellArea read get_CellArea;
    property Worksheet: DNWorksheet read get_Worksheet;
    property Id: Int32 read get_Id;
  end;

  TDNRevisionAutoFormat = class(TDNGenericImport<DNRevisionAutoFormatClass, DNRevisionAutoFormat>) end;

  //-------------namespace: Aspose.Cells.Revisions----------------
  DNRevisionCellChangeClass = interface(DNRevisionClass)
  ['{C2C90B55-F875-5983-BBDE-BE6998E5B4B6}']
  end;

  [DNTypeName('Aspose.Cells.Revisions.RevisionCellChange')]
  DNRevisionCellChange = interface(DNRevision)
  ['{50C4C612-E0C1-3685-8307-95AFB7A96929}']
  { getters & setters } 

    function get_Type: DNRevisionType;
    function get_CellName: string;
    function get_Row: Int32;
    function get_Column: Int32;
    function get_IsNewFormatted: Boolean;
    function get_IsOldFormatted: Boolean;
    function get_OldFormula: string;
    function get_OldValue: DDN.mscorlib.DNObject;
    function get_NewValue: DDN.mscorlib.DNObject;
    function get_NewFormula: string;
    function get_NewStyle: DNStyle;
    function get_OldStyle: DNStyle;
    function get_Worksheet: DNWorksheet;
    function get_Id: Int32;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property &Type: DNRevisionType read get_Type;
    property CellName: string read get_CellName;
    property Row: Int32 read get_Row;
    property Column: Int32 read get_Column;
    property IsNewFormatted: Boolean read get_IsNewFormatted;
    property IsOldFormatted: Boolean read get_IsOldFormatted;
    property OldFormula: string read get_OldFormula;
    property OldValue: DDN.mscorlib.DNObject read get_OldValue;
    property NewValue: DDN.mscorlib.DNObject read get_NewValue;
    property NewFormula: string read get_NewFormula;
    property NewStyle: DNStyle read get_NewStyle;
    property OldStyle: DNStyle read get_OldStyle;
    property Worksheet: DNWorksheet read get_Worksheet;
    property Id: Int32 read get_Id;
  end;

  TDNRevisionCellChange = class(TDNGenericImport<DNRevisionCellChangeClass, DNRevisionCellChange>) end;

  //-------------namespace: Aspose.Cells.Revisions----------------
  DNRevisionCellCommentClass = interface(DNRevisionClass)
  ['{16DC2F18-7595-5F23-A40C-A65FA1E7E118}']
  end;

  [DNTypeName('Aspose.Cells.Revisions.RevisionCellComment')]
  DNRevisionCellComment = interface(DNRevision)
  ['{3EA822D5-FE99-3F72-8A80-1F1E1B8D1A2E}']
  { getters & setters } 

    function get_Type: DNRevisionType;
    function get_Row: Int32;
    function get_Column: Int32;
    function get_CellName: string;
    procedure set_CellName(value: string);
    function get_ActionType: DNRevisionActionType;
    function get_IsOldComment: Boolean;
    function get_OldLength: Int32;
    function get_NewLength: Int32;
    function get_Worksheet: DNWorksheet;
    function get_Id: Int32;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property &Type: DNRevisionType read get_Type;
    property Row: Int32 read get_Row;
    property Column: Int32 read get_Column;
    property CellName: string read get_CellName write set_CellName;
    property ActionType: DNRevisionActionType read get_ActionType;
    property IsOldComment: Boolean read get_IsOldComment;
    property OldLength: Int32 read get_OldLength;
    property NewLength: Int32 read get_NewLength;
    property Worksheet: DNWorksheet read get_Worksheet;
    property Id: Int32 read get_Id;
  end;

  TDNRevisionCellComment = class(TDNGenericImport<DNRevisionCellCommentClass, DNRevisionCellComment>) end;

  //-------------namespace: Aspose.Cells.Revisions----------------
  DNRevisionCellMoveClass = interface(DNRevisionClass)
  ['{E93800CA-E45A-5758-9438-2BC8D68BD287}']
  end;

  [DNTypeName('Aspose.Cells.Revisions.RevisionCellMove')]
  DNRevisionCellMove = interface(DNRevision)
  ['{2C383ABF-F8B3-37D7-A822-6FF81974EAE9}']
  { getters & setters } 

    function get_Type: DNRevisionType;
    function get_SourceArea: DNCellArea;
    function get_DestinationArea: DNCellArea;
    function get_SourceWorksheet: DNWorksheet;
    function get_Worksheet: DNWorksheet;
    function get_Id: Int32;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property &Type: DNRevisionType read get_Type;
    property SourceArea: DNCellArea read get_SourceArea;
    property DestinationArea: DNCellArea read get_DestinationArea;
    property SourceWorksheet: DNWorksheet read get_SourceWorksheet;
    property Worksheet: DNWorksheet read get_Worksheet;
    property Id: Int32 read get_Id;
  end;

  TDNRevisionCellMove = class(TDNGenericImport<DNRevisionCellMoveClass, DNRevisionCellMove>) end;

  //-------------namespace: Aspose.Cells.Revisions----------------
  DNRevisionCustomViewClass = interface(DNRevisionClass)
  ['{63DE81AE-6742-52BD-B1A1-044242E116D1}']
  end;

  [DNTypeName('Aspose.Cells.Revisions.RevisionCustomView')]
  DNRevisionCustomView = interface(DNRevision)
  ['{92B791A0-5C16-3D65-9AA4-7B65F79DC289}']
  { getters & setters } 

    function get_Type: DNRevisionType;
    function get_ActionType: DNRevisionActionType;
    function get_Guid: DDN.mscorlib.DNGuid;
    function get_Worksheet: DNWorksheet;
    function get_Id: Int32;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property &Type: DNRevisionType read get_Type;
    property ActionType: DNRevisionActionType read get_ActionType;
    property Guid: DDN.mscorlib.DNGuid read get_Guid;
    property Worksheet: DNWorksheet read get_Worksheet;
    property Id: Int32 read get_Id;
  end;

  TDNRevisionCustomView = class(TDNGenericImport<DNRevisionCustomViewClass, DNRevisionCustomView>) end;

  //-------------namespace: Aspose.Cells.Revisions----------------
  DNRevisionDefinedNameClass = interface(DNRevisionClass)
  ['{4411B6B5-F5D4-5797-AA67-F1887189237C}']
  end;

  [DNTypeName('Aspose.Cells.Revisions.RevisionDefinedName')]
  DNRevisionDefinedName = interface(DNRevision)
  ['{EFFE3E86-2377-3150-9DD3-704212831929}']
  { getters & setters } 

    function get_Type: DNRevisionType;
    function get_Text: string;
    function get_OldFormula: string;
    function get_NewFormula: string;
    function get_Worksheet: DNWorksheet;
    function get_Id: Int32;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property &Type: DNRevisionType read get_Type;
    property Text: string read get_Text;
    property OldFormula: string read get_OldFormula;
    property NewFormula: string read get_NewFormula;
    property Worksheet: DNWorksheet read get_Worksheet;
    property Id: Int32 read get_Id;
  end;

  TDNRevisionDefinedName = class(TDNGenericImport<DNRevisionDefinedNameClass, DNRevisionDefinedName>) end;

  //-------------namespace: Aspose.Cells.Revisions----------------
  DNRevisionFormatClass = interface(DNRevisionClass)
  ['{8AFED276-6090-5C6A-A50E-EB336B26D7D8}']
  end;

  [DNTypeName('Aspose.Cells.Revisions.RevisionFormat')]
  DNRevisionFormat = interface(DNRevision)
  ['{9418CC85-FD8C-3CCE-8F26-A444C10AE245}']
  { getters & setters } 

    function get_Type: DNRevisionType;
    function get_Areas: TArray<DNCellArea>;
    function get_Style: DNStyle;
    function get_Worksheet: DNWorksheet;
    function get_Id: Int32;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property &Type: DNRevisionType read get_Type;
    property Areas: TArray<DNCellArea> read get_Areas;
    property Style: DNStyle read get_Style;
    property Worksheet: DNWorksheet read get_Worksheet;
    property Id: Int32 read get_Id;
  end;

  TDNRevisionFormat = class(TDNGenericImport<DNRevisionFormatClass, DNRevisionFormat>) end;

  //-------------namespace: Aspose.Cells.Revisions----------------
  DNRevisionInsertDeleteClass = interface(DNRevisionClass)
  ['{77099A0A-3214-5E8B-B156-429E6263A72C}']
  end;

  [DNTypeName('Aspose.Cells.Revisions.RevisionInsertDelete')]
  DNRevisionInsertDelete = interface(DNRevision)
  ['{67795FED-3D33-31A4-857F-7E4C7C9B0260}']
  { getters & setters } 

    function get_Type: DNRevisionType;
    function get_CellArea: DNCellArea;
    function get_ActionType: DNRevisionActionType;
    function get_Revisions: DNRevisionCollection;
    function get_Worksheet: DNWorksheet;
    function get_Id: Int32;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property &Type: DNRevisionType read get_Type;
    property CellArea: DNCellArea read get_CellArea;
    property ActionType: DNRevisionActionType read get_ActionType;
    property Revisions: DNRevisionCollection read get_Revisions;
    property Worksheet: DNWorksheet read get_Worksheet;
    property Id: Int32 read get_Id;
  end;

  TDNRevisionInsertDelete = class(TDNGenericImport<DNRevisionInsertDeleteClass, DNRevisionInsertDelete>) end;

  //-------------namespace: Aspose.Cells.Revisions----------------
  DNRevisionInsertSheetClass = interface(DNRevisionClass)
  ['{DDF79A74-4EDA-53CB-B5DF-5578CA97BF1D}']
  end;

  [DNTypeName('Aspose.Cells.Revisions.RevisionInsertSheet')]
  DNRevisionInsertSheet = interface(DNRevision)
  ['{D3BC5AF4-8999-383C-B1CE-2191F50FCA99}']
  { getters & setters } 

    function get_Type: DNRevisionType;
    function get_ActionType: DNRevisionActionType;
    function get_Name: string;
    function get_SheetPosition: Int32;
    function get_Worksheet: DNWorksheet;
    function get_Id: Int32;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property &Type: DNRevisionType read get_Type;
    property ActionType: DNRevisionActionType read get_ActionType;
    property Name: string read get_Name;
    property SheetPosition: Int32 read get_SheetPosition;
    property Worksheet: DNWorksheet read get_Worksheet;
    property Id: Int32 read get_Id;
  end;

  TDNRevisionInsertSheet = class(TDNGenericImport<DNRevisionInsertSheetClass, DNRevisionInsertSheet>) end;

  //-------------namespace: Aspose.Cells.Revisions----------------
  DNRevisionMergeConflictClass = interface(DNRevisionClass)
  ['{AF498549-39C7-5592-8F3D-432D2FB4C10E}']
  end;

  [DNTypeName('Aspose.Cells.Revisions.RevisionMergeConflict')]
  DNRevisionMergeConflict = interface(DNRevision)
  ['{F32414FB-91D9-3D7D-8F5E-65F2E1981817}']
  { getters & setters } 

    function get_Type: DNRevisionType;
    function get_Worksheet: DNWorksheet;
    function get_Id: Int32;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property &Type: DNRevisionType read get_Type;
    property Worksheet: DNWorksheet read get_Worksheet;
    property Id: Int32 read get_Id;
  end;

  TDNRevisionMergeConflict = class(TDNGenericImport<DNRevisionMergeConflictClass, DNRevisionMergeConflict>) end;

  //-------------namespace: Aspose.Cells.Revisions----------------
  DNRevisionQueryTableClass = interface(DNRevisionClass)
  ['{FFD69D47-A1BC-5095-B4E9-C215AB72E355}']
  end;

  [DNTypeName('Aspose.Cells.Revisions.RevisionQueryTable')]
  DNRevisionQueryTable = interface(DNRevision)
  ['{1FD457A8-DE24-3DEE-B3DF-BBADD3C054E0}']
  { getters & setters } 

    function get_Type: DNRevisionType;
    function get_CellArea: DNCellArea;
    function get_FieldId: Int32;
    function get_Worksheet: DNWorksheet;
    function get_Id: Int32;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property &Type: DNRevisionType read get_Type;
    property CellArea: DNCellArea read get_CellArea;
    property FieldId: Int32 read get_FieldId;
    property Worksheet: DNWorksheet read get_Worksheet;
    property Id: Int32 read get_Id;
  end;

  TDNRevisionQueryTable = class(TDNGenericImport<DNRevisionQueryTableClass, DNRevisionQueryTable>) end;

  //-------------namespace: Aspose.Cells.Revisions----------------
  DNRevisionRenameSheetClass = interface(DNRevisionClass)
  ['{BFCC9A9A-7E8C-51C5-8FEE-A952F7E76E20}']
  end;

  [DNTypeName('Aspose.Cells.Revisions.RevisionRenameSheet')]
  DNRevisionRenameSheet = interface(DNRevision)
  ['{3BC3B44A-6D36-370E-A253-EAE23954F937}']
  { getters & setters } 

    function get_Type: DNRevisionType;
    function get_OldName: string;
    function get_NewName: string;
    function get_Worksheet: DNWorksheet;
    function get_Id: Int32;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property &Type: DNRevisionType read get_Type;
    property OldName: string read get_OldName;
    property NewName: string read get_NewName;
    property Worksheet: DNWorksheet read get_Worksheet;
    property Id: Int32 read get_Id;
  end;

  TDNRevisionRenameSheet = class(TDNGenericImport<DNRevisionRenameSheetClass, DNRevisionRenameSheet>) end;

  //-------------namespace: Aspose.Cells.Revisions----------------
  DNRevisionLogClass = interface(DDN.mscorlib.DNObjectClass)
  ['{A6DAB717-A330-565E-B883-655AB3D36F5E}']
  end;

  [DNTypeName('Aspose.Cells.Revisions.RevisionLog')]
  DNRevisionLog = interface(DDN.mscorlib.DNObject)
  ['{66AF1639-BED9-3457-821E-624EB9B3EB77}']
  { getters & setters } 

    function get_Revisions: DNRevisionCollection;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Revisions: DNRevisionCollection read get_Revisions;
  end;

  TDNRevisionLog = class(TDNGenericImport<DNRevisionLogClass, DNRevisionLog>) end;

  //-------------namespace: Aspose.Cells----------------
  DNRowClass = interface(DNObjectClass)
  ['{18C1232B-651C-5EA5-AB54-FDD4B1DE5C54}']
  end;

  [DNTypeName('Aspose.Cells.Row')]
  DNRow = interface(DDN.mscorlib.DNIEnumerable)
  ['{AABBC73F-D1A6-3DC0-B5FE-1B3EF89982C5}']
  { getters & setters } 

    function get_IsBlank: Boolean;
    function get_Item(column: Int32): DNCell;
    function get_Height: Double;
    procedure set_Height(value: Double);
    function get_IsHidden: Boolean;
    procedure set_IsHidden(value: Boolean);
    function get_Index: Int32;
    function get_GroupLevel: Byte;
    function get_IsHeightMatched: Boolean;
    procedure set_IsHeightMatched(value: Boolean);
    function get_Style: DNStyle;
    function get_FirstCell: DNCell;
    function get_FirstDataCell: DNCell;
    function get_LastCell: DNCell;
    function get_LastDataCell: DNCell;

  { methods } 

    function GetCellByIndex(index: Int32): DNCell;
    function GetEnumerator: DDN.mscorlib.DNIEnumerator;
    function GetCellOrNull(column: Int32): DNCell;
    procedure CopySettings(source: DNRow; checkStyle: Boolean);
    procedure ApplyStyle(style: DNStyle; flag: DNStyleFlag);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean; overload;
    function Equals(row: DNRow): Boolean; overload;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property IsBlank: Boolean read get_IsBlank;
    property Item[column: Int32]: DNCell read get_Item; default;
    property Height: Double read get_Height write set_Height;
    property IsHidden: Boolean read get_IsHidden write set_IsHidden;
    property Index: Int32 read get_Index;
    property GroupLevel: Byte read get_GroupLevel;
    property IsHeightMatched: Boolean read get_IsHeightMatched write set_IsHeightMatched;
    property Style: DNStyle read get_Style;
    property FirstCell: DNCell read get_FirstCell;
    property FirstDataCell: DNCell read get_FirstDataCell;
    property LastCell: DNCell read get_LastCell;
    property LastDataCell: DNCell read get_LastDataCell;
  end;

  TDNRow = class(TDNGenericImport<DNRowClass, DNRow>) end;

  //-------------namespace: Aspose.Cells----------------
  DNRowCollectionClass = interface(DNObjectClass)
  ['{6BB143DC-B2A0-5D97-9A55-B60C5D49826C}']
  end;

  [DNTypeName('Aspose.Cells.RowCollection')]
  DNRowCollection = interface(DDN.mscorlib.DNIEnumerable)
  ['{D57ED111-FCB1-38C4-B461-C7B2C997CCA9}']
  { getters & setters } 

    function get_Count: Int32;
    function get_Item(rowIndex: Int32): DNRow;

  { methods } 

    function GetEnumerator: DDN.mscorlib.DNIEnumerator;
    function GetRowByIndex(index: Int32): DNRow;
    procedure Clear;
    procedure RemoveAt(index: Int32);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Count: Int32 read get_Count;
    property Item[rowIndex: Int32]: DNRow read get_Item; default;
  end;

  TDNRowCollection = class(TDNGenericImport<DNRowCollectionClass, DNRowCollection>) end;

  //-------------namespace: Aspose.Cells----------------
  DNSaveOptionsClass = interface(DDN.mscorlib.DNObjectClass)
  ['{363BDB4B-ED09-51C4-9C76-7904F0295275}']
  end;

  [DNTypeName('Aspose.Cells.SaveOptions')]
  DNSaveOptions = interface(DDN.mscorlib.DNObject)
  ['{B6698B99-144C-3FC2-BEE0-800F318AAC1E}']
  { getters & setters } 

    function get_SaveFormat: DNSaveFormat;
    function get_ClearData: Boolean;
    procedure set_ClearData(value: Boolean);
    function get_CachedFileFolder: string;
    procedure set_CachedFileFolder(value: string);
    function get_ValidateMergedAreas: Boolean;
    procedure set_ValidateMergedAreas(value: Boolean);
    function get_MergeAreas: Boolean;
    procedure set_MergeAreas(value: Boolean);
    function get_CreateDirectory: Boolean;
    procedure set_CreateDirectory(value: Boolean);
    function get_SortNames: Boolean;
    procedure set_SortNames(value: Boolean);
    function get_SortExternalNames: Boolean;
    procedure set_SortExternalNames(value: Boolean);
    function get_RefreshChartCache: Boolean;
    procedure set_RefreshChartCache(value: Boolean);
    function get_PdfExportImagesFolder: string;
    procedure set_PdfExportImagesFolder(value: string);
    function get_EnableHTTPCompression: Boolean;
    procedure set_EnableHTTPCompression(value: Boolean);
    function get_WarningCallback: DNIWarningCallback;
    procedure set_WarningCallback(value: DNIWarningCallback);
    function get_UpdateSmartArt: Boolean;
    procedure set_UpdateSmartArt(value: Boolean);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property SaveFormat: DNSaveFormat read get_SaveFormat;
    property ClearData: Boolean read get_ClearData write set_ClearData;
    property CachedFileFolder: string read get_CachedFileFolder write set_CachedFileFolder;
    property ValidateMergedAreas: Boolean read get_ValidateMergedAreas write set_ValidateMergedAreas;
    property MergeAreas: Boolean read get_MergeAreas write set_MergeAreas;
    property CreateDirectory: Boolean read get_CreateDirectory write set_CreateDirectory;
    property SortNames: Boolean read get_SortNames write set_SortNames;
    property SortExternalNames: Boolean read get_SortExternalNames write set_SortExternalNames;
    property RefreshChartCache: Boolean read get_RefreshChartCache write set_RefreshChartCache;
    property PdfExportImagesFolder: string read get_PdfExportImagesFolder write set_PdfExportImagesFolder;
    property EnableHTTPCompression: Boolean read get_EnableHTTPCompression write set_EnableHTTPCompression;
    property WarningCallback: DNIWarningCallback read get_WarningCallback write set_WarningCallback;
    property UpdateSmartArt: Boolean read get_UpdateSmartArt write set_UpdateSmartArt;
  end;

  TDNSaveOptions = class(TDNGenericImport<DNSaveOptionsClass, DNSaveOptions>) end;

  //-------------namespace: Aspose.Cells----------------
  DNDifSaveOptionsClass = interface(DNSaveOptionsClass)
  ['{E7E067A3-026A-5171-9175-E0C9095958C2}']
  { constructors } 

    {class} function init: DNDifSaveOptions;

  end;

  [DNTypeName('Aspose.Cells.DifSaveOptions')]
  DNDifSaveOptions = interface(DNSaveOptions)
  ['{F33749A2-38D5-30CA-9868-F0EE8752E9B7}']
  { getters & setters } 

    function get_SaveFormat: DNSaveFormat;
    function get_ClearData: Boolean;
    procedure set_ClearData(value: Boolean);
    function get_CachedFileFolder: string;
    procedure set_CachedFileFolder(value: string);
    function get_ValidateMergedAreas: Boolean;
    procedure set_ValidateMergedAreas(value: Boolean);
    function get_MergeAreas: Boolean;
    procedure set_MergeAreas(value: Boolean);
    function get_CreateDirectory: Boolean;
    procedure set_CreateDirectory(value: Boolean);
    function get_SortNames: Boolean;
    procedure set_SortNames(value: Boolean);
    function get_SortExternalNames: Boolean;
    procedure set_SortExternalNames(value: Boolean);
    function get_RefreshChartCache: Boolean;
    procedure set_RefreshChartCache(value: Boolean);
    function get_PdfExportImagesFolder: string;
    procedure set_PdfExportImagesFolder(value: string);
    function get_EnableHTTPCompression: Boolean;
    procedure set_EnableHTTPCompression(value: Boolean);
    function get_WarningCallback: DNIWarningCallback;
    procedure set_WarningCallback(value: DNIWarningCallback);
    function get_UpdateSmartArt: Boolean;
    procedure set_UpdateSmartArt(value: Boolean);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property SaveFormat: DNSaveFormat read get_SaveFormat;
    property ClearData: Boolean read get_ClearData write set_ClearData;
    property CachedFileFolder: string read get_CachedFileFolder write set_CachedFileFolder;
    property ValidateMergedAreas: Boolean read get_ValidateMergedAreas write set_ValidateMergedAreas;
    property MergeAreas: Boolean read get_MergeAreas write set_MergeAreas;
    property CreateDirectory: Boolean read get_CreateDirectory write set_CreateDirectory;
    property SortNames: Boolean read get_SortNames write set_SortNames;
    property SortExternalNames: Boolean read get_SortExternalNames write set_SortExternalNames;
    property RefreshChartCache: Boolean read get_RefreshChartCache write set_RefreshChartCache;
    property PdfExportImagesFolder: string read get_PdfExportImagesFolder write set_PdfExportImagesFolder;
    property EnableHTTPCompression: Boolean read get_EnableHTTPCompression write set_EnableHTTPCompression;
    property WarningCallback: DNIWarningCallback read get_WarningCallback write set_WarningCallback;
    property UpdateSmartArt: Boolean read get_UpdateSmartArt write set_UpdateSmartArt;
  end;

  TDNDifSaveOptions = class(TDNGenericImport<DNDifSaveOptionsClass, DNDifSaveOptions>) end;

  //-------------namespace: Aspose.Cells----------------
  DNDocxSaveOptionsClass = interface(DNSaveOptionsClass)
  ['{077EE379-1118-5DA6-800F-24858635D656}']
  { constructors } 

    {class} function init: DNDocxSaveOptions; overload;
    {class} function init(saveAsImage: Boolean): DNDocxSaveOptions; overload;

  end;

  [DNTypeName('Aspose.Cells.DocxSaveOptions')]
  DNDocxSaveOptions = interface(DNSaveOptions)
  ['{3386D1CB-110B-3DEE-8627-3806E8BAC273}']
  { getters & setters } 

    function get_SaveFormat: DNSaveFormat;
    function get_ClearData: Boolean;
    procedure set_ClearData(value: Boolean);
    function get_CachedFileFolder: string;
    procedure set_CachedFileFolder(value: string);
    function get_ValidateMergedAreas: Boolean;
    procedure set_ValidateMergedAreas(value: Boolean);
    function get_MergeAreas: Boolean;
    procedure set_MergeAreas(value: Boolean);
    function get_CreateDirectory: Boolean;
    procedure set_CreateDirectory(value: Boolean);
    function get_SortNames: Boolean;
    procedure set_SortNames(value: Boolean);
    function get_SortExternalNames: Boolean;
    procedure set_SortExternalNames(value: Boolean);
    function get_RefreshChartCache: Boolean;
    procedure set_RefreshChartCache(value: Boolean);
    function get_PdfExportImagesFolder: string;
    procedure set_PdfExportImagesFolder(value: string);
    function get_EnableHTTPCompression: Boolean;
    procedure set_EnableHTTPCompression(value: Boolean);
    function get_WarningCallback: DNIWarningCallback;
    procedure set_WarningCallback(value: DNIWarningCallback);
    function get_UpdateSmartArt: Boolean;
    procedure set_UpdateSmartArt(value: Boolean);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property SaveFormat: DNSaveFormat read get_SaveFormat;
    property ClearData: Boolean read get_ClearData write set_ClearData;
    property CachedFileFolder: string read get_CachedFileFolder write set_CachedFileFolder;
    property ValidateMergedAreas: Boolean read get_ValidateMergedAreas write set_ValidateMergedAreas;
    property MergeAreas: Boolean read get_MergeAreas write set_MergeAreas;
    property CreateDirectory: Boolean read get_CreateDirectory write set_CreateDirectory;
    property SortNames: Boolean read get_SortNames write set_SortNames;
    property SortExternalNames: Boolean read get_SortExternalNames write set_SortExternalNames;
    property RefreshChartCache: Boolean read get_RefreshChartCache write set_RefreshChartCache;
    property PdfExportImagesFolder: string read get_PdfExportImagesFolder write set_PdfExportImagesFolder;
    property EnableHTTPCompression: Boolean read get_EnableHTTPCompression write set_EnableHTTPCompression;
    property WarningCallback: DNIWarningCallback read get_WarningCallback write set_WarningCallback;
    property UpdateSmartArt: Boolean read get_UpdateSmartArt write set_UpdateSmartArt;
  end;

  TDNDocxSaveOptions = class(TDNGenericImport<DNDocxSaveOptionsClass, DNDocxSaveOptions>) end;

  //-------------namespace: Aspose.Cells----------------
  DNHtmlSaveOptionsClass = interface(DNSaveOptionsClass)
  ['{43E79DDF-DE69-5ECE-80E3-4E042762AD1A}']
  { constructors } 

    {class} function init: DNHtmlSaveOptions; overload;
    {class} function init(format: DNSaveFormat): DNHtmlSaveOptions; overload;

  end;

  [DNTypeName('Aspose.Cells.HtmlSaveOptions')]
  DNHtmlSaveOptions = interface(DNSaveOptions)
  ['{7A389362-DF4B-35D9-9F1A-7445D30ACBF4}']
  { getters & setters } 

    function get_PageTitle: string;
    procedure set_PageTitle(value: string);
    function get_AttachedFilesDirectory: string;
    procedure set_AttachedFilesDirectory(value: string);
    function get_AttachedFilesUrlPrefix: string;
    procedure set_AttachedFilesUrlPrefix(value: string);
    function get_DefaultFontName: string;
    procedure set_DefaultFontName(value: string);
    function get_IsExportComments: Boolean;
    procedure set_IsExportComments(value: Boolean);
    function get_DisableDownlevelRevealedComments: Boolean;
    procedure set_DisableDownlevelRevealedComments(value: Boolean);
    function get_IsExpImageToTempDir: Boolean;
    procedure set_IsExpImageToTempDir(value: Boolean);
    function get_ImageScalable: Boolean;
    procedure set_ImageScalable(value: Boolean);
    function get_WidthScalable: Boolean;
    procedure set_WidthScalable(value: Boolean);
    function get_ExportSingleTab: Boolean;
    procedure set_ExportSingleTab(value: Boolean);
    function get_ExportImagesAsBase64: Boolean;
    procedure set_ExportImagesAsBase64(value: Boolean);
    function get_ExportActiveWorksheetOnly: Boolean;
    procedure set_ExportActiveWorksheetOnly(value: Boolean);
    function get_ExportPrintAreaOnly: Boolean;
    procedure set_ExportPrintAreaOnly(value: Boolean);
    function get_ExportArea: DNCellArea;
    procedure set_ExportArea(value: DNCellArea);
    function get_ParseHtmlTagInCell: Boolean;
    procedure set_ParseHtmlTagInCell(value: Boolean);
    function get_HtmlCrossStringType: DNHtmlCrossType;
    procedure set_HtmlCrossStringType(value: DNHtmlCrossType);
    function get_HiddenColDisplayType: DNHtmlHiddenColDisplayType;
    procedure set_HiddenColDisplayType(value: DNHtmlHiddenColDisplayType);
    function get_HiddenRowDisplayType: DNHtmlHiddenRowDisplayType;
    procedure set_HiddenRowDisplayType(value: DNHtmlHiddenRowDisplayType);
    function get_Encoding: DDN.mscorlib.DNEncoding;
    procedure set_Encoding(value: DDN.mscorlib.DNEncoding);
    function get_ExportObjectListener: DNIExportObjectListener;
    procedure set_ExportObjectListener(value: DNIExportObjectListener);
    function get_FilePathProvider: DNIFilePathProvider;
    procedure set_FilePathProvider(value: DNIFilePathProvider);
    function get_StreamProvider: DNIStreamProvider;
    procedure set_StreamProvider(value: DNIStreamProvider);
    function get_ImageOptions: DNImageOrPrintOptions;
    function get_ExportHiddenWorksheet: Boolean;
    procedure set_ExportHiddenWorksheet(value: Boolean);
    function get_PresentationPreference: Boolean;
    procedure set_PresentationPreference(value: Boolean);
    function get_CellCssPrefix: string;
    procedure set_CellCssPrefix(value: string);
    function get_TableCssId: string;
    procedure set_TableCssId(value: string);
    function get_IsFullPathLink: Boolean;
    procedure set_IsFullPathLink(value: Boolean);
    function get_ExportWorksheetCSSSeparately: Boolean;
    procedure set_ExportWorksheetCSSSeparately(value: Boolean);
    function get_ExportSimilarBorderStyle: Boolean;
    procedure set_ExportSimilarBorderStyle(value: Boolean);
    function get_MergeEmptyTdForcely: Boolean;
    procedure set_MergeEmptyTdForcely(value: Boolean);
    function get_ExportCellCoordinate: Boolean;
    procedure set_ExportCellCoordinate(value: Boolean);
    function get_ExportExtraHeadings: Boolean;
    procedure set_ExportExtraHeadings(value: Boolean);
    function get_ExportHeadings: Boolean;
    procedure set_ExportHeadings(value: Boolean);
    function get_ExportFormula: Boolean;
    procedure set_ExportFormula(value: Boolean);
    function get_AddTooltipText: Boolean;
    procedure set_AddTooltipText(value: Boolean);
    function get_ExportGridLines: Boolean;
    procedure set_ExportGridLines(value: Boolean);
    function get_ExportBogusRowData: Boolean;
    procedure set_ExportBogusRowData(value: Boolean);
    function get_ExcludeUnusedStyles: Boolean;
    procedure set_ExcludeUnusedStyles(value: Boolean);
    function get_ExportDocumentProperties: Boolean;
    procedure set_ExportDocumentProperties(value: Boolean);
    function get_ExportWorksheetProperties: Boolean;
    procedure set_ExportWorksheetProperties(value: Boolean);
    function get_ExportWorkbookProperties: Boolean;
    procedure set_ExportWorkbookProperties(value: Boolean);
    function get_ExportFrameScriptsAndProperties: Boolean;
    procedure set_ExportFrameScriptsAndProperties(value: Boolean);
    function get_ExportDataOptions: DNHtmlExportDataOptions;
    procedure set_ExportDataOptions(value: DNHtmlExportDataOptions);
    function get_LinkTargetType: DNHtmlLinkTargetType;
    procedure set_LinkTargetType(value: DNHtmlLinkTargetType);
    function get_SaveFormat: DNSaveFormat;
    function get_ClearData: Boolean;
    procedure set_ClearData(value: Boolean);
    function get_CachedFileFolder: string;
    procedure set_CachedFileFolder(value: string);
    function get_ValidateMergedAreas: Boolean;
    procedure set_ValidateMergedAreas(value: Boolean);
    function get_MergeAreas: Boolean;
    procedure set_MergeAreas(value: Boolean);
    function get_CreateDirectory: Boolean;
    procedure set_CreateDirectory(value: Boolean);
    function get_SortNames: Boolean;
    procedure set_SortNames(value: Boolean);
    function get_SortExternalNames: Boolean;
    procedure set_SortExternalNames(value: Boolean);
    function get_RefreshChartCache: Boolean;
    procedure set_RefreshChartCache(value: Boolean);
    function get_PdfExportImagesFolder: string;
    procedure set_PdfExportImagesFolder(value: string);
    function get_EnableHTTPCompression: Boolean;
    procedure set_EnableHTTPCompression(value: Boolean);
    function get_WarningCallback: DNIWarningCallback;
    procedure set_WarningCallback(value: DNIWarningCallback);
    function get_UpdateSmartArt: Boolean;
    procedure set_UpdateSmartArt(value: Boolean);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property PageTitle: string read get_PageTitle write set_PageTitle;
    property AttachedFilesDirectory: string read get_AttachedFilesDirectory write set_AttachedFilesDirectory;
    property AttachedFilesUrlPrefix: string read get_AttachedFilesUrlPrefix write set_AttachedFilesUrlPrefix;
    property DefaultFontName: string read get_DefaultFontName write set_DefaultFontName;
    property IsExportComments: Boolean read get_IsExportComments write set_IsExportComments;
    property DisableDownlevelRevealedComments: Boolean read get_DisableDownlevelRevealedComments write set_DisableDownlevelRevealedComments;
    property IsExpImageToTempDir: Boolean read get_IsExpImageToTempDir write set_IsExpImageToTempDir;
    property ImageScalable: Boolean read get_ImageScalable write set_ImageScalable;
    property WidthScalable: Boolean read get_WidthScalable write set_WidthScalable;
    property ExportSingleTab: Boolean read get_ExportSingleTab write set_ExportSingleTab;
    property ExportImagesAsBase64: Boolean read get_ExportImagesAsBase64 write set_ExportImagesAsBase64;
    property ExportActiveWorksheetOnly: Boolean read get_ExportActiveWorksheetOnly write set_ExportActiveWorksheetOnly;
    property ExportPrintAreaOnly: Boolean read get_ExportPrintAreaOnly write set_ExportPrintAreaOnly;
    property ExportArea: DNCellArea read get_ExportArea write set_ExportArea;
    property ParseHtmlTagInCell: Boolean read get_ParseHtmlTagInCell write set_ParseHtmlTagInCell;
    property HtmlCrossStringType: DNHtmlCrossType read get_HtmlCrossStringType write set_HtmlCrossStringType;
    property HiddenColDisplayType: DNHtmlHiddenColDisplayType read get_HiddenColDisplayType write set_HiddenColDisplayType;
    property HiddenRowDisplayType: DNHtmlHiddenRowDisplayType read get_HiddenRowDisplayType write set_HiddenRowDisplayType;
    property Encoding: DDN.mscorlib.DNEncoding read get_Encoding write set_Encoding;
    property ExportObjectListener: DNIExportObjectListener read get_ExportObjectListener write set_ExportObjectListener;
    property FilePathProvider: DNIFilePathProvider read get_FilePathProvider write set_FilePathProvider;
    property StreamProvider: DNIStreamProvider read get_StreamProvider write set_StreamProvider;
    property ImageOptions: DNImageOrPrintOptions read get_ImageOptions;
    property ExportHiddenWorksheet: Boolean read get_ExportHiddenWorksheet write set_ExportHiddenWorksheet;
    property PresentationPreference: Boolean read get_PresentationPreference write set_PresentationPreference;
    property CellCssPrefix: string read get_CellCssPrefix write set_CellCssPrefix;
    property TableCssId: string read get_TableCssId write set_TableCssId;
    property IsFullPathLink: Boolean read get_IsFullPathLink write set_IsFullPathLink;
    property ExportWorksheetCSSSeparately: Boolean read get_ExportWorksheetCSSSeparately write set_ExportWorksheetCSSSeparately;
    property ExportSimilarBorderStyle: Boolean read get_ExportSimilarBorderStyle write set_ExportSimilarBorderStyle;
    property MergeEmptyTdForcely: Boolean read get_MergeEmptyTdForcely write set_MergeEmptyTdForcely;
    property ExportCellCoordinate: Boolean read get_ExportCellCoordinate write set_ExportCellCoordinate;
    property ExportExtraHeadings: Boolean read get_ExportExtraHeadings write set_ExportExtraHeadings;
    property ExportHeadings: Boolean read get_ExportHeadings write set_ExportHeadings;
    property ExportFormula: Boolean read get_ExportFormula write set_ExportFormula;
    property AddTooltipText: Boolean read get_AddTooltipText write set_AddTooltipText;
    property ExportGridLines: Boolean read get_ExportGridLines write set_ExportGridLines;
    property ExportBogusRowData: Boolean read get_ExportBogusRowData write set_ExportBogusRowData;
    property ExcludeUnusedStyles: Boolean read get_ExcludeUnusedStyles write set_ExcludeUnusedStyles;
    property ExportDocumentProperties: Boolean read get_ExportDocumentProperties write set_ExportDocumentProperties;
    property ExportWorksheetProperties: Boolean read get_ExportWorksheetProperties write set_ExportWorksheetProperties;
    property ExportWorkbookProperties: Boolean read get_ExportWorkbookProperties write set_ExportWorkbookProperties;
    property ExportFrameScriptsAndProperties: Boolean read get_ExportFrameScriptsAndProperties write set_ExportFrameScriptsAndProperties;
    property ExportDataOptions: DNHtmlExportDataOptions read get_ExportDataOptions write set_ExportDataOptions;
    property LinkTargetType: DNHtmlLinkTargetType read get_LinkTargetType write set_LinkTargetType;
    property SaveFormat: DNSaveFormat read get_SaveFormat;
    property ClearData: Boolean read get_ClearData write set_ClearData;
    property CachedFileFolder: string read get_CachedFileFolder write set_CachedFileFolder;
    property ValidateMergedAreas: Boolean read get_ValidateMergedAreas write set_ValidateMergedAreas;
    property MergeAreas: Boolean read get_MergeAreas write set_MergeAreas;
    property CreateDirectory: Boolean read get_CreateDirectory write set_CreateDirectory;
    property SortNames: Boolean read get_SortNames write set_SortNames;
    property SortExternalNames: Boolean read get_SortExternalNames write set_SortExternalNames;
    property RefreshChartCache: Boolean read get_RefreshChartCache write set_RefreshChartCache;
    property PdfExportImagesFolder: string read get_PdfExportImagesFolder write set_PdfExportImagesFolder;
    property EnableHTTPCompression: Boolean read get_EnableHTTPCompression write set_EnableHTTPCompression;
    property WarningCallback: DNIWarningCallback read get_WarningCallback write set_WarningCallback;
    property UpdateSmartArt: Boolean read get_UpdateSmartArt write set_UpdateSmartArt;
  end;

  TDNHtmlSaveOptions = class(TDNGenericImport<DNHtmlSaveOptionsClass, DNHtmlSaveOptions>) end;

  //-------------namespace: Aspose.Cells----------------
  DNImageSaveOptionsClass = interface(DNSaveOptionsClass)
  ['{CB8D33AA-BCB8-5564-9718-6184D49913A9}']
  { constructors } 

    {class} function init: DNImageSaveOptions; overload;
    {class} function init(saveFormat: DNSaveFormat): DNImageSaveOptions; overload;

  end;

  [DNTypeName('Aspose.Cells.ImageSaveOptions')]
  DNImageSaveOptions = interface(DNSaveOptions)
  ['{5426A51C-74EB-3874-990D-CD20A9545FC6}']
  { getters & setters } 

    function get_ImageOrPrintOptions: DNImageOrPrintOptions;
    function get_SaveFormat: DNSaveFormat;
    function get_ClearData: Boolean;
    procedure set_ClearData(value: Boolean);
    function get_CachedFileFolder: string;
    procedure set_CachedFileFolder(value: string);
    function get_ValidateMergedAreas: Boolean;
    procedure set_ValidateMergedAreas(value: Boolean);
    function get_MergeAreas: Boolean;
    procedure set_MergeAreas(value: Boolean);
    function get_CreateDirectory: Boolean;
    procedure set_CreateDirectory(value: Boolean);
    function get_SortNames: Boolean;
    procedure set_SortNames(value: Boolean);
    function get_SortExternalNames: Boolean;
    procedure set_SortExternalNames(value: Boolean);
    function get_RefreshChartCache: Boolean;
    procedure set_RefreshChartCache(value: Boolean);
    function get_PdfExportImagesFolder: string;
    procedure set_PdfExportImagesFolder(value: string);
    function get_EnableHTTPCompression: Boolean;
    procedure set_EnableHTTPCompression(value: Boolean);
    function get_WarningCallback: DNIWarningCallback;
    procedure set_WarningCallback(value: DNIWarningCallback);
    function get_UpdateSmartArt: Boolean;
    procedure set_UpdateSmartArt(value: Boolean);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property ImageOrPrintOptions: DNImageOrPrintOptions read get_ImageOrPrintOptions;
    property SaveFormat: DNSaveFormat read get_SaveFormat;
    property ClearData: Boolean read get_ClearData write set_ClearData;
    property CachedFileFolder: string read get_CachedFileFolder write set_CachedFileFolder;
    property ValidateMergedAreas: Boolean read get_ValidateMergedAreas write set_ValidateMergedAreas;
    property MergeAreas: Boolean read get_MergeAreas write set_MergeAreas;
    property CreateDirectory: Boolean read get_CreateDirectory write set_CreateDirectory;
    property SortNames: Boolean read get_SortNames write set_SortNames;
    property SortExternalNames: Boolean read get_SortExternalNames write set_SortExternalNames;
    property RefreshChartCache: Boolean read get_RefreshChartCache write set_RefreshChartCache;
    property PdfExportImagesFolder: string read get_PdfExportImagesFolder write set_PdfExportImagesFolder;
    property EnableHTTPCompression: Boolean read get_EnableHTTPCompression write set_EnableHTTPCompression;
    property WarningCallback: DNIWarningCallback read get_WarningCallback write set_WarningCallback;
    property UpdateSmartArt: Boolean read get_UpdateSmartArt write set_UpdateSmartArt;
  end;

  TDNImageSaveOptions = class(TDNGenericImport<DNImageSaveOptionsClass, DNImageSaveOptions>) end;

  //-------------namespace: Aspose.Cells----------------
  DNSvgSaveOptionsClass = interface(DNImageSaveOptionsClass)
  ['{A9951855-0196-5F26-A692-AD8010698A5F}']
  { constructors } 

    {class} function init: DNSvgSaveOptions; overload;
    {class} function init(saveFormat: DNSaveFormat): DNSvgSaveOptions; overload;

  end;

  [DNTypeName('Aspose.Cells.SvgSaveOptions')]
  DNSvgSaveOptions = interface(DNImageSaveOptions)
  ['{1106870F-8EB6-3A3E-9752-BFEC2C870F1F}']
  { getters & setters } 

    function get_SheetIndex: Int32;
    procedure set_SheetIndex(value: Int32);
    function get_ImageOrPrintOptions: DNImageOrPrintOptions;
    function get_SaveFormat: DNSaveFormat;
    function get_ClearData: Boolean;
    procedure set_ClearData(value: Boolean);
    function get_CachedFileFolder: string;
    procedure set_CachedFileFolder(value: string);
    function get_ValidateMergedAreas: Boolean;
    procedure set_ValidateMergedAreas(value: Boolean);
    function get_MergeAreas: Boolean;
    procedure set_MergeAreas(value: Boolean);
    function get_CreateDirectory: Boolean;
    procedure set_CreateDirectory(value: Boolean);
    function get_SortNames: Boolean;
    procedure set_SortNames(value: Boolean);
    function get_SortExternalNames: Boolean;
    procedure set_SortExternalNames(value: Boolean);
    function get_RefreshChartCache: Boolean;
    procedure set_RefreshChartCache(value: Boolean);
    function get_PdfExportImagesFolder: string;
    procedure set_PdfExportImagesFolder(value: string);
    function get_EnableHTTPCompression: Boolean;
    procedure set_EnableHTTPCompression(value: Boolean);
    function get_WarningCallback: DNIWarningCallback;
    procedure set_WarningCallback(value: DNIWarningCallback);
    function get_UpdateSmartArt: Boolean;
    procedure set_UpdateSmartArt(value: Boolean);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property SheetIndex: Int32 read get_SheetIndex write set_SheetIndex;
    property ImageOrPrintOptions: DNImageOrPrintOptions read get_ImageOrPrintOptions;
    property SaveFormat: DNSaveFormat read get_SaveFormat;
    property ClearData: Boolean read get_ClearData write set_ClearData;
    property CachedFileFolder: string read get_CachedFileFolder write set_CachedFileFolder;
    property ValidateMergedAreas: Boolean read get_ValidateMergedAreas write set_ValidateMergedAreas;
    property MergeAreas: Boolean read get_MergeAreas write set_MergeAreas;
    property CreateDirectory: Boolean read get_CreateDirectory write set_CreateDirectory;
    property SortNames: Boolean read get_SortNames write set_SortNames;
    property SortExternalNames: Boolean read get_SortExternalNames write set_SortExternalNames;
    property RefreshChartCache: Boolean read get_RefreshChartCache write set_RefreshChartCache;
    property PdfExportImagesFolder: string read get_PdfExportImagesFolder write set_PdfExportImagesFolder;
    property EnableHTTPCompression: Boolean read get_EnableHTTPCompression write set_EnableHTTPCompression;
    property WarningCallback: DNIWarningCallback read get_WarningCallback write set_WarningCallback;
    property UpdateSmartArt: Boolean read get_UpdateSmartArt write set_UpdateSmartArt;
  end;

  TDNSvgSaveOptions = class(TDNGenericImport<DNSvgSaveOptionsClass, DNSvgSaveOptions>) end;

  //-------------namespace: Aspose.Cells----------------
  DNMarkdownSaveOptionsClass = interface(DNSaveOptionsClass)
  ['{E524B2E0-7B03-5959-9519-1F8299D615EE}']
  { constructors } 

    {class} function init: DNMarkdownSaveOptions;

  end;

  [DNTypeName('Aspose.Cells.MarkdownSaveOptions')]
  DNMarkdownSaveOptions = interface(DNSaveOptions)
  ['{D496D390-31E7-3EB5-AF6A-4927DD5D6D74}']
  { getters & setters } 

    function get_Encoding: DDN.mscorlib.DNEncoding;
    procedure set_Encoding(value: DDN.mscorlib.DNEncoding);
    function get_FormatStrategy: DNCellValueFormatStrategy;
    procedure set_FormatStrategy(value: DNCellValueFormatStrategy);
    function get_LightCellsDataProvider: DNLightCellsDataProvider;
    procedure set_LightCellsDataProvider(value: DNLightCellsDataProvider);
    function get_LineSeparator: string;
    procedure set_LineSeparator(value: string);
    function get_SaveFormat: DNSaveFormat;
    function get_ClearData: Boolean;
    procedure set_ClearData(value: Boolean);
    function get_CachedFileFolder: string;
    procedure set_CachedFileFolder(value: string);
    function get_ValidateMergedAreas: Boolean;
    procedure set_ValidateMergedAreas(value: Boolean);
    function get_MergeAreas: Boolean;
    procedure set_MergeAreas(value: Boolean);
    function get_CreateDirectory: Boolean;
    procedure set_CreateDirectory(value: Boolean);
    function get_SortNames: Boolean;
    procedure set_SortNames(value: Boolean);
    function get_SortExternalNames: Boolean;
    procedure set_SortExternalNames(value: Boolean);
    function get_RefreshChartCache: Boolean;
    procedure set_RefreshChartCache(value: Boolean);
    function get_PdfExportImagesFolder: string;
    procedure set_PdfExportImagesFolder(value: string);
    function get_EnableHTTPCompression: Boolean;
    procedure set_EnableHTTPCompression(value: Boolean);
    function get_WarningCallback: DNIWarningCallback;
    procedure set_WarningCallback(value: DNIWarningCallback);
    function get_UpdateSmartArt: Boolean;
    procedure set_UpdateSmartArt(value: Boolean);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Encoding: DDN.mscorlib.DNEncoding read get_Encoding write set_Encoding;
    property FormatStrategy: DNCellValueFormatStrategy read get_FormatStrategy write set_FormatStrategy;
    property LightCellsDataProvider: DNLightCellsDataProvider read get_LightCellsDataProvider write set_LightCellsDataProvider;
    property LineSeparator: string read get_LineSeparator write set_LineSeparator;
    property SaveFormat: DNSaveFormat read get_SaveFormat;
    property ClearData: Boolean read get_ClearData write set_ClearData;
    property CachedFileFolder: string read get_CachedFileFolder write set_CachedFileFolder;
    property ValidateMergedAreas: Boolean read get_ValidateMergedAreas write set_ValidateMergedAreas;
    property MergeAreas: Boolean read get_MergeAreas write set_MergeAreas;
    property CreateDirectory: Boolean read get_CreateDirectory write set_CreateDirectory;
    property SortNames: Boolean read get_SortNames write set_SortNames;
    property SortExternalNames: Boolean read get_SortExternalNames write set_SortExternalNames;
    property RefreshChartCache: Boolean read get_RefreshChartCache write set_RefreshChartCache;
    property PdfExportImagesFolder: string read get_PdfExportImagesFolder write set_PdfExportImagesFolder;
    property EnableHTTPCompression: Boolean read get_EnableHTTPCompression write set_EnableHTTPCompression;
    property WarningCallback: DNIWarningCallback read get_WarningCallback write set_WarningCallback;
    property UpdateSmartArt: Boolean read get_UpdateSmartArt write set_UpdateSmartArt;
  end;

  TDNMarkdownSaveOptions = class(TDNGenericImport<DNMarkdownSaveOptionsClass, DNMarkdownSaveOptions>) end;

  //-------------namespace: Aspose.Cells----------------
  DNOdsSaveOptionsClass = interface(DNSaveOptionsClass)
  ['{19BBE139-2A5A-5CB8-990C-A21ECCB98E6F}']
  { constructors } 

    {class} function init: DNOdsSaveOptions; overload;
    {class} function init(saveFormat: DNSaveFormat): DNOdsSaveOptions; overload;

  end;

  [DNTypeName('Aspose.Cells.OdsSaveOptions')]
  DNOdsSaveOptions = interface(DNSaveOptions)
  ['{4723FB3E-EAC4-3F46-BFE0-80C6E6664423}']
  { getters & setters } 

    function get_GeneratorType: DNOdsGeneratorType;
    procedure set_GeneratorType(value: DNOdsGeneratorType);
    function get_IsStrictSchema11: Boolean;
    procedure set_IsStrictSchema11(value: Boolean);
    function get_SaveFormat: DNSaveFormat;
    function get_ClearData: Boolean;
    procedure set_ClearData(value: Boolean);
    function get_CachedFileFolder: string;
    procedure set_CachedFileFolder(value: string);
    function get_ValidateMergedAreas: Boolean;
    procedure set_ValidateMergedAreas(value: Boolean);
    function get_MergeAreas: Boolean;
    procedure set_MergeAreas(value: Boolean);
    function get_CreateDirectory: Boolean;
    procedure set_CreateDirectory(value: Boolean);
    function get_SortNames: Boolean;
    procedure set_SortNames(value: Boolean);
    function get_SortExternalNames: Boolean;
    procedure set_SortExternalNames(value: Boolean);
    function get_RefreshChartCache: Boolean;
    procedure set_RefreshChartCache(value: Boolean);
    function get_PdfExportImagesFolder: string;
    procedure set_PdfExportImagesFolder(value: string);
    function get_EnableHTTPCompression: Boolean;
    procedure set_EnableHTTPCompression(value: Boolean);
    function get_WarningCallback: DNIWarningCallback;
    procedure set_WarningCallback(value: DNIWarningCallback);
    function get_UpdateSmartArt: Boolean;
    procedure set_UpdateSmartArt(value: Boolean);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property GeneratorType: DNOdsGeneratorType read get_GeneratorType write set_GeneratorType;
    property IsStrictSchema11: Boolean read get_IsStrictSchema11 write set_IsStrictSchema11;
    property SaveFormat: DNSaveFormat read get_SaveFormat;
    property ClearData: Boolean read get_ClearData write set_ClearData;
    property CachedFileFolder: string read get_CachedFileFolder write set_CachedFileFolder;
    property ValidateMergedAreas: Boolean read get_ValidateMergedAreas write set_ValidateMergedAreas;
    property MergeAreas: Boolean read get_MergeAreas write set_MergeAreas;
    property CreateDirectory: Boolean read get_CreateDirectory write set_CreateDirectory;
    property SortNames: Boolean read get_SortNames write set_SortNames;
    property SortExternalNames: Boolean read get_SortExternalNames write set_SortExternalNames;
    property RefreshChartCache: Boolean read get_RefreshChartCache write set_RefreshChartCache;
    property PdfExportImagesFolder: string read get_PdfExportImagesFolder write set_PdfExportImagesFolder;
    property EnableHTTPCompression: Boolean read get_EnableHTTPCompression write set_EnableHTTPCompression;
    property WarningCallback: DNIWarningCallback read get_WarningCallback write set_WarningCallback;
    property UpdateSmartArt: Boolean read get_UpdateSmartArt write set_UpdateSmartArt;
  end;

  TDNOdsSaveOptions = class(TDNGenericImport<DNOdsSaveOptionsClass, DNOdsSaveOptions>) end;

  //-------------namespace: Aspose.Cells----------------
  DNOoxmlSaveOptionsClass = interface(DNSaveOptionsClass)
  ['{C1DBB9BF-72AD-5608-B69E-E9BEC2449252}']
  { constructors } 

    {class} function init: DNOoxmlSaveOptions; overload;
    {class} function init(saveFormat: DNSaveFormat): DNOoxmlSaveOptions; overload;

  end;

  [DNTypeName('Aspose.Cells.OoxmlSaveOptions')]
  DNOoxmlSaveOptions = interface(DNSaveOptions)
  ['{9E15EEB5-EDBA-3C84-B57E-03EBFBAA4E8B}']
  { getters & setters } 

    function get_ExportCellName: Boolean;
    procedure set_ExportCellName(value: Boolean);
    function get_LightCellsDataProvider: DNLightCellsDataProvider;
    procedure set_LightCellsDataProvider(value: DNLightCellsDataProvider);
    function get_UpdateZoom: Boolean;
    procedure set_UpdateZoom(value: Boolean);
    function get_EnableZip64: Boolean;
    procedure set_EnableZip64(value: Boolean);
    function get_EmbedOoxmlAsOleObject: Boolean;
    procedure set_EmbedOoxmlAsOleObject(value: Boolean);
    function get_CompressionType: DNOoxmlCompressionType;
    procedure set_CompressionType(value: DNOoxmlCompressionType);
    function get_SaveFormat: DNSaveFormat;
    function get_ClearData: Boolean;
    procedure set_ClearData(value: Boolean);
    function get_CachedFileFolder: string;
    procedure set_CachedFileFolder(value: string);
    function get_ValidateMergedAreas: Boolean;
    procedure set_ValidateMergedAreas(value: Boolean);
    function get_MergeAreas: Boolean;
    procedure set_MergeAreas(value: Boolean);
    function get_CreateDirectory: Boolean;
    procedure set_CreateDirectory(value: Boolean);
    function get_SortNames: Boolean;
    procedure set_SortNames(value: Boolean);
    function get_SortExternalNames: Boolean;
    procedure set_SortExternalNames(value: Boolean);
    function get_RefreshChartCache: Boolean;
    procedure set_RefreshChartCache(value: Boolean);
    function get_PdfExportImagesFolder: string;
    procedure set_PdfExportImagesFolder(value: string);
    function get_EnableHTTPCompression: Boolean;
    procedure set_EnableHTTPCompression(value: Boolean);
    function get_WarningCallback: DNIWarningCallback;
    procedure set_WarningCallback(value: DNIWarningCallback);
    function get_UpdateSmartArt: Boolean;
    procedure set_UpdateSmartArt(value: Boolean);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property ExportCellName: Boolean read get_ExportCellName write set_ExportCellName;
    property LightCellsDataProvider: DNLightCellsDataProvider read get_LightCellsDataProvider write set_LightCellsDataProvider;
    property UpdateZoom: Boolean read get_UpdateZoom write set_UpdateZoom;
    property EnableZip64: Boolean read get_EnableZip64 write set_EnableZip64;
    property EmbedOoxmlAsOleObject: Boolean read get_EmbedOoxmlAsOleObject write set_EmbedOoxmlAsOleObject;
    property CompressionType: DNOoxmlCompressionType read get_CompressionType write set_CompressionType;
    property SaveFormat: DNSaveFormat read get_SaveFormat;
    property ClearData: Boolean read get_ClearData write set_ClearData;
    property CachedFileFolder: string read get_CachedFileFolder write set_CachedFileFolder;
    property ValidateMergedAreas: Boolean read get_ValidateMergedAreas write set_ValidateMergedAreas;
    property MergeAreas: Boolean read get_MergeAreas write set_MergeAreas;
    property CreateDirectory: Boolean read get_CreateDirectory write set_CreateDirectory;
    property SortNames: Boolean read get_SortNames write set_SortNames;
    property SortExternalNames: Boolean read get_SortExternalNames write set_SortExternalNames;
    property RefreshChartCache: Boolean read get_RefreshChartCache write set_RefreshChartCache;
    property PdfExportImagesFolder: string read get_PdfExportImagesFolder write set_PdfExportImagesFolder;
    property EnableHTTPCompression: Boolean read get_EnableHTTPCompression write set_EnableHTTPCompression;
    property WarningCallback: DNIWarningCallback read get_WarningCallback write set_WarningCallback;
    property UpdateSmartArt: Boolean read get_UpdateSmartArt write set_UpdateSmartArt;
  end;

  TDNOoxmlSaveOptions = class(TDNGenericImport<DNOoxmlSaveOptionsClass, DNOoxmlSaveOptions>) end;

  //-------------namespace: Aspose.Cells----------------
  DNPdfSaveOptionsClass = interface(DNSaveOptionsClass)
  ['{9F020F11-B3B5-53FB-A003-37D3CA0FE39B}']
  { constructors } 

    {class} function init: DNPdfSaveOptions; overload;
    {class} function init(saveFormat: DNSaveFormat): DNPdfSaveOptions; overload;

  end;

  [DNTypeName('Aspose.Cells.PdfSaveOptions')]
  DNPdfSaveOptions = interface(DNSaveOptions)
  ['{19B1D7CC-7F68-3394-AD1F-FF5CF07FB196}']
  { getters & setters } 

    function get_PrintingPageType: DNPrintingPageType;
    procedure set_PrintingPageType(value: DNPrintingPageType);
    function get_EmbedStandardWindowsFonts: Boolean;
    procedure set_EmbedStandardWindowsFonts(value: Boolean);
    function get_Bookmark: DNPdfBookmarkEntry;
    procedure set_Bookmark(value: DNPdfBookmarkEntry);
    function get_Compliance: DNPdfCompliance;
    procedure set_Compliance(value: DNPdfCompliance);
    function get_DefaultFont: string;
    procedure set_DefaultFont(value: string);
    function get_CheckWorkbookDefaultFont: Boolean;
    procedure set_CheckWorkbookDefaultFont(value: Boolean);
    function get_SecurityOptions: DNPdfSecurityOptions;
    procedure set_SecurityOptions(value: DNPdfSecurityOptions);
    function get_OnePagePerSheet: Boolean;
    procedure set_OnePagePerSheet(value: Boolean);
    function get_AllColumnsInOnePagePerSheet: Boolean;
    procedure set_AllColumnsInOnePagePerSheet(value: Boolean);
    function get_ImageType: DDN.System.Drawing.DNImageFormat;
    procedure set_ImageType(value: DDN.System.Drawing.DNImageFormat);
    function get_CalculateFormula: Boolean;
    procedure set_CalculateFormula(value: Boolean);
    function get_PdfCompression: DNPdfCompressionCore;
    procedure set_PdfCompression(value: DNPdfCompressionCore);
    function get_StreamProvider: DNIStreamProvider;
    procedure set_StreamProvider(value: DNIStreamProvider);
    function get_CheckFontCompatibility: Boolean;
    procedure set_CheckFontCompatibility(value: Boolean);
    function get_PageIndex: Int32;
    procedure set_PageIndex(value: Int32);
    function get_PageCount: Int32;
    procedure set_PageCount(value: Int32);
    function get_CreatedTime: DDN.mscorlib.DNDateTime;
    procedure set_CreatedTime(value: DDN.mscorlib.DNDateTime);
    function get_OptimizationType: DNPdfOptimizationType;
    procedure set_OptimizationType(value: DNPdfOptimizationType);
    function get_IsFontSubstitutionCharGranularity: Boolean;
    procedure set_IsFontSubstitutionCharGranularity(value: Boolean);
    function get_GridlineType: DNGridlineType;
    procedure set_GridlineType(value: DNGridlineType);
    function get_TextCrossType: DNTextCrossType;
    procedure set_TextCrossType(value: DNTextCrossType);
    function get_IgnoreError: Boolean;
    procedure set_IgnoreError(value: Boolean);
    function get_OutputBlankPageWhenNothingToPrint: Boolean;
    procedure set_OutputBlankPageWhenNothingToPrint(value: Boolean);
    function get_DrawObjectEventHandler: DNDrawObjectEventHandler;
    procedure set_DrawObjectEventHandler(value: DNDrawObjectEventHandler);
    function get_CustomPropertiesExport: DNPdfCustomPropertiesExport;
    procedure set_CustomPropertiesExport(value: DNPdfCustomPropertiesExport);
    function get_ExportDocumentStructure: Boolean;
    procedure set_ExportDocumentStructure(value: Boolean);
    function get_PageSavingCallback: DNIPageSavingCallback;
    procedure set_PageSavingCallback(value: DNIPageSavingCallback);
    function get_EmfRenderSetting: DNEmfRenderSetting;
    procedure set_EmfRenderSetting(value: DNEmfRenderSetting);
    function get_DisplayDocTitle: Boolean;
    procedure set_DisplayDocTitle(value: Boolean);
    function get_DefaultEditLanguage: DNDefaultEditLanguage;
    procedure set_DefaultEditLanguage(value: DNDefaultEditLanguage);
    function get_FontEncoding: DNPdfFontEncoding;
    procedure set_FontEncoding(value: DNPdfFontEncoding);
    function get_SaveFormat: DNSaveFormat;
    function get_ClearData: Boolean;
    procedure set_ClearData(value: Boolean);
    function get_CachedFileFolder: string;
    procedure set_CachedFileFolder(value: string);
    function get_ValidateMergedAreas: Boolean;
    procedure set_ValidateMergedAreas(value: Boolean);
    function get_MergeAreas: Boolean;
    procedure set_MergeAreas(value: Boolean);
    function get_CreateDirectory: Boolean;
    procedure set_CreateDirectory(value: Boolean);
    function get_SortNames: Boolean;
    procedure set_SortNames(value: Boolean);
    function get_SortExternalNames: Boolean;
    procedure set_SortExternalNames(value: Boolean);
    function get_RefreshChartCache: Boolean;
    procedure set_RefreshChartCache(value: Boolean);
    function get_PdfExportImagesFolder: string;
    procedure set_PdfExportImagesFolder(value: string);
    function get_EnableHTTPCompression: Boolean;
    procedure set_EnableHTTPCompression(value: Boolean);
    function get_WarningCallback: DNIWarningCallback;
    procedure set_WarningCallback(value: DNIWarningCallback);
    function get_UpdateSmartArt: Boolean;
    procedure set_UpdateSmartArt(value: Boolean);

  { methods } 

    procedure SetImageResample(desiredPPI: Int32; jpegQuality: Int32);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property PrintingPageType: DNPrintingPageType read get_PrintingPageType write set_PrintingPageType;
    property EmbedStandardWindowsFonts: Boolean read get_EmbedStandardWindowsFonts write set_EmbedStandardWindowsFonts;
    property Bookmark: DNPdfBookmarkEntry read get_Bookmark write set_Bookmark;
    property Compliance: DNPdfCompliance read get_Compliance write set_Compliance;
    property DefaultFont: string read get_DefaultFont write set_DefaultFont;
    property CheckWorkbookDefaultFont: Boolean read get_CheckWorkbookDefaultFont write set_CheckWorkbookDefaultFont;
    property SecurityOptions: DNPdfSecurityOptions read get_SecurityOptions write set_SecurityOptions;
    property OnePagePerSheet: Boolean read get_OnePagePerSheet write set_OnePagePerSheet;
    property AllColumnsInOnePagePerSheet: Boolean read get_AllColumnsInOnePagePerSheet write set_AllColumnsInOnePagePerSheet;
    property ImageType: DDN.System.Drawing.DNImageFormat read get_ImageType write set_ImageType;
    property CalculateFormula: Boolean read get_CalculateFormula write set_CalculateFormula;
    property PdfCompression: DNPdfCompressionCore read get_PdfCompression write set_PdfCompression;
    property StreamProvider: DNIStreamProvider read get_StreamProvider write set_StreamProvider;
    property CheckFontCompatibility: Boolean read get_CheckFontCompatibility write set_CheckFontCompatibility;
    property PageIndex: Int32 read get_PageIndex write set_PageIndex;
    property PageCount: Int32 read get_PageCount write set_PageCount;
    property CreatedTime: DDN.mscorlib.DNDateTime read get_CreatedTime write set_CreatedTime;
    property OptimizationType: DNPdfOptimizationType read get_OptimizationType write set_OptimizationType;
    property IsFontSubstitutionCharGranularity: Boolean read get_IsFontSubstitutionCharGranularity write set_IsFontSubstitutionCharGranularity;
    property GridlineType: DNGridlineType read get_GridlineType write set_GridlineType;
    property TextCrossType: DNTextCrossType read get_TextCrossType write set_TextCrossType;
    property IgnoreError: Boolean read get_IgnoreError write set_IgnoreError;
    property OutputBlankPageWhenNothingToPrint: Boolean read get_OutputBlankPageWhenNothingToPrint write set_OutputBlankPageWhenNothingToPrint;
    property DrawObjectEventHandler: DNDrawObjectEventHandler read get_DrawObjectEventHandler write set_DrawObjectEventHandler;
    property CustomPropertiesExport: DNPdfCustomPropertiesExport read get_CustomPropertiesExport write set_CustomPropertiesExport;
    property ExportDocumentStructure: Boolean read get_ExportDocumentStructure write set_ExportDocumentStructure;
    property PageSavingCallback: DNIPageSavingCallback read get_PageSavingCallback write set_PageSavingCallback;
    property EmfRenderSetting: DNEmfRenderSetting read get_EmfRenderSetting write set_EmfRenderSetting;
    property DisplayDocTitle: Boolean read get_DisplayDocTitle write set_DisplayDocTitle;
    property DefaultEditLanguage: DNDefaultEditLanguage read get_DefaultEditLanguage write set_DefaultEditLanguage;
    property FontEncoding: DNPdfFontEncoding read get_FontEncoding write set_FontEncoding;
    property SaveFormat: DNSaveFormat read get_SaveFormat;
    property ClearData: Boolean read get_ClearData write set_ClearData;
    property CachedFileFolder: string read get_CachedFileFolder write set_CachedFileFolder;
    property ValidateMergedAreas: Boolean read get_ValidateMergedAreas write set_ValidateMergedAreas;
    property MergeAreas: Boolean read get_MergeAreas write set_MergeAreas;
    property CreateDirectory: Boolean read get_CreateDirectory write set_CreateDirectory;
    property SortNames: Boolean read get_SortNames write set_SortNames;
    property SortExternalNames: Boolean read get_SortExternalNames write set_SortExternalNames;
    property RefreshChartCache: Boolean read get_RefreshChartCache write set_RefreshChartCache;
    property PdfExportImagesFolder: string read get_PdfExportImagesFolder write set_PdfExportImagesFolder;
    property EnableHTTPCompression: Boolean read get_EnableHTTPCompression write set_EnableHTTPCompression;
    property WarningCallback: DNIWarningCallback read get_WarningCallback write set_WarningCallback;
    property UpdateSmartArt: Boolean read get_UpdateSmartArt write set_UpdateSmartArt;
  end;

  TDNPdfSaveOptions = class(TDNGenericImport<DNPdfSaveOptionsClass, DNPdfSaveOptions>) end;

  //-------------namespace: Aspose.Cells----------------
  DNPptxSaveOptionsClass = interface(DNSaveOptionsClass)
  ['{61924C01-6409-5ADF-9799-D90708B10C74}']
  { constructors } 

    {class} function init: DNPptxSaveOptions;

  end;

  [DNTypeName('Aspose.Cells.PptxSaveOptions')]
  DNPptxSaveOptions = interface(DNSaveOptions)
  ['{E1461AF5-3118-30CD-AC8B-E2E4D21B14EE}']
  { getters & setters } 

    function get_SaveFormat: DNSaveFormat;
    function get_ClearData: Boolean;
    procedure set_ClearData(value: Boolean);
    function get_CachedFileFolder: string;
    procedure set_CachedFileFolder(value: string);
    function get_ValidateMergedAreas: Boolean;
    procedure set_ValidateMergedAreas(value: Boolean);
    function get_MergeAreas: Boolean;
    procedure set_MergeAreas(value: Boolean);
    function get_CreateDirectory: Boolean;
    procedure set_CreateDirectory(value: Boolean);
    function get_SortNames: Boolean;
    procedure set_SortNames(value: Boolean);
    function get_SortExternalNames: Boolean;
    procedure set_SortExternalNames(value: Boolean);
    function get_RefreshChartCache: Boolean;
    procedure set_RefreshChartCache(value: Boolean);
    function get_PdfExportImagesFolder: string;
    procedure set_PdfExportImagesFolder(value: string);
    function get_EnableHTTPCompression: Boolean;
    procedure set_EnableHTTPCompression(value: Boolean);
    function get_WarningCallback: DNIWarningCallback;
    procedure set_WarningCallback(value: DNIWarningCallback);
    function get_UpdateSmartArt: Boolean;
    procedure set_UpdateSmartArt(value: Boolean);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property SaveFormat: DNSaveFormat read get_SaveFormat;
    property ClearData: Boolean read get_ClearData write set_ClearData;
    property CachedFileFolder: string read get_CachedFileFolder write set_CachedFileFolder;
    property ValidateMergedAreas: Boolean read get_ValidateMergedAreas write set_ValidateMergedAreas;
    property MergeAreas: Boolean read get_MergeAreas write set_MergeAreas;
    property CreateDirectory: Boolean read get_CreateDirectory write set_CreateDirectory;
    property SortNames: Boolean read get_SortNames write set_SortNames;
    property SortExternalNames: Boolean read get_SortExternalNames write set_SortExternalNames;
    property RefreshChartCache: Boolean read get_RefreshChartCache write set_RefreshChartCache;
    property PdfExportImagesFolder: string read get_PdfExportImagesFolder write set_PdfExportImagesFolder;
    property EnableHTTPCompression: Boolean read get_EnableHTTPCompression write set_EnableHTTPCompression;
    property WarningCallback: DNIWarningCallback read get_WarningCallback write set_WarningCallback;
    property UpdateSmartArt: Boolean read get_UpdateSmartArt write set_UpdateSmartArt;
  end;

  TDNPptxSaveOptions = class(TDNGenericImport<DNPptxSaveOptionsClass, DNPptxSaveOptions>) end;

  //-------------namespace: Aspose.Cells----------------
  DNSpreadsheetML2003SaveOptionsClass = interface(DNSaveOptionsClass)
  ['{F02DD1A1-D2CE-5F69-82B8-F839FD9D8BC5}']
  { constructors } 

    {class} function init: DNSpreadsheetML2003SaveOptions; overload;
    {class} function init(saveFormat: DNSaveFormat): DNSpreadsheetML2003SaveOptions; overload;

  end;

  [DNTypeName('Aspose.Cells.SpreadsheetML2003SaveOptions')]
  DNSpreadsheetML2003SaveOptions = interface(DNSaveOptions)
  ['{B40F2E4D-EC2B-39E6-A5D8-90DBE1A07FBD}']
  { getters & setters } 

    function get_IsIndentedFormatting: Boolean;
    procedure set_IsIndentedFormatting(value: Boolean);
    function get_LimitAsXls: Boolean;
    procedure set_LimitAsXls(value: Boolean);
    function get_ExportColumnIndexOfCell: Boolean;
    procedure set_ExportColumnIndexOfCell(value: Boolean);
    function get_SaveFormat: DNSaveFormat;
    function get_ClearData: Boolean;
    procedure set_ClearData(value: Boolean);
    function get_CachedFileFolder: string;
    procedure set_CachedFileFolder(value: string);
    function get_ValidateMergedAreas: Boolean;
    procedure set_ValidateMergedAreas(value: Boolean);
    function get_MergeAreas: Boolean;
    procedure set_MergeAreas(value: Boolean);
    function get_CreateDirectory: Boolean;
    procedure set_CreateDirectory(value: Boolean);
    function get_SortNames: Boolean;
    procedure set_SortNames(value: Boolean);
    function get_SortExternalNames: Boolean;
    procedure set_SortExternalNames(value: Boolean);
    function get_RefreshChartCache: Boolean;
    procedure set_RefreshChartCache(value: Boolean);
    function get_PdfExportImagesFolder: string;
    procedure set_PdfExportImagesFolder(value: string);
    function get_EnableHTTPCompression: Boolean;
    procedure set_EnableHTTPCompression(value: Boolean);
    function get_WarningCallback: DNIWarningCallback;
    procedure set_WarningCallback(value: DNIWarningCallback);
    function get_UpdateSmartArt: Boolean;
    procedure set_UpdateSmartArt(value: Boolean);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property IsIndentedFormatting: Boolean read get_IsIndentedFormatting write set_IsIndentedFormatting;
    property LimitAsXls: Boolean read get_LimitAsXls write set_LimitAsXls;
    property ExportColumnIndexOfCell: Boolean read get_ExportColumnIndexOfCell write set_ExportColumnIndexOfCell;
    property SaveFormat: DNSaveFormat read get_SaveFormat;
    property ClearData: Boolean read get_ClearData write set_ClearData;
    property CachedFileFolder: string read get_CachedFileFolder write set_CachedFileFolder;
    property ValidateMergedAreas: Boolean read get_ValidateMergedAreas write set_ValidateMergedAreas;
    property MergeAreas: Boolean read get_MergeAreas write set_MergeAreas;
    property CreateDirectory: Boolean read get_CreateDirectory write set_CreateDirectory;
    property SortNames: Boolean read get_SortNames write set_SortNames;
    property SortExternalNames: Boolean read get_SortExternalNames write set_SortExternalNames;
    property RefreshChartCache: Boolean read get_RefreshChartCache write set_RefreshChartCache;
    property PdfExportImagesFolder: string read get_PdfExportImagesFolder write set_PdfExportImagesFolder;
    property EnableHTTPCompression: Boolean read get_EnableHTTPCompression write set_EnableHTTPCompression;
    property WarningCallback: DNIWarningCallback read get_WarningCallback write set_WarningCallback;
    property UpdateSmartArt: Boolean read get_UpdateSmartArt write set_UpdateSmartArt;
  end;

  TDNSpreadsheetML2003SaveOptions = class(TDNGenericImport<DNSpreadsheetML2003SaveOptionsClass, DNSpreadsheetML2003SaveOptions>) end;

  //-------------namespace: Aspose.Cells----------------
  DNTxtSaveOptionsClass = interface(DNSaveOptionsClass)
  ['{5702B2D1-C1D4-5600-AAF2-E1E43A1430DA}']
  { constructors } 

    {class} function init: DNTxtSaveOptions; overload;
    {class} function init(format: DNSaveFormat): DNTxtSaveOptions; overload;

  end;

  [DNTypeName('Aspose.Cells.TxtSaveOptions')]
  DNTxtSaveOptions = interface(DNSaveOptions)
  ['{C7DB8138-D70C-35A0-BB1C-6A1B8E505F86}']
  { getters & setters } 

    function get_Separator: Char;
    procedure set_Separator(value: Char);
    function get_SeparatorString: string;
    procedure set_SeparatorString(value: string);
    function get_Encoding: DDN.mscorlib.DNEncoding;
    procedure set_Encoding(value: DDN.mscorlib.DNEncoding);
    function get_AlwaysQuoted: Boolean;
    procedure set_AlwaysQuoted(value: Boolean);
    function get_QuoteType: DNTxtValueQuoteType;
    procedure set_QuoteType(value: DNTxtValueQuoteType);
    function get_FormatStrategy: DNCellValueFormatStrategy;
    procedure set_FormatStrategy(value: DNCellValueFormatStrategy);
    function get_LightCellsDataProvider: DNLightCellsDataProvider;
    procedure set_LightCellsDataProvider(value: DNLightCellsDataProvider);
    function get_TrimLeadingBlankRowAndColumn: Boolean;
    procedure set_TrimLeadingBlankRowAndColumn(value: Boolean);
    function get_KeepSeparatorsForBlankRow: Boolean;
    procedure set_KeepSeparatorsForBlankRow(value: Boolean);
    function get_ExportArea: DNCellArea;
    procedure set_ExportArea(value: DNCellArea);
    function get_ExportQuotePrefix: Boolean;
    procedure set_ExportQuotePrefix(value: Boolean);
    function get_ExportAllSheets: Boolean;
    procedure set_ExportAllSheets(value: Boolean);
    function get_SaveFormat: DNSaveFormat;
    function get_ClearData: Boolean;
    procedure set_ClearData(value: Boolean);
    function get_CachedFileFolder: string;
    procedure set_CachedFileFolder(value: string);
    function get_ValidateMergedAreas: Boolean;
    procedure set_ValidateMergedAreas(value: Boolean);
    function get_MergeAreas: Boolean;
    procedure set_MergeAreas(value: Boolean);
    function get_CreateDirectory: Boolean;
    procedure set_CreateDirectory(value: Boolean);
    function get_SortNames: Boolean;
    procedure set_SortNames(value: Boolean);
    function get_SortExternalNames: Boolean;
    procedure set_SortExternalNames(value: Boolean);
    function get_RefreshChartCache: Boolean;
    procedure set_RefreshChartCache(value: Boolean);
    function get_PdfExportImagesFolder: string;
    procedure set_PdfExportImagesFolder(value: string);
    function get_EnableHTTPCompression: Boolean;
    procedure set_EnableHTTPCompression(value: Boolean);
    function get_WarningCallback: DNIWarningCallback;
    procedure set_WarningCallback(value: DNIWarningCallback);
    function get_UpdateSmartArt: Boolean;
    procedure set_UpdateSmartArt(value: Boolean);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Separator: Char read get_Separator write set_Separator;
    property SeparatorString: string read get_SeparatorString write set_SeparatorString;
    property Encoding: DDN.mscorlib.DNEncoding read get_Encoding write set_Encoding;
    property AlwaysQuoted: Boolean read get_AlwaysQuoted write set_AlwaysQuoted;
    property QuoteType: DNTxtValueQuoteType read get_QuoteType write set_QuoteType;
    property FormatStrategy: DNCellValueFormatStrategy read get_FormatStrategy write set_FormatStrategy;
    property LightCellsDataProvider: DNLightCellsDataProvider read get_LightCellsDataProvider write set_LightCellsDataProvider;
    property TrimLeadingBlankRowAndColumn: Boolean read get_TrimLeadingBlankRowAndColumn write set_TrimLeadingBlankRowAndColumn;
    property KeepSeparatorsForBlankRow: Boolean read get_KeepSeparatorsForBlankRow write set_KeepSeparatorsForBlankRow;
    property ExportArea: DNCellArea read get_ExportArea write set_ExportArea;
    property ExportQuotePrefix: Boolean read get_ExportQuotePrefix write set_ExportQuotePrefix;
    property ExportAllSheets: Boolean read get_ExportAllSheets write set_ExportAllSheets;
    property SaveFormat: DNSaveFormat read get_SaveFormat;
    property ClearData: Boolean read get_ClearData write set_ClearData;
    property CachedFileFolder: string read get_CachedFileFolder write set_CachedFileFolder;
    property ValidateMergedAreas: Boolean read get_ValidateMergedAreas write set_ValidateMergedAreas;
    property MergeAreas: Boolean read get_MergeAreas write set_MergeAreas;
    property CreateDirectory: Boolean read get_CreateDirectory write set_CreateDirectory;
    property SortNames: Boolean read get_SortNames write set_SortNames;
    property SortExternalNames: Boolean read get_SortExternalNames write set_SortExternalNames;
    property RefreshChartCache: Boolean read get_RefreshChartCache write set_RefreshChartCache;
    property PdfExportImagesFolder: string read get_PdfExportImagesFolder write set_PdfExportImagesFolder;
    property EnableHTTPCompression: Boolean read get_EnableHTTPCompression write set_EnableHTTPCompression;
    property WarningCallback: DNIWarningCallback read get_WarningCallback write set_WarningCallback;
    property UpdateSmartArt: Boolean read get_UpdateSmartArt write set_UpdateSmartArt;
  end;

  TDNTxtSaveOptions = class(TDNGenericImport<DNTxtSaveOptionsClass, DNTxtSaveOptions>) end;

  //-------------namespace: Aspose.Cells----------------
  DNXlsbSaveOptionsClass = interface(DNSaveOptionsClass)
  ['{965ADB1F-8EB6-59A5-B769-9A807E9FD4DE}']
  { constructors } 

    {class} function init: DNXlsbSaveOptions; overload;
    {class} function init(saveFormat: DNSaveFormat): DNXlsbSaveOptions; overload;

  end;

  [DNTypeName('Aspose.Cells.XlsbSaveOptions')]
  DNXlsbSaveOptions = interface(DNSaveOptions)
  ['{B37B7E7F-AB42-314D-8674-9FDE96C55539}']
  { getters & setters } 

    function get_CompressionType: DNOoxmlCompressionType;
    procedure set_CompressionType(value: DNOoxmlCompressionType);
    function get_ExportAllColumnIndexes: Boolean;
    procedure set_ExportAllColumnIndexes(value: Boolean);
    function get_SaveFormat: DNSaveFormat;
    function get_ClearData: Boolean;
    procedure set_ClearData(value: Boolean);
    function get_CachedFileFolder: string;
    procedure set_CachedFileFolder(value: string);
    function get_ValidateMergedAreas: Boolean;
    procedure set_ValidateMergedAreas(value: Boolean);
    function get_MergeAreas: Boolean;
    procedure set_MergeAreas(value: Boolean);
    function get_CreateDirectory: Boolean;
    procedure set_CreateDirectory(value: Boolean);
    function get_SortNames: Boolean;
    procedure set_SortNames(value: Boolean);
    function get_SortExternalNames: Boolean;
    procedure set_SortExternalNames(value: Boolean);
    function get_RefreshChartCache: Boolean;
    procedure set_RefreshChartCache(value: Boolean);
    function get_PdfExportImagesFolder: string;
    procedure set_PdfExportImagesFolder(value: string);
    function get_EnableHTTPCompression: Boolean;
    procedure set_EnableHTTPCompression(value: Boolean);
    function get_WarningCallback: DNIWarningCallback;
    procedure set_WarningCallback(value: DNIWarningCallback);
    function get_UpdateSmartArt: Boolean;
    procedure set_UpdateSmartArt(value: Boolean);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property CompressionType: DNOoxmlCompressionType read get_CompressionType write set_CompressionType;
    property ExportAllColumnIndexes: Boolean read get_ExportAllColumnIndexes write set_ExportAllColumnIndexes;
    property SaveFormat: DNSaveFormat read get_SaveFormat;
    property ClearData: Boolean read get_ClearData write set_ClearData;
    property CachedFileFolder: string read get_CachedFileFolder write set_CachedFileFolder;
    property ValidateMergedAreas: Boolean read get_ValidateMergedAreas write set_ValidateMergedAreas;
    property MergeAreas: Boolean read get_MergeAreas write set_MergeAreas;
    property CreateDirectory: Boolean read get_CreateDirectory write set_CreateDirectory;
    property SortNames: Boolean read get_SortNames write set_SortNames;
    property SortExternalNames: Boolean read get_SortExternalNames write set_SortExternalNames;
    property RefreshChartCache: Boolean read get_RefreshChartCache write set_RefreshChartCache;
    property PdfExportImagesFolder: string read get_PdfExportImagesFolder write set_PdfExportImagesFolder;
    property EnableHTTPCompression: Boolean read get_EnableHTTPCompression write set_EnableHTTPCompression;
    property WarningCallback: DNIWarningCallback read get_WarningCallback write set_WarningCallback;
    property UpdateSmartArt: Boolean read get_UpdateSmartArt write set_UpdateSmartArt;
  end;

  TDNXlsbSaveOptions = class(TDNGenericImport<DNXlsbSaveOptionsClass, DNXlsbSaveOptions>) end;

  //-------------namespace: Aspose.Cells----------------
  DNXlsSaveOptionsClass = interface(DNSaveOptionsClass)
  ['{E330A5FE-94F6-5A8E-B4BB-01DD3FE39262}']
  { constructors } 

    {class} function init: DNXlsSaveOptions; overload;
    {class} function init(format: DNSaveFormat): DNXlsSaveOptions; overload;

  end;

  [DNTypeName('Aspose.Cells.XlsSaveOptions')]
  DNXlsSaveOptions = interface(DNSaveOptions)
  ['{AA58F0DE-D33B-3D6B-97E2-AD29778DCDB4}']
  { getters & setters } 

    function get_LightCellsDataProvider: DNLightCellsDataProvider;
    procedure set_LightCellsDataProvider(value: DNLightCellsDataProvider);
    function get_IsTemplate: Boolean;
    procedure set_IsTemplate(value: Boolean);
    function get_MatchColor: Boolean;
    procedure set_MatchColor(value: Boolean);
    function get_SaveFormat: DNSaveFormat;
    function get_ClearData: Boolean;
    procedure set_ClearData(value: Boolean);
    function get_CachedFileFolder: string;
    procedure set_CachedFileFolder(value: string);
    function get_ValidateMergedAreas: Boolean;
    procedure set_ValidateMergedAreas(value: Boolean);
    function get_MergeAreas: Boolean;
    procedure set_MergeAreas(value: Boolean);
    function get_CreateDirectory: Boolean;
    procedure set_CreateDirectory(value: Boolean);
    function get_SortNames: Boolean;
    procedure set_SortNames(value: Boolean);
    function get_SortExternalNames: Boolean;
    procedure set_SortExternalNames(value: Boolean);
    function get_RefreshChartCache: Boolean;
    procedure set_RefreshChartCache(value: Boolean);
    function get_PdfExportImagesFolder: string;
    procedure set_PdfExportImagesFolder(value: string);
    function get_EnableHTTPCompression: Boolean;
    procedure set_EnableHTTPCompression(value: Boolean);
    function get_WarningCallback: DNIWarningCallback;
    procedure set_WarningCallback(value: DNIWarningCallback);
    function get_UpdateSmartArt: Boolean;
    procedure set_UpdateSmartArt(value: Boolean);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property LightCellsDataProvider: DNLightCellsDataProvider read get_LightCellsDataProvider write set_LightCellsDataProvider;
    property IsTemplate: Boolean read get_IsTemplate write set_IsTemplate;
    property MatchColor: Boolean read get_MatchColor write set_MatchColor;
    property SaveFormat: DNSaveFormat read get_SaveFormat;
    property ClearData: Boolean read get_ClearData write set_ClearData;
    property CachedFileFolder: string read get_CachedFileFolder write set_CachedFileFolder;
    property ValidateMergedAreas: Boolean read get_ValidateMergedAreas write set_ValidateMergedAreas;
    property MergeAreas: Boolean read get_MergeAreas write set_MergeAreas;
    property CreateDirectory: Boolean read get_CreateDirectory write set_CreateDirectory;
    property SortNames: Boolean read get_SortNames write set_SortNames;
    property SortExternalNames: Boolean read get_SortExternalNames write set_SortExternalNames;
    property RefreshChartCache: Boolean read get_RefreshChartCache write set_RefreshChartCache;
    property PdfExportImagesFolder: string read get_PdfExportImagesFolder write set_PdfExportImagesFolder;
    property EnableHTTPCompression: Boolean read get_EnableHTTPCompression write set_EnableHTTPCompression;
    property WarningCallback: DNIWarningCallback read get_WarningCallback write set_WarningCallback;
    property UpdateSmartArt: Boolean read get_UpdateSmartArt write set_UpdateSmartArt;
  end;

  TDNXlsSaveOptions = class(TDNGenericImport<DNXlsSaveOptionsClass, DNXlsSaveOptions>) end;

  //-------------namespace: Aspose.Cells----------------
  DNXpsSaveOptionsClass = interface(DNSaveOptionsClass)
  ['{82D1AA39-4A6C-5DF3-B986-D67D9C3B3A02}']
  { constructors } 

    {class} function init: DNXpsSaveOptions; overload;
    {class} function init(saveFormat: DNSaveFormat): DNXpsSaveOptions; overload;

  end;

  [DNTypeName('Aspose.Cells.XpsSaveOptions')]
  DNXpsSaveOptions = interface(DNSaveOptions)
  ['{255E5AFE-1BEF-33C3-A4E0-3F62D8D17F6E}']
  { getters & setters } 

    function get_OnePagePerSheet: Boolean;
    procedure set_OnePagePerSheet(value: Boolean);
    function get_PageIndex: Int32;
    procedure set_PageIndex(value: Int32);
    function get_PageCount: Int32;
    procedure set_PageCount(value: Int32);
    function get_SaveFormat: DNSaveFormat;
    function get_ClearData: Boolean;
    procedure set_ClearData(value: Boolean);
    function get_CachedFileFolder: string;
    procedure set_CachedFileFolder(value: string);
    function get_ValidateMergedAreas: Boolean;
    procedure set_ValidateMergedAreas(value: Boolean);
    function get_MergeAreas: Boolean;
    procedure set_MergeAreas(value: Boolean);
    function get_CreateDirectory: Boolean;
    procedure set_CreateDirectory(value: Boolean);
    function get_SortNames: Boolean;
    procedure set_SortNames(value: Boolean);
    function get_SortExternalNames: Boolean;
    procedure set_SortExternalNames(value: Boolean);
    function get_RefreshChartCache: Boolean;
    procedure set_RefreshChartCache(value: Boolean);
    function get_PdfExportImagesFolder: string;
    procedure set_PdfExportImagesFolder(value: string);
    function get_EnableHTTPCompression: Boolean;
    procedure set_EnableHTTPCompression(value: Boolean);
    function get_WarningCallback: DNIWarningCallback;
    procedure set_WarningCallback(value: DNIWarningCallback);
    function get_UpdateSmartArt: Boolean;
    procedure set_UpdateSmartArt(value: Boolean);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property OnePagePerSheet: Boolean read get_OnePagePerSheet write set_OnePagePerSheet;
    property PageIndex: Int32 read get_PageIndex write set_PageIndex;
    property PageCount: Int32 read get_PageCount write set_PageCount;
    property SaveFormat: DNSaveFormat read get_SaveFormat;
    property ClearData: Boolean read get_ClearData write set_ClearData;
    property CachedFileFolder: string read get_CachedFileFolder write set_CachedFileFolder;
    property ValidateMergedAreas: Boolean read get_ValidateMergedAreas write set_ValidateMergedAreas;
    property MergeAreas: Boolean read get_MergeAreas write set_MergeAreas;
    property CreateDirectory: Boolean read get_CreateDirectory write set_CreateDirectory;
    property SortNames: Boolean read get_SortNames write set_SortNames;
    property SortExternalNames: Boolean read get_SortExternalNames write set_SortExternalNames;
    property RefreshChartCache: Boolean read get_RefreshChartCache write set_RefreshChartCache;
    property PdfExportImagesFolder: string read get_PdfExportImagesFolder write set_PdfExportImagesFolder;
    property EnableHTTPCompression: Boolean read get_EnableHTTPCompression write set_EnableHTTPCompression;
    property WarningCallback: DNIWarningCallback read get_WarningCallback write set_WarningCallback;
    property UpdateSmartArt: Boolean read get_UpdateSmartArt write set_UpdateSmartArt;
  end;

  TDNXpsSaveOptions = class(TDNGenericImport<DNXpsSaveOptionsClass, DNXpsSaveOptions>) end;

  //-------------namespace: Aspose.Cells----------------
  DNScenarioClass = interface(DDN.mscorlib.DNObjectClass)
  ['{B9D2D043-C6F1-5F32-ACB7-E0892BC24E50}']
  end;

  [DNTypeName('Aspose.Cells.Scenario')]
  DNScenario = interface(DDN.mscorlib.DNObject)
  ['{8642E0B9-2CA0-37D1-8A86-022283F63AE8}']
  { getters & setters } 

    function get_Comment: string;
    procedure set_Comment(value: string);
    function get_Name: string;
    procedure set_Name(value: string);
    function get_User: string;
    function get_IsHidden: Boolean;
    procedure set_IsHidden(value: Boolean);
    function get_IsLocked: Boolean;
    procedure set_IsLocked(value: Boolean);
    function get_InputCells: DNScenarioInputCellCollection;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Comment: string read get_Comment write set_Comment;
    property Name: string read get_Name write set_Name;
    property User: string read get_User;
    property IsHidden: Boolean read get_IsHidden write set_IsHidden;
    property IsLocked: Boolean read get_IsLocked write set_IsLocked;
    property InputCells: DNScenarioInputCellCollection read get_InputCells;
  end;

  TDNScenario = class(TDNGenericImport<DNScenarioClass, DNScenario>) end;

  //-------------namespace: Aspose.Cells----------------
  DNScenarioInputCellClass = interface(DDN.mscorlib.DNObjectClass)
  ['{37617C6B-13EB-5209-89DF-60C47CA7BA70}']
  end;

  [DNTypeName('Aspose.Cells.ScenarioInputCell')]
  DNScenarioInputCell = interface(DDN.mscorlib.DNObject)
  ['{AB992B5B-B3BD-35B7-9A2D-D194C7530D8A}']
  { getters & setters } 

    function get_Row: Int32;
    function get_Column: Int32;
    function get_Name: string;
    function get_Value: string;
    procedure set_Value(value: string);
    function get_IsDeleted: Boolean;
    procedure set_IsDeleted(value: Boolean);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Row: Int32 read get_Row;
    property Column: Int32 read get_Column;
    property Name: string read get_Name;
    property Value: string read get_Value write set_Value;
    property IsDeleted: Boolean read get_IsDeleted write set_IsDeleted;
  end;

  TDNScenarioInputCell = class(TDNGenericImport<DNScenarioInputCellClass, DNScenarioInputCell>) end;

  //-------------namespace: Aspose.Cells.Slicers----------------
  DNSlicerClass = interface(DDN.mscorlib.DNObjectClass)
  ['{5B1803B3-4D1D-5AB0-A357-10AA87F19A18}']
  end;

  [DNTypeName('Aspose.Cells.Slicers.Slicer')]
  DNSlicer = interface(DDN.mscorlib.DNObject)
  ['{8A9D6C69-7736-315B-9C72-A20101D56D3D}']
  { getters & setters } 

    function get_Title: string;
    procedure set_Title(value: string);
    function get_AlternativeText: string;
    procedure set_AlternativeText(value: string);
    function get_IsPrintable: Boolean;
    procedure set_IsPrintable(value: Boolean);
    function get_IsLocked: Boolean;
    procedure set_IsLocked(value: Boolean);
    function get_Placement: DNPlacementType;
    procedure set_Placement(value: DNPlacementType);
    function get_LockedAspectRatio: Boolean;
    procedure set_LockedAspectRatio(value: Boolean);
    function get_LockedPosition: Boolean;
    procedure set_LockedPosition(value: Boolean);
    function get_SlicerCache: DNSlicerCache;
    function get_Parent: DNWorksheet;
    function get_StyleType: DNSlicerStyleType;
    procedure set_StyleType(value: DNSlicerStyleType);
    function get_Name: string;
    procedure set_Name(value: string);
    function get_Caption: string;
    procedure set_Caption(value: string);
    function get_CaptionVisible: Boolean;
    procedure set_CaptionVisible(value: Boolean);
    function get_NumberOfColumns: Int32;
    procedure set_NumberOfColumns(value: Int32);
    function get_LeftPixel: Int32;
    procedure set_LeftPixel(value: Int32);
    function get_TopPixel: Int32;
    procedure set_TopPixel(value: Int32);
    function get_Width: Double;
    procedure set_Width(value: Double);
    function get_WidthPixel: Int32;
    procedure set_WidthPixel(value: Int32);
    function get_Height: Double;
    procedure set_Height(value: Double);
    function get_HeightPixel: Int32;
    procedure set_HeightPixel(value: Int32);
    function get_ColumnWidthPixel: Int32;
    procedure set_ColumnWidthPixel(value: Int32);
    function get_ColumnWidth: Double;
    procedure set_ColumnWidth(value: Double);
    function get_RowHeightPixel: Int32;
    procedure set_RowHeightPixel(value: Int32);
    function get_RowHeight: Double;
    procedure set_RowHeight(value: Double);

  { methods } 

    procedure AddPivotConnection(pivot: DNPivotTable);
    procedure RemovePivotConnection(pivot: DNPivotTable);
    procedure Refresh;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Title: string read get_Title write set_Title;
    property AlternativeText: string read get_AlternativeText write set_AlternativeText;
    property IsPrintable: Boolean read get_IsPrintable write set_IsPrintable;
    property IsLocked: Boolean read get_IsLocked write set_IsLocked;
    property Placement: DNPlacementType read get_Placement write set_Placement;
    property LockedAspectRatio: Boolean read get_LockedAspectRatio write set_LockedAspectRatio;
    property LockedPosition: Boolean read get_LockedPosition write set_LockedPosition;
    property SlicerCache: DNSlicerCache read get_SlicerCache;
    property Parent: DNWorksheet read get_Parent;
    property StyleType: DNSlicerStyleType read get_StyleType write set_StyleType;
    property Name: string read get_Name write set_Name;
    property Caption: string read get_Caption write set_Caption;
    property CaptionVisible: Boolean read get_CaptionVisible write set_CaptionVisible;
    property NumberOfColumns: Int32 read get_NumberOfColumns write set_NumberOfColumns;
    property LeftPixel: Int32 read get_LeftPixel write set_LeftPixel;
    property TopPixel: Int32 read get_TopPixel write set_TopPixel;
    property Width: Double read get_Width write set_Width;
    property WidthPixel: Int32 read get_WidthPixel write set_WidthPixel;
    property Height: Double read get_Height write set_Height;
    property HeightPixel: Int32 read get_HeightPixel write set_HeightPixel;
    property ColumnWidthPixel: Int32 read get_ColumnWidthPixel write set_ColumnWidthPixel;
    property ColumnWidth: Double read get_ColumnWidth write set_ColumnWidth;
    property RowHeightPixel: Int32 read get_RowHeightPixel write set_RowHeightPixel;
    property RowHeight: Double read get_RowHeight write set_RowHeight;
  end;

  TDNSlicer = class(TDNGenericImport<DNSlicerClass, DNSlicer>) end;

  //-------------namespace: Aspose.Cells.Slicers----------------
  DNSlicerCacheClass = interface(DDN.mscorlib.DNObjectClass)
  ['{FF16BBC9-963E-5FED-A995-F071D0CAC9A1}']
  end;

  [DNTypeName('Aspose.Cells.Slicers.SlicerCache')]
  DNSlicerCache = interface(DDN.mscorlib.DNObject)
  ['{93812C36-59DF-3362-B05F-7C200140FEE8}']
  { getters & setters } 

    function get_CrossFilterType: DNSlicerCacheCrossFilterType;
    procedure set_CrossFilterType(value: DNSlicerCacheCrossFilterType);
    function get_List: Boolean;
    function get_SlicerCacheItems: DNSlicerCacheItemCollection;
    function get_Name: string;
    function get_SourceName: string;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property CrossFilterType: DNSlicerCacheCrossFilterType read get_CrossFilterType write set_CrossFilterType;
    property List: Boolean read get_List;
    property SlicerCacheItems: DNSlicerCacheItemCollection read get_SlicerCacheItems;
    property Name: string read get_Name;
    property SourceName: string read get_SourceName;
  end;

  TDNSlicerCache = class(TDNGenericImport<DNSlicerCacheClass, DNSlicerCache>) end;

  //-------------namespace: Aspose.Cells.Slicers----------------
  DNSlicerCacheItemClass = interface(DDN.mscorlib.DNObjectClass)
  ['{D55EDBDF-E852-5AF3-A894-FD34684CD605}']
  end;

  [DNTypeName('Aspose.Cells.Slicers.SlicerCacheItem')]
  DNSlicerCacheItem = interface(DDN.mscorlib.DNObject)
  ['{A87DCCC5-6D15-3F78-AA0E-3225E8E8EA89}']
  { getters & setters } 

    function get_Selected: Boolean;
    procedure set_Selected(value: Boolean);
    function get_Value: string;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Selected: Boolean read get_Selected write set_Selected;
    property Value: string read get_Value;
  end;

  TDNSlicerCacheItem = class(TDNGenericImport<DNSlicerCacheItemClass, DNSlicerCacheItem>) end;

  //-------------namespace: Aspose.Cells----------------
  DNStreamProviderOptionsClass = interface(DDN.mscorlib.DNObjectClass)
  ['{93BD369C-1692-5251-AAF4-32318E5AE837}']
  { static getter & setter } 

    procedure set_CustomPath(value: string);

  { constructors } 

    {class} function init(loadingType: DNResourceLoadingType; defaultPath: string): DNStreamProviderOptions; overload;
    {class} function init: DNStreamProviderOptions; overload;

  { static propertys } 

    {class} property CustomPath: string write set_CustomPath;
  end;

  [DNTypeName('Aspose.Cells.StreamProviderOptions')]
  DNStreamProviderOptions = interface(DDN.mscorlib.DNObject)
  ['{D2F7D9D0-6870-3071-ABEC-DAAA4E230DAF}']
  { getters & setters } 

    function get_ResourceLoadingType: DNResourceLoadingType;
    procedure set_ResourceLoadingType(value: DNResourceLoadingType);
    function get_DefaultPath: string;
    procedure set_CustomPath(value: string);
    function get_Stream: DDN.mscorlib.DNStream;
    procedure set_Stream(value: DDN.mscorlib.DNStream);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property ResourceLoadingType: DNResourceLoadingType read get_ResourceLoadingType write set_ResourceLoadingType;
    property DefaultPath: string read get_DefaultPath;
    property CustomPath: string write set_CustomPath;
    property Stream: DDN.mscorlib.DNStream read get_Stream write set_Stream;
  end;

  TDNStreamProviderOptions = class(TDNGenericImport<DNStreamProviderOptionsClass, DNStreamProviderOptions>) end;

  //-------------namespace: Aspose.Cells----------------
  DNStyleClass = interface(DDN.mscorlib.DNObjectClass)
  ['{EB695111-785C-5BFE-B19A-5B6BBB1605B5}']
  { constructors } 

    {class} function init: DNStyle;

  end;

  [DNTypeName('Aspose.Cells.Style')]
  DNStyle = interface(DDN.mscorlib.DNObject)
  ['{100DEAF6-C808-336F-935A-0140E7F139B4}']
  { getters & setters } 

    function get_BackgroundThemeColor: DNThemeColor;
    procedure set_BackgroundThemeColor(value: DNThemeColor);
    function get_ForegroundThemeColor: DNThemeColor;
    procedure set_ForegroundThemeColor(value: DNThemeColor);
    function get_Name: string;
    procedure set_Name(value: string);
    function get_Pattern: DNBackgroundType;
    procedure set_Pattern(value: DNBackgroundType);
    function get_Borders: DNBorderCollection;
    function get_BackgroundColor: DDN.System.Drawing.DNColor;
    procedure set_BackgroundColor(value: DDN.System.Drawing.DNColor);
    function get_BackgroundArgbColor: Int32;
    procedure set_BackgroundArgbColor(value: Int32);
    function get_ForegroundColor: DDN.System.Drawing.DNColor;
    procedure set_ForegroundColor(value: DDN.System.Drawing.DNColor);
    function get_ForegroundArgbColor: Int32;
    procedure set_ForegroundArgbColor(value: Int32);
    function get_ParentStyle: DNStyle;
    function get_IndentLevel: Int32;
    procedure set_IndentLevel(value: Int32);
    function get_Font: DNFont;
    function get_RotationAngle: Int32;
    procedure set_RotationAngle(value: Int32);
    function get_VerticalAlignment: DNTextAlignmentType;
    procedure set_VerticalAlignment(value: DNTextAlignmentType);
    function get_HorizontalAlignment: DNTextAlignmentType;
    procedure set_HorizontalAlignment(value: DNTextAlignmentType);
    function get_IsTextWrapped: Boolean;
    procedure set_IsTextWrapped(value: Boolean);
    function get_Number: Int32;
    procedure set_Number(value: Int32);
    function get_IsLocked: Boolean;
    procedure set_IsLocked(value: Boolean);
    function get_Custom: string;
    procedure set_Custom(value: string);
    function get_CultureCustom: string;
    procedure set_CultureCustom(value: string);
    function get_InvariantCustom: string;
    function get_IsFormulaHidden: Boolean;
    procedure set_IsFormulaHidden(value: Boolean);
    function get_ShrinkToFit: Boolean;
    procedure set_ShrinkToFit(value: Boolean);
    function get_TextDirection: DNTextDirectionType;
    procedure set_TextDirection(value: DNTextDirectionType);
    function get_IsJustifyDistributed: Boolean;
    procedure set_IsJustifyDistributed(value: Boolean);
    function get_QuotePrefix: Boolean;
    procedure set_QuotePrefix(value: Boolean);
    function get_IsGradient: Boolean;
    procedure set_IsGradient(value: Boolean);
    function get_IsPercent: Boolean;
    function get_IsDateTime: Boolean;

  { methods } 

    procedure SetTwoColorGradient(color1: DDN.System.Drawing.DNColor; color2: DDN.System.Drawing.DNColor; gradientStyleType: DNGradientStyleType; variant: Int32);
    procedure GetTwoColorGradient(out color1: DDN.System.Drawing.DNColor; out color2: DDN.System.Drawing.DNColor; out gradientStyleType: DNGradientStyleType; out variant: Int32);
    procedure SetPatternColor(pattern: DNBackgroundType; color1: DDN.System.Drawing.DNColor; color2: DDN.System.Drawing.DNColor);
    procedure Copy(style: DNStyle);
    procedure Update;
    function IsModified(modifyFlag: DNStyleModifyFlag): Boolean;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function SetBorder(borderEdge: DNBorderType; borderStyle: DNCellBorderType; borderColor: DDN.System.Drawing.DNColor): Boolean;
    procedure SetCustom(custom: string; builtinPreference: Boolean);
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property BackgroundThemeColor: DNThemeColor read get_BackgroundThemeColor write set_BackgroundThemeColor;
    property ForegroundThemeColor: DNThemeColor read get_ForegroundThemeColor write set_ForegroundThemeColor;
    property Name: string read get_Name write set_Name;
    property Pattern: DNBackgroundType read get_Pattern write set_Pattern;
    property Borders: DNBorderCollection read get_Borders;
    property BackgroundColor: DDN.System.Drawing.DNColor read get_BackgroundColor write set_BackgroundColor;
    property BackgroundArgbColor: Int32 read get_BackgroundArgbColor write set_BackgroundArgbColor;
    property ForegroundColor: DDN.System.Drawing.DNColor read get_ForegroundColor write set_ForegroundColor;
    property ForegroundArgbColor: Int32 read get_ForegroundArgbColor write set_ForegroundArgbColor;
    property ParentStyle: DNStyle read get_ParentStyle;
    property IndentLevel: Int32 read get_IndentLevel write set_IndentLevel;
    property Font: DNFont read get_Font;
    property RotationAngle: Int32 read get_RotationAngle write set_RotationAngle;
    property VerticalAlignment: DNTextAlignmentType read get_VerticalAlignment write set_VerticalAlignment;
    property HorizontalAlignment: DNTextAlignmentType read get_HorizontalAlignment write set_HorizontalAlignment;
    property IsTextWrapped: Boolean read get_IsTextWrapped write set_IsTextWrapped;
    property Number: Int32 read get_Number write set_Number;
    property IsLocked: Boolean read get_IsLocked write set_IsLocked;
    property Custom: string read get_Custom write set_Custom;
    property CultureCustom: string read get_CultureCustom write set_CultureCustom;
    property InvariantCustom: string read get_InvariantCustom;
    property IsFormulaHidden: Boolean read get_IsFormulaHidden write set_IsFormulaHidden;
    property ShrinkToFit: Boolean read get_ShrinkToFit write set_ShrinkToFit;
    property TextDirection: DNTextDirectionType read get_TextDirection write set_TextDirection;
    property IsJustifyDistributed: Boolean read get_IsJustifyDistributed write set_IsJustifyDistributed;
    property QuotePrefix: Boolean read get_QuotePrefix write set_QuotePrefix;
    property IsGradient: Boolean read get_IsGradient write set_IsGradient;
    property IsPercent: Boolean read get_IsPercent;
    property IsDateTime: Boolean read get_IsDateTime;
  end;

  TDNStyle = class(TDNGenericImport<DNStyleClass, DNStyle>) end;

  //-------------namespace: Aspose.Cells----------------
  DNStyleCollectionClass = interface(DDN.mscorlib.DNObjectClass)
  ['{6DCF467E-D4DC-514F-AB55-E98198F0472D}']
  end;

  [DNTypeName('Aspose.Cells.StyleCollection')]
  DNStyleCollection = interface(DDN.mscorlib.DNObject)
  ['{8B381EAC-A94B-35BD-8E1F-623BD832C091}']
  { getters & setters } 

    function get_Item(index: Int32): DNStyle; overload;
    function get_Item(name: string): DNStyle; overload;
    function get_Count: Int32;

  { methods } 

    function GetThemeStyle(themeColorType: DNThemeColorType; tint: Double): DNStyle;
    function CreateBuiltinStyle(&type: DNBuiltinStyleType): DNStyle;
    function Add: Int32;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Item[index: Int32]: DNStyle read get_Item; default;
    property Item[name: string]: DNStyle read get_Item; default;
    property Count: Int32 read get_Count;
  end;

  TDNStyleCollection = class(TDNGenericImport<DNStyleCollectionClass, DNStyleCollection>) end;

  //-------------namespace: Aspose.Cells----------------
  DNStyleFlagClass = interface(DDN.mscorlib.DNObjectClass)
  ['{4CA074AD-DCDB-50BC-8684-E25ABDC34C6F}']
  { constructors } 

    {class} function init: DNStyleFlag;

  end;

  [DNTypeName('Aspose.Cells.StyleFlag')]
  DNStyleFlag = interface(DDN.mscorlib.DNObject)
  ['{D1A81130-3817-3D8D-A287-38BA0A005B01}']
  { getters & setters } 

    function get_All: Boolean;
    procedure set_All(value: Boolean);
    function get_Borders: Boolean;
    procedure set_Borders(value: Boolean);
    function get_LeftBorder: Boolean;
    procedure set_LeftBorder(value: Boolean);
    function get_RightBorder: Boolean;
    procedure set_RightBorder(value: Boolean);
    function get_TopBorder: Boolean;
    procedure set_TopBorder(value: Boolean);
    function get_BottomBorder: Boolean;
    procedure set_BottomBorder(value: Boolean);
    function get_DiagonalDownBorder: Boolean;
    procedure set_DiagonalDownBorder(value: Boolean);
    function get_DiagonalUpBorder: Boolean;
    procedure set_DiagonalUpBorder(value: Boolean);
    function get_Font: Boolean;
    procedure set_Font(value: Boolean);
    function get_FontSize: Boolean;
    procedure set_FontSize(value: Boolean);
    function get_FontName: Boolean;
    procedure set_FontName(value: Boolean);
    function get_FontColor: Boolean;
    procedure set_FontColor(value: Boolean);
    function get_FontBold: Boolean;
    procedure set_FontBold(value: Boolean);
    function get_FontItalic: Boolean;
    procedure set_FontItalic(value: Boolean);
    function get_FontUnderline: Boolean;
    procedure set_FontUnderline(value: Boolean);
    function get_FontStrike: Boolean;
    procedure set_FontStrike(value: Boolean);
    function get_FontScript: Boolean;
    procedure set_FontScript(value: Boolean);
    function get_NumberFormat: Boolean;
    procedure set_NumberFormat(value: Boolean);
    function get_Alignments: Boolean;
    procedure set_Alignments(value: Boolean);
    function get_HorizontalAlignment: Boolean;
    procedure set_HorizontalAlignment(value: Boolean);
    function get_VerticalAlignment: Boolean;
    procedure set_VerticalAlignment(value: Boolean);
    function get_Indent: Boolean;
    procedure set_Indent(value: Boolean);
    function get_Rotation: Boolean;
    procedure set_Rotation(value: Boolean);
    function get_WrapText: Boolean;
    procedure set_WrapText(value: Boolean);
    function get_ShrinkToFit: Boolean;
    procedure set_ShrinkToFit(value: Boolean);
    function get_TextDirection: Boolean;
    procedure set_TextDirection(value: Boolean);
    function get_CellShading: Boolean;
    procedure set_CellShading(value: Boolean);
    function get_Locked: Boolean;
    procedure set_Locked(value: Boolean);
    function get_HideFormula: Boolean;
    procedure set_HideFormula(value: Boolean);
    function get_QuotePrefix: Boolean;
    procedure set_QuotePrefix(value: Boolean);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property All: Boolean read get_All write set_All;
    property Borders: Boolean read get_Borders write set_Borders;
    property LeftBorder: Boolean read get_LeftBorder write set_LeftBorder;
    property RightBorder: Boolean read get_RightBorder write set_RightBorder;
    property TopBorder: Boolean read get_TopBorder write set_TopBorder;
    property BottomBorder: Boolean read get_BottomBorder write set_BottomBorder;
    property DiagonalDownBorder: Boolean read get_DiagonalDownBorder write set_DiagonalDownBorder;
    property DiagonalUpBorder: Boolean read get_DiagonalUpBorder write set_DiagonalUpBorder;
    property Font: Boolean read get_Font write set_Font;
    property FontSize: Boolean read get_FontSize write set_FontSize;
    property FontName: Boolean read get_FontName write set_FontName;
    property FontColor: Boolean read get_FontColor write set_FontColor;
    property FontBold: Boolean read get_FontBold write set_FontBold;
    property FontItalic: Boolean read get_FontItalic write set_FontItalic;
    property FontUnderline: Boolean read get_FontUnderline write set_FontUnderline;
    property FontStrike: Boolean read get_FontStrike write set_FontStrike;
    property FontScript: Boolean read get_FontScript write set_FontScript;
    property NumberFormat: Boolean read get_NumberFormat write set_NumberFormat;
    property Alignments: Boolean read get_Alignments write set_Alignments;
    property HorizontalAlignment: Boolean read get_HorizontalAlignment write set_HorizontalAlignment;
    property VerticalAlignment: Boolean read get_VerticalAlignment write set_VerticalAlignment;
    property Indent: Boolean read get_Indent write set_Indent;
    property Rotation: Boolean read get_Rotation write set_Rotation;
    property WrapText: Boolean read get_WrapText write set_WrapText;
    property ShrinkToFit: Boolean read get_ShrinkToFit write set_ShrinkToFit;
    property TextDirection: Boolean read get_TextDirection write set_TextDirection;
    property CellShading: Boolean read get_CellShading write set_CellShading;
    property Locked: Boolean read get_Locked write set_Locked;
    property HideFormula: Boolean read get_HideFormula write set_HideFormula;
    property QuotePrefix: Boolean read get_QuotePrefix write set_QuotePrefix;
  end;

  TDNStyleFlag = class(TDNGenericImport<DNStyleFlagClass, DNStyleFlag>) end;

  //-------------namespace: Aspose.Cells----------------
  DNSubtotalSettingClass = interface(DDN.mscorlib.DNObjectClass)
  ['{0AD58B70-B69C-5364-A955-054746F00C21}']
  end;

  [DNTypeName('Aspose.Cells.SubtotalSetting')]
  DNSubtotalSetting = interface(DDN.mscorlib.DNObject)
  ['{C6AB529A-B7FB-3965-8211-207EB808CF81}']
  { getters & setters } 

    function get_GroupBy: Int32;
    function get_SubtotalFunction: DNConsolidationFunction;
    function get_TotalList: TArray<Int32>;
    function get_SummaryBelowData: Boolean;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property GroupBy: Int32 read get_GroupBy;
    property SubtotalFunction: DNConsolidationFunction read get_SubtotalFunction;
    property TotalList: TArray<Int32> read get_TotalList;
    property SummaryBelowData: Boolean read get_SummaryBelowData;
  end;

  TDNSubtotalSetting = class(TDNGenericImport<DNSubtotalSettingClass, DNSubtotalSetting>) end;

  //-------------namespace: Aspose.Cells.Tables----------------
  DNListColumnClass = interface(DDN.mscorlib.DNObjectClass)
  ['{68A1709A-D56A-5F4C-A769-91BE143CCEE2}']
  end;

  [DNTypeName('Aspose.Cells.Tables.ListColumn')]
  DNListColumn = interface(DDN.mscorlib.DNObject)
  ['{0F1AA4EA-1C43-331F-84DB-0FA832B4837D}']
  { getters & setters } 

    function get_Name: string;
    procedure set_Name(value: string);
    function get_TotalsCalculation: DNTotalsCalculation;
    procedure set_TotalsCalculation(value: DNTotalsCalculation);
    function get_Range: DNRange;
    function get_Formula: string;
    procedure set_Formula(value: string);

  { methods } 

    function GetCustomCalculatedFormula(isR1C1: Boolean; isLocal: Boolean): string;
    procedure SetCustomCalculatedFormula(formula: string; isR1C1: Boolean; isLocal: Boolean);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Name: string read get_Name write set_Name;
    property TotalsCalculation: DNTotalsCalculation read get_TotalsCalculation write set_TotalsCalculation;
    property Range: DNRange read get_Range;
    property Formula: string read get_Formula write set_Formula;
  end;

  TDNListColumn = class(TDNGenericImport<DNListColumnClass, DNListColumn>) end;

  //-------------namespace: Aspose.Cells.Tables----------------
  DNListObjectClass = interface(DDN.mscorlib.DNObjectClass)
  ['{6E04A4E9-A089-549E-9C72-BB95CF327B82}']
  end;

  [DNTypeName('Aspose.Cells.Tables.ListObject')]
  DNListObject = interface(DDN.mscorlib.DNObject)
  ['{DE0AFA8F-CCD5-3FEB-A927-1896F6444A02}']
  { getters & setters } 

    function get_StartRow: Int32;
    function get_StartColumn: Int32;
    function get_EndRow: Int32;
    function get_EndColumn: Int32;
    function get_ListColumns: DNListColumnCollection;
    function get_ShowHeaderRow: Boolean;
    procedure set_ShowHeaderRow(value: Boolean);
    function get_ShowTotals: Boolean;
    procedure set_ShowTotals(value: Boolean);
    function get_DataRange: DNRange;
    function get_QueryTable: DNQueryTable;
    function get_DataSourceType: DNTableDataSourceType;
    function get_AutoFilter: DNAutoFilter;
    function get_DisplayName: string;
    procedure set_DisplayName(value: string);
    function get_Comment: string;
    procedure set_Comment(value: string);
    function get_ShowTableStyleFirstColumn: Boolean;
    procedure set_ShowTableStyleFirstColumn(value: Boolean);
    function get_ShowTableStyleLastColumn: Boolean;
    procedure set_ShowTableStyleLastColumn(value: Boolean);
    function get_ShowTableStyleRowStripes: Boolean;
    procedure set_ShowTableStyleRowStripes(value: Boolean);
    function get_ShowTableStyleColumnStripes: Boolean;
    procedure set_ShowTableStyleColumnStripes(value: Boolean);
    function get_TableStyleType: DNTableStyleType;
    procedure set_TableStyleType(value: DNTableStyleType);
    function get_TableStyleName: string;
    procedure set_TableStyleName(value: string);
    function get_XmlMap: DNXmlMap;
    function get_AlternativeText: string;
    procedure set_AlternativeText(value: string);
    function get_AlternativeDescription: string;
    procedure set_AlternativeDescription(value: string);

  { methods } 

    procedure Resize(startRow: Int32; startColumn: Int32; endRow: Int32; endColumn: Int32; hasHeaders: Boolean);
    procedure PutCellValue(rowOffset: Int32; columnOffset: Int32; value: DDN.mscorlib.DNObject);
    procedure UpdateColumnName;
    function Filter: DNAutoFilter;
    procedure ApplyStyleToRange;
    procedure ConvertToRange; overload;
    procedure ConvertToRange(options: DNTableToRangeOptions); overload;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property StartRow: Int32 read get_StartRow;
    property StartColumn: Int32 read get_StartColumn;
    property EndRow: Int32 read get_EndRow;
    property EndColumn: Int32 read get_EndColumn;
    property ListColumns: DNListColumnCollection read get_ListColumns;
    property ShowHeaderRow: Boolean read get_ShowHeaderRow write set_ShowHeaderRow;
    property ShowTotals: Boolean read get_ShowTotals write set_ShowTotals;
    property DataRange: DNRange read get_DataRange;
    property QueryTable: DNQueryTable read get_QueryTable;
    property DataSourceType: DNTableDataSourceType read get_DataSourceType;
    property AutoFilter: DNAutoFilter read get_AutoFilter;
    property DisplayName: string read get_DisplayName write set_DisplayName;
    property Comment: string read get_Comment write set_Comment;
    property ShowTableStyleFirstColumn: Boolean read get_ShowTableStyleFirstColumn write set_ShowTableStyleFirstColumn;
    property ShowTableStyleLastColumn: Boolean read get_ShowTableStyleLastColumn write set_ShowTableStyleLastColumn;
    property ShowTableStyleRowStripes: Boolean read get_ShowTableStyleRowStripes write set_ShowTableStyleRowStripes;
    property ShowTableStyleColumnStripes: Boolean read get_ShowTableStyleColumnStripes write set_ShowTableStyleColumnStripes;
    property TableStyleType: DNTableStyleType read get_TableStyleType write set_TableStyleType;
    property TableStyleName: string read get_TableStyleName write set_TableStyleName;
    property XmlMap: DNXmlMap read get_XmlMap;
    property AlternativeText: string read get_AlternativeText write set_AlternativeText;
    property AlternativeDescription: string read get_AlternativeDescription write set_AlternativeDescription;
  end;

  TDNListObject = class(TDNGenericImport<DNListObjectClass, DNListObject>) end;

  //-------------namespace: Aspose.Cells.Tables----------------
  DNTableStyleClass = interface(DDN.mscorlib.DNObjectClass)
  ['{2A265FA1-E868-52F6-B632-12FA9CCABD91}']
  end;

  [DNTypeName('Aspose.Cells.Tables.TableStyle')]
  DNTableStyle = interface(DDN.mscorlib.DNObject)
  ['{0B1312E8-94B8-39F8-B85E-ECF58B2DD789}']
  { getters & setters } 

    function get_Name: string;
    function get_TableStyleElements: DNTableStyleElementCollection;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Name: string read get_Name;
    property TableStyleElements: DNTableStyleElementCollection read get_TableStyleElements;
  end;

  TDNTableStyle = class(TDNGenericImport<DNTableStyleClass, DNTableStyle>) end;

  //-------------namespace: Aspose.Cells.Tables----------------
  DNTableStyleElementClass = interface(DDN.mscorlib.DNObjectClass)
  ['{7AA1BA3E-E473-5103-85F0-E699E6F24382}']
  end;

  [DNTypeName('Aspose.Cells.Tables.TableStyleElement')]
  DNTableStyleElement = interface(DDN.mscorlib.DNObject)
  ['{BC85030F-F48A-3D25-B9FB-CB5A90731DC6}']
  { getters & setters } 

    function get_Size: Int32;
    procedure set_Size(value: Int32);
    function get_Type: DNTableStyleElementType;

  { methods } 

    function GetElementStyle: DNStyle;
    procedure SetElementStyle(style: DNStyle);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Size: Int32 read get_Size write set_Size;
    property &Type: DNTableStyleElementType read get_Type;
  end;

  TDNTableStyleElement = class(TDNGenericImport<DNTableStyleElementClass, DNTableStyleElement>) end;

  //-------------namespace: Aspose.Cells.Tables----------------
  DNTableToRangeOptionsClass = interface(DDN.mscorlib.DNObjectClass)
  ['{6E363FEA-175D-5A1E-B23E-D93E930D0316}']
  { constructors } 

    {class} function init: DNTableToRangeOptions;

  end;

  [DNTypeName('Aspose.Cells.Tables.TableToRangeOptions')]
  DNTableToRangeOptions = interface(DDN.mscorlib.DNObject)
  ['{8D5C3CF3-6C22-36C5-9E87-31C7E70B0C35}']
  { getters & setters } 

    function get_LastRow: Int32;
    procedure set_LastRow(value: Int32);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property LastRow: Int32 read get_LastRow write set_LastRow;
  end;

  TDNTableToRangeOptions = class(TDNGenericImport<DNTableToRangeOptionsClass, DNTableToRangeOptions>) end;

  //-------------namespace: Aspose.Cells----------------
  DNThemeColorClass = interface(DDN.mscorlib.DNObjectClass)
  ['{3FAAB78D-CC41-563D-95DC-702352876E95}']
  { constructors } 

    {class} function init(&type: DNThemeColorType; tint: Double): DNThemeColor;

  end;

  [DNTypeName('Aspose.Cells.ThemeColor')]
  DNThemeColor = interface(DDN.mscorlib.DNObject)
  ['{B539E7C5-70B1-3615-9491-01A41416AE56}']
  { getters & setters } 

    function get_ColorType: DNThemeColorType;
    procedure set_ColorType(value: DNThemeColorType);
    function get_Tint: Double;
    procedure set_Tint(value: Double);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property ColorType: DNThemeColorType read get_ColorType write set_ColorType;
    property Tint: Double read get_Tint write set_Tint;
  end;

  TDNThemeColor = class(TDNGenericImport<DNThemeColorClass, DNThemeColor>) end;

  //-------------namespace: Aspose.Cells----------------
  DNThreadedCommentClass = interface(DDN.mscorlib.DNObjectClass)
  ['{6DA2D6B2-9C1B-5CBC-B7F3-5DA9C3E8B413}']
  end;

  [DNTypeName('Aspose.Cells.ThreadedComment')]
  DNThreadedComment = interface(DDN.mscorlib.DNObject)
  ['{CD1E3E85-91BB-3977-87D3-45259A1D917C}']
  { getters & setters } 

    function get_Row: Int32;
    function get_Column: Int32;
    function get_Notes: string;
    procedure set_Notes(value: string);
    function get_Author: DNThreadedCommentAuthor;
    function get_CreatedTime: DDN.mscorlib.DNDateTime;
    procedure set_CreatedTime(value: DDN.mscorlib.DNDateTime);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Row: Int32 read get_Row;
    property Column: Int32 read get_Column;
    property Notes: string read get_Notes write set_Notes;
    property Author: DNThreadedCommentAuthor read get_Author;
    property CreatedTime: DDN.mscorlib.DNDateTime read get_CreatedTime write set_CreatedTime;
  end;

  TDNThreadedComment = class(TDNGenericImport<DNThreadedCommentClass, DNThreadedComment>) end;

  //-------------namespace: Aspose.Cells----------------
  DNThreadedCommentAuthorClass = interface(DDN.mscorlib.DNObjectClass)
  ['{7D7AB6EC-67D9-5FC4-8AED-D079CF1C88FC}']
  end;

  [DNTypeName('Aspose.Cells.ThreadedCommentAuthor')]
  DNThreadedCommentAuthor = interface(DDN.mscorlib.DNObject)
  ['{B53BA48D-29D6-3B1A-ACEE-CECF628C1169}']
  { getters & setters } 

    function get_Name: string;
    procedure set_Name(value: string);
    function get_UserId: string;
    procedure set_UserId(value: string);
    function get_ProviderId: string;
    procedure set_ProviderId(value: string);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Name: string read get_Name write set_Name;
    property UserId: string read get_UserId write set_UserId;
    property ProviderId: string read get_ProviderId write set_ProviderId;
  end;

  TDNThreadedCommentAuthor = class(TDNGenericImport<DNThreadedCommentAuthorClass, DNThreadedCommentAuthor>) end;

  //-------------namespace: Aspose.Cells----------------
  DNTop10Class = interface(DDN.mscorlib.DNObjectClass)
  ['{F5E20B6B-4FDC-52DB-B28B-CB789742CEF4}']
  { constructors } 

    {class} function init: DNTop10;

  end;

  [DNTypeName('Aspose.Cells.Top10')]
  DNTop10 = interface(DDN.mscorlib.DNObject)
  ['{C7FCFA5C-B532-3FF2-8CF9-153504F8415D}']
  { getters & setters } 

    function get_IsPercent: Boolean;
    procedure set_IsPercent(value: Boolean);
    function get_IsBottom: Boolean;
    procedure set_IsBottom(value: Boolean);
    function get_Rank: Int32;
    procedure set_Rank(value: Int32);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property IsPercent: Boolean read get_IsPercent write set_IsPercent;
    property IsBottom: Boolean read get_IsBottom write set_IsBottom;
    property Rank: Int32 read get_Rank write set_Rank;
  end;

  TDNTop10 = class(TDNGenericImport<DNTop10Class, DNTop10>) end;

  //-------------namespace: Aspose.Cells----------------
  DNTop10FilterClass = interface(DDN.mscorlib.DNObjectClass)
  ['{B5214B84-C649-51B6-8408-158613946443}']
  end;

  [DNTypeName('Aspose.Cells.Top10Filter')]
  DNTop10Filter = interface(DDN.mscorlib.DNObject)
  ['{21F80AEF-55E1-3749-A983-DB28F24A3527}']
  { getters & setters } 

    function get_IsTop: Boolean;
    procedure set_IsTop(value: Boolean);
    function get_IsPercent: Boolean;
    procedure set_IsPercent(value: Boolean);
    function get_Items: Int32;
    procedure set_Items(value: Int32);
    function get_Criteria: DDN.mscorlib.DNObject;
    procedure set_Criteria(value: DDN.mscorlib.DNObject);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property IsTop: Boolean read get_IsTop write set_IsTop;
    property IsPercent: Boolean read get_IsPercent write set_IsPercent;
    property Items: Int32 read get_Items write set_Items;
    property Criteria: DDN.mscorlib.DNObject read get_Criteria write set_Criteria;
  end;

  TDNTop10Filter = class(TDNGenericImport<DNTop10FilterClass, DNTop10Filter>) end;

  //-------------namespace: Aspose.Cells----------------
  DNUnionRangeClass = interface(DDN.mscorlib.DNObjectClass)
  ['{4A5DAD88-E25C-59BC-9630-639DBDE3F17C}']
  end;

  [DNTypeName('Aspose.Cells.UnionRange')]
  DNUnionRange = interface(DDN.mscorlib.DNObject)
  ['{413AB0E2-9551-3440-A67D-8366477317BB}']
  { getters & setters } 

    function get_FirstRow: Int32;
    function get_FirstColumn: Int32;
    function get_RowCount: Int32;
    function get_ColumnCount: Int32;
    function get_Value: DDN.mscorlib.DNObject;
    procedure set_Value(value: DDN.mscorlib.DNObject);
    function get_Name: string;
    procedure set_Name(value: string);
    function get_RefersTo: string;
    function get_HasRange: Boolean;
    function get_Hyperlinks: TArray<DNHyperlink>;
    function get_CellCount: Int32;
    function get_RangeCount: Int32;
    function get_Ranges: TArray<DNRange>;

  { methods } 

    procedure Merge;
    procedure UnMerge;
    procedure PutValue(stringValue: string; isConverted: Boolean; setStyle: Boolean);
    procedure SetStyle(style: DNStyle);
    procedure ApplyStyle(style: DNStyle; flag: DNStyleFlag);
    procedure Copy(range: DNUnionRange; options: DNPasteOptions);
    function GetEnumerator: DDN.mscorlib.DNIEnumerator;
    procedure SetOutlineBorders(borderStyles: TArray<DNCellBorderType>; borderColors: TArray<DDN.System.Drawing.DNColor>); overload;
    procedure SetOutlineBorders(borderStyle: DNCellBorderType; borderColor: DDN.System.Drawing.DNColor); overload;
    function Intersect(range: string): DNUnionRange; overload;
    function Intersect(unionRange: DNUnionRange): DNUnionRange; overload;
    function Intersect(ranges: TArray<DNRange>): DNUnionRange; overload;
    function Union(range: string): DNUnionRange; overload;
    function Union(unionRange: DNUnionRange): DNUnionRange; overload;
    function Union(ranges: TArray<DNRange>): DNUnionRange; overload;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property FirstRow: Int32 read get_FirstRow;
    property FirstColumn: Int32 read get_FirstColumn;
    property RowCount: Int32 read get_RowCount;
    property ColumnCount: Int32 read get_ColumnCount;
    property Value: DDN.mscorlib.DNObject read get_Value write set_Value;
    property Name: string read get_Name write set_Name;
    property RefersTo: string read get_RefersTo;
    property HasRange: Boolean read get_HasRange;
    property Hyperlinks: TArray<DNHyperlink> read get_Hyperlinks;
    property CellCount: Int32 read get_CellCount;
    property RangeCount: Int32 read get_RangeCount;
    property Ranges: TArray<DNRange> read get_Ranges;
  end;

  TDNUnionRange = class(TDNGenericImport<DNUnionRangeClass, DNUnionRange>) end;

  //-------------namespace: Aspose.Cells.Utility----------------
  DNExportRangeToJsonOptionsClass = interface(DDN.mscorlib.DNObjectClass)
  ['{C18F07B3-FEA4-5096-832B-E18CA269DD99}']
  { constructors } 

    {class} function init: DNExportRangeToJsonOptions;

  end;

  [DNTypeName('Aspose.Cells.Utility.ExportRangeToJsonOptions')]
  DNExportRangeToJsonOptions = interface(DDN.mscorlib.DNObject)
  ['{FD92250D-7CCB-3697-8D5C-F37BC5D4482D}']
  { getters & setters } 

    function get_HasHeaderRow: Boolean;
    procedure set_HasHeaderRow(value: Boolean);
    function get_ExportAsString: Boolean;
    procedure set_ExportAsString(value: Boolean);
    function get_Indent: string;
    procedure set_Indent(value: string);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property HasHeaderRow: Boolean read get_HasHeaderRow write set_HasHeaderRow;
    property ExportAsString: Boolean read get_ExportAsString write set_ExportAsString;
    property Indent: string read get_Indent write set_Indent;
  end;

  TDNExportRangeToJsonOptions = class(TDNGenericImport<DNExportRangeToJsonOptionsClass, DNExportRangeToJsonOptions>) end;

  //-------------namespace: Aspose.Cells.Utility----------------
  DNJsonLayoutOptionsClass = interface(DDN.mscorlib.DNObjectClass)
  ['{370B9552-58A4-5872-AC36-D796E2852688}']
  { constructors } 

    {class} function init: DNJsonLayoutOptions;

  end;

  [DNTypeName('Aspose.Cells.Utility.JsonLayoutOptions')]
  DNJsonLayoutOptions = interface(DDN.mscorlib.DNObject)
  ['{E02E5657-CD65-36FC-A06C-650BF368EAE0}']
  { getters & setters } 

    function get_ArrayAsTable: Boolean;
    procedure set_ArrayAsTable(value: Boolean);
    function get_IgnoreNull: Boolean;
    procedure set_IgnoreNull(value: Boolean);
    function get_IgnoreArrayTitle: Boolean;
    procedure set_IgnoreArrayTitle(value: Boolean);
    function get_IgnoreObjectTitle: Boolean;
    procedure set_IgnoreObjectTitle(value: Boolean);
    function get_ConvertNumericOrDate: Boolean;
    procedure set_ConvertNumericOrDate(value: Boolean);
    function get_NumberFormat: string;
    procedure set_NumberFormat(value: string);
    function get_DateFormat: string;
    procedure set_DateFormat(value: string);
    function get_TitleStyle: DNStyle;
    procedure set_TitleStyle(value: DNStyle);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property ArrayAsTable: Boolean read get_ArrayAsTable write set_ArrayAsTable;
    property IgnoreNull: Boolean read get_IgnoreNull write set_IgnoreNull;
    property IgnoreArrayTitle: Boolean read get_IgnoreArrayTitle write set_IgnoreArrayTitle;
    property IgnoreObjectTitle: Boolean read get_IgnoreObjectTitle write set_IgnoreObjectTitle;
    property ConvertNumericOrDate: Boolean read get_ConvertNumericOrDate write set_ConvertNumericOrDate;
    property NumberFormat: string read get_NumberFormat write set_NumberFormat;
    property DateFormat: string read get_DateFormat write set_DateFormat;
    property TitleStyle: DNStyle read get_TitleStyle write set_TitleStyle;
  end;

  TDNJsonLayoutOptions = class(TDNGenericImport<DNJsonLayoutOptionsClass, DNJsonLayoutOptions>) end;

  //-------------namespace: Aspose.Cells.Utility----------------
  DNJsonUtilityClass = interface(DDN.mscorlib.DNObjectClass)
  ['{2103F451-C39E-577B-A549-A5A21BDE20C7}']
  { constructors } 

    {class} function init: DNJsonUtility;

  { static methods } 

    {class} function ImportData(json: string; cells: DNCells; row: Int32; column: Int32; option: DNJsonLayoutOptions): TArray<Int32>;
    {class} function ExportRangeToJson(range: DNRange; options: DNExportRangeToJsonOptions): string;

  end;

  [DNTypeName('Aspose.Cells.Utility.JsonUtility')]
  DNJsonUtility = interface(DDN.mscorlib.DNObject)
  ['{B311CE86-5D5C-367B-ACDF-FA83F00E8E71}']
  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNJsonUtility = class(TDNGenericImport<DNJsonUtilityClass, DNJsonUtility>) end;

  //-------------namespace: Aspose.Cells----------------
  DNValidationClass = interface(DDN.mscorlib.DNObjectClass)
  ['{E94A7E19-35BC-5AFF-A56A-62F1E678FB89}']
  end;

  [DNTypeName('Aspose.Cells.Validation')]
  DNValidation = interface(DDN.mscorlib.DNObject)
  ['{CCDD3348-7AB4-332E-B50F-33A6E744C9B0}']
  { getters & setters } 

    function get_Operator: DNOperatorType;
    procedure set_Operator(value: DNOperatorType);
    function get_AlertStyle: DNValidationAlertType;
    procedure set_AlertStyle(value: DNValidationAlertType);
    function get_Type: DNValidationType;
    procedure set_Type(value: DNValidationType);
    function get_InputMessage: string;
    procedure set_InputMessage(value: string);
    function get_InputTitle: string;
    procedure set_InputTitle(value: string);
    function get_ErrorMessage: string;
    procedure set_ErrorMessage(value: string);
    function get_ErrorTitle: string;
    procedure set_ErrorTitle(value: string);
    function get_ShowInput: Boolean;
    procedure set_ShowInput(value: Boolean);
    function get_ShowError: Boolean;
    procedure set_ShowError(value: Boolean);
    function get_IgnoreBlank: Boolean;
    procedure set_IgnoreBlank(value: Boolean);
    function get_Formula1: string;
    procedure set_Formula1(value: string);
    function get_Formula2: string;
    procedure set_Formula2(value: string);
    function get_Value1: DDN.mscorlib.DNObject;
    procedure set_Value1(value: DDN.mscorlib.DNObject);
    function get_Value2: DDN.mscorlib.DNObject;
    procedure set_Value2(value: DDN.mscorlib.DNObject);
    function get_InCellDropDown: Boolean;
    procedure set_InCellDropDown(value: Boolean);
    function get_Areas: TArray<DNCellArea>;

  { methods } 

    function GetFormula1(isR1C1: Boolean; isLocal: Boolean): string; overload;
    function GetFormula2(isR1C1: Boolean; isLocal: Boolean): string; overload;
    function GetFormula1(isR1C1: Boolean; isLocal: Boolean; row: Int32; column: Int32): string; overload;
    function GetFormula2(isR1C1: Boolean; isLocal: Boolean; row: Int32; column: Int32): string; overload;
    procedure SetFormula1(formula: string; isR1C1: Boolean; isLocal: Boolean);
    procedure SetFormula2(formula: string; isR1C1: Boolean; isLocal: Boolean);
    function GetListValue(row: Int32; column: Int32): DDN.mscorlib.DNObject;
    procedure AddArea(cellArea: DNCellArea); overload;
    procedure AddArea(cellArea: DNCellArea; checkIntersection: Boolean; checkEdge: Boolean); overload;
    procedure AddAreas(areas: TArray<DNCellArea>; checkIntersection: Boolean; checkEdge: Boolean);
    procedure RemoveArea(cellArea: DNCellArea);
    procedure RemoveAreas(areas: TArray<DNCellArea>);
    procedure RemoveACell(row: Int32; column: Int32);
    procedure Copy(source: DNValidation; copyOption: DNCopyOptions);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Operator: DNOperatorType read get_Operator write set_Operator;
    property AlertStyle: DNValidationAlertType read get_AlertStyle write set_AlertStyle;
    property &Type: DNValidationType read get_Type write set_Type;
    property InputMessage: string read get_InputMessage write set_InputMessage;
    property InputTitle: string read get_InputTitle write set_InputTitle;
    property ErrorMessage: string read get_ErrorMessage write set_ErrorMessage;
    property ErrorTitle: string read get_ErrorTitle write set_ErrorTitle;
    property ShowInput: Boolean read get_ShowInput write set_ShowInput;
    property ShowError: Boolean read get_ShowError write set_ShowError;
    property IgnoreBlank: Boolean read get_IgnoreBlank write set_IgnoreBlank;
    property Formula1: string read get_Formula1 write set_Formula1;
    property Formula2: string read get_Formula2 write set_Formula2;
    property Value1: DDN.mscorlib.DNObject read get_Value1 write set_Value1;
    property Value2: DDN.mscorlib.DNObject read get_Value2 write set_Value2;
    property InCellDropDown: Boolean read get_InCellDropDown write set_InCellDropDown;
    property Areas: TArray<DNCellArea> read get_Areas;
  end;

  TDNValidation = class(TDNGenericImport<DNValidationClass, DNValidation>) end;

  //-------------namespace: Aspose.Cells.Vba----------------
  DNVbaModuleClass = interface(DDN.mscorlib.DNObjectClass)
  ['{97617718-970A-5732-8781-D3341124668F}']
  end;

  [DNTypeName('Aspose.Cells.Vba.VbaModule')]
  DNVbaModule = interface(DDN.mscorlib.DNObject)
  ['{3CB76BFE-94F8-3DA1-8F75-17949828F519}']
  { getters & setters } 

    function get_Name: string;
    procedure set_Name(value: string);
    function get_Type: DNVbaModuleType;
    function get_Codes: string;
    procedure set_Codes(value: string);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Name: string read get_Name write set_Name;
    property &Type: DNVbaModuleType read get_Type;
    property Codes: string read get_Codes write set_Codes;
  end;

  TDNVbaModule = class(TDNGenericImport<DNVbaModuleClass, DNVbaModule>) end;

  //-------------namespace: Aspose.Cells.Vba----------------
  DNVbaProjectClass = interface(DDN.mscorlib.DNObjectClass)
  ['{C8DD8282-8787-51C1-8EE8-19AA58D101C1}']
  end;

  [DNTypeName('Aspose.Cells.Vba.VbaProject')]
  DNVbaProject = interface(DDN.mscorlib.DNObject)
  ['{A7EA43A2-6C41-3079-89DD-099B57A1A38E}']
  { getters & setters } 

    function get_IsValidSigned: Boolean;
    function get_CertRawData: TArray<Byte>;
    function get_Name: string;
    procedure set_Name(value: string);
    function get_IsSigned: Boolean;
    function get_IsProtected: Boolean;
    function get_IslockedForViewing: Boolean;
    function get_Modules: DNVbaModuleCollection;
    function get_References: DNVbaProjectReferenceCollection;

  { methods } 

    procedure Sign(digitalSignature: DNDigitalSignature);
    procedure Protect(islockedForViewing: Boolean; password: string);
    procedure Copy(source: DNVbaProject);
    function ValidatePassword(password: string): Boolean;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property IsValidSigned: Boolean read get_IsValidSigned;
    property CertRawData: TArray<Byte> read get_CertRawData;
    property Name: string read get_Name write set_Name;
    property IsSigned: Boolean read get_IsSigned;
    property IsProtected: Boolean read get_IsProtected;
    property IslockedForViewing: Boolean read get_IslockedForViewing;
    property Modules: DNVbaModuleCollection read get_Modules;
    property References: DNVbaProjectReferenceCollection read get_References;
  end;

  TDNVbaProject = class(TDNGenericImport<DNVbaProjectClass, DNVbaProject>) end;

  //-------------namespace: Aspose.Cells.Vba----------------
  DNVbaProjectReferenceClass = interface(DDN.mscorlib.DNObjectClass)
  ['{540E0369-CE74-56F2-930F-851CDAD143D0}']
  end;

  [DNTypeName('Aspose.Cells.Vba.VbaProjectReference')]
  DNVbaProjectReference = interface(DDN.mscorlib.DNObject)
  ['{A4A57452-213B-386B-B771-B4DA2E9690C0}']
  { getters & setters } 

    function get_Type: DNVbaProjectReferenceType;
    function get_Name: string;
    procedure set_Name(value: string);
    function get_Libid: string;
    procedure set_Libid(value: string);
    function get_Twiddledlibid: string;
    procedure set_Twiddledlibid(value: string);
    function get_ExtendedLibid: string;
    procedure set_ExtendedLibid(value: string);
    function get_RelativeLibid: string;
    procedure set_RelativeLibid(value: string);

  { methods } 

    procedure Copy(source: DNVbaProjectReference);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property &Type: DNVbaProjectReferenceType read get_Type;
    property Name: string read get_Name write set_Name;
    property Libid: string read get_Libid write set_Libid;
    property Twiddledlibid: string read get_Twiddledlibid write set_Twiddledlibid;
    property ExtendedLibid: string read get_ExtendedLibid write set_ExtendedLibid;
    property RelativeLibid: string read get_RelativeLibid write set_RelativeLibid;
  end;

  TDNVbaProjectReference = class(TDNGenericImport<DNVbaProjectReferenceClass, DNVbaProjectReference>) end;

  //-------------namespace: Aspose.Cells----------------
  DNVerticalPageBreakClass = interface(DDN.mscorlib.DNObjectClass)
  ['{4EE80D0B-5222-57A9-AA8E-258B65ABDC36}']
  end;

  [DNTypeName('Aspose.Cells.VerticalPageBreak')]
  DNVerticalPageBreak = interface(DDN.mscorlib.DNObject)
  ['{9E396BAF-444B-3B9D-BF76-B01087BACDC4}']
  { getters & setters } 

    function get_StartRow: Int32;
    function get_EndRow: Int32;
    function get_Column: Int32;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property StartRow: Int32 read get_StartRow;
    property EndRow: Int32 read get_EndRow;
    property Column: Int32 read get_Column;
  end;

  TDNVerticalPageBreak = class(TDNGenericImport<DNVerticalPageBreakClass, DNVerticalPageBreak>) end;

  //-------------namespace: Aspose.Cells----------------
  DNWarningInfoClass = interface(DDN.mscorlib.DNObjectClass)
  ['{6F77C6D5-3E35-52A2-8053-B9B77AB9D39B}']
  end;

  [DNTypeName('Aspose.Cells.WarningInfo')]
  DNWarningInfo = interface(DDN.mscorlib.DNObject)
  ['{8B52C3AC-5350-3A48-AD9C-DD2A4C594A74}']
  { getters & setters } 

    function get_WarningType: DNWarningType;
    function get_Description: string;
    function get_ErrorObject: DDN.mscorlib.DNObject;
    function get_CorrectedObject: DDN.mscorlib.DNObject;
    procedure set_CorrectedObject(value: DDN.mscorlib.DNObject);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property WarningType: DNWarningType read get_WarningType;
    property Description: string read get_Description;
    property ErrorObject: DDN.mscorlib.DNObject read get_ErrorObject;
    property CorrectedObject: DDN.mscorlib.DNObject read get_CorrectedObject write set_CorrectedObject;
  end;

  TDNWarningInfo = class(TDNGenericImport<DNWarningInfoClass, DNWarningInfo>) end;

  //-------------namespace: Aspose.Cells.WebExtensions----------------
  DNWebExtensionClass = interface(DDN.mscorlib.DNObjectClass)
  ['{385B4CDD-F4D0-5E2A-B1C4-0FBD7DBBCFF2}']
  end;

  [DNTypeName('Aspose.Cells.WebExtensions.WebExtension')]
  DNWebExtension = interface(DDN.mscorlib.DNObject)
  ['{C5E80E25-5433-3F1D-8849-458D9797ADEE}']
  { getters & setters } 

    function get_Id: string;
    procedure set_Id(value: string);
    function get_IsFrozen: Boolean;
    procedure set_IsFrozen(value: Boolean);
    function get_Reference: DNWebExtensionReference;
    function get_AlterReferences: DNWebExtensionReferenceCollection;
    function get_Properties: DNWebExtensionPropertyCollection;
    function get_Bindings: DNWebExtensionBindingCollection;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Id: string read get_Id write set_Id;
    property IsFrozen: Boolean read get_IsFrozen write set_IsFrozen;
    property Reference: DNWebExtensionReference read get_Reference;
    property AlterReferences: DNWebExtensionReferenceCollection read get_AlterReferences;
    property Properties: DNWebExtensionPropertyCollection read get_Properties;
    property Bindings: DNWebExtensionBindingCollection read get_Bindings;
  end;

  TDNWebExtension = class(TDNGenericImport<DNWebExtensionClass, DNWebExtension>) end;

  //-------------namespace: Aspose.Cells.WebExtensions----------------
  DNWebExtensionBindingClass = interface(DDN.mscorlib.DNObjectClass)
  ['{10E85D58-43C9-5270-87F2-1140B7B9197B}']
  { constructors } 

    {class} function init: DNWebExtensionBinding;

  end;

  [DNTypeName('Aspose.Cells.WebExtensions.WebExtensionBinding')]
  DNWebExtensionBinding = interface(DDN.mscorlib.DNObject)
  ['{12BA672B-D689-3002-8BE0-DA5D5723DD3C}']
  { getters & setters } 

    function get_Id: string;
    procedure set_Id(value: string);
    function get_Type: string;
    procedure set_Type(value: string);
    function get_Appref: string;
    procedure set_Appref(value: string);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Id: string read get_Id write set_Id;
    property &Type: string read get_Type write set_Type;
    property Appref: string read get_Appref write set_Appref;
  end;

  TDNWebExtensionBinding = class(TDNGenericImport<DNWebExtensionBindingClass, DNWebExtensionBinding>) end;

  //-------------namespace: Aspose.Cells.WebExtensions----------------
  DNWebExtensionPropertyClass = interface(DDN.mscorlib.DNObjectClass)
  ['{8E45B52A-6659-5D11-BB87-974868D801E1}']
  end;

  [DNTypeName('Aspose.Cells.WebExtensions.WebExtensionProperty')]
  DNWebExtensionProperty = interface(DDN.mscorlib.DNObject)
  ['{8E4A7FA2-929E-38D3-9858-D47E93A842CD}']
  { getters & setters } 

    function get_Name: string;
    procedure set_Name(value: string);
    function get_Value: string;
    procedure set_Value(value: string);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Name: string read get_Name write set_Name;
    property Value: string read get_Value write set_Value;
  end;

  TDNWebExtensionProperty = class(TDNGenericImport<DNWebExtensionPropertyClass, DNWebExtensionProperty>) end;

  //-------------namespace: Aspose.Cells.WebExtensions----------------
  DNWebExtensionReferenceClass = interface(DDN.mscorlib.DNObjectClass)
  ['{89582AF8-9890-5188-9300-273C027F16A8}']
  end;

  [DNTypeName('Aspose.Cells.WebExtensions.WebExtensionReference')]
  DNWebExtensionReference = interface(DDN.mscorlib.DNObject)
  ['{E6414F67-B28A-3887-989C-50AA99D53A52}']
  { getters & setters } 

    function get_Id: string;
    procedure set_Id(value: string);
    function get_Version: string;
    procedure set_Version(value: string);
    function get_StoreName: string;
    procedure set_StoreName(value: string);
    function get_StoreType: DNWebExtensionStoreType;
    procedure set_StoreType(value: DNWebExtensionStoreType);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Id: string read get_Id write set_Id;
    property Version: string read get_Version write set_Version;
    property StoreName: string read get_StoreName write set_StoreName;
    property StoreType: DNWebExtensionStoreType read get_StoreType write set_StoreType;
  end;

  TDNWebExtensionReference = class(TDNGenericImport<DNWebExtensionReferenceClass, DNWebExtensionReference>) end;

  //-------------namespace: Aspose.Cells.WebExtensions----------------
  DNWebExtensionTaskPaneClass = interface(DDN.mscorlib.DNObjectClass)
  ['{5473D0B9-CF57-5ACB-A60D-846E8640497A}']
  end;

  [DNTypeName('Aspose.Cells.WebExtensions.WebExtensionTaskPane')]
  DNWebExtensionTaskPane = interface(DDN.mscorlib.DNObject)
  ['{1D95237B-ECC4-392E-ADA5-236D0BD65482}']
  { getters & setters } 

    function get_WebExtension: DNWebExtension;
    procedure set_WebExtension(value: DNWebExtension);
    function get_DockState: string;
    procedure set_DockState(value: string);
    function get_IsVisible: Boolean;
    procedure set_IsVisible(value: Boolean);
    function get_IsLocked: Boolean;
    procedure set_IsLocked(value: Boolean);
    function get_Width: Double;
    procedure set_Width(value: Double);
    function get_Row: Int32;
    procedure set_Row(value: Int32);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property WebExtension: DNWebExtension read get_WebExtension write set_WebExtension;
    property DockState: string read get_DockState write set_DockState;
    property IsVisible: Boolean read get_IsVisible write set_IsVisible;
    property IsLocked: Boolean read get_IsLocked write set_IsLocked;
    property Width: Double read get_Width write set_Width;
    property Row: Int32 read get_Row write set_Row;
  end;

  TDNWebExtensionTaskPane = class(TDNGenericImport<DNWebExtensionTaskPaneClass, DNWebExtensionTaskPane>) end;

  //-------------namespace: Aspose.Cells----------------
  DNWorkbookClass = interface(DNObjectClass)
  ['{57237464-147F-5D00-92A0-386F9A7AE337}']
  { constructors } 

    {class} function init: DNWorkbook; overload;
    {class} function init(fileFormatType: DNFileFormatType): DNWorkbook; overload;
    {class} function init(&file: string): DNWorkbook; overload;
    {class} function init(stream: DDN.mscorlib.DNStream): DNWorkbook; overload;
    {class} function init(&file: string; loadOptions: DNLoadOptions): DNWorkbook; overload;
    {class} function init(stream: DDN.mscorlib.DNStream; loadOptions: DNLoadOptions): DNWorkbook; overload;

  end;

  [DNTypeName('Aspose.Cells.Workbook')]
  DNWorkbook = interface(DDN.mscorlib.DNIDisposable)
  ['{E2CCC9D8-7619-36D0-90CD-F467D879BCC7}']
  { getters & setters } 

    function get_Settings: DNWorkbookSettings;
    function get_Worksheets: DNWorksheetCollection;
    function get_IsLicensed: Boolean;
    function get_Colors: TArray<DDN.System.Drawing.DNColor>;
    function get_CountOfStylesInPool: Int32;
    function get_DefaultStyle: DNStyle;
    procedure set_DefaultStyle(value: DNStyle);
    function get_IsDigitallySigned: Boolean;
    function get_IsWorkbookProtectedWithPassword: Boolean;
    function get_VbaProject: DNVbaProject;
    function get_HasMacro: Boolean;
    function get_HasRevisions: Boolean;
    function get_FileName: string;
    procedure set_FileName(value: string);
    function get_DataSorter: DNDataSorter;
    function get_Theme: string;
    function get_BuiltInDocumentProperties: DNBuiltInDocumentPropertyCollection;
    function get_CustomDocumentProperties: DNCustomDocumentPropertyCollection;
    function get_FileFormat: DNFileFormatType;
    procedure set_FileFormat(value: DNFileFormatType);
    function get_InterruptMonitor: DNInterruptMonitor;
    procedure set_InterruptMonitor(value: DNInterruptMonitor);
    function get_ContentTypeProperties: DNContentTypePropertyCollection;
    function get_CustomXmlParts: DNCustomXmlPartCollection;
    function get_DataMashup: DNDataMashup;
    function get_RibbonXml: string;
    procedure set_RibbonXml(value: string);
    function get_AbsolutePath: string;
    procedure set_AbsolutePath(value: string);
    function get_DataConnections: DNExternalConnectionCollection;

  { methods } 

    procedure Dispose;
    procedure ParseFormulas(ignoreError: Boolean);
    procedure StartAccessCache(opts: DNAccessCacheOptions);
    procedure CloseAccessCache(opts: DNAccessCacheOptions);
    procedure Save(fileName: string; saveFormat: DNSaveFormat); overload;
    procedure Save(fileName: string); overload;
    procedure Save(fileName: string; saveOptions: DNSaveOptions); overload;
    procedure Save(stream: DDN.mscorlib.DNStream; saveFormat: DNSaveFormat); overload;
    procedure Save(stream: DDN.mscorlib.DNStream; saveOptions: DNSaveOptions); overload;
    function SaveToStream: DDN.mscorlib.DNMemoryStream;
    procedure Save(response: DDN.System.Web.DNHttpResponse; fileName: string; contentDisposition: DNContentDisposition; saveOptions: DNSaveOptions); overload;
    procedure Save(response: DDN.System.Web.DNHttpResponse; fileName: string; contentDisposition: DNContentDisposition; saveOptions: DNSaveOptions; enableHttpCompression: Boolean); overload;
    procedure RemoveUnusedStyles;
    function CreateStyle: DNStyle;
    function CreateBuiltinStyle(&type: DNBuiltinStyleType): DNStyle;
    function CreateCellsColor: DNCellsColor;
    function Replace(placeHolder: string; newValue: string): Int32; overload;
    function Replace(placeHolder: string; newValue: Int32): Int32; overload;
    function Replace(placeHolder: string; newValue: Double): Int32; overload;
    function Replace(placeHolder: string; newValues: TArray<string>; isVertical: Boolean): Int32; overload;
    function Replace(placeHolder: string; newValues: TArray<Int32>; isVertical: Boolean): Int32; overload;
    function Replace(placeHolder: string; newValues: TArray<Double>; isVertical: Boolean): Int32; overload;
    function Replace(placeHolder: string; insertTable: DDN.System.Data.DNDataTable): Int32; overload;
    function Replace(boolValue: Boolean; newValue: DDN.mscorlib.DNObject): Int32; overload;
    function Replace(intValue: Int32; newValue: DDN.mscorlib.DNObject): Int32; overload;
    function Replace(placeHolder: string; newValue: string; options: DNReplaceOptions): Int32; overload;
    procedure Copy(source: DNWorkbook; copyOptions: DNCopyOptions); overload;
    procedure Copy(source: DNWorkbook); overload;
    procedure Combine(secondWorkbook: DNWorkbook);
    function GetStyleInPool(index: Int32): DNStyle;
    function GetFonts: TArray<DNFont>;
    function GetNamedStyle(name: string): DNStyle;
    procedure ChangePalette(color: DDN.System.Drawing.DNColor; index: Int32);
    function IsColorInPalette(color: DDN.System.Drawing.DNColor): Boolean;
    procedure CalculateFormula; overload;
    procedure CalculateFormula(ignoreError: Boolean); overload;
    procedure CalculateFormula(ignoreError: Boolean; customFunction: DNICustomFunction); overload;
    procedure CalculateFormula(options: DNCalculationOptions); overload;
    procedure RefreshDynamicArrayFormulas(calculate: Boolean);
    function GetMatchingColor(rawColor: DDN.System.Drawing.DNColor): DDN.System.Drawing.DNColor;
    procedure SetEncryptionOptions(encryptionType: DNEncryptionType; keyLength: Int32);
    procedure Protect(protectionType: DNProtectionType; password: string);
    procedure ProtectSharedWorkbook(password: string);
    procedure Unprotect(password: string);
    procedure UnprotectSharedWorkbook(password: string);
    procedure RemoveMacro;
    procedure RemoveDigitalSignature;
    procedure AcceptAllRevisions;
    procedure RemoveExternalLinks;
    function GetThemeColor(&type: DNThemeColorType): DDN.System.Drawing.DNColor;
    procedure SetThemeColor(&type: DNThemeColorType; color: DDN.System.Drawing.DNColor);
    procedure CustomTheme(themeName: string; colors: TArray<DDN.System.Drawing.DNColor>);
    procedure CopyTheme(source: DNWorkbook);
    function HasExernalLinks: Boolean;
    procedure UpdateLinkedDataSource(externalWorkbooks: TArray<DNWorkbook>);
    procedure ImportXml(url: string; sheetName: string; row: Int32; col: Int32); overload;
    procedure ImportXml(stream: DDN.mscorlib.DNStream; sheetName: string; row: Int32; col: Int32); overload;
    procedure ExportXml(mapName: string; path: string); overload;
    procedure ExportXml(mapName: string; stream: DDN.mscorlib.DNStream); overload;
    procedure SetDigitalSignature(digitalSignatureCollection: DNDigitalSignatureCollection);
    procedure AddDigitalSignature(digitalSignatureCollection: DNDigitalSignatureCollection);
    function GetDigitalSignature: DNDigitalSignatureCollection;
    procedure RemovePersonalInformation;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Settings: DNWorkbookSettings read get_Settings;
    property Worksheets: DNWorksheetCollection read get_Worksheets;
    property IsLicensed: Boolean read get_IsLicensed;
    property Colors: TArray<DDN.System.Drawing.DNColor> read get_Colors;
    property CountOfStylesInPool: Int32 read get_CountOfStylesInPool;
    property DefaultStyle: DNStyle read get_DefaultStyle write set_DefaultStyle;
    property IsDigitallySigned: Boolean read get_IsDigitallySigned;
    property IsWorkbookProtectedWithPassword: Boolean read get_IsWorkbookProtectedWithPassword;
    property VbaProject: DNVbaProject read get_VbaProject;
    property HasMacro: Boolean read get_HasMacro;
    property HasRevisions: Boolean read get_HasRevisions;
    property FileName: string read get_FileName write set_FileName;
    property DataSorter: DNDataSorter read get_DataSorter;
    property Theme: string read get_Theme;
    property BuiltInDocumentProperties: DNBuiltInDocumentPropertyCollection read get_BuiltInDocumentProperties;
    property CustomDocumentProperties: DNCustomDocumentPropertyCollection read get_CustomDocumentProperties;
    property FileFormat: DNFileFormatType read get_FileFormat write set_FileFormat;
    property InterruptMonitor: DNInterruptMonitor read get_InterruptMonitor write set_InterruptMonitor;
    property ContentTypeProperties: DNContentTypePropertyCollection read get_ContentTypeProperties;
    property CustomXmlParts: DNCustomXmlPartCollection read get_CustomXmlParts;
    property DataMashup: DNDataMashup read get_DataMashup;
    property RibbonXml: string read get_RibbonXml write set_RibbonXml;
    property AbsolutePath: string read get_AbsolutePath write set_AbsolutePath;
    property DataConnections: DNExternalConnectionCollection read get_DataConnections;
  end;

  TDNWorkbook = class(TDNGenericImport<DNWorkbookClass, DNWorkbook>) end;

  //-------------namespace: Aspose.Cells----------------
  DNWorkbookDesignerClass = interface(DDN.mscorlib.DNObjectClass)
  ['{7C3D2B91-1A05-578E-8DF0-B9F24939F66C}']
  { constructors } 

    {class} function init: DNWorkbookDesigner; overload;
    {class} function init(workbook: DNWorkbook): DNWorkbookDesigner; overload;

  end;

  [DNTypeName('Aspose.Cells.WorkbookDesigner')]
  DNWorkbookDesigner = interface(DDN.mscorlib.DNObject)
  ['{7A78855D-11B2-339B-902D-0BCFC8050452}']
  { getters & setters } 

    function get_Workbook: DNWorkbook;
    procedure set_Workbook(value: DNWorkbook);
    function get_RepeatFormulasWithSubtotal: Boolean;
    procedure set_RepeatFormulasWithSubtotal(value: Boolean);
    function get_UpdateEmptyStringAsNull: Boolean;
    procedure set_UpdateEmptyStringAsNull(value: Boolean);
    function get_UpdateReference: Boolean;
    procedure set_UpdateReference(value: Boolean);
    function get_CalculateFormula: Boolean;
    procedure set_CalculateFormula(value: Boolean);
    function get_CallBack: DNISmartMarkerCallBack;
    procedure set_CallBack(value: DNISmartMarkerCallBack);
    function get_LineByLine: Boolean;
    procedure set_LineByLine(value: Boolean);

  { methods } 

    procedure ClearDataSource;
    procedure SetDataSource(dataSet: DDN.System.Data.DNDataSet); overload;
    procedure SetDataSource(dataTable: DDN.System.Data.DNDataTable); overload;
    procedure SetDataSource(name: string; dataTable: DNICellsDataTable); overload;
    procedure SetDataSource(dataSourceName: string; dataView: DDN.System.Data.DNDataView); overload;
    procedure SetDataSource(dataView: DDN.System.Data.DNDataView); overload;
    procedure SetDataSource(name: string; dataReader: DDN.System.Data.DNIDataReader; rowCount: Int32); overload;
    procedure SetDataSource(variable: string; data: DDN.mscorlib.DNObject); overload;
    procedure SetDataSource(variable: string; dataArray: TArray<DDN.mscorlib.DNObject>); overload;
    procedure Process; overload;
    procedure Process(isPreserved: Boolean); overload;
    procedure Process(sheetIndex: Int32; isPreserved: Boolean); overload;
    function GetSmartMarkers: TArray<string>;
    procedure SetDataSource(connection: DDN.System.Data.DNOleDbConnection); overload;
    procedure SetDataSource(connection: DDN.System.Data.DNSqlConnection); overload;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Workbook: DNWorkbook read get_Workbook write set_Workbook;
    property RepeatFormulasWithSubtotal: Boolean read get_RepeatFormulasWithSubtotal write set_RepeatFormulasWithSubtotal;
    property UpdateEmptyStringAsNull: Boolean read get_UpdateEmptyStringAsNull write set_UpdateEmptyStringAsNull;
    property UpdateReference: Boolean read get_UpdateReference write set_UpdateReference;
    property CalculateFormula: Boolean read get_CalculateFormula write set_CalculateFormula;
    property CallBack: DNISmartMarkerCallBack read get_CallBack write set_CallBack;
    property LineByLine: Boolean read get_LineByLine write set_LineByLine;
  end;

  TDNWorkbookDesigner = class(TDNGenericImport<DNWorkbookDesignerClass, DNWorkbookDesigner>) end;

  //-------------namespace: Aspose.Cells----------------
  DNWorkbookSettingsClass = interface(DNObjectClass)
  ['{B16FD210-152A-5D17-BD94-1068983C9318}']
  end;

  [DNTypeName('Aspose.Cells.WorkbookSettings')]
  DNWorkbookSettings = interface(DDN.mscorlib.DNIDisposable)
  ['{FBCA01A8-A677-3D75-80B8-5B03AC6F1DD4}']
  { getters & setters } 

    function get_StreamProvider: DNIStreamProvider;
    procedure set_StreamProvider(value: DNIStreamProvider);
    function get_Author: string;
    procedure set_Author(value: string);
    function get_CheckCustomNumberFormat: Boolean;
    procedure set_CheckCustomNumberFormat(value: Boolean);
    function get_EnableMacros: Boolean;
    procedure set_EnableMacros(value: Boolean);
    function get_Date1904: Boolean;
    procedure set_Date1904(value: Boolean);
    function get_ProtectionType: DNProtectionType;
    function get_PrecisionAsDisplayed: Boolean;
    procedure set_PrecisionAsDisplayed(value: Boolean);
    function get_ReCalculateOnOpen: Boolean;
    procedure set_ReCalculateOnOpen(value: Boolean);
    function get_CreateCalcChain: Boolean;
    procedure set_CreateCalcChain(value: Boolean);
    function get_DisplayDrawingObjects: DNDisplayDrawingObjects;
    procedure set_DisplayDrawingObjects(value: DNDisplayDrawingObjects);
    function get_ForceFullCalculate: Boolean;
    procedure set_ForceFullCalculate(value: Boolean);
    function get_Iteration: Boolean;
    procedure set_Iteration(value: Boolean);
    function get_MaxIteration: Int32;
    procedure set_MaxIteration(value: Int32);
    function get_MaxChange: Double;
    procedure set_MaxChange(value: Double);
    function get_CalcMode: DNCalcModeType;
    procedure set_CalcMode(value: DNCalcModeType);
    function get_CalculationId: string;
    procedure set_CalculationId(value: string);
    function get_CalcStackSize: Int32;
    procedure set_CalcStackSize(value: Int32);
    function get_RecalculateBeforeSave: Boolean;
    procedure set_RecalculateBeforeSave(value: Boolean);
    function get_SheetTabBarWidth: Int32;
    procedure set_SheetTabBarWidth(value: Int32);
    function get_ShowTabs: Boolean;
    procedure set_ShowTabs(value: Boolean);
    function get_FirstVisibleTab: Int32;
    procedure set_FirstVisibleTab(value: Int32);
    function get_IsHScrollBarVisible: Boolean;
    procedure set_IsHScrollBarVisible(value: Boolean);
    function get_IsVScrollBarVisible: Boolean;
    procedure set_IsVScrollBarVisible(value: Boolean);
    function get_Shared: Boolean;
    procedure set_Shared(value: Boolean);
    function get_LanguageCode: DNCountryCode;
    procedure set_LanguageCode(value: DNCountryCode);
    function get_Region: DNCountryCode;
    procedure set_Region(value: DNCountryCode);
    function get_CultureInfo: DDN.mscorlib.DNCultureInfo;
    procedure set_CultureInfo(value: DDN.mscorlib.DNCultureInfo);
    function get_GlobalizationSettings: DNGlobalizationSettings;
    procedure set_GlobalizationSettings(value: DNGlobalizationSettings);
    function get_NumberDecimalSeparator: Char;
    procedure set_NumberDecimalSeparator(value: Char);
    function get_NumberGroupSeparator: Char;
    procedure set_NumberGroupSeparator(value: Char);
    function get_Password: string;
    procedure set_Password(value: string);
    function get_WriteProtection: DNWriteProtection;
    function get_IsEncrypted: Boolean;
    function get_IsProtected: Boolean;
    function get_IsDefaultEncrypted: Boolean;
    procedure set_IsDefaultEncrypted(value: Boolean);
    function get_IsMinimized: Boolean;
    procedure set_IsMinimized(value: Boolean);
    function get_IsHidden: Boolean;
    procedure set_IsHidden(value: Boolean);
    function get_AutoCompressPictures: Boolean;
    procedure set_AutoCompressPictures(value: Boolean);
    function get_RemovePersonalInformation: Boolean;
    procedure set_RemovePersonalInformation(value: Boolean);
    function get_HidePivotFieldList: Boolean;
    procedure set_HidePivotFieldList(value: Boolean);
    function get_UpdateLinksType: DNUpdateLinksType;
    procedure set_UpdateLinksType(value: DNUpdateLinksType);
    function get_MaxRow: Int32;
    function get_MaxColumn: Int32;
    function get_ParsingFormulaOnOpen: Boolean;
    procedure set_ParsingFormulaOnOpen(value: Boolean);
    function get_WindowLeft: Double;
    procedure set_WindowLeft(value: Double);
    function get_WindowLeftInch: Double;
    procedure set_WindowLeftInch(value: Double);
    function get_WindowLeftCM: Double;
    procedure set_WindowLeftCM(value: Double);
    function get_WindowTop: Double;
    procedure set_WindowTop(value: Double);
    function get_WindowTopInch: Double;
    procedure set_WindowTopInch(value: Double);
    function get_WindowTopCM: Double;
    procedure set_WindowTopCM(value: Double);
    function get_WindowWidth: Double;
    procedure set_WindowWidth(value: Double);
    function get_WindowWidthInch: Double;
    procedure set_WindowWidthInch(value: Double);
    function get_WindowWidthCM: Double;
    procedure set_WindowWidthCM(value: Double);
    function get_WindowHeight: Double;
    procedure set_WindowHeight(value: Double);
    function get_WindowHeightInch: Double;
    procedure set_WindowHeightInch(value: Double);
    function get_WindowHeightCM: Double;
    procedure set_WindowHeightCM(value: Double);
    function get_UpdateAdjacentCellsBorder: Boolean;
    procedure set_UpdateAdjacentCellsBorder(value: Boolean);
    function get_SignificantDigits: Int32;
    procedure set_SignificantDigits(value: Int32);
    function get_CheckCompatibility: Boolean;
    procedure set_CheckCompatibility(value: Boolean);
    function get_CheckExcelRestriction: Boolean;
    procedure set_CheckExcelRestriction(value: Boolean);
    function get_AutoRecover: Boolean;
    procedure set_AutoRecover(value: Boolean);
    function get_CrashSave: Boolean;
    procedure set_CrashSave(value: Boolean);
    function get_DataExtractLoad: Boolean;
    procedure set_DataExtractLoad(value: Boolean);
    function get_RepairLoad: Boolean;
    procedure set_RepairLoad(value: Boolean);
    function get_BuildVersion: string;
    procedure set_BuildVersion(value: string);
    function get_MemorySetting: DNMemorySetting;
    procedure set_MemorySetting(value: DNMemorySetting);
    function get_PaperSize: DNPaperSizeType;
    procedure set_PaperSize(value: DNPaperSizeType);
    function get_WarningCallback: DNIWarningCallback;
    procedure set_WarningCallback(value: DNIWarningCallback);
    function get_MaxRowsOfSharedFormula: Int32;
    procedure set_MaxRowsOfSharedFormula(value: Int32);
    function get_Compliance: DNOoxmlCompliance;
    procedure set_Compliance(value: DNOoxmlCompliance);
    function get_QuotePrefixToStyle: Boolean;
    procedure set_QuotePrefixToStyle(value: Boolean);

  { methods } 

    procedure Dispose;
    function GetThemeFont(&type: DNFontSchemeType): string;
    procedure SetPageOrientationType(pageOrientationType: DNPageOrientationType);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property StreamProvider: DNIStreamProvider read get_StreamProvider write set_StreamProvider;
    property Author: string read get_Author write set_Author;
    property CheckCustomNumberFormat: Boolean read get_CheckCustomNumberFormat write set_CheckCustomNumberFormat;
    property EnableMacros: Boolean read get_EnableMacros write set_EnableMacros;
    property Date1904: Boolean read get_Date1904 write set_Date1904;
    property ProtectionType: DNProtectionType read get_ProtectionType;
    property PrecisionAsDisplayed: Boolean read get_PrecisionAsDisplayed write set_PrecisionAsDisplayed;
    property ReCalculateOnOpen: Boolean read get_ReCalculateOnOpen write set_ReCalculateOnOpen;
    property CreateCalcChain: Boolean read get_CreateCalcChain write set_CreateCalcChain;
    property DisplayDrawingObjects: DNDisplayDrawingObjects read get_DisplayDrawingObjects write set_DisplayDrawingObjects;
    property ForceFullCalculate: Boolean read get_ForceFullCalculate write set_ForceFullCalculate;
    property Iteration: Boolean read get_Iteration write set_Iteration;
    property MaxIteration: Int32 read get_MaxIteration write set_MaxIteration;
    property MaxChange: Double read get_MaxChange write set_MaxChange;
    property CalcMode: DNCalcModeType read get_CalcMode write set_CalcMode;
    property CalculationId: string read get_CalculationId write set_CalculationId;
    property CalcStackSize: Int32 read get_CalcStackSize write set_CalcStackSize;
    property RecalculateBeforeSave: Boolean read get_RecalculateBeforeSave write set_RecalculateBeforeSave;
    property SheetTabBarWidth: Int32 read get_SheetTabBarWidth write set_SheetTabBarWidth;
    property ShowTabs: Boolean read get_ShowTabs write set_ShowTabs;
    property FirstVisibleTab: Int32 read get_FirstVisibleTab write set_FirstVisibleTab;
    property IsHScrollBarVisible: Boolean read get_IsHScrollBarVisible write set_IsHScrollBarVisible;
    property IsVScrollBarVisible: Boolean read get_IsVScrollBarVisible write set_IsVScrollBarVisible;
    property Shared: Boolean read get_Shared write set_Shared;
    property LanguageCode: DNCountryCode read get_LanguageCode write set_LanguageCode;
    property Region: DNCountryCode read get_Region write set_Region;
    property CultureInfo: DDN.mscorlib.DNCultureInfo read get_CultureInfo write set_CultureInfo;
    property GlobalizationSettings: DNGlobalizationSettings read get_GlobalizationSettings write set_GlobalizationSettings;
    property NumberDecimalSeparator: Char read get_NumberDecimalSeparator write set_NumberDecimalSeparator;
    property NumberGroupSeparator: Char read get_NumberGroupSeparator write set_NumberGroupSeparator;
    property Password: string read get_Password write set_Password;
    property WriteProtection: DNWriteProtection read get_WriteProtection;
    property IsEncrypted: Boolean read get_IsEncrypted;
    property IsProtected: Boolean read get_IsProtected;
    property IsDefaultEncrypted: Boolean read get_IsDefaultEncrypted write set_IsDefaultEncrypted;
    property IsMinimized: Boolean read get_IsMinimized write set_IsMinimized;
    property IsHidden: Boolean read get_IsHidden write set_IsHidden;
    property AutoCompressPictures: Boolean read get_AutoCompressPictures write set_AutoCompressPictures;
    property RemovePersonalInformation: Boolean read get_RemovePersonalInformation write set_RemovePersonalInformation;
    property HidePivotFieldList: Boolean read get_HidePivotFieldList write set_HidePivotFieldList;
    property UpdateLinksType: DNUpdateLinksType read get_UpdateLinksType write set_UpdateLinksType;
    property MaxRow: Int32 read get_MaxRow;
    property MaxColumn: Int32 read get_MaxColumn;
    property ParsingFormulaOnOpen: Boolean read get_ParsingFormulaOnOpen write set_ParsingFormulaOnOpen;
    property WindowLeft: Double read get_WindowLeft write set_WindowLeft;
    property WindowLeftInch: Double read get_WindowLeftInch write set_WindowLeftInch;
    property WindowLeftCM: Double read get_WindowLeftCM write set_WindowLeftCM;
    property WindowTop: Double read get_WindowTop write set_WindowTop;
    property WindowTopInch: Double read get_WindowTopInch write set_WindowTopInch;
    property WindowTopCM: Double read get_WindowTopCM write set_WindowTopCM;
    property WindowWidth: Double read get_WindowWidth write set_WindowWidth;
    property WindowWidthInch: Double read get_WindowWidthInch write set_WindowWidthInch;
    property WindowWidthCM: Double read get_WindowWidthCM write set_WindowWidthCM;
    property WindowHeight: Double read get_WindowHeight write set_WindowHeight;
    property WindowHeightInch: Double read get_WindowHeightInch write set_WindowHeightInch;
    property WindowHeightCM: Double read get_WindowHeightCM write set_WindowHeightCM;
    property UpdateAdjacentCellsBorder: Boolean read get_UpdateAdjacentCellsBorder write set_UpdateAdjacentCellsBorder;
    property SignificantDigits: Int32 read get_SignificantDigits write set_SignificantDigits;
    property CheckCompatibility: Boolean read get_CheckCompatibility write set_CheckCompatibility;
    property CheckExcelRestriction: Boolean read get_CheckExcelRestriction write set_CheckExcelRestriction;
    property AutoRecover: Boolean read get_AutoRecover write set_AutoRecover;
    property CrashSave: Boolean read get_CrashSave write set_CrashSave;
    property DataExtractLoad: Boolean read get_DataExtractLoad write set_DataExtractLoad;
    property RepairLoad: Boolean read get_RepairLoad write set_RepairLoad;
    property BuildVersion: string read get_BuildVersion write set_BuildVersion;
    property MemorySetting: DNMemorySetting read get_MemorySetting write set_MemorySetting;
    property PaperSize: DNPaperSizeType read get_PaperSize write set_PaperSize;
    property WarningCallback: DNIWarningCallback read get_WarningCallback write set_WarningCallback;
    property MaxRowsOfSharedFormula: Int32 read get_MaxRowsOfSharedFormula write set_MaxRowsOfSharedFormula;
    property Compliance: DNOoxmlCompliance read get_Compliance write set_Compliance;
    property QuotePrefixToStyle: Boolean read get_QuotePrefixToStyle write set_QuotePrefixToStyle;
  end;

  TDNWorkbookSettings = class(TDNGenericImport<DNWorkbookSettingsClass, DNWorkbookSettings>) end;

  //-------------namespace: Aspose.Cells----------------
  DNWorksheetClass = interface(DNObjectClass)
  ['{9C0B4EE7-4535-5C6A-B016-A88957A8AE44}']
  end;

  [DNTypeName('Aspose.Cells.Worksheet')]
  DNWorksheet = interface(DDN.mscorlib.DNIDisposable)
  ['{0E8A6275-5393-37B4-A51D-33323D05B490}']
  { getters & setters } 

    function get_Protection: DNProtection;
    function get_UniqueId: string;
    procedure set_UniqueId(value: string);
    function get_Workbook: DNWorkbook;
    function get_Cells: DNCells;
    function get_QueryTables: DNQueryTableCollection;
    function get_PivotTables: DNPivotTableCollection;
    function get_Type: DNSheetType;
    procedure set_Type(value: DNSheetType);
    function get_Name: string;
    procedure set_Name(value: string);
    function get_ShowFormulas: Boolean;
    procedure set_ShowFormulas(value: Boolean);
    function get_IsGridlinesVisible: Boolean;
    procedure set_IsGridlinesVisible(value: Boolean);
    function get_IsRowColumnHeadersVisible: Boolean;
    procedure set_IsRowColumnHeadersVisible(value: Boolean);
    function get_PaneState: DNPaneStateType;
    function get_DisplayZeros: Boolean;
    procedure set_DisplayZeros(value: Boolean);
    function get_DisplayRightToLeft: Boolean;
    procedure set_DisplayRightToLeft(value: Boolean);
    function get_IsOutlineShown: Boolean;
    procedure set_IsOutlineShown(value: Boolean);
    function get_IsSelected: Boolean;
    procedure set_IsSelected(value: Boolean);
    function get_ListObjects: DNListObjectCollection;
    function get_TabId: Int32;
    procedure set_TabId(value: Int32);
    function get_HorizontalPageBreaks: DNHorizontalPageBreakCollection;
    function get_VerticalPageBreaks: DNVerticalPageBreakCollection;
    function get_Hyperlinks: DNHyperlinkCollection;
    function get_PageSetup: DNPageSetup;
    function get_AutoFilter: DNAutoFilter;
    function get_HasAutofilter: Boolean;
    function get_TransitionEvaluation: Boolean;
    procedure set_TransitionEvaluation(value: Boolean);
    function get_TransitionEntry: Boolean;
    procedure set_TransitionEntry(value: Boolean);
    function get_VisibilityType: DNVisibilityType;
    procedure set_VisibilityType(value: DNVisibilityType);
    function get_IsVisible: Boolean;
    procedure set_IsVisible(value: Boolean);
    function get_SparklineGroupCollection: DNSparklineGroupCollection;
    function get_Charts: DNChartCollection;
    function get_Comments: DNCommentCollection;
    function get_Pictures: DNPictureCollection;
    function get_TextBoxes: DNTextBoxCollection;
    function get_CheckBoxes: DNCheckBoxCollection;
    function get_OleObjects: DNOleObjectCollection;
    function get_Shapes: DNShapeCollection;
    function get_Slicers: DNSlicerCollection;
    function get_Index: Int32;
    function get_IsProtected: Boolean;
    function get_Validations: DNValidationCollection;
    function get_AllowEditRanges: DNProtectedRangeCollection;
    function get_ErrorCheckOptions: DNErrorCheckOptionCollection;
    function get_Outline: DNOutline;
    function get_FirstVisibleRow: Int32;
    procedure set_FirstVisibleRow(value: Int32);
    function get_FirstVisibleColumn: Int32;
    procedure set_FirstVisibleColumn(value: Int32);
    function get_Zoom: Int32;
    procedure set_Zoom(value: Int32);
    function get_ViewType: DNViewType;
    procedure set_ViewType(value: DNViewType);
    function get_IsPageBreakPreview: Boolean;
    procedure set_IsPageBreakPreview(value: Boolean);
    function get_IsRulerVisible: Boolean;
    procedure set_IsRulerVisible(value: Boolean);
    function get_TabColor: DDN.System.Drawing.DNColor;
    procedure set_TabColor(value: DDN.System.Drawing.DNColor);
    function get_CodeName: string;
    procedure set_CodeName(value: string);
    function get_BackgroundImage: TArray<Byte>;
    procedure set_BackgroundImage(value: TArray<Byte>);
    function get_ConditionalFormattings: DNConditionalFormattingCollection;
    function get_ActiveCell: string;
    procedure set_ActiveCell(value: string);
    function get_CustomProperties: DNCustomPropertyCollection;
    function get_SmartTagSetting: DNSmartTagSetting;
    function get_Scenarios: DNScenarioCollection;
    function get_CellWatches: DNCellWatchCollection;

  { methods } 

    function Replace(oldString: string; newString: string): Int32;
    function GetSelectedRanges: DDN.mscorlib.DNArrayList;
    procedure SetBackground(pictureData: TArray<Byte>);
    function GetPrintingPageBreaks(options: DNImageOrPrintOptions): TArray<DNCellArea>;
    function ToString: string;
    procedure StartAccessCache(opts: DNAccessCacheOptions);
    procedure CloseAccessCache(opts: DNAccessCacheOptions);
    function CalculateFormula(formula: string): DDN.mscorlib.DNObject; overload;
    function CalculateFormula(formula: string; opts: DNCalculationOptions): DDN.mscorlib.DNObject; overload;
    procedure CalculateFormula(recursive: Boolean; ignoreError: Boolean; customFunction: DNICustomFunction); overload;
    procedure CalculateFormula(options: DNCalculationOptions; recursive: Boolean); overload;
    function XmlMapQuery(path: string; xmlMap: DNXmlMap): DDN.mscorlib.DNArrayList;
    procedure RefreshPivotTables;
    procedure Dispose;
    function GetPanes: DNPaneCollection;
    procedure FreezePanes(row: Int32; column: Int32; freezedRows: Int32; freezedColumns: Int32); overload;
    function GetFreezedPanes(out row: Int32; out column: Int32; out freezedRows: Int32; out freezedColumns: Int32): Boolean;
    procedure Split;
    procedure FreezePanes(cellName: string; freezedRows: Int32; freezedColumns: Int32); overload;
    procedure UnFreezePanes;
    procedure RemoveSplit;
    procedure AddPageBreaks(cellName: string);
    procedure Copy(sourceSheet: DNWorksheet); overload;
    procedure Copy(sourceSheet: DNWorksheet; copyOptions: DNCopyOptions); overload;
    procedure AutoFitColumn(columnIndex: Int32; firstRow: Int32; lastRow: Int32); overload;
    procedure AutoFitColumns; overload;
    procedure AutoFitColumns(options: DNAutoFitterOptions); overload;
    procedure AutoFitColumn(columnIndex: Int32); overload;
    procedure AutoFitColumns(firstColumn: Int32; lastColumn: Int32); overload;
    procedure AutoFitColumns(firstColumn: Int32; lastColumn: Int32; options: DNAutoFitterOptions); overload;
    procedure AutoFitColumns(firstRow: Int32; firstColumn: Int32; lastRow: Int32; lastColumn: Int32); overload;
    procedure AutoFitColumns(firstRow: Int32; firstColumn: Int32; lastRow: Int32; lastColumn: Int32; options: DNAutoFitterOptions); overload;
    procedure AutoFitRow(rowIndex: Int32; firstColumn: Int32; lastColumn: Int32); overload;
    procedure AutoFitRow(rowIndex: Int32; firstColumn: Int32; lastColumn: Int32; options: DNAutoFitterOptions); overload;
    procedure AutoFitRows; overload;
    procedure AutoFitRows(onlyAuto: Boolean); overload;
    procedure AutoFitRows(options: DNAutoFitterOptions); overload;
    procedure AutoFitRows(startRow: Int32; endRow: Int32); overload;
    procedure AutoFitRows(startRow: Int32; endRow: Int32; options: DNAutoFitterOptions); overload;
    procedure AutoFitRow(startRow: Int32; endRow: Int32; startColumn: Int32; endColumn: Int32); overload;
    procedure AutoFitRow(rowIndex: Int32); overload;
    procedure AdvancedFilter(isFilter: Boolean; listRange: string; criteriaRange: string; copyTo: string; uniqueRecordOnly: Boolean);
    procedure RemoveAutoFilter;
    procedure SetVisible(isVisible: Boolean; ignoreError: Boolean);
    procedure SelectRange(startRow: Int32; startColumn: Int32; totalRows: Int32; totalColumns: Int32; removeOthers: Boolean);
    procedure RemoveAllDrawingObjects;
    procedure ClearComments;
    procedure Protect(&type: DNProtectionType); overload;
    procedure Protect(&type: DNProtectionType; password: string; oldPassword: string); overload;
    procedure Unprotect; overload;
    procedure Unprotect(password: string); overload;
    procedure MoveTo(index: Int32);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    property Protection: DNProtection read get_Protection;
    property UniqueId: string read get_UniqueId write set_UniqueId;
    property Workbook: DNWorkbook read get_Workbook;
    property Cells: DNCells read get_Cells;
    property QueryTables: DNQueryTableCollection read get_QueryTables;
    property PivotTables: DNPivotTableCollection read get_PivotTables;
    property &Type: DNSheetType read get_Type write set_Type;
    property Name: string read get_Name write set_Name;
    property ShowFormulas: Boolean read get_ShowFormulas write set_ShowFormulas;
    property IsGridlinesVisible: Boolean read get_IsGridlinesVisible write set_IsGridlinesVisible;
    property IsRowColumnHeadersVisible: Boolean read get_IsRowColumnHeadersVisible write set_IsRowColumnHeadersVisible;
    property PaneState: DNPaneStateType read get_PaneState;
    property DisplayZeros: Boolean read get_DisplayZeros write set_DisplayZeros;
    property DisplayRightToLeft: Boolean read get_DisplayRightToLeft write set_DisplayRightToLeft;
    property IsOutlineShown: Boolean read get_IsOutlineShown write set_IsOutlineShown;
    property IsSelected: Boolean read get_IsSelected write set_IsSelected;
    property ListObjects: DNListObjectCollection read get_ListObjects;
    property TabId: Int32 read get_TabId write set_TabId;
    property HorizontalPageBreaks: DNHorizontalPageBreakCollection read get_HorizontalPageBreaks;
    property VerticalPageBreaks: DNVerticalPageBreakCollection read get_VerticalPageBreaks;
    property Hyperlinks: DNHyperlinkCollection read get_Hyperlinks;
    property PageSetup: DNPageSetup read get_PageSetup;
    property AutoFilter: DNAutoFilter read get_AutoFilter;
    property HasAutofilter: Boolean read get_HasAutofilter;
    property TransitionEvaluation: Boolean read get_TransitionEvaluation write set_TransitionEvaluation;
    property TransitionEntry: Boolean read get_TransitionEntry write set_TransitionEntry;
    property VisibilityType: DNVisibilityType read get_VisibilityType write set_VisibilityType;
    property IsVisible: Boolean read get_IsVisible write set_IsVisible;
    property SparklineGroupCollection: DNSparklineGroupCollection read get_SparklineGroupCollection;
    property Charts: DNChartCollection read get_Charts;
    property Comments: DNCommentCollection read get_Comments;
    property Pictures: DNPictureCollection read get_Pictures;
    property TextBoxes: DNTextBoxCollection read get_TextBoxes;
    property CheckBoxes: DNCheckBoxCollection read get_CheckBoxes;
    property OleObjects: DNOleObjectCollection read get_OleObjects;
    property Shapes: DNShapeCollection read get_Shapes;
    property Slicers: DNSlicerCollection read get_Slicers;
    property Index: Int32 read get_Index;
    property IsProtected: Boolean read get_IsProtected;
    property Validations: DNValidationCollection read get_Validations;
    property AllowEditRanges: DNProtectedRangeCollection read get_AllowEditRanges;
    property ErrorCheckOptions: DNErrorCheckOptionCollection read get_ErrorCheckOptions;
    property Outline: DNOutline read get_Outline;
    property FirstVisibleRow: Int32 read get_FirstVisibleRow write set_FirstVisibleRow;
    property FirstVisibleColumn: Int32 read get_FirstVisibleColumn write set_FirstVisibleColumn;
    property Zoom: Int32 read get_Zoom write set_Zoom;
    property ViewType: DNViewType read get_ViewType write set_ViewType;
    property IsPageBreakPreview: Boolean read get_IsPageBreakPreview write set_IsPageBreakPreview;
    property IsRulerVisible: Boolean read get_IsRulerVisible write set_IsRulerVisible;
    property TabColor: DDN.System.Drawing.DNColor read get_TabColor write set_TabColor;
    property CodeName: string read get_CodeName write set_CodeName;
    property BackgroundImage: TArray<Byte> read get_BackgroundImage write set_BackgroundImage;
    property ConditionalFormattings: DNConditionalFormattingCollection read get_ConditionalFormattings;
    property ActiveCell: string read get_ActiveCell write set_ActiveCell;
    property CustomProperties: DNCustomPropertyCollection read get_CustomProperties;
    property SmartTagSetting: DNSmartTagSetting read get_SmartTagSetting;
    property Scenarios: DNScenarioCollection read get_Scenarios;
    property CellWatches: DNCellWatchCollection read get_CellWatches;
  end;

  TDNWorksheet = class(TDNGenericImport<DNWorksheetClass, DNWorksheet>) end;

  //-------------namespace: Aspose.Cells----------------
  DNWriteProtectionClass = interface(DDN.mscorlib.DNObjectClass)
  ['{79975B1B-133A-5716-9AB0-0AE0866E09CC}']
  { static getter & setter } 

    procedure set_Password(value: string);

  { constructors } 

    {class} function init: DNWriteProtection;

  { static propertys } 

    {class} property Password: string write set_Password;
  end;

  [DNTypeName('Aspose.Cells.WriteProtection')]
  DNWriteProtection = interface(DDN.mscorlib.DNObject)
  ['{208E31F6-2D20-3C01-B0AD-084D988C6D29}']
  { getters & setters } 

    function get_Author: string;
    procedure set_Author(value: string);
    function get_RecommendReadOnly: Boolean;
    procedure set_RecommendReadOnly(value: Boolean);
    function get_IsWriteProtected: Boolean;
    procedure set_Password(value: string);

  { methods } 

    function ValidatePassword(password: string): Boolean;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Author: string read get_Author write set_Author;
    property RecommendReadOnly: Boolean read get_RecommendReadOnly write set_RecommendReadOnly;
    property IsWriteProtected: Boolean read get_IsWriteProtected;
    property Password: string write set_Password;
  end;

  TDNWriteProtection = class(TDNGenericImport<DNWriteProtectionClass, DNWriteProtection>) end;

  //-------------namespace: Aspose.Cells----------------
  DNXmlColumnPropertyClass = interface(DDN.mscorlib.DNObjectClass)
  ['{20367B91-4E89-500C-9B87-752306DA7EB6}']
  { constructors } 

    {class} function init: DNXmlColumnProperty;

  end;

  [DNTypeName('Aspose.Cells.XmlColumnProperty')]
  DNXmlColumnProperty = interface(DDN.mscorlib.DNObject)
  ['{F92A5C93-E079-3344-8737-E965DF892718}']
  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNXmlColumnProperty = class(TDNGenericImport<DNXmlColumnPropertyClass, DNXmlColumnProperty>) end;

  //-------------namespace: Aspose.Cells----------------
  DNXmlDataBindingClass = interface(DDN.mscorlib.DNObjectClass)
  ['{2FEB0AC4-1EB5-5FEE-AF4B-79BEB99B4055}']
  end;

  [DNTypeName('Aspose.Cells.XmlDataBinding')]
  DNXmlDataBinding = interface(DDN.mscorlib.DNObject)
  ['{A05C0C62-F0D5-3095-8E89-DEDB4DB877E7}']
  { getters & setters } 

    function get_Url: string;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Url: string read get_Url;
  end;

  TDNXmlDataBinding = class(TDNGenericImport<DNXmlDataBindingClass, DNXmlDataBinding>) end;

  //-------------namespace: Aspose.Cells----------------
  DNXmlMapClass = interface(DDN.mscorlib.DNObjectClass)
  ['{3DC81772-7F6F-5BDE-B632-3C37DD91F55B}']
  end;

  [DNTypeName('Aspose.Cells.XmlMap')]
  DNXmlMap = interface(DDN.mscorlib.DNObject)
  ['{C66BBD3F-3F74-3297-B582-C4F79AB235C4}']
  { getters & setters } 

    function get_Name: string;
    procedure set_Name(value: string);
    function get_RootElementName: string;
    function get_DataBinding: DNXmlDataBinding;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Name: string read get_Name write set_Name;
    property RootElementName: string read get_RootElementName;
    property DataBinding: DNXmlDataBinding read get_DataBinding;
  end;

  TDNXmlMap = class(TDNGenericImport<DNXmlMapClass, DNXmlMap>) end;

  //-------------namespace: Aspose.Cells.Markup----------------
  DNSmartTagSettingClass = interface(DDN.mscorlib.DNCollectionBaseClass)
  ['{33CEB608-71BD-51EF-B305-1B69940B3DC2}']
  end;

  [DNTypeName('Aspose.Cells.Markup.SmartTagSetting')]
  DNSmartTagSetting = interface(DDN.mscorlib.DNCollectionBase)
  ['{89DA5177-863E-3884-9CC2-F85FA627C1C9}']
  { getters & setters } 

    function get_Item(index: Int32): DNSmartTagCollection; overload;
    function get_Item(row: Int32; column: Int32): DNSmartTagCollection; overload;
    function get_Item(cellName: string): DNSmartTagCollection; overload;
    function get_Capacity: Int32;
    procedure set_Capacity(value: Int32);
    function get_Count: Int32;

  { methods } 

    function Add(row: Int32; column: Int32): Int32; overload;
    function Add(cellName: string): Int32; overload;
    procedure RemoveAt(index: Int32);
    function GetEnumerator: DDN.mscorlib.DNIEnumerator;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Item[index: Int32]: DNSmartTagCollection read get_Item; default;
    property Item[row: Int32; column: Int32]: DNSmartTagCollection read get_Item; default;
    property Item[cellName: string]: DNSmartTagCollection read get_Item; default;
    property Capacity: Int32 read get_Capacity write set_Capacity;
    property Count: Int32 read get_Count;
  end;

  TDNSmartTagSetting = class(TDNGenericImport<DNSmartTagSettingClass, DNSmartTagSetting>) end;

  //-------------namespace: Aspose.Cells----------------
  DNMultipleFilterCollectionClass = interface(DDN.mscorlib.DNCollectionBaseClass)
  ['{F9E237A2-EF0B-57CF-B2EA-7241FB717A2A}']
  { constructors } 

    {class} function init: DNMultipleFilterCollection;

  end;

  [DNTypeName('Aspose.Cells.MultipleFilterCollection')]
  DNMultipleFilterCollection = interface(DDN.mscorlib.DNCollectionBase)
  ['{489FF3F0-13E8-31CC-855A-EC40A21E87DF}']
  { getters & setters } 

    function get_MatchBlank: Boolean;
    procedure set_MatchBlank(value: Boolean);
    function get_Item(index: Int32): DDN.mscorlib.DNObject;
    function get_Capacity: Int32;
    procedure set_Capacity(value: Int32);
    function get_Count: Int32;

  { methods } 

    procedure Add(filter: string);
    procedure RemoveAt(index: Int32);
    function GetEnumerator: DDN.mscorlib.DNIEnumerator;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property MatchBlank: Boolean read get_MatchBlank write set_MatchBlank;
    property Item[index: Int32]: DDN.mscorlib.DNObject read get_Item; default;
    property Capacity: Int32 read get_Capacity write set_Capacity;
    property Count: Int32 read get_Count;
  end;

  TDNMultipleFilterCollection = class(TDNGenericImport<DNMultipleFilterCollectionClass, DNMultipleFilterCollection>) end;

  //-------------namespace: Aspose.Cells----------------
  DNCellsExceptionClass = interface(DDN.mscorlib.DNApplicationExceptionClass)
  ['{A3E0FBC4-C5B0-542A-9CD5-2F00098305EE}']
  end;

  [DNTypeName('Aspose.Cells.CellsException')]
  DNCellsException = interface(DDN.mscorlib.DNApplicationException)
  ['{A6840196-2E9B-33B5-9A56-431BE6082E2D}']
  { getters & setters } 

    function get_Code: DNExceptionType;
    function get_Message: string;
    function get_Data: DDN.mscorlib.DNIDictionary;
    function get_InnerException: DDN.mscorlib.DNException;
    function get_TargetSite: DDN.mscorlib.DNMethodBase;
    function get_StackTrace: string;
    function get_HelpLink: string;
    procedure set_HelpLink(value: string);
    function get_Source: string;
    procedure set_Source(value: string);
    function get_HResult: Int32;

  { methods } 

    function GetBaseException: DDN.mscorlib.DNException;
    function ToString: string;
    procedure GetObjectData(info: DDN.mscorlib.DNSerializationInfo; context: DDN.mscorlib.DNStreamingContext);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    property Code: DNExceptionType read get_Code;
    property Message: string read get_Message;
    property Data: DDN.mscorlib.DNIDictionary read get_Data;
    property InnerException: DDN.mscorlib.DNException read get_InnerException;
    property TargetSite: DDN.mscorlib.DNMethodBase read get_TargetSite;
    property StackTrace: string read get_StackTrace;
    property HelpLink: string read get_HelpLink write set_HelpLink;
    property Source: string read get_Source write set_Source;
    property HResult: Int32 read get_HResult;
  end;

  TDNCellsException = class(TDNGenericImport<DNCellsExceptionClass, DNCellsException>) end;

  //-------------namespace: Aspose.Cells----------------
  DNCellAreaClass = interface(DDN.mscorlib.DNValueTypeClass)
  ['{FEB5B743-082C-514D-9B63-DA74EA452B21}']
  { static methods } 

    {class} function CreateCellArea(startRow: Int32; startColumn: Int32; endRow: Int32; endColumn: Int32): DNCellArea; overload;
    {class} function CreateCellArea(startCellName: string; endCellName: string): DNCellArea; overload;

  end;

  [DNTypeName('Aspose.Cells.CellArea')]
  DNCellArea = interface(DDN.mscorlib.DNValueType)
  ['{A41D0974-EEB5-39EC-A8F7-2D7384BAC0D1}']
  { fields getter & setter } 

   function __fakeFieldGet_StartRow: Int32;
   procedure __fakeFieldSet_StartRow(value: Int32);
   function __fakeFieldGet_EndRow: Int32;
   procedure __fakeFieldSet_EndRow(value: Int32);
   function __fakeFieldGet_StartColumn: Int32;
   procedure __fakeFieldSet_StartColumn(value: Int32);
   function __fakeFieldGet_EndColumn: Int32;
   procedure __fakeFieldSet_EndColumn(value: Int32);

  { fields } 

   property StartRow: Int32 read __fakeFieldGet_StartRow write __fakeFieldSet_StartRow;
   property EndRow: Int32 read __fakeFieldGet_EndRow write __fakeFieldSet_EndRow;
   property StartColumn: Int32 read __fakeFieldGet_StartColumn write __fakeFieldSet_StartColumn;
   property EndColumn: Int32 read __fakeFieldGet_EndColumn write __fakeFieldSet_EndColumn;

  { methods } 

    function CompareTo(obj: DDN.mscorlib.DNObject): Int32;
    function ToString: string;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  end;

  TDNCellArea = class(TDNGenericImport<DNCellAreaClass, DNCellArea>) end;


implementation

end.
