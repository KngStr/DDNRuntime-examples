//----------------------------------------------------------------------------
//  System.Configuration.dll: System.Configuration, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a
//  System.dll: System, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089
//----------------------------------------------------------------------------
//  The code is automatically generated by the GenCodeNET tool.
//----------------------------------------------------------------------------
//  .NET Framework: 4.0
//----------------------------------------------------------------------------
//  UnitName: DDN.System.Configuration
//  Author: ying32
//----------------------------------------------------------------------------

unit DDN.System.Configuration;

{$IFDEF FPC}
  {$mode delphi}//{$H+}
  {$modeswitch advancedrecords}
  {$modeswitch prefixedattributes} // Custom attributes featureï¼Œfpc3.2.2+
{$ENDIF}

interface

uses
  DDN.Runtime,
  DDN.mscorlib,
  DDN.System,
  DDN.System.Xml;

type

{ enums }

  //-------------namespace: System.Configuration----------------
  ///<summary>Specifies the locations within the configuration-file hierarchy that can set or override the properties contained within a <see cref="T:System.Configuration.ConfigurationSection" />
  ///  object.</summary>
  [DNTypeName('System.Configuration.ConfigurationAllowDefinition')]
  DNConfigurationAllowDefinition = type Integer;
  DNConfigurationAllowDefinitionHelper = record helper for DNConfigurationAllowDefinition
  public const
    ///<summary>The <see cref="T:System.Configuration.ConfigurationSection" />
    ///  can be defined only in the Machine.config file.</summary>
    MachineOnly = 0;
    ///<summary>The <see cref="T:System.Configuration.ConfigurationSection" />
    ///  can be defined in either the Machine.config file or the machine-level Web.config file found in the same directory as Machine.config, but not in application Web.config files.</summary>
    MachineToWebRoot = 100;
    ///<summary>The <see cref="T:System.Configuration.ConfigurationSection" />
    ///  can be defined in either the Machine.config file, the machine-level Web.config file found in the same directory as Machine.config, or the top-level application Web.config file found in the virtual-directory root, but not in subdirectories of a virtual root.</summary>
    MachineToApplication = 200;
    ///<summary>The <see cref="T:System.Configuration.ConfigurationSection" />
    ///  can be defined anywhere.</summary>
    Everywhere = 300;
  end;


  //-------------namespace: System.Configuration----------------
  ///<summary>Specifies the locations within the configuration-file hierarchy that can set or override the properties contained within a <see cref="T:System.Configuration.ConfigurationSection" />
  ///  object.</summary>
  [DNTypeName('System.Configuration.ConfigurationAllowExeDefinition')]
  DNConfigurationAllowExeDefinition = type Integer;
  DNConfigurationAllowExeDefinitionHelper = record helper for DNConfigurationAllowExeDefinition
  public const
    ///<summary>The <see cref="T:System.Configuration.ConfigurationSection" />
    ///  can be defined only in the Machine.config file. </summary>
    MachineOnly = 0;
    ///<summary>The <see cref="T:System.Configuration.ConfigurationSection" />
    ///  can be defined either in the Machine.config file or in the Exe.config file in the client application directory. This is the default value.</summary>
    MachineToApplication = 100;
    ///<summary>The <see cref="T:System.Configuration.ConfigurationSection" />
    ///  can be defined in the Machine.config file, in the Exe.config file in the client application directory, or in the User.config file in the roaming user directory. </summary>
    MachineToRoamingUser = 200;
    ///<summary>The <see cref="T:System.Configuration.ConfigurationSection" />
    ///  can be defined in the Machine.config file, in the Exe.config file in the client application directory, in the User.config file in the roaming user directory, or in the User.config file in the local user directory.</summary>
    MachineToLocalUser = 300;
  end;


  //-------------namespace: System.Configuration----------------
  ///<summary>Specifies the type of a <see cref="T:System.Configuration.ConfigurationElementCollectionType" />
  ///  object.</summary>
  [DNTypeName('System.Configuration.ConfigurationElementCollectionType')]
  DNConfigurationElementCollectionType = type Integer;
  DNConfigurationElementCollectionTypeHelper = record helper for DNConfigurationElementCollectionType
  public const
    ///<summary>Collections of this type contain elements that apply to the level at which they are specified, and to all child levels. A child level cannot modify the properties specified by a parent element of this type.</summary>
    BasicMap = 0;
    ///<summary>The default type of <see cref="T:System.Configuration.ConfigurationElementCollection" />
    ///  . Collections of this type contain elements that can be merged across a hierarchy of configuration files. At any particular level within such a hierarchy, <see langword="add" />
    ///  , <see langword="remove" />
    ///  , and <see langword="clear" />
    ///  directives are used to modify any inherited properties and specify new ones.</summary>
    AddRemoveClearMap = 1;
    ///<summary>Same as <see cref="F:System.Configuration.ConfigurationElementCollectionType.BasicMap" />
    ///  , except that this type causes the <see cref="T:System.Configuration.ConfigurationElementCollection" />
    ///  object to sort its contents such that inherited elements are listed last.</summary>
    BasicMapAlternate = 2;
    ///<summary>Same as <see cref="F:System.Configuration.ConfigurationElementCollectionType.AddRemoveClearMap" />
    ///  , except that this type causes the <see cref="T:System.Configuration.ConfigurationElementCollection" />
    ///  object to sort its contents such that inherited elements are listed last.</summary>
    AddRemoveClearMapAlternate = 3;
  end;


  //-------------namespace: System.Configuration----------------
  ///<summary>Specifies the options to apply to a property.</summary>
  [DNTypeName('System.Configuration.ConfigurationPropertyOptions')]
  DNConfigurationPropertyOptions = type Integer;
  DNConfigurationPropertyOptionsHelper = record helper for DNConfigurationPropertyOptions
  public const
    ///<summary>Indicates that no option applies to the property.</summary>
    None = 0;
    ///<summary>Indicates that the property is a default collection. </summary>
    IsDefaultCollection = 1;
    ///<summary>Indicates that the property is required. </summary>
    IsRequired = 2;
    ///<summary>Indicates that the property is a collection key.</summary>
    IsKey = 4;
    ///<summary>Indicates whether the type name for the configuration property requires transformation when it is serialized for an earlier version of the .NET Framework.</summary>
    IsTypeStringTransformationRequired = 8;
    ///<summary>Indicates whether the assembly name for the configuration property requires transformation when it is serialized for an earlier version of the .NET Framework.</summary>
    IsAssemblyStringTransformationRequired = 16;
    ///<summary>Indicates whether the configuration property's parent configuration section should be queried at serialization time to determine whether the configuration property should be serialized into XML.</summary>
    IsVersionCheckRequired = 32;
  end;


  //-------------namespace: System.Configuration----------------
  ///<summary>Determines which properties are written out to a configuration file.</summary>
  [DNTypeName('System.Configuration.ConfigurationSaveMode')]
  DNConfigurationSaveMode = type Integer;
  DNConfigurationSaveModeHelper = record helper for DNConfigurationSaveMode
  public const
    ///<summary>Causes only modified properties to be written to the configuration file, even when the value is the same as the inherited value.</summary>
    Modified = 0;
    ///<summary>Causes only properties that differ from inherited values to be written to the configuration file.</summary>
    Minimal = 1;
    ///<summary>Causes all properties to be written to the configuration file. This is useful mostly for creating information configuration files or moving configuration values from one machine to another.</summary>
    Full = 2;
  end;


  //-------------namespace: System.Configuration----------------
  ///<summary>Used to specify which configuration file is to be represented by the Configuration object.</summary>
  [DNTypeName('System.Configuration.ConfigurationUserLevel')]
  DNConfigurationUserLevel = type Integer;
  DNConfigurationUserLevelHelper = record helper for DNConfigurationUserLevel
  public const
    ///<summary>Get the <see cref="T:System.Configuration.Configuration" />
    ///  that applies to all users.</summary>
    None = 0;
    ///<summary>Get the roaming <see cref="T:System.Configuration.Configuration" />
    ///  that applies to the current user.</summary>
    PerUserRoaming = 10;
    ///<summary>Get the local <see cref="T:System.Configuration.Configuration" />
    ///  that applies to the current user.</summary>
    PerUserRoamingAndLocal = 20;
  end;


  //-------------namespace: System.Configuration----------------
  ///<summary>Specifies the override behavior of a configuration element for configuration elements in child directories.</summary>
  [DNTypeName('System.Configuration.OverrideMode')]
  DNOverrideMode = type Integer;
  DNOverrideModeHelper = record helper for DNOverrideMode
  public const
    ///<summary>The configuration setting of the element or group will be overridden by configuration settings that are in child directories if explicitly allowed by a parent element of the current configuration element or group. Permission to override is specified by using the <see langword="OverrideMode" />
    ///  attribute.</summary>
    Inherit = 0;
    ///<summary>The configuration setting of the element or group can be overridden by configuration settings that are in child directories.</summary>
    Allow = 1;
    ///<summary>The configuration setting of the element or group cannot be overridden by configuration settings that are in child directories.</summary>
    Deny = 2;
  end;


  //-------------namespace: System.Configuration----------------
  ///<summary>Specifies the level in the configuration hierarchy where a configuration property value originated.</summary>
  [DNTypeName('System.Configuration.PropertyValueOrigin')]
  DNPropertyValueOrigin = type Integer;
  DNPropertyValueOriginHelper = record helper for DNPropertyValueOrigin
  public const
    ///<summary>The configuration property value originates from the <see cref="P:System.Configuration.ConfigurationProperty.DefaultValue" />
    ///  property.</summary>
    Default_ = 0;
    ///<summary>The configuration property value is inherited from a parent level in the configuration.</summary>
    Inherited_ = 1;
    ///<summary>The configuration property value is defined at the current level of the hierarchy.</summary>
    SetHere = 2;
  end;


  //-------------namespace: System.Configuration----------------
  ///<summary>Provides values to indicate which services should be made available to application settings.</summary>
  [DNTypeName('System.Configuration.SettingsManageability')]
  DNSettingsManageability = type Integer;
  DNSettingsManageabilityHelper = record helper for DNSettingsManageability
  public const
    ///<summary>Enables application settings to be stored in roaming user profiles. For more information about roaming user profiles, see Isolated Storage and Roaming.</summary>
    Roaming = 0;
  end;


  //-------------namespace: System.Configuration----------------
  ///<summary>Determines the serialization scheme used to store application settings.</summary>
  [DNTypeName('System.Configuration.SettingsSerializeAs')]
  DNSettingsSerializeAs = type Integer;
  DNSettingsSerializeAsHelper = record helper for DNSettingsSerializeAs
  public const
    ///<summary>The settings property is serialized as plain text.</summary>
    String_ = 0;
    ///<summary>The settings property is serialized as XML using XML serialization.</summary>
    Xml = 1;
    ///<summary>The settings property is serialized using binary object serialization.</summary>
    Binary = 2;
    ///<summary>The settings provider has implicit knowledge of the property or its type and picks an appropriate serialization mechanism. Often used for custom serialization.</summary>
    ProviderSpecific = 3;
  end;


  //-------------namespace: System.Configuration----------------
  ///<summary>Specifies the special setting category of a application settings property.</summary>
  [DNTypeName('System.Configuration.SpecialSetting')]
  DNSpecialSetting = type Integer;
  DNSpecialSettingHelper = record helper for DNSpecialSetting
  public const
    ///<summary>The configuration property represents a connection string, typically for a data store or network resource. </summary>
    ConnectionString = 0;
    ///<summary>The configuration property represents a Uniform Resource Locator (URL) to a Web service.</summary>
    WebServiceUrl = 1;
  end;




type


{ declares }

  DNIApplicationSettingsProvider = interface; // type: System.Configuration.IApplicationSettingsProvider, namespace: System.Configuration
  DNIConfigurationSectionHandler = interface; // type: System.Configuration.IConfigurationSectionHandler, namespace: System.Configuration
  DNIConfigurationSystem = interface; // type: System.Configuration.IConfigurationSystem, namespace: System.Configuration
  DNIConfigErrorInfo = interface; // type: System.Configuration.Internal.IConfigErrorInfo, namespace: System.Configuration.Internal
  DNIConfigSystem = interface; // type: System.Configuration.Internal.IConfigSystem, namespace: System.Configuration.Internal
  DNIConfigurationManagerHelper = interface; // type: System.Configuration.Internal.IConfigurationManagerHelper, namespace: System.Configuration.Internal
  DNIConfigurationManagerInternal = interface; // type: System.Configuration.Internal.IConfigurationManagerInternal, namespace: System.Configuration.Internal
  DNIInternalConfigClientHost = interface; // type: System.Configuration.Internal.IInternalConfigClientHost, namespace: System.Configuration.Internal
  DNIInternalConfigConfigurationFactory = interface; // type: System.Configuration.Internal.IInternalConfigConfigurationFactory, namespace: System.Configuration.Internal
  DNIInternalConfigHost = interface; // type: System.Configuration.Internal.IInternalConfigHost, namespace: System.Configuration.Internal
  DNIInternalConfigRecord = interface; // type: System.Configuration.Internal.IInternalConfigRecord, namespace: System.Configuration.Internal
  DNIInternalConfigRoot = interface; // type: System.Configuration.Internal.IInternalConfigRoot, namespace: System.Configuration.Internal
  DNIInternalConfigSettingsFactory = interface; // type: System.Configuration.Internal.IInternalConfigSettingsFactory, namespace: System.Configuration.Internal
  DNIInternalConfigSystem = interface; // type: System.Configuration.Internal.IInternalConfigSystem, namespace: System.Configuration.Internal
  DNIInternalConfigurationBuilderHost = interface; // type: System.Configuration.Internal.IInternalConfigurationBuilderHost, namespace: System.Configuration.Internal
  DNIPersistComponentSettings = interface; // type: System.Configuration.IPersistComponentSettings, namespace: System.Configuration
  DNISettingsProviderService = interface; // type: System.Configuration.ISettingsProviderService, namespace: System.Configuration
  DNConfigurationCollectionAttribute = interface; // type: System.Configuration.ConfigurationCollectionAttribute, namespace: System.Configuration
  DNConfigurationPropertyAttribute = interface; // type: System.Configuration.ConfigurationPropertyAttribute, namespace: System.Configuration
  DNConfigurationValidatorAttribute = interface; // type: System.Configuration.ConfigurationValidatorAttribute, namespace: System.Configuration
  DNCallbackValidatorAttribute = interface; // type: System.Configuration.CallbackValidatorAttribute, namespace: System.Configuration
  DNIntegerValidatorAttribute = interface; // type: System.Configuration.IntegerValidatorAttribute, namespace: System.Configuration
  DNLongValidatorAttribute = interface; // type: System.Configuration.LongValidatorAttribute, namespace: System.Configuration
  DNPositiveTimeSpanValidatorAttribute = interface; // type: System.Configuration.PositiveTimeSpanValidatorAttribute, namespace: System.Configuration
  DNRegexStringValidatorAttribute = interface; // type: System.Configuration.RegexStringValidatorAttribute, namespace: System.Configuration
  DNStringValidatorAttribute = interface; // type: System.Configuration.StringValidatorAttribute, namespace: System.Configuration
  DNSubclassTypeValidatorAttribute = interface; // type: System.Configuration.SubclassTypeValidatorAttribute, namespace: System.Configuration
  DNTimeSpanValidatorAttribute = interface; // type: System.Configuration.TimeSpanValidatorAttribute, namespace: System.Configuration
  DNDefaultSettingValueAttribute = interface; // type: System.Configuration.DefaultSettingValueAttribute, namespace: System.Configuration
  DNNoSettingsVersionUpgradeAttribute = interface; // type: System.Configuration.NoSettingsVersionUpgradeAttribute, namespace: System.Configuration
  DNSettingAttribute = interface; // type: System.Configuration.SettingAttribute, namespace: System.Configuration
  DNApplicationScopedSettingAttribute = interface; // type: System.Configuration.ApplicationScopedSettingAttribute, namespace: System.Configuration
  DNUserScopedSettingAttribute = interface; // type: System.Configuration.UserScopedSettingAttribute, namespace: System.Configuration
  DNSettingsDescriptionAttribute = interface; // type: System.Configuration.SettingsDescriptionAttribute, namespace: System.Configuration
  DNSettingsGroupDescriptionAttribute = interface; // type: System.Configuration.SettingsGroupDescriptionAttribute, namespace: System.Configuration
  DNSettingsGroupNameAttribute = interface; // type: System.Configuration.SettingsGroupNameAttribute, namespace: System.Configuration
  DNSettingsManageabilityAttribute = interface; // type: System.Configuration.SettingsManageabilityAttribute, namespace: System.Configuration
  DNSettingsProviderAttribute = interface; // type: System.Configuration.SettingsProviderAttribute, namespace: System.Configuration
  DNSettingsSerializeAsAttribute = interface; // type: System.Configuration.SettingsSerializeAsAttribute, namespace: System.Configuration
  DNSpecialSettingAttribute = interface; // type: System.Configuration.SpecialSettingAttribute, namespace: System.Configuration
  DNConfigurationPermissionAttribute = interface; // type: System.Configuration.ConfigurationPermissionAttribute, namespace: System.Configuration
  DNSettingsAttributeDictionary = interface; // type: System.Configuration.SettingsAttributeDictionary, namespace: System.Configuration
  DNSettingsContext = interface; // type: System.Configuration.SettingsContext, namespace: System.Configuration
  DNConfigurationLocationCollection = interface; // type: System.Configuration.ConfigurationLocationCollection, namespace: System.Configuration
  DNConfigurationSectionCollection = interface; // type: System.Configuration.ConfigurationSectionCollection, namespace: System.Configuration
  DNConfigurationSectionGroupCollection = interface; // type: System.Configuration.ConfigurationSectionGroupCollection, namespace: System.Configuration
  DNPropertyInformationCollection = interface; // type: System.Configuration.PropertyInformationCollection, namespace: System.Configuration
  DNCommaDelimitedStringCollection = interface; // type: System.Configuration.CommaDelimitedStringCollection, namespace: System.Configuration
  DNConfigurationConverterBase = interface; // type: System.Configuration.ConfigurationConverterBase, namespace: System.Configuration
  DNCommaDelimitedStringCollectionConverter = interface; // type: System.Configuration.CommaDelimitedStringCollectionConverter, namespace: System.Configuration
  DNGenericEnumConverter = interface; // type: System.Configuration.GenericEnumConverter, namespace: System.Configuration
  DNInfiniteIntConverter = interface; // type: System.Configuration.InfiniteIntConverter, namespace: System.Configuration
  DNInfiniteTimeSpanConverter = interface; // type: System.Configuration.InfiniteTimeSpanConverter, namespace: System.Configuration
  DNTimeSpanMinutesConverter = interface; // type: System.Configuration.TimeSpanMinutesConverter, namespace: System.Configuration
  DNTimeSpanMinutesOrInfiniteConverter = interface; // type: System.Configuration.TimeSpanMinutesOrInfiniteConverter, namespace: System.Configuration
  DNTimeSpanSecondsConverter = interface; // type: System.Configuration.TimeSpanSecondsConverter, namespace: System.Configuration
  DNTimeSpanSecondsOrInfiniteConverter = interface; // type: System.Configuration.TimeSpanSecondsOrInfiniteConverter, namespace: System.Configuration
  DNTypeNameConverter = interface; // type: System.Configuration.TypeNameConverter, namespace: System.Configuration
  DNWhiteSpaceTrimStringConverter = interface; // type: System.Configuration.WhiteSpaceTrimStringConverter, namespace: System.Configuration
  DNAppSettingsReader = interface; // type: System.Configuration.AppSettingsReader, namespace: System.Configuration
  DNConfiguration = interface; // type: System.Configuration.Configuration, namespace: System.Configuration
  DNConfigurationElement = interface; // type: System.Configuration.ConfigurationElement, namespace: System.Configuration
  DNConfigurationBuilderSettings = interface; // type: System.Configuration.ConfigurationBuilderSettings, namespace: System.Configuration
  DNConfigurationElementCollection = interface; // type: System.Configuration.ConfigurationElementCollection, namespace: System.Configuration
  DNConnectionStringSettingsCollection = interface; // type: System.Configuration.ConnectionStringSettingsCollection, namespace: System.Configuration
  DNKeyValueConfigurationCollection = interface; // type: System.Configuration.KeyValueConfigurationCollection, namespace: System.Configuration
  DNNameValueConfigurationCollection = interface; // type: System.Configuration.NameValueConfigurationCollection, namespace: System.Configuration
  DNProviderSettingsCollection = interface; // type: System.Configuration.ProviderSettingsCollection, namespace: System.Configuration
  DNSchemeSettingElementCollection = interface; // type: System.Configuration.SchemeSettingElementCollection, namespace: System.Configuration
  DNSettingElementCollection = interface; // type: System.Configuration.SettingElementCollection, namespace: System.Configuration
  DNConfigurationSection = interface; // type: System.Configuration.ConfigurationSection, namespace: System.Configuration
  DNAppSettingsSection = interface; // type: System.Configuration.AppSettingsSection, namespace: System.Configuration
  DNClientSettingsSection = interface; // type: System.Configuration.ClientSettingsSection, namespace: System.Configuration
  DNConfigurationBuildersSection = interface; // type: System.Configuration.ConfigurationBuildersSection, namespace: System.Configuration
  DNConnectionStringsSection = interface; // type: System.Configuration.ConnectionStringsSection, namespace: System.Configuration
  DNDefaultSection = interface; // type: System.Configuration.DefaultSection, namespace: System.Configuration
  DNIgnoreSection = interface; // type: System.Configuration.IgnoreSection, namespace: System.Configuration
  DNProtectedConfigurationSection = interface; // type: System.Configuration.ProtectedConfigurationSection, namespace: System.Configuration
  DNUriSection = interface; // type: System.Configuration.UriSection, namespace: System.Configuration
  DNConnectionStringSettings = interface; // type: System.Configuration.ConnectionStringSettings, namespace: System.Configuration
  DNIdnElement = interface; // type: System.Configuration.IdnElement, namespace: System.Configuration
  DNIriParsingElement = interface; // type: System.Configuration.IriParsingElement, namespace: System.Configuration
  DNKeyValueConfigurationElement = interface; // type: System.Configuration.KeyValueConfigurationElement, namespace: System.Configuration
  DNNameValueConfigurationElement = interface; // type: System.Configuration.NameValueConfigurationElement, namespace: System.Configuration
  DNProtectedProviderSettings = interface; // type: System.Configuration.ProtectedProviderSettings, namespace: System.Configuration
  DNProviderSettings = interface; // type: System.Configuration.ProviderSettings, namespace: System.Configuration
  DNSchemeSettingElement = interface; // type: System.Configuration.SchemeSettingElement, namespace: System.Configuration
  DNSettingElement = interface; // type: System.Configuration.SettingElement, namespace: System.Configuration
  DNSettingValueElement = interface; // type: System.Configuration.SettingValueElement, namespace: System.Configuration
  DNConfigurationElementProperty = interface; // type: System.Configuration.ConfigurationElementProperty, namespace: System.Configuration
  DNConfigurationFileMap = interface; // type: System.Configuration.ConfigurationFileMap, namespace: System.Configuration
  DNExeConfigurationFileMap = interface; // type: System.Configuration.ExeConfigurationFileMap, namespace: System.Configuration
  DNConfigurationLocation = interface; // type: System.Configuration.ConfigurationLocation, namespace: System.Configuration
  DNConfigurationLockCollection = interface; // type: System.Configuration.ConfigurationLockCollection, namespace: System.Configuration
  DNConfigurationManager = interface; // type: System.Configuration.ConfigurationManager, namespace: System.Configuration
  DNConfigurationProperty = interface; // type: System.Configuration.ConfigurationProperty, namespace: System.Configuration
  DNConfigurationPropertyCollection = interface; // type: System.Configuration.ConfigurationPropertyCollection, namespace: System.Configuration
  DNConfigurationSectionGroup = interface; // type: System.Configuration.ConfigurationSectionGroup, namespace: System.Configuration
  DNApplicationSettingsGroup = interface; // type: System.Configuration.ApplicationSettingsGroup, namespace: System.Configuration
  DNUserSettingsGroup = interface; // type: System.Configuration.UserSettingsGroup, namespace: System.Configuration
  DNConfigurationSettings = interface; // type: System.Configuration.ConfigurationSettings, namespace: System.Configuration
  DNConfigurationValidatorBase = interface; // type: System.Configuration.ConfigurationValidatorBase, namespace: System.Configuration
  DNCallbackValidator = interface; // type: System.Configuration.CallbackValidator, namespace: System.Configuration
  DNDefaultValidator = interface; // type: System.Configuration.DefaultValidator, namespace: System.Configuration
  DNIntegerValidator = interface; // type: System.Configuration.IntegerValidator, namespace: System.Configuration
  DNLongValidator = interface; // type: System.Configuration.LongValidator, namespace: System.Configuration
  DNPositiveTimeSpanValidator = interface; // type: System.Configuration.PositiveTimeSpanValidator, namespace: System.Configuration
  DNRegexStringValidator = interface; // type: System.Configuration.RegexStringValidator, namespace: System.Configuration
  DNStringValidator = interface; // type: System.Configuration.StringValidator, namespace: System.Configuration
  DNSubclassTypeValidator = interface; // type: System.Configuration.SubclassTypeValidator, namespace: System.Configuration
  DNTimeSpanValidator = interface; // type: System.Configuration.TimeSpanValidator, namespace: System.Configuration
  DNContextInformation = interface; // type: System.Configuration.ContextInformation, namespace: System.Configuration
  DNDictionarySectionHandler = interface; // type: System.Configuration.DictionarySectionHandler, namespace: System.Configuration
  DNElementInformation = interface; // type: System.Configuration.ElementInformation, namespace: System.Configuration
  DNExeContext = interface; // type: System.Configuration.ExeContext, namespace: System.Configuration
  DNIgnoreSectionHandler = interface; // type: System.Configuration.IgnoreSectionHandler, namespace: System.Configuration
  DNDelegatingConfigHost = interface; // type: System.Configuration.Internal.DelegatingConfigHost, namespace: System.Configuration.Internal
  DNNameValueFileSectionHandler = interface; // type: System.Configuration.NameValueFileSectionHandler, namespace: System.Configuration
  DNNameValueSectionHandler = interface; // type: System.Configuration.NameValueSectionHandler, namespace: System.Configuration
  DNPropertyInformation = interface; // type: System.Configuration.PropertyInformation, namespace: System.Configuration
  DNProtectedConfiguration = interface; // type: System.Configuration.ProtectedConfiguration, namespace: System.Configuration
  DNProviderBase = interface; // type: System.Configuration.Provider.ProviderBase, namespace: System.Configuration.Provider
  DNConfigurationBuilder = interface; // type: System.Configuration.ConfigurationBuilder, namespace: System.Configuration
  DNProtectedConfigurationProvider = interface; // type: System.Configuration.ProtectedConfigurationProvider, namespace: System.Configuration
  DNDpapiProtectedConfigurationProvider = interface; // type: System.Configuration.DpapiProtectedConfigurationProvider, namespace: System.Configuration
  DNRsaProtectedConfigurationProvider = interface; // type: System.Configuration.RsaProtectedConfigurationProvider, namespace: System.Configuration
  DNSettingsProvider = interface; // type: System.Configuration.SettingsProvider, namespace: System.Configuration
  DNLocalFileSettingsProvider = interface; // type: System.Configuration.LocalFileSettingsProvider, namespace: System.Configuration
  DNProviderCollection = interface; // type: System.Configuration.Provider.ProviderCollection, namespace: System.Configuration.Provider
  DNConfigurationBuilderCollection = interface; // type: System.Configuration.ConfigurationBuilderCollection, namespace: System.Configuration
  DNProtectedConfigurationProviderCollection = interface; // type: System.Configuration.ProtectedConfigurationProviderCollection, namespace: System.Configuration
  DNSettingsProviderCollection = interface; // type: System.Configuration.SettingsProviderCollection, namespace: System.Configuration
  DNSectionInformation = interface; // type: System.Configuration.SectionInformation, namespace: System.Configuration
  DNSettingsBase = interface; // type: System.Configuration.SettingsBase, namespace: System.Configuration
  DNApplicationSettingsBase = interface; // type: System.Configuration.ApplicationSettingsBase, namespace: System.Configuration
  DNSettingsProperty = interface; // type: System.Configuration.SettingsProperty, namespace: System.Configuration
  DNSettingsPropertyCollection = interface; // type: System.Configuration.SettingsPropertyCollection, namespace: System.Configuration
  DNSettingsPropertyValue = interface; // type: System.Configuration.SettingsPropertyValue, namespace: System.Configuration
  DNSettingsPropertyValueCollection = interface; // type: System.Configuration.SettingsPropertyValueCollection, namespace: System.Configuration
  DNSingleTagSectionHandler = interface; // type: System.Configuration.SingleTagSectionHandler, namespace: System.Configuration
  DNSettingChangingEventArgs = interface; // type: System.Configuration.SettingChangingEventArgs, namespace: System.Configuration
  DNInternalConfigEventArgs = interface; // type: System.Configuration.Internal.InternalConfigEventArgs, namespace: System.Configuration.Internal
  DNSettingsLoadedEventArgs = interface; // type: System.Configuration.SettingsLoadedEventArgs, namespace: System.Configuration
  DNProviderException = interface; // type: System.Configuration.Provider.ProviderException, namespace: System.Configuration.Provider
  DNSettingsPropertyIsReadOnlyException = interface; // type: System.Configuration.SettingsPropertyIsReadOnlyException, namespace: System.Configuration
  DNSettingsPropertyNotFoundException = interface; // type: System.Configuration.SettingsPropertyNotFoundException, namespace: System.Configuration
  DNSettingsPropertyWrongTypeException = interface; // type: System.Configuration.SettingsPropertyWrongTypeException, namespace: System.Configuration
  DNConfigurationException = interface; // type: System.Configuration.ConfigurationException, namespace: System.Configuration
  DNConfigurationErrorsException = interface; // type: System.Configuration.ConfigurationErrorsException, namespace: System.Configuration
  DNConfigurationPermission = interface; // type: System.Configuration.ConfigurationPermission, namespace: System.Configuration
  DNConfigXmlDocument = interface; // type: System.Configuration.ConfigXmlDocument, namespace: System.Configuration

{ delegates }

  ///<summary>Defines a class used by the .NET Framework infrastructure to support configuration events.</summary>
  ///  <param name="sender">The source object of the event.</param>
  ///  <param name="e">A configuration event argument.</param>
  [DNTypeName('System.Configuration.Internal.InternalConfigEventHandler')]
  DNInternalConfigEventHandler = procedure(sender: DDN.mscorlib.DNObject; e: DNInternalConfigEventArgs) of object;

  ///<summary>Represents a method for hosts to call when a monitored stream has changed.</summary>
  ///  <param name="streamName">The name of the <see cref="T:System.IO.Stream" />
  ///  object performing I/O tasks on the configuration file.</param>
  [DNTypeName('System.Configuration.Internal.StreamChangeCallback')]
  DNStreamChangeCallback = procedure(streamName: string) of object;

  ///<summary>Represents the method that will handle the <see cref="E:System.Configuration.ApplicationSettingsBase.SettingChanging" />
  ///  event. </summary>
  ///  <param name="sender">The source of the event, typically an application settings wrapper class derived from the <see cref="T:System.Configuration.ApplicationSettingsBase" />
  ///  class.</param>
  ///  <param name="e">A <see cref="T:System.Configuration.SettingChangingEventArgs" />
  ///  containing the data for the event.</param>
  [DNTypeName('System.Configuration.SettingChangingEventHandler')]
  DNSettingChangingEventHandler = procedure(sender: DDN.mscorlib.DNObject; e: DNSettingChangingEventArgs) of object;

  ///<summary>Represents the method that will handle the <see cref="E:System.Configuration.ApplicationSettingsBase.SettingsLoaded" />
  ///  event.</summary>
  ///  <param name="sender">The source of the event, typically the settings class.</param>
  ///  <param name="e">A <see cref="T:System.Configuration.SettingsLoadedEventArgs" />
  ///  object that contains the event data.</param>
  [DNTypeName('System.Configuration.SettingsLoadedEventHandler')]
  DNSettingsLoadedEventHandler = procedure(sender: DDN.mscorlib.DNObject; e: DNSettingsLoadedEventArgs) of object;

  ///<summary>Represents the method that will handle the <see cref="E:System.Configuration.ApplicationSettingsBase.SettingsSaving" />
  ///  event. </summary>
  ///  <param name="sender">The source of the event, typically a data container or data-bound collection.</param>
  ///  <param name="e">A <see cref="T:System.ComponentModel.CancelEventArgs" />
  ///  that contains the event data.</param>
  [DNTypeName('System.Configuration.SettingsSavingEventHandler')]
  DNSettingsSavingEventHandler = procedure(sender: DDN.mscorlib.DNObject; e: DNCancelEventArgs) of object;

  ///<summary>Represents a method to be called after the validation of an object.</summary>
  ///  <param name="value">The callback method.</param>
  [DNTypeName('System.Configuration.ValidatorCallback')]
  DNValidatorCallback = procedure(value: DDN.mscorlib.DNObject) of object;




{ objects }

  //-------------namespace: System.Configuration----------------
  ///<summary>Defines extended capabilities for client-based application settings providers.</summary>
  [DNTypeName('System.Configuration.IApplicationSettingsProvider')]
  DNIApplicationSettingsProvider = interface(DDN.mscorlib.DNObject)
  ['{D0796559-142D-3A3B-B0C4-A061BD3EC5D4}']
  { methods } 

    ///<summary>Returns the value of the specified settings property for the previous version of the same application.</summary>
    ///  <param name="context">A <see cref="T:System.Configuration.SettingsContext" />
    ///  describing the current application usage.</param>
    ///  <param name="property">The <see cref="T:System.Configuration.SettingsProperty" />
    ///  whose value is to be returned.</param>
    ///<returns>A <see cref="T:System.Configuration.SettingsPropertyValue" />
    ///  containing the value of the specified property setting as it was last set in the previous version of the application; or <see langword="null" />
    ///  if the setting cannot be found.</returns>
    function GetPreviousVersion(context: DNSettingsContext; &property: DNSettingsProperty): DNSettingsPropertyValue;
    ///<summary>Resets the application settings associated with the specified application to their default values.</summary>
    ///  <param name="context">A <see cref="T:System.Configuration.SettingsContext" />
    ///  describing the current application usage.</param>
    procedure Reset(context: DNSettingsContext);
    ///<summary>Indicates to the provider that the application has been upgraded. This offers the provider an opportunity to upgrade its stored settings as appropriate.</summary>
    ///  <param name="context">A <see cref="T:System.Configuration.SettingsContext" />
    ///  describing the current application usage.</param>
    ///  <param name="properties">A <see cref="T:System.Configuration.SettingsPropertyCollection" />
    ///  containing the settings property group whose values are to be retrieved.</param>
    procedure Upgrade(context: DNSettingsContext; properties: DNSettingsPropertyCollection);

  end;

  //-------------namespace: System.Configuration----------------
  ///<summary>Handles the access to certain configuration sections.</summary>
  [DNTypeName('System.Configuration.IConfigurationSectionHandler')]
  DNIConfigurationSectionHandler = interface(DDN.mscorlib.DNObject)
  ['{452EE5E6-9B6C-3CD3-B6DE-4ED66B1035A0}']
  { methods } 

    ///<summary>Creates a configuration section handler.</summary>
    ///  <param name="parent">Parent object.</param>
    ///  <param name="configContext">Configuration context object.</param>
    ///  <param name="section">Section XML node.</param>
    ///<returns>The created section handler object.</returns>
    function Create(parent: DDN.mscorlib.DNObject; configContext: DDN.mscorlib.DNObject; section: DDN.System.Xml.DNXmlNode): DDN.mscorlib.DNObject;

  end;

  //-------------namespace: System.Configuration----------------
  ///<summary>Provides standard configuration methods.</summary>
  [DNTypeName('System.Configuration.IConfigurationSystem')]
  DNIConfigurationSystem = interface(DDN.mscorlib.DNObject)
  ['{8802959A-0841-33C7-8303-F32297958941}']
  { methods } 

    ///<summary>Gets the specified configuration.</summary>
    ///  <param name="configKey">The configuration key.</param>
    ///<returns>The object representing the configuration.</returns>
    function GetConfig(configKey: string): DDN.mscorlib.DNObject;
    ///<summary>Used for initialization.</summary>
    procedure Init;

  end;

  //-------------namespace: System.Configuration.Internal----------------
  ///<summary>Defines an interface used by the .NET Framework to support creating error configuration records.</summary>
  [DNTypeName('System.Configuration.Internal.IConfigErrorInfo')]
  DNIConfigErrorInfo = interface(DDN.mscorlib.DNObject)
  ['{DF32F1F3-7722-38FA-BCBE-0F6B8F2ACC1D}']
  { getters & setters } 

    function get_Filename: string;
    function get_LineNumber: Int32;

  { propertys } 

    ///<summary>Gets a string specifying the file name related to the configuration details.</summary>
    ///<returns>A string specifying a filename.</returns>
    property Filename: string read get_Filename;
    ///<summary>Gets an integer specifying the line number related to the configuration details.</summary>
    ///<returns>An integer specifying a line number.</returns>
    property LineNumber: Int32 read get_LineNumber;
  end;

  //-------------namespace: System.Configuration.Internal----------------
  ///<summary>Defines an interface used by the .NET Framework to support the initialization of configuration properties.</summary>
  [DNTypeName('System.Configuration.Internal.IConfigSystem')]
  DNIConfigSystem = interface(DDN.mscorlib.DNObject)
  ['{FC4E90B4-074D-3426-93AE-11377307197F}']
  { getters & setters } 

    function get_Host: DNIInternalConfigHost;
    function get_Root: DNIInternalConfigRoot;

  { methods } 

    ///<summary>Initializes a configuration object.</summary>
    ///  <param name="typeConfigHost">The type of configuration host.</param>
    ///  <param name="hostInitParams">An array of configuration host parameters.</param>
    procedure Init(typeConfigHost: DDN.mscorlib.DNType; hostInitParams: TArray<DDN.mscorlib.DNObject>);

  { propertys } 

    ///<summary>Gets the configuration host.</summary>
    ///<returns>An <see cref="T:System.Configuration.Internal.IInternalConfigHost" />
    ///  object that is used by the .NET Framework to initialize application configuration properties.</returns>
    property Host: DNIInternalConfigHost read get_Host;
    ///<summary>Gets the root of the configuration hierarchy.</summary>
    ///<returns>An <see cref="T:System.Configuration.Internal.IInternalConfigRoot" />
    ///  object.</returns>
    property Root: DNIInternalConfigRoot read get_Root;
  end;

  //-------------namespace: System.Configuration.Internal----------------
  ///<summary>Defines an interface used by the .NET Framework to support configuration management.</summary>
  [DNTypeName('System.Configuration.Internal.IConfigurationManagerHelper')]
  DNIConfigurationManagerHelper = interface(DDN.mscorlib.DNObject)
  ['{444E4D88-69F2-3904-8281-9C066F164331}']
  { methods } 

    ///<summary>Ensures that the networking configuration is loaded.</summary>
    procedure EnsureNetConfigLoaded;

  end;

  //-------------namespace: System.Configuration.Internal----------------
  ///<summary>Defines an interface used by the .NET Framework to initialize configuration properties.</summary>
  [DNTypeName('System.Configuration.Internal.IConfigurationManagerInternal')]
  DNIConfigurationManagerInternal = interface(DDN.mscorlib.DNObject)
  ['{695A3E6D-B9CA-3A1D-82E3-3E25634533F5}']
  { getters & setters } 

    function get_SupportsUserConfig: Boolean;
    function get_SetConfigurationSystemInProgress: Boolean;
    function get_MachineConfigPath: string;
    function get_ApplicationConfigUri: string;
    function get_ExeProductName: string;
    function get_ExeProductVersion: string;
    function get_ExeRoamingConfigDirectory: string;
    function get_ExeRoamingConfigPath: string;
    function get_ExeLocalConfigDirectory: string;
    function get_ExeLocalConfigPath: string;
    function get_UserConfigFilename: string;

  { propertys } 

    ///<summary>Gets a value that specifies whether user configuration settings are supported.</summary>
    ///<returns><see langword="true" />
    ///  if the configuration system supports user configuration settings; otherwise, <see langword="false" />
    ///  .</returns>
    property SupportsUserConfig: Boolean read get_SupportsUserConfig;
    ///<summary>Gets a value representing the configuration system's status.</summary>
    ///<returns><see langword="true" />
    ///  if the configuration system is in the process of being initialized; otherwise, <see langword="false" />
    ///  .</returns>
    property SetConfigurationSystemInProgress: Boolean read get_SetConfigurationSystemInProgress;
    ///<summary>Gets the configuration path for the Machine.config file.</summary>
    ///<returns>A string value representing the path of the Machine.config file.</returns>
    property MachineConfigPath: string read get_MachineConfigPath;
    ///<summary>Gets the configuration file name related to the application path.</summary>
    ///<returns>A string value representing a configuration file name.</returns>
    property ApplicationConfigUri: string read get_ApplicationConfigUri;
    ///<summary>Gets the product name of the application based on the entry assembly.</summary>
    ///<returns>A string value representing the product name of the application.</returns>
    property ExeProductName: string read get_ExeProductName;
    ///<summary>Gets the product version of the application based on the entry assembly.</summary>
    ///<returns>A string value representing the product version of the application.</returns>
    property ExeProductVersion: string read get_ExeProductVersion;
    ///<summary>Gets the roaming configuration directory of the application based on the entry assembly.</summary>
    ///<returns>A string value representing the roaming configuration directory of the application.</returns>
    property ExeRoamingConfigDirectory: string read get_ExeRoamingConfigDirectory;
    ///<summary>Gets the roaming user's configuration path based on the application's entry assembly.</summary>
    ///<returns>A string value representing the roaming user's configuration path.</returns>
    property ExeRoamingConfigPath: string read get_ExeRoamingConfigPath;
    ///<summary>Gets the local configuration directory of the application based on the entry assembly.</summary>
    ///<returns>A string representing the local configuration directory.</returns>
    property ExeLocalConfigDirectory: string read get_ExeLocalConfigDirectory;
    ///<summary>Gets the local configuration path of the application based on the entry assembly.</summary>
    ///<returns>A string value representing the local configuration path of the application.</returns>
    property ExeLocalConfigPath: string read get_ExeLocalConfigPath;
    ///<summary>Gets the name of the file used to store user configuration settings.</summary>
    ///<returns>A string specifying the name of the file used to store user configuration.</returns>
    property UserConfigFilename: string read get_UserConfigFilename;
  end;

  //-------------namespace: System.Configuration.Internal----------------
  ///<summary>Defines interfaces that allow the internal .NET Framework infrastructure to customize configuration.</summary>
  [DNTypeName('System.Configuration.Internal.IInternalConfigClientHost')]
  DNIInternalConfigClientHost = interface(DDN.mscorlib.DNObject)
  ['{357AE414-F353-3A3B-88C1-ED97C006A68E}']
  { methods } 

    ///<summary>Returns a value indicating whether a configuration file path is the same as a currently known application configuration file path. </summary>
    ///  <param name="configPath">A string representing the path to the application configuration file.</param>
    ///<returns><see langword="true" />
    ///  if a string representing a configuration path is the same as a path to the application configuration file; <see langword="false" />
    ///  if a string representing a configuration path is not the same as a path to the application configuration file. </returns>
    function IsExeConfig(configPath: string): Boolean;
    ///<summary>Returns a value indicating whether a configuration file path is the same as the configuration file path for the currently known roaming user.</summary>
    ///  <param name="configPath">A string representing the path to an application configuration file.</param>
    ///<returns><see langword="true" />
    ///  if a string representing a configuration path is the same as a path to a known roaming user configuration file; otherwise, <see langword="false" />
    ///  .</returns>
    function IsRoamingUserConfig(configPath: string): Boolean;
    ///<summary>Returns a value indicating whether a configuration file path is the same as the configuration file path for the currently known local user. </summary>
    ///  <param name="configPath">A string representing the path to the application configuration file.</param>
    ///<returns><see langword="true" />
    ///  if a string representing a configuration path is the same as a path to a known local user configuration file; otherwise, <see langword="false" />
    ///  .</returns>
    function IsLocalUserConfig(configPath: string): Boolean;
    ///<summary>Returns the path to the application configuration file. </summary>
    ///<returns>A string representing the path to the application configuration file.</returns>
    function GetExeConfigPath: string;
    ///<summary>Returns a string representing the path to the known roaming user configuration file.</summary>
    ///<returns>A string representing the path to the known roaming user configuration file.</returns>
    function GetRoamingUserConfigPath: string;
    ///<summary>Returns a string representing the path to the known local user configuration file.</summary>
    ///<returns>A string representing the path to the known local user configuration file.</returns>
    function GetLocalUserConfigPath: string;

  end;

  //-------------namespace: System.Configuration.Internal----------------
  ///<summary>Defines the interfaces used by the internal design time API to create a <see cref="T:System.Configuration.Configuration" />
  ///  object.</summary>
  [DNTypeName('System.Configuration.Internal.IInternalConfigConfigurationFactory')]
  DNIInternalConfigConfigurationFactory = interface(DDN.mscorlib.DNObject)
  ['{4408EF34-D211-3150-A799-B1F9C1BC07AF}']
  { methods } 

    ///<summary>Creates and initializes a <see cref="T:System.Configuration.Configuration" />
    ///  object.</summary>
    ///  <param name="typeConfigHost">The <see cref="T:System.Type" />
    ///  of the <see cref="T:System.Configuration.Configuration" />
    ///  object to be created.</param>
    ///  <param name="hostInitConfigurationParams">A parameter array of <see cref="T:System.Object" />
    ///  that contains the parameters to be applied to the created <see cref="T:System.Configuration.Configuration" />
    ///  object.</param>
    ///<returns>A <see cref="T:System.Configuration.Configuration" />
    ///  object.</returns>
    function Create(typeConfigHost: DDN.mscorlib.DNType; hostInitConfigurationParams: TArray<DDN.mscorlib.DNObject>): DNConfiguration;
    ///<summary>Normalizes a location subpath of a path to a configuration file.</summary>
    ///  <param name="subPath">A string representing the path to the configuration file.</param>
    ///  <param name="errorInfo">An instance of <see cref="T:System.Configuration.Internal.IConfigErrorInfo" />
    ///  or <see langword="null" />
    ///  .</param>
    ///<returns>A normalized subpath string.</returns>
    function NormalizeLocationSubPath(subPath: string; errorInfo: DNIConfigErrorInfo): string;

  end;

  //-------------namespace: System.Configuration.Internal----------------
  ///<summary>Defines interfaces used by internal .NET structures to initialize application configuration properties.</summary>
  [DNTypeName('System.Configuration.Internal.IInternalConfigHost')]
  DNIInternalConfigHost = interface(DDN.mscorlib.DNObject)
  ['{CC5C14DC-3BDA-3D45-BBA0-B6F98A70ED84}']
  { getters & setters } 

    function get_SupportsChangeNotifications: Boolean;
    function get_SupportsRefresh: Boolean;
    function get_SupportsPath: Boolean;
    function get_SupportsLocation: Boolean;
    function get_IsRemote: Boolean;

  { methods } 

    ///<summary>Initializes a configuration host.</summary>
    ///  <param name="configRoot">The configuration root object.</param>
    ///  <param name="hostInitParams">The parameter object containing the values used for initializing the configuration host.</param>
    procedure Init(configRoot: DNIInternalConfigRoot; hostInitParams: TArray<DDN.mscorlib.DNObject>);
    procedure InitForConfiguration(out locationSubPath: string; out configPath: string; out locationConfigPath: string; configRoot: DNIInternalConfigRoot; hostInitConfigurationParams: TArray<DDN.mscorlib.DNObject>);
    ///<summary>Returns a value indicating whether a child record is required for a child configuration path.</summary>
    ///  <param name="configPath">A string representing the path of the application configuration file.</param>
    ///<returns><see langword="true" />
    ///  if child record is required for a child configuration path; otherwise, <see langword="false" />
    ///  .</returns>
    function IsConfigRecordRequired(configPath: string): Boolean;
    ///<summary>Returns a value indicating whether the initialization of a configuration object is considered delayed.</summary>
    ///  <param name="configRecord">The <see cref="T:System.Configuration.Internal.IInternalConfigRecord" />
    ///  object.</param>
    ///<returns><see langword="true" />
    ///  if the initialization of a configuration object is considered delayed; otherwise, <see langword="false" />
    ///  .</returns>
    function IsInitDelayed(configRecord: DNIInternalConfigRecord): Boolean;
    ///<summary>Indicates a new configuration record requires a complete initialization.</summary>
    ///  <param name="configRecord">An <see cref="T:System.Configuration.Internal.IInternalConfigRecord" />
    ///  object.</param>
    procedure RequireCompleteInit(configRecord: DNIInternalConfigRecord);
    ///<summary>Returns a value indicating whether a configuration path is to a configuration node whose contents should be treated as a root.</summary>
    ///  <param name="configPath">A string representing the path of the application configuration file.</param>
    ///<returns><see langword="true" />
    ///  if the configuration path is to a configuration node whose contents should be treated as a root; otherwise, <see langword="false" />
    ///  .</returns>
    function IsSecondaryRoot(configPath: string): Boolean;
    ///<summary>Returns a string representing the configuration file name associated with the <see cref="T:System.IO.Stream" />
    ///  object performing I/O tasks on the configuration file.</summary>
    ///  <param name="configPath">A string representing the path of the application configuration file.</param>
    ///<returns>A string representing the configuration file name associated with the <see cref="T:System.IO.Stream" />
    ///  I/O tasks on the configuration file.</returns>
    function GetStreamName(configPath: string): string;
    ///<summary>Returns a string representing the configuration file name associated with the <see cref="T:System.IO.Stream" />
    ///  object performing I/O tasks on a remote configuration file.</summary>
    ///  <param name="streamName">A string representing the configuration file name associated with the <see cref="T:System.IO.Stream" />
    ///  object performing I/O tasks on the configuration file.</param>
    ///  <param name="configSource">A string representing a path to a remote configuration file.</param>
    ///<returns>A string representing the configuration file name associated with the <see cref="T:System.IO.Stream" />
    ///  object performing I/O tasks on the configuration file.</returns>
    function GetStreamNameForConfigSource(streamName: string; configSource: string): string;
    ///<summary>Returns the version of the <see cref="T:System.IO.Stream" />
    ///  object associated with configuration file.</summary>
    ///  <param name="streamName">A string representing the name of the <see cref="T:System.IO.Stream" />
    ///  object performing I/O tasks on the configuration file.</param>
    ///<returns>The version of the <see cref="T:System.IO.Stream" />
    ///  object associated with configuration file.</returns>
    function GetStreamVersion(streamName: string): DDN.mscorlib.DNObject;
    ///<summary>Opens a <see cref="T:System.IO.Stream" />
    ///  to read a configuration file.</summary>
    ///  <param name="streamName">A string representing the name of the <see cref="T:System.IO.Stream" />
    ///  object performing I/O tasks on the configuration file.</param>
    ///<returns>A <see cref="T:System.IO.Stream" />
    ///  object.</returns>
    function OpenStreamForRead(streamName: string): DDN.mscorlib.DNStream; overload;
    ///<summary>Opens a <see cref="T:System.IO.Stream" />
    ///  object to read a configuration file.</summary>
    ///  <param name="streamName">A string representing the name of the <see cref="T:System.IO.Stream" />
    ///  object performing I/O tasks on the configuration file.</param>
    ///  <param name="assertPermissions"><see langword="true" />
    ///  to assert permissions; otherwise, <see langword="false" />
    ///  .</param>
    ///<returns>Returns the <see cref="T:System.IO.Stream" />
    ///  object specified by <paramref name="streamName" />
    ///  .</returns>
    function OpenStreamForRead(streamName: string; assertPermissions: Boolean): DDN.mscorlib.DNStream; overload;
    function OpenStreamForWrite(streamName: string; templateStreamName: string; out writeContext: DDN.mscorlib.DNObject): DDN.mscorlib.DNStream; overload;
    function OpenStreamForWrite(streamName: string; templateStreamName: string; out writeContext: DDN.mscorlib.DNObject; assertPermissions: Boolean): DDN.mscorlib.DNStream; overload;
    ///<summary>Indicates that all writing to the configuration file has completed.</summary>
    ///  <param name="streamName">A string representing the name of the <see cref="T:System.IO.Stream" />
    ///  object performing I/O tasks on the configuration file.</param>
    ///  <param name="success"><see langword="true" />
    ///  if the write to the configuration file was completed successfully; otherwise, <see langword="false" />
    ///  .</param>
    ///  <param name="writeContext">The write context of the <see cref="T:System.IO.Stream" />
    ///  object performing I/O tasks on the configuration file.</param>
    procedure WriteCompleted(streamName: string; success: Boolean; writeContext: DDN.mscorlib.DNObject); overload;
    ///<summary>Indicates that all writing to the configuration file has completed and specifies whether permissions should be asserted.</summary>
    ///  <param name="streamName">A string representing the name of the <see cref="T:System.IO.Stream" />
    ///  object performing I/O tasks on the configuration file.</param>
    ///  <param name="success"><see langword="true" />
    ///  to indicate the write was completed successfully; otherwise, <see langword="false" />
    ///  .</param>
    ///  <param name="writeContext">The write context of the <see cref="T:System.IO.Stream" />
    ///  object performing I/O tasks on the configuration file.</param>
    ///  <param name="assertPermissions"><see langword="true" />
    ///  to assert permissions; otherwise, <see langword="false" />
    ///  .</param>
    procedure WriteCompleted(streamName: string; success: Boolean; writeContext: DDN.mscorlib.DNObject; assertPermissions: Boolean); overload;
    ///<summary>Deletes the <see cref="T:System.IO.Stream" />
    ///  object performing I/O tasks on the application configuration file.</summary>
    ///  <param name="streamName">A string representing the name of the <see cref="T:System.IO.Stream" />
    ///  object performing I/O tasks on the configuration file.</param>
    procedure DeleteStream(streamName: string);
    ///<summary>Returns a value indicating whether the file path used by a <see cref="T:System.IO.Stream" />
    ///  object to read a configuration file is a valid path.</summary>
    ///  <param name="streamName">A string representing the name of the <see cref="T:System.IO.Stream" />
    ///  object performing I/O tasks on the configuration file.</param>
    ///<returns><see langword="true" />
    ///  if the path used by a <see cref="T:System.IO.Stream" />
    ///  object to read a configuration file is a valid path; otherwise, <see langword="false" />
    ///  .</returns>
    function IsFile(streamName: string): Boolean;
    ///<summary>Instructs the <see cref="T:System.Configuration.Internal.IInternalConfigHost" />
    ///  object to monitor an associated <see cref="T:System.IO.Stream" />
    ///  object for changes in a configuration file.</summary>
    ///  <param name="streamName">A string representing the name of the <see cref="T:System.IO.Stream" />
    ///  object performing I/O tasks on the configuration file.</param>
    ///  <param name="callback">A <see cref="T:System.Configuration.Internal.StreamChangeCallback" />
    ///  object to receive the returned data representing the changes in the configuration file.</param>
    ///<returns>An <see cref="T:System.Object" />
    ///  containing changed configuration settings.</returns>
    function StartMonitoringStreamForChanges(streamName: string; callback: DNStreamChangeCallback): DDN.mscorlib.DNObject;
    ///<summary>Instructs the  <see cref="T:System.Configuration.Internal.IInternalConfigHost" />
    ///  object to stop monitoring an associated <see cref="T:System.IO.Stream" />
    ///  object for changes in a configuration file.</summary>
    ///  <param name="streamName">A string representing the name of the <see cref="T:System.IO.Stream" />
    ///  object performing I/O tasks on the configuration file.</param>
    ///  <param name="callback">A <see cref="T:System.Configuration.Internal.StreamChangeCallback" />
    ///  object.</param>
    procedure StopMonitoringStreamForChanges(streamName: string; callback: DNStreamChangeCallback);
    ///<summary>Returns a value indicating whether the configuration file is located at a higher level in the configuration hierarchy than the application configuration.</summary>
    ///  <param name="configPath">A string representing the path of the application configuration file.</param>
    ///<returns><see langword="true" />
    ///  the configuration file is located at a higher level in the configuration hierarchy than the application configuration; otherwise, <see langword="false" />
    ///  .</returns>
    function IsAboveApplication(configPath: string): Boolean;
    ///<summary>Returns the complete path to an application configuration file based on the location subpath.</summary>
    ///  <param name="configPath">A string representing the path of the application configuration file.</param>
    ///  <param name="locationSubPath">The subpath location of the configuration file.</param>
    ///<returns>A string representing the complete path to an application configuration file.</returns>
    function GetConfigPathFromLocationSubPath(configPath: string; locationSubPath: string): string;
    ///<summary>Returns a value indicating whether the configuration object supports a location tag.</summary>
    ///  <param name="configPath">A string representing the path of the application configuration file.</param>
    ///<returns><see langword="true" />
    ///  if the configuration object supports a location tag; otherwise, <see langword="false" />
    ///  .</returns>
    function IsLocationApplicable(configPath: string): Boolean;
    ///<summary>Determines if a different <see cref="T:System.Type" />
    ///  definition is allowable for an application configuration object.</summary>
    ///  <param name="configPath">A string representing the path of the application configuration file.</param>
    ///  <param name="allowDefinition">A <see cref="T:System.Configuration.ConfigurationAllowDefinition" />
    ///  object.</param>
    ///  <param name="allowExeDefinition">A <see cref="T:System.Configuration.ConfigurationAllowExeDefinition" />
    ///  object.</param>
    ///<returns><see langword="true" />
    ///  if a different <see cref="T:System.Type" />
    ///  definition is allowable for an application configuration object; otherwise, <see langword="false" />
    ///  .</returns>
    function IsDefinitionAllowed(configPath: string; allowDefinition: DNConfigurationAllowDefinition; allowExeDefinition: DNConfigurationAllowExeDefinition): Boolean;
    ///<summary>Verifies that a configuration definition is allowed for a configuration record.</summary>
    ///  <param name="configPath">A string representing the path of the application configuration file.</param>
    ///  <param name="allowDefinition">A <see cref="P:System.Configuration.SectionInformation.AllowDefinition" />
    ///  object.</param>
    ///  <param name="allowExeDefinition">A <see cref="T:System.Configuration.ConfigurationAllowExeDefinition" />
    ///  object</param>
    ///  <param name="errorInfo">An <see cref="T:System.Configuration.Internal.IConfigErrorInfo" />
    ///  object.</param>
    procedure VerifyDefinitionAllowed(configPath: string; allowDefinition: DNConfigurationAllowDefinition; allowExeDefinition: DNConfigurationAllowExeDefinition; errorInfo: DNIConfigErrorInfo);
    ///<summary>Returns a value indicating whether the configuration path is trusted.</summary>
    ///  <param name="configPath">A string representing the path of the application configuration file.</param>
    ///<returns><see langword="true" />
    ///  if the configuration path is trusted; otherwise, <see langword="false" />
    ///  .</returns>
    function IsTrustedConfigPath(configPath: string): Boolean;
    ///<summary>Returns a value indicating whether a configuration section requires a fully trusted code access security level and does not allow the <see cref="T:System.Security.AllowPartiallyTrustedCallersAttribute" />
    ///  attribute to disable implicit link demands.</summary>
    ///  <param name="configRecord">The <see cref="T:System.Configuration.Internal.IInternalConfigRecord" />
    ///  object.</param>
    ///<returns><see langword="true" />
    ///  if the configuration section requires a fully trusted code access security level and does not allow the <see cref="T:System.Security.AllowPartiallyTrustedCallersAttribute" />
    ///  attribute to disable implicit link demands; otherwise, <see langword="false" />
    ///  .</returns>
    function IsFullTrustSectionWithoutAptcaAllowed(configRecord: DNIInternalConfigRecord): Boolean;
    procedure GetRestrictedPermissions(configRecord: DNIInternalConfigRecord; out permissionSet: DDN.mscorlib.DNPermissionSet; out isHostReady: Boolean);
    ///<summary>Instructs the host to impersonate and returns an <see cref="T:System.IDisposable" />
    ///  object required by the internal .NET structure.</summary>
    ///<returns>An <see cref="T:System.IDisposable" />
    ///  value.</returns>
    function Impersonate: DDN.mscorlib.DNIDisposable;
    ///<summary>Returns a value indicating whether the entire configuration file could be read by a designated <see cref="T:System.IO.Stream" />
    ///  object.</summary>
    ///  <param name="configPath">A string representing the path of the application configuration file.</param>
    ///  <param name="streamName">A string representing the name of the <see cref="T:System.IO.Stream" />
    ///  object performing I/O tasks on the configuration file.</param>
    ///<returns><see langword="true" />
    ///  if the entire configuration file could be read by the <see cref="T:System.IO.Stream" />
    ///  object designated by <paramref name="streamName" />
    ///  ; otherwise, <see langword="false" />
    ///  .</returns>
    function PrefetchAll(configPath: string; streamName: string): Boolean;
    ///<summary>Instructs the <see cref="T:System.Configuration.Internal.IInternalConfigHost" />
    ///  object to read a designated section of its associated configuration file.</summary>
    ///  <param name="sectionGroupName">A string representing the identifying name of a configuration file section group.</param>
    ///  <param name="sectionName">A string representing the identifying name of a configuration file section.</param>
    ///<returns><see langword="true" />
    ///  if a section of the configuration file designated by <paramref name="sectionGroupName" />
    ///  and <paramref name="sectionName" />
    ///  could be read by a <see cref="T:System.IO.Stream" />
    ///  object; otherwise, <see langword="false" />
    ///  .</returns>
    function PrefetchSection(sectionGroupName: string; sectionName: string): Boolean;
    ///<summary>Creates and returns a deprecated context object of the application configuration.</summary>
    ///  <param name="configPath">A string representing a path to an application configuration file.</param>
    ///<returns>A deprecated context object of the application configuration.</returns>
    function CreateDeprecatedConfigContext(configPath: string): DDN.mscorlib.DNObject;
    ///<summary>Creates and returns a context object for a <see cref="T:System.Configuration.ConfigurationElement" />
    ///  of an application configuration.</summary>
    ///  <param name="configPath">A string representing the path of the application configuration file.</param>
    ///  <param name="locationSubPath">A string representing a subpath location of the configuration element.</param>
    ///<returns>A context object for a <see cref="T:System.Configuration.ConfigurationElement" />
    ///  object of an application configuration.</returns>
    function CreateConfigurationContext(configPath: string; locationSubPath: string): DDN.mscorlib.DNObject;
    ///<summary>Decrypts an encrypted configuration section and returns it as a string.</summary>
    ///  <param name="encryptedXml">An encrypted XML string representing a configuration section.</param>
    ///  <param name="protectionProvider">The <see cref="T:System.Configuration.ProtectedConfigurationProvider" />
    ///  object.</param>
    ///  <param name="protectedConfigSection">The <see cref="T:System.Configuration.ProtectedConfigurationSection" />
    ///  object.</param>
    ///<returns>A decrypted configuration section as a string.</returns>
    function DecryptSection(encryptedXml: string; protectionProvider: DNProtectedConfigurationProvider; protectedConfigSection: DNProtectedConfigurationSection): string;
    ///<summary>Encrypts a configuration section and returns it as a string.</summary>
    ///  <param name="clearTextXml">An XML string representing a configuration section to encrypt.</param>
    ///  <param name="protectionProvider">The <see cref="T:System.Configuration.ProtectedConfigurationProvider" />
    ///  object.</param>
    ///  <param name="protectedConfigSection">The <see cref="T:System.Configuration.ProtectedConfigurationSection" />
    ///  object.</param>
    ///<returns>An encrypted configuration section represented as a string.</returns>
    function EncryptSection(clearTextXml: string; protectionProvider: DNProtectedConfigurationProvider; protectedConfigSection: DNProtectedConfigurationSection): string;
    ///<summary>Returns a <see cref="T:System.Type" />
    ///  object representing the type of the configuration object.</summary>
    ///  <param name="typeName">The type name</param>
    ///  <param name="throwOnError"><see langword="true" />
    ///  to throw an exception if an error occurs; otherwise, <see langword="false" />
    ///</param>
    ///<returns>A <see cref="T:System.Type" />
    ///  object representing the type of the configuration object.</returns>
    function GetConfigType(typeName: string; throwOnError: Boolean): DDN.mscorlib.DNType;
    ///<summary>Returns a string representing a type name from the <see cref="T:System.Type" />
    ///  object representing the type of the configuration.</summary>
    ///  <param name="t">A <see cref="T:System.Type" />
    ///  object.</param>
    ///<returns>A string representing the type name from a <see cref="T:System.Type" />
    ///  object representing the type of the configuration.</returns>
    function GetConfigTypeName(t: DDN.mscorlib.DNType): string;

  { propertys } 

    ///<summary>Returns a value indicating whether the host configuration supports change notification.</summary>
    ///<returns><see langword="true" />
    ///  if the configuration supports change notification; otherwise, <see langword="false" />
    ///  .</returns>
    property SupportsChangeNotifications: Boolean read get_SupportsChangeNotifications;
    ///<summary>Returns a value indicating whether the host configuration supports configuration refresh.</summary>
    ///<returns><see langword="true" />
    ///  if the configuration supports configuration refresh; otherwise, <see langword="false" />
    ///  .</returns>
    property SupportsRefresh: Boolean read get_SupportsRefresh;
    ///<summary>Returns a value indicating whether the host configuration supports path tags.</summary>
    ///<returns><see langword="true" />
    ///  if the configuration supports path tags; otherwise, <see langword="false" />
    ///  .</returns>
    property SupportsPath: Boolean read get_SupportsPath;
    ///<summary>Returns a value indicating whether the host configuration supports location tags.</summary>
    ///<returns><see langword="true" />
    ///  if the configuration supports location tags; otherwise, <see langword="false" />
    ///  .</returns>
    property SupportsLocation: Boolean read get_SupportsLocation;
    ///<summary>Returns a value indicating whether the configuration is remote.</summary>
    ///<returns><see langword="true" />
    ///  if the configuration is remote; otherwise, <see langword="false" />
    ///  .</returns>
    property IsRemote: Boolean read get_IsRemote;
  end;

  //-------------namespace: System.Configuration.Internal----------------
  ///<summary>Defines interfaces used by internal .NET structures to support creation of new configuration records.</summary>
  [DNTypeName('System.Configuration.Internal.IInternalConfigRecord')]
  DNIInternalConfigRecord = interface(DDN.mscorlib.DNObject)
  ['{9297DDC1-DF44-3656-A02D-E9F73E8BAC05}']
  { getters & setters } 

    function get_ConfigPath: string;
    function get_StreamName: string;
    function get_HasInitErrors: Boolean;

  { methods } 

    ///<summary>Grants the configuration object the permission to throw an exception if an error occurs during initialization.</summary>
    procedure ThrowIfInitErrors;
    ///<summary>Returns an <see cref="T:System.Object" />
    ///  instance representing a section of a configuration file.</summary>
    ///  <param name="configKey">A string representing a key to a configuration section.</param>
    ///<returns>An <see cref="T:System.Object" />
    ///  instance representing a section of a configuration file.</returns>
    function GetSection(configKey: string): DDN.mscorlib.DNObject;
    ///<summary>Returns an object representing a section of a configuration from the last-known-good (LKG) configuration.</summary>
    ///  <param name="configKey">A string representing a key to a configuration section.</param>
    ///<returns>An <see cref="T:System.Object" />
    ///  instance representing the section of the last-known-good configuration specified by <paramref name="configKey" />
    ///  .</returns>
    function GetLkgSection(configKey: string): DDN.mscorlib.DNObject;
    ///<summary>Causes a specified section of the configuration object to be reinitialized.</summary>
    ///  <param name="configKey">A string representing a key to a configuration section that is to be refreshed.</param>
    procedure RefreshSection(configKey: string);
    ///<summary>Removes a configuration record.</summary>
    procedure Remove;

  { propertys } 

    ///<summary>Gets a string representing a configuration file path.</summary>
    ///<returns>A string representing a configuration file path.</returns>
    property ConfigPath: string read get_ConfigPath;
    ///<summary>Returns the name of a <see cref="T:System.IO.Stream" />
    ///  object performing I/O tasks on the configuration file.</summary>
    ///<returns>A string representing the name of a <see cref="T:System.IO.Stream" />
    ///  object performing I/O tasks on the configuration file.</returns>
    property StreamName: string read get_StreamName;
    ///<summary>Returns a value indicating whether an error occurred during initialization of a configuration object.</summary>
    ///<returns><see langword="true" />
    ///  if an error occurred during initialization of a configuration object; otherwise, <see langword="false" />
    ///  .</returns>
    property HasInitErrors: Boolean read get_HasInitErrors;
  end;

  //-------------namespace: System.Configuration.Internal----------------
  ///<summary>Defines interfaces used by internal .NET structures to support a configuration root object.</summary>
  [DNTypeName('System.Configuration.Internal.IInternalConfigRoot')]
  DNIInternalConfigRoot = interface(DDN.mscorlib.DNObject)
  ['{BB6069FD-73DD-3EE5-98EC-BF034A011878}']
  { getters & setters } 

    function get_IsDesignTime: Boolean;

  { events } 

    procedure add_ConfigChanged(value: DNInternalConfigEventHandler);
    procedure remove_ConfigChanged(value: DNInternalConfigEventHandler);
    procedure add_ConfigRemoved(value: DNInternalConfigEventHandler);
    procedure remove_ConfigRemoved(value: DNInternalConfigEventHandler);

  { methods } 

    ///<summary>Initializes a configuration object.</summary>
    ///  <param name="host">An <see cref="T:System.Configuration.Internal.IInternalConfigHost" />
    ///  object.</param>
    ///  <param name="isDesignTime"><see langword="true" />
    ///  if design time; <see langword="false" />
    ///  if run time.</param>
    procedure Init(host: DNIInternalConfigHost; isDesignTime: Boolean);
    ///<summary>Returns an <see cref="T:System.Object" />
    ///  representing the data in a section of a configuration file.</summary>
    ///  <param name="section">A string representing a section of a configuration file.</param>
    ///  <param name="configPath">A string representing the path to a configuration file.</param>
    ///<returns>An <see cref="T:System.Object" />
    ///  representing the data in a section of a configuration file.</returns>
    function GetSection(section: string; configPath: string): DDN.mscorlib.DNObject;
    ///<summary>Returns a value representing the file path of the nearest configuration ancestor that has configuration data.</summary>
    ///  <param name="configPath">The path of configuration file.</param>
    ///<returns>Returns a string representing the file path of the nearest configuration ancestor that has configuration data.</returns>
    function GetUniqueConfigPath(configPath: string): string;
    ///<summary>Returns an <see cref="T:System.Configuration.Internal.IInternalConfigRecord" />
    ///  object representing a unique configuration record for given configuration path.</summary>
    ///  <param name="configPath">The path of the configuration file.</param>
    ///<returns>An <see cref="T:System.Configuration.Internal.IInternalConfigRecord" />
    ///  object representing a unique configuration record for a given configuration path.</returns>
    function GetUniqueConfigRecord(configPath: string): DNIInternalConfigRecord;
    ///<summary>Returns an <see cref="T:System.Configuration.Internal.IInternalConfigRecord" />
    ///  object representing a configuration specified by a configuration path.</summary>
    ///  <param name="configPath">A string representing the path to a configuration file.</param>
    ///<returns>An <see cref="T:System.Configuration.Internal.IInternalConfigRecord" />
    ///  object representing a configuration specified by <paramref name="configPath" />
    ///  .</returns>
    function GetConfigRecord(configPath: string): DNIInternalConfigRecord;
    ///<summary>Finds and removes a configuration record and all its children for a given configuration path.</summary>
    ///  <param name="configPath">The path of the configuration file.</param>
    procedure RemoveConfig(configPath: string);

  { propertys } 

    ///<summary>Returns a value indicating whether the configuration is a design-time configuration.</summary>
    ///<returns><see langword="true" />
    ///  if the configuration is a design-time configuration; <see langword="false" />
    ///  if the configuration is not a design-time configuration.</returns>
    property IsDesignTime: Boolean read get_IsDesignTime;
  end;

  //-------------namespace: System.Configuration.Internal----------------
  ///<summary>Defines an interface used by the configuration system to set the <see cref="T:System.Configuration.ConfigurationSettings" />
  ///  class.</summary>
  [DNTypeName('System.Configuration.Internal.IInternalConfigSettingsFactory')]
  DNIInternalConfigSettingsFactory = interface(DDN.mscorlib.DNObject)
  ['{EFBD58A9-725C-371E-97D2-D99AF448896E}']
  { methods } 

    ///<summary>Provides hierarchical configuration settings and extensions specific to ASP.NET to the configuration system. </summary>
    ///  <param name="internalConfigSystem">An <see cref="T:System.Configuration.Internal.IInternalConfigSystem" />
    ///  object used by the <see cref="T:System.Configuration.ConfigurationSettings" />
    ///  class.</param>
    ///  <param name="initComplete"><see langword="true" />
    ///  if the initialization process of the configuration system is complete; otherwise, <see langword="false" />
    ///  .</param>
    procedure SetConfigurationSystem(internalConfigSystem: DNIInternalConfigSystem; initComplete: Boolean);
    ///<summary>Indicates that initialization of the configuration system has completed. </summary>
    procedure CompleteInit;

  end;

  //-------------namespace: System.Configuration.Internal----------------
  ///<summary>Defines an interface used by the .NET Framework to initialize application configuration properties.</summary>
  [DNTypeName('System.Configuration.Internal.IInternalConfigSystem')]
  DNIInternalConfigSystem = interface(DDN.mscorlib.DNObject)
  ['{049ADD6E-3BB8-3110-AEB4-CE80D993781C}']
  { getters & setters } 

    function get_SupportsUserConfig: Boolean;

  { methods } 

    ///<summary>Returns the configuration object based on the specified key. </summary>
    ///  <param name="configKey">The configuration key value.</param>
    ///<returns>A configuration object.</returns>
    function GetSection(configKey: string): DDN.mscorlib.DNObject;
    ///<summary>Refreshes the configuration system based on the specified section name. </summary>
    ///  <param name="sectionName">The name of the configuration section.</param>
    procedure RefreshConfig(sectionName: string);

  { propertys } 

    ///<summary>Gets a value indicating whether the user configuration is supported. </summary>
    ///<returns><see langword="true" />
    ///  if the user configuration is supported; otherwise, <see langword="false" />
    ///  .</returns>
    property SupportsUserConfig: Boolean read get_SupportsUserConfig;
  end;

  //-------------namespace: System.Configuration.Internal----------------
  ///<summary>Defines the supplemental interface to       <see cref="T:System.Configuration.Internal.IInternalConfigHost" />
  ///  for configuration hosts that wish to support the application of <see cref="T:System.Configuration.ConfigurationBuilder" />
  ///  objects.</summary>
  [DNTypeName('System.Configuration.Internal.IInternalConfigurationBuilderHost')]
  DNIInternalConfigurationBuilderHost = interface(DDN.mscorlib.DNObject)
  ['{D8DBBA02-6973-3F51-9A4D-802DDFBAC0B5}']
  { methods } 

    ///<summary>Processes the markup of a configuration section using the provided <see cref="T:System.Configuration.ConfigurationBuilder" />
    ///  .</summary>
    ///  <param name="rawXml">The <see cref="T:System.Xml.XmlNode" />
    ///  to process.</param>
    ///  <param name="builder"><see cref="T:System.Configuration.ConfigurationBuilder" />
    ///  to use to process the <paramref name="rawXml" />
    ///  .</param>
    ///<returns>The processed <see cref="T:System.Xml.XmlNode" />
    ///  .</returns>
    function ProcessRawXml(rawXml: DDN.System.Xml.DNXmlNode; builder: DNConfigurationBuilder): DDN.System.Xml.DNXmlNode;
    ///<summary>Processes a <see cref="T:System.Configuration.ConfigurationSection" />
    ///  object using the provided <see cref="T:System.Configuration.ConfigurationBuilder" />
    ///  .</summary>
    ///  <param name="configSection">The <see cref="T:System.Configuration.ConfigurationSection" />
    ///  to process.</param>
    ///  <param name="builder"><see cref="T:System.Configuration.ConfigurationBuilder" />
    ///  to use to process the <paramref name="configSection" />
    ///  .</param>
    ///<returns>The processed <see cref="T:System.Configuration.ConfigurationSection" />
    ///  .</returns>
    function ProcessConfigurationSection(configSection: DNConfigurationSection; builder: DNConfigurationBuilder): DNConfigurationSection;

  end;

  //-------------namespace: System.Configuration----------------
  ///<summary>Defines standard functionality for controls or libraries that store and retrieve application settings.</summary>
  [DNTypeName('System.Configuration.IPersistComponentSettings')]
  DNIPersistComponentSettings = interface(DDN.mscorlib.DNObject)
  ['{D51106E0-0FE4-3DFB-B097-BE9DF4714DF4}']
  { getters & setters } 

    function get_SaveSettings: Boolean;
    procedure set_SaveSettings(value: Boolean);
    function get_SettingsKey: string;
    procedure set_SettingsKey(value: string);

  { methods } 

    ///<summary>Reads the control's application settings into their corresponding properties and updates the control's state.</summary>
    procedure LoadComponentSettings;
    ///<summary>Persists the control's application settings properties.</summary>
    procedure SaveComponentSettings;
    ///<summary>Resets the control's application settings properties to their default values.</summary>
    procedure ResetComponentSettings;

  { propertys } 

    ///<summary>Gets or sets a value indicating whether the control should automatically persist its application settings properties.</summary>
    ///<returns><see langword="true" />
    ///  if the control should automatically persist its state; otherwise, <see langword="false" />
    ///  .</returns>
    property SaveSettings: Boolean read get_SaveSettings write set_SaveSettings;
    ///<summary>Gets or sets the value of the application settings key for the current instance of the control.</summary>
    ///<returns>A <see cref="T:System.String" />
    ///  containing the settings key for the current instance of the control.</returns>
    property SettingsKey: string read get_SettingsKey write set_SettingsKey;
  end;

  //-------------namespace: System.Configuration----------------
  ///<summary>Provides an interface for defining an alternate application settings provider.</summary>
  [DNTypeName('System.Configuration.ISettingsProviderService')]
  DNISettingsProviderService = interface(DDN.mscorlib.DNObject)
  ['{B5F96131-A89B-3E6F-9A55-3BFAEC48177A}']
  { methods } 

    ///<summary>Returns the settings provider compatible with the specified settings property.</summary>
    ///  <param name="property">The <see cref="T:System.Configuration.SettingsProperty" />
    ///  that requires serialization.</param>
    ///<returns>If found, the <see cref="T:System.Configuration.SettingsProvider" />
    ///  that can persist the specified settings property; otherwise, <see langword="null" />
    ///  .</returns>
    function GetSettingsProvider(&property: DNSettingsProperty): DNSettingsProvider;

  end;

  //-------------namespace: System.Configuration----------------
  DNConfigurationCollectionAttributeClass = interface(DDN.mscorlib.DNAttributeClass)
  ['{73AEB2C6-DE0A-56EC-9E61-46B36FC6A71B}']
  { constructors } 

    ///<summary>Initializes a new instance of the <see cref="T:System.Configuration.ConfigurationCollectionAttribute" />
    ///  class.</summary>
    ///  <param name="itemType">The type of the property collection to create.</param>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="itemType" />
    ///  is <see langword="null" />
    ///  .</exception>
    {class} function init(itemType: DDN.mscorlib.DNType): DNConfigurationCollectionAttribute;

  end;

  ///<summary>Declaratively instructs the .NET Framework to create an instance of a configuration element collection. This class cannot be inherited.</summary>
  [DNTypeName('System.Configuration.ConfigurationCollectionAttribute')]
  DNConfigurationCollectionAttribute = interface(DDN.mscorlib.DNAttribute)
  ['{E12BD047-4636-3047-A218-16A832F3813A}']
  { getters & setters } 

    function get_ItemType: DDN.mscorlib.DNType;
    function get_AddItemName: string;
    procedure set_AddItemName(value: string);
    function get_RemoveItemName: string;
    procedure set_RemoveItemName(value: string);
    function get_ClearItemsName: string;
    procedure set_ClearItemsName(value: string);
    function get_CollectionType: DNConfigurationElementCollectionType;
    procedure set_CollectionType(value: DNConfigurationElementCollectionType);
    function get_TypeId: DDN.mscorlib.DNObject;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DDN.mscorlib.DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>Gets the type of the collection element.</summary>
    ///<returns>The type of the collection element.</returns>
    property ItemType: DDN.mscorlib.DNType read get_ItemType;
    ///<summary>Gets or sets the name of the <see langword="&lt;add&gt;" />
    ///  configuration element.</summary>
    ///<returns>The name that substitutes the standard name "add" for the configuration item.</returns>
    property AddItemName: string read get_AddItemName write set_AddItemName;
    ///<summary>Gets or sets the name for the <see langword="&lt;remove&gt;" />
    ///  configuration element.</summary>
    ///<returns>The name that replaces the standard name "remove" for the configuration element.</returns>
    property RemoveItemName: string read get_RemoveItemName write set_RemoveItemName;
    ///<summary>Gets or sets the name for the <see langword="&lt;clear&gt;" />
    ///  configuration element.</summary>
    ///<returns>The name that replaces the standard name "clear" for the configuration item.</returns>
    property ClearItemsName: string read get_ClearItemsName write set_ClearItemsName;
    ///<summary>Gets or sets the type of the <see cref="T:System.Configuration.ConfigurationCollectionAttribute" />
    ///  attribute.</summary>
    ///<returns>The type of the <see cref="T:System.Configuration.ConfigurationCollectionAttribute" />
    ///  .</returns>
    property CollectionType: DNConfigurationElementCollectionType read get_CollectionType write set_CollectionType;
    property TypeId: DDN.mscorlib.DNObject read get_TypeId;
  end;

  TDNConfigurationCollectionAttribute = class(TDNGenericImport<DNConfigurationCollectionAttributeClass, DNConfigurationCollectionAttribute>) end;

  //-------------namespace: System.Configuration----------------
  DNConfigurationPropertyAttributeClass = interface(DDN.mscorlib.DNAttributeClass)
  ['{7854F78F-634C-515D-A4FA-1B5AE2F240C0}']
  { constructors } 

    ///<summary>Initializes a new instance of <see cref="T:System.Configuration.ConfigurationPropertyAttribute" />
    ///  class.</summary>
    ///  <param name="name">Name of the <see cref="T:System.Configuration.ConfigurationProperty" />
    ///  object defined.</param>
    {class} function init(name: string): DNConfigurationPropertyAttribute;

  end;

  ///<summary>Declaratively instructs the .NET Framework to instantiate a configuration property. This class cannot be inherited.</summary>
  [DNTypeName('System.Configuration.ConfigurationPropertyAttribute')]
  DNConfigurationPropertyAttribute = interface(DDN.mscorlib.DNAttribute)
  ['{8BF4D88F-DCFA-3CAA-AD4F-B1ED861E299A}']
  { getters & setters } 

    function get_Name: string;
    function get_DefaultValue: DDN.mscorlib.DNObject;
    procedure set_DefaultValue(value: DDN.mscorlib.DNObject);
    function get_Options: DNConfigurationPropertyOptions;
    procedure set_Options(value: DNConfigurationPropertyOptions);
    function get_IsDefaultCollection: Boolean;
    procedure set_IsDefaultCollection(value: Boolean);
    function get_IsRequired: Boolean;
    procedure set_IsRequired(value: Boolean);
    function get_IsKey: Boolean;
    procedure set_IsKey(value: Boolean);
    function get_TypeId: DDN.mscorlib.DNObject;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DDN.mscorlib.DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>Gets the name of the decorated configuration-element property.</summary>
    ///<returns>The name of the decorated configuration-element property.</returns>
    property Name: string read get_Name;
    ///<summary>Gets or sets the default value for the decorated property.</summary>
    ///<returns>The object representing the default value of the decorated configuration-element property.</returns>
    property DefaultValue: DDN.mscorlib.DNObject read get_DefaultValue write set_DefaultValue;
    ///<summary>Gets or sets the <see cref="T:System.Configuration.ConfigurationPropertyOptions" />
    ///  for the decorated configuration-element property.</summary>
    ///<returns>One of the <see cref="T:System.Configuration.ConfigurationPropertyOptions" />
    ///  enumeration values associated with the property.</returns>
    property Options: DNConfigurationPropertyOptions read get_Options write set_Options;
    ///<summary>Gets or sets a value indicating whether this is the default property collection for the decorated configuration property. </summary>
    ///<returns><see langword="true" />
    ///  if the property represents the default collection of an element; otherwise, <see langword="false" />
    ///  . The default is <see langword="false" />
    ///  .</returns>
    property IsDefaultCollection: Boolean read get_IsDefaultCollection write set_IsDefaultCollection;
    ///<summary>Gets or sets a value indicating whether the decorated element property is required.</summary>
    ///<returns><see langword="true" />
    ///  if the property is required; otherwise, <see langword="false" />
    ///  . The default is <see langword="false" />
    ///  .</returns>
    property IsRequired: Boolean read get_IsRequired write set_IsRequired;
    ///<summary>Gets or sets a value indicating whether this is a key property for the decorated element property.</summary>
    ///<returns><see langword="true" />
    ///  if the property is a key property for an element of the collection; otherwise, <see langword="false" />
    ///  . The default is <see langword="false" />
    ///  .</returns>
    property IsKey: Boolean read get_IsKey write set_IsKey;
    property TypeId: DDN.mscorlib.DNObject read get_TypeId;
  end;

  TDNConfigurationPropertyAttribute = class(TDNGenericImport<DNConfigurationPropertyAttributeClass, DNConfigurationPropertyAttribute>) end;

  //-------------namespace: System.Configuration----------------
  DNConfigurationValidatorAttributeClass = interface(DDN.mscorlib.DNAttributeClass)
  ['{28ABF783-5BAD-591C-BDC1-A0FE5968B05E}']
  { constructors } 

    ///<summary>Initializes a new instance of the <see cref="T:System.Configuration.ConfigurationValidatorAttribute" />
    ///  class using the specified validator type.</summary>
    ///  <param name="validator">The validator type to use when creating an instance of <see cref="T:System.Configuration.ConfigurationValidatorAttribute" />
    ///  .</param>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="validator" />
    ///  is <see langword="null" />
    ///  .</exception><exception cref="T:System.ArgumentException"><paramref name="validator" />
    ///  is not derived from <see cref="T:System.Configuration.ConfigurationValidatorBase" />
    ///  .</exception>
    {class} function init(validator: DDN.mscorlib.DNType): DNConfigurationValidatorAttribute;

  end;

  ///<summary>Serves as the base class for the <see cref="N:System.Configuration" />
  ///  validator attribute types.</summary>
  [DNTypeName('System.Configuration.ConfigurationValidatorAttribute')]
  DNConfigurationValidatorAttribute = interface(DDN.mscorlib.DNAttribute)
  ['{449EFE87-9CC4-3BEC-9B07-1F3A961C1DBC}']
  { getters & setters } 

    function get_ValidatorInstance: DNConfigurationValidatorBase;
    function get_ValidatorType: DDN.mscorlib.DNType;
    function get_TypeId: DDN.mscorlib.DNObject;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DDN.mscorlib.DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>Gets the validator attribute instance.</summary>
    ///<returns>The current <see cref="T:System.Configuration.ConfigurationValidatorBase" />
    ///  .</returns>
    property ValidatorInstance: DNConfigurationValidatorBase read get_ValidatorInstance;
    ///<summary>Gets the type of the validator attribute.</summary>
    ///<returns>The <see cref="T:System.Type" />
    ///  of the current validator attribute instance.</returns>
    property ValidatorType: DDN.mscorlib.DNType read get_ValidatorType;
    property TypeId: DDN.mscorlib.DNObject read get_TypeId;
  end;

  TDNConfigurationValidatorAttribute = class(TDNGenericImport<DNConfigurationValidatorAttributeClass, DNConfigurationValidatorAttribute>) end;

  //-------------namespace: System.Configuration----------------
  DNCallbackValidatorAttributeClass = interface(DNConfigurationValidatorAttributeClass)
  ['{E4179775-AE79-5322-A780-8064CD432C65}']
  { constructors } 

    ///<summary>Initializes a new instance of the <see cref="T:System.Configuration.CallbackValidatorAttribute" />
    ///  class. </summary>
    {class} function init: DNCallbackValidatorAttribute;

  end;

  ///<summary>Specifies a <see cref="T:System.Configuration.CallbackValidator" />
  ///  object to use for code validation. This class cannot be inherited.</summary>
  [DNTypeName('System.Configuration.CallbackValidatorAttribute')]
  DNCallbackValidatorAttribute = interface(DNConfigurationValidatorAttribute)
  ['{2FA1F62A-8720-3850-97D5-CEA51E9D98CF}']
  { getters & setters } 

    function get_ValidatorInstance: DNConfigurationValidatorBase;
    function get_Type: DDN.mscorlib.DNType;
    procedure set_Type(value: DDN.mscorlib.DNType);
    function get_CallbackMethodName: string;
    procedure set_CallbackMethodName(value: string);
    function get_ValidatorType: DDN.mscorlib.DNType;
    function get_TypeId: DDN.mscorlib.DNObject;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DDN.mscorlib.DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>Gets the validator instance.</summary>
    ///<returns>The current <see cref="T:System.Configuration.ConfigurationValidatorBase" />
    ///  instance.</returns>
    ///<exception cref="T:System.ArgumentNullException">The value of the <see cref="P:System.Configuration.CallbackValidatorAttribute.Type" />
    ///  property is <see langword="null" />
    ///  .</exception><exception cref="T:System.ArgumentException">The <see cref="P:System.Configuration.CallbackValidatorAttribute.CallbackMethodName" />
    ///  property is not set to a public static void method with one object parameter.</exception>
    property ValidatorInstance: DNConfigurationValidatorBase read get_ValidatorInstance;
    ///<summary>Gets or sets the type of the validator.</summary>
    ///<returns>The <see cref="T:System.Type" />
    ///  of the current validator attribute instance.</returns>
    property &Type: DDN.mscorlib.DNType read get_Type write set_Type;
    ///<summary>Gets or sets the name of the callback method.</summary>
    ///<returns>The name of the method to call.</returns>
    property CallbackMethodName: string read get_CallbackMethodName write set_CallbackMethodName;
    ///<summary>Gets the type of the validator attribute.</summary>
    ///<returns>The <see cref="T:System.Type" />
    ///  of the current validator attribute instance.</returns>
    property ValidatorType: DDN.mscorlib.DNType read get_ValidatorType;
    property TypeId: DDN.mscorlib.DNObject read get_TypeId;
  end;

  TDNCallbackValidatorAttribute = class(TDNGenericImport<DNCallbackValidatorAttributeClass, DNCallbackValidatorAttribute>) end;

  //-------------namespace: System.Configuration----------------
  DNIntegerValidatorAttributeClass = interface(DNConfigurationValidatorAttributeClass)
  ['{6D733D41-EDA8-5EC8-95D0-B7D746952963}']
  { constructors } 

    ///<summary>Creates a new instance of the <see cref="T:System.Configuration.IntegerValidatorAttribute" />
    ///  class.</summary>
    {class} function init: DNIntegerValidatorAttribute;

  end;

  ///<summary>Declaratively instructs the .NET Framework to perform integer validation on a configuration property. This class cannot be inherited.</summary>
  [DNTypeName('System.Configuration.IntegerValidatorAttribute')]
  DNIntegerValidatorAttribute = interface(DNConfigurationValidatorAttribute)
  ['{373517A6-0E37-36DC-93C0-B6FC15B2C687}']
  { getters & setters } 

    function get_ValidatorInstance: DNConfigurationValidatorBase;
    function get_MinValue: Int32;
    procedure set_MinValue(value: Int32);
    function get_MaxValue: Int32;
    procedure set_MaxValue(value: Int32);
    function get_ExcludeRange: Boolean;
    procedure set_ExcludeRange(value: Boolean);
    function get_ValidatorType: DDN.mscorlib.DNType;
    function get_TypeId: DDN.mscorlib.DNObject;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DDN.mscorlib.DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>Gets an instance of the <see cref="T:System.Configuration.IntegerValidator" />
    ///  class.</summary>
    ///<returns>The <see cref="T:System.Configuration.ConfigurationValidatorBase" />
    ///  validator instance.</returns>
    property ValidatorInstance: DNConfigurationValidatorBase read get_ValidatorInstance;
    ///<summary>Gets or sets the minimum value allowed for the property.</summary>
    ///<returns>An integer that indicates the allowed minimum value.</returns>
    ///<exception cref="T:System.ArgumentOutOfRangeException">The selected value is greater than <see cref="P:System.Configuration.IntegerValidatorAttribute.MaxValue" />
    ///  .</exception>
    property MinValue: Int32 read get_MinValue write set_MinValue;
    ///<summary>Gets or sets the maximum value allowed for the property.</summary>
    ///<returns>An integer that indicates the allowed maximum value.</returns>
    ///<exception cref="T:System.ArgumentOutOfRangeException">The selected value is less than <see cref="P:System.Configuration.IntegerValidatorAttribute.MinValue" />
    ///  .</exception>
    property MaxValue: Int32 read get_MaxValue write set_MaxValue;
    ///<summary>Gets or sets a value that indicates whether to include or exclude the integers in the range defined by the <see cref="P:System.Configuration.IntegerValidatorAttribute.MinValue" />
    ///  and <see cref="P:System.Configuration.IntegerValidatorAttribute.MaxValue" />
    ///  property values.</summary>
    ///<returns><see langword="true" />
    ///  if the value must be excluded; otherwise, <see langword="false" />
    ///  . The default is <see langword="false" />
    ///  .</returns>
    property ExcludeRange: Boolean read get_ExcludeRange write set_ExcludeRange;
    ///<summary>Gets the type of the validator attribute.</summary>
    ///<returns>The <see cref="T:System.Type" />
    ///  of the current validator attribute instance.</returns>
    property ValidatorType: DDN.mscorlib.DNType read get_ValidatorType;
    property TypeId: DDN.mscorlib.DNObject read get_TypeId;
  end;

  TDNIntegerValidatorAttribute = class(TDNGenericImport<DNIntegerValidatorAttributeClass, DNIntegerValidatorAttribute>) end;

  //-------------namespace: System.Configuration----------------
  DNLongValidatorAttributeClass = interface(DNConfigurationValidatorAttributeClass)
  ['{224F440B-641F-573F-ABD5-DFC0BFC9CEAF}']
  { constructors } 

    ///<summary>Initializes a new instance of the <see cref="T:System.Configuration.LongValidatorAttribute" />
    ///  class.</summary>
    {class} function init: DNLongValidatorAttribute;

  end;

  ///<summary>Declaratively instructs the .NET Framework to perform long-integer validation on a configuration property. This class cannot be inherited.</summary>
  [DNTypeName('System.Configuration.LongValidatorAttribute')]
  DNLongValidatorAttribute = interface(DNConfigurationValidatorAttribute)
  ['{CCB0D833-1217-3423-AE4A-DB35B6429E5B}']
  { getters & setters } 

    function get_ValidatorInstance: DNConfigurationValidatorBase;
    function get_MinValue: Int64;
    procedure set_MinValue(value: Int64);
    function get_MaxValue: Int64;
    procedure set_MaxValue(value: Int64);
    function get_ExcludeRange: Boolean;
    procedure set_ExcludeRange(value: Boolean);
    function get_ValidatorType: DDN.mscorlib.DNType;
    function get_TypeId: DDN.mscorlib.DNObject;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DDN.mscorlib.DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>Gets an instance of the <see cref="T:System.Configuration.LongValidator" />
    ///  class.</summary>
    ///<returns>The <see cref="T:System.Configuration.ConfigurationValidatorBase" />
    ///  validator instance.</returns>
    property ValidatorInstance: DNConfigurationValidatorBase read get_ValidatorInstance;
    ///<summary>Gets or sets the minimum value allowed for the property.</summary>
    ///<returns>An integer that indicates the allowed minimum value.</returns>
    ///<exception cref="T:System.ArgumentOutOfRangeException">The selected value is greater than <see cref="P:System.Configuration.LongValidatorAttribute.MaxValue" />
    ///  .</exception>
    property MinValue: Int64 read get_MinValue write set_MinValue;
    ///<summary>Gets or sets the maximum value allowed for the property.</summary>
    ///<returns>A long integer that indicates the allowed maximum value.</returns>
    ///<exception cref="T:System.ArgumentOutOfRangeException">The selected value is less than <see cref="P:System.Configuration.LongValidatorAttribute.MinValue" />
    ///  .</exception>
    property MaxValue: Int64 read get_MaxValue write set_MaxValue;
    ///<summary>Gets or sets a value that indicates whether to include or exclude the integers in the range defined by the <see cref="P:System.Configuration.LongValidatorAttribute.MinValue" />
    ///  and <see cref="P:System.Configuration.LongValidatorAttribute.MaxValue" />
    ///  property values.</summary>
    ///<returns><see langword="true" />
    ///  if the value must be excluded; otherwise, <see langword="false" />
    ///  . The default is <see langword="false" />
    ///  .</returns>
    property ExcludeRange: Boolean read get_ExcludeRange write set_ExcludeRange;
    ///<summary>Gets the type of the validator attribute.</summary>
    ///<returns>The <see cref="T:System.Type" />
    ///  of the current validator attribute instance.</returns>
    property ValidatorType: DDN.mscorlib.DNType read get_ValidatorType;
    property TypeId: DDN.mscorlib.DNObject read get_TypeId;
  end;

  TDNLongValidatorAttribute = class(TDNGenericImport<DNLongValidatorAttributeClass, DNLongValidatorAttribute>) end;

  //-------------namespace: System.Configuration----------------
  DNPositiveTimeSpanValidatorAttributeClass = interface(DNConfigurationValidatorAttributeClass)
  ['{FCC911CC-EF6B-5897-A3C8-57458C4E355F}']
  { constructors } 

    ///<summary>Initializes a new instance of the <see cref="T:System.Configuration.PositiveTimeSpanValidatorAttribute" />
    ///  class. </summary>
    {class} function init: DNPositiveTimeSpanValidatorAttribute;

  end;

  ///<summary>Declaratively instructs the .NET Framework to perform time validation on a configuration property. This class cannot be inherited.</summary>
  [DNTypeName('System.Configuration.PositiveTimeSpanValidatorAttribute')]
  DNPositiveTimeSpanValidatorAttribute = interface(DNConfigurationValidatorAttribute)
  ['{B5F5BEE4-E244-31D0-9F8C-6BC99031DABE}']
  { getters & setters } 

    function get_ValidatorInstance: DNConfigurationValidatorBase;
    function get_ValidatorType: DDN.mscorlib.DNType;
    function get_TypeId: DDN.mscorlib.DNObject;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DDN.mscorlib.DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>Gets an instance of the <see cref="T:System.Configuration.PositiveTimeSpanValidator" />
    ///  class.</summary>
    ///<returns>The <see cref="T:System.Configuration.ConfigurationValidatorBase" />
    ///  validator instance. </returns>
    property ValidatorInstance: DNConfigurationValidatorBase read get_ValidatorInstance;
    ///<summary>Gets the type of the validator attribute.</summary>
    ///<returns>The <see cref="T:System.Type" />
    ///  of the current validator attribute instance.</returns>
    property ValidatorType: DDN.mscorlib.DNType read get_ValidatorType;
    property TypeId: DDN.mscorlib.DNObject read get_TypeId;
  end;

  TDNPositiveTimeSpanValidatorAttribute = class(TDNGenericImport<DNPositiveTimeSpanValidatorAttributeClass, DNPositiveTimeSpanValidatorAttribute>) end;

  //-------------namespace: System.Configuration----------------
  DNRegexStringValidatorAttributeClass = interface(DNConfigurationValidatorAttributeClass)
  ['{E7696629-9071-51C4-B334-520072DCC456}']
  { constructors } 

    ///<summary>Initializes a new instance of the <see cref="T:System.Configuration.RegexStringValidatorAttribute" />
    ///  object.</summary>
    ///  <param name="regex">The string to use for regular expression validation.</param>
    {class} function init(regex: string): DNRegexStringValidatorAttribute;

  end;

  ///<summary>Declaratively instructs the .NET Framework to perform string validation on a configuration property using a regular expression. This class cannot be inherited.</summary>
  [DNTypeName('System.Configuration.RegexStringValidatorAttribute')]
  DNRegexStringValidatorAttribute = interface(DNConfigurationValidatorAttribute)
  ['{DD98AD9B-E7D5-3A85-8424-3B3999A136BA}']
  { getters & setters } 

    function get_ValidatorInstance: DNConfigurationValidatorBase;
    function get_Regex: string;
    function get_ValidatorType: DDN.mscorlib.DNType;
    function get_TypeId: DDN.mscorlib.DNObject;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DDN.mscorlib.DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>Gets an instance of the <see cref="T:System.Configuration.RegexStringValidator" />
    ///  class.</summary>
    ///<returns>The <see cref="T:System.Configuration.ConfigurationValidatorBase" />
    ///  validator instance.</returns>
    property ValidatorInstance: DNConfigurationValidatorBase read get_ValidatorInstance;
    ///<summary>Gets the string used to perform regular-expression validation.</summary>
    ///<returns>The string containing the regular expression used to filter the string assigned to the decorated configuration-element property.</returns>
    property Regex: string read get_Regex;
    ///<summary>Gets the type of the validator attribute.</summary>
    ///<returns>The <see cref="T:System.Type" />
    ///  of the current validator attribute instance.</returns>
    property ValidatorType: DDN.mscorlib.DNType read get_ValidatorType;
    property TypeId: DDN.mscorlib.DNObject read get_TypeId;
  end;

  TDNRegexStringValidatorAttribute = class(TDNGenericImport<DNRegexStringValidatorAttributeClass, DNRegexStringValidatorAttribute>) end;

  //-------------namespace: System.Configuration----------------
  DNStringValidatorAttributeClass = interface(DNConfigurationValidatorAttributeClass)
  ['{424C5DC4-5545-56F3-923E-AC22905EDDAB}']
  { constructors } 

    ///<summary>Initializes a new instance of the <see cref="T:System.Configuration.StringValidatorAttribute" />
    ///  class.</summary>
    {class} function init: DNStringValidatorAttribute;

  end;

  ///<summary>Declaratively instructs the .NET Framework to perform string validation on a configuration property. This class cannot be inherited.</summary>
  [DNTypeName('System.Configuration.StringValidatorAttribute')]
  DNStringValidatorAttribute = interface(DNConfigurationValidatorAttribute)
  ['{CD1673B6-5319-3401-904C-80DC3A0F426A}']
  { getters & setters } 

    function get_ValidatorInstance: DNConfigurationValidatorBase;
    function get_MinLength: Int32;
    procedure set_MinLength(value: Int32);
    function get_MaxLength: Int32;
    procedure set_MaxLength(value: Int32);
    function get_InvalidCharacters: string;
    procedure set_InvalidCharacters(value: string);
    function get_ValidatorType: DDN.mscorlib.DNType;
    function get_TypeId: DDN.mscorlib.DNObject;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DDN.mscorlib.DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>Gets an instance of the <see cref="T:System.Configuration.StringValidator" />
    ///  class.</summary>
    ///<returns>A current <see cref="T:System.Configuration.StringValidator" />
    ///  settings in a <see cref="T:System.Configuration.ConfigurationValidatorBase" />
    ///  validator instance.</returns>
    property ValidatorInstance: DNConfigurationValidatorBase read get_ValidatorInstance;
    ///<summary>Gets or sets the minimum allowed value for the string to assign to the property.</summary>
    ///<returns>An integer that indicates the allowed minimum length for the string to assign to the property.</returns>
    ///<exception cref="T:System.ArgumentOutOfRangeException">The selected value is greater than <see cref="P:System.Configuration.StringValidatorAttribute.MaxLength" />
    ///  .</exception>
    property MinLength: Int32 read get_MinLength write set_MinLength;
    ///<summary>Gets or sets the maximum length allowed for the string to assign to the property.</summary>
    ///<returns>An integer that indicates the maximum allowed length for the string to assign to the property.</returns>
    ///<exception cref="T:System.ArgumentOutOfRangeException">The selected value is less than <see cref="P:System.Configuration.StringValidatorAttribute.MinLength" />
    ///  .</exception>
    property MaxLength: Int32 read get_MaxLength write set_MaxLength;
    ///<summary>Gets or sets the invalid characters for the property.</summary>
    ///<returns>The string that contains the set of characters that are not allowed for the property.</returns>
    property InvalidCharacters: string read get_InvalidCharacters write set_InvalidCharacters;
    ///<summary>Gets the type of the validator attribute.</summary>
    ///<returns>The <see cref="T:System.Type" />
    ///  of the current validator attribute instance.</returns>
    property ValidatorType: DDN.mscorlib.DNType read get_ValidatorType;
    property TypeId: DDN.mscorlib.DNObject read get_TypeId;
  end;

  TDNStringValidatorAttribute = class(TDNGenericImport<DNStringValidatorAttributeClass, DNStringValidatorAttribute>) end;

  //-------------namespace: System.Configuration----------------
  DNSubclassTypeValidatorAttributeClass = interface(DNConfigurationValidatorAttributeClass)
  ['{377981B8-808B-50B9-A127-C8626F2DD102}']
  { constructors } 

    ///<summary>Initializes a new instance of the <see cref="T:System.Configuration.SubclassTypeValidatorAttribute" />
    ///  class. </summary>
    ///  <param name="baseClass">The base class type.</param>
    {class} function init(baseClass: DDN.mscorlib.DNType): DNSubclassTypeValidatorAttribute;

  end;

  ///<summary>Declaratively instructs the .NET Framework to perform validation on a configuration property. This class cannot be inherited.</summary>
  [DNTypeName('System.Configuration.SubclassTypeValidatorAttribute')]
  DNSubclassTypeValidatorAttribute = interface(DNConfigurationValidatorAttribute)
  ['{9A06F141-568D-33E8-85C2-995F88155C27}']
  { getters & setters } 

    function get_ValidatorInstance: DNConfigurationValidatorBase;
    function get_BaseClass: DDN.mscorlib.DNType;
    function get_ValidatorType: DDN.mscorlib.DNType;
    function get_TypeId: DDN.mscorlib.DNObject;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DDN.mscorlib.DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>Gets the validator attribute instance.</summary>
    ///<returns>The current <see cref="T:System.Configuration.ConfigurationValidatorBase" />
    ///  instance.</returns>
    property ValidatorInstance: DNConfigurationValidatorBase read get_ValidatorInstance;
    ///<summary>Gets the base type of the object being validated.</summary>
    ///<returns>The base type of the object being validated.</returns>
    property BaseClass: DDN.mscorlib.DNType read get_BaseClass;
    ///<summary>Gets the type of the validator attribute.</summary>
    ///<returns>The <see cref="T:System.Type" />
    ///  of the current validator attribute instance.</returns>
    property ValidatorType: DDN.mscorlib.DNType read get_ValidatorType;
    property TypeId: DDN.mscorlib.DNObject read get_TypeId;
  end;

  TDNSubclassTypeValidatorAttribute = class(TDNGenericImport<DNSubclassTypeValidatorAttributeClass, DNSubclassTypeValidatorAttribute>) end;

  //-------------namespace: System.Configuration----------------
  DNTimeSpanValidatorAttributeClass = interface(DNConfigurationValidatorAttributeClass)
  ['{9CF61ED8-1BBF-583B-AF77-A11224C333DE}']
  { constructors } 

    ///<summary>Initializes a new instance of the <see cref="T:System.Configuration.TimeSpanValidatorAttribute" />
    ///  class.</summary>
    {class} function init: DNTimeSpanValidatorAttribute;

  end;

  ///<summary>Declaratively instructs the .NET Framework to perform time validation on a configuration property. This class cannot be inherited.</summary>
  [DNTypeName('System.Configuration.TimeSpanValidatorAttribute')]
  DNTimeSpanValidatorAttribute = interface(DNConfigurationValidatorAttribute)
  ['{4742AE00-632C-3534-AC8B-AB5B0A86131E}']
  { getters & setters } 

    function get_ValidatorInstance: DNConfigurationValidatorBase;
    function get_MinValue: DDN.mscorlib.DNTimeSpan;
    function get_MaxValue: DDN.mscorlib.DNTimeSpan;
    function get_MinValueString: string;
    procedure set_MinValueString(value: string);
    function get_MaxValueString: string;
    procedure set_MaxValueString(value: string);
    function get_ExcludeRange: Boolean;
    procedure set_ExcludeRange(value: Boolean);
    function get_ValidatorType: DDN.mscorlib.DNType;
    function get_TypeId: DDN.mscorlib.DNObject;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DDN.mscorlib.DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>Gets an instance of the <see cref="T:System.Configuration.TimeSpanValidator" />
    ///  class.</summary>
    ///<returns>The <see cref="T:System.Configuration.ConfigurationValidatorBase" />
    ///  validator instance. </returns>
    property ValidatorInstance: DNConfigurationValidatorBase read get_ValidatorInstance;
    ///<summary>Gets the absolute minimum <see cref="T:System.TimeSpan" />
    ///  value.</summary>
    ///<returns>The allowed minimum <see cref="T:System.TimeSpan" />
    ///  value. </returns>
    property MinValue: DDN.mscorlib.DNTimeSpan read get_MinValue;
    ///<summary>Gets the absolute maximum <see cref="T:System.TimeSpan" />
    ///  value.</summary>
    ///<returns>The allowed maximum <see cref="T:System.TimeSpan" />
    ///  value. </returns>
    property MaxValue: DDN.mscorlib.DNTimeSpan read get_MaxValue;
    ///<summary>Gets or sets the relative minimum <see cref="T:System.TimeSpan" />
    ///  value.</summary>
    ///<returns>The minimum allowed <see cref="T:System.TimeSpan" />
    ///  value. </returns>
    ///<exception cref="T:System.ArgumentOutOfRangeException">The selected value represents more than <see cref="P:System.Configuration.TimeSpanValidatorAttribute.MaxValue" />
    ///  .</exception>
    property MinValueString: string read get_MinValueString write set_MinValueString;
    ///<summary>Gets or sets the relative maximum <see cref="T:System.TimeSpan" />
    ///  value.</summary>
    ///<returns>The allowed maximum <see cref="T:System.TimeSpan" />
    ///  value. </returns>
    ///<exception cref="T:System.ArgumentOutOfRangeException">The selected value represents less than <see cref="P:System.Configuration.TimeSpanValidatorAttribute.MinValue" />
    ///  .</exception>
    property MaxValueString: string read get_MaxValueString write set_MaxValueString;
    ///<summary>Gets or sets a value that indicates whether to include or exclude the integers in the range as defined by <see cref="P:System.Configuration.TimeSpanValidatorAttribute.MinValueString" />
    ///  and <see cref="P:System.Configuration.TimeSpanValidatorAttribute.MaxValueString" />
    ///  .</summary>
    ///<returns><see langword="true" />
    ///  if the value must be excluded; otherwise, <see langword="false" />
    ///  . The default is <see langword="false" />
    ///  .</returns>
    property ExcludeRange: Boolean read get_ExcludeRange write set_ExcludeRange;
    ///<summary>Gets the type of the validator attribute.</summary>
    ///<returns>The <see cref="T:System.Type" />
    ///  of the current validator attribute instance.</returns>
    property ValidatorType: DDN.mscorlib.DNType read get_ValidatorType;
    property TypeId: DDN.mscorlib.DNObject read get_TypeId;
  end;

  TDNTimeSpanValidatorAttribute = class(TDNGenericImport<DNTimeSpanValidatorAttributeClass, DNTimeSpanValidatorAttribute>)
  public const
    ///<summary>Gets the absolute minimum value allowed.</summary>
   TimeSpanMinValue = '-10675199.02:48:05.4775808';
    ///<summary>Gets the absolute maximum value allowed.</summary>
   TimeSpanMaxValue = '10675199.02:48:05.4775807';
  end;

  //-------------namespace: System.Configuration----------------
  DNDefaultSettingValueAttributeClass = interface(DDN.mscorlib.DNAttributeClass)
  ['{C0A79122-C29C-5DCB-8C0C-E64158223818}']
  { constructors } 

    ///<summary>Initializes an instance of the <see cref="T:System.Configuration.DefaultSettingValueAttribute" />
    ///  class.</summary>
    ///  <param name="value">A <see cref="T:System.String" />
    ///  that represents the default value for the property. </param>
    {class} function init(value: string): DNDefaultSettingValueAttribute;

  end;

  ///<summary>Specifies the default value for an application settings property.</summary>
  [DNTypeName('System.Configuration.DefaultSettingValueAttribute')]
  DNDefaultSettingValueAttribute = interface(DDN.mscorlib.DNAttribute)
  ['{D9772EF1-F025-3124-BC39-1EEE92E699DB}']
  { getters & setters } 

    function get_Value: string;
    function get_TypeId: DDN.mscorlib.DNObject;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DDN.mscorlib.DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>Gets the default value for the application settings property.</summary>
    ///<returns>A <see cref="T:System.String" />
    ///  that represents the default value for the property.</returns>
    property Value: string read get_Value;
    property TypeId: DDN.mscorlib.DNObject read get_TypeId;
  end;

  TDNDefaultSettingValueAttribute = class(TDNGenericImport<DNDefaultSettingValueAttributeClass, DNDefaultSettingValueAttribute>) end;

  //-------------namespace: System.Configuration----------------
  DNNoSettingsVersionUpgradeAttributeClass = interface(DDN.mscorlib.DNAttributeClass)
  ['{F05694A9-40C9-564A-9395-032C16E8C236}']
  { constructors } 

    ///<summary>Initializes a new instance of the <see cref="T:System.Configuration.NoSettingsVersionUpgradeAttribute" />
    ///  class.</summary>
    {class} function init: DNNoSettingsVersionUpgradeAttribute;

  end;

  ///<summary>Specifies that a settings provider should disable any logic that gets invoked when an application upgrade is detected. This class cannot be inherited.</summary>
  [DNTypeName('System.Configuration.NoSettingsVersionUpgradeAttribute')]
  DNNoSettingsVersionUpgradeAttribute = interface(DDN.mscorlib.DNAttribute)
  ['{428965C3-1E31-3F1C-853A-A16537CA37F4}']
  { getters & setters } 

    function get_TypeId: DDN.mscorlib.DNObject;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DDN.mscorlib.DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property TypeId: DDN.mscorlib.DNObject read get_TypeId;
  end;

  TDNNoSettingsVersionUpgradeAttribute = class(TDNGenericImport<DNNoSettingsVersionUpgradeAttributeClass, DNNoSettingsVersionUpgradeAttribute>) end;

  //-------------namespace: System.Configuration----------------
  DNSettingAttributeClass = interface(DDN.mscorlib.DNAttributeClass)
  ['{73009DD0-1F7A-53E9-A630-24A146015736}']
  { constructors } 

    ///<summary>Initializes a new instance of the <see cref="T:System.Configuration.SettingAttribute" />
    ///  class. </summary>
    {class} function init: DNSettingAttribute;

  end;

  ///<summary>Represents a custom settings attribute used to associate settings information with a settings property.</summary>
  [DNTypeName('System.Configuration.SettingAttribute')]
  DNSettingAttribute = interface(DDN.mscorlib.DNAttribute)
  ['{91429316-A677-3FCC-B79A-33E345359EF3}']
  { getters & setters } 

    function get_TypeId: DDN.mscorlib.DNObject;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DDN.mscorlib.DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property TypeId: DDN.mscorlib.DNObject read get_TypeId;
  end;

  TDNSettingAttribute = class(TDNGenericImport<DNSettingAttributeClass, DNSettingAttribute>) end;

  //-------------namespace: System.Configuration----------------
  DNApplicationScopedSettingAttributeClass = interface(DNSettingAttributeClass)
  ['{CAD6B9D9-96D1-5512-893C-A2EF15602303}']
  { constructors } 

    ///<summary>Initializes a new instance of the <see cref="T:System.Configuration.ApplicationScopedSettingAttribute" />
    ///  class. </summary>
    {class} function init: DNApplicationScopedSettingAttribute;

  end;

  ///<summary>Specifies that an application settings property has a common value for all users of an application. This class cannot be inherited.</summary>
  [DNTypeName('System.Configuration.ApplicationScopedSettingAttribute')]
  DNApplicationScopedSettingAttribute = interface(DNSettingAttribute)
  ['{59775A70-BEE8-3E14-A9DA-219A288FE886}']
  { getters & setters } 

    function get_TypeId: DDN.mscorlib.DNObject;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DDN.mscorlib.DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property TypeId: DDN.mscorlib.DNObject read get_TypeId;
  end;

  TDNApplicationScopedSettingAttribute = class(TDNGenericImport<DNApplicationScopedSettingAttributeClass, DNApplicationScopedSettingAttribute>) end;

  //-------------namespace: System.Configuration----------------
  DNUserScopedSettingAttributeClass = interface(DNSettingAttributeClass)
  ['{C4A5CA5C-06B7-5686-936C-9D9CFDED635F}']
  { constructors } 

    ///<summary>Initializes a new instance of the <see cref="T:System.Configuration.UserScopedSettingAttribute" />
    ///  class.</summary>
    {class} function init: DNUserScopedSettingAttribute;

  end;

  ///<summary>Specifies that an application settings group or property contains distinct values for each user of an application. This class cannot be inherited.</summary>
  [DNTypeName('System.Configuration.UserScopedSettingAttribute')]
  DNUserScopedSettingAttribute = interface(DNSettingAttribute)
  ['{4CAD4652-D77C-39AE-8CE9-910CDBFDBB1A}']
  { getters & setters } 

    function get_TypeId: DDN.mscorlib.DNObject;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DDN.mscorlib.DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property TypeId: DDN.mscorlib.DNObject read get_TypeId;
  end;

  TDNUserScopedSettingAttribute = class(TDNGenericImport<DNUserScopedSettingAttributeClass, DNUserScopedSettingAttribute>) end;

  //-------------namespace: System.Configuration----------------
  DNSettingsDescriptionAttributeClass = interface(DDN.mscorlib.DNAttributeClass)
  ['{A121748C-A823-5C99-A204-06AFCF892BF4}']
  { constructors } 

    ///<summary>Initializes an instance of the <see cref="T:System.Configuration.SettingsDescriptionAttribute" />
    ///  class.</summary>
    ///  <param name="description">The <see cref="T:System.String" />
    ///  used as descriptive text.</param>
    {class} function init(description: string): DNSettingsDescriptionAttribute;

  end;

  ///<summary>Provides a string that describes an individual configuration property. This class cannot be inherited.</summary>
  [DNTypeName('System.Configuration.SettingsDescriptionAttribute')]
  DNSettingsDescriptionAttribute = interface(DDN.mscorlib.DNAttribute)
  ['{C0D7A7E9-44E5-32CD-B060-60ADD2F1D435}']
  { getters & setters } 

    function get_Description: string;
    function get_TypeId: DDN.mscorlib.DNObject;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DDN.mscorlib.DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>Gets the descriptive text for the associated configuration property.</summary>
    ///<returns>A <see cref="T:System.String" />
    ///  containing the descriptive text for the associated configuration property.</returns>
    property Description: string read get_Description;
    property TypeId: DDN.mscorlib.DNObject read get_TypeId;
  end;

  TDNSettingsDescriptionAttribute = class(TDNGenericImport<DNSettingsDescriptionAttributeClass, DNSettingsDescriptionAttribute>) end;

  //-------------namespace: System.Configuration----------------
  DNSettingsGroupDescriptionAttributeClass = interface(DDN.mscorlib.DNAttributeClass)
  ['{B61AEB18-5DC4-5B0C-9E28-82003946426A}']
  { constructors } 

    ///<summary>Initializes a new instance of the <see cref="T:System.Configuration.SettingsGroupDescriptionAttribute" />
    ///  class.</summary>
    ///  <param name="description">A <see cref="T:System.String" />
    ///  containing the descriptive text for the application settings group.</param>
    {class} function init(description: string): DNSettingsGroupDescriptionAttribute;

  end;

  ///<summary>Provides a string that describes an application settings property group. This class cannot be inherited.</summary>
  [DNTypeName('System.Configuration.SettingsGroupDescriptionAttribute')]
  DNSettingsGroupDescriptionAttribute = interface(DDN.mscorlib.DNAttribute)
  ['{F884144D-37F5-3B16-BACB-300D65345871}']
  { getters & setters } 

    function get_Description: string;
    function get_TypeId: DDN.mscorlib.DNObject;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DDN.mscorlib.DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>The descriptive text for the application settings properties group.</summary>
    ///<returns>A <see cref="T:System.String" />
    ///  containing the descriptive text for the application settings group.</returns>
    property Description: string read get_Description;
    property TypeId: DDN.mscorlib.DNObject read get_TypeId;
  end;

  TDNSettingsGroupDescriptionAttribute = class(TDNGenericImport<DNSettingsGroupDescriptionAttributeClass, DNSettingsGroupDescriptionAttribute>) end;

  //-------------namespace: System.Configuration----------------
  DNSettingsGroupNameAttributeClass = interface(DDN.mscorlib.DNAttributeClass)
  ['{6704BFB1-7CD5-5453-A148-E7F63CD91DEC}']
  { constructors } 

    ///<summary>Initializes a new instance of the <see cref="T:System.Configuration.SettingsGroupNameAttribute" />
    ///  class.</summary>
    ///  <param name="groupName">A <see cref="T:System.String" />
    ///  containing the name of the application settings property group.</param>
    {class} function init(groupName: string): DNSettingsGroupNameAttribute;

  end;

  ///<summary>Specifies a name for application settings property group. This class cannot be inherited.</summary>
  [DNTypeName('System.Configuration.SettingsGroupNameAttribute')]
  DNSettingsGroupNameAttribute = interface(DDN.mscorlib.DNAttribute)
  ['{58E28509-AF19-35CE-836D-438F70783561}']
  { getters & setters } 

    function get_GroupName: string;
    function get_TypeId: DDN.mscorlib.DNObject;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DDN.mscorlib.DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>Gets the name of the application settings property group.</summary>
    ///<returns>A <see cref="T:System.String" />
    ///  containing the name of the application settings property group.</returns>
    property GroupName: string read get_GroupName;
    property TypeId: DDN.mscorlib.DNObject read get_TypeId;
  end;

  TDNSettingsGroupNameAttribute = class(TDNGenericImport<DNSettingsGroupNameAttributeClass, DNSettingsGroupNameAttribute>) end;

  //-------------namespace: System.Configuration----------------
  DNSettingsManageabilityAttributeClass = interface(DDN.mscorlib.DNAttributeClass)
  ['{927AE123-ADF0-5C8F-9364-1A7C0A5199B6}']
  { constructors } 

    ///<summary>Initializes a new instance of the <see cref="T:System.Configuration.SettingsManageabilityAttribute" />
    ///  class.</summary>
    ///  <param name="manageability">A <see cref="T:System.Configuration.SettingsManageability" />
    ///  value that enumerates the services being requested. </param>
    {class} function init(manageability: DNSettingsManageability): DNSettingsManageabilityAttribute;

  end;

  ///<summary>Specifies special services for application settings properties. This class cannot be inherited.</summary>
  [DNTypeName('System.Configuration.SettingsManageabilityAttribute')]
  DNSettingsManageabilityAttribute = interface(DDN.mscorlib.DNAttribute)
  ['{BDD79B68-13F3-3607-9BCE-201C0F015E58}']
  { getters & setters } 

    function get_Manageability: DNSettingsManageability;
    function get_TypeId: DDN.mscorlib.DNObject;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DDN.mscorlib.DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>Gets the set of special services that have been requested.</summary>
    ///<returns>A value that results from using the logical <see langword="OR" />
    ///  operator to combine all the <see cref="T:System.Configuration.SettingsManageability" />
    ///  enumeration values corresponding to the requested services.</returns>
    property Manageability: DNSettingsManageability read get_Manageability;
    property TypeId: DDN.mscorlib.DNObject read get_TypeId;
  end;

  TDNSettingsManageabilityAttribute = class(TDNGenericImport<DNSettingsManageabilityAttributeClass, DNSettingsManageabilityAttribute>) end;

  //-------------namespace: System.Configuration----------------
  DNSettingsProviderAttributeClass = interface(DDN.mscorlib.DNAttributeClass)
  ['{3C04D5A3-F96E-55F7-894B-E5D422AC372D}']
  { constructors } 

    ///<summary>Initializes an instance of the <see cref="T:System.Configuration.SettingsProviderAttribute" />
    ///  class.</summary>
    ///  <param name="providerTypeName">A <see cref="T:System.String" />
    ///  containing the name of the settings provider.</param>
    {class} function init(providerTypeName: string): DNSettingsProviderAttribute; overload;
    ///<summary>Initializes a new instance of the <see cref="T:System.Configuration.SettingsProviderAttribute" />
    ///  class. </summary>
    ///  <param name="providerType">A <see cref="T:System.Type" />
    ///  containing the settings provider type.</param>
    {class} function init(providerType: DDN.mscorlib.DNType): DNSettingsProviderAttribute; overload;

  end;

  ///<summary>Specifies the settings provider used to provide storage for the current application settings class or property. This class cannot be inherited.</summary>
  [DNTypeName('System.Configuration.SettingsProviderAttribute')]
  DNSettingsProviderAttribute = interface(DDN.mscorlib.DNAttribute)
  ['{4F6D6F90-D263-3FFE-B9AD-22FFEEA95891}']
  { getters & setters } 

    function get_ProviderTypeName: string;
    function get_TypeId: DDN.mscorlib.DNObject;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DDN.mscorlib.DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>Gets the type name of the settings provider.</summary>
    ///<returns>A <see cref="T:System.String" />
    ///  containing the name of the settings provider.</returns>
    property ProviderTypeName: string read get_ProviderTypeName;
    property TypeId: DDN.mscorlib.DNObject read get_TypeId;
  end;

  TDNSettingsProviderAttribute = class(TDNGenericImport<DNSettingsProviderAttributeClass, DNSettingsProviderAttribute>) end;

  //-------------namespace: System.Configuration----------------
  DNSettingsSerializeAsAttributeClass = interface(DDN.mscorlib.DNAttributeClass)
  ['{49CEE322-4191-5F4F-9ACB-AD4F8FA83268}']
  { constructors } 

    ///<summary>Initializes an instance of the <see cref="T:System.Configuration.SettingsSerializeAsAttribute" />
    ///  class.</summary>
    ///  <param name="serializeAs">A <see cref="T:System.Configuration.SettingsSerializeAs" />
    ///  enumerated value that specifies the serialization scheme.</param>
    {class} function init(serializeAs: DNSettingsSerializeAs): DNSettingsSerializeAsAttribute;

  end;

  ///<summary>Specifies the serialization mechanism that the settings provider should use. This class cannot be inherited.</summary>
  [DNTypeName('System.Configuration.SettingsSerializeAsAttribute')]
  DNSettingsSerializeAsAttribute = interface(DDN.mscorlib.DNAttribute)
  ['{BFA3991F-AD3E-38C0-A790-9C33ADDE5BB7}']
  { getters & setters } 

    function get_SerializeAs: DNSettingsSerializeAs;
    function get_TypeId: DDN.mscorlib.DNObject;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DDN.mscorlib.DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>Gets the <see cref="T:System.Configuration.SettingsSerializeAs" />
    ///  enumeration value that specifies the serialization scheme.</summary>
    ///<returns>A <see cref="T:System.Configuration.SettingsSerializeAs" />
    ///  enumerated value that specifies the serialization scheme.</returns>
    property SerializeAs: DNSettingsSerializeAs read get_SerializeAs;
    property TypeId: DDN.mscorlib.DNObject read get_TypeId;
  end;

  TDNSettingsSerializeAsAttribute = class(TDNGenericImport<DNSettingsSerializeAsAttributeClass, DNSettingsSerializeAsAttribute>) end;

  //-------------namespace: System.Configuration----------------
  DNSpecialSettingAttributeClass = interface(DDN.mscorlib.DNAttributeClass)
  ['{F2ECD35C-F889-5743-B832-F827B9FAA267}']
  { constructors } 

    ///<summary>Initializes a new instance of the <see cref="T:System.Configuration.SpecialSettingAttribute" />
    ///  class.</summary>
    ///  <param name="specialSetting">A <see cref="T:System.Configuration.SpecialSetting" />
    ///  enumeration value defining the category of the application settings property.</param>
    {class} function init(specialSetting: DNSpecialSetting): DNSpecialSettingAttribute;

  end;

  ///<summary>Indicates that an application settings property has a special significance. This class cannot be inherited.</summary>
  [DNTypeName('System.Configuration.SpecialSettingAttribute')]
  DNSpecialSettingAttribute = interface(DDN.mscorlib.DNAttribute)
  ['{F61D96AF-3FA4-3ED8-9C2E-E9071EE02C63}']
  { getters & setters } 

    function get_SpecialSetting: DNSpecialSetting;
    function get_TypeId: DDN.mscorlib.DNObject;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DDN.mscorlib.DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>Gets the value describing the special setting category of the application settings property.</summary>
    ///<returns>A <see cref="T:System.Configuration.SpecialSetting" />
    ///  enumeration value defining the category of the application settings property.</returns>
    property SpecialSetting: DNSpecialSetting read get_SpecialSetting;
    property TypeId: DDN.mscorlib.DNObject read get_TypeId;
  end;

  TDNSpecialSettingAttribute = class(TDNGenericImport<DNSpecialSettingAttributeClass, DNSpecialSettingAttribute>) end;

  //-------------namespace: System.Configuration----------------
  DNConfigurationPermissionAttributeClass = interface(DDN.mscorlib.DNCodeAccessSecurityAttributeClass)
  ['{0B0ACE44-650F-50F7-BCFD-51562091DAB1}']
  { constructors } 

    ///<summary>Initializes a new instance of the <see cref="T:System.Configuration.ConfigurationPermissionAttribute" />
    ///  class.</summary>
    ///  <param name="action">The security action represented by an enumeration member of <see cref="T:System.Security.Permissions.SecurityAction" />
    ///  . Determines the permission state of the attribute.</param>
    {class} function init(action: DDN.mscorlib.DNSecurityAction): DNConfigurationPermissionAttribute;

  end;

  ///<summary>Creates a <see cref="T:System.Configuration.ConfigurationPermission" />
  ///  object that either grants or denies the marked target permission to access sections of configuration files.</summary>
  [DNTypeName('System.Configuration.ConfigurationPermissionAttribute')]
  DNConfigurationPermissionAttribute = interface(DDN.mscorlib.DNCodeAccessSecurityAttribute)
  ['{A85BB06D-9C09-3731-97DE-3A005724583D}']
  { getters & setters } 

    function get_Action: DDN.mscorlib.DNSecurityAction;
    procedure set_Action(value: DDN.mscorlib.DNSecurityAction);
    function get_Unrestricted: Boolean;
    procedure set_Unrestricted(value: Boolean);
    function get_TypeId: DDN.mscorlib.DNObject;

  { methods } 

    ///<summary>Creates and returns an object that implements the <see cref="T:System.Security.IPermission" />
    ///  interface.</summary>
    ///<returns>Returns an object that implements <see cref="T:System.Security.IPermission" />
    ///  .</returns>
    function CreatePermission: DDN.mscorlib.DNIPermission;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DDN.mscorlib.DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Action: DDN.mscorlib.DNSecurityAction read get_Action write set_Action;
    property Unrestricted: Boolean read get_Unrestricted write set_Unrestricted;
    property TypeId: DDN.mscorlib.DNObject read get_TypeId;
  end;

  TDNConfigurationPermissionAttribute = class(TDNGenericImport<DNConfigurationPermissionAttributeClass, DNConfigurationPermissionAttribute>) end;

  //-------------namespace: System.Configuration----------------
  DNSettingsAttributeDictionaryClass = interface(DDN.mscorlib.DNHashtableClass)
  ['{A946F78A-0F9E-5BD2-AA54-73703B7E2173}']
  { constructors } 

    ///<summary>Initializes a new instance of the <see cref="T:System.Configuration.SettingsAttributeDictionary" />
    ///  class. </summary>
    {class} function init: DNSettingsAttributeDictionary; overload;
    ///<summary>Initializes a new instance of the <see cref="T:System.Configuration.SettingsAttributeDictionary" />
    ///  class. </summary>
    ///  <param name="attributes">A collection of key/value pairs that are related to configuration settings.</param>
    {class} function init(attributes: DNSettingsAttributeDictionary): DNSettingsAttributeDictionary; overload;

  end;

  ///<summary>Represents a collection of key/value pairs used to describe a configuration object as well as a <see cref="T:System.Configuration.SettingsProperty" />
  ///  object.</summary>
  [DNTypeName('System.Configuration.SettingsAttributeDictionary')]
  DNSettingsAttributeDictionary = interface(DDN.mscorlib.DNHashtable)
  ['{0868BF6E-1412-3E69-958D-A4AA7A8B06C9}']
  { getters & setters } 

    function get_Item(key: DDN.mscorlib.DNObject): DDN.mscorlib.DNObject;
    procedure set_Item(key: DDN.mscorlib.DNObject; value: DDN.mscorlib.DNObject);
    function get_IsReadOnly: Boolean;
    function get_IsFixedSize: Boolean;
    function get_IsSynchronized: Boolean;
    function get_Keys: DDN.mscorlib.DNICollection;
    function get_Values: DDN.mscorlib.DNICollection;
    function get_SyncRoot: DDN.mscorlib.DNObject;
    function get_Count: Int32;

  { methods } 

    procedure Add(key: DDN.mscorlib.DNObject; value: DDN.mscorlib.DNObject);
    procedure Clear;
    function Clone: DDN.mscorlib.DNObject;
    function &Contains(key: DDN.mscorlib.DNObject): Boolean;
    function ContainsKey(key: DDN.mscorlib.DNObject): Boolean;
    function ContainsValue(value: DDN.mscorlib.DNObject): Boolean;
    procedure CopyTo(&array: DDN.mscorlib.DNArray; arrayIndex: Int32);
    function GetEnumerator: DDN.mscorlib.DNIDictionaryEnumerator;
    procedure Remove(key: DDN.mscorlib.DNObject);
    procedure GetObjectData(info: DDN.mscorlib.DNSerializationInfo; context: DDN.mscorlib.DNStreamingContext);
    procedure OnDeserialization(sender: DDN.mscorlib.DNObject);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Item[key: DDN.mscorlib.DNObject]: DDN.mscorlib.DNObject read get_Item write set_Item; default;
    property IsReadOnly: Boolean read get_IsReadOnly;
    property IsFixedSize: Boolean read get_IsFixedSize;
    property IsSynchronized: Boolean read get_IsSynchronized;
    property Keys: DDN.mscorlib.DNICollection read get_Keys;
    property Values: DDN.mscorlib.DNICollection read get_Values;
    property SyncRoot: DDN.mscorlib.DNObject read get_SyncRoot;
    property Count: Int32 read get_Count;
  end;

  TDNSettingsAttributeDictionary = class(TDNGenericImport<DNSettingsAttributeDictionaryClass, DNSettingsAttributeDictionary>) end;

  //-------------namespace: System.Configuration----------------
  DNSettingsContextClass = interface(DDN.mscorlib.DNHashtableClass)
  ['{DBC1B362-BD0A-5D4D-97DA-B837AB9930FF}']
  { constructors } 

    ///<summary>Initializes a new instance of the <see cref="T:System.Configuration.SettingsContext" />
    ///  class. </summary>
    {class} function init: DNSettingsContext;

  end;

  ///<summary>Provides contextual information that the provider can use when persisting settings.</summary>
  [DNTypeName('System.Configuration.SettingsContext')]
  DNSettingsContext = interface(DDN.mscorlib.DNHashtable)
  ['{86565E30-2B13-35DE-88E7-8D67A488FA6F}']
  { getters & setters } 

    function get_Item(key: DDN.mscorlib.DNObject): DDN.mscorlib.DNObject;
    procedure set_Item(key: DDN.mscorlib.DNObject; value: DDN.mscorlib.DNObject);
    function get_IsReadOnly: Boolean;
    function get_IsFixedSize: Boolean;
    function get_IsSynchronized: Boolean;
    function get_Keys: DDN.mscorlib.DNICollection;
    function get_Values: DDN.mscorlib.DNICollection;
    function get_SyncRoot: DDN.mscorlib.DNObject;
    function get_Count: Int32;

  { methods } 

    procedure Add(key: DDN.mscorlib.DNObject; value: DDN.mscorlib.DNObject);
    procedure Clear;
    function Clone: DDN.mscorlib.DNObject;
    function &Contains(key: DDN.mscorlib.DNObject): Boolean;
    function ContainsKey(key: DDN.mscorlib.DNObject): Boolean;
    function ContainsValue(value: DDN.mscorlib.DNObject): Boolean;
    procedure CopyTo(&array: DDN.mscorlib.DNArray; arrayIndex: Int32);
    function GetEnumerator: DDN.mscorlib.DNIDictionaryEnumerator;
    procedure Remove(key: DDN.mscorlib.DNObject);
    procedure GetObjectData(info: DDN.mscorlib.DNSerializationInfo; context: DDN.mscorlib.DNStreamingContext);
    procedure OnDeserialization(sender: DDN.mscorlib.DNObject);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Item[key: DDN.mscorlib.DNObject]: DDN.mscorlib.DNObject read get_Item write set_Item; default;
    property IsReadOnly: Boolean read get_IsReadOnly;
    property IsFixedSize: Boolean read get_IsFixedSize;
    property IsSynchronized: Boolean read get_IsSynchronized;
    property Keys: DDN.mscorlib.DNICollection read get_Keys;
    property Values: DDN.mscorlib.DNICollection read get_Values;
    property SyncRoot: DDN.mscorlib.DNObject read get_SyncRoot;
    property Count: Int32 read get_Count;
  end;

  TDNSettingsContext = class(TDNGenericImport<DNSettingsContextClass, DNSettingsContext>) end;

  //-------------namespace: System.Configuration----------------
  DNConfigurationLocationCollectionClass = interface(DDN.mscorlib.DNReadOnlyCollectionBaseClass)
  ['{02D66BE0-53B8-5F61-97E0-50F521AFCE27}']
  end;

  ///<summary>Contains a collection of <see cref="T:System.Configuration.ConfigurationLocationCollection" />
  ///  objects.</summary>
  [DNTypeName('System.Configuration.ConfigurationLocationCollection')]
  DNConfigurationLocationCollection = interface(DDN.mscorlib.DNReadOnlyCollectionBase)
  ['{858C9C17-6D2C-3327-B1A3-D06DF578E96A}']
  { getters & setters } 

    function get_Item(index: Int32): DNConfigurationLocation;
    function get_Count: Int32;

  { methods } 

    function GetEnumerator: DDN.mscorlib.DNIEnumerator;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Item[index: Int32]: DNConfigurationLocation read get_Item; default;
    property Count: Int32 read get_Count;
  end;

  TDNConfigurationLocationCollection = class(TDNGenericImport<DNConfigurationLocationCollectionClass, DNConfigurationLocationCollection>) end;

  //-------------namespace: System.Configuration----------------
  DNConfigurationSectionCollectionClass = interface(DNObjectClass)
  ['{A06CC875-686F-5A40-96CF-7F0DBC196F65}']
  end;

  ///<summary>Represents a collection of related sections within a configuration file.</summary>
  [DNTypeName('System.Configuration.ConfigurationSectionCollection')]
  DNConfigurationSectionCollection = interface(DNObject)
  ['{AAF38C07-72FC-3DC8-8BD1-14A7CAB678ED}']
  { getters & setters } 

    function get_Item(name: string): DNConfigurationSection; overload;
    function get_Item(index: Int32): DNConfigurationSection; overload;
    function get_Count: Int32;
    function get_Keys: DNNameObjectCollectionBase_KeysCollection;

  { methods } 

    ///<summary>Used by the system during serialization.</summary>
    ///  <param name="info">The applicable <see cref="T:System.Runtime.Serialization.SerializationInfo" />
    ///  object.</param>
    ///  <param name="context">The applicable <see cref="T:System.Runtime.Serialization.StreamingContext" />
    ///  object.</param>
    procedure GetObjectData(info: DDN.mscorlib.DNSerializationInfo; context: DDN.mscorlib.DNStreamingContext);
    ///<summary>Adds a <see cref="T:System.Configuration.ConfigurationSection" />
    ///  object to the <see cref="T:System.Configuration.ConfigurationSectionCollection" />
    ///  object.</summary>
    ///  <param name="name">The name of the section to be added.</param>
    ///  <param name="section">The section to be added.</param>
    procedure Add(name: string; section: DNConfigurationSection);
    ///<summary>Clears this <see cref="T:System.Configuration.ConfigurationSectionCollection" />
    ///  object.</summary>
    procedure Clear;
    ///<summary>Copies this <see cref="T:System.Configuration.ConfigurationSectionCollection" />
    ///  object to an array.</summary>
    ///  <param name="array">The array to copy the <see cref="T:System.Configuration.ConfigurationSectionCollection" />
    ///  object to.</param>
    ///  <param name="index">The index location at which to begin copying.</param>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="array" />
    ///  is <see langword="null" />
    ///  .</exception><exception cref="T:System.ArgumentOutOfRangeException">The length of <paramref name="array" />
    ///  is less than the value of <see cref="P:System.Configuration.ConfigurationSectionCollection.Count" />
    ///  plus <paramref name="index" />
    ///  .</exception>
    procedure CopyTo(&array: TArray<DNConfigurationSection>; index: Int32);
    ///<summary>Gets the specified <see cref="T:System.Configuration.ConfigurationSection" />
    ///  object contained in this <see cref="T:System.Configuration.ConfigurationSectionCollection" />
    ///  object.</summary>
    ///  <param name="index">The index of the <see cref="T:System.Configuration.ConfigurationSection" />
    ///  object to be returned.</param>
    ///<returns>The <see cref="T:System.Configuration.ConfigurationSection" />
    ///  object at the specified index.</returns>
    function Get(index: Int32): DNConfigurationSection; overload;
    ///<summary>Gets the specified <see cref="T:System.Configuration.ConfigurationSection" />
    ///  object contained in this <see cref="T:System.Configuration.ConfigurationSectionCollection" />
    ///  object.</summary>
    ///  <param name="name">The name of the <see cref="T:System.Configuration.ConfigurationSection" />
    ///  object to be returned.</param>
    ///<returns>The <see cref="T:System.Configuration.ConfigurationSection" />
    ///  object with the specified name.</returns>
    ///<exception cref="T:System.ArgumentException"><paramref name="name" />
    ///  is null or an empty string ("").</exception>
    function Get(name: string): DNConfigurationSection; overload;
    ///<summary>Gets the key of the specified <see cref="T:System.Configuration.ConfigurationSection" />
    ///  object contained in this <see cref="T:System.Configuration.ConfigurationSectionCollection" />
    ///  object.</summary>
    ///  <param name="index">The index of the <see cref="T:System.Configuration.ConfigurationSection" />
    ///  object whose key is to be returned. </param>
    ///<returns>The key of the <see cref="T:System.Configuration.ConfigurationSection" />
    ///  object at the specified index.</returns>
    function GetKey(index: Int32): string;
    ///<summary>Removes the specified <see cref="T:System.Configuration.ConfigurationSection" />
    ///  object from this <see cref="T:System.Configuration.ConfigurationSectionCollection" />
    ///  object.</summary>
    ///  <param name="name">The name of the section to be removed. </param>
    procedure Remove(name: string);
    ///<summary>Removes the specified <see cref="T:System.Configuration.ConfigurationSection" />
    ///  object from this <see cref="T:System.Configuration.ConfigurationSectionCollection" />
    ///  object.</summary>
    ///  <param name="index">The index of the section to be removed. </param>
    procedure RemoveAt(index: Int32);
    ///<summary>Gets an enumerator that can iterate through this <see cref="T:System.Configuration.ConfigurationSectionCollection" />
    ///  object.</summary>
    ///<returns>An <see cref="T:System.Collections.IEnumerator" />
    ///  that can be used to iterate through this <see cref="T:System.Configuration.ConfigurationSectionCollection" />
    ///  object.</returns>
    function GetEnumerator: DDN.mscorlib.DNIEnumerator;
    procedure OnDeserialization(sender: DDN.mscorlib.DNObject);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Item[name: string]: DNConfigurationSection read get_Item; default;
    property Item[index: Int32]: DNConfigurationSection read get_Item; default;
    ///<summary>Gets the number of sections in this <see cref="T:System.Configuration.ConfigurationSectionCollection" />
    ///  object.</summary>
    ///<returns>An integer that represents the number of sections in the collection.</returns>
    property Count: Int32 read get_Count;
    ///<summary>Gets the keys to all <see cref="T:System.Configuration.ConfigurationSection" />
    ///  objects contained in this <see cref="T:System.Configuration.ConfigurationSectionCollection" />
    ///  object.</summary>
    ///<returns>A <see cref="T:System.Collections.Specialized.NameObjectCollectionBase.KeysCollection" />
    ///  object that contains the keys of all sections in this collection.</returns>
    property Keys: DNNameObjectCollectionBase_KeysCollection read get_Keys;
  end;

  TDNConfigurationSectionCollection = class(TDNGenericImport<DNConfigurationSectionCollectionClass, DNConfigurationSectionCollection>) end;

  //-------------namespace: System.Configuration----------------
  DNConfigurationSectionGroupCollectionClass = interface(DNObjectClass)
  ['{BA6A542B-5D0E-5A2B-8A28-47FB90389A84}']
  end;

  ///<summary>Represents a collection of <see cref="T:System.Configuration.ConfigurationSectionGroup" />
  ///  objects.</summary>
  [DNTypeName('System.Configuration.ConfigurationSectionGroupCollection')]
  DNConfigurationSectionGroupCollection = interface(DNObject)
  ['{938631B8-20E6-3C88-8F9C-5CF92BF7B063}']
  { getters & setters } 

    function get_Item(name: string): DNConfigurationSectionGroup; overload;
    function get_Item(index: Int32): DNConfigurationSectionGroup; overload;
    function get_Count: Int32;
    function get_Keys: DNNameObjectCollectionBase_KeysCollection;

  { methods } 

    ///<summary>Used by the system during serialization.</summary>
    ///  <param name="info">The applicable <see cref="T:System.Runtime.Serialization.SerializationInfo" />
    ///  object.</param>
    ///  <param name="context">The applicable <see cref="T:System.Runtime.Serialization.StreamingContext" />
    ///  object.</param>
    procedure GetObjectData(info: DDN.mscorlib.DNSerializationInfo; context: DDN.mscorlib.DNStreamingContext);
    ///<summary>Adds a <see cref="T:System.Configuration.ConfigurationSectionGroup" />
    ///  object to this <see cref="T:System.Configuration.ConfigurationSectionGroupCollection" />
    ///  object.</summary>
    ///  <param name="name">The name of the <see cref="T:System.Configuration.ConfigurationSectionGroup" />
    ///  object to be added.</param>
    ///  <param name="sectionGroup">The <see cref="T:System.Configuration.ConfigurationSectionGroup" />
    ///  object to be added.</param>
    procedure Add(name: string; sectionGroup: DNConfigurationSectionGroup);
    ///<summary>Clears the collection.</summary>
    procedure Clear;
    ///<summary>Copies this <see cref="T:System.Configuration.ConfigurationSectionGroupCollection" />
    ///  object to an array.</summary>
    ///  <param name="array">The array to copy the object to.</param>
    ///  <param name="index">The index location at which to begin copying.</param>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="array" />
    ///  is <see langword="null" />
    ///  .</exception><exception cref="T:System.ArgumentOutOfRangeException">The length of <paramref name="array" />
    ///  is less than the value of <see cref="P:System.Configuration.ConfigurationSectionGroupCollection.Count" />
    ///  plus <paramref name="index" />
    ///  .</exception>
    procedure CopyTo(&array: TArray<DNConfigurationSectionGroup>; index: Int32);
    ///<summary>Gets the specified <see cref="T:System.Configuration.ConfigurationSectionGroup" />
    ///  object contained in the collection.</summary>
    ///  <param name="index">The index of the <see cref="T:System.Configuration.ConfigurationSectionGroup" />
    ///  object to be returned. </param>
    ///<returns>The <see cref="T:System.Configuration.ConfigurationSectionGroup" />
    ///  object at the specified index.</returns>
    function Get(index: Int32): DNConfigurationSectionGroup; overload;
    ///<summary>Gets the specified <see cref="T:System.Configuration.ConfigurationSectionGroup" />
    ///  object from the collection.</summary>
    ///  <param name="name">The name of the <see cref="T:System.Configuration.ConfigurationSectionGroup" />
    ///  object to be returned. </param>
    ///<returns>The <see cref="T:System.Configuration.ConfigurationSectionGroup" />
    ///  object with the specified name.</returns>
    ///<exception cref="T:System.ArgumentException"><paramref name="name" />
    ///  is null or an empty string ("").</exception>
    function Get(name: string): DNConfigurationSectionGroup; overload;
    ///<summary>Gets the key of the specified <see cref="T:System.Configuration.ConfigurationSectionGroup" />
    ///  object contained in this <see cref="T:System.Configuration.ConfigurationSectionGroupCollection" />
    ///  object.</summary>
    ///  <param name="index">The index of the section group whose key is to be returned. </param>
    ///<returns>The key of the <see cref="T:System.Configuration.ConfigurationSectionGroup" />
    ///  object at the specified index.</returns>
    function GetKey(index: Int32): string;
    ///<summary>Removes the <see cref="T:System.Configuration.ConfigurationSectionGroup" />
    ///  object whose name is specified from this <see cref="T:System.Configuration.ConfigurationSectionGroupCollection" />
    ///  object.</summary>
    ///  <param name="name">The name of the section group to be removed. </param>
    procedure Remove(name: string);
    ///<summary>Removes the <see cref="T:System.Configuration.ConfigurationSectionGroup" />
    ///  object whose index is specified from this <see cref="T:System.Configuration.ConfigurationSectionGroupCollection" />
    ///  object.</summary>
    ///  <param name="index">The index of the section group to be removed. </param>
    procedure RemoveAt(index: Int32);
    ///<summary>Gets an enumerator that can iterate through the <see cref="T:System.Configuration.ConfigurationSectionGroupCollection" />
    ///  object.</summary>
    ///<returns>An <see cref="T:System.Collections.IEnumerator" />
    ///  that can be used to iterate through the <see cref="T:System.Configuration.ConfigurationSectionGroupCollection" />
    ///  object.</returns>
    function GetEnumerator: DDN.mscorlib.DNIEnumerator;
    procedure OnDeserialization(sender: DDN.mscorlib.DNObject);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Item[name: string]: DNConfigurationSectionGroup read get_Item; default;
    property Item[index: Int32]: DNConfigurationSectionGroup read get_Item; default;
    ///<summary>Gets the number of section groups in the collection.</summary>
    ///<returns>An integer that represents the number of section groups in the collection.</returns>
    property Count: Int32 read get_Count;
    ///<summary>Gets the keys to all <see cref="T:System.Configuration.ConfigurationSectionGroup" />
    ///  objects contained in this <see cref="T:System.Configuration.ConfigurationSectionGroupCollection" />
    ///  object.</summary>
    ///<returns>A <see cref="T:System.Collections.Specialized.NameObjectCollectionBase.KeysCollection" />
    ///  object that contains the names of all section groups in this collection.</returns>
    property Keys: DNNameObjectCollectionBase_KeysCollection read get_Keys;
  end;

  TDNConfigurationSectionGroupCollection = class(TDNGenericImport<DNConfigurationSectionGroupCollectionClass, DNConfigurationSectionGroupCollection>) end;

  //-------------namespace: System.Configuration----------------
  DNPropertyInformationCollectionClass = interface(DNObjectClass)
  ['{D4484712-AE47-5810-9027-E568B0572B00}']
  end;

  ///<summary>Contains a collection of <see cref="T:System.Configuration.PropertyInformation" />
  ///  objects. This class cannot be inherited.</summary>
  [DNTypeName('System.Configuration.PropertyInformationCollection')]
  DNPropertyInformationCollection = interface(DNObject)
  ['{F88B5872-E250-3285-9FCE-024B9DE86610}']
  { getters & setters } 

    function get_Item(propertyName: string): DNPropertyInformation;
    function get_Count: Int32;
    function get_Keys: DNNameObjectCollectionBase_KeysCollection;

  { methods } 

    ///<summary>Populates a <see cref="T:System.Runtime.Serialization.SerializationInfo" />
    ///  object with the data needed to serialize the <see cref="T:System.Configuration.PropertyInformationCollection" />
    ///  instance.</summary>
    ///  <param name="info">A <see cref="T:System.Runtime.Serialization.SerializationInfo" />
    ///  object that contains the information required to serialize the <see cref="T:System.Configuration.PropertyInformationCollection" />
    ///  instance.</param>
    ///  <param name="context">A <see cref="T:System.Runtime.Serialization.StreamingContext" />
    ///  object that contains the source and destination of the serialized stream associated with the <see cref="T:System.Configuration.PropertyInformationCollection" />
    ///  instance.</param>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="info" />
    ///  is <see langword="null" />
    ///  .</exception>
    procedure GetObjectData(info: DDN.mscorlib.DNSerializationInfo; context: DDN.mscorlib.DNStreamingContext);
    ///<summary>Copies the entire <see cref="T:System.Configuration.PropertyInformationCollection" />
    ///  collection to a compatible one-dimensional <see cref="T:System.Array" />
    ///  , starting at the specified index of the target array.</summary>
    ///  <param name="array">A one-dimensional <see cref="T:System.Array" />
    ///  that is the destination of the elements copied from the <see cref="T:System.Configuration.PropertyInformationCollection" />
    ///  collection. The <see cref="T:System.Array" />
    ///  must have zero-based indexing.</param>
    ///  <param name="index">The zero-based index in <paramref name="array" />
    ///  at which copying begins.</param>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="array" />
    ///  is <see langword="null" />
    ///  .</exception><exception cref="T:System.ArgumentOutOfRangeException">The <see cref="P:System.Array.Length" />
    ///  property of <paramref name="array" />
    ///  is less than <see cref="P:System.Collections.Specialized.NameObjectCollectionBase.Count" />
    ///  + <paramref name="index" />
    ///  .</exception>
    procedure CopyTo(&array: TArray<DNPropertyInformation>; index: Int32);
    ///<summary>Gets an <see cref="T:System.Collections.IEnumerator" />
    ///  object, which is used to iterate through this <see cref="T:System.Configuration.PropertyInformationCollection" />
    ///  collection.</summary>
    ///<returns>An <see cref="T:System.Collections.IEnumerator" />
    ///  object, which is used to iterate through this <see cref="T:System.Configuration.PropertyInformationCollection" />
    ///  .</returns>
    function GetEnumerator: DDN.mscorlib.DNIEnumerator;
    procedure OnDeserialization(sender: DDN.mscorlib.DNObject);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Item[propertyName: string]: DNPropertyInformation read get_Item; default;
    property Count: Int32 read get_Count;
    property Keys: DNNameObjectCollectionBase_KeysCollection read get_Keys;
  end;

  TDNPropertyInformationCollection = class(TDNGenericImport<DNPropertyInformationCollectionClass, DNPropertyInformationCollection>) end;

  //-------------namespace: System.Configuration----------------
  DNCommaDelimitedStringCollectionClass = interface(DNObjectClass)
  ['{B822561D-D70C-5697-845B-A88553C836CD}']
  { constructors } 

    ///<summary>Creates a new instance of the <see cref="T:System.Configuration.CommaDelimitedStringCollection" />
    ///  class.</summary>
    {class} function init: DNCommaDelimitedStringCollection;

  end;

  ///<summary>Represents a collection of string elements separated by commas. This class cannot be inherited.</summary>
  [DNTypeName('System.Configuration.CommaDelimitedStringCollection')]
  DNCommaDelimitedStringCollection = interface(DNObject)
  ['{D4AD1B84-767A-3563-A0B5-DBA3F18C545C}']
  { getters & setters } 

    function get_IsModified: Boolean;
    function get_IsReadOnly: Boolean;
    function get_Item(index: Int32): string;
    procedure set_Item(index: Int32; value: string);
    function get_Count: Int32;
    function get_IsSynchronized: Boolean;
    function get_SyncRoot: DDN.mscorlib.DNObject;

  { methods } 

    ///<summary>Creates a copy of the collection.</summary>
    ///<returns>A copy of the <see cref="T:System.Configuration.CommaDelimitedStringCollection" />
    ///  .</returns>
    function Clone: DNCommaDelimitedStringCollection;
    ///<summary>Returns a string representation of the object.</summary>
    ///<returns>A string representation of the object.</returns>
    function ToString: string;
    ///<summary>Sets the collection object to read-only.</summary>
    procedure SetReadOnly;
    ///<summary>Adds a string to the comma-delimited collection.</summary>
    ///  <param name="value">A string value.</param>
    procedure Add(value: string);
    ///<summary>Adds all the strings in a string array to the collection.</summary>
    ///  <param name="range">An array of strings to add to the collection.</param>
    procedure AddRange(range: TArray<string>);
    ///<summary>Clears the collection.</summary>
    procedure Clear;
    ///<summary>Adds a string element to the collection at the specified index.</summary>
    ///  <param name="index">The index in the collection at which the new element will be added.</param>
    ///  <param name="value">The value of the new element to add to the collection.</param>
    procedure Insert(index: Int32; value: string);
    ///<summary>Removes a string element from the collection.</summary>
    ///  <param name="value">The string to remove.</param>
    procedure Remove(value: string);
    function &Contains(value: string): Boolean;
    procedure CopyTo(&array: TArray<string>; index: Int32);
    function GetEnumerator: DNStringEnumerator;
    function IndexOf(value: string): Int32;
    procedure RemoveAt(index: Int32);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    ///<summary>Gets a value that specifies whether the collection has been modified.</summary>
    ///<returns><see langword="true" />
    ///  if the <see cref="T:System.Configuration.CommaDelimitedStringCollection" />
    ///  has been modified; otherwise, <see langword="false" />
    ///  .</returns>
    property IsModified: Boolean read get_IsModified;
    ///<summary>Gets a value indicating whether the collection object is read-only.</summary>
    ///<returns><see langword="true" />
    ///  if the specified string element in the <see cref="T:System.Configuration.CommaDelimitedStringCollection" />
    ///  is read-only; otherwise, <see langword="false" />
    ///  .</returns>
    property IsReadOnly: Boolean read get_IsReadOnly;
    property Item[index: Int32]: string read get_Item write set_Item; default;
    property Count: Int32 read get_Count;
    property IsSynchronized: Boolean read get_IsSynchronized;
    property SyncRoot: DDN.mscorlib.DNObject read get_SyncRoot;
  end;

  TDNCommaDelimitedStringCollection = class(TDNGenericImport<DNCommaDelimitedStringCollectionClass, DNCommaDelimitedStringCollection>) end;

  //-------------namespace: System.Configuration----------------
  DNConfigurationConverterBaseClass = interface(DNObjectClass)
  ['{5BDC67B7-2655-5EBE-9977-2BA16A8E01AD}']
  end;

  ///<summary>The base class for the configuration converter types.</summary>
  [DNTypeName('System.Configuration.ConfigurationConverterBase')]
  DNConfigurationConverterBase = interface(DNObject)
  ['{3D21E06A-9247-3320-BD46-4DF4D57BB829}']
  { methods } 

    ///<summary>Determines whether the conversion is allowed.</summary>
    ///  <param name="ctx">The <see cref="T:System.ComponentModel.ITypeDescriptorContext" />
    ///  object used for type conversion.</param>
    ///  <param name="type">The type to convert to.</param>
    ///<returns><see langword="true" />
    ///  if the conversion is allowed; otherwise, <see langword="false" />
    ///  . </returns>
    function CanConvertTo(ctx: DNITypeDescriptorContext; &type: DDN.mscorlib.DNType): Boolean; overload;
    ///<summary>Determines whether the conversion is allowed.</summary>
    ///  <param name="ctx">The <see cref="T:System.ComponentModel.ITypeDescriptorContext" />
    ///  object used for type conversions.</param>
    ///  <param name="type">The <see cref="T:System.Type" />
    ///  to convert from.</param>
    ///<returns><see langword="true" />
    ///  if the conversion is allowed; otherwise, <see langword="false" />
    ///  .</returns>
    function CanConvertFrom(ctx: DNITypeDescriptorContext; &type: DDN.mscorlib.DNType): Boolean; overload;
    function CanConvertFrom(sourceType: DDN.mscorlib.DNType): Boolean; overload;
    function CanConvertTo(destinationType: DDN.mscorlib.DNType): Boolean; overload;
    function ConvertFrom(value: DDN.mscorlib.DNObject): DDN.mscorlib.DNObject; overload;
    function ConvertFrom(context: DNITypeDescriptorContext; culture: DDN.mscorlib.DNCultureInfo; value: DDN.mscorlib.DNObject): DDN.mscorlib.DNObject; overload;
    function ConvertFromInvariantString(text: string): DDN.mscorlib.DNObject; overload;
    function ConvertFromInvariantString(context: DNITypeDescriptorContext; text: string): DDN.mscorlib.DNObject; overload;
    function ConvertFromString(text: string): DDN.mscorlib.DNObject; overload;
    function ConvertFromString(context: DNITypeDescriptorContext; text: string): DDN.mscorlib.DNObject; overload;
    function ConvertFromString(context: DNITypeDescriptorContext; culture: DDN.mscorlib.DNCultureInfo; text: string): DDN.mscorlib.DNObject; overload;
    function ConvertTo(value: DDN.mscorlib.DNObject; destinationType: DDN.mscorlib.DNType): DDN.mscorlib.DNObject; overload;
    function ConvertTo(context: DNITypeDescriptorContext; culture: DDN.mscorlib.DNCultureInfo; value: DDN.mscorlib.DNObject; destinationType: DDN.mscorlib.DNType): DDN.mscorlib.DNObject; overload;
    function ConvertToInvariantString(value: DDN.mscorlib.DNObject): string; overload;
    function ConvertToInvariantString(context: DNITypeDescriptorContext; value: DDN.mscorlib.DNObject): string; overload;
    function ConvertToString(value: DDN.mscorlib.DNObject): string; overload;
    function ConvertToString(context: DNITypeDescriptorContext; value: DDN.mscorlib.DNObject): string; overload;
    function ConvertToString(context: DNITypeDescriptorContext; culture: DDN.mscorlib.DNCultureInfo; value: DDN.mscorlib.DNObject): string; overload;
    function CreateInstance(propertyValues: DDN.mscorlib.DNIDictionary): DDN.mscorlib.DNObject; overload;
    function CreateInstance(context: DNITypeDescriptorContext; propertyValues: DDN.mscorlib.DNIDictionary): DDN.mscorlib.DNObject; overload;
    function GetCreateInstanceSupported: Boolean; overload;
    function GetCreateInstanceSupported(context: DNITypeDescriptorContext): Boolean; overload;
    function GetProperties(value: DDN.mscorlib.DNObject): DNPropertyDescriptorCollection; overload;
    function GetProperties(context: DNITypeDescriptorContext; value: DDN.mscorlib.DNObject; attributes: TArray<DDN.mscorlib.DNAttribute>): DNPropertyDescriptorCollection; overload;
    function GetPropertiesSupported: Boolean; overload;
    function GetPropertiesSupported(context: DNITypeDescriptorContext): Boolean; overload;
    function GetStandardValues: DDN.mscorlib.DNICollection; overload;
    function GetStandardValues(context: DNITypeDescriptorContext): DNTypeConverter_StandardValuesCollection; overload;
    function GetStandardValuesExclusive: Boolean; overload;
    function GetStandardValuesExclusive(context: DNITypeDescriptorContext): Boolean; overload;
    function GetStandardValuesSupported: Boolean; overload;
    function GetStandardValuesSupported(context: DNITypeDescriptorContext): Boolean; overload;
    function IsValid(value: DDN.mscorlib.DNObject): Boolean; overload;
    function IsValid(context: DNITypeDescriptorContext; value: DDN.mscorlib.DNObject): Boolean; overload;
    function GetProperties(context: DNITypeDescriptorContext; value: DDN.mscorlib.DNObject): DNPropertyDescriptorCollection; overload;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNConfigurationConverterBase = class(TDNGenericImport<DNConfigurationConverterBaseClass, DNConfigurationConverterBase>) end;

  //-------------namespace: System.Configuration----------------
  DNCommaDelimitedStringCollectionConverterClass = interface(DNConfigurationConverterBaseClass)
  ['{F7EE40B4-B67B-560A-B712-F9C41CC2F098}']
  { constructors } 

    ///<summary>Initializes a new instance of the <see cref="T:System.Configuration.CommaDelimitedStringCollectionConverter" />
    ///  class. </summary>
    {class} function init: DNCommaDelimitedStringCollectionConverter;

  end;

  ///<summary>Converts a comma-delimited string value to and from a <see cref="T:System.Configuration.CommaDelimitedStringCollection" />
  ///  object. This class cannot be inherited.</summary>
  [DNTypeName('System.Configuration.CommaDelimitedStringCollectionConverter')]
  DNCommaDelimitedStringCollectionConverter = interface(DNConfigurationConverterBase)
  ['{DD5D79D9-1E7F-3907-BCD5-CCB7B6F131AE}']
  { methods } 

    ///<summary>Converts a <see cref="T:System.Configuration.CommaDelimitedStringCollection" />
    ///  object to a <see cref="T:System.String" />
    ///  object.</summary>
    ///  <param name="ctx">The <see cref="T:System.ComponentModel.ITypeDescriptorContext" />
    ///  used for type conversions.</param>
    ///  <param name="ci">The <see cref="T:System.Globalization.CultureInfo" />
    ///  used during conversion.</param>
    ///  <param name="value">The value to convert.</param>
    ///  <param name="type">The conversion type.</param>
    ///<returns>The <see cref="T:System.String" />
    ///  representing the converted <paramref name="value" />
    ///  parameter, which is a <see cref="T:System.Configuration.CommaDelimitedStringCollection" />
    ///  .</returns>
    function ConvertTo(ctx: DNITypeDescriptorContext; ci: DDN.mscorlib.DNCultureInfo; value: DDN.mscorlib.DNObject; &type: DDN.mscorlib.DNType): DDN.mscorlib.DNObject; overload;
    ///<summary>Converts a <see cref="T:System.String" />
    ///  object to a <see cref="T:System.Configuration.CommaDelimitedStringCollection" />
    ///  object.</summary>
    ///  <param name="ctx">The <see cref="T:System.ComponentModel.ITypeDescriptorContext" />
    ///  used for type conversions.</param>
    ///  <param name="ci">The <see cref="T:System.Globalization.CultureInfo" />
    ///  used during conversion.</param>
    ///  <param name="data">The comma-separated <see cref="T:System.String" />
    ///  to convert.</param>
    ///<returns>A <see cref="T:System.Configuration.CommaDelimitedStringCollection" />
    ///  containing the converted value.</returns>
    function ConvertFrom(ctx: DNITypeDescriptorContext; ci: DDN.mscorlib.DNCultureInfo; data: DDN.mscorlib.DNObject): DDN.mscorlib.DNObject; overload;
    ///<summary>Determines whether the conversion is allowed.</summary>
    ///  <param name="ctx">The <see cref="T:System.ComponentModel.ITypeDescriptorContext" />
    ///  object used for type conversion.</param>
    ///  <param name="type">The type to convert to.</param>
    ///<returns><see langword="true" />
    ///  if the conversion is allowed; otherwise, <see langword="false" />
    ///  . </returns>
    function CanConvertTo(ctx: DNITypeDescriptorContext; &type: DDN.mscorlib.DNType): Boolean; overload;
    ///<summary>Determines whether the conversion is allowed.</summary>
    ///  <param name="ctx">The <see cref="T:System.ComponentModel.ITypeDescriptorContext" />
    ///  object used for type conversions.</param>
    ///  <param name="type">The <see cref="T:System.Type" />
    ///  to convert from.</param>
    ///<returns><see langword="true" />
    ///  if the conversion is allowed; otherwise, <see langword="false" />
    ///  .</returns>
    function CanConvertFrom(ctx: DNITypeDescriptorContext; &type: DDN.mscorlib.DNType): Boolean; overload;
    function CanConvertFrom(sourceType: DDN.mscorlib.DNType): Boolean; overload;
    function CanConvertTo(destinationType: DDN.mscorlib.DNType): Boolean; overload;
    function ConvertFrom(value: DDN.mscorlib.DNObject): DDN.mscorlib.DNObject; overload;
    function ConvertFromInvariantString(text: string): DDN.mscorlib.DNObject; overload;
    function ConvertFromInvariantString(context: DNITypeDescriptorContext; text: string): DDN.mscorlib.DNObject; overload;
    function ConvertFromString(text: string): DDN.mscorlib.DNObject; overload;
    function ConvertFromString(context: DNITypeDescriptorContext; text: string): DDN.mscorlib.DNObject; overload;
    function ConvertFromString(context: DNITypeDescriptorContext; culture: DDN.mscorlib.DNCultureInfo; text: string): DDN.mscorlib.DNObject; overload;
    function ConvertTo(value: DDN.mscorlib.DNObject; destinationType: DDN.mscorlib.DNType): DDN.mscorlib.DNObject; overload;
    function ConvertToInvariantString(value: DDN.mscorlib.DNObject): string; overload;
    function ConvertToInvariantString(context: DNITypeDescriptorContext; value: DDN.mscorlib.DNObject): string; overload;
    function ConvertToString(value: DDN.mscorlib.DNObject): string; overload;
    function ConvertToString(context: DNITypeDescriptorContext; value: DDN.mscorlib.DNObject): string; overload;
    function ConvertToString(context: DNITypeDescriptorContext; culture: DDN.mscorlib.DNCultureInfo; value: DDN.mscorlib.DNObject): string; overload;
    function CreateInstance(propertyValues: DDN.mscorlib.DNIDictionary): DDN.mscorlib.DNObject; overload;
    function CreateInstance(context: DNITypeDescriptorContext; propertyValues: DDN.mscorlib.DNIDictionary): DDN.mscorlib.DNObject; overload;
    function GetCreateInstanceSupported: Boolean; overload;
    function GetCreateInstanceSupported(context: DNITypeDescriptorContext): Boolean; overload;
    function GetProperties(value: DDN.mscorlib.DNObject): DNPropertyDescriptorCollection; overload;
    function GetProperties(context: DNITypeDescriptorContext; value: DDN.mscorlib.DNObject; attributes: TArray<DDN.mscorlib.DNAttribute>): DNPropertyDescriptorCollection; overload;
    function GetPropertiesSupported: Boolean; overload;
    function GetPropertiesSupported(context: DNITypeDescriptorContext): Boolean; overload;
    function GetStandardValues: DDN.mscorlib.DNICollection; overload;
    function GetStandardValues(context: DNITypeDescriptorContext): DNTypeConverter_StandardValuesCollection; overload;
    function GetStandardValuesExclusive: Boolean; overload;
    function GetStandardValuesExclusive(context: DNITypeDescriptorContext): Boolean; overload;
    function GetStandardValuesSupported: Boolean; overload;
    function GetStandardValuesSupported(context: DNITypeDescriptorContext): Boolean; overload;
    function IsValid(value: DDN.mscorlib.DNObject): Boolean; overload;
    function IsValid(context: DNITypeDescriptorContext; value: DDN.mscorlib.DNObject): Boolean; overload;
    function GetProperties(context: DNITypeDescriptorContext; value: DDN.mscorlib.DNObject): DNPropertyDescriptorCollection; overload;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNCommaDelimitedStringCollectionConverter = class(TDNGenericImport<DNCommaDelimitedStringCollectionConverterClass, DNCommaDelimitedStringCollectionConverter>) end;

  //-------------namespace: System.Configuration----------------
  DNGenericEnumConverterClass = interface(DNConfigurationConverterBaseClass)
  ['{6D1C01F4-6861-52FB-881A-9DDBEAFD29D1}']
  { constructors } 

    ///<summary>Initializes a new instance of the <see cref="T:System.Configuration.GenericEnumConverter" />
    ///  class.</summary>
    ///  <param name="typeEnum">The enumeration type to convert.</param>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="typeEnum" />
    ///  is <see langword="null" />
    ///  .</exception>
    {class} function init(typeEnum: DDN.mscorlib.DNType): DNGenericEnumConverter;

  end;

  ///<summary>Converts between a string and an enumeration type. </summary>
  [DNTypeName('System.Configuration.GenericEnumConverter')]
  DNGenericEnumConverter = interface(DNConfigurationConverterBase)
  ['{4B17B5E4-1AE4-376F-8C38-4A07B17AC9DA}']
  { methods } 

    ///<summary>Converts a <see cref="T:System.String" />
    ///  to an <see cref="T:System.Enum" />
    ///  type.</summary>
    ///  <param name="ctx">The <see cref="T:System.ComponentModel.ITypeDescriptorContext" />
    ///  object used for type conversions.</param>
    ///  <param name="ci">The <see cref="T:System.Globalization.CultureInfo" />
    ///  object used during conversion.</param>
    ///  <param name="data">The <see cref="T:System.String" />
    ///  object to convert.</param>
    ///<returns>The <see cref="T:System.Enum" />
    ///  type that represents the <paramref name="data" />
    ///  parameter.</returns>
    ///<exception cref="T:System.ArgumentException"><paramref name="data" />
    ///  is null or an empty string ("").- or -
    ///  <paramref name="data" />
    ///  starts with a numeric character.- or -
    ///  <paramref name="data" />
    ///  includes white space.</exception>
    function ConvertFrom(ctx: DNITypeDescriptorContext; ci: DDN.mscorlib.DNCultureInfo; data: DDN.mscorlib.DNObject): DDN.mscorlib.DNObject; overload;
    ///<summary>Converts an <see cref="T:System.Enum" />
    ///  type to a <see cref="T:System.String" />
    ///  value.</summary>
    ///  <param name="ctx">The <see cref="T:System.ComponentModel.ITypeDescriptorContext" />
    ///  object used for type conversions.</param>
    ///  <param name="ci">The <see cref="T:System.Globalization.CultureInfo" />
    ///  object used during conversion.</param>
    ///  <param name="value">The value to convert to.</param>
    ///  <param name="type">The type to convert to.</param>
    ///<returns>The <see cref="T:System.String" />
    ///  that represents the <paramref name="value" />
    ///  parameter.</returns>
    function ConvertTo(ctx: DNITypeDescriptorContext; ci: DDN.mscorlib.DNCultureInfo; value: DDN.mscorlib.DNObject; &type: DDN.mscorlib.DNType): DDN.mscorlib.DNObject; overload;
    ///<summary>Determines whether the conversion is allowed.</summary>
    ///  <param name="ctx">The <see cref="T:System.ComponentModel.ITypeDescriptorContext" />
    ///  object used for type conversion.</param>
    ///  <param name="type">The type to convert to.</param>
    ///<returns><see langword="true" />
    ///  if the conversion is allowed; otherwise, <see langword="false" />
    ///  . </returns>
    function CanConvertTo(ctx: DNITypeDescriptorContext; &type: DDN.mscorlib.DNType): Boolean; overload;
    ///<summary>Determines whether the conversion is allowed.</summary>
    ///  <param name="ctx">The <see cref="T:System.ComponentModel.ITypeDescriptorContext" />
    ///  object used for type conversions.</param>
    ///  <param name="type">The <see cref="T:System.Type" />
    ///  to convert from.</param>
    ///<returns><see langword="true" />
    ///  if the conversion is allowed; otherwise, <see langword="false" />
    ///  .</returns>
    function CanConvertFrom(ctx: DNITypeDescriptorContext; &type: DDN.mscorlib.DNType): Boolean; overload;
    function CanConvertFrom(sourceType: DDN.mscorlib.DNType): Boolean; overload;
    function CanConvertTo(destinationType: DDN.mscorlib.DNType): Boolean; overload;
    function ConvertFrom(value: DDN.mscorlib.DNObject): DDN.mscorlib.DNObject; overload;
    function ConvertFromInvariantString(text: string): DDN.mscorlib.DNObject; overload;
    function ConvertFromInvariantString(context: DNITypeDescriptorContext; text: string): DDN.mscorlib.DNObject; overload;
    function ConvertFromString(text: string): DDN.mscorlib.DNObject; overload;
    function ConvertFromString(context: DNITypeDescriptorContext; text: string): DDN.mscorlib.DNObject; overload;
    function ConvertFromString(context: DNITypeDescriptorContext; culture: DDN.mscorlib.DNCultureInfo; text: string): DDN.mscorlib.DNObject; overload;
    function ConvertTo(value: DDN.mscorlib.DNObject; destinationType: DDN.mscorlib.DNType): DDN.mscorlib.DNObject; overload;
    function ConvertToInvariantString(value: DDN.mscorlib.DNObject): string; overload;
    function ConvertToInvariantString(context: DNITypeDescriptorContext; value: DDN.mscorlib.DNObject): string; overload;
    function ConvertToString(value: DDN.mscorlib.DNObject): string; overload;
    function ConvertToString(context: DNITypeDescriptorContext; value: DDN.mscorlib.DNObject): string; overload;
    function ConvertToString(context: DNITypeDescriptorContext; culture: DDN.mscorlib.DNCultureInfo; value: DDN.mscorlib.DNObject): string; overload;
    function CreateInstance(propertyValues: DDN.mscorlib.DNIDictionary): DDN.mscorlib.DNObject; overload;
    function CreateInstance(context: DNITypeDescriptorContext; propertyValues: DDN.mscorlib.DNIDictionary): DDN.mscorlib.DNObject; overload;
    function GetCreateInstanceSupported: Boolean; overload;
    function GetCreateInstanceSupported(context: DNITypeDescriptorContext): Boolean; overload;
    function GetProperties(value: DDN.mscorlib.DNObject): DNPropertyDescriptorCollection; overload;
    function GetProperties(context: DNITypeDescriptorContext; value: DDN.mscorlib.DNObject; attributes: TArray<DDN.mscorlib.DNAttribute>): DNPropertyDescriptorCollection; overload;
    function GetPropertiesSupported: Boolean; overload;
    function GetPropertiesSupported(context: DNITypeDescriptorContext): Boolean; overload;
    function GetStandardValues: DDN.mscorlib.DNICollection; overload;
    function GetStandardValues(context: DNITypeDescriptorContext): DNTypeConverter_StandardValuesCollection; overload;
    function GetStandardValuesExclusive: Boolean; overload;
    function GetStandardValuesExclusive(context: DNITypeDescriptorContext): Boolean; overload;
    function GetStandardValuesSupported: Boolean; overload;
    function GetStandardValuesSupported(context: DNITypeDescriptorContext): Boolean; overload;
    function IsValid(value: DDN.mscorlib.DNObject): Boolean; overload;
    function IsValid(context: DNITypeDescriptorContext; value: DDN.mscorlib.DNObject): Boolean; overload;
    function GetProperties(context: DNITypeDescriptorContext; value: DDN.mscorlib.DNObject): DNPropertyDescriptorCollection; overload;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNGenericEnumConverter = class(TDNGenericImport<DNGenericEnumConverterClass, DNGenericEnumConverter>) end;

  //-------------namespace: System.Configuration----------------
  DNInfiniteIntConverterClass = interface(DNConfigurationConverterBaseClass)
  ['{43B598C9-6E5C-5BC0-98C5-74714E8D5DA9}']
  { constructors } 

    ///<summary>Initializes a new instance of the <see cref="T:System.Configuration.InfiniteIntConverter" />
    ///  class.</summary>
    {class} function init: DNInfiniteIntConverter;

  end;

  ///<summary>Converts between a string and the standard infinite or integer value.</summary>
  [DNTypeName('System.Configuration.InfiniteIntConverter')]
  DNInfiniteIntConverter = interface(DNConfigurationConverterBase)
  ['{763738A7-0482-3EC3-ADFE-A5EC90644A8E}']
  { methods } 

    ///<summary>Converts a <see cref="T:System.String" />
    ///  to an <see cref="T:System.Int32" />
    ///  .</summary>
    ///  <param name="ctx">The <see cref="T:System.ComponentModel.ITypeDescriptorContext" />
    ///  object used for type conversions.</param>
    ///  <param name="ci">The <see cref="T:System.Globalization.CultureInfo" />
    ///  object used during conversion.</param>
    ///  <param name="data">The <see cref="T:System.String" />
    ///  object to convert.</param>
    ///<returns>The <see cref="F:System.Int32.MaxValue" />
    ///  , if the <paramref name="data" />
    ///  parameter is the <see cref="T:System.String" />
    ///  "infinite"; otherwise, the <see cref="T:System.Int32" />
    ///  representing the <paramref name="data" />
    ///  parameter integer value.</returns>
    function ConvertFrom(ctx: DNITypeDescriptorContext; ci: DDN.mscorlib.DNCultureInfo; data: DDN.mscorlib.DNObject): DDN.mscorlib.DNObject; overload;
    ///<summary>Converts an <see cref="T:System.Int32" />
    ///  .to a <see cref="T:System.String" />
    ///  .</summary>
    ///  <param name="ctx">The <see cref="T:System.ComponentModel.ITypeDescriptorContext" />
    ///  object used for type conversions.</param>
    ///  <param name="ci">The <see cref="T:System.Globalization.CultureInfo" />
    ///  object used during conversion.</param>
    ///  <param name="value">The value to convert to.</param>
    ///  <param name="type">The type to convert to.</param>
    ///<returns>The <see cref="T:System.String" />
    ///  "infinite" if the <paramref name="value" />
    ///  is <see cref="F:System.Int32.MaxValue" />
    ///  ; otherwise, the <see cref="T:System.String" />
    ///  representing the <paramref name="value" />
    ///  parameter.</returns>
    function ConvertTo(ctx: DNITypeDescriptorContext; ci: DDN.mscorlib.DNCultureInfo; value: DDN.mscorlib.DNObject; &type: DDN.mscorlib.DNType): DDN.mscorlib.DNObject; overload;
    ///<summary>Determines whether the conversion is allowed.</summary>
    ///  <param name="ctx">The <see cref="T:System.ComponentModel.ITypeDescriptorContext" />
    ///  object used for type conversion.</param>
    ///  <param name="type">The type to convert to.</param>
    ///<returns><see langword="true" />
    ///  if the conversion is allowed; otherwise, <see langword="false" />
    ///  . </returns>
    function CanConvertTo(ctx: DNITypeDescriptorContext; &type: DDN.mscorlib.DNType): Boolean; overload;
    ///<summary>Determines whether the conversion is allowed.</summary>
    ///  <param name="ctx">The <see cref="T:System.ComponentModel.ITypeDescriptorContext" />
    ///  object used for type conversions.</param>
    ///  <param name="type">The <see cref="T:System.Type" />
    ///  to convert from.</param>
    ///<returns><see langword="true" />
    ///  if the conversion is allowed; otherwise, <see langword="false" />
    ///  .</returns>
    function CanConvertFrom(ctx: DNITypeDescriptorContext; &type: DDN.mscorlib.DNType): Boolean; overload;
    function CanConvertFrom(sourceType: DDN.mscorlib.DNType): Boolean; overload;
    function CanConvertTo(destinationType: DDN.mscorlib.DNType): Boolean; overload;
    function ConvertFrom(value: DDN.mscorlib.DNObject): DDN.mscorlib.DNObject; overload;
    function ConvertFromInvariantString(text: string): DDN.mscorlib.DNObject; overload;
    function ConvertFromInvariantString(context: DNITypeDescriptorContext; text: string): DDN.mscorlib.DNObject; overload;
    function ConvertFromString(text: string): DDN.mscorlib.DNObject; overload;
    function ConvertFromString(context: DNITypeDescriptorContext; text: string): DDN.mscorlib.DNObject; overload;
    function ConvertFromString(context: DNITypeDescriptorContext; culture: DDN.mscorlib.DNCultureInfo; text: string): DDN.mscorlib.DNObject; overload;
    function ConvertTo(value: DDN.mscorlib.DNObject; destinationType: DDN.mscorlib.DNType): DDN.mscorlib.DNObject; overload;
    function ConvertToInvariantString(value: DDN.mscorlib.DNObject): string; overload;
    function ConvertToInvariantString(context: DNITypeDescriptorContext; value: DDN.mscorlib.DNObject): string; overload;
    function ConvertToString(value: DDN.mscorlib.DNObject): string; overload;
    function ConvertToString(context: DNITypeDescriptorContext; value: DDN.mscorlib.DNObject): string; overload;
    function ConvertToString(context: DNITypeDescriptorContext; culture: DDN.mscorlib.DNCultureInfo; value: DDN.mscorlib.DNObject): string; overload;
    function CreateInstance(propertyValues: DDN.mscorlib.DNIDictionary): DDN.mscorlib.DNObject; overload;
    function CreateInstance(context: DNITypeDescriptorContext; propertyValues: DDN.mscorlib.DNIDictionary): DDN.mscorlib.DNObject; overload;
    function GetCreateInstanceSupported: Boolean; overload;
    function GetCreateInstanceSupported(context: DNITypeDescriptorContext): Boolean; overload;
    function GetProperties(value: DDN.mscorlib.DNObject): DNPropertyDescriptorCollection; overload;
    function GetProperties(context: DNITypeDescriptorContext; value: DDN.mscorlib.DNObject; attributes: TArray<DDN.mscorlib.DNAttribute>): DNPropertyDescriptorCollection; overload;
    function GetPropertiesSupported: Boolean; overload;
    function GetPropertiesSupported(context: DNITypeDescriptorContext): Boolean; overload;
    function GetStandardValues: DDN.mscorlib.DNICollection; overload;
    function GetStandardValues(context: DNITypeDescriptorContext): DNTypeConverter_StandardValuesCollection; overload;
    function GetStandardValuesExclusive: Boolean; overload;
    function GetStandardValuesExclusive(context: DNITypeDescriptorContext): Boolean; overload;
    function GetStandardValuesSupported: Boolean; overload;
    function GetStandardValuesSupported(context: DNITypeDescriptorContext): Boolean; overload;
    function IsValid(value: DDN.mscorlib.DNObject): Boolean; overload;
    function IsValid(context: DNITypeDescriptorContext; value: DDN.mscorlib.DNObject): Boolean; overload;
    function GetProperties(context: DNITypeDescriptorContext; value: DDN.mscorlib.DNObject): DNPropertyDescriptorCollection; overload;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNInfiniteIntConverter = class(TDNGenericImport<DNInfiniteIntConverterClass, DNInfiniteIntConverter>) end;

  //-------------namespace: System.Configuration----------------
  DNInfiniteTimeSpanConverterClass = interface(DNConfigurationConverterBaseClass)
  ['{9343E3D5-E87F-59BB-BAB3-BD4CF94A11B3}']
  { constructors } 

    ///<summary>Initializes a new instance of the <see cref="T:System.Configuration.InfiniteTimeSpanConverter" />
    ///  class.</summary>
    {class} function init: DNInfiniteTimeSpanConverter;

  end;

  ///<summary>Converts between a string and the standard infinite <see cref="T:System.TimeSpan" />
  ///  value.</summary>
  [DNTypeName('System.Configuration.InfiniteTimeSpanConverter')]
  DNInfiniteTimeSpanConverter = interface(DNConfigurationConverterBase)
  ['{E5FA0D6B-DCF3-3459-A337-99F1EEDBF38A}']
  { methods } 

    ///<summary>Converts a <see cref="T:System.String" />
    ///  to a <see cref="T:System.TimeSpan" />
    ///  .</summary>
    ///  <param name="ctx">The <see cref="T:System.ComponentModel.ITypeDescriptorContext" />
    ///  object used for type conversions.</param>
    ///  <param name="ci">The <see cref="T:System.Globalization.CultureInfo" />
    ///  object used during conversion.</param>
    ///  <param name="data">The <see cref="T:System.String" />
    ///  object to convert.</param>
    ///<returns>The <see cref="F:System.TimeSpan.MaxValue" />
    ///  , if the <paramref name="data" />
    ///  parameter is the <see cref="T:System.String" />
    ///  infinite; otherwise, the <see cref="T:System.TimeSpan" />
    ///  representing the <paramref name="data" />
    ///  parameter in minutes.</returns>
    function ConvertFrom(ctx: DNITypeDescriptorContext; ci: DDN.mscorlib.DNCultureInfo; data: DDN.mscorlib.DNObject): DDN.mscorlib.DNObject; overload;
    ///<summary>Converts a <see cref="T:System.TimeSpan" />
    ///  to a <see cref="T:System.String" />
    ///  .</summary>
    ///  <param name="ctx">The <see cref="T:System.ComponentModel.ITypeDescriptorContext" />
    ///  object used for type conversions.</param>
    ///  <param name="ci">The <see cref="T:System.Globalization.CultureInfo" />
    ///  used during object conversion.</param>
    ///  <param name="value">The value to convert.</param>
    ///  <param name="type">The conversion type.</param>
    ///<returns>The <see cref="T:System.String" />
    ///  "infinite", if the <paramref name="value" />
    ///  parameter is <see cref="F:System.TimeSpan.MaxValue" />
    ///  ; otherwise, the <see cref="T:System.String" />
    ///  representing the <paramref name="value" />
    ///  parameter in minutes.</returns>
    function ConvertTo(ctx: DNITypeDescriptorContext; ci: DDN.mscorlib.DNCultureInfo; value: DDN.mscorlib.DNObject; &type: DDN.mscorlib.DNType): DDN.mscorlib.DNObject; overload;
    ///<summary>Determines whether the conversion is allowed.</summary>
    ///  <param name="ctx">The <see cref="T:System.ComponentModel.ITypeDescriptorContext" />
    ///  object used for type conversion.</param>
    ///  <param name="type">The type to convert to.</param>
    ///<returns><see langword="true" />
    ///  if the conversion is allowed; otherwise, <see langword="false" />
    ///  . </returns>
    function CanConvertTo(ctx: DNITypeDescriptorContext; &type: DDN.mscorlib.DNType): Boolean; overload;
    ///<summary>Determines whether the conversion is allowed.</summary>
    ///  <param name="ctx">The <see cref="T:System.ComponentModel.ITypeDescriptorContext" />
    ///  object used for type conversions.</param>
    ///  <param name="type">The <see cref="T:System.Type" />
    ///  to convert from.</param>
    ///<returns><see langword="true" />
    ///  if the conversion is allowed; otherwise, <see langword="false" />
    ///  .</returns>
    function CanConvertFrom(ctx: DNITypeDescriptorContext; &type: DDN.mscorlib.DNType): Boolean; overload;
    function CanConvertFrom(sourceType: DDN.mscorlib.DNType): Boolean; overload;
    function CanConvertTo(destinationType: DDN.mscorlib.DNType): Boolean; overload;
    function ConvertFrom(value: DDN.mscorlib.DNObject): DDN.mscorlib.DNObject; overload;
    function ConvertFromInvariantString(text: string): DDN.mscorlib.DNObject; overload;
    function ConvertFromInvariantString(context: DNITypeDescriptorContext; text: string): DDN.mscorlib.DNObject; overload;
    function ConvertFromString(text: string): DDN.mscorlib.DNObject; overload;
    function ConvertFromString(context: DNITypeDescriptorContext; text: string): DDN.mscorlib.DNObject; overload;
    function ConvertFromString(context: DNITypeDescriptorContext; culture: DDN.mscorlib.DNCultureInfo; text: string): DDN.mscorlib.DNObject; overload;
    function ConvertTo(value: DDN.mscorlib.DNObject; destinationType: DDN.mscorlib.DNType): DDN.mscorlib.DNObject; overload;
    function ConvertToInvariantString(value: DDN.mscorlib.DNObject): string; overload;
    function ConvertToInvariantString(context: DNITypeDescriptorContext; value: DDN.mscorlib.DNObject): string; overload;
    function ConvertToString(value: DDN.mscorlib.DNObject): string; overload;
    function ConvertToString(context: DNITypeDescriptorContext; value: DDN.mscorlib.DNObject): string; overload;
    function ConvertToString(context: DNITypeDescriptorContext; culture: DDN.mscorlib.DNCultureInfo; value: DDN.mscorlib.DNObject): string; overload;
    function CreateInstance(propertyValues: DDN.mscorlib.DNIDictionary): DDN.mscorlib.DNObject; overload;
    function CreateInstance(context: DNITypeDescriptorContext; propertyValues: DDN.mscorlib.DNIDictionary): DDN.mscorlib.DNObject; overload;
    function GetCreateInstanceSupported: Boolean; overload;
    function GetCreateInstanceSupported(context: DNITypeDescriptorContext): Boolean; overload;
    function GetProperties(value: DDN.mscorlib.DNObject): DNPropertyDescriptorCollection; overload;
    function GetProperties(context: DNITypeDescriptorContext; value: DDN.mscorlib.DNObject; attributes: TArray<DDN.mscorlib.DNAttribute>): DNPropertyDescriptorCollection; overload;
    function GetPropertiesSupported: Boolean; overload;
    function GetPropertiesSupported(context: DNITypeDescriptorContext): Boolean; overload;
    function GetStandardValues: DDN.mscorlib.DNICollection; overload;
    function GetStandardValues(context: DNITypeDescriptorContext): DNTypeConverter_StandardValuesCollection; overload;
    function GetStandardValuesExclusive: Boolean; overload;
    function GetStandardValuesExclusive(context: DNITypeDescriptorContext): Boolean; overload;
    function GetStandardValuesSupported: Boolean; overload;
    function GetStandardValuesSupported(context: DNITypeDescriptorContext): Boolean; overload;
    function IsValid(value: DDN.mscorlib.DNObject): Boolean; overload;
    function IsValid(context: DNITypeDescriptorContext; value: DDN.mscorlib.DNObject): Boolean; overload;
    function GetProperties(context: DNITypeDescriptorContext; value: DDN.mscorlib.DNObject): DNPropertyDescriptorCollection; overload;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNInfiniteTimeSpanConverter = class(TDNGenericImport<DNInfiniteTimeSpanConverterClass, DNInfiniteTimeSpanConverter>) end;

  //-------------namespace: System.Configuration----------------
  DNTimeSpanMinutesConverterClass = interface(DNConfigurationConverterBaseClass)
  ['{382420B1-FF24-5018-BBE3-212CA1EBC93F}']
  { constructors } 

    ///<summary>Initializes a new instance of the <see cref="T:System.Configuration.TimeSpanMinutesConverter" />
    ///  class.</summary>
    {class} function init: DNTimeSpanMinutesConverter;

  end;

  ///<summary>Converts a time span expressed in minutes. </summary>
  [DNTypeName('System.Configuration.TimeSpanMinutesConverter')]
  DNTimeSpanMinutesConverter = interface(DNConfigurationConverterBase)
  ['{1130FF77-5555-3F76-A2A6-E0D7550BADD9}']
  { methods } 

    ///<summary>Converts a <see cref="T:System.TimeSpan" />
    ///  to a <see cref="T:System.String" />
    ///  . </summary>
    ///  <param name="ctx">The <see cref="T:System.ComponentModel.ITypeDescriptorContext" />
    ///  object used for type conversions.</param>
    ///  <param name="ci">The <see cref="T:System.Globalization.CultureInfo" />
    ///  object used during conversion.</param>
    ///  <param name="value">The value to convert to.</param>
    ///  <param name="type">The type to convert to.</param>
    ///<returns>The <see cref="T:System.String" />
    ///  representing the <paramref name="value" />
    ///  parameter in minutes.</returns>
    function ConvertTo(ctx: DNITypeDescriptorContext; ci: DDN.mscorlib.DNCultureInfo; value: DDN.mscorlib.DNObject; &type: DDN.mscorlib.DNType): DDN.mscorlib.DNObject; overload;
    ///<summary>Converts a <see cref="T:System.String" />
    ///  to a <see cref="T:System.TimeSpan" />
    ///  .</summary>
    ///  <param name="ctx">The <see cref="T:System.ComponentModel.ITypeDescriptorContext" />
    ///  object used for type conversions.</param>
    ///  <param name="ci">The <see cref="T:System.Globalization.CultureInfo" />
    ///  object used during conversion.</param>
    ///  <param name="data">The <see cref="T:System.String" />
    ///  object to convert.</param>
    ///<returns>The <see cref="T:System.TimeSpan" />
    ///  representing the <paramref name="data" />
    ///  parameter in minutes.</returns>
    function ConvertFrom(ctx: DNITypeDescriptorContext; ci: DDN.mscorlib.DNCultureInfo; data: DDN.mscorlib.DNObject): DDN.mscorlib.DNObject; overload;
    ///<summary>Determines whether the conversion is allowed.</summary>
    ///  <param name="ctx">The <see cref="T:System.ComponentModel.ITypeDescriptorContext" />
    ///  object used for type conversion.</param>
    ///  <param name="type">The type to convert to.</param>
    ///<returns><see langword="true" />
    ///  if the conversion is allowed; otherwise, <see langword="false" />
    ///  . </returns>
    function CanConvertTo(ctx: DNITypeDescriptorContext; &type: DDN.mscorlib.DNType): Boolean; overload;
    ///<summary>Determines whether the conversion is allowed.</summary>
    ///  <param name="ctx">The <see cref="T:System.ComponentModel.ITypeDescriptorContext" />
    ///  object used for type conversions.</param>
    ///  <param name="type">The <see cref="T:System.Type" />
    ///  to convert from.</param>
    ///<returns><see langword="true" />
    ///  if the conversion is allowed; otherwise, <see langword="false" />
    ///  .</returns>
    function CanConvertFrom(ctx: DNITypeDescriptorContext; &type: DDN.mscorlib.DNType): Boolean; overload;
    function CanConvertFrom(sourceType: DDN.mscorlib.DNType): Boolean; overload;
    function CanConvertTo(destinationType: DDN.mscorlib.DNType): Boolean; overload;
    function ConvertFrom(value: DDN.mscorlib.DNObject): DDN.mscorlib.DNObject; overload;
    function ConvertFromInvariantString(text: string): DDN.mscorlib.DNObject; overload;
    function ConvertFromInvariantString(context: DNITypeDescriptorContext; text: string): DDN.mscorlib.DNObject; overload;
    function ConvertFromString(text: string): DDN.mscorlib.DNObject; overload;
    function ConvertFromString(context: DNITypeDescriptorContext; text: string): DDN.mscorlib.DNObject; overload;
    function ConvertFromString(context: DNITypeDescriptorContext; culture: DDN.mscorlib.DNCultureInfo; text: string): DDN.mscorlib.DNObject; overload;
    function ConvertTo(value: DDN.mscorlib.DNObject; destinationType: DDN.mscorlib.DNType): DDN.mscorlib.DNObject; overload;
    function ConvertToInvariantString(value: DDN.mscorlib.DNObject): string; overload;
    function ConvertToInvariantString(context: DNITypeDescriptorContext; value: DDN.mscorlib.DNObject): string; overload;
    function ConvertToString(value: DDN.mscorlib.DNObject): string; overload;
    function ConvertToString(context: DNITypeDescriptorContext; value: DDN.mscorlib.DNObject): string; overload;
    function ConvertToString(context: DNITypeDescriptorContext; culture: DDN.mscorlib.DNCultureInfo; value: DDN.mscorlib.DNObject): string; overload;
    function CreateInstance(propertyValues: DDN.mscorlib.DNIDictionary): DDN.mscorlib.DNObject; overload;
    function CreateInstance(context: DNITypeDescriptorContext; propertyValues: DDN.mscorlib.DNIDictionary): DDN.mscorlib.DNObject; overload;
    function GetCreateInstanceSupported: Boolean; overload;
    function GetCreateInstanceSupported(context: DNITypeDescriptorContext): Boolean; overload;
    function GetProperties(value: DDN.mscorlib.DNObject): DNPropertyDescriptorCollection; overload;
    function GetProperties(context: DNITypeDescriptorContext; value: DDN.mscorlib.DNObject; attributes: TArray<DDN.mscorlib.DNAttribute>): DNPropertyDescriptorCollection; overload;
    function GetPropertiesSupported: Boolean; overload;
    function GetPropertiesSupported(context: DNITypeDescriptorContext): Boolean; overload;
    function GetStandardValues: DDN.mscorlib.DNICollection; overload;
    function GetStandardValues(context: DNITypeDescriptorContext): DNTypeConverter_StandardValuesCollection; overload;
    function GetStandardValuesExclusive: Boolean; overload;
    function GetStandardValuesExclusive(context: DNITypeDescriptorContext): Boolean; overload;
    function GetStandardValuesSupported: Boolean; overload;
    function GetStandardValuesSupported(context: DNITypeDescriptorContext): Boolean; overload;
    function IsValid(value: DDN.mscorlib.DNObject): Boolean; overload;
    function IsValid(context: DNITypeDescriptorContext; value: DDN.mscorlib.DNObject): Boolean; overload;
    function GetProperties(context: DNITypeDescriptorContext; value: DDN.mscorlib.DNObject): DNPropertyDescriptorCollection; overload;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNTimeSpanMinutesConverter = class(TDNGenericImport<DNTimeSpanMinutesConverterClass, DNTimeSpanMinutesConverter>) end;

  //-------------namespace: System.Configuration----------------
  DNTimeSpanMinutesOrInfiniteConverterClass = interface(DNTimeSpanMinutesConverterClass)
  ['{AC3A2F4E-DDF6-5642-A8E9-8A288E327F58}']
  { constructors } 

    ///<summary>Initializes a new instance of the <see cref="T:System.Configuration.TimeSpanMinutesOrInfiniteConverter" />
    ///  class.</summary>
    {class} function init: DNTimeSpanMinutesOrInfiniteConverter;

  end;

  ///<summary>Converts a <see cref="T:System.TimeSpan" />
  ///  expressed in minutes or as a standard infinite time span.</summary>
  [DNTypeName('System.Configuration.TimeSpanMinutesOrInfiniteConverter')]
  DNTimeSpanMinutesOrInfiniteConverter = interface(DNTimeSpanMinutesConverter)
  ['{3D9A8F7C-D353-3DD5-A096-BA1B81C41FEE}']
  { methods } 

    ///<summary>Converts a <see cref="T:System.String" />
    ///  to a <see cref="T:System.TimeSpan" />
    ///  .</summary>
    ///  <param name="ctx">The <see cref="T:System.ComponentModel.ITypeDescriptorContext" />
    ///  object used for type conversions.</param>
    ///  <param name="ci">The <see cref="T:System.Globalization.CultureInfo" />
    ///  object used during conversion.</param>
    ///  <param name="data">The <see cref="T:System.String" />
    ///  object to convert.</param>
    ///<returns>The <see cref="F:System.TimeSpan.MaxValue" />
    ///  , if the <paramref name="data" />
    ///  parameter is the <see cref="T:System.String" />
    ///  "infinite"; otherwise, the <see cref="T:System.TimeSpan" />
    ///  representing the <paramref name="data" />
    ///  parameter in minutes.</returns>
    function ConvertFrom(ctx: DNITypeDescriptorContext; ci: DDN.mscorlib.DNCultureInfo; data: DDN.mscorlib.DNObject): DDN.mscorlib.DNObject; overload;
    ///<summary>Converts a <see cref="T:System.TimeSpan" />
    ///  to a <see cref="T:System.String" />
    ///  .</summary>
    ///  <param name="ctx">The <see cref="T:System.ComponentModel.ITypeDescriptorContext" />
    ///  object used for type conversions.</param>
    ///  <param name="ci">The <see cref="T:System.Globalization.CultureInfo" />
    ///  object used during conversion.</param>
    ///  <param name="value">The value to convert.</param>
    ///  <param name="type">The conversion type.</param>
    ///<returns>The <see cref="T:System.String" />
    ///  "infinite", if the <paramref name="value" />
    ///  parameter is <see cref="F:System.TimeSpan.MaxValue" />
    ///  ; otherwise, the <see cref="T:System.String" />
    ///  representing the <paramref name="value" />
    ///  parameter in minutes.</returns>
    function ConvertTo(ctx: DNITypeDescriptorContext; ci: DDN.mscorlib.DNCultureInfo; value: DDN.mscorlib.DNObject; &type: DDN.mscorlib.DNType): DDN.mscorlib.DNObject; overload;
    function CanConvertTo(ctx: DNITypeDescriptorContext; &type: DDN.mscorlib.DNType): Boolean; overload;
    function CanConvertFrom(ctx: DNITypeDescriptorContext; &type: DDN.mscorlib.DNType): Boolean; overload;
    function CanConvertFrom(sourceType: DDN.mscorlib.DNType): Boolean; overload;
    function CanConvertTo(destinationType: DDN.mscorlib.DNType): Boolean; overload;
    function ConvertFrom(value: DDN.mscorlib.DNObject): DDN.mscorlib.DNObject; overload;
    function ConvertFromInvariantString(text: string): DDN.mscorlib.DNObject; overload;
    function ConvertFromInvariantString(context: DNITypeDescriptorContext; text: string): DDN.mscorlib.DNObject; overload;
    function ConvertFromString(text: string): DDN.mscorlib.DNObject; overload;
    function ConvertFromString(context: DNITypeDescriptorContext; text: string): DDN.mscorlib.DNObject; overload;
    function ConvertFromString(context: DNITypeDescriptorContext; culture: DDN.mscorlib.DNCultureInfo; text: string): DDN.mscorlib.DNObject; overload;
    function ConvertTo(value: DDN.mscorlib.DNObject; destinationType: DDN.mscorlib.DNType): DDN.mscorlib.DNObject; overload;
    function ConvertToInvariantString(value: DDN.mscorlib.DNObject): string; overload;
    function ConvertToInvariantString(context: DNITypeDescriptorContext; value: DDN.mscorlib.DNObject): string; overload;
    function ConvertToString(value: DDN.mscorlib.DNObject): string; overload;
    function ConvertToString(context: DNITypeDescriptorContext; value: DDN.mscorlib.DNObject): string; overload;
    function ConvertToString(context: DNITypeDescriptorContext; culture: DDN.mscorlib.DNCultureInfo; value: DDN.mscorlib.DNObject): string; overload;
    function CreateInstance(propertyValues: DDN.mscorlib.DNIDictionary): DDN.mscorlib.DNObject; overload;
    function CreateInstance(context: DNITypeDescriptorContext; propertyValues: DDN.mscorlib.DNIDictionary): DDN.mscorlib.DNObject; overload;
    function GetCreateInstanceSupported: Boolean; overload;
    function GetCreateInstanceSupported(context: DNITypeDescriptorContext): Boolean; overload;
    function GetProperties(value: DDN.mscorlib.DNObject): DNPropertyDescriptorCollection; overload;
    function GetProperties(context: DNITypeDescriptorContext; value: DDN.mscorlib.DNObject; attributes: TArray<DDN.mscorlib.DNAttribute>): DNPropertyDescriptorCollection; overload;
    function GetPropertiesSupported: Boolean; overload;
    function GetPropertiesSupported(context: DNITypeDescriptorContext): Boolean; overload;
    function GetStandardValues: DDN.mscorlib.DNICollection; overload;
    function GetStandardValues(context: DNITypeDescriptorContext): DNTypeConverter_StandardValuesCollection; overload;
    function GetStandardValuesExclusive: Boolean; overload;
    function GetStandardValuesExclusive(context: DNITypeDescriptorContext): Boolean; overload;
    function GetStandardValuesSupported: Boolean; overload;
    function GetStandardValuesSupported(context: DNITypeDescriptorContext): Boolean; overload;
    function IsValid(value: DDN.mscorlib.DNObject): Boolean; overload;
    function IsValid(context: DNITypeDescriptorContext; value: DDN.mscorlib.DNObject): Boolean; overload;
    function GetProperties(context: DNITypeDescriptorContext; value: DDN.mscorlib.DNObject): DNPropertyDescriptorCollection; overload;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNTimeSpanMinutesOrInfiniteConverter = class(TDNGenericImport<DNTimeSpanMinutesOrInfiniteConverterClass, DNTimeSpanMinutesOrInfiniteConverter>) end;

  //-------------namespace: System.Configuration----------------
  DNTimeSpanSecondsConverterClass = interface(DNConfigurationConverterBaseClass)
  ['{843D6767-A74B-5919-99E1-81649121429E}']
  { constructors } 

    ///<summary>Initializes a new instance of the <see cref="T:System.Configuration.TimeSpanSecondsConverter" />
    ///  class.</summary>
    {class} function init: DNTimeSpanSecondsConverter;

  end;

  ///<summary>Converts a time span expressed in seconds. </summary>
  [DNTypeName('System.Configuration.TimeSpanSecondsConverter')]
  DNTimeSpanSecondsConverter = interface(DNConfigurationConverterBase)
  ['{7E8D2F57-1487-3396-98CC-1B18CE502821}']
  { methods } 

    ///<summary>Converts a <see cref="T:System.TimeSpan" />
    ///  to a <see cref="T:System.String" />
    ///  .</summary>
    ///  <param name="ctx">The <see cref="T:System.ComponentModel.ITypeDescriptorContext" />
    ///  object used for type conversions.</param>
    ///  <param name="ci">The <see cref="T:System.Globalization.CultureInfo" />
    ///  object used during conversion.</param>
    ///  <param name="value">The value to convert to.</param>
    ///  <param name="type">The type to convert to.</param>
    ///<returns>The <see cref="T:System.String" />
    ///  that represents the <paramref name="value" />
    ///  parameter in minutes.</returns>
    function ConvertTo(ctx: DNITypeDescriptorContext; ci: DDN.mscorlib.DNCultureInfo; value: DDN.mscorlib.DNObject; &type: DDN.mscorlib.DNType): DDN.mscorlib.DNObject; overload;
    ///<summary>Converts a <see cref="T:System.String" />
    ///  to a <see cref="T:System.TimeSpan" />
    ///  .</summary>
    ///  <param name="ctx">The <see cref="T:System.ComponentModel.ITypeDescriptorContext" />
    ///  object used for type conversions.</param>
    ///  <param name="ci">The <see cref="T:System.Globalization.CultureInfo" />
    ///  object used during conversion.</param>
    ///  <param name="data">The <see cref="T:System.String" />
    ///  object to convert.</param>
    ///<returns>The <see cref="T:System.TimeSpan" />
    ///  representing the <paramref name="data" />
    ///  parameter in seconds.</returns>
    ///<exception cref="T:System.ArgumentException"><paramref name="data" />
    ///  cannot be parsed as an integer value.</exception>
    function ConvertFrom(ctx: DNITypeDescriptorContext; ci: DDN.mscorlib.DNCultureInfo; data: DDN.mscorlib.DNObject): DDN.mscorlib.DNObject; overload;
    ///<summary>Determines whether the conversion is allowed.</summary>
    ///  <param name="ctx">The <see cref="T:System.ComponentModel.ITypeDescriptorContext" />
    ///  object used for type conversion.</param>
    ///  <param name="type">The type to convert to.</param>
    ///<returns><see langword="true" />
    ///  if the conversion is allowed; otherwise, <see langword="false" />
    ///  . </returns>
    function CanConvertTo(ctx: DNITypeDescriptorContext; &type: DDN.mscorlib.DNType): Boolean; overload;
    ///<summary>Determines whether the conversion is allowed.</summary>
    ///  <param name="ctx">The <see cref="T:System.ComponentModel.ITypeDescriptorContext" />
    ///  object used for type conversions.</param>
    ///  <param name="type">The <see cref="T:System.Type" />
    ///  to convert from.</param>
    ///<returns><see langword="true" />
    ///  if the conversion is allowed; otherwise, <see langword="false" />
    ///  .</returns>
    function CanConvertFrom(ctx: DNITypeDescriptorContext; &type: DDN.mscorlib.DNType): Boolean; overload;
    function CanConvertFrom(sourceType: DDN.mscorlib.DNType): Boolean; overload;
    function CanConvertTo(destinationType: DDN.mscorlib.DNType): Boolean; overload;
    function ConvertFrom(value: DDN.mscorlib.DNObject): DDN.mscorlib.DNObject; overload;
    function ConvertFromInvariantString(text: string): DDN.mscorlib.DNObject; overload;
    function ConvertFromInvariantString(context: DNITypeDescriptorContext; text: string): DDN.mscorlib.DNObject; overload;
    function ConvertFromString(text: string): DDN.mscorlib.DNObject; overload;
    function ConvertFromString(context: DNITypeDescriptorContext; text: string): DDN.mscorlib.DNObject; overload;
    function ConvertFromString(context: DNITypeDescriptorContext; culture: DDN.mscorlib.DNCultureInfo; text: string): DDN.mscorlib.DNObject; overload;
    function ConvertTo(value: DDN.mscorlib.DNObject; destinationType: DDN.mscorlib.DNType): DDN.mscorlib.DNObject; overload;
    function ConvertToInvariantString(value: DDN.mscorlib.DNObject): string; overload;
    function ConvertToInvariantString(context: DNITypeDescriptorContext; value: DDN.mscorlib.DNObject): string; overload;
    function ConvertToString(value: DDN.mscorlib.DNObject): string; overload;
    function ConvertToString(context: DNITypeDescriptorContext; value: DDN.mscorlib.DNObject): string; overload;
    function ConvertToString(context: DNITypeDescriptorContext; culture: DDN.mscorlib.DNCultureInfo; value: DDN.mscorlib.DNObject): string; overload;
    function CreateInstance(propertyValues: DDN.mscorlib.DNIDictionary): DDN.mscorlib.DNObject; overload;
    function CreateInstance(context: DNITypeDescriptorContext; propertyValues: DDN.mscorlib.DNIDictionary): DDN.mscorlib.DNObject; overload;
    function GetCreateInstanceSupported: Boolean; overload;
    function GetCreateInstanceSupported(context: DNITypeDescriptorContext): Boolean; overload;
    function GetProperties(value: DDN.mscorlib.DNObject): DNPropertyDescriptorCollection; overload;
    function GetProperties(context: DNITypeDescriptorContext; value: DDN.mscorlib.DNObject; attributes: TArray<DDN.mscorlib.DNAttribute>): DNPropertyDescriptorCollection; overload;
    function GetPropertiesSupported: Boolean; overload;
    function GetPropertiesSupported(context: DNITypeDescriptorContext): Boolean; overload;
    function GetStandardValues: DDN.mscorlib.DNICollection; overload;
    function GetStandardValues(context: DNITypeDescriptorContext): DNTypeConverter_StandardValuesCollection; overload;
    function GetStandardValuesExclusive: Boolean; overload;
    function GetStandardValuesExclusive(context: DNITypeDescriptorContext): Boolean; overload;
    function GetStandardValuesSupported: Boolean; overload;
    function GetStandardValuesSupported(context: DNITypeDescriptorContext): Boolean; overload;
    function IsValid(value: DDN.mscorlib.DNObject): Boolean; overload;
    function IsValid(context: DNITypeDescriptorContext; value: DDN.mscorlib.DNObject): Boolean; overload;
    function GetProperties(context: DNITypeDescriptorContext; value: DDN.mscorlib.DNObject): DNPropertyDescriptorCollection; overload;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNTimeSpanSecondsConverter = class(TDNGenericImport<DNTimeSpanSecondsConverterClass, DNTimeSpanSecondsConverter>) end;

  //-------------namespace: System.Configuration----------------
  DNTimeSpanSecondsOrInfiniteConverterClass = interface(DNTimeSpanSecondsConverterClass)
  ['{A6998E67-E7C7-5DAB-85F5-33D03ECDC129}']
  { constructors } 

    ///<summary>Initializes a new instance of the <see cref="T:System.Configuration.TimeSpanSecondsOrInfiniteConverter" />
    ///  class.</summary>
    {class} function init: DNTimeSpanSecondsOrInfiniteConverter;

  end;

  ///<summary>Converts a <see cref="T:System.TimeSpan" />
  ///  expressed in seconds or as a standard infinite time span.</summary>
  [DNTypeName('System.Configuration.TimeSpanSecondsOrInfiniteConverter')]
  DNTimeSpanSecondsOrInfiniteConverter = interface(DNTimeSpanSecondsConverter)
  ['{D3414CFD-DE05-37E3-A545-00F2A7084DBC}']
  { methods } 

    ///<summary>Converts a <see cref="T:System.TimeSpan" />
    ///  to a. <see cref="T:System.String" />
    ///  .</summary>
    ///  <param name="ctx">The <see cref="T:System.ComponentModel.ITypeDescriptorContext" />
    ///  object used for type conversions.</param>
    ///  <param name="ci">The <see cref="T:System.Globalization.CultureInfo" />
    ///  object used during conversion.</param>
    ///  <param name="value">The value to convert.</param>
    ///  <param name="type">The conversion type.</param>
    ///<returns>The <see cref="T:System.String" />
    ///  "infinite", if the <paramref name="value" />
    ///  parameter is <see cref="F:System.TimeSpan.MaxValue" />
    ///  ; otherwise, the <see cref="T:System.String" />
    ///  representing the <paramref name="value" />
    ///  parameter in seconds.</returns>
    function ConvertTo(ctx: DNITypeDescriptorContext; ci: DDN.mscorlib.DNCultureInfo; value: DDN.mscorlib.DNObject; &type: DDN.mscorlib.DNType): DDN.mscorlib.DNObject; overload;
    ///<summary>Converts a <see cref="T:System.String" />
    ///  to a <see cref="T:System.TimeSpan" />
    ///  .</summary>
    ///  <param name="ctx">The <see cref="T:System.ComponentModel.ITypeDescriptorContext" />
    ///  object used for type conversions.</param>
    ///  <param name="ci">The <see cref="T:System.Globalization.CultureInfo" />
    ///  object used during conversion.</param>
    ///  <param name="data">The <see cref="T:System.String" />
    ///  object to convert.</param>
    ///<returns>The <see cref="F:System.TimeSpan.MaxValue" />
    ///  , if the <paramref name="data" />
    ///  parameter is the <see cref="T:System.String" />
    ///  "infinite"; otherwise, the <see cref="T:System.TimeSpan" />
    ///  representing the <paramref name="data" />
    ///  parameter in seconds.</returns>
    function ConvertFrom(ctx: DNITypeDescriptorContext; ci: DDN.mscorlib.DNCultureInfo; data: DDN.mscorlib.DNObject): DDN.mscorlib.DNObject; overload;
    function CanConvertTo(ctx: DNITypeDescriptorContext; &type: DDN.mscorlib.DNType): Boolean; overload;
    function CanConvertFrom(ctx: DNITypeDescriptorContext; &type: DDN.mscorlib.DNType): Boolean; overload;
    function CanConvertFrom(sourceType: DDN.mscorlib.DNType): Boolean; overload;
    function CanConvertTo(destinationType: DDN.mscorlib.DNType): Boolean; overload;
    function ConvertFrom(value: DDN.mscorlib.DNObject): DDN.mscorlib.DNObject; overload;
    function ConvertFromInvariantString(text: string): DDN.mscorlib.DNObject; overload;
    function ConvertFromInvariantString(context: DNITypeDescriptorContext; text: string): DDN.mscorlib.DNObject; overload;
    function ConvertFromString(text: string): DDN.mscorlib.DNObject; overload;
    function ConvertFromString(context: DNITypeDescriptorContext; text: string): DDN.mscorlib.DNObject; overload;
    function ConvertFromString(context: DNITypeDescriptorContext; culture: DDN.mscorlib.DNCultureInfo; text: string): DDN.mscorlib.DNObject; overload;
    function ConvertTo(value: DDN.mscorlib.DNObject; destinationType: DDN.mscorlib.DNType): DDN.mscorlib.DNObject; overload;
    function ConvertToInvariantString(value: DDN.mscorlib.DNObject): string; overload;
    function ConvertToInvariantString(context: DNITypeDescriptorContext; value: DDN.mscorlib.DNObject): string; overload;
    function ConvertToString(value: DDN.mscorlib.DNObject): string; overload;
    function ConvertToString(context: DNITypeDescriptorContext; value: DDN.mscorlib.DNObject): string; overload;
    function ConvertToString(context: DNITypeDescriptorContext; culture: DDN.mscorlib.DNCultureInfo; value: DDN.mscorlib.DNObject): string; overload;
    function CreateInstance(propertyValues: DDN.mscorlib.DNIDictionary): DDN.mscorlib.DNObject; overload;
    function CreateInstance(context: DNITypeDescriptorContext; propertyValues: DDN.mscorlib.DNIDictionary): DDN.mscorlib.DNObject; overload;
    function GetCreateInstanceSupported: Boolean; overload;
    function GetCreateInstanceSupported(context: DNITypeDescriptorContext): Boolean; overload;
    function GetProperties(value: DDN.mscorlib.DNObject): DNPropertyDescriptorCollection; overload;
    function GetProperties(context: DNITypeDescriptorContext; value: DDN.mscorlib.DNObject; attributes: TArray<DDN.mscorlib.DNAttribute>): DNPropertyDescriptorCollection; overload;
    function GetPropertiesSupported: Boolean; overload;
    function GetPropertiesSupported(context: DNITypeDescriptorContext): Boolean; overload;
    function GetStandardValues: DDN.mscorlib.DNICollection; overload;
    function GetStandardValues(context: DNITypeDescriptorContext): DNTypeConverter_StandardValuesCollection; overload;
    function GetStandardValuesExclusive: Boolean; overload;
    function GetStandardValuesExclusive(context: DNITypeDescriptorContext): Boolean; overload;
    function GetStandardValuesSupported: Boolean; overload;
    function GetStandardValuesSupported(context: DNITypeDescriptorContext): Boolean; overload;
    function IsValid(value: DDN.mscorlib.DNObject): Boolean; overload;
    function IsValid(context: DNITypeDescriptorContext; value: DDN.mscorlib.DNObject): Boolean; overload;
    function GetProperties(context: DNITypeDescriptorContext; value: DDN.mscorlib.DNObject): DNPropertyDescriptorCollection; overload;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNTimeSpanSecondsOrInfiniteConverter = class(TDNGenericImport<DNTimeSpanSecondsOrInfiniteConverterClass, DNTimeSpanSecondsOrInfiniteConverter>) end;

  //-------------namespace: System.Configuration----------------
  DNTypeNameConverterClass = interface(DNConfigurationConverterBaseClass)
  ['{C1765974-DDDE-58A6-88AB-7794B708589A}']
  { constructors } 

    ///<summary>Initializes a new instance of the <see cref="T:System.Configuration.TypeNameConverter" />
    ///  class.</summary>
    {class} function init: DNTypeNameConverter;

  end;

  ///<summary>Converts between type and string values. This class cannot be inherited.</summary>
  [DNTypeName('System.Configuration.TypeNameConverter')]
  DNTypeNameConverter = interface(DNConfigurationConverterBase)
  ['{35C93F2B-7B46-366F-B778-A2703A600725}']
  { methods } 

    ///<summary>Converts a <see cref="T:System.Type" />
    ///  object to a <see cref="T:System.String" />
    ///  object.</summary>
    ///  <param name="ctx">The <see cref="T:System.ComponentModel.ITypeDescriptorContext" />
    ///  object used for type conversions.</param>
    ///  <param name="ci">The <see cref="T:System.Globalization.CultureInfo" />
    ///  object used during conversion.</param>
    ///  <param name="value">The value to convert to.</param>
    ///  <param name="type">The type to convert to.</param>
    ///<returns>The <see cref="T:System.String" />
    ///  that represents the <paramref name="value" />
    ///  parameter. </returns>
    function ConvertTo(ctx: DNITypeDescriptorContext; ci: DDN.mscorlib.DNCultureInfo; value: DDN.mscorlib.DNObject; &type: DDN.mscorlib.DNType): DDN.mscorlib.DNObject; overload;
    ///<summary>Converts a <see cref="T:System.String" />
    ///  object to a <see cref="T:System.Type" />
    ///  object.</summary>
    ///  <param name="ctx">The <see cref="T:System.ComponentModel.ITypeDescriptorContext" />
    ///  object used for type conversions.</param>
    ///  <param name="ci">The <see cref="T:System.Globalization.CultureInfo" />
    ///  object used during conversion.</param>
    ///  <param name="data">The <see cref="T:System.String" />
    ///  object to convert.</param>
    ///<returns>The <see cref="T:System.Type" />
    ///  that represents the <paramref name="data" />
    ///  parameter.</returns>
    ///<exception cref="T:System.ArgumentException">The <see cref="T:System.Type" />
    ///  value cannot be resolved.</exception>
    function ConvertFrom(ctx: DNITypeDescriptorContext; ci: DDN.mscorlib.DNCultureInfo; data: DDN.mscorlib.DNObject): DDN.mscorlib.DNObject; overload;
    ///<summary>Determines whether the conversion is allowed.</summary>
    ///  <param name="ctx">The <see cref="T:System.ComponentModel.ITypeDescriptorContext" />
    ///  object used for type conversion.</param>
    ///  <param name="type">The type to convert to.</param>
    ///<returns><see langword="true" />
    ///  if the conversion is allowed; otherwise, <see langword="false" />
    ///  . </returns>
    function CanConvertTo(ctx: DNITypeDescriptorContext; &type: DDN.mscorlib.DNType): Boolean; overload;
    ///<summary>Determines whether the conversion is allowed.</summary>
    ///  <param name="ctx">The <see cref="T:System.ComponentModel.ITypeDescriptorContext" />
    ///  object used for type conversions.</param>
    ///  <param name="type">The <see cref="T:System.Type" />
    ///  to convert from.</param>
    ///<returns><see langword="true" />
    ///  if the conversion is allowed; otherwise, <see langword="false" />
    ///  .</returns>
    function CanConvertFrom(ctx: DNITypeDescriptorContext; &type: DDN.mscorlib.DNType): Boolean; overload;
    function CanConvertFrom(sourceType: DDN.mscorlib.DNType): Boolean; overload;
    function CanConvertTo(destinationType: DDN.mscorlib.DNType): Boolean; overload;
    function ConvertFrom(value: DDN.mscorlib.DNObject): DDN.mscorlib.DNObject; overload;
    function ConvertFromInvariantString(text: string): DDN.mscorlib.DNObject; overload;
    function ConvertFromInvariantString(context: DNITypeDescriptorContext; text: string): DDN.mscorlib.DNObject; overload;
    function ConvertFromString(text: string): DDN.mscorlib.DNObject; overload;
    function ConvertFromString(context: DNITypeDescriptorContext; text: string): DDN.mscorlib.DNObject; overload;
    function ConvertFromString(context: DNITypeDescriptorContext; culture: DDN.mscorlib.DNCultureInfo; text: string): DDN.mscorlib.DNObject; overload;
    function ConvertTo(value: DDN.mscorlib.DNObject; destinationType: DDN.mscorlib.DNType): DDN.mscorlib.DNObject; overload;
    function ConvertToInvariantString(value: DDN.mscorlib.DNObject): string; overload;
    function ConvertToInvariantString(context: DNITypeDescriptorContext; value: DDN.mscorlib.DNObject): string; overload;
    function ConvertToString(value: DDN.mscorlib.DNObject): string; overload;
    function ConvertToString(context: DNITypeDescriptorContext; value: DDN.mscorlib.DNObject): string; overload;
    function ConvertToString(context: DNITypeDescriptorContext; culture: DDN.mscorlib.DNCultureInfo; value: DDN.mscorlib.DNObject): string; overload;
    function CreateInstance(propertyValues: DDN.mscorlib.DNIDictionary): DDN.mscorlib.DNObject; overload;
    function CreateInstance(context: DNITypeDescriptorContext; propertyValues: DDN.mscorlib.DNIDictionary): DDN.mscorlib.DNObject; overload;
    function GetCreateInstanceSupported: Boolean; overload;
    function GetCreateInstanceSupported(context: DNITypeDescriptorContext): Boolean; overload;
    function GetProperties(value: DDN.mscorlib.DNObject): DNPropertyDescriptorCollection; overload;
    function GetProperties(context: DNITypeDescriptorContext; value: DDN.mscorlib.DNObject; attributes: TArray<DDN.mscorlib.DNAttribute>): DNPropertyDescriptorCollection; overload;
    function GetPropertiesSupported: Boolean; overload;
    function GetPropertiesSupported(context: DNITypeDescriptorContext): Boolean; overload;
    function GetStandardValues: DDN.mscorlib.DNICollection; overload;
    function GetStandardValues(context: DNITypeDescriptorContext): DNTypeConverter_StandardValuesCollection; overload;
    function GetStandardValuesExclusive: Boolean; overload;
    function GetStandardValuesExclusive(context: DNITypeDescriptorContext): Boolean; overload;
    function GetStandardValuesSupported: Boolean; overload;
    function GetStandardValuesSupported(context: DNITypeDescriptorContext): Boolean; overload;
    function IsValid(value: DDN.mscorlib.DNObject): Boolean; overload;
    function IsValid(context: DNITypeDescriptorContext; value: DDN.mscorlib.DNObject): Boolean; overload;
    function GetProperties(context: DNITypeDescriptorContext; value: DDN.mscorlib.DNObject): DNPropertyDescriptorCollection; overload;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNTypeNameConverter = class(TDNGenericImport<DNTypeNameConverterClass, DNTypeNameConverter>) end;

  //-------------namespace: System.Configuration----------------
  DNWhiteSpaceTrimStringConverterClass = interface(DNConfigurationConverterBaseClass)
  ['{72CC7FE7-607E-5668-A08C-6C5155D463C0}']
  { constructors } 

    ///<summary>Initializes a new instance of the <see cref="T:System.Configuration.WhiteSpaceTrimStringConverter" />
    ///  class.</summary>
    {class} function init: DNWhiteSpaceTrimStringConverter;

  end;

  ///<summary>Converts a string to its canonical format. </summary>
  [DNTypeName('System.Configuration.WhiteSpaceTrimStringConverter')]
  DNWhiteSpaceTrimStringConverter = interface(DNConfigurationConverterBase)
  ['{63D99F63-7BA1-312F-9D69-E9EEF5AB2773}']
  { methods } 

    ///<summary>Converts a <see cref="T:System.String" />
    ///  to canonical form.</summary>
    ///  <param name="ctx">The <see cref="T:System.ComponentModel.ITypeDescriptorContext" />
    ///  object used for type conversions.</param>
    ///  <param name="ci">The <see cref="T:System.Globalization.CultureInfo" />
    ///  object used during conversion.</param>
    ///  <param name="value">The value to convert to.</param>
    ///  <param name="type">The type to convert to.</param>
    ///<returns>An object representing the converted value.</returns>
    function ConvertTo(ctx: DNITypeDescriptorContext; ci: DDN.mscorlib.DNCultureInfo; value: DDN.mscorlib.DNObject; &type: DDN.mscorlib.DNType): DDN.mscorlib.DNObject; overload;
    ///<summary>Converts a <see cref="T:System.String" />
    ///  to canonical form.</summary>
    ///  <param name="ctx">The <see cref="T:System.ComponentModel.ITypeDescriptorContext" />
    ///  object used for type conversions.</param>
    ///  <param name="ci">The <see cref="T:System.Globalization.CultureInfo" />
    ///  object used during conversion.</param>
    ///  <param name="data">The <see cref="T:System.String" />
    ///  object to convert.</param>
    ///<returns>An object representing the converted value.</returns>
    function ConvertFrom(ctx: DNITypeDescriptorContext; ci: DDN.mscorlib.DNCultureInfo; data: DDN.mscorlib.DNObject): DDN.mscorlib.DNObject; overload;
    ///<summary>Determines whether the conversion is allowed.</summary>
    ///  <param name="ctx">The <see cref="T:System.ComponentModel.ITypeDescriptorContext" />
    ///  object used for type conversion.</param>
    ///  <param name="type">The type to convert to.</param>
    ///<returns><see langword="true" />
    ///  if the conversion is allowed; otherwise, <see langword="false" />
    ///  . </returns>
    function CanConvertTo(ctx: DNITypeDescriptorContext; &type: DDN.mscorlib.DNType): Boolean; overload;
    ///<summary>Determines whether the conversion is allowed.</summary>
    ///  <param name="ctx">The <see cref="T:System.ComponentModel.ITypeDescriptorContext" />
    ///  object used for type conversions.</param>
    ///  <param name="type">The <see cref="T:System.Type" />
    ///  to convert from.</param>
    ///<returns><see langword="true" />
    ///  if the conversion is allowed; otherwise, <see langword="false" />
    ///  .</returns>
    function CanConvertFrom(ctx: DNITypeDescriptorContext; &type: DDN.mscorlib.DNType): Boolean; overload;
    function CanConvertFrom(sourceType: DDN.mscorlib.DNType): Boolean; overload;
    function CanConvertTo(destinationType: DDN.mscorlib.DNType): Boolean; overload;
    function ConvertFrom(value: DDN.mscorlib.DNObject): DDN.mscorlib.DNObject; overload;
    function ConvertFromInvariantString(text: string): DDN.mscorlib.DNObject; overload;
    function ConvertFromInvariantString(context: DNITypeDescriptorContext; text: string): DDN.mscorlib.DNObject; overload;
    function ConvertFromString(text: string): DDN.mscorlib.DNObject; overload;
    function ConvertFromString(context: DNITypeDescriptorContext; text: string): DDN.mscorlib.DNObject; overload;
    function ConvertFromString(context: DNITypeDescriptorContext; culture: DDN.mscorlib.DNCultureInfo; text: string): DDN.mscorlib.DNObject; overload;
    function ConvertTo(value: DDN.mscorlib.DNObject; destinationType: DDN.mscorlib.DNType): DDN.mscorlib.DNObject; overload;
    function ConvertToInvariantString(value: DDN.mscorlib.DNObject): string; overload;
    function ConvertToInvariantString(context: DNITypeDescriptorContext; value: DDN.mscorlib.DNObject): string; overload;
    function ConvertToString(value: DDN.mscorlib.DNObject): string; overload;
    function ConvertToString(context: DNITypeDescriptorContext; value: DDN.mscorlib.DNObject): string; overload;
    function ConvertToString(context: DNITypeDescriptorContext; culture: DDN.mscorlib.DNCultureInfo; value: DDN.mscorlib.DNObject): string; overload;
    function CreateInstance(propertyValues: DDN.mscorlib.DNIDictionary): DDN.mscorlib.DNObject; overload;
    function CreateInstance(context: DNITypeDescriptorContext; propertyValues: DDN.mscorlib.DNIDictionary): DDN.mscorlib.DNObject; overload;
    function GetCreateInstanceSupported: Boolean; overload;
    function GetCreateInstanceSupported(context: DNITypeDescriptorContext): Boolean; overload;
    function GetProperties(value: DDN.mscorlib.DNObject): DNPropertyDescriptorCollection; overload;
    function GetProperties(context: DNITypeDescriptorContext; value: DDN.mscorlib.DNObject; attributes: TArray<DDN.mscorlib.DNAttribute>): DNPropertyDescriptorCollection; overload;
    function GetPropertiesSupported: Boolean; overload;
    function GetPropertiesSupported(context: DNITypeDescriptorContext): Boolean; overload;
    function GetStandardValues: DDN.mscorlib.DNICollection; overload;
    function GetStandardValues(context: DNITypeDescriptorContext): DNTypeConverter_StandardValuesCollection; overload;
    function GetStandardValuesExclusive: Boolean; overload;
    function GetStandardValuesExclusive(context: DNITypeDescriptorContext): Boolean; overload;
    function GetStandardValuesSupported: Boolean; overload;
    function GetStandardValuesSupported(context: DNITypeDescriptorContext): Boolean; overload;
    function IsValid(value: DDN.mscorlib.DNObject): Boolean; overload;
    function IsValid(context: DNITypeDescriptorContext; value: DDN.mscorlib.DNObject): Boolean; overload;
    function GetProperties(context: DNITypeDescriptorContext; value: DDN.mscorlib.DNObject): DNPropertyDescriptorCollection; overload;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNWhiteSpaceTrimStringConverter = class(TDNGenericImport<DNWhiteSpaceTrimStringConverterClass, DNWhiteSpaceTrimStringConverter>) end;

  //-------------namespace: System.Configuration----------------
  DNAppSettingsReaderClass = interface(DDN.mscorlib.DNObjectClass)
  ['{686161BD-3957-5B29-AD1B-7FF6C52D2730}']
  { constructors } 

    ///<summary>Initializes a new instance of the <see cref="T:System.Configuration.AppSettingsReader" />
    ///  class.</summary>
    {class} function init: DNAppSettingsReader;

  end;

  ///<summary>Provides a method for reading values of a particular type from the configuration.</summary>
  [DNTypeName('System.Configuration.AppSettingsReader')]
  DNAppSettingsReader = interface(DDN.mscorlib.DNObject)
  ['{630F7A39-C131-3A15-868A-EE3FF6C225FA}']
  { methods } 

    ///<summary>Gets the value for a specified key from the <see cref="P:System.Configuration.ConfigurationSettings.AppSettings" />
    ///  property and returns an object of the specified type containing the value from the configuration.</summary>
    ///  <param name="key">The key for which to get the value.</param>
    ///  <param name="type">The type of the object to return.</param>
    ///<returns>The value of the specified key.</returns>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="key" />
    ///  is <see langword="null" />
    ///  .- or -
    ///  <paramref name="type" />
    ///  is <see langword="null" />
    ///  .</exception><exception cref="T:System.InvalidOperationException"><paramref name="key" />
    ///  does not exist in the <see langword="&lt;appSettings&gt;" />
    ///  configuration section.- or -The value in the <see langword="&lt;appSettings&gt;" />
    ///  configuration section for <paramref name="key" />
    ///  is not of type <paramref name="type" />
    ///  .</exception>
    function GetValue(key: string; &type: DDN.mscorlib.DNType): DDN.mscorlib.DNObject;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNAppSettingsReader = class(TDNGenericImport<DNAppSettingsReaderClass, DNAppSettingsReader>) end;

  //-------------namespace: System.Configuration----------------
  DNConfigurationClass = interface(DDN.mscorlib.DNObjectClass)
  ['{072F76EE-89FD-550C-9CCD-337EEB048770}']
  end;

  ///<summary>Represents a configuration file that is applicable to a particular computer, application, or resource. This class cannot be inherited.</summary>
  [DNTypeName('System.Configuration.Configuration')]
  DNConfiguration = interface(DDN.mscorlib.DNObject)
  ['{147BA60B-D0AD-3CCD-B6E0-0459B8E77A7F}']
  { getters & setters } 

    function get_AppSettings: DNAppSettingsSection;
    function get_ConnectionStrings: DNConnectionStringsSection;
    function get_FilePath: string;
    function get_HasFile: Boolean;
    function get_Locations: DNConfigurationLocationCollection;
    function get_EvaluationContext: DNContextInformation;
    function get_RootSectionGroup: DNConfigurationSectionGroup;
    function get_Sections: DNConfigurationSectionCollection;
    function get_SectionGroups: DNConfigurationSectionGroupCollection;
    function get_NamespaceDeclared: Boolean;
    procedure set_NamespaceDeclared(value: Boolean);
    function get_TypeStringTransformer: DDN.mscorlib.DNFunc<string, string>;
    procedure set_TypeStringTransformer(value: DDN.mscorlib.DNFunc<string, string>);
    function get_AssemblyStringTransformer: DDN.mscorlib.DNFunc<string, string>;
    procedure set_AssemblyStringTransformer(value: DDN.mscorlib.DNFunc<string, string>);
    function get_TargetFramework: DNFrameworkName;
    procedure set_TargetFramework(value: DNFrameworkName);

  { methods } 

    ///<summary>Returns the specified <see cref="T:System.Configuration.ConfigurationSection" />
    ///  object.</summary>
    ///  <param name="sectionName">The path to the section to be returned.</param>
    ///<returns>The specified <see cref="T:System.Configuration.ConfigurationSection" />
    ///  object.</returns>
    function GetSection(sectionName: string): DNConfigurationSection;
    ///<summary>Gets the specified <see cref="T:System.Configuration.ConfigurationSectionGroup" />
    ///  object.</summary>
    ///  <param name="sectionGroupName">The path name of the <see cref="T:System.Configuration.ConfigurationSectionGroup" />
    ///  to return.</param>
    ///<returns>The <see cref="T:System.Configuration.ConfigurationSectionGroup" />
    ///  specified.</returns>
    function GetSectionGroup(sectionGroupName: string): DNConfigurationSectionGroup;
    ///<summary>Writes the configuration settings contained within this <see cref="T:System.Configuration.Configuration" />
    ///  object to the current XML configuration file.</summary>
    ///<exception cref="T:System.Configuration.ConfigurationErrorsException">The configuration file could not be written to.- or -The configuration file has changed. </exception>
    procedure Save; overload;
    ///<summary>Writes the configuration settings contained within this <see cref="T:System.Configuration.Configuration" />
    ///  object to the current XML configuration file.</summary>
    ///  <param name="saveMode">A <see cref="T:System.Configuration.ConfigurationSaveMode" />
    ///  value that determines which property values to save.</param>
    ///<exception cref="T:System.Configuration.ConfigurationErrorsException">The configuration file could not be written to.- or -The configuration file has changed. </exception>
    procedure Save(saveMode: DNConfigurationSaveMode); overload;
    ///<summary>Writes the configuration settings contained within this <see cref="T:System.Configuration.Configuration" />
    ///  object to the current XML configuration file.</summary>
    ///  <param name="saveMode">A <see cref="T:System.Configuration.ConfigurationSaveMode" />
    ///  value that determines which property values to save.</param>
    ///  <param name="forceSaveAll"><see langword="true" />
    ///  to save even if the configuration was not modified; otherwise, <see langword="false" />
    ///  .</param>
    ///<exception cref="T:System.Configuration.ConfigurationErrorsException">The configuration file could not be written to.- or -The configuration file has changed. </exception>
    procedure Save(saveMode: DNConfigurationSaveMode; forceSaveAll: Boolean); overload;
    ///<summary>Writes the configuration settings contained within this <see cref="T:System.Configuration.Configuration" />
    ///  object to the specified XML configuration file.</summary>
    ///  <param name="filename">The path and file name to save the configuration file to.</param>
    ///<exception cref="T:System.Configuration.ConfigurationErrorsException">The configuration file could not be written to.- or -The configuration file has changed. </exception>
    procedure SaveAs(filename: string); overload;
    ///<summary>Writes the configuration settings contained within this <see cref="T:System.Configuration.Configuration" />
    ///  object to the specified XML configuration file.</summary>
    ///  <param name="filename">The path and file name to save the configuration file to.</param>
    ///  <param name="saveMode">A <see cref="T:System.Configuration.ConfigurationSaveMode" />
    ///  value that determines which property values to save.</param>
    ///<exception cref="T:System.Configuration.ConfigurationErrorsException">The configuration file could not be written to.- or -The configuration file has changed. </exception>
    procedure SaveAs(filename: string; saveMode: DNConfigurationSaveMode); overload;
    ///<summary>Writes the configuration settings contained within this <see cref="T:System.Configuration.Configuration" />
    ///  object to the specified XML configuration file.</summary>
    ///  <param name="filename">The path and file name to save the configuration file to.</param>
    ///  <param name="saveMode">A <see cref="T:System.Configuration.ConfigurationSaveMode" />
    ///  value that determines which property values to save.</param>
    ///  <param name="forceSaveAll"><see langword="true" />
    ///  to save even if the configuration was not modified; otherwise, <see langword="false" />
    ///  .</param>
    ///<exception cref="T:System.ArgumentException"><paramref name="filename" />
    ///  is null or an empty string ("").</exception>
    procedure SaveAs(filename: string; saveMode: DNConfigurationSaveMode; forceSaveAll: Boolean); overload;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>Gets the <see cref="T:System.Configuration.AppSettingsSection" />
    ///  object configuration section that applies to this <see cref="T:System.Configuration.Configuration" />
    ///  object.</summary>
    ///<returns>An <see cref="T:System.Configuration.AppSettingsSection" />
    ///  object representing the <see langword="appSettings" />
    ///  configuration section that applies to this <see cref="T:System.Configuration.Configuration" />
    ///  object.</returns>
    property AppSettings: DNAppSettingsSection read get_AppSettings;
    ///<summary>Gets a <see cref="T:System.Configuration.ConnectionStringsSection" />
    ///  configuration-section object that applies to this <see cref="T:System.Configuration.Configuration" />
    ///  object.</summary>
    ///<returns>A <see cref="T:System.Configuration.ConnectionStringsSection" />
    ///  configuration-section object representing the <see langword="connectionStrings" />
    ///  configuration section that applies to this <see cref="T:System.Configuration.Configuration" />
    ///  object.</returns>
    property ConnectionStrings: DNConnectionStringsSection read get_ConnectionStrings;
    ///<summary>Gets the physical path to the configuration file represented by this <see cref="T:System.Configuration.Configuration" />
    ///  object.</summary>
    ///<returns>The physical path to the configuration file represented by this <see cref="T:System.Configuration.Configuration" />
    ///  object.</returns>
    property FilePath: string read get_FilePath;
    ///<summary>Gets a value that indicates whether a file exists for the resource represented by this <see cref="T:System.Configuration.Configuration" />
    ///  object.</summary>
    ///<returns><see langword="true" />
    ///  if there is a configuration file; otherwise, <see langword="false" />
    ///  .</returns>
    property HasFile: Boolean read get_HasFile;
    ///<summary>Gets the locations defined within this <see cref="T:System.Configuration.Configuration" />
    ///  object.</summary>
    ///<returns>A <see cref="T:System.Configuration.ConfigurationLocationCollection" />
    ///  containing the locations defined within this <see cref="T:System.Configuration.Configuration" />
    ///  object.</returns>
    property Locations: DNConfigurationLocationCollection read get_Locations;
    ///<summary>Gets the <see cref="T:System.Configuration.ContextInformation" />
    ///  object for the <see cref="T:System.Configuration.Configuration" />
    ///  object.</summary>
    ///<returns>The <see cref="T:System.Configuration.ContextInformation" />
    ///  object for the <see cref="T:System.Configuration.Configuration" />
    ///  object.</returns>
    property EvaluationContext: DNContextInformation read get_EvaluationContext;
    ///<summary>Gets the root <see cref="T:System.Configuration.ConfigurationSectionGroup" />
    ///  for this <see cref="T:System.Configuration.Configuration" />
    ///  object.</summary>
    ///<returns>The root section group for this <see cref="T:System.Configuration.Configuration" />
    ///  object.</returns>
    property RootSectionGroup: DNConfigurationSectionGroup read get_RootSectionGroup;
    ///<summary>Gets a collection of the sections defined by this <see cref="T:System.Configuration.Configuration" />
    ///  object.</summary>
    ///<returns>A collection of the sections defined by this <see cref="T:System.Configuration.Configuration" />
    ///  object.</returns>
    property Sections: DNConfigurationSectionCollection read get_Sections;
    ///<summary>Gets a collection of the section groups defined by this configuration.</summary>
    ///<returns>A <see cref="T:System.Configuration.ConfigurationSectionGroupCollection" />
    ///  collection representing the collection of section groups for this <see cref="T:System.Configuration.Configuration" />
    ///  object.</returns>
    property SectionGroups: DNConfigurationSectionGroupCollection read get_SectionGroups;
    ///<summary>Gets or sets a value indicating whether the configuration file has an XML namespace.</summary>
    ///<returns><see langword="true" />
    ///  if the configuration file has an XML namespace; otherwise, <see langword="false" />
    ///  .</returns>
    property NamespaceDeclared: Boolean read get_NamespaceDeclared write set_NamespaceDeclared;
    ///<summary>Specifies a function delegate that is used to transform type strings in configuration files. </summary>
    ///<returns>A delegate that transforms type strings. The default value is <see langword="null" />
    ///  .</returns>
    property TypeStringTransformer: DDN.mscorlib.DNFunc<string, string> read get_TypeStringTransformer write set_TypeStringTransformer;
    ///<summary>Specifies a function delegate that is used to transform assembly strings in configuration files.</summary>
    ///<returns>A delegate that transforms type strings. The default value is <see langword="null" />
    ///  .</returns>
    property AssemblyStringTransformer: DDN.mscorlib.DNFunc<string, string> read get_AssemblyStringTransformer write set_AssemblyStringTransformer;
    ///<summary>Specifies the targeted version of the .NET Framework when a version earlier than the current one is targeted.</summary>
    ///<returns>The name of the targeted version of the .NET Framework. The default value is <see langword="null" />
    ///  , which indicates that the current version is targeted.</returns>
    property TargetFramework: DNFrameworkName read get_TargetFramework write set_TargetFramework;
  end;

  TDNConfiguration = class(TDNGenericImport<DNConfigurationClass, DNConfiguration>) end;

  //-------------namespace: System.Configuration----------------
  DNConfigurationElementClass = interface(DDN.mscorlib.DNObjectClass)
  ['{F985297E-05F3-52D2-9F5E-60845F06A6E7}']
  end;

  ///<summary>Represents a configuration element within a configuration file.</summary>
  [DNTypeName('System.Configuration.ConfigurationElement')]
  DNConfigurationElement = interface(DDN.mscorlib.DNObject)
  ['{15707344-0F22-3BFE-95FE-8AA44E29CB8E}']
  { getters & setters } 

    function get_LockAttributes: DNConfigurationLockCollection;
    function get_LockAllAttributesExcept: DNConfigurationLockCollection;
    function get_LockElements: DNConfigurationLockCollection;
    function get_LockAllElementsExcept: DNConfigurationLockCollection;
    function get_LockItem: Boolean;
    procedure set_LockItem(value: Boolean);
    function get_ElementInformation: DNElementInformation;
    function get_CurrentConfiguration: DNConfiguration;

  { methods } 

    ///<summary>Gets a value indicating whether the <see cref="T:System.Configuration.ConfigurationElement" />
    ///  object is read-only.</summary>
    ///<returns><see langword="true" />
    ///  if the <see cref="T:System.Configuration.ConfigurationElement" />
    ///  object is read-only; otherwise, <see langword="false" />
    ///  .</returns>
    function IsReadOnly: Boolean;
    ///<summary>Compares the current <see cref="T:System.Configuration.ConfigurationElement" />
    ///  instance to the specified object.</summary>
    ///  <param name="compareTo">The object to compare with.</param>
    ///<returns><see langword="true" />
    ///  if the object to compare with is equal to the current <see cref="T:System.Configuration.ConfigurationElement" />
    ///  instance; otherwise, <see langword="false" />
    ///  . The default is <see langword="false" />
    ///  . </returns>
    function Equals(compareTo: DDN.mscorlib.DNObject): Boolean;
    ///<summary>Gets a unique value representing the current <see cref="T:System.Configuration.ConfigurationElement" />
    ///  instance.</summary>
    ///<returns>A unique value representing the current <see cref="T:System.Configuration.ConfigurationElement" />
    ///  instance.</returns>
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>Gets the collection of locked attributes </summary>
    ///<returns>The <see cref="T:System.Configuration.ConfigurationLockCollection" />
    ///  of locked attributes (properties) for the element.</returns>
    property LockAttributes: DNConfigurationLockCollection read get_LockAttributes;
    ///<summary>Gets the collection of locked attributes.</summary>
    ///<returns>The <see cref="T:System.Configuration.ConfigurationLockCollection" />
    ///  of locked attributes (properties) for the element.</returns>
    property LockAllAttributesExcept: DNConfigurationLockCollection read get_LockAllAttributesExcept;
    ///<summary>Gets the collection of locked elements.</summary>
    ///<returns>The <see cref="T:System.Configuration.ConfigurationLockCollection" />
    ///  of locked elements.</returns>
    property LockElements: DNConfigurationLockCollection read get_LockElements;
    ///<summary>Gets the collection of locked elements.</summary>
    ///<returns>The <see cref="T:System.Configuration.ConfigurationLockCollection" />
    ///  of locked elements.</returns>
    property LockAllElementsExcept: DNConfigurationLockCollection read get_LockAllElementsExcept;
    ///<summary>Gets or sets a value indicating whether the element is locked.</summary>
    ///<returns><see langword="true" />
    ///  if the element is locked; otherwise, <see langword="false" />
    ///  . The default is <see langword="false" />
    ///  .</returns>
    ///<exception cref="T:System.Configuration.ConfigurationErrorsException">The element has already been locked at a higher configuration level.</exception>
    property LockItem: Boolean read get_LockItem write set_LockItem;
    ///<summary>Gets an <see cref="T:System.Configuration.ElementInformation" />
    ///  object that contains the non-customizable information and functionality of the <see cref="T:System.Configuration.ConfigurationElement" />
    ///  object. </summary>
    ///<returns>An <see cref="T:System.Configuration.ElementInformation" />
    ///  that contains the non-customizable information and functionality of the <see cref="T:System.Configuration.ConfigurationElement" />
    ///  .</returns>
    property ElementInformation: DNElementInformation read get_ElementInformation;
    ///<summary>Gets a reference to the top-level <see cref="T:System.Configuration.Configuration" />
    ///  instance that represents the configuration hierarchy that the current <see cref="T:System.Configuration.ConfigurationElement" />
    ///  instance belongs to.</summary>
    ///<returns>The top-level <see cref="T:System.Configuration.Configuration" />
    ///  instance that the current <see cref="T:System.Configuration.ConfigurationElement" />
    ///  instance belongs to.</returns>
    property CurrentConfiguration: DNConfiguration read get_CurrentConfiguration;
  end;

  TDNConfigurationElement = class(TDNGenericImport<DNConfigurationElementClass, DNConfigurationElement>) end;

  //-------------namespace: System.Configuration----------------
  DNConfigurationBuilderSettingsClass = interface(DNConfigurationElementClass)
  ['{D3B865EC-3F9F-51F7-BF87-CE49C5345C24}']
  { constructors } 

    ///<summary>Initializes a new instance of the <see cref="T:System.Configuration.ConfigurationBuilderSettings" />
    ///  class.</summary>
    {class} function init: DNConfigurationBuilderSettings;

  end;

  ///<summary>Represents a group of configuration elements that configure the providers for the <see langword="&lt;configBuilders&gt;" />
  ///  configuration section.</summary>
  [DNTypeName('System.Configuration.ConfigurationBuilderSettings')]
  DNConfigurationBuilderSettings = interface(DNConfigurationElement)
  ['{A626A81D-62ED-36E6-9EC1-D42EF8C33653}']
  { getters & setters } 

    function get_Builders: DNProviderSettingsCollection;
    function get_LockAttributes: DNConfigurationLockCollection;
    function get_LockAllAttributesExcept: DNConfigurationLockCollection;
    function get_LockElements: DNConfigurationLockCollection;
    function get_LockAllElementsExcept: DNConfigurationLockCollection;
    function get_LockItem: Boolean;
    procedure set_LockItem(value: Boolean);
    function get_ElementInformation: DNElementInformation;
    function get_CurrentConfiguration: DNConfiguration;

  { methods } 

    ///<summary>Gets a value indicating whether the <see cref="T:System.Configuration.ConfigurationElement" />
    ///  object is read-only.</summary>
    ///<returns><see langword="true" />
    ///  if the <see cref="T:System.Configuration.ConfigurationElement" />
    ///  object is read-only; otherwise, <see langword="false" />
    ///  .</returns>
    function IsReadOnly: Boolean;
    ///<summary>Compares the current <see cref="T:System.Configuration.ConfigurationElement" />
    ///  instance to the specified object.</summary>
    ///  <param name="compareTo">The object to compare with.</param>
    ///<returns><see langword="true" />
    ///  if the object to compare with is equal to the current <see cref="T:System.Configuration.ConfigurationElement" />
    ///  instance; otherwise, <see langword="false" />
    ///  . The default is <see langword="false" />
    ///  . </returns>
    function Equals(compareTo: DDN.mscorlib.DNObject): Boolean;
    ///<summary>Gets a unique value representing the current <see cref="T:System.Configuration.ConfigurationElement" />
    ///  instance.</summary>
    ///<returns>A unique value representing the current <see cref="T:System.Configuration.ConfigurationElement" />
    ///  instance.</returns>
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>Gets a collection of <see cref="T:System.Configuration.ConfigurationBuilderSettings" />
    ///  objects that represent the properties of configuration builders.</summary>
    ///<returns>The <see cref="T:System.Configuration.ConfigurationBuilder" />
    ///  objects.</returns>
    property Builders: DNProviderSettingsCollection read get_Builders;
    ///<summary>Gets the collection of locked attributes </summary>
    ///<returns>The <see cref="T:System.Configuration.ConfigurationLockCollection" />
    ///  of locked attributes (properties) for the element.</returns>
    property LockAttributes: DNConfigurationLockCollection read get_LockAttributes;
    ///<summary>Gets the collection of locked attributes.</summary>
    ///<returns>The <see cref="T:System.Configuration.ConfigurationLockCollection" />
    ///  of locked attributes (properties) for the element.</returns>
    property LockAllAttributesExcept: DNConfigurationLockCollection read get_LockAllAttributesExcept;
    ///<summary>Gets the collection of locked elements.</summary>
    ///<returns>The <see cref="T:System.Configuration.ConfigurationLockCollection" />
    ///  of locked elements.</returns>
    property LockElements: DNConfigurationLockCollection read get_LockElements;
    ///<summary>Gets the collection of locked elements.</summary>
    ///<returns>The <see cref="T:System.Configuration.ConfigurationLockCollection" />
    ///  of locked elements.</returns>
    property LockAllElementsExcept: DNConfigurationLockCollection read get_LockAllElementsExcept;
    ///<summary>Gets or sets a value indicating whether the element is locked.</summary>
    ///<returns><see langword="true" />
    ///  if the element is locked; otherwise, <see langword="false" />
    ///  . The default is <see langword="false" />
    ///  .</returns>
    ///<exception cref="T:System.Configuration.ConfigurationErrorsException">The element has already been locked at a higher configuration level.</exception>
    property LockItem: Boolean read get_LockItem write set_LockItem;
    ///<summary>Gets an <see cref="T:System.Configuration.ElementInformation" />
    ///  object that contains the non-customizable information and functionality of the <see cref="T:System.Configuration.ConfigurationElement" />
    ///  object. </summary>
    ///<returns>An <see cref="T:System.Configuration.ElementInformation" />
    ///  that contains the non-customizable information and functionality of the <see cref="T:System.Configuration.ConfigurationElement" />
    ///  .</returns>
    property ElementInformation: DNElementInformation read get_ElementInformation;
    ///<summary>Gets a reference to the top-level <see cref="T:System.Configuration.Configuration" />
    ///  instance that represents the configuration hierarchy that the current <see cref="T:System.Configuration.ConfigurationElement" />
    ///  instance belongs to.</summary>
    ///<returns>The top-level <see cref="T:System.Configuration.Configuration" />
    ///  instance that the current <see cref="T:System.Configuration.ConfigurationElement" />
    ///  instance belongs to.</returns>
    property CurrentConfiguration: DNConfiguration read get_CurrentConfiguration;
  end;

  TDNConfigurationBuilderSettings = class(TDNGenericImport<DNConfigurationBuilderSettingsClass, DNConfigurationBuilderSettings>) end;

  //-------------namespace: System.Configuration----------------
  DNConfigurationElementCollectionClass = interface(DNConfigurationElementClass)
  ['{A3E24DD2-A599-53A9-A840-841F66CEA0DA}']
  end;

  ///<summary>Represents a configuration element containing a collection of child elements.</summary>
  [DNTypeName('System.Configuration.ConfigurationElementCollection')]
  DNConfigurationElementCollection = interface(DNConfigurationElement)
  ['{01814924-3A8D-3C8C-967F-B974D61F464C}']
  { getters & setters } 

    function get_Count: Int32;
    function get_EmitClear: Boolean;
    procedure set_EmitClear(value: Boolean);
    function get_IsSynchronized: Boolean;
    function get_SyncRoot: DDN.mscorlib.DNObject;
    function get_CollectionType: DNConfigurationElementCollectionType;
    function get_LockAttributes: DNConfigurationLockCollection;
    function get_LockAllAttributesExcept: DNConfigurationLockCollection;
    function get_LockElements: DNConfigurationLockCollection;
    function get_LockAllElementsExcept: DNConfigurationLockCollection;
    function get_LockItem: Boolean;
    procedure set_LockItem(value: Boolean);
    function get_ElementInformation: DNElementInformation;
    function get_CurrentConfiguration: DNConfiguration;

  { methods } 

    ///<summary>Indicates whether the <see cref="T:System.Configuration.ConfigurationElementCollection" />
    ///  object is read only.</summary>
    ///<returns><see langword="true" />
    ///  if the <see cref="T:System.Configuration.ConfigurationElementCollection" />
    ///  object is read only; otherwise, <see langword="false" />
    ///  .</returns>
    function IsReadOnly: Boolean;
    ///<summary>Compares the <see cref="T:System.Configuration.ConfigurationElementCollection" />
    ///  to the specified object.</summary>
    ///  <param name="compareTo">The object to compare. </param>
    ///<returns><see langword="true" />
    ///  if the object to compare with is equal to the current <see cref="T:System.Configuration.ConfigurationElementCollection" />
    ///  instance; otherwise, <see langword="false" />
    ///  . The default is <see langword="false" />
    ///  .</returns>
    function Equals(compareTo: DDN.mscorlib.DNObject): Boolean;
    ///<summary>Gets a unique value representing the <see cref="T:System.Configuration.ConfigurationElementCollection" />
    ///  instance.</summary>
    ///<returns>A unique value representing the <see cref="T:System.Configuration.ConfigurationElementCollection" />
    ///  current instance.</returns>
    function GetHashCode: Int32;
    ///<summary>Copies the contents of the <see cref="T:System.Configuration.ConfigurationElementCollection" />
    ///  to an array.</summary>
    ///  <param name="array">Array to which to copy the contents of the <see cref="T:System.Configuration.ConfigurationElementCollection" />
    ///  .</param>
    ///  <param name="index">Index location at which to begin copying.</param>
    procedure CopyTo(&array: TArray<DNConfigurationElement>; index: Int32);
    ///<summary>Gets an <see cref="T:System.Collections.IEnumerator" />
    ///  which is used to iterate through the <see cref="T:System.Configuration.ConfigurationElementCollection" />
    ///  .</summary>
    ///<returns>An <see cref="T:System.Collections.IEnumerator" />
    ///  which is used to iterate through the <see cref="T:System.Configuration.ConfigurationElementCollection" />
    ///  .</returns>
    function GetEnumerator: DDN.mscorlib.DNIEnumerator;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>Gets the number of elements in the collection.</summary>
    ///<returns>The number of elements in the collection.</returns>
    property Count: Int32 read get_Count;
    ///<summary>Gets or sets a value that specifies whether the collection has been cleared.</summary>
    ///<returns><see langword="true" />
    ///  if the collection has been cleared; otherwise, <see langword="false" />
    ///  . The default is <see langword="false" />
    ///  .</returns>
    ///<exception cref="T:System.Configuration.ConfigurationErrorsException">The configuration is read-only.</exception>
    property EmitClear: Boolean read get_EmitClear write set_EmitClear;
    ///<summary>Gets a value indicating whether access to the collection is synchronized.</summary>
    ///<returns><see langword="true" />
    ///  if access to the <see cref="T:System.Configuration.ConfigurationElementCollection" />
    ///  is synchronized; otherwise, <see langword="false" />
    ///  .</returns>
    property IsSynchronized: Boolean read get_IsSynchronized;
    ///<summary>Gets an object used to synchronize access to the <see cref="T:System.Configuration.ConfigurationElementCollection" />
    ///  .</summary>
    ///<returns>An object used to synchronize access to the <see cref="T:System.Configuration.ConfigurationElementCollection" />
    ///  .</returns>
    property SyncRoot: DDN.mscorlib.DNObject read get_SyncRoot;
    ///<summary>Gets the type of the <see cref="T:System.Configuration.ConfigurationElementCollection" />
    ///  .</summary>
    ///<returns>The <see cref="T:System.Configuration.ConfigurationElementCollectionType" />
    ///  of this collection.</returns>
    property CollectionType: DNConfigurationElementCollectionType read get_CollectionType;
    ///<summary>Gets the collection of locked attributes </summary>
    ///<returns>The <see cref="T:System.Configuration.ConfigurationLockCollection" />
    ///  of locked attributes (properties) for the element.</returns>
    property LockAttributes: DNConfigurationLockCollection read get_LockAttributes;
    ///<summary>Gets the collection of locked attributes.</summary>
    ///<returns>The <see cref="T:System.Configuration.ConfigurationLockCollection" />
    ///  of locked attributes (properties) for the element.</returns>
    property LockAllAttributesExcept: DNConfigurationLockCollection read get_LockAllAttributesExcept;
    ///<summary>Gets the collection of locked elements.</summary>
    ///<returns>The <see cref="T:System.Configuration.ConfigurationLockCollection" />
    ///  of locked elements.</returns>
    property LockElements: DNConfigurationLockCollection read get_LockElements;
    ///<summary>Gets the collection of locked elements.</summary>
    ///<returns>The <see cref="T:System.Configuration.ConfigurationLockCollection" />
    ///  of locked elements.</returns>
    property LockAllElementsExcept: DNConfigurationLockCollection read get_LockAllElementsExcept;
    ///<summary>Gets or sets a value indicating whether the element is locked.</summary>
    ///<returns><see langword="true" />
    ///  if the element is locked; otherwise, <see langword="false" />
    ///  . The default is <see langword="false" />
    ///  .</returns>
    ///<exception cref="T:System.Configuration.ConfigurationErrorsException">The element has already been locked at a higher configuration level.</exception>
    property LockItem: Boolean read get_LockItem write set_LockItem;
    ///<summary>Gets an <see cref="T:System.Configuration.ElementInformation" />
    ///  object that contains the non-customizable information and functionality of the <see cref="T:System.Configuration.ConfigurationElement" />
    ///  object. </summary>
    ///<returns>An <see cref="T:System.Configuration.ElementInformation" />
    ///  that contains the non-customizable information and functionality of the <see cref="T:System.Configuration.ConfigurationElement" />
    ///  .</returns>
    property ElementInformation: DNElementInformation read get_ElementInformation;
    ///<summary>Gets a reference to the top-level <see cref="T:System.Configuration.Configuration" />
    ///  instance that represents the configuration hierarchy that the current <see cref="T:System.Configuration.ConfigurationElement" />
    ///  instance belongs to.</summary>
    ///<returns>The top-level <see cref="T:System.Configuration.Configuration" />
    ///  instance that the current <see cref="T:System.Configuration.ConfigurationElement" />
    ///  instance belongs to.</returns>
    property CurrentConfiguration: DNConfiguration read get_CurrentConfiguration;
  end;

  TDNConfigurationElementCollection = class(TDNGenericImport<DNConfigurationElementCollectionClass, DNConfigurationElementCollection>) end;

  //-------------namespace: System.Configuration----------------
  DNConnectionStringSettingsCollectionClass = interface(DNConfigurationElementCollectionClass)
  ['{BC800550-8613-5F0C-A5B3-1F4388C87362}']
  { constructors } 

    ///<summary>Initializes a new instance of the <see cref="T:System.Configuration.ConnectionStringSettingsCollection" />
    ///  class. </summary>
    {class} function init: DNConnectionStringSettingsCollection;

  end;

  ///<summary>Contains a collection of <see cref="T:System.Configuration.ConnectionStringSettings" />
  ///  objects.</summary>
  [DNTypeName('System.Configuration.ConnectionStringSettingsCollection')]
  DNConnectionStringSettingsCollection = interface(DNConfigurationElementCollection)
  ['{F326A330-01D8-3379-A48C-413612EE06F4}']
  { getters & setters } 

    function get_Item(index: Int32): DNConnectionStringSettings; overload;
    procedure set_Item(index: Int32; value: DNConnectionStringSettings);
    function get_Item(name: string): DNConnectionStringSettings; overload;
    function get_Count: Int32;
    function get_EmitClear: Boolean;
    procedure set_EmitClear(value: Boolean);
    function get_IsSynchronized: Boolean;
    function get_SyncRoot: DDN.mscorlib.DNObject;
    function get_CollectionType: DNConfigurationElementCollectionType;
    function get_LockAttributes: DNConfigurationLockCollection;
    function get_LockAllAttributesExcept: DNConfigurationLockCollection;
    function get_LockElements: DNConfigurationLockCollection;
    function get_LockAllElementsExcept: DNConfigurationLockCollection;
    function get_LockItem: Boolean;
    procedure set_LockItem(value: Boolean);
    function get_ElementInformation: DNElementInformation;
    function get_CurrentConfiguration: DNConfiguration;

  { methods } 

    ///<summary>Returns the collection index of the passed <see cref="T:System.Configuration.ConnectionStringSettings" />
    ///  object.</summary>
    ///  <param name="settings">A <see cref="T:System.Configuration.ConnectionStringSettings" />
    ///  object in the collection.</param>
    ///<returns>The collection index of the specified <see cref="T:System.Configuration.ConnectionStringSettingsCollection" />
    ///  object.</returns>
    function IndexOf(settings: DNConnectionStringSettings): Int32;
    ///<summary>Adds a <see cref="T:System.Configuration.ConnectionStringSettings" />
    ///  object to the collection.</summary>
    ///  <param name="settings">A <see cref="T:System.Configuration.ConnectionStringSettings" />
    ///  object to add to the collection.</param>
    procedure Add(settings: DNConnectionStringSettings);
    ///<summary>Removes the specified <see cref="T:System.Configuration.ConnectionStringSettings" />
    ///  object from the collection.</summary>
    ///  <param name="settings">A <see cref="T:System.Configuration.ConnectionStringSettings" />
    ///  object in the collection.</param>
    procedure Remove(settings: DNConnectionStringSettings); overload;
    ///<summary>Removes the <see cref="T:System.Configuration.ConnectionStringSettings" />
    ///  object at the specified index in the collection.</summary>
    ///  <param name="index">The index of a <see cref="T:System.Configuration.ConnectionStringSettings" />
    ///  object in the collection.</param>
    procedure RemoveAt(index: Int32);
    ///<summary>Removes the specified <see cref="T:System.Configuration.ConnectionStringSettings" />
    ///  object from the collection.</summary>
    ///  <param name="name">The name of a <see cref="T:System.Configuration.ConnectionStringSettings" />
    ///  object in the collection.</param>
    procedure Remove(name: string); overload;
    ///<summary>Removes all the <see cref="T:System.Configuration.ConnectionStringSettings" />
    ///  objects from the collection.</summary>
    procedure Clear;
    ///<summary>Indicates whether the <see cref="T:System.Configuration.ConfigurationElementCollection" />
    ///  object is read only.</summary>
    ///<returns><see langword="true" />
    ///  if the <see cref="T:System.Configuration.ConfigurationElementCollection" />
    ///  object is read only; otherwise, <see langword="false" />
    ///  .</returns>
    function IsReadOnly: Boolean;
    ///<summary>Compares the <see cref="T:System.Configuration.ConfigurationElementCollection" />
    ///  to the specified object.</summary>
    ///  <param name="compareTo">The object to compare. </param>
    ///<returns><see langword="true" />
    ///  if the object to compare with is equal to the current <see cref="T:System.Configuration.ConfigurationElementCollection" />
    ///  instance; otherwise, <see langword="false" />
    ///  . The default is <see langword="false" />
    ///  .</returns>
    function Equals(compareTo: DDN.mscorlib.DNObject): Boolean;
    ///<summary>Gets a unique value representing the <see cref="T:System.Configuration.ConfigurationElementCollection" />
    ///  instance.</summary>
    ///<returns>A unique value representing the <see cref="T:System.Configuration.ConfigurationElementCollection" />
    ///  current instance.</returns>
    function GetHashCode: Int32;
    ///<summary>Copies the contents of the <see cref="T:System.Configuration.ConfigurationElementCollection" />
    ///  to an array.</summary>
    ///  <param name="array">Array to which to copy the contents of the <see cref="T:System.Configuration.ConfigurationElementCollection" />
    ///  .</param>
    ///  <param name="index">Index location at which to begin copying.</param>
    procedure CopyTo(&array: TArray<DNConfigurationElement>; index: Int32);
    ///<summary>Gets an <see cref="T:System.Collections.IEnumerator" />
    ///  which is used to iterate through the <see cref="T:System.Configuration.ConfigurationElementCollection" />
    ///  .</summary>
    ///<returns>An <see cref="T:System.Collections.IEnumerator" />
    ///  which is used to iterate through the <see cref="T:System.Configuration.ConfigurationElementCollection" />
    ///  .</returns>
    function GetEnumerator: DDN.mscorlib.DNIEnumerator;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Item[index: Int32]: DNConnectionStringSettings read get_Item write set_Item; default;
    property Item[name: string]: DNConnectionStringSettings read get_Item; default;
    ///<summary>Gets the number of elements in the collection.</summary>
    ///<returns>The number of elements in the collection.</returns>
    property Count: Int32 read get_Count;
    ///<summary>Gets or sets a value that specifies whether the collection has been cleared.</summary>
    ///<returns><see langword="true" />
    ///  if the collection has been cleared; otherwise, <see langword="false" />
    ///  . The default is <see langword="false" />
    ///  .</returns>
    ///<exception cref="T:System.Configuration.ConfigurationErrorsException">The configuration is read-only.</exception>
    property EmitClear: Boolean read get_EmitClear write set_EmitClear;
    ///<summary>Gets a value indicating whether access to the collection is synchronized.</summary>
    ///<returns><see langword="true" />
    ///  if access to the <see cref="T:System.Configuration.ConfigurationElementCollection" />
    ///  is synchronized; otherwise, <see langword="false" />
    ///  .</returns>
    property IsSynchronized: Boolean read get_IsSynchronized;
    ///<summary>Gets an object used to synchronize access to the <see cref="T:System.Configuration.ConfigurationElementCollection" />
    ///  .</summary>
    ///<returns>An object used to synchronize access to the <see cref="T:System.Configuration.ConfigurationElementCollection" />
    ///  .</returns>
    property SyncRoot: DDN.mscorlib.DNObject read get_SyncRoot;
    ///<summary>Gets the type of the <see cref="T:System.Configuration.ConfigurationElementCollection" />
    ///  .</summary>
    ///<returns>The <see cref="T:System.Configuration.ConfigurationElementCollectionType" />
    ///  of this collection.</returns>
    property CollectionType: DNConfigurationElementCollectionType read get_CollectionType;
    property LockAttributes: DNConfigurationLockCollection read get_LockAttributes;
    property LockAllAttributesExcept: DNConfigurationLockCollection read get_LockAllAttributesExcept;
    property LockElements: DNConfigurationLockCollection read get_LockElements;
    property LockAllElementsExcept: DNConfigurationLockCollection read get_LockAllElementsExcept;
    property LockItem: Boolean read get_LockItem write set_LockItem;
    property ElementInformation: DNElementInformation read get_ElementInformation;
    property CurrentConfiguration: DNConfiguration read get_CurrentConfiguration;
  end;

  TDNConnectionStringSettingsCollection = class(TDNGenericImport<DNConnectionStringSettingsCollectionClass, DNConnectionStringSettingsCollection>) end;

  //-------------namespace: System.Configuration----------------
  DNKeyValueConfigurationCollectionClass = interface(DNConfigurationElementCollectionClass)
  ['{DF066AD7-8BC6-50CB-BDF3-EAAC96E7FAB7}']
  { constructors } 

    ///<summary>Initializes a new instance of the <see cref="T:System.Configuration.KeyValueConfigurationCollection" />
    ///  class.</summary>
    {class} function init: DNKeyValueConfigurationCollection;

  end;

  ///<summary>Contains a collection of <see cref="T:System.Configuration.KeyValueConfigurationElement" />
  ///  objects. </summary>
  [DNTypeName('System.Configuration.KeyValueConfigurationCollection')]
  DNKeyValueConfigurationCollection = interface(DNConfigurationElementCollection)
  ['{E4C84545-67FA-3446-9624-4135207EC045}']
  { getters & setters } 

    function get_Item(key: string): DNKeyValueConfigurationElement;
    function get_AllKeys: TArray<string>;
    function get_Count: Int32;
    function get_EmitClear: Boolean;
    procedure set_EmitClear(value: Boolean);
    function get_IsSynchronized: Boolean;
    function get_SyncRoot: DDN.mscorlib.DNObject;
    function get_CollectionType: DNConfigurationElementCollectionType;
    function get_LockAttributes: DNConfigurationLockCollection;
    function get_LockAllAttributesExcept: DNConfigurationLockCollection;
    function get_LockElements: DNConfigurationLockCollection;
    function get_LockAllElementsExcept: DNConfigurationLockCollection;
    function get_LockItem: Boolean;
    procedure set_LockItem(value: Boolean);
    function get_ElementInformation: DNElementInformation;
    function get_CurrentConfiguration: DNConfiguration;

  { methods } 

    ///<summary>Adds a <see cref="T:System.Configuration.KeyValueConfigurationElement" />
    ///  object to the collection based on the supplied parameters.</summary>
    ///  <param name="key">A string specifying the key.</param>
    ///  <param name="value">A string specifying the value.</param>
    procedure Add(key: string; value: string); overload;
    ///<summary>Removes a <see cref="T:System.Configuration.KeyValueConfigurationElement" />
    ///  object from the collection.</summary>
    ///  <param name="key">A string specifying the <paramref name="key" />
    ///  .</param>
    procedure Remove(key: string);
    ///<summary>Clears the <see cref="T:System.Configuration.KeyValueConfigurationCollection" />
    ///  collection.</summary>
    procedure Clear;
    ///<summary>Adds a <see cref="T:System.Configuration.KeyValueConfigurationElement" />
    ///  object to the collection based on the supplied parameters.</summary>
    ///  <param name="keyValue">A <see cref="T:System.Configuration.KeyValueConfigurationElement" />
    ///  .</param>
    procedure Add(keyValue: DNKeyValueConfigurationElement); overload;
    ///<summary>Indicates whether the <see cref="T:System.Configuration.ConfigurationElementCollection" />
    ///  object is read only.</summary>
    ///<returns><see langword="true" />
    ///  if the <see cref="T:System.Configuration.ConfigurationElementCollection" />
    ///  object is read only; otherwise, <see langword="false" />
    ///  .</returns>
    function IsReadOnly: Boolean;
    ///<summary>Compares the <see cref="T:System.Configuration.ConfigurationElementCollection" />
    ///  to the specified object.</summary>
    ///  <param name="compareTo">The object to compare. </param>
    ///<returns><see langword="true" />
    ///  if the object to compare with is equal to the current <see cref="T:System.Configuration.ConfigurationElementCollection" />
    ///  instance; otherwise, <see langword="false" />
    ///  . The default is <see langword="false" />
    ///  .</returns>
    function Equals(compareTo: DDN.mscorlib.DNObject): Boolean;
    ///<summary>Gets a unique value representing the <see cref="T:System.Configuration.ConfigurationElementCollection" />
    ///  instance.</summary>
    ///<returns>A unique value representing the <see cref="T:System.Configuration.ConfigurationElementCollection" />
    ///  current instance.</returns>
    function GetHashCode: Int32;
    ///<summary>Copies the contents of the <see cref="T:System.Configuration.ConfigurationElementCollection" />
    ///  to an array.</summary>
    ///  <param name="array">Array to which to copy the contents of the <see cref="T:System.Configuration.ConfigurationElementCollection" />
    ///  .</param>
    ///  <param name="index">Index location at which to begin copying.</param>
    procedure CopyTo(&array: TArray<DNConfigurationElement>; index: Int32);
    ///<summary>Gets an <see cref="T:System.Collections.IEnumerator" />
    ///  which is used to iterate through the <see cref="T:System.Configuration.ConfigurationElementCollection" />
    ///  .</summary>
    ///<returns>An <see cref="T:System.Collections.IEnumerator" />
    ///  which is used to iterate through the <see cref="T:System.Configuration.ConfigurationElementCollection" />
    ///  .</returns>
    function GetEnumerator: DDN.mscorlib.DNIEnumerator;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Item[key: string]: DNKeyValueConfigurationElement read get_Item; default;
    ///<summary>Gets the keys to all items contained in the <see cref="T:System.Configuration.KeyValueConfigurationCollection" />
    ///  collection.</summary>
    ///<returns>A string array.</returns>
    property AllKeys: TArray<string> read get_AllKeys;
    ///<summary>Gets the number of elements in the collection.</summary>
    ///<returns>The number of elements in the collection.</returns>
    property Count: Int32 read get_Count;
    ///<summary>Gets or sets a value that specifies whether the collection has been cleared.</summary>
    ///<returns><see langword="true" />
    ///  if the collection has been cleared; otherwise, <see langword="false" />
    ///  . The default is <see langword="false" />
    ///  .</returns>
    ///<exception cref="T:System.Configuration.ConfigurationErrorsException">The configuration is read-only.</exception>
    property EmitClear: Boolean read get_EmitClear write set_EmitClear;
    ///<summary>Gets a value indicating whether access to the collection is synchronized.</summary>
    ///<returns><see langword="true" />
    ///  if access to the <see cref="T:System.Configuration.ConfigurationElementCollection" />
    ///  is synchronized; otherwise, <see langword="false" />
    ///  .</returns>
    property IsSynchronized: Boolean read get_IsSynchronized;
    ///<summary>Gets an object used to synchronize access to the <see cref="T:System.Configuration.ConfigurationElementCollection" />
    ///  .</summary>
    ///<returns>An object used to synchronize access to the <see cref="T:System.Configuration.ConfigurationElementCollection" />
    ///  .</returns>
    property SyncRoot: DDN.mscorlib.DNObject read get_SyncRoot;
    ///<summary>Gets the type of the <see cref="T:System.Configuration.ConfigurationElementCollection" />
    ///  .</summary>
    ///<returns>The <see cref="T:System.Configuration.ConfigurationElementCollectionType" />
    ///  of this collection.</returns>
    property CollectionType: DNConfigurationElementCollectionType read get_CollectionType;
    property LockAttributes: DNConfigurationLockCollection read get_LockAttributes;
    property LockAllAttributesExcept: DNConfigurationLockCollection read get_LockAllAttributesExcept;
    property LockElements: DNConfigurationLockCollection read get_LockElements;
    property LockAllElementsExcept: DNConfigurationLockCollection read get_LockAllElementsExcept;
    property LockItem: Boolean read get_LockItem write set_LockItem;
    property ElementInformation: DNElementInformation read get_ElementInformation;
    property CurrentConfiguration: DNConfiguration read get_CurrentConfiguration;
  end;

  TDNKeyValueConfigurationCollection = class(TDNGenericImport<DNKeyValueConfigurationCollectionClass, DNKeyValueConfigurationCollection>) end;

  //-------------namespace: System.Configuration----------------
  DNNameValueConfigurationCollectionClass = interface(DNConfigurationElementCollectionClass)
  ['{72AE4489-17DB-5EEE-957F-D06EDAE8E1B5}']
  { constructors } 

    ///<summary>Initializes a new instance of the <see cref="T:System.Configuration.NameValueConfigurationCollection" />
    ///  class.</summary>
    {class} function init: DNNameValueConfigurationCollection;

  end;

  ///<summary>Contains a collection of <see cref="T:System.Configuration.NameValueConfigurationElement" />
  ///  objects. This class cannot be inherited.</summary>
  [DNTypeName('System.Configuration.NameValueConfigurationCollection')]
  DNNameValueConfigurationCollection = interface(DNConfigurationElementCollection)
  ['{DA22AD6D-2670-3CFD-8173-12CEA4DA6380}']
  { getters & setters } 

    function get_Item(name: string): DNNameValueConfigurationElement;
    procedure set_Item(name: string; value: DNNameValueConfigurationElement);
    function get_AllKeys: TArray<string>;
    function get_Count: Int32;
    function get_EmitClear: Boolean;
    procedure set_EmitClear(value: Boolean);
    function get_IsSynchronized: Boolean;
    function get_SyncRoot: DDN.mscorlib.DNObject;
    function get_CollectionType: DNConfigurationElementCollectionType;
    function get_LockAttributes: DNConfigurationLockCollection;
    function get_LockAllAttributesExcept: DNConfigurationLockCollection;
    function get_LockElements: DNConfigurationLockCollection;
    function get_LockAllElementsExcept: DNConfigurationLockCollection;
    function get_LockItem: Boolean;
    procedure set_LockItem(value: Boolean);
    function get_ElementInformation: DNElementInformation;
    function get_CurrentConfiguration: DNConfiguration;

  { methods } 

    ///<summary>Adds a <see cref="T:System.Configuration.NameValueConfigurationElement" />
    ///  object to the collection.</summary>
    ///  <param name="nameValue">A  <see cref="T:System.Configuration.NameValueConfigurationElement" />
    ///  object.</param>
    procedure Add(nameValue: DNNameValueConfigurationElement);
    ///<summary>Removes a <see cref="T:System.Configuration.NameValueConfigurationElement" />
    ///  object from the collection based on the provided parameter.</summary>
    ///  <param name="nameValue">A <see cref="T:System.Configuration.NameValueConfigurationElement" />
    ///  object.</param>
    procedure Remove(nameValue: DNNameValueConfigurationElement); overload;
    ///<summary>Removes a <see cref="T:System.Configuration.NameValueConfigurationElement" />
    ///  object from the collection based on the provided parameter.</summary>
    ///  <param name="name">The name of the <see cref="T:System.Configuration.NameValueConfigurationElement" />
    ///  object.</param>
    procedure Remove(name: string); overload;
    ///<summary>Clears the <see cref="T:System.Configuration.NameValueConfigurationCollection" />
    ///  .</summary>
    procedure Clear;
    ///<summary>Indicates whether the <see cref="T:System.Configuration.ConfigurationElementCollection" />
    ///  object is read only.</summary>
    ///<returns><see langword="true" />
    ///  if the <see cref="T:System.Configuration.ConfigurationElementCollection" />
    ///  object is read only; otherwise, <see langword="false" />
    ///  .</returns>
    function IsReadOnly: Boolean;
    ///<summary>Compares the <see cref="T:System.Configuration.ConfigurationElementCollection" />
    ///  to the specified object.</summary>
    ///  <param name="compareTo">The object to compare. </param>
    ///<returns><see langword="true" />
    ///  if the object to compare with is equal to the current <see cref="T:System.Configuration.ConfigurationElementCollection" />
    ///  instance; otherwise, <see langword="false" />
    ///  . The default is <see langword="false" />
    ///  .</returns>
    function Equals(compareTo: DDN.mscorlib.DNObject): Boolean;
    ///<summary>Gets a unique value representing the <see cref="T:System.Configuration.ConfigurationElementCollection" />
    ///  instance.</summary>
    ///<returns>A unique value representing the <see cref="T:System.Configuration.ConfigurationElementCollection" />
    ///  current instance.</returns>
    function GetHashCode: Int32;
    ///<summary>Copies the contents of the <see cref="T:System.Configuration.ConfigurationElementCollection" />
    ///  to an array.</summary>
    ///  <param name="array">Array to which to copy the contents of the <see cref="T:System.Configuration.ConfigurationElementCollection" />
    ///  .</param>
    ///  <param name="index">Index location at which to begin copying.</param>
    procedure CopyTo(&array: TArray<DNConfigurationElement>; index: Int32);
    ///<summary>Gets an <see cref="T:System.Collections.IEnumerator" />
    ///  which is used to iterate through the <see cref="T:System.Configuration.ConfigurationElementCollection" />
    ///  .</summary>
    ///<returns>An <see cref="T:System.Collections.IEnumerator" />
    ///  which is used to iterate through the <see cref="T:System.Configuration.ConfigurationElementCollection" />
    ///  .</returns>
    function GetEnumerator: DDN.mscorlib.DNIEnumerator;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Item[name: string]: DNNameValueConfigurationElement read get_Item write set_Item; default;
    ///<summary>Gets the keys to all items contained in the <see cref="T:System.Configuration.NameValueConfigurationCollection" />
    ///  .</summary>
    ///<returns>A string array.</returns>
    property AllKeys: TArray<string> read get_AllKeys;
    ///<summary>Gets the number of elements in the collection.</summary>
    ///<returns>The number of elements in the collection.</returns>
    property Count: Int32 read get_Count;
    ///<summary>Gets or sets a value that specifies whether the collection has been cleared.</summary>
    ///<returns><see langword="true" />
    ///  if the collection has been cleared; otherwise, <see langword="false" />
    ///  . The default is <see langword="false" />
    ///  .</returns>
    ///<exception cref="T:System.Configuration.ConfigurationErrorsException">The configuration is read-only.</exception>
    property EmitClear: Boolean read get_EmitClear write set_EmitClear;
    ///<summary>Gets a value indicating whether access to the collection is synchronized.</summary>
    ///<returns><see langword="true" />
    ///  if access to the <see cref="T:System.Configuration.ConfigurationElementCollection" />
    ///  is synchronized; otherwise, <see langword="false" />
    ///  .</returns>
    property IsSynchronized: Boolean read get_IsSynchronized;
    ///<summary>Gets an object used to synchronize access to the <see cref="T:System.Configuration.ConfigurationElementCollection" />
    ///  .</summary>
    ///<returns>An object used to synchronize access to the <see cref="T:System.Configuration.ConfigurationElementCollection" />
    ///  .</returns>
    property SyncRoot: DDN.mscorlib.DNObject read get_SyncRoot;
    ///<summary>Gets the type of the <see cref="T:System.Configuration.ConfigurationElementCollection" />
    ///  .</summary>
    ///<returns>The <see cref="T:System.Configuration.ConfigurationElementCollectionType" />
    ///  of this collection.</returns>
    property CollectionType: DNConfigurationElementCollectionType read get_CollectionType;
    property LockAttributes: DNConfigurationLockCollection read get_LockAttributes;
    property LockAllAttributesExcept: DNConfigurationLockCollection read get_LockAllAttributesExcept;
    property LockElements: DNConfigurationLockCollection read get_LockElements;
    property LockAllElementsExcept: DNConfigurationLockCollection read get_LockAllElementsExcept;
    property LockItem: Boolean read get_LockItem write set_LockItem;
    property ElementInformation: DNElementInformation read get_ElementInformation;
    property CurrentConfiguration: DNConfiguration read get_CurrentConfiguration;
  end;

  TDNNameValueConfigurationCollection = class(TDNGenericImport<DNNameValueConfigurationCollectionClass, DNNameValueConfigurationCollection>) end;

  //-------------namespace: System.Configuration----------------
  DNProviderSettingsCollectionClass = interface(DNConfigurationElementCollectionClass)
  ['{54034AE9-AB8D-5CBE-8452-5B048B8E2423}']
  { constructors } 

    ///<summary>Initializes a new instance of the <see cref="T:System.Configuration.ProviderSettingsCollection" />
    ///  class. </summary>
    {class} function init: DNProviderSettingsCollection;

  end;

  ///<summary>Represents a collection of <see cref="T:System.Configuration.ProviderSettings" />
  ///  objects.</summary>
  [DNTypeName('System.Configuration.ProviderSettingsCollection')]
  DNProviderSettingsCollection = interface(DNConfigurationElementCollection)
  ['{EC694AA8-9FB9-32E8-BC92-51748761FE0A}']
  { getters & setters } 

    function get_Item(key: string): DNProviderSettings; overload;
    function get_Item(index: Int32): DNProviderSettings; overload;
    procedure set_Item(index: Int32; value: DNProviderSettings);
    function get_Count: Int32;
    function get_EmitClear: Boolean;
    procedure set_EmitClear(value: Boolean);
    function get_IsSynchronized: Boolean;
    function get_SyncRoot: DDN.mscorlib.DNObject;
    function get_CollectionType: DNConfigurationElementCollectionType;
    function get_LockAttributes: DNConfigurationLockCollection;
    function get_LockAllAttributesExcept: DNConfigurationLockCollection;
    function get_LockElements: DNConfigurationLockCollection;
    function get_LockAllElementsExcept: DNConfigurationLockCollection;
    function get_LockItem: Boolean;
    procedure set_LockItem(value: Boolean);
    function get_ElementInformation: DNElementInformation;
    function get_CurrentConfiguration: DNConfiguration;

  { methods } 

    ///<summary>Adds a <see cref="T:System.Configuration.ProviderSettings" />
    ///  object to the collection.</summary>
    ///  <param name="provider">The <see cref="T:System.Configuration.ProviderSettings" />
    ///  object to add.</param>
    procedure Add(provider: DNProviderSettings);
    ///<summary>Removes an element from the collection.</summary>
    ///  <param name="name">The name of the <see cref="T:System.Configuration.ProviderSettings" />
    ///  object to remove.</param>
    procedure Remove(name: string);
    ///<summary>Clears the collection.</summary>
    procedure Clear;
    ///<summary>Indicates whether the <see cref="T:System.Configuration.ConfigurationElementCollection" />
    ///  object is read only.</summary>
    ///<returns><see langword="true" />
    ///  if the <see cref="T:System.Configuration.ConfigurationElementCollection" />
    ///  object is read only; otherwise, <see langword="false" />
    ///  .</returns>
    function IsReadOnly: Boolean;
    ///<summary>Compares the <see cref="T:System.Configuration.ConfigurationElementCollection" />
    ///  to the specified object.</summary>
    ///  <param name="compareTo">The object to compare. </param>
    ///<returns><see langword="true" />
    ///  if the object to compare with is equal to the current <see cref="T:System.Configuration.ConfigurationElementCollection" />
    ///  instance; otherwise, <see langword="false" />
    ///  . The default is <see langword="false" />
    ///  .</returns>
    function Equals(compareTo: DDN.mscorlib.DNObject): Boolean;
    ///<summary>Gets a unique value representing the <see cref="T:System.Configuration.ConfigurationElementCollection" />
    ///  instance.</summary>
    ///<returns>A unique value representing the <see cref="T:System.Configuration.ConfigurationElementCollection" />
    ///  current instance.</returns>
    function GetHashCode: Int32;
    ///<summary>Copies the contents of the <see cref="T:System.Configuration.ConfigurationElementCollection" />
    ///  to an array.</summary>
    ///  <param name="array">Array to which to copy the contents of the <see cref="T:System.Configuration.ConfigurationElementCollection" />
    ///  .</param>
    ///  <param name="index">Index location at which to begin copying.</param>
    procedure CopyTo(&array: TArray<DNConfigurationElement>; index: Int32);
    ///<summary>Gets an <see cref="T:System.Collections.IEnumerator" />
    ///  which is used to iterate through the <see cref="T:System.Configuration.ConfigurationElementCollection" />
    ///  .</summary>
    ///<returns>An <see cref="T:System.Collections.IEnumerator" />
    ///  which is used to iterate through the <see cref="T:System.Configuration.ConfigurationElementCollection" />
    ///  .</returns>
    function GetEnumerator: DDN.mscorlib.DNIEnumerator;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Item[key: string]: DNProviderSettings read get_Item; default;
    property Item[index: Int32]: DNProviderSettings read get_Item write set_Item; default;
    ///<summary>Gets the number of elements in the collection.</summary>
    ///<returns>The number of elements in the collection.</returns>
    property Count: Int32 read get_Count;
    ///<summary>Gets or sets a value that specifies whether the collection has been cleared.</summary>
    ///<returns><see langword="true" />
    ///  if the collection has been cleared; otherwise, <see langword="false" />
    ///  . The default is <see langword="false" />
    ///  .</returns>
    ///<exception cref="T:System.Configuration.ConfigurationErrorsException">The configuration is read-only.</exception>
    property EmitClear: Boolean read get_EmitClear write set_EmitClear;
    ///<summary>Gets a value indicating whether access to the collection is synchronized.</summary>
    ///<returns><see langword="true" />
    ///  if access to the <see cref="T:System.Configuration.ConfigurationElementCollection" />
    ///  is synchronized; otherwise, <see langword="false" />
    ///  .</returns>
    property IsSynchronized: Boolean read get_IsSynchronized;
    ///<summary>Gets an object used to synchronize access to the <see cref="T:System.Configuration.ConfigurationElementCollection" />
    ///  .</summary>
    ///<returns>An object used to synchronize access to the <see cref="T:System.Configuration.ConfigurationElementCollection" />
    ///  .</returns>
    property SyncRoot: DDN.mscorlib.DNObject read get_SyncRoot;
    ///<summary>Gets the type of the <see cref="T:System.Configuration.ConfigurationElementCollection" />
    ///  .</summary>
    ///<returns>The <see cref="T:System.Configuration.ConfigurationElementCollectionType" />
    ///  of this collection.</returns>
    property CollectionType: DNConfigurationElementCollectionType read get_CollectionType;
    property LockAttributes: DNConfigurationLockCollection read get_LockAttributes;
    property LockAllAttributesExcept: DNConfigurationLockCollection read get_LockAllAttributesExcept;
    property LockElements: DNConfigurationLockCollection read get_LockElements;
    property LockAllElementsExcept: DNConfigurationLockCollection read get_LockAllElementsExcept;
    property LockItem: Boolean read get_LockItem write set_LockItem;
    property ElementInformation: DNElementInformation read get_ElementInformation;
    property CurrentConfiguration: DNConfiguration read get_CurrentConfiguration;
  end;

  TDNProviderSettingsCollection = class(TDNGenericImport<DNProviderSettingsCollectionClass, DNProviderSettingsCollection>) end;

  //-------------namespace: System.Configuration----------------
  DNSchemeSettingElementCollectionClass = interface(DNConfigurationElementCollectionClass)
  ['{CAA520D4-62C4-50AA-8FE4-9774E58ED8BB}']
  { constructors } 

    ///<summary>Initializes a new instance of the <see cref="T:System.Configuration.SchemeSettingElementCollection" />
    ///  class. </summary>
    {class} function init: DNSchemeSettingElementCollection;

  end;

  ///<summary>Represents a collection of <see cref="T:System.Configuration.SchemeSettingElement" />
  ///  objects.</summary>
  [DNTypeName('System.Configuration.SchemeSettingElementCollection')]
  DNSchemeSettingElementCollection = interface(DNConfigurationElementCollection)
  ['{93F72529-68CF-3592-B48C-345F03274674}']
  { getters & setters } 

    function get_CollectionType: DNConfigurationElementCollectionType;
    function get_Item(index: Int32): DNSchemeSettingElement; overload;
    function get_Item(name: string): DNSchemeSettingElement; overload;
    function get_Count: Int32;
    function get_EmitClear: Boolean;
    procedure set_EmitClear(value: Boolean);
    function get_IsSynchronized: Boolean;
    function get_SyncRoot: DDN.mscorlib.DNObject;
    function get_LockAttributes: DNConfigurationLockCollection;
    function get_LockAllAttributesExcept: DNConfigurationLockCollection;
    function get_LockElements: DNConfigurationLockCollection;
    function get_LockAllElementsExcept: DNConfigurationLockCollection;
    function get_LockItem: Boolean;
    procedure set_LockItem(value: Boolean);
    function get_ElementInformation: DNElementInformation;
    function get_CurrentConfiguration: DNConfiguration;

  { methods } 

    ///<summary>The index of the specified <see cref="T:System.Configuration.SchemeSettingElement" />
    ///  .</summary>
    ///  <param name="element">The <see cref="T:System.Configuration.SchemeSettingElement" />
    ///  for the specified index location.</param>
    ///<returns>The index of the specified <see cref="T:System.Configuration.SchemeSettingElement" />
    ///  ; otherwise, -1.</returns>
    function IndexOf(element: DNSchemeSettingElement): Int32;
    function IsReadOnly: Boolean;
    function Equals(compareTo: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    procedure CopyTo(&array: TArray<DNConfigurationElement>; index: Int32);
    function GetEnumerator: DDN.mscorlib.DNIEnumerator;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>Gets the default collection type of <see cref="T:System.Configuration.SchemeSettingElementCollection" />
    ///  . </summary>
    ///<returns>The default collection type of <see cref="T:System.Configuration.SchemeSettingElementCollection" />
    ///  .</returns>
    property CollectionType: DNConfigurationElementCollectionType read get_CollectionType;
    property Item[index: Int32]: DNSchemeSettingElement read get_Item; default;
    property Item[name: string]: DNSchemeSettingElement read get_Item; default;
    property Count: Int32 read get_Count;
    property EmitClear: Boolean read get_EmitClear write set_EmitClear;
    property IsSynchronized: Boolean read get_IsSynchronized;
    property SyncRoot: DDN.mscorlib.DNObject read get_SyncRoot;
    property LockAttributes: DNConfigurationLockCollection read get_LockAttributes;
    property LockAllAttributesExcept: DNConfigurationLockCollection read get_LockAllAttributesExcept;
    property LockElements: DNConfigurationLockCollection read get_LockElements;
    property LockAllElementsExcept: DNConfigurationLockCollection read get_LockAllElementsExcept;
    property LockItem: Boolean read get_LockItem write set_LockItem;
    property ElementInformation: DNElementInformation read get_ElementInformation;
    property CurrentConfiguration: DNConfiguration read get_CurrentConfiguration;
  end;

  TDNSchemeSettingElementCollection = class(TDNGenericImport<DNSchemeSettingElementCollectionClass, DNSchemeSettingElementCollection>) end;

  //-------------namespace: System.Configuration----------------
  DNSettingElementCollectionClass = interface(DNConfigurationElementCollectionClass)
  ['{EFF21913-D760-58B1-A075-49F1C2C7FC4A}']
  { constructors } 

    ///<summary>Initializes a new instance of the <see cref="T:System.Configuration.SettingElementCollection" />
    ///  class.</summary>
    {class} function init: DNSettingElementCollection;

  end;

  ///<summary>Contains a collection of <see cref="T:System.Configuration.SettingElement" />
  ///  objects. This class cannot be inherited.</summary>
  [DNTypeName('System.Configuration.SettingElementCollection')]
  DNSettingElementCollection = interface(DNConfigurationElementCollection)
  ['{26BC8EC4-C701-3100-8094-F3446DFDED47}']
  { getters & setters } 

    function get_CollectionType: DNConfigurationElementCollectionType;
    function get_Count: Int32;
    function get_EmitClear: Boolean;
    procedure set_EmitClear(value: Boolean);
    function get_IsSynchronized: Boolean;
    function get_SyncRoot: DDN.mscorlib.DNObject;
    function get_LockAttributes: DNConfigurationLockCollection;
    function get_LockAllAttributesExcept: DNConfigurationLockCollection;
    function get_LockElements: DNConfigurationLockCollection;
    function get_LockAllElementsExcept: DNConfigurationLockCollection;
    function get_LockItem: Boolean;
    procedure set_LockItem(value: Boolean);
    function get_ElementInformation: DNElementInformation;
    function get_CurrentConfiguration: DNConfiguration;

  { methods } 

    ///<summary>Gets a <see cref="T:System.Configuration.SettingElement" />
    ///  object from the collection. </summary>
    ///  <param name="elementKey">A string value representing the <see cref="T:System.Configuration.SettingElement" />
    ///  object in the collection.</param>
    ///<returns>A <see cref="T:System.Configuration.SettingElement" />
    ///  object.</returns>
    function Get(elementKey: string): DNSettingElement;
    ///<summary>Adds a <see cref="T:System.Configuration.SettingElement" />
    ///  object to the collection.</summary>
    ///  <param name="element">The <see cref="T:System.Configuration.SettingElement" />
    ///  object to add to the collection.</param>
    procedure Add(element: DNSettingElement);
    ///<summary>Removes a <see cref="T:System.Configuration.SettingElement" />
    ///  object from the collection.</summary>
    ///  <param name="element">A <see cref="T:System.Configuration.SettingElement" />
    ///  object.</param>
    procedure Remove(element: DNSettingElement);
    ///<summary>Removes all <see cref="T:System.Configuration.SettingElement" />
    ///  objects from the collection.</summary>
    procedure Clear;
    function IsReadOnly: Boolean;
    function Equals(compareTo: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    procedure CopyTo(&array: TArray<DNConfigurationElement>; index: Int32);
    function GetEnumerator: DDN.mscorlib.DNIEnumerator;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>Gets the type of the configuration collection.</summary>
    ///<returns>The <see cref="T:System.Configuration.ConfigurationElementCollectionType" />
    ///  object of the collection.</returns>
    property CollectionType: DNConfigurationElementCollectionType read get_CollectionType;
    property Count: Int32 read get_Count;
    property EmitClear: Boolean read get_EmitClear write set_EmitClear;
    property IsSynchronized: Boolean read get_IsSynchronized;
    property SyncRoot: DDN.mscorlib.DNObject read get_SyncRoot;
    property LockAttributes: DNConfigurationLockCollection read get_LockAttributes;
    property LockAllAttributesExcept: DNConfigurationLockCollection read get_LockAllAttributesExcept;
    property LockElements: DNConfigurationLockCollection read get_LockElements;
    property LockAllElementsExcept: DNConfigurationLockCollection read get_LockAllElementsExcept;
    property LockItem: Boolean read get_LockItem write set_LockItem;
    property ElementInformation: DNElementInformation read get_ElementInformation;
    property CurrentConfiguration: DNConfiguration read get_CurrentConfiguration;
  end;

  TDNSettingElementCollection = class(TDNGenericImport<DNSettingElementCollectionClass, DNSettingElementCollection>) end;

  //-------------namespace: System.Configuration----------------
  DNConfigurationSectionClass = interface(DNConfigurationElementClass)
  ['{D8B99D8F-5652-525D-A9C4-AC48087F1730}']
  end;

  ///<summary>Represents a section within a configuration file.</summary>
  [DNTypeName('System.Configuration.ConfigurationSection')]
  DNConfigurationSection = interface(DNConfigurationElement)
  ['{BF734F72-E579-3EE5-BD86-D9AC7216F6A2}']
  { getters & setters } 

    function get_SectionInformation: DNSectionInformation;
    function get_LockAttributes: DNConfigurationLockCollection;
    function get_LockAllAttributesExcept: DNConfigurationLockCollection;
    function get_LockElements: DNConfigurationLockCollection;
    function get_LockAllElementsExcept: DNConfigurationLockCollection;
    function get_LockItem: Boolean;
    procedure set_LockItem(value: Boolean);
    function get_ElementInformation: DNElementInformation;
    function get_CurrentConfiguration: DNConfiguration;

  { methods } 

    ///<summary>Gets a value indicating whether the <see cref="T:System.Configuration.ConfigurationElement" />
    ///  object is read-only.</summary>
    ///<returns><see langword="true" />
    ///  if the <see cref="T:System.Configuration.ConfigurationElement" />
    ///  object is read-only; otherwise, <see langword="false" />
    ///  .</returns>
    function IsReadOnly: Boolean;
    ///<summary>Compares the current <see cref="T:System.Configuration.ConfigurationElement" />
    ///  instance to the specified object.</summary>
    ///  <param name="compareTo">The object to compare with.</param>
    ///<returns><see langword="true" />
    ///  if the object to compare with is equal to the current <see cref="T:System.Configuration.ConfigurationElement" />
    ///  instance; otherwise, <see langword="false" />
    ///  . The default is <see langword="false" />
    ///  . </returns>
    function Equals(compareTo: DDN.mscorlib.DNObject): Boolean;
    ///<summary>Gets a unique value representing the current <see cref="T:System.Configuration.ConfigurationElement" />
    ///  instance.</summary>
    ///<returns>A unique value representing the current <see cref="T:System.Configuration.ConfigurationElement" />
    ///  instance.</returns>
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>Gets a <see cref="T:System.Configuration.SectionInformation" />
    ///  object that contains the non-customizable information and functionality of the <see cref="T:System.Configuration.ConfigurationSection" />
    ///  object. </summary>
    ///<returns>A <see cref="T:System.Configuration.SectionInformation" />
    ///  that contains the non-customizable information and functionality of the <see cref="T:System.Configuration.ConfigurationSection" />
    ///  .</returns>
    property SectionInformation: DNSectionInformation read get_SectionInformation;
    ///<summary>Gets the collection of locked attributes </summary>
    ///<returns>The <see cref="T:System.Configuration.ConfigurationLockCollection" />
    ///  of locked attributes (properties) for the element.</returns>
    property LockAttributes: DNConfigurationLockCollection read get_LockAttributes;
    ///<summary>Gets the collection of locked attributes.</summary>
    ///<returns>The <see cref="T:System.Configuration.ConfigurationLockCollection" />
    ///  of locked attributes (properties) for the element.</returns>
    property LockAllAttributesExcept: DNConfigurationLockCollection read get_LockAllAttributesExcept;
    ///<summary>Gets the collection of locked elements.</summary>
    ///<returns>The <see cref="T:System.Configuration.ConfigurationLockCollection" />
    ///  of locked elements.</returns>
    property LockElements: DNConfigurationLockCollection read get_LockElements;
    ///<summary>Gets the collection of locked elements.</summary>
    ///<returns>The <see cref="T:System.Configuration.ConfigurationLockCollection" />
    ///  of locked elements.</returns>
    property LockAllElementsExcept: DNConfigurationLockCollection read get_LockAllElementsExcept;
    ///<summary>Gets or sets a value indicating whether the element is locked.</summary>
    ///<returns><see langword="true" />
    ///  if the element is locked; otherwise, <see langword="false" />
    ///  . The default is <see langword="false" />
    ///  .</returns>
    ///<exception cref="T:System.Configuration.ConfigurationErrorsException">The element has already been locked at a higher configuration level.</exception>
    property LockItem: Boolean read get_LockItem write set_LockItem;
    ///<summary>Gets an <see cref="T:System.Configuration.ElementInformation" />
    ///  object that contains the non-customizable information and functionality of the <see cref="T:System.Configuration.ConfigurationElement" />
    ///  object. </summary>
    ///<returns>An <see cref="T:System.Configuration.ElementInformation" />
    ///  that contains the non-customizable information and functionality of the <see cref="T:System.Configuration.ConfigurationElement" />
    ///  .</returns>
    property ElementInformation: DNElementInformation read get_ElementInformation;
    ///<summary>Gets a reference to the top-level <see cref="T:System.Configuration.Configuration" />
    ///  instance that represents the configuration hierarchy that the current <see cref="T:System.Configuration.ConfigurationElement" />
    ///  instance belongs to.</summary>
    ///<returns>The top-level <see cref="T:System.Configuration.Configuration" />
    ///  instance that the current <see cref="T:System.Configuration.ConfigurationElement" />
    ///  instance belongs to.</returns>
    property CurrentConfiguration: DNConfiguration read get_CurrentConfiguration;
  end;

  TDNConfigurationSection = class(TDNGenericImport<DNConfigurationSectionClass, DNConfigurationSection>) end;

  //-------------namespace: System.Configuration----------------
  DNAppSettingsSectionClass = interface(DNConfigurationSectionClass)
  ['{C1CFBA23-EC59-5177-9A48-75995F96EE28}']
  { constructors } 

    ///<summary>Initializes a new instance of the <see cref="T:System.Configuration.AppSettingsSection" />
    ///  class.</summary>
    {class} function init: DNAppSettingsSection;

  end;

  ///<summary>Provides configuration system support for the <see langword="appSettings" />
  ///  configuration section. This class cannot be inherited.</summary>
  [DNTypeName('System.Configuration.AppSettingsSection')]
  DNAppSettingsSection = interface(DNConfigurationSection)
  ['{C67D99B0-1A20-32AA-9C43-22087FDDE286}']
  { getters & setters } 

    function get_Settings: DNKeyValueConfigurationCollection;
    function get_File: string;
    procedure set_File(value: string);
    function get_SectionInformation: DNSectionInformation;
    function get_LockAttributes: DNConfigurationLockCollection;
    function get_LockAllAttributesExcept: DNConfigurationLockCollection;
    function get_LockElements: DNConfigurationLockCollection;
    function get_LockAllElementsExcept: DNConfigurationLockCollection;
    function get_LockItem: Boolean;
    procedure set_LockItem(value: Boolean);
    function get_ElementInformation: DNElementInformation;
    function get_CurrentConfiguration: DNConfiguration;

  { methods } 

    function IsReadOnly: Boolean;
    function Equals(compareTo: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>Gets a collection of key/value pairs that contains application settings.</summary>
    ///<returns>A collection of key/value pairs that contains the application settings from the configuration file.</returns>
    property Settings: DNKeyValueConfigurationCollection read get_Settings;
    ///<summary>Gets or sets a configuration file that provides additional settings or overrides the settings specified in the <see langword="appSettings" />
    ///  element.</summary>
    ///<returns>A configuration file that provides additional settings or overrides the settings specified in the <see langword="appSettings" />
    ///  element.</returns>
    property &File: string read get_File write set_File;
    ///<summary>Gets a <see cref="T:System.Configuration.SectionInformation" />
    ///  object that contains the non-customizable information and functionality of the <see cref="T:System.Configuration.ConfigurationSection" />
    ///  object. </summary>
    ///<returns>A <see cref="T:System.Configuration.SectionInformation" />
    ///  that contains the non-customizable information and functionality of the <see cref="T:System.Configuration.ConfigurationSection" />
    ///  .</returns>
    property SectionInformation: DNSectionInformation read get_SectionInformation;
    property LockAttributes: DNConfigurationLockCollection read get_LockAttributes;
    property LockAllAttributesExcept: DNConfigurationLockCollection read get_LockAllAttributesExcept;
    property LockElements: DNConfigurationLockCollection read get_LockElements;
    property LockAllElementsExcept: DNConfigurationLockCollection read get_LockAllElementsExcept;
    property LockItem: Boolean read get_LockItem write set_LockItem;
    property ElementInformation: DNElementInformation read get_ElementInformation;
    property CurrentConfiguration: DNConfiguration read get_CurrentConfiguration;
  end;

  TDNAppSettingsSection = class(TDNGenericImport<DNAppSettingsSectionClass, DNAppSettingsSection>) end;

  //-------------namespace: System.Configuration----------------
  DNClientSettingsSectionClass = interface(DNConfigurationSectionClass)
  ['{B90E88D3-2EBE-54B8-84E6-437BB8BA3597}']
  { constructors } 

    ///<summary>Initializes a new instance of the <see cref="T:System.Configuration.ClientSettingsSection" />
    ///  class.</summary>
    {class} function init: DNClientSettingsSection;

  end;

  ///<summary>Represents a group of user-scoped application settings in a configuration file.</summary>
  [DNTypeName('System.Configuration.ClientSettingsSection')]
  DNClientSettingsSection = interface(DNConfigurationSection)
  ['{C52AF707-F2B0-36A7-8384-8B87E2209516}']
  { getters & setters } 

    function get_Settings: DNSettingElementCollection;
    function get_SectionInformation: DNSectionInformation;
    function get_LockAttributes: DNConfigurationLockCollection;
    function get_LockAllAttributesExcept: DNConfigurationLockCollection;
    function get_LockElements: DNConfigurationLockCollection;
    function get_LockAllElementsExcept: DNConfigurationLockCollection;
    function get_LockItem: Boolean;
    procedure set_LockItem(value: Boolean);
    function get_ElementInformation: DNElementInformation;
    function get_CurrentConfiguration: DNConfiguration;

  { methods } 

    function IsReadOnly: Boolean;
    function Equals(compareTo: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>Gets the collection of client settings for the section.</summary>
    ///<returns>A <see cref="T:System.Configuration.SettingElementCollection" />
    ///  containing all the client settings found in the current configuration section.</returns>
    property Settings: DNSettingElementCollection read get_Settings;
    property SectionInformation: DNSectionInformation read get_SectionInformation;
    property LockAttributes: DNConfigurationLockCollection read get_LockAttributes;
    property LockAllAttributesExcept: DNConfigurationLockCollection read get_LockAllAttributesExcept;
    property LockElements: DNConfigurationLockCollection read get_LockElements;
    property LockAllElementsExcept: DNConfigurationLockCollection read get_LockAllElementsExcept;
    property LockItem: Boolean read get_LockItem write set_LockItem;
    property ElementInformation: DNElementInformation read get_ElementInformation;
    property CurrentConfiguration: DNConfiguration read get_CurrentConfiguration;
  end;

  TDNClientSettingsSection = class(TDNGenericImport<DNClientSettingsSectionClass, DNClientSettingsSection>) end;

  //-------------namespace: System.Configuration----------------
  DNConfigurationBuildersSectionClass = interface(DNConfigurationSectionClass)
  ['{AB6E7DE3-FF87-5063-8FF5-00414B42DB2C}']
  { constructors } 

    ///<summary>Initializes a new instance of the <see cref="T:System.Configuration.ConfigurationBuildersSection" />
    ///  class.</summary>
    {class} function init: DNConfigurationBuildersSection;

  end;

  ///<summary>Provides programmatic access to the <see langword="&lt;configBuilders&gt;" />
  ///  section. This class can't be inherited.</summary>
  [DNTypeName('System.Configuration.ConfigurationBuildersSection')]
  DNConfigurationBuildersSection = interface(DNConfigurationSection)
  ['{7187838A-934C-36E9-A32F-E4A5D7FD8625}']
  { getters & setters } 

    function get_Builders: DNProviderSettingsCollection;
    function get_SectionInformation: DNSectionInformation;
    function get_LockAttributes: DNConfigurationLockCollection;
    function get_LockAllAttributesExcept: DNConfigurationLockCollection;
    function get_LockElements: DNConfigurationLockCollection;
    function get_LockAllElementsExcept: DNConfigurationLockCollection;
    function get_LockItem: Boolean;
    procedure set_LockItem(value: Boolean);
    function get_ElementInformation: DNElementInformation;
    function get_CurrentConfiguration: DNConfiguration;

  { methods } 

    ///<summary>Returns a <see cref="T:System.Configuration.ConfigurationBuilder" />
    ///  object that has the provided configuration builder name.</summary>
    ///  <param name="builderName">A configuration builder name or a comma-separated list of names. If <paramref name="builderName" />
    ///  is a comma-separated list of <see cref="T:System.Configuration.ConfigurationBuilder" />
    ///  names, a special aggregate <see cref="T:System.Configuration.ConfigurationBuilder" />
    ///  object that references and applies all named configuration builders is returned.</param>
    ///<returns>A <see cref="T:System.Configuration.ConfigurationBuilder" />
    ///  object that has the provided configuration <paramref name="builderName" />
    ///  .</returns>
    ///<exception cref="T:System.Exception">The <see cref="T:System.Configuration.ConfigurationBuilder" />
    ///  object from <paramref name="builderName" />
    ///  wasn't found.</exception><exception cref="T:System.Exception">The type specified doesn't extend the <see cref="T:System.Configuration.ConfigurationBuilder" />
    ///  class.</exception><exception cref="T:System.Exception">A configuration provider type can't be instantiated under a partially trusted security policy (<see cref="T:System.Security.AllowPartiallyTrustedCallersAttribute" />
    ///  is not present on the target assembly).</exception><exception cref="T:System.IO.FileNotFoundException">ConfigurationBuilders.IgnoreLoadFailure is disabled by default. If a bin-deployed configuration builder can't be found or instantiated for one of the sections read from the configuration file, a <see cref="T:System.IO.FileNotFoundException" />
    ///  is trapped and reported. If you wish to ignore load failures, enable ConfigurationBuilders.IgnoreLoadFailure.</exception><exception cref="T:System.TypeLoadException">ConfigurationBuilders.IgnoreLoadFailure is disabled by default. While loading a configuration builder if a <see cref="T:System.TypeLoadException" />
    ///  occurs for one of the sections read from the configuration file, a <see cref="T:System.TypeLoadException" />
    ///  is trapped and reported. If you wish to ignore load failures, enable ConfigurationBuilders.IgnoreLoadFailure.</exception>
    function GetBuilderFromName(builderName: string): DNConfigurationBuilder;
    function IsReadOnly: Boolean;
    function Equals(compareTo: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>Gets a <see cref="T:System.Configuration.ConfigurationBuilderCollection" />
    ///  of all <see cref="T:System.Configuration.ConfigurationBuilder" />
    ///  objects in all participating configuration files.</summary>
    ///<returns>The <see cref="T:System.Configuration.ConfigurationBuilder" />
    ///  objects in all participating configuration files.</returns>
    property Builders: DNProviderSettingsCollection read get_Builders;
    ///<summary>Gets a <see cref="T:System.Configuration.SectionInformation" />
    ///  object that contains the non-customizable information and functionality of the <see cref="T:System.Configuration.ConfigurationSection" />
    ///  object. </summary>
    ///<returns>A <see cref="T:System.Configuration.SectionInformation" />
    ///  that contains the non-customizable information and functionality of the <see cref="T:System.Configuration.ConfigurationSection" />
    ///  .</returns>
    property SectionInformation: DNSectionInformation read get_SectionInformation;
    property LockAttributes: DNConfigurationLockCollection read get_LockAttributes;
    property LockAllAttributesExcept: DNConfigurationLockCollection read get_LockAllAttributesExcept;
    property LockElements: DNConfigurationLockCollection read get_LockElements;
    property LockAllElementsExcept: DNConfigurationLockCollection read get_LockAllElementsExcept;
    property LockItem: Boolean read get_LockItem write set_LockItem;
    property ElementInformation: DNElementInformation read get_ElementInformation;
    property CurrentConfiguration: DNConfiguration read get_CurrentConfiguration;
  end;

  TDNConfigurationBuildersSection = class(TDNGenericImport<DNConfigurationBuildersSectionClass, DNConfigurationBuildersSection>) end;

  //-------------namespace: System.Configuration----------------
  DNConnectionStringsSectionClass = interface(DNConfigurationSectionClass)
  ['{A2C5DCAB-F515-522C-9AAA-A5170603BF25}']
  { constructors } 

    ///<summary>Initializes a new instance of the <see cref="T:System.Configuration.ConnectionStringsSection" />
    ///  class.</summary>
    {class} function init: DNConnectionStringsSection;

  end;

  ///<summary>Provides programmatic access to the connection strings configuration-file section. </summary>
  [DNTypeName('System.Configuration.ConnectionStringsSection')]
  DNConnectionStringsSection = interface(DNConfigurationSection)
  ['{CD0C6620-E0F0-3293-8450-2EB8B6E7F0B3}']
  { getters & setters } 

    function get_ConnectionStrings: DNConnectionStringSettingsCollection;
    function get_SectionInformation: DNSectionInformation;
    function get_LockAttributes: DNConfigurationLockCollection;
    function get_LockAllAttributesExcept: DNConfigurationLockCollection;
    function get_LockElements: DNConfigurationLockCollection;
    function get_LockAllElementsExcept: DNConfigurationLockCollection;
    function get_LockItem: Boolean;
    procedure set_LockItem(value: Boolean);
    function get_ElementInformation: DNElementInformation;
    function get_CurrentConfiguration: DNConfiguration;

  { methods } 

    function IsReadOnly: Boolean;
    function Equals(compareTo: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>Gets a <see cref="T:System.Configuration.ConnectionStringSettingsCollection" />
    ///  collection of <see cref="T:System.Configuration.ConnectionStringSettings" />
    ///  objects.</summary>
    ///<returns>A <see cref="T:System.Configuration.ConnectionStringSettingsCollection" />
    ///  collection of <see cref="T:System.Configuration.ConnectionStringSettings" />
    ///  objects.</returns>
    property ConnectionStrings: DNConnectionStringSettingsCollection read get_ConnectionStrings;
    ///<summary>Gets a <see cref="T:System.Configuration.SectionInformation" />
    ///  object that contains the non-customizable information and functionality of the <see cref="T:System.Configuration.ConfigurationSection" />
    ///  object. </summary>
    ///<returns>A <see cref="T:System.Configuration.SectionInformation" />
    ///  that contains the non-customizable information and functionality of the <see cref="T:System.Configuration.ConfigurationSection" />
    ///  .</returns>
    property SectionInformation: DNSectionInformation read get_SectionInformation;
    property LockAttributes: DNConfigurationLockCollection read get_LockAttributes;
    property LockAllAttributesExcept: DNConfigurationLockCollection read get_LockAllAttributesExcept;
    property LockElements: DNConfigurationLockCollection read get_LockElements;
    property LockAllElementsExcept: DNConfigurationLockCollection read get_LockAllElementsExcept;
    property LockItem: Boolean read get_LockItem write set_LockItem;
    property ElementInformation: DNElementInformation read get_ElementInformation;
    property CurrentConfiguration: DNConfiguration read get_CurrentConfiguration;
  end;

  TDNConnectionStringsSection = class(TDNGenericImport<DNConnectionStringsSectionClass, DNConnectionStringsSection>) end;

  //-------------namespace: System.Configuration----------------
  DNDefaultSectionClass = interface(DNConfigurationSectionClass)
  ['{2CFF7245-E0F5-515B-BA52-E11788849699}']
  { constructors } 

    ///<summary>Initializes a new instance of the <see cref="T:System.Configuration.DefaultSection" />
    ///  class. </summary>
    {class} function init: DNDefaultSection;

  end;

  ///<summary>Represents a basic configuration-section handler that exposes the configuration section's XML for both read and write access.</summary>
  [DNTypeName('System.Configuration.DefaultSection')]
  DNDefaultSection = interface(DNConfigurationSection)
  ['{F6793947-3BF8-3DB6-8EC7-EB35B6845734}']
  { getters & setters } 

    function get_SectionInformation: DNSectionInformation;
    function get_LockAttributes: DNConfigurationLockCollection;
    function get_LockAllAttributesExcept: DNConfigurationLockCollection;
    function get_LockElements: DNConfigurationLockCollection;
    function get_LockAllElementsExcept: DNConfigurationLockCollection;
    function get_LockItem: Boolean;
    procedure set_LockItem(value: Boolean);
    function get_ElementInformation: DNElementInformation;
    function get_CurrentConfiguration: DNConfiguration;

  { methods } 

    function IsReadOnly: Boolean;
    function Equals(compareTo: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>Gets a <see cref="T:System.Configuration.SectionInformation" />
    ///  object that contains the non-customizable information and functionality of the <see cref="T:System.Configuration.ConfigurationSection" />
    ///  object. </summary>
    ///<returns>A <see cref="T:System.Configuration.SectionInformation" />
    ///  that contains the non-customizable information and functionality of the <see cref="T:System.Configuration.ConfigurationSection" />
    ///  .</returns>
    property SectionInformation: DNSectionInformation read get_SectionInformation;
    property LockAttributes: DNConfigurationLockCollection read get_LockAttributes;
    property LockAllAttributesExcept: DNConfigurationLockCollection read get_LockAllAttributesExcept;
    property LockElements: DNConfigurationLockCollection read get_LockElements;
    property LockAllElementsExcept: DNConfigurationLockCollection read get_LockAllElementsExcept;
    property LockItem: Boolean read get_LockItem write set_LockItem;
    property ElementInformation: DNElementInformation read get_ElementInformation;
    property CurrentConfiguration: DNConfiguration read get_CurrentConfiguration;
  end;

  TDNDefaultSection = class(TDNGenericImport<DNDefaultSectionClass, DNDefaultSection>) end;

  //-------------namespace: System.Configuration----------------
  DNIgnoreSectionClass = interface(DNConfigurationSectionClass)
  ['{0CD1D25C-F2DD-5B1D-8401-83390BD31745}']
  { constructors } 

    ///<summary>Initializes a new instance of the <see cref="T:System.Configuration.IgnoreSection" />
    ///  class.</summary>
    {class} function init: DNIgnoreSection;

  end;

  ///<summary>Provides a wrapper type definition for configuration sections that are not handled by the <see cref="N:System.Configuration" />
  ///  types.</summary>
  [DNTypeName('System.Configuration.IgnoreSection')]
  DNIgnoreSection = interface(DNConfigurationSection)
  ['{0A9D41F9-9A4A-30FB-B240-8AF00FBB1B09}']
  { getters & setters } 

    function get_SectionInformation: DNSectionInformation;
    function get_LockAttributes: DNConfigurationLockCollection;
    function get_LockAllAttributesExcept: DNConfigurationLockCollection;
    function get_LockElements: DNConfigurationLockCollection;
    function get_LockAllElementsExcept: DNConfigurationLockCollection;
    function get_LockItem: Boolean;
    procedure set_LockItem(value: Boolean);
    function get_ElementInformation: DNElementInformation;
    function get_CurrentConfiguration: DNConfiguration;

  { methods } 

    function IsReadOnly: Boolean;
    function Equals(compareTo: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>Gets a <see cref="T:System.Configuration.SectionInformation" />
    ///  object that contains the non-customizable information and functionality of the <see cref="T:System.Configuration.ConfigurationSection" />
    ///  object. </summary>
    ///<returns>A <see cref="T:System.Configuration.SectionInformation" />
    ///  that contains the non-customizable information and functionality of the <see cref="T:System.Configuration.ConfigurationSection" />
    ///  .</returns>
    property SectionInformation: DNSectionInformation read get_SectionInformation;
    property LockAttributes: DNConfigurationLockCollection read get_LockAttributes;
    property LockAllAttributesExcept: DNConfigurationLockCollection read get_LockAllAttributesExcept;
    property LockElements: DNConfigurationLockCollection read get_LockElements;
    property LockAllElementsExcept: DNConfigurationLockCollection read get_LockAllElementsExcept;
    property LockItem: Boolean read get_LockItem write set_LockItem;
    property ElementInformation: DNElementInformation read get_ElementInformation;
    property CurrentConfiguration: DNConfiguration read get_CurrentConfiguration;
  end;

  TDNIgnoreSection = class(TDNGenericImport<DNIgnoreSectionClass, DNIgnoreSection>) end;

  //-------------namespace: System.Configuration----------------
  DNProtectedConfigurationSectionClass = interface(DNConfigurationSectionClass)
  ['{974F92F5-53BD-5739-94A1-62C0B2235030}']
  { constructors } 

    ///<summary>Initializes a new instance of the <see cref="T:System.Configuration.ProtectedConfigurationSection" />
    ///  class using default settings.</summary>
    {class} function init: DNProtectedConfigurationSection;

  end;

  ///<summary>Provides programmatic access to the <see langword="configProtectedData" />
  ///  configuration section. This class cannot be inherited.</summary>
  [DNTypeName('System.Configuration.ProtectedConfigurationSection')]
  DNProtectedConfigurationSection = interface(DNConfigurationSection)
  ['{A6A19651-F5E0-38B3-87AD-9C4510A06A68}']
  { getters & setters } 

    function get_Providers: DNProviderSettingsCollection;
    function get_DefaultProvider: string;
    procedure set_DefaultProvider(value: string);
    function get_SectionInformation: DNSectionInformation;
    function get_LockAttributes: DNConfigurationLockCollection;
    function get_LockAllAttributesExcept: DNConfigurationLockCollection;
    function get_LockElements: DNConfigurationLockCollection;
    function get_LockAllElementsExcept: DNConfigurationLockCollection;
    function get_LockItem: Boolean;
    procedure set_LockItem(value: Boolean);
    function get_ElementInformation: DNElementInformation;
    function get_CurrentConfiguration: DNConfiguration;

  { methods } 

    function IsReadOnly: Boolean;
    function Equals(compareTo: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>Gets a <see cref="T:System.Configuration.ProviderSettingsCollection" />
    ///  collection of all the <see cref="T:System.Configuration.ProtectedConfigurationProvider" />
    ///  objects in all participating configuration files.</summary>
    ///<returns>A <see cref="T:System.Configuration.ProviderSettingsCollection" />
    ///  collection of all the <see cref="T:System.Configuration.ProtectedConfigurationProvider" />
    ///  objects in all participating configuration files. </returns>
    property Providers: DNProviderSettingsCollection read get_Providers;
    ///<summary>Gets or sets the name of the default <see cref="T:System.Configuration.ProtectedConfigurationProvider" />
    ///  object in the <see cref="P:System.Configuration.ProtectedConfigurationSection.Providers" />
    ///  collection property.</summary>
    ///<returns>The name of the default <see cref="T:System.Configuration.ProtectedConfigurationProvider" />
    ///  object in the <see cref="P:System.Configuration.ProtectedConfigurationSection.Providers" />
    ///  collection property. </returns>
    property DefaultProvider: string read get_DefaultProvider write set_DefaultProvider;
    ///<summary>Gets a <see cref="T:System.Configuration.SectionInformation" />
    ///  object that contains the non-customizable information and functionality of the <see cref="T:System.Configuration.ConfigurationSection" />
    ///  object. </summary>
    ///<returns>A <see cref="T:System.Configuration.SectionInformation" />
    ///  that contains the non-customizable information and functionality of the <see cref="T:System.Configuration.ConfigurationSection" />
    ///  .</returns>
    property SectionInformation: DNSectionInformation read get_SectionInformation;
    property LockAttributes: DNConfigurationLockCollection read get_LockAttributes;
    property LockAllAttributesExcept: DNConfigurationLockCollection read get_LockAllAttributesExcept;
    property LockElements: DNConfigurationLockCollection read get_LockElements;
    property LockAllElementsExcept: DNConfigurationLockCollection read get_LockAllElementsExcept;
    property LockItem: Boolean read get_LockItem write set_LockItem;
    property ElementInformation: DNElementInformation read get_ElementInformation;
    property CurrentConfiguration: DNConfiguration read get_CurrentConfiguration;
  end;

  TDNProtectedConfigurationSection = class(TDNGenericImport<DNProtectedConfigurationSectionClass, DNProtectedConfigurationSection>) end;

  //-------------namespace: System.Configuration----------------
  DNUriSectionClass = interface(DNConfigurationSectionClass)
  ['{74F37FA5-DD95-5C21-AE75-C5A000841281}']
  { constructors } 

    ///<summary>Initializes a new instance of the <see cref="T:System.Configuration.UriSection" />
    ///  class.</summary>
    {class} function init: DNUriSection;

  end;

  ///<summary>Represents the Uri section within a configuration file.</summary>
  [DNTypeName('System.Configuration.UriSection')]
  DNUriSection = interface(DNConfigurationSection)
  ['{368E8CE8-1BE9-3629-A0A0-BB1F2118CA87}']
  { getters & setters } 

    function get_Idn: DNIdnElement;
    function get_IriParsing: DNIriParsingElement;
    function get_SchemeSettings: DNSchemeSettingElementCollection;
    function get_SectionInformation: DNSectionInformation;
    function get_LockAttributes: DNConfigurationLockCollection;
    function get_LockAllAttributesExcept: DNConfigurationLockCollection;
    function get_LockElements: DNConfigurationLockCollection;
    function get_LockAllElementsExcept: DNConfigurationLockCollection;
    function get_LockItem: Boolean;
    procedure set_LockItem(value: Boolean);
    function get_ElementInformation: DNElementInformation;
    function get_CurrentConfiguration: DNConfiguration;

  { methods } 

    function IsReadOnly: Boolean;
    function Equals(compareTo: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>Gets an <see cref="T:System.Configuration.IdnElement" />
    ///  object that contains the configuration setting for International Domain Name (IDN) processing in the <see cref="T:System.Uri" />
    ///  class.</summary>
    ///<returns>The configuration setting for International Domain Name (IDN) processing in the <see cref="T:System.Uri" />
    ///  class.</returns>
    property Idn: DNIdnElement read get_Idn;
    ///<summary>Gets an <see cref="T:System.Configuration.IriParsingElement" />
    ///  object that contains the configuration setting for International Resource Identifiers (IRI) parsing in the <see cref="T:System.Uri" />
    ///  class.</summary>
    ///<returns>The configuration setting for International Resource Identifiers (IRI) parsing in the <see cref="T:System.Uri" />
    ///  class.</returns>
    property IriParsing: DNIriParsingElement read get_IriParsing;
    ///<summary>Gets a <see cref="T:System.Configuration.SchemeSettingElementCollection" />
    ///  object that contains the configuration settings for scheme parsing in the <see cref="T:System.Uri" />
    ///  class.</summary>
    ///<returns>The configuration settings for scheme parsing in the <see cref="T:System.Uri" />
    ///  class</returns>
    property SchemeSettings: DNSchemeSettingElementCollection read get_SchemeSettings;
    property SectionInformation: DNSectionInformation read get_SectionInformation;
    property LockAttributes: DNConfigurationLockCollection read get_LockAttributes;
    property LockAllAttributesExcept: DNConfigurationLockCollection read get_LockAllAttributesExcept;
    property LockElements: DNConfigurationLockCollection read get_LockElements;
    property LockAllElementsExcept: DNConfigurationLockCollection read get_LockAllElementsExcept;
    property LockItem: Boolean read get_LockItem write set_LockItem;
    property ElementInformation: DNElementInformation read get_ElementInformation;
    property CurrentConfiguration: DNConfiguration read get_CurrentConfiguration;
  end;

  TDNUriSection = class(TDNGenericImport<DNUriSectionClass, DNUriSection>) end;

  //-------------namespace: System.Configuration----------------
  DNConnectionStringSettingsClass = interface(DNConfigurationElementClass)
  ['{DCA76164-7633-53A7-AF28-12A8246530E5}']
  { constructors } 

    ///<summary>Initializes a new instance of a <see cref="T:System.Configuration.ConnectionStringSettings" />
    ///  class.</summary>
    {class} function init: DNConnectionStringSettings; overload;
    ///<summary>Initializes a new instance of a <see cref="T:System.Configuration.ConnectionStringSettings" />
    ///  class.</summary>
    ///  <param name="name">The name of the connection string.</param>
    ///  <param name="connectionString">The connection string.</param>
    {class} function init(name: string; connectionString: string): DNConnectionStringSettings; overload;
    ///<summary>Initializes a new instance of a <see cref="T:System.Configuration.ConnectionStringSettings" />
    ///  object.</summary>
    ///  <param name="name">The name of the connection string.</param>
    ///  <param name="connectionString">The connection string.</param>
    ///  <param name="providerName">The name of the provider to use with the connection string.</param>
    {class} function init(name: string; connectionString: string; providerName: string): DNConnectionStringSettings; overload;

  end;

  ///<summary>Represents a single, named connection string in the connection strings configuration file section.</summary>
  [DNTypeName('System.Configuration.ConnectionStringSettings')]
  DNConnectionStringSettings = interface(DNConfigurationElement)
  ['{29C60AC4-7276-3512-BDEE-B3C6525E006D}']
  { getters & setters } 

    function get_Name: string;
    procedure set_Name(value: string);
    function get_ConnectionString: string;
    procedure set_ConnectionString(value: string);
    function get_ProviderName: string;
    procedure set_ProviderName(value: string);
    function get_LockAttributes: DNConfigurationLockCollection;
    function get_LockAllAttributesExcept: DNConfigurationLockCollection;
    function get_LockElements: DNConfigurationLockCollection;
    function get_LockAllElementsExcept: DNConfigurationLockCollection;
    function get_LockItem: Boolean;
    procedure set_LockItem(value: Boolean);
    function get_ElementInformation: DNElementInformation;
    function get_CurrentConfiguration: DNConfiguration;

  { methods } 

    ///<summary>Returns a string representation of the object.</summary>
    ///<returns>A string representation of the object.</returns>
    function ToString: string;
    ///<summary>Gets a value indicating whether the <see cref="T:System.Configuration.ConfigurationElement" />
    ///  object is read-only.</summary>
    ///<returns><see langword="true" />
    ///  if the <see cref="T:System.Configuration.ConfigurationElement" />
    ///  object is read-only; otherwise, <see langword="false" />
    ///  .</returns>
    function IsReadOnly: Boolean;
    ///<summary>Compares the current <see cref="T:System.Configuration.ConfigurationElement" />
    ///  instance to the specified object.</summary>
    ///  <param name="compareTo">The object to compare with.</param>
    ///<returns><see langword="true" />
    ///  if the object to compare with is equal to the current <see cref="T:System.Configuration.ConfigurationElement" />
    ///  instance; otherwise, <see langword="false" />
    ///  . The default is <see langword="false" />
    ///  . </returns>
    function Equals(compareTo: DDN.mscorlib.DNObject): Boolean;
    ///<summary>Gets a unique value representing the current <see cref="T:System.Configuration.ConfigurationElement" />
    ///  instance.</summary>
    ///<returns>A unique value representing the current <see cref="T:System.Configuration.ConfigurationElement" />
    ///  instance.</returns>
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    ///<summary>Gets or sets the <see cref="T:System.Configuration.ConnectionStringSettings" />
    ///  name.</summary>
    ///<returns>The string value assigned to the <see cref="P:System.Configuration.ConnectionStringSettings.Name" />
    ///  property.</returns>
    property Name: string read get_Name write set_Name;
    ///<summary>Gets or sets the connection string.</summary>
    ///<returns>The string value assigned to the <see cref="P:System.Configuration.ConnectionStringSettings.ConnectionString" />
    ///  property.</returns>
    property ConnectionString: string read get_ConnectionString write set_ConnectionString;
    ///<summary>Gets or sets the provider name property.</summary>
    ///<returns>Gets or sets the <see cref="P:System.Configuration.ConnectionStringSettings.ProviderName" />
    ///  property.</returns>
    property ProviderName: string read get_ProviderName write set_ProviderName;
    ///<summary>Gets the collection of locked attributes </summary>
    ///<returns>The <see cref="T:System.Configuration.ConfigurationLockCollection" />
    ///  of locked attributes (properties) for the element.</returns>
    property LockAttributes: DNConfigurationLockCollection read get_LockAttributes;
    ///<summary>Gets the collection of locked attributes.</summary>
    ///<returns>The <see cref="T:System.Configuration.ConfigurationLockCollection" />
    ///  of locked attributes (properties) for the element.</returns>
    property LockAllAttributesExcept: DNConfigurationLockCollection read get_LockAllAttributesExcept;
    ///<summary>Gets the collection of locked elements.</summary>
    ///<returns>The <see cref="T:System.Configuration.ConfigurationLockCollection" />
    ///  of locked elements.</returns>
    property LockElements: DNConfigurationLockCollection read get_LockElements;
    ///<summary>Gets the collection of locked elements.</summary>
    ///<returns>The <see cref="T:System.Configuration.ConfigurationLockCollection" />
    ///  of locked elements.</returns>
    property LockAllElementsExcept: DNConfigurationLockCollection read get_LockAllElementsExcept;
    ///<summary>Gets or sets a value indicating whether the element is locked.</summary>
    ///<returns><see langword="true" />
    ///  if the element is locked; otherwise, <see langword="false" />
    ///  . The default is <see langword="false" />
    ///  .</returns>
    ///<exception cref="T:System.Configuration.ConfigurationErrorsException">The element has already been locked at a higher configuration level.</exception>
    property LockItem: Boolean read get_LockItem write set_LockItem;
    ///<summary>Gets an <see cref="T:System.Configuration.ElementInformation" />
    ///  object that contains the non-customizable information and functionality of the <see cref="T:System.Configuration.ConfigurationElement" />
    ///  object. </summary>
    ///<returns>An <see cref="T:System.Configuration.ElementInformation" />
    ///  that contains the non-customizable information and functionality of the <see cref="T:System.Configuration.ConfigurationElement" />
    ///  .</returns>
    property ElementInformation: DNElementInformation read get_ElementInformation;
    ///<summary>Gets a reference to the top-level <see cref="T:System.Configuration.Configuration" />
    ///  instance that represents the configuration hierarchy that the current <see cref="T:System.Configuration.ConfigurationElement" />
    ///  instance belongs to.</summary>
    ///<returns>The top-level <see cref="T:System.Configuration.Configuration" />
    ///  instance that the current <see cref="T:System.Configuration.ConfigurationElement" />
    ///  instance belongs to.</returns>
    property CurrentConfiguration: DNConfiguration read get_CurrentConfiguration;
  end;

  TDNConnectionStringSettings = class(TDNGenericImport<DNConnectionStringSettingsClass, DNConnectionStringSettings>) end;

  //-------------namespace: System.Configuration----------------
  DNIdnElementClass = interface(DNConfigurationElementClass)
  ['{E3DFCCBA-EBC6-5CD2-B8C5-82A98D696FA2}']
  { constructors } 

    ///<summary>Initializes a new instance of the <see cref="T:System.Configuration.IdnElement" />
    ///  class.</summary>
    {class} function init: DNIdnElement;

  end;

  ///<summary>Provides the configuration setting for International Domain Name (IDN) processing in the <see cref="T:System.Uri" />
  ///  class.</summary>
  [DNTypeName('System.Configuration.IdnElement')]
  DNIdnElement = interface(DNConfigurationElement)
  ['{743CA10E-C5B7-3B30-B083-F7ECD6112979}']
  { getters & setters } 

    function get_Enabled: DNUriIdnScope;
    procedure set_Enabled(value: DNUriIdnScope);
    function get_LockAttributes: DNConfigurationLockCollection;
    function get_LockAllAttributesExcept: DNConfigurationLockCollection;
    function get_LockElements: DNConfigurationLockCollection;
    function get_LockAllElementsExcept: DNConfigurationLockCollection;
    function get_LockItem: Boolean;
    procedure set_LockItem(value: Boolean);
    function get_ElementInformation: DNElementInformation;
    function get_CurrentConfiguration: DNConfiguration;

  { methods } 

    function IsReadOnly: Boolean;
    function Equals(compareTo: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>Gets or sets the value of the <see cref="T:System.Configuration.IdnElement" />
    ///  configuration setting. </summary>
    ///<returns>A <see cref="T:System.UriIdnScope" />
    ///  that contains the current configuration setting for IDN processing.</returns>
    property Enabled: DNUriIdnScope read get_Enabled write set_Enabled;
    property LockAttributes: DNConfigurationLockCollection read get_LockAttributes;
    property LockAllAttributesExcept: DNConfigurationLockCollection read get_LockAllAttributesExcept;
    property LockElements: DNConfigurationLockCollection read get_LockElements;
    property LockAllElementsExcept: DNConfigurationLockCollection read get_LockAllElementsExcept;
    property LockItem: Boolean read get_LockItem write set_LockItem;
    property ElementInformation: DNElementInformation read get_ElementInformation;
    property CurrentConfiguration: DNConfiguration read get_CurrentConfiguration;
  end;

  TDNIdnElement = class(TDNGenericImport<DNIdnElementClass, DNIdnElement>) end;

  //-------------namespace: System.Configuration----------------
  DNIriParsingElementClass = interface(DNConfigurationElementClass)
  ['{E98F8CBA-1C52-5D95-8489-B43453FCCE4C}']
  { constructors } 

    ///<summary>Initializes a new instance of the <see cref="T:System.Configuration.IriParsingElement" />
    ///  class.</summary>
    {class} function init: DNIriParsingElement;

  end;

  ///<summary>Provides the configuration setting for International Resource Identifier (IRI) processing in the <see cref="T:System.Uri" />
  ///  class.</summary>
  [DNTypeName('System.Configuration.IriParsingElement')]
  DNIriParsingElement = interface(DNConfigurationElement)
  ['{90F982E9-D259-36FD-A5A6-0AF21413AB14}']
  { getters & setters } 

    function get_Enabled: Boolean;
    procedure set_Enabled(value: Boolean);
    function get_LockAttributes: DNConfigurationLockCollection;
    function get_LockAllAttributesExcept: DNConfigurationLockCollection;
    function get_LockElements: DNConfigurationLockCollection;
    function get_LockAllElementsExcept: DNConfigurationLockCollection;
    function get_LockItem: Boolean;
    procedure set_LockItem(value: Boolean);
    function get_ElementInformation: DNElementInformation;
    function get_CurrentConfiguration: DNConfiguration;

  { methods } 

    function IsReadOnly: Boolean;
    function Equals(compareTo: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>Gets or sets the value of the <see cref="T:System.Configuration.IriParsingElement" />
    ///  configuration setting.</summary>
    ///<returns>A Boolean that indicates if International Resource Identifier (IRI) processing is enabled. </returns>
    property Enabled: Boolean read get_Enabled write set_Enabled;
    property LockAttributes: DNConfigurationLockCollection read get_LockAttributes;
    property LockAllAttributesExcept: DNConfigurationLockCollection read get_LockAllAttributesExcept;
    property LockElements: DNConfigurationLockCollection read get_LockElements;
    property LockAllElementsExcept: DNConfigurationLockCollection read get_LockAllElementsExcept;
    property LockItem: Boolean read get_LockItem write set_LockItem;
    property ElementInformation: DNElementInformation read get_ElementInformation;
    property CurrentConfiguration: DNConfiguration read get_CurrentConfiguration;
  end;

  TDNIriParsingElement = class(TDNGenericImport<DNIriParsingElementClass, DNIriParsingElement>) end;

  //-------------namespace: System.Configuration----------------
  DNKeyValueConfigurationElementClass = interface(DNConfigurationElementClass)
  ['{BD2719FC-48BD-545D-9884-28B7B3E94730}']
  { constructors } 

    ///<summary>Initializes a new instance of the <see cref="T:System.Configuration.KeyValueConfigurationElement" />
    ///  class based on the supplied parameters.</summary>
    ///  <param name="key">The key of the <see cref="T:System.Configuration.KeyValueConfigurationElement" />
    ///  .</param>
    ///  <param name="value">The value of the <see cref="T:System.Configuration.KeyValueConfigurationElement" />
    ///  .</param>
    {class} function init(key: string; value: string): DNKeyValueConfigurationElement;

  end;

  ///<summary>Represents a configuration element that contains a key/value pair. </summary>
  [DNTypeName('System.Configuration.KeyValueConfigurationElement')]
  DNKeyValueConfigurationElement = interface(DNConfigurationElement)
  ['{22F37F42-E15B-355E-8D24-3F766136D315}']
  { getters & setters } 

    function get_Key: string;
    function get_Value: string;
    procedure set_Value(value: string);
    function get_LockAttributes: DNConfigurationLockCollection;
    function get_LockAllAttributesExcept: DNConfigurationLockCollection;
    function get_LockElements: DNConfigurationLockCollection;
    function get_LockAllElementsExcept: DNConfigurationLockCollection;
    function get_LockItem: Boolean;
    procedure set_LockItem(value: Boolean);
    function get_ElementInformation: DNElementInformation;
    function get_CurrentConfiguration: DNConfiguration;

  { methods } 

    ///<summary>Gets a value indicating whether the <see cref="T:System.Configuration.ConfigurationElement" />
    ///  object is read-only.</summary>
    ///<returns><see langword="true" />
    ///  if the <see cref="T:System.Configuration.ConfigurationElement" />
    ///  object is read-only; otherwise, <see langword="false" />
    ///  .</returns>
    function IsReadOnly: Boolean;
    ///<summary>Compares the current <see cref="T:System.Configuration.ConfigurationElement" />
    ///  instance to the specified object.</summary>
    ///  <param name="compareTo">The object to compare with.</param>
    ///<returns><see langword="true" />
    ///  if the object to compare with is equal to the current <see cref="T:System.Configuration.ConfigurationElement" />
    ///  instance; otherwise, <see langword="false" />
    ///  . The default is <see langword="false" />
    ///  . </returns>
    function Equals(compareTo: DDN.mscorlib.DNObject): Boolean;
    ///<summary>Gets a unique value representing the current <see cref="T:System.Configuration.ConfigurationElement" />
    ///  instance.</summary>
    ///<returns>A unique value representing the current <see cref="T:System.Configuration.ConfigurationElement" />
    ///  instance.</returns>
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>Gets the key of the <see cref="T:System.Configuration.KeyValueConfigurationElement" />
    ///  object.</summary>
    ///<returns>The key of the <see cref="T:System.Configuration.KeyValueConfigurationElement" />
    ///  .</returns>
    property Key: string read get_Key;
    ///<summary>Gets or sets the value of the <see cref="T:System.Configuration.KeyValueConfigurationElement" />
    ///  object.</summary>
    ///<returns>The value of the <see cref="T:System.Configuration.KeyValueConfigurationElement" />
    ///  .</returns>
    property Value: string read get_Value write set_Value;
    ///<summary>Gets the collection of locked attributes </summary>
    ///<returns>The <see cref="T:System.Configuration.ConfigurationLockCollection" />
    ///  of locked attributes (properties) for the element.</returns>
    property LockAttributes: DNConfigurationLockCollection read get_LockAttributes;
    ///<summary>Gets the collection of locked attributes.</summary>
    ///<returns>The <see cref="T:System.Configuration.ConfigurationLockCollection" />
    ///  of locked attributes (properties) for the element.</returns>
    property LockAllAttributesExcept: DNConfigurationLockCollection read get_LockAllAttributesExcept;
    ///<summary>Gets the collection of locked elements.</summary>
    ///<returns>The <see cref="T:System.Configuration.ConfigurationLockCollection" />
    ///  of locked elements.</returns>
    property LockElements: DNConfigurationLockCollection read get_LockElements;
    ///<summary>Gets the collection of locked elements.</summary>
    ///<returns>The <see cref="T:System.Configuration.ConfigurationLockCollection" />
    ///  of locked elements.</returns>
    property LockAllElementsExcept: DNConfigurationLockCollection read get_LockAllElementsExcept;
    ///<summary>Gets or sets a value indicating whether the element is locked.</summary>
    ///<returns><see langword="true" />
    ///  if the element is locked; otherwise, <see langword="false" />
    ///  . The default is <see langword="false" />
    ///  .</returns>
    ///<exception cref="T:System.Configuration.ConfigurationErrorsException">The element has already been locked at a higher configuration level.</exception>
    property LockItem: Boolean read get_LockItem write set_LockItem;
    ///<summary>Gets an <see cref="T:System.Configuration.ElementInformation" />
    ///  object that contains the non-customizable information and functionality of the <see cref="T:System.Configuration.ConfigurationElement" />
    ///  object. </summary>
    ///<returns>An <see cref="T:System.Configuration.ElementInformation" />
    ///  that contains the non-customizable information and functionality of the <see cref="T:System.Configuration.ConfigurationElement" />
    ///  .</returns>
    property ElementInformation: DNElementInformation read get_ElementInformation;
    ///<summary>Gets a reference to the top-level <see cref="T:System.Configuration.Configuration" />
    ///  instance that represents the configuration hierarchy that the current <see cref="T:System.Configuration.ConfigurationElement" />
    ///  instance belongs to.</summary>
    ///<returns>The top-level <see cref="T:System.Configuration.Configuration" />
    ///  instance that the current <see cref="T:System.Configuration.ConfigurationElement" />
    ///  instance belongs to.</returns>
    property CurrentConfiguration: DNConfiguration read get_CurrentConfiguration;
  end;

  TDNKeyValueConfigurationElement = class(TDNGenericImport<DNKeyValueConfigurationElementClass, DNKeyValueConfigurationElement>) end;

  //-------------namespace: System.Configuration----------------
  DNNameValueConfigurationElementClass = interface(DNConfigurationElementClass)
  ['{9BEB7C0F-D662-5760-AE89-E9DA64BDD10A}']
  { constructors } 

    ///<summary>Initializes a new instance of the <see cref="T:System.Configuration.NameValueConfigurationElement" />
    ///  class based on supplied parameters.</summary>
    ///  <param name="name">The name of the <see cref="T:System.Configuration.NameValueConfigurationElement" />
    ///  object.</param>
    ///  <param name="value">The value of the <see cref="T:System.Configuration.NameValueConfigurationElement" />
    ///  object.</param>
    {class} function init(name: string; value: string): DNNameValueConfigurationElement;

  end;

  ///<summary>A configuration element that contains a <see cref="T:System.String" />
  ///  name and <see cref="T:System.String" />
  ///  value. This class cannot be inherited.</summary>
  [DNTypeName('System.Configuration.NameValueConfigurationElement')]
  DNNameValueConfigurationElement = interface(DNConfigurationElement)
  ['{40F43A65-6A86-3739-98F2-81D6A733906F}']
  { getters & setters } 

    function get_Name: string;
    function get_Value: string;
    procedure set_Value(value: string);
    function get_LockAttributes: DNConfigurationLockCollection;
    function get_LockAllAttributesExcept: DNConfigurationLockCollection;
    function get_LockElements: DNConfigurationLockCollection;
    function get_LockAllElementsExcept: DNConfigurationLockCollection;
    function get_LockItem: Boolean;
    procedure set_LockItem(value: Boolean);
    function get_ElementInformation: DNElementInformation;
    function get_CurrentConfiguration: DNConfiguration;

  { methods } 

    ///<summary>Gets a value indicating whether the <see cref="T:System.Configuration.ConfigurationElement" />
    ///  object is read-only.</summary>
    ///<returns><see langword="true" />
    ///  if the <see cref="T:System.Configuration.ConfigurationElement" />
    ///  object is read-only; otherwise, <see langword="false" />
    ///  .</returns>
    function IsReadOnly: Boolean;
    ///<summary>Compares the current <see cref="T:System.Configuration.ConfigurationElement" />
    ///  instance to the specified object.</summary>
    ///  <param name="compareTo">The object to compare with.</param>
    ///<returns><see langword="true" />
    ///  if the object to compare with is equal to the current <see cref="T:System.Configuration.ConfigurationElement" />
    ///  instance; otherwise, <see langword="false" />
    ///  . The default is <see langword="false" />
    ///  . </returns>
    function Equals(compareTo: DDN.mscorlib.DNObject): Boolean;
    ///<summary>Gets a unique value representing the current <see cref="T:System.Configuration.ConfigurationElement" />
    ///  instance.</summary>
    ///<returns>A unique value representing the current <see cref="T:System.Configuration.ConfigurationElement" />
    ///  instance.</returns>
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>Gets the name of the <see cref="T:System.Configuration.NameValueConfigurationElement" />
    ///  object.</summary>
    ///<returns>The name of the <see cref="T:System.Configuration.NameValueConfigurationElement" />
    ///  object.</returns>
    property Name: string read get_Name;
    ///<summary>Gets or sets the value of the <see cref="T:System.Configuration.NameValueConfigurationElement" />
    ///  object.</summary>
    ///<returns>The value of the <see cref="T:System.Configuration.NameValueConfigurationElement" />
    ///  object.</returns>
    property Value: string read get_Value write set_Value;
    ///<summary>Gets the collection of locked attributes </summary>
    ///<returns>The <see cref="T:System.Configuration.ConfigurationLockCollection" />
    ///  of locked attributes (properties) for the element.</returns>
    property LockAttributes: DNConfigurationLockCollection read get_LockAttributes;
    ///<summary>Gets the collection of locked attributes.</summary>
    ///<returns>The <see cref="T:System.Configuration.ConfigurationLockCollection" />
    ///  of locked attributes (properties) for the element.</returns>
    property LockAllAttributesExcept: DNConfigurationLockCollection read get_LockAllAttributesExcept;
    ///<summary>Gets the collection of locked elements.</summary>
    ///<returns>The <see cref="T:System.Configuration.ConfigurationLockCollection" />
    ///  of locked elements.</returns>
    property LockElements: DNConfigurationLockCollection read get_LockElements;
    ///<summary>Gets the collection of locked elements.</summary>
    ///<returns>The <see cref="T:System.Configuration.ConfigurationLockCollection" />
    ///  of locked elements.</returns>
    property LockAllElementsExcept: DNConfigurationLockCollection read get_LockAllElementsExcept;
    ///<summary>Gets or sets a value indicating whether the element is locked.</summary>
    ///<returns><see langword="true" />
    ///  if the element is locked; otherwise, <see langword="false" />
    ///  . The default is <see langword="false" />
    ///  .</returns>
    ///<exception cref="T:System.Configuration.ConfigurationErrorsException">The element has already been locked at a higher configuration level.</exception>
    property LockItem: Boolean read get_LockItem write set_LockItem;
    ///<summary>Gets an <see cref="T:System.Configuration.ElementInformation" />
    ///  object that contains the non-customizable information and functionality of the <see cref="T:System.Configuration.ConfigurationElement" />
    ///  object. </summary>
    ///<returns>An <see cref="T:System.Configuration.ElementInformation" />
    ///  that contains the non-customizable information and functionality of the <see cref="T:System.Configuration.ConfigurationElement" />
    ///  .</returns>
    property ElementInformation: DNElementInformation read get_ElementInformation;
    ///<summary>Gets a reference to the top-level <see cref="T:System.Configuration.Configuration" />
    ///  instance that represents the configuration hierarchy that the current <see cref="T:System.Configuration.ConfigurationElement" />
    ///  instance belongs to.</summary>
    ///<returns>The top-level <see cref="T:System.Configuration.Configuration" />
    ///  instance that the current <see cref="T:System.Configuration.ConfigurationElement" />
    ///  instance belongs to.</returns>
    property CurrentConfiguration: DNConfiguration read get_CurrentConfiguration;
  end;

  TDNNameValueConfigurationElement = class(TDNGenericImport<DNNameValueConfigurationElementClass, DNNameValueConfigurationElement>) end;

  //-------------namespace: System.Configuration----------------
  DNProtectedProviderSettingsClass = interface(DNConfigurationElementClass)
  ['{16BE2132-A428-5E1C-BD8F-62242FD9A2CF}']
  { constructors } 

    ///<summary>Initializes a new instance of the <see cref="T:System.Configuration.ProtectedProviderSettings" />
    ///  class. </summary>
    {class} function init: DNProtectedProviderSettings;

  end;

  ///<summary>Represents a group of configuration elements that configure the providers for the <see langword="&lt;configProtectedData&gt;" />
  ///  configuration section.</summary>
  [DNTypeName('System.Configuration.ProtectedProviderSettings')]
  DNProtectedProviderSettings = interface(DNConfigurationElement)
  ['{9E6FAD60-CA00-3A2A-89E2-67FC21CFF1B4}']
  { getters & setters } 

    function get_Providers: DNProviderSettingsCollection;
    function get_LockAttributes: DNConfigurationLockCollection;
    function get_LockAllAttributesExcept: DNConfigurationLockCollection;
    function get_LockElements: DNConfigurationLockCollection;
    function get_LockAllElementsExcept: DNConfigurationLockCollection;
    function get_LockItem: Boolean;
    procedure set_LockItem(value: Boolean);
    function get_ElementInformation: DNElementInformation;
    function get_CurrentConfiguration: DNConfiguration;

  { methods } 

    ///<summary>Gets a value indicating whether the <see cref="T:System.Configuration.ConfigurationElement" />
    ///  object is read-only.</summary>
    ///<returns><see langword="true" />
    ///  if the <see cref="T:System.Configuration.ConfigurationElement" />
    ///  object is read-only; otherwise, <see langword="false" />
    ///  .</returns>
    function IsReadOnly: Boolean;
    ///<summary>Compares the current <see cref="T:System.Configuration.ConfigurationElement" />
    ///  instance to the specified object.</summary>
    ///  <param name="compareTo">The object to compare with.</param>
    ///<returns><see langword="true" />
    ///  if the object to compare with is equal to the current <see cref="T:System.Configuration.ConfigurationElement" />
    ///  instance; otherwise, <see langword="false" />
    ///  . The default is <see langword="false" />
    ///  . </returns>
    function Equals(compareTo: DDN.mscorlib.DNObject): Boolean;
    ///<summary>Gets a unique value representing the current <see cref="T:System.Configuration.ConfigurationElement" />
    ///  instance.</summary>
    ///<returns>A unique value representing the current <see cref="T:System.Configuration.ConfigurationElement" />
    ///  instance.</returns>
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>Gets a collection of <see cref="T:System.Configuration.ProviderSettings" />
    ///  objects that represent the properties of the providers for the protected configuration data.</summary>
    ///<returns>A collection of <see cref="T:System.Configuration.ProviderSettings" />
    ///  objects that represent the properties of the providers for the protected configuration data.</returns>
    property Providers: DNProviderSettingsCollection read get_Providers;
    ///<summary>Gets the collection of locked attributes </summary>
    ///<returns>The <see cref="T:System.Configuration.ConfigurationLockCollection" />
    ///  of locked attributes (properties) for the element.</returns>
    property LockAttributes: DNConfigurationLockCollection read get_LockAttributes;
    ///<summary>Gets the collection of locked attributes.</summary>
    ///<returns>The <see cref="T:System.Configuration.ConfigurationLockCollection" />
    ///  of locked attributes (properties) for the element.</returns>
    property LockAllAttributesExcept: DNConfigurationLockCollection read get_LockAllAttributesExcept;
    ///<summary>Gets the collection of locked elements.</summary>
    ///<returns>The <see cref="T:System.Configuration.ConfigurationLockCollection" />
    ///  of locked elements.</returns>
    property LockElements: DNConfigurationLockCollection read get_LockElements;
    ///<summary>Gets the collection of locked elements.</summary>
    ///<returns>The <see cref="T:System.Configuration.ConfigurationLockCollection" />
    ///  of locked elements.</returns>
    property LockAllElementsExcept: DNConfigurationLockCollection read get_LockAllElementsExcept;
    ///<summary>Gets or sets a value indicating whether the element is locked.</summary>
    ///<returns><see langword="true" />
    ///  if the element is locked; otherwise, <see langword="false" />
    ///  . The default is <see langword="false" />
    ///  .</returns>
    ///<exception cref="T:System.Configuration.ConfigurationErrorsException">The element has already been locked at a higher configuration level.</exception>
    property LockItem: Boolean read get_LockItem write set_LockItem;
    ///<summary>Gets an <see cref="T:System.Configuration.ElementInformation" />
    ///  object that contains the non-customizable information and functionality of the <see cref="T:System.Configuration.ConfigurationElement" />
    ///  object. </summary>
    ///<returns>An <see cref="T:System.Configuration.ElementInformation" />
    ///  that contains the non-customizable information and functionality of the <see cref="T:System.Configuration.ConfigurationElement" />
    ///  .</returns>
    property ElementInformation: DNElementInformation read get_ElementInformation;
    ///<summary>Gets a reference to the top-level <see cref="T:System.Configuration.Configuration" />
    ///  instance that represents the configuration hierarchy that the current <see cref="T:System.Configuration.ConfigurationElement" />
    ///  instance belongs to.</summary>
    ///<returns>The top-level <see cref="T:System.Configuration.Configuration" />
    ///  instance that the current <see cref="T:System.Configuration.ConfigurationElement" />
    ///  instance belongs to.</returns>
    property CurrentConfiguration: DNConfiguration read get_CurrentConfiguration;
  end;

  TDNProtectedProviderSettings = class(TDNGenericImport<DNProtectedProviderSettingsClass, DNProtectedProviderSettings>) end;

  //-------------namespace: System.Configuration----------------
  DNProviderSettingsClass = interface(DNConfigurationElementClass)
  ['{038000E3-C084-537D-91F6-A5576280FCD3}']
  { constructors } 

    ///<summary>Initializes a new instance of the <see cref="T:System.Configuration.ProviderSettings" />
    ///  class. </summary>
    {class} function init: DNProviderSettings; overload;
    ///<summary>Initializes a new instance of the <see cref="T:System.Configuration.ProviderSettings" />
    ///  class. </summary>
    ///  <param name="name">The name of the provider to configure settings for.</param>
    ///  <param name="type">The type of the provider to configure settings for.</param>
    {class} function init(name: string; &type: string): DNProviderSettings; overload;

  end;

  ///<summary>Represents the configuration elements associated with a provider.</summary>
  [DNTypeName('System.Configuration.ProviderSettings')]
  DNProviderSettings = interface(DNConfigurationElement)
  ['{73763DAF-1B00-338C-A6C8-F31AC78D2D69}']
  { getters & setters } 

    function get_Name: string;
    procedure set_Name(value: string);
    function get_Type: string;
    procedure set_Type(value: string);
    function get_Parameters: DNNameValueCollection;
    function get_LockAttributes: DNConfigurationLockCollection;
    function get_LockAllAttributesExcept: DNConfigurationLockCollection;
    function get_LockElements: DNConfigurationLockCollection;
    function get_LockAllElementsExcept: DNConfigurationLockCollection;
    function get_LockItem: Boolean;
    procedure set_LockItem(value: Boolean);
    function get_ElementInformation: DNElementInformation;
    function get_CurrentConfiguration: DNConfiguration;

  { methods } 

    ///<summary>Gets a value indicating whether the <see cref="T:System.Configuration.ConfigurationElement" />
    ///  object is read-only.</summary>
    ///<returns><see langword="true" />
    ///  if the <see cref="T:System.Configuration.ConfigurationElement" />
    ///  object is read-only; otherwise, <see langword="false" />
    ///  .</returns>
    function IsReadOnly: Boolean;
    ///<summary>Compares the current <see cref="T:System.Configuration.ConfigurationElement" />
    ///  instance to the specified object.</summary>
    ///  <param name="compareTo">The object to compare with.</param>
    ///<returns><see langword="true" />
    ///  if the object to compare with is equal to the current <see cref="T:System.Configuration.ConfigurationElement" />
    ///  instance; otherwise, <see langword="false" />
    ///  . The default is <see langword="false" />
    ///  . </returns>
    function Equals(compareTo: DDN.mscorlib.DNObject): Boolean;
    ///<summary>Gets a unique value representing the current <see cref="T:System.Configuration.ConfigurationElement" />
    ///  instance.</summary>
    ///<returns>A unique value representing the current <see cref="T:System.Configuration.ConfigurationElement" />
    ///  instance.</returns>
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>Gets or sets the name of the provider configured by this class.</summary>
    ///<returns>The name of the provider.</returns>
    property Name: string read get_Name write set_Name;
    ///<summary>Gets or sets the type of the provider configured by this class.</summary>
    ///<returns>The fully qualified namespace and class name for the type of provider configured by this <see cref="T:System.Configuration.ProviderSettings" />
    ///  instance.</returns>
    property &Type: string read get_Type write set_Type;
    ///<summary>Gets a collection of user-defined parameters for the provider.</summary>
    ///<returns>A <see cref="T:System.Collections.Specialized.NameValueCollection" />
    ///  of parameters for the provider.</returns>
    property Parameters: DNNameValueCollection read get_Parameters;
    ///<summary>Gets the collection of locked attributes </summary>
    ///<returns>The <see cref="T:System.Configuration.ConfigurationLockCollection" />
    ///  of locked attributes (properties) for the element.</returns>
    property LockAttributes: DNConfigurationLockCollection read get_LockAttributes;
    ///<summary>Gets the collection of locked attributes.</summary>
    ///<returns>The <see cref="T:System.Configuration.ConfigurationLockCollection" />
    ///  of locked attributes (properties) for the element.</returns>
    property LockAllAttributesExcept: DNConfigurationLockCollection read get_LockAllAttributesExcept;
    ///<summary>Gets the collection of locked elements.</summary>
    ///<returns>The <see cref="T:System.Configuration.ConfigurationLockCollection" />
    ///  of locked elements.</returns>
    property LockElements: DNConfigurationLockCollection read get_LockElements;
    ///<summary>Gets the collection of locked elements.</summary>
    ///<returns>The <see cref="T:System.Configuration.ConfigurationLockCollection" />
    ///  of locked elements.</returns>
    property LockAllElementsExcept: DNConfigurationLockCollection read get_LockAllElementsExcept;
    ///<summary>Gets or sets a value indicating whether the element is locked.</summary>
    ///<returns><see langword="true" />
    ///  if the element is locked; otherwise, <see langword="false" />
    ///  . The default is <see langword="false" />
    ///  .</returns>
    ///<exception cref="T:System.Configuration.ConfigurationErrorsException">The element has already been locked at a higher configuration level.</exception>
    property LockItem: Boolean read get_LockItem write set_LockItem;
    ///<summary>Gets an <see cref="T:System.Configuration.ElementInformation" />
    ///  object that contains the non-customizable information and functionality of the <see cref="T:System.Configuration.ConfigurationElement" />
    ///  object. </summary>
    ///<returns>An <see cref="T:System.Configuration.ElementInformation" />
    ///  that contains the non-customizable information and functionality of the <see cref="T:System.Configuration.ConfigurationElement" />
    ///  .</returns>
    property ElementInformation: DNElementInformation read get_ElementInformation;
    ///<summary>Gets a reference to the top-level <see cref="T:System.Configuration.Configuration" />
    ///  instance that represents the configuration hierarchy that the current <see cref="T:System.Configuration.ConfigurationElement" />
    ///  instance belongs to.</summary>
    ///<returns>The top-level <see cref="T:System.Configuration.Configuration" />
    ///  instance that the current <see cref="T:System.Configuration.ConfigurationElement" />
    ///  instance belongs to.</returns>
    property CurrentConfiguration: DNConfiguration read get_CurrentConfiguration;
  end;

  TDNProviderSettings = class(TDNGenericImport<DNProviderSettingsClass, DNProviderSettings>) end;

  //-------------namespace: System.Configuration----------------
  DNSchemeSettingElementClass = interface(DNConfigurationElementClass)
  ['{F559964D-485F-5B03-A2AE-AFE884412833}']
  { constructors } 

    ///<summary>Initializes a new instance of the <see cref="T:System.Configuration.SchemeSettingElement" />
    ///  class.</summary>
    {class} function init: DNSchemeSettingElement;

  end;

  ///<summary>Represents an element in a <see cref="T:System.Configuration.SchemeSettingElementCollection" />
  ///  class.</summary>
  [DNTypeName('System.Configuration.SchemeSettingElement')]
  DNSchemeSettingElement = interface(DNConfigurationElement)
  ['{91E70434-27DD-3317-B31C-66DF28B5A25D}']
  { getters & setters } 

    function get_Name: string;
    function get_GenericUriParserOptions: DNGenericUriParserOptions;
    function get_LockAttributes: DNConfigurationLockCollection;
    function get_LockAllAttributesExcept: DNConfigurationLockCollection;
    function get_LockElements: DNConfigurationLockCollection;
    function get_LockAllElementsExcept: DNConfigurationLockCollection;
    function get_LockItem: Boolean;
    procedure set_LockItem(value: Boolean);
    function get_ElementInformation: DNElementInformation;
    function get_CurrentConfiguration: DNConfiguration;

  { methods } 

    function IsReadOnly: Boolean;
    function Equals(compareTo: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>Gets the value of the Name entry from a <see cref="T:System.Configuration.SchemeSettingElement" />
    ///  instance.</summary>
    ///<returns>The protocol used by this schema setting. </returns>
    property Name: string read get_Name;
    ///<summary>Gets the value of the GenericUriParserOptions entry from a <see cref="T:System.Configuration.SchemeSettingElement" />
    ///  instance.</summary>
    ///<returns>The value of GenericUriParserOptions entry.</returns>
    property GenericUriParserOptions: DNGenericUriParserOptions read get_GenericUriParserOptions;
    property LockAttributes: DNConfigurationLockCollection read get_LockAttributes;
    property LockAllAttributesExcept: DNConfigurationLockCollection read get_LockAllAttributesExcept;
    property LockElements: DNConfigurationLockCollection read get_LockElements;
    property LockAllElementsExcept: DNConfigurationLockCollection read get_LockAllElementsExcept;
    property LockItem: Boolean read get_LockItem write set_LockItem;
    property ElementInformation: DNElementInformation read get_ElementInformation;
    property CurrentConfiguration: DNConfiguration read get_CurrentConfiguration;
  end;

  TDNSchemeSettingElement = class(TDNGenericImport<DNSchemeSettingElementClass, DNSchemeSettingElement>) end;

  //-------------namespace: System.Configuration----------------
  DNSettingElementClass = interface(DNConfigurationElementClass)
  ['{C907473F-7E5B-5820-969F-FCCFCDD888B3}']
  { constructors } 

    ///<summary>Initializes a new instance of the <see cref="T:System.Configuration.SettingElement" />
    ///  class.</summary>
    {class} function init: DNSettingElement; overload;
    ///<summary>Initializes a new instance of the <see cref="T:System.Configuration.SettingElement" />
    ///  class based on supplied parameters.</summary>
    ///  <param name="name">The name of the <see cref="T:System.Configuration.SettingElement" />
    ///  object.</param>
    ///  <param name="serializeAs">A <see cref="T:System.Configuration.SettingsSerializeAs" />
    ///  object. This object is an enumeration used as the serialization scheme to store configuration settings.</param>
    {class} function init(name: string; serializeAs: DNSettingsSerializeAs): DNSettingElement; overload;

  end;

  ///<summary>Represents a simplified configuration element used for updating elements in the configuration. This class cannot be inherited.</summary>
  [DNTypeName('System.Configuration.SettingElement')]
  DNSettingElement = interface(DNConfigurationElement)
  ['{638447ED-B653-3B9D-9EAE-5DE46AB192E6}']
  { getters & setters } 

    function get_Name: string;
    procedure set_Name(value: string);
    function get_SerializeAs: DNSettingsSerializeAs;
    procedure set_SerializeAs(value: DNSettingsSerializeAs);
    function get_Value: DNSettingValueElement;
    procedure set_Value(value: DNSettingValueElement);
    function get_LockAttributes: DNConfigurationLockCollection;
    function get_LockAllAttributesExcept: DNConfigurationLockCollection;
    function get_LockElements: DNConfigurationLockCollection;
    function get_LockAllElementsExcept: DNConfigurationLockCollection;
    function get_LockItem: Boolean;
    procedure set_LockItem(value: Boolean);
    function get_ElementInformation: DNElementInformation;
    function get_CurrentConfiguration: DNConfiguration;

  { methods } 

    ///<summary>Compares the current <see cref="T:System.Configuration.SettingElement" />
    ///  instance to the specified object.</summary>
    ///  <param name="settings">The object to compare with.</param>
    ///<returns><see langword="true" />
    ///  if the <see cref="T:System.Configuration.SettingElement" />
    ///  instance is equal to the specified object; otherwise, <see langword="false" />
    ///  .</returns>
    function Equals(settings: DDN.mscorlib.DNObject): Boolean;
    ///<summary>Gets a unique value representing the <see cref="T:System.Configuration.SettingElement" />
    ///  current instance.</summary>
    ///<returns>A unique value representing the <see cref="T:System.Configuration.SettingElement" />
    ///  current instance.</returns>
    function GetHashCode: Int32;
    function IsReadOnly: Boolean;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>Gets or sets the name of the <see cref="T:System.Configuration.SettingElement" />
    ///  object.</summary>
    ///<returns>The name of the <see cref="T:System.Configuration.SettingElement" />
    ///  object.</returns>
    property Name: string read get_Name write set_Name;
    ///<summary>Gets or sets the serialization mechanism used to persist the values of the <see cref="T:System.Configuration.SettingElement" />
    ///  object.</summary>
    ///<returns>A <see cref="T:System.Configuration.SettingsSerializeAs" />
    ///  object.</returns>
    property SerializeAs: DNSettingsSerializeAs read get_SerializeAs write set_SerializeAs;
    ///<summary>Gets or sets the value of a <see cref="T:System.Configuration.SettingElement" />
    ///  object by using a <see cref="T:System.Configuration.SettingValueElement" />
    ///  object.</summary>
    ///<returns>A <see cref="T:System.Configuration.SettingValueElement" />
    ///  object containing the value of the <see cref="T:System.Configuration.SettingElement" />
    ///  object.</returns>
    property Value: DNSettingValueElement read get_Value write set_Value;
    property LockAttributes: DNConfigurationLockCollection read get_LockAttributes;
    property LockAllAttributesExcept: DNConfigurationLockCollection read get_LockAllAttributesExcept;
    property LockElements: DNConfigurationLockCollection read get_LockElements;
    property LockAllElementsExcept: DNConfigurationLockCollection read get_LockAllElementsExcept;
    property LockItem: Boolean read get_LockItem write set_LockItem;
    property ElementInformation: DNElementInformation read get_ElementInformation;
    property CurrentConfiguration: DNConfiguration read get_CurrentConfiguration;
  end;

  TDNSettingElement = class(TDNGenericImport<DNSettingElementClass, DNSettingElement>) end;

  //-------------namespace: System.Configuration----------------
  DNSettingValueElementClass = interface(DNConfigurationElementClass)
  ['{C2B8B64E-18BD-5352-8481-8065EF56ACAF}']
  { constructors } 

    ///<summary>Initializes a new instance of the <see cref="T:System.Configuration.SettingValueElement" />
    ///  class. </summary>
    {class} function init: DNSettingValueElement;

  end;

  ///<summary>Contains the XML representing the serialized value of the setting. This class cannot be inherited.</summary>
  [DNTypeName('System.Configuration.SettingValueElement')]
  DNSettingValueElement = interface(DNConfigurationElement)
  ['{E2C20012-EFC3-3337-9E67-29509DF4D6CF}']
  { getters & setters } 

    function get_ValueXml: DDN.System.Xml.DNXmlNode;
    procedure set_ValueXml(value: DDN.System.Xml.DNXmlNode);
    function get_LockAttributes: DNConfigurationLockCollection;
    function get_LockAllAttributesExcept: DNConfigurationLockCollection;
    function get_LockElements: DNConfigurationLockCollection;
    function get_LockAllElementsExcept: DNConfigurationLockCollection;
    function get_LockItem: Boolean;
    procedure set_LockItem(value: Boolean);
    function get_ElementInformation: DNElementInformation;
    function get_CurrentConfiguration: DNConfiguration;

  { methods } 

    ///<summary>Compares the current <see cref="T:System.Configuration.SettingValueElement" />
    ///  instance to the specified object.</summary>
    ///  <param name="settingValue">The object to compare.</param>
    ///<returns><see langword="true" />
    ///  if the <see cref="T:System.Configuration.SettingValueElement" />
    ///  instance is equal to the specified object; otherwise, <see langword="false" />
    ///  .</returns>
    function Equals(settingValue: DDN.mscorlib.DNObject): Boolean;
    ///<summary>Gets a unique value representing the <see cref="T:System.Configuration.SettingValueElement" />
    ///  current instance.</summary>
    ///<returns>A unique value representing the <see cref="T:System.Configuration.SettingValueElement" />
    ///  current instance.</returns>
    function GetHashCode: Int32;
    function IsReadOnly: Boolean;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>Gets or sets the value of a <see cref="T:System.Configuration.SettingValueElement" />
    ///  object by using an <see cref="T:System.Xml.XmlNode" />
    ///  object.</summary>
    ///<returns>An <see cref="T:System.Xml.XmlNode" />
    ///  object containing the value of a <see cref="T:System.Configuration.SettingElement" />
    ///  .</returns>
    property ValueXml: DDN.System.Xml.DNXmlNode read get_ValueXml write set_ValueXml;
    property LockAttributes: DNConfigurationLockCollection read get_LockAttributes;
    property LockAllAttributesExcept: DNConfigurationLockCollection read get_LockAllAttributesExcept;
    property LockElements: DNConfigurationLockCollection read get_LockElements;
    property LockAllElementsExcept: DNConfigurationLockCollection read get_LockAllElementsExcept;
    property LockItem: Boolean read get_LockItem write set_LockItem;
    property ElementInformation: DNElementInformation read get_ElementInformation;
    property CurrentConfiguration: DNConfiguration read get_CurrentConfiguration;
  end;

  TDNSettingValueElement = class(TDNGenericImport<DNSettingValueElementClass, DNSettingValueElement>) end;

  //-------------namespace: System.Configuration----------------
  DNConfigurationElementPropertyClass = interface(DDN.mscorlib.DNObjectClass)
  ['{01D7B788-7689-5773-BF4E-558A53ADF006}']
  { constructors } 

    ///<summary>Initializes a new instance of the <see cref="T:System.Configuration.ConfigurationElementProperty" />
    ///  class, based on a supplied parameter.</summary>
    ///  <param name="validator">A <see cref="T:System.Configuration.ConfigurationValidatorBase" />
    ///  object.</param>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="validator" />
    ///  is <see langword="null" />
    ///  .</exception>
    {class} function init(validator: DNConfigurationValidatorBase): DNConfigurationElementProperty;

  end;

  ///<summary>Specifies the property of a configuration element. This class cannot be inherited.</summary>
  [DNTypeName('System.Configuration.ConfigurationElementProperty')]
  DNConfigurationElementProperty = interface(DDN.mscorlib.DNObject)
  ['{FCF77043-4CB3-3E5E-A233-42635BC8C180}']
  { getters & setters } 

    function get_Validator: DNConfigurationValidatorBase;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>Gets a <see cref="T:System.Configuration.ConfigurationValidatorBase" />
    ///  object used to validate the <see cref="T:System.Configuration.ConfigurationElementProperty" />
    ///  object.</summary>
    ///<returns>A <see cref="T:System.Configuration.ConfigurationValidatorBase" />
    ///  object.</returns>
    property Validator: DNConfigurationValidatorBase read get_Validator;
  end;

  TDNConfigurationElementProperty = class(TDNGenericImport<DNConfigurationElementPropertyClass, DNConfigurationElementProperty>) end;

  //-------------namespace: System.Configuration----------------
  DNConfigurationFileMapClass = interface(DNObjectClass)
  ['{47427EE1-AEAB-5A83-B682-9C913C51C527}']
  { constructors } 

    ///<summary>Initializes a new instance of the <see cref="T:System.Configuration.ConfigurationFileMap" />
    ///  class. </summary>
    {class} function init: DNConfigurationFileMap; overload;
    ///<summary>Initializes a new instance of the <see cref="T:System.Configuration.ConfigurationFileMap" />
    ///  class based on the supplied parameter.</summary>
    ///  <param name="machineConfigFilename">The name of the machine configuration file.</param>
    {class} function init(machineConfigFilename: string): DNConfigurationFileMap; overload;

  end;

  ///<summary>Defines the configuration file mapping for the machine configuration file. </summary>
  [DNTypeName('System.Configuration.ConfigurationFileMap')]
  DNConfigurationFileMap = interface(DDN.mscorlib.DNICloneable)
  ['{62D68A2D-C489-3E1C-8D39-834A33185601}']
  { getters & setters } 

    function get_MachineConfigFilename: string;
    procedure set_MachineConfigFilename(value: string);

  { methods } 

    ///<summary>Creates a copy of the existing <see cref="T:System.Configuration.ConfigurationFileMap" />
    ///  object.</summary>
    ///<returns>A <see cref="T:System.Configuration.ConfigurationFileMap" />
    ///  object.</returns>
    function Clone: DDN.mscorlib.DNObject;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>Gets or sets the name of the machine configuration file name.</summary>
    ///<returns>The machine configuration file name.</returns>
    property MachineConfigFilename: string read get_MachineConfigFilename write set_MachineConfigFilename;
  end;

  TDNConfigurationFileMap = class(TDNGenericImport<DNConfigurationFileMapClass, DNConfigurationFileMap>) end;

  //-------------namespace: System.Configuration----------------
  DNExeConfigurationFileMapClass = interface(DNConfigurationFileMapClass)
  ['{FFF16626-3AF9-5C8F-BCD5-928D1255EF67}']
  { constructors } 

    ///<summary>Initializes a new instance of the <see cref="T:System.Configuration.ExeConfigurationFileMap" />
    ///  class.</summary>
    {class} function init: DNExeConfigurationFileMap; overload;
    ///<summary>Initializes a new instance of the <see cref="T:System.Configuration.ExeConfigurationFileMap" />
    ///  class by using the specified machine configuration file name.</summary>
    ///  <param name="machineConfigFileName">The name of the machine configuration file that includes the complete physical path (for example, c:\Windows\Microsoft.NET\Framework\v2.0.50727\CONFIG\machine.config).</param>
    {class} function init(machineConfigFileName: string): DNExeConfigurationFileMap; overload;

  end;

  ///<summary>Defines the configuration file mapping for an .exe application. This class cannot be inherited.</summary>
  [DNTypeName('System.Configuration.ExeConfigurationFileMap')]
  DNExeConfigurationFileMap = interface(DNConfigurationFileMap)
  ['{91C9DC4A-FEF5-3A4C-9B71-A787AB4166AF}']
  { getters & setters } 

    function get_ExeConfigFilename: string;
    procedure set_ExeConfigFilename(value: string);
    function get_RoamingUserConfigFilename: string;
    procedure set_RoamingUserConfigFilename(value: string);
    function get_LocalUserConfigFilename: string;
    procedure set_LocalUserConfigFilename(value: string);
    function get_MachineConfigFilename: string;
    procedure set_MachineConfigFilename(value: string);

  { methods } 

    ///<summary>Creates a copy of the existing <see cref="T:System.Configuration.ExeConfigurationFileMap" />
    ///  object.</summary>
    ///<returns>An <see cref="T:System.Configuration.ExeConfigurationFileMap" />
    ///  object.</returns>
    function Clone: DDN.mscorlib.DNObject;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>Gets or sets the name of the configuration file.</summary>
    ///<returns>The configuration file name.</returns>
    property ExeConfigFilename: string read get_ExeConfigFilename write set_ExeConfigFilename;
    ///<summary>Gets or sets the name of the configuration file for the roaming user.</summary>
    ///<returns>The configuration file name.</returns>
    property RoamingUserConfigFilename: string read get_RoamingUserConfigFilename write set_RoamingUserConfigFilename;
    ///<summary>Gets or sets the name of the configuration file for the local user.</summary>
    ///<returns>The configuration file name.</returns>
    property LocalUserConfigFilename: string read get_LocalUserConfigFilename write set_LocalUserConfigFilename;
    ///<summary>Gets or sets the name of the machine configuration file name.</summary>
    ///<returns>The machine configuration file name.</returns>
    property MachineConfigFilename: string read get_MachineConfigFilename write set_MachineConfigFilename;
  end;

  TDNExeConfigurationFileMap = class(TDNGenericImport<DNExeConfigurationFileMapClass, DNExeConfigurationFileMap>) end;

  //-------------namespace: System.Configuration----------------
  DNConfigurationLocationClass = interface(DDN.mscorlib.DNObjectClass)
  ['{7AF5EC40-3B23-5759-BE73-182A8BFE6DD4}']
  end;

  ///<summary>Represents a <see langword="location" />
  ///  element within a configuration file.</summary>
  [DNTypeName('System.Configuration.ConfigurationLocation')]
  DNConfigurationLocation = interface(DDN.mscorlib.DNObject)
  ['{D3F04A7E-FE47-370E-B073-185EF789EAA6}']
  { getters & setters } 

    function get_Path: string;

  { methods } 

    ///<summary>Creates an instance of a Configuration object.</summary>
    ///<returns>A Configuration object.</returns>
    function OpenConfiguration: DNConfiguration;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>Gets the relative path to the resource whose configuration settings are represented by this <see cref="T:System.Configuration.ConfigurationLocation" />
    ///  object.</summary>
    ///<returns>The relative path to the resource whose configuration settings are represented by this <see cref="T:System.Configuration.ConfigurationLocation" />
    ///  .</returns>
    property Path: string read get_Path;
  end;

  TDNConfigurationLocation = class(TDNGenericImport<DNConfigurationLocationClass, DNConfigurationLocation>) end;

  //-------------namespace: System.Configuration----------------
  DNConfigurationLockCollectionClass = interface(DNObjectClass)
  ['{93E9F554-D478-5288-9DE9-EE15D67B1418}']
  end;

  ///<summary>Contains a collection of locked configuration objects. This class cannot be inherited.</summary>
  [DNTypeName('System.Configuration.ConfigurationLockCollection')]
  DNConfigurationLockCollection = interface(DDN.mscorlib.DNIEnumerable)
  ['{F3E926E9-A2BF-3F5E-B2BF-8191A53E3DB0}']
  { getters & setters } 

    function get_Count: Int32;
    function get_IsSynchronized: Boolean;
    function get_SyncRoot: DDN.mscorlib.DNObject;
    function get_IsModified: Boolean;
    function get_AttributeList: string;
    function get_HasParentElements: Boolean;

  { methods } 

    ///<summary>Gets an <see cref="T:System.Collections.IEnumerator" />
    ///  object, which is used to iterate through this <see cref="T:System.Configuration.ConfigurationLockCollection" />
    ///  collection.</summary>
    ///<returns>An <see cref="T:System.Collections.IEnumerator" />
    ///  object.</returns>
    function GetEnumerator: DDN.mscorlib.DNIEnumerator;
    ///<summary>Clears all configuration objects from the collection.</summary>
    procedure Clear;
    ///<summary>Verifies whether a specific configuration object is locked.</summary>
    ///  <param name="name">The name of the configuration object to verify.</param>
    ///<returns><see langword="true" />
    ///  if the <see cref="T:System.Configuration.ConfigurationLockCollection" />
    ///  contains the specified configuration object; otherwise, <see langword="false" />
    ///  .</returns>
    function &Contains(name: string): Boolean;
    ///<summary>Copies the entire <see cref="T:System.Configuration.ConfigurationLockCollection" />
    ///  collection to a compatible one-dimensional <see cref="T:System.Array" />
    ///  , starting at the specified index of the target array.</summary>
    ///  <param name="array">A one-dimensional <see cref="T:System.Array" />
    ///  that is the destination of the elements copied from the <see cref="T:System.Configuration.ConfigurationLockCollection" />
    ///  . The <see cref="T:System.Array" />
    ///  must have zero-based indexing.</param>
    ///  <param name="index">The zero-based index in <paramref name="array" />
    ///  at which copying begins.</param>
    procedure CopyTo(&array: TArray<string>; index: Int32);
    ///<summary>Locks a configuration object by adding it to the collection.</summary>
    ///  <param name="name">The name of the configuration object.</param>
    ///<exception cref="T:System.Configuration.ConfigurationErrorsException">Occurs when the <paramref name="name" />
    ///  does not match an existing configuration object within the collection.</exception>
    procedure Add(name: string);
    ///<summary>Removes a configuration object from the collection.</summary>
    ///  <param name="name">The name of the configuration object.</param>
    ///<exception cref="T:System.Configuration.ConfigurationErrorsException">Occurs when the <paramref name="name" />
    ///  does not match an existing configuration object within the collection.</exception>
    procedure Remove(name: string);
    ///<summary>Verifies whether a specific configuration object is read-only.</summary>
    ///  <param name="name">The name of the configuration object to verify.</param>
    ///<returns><see langword="true" />
    ///  if the specified configuration object in the <see cref="T:System.Configuration.ConfigurationLockCollection" />
    ///  collection is read-only; otherwise, <see langword="false" />
    ///  .</returns>
    ///<exception cref="T:System.Configuration.ConfigurationErrorsException">The specified configuration object is not in the collection.</exception>
    function IsReadOnly(name: string): Boolean;
    ///<summary>Locks a set of configuration objects based on the supplied list.</summary>
    ///  <param name="attributeList">A comma-delimited string.</param>
    ///<exception cref="T:System.Configuration.ConfigurationErrorsException">Occurs when an item in the <paramref name="attributeList" />
    ///  parameter is not a valid lockable configuration attribute.</exception>
    procedure SetFromList(attributeList: string);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>Gets the number of locked configuration objects contained in the collection.</summary>
    ///<returns>The number of locked configuration objects contained in the collection.</returns>
    property Count: Int32 read get_Count;
    ///<summary>Gets a value specifying whether the collection is synchronized.</summary>
    ///<returns><see langword="true" />
    ///  if the <see cref="T:System.Configuration.ConfigurationLockCollection" />
    ///  collection is synchronized; otherwise, <see langword="false" />
    ///  .</returns>
    property IsSynchronized: Boolean read get_IsSynchronized;
    ///<summary>Gets an object used to synchronize access to this <see cref="T:System.Configuration.ConfigurationLockCollection" />
    ///  collection.</summary>
    ///<returns>An object used to synchronize access to this <see cref="T:System.Configuration.ConfigurationLockCollection" />
    ///  collection.</returns>
    property SyncRoot: DDN.mscorlib.DNObject read get_SyncRoot;
    ///<summary>Gets a value specifying whether the collection has been modified.</summary>
    ///<returns><see langword="true" />
    ///  if the <see cref="T:System.Configuration.ConfigurationLockCollection" />
    ///  collection has been modified; otherwise, <see langword="false" />
    ///  .</returns>
    property IsModified: Boolean read get_IsModified;
    ///<summary>Gets a list of configuration objects contained in the collection.</summary>
    ///<returns>A comma-delimited string that lists the lock configuration objects in the collection.</returns>
    property AttributeList: string read get_AttributeList;
    ///<summary>Gets a value specifying whether the collection of locked objects has parent elements.</summary>
    ///<returns><see langword="true" />
    ///  if the <see cref="T:System.Configuration.ConfigurationLockCollection" />
    ///  collection has parent elements; otherwise, <see langword="false" />
    ///  .</returns>
    property HasParentElements: Boolean read get_HasParentElements;
  end;

  TDNConfigurationLockCollection = class(TDNGenericImport<DNConfigurationLockCollectionClass, DNConfigurationLockCollection>) end;

  //-------------namespace: System.Configuration----------------
  DNConfigurationManagerClass = interface(DDN.mscorlib.DNObjectClass)
  ['{B12C5AC2-42D2-5237-9098-387F8805C392}']
  { static getter & setter } 

    {class} function get_AppSettings: DNNameValueCollection;
    {class} function get_ConnectionStrings: DNConnectionStringSettingsCollection;

  { static methods } 

    ///<summary>Retrieves a specified configuration section for the current application's default configuration.</summary>
    ///  <param name="sectionName">The configuration section path and name.</param>
    ///<returns>The specified <see cref="T:System.Configuration.ConfigurationSection" />
    ///  object, or <see langword="null" />
    ///  if the section does not exist.</returns>
    ///<exception cref="T:System.Configuration.ConfigurationErrorsException">A configuration file could not be loaded.</exception>
    {class} function GetSection(sectionName: string): DDN.mscorlib.DNObject;
    ///<summary>Refreshes the named section so the next time that it is retrieved it will be re-read from disk.</summary>
    ///  <param name="sectionName">The configuration section name or the configuration path and section name of the section to refresh.</param>
    {class} procedure RefreshSection(sectionName: string);
    ///<summary>Opens the machine configuration file on the current computer as a <see cref="T:System.Configuration.Configuration" />
    ///  object.</summary>
    ///<returns>A <see cref="T:System.Configuration.Configuration" />
    ///  object.</returns>
    ///<exception cref="T:System.Configuration.ConfigurationErrorsException">A configuration file could not be loaded.</exception>
    {class} function OpenMachineConfiguration: DNConfiguration;
    ///<summary>Opens the machine configuration file as a <see cref="T:System.Configuration.Configuration" />
    ///  object that uses the specified file mapping.</summary>
    ///  <param name="fileMap">An <see cref="T:System.Configuration.ExeConfigurationFileMap" />
    ///  object that references configuration file to use instead of the application default configuration file.</param>
    ///<returns>A <see cref="T:System.Configuration.Configuration" />
    ///  object.</returns>
    ///<exception cref="T:System.Configuration.ConfigurationErrorsException">A configuration file could not be loaded.</exception>
    {class} function OpenMappedMachineConfiguration(fileMap: DNConfigurationFileMap): DNConfiguration;
    ///<summary>Opens the configuration file for the current application as a <see cref="T:System.Configuration.Configuration" />
    ///  object.</summary>
    ///  <param name="userLevel">The <see cref="T:System.Configuration.ConfigurationUserLevel" />
    ///  for which you are opening the configuration.</param>
    ///<returns>A <see cref="T:System.Configuration.Configuration" />
    ///  object.</returns>
    ///<exception cref="T:System.Configuration.ConfigurationErrorsException">A configuration file could not be loaded.</exception>
    {class} function OpenExeConfiguration(userLevel: DNConfigurationUserLevel): DNConfiguration; overload;
    ///<summary>Opens the specified client configuration file as a <see cref="T:System.Configuration.Configuration" />
    ///  object.</summary>
    ///  <param name="exePath">The path of the executable (exe) file.</param>
    ///<returns>A <see cref="T:System.Configuration.Configuration" />
    ///  object.</returns>
    ///<exception cref="T:System.Configuration.ConfigurationErrorsException">A configuration file could not be loaded.</exception>
    {class} function OpenExeConfiguration(exePath: string): DNConfiguration; overload;
    ///<summary>Opens the specified client configuration file as a <see cref="T:System.Configuration.Configuration" />
    ///  object that uses the specified file mapping and user level.</summary>
    ///  <param name="fileMap">An <see cref="T:System.Configuration.ExeConfigurationFileMap" />
    ///  object that references configuration file to use instead of the application default configuration file.</param>
    ///  <param name="userLevel">The <see cref="T:System.Configuration.ConfigurationUserLevel" />
    ///  object for which you are opening the configuration.</param>
    ///<returns>The configuration object.</returns>
    ///<exception cref="T:System.Configuration.ConfigurationErrorsException">A configuration file could not be loaded.</exception>
    {class} function OpenMappedExeConfiguration(fileMap: DNExeConfigurationFileMap; userLevel: DNConfigurationUserLevel): DNConfiguration; overload;
    ///<summary>Opens the specified client configuration file as a <see cref="T:System.Configuration.Configuration" />
    ///  object that uses the specified file mapping, user level, and preload option.</summary>
    ///  <param name="fileMap">An <see cref="T:System.Configuration.ExeConfigurationFileMap" />
    ///  object that references the configuration file to use instead of the default application configuration file.</param>
    ///  <param name="userLevel">The <see cref="T:System.Configuration.ConfigurationUserLevel" />
    ///  object for which you are opening the configuration.</param>
    ///  <param name="preLoad"><see langword="true" />
    ///  to preload all section groups and sections; otherwise, <see langword="false" />
    ///  .</param>
    ///<returns>The configuration object.</returns>
    ///<exception cref="T:System.Configuration.ConfigurationErrorsException">A configuration file could not be loaded.</exception>
    {class} function OpenMappedExeConfiguration(fileMap: DNExeConfigurationFileMap; userLevel: DNConfigurationUserLevel; preLoad: Boolean): DNConfiguration; overload;

  { static propertys } 

    ///<summary>Gets the <see cref="T:System.Configuration.AppSettingsSection" />
    ///  data for the current application's default configuration.</summary>
    ///<returns>Returns a <see cref="T:System.Collections.Specialized.NameValueCollection" />
    ///  object that contains the contents of the <see cref="T:System.Configuration.AppSettingsSection" />
    ///  object for the current application's default configuration. </returns>
    ///<exception cref="T:System.Configuration.ConfigurationErrorsException">Could not retrieve a <see cref="T:System.Collections.Specialized.NameValueCollection" />
    ///  object with the application settings data.</exception>
    {class} property AppSettings: DNNameValueCollection read get_AppSettings;
    ///<summary>Gets the <see cref="T:System.Configuration.ConnectionStringsSection" />
    ///  data for the current application's default configuration.</summary>
    ///<returns>Returns a <see cref="T:System.Configuration.ConnectionStringSettingsCollection" />
    ///  object that contains the contents of the <see cref="T:System.Configuration.ConnectionStringsSection" />
    ///  object for the current application's default configuration. </returns>
    ///<exception cref="T:System.Configuration.ConfigurationErrorsException">Could not retrieve a <see cref="T:System.Configuration.ConnectionStringSettingsCollection" />
    ///  object.</exception>
    {class} property ConnectionStrings: DNConnectionStringSettingsCollection read get_ConnectionStrings;
  end;

  ///<summary>Provides access to configuration files for client applications. This class cannot be inherited.</summary>
  [DNTypeName('System.Configuration.ConfigurationManager')]
  DNConfigurationManager = interface(DDN.mscorlib.DNObject)
  ['{5CCAE36B-9254-3DA0-897D-26990740943E}']
  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNConfigurationManager = class(TDNGenericImport<DNConfigurationManagerClass, DNConfigurationManager>) end;

  //-------------namespace: System.Configuration----------------
  DNConfigurationPropertyClass = interface(DDN.mscorlib.DNObjectClass)
  ['{44D5B5E6-D2DB-5B71-B29A-D6AC0A2A5E00}']
  { constructors } 

    ///<summary>Initializes a new instance of the <see cref="T:System.Configuration.ConfigurationProperty" />
    ///  class. </summary>
    ///  <param name="name">The name of the configuration entity. </param>
    ///  <param name="type">The type of the configuration entity. </param>
    {class} function init(name: string; &type: DDN.mscorlib.DNType): DNConfigurationProperty; overload;
    ///<summary>Initializes a new instance of the <see cref="T:System.Configuration.ConfigurationProperty" />
    ///  class. </summary>
    ///  <param name="name">The name of the configuration entity. </param>
    ///  <param name="type">The type of the configuration entity. </param>
    ///  <param name="defaultValue">The default value of the configuration entity. </param>
    {class} function init(name: string; &type: DDN.mscorlib.DNType; defaultValue: DDN.mscorlib.DNObject): DNConfigurationProperty; overload;
    ///<summary>Initializes a new instance of the <see cref="T:System.Configuration.ConfigurationProperty" />
    ///  class. </summary>
    ///  <param name="name">The name of the configuration entity. </param>
    ///  <param name="type">The type of the configuration entity. </param>
    ///  <param name="defaultValue">The default value of the configuration entity. </param>
    ///  <param name="options">One of the <see cref="T:System.Configuration.ConfigurationPropertyOptions" />
    ///  enumeration values.</param>
    {class} function init(name: string; &type: DDN.mscorlib.DNType; defaultValue: DDN.mscorlib.DNObject; options: DNConfigurationPropertyOptions): DNConfigurationProperty; overload;
    ///<summary>Initializes a new instance of the <see cref="T:System.Configuration.ConfigurationProperty" />
    ///  class. </summary>
    ///  <param name="name">The name of the configuration entity. </param>
    ///  <param name="type">The type of the configuration entity.</param>
    ///  <param name="defaultValue">The default value of the configuration entity. </param>
    ///  <param name="typeConverter">The type of the converter to apply.</param>
    ///  <param name="validator">The validator to use. </param>
    ///  <param name="options">One of the <see cref="T:System.Configuration.ConfigurationPropertyOptions" />
    ///  enumeration values. </param>
    {class} function init(name: string; &type: DDN.mscorlib.DNType; defaultValue: DDN.mscorlib.DNObject; typeConverter: DNTypeConverter; validator: DNConfigurationValidatorBase; options: DNConfigurationPropertyOptions): DNConfigurationProperty; overload;
    ///<summary>Initializes a new instance of the <see cref="T:System.Configuration.ConfigurationProperty" />
    ///  class. </summary>
    ///  <param name="name">The name of the configuration entity. </param>
    ///  <param name="type">The type of the configuration entity. </param>
    ///  <param name="defaultValue">The default value of the configuration entity. </param>
    ///  <param name="typeConverter">The type of the converter to apply.</param>
    ///  <param name="validator">The validator to use. </param>
    ///  <param name="options">One of the <see cref="T:System.Configuration.ConfigurationPropertyOptions" />
    ///  enumeration values. </param>
    ///  <param name="description">The description of the configuration entity. </param>
    {class} function init(name: string; &type: DDN.mscorlib.DNType; defaultValue: DDN.mscorlib.DNObject; typeConverter: DNTypeConverter; validator: DNConfigurationValidatorBase; options: DNConfigurationPropertyOptions; description: string): DNConfigurationProperty; overload;

  end;

  ///<summary>Represents an attribute or a child of a configuration element. This class cannot be inherited.</summary>
  [DNTypeName('System.Configuration.ConfigurationProperty')]
  DNConfigurationProperty = interface(DDN.mscorlib.DNObject)
  ['{C24A86BF-C3A0-35BC-A2B4-2CDD6BC67126}']
  { getters & setters } 

    function get_Name: string;
    function get_Description: string;
    function get_Type: DDN.mscorlib.DNType;
    function get_DefaultValue: DDN.mscorlib.DNObject;
    function get_IsRequired: Boolean;
    function get_IsKey: Boolean;
    function get_IsDefaultCollection: Boolean;
    function get_IsTypeStringTransformationRequired: Boolean;
    function get_IsAssemblyStringTransformationRequired: Boolean;
    function get_IsVersionCheckRequired: Boolean;
    function get_Converter: DNTypeConverter;
    function get_Validator: DNConfigurationValidatorBase;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>Gets the name of this <see cref="T:System.Configuration.ConfigurationProperty" />
    ///  .</summary>
    ///<returns>The name of the <see cref="T:System.Configuration.ConfigurationProperty" />
    ///  .</returns>
    property Name: string read get_Name;
    ///<summary>Gets the description associated with the <see cref="T:System.Configuration.ConfigurationProperty" />
    ///  .</summary>
    ///<returns>A <see langword="string" />
    ///  value that describes the property.</returns>
    property Description: string read get_Description;
    ///<summary>Gets the type of this <see cref="T:System.Configuration.ConfigurationProperty" />
    ///  object.</summary>
    ///<returns>A <see cref="T:System.Type" />
    ///  representing the type of this <see cref="T:System.Configuration.ConfigurationProperty" />
    ///  object.</returns>
    property &Type: DDN.mscorlib.DNType read get_Type;
    ///<summary>Gets the default value for this <see cref="T:System.Configuration.ConfigurationProperty" />
    ///  property.</summary>
    ///<returns>An <see cref="T:System.Object" />
    ///  that can be cast to the type specified by the <see cref="P:System.Configuration.ConfigurationProperty.Type" />
    ///  property.</returns>
    property DefaultValue: DDN.mscorlib.DNObject read get_DefaultValue;
    ///<summary>Gets a value indicating whether this <see cref="T:System.Configuration.ConfigurationProperty" />
    ///  is required.</summary>
    ///<returns><see langword="true" />
    ///  if the <see cref="T:System.Configuration.ConfigurationProperty" />
    ///  is required; otherwise, <see langword="false" />
    ///  . The default is <see langword="false" />
    ///  .</returns>
    property IsRequired: Boolean read get_IsRequired;
    ///<summary>Gets a value indicating whether this <see cref="T:System.Configuration.ConfigurationProperty" />
    ///  is the key for the containing <see cref="T:System.Configuration.ConfigurationElement" />
    ///  object.</summary>
    ///<returns><see langword="true" />
    ///  if this <see cref="T:System.Configuration.ConfigurationProperty" />
    ///  object is the key for the containing element; otherwise, <see langword="false" />
    ///  . The default is <see langword="false" />
    ///  .</returns>
    property IsKey: Boolean read get_IsKey;
    ///<summary>Gets a value that indicates whether the property is the default collection of an element. </summary>
    ///<returns><see langword="true" />
    ///  if the property is the default collection of an element; otherwise, <see langword="false" />
    ///  .</returns>
    property IsDefaultCollection: Boolean read get_IsDefaultCollection;
    ///<summary>Indicates whether the type name for the configuration property requires transformation when it is serialized for an earlier version of the .NET Framework.</summary>
    ///<returns><see langword="true" />
    ///  if the property requires type-name transformation; otherwise, <see langword="false" />
    ///  .</returns>
    property IsTypeStringTransformationRequired: Boolean read get_IsTypeStringTransformationRequired;
    ///<summary>Indicates whether the assembly name for the configuration property requires transformation when it is serialized for an earlier version of the .NET Framework.</summary>
    ///<returns><see langword="true" />
    ///  if the property requires assembly name transformation; otherwise, <see langword="false" />
    ///  .</returns>
    property IsAssemblyStringTransformationRequired: Boolean read get_IsAssemblyStringTransformationRequired;
    ///<summary>Indicates whether the configuration property's parent configuration section is queried at serialization time to determine whether the configuration property should be serialized into XML.</summary>
    ///<returns><see langword="true" />
    ///  if the parent configuration section should be queried; otherwise, <see langword="false" />
    ///  .</returns>
    property IsVersionCheckRequired: Boolean read get_IsVersionCheckRequired;
    ///<summary>Gets the <see cref="T:System.ComponentModel.TypeConverter" />
    ///  used to convert this <see cref="T:System.Configuration.ConfigurationProperty" />
    ///  into an XML representation for writing to the configuration file.</summary>
    ///<returns>A <see cref="T:System.ComponentModel.TypeConverter" />
    ///  used to convert this <see cref="T:System.Configuration.ConfigurationProperty" />
    ///  into an XML representation for writing to the configuration file.</returns>
    ///<exception cref="T:System.Exception">This <see cref="T:System.Configuration.ConfigurationProperty" />
    ///  cannot be converted. </exception>
    property Converter: DNTypeConverter read get_Converter;
    ///<summary>Gets the <see cref="T:System.Configuration.ConfigurationValidatorAttribute" />
    ///  , which is used to validate this <see cref="T:System.Configuration.ConfigurationProperty" />
    ///  object.</summary>
    ///<returns>The <see cref="T:System.Configuration.ConfigurationValidatorBase" />
    ///  validator, which is used to validate this <see cref="T:System.Configuration.ConfigurationProperty" />
    ///  .</returns>
    property Validator: DNConfigurationValidatorBase read get_Validator;
  end;

  TDNConfigurationProperty = class(TDNGenericImport<DNConfigurationPropertyClass, DNConfigurationProperty>) end;

  //-------------namespace: System.Configuration----------------
  DNConfigurationPropertyCollectionClass = interface(DNObjectClass)
  ['{09922DBA-F4AF-57AD-938A-B4A3258AA86F}']
  { constructors } 

    ///<summary>Initializes a new instance of the <see cref="T:System.Configuration.ConfigurationPropertyCollection" />
    ///  class. </summary>
    {class} function init: DNConfigurationPropertyCollection;

  end;

  ///<summary>Represents a collection of configuration-element properties.</summary>
  [DNTypeName('System.Configuration.ConfigurationPropertyCollection')]
  DNConfigurationPropertyCollection = interface(DDN.mscorlib.DNICollection)
  ['{370CA48C-3258-3719-8CC0-050E2395B6CB}']
  { getters & setters } 

    function get_Count: Int32;
    function get_IsSynchronized: Boolean;
    function get_SyncRoot: DDN.mscorlib.DNObject;
    function get_Item(name: string): DNConfigurationProperty;

  { methods } 

    ///<summary>Copies this ConfigurationPropertyCollection to an array.</summary>
    ///  <param name="array">Array to which to copy.</param>
    ///  <param name="index">Index at which to begin copying.</param>
    procedure CopyTo(&array: TArray<DNConfigurationProperty>; index: Int32);
    ///<summary>Gets the <see cref="T:System.Collections.IEnumerator" />
    ///  object as it applies to the collection.</summary>
    ///<returns>The <see cref="T:System.Collections.IEnumerator" />
    ///  object as it applies to the collection</returns>
    function GetEnumerator: DDN.mscorlib.DNIEnumerator;
    ///<summary>Specifies whether the configuration property is contained in this collection.</summary>
    ///  <param name="name">An identifier for the <see cref="T:System.Configuration.ConfigurationProperty" />
    ///  to verify. </param>
    ///<returns><see langword="true" />
    ///  if the specified <see cref="T:System.Configuration.ConfigurationProperty" />
    ///  is contained in the collection; otherwise, <see langword="false" />
    ///  .</returns>
    function &Contains(name: string): Boolean;
    ///<summary>Adds a configuration property to the collection.</summary>
    ///  <param name="property">The <see cref="T:System.Configuration.ConfigurationProperty" />
    ///  to add. </param>
    procedure Add(&property: DNConfigurationProperty);
    ///<summary>Removes a configuration property from the collection.</summary>
    ///  <param name="name">The <see cref="T:System.Configuration.ConfigurationProperty" />
    ///  to remove. </param>
    ///<returns><see langword="true" />
    ///  if the specified <see cref="T:System.Configuration.ConfigurationProperty" />
    ///  was removed; otherwise, <see langword="false" />
    ///  .</returns>
    function Remove(name: string): Boolean;
    ///<summary>Removes all configuration property objects from the collection.</summary>
    procedure Clear;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>Gets the number of properties in the collection.</summary>
    ///<returns>The number of properties in the collection.</returns>
    property Count: Int32 read get_Count;
    ///<summary>Gets a value indicating whether access to the collection is synchronized (thread safe).</summary>
    ///<returns><see langword="true" />
    ///  if access to the <see cref="T:System.Configuration.ConfigurationPropertyCollection" />
    ///  is synchronized; otherwise, <see langword="false" />
    ///  .</returns>
    property IsSynchronized: Boolean read get_IsSynchronized;
    ///<summary>Gets the object to synchronize access to the collection.</summary>
    ///<returns>The object to synchronize access to the collection.</returns>
    property SyncRoot: DDN.mscorlib.DNObject read get_SyncRoot;
    property Item[name: string]: DNConfigurationProperty read get_Item; default;
  end;

  TDNConfigurationPropertyCollection = class(TDNGenericImport<DNConfigurationPropertyCollectionClass, DNConfigurationPropertyCollection>) end;

  //-------------namespace: System.Configuration----------------
  DNConfigurationSectionGroupClass = interface(DDN.mscorlib.DNObjectClass)
  ['{0B422D1B-089D-5A68-BAF7-FCE518EE947A}']
  { constructors } 

    ///<summary>Initializes a new instance of the <see cref="T:System.Configuration.ConfigurationSectionGroup" />
    ///  class. </summary>
    {class} function init: DNConfigurationSectionGroup;

  end;

  ///<summary>Represents a group of related sections within a configuration file.</summary>
  [DNTypeName('System.Configuration.ConfigurationSectionGroup')]
  DNConfigurationSectionGroup = interface(DDN.mscorlib.DNObject)
  ['{43493E08-E461-33E9-9454-68655A5CEBEC}']
  { getters & setters } 

    function get_IsDeclared: Boolean;
    function get_IsDeclarationRequired: Boolean;
    function get_SectionGroupName: string;
    function get_Name: string;
    function get_Type: string;
    procedure set_Type(value: string);
    function get_Sections: DNConfigurationSectionCollection;
    function get_SectionGroups: DNConfigurationSectionGroupCollection;

  { methods } 

    ///<summary>Forces the declaration for this <see cref="T:System.Configuration.ConfigurationSectionGroup" />
    ///  object.</summary>
    procedure ForceDeclaration; overload;
    ///<summary>Forces the declaration for this <see cref="T:System.Configuration.ConfigurationSectionGroup" />
    ///  object.</summary>
    ///  <param name="force"><see langword="true" />
    ///  if the <see cref="T:System.Configuration.ConfigurationSectionGroup" />
    ///  object must be written to the file; otherwise, <see langword="false" />
    ///  .</param>
    ///<exception cref="T:System.InvalidOperationException">The <see cref="T:System.Configuration.ConfigurationSectionGroup" />
    ///  object is the root section group.- or -The <see cref="T:System.Configuration.ConfigurationSectionGroup" />
    ///  object has a location.</exception>
    procedure ForceDeclaration(force: Boolean); overload;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>Gets a value that indicates whether this <see cref="T:System.Configuration.ConfigurationSectionGroup" />
    ///  object is declared.</summary>
    ///<returns><see langword="true" />
    ///  if this <see cref="T:System.Configuration.ConfigurationSectionGroup" />
    ///  is declared; otherwise, <see langword="false" />
    ///  . The default is <see langword="false" />
    ///  .</returns>
    property IsDeclared: Boolean read get_IsDeclared;
    ///<summary>Gets a value that indicates whether this <see cref="T:System.Configuration.ConfigurationSectionGroup" />
    ///  object declaration is required. </summary>
    ///<returns><see langword="true" />
    ///  if this <see cref="T:System.Configuration.ConfigurationSectionGroup" />
    ///  declaration is required; otherwise, <see langword="false" />
    ///  .</returns>
    property IsDeclarationRequired: Boolean read get_IsDeclarationRequired;
    ///<summary>Gets the section group name associated with this <see cref="T:System.Configuration.ConfigurationSectionGroup" />
    ///  .</summary>
    ///<returns>The section group name of this <see cref="T:System.Configuration.ConfigurationSectionGroup" />
    ///  object.</returns>
    property SectionGroupName: string read get_SectionGroupName;
    ///<summary>Gets the name property of this <see cref="T:System.Configuration.ConfigurationSectionGroup" />
    ///  object.</summary>
    ///<returns>The name property of this <see cref="T:System.Configuration.ConfigurationSectionGroup" />
    ///  object.</returns>
    property Name: string read get_Name;
    ///<summary>Gets or sets the type for this <see cref="T:System.Configuration.ConfigurationSectionGroup" />
    ///  object.</summary>
    ///<returns>The type of this <see cref="T:System.Configuration.ConfigurationSectionGroup" />
    ///  object.</returns>
    ///<exception cref="T:System.InvalidOperationException">The <see cref="T:System.Configuration.ConfigurationSectionGroup" />
    ///  object is the root section group.- or -The <see cref="T:System.Configuration.ConfigurationSectionGroup" />
    ///  object has a location.</exception><exception cref="T:System.Configuration.ConfigurationErrorsException">The section or group is already defined at another level.</exception>
    property &Type: string read get_Type write set_Type;
    ///<summary>Gets a <see cref="T:System.Configuration.ConfigurationSectionCollection" />
    ///  object that contains all of <see cref="T:System.Configuration.ConfigurationSection" />
    ///  objects within this <see cref="T:System.Configuration.ConfigurationSectionGroup" />
    ///  object.</summary>
    ///<returns>A <see cref="T:System.Configuration.ConfigurationSectionCollection" />
    ///  object that contains all the <see cref="T:System.Configuration.ConfigurationSection" />
    ///  objects within this <see cref="T:System.Configuration.ConfigurationSectionGroup" />
    ///  object.</returns>
    property Sections: DNConfigurationSectionCollection read get_Sections;
    ///<summary>Gets a <see cref="T:System.Configuration.ConfigurationSectionGroupCollection" />
    ///  object that contains all the <see cref="T:System.Configuration.ConfigurationSectionGroup" />
    ///  objects that are children of this <see cref="T:System.Configuration.ConfigurationSectionGroup" />
    ///  object.</summary>
    ///<returns>A <see cref="T:System.Configuration.ConfigurationSectionGroupCollection" />
    ///  object that contains all the <see cref="T:System.Configuration.ConfigurationSectionGroup" />
    ///  objects that are children of this <see cref="T:System.Configuration.ConfigurationSectionGroup" />
    ///  object.</returns>
    property SectionGroups: DNConfigurationSectionGroupCollection read get_SectionGroups;
  end;

  TDNConfigurationSectionGroup = class(TDNGenericImport<DNConfigurationSectionGroupClass, DNConfigurationSectionGroup>) end;

  //-------------namespace: System.Configuration----------------
  DNApplicationSettingsGroupClass = interface(DNConfigurationSectionGroupClass)
  ['{1876C393-7906-59B7-A4F8-62E045F92436}']
  { constructors } 

    ///<summary>Initializes a new instance of the <see cref="T:System.Configuration.ApplicationSettingsGroup" />
    ///  class.</summary>
    {class} function init: DNApplicationSettingsGroup;

  end;

  ///<summary>Represents a grouping of related application settings sections within a configuration file. This class cannot be inherited.</summary>
  [DNTypeName('System.Configuration.ApplicationSettingsGroup')]
  DNApplicationSettingsGroup = interface(DNConfigurationSectionGroup)
  ['{EE39549D-F4EC-3571-951F-4A91EADD37BA}']
  { getters & setters } 

    function get_IsDeclared: Boolean;
    function get_IsDeclarationRequired: Boolean;
    function get_SectionGroupName: string;
    function get_Name: string;
    function get_Type: string;
    procedure set_Type(value: string);
    function get_Sections: DNConfigurationSectionCollection;
    function get_SectionGroups: DNConfigurationSectionGroupCollection;

  { methods } 

    procedure ForceDeclaration; overload;
    procedure ForceDeclaration(force: Boolean); overload;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property IsDeclared: Boolean read get_IsDeclared;
    property IsDeclarationRequired: Boolean read get_IsDeclarationRequired;
    property SectionGroupName: string read get_SectionGroupName;
    property Name: string read get_Name;
    property &Type: string read get_Type write set_Type;
    property Sections: DNConfigurationSectionCollection read get_Sections;
    property SectionGroups: DNConfigurationSectionGroupCollection read get_SectionGroups;
  end;

  TDNApplicationSettingsGroup = class(TDNGenericImport<DNApplicationSettingsGroupClass, DNApplicationSettingsGroup>) end;

  //-------------namespace: System.Configuration----------------
  DNUserSettingsGroupClass = interface(DNConfigurationSectionGroupClass)
  ['{35BE31F1-9E63-597B-B1B0-A3F4E077A510}']
  { constructors } 

    ///<summary>Initializes a new instance of the <see cref="T:System.Configuration.UserSettingsGroup" />
    ///  class.</summary>
    {class} function init: DNUserSettingsGroup;

  end;

  ///<summary>Represents a grouping of related user settings sections within a configuration file. This class cannot be inherited.</summary>
  [DNTypeName('System.Configuration.UserSettingsGroup')]
  DNUserSettingsGroup = interface(DNConfigurationSectionGroup)
  ['{4385C2C6-C79A-3D70-94B2-B23F81A4DCE1}']
  { getters & setters } 

    function get_IsDeclared: Boolean;
    function get_IsDeclarationRequired: Boolean;
    function get_SectionGroupName: string;
    function get_Name: string;
    function get_Type: string;
    procedure set_Type(value: string);
    function get_Sections: DNConfigurationSectionCollection;
    function get_SectionGroups: DNConfigurationSectionGroupCollection;

  { methods } 

    procedure ForceDeclaration; overload;
    procedure ForceDeclaration(force: Boolean); overload;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property IsDeclared: Boolean read get_IsDeclared;
    property IsDeclarationRequired: Boolean read get_IsDeclarationRequired;
    property SectionGroupName: string read get_SectionGroupName;
    property Name: string read get_Name;
    property &Type: string read get_Type write set_Type;
    property Sections: DNConfigurationSectionCollection read get_Sections;
    property SectionGroups: DNConfigurationSectionGroupCollection read get_SectionGroups;
  end;

  TDNUserSettingsGroup = class(TDNGenericImport<DNUserSettingsGroupClass, DNUserSettingsGroup>) end;

  //-------------namespace: System.Configuration----------------
  DNConfigurationSettingsClass = interface(DDN.mscorlib.DNObjectClass)
  ['{15A4AC31-046D-5CAC-BAE8-E907C0CB758E}']
  { static getter & setter } 

    {class} function get_AppSettings: DNNameValueCollection;

  { static methods } 

    ///<summary>Returns the <see cref="T:System.Configuration.ConfigurationSection" />
    ///  object for the passed configuration section name and path.</summary>
    ///  <param name="sectionName">A configuration name and path, such as "system.net/settings".</param>
    ///<returns>The <see cref="T:System.Configuration.ConfigurationSection" />
    ///  object for the passed configuration section name and path.The <see cref="T:System.Configuration.ConfigurationSettings" />
    ///  class provides backward compatibility only. You should use the <see cref="T:System.Configuration.ConfigurationManager" />
    ///  class or <see cref="T:System.Web.Configuration.WebConfigurationManager" />
    ///  class instead.</returns>
    ///<exception cref="T:System.Configuration.ConfigurationException">Unable to retrieve the requested section.</exception>
    {class} function GetConfig(sectionName: string): DDN.mscorlib.DNObject;

  { static propertys } 

    ///<summary>Gets a read-only <see cref="T:System.Collections.Specialized.NameValueCollection" />
    ///  of the application settings section of the configuration file.</summary>
    ///<returns>A read-only <see cref="T:System.Collections.Specialized.NameValueCollection" />
    ///  of the application settings section from the configuration file.</returns>
    {class} property AppSettings: DNNameValueCollection read get_AppSettings;
  end;

  ///<summary>Provides runtime versions 1.0 and 1.1 support for reading configuration sections and common configuration settings.</summary>
  [DNTypeName('System.Configuration.ConfigurationSettings')]
  DNConfigurationSettings = interface(DDN.mscorlib.DNObject)
  ['{6573BFC0-CCA6-3033-B6FB-03F93E2C0EE3}']
  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNConfigurationSettings = class(TDNGenericImport<DNConfigurationSettingsClass, DNConfigurationSettings>) end;

  //-------------namespace: System.Configuration----------------
  DNConfigurationValidatorBaseClass = interface(DDN.mscorlib.DNObjectClass)
  ['{0E873FC7-70A0-5571-99FE-E7B8FE011407}']
  end;

  ///<summary>Acts as a base class for deriving a validation class so that a value of an object can be verified.</summary>
  [DNTypeName('System.Configuration.ConfigurationValidatorBase')]
  DNConfigurationValidatorBase = interface(DDN.mscorlib.DNObject)
  ['{AAAF2860-120E-393D-8451-49B2A6FEE2FA}']
  { methods } 

    ///<summary>Determines whether an object can be validated based on type.</summary>
    ///  <param name="type">The object type.</param>
    ///<returns><see langword="true" />
    ///  if the <paramref name="type" />
    ///  parameter value matches the expected <see langword="type" />
    ///  ; otherwise, <see langword="false" />
    ///  . </returns>
    function CanValidate(&type: DDN.mscorlib.DNType): Boolean;
    ///<summary>Determines whether the value of an object is valid. </summary>
    ///  <param name="value">The object value.</param>
    procedure Validate(value: DDN.mscorlib.DNObject);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNConfigurationValidatorBase = class(TDNGenericImport<DNConfigurationValidatorBaseClass, DNConfigurationValidatorBase>) end;

  //-------------namespace: System.Configuration----------------
  DNCallbackValidatorClass = interface(DNConfigurationValidatorBaseClass)
  ['{5A423A17-46F8-52BD-8F6B-E67E8E334D8B}']
  { constructors } 

    ///<summary>Initializes a new instance of the <see cref="T:System.Configuration.CallbackValidator" />
    ///  class.</summary>
    ///  <param name="type">The type of object that will be validated.</param>
    ///  <param name="callback">The <see cref="T:System.Configuration.ValidatorCallback" />
    ///  used as the delegate.</param>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="type " />
    ///  is <see langword="null" />
    ///  .</exception>
    {class} function init(&type: DDN.mscorlib.DNType; callback: DNValidatorCallback): DNCallbackValidator;

  end;

  ///<summary>Provides dynamic validation of an object.</summary>
  [DNTypeName('System.Configuration.CallbackValidator')]
  DNCallbackValidator = interface(DNConfigurationValidatorBase)
  ['{CF17DCFA-FB7A-3FF7-8718-CF908127CE1F}']
  { methods } 

    ///<summary>Determines whether the type of the object can be validated.</summary>
    ///  <param name="type">The type of object.</param>
    ///<returns><see langword="true" />
    ///  if the <see langword="type" />
    ///  parameter matches the type used as the first parameter when creating an instance of <see cref="T:System.Configuration.CallbackValidator" />
    ///  ; otherwise, <see langword="false" />
    ///  . </returns>
    function CanValidate(&type: DDN.mscorlib.DNType): Boolean;
    ///<summary>Determines whether the value of an object is valid.</summary>
    ///  <param name="value">The value of an object.</param>
    procedure Validate(value: DDN.mscorlib.DNObject);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNCallbackValidator = class(TDNGenericImport<DNCallbackValidatorClass, DNCallbackValidator>) end;

  //-------------namespace: System.Configuration----------------
  DNDefaultValidatorClass = interface(DNConfigurationValidatorBaseClass)
  ['{858BA1C8-B574-5AA1-8288-21781CF35ED3}']
  { constructors } 

    ///<summary>Initializes a new instance of the <see cref="T:System.Configuration.DefaultValidator" />
    ///  class. </summary>
    {class} function init: DNDefaultValidator;

  end;

  ///<summary>Provides validation of an object. This class cannot be inherited.</summary>
  [DNTypeName('System.Configuration.DefaultValidator')]
  DNDefaultValidator = interface(DNConfigurationValidatorBase)
  ['{D28AB233-4684-3B70-A58E-7BE1E9FE03FC}']
  { methods } 

    ///<summary>Determines whether an object can be validated, based on type.</summary>
    ///  <param name="type">The object type.</param>
    ///<returns><see langword="true" />
    ///  for all types being validated. </returns>
    function CanValidate(&type: DDN.mscorlib.DNType): Boolean;
    ///<summary>Determines whether the value of an object is valid. </summary>
    ///  <param name="value">The object value.</param>
    procedure Validate(value: DDN.mscorlib.DNObject);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNDefaultValidator = class(TDNGenericImport<DNDefaultValidatorClass, DNDefaultValidator>) end;

  //-------------namespace: System.Configuration----------------
  DNIntegerValidatorClass = interface(DNConfigurationValidatorBaseClass)
  ['{1F23DA3E-A5A6-5C62-9D7D-B145F3017E89}']
  { constructors } 

    ///<summary>Initializes a new instance of the <see cref="T:System.Configuration.IntegerValidator" />
    ///  class. </summary>
    ///  <param name="minValue">An <see cref="T:System.Int32" />
    ///  object that specifies the minimum value.</param>
    ///  <param name="maxValue">An <see cref="T:System.Int32" />
    ///  object that specifies the maximum value.</param>
    {class} function init(minValue: Int32; maxValue: Int32): DNIntegerValidator; overload;
    ///<summary>Initializes a new instance of the <see cref="T:System.Configuration.IntegerValidator" />
    ///  class. </summary>
    ///  <param name="minValue">An <see cref="T:System.Int32" />
    ///  object that specifies the minimum value.</param>
    ///  <param name="maxValue">An <see cref="T:System.Int32" />
    ///  object that specifies the maximum value.</param>
    ///  <param name="rangeIsExclusive"><see langword="true" />
    ///  to specify that the validation range is exclusive. Inclusive means the value to be validated must be within the specified range; exclusive means that it must be below the minimum or above the maximum.</param>
    {class} function init(minValue: Int32; maxValue: Int32; rangeIsExclusive: Boolean): DNIntegerValidator; overload;
    ///<summary>Initializes a new instance of the <see cref="T:System.Configuration.IntegerValidator" />
    ///  class. </summary>
    ///  <param name="minValue">An <see cref="T:System.Int32" />
    ///  object that specifies the minimum length of the integer value.</param>
    ///  <param name="maxValue">An <see cref="T:System.Int32" />
    ///  object that specifies the maximum length of the integer value.</param>
    ///  <param name="rangeIsExclusive">A <see cref="T:System.Boolean" />
    ///  value that specifies whether the validation range is exclusive.</param>
    ///  <param name="resolution">An <see cref="T:System.Int32" />
    ///  object that specifies a value that must be matched.</param>
    ///<exception cref="T:System.ArgumentOutOfRangeException"><paramref name="resolution" />
    ///  is less than <see langword="0" />
    ///  .- or -
    ///  <paramref name="minValue" />
    ///  is greater than <paramref name="maxValue" />
    ///  .</exception>
    {class} function init(minValue: Int32; maxValue: Int32; rangeIsExclusive: Boolean; resolution: Int32): DNIntegerValidator; overload;

  end;

  ///<summary>Provides validation of an <see cref="T:System.Int32" />
  ///  value.</summary>
  [DNTypeName('System.Configuration.IntegerValidator')]
  DNIntegerValidator = interface(DNConfigurationValidatorBase)
  ['{F09080C1-ACBC-366C-8667-D6148FD7252F}']
  { methods } 

    ///<summary>Determines whether the type of the object can be validated.</summary>
    ///  <param name="type">The type of the object.</param>
    ///<returns><see langword="true" />
    ///  if the <paramref name="type" />
    ///  parameter matches an <see cref="T:System.Int32" />
    ///  value; otherwise, <see langword="false" />
    ///  . </returns>
    function CanValidate(&type: DDN.mscorlib.DNType): Boolean;
    ///<summary>Determines whether the value of an object is valid.</summary>
    ///  <param name="value">The value to be validated.</param>
    procedure Validate(value: DDN.mscorlib.DNObject);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNIntegerValidator = class(TDNGenericImport<DNIntegerValidatorClass, DNIntegerValidator>) end;

  //-------------namespace: System.Configuration----------------
  DNLongValidatorClass = interface(DNConfigurationValidatorBaseClass)
  ['{3C79BB12-B268-5400-81D5-870844B63ED3}']
  { constructors } 

    ///<summary>Initializes a new instance of the <see cref="T:System.Configuration.LongValidator" />
    ///  class. </summary>
    ///  <param name="minValue">An <see cref="T:System.Int64" />
    ///  value that specifies the minimum length of the <see langword="long" />
    ///  value.</param>
    ///  <param name="maxValue">An <see cref="T:System.Int64" />
    ///  value that specifies the maximum length of the <see langword="long" />
    ///  value.</param>
    {class} function init(minValue: Int64; maxValue: Int64): DNLongValidator; overload;
    ///<summary>Initializes a new instance of the <see cref="T:System.Configuration.LongValidator" />
    ///  class. </summary>
    ///  <param name="minValue">An <see cref="T:System.Int64" />
    ///  value that specifies the minimum length of the <see langword="long" />
    ///  value.</param>
    ///  <param name="maxValue">An <see cref="T:System.Int64" />
    ///  value that specifies the maximum length of the <see langword="long" />
    ///  value.</param>
    ///  <param name="rangeIsExclusive">A <see cref="T:System.Boolean" />
    ///  value that specifies whether the validation range is exclusive.</param>
    {class} function init(minValue: Int64; maxValue: Int64; rangeIsExclusive: Boolean): DNLongValidator; overload;
    ///<summary>Initializes a new instance of the <see cref="T:System.Configuration.LongValidator" />
    ///  class. </summary>
    ///  <param name="minValue">An <see cref="T:System.Int64" />
    ///  value that specifies the minimum length of the <see langword="long" />
    ///  value.</param>
    ///  <param name="maxValue">An <see cref="T:System.Int64" />
    ///  value that specifies the maximum length of the <see langword="long" />
    ///  value.</param>
    ///  <param name="rangeIsExclusive">A <see cref="T:System.Boolean" />
    ///  value that specifies whether the validation range is exclusive.</param>
    ///  <param name="resolution">An <see cref="T:System.Int64" />
    ///  value that specifies a specific value that must be matched.</param>
    ///<exception cref="T:System.ArgumentOutOfRangeException"><paramref name="resolution" />
    ///  is equal to or less than <see langword="0" />
    ///  .- or -
    ///  <paramref name="maxValue" />
    ///  is less than <paramref name="minValue" />
    ///  .</exception>
    {class} function init(minValue: Int64; maxValue: Int64; rangeIsExclusive: Boolean; resolution: Int64): DNLongValidator; overload;

  end;

  ///<summary>Provides validation of an <see cref="T:System.Int64" />
  ///  value.</summary>
  [DNTypeName('System.Configuration.LongValidator')]
  DNLongValidator = interface(DNConfigurationValidatorBase)
  ['{E974C40C-A9BE-33CA-8F20-AE558489E4A4}']
  { methods } 

    ///<summary>Determines whether the type of the object can be validated.</summary>
    ///  <param name="type">The type of object.</param>
    ///<returns><see langword="true" />
    ///  if the <paramref name="type" />
    ///  parameter matches an <see cref="T:System.Int64" />
    ///  value; otherwise, <see langword="false" />
    ///  . </returns>
    function CanValidate(&type: DDN.mscorlib.DNType): Boolean;
    ///<summary>Determines whether the value of an object is valid.</summary>
    ///  <param name="value">The value of an object.</param>
    procedure Validate(value: DDN.mscorlib.DNObject);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNLongValidator = class(TDNGenericImport<DNLongValidatorClass, DNLongValidator>) end;

  //-------------namespace: System.Configuration----------------
  DNPositiveTimeSpanValidatorClass = interface(DNConfigurationValidatorBaseClass)
  ['{3EE4CF93-7BA2-5AC7-A0BA-3303C556B566}']
  { constructors } 

    ///<summary>Initializes a new instance of the <see cref="T:System.Configuration.PositiveTimeSpanValidator" />
    ///  class. </summary>
    {class} function init: DNPositiveTimeSpanValidator;

  end;

  ///<summary>Provides validation of a <see cref="T:System.TimeSpan" />
  ///  object. This class cannot be inherited.</summary>
  [DNTypeName('System.Configuration.PositiveTimeSpanValidator')]
  DNPositiveTimeSpanValidator = interface(DNConfigurationValidatorBase)
  ['{213A78B6-C655-3AF1-8B02-178917F4836C}']
  { methods } 

    ///<summary>Determines whether the object type can be validated.</summary>
    ///  <param name="type">The object type.</param>
    ///<returns><see langword="true" />
    ///  if the <paramref name="type" />
    ///  parameter matches a <see cref="T:System.TimeSpan" />
    ///  object; otherwise, <see langword="false" />
    ///  . </returns>
    function CanValidate(&type: DDN.mscorlib.DNType): Boolean;
    ///<summary>Determines whether the value of an object is valid.</summary>
    ///  <param name="value">The value of an object.</param>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="value" />
    ///  is <see langword="null" />
    ///  .</exception><exception cref="T:System.ArgumentException"><paramref name="value" />
    ///  cannot be resolved as a positive <see cref="T:System.TimeSpan" />
    ///  value.</exception>
    procedure Validate(value: DDN.mscorlib.DNObject);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNPositiveTimeSpanValidator = class(TDNGenericImport<DNPositiveTimeSpanValidatorClass, DNPositiveTimeSpanValidator>) end;

  //-------------namespace: System.Configuration----------------
  DNRegexStringValidatorClass = interface(DNConfigurationValidatorBaseClass)
  ['{440BF81B-A83A-547B-AFBA-1C6CB79A059E}']
  { constructors } 

    ///<summary>Initializes a new instance of the <see cref="T:System.Configuration.RegexStringValidator" />
    ///  class. </summary>
    ///  <param name="regex">A string that specifies a regular expression.</param>
    ///<exception cref="T:System.ArgumentException"><paramref name="regex" />
    ///  is null or an empty string ("").</exception>
    {class} function init(regex: string): DNRegexStringValidator;

  end;

  ///<summary>Provides validation of a string based on the rules provided by a regular expression.</summary>
  [DNTypeName('System.Configuration.RegexStringValidator')]
  DNRegexStringValidator = interface(DNConfigurationValidatorBase)
  ['{7770424E-DB8D-372D-BF11-A81EF60947B1}']
  { methods } 

    ///<summary>Determines whether the type of the object can be validated.</summary>
    ///  <param name="type">The type of object.</param>
    ///<returns><see langword="true" />
    ///  if the <paramref name="type" />
    ///  parameter matches a string; otherwise, <see langword="false" />
    ///  . </returns>
    function CanValidate(&type: DDN.mscorlib.DNType): Boolean;
    ///<summary>Determines whether the value of an object is valid.</summary>
    ///  <param name="value">The value of an object.</param>
    ///<exception cref="T:System.ArgumentException"><paramref name="value" />
    ///  does not conform to the parameters of the <see cref="T:System.Text.RegularExpressions.Regex" />
    ///  class.</exception>
    procedure Validate(value: DDN.mscorlib.DNObject);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNRegexStringValidator = class(TDNGenericImport<DNRegexStringValidatorClass, DNRegexStringValidator>) end;

  //-------------namespace: System.Configuration----------------
  DNStringValidatorClass = interface(DNConfigurationValidatorBaseClass)
  ['{6A5C49A4-D04D-57BF-B0E7-556CBA377988}']
  { constructors } 

    ///<summary>Initializes a new instance of the <see cref="T:System.Configuration.StringValidator" />
    ///  class, based on a supplied parameter.</summary>
    ///  <param name="minLength">An integer that specifies the minimum length of the string value.</param>
    {class} function init(minLength: Int32): DNStringValidator; overload;
    ///<summary>Initializes a new instance of the <see cref="T:System.Configuration.StringValidator" />
    ///  class, based on supplied parameters.</summary>
    ///  <param name="minLength">An integer that specifies the minimum length of the string value.</param>
    ///  <param name="maxLength">An integer that specifies the maximum length of the string value.</param>
    {class} function init(minLength: Int32; maxLength: Int32): DNStringValidator; overload;
    ///<summary>Initializes a new instance of the <see cref="T:System.Configuration.StringValidator" />
    ///  class, based on supplied parameters.</summary>
    ///  <param name="minLength">An integer that specifies the minimum length of the string value.</param>
    ///  <param name="maxLength">An integer that specifies the maximum length of the string value.</param>
    ///  <param name="invalidCharacters">A string that represents invalid characters. </param>
    {class} function init(minLength: Int32; maxLength: Int32; invalidCharacters: string): DNStringValidator; overload;

  end;

  ///<summary>Provides validation of a string.</summary>
  [DNTypeName('System.Configuration.StringValidator')]
  DNStringValidator = interface(DNConfigurationValidatorBase)
  ['{83C6E9D3-F524-3962-BF1B-79AB129B9331}']
  { methods } 

    ///<summary>Determines whether an object can be validated based on type.</summary>
    ///  <param name="type">The object type.</param>
    ///<returns><see langword="true" />
    ///  if the <paramref name="type" />
    ///  parameter matches a string; otherwise, <see langword="false" />
    ///  . </returns>
    function CanValidate(&type: DDN.mscorlib.DNType): Boolean;
    ///<summary>Determines whether the value of an object is valid. </summary>
    ///  <param name="value">The object value.</param>
    ///<exception cref="T:System.ArgumentException"><paramref name="value" />
    ///  is less than <paramref name="minValue" />
    ///  or greater than <paramref name="maxValue" />
    ///  as defined in the constructor.- or -
    ///  <paramref name="value" />
    ///  contains invalid characters.</exception>
    procedure Validate(value: DDN.mscorlib.DNObject);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNStringValidator = class(TDNGenericImport<DNStringValidatorClass, DNStringValidator>) end;

  //-------------namespace: System.Configuration----------------
  DNSubclassTypeValidatorClass = interface(DNConfigurationValidatorBaseClass)
  ['{4E6E93F6-3F07-5AB3-977D-4005BFD2DC8D}']
  { constructors } 

    ///<summary>Initializes a new instance of the <see cref="T:System.Configuration.SubclassTypeValidator" />
    ///  class. </summary>
    ///  <param name="baseClass">The base class to validate against.</param>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="baseClass" />
    ///  is <see langword="null" />
    ///  .</exception>
    {class} function init(baseClass: DDN.mscorlib.DNType): DNSubclassTypeValidator;

  end;

  ///<summary>Validates that an object is a derived class of a specified type.</summary>
  [DNTypeName('System.Configuration.SubclassTypeValidator')]
  DNSubclassTypeValidator = interface(DNConfigurationValidatorBase)
  ['{9387A731-E8F5-3F7C-84C1-84F79702B12D}']
  { methods } 

    ///<summary>Determines whether the value of an object is valid. </summary>
    ///  <param name="value">The object value.</param>
    ///<exception cref="T:System.ArgumentException"><paramref name="value" />
    ///  is not of a <see cref="T:System.Type" />
    ///  that can be derived from <paramref name="baseClass" />
    ///  as defined in the constructor.</exception>
    procedure Validate(value: DDN.mscorlib.DNObject);
    ///<summary>Determines whether an object can be validated based on type.</summary>
    ///  <param name="type">The object type.</param>
    ///<returns><see langword="true" />
    ///  if the <paramref name="type" />
    ///  parameter matches a type that can be validated; otherwise, <see langword="false" />
    ///  . </returns>
    function CanValidate(&type: DDN.mscorlib.DNType): Boolean;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNSubclassTypeValidator = class(TDNGenericImport<DNSubclassTypeValidatorClass, DNSubclassTypeValidator>) end;

  //-------------namespace: System.Configuration----------------
  DNTimeSpanValidatorClass = interface(DNConfigurationValidatorBaseClass)
  ['{83ABADF9-36B3-50DB-8B57-19AACC26A89E}']
  { constructors } 

    ///<summary>Initializes a new instance of the <see cref="T:System.Configuration.TimeSpanValidator" />
    ///  class, based on supplied parameters.</summary>
    ///  <param name="minValue">A <see cref="T:System.TimeSpan" />
    ///  object that specifies the minimum time allowed to pass validation.</param>
    ///  <param name="maxValue">A <see cref="T:System.TimeSpan" />
    ///  object that specifies the maximum time allowed to pass validation.</param>
    {class} function init(minValue: DDN.mscorlib.DNTimeSpan; maxValue: DDN.mscorlib.DNTimeSpan): DNTimeSpanValidator; overload;
    ///<summary>Initializes a new instance of the <see cref="T:System.Configuration.TimeSpanValidator" />
    ///  class, based on supplied parameters.</summary>
    ///  <param name="minValue">A <see cref="T:System.TimeSpan" />
    ///  object that specifies the minimum time allowed to pass validation.</param>
    ///  <param name="maxValue">A <see cref="T:System.TimeSpan" />
    ///  object that specifies the maximum time allowed to pass validation.</param>
    ///  <param name="rangeIsExclusive">A <see cref="T:System.Boolean" />
    ///  value that specifies whether the validation range is exclusive.</param>
    {class} function init(minValue: DDN.mscorlib.DNTimeSpan; maxValue: DDN.mscorlib.DNTimeSpan; rangeIsExclusive: Boolean): DNTimeSpanValidator; overload;
    ///<summary>Initializes a new instance of the <see cref="T:System.Configuration.TimeSpanValidator" />
    ///  class, based on supplied parameters.</summary>
    ///  <param name="minValue">A <see cref="T:System.TimeSpan" />
    ///  object that specifies the minimum time allowed to pass validation.</param>
    ///  <param name="maxValue">A <see cref="T:System.TimeSpan" />
    ///  object that specifies the maximum time allowed to pass validation.</param>
    ///  <param name="rangeIsExclusive">A <see cref="T:System.Boolean" />
    ///  value that specifies whether the validation range is exclusive.</param>
    ///  <param name="resolutionInSeconds">An <see cref="T:System.Int64" />
    ///  value that specifies a number of seconds. </param>
    ///<exception cref="T:System.ArgumentOutOfRangeException"><paramref name="resolutionInSeconds" />
    ///  is less than <see langword="0" />
    ///  .- or -
    ///  <paramref name="minValue" />
    ///  is greater than <paramref name="maxValue" />
    ///  .</exception>
    {class} function init(minValue: DDN.mscorlib.DNTimeSpan; maxValue: DDN.mscorlib.DNTimeSpan; rangeIsExclusive: Boolean; resolutionInSeconds: Int64): DNTimeSpanValidator; overload;

  end;

  ///<summary>Provides validation of a <see cref="T:System.TimeSpan" />
  ///  object.</summary>
  [DNTypeName('System.Configuration.TimeSpanValidator')]
  DNTimeSpanValidator = interface(DNConfigurationValidatorBase)
  ['{E89936C3-E89F-3A20-8ACC-334D1B1001BC}']
  { methods } 

    ///<summary>Determines whether the type of the object can be validated.</summary>
    ///  <param name="type">The type of the object.</param>
    ///<returns><see langword="true" />
    ///  if the <paramref name="type" />
    ///  parameter matches a <see cref="T:System.TimeSpan" />
    ///  value; otherwise, <see langword="false" />
    ///  . </returns>
    function CanValidate(&type: DDN.mscorlib.DNType): Boolean;
    ///<summary>Determines whether the value of an object is valid.</summary>
    ///  <param name="value">The value of an object.</param>
    procedure Validate(value: DDN.mscorlib.DNObject);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNTimeSpanValidator = class(TDNGenericImport<DNTimeSpanValidatorClass, DNTimeSpanValidator>) end;

  //-------------namespace: System.Configuration----------------
  DNContextInformationClass = interface(DDN.mscorlib.DNObjectClass)
  ['{E31BACA7-1537-5A9D-B671-695BEB4FD0B4}']
  end;

  ///<summary>Encapsulates the context information that is associated with a <see cref="T:System.Configuration.ConfigurationElement" />
  ///  object. This class cannot be inherited.</summary>
  [DNTypeName('System.Configuration.ContextInformation')]
  DNContextInformation = interface(DDN.mscorlib.DNObject)
  ['{0F5DA8AB-826A-3A3F-B325-C5B11EA1EF86}']
  { getters & setters } 

    function get_HostingContext: DDN.mscorlib.DNObject;
    function get_IsMachineLevel: Boolean;

  { methods } 

    ///<summary>Provides an object containing configuration-section information based on the specified section name.</summary>
    ///  <param name="sectionName">The name of the configuration section.</param>
    ///<returns>An object containing the specified section within the configuration.</returns>
    function GetSection(sectionName: string): DDN.mscorlib.DNObject;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>Gets the context of the environment where the configuration property is being evaluated.</summary>
    ///<returns>An object specifying the environment where the configuration property is being evaluated.</returns>
    property HostingContext: DDN.mscorlib.DNObject read get_HostingContext;
    ///<summary>Gets a value specifying whether the configuration property is being evaluated at the machine configuration level.</summary>
    ///<returns><see langword="true" />
    ///  if the configuration property is being evaluated at the machine configuration level; otherwise, <see langword="false" />
    ///  .</returns>
    property IsMachineLevel: Boolean read get_IsMachineLevel;
  end;

  TDNContextInformation = class(TDNGenericImport<DNContextInformationClass, DNContextInformation>) end;

  //-------------namespace: System.Configuration----------------
  DNDictionarySectionHandlerClass = interface(DNObjectClass)
  ['{5F65226A-0515-567D-A4DF-5678B57D933F}']
  { constructors } 

    ///<summary>Initializes a new instance of the <see cref="T:System.Configuration.DictionarySectionHandler" />
    ///  class. </summary>
    {class} function init: DNDictionarySectionHandler;

  end;

  ///<summary>Provides key/value pair configuration information from a configuration section.</summary>
  [DNTypeName('System.Configuration.DictionarySectionHandler')]
  DNDictionarySectionHandler = interface(DNIConfigurationSectionHandler)
  ['{6EA78E50-8B33-3189-AFD0-A55B2E41763E}']
  { methods } 

    ///<summary>Creates a new configuration handler and adds it to the section-handler collection based on the specified parameters.</summary>
    ///  <param name="parent">Parent object.</param>
    ///  <param name="context">Configuration context object.</param>
    ///  <param name="section">Section XML node.</param>
    ///<returns>A configuration object.</returns>
    function Create(parent: DDN.mscorlib.DNObject; context: DDN.mscorlib.DNObject; section: DDN.System.Xml.DNXmlNode): DDN.mscorlib.DNObject;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNDictionarySectionHandler = class(TDNGenericImport<DNDictionarySectionHandlerClass, DNDictionarySectionHandler>) end;

  //-------------namespace: System.Configuration----------------
  DNElementInformationClass = interface(DDN.mscorlib.DNObjectClass)
  ['{3E8F35FF-D7E0-597B-B3DE-B81956D05639}']
  end;

  ///<summary>Contains meta-information about an individual element within the configuration. This class cannot be inherited.</summary>
  [DNTypeName('System.Configuration.ElementInformation')]
  DNElementInformation = interface(DDN.mscorlib.DNObject)
  ['{EE60054D-6B18-3C2E-9F18-A59E71FAB3A1}']
  { getters & setters } 

    function get_Properties: DNPropertyInformationCollection;
    function get_IsPresent: Boolean;
    function get_IsLocked: Boolean;
    function get_IsCollection: Boolean;
    function get_Source: string;
    function get_LineNumber: Int32;
    function get_Type: DDN.mscorlib.DNType;
    function get_Validator: DNConfigurationValidatorBase;
    function get_Errors: DDN.mscorlib.DNICollection;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>Gets a <see cref="T:System.Configuration.PropertyInformationCollection" />
    ///  collection of the properties in the associated <see cref="T:System.Configuration.ConfigurationElement" />
    ///  object.</summary>
    ///<returns>A <see cref="T:System.Configuration.PropertyInformationCollection" />
    ///  collection of the properties in the associated <see cref="T:System.Configuration.ConfigurationElement" />
    ///  object.</returns>
    property Properties: DNPropertyInformationCollection read get_Properties;
    ///<summary>Gets a value indicating whether the associated <see cref="T:System.Configuration.ConfigurationElement" />
    ///  object is in the configuration file.</summary>
    ///<returns><see langword="true" />
    ///  if the associated <see cref="T:System.Configuration.ConfigurationElement" />
    ///  object is in the configuration file; otherwise, <see langword="false" />
    ///  .</returns>
    property IsPresent: Boolean read get_IsPresent;
    ///<summary>Gets a value that indicates whether the associated <see cref="T:System.Configuration.ConfigurationElement" />
    ///  object cannot be modified.</summary>
    ///<returns><see langword="true" />
    ///  if the associated <see cref="T:System.Configuration.ConfigurationElement" />
    ///  object cannot be modified; otherwise, <see langword="false" />
    ///  .</returns>
    property IsLocked: Boolean read get_IsLocked;
    ///<summary>Gets a value indicating whether the associated <see cref="T:System.Configuration.ConfigurationElement" />
    ///  object is a <see cref="T:System.Configuration.ConfigurationElementCollection" />
    ///  collection.</summary>
    ///<returns><see langword="true" />
    ///  if the associated <see cref="T:System.Configuration.ConfigurationElement" />
    ///  object is a <see cref="T:System.Configuration.ConfigurationElementCollection" />
    ///  collection; otherwise, <see langword="false" />
    ///  .</returns>
    property IsCollection: Boolean read get_IsCollection;
    ///<summary>Gets the source file where the associated <see cref="T:System.Configuration.ConfigurationElement" />
    ///  object originated.</summary>
    ///<returns>The source file where the associated <see cref="T:System.Configuration.ConfigurationElement" />
    ///  object originated.</returns>
    property Source: string read get_Source;
    ///<summary>Gets the line number in the configuration file where the associated <see cref="T:System.Configuration.ConfigurationElement" />
    ///  object is defined.</summary>
    ///<returns>The line number in the configuration file where the associated <see cref="T:System.Configuration.ConfigurationElement" />
    ///  object is defined.</returns>
    property LineNumber: Int32 read get_LineNumber;
    ///<summary>Gets the type of the associated <see cref="T:System.Configuration.ConfigurationElement" />
    ///  object.</summary>
    ///<returns>The type of the associated <see cref="T:System.Configuration.ConfigurationElement" />
    ///  object.</returns>
    property &Type: DDN.mscorlib.DNType read get_Type;
    ///<summary>Gets the object used to validate the associated <see cref="T:System.Configuration.ConfigurationElement" />
    ///  object.</summary>
    ///<returns>The object used to validate the associated <see cref="T:System.Configuration.ConfigurationElement" />
    ///  object.</returns>
    property Validator: DNConfigurationValidatorBase read get_Validator;
    ///<summary>Gets the errors for the associated element and subelements</summary>
    ///<returns>The collection containing the errors for the associated element and subelements</returns>
    property Errors: DDN.mscorlib.DNICollection read get_Errors;
  end;

  TDNElementInformation = class(TDNGenericImport<DNElementInformationClass, DNElementInformation>) end;

  //-------------namespace: System.Configuration----------------
  DNExeContextClass = interface(DDN.mscorlib.DNObjectClass)
  ['{89D73A1E-C3DC-5545-A597-CDAF47A098DB}']
  end;

  ///<summary>Manages the path context for the current application. This class cannot be inherited.</summary>
  [DNTypeName('System.Configuration.ExeContext')]
  DNExeContext = interface(DDN.mscorlib.DNObject)
  ['{6BB5EC50-F96B-32D5-A117-C4CCBD923A7D}']
  { getters & setters } 

    function get_UserLevel: DNConfigurationUserLevel;
    function get_ExePath: string;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>Gets an object representing the path level of the current application.</summary>
    ///<returns>A <see cref="T:System.Configuration.ConfigurationUserLevel" />
    ///  object representing the path level of the current application.</returns>
    property UserLevel: DNConfigurationUserLevel read get_UserLevel;
    ///<summary>Gets the current path for the application.</summary>
    ///<returns>A string value containing the current path.</returns>
    property ExePath: string read get_ExePath;
  end;

  TDNExeContext = class(TDNGenericImport<DNExeContextClass, DNExeContext>) end;

  //-------------namespace: System.Configuration----------------
  DNIgnoreSectionHandlerClass = interface(DNObjectClass)
  ['{24CC1378-B612-5E23-9FA9-280CE1D2797C}']
  { constructors } 

    ///<summary>Initializes a new instance of the <see cref="T:System.Configuration.IgnoreSectionHandler" />
    ///  class.</summary>
    {class} function init: DNIgnoreSectionHandler;

  end;

  ///<summary>Provides a legacy section-handler definition for configuration sections that are not handled by the <see cref="N:System.Configuration" />
  ///  types.</summary>
  [DNTypeName('System.Configuration.IgnoreSectionHandler')]
  DNIgnoreSectionHandler = interface(DNIConfigurationSectionHandler)
  ['{E29C1894-DADB-3C55-BD30-179FF060E11F}']
  { methods } 

    ///<summary>Creates a new configuration handler and adds the specified configuration object to the section-handler collection.</summary>
    ///  <param name="parent">The configuration settings in a corresponding parent configuration section. </param>
    ///  <param name="configContext">The virtual path for which the configuration section handler computes configuration values. Normally this parameter is reserved and is <see langword="null" />
    ///  . </param>
    ///  <param name="section">An <see cref="T:System.Xml.XmlNode" />
    ///  that contains the configuration information to be handled. Provides direct access to the XML contents of the configuration section. </param>
    ///<returns>The created configuration handler object.</returns>
    function Create(parent: DDN.mscorlib.DNObject; configContext: DDN.mscorlib.DNObject; section: DDN.System.Xml.DNXmlNode): DDN.mscorlib.DNObject;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNIgnoreSectionHandler = class(TDNGenericImport<DNIgnoreSectionHandlerClass, DNIgnoreSectionHandler>) end;

  //-------------namespace: System.Configuration.Internal----------------
  DNDelegatingConfigHostClass = interface(DNObjectClass)
  ['{427111D2-D193-5288-A26E-206BF57B0520}']
  end;

  ///<summary>Delegates all members of the <see cref="T:System.Configuration.Internal.IInternalConfigHost" />
  ///  interface to another instance of a host.</summary>
  [DNTypeName('System.Configuration.Internal.DelegatingConfigHost')]
  DNDelegatingConfigHost = interface(DNIInternalConfigHost)
  ['{5846C619-A59D-34A1-8C4F-288D056D1930}']
  { getters & setters } 

    function get_SupportsChangeNotifications: Boolean;
    function get_SupportsRefresh: Boolean;
    function get_SupportsPath: Boolean;
    function get_SupportsLocation: Boolean;
    function get_IsRemote: Boolean;

  { methods } 

    ///<summary>Initializes the configuration host.</summary>
    ///  <param name="configRoot">An <see cref="T:System.Configuration.Internal.IInternalConfigRoot" />
    ///  object.</param>
    ///  <param name="hostInitParams">A parameter object containing the values used for initializing the configuration host.</param>
    procedure Init(configRoot: DNIInternalConfigRoot; hostInitParams: TArray<DDN.mscorlib.DNObject>);
    procedure InitForConfiguration(out locationSubPath: string; out configPath: string; out locationConfigPath: string; configRoot: DNIInternalConfigRoot; hostInitConfigurationParams: TArray<DDN.mscorlib.DNObject>);
    ///<summary>Returns a value indicating whether a configuration record is required for the host configuration initialization.</summary>
    ///  <param name="configPath">A string representing the path to a configuration file.</param>
    ///<returns><see langword="true" />
    ///  if a configuration record is required for the host configuration initialization; otherwise, <see langword="false" />
    ///  .</returns>
    function IsConfigRecordRequired(configPath: string): Boolean;
    ///<summary>Returns a value indicating whether the initialization of a configuration object is considered delayed.</summary>
    ///  <param name="configRecord">The <see cref="T:System.Configuration.Internal.IInternalConfigRecord" />
    ///  object.</param>
    ///<returns><see langword="true" />
    ///  if the initialization of a configuration object is considered delayed; otherwise, <see langword="false" />
    ///  .</returns>
    function IsInitDelayed(configRecord: DNIInternalConfigRecord): Boolean;
    ///<summary>Indicates that a new configuration record requires a complete initialization.</summary>
    ///  <param name="configRecord">An <see cref="T:System.Configuration.Internal.IInternalConfigRecord" />
    ///  object.</param>
    procedure RequireCompleteInit(configRecord: DNIInternalConfigRecord);
    ///<summary>Returns a value indicating whether a configuration path is to a configuration node whose contents should be treated as a root.</summary>
    ///  <param name="configPath">A string representing the path to a configuration file.</param>
    ///<returns><see langword="true" />
    ///  if the configuration path is to a configuration node whose contents should be treated as a root; otherwise, <see langword="false" />
    ///  .</returns>
    function IsSecondaryRoot(configPath: string): Boolean;
    ///<summary>Returns the name of a <see cref="T:System.IO.Stream" />
    ///  object performing I/O tasks on a configuration file.</summary>
    ///  <param name="configPath">A string representing the path to a configuration file.</param>
    ///<returns>A string representing the name of a <see cref="T:System.IO.Stream" />
    ///  object performing I/O tasks on a configuration file.</returns>
    function GetStreamName(configPath: string): string;
    ///<summary>Returns the name of a <see cref="T:System.IO.Stream" />
    ///  object performing I/O tasks on a configuration source.</summary>
    ///  <param name="streamName">The name of a <see cref="T:System.IO.Stream" />
    ///  object performing I/O tasks on a configuration file.</param>
    ///  <param name="configSource">A string representing the configuration source.</param>
    ///<returns>A string representing the name of a <see cref="T:System.IO.Stream" />
    ///  object performing I/O tasks on a configuration source.</returns>
    function GetStreamNameForConfigSource(streamName: string; configSource: string): string;
    ///<summary>Returns a <see cref="P:System.Diagnostics.FileVersionInfo.FileVersion" />
    ///  object representing the version of a <see cref="T:System.IO.Stream" />
    ///  object performing I/O tasks on a configuration file.</summary>
    ///  <param name="streamName">The name of a <see cref="T:System.IO.Stream" />
    ///  object performing I/O tasks on a configuration file.</param>
    ///<returns>A <see cref="P:System.Diagnostics.FileVersionInfo.FileVersion" />
    ///  object representing the version of a <see cref="T:System.IO.Stream" />
    ///  object performing I/O tasks on a configuration file.</returns>
    function GetStreamVersion(streamName: string): DDN.mscorlib.DNObject;
    ///<summary>Opens a <see cref="T:System.IO.Stream" />
    ///  object to read a configuration file.</summary>
    ///  <param name="streamName">The name of a <see cref="T:System.IO.Stream" />
    ///  object performing I/O tasks on a configuration file.</param>
    ///<returns>Returns the <see cref="T:System.IO.Stream" />
    ///  object specified by <paramref name="streamName" />
    ///  .</returns>
    function OpenStreamForRead(streamName: string): DDN.mscorlib.DNStream; overload;
    ///<summary>Opens a <see cref="T:System.IO.Stream" />
    ///  object to read a configuration file.</summary>
    ///  <param name="streamName">The name of a <see cref="T:System.IO.Stream" />
    ///  object performing I/O tasks on a configuration file.</param>
    ///  <param name="assertPermissions"><see langword="true" />
    ///  to assert permissions; otherwise, <see langword="false" />
    ///  .</param>
    ///<returns>Returns the <see cref="T:System.IO.Stream" />
    ///  object specified by <paramref name="streamName" />
    ///  .</returns>
    function OpenStreamForRead(streamName: string; assertPermissions: Boolean): DDN.mscorlib.DNStream; overload;
    function OpenStreamForWrite(streamName: string; templateStreamName: string; out writeContext: DDN.mscorlib.DNObject): DDN.mscorlib.DNStream; overload;
    function OpenStreamForWrite(streamName: string; templateStreamName: string; out writeContext: DDN.mscorlib.DNObject; assertPermissions: Boolean): DDN.mscorlib.DNStream; overload;
    ///<summary>Indicates that all writing to the configuration file has completed.</summary>
    ///  <param name="streamName">The name of a <see cref="T:System.IO.Stream" />
    ///  object performing I/O tasks on a configuration file.</param>
    ///  <param name="success"><see langword="true" />
    ///  if writing to the configuration file completed successfully; otherwise, <see langword="false" />
    ///  .</param>
    ///  <param name="writeContext">The write context of the <see cref="T:System.IO.Stream" />
    ///  object performing I/O tasks on the configuration file.</param>
    procedure WriteCompleted(streamName: string; success: Boolean; writeContext: DDN.mscorlib.DNObject); overload;
    ///<summary>Indicates that all writing to the configuration file has completed and specifies whether permissions should be asserted.</summary>
    ///  <param name="streamName">The name of a <see cref="T:System.IO.Stream" />
    ///  object performing I/O tasks on a configuration file.</param>
    ///  <param name="success"><see langword="true" />
    ///  to indicate that writing was completed successfully; otherwise, <see langword="false" />
    ///  .</param>
    ///  <param name="writeContext">The write context of the <see cref="T:System.IO.Stream" />
    ///  object performing I/O tasks on the configuration file.</param>
    ///  <param name="assertPermissions"><see langword="true" />
    ///  to assert permissions; otherwise, <see langword="false" />
    ///  .</param>
    procedure WriteCompleted(streamName: string; success: Boolean; writeContext: DDN.mscorlib.DNObject; assertPermissions: Boolean); overload;
    ///<summary>Deletes the <see cref="T:System.IO.Stream" />
    ///  object performing I/O tasks on a configuration file.</summary>
    ///  <param name="streamName">The name of a <see cref="T:System.IO.Stream" />
    ///  object performing I/O tasks on a configuration file.</param>
    procedure DeleteStream(streamName: string);
    ///<summary>Returns a value indicating whether the file path used by a <see cref="T:System.IO.Stream" />
    ///  object to read a configuration file is a valid path.</summary>
    ///  <param name="streamName">The name of a <see cref="T:System.IO.Stream" />
    ///  object performing I/O tasks on a configuration file.</param>
    ///<returns><see langword="true" />
    ///  if the path used by a <see cref="T:System.IO.Stream" />
    ///  object to read a configuration file is a valid path; otherwise, <see langword="false" />
    ///  .</returns>
    function IsFile(streamName: string): Boolean;
    ///<summary>Instructs the host to monitor an associated <see cref="T:System.IO.Stream" />
    ///  object for changes in a configuration file.</summary>
    ///  <param name="streamName">The name of a <see cref="T:System.IO.Stream" />
    ///  object performing I/O tasks on a configuration file.</param>
    ///  <param name="callback">A <see cref="T:System.Configuration.Internal.StreamChangeCallback" />
    ///  object to receive the returned data representing the changes in the configuration file.</param>
    ///<returns>An <see cref="T:System.Object" />
    ///  instance containing changed configuration settings.</returns>
    function StartMonitoringStreamForChanges(streamName: string; callback: DNStreamChangeCallback): DDN.mscorlib.DNObject;
    ///<summary>Instructs the host object to stop monitoring an associated <see cref="T:System.IO.Stream" />
    ///  object for changes in a configuration file.</summary>
    ///  <param name="streamName">The name of a <see cref="T:System.IO.Stream" />
    ///  object performing I/O tasks on a configuration file.</param>
    ///  <param name="callback">A <see cref="T:System.Configuration.Internal.StreamChangeCallback" />
    ///  object.</param>
    procedure StopMonitoringStreamForChanges(streamName: string; callback: DNStreamChangeCallback);
    ///<summary>Returns a value indicating whether the configuration is above the application configuration in the configuration hierarchy.</summary>
    ///  <param name="configPath">A string representing the path to a configuration file.</param>
    ///<returns><see langword="true" />
    ///  if the configuration is above the application configuration in the configuration hierarchy; otherwise, <see langword="false" />
    ///  .</returns>
    function IsAboveApplication(configPath: string): Boolean;
    ///<summary>Restricts or allows definitions in the host configuration. </summary>
    ///  <param name="configPath">A string representing the path to a configuration file.</param>
    ///  <param name="allowDefinition">The <see cref="T:System.Configuration.ConfigurationAllowDefinition" />
    ///  object.</param>
    ///  <param name="allowExeDefinition">The <see cref="T:System.Configuration.ConfigurationAllowExeDefinition" />
    ///  object.</param>
    ///<returns><see langword="true" />
    ///  if the grant or restriction of definitions in the host configuration was successful; otherwise, <see langword="false" />
    ///  .</returns>
    function IsDefinitionAllowed(configPath: string; allowDefinition: DNConfigurationAllowDefinition; allowExeDefinition: DNConfigurationAllowExeDefinition): Boolean;
    ///<summary>Verifies that a configuration definition is allowed for a configuration record.</summary>
    ///  <param name="configPath">A string representing the path to a configuration file.</param>
    ///  <param name="allowDefinition">An <see cref="P:System.Configuration.SectionInformation.AllowDefinition" />
    ///  object.</param>
    ///  <param name="allowExeDefinition">A <see cref="T:System.Configuration.ConfigurationAllowExeDefinition" />
    ///  object</param>
    ///  <param name="errorInfo">An <see cref="T:System.Configuration.Internal.IConfigErrorInfo" />
    ///  object.</param>
    procedure VerifyDefinitionAllowed(configPath: string; allowDefinition: DNConfigurationAllowDefinition; allowExeDefinition: DNConfigurationAllowExeDefinition; errorInfo: DNIConfigErrorInfo);
    ///<summary>Returns a configuration path based on a location subpath.</summary>
    ///  <param name="configPath">A string representing the path to a configuration file.</param>
    ///  <param name="locationSubPath">A string representing a location subpath.</param>
    ///<returns>A string representing a configuration path.</returns>
    function GetConfigPathFromLocationSubPath(configPath: string; locationSubPath: string): string;
    ///<summary>Returns a value indicating whether the configuration object supports a location tag.</summary>
    ///  <param name="configPath">A string representing the path to a configuration file.</param>
    ///<returns><see langword="true" />
    ///  if the configuration object supports a location tag; otherwise, <see langword="false" />
    ///  .</returns>
    function IsLocationApplicable(configPath: string): Boolean;
    ///<summary>Returns a value indicating whether the configuration path is trusted.</summary>
    ///  <param name="configPath">A string representing the path to a configuration file.</param>
    ///<returns><see langword="true" />
    ///  if the configuration path is trusted; otherwise, <see langword="false" />
    ///  .</returns>
    function IsTrustedConfigPath(configPath: string): Boolean;
    ///<summary>Returns a value indicating whether a configuration section requires a fully trusted code access security level and does not allow the <see cref="T:System.Security.AllowPartiallyTrustedCallersAttribute" />
    ///  attribute to disable implicit link demands.</summary>
    ///  <param name="configRecord">The <see cref="T:System.Configuration.Internal.IInternalConfigRecord" />
    ///  object.</param>
    ///<returns><see langword="true" />
    ///  if the configuration section requires a fully trusted code access security level and does not allow the <see cref="T:System.Security.AllowPartiallyTrustedCallersAttribute" />
    ///  attribute to disable implicit link demands; otherwise, <see langword="false" />
    ///  .</returns>
    function IsFullTrustSectionWithoutAptcaAllowed(configRecord: DNIInternalConfigRecord): Boolean;
    procedure GetRestrictedPermissions(configRecord: DNIInternalConfigRecord; out permissionSet: DDN.mscorlib.DNPermissionSet; out isHostReady: Boolean);
    ///<summary>Instructs the host to impersonate and returns an <see cref="T:System.IDisposable" />
    ///  object required internally by the .NET Framework.</summary>
    ///<returns>An <see cref="T:System.IDisposable" />
    ///  value.</returns>
    function Impersonate: DDN.mscorlib.DNIDisposable;
    ///<summary>Returns a value indicating whether the entire configuration file could be read by a designated <see cref="T:System.IO.Stream" />
    ///  object.</summary>
    ///  <param name="configPath">A string representing the path to a configuration file.</param>
    ///  <param name="streamName">The name of a <see cref="T:System.IO.Stream" />
    ///  object performing I/O tasks on a configuration file.</param>
    ///<returns><see langword="true" />
    ///  if the entire configuration file could be read by the <see cref="T:System.IO.Stream" />
    ///  object designated by <paramref name="streamName" />
    ///  ; otherwise, <see langword="false" />
    ///  .</returns>
    function PrefetchAll(configPath: string; streamName: string): Boolean;
    ///<summary>Instructs the <see cref="T:System.Configuration.Internal.IInternalConfigHost" />
    ///  object to read a designated section of its associated configuration file.</summary>
    ///  <param name="sectionGroupName">A string representing the name of a section group in the configuration file.</param>
    ///  <param name="sectionName">A string representing the name of a section in the configuration file.</param>
    ///<returns><see langword="true" />
    ///  if a section of the configuration file designated by the <paramref name="sectionGroupName" />
    ///  and <paramref name="sectionName" />
    ///  parameters can be read by a <see cref="T:System.IO.Stream" />
    ///  object; otherwise, <see langword="false" />
    ///  .</returns>
    function PrefetchSection(sectionGroupName: string; sectionName: string): Boolean;
    ///<summary>Creates a deprecated configuration context.</summary>
    ///  <param name="configPath">A string representing the path to a configuration file.</param>
    ///<returns>A <see cref="T:System.Object" />
    ///  representing a deprecated configuration context.</returns>
    function CreateDeprecatedConfigContext(configPath: string): DDN.mscorlib.DNObject;
    ///<summary>Creates a new configuration context.</summary>
    ///  <param name="configPath">A string representing the path to a configuration file.</param>
    ///  <param name="locationSubPath">A string representing a location subpath.</param>
    ///<returns>A <see cref="T:System.Object" />
    ///  representing a new configuration context.</returns>
    function CreateConfigurationContext(configPath: string; locationSubPath: string): DDN.mscorlib.DNObject;
    ///<summary>Decrypts an encrypted configuration section.</summary>
    ///  <param name="encryptedXml">An encrypted section of a configuration file.</param>
    ///  <param name="protectionProvider">A <see cref="T:System.Configuration.ProtectedConfigurationProvider" />
    ///  object.</param>
    ///  <param name="protectedConfigSection">A <see cref="T:System.Configuration.ProtectedConfigurationSection" />
    ///  object.</param>
    ///<returns>A string representing a decrypted configuration section.</returns>
    function DecryptSection(encryptedXml: string; protectionProvider: DNProtectedConfigurationProvider; protectedConfigSection: DNProtectedConfigurationSection): string;
    ///<summary>Encrypts a section of a configuration object.</summary>
    ///  <param name="clearTextXml">A section of the configuration that is not encrypted.</param>
    ///  <param name="protectionProvider">A <see cref="T:System.Configuration.ProtectedConfigurationProvider" />
    ///  object.</param>
    ///  <param name="protectedConfigSection">A <see cref="T:System.Configuration.ProtectedConfigurationSection" />
    ///  object.</param>
    ///<returns>A string representing an encrypted section of the configuration object.</returns>
    function EncryptSection(clearTextXml: string; protectionProvider: DNProtectedConfigurationProvider; protectedConfigSection: DNProtectedConfigurationSection): string;
    ///<summary>Returns a <see cref="T:System.Type" />
    ///  representing the type of the configuration.</summary>
    ///  <param name="typeName">A string representing the configuration type.</param>
    ///  <param name="throwOnError"><see langword="true" />
    ///  if an exception should be thrown if an error is encountered; <see langword="false" />
    ///  if an exception should not be thrown if an error is encountered.</param>
    ///<returns>A <see cref="T:System.Type" />
    ///  representing the type of the configuration.</returns>
    function GetConfigType(typeName: string; throwOnError: Boolean): DDN.mscorlib.DNType;
    ///<summary>Returns a string representing the type name of the configuration object.</summary>
    ///  <param name="t">A <see cref="T:System.Type" />
    ///  object.</param>
    ///<returns>A string representing the type name of the configuration object.</returns>
    function GetConfigTypeName(t: DDN.mscorlib.DNType): string;
    ///<summary>Processes the markup of a configuration section using the provided <see cref="T:System.Configuration.ConfigurationBuilder" />
    ///  .</summary>
    ///  <param name="rawXml">The <see cref="T:System.Xml.XmlNode" />
    ///  to process.</param>
    ///  <param name="builder"><see cref="T:System.Configuration.ConfigurationBuilder" />
    ///  to use to process the <paramref name="rawXml" />
    ///  .</param>
    ///<returns>The processed <see cref="T:System.Xml.XmlNode" />
    ///  .</returns>
    function ProcessRawXml(rawXml: DDN.System.Xml.DNXmlNode; builder: DNConfigurationBuilder): DDN.System.Xml.DNXmlNode;
    ///<summary>Processes a <see cref="T:System.Configuration.ConfigurationSection" />
    ///  object using the provided <see cref="T:System.Configuration.ConfigurationBuilder" />
    ///  .</summary>
    ///  <param name="configSection">The <see cref="T:System.Configuration.ConfigurationSection" />
    ///  to process.</param>
    ///  <param name="builder"><see cref="T:System.Configuration.ConfigurationBuilder" />
    ///  to use to process the <paramref name="configSection" />
    ///  .</param>
    ///<returns>The processed <see cref="T:System.Configuration.ConfigurationSection" />
    ///  .</returns>
    function ProcessConfigurationSection(configSection: DNConfigurationSection; builder: DNConfigurationBuilder): DNConfigurationSection;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>Gets a value indicating whether the host configuration supports change notifications.</summary>
    ///<returns><see langword="true" />
    ///  if the host supports change notifications; otherwise, <see langword="false" />
    ///  . </returns>
    property SupportsChangeNotifications: Boolean read get_SupportsChangeNotifications;
    ///<summary>Gets a value indicating whether the host configuration supports refresh.</summary>
    ///<returns><see langword="true" />
    ///  if the host configuration supports refresh; otherwise, <see langword="false" />
    ///  .</returns>
    property SupportsRefresh: Boolean read get_SupportsRefresh;
    ///<summary>Gets a value indicating whether the host configuration has path support.</summary>
    ///<returns><see langword="true" />
    ///  if the host configuration has path support; otherwise, <see langword="false" />
    ///  .</returns>
    property SupportsPath: Boolean read get_SupportsPath;
    ///<summary>Gets a value indicating whether the host configuration supports location tags.</summary>
    ///<returns><see langword="true" />
    ///  if the host supports location tags; otherwise, <see langword="false" />
    ///  .</returns>
    property SupportsLocation: Boolean read get_SupportsLocation;
    ///<summary>Gets a value indicating whether the configuration is remote.</summary>
    ///<returns><see langword="true" />
    ///  if the configuration is remote; otherwise, <see langword="false" />
    ///  .</returns>
    property IsRemote: Boolean read get_IsRemote;
  end;

  TDNDelegatingConfigHost = class(TDNGenericImport<DNDelegatingConfigHostClass, DNDelegatingConfigHost>) end;

  //-------------namespace: System.Configuration----------------
  DNNameValueFileSectionHandlerClass = interface(DNObjectClass)
  ['{ED613FB0-4313-55E2-A029-E10980B5CD3F}']
  { constructors } 

    ///<summary>Initializes a new instance of the <see cref="T:System.Configuration.NameValueFileSectionHandler" />
    ///  class.</summary>
    {class} function init: DNNameValueFileSectionHandler;

  end;

  ///<summary>Provides access to a configuration file. This type supports the .NET Framework configuration infrastructure and is not intended to be used directly from your code.</summary>
  [DNTypeName('System.Configuration.NameValueFileSectionHandler')]
  DNNameValueFileSectionHandler = interface(DNIConfigurationSectionHandler)
  ['{02904935-4CC1-3D24-8E46-E03CE7BCCC53}']
  { methods } 

    ///<summary>Creates a new configuration handler and adds it to the section-handler collection based on the specified parameters.</summary>
    ///  <param name="parent">The parent object.</param>
    ///  <param name="configContext">The configuration context object.</param>
    ///  <param name="section">The section XML node.</param>
    ///<returns>A configuration object.</returns>
    ///<exception cref="T:System.Configuration.ConfigurationErrorsException">The file specified in the <see langword="file" />
    ///  attribute of <paramref name="section" />
    ///  exists but cannot be loaded.- or -The <see langword="name" />
    ///  attribute of <paramref name="section" />
    ///  does not match the root element of the file specified in the <see langword="file" />
    ///  attribute.</exception>
    function Create(parent: DDN.mscorlib.DNObject; configContext: DDN.mscorlib.DNObject; section: DDN.System.Xml.DNXmlNode): DDN.mscorlib.DNObject;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNNameValueFileSectionHandler = class(TDNGenericImport<DNNameValueFileSectionHandlerClass, DNNameValueFileSectionHandler>) end;

  //-------------namespace: System.Configuration----------------
  DNNameValueSectionHandlerClass = interface(DNObjectClass)
  ['{8E6BF030-B4A6-5934-9987-57120907D99A}']
  { constructors } 

    ///<summary>Initializes a new instance of the <see cref="T:System.Configuration.NameValueSectionHandler" />
    ///  class.</summary>
    {class} function init: DNNameValueSectionHandler;

  end;

  ///<summary>Provides name/value-pair configuration information from a configuration section.</summary>
  [DNTypeName('System.Configuration.NameValueSectionHandler')]
  DNNameValueSectionHandler = interface(DNIConfigurationSectionHandler)
  ['{8D09C5F9-8AB0-3F03-982C-6AFA464F9B9F}']
  { methods } 

    ///<summary>Creates a new configuration handler and adds it to the section-handler collection based on the specified parameters.</summary>
    ///  <param name="parent">Parent object.</param>
    ///  <param name="context">Configuration context object.</param>
    ///  <param name="section">Section XML node.</param>
    ///<returns>A configuration object.</returns>
    function Create(parent: DDN.mscorlib.DNObject; context: DDN.mscorlib.DNObject; section: DDN.System.Xml.DNXmlNode): DDN.mscorlib.DNObject;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNNameValueSectionHandler = class(TDNGenericImport<DNNameValueSectionHandlerClass, DNNameValueSectionHandler>) end;

  //-------------namespace: System.Configuration----------------
  DNPropertyInformationClass = interface(DDN.mscorlib.DNObjectClass)
  ['{50EB9565-81F0-5F59-A739-084FBF0C7544}']
  end;

  ///<summary>Contains meta-information on an individual property within the configuration. This type cannot be inherited.</summary>
  [DNTypeName('System.Configuration.PropertyInformation')]
  DNPropertyInformation = interface(DDN.mscorlib.DNObject)
  ['{6E3A1B4F-A013-37D3-B65A-183C2D98E127}']
  { getters & setters } 

    function get_Name: string;
    function get_Value: DDN.mscorlib.DNObject;
    procedure set_Value(value: DDN.mscorlib.DNObject);
    function get_DefaultValue: DDN.mscorlib.DNObject;
    function get_ValueOrigin: DNPropertyValueOrigin;
    function get_IsModified: Boolean;
    function get_IsKey: Boolean;
    function get_IsRequired: Boolean;
    function get_IsLocked: Boolean;
    function get_Source: string;
    function get_LineNumber: Int32;
    function get_Type: DDN.mscorlib.DNType;
    function get_Validator: DNConfigurationValidatorBase;
    function get_Converter: DNTypeConverter;
    function get_Description: string;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>Gets the name of the object that corresponds to a configuration attribute.</summary>
    ///<returns>The name of the <see cref="T:System.Configuration.PropertyInformation" />
    ///  object.</returns>
    property Name: string read get_Name;
    ///<summary>Gets or sets an object containing the value related to a configuration attribute.</summary>
    ///<returns>An object containing the value for the <see cref="T:System.Configuration.PropertyInformation" />
    ///  object.</returns>
    property Value: DDN.mscorlib.DNObject read get_Value write set_Value;
    ///<summary>Gets an object containing the default value related to a configuration attribute.</summary>
    ///<returns>An object containing the default value of the configuration attribute.</returns>
    property DefaultValue: DDN.mscorlib.DNObject read get_DefaultValue;
    ///<summary>Gets a <see cref="T:System.Configuration.PropertyValueOrigin" />
    ///  object related to the configuration attribute. </summary>
    ///<returns>A <see cref="T:System.Configuration.PropertyValueOrigin" />
    ///  object.</returns>
    property ValueOrigin: DNPropertyValueOrigin read get_ValueOrigin;
    ///<summary>Gets a value specifying whether the configuration attribute has been modified.</summary>
    ///<returns><see langword="true" />
    ///  if the <see cref="T:System.Configuration.PropertyInformation" />
    ///  object has been modified; otherwise, <see langword="false" />
    ///  .</returns>
    property IsModified: Boolean read get_IsModified;
    ///<summary>Gets a value specifying whether the configuration attribute is a key.</summary>
    ///<returns><see langword="true" />
    ///  if the configuration attribute is a key; otherwise, <see langword="false" />
    ///  .</returns>
    property IsKey: Boolean read get_IsKey;
    ///<summary>Gets a value specifying whether the configuration attribute is required.</summary>
    ///<returns><see langword="true" />
    ///  if the <see cref="T:System.Configuration.PropertyInformation" />
    ///  object is required; otherwise, <see langword="false" />
    ///  .</returns>
    property IsRequired: Boolean read get_IsRequired;
    ///<summary>Gets a value specifying whether the configuration attribute is locked.</summary>
    ///<returns><see langword="true" />
    ///  if the <see cref="T:System.Configuration.PropertyInformation" />
    ///  object is locked; otherwise, <see langword="false" />
    ///  .</returns>
    property IsLocked: Boolean read get_IsLocked;
    ///<summary>Gets the source file that corresponds to a configuration attribute.</summary>
    ///<returns>The source file of the <see cref="T:System.Configuration.PropertyInformation" />
    ///  object.</returns>
    property Source: string read get_Source;
    ///<summary>Gets the line number in the configuration file related to the configuration attribute.</summary>
    ///<returns>A line number of the configuration file.</returns>
    property LineNumber: Int32 read get_LineNumber;
    ///<summary>Gets the <see cref="T:System.Type" />
    ///  of the object that corresponds to a configuration attribute.</summary>
    ///<returns>The <see cref="T:System.Type" />
    ///  of the <see cref="T:System.Configuration.PropertyInformation" />
    ///  object.</returns>
    property &Type: DDN.mscorlib.DNType read get_Type;
    ///<summary>Gets a <see cref="T:System.Configuration.ConfigurationValidatorBase" />
    ///  object related to the configuration attribute.</summary>
    ///<returns>A <see cref="T:System.Configuration.ConfigurationValidatorBase" />
    ///  object.</returns>
    property Validator: DNConfigurationValidatorBase read get_Validator;
    ///<summary>Gets the <see cref="T:System.ComponentModel.TypeConverter" />
    ///  object related to the configuration attribute.</summary>
    ///<returns>A <see cref="T:System.ComponentModel.TypeConverter" />
    ///  object.</returns>
    property Converter: DNTypeConverter read get_Converter;
    ///<summary>Gets the description of the object that corresponds to a configuration attribute.</summary>
    ///<returns>The description of the configuration attribute.</returns>
    property Description: string read get_Description;
  end;

  TDNPropertyInformation = class(TDNGenericImport<DNPropertyInformationClass, DNPropertyInformation>) end;

  //-------------namespace: System.Configuration----------------
  DNProtectedConfigurationClass = interface(DDN.mscorlib.DNObjectClass)
  ['{FABAAAE4-651A-5D74-9349-F4540DB04EBD}']
  { static getter & setter } 

    {class} function get_Providers: DNProtectedConfigurationProviderCollection;
    {class} function get_DefaultProvider: string;

  { static propertys } 

    ///<summary>Gets a collection of the installed protected-configuration providers.</summary>
    ///<returns>A <see cref="T:System.Configuration.ProtectedConfigurationProviderCollection" />
    ///  collection of installed <see cref="T:System.Configuration.ProtectedConfigurationProvider" />
    ///  objects.</returns>
    {class} property Providers: DNProtectedConfigurationProviderCollection read get_Providers;
    ///<summary>Gets the name of the default protected-configuration provider.</summary>
    ///<returns>The name of the default protected-configuration provider.</returns>
    {class} property DefaultProvider: string read get_DefaultProvider;
  end;

  ///<summary>Provides access to the protected-configuration providers for the current application's configuration file. </summary>
  [DNTypeName('System.Configuration.ProtectedConfiguration')]
  DNProtectedConfiguration = interface(DDN.mscorlib.DNObject)
  ['{F4D5987F-4289-32C3-8EDE-84CA0801595F}']
  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNProtectedConfiguration = class(TDNGenericImport<DNProtectedConfigurationClass, DNProtectedConfiguration>)
  public const
    ///<summary>The name of the RSA provider.</summary>
   RsaProviderName = 'RsaProtectedConfigurationProvider';
    ///<summary>The name of the data protection provider.</summary>
   DataProtectionProviderName = 'DataProtectionConfigurationProvider';
    ///<summary>The name of the protected data section.</summary>
   ProtectedDataSectionName = 'configProtectedData';
  end;

  //-------------namespace: System.Configuration.Provider----------------
  DNProviderBaseClass = interface(DDN.mscorlib.DNObjectClass)
  ['{85051926-190E-566B-B522-BF3B11EDA19C}']
  end;

  ///<summary>Provides a base implementation for the extensible provider model.</summary>
  [DNTypeName('System.Configuration.Provider.ProviderBase')]
  DNProviderBase = interface(DDN.mscorlib.DNObject)
  ['{D0227721-E204-3476-BA2C-115540910409}']
  { getters & setters } 

    function get_Name: string;
    function get_Description: string;

  { methods } 

    ///<summary>Initializes the configuration builder.</summary>
    ///  <param name="name">The friendly name of the provider.</param>
    ///  <param name="config">A collection of the name/value pairs representing the provider-specific attributes specified in the configuration for this provider.</param>
    ///<exception cref="T:System.ArgumentNullException">The name of the provider is <see langword="null" />
    ///  .</exception><exception cref="T:System.ArgumentException">The name of the provider has a length of zero.</exception><exception cref="T:System.InvalidOperationException">An attempt is made to call <see cref="M:System.Configuration.Provider.ProviderBase.Initialize(System.String,System.Collections.Specialized.NameValueCollection)" />
    ///  on a provider after the provider has already been initialized.</exception>
    procedure Initialize(name: string; config: DNNameValueCollection);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>Gets the friendly name used to refer to the provider during configuration.</summary>
    ///<returns>The friendly name used to refer to the provider during configuration.</returns>
    property Name: string read get_Name;
    ///<summary>Gets a brief, friendly description suitable for display in administrative tools or other user interfaces (UIs).</summary>
    ///<returns>A brief, friendly description suitable for display in administrative tools or other UIs.</returns>
    property Description: string read get_Description;
  end;

  TDNProviderBase = class(TDNGenericImport<DNProviderBaseClass, DNProviderBase>) end;

  //-------------namespace: System.Configuration----------------
  DNConfigurationBuilderClass = interface(DNProviderBaseClass)
  ['{5906E833-2FEF-5A38-A175-E84485C67BAD}']
  end;

  ///<summary>Represents the base class to be extended by custom configuration builder implementations.</summary>
  [DNTypeName('System.Configuration.ConfigurationBuilder')]
  DNConfigurationBuilder = interface(DNProviderBase)
  ['{9C22882E-1C30-3E0F-8C7B-0E0548662990}']
  { getters & setters } 

    function get_Name: string;
    function get_Description: string;

  { methods } 

    ///<summary>Accepts an <see cref="T:System.Xml.XmlNode" />
    ///  representing the raw configuration section from a config file and returns a modified or new <see cref="T:System.Xml.XmlNode" />
    ///  for further use.</summary>
    ///  <param name="rawXml">The <see cref="T:System.Xml.XmlNode" />
    ///  to process.</param>
    ///<returns>The processed <see cref="T:System.Xml.XmlNode" />
    ///  .</returns>
    function ProcessRawXml(rawXml: DDN.System.Xml.DNXmlNode): DDN.System.Xml.DNXmlNode;
    ///<summary>Accepts a <see cref="T:System.Configuration.ConfigurationSection" />
    ///  object from the configuration system and returns a modified or new <see cref="T:System.Configuration.ConfigurationSection" />
    ///  object for further use.</summary>
    ///  <param name="configSection">The <see cref="T:System.Configuration.ConfigurationSection" />
    ///  to process.</param>
    ///<returns>The processed <see cref="T:System.Configuration.ConfigurationSection" />
    ///  .</returns>
    function ProcessConfigurationSection(configSection: DNConfigurationSection): DNConfigurationSection;
    ///<summary>Initializes the configuration builder.</summary>
    ///  <param name="name">The friendly name of the provider.</param>
    ///  <param name="config">A collection of the name/value pairs representing the provider-specific attributes specified in the configuration for this provider.</param>
    ///<exception cref="T:System.ArgumentNullException">The name of the provider is <see langword="null" />
    ///  .</exception><exception cref="T:System.ArgumentException">The name of the provider has a length of zero.</exception><exception cref="T:System.InvalidOperationException">An attempt is made to call <see cref="M:System.Configuration.Provider.ProviderBase.Initialize(System.String,System.Collections.Specialized.NameValueCollection)" />
    ///  on a provider after the provider has already been initialized.</exception>
    procedure Initialize(name: string; config: DNNameValueCollection);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>Gets the friendly name used to refer to the provider during configuration.</summary>
    ///<returns>The friendly name used to refer to the provider during configuration.</returns>
    property Name: string read get_Name;
    ///<summary>Gets a brief, friendly description suitable for display in administrative tools or other user interfaces (UIs).</summary>
    ///<returns>A brief, friendly description suitable for display in administrative tools or other UIs.</returns>
    property Description: string read get_Description;
  end;

  TDNConfigurationBuilder = class(TDNGenericImport<DNConfigurationBuilderClass, DNConfigurationBuilder>) end;

  //-------------namespace: System.Configuration----------------
  DNProtectedConfigurationProviderClass = interface(DNProviderBaseClass)
  ['{9B2F60FD-F53D-5A1D-82A0-8541C40C35CC}']
  end;

  ///<summary>Is the base class to create providers for encrypting and decrypting protected-configuration data.</summary>
  [DNTypeName('System.Configuration.ProtectedConfigurationProvider')]
  DNProtectedConfigurationProvider = interface(DNProviderBase)
  ['{0DFE9FBE-E232-3F9E-A512-E86559E3C350}']
  { getters & setters } 

    function get_Name: string;
    function get_Description: string;

  { methods } 

    ///<summary>Encrypts the passed <see cref="T:System.Xml.XmlNode" />
    ///  object from a configuration file.</summary>
    ///  <param name="node">The <see cref="T:System.Xml.XmlNode" />
    ///  object to encrypt.</param>
    ///<returns>The <see cref="T:System.Xml.XmlNode" />
    ///  object containing encrypted data.</returns>
    function Encrypt(node: DDN.System.Xml.DNXmlNode): DDN.System.Xml.DNXmlNode;
    ///<summary>Decrypts the passed <see cref="T:System.Xml.XmlNode" />
    ///  object from a configuration file.</summary>
    ///  <param name="encryptedNode">The <see cref="T:System.Xml.XmlNode" />
    ///  object to decrypt.</param>
    ///<returns>The <see cref="T:System.Xml.XmlNode" />
    ///  object containing decrypted data.</returns>
    function Decrypt(encryptedNode: DDN.System.Xml.DNXmlNode): DDN.System.Xml.DNXmlNode;
    ///<summary>Initializes the configuration builder.</summary>
    ///  <param name="name">The friendly name of the provider.</param>
    ///  <param name="config">A collection of the name/value pairs representing the provider-specific attributes specified in the configuration for this provider.</param>
    ///<exception cref="T:System.ArgumentNullException">The name of the provider is <see langword="null" />
    ///  .</exception><exception cref="T:System.ArgumentException">The name of the provider has a length of zero.</exception><exception cref="T:System.InvalidOperationException">An attempt is made to call <see cref="M:System.Configuration.Provider.ProviderBase.Initialize(System.String,System.Collections.Specialized.NameValueCollection)" />
    ///  on a provider after the provider has already been initialized.</exception>
    procedure Initialize(name: string; config: DNNameValueCollection);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>Gets the friendly name used to refer to the provider during configuration.</summary>
    ///<returns>The friendly name used to refer to the provider during configuration.</returns>
    property Name: string read get_Name;
    ///<summary>Gets a brief, friendly description suitable for display in administrative tools or other user interfaces (UIs).</summary>
    ///<returns>A brief, friendly description suitable for display in administrative tools or other UIs.</returns>
    property Description: string read get_Description;
  end;

  TDNProtectedConfigurationProvider = class(TDNGenericImport<DNProtectedConfigurationProviderClass, DNProtectedConfigurationProvider>) end;

  //-------------namespace: System.Configuration----------------
  DNDpapiProtectedConfigurationProviderClass = interface(DNProtectedConfigurationProviderClass)
  ['{4F09077B-BD06-5D46-8A91-B4BD3B36A077}']
  { constructors } 

    ///<summary>Initializes a new instance of the <see cref="T:System.Configuration.DpapiProtectedConfigurationProvider" />
    ///  class using default settings.</summary>
    {class} function init: DNDpapiProtectedConfigurationProvider;

  end;

  ///<summary>Provides a <see cref="T:System.Configuration.ProtectedConfigurationProvider" />
  ///  object that uses the Windows data protection API (DPAPI) to encrypt and decrypt configuration data.</summary>
  [DNTypeName('System.Configuration.DpapiProtectedConfigurationProvider')]
  DNDpapiProtectedConfigurationProvider = interface(DNProtectedConfigurationProvider)
  ['{B7253C0F-3272-3533-A43B-4DD98C022130}']
  { getters & setters } 

    function get_UseMachineProtection: Boolean;
    function get_Name: string;
    function get_Description: string;

  { methods } 

    ///<summary>Decrypts the passed <see cref="T:System.Xml.XmlNode" />
    ///  object.</summary>
    ///  <param name="encryptedNode">The <see cref="T:System.Xml.XmlNode" />
    ///  object to decrypt. </param>
    ///<returns>A decrypted <see cref="T:System.Xml.XmlNode" />
    ///  object.</returns>
    ///<exception cref="T:System.Configuration.ConfigurationErrorsException"><paramref name="encryptedNode" />
    ///  does not have <see cref="P:System.Xml.XmlNode.Name" />
    ///  set to "EncryptedData" and <see cref="T:System.Xml.XmlNodeType" />
    ///  set to <see cref="F:System.Xml.XmlNodeType.Element" />
    ///  .- or -
    ///  <paramref name="encryptedNode" />
    ///  does not have a child node named "CipherData" with a child node named "CipherValue".- or -The child node named "CipherData" is an empty node.</exception>
    function Decrypt(encryptedNode: DDN.System.Xml.DNXmlNode): DDN.System.Xml.DNXmlNode;
    ///<summary>Encrypts the passed <see cref="T:System.Xml.XmlNode" />
    ///  object.</summary>
    ///  <param name="node">The <see cref="T:System.Xml.XmlNode" />
    ///  object to encrypt. </param>
    ///<returns>An encrypted <see cref="T:System.Xml.XmlNode" />
    ///  object.</returns>
    function Encrypt(node: DDN.System.Xml.DNXmlNode): DDN.System.Xml.DNXmlNode;
    ///<summary>Initializes the provider with default settings.</summary>
    ///  <param name="name">The provider name to use for the object.</param>
    ///  <param name="configurationValues">A <see cref="T:System.Collections.Specialized.NameValueCollection" />
    ///  collection of values to use when initializing the object.</param>
    ///<exception cref="T:System.Configuration.ConfigurationErrorsException"><paramref name="configurationValues" />
    ///  contains an unrecognized configuration setting.</exception>
    procedure Initialize(name: string; configurationValues: DNNameValueCollection);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>Gets a value that indicates whether the <see cref="T:System.Configuration.DpapiProtectedConfigurationProvider" />
    ///  object is using machine-specific or user-account-specific protection.</summary>
    ///<returns><see langword="true" />
    ///  if the <see cref="T:System.Configuration.DpapiProtectedConfigurationProvider" />
    ///  is using machine-specific protection; <see langword="false" />
    ///  if it is using user-account-specific protection.</returns>
    property UseMachineProtection: Boolean read get_UseMachineProtection;
    property Name: string read get_Name;
    property Description: string read get_Description;
  end;

  TDNDpapiProtectedConfigurationProvider = class(TDNGenericImport<DNDpapiProtectedConfigurationProviderClass, DNDpapiProtectedConfigurationProvider>) end;

  //-------------namespace: System.Configuration----------------
  DNRsaProtectedConfigurationProviderClass = interface(DNProtectedConfigurationProviderClass)
  ['{76F87491-3723-52FF-B2D3-8B048C1496B6}']
  { constructors } 

    ///<summary>Initializes a new instance of the <see cref="T:System.Configuration.RsaProtectedConfigurationProvider" />
    ///  class. </summary>
    {class} function init: DNRsaProtectedConfigurationProvider;

  end;

  ///<summary>Provides a <see cref="T:System.Configuration.ProtectedConfigurationProvider" />
  ///  instance that uses RSA encryption to encrypt and decrypt configuration data.</summary>
  [DNTypeName('System.Configuration.RsaProtectedConfigurationProvider')]
  DNRsaProtectedConfigurationProvider = interface(DNProtectedConfigurationProvider)
  ['{8AC59979-2102-36C0-9BC5-1CDA1A67CA50}']
  { getters & setters } 

    function get_KeyContainerName: string;
    function get_CspProviderName: string;
    function get_UseMachineContainer: Boolean;
    function get_UseOAEP: Boolean;
    function get_UseFIPS: Boolean;
    function get_RsaPublicKey: DDN.mscorlib.DNRSAParameters;
    function get_Name: string;
    function get_Description: string;

  { methods } 

    ///<summary>Adds a key to the RSA key container.</summary>
    ///  <param name="keySize">The size of the key to add.</param>
    ///  <param name="exportable"><see langword="true" />
    ///  to indicate that the key is exportable; otherwise, <see langword="false" />
    ///  .</param>
    procedure AddKey(keySize: Int32; exportable: Boolean);
    ///<summary>Removes a key from the RSA key container.</summary>
    procedure DeleteKey;
    ///<summary>Imports an RSA key into the key container.</summary>
    ///  <param name="xmlFileName">The file name and path to import the key from.</param>
    ///  <param name="exportable"><see langword="true" />
    ///  to indicate that the key is exportable; otherwise, <see langword="false" />
    ///  .</param>
    ///<exception cref="T:System.ArgumentException"><paramref name="path" />
    ///  is a zero-length string, contains only white space, or contains one or more invalid characters as defined by <see cref="F:System.IO.Path.InvalidPathChars" />
    ///  . </exception><exception cref="T:System.ArgumentNullException"><paramref name="path" />
    ///  is <see langword="null" />
    ///  .</exception><exception cref="T:System.IO.PathTooLongException">The specified path, file name, or both exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters, and file names must be less than 260 characters. </exception><exception cref="T:System.IO.DirectoryNotFoundException">The specified path is invalid, such as being on an unmapped drive. </exception><exception cref="T:System.IO.IOException">An error occurred while opening the file. </exception><exception cref="T:System.UnauthorizedAccessException"><paramref name="path" />
    ///  specified a file that is write-only.-or- This operation is not supported on the current platform.-or-
    ///  <paramref name="path" />
    ///  specified a directory.-or- The caller does not have the required permission. </exception><exception cref="T:System.IO.FileNotFoundException">The file specified in <paramref name="path" />
    ///  was not found. </exception><exception cref="T:System.NotSupportedException"><paramref name="path" />
    ///  is in an invalid format. </exception>
    procedure ImportKey(xmlFileName: string; exportable: Boolean);
    ///<summary>Exports an RSA key from the key container.</summary>
    ///  <param name="xmlFileName">The file name and path to export the key to.</param>
    ///  <param name="includePrivateParameters"><see langword="true" />
    ///  to indicate that private parameters are exported; otherwise, <see langword="false" />
    ///  .</param>
    ///<exception cref="T:System.ArgumentException"><paramref name="path" />
    ///  is a zero-length string, contains only white space, or contains one or more invalid characters as defined by <see cref="F:System.IO.Path.InvalidPathChars" />
    ///  . </exception><exception cref="T:System.ArgumentNullException"><paramref name="path" />
    ///  is <see langword="null" />
    ///  . </exception><exception cref="T:System.IO.PathTooLongException">The specified path, file name, or both exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters, and file names must be less than 260 characters. </exception><exception cref="T:System.IO.DirectoryNotFoundException">The specified path is invalid, such as being on an unmapped drive. </exception><exception cref="T:System.IO.IOException">An error occurred while opening the file. </exception><exception cref="T:System.UnauthorizedAccessException"><paramref name="path" />
    ///  specified a file that is read-only.-or- This operation is not supported on the current platform.-or-
    ///  <paramref name="path" />
    ///  specified a directory.-or- The caller does not have the required permission. </exception><exception cref="T:System.IO.FileNotFoundException">The file specified in <paramref name="path" />
    ///  was not found. </exception><exception cref="T:System.NotSupportedException"><paramref name="path" />
    ///  is in an invalid format. </exception><exception cref="T:System.Security.SecurityException">The caller does not have the required permission. </exception>
    procedure ExportKey(xmlFileName: string; includePrivateParameters: Boolean);
    ///<summary>Decrypts the XML node passed to it.</summary>
    ///  <param name="encryptedNode">The <see cref="T:System.Xml.XmlNode" />
    ///  to decrypt.</param>
    ///<returns>The decrypted XML node.</returns>
    function Decrypt(encryptedNode: DDN.System.Xml.DNXmlNode): DDN.System.Xml.DNXmlNode;
    ///<summary>Encrypts the XML node passed to it.</summary>
    ///  <param name="node">The <see cref="T:System.Xml.XmlNode" />
    ///  to encrypt.</param>
    ///<returns>An encrypted <see cref="T:System.Xml.XmlNode" />
    ///  object.</returns>
    function Encrypt(node: DDN.System.Xml.DNXmlNode): DDN.System.Xml.DNXmlNode;
    ///<summary>Initializes the provider with default settings.</summary>
    ///  <param name="name">The provider name to use for the object.</param>
    ///  <param name="configurationValues">A <see cref="T:System.Collections.Specialized.NameValueCollection" />
    ///  collection of values to use when initializing the object.</param>
    ///<exception cref="T:System.Configuration.ConfigurationErrorsException"><paramref name="configurationValues" />
    ///  includes one or more unrecognized values.</exception>
    procedure Initialize(name: string; configurationValues: DNNameValueCollection);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>Gets the name of the key container.</summary>
    ///<returns>The name of the key container.</returns>
    property KeyContainerName: string read get_KeyContainerName;
    ///<summary>Gets the name of the Windows cryptography API (crypto API) cryptographic service provider (CSP).</summary>
    ///<returns>The name of the CryptoAPI cryptographic service provider.</returns>
    property CspProviderName: string read get_CspProviderName;
    ///<summary>Gets a value that indicates whether the <see cref="T:System.Configuration.RsaProtectedConfigurationProvider" />
    ///  object is using the machine key container.</summary>
    ///<returns><see langword="true" />
    ///  if the <see cref="T:System.Configuration.RsaProtectedConfigurationProvider" />
    ///  object is using the machine key container; otherwise, <see langword="false" />
    ///  .</returns>
    property UseMachineContainer: Boolean read get_UseMachineContainer;
    ///<summary>Gets a value that indicates whether the provider is using Optimal Asymmetric Encryption Padding (OAEP) key exchange data.</summary>
    ///<returns><see langword="true" />
    ///  if the <see cref="T:System.Configuration.RsaProtectedConfigurationProvider" />
    ///  object is using Optimal Asymmetric Encryption Padding (OAEP) key exchange data; otherwise, <see langword="false" />
    ///  .</returns>
    property UseOAEP: Boolean read get_UseOAEP;
    ///<summary>Gets a value indicating whether the provider uses FIPS.</summary>
    ///<returns><see langword="true" />
    ///  if the provider uses FIPS; otherwise, <see langword="false" />
    ///  .</returns>
    property UseFIPS: Boolean read get_UseFIPS;
    ///<summary>Gets the public key used by the provider.</summary>
    ///<returns>An <see cref="T:System.Security.Cryptography.RSAParameters" />
    ///  object that contains the public key used by the provider.</returns>
    property RsaPublicKey: DDN.mscorlib.DNRSAParameters read get_RsaPublicKey;
    property Name: string read get_Name;
    property Description: string read get_Description;
  end;

  TDNRsaProtectedConfigurationProvider = class(TDNGenericImport<DNRsaProtectedConfigurationProviderClass, DNRsaProtectedConfigurationProvider>) end;

  //-------------namespace: System.Configuration----------------
  DNSettingsProviderClass = interface(DNProviderBaseClass)
  ['{6B5B58AE-F259-52A3-B782-536ACCA72D6E}']
  end;

  ///<summary>Acts as a base class for deriving custom settings providers in the application settings architecture.</summary>
  [DNTypeName('System.Configuration.SettingsProvider')]
  DNSettingsProvider = interface(DNProviderBase)
  ['{CEE0114E-3CE8-335E-8A06-0182EBE1454E}']
  { getters & setters } 

    function get_ApplicationName: string;
    procedure set_ApplicationName(value: string);
    function get_Name: string;
    function get_Description: string;

  { methods } 

    ///<summary>Returns the collection of settings property values for the specified application instance and settings property group.</summary>
    ///  <param name="context">A <see cref="T:System.Configuration.SettingsContext" />
    ///  describing the current application use.</param>
    ///  <param name="collection">A <see cref="T:System.Configuration.SettingsPropertyCollection" />
    ///  containing the settings property group whose values are to be retrieved.</param>
    ///<returns>A <see cref="T:System.Configuration.SettingsPropertyValueCollection" />
    ///  containing the values for the specified settings property group.</returns>
    function GetPropertyValues(context: DNSettingsContext; collection: DNSettingsPropertyCollection): DNSettingsPropertyValueCollection;
    ///<summary>Sets the values of the specified group of property settings.</summary>
    ///  <param name="context">A <see cref="T:System.Configuration.SettingsContext" />
    ///  describing the current application usage.</param>
    ///  <param name="collection">A <see cref="T:System.Configuration.SettingsPropertyValueCollection" />
    ///  representing the group of property settings to set.</param>
    procedure SetPropertyValues(context: DNSettingsContext; collection: DNSettingsPropertyValueCollection);
    procedure Initialize(name: string; config: DNNameValueCollection);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>Gets or sets the name of the currently running application.</summary>
    ///<returns>A <see cref="T:System.String" />
    ///  that contains the application's shortened name, which does not contain a full path or extension, for example, SimpleAppSettings.</returns>
    property ApplicationName: string read get_ApplicationName write set_ApplicationName;
    property Name: string read get_Name;
    property Description: string read get_Description;
  end;

  TDNSettingsProvider = class(TDNGenericImport<DNSettingsProviderClass, DNSettingsProvider>) end;

  //-------------namespace: System.Configuration----------------
  DNLocalFileSettingsProviderClass = interface(DNSettingsProviderClass)
  ['{C2C44D35-FD20-59D6-8591-1890965C9E3A}']
  { constructors } 

    ///<summary>Initializes a new instance of the <see cref="T:System.Configuration.LocalFileSettingsProvider" />
    ///  class.</summary>
    {class} function init: DNLocalFileSettingsProvider;

  end;

  ///<summary>Provides persistence for application settings classes.</summary>
  [DNTypeName('System.Configuration.LocalFileSettingsProvider')]
  DNLocalFileSettingsProvider = interface(DNSettingsProvider)
  ['{CCD0C7BD-2AC9-3644-8754-E827D70BCB88}']
  { getters & setters } 

    function get_ApplicationName: string;
    procedure set_ApplicationName(value: string);
    function get_Name: string;
    function get_Description: string;

  { methods } 

    ///<summary>Initializes the provider.</summary>
    ///  <param name="name">The friendly name of the provider.</param>
    ///  <param name="values">A collection of the name/value pairs representing the provider-specific attributes specified in the configuration for this provider.</param>
    procedure Initialize(name: string; values: DNNameValueCollection);
    ///<summary>Returns the collection of setting property values for the specified application instance and settings property group.</summary>
    ///  <param name="context">A <see cref="T:System.Configuration.SettingsContext" />
    ///  describing the current application usage.</param>
    ///  <param name="properties">A <see cref="T:System.Configuration.SettingsPropertyCollection" />
    ///  containing the settings property group whose values are to be retrieved.</param>
    ///<returns>A <see cref="T:System.Configuration.SettingsPropertyValueCollection" />
    ///  containing the values for the specified settings property group.</returns>
    ///<exception cref="T:System.Configuration.ConfigurationErrorsException">A user-scoped setting was encountered but the current configuration only supports application-scoped settings.</exception>
    function GetPropertyValues(context: DNSettingsContext; properties: DNSettingsPropertyCollection): DNSettingsPropertyValueCollection;
    ///<summary>Sets the values of the specified group of property settings.</summary>
    ///  <param name="context">A <see cref="T:System.Configuration.SettingsContext" />
    ///  describing the current application usage.</param>
    ///  <param name="values">A <see cref="T:System.Configuration.SettingsPropertyValueCollection" />
    ///  representing the group of property settings to set.</param>
    ///<exception cref="T:System.Configuration.ConfigurationErrorsException">A user-scoped setting was encountered but the current configuration only supports application-scoped settings.-or-There was a general failure saving the settings to the configuration file.</exception>
    procedure SetPropertyValues(context: DNSettingsContext; values: DNSettingsPropertyValueCollection);
    ///<summary>Resets all application settings properties associated with the specified application to their default values.</summary>
    ///  <param name="context">A <see cref="T:System.Configuration.SettingsContext" />
    ///  describing the current application usage.</param>
    ///<exception cref="T:System.Configuration.ConfigurationErrorsException">A user-scoped setting was encountered but the current configuration only supports application-scoped settings.</exception>
    procedure Reset(context: DNSettingsContext);
    ///<summary>Attempts to migrate previous user-scoped settings from a previous version of the same application.</summary>
    ///  <param name="context">A <see cref="T:System.Configuration.SettingsContext" />
    ///  describing the current application usage. </param>
    ///  <param name="properties">A <see cref="T:System.Configuration.SettingsPropertyCollection" />
    ///  containing the settings property group whose values are to be retrieved. </param>
    ///<exception cref="T:System.Configuration.ConfigurationErrorsException">A user-scoped setting was encountered but the current configuration only supports application-scoped settings.-or-The previous version of the configuration file could not be accessed.</exception>
    procedure Upgrade(context: DNSettingsContext; properties: DNSettingsPropertyCollection);
    ///<summary>Returns the value of the named settings property for the previous version of the same application. </summary>
    ///  <param name="context">A <see cref="T:System.Configuration.SettingsContext" />
    ///  that describes where the application settings property is used.</param>
    ///  <param name="property">The <see cref="T:System.Configuration.SettingsProperty" />
    ///  whose value is to be returned.</param>
    ///<returns>A <see cref="T:System.Configuration.SettingsPropertyValue" />
    ///  representing the application setting if found; otherwise, <see langword="null" />
    ///  .</returns>
    function GetPreviousVersion(context: DNSettingsContext; &property: DNSettingsProperty): DNSettingsPropertyValue;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>Gets or sets the name of the currently running application.</summary>
    ///<returns>A string that contains the application's display name.</returns>
    property ApplicationName: string read get_ApplicationName write set_ApplicationName;
    property Name: string read get_Name;
    property Description: string read get_Description;
  end;

  TDNLocalFileSettingsProvider = class(TDNGenericImport<DNLocalFileSettingsProviderClass, DNLocalFileSettingsProvider>) end;

  //-------------namespace: System.Configuration.Provider----------------
  DNProviderCollectionClass = interface(DNObjectClass)
  ['{8C06688A-4756-5591-B0A6-CFC7258B5DAD}']
  { constructors } 

    ///<summary>Initializes a new instance of the <see cref="T:System.Configuration.Provider.ProviderCollection" />
    ///  class. </summary>
    {class} function init: DNProviderCollection;

  end;

  ///<summary>Represents a collection of provider objects that inherit from <see cref="T:System.Configuration.Provider.ProviderBase" />
  ///  .</summary>
  [DNTypeName('System.Configuration.Provider.ProviderCollection')]
  DNProviderCollection = interface(DDN.mscorlib.DNIEnumerable)
  ['{51EEAC87-33DB-3D5E-B1FA-D6A04A9F844D}']
  { getters & setters } 

    function get_Item(name: string): DNProviderBase;
    function get_Count: Int32;
    function get_IsSynchronized: Boolean;
    function get_SyncRoot: DDN.mscorlib.DNObject;

  { methods } 

    ///<summary>Adds a provider to the collection.</summary>
    ///  <param name="provider">The provider to be added.</param>
    ///<exception cref="T:System.NotSupportedException">The collection is read-only.</exception><exception cref="T:System.ArgumentNullException"><paramref name="provider" />
    ///  is <see langword="null" />
    ///  .</exception><exception cref="T:System.ArgumentException">The <see cref="P:System.Configuration.Provider.ProviderBase.Name" />
    ///  of <paramref name="provider" />
    ///  is <see langword="null" />
    ///  .- or -The length of the <see cref="P:System.Configuration.Provider.ProviderBase.Name" />
    ///  of <paramref name="provider" />
    ///  is less than 1.</exception>
    procedure Add(provider: DNProviderBase);
    ///<summary>Removes a provider from the collection.</summary>
    ///  <param name="name">The name of the provider to be removed.</param>
    ///<exception cref="T:System.NotSupportedException">The collection has been set to read-only.</exception>
    procedure Remove(name: string);
    ///<summary>Returns an object that implements the <see cref="T:System.Collections.IEnumerator" />
    ///  interface to iterate through the collection.</summary>
    ///<returns>An object that implements <see cref="T:System.Collections.IEnumerator" />
    ///  to iterate through the collection.</returns>
    function GetEnumerator: DDN.mscorlib.DNIEnumerator;
    ///<summary>Sets the collection to be read-only.</summary>
    procedure SetReadOnly;
    ///<summary>Removes all items from the collection.</summary>
    ///<exception cref="T:System.NotSupportedException">The collection is set to read-only.</exception>
    procedure Clear;
    ///<summary>Copies the contents of the collection to the given array starting at the specified index.</summary>
    ///  <param name="array">The array to copy the elements of the collection to.</param>
    ///  <param name="index">The index of the collection item at which to start the copying process.</param>
    procedure CopyTo(&array: TArray<DNProviderBase>; index: Int32);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Item[name: string]: DNProviderBase read get_Item; default;
    ///<summary>Gets the number of providers in the collection.</summary>
    ///<returns>The number of providers in the collection.</returns>
    property Count: Int32 read get_Count;
    ///<summary>Gets a value indicating whether access to the collection is synchronized (thread safe).</summary>
    ///<returns><see langword="false" />
    ///  in all cases.</returns>
    property IsSynchronized: Boolean read get_IsSynchronized;
    ///<summary>Gets the current object.</summary>
    ///<returns>The current object.</returns>
    property SyncRoot: DDN.mscorlib.DNObject read get_SyncRoot;
  end;

  TDNProviderCollection = class(TDNGenericImport<DNProviderCollectionClass, DNProviderCollection>) end;

  //-------------namespace: System.Configuration----------------
  DNConfigurationBuilderCollectionClass = interface(DNProviderCollectionClass)
  ['{43A4B403-BEF5-5CE3-B13F-E2C1A85B8528}']
  { constructors } 

    ///<summary>Initializes a new instance of the <see cref="T:System.Configuration.ConfigurationBuilderCollection" />
    ///  class.</summary>
    {class} function init: DNConfigurationBuilderCollection;

  end;

  ///<summary>Maintains a collection of <see cref="T:System.Configuration.ConfigurationBuilder" />
  ///  objects by name.</summary>
  [DNTypeName('System.Configuration.ConfigurationBuilderCollection')]
  DNConfigurationBuilderCollection = interface(DNProviderCollection)
  ['{FBDB3380-5BB2-3E09-B651-0DDC5F081F32}']
  { getters & setters } 

    function get_Item(name: string): DNConfigurationBuilder;
    function get_Count: Int32;
    function get_IsSynchronized: Boolean;
    function get_SyncRoot: DDN.mscorlib.DNObject;

  { methods } 

    ///<summary>Adds a <see cref="T:System.Configuration.ConfigurationBuilder" />
    ///  object to the <see cref="T:System.Configuration.ConfigurationBuilderCollection" />
    ///  object.</summary>
    ///  <param name="builder">The <see cref="T:System.Configuration.ConfigurationBuilder" />
    ///  object to add to the collection.</param>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="builder" />
    ///  is <see langword="null" />
    ///  .</exception><exception cref="T:System.ArgumentException">
    ///  The configuration provider in <paramref name="builder" />
    ///  must implement the class <see cref="T:System.Configuration.ConfigurationBuilder" />
    ///  .</exception>
    procedure Add(builder: DNProviderBase);
    ///<summary>Removes a provider from the collection.</summary>
    ///  <param name="name">The name of the provider to be removed.</param>
    ///<exception cref="T:System.NotSupportedException">The collection has been set to read-only.</exception>
    procedure Remove(name: string);
    ///<summary>Returns an object that implements the <see cref="T:System.Collections.IEnumerator" />
    ///  interface to iterate through the collection.</summary>
    ///<returns>An object that implements <see cref="T:System.Collections.IEnumerator" />
    ///  to iterate through the collection.</returns>
    function GetEnumerator: DDN.mscorlib.DNIEnumerator;
    ///<summary>Sets the collection to be read-only.</summary>
    procedure SetReadOnly;
    ///<summary>Removes all items from the collection.</summary>
    ///<exception cref="T:System.NotSupportedException">The collection is set to read-only.</exception>
    procedure Clear;
    ///<summary>Copies the contents of the collection to the given array starting at the specified index.</summary>
    ///  <param name="array">The array to copy the elements of the collection to.</param>
    ///  <param name="index">The index of the collection item at which to start the copying process.</param>
    procedure CopyTo(&array: TArray<DNProviderBase>; index: Int32);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Item[name: string]: DNConfigurationBuilder read get_Item; default;
    ///<summary>Gets the number of providers in the collection.</summary>
    ///<returns>The number of providers in the collection.</returns>
    property Count: Int32 read get_Count;
    ///<summary>Gets a value indicating whether access to the collection is synchronized (thread safe).</summary>
    ///<returns><see langword="false" />
    ///  in all cases.</returns>
    property IsSynchronized: Boolean read get_IsSynchronized;
    ///<summary>Gets the current object.</summary>
    ///<returns>The current object.</returns>
    property SyncRoot: DDN.mscorlib.DNObject read get_SyncRoot;
  end;

  TDNConfigurationBuilderCollection = class(TDNGenericImport<DNConfigurationBuilderCollectionClass, DNConfigurationBuilderCollection>) end;

  //-------------namespace: System.Configuration----------------
  DNProtectedConfigurationProviderCollectionClass = interface(DNProviderCollectionClass)
  ['{49B25BCF-B392-5C75-926E-3239F7EF5399}']
  { constructors } 

    ///<summary>Initializes a new instance of the <see cref="T:System.Configuration.ProtectedConfigurationProviderCollection" />
    ///  class using default settings.</summary>
    {class} function init: DNProtectedConfigurationProviderCollection;

  end;

  ///<summary>Provides a collection of <see cref="T:System.Configuration.ProtectedConfigurationProvider" />
  ///  objects.</summary>
  [DNTypeName('System.Configuration.ProtectedConfigurationProviderCollection')]
  DNProtectedConfigurationProviderCollection = interface(DNProviderCollection)
  ['{617CBDDD-F936-30D6-A468-EC061962299D}']
  { getters & setters } 

    function get_Item(name: string): DNProtectedConfigurationProvider;
    function get_Count: Int32;
    function get_IsSynchronized: Boolean;
    function get_SyncRoot: DDN.mscorlib.DNObject;

  { methods } 

    ///<summary>Adds a <see cref="T:System.Configuration.ProtectedConfigurationProvider" />
    ///  object to the collection.</summary>
    ///  <param name="provider">A <see cref="T:System.Configuration.ProtectedConfigurationProvider" />
    ///  object to add to the collection.</param>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="provider" />
    ///  is <see langword="null" />
    ///  .</exception><exception cref="T:System.ArgumentException"><paramref name="provider" />
    ///  is not a <see cref="T:System.Configuration.ProtectedConfigurationProvider" />
    ///  object.</exception><exception cref="T:System.Configuration.ConfigurationException">The <see cref="T:System.Configuration.ProtectedConfigurationProvider" />
    ///  object to add already exists in the collection.- or -The collection is read-only.</exception>
    procedure Add(provider: DNProviderBase);
    ///<summary>Removes a provider from the collection.</summary>
    ///  <param name="name">The name of the provider to be removed.</param>
    ///<exception cref="T:System.NotSupportedException">The collection has been set to read-only.</exception>
    procedure Remove(name: string);
    ///<summary>Returns an object that implements the <see cref="T:System.Collections.IEnumerator" />
    ///  interface to iterate through the collection.</summary>
    ///<returns>An object that implements <see cref="T:System.Collections.IEnumerator" />
    ///  to iterate through the collection.</returns>
    function GetEnumerator: DDN.mscorlib.DNIEnumerator;
    ///<summary>Sets the collection to be read-only.</summary>
    procedure SetReadOnly;
    ///<summary>Removes all items from the collection.</summary>
    ///<exception cref="T:System.NotSupportedException">The collection is set to read-only.</exception>
    procedure Clear;
    ///<summary>Copies the contents of the collection to the given array starting at the specified index.</summary>
    ///  <param name="array">The array to copy the elements of the collection to.</param>
    ///  <param name="index">The index of the collection item at which to start the copying process.</param>
    procedure CopyTo(&array: TArray<DNProviderBase>; index: Int32);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Item[name: string]: DNProtectedConfigurationProvider read get_Item; default;
    ///<summary>Gets the number of providers in the collection.</summary>
    ///<returns>The number of providers in the collection.</returns>
    property Count: Int32 read get_Count;
    ///<summary>Gets a value indicating whether access to the collection is synchronized (thread safe).</summary>
    ///<returns><see langword="false" />
    ///  in all cases.</returns>
    property IsSynchronized: Boolean read get_IsSynchronized;
    ///<summary>Gets the current object.</summary>
    ///<returns>The current object.</returns>
    property SyncRoot: DDN.mscorlib.DNObject read get_SyncRoot;
  end;

  TDNProtectedConfigurationProviderCollection = class(TDNGenericImport<DNProtectedConfigurationProviderCollectionClass, DNProtectedConfigurationProviderCollection>) end;

  //-------------namespace: System.Configuration----------------
  DNSettingsProviderCollectionClass = interface(DNProviderCollectionClass)
  ['{DE26E59B-E4C8-58E9-B3EA-F9F99E398BCB}']
  { constructors } 

    ///<summary>Initializes a new instance of the <see cref="T:System.Configuration.SettingsProviderCollection" />
    ///  class.</summary>
    {class} function init: DNSettingsProviderCollection;

  end;

  ///<summary>Represents a collection of application settings providers.</summary>
  [DNTypeName('System.Configuration.SettingsProviderCollection')]
  DNSettingsProviderCollection = interface(DNProviderCollection)
  ['{F6880CA4-8B82-3B4C-891F-5C619E6F274B}']
  { getters & setters } 

    function get_Item(name: string): DNSettingsProvider;
    function get_Count: Int32;
    function get_IsSynchronized: Boolean;
    function get_SyncRoot: DDN.mscorlib.DNObject;

  { methods } 

    ///<summary>Adds a new settings provider to the collection.</summary>
    ///  <param name="provider">A <see cref="T:System.Configuration.Provider.ProviderBase" />
    ///  to add to the collection.</param>
    ///<exception cref="T:System.ArgumentException">The <paramref name="provider" />
    ///  parameter is not of type <see cref="T:System.Configuration.SettingsProvider" />
    ///  . -or-The <see cref="P:System.Configuration.Provider.ProviderBase.Name" />
    ///  property of the provider parameter is null or an empty string.-or-A settings provider with the same <see cref="P:System.Configuration.Provider.ProviderBase.Name" />
    ///  already exists in the collection.</exception><exception cref="T:System.NotSupportedException">The collection is read-only.</exception><exception cref="T:System.ArgumentNullException">The <paramref name="provider" />
    ///  parameter is <see langword="null" />
    ///  .</exception>
    procedure Add(provider: DNProviderBase);
    procedure Remove(name: string);
    function GetEnumerator: DDN.mscorlib.DNIEnumerator;
    procedure SetReadOnly;
    procedure Clear;
    procedure CopyTo(&array: TArray<DNProviderBase>; index: Int32);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Item[name: string]: DNSettingsProvider read get_Item; default;
    property Count: Int32 read get_Count;
    property IsSynchronized: Boolean read get_IsSynchronized;
    property SyncRoot: DDN.mscorlib.DNObject read get_SyncRoot;
  end;

  TDNSettingsProviderCollection = class(TDNGenericImport<DNSettingsProviderCollectionClass, DNSettingsProviderCollection>) end;

  //-------------namespace: System.Configuration----------------
  DNSectionInformationClass = interface(DDN.mscorlib.DNObjectClass)
  ['{AFB4D567-349A-5475-8957-A262AF7EB809}']
  end;

  ///<summary>Contains metadata about an individual section within the configuration hierarchy. This class cannot be inherited.</summary>
  [DNTypeName('System.Configuration.SectionInformation')]
  DNSectionInformation = interface(DDN.mscorlib.DNObject)
  ['{D1A006C4-4992-37F1-BB5A-CC8D068551AD}']
  { getters & setters } 

    function get_SectionName: string;
    function get_Name: string;
    function get_AllowDefinition: DNConfigurationAllowDefinition;
    procedure set_AllowDefinition(value: DNConfigurationAllowDefinition);
    function get_AllowExeDefinition: DNConfigurationAllowExeDefinition;
    procedure set_AllowExeDefinition(value: DNConfigurationAllowExeDefinition);
    function get_OverrideModeDefault: DNOverrideMode;
    procedure set_OverrideModeDefault(value: DNOverrideMode);
    function get_AllowLocation: Boolean;
    procedure set_AllowLocation(value: Boolean);
    function get_AllowOverride: Boolean;
    procedure set_AllowOverride(value: Boolean);
    function get_OverrideMode: DNOverrideMode;
    procedure set_OverrideMode(value: DNOverrideMode);
    function get_OverrideModeEffective: DNOverrideMode;
    function get_ConfigSource: string;
    procedure set_ConfigSource(value: string);
    function get_InheritInChildApplications: Boolean;
    procedure set_InheritInChildApplications(value: Boolean);
    function get_IsDeclared: Boolean;
    function get_IsDeclarationRequired: Boolean;
    function get_IsLocked: Boolean;
    function get_IsProtected: Boolean;
    function get_ConfigurationBuilder: DNConfigurationBuilder;
    function get_ProtectionProvider: DNProtectedConfigurationProvider;
    function get_RestartOnExternalChanges: Boolean;
    procedure set_RestartOnExternalChanges(value: Boolean);
    function get_RequirePermission: Boolean;
    procedure set_RequirePermission(value: Boolean);
    function get_Type: string;
    procedure set_Type(value: string);
    function get_ForceSave: Boolean;
    procedure set_ForceSave(value: Boolean);

  { methods } 

    ///<summary>Forces the associated configuration section to appear in the configuration file.</summary>
    procedure ForceDeclaration; overload;
    ///<summary>Forces the associated configuration section to appear in the configuration file, or removes an existing section from the configuration file.</summary>
    ///  <param name="force"><see langword="true" />
    ///  if the associated section should be written in the configuration file; otherwise, <see langword="false" />
    ///  .</param>
    ///<exception cref="T:System.Configuration.ConfigurationErrorsException"><paramref name="force" />
    ///  is <see langword="true" />
    ///  and the associated section cannot be exported to the child configuration file, or it is undeclared.</exception>
    procedure ForceDeclaration(force: Boolean); overload;
    ///<summary>Removes the protected configuration encryption from the associated configuration section.</summary>
    procedure UnprotectSection;
    ///<summary>Gets the configuration section that contains the configuration section associated with this object.</summary>
    ///<returns>The configuration section that contains the <see cref="T:System.Configuration.ConfigurationSection" />
    ///  that is associated with this <see cref="T:System.Configuration.SectionInformation" />
    ///  object.</returns>
    ///<exception cref="T:System.InvalidOperationException">The method is invoked from a parent section.</exception>
    function GetParentSection: DNConfigurationSection;
    ///<summary>Returns an XML node object that represents the associated configuration-section object.</summary>
    ///<returns>The XML representation for this configuration section.</returns>
    ///<exception cref="T:System.InvalidOperationException">This configuration object is locked and cannot be edited.</exception>
    function GetRawXml: string;
    ///<summary>Sets the object to an XML representation of the associated configuration section within the configuration file.</summary>
    ///  <param name="rawXml">The XML to use.</param>
    ///<exception cref="T:System.ArgumentException"><paramref name="rawXml" />
    ///  is <see langword="null" />
    ///  .</exception>
    procedure SetRawXml(rawXml: string);
    ///<summary>Causes the associated configuration section to inherit all its values from the parent section.</summary>
    ///<exception cref="T:System.InvalidOperationException">This method cannot be called outside editing mode.</exception>
    procedure RevertToParent;
    ///<summary>Marks a configuration section for protection. </summary>
    ///  <param name="protectionProvider">The name of the protection provider to use.</param>
    ///<exception cref="T:System.InvalidOperationException">The <see cref="P:System.Configuration.SectionInformation.AllowLocation" />
    ///  property is set to <see langword="false" />
    ///  .- or -The target section is already a protected data section.</exception>
    procedure ProtectSection(protectionProvider: string);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>Gets the name of the associated configuration section.</summary>
    ///<returns>The name of the associated <see cref="T:System.Configuration.ConfigurationSection" />
    ///  object.</returns>
    property SectionName: string read get_SectionName;
    ///<summary>Gets the name of the associated configuration section.</summary>
    ///<returns>The complete name of the configuration section.</returns>
    property Name: string read get_Name;
    ///<summary>Gets or sets a value that indicates where in the configuration file hierarchy the associated configuration section can be defined. </summary>
    ///<returns>A value that indicates where in the configuration file hierarchy the associated <see cref="T:System.Configuration.ConfigurationSection" />
    ///  object can be declared.</returns>
    ///<exception cref="T:System.Configuration.ConfigurationErrorsException">The selected value conflicts with a value that is already defined.</exception>
    property AllowDefinition: DNConfigurationAllowDefinition read get_AllowDefinition write set_AllowDefinition;
    ///<summary>Gets or sets a value that indicates where in the configuration file hierarchy the associated configuration section can be declared.</summary>
    ///<returns>A value that indicates where in the configuration file hierarchy the associated <see cref="T:System.Configuration.ConfigurationSection" />
    ///  object can be declared for .exe files.</returns>
    ///<exception cref="T:System.Configuration.ConfigurationErrorsException">The selected value conflicts with a value that is already defined.</exception>
    property AllowExeDefinition: DNConfigurationAllowExeDefinition read get_AllowExeDefinition write set_AllowExeDefinition;
    ///<summary>Gets or sets a value that specifies the default override behavior of a configuration section by child configuration files.</summary>
    ///<returns>One of the <see cref="T:System.Configuration.OverrideMode" />
    ///  enumeration values.</returns>
    ///<exception cref="T:System.Configuration.ConfigurationErrorsException">The override behavior is specified in a parent configuration section.</exception>
    property OverrideModeDefault: DNOverrideMode read get_OverrideModeDefault write set_OverrideModeDefault;
    ///<summary>Gets or sets a value that indicates whether the configuration section allows the <see langword="location" />
    ///  attribute.</summary>
    ///<returns><see langword="true" />
    ///  if the <see langword="location" />
    ///  attribute is allowed; otherwise, <see langword="false" />
    ///  . The default is <see langword="true" />
    ///  .</returns>
    ///<exception cref="T:System.Configuration.ConfigurationErrorsException">The selected value conflicts with a value that is already defined.</exception>
    property AllowLocation: Boolean read get_AllowLocation write set_AllowLocation;
    ///<summary>Gets or sets a value that indicates whether the associated configuration section can be overridden by lower-level configuration files.</summary>
    ///<returns><see langword="true" />
    ///  if the section can be overridden; otherwise, <see langword="false" />
    ///  . The default is <see langword="false" />
    ///  .</returns>
    property AllowOverride: Boolean read get_AllowOverride write set_AllowOverride;
    ///<summary>Gets or sets the <see cref="T:System.Configuration.OverrideMode" />
    ///  enumeration value that specifies whether the associated configuration section can be overridden by child configuration files.</summary>
    ///<returns>One of the <see cref="T:System.Configuration.OverrideMode" />
    ///  enumeration values.</returns>
    ///<exception cref="T:System.Configuration.ConfigurationErrorsException">An attempt was made to change both the <see cref="P:System.Configuration.SectionInformation.AllowOverride" />
    ///  and <see cref="P:System.Configuration.SectionInformation.OverrideMode" />
    ///  properties, which is not supported for compatibility reasons. </exception>
    property OverrideMode: DNOverrideMode read get_OverrideMode write set_OverrideMode;
    ///<summary>Gets the override behavior of a configuration section that is in turn based on whether child configuration files can lock the configuration section. </summary>
    ///<returns>One of the <see cref="T:System.Configuration.OverrideMode" />
    ///  enumeration values.</returns>
    property OverrideModeEffective: DNOverrideMode read get_OverrideModeEffective;
    ///<summary>Gets or sets the name of the include file in which the associated configuration section is defined, if such a file exists.</summary>
    ///<returns>The name of the include file in which the associated <see cref="T:System.Configuration.ConfigurationSection" />
    ///  is defined, if such a file exists; otherwise, an empty string ("").</returns>
    property ConfigSource: string read get_ConfigSource write set_ConfigSource;
    ///<summary>Gets or sets a value that indicates whether the settings that are specified in the associated configuration section are inherited by applications that reside in a subdirectory of the relevant application.</summary>
    ///<returns><see langword="true" />
    ///  if the settings specified in this <see cref="T:System.Configuration.ConfigurationSection" />
    ///  object are inherited by child applications; otherwise, <see langword="false" />
    ///  . The default is <see langword="true" />
    ///  .</returns>
    property InheritInChildApplications: Boolean read get_InheritInChildApplications write set_InheritInChildApplications;
    ///<summary>Gets a value that indicates whether the associated configuration section is declared in the configuration file.</summary>
    ///<returns><see langword="true" />
    ///  if this <see cref="T:System.Configuration.ConfigurationSection" />
    ///  is declared in the configuration file; otherwise, <see langword="false" />
    ///  . The default is <see langword="true" />
    ///  .</returns>
    property IsDeclared: Boolean read get_IsDeclared;
    ///<summary>Gets a value that indicates whether the configuration section must be declared in the configuration file.</summary>
    ///<returns><see langword="true" />
    ///  if the associated <see cref="T:System.Configuration.ConfigurationSection" />
    ///  object must be declared in the configuration file; otherwise, <see langword="false" />
    ///  .</returns>
    property IsDeclarationRequired: Boolean read get_IsDeclarationRequired;
    ///<summary>Gets a value that indicates whether the associated configuration section is locked.</summary>
    ///<returns><see langword="true" />
    ///  if the section is locked; otherwise, <see langword="false" />
    ///  . </returns>
    property IsLocked: Boolean read get_IsLocked;
    ///<summary>Gets a value that indicates whether the associated configuration section is protected.</summary>
    ///<returns><see langword="true" />
    ///  if this <see cref="T:System.Configuration.ConfigurationSection" />
    ///  is protected; otherwise, <see langword="false" />
    ///  . The default is <see langword="false" />
    ///  .</returns>
    property IsProtected: Boolean read get_IsProtected;
    ///<summary>Gets the <see cref="T:System.Configuration.ConfigurationBuilder" />
    ///  object for this configuration section.</summary>
    ///<returns>The <see cref="T:System.Configuration.ConfigurationBuilder" />
    ///  object for this configuration section.</returns>
    property ConfigurationBuilder: DNConfigurationBuilder read get_ConfigurationBuilder;
    ///<summary>Gets the protected configuration provider for the associated configuration section.</summary>
    ///<returns>The protected configuration provider for this <see cref="T:System.Configuration.ConfigurationSection" />
    ///  object.</returns>
    property ProtectionProvider: DNProtectedConfigurationProvider read get_ProtectionProvider;
    ///<summary>Gets or sets a value that specifies whether a change in an external configuration include file requires an application restart.</summary>
    ///<returns><see langword="true" />
    ///  if a change in an external configuration include file requires an application restart; otherwise, <see langword="false" />
    ///  . The default is <see langword="true" />
    ///  .</returns>
    ///<exception cref="T:System.Configuration.ConfigurationErrorsException">The selected value conflicts with a value that is already defined.</exception>
    property RestartOnExternalChanges: Boolean read get_RestartOnExternalChanges write set_RestartOnExternalChanges;
    ///<summary>Gets a value that indicates whether the associated configuration section requires access permissions.</summary>
    ///<returns><see langword="true" />
    ///  if the <see langword="requirePermission" />
    ///  attribute is set to <see langword="true" />
    ///  ; otherwise, <see langword="false" />
    ///  . The default is <see langword="true" />
    ///  .</returns>
    ///<exception cref="T:System.Configuration.ConfigurationErrorsException">The selected value conflicts with a value that is already defined.</exception>
    property RequirePermission: Boolean read get_RequirePermission write set_RequirePermission;
    ///<summary>Gets or sets the section class name.</summary>
    ///<returns>The name of the class that is associated with this <see cref="T:System.Configuration.ConfigurationSection" />
    ///  section.</returns>
    ///<exception cref="T:System.ArgumentException">The selected value is <see langword="null" />
    ///  or an empty string ("").</exception><exception cref="T:System.Configuration.ConfigurationErrorsException">The selected value conflicts with a value that is already defined.</exception>
    property &Type: string read get_Type write set_Type;
    ///<summary>Gets or sets a value that indicates whether the associated configuration section will be saved even if it has not been modified.</summary>
    ///<returns><see langword="true" />
    ///  if the associated <see cref="T:System.Configuration.ConfigurationSection" />
    ///  object will be saved even if it has not been modified; otherwise, <see langword="false" />
    ///  . The default is <see langword="false" />
    ///  .If the configuration file is saved (even if there are no modifications), ASP.NET restarts the application.</returns>
    property ForceSave: Boolean read get_ForceSave write set_ForceSave;
  end;

  TDNSectionInformation = class(TDNGenericImport<DNSectionInformationClass, DNSectionInformation>) end;

  //-------------namespace: System.Configuration----------------
  DNSettingsBaseClass = interface(DDN.mscorlib.DNObjectClass)
  ['{0B7FCF44-BB7B-5D94-B0DB-B636B3AE479E}']
  { static methods } 

    ///<summary>Provides a <see cref="T:System.Configuration.SettingsBase" />
    ///  class that is synchronized (thread safe).</summary>
    ///  <param name="settingsBase">The class used to support user property settings.</param>
    ///<returns>A <see cref="T:System.Configuration.SettingsBase" />
    ///  class that is synchronized.</returns>
    {class} function Synchronized(settingsBase: DNSettingsBase): DNSettingsBase;

  end;

  ///<summary>Provides the base class used to support user property settings.</summary>
  [DNTypeName('System.Configuration.SettingsBase')]
  DNSettingsBase = interface(DDN.mscorlib.DNObject)
  ['{D92C4008-8968-3DE5-BEB1-B15A4168989E}']
  { getters & setters } 

    function get_Item(propertyName: string): DDN.mscorlib.DNObject;
    procedure set_Item(propertyName: string; value: DDN.mscorlib.DNObject);
    function get_Properties: DNSettingsPropertyCollection;
    function get_Providers: DNSettingsProviderCollection;
    function get_PropertyValues: DNSettingsPropertyValueCollection;
    function get_Context: DNSettingsContext;
    function get_IsSynchronized: Boolean;

  { methods } 

    ///<summary>Initializes internal properties used by <see cref="T:System.Configuration.SettingsBase" />
    ///  object.</summary>
    ///  <param name="context">The settings context related to the settings properties.</param>
    ///  <param name="properties">The settings properties that will be accessible from the <see cref="T:System.Configuration.SettingsBase" />
    ///  instance.</param>
    ///  <param name="providers">The initialized providers that should be used when loading and saving property values.</param>
    procedure Initialize(context: DNSettingsContext; properties: DNSettingsPropertyCollection; providers: DNSettingsProviderCollection);
    ///<summary>Stores the current values of the settings properties.</summary>
    procedure Save;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Item[propertyName: string]: DDN.mscorlib.DNObject read get_Item write set_Item; default;
    ///<summary>Gets the collection of settings properties.</summary>
    ///<returns>A <see cref="T:System.Configuration.SettingsPropertyCollection" />
    ///  collection containing all the <see cref="T:System.Configuration.SettingsProperty" />
    ///  objects.</returns>
    property Properties: DNSettingsPropertyCollection read get_Properties;
    ///<summary>Gets a collection of settings providers.</summary>
    ///<returns>A <see cref="T:System.Configuration.SettingsProviderCollection" />
    ///  containing <see cref="T:System.Configuration.SettingsProvider" />
    ///  objects.</returns>
    property Providers: DNSettingsProviderCollection read get_Providers;
    ///<summary>Gets a collection of settings property values.</summary>
    ///<returns>A collection of <see cref="T:System.Configuration.SettingsPropertyValue" />
    ///  objects representing the actual data values for the properties managed by the <see cref="T:System.Configuration.SettingsBase" />
    ///  instance.</returns>
    property PropertyValues: DNSettingsPropertyValueCollection read get_PropertyValues;
    ///<summary>Gets the associated settings context.</summary>
    ///<returns>A <see cref="T:System.Configuration.SettingsContext" />
    ///  associated with the settings instance.</returns>
    property Context: DNSettingsContext read get_Context;
    ///<summary>Gets a value indicating whether access to the object is synchronized (thread safe). </summary>
    ///<returns><see langword="true" />
    ///  if access to the <see cref="T:System.Configuration.SettingsBase" />
    ///  is synchronized; otherwise, <see langword="false" />
    ///  .</returns>
    property IsSynchronized: Boolean read get_IsSynchronized;
  end;

  TDNSettingsBase = class(TDNGenericImport<DNSettingsBaseClass, DNSettingsBase>) end;

  //-------------namespace: System.Configuration----------------
  DNApplicationSettingsBaseClass = interface(DNSettingsBaseClass)
  ['{2C8BEAE8-CD5A-5A3A-B75B-C4E32AC5FF28}']
  end;

  ///<summary>Acts as a base class for deriving concrete wrapper classes to implement the application settings feature in Window Forms applications.</summary>
  [DNTypeName('System.Configuration.ApplicationSettingsBase')]
  DNApplicationSettingsBase = interface(DNSettingsBase)
  ['{378E94FA-615F-3BE4-855C-A831F60D9D75}']
  { getters & setters } 

    function get_Context: DNSettingsContext;
    function get_Properties: DNSettingsPropertyCollection;
    function get_PropertyValues: DNSettingsPropertyValueCollection;
    function get_Providers: DNSettingsProviderCollection;
    function get_SettingsKey: string;
    procedure set_SettingsKey(value: string);
    function get_Item(propertyName: string): DDN.mscorlib.DNObject;
    procedure set_Item(propertyName: string; value: DDN.mscorlib.DNObject);
    function get_IsSynchronized: Boolean;

  { events } 

    procedure add_PropertyChanged(value: DNPropertyChangedEventHandler);
    procedure remove_PropertyChanged(value: DNPropertyChangedEventHandler);
    procedure add_SettingChanging(value: DNSettingChangingEventHandler);
    procedure remove_SettingChanging(value: DNSettingChangingEventHandler);
    procedure add_SettingsLoaded(value: DNSettingsLoadedEventHandler);
    procedure remove_SettingsLoaded(value: DNSettingsLoadedEventHandler);
    procedure add_SettingsSaving(value: DNSettingsSavingEventHandler);
    procedure remove_SettingsSaving(value: DNSettingsSavingEventHandler);

  { methods } 

    ///<summary>Returns the value of the named settings property for the previous version of the same application.</summary>
    ///  <param name="propertyName">A <see cref="T:System.String" />
    ///  containing the name of the settings property whose value is to be returned.</param>
    ///<returns>An <see cref="T:System.Object" />
    ///  containing the value of the specified <see cref="T:System.Configuration.SettingsProperty" />
    ///  if found; otherwise, <see langword="null" />
    ///  .</returns>
    ///<exception cref="T:System.Configuration.SettingsPropertyNotFoundException">The property does not exist. The property count is zero or the property cannot be found in the data store.</exception>
    function GetPreviousVersion(propertyName: string): DDN.mscorlib.DNObject;
    ///<summary>Refreshes the application settings property values from persistent storage.</summary>
    procedure Reload;
    ///<summary>Stores the current values of the application settings properties.</summary>
    procedure Save;
    ///<summary>Restores the persisted application settings values to their corresponding default properties.</summary>
    ///<exception cref="T:System.Configuration.ConfigurationErrorsException">The configuration file could not be parsed.</exception>
    procedure Reset;
    ///<summary>Updates application settings to reflect a more recent installation of the application.</summary>
    ///<exception cref="T:System.Configuration.ConfigurationErrorsException">The configuration file could not be parsed.</exception>
    procedure Upgrade;
    ///<summary>Initializes internal properties used by <see cref="T:System.Configuration.SettingsBase" />
    ///  object.</summary>
    ///  <param name="context">The settings context related to the settings properties.</param>
    ///  <param name="properties">The settings properties that will be accessible from the <see cref="T:System.Configuration.SettingsBase" />
    ///  instance.</param>
    ///  <param name="providers">The initialized providers that should be used when loading and saving property values.</param>
    procedure Initialize(context: DNSettingsContext; properties: DNSettingsPropertyCollection; providers: DNSettingsProviderCollection);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>Gets the application settings context associated with the settings group.</summary>
    ///<returns>A <see cref="T:System.Configuration.SettingsContext" />
    ///  associated with the settings group.</returns>
    property Context: DNSettingsContext read get_Context;
    ///<summary>Gets the collection of settings properties in the wrapper.</summary>
    ///<returns>A <see cref="T:System.Configuration.SettingsPropertyCollection" />
    ///  containing all the <see cref="T:System.Configuration.SettingsProperty" />
    ///  objects used in the current wrapper.</returns>
    ///<exception cref="T:System.Configuration.ConfigurationErrorsException">The associated settings provider could not be found or its instantiation failed. </exception>
    property Properties: DNSettingsPropertyCollection read get_Properties;
    ///<summary>Gets a collection of property values.</summary>
    ///<returns>A <see cref="T:System.Configuration.SettingsPropertyValueCollection" />
    ///  of property values.</returns>
    property PropertyValues: DNSettingsPropertyValueCollection read get_PropertyValues;
    ///<summary>Gets the collection of application settings providers used by the wrapper.</summary>
    ///<returns>A <see cref="T:System.Configuration.SettingsProviderCollection" />
    ///  containing all the <see cref="T:System.Configuration.SettingsProvider" />
    ///  objects used by the settings properties of the current settings wrapper.</returns>
    property Providers: DNSettingsProviderCollection read get_Providers;
    ///<summary>Gets or sets the settings key for the application settings group.</summary>
    ///<returns>A <see cref="T:System.String" />
    ///  containing the settings key for the current settings group.</returns>
    property SettingsKey: string read get_SettingsKey write set_SettingsKey;
    property Item[propertyName: string]: DDN.mscorlib.DNObject read get_Item write set_Item; default;
    ///<summary>Gets a value indicating whether access to the object is synchronized (thread safe). </summary>
    ///<returns><see langword="true" />
    ///  if access to the <see cref="T:System.Configuration.SettingsBase" />
    ///  is synchronized; otherwise, <see langword="false" />
    ///  .</returns>
    property IsSynchronized: Boolean read get_IsSynchronized;
  end;

  TDNApplicationSettingsBase = class(TDNGenericImport<DNApplicationSettingsBaseClass, DNApplicationSettingsBase>) end;

  //-------------namespace: System.Configuration----------------
  DNSettingsPropertyClass = interface(DDN.mscorlib.DNObjectClass)
  ['{CB9562D0-0010-5877-BB64-3BBE2BF846AF}']
  { constructors } 

    ///<summary>Initializes a new instance of the <see cref="T:System.Configuration.SettingsProperty" />
    ///  class. based on the supplied parameter.</summary>
    ///  <param name="name">Specifies the name of an existing <see cref="T:System.Configuration.SettingsProperty" />
    ///  object.</param>
    {class} function init(name: string): DNSettingsProperty; overload;
    ///<summary>Creates a new instance of the <see cref="T:System.Configuration.SettingsProperty" />
    ///  class based on the supplied parameters.</summary>
    ///  <param name="name">The name of the <see cref="T:System.Configuration.SettingsProperty" />
    ///  object.</param>
    ///  <param name="propertyType">The type of <see cref="T:System.Configuration.SettingsProperty" />
    ///  object.</param>
    ///  <param name="provider">A <see cref="T:System.Configuration.SettingsProvider" />
    ///  object to use for persistence.</param>
    ///  <param name="isReadOnly">A <see cref="T:System.Boolean" />
    ///  value specifying whether the <see cref="T:System.Configuration.SettingsProperty" />
    ///  object is read-only.</param>
    ///  <param name="defaultValue">The default value of the <see cref="T:System.Configuration.SettingsProperty" />
    ///  object.</param>
    ///  <param name="serializeAs">A <see cref="T:System.Configuration.SettingsSerializeAs" />
    ///  object. This object is an enumeration used to set the serialization scheme for storing application settings.</param>
    ///  <param name="attributes">A <see cref="T:System.Configuration.SettingsAttributeDictionary" />
    ///  object.</param>
    ///  <param name="throwOnErrorDeserializing">A Boolean value specifying whether an error will be thrown when the property is unsuccessfully deserialized.</param>
    ///  <param name="throwOnErrorSerializing">A Boolean value specifying whether an error will be thrown when the property is unsuccessfully serialized.</param>
    {class} function init(name: string; propertyType: DDN.mscorlib.DNType; provider: DNSettingsProvider; isReadOnly: Boolean; defaultValue: DDN.mscorlib.DNObject; serializeAs: DNSettingsSerializeAs; attributes: DNSettingsAttributeDictionary; throwOnErrorDeserializing: Boolean; throwOnErrorSerializing: Boolean): DNSettingsProperty; overload;
    ///<summary>Initializes a new instance of the <see cref="T:System.Configuration.SettingsProperty" />
    ///  class, based on the supplied parameter.</summary>
    ///  <param name="propertyToCopy">Specifies a copy of an existing <see cref="T:System.Configuration.SettingsProperty" />
    ///  object.</param>
    {class} function init(propertyToCopy: DNSettingsProperty): DNSettingsProperty; overload;

  end;

  ///<summary>Used internally as the class that represents metadata about an individual configuration property.</summary>
  [DNTypeName('System.Configuration.SettingsProperty')]
  DNSettingsProperty = interface(DDN.mscorlib.DNObject)
  ['{4811A1E8-3A81-3395-AD64-02DBAA8C1D99}']
  { getters & setters } 

    function get_Name: string;
    procedure set_Name(value: string);
    function get_IsReadOnly: Boolean;
    procedure set_IsReadOnly(value: Boolean);
    function get_DefaultValue: DDN.mscorlib.DNObject;
    procedure set_DefaultValue(value: DDN.mscorlib.DNObject);
    function get_PropertyType: DDN.mscorlib.DNType;
    procedure set_PropertyType(value: DDN.mscorlib.DNType);
    function get_SerializeAs: DNSettingsSerializeAs;
    procedure set_SerializeAs(value: DNSettingsSerializeAs);
    function get_Provider: DNSettingsProvider;
    procedure set_Provider(value: DNSettingsProvider);
    function get_Attributes: DNSettingsAttributeDictionary;
    function get_ThrowOnErrorDeserializing: Boolean;
    procedure set_ThrowOnErrorDeserializing(value: Boolean);
    function get_ThrowOnErrorSerializing: Boolean;
    procedure set_ThrowOnErrorSerializing(value: Boolean);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>Gets or sets the name of the <see cref="T:System.Configuration.SettingsProperty" />
    ///  .</summary>
    ///<returns>The name of the <see cref="T:System.Configuration.SettingsProperty" />
    ///  .</returns>
    property Name: string read get_Name write set_Name;
    ///<summary>Gets or sets a value specifying whether a <see cref="T:System.Configuration.SettingsProperty" />
    ///  object is read-only. </summary>
    ///<returns><see langword="true" />
    ///  if the <see cref="T:System.Configuration.SettingsProperty" />
    ///  is read-only; otherwise, <see langword="false" />
    ///  .</returns>
    property IsReadOnly: Boolean read get_IsReadOnly write set_IsReadOnly;
    ///<summary>Gets or sets the default value of the <see cref="T:System.Configuration.SettingsProperty" />
    ///  object.</summary>
    ///<returns>An object containing the default value of the <see cref="T:System.Configuration.SettingsProperty" />
    ///  object.</returns>
    property DefaultValue: DDN.mscorlib.DNObject read get_DefaultValue write set_DefaultValue;
    ///<summary>Gets or sets the type for the <see cref="T:System.Configuration.SettingsProperty" />
    ///  .</summary>
    ///<returns>The type for the <see cref="T:System.Configuration.SettingsProperty" />
    ///  .</returns>
    property PropertyType: DDN.mscorlib.DNType read get_PropertyType write set_PropertyType;
    ///<summary>Gets or sets a <see cref="T:System.Configuration.SettingsSerializeAs" />
    ///  object for the <see cref="T:System.Configuration.SettingsProperty" />
    ///  .</summary>
    ///<returns>A <see cref="T:System.Configuration.SettingsSerializeAs" />
    ///  object.</returns>
    property SerializeAs: DNSettingsSerializeAs read get_SerializeAs write set_SerializeAs;
    ///<summary>Gets or sets the provider for the <see cref="T:System.Configuration.SettingsProperty" />
    ///  .</summary>
    ///<returns>A <see cref="T:System.Configuration.SettingsProvider" />
    ///  object.</returns>
    property Provider: DNSettingsProvider read get_Provider write set_Provider;
    ///<summary>Gets a <see cref="T:System.Configuration.SettingsAttributeDictionary" />
    ///  object containing the attributes of the <see cref="T:System.Configuration.SettingsProperty" />
    ///  object.</summary>
    ///<returns>A <see cref="T:System.Configuration.SettingsAttributeDictionary" />
    ///  object.</returns>
    property Attributes: DNSettingsAttributeDictionary read get_Attributes;
    ///<summary>Gets or sets a value specifying whether an error will be thrown when the property is unsuccessfully deserialized.</summary>
    ///<returns><see langword="true" />
    ///  if the error will be thrown when the property is unsuccessfully deserialized; otherwise, <see langword="false" />
    ///  .</returns>
    property ThrowOnErrorDeserializing: Boolean read get_ThrowOnErrorDeserializing write set_ThrowOnErrorDeserializing;
    ///<summary>Gets or sets a value specifying whether an error will be thrown when the property is unsuccessfully serialized.</summary>
    ///<returns><see langword="true" />
    ///  if the error will be thrown when the property is unsuccessfully serialized; otherwise, <see langword="false" />
    ///  .</returns>
    property ThrowOnErrorSerializing: Boolean read get_ThrowOnErrorSerializing write set_ThrowOnErrorSerializing;
  end;

  TDNSettingsProperty = class(TDNGenericImport<DNSettingsPropertyClass, DNSettingsProperty>) end;

  //-------------namespace: System.Configuration----------------
  DNSettingsPropertyCollectionClass = interface(DNObjectClass)
  ['{46A41E74-C959-5B80-ACA4-B54AEF9F1B87}']
  { constructors } 

    ///<summary>Initializes a new instance of the <see cref="T:System.Configuration.SettingsPropertyCollection" />
    ///  class.</summary>
    {class} function init: DNSettingsPropertyCollection;

  end;

  ///<summary>Contains a collection of <see cref="T:System.Configuration.SettingsProperty" />
  ///  objects.</summary>
  [DNTypeName('System.Configuration.SettingsPropertyCollection')]
  DNSettingsPropertyCollection = interface(DDN.mscorlib.DNIEnumerable)
  ['{1367B8BE-C194-337F-8D70-91D4C6D43A9E}']
  { getters & setters } 

    function get_Item(name: string): DNSettingsProperty;
    function get_Count: Int32;
    function get_IsSynchronized: Boolean;
    function get_SyncRoot: DDN.mscorlib.DNObject;

  { methods } 

    ///<summary>Adds a <see cref="T:System.Configuration.SettingsProperty" />
    ///  object to the collection.</summary>
    ///  <param name="property">A <see cref="T:System.Configuration.SettingsProperty" />
    ///  object.</param>
    ///<exception cref="T:System.NotSupportedException">The collection is read-only.</exception>
    procedure Add(&property: DNSettingsProperty);
    ///<summary>Removes a <see cref="T:System.Configuration.SettingsProperty" />
    ///  object from the collection.</summary>
    ///  <param name="name">The name of the <see cref="T:System.Configuration.SettingsProperty" />
    ///  object.</param>
    ///<exception cref="T:System.NotSupportedException">The collection is read-only.</exception>
    procedure Remove(name: string);
    ///<summary>Gets the <see cref="T:System.Collections.IEnumerator" />
    ///  object as it applies to the collection.</summary>
    ///<returns>The <see cref="T:System.Collections.IEnumerator" />
    ///  object as it applies to the collection.</returns>
    function GetEnumerator: DDN.mscorlib.DNIEnumerator;
    ///<summary>Creates a copy of the existing collection.</summary>
    ///<returns>A <see cref="T:System.Configuration.SettingsPropertyCollection" />
    ///  class.</returns>
    function Clone: DDN.mscorlib.DNObject;
    ///<summary>Sets the collection to be read-only.</summary>
    procedure SetReadOnly;
    ///<summary>Removes all <see cref="T:System.Configuration.SettingsProperty" />
    ///  objects from the collection.</summary>
    ///<exception cref="T:System.NotSupportedException">The collection is read-only.</exception>
    procedure Clear;
    ///<summary>Copies this <see cref="T:System.Configuration.SettingsPropertyCollection" />
    ///  object to an array.</summary>
    ///  <param name="array">The array to copy the object to.</param>
    ///  <param name="index">The index at which to begin copying.</param>
    procedure CopyTo(&array: DDN.mscorlib.DNArray; index: Int32);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Item[name: string]: DNSettingsProperty read get_Item; default;
    ///<summary>Gets a value that specifies the number of <see cref="T:System.Configuration.SettingsProperty" />
    ///  objects in the collection.</summary>
    ///<returns>The number of <see cref="T:System.Configuration.SettingsProperty" />
    ///  objects in the collection.</returns>
    property Count: Int32 read get_Count;
    ///<summary>Gets a value that indicates whether access to the collection is synchronized (thread safe).</summary>
    ///<returns><see langword="true" />
    ///  if access to the <see cref="T:System.Configuration.SettingsPropertyCollection" />
    ///  is synchronized; otherwise, <see langword="false" />
    ///  .</returns>
    property IsSynchronized: Boolean read get_IsSynchronized;
    ///<summary>Gets the object to synchronize access to the collection.</summary>
    ///<returns>The object to synchronize access to the collection.</returns>
    property SyncRoot: DDN.mscorlib.DNObject read get_SyncRoot;
  end;

  TDNSettingsPropertyCollection = class(TDNGenericImport<DNSettingsPropertyCollectionClass, DNSettingsPropertyCollection>) end;

  //-------------namespace: System.Configuration----------------
  DNSettingsPropertyValueClass = interface(DDN.mscorlib.DNObjectClass)
  ['{3186202F-5705-5B74-967C-23EE4A736BD5}']
  { constructors } 

    ///<summary>Initializes a new instance of the <see cref="T:System.Configuration.SettingsPropertyValue" />
    ///  class, based on supplied parameters.</summary>
    ///  <param name="property">Specifies a <see cref="T:System.Configuration.SettingsProperty" />
    ///  object.</param>
    {class} function init(&property: DNSettingsProperty): DNSettingsPropertyValue;

  end;

  ///<summary>Contains the value of a settings property that can be loaded and stored by an instance of <see cref="T:System.Configuration.SettingsBase" />
  ///  .</summary>
  [DNTypeName('System.Configuration.SettingsPropertyValue')]
  DNSettingsPropertyValue = interface(DDN.mscorlib.DNObject)
  ['{34FE0154-F1C2-3867-BFAA-04909BA37553}']
  { getters & setters } 

    function get_Name: string;
    function get_IsDirty: Boolean;
    procedure set_IsDirty(value: Boolean);
    function get_Property: DNSettingsProperty;
    function get_UsingDefaultValue: Boolean;
    function get_PropertyValue: DDN.mscorlib.DNObject;
    procedure set_PropertyValue(value: DDN.mscorlib.DNObject);
    function get_SerializedValue: DDN.mscorlib.DNObject;
    procedure set_SerializedValue(value: DDN.mscorlib.DNObject);
    function get_Deserialized: Boolean;
    procedure set_Deserialized(value: Boolean);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>Gets the name of the property from the associated <see cref="T:System.Configuration.SettingsProperty" />
    ///  object.</summary>
    ///<returns>The name of the <see cref="T:System.Configuration.SettingsProperty" />
    ///  object.</returns>
    property Name: string read get_Name;
    ///<summary>Gets or sets whether the value of a <see cref="T:System.Configuration.SettingsProperty" />
    ///  object has changed. </summary>
    ///<returns><see langword="true" />
    ///  if the value of a <see cref="T:System.Configuration.SettingsProperty" />
    ///  object has changed; otherwise, <see langword="false" />
    ///  .</returns>
    property IsDirty: Boolean read get_IsDirty write set_IsDirty;
    ///<summary>Gets the <see cref="T:System.Configuration.SettingsProperty" />
    ///  object.</summary>
    ///<returns>The <see cref="T:System.Configuration.SettingsProperty" />
    ///  object that describes the <see cref="T:System.Configuration.SettingsPropertyValue" />
    ///  object.</returns>
    property &Property: DNSettingsProperty read get_Property;
    ///<summary>Gets a Boolean value specifying whether the value of the <see cref="T:System.Configuration.SettingsPropertyValue" />
    ///  object is the default value as defined by the <see cref="P:System.Configuration.SettingsProperty.DefaultValue" />
    ///  property value on the associated <see cref="T:System.Configuration.SettingsProperty" />
    ///  object.</summary>
    ///<returns><see langword="true" />
    ///  if the value of the <see cref="T:System.Configuration.SettingsProperty" />
    ///  object is the default value; otherwise, <see langword="false" />
    ///  .</returns>
    property UsingDefaultValue: Boolean read get_UsingDefaultValue;
    ///<summary>Gets or sets the value of the <see cref="T:System.Configuration.SettingsProperty" />
    ///  object.</summary>
    ///<returns>The value of the <see cref="T:System.Configuration.SettingsProperty" />
    ///  object. When this value is set, the <see cref="P:System.Configuration.SettingsPropertyValue.IsDirty" />
    ///  property is set to <see langword="true" />
    ///  and <see cref="P:System.Configuration.SettingsPropertyValue.UsingDefaultValue" />
    ///  is set to <see langword="false" />
    ///  .When a value is first accessed from the <see cref="P:System.Configuration.SettingsPropertyValue.PropertyValue" />
    ///  property, and if the value was initially stored into the <see cref="T:System.Configuration.SettingsPropertyValue" />
    ///  object as a serialized representation using the <see cref="P:System.Configuration.SettingsPropertyValue.SerializedValue" />
    ///  property, the <see cref="P:System.Configuration.SettingsPropertyValue.PropertyValue" />
    ///  property will trigger deserialization of the underlying value.  As a side effect, the <see cref="P:System.Configuration.SettingsPropertyValue.Deserialized" />
    ///  property will be set to <see langword="true" />
    ///  .If this chain of events occurs in ASP.NET, and if an error occurs during the deserialization process, the error is logged using the health-monitoring feature of ASP.NET. By default, this means that deserialization errors will show up in the Application Event Log when running under ASP.NET. If this process occurs outside of ASP.NET, and if an error occurs during deserialization, the error is suppressed, and the remainder of the logic during deserialization occurs. If there is no serialized value to deserialize when the deserialization is attempted, then <see cref="T:System.Configuration.SettingsPropertyValue" />
    ///  object will instead attempt to return a default value if one was configured as defined on the associated <see cref="T:System.Configuration.SettingsProperty" />
    ///  instance. In this case, if the <see cref="P:System.Configuration.SettingsProperty.DefaultValue" />
    ///  property was set to either <see langword="null" />
    ///  , or to the string "[null]", then the <see cref="T:System.Configuration.SettingsPropertyValue" />
    ///  object will initialize the <see cref="P:System.Configuration.SettingsPropertyValue.PropertyValue" />
    ///  property to either <see langword="null" />
    ///  for reference types, or to the default value for the associated value type.  On the other hand, if <see cref="P:System.Configuration.SettingsProperty.DefaultValue" />
    ///  property holds a valid object reference or string value (other than "[null]"), then the <see cref="P:System.Configuration.SettingsProperty.DefaultValue" />
    ///  property is returned instead.If there is no serialized value to deserialize when the deserialization is attempted, and no default value was specified, then an empty string will be returned for string types. For all other types, a default instance will be returned by calling <see cref="M:System.Activator.CreateInstance(System.Type)" />
    ///  â€” for reference types this means an attempt will be made to create an object instance using the default constructor.  If this attempt fails, then <see langword="null" />
    ///  is returned.</returns>
    ///<exception cref="T:System.ArgumentException">While attempting to use the default value from the <see cref="P:System.Configuration.SettingsProperty.DefaultValue" />
    ///  property, an error occurred.  Either the attempt to convert <see cref="P:System.Configuration.SettingsProperty.DefaultValue" />
    ///  property to a valid type failed, or the resulting value was not compatible with the type defined by <see cref="P:System.Configuration.SettingsProperty.PropertyType" />
    ///  .</exception>
    property PropertyValue: DDN.mscorlib.DNObject read get_PropertyValue write set_PropertyValue;
    ///<summary>Gets or sets the serialized value of the <see cref="T:System.Configuration.SettingsProperty" />
    ///  object.</summary>
    ///<returns>The serialized value of a <see cref="T:System.Configuration.SettingsProperty" />
    ///  object.</returns>
    ///<exception cref="T:System.ArgumentException">The serialization options for the property indicated the use of a string type converter, but a type converter was not available.</exception>
    property SerializedValue: DDN.mscorlib.DNObject read get_SerializedValue write set_SerializedValue;
    ///<summary>Gets or sets whether the value of a <see cref="T:System.Configuration.SettingsProperty" />
    ///  object has been deserialized. </summary>
    ///<returns><see langword="true" />
    ///  if the value of a <see cref="T:System.Configuration.SettingsProperty" />
    ///  object has been deserialized; otherwise, <see langword="false" />
    ///  .</returns>
    property Deserialized: Boolean read get_Deserialized write set_Deserialized;
  end;

  TDNSettingsPropertyValue = class(TDNGenericImport<DNSettingsPropertyValueClass, DNSettingsPropertyValue>) end;

  //-------------namespace: System.Configuration----------------
  DNSettingsPropertyValueCollectionClass = interface(DNObjectClass)
  ['{1EDADF62-4313-5800-8309-3A535CFE8F53}']
  { constructors } 

    ///<summary>Initializes a new instance of the <see cref="T:System.Configuration.SettingsPropertyValueCollection" />
    ///  class.</summary>
    {class} function init: DNSettingsPropertyValueCollection;

  end;

  ///<summary>Contains a collection of settings property values that map <see cref="T:System.Configuration.SettingsProperty" />
  ///  objects to <see cref="T:System.Configuration.SettingsPropertyValue" />
  ///  objects.</summary>
  [DNTypeName('System.Configuration.SettingsPropertyValueCollection')]
  DNSettingsPropertyValueCollection = interface(DDN.mscorlib.DNIEnumerable)
  ['{DD8B2924-3CBF-358A-84F0-3EF6F310FCC3}']
  { getters & setters } 

    function get_Item(name: string): DNSettingsPropertyValue;
    function get_Count: Int32;
    function get_IsSynchronized: Boolean;
    function get_SyncRoot: DDN.mscorlib.DNObject;

  { methods } 

    ///<summary>Adds a <see cref="T:System.Configuration.SettingsPropertyValue" />
    ///  object to the collection.</summary>
    ///  <param name="property">A <see cref="T:System.Configuration.SettingsPropertyValue" />
    ///  object.</param>
    ///<exception cref="T:System.NotSupportedException">An attempt was made to add an item to the collection, but the collection was marked as read-only.</exception>
    procedure Add(&property: DNSettingsPropertyValue);
    ///<summary>Removes a <see cref="T:System.Configuration.SettingsPropertyValue" />
    ///  object from the collection.</summary>
    ///  <param name="name">The name of the <see cref="T:System.Configuration.SettingsPropertyValue" />
    ///  object.</param>
    ///<exception cref="T:System.NotSupportedException">An attempt was made to remove an item from the collection, but the collection was marked as read-only.</exception>
    procedure Remove(name: string);
    ///<summary>Gets the <see cref="T:System.Collections.IEnumerator" />
    ///  object as it applies to the collection.</summary>
    ///<returns>The <see cref="T:System.Collections.IEnumerator" />
    ///  object as it applies to the collection.</returns>
    function GetEnumerator: DDN.mscorlib.DNIEnumerator;
    ///<summary>Creates a copy of the existing collection.</summary>
    ///<returns>A <see cref="T:System.Configuration.SettingsPropertyValueCollection" />
    ///  class.</returns>
    function Clone: DDN.mscorlib.DNObject;
    ///<summary>Sets the collection to be read-only.</summary>
    procedure SetReadOnly;
    ///<summary>Removes all <see cref="T:System.Configuration.SettingsPropertyValue" />
    ///  objects from the collection.</summary>
    procedure Clear;
    ///<summary>Copies this <see cref="T:System.Configuration.SettingsPropertyValueCollection" />
    ///  collection to an array.</summary>
    ///  <param name="array">The array to copy the collection to.</param>
    ///  <param name="index">The index at which to begin copying.</param>
    procedure CopyTo(&array: DDN.mscorlib.DNArray; index: Int32);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Item[name: string]: DNSettingsPropertyValue read get_Item; default;
    ///<summary>Gets a value that specifies the number of <see cref="T:System.Configuration.SettingsPropertyValue" />
    ///  objects in the collection.</summary>
    ///<returns>The number of <see cref="T:System.Configuration.SettingsPropertyValue" />
    ///  objects in the collection.</returns>
    property Count: Int32 read get_Count;
    ///<summary>Gets a value that indicates whether access to the collection is synchronized (thread safe).</summary>
    ///<returns><see langword="true" />
    ///  if access to the <see cref="T:System.Configuration.SettingsPropertyValueCollection" />
    ///  collection is synchronized; otherwise, <see langword="false" />
    ///  .</returns>
    property IsSynchronized: Boolean read get_IsSynchronized;
    ///<summary>Gets the object to synchronize access to the collection.</summary>
    ///<returns>The object to synchronize access to the collection.</returns>
    property SyncRoot: DDN.mscorlib.DNObject read get_SyncRoot;
  end;

  TDNSettingsPropertyValueCollection = class(TDNGenericImport<DNSettingsPropertyValueCollectionClass, DNSettingsPropertyValueCollection>) end;

  //-------------namespace: System.Configuration----------------
  DNSingleTagSectionHandlerClass = interface(DNObjectClass)
  ['{8D2ECB28-4870-50D3-B488-4AEDAE93D19E}']
  { constructors } 

    ///<summary>Initializes a new instance of the <see cref="T:System.Configuration.SingleTagSectionHandler" />
    ///  class. </summary>
    {class} function init: DNSingleTagSectionHandler;

  end;

  ///<summary>Handles configuration sections that are represented by a single XML tag in the .config file.</summary>
  [DNTypeName('System.Configuration.SingleTagSectionHandler')]
  DNSingleTagSectionHandler = interface(DNIConfigurationSectionHandler)
  ['{7E521809-586A-3CA3-9541-A68A02F2164E}']
  { methods } 

    ///<summary>Used internally to create a new instance of this object.</summary>
    ///  <param name="parent">The parent of this object.</param>
    ///  <param name="context">The context of this object.</param>
    ///  <param name="section">The <see cref="T:System.Xml.XmlNode" />
    ///  object in the configuration.</param>
    ///<returns>The created object handler.</returns>
    function Create(parent: DDN.mscorlib.DNObject; context: DDN.mscorlib.DNObject; section: DDN.System.Xml.DNXmlNode): DDN.mscorlib.DNObject;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNSingleTagSectionHandler = class(TDNGenericImport<DNSingleTagSectionHandlerClass, DNSingleTagSectionHandler>) end;

  //-------------namespace: System.Configuration----------------
  DNSettingChangingEventArgsClass = interface(DNObjectClass)
  ['{B83EE19B-7868-59B1-9A36-4C452258ACFF}']
  { constructors } 

    ///<summary>Initializes an instance of the <see cref="T:System.Configuration.SettingChangingEventArgs" />
    ///  class.</summary>
    ///  <param name="settingName">A <see cref="T:System.String" />
    ///  containing the name of the application setting.</param>
    ///  <param name="settingClass">A <see cref="T:System.String" />
    ///  containing a category description of the setting. Often this parameter is set to the application settings group name.</param>
    ///  <param name="settingKey">A <see cref="T:System.String" />
    ///  containing the application settings key.</param>
    ///  <param name="newValue">An <see cref="T:System.Object" />
    ///  that contains the new value to be assigned to the application settings property.</param>
    ///  <param name="cancel"><see langword="true" />
    ///  to cancel the event; otherwise, <see langword="false" />
    ///  . </param>
    {class} function init(settingName: string; settingClass: string; settingKey: string; newValue: DDN.mscorlib.DNObject; cancel: Boolean): DNSettingChangingEventArgs;

  end;

  ///<summary>Provides data for the <see cref="E:System.Configuration.ApplicationSettingsBase.SettingChanging" />
  ///  event.</summary>
  [DNTypeName('System.Configuration.SettingChangingEventArgs')]
  DNSettingChangingEventArgs = interface(DNObject)
  ['{82DC1D69-8E49-3994-A1B2-C6055648AE2D}']
  { getters & setters } 

    function get_NewValue: DDN.mscorlib.DNObject;
    function get_SettingClass: string;
    function get_SettingName: string;
    function get_SettingKey: string;
    function get_Cancel: Boolean;
    procedure set_Cancel(value: Boolean);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>Gets the new value being assigned to the application settings property.</summary>
    ///<returns>An <see cref="T:System.Object" />
    ///  that contains the new value to be assigned to the application settings property.</returns>
    property NewValue: DDN.mscorlib.DNObject read get_NewValue;
    ///<summary>Gets the application settings property category.</summary>
    ///<returns>A <see cref="T:System.String" />
    ///  containing a category description of the setting. Typically, this parameter is set to the application settings group name.</returns>
    property SettingClass: string read get_SettingClass;
    ///<summary>Gets the name of the application setting associated with the application settings property.</summary>
    ///<returns>A <see cref="T:System.String" />
    ///  containing the name of the application setting. </returns>
    property SettingName: string read get_SettingName;
    ///<summary>Gets the application settings key associated with the property.</summary>
    ///<returns>A <see cref="T:System.String" />
    ///  containing the application settings key.</returns>
    property SettingKey: string read get_SettingKey;
    ///<summary>Gets or sets a value indicating whether the event should be canceled.</summary>
    ///<returns><see langword="true" />
    ///  if the event should be canceled; otherwise, <see langword="false" />
    ///  .</returns>
    property Cancel: Boolean read get_Cancel write set_Cancel;
  end;

  TDNSettingChangingEventArgs = class(TDNGenericImport<DNSettingChangingEventArgsClass, DNSettingChangingEventArgs>) end;

  //-------------namespace: System.Configuration.Internal----------------
  DNInternalConfigEventArgsClass = interface(DDN.mscorlib.DNEventArgsClass)
  ['{25548DD7-4EC0-5D03-AF04-6524ED59678D}']
  { constructors } 

    ///<summary>Initializes a new instance of the <see cref="T:System.Configuration.Internal.InternalConfigEventArgs" />
    ///  class.</summary>
    ///  <param name="configPath">A configuration path.</param>
    {class} function init(configPath: string): DNInternalConfigEventArgs;

  end;

  ///<summary>Defines a class that allows the .NET Framework infrastructure to specify event arguments for configuration events.</summary>
  [DNTypeName('System.Configuration.Internal.InternalConfigEventArgs')]
  DNInternalConfigEventArgs = interface(DDN.mscorlib.DNEventArgs)
  ['{6BBEE6D5-F38A-38F1-A13E-8127AB71ED7F}']
  { getters & setters } 

    function get_ConfigPath: string;
    procedure set_ConfigPath(value: string);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>Gets or sets the configuration path related to the <see cref="T:System.Configuration.Internal.InternalConfigEventArgs" />
    ///  object.</summary>
    ///<returns>A string value specifying the configuration path.</returns>
    property ConfigPath: string read get_ConfigPath write set_ConfigPath;
  end;

  TDNInternalConfigEventArgs = class(TDNGenericImport<DNInternalConfigEventArgsClass, DNInternalConfigEventArgs>) end;

  //-------------namespace: System.Configuration----------------
  DNSettingsLoadedEventArgsClass = interface(DDN.mscorlib.DNEventArgsClass)
  ['{A1491BCD-27DD-5E7D-A65B-F9B3B5D18B93}']
  { constructors } 

    ///<summary>Initializes a new instance of the <see cref="T:System.Configuration.SettingsLoadedEventArgs" />
    ///  class. </summary>
    ///  <param name="provider">A <see cref="T:System.Configuration.SettingsProvider" />
    ///  object from which settings are loaded.</param>
    {class} function init(provider: DNSettingsProvider): DNSettingsLoadedEventArgs;

  end;

  ///<summary>Provides data for the <see cref="E:System.Configuration.ApplicationSettingsBase.SettingsLoaded" />
  ///  event.</summary>
  [DNTypeName('System.Configuration.SettingsLoadedEventArgs')]
  DNSettingsLoadedEventArgs = interface(DDN.mscorlib.DNEventArgs)
  ['{E07CF423-DBF3-3B93-916D-DCFB12045CF3}']
  { getters & setters } 

    function get_Provider: DNSettingsProvider;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>Gets the settings provider used to store configuration settings.</summary>
    ///<returns>A settings provider.</returns>
    property Provider: DNSettingsProvider read get_Provider;
  end;

  TDNSettingsLoadedEventArgs = class(TDNGenericImport<DNSettingsLoadedEventArgsClass, DNSettingsLoadedEventArgs>) end;

  //-------------namespace: System.Configuration.Provider----------------
  DNProviderExceptionClass = interface(DDN.mscorlib.DNExceptionClass)
  ['{7281BC28-FB0A-5102-B971-A477A7333E68}']
  { constructors } 

    ///<summary>Creates a new instance of the <see cref="T:System.Configuration.Provider.ProviderException" />
    ///  class.</summary>
    {class} function init: DNProviderException; overload;
    ///<summary>Creates a new instance of the <see cref="T:System.Configuration.Provider.ProviderException" />
    ///  class.</summary>
    ///  <param name="message">A message describing why this <see cref="T:System.Configuration.Provider.ProviderException" />
    ///  was thrown.</param>
    {class} function init(message: string): DNProviderException; overload;
    ///<summary>Creates a new instance of the <see cref="T:System.Configuration.Provider.ProviderException" />
    ///  class.</summary>
    ///  <param name="message">A message describing why this <see cref="T:System.Configuration.Provider.ProviderException" />
    ///  was thrown.</param>
    ///  <param name="innerException">The exception that caused this <see cref="T:System.Configuration.Provider.ProviderException" />
    ///  to be thrown.</param>
    {class} function init(message: string; innerException: DDN.mscorlib.DNException): DNProviderException; overload;

  end;

  ///<summary>The exception that is thrown when a configuration provider error has occurred. This exception class is also used by providers to throw exceptions when internal errors occur within the provider that do not map to other pre-existing exception classes.</summary>
  [DNTypeName('System.Configuration.Provider.ProviderException')]
  DNProviderException = interface(DDN.mscorlib.DNException)
  ['{168731D1-B5B8-3440-A74F-1320A3D5D654}']
  { getters & setters } 

    function get_Message: string;
    function get_Data: DDN.mscorlib.DNIDictionary;
    function get_InnerException: DDN.mscorlib.DNException;
    function get_TargetSite: DDN.mscorlib.DNMethodBase;
    function get_StackTrace: string;
    function get_HelpLink: string;
    procedure set_HelpLink(value: string);
    function get_Source: string;
    procedure set_Source(value: string);
    function get_HResult: Int32;

  { methods } 

    function GetBaseException: DDN.mscorlib.DNException;
    function ToString: string;
    procedure GetObjectData(info: DDN.mscorlib.DNSerializationInfo; context: DDN.mscorlib.DNStreamingContext);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    property Message: string read get_Message;
    property Data: DDN.mscorlib.DNIDictionary read get_Data;
    property InnerException: DDN.mscorlib.DNException read get_InnerException;
    property TargetSite: DDN.mscorlib.DNMethodBase read get_TargetSite;
    property StackTrace: string read get_StackTrace;
    property HelpLink: string read get_HelpLink write set_HelpLink;
    property Source: string read get_Source write set_Source;
    property HResult: Int32 read get_HResult;
  end;

  TDNProviderException = class(TDNGenericImport<DNProviderExceptionClass, DNProviderException>) end;

  //-------------namespace: System.Configuration----------------
  DNSettingsPropertyIsReadOnlyExceptionClass = interface(DDN.mscorlib.DNExceptionClass)
  ['{F86D651C-8743-5AA0-8E91-E153ADEEF625}']
  { constructors } 

    ///<summary>Initializes a new instance of the <see cref="T:System.Configuration.SettingsPropertyIsReadOnlyException" />
    ///  class based on a supplied parameter.</summary>
    ///  <param name="message">A string containing an exception message.</param>
    {class} function init(message: string): DNSettingsPropertyIsReadOnlyException; overload;
    ///<summary>Initializes a new instance of the <see cref="T:System.Configuration.SettingsPropertyIsReadOnlyException" />
    ///  class based on supplied parameters.</summary>
    ///  <param name="message">A string containing an exception message.</param>
    ///  <param name="innerException">The exception that is the cause of the current exception.</param>
    {class} function init(message: string; innerException: DDN.mscorlib.DNException): DNSettingsPropertyIsReadOnlyException; overload;
    ///<summary>Initializes a new instance of the <see cref="T:System.Configuration.SettingsPropertyIsReadOnlyException" />
    ///  class.</summary>
    {class} function init: DNSettingsPropertyIsReadOnlyException; overload;

  end;

  ///<summary>Provides an exception for read-only <see cref="T:System.Configuration.SettingsProperty" />
  ///  objects.</summary>
  [DNTypeName('System.Configuration.SettingsPropertyIsReadOnlyException')]
  DNSettingsPropertyIsReadOnlyException = interface(DDN.mscorlib.DNException)
  ['{151D467D-E0AB-3DC7-8D7C-B44E6EEAFE68}']
  { getters & setters } 

    function get_Message: string;
    function get_Data: DDN.mscorlib.DNIDictionary;
    function get_InnerException: DDN.mscorlib.DNException;
    function get_TargetSite: DDN.mscorlib.DNMethodBase;
    function get_StackTrace: string;
    function get_HelpLink: string;
    procedure set_HelpLink(value: string);
    function get_Source: string;
    procedure set_Source(value: string);
    function get_HResult: Int32;

  { methods } 

    function GetBaseException: DDN.mscorlib.DNException;
    function ToString: string;
    procedure GetObjectData(info: DDN.mscorlib.DNSerializationInfo; context: DDN.mscorlib.DNStreamingContext);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    property Message: string read get_Message;
    property Data: DDN.mscorlib.DNIDictionary read get_Data;
    property InnerException: DDN.mscorlib.DNException read get_InnerException;
    property TargetSite: DDN.mscorlib.DNMethodBase read get_TargetSite;
    property StackTrace: string read get_StackTrace;
    property HelpLink: string read get_HelpLink write set_HelpLink;
    property Source: string read get_Source write set_Source;
    property HResult: Int32 read get_HResult;
  end;

  TDNSettingsPropertyIsReadOnlyException = class(TDNGenericImport<DNSettingsPropertyIsReadOnlyExceptionClass, DNSettingsPropertyIsReadOnlyException>) end;

  //-------------namespace: System.Configuration----------------
  DNSettingsPropertyNotFoundExceptionClass = interface(DDN.mscorlib.DNExceptionClass)
  ['{013ED796-CABB-57AC-819D-7B761D323470}']
  { constructors } 

    ///<summary>Initializes a new instance of the <see cref="T:System.Configuration.SettingsPropertyNotFoundException" />
    ///  class, based on a supplied parameter.</summary>
    ///  <param name="message">A string containing an exception message.</param>
    {class} function init(message: string): DNSettingsPropertyNotFoundException; overload;
    ///<summary>Initializes a new instance of the <see cref="T:System.Configuration.SettingsPropertyNotFoundException" />
    ///  class, based on supplied parameters.</summary>
    ///  <param name="message">A string containing an exception message.</param>
    ///  <param name="innerException">The exception that is the cause of the current exception.</param>
    {class} function init(message: string; innerException: DDN.mscorlib.DNException): DNSettingsPropertyNotFoundException; overload;
    ///<summary>Initializes a new instance of the <see cref="T:System.Configuration.SettingsPropertyNotFoundException" />
    ///  class. </summary>
    {class} function init: DNSettingsPropertyNotFoundException; overload;

  end;

  ///<summary>Provides an exception for <see cref="T:System.Configuration.SettingsProperty" />
  ///  objects that are not found.</summary>
  [DNTypeName('System.Configuration.SettingsPropertyNotFoundException')]
  DNSettingsPropertyNotFoundException = interface(DDN.mscorlib.DNException)
  ['{8AE5EAD1-0A82-3EDD-845D-A11891FAEA86}']
  { getters & setters } 

    function get_Message: string;
    function get_Data: DDN.mscorlib.DNIDictionary;
    function get_InnerException: DDN.mscorlib.DNException;
    function get_TargetSite: DDN.mscorlib.DNMethodBase;
    function get_StackTrace: string;
    function get_HelpLink: string;
    procedure set_HelpLink(value: string);
    function get_Source: string;
    procedure set_Source(value: string);
    function get_HResult: Int32;

  { methods } 

    function GetBaseException: DDN.mscorlib.DNException;
    function ToString: string;
    procedure GetObjectData(info: DDN.mscorlib.DNSerializationInfo; context: DDN.mscorlib.DNStreamingContext);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    property Message: string read get_Message;
    property Data: DDN.mscorlib.DNIDictionary read get_Data;
    property InnerException: DDN.mscorlib.DNException read get_InnerException;
    property TargetSite: DDN.mscorlib.DNMethodBase read get_TargetSite;
    property StackTrace: string read get_StackTrace;
    property HelpLink: string read get_HelpLink write set_HelpLink;
    property Source: string read get_Source write set_Source;
    property HResult: Int32 read get_HResult;
  end;

  TDNSettingsPropertyNotFoundException = class(TDNGenericImport<DNSettingsPropertyNotFoundExceptionClass, DNSettingsPropertyNotFoundException>) end;

  //-------------namespace: System.Configuration----------------
  DNSettingsPropertyWrongTypeExceptionClass = interface(DDN.mscorlib.DNExceptionClass)
  ['{C887036C-3CDC-571D-A7D2-BE2C373C3809}']
  { constructors } 

    ///<summary>Initializes a new instance of the <see cref="T:System.Configuration.SettingsPropertyWrongTypeException" />
    ///  class based on the supplied parameter.</summary>
    ///  <param name="message">A string containing an exception message.</param>
    {class} function init(message: string): DNSettingsPropertyWrongTypeException; overload;
    ///<summary>Initializes a new instance of the <see cref="T:System.Configuration.SettingsPropertyWrongTypeException" />
    ///  class based on the supplied parameters.</summary>
    ///  <param name="message">A string containing an exception message.</param>
    ///  <param name="innerException">The exception that is the cause of the current exception.</param>
    {class} function init(message: string; innerException: DDN.mscorlib.DNException): DNSettingsPropertyWrongTypeException; overload;
    ///<summary>Initializes a new instance of the <see cref="T:System.Configuration.SettingsPropertyWrongTypeException" />
    ///  class.</summary>
    {class} function init: DNSettingsPropertyWrongTypeException; overload;

  end;

  ///<summary>Provides an exception that is thrown when an invalid type is used with a <see cref="T:System.Configuration.SettingsProperty" />
  ///  object.</summary>
  [DNTypeName('System.Configuration.SettingsPropertyWrongTypeException')]
  DNSettingsPropertyWrongTypeException = interface(DDN.mscorlib.DNException)
  ['{A743160A-76C2-3343-97EC-1422564882FA}']
  { getters & setters } 

    function get_Message: string;
    function get_Data: DDN.mscorlib.DNIDictionary;
    function get_InnerException: DDN.mscorlib.DNException;
    function get_TargetSite: DDN.mscorlib.DNMethodBase;
    function get_StackTrace: string;
    function get_HelpLink: string;
    procedure set_HelpLink(value: string);
    function get_Source: string;
    procedure set_Source(value: string);
    function get_HResult: Int32;

  { methods } 

    function GetBaseException: DDN.mscorlib.DNException;
    function ToString: string;
    procedure GetObjectData(info: DDN.mscorlib.DNSerializationInfo; context: DDN.mscorlib.DNStreamingContext);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    property Message: string read get_Message;
    property Data: DDN.mscorlib.DNIDictionary read get_Data;
    property InnerException: DDN.mscorlib.DNException read get_InnerException;
    property TargetSite: DDN.mscorlib.DNMethodBase read get_TargetSite;
    property StackTrace: string read get_StackTrace;
    property HelpLink: string read get_HelpLink write set_HelpLink;
    property Source: string read get_Source write set_Source;
    property HResult: Int32 read get_HResult;
  end;

  TDNSettingsPropertyWrongTypeException = class(TDNGenericImport<DNSettingsPropertyWrongTypeExceptionClass, DNSettingsPropertyWrongTypeException>) end;

  //-------------namespace: System.Configuration----------------
  DNConfigurationExceptionClass = interface(DDN.mscorlib.DNSystemExceptionClass)
  ['{77DE5DED-7697-5932-954C-AD617A075DFE}']
  { constructors } 

    ///<summary>Initializes a new instance of the <see cref="T:System.Configuration.ConfigurationException" />
    ///  class. </summary>
    {class} function init: DNConfigurationException; overload;
    ///<summary>Initializes a new instance of the <see cref="T:System.Configuration.ConfigurationException" />
    ///  class. </summary>
    ///  <param name="message">A message describing why this <see cref="T:System.Configuration.ConfigurationException" />
    ///  exception was thrown.</param>
    {class} function init(message: string): DNConfigurationException; overload;
    ///<summary>Initializes a new instance of the <see cref="T:System.Configuration.ConfigurationException" />
    ///  class. </summary>
    ///  <param name="message">A message describing why this <see cref="T:System.Configuration.ConfigurationException" />
    ///  exception was thrown.</param>
    ///  <param name="inner">The inner exception that caused this <see cref="T:System.Configuration.ConfigurationException" />
    ///  to be thrown, if any.</param>
    {class} function init(message: string; inner: DDN.mscorlib.DNException): DNConfigurationException; overload;
    ///<summary>Initializes a new instance of the <see cref="T:System.Configuration.ConfigurationException" />
    ///  class. </summary>
    ///  <param name="message">A message describing why this <see cref="T:System.Configuration.ConfigurationException" />
    ///  exception was thrown.</param>
    ///  <param name="node">The <see cref="T:System.Xml.XmlNode" />
    ///  that caused this <see cref="T:System.Configuration.ConfigurationException" />
    ///  to be thrown.</param>
    {class} function init(message: string; node: DDN.System.Xml.DNXmlNode): DNConfigurationException; overload;
    ///<summary>Initializes a new instance of the <see cref="T:System.Configuration.ConfigurationException" />
    ///  class. </summary>
    ///  <param name="message">A message describing why this <see cref="T:System.Configuration.ConfigurationException" />
    ///  exception was thrown.</param>
    ///  <param name="inner">The inner exception that caused this <see cref="T:System.Configuration.ConfigurationException" />
    ///  to be thrown, if any.</param>
    ///  <param name="node">The <see cref="T:System.Xml.XmlNode" />
    ///  that caused this <see cref="T:System.Configuration.ConfigurationException" />
    ///  to be thrown.</param>
    {class} function init(message: string; inner: DDN.mscorlib.DNException; node: DDN.System.Xml.DNXmlNode): DNConfigurationException; overload;
    ///<summary>Initializes a new instance of the <see cref="T:System.Configuration.ConfigurationException" />
    ///  class. </summary>
    ///  <param name="message">A message describing why this <see cref="T:System.Configuration.ConfigurationException" />
    ///  exception was thrown.</param>
    ///  <param name="filename">The path to the configuration file that caused this <see cref="T:System.Configuration.ConfigurationException" />
    ///  to be thrown.</param>
    ///  <param name="line">The line number within the configuration file at which this <see cref="T:System.Configuration.ConfigurationException" />
    ///  was thrown.</param>
    {class} function init(message: string; filename: string; line: Int32): DNConfigurationException; overload;
    ///<summary>Initializes a new instance of the <see cref="T:System.Configuration.ConfigurationException" />
    ///  class. </summary>
    ///  <param name="message">A message describing why this <see cref="T:System.Configuration.ConfigurationException" />
    ///  exception was thrown.</param>
    ///  <param name="inner">The inner exception that caused this <see cref="T:System.Configuration.ConfigurationException" />
    ///  to be thrown, if any.</param>
    ///  <param name="filename">The path to the configuration file that caused this <see cref="T:System.Configuration.ConfigurationException" />
    ///  to be thrown.</param>
    ///  <param name="line">The line number within the configuration file at which this <see cref="T:System.Configuration.ConfigurationException" />
    ///  was thrown.</param>
    {class} function init(message: string; inner: DDN.mscorlib.DNException; filename: string; line: Int32): DNConfigurationException; overload;

  { static methods } 

    ///<summary>Gets the path to the configuration file from which the internal <see cref="T:System.Xml.XmlNode" />
    ///  object was loaded when this configuration exception was thrown.</summary>
    ///  <param name="node">The <see cref="T:System.Xml.XmlNode" />
    ///  that caused this <see cref="T:System.Configuration.ConfigurationException" />
    ///  exception to be thrown.</param>
    ///<returns>A <see langword="string" />
    ///  representing the node file name.</returns>
    {class} function GetXmlNodeFilename(node: DDN.System.Xml.DNXmlNode): string;
    ///<summary>Gets the line number within the configuration file that the internal <see cref="T:System.Xml.XmlNode" />
    ///  object represented when this configuration exception was thrown.</summary>
    ///  <param name="node">The <see cref="T:System.Xml.XmlNode" />
    ///  that caused this <see cref="T:System.Configuration.ConfigurationException" />
    ///  exception to be thrown.</param>
    ///<returns>An <see langword="int" />
    ///  representing the node line number.</returns>
    {class} function GetXmlNodeLineNumber(node: DDN.System.Xml.DNXmlNode): Int32;

  end;

  ///<summary>The exception that is thrown when a configuration system error has occurred.</summary>
  [DNTypeName('System.Configuration.ConfigurationException')]
  DNConfigurationException = interface(DDN.mscorlib.DNSystemException)
  ['{E118764F-11B2-34DA-9998-CE8683EED583}']
  { getters & setters } 

    function get_Message: string;
    function get_BareMessage: string;
    function get_Filename: string;
    function get_Line: Int32;
    function get_Data: DDN.mscorlib.DNIDictionary;
    function get_InnerException: DDN.mscorlib.DNException;
    function get_TargetSite: DDN.mscorlib.DNMethodBase;
    function get_StackTrace: string;
    function get_HelpLink: string;
    procedure set_HelpLink(value: string);
    function get_Source: string;
    procedure set_Source(value: string);
    function get_HResult: Int32;

  { methods } 

    ///<summary>Sets the <see cref="T:System.Runtime.Serialization.SerializationInfo" />
    ///  object with the file name and line number at which this configuration exception occurred.</summary>
    ///  <param name="info">The object that holds the information to be serialized.</param>
    ///  <param name="context">The contextual information about the source or destination.</param>
    procedure GetObjectData(info: DDN.mscorlib.DNSerializationInfo; context: DDN.mscorlib.DNStreamingContext);
    function GetBaseException: DDN.mscorlib.DNException;
    function ToString: string;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    ///<summary>Gets an extended description of why this configuration exception was thrown.</summary>
    ///<returns>An extended description of why this <see cref="T:System.Configuration.ConfigurationException" />
    ///  exception was thrown.</returns>
    property Message: string read get_Message;
    ///<summary>Gets a description of why this configuration exception was thrown.</summary>
    ///<returns>A description of why this <see cref="T:System.Configuration.ConfigurationException" />
    ///  exception was thrown.</returns>
    property BareMessage: string read get_BareMessage;
    ///<summary>Gets the path to the configuration file that caused this configuration exception to be thrown.</summary>
    ///<returns>The path to the configuration file that caused this <see cref="T:System.Configuration.ConfigurationException" />
    ///  exception to be thrown.</returns>
    property Filename: string read get_Filename;
    ///<summary>Gets the line number within the configuration file at which this configuration exception was thrown.</summary>
    ///<returns>The line number within the configuration file at which this <see cref="T:System.Configuration.ConfigurationException" />
    ///  exception was thrown.</returns>
    property Line: Int32 read get_Line;
    property Data: DDN.mscorlib.DNIDictionary read get_Data;
    property InnerException: DDN.mscorlib.DNException read get_InnerException;
    property TargetSite: DDN.mscorlib.DNMethodBase read get_TargetSite;
    property StackTrace: string read get_StackTrace;
    property HelpLink: string read get_HelpLink write set_HelpLink;
    property Source: string read get_Source write set_Source;
    property HResult: Int32 read get_HResult;
  end;

  TDNConfigurationException = class(TDNGenericImport<DNConfigurationExceptionClass, DNConfigurationException>) end;

  //-------------namespace: System.Configuration----------------
  DNConfigurationErrorsExceptionClass = interface(DNConfigurationExceptionClass)
  ['{22F8CDE5-BF54-574B-9399-9E8C64B12D03}']
  { constructors } 

    ///<summary>Initializes a new instance of a <see cref="T:System.Configuration.ConfigurationErrorsException" />
    ///  class.</summary>
    ///  <param name="message">A message that describes why this <see cref="T:System.Configuration.ConfigurationErrorsException" />
    ///  exception was thrown.</param>
    ///  <param name="inner">The inner exception that caused this <see cref="T:System.Configuration.ConfigurationErrorsException" />
    ///  exception to be thrown.</param>
    ///  <param name="filename">The path to the configuration file that caused this <see cref="T:System.Configuration.ConfigurationErrorsException" />
    ///  exception to be thrown.</param>
    ///  <param name="line">The line number within the configuration file at which this <see cref="T:System.Configuration.ConfigurationErrorsException" />
    ///  exception was thrown.</param>
    {class} function init(message: string; inner: DDN.mscorlib.DNException; filename: string; line: Int32): DNConfigurationErrorsException; overload;
    ///<summary>Initializes a new instance of the <see cref="T:System.Configuration.ConfigurationErrorsException" />
    ///  class.</summary>
    {class} function init: DNConfigurationErrorsException; overload;
    ///<summary>Initializes a new instance of the <see cref="T:System.Configuration.ConfigurationErrorsException" />
    ///  class.</summary>
    ///  <param name="message">A message that describes why this <see cref="T:System.Configuration.ConfigurationErrorsException" />
    ///  exception was thrown.</param>
    {class} function init(message: string): DNConfigurationErrorsException; overload;
    ///<summary>Initializes a new instance of the <see cref="T:System.Configuration.ConfigurationErrorsException" />
    ///  class.</summary>
    ///  <param name="message">A message that describes why this <see cref="T:System.Configuration.ConfigurationErrorsException" />
    ///  exception was thrown.</param>
    ///  <param name="inner">The exception that caused this <see cref="T:System.Configuration.ConfigurationErrorsException" />
    ///  exception to be thrown.</param>
    {class} function init(message: string; inner: DDN.mscorlib.DNException): DNConfigurationErrorsException; overload;
    ///<summary>Initializes a new instance of the <see cref="T:System.Configuration.ConfigurationErrorsException" />
    ///  class.</summary>
    ///  <param name="message">A message that describes why this <see cref="T:System.Configuration.ConfigurationErrorsException" />
    ///  exception was thrown.</param>
    ///  <param name="filename">The path to the configuration file that caused this <see cref="T:System.Configuration.ConfigurationErrorsException" />
    ///  exception to be thrown.</param>
    ///  <param name="line">The line number within the configuration file at which this <see cref="T:System.Configuration.ConfigurationErrorsException" />
    ///  exception was thrown.</param>
    {class} function init(message: string; filename: string; line: Int32): DNConfigurationErrorsException; overload;
    ///<summary>Initializes a new instance of the <see cref="T:System.Configuration.ConfigurationErrorsException" />
    ///  class.</summary>
    ///  <param name="message">A message that describes why this <see cref="T:System.Configuration.ConfigurationErrorsException" />
    ///  exception was thrown.</param>
    ///  <param name="node">The <see cref="T:System.Xml.XmlNode" />
    ///  object that caused this <see cref="T:System.Configuration.ConfigurationErrorsException" />
    ///  exception to be thrown.</param>
    {class} function init(message: string; node: DDN.System.Xml.DNXmlNode): DNConfigurationErrorsException; overload;
    ///<summary>Initializes a new instance of the <see cref="T:System.Configuration.ConfigurationErrorsException" />
    ///  class.</summary>
    ///  <param name="message">A message that describes why this <see cref="T:System.Configuration.ConfigurationErrorsException" />
    ///  exception was thrown.</param>
    ///  <param name="inner">The inner exception that caused this <see cref="T:System.Configuration.ConfigurationErrorsException" />
    ///  exception to be thrown.</param>
    ///  <param name="node">The <see cref="T:System.Xml.XmlNode" />
    ///  object that caused this <see cref="T:System.Configuration.ConfigurationErrorsException" />
    ///  exception to be thrown.</param>
    {class} function init(message: string; inner: DDN.mscorlib.DNException; node: DDN.System.Xml.DNXmlNode): DNConfigurationErrorsException; overload;
    ///<summary>Initializes a new instance of the <see cref="T:System.Configuration.ConfigurationErrorsException" />
    ///  class.</summary>
    ///  <param name="message">A message that describes why this <see cref="T:System.Configuration.ConfigurationErrorsException" />
    ///  exception was thrown.</param>
    ///  <param name="reader">The <see cref="T:System.Xml.XmlReader" />
    ///  object that caused this <see cref="T:System.Configuration.ConfigurationErrorsException" />
    ///  exception to be thrown.</param>
    {class} function init(message: string; reader: DDN.System.Xml.DNXmlReader): DNConfigurationErrorsException; overload;
    ///<summary>Initializes a new instance of the <see cref="T:System.Configuration.ConfigurationErrorsException" />
    ///  class.</summary>
    ///  <param name="message">A message that describes why this <see cref="T:System.Configuration.ConfigurationErrorsException" />
    ///  exception was thrown.</param>
    ///  <param name="inner">The inner exception that caused this <see cref="T:System.Configuration.ConfigurationErrorsException" />
    ///  exception to be thrown.</param>
    ///  <param name="reader">The <see cref="T:System.Xml.XmlReader" />
    ///  object that caused this <see cref="T:System.Configuration.ConfigurationErrorsException" />
    ///  exception to be thrown.</param>
    {class} function init(message: string; inner: DDN.mscorlib.DNException; reader: DDN.System.Xml.DNXmlReader): DNConfigurationErrorsException; overload;

  { static methods } 

    ///<summary>Gets the line number within the configuration file that the internal <see cref="T:System.Xml.XmlNode" />
    ///  object represented when this configuration exception was thrown.</summary>
    ///  <param name="node">The <see cref="T:System.Xml.XmlNode" />
    ///  object that caused this <see cref="T:System.Configuration.ConfigurationErrorsException" />
    ///  exception to be thrown.</param>
    ///<returns>The line number within the configuration file that contains the <see cref="T:System.Xml.XmlNode" />
    ///  object being parsed when this configuration exception was thrown.</returns>
    {class} function GetLineNumber(node: DDN.System.Xml.DNXmlNode): Int32; overload;
    ///<summary>Gets the path to the configuration file from which the internal <see cref="T:System.Xml.XmlNode" />
    ///  object was loaded when this configuration exception was thrown.</summary>
    ///  <param name="node">The <see cref="T:System.Xml.XmlNode" />
    ///  object that caused this <see cref="T:System.Configuration.ConfigurationErrorsException" />
    ///  exception to be thrown.</param>
    ///<returns>The path to the configuration file from which the internal <see cref="T:System.Xml.XmlNode" />
    ///  object was loaded when this configuration exception was thrown. </returns>
    {class} function GetFilename(node: DDN.System.Xml.DNXmlNode): string; overload;
    ///<summary>Gets the line number within the configuration file that the internal <see cref="T:System.Xml.XmlReader" />
    ///  object was processing when this configuration exception was thrown.</summary>
    ///  <param name="reader">The <see cref="T:System.Xml.XmlReader" />
    ///  object that caused this <see cref="T:System.Configuration.ConfigurationErrorsException" />
    ///  exception to be thrown.</param>
    ///<returns>The line number within the configuration file that the <see cref="T:System.Xml.XmlReader" />
    ///  object was accessing when the exception occurred.</returns>
    {class} function GetLineNumber(reader: DDN.System.Xml.DNXmlReader): Int32; overload;
    ///<summary>Gets the path to the configuration file that the internal <see cref="T:System.Xml.XmlReader" />
    ///  was reading when this configuration exception was thrown.</summary>
    ///  <param name="reader">The <see cref="T:System.Xml.XmlReader" />
    ///  object that caused this <see cref="T:System.Configuration.ConfigurationErrorsException" />
    ///  exception to be thrown.</param>
    ///<returns>The path of the configuration file the internal <see cref="T:System.Xml.XmlReader" />
    ///  object was accessing when the exception occurred.</returns>
    {class} function GetFilename(reader: DDN.System.Xml.DNXmlReader): string; overload;

  end;

  ///<summary>The exception that is thrown when a configuration error has occurred. </summary>
  [DNTypeName('System.Configuration.ConfigurationErrorsException')]
  DNConfigurationErrorsException = interface(DNConfigurationException)
  ['{B6185FCB-5631-3FB5-853F-68090F7567FF}']
  { getters & setters } 

    function get_Message: string;
    function get_BareMessage: string;
    function get_Filename: string;
    function get_Line: Int32;
    function get_Errors: DDN.mscorlib.DNICollection;
    function get_Data: DDN.mscorlib.DNIDictionary;
    function get_InnerException: DDN.mscorlib.DNException;
    function get_TargetSite: DDN.mscorlib.DNMethodBase;
    function get_StackTrace: string;
    function get_HelpLink: string;
    procedure set_HelpLink(value: string);
    function get_Source: string;
    procedure set_Source(value: string);
    function get_HResult: Int32;

  { methods } 

    ///<summary>Sets the <see cref="T:System.Runtime.Serialization.SerializationInfo" />
    ///  object with the file name and line number at which this configuration exception occurred.</summary>
    ///  <param name="info">The object that holds the information to be serialized.</param>
    ///  <param name="context">The contextual information about the source or destination.</param>
    procedure GetObjectData(info: DDN.mscorlib.DNSerializationInfo; context: DDN.mscorlib.DNStreamingContext);
    function GetBaseException: DDN.mscorlib.DNException;
    function ToString: string;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    ///<summary>Gets an extended description of why this configuration exception was thrown.</summary>
    ///<returns>An extended description of why this <see cref="T:System.Configuration.ConfigurationErrorsException" />
    ///  exception was thrown.</returns>
    property Message: string read get_Message;
    ///<summary>Gets a description of why this configuration exception was thrown.</summary>
    ///<returns>A description of why this <see cref="T:System.Configuration.ConfigurationErrorsException" />
    ///  was thrown.</returns>
    property BareMessage: string read get_BareMessage;
    ///<summary>Gets the path to the configuration file that caused this configuration exception to be thrown.</summary>
    ///<returns>The path to the configuration file that caused this <see cref="T:System.Configuration.ConfigurationErrorsException" />
    ///  to be thrown.</returns>
    property Filename: string read get_Filename;
    ///<summary>Gets the line number within the configuration file at which this configuration exception was thrown.</summary>
    ///<returns>The line number within the configuration file at which this <see cref="T:System.Configuration.ConfigurationErrorsException" />
    ///  exception was thrown.</returns>
    property Line: Int32 read get_Line;
    ///<summary>Gets a collection of errors that detail the reasons this <see cref="T:System.Configuration.ConfigurationErrorsException" />
    ///  exception was thrown.</summary>
    ///<returns>An <see cref="T:System.Collections.ICollection" />
    ///  object that contains errors that identify the reasons this <see cref="T:System.Configuration.ConfigurationErrorsException" />
    ///  exception was thrown.</returns>
    property Errors: DDN.mscorlib.DNICollection read get_Errors;
    property Data: DDN.mscorlib.DNIDictionary read get_Data;
    property InnerException: DDN.mscorlib.DNException read get_InnerException;
    property TargetSite: DDN.mscorlib.DNMethodBase read get_TargetSite;
    property StackTrace: string read get_StackTrace;
    property HelpLink: string read get_HelpLink write set_HelpLink;
    property Source: string read get_Source write set_Source;
    property HResult: Int32 read get_HResult;
  end;

  TDNConfigurationErrorsException = class(TDNGenericImport<DNConfigurationErrorsExceptionClass, DNConfigurationErrorsException>) end;

  //-------------namespace: System.Configuration----------------
  DNConfigurationPermissionClass = interface(DDN.mscorlib.DNCodeAccessPermissionClass)
  ['{527431FA-6E2F-5078-96E9-9D3E4D198E03}']
  { constructors } 

    ///<summary>Initializes a new instance of the <see cref="T:System.Configuration.ConfigurationPermission" />
    ///  class. </summary>
    ///  <param name="state">The permission level to grant.</param>
    ///<exception cref="T:System.ArgumentException">The value of <paramref name="state" />
    ///  is neither <see cref="F:System.Security.Permissions.PermissionState.Unrestricted" />
    ///  nor <see cref="F:System.Security.Permissions.PermissionState.None" />
    ///  .</exception>
    {class} function init(state: DDN.mscorlib.DNPermissionState): DNConfigurationPermission;

  end;

  ///<summary>Provides a permission structure that allows methods or classes to access configuration files. </summary>
  [DNTypeName('System.Configuration.ConfigurationPermission')]
  DNConfigurationPermission = interface(DDN.mscorlib.DNCodeAccessPermission)
  ['{A2585EAF-D0AB-3818-8869-8C0AEF45E0C8}']
  { methods } 

    ///<summary>Indicates whether the permission state for the <see cref="T:System.Configuration.ConfigurationPermission" />
    ///  object is the <see cref="F:System.Security.Permissions.PermissionState.Unrestricted" />
    ///  value of the <see cref="T:System.Security.Permissions.PermissionState" />
    ///  enumeration.</summary>
    ///<returns><see langword="true" />
    ///  if the permission state for the <see cref="T:System.Configuration.ConfigurationPermission" />
    ///  is the <see cref="F:System.Security.Permissions.PermissionState.Unrestricted" />
    ///  value of <see cref="T:System.Security.Permissions.PermissionState" />
    ///  ; otherwise, <see langword="false" />
    ///  .</returns>
    function IsUnrestricted: Boolean;
    ///<summary>Returns a new <see cref="T:System.Configuration.ConfigurationPermission" />
    ///  object with the same permission level.</summary>
    ///<returns>A new <see cref="T:System.Configuration.ConfigurationPermission" />
    ///  with the same permission level.</returns>
    function Copy: DDN.mscorlib.DNIPermission;
    ///<summary>Returns the logical union of the <see cref="T:System.Configuration.ConfigurationPermission" />
    ///  object and an object that implements the <see cref="T:System.Security.IPermission" />
    ///  interface.</summary>
    ///  <param name="target">The object to perform the union with.</param>
    ///<returns>The logical union of the <see cref="T:System.Configuration.ConfigurationPermission" />
    ///  and an object that implements <see cref="T:System.Security.IPermission" />
    ///  .</returns>
    ///<exception cref="T:System.ArgumentException"><paramref name="target" />
    ///  is not typed as <see cref="T:System.Configuration.ConfigurationPermission" />
    ///  .</exception>
    function Union(target: DDN.mscorlib.DNIPermission): DDN.mscorlib.DNIPermission;
    ///<summary>Returns the logical intersection between the <see cref="T:System.Configuration.ConfigurationPermission" />
    ///  object and a given object that implements the <see cref="T:System.Security.IPermission" />
    ///  interface.</summary>
    ///  <param name="target">The object containing the permissions to perform the intersection with.</param>
    ///<returns>The logical intersection between the <see cref="T:System.Configuration.ConfigurationPermission" />
    ///  and a given object that implements <see cref="T:System.Security.IPermission" />
    ///  .</returns>
    ///<exception cref="T:System.ArgumentException"><paramref name="target" />
    ///  is not typed as <see cref="T:System.Configuration.ConfigurationPermission" />
    ///  .</exception>
    function Intersect(target: DDN.mscorlib.DNIPermission): DDN.mscorlib.DNIPermission;
    ///<summary>Compares the <see cref="T:System.Configuration.ConfigurationPermission" />
    ///  object with an object implementing the <see cref="T:System.Security.IPermission" />
    ///  interface.</summary>
    ///  <param name="target">The object to compare to.</param>
    ///<returns><see langword="true" />
    ///  if the permission state is equal; otherwise, <see langword="false" />
    ///  .</returns>
    ///<exception cref="T:System.ArgumentException"><paramref name="target" />
    ///  is not typed as <see cref="T:System.Configuration.ConfigurationPermission" />
    ///  .</exception>
    function IsSubsetOf(target: DDN.mscorlib.DNIPermission): Boolean;
    ///<summary>Reads the value of the permission state from XML.</summary>
    ///  <param name="securityElement">The configuration element from which the permission state is read.</param>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="securityElement" />
    ///  is <see langword="null" />
    ///  .</exception><exception cref="T:System.ArgumentException">The <see cref="P:System.Security.SecurityElement.Tag" />
    ///  for the given <paramref name="securityElement" />
    ///  does not equal "IPermission".</exception><exception cref="T:System.ArgumentException">The <see langword="class" />
    ///  attribute of the given <paramref name="securityElement " />
    ///  equals <see langword="null" />
    ///  .</exception><exception cref="T:System.ArgumentException">The <see langword="class" />
    ///  attribute of the given <paramref name="securityElement" />
    ///  is not the type name for <see cref="T:System.Configuration.ConfigurationPermission" />
    ///  .</exception><exception cref="T:System.ArgumentException">The <see langword="version" />
    ///  attribute for the given <paramref name="securityElement" />
    ///  does not equal 1.</exception><exception cref="T:System.ArgumentException">The <see langword="unrestricted" />
    ///  attribute for the given <paramref name="securityElement" />
    ///  is neither <see langword="true" />
    ///  nor <see langword="false" />
    ///  .</exception>
    procedure FromXml(securityElement: DDN.mscorlib.DNSecurityElement);
    ///<summary>Returns a <see cref="T:System.Security.SecurityElement" />
    ///  object with attribute values based on the current <see cref="T:System.Configuration.ConfigurationPermission" />
    ///  object.</summary>
    ///<returns>A <see cref="T:System.Security.SecurityElement" />
    ///  with attribute values based on the current <see cref="T:System.Configuration.ConfigurationPermission" />
    ///  .</returns>
    function ToXml: DDN.mscorlib.DNSecurityElement;
    procedure Demand;
    procedure Assert;
    procedure Deny;
    procedure PermitOnly;
    function ToString: string;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  end;

  TDNConfigurationPermission = class(TDNGenericImport<DNConfigurationPermissionClass, DNConfigurationPermission>) end;

  //-------------namespace: System.Configuration----------------
  DNConfigXmlDocumentClass = interface(DNObjectClass)
  ['{CA43896E-99D4-5E0B-8F34-884307AA88D4}']
  { static getter & setter } 

    procedure set_XmlResolver(value: DDN.System.Xml.DNXmlResolver);
    procedure set_InnerText(value: string);

  { constructors } 

    ///<summary>Initializes a new instance of the <see cref="T:System.Configuration.ConfigXmlDocument" />
    ///  class. </summary>
    {class} function init: DNConfigXmlDocument;

  { static propertys } 

    {class} property XmlResolver: DDN.System.Xml.DNXmlResolver write set_XmlResolver;
    {class} property InnerText: string write set_InnerText;
  end;

  ///<summary>Wraps the corresponding <see cref="T:System.Xml.XmlDocument" />
  ///  type and also carries the necessary information for reporting file-name and line numbers. </summary>
  [DNTypeName('System.Configuration.ConfigXmlDocument')]
  DNConfigXmlDocument = interface(DNObject)
  ['{49B7698A-4C82-3F86-8FBD-F2608646C91B}']
  { getters & setters } 

    function get_LineNumber: Int32;
    function get_Filename: string;
    function get_NodeType: DDN.System.Xml.DNXmlNodeType;
    function get_ParentNode: DDN.System.Xml.DNXmlNode;
    function get_DocumentType: DDN.System.Xml.DNXmlDocumentType;
    function get_Implementation: DDN.System.Xml.DNXmlImplementation;
    function get_Name: string;
    function get_LocalName: string;
    function get_DocumentElement: DDN.System.Xml.DNXmlElement;
    function get_OwnerDocument: DDN.System.Xml.DNXmlDocument;
    function get_Schemas: DDN.System.Xml.DNXmlSchemaSet;
    procedure set_Schemas(value: DDN.System.Xml.DNXmlSchemaSet);
    procedure set_XmlResolver(value: DDN.System.Xml.DNXmlResolver);
    function get_NameTable: DDN.System.Xml.DNXmlNameTable;
    function get_PreserveWhitespace: Boolean;
    procedure set_PreserveWhitespace(value: Boolean);
    function get_IsReadOnly: Boolean;
    procedure set_InnerText(value: string);
    function get_InnerXml: string;
    procedure set_InnerXml(value: string);
    function get_SchemaInfo: DDN.System.Xml.DNIXmlSchemaInfo;
    function get_BaseURI: string;
    function get_Value: string;
    procedure set_Value(value: string);
    function get_ChildNodes: DDN.System.Xml.DNXmlNodeList;
    function get_PreviousSibling: DDN.System.Xml.DNXmlNode;
    function get_NextSibling: DDN.System.Xml.DNXmlNode;
    function get_Attributes: DDN.System.Xml.DNXmlAttributeCollection;
    function get_FirstChild: DDN.System.Xml.DNXmlNode;
    function get_LastChild: DDN.System.Xml.DNXmlNode;
    function get_HasChildNodes: Boolean;
    function get_NamespaceURI: string;
    function get_Prefix: string;
    procedure set_Prefix(value: string);
    function get_OuterXml: string;
    function get_Item(name: string): DDN.System.Xml.DNXmlElement; overload;
    function get_Item(localname: string; ns: string): DDN.System.Xml.DNXmlElement; overload;
    function get_PreviousText: DDN.System.Xml.DNXmlNode;

  { events } 

    procedure add_NodeInserting(value: DDN.System.Xml.DNXmlNodeChangedEventHandler);
    procedure remove_NodeInserting(value: DDN.System.Xml.DNXmlNodeChangedEventHandler);
    procedure add_NodeInserted(value: DDN.System.Xml.DNXmlNodeChangedEventHandler);
    procedure remove_NodeInserted(value: DDN.System.Xml.DNXmlNodeChangedEventHandler);
    procedure add_NodeRemoving(value: DDN.System.Xml.DNXmlNodeChangedEventHandler);
    procedure remove_NodeRemoving(value: DDN.System.Xml.DNXmlNodeChangedEventHandler);
    procedure add_NodeRemoved(value: DDN.System.Xml.DNXmlNodeChangedEventHandler);
    procedure remove_NodeRemoved(value: DDN.System.Xml.DNXmlNodeChangedEventHandler);
    procedure add_NodeChanging(value: DDN.System.Xml.DNXmlNodeChangedEventHandler);
    procedure remove_NodeChanging(value: DDN.System.Xml.DNXmlNodeChangedEventHandler);
    procedure add_NodeChanged(value: DDN.System.Xml.DNXmlNodeChangedEventHandler);
    procedure remove_NodeChanged(value: DDN.System.Xml.DNXmlNodeChangedEventHandler);

  { methods } 

    ///<summary>Creates a configuration element attribute.</summary>
    ///  <param name="prefix">The prefix definition.</param>
    ///  <param name="localName">The name that is used locally.</param>
    ///  <param name="namespaceUri">The URL that is assigned to the namespace.</param>
    ///<returns>The <see cref="P:System.Xml.Serialization.XmlAttributes.XmlAttribute" />
    ///  attribute.</returns>
    function CreateAttribute(prefix: string; localName: string; namespaceUri: string): DDN.System.Xml.DNXmlAttribute; overload;
    ///<summary>Creates a configuration element.</summary>
    ///  <param name="prefix">The prefix definition.</param>
    ///  <param name="localName">The name used locally.</param>
    ///  <param name="namespaceUri">The namespace for the URL.</param>
    ///<returns>The <see cref="T:System.Xml.XmlElement" />
    ///  value.</returns>
    function CreateElement(prefix: string; localName: string; namespaceUri: string): DDN.System.Xml.DNXmlElement; overload;
    ///<summary>Create a text node.</summary>
    ///  <param name="text">The text to use.</param>
    ///<returns>The <see cref="T:System.Xml.XmlText" />
    ///  value.</returns>
    function CreateTextNode(text: string): DDN.System.Xml.DNXmlText;
    ///<summary>Loads the configuration file.</summary>
    ///  <param name="filename">The name of the file.</param>
    procedure Load(filename: string); overload;
    ///<summary>Loads a single configuration element.</summary>
    ///  <param name="filename">The name of the file.</param>
    ///  <param name="sourceReader">The source for the reader.</param>
    procedure LoadSingleElement(filename: string; sourceReader: DDN.System.Xml.DNXmlTextReader);
    ///<summary>Creates an XML CData section.</summary>
    ///  <param name="data">The data to use.</param>
    ///<returns>The <see cref="T:System.Xml.XmlCDataSection" />
    ///  value.</returns>
    function CreateCDataSection(data: string): DDN.System.Xml.DNXmlCDataSection;
    ///<summary>Create an XML comment.</summary>
    ///  <param name="data">The comment data.</param>
    ///<returns>The <see cref="T:System.Xml.XmlComment" />
    ///  value.</returns>
    function CreateComment(data: string): DDN.System.Xml.DNXmlComment;
    ///<summary>Creates white spaces.</summary>
    ///  <param name="data">The data to use.</param>
    ///<returns>The <see cref="T:System.Xml.XmlSignificantWhitespace" />
    ///  value.</returns>
    function CreateSignificantWhitespace(data: string): DDN.System.Xml.DNXmlSignificantWhitespace;
    ///<summary>Creates white space.</summary>
    ///  <param name="data">The data to use.</param>
    ///<returns>The <see cref="T:System.Xml.XmlWhitespace" />
    ///  value.</returns>
    function CreateWhitespace(data: string): DDN.System.Xml.DNXmlWhitespace;
    function CloneNode(deep: Boolean): DDN.System.Xml.DNXmlNode;
    function CreateAttribute(name: string): DDN.System.Xml.DNXmlAttribute; overload;
    function CreateDocumentType(name: string; publicId: string; systemId: string; internalSubset: string): DDN.System.Xml.DNXmlDocumentType;
    function CreateDocumentFragment: DDN.System.Xml.DNXmlDocumentFragment;
    function CreateElement(name: string): DDN.System.Xml.DNXmlElement; overload;
    function CreateEntityReference(name: string): DDN.System.Xml.DNXmlEntityReference;
    function CreateProcessingInstruction(target: string; data: string): DDN.System.Xml.DNXmlProcessingInstruction;
    function CreateXmlDeclaration(version: string; encoding: string; standalone: string): DDN.System.Xml.DNXmlDeclaration;
    function CreateNavigator: DDN.System.Xml.DNXPathNavigator;
    function GetElementsByTagName(name: string): DDN.System.Xml.DNXmlNodeList; overload;
    function CreateAttribute(qualifiedName: string; namespaceURI: string): DDN.System.Xml.DNXmlAttribute; overload;
    function CreateElement(qualifiedName: string; namespaceURI: string): DDN.System.Xml.DNXmlElement; overload;
    function GetElementsByTagName(localName: string; namespaceURI: string): DDN.System.Xml.DNXmlNodeList; overload;
    function GetElementById(elementId: string): DDN.System.Xml.DNXmlElement;
    function ImportNode(node: DDN.System.Xml.DNXmlNode; deep: Boolean): DDN.System.Xml.DNXmlNode;
    function CreateNode(nodeTypeString: string; name: string; namespaceURI: string): DDN.System.Xml.DNXmlNode; overload;
    function CreateNode(&type: DDN.System.Xml.DNXmlNodeType; name: string; namespaceURI: string): DDN.System.Xml.DNXmlNode; overload;
    function ReadNode(reader: DDN.System.Xml.DNXmlReader): DDN.System.Xml.DNXmlNode;
    procedure Load(inStream: DDN.mscorlib.DNStream); overload;
    procedure Load(txtReader: DDN.mscorlib.DNTextReader); overload;
    procedure Load(reader: DDN.System.Xml.DNXmlReader); overload;
    procedure LoadXml(xml: string);
    procedure Save(filename: string); overload;
    procedure Save(outStream: DDN.mscorlib.DNStream); overload;
    procedure Save(writer: DDN.mscorlib.DNTextWriter); overload;
    procedure WriteTo(w: DDN.System.Xml.DNXmlWriter);
    procedure WriteContentTo(xw: DDN.System.Xml.DNXmlWriter);
    procedure Validate(validationEventHandler: DDN.System.Xml.DNValidationEventHandler); overload;
    function CreateNode(&type: DDN.System.Xml.DNXmlNodeType; prefix: string; name: string; namespaceURI: string): DDN.System.Xml.DNXmlNode; overload;
    procedure Save(w: DDN.System.Xml.DNXmlWriter); overload;
    procedure Validate(validationEventHandler: DDN.System.Xml.DNValidationEventHandler; nodeToValidate: DDN.System.Xml.DNXmlNode); overload;
    function SelectSingleNode(xpath: string): DDN.System.Xml.DNXmlNode; overload;
    function SelectSingleNode(xpath: string; nsmgr: DDN.System.Xml.DNXmlNamespaceManager): DDN.System.Xml.DNXmlNode; overload;
    function SelectNodes(xpath: string): DDN.System.Xml.DNXmlNodeList; overload;
    function SelectNodes(xpath: string; nsmgr: DDN.System.Xml.DNXmlNamespaceManager): DDN.System.Xml.DNXmlNodeList; overload;
    function InsertBefore(newChild: DDN.System.Xml.DNXmlNode; refChild: DDN.System.Xml.DNXmlNode): DDN.System.Xml.DNXmlNode;
    function InsertAfter(newChild: DDN.System.Xml.DNXmlNode; refChild: DDN.System.Xml.DNXmlNode): DDN.System.Xml.DNXmlNode;
    function ReplaceChild(newChild: DDN.System.Xml.DNXmlNode; oldChild: DDN.System.Xml.DNXmlNode): DDN.System.Xml.DNXmlNode;
    function RemoveChild(oldChild: DDN.System.Xml.DNXmlNode): DDN.System.Xml.DNXmlNode;
    function PrependChild(newChild: DDN.System.Xml.DNXmlNode): DDN.System.Xml.DNXmlNode;
    function AppendChild(newChild: DDN.System.Xml.DNXmlNode): DDN.System.Xml.DNXmlNode;
    procedure Normalize;
    function Clone: DDN.System.Xml.DNXmlNode;
    function GetEnumerator: DDN.mscorlib.DNIEnumerator;
    procedure RemoveAll;
    function GetNamespaceOfPrefix(prefix: string): string;
    function GetPrefixOfNamespace(namespaceURI: string): string;
    function Supports(feature: string; version: string): Boolean;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>Gets the current node line number.</summary>
    ///<returns>The line number for the current node.</returns>
    property LineNumber: Int32 read get_LineNumber;
    ///<summary>Gets the configuration file name.</summary>
    ///<returns>The configuration file name.</returns>
    property Filename: string read get_Filename;
    property NodeType: DDN.System.Xml.DNXmlNodeType read get_NodeType;
    property ParentNode: DDN.System.Xml.DNXmlNode read get_ParentNode;
    property DocumentType: DDN.System.Xml.DNXmlDocumentType read get_DocumentType;
    property &Implementation: DDN.System.Xml.DNXmlImplementation read get_Implementation;
    property Name: string read get_Name;
    property LocalName: string read get_LocalName;
    property DocumentElement: DDN.System.Xml.DNXmlElement read get_DocumentElement;
    property OwnerDocument: DDN.System.Xml.DNXmlDocument read get_OwnerDocument;
    property Schemas: DDN.System.Xml.DNXmlSchemaSet read get_Schemas write set_Schemas;
    property XmlResolver: DDN.System.Xml.DNXmlResolver write set_XmlResolver;
    property NameTable: DDN.System.Xml.DNXmlNameTable read get_NameTable;
    property PreserveWhitespace: Boolean read get_PreserveWhitespace write set_PreserveWhitespace;
    property IsReadOnly: Boolean read get_IsReadOnly;
    property InnerText: string write set_InnerText;
    property InnerXml: string read get_InnerXml write set_InnerXml;
    property SchemaInfo: DDN.System.Xml.DNIXmlSchemaInfo read get_SchemaInfo;
    property BaseURI: string read get_BaseURI;
    property Value: string read get_Value write set_Value;
    property ChildNodes: DDN.System.Xml.DNXmlNodeList read get_ChildNodes;
    property PreviousSibling: DDN.System.Xml.DNXmlNode read get_PreviousSibling;
    property NextSibling: DDN.System.Xml.DNXmlNode read get_NextSibling;
    property Attributes: DDN.System.Xml.DNXmlAttributeCollection read get_Attributes;
    property FirstChild: DDN.System.Xml.DNXmlNode read get_FirstChild;
    property LastChild: DDN.System.Xml.DNXmlNode read get_LastChild;
    property HasChildNodes: Boolean read get_HasChildNodes;
    property NamespaceURI: string read get_NamespaceURI;
    property Prefix: string read get_Prefix write set_Prefix;
    property OuterXml: string read get_OuterXml;
    property Item[name: string]: DDN.System.Xml.DNXmlElement read get_Item; default;
    property Item[localname: string; ns: string]: DDN.System.Xml.DNXmlElement read get_Item; default;
    property PreviousText: DDN.System.Xml.DNXmlNode read get_PreviousText;
  end;

  TDNConfigXmlDocument = class(TDNGenericImport<DNConfigXmlDocumentClass, DNConfigXmlDocument>) end;


implementation


initialization
  LoadAssemblyModule('System.Configuration.dll', True);

finalization

end.
