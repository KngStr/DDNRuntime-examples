//----------------------------------------------------------------------------
//  System.Xml.dll: System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089
//----------------------------------------------------------------------------
//  The code is automatically generated by the GenCodeNET tool.
//----------------------------------------------------------------------------
//  .NET Framework: 4.0
//----------------------------------------------------------------------------
//  UnitName: DDN.System.Xml.Serialization.Configuration
//  Author: ying32
//----------------------------------------------------------------------------

unit DDN.System.Xml.Serialization.Configuration;

{$IFDEF FPC}
  {$mode delphi}//{$H+}
  {$modeswitch advancedrecords}
  {$modeswitch prefixedattributes} // Custom attributes featureï¼Œfpc3.2.2+
{$ENDIF}

interface

uses
  DDN.Runtime,
  DDN.mscorlib,
  DDN.System.Xml,
  DDN.System.Configuration;

type

{ enums }

  //-------------namespace: System.Xml.Serialization.Configuration----------------
  ///<summary>Determines XML serialization format of <see cref="T:System.DateTime" />
  ///  objects.</summary>
  [DNTypeName('System.Xml.Serialization.Configuration.DateTimeSerializationSection+DateTimeSerializationMode')]
  DNDateTimeSerializationSection_DateTimeSerializationMode = type Integer;
  DNDateTimeSerializationSection_DateTimeSerializationModeHelper = record helper for DNDateTimeSerializationSection_DateTimeSerializationMode
  public const
    ///<summary>Same as <see langword="Roundtrip" />
    ///  .</summary>
    Default_ = 0;
    ///<summary>The serializer examines individual <see cref="T:System.DateTime" />
    ///  instances to determine the serialization format: UTC, local, or unspecified.</summary>
    Roundtrip = 1;
    ///<summary>The serializer formats all <see cref="T:System.DateTime" />
    ///  objects as local time. This is for version 1.0 and 1.1 compatibility.</summary>
    Local = 2;
  end;




type


{ declares }

  DNSchemaImporterExtensionElementCollection = interface; // type: System.Xml.Serialization.Configuration.SchemaImporterExtensionElementCollection, namespace: System.Xml.Serialization.Configuration
  DNDateTimeSerializationSection = interface; // type: System.Xml.Serialization.Configuration.DateTimeSerializationSection, namespace: System.Xml.Serialization.Configuration
  DNSchemaImporterExtensionsSection = interface; // type: System.Xml.Serialization.Configuration.SchemaImporterExtensionsSection, namespace: System.Xml.Serialization.Configuration
  DNXmlSerializerSection = interface; // type: System.Xml.Serialization.Configuration.XmlSerializerSection, namespace: System.Xml.Serialization.Configuration
  DNSchemaImporterExtensionElement = interface; // type: System.Xml.Serialization.Configuration.SchemaImporterExtensionElement, namespace: System.Xml.Serialization.Configuration
  DNSerializationSectionGroup = interface; // type: System.Xml.Serialization.Configuration.SerializationSectionGroup, namespace: System.Xml.Serialization.Configuration
  DNRootedPathValidator = interface; // type: System.Xml.Serialization.Configuration.RootedPathValidator, namespace: System.Xml.Serialization.Configuration


{ objects }

  //-------------namespace: System.Xml.Serialization.Configuration----------------
  DNSchemaImporterExtensionElementCollectionClass = interface(DNObjectClass)
  ['{110B1F6B-D2E2-5D82-8175-6B62082D7F9A}']
  { constructors } 

    ///<summary>Initializes a new instance of the <see cref="T:System.Xml.Serialization.Configuration.SchemaImporterExtensionElementCollection" />
    ///  class.</summary>
    {class} function init: DNSchemaImporterExtensionElementCollection;

  end;

  ///<summary>Handles the XML elements used to configure the operation of the <see cref="T:System.Xml.Serialization.XmlSchemaImporter" />
  ///  . This class cannot be inherited.</summary>
  [DNTypeName('System.Xml.Serialization.Configuration.SchemaImporterExtensionElementCollection')]
  DNSchemaImporterExtensionElementCollection = interface(DNObject)
  ['{E2B75A98-6D02-32C9-90E0-CD01176AA03F}']
  { getters & setters } 

    function get_Item(index: Int32): DNSchemaImporterExtensionElement; overload;
    procedure set_Item(index: Int32; value: DNSchemaImporterExtensionElement); overload;
    function get_Item(name: string): DNSchemaImporterExtensionElement; overload;
    procedure set_Item(name: string; value: DNSchemaImporterExtensionElement); overload;
    function get_Count: Int32;
    function get_EmitClear: Boolean;
    procedure set_EmitClear(value: Boolean);
    function get_IsSynchronized: Boolean;
    function get_SyncRoot: DDN.mscorlib.DNObject;
    function get_CollectionType: DDN.System.Configuration.DNConfigurationElementCollectionType;
    function get_LockAttributes: DDN.System.Configuration.DNConfigurationLockCollection;
    function get_LockAllAttributesExcept: DDN.System.Configuration.DNConfigurationLockCollection;
    function get_LockElements: DDN.System.Configuration.DNConfigurationLockCollection;
    function get_LockAllElementsExcept: DDN.System.Configuration.DNConfigurationLockCollection;
    function get_LockItem: Boolean;
    procedure set_LockItem(value: Boolean);
    function get_ElementInformation: DDN.System.Configuration.DNElementInformation;
    function get_CurrentConfiguration: DDN.System.Configuration.DNConfiguration;

  { methods } 

    ///<summary>Adds an item to the end of the collection.</summary>
    ///  <param name="element">The <see cref="T:System.Xml.Serialization.Configuration.SchemaImporterExtensionElement" />
    ///  to add to the collection.</param>
    procedure Add(element: DNSchemaImporterExtensionElement);
    ///<summary>Removes all items from the collection.</summary>
    procedure Clear;
    ///<summary>Returns the zero-based index of the first element in the collection with the specified value.</summary>
    ///  <param name="element">The <see cref="T:System.Xml.Serialization.Configuration.SchemaImporterExtensionElement" />
    ///  to find.</param>
    ///<returns>The index of the found element.</returns>
    function IndexOf(element: DNSchemaImporterExtensionElement): Int32;
    ///<summary>Removes the first occurrence of a specific item from the collection.</summary>
    ///  <param name="element">The <see cref="T:System.Xml.Serialization.Configuration.SchemaImporterExtensionElement" />
    ///  to remove.</param>
    procedure Remove(element: DNSchemaImporterExtensionElement); overload;
    ///<summary>Removes the item with the specified name from the collection.</summary>
    ///  <param name="name">The name of the item to remove.</param>
    procedure Remove(name: string); overload;
    ///<summary>Removes the item at the specified index from the collection.</summary>
    ///  <param name="index">The index of the object to remove.</param>
    procedure RemoveAt(index: Int32);
    function IsReadOnly: Boolean;
    function Equals(compareTo: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    procedure CopyTo(&array: TArray<DDN.System.Configuration.DNConfigurationElement>; index: Int32);
    function GetEnumerator: DDN.mscorlib.DNIEnumerator;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Item[index: Int32]: DNSchemaImporterExtensionElement read get_Item write set_Item; default;
    property Item[name: string]: DNSchemaImporterExtensionElement read get_Item write set_Item; default;
    property Count: Int32 read get_Count;
    property EmitClear: Boolean read get_EmitClear write set_EmitClear;
    property IsSynchronized: Boolean read get_IsSynchronized;
    property SyncRoot: DDN.mscorlib.DNObject read get_SyncRoot;
    property CollectionType: DDN.System.Configuration.DNConfigurationElementCollectionType read get_CollectionType;
    property LockAttributes: DDN.System.Configuration.DNConfigurationLockCollection read get_LockAttributes;
    property LockAllAttributesExcept: DDN.System.Configuration.DNConfigurationLockCollection read get_LockAllAttributesExcept;
    property LockElements: DDN.System.Configuration.DNConfigurationLockCollection read get_LockElements;
    property LockAllElementsExcept: DDN.System.Configuration.DNConfigurationLockCollection read get_LockAllElementsExcept;
    property LockItem: Boolean read get_LockItem write set_LockItem;
    property ElementInformation: DDN.System.Configuration.DNElementInformation read get_ElementInformation;
    property CurrentConfiguration: DDN.System.Configuration.DNConfiguration read get_CurrentConfiguration;
  end;

  TDNSchemaImporterExtensionElementCollection = class(TDNGenericImport<DNSchemaImporterExtensionElementCollectionClass, DNSchemaImporterExtensionElementCollection>) end;

  //-------------namespace: System.Xml.Serialization.Configuration----------------
  DNDateTimeSerializationSectionClass = interface(DNObjectClass)
  ['{796F86F5-CB76-54E2-B20A-42C047545297}']
  { constructors } 

    ///<summary>Initializes a new instance of the <see cref="T:System.Xml.Serialization.Configuration.DateTimeSerializationSection" />
    ///  class.</summary>
    {class} function init: DNDateTimeSerializationSection;

  end;

  ///<summary>Handles configuration settings for XML serialization of <see cref="T:System.DateTime" />
  ///  instances.</summary>
  [DNTypeName('System.Xml.Serialization.Configuration.DateTimeSerializationSection')]
  DNDateTimeSerializationSection = interface(DNObject)
  ['{67363D2C-6267-3FBF-8D4F-F8234D512220}']
  { getters & setters } 

    function get_Mode: DNDateTimeSerializationSection_DateTimeSerializationMode;
    procedure set_Mode(value: DNDateTimeSerializationSection_DateTimeSerializationMode);
    function get_SectionInformation: DDN.System.Configuration.DNSectionInformation;
    function get_LockAttributes: DDN.System.Configuration.DNConfigurationLockCollection;
    function get_LockAllAttributesExcept: DDN.System.Configuration.DNConfigurationLockCollection;
    function get_LockElements: DDN.System.Configuration.DNConfigurationLockCollection;
    function get_LockAllElementsExcept: DDN.System.Configuration.DNConfigurationLockCollection;
    function get_LockItem: Boolean;
    procedure set_LockItem(value: Boolean);
    function get_ElementInformation: DDN.System.Configuration.DNElementInformation;
    function get_CurrentConfiguration: DDN.System.Configuration.DNConfiguration;

  { methods } 

    function IsReadOnly: Boolean;
    function Equals(compareTo: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>Gets or sets a value that determines the serialization format.</summary>
    ///<returns>One of the <see cref="T:System.Xml.Serialization.Configuration.DateTimeSerializationSection.DateTimeSerializationMode" />
    ///  values.</returns>
    property Mode: DNDateTimeSerializationSection_DateTimeSerializationMode read get_Mode write set_Mode;
    property SectionInformation: DDN.System.Configuration.DNSectionInformation read get_SectionInformation;
    property LockAttributes: DDN.System.Configuration.DNConfigurationLockCollection read get_LockAttributes;
    property LockAllAttributesExcept: DDN.System.Configuration.DNConfigurationLockCollection read get_LockAllAttributesExcept;
    property LockElements: DDN.System.Configuration.DNConfigurationLockCollection read get_LockElements;
    property LockAllElementsExcept: DDN.System.Configuration.DNConfigurationLockCollection read get_LockAllElementsExcept;
    property LockItem: Boolean read get_LockItem write set_LockItem;
    property ElementInformation: DDN.System.Configuration.DNElementInformation read get_ElementInformation;
    property CurrentConfiguration: DDN.System.Configuration.DNConfiguration read get_CurrentConfiguration;
  end;

  TDNDateTimeSerializationSection = class(TDNGenericImport<DNDateTimeSerializationSectionClass, DNDateTimeSerializationSection>) end;

  //-------------namespace: System.Xml.Serialization.Configuration----------------
  DNSchemaImporterExtensionsSectionClass = interface(DNObjectClass)
  ['{86B5D172-4D4F-5D71-B1D6-CC0307916C1E}']
  { constructors } 

    ///<summary>Initializes a new instance of the <see cref="T:System.Xml.Serialization.Configuration.SchemaImporterExtensionsSection" />
    ///  class.</summary>
    {class} function init: DNSchemaImporterExtensionsSection;

  end;

  ///<summary>Handles the configuration for the <see cref="T:System.Xml.Serialization.XmlSchemaImporter" />
  ///  class. This class cannot be inherited.</summary>
  [DNTypeName('System.Xml.Serialization.Configuration.SchemaImporterExtensionsSection')]
  DNSchemaImporterExtensionsSection = interface(DNObject)
  ['{67BECEB9-94EA-3674-A085-2940A30B400F}']
  { getters & setters } 

    function get_SchemaImporterExtensions: DNSchemaImporterExtensionElementCollection;
    function get_SectionInformation: DDN.System.Configuration.DNSectionInformation;
    function get_LockAttributes: DDN.System.Configuration.DNConfigurationLockCollection;
    function get_LockAllAttributesExcept: DDN.System.Configuration.DNConfigurationLockCollection;
    function get_LockElements: DDN.System.Configuration.DNConfigurationLockCollection;
    function get_LockAllElementsExcept: DDN.System.Configuration.DNConfigurationLockCollection;
    function get_LockItem: Boolean;
    procedure set_LockItem(value: Boolean);
    function get_ElementInformation: DDN.System.Configuration.DNElementInformation;
    function get_CurrentConfiguration: DDN.System.Configuration.DNConfiguration;

  { methods } 

    function IsReadOnly: Boolean;
    function Equals(compareTo: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>Gets the object that represents the collection of extensions.</summary>
    ///<returns>A <see cref="T:System.Xml.Serialization.Configuration.SchemaImporterExtensionElementCollection" />
    ///  that contains the objects that represent configuration elements.</returns>
    property SchemaImporterExtensions: DNSchemaImporterExtensionElementCollection read get_SchemaImporterExtensions;
    property SectionInformation: DDN.System.Configuration.DNSectionInformation read get_SectionInformation;
    property LockAttributes: DDN.System.Configuration.DNConfigurationLockCollection read get_LockAttributes;
    property LockAllAttributesExcept: DDN.System.Configuration.DNConfigurationLockCollection read get_LockAllAttributesExcept;
    property LockElements: DDN.System.Configuration.DNConfigurationLockCollection read get_LockElements;
    property LockAllElementsExcept: DDN.System.Configuration.DNConfigurationLockCollection read get_LockAllElementsExcept;
    property LockItem: Boolean read get_LockItem write set_LockItem;
    property ElementInformation: DDN.System.Configuration.DNElementInformation read get_ElementInformation;
    property CurrentConfiguration: DDN.System.Configuration.DNConfiguration read get_CurrentConfiguration;
  end;

  TDNSchemaImporterExtensionsSection = class(TDNGenericImport<DNSchemaImporterExtensionsSectionClass, DNSchemaImporterExtensionsSection>) end;

  //-------------namespace: System.Xml.Serialization.Configuration----------------
  DNXmlSerializerSectionClass = interface(DNObjectClass)
  ['{273E89BE-C5DB-5016-9D74-778FFF4E25B7}']
  { constructors } 

    ///<summary>Initializes a new instance of the <see cref="T:System.Xml.Serialization.Configuration.XmlSerializerSection" />
    ///  class. </summary>
    {class} function init: DNXmlSerializerSection;

  end;

  ///<summary>Handles the XML elements used to configure XML serialization. </summary>
  [DNTypeName('System.Xml.Serialization.Configuration.XmlSerializerSection')]
  DNXmlSerializerSection = interface(DNObject)
  ['{4F36F333-4341-3E5B-97C3-E99EADAB829E}']
  { getters & setters } 

    function get_CheckDeserializeAdvances: Boolean;
    procedure set_CheckDeserializeAdvances(value: Boolean);
    function get_TempFilesLocation: string;
    procedure set_TempFilesLocation(value: string);
    function get_UseLegacySerializerGeneration: Boolean;
    procedure set_UseLegacySerializerGeneration(value: Boolean);
    function get_SectionInformation: DDN.System.Configuration.DNSectionInformation;
    function get_LockAttributes: DDN.System.Configuration.DNConfigurationLockCollection;
    function get_LockAllAttributesExcept: DDN.System.Configuration.DNConfigurationLockCollection;
    function get_LockElements: DDN.System.Configuration.DNConfigurationLockCollection;
    function get_LockAllElementsExcept: DDN.System.Configuration.DNConfigurationLockCollection;
    function get_LockItem: Boolean;
    procedure set_LockItem(value: Boolean);
    function get_ElementInformation: DDN.System.Configuration.DNElementInformation;
    function get_CurrentConfiguration: DDN.System.Configuration.DNConfiguration;

  { methods } 

    function IsReadOnly: Boolean;
    function Equals(compareTo: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>Gets or sets a value that determines whether an additional check of progress of the <see cref="T:System.Xml.Serialization.XmlSerializer" />
    ///  is done.</summary>
    ///<returns><see langword="true" />
    ///  if the check is made; otherwise, <see langword="false" />
    ///  . The default is <see langword="true" />
    ///  .</returns>
    property CheckDeserializeAdvances: Boolean read get_CheckDeserializeAdvances write set_CheckDeserializeAdvances;
    ///<summary>Returns the location that was specified for the creation of the temporary file.</summary>
    ///<returns>The location that was specified for the creation of the temporary file.</returns>
    property TempFilesLocation: string read get_TempFilesLocation write set_TempFilesLocation;
    ///<summary>Gets or sets a value that indicates whether the specified object uses legacy serializer generation.</summary>
    ///<returns><see langword="true" />
    ///  if the object uses legacy serializer generation; otherwise, <see langword="false" />
    ///  .</returns>
    property UseLegacySerializerGeneration: Boolean read get_UseLegacySerializerGeneration write set_UseLegacySerializerGeneration;
    property SectionInformation: DDN.System.Configuration.DNSectionInformation read get_SectionInformation;
    property LockAttributes: DDN.System.Configuration.DNConfigurationLockCollection read get_LockAttributes;
    property LockAllAttributesExcept: DDN.System.Configuration.DNConfigurationLockCollection read get_LockAllAttributesExcept;
    property LockElements: DDN.System.Configuration.DNConfigurationLockCollection read get_LockElements;
    property LockAllElementsExcept: DDN.System.Configuration.DNConfigurationLockCollection read get_LockAllElementsExcept;
    property LockItem: Boolean read get_LockItem write set_LockItem;
    property ElementInformation: DDN.System.Configuration.DNElementInformation read get_ElementInformation;
    property CurrentConfiguration: DDN.System.Configuration.DNConfiguration read get_CurrentConfiguration;
  end;

  TDNXmlSerializerSection = class(TDNGenericImport<DNXmlSerializerSectionClass, DNXmlSerializerSection>) end;

  //-------------namespace: System.Xml.Serialization.Configuration----------------
  DNSchemaImporterExtensionElementClass = interface(DNObjectClass)
  ['{C7ACCF49-26E1-544E-BE23-0935BBAEE364}']
  { constructors } 

    ///<summary>Initializes a new instance of the <see cref="T:System.Xml.Serialization.Configuration.SchemaImporterExtensionElement" />
    ///  class.</summary>
    {class} function init: DNSchemaImporterExtensionElement; overload;
    ///<summary>Initializes a new instance of the <see cref="T:System.Xml.Serialization.Configuration.SchemaImporterExtensionElement" />
    ///  class and specifies the name and type of the extension.</summary>
    ///  <param name="name">The name of the new extension. The name must be unique.</param>
    ///  <param name="type">The type of the new extension, specified as a string.</param>
    {class} function init(name: string; &type: string): DNSchemaImporterExtensionElement; overload;
    ///<summary>Initializes a new instance of the <see cref="T:System.Xml.Serialization.Configuration.SchemaImporterExtensionElement" />
    ///  class using the specified name and type.</summary>
    ///  <param name="name">The name of the new extension. The name must be unique.</param>
    ///  <param name="type">The <see cref="T:System.Type" />
    ///  of the new extension.</param>
    {class} function init(name: string; &type: DDN.mscorlib.DNType): DNSchemaImporterExtensionElement; overload;

  end;

  ///<summary>Handles the configuration for the <see cref="T:System.Xml.Serialization.XmlSchemaImporter" />
  ///  class. This class cannot be inherited.</summary>
  [DNTypeName('System.Xml.Serialization.Configuration.SchemaImporterExtensionElement')]
  DNSchemaImporterExtensionElement = interface(DNObject)
  ['{AD1B0AF4-0B28-3D88-AE92-989DEDBCACF8}']
  { getters & setters } 

    function get_Name: string;
    procedure set_Name(value: string);
    function get_Type: DDN.mscorlib.DNType;
    procedure set_Type(value: DDN.mscorlib.DNType);
    function get_LockAttributes: DDN.System.Configuration.DNConfigurationLockCollection;
    function get_LockAllAttributesExcept: DDN.System.Configuration.DNConfigurationLockCollection;
    function get_LockElements: DDN.System.Configuration.DNConfigurationLockCollection;
    function get_LockAllElementsExcept: DDN.System.Configuration.DNConfigurationLockCollection;
    function get_LockItem: Boolean;
    procedure set_LockItem(value: Boolean);
    function get_ElementInformation: DDN.System.Configuration.DNElementInformation;
    function get_CurrentConfiguration: DDN.System.Configuration.DNConfiguration;

  { methods } 

    function IsReadOnly: Boolean;
    function Equals(compareTo: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>Gets or sets the name of the extension.</summary>
    ///<returns>The name of the extension.</returns>
    property Name: string read get_Name write set_Name;
    ///<summary>Gets or sets the type of the extension.</summary>
    ///<returns>A type of the extension.</returns>
    property &Type: DDN.mscorlib.DNType read get_Type write set_Type;
    property LockAttributes: DDN.System.Configuration.DNConfigurationLockCollection read get_LockAttributes;
    property LockAllAttributesExcept: DDN.System.Configuration.DNConfigurationLockCollection read get_LockAllAttributesExcept;
    property LockElements: DDN.System.Configuration.DNConfigurationLockCollection read get_LockElements;
    property LockAllElementsExcept: DDN.System.Configuration.DNConfigurationLockCollection read get_LockAllElementsExcept;
    property LockItem: Boolean read get_LockItem write set_LockItem;
    property ElementInformation: DDN.System.Configuration.DNElementInformation read get_ElementInformation;
    property CurrentConfiguration: DDN.System.Configuration.DNConfiguration read get_CurrentConfiguration;
  end;

  TDNSchemaImporterExtensionElement = class(TDNGenericImport<DNSchemaImporterExtensionElementClass, DNSchemaImporterExtensionElement>) end;

  //-------------namespace: System.Xml.Serialization.Configuration----------------
  DNSerializationSectionGroupClass = interface(DNObjectClass)
  ['{EC5EBDC1-E595-5BD8-A897-5A2260CAF41C}']
  { constructors } 

    ///<summary>Initializes a new instance of the <see cref="T:System.Xml.Serialization.Configuration.SerializationSectionGroup" />
    ///  class.</summary>
    {class} function init: DNSerializationSectionGroup;

  end;

  ///<summary>Handles the XML elements used to configure XML serialization.</summary>
  [DNTypeName('System.Xml.Serialization.Configuration.SerializationSectionGroup')]
  DNSerializationSectionGroup = interface(DNObject)
  ['{F62E01F9-355F-3CAC-8D6F-BCCF033573FF}']
  { getters & setters } 

    function get_SchemaImporterExtensions: DNSchemaImporterExtensionsSection;
    function get_DateTimeSerialization: DNDateTimeSerializationSection;
    function get_XmlSerializer: DNXmlSerializerSection;
    function get_IsDeclared: Boolean;
    function get_IsDeclarationRequired: Boolean;
    function get_SectionGroupName: string;
    function get_Name: string;
    function get_Type: string;
    procedure set_Type(value: string);
    function get_Sections: DDN.System.Configuration.DNConfigurationSectionCollection;
    function get_SectionGroups: DDN.System.Configuration.DNConfigurationSectionGroupCollection;

  { methods } 

    procedure ForceDeclaration; overload;
    procedure ForceDeclaration(force: Boolean); overload;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>Gets the object that represents the section that contains configuration elements for the <see cref="T:System.Xml.Serialization.XmlSchemaImporter" />
    ///  .</summary>
    ///<returns>The <see cref="T:System.Xml.Serialization.Configuration.SchemaImporterExtensionsSection" />
    ///  that represents the <see langword="schemaImporterExtenstion" />
    ///  element in the configuration file.</returns>
    property SchemaImporterExtensions: DNSchemaImporterExtensionsSection read get_SchemaImporterExtensions;
    ///<summary>Gets the object that represents the <see cref="T:System.DateTime" />
    ///  serialization configuration element.</summary>
    ///<returns>The <see cref="T:System.Xml.Serialization.Configuration.DateTimeSerializationSection" />
    ///  object that represents the configuration element.</returns>
    property DateTimeSerialization: DNDateTimeSerializationSection read get_DateTimeSerialization;
    ///<summary>Gets the object that represents the configuration group for the <see cref="T:System.Xml.Serialization.XmlSerializer" />
    ///  .</summary>
    ///<returns>The <see cref="T:System.Xml.Serialization.Configuration.XmlSerializerSection" />
    ///  that represents the <see cref="T:System.Xml.Serialization.XmlSerializer" />
    ///  .</returns>
    property XmlSerializer: DNXmlSerializerSection read get_XmlSerializer;
    property IsDeclared: Boolean read get_IsDeclared;
    property IsDeclarationRequired: Boolean read get_IsDeclarationRequired;
    property SectionGroupName: string read get_SectionGroupName;
    property Name: string read get_Name;
    property &Type: string read get_Type write set_Type;
    property Sections: DDN.System.Configuration.DNConfigurationSectionCollection read get_Sections;
    property SectionGroups: DDN.System.Configuration.DNConfigurationSectionGroupCollection read get_SectionGroups;
  end;

  TDNSerializationSectionGroup = class(TDNGenericImport<DNSerializationSectionGroupClass, DNSerializationSectionGroup>) end;

  //-------------namespace: System.Xml.Serialization.Configuration----------------
  DNRootedPathValidatorClass = interface(DNObjectClass)
  ['{5850549E-2A8A-55F8-B8BD-5635916D114E}']
  { constructors } 

    ///<summary>Initializes a new instance of the <see cref="T:System.Xml.Serialization.Configuration.RootedPathValidator" />
    ///  class. </summary>
    {class} function init: DNRootedPathValidator;

  end;

  ///<summary>Validates the rules governing the use of the tempFilesLocation configuration switch. </summary>
  [DNTypeName('System.Xml.Serialization.Configuration.RootedPathValidator')]
  DNRootedPathValidator = interface(DNObject)
  ['{CCD7A295-38B9-3662-B614-E4C4CCC9BC38}']
  { methods } 

    ///<summary>Determines whether the type of the object can be validated.</summary>
    ///  <param name="type">The type of the object.</param>
    ///<returns><see langword="true" />
    ///  if the <paramref name="type" />
    ///  parameter matches a valid <see langword="XMLSerializer" />
    ///  object; otherwise, <see langword="false" />
    ///  .</returns>
    function CanValidate(&type: DDN.mscorlib.DNType): Boolean;
    ///<summary>Determines whether the value of an object is valid.</summary>
    ///  <param name="value">The value of an object.</param>
    procedure Validate(value: DDN.mscorlib.DNObject);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNRootedPathValidator = class(TDNGenericImport<DNRootedPathValidatorClass, DNRootedPathValidator>) end;


implementation

end.
