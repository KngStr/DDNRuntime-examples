//----------------------------------------------------------------------------
//  Microsoft.JScript.dll: Microsoft.JScript, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a
//----------------------------------------------------------------------------
//  The code is automatically generated by the GenCodeNET tool.
//----------------------------------------------------------------------------
//  .NET Framework 4.x
//----------------------------------------------------------------------------
//  UnitName: DDN.Microsoft.JScript
//  Author: ying32
//----------------------------------------------------------------------------

unit DDN.Microsoft.JScript;

{$IFDEF FPC}
  {$mode delphi}//{$H+}
  {$modeswitch advancedrecords}
  {$modeswitch prefixedattributes} // Custom attributes featureï¼Œfpc3.2.2+
{$ENDIF}

interface

uses
  DDN.Runtime,
  DDN.mscorlib,
  DDN.System;

type

{ enums }

  //-------------namespace: Microsoft.JScript----------------
  [DNTypeName('Microsoft.JScript.CmdLineError')]
  DNCmdLineError = type Integer;
  DNCmdLineErrorHelper = record helper for DNCmdLineError
  public const
    NoError = 0;
    AssemblyNotFound = 2001;
    CannotCreateEngine = 2002;
    CompilerConstant = 2003;
    DuplicateFileAsSourceAndAssembly = 2004;
    DuplicateResourceFile = 2005;
    DuplicateResourceName = 2006;
    DuplicateSourceFile = 2007;
    ErrorSavingCompiledState = 2008;
    InvalidAssembly = 2009;
    InvalidCodePage = 2010;
    InvalidDefinition = 2011;
    InvalidLocaleID = 2012;
    InvalidTarget = 2013;
    InvalidSourceFile = 2014;
    InvalidWarningLevel = 2015;
    MultipleOutputNames = 2016;
    MultipleTargets = 2017;
    MissingDefineArgument = 2018;
    MissingExtension = 2019;
    MissingLibArgument = 2020;
    MissingVersionInfo = 2021;
    ManagedResourceNotFound = 2022;
    NestedResponseFiles = 2023;
    NoCodePage = 2024;
    NoFileName = 2025;
    NoInputSourcesSpecified = 2026;
    NoLocaleID = 2027;
    NoWarningLevel = 2028;
    ResourceNotFound = 2029;
    UnknownOption = 2030;
    InvalidVersion = 2031;
    SourceFileTooBig = 2032;
    MultipleWin32Resources = 2033;
    MissingReference = 2034;
    SourceNotFound = 2035;
    InvalidCharacters = 2036;
    InvalidForCompilerOptions = 2037;
    IncompatibleTargets = 2038;
    InvalidPlatform = 2039;
    LAST = 2039;
    Unspecified = 2999;
  end;


  //-------------namespace: Microsoft.JScript----------------
  [DNTypeName('Microsoft.JScript.ErrorType')]
  DNErrorType = type Integer;
  DNErrorTypeHelper = record helper for DNErrorType
  public const
    OtherError = 0;
    EvalError = 1;
    RangeError = 2;
    ReferenceError = 3;
    SyntaxError = 4;
    TypeError = 5;
    URIError = 6;
  end;


  //-------------namespace: Microsoft.JScript----------------
  [DNTypeName('Microsoft.JScript.JSBuiltin')]
  DNJSBuiltin = type Integer;
  DNJSBuiltinHelper = record helper for DNJSBuiltin
  public const
    None = 0;
    Array_concat = 1;
    Array_join = 2;
    Array_pop = 3;
    Array_push = 4;
    Array_reverse = 5;
    Array_shift = 6;
    Array_slice = 7;
    Array_sort = 8;
    Array_splice = 9;
    Array_toLocaleString = 10;
    Array_toString = 11;
    Array_unshift = 12;
    Boolean_toString = 13;
    Boolean_valueOf = 14;
    Date_getDate = 15;
    Date_getDay = 16;
    Date_getFullYear = 17;
    Date_getHours = 18;
    Date_getMilliseconds = 19;
    Date_getMinutes = 20;
    Date_getMonth = 21;
    Date_getSeconds = 22;
    Date_getTime = 23;
    Date_getTimezoneOffset = 24;
    Date_getUTCDate = 25;
    Date_getUTCDay = 26;
    Date_getUTCFullYear = 27;
    Date_getUTCHours = 28;
    Date_getUTCMilliseconds = 29;
    Date_getUTCMinutes = 30;
    Date_getUTCMonth = 31;
    Date_getUTCSeconds = 32;
    Date_getVarDate = 33;
    Date_getYear = 34;
    Date_parse = 35;
    Date_setDate = 36;
    Date_setFullYear = 37;
    Date_setHours = 38;
    Date_setMinutes = 39;
    Date_setMilliseconds = 40;
    Date_setMonth = 41;
    Date_setSeconds = 42;
    Date_setTime = 43;
    Date_setUTCDate = 44;
    Date_setUTCFullYear = 45;
    Date_setUTCHours = 46;
    Date_setUTCMinutes = 47;
    Date_setUTCMilliseconds = 48;
    Date_setUTCMonth = 49;
    Date_setUTCSeconds = 50;
    Date_setYear = 51;
    Date_toDateString = 52;
    Date_toGMTString = 53;
    Date_toLocaleDateString = 54;
    Date_toLocaleString = 55;
    Date_toLocaleTimeString = 56;
    Date_toString = 57;
    Date_toTimeString = 58;
    Date_toUTCString = 59;
    Date_UTC = 60;
    Date_valueOf = 61;
    Enumerator_atEnd = 62;
    Enumerator_item = 63;
    Enumerator_moveFirst = 64;
    Enumerator_moveNext = 65;
    Error_toString = 66;
    Function_apply = 67;
    Function_call = 68;
    Function_toString = 69;
    Global_CollectGarbage = 70;
    Global_decodeURI = 71;
    Global_decodeURIComponent = 72;
    Global_encodeURI = 73;
    Global_encodeURIComponent = 74;
    Global_escape = 75;
    Global_eval = 76;
    Global_GetObject = 77;
    Global_isNaN = 78;
    Global_isFinite = 79;
    Global_parseFloat = 80;
    Global_parseInt = 81;
    Global_ScriptEngine = 82;
    Global_ScriptEngineBuildVersion = 83;
    Global_ScriptEngineMajorVersion = 84;
    Global_ScriptEngineMinorVersion = 85;
    Global_unescape = 86;
    Math_abs = 87;
    Math_acos = 88;
    Math_asin = 89;
    Math_atan = 90;
    Math_atan2 = 91;
    Math_ceil = 92;
    Math_cos = 93;
    Math_exp = 94;
    Math_floor = 95;
    Math_log = 96;
    Math_max = 97;
    Math_min = 98;
    Math_pow = 99;
    Math_random = 100;
    Math_round = 101;
    Math_sin = 102;
    Math_sqrt = 103;
    Math_tan = 104;
    Number_toExponential = 105;
    Number_toFixed = 106;
    Number_toLocaleString = 107;
    Number_toPrecision = 108;
    Number_toString = 109;
    Number_valueOf = 110;
    Object_hasOwnProperty = 111;
    Object_isPrototypeOf = 112;
    Object_propertyIsEnumerable = 113;
    Object_toLocaleString = 114;
    Object_toString = 115;
    Object_valueOf = 116;
    RegExp_compile = 117;
    RegExp_exec = 118;
    RegExp_test = 119;
    RegExp_toString = 120;
    String_anchor = 121;
    String_big = 122;
    String_blink = 123;
    String_bold = 124;
    String_charAt = 125;
    String_charCodeAt = 126;
    String_concat = 127;
    String_fixed = 128;
    String_fontcolor = 129;
    String_fontsize = 130;
    String_fromCharCode = 131;
    String_indexOf = 132;
    String_italics = 133;
    String_lastIndexOf = 134;
    String_link = 135;
    String_localeCompare = 136;
    String_match = 137;
    String_replace = 138;
    String_search = 139;
    String_slice = 140;
    String_small = 141;
    String_split = 142;
    String_strike = 143;
    String_sub = 144;
    String_substr = 145;
    String_substring = 146;
    String_sup = 147;
    String_toLocaleLowerCase = 148;
    String_toLocaleUpperCase = 149;
    String_toLowerCase = 150;
    String_toString = 151;
    String_toUpperCase = 152;
    String_valueOf = 153;
    VBArray_dimensions = 154;
    VBArray_getItem = 155;
    VBArray_lbound = 156;
    VBArray_toArray = 157;
    VBArray_ubound = 158;
  end;


  //-------------namespace: Microsoft.JScript----------------
  [DNTypeName('Microsoft.JScript.JSError')]
  DNJSError = type Integer;
  DNJSErrorHelper = record helper for DNJSError
  public const
    NoError = 0;
    InvalidCall = 5;
    OutOfMemory = 7;
    TypeMismatch = 13;
    OutOfStack = 28;
    InternalError = 51;
    FileNotFound = 53;
    NeedObject = 424;
    CantCreateObject = 429;
    OLENoPropOrMethod = 438;
    ActionNotSupported = 445;
    NotCollection = 451;
    SyntaxError = 1002;
    NoColon = 1003;
    NoSemicolon = 1004;
    NoLeftParen = 1005;
    NoRightParen = 1006;
    NoRightBracket = 1007;
    NoLeftCurly = 1008;
    NoRightCurly = 1009;
    NoIdentifier = 1010;
    NoEqual = 1011;
    IllegalChar = 1014;
    UnterminatedString = 1015;
    NoCommentEnd = 1016;
    BadReturn = 1018;
    BadBreak = 1019;
    BadContinue = 1020;
    BadHexDigit = 1023;
    NoWhile = 1024;
    BadLabel = 1025;
    NoLabel = 1026;
    DupDefault = 1027;
    NoMemberIdentifier = 1028;
    NoCcEnd = 1029;
    CcOff = 1030;
    NotConst = 1031;
    NoAt = 1032;
    NoCatch = 1033;
    InvalidElse = 1034;
    NoComma = 1100;
    DupVisibility = 1101;
    IllegalVisibility = 1102;
    BadSwitch = 1103;
    CcInvalidEnd = 1104;
    CcInvalidElse = 1105;
    CcInvalidElif = 1106;
    ErrEOF = 1107;
    IncompatibleVisibility = 1108;
    ClassNotAllowed = 1109;
    NeedCompileTimeConstant = 1110;
    DuplicateName = 1111;
    NeedType = 1112;
    NotInsideClass = 1113;
    InvalidPositionDirective = 1114;
    MustBeEOL = 1115;
    WrongDirective = 1118;
    CannotNestPositionDirective = 1119;
    CircularDefinition = 1120;
    Deprecated = 1121;
    IllegalUseOfThis = 1122;
    NotAccessible = 1123;
    CannotUseNameOfClass = 1124;
    MustImplementMethod = 1128;
    NeedInterface = 1129;
    UnreachableCatch = 1133;
    TypeCannotBeExtended = 1134;
    UndeclaredVariable = 1135;
    VariableLeftUninitialized = 1136;
    KeywordUsedAsIdentifier = 1137;
    NotAllowedInSuperConstructorCall = 1140;
    NotMeantToBeCalledDirectly = 1141;
    GetAndSetAreInconsistent = 1142;
    InvalidCustomAttribute = 1143;
    InvalidCustomAttributeArgument = 1144;
    InvalidCustomAttributeClassOrCtor = 1146;
    TooManyParameters = 1148;
    AmbiguousBindingBecauseOfWith = 1149;
    AmbiguousBindingBecauseOfEval = 1150;
    NoSuchMember = 1151;
    ItemNotAllowedOnExpandoClass = 1152;
    MethodNotAllowedOnExpandoClass = 1153;
    MethodClashOnExpandoSuperClass = 1155;
    BaseClassIsExpandoAlready = 1156;
    AbstractCannotBePrivate = 1157;
    NotIndexable = 1158;
    StaticMissingInStaticInit = 1159;
    MissingConstructForAttributes = 1160;
    OnlyClassesAllowed = 1161;
    ExpandoClassShouldNotImpleEnumerable = 1162;
    NonCLSCompliantMember = 1163;
    NotDeletable = 1164;
    PackageExpected = 1165;
    UselessExpression = 1169;
    HidesParentMember = 1170;
    CannotChangeVisibility = 1171;
    HidesAbstractInBase = 1172;
    NewNotSpecifiedInMethodDeclaration = 1173;
    MethodInBaseIsNotVirtual = 1174;
    NoMethodInBaseToNew = 1175;
    DifferentReturnTypeFromBase = 1176;
    ClashWithProperty = 1177;
    OverrideAndHideUsedTogether = 1178;
    InvalidLanguageOption = 1179;
    NoMethodInBaseToOverride = 1180;
    NotValidForConstructor = 1181;
    CannotReturnValueFromVoidFunction = 1182;
    AmbiguousMatch = 1183;
    AmbiguousConstructorCall = 1184;
    SuperClassConstructorNotAccessible = 1185;
    OctalLiteralsAreDeprecated = 1186;
    VariableMightBeUnitialized = 1187;
    NotOKToCallSuper = 1188;
    IllegalUseOfSuper = 1189;
    BadWayToLeaveFinally = 1190;
    NoCommaOrTypeDefinitionError = 1191;
    AbstractWithBody = 1192;
    NoRightParenOrComma = 1193;
    NoRightBracketOrComma = 1194;
    ExpressionExpected = 1195;
    UnexpectedSemicolon = 1196;
    TooManyTokensSkipped = 1197;
    BadVariableDeclaration = 1198;
    BadFunctionDeclaration = 1199;
    BadPropertyDeclaration = 1200;
    DoesNotHaveAnAddress = 1203;
    TooFewParameters = 1204;
    UselessAssignment = 1205;
    SuspectAssignment = 1206;
    SuspectSemicolon = 1207;
    ImpossibleConversion = 1208;
    FinalPrecludesAbstract = 1209;
    NeedInstance = 1210;
    CannotBeAbstract = 1212;
    InvalidBaseTypeForEnum = 1213;
    CannotInstantiateAbstractClass = 1214;
    ArrayMayBeCopied = 1215;
    AbstractCannotBeStatic = 1216;
    StaticIsAlreadyFinal = 1217;
    StaticMethodsCannotOverride = 1218;
    StaticMethodsCannotHide = 1219;
    ExpandoPrecludesOverride = 1220;
    IllegalParamArrayAttribute = 1221;
    ExpandoPrecludesAbstract = 1222;
    ShouldBeAbstract = 1223;
    BadModifierInInterface = 1224;
    VarIllegalInInterface = 1226;
    InterfaceIllegalInInterface = 1227;
    NoVarInEnum = 1228;
    InvalidImport = 1229;
    EnumNotAllowed = 1230;
    InvalidCustomAttributeTarget = 1231;
    PackageInWrongContext = 1232;
    ConstructorMayNotHaveReturnType = 1233;
    OnlyClassesAndPackagesAllowed = 1234;
    InvalidDebugDirective = 1235;
    CustomAttributeUsedMoreThanOnce = 1236;
    NestedInstanceTypeCannotBeExtendedByStatic = 1237;
    PropertyLevelAttributesMustBeOnGetter = 1238;
    BadThrow = 1239;
    ParamListNotLast = 1240;
    NoSuchType = 1241;
    BadOctalLiteral = 1242;
    InstanceNotAccessibleFromStatic = 1243;
    StaticRequiresTypeName = 1244;
    NonStaticWithTypeName = 1245;
    NoSuchStaticMember = 1246;
    SuspectLoopCondition = 1247;
    ExpectedAssembly = 1248;
    AssemblyAttributesMustBeGlobal = 1249;
    ExpandoPrecludesStatic = 1250;
    DuplicateMethod = 1251;
    NotAnExpandoFunction = 1252;
    NotValidVersionString = 1253;
    ExecutablesCannotBeLocalized = 1254;
    StringConcatIsSlow = 1255;
    CcInvalidInDebugger = 1256;
    ExpandoMustBePublic = 1257;
    DelegatesShouldNotBeExplicitlyConstructed = 1258;
    ImplicitlyReferencedAssemblyNotFound = 1259;
    PossibleBadConversion = 1260;
    PossibleBadConversionFromString = 1261;
    InvalidResource = 1262;
    WrongUseOfAddressOf = 1263;
    NonCLSCompliantType = 1264;
    MemberTypeCLSCompliantMismatch = 1265;
    TypeAssemblyCLSCompliantMismatch = 1266;
    IncompatibleAssemblyReference = 1267;
    InvalidAssemblyKeyFile = 1268;
    TypeNameTooLong = 1269;
    MemberInitializerCannotContainFuncExpr = 1270;
    CantAssignThis = 5000;
    NumberExpected = 5001;
    FunctionExpected = 5002;
    CannotAssignToFunctionResult = 5003;
    StringExpected = 5005;
    DateExpected = 5006;
    ObjectExpected = 5007;
    IllegalAssignment = 5008;
    UndefinedIdentifier = 5009;
    BooleanExpected = 5010;
    VBArrayExpected = 5013;
    EnumeratorExpected = 5015;
    RegExpExpected = 5016;
    RegExpSyntax = 5017;
    UncaughtException = 5022;
    InvalidPrototype = 5023;
    URIEncodeError = 5024;
    URIDecodeError = 5025;
    FractionOutOfRange = 5026;
    PrecisionOutOfRange = 5027;
    ArrayLengthConstructIncorrect = 5029;
    ArrayLengthAssignIncorrect = 5030;
    NeedArrayObject = 5031;
    NoConstructor = 5032;
    IllegalEval = 5033;
    NotYetImplemented = 5034;
    MustProvideNameForNamedParameter = 5035;
    DuplicateNamedParameter = 5036;
    MissingNameParameter = 5037;
    MoreNamedParametersThanArguments = 5038;
    NonSupportedInDebugger = 5039;
    AssignmentToReadOnly = 5040;
    WriteOnlyProperty = 5041;
    IncorrectNumberOfIndices = 5042;
    RefParamsNonSupportedInDebugger = 5043;
    CannotCallSecurityMethodLateBound = 5044;
    CannotUseStaticSecurityAttribute = 5045;
    NonClsException = 5046;
    FuncEvalAborted = 6000;
    FuncEvalTimedout = 6001;
    FuncEvalThreadSuspended = 6002;
    FuncEvalThreadSleepWaitJoin = 6003;
    FuncEvalBadThreadState = 6004;
    FuncEvalBadThreadNotStarted = 6005;
    NoFuncEvalAllowed = 6006;
    FuncEvalBadLocation = 6007;
    FuncEvalWebMethod = 6008;
    StaticVarNotAvailable = 6009;
    TypeObjectNotAvailable = 6010;
    ExceptionFromHResult = 6011;
    SideEffectsDisallowed = 6012;
  end;


  //-------------namespace: Microsoft.JScript----------------
  [DNTypeName('Microsoft.JScript.JSFunctionAttributeEnum')]
  DNJSFunctionAttributeEnum = type Integer;
  DNJSFunctionAttributeEnumHelper = record helper for DNJSFunctionAttributeEnum
  public const
    None = 0;
    HasArguments = 1;
    HasThisObject = 2;
    IsNested = 4;
    HasStackFrame = 8;
    HasVarArgs = 16;
    HasEngine = 32;
    ClassicFunction = 35;
    NestedFunction = 44;
    ClassicNestedFunction = 47;
    IsExpandoMethod = 64;
    IsInstanceNestedClassConstructor = 128;
  end;


  //-------------namespace: Microsoft.JScript----------------
  [DNTypeName('Microsoft.JScript.JSToken')]
  DNJSToken = type Integer;
  DNJSTokenHelper = record helper for DNJSToken
  public const
    EndOfFile = 0;
    If_ = 1;
    For_ = 2;
    Do_ = 3;
    While_ = 4;
    Continue_ = 5;
    Break = 6;
    Return = 7;
    Import = 8;
    With_ = 9;
    Switch = 10;
    Throw = 11;
    Try_ = 12;
    Package_ = 13;
    Internal = 14;
    Abstract_ = 15;
    Public_ = 16;
    Static_ = 17;
    Private_ = 18;
    Protected_ = 19;
    Final_ = 20;
    Event = 21;
    Var_ = 22;
    Const_ = 23;
    Class_ = 24;
    Function_ = 25;
    LeftCurly = 26;
    Semicolon = 27;
    Null = 28;
    True = 29;
    False = 30;
    This = 31;
    Identifier = 32;
    StringLiteral = 33;
    IntegerLiteral = 34;
    NumericLiteral = 35;
    LeftParen = 36;
    LeftBracket = 37;
    AccessField = 38;
    FirstOp = 39;
    LogicalNot = 39;
    BitwiseNot = 40;
    Delete = 41;
    Void = 42;
    Typeof = 43;
    Increment = 44;
    Decrement = 45;
    Plus = 46;
    FirstBinaryOp = 46;
    Minus = 47;
    LogicalOr = 48;
    LogicalAnd = 49;
    BitwiseOr = 50;
    BitwiseXor = 51;
    BitwiseAnd = 52;
    Equal = 53;
    NotEqual = 54;
    StrictEqual = 55;
    StrictNotEqual = 56;
    GreaterThan = 57;
    LessThan = 58;
    LessThanEqual = 59;
    GreaterThanEqual = 60;
    LeftShift = 61;
    RightShift = 62;
    UnsignedRightShift = 63;
    Multiply = 64;
    Divide = 65;
    LastPPOperator = 66;
    Modulo = 66;
    Instanceof = 67;
    In_ = 68;
    Assign = 69;
    PlusAssign = 70;
    MinusAssign = 71;
    MultiplyAssign = 72;
    DivideAssign = 73;
    BitwiseAndAssign = 74;
    BitwiseOrAssign = 75;
    BitwiseXorAssign = 76;
    ModuloAssign = 77;
    LeftShiftAssign = 78;
    RightShiftAssign = 79;
    LastBinaryOp = 80;
    UnsignedRightShiftAssign = 80;
    LastAssign = 80;
    ConditionalIf = 81;
    Colon = 82;
    Comma = 83;
    LastOp = 83;
    Case_ = 84;
    Catch = 85;
    Debugger = 86;
    Default_ = 87;
    Else_ = 88;
    Export_ = 89;
    Extends = 90;
    Finally_ = 91;
    Get = 92;
    Implements_ = 93;
    Interface_ = 94;
    New = 95;
    Set_ = 96;
    Super = 97;
    RightParen = 98;
    RightCurly = 99;
    RightBracket = 100;
    PreProcessorConstant = 101;
    Comment = 102;
    UnterminatedComment = 103;
    Assert = 104;
    Boolean = 105;
    Byte = 106;
    Char = 107;
    Decimal = 108;
    Double = 109;
    DoubleColon = 110;
    Enum = 111;
    Ensure = 112;
    Float = 113;
    Goto_ = 114;
    Int = 115;
    Invariant = 116;
    Long = 117;
    Namespace = 118;
    Native = 119;
    Require = 120;
    Sbyte = 121;
    Short = 122;
    Synchronized = 123;
    Transient = 124;
    Throws = 125;
    ParamArray = 126;
    Volatile = 127;
    Ushort = 128;
    Uint = 129;
    Ulong = 130;
    Use = 131;
    EndOfLine = 132;
    PreProcessDirective = 133;
    None = -1;
  end;


  //-------------namespace: Microsoft.JScript----------------
  [DNTypeName('Microsoft.JScript.SourceState')]
  DNSourceState = type Integer;
  DNSourceStateHelper = record helper for DNSourceState
  public const
    STATE_COLOR_NORMAL = 0;
    STATE_COLOR_COMMENT = 1;
    STATE_COLOR_STRING = 2;
  end;


  //-------------namespace: Microsoft.JScript----------------
  [DNTypeName('Microsoft.JScript.TokenColor')]
  DNTokenColor = type Integer;
  DNTokenColorHelper = record helper for DNTokenColor
  public const
    COLOR_TEXT = 0;
    COLOR_IDENTIFIER = 1;
    COLOR_KEYWORD = 2;
    COLOR_COMMENT = 3;
    COLOR_OPERATOR = 4;
    COLOR_NUMBER = 5;
    COLOR_STRING = 6;
    COLOR_CONDITIONAL_COMP = 7;
  end;


  //-------------namespace: Microsoft.JScript.Vsa----------------
  [DNTypeName('Microsoft.JScript.Vsa.JSVsaError')]
  DNJSVsaError = type Integer;
  DNJSVsaErrorHelper = record helper for DNJSVsaError
  public const
    AppDomainCannotBeSet = -2146226176;
    AppDomainInvalid = -2146226175;
    ApplicationBaseCannotBeSet = -2146226174;
    ApplicationBaseInvalid = -2146226173;
    AssemblyExpected = -2146226172;
    AssemblyNameInvalid = -2146226171;
    BadAssembly = -2146226170;
    CachedAssemblyInvalid = -2146226169;
    CallbackUnexpected = -2146226168;
    CodeDOMNotAvailable = -2146226167;
    CompiledStateNotFound = -2146226166;
    DebugInfoNotSupported = -2146226165;
    ElementNameInvalid = -2146226164;
    ElementNotFound = -2146226163;
    EngineBusy = -2146226162;
    EngineCannotClose = -2146226161;
    EngineCannotReset = -2146226160;
    EngineClosed = -2146226159;
    EngineEmpty = -2146226159;
    EngineInitialized = -2146226157;
    EngineNameInUse = -2146226156;
    EngineNotCompiled = -2146226155;
    EngineNotInitialized = -2146226154;
    EngineNotRunning = -2146226153;
    EngineRunning = -2146226152;
    EventSourceInvalid = -2146226151;
    EventSourceNameInUse = -2146226150;
    EventSourceNameInvalid = -2146226149;
    EventSourceNotFound = -2146226148;
    EventSourceTypeInvalid = -2146226147;
    GetCompiledStateFailed = -2146226146;
    GlobalInstanceInvalid = -2146226145;
    GlobalInstanceTypeInvalid = -2146226144;
    InternalCompilerError = -2146226143;
    ItemCannotBeRemoved = -2146226142;
    ItemFlagNotSupported = -2146226141;
    ItemNameInUse = -2146226140;
    ItemNameInvalid = -2146226139;
    ItemNotFound = -2146226138;
    ItemTypeNotSupported = -2146226137;
    LCIDNotSupported = -2146226136;
    LoadElementFailed = -2146226135;
    NotificationInvalid = -2146226134;
    OptionInvalid = -2146226133;
    OptionNotSupported = -2146226132;
    RevokeFailed = -2146226131;
    RootMonikerAlreadySet = -2146226130;
    RootMonikerInUse = -2146226129;
    RootMonikerInvalid = -2146226128;
    RootMonikerNotSet = -2146226127;
    RootMonikerProtocolInvalid = -2146226126;
    RootNamespaceInvalid = -2146226125;
    RootNamespaceNotSet = -2146226124;
    SaveCompiledStateFailed = -2146226123;
    SaveElementFailed = -2146226122;
    SiteAlreadySet = -2146226121;
    SiteInvalid = -2146226120;
    SiteNotSet = -2146226119;
    SourceItemNotAvailable = -2146226118;
    SourceMonikerNotAvailable = -2146226117;
    URLInvalid = -2146226116;
    BrowserNotExist = -2146226115;
    DebuggeeNotStarted = -2146226114;
    EngineNameInvalid = -2146226113;
    EngineNotExist = -2146226112;
    FileFormatUnsupported = -2146226111;
    FileTypeUnknown = -2146226110;
    ItemCannotBeRenamed = -2146226109;
    MissingSource = -2146226108;
    NotInitCompleted = -2146226107;
    NameTooLong = -2146226106;
    ProcNameInUse = -2146226105;
    ProcNameInvalid = -2146226104;
    VsaServerDown = -2146226103;
    MissingPdb = -2146226102;
    NotClientSideAndNoUrl = -2146226101;
    CannotAttachToWebServer = -2146226100;
    EngineNameNotSet = -2146226099;
    UnknownError = -2146225921;
  end;


  //-------------namespace: Microsoft.JScript.Vsa----------------
  [DNTypeName('Microsoft.JScript.Vsa.JSVsaItemFlag')]
  DNJSVsaItemFlag = type Integer;
  DNJSVsaItemFlagHelper = record helper for DNJSVsaItemFlag
  public const
    None = 0;
    Module = 1;
    Class_ = 2;
  end;


  //-------------namespace: Microsoft.JScript.Vsa----------------
  [DNTypeName('Microsoft.JScript.Vsa.JSVsaItemType')]
  DNJSVsaItemType = type Integer;
  DNJSVsaItemTypeHelper = record helper for DNJSVsaItemType
  public const
    Reference = 0;
    AppGlobal = 1;
    Code = 2;
  end;


  //-------------namespace: Microsoft.JScript----------------
  [DNTypeName('Microsoft.JScript.VSAITEMTYPE2')]
  DNVSAITEMTYPE2 = type Integer;
  DNVSAITEMTYPE2Helper = record helper for DNVSAITEMTYPE2
  public const
    None = 0;
    HOSTOBJECT = 16;
    HOSTSCOPE = 17;
    HOSTSCOPEANDOBJECT = 18;
    SCRIPTSCOPE = 19;
    SCRIPTBLOCK = 20;
    STATEMENT = 21;
    EXPRESSION = 22;
  end;




type


{ declares }

  DNCOMMemberInfo = interface; // type: Microsoft.JScript.COMMemberInfo, namespace: Microsoft.JScript
  DNIActivationObject = interface; // type: Microsoft.JScript.IActivationObject, namespace: Microsoft.JScript
  DNIAuthorServices = interface; // type: Microsoft.JScript.IAuthorServices, namespace: Microsoft.JScript
  DNIColorizeText = interface; // type: Microsoft.JScript.IColorizeText, namespace: Microsoft.JScript
  DNIDebugConvert = interface; // type: Microsoft.JScript.IDebugConvert, namespace: Microsoft.JScript
  DNIDebugConvert2 = interface; // type: Microsoft.JScript.IDebugConvert2, namespace: Microsoft.JScript
  DNIDebuggerObject = interface; // type: Microsoft.JScript.IDebuggerObject, namespace: Microsoft.JScript
  DNIDebugScriptScope = interface; // type: Microsoft.JScript.IDebugScriptScope, namespace: Microsoft.JScript
  DNIDebugType = interface; // type: Microsoft.JScript.IDebugType, namespace: Microsoft.JScript
  DNIDebugVsaScriptCodeItem = interface; // type: Microsoft.JScript.IDebugVsaScriptCodeItem, namespace: Microsoft.JScript
  DNIDefineEvent = interface; // type: Microsoft.JScript.IDefineEvent, namespace: Microsoft.JScript
  DNIEngine2 = interface; // type: Microsoft.JScript.IEngine2, namespace: Microsoft.JScript
  DNIErrorHandler = interface; // type: Microsoft.JScript.IErrorHandler, namespace: Microsoft.JScript
  DNIMessageReceiver = interface; // type: Microsoft.JScript.IMessageReceiver, namespace: Microsoft.JScript
  DNIMethodsCompletionInfo = interface; // type: Microsoft.JScript.IMethodsCompletionInfo, namespace: Microsoft.JScript
  DNINeedEngine = interface; // type: Microsoft.JScript.INeedEngine, namespace: Microsoft.JScript
  DNIObjectCompletionInfo = interface; // type: Microsoft.JScript.IObjectCompletionInfo, namespace: Microsoft.JScript
  DNIParseText = interface; // type: Microsoft.JScript.IParseText, namespace: Microsoft.JScript
  DNIRedirectOutput = interface; // type: Microsoft.JScript.IRedirectOutput, namespace: Microsoft.JScript
  DNISite2 = interface; // type: Microsoft.JScript.ISite2, namespace: Microsoft.JScript
  DNITokenColorInfo = interface; // type: Microsoft.JScript.ITokenColorInfo, namespace: Microsoft.JScript
  DNITokenEnumerator = interface; // type: Microsoft.JScript.ITokenEnumerator, namespace: Microsoft.JScript
  DNIWrappedMember = interface; // type: Microsoft.JScript.IWrappedMember, namespace: Microsoft.JScript
  DNMemberInfoInitializer = interface; // type: Microsoft.JScript.MemberInfoInitializer, namespace: Microsoft.JScript
  DNIJSVsaEngine = interface; // type: Microsoft.JScript.Vsa.IJSVsaEngine, namespace: Microsoft.JScript.Vsa
  DNIJSVsaError = interface; // type: Microsoft.JScript.Vsa.IJSVsaError, namespace: Microsoft.JScript.Vsa
  DNIVsaFullErrorInfo = interface; // type: Microsoft.JScript.IVsaFullErrorInfo, namespace: Microsoft.JScript
  DNIJSVsaItem = interface; // type: Microsoft.JScript.Vsa.IJSVsaItem, namespace: Microsoft.JScript.Vsa
  DNIVsaScriptScope = interface; // type: Microsoft.JScript.IVsaScriptScope, namespace: Microsoft.JScript
  DNIJSVsaCodeItem = interface; // type: Microsoft.JScript.Vsa.IJSVsaCodeItem, namespace: Microsoft.JScript.Vsa
  DNIVsaScriptCodeItem = interface; // type: Microsoft.JScript.IVsaScriptCodeItem, namespace: Microsoft.JScript
  DNIJSVsaGlobalItem = interface; // type: Microsoft.JScript.Vsa.IJSVsaGlobalItem, namespace: Microsoft.JScript.Vsa
  DNIJSVsaReferenceItem = interface; // type: Microsoft.JScript.Vsa.IJSVsaReferenceItem, namespace: Microsoft.JScript.Vsa
  DNIJSVsaPersistSite = interface; // type: Microsoft.JScript.Vsa.IJSVsaPersistSite, namespace: Microsoft.JScript.Vsa
  DNIJSVsaSite = interface; // type: Microsoft.JScript.Vsa.IJSVsaSite, namespace: Microsoft.JScript.Vsa
  DNIJSVsaItems = interface; // type: Microsoft.JScript.Vsa.IJSVsaItems, namespace: Microsoft.JScript.Vsa
  DNAST = interface; // type: Microsoft.JScript.AST, namespace: Microsoft.JScript
  DNArrayLiteral = interface; // type: Microsoft.JScript.ArrayLiteral, namespace: Microsoft.JScript
  DNAssemblyCustomAttributeList = interface; // type: Microsoft.JScript.AssemblyCustomAttributeList, namespace: Microsoft.JScript
  DNASTList = interface; // type: Microsoft.JScript.ASTList, namespace: Microsoft.JScript
  DNBinaryOp = interface; // type: Microsoft.JScript.BinaryOp, namespace: Microsoft.JScript
  DNBitwiseBinary = interface; // type: Microsoft.JScript.BitwiseBinary, namespace: Microsoft.JScript
  DNEquality = interface; // type: Microsoft.JScript.Equality, namespace: Microsoft.JScript
  DNIn = interface; // type: Microsoft.JScript.In, namespace: Microsoft.JScript
  DNInstanceof = interface; // type: Microsoft.JScript.Instanceof, namespace: Microsoft.JScript
  DNNumericBinary = interface; // type: Microsoft.JScript.NumericBinary, namespace: Microsoft.JScript
  DNPlus = interface; // type: Microsoft.JScript.Plus, namespace: Microsoft.JScript
  DNRelational = interface; // type: Microsoft.JScript.Relational, namespace: Microsoft.JScript
  DNStrictEquality = interface; // type: Microsoft.JScript.StrictEquality, namespace: Microsoft.JScript
  DNBinding = interface; // type: Microsoft.JScript.Binding, namespace: Microsoft.JScript
  DNBlock = interface; // type: Microsoft.JScript.Block, namespace: Microsoft.JScript
  DNDebugBreak = interface; // type: Microsoft.JScript.DebugBreak, namespace: Microsoft.JScript
  DNEval = interface; // type: Microsoft.JScript.Eval, namespace: Microsoft.JScript
  DNForIn = interface; // type: Microsoft.JScript.ForIn, namespace: Microsoft.JScript
  DNFunctionDeclaration = interface; // type: Microsoft.JScript.FunctionDeclaration, namespace: Microsoft.JScript
  DNFunctionExpression = interface; // type: Microsoft.JScript.FunctionExpression, namespace: Microsoft.JScript
  DNImport = interface; // type: Microsoft.JScript.Import, namespace: Microsoft.JScript
  DNPackage = interface; // type: Microsoft.JScript.Package, namespace: Microsoft.JScript
  DNScriptBlock = interface; // type: Microsoft.JScript.ScriptBlock, namespace: Microsoft.JScript
  DNThrow = interface; // type: Microsoft.JScript.Throw, namespace: Microsoft.JScript
  DNTry = interface; // type: Microsoft.JScript.Try, namespace: Microsoft.JScript
  DNUnaryOp = interface; // type: Microsoft.JScript.UnaryOp, namespace: Microsoft.JScript
  DNNumericUnary = interface; // type: Microsoft.JScript.NumericUnary, namespace: Microsoft.JScript
  DNPostOrPrefixOperator = interface; // type: Microsoft.JScript.PostOrPrefixOperator, namespace: Microsoft.JScript
  DNTypeof = interface; // type: Microsoft.JScript.Typeof, namespace: Microsoft.JScript
  DNWith = interface; // type: Microsoft.JScript.With, namespace: Microsoft.JScript
  DNCmdLineOptionParser = interface; // type: Microsoft.JScript.CmdLineOptionParser, namespace: Microsoft.JScript
  DNContext = interface; // type: Microsoft.JScript.Context, namespace: Microsoft.JScript
  DNConvert = interface; // type: Microsoft.JScript.Convert, namespace: Microsoft.JScript
  DNDebugConvert = interface; // type: Microsoft.JScript.DebugConvert, namespace: Microsoft.JScript
  DNDocumentContext = interface; // type: Microsoft.JScript.DocumentContext, namespace: Microsoft.JScript
  DNDynamicFieldInfo = interface; // type: Microsoft.JScript.DynamicFieldInfo, namespace: Microsoft.JScript
  DNEmpty = interface; // type: Microsoft.JScript.Empty, namespace: Microsoft.JScript
  DNFieldAccessor = interface; // type: Microsoft.JScript.FieldAccessor, namespace: Microsoft.JScript
  DNGlobalObject = interface; // type: Microsoft.JScript.GlobalObject, namespace: Microsoft.JScript
  DNLenientGlobalObject = interface; // type: Microsoft.JScript.LenientGlobalObject, namespace: Microsoft.JScript
  DNGlobals = interface; // type: Microsoft.JScript.Globals, namespace: Microsoft.JScript
  DNJSAuthor = interface; // type: Microsoft.JScript.JSAuthor, namespace: Microsoft.JScript
  DNJSParser = interface; // type: Microsoft.JScript.JSParser, namespace: Microsoft.JScript
  DNJSScanner = interface; // type: Microsoft.JScript.JSScanner, namespace: Microsoft.JScript
  DNLateBinding = interface; // type: Microsoft.JScript.LateBinding, namespace: Microsoft.JScript
  DNMemberInfoList = interface; // type: Microsoft.JScript.MemberInfoList, namespace: Microsoft.JScript
  DNMethodInvoker = interface; // type: Microsoft.JScript.MethodInvoker, namespace: Microsoft.JScript
  DNMissing = interface; // type: Microsoft.JScript.Missing, namespace: Microsoft.JScript
  DNNamespace = interface; // type: Microsoft.JScript.Namespace, namespace: Microsoft.JScript
  DNRuntime = interface; // type: Microsoft.JScript.Runtime, namespace: Microsoft.JScript
  DNScriptObject = interface; // type: Microsoft.JScript.ScriptObject, namespace: Microsoft.JScript
  DNActivationObject = interface; // type: Microsoft.JScript.ActivationObject, namespace: Microsoft.JScript
  DNBlockScope = interface; // type: Microsoft.JScript.BlockScope, namespace: Microsoft.JScript
  DNGlobalScope = interface; // type: Microsoft.JScript.GlobalScope, namespace: Microsoft.JScript
  DNJSObject = interface; // type: Microsoft.JScript.JSObject, namespace: Microsoft.JScript
  DNArgumentsObject = interface; // type: Microsoft.JScript.ArgumentsObject, namespace: Microsoft.JScript
  DNArrayObject = interface; // type: Microsoft.JScript.ArrayObject, namespace: Microsoft.JScript
  DNArrayPrototype = interface; // type: Microsoft.JScript.ArrayPrototype, namespace: Microsoft.JScript
  DNLenientArrayPrototype = interface; // type: Microsoft.JScript.LenientArrayPrototype, namespace: Microsoft.JScript
  DNArrayWrapper = interface; // type: Microsoft.JScript.ArrayWrapper, namespace: Microsoft.JScript
  DNRegExpMatch = interface; // type: Microsoft.JScript.RegExpMatch, namespace: Microsoft.JScript
  DNBooleanObject = interface; // type: Microsoft.JScript.BooleanObject, namespace: Microsoft.JScript
  DNBooleanPrototype = interface; // type: Microsoft.JScript.BooleanPrototype, namespace: Microsoft.JScript
  DNLenientBooleanPrototype = interface; // type: Microsoft.JScript.LenientBooleanPrototype, namespace: Microsoft.JScript
  DNDateObject = interface; // type: Microsoft.JScript.DateObject, namespace: Microsoft.JScript
  DNDatePrototype = interface; // type: Microsoft.JScript.DatePrototype, namespace: Microsoft.JScript
  DNLenientDatePrototype = interface; // type: Microsoft.JScript.LenientDatePrototype, namespace: Microsoft.JScript
  DNEnumeratorObject = interface; // type: Microsoft.JScript.EnumeratorObject, namespace: Microsoft.JScript
  DNEnumeratorPrototype = interface; // type: Microsoft.JScript.EnumeratorPrototype, namespace: Microsoft.JScript
  DNLenientEnumeratorPrototype = interface; // type: Microsoft.JScript.LenientEnumeratorPrototype, namespace: Microsoft.JScript
  DNErrorObject = interface; // type: Microsoft.JScript.ErrorObject, namespace: Microsoft.JScript
  DNEvalErrorObject = interface; // type: Microsoft.JScript.EvalErrorObject, namespace: Microsoft.JScript
  DNRangeErrorObject = interface; // type: Microsoft.JScript.RangeErrorObject, namespace: Microsoft.JScript
  DNReferenceErrorObject = interface; // type: Microsoft.JScript.ReferenceErrorObject, namespace: Microsoft.JScript
  DNSyntaxErrorObject = interface; // type: Microsoft.JScript.SyntaxErrorObject, namespace: Microsoft.JScript
  DNTypeErrorObject = interface; // type: Microsoft.JScript.TypeErrorObject, namespace: Microsoft.JScript
  DNURIErrorObject = interface; // type: Microsoft.JScript.URIErrorObject, namespace: Microsoft.JScript
  DNErrorPrototype = interface; // type: Microsoft.JScript.ErrorPrototype, namespace: Microsoft.JScript
  DNLenientErrorPrototype = interface; // type: Microsoft.JScript.LenientErrorPrototype, namespace: Microsoft.JScript
  DNJSPrototypeObject = interface; // type: Microsoft.JScript.JSPrototypeObject, namespace: Microsoft.JScript
  DNMathObject = interface; // type: Microsoft.JScript.MathObject, namespace: Microsoft.JScript
  DNLenientMathObject = interface; // type: Microsoft.JScript.LenientMathObject, namespace: Microsoft.JScript
  DNNumberObject = interface; // type: Microsoft.JScript.NumberObject, namespace: Microsoft.JScript
  DNNumberPrototype = interface; // type: Microsoft.JScript.NumberPrototype, namespace: Microsoft.JScript
  DNLenientNumberPrototype = interface; // type: Microsoft.JScript.LenientNumberPrototype, namespace: Microsoft.JScript
  DNObjectPrototype = interface; // type: Microsoft.JScript.ObjectPrototype, namespace: Microsoft.JScript
  DNLenientObjectPrototype = interface; // type: Microsoft.JScript.LenientObjectPrototype, namespace: Microsoft.JScript
  DNRegExpObject = interface; // type: Microsoft.JScript.RegExpObject, namespace: Microsoft.JScript
  DNRegExpPrototype = interface; // type: Microsoft.JScript.RegExpPrototype, namespace: Microsoft.JScript
  DNLenientRegExpPrototype = interface; // type: Microsoft.JScript.LenientRegExpPrototype, namespace: Microsoft.JScript
  DNScriptFunction = interface; // type: Microsoft.JScript.ScriptFunction, namespace: Microsoft.JScript
  DNActiveXObjectConstructor = interface; // type: Microsoft.JScript.ActiveXObjectConstructor, namespace: Microsoft.JScript
  DNArrayConstructor = interface; // type: Microsoft.JScript.ArrayConstructor, namespace: Microsoft.JScript
  DNBooleanConstructor = interface; // type: Microsoft.JScript.BooleanConstructor, namespace: Microsoft.JScript
  DNClosure = interface; // type: Microsoft.JScript.Closure, namespace: Microsoft.JScript
  DNDateConstructor = interface; // type: Microsoft.JScript.DateConstructor, namespace: Microsoft.JScript
  DNLenientDateConstructor = interface; // type: Microsoft.JScript.LenientDateConstructor, namespace: Microsoft.JScript
  DNEnumeratorConstructor = interface; // type: Microsoft.JScript.EnumeratorConstructor, namespace: Microsoft.JScript
  DNErrorConstructor = interface; // type: Microsoft.JScript.ErrorConstructor, namespace: Microsoft.JScript
  DNFunctionConstructor = interface; // type: Microsoft.JScript.FunctionConstructor, namespace: Microsoft.JScript
  DNFunctionObject = interface; // type: Microsoft.JScript.FunctionObject, namespace: Microsoft.JScript
  DNFunctionPrototype = interface; // type: Microsoft.JScript.FunctionPrototype, namespace: Microsoft.JScript
  DNLenientFunctionPrototype = interface; // type: Microsoft.JScript.LenientFunctionPrototype, namespace: Microsoft.JScript
  DNFunctionWrapper = interface; // type: Microsoft.JScript.FunctionWrapper, namespace: Microsoft.JScript
  DNNumberConstructor = interface; // type: Microsoft.JScript.NumberConstructor, namespace: Microsoft.JScript
  DNObjectConstructor = interface; // type: Microsoft.JScript.ObjectConstructor, namespace: Microsoft.JScript
  DNRegExpConstructor = interface; // type: Microsoft.JScript.RegExpConstructor, namespace: Microsoft.JScript
  DNStringConstructor = interface; // type: Microsoft.JScript.StringConstructor, namespace: Microsoft.JScript
  DNLenientStringConstructor = interface; // type: Microsoft.JScript.LenientStringConstructor, namespace: Microsoft.JScript
  DNVBArrayConstructor = interface; // type: Microsoft.JScript.VBArrayConstructor, namespace: Microsoft.JScript
  DNStringObject = interface; // type: Microsoft.JScript.StringObject, namespace: Microsoft.JScript
  DNStringPrototype = interface; // type: Microsoft.JScript.StringPrototype, namespace: Microsoft.JScript
  DNLenientStringPrototype = interface; // type: Microsoft.JScript.LenientStringPrototype, namespace: Microsoft.JScript
  DNVBArrayObject = interface; // type: Microsoft.JScript.VBArrayObject, namespace: Microsoft.JScript
  DNVBArrayPrototype = interface; // type: Microsoft.JScript.VBArrayPrototype, namespace: Microsoft.JScript
  DNLenientVBArrayPrototype = interface; // type: Microsoft.JScript.LenientVBArrayPrototype, namespace: Microsoft.JScript
  DNStackFrame = interface; // type: Microsoft.JScript.StackFrame, namespace: Microsoft.JScript
  DNTypeReflector = interface; // type: Microsoft.JScript.TypeReflector, namespace: Microsoft.JScript
  DNScriptStream = interface; // type: Microsoft.JScript.ScriptStream, namespace: Microsoft.JScript
  DNSimpleHashtable = interface; // type: Microsoft.JScript.SimpleHashtable, namespace: Microsoft.JScript
  DNSuperTypeMembersSorter = interface; // type: Microsoft.JScript.SuperTypeMembersSorter, namespace: Microsoft.JScript
  DNTypedArray = interface; // type: Microsoft.JScript.TypedArray, namespace: Microsoft.JScript
  DNBaseVsaEngine = interface; // type: Microsoft.JScript.Vsa.BaseVsaEngine, namespace: Microsoft.JScript.Vsa
  DNVsaEngine = interface; // type: Microsoft.JScript.Vsa.VsaEngine, namespace: Microsoft.JScript.Vsa
  DNBaseVsaSite = interface; // type: Microsoft.JScript.Vsa.BaseVsaSite, namespace: Microsoft.JScript.Vsa
  DNBaseVsaStartup = interface; // type: Microsoft.JScript.Vsa.BaseVsaStartup, namespace: Microsoft.JScript.Vsa
  DNResInfo = interface; // type: Microsoft.JScript.Vsa.ResInfo, namespace: Microsoft.JScript.Vsa
  DNVsaItem = interface; // type: Microsoft.JScript.VsaItem, namespace: Microsoft.JScript
  DNVsaItems = interface; // type: Microsoft.JScript.VsaItems, namespace: Microsoft.JScript
  DNExpando = interface; // type: Microsoft.JScript.Expando, namespace: Microsoft.JScript
  DNHide = interface; // type: Microsoft.JScript.Hide, namespace: Microsoft.JScript
  DNJSFunctionAttribute = interface; // type: Microsoft.JScript.JSFunctionAttribute, namespace: Microsoft.JScript
  DNNotRecommended = interface; // type: Microsoft.JScript.NotRecommended, namespace: Microsoft.JScript
  DNOverride = interface; // type: Microsoft.JScript.Override, namespace: Microsoft.JScript
  DNReferenceAttribute = interface; // type: Microsoft.JScript.ReferenceAttribute, namespace: Microsoft.JScript
  DNCmdLineException = interface; // type: Microsoft.JScript.CmdLineException, namespace: Microsoft.JScript
  DNParserException = interface; // type: Microsoft.JScript.ParserException, namespace: Microsoft.JScript
  DNEndOfFile = interface; // type: Microsoft.JScript.EndOfFile, namespace: Microsoft.JScript
  DNBreakOutOfFinally = interface; // type: Microsoft.JScript.BreakOutOfFinally, namespace: Microsoft.JScript
  DNContinueOutOfFinally = interface; // type: Microsoft.JScript.ContinueOutOfFinally, namespace: Microsoft.JScript
  DNJScriptException = interface; // type: Microsoft.JScript.JScriptException, namespace: Microsoft.JScript
  DNNoContextException = interface; // type: Microsoft.JScript.NoContextException, namespace: Microsoft.JScript
  DNReturnOutOfFinally = interface; // type: Microsoft.JScript.ReturnOutOfFinally, namespace: Microsoft.JScript
  DNJSVsaException = interface; // type: Microsoft.JScript.Vsa.JSVsaException, namespace: Microsoft.JScript.Vsa
  DNJScriptCodeProvider = interface; // type: Microsoft.JScript.JScriptCodeProvider, namespace: Microsoft.JScript
  DNCOMCharStream = interface; // type: Microsoft.JScript.COMCharStream, namespace: Microsoft.JScript
  DNCOMFieldInfo = interface; // type: Microsoft.JScript.COMFieldInfo, namespace: Microsoft.JScript
  DNJSField = interface; // type: Microsoft.JScript.JSField, namespace: Microsoft.JScript
  DNJSVariableField = interface; // type: Microsoft.JScript.JSVariableField, namespace: Microsoft.JScript
  DNJSLocalField = interface; // type: Microsoft.JScript.JSLocalField, namespace: Microsoft.JScript
  DNJSFieldInfo = interface; // type: Microsoft.JScript.JSFieldInfo, namespace: Microsoft.JScript
  DNJSConstructor = interface; // type: Microsoft.JScript.JSConstructor, namespace: Microsoft.JScript
  DNJSMethod = interface; // type: Microsoft.JScript.JSMethod, namespace: Microsoft.JScript
  DNCOMMethodInfo = interface; // type: Microsoft.JScript.COMMethodInfo, namespace: Microsoft.JScript
  DNJSMethodInfo = interface; // type: Microsoft.JScript.JSMethodInfo, namespace: Microsoft.JScript
  DNCOMPropertyInfo = interface; // type: Microsoft.JScript.COMPropertyInfo, namespace: Microsoft.JScript


{ objects }

  //-------------namespace: Microsoft.JScript----------------
  [DNTypeName('Microsoft.JScript.COMMemberInfo')]
  DNCOMMemberInfo = interface(DDN.mscorlib.DNObject)
  ['{84BCEB62-16EB-4E1C-975C-FCB40D331043}']
  { methods } 

    function Call(invokeAttr: DDN.mscorlib.DNBindingFlags; binder: DDN.mscorlib.DNBinder; arguments: TArray<DDN.mscorlib.DNObject>; culture: DDN.mscorlib.DNCultureInfo): DDN.mscorlib.DNObject;
    function GetValue(invokeAttr: DDN.mscorlib.DNBindingFlags; binder: DDN.mscorlib.DNBinder; index: TArray<DDN.mscorlib.DNObject>; culture: DDN.mscorlib.DNCultureInfo): DDN.mscorlib.DNObject;
    procedure SetValue(value: DDN.mscorlib.DNObject; invokeAttr: DDN.mscorlib.DNBindingFlags; binder: DDN.mscorlib.DNBinder; index: TArray<DDN.mscorlib.DNObject>; culture: DDN.mscorlib.DNCultureInfo);

  end;

  //-------------namespace: Microsoft.JScript----------------
  [DNTypeName('Microsoft.JScript.IActivationObject')]
  DNIActivationObject = interface(DDN.mscorlib.DNObject)
  ['{5C6688A9-074E-3EEB-8387-769B635082E4}']
  { methods } 

    function GetDefaultThisObject: DDN.mscorlib.DNObject;
    function GetGlobalScope: DNGlobalScope;
    function GetLocalField(name: string): DDN.mscorlib.DNFieldInfo;
    function GetMemberValue(name: string; lexlevel: Int32): DDN.mscorlib.DNObject;
    function GetField(name: string; lexLevel: Int32): DDN.mscorlib.DNFieldInfo;

  end;

  //-------------namespace: Microsoft.JScript----------------
  [DNTypeName('Microsoft.JScript.IAuthorServices')]
  DNIAuthorServices = interface(DDN.mscorlib.DNObject)
  ['{9E2B453C-6EAA-4329-A619-62E4889C8C8A}']
  { methods } 

    function GetColorizer: DNIColorizeText;
    function GetCodeSense: DNIParseText;

  end;

  //-------------namespace: Microsoft.JScript----------------
  [DNTypeName('Microsoft.JScript.IColorizeText')]
  DNIColorizeText = interface(DDN.mscorlib.DNObject)
  ['{DB283E60-7ADB-4CF6-9758-2931893A12FC}']
  { methods } 

    function Colorize(sourceCode: string; state: DNSourceState): DNITokenEnumerator;
    function GetStateForText(sourceCode: string; currentState: DNSourceState): DNSourceState;

  end;

  //-------------namespace: Microsoft.JScript----------------
  [DNTypeName('Microsoft.JScript.IDebugConvert')]
  DNIDebugConvert = interface(DDN.mscorlib.DNObject)
  ['{AA51516D-C0F2-49FE-9D38-61D20456904C}']
  { methods } 

    function ToPrimitive(value: DDN.mscorlib.DNObject; typeCode: DDN.mscorlib.DNTypeCode; truncationPermitted: Boolean): DDN.mscorlib.DNObject;
    function ByteToString(value: Byte; radix: Int32): string;
    function SByteToString(value: SByte; radix: Int32): string;
    function Int16ToString(value: Int16; radix: Int32): string;
    function UInt16ToString(value: UInt16; radix: Int32): string;
    function Int32ToString(value: Int32; radix: Int32): string;
    function UInt32ToString(value: UInt32; radix: Int32): string;
    function Int64ToString(value: Int64; radix: Int32): string;
    function UInt64ToString(value: UInt64; radix: Int32): string;
    function SingleToString(value: Single): string;
    function DoubleToString(value: Double): string;
    function BooleanToString(value: Boolean): string;
    function DoubleToDateString(value: Double): string;
    function RegexpToString(source: string; ignoreCase: Boolean; global: Boolean; multiline: Boolean): string;
    function StringToPrintable(source: string): string;
    function GetManagedObject(value: DDN.mscorlib.DNObject): DDN.mscorlib.DNObject;
    function GetManagedInt64Object(i: Int64): DDN.mscorlib.DNObject;
    function GetManagedUInt64Object(i: UInt64): DDN.mscorlib.DNObject;
    function GetManagedCharObject(i: UInt16): DDN.mscorlib.DNObject;
    function GetErrorMessageForHR(hr: Int32; engine: DNIJSVsaEngine): string;

  end;

  //-------------namespace: Microsoft.JScript----------------
  [DNTypeName('Microsoft.JScript.IDebugConvert2')]
  DNIDebugConvert2 = interface(DDN.mscorlib.DNObject)
  ['{B370D709-72BD-4696-9825-C4EBADBF98CB}']
  { methods } 

    function DecimalToString(value: DDN.mscorlib.DNDecimal): string;

  end;

  //-------------namespace: Microsoft.JScript----------------
  [DNTypeName('Microsoft.JScript.IDebuggerObject')]
  DNIDebuggerObject = interface(DDN.mscorlib.DNObject)
  ['{8E93D770-6168-4B68-B896-A71B74C7076A}']
  { methods } 

    function IsCOMObject: Boolean;
    function IsEqual(o: DNIDebuggerObject): Boolean;
    function HasEnumerableMember(name: string): Boolean;
    function IsScriptFunction: Boolean;
    function IsScriptObject: Boolean;

  end;

  //-------------namespace: Microsoft.JScript----------------
  [DNTypeName('Microsoft.JScript.IDebugScriptScope')]
  DNIDebugScriptScope = interface(DDN.mscorlib.DNObject)
  ['{59447635-3E26-4873-BF26-05F173B80F5E}']
  { methods } 

    procedure SetThisValue(thisValue: DDN.mscorlib.DNObject);

  end;

  //-------------namespace: Microsoft.JScript----------------
  [DNTypeName('Microsoft.JScript.IDebugType')]
  DNIDebugType = interface(DDN.mscorlib.DNObject)
  ['{613CC05D-05F4-4969-B369-5AEEF56E32D0}']
  { methods } 

    function HasInstance(o: DDN.mscorlib.DNObject): Boolean;

  end;

  //-------------namespace: Microsoft.JScript----------------
  [DNTypeName('Microsoft.JScript.IDebugVsaScriptCodeItem')]
  DNIDebugVsaScriptCodeItem = interface(DDN.mscorlib.DNObject)
  ['{6DFE759A-CB8B-4CA0-A973-1D04E0BF0B53}']
  { methods } 

    function Evaluate: DDN.mscorlib.DNObject;
    function ParseNamedBreakPoint(input: string; out functionName: string; out nargs: Int32; out arguments: string; out returnType: string; out offset: UInt64): Boolean;

  end;

  //-------------namespace: Microsoft.JScript----------------
  [DNTypeName('Microsoft.JScript.IDefineEvent')]
  DNIDefineEvent = interface(DDN.mscorlib.DNObject)
  ['{D1A19408-BB6B-43EB-BB6F-E7CF6AF047D7}']
  { methods } 

    function AddEvent(code: string; startLine: Int32): DDN.mscorlib.DNObject;

  end;

  //-------------namespace: Microsoft.JScript----------------
  [DNTypeName('Microsoft.JScript.IEngine2')]
  DNIEngine2 = interface(DDN.mscorlib.DNObject)
  ['{BFF6C97F-0705-4394-88B8-A03A4B8B4CD7}']
  { methods } 

    function GetAssembly: DDN.mscorlib.DNAssembly;
    procedure Run(domain: DDN.mscorlib.DNAppDomain);
    function CompileEmpty: Boolean;
    procedure RunEmpty;
    procedure DisconnectEvents;
    procedure ConnectEvents;
    procedure RegisterEventSource(name: string);
    procedure Interrupt;
    procedure InitVsaEngine(rootMoniker: string; site: DNIJSVsaSite);
    function GetGlobalScope: DNIVsaScriptScope;
    function GetModule: DDN.mscorlib.DNModule;
    function Clone(domain: DDN.mscorlib.DNAppDomain): DNIJSVsaEngine;
    procedure Restart;

  end;

  //-------------namespace: Microsoft.JScript----------------
  [DNTypeName('Microsoft.JScript.IErrorHandler')]
  DNIErrorHandler = interface(DDN.mscorlib.DNObject)
  ['{E93D012C-56BB-4F32-864F-7C75EDA17B14}']
  { methods } 

    function OnCompilerError(error: DNIVsaFullErrorInfo): Boolean;

  end;

  //-------------namespace: Microsoft.JScript----------------
  [DNTypeName('Microsoft.JScript.IMessageReceiver')]
  DNIMessageReceiver = interface(DDN.mscorlib.DNObject)
  ['{F062C7FB-53BF-4F0D-B0F6-D66C5948E63F}']
  { methods } 

    procedure Message(strValue: string);

  end;

  //-------------namespace: Microsoft.JScript----------------
  [DNTypeName('Microsoft.JScript.IMethodsCompletionInfo')]
  DNIMethodsCompletionInfo = interface(DDN.mscorlib.DNObject)
  ['{E0BCF37B-1C24-451C-AC43-40FF86839117}']
  end;

  //-------------namespace: Microsoft.JScript----------------
  [DNTypeName('Microsoft.JScript.INeedEngine')]
  DNINeedEngine = interface(DDN.mscorlib.DNObject)
  ['{417C17B7-8FE8-3830-B6AE-41BB355B4FD3}']
  { methods } 

    function GetEngine: DNVsaEngine;
    procedure SetEngine(engine: DNVsaEngine);

  end;

  //-------------namespace: Microsoft.JScript----------------
  [DNTypeName('Microsoft.JScript.IObjectCompletionInfo')]
  DNIObjectCompletionInfo = interface(DDN.mscorlib.DNObject)
  ['{052019B5-704B-4B99-AEF8-25A11A922B2E}']
  end;

  //-------------namespace: Microsoft.JScript----------------
  [DNTypeName('Microsoft.JScript.IParseText')]
  DNIParseText = interface(DDN.mscorlib.DNObject)
  ['{C1468187-3DA1-49DF-ADF8-5F8600E59EA8}']
  { methods } 

    procedure Parse(code: string; error: DNIErrorHandler);

  end;

  //-------------namespace: Microsoft.JScript----------------
  [DNTypeName('Microsoft.JScript.IRedirectOutput')]
  DNIRedirectOutput = interface(DDN.mscorlib.DNObject)
  ['{5B807FA1-00CD-46EE-A493-FD80AC944715}']
  { methods } 

    procedure SetOutputStream(output: DNIMessageReceiver);

  end;

  //-------------namespace: Microsoft.JScript----------------
  [DNTypeName('Microsoft.JScript.ISite2')]
  DNISite2 = interface(DDN.mscorlib.DNObject)
  ['{BFF6C980-0705-4394-88B8-A03A4B8B4CD7}']
  { methods } 

    function GetParentChain(obj: DDN.mscorlib.DNObject): TArray<DDN.mscorlib.DNObject>;

  end;

  //-------------namespace: Microsoft.JScript----------------
  [DNTypeName('Microsoft.JScript.ITokenColorInfo')]
  DNITokenColorInfo = interface(DDN.mscorlib.DNObject)
  ['{0F20D5C8-CBDB-4B64-AB7F-10B158407323}']
  { getters & setters } 

    function get_StartPosition: Int32;
    function get_EndPosition: Int32;
    function get_Color: DNTokenColor;

  { propertys } 

    property StartPosition: Int32 read get_StartPosition;
    property EndPosition: Int32 read get_EndPosition;
    property Color: DNTokenColor read get_Color;
  end;

  //-------------namespace: Microsoft.JScript----------------
  [DNTypeName('Microsoft.JScript.ITokenEnumerator')]
  DNITokenEnumerator = interface(DDN.mscorlib.DNObject)
  ['{556BA9E0-BD6A-4837-89F0-C79B14759181}']
  { methods } 

    function GetNext: DNITokenColorInfo;
    procedure Reset;

  end;

  //-------------namespace: Microsoft.JScript----------------
  [DNTypeName('Microsoft.JScript.IWrappedMember')]
  DNIWrappedMember = interface(DDN.mscorlib.DNObject)
  ['{AB38C29A-014A-36C6-9C6E-CCF3ABA6D041}']
  { methods } 

    function GetWrappedObject: DDN.mscorlib.DNObject;

  end;

  //-------------namespace: Microsoft.JScript----------------
  [DNTypeName('Microsoft.JScript.MemberInfoInitializer')]
  DNMemberInfoInitializer = interface(DDN.mscorlib.DNObject)
  ['{98A3BF0A-1B56-4F32-ACE0-594FEB27EC48}']
  { methods } 

    procedure Initialize(name: string; dispatch: DNCOMMemberInfo);
    function GetCOMMemberInfo: DNCOMMemberInfo;

  end;

  //-------------namespace: Microsoft.JScript.Vsa----------------
  [DNTypeName('Microsoft.JScript.Vsa.IJSVsaEngine')]
  DNIJSVsaEngine = interface(DDN.mscorlib.DNObject)
  ['{8FA2C97B-47E4-4A31-A7F5-FF39D1195CD9}']
  { getters & setters } 

    function get_Site: DNIJSVsaSite;
    procedure set_Site(value: DNIJSVsaSite);
    function get_Name: string;
    procedure set_Name(value: string);
    function get_RootMoniker: string;
    procedure set_RootMoniker(value: string);
    function get_RootNamespace: string;
    procedure set_RootNamespace(value: string);
    function get_LCID: Int32;
    procedure set_LCID(value: Int32);
    function get_GenerateDebugInfo: Boolean;
    procedure set_GenerateDebugInfo(value: Boolean);
    function get_Evidence: DDN.mscorlib.DNEvidence;
    procedure set_Evidence(value: DDN.mscorlib.DNEvidence);
    function get_Items: DNIJSVsaItems;
    function get_IsDirty: Boolean;
    function get_Language: string;
    function get_Version: string;
    function get_IsRunning: Boolean;
    function get_IsCompiled: Boolean;
    function get_Assembly: DDN.mscorlib.DNAssembly;

  { methods } 

    function GetOption(name: string): DDN.mscorlib.DNObject;
    procedure SetOption(name: string; value: DDN.mscorlib.DNObject);
    function Compile: Boolean;
    procedure Run;
    procedure Reset;
    procedure Close;
    procedure RevokeCache;
    procedure SaveSourceState(site: DNIJSVsaPersistSite);
    procedure LoadSourceState(site: DNIJSVsaPersistSite);
    procedure SaveCompiledState(out pe: TArray<Byte>; out pdb: TArray<Byte>);
    procedure InitNew;
    function IsValidIdentifier(identifier: string): Boolean;

  { propertys } 

    property Site: DNIJSVsaSite read get_Site write set_Site;
    property Name: string read get_Name write set_Name;
    property RootMoniker: string read get_RootMoniker write set_RootMoniker;
    property RootNamespace: string read get_RootNamespace write set_RootNamespace;
    property LCID: Int32 read get_LCID write set_LCID;
    property GenerateDebugInfo: Boolean read get_GenerateDebugInfo write set_GenerateDebugInfo;
    property Evidence: DDN.mscorlib.DNEvidence read get_Evidence write set_Evidence;
    property Items: DNIJSVsaItems read get_Items;
    property IsDirty: Boolean read get_IsDirty;
    property Language: string read get_Language;
    property Version: string read get_Version;
    property IsRunning: Boolean read get_IsRunning;
    property IsCompiled: Boolean read get_IsCompiled;
    property Assembly: DDN.mscorlib.DNAssembly read get_Assembly;
  end;

  //-------------namespace: Microsoft.JScript.Vsa----------------
  [DNTypeName('Microsoft.JScript.Vsa.IJSVsaError')]
  DNIJSVsaError = interface(DDN.mscorlib.DNObject)
  ['{425EA439-6417-4F3E-BCC9-1AFAC79E3F66}']
  { getters & setters } 

    function get_Line: Int32;
    function get_Severity: Int32;
    function get_Description: string;
    function get_LineText: string;
    function get_SourceItem: DNIJSVsaItem;
    function get_EndColumn: Int32;
    function get_StartColumn: Int32;
    function get_Number: Int32;
    function get_SourceMoniker: string;

  { propertys } 

    property Line: Int32 read get_Line;
    property Severity: Int32 read get_Severity;
    property Description: string read get_Description;
    property LineText: string read get_LineText;
    property SourceItem: DNIJSVsaItem read get_SourceItem;
    property EndColumn: Int32 read get_EndColumn;
    property StartColumn: Int32 read get_StartColumn;
    property Number: Int32 read get_Number;
    property SourceMoniker: string read get_SourceMoniker;
  end;

  //-------------namespace: Microsoft.JScript----------------
  [DNTypeName('Microsoft.JScript.IVsaFullErrorInfo')]
  DNIVsaFullErrorInfo = interface(DNIJSVsaError)
  ['{DC3691BC-F188-4B67-8338-326671E0F3F6}']
  { getters & setters } 

    function get_EndLine: Int32;

  { propertys } 

    property EndLine: Int32 read get_EndLine;
  end;

  //-------------namespace: Microsoft.JScript.Vsa----------------
  [DNTypeName('Microsoft.JScript.Vsa.IJSVsaItem')]
  DNIJSVsaItem = interface(DDN.mscorlib.DNObject)
  ['{1F2377AC-8A09-417B-89DC-D146769F0B45}']
  { getters & setters } 

    function get_Name: string;
    procedure set_Name(value: string);
    function get_ItemType: DNJSVsaItemType;
    function get_IsDirty: Boolean;

  { methods } 

    function GetOption(name: string): DDN.mscorlib.DNObject;
    procedure SetOption(name: string; value: DDN.mscorlib.DNObject);

  { propertys } 

    property Name: string read get_Name write set_Name;
    property ItemType: DNJSVsaItemType read get_ItemType;
    property IsDirty: Boolean read get_IsDirty;
  end;

  //-------------namespace: Microsoft.JScript----------------
  [DNTypeName('Microsoft.JScript.IVsaScriptScope')]
  DNIVsaScriptScope = interface(DNIJSVsaItem)
  ['{ED4BAE22-2F3C-419A-B487-CF869E716B95}']
  { getters & setters } 

    function get_Parent: DNIVsaScriptScope;

  { methods } 

    function AddItem(itemName: string; &type: DNJSVsaItemType): DNIJSVsaItem;
    function GetItem(itemName: string): DNIJSVsaItem;
    procedure RemoveItem(itemName: string); overload;
    procedure RemoveItem(item: DNIJSVsaItem); overload;
    function GetItemCount: Int32;
    function GetItemAtIndex(index: Int32): DNIJSVsaItem;
    procedure RemoveItemAtIndex(index: Int32);
    function GetObject: DDN.mscorlib.DNObject;
    function CreateDynamicItem(itemName: string; &type: DNJSVsaItemType): DNIJSVsaItem;

  { propertys } 

    property Parent: DNIVsaScriptScope read get_Parent;
  end;

  //-------------namespace: Microsoft.JScript.Vsa----------------
  [DNTypeName('Microsoft.JScript.Vsa.IJSVsaCodeItem')]
  DNIJSVsaCodeItem = interface(DNIJSVsaItem)
  ['{528BBC87-CCDC-4F07-B29C-9B10575DEB2F}']
  { getters & setters } 

    function get_SourceText: string;
    procedure set_SourceText(value: string);
    function get_CodeDOM: DDN.System.DNCodeObject;

  { methods } 

    procedure AppendSourceText(text: string);
    procedure AddEventSource(eventSourceName: string; eventSourceType: string);
    procedure RemoveEventSource(eventSourceName: string);

  { propertys } 

    property SourceText: string read get_SourceText write set_SourceText;
    property CodeDOM: DDN.System.DNCodeObject read get_CodeDOM;
  end;

  //-------------namespace: Microsoft.JScript----------------
  [DNTypeName('Microsoft.JScript.IVsaScriptCodeItem')]
  DNIVsaScriptCodeItem = interface(DNIJSVsaCodeItem)
  ['{E0C0FFE8-7EEA-4EE5-B7E4-0080C7EB0B74}']
  { getters & setters } 

    function get_StartLine: Int32;
    procedure set_StartLine(value: Int32);
    function get_StartColumn: Int32;
    procedure set_StartColumn(value: Int32);

  { methods } 

    function Execute: DDN.mscorlib.DNObject;

  { propertys } 

    property StartLine: Int32 read get_StartLine write set_StartLine;
    property StartColumn: Int32 read get_StartColumn write set_StartColumn;
  end;

  //-------------namespace: Microsoft.JScript.Vsa----------------
  [DNTypeName('Microsoft.JScript.Vsa.IJSVsaGlobalItem')]
  DNIJSVsaGlobalItem = interface(DNIJSVsaItem)
  ['{15B2CCE5-D1EA-4EB9-9E06-8729C72D631B}']
  { getters & setters } 

    procedure set_TypeString(value: string);
    function get_ExposeMembers: Boolean;
    procedure set_ExposeMembers(value: Boolean);

  { propertys } 

    property TypeString: string write set_TypeString;
    property ExposeMembers: Boolean read get_ExposeMembers write set_ExposeMembers;
  end;

  //-------------namespace: Microsoft.JScript.Vsa----------------
  [DNTypeName('Microsoft.JScript.Vsa.IJSVsaReferenceItem')]
  DNIJSVsaReferenceItem = interface(DNIJSVsaItem)
  ['{8EFD265B-677A-4B09-A471-E086787AA727}']
  { getters & setters } 

    function get_AssemblyName: string;
    procedure set_AssemblyName(value: string);

  { propertys } 

    property AssemblyName: string read get_AssemblyName write set_AssemblyName;
  end;

  //-------------namespace: Microsoft.JScript.Vsa----------------
  [DNTypeName('Microsoft.JScript.Vsa.IJSVsaPersistSite')]
  DNIJSVsaPersistSite = interface(DDN.mscorlib.DNObject)
  ['{F901A1FF-8EBA-4C38-B6E0-E7E52606D325}']
  { methods } 

    procedure SaveElement(name: string; source: string);
    function LoadElement(name: string): string;

  end;

  //-------------namespace: Microsoft.JScript.Vsa----------------
  [DNTypeName('Microsoft.JScript.Vsa.IJSVsaSite')]
  DNIJSVsaSite = interface(DDN.mscorlib.DNObject)
  ['{605A62B5-3BA8-49E0-A056-0A6A7A5846A3}']
  { methods } 

    procedure GetCompiledState(out pe: TArray<Byte>; out debugInfo: TArray<Byte>);
    function OnCompilerError(error: DNIJSVsaError): Boolean;
    function GetGlobalInstance(name: string): DDN.mscorlib.DNObject;
    function GetEventSourceInstance(itemName: string; eventSourceName: string): DDN.mscorlib.DNObject;
    procedure Notify(notify: string; info: DDN.mscorlib.DNObject);

  end;

  //-------------namespace: Microsoft.JScript.Vsa----------------
  [DNTypeName('Microsoft.JScript.Vsa.IJSVsaItems')]
  DNIJSVsaItems = interface(DDN.mscorlib.DNIEnumerable)
  ['{172341E0-9B0D-43E6-9EFF-75E030A46461}']
  { getters & setters } 

    function get_Count: Int32;
    function get_Item(name: string): DNIJSVsaItem; overload;
    function get_Item(index: Int32): DNIJSVsaItem; overload;

  { methods } 

    function CreateItem(name: string; itemType: DNJSVsaItemType; itemFlag: DNJSVsaItemFlag): DNIJSVsaItem;
    procedure Remove(name: string); overload;
    procedure Remove(index: Int32); overload;

  { propertys } 

    property Count: Int32 read get_Count;
    property Item[name: string]: DNIJSVsaItem read get_Item; default;
    property Item[index: Int32]: DNIJSVsaItem read get_Item; default;
  end;

  //-------------namespace: Microsoft.JScript----------------
  DNASTClass = interface(DDN.mscorlib.DNObjectClass)
  ['{860E66BB-C46D-5E09-8D09-592AFFE7086A}']
  end;

  [DNTypeName('Microsoft.JScript.AST')]
  DNAST = interface(DDN.mscorlib.DNObject)
  ['{D8C79A49-E892-30B2-A09B-B866AE209B7B}']
  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNAST = class(TDNGenericImport<DNASTClass, DNAST>) end;

  //-------------namespace: Microsoft.JScript----------------
  DNArrayLiteralClass = interface(DNASTClass)
  ['{6FFEF924-B471-52B8-A7C2-A3BDE1FE5B43}']
  { constructors } 

    {class} function init(context: DNContext; elements: DNASTList): DNArrayLiteral;

  end;

  [DNTypeName('Microsoft.JScript.ArrayLiteral')]
  DNArrayLiteral = interface(DNAST)
  ['{736607EA-CD6A-3674-AA8C-7DE3D1E52725}']
  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNArrayLiteral = class(TDNGenericImport<DNArrayLiteralClass, DNArrayLiteral>) end;

  //-------------namespace: Microsoft.JScript----------------
  DNAssemblyCustomAttributeListClass = interface(DNASTClass)
  ['{6EF6C9E3-80BE-55C1-A9A5-9AF385AF0284}']
  end;

  [DNTypeName('Microsoft.JScript.AssemblyCustomAttributeList')]
  DNAssemblyCustomAttributeList = interface(DNAST)
  ['{1143116F-3E10-3F98-8536-BFE04FBD5B83}']
  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNAssemblyCustomAttributeList = class(TDNGenericImport<DNAssemblyCustomAttributeListClass, DNAssemblyCustomAttributeList>) end;

  //-------------namespace: Microsoft.JScript----------------
  DNASTListClass = interface(DNASTClass)
  ['{500464A0-ECF4-58A9-8ADA-BBB3572BBC75}']
  end;

  [DNTypeName('Microsoft.JScript.ASTList')]
  DNASTList = interface(DNAST)
  ['{84A4A97F-815C-3DA1-BA68-350C27C6CFFA}']
  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNASTList = class(TDNGenericImport<DNASTListClass, DNASTList>) end;

  //-------------namespace: Microsoft.JScript----------------
  DNBinaryOpClass = interface(DNASTClass)
  ['{C8F4845C-32E5-505A-8692-8E8915654B9F}']
  end;

  [DNTypeName('Microsoft.JScript.BinaryOp')]
  DNBinaryOp = interface(DNAST)
  ['{C95F2E40-1973-3D51-AA38-A63EDAC939BE}']
  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNBinaryOp = class(TDNGenericImport<DNBinaryOpClass, DNBinaryOp>) end;

  //-------------namespace: Microsoft.JScript----------------
  DNBitwiseBinaryClass = interface(DNBinaryOpClass)
  ['{1C14197F-73AB-5203-AEE6-D7DD666BE9AC}']
  { constructors } 

    {class} function init(operatorTok: Int32): DNBitwiseBinary;

  end;

  [DNTypeName('Microsoft.JScript.BitwiseBinary')]
  DNBitwiseBinary = interface(DNBinaryOp)
  ['{EDC4933C-FFBE-3AC8-B4B8-FEF5B08111EE}']
  { methods } 

    function EvaluateBitwiseBinary(v1: DDN.mscorlib.DNObject; v2: DDN.mscorlib.DNObject): DDN.mscorlib.DNObject;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNBitwiseBinary = class(TDNGenericImport<DNBitwiseBinaryClass, DNBitwiseBinary>) end;

  //-------------namespace: Microsoft.JScript----------------
  DNEqualityClass = interface(DNBinaryOpClass)
  ['{6815852C-B4F5-56AF-B169-2E01B7514AB6}']
  { constructors } 

    {class} function init(operatorTok: Int32): DNEquality;

  { static methods } 

    {class} function JScriptEquals(v1: DDN.mscorlib.DNObject; v2: DDN.mscorlib.DNObject): Boolean;

  end;

  [DNTypeName('Microsoft.JScript.Equality')]
  DNEquality = interface(DNBinaryOp)
  ['{9007F98B-536C-3E96-A216-CA6B2EBEB69F}']
  { methods } 

    function EvaluateEquality(v1: DDN.mscorlib.DNObject; v2: DDN.mscorlib.DNObject): Boolean;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNEquality = class(TDNGenericImport<DNEqualityClass, DNEquality>) end;

  //-------------namespace: Microsoft.JScript----------------
  DNInClass = interface(DNBinaryOpClass)
  ['{2EB5A9C8-AD6E-5464-9CC5-57BC059C5DEE}']
  { static methods } 

    {class} function JScriptIn(v1: DDN.mscorlib.DNObject; v2: DDN.mscorlib.DNObject): Boolean;

  end;

  [DNTypeName('Microsoft.JScript.In')]
  DNIn = interface(DNBinaryOp)
  ['{82FC9CBA-8B3E-36AD-AE35-C12984A28A7F}']
  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNIn = class(TDNGenericImport<DNInClass, DNIn>) end;

  //-------------namespace: Microsoft.JScript----------------
  DNInstanceofClass = interface(DNBinaryOpClass)
  ['{AAC93039-29DE-552D-9DD3-D118AD479F7E}']
  { static methods } 

    {class} function JScriptInstanceof(v1: DDN.mscorlib.DNObject; v2: DDN.mscorlib.DNObject): Boolean;

  end;

  [DNTypeName('Microsoft.JScript.Instanceof')]
  DNInstanceof = interface(DNBinaryOp)
  ['{EEA25003-8D21-37DE-B47E-73EB1AA4A247}']
  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNInstanceof = class(TDNGenericImport<DNInstanceofClass, DNInstanceof>) end;

  //-------------namespace: Microsoft.JScript----------------
  DNNumericBinaryClass = interface(DNBinaryOpClass)
  ['{C3101F8F-168A-5792-90BE-9DA3B16556D9}']
  { constructors } 

    {class} function init(operatorTok: Int32): DNNumericBinary;

  { static methods } 

    {class} function DoOp(v1: DDN.mscorlib.DNObject; v2: DDN.mscorlib.DNObject; operatorTok: DNJSToken): DDN.mscorlib.DNObject;

  end;

  [DNTypeName('Microsoft.JScript.NumericBinary')]
  DNNumericBinary = interface(DNBinaryOp)
  ['{36DDA5E3-EEE1-3C28-8EA2-748F3EFA0767}']
  { methods } 

    function EvaluateNumericBinary(v1: DDN.mscorlib.DNObject; v2: DDN.mscorlib.DNObject): DDN.mscorlib.DNObject;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNNumericBinary = class(TDNGenericImport<DNNumericBinaryClass, DNNumericBinary>) end;

  //-------------namespace: Microsoft.JScript----------------
  DNPlusClass = interface(DNBinaryOpClass)
  ['{7DF7E04C-5CA1-5F1C-A1A1-AB4CF166B6CD}']
  { constructors } 

    {class} function init: DNPlus;

  { static methods } 

    {class} function DoOp(v1: DDN.mscorlib.DNObject; v2: DDN.mscorlib.DNObject): DDN.mscorlib.DNObject;

  end;

  [DNTypeName('Microsoft.JScript.Plus')]
  DNPlus = interface(DNBinaryOp)
  ['{2741D411-E488-37D7-A40E-43093974934E}']
  { methods } 

    function EvaluatePlus(v1: DDN.mscorlib.DNObject; v2: DDN.mscorlib.DNObject): DDN.mscorlib.DNObject;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNPlus = class(TDNGenericImport<DNPlusClass, DNPlus>) end;

  //-------------namespace: Microsoft.JScript----------------
  DNRelationalClass = interface(DNBinaryOpClass)
  ['{165454B5-6B3D-5351-88AE-37A4F0536BC6}']
  { constructors } 

    {class} function init(operatorTok: Int32): DNRelational;

  { static methods } 

    {class} function JScriptCompare(v1: DDN.mscorlib.DNObject; v2: DDN.mscorlib.DNObject): Double;

  end;

  [DNTypeName('Microsoft.JScript.Relational')]
  DNRelational = interface(DNBinaryOp)
  ['{1D3EE118-BF89-30D8-807E-0540D9E2117A}']
  { methods } 

    function EvaluateRelational(v1: DDN.mscorlib.DNObject; v2: DDN.mscorlib.DNObject): Double;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNRelational = class(TDNGenericImport<DNRelationalClass, DNRelational>) end;

  //-------------namespace: Microsoft.JScript----------------
  DNStrictEqualityClass = interface(DNBinaryOpClass)
  ['{A7A381B0-E9B0-59FC-8C06-CB0FCB861582}']
  { static methods } 

    {class} function JScriptStrictEquals(v1: DDN.mscorlib.DNObject; v2: DDN.mscorlib.DNObject): Boolean;

  end;

  [DNTypeName('Microsoft.JScript.StrictEquality')]
  DNStrictEquality = interface(DNBinaryOp)
  ['{D8710F27-24B2-3948-A8D3-D56A48037B0E}']
  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNStrictEquality = class(TDNGenericImport<DNStrictEqualityClass, DNStrictEquality>) end;

  //-------------namespace: Microsoft.JScript----------------
  DNBindingClass = interface(DNASTClass)
  ['{467A9C37-5DF9-53EB-A2CE-E5FC02474D9B}']
  { static methods } 

    {class} function IsMissing(value: DDN.mscorlib.DNObject): Boolean;

  end;

  [DNTypeName('Microsoft.JScript.Binding')]
  DNBinding = interface(DNAST)
  ['{8E4E3B8A-CC06-35A1-9B61-D49107A70C98}']
  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNBinding = class(TDNGenericImport<DNBindingClass, DNBinding>) end;

  //-------------namespace: Microsoft.JScript----------------
  DNBlockClass = interface(DNASTClass)
  ['{DE297142-6094-5010-B4D4-9936B1AA66B9}']
  end;

  [DNTypeName('Microsoft.JScript.Block')]
  DNBlock = interface(DNAST)
  ['{4655D830-95C9-32D2-AACE-24AD59606E59}']
  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNBlock = class(TDNGenericImport<DNBlockClass, DNBlock>) end;

  //-------------namespace: Microsoft.JScript----------------
  DNDebugBreakClass = interface(DNASTClass)
  ['{0E50D9A1-1B81-5908-8E7E-CE8B985E6746}']
  end;

  [DNTypeName('Microsoft.JScript.DebugBreak')]
  DNDebugBreak = interface(DNAST)
  ['{EBFAB6AC-A275-3674-A771-9CF83BE08086}']
  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNDebugBreak = class(TDNGenericImport<DNDebugBreakClass, DNDebugBreak>) end;

  //-------------namespace: Microsoft.JScript----------------
  DNEvalClass = interface(DNASTClass)
  ['{186A6E9C-0446-546D-9E2F-AC3E28103BF4}']
  { static methods } 

    {class} function JScriptEvaluate(source: DDN.mscorlib.DNObject; engine: DNVsaEngine): DDN.mscorlib.DNObject; overload;
    {class} function JScriptEvaluate(source: DDN.mscorlib.DNObject; unsafeOption: DDN.mscorlib.DNObject; engine: DNVsaEngine): DDN.mscorlib.DNObject; overload;

  end;

  [DNTypeName('Microsoft.JScript.Eval')]
  DNEval = interface(DNAST)
  ['{584FE543-6019-33C4-8BA1-C9E5F2DFE24C}']
  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNEval = class(TDNGenericImport<DNEvalClass, DNEval>) end;

  //-------------namespace: Microsoft.JScript----------------
  DNForInClass = interface(DNASTClass)
  ['{A54F3023-6139-5C5D-8EC1-67F462D4EC30}']
  { static methods } 

    {class} function JScriptGetEnumerator(coll: DDN.mscorlib.DNObject): DDN.mscorlib.DNIEnumerator;

  end;

  [DNTypeName('Microsoft.JScript.ForIn')]
  DNForIn = interface(DNAST)
  ['{C44F77EB-38C9-38AF-B435-BC2A42E2BB5C}']
  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNForIn = class(TDNGenericImport<DNForInClass, DNForIn>) end;

  //-------------namespace: Microsoft.JScript----------------
  DNFunctionDeclarationClass = interface(DNASTClass)
  ['{6BE84960-54D4-56E4-99EF-627E08A729FC}']
  { static methods } 

    {class} function JScriptFunctionDeclaration(handle: DDN.mscorlib.DNRuntimeTypeHandle; name: string; method_name: string; formal_parameters: TArray<string>; fields: TArray<DNJSLocalField>; must_save_stack_locals: Boolean; hasArgumentsObject: Boolean; text: string; declaringObject: DDN.mscorlib.DNObject; engine: DNVsaEngine): DNClosure;

  end;

  [DNTypeName('Microsoft.JScript.FunctionDeclaration')]
  DNFunctionDeclaration = interface(DNAST)
  ['{309D8D11-EF27-38AD-8AC2-26550770C1A0}']
  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNFunctionDeclaration = class(TDNGenericImport<DNFunctionDeclarationClass, DNFunctionDeclaration>) end;

  //-------------namespace: Microsoft.JScript----------------
  DNFunctionExpressionClass = interface(DNASTClass)
  ['{C7E3B3C3-08E1-562B-89A4-70907AD8A30A}']
  { static methods } 

    {class} function JScriptFunctionExpression(handle: DDN.mscorlib.DNRuntimeTypeHandle; name: string; method_name: string; formal_params: TArray<string>; fields: TArray<DNJSLocalField>; must_save_stack_locals: Boolean; hasArgumentsObject: Boolean; text: string; engine: DNVsaEngine): DNFunctionObject;

  end;

  [DNTypeName('Microsoft.JScript.FunctionExpression')]
  DNFunctionExpression = interface(DNAST)
  ['{05EA7E33-D020-364F-8187-9BE22B17A294}']
  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNFunctionExpression = class(TDNGenericImport<DNFunctionExpressionClass, DNFunctionExpression>) end;

  //-------------namespace: Microsoft.JScript----------------
  DNImportClass = interface(DNASTClass)
  ['{356A035F-3A00-55A6-9BDE-4909163BB2DE}']
  { static methods } 

    {class} procedure JScriptImport(name: string; engine: DNVsaEngine);

  end;

  [DNTypeName('Microsoft.JScript.Import')]
  DNImport = interface(DNAST)
  ['{DE8CA25D-0C0B-3898-BB82-1C5787A8D4A4}']
  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNImport = class(TDNGenericImport<DNImportClass, DNImport>) end;

  //-------------namespace: Microsoft.JScript----------------
  DNPackageClass = interface(DNASTClass)
  ['{158D728B-F8A2-5981-9184-B1BE6CF0932C}']
  { static methods } 

    {class} procedure JScriptPackage(rootName: string; engine: DNVsaEngine);

  end;

  [DNTypeName('Microsoft.JScript.Package')]
  DNPackage = interface(DNAST)
  ['{87AFE896-A837-3ECB-A5BB-B2E61A5E8D12}']
  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNPackage = class(TDNGenericImport<DNPackageClass, DNPackage>) end;

  //-------------namespace: Microsoft.JScript----------------
  DNScriptBlockClass = interface(DNASTClass)
  ['{50FAE35D-BD34-5D0F-B37C-C8AC9CBC5798}']
  end;

  [DNTypeName('Microsoft.JScript.ScriptBlock')]
  DNScriptBlock = interface(DNAST)
  ['{B0A80084-B3A1-388E-B5A5-AF97A5B28C8A}']
  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNScriptBlock = class(TDNGenericImport<DNScriptBlockClass, DNScriptBlock>) end;

  //-------------namespace: Microsoft.JScript----------------
  DNThrowClass = interface(DNASTClass)
  ['{5B541E34-C2D7-59CA-92B0-0700903F9FD6}']
  { static methods } 

    {class} function JScriptThrow(value: DDN.mscorlib.DNObject): DDN.mscorlib.DNException;

  end;

  [DNTypeName('Microsoft.JScript.Throw')]
  DNThrow = interface(DNAST)
  ['{65A10D53-131A-34F3-A666-A79511CC4A30}']
  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNThrow = class(TDNGenericImport<DNThrowClass, DNThrow>) end;

  //-------------namespace: Microsoft.JScript----------------
  DNTryClass = interface(DNASTClass)
  ['{04CADDE7-E993-554C-B21B-DB26B532F86D}']
  { static methods } 

    {class} procedure PushHandlerScope(engine: DNVsaEngine; id: string; scopeId: Int32);
    {class} function JScriptExceptionValue(e: DDN.mscorlib.DNObject; engine: DNVsaEngine): DDN.mscorlib.DNObject;

  end;

  [DNTypeName('Microsoft.JScript.Try')]
  DNTry = interface(DNAST)
  ['{4BFD14D8-91B5-3875-9916-F8AC09294691}']
  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNTry = class(TDNGenericImport<DNTryClass, DNTry>) end;

  //-------------namespace: Microsoft.JScript----------------
  DNUnaryOpClass = interface(DNASTClass)
  ['{A3F3CCD1-385D-5D5D-9CA4-FBD8E93401AC}']
  end;

  [DNTypeName('Microsoft.JScript.UnaryOp')]
  DNUnaryOp = interface(DNAST)
  ['{90465A01-1A81-35CF-9CCA-5DA0A935E15D}']
  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNUnaryOp = class(TDNGenericImport<DNUnaryOpClass, DNUnaryOp>) end;

  //-------------namespace: Microsoft.JScript----------------
  DNNumericUnaryClass = interface(DNUnaryOpClass)
  ['{0ADB4483-DADE-5E2D-8D0B-BE166D4B1C09}']
  { constructors } 

    {class} function init(operatorTok: Int32): DNNumericUnary;

  end;

  [DNTypeName('Microsoft.JScript.NumericUnary')]
  DNNumericUnary = interface(DNUnaryOp)
  ['{07EA7E21-2CEC-3A90-B619-A2A64D02D364}']
  { methods } 

    function EvaluateUnary(v: DDN.mscorlib.DNObject): DDN.mscorlib.DNObject;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNNumericUnary = class(TDNGenericImport<DNNumericUnaryClass, DNNumericUnary>) end;

  //-------------namespace: Microsoft.JScript----------------
  DNPostOrPrefixOperatorClass = interface(DNUnaryOpClass)
  ['{4ECD499D-9A67-599F-9542-DD9BC4F1DA52}']
  { constructors } 

    {class} function init(operatorTok: Int32): DNPostOrPrefixOperator;

  end;

  [DNTypeName('Microsoft.JScript.PostOrPrefixOperator')]
  DNPostOrPrefixOperator = interface(DNUnaryOp)
  ['{2E6DDD3F-BF27-3B34-89A9-E1C287521618}']
  { methods } 

    function EvaluatePostOrPrefix(out v: DDN.mscorlib.DNObject): DDN.mscorlib.DNObject;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNPostOrPrefixOperator = class(TDNGenericImport<DNPostOrPrefixOperatorClass, DNPostOrPrefixOperator>) end;

  //-------------namespace: Microsoft.JScript----------------
  DNTypeofClass = interface(DNUnaryOpClass)
  ['{A5E7B8E3-2D54-56C4-AC59-14B0B6DEF8BD}']
  { static methods } 

    {class} function JScriptTypeof(value: DDN.mscorlib.DNObject): string;

  end;

  [DNTypeName('Microsoft.JScript.Typeof')]
  DNTypeof = interface(DNUnaryOp)
  ['{ED2B4650-E79E-3CE8-890B-1F3C3074CA15}']
  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNTypeof = class(TDNGenericImport<DNTypeofClass, DNTypeof>) end;

  //-------------namespace: Microsoft.JScript----------------
  DNWithClass = interface(DNASTClass)
  ['{07F32172-F44E-57F5-8E99-12052AFD7E38}']
  { static methods } 

    {class} function JScriptWith(withOb: DDN.mscorlib.DNObject; engine: DNVsaEngine): DDN.mscorlib.DNObject;

  end;

  [DNTypeName('Microsoft.JScript.With')]
  DNWith = interface(DNAST)
  ['{599568C8-F7A0-3514-B13B-0B069E866529}']
  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNWith = class(TDNGenericImport<DNWithClass, DNWith>) end;

  //-------------namespace: Microsoft.JScript----------------
  DNCmdLineOptionParserClass = interface(DDN.mscorlib.DNObjectClass)
  ['{219B112E-D21E-53BB-AD61-61D90F4F7AC6}']
  { constructors } 

    {class} function init: DNCmdLineOptionParser;

  { static methods } 

    {class} function IsSimpleOption(option: string; prefix: string): Boolean;
    {class} function IsArgumentOption(option: string; prefix: string): string; overload;
    {class} function IsArgumentOption(option: string; shortPrefix: string; longPrefix: string): string; overload;
    {class} function IsBooleanOption(option: string; prefix: string): DDN.mscorlib.DNObject; overload;
    {class} function IsBooleanOption(option: string; shortPrefix: string; longPrefix: string): DDN.mscorlib.DNObject; overload;

  end;

  [DNTypeName('Microsoft.JScript.CmdLineOptionParser')]
  DNCmdLineOptionParser = interface(DDN.mscorlib.DNObject)
  ['{18794D88-7D3D-3086-AB6E-04229D897423}']
  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNCmdLineOptionParser = class(TDNGenericImport<DNCmdLineOptionParserClass, DNCmdLineOptionParser>) end;

  //-------------namespace: Microsoft.JScript----------------
  DNContextClass = interface(DDN.mscorlib.DNObjectClass)
  ['{7F52937D-4A2D-55A6-8A74-F95E84A9D7C8}']
  end;

  [DNTypeName('Microsoft.JScript.Context')]
  DNContext = interface(DDN.mscorlib.DNObject)
  ['{C53AD757-5A68-38AF-94EC-FBACD37B3F14}']
  { getters & setters } 

    function get_EndColumn: Int32;
    function get_EndLine: Int32;
    function get_EndPosition: Int32;
    function get_StartColumn: Int32;
    function get_StartLine: Int32;
    function get_StartPosition: Int32;

  { methods } 

    function GetCode: string;
    function GetToken: DNJSToken;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property EndColumn: Int32 read get_EndColumn;
    property EndLine: Int32 read get_EndLine;
    property EndPosition: Int32 read get_EndPosition;
    property StartColumn: Int32 read get_StartColumn;
    property StartLine: Int32 read get_StartLine;
    property StartPosition: Int32 read get_StartPosition;
  end;

  TDNContext = class(TDNGenericImport<DNContextClass, DNContext>) end;

  //-------------namespace: Microsoft.JScript----------------
  DNConvertClass = interface(DDN.mscorlib.DNObjectClass)
  ['{4E40B4CD-C879-5C2C-900A-A87C80D4A26F}']
  { constructors } 

    {class} function init: DNConvert;

  { static methods } 

    {class} function IsBadIndex(ast: DNAST): Boolean;
    {class} function CheckIfDoubleIsInteger(d: Double): Double;
    {class} function CheckIfSingleIsInteger(s: Single): Single;
    {class} function Coerce(value: DDN.mscorlib.DNObject; &type: DDN.mscorlib.DNObject): DDN.mscorlib.DNObject;
    {class} function Coerce2(value: DDN.mscorlib.DNObject; target: DDN.mscorlib.DNTypeCode; truncationPermitted: Boolean): DDN.mscorlib.DNObject;
    {class} procedure ThrowTypeMismatch(val: DDN.mscorlib.DNObject);
    {class} function ToBoolean(d: Double): Boolean; overload;
    {class} function ToBoolean(value: DDN.mscorlib.DNObject): Boolean; overload;
    {class} function ToBoolean(value: DDN.mscorlib.DNObject; explicitConversion: Boolean): Boolean; overload;
    {class} function ToForInObject(value: DDN.mscorlib.DNObject; engine: DNVsaEngine): DDN.mscorlib.DNObject;
    {class} function ToInt32(value: DDN.mscorlib.DNObject): Int32;
    {class} function ToNumber(value: DDN.mscorlib.DNObject): Double; overload;
    {class} function ToNumber(str: string): Double; overload;
    {class} function ToNativeArray(value: DDN.mscorlib.DNObject; handle: DDN.mscorlib.DNRuntimeTypeHandle): DDN.mscorlib.DNObject;
    {class} function ToObject(value: DDN.mscorlib.DNObject; engine: DNVsaEngine): DDN.mscorlib.DNObject;
    {class} function ToObject2(value: DDN.mscorlib.DNObject; engine: DNVsaEngine): DDN.mscorlib.DNObject;
    {class} function ToString(value: DDN.mscorlib.DNObject; explicitOK: Boolean): string; overload;
    {class} function CoerceT(value: DDN.mscorlib.DNObject; t: DDN.mscorlib.DNType; explicitOK: Boolean): DDN.mscorlib.DNObject;
    {class} function ToString(b: Boolean): string; overload;
    {class} function ToString(d: Double): string; overload;

  end;

  [DNTypeName('Microsoft.JScript.Convert')]
  DNConvert = interface(DDN.mscorlib.DNObject)
  ['{6566539A-9B7D-360A-A909-E88F8C935197}']
  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string; overload;

  end;

  TDNConvert = class(TDNGenericImport<DNConvertClass, DNConvert>) end;

  //-------------namespace: Microsoft.JScript----------------
  DNDebugConvertClass = interface(DNObjectClass)
  ['{2B4C20BA-A9B4-5A1C-B758-ACF50127EFBD}']
  { constructors } 

    {class} function init: DNDebugConvert;

  end;

  [DNTypeName('Microsoft.JScript.DebugConvert')]
  DNDebugConvert = interface(DNIDebugConvert)
  ['{432D76CE-8C9E-4EED-ADDD-91737F27A8CB}']
  { methods } 

    function ToPrimitive(value: DDN.mscorlib.DNObject; typeCode: DDN.mscorlib.DNTypeCode; truncationPermitted: Boolean): DDN.mscorlib.DNObject;
    function ByteToString(value: Byte; radix: Int32): string;
    function SByteToString(value: SByte; radix: Int32): string;
    function Int16ToString(value: Int16; radix: Int32): string;
    function UInt16ToString(value: UInt16; radix: Int32): string;
    function Int32ToString(value: Int32; radix: Int32): string;
    function UInt32ToString(value: UInt32; radix: Int32): string;
    function Int64ToString(value: Int64; radix: Int32): string;
    function UInt64ToString(value: UInt64; radix: Int32): string;
    function SingleToString(value: Single): string;
    function DoubleToString(value: Double): string;
    function DoubleToDateString(value: Double): string;
    function RegexpToString(source: string; ignoreCase: Boolean; global: Boolean; multiline: Boolean): string;
    function DecimalToString(value: DDN.mscorlib.DNDecimal): string;
    function GetManagedObject(value: DDN.mscorlib.DNObject): DDN.mscorlib.DNObject;
    function GetManagedInt64Object(i: Int64): DDN.mscorlib.DNObject;
    function GetManagedUInt64Object(i: UInt64): DDN.mscorlib.DNObject;
    function GetManagedCharObject(i: UInt16): DDN.mscorlib.DNObject;
    function BooleanToString(value: Boolean): string;
    function StringToPrintable(source: string): string;
    function GetErrorMessageForHR(hr: Int32; engine: DNIJSVsaEngine): string;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNDebugConvert = class(TDNGenericImport<DNDebugConvertClass, DNDebugConvert>) end;

  //-------------namespace: Microsoft.JScript----------------
  DNDocumentContextClass = interface(DDN.mscorlib.DNObjectClass)
  ['{4B05B6D5-CEBC-5A10-8DC7-E293EA4474B0}']
  end;

  [DNTypeName('Microsoft.JScript.DocumentContext')]
  DNDocumentContext = interface(DDN.mscorlib.DNObject)
  ['{3A627B6C-389F-3E71-8530-E61A58624241}']
  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNDocumentContext = class(TDNGenericImport<DNDocumentContextClass, DNDocumentContext>) end;

  //-------------namespace: Microsoft.JScript----------------
  DNDynamicFieldInfoClass = interface(DDN.mscorlib.DNObjectClass)
  ['{06B9A23F-9C61-5A50-B7D9-8DEC0F66B2F1}']
  { constructors } 

    {class} function init(name: string; value: DDN.mscorlib.DNObject): DNDynamicFieldInfo; overload;
    {class} function init(name: string; value: DDN.mscorlib.DNObject; fieldTypeName: string): DNDynamicFieldInfo; overload;

  end;

  [DNTypeName('Microsoft.JScript.DynamicFieldInfo')]
  DNDynamicFieldInfo = interface(DDN.mscorlib.DNObject)
  ['{3817377F-3A3F-3D14-A718-2B5C04C83053}']
  { fields getter & setter } 

   function __fakeFieldGet_name: string;
   procedure __fakeFieldSet_name(value: string);
   function __fakeFieldGet_value: DDN.mscorlib.DNObject;
   procedure __fakeFieldSet_value(value: DDN.mscorlib.DNObject);
   function __fakeFieldGet_fieldTypeName: string;
   procedure __fakeFieldSet_fieldTypeName(value: string);

  { fields } 

   property name: string read __fakeFieldGet_name write __fakeFieldSet_name;
   property value: DDN.mscorlib.DNObject read __fakeFieldGet_value write __fakeFieldSet_value;
   property fieldTypeName: string read __fakeFieldGet_fieldTypeName write __fakeFieldSet_fieldTypeName;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNDynamicFieldInfo = class(TDNGenericImport<DNDynamicFieldInfoClass, DNDynamicFieldInfo>) end;

  //-------------namespace: Microsoft.JScript----------------
  DNEmptyClass = interface(DDN.mscorlib.DNObjectClass)
  ['{DBE6CE07-6911-59EE-B210-5B9F43B23D75}']
  { static fields getter & setter } 

   function __fakeFieldGet_Value: DNEmpty;

  { static fields } 

    {class} property Value: DNEmpty read __fakeFieldGet_Value;

  end;

  [DNTypeName('Microsoft.JScript.Empty')]
  DNEmpty = interface(DDN.mscorlib.DNObject)
  ['{5074E5D6-7664-353F-AD24-4DE4876CCDF8}']
  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNEmpty = class(TDNGenericImport<DNEmptyClass, DNEmpty>) end;

  //-------------namespace: Microsoft.JScript----------------
  DNFieldAccessorClass = interface(DDN.mscorlib.DNObjectClass)
  ['{B6C106BE-8AE6-5A37-8EBA-461CEDF007E8}']
  end;

  [DNTypeName('Microsoft.JScript.FieldAccessor')]
  DNFieldAccessor = interface(DDN.mscorlib.DNObject)
  ['{444F0AA4-FBA4-3067-8CF0-0A8DEA7D5DAF}']
  { methods } 

    function GetValue(thisob: DDN.mscorlib.DNObject): DDN.mscorlib.DNObject;
    procedure SetValue(thisob: DDN.mscorlib.DNObject; value: DDN.mscorlib.DNObject);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNFieldAccessor = class(TDNGenericImport<DNFieldAccessorClass, DNFieldAccessor>) end;

  //-------------namespace: Microsoft.JScript----------------
  DNGlobalObjectClass = interface(DDN.mscorlib.DNObjectClass)
  ['{7656D4C9-9CC3-56FE-A5F5-7F60A16B292D}']
  { static getter & setter } 

    {class} function get_ActiveXObject: DNActiveXObjectConstructor;
    {class} function get_Array: DNArrayConstructor;
    {class} function get_boolean: DDN.mscorlib.DNType;
    {class} function get_byte: DDN.mscorlib.DNType;
    {class} function get_char: DDN.mscorlib.DNType;
    {class} function get_Date: DNDateConstructor;
    {class} function get_decimal: DDN.mscorlib.DNType;
    {class} function get_double: DDN.mscorlib.DNType;
    {class} function get_Enumerator: DNEnumeratorConstructor;
    {class} function get_Error: DNErrorConstructor;
    {class} function get_EvalError: DNErrorConstructor;
    {class} function get_float: DDN.mscorlib.DNType;
    {class} function get_Function: DNFunctionConstructor;
    {class} function get_int: DDN.mscorlib.DNType;
    {class} function get_long: DDN.mscorlib.DNType;
    {class} function get_Math: DNMathObject;
    {class} function get_Number: DNNumberConstructor;
    {class} function get_Object: DNObjectConstructor;
    {class} function get_RangeError: DNErrorConstructor;
    {class} function get_ReferenceError: DNErrorConstructor;
    {class} function get_RegExp: DNRegExpConstructor;
    {class} function get_sbyte: DDN.mscorlib.DNType;
    {class} function get_short: DDN.mscorlib.DNType;
    {class} function get_String: DNStringConstructor;
    {class} function get_SyntaxError: DNErrorConstructor;
    {class} function get_TypeError: DNErrorConstructor;
    {class} function get_URIError: DNErrorConstructor;
    {class} function get_VBArray: DNVBArrayConstructor;
    {class} function get_void: DDN.mscorlib.DNType;
    {class} function get_uint: DDN.mscorlib.DNType;
    {class} function get_ulong: DDN.mscorlib.DNType;
    {class} function get_ushort: DDN.mscorlib.DNType;

  { static fields getter & setter } 

   function __fakeFieldGet_undefined: DNEmpty;

  { static fields } 

    {class} property undefined: DNEmpty read __fakeFieldGet_undefined;

  { static methods } 

    {class} function decodeURI(encodedURI: DDN.mscorlib.DNObject): string;
    {class} function decodeURIComponent(encodedURI: DDN.mscorlib.DNObject): string;
    {class} function encodeURI(uri: DDN.mscorlib.DNObject): string;
    {class} function encodeURIComponent(uriComponent: DDN.mscorlib.DNObject): string;
    {class} function eval(x: DDN.mscorlib.DNObject): DDN.mscorlib.DNObject;
    {class} function GetObject(moniker: DDN.mscorlib.DNObject; progId: DDN.mscorlib.DNObject): DDN.mscorlib.DNObject;
    {class} function isNaN(num: DDN.mscorlib.DNObject): Boolean;
    {class} function isFinite(number: Double): Boolean;
    {class} function parseFloat(&string: DDN.mscorlib.DNObject): Double;
    {class} function parseInt(&string: DDN.mscorlib.DNObject; radix: DDN.mscorlib.DNObject): Double;
    {class} function ScriptEngineBuildVersion: Int32;
    {class} function ScriptEngineMajorVersion: Int32;
    {class} function ScriptEngineMinorVersion: Int32;
    {class} function unescape(&string: DDN.mscorlib.DNObject): string;
    {class} procedure CollectGarbage;
    {class} function escape(&string: DDN.mscorlib.DNObject): string;
    {class} function ScriptEngine: string;

  { static propertys } 

    {class} property ActiveXObject: DNActiveXObjectConstructor read get_ActiveXObject;
    {class} property &Array: DNArrayConstructor read get_Array;
    {class} property boolean: DDN.mscorlib.DNType read get_boolean;
    {class} property byte: DDN.mscorlib.DNType read get_byte;
    {class} property char: DDN.mscorlib.DNType read get_char;
    {class} property Date: DNDateConstructor read get_Date;
    {class} property decimal: DDN.mscorlib.DNType read get_decimal;
    {class} property double: DDN.mscorlib.DNType read get_double;
    {class} property Enumerator: DNEnumeratorConstructor read get_Enumerator;
    {class} property Error: DNErrorConstructor read get_Error;
    {class} property EvalError: DNErrorConstructor read get_EvalError;
    {class} property float: DDN.mscorlib.DNType read get_float;
    {class} property &Function: DNFunctionConstructor read get_Function;
    {class} property int: DDN.mscorlib.DNType read get_int;
    {class} property long: DDN.mscorlib.DNType read get_long;
    {class} property Math: DNMathObject read get_Math;
    {class} property Number: DNNumberConstructor read get_Number;
    {class} property &Object: DNObjectConstructor read get_Object;
    {class} property RangeError: DNErrorConstructor read get_RangeError;
    {class} property ReferenceError: DNErrorConstructor read get_ReferenceError;
    {class} property RegExp: DNRegExpConstructor read get_RegExp;
    {class} property sbyte: DDN.mscorlib.DNType read get_sbyte;
    {class} property short: DDN.mscorlib.DNType read get_short;
    {class} property &String: DNStringConstructor read get_String;
    {class} property SyntaxError: DNErrorConstructor read get_SyntaxError;
    {class} property TypeError: DNErrorConstructor read get_TypeError;
    {class} property URIError: DNErrorConstructor read get_URIError;
    {class} property VBArray: DNVBArrayConstructor read get_VBArray;
    {class} property void: DDN.mscorlib.DNType read get_void;
    {class} property uint: DDN.mscorlib.DNType read get_uint;
    {class} property ulong: DDN.mscorlib.DNType read get_ulong;
    {class} property ushort: DDN.mscorlib.DNType read get_ushort;
  end;

  [DNTypeName('Microsoft.JScript.GlobalObject')]
  DNGlobalObject = interface(DDN.mscorlib.DNObject)
  ['{80EC4A20-8CF6-3223-9102-EC1D274704D7}']
  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNGlobalObject = class(TDNGenericImport<DNGlobalObjectClass, DNGlobalObject>) end;

  //-------------namespace: Microsoft.JScript----------------
  DNLenientGlobalObjectClass = interface(DNGlobalObjectClass)
  ['{1789A73A-3D4A-50BF-9428-4200EEA71979}']
  end;

  [DNTypeName('Microsoft.JScript.LenientGlobalObject')]
  DNLenientGlobalObject = interface(DNGlobalObject)
  ['{C41135BE-B488-3AC9-9F12-5473C316493B}']
  { getters & setters } 

    function get_ActiveXObject: DDN.mscorlib.DNObject;
    procedure set_ActiveXObject(value: DDN.mscorlib.DNObject);
    function get_Array: DDN.mscorlib.DNObject;
    procedure set_Array(value: DDN.mscorlib.DNObject);
    function get_Boolean: DDN.mscorlib.DNObject;
    procedure set_Boolean(value: DDN.mscorlib.DNObject);
    function get_Date: DDN.mscorlib.DNObject;
    procedure set_Date(value: DDN.mscorlib.DNObject);
    function get_Enumerator: DDN.mscorlib.DNObject;
    procedure set_Enumerator(value: DDN.mscorlib.DNObject);
    function get_Error: DDN.mscorlib.DNObject;
    procedure set_Error(value: DDN.mscorlib.DNObject);
    function get_EvalError: DDN.mscorlib.DNObject;
    procedure set_EvalError(value: DDN.mscorlib.DNObject);
    function get_Function: DDN.mscorlib.DNObject;
    procedure set_Function(value: DDN.mscorlib.DNObject);
    function get_Math: DDN.mscorlib.DNObject;
    procedure set_Math(value: DDN.mscorlib.DNObject);
    function get_Number: DDN.mscorlib.DNObject;
    procedure set_Number(value: DDN.mscorlib.DNObject);
    function get_Object: DDN.mscorlib.DNObject;
    procedure set_Object(value: DDN.mscorlib.DNObject);
    function get_RangeError: DDN.mscorlib.DNObject;
    procedure set_RangeError(value: DDN.mscorlib.DNObject);
    function get_ReferenceError: DDN.mscorlib.DNObject;
    procedure set_ReferenceError(value: DDN.mscorlib.DNObject);
    function get_RegExp: DDN.mscorlib.DNObject;
    procedure set_RegExp(value: DDN.mscorlib.DNObject);
    function get_String: DDN.mscorlib.DNObject;
    procedure set_String(value: DDN.mscorlib.DNObject);
    function get_SyntaxError: DDN.mscorlib.DNObject;
    procedure set_SyntaxError(value: DDN.mscorlib.DNObject);
    function get_TypeError: DDN.mscorlib.DNObject;
    procedure set_TypeError(value: DDN.mscorlib.DNObject);
    function get_URIError: DDN.mscorlib.DNObject;
    procedure set_URIError(value: DDN.mscorlib.DNObject);
    function get_VBArray: DDN.mscorlib.DNObject;
    procedure set_VBArray(value: DDN.mscorlib.DNObject);

  { fields getter & setter } 

   function __fakeFieldGet_Infinity: DDN.mscorlib.DNObject;
   procedure __fakeFieldSet_Infinity(value: DDN.mscorlib.DNObject);
   function __fakeFieldGet_NaN: DDN.mscorlib.DNObject;
   procedure __fakeFieldSet_NaN(value: DDN.mscorlib.DNObject);
   function __fakeFieldGet_undefined: DDN.mscorlib.DNObject;
   procedure __fakeFieldSet_undefined(value: DDN.mscorlib.DNObject);
   function __fakeFieldGet_decodeURI: DDN.mscorlib.DNObject;
   procedure __fakeFieldSet_decodeURI(value: DDN.mscorlib.DNObject);
   function __fakeFieldGet_decodeURIComponent: DDN.mscorlib.DNObject;
   procedure __fakeFieldSet_decodeURIComponent(value: DDN.mscorlib.DNObject);
   function __fakeFieldGet_encodeURI: DDN.mscorlib.DNObject;
   procedure __fakeFieldSet_encodeURI(value: DDN.mscorlib.DNObject);
   function __fakeFieldGet_encodeURIComponent: DDN.mscorlib.DNObject;
   procedure __fakeFieldSet_encodeURIComponent(value: DDN.mscorlib.DNObject);
   function __fakeFieldGet_escape: DDN.mscorlib.DNObject;
   procedure __fakeFieldSet_escape(value: DDN.mscorlib.DNObject);
   function __fakeFieldGet_eval: DDN.mscorlib.DNObject;
   procedure __fakeFieldSet_eval(value: DDN.mscorlib.DNObject);
   function __fakeFieldGet_isNaN: DDN.mscorlib.DNObject;
   procedure __fakeFieldSet_isNaN(value: DDN.mscorlib.DNObject);
   function __fakeFieldGet_isFinite: DDN.mscorlib.DNObject;
   procedure __fakeFieldSet_isFinite(value: DDN.mscorlib.DNObject);
   function __fakeFieldGet_parseInt: DDN.mscorlib.DNObject;
   procedure __fakeFieldSet_parseInt(value: DDN.mscorlib.DNObject);
   function __fakeFieldGet_parseFloat: DDN.mscorlib.DNObject;
   procedure __fakeFieldSet_parseFloat(value: DDN.mscorlib.DNObject);
   function __fakeFieldGet_GetObject: DDN.mscorlib.DNObject;
   procedure __fakeFieldSet_GetObject(value: DDN.mscorlib.DNObject);
   function __fakeFieldGet_ScriptEngine: DDN.mscorlib.DNObject;
   procedure __fakeFieldSet_ScriptEngine(value: DDN.mscorlib.DNObject);
   function __fakeFieldGet_ScriptEngineBuildVersion: DDN.mscorlib.DNObject;
   procedure __fakeFieldSet_ScriptEngineBuildVersion(value: DDN.mscorlib.DNObject);
   function __fakeFieldGet_ScriptEngineMajorVersion: DDN.mscorlib.DNObject;
   procedure __fakeFieldSet_ScriptEngineMajorVersion(value: DDN.mscorlib.DNObject);
   function __fakeFieldGet_ScriptEngineMinorVersion: DDN.mscorlib.DNObject;
   procedure __fakeFieldSet_ScriptEngineMinorVersion(value: DDN.mscorlib.DNObject);
   function __fakeFieldGet_unescape: DDN.mscorlib.DNObject;
   procedure __fakeFieldSet_unescape(value: DDN.mscorlib.DNObject);
   function __fakeFieldGet_boolean: DDN.mscorlib.DNObject;
   procedure __fakeFieldSet_boolean(value: DDN.mscorlib.DNObject);
   function __fakeFieldGet_byte: DDN.mscorlib.DNObject;
   procedure __fakeFieldSet_byte(value: DDN.mscorlib.DNObject);
   function __fakeFieldGet_char: DDN.mscorlib.DNObject;
   procedure __fakeFieldSet_char(value: DDN.mscorlib.DNObject);
   function __fakeFieldGet_decimal: DDN.mscorlib.DNObject;
   procedure __fakeFieldSet_decimal(value: DDN.mscorlib.DNObject);
   function __fakeFieldGet_double: DDN.mscorlib.DNObject;
   procedure __fakeFieldSet_double(value: DDN.mscorlib.DNObject);
   function __fakeFieldGet_float: DDN.mscorlib.DNObject;
   procedure __fakeFieldSet_float(value: DDN.mscorlib.DNObject);
   function __fakeFieldGet_int: DDN.mscorlib.DNObject;
   procedure __fakeFieldSet_int(value: DDN.mscorlib.DNObject);
   function __fakeFieldGet_long: DDN.mscorlib.DNObject;
   procedure __fakeFieldSet_long(value: DDN.mscorlib.DNObject);
   function __fakeFieldGet_sbyte: DDN.mscorlib.DNObject;
   procedure __fakeFieldSet_sbyte(value: DDN.mscorlib.DNObject);
   function __fakeFieldGet_short: DDN.mscorlib.DNObject;
   procedure __fakeFieldSet_short(value: DDN.mscorlib.DNObject);
   function __fakeFieldGet_void: DDN.mscorlib.DNObject;
   procedure __fakeFieldSet_void(value: DDN.mscorlib.DNObject);
   function __fakeFieldGet_uint: DDN.mscorlib.DNObject;
   procedure __fakeFieldSet_uint(value: DDN.mscorlib.DNObject);
   function __fakeFieldGet_ulong: DDN.mscorlib.DNObject;
   procedure __fakeFieldSet_ulong(value: DDN.mscorlib.DNObject);
   function __fakeFieldGet_ushort: DDN.mscorlib.DNObject;
   procedure __fakeFieldSet_ushort(value: DDN.mscorlib.DNObject);

  { fields } 

   property Infinity: DDN.mscorlib.DNObject read __fakeFieldGet_Infinity write __fakeFieldSet_Infinity;
   property NaN: DDN.mscorlib.DNObject read __fakeFieldGet_NaN write __fakeFieldSet_NaN;
   property undefined: DDN.mscorlib.DNObject read __fakeFieldGet_undefined write __fakeFieldSet_undefined;
   property decodeURI: DDN.mscorlib.DNObject read __fakeFieldGet_decodeURI write __fakeFieldSet_decodeURI;
   property decodeURIComponent: DDN.mscorlib.DNObject read __fakeFieldGet_decodeURIComponent write __fakeFieldSet_decodeURIComponent;
   property encodeURI: DDN.mscorlib.DNObject read __fakeFieldGet_encodeURI write __fakeFieldSet_encodeURI;
   property encodeURIComponent: DDN.mscorlib.DNObject read __fakeFieldGet_encodeURIComponent write __fakeFieldSet_encodeURIComponent;
   property escape: DDN.mscorlib.DNObject read __fakeFieldGet_escape write __fakeFieldSet_escape;
   property eval: DDN.mscorlib.DNObject read __fakeFieldGet_eval write __fakeFieldSet_eval;
   property isNaN: DDN.mscorlib.DNObject read __fakeFieldGet_isNaN write __fakeFieldSet_isNaN;
   property isFinite: DDN.mscorlib.DNObject read __fakeFieldGet_isFinite write __fakeFieldSet_isFinite;
   property parseInt: DDN.mscorlib.DNObject read __fakeFieldGet_parseInt write __fakeFieldSet_parseInt;
   property parseFloat: DDN.mscorlib.DNObject read __fakeFieldGet_parseFloat write __fakeFieldSet_parseFloat;
   property GetObject: DDN.mscorlib.DNObject read __fakeFieldGet_GetObject write __fakeFieldSet_GetObject;
   property ScriptEngine: DDN.mscorlib.DNObject read __fakeFieldGet_ScriptEngine write __fakeFieldSet_ScriptEngine;
   property ScriptEngineBuildVersion: DDN.mscorlib.DNObject read __fakeFieldGet_ScriptEngineBuildVersion write __fakeFieldSet_ScriptEngineBuildVersion;
   property ScriptEngineMajorVersion: DDN.mscorlib.DNObject read __fakeFieldGet_ScriptEngineMajorVersion write __fakeFieldSet_ScriptEngineMajorVersion;
   property ScriptEngineMinorVersion: DDN.mscorlib.DNObject read __fakeFieldGet_ScriptEngineMinorVersion write __fakeFieldSet_ScriptEngineMinorVersion;
   property unescape: DDN.mscorlib.DNObject read __fakeFieldGet_unescape write __fakeFieldSet_unescape;
   property boolean: DDN.mscorlib.DNObject read __fakeFieldGet_boolean write __fakeFieldSet_boolean;
   property byte: DDN.mscorlib.DNObject read __fakeFieldGet_byte write __fakeFieldSet_byte;
   property char: DDN.mscorlib.DNObject read __fakeFieldGet_char write __fakeFieldSet_char;
   property decimal: DDN.mscorlib.DNObject read __fakeFieldGet_decimal write __fakeFieldSet_decimal;
   property double: DDN.mscorlib.DNObject read __fakeFieldGet_double write __fakeFieldSet_double;
   property float: DDN.mscorlib.DNObject read __fakeFieldGet_float write __fakeFieldSet_float;
   property int: DDN.mscorlib.DNObject read __fakeFieldGet_int write __fakeFieldSet_int;
   property long: DDN.mscorlib.DNObject read __fakeFieldGet_long write __fakeFieldSet_long;
   property sbyte: DDN.mscorlib.DNObject read __fakeFieldGet_sbyte write __fakeFieldSet_sbyte;
   property short: DDN.mscorlib.DNObject read __fakeFieldGet_short write __fakeFieldSet_short;
   property void: DDN.mscorlib.DNObject read __fakeFieldGet_void write __fakeFieldSet_void;
   property uint: DDN.mscorlib.DNObject read __fakeFieldGet_uint write __fakeFieldSet_uint;
   property ulong: DDN.mscorlib.DNObject read __fakeFieldGet_ulong write __fakeFieldSet_ulong;
   property ushort: DDN.mscorlib.DNObject read __fakeFieldGet_ushort write __fakeFieldSet_ushort;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property ActiveXObject: DDN.mscorlib.DNObject read get_ActiveXObject write set_ActiveXObject;
    property &Array: DDN.mscorlib.DNObject read get_Array write set_Array;
    property Boolean: DDN.mscorlib.DNObject read get_Boolean write set_Boolean;
    property Date: DDN.mscorlib.DNObject read get_Date write set_Date;
    property Enumerator: DDN.mscorlib.DNObject read get_Enumerator write set_Enumerator;
    property Error: DDN.mscorlib.DNObject read get_Error write set_Error;
    property EvalError: DDN.mscorlib.DNObject read get_EvalError write set_EvalError;
    property &Function: DDN.mscorlib.DNObject read get_Function write set_Function;
    property Math: DDN.mscorlib.DNObject read get_Math write set_Math;
    property Number: DDN.mscorlib.DNObject read get_Number write set_Number;
    property &Object: DDN.mscorlib.DNObject read get_Object write set_Object;
    property RangeError: DDN.mscorlib.DNObject read get_RangeError write set_RangeError;
    property ReferenceError: DDN.mscorlib.DNObject read get_ReferenceError write set_ReferenceError;
    property RegExp: DDN.mscorlib.DNObject read get_RegExp write set_RegExp;
    property &String: DDN.mscorlib.DNObject read get_String write set_String;
    property SyntaxError: DDN.mscorlib.DNObject read get_SyntaxError write set_SyntaxError;
    property TypeError: DDN.mscorlib.DNObject read get_TypeError write set_TypeError;
    property URIError: DDN.mscorlib.DNObject read get_URIError write set_URIError;
    property VBArray: DDN.mscorlib.DNObject read get_VBArray write set_VBArray;
  end;

  TDNLenientGlobalObject = class(TDNGenericImport<DNLenientGlobalObjectClass, DNLenientGlobalObject>) end;

  //-------------namespace: Microsoft.JScript----------------
  DNGlobalsClass = interface(DDN.mscorlib.DNObjectClass)
  ['{EFF2D3F7-1FE8-515B-B2F2-47B3D297E771}']
  { static fields getter & setter } 

   function __fakeFieldGet_contextEngine: DNVsaEngine;

  { static fields } 

    {class} property contextEngine: DNVsaEngine read __fakeFieldGet_contextEngine;

  { static methods } 

    {class} function ConstructArray(args: TArray<DDN.mscorlib.DNObject>): DNArrayObject;
    {class} function ConstructArrayLiteral(args: TArray<DDN.mscorlib.DNObject>): DNArrayObject;

  end;

  [DNTypeName('Microsoft.JScript.Globals')]
  DNGlobals = interface(DDN.mscorlib.DNObject)
  ['{B9240DD5-30AE-3164-81A6-301AD011455B}']
  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNGlobals = class(TDNGenericImport<DNGlobalsClass, DNGlobals>) end;

  //-------------namespace: Microsoft.JScript----------------
  DNJSAuthorClass = interface(DNObjectClass)
  ['{17CEE1BC-CCE8-5394-9CAF-CFFCBEC33362}']
  { constructors } 

    {class} function init: DNJSAuthor;

  end;

  [DNTypeName('Microsoft.JScript.JSAuthor')]
  DNJSAuthor = interface(DNIAuthorServices)
  ['{0E4EFFC0-2387-11D3-B372-00105A98B7CE}']
  { methods } 

    function GetColorizer: DNIColorizeText;
    function GetCodeSense: DNIParseText;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNJSAuthor = class(TDNGenericImport<DNJSAuthorClass, DNJSAuthor>) end;

  //-------------namespace: Microsoft.JScript----------------
  DNJSParserClass = interface(DDN.mscorlib.DNObjectClass)
  ['{15EFCCD7-77CD-512F-9EFA-1E83FA8C9BCD}']
  { constructors } 

    {class} function init(context: DNContext): DNJSParser;

  end;

  [DNTypeName('Microsoft.JScript.JSParser')]
  DNJSParser = interface(DDN.mscorlib.DNObject)
  ['{C5D32278-DEE1-364C-B39E-5ABB805FABF6}']
  { methods } 

    function Parse: DNScriptBlock;
    function ParseEvalBody: DNBlock;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNJSParser = class(TDNGenericImport<DNJSParserClass, DNJSParser>) end;

  //-------------namespace: Microsoft.JScript----------------
  DNJSScannerClass = interface(DDN.mscorlib.DNObjectClass)
  ['{C66D6DA7-FBCD-56E8-8777-2B51B886EB38}']
  { constructors } 

    {class} function init: DNJSScanner; overload;
    {class} function init(sourceContext: DNContext): DNJSScanner; overload;

  { static methods } 

    {class} function IsOperator(token: DNJSToken): Boolean;
    {class} function IsKeyword(token: DNJSToken): Boolean;

  end;

  [DNTypeName('Microsoft.JScript.JSScanner')]
  DNJSScanner = interface(DDN.mscorlib.DNObject)
  ['{DDADDE2D-17F4-3461-9C32-08D1E9547730}']
  { methods } 

    procedure SetAuthoringMode(mode: Boolean);
    procedure SetSource(sourceContext: DNContext);
    procedure GetNextToken;
    function GetCurrentPosition(&absolute: Boolean): Int32;
    function GetCurrentLine: Int32;
    function GetStartLinePosition: Int32;
    function GetStringLiteral: string;
    function GetSourceCode: string;
    function GotEndOfLine: Boolean;
    function SkipMultiLineComment: Int32;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNJSScanner = class(TDNGenericImport<DNJSScannerClass, DNJSScanner>) end;

  //-------------namespace: Microsoft.JScript----------------
  DNLateBindingClass = interface(DDN.mscorlib.DNObjectClass)
  ['{E5D003AB-AD82-5641-9100-87318E68262F}']
  { constructors } 

    {class} function init(name: string): DNLateBinding; overload;
    {class} function init(name: string; obj: DDN.mscorlib.DNObject): DNLateBinding; overload;

  { static methods } 

    {class} function CallValue(thisob: DDN.mscorlib.DNObject; val: DDN.mscorlib.DNObject; arguments: TArray<DDN.mscorlib.DNObject>; construct: Boolean; brackets: Boolean; engine: DNVsaEngine): DDN.mscorlib.DNObject;
    {class} function CallValue2(val: DDN.mscorlib.DNObject; thisob: DDN.mscorlib.DNObject; arguments: TArray<DDN.mscorlib.DNObject>; construct: Boolean; brackets: Boolean; engine: DNVsaEngine): DDN.mscorlib.DNObject;
    {class} function DeleteMember(obj: DDN.mscorlib.DNObject; name: string): Boolean;
    {class} procedure SetIndexedPropertyValueStatic(obj: DDN.mscorlib.DNObject; arguments: TArray<DDN.mscorlib.DNObject>; value: DDN.mscorlib.DNObject);

  end;

  [DNTypeName('Microsoft.JScript.LateBinding')]
  DNLateBinding = interface(DDN.mscorlib.DNObject)
  ['{5A6E4A7C-690E-3F3D-9ED2-F83A69B188A6}']
  { fields getter & setter } 

   function __fakeFieldGet_obj: DDN.mscorlib.DNObject;
   procedure __fakeFieldSet_obj(value: DDN.mscorlib.DNObject);

  { fields } 

   property obj: DDN.mscorlib.DNObject read __fakeFieldGet_obj write __fakeFieldSet_obj;

  { methods } 

    function Call(arguments: TArray<DDN.mscorlib.DNObject>; construct: Boolean; brackets: Boolean; engine: DNVsaEngine): DDN.mscorlib.DNObject;
    function Delete: Boolean;
    function GetNonMissingValue: DDN.mscorlib.DNObject;
    function GetValue2: DDN.mscorlib.DNObject;
    procedure SetValue(value: DDN.mscorlib.DNObject);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNLateBinding = class(TDNGenericImport<DNLateBindingClass, DNLateBinding>) end;

  //-------------namespace: Microsoft.JScript----------------
  DNMemberInfoListClass = interface(DDN.mscorlib.DNObjectClass)
  ['{42D09470-04A0-50F0-8526-AC06959ACE67}']
  end;

  [DNTypeName('Microsoft.JScript.MemberInfoList')]
  DNMemberInfoList = interface(DDN.mscorlib.DNObject)
  ['{78656D44-1D21-301D-A439-F25B7AF19C0F}']
  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNMemberInfoList = class(TDNGenericImport<DNMemberInfoListClass, DNMemberInfoList>) end;

  //-------------namespace: Microsoft.JScript----------------
  DNMethodInvokerClass = interface(DDN.mscorlib.DNObjectClass)
  ['{CF94196D-5A5B-5B3A-9C7E-0156E44F2678}']
  end;

  [DNTypeName('Microsoft.JScript.MethodInvoker')]
  DNMethodInvoker = interface(DDN.mscorlib.DNObject)
  ['{B3D22B9C-563C-35A8-8913-D8FD1C4B2E60}']
  { methods } 

    function Invoke(thisob: DDN.mscorlib.DNObject; parameters: TArray<DDN.mscorlib.DNObject>): DDN.mscorlib.DNObject;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNMethodInvoker = class(TDNGenericImport<DNMethodInvokerClass, DNMethodInvoker>) end;

  //-------------namespace: Microsoft.JScript----------------
  DNMissingClass = interface(DDN.mscorlib.DNObjectClass)
  ['{5EFAFC16-BC87-5166-AF18-6CFDC78D0012}']
  { static fields getter & setter } 

   function __fakeFieldGet_Value: DNMissing;

  { static fields } 

    {class} property Value: DNMissing read __fakeFieldGet_Value;

  end;

  [DNTypeName('Microsoft.JScript.Missing')]
  DNMissing = interface(DDN.mscorlib.DNObject)
  ['{F41F265C-1C1A-384C-8803-E89CEF5B84C6}']
  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNMissing = class(TDNGenericImport<DNMissingClass, DNMissing>) end;

  //-------------namespace: Microsoft.JScript----------------
  DNNamespaceClass = interface(DDN.mscorlib.DNObjectClass)
  ['{0448F175-8A6C-5C27-930D-3415EAA0EE4A}']
  { static methods } 

    {class} function GetNamespace(name: string; engine: DNVsaEngine): DNNamespace;

  end;

  [DNTypeName('Microsoft.JScript.Namespace')]
  DNNamespace = interface(DDN.mscorlib.DNObject)
  ['{ECDA9D28-E4FB-3D6E-99BE-386D160EB0A4}']
  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNNamespace = class(TDNGenericImport<DNNamespaceClass, DNNamespace>) end;

  //-------------namespace: Microsoft.JScript----------------
  DNRuntimeClass = interface(DDN.mscorlib.DNObjectClass)
  ['{18D2BA1F-FC5B-51E1-A5D2-4C2F5BFA4432}']
  { static methods } 

    {class} function Equals(v1: DDN.mscorlib.DNObject; v2: DDN.mscorlib.DNObject): Boolean; overload;
    {class} function DoubleToInt64(val: Double): Int64;
    {class} function UncheckedDecimalToInt64(val: DDN.mscorlib.DNDecimal): Int64;

  end;

  [DNTypeName('Microsoft.JScript.Runtime')]
  DNRuntime = interface(DDN.mscorlib.DNObject)
  ['{3B1A8C90-169E-3FF8-99BD-DCEDEB0EE64C}']
  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean; overload;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNRuntime = class(TDNGenericImport<DNRuntimeClass, DNRuntime>) end;

  //-------------namespace: Microsoft.JScript----------------
  DNScriptObjectClass = interface(DNObjectClass)
  ['{25925A83-7AF1-5DBA-A1F0-355419727286}']
  end;

  [DNTypeName('Microsoft.JScript.ScriptObject')]
  DNScriptObject = interface(DDN.mscorlib.DNIReflect)
  ['{7A17A327-0E70-3064-96B7-4696BD3781AB}']
  { getters & setters } 

    function get_Item(index: Double): DDN.mscorlib.DNObject; overload;
    procedure set_Item(index: Double; value: DDN.mscorlib.DNObject); overload;
    function get_Item(index: Int32): DDN.mscorlib.DNObject; overload;
    procedure set_Item(index: Int32; value: DDN.mscorlib.DNObject); overload;
    function get_Item(name: string): DDN.mscorlib.DNObject; overload;
    procedure set_Item(name: string; value: DDN.mscorlib.DNObject); overload;
    function get_Item(pars: TArray<DDN.mscorlib.DNObject>): DDN.mscorlib.DNObject; overload;
    procedure set_Item(pars: TArray<DDN.mscorlib.DNObject>; value: DDN.mscorlib.DNObject); overload;
    function get_UnderlyingSystemType: DDN.mscorlib.DNType;

  { fields getter & setter } 

   function __fakeFieldGet_engine: DNVsaEngine;
   procedure __fakeFieldSet_engine(value: DNVsaEngine);

  { fields } 

   property engine: DNVsaEngine read __fakeFieldGet_engine write __fakeFieldSet_engine;

  { methods } 

    function GetField(name: string; bindingAttr: DDN.mscorlib.DNBindingFlags): DDN.mscorlib.DNFieldInfo;
    function GetMethod(name: string; bindingAttr: DDN.mscorlib.DNBindingFlags): DDN.mscorlib.DNMethodInfo; overload;
    function GetParent: DNScriptObject;
    function GetProperty(name: string; bindingAttr: DDN.mscorlib.DNBindingFlags): DDN.mscorlib.DNPropertyInfo; overload;
    function GetFields(bindingAttr: DDN.mscorlib.DNBindingFlags): TArray<DDN.mscorlib.DNFieldInfo>;
    function GetMember(name: string; bindingAttr: DDN.mscorlib.DNBindingFlags): TArray<DDN.mscorlib.DNMemberInfo>;
    function GetMembers(bindingAttr: DDN.mscorlib.DNBindingFlags): TArray<DDN.mscorlib.DNMemberInfo>;
    function GetMethod(name: string; bindingAttr: DDN.mscorlib.DNBindingFlags; binder: DDN.mscorlib.DNBinder; types: TArray<DDN.mscorlib.DNType>; modifiers: TArray<DDN.mscorlib.DNParameterModifier>): DDN.mscorlib.DNMethodInfo; overload;
    function GetMethods(bindingAttr: DDN.mscorlib.DNBindingFlags): TArray<DDN.mscorlib.DNMethodInfo>;
    function GetProperty(name: string; bindingAttr: DDN.mscorlib.DNBindingFlags; binder: DDN.mscorlib.DNBinder; returnType: DDN.mscorlib.DNType; types: TArray<DDN.mscorlib.DNType>; modifiers: TArray<DDN.mscorlib.DNParameterModifier>): DDN.mscorlib.DNPropertyInfo; overload;
    function GetProperties(bindingAttr: DDN.mscorlib.DNBindingFlags): TArray<DDN.mscorlib.DNPropertyInfo>;
    function InvokeMember(name: string; invokeAttr: DDN.mscorlib.DNBindingFlags; binder: DDN.mscorlib.DNBinder; target: DDN.mscorlib.DNObject; args: TArray<DDN.mscorlib.DNObject>; modifiers: TArray<DDN.mscorlib.DNParameterModifier>; locale: DDN.mscorlib.DNCultureInfo; namedParameters: TArray<string>): DDN.mscorlib.DNObject;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Item[index: Double]: DDN.mscorlib.DNObject read get_Item write set_Item; default;
    property Item[index: Int32]: DDN.mscorlib.DNObject read get_Item write set_Item; default;
    property Item[name: string]: DDN.mscorlib.DNObject read get_Item write set_Item; default;
    property Item[pars: TArray<DDN.mscorlib.DNObject>]: DDN.mscorlib.DNObject read get_Item write set_Item; default;
    property UnderlyingSystemType: DDN.mscorlib.DNType read get_UnderlyingSystemType;
  end;

  TDNScriptObject = class(TDNGenericImport<DNScriptObjectClass, DNScriptObject>) end;

  //-------------namespace: Microsoft.JScript----------------
  DNActivationObjectClass = interface(DNScriptObjectClass)
  ['{88A99B6D-DCCD-5CA3-B7CB-ED257D044747}']
  end;

  [DNTypeName('Microsoft.JScript.ActivationObject')]
  DNActivationObject = interface(DNScriptObject)
  ['{415B56B9-3259-3082-8617-3DCE26997CAB}']
  { getters & setters } 

    function get_Item(index: Double): DDN.mscorlib.DNObject; overload;
    procedure set_Item(index: Double; value: DDN.mscorlib.DNObject); overload;
    function get_Item(index: Int32): DDN.mscorlib.DNObject; overload;
    procedure set_Item(index: Int32; value: DDN.mscorlib.DNObject); overload;
    function get_Item(name: string): DDN.mscorlib.DNObject; overload;
    procedure set_Item(name: string; value: DDN.mscorlib.DNObject); overload;
    function get_Item(pars: TArray<DDN.mscorlib.DNObject>): DDN.mscorlib.DNObject; overload;
    procedure set_Item(pars: TArray<DDN.mscorlib.DNObject>; value: DDN.mscorlib.DNObject); overload;
    function get_UnderlyingSystemType: DDN.mscorlib.DNType;

  { fields getter & setter } 

   function __fakeFieldGet_engine: DNVsaEngine;
   procedure __fakeFieldSet_engine(value: DNVsaEngine);

  { fields } 

   property engine: DNVsaEngine read __fakeFieldGet_engine write __fakeFieldSet_engine;

  { methods } 

    function GetField(name: string; lexLevel: Int32): DDN.mscorlib.DNFieldInfo; overload;
    function GetDefaultThisObject: DDN.mscorlib.DNObject;
    function GetGlobalScope: DNGlobalScope;
    function GetLocalField(name: string): DDN.mscorlib.DNFieldInfo;
    function GetMemberValue(name: string; lexlevel: Int32): DDN.mscorlib.DNObject;
    function GetMember(name: string; bindingAttr: DDN.mscorlib.DNBindingFlags): TArray<DDN.mscorlib.DNMemberInfo>;
    function GetMembers(bindingAttr: DDN.mscorlib.DNBindingFlags): TArray<DDN.mscorlib.DNMemberInfo>;
    function GetField(name: string; bindingAttr: DDN.mscorlib.DNBindingFlags): DDN.mscorlib.DNFieldInfo; overload;
    function GetMethod(name: string; bindingAttr: DDN.mscorlib.DNBindingFlags): DDN.mscorlib.DNMethodInfo; overload;
    function GetParent: DNScriptObject;
    function GetProperty(name: string; bindingAttr: DDN.mscorlib.DNBindingFlags): DDN.mscorlib.DNPropertyInfo; overload;
    function GetFields(bindingAttr: DDN.mscorlib.DNBindingFlags): TArray<DDN.mscorlib.DNFieldInfo>;
    function GetMethod(name: string; bindingAttr: DDN.mscorlib.DNBindingFlags; binder: DDN.mscorlib.DNBinder; types: TArray<DDN.mscorlib.DNType>; modifiers: TArray<DDN.mscorlib.DNParameterModifier>): DDN.mscorlib.DNMethodInfo; overload;
    function GetMethods(bindingAttr: DDN.mscorlib.DNBindingFlags): TArray<DDN.mscorlib.DNMethodInfo>;
    function GetProperty(name: string; bindingAttr: DDN.mscorlib.DNBindingFlags; binder: DDN.mscorlib.DNBinder; returnType: DDN.mscorlib.DNType; types: TArray<DDN.mscorlib.DNType>; modifiers: TArray<DDN.mscorlib.DNParameterModifier>): DDN.mscorlib.DNPropertyInfo; overload;
    function GetProperties(bindingAttr: DDN.mscorlib.DNBindingFlags): TArray<DDN.mscorlib.DNPropertyInfo>;
    function InvokeMember(name: string; invokeAttr: DDN.mscorlib.DNBindingFlags; binder: DDN.mscorlib.DNBinder; target: DDN.mscorlib.DNObject; args: TArray<DDN.mscorlib.DNObject>; modifiers: TArray<DDN.mscorlib.DNParameterModifier>; locale: DDN.mscorlib.DNCultureInfo; namedParameters: TArray<string>): DDN.mscorlib.DNObject;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Item[index: Double]: DDN.mscorlib.DNObject read get_Item write set_Item; default;
    property Item[index: Int32]: DDN.mscorlib.DNObject read get_Item write set_Item; default;
    property Item[name: string]: DDN.mscorlib.DNObject read get_Item write set_Item; default;
    property Item[pars: TArray<DDN.mscorlib.DNObject>]: DDN.mscorlib.DNObject read get_Item write set_Item; default;
    property UnderlyingSystemType: DDN.mscorlib.DNType read get_UnderlyingSystemType;
  end;

  TDNActivationObject = class(TDNGenericImport<DNActivationObjectClass, DNActivationObject>) end;

  //-------------namespace: Microsoft.JScript----------------
  DNBlockScopeClass = interface(DNActivationObjectClass)
  ['{AB98296B-BCC5-5D0F-8C65-9C44E0A05433}']
  { constructors } 

    {class} function init(parent: DNScriptObject; name: string; scopeId: Int32): DNBlockScope;

  end;

  [DNTypeName('Microsoft.JScript.BlockScope')]
  DNBlockScope = interface(DNActivationObject)
  ['{7A9E67D4-F8CE-37E8-A653-716FC3D0F2B0}']
  { getters & setters } 

    function get_Item(index: Double): DDN.mscorlib.DNObject; overload;
    procedure set_Item(index: Double; value: DDN.mscorlib.DNObject); overload;
    function get_Item(index: Int32): DDN.mscorlib.DNObject; overload;
    procedure set_Item(index: Int32; value: DDN.mscorlib.DNObject); overload;
    function get_Item(name: string): DDN.mscorlib.DNObject; overload;
    procedure set_Item(name: string; value: DDN.mscorlib.DNObject); overload;
    function get_Item(pars: TArray<DDN.mscorlib.DNObject>): DDN.mscorlib.DNObject; overload;
    procedure set_Item(pars: TArray<DDN.mscorlib.DNObject>; value: DDN.mscorlib.DNObject); overload;
    function get_UnderlyingSystemType: DDN.mscorlib.DNType;

  { fields getter & setter } 

   function __fakeFieldGet_engine: DNVsaEngine;
   procedure __fakeFieldSet_engine(value: DNVsaEngine);

  { fields } 

   property engine: DNVsaEngine read __fakeFieldGet_engine write __fakeFieldSet_engine;

  { methods } 

    function GetField(name: string; lexLevel: Int32): DDN.mscorlib.DNFieldInfo; overload;
    function GetDefaultThisObject: DDN.mscorlib.DNObject;
    function GetGlobalScope: DNGlobalScope;
    function GetLocalField(name: string): DDN.mscorlib.DNFieldInfo;
    function GetMemberValue(name: string; lexlevel: Int32): DDN.mscorlib.DNObject;
    function GetMember(name: string; bindingAttr: DDN.mscorlib.DNBindingFlags): TArray<DDN.mscorlib.DNMemberInfo>;
    function GetMembers(bindingAttr: DDN.mscorlib.DNBindingFlags): TArray<DDN.mscorlib.DNMemberInfo>;
    function GetField(name: string; bindingAttr: DDN.mscorlib.DNBindingFlags): DDN.mscorlib.DNFieldInfo; overload;
    function GetMethod(name: string; bindingAttr: DDN.mscorlib.DNBindingFlags): DDN.mscorlib.DNMethodInfo; overload;
    function GetParent: DNScriptObject;
    function GetProperty(name: string; bindingAttr: DDN.mscorlib.DNBindingFlags): DDN.mscorlib.DNPropertyInfo; overload;
    function GetFields(bindingAttr: DDN.mscorlib.DNBindingFlags): TArray<DDN.mscorlib.DNFieldInfo>;
    function GetMethod(name: string; bindingAttr: DDN.mscorlib.DNBindingFlags; binder: DDN.mscorlib.DNBinder; types: TArray<DDN.mscorlib.DNType>; modifiers: TArray<DDN.mscorlib.DNParameterModifier>): DDN.mscorlib.DNMethodInfo; overload;
    function GetMethods(bindingAttr: DDN.mscorlib.DNBindingFlags): TArray<DDN.mscorlib.DNMethodInfo>;
    function GetProperty(name: string; bindingAttr: DDN.mscorlib.DNBindingFlags; binder: DDN.mscorlib.DNBinder; returnType: DDN.mscorlib.DNType; types: TArray<DDN.mscorlib.DNType>; modifiers: TArray<DDN.mscorlib.DNParameterModifier>): DDN.mscorlib.DNPropertyInfo; overload;
    function GetProperties(bindingAttr: DDN.mscorlib.DNBindingFlags): TArray<DDN.mscorlib.DNPropertyInfo>;
    function InvokeMember(name: string; invokeAttr: DDN.mscorlib.DNBindingFlags; binder: DDN.mscorlib.DNBinder; target: DDN.mscorlib.DNObject; args: TArray<DDN.mscorlib.DNObject>; modifiers: TArray<DDN.mscorlib.DNParameterModifier>; locale: DDN.mscorlib.DNCultureInfo; namedParameters: TArray<string>): DDN.mscorlib.DNObject;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Item[index: Double]: DDN.mscorlib.DNObject read get_Item write set_Item; default;
    property Item[index: Int32]: DDN.mscorlib.DNObject read get_Item write set_Item; default;
    property Item[name: string]: DDN.mscorlib.DNObject read get_Item write set_Item; default;
    property Item[pars: TArray<DDN.mscorlib.DNObject>]: DDN.mscorlib.DNObject read get_Item write set_Item; default;
    property UnderlyingSystemType: DDN.mscorlib.DNType read get_UnderlyingSystemType;
  end;

  TDNBlockScope = class(TDNGenericImport<DNBlockScopeClass, DNBlockScope>) end;

  //-------------namespace: Microsoft.JScript----------------
  DNGlobalScopeClass = interface(DNActivationObjectClass)
  ['{8B3B1A9D-9D0C-535B-8350-FCFF5830CE0A}']
  { constructors } 

    {class} function init(parent: DNGlobalScope; engine: DNVsaEngine): DNGlobalScope;

  end;

  [DNTypeName('Microsoft.JScript.GlobalScope')]
  DNGlobalScope = interface(DNActivationObject)
  ['{3B289C44-5A3E-3EA5-AF28-1BCCB4012B17}']
  { getters & setters } 

    function get_Item(index: Double): DDN.mscorlib.DNObject; overload;
    procedure set_Item(index: Double; value: DDN.mscorlib.DNObject); overload;
    function get_Item(index: Int32): DDN.mscorlib.DNObject; overload;
    procedure set_Item(index: Int32; value: DDN.mscorlib.DNObject); overload;
    function get_Item(name: string): DDN.mscorlib.DNObject; overload;
    procedure set_Item(name: string; value: DDN.mscorlib.DNObject); overload;
    function get_Item(pars: TArray<DDN.mscorlib.DNObject>): DDN.mscorlib.DNObject; overload;
    procedure set_Item(pars: TArray<DDN.mscorlib.DNObject>; value: DDN.mscorlib.DNObject); overload;
    function get_UnderlyingSystemType: DDN.mscorlib.DNType;

  { fields getter & setter } 

   function __fakeFieldGet_engine: DNVsaEngine;
   procedure __fakeFieldSet_engine(value: DNVsaEngine);

  { fields } 

   property engine: DNVsaEngine read __fakeFieldGet_engine write __fakeFieldSet_engine;

  { methods } 

    function AddField(name: string): DDN.mscorlib.DNFieldInfo;
    function GetDefaultThisObject: DDN.mscorlib.DNObject;
    function GetField(name: string; lexLevel: Int32): DDN.mscorlib.DNFieldInfo; overload;
    function GetFields(bindingAttr: DDN.mscorlib.DNBindingFlags): TArray<DDN.mscorlib.DNFieldInfo>;
    function GetGlobalScope: DNGlobalScope;
    function GetLocalField(name: string): DDN.mscorlib.DNFieldInfo;
    function GetMember(name: string; bindingAttr: DDN.mscorlib.DNBindingFlags): TArray<DDN.mscorlib.DNMemberInfo>;
    function GetMethods(bindingAttr: DDN.mscorlib.DNBindingFlags): TArray<DDN.mscorlib.DNMethodInfo>;
    function GetProperties(bindingAttr: DDN.mscorlib.DNBindingFlags): TArray<DDN.mscorlib.DNPropertyInfo>;
    function GetMembers(bindingAttr: DDN.mscorlib.DNBindingFlags): TArray<DDN.mscorlib.DNMemberInfo>;
    function GetMemberValue(name: string; lexlevel: Int32): DDN.mscorlib.DNObject;
    function GetField(name: string; bindingAttr: DDN.mscorlib.DNBindingFlags): DDN.mscorlib.DNFieldInfo; overload;
    function GetMethod(name: string; bindingAttr: DDN.mscorlib.DNBindingFlags): DDN.mscorlib.DNMethodInfo; overload;
    function GetParent: DNScriptObject;
    function GetProperty(name: string; bindingAttr: DDN.mscorlib.DNBindingFlags): DDN.mscorlib.DNPropertyInfo; overload;
    function GetMethod(name: string; bindingAttr: DDN.mscorlib.DNBindingFlags; binder: DDN.mscorlib.DNBinder; types: TArray<DDN.mscorlib.DNType>; modifiers: TArray<DDN.mscorlib.DNParameterModifier>): DDN.mscorlib.DNMethodInfo; overload;
    function GetProperty(name: string; bindingAttr: DDN.mscorlib.DNBindingFlags; binder: DDN.mscorlib.DNBinder; returnType: DDN.mscorlib.DNType; types: TArray<DDN.mscorlib.DNType>; modifiers: TArray<DDN.mscorlib.DNParameterModifier>): DDN.mscorlib.DNPropertyInfo; overload;
    function InvokeMember(name: string; invokeAttr: DDN.mscorlib.DNBindingFlags; binder: DDN.mscorlib.DNBinder; target: DDN.mscorlib.DNObject; args: TArray<DDN.mscorlib.DNObject>; modifiers: TArray<DDN.mscorlib.DNParameterModifier>; locale: DDN.mscorlib.DNCultureInfo; namedParameters: TArray<string>): DDN.mscorlib.DNObject;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Item[index: Double]: DDN.mscorlib.DNObject read get_Item write set_Item; default;
    property Item[index: Int32]: DDN.mscorlib.DNObject read get_Item write set_Item; default;
    property Item[name: string]: DDN.mscorlib.DNObject read get_Item write set_Item; default;
    property Item[pars: TArray<DDN.mscorlib.DNObject>]: DDN.mscorlib.DNObject read get_Item write set_Item; default;
    property UnderlyingSystemType: DDN.mscorlib.DNType read get_UnderlyingSystemType;
  end;

  TDNGlobalScope = class(TDNGenericImport<DNGlobalScopeClass, DNGlobalScope>) end;

  //-------------namespace: Microsoft.JScript----------------
  DNJSObjectClass = interface(DNScriptObjectClass)
  ['{9351535E-EAB7-5815-842A-D6238BACDB0C}']
  { constructors } 

    {class} function init: DNJSObject;

  end;

  [DNTypeName('Microsoft.JScript.JSObject')]
  DNJSObject = interface(DNScriptObject)
  ['{4702175F-B6BC-35A1-869D-8253FA2ABCFC}']
  { getters & setters } 

    function get_Item(index: Double): DDN.mscorlib.DNObject; overload;
    procedure set_Item(index: Double; value: DDN.mscorlib.DNObject); overload;
    function get_Item(index: Int32): DDN.mscorlib.DNObject; overload;
    procedure set_Item(index: Int32; value: DDN.mscorlib.DNObject); overload;
    function get_Item(name: string): DDN.mscorlib.DNObject; overload;
    procedure set_Item(name: string; value: DDN.mscorlib.DNObject); overload;
    function get_Item(pars: TArray<DDN.mscorlib.DNObject>): DDN.mscorlib.DNObject; overload;
    procedure set_Item(pars: TArray<DDN.mscorlib.DNObject>; value: DDN.mscorlib.DNObject); overload;
    function get_UnderlyingSystemType: DDN.mscorlib.DNType;

  { fields getter & setter } 

   function __fakeFieldGet_engine: DNVsaEngine;
   procedure __fakeFieldSet_engine(value: DNVsaEngine);

  { fields } 

   property engine: DNVsaEngine read __fakeFieldGet_engine write __fakeFieldSet_engine;

  { methods } 

    function AddField(name: string): DDN.mscorlib.DNFieldInfo;
    function GetMember(name: string; bindingAttr: DDN.mscorlib.DNBindingFlags): TArray<DDN.mscorlib.DNMemberInfo>;
    procedure SetMemberValue2(name: string; value: DDN.mscorlib.DNObject);
    function ToString: string;
    function GetMembers(bindingAttr: DDN.mscorlib.DNBindingFlags): TArray<DDN.mscorlib.DNMemberInfo>;
    function GetField(name: string; bindingAttr: DDN.mscorlib.DNBindingFlags): DDN.mscorlib.DNFieldInfo;
    function GetMethod(name: string; bindingAttr: DDN.mscorlib.DNBindingFlags): DDN.mscorlib.DNMethodInfo; overload;
    function GetParent: DNScriptObject;
    function GetProperty(name: string; bindingAttr: DDN.mscorlib.DNBindingFlags): DDN.mscorlib.DNPropertyInfo; overload;
    function GetFields(bindingAttr: DDN.mscorlib.DNBindingFlags): TArray<DDN.mscorlib.DNFieldInfo>;
    function GetMethod(name: string; bindingAttr: DDN.mscorlib.DNBindingFlags; binder: DDN.mscorlib.DNBinder; types: TArray<DDN.mscorlib.DNType>; modifiers: TArray<DDN.mscorlib.DNParameterModifier>): DDN.mscorlib.DNMethodInfo; overload;
    function GetMethods(bindingAttr: DDN.mscorlib.DNBindingFlags): TArray<DDN.mscorlib.DNMethodInfo>;
    function GetProperty(name: string; bindingAttr: DDN.mscorlib.DNBindingFlags; binder: DDN.mscorlib.DNBinder; returnType: DDN.mscorlib.DNType; types: TArray<DDN.mscorlib.DNType>; modifiers: TArray<DDN.mscorlib.DNParameterModifier>): DDN.mscorlib.DNPropertyInfo; overload;
    function GetProperties(bindingAttr: DDN.mscorlib.DNBindingFlags): TArray<DDN.mscorlib.DNPropertyInfo>;
    function InvokeMember(name: string; invokeAttr: DDN.mscorlib.DNBindingFlags; binder: DDN.mscorlib.DNBinder; target: DDN.mscorlib.DNObject; args: TArray<DDN.mscorlib.DNObject>; modifiers: TArray<DDN.mscorlib.DNParameterModifier>; locale: DDN.mscorlib.DNCultureInfo; namedParameters: TArray<string>): DDN.mscorlib.DNObject;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    property Item[index: Double]: DDN.mscorlib.DNObject read get_Item write set_Item; default;
    property Item[index: Int32]: DDN.mscorlib.DNObject read get_Item write set_Item; default;
    property Item[name: string]: DDN.mscorlib.DNObject read get_Item write set_Item; default;
    property Item[pars: TArray<DDN.mscorlib.DNObject>]: DDN.mscorlib.DNObject read get_Item write set_Item; default;
    property UnderlyingSystemType: DDN.mscorlib.DNType read get_UnderlyingSystemType;
  end;

  TDNJSObject = class(TDNGenericImport<DNJSObjectClass, DNJSObject>) end;

  //-------------namespace: Microsoft.JScript----------------
  DNArgumentsObjectClass = interface(DNJSObjectClass)
  ['{A9E81839-090F-5AC5-8CF2-5F22E7B5BEEB}']
  end;

  [DNTypeName('Microsoft.JScript.ArgumentsObject')]
  DNArgumentsObject = interface(DNJSObject)
  ['{70B4F589-65A9-3638-9215-7DF50458D813}']
  { getters & setters } 

    function get_Item(index: Double): DDN.mscorlib.DNObject; overload;
    procedure set_Item(index: Double; value: DDN.mscorlib.DNObject); overload;
    function get_Item(index: Int32): DDN.mscorlib.DNObject; overload;
    procedure set_Item(index: Int32; value: DDN.mscorlib.DNObject); overload;
    function get_Item(name: string): DDN.mscorlib.DNObject; overload;
    procedure set_Item(name: string; value: DDN.mscorlib.DNObject); overload;
    function get_Item(pars: TArray<DDN.mscorlib.DNObject>): DDN.mscorlib.DNObject; overload;
    procedure set_Item(pars: TArray<DDN.mscorlib.DNObject>; value: DDN.mscorlib.DNObject); overload;
    function get_UnderlyingSystemType: DDN.mscorlib.DNType;

  { fields getter & setter } 

   function __fakeFieldGet_callee: DDN.mscorlib.DNObject;
   procedure __fakeFieldSet_callee(value: DDN.mscorlib.DNObject);
   function __fakeFieldGet_caller: DDN.mscorlib.DNObject;
   procedure __fakeFieldSet_caller(value: DDN.mscorlib.DNObject);
   function __fakeFieldGet_length: DDN.mscorlib.DNObject;
   procedure __fakeFieldSet_length(value: DDN.mscorlib.DNObject);
   function __fakeFieldGet_engine: DNVsaEngine;
   procedure __fakeFieldSet_engine(value: DNVsaEngine);

  { fields } 

   property callee: DDN.mscorlib.DNObject read __fakeFieldGet_callee write __fakeFieldSet_callee;
   property caller: DDN.mscorlib.DNObject read __fakeFieldGet_caller write __fakeFieldSet_caller;
   property length: DDN.mscorlib.DNObject read __fakeFieldGet_length write __fakeFieldSet_length;
   property engine: DNVsaEngine read __fakeFieldGet_engine write __fakeFieldSet_engine;

  { methods } 

    function AddField(name: string): DDN.mscorlib.DNFieldInfo;
    function GetMember(name: string; bindingAttr: DDN.mscorlib.DNBindingFlags): TArray<DDN.mscorlib.DNMemberInfo>;
    procedure SetMemberValue2(name: string; value: DDN.mscorlib.DNObject);
    function ToString: string;
    function GetMembers(bindingAttr: DDN.mscorlib.DNBindingFlags): TArray<DDN.mscorlib.DNMemberInfo>;
    function GetField(name: string; bindingAttr: DDN.mscorlib.DNBindingFlags): DDN.mscorlib.DNFieldInfo;
    function GetMethod(name: string; bindingAttr: DDN.mscorlib.DNBindingFlags): DDN.mscorlib.DNMethodInfo; overload;
    function GetParent: DNScriptObject;
    function GetProperty(name: string; bindingAttr: DDN.mscorlib.DNBindingFlags): DDN.mscorlib.DNPropertyInfo; overload;
    function GetFields(bindingAttr: DDN.mscorlib.DNBindingFlags): TArray<DDN.mscorlib.DNFieldInfo>;
    function GetMethod(name: string; bindingAttr: DDN.mscorlib.DNBindingFlags; binder: DDN.mscorlib.DNBinder; types: TArray<DDN.mscorlib.DNType>; modifiers: TArray<DDN.mscorlib.DNParameterModifier>): DDN.mscorlib.DNMethodInfo; overload;
    function GetMethods(bindingAttr: DDN.mscorlib.DNBindingFlags): TArray<DDN.mscorlib.DNMethodInfo>;
    function GetProperty(name: string; bindingAttr: DDN.mscorlib.DNBindingFlags; binder: DDN.mscorlib.DNBinder; returnType: DDN.mscorlib.DNType; types: TArray<DDN.mscorlib.DNType>; modifiers: TArray<DDN.mscorlib.DNParameterModifier>): DDN.mscorlib.DNPropertyInfo; overload;
    function GetProperties(bindingAttr: DDN.mscorlib.DNBindingFlags): TArray<DDN.mscorlib.DNPropertyInfo>;
    function InvokeMember(name: string; invokeAttr: DDN.mscorlib.DNBindingFlags; binder: DDN.mscorlib.DNBinder; target: DDN.mscorlib.DNObject; args: TArray<DDN.mscorlib.DNObject>; modifiers: TArray<DDN.mscorlib.DNParameterModifier>; locale: DDN.mscorlib.DNCultureInfo; namedParameters: TArray<string>): DDN.mscorlib.DNObject;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    property Item[index: Double]: DDN.mscorlib.DNObject read get_Item write set_Item; default;
    property Item[index: Int32]: DDN.mscorlib.DNObject read get_Item write set_Item; default;
    property Item[name: string]: DDN.mscorlib.DNObject read get_Item write set_Item; default;
    property Item[pars: TArray<DDN.mscorlib.DNObject>]: DDN.mscorlib.DNObject read get_Item write set_Item; default;
    property UnderlyingSystemType: DDN.mscorlib.DNType read get_UnderlyingSystemType;
  end;

  TDNArgumentsObject = class(TDNGenericImport<DNArgumentsObjectClass, DNArgumentsObject>) end;

  //-------------namespace: Microsoft.JScript----------------
  DNArrayObjectClass = interface(DNJSObjectClass)
  ['{9B360704-FB64-5B06-AA63-AF21A4AD72C2}']
  end;

  [DNTypeName('Microsoft.JScript.ArrayObject')]
  DNArrayObject = interface(DNJSObject)
  ['{F68923D6-32B6-3E23-B9BC-E6C0A067E451}']
  { getters & setters } 

    function get_length: DDN.mscorlib.DNObject;
    procedure set_length(value: DDN.mscorlib.DNObject);
    function get_Item(index: Double): DDN.mscorlib.DNObject; overload;
    procedure set_Item(index: Double; value: DDN.mscorlib.DNObject); overload;
    function get_Item(index: Int32): DDN.mscorlib.DNObject; overload;
    procedure set_Item(index: Int32; value: DDN.mscorlib.DNObject); overload;
    function get_Item(name: string): DDN.mscorlib.DNObject; overload;
    procedure set_Item(name: string; value: DDN.mscorlib.DNObject); overload;
    function get_Item(pars: TArray<DDN.mscorlib.DNObject>): DDN.mscorlib.DNObject; overload;
    procedure set_Item(pars: TArray<DDN.mscorlib.DNObject>; value: DDN.mscorlib.DNObject); overload;
    function get_UnderlyingSystemType: DDN.mscorlib.DNType;

  { fields getter & setter } 

   function __fakeFieldGet_engine: DNVsaEngine;
   procedure __fakeFieldSet_engine(value: DNVsaEngine);

  { fields } 

   property engine: DNVsaEngine read __fakeFieldGet_engine write __fakeFieldSet_engine;

  { methods } 

    function AddField(name: string): DDN.mscorlib.DNFieldInfo;
    function GetMember(name: string; bindingAttr: DDN.mscorlib.DNBindingFlags): TArray<DDN.mscorlib.DNMemberInfo>;
    procedure SetMemberValue2(name: string; value: DDN.mscorlib.DNObject);
    function ToString: string;
    function GetMembers(bindingAttr: DDN.mscorlib.DNBindingFlags): TArray<DDN.mscorlib.DNMemberInfo>;
    function GetField(name: string; bindingAttr: DDN.mscorlib.DNBindingFlags): DDN.mscorlib.DNFieldInfo;
    function GetMethod(name: string; bindingAttr: DDN.mscorlib.DNBindingFlags): DDN.mscorlib.DNMethodInfo; overload;
    function GetParent: DNScriptObject;
    function GetProperty(name: string; bindingAttr: DDN.mscorlib.DNBindingFlags): DDN.mscorlib.DNPropertyInfo; overload;
    function GetFields(bindingAttr: DDN.mscorlib.DNBindingFlags): TArray<DDN.mscorlib.DNFieldInfo>;
    function GetMethod(name: string; bindingAttr: DDN.mscorlib.DNBindingFlags; binder: DDN.mscorlib.DNBinder; types: TArray<DDN.mscorlib.DNType>; modifiers: TArray<DDN.mscorlib.DNParameterModifier>): DDN.mscorlib.DNMethodInfo; overload;
    function GetMethods(bindingAttr: DDN.mscorlib.DNBindingFlags): TArray<DDN.mscorlib.DNMethodInfo>;
    function GetProperty(name: string; bindingAttr: DDN.mscorlib.DNBindingFlags; binder: DDN.mscorlib.DNBinder; returnType: DDN.mscorlib.DNType; types: TArray<DDN.mscorlib.DNType>; modifiers: TArray<DDN.mscorlib.DNParameterModifier>): DDN.mscorlib.DNPropertyInfo; overload;
    function GetProperties(bindingAttr: DDN.mscorlib.DNBindingFlags): TArray<DDN.mscorlib.DNPropertyInfo>;
    function InvokeMember(name: string; invokeAttr: DDN.mscorlib.DNBindingFlags; binder: DDN.mscorlib.DNBinder; target: DDN.mscorlib.DNObject; args: TArray<DDN.mscorlib.DNObject>; modifiers: TArray<DDN.mscorlib.DNParameterModifier>; locale: DDN.mscorlib.DNCultureInfo; namedParameters: TArray<string>): DDN.mscorlib.DNObject;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    property length: DDN.mscorlib.DNObject read get_length write set_length;
    property Item[index: Double]: DDN.mscorlib.DNObject read get_Item write set_Item; default;
    property Item[index: Int32]: DDN.mscorlib.DNObject read get_Item write set_Item; default;
    property Item[name: string]: DDN.mscorlib.DNObject read get_Item write set_Item; default;
    property Item[pars: TArray<DDN.mscorlib.DNObject>]: DDN.mscorlib.DNObject read get_Item write set_Item; default;
    property UnderlyingSystemType: DDN.mscorlib.DNType read get_UnderlyingSystemType;
  end;

  TDNArrayObject = class(TDNGenericImport<DNArrayObjectClass, DNArrayObject>) end;

  //-------------namespace: Microsoft.JScript----------------
  DNArrayPrototypeClass = interface(DNArrayObjectClass)
  ['{3528B938-62B8-575D-93A8-2600B30AE1B3}']
  { static getter & setter } 

    {class} function get_constructor: DNArrayConstructor;

  { static methods } 

    {class} function concat(thisob: DDN.mscorlib.DNObject; engine: DNVsaEngine; args: TArray<DDN.mscorlib.DNObject>): DNArrayObject;
    {class} function toLocaleString(thisob: DDN.mscorlib.DNObject): string;
    {class} function join(thisob: DDN.mscorlib.DNObject; separator: DDN.mscorlib.DNObject): string;
    {class} function pop(thisob: DDN.mscorlib.DNObject): DDN.mscorlib.DNObject;
    {class} function push(thisob: DDN.mscorlib.DNObject; args: TArray<DDN.mscorlib.DNObject>): Int64;
    {class} function reverse(thisob: DDN.mscorlib.DNObject): DDN.mscorlib.DNObject;
    {class} function shift(thisob: DDN.mscorlib.DNObject): DDN.mscorlib.DNObject;
    {class} function slice(thisob: DDN.mscorlib.DNObject; engine: DNVsaEngine; start: Double; &end: DDN.mscorlib.DNObject): DNArrayObject;
    {class} function sort(thisob: DDN.mscorlib.DNObject; &function: DDN.mscorlib.DNObject): DDN.mscorlib.DNObject;
    {class} function splice(thisob: DDN.mscorlib.DNObject; engine: DNVsaEngine; start: Double; deleteCnt: Double; args: TArray<DDN.mscorlib.DNObject>): DNArrayObject;
    {class} function toString(thisob: DDN.mscorlib.DNObject): string; overload;
    {class} function unshift(thisob: DDN.mscorlib.DNObject; args: TArray<DDN.mscorlib.DNObject>): DDN.mscorlib.DNObject;

  { static propertys } 

    {class} property &constructor: DNArrayConstructor read get_constructor;
  end;

  [DNTypeName('Microsoft.JScript.ArrayPrototype')]
  DNArrayPrototype = interface(DNArrayObject)
  ['{ECEE085E-F109-38DC-A1EC-3F8AA56A8A33}']
  { getters & setters } 

    function get_length: DDN.mscorlib.DNObject;
    procedure set_length(value: DDN.mscorlib.DNObject);
    function get_Item(index: Double): DDN.mscorlib.DNObject; overload;
    procedure set_Item(index: Double; value: DDN.mscorlib.DNObject); overload;
    function get_Item(index: Int32): DDN.mscorlib.DNObject; overload;
    procedure set_Item(index: Int32; value: DDN.mscorlib.DNObject); overload;
    function get_Item(name: string): DDN.mscorlib.DNObject; overload;
    procedure set_Item(name: string; value: DDN.mscorlib.DNObject); overload;
    function get_Item(pars: TArray<DDN.mscorlib.DNObject>): DDN.mscorlib.DNObject; overload;
    procedure set_Item(pars: TArray<DDN.mscorlib.DNObject>; value: DDN.mscorlib.DNObject); overload;
    function get_UnderlyingSystemType: DDN.mscorlib.DNType;

  { fields getter & setter } 

   function __fakeFieldGet_engine: DNVsaEngine;
   procedure __fakeFieldSet_engine(value: DNVsaEngine);

  { fields } 

   property engine: DNVsaEngine read __fakeFieldGet_engine write __fakeFieldSet_engine;

  { methods } 

    function AddField(name: string): DDN.mscorlib.DNFieldInfo;
    function GetMember(name: string; bindingAttr: DDN.mscorlib.DNBindingFlags): TArray<DDN.mscorlib.DNMemberInfo>;
    procedure SetMemberValue2(name: string; value: DDN.mscorlib.DNObject);
    function ToString: string; overload;
    function GetMembers(bindingAttr: DDN.mscorlib.DNBindingFlags): TArray<DDN.mscorlib.DNMemberInfo>;
    function GetField(name: string; bindingAttr: DDN.mscorlib.DNBindingFlags): DDN.mscorlib.DNFieldInfo;
    function GetMethod(name: string; bindingAttr: DDN.mscorlib.DNBindingFlags): DDN.mscorlib.DNMethodInfo; overload;
    function GetParent: DNScriptObject;
    function GetProperty(name: string; bindingAttr: DDN.mscorlib.DNBindingFlags): DDN.mscorlib.DNPropertyInfo; overload;
    function GetFields(bindingAttr: DDN.mscorlib.DNBindingFlags): TArray<DDN.mscorlib.DNFieldInfo>;
    function GetMethod(name: string; bindingAttr: DDN.mscorlib.DNBindingFlags; binder: DDN.mscorlib.DNBinder; types: TArray<DDN.mscorlib.DNType>; modifiers: TArray<DDN.mscorlib.DNParameterModifier>): DDN.mscorlib.DNMethodInfo; overload;
    function GetMethods(bindingAttr: DDN.mscorlib.DNBindingFlags): TArray<DDN.mscorlib.DNMethodInfo>;
    function GetProperty(name: string; bindingAttr: DDN.mscorlib.DNBindingFlags; binder: DDN.mscorlib.DNBinder; returnType: DDN.mscorlib.DNType; types: TArray<DDN.mscorlib.DNType>; modifiers: TArray<DDN.mscorlib.DNParameterModifier>): DDN.mscorlib.DNPropertyInfo; overload;
    function GetProperties(bindingAttr: DDN.mscorlib.DNBindingFlags): TArray<DDN.mscorlib.DNPropertyInfo>;
    function InvokeMember(name: string; invokeAttr: DDN.mscorlib.DNBindingFlags; binder: DDN.mscorlib.DNBinder; target: DDN.mscorlib.DNObject; args: TArray<DDN.mscorlib.DNObject>; modifiers: TArray<DDN.mscorlib.DNParameterModifier>; locale: DDN.mscorlib.DNCultureInfo; namedParameters: TArray<string>): DDN.mscorlib.DNObject;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    property length: DDN.mscorlib.DNObject read get_length write set_length;
    property Item[index: Double]: DDN.mscorlib.DNObject read get_Item write set_Item; default;
    property Item[index: Int32]: DDN.mscorlib.DNObject read get_Item write set_Item; default;
    property Item[name: string]: DDN.mscorlib.DNObject read get_Item write set_Item; default;
    property Item[pars: TArray<DDN.mscorlib.DNObject>]: DDN.mscorlib.DNObject read get_Item write set_Item; default;
    property UnderlyingSystemType: DDN.mscorlib.DNType read get_UnderlyingSystemType;
  end;

  TDNArrayPrototype = class(TDNGenericImport<DNArrayPrototypeClass, DNArrayPrototype>) end;

  //-------------namespace: Microsoft.JScript----------------
  DNLenientArrayPrototypeClass = interface(DNArrayPrototypeClass)
  ['{629BF860-84DA-52A9-9A22-B03DFA60303C}']
  end;

  [DNTypeName('Microsoft.JScript.LenientArrayPrototype')]
  DNLenientArrayPrototype = interface(DNArrayPrototype)
  ['{DE65057F-7DC2-38AB-854B-99E28B16B95A}']
  { getters & setters } 

    function get_length: DDN.mscorlib.DNObject;
    procedure set_length(value: DDN.mscorlib.DNObject);
    function get_Item(index: Double): DDN.mscorlib.DNObject; overload;
    procedure set_Item(index: Double; value: DDN.mscorlib.DNObject); overload;
    function get_Item(index: Int32): DDN.mscorlib.DNObject; overload;
    procedure set_Item(index: Int32; value: DDN.mscorlib.DNObject); overload;
    function get_Item(name: string): DDN.mscorlib.DNObject; overload;
    procedure set_Item(name: string; value: DDN.mscorlib.DNObject); overload;
    function get_Item(pars: TArray<DDN.mscorlib.DNObject>): DDN.mscorlib.DNObject; overload;
    procedure set_Item(pars: TArray<DDN.mscorlib.DNObject>; value: DDN.mscorlib.DNObject); overload;
    function get_UnderlyingSystemType: DDN.mscorlib.DNType;

  { fields getter & setter } 

   function __fakeFieldGet_constructor: DDN.mscorlib.DNObject;
   procedure __fakeFieldSet_constructor(value: DDN.mscorlib.DNObject);
   function __fakeFieldGet_concat: DDN.mscorlib.DNObject;
   procedure __fakeFieldSet_concat(value: DDN.mscorlib.DNObject);
   function __fakeFieldGet_join: DDN.mscorlib.DNObject;
   procedure __fakeFieldSet_join(value: DDN.mscorlib.DNObject);
   function __fakeFieldGet_pop: DDN.mscorlib.DNObject;
   procedure __fakeFieldSet_pop(value: DDN.mscorlib.DNObject);
   function __fakeFieldGet_push: DDN.mscorlib.DNObject;
   procedure __fakeFieldSet_push(value: DDN.mscorlib.DNObject);
   function __fakeFieldGet_reverse: DDN.mscorlib.DNObject;
   procedure __fakeFieldSet_reverse(value: DDN.mscorlib.DNObject);
   function __fakeFieldGet_shift: DDN.mscorlib.DNObject;
   procedure __fakeFieldSet_shift(value: DDN.mscorlib.DNObject);
   function __fakeFieldGet_slice: DDN.mscorlib.DNObject;
   procedure __fakeFieldSet_slice(value: DDN.mscorlib.DNObject);
   function __fakeFieldGet_sort: DDN.mscorlib.DNObject;
   procedure __fakeFieldSet_sort(value: DDN.mscorlib.DNObject);
   function __fakeFieldGet_splice: DDN.mscorlib.DNObject;
   procedure __fakeFieldSet_splice(value: DDN.mscorlib.DNObject);
   function __fakeFieldGet_unshift: DDN.mscorlib.DNObject;
   procedure __fakeFieldSet_unshift(value: DDN.mscorlib.DNObject);
   function __fakeFieldGet_toLocaleString: DDN.mscorlib.DNObject;
   procedure __fakeFieldSet_toLocaleString(value: DDN.mscorlib.DNObject);
   function __fakeFieldGet_toString: DDN.mscorlib.DNObject;
   procedure __fakeFieldSet_toString(value: DDN.mscorlib.DNObject);
   function __fakeFieldGet_engine: DNVsaEngine;
   procedure __fakeFieldSet_engine(value: DNVsaEngine);

  { fields } 

   property &constructor: DDN.mscorlib.DNObject read __fakeFieldGet_constructor write __fakeFieldSet_constructor;
   property concat: DDN.mscorlib.DNObject read __fakeFieldGet_concat write __fakeFieldSet_concat;
   property join: DDN.mscorlib.DNObject read __fakeFieldGet_join write __fakeFieldSet_join;
   property pop: DDN.mscorlib.DNObject read __fakeFieldGet_pop write __fakeFieldSet_pop;
   property push: DDN.mscorlib.DNObject read __fakeFieldGet_push write __fakeFieldSet_push;
   property reverse: DDN.mscorlib.DNObject read __fakeFieldGet_reverse write __fakeFieldSet_reverse;
   property shift: DDN.mscorlib.DNObject read __fakeFieldGet_shift write __fakeFieldSet_shift;
   property slice: DDN.mscorlib.DNObject read __fakeFieldGet_slice write __fakeFieldSet_slice;
   property sort: DDN.mscorlib.DNObject read __fakeFieldGet_sort write __fakeFieldSet_sort;
   property splice: DDN.mscorlib.DNObject read __fakeFieldGet_splice write __fakeFieldSet_splice;
   property unshift: DDN.mscorlib.DNObject read __fakeFieldGet_unshift write __fakeFieldSet_unshift;
   property toLocaleString: DDN.mscorlib.DNObject read __fakeFieldGet_toLocaleString write __fakeFieldSet_toLocaleString;
   property toString_: DDN.mscorlib.DNObject read __fakeFieldGet_toString write __fakeFieldSet_toString;
   property engine: DNVsaEngine read __fakeFieldGet_engine write __fakeFieldSet_engine;

  { methods } 

    function AddField(name: string): DDN.mscorlib.DNFieldInfo;
    function GetMember(name: string; bindingAttr: DDN.mscorlib.DNBindingFlags): TArray<DDN.mscorlib.DNMemberInfo>;
    procedure SetMemberValue2(name: string; value: DDN.mscorlib.DNObject);
    function ToString: string;
    function GetMembers(bindingAttr: DDN.mscorlib.DNBindingFlags): TArray<DDN.mscorlib.DNMemberInfo>;
    function GetField(name: string; bindingAttr: DDN.mscorlib.DNBindingFlags): DDN.mscorlib.DNFieldInfo;
    function GetMethod(name: string; bindingAttr: DDN.mscorlib.DNBindingFlags): DDN.mscorlib.DNMethodInfo; overload;
    function GetParent: DNScriptObject;
    function GetProperty(name: string; bindingAttr: DDN.mscorlib.DNBindingFlags): DDN.mscorlib.DNPropertyInfo; overload;
    function GetFields(bindingAttr: DDN.mscorlib.DNBindingFlags): TArray<DDN.mscorlib.DNFieldInfo>;
    function GetMethod(name: string; bindingAttr: DDN.mscorlib.DNBindingFlags; binder: DDN.mscorlib.DNBinder; types: TArray<DDN.mscorlib.DNType>; modifiers: TArray<DDN.mscorlib.DNParameterModifier>): DDN.mscorlib.DNMethodInfo; overload;
    function GetMethods(bindingAttr: DDN.mscorlib.DNBindingFlags): TArray<DDN.mscorlib.DNMethodInfo>;
    function GetProperty(name: string; bindingAttr: DDN.mscorlib.DNBindingFlags; binder: DDN.mscorlib.DNBinder; returnType: DDN.mscorlib.DNType; types: TArray<DDN.mscorlib.DNType>; modifiers: TArray<DDN.mscorlib.DNParameterModifier>): DDN.mscorlib.DNPropertyInfo; overload;
    function GetProperties(bindingAttr: DDN.mscorlib.DNBindingFlags): TArray<DDN.mscorlib.DNPropertyInfo>;
    function InvokeMember(name: string; invokeAttr: DDN.mscorlib.DNBindingFlags; binder: DDN.mscorlib.DNBinder; target: DDN.mscorlib.DNObject; args: TArray<DDN.mscorlib.DNObject>; modifiers: TArray<DDN.mscorlib.DNParameterModifier>; locale: DDN.mscorlib.DNCultureInfo; namedParameters: TArray<string>): DDN.mscorlib.DNObject;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    property length: DDN.mscorlib.DNObject read get_length write set_length;
    property Item[index: Double]: DDN.mscorlib.DNObject read get_Item write set_Item; default;
    property Item[index: Int32]: DDN.mscorlib.DNObject read get_Item write set_Item; default;
    property Item[name: string]: DDN.mscorlib.DNObject read get_Item write set_Item; default;
    property Item[pars: TArray<DDN.mscorlib.DNObject>]: DDN.mscorlib.DNObject read get_Item write set_Item; default;
    property UnderlyingSystemType: DDN.mscorlib.DNType read get_UnderlyingSystemType;
  end;

  TDNLenientArrayPrototype = class(TDNGenericImport<DNLenientArrayPrototypeClass, DNLenientArrayPrototype>) end;

  //-------------namespace: Microsoft.JScript----------------
  DNArrayWrapperClass = interface(DNArrayObjectClass)
  ['{EB521225-8DD6-5AEE-A521-39D53F7CFCB0}']
  end;

  [DNTypeName('Microsoft.JScript.ArrayWrapper')]
  DNArrayWrapper = interface(DNArrayObject)
  ['{4CCDB687-35CF-399B-B29F-C7A7F0085F6C}']
  { getters & setters } 

    function get_length: DDN.mscorlib.DNObject;
    procedure set_length(value: DDN.mscorlib.DNObject);
    function get_Item(index: Double): DDN.mscorlib.DNObject; overload;
    procedure set_Item(index: Double; value: DDN.mscorlib.DNObject); overload;
    function get_Item(index: Int32): DDN.mscorlib.DNObject; overload;
    procedure set_Item(index: Int32; value: DDN.mscorlib.DNObject); overload;
    function get_Item(name: string): DDN.mscorlib.DNObject; overload;
    procedure set_Item(name: string; value: DDN.mscorlib.DNObject); overload;
    function get_Item(pars: TArray<DDN.mscorlib.DNObject>): DDN.mscorlib.DNObject; overload;
    procedure set_Item(pars: TArray<DDN.mscorlib.DNObject>; value: DDN.mscorlib.DNObject); overload;
    function get_UnderlyingSystemType: DDN.mscorlib.DNType;

  { fields getter & setter } 

   function __fakeFieldGet_engine: DNVsaEngine;
   procedure __fakeFieldSet_engine(value: DNVsaEngine);

  { fields } 

   property engine: DNVsaEngine read __fakeFieldGet_engine write __fakeFieldSet_engine;

  { methods } 

    function GetType: DDN.mscorlib.DNType;
    function AddField(name: string): DDN.mscorlib.DNFieldInfo;
    function GetMember(name: string; bindingAttr: DDN.mscorlib.DNBindingFlags): TArray<DDN.mscorlib.DNMemberInfo>;
    procedure SetMemberValue2(name: string; value: DDN.mscorlib.DNObject);
    function ToString: string;
    function GetMembers(bindingAttr: DDN.mscorlib.DNBindingFlags): TArray<DDN.mscorlib.DNMemberInfo>;
    function GetField(name: string; bindingAttr: DDN.mscorlib.DNBindingFlags): DDN.mscorlib.DNFieldInfo;
    function GetMethod(name: string; bindingAttr: DDN.mscorlib.DNBindingFlags): DDN.mscorlib.DNMethodInfo; overload;
    function GetParent: DNScriptObject;
    function GetProperty(name: string; bindingAttr: DDN.mscorlib.DNBindingFlags): DDN.mscorlib.DNPropertyInfo; overload;
    function GetFields(bindingAttr: DDN.mscorlib.DNBindingFlags): TArray<DDN.mscorlib.DNFieldInfo>;
    function GetMethod(name: string; bindingAttr: DDN.mscorlib.DNBindingFlags; binder: DDN.mscorlib.DNBinder; types: TArray<DDN.mscorlib.DNType>; modifiers: TArray<DDN.mscorlib.DNParameterModifier>): DDN.mscorlib.DNMethodInfo; overload;
    function GetMethods(bindingAttr: DDN.mscorlib.DNBindingFlags): TArray<DDN.mscorlib.DNMethodInfo>;
    function GetProperty(name: string; bindingAttr: DDN.mscorlib.DNBindingFlags; binder: DDN.mscorlib.DNBinder; returnType: DDN.mscorlib.DNType; types: TArray<DDN.mscorlib.DNType>; modifiers: TArray<DDN.mscorlib.DNParameterModifier>): DDN.mscorlib.DNPropertyInfo; overload;
    function GetProperties(bindingAttr: DDN.mscorlib.DNBindingFlags): TArray<DDN.mscorlib.DNPropertyInfo>;
    function InvokeMember(name: string; invokeAttr: DDN.mscorlib.DNBindingFlags; binder: DDN.mscorlib.DNBinder; target: DDN.mscorlib.DNObject; args: TArray<DDN.mscorlib.DNObject>; modifiers: TArray<DDN.mscorlib.DNParameterModifier>; locale: DDN.mscorlib.DNCultureInfo; namedParameters: TArray<string>): DDN.mscorlib.DNObject;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;

  { propertys } 

    property length: DDN.mscorlib.DNObject read get_length write set_length;
    property Item[index: Double]: DDN.mscorlib.DNObject read get_Item write set_Item; default;
    property Item[index: Int32]: DDN.mscorlib.DNObject read get_Item write set_Item; default;
    property Item[name: string]: DDN.mscorlib.DNObject read get_Item write set_Item; default;
    property Item[pars: TArray<DDN.mscorlib.DNObject>]: DDN.mscorlib.DNObject read get_Item write set_Item; default;
    property UnderlyingSystemType: DDN.mscorlib.DNType read get_UnderlyingSystemType;
  end;

  TDNArrayWrapper = class(TDNGenericImport<DNArrayWrapperClass, DNArrayWrapper>) end;

  //-------------namespace: Microsoft.JScript----------------
  DNRegExpMatchClass = interface(DNArrayObjectClass)
  ['{7A2911CB-8FF7-502B-AD2C-07FE6A282B0B}']
  end;

  [DNTypeName('Microsoft.JScript.RegExpMatch')]
  DNRegExpMatch = interface(DNArrayObject)
  ['{BA2EB9E2-6FD5-3A23-8BFC-CD84F3F028C5}']
  { getters & setters } 

    function get_length: DDN.mscorlib.DNObject;
    procedure set_length(value: DDN.mscorlib.DNObject);
    function get_Item(index: Double): DDN.mscorlib.DNObject; overload;
    procedure set_Item(index: Double; value: DDN.mscorlib.DNObject); overload;
    function get_Item(index: Int32): DDN.mscorlib.DNObject; overload;
    procedure set_Item(index: Int32; value: DDN.mscorlib.DNObject); overload;
    function get_Item(name: string): DDN.mscorlib.DNObject; overload;
    procedure set_Item(name: string; value: DDN.mscorlib.DNObject); overload;
    function get_Item(pars: TArray<DDN.mscorlib.DNObject>): DDN.mscorlib.DNObject; overload;
    procedure set_Item(pars: TArray<DDN.mscorlib.DNObject>; value: DDN.mscorlib.DNObject); overload;
    function get_UnderlyingSystemType: DDN.mscorlib.DNType;

  { fields getter & setter } 

   function __fakeFieldGet_engine: DNVsaEngine;
   procedure __fakeFieldSet_engine(value: DNVsaEngine);

  { fields } 

   property engine: DNVsaEngine read __fakeFieldGet_engine write __fakeFieldSet_engine;

  { methods } 

    function AddField(name: string): DDN.mscorlib.DNFieldInfo;
    function GetMember(name: string; bindingAttr: DDN.mscorlib.DNBindingFlags): TArray<DDN.mscorlib.DNMemberInfo>;
    procedure SetMemberValue2(name: string; value: DDN.mscorlib.DNObject);
    function ToString: string;
    function GetMembers(bindingAttr: DDN.mscorlib.DNBindingFlags): TArray<DDN.mscorlib.DNMemberInfo>;
    function GetField(name: string; bindingAttr: DDN.mscorlib.DNBindingFlags): DDN.mscorlib.DNFieldInfo;
    function GetMethod(name: string; bindingAttr: DDN.mscorlib.DNBindingFlags): DDN.mscorlib.DNMethodInfo; overload;
    function GetParent: DNScriptObject;
    function GetProperty(name: string; bindingAttr: DDN.mscorlib.DNBindingFlags): DDN.mscorlib.DNPropertyInfo; overload;
    function GetFields(bindingAttr: DDN.mscorlib.DNBindingFlags): TArray<DDN.mscorlib.DNFieldInfo>;
    function GetMethod(name: string; bindingAttr: DDN.mscorlib.DNBindingFlags; binder: DDN.mscorlib.DNBinder; types: TArray<DDN.mscorlib.DNType>; modifiers: TArray<DDN.mscorlib.DNParameterModifier>): DDN.mscorlib.DNMethodInfo; overload;
    function GetMethods(bindingAttr: DDN.mscorlib.DNBindingFlags): TArray<DDN.mscorlib.DNMethodInfo>;
    function GetProperty(name: string; bindingAttr: DDN.mscorlib.DNBindingFlags; binder: DDN.mscorlib.DNBinder; returnType: DDN.mscorlib.DNType; types: TArray<DDN.mscorlib.DNType>; modifiers: TArray<DDN.mscorlib.DNParameterModifier>): DDN.mscorlib.DNPropertyInfo; overload;
    function GetProperties(bindingAttr: DDN.mscorlib.DNBindingFlags): TArray<DDN.mscorlib.DNPropertyInfo>;
    function InvokeMember(name: string; invokeAttr: DDN.mscorlib.DNBindingFlags; binder: DDN.mscorlib.DNBinder; target: DDN.mscorlib.DNObject; args: TArray<DDN.mscorlib.DNObject>; modifiers: TArray<DDN.mscorlib.DNParameterModifier>; locale: DDN.mscorlib.DNCultureInfo; namedParameters: TArray<string>): DDN.mscorlib.DNObject;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    property length: DDN.mscorlib.DNObject read get_length write set_length;
    property Item[index: Double]: DDN.mscorlib.DNObject read get_Item write set_Item; default;
    property Item[index: Int32]: DDN.mscorlib.DNObject read get_Item write set_Item; default;
    property Item[name: string]: DDN.mscorlib.DNObject read get_Item write set_Item; default;
    property Item[pars: TArray<DDN.mscorlib.DNObject>]: DDN.mscorlib.DNObject read get_Item write set_Item; default;
    property UnderlyingSystemType: DDN.mscorlib.DNType read get_UnderlyingSystemType;
  end;

  TDNRegExpMatch = class(TDNGenericImport<DNRegExpMatchClass, DNRegExpMatch>) end;

  //-------------namespace: Microsoft.JScript----------------
  DNBooleanObjectClass = interface(DNJSObjectClass)
  ['{66982CD4-6A1D-5DF5-8155-59A0B0FDEB16}']
  end;

  [DNTypeName('Microsoft.JScript.BooleanObject')]
  DNBooleanObject = interface(DNJSObject)
  ['{DCC180B6-1B63-3E91-A76F-1A4603E31CAB}']
  { getters & setters } 

    function get_Item(index: Double): DDN.mscorlib.DNObject; overload;
    procedure set_Item(index: Double; value: DDN.mscorlib.DNObject); overload;
    function get_Item(index: Int32): DDN.mscorlib.DNObject; overload;
    procedure set_Item(index: Int32; value: DDN.mscorlib.DNObject); overload;
    function get_Item(name: string): DDN.mscorlib.DNObject; overload;
    procedure set_Item(name: string; value: DDN.mscorlib.DNObject); overload;
    function get_Item(pars: TArray<DDN.mscorlib.DNObject>): DDN.mscorlib.DNObject; overload;
    procedure set_Item(pars: TArray<DDN.mscorlib.DNObject>; value: DDN.mscorlib.DNObject); overload;
    function get_UnderlyingSystemType: DDN.mscorlib.DNType;

  { fields getter & setter } 

   function __fakeFieldGet_engine: DNVsaEngine;
   procedure __fakeFieldSet_engine(value: DNVsaEngine);

  { fields } 

   property engine: DNVsaEngine read __fakeFieldGet_engine write __fakeFieldSet_engine;

  { methods } 

    function GetType: DDN.mscorlib.DNType;
    function AddField(name: string): DDN.mscorlib.DNFieldInfo;
    function GetMember(name: string; bindingAttr: DDN.mscorlib.DNBindingFlags): TArray<DDN.mscorlib.DNMemberInfo>;
    procedure SetMemberValue2(name: string; value: DDN.mscorlib.DNObject);
    function ToString: string;
    function GetMembers(bindingAttr: DDN.mscorlib.DNBindingFlags): TArray<DDN.mscorlib.DNMemberInfo>;
    function GetField(name: string; bindingAttr: DDN.mscorlib.DNBindingFlags): DDN.mscorlib.DNFieldInfo;
    function GetMethod(name: string; bindingAttr: DDN.mscorlib.DNBindingFlags): DDN.mscorlib.DNMethodInfo; overload;
    function GetParent: DNScriptObject;
    function GetProperty(name: string; bindingAttr: DDN.mscorlib.DNBindingFlags): DDN.mscorlib.DNPropertyInfo; overload;
    function GetFields(bindingAttr: DDN.mscorlib.DNBindingFlags): TArray<DDN.mscorlib.DNFieldInfo>;
    function GetMethod(name: string; bindingAttr: DDN.mscorlib.DNBindingFlags; binder: DDN.mscorlib.DNBinder; types: TArray<DDN.mscorlib.DNType>; modifiers: TArray<DDN.mscorlib.DNParameterModifier>): DDN.mscorlib.DNMethodInfo; overload;
    function GetMethods(bindingAttr: DDN.mscorlib.DNBindingFlags): TArray<DDN.mscorlib.DNMethodInfo>;
    function GetProperty(name: string; bindingAttr: DDN.mscorlib.DNBindingFlags; binder: DDN.mscorlib.DNBinder; returnType: DDN.mscorlib.DNType; types: TArray<DDN.mscorlib.DNType>; modifiers: TArray<DDN.mscorlib.DNParameterModifier>): DDN.mscorlib.DNPropertyInfo; overload;
    function GetProperties(bindingAttr: DDN.mscorlib.DNBindingFlags): TArray<DDN.mscorlib.DNPropertyInfo>;
    function InvokeMember(name: string; invokeAttr: DDN.mscorlib.DNBindingFlags; binder: DDN.mscorlib.DNBinder; target: DDN.mscorlib.DNObject; args: TArray<DDN.mscorlib.DNObject>; modifiers: TArray<DDN.mscorlib.DNParameterModifier>; locale: DDN.mscorlib.DNCultureInfo; namedParameters: TArray<string>): DDN.mscorlib.DNObject;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;

  { propertys } 

    property Item[index: Double]: DDN.mscorlib.DNObject read get_Item write set_Item; default;
    property Item[index: Int32]: DDN.mscorlib.DNObject read get_Item write set_Item; default;
    property Item[name: string]: DDN.mscorlib.DNObject read get_Item write set_Item; default;
    property Item[pars: TArray<DDN.mscorlib.DNObject>]: DDN.mscorlib.DNObject read get_Item write set_Item; default;
    property UnderlyingSystemType: DDN.mscorlib.DNType read get_UnderlyingSystemType;
  end;

  TDNBooleanObject = class(TDNGenericImport<DNBooleanObjectClass, DNBooleanObject>) end;

  //-------------namespace: Microsoft.JScript----------------
  DNBooleanPrototypeClass = interface(DNBooleanObjectClass)
  ['{47AF987C-654F-540E-A1E7-84EE22F1491F}']
  { static getter & setter } 

    {class} function get_constructor: DNBooleanConstructor;

  { static methods } 

    {class} function valueOf(thisob: DDN.mscorlib.DNObject): DDN.mscorlib.DNObject;
    {class} function toString(thisob: DDN.mscorlib.DNObject): string; overload;

  { static propertys } 

    {class} property &constructor: DNBooleanConstructor read get_constructor;
  end;

  [DNTypeName('Microsoft.JScript.BooleanPrototype')]
  DNBooleanPrototype = interface(DNBooleanObject)
  ['{1452A752-D103-385E-A8BB-C57AE47FFE3F}']
  { getters & setters } 

    function get_Item(index: Double): DDN.mscorlib.DNObject; overload;
    procedure set_Item(index: Double; value: DDN.mscorlib.DNObject); overload;
    function get_Item(index: Int32): DDN.mscorlib.DNObject; overload;
    procedure set_Item(index: Int32; value: DDN.mscorlib.DNObject); overload;
    function get_Item(name: string): DDN.mscorlib.DNObject; overload;
    procedure set_Item(name: string; value: DDN.mscorlib.DNObject); overload;
    function get_Item(pars: TArray<DDN.mscorlib.DNObject>): DDN.mscorlib.DNObject; overload;
    procedure set_Item(pars: TArray<DDN.mscorlib.DNObject>; value: DDN.mscorlib.DNObject); overload;
    function get_UnderlyingSystemType: DDN.mscorlib.DNType;

  { fields getter & setter } 

   function __fakeFieldGet_engine: DNVsaEngine;
   procedure __fakeFieldSet_engine(value: DNVsaEngine);

  { fields } 

   property engine: DNVsaEngine read __fakeFieldGet_engine write __fakeFieldSet_engine;

  { methods } 

    function GetType: DDN.mscorlib.DNType;
    function AddField(name: string): DDN.mscorlib.DNFieldInfo;
    function GetMember(name: string; bindingAttr: DDN.mscorlib.DNBindingFlags): TArray<DDN.mscorlib.DNMemberInfo>;
    procedure SetMemberValue2(name: string; value: DDN.mscorlib.DNObject);
    function ToString: string; overload;
    function GetMembers(bindingAttr: DDN.mscorlib.DNBindingFlags): TArray<DDN.mscorlib.DNMemberInfo>;
    function GetField(name: string; bindingAttr: DDN.mscorlib.DNBindingFlags): DDN.mscorlib.DNFieldInfo;
    function GetMethod(name: string; bindingAttr: DDN.mscorlib.DNBindingFlags): DDN.mscorlib.DNMethodInfo; overload;
    function GetParent: DNScriptObject;
    function GetProperty(name: string; bindingAttr: DDN.mscorlib.DNBindingFlags): DDN.mscorlib.DNPropertyInfo; overload;
    function GetFields(bindingAttr: DDN.mscorlib.DNBindingFlags): TArray<DDN.mscorlib.DNFieldInfo>;
    function GetMethod(name: string; bindingAttr: DDN.mscorlib.DNBindingFlags; binder: DDN.mscorlib.DNBinder; types: TArray<DDN.mscorlib.DNType>; modifiers: TArray<DDN.mscorlib.DNParameterModifier>): DDN.mscorlib.DNMethodInfo; overload;
    function GetMethods(bindingAttr: DDN.mscorlib.DNBindingFlags): TArray<DDN.mscorlib.DNMethodInfo>;
    function GetProperty(name: string; bindingAttr: DDN.mscorlib.DNBindingFlags; binder: DDN.mscorlib.DNBinder; returnType: DDN.mscorlib.DNType; types: TArray<DDN.mscorlib.DNType>; modifiers: TArray<DDN.mscorlib.DNParameterModifier>): DDN.mscorlib.DNPropertyInfo; overload;
    function GetProperties(bindingAttr: DDN.mscorlib.DNBindingFlags): TArray<DDN.mscorlib.DNPropertyInfo>;
    function InvokeMember(name: string; invokeAttr: DDN.mscorlib.DNBindingFlags; binder: DDN.mscorlib.DNBinder; target: DDN.mscorlib.DNObject; args: TArray<DDN.mscorlib.DNObject>; modifiers: TArray<DDN.mscorlib.DNParameterModifier>; locale: DDN.mscorlib.DNCultureInfo; namedParameters: TArray<string>): DDN.mscorlib.DNObject;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;

  { propertys } 

    property Item[index: Double]: DDN.mscorlib.DNObject read get_Item write set_Item; default;
    property Item[index: Int32]: DDN.mscorlib.DNObject read get_Item write set_Item; default;
    property Item[name: string]: DDN.mscorlib.DNObject read get_Item write set_Item; default;
    property Item[pars: TArray<DDN.mscorlib.DNObject>]: DDN.mscorlib.DNObject read get_Item write set_Item; default;
    property UnderlyingSystemType: DDN.mscorlib.DNType read get_UnderlyingSystemType;
  end;

  TDNBooleanPrototype = class(TDNGenericImport<DNBooleanPrototypeClass, DNBooleanPrototype>) end;

  //-------------namespace: Microsoft.JScript----------------
  DNLenientBooleanPrototypeClass = interface(DNBooleanPrototypeClass)
  ['{D2BF5EA8-CE65-5FFF-9FB3-834CD380D358}']
  end;

  [DNTypeName('Microsoft.JScript.LenientBooleanPrototype')]
  DNLenientBooleanPrototype = interface(DNBooleanPrototype)
  ['{B12BA434-52BE-3C76-A7F1-629E2053894A}']
  { getters & setters } 

    function get_Item(index: Double): DDN.mscorlib.DNObject; overload;
    procedure set_Item(index: Double; value: DDN.mscorlib.DNObject); overload;
    function get_Item(index: Int32): DDN.mscorlib.DNObject; overload;
    procedure set_Item(index: Int32; value: DDN.mscorlib.DNObject); overload;
    function get_Item(name: string): DDN.mscorlib.DNObject; overload;
    procedure set_Item(name: string; value: DDN.mscorlib.DNObject); overload;
    function get_Item(pars: TArray<DDN.mscorlib.DNObject>): DDN.mscorlib.DNObject; overload;
    procedure set_Item(pars: TArray<DDN.mscorlib.DNObject>; value: DDN.mscorlib.DNObject); overload;
    function get_UnderlyingSystemType: DDN.mscorlib.DNType;

  { fields getter & setter } 

   function __fakeFieldGet_constructor: DDN.mscorlib.DNObject;
   procedure __fakeFieldSet_constructor(value: DDN.mscorlib.DNObject);
   function __fakeFieldGet_toString: DDN.mscorlib.DNObject;
   procedure __fakeFieldSet_toString(value: DDN.mscorlib.DNObject);
   function __fakeFieldGet_valueOf: DDN.mscorlib.DNObject;
   procedure __fakeFieldSet_valueOf(value: DDN.mscorlib.DNObject);
   function __fakeFieldGet_engine: DNVsaEngine;
   procedure __fakeFieldSet_engine(value: DNVsaEngine);

  { fields } 

   property &constructor: DDN.mscorlib.DNObject read __fakeFieldGet_constructor write __fakeFieldSet_constructor;
   property toString_: DDN.mscorlib.DNObject read __fakeFieldGet_toString write __fakeFieldSet_toString;
   property valueOf: DDN.mscorlib.DNObject read __fakeFieldGet_valueOf write __fakeFieldSet_valueOf;
   property engine: DNVsaEngine read __fakeFieldGet_engine write __fakeFieldSet_engine;

  { methods } 

    function GetType: DDN.mscorlib.DNType;
    function AddField(name: string): DDN.mscorlib.DNFieldInfo;
    function GetMember(name: string; bindingAttr: DDN.mscorlib.DNBindingFlags): TArray<DDN.mscorlib.DNMemberInfo>;
    procedure SetMemberValue2(name: string; value: DDN.mscorlib.DNObject);
    function ToString: string;
    function GetMembers(bindingAttr: DDN.mscorlib.DNBindingFlags): TArray<DDN.mscorlib.DNMemberInfo>;
    function GetField(name: string; bindingAttr: DDN.mscorlib.DNBindingFlags): DDN.mscorlib.DNFieldInfo;
    function GetMethod(name: string; bindingAttr: DDN.mscorlib.DNBindingFlags): DDN.mscorlib.DNMethodInfo; overload;
    function GetParent: DNScriptObject;
    function GetProperty(name: string; bindingAttr: DDN.mscorlib.DNBindingFlags): DDN.mscorlib.DNPropertyInfo; overload;
    function GetFields(bindingAttr: DDN.mscorlib.DNBindingFlags): TArray<DDN.mscorlib.DNFieldInfo>;
    function GetMethod(name: string; bindingAttr: DDN.mscorlib.DNBindingFlags; binder: DDN.mscorlib.DNBinder; types: TArray<DDN.mscorlib.DNType>; modifiers: TArray<DDN.mscorlib.DNParameterModifier>): DDN.mscorlib.DNMethodInfo; overload;
    function GetMethods(bindingAttr: DDN.mscorlib.DNBindingFlags): TArray<DDN.mscorlib.DNMethodInfo>;
    function GetProperty(name: string; bindingAttr: DDN.mscorlib.DNBindingFlags; binder: DDN.mscorlib.DNBinder; returnType: DDN.mscorlib.DNType; types: TArray<DDN.mscorlib.DNType>; modifiers: TArray<DDN.mscorlib.DNParameterModifier>): DDN.mscorlib.DNPropertyInfo; overload;
    function GetProperties(bindingAttr: DDN.mscorlib.DNBindingFlags): TArray<DDN.mscorlib.DNPropertyInfo>;
    function InvokeMember(name: string; invokeAttr: DDN.mscorlib.DNBindingFlags; binder: DDN.mscorlib.DNBinder; target: DDN.mscorlib.DNObject; args: TArray<DDN.mscorlib.DNObject>; modifiers: TArray<DDN.mscorlib.DNParameterModifier>; locale: DDN.mscorlib.DNCultureInfo; namedParameters: TArray<string>): DDN.mscorlib.DNObject;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;

  { propertys } 

    property Item[index: Double]: DDN.mscorlib.DNObject read get_Item write set_Item; default;
    property Item[index: Int32]: DDN.mscorlib.DNObject read get_Item write set_Item; default;
    property Item[name: string]: DDN.mscorlib.DNObject read get_Item write set_Item; default;
    property Item[pars: TArray<DDN.mscorlib.DNObject>]: DDN.mscorlib.DNObject read get_Item write set_Item; default;
    property UnderlyingSystemType: DDN.mscorlib.DNType read get_UnderlyingSystemType;
  end;

  TDNLenientBooleanPrototype = class(TDNGenericImport<DNLenientBooleanPrototypeClass, DNLenientBooleanPrototype>) end;

  //-------------namespace: Microsoft.JScript----------------
  DNDateObjectClass = interface(DNJSObjectClass)
  ['{6C489C71-DD53-5D2D-AAA7-DD76E137CB98}']
  end;

  [DNTypeName('Microsoft.JScript.DateObject')]
  DNDateObject = interface(DNJSObject)
  ['{4E89DEF0-57D3-350D-BD2C-90E435FC1B38}']
  { getters & setters } 

    function get_Item(index: Double): DDN.mscorlib.DNObject; overload;
    procedure set_Item(index: Double; value: DDN.mscorlib.DNObject); overload;
    function get_Item(index: Int32): DDN.mscorlib.DNObject; overload;
    procedure set_Item(index: Int32; value: DDN.mscorlib.DNObject); overload;
    function get_Item(name: string): DDN.mscorlib.DNObject; overload;
    procedure set_Item(name: string; value: DDN.mscorlib.DNObject); overload;
    function get_Item(pars: TArray<DDN.mscorlib.DNObject>): DDN.mscorlib.DNObject; overload;
    procedure set_Item(pars: TArray<DDN.mscorlib.DNObject>; value: DDN.mscorlib.DNObject); overload;
    function get_UnderlyingSystemType: DDN.mscorlib.DNType;

  { fields getter & setter } 

   function __fakeFieldGet_engine: DNVsaEngine;
   procedure __fakeFieldSet_engine(value: DNVsaEngine);

  { fields } 

   property engine: DNVsaEngine read __fakeFieldGet_engine write __fakeFieldSet_engine;

  { methods } 

    function AddField(name: string): DDN.mscorlib.DNFieldInfo;
    function GetMember(name: string; bindingAttr: DDN.mscorlib.DNBindingFlags): TArray<DDN.mscorlib.DNMemberInfo>;
    procedure SetMemberValue2(name: string; value: DDN.mscorlib.DNObject);
    function ToString: string;
    function GetMembers(bindingAttr: DDN.mscorlib.DNBindingFlags): TArray<DDN.mscorlib.DNMemberInfo>;
    function GetField(name: string; bindingAttr: DDN.mscorlib.DNBindingFlags): DDN.mscorlib.DNFieldInfo;
    function GetMethod(name: string; bindingAttr: DDN.mscorlib.DNBindingFlags): DDN.mscorlib.DNMethodInfo; overload;
    function GetParent: DNScriptObject;
    function GetProperty(name: string; bindingAttr: DDN.mscorlib.DNBindingFlags): DDN.mscorlib.DNPropertyInfo; overload;
    function GetFields(bindingAttr: DDN.mscorlib.DNBindingFlags): TArray<DDN.mscorlib.DNFieldInfo>;
    function GetMethod(name: string; bindingAttr: DDN.mscorlib.DNBindingFlags; binder: DDN.mscorlib.DNBinder; types: TArray<DDN.mscorlib.DNType>; modifiers: TArray<DDN.mscorlib.DNParameterModifier>): DDN.mscorlib.DNMethodInfo; overload;
    function GetMethods(bindingAttr: DDN.mscorlib.DNBindingFlags): TArray<DDN.mscorlib.DNMethodInfo>;
    function GetProperty(name: string; bindingAttr: DDN.mscorlib.DNBindingFlags; binder: DDN.mscorlib.DNBinder; returnType: DDN.mscorlib.DNType; types: TArray<DDN.mscorlib.DNType>; modifiers: TArray<DDN.mscorlib.DNParameterModifier>): DDN.mscorlib.DNPropertyInfo; overload;
    function GetProperties(bindingAttr: DDN.mscorlib.DNBindingFlags): TArray<DDN.mscorlib.DNPropertyInfo>;
    function InvokeMember(name: string; invokeAttr: DDN.mscorlib.DNBindingFlags; binder: DDN.mscorlib.DNBinder; target: DDN.mscorlib.DNObject; args: TArray<DDN.mscorlib.DNObject>; modifiers: TArray<DDN.mscorlib.DNParameterModifier>; locale: DDN.mscorlib.DNCultureInfo; namedParameters: TArray<string>): DDN.mscorlib.DNObject;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    property Item[index: Double]: DDN.mscorlib.DNObject read get_Item write set_Item; default;
    property Item[index: Int32]: DDN.mscorlib.DNObject read get_Item write set_Item; default;
    property Item[name: string]: DDN.mscorlib.DNObject read get_Item write set_Item; default;
    property Item[pars: TArray<DDN.mscorlib.DNObject>]: DDN.mscorlib.DNObject read get_Item write set_Item; default;
    property UnderlyingSystemType: DDN.mscorlib.DNType read get_UnderlyingSystemType;
  end;

  TDNDateObject = class(TDNGenericImport<DNDateObjectClass, DNDateObject>) end;

  //-------------namespace: Microsoft.JScript----------------
  DNDatePrototypeClass = interface(DNDateObjectClass)
  ['{E769BEBF-391C-5D5D-8B88-434CCBD738FE}']
  { static getter & setter } 

    {class} function get_constructor: DNDateConstructor;

  { static methods } 

    {class} function getDate(thisob: DDN.mscorlib.DNObject): Double;
    {class} function getDay(thisob: DDN.mscorlib.DNObject): Double;
    {class} function getFullYear(thisob: DDN.mscorlib.DNObject): Double;
    {class} function getHours(thisob: DDN.mscorlib.DNObject): Double;
    {class} function getMilliseconds(thisob: DDN.mscorlib.DNObject): Double;
    {class} function getMinutes(thisob: DDN.mscorlib.DNObject): Double;
    {class} function getMonth(thisob: DDN.mscorlib.DNObject): Double;
    {class} function getSeconds(thisob: DDN.mscorlib.DNObject): Double;
    {class} function getTime(thisob: DDN.mscorlib.DNObject): Double;
    {class} function getTimezoneOffset(thisob: DDN.mscorlib.DNObject): Double;
    {class} function getUTCDate(thisob: DDN.mscorlib.DNObject): Double;
    {class} function getUTCDay(thisob: DDN.mscorlib.DNObject): Double;
    {class} function getUTCFullYear(thisob: DDN.mscorlib.DNObject): Double;
    {class} function getUTCHours(thisob: DDN.mscorlib.DNObject): Double;
    {class} function getUTCMilliseconds(thisob: DDN.mscorlib.DNObject): Double;
    {class} function getUTCMinutes(thisob: DDN.mscorlib.DNObject): Double;
    {class} function getUTCMonth(thisob: DDN.mscorlib.DNObject): Double;
    {class} function getUTCSeconds(thisob: DDN.mscorlib.DNObject): Double;
    {class} function getVarDate(thisob: DDN.mscorlib.DNObject): DDN.mscorlib.DNObject;
    {class} function getYear(thisob: DDN.mscorlib.DNObject): Double;
    {class} function setDate(thisob: DDN.mscorlib.DNObject; ddate: Double): Double;
    {class} function setFullYear(thisob: DDN.mscorlib.DNObject; dyear: Double; month: DDN.mscorlib.DNObject; date: DDN.mscorlib.DNObject): Double;
    {class} function setHours(thisob: DDN.mscorlib.DNObject; dhour: Double; min: DDN.mscorlib.DNObject; sec: DDN.mscorlib.DNObject; msec: DDN.mscorlib.DNObject): Double;
    {class} function setMinutes(thisob: DDN.mscorlib.DNObject; dmin: Double; sec: DDN.mscorlib.DNObject; msec: DDN.mscorlib.DNObject): Double;
    {class} function setMilliseconds(thisob: DDN.mscorlib.DNObject; dmsec: Double): Double;
    {class} function setMonth(thisob: DDN.mscorlib.DNObject; dmonth: Double; date: DDN.mscorlib.DNObject): Double;
    {class} function setSeconds(thisob: DDN.mscorlib.DNObject; dsec: Double; msec: DDN.mscorlib.DNObject): Double;
    {class} function setTime(thisob: DDN.mscorlib.DNObject; time: Double): Double;
    {class} function setUTCDate(thisob: DDN.mscorlib.DNObject; ddate: Double): Double;
    {class} function setUTCFullYear(thisob: DDN.mscorlib.DNObject; dyear: Double; month: DDN.mscorlib.DNObject; date: DDN.mscorlib.DNObject): Double;
    {class} function setUTCHours(thisob: DDN.mscorlib.DNObject; dhour: Double; min: DDN.mscorlib.DNObject; sec: DDN.mscorlib.DNObject; msec: DDN.mscorlib.DNObject): Double;
    {class} function setUTCMinutes(thisob: DDN.mscorlib.DNObject; dmin: Double; sec: DDN.mscorlib.DNObject; msec: DDN.mscorlib.DNObject): Double;
    {class} function setUTCMilliseconds(thisob: DDN.mscorlib.DNObject; dmsec: Double): Double;
    {class} function setUTCMonth(thisob: DDN.mscorlib.DNObject; dmonth: Double; date: DDN.mscorlib.DNObject): Double;
    {class} function setUTCSeconds(thisob: DDN.mscorlib.DNObject; dsec: Double; msec: DDN.mscorlib.DNObject): Double;
    {class} function setYear(thisob: DDN.mscorlib.DNObject; dyear: Double): Double;
    {class} function toDateString(thisob: DDN.mscorlib.DNObject): string;
    {class} function toGMTString(thisob: DDN.mscorlib.DNObject): string;
    {class} function toLocaleDateString(thisob: DDN.mscorlib.DNObject): string;
    {class} function toLocaleTimeString(thisob: DDN.mscorlib.DNObject): string;
    {class} function toString(thisob: DDN.mscorlib.DNObject): string; overload;
    {class} function toTimeString(thisob: DDN.mscorlib.DNObject): string;
    {class} function toUTCString(thisob: DDN.mscorlib.DNObject): string;
    {class} function valueOf(thisob: DDN.mscorlib.DNObject): Double;
    {class} function toLocaleString(thisob: DDN.mscorlib.DNObject): string;

  { static propertys } 

    {class} property &constructor: DNDateConstructor read get_constructor;
  end;

  [DNTypeName('Microsoft.JScript.DatePrototype')]
  DNDatePrototype = interface(DNDateObject)
  ['{80721E3C-C3D0-3EA9-976D-37478E995652}']
  { getters & setters } 

    function get_Item(index: Double): DDN.mscorlib.DNObject; overload;
    procedure set_Item(index: Double; value: DDN.mscorlib.DNObject); overload;
    function get_Item(index: Int32): DDN.mscorlib.DNObject; overload;
    procedure set_Item(index: Int32; value: DDN.mscorlib.DNObject); overload;
    function get_Item(name: string): DDN.mscorlib.DNObject; overload;
    procedure set_Item(name: string; value: DDN.mscorlib.DNObject); overload;
    function get_Item(pars: TArray<DDN.mscorlib.DNObject>): DDN.mscorlib.DNObject; overload;
    procedure set_Item(pars: TArray<DDN.mscorlib.DNObject>; value: DDN.mscorlib.DNObject); overload;
    function get_UnderlyingSystemType: DDN.mscorlib.DNType;

  { fields getter & setter } 

   function __fakeFieldGet_engine: DNVsaEngine;
   procedure __fakeFieldSet_engine(value: DNVsaEngine);

  { fields } 

   property engine: DNVsaEngine read __fakeFieldGet_engine write __fakeFieldSet_engine;

  { methods } 

    function AddField(name: string): DDN.mscorlib.DNFieldInfo;
    function GetMember(name: string; bindingAttr: DDN.mscorlib.DNBindingFlags): TArray<DDN.mscorlib.DNMemberInfo>;
    procedure SetMemberValue2(name: string; value: DDN.mscorlib.DNObject);
    function ToString: string; overload;
    function GetMembers(bindingAttr: DDN.mscorlib.DNBindingFlags): TArray<DDN.mscorlib.DNMemberInfo>;
    function GetField(name: string; bindingAttr: DDN.mscorlib.DNBindingFlags): DDN.mscorlib.DNFieldInfo;
    function GetMethod(name: string; bindingAttr: DDN.mscorlib.DNBindingFlags): DDN.mscorlib.DNMethodInfo; overload;
    function GetParent: DNScriptObject;
    function GetProperty(name: string; bindingAttr: DDN.mscorlib.DNBindingFlags): DDN.mscorlib.DNPropertyInfo; overload;
    function GetFields(bindingAttr: DDN.mscorlib.DNBindingFlags): TArray<DDN.mscorlib.DNFieldInfo>;
    function GetMethod(name: string; bindingAttr: DDN.mscorlib.DNBindingFlags; binder: DDN.mscorlib.DNBinder; types: TArray<DDN.mscorlib.DNType>; modifiers: TArray<DDN.mscorlib.DNParameterModifier>): DDN.mscorlib.DNMethodInfo; overload;
    function GetMethods(bindingAttr: DDN.mscorlib.DNBindingFlags): TArray<DDN.mscorlib.DNMethodInfo>;
    function GetProperty(name: string; bindingAttr: DDN.mscorlib.DNBindingFlags; binder: DDN.mscorlib.DNBinder; returnType: DDN.mscorlib.DNType; types: TArray<DDN.mscorlib.DNType>; modifiers: TArray<DDN.mscorlib.DNParameterModifier>): DDN.mscorlib.DNPropertyInfo; overload;
    function GetProperties(bindingAttr: DDN.mscorlib.DNBindingFlags): TArray<DDN.mscorlib.DNPropertyInfo>;
    function InvokeMember(name: string; invokeAttr: DDN.mscorlib.DNBindingFlags; binder: DDN.mscorlib.DNBinder; target: DDN.mscorlib.DNObject; args: TArray<DDN.mscorlib.DNObject>; modifiers: TArray<DDN.mscorlib.DNParameterModifier>; locale: DDN.mscorlib.DNCultureInfo; namedParameters: TArray<string>): DDN.mscorlib.DNObject;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    property Item[index: Double]: DDN.mscorlib.DNObject read get_Item write set_Item; default;
    property Item[index: Int32]: DDN.mscorlib.DNObject read get_Item write set_Item; default;
    property Item[name: string]: DDN.mscorlib.DNObject read get_Item write set_Item; default;
    property Item[pars: TArray<DDN.mscorlib.DNObject>]: DDN.mscorlib.DNObject read get_Item write set_Item; default;
    property UnderlyingSystemType: DDN.mscorlib.DNType read get_UnderlyingSystemType;
  end;

  TDNDatePrototype = class(TDNGenericImport<DNDatePrototypeClass, DNDatePrototype>) end;

  //-------------namespace: Microsoft.JScript----------------
  DNLenientDatePrototypeClass = interface(DNDatePrototypeClass)
  ['{CCD10179-2F59-5E8A-8A5B-BE4DF1D8A21B}']
  end;

  [DNTypeName('Microsoft.JScript.LenientDatePrototype')]
  DNLenientDatePrototype = interface(DNDatePrototype)
  ['{70080960-9C7A-35EB-8D10-B9B453E400DA}']
  { getters & setters } 

    function get_Item(index: Double): DDN.mscorlib.DNObject; overload;
    procedure set_Item(index: Double; value: DDN.mscorlib.DNObject); overload;
    function get_Item(index: Int32): DDN.mscorlib.DNObject; overload;
    procedure set_Item(index: Int32; value: DDN.mscorlib.DNObject); overload;
    function get_Item(name: string): DDN.mscorlib.DNObject; overload;
    procedure set_Item(name: string; value: DDN.mscorlib.DNObject); overload;
    function get_Item(pars: TArray<DDN.mscorlib.DNObject>): DDN.mscorlib.DNObject; overload;
    procedure set_Item(pars: TArray<DDN.mscorlib.DNObject>; value: DDN.mscorlib.DNObject); overload;
    function get_UnderlyingSystemType: DDN.mscorlib.DNType;

  { fields getter & setter } 

   function __fakeFieldGet_constructor: DDN.mscorlib.DNObject;
   procedure __fakeFieldSet_constructor(value: DDN.mscorlib.DNObject);
   function __fakeFieldGet_getTime: DDN.mscorlib.DNObject;
   procedure __fakeFieldSet_getTime(value: DDN.mscorlib.DNObject);
   function __fakeFieldGet_getYear: DDN.mscorlib.DNObject;
   procedure __fakeFieldSet_getYear(value: DDN.mscorlib.DNObject);
   function __fakeFieldGet_getFullYear: DDN.mscorlib.DNObject;
   procedure __fakeFieldSet_getFullYear(value: DDN.mscorlib.DNObject);
   function __fakeFieldGet_getUTCFullYear: DDN.mscorlib.DNObject;
   procedure __fakeFieldSet_getUTCFullYear(value: DDN.mscorlib.DNObject);
   function __fakeFieldGet_getMonth: DDN.mscorlib.DNObject;
   procedure __fakeFieldSet_getMonth(value: DDN.mscorlib.DNObject);
   function __fakeFieldGet_getUTCMonth: DDN.mscorlib.DNObject;
   procedure __fakeFieldSet_getUTCMonth(value: DDN.mscorlib.DNObject);
   function __fakeFieldGet_getDate: DDN.mscorlib.DNObject;
   procedure __fakeFieldSet_getDate(value: DDN.mscorlib.DNObject);
   function __fakeFieldGet_getUTCDate: DDN.mscorlib.DNObject;
   procedure __fakeFieldSet_getUTCDate(value: DDN.mscorlib.DNObject);
   function __fakeFieldGet_getDay: DDN.mscorlib.DNObject;
   procedure __fakeFieldSet_getDay(value: DDN.mscorlib.DNObject);
   function __fakeFieldGet_getUTCDay: DDN.mscorlib.DNObject;
   procedure __fakeFieldSet_getUTCDay(value: DDN.mscorlib.DNObject);
   function __fakeFieldGet_getHours: DDN.mscorlib.DNObject;
   procedure __fakeFieldSet_getHours(value: DDN.mscorlib.DNObject);
   function __fakeFieldGet_getUTCHours: DDN.mscorlib.DNObject;
   procedure __fakeFieldSet_getUTCHours(value: DDN.mscorlib.DNObject);
   function __fakeFieldGet_getMinutes: DDN.mscorlib.DNObject;
   procedure __fakeFieldSet_getMinutes(value: DDN.mscorlib.DNObject);
   function __fakeFieldGet_getUTCMinutes: DDN.mscorlib.DNObject;
   procedure __fakeFieldSet_getUTCMinutes(value: DDN.mscorlib.DNObject);
   function __fakeFieldGet_getSeconds: DDN.mscorlib.DNObject;
   procedure __fakeFieldSet_getSeconds(value: DDN.mscorlib.DNObject);
   function __fakeFieldGet_getUTCSeconds: DDN.mscorlib.DNObject;
   procedure __fakeFieldSet_getUTCSeconds(value: DDN.mscorlib.DNObject);
   function __fakeFieldGet_getMilliseconds: DDN.mscorlib.DNObject;
   procedure __fakeFieldSet_getMilliseconds(value: DDN.mscorlib.DNObject);
   function __fakeFieldGet_getUTCMilliseconds: DDN.mscorlib.DNObject;
   procedure __fakeFieldSet_getUTCMilliseconds(value: DDN.mscorlib.DNObject);
   function __fakeFieldGet_getVarDate: DDN.mscorlib.DNObject;
   procedure __fakeFieldSet_getVarDate(value: DDN.mscorlib.DNObject);
   function __fakeFieldGet_getTimezoneOffset: DDN.mscorlib.DNObject;
   procedure __fakeFieldSet_getTimezoneOffset(value: DDN.mscorlib.DNObject);
   function __fakeFieldGet_setTime: DDN.mscorlib.DNObject;
   procedure __fakeFieldSet_setTime(value: DDN.mscorlib.DNObject);
   function __fakeFieldGet_setMilliseconds: DDN.mscorlib.DNObject;
   procedure __fakeFieldSet_setMilliseconds(value: DDN.mscorlib.DNObject);
   function __fakeFieldGet_setUTCMilliseconds: DDN.mscorlib.DNObject;
   procedure __fakeFieldSet_setUTCMilliseconds(value: DDN.mscorlib.DNObject);
   function __fakeFieldGet_setSeconds: DDN.mscorlib.DNObject;
   procedure __fakeFieldSet_setSeconds(value: DDN.mscorlib.DNObject);
   function __fakeFieldGet_setUTCSeconds: DDN.mscorlib.DNObject;
   procedure __fakeFieldSet_setUTCSeconds(value: DDN.mscorlib.DNObject);
   function __fakeFieldGet_setMinutes: DDN.mscorlib.DNObject;
   procedure __fakeFieldSet_setMinutes(value: DDN.mscorlib.DNObject);
   function __fakeFieldGet_setUTCMinutes: DDN.mscorlib.DNObject;
   procedure __fakeFieldSet_setUTCMinutes(value: DDN.mscorlib.DNObject);
   function __fakeFieldGet_setHours: DDN.mscorlib.DNObject;
   procedure __fakeFieldSet_setHours(value: DDN.mscorlib.DNObject);
   function __fakeFieldGet_setUTCHours: DDN.mscorlib.DNObject;
   procedure __fakeFieldSet_setUTCHours(value: DDN.mscorlib.DNObject);
   function __fakeFieldGet_setDate: DDN.mscorlib.DNObject;
   procedure __fakeFieldSet_setDate(value: DDN.mscorlib.DNObject);
   function __fakeFieldGet_setUTCDate: DDN.mscorlib.DNObject;
   procedure __fakeFieldSet_setUTCDate(value: DDN.mscorlib.DNObject);
   function __fakeFieldGet_setMonth: DDN.mscorlib.DNObject;
   procedure __fakeFieldSet_setMonth(value: DDN.mscorlib.DNObject);
   function __fakeFieldGet_setUTCMonth: DDN.mscorlib.DNObject;
   procedure __fakeFieldSet_setUTCMonth(value: DDN.mscorlib.DNObject);
   function __fakeFieldGet_setFullYear: DDN.mscorlib.DNObject;
   procedure __fakeFieldSet_setFullYear(value: DDN.mscorlib.DNObject);
   function __fakeFieldGet_setUTCFullYear: DDN.mscorlib.DNObject;
   procedure __fakeFieldSet_setUTCFullYear(value: DDN.mscorlib.DNObject);
   function __fakeFieldGet_setYear: DDN.mscorlib.DNObject;
   procedure __fakeFieldSet_setYear(value: DDN.mscorlib.DNObject);
   function __fakeFieldGet_toGMTString: DDN.mscorlib.DNObject;
   procedure __fakeFieldSet_toGMTString(value: DDN.mscorlib.DNObject);
   function __fakeFieldGet_toDateString: DDN.mscorlib.DNObject;
   procedure __fakeFieldSet_toDateString(value: DDN.mscorlib.DNObject);
   function __fakeFieldGet_toLocaleDateString: DDN.mscorlib.DNObject;
   procedure __fakeFieldSet_toLocaleDateString(value: DDN.mscorlib.DNObject);
   function __fakeFieldGet_toLocaleString: DDN.mscorlib.DNObject;
   procedure __fakeFieldSet_toLocaleString(value: DDN.mscorlib.DNObject);
   function __fakeFieldGet_toLocaleTimeString: DDN.mscorlib.DNObject;
   procedure __fakeFieldSet_toLocaleTimeString(value: DDN.mscorlib.DNObject);
   function __fakeFieldGet_toString: DDN.mscorlib.DNObject;
   procedure __fakeFieldSet_toString(value: DDN.mscorlib.DNObject);
   function __fakeFieldGet_toTimeString: DDN.mscorlib.DNObject;
   procedure __fakeFieldSet_toTimeString(value: DDN.mscorlib.DNObject);
   function __fakeFieldGet_toUTCString: DDN.mscorlib.DNObject;
   procedure __fakeFieldSet_toUTCString(value: DDN.mscorlib.DNObject);
   function __fakeFieldGet_valueOf: DDN.mscorlib.DNObject;
   procedure __fakeFieldSet_valueOf(value: DDN.mscorlib.DNObject);
   function __fakeFieldGet_engine: DNVsaEngine;
   procedure __fakeFieldSet_engine(value: DNVsaEngine);

  { fields } 

   property &constructor: DDN.mscorlib.DNObject read __fakeFieldGet_constructor write __fakeFieldSet_constructor;
   property getTime: DDN.mscorlib.DNObject read __fakeFieldGet_getTime write __fakeFieldSet_getTime;
   property getYear: DDN.mscorlib.DNObject read __fakeFieldGet_getYear write __fakeFieldSet_getYear;
   property getFullYear: DDN.mscorlib.DNObject read __fakeFieldGet_getFullYear write __fakeFieldSet_getFullYear;
   property getUTCFullYear: DDN.mscorlib.DNObject read __fakeFieldGet_getUTCFullYear write __fakeFieldSet_getUTCFullYear;
   property getMonth: DDN.mscorlib.DNObject read __fakeFieldGet_getMonth write __fakeFieldSet_getMonth;
   property getUTCMonth: DDN.mscorlib.DNObject read __fakeFieldGet_getUTCMonth write __fakeFieldSet_getUTCMonth;
   property getDate: DDN.mscorlib.DNObject read __fakeFieldGet_getDate write __fakeFieldSet_getDate;
   property getUTCDate: DDN.mscorlib.DNObject read __fakeFieldGet_getUTCDate write __fakeFieldSet_getUTCDate;
   property getDay: DDN.mscorlib.DNObject read __fakeFieldGet_getDay write __fakeFieldSet_getDay;
   property getUTCDay: DDN.mscorlib.DNObject read __fakeFieldGet_getUTCDay write __fakeFieldSet_getUTCDay;
   property getHours: DDN.mscorlib.DNObject read __fakeFieldGet_getHours write __fakeFieldSet_getHours;
   property getUTCHours: DDN.mscorlib.DNObject read __fakeFieldGet_getUTCHours write __fakeFieldSet_getUTCHours;
   property getMinutes: DDN.mscorlib.DNObject read __fakeFieldGet_getMinutes write __fakeFieldSet_getMinutes;
   property getUTCMinutes: DDN.mscorlib.DNObject read __fakeFieldGet_getUTCMinutes write __fakeFieldSet_getUTCMinutes;
   property getSeconds: DDN.mscorlib.DNObject read __fakeFieldGet_getSeconds write __fakeFieldSet_getSeconds;
   property getUTCSeconds: DDN.mscorlib.DNObject read __fakeFieldGet_getUTCSeconds write __fakeFieldSet_getUTCSeconds;
   property getMilliseconds: DDN.mscorlib.DNObject read __fakeFieldGet_getMilliseconds write __fakeFieldSet_getMilliseconds;
   property getUTCMilliseconds: DDN.mscorlib.DNObject read __fakeFieldGet_getUTCMilliseconds write __fakeFieldSet_getUTCMilliseconds;
   property getVarDate: DDN.mscorlib.DNObject read __fakeFieldGet_getVarDate write __fakeFieldSet_getVarDate;
   property getTimezoneOffset: DDN.mscorlib.DNObject read __fakeFieldGet_getTimezoneOffset write __fakeFieldSet_getTimezoneOffset;
   property setTime: DDN.mscorlib.DNObject read __fakeFieldGet_setTime write __fakeFieldSet_setTime;
   property setMilliseconds: DDN.mscorlib.DNObject read __fakeFieldGet_setMilliseconds write __fakeFieldSet_setMilliseconds;
   property setUTCMilliseconds: DDN.mscorlib.DNObject read __fakeFieldGet_setUTCMilliseconds write __fakeFieldSet_setUTCMilliseconds;
   property setSeconds: DDN.mscorlib.DNObject read __fakeFieldGet_setSeconds write __fakeFieldSet_setSeconds;
   property setUTCSeconds: DDN.mscorlib.DNObject read __fakeFieldGet_setUTCSeconds write __fakeFieldSet_setUTCSeconds;
   property setMinutes: DDN.mscorlib.DNObject read __fakeFieldGet_setMinutes write __fakeFieldSet_setMinutes;
   property setUTCMinutes: DDN.mscorlib.DNObject read __fakeFieldGet_setUTCMinutes write __fakeFieldSet_setUTCMinutes;
   property setHours: DDN.mscorlib.DNObject read __fakeFieldGet_setHours write __fakeFieldSet_setHours;
   property setUTCHours: DDN.mscorlib.DNObject read __fakeFieldGet_setUTCHours write __fakeFieldSet_setUTCHours;
   property setDate: DDN.mscorlib.DNObject read __fakeFieldGet_setDate write __fakeFieldSet_setDate;
   property setUTCDate: DDN.mscorlib.DNObject read __fakeFieldGet_setUTCDate write __fakeFieldSet_setUTCDate;
   property setMonth: DDN.mscorlib.DNObject read __fakeFieldGet_setMonth write __fakeFieldSet_setMonth;
   property setUTCMonth: DDN.mscorlib.DNObject read __fakeFieldGet_setUTCMonth write __fakeFieldSet_setUTCMonth;
   property setFullYear: DDN.mscorlib.DNObject read __fakeFieldGet_setFullYear write __fakeFieldSet_setFullYear;
   property setUTCFullYear: DDN.mscorlib.DNObject read __fakeFieldGet_setUTCFullYear write __fakeFieldSet_setUTCFullYear;
   property setYear: DDN.mscorlib.DNObject read __fakeFieldGet_setYear write __fakeFieldSet_setYear;
   property toGMTString: DDN.mscorlib.DNObject read __fakeFieldGet_toGMTString write __fakeFieldSet_toGMTString;
   property toDateString: DDN.mscorlib.DNObject read __fakeFieldGet_toDateString write __fakeFieldSet_toDateString;
   property toLocaleDateString: DDN.mscorlib.DNObject read __fakeFieldGet_toLocaleDateString write __fakeFieldSet_toLocaleDateString;
   property toLocaleString: DDN.mscorlib.DNObject read __fakeFieldGet_toLocaleString write __fakeFieldSet_toLocaleString;
   property toLocaleTimeString: DDN.mscorlib.DNObject read __fakeFieldGet_toLocaleTimeString write __fakeFieldSet_toLocaleTimeString;
   property toString_: DDN.mscorlib.DNObject read __fakeFieldGet_toString write __fakeFieldSet_toString;
   property toTimeString: DDN.mscorlib.DNObject read __fakeFieldGet_toTimeString write __fakeFieldSet_toTimeString;
   property toUTCString: DDN.mscorlib.DNObject read __fakeFieldGet_toUTCString write __fakeFieldSet_toUTCString;
   property valueOf: DDN.mscorlib.DNObject read __fakeFieldGet_valueOf write __fakeFieldSet_valueOf;
   property engine: DNVsaEngine read __fakeFieldGet_engine write __fakeFieldSet_engine;

  { methods } 

    function AddField(name: string): DDN.mscorlib.DNFieldInfo;
    function GetMember(name: string; bindingAttr: DDN.mscorlib.DNBindingFlags): TArray<DDN.mscorlib.DNMemberInfo>;
    procedure SetMemberValue2(name: string; value: DDN.mscorlib.DNObject);
    function ToString: string;
    function GetMembers(bindingAttr: DDN.mscorlib.DNBindingFlags): TArray<DDN.mscorlib.DNMemberInfo>;
    function GetField(name: string; bindingAttr: DDN.mscorlib.DNBindingFlags): DDN.mscorlib.DNFieldInfo;
    function GetMethod(name: string; bindingAttr: DDN.mscorlib.DNBindingFlags): DDN.mscorlib.DNMethodInfo; overload;
    function GetParent: DNScriptObject;
    function GetProperty(name: string; bindingAttr: DDN.mscorlib.DNBindingFlags): DDN.mscorlib.DNPropertyInfo; overload;
    function GetFields(bindingAttr: DDN.mscorlib.DNBindingFlags): TArray<DDN.mscorlib.DNFieldInfo>;
    function GetMethod(name: string; bindingAttr: DDN.mscorlib.DNBindingFlags; binder: DDN.mscorlib.DNBinder; types: TArray<DDN.mscorlib.DNType>; modifiers: TArray<DDN.mscorlib.DNParameterModifier>): DDN.mscorlib.DNMethodInfo; overload;
    function GetMethods(bindingAttr: DDN.mscorlib.DNBindingFlags): TArray<DDN.mscorlib.DNMethodInfo>;
    function GetProperty(name: string; bindingAttr: DDN.mscorlib.DNBindingFlags; binder: DDN.mscorlib.DNBinder; returnType: DDN.mscorlib.DNType; types: TArray<DDN.mscorlib.DNType>; modifiers: TArray<DDN.mscorlib.DNParameterModifier>): DDN.mscorlib.DNPropertyInfo; overload;
    function GetProperties(bindingAttr: DDN.mscorlib.DNBindingFlags): TArray<DDN.mscorlib.DNPropertyInfo>;
    function InvokeMember(name: string; invokeAttr: DDN.mscorlib.DNBindingFlags; binder: DDN.mscorlib.DNBinder; target: DDN.mscorlib.DNObject; args: TArray<DDN.mscorlib.DNObject>; modifiers: TArray<DDN.mscorlib.DNParameterModifier>; locale: DDN.mscorlib.DNCultureInfo; namedParameters: TArray<string>): DDN.mscorlib.DNObject;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    property Item[index: Double]: DDN.mscorlib.DNObject read get_Item write set_Item; default;
    property Item[index: Int32]: DDN.mscorlib.DNObject read get_Item write set_Item; default;
    property Item[name: string]: DDN.mscorlib.DNObject read get_Item write set_Item; default;
    property Item[pars: TArray<DDN.mscorlib.DNObject>]: DDN.mscorlib.DNObject read get_Item write set_Item; default;
    property UnderlyingSystemType: DDN.mscorlib.DNType read get_UnderlyingSystemType;
  end;

  TDNLenientDatePrototype = class(TDNGenericImport<DNLenientDatePrototypeClass, DNLenientDatePrototype>) end;

  //-------------namespace: Microsoft.JScript----------------
  DNEnumeratorObjectClass = interface(DNJSObjectClass)
  ['{6B4FA723-0AD8-5B09-8E5B-46B1DF1DA52B}']
  end;

  [DNTypeName('Microsoft.JScript.EnumeratorObject')]
  DNEnumeratorObject = interface(DNJSObject)
  ['{46222DD4-6190-3936-B815-7B3D4CA55B06}']
  { getters & setters } 

    function get_Item(index: Double): DDN.mscorlib.DNObject; overload;
    procedure set_Item(index: Double; value: DDN.mscorlib.DNObject); overload;
    function get_Item(index: Int32): DDN.mscorlib.DNObject; overload;
    procedure set_Item(index: Int32; value: DDN.mscorlib.DNObject); overload;
    function get_Item(name: string): DDN.mscorlib.DNObject; overload;
    procedure set_Item(name: string; value: DDN.mscorlib.DNObject); overload;
    function get_Item(pars: TArray<DDN.mscorlib.DNObject>): DDN.mscorlib.DNObject; overload;
    procedure set_Item(pars: TArray<DDN.mscorlib.DNObject>; value: DDN.mscorlib.DNObject); overload;
    function get_UnderlyingSystemType: DDN.mscorlib.DNType;

  { fields getter & setter } 

   function __fakeFieldGet_engine: DNVsaEngine;
   procedure __fakeFieldSet_engine(value: DNVsaEngine);

  { fields } 

   property engine: DNVsaEngine read __fakeFieldGet_engine write __fakeFieldSet_engine;

  { methods } 

    function AddField(name: string): DDN.mscorlib.DNFieldInfo;
    function GetMember(name: string; bindingAttr: DDN.mscorlib.DNBindingFlags): TArray<DDN.mscorlib.DNMemberInfo>;
    procedure SetMemberValue2(name: string; value: DDN.mscorlib.DNObject);
    function ToString: string;
    function GetMembers(bindingAttr: DDN.mscorlib.DNBindingFlags): TArray<DDN.mscorlib.DNMemberInfo>;
    function GetField(name: string; bindingAttr: DDN.mscorlib.DNBindingFlags): DDN.mscorlib.DNFieldInfo;
    function GetMethod(name: string; bindingAttr: DDN.mscorlib.DNBindingFlags): DDN.mscorlib.DNMethodInfo; overload;
    function GetParent: DNScriptObject;
    function GetProperty(name: string; bindingAttr: DDN.mscorlib.DNBindingFlags): DDN.mscorlib.DNPropertyInfo; overload;
    function GetFields(bindingAttr: DDN.mscorlib.DNBindingFlags): TArray<DDN.mscorlib.DNFieldInfo>;
    function GetMethod(name: string; bindingAttr: DDN.mscorlib.DNBindingFlags; binder: DDN.mscorlib.DNBinder; types: TArray<DDN.mscorlib.DNType>; modifiers: TArray<DDN.mscorlib.DNParameterModifier>): DDN.mscorlib.DNMethodInfo; overload;
    function GetMethods(bindingAttr: DDN.mscorlib.DNBindingFlags): TArray<DDN.mscorlib.DNMethodInfo>;
    function GetProperty(name: string; bindingAttr: DDN.mscorlib.DNBindingFlags; binder: DDN.mscorlib.DNBinder; returnType: DDN.mscorlib.DNType; types: TArray<DDN.mscorlib.DNType>; modifiers: TArray<DDN.mscorlib.DNParameterModifier>): DDN.mscorlib.DNPropertyInfo; overload;
    function GetProperties(bindingAttr: DDN.mscorlib.DNBindingFlags): TArray<DDN.mscorlib.DNPropertyInfo>;
    function InvokeMember(name: string; invokeAttr: DDN.mscorlib.DNBindingFlags; binder: DDN.mscorlib.DNBinder; target: DDN.mscorlib.DNObject; args: TArray<DDN.mscorlib.DNObject>; modifiers: TArray<DDN.mscorlib.DNParameterModifier>; locale: DDN.mscorlib.DNCultureInfo; namedParameters: TArray<string>): DDN.mscorlib.DNObject;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    property Item[index: Double]: DDN.mscorlib.DNObject read get_Item write set_Item; default;
    property Item[index: Int32]: DDN.mscorlib.DNObject read get_Item write set_Item; default;
    property Item[name: string]: DDN.mscorlib.DNObject read get_Item write set_Item; default;
    property Item[pars: TArray<DDN.mscorlib.DNObject>]: DDN.mscorlib.DNObject read get_Item write set_Item; default;
    property UnderlyingSystemType: DDN.mscorlib.DNType read get_UnderlyingSystemType;
  end;

  TDNEnumeratorObject = class(TDNGenericImport<DNEnumeratorObjectClass, DNEnumeratorObject>) end;

  //-------------namespace: Microsoft.JScript----------------
  DNEnumeratorPrototypeClass = interface(DNJSObjectClass)
  ['{9BABEFF5-32EA-5308-8497-0A666396301E}']
  { static getter & setter } 

    {class} function get_constructor: DNEnumeratorConstructor;

  { static methods } 

    {class} function atEnd(thisob: DDN.mscorlib.DNObject): Boolean;
    {class} function item(thisob: DDN.mscorlib.DNObject): DDN.mscorlib.DNObject;
    {class} procedure moveFirst(thisob: DDN.mscorlib.DNObject);
    {class} procedure moveNext(thisob: DDN.mscorlib.DNObject);

  { static propertys } 

    {class} property &constructor: DNEnumeratorConstructor read get_constructor;
  end;

  [DNTypeName('Microsoft.JScript.EnumeratorPrototype')]
  DNEnumeratorPrototype = interface(DNJSObject)
  ['{EA662803-032A-3935-AC7A-5C577A523C7D}']
  { getters & setters } 

    function get_Item(index: Double): DDN.mscorlib.DNObject; overload;
    procedure set_Item(index: Double; value: DDN.mscorlib.DNObject); overload;
    function get_Item(index: Int32): DDN.mscorlib.DNObject; overload;
    procedure set_Item(index: Int32; value: DDN.mscorlib.DNObject); overload;
    function get_Item(name: string): DDN.mscorlib.DNObject; overload;
    procedure set_Item(name: string; value: DDN.mscorlib.DNObject); overload;
    function get_Item(pars: TArray<DDN.mscorlib.DNObject>): DDN.mscorlib.DNObject; overload;
    procedure set_Item(pars: TArray<DDN.mscorlib.DNObject>; value: DDN.mscorlib.DNObject); overload;
    function get_UnderlyingSystemType: DDN.mscorlib.DNType;

  { fields getter & setter } 

   function __fakeFieldGet_engine: DNVsaEngine;
   procedure __fakeFieldSet_engine(value: DNVsaEngine);

  { fields } 

   property engine: DNVsaEngine read __fakeFieldGet_engine write __fakeFieldSet_engine;

  { methods } 

    function AddField(name: string): DDN.mscorlib.DNFieldInfo;
    function GetMember(name: string; bindingAttr: DDN.mscorlib.DNBindingFlags): TArray<DDN.mscorlib.DNMemberInfo>;
    procedure SetMemberValue2(name: string; value: DDN.mscorlib.DNObject);
    function ToString: string;
    function GetMembers(bindingAttr: DDN.mscorlib.DNBindingFlags): TArray<DDN.mscorlib.DNMemberInfo>;
    function GetField(name: string; bindingAttr: DDN.mscorlib.DNBindingFlags): DDN.mscorlib.DNFieldInfo;
    function GetMethod(name: string; bindingAttr: DDN.mscorlib.DNBindingFlags): DDN.mscorlib.DNMethodInfo; overload;
    function GetParent: DNScriptObject;
    function GetProperty(name: string; bindingAttr: DDN.mscorlib.DNBindingFlags): DDN.mscorlib.DNPropertyInfo; overload;
    function GetFields(bindingAttr: DDN.mscorlib.DNBindingFlags): TArray<DDN.mscorlib.DNFieldInfo>;
    function GetMethod(name: string; bindingAttr: DDN.mscorlib.DNBindingFlags; binder: DDN.mscorlib.DNBinder; types: TArray<DDN.mscorlib.DNType>; modifiers: TArray<DDN.mscorlib.DNParameterModifier>): DDN.mscorlib.DNMethodInfo; overload;
    function GetMethods(bindingAttr: DDN.mscorlib.DNBindingFlags): TArray<DDN.mscorlib.DNMethodInfo>;
    function GetProperty(name: string; bindingAttr: DDN.mscorlib.DNBindingFlags; binder: DDN.mscorlib.DNBinder; returnType: DDN.mscorlib.DNType; types: TArray<DDN.mscorlib.DNType>; modifiers: TArray<DDN.mscorlib.DNParameterModifier>): DDN.mscorlib.DNPropertyInfo; overload;
    function GetProperties(bindingAttr: DDN.mscorlib.DNBindingFlags): TArray<DDN.mscorlib.DNPropertyInfo>;
    function InvokeMember(name: string; invokeAttr: DDN.mscorlib.DNBindingFlags; binder: DDN.mscorlib.DNBinder; target: DDN.mscorlib.DNObject; args: TArray<DDN.mscorlib.DNObject>; modifiers: TArray<DDN.mscorlib.DNParameterModifier>; locale: DDN.mscorlib.DNCultureInfo; namedParameters: TArray<string>): DDN.mscorlib.DNObject;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    property Item[index: Double]: DDN.mscorlib.DNObject read get_Item write set_Item; default;
    property Item[index: Int32]: DDN.mscorlib.DNObject read get_Item write set_Item; default;
    property Item[name: string]: DDN.mscorlib.DNObject read get_Item write set_Item; default;
    property Item[pars: TArray<DDN.mscorlib.DNObject>]: DDN.mscorlib.DNObject read get_Item write set_Item; default;
    property UnderlyingSystemType: DDN.mscorlib.DNType read get_UnderlyingSystemType;
  end;

  TDNEnumeratorPrototype = class(TDNGenericImport<DNEnumeratorPrototypeClass, DNEnumeratorPrototype>) end;

  //-------------namespace: Microsoft.JScript----------------
  DNLenientEnumeratorPrototypeClass = interface(DNEnumeratorPrototypeClass)
  ['{79FDB67D-1DEB-5DF1-BF7D-6599DB03AC79}']
  end;

  [DNTypeName('Microsoft.JScript.LenientEnumeratorPrototype')]
  DNLenientEnumeratorPrototype = interface(DNEnumeratorPrototype)
  ['{7ABF9BF0-DCE9-328D-BF14-AC6F9FA418D5}']
  { getters & setters } 

    function get_Item(index: Double): DDN.mscorlib.DNObject; overload;
    procedure set_Item(index: Double; value: DDN.mscorlib.DNObject); overload;
    function get_Item(index: Int32): DDN.mscorlib.DNObject; overload;
    procedure set_Item(index: Int32; value: DDN.mscorlib.DNObject); overload;
    function get_Item(name: string): DDN.mscorlib.DNObject; overload;
    procedure set_Item(name: string; value: DDN.mscorlib.DNObject); overload;
    function get_Item(pars: TArray<DDN.mscorlib.DNObject>): DDN.mscorlib.DNObject; overload;
    procedure set_Item(pars: TArray<DDN.mscorlib.DNObject>; value: DDN.mscorlib.DNObject); overload;
    function get_UnderlyingSystemType: DDN.mscorlib.DNType;

  { fields getter & setter } 

   function __fakeFieldGet_constructor: DDN.mscorlib.DNObject;
   procedure __fakeFieldSet_constructor(value: DDN.mscorlib.DNObject);
   function __fakeFieldGet_atEnd: DDN.mscorlib.DNObject;
   procedure __fakeFieldSet_atEnd(value: DDN.mscorlib.DNObject);
   function __fakeFieldGet_item: DDN.mscorlib.DNObject;
   procedure __fakeFieldSet_item(value: DDN.mscorlib.DNObject);
   function __fakeFieldGet_moveFirst: DDN.mscorlib.DNObject;
   procedure __fakeFieldSet_moveFirst(value: DDN.mscorlib.DNObject);
   function __fakeFieldGet_moveNext: DDN.mscorlib.DNObject;
   procedure __fakeFieldSet_moveNext(value: DDN.mscorlib.DNObject);
   function __fakeFieldGet_engine: DNVsaEngine;
   procedure __fakeFieldSet_engine(value: DNVsaEngine);

  { fields } 

   property &constructor: DDN.mscorlib.DNObject read __fakeFieldGet_constructor write __fakeFieldSet_constructor;
   property atEnd: DDN.mscorlib.DNObject read __fakeFieldGet_atEnd write __fakeFieldSet_atEnd;
   property item: DDN.mscorlib.DNObject read __fakeFieldGet_item write __fakeFieldSet_item;
   property moveFirst: DDN.mscorlib.DNObject read __fakeFieldGet_moveFirst write __fakeFieldSet_moveFirst;
   property moveNext: DDN.mscorlib.DNObject read __fakeFieldGet_moveNext write __fakeFieldSet_moveNext;
   property engine: DNVsaEngine read __fakeFieldGet_engine write __fakeFieldSet_engine;

  { methods } 

    function AddField(name: string): DDN.mscorlib.DNFieldInfo;
    function GetMember(name: string; bindingAttr: DDN.mscorlib.DNBindingFlags): TArray<DDN.mscorlib.DNMemberInfo>;
    procedure SetMemberValue2(name: string; value: DDN.mscorlib.DNObject);
    function ToString: string;
    function GetMembers(bindingAttr: DDN.mscorlib.DNBindingFlags): TArray<DDN.mscorlib.DNMemberInfo>;
    function GetField(name: string; bindingAttr: DDN.mscorlib.DNBindingFlags): DDN.mscorlib.DNFieldInfo;
    function GetMethod(name: string; bindingAttr: DDN.mscorlib.DNBindingFlags): DDN.mscorlib.DNMethodInfo; overload;
    function GetParent: DNScriptObject;
    function GetProperty(name: string; bindingAttr: DDN.mscorlib.DNBindingFlags): DDN.mscorlib.DNPropertyInfo; overload;
    function GetFields(bindingAttr: DDN.mscorlib.DNBindingFlags): TArray<DDN.mscorlib.DNFieldInfo>;
    function GetMethod(name: string; bindingAttr: DDN.mscorlib.DNBindingFlags; binder: DDN.mscorlib.DNBinder; types: TArray<DDN.mscorlib.DNType>; modifiers: TArray<DDN.mscorlib.DNParameterModifier>): DDN.mscorlib.DNMethodInfo; overload;
    function GetMethods(bindingAttr: DDN.mscorlib.DNBindingFlags): TArray<DDN.mscorlib.DNMethodInfo>;
    function GetProperty(name: string; bindingAttr: DDN.mscorlib.DNBindingFlags; binder: DDN.mscorlib.DNBinder; returnType: DDN.mscorlib.DNType; types: TArray<DDN.mscorlib.DNType>; modifiers: TArray<DDN.mscorlib.DNParameterModifier>): DDN.mscorlib.DNPropertyInfo; overload;
    function GetProperties(bindingAttr: DDN.mscorlib.DNBindingFlags): TArray<DDN.mscorlib.DNPropertyInfo>;
    function InvokeMember(name: string; invokeAttr: DDN.mscorlib.DNBindingFlags; binder: DDN.mscorlib.DNBinder; target: DDN.mscorlib.DNObject; args: TArray<DDN.mscorlib.DNObject>; modifiers: TArray<DDN.mscorlib.DNParameterModifier>; locale: DDN.mscorlib.DNCultureInfo; namedParameters: TArray<string>): DDN.mscorlib.DNObject;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    property Item[index: Double]: DDN.mscorlib.DNObject read get_Item write set_Item; default;
    property Item[index: Int32]: DDN.mscorlib.DNObject read get_Item write set_Item; default;
    property Item[name: string]: DDN.mscorlib.DNObject read get_Item write set_Item; default;
    property Item[pars: TArray<DDN.mscorlib.DNObject>]: DDN.mscorlib.DNObject read get_Item write set_Item; default;
    property UnderlyingSystemType: DDN.mscorlib.DNType read get_UnderlyingSystemType;
  end;

  TDNLenientEnumeratorPrototype = class(TDNGenericImport<DNLenientEnumeratorPrototypeClass, DNLenientEnumeratorPrototype>) end;

  //-------------namespace: Microsoft.JScript----------------
  DNErrorObjectClass = interface(DNJSObjectClass)
  ['{6D3C945D-46FA-5F39-AA2F-BB22BFA7EB1D}']
  { static methods } 

    {class} function ToException(err: DNErrorObject): DDN.mscorlib.DNException;

  end;

  [DNTypeName('Microsoft.JScript.ErrorObject')]
  DNErrorObject = interface(DNJSObject)
  ['{F2067C13-DB00-30F2-AB68-D4921C36EB2C}']
  { getters & setters } 

    function get_Item(index: Double): DDN.mscorlib.DNObject; overload;
    procedure set_Item(index: Double; value: DDN.mscorlib.DNObject); overload;
    function get_Item(index: Int32): DDN.mscorlib.DNObject; overload;
    procedure set_Item(index: Int32; value: DDN.mscorlib.DNObject); overload;
    function get_Item(name: string): DDN.mscorlib.DNObject; overload;
    procedure set_Item(name: string; value: DDN.mscorlib.DNObject); overload;
    function get_Item(pars: TArray<DDN.mscorlib.DNObject>): DDN.mscorlib.DNObject; overload;
    procedure set_Item(pars: TArray<DDN.mscorlib.DNObject>; value: DDN.mscorlib.DNObject); overload;
    function get_UnderlyingSystemType: DDN.mscorlib.DNType;

  { fields getter & setter } 

   function __fakeFieldGet_message: DDN.mscorlib.DNObject;
   procedure __fakeFieldSet_message(value: DDN.mscorlib.DNObject);
   function __fakeFieldGet_number: DDN.mscorlib.DNObject;
   procedure __fakeFieldSet_number(value: DDN.mscorlib.DNObject);
   function __fakeFieldGet_description: DDN.mscorlib.DNObject;
   procedure __fakeFieldSet_description(value: DDN.mscorlib.DNObject);
   function __fakeFieldGet_engine: DNVsaEngine;
   procedure __fakeFieldSet_engine(value: DNVsaEngine);

  { fields } 

   property message: DDN.mscorlib.DNObject read __fakeFieldGet_message write __fakeFieldSet_message;
   property number: DDN.mscorlib.DNObject read __fakeFieldGet_number write __fakeFieldSet_number;
   property description: DDN.mscorlib.DNObject read __fakeFieldGet_description write __fakeFieldSet_description;
   property engine: DNVsaEngine read __fakeFieldGet_engine write __fakeFieldSet_engine;

  { methods } 

    function AddField(name: string): DDN.mscorlib.DNFieldInfo;
    function GetMember(name: string; bindingAttr: DDN.mscorlib.DNBindingFlags): TArray<DDN.mscorlib.DNMemberInfo>;
    procedure SetMemberValue2(name: string; value: DDN.mscorlib.DNObject);
    function ToString: string;
    function GetMembers(bindingAttr: DDN.mscorlib.DNBindingFlags): TArray<DDN.mscorlib.DNMemberInfo>;
    function GetField(name: string; bindingAttr: DDN.mscorlib.DNBindingFlags): DDN.mscorlib.DNFieldInfo;
    function GetMethod(name: string; bindingAttr: DDN.mscorlib.DNBindingFlags): DDN.mscorlib.DNMethodInfo; overload;
    function GetParent: DNScriptObject;
    function GetProperty(name: string; bindingAttr: DDN.mscorlib.DNBindingFlags): DDN.mscorlib.DNPropertyInfo; overload;
    function GetFields(bindingAttr: DDN.mscorlib.DNBindingFlags): TArray<DDN.mscorlib.DNFieldInfo>;
    function GetMethod(name: string; bindingAttr: DDN.mscorlib.DNBindingFlags; binder: DDN.mscorlib.DNBinder; types: TArray<DDN.mscorlib.DNType>; modifiers: TArray<DDN.mscorlib.DNParameterModifier>): DDN.mscorlib.DNMethodInfo; overload;
    function GetMethods(bindingAttr: DDN.mscorlib.DNBindingFlags): TArray<DDN.mscorlib.DNMethodInfo>;
    function GetProperty(name: string; bindingAttr: DDN.mscorlib.DNBindingFlags; binder: DDN.mscorlib.DNBinder; returnType: DDN.mscorlib.DNType; types: TArray<DDN.mscorlib.DNType>; modifiers: TArray<DDN.mscorlib.DNParameterModifier>): DDN.mscorlib.DNPropertyInfo; overload;
    function GetProperties(bindingAttr: DDN.mscorlib.DNBindingFlags): TArray<DDN.mscorlib.DNPropertyInfo>;
    function InvokeMember(name: string; invokeAttr: DDN.mscorlib.DNBindingFlags; binder: DDN.mscorlib.DNBinder; target: DDN.mscorlib.DNObject; args: TArray<DDN.mscorlib.DNObject>; modifiers: TArray<DDN.mscorlib.DNParameterModifier>; locale: DDN.mscorlib.DNCultureInfo; namedParameters: TArray<string>): DDN.mscorlib.DNObject;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    property Item[index: Double]: DDN.mscorlib.DNObject read get_Item write set_Item; default;
    property Item[index: Int32]: DDN.mscorlib.DNObject read get_Item write set_Item; default;
    property Item[name: string]: DDN.mscorlib.DNObject read get_Item write set_Item; default;
    property Item[pars: TArray<DDN.mscorlib.DNObject>]: DDN.mscorlib.DNObject read get_Item write set_Item; default;
    property UnderlyingSystemType: DDN.mscorlib.DNType read get_UnderlyingSystemType;
  end;

  TDNErrorObject = class(TDNGenericImport<DNErrorObjectClass, DNErrorObject>) end;

  //-------------namespace: Microsoft.JScript----------------
  DNEvalErrorObjectClass = interface(DNErrorObjectClass)
  ['{D04C42DC-6805-5F41-A0EF-D120772566AB}']
  end;

  [DNTypeName('Microsoft.JScript.EvalErrorObject')]
  DNEvalErrorObject = interface(DNErrorObject)
  ['{A1838EA7-90A0-3613-A9CA-40838EFE4A4E}']
  { getters & setters } 

    function get_Item(index: Double): DDN.mscorlib.DNObject; overload;
    procedure set_Item(index: Double; value: DDN.mscorlib.DNObject); overload;
    function get_Item(index: Int32): DDN.mscorlib.DNObject; overload;
    procedure set_Item(index: Int32; value: DDN.mscorlib.DNObject); overload;
    function get_Item(name: string): DDN.mscorlib.DNObject; overload;
    procedure set_Item(name: string; value: DDN.mscorlib.DNObject); overload;
    function get_Item(pars: TArray<DDN.mscorlib.DNObject>): DDN.mscorlib.DNObject; overload;
    procedure set_Item(pars: TArray<DDN.mscorlib.DNObject>; value: DDN.mscorlib.DNObject); overload;
    function get_UnderlyingSystemType: DDN.mscorlib.DNType;

  { fields getter & setter } 

   function __fakeFieldGet_message: DDN.mscorlib.DNObject;
   procedure __fakeFieldSet_message(value: DDN.mscorlib.DNObject);
   function __fakeFieldGet_number: DDN.mscorlib.DNObject;
   procedure __fakeFieldSet_number(value: DDN.mscorlib.DNObject);
   function __fakeFieldGet_description: DDN.mscorlib.DNObject;
   procedure __fakeFieldSet_description(value: DDN.mscorlib.DNObject);
   function __fakeFieldGet_engine: DNVsaEngine;
   procedure __fakeFieldSet_engine(value: DNVsaEngine);

  { fields } 

   property message: DDN.mscorlib.DNObject read __fakeFieldGet_message write __fakeFieldSet_message;
   property number: DDN.mscorlib.DNObject read __fakeFieldGet_number write __fakeFieldSet_number;
   property description: DDN.mscorlib.DNObject read __fakeFieldGet_description write __fakeFieldSet_description;
   property engine: DNVsaEngine read __fakeFieldGet_engine write __fakeFieldSet_engine;

  { methods } 

    function AddField(name: string): DDN.mscorlib.DNFieldInfo;
    function GetMember(name: string; bindingAttr: DDN.mscorlib.DNBindingFlags): TArray<DDN.mscorlib.DNMemberInfo>;
    procedure SetMemberValue2(name: string; value: DDN.mscorlib.DNObject);
    function ToString: string;
    function GetMembers(bindingAttr: DDN.mscorlib.DNBindingFlags): TArray<DDN.mscorlib.DNMemberInfo>;
    function GetField(name: string; bindingAttr: DDN.mscorlib.DNBindingFlags): DDN.mscorlib.DNFieldInfo;
    function GetMethod(name: string; bindingAttr: DDN.mscorlib.DNBindingFlags): DDN.mscorlib.DNMethodInfo; overload;
    function GetParent: DNScriptObject;
    function GetProperty(name: string; bindingAttr: DDN.mscorlib.DNBindingFlags): DDN.mscorlib.DNPropertyInfo; overload;
    function GetFields(bindingAttr: DDN.mscorlib.DNBindingFlags): TArray<DDN.mscorlib.DNFieldInfo>;
    function GetMethod(name: string; bindingAttr: DDN.mscorlib.DNBindingFlags; binder: DDN.mscorlib.DNBinder; types: TArray<DDN.mscorlib.DNType>; modifiers: TArray<DDN.mscorlib.DNParameterModifier>): DDN.mscorlib.DNMethodInfo; overload;
    function GetMethods(bindingAttr: DDN.mscorlib.DNBindingFlags): TArray<DDN.mscorlib.DNMethodInfo>;
    function GetProperty(name: string; bindingAttr: DDN.mscorlib.DNBindingFlags; binder: DDN.mscorlib.DNBinder; returnType: DDN.mscorlib.DNType; types: TArray<DDN.mscorlib.DNType>; modifiers: TArray<DDN.mscorlib.DNParameterModifier>): DDN.mscorlib.DNPropertyInfo; overload;
    function GetProperties(bindingAttr: DDN.mscorlib.DNBindingFlags): TArray<DDN.mscorlib.DNPropertyInfo>;
    function InvokeMember(name: string; invokeAttr: DDN.mscorlib.DNBindingFlags; binder: DDN.mscorlib.DNBinder; target: DDN.mscorlib.DNObject; args: TArray<DDN.mscorlib.DNObject>; modifiers: TArray<DDN.mscorlib.DNParameterModifier>; locale: DDN.mscorlib.DNCultureInfo; namedParameters: TArray<string>): DDN.mscorlib.DNObject;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    property Item[index: Double]: DDN.mscorlib.DNObject read get_Item write set_Item; default;
    property Item[index: Int32]: DDN.mscorlib.DNObject read get_Item write set_Item; default;
    property Item[name: string]: DDN.mscorlib.DNObject read get_Item write set_Item; default;
    property Item[pars: TArray<DDN.mscorlib.DNObject>]: DDN.mscorlib.DNObject read get_Item write set_Item; default;
    property UnderlyingSystemType: DDN.mscorlib.DNType read get_UnderlyingSystemType;
  end;

  TDNEvalErrorObject = class(TDNGenericImport<DNEvalErrorObjectClass, DNEvalErrorObject>) end;

  //-------------namespace: Microsoft.JScript----------------
  DNRangeErrorObjectClass = interface(DNErrorObjectClass)
  ['{D0936AD9-891D-5F52-9BE2-EEDC92D6E8F1}']
  end;

  [DNTypeName('Microsoft.JScript.RangeErrorObject')]
  DNRangeErrorObject = interface(DNErrorObject)
  ['{728F539B-AF1C-3AD4-A066-D09A0072A67A}']
  { getters & setters } 

    function get_Item(index: Double): DDN.mscorlib.DNObject; overload;
    procedure set_Item(index: Double; value: DDN.mscorlib.DNObject); overload;
    function get_Item(index: Int32): DDN.mscorlib.DNObject; overload;
    procedure set_Item(index: Int32; value: DDN.mscorlib.DNObject); overload;
    function get_Item(name: string): DDN.mscorlib.DNObject; overload;
    procedure set_Item(name: string; value: DDN.mscorlib.DNObject); overload;
    function get_Item(pars: TArray<DDN.mscorlib.DNObject>): DDN.mscorlib.DNObject; overload;
    procedure set_Item(pars: TArray<DDN.mscorlib.DNObject>; value: DDN.mscorlib.DNObject); overload;
    function get_UnderlyingSystemType: DDN.mscorlib.DNType;

  { fields getter & setter } 

   function __fakeFieldGet_message: DDN.mscorlib.DNObject;
   procedure __fakeFieldSet_message(value: DDN.mscorlib.DNObject);
   function __fakeFieldGet_number: DDN.mscorlib.DNObject;
   procedure __fakeFieldSet_number(value: DDN.mscorlib.DNObject);
   function __fakeFieldGet_description: DDN.mscorlib.DNObject;
   procedure __fakeFieldSet_description(value: DDN.mscorlib.DNObject);
   function __fakeFieldGet_engine: DNVsaEngine;
   procedure __fakeFieldSet_engine(value: DNVsaEngine);

  { fields } 

   property message: DDN.mscorlib.DNObject read __fakeFieldGet_message write __fakeFieldSet_message;
   property number: DDN.mscorlib.DNObject read __fakeFieldGet_number write __fakeFieldSet_number;
   property description: DDN.mscorlib.DNObject read __fakeFieldGet_description write __fakeFieldSet_description;
   property engine: DNVsaEngine read __fakeFieldGet_engine write __fakeFieldSet_engine;

  { methods } 

    function AddField(name: string): DDN.mscorlib.DNFieldInfo;
    function GetMember(name: string; bindingAttr: DDN.mscorlib.DNBindingFlags): TArray<DDN.mscorlib.DNMemberInfo>;
    procedure SetMemberValue2(name: string; value: DDN.mscorlib.DNObject);
    function ToString: string;
    function GetMembers(bindingAttr: DDN.mscorlib.DNBindingFlags): TArray<DDN.mscorlib.DNMemberInfo>;
    function GetField(name: string; bindingAttr: DDN.mscorlib.DNBindingFlags): DDN.mscorlib.DNFieldInfo;
    function GetMethod(name: string; bindingAttr: DDN.mscorlib.DNBindingFlags): DDN.mscorlib.DNMethodInfo; overload;
    function GetParent: DNScriptObject;
    function GetProperty(name: string; bindingAttr: DDN.mscorlib.DNBindingFlags): DDN.mscorlib.DNPropertyInfo; overload;
    function GetFields(bindingAttr: DDN.mscorlib.DNBindingFlags): TArray<DDN.mscorlib.DNFieldInfo>;
    function GetMethod(name: string; bindingAttr: DDN.mscorlib.DNBindingFlags; binder: DDN.mscorlib.DNBinder; types: TArray<DDN.mscorlib.DNType>; modifiers: TArray<DDN.mscorlib.DNParameterModifier>): DDN.mscorlib.DNMethodInfo; overload;
    function GetMethods(bindingAttr: DDN.mscorlib.DNBindingFlags): TArray<DDN.mscorlib.DNMethodInfo>;
    function GetProperty(name: string; bindingAttr: DDN.mscorlib.DNBindingFlags; binder: DDN.mscorlib.DNBinder; returnType: DDN.mscorlib.DNType; types: TArray<DDN.mscorlib.DNType>; modifiers: TArray<DDN.mscorlib.DNParameterModifier>): DDN.mscorlib.DNPropertyInfo; overload;
    function GetProperties(bindingAttr: DDN.mscorlib.DNBindingFlags): TArray<DDN.mscorlib.DNPropertyInfo>;
    function InvokeMember(name: string; invokeAttr: DDN.mscorlib.DNBindingFlags; binder: DDN.mscorlib.DNBinder; target: DDN.mscorlib.DNObject; args: TArray<DDN.mscorlib.DNObject>; modifiers: TArray<DDN.mscorlib.DNParameterModifier>; locale: DDN.mscorlib.DNCultureInfo; namedParameters: TArray<string>): DDN.mscorlib.DNObject;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    property Item[index: Double]: DDN.mscorlib.DNObject read get_Item write set_Item; default;
    property Item[index: Int32]: DDN.mscorlib.DNObject read get_Item write set_Item; default;
    property Item[name: string]: DDN.mscorlib.DNObject read get_Item write set_Item; default;
    property Item[pars: TArray<DDN.mscorlib.DNObject>]: DDN.mscorlib.DNObject read get_Item write set_Item; default;
    property UnderlyingSystemType: DDN.mscorlib.DNType read get_UnderlyingSystemType;
  end;

  TDNRangeErrorObject = class(TDNGenericImport<DNRangeErrorObjectClass, DNRangeErrorObject>) end;

  //-------------namespace: Microsoft.JScript----------------
  DNReferenceErrorObjectClass = interface(DNErrorObjectClass)
  ['{71B58494-F11D-5BCD-9883-638D53F75DC1}']
  end;

  [DNTypeName('Microsoft.JScript.ReferenceErrorObject')]
  DNReferenceErrorObject = interface(DNErrorObject)
  ['{6F040B71-E672-3FC2-82F3-09E1BD95448D}']
  { getters & setters } 

    function get_Item(index: Double): DDN.mscorlib.DNObject; overload;
    procedure set_Item(index: Double; value: DDN.mscorlib.DNObject); overload;
    function get_Item(index: Int32): DDN.mscorlib.DNObject; overload;
    procedure set_Item(index: Int32; value: DDN.mscorlib.DNObject); overload;
    function get_Item(name: string): DDN.mscorlib.DNObject; overload;
    procedure set_Item(name: string; value: DDN.mscorlib.DNObject); overload;
    function get_Item(pars: TArray<DDN.mscorlib.DNObject>): DDN.mscorlib.DNObject; overload;
    procedure set_Item(pars: TArray<DDN.mscorlib.DNObject>; value: DDN.mscorlib.DNObject); overload;
    function get_UnderlyingSystemType: DDN.mscorlib.DNType;

  { fields getter & setter } 

   function __fakeFieldGet_message: DDN.mscorlib.DNObject;
   procedure __fakeFieldSet_message(value: DDN.mscorlib.DNObject);
   function __fakeFieldGet_number: DDN.mscorlib.DNObject;
   procedure __fakeFieldSet_number(value: DDN.mscorlib.DNObject);
   function __fakeFieldGet_description: DDN.mscorlib.DNObject;
   procedure __fakeFieldSet_description(value: DDN.mscorlib.DNObject);
   function __fakeFieldGet_engine: DNVsaEngine;
   procedure __fakeFieldSet_engine(value: DNVsaEngine);

  { fields } 

   property message: DDN.mscorlib.DNObject read __fakeFieldGet_message write __fakeFieldSet_message;
   property number: DDN.mscorlib.DNObject read __fakeFieldGet_number write __fakeFieldSet_number;
   property description: DDN.mscorlib.DNObject read __fakeFieldGet_description write __fakeFieldSet_description;
   property engine: DNVsaEngine read __fakeFieldGet_engine write __fakeFieldSet_engine;

  { methods } 

    function AddField(name: string): DDN.mscorlib.DNFieldInfo;
    function GetMember(name: string; bindingAttr: DDN.mscorlib.DNBindingFlags): TArray<DDN.mscorlib.DNMemberInfo>;
    procedure SetMemberValue2(name: string; value: DDN.mscorlib.DNObject);
    function ToString: string;
    function GetMembers(bindingAttr: DDN.mscorlib.DNBindingFlags): TArray<DDN.mscorlib.DNMemberInfo>;
    function GetField(name: string; bindingAttr: DDN.mscorlib.DNBindingFlags): DDN.mscorlib.DNFieldInfo;
    function GetMethod(name: string; bindingAttr: DDN.mscorlib.DNBindingFlags): DDN.mscorlib.DNMethodInfo; overload;
    function GetParent: DNScriptObject;
    function GetProperty(name: string; bindingAttr: DDN.mscorlib.DNBindingFlags): DDN.mscorlib.DNPropertyInfo; overload;
    function GetFields(bindingAttr: DDN.mscorlib.DNBindingFlags): TArray<DDN.mscorlib.DNFieldInfo>;
    function GetMethod(name: string; bindingAttr: DDN.mscorlib.DNBindingFlags; binder: DDN.mscorlib.DNBinder; types: TArray<DDN.mscorlib.DNType>; modifiers: TArray<DDN.mscorlib.DNParameterModifier>): DDN.mscorlib.DNMethodInfo; overload;
    function GetMethods(bindingAttr: DDN.mscorlib.DNBindingFlags): TArray<DDN.mscorlib.DNMethodInfo>;
    function GetProperty(name: string; bindingAttr: DDN.mscorlib.DNBindingFlags; binder: DDN.mscorlib.DNBinder; returnType: DDN.mscorlib.DNType; types: TArray<DDN.mscorlib.DNType>; modifiers: TArray<DDN.mscorlib.DNParameterModifier>): DDN.mscorlib.DNPropertyInfo; overload;
    function GetProperties(bindingAttr: DDN.mscorlib.DNBindingFlags): TArray<DDN.mscorlib.DNPropertyInfo>;
    function InvokeMember(name: string; invokeAttr: DDN.mscorlib.DNBindingFlags; binder: DDN.mscorlib.DNBinder; target: DDN.mscorlib.DNObject; args: TArray<DDN.mscorlib.DNObject>; modifiers: TArray<DDN.mscorlib.DNParameterModifier>; locale: DDN.mscorlib.DNCultureInfo; namedParameters: TArray<string>): DDN.mscorlib.DNObject;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    property Item[index: Double]: DDN.mscorlib.DNObject read get_Item write set_Item; default;
    property Item[index: Int32]: DDN.mscorlib.DNObject read get_Item write set_Item; default;
    property Item[name: string]: DDN.mscorlib.DNObject read get_Item write set_Item; default;
    property Item[pars: TArray<DDN.mscorlib.DNObject>]: DDN.mscorlib.DNObject read get_Item write set_Item; default;
    property UnderlyingSystemType: DDN.mscorlib.DNType read get_UnderlyingSystemType;
  end;

  TDNReferenceErrorObject = class(TDNGenericImport<DNReferenceErrorObjectClass, DNReferenceErrorObject>) end;

  //-------------namespace: Microsoft.JScript----------------
  DNSyntaxErrorObjectClass = interface(DNErrorObjectClass)
  ['{EE0AABF2-33F6-571F-AC9E-9FE9B218684A}']
  end;

  [DNTypeName('Microsoft.JScript.SyntaxErrorObject')]
  DNSyntaxErrorObject = interface(DNErrorObject)
  ['{181E5270-27FF-3F63-8088-91AA4C432FA9}']
  { getters & setters } 

    function get_Item(index: Double): DDN.mscorlib.DNObject; overload;
    procedure set_Item(index: Double; value: DDN.mscorlib.DNObject); overload;
    function get_Item(index: Int32): DDN.mscorlib.DNObject; overload;
    procedure set_Item(index: Int32; value: DDN.mscorlib.DNObject); overload;
    function get_Item(name: string): DDN.mscorlib.DNObject; overload;
    procedure set_Item(name: string; value: DDN.mscorlib.DNObject); overload;
    function get_Item(pars: TArray<DDN.mscorlib.DNObject>): DDN.mscorlib.DNObject; overload;
    procedure set_Item(pars: TArray<DDN.mscorlib.DNObject>; value: DDN.mscorlib.DNObject); overload;
    function get_UnderlyingSystemType: DDN.mscorlib.DNType;

  { fields getter & setter } 

   function __fakeFieldGet_message: DDN.mscorlib.DNObject;
   procedure __fakeFieldSet_message(value: DDN.mscorlib.DNObject);
   function __fakeFieldGet_number: DDN.mscorlib.DNObject;
   procedure __fakeFieldSet_number(value: DDN.mscorlib.DNObject);
   function __fakeFieldGet_description: DDN.mscorlib.DNObject;
   procedure __fakeFieldSet_description(value: DDN.mscorlib.DNObject);
   function __fakeFieldGet_engine: DNVsaEngine;
   procedure __fakeFieldSet_engine(value: DNVsaEngine);

  { fields } 

   property message: DDN.mscorlib.DNObject read __fakeFieldGet_message write __fakeFieldSet_message;
   property number: DDN.mscorlib.DNObject read __fakeFieldGet_number write __fakeFieldSet_number;
   property description: DDN.mscorlib.DNObject read __fakeFieldGet_description write __fakeFieldSet_description;
   property engine: DNVsaEngine read __fakeFieldGet_engine write __fakeFieldSet_engine;

  { methods } 

    function AddField(name: string): DDN.mscorlib.DNFieldInfo;
    function GetMember(name: string; bindingAttr: DDN.mscorlib.DNBindingFlags): TArray<DDN.mscorlib.DNMemberInfo>;
    procedure SetMemberValue2(name: string; value: DDN.mscorlib.DNObject);
    function ToString: string;
    function GetMembers(bindingAttr: DDN.mscorlib.DNBindingFlags): TArray<DDN.mscorlib.DNMemberInfo>;
    function GetField(name: string; bindingAttr: DDN.mscorlib.DNBindingFlags): DDN.mscorlib.DNFieldInfo;
    function GetMethod(name: string; bindingAttr: DDN.mscorlib.DNBindingFlags): DDN.mscorlib.DNMethodInfo; overload;
    function GetParent: DNScriptObject;
    function GetProperty(name: string; bindingAttr: DDN.mscorlib.DNBindingFlags): DDN.mscorlib.DNPropertyInfo; overload;
    function GetFields(bindingAttr: DDN.mscorlib.DNBindingFlags): TArray<DDN.mscorlib.DNFieldInfo>;
    function GetMethod(name: string; bindingAttr: DDN.mscorlib.DNBindingFlags; binder: DDN.mscorlib.DNBinder; types: TArray<DDN.mscorlib.DNType>; modifiers: TArray<DDN.mscorlib.DNParameterModifier>): DDN.mscorlib.DNMethodInfo; overload;
    function GetMethods(bindingAttr: DDN.mscorlib.DNBindingFlags): TArray<DDN.mscorlib.DNMethodInfo>;
    function GetProperty(name: string; bindingAttr: DDN.mscorlib.DNBindingFlags; binder: DDN.mscorlib.DNBinder; returnType: DDN.mscorlib.DNType; types: TArray<DDN.mscorlib.DNType>; modifiers: TArray<DDN.mscorlib.DNParameterModifier>): DDN.mscorlib.DNPropertyInfo; overload;
    function GetProperties(bindingAttr: DDN.mscorlib.DNBindingFlags): TArray<DDN.mscorlib.DNPropertyInfo>;
    function InvokeMember(name: string; invokeAttr: DDN.mscorlib.DNBindingFlags; binder: DDN.mscorlib.DNBinder; target: DDN.mscorlib.DNObject; args: TArray<DDN.mscorlib.DNObject>; modifiers: TArray<DDN.mscorlib.DNParameterModifier>; locale: DDN.mscorlib.DNCultureInfo; namedParameters: TArray<string>): DDN.mscorlib.DNObject;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    property Item[index: Double]: DDN.mscorlib.DNObject read get_Item write set_Item; default;
    property Item[index: Int32]: DDN.mscorlib.DNObject read get_Item write set_Item; default;
    property Item[name: string]: DDN.mscorlib.DNObject read get_Item write set_Item; default;
    property Item[pars: TArray<DDN.mscorlib.DNObject>]: DDN.mscorlib.DNObject read get_Item write set_Item; default;
    property UnderlyingSystemType: DDN.mscorlib.DNType read get_UnderlyingSystemType;
  end;

  TDNSyntaxErrorObject = class(TDNGenericImport<DNSyntaxErrorObjectClass, DNSyntaxErrorObject>) end;

  //-------------namespace: Microsoft.JScript----------------
  DNTypeErrorObjectClass = interface(DNErrorObjectClass)
  ['{23DF9BD0-82DB-5E03-BD8F-CCFBB0BA2B88}']
  end;

  [DNTypeName('Microsoft.JScript.TypeErrorObject')]
  DNTypeErrorObject = interface(DNErrorObject)
  ['{0E9D8F62-27CE-350A-A048-BEEAC2B93EB6}']
  { getters & setters } 

    function get_Item(index: Double): DDN.mscorlib.DNObject; overload;
    procedure set_Item(index: Double; value: DDN.mscorlib.DNObject); overload;
    function get_Item(index: Int32): DDN.mscorlib.DNObject; overload;
    procedure set_Item(index: Int32; value: DDN.mscorlib.DNObject); overload;
    function get_Item(name: string): DDN.mscorlib.DNObject; overload;
    procedure set_Item(name: string; value: DDN.mscorlib.DNObject); overload;
    function get_Item(pars: TArray<DDN.mscorlib.DNObject>): DDN.mscorlib.DNObject; overload;
    procedure set_Item(pars: TArray<DDN.mscorlib.DNObject>; value: DDN.mscorlib.DNObject); overload;
    function get_UnderlyingSystemType: DDN.mscorlib.DNType;

  { fields getter & setter } 

   function __fakeFieldGet_message: DDN.mscorlib.DNObject;
   procedure __fakeFieldSet_message(value: DDN.mscorlib.DNObject);
   function __fakeFieldGet_number: DDN.mscorlib.DNObject;
   procedure __fakeFieldSet_number(value: DDN.mscorlib.DNObject);
   function __fakeFieldGet_description: DDN.mscorlib.DNObject;
   procedure __fakeFieldSet_description(value: DDN.mscorlib.DNObject);
   function __fakeFieldGet_engine: DNVsaEngine;
   procedure __fakeFieldSet_engine(value: DNVsaEngine);

  { fields } 

   property message: DDN.mscorlib.DNObject read __fakeFieldGet_message write __fakeFieldSet_message;
   property number: DDN.mscorlib.DNObject read __fakeFieldGet_number write __fakeFieldSet_number;
   property description: DDN.mscorlib.DNObject read __fakeFieldGet_description write __fakeFieldSet_description;
   property engine: DNVsaEngine read __fakeFieldGet_engine write __fakeFieldSet_engine;

  { methods } 

    function AddField(name: string): DDN.mscorlib.DNFieldInfo;
    function GetMember(name: string; bindingAttr: DDN.mscorlib.DNBindingFlags): TArray<DDN.mscorlib.DNMemberInfo>;
    procedure SetMemberValue2(name: string; value: DDN.mscorlib.DNObject);
    function ToString: string;
    function GetMembers(bindingAttr: DDN.mscorlib.DNBindingFlags): TArray<DDN.mscorlib.DNMemberInfo>;
    function GetField(name: string; bindingAttr: DDN.mscorlib.DNBindingFlags): DDN.mscorlib.DNFieldInfo;
    function GetMethod(name: string; bindingAttr: DDN.mscorlib.DNBindingFlags): DDN.mscorlib.DNMethodInfo; overload;
    function GetParent: DNScriptObject;
    function GetProperty(name: string; bindingAttr: DDN.mscorlib.DNBindingFlags): DDN.mscorlib.DNPropertyInfo; overload;
    function GetFields(bindingAttr: DDN.mscorlib.DNBindingFlags): TArray<DDN.mscorlib.DNFieldInfo>;
    function GetMethod(name: string; bindingAttr: DDN.mscorlib.DNBindingFlags; binder: DDN.mscorlib.DNBinder; types: TArray<DDN.mscorlib.DNType>; modifiers: TArray<DDN.mscorlib.DNParameterModifier>): DDN.mscorlib.DNMethodInfo; overload;
    function GetMethods(bindingAttr: DDN.mscorlib.DNBindingFlags): TArray<DDN.mscorlib.DNMethodInfo>;
    function GetProperty(name: string; bindingAttr: DDN.mscorlib.DNBindingFlags; binder: DDN.mscorlib.DNBinder; returnType: DDN.mscorlib.DNType; types: TArray<DDN.mscorlib.DNType>; modifiers: TArray<DDN.mscorlib.DNParameterModifier>): DDN.mscorlib.DNPropertyInfo; overload;
    function GetProperties(bindingAttr: DDN.mscorlib.DNBindingFlags): TArray<DDN.mscorlib.DNPropertyInfo>;
    function InvokeMember(name: string; invokeAttr: DDN.mscorlib.DNBindingFlags; binder: DDN.mscorlib.DNBinder; target: DDN.mscorlib.DNObject; args: TArray<DDN.mscorlib.DNObject>; modifiers: TArray<DDN.mscorlib.DNParameterModifier>; locale: DDN.mscorlib.DNCultureInfo; namedParameters: TArray<string>): DDN.mscorlib.DNObject;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    property Item[index: Double]: DDN.mscorlib.DNObject read get_Item write set_Item; default;
    property Item[index: Int32]: DDN.mscorlib.DNObject read get_Item write set_Item; default;
    property Item[name: string]: DDN.mscorlib.DNObject read get_Item write set_Item; default;
    property Item[pars: TArray<DDN.mscorlib.DNObject>]: DDN.mscorlib.DNObject read get_Item write set_Item; default;
    property UnderlyingSystemType: DDN.mscorlib.DNType read get_UnderlyingSystemType;
  end;

  TDNTypeErrorObject = class(TDNGenericImport<DNTypeErrorObjectClass, DNTypeErrorObject>) end;

  //-------------namespace: Microsoft.JScript----------------
  DNURIErrorObjectClass = interface(DNErrorObjectClass)
  ['{83D7F5E2-4584-5FD3-BC47-4A6BE9E3C17F}']
  end;

  [DNTypeName('Microsoft.JScript.URIErrorObject')]
  DNURIErrorObject = interface(DNErrorObject)
  ['{7512A4CB-9A6A-31CC-973D-750A168DAB99}']
  { getters & setters } 

    function get_Item(index: Double): DDN.mscorlib.DNObject; overload;
    procedure set_Item(index: Double; value: DDN.mscorlib.DNObject); overload;
    function get_Item(index: Int32): DDN.mscorlib.DNObject; overload;
    procedure set_Item(index: Int32; value: DDN.mscorlib.DNObject); overload;
    function get_Item(name: string): DDN.mscorlib.DNObject; overload;
    procedure set_Item(name: string; value: DDN.mscorlib.DNObject); overload;
    function get_Item(pars: TArray<DDN.mscorlib.DNObject>): DDN.mscorlib.DNObject; overload;
    procedure set_Item(pars: TArray<DDN.mscorlib.DNObject>; value: DDN.mscorlib.DNObject); overload;
    function get_UnderlyingSystemType: DDN.mscorlib.DNType;

  { fields getter & setter } 

   function __fakeFieldGet_message: DDN.mscorlib.DNObject;
   procedure __fakeFieldSet_message(value: DDN.mscorlib.DNObject);
   function __fakeFieldGet_number: DDN.mscorlib.DNObject;
   procedure __fakeFieldSet_number(value: DDN.mscorlib.DNObject);
   function __fakeFieldGet_description: DDN.mscorlib.DNObject;
   procedure __fakeFieldSet_description(value: DDN.mscorlib.DNObject);
   function __fakeFieldGet_engine: DNVsaEngine;
   procedure __fakeFieldSet_engine(value: DNVsaEngine);

  { fields } 

   property message: DDN.mscorlib.DNObject read __fakeFieldGet_message write __fakeFieldSet_message;
   property number: DDN.mscorlib.DNObject read __fakeFieldGet_number write __fakeFieldSet_number;
   property description: DDN.mscorlib.DNObject read __fakeFieldGet_description write __fakeFieldSet_description;
   property engine: DNVsaEngine read __fakeFieldGet_engine write __fakeFieldSet_engine;

  { methods } 

    function AddField(name: string): DDN.mscorlib.DNFieldInfo;
    function GetMember(name: string; bindingAttr: DDN.mscorlib.DNBindingFlags): TArray<DDN.mscorlib.DNMemberInfo>;
    procedure SetMemberValue2(name: string; value: DDN.mscorlib.DNObject);
    function ToString: string;
    function GetMembers(bindingAttr: DDN.mscorlib.DNBindingFlags): TArray<DDN.mscorlib.DNMemberInfo>;
    function GetField(name: string; bindingAttr: DDN.mscorlib.DNBindingFlags): DDN.mscorlib.DNFieldInfo;
    function GetMethod(name: string; bindingAttr: DDN.mscorlib.DNBindingFlags): DDN.mscorlib.DNMethodInfo; overload;
    function GetParent: DNScriptObject;
    function GetProperty(name: string; bindingAttr: DDN.mscorlib.DNBindingFlags): DDN.mscorlib.DNPropertyInfo; overload;
    function GetFields(bindingAttr: DDN.mscorlib.DNBindingFlags): TArray<DDN.mscorlib.DNFieldInfo>;
    function GetMethod(name: string; bindingAttr: DDN.mscorlib.DNBindingFlags; binder: DDN.mscorlib.DNBinder; types: TArray<DDN.mscorlib.DNType>; modifiers: TArray<DDN.mscorlib.DNParameterModifier>): DDN.mscorlib.DNMethodInfo; overload;
    function GetMethods(bindingAttr: DDN.mscorlib.DNBindingFlags): TArray<DDN.mscorlib.DNMethodInfo>;
    function GetProperty(name: string; bindingAttr: DDN.mscorlib.DNBindingFlags; binder: DDN.mscorlib.DNBinder; returnType: DDN.mscorlib.DNType; types: TArray<DDN.mscorlib.DNType>; modifiers: TArray<DDN.mscorlib.DNParameterModifier>): DDN.mscorlib.DNPropertyInfo; overload;
    function GetProperties(bindingAttr: DDN.mscorlib.DNBindingFlags): TArray<DDN.mscorlib.DNPropertyInfo>;
    function InvokeMember(name: string; invokeAttr: DDN.mscorlib.DNBindingFlags; binder: DDN.mscorlib.DNBinder; target: DDN.mscorlib.DNObject; args: TArray<DDN.mscorlib.DNObject>; modifiers: TArray<DDN.mscorlib.DNParameterModifier>; locale: DDN.mscorlib.DNCultureInfo; namedParameters: TArray<string>): DDN.mscorlib.DNObject;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    property Item[index: Double]: DDN.mscorlib.DNObject read get_Item write set_Item; default;
    property Item[index: Int32]: DDN.mscorlib.DNObject read get_Item write set_Item; default;
    property Item[name: string]: DDN.mscorlib.DNObject read get_Item write set_Item; default;
    property Item[pars: TArray<DDN.mscorlib.DNObject>]: DDN.mscorlib.DNObject read get_Item write set_Item; default;
    property UnderlyingSystemType: DDN.mscorlib.DNType read get_UnderlyingSystemType;
  end;

  TDNURIErrorObject = class(TDNGenericImport<DNURIErrorObjectClass, DNURIErrorObject>) end;

  //-------------namespace: Microsoft.JScript----------------
  DNErrorPrototypeClass = interface(DNJSObjectClass)
  ['{0265A742-A111-5147-B243-A952510EC16F}']
  { static fields getter & setter } 

   function __fakeFieldGet_name: string;

  { static fields } 

    {class} property name: string read __fakeFieldGet_name;

  { static methods } 

    {class} function toString(thisob: DDN.mscorlib.DNObject): string; overload;

  end;

  [DNTypeName('Microsoft.JScript.ErrorPrototype')]
  DNErrorPrototype = interface(DNJSObject)
  ['{7111FD37-0F39-3069-959E-32828C97CF0D}']
  { getters & setters } 

    function get_constructor: DNErrorConstructor;
    function get_Item(index: Double): DDN.mscorlib.DNObject; overload;
    procedure set_Item(index: Double; value: DDN.mscorlib.DNObject); overload;
    function get_Item(index: Int32): DDN.mscorlib.DNObject; overload;
    procedure set_Item(index: Int32; value: DDN.mscorlib.DNObject); overload;
    function get_Item(name: string): DDN.mscorlib.DNObject; overload;
    procedure set_Item(name: string; value: DDN.mscorlib.DNObject); overload;
    function get_Item(pars: TArray<DDN.mscorlib.DNObject>): DDN.mscorlib.DNObject; overload;
    procedure set_Item(pars: TArray<DDN.mscorlib.DNObject>; value: DDN.mscorlib.DNObject); overload;
    function get_UnderlyingSystemType: DDN.mscorlib.DNType;

  { fields getter & setter } 

   function __fakeFieldGet_name: string;
   function __fakeFieldGet_engine: DNVsaEngine;
   procedure __fakeFieldSet_engine(value: DNVsaEngine);

  { fields } 

   property name: string read __fakeFieldGet_name;
   property engine: DNVsaEngine read __fakeFieldGet_engine write __fakeFieldSet_engine;

  { methods } 

    function AddField(name: string): DDN.mscorlib.DNFieldInfo;
    function GetMember(name: string; bindingAttr: DDN.mscorlib.DNBindingFlags): TArray<DDN.mscorlib.DNMemberInfo>;
    procedure SetMemberValue2(name: string; value: DDN.mscorlib.DNObject);
    function ToString: string; overload;
    function GetMembers(bindingAttr: DDN.mscorlib.DNBindingFlags): TArray<DDN.mscorlib.DNMemberInfo>;
    function GetField(name: string; bindingAttr: DDN.mscorlib.DNBindingFlags): DDN.mscorlib.DNFieldInfo;
    function GetMethod(name: string; bindingAttr: DDN.mscorlib.DNBindingFlags): DDN.mscorlib.DNMethodInfo; overload;
    function GetParent: DNScriptObject;
    function GetProperty(name: string; bindingAttr: DDN.mscorlib.DNBindingFlags): DDN.mscorlib.DNPropertyInfo; overload;
    function GetFields(bindingAttr: DDN.mscorlib.DNBindingFlags): TArray<DDN.mscorlib.DNFieldInfo>;
    function GetMethod(name: string; bindingAttr: DDN.mscorlib.DNBindingFlags; binder: DDN.mscorlib.DNBinder; types: TArray<DDN.mscorlib.DNType>; modifiers: TArray<DDN.mscorlib.DNParameterModifier>): DDN.mscorlib.DNMethodInfo; overload;
    function GetMethods(bindingAttr: DDN.mscorlib.DNBindingFlags): TArray<DDN.mscorlib.DNMethodInfo>;
    function GetProperty(name: string; bindingAttr: DDN.mscorlib.DNBindingFlags; binder: DDN.mscorlib.DNBinder; returnType: DDN.mscorlib.DNType; types: TArray<DDN.mscorlib.DNType>; modifiers: TArray<DDN.mscorlib.DNParameterModifier>): DDN.mscorlib.DNPropertyInfo; overload;
    function GetProperties(bindingAttr: DDN.mscorlib.DNBindingFlags): TArray<DDN.mscorlib.DNPropertyInfo>;
    function InvokeMember(name: string; invokeAttr: DDN.mscorlib.DNBindingFlags; binder: DDN.mscorlib.DNBinder; target: DDN.mscorlib.DNObject; args: TArray<DDN.mscorlib.DNObject>; modifiers: TArray<DDN.mscorlib.DNParameterModifier>; locale: DDN.mscorlib.DNCultureInfo; namedParameters: TArray<string>): DDN.mscorlib.DNObject;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    property &constructor: DNErrorConstructor read get_constructor;
    property Item[index: Double]: DDN.mscorlib.DNObject read get_Item write set_Item; default;
    property Item[index: Int32]: DDN.mscorlib.DNObject read get_Item write set_Item; default;
    property Item[name: string]: DDN.mscorlib.DNObject read get_Item write set_Item; default;
    property Item[pars: TArray<DDN.mscorlib.DNObject>]: DDN.mscorlib.DNObject read get_Item write set_Item; default;
    property UnderlyingSystemType: DDN.mscorlib.DNType read get_UnderlyingSystemType;
  end;

  TDNErrorPrototype = class(TDNGenericImport<DNErrorPrototypeClass, DNErrorPrototype>) end;

  //-------------namespace: Microsoft.JScript----------------
  DNLenientErrorPrototypeClass = interface(DNErrorPrototypeClass)
  ['{DF988EA7-C1CA-5858-9B66-218DA9F012FF}']
  { static fields getter & setter } 

   function __fakeFieldGet_name: string;

  { static fields } 

    {class} property name: string read __fakeFieldGet_name;

  end;

  [DNTypeName('Microsoft.JScript.LenientErrorPrototype')]
  DNLenientErrorPrototype = interface(DNErrorPrototype)
  ['{A9ED43A6-F973-3EB8-A4E3-9625446A3675}']
  { getters & setters } 

    function get_constructor: DNErrorConstructor;
    function get_Item(index: Double): DDN.mscorlib.DNObject; overload;
    procedure set_Item(index: Double; value: DDN.mscorlib.DNObject); overload;
    function get_Item(index: Int32): DDN.mscorlib.DNObject; overload;
    procedure set_Item(index: Int32; value: DDN.mscorlib.DNObject); overload;
    function get_Item(name: string): DDN.mscorlib.DNObject; overload;
    procedure set_Item(name: string; value: DDN.mscorlib.DNObject); overload;
    function get_Item(pars: TArray<DDN.mscorlib.DNObject>): DDN.mscorlib.DNObject; overload;
    procedure set_Item(pars: TArray<DDN.mscorlib.DNObject>; value: DDN.mscorlib.DNObject); overload;
    function get_UnderlyingSystemType: DDN.mscorlib.DNType;

  { fields getter & setter } 

   function __fakeFieldGet_constructor: DDN.mscorlib.DNObject;
   procedure __fakeFieldSet_constructor(value: DDN.mscorlib.DNObject);
   function __fakeFieldGet_name: DDN.mscorlib.DNObject;
   procedure __fakeFieldSet_name(value: DDN.mscorlib.DNObject);
   function __fakeFieldGet_toString: DDN.mscorlib.DNObject;
   procedure __fakeFieldSet_toString(value: DDN.mscorlib.DNObject);
   function __fakeFieldGet_engine: DNVsaEngine;
   procedure __fakeFieldSet_engine(value: DNVsaEngine);

  { fields } 

   property &constructor: DDN.mscorlib.DNObject read __fakeFieldGet_constructor write __fakeFieldSet_constructor;
   property name: DDN.mscorlib.DNObject read __fakeFieldGet_name write __fakeFieldSet_name;
   property toString_: DDN.mscorlib.DNObject read __fakeFieldGet_toString write __fakeFieldSet_toString;
   property engine: DNVsaEngine read __fakeFieldGet_engine write __fakeFieldSet_engine;

  { methods } 

    function AddField(name: string): DDN.mscorlib.DNFieldInfo;
    function GetMember(name: string; bindingAttr: DDN.mscorlib.DNBindingFlags): TArray<DDN.mscorlib.DNMemberInfo>;
    procedure SetMemberValue2(name: string; value: DDN.mscorlib.DNObject);
    function ToString: string;
    function GetMembers(bindingAttr: DDN.mscorlib.DNBindingFlags): TArray<DDN.mscorlib.DNMemberInfo>;
    function GetField(name: string; bindingAttr: DDN.mscorlib.DNBindingFlags): DDN.mscorlib.DNFieldInfo;
    function GetMethod(name: string; bindingAttr: DDN.mscorlib.DNBindingFlags): DDN.mscorlib.DNMethodInfo; overload;
    function GetParent: DNScriptObject;
    function GetProperty(name: string; bindingAttr: DDN.mscorlib.DNBindingFlags): DDN.mscorlib.DNPropertyInfo; overload;
    function GetFields(bindingAttr: DDN.mscorlib.DNBindingFlags): TArray<DDN.mscorlib.DNFieldInfo>;
    function GetMethod(name: string; bindingAttr: DDN.mscorlib.DNBindingFlags; binder: DDN.mscorlib.DNBinder; types: TArray<DDN.mscorlib.DNType>; modifiers: TArray<DDN.mscorlib.DNParameterModifier>): DDN.mscorlib.DNMethodInfo; overload;
    function GetMethods(bindingAttr: DDN.mscorlib.DNBindingFlags): TArray<DDN.mscorlib.DNMethodInfo>;
    function GetProperty(name: string; bindingAttr: DDN.mscorlib.DNBindingFlags; binder: DDN.mscorlib.DNBinder; returnType: DDN.mscorlib.DNType; types: TArray<DDN.mscorlib.DNType>; modifiers: TArray<DDN.mscorlib.DNParameterModifier>): DDN.mscorlib.DNPropertyInfo; overload;
    function GetProperties(bindingAttr: DDN.mscorlib.DNBindingFlags): TArray<DDN.mscorlib.DNPropertyInfo>;
    function InvokeMember(name: string; invokeAttr: DDN.mscorlib.DNBindingFlags; binder: DDN.mscorlib.DNBinder; target: DDN.mscorlib.DNObject; args: TArray<DDN.mscorlib.DNObject>; modifiers: TArray<DDN.mscorlib.DNParameterModifier>; locale: DDN.mscorlib.DNCultureInfo; namedParameters: TArray<string>): DDN.mscorlib.DNObject;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    property &constructor: DNErrorConstructor read get_constructor;
    property Item[index: Double]: DDN.mscorlib.DNObject read get_Item write set_Item; default;
    property Item[index: Int32]: DDN.mscorlib.DNObject read get_Item write set_Item; default;
    property Item[name: string]: DDN.mscorlib.DNObject read get_Item write set_Item; default;
    property Item[pars: TArray<DDN.mscorlib.DNObject>]: DDN.mscorlib.DNObject read get_Item write set_Item; default;
    property UnderlyingSystemType: DDN.mscorlib.DNType read get_UnderlyingSystemType;
  end;

  TDNLenientErrorPrototype = class(TDNGenericImport<DNLenientErrorPrototypeClass, DNLenientErrorPrototype>) end;

  //-------------namespace: Microsoft.JScript----------------
  DNJSPrototypeObjectClass = interface(DNJSObjectClass)
  ['{ADC1D0CA-616E-53C6-938F-20CFCEABA816}']
  end;

  [DNTypeName('Microsoft.JScript.JSPrototypeObject')]
  DNJSPrototypeObject = interface(DNJSObject)
  ['{2E9C125F-E16F-37D0-9152-BBEA40A394CE}']
  { getters & setters } 

    function get_Item(index: Double): DDN.mscorlib.DNObject; overload;
    procedure set_Item(index: Double; value: DDN.mscorlib.DNObject); overload;
    function get_Item(index: Int32): DDN.mscorlib.DNObject; overload;
    procedure set_Item(index: Int32; value: DDN.mscorlib.DNObject); overload;
    function get_Item(name: string): DDN.mscorlib.DNObject; overload;
    procedure set_Item(name: string; value: DDN.mscorlib.DNObject); overload;
    function get_Item(pars: TArray<DDN.mscorlib.DNObject>): DDN.mscorlib.DNObject; overload;
    procedure set_Item(pars: TArray<DDN.mscorlib.DNObject>; value: DDN.mscorlib.DNObject); overload;
    function get_UnderlyingSystemType: DDN.mscorlib.DNType;

  { fields getter & setter } 

   function __fakeFieldGet_constructor: DDN.mscorlib.DNObject;
   procedure __fakeFieldSet_constructor(value: DDN.mscorlib.DNObject);
   function __fakeFieldGet_engine: DNVsaEngine;
   procedure __fakeFieldSet_engine(value: DNVsaEngine);

  { fields } 

   property &constructor: DDN.mscorlib.DNObject read __fakeFieldGet_constructor write __fakeFieldSet_constructor;
   property engine: DNVsaEngine read __fakeFieldGet_engine write __fakeFieldSet_engine;

  { methods } 

    function AddField(name: string): DDN.mscorlib.DNFieldInfo;
    function GetMember(name: string; bindingAttr: DDN.mscorlib.DNBindingFlags): TArray<DDN.mscorlib.DNMemberInfo>;
    procedure SetMemberValue2(name: string; value: DDN.mscorlib.DNObject);
    function ToString: string;
    function GetMembers(bindingAttr: DDN.mscorlib.DNBindingFlags): TArray<DDN.mscorlib.DNMemberInfo>;
    function GetField(name: string; bindingAttr: DDN.mscorlib.DNBindingFlags): DDN.mscorlib.DNFieldInfo;
    function GetMethod(name: string; bindingAttr: DDN.mscorlib.DNBindingFlags): DDN.mscorlib.DNMethodInfo; overload;
    function GetParent: DNScriptObject;
    function GetProperty(name: string; bindingAttr: DDN.mscorlib.DNBindingFlags): DDN.mscorlib.DNPropertyInfo; overload;
    function GetFields(bindingAttr: DDN.mscorlib.DNBindingFlags): TArray<DDN.mscorlib.DNFieldInfo>;
    function GetMethod(name: string; bindingAttr: DDN.mscorlib.DNBindingFlags; binder: DDN.mscorlib.DNBinder; types: TArray<DDN.mscorlib.DNType>; modifiers: TArray<DDN.mscorlib.DNParameterModifier>): DDN.mscorlib.DNMethodInfo; overload;
    function GetMethods(bindingAttr: DDN.mscorlib.DNBindingFlags): TArray<DDN.mscorlib.DNMethodInfo>;
    function GetProperty(name: string; bindingAttr: DDN.mscorlib.DNBindingFlags; binder: DDN.mscorlib.DNBinder; returnType: DDN.mscorlib.DNType; types: TArray<DDN.mscorlib.DNType>; modifiers: TArray<DDN.mscorlib.DNParameterModifier>): DDN.mscorlib.DNPropertyInfo; overload;
    function GetProperties(bindingAttr: DDN.mscorlib.DNBindingFlags): TArray<DDN.mscorlib.DNPropertyInfo>;
    function InvokeMember(name: string; invokeAttr: DDN.mscorlib.DNBindingFlags; binder: DDN.mscorlib.DNBinder; target: DDN.mscorlib.DNObject; args: TArray<DDN.mscorlib.DNObject>; modifiers: TArray<DDN.mscorlib.DNParameterModifier>; locale: DDN.mscorlib.DNCultureInfo; namedParameters: TArray<string>): DDN.mscorlib.DNObject;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    property Item[index: Double]: DDN.mscorlib.DNObject read get_Item write set_Item; default;
    property Item[index: Int32]: DDN.mscorlib.DNObject read get_Item write set_Item; default;
    property Item[name: string]: DDN.mscorlib.DNObject read get_Item write set_Item; default;
    property Item[pars: TArray<DDN.mscorlib.DNObject>]: DDN.mscorlib.DNObject read get_Item write set_Item; default;
    property UnderlyingSystemType: DDN.mscorlib.DNType read get_UnderlyingSystemType;
  end;

  TDNJSPrototypeObject = class(TDNGenericImport<DNJSPrototypeObjectClass, DNJSPrototypeObject>) end;

  //-------------namespace: Microsoft.JScript----------------
  DNMathObjectClass = interface(DNJSObjectClass)
  ['{ED1D4BBD-7AFB-5349-9AD9-1339576F36AB}']
  { static methods } 

    {class} function abs(d: Double): Double;
    {class} function acos(x: Double): Double;
    {class} function asin(x: Double): Double;
    {class} function atan(x: Double): Double;
    {class} function atan2(dy: Double; dx: Double): Double;
    {class} function ceil(x: Double): Double;
    {class} function cos(x: Double): Double;
    {class} function exp(x: Double): Double;
    {class} function floor(x: Double): Double;
    {class} function log(x: Double): Double;
    {class} function max(x: DDN.mscorlib.DNObject; y: DDN.mscorlib.DNObject; args: TArray<DDN.mscorlib.DNObject>): Double;
    {class} function min(x: DDN.mscorlib.DNObject; y: DDN.mscorlib.DNObject; args: TArray<DDN.mscorlib.DNObject>): Double;
    {class} function pow(dx: Double; dy: Double): Double;
    {class} function random: Double;
    {class} function round(d: Double): Double;
    {class} function sin(x: Double): Double;
    {class} function sqrt(x: Double): Double;
    {class} function tan(x: Double): Double;

  end;

  [DNTypeName('Microsoft.JScript.MathObject')]
  DNMathObject = interface(DNJSObject)
  ['{4690F45C-7D99-3190-9167-89FDAD3FE109}']
  { getters & setters } 

    function get_Item(index: Double): DDN.mscorlib.DNObject; overload;
    procedure set_Item(index: Double; value: DDN.mscorlib.DNObject); overload;
    function get_Item(index: Int32): DDN.mscorlib.DNObject; overload;
    procedure set_Item(index: Int32; value: DDN.mscorlib.DNObject); overload;
    function get_Item(name: string): DDN.mscorlib.DNObject; overload;
    procedure set_Item(name: string; value: DDN.mscorlib.DNObject); overload;
    function get_Item(pars: TArray<DDN.mscorlib.DNObject>): DDN.mscorlib.DNObject; overload;
    procedure set_Item(pars: TArray<DDN.mscorlib.DNObject>; value: DDN.mscorlib.DNObject); overload;
    function get_UnderlyingSystemType: DDN.mscorlib.DNType;

  { fields getter & setter } 

   function __fakeFieldGet_engine: DNVsaEngine;
   procedure __fakeFieldSet_engine(value: DNVsaEngine);

  { fields } 

   property engine: DNVsaEngine read __fakeFieldGet_engine write __fakeFieldSet_engine;

  { methods } 

    function AddField(name: string): DDN.mscorlib.DNFieldInfo;
    function GetMember(name: string; bindingAttr: DDN.mscorlib.DNBindingFlags): TArray<DDN.mscorlib.DNMemberInfo>;
    procedure SetMemberValue2(name: string; value: DDN.mscorlib.DNObject);
    function ToString: string;
    function GetMembers(bindingAttr: DDN.mscorlib.DNBindingFlags): TArray<DDN.mscorlib.DNMemberInfo>;
    function GetField(name: string; bindingAttr: DDN.mscorlib.DNBindingFlags): DDN.mscorlib.DNFieldInfo;
    function GetMethod(name: string; bindingAttr: DDN.mscorlib.DNBindingFlags): DDN.mscorlib.DNMethodInfo; overload;
    function GetParent: DNScriptObject;
    function GetProperty(name: string; bindingAttr: DDN.mscorlib.DNBindingFlags): DDN.mscorlib.DNPropertyInfo; overload;
    function GetFields(bindingAttr: DDN.mscorlib.DNBindingFlags): TArray<DDN.mscorlib.DNFieldInfo>;
    function GetMethod(name: string; bindingAttr: DDN.mscorlib.DNBindingFlags; binder: DDN.mscorlib.DNBinder; types: TArray<DDN.mscorlib.DNType>; modifiers: TArray<DDN.mscorlib.DNParameterModifier>): DDN.mscorlib.DNMethodInfo; overload;
    function GetMethods(bindingAttr: DDN.mscorlib.DNBindingFlags): TArray<DDN.mscorlib.DNMethodInfo>;
    function GetProperty(name: string; bindingAttr: DDN.mscorlib.DNBindingFlags; binder: DDN.mscorlib.DNBinder; returnType: DDN.mscorlib.DNType; types: TArray<DDN.mscorlib.DNType>; modifiers: TArray<DDN.mscorlib.DNParameterModifier>): DDN.mscorlib.DNPropertyInfo; overload;
    function GetProperties(bindingAttr: DDN.mscorlib.DNBindingFlags): TArray<DDN.mscorlib.DNPropertyInfo>;
    function InvokeMember(name: string; invokeAttr: DDN.mscorlib.DNBindingFlags; binder: DDN.mscorlib.DNBinder; target: DDN.mscorlib.DNObject; args: TArray<DDN.mscorlib.DNObject>; modifiers: TArray<DDN.mscorlib.DNParameterModifier>; locale: DDN.mscorlib.DNCultureInfo; namedParameters: TArray<string>): DDN.mscorlib.DNObject;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    property Item[index: Double]: DDN.mscorlib.DNObject read get_Item write set_Item; default;
    property Item[index: Int32]: DDN.mscorlib.DNObject read get_Item write set_Item; default;
    property Item[name: string]: DDN.mscorlib.DNObject read get_Item write set_Item; default;
    property Item[pars: TArray<DDN.mscorlib.DNObject>]: DDN.mscorlib.DNObject read get_Item write set_Item; default;
    property UnderlyingSystemType: DDN.mscorlib.DNType read get_UnderlyingSystemType;
  end;

  TDNMathObject = class(TDNGenericImport<DNMathObjectClass, DNMathObject>)
  public const
   E = 2.71828182845905;
   LN10 = 2.30258509299405;
   LN2 = 0.693147180559945;
   LOG2E = 1.44269504088896;
   LOG10E = 0.434294481903252;
   PI = 3.14159265358979;
   SQRT1_2 = 0.707106781186548;
   SQRT2 = 1.4142135623731;
  end;

  //-------------namespace: Microsoft.JScript----------------
  DNLenientMathObjectClass = interface(DNMathObjectClass)
  ['{ED303990-F2ED-552B-93FE-C0B703D3AB49}']
  end;

  [DNTypeName('Microsoft.JScript.LenientMathObject')]
  DNLenientMathObject = interface(DNMathObject)
  ['{0A950FA0-325E-3FAA-A01D-62DD701944C4}']
  { getters & setters } 

    function get_Item(index: Double): DDN.mscorlib.DNObject; overload;
    procedure set_Item(index: Double; value: DDN.mscorlib.DNObject); overload;
    function get_Item(index: Int32): DDN.mscorlib.DNObject; overload;
    procedure set_Item(index: Int32; value: DDN.mscorlib.DNObject); overload;
    function get_Item(name: string): DDN.mscorlib.DNObject; overload;
    procedure set_Item(name: string; value: DDN.mscorlib.DNObject); overload;
    function get_Item(pars: TArray<DDN.mscorlib.DNObject>): DDN.mscorlib.DNObject; overload;
    procedure set_Item(pars: TArray<DDN.mscorlib.DNObject>; value: DDN.mscorlib.DNObject); overload;
    function get_UnderlyingSystemType: DDN.mscorlib.DNType;

  { fields getter & setter } 

   function __fakeFieldGet_abs: DDN.mscorlib.DNObject;
   procedure __fakeFieldSet_abs(value: DDN.mscorlib.DNObject);
   function __fakeFieldGet_acos: DDN.mscorlib.DNObject;
   procedure __fakeFieldSet_acos(value: DDN.mscorlib.DNObject);
   function __fakeFieldGet_asin: DDN.mscorlib.DNObject;
   procedure __fakeFieldSet_asin(value: DDN.mscorlib.DNObject);
   function __fakeFieldGet_atan: DDN.mscorlib.DNObject;
   procedure __fakeFieldSet_atan(value: DDN.mscorlib.DNObject);
   function __fakeFieldGet_atan2: DDN.mscorlib.DNObject;
   procedure __fakeFieldSet_atan2(value: DDN.mscorlib.DNObject);
   function __fakeFieldGet_ceil: DDN.mscorlib.DNObject;
   procedure __fakeFieldSet_ceil(value: DDN.mscorlib.DNObject);
   function __fakeFieldGet_cos: DDN.mscorlib.DNObject;
   procedure __fakeFieldSet_cos(value: DDN.mscorlib.DNObject);
   function __fakeFieldGet_exp: DDN.mscorlib.DNObject;
   procedure __fakeFieldSet_exp(value: DDN.mscorlib.DNObject);
   function __fakeFieldGet_floor: DDN.mscorlib.DNObject;
   procedure __fakeFieldSet_floor(value: DDN.mscorlib.DNObject);
   function __fakeFieldGet_log: DDN.mscorlib.DNObject;
   procedure __fakeFieldSet_log(value: DDN.mscorlib.DNObject);
   function __fakeFieldGet_max: DDN.mscorlib.DNObject;
   procedure __fakeFieldSet_max(value: DDN.mscorlib.DNObject);
   function __fakeFieldGet_min: DDN.mscorlib.DNObject;
   procedure __fakeFieldSet_min(value: DDN.mscorlib.DNObject);
   function __fakeFieldGet_pow: DDN.mscorlib.DNObject;
   procedure __fakeFieldSet_pow(value: DDN.mscorlib.DNObject);
   function __fakeFieldGet_random: DDN.mscorlib.DNObject;
   procedure __fakeFieldSet_random(value: DDN.mscorlib.DNObject);
   function __fakeFieldGet_round: DDN.mscorlib.DNObject;
   procedure __fakeFieldSet_round(value: DDN.mscorlib.DNObject);
   function __fakeFieldGet_sin: DDN.mscorlib.DNObject;
   procedure __fakeFieldSet_sin(value: DDN.mscorlib.DNObject);
   function __fakeFieldGet_sqrt: DDN.mscorlib.DNObject;
   procedure __fakeFieldSet_sqrt(value: DDN.mscorlib.DNObject);
   function __fakeFieldGet_tan: DDN.mscorlib.DNObject;
   procedure __fakeFieldSet_tan(value: DDN.mscorlib.DNObject);
   function __fakeFieldGet_engine: DNVsaEngine;
   procedure __fakeFieldSet_engine(value: DNVsaEngine);

  { fields } 

   property abs: DDN.mscorlib.DNObject read __fakeFieldGet_abs write __fakeFieldSet_abs;
   property acos: DDN.mscorlib.DNObject read __fakeFieldGet_acos write __fakeFieldSet_acos;
   property asin: DDN.mscorlib.DNObject read __fakeFieldGet_asin write __fakeFieldSet_asin;
   property atan: DDN.mscorlib.DNObject read __fakeFieldGet_atan write __fakeFieldSet_atan;
   property atan2: DDN.mscorlib.DNObject read __fakeFieldGet_atan2 write __fakeFieldSet_atan2;
   property ceil: DDN.mscorlib.DNObject read __fakeFieldGet_ceil write __fakeFieldSet_ceil;
   property cos: DDN.mscorlib.DNObject read __fakeFieldGet_cos write __fakeFieldSet_cos;
   property exp: DDN.mscorlib.DNObject read __fakeFieldGet_exp write __fakeFieldSet_exp;
   property floor: DDN.mscorlib.DNObject read __fakeFieldGet_floor write __fakeFieldSet_floor;
   property log: DDN.mscorlib.DNObject read __fakeFieldGet_log write __fakeFieldSet_log;
   property max: DDN.mscorlib.DNObject read __fakeFieldGet_max write __fakeFieldSet_max;
   property min: DDN.mscorlib.DNObject read __fakeFieldGet_min write __fakeFieldSet_min;
   property pow: DDN.mscorlib.DNObject read __fakeFieldGet_pow write __fakeFieldSet_pow;
   property random: DDN.mscorlib.DNObject read __fakeFieldGet_random write __fakeFieldSet_random;
   property round: DDN.mscorlib.DNObject read __fakeFieldGet_round write __fakeFieldSet_round;
   property sin: DDN.mscorlib.DNObject read __fakeFieldGet_sin write __fakeFieldSet_sin;
   property sqrt: DDN.mscorlib.DNObject read __fakeFieldGet_sqrt write __fakeFieldSet_sqrt;
   property tan: DDN.mscorlib.DNObject read __fakeFieldGet_tan write __fakeFieldSet_tan;
   property engine: DNVsaEngine read __fakeFieldGet_engine write __fakeFieldSet_engine;

  { methods } 

    function AddField(name: string): DDN.mscorlib.DNFieldInfo;
    function GetMember(name: string; bindingAttr: DDN.mscorlib.DNBindingFlags): TArray<DDN.mscorlib.DNMemberInfo>;
    procedure SetMemberValue2(name: string; value: DDN.mscorlib.DNObject);
    function ToString: string;
    function GetMembers(bindingAttr: DDN.mscorlib.DNBindingFlags): TArray<DDN.mscorlib.DNMemberInfo>;
    function GetField(name: string; bindingAttr: DDN.mscorlib.DNBindingFlags): DDN.mscorlib.DNFieldInfo;
    function GetMethod(name: string; bindingAttr: DDN.mscorlib.DNBindingFlags): DDN.mscorlib.DNMethodInfo; overload;
    function GetParent: DNScriptObject;
    function GetProperty(name: string; bindingAttr: DDN.mscorlib.DNBindingFlags): DDN.mscorlib.DNPropertyInfo; overload;
    function GetFields(bindingAttr: DDN.mscorlib.DNBindingFlags): TArray<DDN.mscorlib.DNFieldInfo>;
    function GetMethod(name: string; bindingAttr: DDN.mscorlib.DNBindingFlags; binder: DDN.mscorlib.DNBinder; types: TArray<DDN.mscorlib.DNType>; modifiers: TArray<DDN.mscorlib.DNParameterModifier>): DDN.mscorlib.DNMethodInfo; overload;
    function GetMethods(bindingAttr: DDN.mscorlib.DNBindingFlags): TArray<DDN.mscorlib.DNMethodInfo>;
    function GetProperty(name: string; bindingAttr: DDN.mscorlib.DNBindingFlags; binder: DDN.mscorlib.DNBinder; returnType: DDN.mscorlib.DNType; types: TArray<DDN.mscorlib.DNType>; modifiers: TArray<DDN.mscorlib.DNParameterModifier>): DDN.mscorlib.DNPropertyInfo; overload;
    function GetProperties(bindingAttr: DDN.mscorlib.DNBindingFlags): TArray<DDN.mscorlib.DNPropertyInfo>;
    function InvokeMember(name: string; invokeAttr: DDN.mscorlib.DNBindingFlags; binder: DDN.mscorlib.DNBinder; target: DDN.mscorlib.DNObject; args: TArray<DDN.mscorlib.DNObject>; modifiers: TArray<DDN.mscorlib.DNParameterModifier>; locale: DDN.mscorlib.DNCultureInfo; namedParameters: TArray<string>): DDN.mscorlib.DNObject;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    property Item[index: Double]: DDN.mscorlib.DNObject read get_Item write set_Item; default;
    property Item[index: Int32]: DDN.mscorlib.DNObject read get_Item write set_Item; default;
    property Item[name: string]: DDN.mscorlib.DNObject read get_Item write set_Item; default;
    property Item[pars: TArray<DDN.mscorlib.DNObject>]: DDN.mscorlib.DNObject read get_Item write set_Item; default;
    property UnderlyingSystemType: DDN.mscorlib.DNType read get_UnderlyingSystemType;
  end;

  TDNLenientMathObject = class(TDNGenericImport<DNLenientMathObjectClass, DNLenientMathObject>)
  public const
   E = 2.71828182845905;
   LN10 = 2.30258509299405;
   LN2 = 0.693147180559945;
   LOG2E = 1.44269504088896;
   LOG10E = 0.434294481903252;
   PI = 3.14159265358979;
   SQRT1_2 = 0.707106781186548;
   SQRT2 = 1.4142135623731;
  end;

  //-------------namespace: Microsoft.JScript----------------
  DNNumberObjectClass = interface(DNJSObjectClass)
  ['{5FA0A73A-3A7E-558A-A12F-421746170A32}']
  end;

  [DNTypeName('Microsoft.JScript.NumberObject')]
  DNNumberObject = interface(DNJSObject)
  ['{165AB683-F8FD-3874-8A2B-7C2A5F3B8724}']
  { getters & setters } 

    function get_Item(index: Double): DDN.mscorlib.DNObject; overload;
    procedure set_Item(index: Double; value: DDN.mscorlib.DNObject); overload;
    function get_Item(index: Int32): DDN.mscorlib.DNObject; overload;
    procedure set_Item(index: Int32; value: DDN.mscorlib.DNObject); overload;
    function get_Item(name: string): DDN.mscorlib.DNObject; overload;
    procedure set_Item(name: string; value: DDN.mscorlib.DNObject); overload;
    function get_Item(pars: TArray<DDN.mscorlib.DNObject>): DDN.mscorlib.DNObject; overload;
    procedure set_Item(pars: TArray<DDN.mscorlib.DNObject>; value: DDN.mscorlib.DNObject); overload;
    function get_UnderlyingSystemType: DDN.mscorlib.DNType;

  { fields getter & setter } 

   function __fakeFieldGet_engine: DNVsaEngine;
   procedure __fakeFieldSet_engine(value: DNVsaEngine);

  { fields } 

   property engine: DNVsaEngine read __fakeFieldGet_engine write __fakeFieldSet_engine;

  { methods } 

    function GetType: DDN.mscorlib.DNType;
    function AddField(name: string): DDN.mscorlib.DNFieldInfo;
    function GetMember(name: string; bindingAttr: DDN.mscorlib.DNBindingFlags): TArray<DDN.mscorlib.DNMemberInfo>;
    procedure SetMemberValue2(name: string; value: DDN.mscorlib.DNObject);
    function ToString: string;
    function GetMembers(bindingAttr: DDN.mscorlib.DNBindingFlags): TArray<DDN.mscorlib.DNMemberInfo>;
    function GetField(name: string; bindingAttr: DDN.mscorlib.DNBindingFlags): DDN.mscorlib.DNFieldInfo;
    function GetMethod(name: string; bindingAttr: DDN.mscorlib.DNBindingFlags): DDN.mscorlib.DNMethodInfo; overload;
    function GetParent: DNScriptObject;
    function GetProperty(name: string; bindingAttr: DDN.mscorlib.DNBindingFlags): DDN.mscorlib.DNPropertyInfo; overload;
    function GetFields(bindingAttr: DDN.mscorlib.DNBindingFlags): TArray<DDN.mscorlib.DNFieldInfo>;
    function GetMethod(name: string; bindingAttr: DDN.mscorlib.DNBindingFlags; binder: DDN.mscorlib.DNBinder; types: TArray<DDN.mscorlib.DNType>; modifiers: TArray<DDN.mscorlib.DNParameterModifier>): DDN.mscorlib.DNMethodInfo; overload;
    function GetMethods(bindingAttr: DDN.mscorlib.DNBindingFlags): TArray<DDN.mscorlib.DNMethodInfo>;
    function GetProperty(name: string; bindingAttr: DDN.mscorlib.DNBindingFlags; binder: DDN.mscorlib.DNBinder; returnType: DDN.mscorlib.DNType; types: TArray<DDN.mscorlib.DNType>; modifiers: TArray<DDN.mscorlib.DNParameterModifier>): DDN.mscorlib.DNPropertyInfo; overload;
    function GetProperties(bindingAttr: DDN.mscorlib.DNBindingFlags): TArray<DDN.mscorlib.DNPropertyInfo>;
    function InvokeMember(name: string; invokeAttr: DDN.mscorlib.DNBindingFlags; binder: DDN.mscorlib.DNBinder; target: DDN.mscorlib.DNObject; args: TArray<DDN.mscorlib.DNObject>; modifiers: TArray<DDN.mscorlib.DNParameterModifier>; locale: DDN.mscorlib.DNCultureInfo; namedParameters: TArray<string>): DDN.mscorlib.DNObject;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;

  { propertys } 

    property Item[index: Double]: DDN.mscorlib.DNObject read get_Item write set_Item; default;
    property Item[index: Int32]: DDN.mscorlib.DNObject read get_Item write set_Item; default;
    property Item[name: string]: DDN.mscorlib.DNObject read get_Item write set_Item; default;
    property Item[pars: TArray<DDN.mscorlib.DNObject>]: DDN.mscorlib.DNObject read get_Item write set_Item; default;
    property UnderlyingSystemType: DDN.mscorlib.DNType read get_UnderlyingSystemType;
  end;

  TDNNumberObject = class(TDNGenericImport<DNNumberObjectClass, DNNumberObject>) end;

  //-------------namespace: Microsoft.JScript----------------
  DNNumberPrototypeClass = interface(DNNumberObjectClass)
  ['{4DF0F31D-4E48-519F-BC9C-41A3395137E2}']
  { static getter & setter } 

    {class} function get_constructor: DNNumberConstructor;

  { static methods } 

    {class} function toLocaleString(thisob: DDN.mscorlib.DNObject): string;
    {class} function toString(thisob: DDN.mscorlib.DNObject; radix: DDN.mscorlib.DNObject): string; overload;
    {class} function valueOf(thisob: DDN.mscorlib.DNObject): DDN.mscorlib.DNObject;
    {class} function toExponential(thisob: DDN.mscorlib.DNObject; fractionDigits: DDN.mscorlib.DNObject): string;
    {class} function toFixed(thisob: DDN.mscorlib.DNObject; fractionDigits: Double): string;
    {class} function toPrecision(thisob: DDN.mscorlib.DNObject; precision: DDN.mscorlib.DNObject): string;

  { static propertys } 

    {class} property &constructor: DNNumberConstructor read get_constructor;
  end;

  [DNTypeName('Microsoft.JScript.NumberPrototype')]
  DNNumberPrototype = interface(DNNumberObject)
  ['{F711FD19-773C-3A6F-B33B-93C69F066D20}']
  { getters & setters } 

    function get_Item(index: Double): DDN.mscorlib.DNObject; overload;
    procedure set_Item(index: Double; value: DDN.mscorlib.DNObject); overload;
    function get_Item(index: Int32): DDN.mscorlib.DNObject; overload;
    procedure set_Item(index: Int32; value: DDN.mscorlib.DNObject); overload;
    function get_Item(name: string): DDN.mscorlib.DNObject; overload;
    procedure set_Item(name: string; value: DDN.mscorlib.DNObject); overload;
    function get_Item(pars: TArray<DDN.mscorlib.DNObject>): DDN.mscorlib.DNObject; overload;
    procedure set_Item(pars: TArray<DDN.mscorlib.DNObject>; value: DDN.mscorlib.DNObject); overload;
    function get_UnderlyingSystemType: DDN.mscorlib.DNType;

  { fields getter & setter } 

   function __fakeFieldGet_engine: DNVsaEngine;
   procedure __fakeFieldSet_engine(value: DNVsaEngine);

  { fields } 

   property engine: DNVsaEngine read __fakeFieldGet_engine write __fakeFieldSet_engine;

  { methods } 

    function GetType: DDN.mscorlib.DNType;
    function AddField(name: string): DDN.mscorlib.DNFieldInfo;
    function GetMember(name: string; bindingAttr: DDN.mscorlib.DNBindingFlags): TArray<DDN.mscorlib.DNMemberInfo>;
    procedure SetMemberValue2(name: string; value: DDN.mscorlib.DNObject);
    function ToString: string; overload;
    function GetMembers(bindingAttr: DDN.mscorlib.DNBindingFlags): TArray<DDN.mscorlib.DNMemberInfo>;
    function GetField(name: string; bindingAttr: DDN.mscorlib.DNBindingFlags): DDN.mscorlib.DNFieldInfo;
    function GetMethod(name: string; bindingAttr: DDN.mscorlib.DNBindingFlags): DDN.mscorlib.DNMethodInfo; overload;
    function GetParent: DNScriptObject;
    function GetProperty(name: string; bindingAttr: DDN.mscorlib.DNBindingFlags): DDN.mscorlib.DNPropertyInfo; overload;
    function GetFields(bindingAttr: DDN.mscorlib.DNBindingFlags): TArray<DDN.mscorlib.DNFieldInfo>;
    function GetMethod(name: string; bindingAttr: DDN.mscorlib.DNBindingFlags; binder: DDN.mscorlib.DNBinder; types: TArray<DDN.mscorlib.DNType>; modifiers: TArray<DDN.mscorlib.DNParameterModifier>): DDN.mscorlib.DNMethodInfo; overload;
    function GetMethods(bindingAttr: DDN.mscorlib.DNBindingFlags): TArray<DDN.mscorlib.DNMethodInfo>;
    function GetProperty(name: string; bindingAttr: DDN.mscorlib.DNBindingFlags; binder: DDN.mscorlib.DNBinder; returnType: DDN.mscorlib.DNType; types: TArray<DDN.mscorlib.DNType>; modifiers: TArray<DDN.mscorlib.DNParameterModifier>): DDN.mscorlib.DNPropertyInfo; overload;
    function GetProperties(bindingAttr: DDN.mscorlib.DNBindingFlags): TArray<DDN.mscorlib.DNPropertyInfo>;
    function InvokeMember(name: string; invokeAttr: DDN.mscorlib.DNBindingFlags; binder: DDN.mscorlib.DNBinder; target: DDN.mscorlib.DNObject; args: TArray<DDN.mscorlib.DNObject>; modifiers: TArray<DDN.mscorlib.DNParameterModifier>; locale: DDN.mscorlib.DNCultureInfo; namedParameters: TArray<string>): DDN.mscorlib.DNObject;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;

  { propertys } 

    property Item[index: Double]: DDN.mscorlib.DNObject read get_Item write set_Item; default;
    property Item[index: Int32]: DDN.mscorlib.DNObject read get_Item write set_Item; default;
    property Item[name: string]: DDN.mscorlib.DNObject read get_Item write set_Item; default;
    property Item[pars: TArray<DDN.mscorlib.DNObject>]: DDN.mscorlib.DNObject read get_Item write set_Item; default;
    property UnderlyingSystemType: DDN.mscorlib.DNType read get_UnderlyingSystemType;
  end;

  TDNNumberPrototype = class(TDNGenericImport<DNNumberPrototypeClass, DNNumberPrototype>) end;

  //-------------namespace: Microsoft.JScript----------------
  DNLenientNumberPrototypeClass = interface(DNNumberPrototypeClass)
  ['{8CC94572-2245-5009-8447-867C205B2E42}']
  end;

  [DNTypeName('Microsoft.JScript.LenientNumberPrototype')]
  DNLenientNumberPrototype = interface(DNNumberPrototype)
  ['{407A2180-F031-3756-8E9B-EED643B7520D}']
  { getters & setters } 

    function get_Item(index: Double): DDN.mscorlib.DNObject; overload;
    procedure set_Item(index: Double; value: DDN.mscorlib.DNObject); overload;
    function get_Item(index: Int32): DDN.mscorlib.DNObject; overload;
    procedure set_Item(index: Int32; value: DDN.mscorlib.DNObject); overload;
    function get_Item(name: string): DDN.mscorlib.DNObject; overload;
    procedure set_Item(name: string; value: DDN.mscorlib.DNObject); overload;
    function get_Item(pars: TArray<DDN.mscorlib.DNObject>): DDN.mscorlib.DNObject; overload;
    procedure set_Item(pars: TArray<DDN.mscorlib.DNObject>; value: DDN.mscorlib.DNObject); overload;
    function get_UnderlyingSystemType: DDN.mscorlib.DNType;

  { fields getter & setter } 

   function __fakeFieldGet_constructor: DDN.mscorlib.DNObject;
   procedure __fakeFieldSet_constructor(value: DDN.mscorlib.DNObject);
   function __fakeFieldGet_toExponential: DDN.mscorlib.DNObject;
   procedure __fakeFieldSet_toExponential(value: DDN.mscorlib.DNObject);
   function __fakeFieldGet_toFixed: DDN.mscorlib.DNObject;
   procedure __fakeFieldSet_toFixed(value: DDN.mscorlib.DNObject);
   function __fakeFieldGet_toLocaleString: DDN.mscorlib.DNObject;
   procedure __fakeFieldSet_toLocaleString(value: DDN.mscorlib.DNObject);
   function __fakeFieldGet_toPrecision: DDN.mscorlib.DNObject;
   procedure __fakeFieldSet_toPrecision(value: DDN.mscorlib.DNObject);
   function __fakeFieldGet_toString: DDN.mscorlib.DNObject;
   procedure __fakeFieldSet_toString(value: DDN.mscorlib.DNObject);
   function __fakeFieldGet_valueOf: DDN.mscorlib.DNObject;
   procedure __fakeFieldSet_valueOf(value: DDN.mscorlib.DNObject);
   function __fakeFieldGet_engine: DNVsaEngine;
   procedure __fakeFieldSet_engine(value: DNVsaEngine);

  { fields } 

   property &constructor: DDN.mscorlib.DNObject read __fakeFieldGet_constructor write __fakeFieldSet_constructor;
   property toExponential: DDN.mscorlib.DNObject read __fakeFieldGet_toExponential write __fakeFieldSet_toExponential;
   property toFixed: DDN.mscorlib.DNObject read __fakeFieldGet_toFixed write __fakeFieldSet_toFixed;
   property toLocaleString: DDN.mscorlib.DNObject read __fakeFieldGet_toLocaleString write __fakeFieldSet_toLocaleString;
   property toPrecision: DDN.mscorlib.DNObject read __fakeFieldGet_toPrecision write __fakeFieldSet_toPrecision;
   property toString_: DDN.mscorlib.DNObject read __fakeFieldGet_toString write __fakeFieldSet_toString;
   property valueOf: DDN.mscorlib.DNObject read __fakeFieldGet_valueOf write __fakeFieldSet_valueOf;
   property engine: DNVsaEngine read __fakeFieldGet_engine write __fakeFieldSet_engine;

  { methods } 

    function GetType: DDN.mscorlib.DNType;
    function AddField(name: string): DDN.mscorlib.DNFieldInfo;
    function GetMember(name: string; bindingAttr: DDN.mscorlib.DNBindingFlags): TArray<DDN.mscorlib.DNMemberInfo>;
    procedure SetMemberValue2(name: string; value: DDN.mscorlib.DNObject);
    function ToString: string;
    function GetMembers(bindingAttr: DDN.mscorlib.DNBindingFlags): TArray<DDN.mscorlib.DNMemberInfo>;
    function GetField(name: string; bindingAttr: DDN.mscorlib.DNBindingFlags): DDN.mscorlib.DNFieldInfo;
    function GetMethod(name: string; bindingAttr: DDN.mscorlib.DNBindingFlags): DDN.mscorlib.DNMethodInfo; overload;
    function GetParent: DNScriptObject;
    function GetProperty(name: string; bindingAttr: DDN.mscorlib.DNBindingFlags): DDN.mscorlib.DNPropertyInfo; overload;
    function GetFields(bindingAttr: DDN.mscorlib.DNBindingFlags): TArray<DDN.mscorlib.DNFieldInfo>;
    function GetMethod(name: string; bindingAttr: DDN.mscorlib.DNBindingFlags; binder: DDN.mscorlib.DNBinder; types: TArray<DDN.mscorlib.DNType>; modifiers: TArray<DDN.mscorlib.DNParameterModifier>): DDN.mscorlib.DNMethodInfo; overload;
    function GetMethods(bindingAttr: DDN.mscorlib.DNBindingFlags): TArray<DDN.mscorlib.DNMethodInfo>;
    function GetProperty(name: string; bindingAttr: DDN.mscorlib.DNBindingFlags; binder: DDN.mscorlib.DNBinder; returnType: DDN.mscorlib.DNType; types: TArray<DDN.mscorlib.DNType>; modifiers: TArray<DDN.mscorlib.DNParameterModifier>): DDN.mscorlib.DNPropertyInfo; overload;
    function GetProperties(bindingAttr: DDN.mscorlib.DNBindingFlags): TArray<DDN.mscorlib.DNPropertyInfo>;
    function InvokeMember(name: string; invokeAttr: DDN.mscorlib.DNBindingFlags; binder: DDN.mscorlib.DNBinder; target: DDN.mscorlib.DNObject; args: TArray<DDN.mscorlib.DNObject>; modifiers: TArray<DDN.mscorlib.DNParameterModifier>; locale: DDN.mscorlib.DNCultureInfo; namedParameters: TArray<string>): DDN.mscorlib.DNObject;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;

  { propertys } 

    property Item[index: Double]: DDN.mscorlib.DNObject read get_Item write set_Item; default;
    property Item[index: Int32]: DDN.mscorlib.DNObject read get_Item write set_Item; default;
    property Item[name: string]: DDN.mscorlib.DNObject read get_Item write set_Item; default;
    property Item[pars: TArray<DDN.mscorlib.DNObject>]: DDN.mscorlib.DNObject read get_Item write set_Item; default;
    property UnderlyingSystemType: DDN.mscorlib.DNType read get_UnderlyingSystemType;
  end;

  TDNLenientNumberPrototype = class(TDNGenericImport<DNLenientNumberPrototypeClass, DNLenientNumberPrototype>) end;

  //-------------namespace: Microsoft.JScript----------------
  DNObjectPrototypeClass = interface(DNJSObjectClass)
  ['{8310404D-E335-502A-9E28-B69878B1C583}']
  { static getter & setter } 

    {class} function get_constructor: DNObjectConstructor;

  { static methods } 

    {class} function hasOwnProperty(thisob: DDN.mscorlib.DNObject; name: DDN.mscorlib.DNObject): Boolean;
    {class} function isPrototypeOf(thisob: DDN.mscorlib.DNObject; ob: DDN.mscorlib.DNObject): Boolean;
    {class} function propertyIsEnumerable(thisob: DDN.mscorlib.DNObject; name: DDN.mscorlib.DNObject): Boolean;
    {class} function toLocaleString(thisob: DDN.mscorlib.DNObject): string;
    {class} function valueOf(thisob: DDN.mscorlib.DNObject): DDN.mscorlib.DNObject;
    {class} function toString(thisob: DDN.mscorlib.DNObject): string; overload;

  { static propertys } 

    {class} property &constructor: DNObjectConstructor read get_constructor;
  end;

  [DNTypeName('Microsoft.JScript.ObjectPrototype')]
  DNObjectPrototype = interface(DNJSObject)
  ['{E864DDDB-A582-3EAD-95C1-9FCBC4AE35A5}']
  { getters & setters } 

    function get_Item(index: Double): DDN.mscorlib.DNObject; overload;
    procedure set_Item(index: Double; value: DDN.mscorlib.DNObject); overload;
    function get_Item(index: Int32): DDN.mscorlib.DNObject; overload;
    procedure set_Item(index: Int32; value: DDN.mscorlib.DNObject); overload;
    function get_Item(name: string): DDN.mscorlib.DNObject; overload;
    procedure set_Item(name: string; value: DDN.mscorlib.DNObject); overload;
    function get_Item(pars: TArray<DDN.mscorlib.DNObject>): DDN.mscorlib.DNObject; overload;
    procedure set_Item(pars: TArray<DDN.mscorlib.DNObject>; value: DDN.mscorlib.DNObject); overload;
    function get_UnderlyingSystemType: DDN.mscorlib.DNType;

  { fields getter & setter } 

   function __fakeFieldGet_engine: DNVsaEngine;
   procedure __fakeFieldSet_engine(value: DNVsaEngine);

  { fields } 

   property engine: DNVsaEngine read __fakeFieldGet_engine write __fakeFieldSet_engine;

  { methods } 

    function AddField(name: string): DDN.mscorlib.DNFieldInfo;
    function GetMember(name: string; bindingAttr: DDN.mscorlib.DNBindingFlags): TArray<DDN.mscorlib.DNMemberInfo>;
    procedure SetMemberValue2(name: string; value: DDN.mscorlib.DNObject);
    function ToString: string; overload;
    function GetMembers(bindingAttr: DDN.mscorlib.DNBindingFlags): TArray<DDN.mscorlib.DNMemberInfo>;
    function GetField(name: string; bindingAttr: DDN.mscorlib.DNBindingFlags): DDN.mscorlib.DNFieldInfo;
    function GetMethod(name: string; bindingAttr: DDN.mscorlib.DNBindingFlags): DDN.mscorlib.DNMethodInfo; overload;
    function GetParent: DNScriptObject;
    function GetProperty(name: string; bindingAttr: DDN.mscorlib.DNBindingFlags): DDN.mscorlib.DNPropertyInfo; overload;
    function GetFields(bindingAttr: DDN.mscorlib.DNBindingFlags): TArray<DDN.mscorlib.DNFieldInfo>;
    function GetMethod(name: string; bindingAttr: DDN.mscorlib.DNBindingFlags; binder: DDN.mscorlib.DNBinder; types: TArray<DDN.mscorlib.DNType>; modifiers: TArray<DDN.mscorlib.DNParameterModifier>): DDN.mscorlib.DNMethodInfo; overload;
    function GetMethods(bindingAttr: DDN.mscorlib.DNBindingFlags): TArray<DDN.mscorlib.DNMethodInfo>;
    function GetProperty(name: string; bindingAttr: DDN.mscorlib.DNBindingFlags; binder: DDN.mscorlib.DNBinder; returnType: DDN.mscorlib.DNType; types: TArray<DDN.mscorlib.DNType>; modifiers: TArray<DDN.mscorlib.DNParameterModifier>): DDN.mscorlib.DNPropertyInfo; overload;
    function GetProperties(bindingAttr: DDN.mscorlib.DNBindingFlags): TArray<DDN.mscorlib.DNPropertyInfo>;
    function InvokeMember(name: string; invokeAttr: DDN.mscorlib.DNBindingFlags; binder: DDN.mscorlib.DNBinder; target: DDN.mscorlib.DNObject; args: TArray<DDN.mscorlib.DNObject>; modifiers: TArray<DDN.mscorlib.DNParameterModifier>; locale: DDN.mscorlib.DNCultureInfo; namedParameters: TArray<string>): DDN.mscorlib.DNObject;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    property Item[index: Double]: DDN.mscorlib.DNObject read get_Item write set_Item; default;
    property Item[index: Int32]: DDN.mscorlib.DNObject read get_Item write set_Item; default;
    property Item[name: string]: DDN.mscorlib.DNObject read get_Item write set_Item; default;
    property Item[pars: TArray<DDN.mscorlib.DNObject>]: DDN.mscorlib.DNObject read get_Item write set_Item; default;
    property UnderlyingSystemType: DDN.mscorlib.DNType read get_UnderlyingSystemType;
  end;

  TDNObjectPrototype = class(TDNGenericImport<DNObjectPrototypeClass, DNObjectPrototype>) end;

  //-------------namespace: Microsoft.JScript----------------
  DNLenientObjectPrototypeClass = interface(DNObjectPrototypeClass)
  ['{D95D1D50-9D57-5450-88AB-F69C4938C6E1}']
  end;

  [DNTypeName('Microsoft.JScript.LenientObjectPrototype')]
  DNLenientObjectPrototype = interface(DNObjectPrototype)
  ['{F0CBDD7A-A152-369A-8F1C-E93B0A653858}']
  { getters & setters } 

    function get_Item(index: Double): DDN.mscorlib.DNObject; overload;
    procedure set_Item(index: Double; value: DDN.mscorlib.DNObject); overload;
    function get_Item(index: Int32): DDN.mscorlib.DNObject; overload;
    procedure set_Item(index: Int32; value: DDN.mscorlib.DNObject); overload;
    function get_Item(name: string): DDN.mscorlib.DNObject; overload;
    procedure set_Item(name: string; value: DDN.mscorlib.DNObject); overload;
    function get_Item(pars: TArray<DDN.mscorlib.DNObject>): DDN.mscorlib.DNObject; overload;
    procedure set_Item(pars: TArray<DDN.mscorlib.DNObject>; value: DDN.mscorlib.DNObject); overload;
    function get_UnderlyingSystemType: DDN.mscorlib.DNType;

  { fields getter & setter } 

   function __fakeFieldGet_constructor: DDN.mscorlib.DNObject;
   procedure __fakeFieldSet_constructor(value: DDN.mscorlib.DNObject);
   function __fakeFieldGet_hasOwnProperty: DDN.mscorlib.DNObject;
   procedure __fakeFieldSet_hasOwnProperty(value: DDN.mscorlib.DNObject);
   function __fakeFieldGet_isPrototypeOf: DDN.mscorlib.DNObject;
   procedure __fakeFieldSet_isPrototypeOf(value: DDN.mscorlib.DNObject);
   function __fakeFieldGet_propertyIsEnumerable: DDN.mscorlib.DNObject;
   procedure __fakeFieldSet_propertyIsEnumerable(value: DDN.mscorlib.DNObject);
   function __fakeFieldGet_toLocaleString: DDN.mscorlib.DNObject;
   procedure __fakeFieldSet_toLocaleString(value: DDN.mscorlib.DNObject);
   function __fakeFieldGet_toString: DDN.mscorlib.DNObject;
   procedure __fakeFieldSet_toString(value: DDN.mscorlib.DNObject);
   function __fakeFieldGet_valueOf: DDN.mscorlib.DNObject;
   procedure __fakeFieldSet_valueOf(value: DDN.mscorlib.DNObject);
   function __fakeFieldGet_engine: DNVsaEngine;
   procedure __fakeFieldSet_engine(value: DNVsaEngine);

  { fields } 

   property &constructor: DDN.mscorlib.DNObject read __fakeFieldGet_constructor write __fakeFieldSet_constructor;
   property hasOwnProperty: DDN.mscorlib.DNObject read __fakeFieldGet_hasOwnProperty write __fakeFieldSet_hasOwnProperty;
   property isPrototypeOf: DDN.mscorlib.DNObject read __fakeFieldGet_isPrototypeOf write __fakeFieldSet_isPrototypeOf;
   property propertyIsEnumerable: DDN.mscorlib.DNObject read __fakeFieldGet_propertyIsEnumerable write __fakeFieldSet_propertyIsEnumerable;
   property toLocaleString: DDN.mscorlib.DNObject read __fakeFieldGet_toLocaleString write __fakeFieldSet_toLocaleString;
   property toString_: DDN.mscorlib.DNObject read __fakeFieldGet_toString write __fakeFieldSet_toString;
   property valueOf: DDN.mscorlib.DNObject read __fakeFieldGet_valueOf write __fakeFieldSet_valueOf;
   property engine: DNVsaEngine read __fakeFieldGet_engine write __fakeFieldSet_engine;

  { methods } 

    function AddField(name: string): DDN.mscorlib.DNFieldInfo;
    function GetMember(name: string; bindingAttr: DDN.mscorlib.DNBindingFlags): TArray<DDN.mscorlib.DNMemberInfo>;
    procedure SetMemberValue2(name: string; value: DDN.mscorlib.DNObject);
    function ToString: string;
    function GetMembers(bindingAttr: DDN.mscorlib.DNBindingFlags): TArray<DDN.mscorlib.DNMemberInfo>;
    function GetField(name: string; bindingAttr: DDN.mscorlib.DNBindingFlags): DDN.mscorlib.DNFieldInfo;
    function GetMethod(name: string; bindingAttr: DDN.mscorlib.DNBindingFlags): DDN.mscorlib.DNMethodInfo; overload;
    function GetParent: DNScriptObject;
    function GetProperty(name: string; bindingAttr: DDN.mscorlib.DNBindingFlags): DDN.mscorlib.DNPropertyInfo; overload;
    function GetFields(bindingAttr: DDN.mscorlib.DNBindingFlags): TArray<DDN.mscorlib.DNFieldInfo>;
    function GetMethod(name: string; bindingAttr: DDN.mscorlib.DNBindingFlags; binder: DDN.mscorlib.DNBinder; types: TArray<DDN.mscorlib.DNType>; modifiers: TArray<DDN.mscorlib.DNParameterModifier>): DDN.mscorlib.DNMethodInfo; overload;
    function GetMethods(bindingAttr: DDN.mscorlib.DNBindingFlags): TArray<DDN.mscorlib.DNMethodInfo>;
    function GetProperty(name: string; bindingAttr: DDN.mscorlib.DNBindingFlags; binder: DDN.mscorlib.DNBinder; returnType: DDN.mscorlib.DNType; types: TArray<DDN.mscorlib.DNType>; modifiers: TArray<DDN.mscorlib.DNParameterModifier>): DDN.mscorlib.DNPropertyInfo; overload;
    function GetProperties(bindingAttr: DDN.mscorlib.DNBindingFlags): TArray<DDN.mscorlib.DNPropertyInfo>;
    function InvokeMember(name: string; invokeAttr: DDN.mscorlib.DNBindingFlags; binder: DDN.mscorlib.DNBinder; target: DDN.mscorlib.DNObject; args: TArray<DDN.mscorlib.DNObject>; modifiers: TArray<DDN.mscorlib.DNParameterModifier>; locale: DDN.mscorlib.DNCultureInfo; namedParameters: TArray<string>): DDN.mscorlib.DNObject;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    property Item[index: Double]: DDN.mscorlib.DNObject read get_Item write set_Item; default;
    property Item[index: Int32]: DDN.mscorlib.DNObject read get_Item write set_Item; default;
    property Item[name: string]: DDN.mscorlib.DNObject read get_Item write set_Item; default;
    property Item[pars: TArray<DDN.mscorlib.DNObject>]: DDN.mscorlib.DNObject read get_Item write set_Item; default;
    property UnderlyingSystemType: DDN.mscorlib.DNType read get_UnderlyingSystemType;
  end;

  TDNLenientObjectPrototype = class(TDNGenericImport<DNLenientObjectPrototypeClass, DNLenientObjectPrototype>) end;

  //-------------namespace: Microsoft.JScript----------------
  DNRegExpObjectClass = interface(DNJSObjectClass)
  ['{78726095-3069-524C-B2EA-59472F5BF66A}']
  end;

  [DNTypeName('Microsoft.JScript.RegExpObject')]
  DNRegExpObject = interface(DNJSObject)
  ['{7508BD7C-F92D-3F4A-8566-436CA1500FBC}']
  { getters & setters } 

    function get_source: string;
    function get_ignoreCase: Boolean;
    function get_global: Boolean;
    function get_multiline: Boolean;
    function get_lastIndex: DDN.mscorlib.DNObject;
    procedure set_lastIndex(value: DDN.mscorlib.DNObject);
    function get_Item(index: Double): DDN.mscorlib.DNObject; overload;
    procedure set_Item(index: Double; value: DDN.mscorlib.DNObject); overload;
    function get_Item(index: Int32): DDN.mscorlib.DNObject; overload;
    procedure set_Item(index: Int32; value: DDN.mscorlib.DNObject); overload;
    function get_Item(name: string): DDN.mscorlib.DNObject; overload;
    procedure set_Item(name: string; value: DDN.mscorlib.DNObject); overload;
    function get_Item(pars: TArray<DDN.mscorlib.DNObject>): DDN.mscorlib.DNObject; overload;
    procedure set_Item(pars: TArray<DDN.mscorlib.DNObject>; value: DDN.mscorlib.DNObject); overload;
    function get_UnderlyingSystemType: DDN.mscorlib.DNType;

  { fields getter & setter } 

   function __fakeFieldGet_engine: DNVsaEngine;
   procedure __fakeFieldSet_engine(value: DNVsaEngine);

  { fields } 

   property engine: DNVsaEngine read __fakeFieldGet_engine write __fakeFieldSet_engine;

  { methods } 

    function ToString: string;
    function AddField(name: string): DDN.mscorlib.DNFieldInfo;
    function GetMember(name: string; bindingAttr: DDN.mscorlib.DNBindingFlags): TArray<DDN.mscorlib.DNMemberInfo>;
    procedure SetMemberValue2(name: string; value: DDN.mscorlib.DNObject);
    function GetMembers(bindingAttr: DDN.mscorlib.DNBindingFlags): TArray<DDN.mscorlib.DNMemberInfo>;
    function GetField(name: string; bindingAttr: DDN.mscorlib.DNBindingFlags): DDN.mscorlib.DNFieldInfo;
    function GetMethod(name: string; bindingAttr: DDN.mscorlib.DNBindingFlags): DDN.mscorlib.DNMethodInfo; overload;
    function GetParent: DNScriptObject;
    function GetProperty(name: string; bindingAttr: DDN.mscorlib.DNBindingFlags): DDN.mscorlib.DNPropertyInfo; overload;
    function GetFields(bindingAttr: DDN.mscorlib.DNBindingFlags): TArray<DDN.mscorlib.DNFieldInfo>;
    function GetMethod(name: string; bindingAttr: DDN.mscorlib.DNBindingFlags; binder: DDN.mscorlib.DNBinder; types: TArray<DDN.mscorlib.DNType>; modifiers: TArray<DDN.mscorlib.DNParameterModifier>): DDN.mscorlib.DNMethodInfo; overload;
    function GetMethods(bindingAttr: DDN.mscorlib.DNBindingFlags): TArray<DDN.mscorlib.DNMethodInfo>;
    function GetProperty(name: string; bindingAttr: DDN.mscorlib.DNBindingFlags; binder: DDN.mscorlib.DNBinder; returnType: DDN.mscorlib.DNType; types: TArray<DDN.mscorlib.DNType>; modifiers: TArray<DDN.mscorlib.DNParameterModifier>): DDN.mscorlib.DNPropertyInfo; overload;
    function GetProperties(bindingAttr: DDN.mscorlib.DNBindingFlags): TArray<DDN.mscorlib.DNPropertyInfo>;
    function InvokeMember(name: string; invokeAttr: DDN.mscorlib.DNBindingFlags; binder: DDN.mscorlib.DNBinder; target: DDN.mscorlib.DNObject; args: TArray<DDN.mscorlib.DNObject>; modifiers: TArray<DDN.mscorlib.DNParameterModifier>; locale: DDN.mscorlib.DNCultureInfo; namedParameters: TArray<string>): DDN.mscorlib.DNObject;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    property source: string read get_source;
    property ignoreCase: Boolean read get_ignoreCase;
    property global: Boolean read get_global;
    property multiline: Boolean read get_multiline;
    property lastIndex: DDN.mscorlib.DNObject read get_lastIndex write set_lastIndex;
    property Item[index: Double]: DDN.mscorlib.DNObject read get_Item write set_Item; default;
    property Item[index: Int32]: DDN.mscorlib.DNObject read get_Item write set_Item; default;
    property Item[name: string]: DDN.mscorlib.DNObject read get_Item write set_Item; default;
    property Item[pars: TArray<DDN.mscorlib.DNObject>]: DDN.mscorlib.DNObject read get_Item write set_Item; default;
    property UnderlyingSystemType: DDN.mscorlib.DNType read get_UnderlyingSystemType;
  end;

  TDNRegExpObject = class(TDNGenericImport<DNRegExpObjectClass, DNRegExpObject>) end;

  //-------------namespace: Microsoft.JScript----------------
  DNRegExpPrototypeClass = interface(DNJSObjectClass)
  ['{51174A10-D76C-5384-8D24-4893E3095D11}']
  { static getter & setter } 

    {class} function get_constructor: DNRegExpConstructor;

  { static methods } 

    {class} function compile(thisob: DDN.mscorlib.DNObject; source: DDN.mscorlib.DNObject; flags: DDN.mscorlib.DNObject): DNRegExpObject;
    {class} function exec(thisob: DDN.mscorlib.DNObject; input: DDN.mscorlib.DNObject): DDN.mscorlib.DNObject;
    {class} function test(thisob: DDN.mscorlib.DNObject; input: DDN.mscorlib.DNObject): Boolean;
    {class} function toString(thisob: DDN.mscorlib.DNObject): string; overload;

  { static propertys } 

    {class} property &constructor: DNRegExpConstructor read get_constructor;
  end;

  [DNTypeName('Microsoft.JScript.RegExpPrototype')]
  DNRegExpPrototype = interface(DNJSObject)
  ['{863EB8B2-CE50-38E7-9EC6-215A6B8CD1DE}']
  { getters & setters } 

    function get_Item(index: Double): DDN.mscorlib.DNObject; overload;
    procedure set_Item(index: Double; value: DDN.mscorlib.DNObject); overload;
    function get_Item(index: Int32): DDN.mscorlib.DNObject; overload;
    procedure set_Item(index: Int32; value: DDN.mscorlib.DNObject); overload;
    function get_Item(name: string): DDN.mscorlib.DNObject; overload;
    procedure set_Item(name: string; value: DDN.mscorlib.DNObject); overload;
    function get_Item(pars: TArray<DDN.mscorlib.DNObject>): DDN.mscorlib.DNObject; overload;
    procedure set_Item(pars: TArray<DDN.mscorlib.DNObject>; value: DDN.mscorlib.DNObject); overload;
    function get_UnderlyingSystemType: DDN.mscorlib.DNType;

  { fields getter & setter } 

   function __fakeFieldGet_engine: DNVsaEngine;
   procedure __fakeFieldSet_engine(value: DNVsaEngine);

  { fields } 

   property engine: DNVsaEngine read __fakeFieldGet_engine write __fakeFieldSet_engine;

  { methods } 

    function AddField(name: string): DDN.mscorlib.DNFieldInfo;
    function GetMember(name: string; bindingAttr: DDN.mscorlib.DNBindingFlags): TArray<DDN.mscorlib.DNMemberInfo>;
    procedure SetMemberValue2(name: string; value: DDN.mscorlib.DNObject);
    function ToString: string; overload;
    function GetMembers(bindingAttr: DDN.mscorlib.DNBindingFlags): TArray<DDN.mscorlib.DNMemberInfo>;
    function GetField(name: string; bindingAttr: DDN.mscorlib.DNBindingFlags): DDN.mscorlib.DNFieldInfo;
    function GetMethod(name: string; bindingAttr: DDN.mscorlib.DNBindingFlags): DDN.mscorlib.DNMethodInfo; overload;
    function GetParent: DNScriptObject;
    function GetProperty(name: string; bindingAttr: DDN.mscorlib.DNBindingFlags): DDN.mscorlib.DNPropertyInfo; overload;
    function GetFields(bindingAttr: DDN.mscorlib.DNBindingFlags): TArray<DDN.mscorlib.DNFieldInfo>;
    function GetMethod(name: string; bindingAttr: DDN.mscorlib.DNBindingFlags; binder: DDN.mscorlib.DNBinder; types: TArray<DDN.mscorlib.DNType>; modifiers: TArray<DDN.mscorlib.DNParameterModifier>): DDN.mscorlib.DNMethodInfo; overload;
    function GetMethods(bindingAttr: DDN.mscorlib.DNBindingFlags): TArray<DDN.mscorlib.DNMethodInfo>;
    function GetProperty(name: string; bindingAttr: DDN.mscorlib.DNBindingFlags; binder: DDN.mscorlib.DNBinder; returnType: DDN.mscorlib.DNType; types: TArray<DDN.mscorlib.DNType>; modifiers: TArray<DDN.mscorlib.DNParameterModifier>): DDN.mscorlib.DNPropertyInfo; overload;
    function GetProperties(bindingAttr: DDN.mscorlib.DNBindingFlags): TArray<DDN.mscorlib.DNPropertyInfo>;
    function InvokeMember(name: string; invokeAttr: DDN.mscorlib.DNBindingFlags; binder: DDN.mscorlib.DNBinder; target: DDN.mscorlib.DNObject; args: TArray<DDN.mscorlib.DNObject>; modifiers: TArray<DDN.mscorlib.DNParameterModifier>; locale: DDN.mscorlib.DNCultureInfo; namedParameters: TArray<string>): DDN.mscorlib.DNObject;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    property Item[index: Double]: DDN.mscorlib.DNObject read get_Item write set_Item; default;
    property Item[index: Int32]: DDN.mscorlib.DNObject read get_Item write set_Item; default;
    property Item[name: string]: DDN.mscorlib.DNObject read get_Item write set_Item; default;
    property Item[pars: TArray<DDN.mscorlib.DNObject>]: DDN.mscorlib.DNObject read get_Item write set_Item; default;
    property UnderlyingSystemType: DDN.mscorlib.DNType read get_UnderlyingSystemType;
  end;

  TDNRegExpPrototype = class(TDNGenericImport<DNRegExpPrototypeClass, DNRegExpPrototype>) end;

  //-------------namespace: Microsoft.JScript----------------
  DNLenientRegExpPrototypeClass = interface(DNRegExpPrototypeClass)
  ['{FECD915E-E833-56EC-99BD-3BAA3B87ADAF}']
  end;

  [DNTypeName('Microsoft.JScript.LenientRegExpPrototype')]
  DNLenientRegExpPrototype = interface(DNRegExpPrototype)
  ['{E0FCACF9-9A8E-3176-8E98-4FF2D0E1391B}']
  { getters & setters } 

    function get_Item(index: Double): DDN.mscorlib.DNObject; overload;
    procedure set_Item(index: Double; value: DDN.mscorlib.DNObject); overload;
    function get_Item(index: Int32): DDN.mscorlib.DNObject; overload;
    procedure set_Item(index: Int32; value: DDN.mscorlib.DNObject); overload;
    function get_Item(name: string): DDN.mscorlib.DNObject; overload;
    procedure set_Item(name: string; value: DDN.mscorlib.DNObject); overload;
    function get_Item(pars: TArray<DDN.mscorlib.DNObject>): DDN.mscorlib.DNObject; overload;
    procedure set_Item(pars: TArray<DDN.mscorlib.DNObject>; value: DDN.mscorlib.DNObject); overload;
    function get_UnderlyingSystemType: DDN.mscorlib.DNType;

  { fields getter & setter } 

   function __fakeFieldGet_constructor: DDN.mscorlib.DNObject;
   procedure __fakeFieldSet_constructor(value: DDN.mscorlib.DNObject);
   function __fakeFieldGet_compile: DDN.mscorlib.DNObject;
   procedure __fakeFieldSet_compile(value: DDN.mscorlib.DNObject);
   function __fakeFieldGet_exec: DDN.mscorlib.DNObject;
   procedure __fakeFieldSet_exec(value: DDN.mscorlib.DNObject);
   function __fakeFieldGet_test: DDN.mscorlib.DNObject;
   procedure __fakeFieldSet_test(value: DDN.mscorlib.DNObject);
   function __fakeFieldGet_toString: DDN.mscorlib.DNObject;
   procedure __fakeFieldSet_toString(value: DDN.mscorlib.DNObject);
   function __fakeFieldGet_engine: DNVsaEngine;
   procedure __fakeFieldSet_engine(value: DNVsaEngine);

  { fields } 

   property &constructor: DDN.mscorlib.DNObject read __fakeFieldGet_constructor write __fakeFieldSet_constructor;
   property compile: DDN.mscorlib.DNObject read __fakeFieldGet_compile write __fakeFieldSet_compile;
   property exec: DDN.mscorlib.DNObject read __fakeFieldGet_exec write __fakeFieldSet_exec;
   property test: DDN.mscorlib.DNObject read __fakeFieldGet_test write __fakeFieldSet_test;
   property toString_: DDN.mscorlib.DNObject read __fakeFieldGet_toString write __fakeFieldSet_toString;
   property engine: DNVsaEngine read __fakeFieldGet_engine write __fakeFieldSet_engine;

  { methods } 

    function AddField(name: string): DDN.mscorlib.DNFieldInfo;
    function GetMember(name: string; bindingAttr: DDN.mscorlib.DNBindingFlags): TArray<DDN.mscorlib.DNMemberInfo>;
    procedure SetMemberValue2(name: string; value: DDN.mscorlib.DNObject);
    function ToString: string;
    function GetMembers(bindingAttr: DDN.mscorlib.DNBindingFlags): TArray<DDN.mscorlib.DNMemberInfo>;
    function GetField(name: string; bindingAttr: DDN.mscorlib.DNBindingFlags): DDN.mscorlib.DNFieldInfo;
    function GetMethod(name: string; bindingAttr: DDN.mscorlib.DNBindingFlags): DDN.mscorlib.DNMethodInfo; overload;
    function GetParent: DNScriptObject;
    function GetProperty(name: string; bindingAttr: DDN.mscorlib.DNBindingFlags): DDN.mscorlib.DNPropertyInfo; overload;
    function GetFields(bindingAttr: DDN.mscorlib.DNBindingFlags): TArray<DDN.mscorlib.DNFieldInfo>;
    function GetMethod(name: string; bindingAttr: DDN.mscorlib.DNBindingFlags; binder: DDN.mscorlib.DNBinder; types: TArray<DDN.mscorlib.DNType>; modifiers: TArray<DDN.mscorlib.DNParameterModifier>): DDN.mscorlib.DNMethodInfo; overload;
    function GetMethods(bindingAttr: DDN.mscorlib.DNBindingFlags): TArray<DDN.mscorlib.DNMethodInfo>;
    function GetProperty(name: string; bindingAttr: DDN.mscorlib.DNBindingFlags; binder: DDN.mscorlib.DNBinder; returnType: DDN.mscorlib.DNType; types: TArray<DDN.mscorlib.DNType>; modifiers: TArray<DDN.mscorlib.DNParameterModifier>): DDN.mscorlib.DNPropertyInfo; overload;
    function GetProperties(bindingAttr: DDN.mscorlib.DNBindingFlags): TArray<DDN.mscorlib.DNPropertyInfo>;
    function InvokeMember(name: string; invokeAttr: DDN.mscorlib.DNBindingFlags; binder: DDN.mscorlib.DNBinder; target: DDN.mscorlib.DNObject; args: TArray<DDN.mscorlib.DNObject>; modifiers: TArray<DDN.mscorlib.DNParameterModifier>; locale: DDN.mscorlib.DNCultureInfo; namedParameters: TArray<string>): DDN.mscorlib.DNObject;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    property Item[index: Double]: DDN.mscorlib.DNObject read get_Item write set_Item; default;
    property Item[index: Int32]: DDN.mscorlib.DNObject read get_Item write set_Item; default;
    property Item[name: string]: DDN.mscorlib.DNObject read get_Item write set_Item; default;
    property Item[pars: TArray<DDN.mscorlib.DNObject>]: DDN.mscorlib.DNObject read get_Item write set_Item; default;
    property UnderlyingSystemType: DDN.mscorlib.DNType read get_UnderlyingSystemType;
  end;

  TDNLenientRegExpPrototype = class(TDNGenericImport<DNLenientRegExpPrototypeClass, DNLenientRegExpPrototype>) end;

  //-------------namespace: Microsoft.JScript----------------
  DNScriptFunctionClass = interface(DNJSObjectClass)
  ['{58797BE8-5889-5E3E-B941-C4FD782FFDA2}']
  end;

  [DNTypeName('Microsoft.JScript.ScriptFunction')]
  DNScriptFunction = interface(DNJSObject)
  ['{382FF180-3B4B-394A-BB37-E50AFDBBC3D1}']
  { getters & setters } 

    function get_length: Int32;
    procedure set_length(value: Int32);
    function get_prototype: DDN.mscorlib.DNObject;
    procedure set_prototype(value: DDN.mscorlib.DNObject);
    function get_Item(index: Double): DDN.mscorlib.DNObject; overload;
    procedure set_Item(index: Double; value: DDN.mscorlib.DNObject); overload;
    function get_Item(index: Int32): DDN.mscorlib.DNObject; overload;
    procedure set_Item(index: Int32; value: DDN.mscorlib.DNObject); overload;
    function get_Item(name: string): DDN.mscorlib.DNObject; overload;
    procedure set_Item(name: string; value: DDN.mscorlib.DNObject); overload;
    function get_Item(pars: TArray<DDN.mscorlib.DNObject>): DDN.mscorlib.DNObject; overload;
    procedure set_Item(pars: TArray<DDN.mscorlib.DNObject>; value: DDN.mscorlib.DNObject); overload;
    function get_UnderlyingSystemType: DDN.mscorlib.DNType;

  { fields getter & setter } 

   function __fakeFieldGet_engine: DNVsaEngine;
   procedure __fakeFieldSet_engine(value: DNVsaEngine);

  { fields } 

   property engine: DNVsaEngine read __fakeFieldGet_engine write __fakeFieldSet_engine;

  { methods } 

    function CreateInstance(args: TArray<DDN.mscorlib.DNObject>): DDN.mscorlib.DNObject;
    function Invoke(thisob: DDN.mscorlib.DNObject; args: TArray<DDN.mscorlib.DNObject>): DDN.mscorlib.DNObject;
    function InvokeMember(name: string; invokeAttr: DDN.mscorlib.DNBindingFlags; binder: DDN.mscorlib.DNBinder; target: DDN.mscorlib.DNObject; args: TArray<DDN.mscorlib.DNObject>; modifiers: TArray<DDN.mscorlib.DNParameterModifier>; culture: DDN.mscorlib.DNCultureInfo; namedParameters: TArray<string>): DDN.mscorlib.DNObject;
    function ToString: string;
    function AddField(name: string): DDN.mscorlib.DNFieldInfo;
    function GetMember(name: string; bindingAttr: DDN.mscorlib.DNBindingFlags): TArray<DDN.mscorlib.DNMemberInfo>;
    procedure SetMemberValue2(name: string; value: DDN.mscorlib.DNObject);
    function GetMembers(bindingAttr: DDN.mscorlib.DNBindingFlags): TArray<DDN.mscorlib.DNMemberInfo>;
    function GetField(name: string; bindingAttr: DDN.mscorlib.DNBindingFlags): DDN.mscorlib.DNFieldInfo;
    function GetMethod(name: string; bindingAttr: DDN.mscorlib.DNBindingFlags): DDN.mscorlib.DNMethodInfo; overload;
    function GetParent: DNScriptObject;
    function GetProperty(name: string; bindingAttr: DDN.mscorlib.DNBindingFlags): DDN.mscorlib.DNPropertyInfo; overload;
    function GetFields(bindingAttr: DDN.mscorlib.DNBindingFlags): TArray<DDN.mscorlib.DNFieldInfo>;
    function GetMethod(name: string; bindingAttr: DDN.mscorlib.DNBindingFlags; binder: DDN.mscorlib.DNBinder; types: TArray<DDN.mscorlib.DNType>; modifiers: TArray<DDN.mscorlib.DNParameterModifier>): DDN.mscorlib.DNMethodInfo; overload;
    function GetMethods(bindingAttr: DDN.mscorlib.DNBindingFlags): TArray<DDN.mscorlib.DNMethodInfo>;
    function GetProperty(name: string; bindingAttr: DDN.mscorlib.DNBindingFlags; binder: DDN.mscorlib.DNBinder; returnType: DDN.mscorlib.DNType; types: TArray<DDN.mscorlib.DNType>; modifiers: TArray<DDN.mscorlib.DNParameterModifier>): DDN.mscorlib.DNPropertyInfo; overload;
    function GetProperties(bindingAttr: DDN.mscorlib.DNBindingFlags): TArray<DDN.mscorlib.DNPropertyInfo>;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    property length: Int32 read get_length write set_length;
    property prototype: DDN.mscorlib.DNObject read get_prototype write set_prototype;
    property Item[index: Double]: DDN.mscorlib.DNObject read get_Item write set_Item; default;
    property Item[index: Int32]: DDN.mscorlib.DNObject read get_Item write set_Item; default;
    property Item[name: string]: DDN.mscorlib.DNObject read get_Item write set_Item; default;
    property Item[pars: TArray<DDN.mscorlib.DNObject>]: DDN.mscorlib.DNObject read get_Item write set_Item; default;
    property UnderlyingSystemType: DDN.mscorlib.DNType read get_UnderlyingSystemType;
  end;

  TDNScriptFunction = class(TDNGenericImport<DNScriptFunctionClass, DNScriptFunction>) end;

  //-------------namespace: Microsoft.JScript----------------
  DNActiveXObjectConstructorClass = interface(DNScriptFunctionClass)
  ['{5983CA30-B0A7-5BAD-869D-7702489B3173}']
  end;

  [DNTypeName('Microsoft.JScript.ActiveXObjectConstructor')]
  DNActiveXObjectConstructor = interface(DNScriptFunction)
  ['{A51A0372-81CD-3BD2-885C-5906A77E326A}']
  { getters & setters } 

    function get_length: Int32;
    procedure set_length(value: Int32);
    function get_prototype: DDN.mscorlib.DNObject;
    procedure set_prototype(value: DDN.mscorlib.DNObject);
    function get_Item(index: Double): DDN.mscorlib.DNObject; overload;
    procedure set_Item(index: Double; value: DDN.mscorlib.DNObject); overload;
    function get_Item(index: Int32): DDN.mscorlib.DNObject; overload;
    procedure set_Item(index: Int32; value: DDN.mscorlib.DNObject); overload;
    function get_Item(name: string): DDN.mscorlib.DNObject; overload;
    procedure set_Item(name: string; value: DDN.mscorlib.DNObject); overload;
    function get_Item(pars: TArray<DDN.mscorlib.DNObject>): DDN.mscorlib.DNObject; overload;
    procedure set_Item(pars: TArray<DDN.mscorlib.DNObject>; value: DDN.mscorlib.DNObject); overload;
    function get_UnderlyingSystemType: DDN.mscorlib.DNType;

  { fields getter & setter } 

   function __fakeFieldGet_engine: DNVsaEngine;
   procedure __fakeFieldSet_engine(value: DNVsaEngine);

  { fields } 

   property engine: DNVsaEngine read __fakeFieldGet_engine write __fakeFieldSet_engine;

  { methods } 

    function CreateInstance(args: TArray<DDN.mscorlib.DNObject>): DDN.mscorlib.DNObject;
    function Invoke: DDN.mscorlib.DNObject; overload;
    function Invoke(thisob: DDN.mscorlib.DNObject; args: TArray<DDN.mscorlib.DNObject>): DDN.mscorlib.DNObject; overload;
    function InvokeMember(name: string; invokeAttr: DDN.mscorlib.DNBindingFlags; binder: DDN.mscorlib.DNBinder; target: DDN.mscorlib.DNObject; args: TArray<DDN.mscorlib.DNObject>; modifiers: TArray<DDN.mscorlib.DNParameterModifier>; culture: DDN.mscorlib.DNCultureInfo; namedParameters: TArray<string>): DDN.mscorlib.DNObject;
    function ToString: string;
    function AddField(name: string): DDN.mscorlib.DNFieldInfo;
    function GetMember(name: string; bindingAttr: DDN.mscorlib.DNBindingFlags): TArray<DDN.mscorlib.DNMemberInfo>;
    procedure SetMemberValue2(name: string; value: DDN.mscorlib.DNObject);
    function GetMembers(bindingAttr: DDN.mscorlib.DNBindingFlags): TArray<DDN.mscorlib.DNMemberInfo>;
    function GetField(name: string; bindingAttr: DDN.mscorlib.DNBindingFlags): DDN.mscorlib.DNFieldInfo;
    function GetMethod(name: string; bindingAttr: DDN.mscorlib.DNBindingFlags): DDN.mscorlib.DNMethodInfo; overload;
    function GetParent: DNScriptObject;
    function GetProperty(name: string; bindingAttr: DDN.mscorlib.DNBindingFlags): DDN.mscorlib.DNPropertyInfo; overload;
    function GetFields(bindingAttr: DDN.mscorlib.DNBindingFlags): TArray<DDN.mscorlib.DNFieldInfo>;
    function GetMethod(name: string; bindingAttr: DDN.mscorlib.DNBindingFlags; binder: DDN.mscorlib.DNBinder; types: TArray<DDN.mscorlib.DNType>; modifiers: TArray<DDN.mscorlib.DNParameterModifier>): DDN.mscorlib.DNMethodInfo; overload;
    function GetMethods(bindingAttr: DDN.mscorlib.DNBindingFlags): TArray<DDN.mscorlib.DNMethodInfo>;
    function GetProperty(name: string; bindingAttr: DDN.mscorlib.DNBindingFlags; binder: DDN.mscorlib.DNBinder; returnType: DDN.mscorlib.DNType; types: TArray<DDN.mscorlib.DNType>; modifiers: TArray<DDN.mscorlib.DNParameterModifier>): DDN.mscorlib.DNPropertyInfo; overload;
    function GetProperties(bindingAttr: DDN.mscorlib.DNBindingFlags): TArray<DDN.mscorlib.DNPropertyInfo>;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    property length: Int32 read get_length write set_length;
    property prototype: DDN.mscorlib.DNObject read get_prototype write set_prototype;
    property Item[index: Double]: DDN.mscorlib.DNObject read get_Item write set_Item; default;
    property Item[index: Int32]: DDN.mscorlib.DNObject read get_Item write set_Item; default;
    property Item[name: string]: DDN.mscorlib.DNObject read get_Item write set_Item; default;
    property Item[pars: TArray<DDN.mscorlib.DNObject>]: DDN.mscorlib.DNObject read get_Item write set_Item; default;
    property UnderlyingSystemType: DDN.mscorlib.DNType read get_UnderlyingSystemType;
  end;

  TDNActiveXObjectConstructor = class(TDNGenericImport<DNActiveXObjectConstructorClass, DNActiveXObjectConstructor>) end;

  //-------------namespace: Microsoft.JScript----------------
  DNArrayConstructorClass = interface(DNScriptFunctionClass)
  ['{45D367A8-ADF8-5477-A93E-954348EFB70C}']
  end;

  [DNTypeName('Microsoft.JScript.ArrayConstructor')]
  DNArrayConstructor = interface(DNScriptFunction)
  ['{5149DE7C-8905-39E3-AC17-F7DC669CC82C}']
  { getters & setters } 

    function get_length: Int32;
    procedure set_length(value: Int32);
    function get_prototype: DDN.mscorlib.DNObject;
    procedure set_prototype(value: DDN.mscorlib.DNObject);
    function get_Item(index: Double): DDN.mscorlib.DNObject; overload;
    procedure set_Item(index: Double; value: DDN.mscorlib.DNObject); overload;
    function get_Item(index: Int32): DDN.mscorlib.DNObject; overload;
    procedure set_Item(index: Int32; value: DDN.mscorlib.DNObject); overload;
    function get_Item(name: string): DDN.mscorlib.DNObject; overload;
    procedure set_Item(name: string; value: DDN.mscorlib.DNObject); overload;
    function get_Item(pars: TArray<DDN.mscorlib.DNObject>): DDN.mscorlib.DNObject; overload;
    procedure set_Item(pars: TArray<DDN.mscorlib.DNObject>; value: DDN.mscorlib.DNObject); overload;
    function get_UnderlyingSystemType: DDN.mscorlib.DNType;

  { fields getter & setter } 

   function __fakeFieldGet_engine: DNVsaEngine;
   procedure __fakeFieldSet_engine(value: DNVsaEngine);

  { fields } 

   property engine: DNVsaEngine read __fakeFieldGet_engine write __fakeFieldSet_engine;

  { methods } 

    function ConstructArray(args: TArray<DDN.mscorlib.DNObject>): DNArrayObject;
    function CreateInstance(args: TArray<DDN.mscorlib.DNObject>): DNArrayObject;
    function Invoke(args: TArray<DDN.mscorlib.DNObject>): DNArrayObject; overload;
    function Invoke(thisob: DDN.mscorlib.DNObject; args: TArray<DDN.mscorlib.DNObject>): DDN.mscorlib.DNObject; overload;
    function InvokeMember(name: string; invokeAttr: DDN.mscorlib.DNBindingFlags; binder: DDN.mscorlib.DNBinder; target: DDN.mscorlib.DNObject; args: TArray<DDN.mscorlib.DNObject>; modifiers: TArray<DDN.mscorlib.DNParameterModifier>; culture: DDN.mscorlib.DNCultureInfo; namedParameters: TArray<string>): DDN.mscorlib.DNObject;
    function ToString: string;
    function AddField(name: string): DDN.mscorlib.DNFieldInfo;
    function GetMember(name: string; bindingAttr: DDN.mscorlib.DNBindingFlags): TArray<DDN.mscorlib.DNMemberInfo>;
    procedure SetMemberValue2(name: string; value: DDN.mscorlib.DNObject);
    function GetMembers(bindingAttr: DDN.mscorlib.DNBindingFlags): TArray<DDN.mscorlib.DNMemberInfo>;
    function GetField(name: string; bindingAttr: DDN.mscorlib.DNBindingFlags): DDN.mscorlib.DNFieldInfo;
    function GetMethod(name: string; bindingAttr: DDN.mscorlib.DNBindingFlags): DDN.mscorlib.DNMethodInfo; overload;
    function GetParent: DNScriptObject;
    function GetProperty(name: string; bindingAttr: DDN.mscorlib.DNBindingFlags): DDN.mscorlib.DNPropertyInfo; overload;
    function GetFields(bindingAttr: DDN.mscorlib.DNBindingFlags): TArray<DDN.mscorlib.DNFieldInfo>;
    function GetMethod(name: string; bindingAttr: DDN.mscorlib.DNBindingFlags; binder: DDN.mscorlib.DNBinder; types: TArray<DDN.mscorlib.DNType>; modifiers: TArray<DDN.mscorlib.DNParameterModifier>): DDN.mscorlib.DNMethodInfo; overload;
    function GetMethods(bindingAttr: DDN.mscorlib.DNBindingFlags): TArray<DDN.mscorlib.DNMethodInfo>;
    function GetProperty(name: string; bindingAttr: DDN.mscorlib.DNBindingFlags; binder: DDN.mscorlib.DNBinder; returnType: DDN.mscorlib.DNType; types: TArray<DDN.mscorlib.DNType>; modifiers: TArray<DDN.mscorlib.DNParameterModifier>): DDN.mscorlib.DNPropertyInfo; overload;
    function GetProperties(bindingAttr: DDN.mscorlib.DNBindingFlags): TArray<DDN.mscorlib.DNPropertyInfo>;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    property length: Int32 read get_length write set_length;
    property prototype: DDN.mscorlib.DNObject read get_prototype write set_prototype;
    property Item[index: Double]: DDN.mscorlib.DNObject read get_Item write set_Item; default;
    property Item[index: Int32]: DDN.mscorlib.DNObject read get_Item write set_Item; default;
    property Item[name: string]: DDN.mscorlib.DNObject read get_Item write set_Item; default;
    property Item[pars: TArray<DDN.mscorlib.DNObject>]: DDN.mscorlib.DNObject read get_Item write set_Item; default;
    property UnderlyingSystemType: DDN.mscorlib.DNType read get_UnderlyingSystemType;
  end;

  TDNArrayConstructor = class(TDNGenericImport<DNArrayConstructorClass, DNArrayConstructor>) end;

  //-------------namespace: Microsoft.JScript----------------
  DNBooleanConstructorClass = interface(DNScriptFunctionClass)
  ['{9DC933A6-44AE-595A-BCA6-13DF63B5F5CC}']
  end;

  [DNTypeName('Microsoft.JScript.BooleanConstructor')]
  DNBooleanConstructor = interface(DNScriptFunction)
  ['{9733094C-A87B-3BAA-AF59-F9CBC1644BE4}']
  { getters & setters } 

    function get_length: Int32;
    procedure set_length(value: Int32);
    function get_prototype: DDN.mscorlib.DNObject;
    procedure set_prototype(value: DDN.mscorlib.DNObject);
    function get_Item(index: Double): DDN.mscorlib.DNObject; overload;
    procedure set_Item(index: Double; value: DDN.mscorlib.DNObject); overload;
    function get_Item(index: Int32): DDN.mscorlib.DNObject; overload;
    procedure set_Item(index: Int32; value: DDN.mscorlib.DNObject); overload;
    function get_Item(name: string): DDN.mscorlib.DNObject; overload;
    procedure set_Item(name: string; value: DDN.mscorlib.DNObject); overload;
    function get_Item(pars: TArray<DDN.mscorlib.DNObject>): DDN.mscorlib.DNObject; overload;
    procedure set_Item(pars: TArray<DDN.mscorlib.DNObject>; value: DDN.mscorlib.DNObject); overload;
    function get_UnderlyingSystemType: DDN.mscorlib.DNType;

  { fields getter & setter } 

   function __fakeFieldGet_engine: DNVsaEngine;
   procedure __fakeFieldSet_engine(value: DNVsaEngine);

  { fields } 

   property engine: DNVsaEngine read __fakeFieldGet_engine write __fakeFieldSet_engine;

  { methods } 

    function CreateInstance(args: TArray<DDN.mscorlib.DNObject>): DNBooleanObject;
    function Invoke(arg: DDN.mscorlib.DNObject): Boolean; overload;
    function Invoke(thisob: DDN.mscorlib.DNObject; args: TArray<DDN.mscorlib.DNObject>): DDN.mscorlib.DNObject; overload;
    function InvokeMember(name: string; invokeAttr: DDN.mscorlib.DNBindingFlags; binder: DDN.mscorlib.DNBinder; target: DDN.mscorlib.DNObject; args: TArray<DDN.mscorlib.DNObject>; modifiers: TArray<DDN.mscorlib.DNParameterModifier>; culture: DDN.mscorlib.DNCultureInfo; namedParameters: TArray<string>): DDN.mscorlib.DNObject;
    function ToString: string;
    function AddField(name: string): DDN.mscorlib.DNFieldInfo;
    function GetMember(name: string; bindingAttr: DDN.mscorlib.DNBindingFlags): TArray<DDN.mscorlib.DNMemberInfo>;
    procedure SetMemberValue2(name: string; value: DDN.mscorlib.DNObject);
    function GetMembers(bindingAttr: DDN.mscorlib.DNBindingFlags): TArray<DDN.mscorlib.DNMemberInfo>;
    function GetField(name: string; bindingAttr: DDN.mscorlib.DNBindingFlags): DDN.mscorlib.DNFieldInfo;
    function GetMethod(name: string; bindingAttr: DDN.mscorlib.DNBindingFlags): DDN.mscorlib.DNMethodInfo; overload;
    function GetParent: DNScriptObject;
    function GetProperty(name: string; bindingAttr: DDN.mscorlib.DNBindingFlags): DDN.mscorlib.DNPropertyInfo; overload;
    function GetFields(bindingAttr: DDN.mscorlib.DNBindingFlags): TArray<DDN.mscorlib.DNFieldInfo>;
    function GetMethod(name: string; bindingAttr: DDN.mscorlib.DNBindingFlags; binder: DDN.mscorlib.DNBinder; types: TArray<DDN.mscorlib.DNType>; modifiers: TArray<DDN.mscorlib.DNParameterModifier>): DDN.mscorlib.DNMethodInfo; overload;
    function GetMethods(bindingAttr: DDN.mscorlib.DNBindingFlags): TArray<DDN.mscorlib.DNMethodInfo>;
    function GetProperty(name: string; bindingAttr: DDN.mscorlib.DNBindingFlags; binder: DDN.mscorlib.DNBinder; returnType: DDN.mscorlib.DNType; types: TArray<DDN.mscorlib.DNType>; modifiers: TArray<DDN.mscorlib.DNParameterModifier>): DDN.mscorlib.DNPropertyInfo; overload;
    function GetProperties(bindingAttr: DDN.mscorlib.DNBindingFlags): TArray<DDN.mscorlib.DNPropertyInfo>;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    property length: Int32 read get_length write set_length;
    property prototype: DDN.mscorlib.DNObject read get_prototype write set_prototype;
    property Item[index: Double]: DDN.mscorlib.DNObject read get_Item write set_Item; default;
    property Item[index: Int32]: DDN.mscorlib.DNObject read get_Item write set_Item; default;
    property Item[name: string]: DDN.mscorlib.DNObject read get_Item write set_Item; default;
    property Item[pars: TArray<DDN.mscorlib.DNObject>]: DDN.mscorlib.DNObject read get_Item write set_Item; default;
    property UnderlyingSystemType: DDN.mscorlib.DNType read get_UnderlyingSystemType;
  end;

  TDNBooleanConstructor = class(TDNGenericImport<DNBooleanConstructorClass, DNBooleanConstructor>) end;

  //-------------namespace: Microsoft.JScript----------------
  DNClosureClass = interface(DNScriptFunctionClass)
  ['{DAF07C45-C43A-5D1B-86C6-F098D7B55EB6}']
  { constructors } 

    {class} function init(func: DNFunctionObject): DNClosure;

  end;

  [DNTypeName('Microsoft.JScript.Closure')]
  DNClosure = interface(DNScriptFunction)
  ['{F1C9AA4D-3B57-362E-AC53-3B26156BA10D}']
  { getters & setters } 

    function get_length: Int32;
    procedure set_length(value: Int32);
    function get_prototype: DDN.mscorlib.DNObject;
    procedure set_prototype(value: DDN.mscorlib.DNObject);
    function get_Item(index: Double): DDN.mscorlib.DNObject; overload;
    procedure set_Item(index: Double; value: DDN.mscorlib.DNObject); overload;
    function get_Item(index: Int32): DDN.mscorlib.DNObject; overload;
    procedure set_Item(index: Int32; value: DDN.mscorlib.DNObject); overload;
    function get_Item(name: string): DDN.mscorlib.DNObject; overload;
    procedure set_Item(name: string; value: DDN.mscorlib.DNObject); overload;
    function get_Item(pars: TArray<DDN.mscorlib.DNObject>): DDN.mscorlib.DNObject; overload;
    procedure set_Item(pars: TArray<DDN.mscorlib.DNObject>; value: DDN.mscorlib.DNObject); overload;
    function get_UnderlyingSystemType: DDN.mscorlib.DNType;

  { fields getter & setter } 

   function __fakeFieldGet_arguments: DDN.mscorlib.DNObject;
   procedure __fakeFieldSet_arguments(value: DDN.mscorlib.DNObject);
   function __fakeFieldGet_caller: DDN.mscorlib.DNObject;
   procedure __fakeFieldSet_caller(value: DDN.mscorlib.DNObject);
   function __fakeFieldGet_engine: DNVsaEngine;
   procedure __fakeFieldSet_engine(value: DNVsaEngine);

  { fields } 

   property arguments: DDN.mscorlib.DNObject read __fakeFieldGet_arguments write __fakeFieldSet_arguments;
   property caller: DDN.mscorlib.DNObject read __fakeFieldGet_caller write __fakeFieldSet_caller;
   property engine: DNVsaEngine read __fakeFieldGet_engine write __fakeFieldSet_engine;

  { methods } 

    function ToString: string;
    function CreateInstance(args: TArray<DDN.mscorlib.DNObject>): DDN.mscorlib.DNObject;
    function Invoke(thisob: DDN.mscorlib.DNObject; args: TArray<DDN.mscorlib.DNObject>): DDN.mscorlib.DNObject;
    function InvokeMember(name: string; invokeAttr: DDN.mscorlib.DNBindingFlags; binder: DDN.mscorlib.DNBinder; target: DDN.mscorlib.DNObject; args: TArray<DDN.mscorlib.DNObject>; modifiers: TArray<DDN.mscorlib.DNParameterModifier>; culture: DDN.mscorlib.DNCultureInfo; namedParameters: TArray<string>): DDN.mscorlib.DNObject;
    function AddField(name: string): DDN.mscorlib.DNFieldInfo;
    function GetMember(name: string; bindingAttr: DDN.mscorlib.DNBindingFlags): TArray<DDN.mscorlib.DNMemberInfo>;
    procedure SetMemberValue2(name: string; value: DDN.mscorlib.DNObject);
    function GetMembers(bindingAttr: DDN.mscorlib.DNBindingFlags): TArray<DDN.mscorlib.DNMemberInfo>;
    function GetField(name: string; bindingAttr: DDN.mscorlib.DNBindingFlags): DDN.mscorlib.DNFieldInfo;
    function GetMethod(name: string; bindingAttr: DDN.mscorlib.DNBindingFlags): DDN.mscorlib.DNMethodInfo; overload;
    function GetParent: DNScriptObject;
    function GetProperty(name: string; bindingAttr: DDN.mscorlib.DNBindingFlags): DDN.mscorlib.DNPropertyInfo; overload;
    function GetFields(bindingAttr: DDN.mscorlib.DNBindingFlags): TArray<DDN.mscorlib.DNFieldInfo>;
    function GetMethod(name: string; bindingAttr: DDN.mscorlib.DNBindingFlags; binder: DDN.mscorlib.DNBinder; types: TArray<DDN.mscorlib.DNType>; modifiers: TArray<DDN.mscorlib.DNParameterModifier>): DDN.mscorlib.DNMethodInfo; overload;
    function GetMethods(bindingAttr: DDN.mscorlib.DNBindingFlags): TArray<DDN.mscorlib.DNMethodInfo>;
    function GetProperty(name: string; bindingAttr: DDN.mscorlib.DNBindingFlags; binder: DDN.mscorlib.DNBinder; returnType: DDN.mscorlib.DNType; types: TArray<DDN.mscorlib.DNType>; modifiers: TArray<DDN.mscorlib.DNParameterModifier>): DDN.mscorlib.DNPropertyInfo; overload;
    function GetProperties(bindingAttr: DDN.mscorlib.DNBindingFlags): TArray<DDN.mscorlib.DNPropertyInfo>;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    property length: Int32 read get_length write set_length;
    property prototype: DDN.mscorlib.DNObject read get_prototype write set_prototype;
    property Item[index: Double]: DDN.mscorlib.DNObject read get_Item write set_Item; default;
    property Item[index: Int32]: DDN.mscorlib.DNObject read get_Item write set_Item; default;
    property Item[name: string]: DDN.mscorlib.DNObject read get_Item write set_Item; default;
    property Item[pars: TArray<DDN.mscorlib.DNObject>]: DDN.mscorlib.DNObject read get_Item write set_Item; default;
    property UnderlyingSystemType: DDN.mscorlib.DNType read get_UnderlyingSystemType;
  end;

  TDNClosure = class(TDNGenericImport<DNClosureClass, DNClosure>) end;

  //-------------namespace: Microsoft.JScript----------------
  DNDateConstructorClass = interface(DNScriptFunctionClass)
  ['{2B9F22B6-2EBF-5729-86E5-3311046005AC}']
  { static methods } 

    {class} function parse(str: string): Double;
    {class} function UTC(year: DDN.mscorlib.DNObject; month: DDN.mscorlib.DNObject; date: DDN.mscorlib.DNObject; hours: DDN.mscorlib.DNObject; minutes: DDN.mscorlib.DNObject; seconds: DDN.mscorlib.DNObject; ms: DDN.mscorlib.DNObject): Double;

  end;

  [DNTypeName('Microsoft.JScript.DateConstructor')]
  DNDateConstructor = interface(DNScriptFunction)
  ['{9058A604-2DD1-3395-BB89-A25C4CF590AD}']
  { getters & setters } 

    function get_length: Int32;
    procedure set_length(value: Int32);
    function get_prototype: DDN.mscorlib.DNObject;
    procedure set_prototype(value: DDN.mscorlib.DNObject);
    function get_Item(index: Double): DDN.mscorlib.DNObject; overload;
    procedure set_Item(index: Double; value: DDN.mscorlib.DNObject); overload;
    function get_Item(index: Int32): DDN.mscorlib.DNObject; overload;
    procedure set_Item(index: Int32; value: DDN.mscorlib.DNObject); overload;
    function get_Item(name: string): DDN.mscorlib.DNObject; overload;
    procedure set_Item(name: string; value: DDN.mscorlib.DNObject); overload;
    function get_Item(pars: TArray<DDN.mscorlib.DNObject>): DDN.mscorlib.DNObject; overload;
    procedure set_Item(pars: TArray<DDN.mscorlib.DNObject>; value: DDN.mscorlib.DNObject); overload;
    function get_UnderlyingSystemType: DDN.mscorlib.DNType;

  { fields getter & setter } 

   function __fakeFieldGet_engine: DNVsaEngine;
   procedure __fakeFieldSet_engine(value: DNVsaEngine);

  { fields } 

   property engine: DNVsaEngine read __fakeFieldGet_engine write __fakeFieldSet_engine;

  { methods } 

    function CreateInstance(args: TArray<DDN.mscorlib.DNObject>): DNDateObject;
    function Invoke: string; overload;
    function Invoke(thisob: DDN.mscorlib.DNObject; args: TArray<DDN.mscorlib.DNObject>): DDN.mscorlib.DNObject; overload;
    function InvokeMember(name: string; invokeAttr: DDN.mscorlib.DNBindingFlags; binder: DDN.mscorlib.DNBinder; target: DDN.mscorlib.DNObject; args: TArray<DDN.mscorlib.DNObject>; modifiers: TArray<DDN.mscorlib.DNParameterModifier>; culture: DDN.mscorlib.DNCultureInfo; namedParameters: TArray<string>): DDN.mscorlib.DNObject;
    function ToString: string;
    function AddField(name: string): DDN.mscorlib.DNFieldInfo;
    function GetMember(name: string; bindingAttr: DDN.mscorlib.DNBindingFlags): TArray<DDN.mscorlib.DNMemberInfo>;
    procedure SetMemberValue2(name: string; value: DDN.mscorlib.DNObject);
    function GetMembers(bindingAttr: DDN.mscorlib.DNBindingFlags): TArray<DDN.mscorlib.DNMemberInfo>;
    function GetField(name: string; bindingAttr: DDN.mscorlib.DNBindingFlags): DDN.mscorlib.DNFieldInfo;
    function GetMethod(name: string; bindingAttr: DDN.mscorlib.DNBindingFlags): DDN.mscorlib.DNMethodInfo; overload;
    function GetParent: DNScriptObject;
    function GetProperty(name: string; bindingAttr: DDN.mscorlib.DNBindingFlags): DDN.mscorlib.DNPropertyInfo; overload;
    function GetFields(bindingAttr: DDN.mscorlib.DNBindingFlags): TArray<DDN.mscorlib.DNFieldInfo>;
    function GetMethod(name: string; bindingAttr: DDN.mscorlib.DNBindingFlags; binder: DDN.mscorlib.DNBinder; types: TArray<DDN.mscorlib.DNType>; modifiers: TArray<DDN.mscorlib.DNParameterModifier>): DDN.mscorlib.DNMethodInfo; overload;
    function GetMethods(bindingAttr: DDN.mscorlib.DNBindingFlags): TArray<DDN.mscorlib.DNMethodInfo>;
    function GetProperty(name: string; bindingAttr: DDN.mscorlib.DNBindingFlags; binder: DDN.mscorlib.DNBinder; returnType: DDN.mscorlib.DNType; types: TArray<DDN.mscorlib.DNType>; modifiers: TArray<DDN.mscorlib.DNParameterModifier>): DDN.mscorlib.DNPropertyInfo; overload;
    function GetProperties(bindingAttr: DDN.mscorlib.DNBindingFlags): TArray<DDN.mscorlib.DNPropertyInfo>;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    property length: Int32 read get_length write set_length;
    property prototype: DDN.mscorlib.DNObject read get_prototype write set_prototype;
    property Item[index: Double]: DDN.mscorlib.DNObject read get_Item write set_Item; default;
    property Item[index: Int32]: DDN.mscorlib.DNObject read get_Item write set_Item; default;
    property Item[name: string]: DDN.mscorlib.DNObject read get_Item write set_Item; default;
    property Item[pars: TArray<DDN.mscorlib.DNObject>]: DDN.mscorlib.DNObject read get_Item write set_Item; default;
    property UnderlyingSystemType: DDN.mscorlib.DNType read get_UnderlyingSystemType;
  end;

  TDNDateConstructor = class(TDNGenericImport<DNDateConstructorClass, DNDateConstructor>) end;

  //-------------namespace: Microsoft.JScript----------------
  DNLenientDateConstructorClass = interface(DNDateConstructorClass)
  ['{1622B3C6-7F95-5A1D-A118-FF2C6BA229E6}']
  end;

  [DNTypeName('Microsoft.JScript.LenientDateConstructor')]
  DNLenientDateConstructor = interface(DNDateConstructor)
  ['{8E678CA6-DBF7-3DA5-86EC-912CE6B92F86}']
  { getters & setters } 

    function get_length: Int32;
    procedure set_length(value: Int32);
    function get_prototype: DDN.mscorlib.DNObject;
    procedure set_prototype(value: DDN.mscorlib.DNObject);
    function get_Item(index: Double): DDN.mscorlib.DNObject; overload;
    procedure set_Item(index: Double; value: DDN.mscorlib.DNObject); overload;
    function get_Item(index: Int32): DDN.mscorlib.DNObject; overload;
    procedure set_Item(index: Int32; value: DDN.mscorlib.DNObject); overload;
    function get_Item(name: string): DDN.mscorlib.DNObject; overload;
    procedure set_Item(name: string; value: DDN.mscorlib.DNObject); overload;
    function get_Item(pars: TArray<DDN.mscorlib.DNObject>): DDN.mscorlib.DNObject; overload;
    procedure set_Item(pars: TArray<DDN.mscorlib.DNObject>; value: DDN.mscorlib.DNObject); overload;
    function get_UnderlyingSystemType: DDN.mscorlib.DNType;

  { fields getter & setter } 

   function __fakeFieldGet_parse: DDN.mscorlib.DNObject;
   procedure __fakeFieldSet_parse(value: DDN.mscorlib.DNObject);
   function __fakeFieldGet_UTC: DDN.mscorlib.DNObject;
   procedure __fakeFieldSet_UTC(value: DDN.mscorlib.DNObject);
   function __fakeFieldGet_engine: DNVsaEngine;
   procedure __fakeFieldSet_engine(value: DNVsaEngine);

  { fields } 

   property parse: DDN.mscorlib.DNObject read __fakeFieldGet_parse write __fakeFieldSet_parse;
   property UTC: DDN.mscorlib.DNObject read __fakeFieldGet_UTC write __fakeFieldSet_UTC;
   property engine: DNVsaEngine read __fakeFieldGet_engine write __fakeFieldSet_engine;

  { methods } 

    function CreateInstance(args: TArray<DDN.mscorlib.DNObject>): DNDateObject;
    function Invoke: string; overload;
    function Invoke(thisob: DDN.mscorlib.DNObject; args: TArray<DDN.mscorlib.DNObject>): DDN.mscorlib.DNObject; overload;
    function InvokeMember(name: string; invokeAttr: DDN.mscorlib.DNBindingFlags; binder: DDN.mscorlib.DNBinder; target: DDN.mscorlib.DNObject; args: TArray<DDN.mscorlib.DNObject>; modifiers: TArray<DDN.mscorlib.DNParameterModifier>; culture: DDN.mscorlib.DNCultureInfo; namedParameters: TArray<string>): DDN.mscorlib.DNObject;
    function ToString: string;
    function AddField(name: string): DDN.mscorlib.DNFieldInfo;
    function GetMember(name: string; bindingAttr: DDN.mscorlib.DNBindingFlags): TArray<DDN.mscorlib.DNMemberInfo>;
    procedure SetMemberValue2(name: string; value: DDN.mscorlib.DNObject);
    function GetMembers(bindingAttr: DDN.mscorlib.DNBindingFlags): TArray<DDN.mscorlib.DNMemberInfo>;
    function GetField(name: string; bindingAttr: DDN.mscorlib.DNBindingFlags): DDN.mscorlib.DNFieldInfo;
    function GetMethod(name: string; bindingAttr: DDN.mscorlib.DNBindingFlags): DDN.mscorlib.DNMethodInfo; overload;
    function GetParent: DNScriptObject;
    function GetProperty(name: string; bindingAttr: DDN.mscorlib.DNBindingFlags): DDN.mscorlib.DNPropertyInfo; overload;
    function GetFields(bindingAttr: DDN.mscorlib.DNBindingFlags): TArray<DDN.mscorlib.DNFieldInfo>;
    function GetMethod(name: string; bindingAttr: DDN.mscorlib.DNBindingFlags; binder: DDN.mscorlib.DNBinder; types: TArray<DDN.mscorlib.DNType>; modifiers: TArray<DDN.mscorlib.DNParameterModifier>): DDN.mscorlib.DNMethodInfo; overload;
    function GetMethods(bindingAttr: DDN.mscorlib.DNBindingFlags): TArray<DDN.mscorlib.DNMethodInfo>;
    function GetProperty(name: string; bindingAttr: DDN.mscorlib.DNBindingFlags; binder: DDN.mscorlib.DNBinder; returnType: DDN.mscorlib.DNType; types: TArray<DDN.mscorlib.DNType>; modifiers: TArray<DDN.mscorlib.DNParameterModifier>): DDN.mscorlib.DNPropertyInfo; overload;
    function GetProperties(bindingAttr: DDN.mscorlib.DNBindingFlags): TArray<DDN.mscorlib.DNPropertyInfo>;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    property length: Int32 read get_length write set_length;
    property prototype: DDN.mscorlib.DNObject read get_prototype write set_prototype;
    property Item[index: Double]: DDN.mscorlib.DNObject read get_Item write set_Item; default;
    property Item[index: Int32]: DDN.mscorlib.DNObject read get_Item write set_Item; default;
    property Item[name: string]: DDN.mscorlib.DNObject read get_Item write set_Item; default;
    property Item[pars: TArray<DDN.mscorlib.DNObject>]: DDN.mscorlib.DNObject read get_Item write set_Item; default;
    property UnderlyingSystemType: DDN.mscorlib.DNType read get_UnderlyingSystemType;
  end;

  TDNLenientDateConstructor = class(TDNGenericImport<DNLenientDateConstructorClass, DNLenientDateConstructor>) end;

  //-------------namespace: Microsoft.JScript----------------
  DNEnumeratorConstructorClass = interface(DNScriptFunctionClass)
  ['{8ADD4711-8901-5D44-BD88-1E7E0C06446E}']
  end;

  [DNTypeName('Microsoft.JScript.EnumeratorConstructor')]
  DNEnumeratorConstructor = interface(DNScriptFunction)
  ['{F378FC0C-00FA-33D4-A270-B674FDAB003C}']
  { getters & setters } 

    function get_length: Int32;
    procedure set_length(value: Int32);
    function get_prototype: DDN.mscorlib.DNObject;
    procedure set_prototype(value: DDN.mscorlib.DNObject);
    function get_Item(index: Double): DDN.mscorlib.DNObject; overload;
    procedure set_Item(index: Double; value: DDN.mscorlib.DNObject); overload;
    function get_Item(index: Int32): DDN.mscorlib.DNObject; overload;
    procedure set_Item(index: Int32; value: DDN.mscorlib.DNObject); overload;
    function get_Item(name: string): DDN.mscorlib.DNObject; overload;
    procedure set_Item(name: string; value: DDN.mscorlib.DNObject); overload;
    function get_Item(pars: TArray<DDN.mscorlib.DNObject>): DDN.mscorlib.DNObject; overload;
    procedure set_Item(pars: TArray<DDN.mscorlib.DNObject>; value: DDN.mscorlib.DNObject); overload;
    function get_UnderlyingSystemType: DDN.mscorlib.DNType;

  { fields getter & setter } 

   function __fakeFieldGet_engine: DNVsaEngine;
   procedure __fakeFieldSet_engine(value: DNVsaEngine);

  { fields } 

   property engine: DNVsaEngine read __fakeFieldGet_engine write __fakeFieldSet_engine;

  { methods } 

    function CreateInstance(args: TArray<DDN.mscorlib.DNObject>): DNEnumeratorObject;
    function Invoke: DDN.mscorlib.DNObject; overload;
    function Invoke(thisob: DDN.mscorlib.DNObject; args: TArray<DDN.mscorlib.DNObject>): DDN.mscorlib.DNObject; overload;
    function InvokeMember(name: string; invokeAttr: DDN.mscorlib.DNBindingFlags; binder: DDN.mscorlib.DNBinder; target: DDN.mscorlib.DNObject; args: TArray<DDN.mscorlib.DNObject>; modifiers: TArray<DDN.mscorlib.DNParameterModifier>; culture: DDN.mscorlib.DNCultureInfo; namedParameters: TArray<string>): DDN.mscorlib.DNObject;
    function ToString: string;
    function AddField(name: string): DDN.mscorlib.DNFieldInfo;
    function GetMember(name: string; bindingAttr: DDN.mscorlib.DNBindingFlags): TArray<DDN.mscorlib.DNMemberInfo>;
    procedure SetMemberValue2(name: string; value: DDN.mscorlib.DNObject);
    function GetMembers(bindingAttr: DDN.mscorlib.DNBindingFlags): TArray<DDN.mscorlib.DNMemberInfo>;
    function GetField(name: string; bindingAttr: DDN.mscorlib.DNBindingFlags): DDN.mscorlib.DNFieldInfo;
    function GetMethod(name: string; bindingAttr: DDN.mscorlib.DNBindingFlags): DDN.mscorlib.DNMethodInfo; overload;
    function GetParent: DNScriptObject;
    function GetProperty(name: string; bindingAttr: DDN.mscorlib.DNBindingFlags): DDN.mscorlib.DNPropertyInfo; overload;
    function GetFields(bindingAttr: DDN.mscorlib.DNBindingFlags): TArray<DDN.mscorlib.DNFieldInfo>;
    function GetMethod(name: string; bindingAttr: DDN.mscorlib.DNBindingFlags; binder: DDN.mscorlib.DNBinder; types: TArray<DDN.mscorlib.DNType>; modifiers: TArray<DDN.mscorlib.DNParameterModifier>): DDN.mscorlib.DNMethodInfo; overload;
    function GetMethods(bindingAttr: DDN.mscorlib.DNBindingFlags): TArray<DDN.mscorlib.DNMethodInfo>;
    function GetProperty(name: string; bindingAttr: DDN.mscorlib.DNBindingFlags; binder: DDN.mscorlib.DNBinder; returnType: DDN.mscorlib.DNType; types: TArray<DDN.mscorlib.DNType>; modifiers: TArray<DDN.mscorlib.DNParameterModifier>): DDN.mscorlib.DNPropertyInfo; overload;
    function GetProperties(bindingAttr: DDN.mscorlib.DNBindingFlags): TArray<DDN.mscorlib.DNPropertyInfo>;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    property length: Int32 read get_length write set_length;
    property prototype: DDN.mscorlib.DNObject read get_prototype write set_prototype;
    property Item[index: Double]: DDN.mscorlib.DNObject read get_Item write set_Item; default;
    property Item[index: Int32]: DDN.mscorlib.DNObject read get_Item write set_Item; default;
    property Item[name: string]: DDN.mscorlib.DNObject read get_Item write set_Item; default;
    property Item[pars: TArray<DDN.mscorlib.DNObject>]: DDN.mscorlib.DNObject read get_Item write set_Item; default;
    property UnderlyingSystemType: DDN.mscorlib.DNType read get_UnderlyingSystemType;
  end;

  TDNEnumeratorConstructor = class(TDNGenericImport<DNEnumeratorConstructorClass, DNEnumeratorConstructor>) end;

  //-------------namespace: Microsoft.JScript----------------
  DNErrorConstructorClass = interface(DNScriptFunctionClass)
  ['{1B9E0AD4-B67A-553B-8996-11D434B0CA9B}']
  end;

  [DNTypeName('Microsoft.JScript.ErrorConstructor')]
  DNErrorConstructor = interface(DNScriptFunction)
  ['{031BB8A0-7F93-37F1-857B-9CA3DD7F35EF}']
  { getters & setters } 

    function get_length: Int32;
    procedure set_length(value: Int32);
    function get_prototype: DDN.mscorlib.DNObject;
    procedure set_prototype(value: DDN.mscorlib.DNObject);
    function get_Item(index: Double): DDN.mscorlib.DNObject; overload;
    procedure set_Item(index: Double; value: DDN.mscorlib.DNObject); overload;
    function get_Item(index: Int32): DDN.mscorlib.DNObject; overload;
    procedure set_Item(index: Int32; value: DDN.mscorlib.DNObject); overload;
    function get_Item(name: string): DDN.mscorlib.DNObject; overload;
    procedure set_Item(name: string; value: DDN.mscorlib.DNObject); overload;
    function get_Item(pars: TArray<DDN.mscorlib.DNObject>): DDN.mscorlib.DNObject; overload;
    procedure set_Item(pars: TArray<DDN.mscorlib.DNObject>; value: DDN.mscorlib.DNObject); overload;
    function get_UnderlyingSystemType: DDN.mscorlib.DNType;

  { fields getter & setter } 

   function __fakeFieldGet_engine: DNVsaEngine;
   procedure __fakeFieldSet_engine(value: DNVsaEngine);

  { fields } 

   property engine: DNVsaEngine read __fakeFieldGet_engine write __fakeFieldSet_engine;

  { methods } 

    function CreateInstance(args: TArray<DDN.mscorlib.DNObject>): DNErrorObject;
    function Invoke(args: TArray<DDN.mscorlib.DNObject>): DDN.mscorlib.DNObject; overload;
    function Invoke(thisob: DDN.mscorlib.DNObject; args: TArray<DDN.mscorlib.DNObject>): DDN.mscorlib.DNObject; overload;
    function InvokeMember(name: string; invokeAttr: DDN.mscorlib.DNBindingFlags; binder: DDN.mscorlib.DNBinder; target: DDN.mscorlib.DNObject; args: TArray<DDN.mscorlib.DNObject>; modifiers: TArray<DDN.mscorlib.DNParameterModifier>; culture: DDN.mscorlib.DNCultureInfo; namedParameters: TArray<string>): DDN.mscorlib.DNObject;
    function ToString: string;
    function AddField(name: string): DDN.mscorlib.DNFieldInfo;
    function GetMember(name: string; bindingAttr: DDN.mscorlib.DNBindingFlags): TArray<DDN.mscorlib.DNMemberInfo>;
    procedure SetMemberValue2(name: string; value: DDN.mscorlib.DNObject);
    function GetMembers(bindingAttr: DDN.mscorlib.DNBindingFlags): TArray<DDN.mscorlib.DNMemberInfo>;
    function GetField(name: string; bindingAttr: DDN.mscorlib.DNBindingFlags): DDN.mscorlib.DNFieldInfo;
    function GetMethod(name: string; bindingAttr: DDN.mscorlib.DNBindingFlags): DDN.mscorlib.DNMethodInfo; overload;
    function GetParent: DNScriptObject;
    function GetProperty(name: string; bindingAttr: DDN.mscorlib.DNBindingFlags): DDN.mscorlib.DNPropertyInfo; overload;
    function GetFields(bindingAttr: DDN.mscorlib.DNBindingFlags): TArray<DDN.mscorlib.DNFieldInfo>;
    function GetMethod(name: string; bindingAttr: DDN.mscorlib.DNBindingFlags; binder: DDN.mscorlib.DNBinder; types: TArray<DDN.mscorlib.DNType>; modifiers: TArray<DDN.mscorlib.DNParameterModifier>): DDN.mscorlib.DNMethodInfo; overload;
    function GetMethods(bindingAttr: DDN.mscorlib.DNBindingFlags): TArray<DDN.mscorlib.DNMethodInfo>;
    function GetProperty(name: string; bindingAttr: DDN.mscorlib.DNBindingFlags; binder: DDN.mscorlib.DNBinder; returnType: DDN.mscorlib.DNType; types: TArray<DDN.mscorlib.DNType>; modifiers: TArray<DDN.mscorlib.DNParameterModifier>): DDN.mscorlib.DNPropertyInfo; overload;
    function GetProperties(bindingAttr: DDN.mscorlib.DNBindingFlags): TArray<DDN.mscorlib.DNPropertyInfo>;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    property length: Int32 read get_length write set_length;
    property prototype: DDN.mscorlib.DNObject read get_prototype write set_prototype;
    property Item[index: Double]: DDN.mscorlib.DNObject read get_Item write set_Item; default;
    property Item[index: Int32]: DDN.mscorlib.DNObject read get_Item write set_Item; default;
    property Item[name: string]: DDN.mscorlib.DNObject read get_Item write set_Item; default;
    property Item[pars: TArray<DDN.mscorlib.DNObject>]: DDN.mscorlib.DNObject read get_Item write set_Item; default;
    property UnderlyingSystemType: DDN.mscorlib.DNType read get_UnderlyingSystemType;
  end;

  TDNErrorConstructor = class(TDNGenericImport<DNErrorConstructorClass, DNErrorConstructor>) end;

  //-------------namespace: Microsoft.JScript----------------
  DNFunctionConstructorClass = interface(DNScriptFunctionClass)
  ['{D0BDD0F8-3B93-58DA-9CD4-34C61493157C}']
  end;

  [DNTypeName('Microsoft.JScript.FunctionConstructor')]
  DNFunctionConstructor = interface(DNScriptFunction)
  ['{ADC53C69-DB12-32A2-AAC6-D71E652BE9E3}']
  { getters & setters } 

    function get_length: Int32;
    procedure set_length(value: Int32);
    function get_prototype: DDN.mscorlib.DNObject;
    procedure set_prototype(value: DDN.mscorlib.DNObject);
    function get_Item(index: Double): DDN.mscorlib.DNObject; overload;
    procedure set_Item(index: Double; value: DDN.mscorlib.DNObject); overload;
    function get_Item(index: Int32): DDN.mscorlib.DNObject; overload;
    procedure set_Item(index: Int32; value: DDN.mscorlib.DNObject); overload;
    function get_Item(name: string): DDN.mscorlib.DNObject; overload;
    procedure set_Item(name: string; value: DDN.mscorlib.DNObject); overload;
    function get_Item(pars: TArray<DDN.mscorlib.DNObject>): DDN.mscorlib.DNObject; overload;
    procedure set_Item(pars: TArray<DDN.mscorlib.DNObject>; value: DDN.mscorlib.DNObject); overload;
    function get_UnderlyingSystemType: DDN.mscorlib.DNType;

  { fields getter & setter } 

   function __fakeFieldGet_engine: DNVsaEngine;
   procedure __fakeFieldSet_engine(value: DNVsaEngine);

  { fields } 

   property engine: DNVsaEngine read __fakeFieldGet_engine write __fakeFieldSet_engine;

  { methods } 

    function CreateInstance(args: TArray<DDN.mscorlib.DNObject>): DNScriptFunction;
    function Invoke(args: TArray<DDN.mscorlib.DNObject>): DNScriptFunction; overload;
    function Invoke(thisob: DDN.mscorlib.DNObject; args: TArray<DDN.mscorlib.DNObject>): DDN.mscorlib.DNObject; overload;
    function InvokeMember(name: string; invokeAttr: DDN.mscorlib.DNBindingFlags; binder: DDN.mscorlib.DNBinder; target: DDN.mscorlib.DNObject; args: TArray<DDN.mscorlib.DNObject>; modifiers: TArray<DDN.mscorlib.DNParameterModifier>; culture: DDN.mscorlib.DNCultureInfo; namedParameters: TArray<string>): DDN.mscorlib.DNObject;
    function ToString: string;
    function AddField(name: string): DDN.mscorlib.DNFieldInfo;
    function GetMember(name: string; bindingAttr: DDN.mscorlib.DNBindingFlags): TArray<DDN.mscorlib.DNMemberInfo>;
    procedure SetMemberValue2(name: string; value: DDN.mscorlib.DNObject);
    function GetMembers(bindingAttr: DDN.mscorlib.DNBindingFlags): TArray<DDN.mscorlib.DNMemberInfo>;
    function GetField(name: string; bindingAttr: DDN.mscorlib.DNBindingFlags): DDN.mscorlib.DNFieldInfo;
    function GetMethod(name: string; bindingAttr: DDN.mscorlib.DNBindingFlags): DDN.mscorlib.DNMethodInfo; overload;
    function GetParent: DNScriptObject;
    function GetProperty(name: string; bindingAttr: DDN.mscorlib.DNBindingFlags): DDN.mscorlib.DNPropertyInfo; overload;
    function GetFields(bindingAttr: DDN.mscorlib.DNBindingFlags): TArray<DDN.mscorlib.DNFieldInfo>;
    function GetMethod(name: string; bindingAttr: DDN.mscorlib.DNBindingFlags; binder: DDN.mscorlib.DNBinder; types: TArray<DDN.mscorlib.DNType>; modifiers: TArray<DDN.mscorlib.DNParameterModifier>): DDN.mscorlib.DNMethodInfo; overload;
    function GetMethods(bindingAttr: DDN.mscorlib.DNBindingFlags): TArray<DDN.mscorlib.DNMethodInfo>;
    function GetProperty(name: string; bindingAttr: DDN.mscorlib.DNBindingFlags; binder: DDN.mscorlib.DNBinder; returnType: DDN.mscorlib.DNType; types: TArray<DDN.mscorlib.DNType>; modifiers: TArray<DDN.mscorlib.DNParameterModifier>): DDN.mscorlib.DNPropertyInfo; overload;
    function GetProperties(bindingAttr: DDN.mscorlib.DNBindingFlags): TArray<DDN.mscorlib.DNPropertyInfo>;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    property length: Int32 read get_length write set_length;
    property prototype: DDN.mscorlib.DNObject read get_prototype write set_prototype;
    property Item[index: Double]: DDN.mscorlib.DNObject read get_Item write set_Item; default;
    property Item[index: Int32]: DDN.mscorlib.DNObject read get_Item write set_Item; default;
    property Item[name: string]: DDN.mscorlib.DNObject read get_Item write set_Item; default;
    property Item[pars: TArray<DDN.mscorlib.DNObject>]: DDN.mscorlib.DNObject read get_Item write set_Item; default;
    property UnderlyingSystemType: DDN.mscorlib.DNType read get_UnderlyingSystemType;
  end;

  TDNFunctionConstructor = class(TDNGenericImport<DNFunctionConstructorClass, DNFunctionConstructor>) end;

  //-------------namespace: Microsoft.JScript----------------
  DNFunctionObjectClass = interface(DNScriptFunctionClass)
  ['{384CC6A9-CC97-5696-9984-17E4FE97A917}']
  end;

  [DNTypeName('Microsoft.JScript.FunctionObject')]
  DNFunctionObject = interface(DNScriptFunction)
  ['{6FAE3171-E570-3A7F-B6EA-E6F2EAD6ABD0}']
  { getters & setters } 

    function get_length: Int32;
    procedure set_length(value: Int32);
    function get_prototype: DDN.mscorlib.DNObject;
    procedure set_prototype(value: DDN.mscorlib.DNObject);
    function get_Item(index: Double): DDN.mscorlib.DNObject; overload;
    procedure set_Item(index: Double; value: DDN.mscorlib.DNObject); overload;
    function get_Item(index: Int32): DDN.mscorlib.DNObject; overload;
    procedure set_Item(index: Int32; value: DDN.mscorlib.DNObject); overload;
    function get_Item(name: string): DDN.mscorlib.DNObject; overload;
    procedure set_Item(name: string; value: DDN.mscorlib.DNObject); overload;
    function get_Item(pars: TArray<DDN.mscorlib.DNObject>): DDN.mscorlib.DNObject; overload;
    procedure set_Item(pars: TArray<DDN.mscorlib.DNObject>; value: DDN.mscorlib.DNObject); overload;
    function get_UnderlyingSystemType: DDN.mscorlib.DNType;

  { fields getter & setter } 

   function __fakeFieldGet_engine: DNVsaEngine;
   procedure __fakeFieldSet_engine(value: DNVsaEngine);

  { fields } 

   property engine: DNVsaEngine read __fakeFieldGet_engine write __fakeFieldSet_engine;

  { methods } 

    function ToString: string;
    function CreateInstance(args: TArray<DDN.mscorlib.DNObject>): DDN.mscorlib.DNObject;
    function Invoke(thisob: DDN.mscorlib.DNObject; args: TArray<DDN.mscorlib.DNObject>): DDN.mscorlib.DNObject;
    function InvokeMember(name: string; invokeAttr: DDN.mscorlib.DNBindingFlags; binder: DDN.mscorlib.DNBinder; target: DDN.mscorlib.DNObject; args: TArray<DDN.mscorlib.DNObject>; modifiers: TArray<DDN.mscorlib.DNParameterModifier>; culture: DDN.mscorlib.DNCultureInfo; namedParameters: TArray<string>): DDN.mscorlib.DNObject;
    function AddField(name: string): DDN.mscorlib.DNFieldInfo;
    function GetMember(name: string; bindingAttr: DDN.mscorlib.DNBindingFlags): TArray<DDN.mscorlib.DNMemberInfo>;
    procedure SetMemberValue2(name: string; value: DDN.mscorlib.DNObject);
    function GetMembers(bindingAttr: DDN.mscorlib.DNBindingFlags): TArray<DDN.mscorlib.DNMemberInfo>;
    function GetField(name: string; bindingAttr: DDN.mscorlib.DNBindingFlags): DDN.mscorlib.DNFieldInfo;
    function GetMethod(name: string; bindingAttr: DDN.mscorlib.DNBindingFlags): DDN.mscorlib.DNMethodInfo; overload;
    function GetParent: DNScriptObject;
    function GetProperty(name: string; bindingAttr: DDN.mscorlib.DNBindingFlags): DDN.mscorlib.DNPropertyInfo; overload;
    function GetFields(bindingAttr: DDN.mscorlib.DNBindingFlags): TArray<DDN.mscorlib.DNFieldInfo>;
    function GetMethod(name: string; bindingAttr: DDN.mscorlib.DNBindingFlags; binder: DDN.mscorlib.DNBinder; types: TArray<DDN.mscorlib.DNType>; modifiers: TArray<DDN.mscorlib.DNParameterModifier>): DDN.mscorlib.DNMethodInfo; overload;
    function GetMethods(bindingAttr: DDN.mscorlib.DNBindingFlags): TArray<DDN.mscorlib.DNMethodInfo>;
    function GetProperty(name: string; bindingAttr: DDN.mscorlib.DNBindingFlags; binder: DDN.mscorlib.DNBinder; returnType: DDN.mscorlib.DNType; types: TArray<DDN.mscorlib.DNType>; modifiers: TArray<DDN.mscorlib.DNParameterModifier>): DDN.mscorlib.DNPropertyInfo; overload;
    function GetProperties(bindingAttr: DDN.mscorlib.DNBindingFlags): TArray<DDN.mscorlib.DNPropertyInfo>;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    property length: Int32 read get_length write set_length;
    property prototype: DDN.mscorlib.DNObject read get_prototype write set_prototype;
    property Item[index: Double]: DDN.mscorlib.DNObject read get_Item write set_Item; default;
    property Item[index: Int32]: DDN.mscorlib.DNObject read get_Item write set_Item; default;
    property Item[name: string]: DDN.mscorlib.DNObject read get_Item write set_Item; default;
    property Item[pars: TArray<DDN.mscorlib.DNObject>]: DDN.mscorlib.DNObject read get_Item write set_Item; default;
    property UnderlyingSystemType: DDN.mscorlib.DNType read get_UnderlyingSystemType;
  end;

  TDNFunctionObject = class(TDNGenericImport<DNFunctionObjectClass, DNFunctionObject>) end;

  //-------------namespace: Microsoft.JScript----------------
  DNFunctionPrototypeClass = interface(DNScriptFunctionClass)
  ['{CCB4CFDF-83DC-5C98-A87A-12F8478DE2E2}']
  { static getter & setter } 

    {class} function get_constructor: DNFunctionConstructor;

  { static methods } 

    {class} function call(thisob: DDN.mscorlib.DNObject; thisarg: DDN.mscorlib.DNObject; args: TArray<DDN.mscorlib.DNObject>): DDN.mscorlib.DNObject;
    {class} function toString(thisob: DDN.mscorlib.DNObject): string; overload;
    {class} function apply(thisob: DDN.mscorlib.DNObject; thisarg: DDN.mscorlib.DNObject; argArray: DDN.mscorlib.DNObject): DDN.mscorlib.DNObject;

  { static propertys } 

    {class} property &constructor: DNFunctionConstructor read get_constructor;
  end;

  [DNTypeName('Microsoft.JScript.FunctionPrototype')]
  DNFunctionPrototype = interface(DNScriptFunction)
  ['{A8BD3646-7160-320F-A79B-61356CB9E4CA}']
  { getters & setters } 

    function get_length: Int32;
    procedure set_length(value: Int32);
    function get_prototype: DDN.mscorlib.DNObject;
    procedure set_prototype(value: DDN.mscorlib.DNObject);
    function get_Item(index: Double): DDN.mscorlib.DNObject; overload;
    procedure set_Item(index: Double; value: DDN.mscorlib.DNObject); overload;
    function get_Item(index: Int32): DDN.mscorlib.DNObject; overload;
    procedure set_Item(index: Int32; value: DDN.mscorlib.DNObject); overload;
    function get_Item(name: string): DDN.mscorlib.DNObject; overload;
    procedure set_Item(name: string; value: DDN.mscorlib.DNObject); overload;
    function get_Item(pars: TArray<DDN.mscorlib.DNObject>): DDN.mscorlib.DNObject; overload;
    procedure set_Item(pars: TArray<DDN.mscorlib.DNObject>; value: DDN.mscorlib.DNObject); overload;
    function get_UnderlyingSystemType: DDN.mscorlib.DNType;

  { fields getter & setter } 

   function __fakeFieldGet_engine: DNVsaEngine;
   procedure __fakeFieldSet_engine(value: DNVsaEngine);

  { fields } 

   property engine: DNVsaEngine read __fakeFieldGet_engine write __fakeFieldSet_engine;

  { methods } 

    function CreateInstance(args: TArray<DDN.mscorlib.DNObject>): DDN.mscorlib.DNObject;
    function Invoke(thisob: DDN.mscorlib.DNObject; args: TArray<DDN.mscorlib.DNObject>): DDN.mscorlib.DNObject;
    function InvokeMember(name: string; invokeAttr: DDN.mscorlib.DNBindingFlags; binder: DDN.mscorlib.DNBinder; target: DDN.mscorlib.DNObject; args: TArray<DDN.mscorlib.DNObject>; modifiers: TArray<DDN.mscorlib.DNParameterModifier>; culture: DDN.mscorlib.DNCultureInfo; namedParameters: TArray<string>): DDN.mscorlib.DNObject;
    function ToString: string; overload;
    function AddField(name: string): DDN.mscorlib.DNFieldInfo;
    function GetMember(name: string; bindingAttr: DDN.mscorlib.DNBindingFlags): TArray<DDN.mscorlib.DNMemberInfo>;
    procedure SetMemberValue2(name: string; value: DDN.mscorlib.DNObject);
    function GetMembers(bindingAttr: DDN.mscorlib.DNBindingFlags): TArray<DDN.mscorlib.DNMemberInfo>;
    function GetField(name: string; bindingAttr: DDN.mscorlib.DNBindingFlags): DDN.mscorlib.DNFieldInfo;
    function GetMethod(name: string; bindingAttr: DDN.mscorlib.DNBindingFlags): DDN.mscorlib.DNMethodInfo; overload;
    function GetParent: DNScriptObject;
    function GetProperty(name: string; bindingAttr: DDN.mscorlib.DNBindingFlags): DDN.mscorlib.DNPropertyInfo; overload;
    function GetFields(bindingAttr: DDN.mscorlib.DNBindingFlags): TArray<DDN.mscorlib.DNFieldInfo>;
    function GetMethod(name: string; bindingAttr: DDN.mscorlib.DNBindingFlags; binder: DDN.mscorlib.DNBinder; types: TArray<DDN.mscorlib.DNType>; modifiers: TArray<DDN.mscorlib.DNParameterModifier>): DDN.mscorlib.DNMethodInfo; overload;
    function GetMethods(bindingAttr: DDN.mscorlib.DNBindingFlags): TArray<DDN.mscorlib.DNMethodInfo>;
    function GetProperty(name: string; bindingAttr: DDN.mscorlib.DNBindingFlags; binder: DDN.mscorlib.DNBinder; returnType: DDN.mscorlib.DNType; types: TArray<DDN.mscorlib.DNType>; modifiers: TArray<DDN.mscorlib.DNParameterModifier>): DDN.mscorlib.DNPropertyInfo; overload;
    function GetProperties(bindingAttr: DDN.mscorlib.DNBindingFlags): TArray<DDN.mscorlib.DNPropertyInfo>;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    property length: Int32 read get_length write set_length;
    property prototype: DDN.mscorlib.DNObject read get_prototype write set_prototype;
    property Item[index: Double]: DDN.mscorlib.DNObject read get_Item write set_Item; default;
    property Item[index: Int32]: DDN.mscorlib.DNObject read get_Item write set_Item; default;
    property Item[name: string]: DDN.mscorlib.DNObject read get_Item write set_Item; default;
    property Item[pars: TArray<DDN.mscorlib.DNObject>]: DDN.mscorlib.DNObject read get_Item write set_Item; default;
    property UnderlyingSystemType: DDN.mscorlib.DNType read get_UnderlyingSystemType;
  end;

  TDNFunctionPrototype = class(TDNGenericImport<DNFunctionPrototypeClass, DNFunctionPrototype>) end;

  //-------------namespace: Microsoft.JScript----------------
  DNLenientFunctionPrototypeClass = interface(DNFunctionPrototypeClass)
  ['{534D2E0A-779A-56C7-8151-D11753CA1B6E}']
  end;

  [DNTypeName('Microsoft.JScript.LenientFunctionPrototype')]
  DNLenientFunctionPrototype = interface(DNFunctionPrototype)
  ['{8615D14A-A07E-3D75-B3DB-FCDBBA6A5000}']
  { getters & setters } 

    function get_length: Int32;
    procedure set_length(value: Int32);
    function get_prototype: DDN.mscorlib.DNObject;
    procedure set_prototype(value: DDN.mscorlib.DNObject);
    function get_Item(index: Double): DDN.mscorlib.DNObject; overload;
    procedure set_Item(index: Double; value: DDN.mscorlib.DNObject); overload;
    function get_Item(index: Int32): DDN.mscorlib.DNObject; overload;
    procedure set_Item(index: Int32; value: DDN.mscorlib.DNObject); overload;
    function get_Item(name: string): DDN.mscorlib.DNObject; overload;
    procedure set_Item(name: string; value: DDN.mscorlib.DNObject); overload;
    function get_Item(pars: TArray<DDN.mscorlib.DNObject>): DDN.mscorlib.DNObject; overload;
    procedure set_Item(pars: TArray<DDN.mscorlib.DNObject>; value: DDN.mscorlib.DNObject); overload;
    function get_UnderlyingSystemType: DDN.mscorlib.DNType;

  { fields getter & setter } 

   function __fakeFieldGet_constructor: DDN.mscorlib.DNObject;
   procedure __fakeFieldSet_constructor(value: DDN.mscorlib.DNObject);
   function __fakeFieldGet_apply: DDN.mscorlib.DNObject;
   procedure __fakeFieldSet_apply(value: DDN.mscorlib.DNObject);
   function __fakeFieldGet_call: DDN.mscorlib.DNObject;
   procedure __fakeFieldSet_call(value: DDN.mscorlib.DNObject);
   function __fakeFieldGet_toString: DDN.mscorlib.DNObject;
   procedure __fakeFieldSet_toString(value: DDN.mscorlib.DNObject);
   function __fakeFieldGet_engine: DNVsaEngine;
   procedure __fakeFieldSet_engine(value: DNVsaEngine);

  { fields } 

   property &constructor: DDN.mscorlib.DNObject read __fakeFieldGet_constructor write __fakeFieldSet_constructor;
   property apply: DDN.mscorlib.DNObject read __fakeFieldGet_apply write __fakeFieldSet_apply;
   property call: DDN.mscorlib.DNObject read __fakeFieldGet_call write __fakeFieldSet_call;
   property toString_: DDN.mscorlib.DNObject read __fakeFieldGet_toString write __fakeFieldSet_toString;
   property engine: DNVsaEngine read __fakeFieldGet_engine write __fakeFieldSet_engine;

  { methods } 

    function CreateInstance(args: TArray<DDN.mscorlib.DNObject>): DDN.mscorlib.DNObject;
    function Invoke(thisob: DDN.mscorlib.DNObject; args: TArray<DDN.mscorlib.DNObject>): DDN.mscorlib.DNObject;
    function InvokeMember(name: string; invokeAttr: DDN.mscorlib.DNBindingFlags; binder: DDN.mscorlib.DNBinder; target: DDN.mscorlib.DNObject; args: TArray<DDN.mscorlib.DNObject>; modifiers: TArray<DDN.mscorlib.DNParameterModifier>; culture: DDN.mscorlib.DNCultureInfo; namedParameters: TArray<string>): DDN.mscorlib.DNObject;
    function ToString: string;
    function AddField(name: string): DDN.mscorlib.DNFieldInfo;
    function GetMember(name: string; bindingAttr: DDN.mscorlib.DNBindingFlags): TArray<DDN.mscorlib.DNMemberInfo>;
    procedure SetMemberValue2(name: string; value: DDN.mscorlib.DNObject);
    function GetMembers(bindingAttr: DDN.mscorlib.DNBindingFlags): TArray<DDN.mscorlib.DNMemberInfo>;
    function GetField(name: string; bindingAttr: DDN.mscorlib.DNBindingFlags): DDN.mscorlib.DNFieldInfo;
    function GetMethod(name: string; bindingAttr: DDN.mscorlib.DNBindingFlags): DDN.mscorlib.DNMethodInfo; overload;
    function GetParent: DNScriptObject;
    function GetProperty(name: string; bindingAttr: DDN.mscorlib.DNBindingFlags): DDN.mscorlib.DNPropertyInfo; overload;
    function GetFields(bindingAttr: DDN.mscorlib.DNBindingFlags): TArray<DDN.mscorlib.DNFieldInfo>;
    function GetMethod(name: string; bindingAttr: DDN.mscorlib.DNBindingFlags; binder: DDN.mscorlib.DNBinder; types: TArray<DDN.mscorlib.DNType>; modifiers: TArray<DDN.mscorlib.DNParameterModifier>): DDN.mscorlib.DNMethodInfo; overload;
    function GetMethods(bindingAttr: DDN.mscorlib.DNBindingFlags): TArray<DDN.mscorlib.DNMethodInfo>;
    function GetProperty(name: string; bindingAttr: DDN.mscorlib.DNBindingFlags; binder: DDN.mscorlib.DNBinder; returnType: DDN.mscorlib.DNType; types: TArray<DDN.mscorlib.DNType>; modifiers: TArray<DDN.mscorlib.DNParameterModifier>): DDN.mscorlib.DNPropertyInfo; overload;
    function GetProperties(bindingAttr: DDN.mscorlib.DNBindingFlags): TArray<DDN.mscorlib.DNPropertyInfo>;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    property length: Int32 read get_length write set_length;
    property prototype: DDN.mscorlib.DNObject read get_prototype write set_prototype;
    property Item[index: Double]: DDN.mscorlib.DNObject read get_Item write set_Item; default;
    property Item[index: Int32]: DDN.mscorlib.DNObject read get_Item write set_Item; default;
    property Item[name: string]: DDN.mscorlib.DNObject read get_Item write set_Item; default;
    property Item[pars: TArray<DDN.mscorlib.DNObject>]: DDN.mscorlib.DNObject read get_Item write set_Item; default;
    property UnderlyingSystemType: DDN.mscorlib.DNType read get_UnderlyingSystemType;
  end;

  TDNLenientFunctionPrototype = class(TDNGenericImport<DNLenientFunctionPrototypeClass, DNLenientFunctionPrototype>) end;

  //-------------namespace: Microsoft.JScript----------------
  DNFunctionWrapperClass = interface(DNScriptFunctionClass)
  ['{4A0160B1-4E4A-58E3-A103-D68AAC66C332}']
  end;

  [DNTypeName('Microsoft.JScript.FunctionWrapper')]
  DNFunctionWrapper = interface(DNScriptFunction)
  ['{42D2A11E-4D4E-3C09-95C5-7CB10FBA3065}']
  { getters & setters } 

    function get_length: Int32;
    procedure set_length(value: Int32);
    function get_prototype: DDN.mscorlib.DNObject;
    procedure set_prototype(value: DDN.mscorlib.DNObject);
    function get_Item(index: Double): DDN.mscorlib.DNObject; overload;
    procedure set_Item(index: Double; value: DDN.mscorlib.DNObject); overload;
    function get_Item(index: Int32): DDN.mscorlib.DNObject; overload;
    procedure set_Item(index: Int32; value: DDN.mscorlib.DNObject); overload;
    function get_Item(name: string): DDN.mscorlib.DNObject; overload;
    procedure set_Item(name: string; value: DDN.mscorlib.DNObject); overload;
    function get_Item(pars: TArray<DDN.mscorlib.DNObject>): DDN.mscorlib.DNObject; overload;
    procedure set_Item(pars: TArray<DDN.mscorlib.DNObject>; value: DDN.mscorlib.DNObject); overload;
    function get_UnderlyingSystemType: DDN.mscorlib.DNType;

  { fields getter & setter } 

   function __fakeFieldGet_engine: DNVsaEngine;
   procedure __fakeFieldSet_engine(value: DNVsaEngine);

  { fields } 

   property engine: DNVsaEngine read __fakeFieldGet_engine write __fakeFieldSet_engine;

  { methods } 

    function ToString: string;
    function CreateInstance(args: TArray<DDN.mscorlib.DNObject>): DDN.mscorlib.DNObject;
    function Invoke(thisob: DDN.mscorlib.DNObject; args: TArray<DDN.mscorlib.DNObject>): DDN.mscorlib.DNObject;
    function InvokeMember(name: string; invokeAttr: DDN.mscorlib.DNBindingFlags; binder: DDN.mscorlib.DNBinder; target: DDN.mscorlib.DNObject; args: TArray<DDN.mscorlib.DNObject>; modifiers: TArray<DDN.mscorlib.DNParameterModifier>; culture: DDN.mscorlib.DNCultureInfo; namedParameters: TArray<string>): DDN.mscorlib.DNObject;
    function AddField(name: string): DDN.mscorlib.DNFieldInfo;
    function GetMember(name: string; bindingAttr: DDN.mscorlib.DNBindingFlags): TArray<DDN.mscorlib.DNMemberInfo>;
    procedure SetMemberValue2(name: string; value: DDN.mscorlib.DNObject);
    function GetMembers(bindingAttr: DDN.mscorlib.DNBindingFlags): TArray<DDN.mscorlib.DNMemberInfo>;
    function GetField(name: string; bindingAttr: DDN.mscorlib.DNBindingFlags): DDN.mscorlib.DNFieldInfo;
    function GetMethod(name: string; bindingAttr: DDN.mscorlib.DNBindingFlags): DDN.mscorlib.DNMethodInfo; overload;
    function GetParent: DNScriptObject;
    function GetProperty(name: string; bindingAttr: DDN.mscorlib.DNBindingFlags): DDN.mscorlib.DNPropertyInfo; overload;
    function GetFields(bindingAttr: DDN.mscorlib.DNBindingFlags): TArray<DDN.mscorlib.DNFieldInfo>;
    function GetMethod(name: string; bindingAttr: DDN.mscorlib.DNBindingFlags; binder: DDN.mscorlib.DNBinder; types: TArray<DDN.mscorlib.DNType>; modifiers: TArray<DDN.mscorlib.DNParameterModifier>): DDN.mscorlib.DNMethodInfo; overload;
    function GetMethods(bindingAttr: DDN.mscorlib.DNBindingFlags): TArray<DDN.mscorlib.DNMethodInfo>;
    function GetProperty(name: string; bindingAttr: DDN.mscorlib.DNBindingFlags; binder: DDN.mscorlib.DNBinder; returnType: DDN.mscorlib.DNType; types: TArray<DDN.mscorlib.DNType>; modifiers: TArray<DDN.mscorlib.DNParameterModifier>): DDN.mscorlib.DNPropertyInfo; overload;
    function GetProperties(bindingAttr: DDN.mscorlib.DNBindingFlags): TArray<DDN.mscorlib.DNPropertyInfo>;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    property length: Int32 read get_length write set_length;
    property prototype: DDN.mscorlib.DNObject read get_prototype write set_prototype;
    property Item[index: Double]: DDN.mscorlib.DNObject read get_Item write set_Item; default;
    property Item[index: Int32]: DDN.mscorlib.DNObject read get_Item write set_Item; default;
    property Item[name: string]: DDN.mscorlib.DNObject read get_Item write set_Item; default;
    property Item[pars: TArray<DDN.mscorlib.DNObject>]: DDN.mscorlib.DNObject read get_Item write set_Item; default;
    property UnderlyingSystemType: DDN.mscorlib.DNType read get_UnderlyingSystemType;
  end;

  TDNFunctionWrapper = class(TDNGenericImport<DNFunctionWrapperClass, DNFunctionWrapper>) end;

  //-------------namespace: Microsoft.JScript----------------
  DNNumberConstructorClass = interface(DNScriptFunctionClass)
  ['{155824BC-5DFF-5919-B98E-CF971CAD0A60}']
  end;

  [DNTypeName('Microsoft.JScript.NumberConstructor')]
  DNNumberConstructor = interface(DNScriptFunction)
  ['{C3415341-A234-32B5-8142-2483AC2EADC6}']
  { getters & setters } 

    function get_length: Int32;
    procedure set_length(value: Int32);
    function get_prototype: DDN.mscorlib.DNObject;
    procedure set_prototype(value: DDN.mscorlib.DNObject);
    function get_Item(index: Double): DDN.mscorlib.DNObject; overload;
    procedure set_Item(index: Double; value: DDN.mscorlib.DNObject); overload;
    function get_Item(index: Int32): DDN.mscorlib.DNObject; overload;
    procedure set_Item(index: Int32; value: DDN.mscorlib.DNObject); overload;
    function get_Item(name: string): DDN.mscorlib.DNObject; overload;
    procedure set_Item(name: string; value: DDN.mscorlib.DNObject); overload;
    function get_Item(pars: TArray<DDN.mscorlib.DNObject>): DDN.mscorlib.DNObject; overload;
    procedure set_Item(pars: TArray<DDN.mscorlib.DNObject>; value: DDN.mscorlib.DNObject); overload;
    function get_UnderlyingSystemType: DDN.mscorlib.DNType;

  { fields getter & setter } 

   function __fakeFieldGet_engine: DNVsaEngine;
   procedure __fakeFieldSet_engine(value: DNVsaEngine);

  { fields } 

   property engine: DNVsaEngine read __fakeFieldGet_engine write __fakeFieldSet_engine;

  { methods } 

    function CreateInstance(args: TArray<DDN.mscorlib.DNObject>): DNNumberObject;
    function Invoke(arg: DDN.mscorlib.DNObject): Double; overload;
    function Invoke(thisob: DDN.mscorlib.DNObject; args: TArray<DDN.mscorlib.DNObject>): DDN.mscorlib.DNObject; overload;
    function InvokeMember(name: string; invokeAttr: DDN.mscorlib.DNBindingFlags; binder: DDN.mscorlib.DNBinder; target: DDN.mscorlib.DNObject; args: TArray<DDN.mscorlib.DNObject>; modifiers: TArray<DDN.mscorlib.DNParameterModifier>; culture: DDN.mscorlib.DNCultureInfo; namedParameters: TArray<string>): DDN.mscorlib.DNObject;
    function ToString: string;
    function AddField(name: string): DDN.mscorlib.DNFieldInfo;
    function GetMember(name: string; bindingAttr: DDN.mscorlib.DNBindingFlags): TArray<DDN.mscorlib.DNMemberInfo>;
    procedure SetMemberValue2(name: string; value: DDN.mscorlib.DNObject);
    function GetMembers(bindingAttr: DDN.mscorlib.DNBindingFlags): TArray<DDN.mscorlib.DNMemberInfo>;
    function GetField(name: string; bindingAttr: DDN.mscorlib.DNBindingFlags): DDN.mscorlib.DNFieldInfo;
    function GetMethod(name: string; bindingAttr: DDN.mscorlib.DNBindingFlags): DDN.mscorlib.DNMethodInfo; overload;
    function GetParent: DNScriptObject;
    function GetProperty(name: string; bindingAttr: DDN.mscorlib.DNBindingFlags): DDN.mscorlib.DNPropertyInfo; overload;
    function GetFields(bindingAttr: DDN.mscorlib.DNBindingFlags): TArray<DDN.mscorlib.DNFieldInfo>;
    function GetMethod(name: string; bindingAttr: DDN.mscorlib.DNBindingFlags; binder: DDN.mscorlib.DNBinder; types: TArray<DDN.mscorlib.DNType>; modifiers: TArray<DDN.mscorlib.DNParameterModifier>): DDN.mscorlib.DNMethodInfo; overload;
    function GetMethods(bindingAttr: DDN.mscorlib.DNBindingFlags): TArray<DDN.mscorlib.DNMethodInfo>;
    function GetProperty(name: string; bindingAttr: DDN.mscorlib.DNBindingFlags; binder: DDN.mscorlib.DNBinder; returnType: DDN.mscorlib.DNType; types: TArray<DDN.mscorlib.DNType>; modifiers: TArray<DDN.mscorlib.DNParameterModifier>): DDN.mscorlib.DNPropertyInfo; overload;
    function GetProperties(bindingAttr: DDN.mscorlib.DNBindingFlags): TArray<DDN.mscorlib.DNPropertyInfo>;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    property length: Int32 read get_length write set_length;
    property prototype: DDN.mscorlib.DNObject read get_prototype write set_prototype;
    property Item[index: Double]: DDN.mscorlib.DNObject read get_Item write set_Item; default;
    property Item[index: Int32]: DDN.mscorlib.DNObject read get_Item write set_Item; default;
    property Item[name: string]: DDN.mscorlib.DNObject read get_Item write set_Item; default;
    property Item[pars: TArray<DDN.mscorlib.DNObject>]: DDN.mscorlib.DNObject read get_Item write set_Item; default;
    property UnderlyingSystemType: DDN.mscorlib.DNType read get_UnderlyingSystemType;
  end;

  TDNNumberConstructor = class(TDNGenericImport<DNNumberConstructorClass, DNNumberConstructor>)
  public const
   MAX_VALUE = 1.79769313486232E+308;
   MIN_VALUE = 4.94065645841247E-324;
  end;

  //-------------namespace: Microsoft.JScript----------------
  DNObjectConstructorClass = interface(DNScriptFunctionClass)
  ['{4E987A94-3613-5EB5-A7B5-0BC1B1A6E092}']
  end;

  [DNTypeName('Microsoft.JScript.ObjectConstructor')]
  DNObjectConstructor = interface(DNScriptFunction)
  ['{03F663AE-BF19-3655-98D8-5DAD7CC236D2}']
  { getters & setters } 

    function get_length: Int32;
    procedure set_length(value: Int32);
    function get_prototype: DDN.mscorlib.DNObject;
    procedure set_prototype(value: DDN.mscorlib.DNObject);
    function get_Item(index: Double): DDN.mscorlib.DNObject; overload;
    procedure set_Item(index: Double; value: DDN.mscorlib.DNObject); overload;
    function get_Item(index: Int32): DDN.mscorlib.DNObject; overload;
    procedure set_Item(index: Int32; value: DDN.mscorlib.DNObject); overload;
    function get_Item(name: string): DDN.mscorlib.DNObject; overload;
    procedure set_Item(name: string; value: DDN.mscorlib.DNObject); overload;
    function get_Item(pars: TArray<DDN.mscorlib.DNObject>): DDN.mscorlib.DNObject; overload;
    procedure set_Item(pars: TArray<DDN.mscorlib.DNObject>; value: DDN.mscorlib.DNObject); overload;
    function get_UnderlyingSystemType: DDN.mscorlib.DNType;

  { fields getter & setter } 

   function __fakeFieldGet_engine: DNVsaEngine;
   procedure __fakeFieldSet_engine(value: DNVsaEngine);

  { fields } 

   property engine: DNVsaEngine read __fakeFieldGet_engine write __fakeFieldSet_engine;

  { methods } 

    function ConstructObject: DNJSObject;
    function CreateInstance(args: TArray<DDN.mscorlib.DNObject>): DDN.mscorlib.DNObject;
    function Invoke(args: TArray<DDN.mscorlib.DNObject>): DDN.mscorlib.DNObject; overload;
    function Invoke(thisob: DDN.mscorlib.DNObject; args: TArray<DDN.mscorlib.DNObject>): DDN.mscorlib.DNObject; overload;
    function InvokeMember(name: string; invokeAttr: DDN.mscorlib.DNBindingFlags; binder: DDN.mscorlib.DNBinder; target: DDN.mscorlib.DNObject; args: TArray<DDN.mscorlib.DNObject>; modifiers: TArray<DDN.mscorlib.DNParameterModifier>; culture: DDN.mscorlib.DNCultureInfo; namedParameters: TArray<string>): DDN.mscorlib.DNObject;
    function ToString: string;
    function AddField(name: string): DDN.mscorlib.DNFieldInfo;
    function GetMember(name: string; bindingAttr: DDN.mscorlib.DNBindingFlags): TArray<DDN.mscorlib.DNMemberInfo>;
    procedure SetMemberValue2(name: string; value: DDN.mscorlib.DNObject);
    function GetMembers(bindingAttr: DDN.mscorlib.DNBindingFlags): TArray<DDN.mscorlib.DNMemberInfo>;
    function GetField(name: string; bindingAttr: DDN.mscorlib.DNBindingFlags): DDN.mscorlib.DNFieldInfo;
    function GetMethod(name: string; bindingAttr: DDN.mscorlib.DNBindingFlags): DDN.mscorlib.DNMethodInfo; overload;
    function GetParent: DNScriptObject;
    function GetProperty(name: string; bindingAttr: DDN.mscorlib.DNBindingFlags): DDN.mscorlib.DNPropertyInfo; overload;
    function GetFields(bindingAttr: DDN.mscorlib.DNBindingFlags): TArray<DDN.mscorlib.DNFieldInfo>;
    function GetMethod(name: string; bindingAttr: DDN.mscorlib.DNBindingFlags; binder: DDN.mscorlib.DNBinder; types: TArray<DDN.mscorlib.DNType>; modifiers: TArray<DDN.mscorlib.DNParameterModifier>): DDN.mscorlib.DNMethodInfo; overload;
    function GetMethods(bindingAttr: DDN.mscorlib.DNBindingFlags): TArray<DDN.mscorlib.DNMethodInfo>;
    function GetProperty(name: string; bindingAttr: DDN.mscorlib.DNBindingFlags; binder: DDN.mscorlib.DNBinder; returnType: DDN.mscorlib.DNType; types: TArray<DDN.mscorlib.DNType>; modifiers: TArray<DDN.mscorlib.DNParameterModifier>): DDN.mscorlib.DNPropertyInfo; overload;
    function GetProperties(bindingAttr: DDN.mscorlib.DNBindingFlags): TArray<DDN.mscorlib.DNPropertyInfo>;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    property length: Int32 read get_length write set_length;
    property prototype: DDN.mscorlib.DNObject read get_prototype write set_prototype;
    property Item[index: Double]: DDN.mscorlib.DNObject read get_Item write set_Item; default;
    property Item[index: Int32]: DDN.mscorlib.DNObject read get_Item write set_Item; default;
    property Item[name: string]: DDN.mscorlib.DNObject read get_Item write set_Item; default;
    property Item[pars: TArray<DDN.mscorlib.DNObject>]: DDN.mscorlib.DNObject read get_Item write set_Item; default;
    property UnderlyingSystemType: DDN.mscorlib.DNType read get_UnderlyingSystemType;
  end;

  TDNObjectConstructor = class(TDNGenericImport<DNObjectConstructorClass, DNObjectConstructor>) end;

  //-------------namespace: Microsoft.JScript----------------
  DNRegExpConstructorClass = interface(DNScriptFunctionClass)
  ['{DB57C681-5542-52EF-8EA3-6515FC88DA33}']
  end;

  [DNTypeName('Microsoft.JScript.RegExpConstructor')]
  DNRegExpConstructor = interface(DNScriptFunction)
  ['{A06AF7C6-3002-37FA-B285-E0ECDFF9E384}']
  { getters & setters } 

    function get_index: DDN.mscorlib.DNObject;
    function get_input: DDN.mscorlib.DNObject;
    procedure set_input(value: DDN.mscorlib.DNObject);
    function get_lastIndex: DDN.mscorlib.DNObject;
    function get_lastMatch: DDN.mscorlib.DNObject;
    function get_lastParen: DDN.mscorlib.DNObject;
    function get_leftContext: DDN.mscorlib.DNObject;
    function get_rightContext: DDN.mscorlib.DNObject;
    function get_length: Int32;
    procedure set_length(value: Int32);
    function get_prototype: DDN.mscorlib.DNObject;
    procedure set_prototype(value: DDN.mscorlib.DNObject);
    function get_Item(index: Double): DDN.mscorlib.DNObject; overload;
    procedure set_Item(index: Double; value: DDN.mscorlib.DNObject); overload;
    function get_Item(index: Int32): DDN.mscorlib.DNObject; overload;
    procedure set_Item(index: Int32; value: DDN.mscorlib.DNObject); overload;
    function get_Item(name: string): DDN.mscorlib.DNObject; overload;
    procedure set_Item(name: string; value: DDN.mscorlib.DNObject); overload;
    function get_Item(pars: TArray<DDN.mscorlib.DNObject>): DDN.mscorlib.DNObject; overload;
    procedure set_Item(pars: TArray<DDN.mscorlib.DNObject>; value: DDN.mscorlib.DNObject); overload;
    function get_UnderlyingSystemType: DDN.mscorlib.DNType;

  { fields getter & setter } 

   function __fakeFieldGet_engine: DNVsaEngine;
   procedure __fakeFieldSet_engine(value: DNVsaEngine);

  { fields } 

   property engine: DNVsaEngine read __fakeFieldGet_engine write __fakeFieldSet_engine;

  { methods } 

    function Construct(pattern: string; ignoreCase: Boolean; global: Boolean; multiline: Boolean): DDN.mscorlib.DNObject;
    function CreateInstance(args: TArray<DDN.mscorlib.DNObject>): DNRegExpObject;
    function Invoke(args: TArray<DDN.mscorlib.DNObject>): DNRegExpObject; overload;
    function Invoke(thisob: DDN.mscorlib.DNObject; args: TArray<DDN.mscorlib.DNObject>): DDN.mscorlib.DNObject; overload;
    function InvokeMember(name: string; invokeAttr: DDN.mscorlib.DNBindingFlags; binder: DDN.mscorlib.DNBinder; target: DDN.mscorlib.DNObject; args: TArray<DDN.mscorlib.DNObject>; modifiers: TArray<DDN.mscorlib.DNParameterModifier>; culture: DDN.mscorlib.DNCultureInfo; namedParameters: TArray<string>): DDN.mscorlib.DNObject;
    function ToString: string;
    function AddField(name: string): DDN.mscorlib.DNFieldInfo;
    function GetMember(name: string; bindingAttr: DDN.mscorlib.DNBindingFlags): TArray<DDN.mscorlib.DNMemberInfo>;
    procedure SetMemberValue2(name: string; value: DDN.mscorlib.DNObject);
    function GetMembers(bindingAttr: DDN.mscorlib.DNBindingFlags): TArray<DDN.mscorlib.DNMemberInfo>;
    function GetField(name: string; bindingAttr: DDN.mscorlib.DNBindingFlags): DDN.mscorlib.DNFieldInfo;
    function GetMethod(name: string; bindingAttr: DDN.mscorlib.DNBindingFlags): DDN.mscorlib.DNMethodInfo; overload;
    function GetParent: DNScriptObject;
    function GetProperty(name: string; bindingAttr: DDN.mscorlib.DNBindingFlags): DDN.mscorlib.DNPropertyInfo; overload;
    function GetFields(bindingAttr: DDN.mscorlib.DNBindingFlags): TArray<DDN.mscorlib.DNFieldInfo>;
    function GetMethod(name: string; bindingAttr: DDN.mscorlib.DNBindingFlags; binder: DDN.mscorlib.DNBinder; types: TArray<DDN.mscorlib.DNType>; modifiers: TArray<DDN.mscorlib.DNParameterModifier>): DDN.mscorlib.DNMethodInfo; overload;
    function GetMethods(bindingAttr: DDN.mscorlib.DNBindingFlags): TArray<DDN.mscorlib.DNMethodInfo>;
    function GetProperty(name: string; bindingAttr: DDN.mscorlib.DNBindingFlags; binder: DDN.mscorlib.DNBinder; returnType: DDN.mscorlib.DNType; types: TArray<DDN.mscorlib.DNType>; modifiers: TArray<DDN.mscorlib.DNParameterModifier>): DDN.mscorlib.DNPropertyInfo; overload;
    function GetProperties(bindingAttr: DDN.mscorlib.DNBindingFlags): TArray<DDN.mscorlib.DNPropertyInfo>;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    property index: DDN.mscorlib.DNObject read get_index;
    property input: DDN.mscorlib.DNObject read get_input write set_input;
    property lastIndex: DDN.mscorlib.DNObject read get_lastIndex;
    property lastMatch: DDN.mscorlib.DNObject read get_lastMatch;
    property lastParen: DDN.mscorlib.DNObject read get_lastParen;
    property leftContext: DDN.mscorlib.DNObject read get_leftContext;
    property rightContext: DDN.mscorlib.DNObject read get_rightContext;
    property length: Int32 read get_length write set_length;
    property prototype: DDN.mscorlib.DNObject read get_prototype write set_prototype;
    property Item[index: Double]: DDN.mscorlib.DNObject read get_Item write set_Item; default;
    property Item[index: Int32]: DDN.mscorlib.DNObject read get_Item write set_Item; default;
    property Item[name: string]: DDN.mscorlib.DNObject read get_Item write set_Item; default;
    property Item[pars: TArray<DDN.mscorlib.DNObject>]: DDN.mscorlib.DNObject read get_Item write set_Item; default;
    property UnderlyingSystemType: DDN.mscorlib.DNType read get_UnderlyingSystemType;
  end;

  TDNRegExpConstructor = class(TDNGenericImport<DNRegExpConstructorClass, DNRegExpConstructor>) end;

  //-------------namespace: Microsoft.JScript----------------
  DNStringConstructorClass = interface(DNScriptFunctionClass)
  ['{20A8239B-F121-5B83-AE19-C4DD812B6F58}']
  { static methods } 

    {class} function fromCharCode(args: TArray<DDN.mscorlib.DNObject>): string;

  end;

  [DNTypeName('Microsoft.JScript.StringConstructor')]
  DNStringConstructor = interface(DNScriptFunction)
  ['{EC6DCEE8-A8BA-32E0-BC40-D6C438774750}']
  { getters & setters } 

    function get_length: Int32;
    procedure set_length(value: Int32);
    function get_prototype: DDN.mscorlib.DNObject;
    procedure set_prototype(value: DDN.mscorlib.DNObject);
    function get_Item(index: Double): DDN.mscorlib.DNObject; overload;
    procedure set_Item(index: Double; value: DDN.mscorlib.DNObject); overload;
    function get_Item(index: Int32): DDN.mscorlib.DNObject; overload;
    procedure set_Item(index: Int32; value: DDN.mscorlib.DNObject); overload;
    function get_Item(name: string): DDN.mscorlib.DNObject; overload;
    procedure set_Item(name: string; value: DDN.mscorlib.DNObject); overload;
    function get_Item(pars: TArray<DDN.mscorlib.DNObject>): DDN.mscorlib.DNObject; overload;
    procedure set_Item(pars: TArray<DDN.mscorlib.DNObject>; value: DDN.mscorlib.DNObject); overload;
    function get_UnderlyingSystemType: DDN.mscorlib.DNType;

  { fields getter & setter } 

   function __fakeFieldGet_engine: DNVsaEngine;
   procedure __fakeFieldSet_engine(value: DNVsaEngine);

  { fields } 

   property engine: DNVsaEngine read __fakeFieldGet_engine write __fakeFieldSet_engine;

  { methods } 

    function CreateInstance(args: TArray<DDN.mscorlib.DNObject>): DNStringObject;
    function Invoke(arg: DDN.mscorlib.DNObject): string; overload;
    function Invoke(thisob: DDN.mscorlib.DNObject; args: TArray<DDN.mscorlib.DNObject>): DDN.mscorlib.DNObject; overload;
    function InvokeMember(name: string; invokeAttr: DDN.mscorlib.DNBindingFlags; binder: DDN.mscorlib.DNBinder; target: DDN.mscorlib.DNObject; args: TArray<DDN.mscorlib.DNObject>; modifiers: TArray<DDN.mscorlib.DNParameterModifier>; culture: DDN.mscorlib.DNCultureInfo; namedParameters: TArray<string>): DDN.mscorlib.DNObject;
    function ToString: string;
    function AddField(name: string): DDN.mscorlib.DNFieldInfo;
    function GetMember(name: string; bindingAttr: DDN.mscorlib.DNBindingFlags): TArray<DDN.mscorlib.DNMemberInfo>;
    procedure SetMemberValue2(name: string; value: DDN.mscorlib.DNObject);
    function GetMembers(bindingAttr: DDN.mscorlib.DNBindingFlags): TArray<DDN.mscorlib.DNMemberInfo>;
    function GetField(name: string; bindingAttr: DDN.mscorlib.DNBindingFlags): DDN.mscorlib.DNFieldInfo;
    function GetMethod(name: string; bindingAttr: DDN.mscorlib.DNBindingFlags): DDN.mscorlib.DNMethodInfo; overload;
    function GetParent: DNScriptObject;
    function GetProperty(name: string; bindingAttr: DDN.mscorlib.DNBindingFlags): DDN.mscorlib.DNPropertyInfo; overload;
    function GetFields(bindingAttr: DDN.mscorlib.DNBindingFlags): TArray<DDN.mscorlib.DNFieldInfo>;
    function GetMethod(name: string; bindingAttr: DDN.mscorlib.DNBindingFlags; binder: DDN.mscorlib.DNBinder; types: TArray<DDN.mscorlib.DNType>; modifiers: TArray<DDN.mscorlib.DNParameterModifier>): DDN.mscorlib.DNMethodInfo; overload;
    function GetMethods(bindingAttr: DDN.mscorlib.DNBindingFlags): TArray<DDN.mscorlib.DNMethodInfo>;
    function GetProperty(name: string; bindingAttr: DDN.mscorlib.DNBindingFlags; binder: DDN.mscorlib.DNBinder; returnType: DDN.mscorlib.DNType; types: TArray<DDN.mscorlib.DNType>; modifiers: TArray<DDN.mscorlib.DNParameterModifier>): DDN.mscorlib.DNPropertyInfo; overload;
    function GetProperties(bindingAttr: DDN.mscorlib.DNBindingFlags): TArray<DDN.mscorlib.DNPropertyInfo>;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    property length: Int32 read get_length write set_length;
    property prototype: DDN.mscorlib.DNObject read get_prototype write set_prototype;
    property Item[index: Double]: DDN.mscorlib.DNObject read get_Item write set_Item; default;
    property Item[index: Int32]: DDN.mscorlib.DNObject read get_Item write set_Item; default;
    property Item[name: string]: DDN.mscorlib.DNObject read get_Item write set_Item; default;
    property Item[pars: TArray<DDN.mscorlib.DNObject>]: DDN.mscorlib.DNObject read get_Item write set_Item; default;
    property UnderlyingSystemType: DDN.mscorlib.DNType read get_UnderlyingSystemType;
  end;

  TDNStringConstructor = class(TDNGenericImport<DNStringConstructorClass, DNStringConstructor>) end;

  //-------------namespace: Microsoft.JScript----------------
  DNLenientStringConstructorClass = interface(DNStringConstructorClass)
  ['{BBA66ED7-1702-5367-9F89-D3B1C08AFE13}']
  end;

  [DNTypeName('Microsoft.JScript.LenientStringConstructor')]
  DNLenientStringConstructor = interface(DNStringConstructor)
  ['{B796A967-2408-300F-98FC-CDDC1AAC5B32}']
  { getters & setters } 

    function get_length: Int32;
    procedure set_length(value: Int32);
    function get_prototype: DDN.mscorlib.DNObject;
    procedure set_prototype(value: DDN.mscorlib.DNObject);
    function get_Item(index: Double): DDN.mscorlib.DNObject; overload;
    procedure set_Item(index: Double; value: DDN.mscorlib.DNObject); overload;
    function get_Item(index: Int32): DDN.mscorlib.DNObject; overload;
    procedure set_Item(index: Int32; value: DDN.mscorlib.DNObject); overload;
    function get_Item(name: string): DDN.mscorlib.DNObject; overload;
    procedure set_Item(name: string; value: DDN.mscorlib.DNObject); overload;
    function get_Item(pars: TArray<DDN.mscorlib.DNObject>): DDN.mscorlib.DNObject; overload;
    procedure set_Item(pars: TArray<DDN.mscorlib.DNObject>; value: DDN.mscorlib.DNObject); overload;
    function get_UnderlyingSystemType: DDN.mscorlib.DNType;

  { fields getter & setter } 

   function __fakeFieldGet_fromCharCode: DDN.mscorlib.DNObject;
   procedure __fakeFieldSet_fromCharCode(value: DDN.mscorlib.DNObject);
   function __fakeFieldGet_engine: DNVsaEngine;
   procedure __fakeFieldSet_engine(value: DNVsaEngine);

  { fields } 

   property fromCharCode: DDN.mscorlib.DNObject read __fakeFieldGet_fromCharCode write __fakeFieldSet_fromCharCode;
   property engine: DNVsaEngine read __fakeFieldGet_engine write __fakeFieldSet_engine;

  { methods } 

    function CreateInstance(args: TArray<DDN.mscorlib.DNObject>): DNStringObject;
    function Invoke(arg: DDN.mscorlib.DNObject): string; overload;
    function Invoke(thisob: DDN.mscorlib.DNObject; args: TArray<DDN.mscorlib.DNObject>): DDN.mscorlib.DNObject; overload;
    function InvokeMember(name: string; invokeAttr: DDN.mscorlib.DNBindingFlags; binder: DDN.mscorlib.DNBinder; target: DDN.mscorlib.DNObject; args: TArray<DDN.mscorlib.DNObject>; modifiers: TArray<DDN.mscorlib.DNParameterModifier>; culture: DDN.mscorlib.DNCultureInfo; namedParameters: TArray<string>): DDN.mscorlib.DNObject;
    function ToString: string;
    function AddField(name: string): DDN.mscorlib.DNFieldInfo;
    function GetMember(name: string; bindingAttr: DDN.mscorlib.DNBindingFlags): TArray<DDN.mscorlib.DNMemberInfo>;
    procedure SetMemberValue2(name: string; value: DDN.mscorlib.DNObject);
    function GetMembers(bindingAttr: DDN.mscorlib.DNBindingFlags): TArray<DDN.mscorlib.DNMemberInfo>;
    function GetField(name: string; bindingAttr: DDN.mscorlib.DNBindingFlags): DDN.mscorlib.DNFieldInfo;
    function GetMethod(name: string; bindingAttr: DDN.mscorlib.DNBindingFlags): DDN.mscorlib.DNMethodInfo; overload;
    function GetParent: DNScriptObject;
    function GetProperty(name: string; bindingAttr: DDN.mscorlib.DNBindingFlags): DDN.mscorlib.DNPropertyInfo; overload;
    function GetFields(bindingAttr: DDN.mscorlib.DNBindingFlags): TArray<DDN.mscorlib.DNFieldInfo>;
    function GetMethod(name: string; bindingAttr: DDN.mscorlib.DNBindingFlags; binder: DDN.mscorlib.DNBinder; types: TArray<DDN.mscorlib.DNType>; modifiers: TArray<DDN.mscorlib.DNParameterModifier>): DDN.mscorlib.DNMethodInfo; overload;
    function GetMethods(bindingAttr: DDN.mscorlib.DNBindingFlags): TArray<DDN.mscorlib.DNMethodInfo>;
    function GetProperty(name: string; bindingAttr: DDN.mscorlib.DNBindingFlags; binder: DDN.mscorlib.DNBinder; returnType: DDN.mscorlib.DNType; types: TArray<DDN.mscorlib.DNType>; modifiers: TArray<DDN.mscorlib.DNParameterModifier>): DDN.mscorlib.DNPropertyInfo; overload;
    function GetProperties(bindingAttr: DDN.mscorlib.DNBindingFlags): TArray<DDN.mscorlib.DNPropertyInfo>;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    property length: Int32 read get_length write set_length;
    property prototype: DDN.mscorlib.DNObject read get_prototype write set_prototype;
    property Item[index: Double]: DDN.mscorlib.DNObject read get_Item write set_Item; default;
    property Item[index: Int32]: DDN.mscorlib.DNObject read get_Item write set_Item; default;
    property Item[name: string]: DDN.mscorlib.DNObject read get_Item write set_Item; default;
    property Item[pars: TArray<DDN.mscorlib.DNObject>]: DDN.mscorlib.DNObject read get_Item write set_Item; default;
    property UnderlyingSystemType: DDN.mscorlib.DNType read get_UnderlyingSystemType;
  end;

  TDNLenientStringConstructor = class(TDNGenericImport<DNLenientStringConstructorClass, DNLenientStringConstructor>) end;

  //-------------namespace: Microsoft.JScript----------------
  DNVBArrayConstructorClass = interface(DNScriptFunctionClass)
  ['{D78ADF0F-CE06-5AB7-9A35-5E5B409C13C0}']
  end;

  [DNTypeName('Microsoft.JScript.VBArrayConstructor')]
  DNVBArrayConstructor = interface(DNScriptFunction)
  ['{A267A509-7A5E-3076-94A1-27568501FD1B}']
  { getters & setters } 

    function get_length: Int32;
    procedure set_length(value: Int32);
    function get_prototype: DDN.mscorlib.DNObject;
    procedure set_prototype(value: DDN.mscorlib.DNObject);
    function get_Item(index: Double): DDN.mscorlib.DNObject; overload;
    procedure set_Item(index: Double; value: DDN.mscorlib.DNObject); overload;
    function get_Item(index: Int32): DDN.mscorlib.DNObject; overload;
    procedure set_Item(index: Int32; value: DDN.mscorlib.DNObject); overload;
    function get_Item(name: string): DDN.mscorlib.DNObject; overload;
    procedure set_Item(name: string; value: DDN.mscorlib.DNObject); overload;
    function get_Item(pars: TArray<DDN.mscorlib.DNObject>): DDN.mscorlib.DNObject; overload;
    procedure set_Item(pars: TArray<DDN.mscorlib.DNObject>; value: DDN.mscorlib.DNObject); overload;
    function get_UnderlyingSystemType: DDN.mscorlib.DNType;

  { fields getter & setter } 

   function __fakeFieldGet_engine: DNVsaEngine;
   procedure __fakeFieldSet_engine(value: DNVsaEngine);

  { fields } 

   property engine: DNVsaEngine read __fakeFieldGet_engine write __fakeFieldSet_engine;

  { methods } 

    function CreateInstance(args: TArray<DDN.mscorlib.DNObject>): DDN.mscorlib.DNObject;
    function Invoke(thisob: DDN.mscorlib.DNObject; args: TArray<DDN.mscorlib.DNObject>): DDN.mscorlib.DNObject;
    function InvokeMember(name: string; invokeAttr: DDN.mscorlib.DNBindingFlags; binder: DDN.mscorlib.DNBinder; target: DDN.mscorlib.DNObject; args: TArray<DDN.mscorlib.DNObject>; modifiers: TArray<DDN.mscorlib.DNParameterModifier>; culture: DDN.mscorlib.DNCultureInfo; namedParameters: TArray<string>): DDN.mscorlib.DNObject;
    function ToString: string;
    function AddField(name: string): DDN.mscorlib.DNFieldInfo;
    function GetMember(name: string; bindingAttr: DDN.mscorlib.DNBindingFlags): TArray<DDN.mscorlib.DNMemberInfo>;
    procedure SetMemberValue2(name: string; value: DDN.mscorlib.DNObject);
    function GetMembers(bindingAttr: DDN.mscorlib.DNBindingFlags): TArray<DDN.mscorlib.DNMemberInfo>;
    function GetField(name: string; bindingAttr: DDN.mscorlib.DNBindingFlags): DDN.mscorlib.DNFieldInfo;
    function GetMethod(name: string; bindingAttr: DDN.mscorlib.DNBindingFlags): DDN.mscorlib.DNMethodInfo; overload;
    function GetParent: DNScriptObject;
    function GetProperty(name: string; bindingAttr: DDN.mscorlib.DNBindingFlags): DDN.mscorlib.DNPropertyInfo; overload;
    function GetFields(bindingAttr: DDN.mscorlib.DNBindingFlags): TArray<DDN.mscorlib.DNFieldInfo>;
    function GetMethod(name: string; bindingAttr: DDN.mscorlib.DNBindingFlags; binder: DDN.mscorlib.DNBinder; types: TArray<DDN.mscorlib.DNType>; modifiers: TArray<DDN.mscorlib.DNParameterModifier>): DDN.mscorlib.DNMethodInfo; overload;
    function GetMethods(bindingAttr: DDN.mscorlib.DNBindingFlags): TArray<DDN.mscorlib.DNMethodInfo>;
    function GetProperty(name: string; bindingAttr: DDN.mscorlib.DNBindingFlags; binder: DDN.mscorlib.DNBinder; returnType: DDN.mscorlib.DNType; types: TArray<DDN.mscorlib.DNType>; modifiers: TArray<DDN.mscorlib.DNParameterModifier>): DDN.mscorlib.DNPropertyInfo; overload;
    function GetProperties(bindingAttr: DDN.mscorlib.DNBindingFlags): TArray<DDN.mscorlib.DNPropertyInfo>;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    property length: Int32 read get_length write set_length;
    property prototype: DDN.mscorlib.DNObject read get_prototype write set_prototype;
    property Item[index: Double]: DDN.mscorlib.DNObject read get_Item write set_Item; default;
    property Item[index: Int32]: DDN.mscorlib.DNObject read get_Item write set_Item; default;
    property Item[name: string]: DDN.mscorlib.DNObject read get_Item write set_Item; default;
    property Item[pars: TArray<DDN.mscorlib.DNObject>]: DDN.mscorlib.DNObject read get_Item write set_Item; default;
    property UnderlyingSystemType: DDN.mscorlib.DNType read get_UnderlyingSystemType;
  end;

  TDNVBArrayConstructor = class(TDNGenericImport<DNVBArrayConstructorClass, DNVBArrayConstructor>) end;

  //-------------namespace: Microsoft.JScript----------------
  DNStringObjectClass = interface(DNJSObjectClass)
  ['{9CBF0D80-A99B-5AF3-9CFD-E3903191A0E8}']
  end;

  [DNTypeName('Microsoft.JScript.StringObject')]
  DNStringObject = interface(DNJSObject)
  ['{CFA4E06C-9DE4-3973-8927-B3AE1FE22C88}']
  { getters & setters } 

    function get_length: Int32;
    function get_Item(index: Double): DDN.mscorlib.DNObject; overload;
    procedure set_Item(index: Double; value: DDN.mscorlib.DNObject); overload;
    function get_Item(index: Int32): DDN.mscorlib.DNObject; overload;
    procedure set_Item(index: Int32; value: DDN.mscorlib.DNObject); overload;
    function get_Item(name: string): DDN.mscorlib.DNObject; overload;
    procedure set_Item(name: string; value: DDN.mscorlib.DNObject); overload;
    function get_Item(pars: TArray<DDN.mscorlib.DNObject>): DDN.mscorlib.DNObject; overload;
    procedure set_Item(pars: TArray<DDN.mscorlib.DNObject>; value: DDN.mscorlib.DNObject); overload;
    function get_UnderlyingSystemType: DDN.mscorlib.DNType;

  { fields getter & setter } 

   function __fakeFieldGet_engine: DNVsaEngine;
   procedure __fakeFieldSet_engine(value: DNVsaEngine);

  { fields } 

   property engine: DNVsaEngine read __fakeFieldGet_engine write __fakeFieldSet_engine;

  { methods } 

    function Equals(ob: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function AddField(name: string): DDN.mscorlib.DNFieldInfo;
    function GetMember(name: string; bindingAttr: DDN.mscorlib.DNBindingFlags): TArray<DDN.mscorlib.DNMemberInfo>;
    procedure SetMemberValue2(name: string; value: DDN.mscorlib.DNObject);
    function ToString: string;
    function GetMembers(bindingAttr: DDN.mscorlib.DNBindingFlags): TArray<DDN.mscorlib.DNMemberInfo>;
    function GetField(name: string; bindingAttr: DDN.mscorlib.DNBindingFlags): DDN.mscorlib.DNFieldInfo;
    function GetMethod(name: string; bindingAttr: DDN.mscorlib.DNBindingFlags): DDN.mscorlib.DNMethodInfo; overload;
    function GetParent: DNScriptObject;
    function GetProperty(name: string; bindingAttr: DDN.mscorlib.DNBindingFlags): DDN.mscorlib.DNPropertyInfo; overload;
    function GetFields(bindingAttr: DDN.mscorlib.DNBindingFlags): TArray<DDN.mscorlib.DNFieldInfo>;
    function GetMethod(name: string; bindingAttr: DDN.mscorlib.DNBindingFlags; binder: DDN.mscorlib.DNBinder; types: TArray<DDN.mscorlib.DNType>; modifiers: TArray<DDN.mscorlib.DNParameterModifier>): DDN.mscorlib.DNMethodInfo; overload;
    function GetMethods(bindingAttr: DDN.mscorlib.DNBindingFlags): TArray<DDN.mscorlib.DNMethodInfo>;
    function GetProperty(name: string; bindingAttr: DDN.mscorlib.DNBindingFlags; binder: DDN.mscorlib.DNBinder; returnType: DDN.mscorlib.DNType; types: TArray<DDN.mscorlib.DNType>; modifiers: TArray<DDN.mscorlib.DNParameterModifier>): DDN.mscorlib.DNPropertyInfo; overload;
    function GetProperties(bindingAttr: DDN.mscorlib.DNBindingFlags): TArray<DDN.mscorlib.DNPropertyInfo>;
    function InvokeMember(name: string; invokeAttr: DDN.mscorlib.DNBindingFlags; binder: DDN.mscorlib.DNBinder; target: DDN.mscorlib.DNObject; args: TArray<DDN.mscorlib.DNObject>; modifiers: TArray<DDN.mscorlib.DNParameterModifier>; locale: DDN.mscorlib.DNCultureInfo; namedParameters: TArray<string>): DDN.mscorlib.DNObject;

  { propertys } 

    property length: Int32 read get_length;
    property Item[index: Double]: DDN.mscorlib.DNObject read get_Item write set_Item; default;
    property Item[index: Int32]: DDN.mscorlib.DNObject read get_Item write set_Item; default;
    property Item[name: string]: DDN.mscorlib.DNObject read get_Item write set_Item; default;
    property Item[pars: TArray<DDN.mscorlib.DNObject>]: DDN.mscorlib.DNObject read get_Item write set_Item; default;
    property UnderlyingSystemType: DDN.mscorlib.DNType read get_UnderlyingSystemType;
  end;

  TDNStringObject = class(TDNGenericImport<DNStringObjectClass, DNStringObject>) end;

  //-------------namespace: Microsoft.JScript----------------
  DNStringPrototypeClass = interface(DNStringObjectClass)
  ['{EEB8FFB8-920C-5A87-B315-A2FBDE2BFE24}']
  { static getter & setter } 

    {class} function get_constructor: DNStringConstructor;

  { static methods } 

    {class} function charAt(thisob: DDN.mscorlib.DNObject; pos: Double): string;
    {class} function charCodeAt(thisob: DDN.mscorlib.DNObject; pos: Double): DDN.mscorlib.DNObject;
    {class} function concat(thisob: DDN.mscorlib.DNObject; args: TArray<DDN.mscorlib.DNObject>): string;
    {class} function indexOf(thisob: DDN.mscorlib.DNObject; searchString: DDN.mscorlib.DNObject; position: Double): Int32;
    {class} function lastIndexOf(thisob: DDN.mscorlib.DNObject; searchString: DDN.mscorlib.DNObject; position: Double): Int32;
    {class} function localeCompare(thisob: DDN.mscorlib.DNObject; thatob: DDN.mscorlib.DNObject): Int32;
    {class} function match(thisob: DDN.mscorlib.DNObject; engine: DNVsaEngine; regExp: DDN.mscorlib.DNObject): DDN.mscorlib.DNObject;
    {class} function replace(thisob: DDN.mscorlib.DNObject; regExp: DDN.mscorlib.DNObject; replacement: DDN.mscorlib.DNObject): string;
    {class} function search(thisob: DDN.mscorlib.DNObject; engine: DNVsaEngine; regExp: DDN.mscorlib.DNObject): Int32;
    {class} function slice(thisob: DDN.mscorlib.DNObject; start: Double; &end: DDN.mscorlib.DNObject): string;
    {class} function split(thisob: DDN.mscorlib.DNObject; engine: DNVsaEngine; separator: DDN.mscorlib.DNObject; limit: DDN.mscorlib.DNObject): DNArrayObject;
    {class} function substr(thisob: DDN.mscorlib.DNObject; start: Double; count: DDN.mscorlib.DNObject): string;
    {class} function substring(thisob: DDN.mscorlib.DNObject; start: Double; &end: DDN.mscorlib.DNObject): string;
    {class} function toLocaleLowerCase(thisob: DDN.mscorlib.DNObject): string;
    {class} function toLocaleUpperCase(thisob: DDN.mscorlib.DNObject): string;
    {class} function toLowerCase(thisob: DDN.mscorlib.DNObject): string;
    {class} function toString(thisob: DDN.mscorlib.DNObject): string; overload;
    {class} function toUpperCase(thisob: DDN.mscorlib.DNObject): string;
    {class} function valueOf(thisob: DDN.mscorlib.DNObject): DDN.mscorlib.DNObject;
    {class} function anchor(thisob: DDN.mscorlib.DNObject; anchorName: DDN.mscorlib.DNObject): string;
    {class} function big(thisob: DDN.mscorlib.DNObject): string;
    {class} function blink(thisob: DDN.mscorlib.DNObject): string;
    {class} function bold(thisob: DDN.mscorlib.DNObject): string;
    {class} function fixed(thisob: DDN.mscorlib.DNObject): string;
    {class} function fontcolor(thisob: DDN.mscorlib.DNObject; colorName: DDN.mscorlib.DNObject): string;
    {class} function fontsize(thisob: DDN.mscorlib.DNObject; fontSize: DDN.mscorlib.DNObject): string;
    {class} function italics(thisob: DDN.mscorlib.DNObject): string;
    {class} function link(thisob: DDN.mscorlib.DNObject; linkRef: DDN.mscorlib.DNObject): string;
    {class} function small(thisob: DDN.mscorlib.DNObject): string;
    {class} function strike(thisob: DDN.mscorlib.DNObject): string;
    {class} function sub(thisob: DDN.mscorlib.DNObject): string;
    {class} function sup(thisob: DDN.mscorlib.DNObject): string;

  { static propertys } 

    {class} property &constructor: DNStringConstructor read get_constructor;
  end;

  [DNTypeName('Microsoft.JScript.StringPrototype')]
  DNStringPrototype = interface(DNStringObject)
  ['{4894A4B9-0D7A-386E-A077-1B6B704988DB}']
  { getters & setters } 

    function get_length: Int32;
    function get_Item(index: Double): DDN.mscorlib.DNObject; overload;
    procedure set_Item(index: Double; value: DDN.mscorlib.DNObject); overload;
    function get_Item(index: Int32): DDN.mscorlib.DNObject; overload;
    procedure set_Item(index: Int32; value: DDN.mscorlib.DNObject); overload;
    function get_Item(name: string): DDN.mscorlib.DNObject; overload;
    procedure set_Item(name: string; value: DDN.mscorlib.DNObject); overload;
    function get_Item(pars: TArray<DDN.mscorlib.DNObject>): DDN.mscorlib.DNObject; overload;
    procedure set_Item(pars: TArray<DDN.mscorlib.DNObject>; value: DDN.mscorlib.DNObject); overload;
    function get_UnderlyingSystemType: DDN.mscorlib.DNType;

  { fields getter & setter } 

   function __fakeFieldGet_engine: DNVsaEngine;
   procedure __fakeFieldSet_engine(value: DNVsaEngine);

  { fields } 

   property engine: DNVsaEngine read __fakeFieldGet_engine write __fakeFieldSet_engine;

  { methods } 

    function Equals(ob: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function AddField(name: string): DDN.mscorlib.DNFieldInfo;
    function GetMember(name: string; bindingAttr: DDN.mscorlib.DNBindingFlags): TArray<DDN.mscorlib.DNMemberInfo>;
    procedure SetMemberValue2(name: string; value: DDN.mscorlib.DNObject);
    function ToString: string; overload;
    function GetMembers(bindingAttr: DDN.mscorlib.DNBindingFlags): TArray<DDN.mscorlib.DNMemberInfo>;
    function GetField(name: string; bindingAttr: DDN.mscorlib.DNBindingFlags): DDN.mscorlib.DNFieldInfo;
    function GetMethod(name: string; bindingAttr: DDN.mscorlib.DNBindingFlags): DDN.mscorlib.DNMethodInfo; overload;
    function GetParent: DNScriptObject;
    function GetProperty(name: string; bindingAttr: DDN.mscorlib.DNBindingFlags): DDN.mscorlib.DNPropertyInfo; overload;
    function GetFields(bindingAttr: DDN.mscorlib.DNBindingFlags): TArray<DDN.mscorlib.DNFieldInfo>;
    function GetMethod(name: string; bindingAttr: DDN.mscorlib.DNBindingFlags; binder: DDN.mscorlib.DNBinder; types: TArray<DDN.mscorlib.DNType>; modifiers: TArray<DDN.mscorlib.DNParameterModifier>): DDN.mscorlib.DNMethodInfo; overload;
    function GetMethods(bindingAttr: DDN.mscorlib.DNBindingFlags): TArray<DDN.mscorlib.DNMethodInfo>;
    function GetProperty(name: string; bindingAttr: DDN.mscorlib.DNBindingFlags; binder: DDN.mscorlib.DNBinder; returnType: DDN.mscorlib.DNType; types: TArray<DDN.mscorlib.DNType>; modifiers: TArray<DDN.mscorlib.DNParameterModifier>): DDN.mscorlib.DNPropertyInfo; overload;
    function GetProperties(bindingAttr: DDN.mscorlib.DNBindingFlags): TArray<DDN.mscorlib.DNPropertyInfo>;
    function InvokeMember(name: string; invokeAttr: DDN.mscorlib.DNBindingFlags; binder: DDN.mscorlib.DNBinder; target: DDN.mscorlib.DNObject; args: TArray<DDN.mscorlib.DNObject>; modifiers: TArray<DDN.mscorlib.DNParameterModifier>; locale: DDN.mscorlib.DNCultureInfo; namedParameters: TArray<string>): DDN.mscorlib.DNObject;

  { propertys } 

    property length: Int32 read get_length;
    property Item[index: Double]: DDN.mscorlib.DNObject read get_Item write set_Item; default;
    property Item[index: Int32]: DDN.mscorlib.DNObject read get_Item write set_Item; default;
    property Item[name: string]: DDN.mscorlib.DNObject read get_Item write set_Item; default;
    property Item[pars: TArray<DDN.mscorlib.DNObject>]: DDN.mscorlib.DNObject read get_Item write set_Item; default;
    property UnderlyingSystemType: DDN.mscorlib.DNType read get_UnderlyingSystemType;
  end;

  TDNStringPrototype = class(TDNGenericImport<DNStringPrototypeClass, DNStringPrototype>) end;

  //-------------namespace: Microsoft.JScript----------------
  DNLenientStringPrototypeClass = interface(DNStringPrototypeClass)
  ['{32179421-6E0B-5435-86E5-753736437EDD}']
  end;

  [DNTypeName('Microsoft.JScript.LenientStringPrototype')]
  DNLenientStringPrototype = interface(DNStringPrototype)
  ['{66F6203E-8B73-365A-810F-DA96262E5574}']
  { getters & setters } 

    function get_length: Int32;
    function get_Item(index: Double): DDN.mscorlib.DNObject; overload;
    procedure set_Item(index: Double; value: DDN.mscorlib.DNObject); overload;
    function get_Item(index: Int32): DDN.mscorlib.DNObject; overload;
    procedure set_Item(index: Int32; value: DDN.mscorlib.DNObject); overload;
    function get_Item(name: string): DDN.mscorlib.DNObject; overload;
    procedure set_Item(name: string; value: DDN.mscorlib.DNObject); overload;
    function get_Item(pars: TArray<DDN.mscorlib.DNObject>): DDN.mscorlib.DNObject; overload;
    procedure set_Item(pars: TArray<DDN.mscorlib.DNObject>; value: DDN.mscorlib.DNObject); overload;
    function get_UnderlyingSystemType: DDN.mscorlib.DNType;

  { fields getter & setter } 

   function __fakeFieldGet_constructor: DDN.mscorlib.DNObject;
   procedure __fakeFieldSet_constructor(value: DDN.mscorlib.DNObject);
   function __fakeFieldGet_anchor: DDN.mscorlib.DNObject;
   procedure __fakeFieldSet_anchor(value: DDN.mscorlib.DNObject);
   function __fakeFieldGet_big: DDN.mscorlib.DNObject;
   procedure __fakeFieldSet_big(value: DDN.mscorlib.DNObject);
   function __fakeFieldGet_blink: DDN.mscorlib.DNObject;
   procedure __fakeFieldSet_blink(value: DDN.mscorlib.DNObject);
   function __fakeFieldGet_bold: DDN.mscorlib.DNObject;
   procedure __fakeFieldSet_bold(value: DDN.mscorlib.DNObject);
   function __fakeFieldGet_charAt: DDN.mscorlib.DNObject;
   procedure __fakeFieldSet_charAt(value: DDN.mscorlib.DNObject);
   function __fakeFieldGet_charCodeAt: DDN.mscorlib.DNObject;
   procedure __fakeFieldSet_charCodeAt(value: DDN.mscorlib.DNObject);
   function __fakeFieldGet_concat: DDN.mscorlib.DNObject;
   procedure __fakeFieldSet_concat(value: DDN.mscorlib.DNObject);
   function __fakeFieldGet_fixed: DDN.mscorlib.DNObject;
   procedure __fakeFieldSet_fixed(value: DDN.mscorlib.DNObject);
   function __fakeFieldGet_fontcolor: DDN.mscorlib.DNObject;
   procedure __fakeFieldSet_fontcolor(value: DDN.mscorlib.DNObject);
   function __fakeFieldGet_fontsize: DDN.mscorlib.DNObject;
   procedure __fakeFieldSet_fontsize(value: DDN.mscorlib.DNObject);
   function __fakeFieldGet_indexOf: DDN.mscorlib.DNObject;
   procedure __fakeFieldSet_indexOf(value: DDN.mscorlib.DNObject);
   function __fakeFieldGet_italics: DDN.mscorlib.DNObject;
   procedure __fakeFieldSet_italics(value: DDN.mscorlib.DNObject);
   function __fakeFieldGet_lastIndexOf: DDN.mscorlib.DNObject;
   procedure __fakeFieldSet_lastIndexOf(value: DDN.mscorlib.DNObject);
   function __fakeFieldGet_link: DDN.mscorlib.DNObject;
   procedure __fakeFieldSet_link(value: DDN.mscorlib.DNObject);
   function __fakeFieldGet_localeCompare: DDN.mscorlib.DNObject;
   procedure __fakeFieldSet_localeCompare(value: DDN.mscorlib.DNObject);
   function __fakeFieldGet_match: DDN.mscorlib.DNObject;
   procedure __fakeFieldSet_match(value: DDN.mscorlib.DNObject);
   function __fakeFieldGet_replace: DDN.mscorlib.DNObject;
   procedure __fakeFieldSet_replace(value: DDN.mscorlib.DNObject);
   function __fakeFieldGet_search: DDN.mscorlib.DNObject;
   procedure __fakeFieldSet_search(value: DDN.mscorlib.DNObject);
   function __fakeFieldGet_slice: DDN.mscorlib.DNObject;
   procedure __fakeFieldSet_slice(value: DDN.mscorlib.DNObject);
   function __fakeFieldGet_small: DDN.mscorlib.DNObject;
   procedure __fakeFieldSet_small(value: DDN.mscorlib.DNObject);
   function __fakeFieldGet_split: DDN.mscorlib.DNObject;
   procedure __fakeFieldSet_split(value: DDN.mscorlib.DNObject);
   function __fakeFieldGet_strike: DDN.mscorlib.DNObject;
   procedure __fakeFieldSet_strike(value: DDN.mscorlib.DNObject);
   function __fakeFieldGet_sub: DDN.mscorlib.DNObject;
   procedure __fakeFieldSet_sub(value: DDN.mscorlib.DNObject);
   function __fakeFieldGet_substr: DDN.mscorlib.DNObject;
   procedure __fakeFieldSet_substr(value: DDN.mscorlib.DNObject);
   function __fakeFieldGet_substring: DDN.mscorlib.DNObject;
   procedure __fakeFieldSet_substring(value: DDN.mscorlib.DNObject);
   function __fakeFieldGet_sup: DDN.mscorlib.DNObject;
   procedure __fakeFieldSet_sup(value: DDN.mscorlib.DNObject);
   function __fakeFieldGet_toLocaleLowerCase: DDN.mscorlib.DNObject;
   procedure __fakeFieldSet_toLocaleLowerCase(value: DDN.mscorlib.DNObject);
   function __fakeFieldGet_toLocaleUpperCase: DDN.mscorlib.DNObject;
   procedure __fakeFieldSet_toLocaleUpperCase(value: DDN.mscorlib.DNObject);
   function __fakeFieldGet_toLowerCase: DDN.mscorlib.DNObject;
   procedure __fakeFieldSet_toLowerCase(value: DDN.mscorlib.DNObject);
   function __fakeFieldGet_toString: DDN.mscorlib.DNObject;
   procedure __fakeFieldSet_toString(value: DDN.mscorlib.DNObject);
   function __fakeFieldGet_toUpperCase: DDN.mscorlib.DNObject;
   procedure __fakeFieldSet_toUpperCase(value: DDN.mscorlib.DNObject);
   function __fakeFieldGet_valueOf: DDN.mscorlib.DNObject;
   procedure __fakeFieldSet_valueOf(value: DDN.mscorlib.DNObject);
   function __fakeFieldGet_engine: DNVsaEngine;
   procedure __fakeFieldSet_engine(value: DNVsaEngine);

  { fields } 

   property &constructor: DDN.mscorlib.DNObject read __fakeFieldGet_constructor write __fakeFieldSet_constructor;
   property anchor: DDN.mscorlib.DNObject read __fakeFieldGet_anchor write __fakeFieldSet_anchor;
   property big: DDN.mscorlib.DNObject read __fakeFieldGet_big write __fakeFieldSet_big;
   property blink: DDN.mscorlib.DNObject read __fakeFieldGet_blink write __fakeFieldSet_blink;
   property bold: DDN.mscorlib.DNObject read __fakeFieldGet_bold write __fakeFieldSet_bold;
   property charAt: DDN.mscorlib.DNObject read __fakeFieldGet_charAt write __fakeFieldSet_charAt;
   property charCodeAt: DDN.mscorlib.DNObject read __fakeFieldGet_charCodeAt write __fakeFieldSet_charCodeAt;
   property concat: DDN.mscorlib.DNObject read __fakeFieldGet_concat write __fakeFieldSet_concat;
   property fixed: DDN.mscorlib.DNObject read __fakeFieldGet_fixed write __fakeFieldSet_fixed;
   property fontcolor: DDN.mscorlib.DNObject read __fakeFieldGet_fontcolor write __fakeFieldSet_fontcolor;
   property fontsize: DDN.mscorlib.DNObject read __fakeFieldGet_fontsize write __fakeFieldSet_fontsize;
   property indexOf: DDN.mscorlib.DNObject read __fakeFieldGet_indexOf write __fakeFieldSet_indexOf;
   property italics: DDN.mscorlib.DNObject read __fakeFieldGet_italics write __fakeFieldSet_italics;
   property lastIndexOf: DDN.mscorlib.DNObject read __fakeFieldGet_lastIndexOf write __fakeFieldSet_lastIndexOf;
   property link: DDN.mscorlib.DNObject read __fakeFieldGet_link write __fakeFieldSet_link;
   property localeCompare: DDN.mscorlib.DNObject read __fakeFieldGet_localeCompare write __fakeFieldSet_localeCompare;
   property match: DDN.mscorlib.DNObject read __fakeFieldGet_match write __fakeFieldSet_match;
   property replace: DDN.mscorlib.DNObject read __fakeFieldGet_replace write __fakeFieldSet_replace;
   property search: DDN.mscorlib.DNObject read __fakeFieldGet_search write __fakeFieldSet_search;
   property slice: DDN.mscorlib.DNObject read __fakeFieldGet_slice write __fakeFieldSet_slice;
   property small: DDN.mscorlib.DNObject read __fakeFieldGet_small write __fakeFieldSet_small;
   property split: DDN.mscorlib.DNObject read __fakeFieldGet_split write __fakeFieldSet_split;
   property strike: DDN.mscorlib.DNObject read __fakeFieldGet_strike write __fakeFieldSet_strike;
   property sub: DDN.mscorlib.DNObject read __fakeFieldGet_sub write __fakeFieldSet_sub;
   property substr: DDN.mscorlib.DNObject read __fakeFieldGet_substr write __fakeFieldSet_substr;
   property substring: DDN.mscorlib.DNObject read __fakeFieldGet_substring write __fakeFieldSet_substring;
   property sup: DDN.mscorlib.DNObject read __fakeFieldGet_sup write __fakeFieldSet_sup;
   property toLocaleLowerCase: DDN.mscorlib.DNObject read __fakeFieldGet_toLocaleLowerCase write __fakeFieldSet_toLocaleLowerCase;
   property toLocaleUpperCase: DDN.mscorlib.DNObject read __fakeFieldGet_toLocaleUpperCase write __fakeFieldSet_toLocaleUpperCase;
   property toLowerCase: DDN.mscorlib.DNObject read __fakeFieldGet_toLowerCase write __fakeFieldSet_toLowerCase;
   property toString_: DDN.mscorlib.DNObject read __fakeFieldGet_toString write __fakeFieldSet_toString;
   property toUpperCase: DDN.mscorlib.DNObject read __fakeFieldGet_toUpperCase write __fakeFieldSet_toUpperCase;
   property valueOf: DDN.mscorlib.DNObject read __fakeFieldGet_valueOf write __fakeFieldSet_valueOf;
   property engine: DNVsaEngine read __fakeFieldGet_engine write __fakeFieldSet_engine;

  { methods } 

    function Equals(ob: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function AddField(name: string): DDN.mscorlib.DNFieldInfo;
    function GetMember(name: string; bindingAttr: DDN.mscorlib.DNBindingFlags): TArray<DDN.mscorlib.DNMemberInfo>;
    procedure SetMemberValue2(name: string; value: DDN.mscorlib.DNObject);
    function ToString: string;
    function GetMembers(bindingAttr: DDN.mscorlib.DNBindingFlags): TArray<DDN.mscorlib.DNMemberInfo>;
    function GetField(name: string; bindingAttr: DDN.mscorlib.DNBindingFlags): DDN.mscorlib.DNFieldInfo;
    function GetMethod(name: string; bindingAttr: DDN.mscorlib.DNBindingFlags): DDN.mscorlib.DNMethodInfo; overload;
    function GetParent: DNScriptObject;
    function GetProperty(name: string; bindingAttr: DDN.mscorlib.DNBindingFlags): DDN.mscorlib.DNPropertyInfo; overload;
    function GetFields(bindingAttr: DDN.mscorlib.DNBindingFlags): TArray<DDN.mscorlib.DNFieldInfo>;
    function GetMethod(name: string; bindingAttr: DDN.mscorlib.DNBindingFlags; binder: DDN.mscorlib.DNBinder; types: TArray<DDN.mscorlib.DNType>; modifiers: TArray<DDN.mscorlib.DNParameterModifier>): DDN.mscorlib.DNMethodInfo; overload;
    function GetMethods(bindingAttr: DDN.mscorlib.DNBindingFlags): TArray<DDN.mscorlib.DNMethodInfo>;
    function GetProperty(name: string; bindingAttr: DDN.mscorlib.DNBindingFlags; binder: DDN.mscorlib.DNBinder; returnType: DDN.mscorlib.DNType; types: TArray<DDN.mscorlib.DNType>; modifiers: TArray<DDN.mscorlib.DNParameterModifier>): DDN.mscorlib.DNPropertyInfo; overload;
    function GetProperties(bindingAttr: DDN.mscorlib.DNBindingFlags): TArray<DDN.mscorlib.DNPropertyInfo>;
    function InvokeMember(name: string; invokeAttr: DDN.mscorlib.DNBindingFlags; binder: DDN.mscorlib.DNBinder; target: DDN.mscorlib.DNObject; args: TArray<DDN.mscorlib.DNObject>; modifiers: TArray<DDN.mscorlib.DNParameterModifier>; locale: DDN.mscorlib.DNCultureInfo; namedParameters: TArray<string>): DDN.mscorlib.DNObject;

  { propertys } 

    property length: Int32 read get_length;
    property Item[index: Double]: DDN.mscorlib.DNObject read get_Item write set_Item; default;
    property Item[index: Int32]: DDN.mscorlib.DNObject read get_Item write set_Item; default;
    property Item[name: string]: DDN.mscorlib.DNObject read get_Item write set_Item; default;
    property Item[pars: TArray<DDN.mscorlib.DNObject>]: DDN.mscorlib.DNObject read get_Item write set_Item; default;
    property UnderlyingSystemType: DDN.mscorlib.DNType read get_UnderlyingSystemType;
  end;

  TDNLenientStringPrototype = class(TDNGenericImport<DNLenientStringPrototypeClass, DNLenientStringPrototype>) end;

  //-------------namespace: Microsoft.JScript----------------
  DNVBArrayObjectClass = interface(DNJSObjectClass)
  ['{8AAF8241-148C-5C08-95A2-7E76A32AF88F}']
  { constructors } 

    {class} function init(parent: DNVBArrayPrototype; &array: DDN.mscorlib.DNArray): DNVBArrayObject;

  end;

  [DNTypeName('Microsoft.JScript.VBArrayObject')]
  DNVBArrayObject = interface(DNJSObject)
  ['{03AD1512-D232-3369-8D42-9AE9D4F07329}']
  { getters & setters } 

    function get_Item(index: Double): DDN.mscorlib.DNObject; overload;
    procedure set_Item(index: Double; value: DDN.mscorlib.DNObject); overload;
    function get_Item(index: Int32): DDN.mscorlib.DNObject; overload;
    procedure set_Item(index: Int32; value: DDN.mscorlib.DNObject); overload;
    function get_Item(name: string): DDN.mscorlib.DNObject; overload;
    procedure set_Item(name: string; value: DDN.mscorlib.DNObject); overload;
    function get_Item(pars: TArray<DDN.mscorlib.DNObject>): DDN.mscorlib.DNObject; overload;
    procedure set_Item(pars: TArray<DDN.mscorlib.DNObject>; value: DDN.mscorlib.DNObject); overload;
    function get_UnderlyingSystemType: DDN.mscorlib.DNType;

  { fields getter & setter } 

   function __fakeFieldGet_engine: DNVsaEngine;
   procedure __fakeFieldSet_engine(value: DNVsaEngine);

  { fields } 

   property engine: DNVsaEngine read __fakeFieldGet_engine write __fakeFieldSet_engine;

  { methods } 

    function AddField(name: string): DDN.mscorlib.DNFieldInfo;
    function GetMember(name: string; bindingAttr: DDN.mscorlib.DNBindingFlags): TArray<DDN.mscorlib.DNMemberInfo>;
    procedure SetMemberValue2(name: string; value: DDN.mscorlib.DNObject);
    function ToString: string;
    function GetMembers(bindingAttr: DDN.mscorlib.DNBindingFlags): TArray<DDN.mscorlib.DNMemberInfo>;
    function GetField(name: string; bindingAttr: DDN.mscorlib.DNBindingFlags): DDN.mscorlib.DNFieldInfo;
    function GetMethod(name: string; bindingAttr: DDN.mscorlib.DNBindingFlags): DDN.mscorlib.DNMethodInfo; overload;
    function GetParent: DNScriptObject;
    function GetProperty(name: string; bindingAttr: DDN.mscorlib.DNBindingFlags): DDN.mscorlib.DNPropertyInfo; overload;
    function GetFields(bindingAttr: DDN.mscorlib.DNBindingFlags): TArray<DDN.mscorlib.DNFieldInfo>;
    function GetMethod(name: string; bindingAttr: DDN.mscorlib.DNBindingFlags; binder: DDN.mscorlib.DNBinder; types: TArray<DDN.mscorlib.DNType>; modifiers: TArray<DDN.mscorlib.DNParameterModifier>): DDN.mscorlib.DNMethodInfo; overload;
    function GetMethods(bindingAttr: DDN.mscorlib.DNBindingFlags): TArray<DDN.mscorlib.DNMethodInfo>;
    function GetProperty(name: string; bindingAttr: DDN.mscorlib.DNBindingFlags; binder: DDN.mscorlib.DNBinder; returnType: DDN.mscorlib.DNType; types: TArray<DDN.mscorlib.DNType>; modifiers: TArray<DDN.mscorlib.DNParameterModifier>): DDN.mscorlib.DNPropertyInfo; overload;
    function GetProperties(bindingAttr: DDN.mscorlib.DNBindingFlags): TArray<DDN.mscorlib.DNPropertyInfo>;
    function InvokeMember(name: string; invokeAttr: DDN.mscorlib.DNBindingFlags; binder: DDN.mscorlib.DNBinder; target: DDN.mscorlib.DNObject; args: TArray<DDN.mscorlib.DNObject>; modifiers: TArray<DDN.mscorlib.DNParameterModifier>; locale: DDN.mscorlib.DNCultureInfo; namedParameters: TArray<string>): DDN.mscorlib.DNObject;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    property Item[index: Double]: DDN.mscorlib.DNObject read get_Item write set_Item; default;
    property Item[index: Int32]: DDN.mscorlib.DNObject read get_Item write set_Item; default;
    property Item[name: string]: DDN.mscorlib.DNObject read get_Item write set_Item; default;
    property Item[pars: TArray<DDN.mscorlib.DNObject>]: DDN.mscorlib.DNObject read get_Item write set_Item; default;
    property UnderlyingSystemType: DDN.mscorlib.DNType read get_UnderlyingSystemType;
  end;

  TDNVBArrayObject = class(TDNGenericImport<DNVBArrayObjectClass, DNVBArrayObject>) end;

  //-------------namespace: Microsoft.JScript----------------
  DNVBArrayPrototypeClass = interface(DNJSObjectClass)
  ['{B159C4D9-B8E2-5B9F-939B-5BE625EBB0FA}']
  { static getter & setter } 

    {class} function get_constructor: DNVBArrayConstructor;

  { static methods } 

    {class} function dimensions(thisob: DDN.mscorlib.DNObject): Int32;
    {class} function getItem(thisob: DDN.mscorlib.DNObject; args: TArray<DDN.mscorlib.DNObject>): DDN.mscorlib.DNObject;
    {class} function lbound(thisob: DDN.mscorlib.DNObject; dimension: DDN.mscorlib.DNObject): Int32;
    {class} function toArray(thisob: DDN.mscorlib.DNObject; engine: DNVsaEngine): DNArrayObject;
    {class} function ubound(thisob: DDN.mscorlib.DNObject; dimension: DDN.mscorlib.DNObject): Int32;

  { static propertys } 

    {class} property &constructor: DNVBArrayConstructor read get_constructor;
  end;

  [DNTypeName('Microsoft.JScript.VBArrayPrototype')]
  DNVBArrayPrototype = interface(DNJSObject)
  ['{F4D71604-123C-365D-A086-B14641D9425B}']
  { getters & setters } 

    function get_Item(index: Double): DDN.mscorlib.DNObject; overload;
    procedure set_Item(index: Double; value: DDN.mscorlib.DNObject); overload;
    function get_Item(index: Int32): DDN.mscorlib.DNObject; overload;
    procedure set_Item(index: Int32; value: DDN.mscorlib.DNObject); overload;
    function get_Item(name: string): DDN.mscorlib.DNObject; overload;
    procedure set_Item(name: string; value: DDN.mscorlib.DNObject); overload;
    function get_Item(pars: TArray<DDN.mscorlib.DNObject>): DDN.mscorlib.DNObject; overload;
    procedure set_Item(pars: TArray<DDN.mscorlib.DNObject>; value: DDN.mscorlib.DNObject); overload;
    function get_UnderlyingSystemType: DDN.mscorlib.DNType;

  { fields getter & setter } 

   function __fakeFieldGet_engine: DNVsaEngine;
   procedure __fakeFieldSet_engine(value: DNVsaEngine);

  { fields } 

   property engine: DNVsaEngine read __fakeFieldGet_engine write __fakeFieldSet_engine;

  { methods } 

    function AddField(name: string): DDN.mscorlib.DNFieldInfo;
    function GetMember(name: string; bindingAttr: DDN.mscorlib.DNBindingFlags): TArray<DDN.mscorlib.DNMemberInfo>;
    procedure SetMemberValue2(name: string; value: DDN.mscorlib.DNObject);
    function ToString: string;
    function GetMembers(bindingAttr: DDN.mscorlib.DNBindingFlags): TArray<DDN.mscorlib.DNMemberInfo>;
    function GetField(name: string; bindingAttr: DDN.mscorlib.DNBindingFlags): DDN.mscorlib.DNFieldInfo;
    function GetMethod(name: string; bindingAttr: DDN.mscorlib.DNBindingFlags): DDN.mscorlib.DNMethodInfo; overload;
    function GetParent: DNScriptObject;
    function GetProperty(name: string; bindingAttr: DDN.mscorlib.DNBindingFlags): DDN.mscorlib.DNPropertyInfo; overload;
    function GetFields(bindingAttr: DDN.mscorlib.DNBindingFlags): TArray<DDN.mscorlib.DNFieldInfo>;
    function GetMethod(name: string; bindingAttr: DDN.mscorlib.DNBindingFlags; binder: DDN.mscorlib.DNBinder; types: TArray<DDN.mscorlib.DNType>; modifiers: TArray<DDN.mscorlib.DNParameterModifier>): DDN.mscorlib.DNMethodInfo; overload;
    function GetMethods(bindingAttr: DDN.mscorlib.DNBindingFlags): TArray<DDN.mscorlib.DNMethodInfo>;
    function GetProperty(name: string; bindingAttr: DDN.mscorlib.DNBindingFlags; binder: DDN.mscorlib.DNBinder; returnType: DDN.mscorlib.DNType; types: TArray<DDN.mscorlib.DNType>; modifiers: TArray<DDN.mscorlib.DNParameterModifier>): DDN.mscorlib.DNPropertyInfo; overload;
    function GetProperties(bindingAttr: DDN.mscorlib.DNBindingFlags): TArray<DDN.mscorlib.DNPropertyInfo>;
    function InvokeMember(name: string; invokeAttr: DDN.mscorlib.DNBindingFlags; binder: DDN.mscorlib.DNBinder; target: DDN.mscorlib.DNObject; args: TArray<DDN.mscorlib.DNObject>; modifiers: TArray<DDN.mscorlib.DNParameterModifier>; locale: DDN.mscorlib.DNCultureInfo; namedParameters: TArray<string>): DDN.mscorlib.DNObject;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    property Item[index: Double]: DDN.mscorlib.DNObject read get_Item write set_Item; default;
    property Item[index: Int32]: DDN.mscorlib.DNObject read get_Item write set_Item; default;
    property Item[name: string]: DDN.mscorlib.DNObject read get_Item write set_Item; default;
    property Item[pars: TArray<DDN.mscorlib.DNObject>]: DDN.mscorlib.DNObject read get_Item write set_Item; default;
    property UnderlyingSystemType: DDN.mscorlib.DNType read get_UnderlyingSystemType;
  end;

  TDNVBArrayPrototype = class(TDNGenericImport<DNVBArrayPrototypeClass, DNVBArrayPrototype>) end;

  //-------------namespace: Microsoft.JScript----------------
  DNLenientVBArrayPrototypeClass = interface(DNVBArrayPrototypeClass)
  ['{24DE65A0-2314-5860-8A45-C117D4B6EA3C}']
  end;

  [DNTypeName('Microsoft.JScript.LenientVBArrayPrototype')]
  DNLenientVBArrayPrototype = interface(DNVBArrayPrototype)
  ['{E41C3422-2197-3CB9-99B8-323E02826D4A}']
  { getters & setters } 

    function get_Item(index: Double): DDN.mscorlib.DNObject; overload;
    procedure set_Item(index: Double; value: DDN.mscorlib.DNObject); overload;
    function get_Item(index: Int32): DDN.mscorlib.DNObject; overload;
    procedure set_Item(index: Int32; value: DDN.mscorlib.DNObject); overload;
    function get_Item(name: string): DDN.mscorlib.DNObject; overload;
    procedure set_Item(name: string; value: DDN.mscorlib.DNObject); overload;
    function get_Item(pars: TArray<DDN.mscorlib.DNObject>): DDN.mscorlib.DNObject; overload;
    procedure set_Item(pars: TArray<DDN.mscorlib.DNObject>; value: DDN.mscorlib.DNObject); overload;
    function get_UnderlyingSystemType: DDN.mscorlib.DNType;

  { fields getter & setter } 

   function __fakeFieldGet_constructor: DDN.mscorlib.DNObject;
   procedure __fakeFieldSet_constructor(value: DDN.mscorlib.DNObject);
   function __fakeFieldGet_dimensions: DDN.mscorlib.DNObject;
   procedure __fakeFieldSet_dimensions(value: DDN.mscorlib.DNObject);
   function __fakeFieldGet_getItem: DDN.mscorlib.DNObject;
   procedure __fakeFieldSet_getItem(value: DDN.mscorlib.DNObject);
   function __fakeFieldGet_lbound: DDN.mscorlib.DNObject;
   procedure __fakeFieldSet_lbound(value: DDN.mscorlib.DNObject);
   function __fakeFieldGet_toArray: DDN.mscorlib.DNObject;
   procedure __fakeFieldSet_toArray(value: DDN.mscorlib.DNObject);
   function __fakeFieldGet_ubound: DDN.mscorlib.DNObject;
   procedure __fakeFieldSet_ubound(value: DDN.mscorlib.DNObject);
   function __fakeFieldGet_engine: DNVsaEngine;
   procedure __fakeFieldSet_engine(value: DNVsaEngine);

  { fields } 

   property &constructor: DDN.mscorlib.DNObject read __fakeFieldGet_constructor write __fakeFieldSet_constructor;
   property dimensions: DDN.mscorlib.DNObject read __fakeFieldGet_dimensions write __fakeFieldSet_dimensions;
   property getItem: DDN.mscorlib.DNObject read __fakeFieldGet_getItem write __fakeFieldSet_getItem;
   property lbound: DDN.mscorlib.DNObject read __fakeFieldGet_lbound write __fakeFieldSet_lbound;
   property toArray: DDN.mscorlib.DNObject read __fakeFieldGet_toArray write __fakeFieldSet_toArray;
   property ubound: DDN.mscorlib.DNObject read __fakeFieldGet_ubound write __fakeFieldSet_ubound;
   property engine: DNVsaEngine read __fakeFieldGet_engine write __fakeFieldSet_engine;

  { methods } 

    function AddField(name: string): DDN.mscorlib.DNFieldInfo;
    function GetMember(name: string; bindingAttr: DDN.mscorlib.DNBindingFlags): TArray<DDN.mscorlib.DNMemberInfo>;
    procedure SetMemberValue2(name: string; value: DDN.mscorlib.DNObject);
    function ToString: string;
    function GetMembers(bindingAttr: DDN.mscorlib.DNBindingFlags): TArray<DDN.mscorlib.DNMemberInfo>;
    function GetField(name: string; bindingAttr: DDN.mscorlib.DNBindingFlags): DDN.mscorlib.DNFieldInfo;
    function GetMethod(name: string; bindingAttr: DDN.mscorlib.DNBindingFlags): DDN.mscorlib.DNMethodInfo; overload;
    function GetParent: DNScriptObject;
    function GetProperty(name: string; bindingAttr: DDN.mscorlib.DNBindingFlags): DDN.mscorlib.DNPropertyInfo; overload;
    function GetFields(bindingAttr: DDN.mscorlib.DNBindingFlags): TArray<DDN.mscorlib.DNFieldInfo>;
    function GetMethod(name: string; bindingAttr: DDN.mscorlib.DNBindingFlags; binder: DDN.mscorlib.DNBinder; types: TArray<DDN.mscorlib.DNType>; modifiers: TArray<DDN.mscorlib.DNParameterModifier>): DDN.mscorlib.DNMethodInfo; overload;
    function GetMethods(bindingAttr: DDN.mscorlib.DNBindingFlags): TArray<DDN.mscorlib.DNMethodInfo>;
    function GetProperty(name: string; bindingAttr: DDN.mscorlib.DNBindingFlags; binder: DDN.mscorlib.DNBinder; returnType: DDN.mscorlib.DNType; types: TArray<DDN.mscorlib.DNType>; modifiers: TArray<DDN.mscorlib.DNParameterModifier>): DDN.mscorlib.DNPropertyInfo; overload;
    function GetProperties(bindingAttr: DDN.mscorlib.DNBindingFlags): TArray<DDN.mscorlib.DNPropertyInfo>;
    function InvokeMember(name: string; invokeAttr: DDN.mscorlib.DNBindingFlags; binder: DDN.mscorlib.DNBinder; target: DDN.mscorlib.DNObject; args: TArray<DDN.mscorlib.DNObject>; modifiers: TArray<DDN.mscorlib.DNParameterModifier>; locale: DDN.mscorlib.DNCultureInfo; namedParameters: TArray<string>): DDN.mscorlib.DNObject;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    property Item[index: Double]: DDN.mscorlib.DNObject read get_Item write set_Item; default;
    property Item[index: Int32]: DDN.mscorlib.DNObject read get_Item write set_Item; default;
    property Item[name: string]: DDN.mscorlib.DNObject read get_Item write set_Item; default;
    property Item[pars: TArray<DDN.mscorlib.DNObject>]: DDN.mscorlib.DNObject read get_Item write set_Item; default;
    property UnderlyingSystemType: DDN.mscorlib.DNType read get_UnderlyingSystemType;
  end;

  TDNLenientVBArrayPrototype = class(TDNGenericImport<DNLenientVBArrayPrototypeClass, DNLenientVBArrayPrototype>) end;

  //-------------namespace: Microsoft.JScript----------------
  DNStackFrameClass = interface(DNScriptObjectClass)
  ['{68E62C2E-407E-557D-8D80-AC81B2421513}']
  { static methods } 

    {class} procedure PushStackFrameForStaticMethod(thisclass: DDN.mscorlib.DNRuntimeTypeHandle; fields: TArray<DNJSLocalField>; engine: DNVsaEngine);
    {class} procedure PushStackFrameForMethod(thisob: DDN.mscorlib.DNObject; fields: TArray<DNJSLocalField>; engine: DNVsaEngine);

  end;

  [DNTypeName('Microsoft.JScript.StackFrame')]
  DNStackFrame = interface(DNScriptObject)
  ['{2B185ABC-A9D4-3EE7-942F-A387A2736629}']
  { getters & setters } 

    function get_Item(index: Double): DDN.mscorlib.DNObject; overload;
    procedure set_Item(index: Double; value: DDN.mscorlib.DNObject); overload;
    function get_Item(index: Int32): DDN.mscorlib.DNObject; overload;
    procedure set_Item(index: Int32; value: DDN.mscorlib.DNObject); overload;
    function get_Item(name: string): DDN.mscorlib.DNObject; overload;
    procedure set_Item(name: string; value: DDN.mscorlib.DNObject); overload;
    function get_Item(pars: TArray<DDN.mscorlib.DNObject>): DDN.mscorlib.DNObject; overload;
    procedure set_Item(pars: TArray<DDN.mscorlib.DNObject>; value: DDN.mscorlib.DNObject); overload;
    function get_UnderlyingSystemType: DDN.mscorlib.DNType;

  { fields getter & setter } 

   function __fakeFieldGet_localVars: TArray<DDN.mscorlib.DNObject>;
   procedure __fakeFieldSet_localVars(value: TArray<DDN.mscorlib.DNObject>);
   function __fakeFieldGet_closureInstance: DDN.mscorlib.DNObject;
   procedure __fakeFieldSet_closureInstance(value: DDN.mscorlib.DNObject);
   function __fakeFieldGet_engine: DNVsaEngine;
   procedure __fakeFieldSet_engine(value: DNVsaEngine);

  { fields } 

   property localVars: TArray<DDN.mscorlib.DNObject> read __fakeFieldGet_localVars write __fakeFieldSet_localVars;
   property closureInstance: DDN.mscorlib.DNObject read __fakeFieldGet_closureInstance write __fakeFieldSet_closureInstance;
   property engine: DNVsaEngine read __fakeFieldGet_engine write __fakeFieldSet_engine;

  { methods } 

    function GetDefaultThisObject: DDN.mscorlib.DNObject;
    function GetField(name: string; lexLevel: Int32): DDN.mscorlib.DNFieldInfo; overload;
    function GetGlobalScope: DNGlobalScope;
    function GetMember(name: string; bindingAttr: DDN.mscorlib.DNBindingFlags): TArray<DDN.mscorlib.DNMemberInfo>;
    function GetMembers(bindingAttr: DDN.mscorlib.DNBindingFlags): TArray<DDN.mscorlib.DNMemberInfo>;
    function GetMemberValue(name: string; lexlevel: Int32): DDN.mscorlib.DNObject;
    function GetField(name: string; bindingAttr: DDN.mscorlib.DNBindingFlags): DDN.mscorlib.DNFieldInfo; overload;
    function GetMethod(name: string; bindingAttr: DDN.mscorlib.DNBindingFlags): DDN.mscorlib.DNMethodInfo; overload;
    function GetParent: DNScriptObject;
    function GetProperty(name: string; bindingAttr: DDN.mscorlib.DNBindingFlags): DDN.mscorlib.DNPropertyInfo; overload;
    function GetFields(bindingAttr: DDN.mscorlib.DNBindingFlags): TArray<DDN.mscorlib.DNFieldInfo>;
    function GetMethod(name: string; bindingAttr: DDN.mscorlib.DNBindingFlags; binder: DDN.mscorlib.DNBinder; types: TArray<DDN.mscorlib.DNType>; modifiers: TArray<DDN.mscorlib.DNParameterModifier>): DDN.mscorlib.DNMethodInfo; overload;
    function GetMethods(bindingAttr: DDN.mscorlib.DNBindingFlags): TArray<DDN.mscorlib.DNMethodInfo>;
    function GetProperty(name: string; bindingAttr: DDN.mscorlib.DNBindingFlags; binder: DDN.mscorlib.DNBinder; returnType: DDN.mscorlib.DNType; types: TArray<DDN.mscorlib.DNType>; modifiers: TArray<DDN.mscorlib.DNParameterModifier>): DDN.mscorlib.DNPropertyInfo; overload;
    function GetProperties(bindingAttr: DDN.mscorlib.DNBindingFlags): TArray<DDN.mscorlib.DNPropertyInfo>;
    function InvokeMember(name: string; invokeAttr: DDN.mscorlib.DNBindingFlags; binder: DDN.mscorlib.DNBinder; target: DDN.mscorlib.DNObject; args: TArray<DDN.mscorlib.DNObject>; modifiers: TArray<DDN.mscorlib.DNParameterModifier>; locale: DDN.mscorlib.DNCultureInfo; namedParameters: TArray<string>): DDN.mscorlib.DNObject;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Item[index: Double]: DDN.mscorlib.DNObject read get_Item write set_Item; default;
    property Item[index: Int32]: DDN.mscorlib.DNObject read get_Item write set_Item; default;
    property Item[name: string]: DDN.mscorlib.DNObject read get_Item write set_Item; default;
    property Item[pars: TArray<DDN.mscorlib.DNObject>]: DDN.mscorlib.DNObject read get_Item write set_Item; default;
    property UnderlyingSystemType: DDN.mscorlib.DNType read get_UnderlyingSystemType;
  end;

  TDNStackFrame = class(TDNGenericImport<DNStackFrameClass, DNStackFrame>) end;

  //-------------namespace: Microsoft.JScript----------------
  DNTypeReflectorClass = interface(DNScriptObjectClass)
  ['{A3D26F7D-58B6-5F8D-8093-8EF74A27861C}']
  end;

  [DNTypeName('Microsoft.JScript.TypeReflector')]
  DNTypeReflector = interface(DNScriptObject)
  ['{D1A0BD69-BDB8-376E-9C8C-282A718A0F4C}']
  { getters & setters } 

    function get_Item(index: Double): DDN.mscorlib.DNObject; overload;
    procedure set_Item(index: Double; value: DDN.mscorlib.DNObject); overload;
    function get_Item(index: Int32): DDN.mscorlib.DNObject; overload;
    procedure set_Item(index: Int32; value: DDN.mscorlib.DNObject); overload;
    function get_Item(name: string): DDN.mscorlib.DNObject; overload;
    procedure set_Item(name: string; value: DDN.mscorlib.DNObject); overload;
    function get_Item(pars: TArray<DDN.mscorlib.DNObject>): DDN.mscorlib.DNObject; overload;
    procedure set_Item(pars: TArray<DDN.mscorlib.DNObject>; value: DDN.mscorlib.DNObject); overload;
    function get_UnderlyingSystemType: DDN.mscorlib.DNType;

  { fields getter & setter } 

   function __fakeFieldGet_engine: DNVsaEngine;
   procedure __fakeFieldSet_engine(value: DNVsaEngine);

  { fields } 

   property engine: DNVsaEngine read __fakeFieldGet_engine write __fakeFieldSet_engine;

  { methods } 

    function GetMember(name: string; bindingAttr: DDN.mscorlib.DNBindingFlags): TArray<DDN.mscorlib.DNMemberInfo>;
    function GetMembers(bindingAttr: DDN.mscorlib.DNBindingFlags): TArray<DDN.mscorlib.DNMemberInfo>;
    function GetField(name: string; bindingAttr: DDN.mscorlib.DNBindingFlags): DDN.mscorlib.DNFieldInfo;
    function GetMethod(name: string; bindingAttr: DDN.mscorlib.DNBindingFlags): DDN.mscorlib.DNMethodInfo; overload;
    function GetParent: DNScriptObject;
    function GetProperty(name: string; bindingAttr: DDN.mscorlib.DNBindingFlags): DDN.mscorlib.DNPropertyInfo; overload;
    function GetFields(bindingAttr: DDN.mscorlib.DNBindingFlags): TArray<DDN.mscorlib.DNFieldInfo>;
    function GetMethod(name: string; bindingAttr: DDN.mscorlib.DNBindingFlags; binder: DDN.mscorlib.DNBinder; types: TArray<DDN.mscorlib.DNType>; modifiers: TArray<DDN.mscorlib.DNParameterModifier>): DDN.mscorlib.DNMethodInfo; overload;
    function GetMethods(bindingAttr: DDN.mscorlib.DNBindingFlags): TArray<DDN.mscorlib.DNMethodInfo>;
    function GetProperty(name: string; bindingAttr: DDN.mscorlib.DNBindingFlags; binder: DDN.mscorlib.DNBinder; returnType: DDN.mscorlib.DNType; types: TArray<DDN.mscorlib.DNType>; modifiers: TArray<DDN.mscorlib.DNParameterModifier>): DDN.mscorlib.DNPropertyInfo; overload;
    function GetProperties(bindingAttr: DDN.mscorlib.DNBindingFlags): TArray<DDN.mscorlib.DNPropertyInfo>;
    function InvokeMember(name: string; invokeAttr: DDN.mscorlib.DNBindingFlags; binder: DDN.mscorlib.DNBinder; target: DDN.mscorlib.DNObject; args: TArray<DDN.mscorlib.DNObject>; modifiers: TArray<DDN.mscorlib.DNParameterModifier>; locale: DDN.mscorlib.DNCultureInfo; namedParameters: TArray<string>): DDN.mscorlib.DNObject;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Item[index: Double]: DDN.mscorlib.DNObject read get_Item write set_Item; default;
    property Item[index: Int32]: DDN.mscorlib.DNObject read get_Item write set_Item; default;
    property Item[name: string]: DDN.mscorlib.DNObject read get_Item write set_Item; default;
    property Item[pars: TArray<DDN.mscorlib.DNObject>]: DDN.mscorlib.DNObject read get_Item write set_Item; default;
    property UnderlyingSystemType: DDN.mscorlib.DNType read get_UnderlyingSystemType;
  end;

  TDNTypeReflector = class(TDNGenericImport<DNTypeReflectorClass, DNTypeReflector>) end;

  //-------------namespace: Microsoft.JScript----------------
  DNScriptStreamClass = interface(DDN.mscorlib.DNObjectClass)
  ['{5814FA3E-B99D-5F1E-BEFE-BF1AE2584B17}']
  { constructors } 

    {class} function init: DNScriptStream;

  { static fields getter & setter } 

   function __fakeFieldGet_Out: DDN.mscorlib.DNTextWriter;
   function __fakeFieldGet_Error: DDN.mscorlib.DNTextWriter;

  { static fields } 

    {class} property &Out: DDN.mscorlib.DNTextWriter read __fakeFieldGet_Out;
    {class} property Error: DDN.mscorlib.DNTextWriter read __fakeFieldGet_Error;

  { static methods } 

    {class} procedure PrintStackTrace; overload;
    {class} procedure PrintStackTrace(e: DDN.mscorlib.DNException); overload;
    {class} procedure Write(str: string);
    {class} procedure WriteLine(str: string);

  end;

  [DNTypeName('Microsoft.JScript.ScriptStream')]
  DNScriptStream = interface(DDN.mscorlib.DNObject)
  ['{01E159AF-9848-3F2D-A5A6-1746260A544D}']
  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNScriptStream = class(TDNGenericImport<DNScriptStreamClass, DNScriptStream>) end;

  //-------------namespace: Microsoft.JScript----------------
  DNSimpleHashtableClass = interface(DDN.mscorlib.DNObjectClass)
  ['{7016C8FB-1F11-5A3D-801C-DC6A4816A624}']
  { constructors } 

    {class} function init(threshold: UInt32): DNSimpleHashtable;

  end;

  [DNTypeName('Microsoft.JScript.SimpleHashtable')]
  DNSimpleHashtable = interface(DDN.mscorlib.DNObject)
  ['{9225103B-62F2-3903-88E0-5A92B44A268C}']
  { getters & setters } 

    function get_Item(key: DDN.mscorlib.DNObject): DDN.mscorlib.DNObject;
    procedure set_Item(key: DDN.mscorlib.DNObject; value: DDN.mscorlib.DNObject);

  { methods } 

    function GetEnumerator: DDN.mscorlib.DNIDictionaryEnumerator;
    procedure Remove(key: DDN.mscorlib.DNObject);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Item[key: DDN.mscorlib.DNObject]: DDN.mscorlib.DNObject read get_Item write set_Item; default;
  end;

  TDNSimpleHashtable = class(TDNGenericImport<DNSimpleHashtableClass, DNSimpleHashtable>) end;

  //-------------namespace: Microsoft.JScript----------------
  DNSuperTypeMembersSorterClass = interface(DDN.mscorlib.DNObjectClass)
  ['{9AA6B7F8-0946-594A-B86B-8CC8D3429029}']
  end;

  [DNTypeName('Microsoft.JScript.SuperTypeMembersSorter')]
  DNSuperTypeMembersSorter = interface(DDN.mscorlib.DNObject)
  ['{C54E0D1F-F897-37FF-935B-D3C92151F701}']
  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNSuperTypeMembersSorter = class(TDNGenericImport<DNSuperTypeMembersSorterClass, DNSuperTypeMembersSorter>) end;

  //-------------namespace: Microsoft.JScript----------------
  DNTypedArrayClass = interface(DNObjectClass)
  ['{C8350306-78CA-572C-9D50-682D624795F5}']
  { constructors } 

    {class} function init(elementType: DDN.mscorlib.DNIReflect; rank: Int32): DNTypedArray;

  end;

  [DNTypeName('Microsoft.JScript.TypedArray')]
  DNTypedArray = interface(DDN.mscorlib.DNIReflect)
  ['{6E6C4A58-DB10-3427-BF04-D608E8360B76}']
  { getters & setters } 

    function get_UnderlyingSystemType: DDN.mscorlib.DNType;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetField(name: string; bindingAttr: DDN.mscorlib.DNBindingFlags): DDN.mscorlib.DNFieldInfo;
    function GetFields(bindingAttr: DDN.mscorlib.DNBindingFlags): TArray<DDN.mscorlib.DNFieldInfo>;
    function GetHashCode: Int32;
    function GetMember(name: string; bindingAttr: DDN.mscorlib.DNBindingFlags): TArray<DDN.mscorlib.DNMemberInfo>;
    function GetMembers(bindingAttr: DDN.mscorlib.DNBindingFlags): TArray<DDN.mscorlib.DNMemberInfo>;
    function GetMethod(name: string; bindingAttr: DDN.mscorlib.DNBindingFlags): DDN.mscorlib.DNMethodInfo; overload;
    function GetMethod(name: string; bindingAttr: DDN.mscorlib.DNBindingFlags; binder: DDN.mscorlib.DNBinder; types: TArray<DDN.mscorlib.DNType>; modifiers: TArray<DDN.mscorlib.DNParameterModifier>): DDN.mscorlib.DNMethodInfo; overload;
    function GetMethods(bindingAttr: DDN.mscorlib.DNBindingFlags): TArray<DDN.mscorlib.DNMethodInfo>;
    function GetProperty(name: string; bindingAttr: DDN.mscorlib.DNBindingFlags): DDN.mscorlib.DNPropertyInfo; overload;
    function GetProperty(name: string; bindingAttr: DDN.mscorlib.DNBindingFlags; binder: DDN.mscorlib.DNBinder; returnType: DDN.mscorlib.DNType; types: TArray<DDN.mscorlib.DNType>; modifiers: TArray<DDN.mscorlib.DNParameterModifier>): DDN.mscorlib.DNPropertyInfo; overload;
    function GetProperties(bindingAttr: DDN.mscorlib.DNBindingFlags): TArray<DDN.mscorlib.DNPropertyInfo>;
    function InvokeMember(name: string; flags: DDN.mscorlib.DNBindingFlags; binder: DDN.mscorlib.DNBinder; target: DDN.mscorlib.DNObject; args: TArray<DDN.mscorlib.DNObject>; modifiers: TArray<DDN.mscorlib.DNParameterModifier>; locale: DDN.mscorlib.DNCultureInfo; namedParameters: TArray<string>): DDN.mscorlib.DNObject;
    function ToString: string;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    property UnderlyingSystemType: DDN.mscorlib.DNType read get_UnderlyingSystemType;
  end;

  TDNTypedArray = class(TDNGenericImport<DNTypedArrayClass, DNTypedArray>) end;

  //-------------namespace: Microsoft.JScript.Vsa----------------
  DNBaseVsaEngineClass = interface(DNObjectClass)
  ['{AC8702B9-6907-581B-8602-DC3A51146250}']
  end;

  [DNTypeName('Microsoft.JScript.Vsa.BaseVsaEngine')]
  DNBaseVsaEngine = interface(DNIJSVsaEngine)
  ['{F8932A50-9127-48B6-B115-2BFDC627CEE3}']
  { getters & setters } 

    function get_AppDomain: DDN.mscorlib.DN_AppDomain;
    procedure set_AppDomain(value: DDN.mscorlib.DN_AppDomain);
    function get_Evidence: DDN.mscorlib.DNEvidence;
    procedure set_Evidence(value: DDN.mscorlib.DNEvidence);
    function get_ApplicationBase: string;
    procedure set_ApplicationBase(value: string);
    function get_Assembly: DDN.mscorlib.DNAssembly;
    function get_GenerateDebugInfo: Boolean;
    procedure set_GenerateDebugInfo(value: Boolean);
    function get_IsCompiled: Boolean;
    function get_IsDirty: Boolean;
    procedure set_IsDirty(value: Boolean);
    function get_IsRunning: Boolean;
    function get_Items: DNIJSVsaItems;
    function get_Language: string;
    function get_LCID: Int32;
    procedure set_LCID(value: Int32);
    function get_Name: string;
    procedure set_Name(value: string);
    function get_RootMoniker: string;
    procedure set_RootMoniker(value: string);
    function get_RootNamespace: string;
    procedure set_RootNamespace(value: string);
    function get_Site: DNIJSVsaSite;
    procedure set_Site(value: DNIJSVsaSite);
    function get_Version: string;

  { methods } 

    procedure Close;
    function Compile: Boolean;
    function GetOption(name: string): DDN.mscorlib.DNObject;
    procedure InitNew;
    procedure LoadSourceState(site: DNIJSVsaPersistSite);
    procedure Reset;
    procedure RevokeCache;
    procedure SetOption(name: string; value: DDN.mscorlib.DNObject);
    procedure SaveCompiledState(out pe: TArray<Byte>; out debugInfo: TArray<Byte>);
    procedure SaveSourceState(site: DNIJSVsaPersistSite);
    procedure Run;
    function IsValidIdentifier(ident: string): Boolean;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property AppDomain: DDN.mscorlib.DN_AppDomain read get_AppDomain write set_AppDomain;
    property Evidence: DDN.mscorlib.DNEvidence read get_Evidence write set_Evidence;
    property ApplicationBase: string read get_ApplicationBase write set_ApplicationBase;
    property Assembly: DDN.mscorlib.DNAssembly read get_Assembly;
    property GenerateDebugInfo: Boolean read get_GenerateDebugInfo write set_GenerateDebugInfo;
    property IsCompiled: Boolean read get_IsCompiled;
    property IsDirty: Boolean read get_IsDirty write set_IsDirty;
    property IsRunning: Boolean read get_IsRunning;
    property Items: DNIJSVsaItems read get_Items;
    property Language: string read get_Language;
    property LCID: Int32 read get_LCID write set_LCID;
    property Name: string read get_Name write set_Name;
    property RootMoniker: string read get_RootMoniker write set_RootMoniker;
    property RootNamespace: string read get_RootNamespace write set_RootNamespace;
    property Site: DNIJSVsaSite read get_Site write set_Site;
    property Version: string read get_Version;
  end;

  TDNBaseVsaEngine = class(TDNGenericImport<DNBaseVsaEngineClass, DNBaseVsaEngine>) end;

  //-------------namespace: Microsoft.JScript.Vsa----------------
  DNVsaEngineClass = interface(DNBaseVsaEngineClass)
  ['{AE9CC34A-8CFF-5105-8FCB-4BB391271B1D}']
  { constructors } 

    {class} function init: DNVsaEngine; overload;
    {class} function init(fast: Boolean): DNVsaEngine; overload;

  { static methods } 

    {class} function CreateEngineAndGetGlobalScopeWithType(fast: Boolean; assemblyNames: TArray<string>; callingTypeHandle: DDN.mscorlib.DNRuntimeTypeHandle): DNGlobalScope;
    {class} function CreateEngineAndGetGlobalScope(fast: Boolean; assemblyNames: TArray<string>): DNGlobalScope;
    {class} function CreateEngineAndGetGlobalScopeWithTypeAndRootNamespace(fast: Boolean; assemblyNames: TArray<string>; callingTypeHandle: DDN.mscorlib.DNRuntimeTypeHandle; rootNamespace: string): DNGlobalScope;
    {class} function CreateEngine: DNVsaEngine;
    {class} function CreateEngineWithType(callingTypeHandle: DDN.mscorlib.DNRuntimeTypeHandle): DNVsaEngine;

  end;

  [DNTypeName('Microsoft.JScript.Vsa.VsaEngine')]
  DNVsaEngine = interface(DNBaseVsaEngine)
  ['{B71E484D-93ED-4B56-BFB9-CEED5134822B}']
  { getters & setters } 

    function get_LenientGlobalObject: DNLenientGlobalObject;
    function get_AppDomain: DDN.mscorlib.DN_AppDomain;
    procedure set_AppDomain(value: DDN.mscorlib.DN_AppDomain);
    function get_Evidence: DDN.mscorlib.DNEvidence;
    procedure set_Evidence(value: DDN.mscorlib.DNEvidence);
    function get_ApplicationBase: string;
    procedure set_ApplicationBase(value: string);
    function get_Assembly: DDN.mscorlib.DNAssembly;
    function get_GenerateDebugInfo: Boolean;
    procedure set_GenerateDebugInfo(value: Boolean);
    function get_IsCompiled: Boolean;
    function get_IsDirty: Boolean;
    procedure set_IsDirty(value: Boolean);
    function get_IsRunning: Boolean;
    function get_Items: DNIJSVsaItems;
    function get_Language: string;
    function get_LCID: Int32;
    procedure set_LCID(value: Int32);
    function get_Name: string;
    procedure set_Name(value: string);
    function get_RootMoniker: string;
    procedure set_RootMoniker(value: string);
    function get_RootNamespace: string;
    procedure set_RootNamespace(value: string);
    function get_Site: DNIJSVsaSite;
    procedure set_Site(value: DNIJSVsaSite);
    function get_Version: string;

  { methods } 

    function Clone(domain: DDN.mscorlib.DNAppDomain): DNIJSVsaEngine;
    function CompileEmpty: Boolean;
    procedure ConnectEvents;
    procedure DisconnectEvents;
    function GetAssembly: DDN.mscorlib.DNAssembly;
    function GetItem(itemName: string): DNIJSVsaItem;
    function GetItemAtIndex(index: Int32): DNIJSVsaItem;
    function GetItemCount: Int32;
    function GetMainScope: DNGlobalScope;
    function GetModule: DDN.mscorlib.DNModule;
    function GetOriginalArrayConstructor: DNArrayConstructor;
    function GetOriginalObjectConstructor: DNObjectConstructor;
    function GetOriginalRegExpConstructor: DNRegExpConstructor;
    procedure Interrupt;
    function IsValidIdentifier(ident: string): Boolean;
    function PopScriptObject: DNScriptObject;
    procedure PushScriptObject(obj: DNScriptObject);
    procedure RegisterEventSource(name: string);
    procedure Reset;
    procedure Restart;
    procedure RunEmpty;
    procedure Run(domain: DDN.mscorlib.DNAppDomain); overload;
    function ScriptObjectStackTop: DNScriptObject;
    procedure SetOutputStream(output: DNIMessageReceiver);
    function GetGlobalScope: DNIVsaScriptScope;
    procedure InitVsaEngine(rootMoniker: string; site: DNIJSVsaSite);
    procedure Close;
    function Compile: Boolean;
    function GetOption(name: string): DDN.mscorlib.DNObject;
    procedure InitNew;
    procedure LoadSourceState(site: DNIJSVsaPersistSite);
    procedure RevokeCache;
    procedure SetOption(name: string; value: DDN.mscorlib.DNObject);
    procedure SaveCompiledState(out pe: TArray<Byte>; out debugInfo: TArray<Byte>);
    procedure SaveSourceState(site: DNIJSVsaPersistSite);
    procedure Run; overload;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property LenientGlobalObject: DNLenientGlobalObject read get_LenientGlobalObject;
    property AppDomain: DDN.mscorlib.DN_AppDomain read get_AppDomain write set_AppDomain;
    property Evidence: DDN.mscorlib.DNEvidence read get_Evidence write set_Evidence;
    property ApplicationBase: string read get_ApplicationBase write set_ApplicationBase;
    property Assembly: DDN.mscorlib.DNAssembly read get_Assembly;
    property GenerateDebugInfo: Boolean read get_GenerateDebugInfo write set_GenerateDebugInfo;
    property IsCompiled: Boolean read get_IsCompiled;
    property IsDirty: Boolean read get_IsDirty write set_IsDirty;
    property IsRunning: Boolean read get_IsRunning;
    property Items: DNIJSVsaItems read get_Items;
    property Language: string read get_Language;
    property LCID: Int32 read get_LCID write set_LCID;
    property Name: string read get_Name write set_Name;
    property RootMoniker: string read get_RootMoniker write set_RootMoniker;
    property RootNamespace: string read get_RootNamespace write set_RootNamespace;
    property Site: DNIJSVsaSite read get_Site write set_Site;
    property Version: string read get_Version;
  end;

  TDNVsaEngine = class(TDNGenericImport<DNVsaEngineClass, DNVsaEngine>) end;

  //-------------namespace: Microsoft.JScript.Vsa----------------
  DNBaseVsaSiteClass = interface(DNObjectClass)
  ['{99BAAA49-5EA5-5B8C-8C22-641B40D7F347}']
  { constructors } 

    {class} function init: DNBaseVsaSite;

  end;

  [DNTypeName('Microsoft.JScript.Vsa.BaseVsaSite')]
  DNBaseVsaSite = interface(DNIJSVsaSite)
  ['{172186BB-0EB9-3832-8716-B17A8B140E0E}']
  { getters & setters } 

    function get_Assembly: TArray<Byte>;
    function get_DebugInfo: TArray<Byte>;

  { methods } 

    procedure GetCompiledState(out pe: TArray<Byte>; out debugInfo: TArray<Byte>);
    function GetEventSourceInstance(itemName: string; eventSourceName: string): DDN.mscorlib.DNObject;
    function GetGlobalInstance(name: string): DDN.mscorlib.DNObject;
    procedure Notify(notify: string; optional: DDN.mscorlib.DNObject);
    function OnCompilerError(error: DNIJSVsaError): Boolean;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Assembly: TArray<Byte> read get_Assembly;
    property DebugInfo: TArray<Byte> read get_DebugInfo;
  end;

  TDNBaseVsaSite = class(TDNGenericImport<DNBaseVsaSiteClass, DNBaseVsaSite>) end;

  //-------------namespace: Microsoft.JScript.Vsa----------------
  DNBaseVsaStartupClass = interface(DDN.mscorlib.DNObjectClass)
  ['{64140E7B-837A-5DD8-8D35-9FDFB2670D9E}']
  end;

  [DNTypeName('Microsoft.JScript.Vsa.BaseVsaStartup')]
  DNBaseVsaStartup = interface(DDN.mscorlib.DNObject)
  ['{FA6559BE-276C-3FC6-8B0E-7EADD8D64C40}']
  { methods } 

    procedure SetSite(site: DNIJSVsaSite);
    procedure Startup;
    procedure Shutdown;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNBaseVsaStartup = class(TDNGenericImport<DNBaseVsaStartupClass, DNBaseVsaStartup>) end;

  //-------------namespace: Microsoft.JScript.Vsa----------------
  DNResInfoClass = interface(DDN.mscorlib.DNObjectClass)
  ['{A481384F-35DD-51A4-AC3B-3228B5BAD59B}']
  { constructors } 

    {class} function init(filename: string; name: string; isPublic: Boolean; isLinked: Boolean): DNResInfo; overload;
    {class} function init(resinfo: string; isLinked: Boolean): DNResInfo; overload;

  end;

  [DNTypeName('Microsoft.JScript.Vsa.ResInfo')]
  DNResInfo = interface(DDN.mscorlib.DNObject)
  ['{E3F15281-50FF-30DE-A541-1B9785E74E5A}']
  { fields getter & setter } 

   function __fakeFieldGet_filename: string;
   procedure __fakeFieldSet_filename(value: string);
   function __fakeFieldGet_fullpath: string;
   procedure __fakeFieldSet_fullpath(value: string);
   function __fakeFieldGet_name: string;
   procedure __fakeFieldSet_name(value: string);
   function __fakeFieldGet_isPublic: Boolean;
   procedure __fakeFieldSet_isPublic(value: Boolean);
   function __fakeFieldGet_isLinked: Boolean;
   procedure __fakeFieldSet_isLinked(value: Boolean);

  { fields } 

   property filename: string read __fakeFieldGet_filename write __fakeFieldSet_filename;
   property fullpath: string read __fakeFieldGet_fullpath write __fakeFieldSet_fullpath;
   property name: string read __fakeFieldGet_name write __fakeFieldSet_name;
   property isPublic: Boolean read __fakeFieldGet_isPublic write __fakeFieldSet_isPublic;
   property isLinked: Boolean read __fakeFieldGet_isLinked write __fakeFieldSet_isLinked;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNResInfo = class(TDNGenericImport<DNResInfoClass, DNResInfo>) end;

  //-------------namespace: Microsoft.JScript----------------
  DNVsaItemClass = interface(DNObjectClass)
  ['{B8852912-C3E2-54C1-A956-247F980E4944}']
  end;

  [DNTypeName('Microsoft.JScript.VsaItem')]
  DNVsaItem = interface(DNIJSVsaItem)
  ['{4BC9B26A-38F3-316A-9F40-E67FBEDA918B}']
  { getters & setters } 

    function get_IsDirty: Boolean;
    procedure set_IsDirty(value: Boolean);
    function get_Name: string;
    procedure set_Name(value: string);
    function get_ItemType: DNJSVsaItemType;

  { methods } 

    function GetOption(name: string): DDN.mscorlib.DNObject;
    procedure SetOption(name: string; value: DDN.mscorlib.DNObject);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property IsDirty: Boolean read get_IsDirty write set_IsDirty;
    property Name: string read get_Name write set_Name;
    property ItemType: DNJSVsaItemType read get_ItemType;
  end;

  TDNVsaItem = class(TDNGenericImport<DNVsaItemClass, DNVsaItem>) end;

  //-------------namespace: Microsoft.JScript----------------
  DNVsaItemsClass = interface(DNObjectClass)
  ['{8F91B953-9982-5CC9-A8C2-A3720BBDDDEB}']
  { constructors } 

    {class} function init(engine: DNVsaEngine): DNVsaItems;

  end;

  [DNTypeName('Microsoft.JScript.VsaItems')]
  DNVsaItems = interface(DNIJSVsaItems)
  ['{CE4CC16F-6692-3F98-AD40-51894B669737}']
  { getters & setters } 

    function get_Count: Int32;

  { methods } 

    procedure Close;
    function GetEnumerator: DDN.mscorlib.DNIEnumerator;
    function CreateItem(name: string; itemType: DNJSVsaItemType; itemFlag: DNJSVsaItemFlag): DNIJSVsaItem;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Count: Int32 read get_Count;
  end;

  TDNVsaItems = class(TDNGenericImport<DNVsaItemsClass, DNVsaItems>) end;

  //-------------namespace: Microsoft.JScript----------------
  DNExpandoClass = interface(DDN.mscorlib.DNAttributeClass)
  ['{69A3C8ED-AE6B-527F-9BCF-41A9CFC8CC8B}']
  { constructors } 

    {class} function init: DNExpando;

  end;

  [DNTypeName('Microsoft.JScript.Expando')]
  DNExpando = interface(DDN.mscorlib.DNAttribute)
  ['{3C80C5C6-9C5A-37F2-9066-18F915591F6F}']
  { getters & setters } 

    function get_TypeId: DDN.mscorlib.DNObject;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DDN.mscorlib.DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property TypeId: DDN.mscorlib.DNObject read get_TypeId;
  end;

  TDNExpando = class(TDNGenericImport<DNExpandoClass, DNExpando>) end;

  //-------------namespace: Microsoft.JScript----------------
  DNHideClass = interface(DDN.mscorlib.DNAttributeClass)
  ['{76CFFEA8-8C53-5764-86EE-0E274C17FC0B}']
  { constructors } 

    {class} function init: DNHide;

  end;

  [DNTypeName('Microsoft.JScript.Hide')]
  DNHide = interface(DDN.mscorlib.DNAttribute)
  ['{EC2FEB5E-A197-3917-98C3-C9E92FF9DED8}']
  { getters & setters } 

    function get_TypeId: DDN.mscorlib.DNObject;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DDN.mscorlib.DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property TypeId: DDN.mscorlib.DNObject read get_TypeId;
  end;

  TDNHide = class(TDNGenericImport<DNHideClass, DNHide>) end;

  //-------------namespace: Microsoft.JScript----------------
  DNJSFunctionAttributeClass = interface(DDN.mscorlib.DNAttributeClass)
  ['{906CA8DB-7EC8-5C72-897D-DB30C566CA7D}']
  { constructors } 

    {class} function init(value: DNJSFunctionAttributeEnum): DNJSFunctionAttribute; overload;
    {class} function init(value: DNJSFunctionAttributeEnum; builtinFunction: DNJSBuiltin): DNJSFunctionAttribute; overload;

  end;

  [DNTypeName('Microsoft.JScript.JSFunctionAttribute')]
  DNJSFunctionAttribute = interface(DDN.mscorlib.DNAttribute)
  ['{1C0D1CD4-7863-374B-9481-00EC9EA400D4}']
  { getters & setters } 

    function get_TypeId: DDN.mscorlib.DNObject;

  { methods } 

    function GetAttributeValue: DNJSFunctionAttributeEnum;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DDN.mscorlib.DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property TypeId: DDN.mscorlib.DNObject read get_TypeId;
  end;

  TDNJSFunctionAttribute = class(TDNGenericImport<DNJSFunctionAttributeClass, DNJSFunctionAttribute>) end;

  //-------------namespace: Microsoft.JScript----------------
  DNNotRecommendedClass = interface(DDN.mscorlib.DNAttributeClass)
  ['{C104F49A-47E9-501B-BAF0-82E1E591ED3B}']
  { constructors } 

    {class} function init(message: string): DNNotRecommended;

  end;

  [DNTypeName('Microsoft.JScript.NotRecommended')]
  DNNotRecommended = interface(DDN.mscorlib.DNAttribute)
  ['{00D5EE74-C74A-3D9D-B249-778494C268C2}']
  { getters & setters } 

    function get_IsError: Boolean;
    function get_Message: string;
    function get_TypeId: DDN.mscorlib.DNObject;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DDN.mscorlib.DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property IsError: Boolean read get_IsError;
    property Message: string read get_Message;
    property TypeId: DDN.mscorlib.DNObject read get_TypeId;
  end;

  TDNNotRecommended = class(TDNGenericImport<DNNotRecommendedClass, DNNotRecommended>) end;

  //-------------namespace: Microsoft.JScript----------------
  DNOverrideClass = interface(DDN.mscorlib.DNAttributeClass)
  ['{C698512A-6079-5AF0-9550-0D0A7A3E0CC7}']
  { constructors } 

    {class} function init: DNOverride;

  end;

  [DNTypeName('Microsoft.JScript.Override')]
  DNOverride = interface(DDN.mscorlib.DNAttribute)
  ['{2B3C12AA-3DEA-3335-BE03-3AA04045226C}']
  { getters & setters } 

    function get_TypeId: DDN.mscorlib.DNObject;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DDN.mscorlib.DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property TypeId: DDN.mscorlib.DNObject read get_TypeId;
  end;

  TDNOverride = class(TDNGenericImport<DNOverrideClass, DNOverride>) end;

  //-------------namespace: Microsoft.JScript----------------
  DNReferenceAttributeClass = interface(DDN.mscorlib.DNAttributeClass)
  ['{EAB1ABE3-91E1-5A8E-84B4-AA76EC636B65}']
  { constructors } 

    {class} function init(reference: string): DNReferenceAttribute;

  end;

  [DNTypeName('Microsoft.JScript.ReferenceAttribute')]
  DNReferenceAttribute = interface(DDN.mscorlib.DNAttribute)
  ['{12E6C9EB-F32C-36E7-9473-063044C070D6}']
  { getters & setters } 

    function get_TypeId: DDN.mscorlib.DNObject;

  { fields getter & setter } 

   function __fakeFieldGet_reference: string;
   procedure __fakeFieldSet_reference(value: string);

  { fields } 

   property reference: string read __fakeFieldGet_reference write __fakeFieldSet_reference;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DDN.mscorlib.DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property TypeId: DDN.mscorlib.DNObject read get_TypeId;
  end;

  TDNReferenceAttribute = class(TDNGenericImport<DNReferenceAttributeClass, DNReferenceAttribute>) end;

  //-------------namespace: Microsoft.JScript----------------
  DNCmdLineExceptionClass = interface(DDN.mscorlib.DNExceptionClass)
  ['{B0D5B544-EEBC-53E6-A39B-DB23C34EEAAA}']
  { constructors } 

    {class} function init(errorCode: DNCmdLineError; culture: DDN.mscorlib.DNCultureInfo): DNCmdLineException; overload;
    {class} function init(errorCode: DNCmdLineError; context: string; culture: DDN.mscorlib.DNCultureInfo): DNCmdLineException; overload;
    {class} function init: DNCmdLineException; overload;
    {class} function init(m: string): DNCmdLineException; overload;
    {class} function init(m: string; e: DDN.mscorlib.DNException): DNCmdLineException; overload;

  end;

  [DNTypeName('Microsoft.JScript.CmdLineException')]
  DNCmdLineException = interface(DDN.mscorlib.DNException)
  ['{9FB2FA43-F441-390E-8AC2-184AC4C84DDA}']
  { getters & setters } 

    function get_Message: string;
    function get_Data: DDN.mscorlib.DNIDictionary;
    function get_InnerException: DDN.mscorlib.DNException;
    function get_TargetSite: DDN.mscorlib.DNMethodBase;
    function get_StackTrace: string;
    function get_HelpLink: string;
    procedure set_HelpLink(value: string);
    function get_Source: string;
    procedure set_Source(value: string);
    function get_HResult: Int32;

  { methods } 

    procedure GetObjectData(s: DDN.mscorlib.DNSerializationInfo; c: DDN.mscorlib.DNStreamingContext);
    function ResourceKey(errorCode: DNCmdLineError): string;
    function GetBaseException: DDN.mscorlib.DNException;
    function ToString: string;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    property Message: string read get_Message;
    property Data: DDN.mscorlib.DNIDictionary read get_Data;
    property InnerException: DDN.mscorlib.DNException read get_InnerException;
    property TargetSite: DDN.mscorlib.DNMethodBase read get_TargetSite;
    property StackTrace: string read get_StackTrace;
    property HelpLink: string read get_HelpLink write set_HelpLink;
    property Source: string read get_Source write set_Source;
    property HResult: Int32 read get_HResult;
  end;

  TDNCmdLineException = class(TDNGenericImport<DNCmdLineExceptionClass, DNCmdLineException>) end;

  //-------------namespace: Microsoft.JScript----------------
  DNParserExceptionClass = interface(DDN.mscorlib.DNExceptionClass)
  ['{D0E81E0E-689B-5ADD-96D2-680CDC8AB0F9}']
  end;

  [DNTypeName('Microsoft.JScript.ParserException')]
  DNParserException = interface(DDN.mscorlib.DNException)
  ['{4C50F41D-B082-3285-B94D-AADE13829FDE}']
  { getters & setters } 

    function get_Message: string;
    function get_Data: DDN.mscorlib.DNIDictionary;
    function get_InnerException: DDN.mscorlib.DNException;
    function get_TargetSite: DDN.mscorlib.DNMethodBase;
    function get_StackTrace: string;
    function get_HelpLink: string;
    procedure set_HelpLink(value: string);
    function get_Source: string;
    procedure set_Source(value: string);
    function get_HResult: Int32;

  { methods } 

    function GetBaseException: DDN.mscorlib.DNException;
    function ToString: string;
    procedure GetObjectData(info: DDN.mscorlib.DNSerializationInfo; context: DDN.mscorlib.DNStreamingContext);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    property Message: string read get_Message;
    property Data: DDN.mscorlib.DNIDictionary read get_Data;
    property InnerException: DDN.mscorlib.DNException read get_InnerException;
    property TargetSite: DDN.mscorlib.DNMethodBase read get_TargetSite;
    property StackTrace: string read get_StackTrace;
    property HelpLink: string read get_HelpLink write set_HelpLink;
    property Source: string read get_Source write set_Source;
    property HResult: Int32 read get_HResult;
  end;

  TDNParserException = class(TDNGenericImport<DNParserExceptionClass, DNParserException>) end;

  //-------------namespace: Microsoft.JScript----------------
  DNEndOfFileClass = interface(DNParserExceptionClass)
  ['{EC5CE8A5-00E3-553E-B418-1D7AA7F5019A}']
  end;

  [DNTypeName('Microsoft.JScript.EndOfFile')]
  DNEndOfFile = interface(DNParserException)
  ['{FC0E925F-1171-39A1-BAAC-38C372DC111D}']
  { getters & setters } 

    function get_Message: string;
    function get_Data: DDN.mscorlib.DNIDictionary;
    function get_InnerException: DDN.mscorlib.DNException;
    function get_TargetSite: DDN.mscorlib.DNMethodBase;
    function get_StackTrace: string;
    function get_HelpLink: string;
    procedure set_HelpLink(value: string);
    function get_Source: string;
    procedure set_Source(value: string);
    function get_HResult: Int32;

  { methods } 

    function GetBaseException: DDN.mscorlib.DNException;
    function ToString: string;
    procedure GetObjectData(info: DDN.mscorlib.DNSerializationInfo; context: DDN.mscorlib.DNStreamingContext);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    property Message: string read get_Message;
    property Data: DDN.mscorlib.DNIDictionary read get_Data;
    property InnerException: DDN.mscorlib.DNException read get_InnerException;
    property TargetSite: DDN.mscorlib.DNMethodBase read get_TargetSite;
    property StackTrace: string read get_StackTrace;
    property HelpLink: string read get_HelpLink write set_HelpLink;
    property Source: string read get_Source write set_Source;
    property HResult: Int32 read get_HResult;
  end;

  TDNEndOfFile = class(TDNGenericImport<DNEndOfFileClass, DNEndOfFile>) end;

  //-------------namespace: Microsoft.JScript----------------
  DNBreakOutOfFinallyClass = interface(DDN.mscorlib.DNApplicationExceptionClass)
  ['{83A96511-A0DD-5094-8D2F-E1C19F43E3A0}']
  { constructors } 

    {class} function init(target: Int32): DNBreakOutOfFinally; overload;
    {class} function init(m: string): DNBreakOutOfFinally; overload;
    {class} function init(m: string; e: DDN.mscorlib.DNException): DNBreakOutOfFinally; overload;

  end;

  [DNTypeName('Microsoft.JScript.BreakOutOfFinally')]
  DNBreakOutOfFinally = interface(DDN.mscorlib.DNApplicationException)
  ['{2A52D6E9-AB9A-3309-9ED6-E25298434FFA}']
  { getters & setters } 

    function get_Message: string;
    function get_Data: DDN.mscorlib.DNIDictionary;
    function get_InnerException: DDN.mscorlib.DNException;
    function get_TargetSite: DDN.mscorlib.DNMethodBase;
    function get_StackTrace: string;
    function get_HelpLink: string;
    procedure set_HelpLink(value: string);
    function get_Source: string;
    procedure set_Source(value: string);
    function get_HResult: Int32;

  { fields getter & setter } 

   function __fakeFieldGet_target: Int32;
   procedure __fakeFieldSet_target(value: Int32);

  { fields } 

   property target: Int32 read __fakeFieldGet_target write __fakeFieldSet_target;

  { methods } 

    procedure GetObjectData(s: DDN.mscorlib.DNSerializationInfo; c: DDN.mscorlib.DNStreamingContext);
    function GetBaseException: DDN.mscorlib.DNException;
    function ToString: string;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    property Message: string read get_Message;
    property Data: DDN.mscorlib.DNIDictionary read get_Data;
    property InnerException: DDN.mscorlib.DNException read get_InnerException;
    property TargetSite: DDN.mscorlib.DNMethodBase read get_TargetSite;
    property StackTrace: string read get_StackTrace;
    property HelpLink: string read get_HelpLink write set_HelpLink;
    property Source: string read get_Source write set_Source;
    property HResult: Int32 read get_HResult;
  end;

  TDNBreakOutOfFinally = class(TDNGenericImport<DNBreakOutOfFinallyClass, DNBreakOutOfFinally>) end;

  //-------------namespace: Microsoft.JScript----------------
  DNContinueOutOfFinallyClass = interface(DDN.mscorlib.DNApplicationExceptionClass)
  ['{8E369D64-1722-5A92-B0D5-224A59B0D170}']
  { constructors } 

    {class} function init: DNContinueOutOfFinally; overload;
    {class} function init(target: Int32): DNContinueOutOfFinally; overload;
    {class} function init(m: string): DNContinueOutOfFinally; overload;
    {class} function init(m: string; e: DDN.mscorlib.DNException): DNContinueOutOfFinally; overload;

  end;

  [DNTypeName('Microsoft.JScript.ContinueOutOfFinally')]
  DNContinueOutOfFinally = interface(DDN.mscorlib.DNApplicationException)
  ['{9A313D35-FDA9-3EAC-806E-2ACB574E66DD}']
  { getters & setters } 

    function get_Message: string;
    function get_Data: DDN.mscorlib.DNIDictionary;
    function get_InnerException: DDN.mscorlib.DNException;
    function get_TargetSite: DDN.mscorlib.DNMethodBase;
    function get_StackTrace: string;
    function get_HelpLink: string;
    procedure set_HelpLink(value: string);
    function get_Source: string;
    procedure set_Source(value: string);
    function get_HResult: Int32;

  { fields getter & setter } 

   function __fakeFieldGet_target: Int32;
   procedure __fakeFieldSet_target(value: Int32);

  { fields } 

   property target: Int32 read __fakeFieldGet_target write __fakeFieldSet_target;

  { methods } 

    procedure GetObjectData(s: DDN.mscorlib.DNSerializationInfo; c: DDN.mscorlib.DNStreamingContext);
    function GetBaseException: DDN.mscorlib.DNException;
    function ToString: string;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    property Message: string read get_Message;
    property Data: DDN.mscorlib.DNIDictionary read get_Data;
    property InnerException: DDN.mscorlib.DNException read get_InnerException;
    property TargetSite: DDN.mscorlib.DNMethodBase read get_TargetSite;
    property StackTrace: string read get_StackTrace;
    property HelpLink: string read get_HelpLink write set_HelpLink;
    property Source: string read get_Source write set_Source;
    property HResult: Int32 read get_HResult;
  end;

  TDNContinueOutOfFinally = class(TDNGenericImport<DNContinueOutOfFinallyClass, DNContinueOutOfFinally>) end;

  //-------------namespace: Microsoft.JScript----------------
  DNJScriptExceptionClass = interface(DDN.mscorlib.DNApplicationExceptionClass)
  ['{C4B171EE-E08D-5742-90EB-7E1B17CDAE8F}']
  { constructors } 

    {class} function init: DNJScriptException; overload;
    {class} function init(m: string): DNJScriptException; overload;
    {class} function init(m: string; e: DDN.mscorlib.DNException): DNJScriptException; overload;
    {class} function init(errorNumber: DNJSError): DNJScriptException; overload;

  end;

  [DNTypeName('Microsoft.JScript.JScriptException')]
  DNJScriptException = interface(DDN.mscorlib.DNApplicationException)
  ['{7815EFA1-2147-3753-A264-E0539F39D66C}']
  { getters & setters } 

    function get_SourceMoniker: string;
    function get_StartColumn: Int32;
    function get_Column: Int32;
    function get_Description: string;
    function get_EndLine: Int32;
    function get_EndColumn: Int32;
    function get_Number: Int32;
    function get_ErrorNumber: Int32;
    function get_Line: Int32;
    function get_LineText: string;
    function get_Message: string;
    function get_Severity: Int32;
    function get_SourceItem: DNIJSVsaItem;
    function get_StackTrace: string;
    function get_Data: DDN.mscorlib.DNIDictionary;
    function get_InnerException: DDN.mscorlib.DNException;
    function get_TargetSite: DDN.mscorlib.DNMethodBase;
    function get_HelpLink: string;
    procedure set_HelpLink(value: string);
    function get_Source: string;
    procedure set_Source(value: string);
    function get_HResult: Int32;

  { methods } 

    procedure GetObjectData(info: DDN.mscorlib.DNSerializationInfo; context: DDN.mscorlib.DNStreamingContext);
    function GetBaseException: DDN.mscorlib.DNException;
    function ToString: string;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    property SourceMoniker: string read get_SourceMoniker;
    property StartColumn: Int32 read get_StartColumn;
    property Column: Int32 read get_Column;
    property Description: string read get_Description;
    property EndLine: Int32 read get_EndLine;
    property EndColumn: Int32 read get_EndColumn;
    property Number: Int32 read get_Number;
    property ErrorNumber: Int32 read get_ErrorNumber;
    property Line: Int32 read get_Line;
    property LineText: string read get_LineText;
    property Message: string read get_Message;
    property Severity: Int32 read get_Severity;
    property SourceItem: DNIJSVsaItem read get_SourceItem;
    property StackTrace: string read get_StackTrace;
    property Data: DDN.mscorlib.DNIDictionary read get_Data;
    property InnerException: DDN.mscorlib.DNException read get_InnerException;
    property TargetSite: DDN.mscorlib.DNMethodBase read get_TargetSite;
    property HelpLink: string read get_HelpLink write set_HelpLink;
    property Source: string read get_Source write set_Source;
    property HResult: Int32 read get_HResult;
  end;

  TDNJScriptException = class(TDNGenericImport<DNJScriptExceptionClass, DNJScriptException>) end;

  //-------------namespace: Microsoft.JScript----------------
  DNNoContextExceptionClass = interface(DDN.mscorlib.DNApplicationExceptionClass)
  ['{4ED94B91-DC91-5BF6-AAAB-E7810C98DDF7}']
  { constructors } 

    {class} function init: DNNoContextException; overload;
    {class} function init(m: string): DNNoContextException; overload;
    {class} function init(m: string; e: DDN.mscorlib.DNException): DNNoContextException; overload;

  end;

  [DNTypeName('Microsoft.JScript.NoContextException')]
  DNNoContextException = interface(DDN.mscorlib.DNApplicationException)
  ['{06ACC406-2823-329B-A3AF-6A530AE10739}']
  { getters & setters } 

    function get_Message: string;
    function get_Data: DDN.mscorlib.DNIDictionary;
    function get_InnerException: DDN.mscorlib.DNException;
    function get_TargetSite: DDN.mscorlib.DNMethodBase;
    function get_StackTrace: string;
    function get_HelpLink: string;
    procedure set_HelpLink(value: string);
    function get_Source: string;
    procedure set_Source(value: string);
    function get_HResult: Int32;

  { methods } 

    function GetBaseException: DDN.mscorlib.DNException;
    function ToString: string;
    procedure GetObjectData(info: DDN.mscorlib.DNSerializationInfo; context: DDN.mscorlib.DNStreamingContext);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    property Message: string read get_Message;
    property Data: DDN.mscorlib.DNIDictionary read get_Data;
    property InnerException: DDN.mscorlib.DNException read get_InnerException;
    property TargetSite: DDN.mscorlib.DNMethodBase read get_TargetSite;
    property StackTrace: string read get_StackTrace;
    property HelpLink: string read get_HelpLink write set_HelpLink;
    property Source: string read get_Source write set_Source;
    property HResult: Int32 read get_HResult;
  end;

  TDNNoContextException = class(TDNGenericImport<DNNoContextExceptionClass, DNNoContextException>) end;

  //-------------namespace: Microsoft.JScript----------------
  DNReturnOutOfFinallyClass = interface(DDN.mscorlib.DNApplicationExceptionClass)
  ['{E6CA4BF1-F4A9-5E84-BD40-06C81CBD29EE}']
  { constructors } 

    {class} function init: DNReturnOutOfFinally; overload;
    {class} function init(m: string): DNReturnOutOfFinally; overload;
    {class} function init(m: string; e: DDN.mscorlib.DNException): DNReturnOutOfFinally; overload;

  end;

  [DNTypeName('Microsoft.JScript.ReturnOutOfFinally')]
  DNReturnOutOfFinally = interface(DDN.mscorlib.DNApplicationException)
  ['{026B6BC9-F948-3744-A243-4F640405BAAC}']
  { getters & setters } 

    function get_Message: string;
    function get_Data: DDN.mscorlib.DNIDictionary;
    function get_InnerException: DDN.mscorlib.DNException;
    function get_TargetSite: DDN.mscorlib.DNMethodBase;
    function get_StackTrace: string;
    function get_HelpLink: string;
    procedure set_HelpLink(value: string);
    function get_Source: string;
    procedure set_Source(value: string);
    function get_HResult: Int32;

  { methods } 

    function GetBaseException: DDN.mscorlib.DNException;
    function ToString: string;
    procedure GetObjectData(info: DDN.mscorlib.DNSerializationInfo; context: DDN.mscorlib.DNStreamingContext);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    property Message: string read get_Message;
    property Data: DDN.mscorlib.DNIDictionary read get_Data;
    property InnerException: DDN.mscorlib.DNException read get_InnerException;
    property TargetSite: DDN.mscorlib.DNMethodBase read get_TargetSite;
    property StackTrace: string read get_StackTrace;
    property HelpLink: string read get_HelpLink write set_HelpLink;
    property Source: string read get_Source write set_Source;
    property HResult: Int32 read get_HResult;
  end;

  TDNReturnOutOfFinally = class(TDNGenericImport<DNReturnOutOfFinallyClass, DNReturnOutOfFinally>) end;

  //-------------namespace: Microsoft.JScript.Vsa----------------
  DNJSVsaExceptionClass = interface(DDN.mscorlib.DNExternalExceptionClass)
  ['{25EFBB8C-6D72-5232-A196-5F52640E9A15}']
  { constructors } 

    {class} function init: DNJSVsaException; overload;
    {class} function init(message: string): DNJSVsaException; overload;
    {class} function init(message: string; innerException: DDN.mscorlib.DNException): DNJSVsaException; overload;
    {class} function init(info: DDN.mscorlib.DNSerializationInfo; context: DDN.mscorlib.DNStreamingContext): DNJSVsaException; overload;
    {class} function init(error: DNJSVsaError): DNJSVsaException; overload;
    {class} function init(error: DNJSVsaError; message: string): DNJSVsaException; overload;
    {class} function init(error: DNJSVsaError; message: string; innerException: DDN.mscorlib.DNException): DNJSVsaException; overload;

  end;

  [DNTypeName('Microsoft.JScript.Vsa.JSVsaException')]
  DNJSVsaException = interface(DDN.mscorlib.DNExternalException)
  ['{064C47AC-C9DF-4FCD-9009-E9299D620018}']
  { getters & setters } 

    function get_ErrorCode: DNJSVsaError;
    function get_Message: string;
    function get_Data: DDN.mscorlib.DNIDictionary;
    function get_InnerException: DDN.mscorlib.DNException;
    function get_TargetSite: DDN.mscorlib.DNMethodBase;
    function get_StackTrace: string;
    function get_HelpLink: string;
    procedure set_HelpLink(value: string);
    function get_Source: string;
    procedure set_Source(value: string);
    function get_HResult: Int32;

  { methods } 

    procedure GetObjectData(info: DDN.mscorlib.DNSerializationInfo; context: DDN.mscorlib.DNStreamingContext);
    function ToString: string;
    function GetBaseException: DDN.mscorlib.DNException;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    property ErrorCode: DNJSVsaError read get_ErrorCode;
    property Message: string read get_Message;
    property Data: DDN.mscorlib.DNIDictionary read get_Data;
    property InnerException: DDN.mscorlib.DNException read get_InnerException;
    property TargetSite: DDN.mscorlib.DNMethodBase read get_TargetSite;
    property StackTrace: string read get_StackTrace;
    property HelpLink: string read get_HelpLink write set_HelpLink;
    property Source: string read get_Source write set_Source;
    property HResult: Int32 read get_HResult;
  end;

  TDNJSVsaException = class(TDNGenericImport<DNJSVsaExceptionClass, DNJSVsaException>) end;

  //-------------namespace: Microsoft.JScript----------------
  DNJScriptCodeProviderClass = interface(DNObjectClass)
  ['{5216C806-BEFF-5B2B-884A-9CEA3065964C}']
  { constructors } 

    {class} function init: DNJScriptCodeProvider;

  end;

  [DNTypeName('Microsoft.JScript.JScriptCodeProvider')]
  DNJScriptCodeProvider = interface(DNObject)
  ['{1C386577-AEC5-3CE5-A00C-5B1193CF2AB0}']
  { getters & setters } 

    function get_FileExtension: string;
    function get_LanguageOptions: DDN.System.DNLanguageOptions;
    function get_Site: DDN.System.DNISite;
    procedure set_Site(value: DDN.System.DNISite);
    function get_Container: DDN.System.DNIContainer;

  { events } 

    procedure add_Disposed(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Disposed(value: DDN.mscorlib.DNEventHandler);

  { methods } 

    function CreateGenerator: DDN.System.DNICodeGenerator; overload;
    function CreateCompiler: DDN.System.DNICodeCompiler;
    function CreateGenerator(output: DDN.mscorlib.DNTextWriter): DDN.System.DNICodeGenerator; overload;
    function CreateGenerator(fileName: string): DDN.System.DNICodeGenerator; overload;
    function CreateParser: DDN.System.DNICodeParser;
    function GetConverter(&type: DDN.mscorlib.DNType): DDN.System.DNTypeConverter;
    function CompileAssemblyFromDom(options: DDN.System.DNCompilerParameters; compilationUnits: TArray<DDN.System.DNCodeCompileUnit>): DDN.System.DNCompilerResults;
    function CompileAssemblyFromFile(options: DDN.System.DNCompilerParameters; fileNames: TArray<string>): DDN.System.DNCompilerResults;
    function CompileAssemblyFromSource(options: DDN.System.DNCompilerParameters; sources: TArray<string>): DDN.System.DNCompilerResults;
    function IsValidIdentifier(value: string): Boolean;
    function CreateEscapedIdentifier(value: string): string;
    function CreateValidIdentifier(value: string): string;
    function GetTypeOutput(&type: DDN.System.DNCodeTypeReference): string;
    function Supports(generatorSupport: DDN.System.DNGeneratorSupport): Boolean;
    procedure GenerateCodeFromExpression(expression: DDN.System.DNCodeExpression; writer: DDN.mscorlib.DNTextWriter; options: DDN.System.DNCodeGeneratorOptions);
    procedure GenerateCodeFromStatement(statement: DDN.System.DNCodeStatement; writer: DDN.mscorlib.DNTextWriter; options: DDN.System.DNCodeGeneratorOptions);
    procedure GenerateCodeFromNamespace(codeNamespace: DDN.System.DNCodeNamespace; writer: DDN.mscorlib.DNTextWriter; options: DDN.System.DNCodeGeneratorOptions);
    procedure GenerateCodeFromCompileUnit(compileUnit: DDN.System.DNCodeCompileUnit; writer: DDN.mscorlib.DNTextWriter; options: DDN.System.DNCodeGeneratorOptions);
    procedure GenerateCodeFromType(codeType: DDN.System.DNCodeTypeDeclaration; writer: DDN.mscorlib.DNTextWriter; options: DDN.System.DNCodeGeneratorOptions);
    procedure GenerateCodeFromMember(member: DDN.System.DNCodeTypeMember; writer: DDN.mscorlib.DNTextWriter; options: DDN.System.DNCodeGeneratorOptions);
    function Parse(codeStream: DDN.mscorlib.DNTextReader): DDN.System.DNCodeCompileUnit;
    procedure Dispose;
    function ToString: string;
    function GetLifetimeService: DDN.mscorlib.DNObject;
    function InitializeLifetimeService: DDN.mscorlib.DNObject;
    function CreateObjRef(requestedType: DDN.mscorlib.DNType): DDN.mscorlib.DNObjRef;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    property FileExtension: string read get_FileExtension;
    property LanguageOptions: DDN.System.DNLanguageOptions read get_LanguageOptions;
    property Site: DDN.System.DNISite read get_Site write set_Site;
    property Container: DDN.System.DNIContainer read get_Container;
  end;

  TDNJScriptCodeProvider = class(TDNGenericImport<DNJScriptCodeProviderClass, DNJScriptCodeProvider>) end;

  //-------------namespace: Microsoft.JScript----------------
  DNCOMCharStreamClass = interface(DDN.mscorlib.DNStreamClass)
  ['{FF096A28-C769-5C34-A2AD-D4EBD02A84D6}']
  { constructors } 

    {class} function init(messageReceiver: DNIMessageReceiver): DNCOMCharStream;

  end;

  [DNTypeName('Microsoft.JScript.COMCharStream')]
  DNCOMCharStream = interface(DDN.mscorlib.DNStream)
  ['{3D480C51-E2C1-3963-9174-5B1A5426BA7A}']
  { getters & setters } 

    function get_CanWrite: Boolean;
    function get_CanRead: Boolean;
    function get_CanSeek: Boolean;
    function get_Length: Int64;
    function get_Position: Int64;
    procedure set_Position(value: Int64);
    function get_CanTimeout: Boolean;
    function get_ReadTimeout: Int32;
    procedure set_ReadTimeout(value: Int32);
    function get_WriteTimeout: Int32;
    procedure set_WriteTimeout(value: Int32);

  { methods } 

    procedure Close;
    procedure Flush;
    function Read(buffer: TArray<Byte>; offset: Int32; count: Int32): Int32;
    function Seek(offset: Int64; origin: DDN.mscorlib.DNSeekOrigin): Int64;
    procedure SetLength(value: Int64);
    procedure Write(buffer: TArray<Byte>; offset: Int32; count: Int32);
    function CopyToAsync(destination: DDN.mscorlib.DNStream; bufferSize: Int32; cancellationToken: DDN.mscorlib.DNCancellationToken): DDN.mscorlib.DNTask; overload;
    procedure Dispose;
    function BeginRead(buffer: TArray<Byte>; offset: Int32; count: Int32; callback: DDN.mscorlib.DNAsyncCallback; state: DDN.mscorlib.DNObject): DDN.mscorlib.DNIAsyncResult;
    function EndRead(asyncResult: DDN.mscorlib.DNIAsyncResult): Int32;
    function ReadAsync(buffer: TArray<Byte>; offset: Int32; count: Int32; cancellationToken: DDN.mscorlib.DNCancellationToken): DDN.mscorlib.DNTask<Int32>; overload;
    function BeginWrite(buffer: TArray<Byte>; offset: Int32; count: Int32; callback: DDN.mscorlib.DNAsyncCallback; state: DDN.mscorlib.DNObject): DDN.mscorlib.DNIAsyncResult;
    procedure EndWrite(asyncResult: DDN.mscorlib.DNIAsyncResult);
    function WriteAsync(buffer: TArray<Byte>; offset: Int32; count: Int32; cancellationToken: DDN.mscorlib.DNCancellationToken): DDN.mscorlib.DNTask; overload;
    function ReadByte: Int32;
    procedure WriteByte(value: Byte);
    function CopyToAsync(destination: DDN.mscorlib.DNStream): DDN.mscorlib.DNTask; overload;
    function CopyToAsync(destination: DDN.mscorlib.DNStream; bufferSize: Int32): DDN.mscorlib.DNTask; overload;
    procedure CopyTo(destination: DDN.mscorlib.DNStream); overload;
    procedure CopyTo(destination: DDN.mscorlib.DNStream; bufferSize: Int32); overload;
    function FlushAsync: DDN.mscorlib.DNTask; overload;
    function FlushAsync(cancellationToken: DDN.mscorlib.DNCancellationToken): DDN.mscorlib.DNTask; overload;
    function ReadAsync(buffer: TArray<Byte>; offset: Int32; count: Int32): DDN.mscorlib.DNTask<Int32>; overload;
    function WriteAsync(buffer: TArray<Byte>; offset: Int32; count: Int32): DDN.mscorlib.DNTask; overload;
    function GetLifetimeService: DDN.mscorlib.DNObject;
    function InitializeLifetimeService: DDN.mscorlib.DNObject;
    function CreateObjRef(requestedType: DDN.mscorlib.DNType): DDN.mscorlib.DNObjRef;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property CanWrite: Boolean read get_CanWrite;
    property CanRead: Boolean read get_CanRead;
    property CanSeek: Boolean read get_CanSeek;
    property Length: Int64 read get_Length;
    property Position: Int64 read get_Position write set_Position;
    property CanTimeout: Boolean read get_CanTimeout;
    property ReadTimeout: Int32 read get_ReadTimeout write set_ReadTimeout;
    property WriteTimeout: Int32 read get_WriteTimeout write set_WriteTimeout;
  end;

  TDNCOMCharStream = class(TDNGenericImport<DNCOMCharStreamClass, DNCOMCharStream>) end;

  //-------------namespace: Microsoft.JScript----------------
  DNCOMFieldInfoClass = interface(DDN.mscorlib.DNFieldInfoClass)
  ['{CC509485-31A0-5FB2-8465-9991231D0089}']
  { constructors } 

    {class} function init: DNCOMFieldInfo;

  end;

  [DNTypeName('Microsoft.JScript.COMFieldInfo')]
  DNCOMFieldInfo = interface(DDN.mscorlib.DNFieldInfo)
  ['{CA0F511A-FAF2-4942-B9A8-17D5E46514E8}']
  { getters & setters } 

    function get_Attributes: DDN.mscorlib.DNFieldAttributes;
    function get_DeclaringType: DDN.mscorlib.DNType;
    function get_FieldHandle: DDN.mscorlib.DNRuntimeFieldHandle;
    function get_FieldType: DDN.mscorlib.DNType;
    function get_MemberType: DDN.mscorlib.DNMemberTypes;
    function get_Name: string;
    function get_ReflectedType: DDN.mscorlib.DNType;
    function get_IsPublic: Boolean;
    function get_IsPrivate: Boolean;
    function get_IsFamily: Boolean;
    function get_IsAssembly: Boolean;
    function get_IsFamilyAndAssembly: Boolean;
    function get_IsFamilyOrAssembly: Boolean;
    function get_IsStatic: Boolean;
    function get_IsInitOnly: Boolean;
    function get_IsLiteral: Boolean;
    function get_IsNotSerialized: Boolean;
    function get_IsSpecialName: Boolean;
    function get_IsPinvokeImpl: Boolean;
    function get_IsSecurityCritical: Boolean;
    function get_IsSecuritySafeCritical: Boolean;
    function get_IsSecurityTransparent: Boolean;
    function get_CustomAttributes: DDN.mscorlib.DNIEnumerable<DDN.mscorlib.DNCustomAttributeData>;
    function get_MetadataToken: Int32;
    function get_Module: DDN.mscorlib.DNModule;

  { methods } 

    procedure Initialize(name: string; dispatch: DNCOMMemberInfo);
    function GetCOMMemberInfo: DNCOMMemberInfo;
    function IsDefined(t: DDN.mscorlib.DNType; inherit: Boolean): Boolean;
    function GetValue(obj: DDN.mscorlib.DNObject): DDN.mscorlib.DNObject;
    procedure SetValue(obj: DDN.mscorlib.DNObject; value: DDN.mscorlib.DNObject; invokeAttr: DDN.mscorlib.DNBindingFlags; binder: DDN.mscorlib.DNBinder; culture: DDN.mscorlib.DNCultureInfo); overload;
    function GetCustomAttributes(t: DDN.mscorlib.DNType; inherit: Boolean): TArray<DDN.mscorlib.DNObject>; overload;
    function GetCustomAttributes(inherit: Boolean): TArray<DDN.mscorlib.DNObject>; overload;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetRequiredCustomModifiers: TArray<DDN.mscorlib.DNType>;
    function GetOptionalCustomModifiers: TArray<DDN.mscorlib.DNType>;
    procedure SetValueDirect(obj: DDN.mscorlib.DNTypedReference; value: DDN.mscorlib.DNObject);
    function GetValueDirect(obj: DDN.mscorlib.DNTypedReference): DDN.mscorlib.DNObject;
    function GetRawConstantValue: DDN.mscorlib.DNObject;
    procedure SetValue(obj: DDN.mscorlib.DNObject; value: DDN.mscorlib.DNObject); overload;
    function GetCustomAttributesData: DDN.mscorlib.DNIList<DDN.mscorlib.DNCustomAttributeData>;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Attributes: DDN.mscorlib.DNFieldAttributes read get_Attributes;
    property DeclaringType: DDN.mscorlib.DNType read get_DeclaringType;
    property FieldHandle: DDN.mscorlib.DNRuntimeFieldHandle read get_FieldHandle;
    property FieldType: DDN.mscorlib.DNType read get_FieldType;
    property MemberType: DDN.mscorlib.DNMemberTypes read get_MemberType;
    property Name: string read get_Name;
    property ReflectedType: DDN.mscorlib.DNType read get_ReflectedType;
    property IsPublic: Boolean read get_IsPublic;
    property IsPrivate: Boolean read get_IsPrivate;
    property IsFamily: Boolean read get_IsFamily;
    property IsAssembly: Boolean read get_IsAssembly;
    property IsFamilyAndAssembly: Boolean read get_IsFamilyAndAssembly;
    property IsFamilyOrAssembly: Boolean read get_IsFamilyOrAssembly;
    property IsStatic: Boolean read get_IsStatic;
    property IsInitOnly: Boolean read get_IsInitOnly;
    property IsLiteral: Boolean read get_IsLiteral;
    property IsNotSerialized: Boolean read get_IsNotSerialized;
    property IsSpecialName: Boolean read get_IsSpecialName;
    property IsPinvokeImpl: Boolean read get_IsPinvokeImpl;
    property IsSecurityCritical: Boolean read get_IsSecurityCritical;
    property IsSecuritySafeCritical: Boolean read get_IsSecuritySafeCritical;
    property IsSecurityTransparent: Boolean read get_IsSecurityTransparent;
    property CustomAttributes: DDN.mscorlib.DNIEnumerable<DDN.mscorlib.DNCustomAttributeData> read get_CustomAttributes;
    property MetadataToken: Int32 read get_MetadataToken;
    property Module: DDN.mscorlib.DNModule read get_Module;
  end;

  TDNCOMFieldInfo = class(TDNGenericImport<DNCOMFieldInfoClass, DNCOMFieldInfo>) end;

  //-------------namespace: Microsoft.JScript----------------
  DNJSFieldClass = interface(DDN.mscorlib.DNFieldInfoClass)
  ['{D68B0ED9-CED3-5387-94BC-0CF27F24613C}']
  end;

  [DNTypeName('Microsoft.JScript.JSField')]
  DNJSField = interface(DDN.mscorlib.DNFieldInfo)
  ['{41329228-40B0-3518-B508-488D81CF4DAB}']
  { getters & setters } 

    function get_Attributes: DDN.mscorlib.DNFieldAttributes;
    function get_DeclaringType: DDN.mscorlib.DNType;
    function get_FieldHandle: DDN.mscorlib.DNRuntimeFieldHandle;
    function get_FieldType: DDN.mscorlib.DNType;
    function get_MemberType: DDN.mscorlib.DNMemberTypes;
    function get_Name: string;
    function get_ReflectedType: DDN.mscorlib.DNType;
    function get_IsPublic: Boolean;
    function get_IsPrivate: Boolean;
    function get_IsFamily: Boolean;
    function get_IsAssembly: Boolean;
    function get_IsFamilyAndAssembly: Boolean;
    function get_IsFamilyOrAssembly: Boolean;
    function get_IsStatic: Boolean;
    function get_IsInitOnly: Boolean;
    function get_IsLiteral: Boolean;
    function get_IsNotSerialized: Boolean;
    function get_IsSpecialName: Boolean;
    function get_IsPinvokeImpl: Boolean;
    function get_IsSecurityCritical: Boolean;
    function get_IsSecuritySafeCritical: Boolean;
    function get_IsSecurityTransparent: Boolean;
    function get_CustomAttributes: DDN.mscorlib.DNIEnumerable<DDN.mscorlib.DNCustomAttributeData>;
    function get_MetadataToken: Int32;
    function get_Module: DDN.mscorlib.DNModule;

  { methods } 

    function IsDefined(&type: DDN.mscorlib.DNType; inherit: Boolean): Boolean;
    function GetCustomAttributes(t: DDN.mscorlib.DNType; inherit: Boolean): TArray<DDN.mscorlib.DNObject>; overload;
    function GetCustomAttributes(inherit: Boolean): TArray<DDN.mscorlib.DNObject>; overload;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetRequiredCustomModifiers: TArray<DDN.mscorlib.DNType>;
    function GetOptionalCustomModifiers: TArray<DDN.mscorlib.DNType>;
    procedure SetValueDirect(obj: DDN.mscorlib.DNTypedReference; value: DDN.mscorlib.DNObject);
    function GetValueDirect(obj: DDN.mscorlib.DNTypedReference): DDN.mscorlib.DNObject;
    function GetRawConstantValue: DDN.mscorlib.DNObject;
    procedure SetValue(obj: DDN.mscorlib.DNObject; value: DDN.mscorlib.DNObject); overload;
    function GetValue(obj: DDN.mscorlib.DNObject): DDN.mscorlib.DNObject;
    procedure SetValue(obj: DDN.mscorlib.DNObject; value: DDN.mscorlib.DNObject; invokeAttr: DDN.mscorlib.DNBindingFlags; binder: DDN.mscorlib.DNBinder; culture: DDN.mscorlib.DNCultureInfo); overload;
    function GetCustomAttributesData: DDN.mscorlib.DNIList<DDN.mscorlib.DNCustomAttributeData>;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Attributes: DDN.mscorlib.DNFieldAttributes read get_Attributes;
    property DeclaringType: DDN.mscorlib.DNType read get_DeclaringType;
    property FieldHandle: DDN.mscorlib.DNRuntimeFieldHandle read get_FieldHandle;
    property FieldType: DDN.mscorlib.DNType read get_FieldType;
    property MemberType: DDN.mscorlib.DNMemberTypes read get_MemberType;
    property Name: string read get_Name;
    property ReflectedType: DDN.mscorlib.DNType read get_ReflectedType;
    property IsPublic: Boolean read get_IsPublic;
    property IsPrivate: Boolean read get_IsPrivate;
    property IsFamily: Boolean read get_IsFamily;
    property IsAssembly: Boolean read get_IsAssembly;
    property IsFamilyAndAssembly: Boolean read get_IsFamilyAndAssembly;
    property IsFamilyOrAssembly: Boolean read get_IsFamilyOrAssembly;
    property IsStatic: Boolean read get_IsStatic;
    property IsInitOnly: Boolean read get_IsInitOnly;
    property IsLiteral: Boolean read get_IsLiteral;
    property IsNotSerialized: Boolean read get_IsNotSerialized;
    property IsSpecialName: Boolean read get_IsSpecialName;
    property IsPinvokeImpl: Boolean read get_IsPinvokeImpl;
    property IsSecurityCritical: Boolean read get_IsSecurityCritical;
    property IsSecuritySafeCritical: Boolean read get_IsSecuritySafeCritical;
    property IsSecurityTransparent: Boolean read get_IsSecurityTransparent;
    property CustomAttributes: DDN.mscorlib.DNIEnumerable<DDN.mscorlib.DNCustomAttributeData> read get_CustomAttributes;
    property MetadataToken: Int32 read get_MetadataToken;
    property Module: DDN.mscorlib.DNModule read get_Module;
  end;

  TDNJSField = class(TDNGenericImport<DNJSFieldClass, DNJSField>) end;

  //-------------namespace: Microsoft.JScript----------------
  DNJSVariableFieldClass = interface(DNJSFieldClass)
  ['{21529387-5F15-58FD-A346-E01D3F32DDC3}']
  end;

  [DNTypeName('Microsoft.JScript.JSVariableField')]
  DNJSVariableField = interface(DNJSField)
  ['{08405F7D-AC70-33BA-B067-76CA1F075989}']
  { getters & setters } 

    function get_Attributes: DDN.mscorlib.DNFieldAttributes;
    function get_DeclaringType: DDN.mscorlib.DNType;
    function get_FieldType: DDN.mscorlib.DNType;
    function get_Name: string;
    function get_FieldHandle: DDN.mscorlib.DNRuntimeFieldHandle;
    function get_MemberType: DDN.mscorlib.DNMemberTypes;
    function get_ReflectedType: DDN.mscorlib.DNType;
    function get_IsPublic: Boolean;
    function get_IsPrivate: Boolean;
    function get_IsFamily: Boolean;
    function get_IsAssembly: Boolean;
    function get_IsFamilyAndAssembly: Boolean;
    function get_IsFamilyOrAssembly: Boolean;
    function get_IsStatic: Boolean;
    function get_IsInitOnly: Boolean;
    function get_IsLiteral: Boolean;
    function get_IsNotSerialized: Boolean;
    function get_IsSpecialName: Boolean;
    function get_IsPinvokeImpl: Boolean;
    function get_IsSecurityCritical: Boolean;
    function get_IsSecuritySafeCritical: Boolean;
    function get_IsSecurityTransparent: Boolean;
    function get_CustomAttributes: DDN.mscorlib.DNIEnumerable<DDN.mscorlib.DNCustomAttributeData>;
    function get_MetadataToken: Int32;
    function get_Module: DDN.mscorlib.DNModule;

  { methods } 

    function GetCustomAttributes(inherit: Boolean): TArray<DDN.mscorlib.DNObject>; overload;
    function IsDefined(&type: DDN.mscorlib.DNType; inherit: Boolean): Boolean;
    function GetCustomAttributes(t: DDN.mscorlib.DNType; inherit: Boolean): TArray<DDN.mscorlib.DNObject>; overload;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetRequiredCustomModifiers: TArray<DDN.mscorlib.DNType>;
    function GetOptionalCustomModifiers: TArray<DDN.mscorlib.DNType>;
    procedure SetValueDirect(obj: DDN.mscorlib.DNTypedReference; value: DDN.mscorlib.DNObject);
    function GetValueDirect(obj: DDN.mscorlib.DNTypedReference): DDN.mscorlib.DNObject;
    function GetRawConstantValue: DDN.mscorlib.DNObject;
    procedure SetValue(obj: DDN.mscorlib.DNObject; value: DDN.mscorlib.DNObject); overload;
    function GetValue(obj: DDN.mscorlib.DNObject): DDN.mscorlib.DNObject;
    procedure SetValue(obj: DDN.mscorlib.DNObject; value: DDN.mscorlib.DNObject; invokeAttr: DDN.mscorlib.DNBindingFlags; binder: DDN.mscorlib.DNBinder; culture: DDN.mscorlib.DNCultureInfo); overload;
    function GetCustomAttributesData: DDN.mscorlib.DNIList<DDN.mscorlib.DNCustomAttributeData>;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Attributes: DDN.mscorlib.DNFieldAttributes read get_Attributes;
    property DeclaringType: DDN.mscorlib.DNType read get_DeclaringType;
    property FieldType: DDN.mscorlib.DNType read get_FieldType;
    property Name: string read get_Name;
    property FieldHandle: DDN.mscorlib.DNRuntimeFieldHandle read get_FieldHandle;
    property MemberType: DDN.mscorlib.DNMemberTypes read get_MemberType;
    property ReflectedType: DDN.mscorlib.DNType read get_ReflectedType;
    property IsPublic: Boolean read get_IsPublic;
    property IsPrivate: Boolean read get_IsPrivate;
    property IsFamily: Boolean read get_IsFamily;
    property IsAssembly: Boolean read get_IsAssembly;
    property IsFamilyAndAssembly: Boolean read get_IsFamilyAndAssembly;
    property IsFamilyOrAssembly: Boolean read get_IsFamilyOrAssembly;
    property IsStatic: Boolean read get_IsStatic;
    property IsInitOnly: Boolean read get_IsInitOnly;
    property IsLiteral: Boolean read get_IsLiteral;
    property IsNotSerialized: Boolean read get_IsNotSerialized;
    property IsSpecialName: Boolean read get_IsSpecialName;
    property IsPinvokeImpl: Boolean read get_IsPinvokeImpl;
    property IsSecurityCritical: Boolean read get_IsSecurityCritical;
    property IsSecuritySafeCritical: Boolean read get_IsSecuritySafeCritical;
    property IsSecurityTransparent: Boolean read get_IsSecurityTransparent;
    property CustomAttributes: DDN.mscorlib.DNIEnumerable<DDN.mscorlib.DNCustomAttributeData> read get_CustomAttributes;
    property MetadataToken: Int32 read get_MetadataToken;
    property Module: DDN.mscorlib.DNModule read get_Module;
  end;

  TDNJSVariableField = class(TDNGenericImport<DNJSVariableFieldClass, DNJSVariableField>) end;

  //-------------namespace: Microsoft.JScript----------------
  DNJSLocalFieldClass = interface(DNJSVariableFieldClass)
  ['{09156F5C-E78D-5F63-84F3-BD0835DC8C73}']
  { constructors } 

    {class} function init(name: string; handle: DDN.mscorlib.DNRuntimeTypeHandle; slotNumber: Int32): DNJSLocalField;

  end;

  [DNTypeName('Microsoft.JScript.JSLocalField')]
  DNJSLocalField = interface(DNJSVariableField)
  ['{77E7E447-F52E-3820-99FE-6F7578EDD9B0}']
  { getters & setters } 

    function get_FieldType: DDN.mscorlib.DNType;
    function get_Attributes: DDN.mscorlib.DNFieldAttributes;
    function get_DeclaringType: DDN.mscorlib.DNType;
    function get_Name: string;
    function get_FieldHandle: DDN.mscorlib.DNRuntimeFieldHandle;
    function get_MemberType: DDN.mscorlib.DNMemberTypes;
    function get_ReflectedType: DDN.mscorlib.DNType;
    function get_IsPublic: Boolean;
    function get_IsPrivate: Boolean;
    function get_IsFamily: Boolean;
    function get_IsAssembly: Boolean;
    function get_IsFamilyAndAssembly: Boolean;
    function get_IsFamilyOrAssembly: Boolean;
    function get_IsStatic: Boolean;
    function get_IsInitOnly: Boolean;
    function get_IsLiteral: Boolean;
    function get_IsNotSerialized: Boolean;
    function get_IsSpecialName: Boolean;
    function get_IsPinvokeImpl: Boolean;
    function get_IsSecurityCritical: Boolean;
    function get_IsSecuritySafeCritical: Boolean;
    function get_IsSecurityTransparent: Boolean;
    function get_CustomAttributes: DDN.mscorlib.DNIEnumerable<DDN.mscorlib.DNCustomAttributeData>;
    function get_MetadataToken: Int32;
    function get_Module: DDN.mscorlib.DNModule;

  { methods } 

    function GetValue(obj: DDN.mscorlib.DNObject): DDN.mscorlib.DNObject;
    procedure SetValue(obj: DDN.mscorlib.DNObject; value: DDN.mscorlib.DNObject; invokeAttr: DDN.mscorlib.DNBindingFlags; binder: DDN.mscorlib.DNBinder; locale: DDN.mscorlib.DNCultureInfo); overload;
    function GetCustomAttributes(inherit: Boolean): TArray<DDN.mscorlib.DNObject>; overload;
    function IsDefined(&type: DDN.mscorlib.DNType; inherit: Boolean): Boolean;
    function GetCustomAttributes(t: DDN.mscorlib.DNType; inherit: Boolean): TArray<DDN.mscorlib.DNObject>; overload;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetRequiredCustomModifiers: TArray<DDN.mscorlib.DNType>;
    function GetOptionalCustomModifiers: TArray<DDN.mscorlib.DNType>;
    procedure SetValueDirect(obj: DDN.mscorlib.DNTypedReference; value: DDN.mscorlib.DNObject);
    function GetValueDirect(obj: DDN.mscorlib.DNTypedReference): DDN.mscorlib.DNObject;
    function GetRawConstantValue: DDN.mscorlib.DNObject;
    procedure SetValue(obj: DDN.mscorlib.DNObject; value: DDN.mscorlib.DNObject); overload;
    function GetCustomAttributesData: DDN.mscorlib.DNIList<DDN.mscorlib.DNCustomAttributeData>;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property FieldType: DDN.mscorlib.DNType read get_FieldType;
    property Attributes: DDN.mscorlib.DNFieldAttributes read get_Attributes;
    property DeclaringType: DDN.mscorlib.DNType read get_DeclaringType;
    property Name: string read get_Name;
    property FieldHandle: DDN.mscorlib.DNRuntimeFieldHandle read get_FieldHandle;
    property MemberType: DDN.mscorlib.DNMemberTypes read get_MemberType;
    property ReflectedType: DDN.mscorlib.DNType read get_ReflectedType;
    property IsPublic: Boolean read get_IsPublic;
    property IsPrivate: Boolean read get_IsPrivate;
    property IsFamily: Boolean read get_IsFamily;
    property IsAssembly: Boolean read get_IsAssembly;
    property IsFamilyAndAssembly: Boolean read get_IsFamilyAndAssembly;
    property IsFamilyOrAssembly: Boolean read get_IsFamilyOrAssembly;
    property IsStatic: Boolean read get_IsStatic;
    property IsInitOnly: Boolean read get_IsInitOnly;
    property IsLiteral: Boolean read get_IsLiteral;
    property IsNotSerialized: Boolean read get_IsNotSerialized;
    property IsSpecialName: Boolean read get_IsSpecialName;
    property IsPinvokeImpl: Boolean read get_IsPinvokeImpl;
    property IsSecurityCritical: Boolean read get_IsSecurityCritical;
    property IsSecuritySafeCritical: Boolean read get_IsSecuritySafeCritical;
    property IsSecurityTransparent: Boolean read get_IsSecurityTransparent;
    property CustomAttributes: DDN.mscorlib.DNIEnumerable<DDN.mscorlib.DNCustomAttributeData> read get_CustomAttributes;
    property MetadataToken: Int32 read get_MetadataToken;
    property Module: DDN.mscorlib.DNModule read get_Module;
  end;

  TDNJSLocalField = class(TDNGenericImport<DNJSLocalFieldClass, DNJSLocalField>) end;

  //-------------namespace: Microsoft.JScript----------------
  DNJSFieldInfoClass = interface(DDN.mscorlib.DNFieldInfoClass)
  ['{0FC10D8A-BEFF-58EF-B9CA-E9EFBCCD4893}']
  end;

  [DNTypeName('Microsoft.JScript.JSFieldInfo')]
  DNJSFieldInfo = interface(DDN.mscorlib.DNFieldInfo)
  ['{00FDCB17-501B-3359-A319-1F8AE3F35764}']
  { getters & setters } 

    function get_Attributes: DDN.mscorlib.DNFieldAttributes;
    function get_DeclaringType: DDN.mscorlib.DNType;
    function get_FieldHandle: DDN.mscorlib.DNRuntimeFieldHandle;
    function get_FieldType: DDN.mscorlib.DNType;
    function get_MemberType: DDN.mscorlib.DNMemberTypes;
    function get_Name: string;
    function get_ReflectedType: DDN.mscorlib.DNType;
    function get_IsPublic: Boolean;
    function get_IsPrivate: Boolean;
    function get_IsFamily: Boolean;
    function get_IsAssembly: Boolean;
    function get_IsFamilyAndAssembly: Boolean;
    function get_IsFamilyOrAssembly: Boolean;
    function get_IsStatic: Boolean;
    function get_IsInitOnly: Boolean;
    function get_IsLiteral: Boolean;
    function get_IsNotSerialized: Boolean;
    function get_IsSpecialName: Boolean;
    function get_IsPinvokeImpl: Boolean;
    function get_IsSecurityCritical: Boolean;
    function get_IsSecuritySafeCritical: Boolean;
    function get_IsSecurityTransparent: Boolean;
    function get_CustomAttributes: DDN.mscorlib.DNIEnumerable<DDN.mscorlib.DNCustomAttributeData>;
    function get_MetadataToken: Int32;
    function get_Module: DDN.mscorlib.DNModule;

  { methods } 

    function GetValue(obj: DDN.mscorlib.DNObject): DDN.mscorlib.DNObject;
    function IsDefined(&type: DDN.mscorlib.DNType; inherit: Boolean): Boolean;
    procedure SetValue(obj: DDN.mscorlib.DNObject; value: DDN.mscorlib.DNObject); overload;
    procedure SetValue(obj: DDN.mscorlib.DNObject; value: DDN.mscorlib.DNObject; invokeAttr: DDN.mscorlib.DNBindingFlags; binder: DDN.mscorlib.DNBinder; culture: DDN.mscorlib.DNCultureInfo); overload;
    function GetCustomAttributes(t: DDN.mscorlib.DNType; inherit: Boolean): TArray<DDN.mscorlib.DNObject>; overload;
    function GetCustomAttributes(inherit: Boolean): TArray<DDN.mscorlib.DNObject>; overload;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetRequiredCustomModifiers: TArray<DDN.mscorlib.DNType>;
    function GetOptionalCustomModifiers: TArray<DDN.mscorlib.DNType>;
    procedure SetValueDirect(obj: DDN.mscorlib.DNTypedReference; value: DDN.mscorlib.DNObject);
    function GetValueDirect(obj: DDN.mscorlib.DNTypedReference): DDN.mscorlib.DNObject;
    function GetRawConstantValue: DDN.mscorlib.DNObject;
    function GetCustomAttributesData: DDN.mscorlib.DNIList<DDN.mscorlib.DNCustomAttributeData>;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Attributes: DDN.mscorlib.DNFieldAttributes read get_Attributes;
    property DeclaringType: DDN.mscorlib.DNType read get_DeclaringType;
    property FieldHandle: DDN.mscorlib.DNRuntimeFieldHandle read get_FieldHandle;
    property FieldType: DDN.mscorlib.DNType read get_FieldType;
    property MemberType: DDN.mscorlib.DNMemberTypes read get_MemberType;
    property Name: string read get_Name;
    property ReflectedType: DDN.mscorlib.DNType read get_ReflectedType;
    property IsPublic: Boolean read get_IsPublic;
    property IsPrivate: Boolean read get_IsPrivate;
    property IsFamily: Boolean read get_IsFamily;
    property IsAssembly: Boolean read get_IsAssembly;
    property IsFamilyAndAssembly: Boolean read get_IsFamilyAndAssembly;
    property IsFamilyOrAssembly: Boolean read get_IsFamilyOrAssembly;
    property IsStatic: Boolean read get_IsStatic;
    property IsInitOnly: Boolean read get_IsInitOnly;
    property IsLiteral: Boolean read get_IsLiteral;
    property IsNotSerialized: Boolean read get_IsNotSerialized;
    property IsSpecialName: Boolean read get_IsSpecialName;
    property IsPinvokeImpl: Boolean read get_IsPinvokeImpl;
    property IsSecurityCritical: Boolean read get_IsSecurityCritical;
    property IsSecuritySafeCritical: Boolean read get_IsSecuritySafeCritical;
    property IsSecurityTransparent: Boolean read get_IsSecurityTransparent;
    property CustomAttributes: DDN.mscorlib.DNIEnumerable<DDN.mscorlib.DNCustomAttributeData> read get_CustomAttributes;
    property MetadataToken: Int32 read get_MetadataToken;
    property Module: DDN.mscorlib.DNModule read get_Module;
  end;

  TDNJSFieldInfo = class(TDNGenericImport<DNJSFieldInfoClass, DNJSFieldInfo>) end;

  //-------------namespace: Microsoft.JScript----------------
  DNJSConstructorClass = interface(DDN.mscorlib.DNConstructorInfoClass)
  ['{0A9DB67B-04DB-57C0-BD96-A8ECAF59BC6C}']
  end;

  [DNTypeName('Microsoft.JScript.JSConstructor')]
  DNJSConstructor = interface(DDN.mscorlib.DNConstructorInfo)
  ['{3791D035-D8F6-3EBC-8D0A-FFE36C3E8803}']
  { getters & setters } 

    function get_Attributes: DDN.mscorlib.DNMethodAttributes;
    function get_Name: string;
    function get_DeclaringType: DDN.mscorlib.DNType;
    function get_MemberType: DDN.mscorlib.DNMemberTypes;
    function get_MethodHandle: DDN.mscorlib.DNRuntimeMethodHandle;
    function get_ReflectedType: DDN.mscorlib.DNType;
    function get_MethodImplementationFlags: DDN.mscorlib.DNMethodImplAttributes;
    function get_CallingConvention: DDN.mscorlib.DNCallingConventions;
    function get_IsGenericMethodDefinition: Boolean;
    function get_ContainsGenericParameters: Boolean;
    function get_IsGenericMethod: Boolean;
    function get_IsSecurityCritical: Boolean;
    function get_IsSecuritySafeCritical: Boolean;
    function get_IsSecurityTransparent: Boolean;
    function get_IsPublic: Boolean;
    function get_IsPrivate: Boolean;
    function get_IsFamily: Boolean;
    function get_IsAssembly: Boolean;
    function get_IsFamilyAndAssembly: Boolean;
    function get_IsFamilyOrAssembly: Boolean;
    function get_IsStatic: Boolean;
    function get_IsFinal: Boolean;
    function get_IsVirtual: Boolean;
    function get_IsHideBySig: Boolean;
    function get_IsAbstract: Boolean;
    function get_IsSpecialName: Boolean;
    function get_IsConstructor: Boolean;
    function get_CustomAttributes: DDN.mscorlib.DNIEnumerable<DDN.mscorlib.DNCustomAttributeData>;
    function get_MetadataToken: Int32;
    function get_Module: DDN.mscorlib.DNModule;

  { methods } 

    function GetMethodImplementationFlags: DDN.mscorlib.DNMethodImplAttributes;
    function GetParameters: TArray<DDN.mscorlib.DNParameterInfo>;
    function Invoke(options: DDN.mscorlib.DNBindingFlags; binder: DDN.mscorlib.DNBinder; parameters: TArray<DDN.mscorlib.DNObject>; culture: DDN.mscorlib.DNCultureInfo): DDN.mscorlib.DNObject; overload;
    function Invoke(obj: DDN.mscorlib.DNObject; options: DDN.mscorlib.DNBindingFlags; binder: DDN.mscorlib.DNBinder; parameters: TArray<DDN.mscorlib.DNObject>; culture: DDN.mscorlib.DNCultureInfo): DDN.mscorlib.DNObject; overload;
    function IsDefined(&type: DDN.mscorlib.DNType; inherit: Boolean): Boolean;
    function GetCustomAttributes(t: DDN.mscorlib.DNType; inherit: Boolean): TArray<DDN.mscorlib.DNObject>; overload;
    function GetCustomAttributes(inherit: Boolean): TArray<DDN.mscorlib.DNObject>; overload;
    function Invoke(parameters: TArray<DDN.mscorlib.DNObject>): DDN.mscorlib.DNObject; overload;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetGenericArguments: TArray<DDN.mscorlib.DNType>;
    function Invoke(obj: DDN.mscorlib.DNObject; parameters: TArray<DDN.mscorlib.DNObject>): DDN.mscorlib.DNObject; overload;
    function GetMethodBody: DDN.mscorlib.DNMethodBody;
    function GetCustomAttributesData: DDN.mscorlib.DNIList<DDN.mscorlib.DNCustomAttributeData>;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Attributes: DDN.mscorlib.DNMethodAttributes read get_Attributes;
    property Name: string read get_Name;
    property DeclaringType: DDN.mscorlib.DNType read get_DeclaringType;
    property MemberType: DDN.mscorlib.DNMemberTypes read get_MemberType;
    property MethodHandle: DDN.mscorlib.DNRuntimeMethodHandle read get_MethodHandle;
    property ReflectedType: DDN.mscorlib.DNType read get_ReflectedType;
    property MethodImplementationFlags: DDN.mscorlib.DNMethodImplAttributes read get_MethodImplementationFlags;
    property CallingConvention: DDN.mscorlib.DNCallingConventions read get_CallingConvention;
    property IsGenericMethodDefinition: Boolean read get_IsGenericMethodDefinition;
    property ContainsGenericParameters: Boolean read get_ContainsGenericParameters;
    property IsGenericMethod: Boolean read get_IsGenericMethod;
    property IsSecurityCritical: Boolean read get_IsSecurityCritical;
    property IsSecuritySafeCritical: Boolean read get_IsSecuritySafeCritical;
    property IsSecurityTransparent: Boolean read get_IsSecurityTransparent;
    property IsPublic: Boolean read get_IsPublic;
    property IsPrivate: Boolean read get_IsPrivate;
    property IsFamily: Boolean read get_IsFamily;
    property IsAssembly: Boolean read get_IsAssembly;
    property IsFamilyAndAssembly: Boolean read get_IsFamilyAndAssembly;
    property IsFamilyOrAssembly: Boolean read get_IsFamilyOrAssembly;
    property IsStatic: Boolean read get_IsStatic;
    property IsFinal: Boolean read get_IsFinal;
    property IsVirtual: Boolean read get_IsVirtual;
    property IsHideBySig: Boolean read get_IsHideBySig;
    property IsAbstract: Boolean read get_IsAbstract;
    property IsSpecialName: Boolean read get_IsSpecialName;
    property IsConstructor: Boolean read get_IsConstructor;
    property CustomAttributes: DDN.mscorlib.DNIEnumerable<DDN.mscorlib.DNCustomAttributeData> read get_CustomAttributes;
    property MetadataToken: Int32 read get_MetadataToken;
    property Module: DDN.mscorlib.DNModule read get_Module;
  end;

  TDNJSConstructor = class(TDNGenericImport<DNJSConstructorClass, DNJSConstructor>) end;

  //-------------namespace: Microsoft.JScript----------------
  DNJSMethodClass = interface(DDN.mscorlib.DNMethodInfoClass)
  ['{1403F4BB-95DF-5B4D-A1FD-E40B1856C66C}']
  end;

  [DNTypeName('Microsoft.JScript.JSMethod')]
  DNJSMethod = interface(DDN.mscorlib.DNMethodInfo)
  ['{561AC104-8869-4368-902F-4E0D7DDEDDDD}']
  { getters & setters } 

    function get_MemberType: DDN.mscorlib.DNMemberTypes;
    function get_MethodHandle: DDN.mscorlib.DNRuntimeMethodHandle;
    function get_ReflectedType: DDN.mscorlib.DNType;
    function get_ReturnTypeCustomAttributes: DDN.mscorlib.DNICustomAttributeProvider;
    function get_ReturnType: DDN.mscorlib.DNType;
    function get_ReturnParameter: DDN.mscorlib.DNParameterInfo;
    function get_MethodImplementationFlags: DDN.mscorlib.DNMethodImplAttributes;
    function get_Attributes: DDN.mscorlib.DNMethodAttributes;
    function get_CallingConvention: DDN.mscorlib.DNCallingConventions;
    function get_IsGenericMethodDefinition: Boolean;
    function get_ContainsGenericParameters: Boolean;
    function get_IsGenericMethod: Boolean;
    function get_IsSecurityCritical: Boolean;
    function get_IsSecuritySafeCritical: Boolean;
    function get_IsSecurityTransparent: Boolean;
    function get_IsPublic: Boolean;
    function get_IsPrivate: Boolean;
    function get_IsFamily: Boolean;
    function get_IsAssembly: Boolean;
    function get_IsFamilyAndAssembly: Boolean;
    function get_IsFamilyOrAssembly: Boolean;
    function get_IsStatic: Boolean;
    function get_IsFinal: Boolean;
    function get_IsVirtual: Boolean;
    function get_IsHideBySig: Boolean;
    function get_IsAbstract: Boolean;
    function get_IsSpecialName: Boolean;
    function get_IsConstructor: Boolean;
    function get_Name: string;
    function get_DeclaringType: DDN.mscorlib.DNType;
    function get_CustomAttributes: DDN.mscorlib.DNIEnumerable<DDN.mscorlib.DNCustomAttributeData>;
    function get_MetadataToken: Int32;
    function get_Module: DDN.mscorlib.DNModule;

  { methods } 

    function GetBaseDefinition: DDN.mscorlib.DNMethodInfo;
    function GetMethodImplementationFlags: DDN.mscorlib.DNMethodImplAttributes;
    function Invoke(obj: DDN.mscorlib.DNObject; options: DDN.mscorlib.DNBindingFlags; binder: DDN.mscorlib.DNBinder; parameters: TArray<DDN.mscorlib.DNObject>; culture: DDN.mscorlib.DNCultureInfo): DDN.mscorlib.DNObject; overload;
    function IsDefined(&type: DDN.mscorlib.DNType; inherit: Boolean): Boolean;
    function GetCustomAttributes(t: DDN.mscorlib.DNType; inherit: Boolean): TArray<DDN.mscorlib.DNObject>; overload;
    function GetCustomAttributes(inherit: Boolean): TArray<DDN.mscorlib.DNObject>; overload;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetGenericArguments: TArray<DDN.mscorlib.DNType>;
    function GetGenericMethodDefinition: DDN.mscorlib.DNMethodInfo;
    function MakeGenericMethod(typeArguments: TArray<DDN.mscorlib.DNType>): DDN.mscorlib.DNMethodInfo;
    function CreateDelegate(delegateType: DDN.mscorlib.DNType): DDN.mscorlib.DNDelegate; overload;
    function CreateDelegate(delegateType: DDN.mscorlib.DNType; target: DDN.mscorlib.DNObject): DDN.mscorlib.DNDelegate; overload;
    function Invoke(obj: DDN.mscorlib.DNObject; parameters: TArray<DDN.mscorlib.DNObject>): DDN.mscorlib.DNObject; overload;
    function GetMethodBody: DDN.mscorlib.DNMethodBody;
    function GetParameters: TArray<DDN.mscorlib.DNParameterInfo>;
    function GetCustomAttributesData: DDN.mscorlib.DNIList<DDN.mscorlib.DNCustomAttributeData>;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property MemberType: DDN.mscorlib.DNMemberTypes read get_MemberType;
    property MethodHandle: DDN.mscorlib.DNRuntimeMethodHandle read get_MethodHandle;
    property ReflectedType: DDN.mscorlib.DNType read get_ReflectedType;
    property ReturnTypeCustomAttributes: DDN.mscorlib.DNICustomAttributeProvider read get_ReturnTypeCustomAttributes;
    property ReturnType: DDN.mscorlib.DNType read get_ReturnType;
    property ReturnParameter: DDN.mscorlib.DNParameterInfo read get_ReturnParameter;
    property MethodImplementationFlags: DDN.mscorlib.DNMethodImplAttributes read get_MethodImplementationFlags;
    property Attributes: DDN.mscorlib.DNMethodAttributes read get_Attributes;
    property CallingConvention: DDN.mscorlib.DNCallingConventions read get_CallingConvention;
    property IsGenericMethodDefinition: Boolean read get_IsGenericMethodDefinition;
    property ContainsGenericParameters: Boolean read get_ContainsGenericParameters;
    property IsGenericMethod: Boolean read get_IsGenericMethod;
    property IsSecurityCritical: Boolean read get_IsSecurityCritical;
    property IsSecuritySafeCritical: Boolean read get_IsSecuritySafeCritical;
    property IsSecurityTransparent: Boolean read get_IsSecurityTransparent;
    property IsPublic: Boolean read get_IsPublic;
    property IsPrivate: Boolean read get_IsPrivate;
    property IsFamily: Boolean read get_IsFamily;
    property IsAssembly: Boolean read get_IsAssembly;
    property IsFamilyAndAssembly: Boolean read get_IsFamilyAndAssembly;
    property IsFamilyOrAssembly: Boolean read get_IsFamilyOrAssembly;
    property IsStatic: Boolean read get_IsStatic;
    property IsFinal: Boolean read get_IsFinal;
    property IsVirtual: Boolean read get_IsVirtual;
    property IsHideBySig: Boolean read get_IsHideBySig;
    property IsAbstract: Boolean read get_IsAbstract;
    property IsSpecialName: Boolean read get_IsSpecialName;
    property IsConstructor: Boolean read get_IsConstructor;
    property Name: string read get_Name;
    property DeclaringType: DDN.mscorlib.DNType read get_DeclaringType;
    property CustomAttributes: DDN.mscorlib.DNIEnumerable<DDN.mscorlib.DNCustomAttributeData> read get_CustomAttributes;
    property MetadataToken: Int32 read get_MetadataToken;
    property Module: DDN.mscorlib.DNModule read get_Module;
  end;

  TDNJSMethod = class(TDNGenericImport<DNJSMethodClass, DNJSMethod>) end;

  //-------------namespace: Microsoft.JScript----------------
  DNCOMMethodInfoClass = interface(DNJSMethodClass)
  ['{BCC61C25-E6A9-5FA2-8CA6-4701BC4ED548}']
  { constructors } 

    {class} function init: DNCOMMethodInfo;

  end;

  [DNTypeName('Microsoft.JScript.COMMethodInfo')]
  DNCOMMethodInfo = interface(DNJSMethod)
  ['{C7B9C313-2FD4-4384-8571-7ABC08BD17E5}']
  { getters & setters } 

    function get_Attributes: DDN.mscorlib.DNMethodAttributes;
    function get_DeclaringType: DDN.mscorlib.DNType;
    function get_MemberType: DDN.mscorlib.DNMemberTypes;
    function get_MethodHandle: DDN.mscorlib.DNRuntimeMethodHandle;
    function get_Name: string;
    function get_ReflectedType: DDN.mscorlib.DNType;
    function get_ReturnType: DDN.mscorlib.DNType;
    function get_ReturnTypeCustomAttributes: DDN.mscorlib.DNICustomAttributeProvider;
    function get_ReturnParameter: DDN.mscorlib.DNParameterInfo;
    function get_MethodImplementationFlags: DDN.mscorlib.DNMethodImplAttributes;
    function get_CallingConvention: DDN.mscorlib.DNCallingConventions;
    function get_IsGenericMethodDefinition: Boolean;
    function get_ContainsGenericParameters: Boolean;
    function get_IsGenericMethod: Boolean;
    function get_IsSecurityCritical: Boolean;
    function get_IsSecuritySafeCritical: Boolean;
    function get_IsSecurityTransparent: Boolean;
    function get_IsPublic: Boolean;
    function get_IsPrivate: Boolean;
    function get_IsFamily: Boolean;
    function get_IsAssembly: Boolean;
    function get_IsFamilyAndAssembly: Boolean;
    function get_IsFamilyOrAssembly: Boolean;
    function get_IsStatic: Boolean;
    function get_IsFinal: Boolean;
    function get_IsVirtual: Boolean;
    function get_IsHideBySig: Boolean;
    function get_IsAbstract: Boolean;
    function get_IsSpecialName: Boolean;
    function get_IsConstructor: Boolean;
    function get_CustomAttributes: DDN.mscorlib.DNIEnumerable<DDN.mscorlib.DNCustomAttributeData>;
    function get_MetadataToken: Int32;
    function get_Module: DDN.mscorlib.DNModule;

  { methods } 

    procedure Initialize(name: string; dispatch: DNCOMMemberInfo);
    function GetCOMMemberInfo: DNCOMMemberInfo;
    function GetBaseDefinition: DDN.mscorlib.DNMethodInfo;
    function GetMethodImplementationFlags: DDN.mscorlib.DNMethodImplAttributes;
    function GetParameters: TArray<DDN.mscorlib.DNParameterInfo>;
    function ToString: string;
    function Invoke(obj: DDN.mscorlib.DNObject; invokeAttr: DDN.mscorlib.DNBindingFlags; binder: DDN.mscorlib.DNBinder; parameters: TArray<DDN.mscorlib.DNObject>; culture: DDN.mscorlib.DNCultureInfo): DDN.mscorlib.DNObject; overload;
    function IsDefined(&type: DDN.mscorlib.DNType; inherit: Boolean): Boolean;
    function GetCustomAttributes(t: DDN.mscorlib.DNType; inherit: Boolean): TArray<DDN.mscorlib.DNObject>; overload;
    function GetCustomAttributes(inherit: Boolean): TArray<DDN.mscorlib.DNObject>; overload;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetGenericArguments: TArray<DDN.mscorlib.DNType>;
    function GetGenericMethodDefinition: DDN.mscorlib.DNMethodInfo;
    function MakeGenericMethod(typeArguments: TArray<DDN.mscorlib.DNType>): DDN.mscorlib.DNMethodInfo;
    function CreateDelegate(delegateType: DDN.mscorlib.DNType): DDN.mscorlib.DNDelegate; overload;
    function CreateDelegate(delegateType: DDN.mscorlib.DNType; target: DDN.mscorlib.DNObject): DDN.mscorlib.DNDelegate; overload;
    function Invoke(obj: DDN.mscorlib.DNObject; parameters: TArray<DDN.mscorlib.DNObject>): DDN.mscorlib.DNObject; overload;
    function GetMethodBody: DDN.mscorlib.DNMethodBody;
    function GetCustomAttributesData: DDN.mscorlib.DNIList<DDN.mscorlib.DNCustomAttributeData>;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    property Attributes: DDN.mscorlib.DNMethodAttributes read get_Attributes;
    property DeclaringType: DDN.mscorlib.DNType read get_DeclaringType;
    property MemberType: DDN.mscorlib.DNMemberTypes read get_MemberType;
    property MethodHandle: DDN.mscorlib.DNRuntimeMethodHandle read get_MethodHandle;
    property Name: string read get_Name;
    property ReflectedType: DDN.mscorlib.DNType read get_ReflectedType;
    property ReturnType: DDN.mscorlib.DNType read get_ReturnType;
    property ReturnTypeCustomAttributes: DDN.mscorlib.DNICustomAttributeProvider read get_ReturnTypeCustomAttributes;
    property ReturnParameter: DDN.mscorlib.DNParameterInfo read get_ReturnParameter;
    property MethodImplementationFlags: DDN.mscorlib.DNMethodImplAttributes read get_MethodImplementationFlags;
    property CallingConvention: DDN.mscorlib.DNCallingConventions read get_CallingConvention;
    property IsGenericMethodDefinition: Boolean read get_IsGenericMethodDefinition;
    property ContainsGenericParameters: Boolean read get_ContainsGenericParameters;
    property IsGenericMethod: Boolean read get_IsGenericMethod;
    property IsSecurityCritical: Boolean read get_IsSecurityCritical;
    property IsSecuritySafeCritical: Boolean read get_IsSecuritySafeCritical;
    property IsSecurityTransparent: Boolean read get_IsSecurityTransparent;
    property IsPublic: Boolean read get_IsPublic;
    property IsPrivate: Boolean read get_IsPrivate;
    property IsFamily: Boolean read get_IsFamily;
    property IsAssembly: Boolean read get_IsAssembly;
    property IsFamilyAndAssembly: Boolean read get_IsFamilyAndAssembly;
    property IsFamilyOrAssembly: Boolean read get_IsFamilyOrAssembly;
    property IsStatic: Boolean read get_IsStatic;
    property IsFinal: Boolean read get_IsFinal;
    property IsVirtual: Boolean read get_IsVirtual;
    property IsHideBySig: Boolean read get_IsHideBySig;
    property IsAbstract: Boolean read get_IsAbstract;
    property IsSpecialName: Boolean read get_IsSpecialName;
    property IsConstructor: Boolean read get_IsConstructor;
    property CustomAttributes: DDN.mscorlib.DNIEnumerable<DDN.mscorlib.DNCustomAttributeData> read get_CustomAttributes;
    property MetadataToken: Int32 read get_MetadataToken;
    property Module: DDN.mscorlib.DNModule read get_Module;
  end;

  TDNCOMMethodInfo = class(TDNGenericImport<DNCOMMethodInfoClass, DNCOMMethodInfo>) end;

  //-------------namespace: Microsoft.JScript----------------
  DNJSMethodInfoClass = interface(DDN.mscorlib.DNMethodInfoClass)
  ['{56BCC170-9749-5307-9139-CBB4E391A536}']
  end;

  [DNTypeName('Microsoft.JScript.JSMethodInfo')]
  DNJSMethodInfo = interface(DDN.mscorlib.DNMethodInfo)
  ['{B9E539D3-505B-3E93-A944-9698C5D08520}']
  { getters & setters } 

    function get_Attributes: DDN.mscorlib.DNMethodAttributes;
    function get_DeclaringType: DDN.mscorlib.DNType;
    function get_MemberType: DDN.mscorlib.DNMemberTypes;
    function get_MethodHandle: DDN.mscorlib.DNRuntimeMethodHandle;
    function get_Name: string;
    function get_ReflectedType: DDN.mscorlib.DNType;
    function get_ReturnType: DDN.mscorlib.DNType;
    function get_ReturnTypeCustomAttributes: DDN.mscorlib.DNICustomAttributeProvider;
    function get_ReturnParameter: DDN.mscorlib.DNParameterInfo;
    function get_MethodImplementationFlags: DDN.mscorlib.DNMethodImplAttributes;
    function get_CallingConvention: DDN.mscorlib.DNCallingConventions;
    function get_IsGenericMethodDefinition: Boolean;
    function get_ContainsGenericParameters: Boolean;
    function get_IsGenericMethod: Boolean;
    function get_IsSecurityCritical: Boolean;
    function get_IsSecuritySafeCritical: Boolean;
    function get_IsSecurityTransparent: Boolean;
    function get_IsPublic: Boolean;
    function get_IsPrivate: Boolean;
    function get_IsFamily: Boolean;
    function get_IsAssembly: Boolean;
    function get_IsFamilyAndAssembly: Boolean;
    function get_IsFamilyOrAssembly: Boolean;
    function get_IsStatic: Boolean;
    function get_IsFinal: Boolean;
    function get_IsVirtual: Boolean;
    function get_IsHideBySig: Boolean;
    function get_IsAbstract: Boolean;
    function get_IsSpecialName: Boolean;
    function get_IsConstructor: Boolean;
    function get_CustomAttributes: DDN.mscorlib.DNIEnumerable<DDN.mscorlib.DNCustomAttributeData>;
    function get_MetadataToken: Int32;
    function get_Module: DDN.mscorlib.DNModule;

  { methods } 

    function GetBaseDefinition: DDN.mscorlib.DNMethodInfo;
    function GetCustomAttributes(inherit: Boolean): TArray<DDN.mscorlib.DNObject>; overload;
    function GetCustomAttributes(&type: DDN.mscorlib.DNType; inherit: Boolean): TArray<DDN.mscorlib.DNObject>; overload;
    function GetMethodImplementationFlags: DDN.mscorlib.DNMethodImplAttributes;
    function GetParameters: TArray<DDN.mscorlib.DNParameterInfo>;
    function Invoke(obj: DDN.mscorlib.DNObject; options: DDN.mscorlib.DNBindingFlags; binder: DDN.mscorlib.DNBinder; parameters: TArray<DDN.mscorlib.DNObject>; culture: DDN.mscorlib.DNCultureInfo): DDN.mscorlib.DNObject; overload;
    function IsDefined(&type: DDN.mscorlib.DNType; inherit: Boolean): Boolean;
    function ToString: string;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetGenericArguments: TArray<DDN.mscorlib.DNType>;
    function GetGenericMethodDefinition: DDN.mscorlib.DNMethodInfo;
    function MakeGenericMethod(typeArguments: TArray<DDN.mscorlib.DNType>): DDN.mscorlib.DNMethodInfo;
    function CreateDelegate(delegateType: DDN.mscorlib.DNType): DDN.mscorlib.DNDelegate; overload;
    function CreateDelegate(delegateType: DDN.mscorlib.DNType; target: DDN.mscorlib.DNObject): DDN.mscorlib.DNDelegate; overload;
    function Invoke(obj: DDN.mscorlib.DNObject; parameters: TArray<DDN.mscorlib.DNObject>): DDN.mscorlib.DNObject; overload;
    function GetMethodBody: DDN.mscorlib.DNMethodBody;
    function GetCustomAttributesData: DDN.mscorlib.DNIList<DDN.mscorlib.DNCustomAttributeData>;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    property Attributes: DDN.mscorlib.DNMethodAttributes read get_Attributes;
    property DeclaringType: DDN.mscorlib.DNType read get_DeclaringType;
    property MemberType: DDN.mscorlib.DNMemberTypes read get_MemberType;
    property MethodHandle: DDN.mscorlib.DNRuntimeMethodHandle read get_MethodHandle;
    property Name: string read get_Name;
    property ReflectedType: DDN.mscorlib.DNType read get_ReflectedType;
    property ReturnType: DDN.mscorlib.DNType read get_ReturnType;
    property ReturnTypeCustomAttributes: DDN.mscorlib.DNICustomAttributeProvider read get_ReturnTypeCustomAttributes;
    property ReturnParameter: DDN.mscorlib.DNParameterInfo read get_ReturnParameter;
    property MethodImplementationFlags: DDN.mscorlib.DNMethodImplAttributes read get_MethodImplementationFlags;
    property CallingConvention: DDN.mscorlib.DNCallingConventions read get_CallingConvention;
    property IsGenericMethodDefinition: Boolean read get_IsGenericMethodDefinition;
    property ContainsGenericParameters: Boolean read get_ContainsGenericParameters;
    property IsGenericMethod: Boolean read get_IsGenericMethod;
    property IsSecurityCritical: Boolean read get_IsSecurityCritical;
    property IsSecuritySafeCritical: Boolean read get_IsSecuritySafeCritical;
    property IsSecurityTransparent: Boolean read get_IsSecurityTransparent;
    property IsPublic: Boolean read get_IsPublic;
    property IsPrivate: Boolean read get_IsPrivate;
    property IsFamily: Boolean read get_IsFamily;
    property IsAssembly: Boolean read get_IsAssembly;
    property IsFamilyAndAssembly: Boolean read get_IsFamilyAndAssembly;
    property IsFamilyOrAssembly: Boolean read get_IsFamilyOrAssembly;
    property IsStatic: Boolean read get_IsStatic;
    property IsFinal: Boolean read get_IsFinal;
    property IsVirtual: Boolean read get_IsVirtual;
    property IsHideBySig: Boolean read get_IsHideBySig;
    property IsAbstract: Boolean read get_IsAbstract;
    property IsSpecialName: Boolean read get_IsSpecialName;
    property IsConstructor: Boolean read get_IsConstructor;
    property CustomAttributes: DDN.mscorlib.DNIEnumerable<DDN.mscorlib.DNCustomAttributeData> read get_CustomAttributes;
    property MetadataToken: Int32 read get_MetadataToken;
    property Module: DDN.mscorlib.DNModule read get_Module;
  end;

  TDNJSMethodInfo = class(TDNGenericImport<DNJSMethodInfoClass, DNJSMethodInfo>) end;

  //-------------namespace: Microsoft.JScript----------------
  DNCOMPropertyInfoClass = interface(DDN.mscorlib.DNPropertyInfoClass)
  ['{6BD898CB-16CE-5089-A185-A0A97E5E7D0D}']
  { constructors } 

    {class} function init: DNCOMPropertyInfo;

  end;

  [DNTypeName('Microsoft.JScript.COMPropertyInfo')]
  DNCOMPropertyInfo = interface(DDN.mscorlib.DNPropertyInfo)
  ['{6A02951C-B129-4D26-AB92-B9CA19BDCA26}']
  { getters & setters } 

    function get_Attributes: DDN.mscorlib.DNPropertyAttributes;
    function get_CanRead: Boolean;
    function get_CanWrite: Boolean;
    function get_DeclaringType: DDN.mscorlib.DNType;
    function get_MemberType: DDN.mscorlib.DNMemberTypes;
    function get_Name: string;
    function get_ReflectedType: DDN.mscorlib.DNType;
    function get_PropertyType: DDN.mscorlib.DNType;
    function get_GetMethod: DDN.mscorlib.DNMethodInfo;
    function get_SetMethod: DDN.mscorlib.DNMethodInfo;
    function get_IsSpecialName: Boolean;
    function get_CustomAttributes: DDN.mscorlib.DNIEnumerable<DDN.mscorlib.DNCustomAttributeData>;
    function get_MetadataToken: Int32;
    function get_Module: DDN.mscorlib.DNModule;

  { methods } 

    function GetGetMethod(nonPublic: Boolean): DDN.mscorlib.DNMethodInfo; overload;
    function GetSetMethod(nonPublic: Boolean): DDN.mscorlib.DNMethodInfo; overload;
    procedure Initialize(name: string; dispatch: DNCOMMemberInfo);
    function GetCOMMemberInfo: DNCOMMemberInfo;
    function IsDefined(t: DDN.mscorlib.DNType; inherit: Boolean): Boolean;
    function GetAccessors(nonPublic: Boolean): TArray<DDN.mscorlib.DNMethodInfo>; overload;
    function GetCustomAttributes(t: DDN.mscorlib.DNType; inherit: Boolean): TArray<DDN.mscorlib.DNObject>; overload;
    function GetCustomAttributes(inherit: Boolean): TArray<DDN.mscorlib.DNObject>; overload;
    function GetIndexParameters: TArray<DDN.mscorlib.DNParameterInfo>;
    function GetValue(obj: DDN.mscorlib.DNObject; invokeAttr: DDN.mscorlib.DNBindingFlags; binder: DDN.mscorlib.DNBinder; index: TArray<DDN.mscorlib.DNObject>; culture: DDN.mscorlib.DNCultureInfo): DDN.mscorlib.DNObject; overload;
    procedure SetValue(obj: DDN.mscorlib.DNObject; value: DDN.mscorlib.DNObject; invokeAttr: DDN.mscorlib.DNBindingFlags; binder: DDN.mscorlib.DNBinder; index: TArray<DDN.mscorlib.DNObject>; culture: DDN.mscorlib.DNCultureInfo); overload;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetConstantValue: DDN.mscorlib.DNObject;
    function GetRawConstantValue: DDN.mscorlib.DNObject;
    function GetValue(obj: DDN.mscorlib.DNObject): DDN.mscorlib.DNObject; overload;
    function GetValue(obj: DDN.mscorlib.DNObject; index: TArray<DDN.mscorlib.DNObject>): DDN.mscorlib.DNObject; overload;
    procedure SetValue(obj: DDN.mscorlib.DNObject; value: DDN.mscorlib.DNObject); overload;
    procedure SetValue(obj: DDN.mscorlib.DNObject; value: DDN.mscorlib.DNObject; index: TArray<DDN.mscorlib.DNObject>); overload;
    function GetRequiredCustomModifiers: TArray<DDN.mscorlib.DNType>;
    function GetOptionalCustomModifiers: TArray<DDN.mscorlib.DNType>;
    function GetAccessors: TArray<DDN.mscorlib.DNMethodInfo>; overload;
    function GetGetMethod: DDN.mscorlib.DNMethodInfo; overload;
    function GetSetMethod: DDN.mscorlib.DNMethodInfo; overload;
    function GetCustomAttributesData: DDN.mscorlib.DNIList<DDN.mscorlib.DNCustomAttributeData>;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Attributes: DDN.mscorlib.DNPropertyAttributes read get_Attributes;
    property CanRead: Boolean read get_CanRead;
    property CanWrite: Boolean read get_CanWrite;
    property DeclaringType: DDN.mscorlib.DNType read get_DeclaringType;
    property MemberType: DDN.mscorlib.DNMemberTypes read get_MemberType;
    property Name: string read get_Name;
    property ReflectedType: DDN.mscorlib.DNType read get_ReflectedType;
    property PropertyType: DDN.mscorlib.DNType read get_PropertyType;
    property GetMethod: DDN.mscorlib.DNMethodInfo read get_GetMethod;
    property SetMethod: DDN.mscorlib.DNMethodInfo read get_SetMethod;
    property IsSpecialName: Boolean read get_IsSpecialName;
    property CustomAttributes: DDN.mscorlib.DNIEnumerable<DDN.mscorlib.DNCustomAttributeData> read get_CustomAttributes;
    property MetadataToken: Int32 read get_MetadataToken;
    property Module: DDN.mscorlib.DNModule read get_Module;
  end;

  TDNCOMPropertyInfo = class(TDNGenericImport<DNCOMPropertyInfoClass, DNCOMPropertyInfo>) end;


implementation


initialization
  InternalTryLoadAssemblyModule('Microsoft.JScript, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a');

finalization

end.
