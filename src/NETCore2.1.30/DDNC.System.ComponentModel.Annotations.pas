//----------------------------------------------------------------------------
//  System.ComponentModel.Annotations.dll: System.ComponentModel.Annotations, Version=4.2.1.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a
//----------------------------------------------------------------------------
//  The code is automatically generated by the GenCodeNET tool.
//----------------------------------------------------------------------------
//  .NET Core 2.1.30
//----------------------------------------------------------------------------
//  UnitName: DDNC.System.ComponentModel.Annotations
//  Author: ying32
//----------------------------------------------------------------------------

unit DDNC.System.ComponentModel.Annotations;

{$IFDEF FPC}
  {$mode delphi}//{$H+}
  {$modeswitch advancedrecords}
  {$modeswitch prefixedattributes} // Custom attributes featureï¼Œfpc3.2.2+
{$ENDIF}

interface

uses
  DDN.Runtime,
  DDNC.System.Private.CoreLib,
  DDNC.System.ComponentModel;

type

{ enums }

  //-------------namespace: System.ComponentModel.DataAnnotations----------------
  [DNTypeName('System.ComponentModel.DataAnnotations.DataType')]
  DNDataType = type Integer;
  DNDataTypeHelper = record helper for DNDataType
  public const
    Custom = 0;
    DateTime = 1;
    Date = 2;
    Time = 3;
    Duration = 4;
    PhoneNumber = 5;
    Currency = 6;
    Text = 7;
    Html = 8;
    MultilineText = 9;
    EmailAddress = 10;
    Password = 11;
    Url = 12;
    ImageUrl = 13;
    CreditCard = 14;
    PostalCode = 15;
    Upload = 16;
  end;


  //-------------namespace: System.ComponentModel.DataAnnotations.Schema----------------
  [DNTypeName('System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption')]
  DNDatabaseGeneratedOption = type Integer;
  DNDatabaseGeneratedOptionHelper = record helper for DNDatabaseGeneratedOption
  public const
    None = 0;
    Identity = 1;
    Computed = 2;
  end;




type


{ declares }

  DNIValidatableObject = interface; // type: System.ComponentModel.DataAnnotations.IValidatableObject, namespace: System.ComponentModel.DataAnnotations
  DNAssociationAttribute = interface; // type: System.ComponentModel.DataAnnotations.AssociationAttribute, namespace: System.ComponentModel.DataAnnotations
  DNConcurrencyCheckAttribute = interface; // type: System.ComponentModel.DataAnnotations.ConcurrencyCheckAttribute, namespace: System.ComponentModel.DataAnnotations
  DNDisplayAttribute = interface; // type: System.ComponentModel.DataAnnotations.DisplayAttribute, namespace: System.ComponentModel.DataAnnotations
  DNDisplayColumnAttribute = interface; // type: System.ComponentModel.DataAnnotations.DisplayColumnAttribute, namespace: System.ComponentModel.DataAnnotations
  DNDisplayFormatAttribute = interface; // type: System.ComponentModel.DataAnnotations.DisplayFormatAttribute, namespace: System.ComponentModel.DataAnnotations
  DNEditableAttribute = interface; // type: System.ComponentModel.DataAnnotations.EditableAttribute, namespace: System.ComponentModel.DataAnnotations
  DNFilterUIHintAttribute = interface; // type: System.ComponentModel.DataAnnotations.FilterUIHintAttribute, namespace: System.ComponentModel.DataAnnotations
  DNKeyAttribute = interface; // type: System.ComponentModel.DataAnnotations.KeyAttribute, namespace: System.ComponentModel.DataAnnotations
  DNScaffoldColumnAttribute = interface; // type: System.ComponentModel.DataAnnotations.ScaffoldColumnAttribute, namespace: System.ComponentModel.DataAnnotations
  DNColumnAttribute = interface; // type: System.ComponentModel.DataAnnotations.Schema.ColumnAttribute, namespace: System.ComponentModel.DataAnnotations.Schema
  DNComplexTypeAttribute = interface; // type: System.ComponentModel.DataAnnotations.Schema.ComplexTypeAttribute, namespace: System.ComponentModel.DataAnnotations.Schema
  DNDatabaseGeneratedAttribute = interface; // type: System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedAttribute, namespace: System.ComponentModel.DataAnnotations.Schema
  DNForeignKeyAttribute = interface; // type: System.ComponentModel.DataAnnotations.Schema.ForeignKeyAttribute, namespace: System.ComponentModel.DataAnnotations.Schema
  DNInversePropertyAttribute = interface; // type: System.ComponentModel.DataAnnotations.Schema.InversePropertyAttribute, namespace: System.ComponentModel.DataAnnotations.Schema
  DNNotMappedAttribute = interface; // type: System.ComponentModel.DataAnnotations.Schema.NotMappedAttribute, namespace: System.ComponentModel.DataAnnotations.Schema
  DNTableAttribute = interface; // type: System.ComponentModel.DataAnnotations.Schema.TableAttribute, namespace: System.ComponentModel.DataAnnotations.Schema
  DNTimestampAttribute = interface; // type: System.ComponentModel.DataAnnotations.TimestampAttribute, namespace: System.ComponentModel.DataAnnotations
  DNUIHintAttribute = interface; // type: System.ComponentModel.DataAnnotations.UIHintAttribute, namespace: System.ComponentModel.DataAnnotations
  DNValidationAttribute = interface; // type: System.ComponentModel.DataAnnotations.ValidationAttribute, namespace: System.ComponentModel.DataAnnotations
  DNCompareAttribute = interface; // type: System.ComponentModel.DataAnnotations.CompareAttribute, namespace: System.ComponentModel.DataAnnotations
  DNCustomValidationAttribute = interface; // type: System.ComponentModel.DataAnnotations.CustomValidationAttribute, namespace: System.ComponentModel.DataAnnotations
  DNDataTypeAttribute = interface; // type: System.ComponentModel.DataAnnotations.DataTypeAttribute, namespace: System.ComponentModel.DataAnnotations
  DNCreditCardAttribute = interface; // type: System.ComponentModel.DataAnnotations.CreditCardAttribute, namespace: System.ComponentModel.DataAnnotations
  DNEmailAddressAttribute = interface; // type: System.ComponentModel.DataAnnotations.EmailAddressAttribute, namespace: System.ComponentModel.DataAnnotations
  DNEnumDataTypeAttribute = interface; // type: System.ComponentModel.DataAnnotations.EnumDataTypeAttribute, namespace: System.ComponentModel.DataAnnotations
  DNFileExtensionsAttribute = interface; // type: System.ComponentModel.DataAnnotations.FileExtensionsAttribute, namespace: System.ComponentModel.DataAnnotations
  DNPhoneAttribute = interface; // type: System.ComponentModel.DataAnnotations.PhoneAttribute, namespace: System.ComponentModel.DataAnnotations
  DNUrlAttribute = interface; // type: System.ComponentModel.DataAnnotations.UrlAttribute, namespace: System.ComponentModel.DataAnnotations
  DNMaxLengthAttribute = interface; // type: System.ComponentModel.DataAnnotations.MaxLengthAttribute, namespace: System.ComponentModel.DataAnnotations
  DNMinLengthAttribute = interface; // type: System.ComponentModel.DataAnnotations.MinLengthAttribute, namespace: System.ComponentModel.DataAnnotations
  DNRangeAttribute = interface; // type: System.ComponentModel.DataAnnotations.RangeAttribute, namespace: System.ComponentModel.DataAnnotations
  DNRegularExpressionAttribute = interface; // type: System.ComponentModel.DataAnnotations.RegularExpressionAttribute, namespace: System.ComponentModel.DataAnnotations
  DNRequiredAttribute = interface; // type: System.ComponentModel.DataAnnotations.RequiredAttribute, namespace: System.ComponentModel.DataAnnotations
  DNStringLengthAttribute = interface; // type: System.ComponentModel.DataAnnotations.StringLengthAttribute, namespace: System.ComponentModel.DataAnnotations
  DNValidationContext = interface; // type: System.ComponentModel.DataAnnotations.ValidationContext, namespace: System.ComponentModel.DataAnnotations
  DNValidationResult = interface; // type: System.ComponentModel.DataAnnotations.ValidationResult, namespace: System.ComponentModel.DataAnnotations
  DNValidator = interface; // type: System.ComponentModel.DataAnnotations.Validator, namespace: System.ComponentModel.DataAnnotations
  DNValidationException = interface; // type: System.ComponentModel.DataAnnotations.ValidationException, namespace: System.ComponentModel.DataAnnotations


{ objects }

  //-------------namespace: System.ComponentModel.DataAnnotations----------------
  [DNTypeName('System.ComponentModel.DataAnnotations.IValidatableObject')]
  DNIValidatableObject = interface(DDNC.System.Private.CoreLib.DNObject)
  ['{FEC73482-FAD1-339F-AEAF-FB7C715B7D08}']
  { methods } 

    function Validate(validationContext: DNValidationContext): DDNC.System.Private.CoreLib.DNIEnumerable<DNValidationResult>;

  end;

  //-------------namespace: System.ComponentModel.DataAnnotations----------------
  DNAssociationAttributeClass = interface(DDNC.System.Private.CoreLib.DNAttributeClass)
  ['{A647A57E-4708-5C54-9C80-83A901A59831}']
  { constructors } 

    {class} function init(name: string; thisKey: string; otherKey: string): DNAssociationAttribute;

  end;

  [DNTypeName('System.ComponentModel.DataAnnotations.AssociationAttribute')]
  DNAssociationAttribute = interface(DDNC.System.Private.CoreLib.DNAttribute)
  ['{5C0A3A73-B74C-37EE-8A99-723881BB62C5}']
  { getters & setters } 

    function get_Name: string;
    function get_ThisKey: string;
    function get_OtherKey: string;
    function get_IsForeignKey: Boolean;
    procedure set_IsForeignKey(value: Boolean);
    function get_ThisKeyMembers: DDNC.System.Private.CoreLib.DNIEnumerable<string>;
    function get_OtherKeyMembers: DDNC.System.Private.CoreLib.DNIEnumerable<string>;
    function get_TypeId: DDNC.System.Private.CoreLib.DNObject;

  { methods } 

    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function ToString: string;
    function GetType: DDNC.System.Private.CoreLib.DNType;

  { propertys } 

    property Name: string read get_Name;
    property ThisKey: string read get_ThisKey;
    property OtherKey: string read get_OtherKey;
    property IsForeignKey: Boolean read get_IsForeignKey write set_IsForeignKey;
    property ThisKeyMembers: DDNC.System.Private.CoreLib.DNIEnumerable<string> read get_ThisKeyMembers;
    property OtherKeyMembers: DDNC.System.Private.CoreLib.DNIEnumerable<string> read get_OtherKeyMembers;
    property TypeId: DDNC.System.Private.CoreLib.DNObject read get_TypeId;
  end;

  TDNAssociationAttribute = class(TDNGenericImport<DNAssociationAttributeClass, DNAssociationAttribute>) end;

  //-------------namespace: System.ComponentModel.DataAnnotations----------------
  DNConcurrencyCheckAttributeClass = interface(DDNC.System.Private.CoreLib.DNAttributeClass)
  ['{D7372F1A-4DD6-5366-9333-16F179C41A75}']
  { constructors } 

    {class} function init: DNConcurrencyCheckAttribute;

  end;

  [DNTypeName('System.ComponentModel.DataAnnotations.ConcurrencyCheckAttribute')]
  DNConcurrencyCheckAttribute = interface(DDNC.System.Private.CoreLib.DNAttribute)
  ['{693F8E55-20AF-388C-9608-4BC0312E68EC}']
  { getters & setters } 

    function get_TypeId: DDNC.System.Private.CoreLib.DNObject;

  { methods } 

    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function ToString: string;
    function GetType: DDNC.System.Private.CoreLib.DNType;

  { propertys } 

    property TypeId: DDNC.System.Private.CoreLib.DNObject read get_TypeId;
  end;

  TDNConcurrencyCheckAttribute = class(TDNGenericImport<DNConcurrencyCheckAttributeClass, DNConcurrencyCheckAttribute>) end;

  //-------------namespace: System.ComponentModel.DataAnnotations----------------
  DNDisplayAttributeClass = interface(DDNC.System.Private.CoreLib.DNAttributeClass)
  ['{2DCA0802-A3EE-5B04-B6A6-E18426E60EB6}']
  { constructors } 

    {class} function init: DNDisplayAttribute;

  end;

  [DNTypeName('System.ComponentModel.DataAnnotations.DisplayAttribute')]
  DNDisplayAttribute = interface(DDNC.System.Private.CoreLib.DNAttribute)
  ['{771956DE-2B2E-3D44-A3E3-C2ABA6835A66}']
  { getters & setters } 

    function get_ShortName: string;
    procedure set_ShortName(value: string);
    function get_Name: string;
    procedure set_Name(value: string);
    function get_Description: string;
    procedure set_Description(value: string);
    function get_Prompt: string;
    procedure set_Prompt(value: string);
    function get_GroupName: string;
    procedure set_GroupName(value: string);
    function get_ResourceType: DDNC.System.Private.CoreLib.DNType;
    procedure set_ResourceType(value: DDNC.System.Private.CoreLib.DNType);
    function get_AutoGenerateField: Boolean;
    procedure set_AutoGenerateField(value: Boolean);
    function get_AutoGenerateFilter: Boolean;
    procedure set_AutoGenerateFilter(value: Boolean);
    function get_Order: Int32;
    procedure set_Order(value: Int32);
    function get_TypeId: DDNC.System.Private.CoreLib.DNObject;

  { methods } 

    function GetShortName: string;
    function GetName: string;
    function GetDescription: string;
    function GetPrompt: string;
    function GetGroupName: string;
    function GetAutoGenerateField: DDNC.System.Private.CoreLib.DNNullable<Boolean>;
    function GetAutoGenerateFilter: DDNC.System.Private.CoreLib.DNNullable<Boolean>;
    function GetOrder: DDNC.System.Private.CoreLib.DNNullable<Int32>;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function ToString: string;
    function GetType: DDNC.System.Private.CoreLib.DNType;

  { propertys } 

    property ShortName: string read get_ShortName write set_ShortName;
    property Name: string read get_Name write set_Name;
    property Description: string read get_Description write set_Description;
    property Prompt: string read get_Prompt write set_Prompt;
    property GroupName: string read get_GroupName write set_GroupName;
    property ResourceType: DDNC.System.Private.CoreLib.DNType read get_ResourceType write set_ResourceType;
    property AutoGenerateField: Boolean read get_AutoGenerateField write set_AutoGenerateField;
    property AutoGenerateFilter: Boolean read get_AutoGenerateFilter write set_AutoGenerateFilter;
    property Order: Int32 read get_Order write set_Order;
    property TypeId: DDNC.System.Private.CoreLib.DNObject read get_TypeId;
  end;

  TDNDisplayAttribute = class(TDNGenericImport<DNDisplayAttributeClass, DNDisplayAttribute>) end;

  //-------------namespace: System.ComponentModel.DataAnnotations----------------
  DNDisplayColumnAttributeClass = interface(DDNC.System.Private.CoreLib.DNAttributeClass)
  ['{9F62BCAF-6630-50D5-95FA-B03D0346D693}']
  { constructors } 

    {class} function init(displayColumn: string): DNDisplayColumnAttribute; overload;
    {class} function init(displayColumn: string; sortColumn: string): DNDisplayColumnAttribute; overload;
    {class} function init(displayColumn: string; sortColumn: string; sortDescending: Boolean): DNDisplayColumnAttribute; overload;

  end;

  [DNTypeName('System.ComponentModel.DataAnnotations.DisplayColumnAttribute')]
  DNDisplayColumnAttribute = interface(DDNC.System.Private.CoreLib.DNAttribute)
  ['{755AB910-629E-35F7-9C31-830601A5C6CE}']
  { getters & setters } 

    function get_DisplayColumn: string;
    function get_SortColumn: string;
    function get_SortDescending: Boolean;
    function get_TypeId: DDNC.System.Private.CoreLib.DNObject;

  { methods } 

    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function ToString: string;
    function GetType: DDNC.System.Private.CoreLib.DNType;

  { propertys } 

    property DisplayColumn: string read get_DisplayColumn;
    property SortColumn: string read get_SortColumn;
    property SortDescending: Boolean read get_SortDescending;
    property TypeId: DDNC.System.Private.CoreLib.DNObject read get_TypeId;
  end;

  TDNDisplayColumnAttribute = class(TDNGenericImport<DNDisplayColumnAttributeClass, DNDisplayColumnAttribute>) end;

  //-------------namespace: System.ComponentModel.DataAnnotations----------------
  DNDisplayFormatAttributeClass = interface(DDNC.System.Private.CoreLib.DNAttributeClass)
  ['{5BBBCF83-587D-5878-98A2-E5B89A984DB3}']
  { constructors } 

    {class} function init: DNDisplayFormatAttribute;

  end;

  [DNTypeName('System.ComponentModel.DataAnnotations.DisplayFormatAttribute')]
  DNDisplayFormatAttribute = interface(DDNC.System.Private.CoreLib.DNAttribute)
  ['{F801899F-16F1-30A5-8A75-6E8855192184}']
  { getters & setters } 

    function get_DataFormatString: string;
    procedure set_DataFormatString(value: string);
    function get_NullDisplayText: string;
    procedure set_NullDisplayText(value: string);
    function get_ConvertEmptyStringToNull: Boolean;
    procedure set_ConvertEmptyStringToNull(value: Boolean);
    function get_ApplyFormatInEditMode: Boolean;
    procedure set_ApplyFormatInEditMode(value: Boolean);
    function get_HtmlEncode: Boolean;
    procedure set_HtmlEncode(value: Boolean);
    function get_NullDisplayTextResourceType: DDNC.System.Private.CoreLib.DNType;
    procedure set_NullDisplayTextResourceType(value: DDNC.System.Private.CoreLib.DNType);
    function get_TypeId: DDNC.System.Private.CoreLib.DNObject;

  { methods } 

    function GetNullDisplayText: string;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function ToString: string;
    function GetType: DDNC.System.Private.CoreLib.DNType;

  { propertys } 

    property DataFormatString: string read get_DataFormatString write set_DataFormatString;
    property NullDisplayText: string read get_NullDisplayText write set_NullDisplayText;
    property ConvertEmptyStringToNull: Boolean read get_ConvertEmptyStringToNull write set_ConvertEmptyStringToNull;
    property ApplyFormatInEditMode: Boolean read get_ApplyFormatInEditMode write set_ApplyFormatInEditMode;
    property HtmlEncode: Boolean read get_HtmlEncode write set_HtmlEncode;
    property NullDisplayTextResourceType: DDNC.System.Private.CoreLib.DNType read get_NullDisplayTextResourceType write set_NullDisplayTextResourceType;
    property TypeId: DDNC.System.Private.CoreLib.DNObject read get_TypeId;
  end;

  TDNDisplayFormatAttribute = class(TDNGenericImport<DNDisplayFormatAttributeClass, DNDisplayFormatAttribute>) end;

  //-------------namespace: System.ComponentModel.DataAnnotations----------------
  DNEditableAttributeClass = interface(DDNC.System.Private.CoreLib.DNAttributeClass)
  ['{0086C702-3F7E-5095-9EF1-7FEE240A7840}']
  { constructors } 

    {class} function init(allowEdit: Boolean): DNEditableAttribute;

  end;

  [DNTypeName('System.ComponentModel.DataAnnotations.EditableAttribute')]
  DNEditableAttribute = interface(DDNC.System.Private.CoreLib.DNAttribute)
  ['{A0846F2E-B33F-3280-955B-40E67596279F}']
  { getters & setters } 

    function get_AllowEdit: Boolean;
    function get_AllowInitialValue: Boolean;
    procedure set_AllowInitialValue(value: Boolean);
    function get_TypeId: DDNC.System.Private.CoreLib.DNObject;

  { methods } 

    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function ToString: string;
    function GetType: DDNC.System.Private.CoreLib.DNType;

  { propertys } 

    property AllowEdit: Boolean read get_AllowEdit;
    property AllowInitialValue: Boolean read get_AllowInitialValue write set_AllowInitialValue;
    property TypeId: DDNC.System.Private.CoreLib.DNObject read get_TypeId;
  end;

  TDNEditableAttribute = class(TDNGenericImport<DNEditableAttributeClass, DNEditableAttribute>) end;

  //-------------namespace: System.ComponentModel.DataAnnotations----------------
  DNFilterUIHintAttributeClass = interface(DDNC.System.Private.CoreLib.DNAttributeClass)
  ['{2F24E166-5F5D-529B-B5B2-A71A848FA0B8}']
  { constructors } 

    {class} function init(filterUIHint: string): DNFilterUIHintAttribute; overload;
    {class} function init(filterUIHint: string; presentationLayer: string): DNFilterUIHintAttribute; overload;
    {class} function init(filterUIHint: string; presentationLayer: string; controlParameters: TArray<DDNC.System.Private.CoreLib.DNObject>): DNFilterUIHintAttribute; overload;

  end;

  [DNTypeName('System.ComponentModel.DataAnnotations.FilterUIHintAttribute')]
  DNFilterUIHintAttribute = interface(DDNC.System.Private.CoreLib.DNAttribute)
  ['{39169E3F-E9CC-3124-AF64-3A1F5177148A}']
  { getters & setters } 

    function get_FilterUIHint: string;
    function get_PresentationLayer: string;
    function get_ControlParameters: DDNC.System.Private.CoreLib.DNIDictionary<string, DDNC.System.Private.CoreLib.DNObject>;
    function get_TypeId: DDNC.System.Private.CoreLib.DNObject;

  { methods } 

    function GetHashCode: Int32;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function Match(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function ToString: string;
    function GetType: DDNC.System.Private.CoreLib.DNType;

  { propertys } 

    property FilterUIHint: string read get_FilterUIHint;
    property PresentationLayer: string read get_PresentationLayer;
    property ControlParameters: DDNC.System.Private.CoreLib.DNIDictionary<string, DDNC.System.Private.CoreLib.DNObject> read get_ControlParameters;
    property TypeId: DDNC.System.Private.CoreLib.DNObject read get_TypeId;
  end;

  TDNFilterUIHintAttribute = class(TDNGenericImport<DNFilterUIHintAttributeClass, DNFilterUIHintAttribute>) end;

  //-------------namespace: System.ComponentModel.DataAnnotations----------------
  DNKeyAttributeClass = interface(DDNC.System.Private.CoreLib.DNAttributeClass)
  ['{7F9F2747-FEB6-5FDE-9B28-9E4A606C4934}']
  { constructors } 

    {class} function init: DNKeyAttribute;

  end;

  [DNTypeName('System.ComponentModel.DataAnnotations.KeyAttribute')]
  DNKeyAttribute = interface(DDNC.System.Private.CoreLib.DNAttribute)
  ['{9CE4D8CB-41B5-3F84-B005-B9427093AA6C}']
  { getters & setters } 

    function get_TypeId: DDNC.System.Private.CoreLib.DNObject;

  { methods } 

    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function ToString: string;
    function GetType: DDNC.System.Private.CoreLib.DNType;

  { propertys } 

    property TypeId: DDNC.System.Private.CoreLib.DNObject read get_TypeId;
  end;

  TDNKeyAttribute = class(TDNGenericImport<DNKeyAttributeClass, DNKeyAttribute>) end;

  //-------------namespace: System.ComponentModel.DataAnnotations----------------
  DNScaffoldColumnAttributeClass = interface(DDNC.System.Private.CoreLib.DNAttributeClass)
  ['{D16FB834-7FB2-5BA2-ABB4-9FDDD6F313F7}']
  { constructors } 

    {class} function init(scaffold: Boolean): DNScaffoldColumnAttribute;

  end;

  [DNTypeName('System.ComponentModel.DataAnnotations.ScaffoldColumnAttribute')]
  DNScaffoldColumnAttribute = interface(DDNC.System.Private.CoreLib.DNAttribute)
  ['{C28CB9DB-0117-3F4A-BDC7-435E17961D90}']
  { getters & setters } 

    function get_Scaffold: Boolean;
    function get_TypeId: DDNC.System.Private.CoreLib.DNObject;

  { methods } 

    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function ToString: string;
    function GetType: DDNC.System.Private.CoreLib.DNType;

  { propertys } 

    property Scaffold: Boolean read get_Scaffold;
    property TypeId: DDNC.System.Private.CoreLib.DNObject read get_TypeId;
  end;

  TDNScaffoldColumnAttribute = class(TDNGenericImport<DNScaffoldColumnAttributeClass, DNScaffoldColumnAttribute>) end;

  //-------------namespace: System.ComponentModel.DataAnnotations.Schema----------------
  DNColumnAttributeClass = interface(DDNC.System.Private.CoreLib.DNAttributeClass)
  ['{E579DBBC-7577-51AC-97A7-392B501E8870}']
  { constructors } 

    {class} function init: DNColumnAttribute; overload;
    {class} function init(name: string): DNColumnAttribute; overload;

  end;

  [DNTypeName('System.ComponentModel.DataAnnotations.Schema.ColumnAttribute')]
  DNColumnAttribute = interface(DDNC.System.Private.CoreLib.DNAttribute)
  ['{DF8C1015-70E6-3130-A1C0-453C59F712B7}']
  { getters & setters } 

    function get_Name: string;
    function get_Order: Int32;
    procedure set_Order(value: Int32);
    function get_TypeName: string;
    procedure set_TypeName(value: string);
    function get_TypeId: DDNC.System.Private.CoreLib.DNObject;

  { methods } 

    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function ToString: string;
    function GetType: DDNC.System.Private.CoreLib.DNType;

  { propertys } 

    property Name: string read get_Name;
    property Order: Int32 read get_Order write set_Order;
    property TypeName: string read get_TypeName write set_TypeName;
    property TypeId: DDNC.System.Private.CoreLib.DNObject read get_TypeId;
  end;

  TDNColumnAttribute = class(TDNGenericImport<DNColumnAttributeClass, DNColumnAttribute>) end;

  //-------------namespace: System.ComponentModel.DataAnnotations.Schema----------------
  DNComplexTypeAttributeClass = interface(DDNC.System.Private.CoreLib.DNAttributeClass)
  ['{1DA99F45-3C1A-59F1-8E8E-DE786C030497}']
  { constructors } 

    {class} function init: DNComplexTypeAttribute;

  end;

  [DNTypeName('System.ComponentModel.DataAnnotations.Schema.ComplexTypeAttribute')]
  DNComplexTypeAttribute = interface(DDNC.System.Private.CoreLib.DNAttribute)
  ['{4B7963D9-C6AE-33D0-8029-9122454E5290}']
  { getters & setters } 

    function get_TypeId: DDNC.System.Private.CoreLib.DNObject;

  { methods } 

    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function ToString: string;
    function GetType: DDNC.System.Private.CoreLib.DNType;

  { propertys } 

    property TypeId: DDNC.System.Private.CoreLib.DNObject read get_TypeId;
  end;

  TDNComplexTypeAttribute = class(TDNGenericImport<DNComplexTypeAttributeClass, DNComplexTypeAttribute>) end;

  //-------------namespace: System.ComponentModel.DataAnnotations.Schema----------------
  DNDatabaseGeneratedAttributeClass = interface(DDNC.System.Private.CoreLib.DNAttributeClass)
  ['{336B6118-4CA0-5DE5-8872-EC41D95AC51E}']
  { constructors } 

    {class} function init(databaseGeneratedOption: DNDatabaseGeneratedOption): DNDatabaseGeneratedAttribute;

  end;

  [DNTypeName('System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedAttribute')]
  DNDatabaseGeneratedAttribute = interface(DDNC.System.Private.CoreLib.DNAttribute)
  ['{3B51125E-C436-3DFD-A07E-4C41B1A8BDBB}']
  { getters & setters } 

    function get_DatabaseGeneratedOption: DNDatabaseGeneratedOption;
    function get_TypeId: DDNC.System.Private.CoreLib.DNObject;

  { methods } 

    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function ToString: string;
    function GetType: DDNC.System.Private.CoreLib.DNType;

  { propertys } 

    property DatabaseGeneratedOption: DNDatabaseGeneratedOption read get_DatabaseGeneratedOption;
    property TypeId: DDNC.System.Private.CoreLib.DNObject read get_TypeId;
  end;

  TDNDatabaseGeneratedAttribute = class(TDNGenericImport<DNDatabaseGeneratedAttributeClass, DNDatabaseGeneratedAttribute>) end;

  //-------------namespace: System.ComponentModel.DataAnnotations.Schema----------------
  DNForeignKeyAttributeClass = interface(DDNC.System.Private.CoreLib.DNAttributeClass)
  ['{2490AC62-BA58-53D1-A694-2D4495EF6E01}']
  { constructors } 

    {class} function init(name: string): DNForeignKeyAttribute;

  end;

  [DNTypeName('System.ComponentModel.DataAnnotations.Schema.ForeignKeyAttribute')]
  DNForeignKeyAttribute = interface(DDNC.System.Private.CoreLib.DNAttribute)
  ['{96DD04C0-A922-37F9-B9E8-49C3EC49AD2A}']
  { getters & setters } 

    function get_Name: string;
    function get_TypeId: DDNC.System.Private.CoreLib.DNObject;

  { methods } 

    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function ToString: string;
    function GetType: DDNC.System.Private.CoreLib.DNType;

  { propertys } 

    property Name: string read get_Name;
    property TypeId: DDNC.System.Private.CoreLib.DNObject read get_TypeId;
  end;

  TDNForeignKeyAttribute = class(TDNGenericImport<DNForeignKeyAttributeClass, DNForeignKeyAttribute>) end;

  //-------------namespace: System.ComponentModel.DataAnnotations.Schema----------------
  DNInversePropertyAttributeClass = interface(DDNC.System.Private.CoreLib.DNAttributeClass)
  ['{BE6E83B2-3B35-5B03-8680-5F879276FF51}']
  { constructors } 

    {class} function init(&property: string): DNInversePropertyAttribute;

  end;

  [DNTypeName('System.ComponentModel.DataAnnotations.Schema.InversePropertyAttribute')]
  DNInversePropertyAttribute = interface(DDNC.System.Private.CoreLib.DNAttribute)
  ['{BAE4E857-FCA2-337C-928A-C9F64827EC1D}']
  { getters & setters } 

    function get_Property: string;
    function get_TypeId: DDNC.System.Private.CoreLib.DNObject;

  { methods } 

    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function ToString: string;
    function GetType: DDNC.System.Private.CoreLib.DNType;

  { propertys } 

    property &Property: string read get_Property;
    property TypeId: DDNC.System.Private.CoreLib.DNObject read get_TypeId;
  end;

  TDNInversePropertyAttribute = class(TDNGenericImport<DNInversePropertyAttributeClass, DNInversePropertyAttribute>) end;

  //-------------namespace: System.ComponentModel.DataAnnotations.Schema----------------
  DNNotMappedAttributeClass = interface(DDNC.System.Private.CoreLib.DNAttributeClass)
  ['{4D15DC34-8A85-58AB-826A-9C2D08558D09}']
  { constructors } 

    {class} function init: DNNotMappedAttribute;

  end;

  [DNTypeName('System.ComponentModel.DataAnnotations.Schema.NotMappedAttribute')]
  DNNotMappedAttribute = interface(DDNC.System.Private.CoreLib.DNAttribute)
  ['{05F2BA4D-263B-37CC-A0BF-38F42FD67D2B}']
  { getters & setters } 

    function get_TypeId: DDNC.System.Private.CoreLib.DNObject;

  { methods } 

    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function ToString: string;
    function GetType: DDNC.System.Private.CoreLib.DNType;

  { propertys } 

    property TypeId: DDNC.System.Private.CoreLib.DNObject read get_TypeId;
  end;

  TDNNotMappedAttribute = class(TDNGenericImport<DNNotMappedAttributeClass, DNNotMappedAttribute>) end;

  //-------------namespace: System.ComponentModel.DataAnnotations.Schema----------------
  DNTableAttributeClass = interface(DDNC.System.Private.CoreLib.DNAttributeClass)
  ['{845B4802-4A6E-51C2-99B8-6364368B2EAA}']
  { constructors } 

    {class} function init(name: string): DNTableAttribute;

  end;

  [DNTypeName('System.ComponentModel.DataAnnotations.Schema.TableAttribute')]
  DNTableAttribute = interface(DDNC.System.Private.CoreLib.DNAttribute)
  ['{B0E5F186-B782-3211-8ACB-35011C6748D4}']
  { getters & setters } 

    function get_Name: string;
    function get_Schema: string;
    procedure set_Schema(value: string);
    function get_TypeId: DDNC.System.Private.CoreLib.DNObject;

  { methods } 

    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function ToString: string;
    function GetType: DDNC.System.Private.CoreLib.DNType;

  { propertys } 

    property Name: string read get_Name;
    property Schema: string read get_Schema write set_Schema;
    property TypeId: DDNC.System.Private.CoreLib.DNObject read get_TypeId;
  end;

  TDNTableAttribute = class(TDNGenericImport<DNTableAttributeClass, DNTableAttribute>) end;

  //-------------namespace: System.ComponentModel.DataAnnotations----------------
  DNTimestampAttributeClass = interface(DDNC.System.Private.CoreLib.DNAttributeClass)
  ['{093E2591-9FE5-57FB-8ABA-CEAE7496BBB5}']
  { constructors } 

    {class} function init: DNTimestampAttribute;

  end;

  [DNTypeName('System.ComponentModel.DataAnnotations.TimestampAttribute')]
  DNTimestampAttribute = interface(DDNC.System.Private.CoreLib.DNAttribute)
  ['{FBB2E5EF-7B6C-33F9-A7D2-0AE5F0A279CA}']
  { getters & setters } 

    function get_TypeId: DDNC.System.Private.CoreLib.DNObject;

  { methods } 

    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function ToString: string;
    function GetType: DDNC.System.Private.CoreLib.DNType;

  { propertys } 

    property TypeId: DDNC.System.Private.CoreLib.DNObject read get_TypeId;
  end;

  TDNTimestampAttribute = class(TDNGenericImport<DNTimestampAttributeClass, DNTimestampAttribute>) end;

  //-------------namespace: System.ComponentModel.DataAnnotations----------------
  DNUIHintAttributeClass = interface(DDNC.System.Private.CoreLib.DNAttributeClass)
  ['{CCC1153F-2B5B-50E9-8F8E-86408118A9D6}']
  { constructors } 

    {class} function init(uiHint: string): DNUIHintAttribute; overload;
    {class} function init(uiHint: string; presentationLayer: string): DNUIHintAttribute; overload;
    {class} function init(uiHint: string; presentationLayer: string; controlParameters: TArray<DDNC.System.Private.CoreLib.DNObject>): DNUIHintAttribute; overload;

  end;

  [DNTypeName('System.ComponentModel.DataAnnotations.UIHintAttribute')]
  DNUIHintAttribute = interface(DDNC.System.Private.CoreLib.DNAttribute)
  ['{C5673896-3110-36BC-BD91-0A092EDDEAE8}']
  { getters & setters } 

    function get_UIHint: string;
    function get_PresentationLayer: string;
    function get_ControlParameters: DDNC.System.Private.CoreLib.DNIDictionary<string, DDNC.System.Private.CoreLib.DNObject>;
    function get_TypeId: DDNC.System.Private.CoreLib.DNObject;

  { methods } 

    function GetHashCode: Int32;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function Match(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function ToString: string;
    function GetType: DDNC.System.Private.CoreLib.DNType;

  { propertys } 

    property UIHint: string read get_UIHint;
    property PresentationLayer: string read get_PresentationLayer;
    property ControlParameters: DDNC.System.Private.CoreLib.DNIDictionary<string, DDNC.System.Private.CoreLib.DNObject> read get_ControlParameters;
    property TypeId: DDNC.System.Private.CoreLib.DNObject read get_TypeId;
  end;

  TDNUIHintAttribute = class(TDNGenericImport<DNUIHintAttributeClass, DNUIHintAttribute>) end;

  //-------------namespace: System.ComponentModel.DataAnnotations----------------
  DNValidationAttributeClass = interface(DDNC.System.Private.CoreLib.DNAttributeClass)
  ['{ECA70F2F-AB1D-5765-9395-2E02212FF7F0}']
  end;

  [DNTypeName('System.ComponentModel.DataAnnotations.ValidationAttribute')]
  DNValidationAttribute = interface(DDNC.System.Private.CoreLib.DNAttribute)
  ['{6752673F-B0A7-3EF8-83D2-61CD65E67D4C}']
  { getters & setters } 

    function get_RequiresValidationContext: Boolean;
    function get_ErrorMessage: string;
    procedure set_ErrorMessage(value: string);
    function get_ErrorMessageResourceName: string;
    procedure set_ErrorMessageResourceName(value: string);
    function get_ErrorMessageResourceType: DDNC.System.Private.CoreLib.DNType;
    procedure set_ErrorMessageResourceType(value: DDNC.System.Private.CoreLib.DNType);
    function get_TypeId: DDNC.System.Private.CoreLib.DNObject;

  { methods } 

    function FormatErrorMessage(name: string): string;
    function IsValid(value: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetValidationResult(value: DDNC.System.Private.CoreLib.DNObject; validationContext: DNValidationContext): DNValidationResult;
    procedure Validate(value: DDNC.System.Private.CoreLib.DNObject; name: string); overload;
    procedure Validate(value: DDNC.System.Private.CoreLib.DNObject; validationContext: DNValidationContext); overload;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function ToString: string;
    function GetType: DDNC.System.Private.CoreLib.DNType;

  { propertys } 

    property RequiresValidationContext: Boolean read get_RequiresValidationContext;
    property ErrorMessage: string read get_ErrorMessage write set_ErrorMessage;
    property ErrorMessageResourceName: string read get_ErrorMessageResourceName write set_ErrorMessageResourceName;
    property ErrorMessageResourceType: DDNC.System.Private.CoreLib.DNType read get_ErrorMessageResourceType write set_ErrorMessageResourceType;
    property TypeId: DDNC.System.Private.CoreLib.DNObject read get_TypeId;
  end;

  TDNValidationAttribute = class(TDNGenericImport<DNValidationAttributeClass, DNValidationAttribute>) end;

  //-------------namespace: System.ComponentModel.DataAnnotations----------------
  DNCompareAttributeClass = interface(DNValidationAttributeClass)
  ['{C2D1B3C1-5ADE-5DBA-97AB-DDEC292CBE0C}']
  { constructors } 

    {class} function init(otherProperty: string): DNCompareAttribute;

  end;

  [DNTypeName('System.ComponentModel.DataAnnotations.CompareAttribute')]
  DNCompareAttribute = interface(DNValidationAttribute)
  ['{24C3968A-FD84-35C8-A519-31F63F36D7CA}']
  { getters & setters } 

    function get_OtherProperty: string;
    function get_OtherPropertyDisplayName: string;
    function get_RequiresValidationContext: Boolean;
    function get_ErrorMessage: string;
    procedure set_ErrorMessage(value: string);
    function get_ErrorMessageResourceName: string;
    procedure set_ErrorMessageResourceName(value: string);
    function get_ErrorMessageResourceType: DDNC.System.Private.CoreLib.DNType;
    procedure set_ErrorMessageResourceType(value: DDNC.System.Private.CoreLib.DNType);
    function get_TypeId: DDNC.System.Private.CoreLib.DNObject;

  { methods } 

    function FormatErrorMessage(name: string): string;
    function IsValid(value: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetValidationResult(value: DDNC.System.Private.CoreLib.DNObject; validationContext: DNValidationContext): DNValidationResult;
    procedure Validate(value: DDNC.System.Private.CoreLib.DNObject; name: string); overload;
    procedure Validate(value: DDNC.System.Private.CoreLib.DNObject; validationContext: DNValidationContext); overload;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function ToString: string;
    function GetType: DDNC.System.Private.CoreLib.DNType;

  { propertys } 

    property OtherProperty: string read get_OtherProperty;
    property OtherPropertyDisplayName: string read get_OtherPropertyDisplayName;
    property RequiresValidationContext: Boolean read get_RequiresValidationContext;
    property ErrorMessage: string read get_ErrorMessage write set_ErrorMessage;
    property ErrorMessageResourceName: string read get_ErrorMessageResourceName write set_ErrorMessageResourceName;
    property ErrorMessageResourceType: DDNC.System.Private.CoreLib.DNType read get_ErrorMessageResourceType write set_ErrorMessageResourceType;
    property TypeId: DDNC.System.Private.CoreLib.DNObject read get_TypeId;
  end;

  TDNCompareAttribute = class(TDNGenericImport<DNCompareAttributeClass, DNCompareAttribute>) end;

  //-------------namespace: System.ComponentModel.DataAnnotations----------------
  DNCustomValidationAttributeClass = interface(DNValidationAttributeClass)
  ['{B16F180F-241B-51D2-B2F8-B2F70F026581}']
  { constructors } 

    {class} function init(validatorType: DDNC.System.Private.CoreLib.DNType; method: string): DNCustomValidationAttribute;

  end;

  [DNTypeName('System.ComponentModel.DataAnnotations.CustomValidationAttribute')]
  DNCustomValidationAttribute = interface(DNValidationAttribute)
  ['{9C273514-323C-3EED-80D5-020D8B679AC3}']
  { getters & setters } 

    function get_ValidatorType: DDNC.System.Private.CoreLib.DNType;
    function get_Method: string;
    function get_RequiresValidationContext: Boolean;
    function get_ErrorMessage: string;
    procedure set_ErrorMessage(value: string);
    function get_ErrorMessageResourceName: string;
    procedure set_ErrorMessageResourceName(value: string);
    function get_ErrorMessageResourceType: DDNC.System.Private.CoreLib.DNType;
    procedure set_ErrorMessageResourceType(value: DDNC.System.Private.CoreLib.DNType);
    function get_TypeId: DDNC.System.Private.CoreLib.DNObject;

  { methods } 

    function FormatErrorMessage(name: string): string;
    function IsValid(value: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetValidationResult(value: DDNC.System.Private.CoreLib.DNObject; validationContext: DNValidationContext): DNValidationResult;
    procedure Validate(value: DDNC.System.Private.CoreLib.DNObject; name: string); overload;
    procedure Validate(value: DDNC.System.Private.CoreLib.DNObject; validationContext: DNValidationContext); overload;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function ToString: string;
    function GetType: DDNC.System.Private.CoreLib.DNType;

  { propertys } 

    property ValidatorType: DDNC.System.Private.CoreLib.DNType read get_ValidatorType;
    property Method: string read get_Method;
    property RequiresValidationContext: Boolean read get_RequiresValidationContext;
    property ErrorMessage: string read get_ErrorMessage write set_ErrorMessage;
    property ErrorMessageResourceName: string read get_ErrorMessageResourceName write set_ErrorMessageResourceName;
    property ErrorMessageResourceType: DDNC.System.Private.CoreLib.DNType read get_ErrorMessageResourceType write set_ErrorMessageResourceType;
    property TypeId: DDNC.System.Private.CoreLib.DNObject read get_TypeId;
  end;

  TDNCustomValidationAttribute = class(TDNGenericImport<DNCustomValidationAttributeClass, DNCustomValidationAttribute>) end;

  //-------------namespace: System.ComponentModel.DataAnnotations----------------
  DNDataTypeAttributeClass = interface(DNValidationAttributeClass)
  ['{AA5F4379-0EE9-5798-B8B4-9448CD83315E}']
  { constructors } 

    {class} function init(dataType: DNDataType): DNDataTypeAttribute; overload;
    {class} function init(customDataType: string): DNDataTypeAttribute; overload;

  end;

  [DNTypeName('System.ComponentModel.DataAnnotations.DataTypeAttribute')]
  DNDataTypeAttribute = interface(DNValidationAttribute)
  ['{5E6B8C80-B91E-3B9B-861F-0465D11F6DE5}']
  { getters & setters } 

    function get_DataType: DNDataType;
    function get_CustomDataType: string;
    function get_DisplayFormat: DNDisplayFormatAttribute;
    function get_RequiresValidationContext: Boolean;
    function get_ErrorMessage: string;
    procedure set_ErrorMessage(value: string);
    function get_ErrorMessageResourceName: string;
    procedure set_ErrorMessageResourceName(value: string);
    function get_ErrorMessageResourceType: DDNC.System.Private.CoreLib.DNType;
    procedure set_ErrorMessageResourceType(value: DDNC.System.Private.CoreLib.DNType);
    function get_TypeId: DDNC.System.Private.CoreLib.DNObject;

  { methods } 

    function GetDataTypeName: string;
    function IsValid(value: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function FormatErrorMessage(name: string): string;
    function GetValidationResult(value: DDNC.System.Private.CoreLib.DNObject; validationContext: DNValidationContext): DNValidationResult;
    procedure Validate(value: DDNC.System.Private.CoreLib.DNObject; name: string); overload;
    procedure Validate(value: DDNC.System.Private.CoreLib.DNObject; validationContext: DNValidationContext); overload;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function ToString: string;
    function GetType: DDNC.System.Private.CoreLib.DNType;

  { propertys } 

    property DataType: DNDataType read get_DataType;
    property CustomDataType: string read get_CustomDataType;
    property DisplayFormat: DNDisplayFormatAttribute read get_DisplayFormat;
    property RequiresValidationContext: Boolean read get_RequiresValidationContext;
    property ErrorMessage: string read get_ErrorMessage write set_ErrorMessage;
    property ErrorMessageResourceName: string read get_ErrorMessageResourceName write set_ErrorMessageResourceName;
    property ErrorMessageResourceType: DDNC.System.Private.CoreLib.DNType read get_ErrorMessageResourceType write set_ErrorMessageResourceType;
    property TypeId: DDNC.System.Private.CoreLib.DNObject read get_TypeId;
  end;

  TDNDataTypeAttribute = class(TDNGenericImport<DNDataTypeAttributeClass, DNDataTypeAttribute>) end;

  //-------------namespace: System.ComponentModel.DataAnnotations----------------
  DNCreditCardAttributeClass = interface(DNDataTypeAttributeClass)
  ['{65E0A9AB-6000-5933-A790-FE7C279F9828}']
  { constructors } 

    {class} function init: DNCreditCardAttribute;

  end;

  [DNTypeName('System.ComponentModel.DataAnnotations.CreditCardAttribute')]
  DNCreditCardAttribute = interface(DNDataTypeAttribute)
  ['{6265944C-048F-35D7-B361-4C08F618DF59}']
  { getters & setters } 

    function get_DataType: DNDataType;
    function get_CustomDataType: string;
    function get_DisplayFormat: DNDisplayFormatAttribute;
    function get_RequiresValidationContext: Boolean;
    function get_ErrorMessage: string;
    procedure set_ErrorMessage(value: string);
    function get_ErrorMessageResourceName: string;
    procedure set_ErrorMessageResourceName(value: string);
    function get_ErrorMessageResourceType: DDNC.System.Private.CoreLib.DNType;
    procedure set_ErrorMessageResourceType(value: DDNC.System.Private.CoreLib.DNType);
    function get_TypeId: DDNC.System.Private.CoreLib.DNObject;

  { methods } 

    function IsValid(value: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetDataTypeName: string;
    function FormatErrorMessage(name: string): string;
    function GetValidationResult(value: DDNC.System.Private.CoreLib.DNObject; validationContext: DNValidationContext): DNValidationResult;
    procedure Validate(value: DDNC.System.Private.CoreLib.DNObject; name: string); overload;
    procedure Validate(value: DDNC.System.Private.CoreLib.DNObject; validationContext: DNValidationContext); overload;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function ToString: string;
    function GetType: DDNC.System.Private.CoreLib.DNType;

  { propertys } 

    property DataType: DNDataType read get_DataType;
    property CustomDataType: string read get_CustomDataType;
    property DisplayFormat: DNDisplayFormatAttribute read get_DisplayFormat;
    property RequiresValidationContext: Boolean read get_RequiresValidationContext;
    property ErrorMessage: string read get_ErrorMessage write set_ErrorMessage;
    property ErrorMessageResourceName: string read get_ErrorMessageResourceName write set_ErrorMessageResourceName;
    property ErrorMessageResourceType: DDNC.System.Private.CoreLib.DNType read get_ErrorMessageResourceType write set_ErrorMessageResourceType;
    property TypeId: DDNC.System.Private.CoreLib.DNObject read get_TypeId;
  end;

  TDNCreditCardAttribute = class(TDNGenericImport<DNCreditCardAttributeClass, DNCreditCardAttribute>) end;

  //-------------namespace: System.ComponentModel.DataAnnotations----------------
  DNEmailAddressAttributeClass = interface(DNDataTypeAttributeClass)
  ['{44087E11-061B-54B5-95F0-E7695AA73FDF}']
  { constructors } 

    {class} function init: DNEmailAddressAttribute;

  end;

  [DNTypeName('System.ComponentModel.DataAnnotations.EmailAddressAttribute')]
  DNEmailAddressAttribute = interface(DNDataTypeAttribute)
  ['{0164671C-8682-3176-B5AA-013A17E52FBE}']
  { getters & setters } 

    function get_DataType: DNDataType;
    function get_CustomDataType: string;
    function get_DisplayFormat: DNDisplayFormatAttribute;
    function get_RequiresValidationContext: Boolean;
    function get_ErrorMessage: string;
    procedure set_ErrorMessage(value: string);
    function get_ErrorMessageResourceName: string;
    procedure set_ErrorMessageResourceName(value: string);
    function get_ErrorMessageResourceType: DDNC.System.Private.CoreLib.DNType;
    procedure set_ErrorMessageResourceType(value: DDNC.System.Private.CoreLib.DNType);
    function get_TypeId: DDNC.System.Private.CoreLib.DNObject;

  { methods } 

    function IsValid(value: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetDataTypeName: string;
    function FormatErrorMessage(name: string): string;
    function GetValidationResult(value: DDNC.System.Private.CoreLib.DNObject; validationContext: DNValidationContext): DNValidationResult;
    procedure Validate(value: DDNC.System.Private.CoreLib.DNObject; name: string); overload;
    procedure Validate(value: DDNC.System.Private.CoreLib.DNObject; validationContext: DNValidationContext); overload;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function ToString: string;
    function GetType: DDNC.System.Private.CoreLib.DNType;

  { propertys } 

    property DataType: DNDataType read get_DataType;
    property CustomDataType: string read get_CustomDataType;
    property DisplayFormat: DNDisplayFormatAttribute read get_DisplayFormat;
    property RequiresValidationContext: Boolean read get_RequiresValidationContext;
    property ErrorMessage: string read get_ErrorMessage write set_ErrorMessage;
    property ErrorMessageResourceName: string read get_ErrorMessageResourceName write set_ErrorMessageResourceName;
    property ErrorMessageResourceType: DDNC.System.Private.CoreLib.DNType read get_ErrorMessageResourceType write set_ErrorMessageResourceType;
    property TypeId: DDNC.System.Private.CoreLib.DNObject read get_TypeId;
  end;

  TDNEmailAddressAttribute = class(TDNGenericImport<DNEmailAddressAttributeClass, DNEmailAddressAttribute>) end;

  //-------------namespace: System.ComponentModel.DataAnnotations----------------
  DNEnumDataTypeAttributeClass = interface(DNDataTypeAttributeClass)
  ['{FBD36D15-4A49-5B3D-976E-E9D97A731FB0}']
  { constructors } 

    {class} function init(enumType: DDNC.System.Private.CoreLib.DNType): DNEnumDataTypeAttribute;

  end;

  [DNTypeName('System.ComponentModel.DataAnnotations.EnumDataTypeAttribute')]
  DNEnumDataTypeAttribute = interface(DNDataTypeAttribute)
  ['{4ED94540-AF5E-33E6-950F-D081D360461C}']
  { getters & setters } 

    function get_EnumType: DDNC.System.Private.CoreLib.DNType;
    function get_DataType: DNDataType;
    function get_CustomDataType: string;
    function get_DisplayFormat: DNDisplayFormatAttribute;
    function get_RequiresValidationContext: Boolean;
    function get_ErrorMessage: string;
    procedure set_ErrorMessage(value: string);
    function get_ErrorMessageResourceName: string;
    procedure set_ErrorMessageResourceName(value: string);
    function get_ErrorMessageResourceType: DDNC.System.Private.CoreLib.DNType;
    procedure set_ErrorMessageResourceType(value: DDNC.System.Private.CoreLib.DNType);
    function get_TypeId: DDNC.System.Private.CoreLib.DNObject;

  { methods } 

    function IsValid(value: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetDataTypeName: string;
    function FormatErrorMessage(name: string): string;
    function GetValidationResult(value: DDNC.System.Private.CoreLib.DNObject; validationContext: DNValidationContext): DNValidationResult;
    procedure Validate(value: DDNC.System.Private.CoreLib.DNObject; name: string); overload;
    procedure Validate(value: DDNC.System.Private.CoreLib.DNObject; validationContext: DNValidationContext); overload;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function ToString: string;
    function GetType: DDNC.System.Private.CoreLib.DNType;

  { propertys } 

    property EnumType: DDNC.System.Private.CoreLib.DNType read get_EnumType;
    property DataType: DNDataType read get_DataType;
    property CustomDataType: string read get_CustomDataType;
    property DisplayFormat: DNDisplayFormatAttribute read get_DisplayFormat;
    property RequiresValidationContext: Boolean read get_RequiresValidationContext;
    property ErrorMessage: string read get_ErrorMessage write set_ErrorMessage;
    property ErrorMessageResourceName: string read get_ErrorMessageResourceName write set_ErrorMessageResourceName;
    property ErrorMessageResourceType: DDNC.System.Private.CoreLib.DNType read get_ErrorMessageResourceType write set_ErrorMessageResourceType;
    property TypeId: DDNC.System.Private.CoreLib.DNObject read get_TypeId;
  end;

  TDNEnumDataTypeAttribute = class(TDNGenericImport<DNEnumDataTypeAttributeClass, DNEnumDataTypeAttribute>) end;

  //-------------namespace: System.ComponentModel.DataAnnotations----------------
  DNFileExtensionsAttributeClass = interface(DNDataTypeAttributeClass)
  ['{B0A67297-6FAF-5C34-A6C5-1BF569F95724}']
  { constructors } 

    {class} function init: DNFileExtensionsAttribute;

  end;

  [DNTypeName('System.ComponentModel.DataAnnotations.FileExtensionsAttribute')]
  DNFileExtensionsAttribute = interface(DNDataTypeAttribute)
  ['{D0377081-B6E3-3D32-8637-DDFF3B8B3B7A}']
  { getters & setters } 

    function get_Extensions: string;
    procedure set_Extensions(value: string);
    function get_DataType: DNDataType;
    function get_CustomDataType: string;
    function get_DisplayFormat: DNDisplayFormatAttribute;
    function get_RequiresValidationContext: Boolean;
    function get_ErrorMessage: string;
    procedure set_ErrorMessage(value: string);
    function get_ErrorMessageResourceName: string;
    procedure set_ErrorMessageResourceName(value: string);
    function get_ErrorMessageResourceType: DDNC.System.Private.CoreLib.DNType;
    procedure set_ErrorMessageResourceType(value: DDNC.System.Private.CoreLib.DNType);
    function get_TypeId: DDNC.System.Private.CoreLib.DNObject;

  { methods } 

    function FormatErrorMessage(name: string): string;
    function IsValid(value: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetDataTypeName: string;
    function GetValidationResult(value: DDNC.System.Private.CoreLib.DNObject; validationContext: DNValidationContext): DNValidationResult;
    procedure Validate(value: DDNC.System.Private.CoreLib.DNObject; name: string); overload;
    procedure Validate(value: DDNC.System.Private.CoreLib.DNObject; validationContext: DNValidationContext); overload;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function ToString: string;
    function GetType: DDNC.System.Private.CoreLib.DNType;

  { propertys } 

    property Extensions: string read get_Extensions write set_Extensions;
    property DataType: DNDataType read get_DataType;
    property CustomDataType: string read get_CustomDataType;
    property DisplayFormat: DNDisplayFormatAttribute read get_DisplayFormat;
    property RequiresValidationContext: Boolean read get_RequiresValidationContext;
    property ErrorMessage: string read get_ErrorMessage write set_ErrorMessage;
    property ErrorMessageResourceName: string read get_ErrorMessageResourceName write set_ErrorMessageResourceName;
    property ErrorMessageResourceType: DDNC.System.Private.CoreLib.DNType read get_ErrorMessageResourceType write set_ErrorMessageResourceType;
    property TypeId: DDNC.System.Private.CoreLib.DNObject read get_TypeId;
  end;

  TDNFileExtensionsAttribute = class(TDNGenericImport<DNFileExtensionsAttributeClass, DNFileExtensionsAttribute>) end;

  //-------------namespace: System.ComponentModel.DataAnnotations----------------
  DNPhoneAttributeClass = interface(DNDataTypeAttributeClass)
  ['{21FE1D35-FD02-5954-82A2-12BFD6C29F2B}']
  { constructors } 

    {class} function init: DNPhoneAttribute;

  end;

  [DNTypeName('System.ComponentModel.DataAnnotations.PhoneAttribute')]
  DNPhoneAttribute = interface(DNDataTypeAttribute)
  ['{2641E6F1-1996-3A67-81F1-9486352951E1}']
  { getters & setters } 

    function get_DataType: DNDataType;
    function get_CustomDataType: string;
    function get_DisplayFormat: DNDisplayFormatAttribute;
    function get_RequiresValidationContext: Boolean;
    function get_ErrorMessage: string;
    procedure set_ErrorMessage(value: string);
    function get_ErrorMessageResourceName: string;
    procedure set_ErrorMessageResourceName(value: string);
    function get_ErrorMessageResourceType: DDNC.System.Private.CoreLib.DNType;
    procedure set_ErrorMessageResourceType(value: DDNC.System.Private.CoreLib.DNType);
    function get_TypeId: DDNC.System.Private.CoreLib.DNObject;

  { methods } 

    function IsValid(value: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetDataTypeName: string;
    function FormatErrorMessage(name: string): string;
    function GetValidationResult(value: DDNC.System.Private.CoreLib.DNObject; validationContext: DNValidationContext): DNValidationResult;
    procedure Validate(value: DDNC.System.Private.CoreLib.DNObject; name: string); overload;
    procedure Validate(value: DDNC.System.Private.CoreLib.DNObject; validationContext: DNValidationContext); overload;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function ToString: string;
    function GetType: DDNC.System.Private.CoreLib.DNType;

  { propertys } 

    property DataType: DNDataType read get_DataType;
    property CustomDataType: string read get_CustomDataType;
    property DisplayFormat: DNDisplayFormatAttribute read get_DisplayFormat;
    property RequiresValidationContext: Boolean read get_RequiresValidationContext;
    property ErrorMessage: string read get_ErrorMessage write set_ErrorMessage;
    property ErrorMessageResourceName: string read get_ErrorMessageResourceName write set_ErrorMessageResourceName;
    property ErrorMessageResourceType: DDNC.System.Private.CoreLib.DNType read get_ErrorMessageResourceType write set_ErrorMessageResourceType;
    property TypeId: DDNC.System.Private.CoreLib.DNObject read get_TypeId;
  end;

  TDNPhoneAttribute = class(TDNGenericImport<DNPhoneAttributeClass, DNPhoneAttribute>) end;

  //-------------namespace: System.ComponentModel.DataAnnotations----------------
  DNUrlAttributeClass = interface(DNDataTypeAttributeClass)
  ['{7840B047-7814-544E-807F-7485420869C4}']
  { constructors } 

    {class} function init: DNUrlAttribute;

  end;

  [DNTypeName('System.ComponentModel.DataAnnotations.UrlAttribute')]
  DNUrlAttribute = interface(DNDataTypeAttribute)
  ['{F64FEC2F-0774-3F8D-96B3-2EE4C7A9C9C5}']
  { getters & setters } 

    function get_DataType: DNDataType;
    function get_CustomDataType: string;
    function get_DisplayFormat: DNDisplayFormatAttribute;
    function get_RequiresValidationContext: Boolean;
    function get_ErrorMessage: string;
    procedure set_ErrorMessage(value: string);
    function get_ErrorMessageResourceName: string;
    procedure set_ErrorMessageResourceName(value: string);
    function get_ErrorMessageResourceType: DDNC.System.Private.CoreLib.DNType;
    procedure set_ErrorMessageResourceType(value: DDNC.System.Private.CoreLib.DNType);
    function get_TypeId: DDNC.System.Private.CoreLib.DNObject;

  { methods } 

    function IsValid(value: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetDataTypeName: string;
    function FormatErrorMessage(name: string): string;
    function GetValidationResult(value: DDNC.System.Private.CoreLib.DNObject; validationContext: DNValidationContext): DNValidationResult;
    procedure Validate(value: DDNC.System.Private.CoreLib.DNObject; name: string); overload;
    procedure Validate(value: DDNC.System.Private.CoreLib.DNObject; validationContext: DNValidationContext); overload;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function ToString: string;
    function GetType: DDNC.System.Private.CoreLib.DNType;

  { propertys } 

    property DataType: DNDataType read get_DataType;
    property CustomDataType: string read get_CustomDataType;
    property DisplayFormat: DNDisplayFormatAttribute read get_DisplayFormat;
    property RequiresValidationContext: Boolean read get_RequiresValidationContext;
    property ErrorMessage: string read get_ErrorMessage write set_ErrorMessage;
    property ErrorMessageResourceName: string read get_ErrorMessageResourceName write set_ErrorMessageResourceName;
    property ErrorMessageResourceType: DDNC.System.Private.CoreLib.DNType read get_ErrorMessageResourceType write set_ErrorMessageResourceType;
    property TypeId: DDNC.System.Private.CoreLib.DNObject read get_TypeId;
  end;

  TDNUrlAttribute = class(TDNGenericImport<DNUrlAttributeClass, DNUrlAttribute>) end;

  //-------------namespace: System.ComponentModel.DataAnnotations----------------
  DNMaxLengthAttributeClass = interface(DNValidationAttributeClass)
  ['{17B14013-9627-51EB-8640-22B8ABFED824}']
  { constructors } 

    {class} function init(length: Int32): DNMaxLengthAttribute; overload;
    {class} function init: DNMaxLengthAttribute; overload;

  end;

  [DNTypeName('System.ComponentModel.DataAnnotations.MaxLengthAttribute')]
  DNMaxLengthAttribute = interface(DNValidationAttribute)
  ['{018A4DBD-9966-3613-BA25-4C2F685ACC58}']
  { getters & setters } 

    function get_Length: Int32;
    function get_RequiresValidationContext: Boolean;
    function get_ErrorMessage: string;
    procedure set_ErrorMessage(value: string);
    function get_ErrorMessageResourceName: string;
    procedure set_ErrorMessageResourceName(value: string);
    function get_ErrorMessageResourceType: DDNC.System.Private.CoreLib.DNType;
    procedure set_ErrorMessageResourceType(value: DDNC.System.Private.CoreLib.DNType);
    function get_TypeId: DDNC.System.Private.CoreLib.DNObject;

  { methods } 

    function IsValid(value: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function FormatErrorMessage(name: string): string;
    function GetValidationResult(value: DDNC.System.Private.CoreLib.DNObject; validationContext: DNValidationContext): DNValidationResult;
    procedure Validate(value: DDNC.System.Private.CoreLib.DNObject; name: string); overload;
    procedure Validate(value: DDNC.System.Private.CoreLib.DNObject; validationContext: DNValidationContext); overload;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function ToString: string;
    function GetType: DDNC.System.Private.CoreLib.DNType;

  { propertys } 

    property Length: Int32 read get_Length;
    property RequiresValidationContext: Boolean read get_RequiresValidationContext;
    property ErrorMessage: string read get_ErrorMessage write set_ErrorMessage;
    property ErrorMessageResourceName: string read get_ErrorMessageResourceName write set_ErrorMessageResourceName;
    property ErrorMessageResourceType: DDNC.System.Private.CoreLib.DNType read get_ErrorMessageResourceType write set_ErrorMessageResourceType;
    property TypeId: DDNC.System.Private.CoreLib.DNObject read get_TypeId;
  end;

  TDNMaxLengthAttribute = class(TDNGenericImport<DNMaxLengthAttributeClass, DNMaxLengthAttribute>) end;

  //-------------namespace: System.ComponentModel.DataAnnotations----------------
  DNMinLengthAttributeClass = interface(DNValidationAttributeClass)
  ['{F3066F15-0D45-52E0-B264-BB137612F52F}']
  { constructors } 

    {class} function init(length: Int32): DNMinLengthAttribute;

  end;

  [DNTypeName('System.ComponentModel.DataAnnotations.MinLengthAttribute')]
  DNMinLengthAttribute = interface(DNValidationAttribute)
  ['{0DDCD102-3AF6-3EBD-8D60-6712B03D5E82}']
  { getters & setters } 

    function get_Length: Int32;
    function get_RequiresValidationContext: Boolean;
    function get_ErrorMessage: string;
    procedure set_ErrorMessage(value: string);
    function get_ErrorMessageResourceName: string;
    procedure set_ErrorMessageResourceName(value: string);
    function get_ErrorMessageResourceType: DDNC.System.Private.CoreLib.DNType;
    procedure set_ErrorMessageResourceType(value: DDNC.System.Private.CoreLib.DNType);
    function get_TypeId: DDNC.System.Private.CoreLib.DNObject;

  { methods } 

    function IsValid(value: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function FormatErrorMessage(name: string): string;
    function GetValidationResult(value: DDNC.System.Private.CoreLib.DNObject; validationContext: DNValidationContext): DNValidationResult;
    procedure Validate(value: DDNC.System.Private.CoreLib.DNObject; name: string); overload;
    procedure Validate(value: DDNC.System.Private.CoreLib.DNObject; validationContext: DNValidationContext); overload;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function ToString: string;
    function GetType: DDNC.System.Private.CoreLib.DNType;

  { propertys } 

    property Length: Int32 read get_Length;
    property RequiresValidationContext: Boolean read get_RequiresValidationContext;
    property ErrorMessage: string read get_ErrorMessage write set_ErrorMessage;
    property ErrorMessageResourceName: string read get_ErrorMessageResourceName write set_ErrorMessageResourceName;
    property ErrorMessageResourceType: DDNC.System.Private.CoreLib.DNType read get_ErrorMessageResourceType write set_ErrorMessageResourceType;
    property TypeId: DDNC.System.Private.CoreLib.DNObject read get_TypeId;
  end;

  TDNMinLengthAttribute = class(TDNGenericImport<DNMinLengthAttributeClass, DNMinLengthAttribute>) end;

  //-------------namespace: System.ComponentModel.DataAnnotations----------------
  DNRangeAttributeClass = interface(DNValidationAttributeClass)
  ['{BE7FF8E5-F82C-5965-A50C-544BEDC0F82A}']
  { constructors } 

    {class} function init(minimum: Int32; maximum: Int32): DNRangeAttribute; overload;
    {class} function init(minimum: Double; maximum: Double): DNRangeAttribute; overload;
    {class} function init(&type: DDNC.System.Private.CoreLib.DNType; minimum: string; maximum: string): DNRangeAttribute; overload;

  end;

  [DNTypeName('System.ComponentModel.DataAnnotations.RangeAttribute')]
  DNRangeAttribute = interface(DNValidationAttribute)
  ['{522F1232-40FF-37DC-8733-5B3C3E63C98E}']
  { getters & setters } 

    function get_Minimum: DDNC.System.Private.CoreLib.DNObject;
    function get_Maximum: DDNC.System.Private.CoreLib.DNObject;
    function get_OperandType: DDNC.System.Private.CoreLib.DNType;
    function get_ParseLimitsInInvariantCulture: Boolean;
    procedure set_ParseLimitsInInvariantCulture(value: Boolean);
    function get_ConvertValueInInvariantCulture: Boolean;
    procedure set_ConvertValueInInvariantCulture(value: Boolean);
    function get_RequiresValidationContext: Boolean;
    function get_ErrorMessage: string;
    procedure set_ErrorMessage(value: string);
    function get_ErrorMessageResourceName: string;
    procedure set_ErrorMessageResourceName(value: string);
    function get_ErrorMessageResourceType: DDNC.System.Private.CoreLib.DNType;
    procedure set_ErrorMessageResourceType(value: DDNC.System.Private.CoreLib.DNType);
    function get_TypeId: DDNC.System.Private.CoreLib.DNObject;

  { methods } 

    function IsValid(value: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function FormatErrorMessage(name: string): string;
    function GetValidationResult(value: DDNC.System.Private.CoreLib.DNObject; validationContext: DNValidationContext): DNValidationResult;
    procedure Validate(value: DDNC.System.Private.CoreLib.DNObject; name: string); overload;
    procedure Validate(value: DDNC.System.Private.CoreLib.DNObject; validationContext: DNValidationContext); overload;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function ToString: string;
    function GetType: DDNC.System.Private.CoreLib.DNType;

  { propertys } 

    property Minimum: DDNC.System.Private.CoreLib.DNObject read get_Minimum;
    property Maximum: DDNC.System.Private.CoreLib.DNObject read get_Maximum;
    property OperandType: DDNC.System.Private.CoreLib.DNType read get_OperandType;
    property ParseLimitsInInvariantCulture: Boolean read get_ParseLimitsInInvariantCulture write set_ParseLimitsInInvariantCulture;
    property ConvertValueInInvariantCulture: Boolean read get_ConvertValueInInvariantCulture write set_ConvertValueInInvariantCulture;
    property RequiresValidationContext: Boolean read get_RequiresValidationContext;
    property ErrorMessage: string read get_ErrorMessage write set_ErrorMessage;
    property ErrorMessageResourceName: string read get_ErrorMessageResourceName write set_ErrorMessageResourceName;
    property ErrorMessageResourceType: DDNC.System.Private.CoreLib.DNType read get_ErrorMessageResourceType write set_ErrorMessageResourceType;
    property TypeId: DDNC.System.Private.CoreLib.DNObject read get_TypeId;
  end;

  TDNRangeAttribute = class(TDNGenericImport<DNRangeAttributeClass, DNRangeAttribute>) end;

  //-------------namespace: System.ComponentModel.DataAnnotations----------------
  DNRegularExpressionAttributeClass = interface(DNValidationAttributeClass)
  ['{C936EC2F-4E40-5C43-939D-A4EA30925C29}']
  { constructors } 

    {class} function init(pattern: string): DNRegularExpressionAttribute;

  end;

  [DNTypeName('System.ComponentModel.DataAnnotations.RegularExpressionAttribute')]
  DNRegularExpressionAttribute = interface(DNValidationAttribute)
  ['{36F9FAAA-3A18-39BA-AE8E-3A1B10B6DD26}']
  { getters & setters } 

    function get_MatchTimeoutInMilliseconds: Int32;
    procedure set_MatchTimeoutInMilliseconds(value: Int32);
    function get_Pattern: string;
    function get_RequiresValidationContext: Boolean;
    function get_ErrorMessage: string;
    procedure set_ErrorMessage(value: string);
    function get_ErrorMessageResourceName: string;
    procedure set_ErrorMessageResourceName(value: string);
    function get_ErrorMessageResourceType: DDNC.System.Private.CoreLib.DNType;
    procedure set_ErrorMessageResourceType(value: DDNC.System.Private.CoreLib.DNType);
    function get_TypeId: DDNC.System.Private.CoreLib.DNObject;

  { methods } 

    function IsValid(value: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function FormatErrorMessage(name: string): string;
    function GetValidationResult(value: DDNC.System.Private.CoreLib.DNObject; validationContext: DNValidationContext): DNValidationResult;
    procedure Validate(value: DDNC.System.Private.CoreLib.DNObject; name: string); overload;
    procedure Validate(value: DDNC.System.Private.CoreLib.DNObject; validationContext: DNValidationContext); overload;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function ToString: string;
    function GetType: DDNC.System.Private.CoreLib.DNType;

  { propertys } 

    property MatchTimeoutInMilliseconds: Int32 read get_MatchTimeoutInMilliseconds write set_MatchTimeoutInMilliseconds;
    property Pattern: string read get_Pattern;
    property RequiresValidationContext: Boolean read get_RequiresValidationContext;
    property ErrorMessage: string read get_ErrorMessage write set_ErrorMessage;
    property ErrorMessageResourceName: string read get_ErrorMessageResourceName write set_ErrorMessageResourceName;
    property ErrorMessageResourceType: DDNC.System.Private.CoreLib.DNType read get_ErrorMessageResourceType write set_ErrorMessageResourceType;
    property TypeId: DDNC.System.Private.CoreLib.DNObject read get_TypeId;
  end;

  TDNRegularExpressionAttribute = class(TDNGenericImport<DNRegularExpressionAttributeClass, DNRegularExpressionAttribute>) end;

  //-------------namespace: System.ComponentModel.DataAnnotations----------------
  DNRequiredAttributeClass = interface(DNValidationAttributeClass)
  ['{72263A43-6CF1-5AF5-9CDF-0704125D0524}']
  { constructors } 

    {class} function init: DNRequiredAttribute;

  end;

  [DNTypeName('System.ComponentModel.DataAnnotations.RequiredAttribute')]
  DNRequiredAttribute = interface(DNValidationAttribute)
  ['{3244BA56-63C3-336A-ABBB-89780A1A0FD5}']
  { getters & setters } 

    function get_AllowEmptyStrings: Boolean;
    procedure set_AllowEmptyStrings(value: Boolean);
    function get_RequiresValidationContext: Boolean;
    function get_ErrorMessage: string;
    procedure set_ErrorMessage(value: string);
    function get_ErrorMessageResourceName: string;
    procedure set_ErrorMessageResourceName(value: string);
    function get_ErrorMessageResourceType: DDNC.System.Private.CoreLib.DNType;
    procedure set_ErrorMessageResourceType(value: DDNC.System.Private.CoreLib.DNType);
    function get_TypeId: DDNC.System.Private.CoreLib.DNObject;

  { methods } 

    function IsValid(value: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function FormatErrorMessage(name: string): string;
    function GetValidationResult(value: DDNC.System.Private.CoreLib.DNObject; validationContext: DNValidationContext): DNValidationResult;
    procedure Validate(value: DDNC.System.Private.CoreLib.DNObject; name: string); overload;
    procedure Validate(value: DDNC.System.Private.CoreLib.DNObject; validationContext: DNValidationContext); overload;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function ToString: string;
    function GetType: DDNC.System.Private.CoreLib.DNType;

  { propertys } 

    property AllowEmptyStrings: Boolean read get_AllowEmptyStrings write set_AllowEmptyStrings;
    property RequiresValidationContext: Boolean read get_RequiresValidationContext;
    property ErrorMessage: string read get_ErrorMessage write set_ErrorMessage;
    property ErrorMessageResourceName: string read get_ErrorMessageResourceName write set_ErrorMessageResourceName;
    property ErrorMessageResourceType: DDNC.System.Private.CoreLib.DNType read get_ErrorMessageResourceType write set_ErrorMessageResourceType;
    property TypeId: DDNC.System.Private.CoreLib.DNObject read get_TypeId;
  end;

  TDNRequiredAttribute = class(TDNGenericImport<DNRequiredAttributeClass, DNRequiredAttribute>) end;

  //-------------namespace: System.ComponentModel.DataAnnotations----------------
  DNStringLengthAttributeClass = interface(DNValidationAttributeClass)
  ['{F81BFE67-6679-5B65-B8C8-273F19876B6C}']
  { constructors } 

    {class} function init(maximumLength: Int32): DNStringLengthAttribute;

  end;

  [DNTypeName('System.ComponentModel.DataAnnotations.StringLengthAttribute')]
  DNStringLengthAttribute = interface(DNValidationAttribute)
  ['{DE06BD96-863C-3439-ACF3-76FAF2A35568}']
  { getters & setters } 

    function get_MaximumLength: Int32;
    function get_MinimumLength: Int32;
    procedure set_MinimumLength(value: Int32);
    function get_RequiresValidationContext: Boolean;
    function get_ErrorMessage: string;
    procedure set_ErrorMessage(value: string);
    function get_ErrorMessageResourceName: string;
    procedure set_ErrorMessageResourceName(value: string);
    function get_ErrorMessageResourceType: DDNC.System.Private.CoreLib.DNType;
    procedure set_ErrorMessageResourceType(value: DDNC.System.Private.CoreLib.DNType);
    function get_TypeId: DDNC.System.Private.CoreLib.DNObject;

  { methods } 

    function IsValid(value: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function FormatErrorMessage(name: string): string;
    function GetValidationResult(value: DDNC.System.Private.CoreLib.DNObject; validationContext: DNValidationContext): DNValidationResult;
    procedure Validate(value: DDNC.System.Private.CoreLib.DNObject; name: string); overload;
    procedure Validate(value: DDNC.System.Private.CoreLib.DNObject; validationContext: DNValidationContext); overload;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function ToString: string;
    function GetType: DDNC.System.Private.CoreLib.DNType;

  { propertys } 

    property MaximumLength: Int32 read get_MaximumLength;
    property MinimumLength: Int32 read get_MinimumLength write set_MinimumLength;
    property RequiresValidationContext: Boolean read get_RequiresValidationContext;
    property ErrorMessage: string read get_ErrorMessage write set_ErrorMessage;
    property ErrorMessageResourceName: string read get_ErrorMessageResourceName write set_ErrorMessageResourceName;
    property ErrorMessageResourceType: DDNC.System.Private.CoreLib.DNType read get_ErrorMessageResourceType write set_ErrorMessageResourceType;
    property TypeId: DDNC.System.Private.CoreLib.DNObject read get_TypeId;
  end;

  TDNStringLengthAttribute = class(TDNGenericImport<DNStringLengthAttributeClass, DNStringLengthAttribute>) end;

  //-------------namespace: System.ComponentModel.DataAnnotations----------------
  DNValidationContextClass = interface(DNObjectClass)
  ['{438BB45A-833B-5F9A-A33A-3503DCB9F7DB}']
  { constructors } 

    {class} function init(instance: DDNC.System.Private.CoreLib.DNObject): DNValidationContext; overload;
    {class} function init(instance: DDNC.System.Private.CoreLib.DNObject; items: DDNC.System.Private.CoreLib.DNIDictionary<DDNC.System.Private.CoreLib.DNObject, DDNC.System.Private.CoreLib.DNObject>): DNValidationContext; overload;
    {class} function init(instance: DDNC.System.Private.CoreLib.DNObject; serviceProvider: DDNC.System.ComponentModel.DNIServiceProvider; items: DDNC.System.Private.CoreLib.DNIDictionary<DDNC.System.Private.CoreLib.DNObject, DDNC.System.Private.CoreLib.DNObject>): DNValidationContext; overload;

  end;

  [DNTypeName('System.ComponentModel.DataAnnotations.ValidationContext')]
  DNValidationContext = interface(DDNC.System.ComponentModel.DNIServiceProvider)
  ['{7F2CFE44-CA4C-3055-B201-9C90A43019F3}']
  { getters & setters } 

    function get_ObjectInstance: DDNC.System.Private.CoreLib.DNObject;
    function get_ObjectType: DDNC.System.Private.CoreLib.DNType;
    function get_DisplayName: string;
    procedure set_DisplayName(value: string);
    function get_MemberName: string;
    procedure set_MemberName(value: string);
    function get_Items: DDNC.System.Private.CoreLib.DNIDictionary<DDNC.System.Private.CoreLib.DNObject, DDNC.System.Private.CoreLib.DNObject>;

  { methods } 

    procedure InitializeServiceProvider(serviceProvider: DDNC.System.Private.CoreLib.DNFunc<DDNC.System.Private.CoreLib.DNType, DDNC.System.Private.CoreLib.DNObject>);
    function GetService(serviceType: DDNC.System.Private.CoreLib.DNType): DDNC.System.Private.CoreLib.DNObject;
    function ToString: string;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDNC.System.Private.CoreLib.DNType;

  { propertys } 

    property ObjectInstance: DDNC.System.Private.CoreLib.DNObject read get_ObjectInstance;
    property ObjectType: DDNC.System.Private.CoreLib.DNType read get_ObjectType;
    property DisplayName: string read get_DisplayName write set_DisplayName;
    property MemberName: string read get_MemberName write set_MemberName;
    property Items: DDNC.System.Private.CoreLib.DNIDictionary<DDNC.System.Private.CoreLib.DNObject, DDNC.System.Private.CoreLib.DNObject> read get_Items;
  end;

  TDNValidationContext = class(TDNGenericImport<DNValidationContextClass, DNValidationContext>) end;

  //-------------namespace: System.ComponentModel.DataAnnotations----------------
  DNValidationResultClass = interface(DDNC.System.Private.CoreLib.DNObjectClass)
  ['{34546AF1-1600-5C9C-8CF5-7C895E0BC1C2}']
  { constructors } 

    {class} function init(errorMessage: string): DNValidationResult; overload;
    {class} function init(errorMessage: string; memberNames: DDNC.System.Private.CoreLib.DNIEnumerable<string>): DNValidationResult; overload;

  { static fields getter & setter } 

   function __fakeFieldGet_Success: DNValidationResult;

  { static fields } 

    {class} property Success: DNValidationResult read __fakeFieldGet_Success;

  end;

  [DNTypeName('System.ComponentModel.DataAnnotations.ValidationResult')]
  DNValidationResult = interface(DDNC.System.Private.CoreLib.DNObject)
  ['{9B7177F3-EC65-3267-9540-ADFF4DF877BC}']
  { getters & setters } 

    function get_MemberNames: DDNC.System.Private.CoreLib.DNIEnumerable<string>;
    function get_ErrorMessage: string;
    procedure set_ErrorMessage(value: string);

  { methods } 

    function ToString: string;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDNC.System.Private.CoreLib.DNType;

  { propertys } 

    property MemberNames: DDNC.System.Private.CoreLib.DNIEnumerable<string> read get_MemberNames;
    property ErrorMessage: string read get_ErrorMessage write set_ErrorMessage;
  end;

  TDNValidationResult = class(TDNGenericImport<DNValidationResultClass, DNValidationResult>) end;

  //-------------namespace: System.ComponentModel.DataAnnotations----------------
  DNValidatorClass = interface(DDNC.System.Private.CoreLib.DNObjectClass)
  ['{52029017-682E-59A4-B10F-EB22C8420126}']
  { static methods } 

    {class} function TryValidateProperty(value: DDNC.System.Private.CoreLib.DNObject; validationContext: DNValidationContext; validationResults: DDNC.System.Private.CoreLib.DNICollection<DNValidationResult>): Boolean;
    {class} function TryValidateObject(instance: DDNC.System.Private.CoreLib.DNObject; validationContext: DNValidationContext; validationResults: DDNC.System.Private.CoreLib.DNICollection<DNValidationResult>): Boolean; overload;
    {class} function TryValidateObject(instance: DDNC.System.Private.CoreLib.DNObject; validationContext: DNValidationContext; validationResults: DDNC.System.Private.CoreLib.DNICollection<DNValidationResult>; validateAllProperties: Boolean): Boolean; overload;
    {class} function TryValidateValue(value: DDNC.System.Private.CoreLib.DNObject; validationContext: DNValidationContext; validationResults: DDNC.System.Private.CoreLib.DNICollection<DNValidationResult>; validationAttributes: DDNC.System.Private.CoreLib.DNIEnumerable<DNValidationAttribute>): Boolean;
    {class} procedure ValidateProperty(value: DDNC.System.Private.CoreLib.DNObject; validationContext: DNValidationContext);
    {class} procedure ValidateObject(instance: DDNC.System.Private.CoreLib.DNObject; validationContext: DNValidationContext); overload;
    {class} procedure ValidateObject(instance: DDNC.System.Private.CoreLib.DNObject; validationContext: DNValidationContext; validateAllProperties: Boolean); overload;
    {class} procedure ValidateValue(value: DDNC.System.Private.CoreLib.DNObject; validationContext: DNValidationContext; validationAttributes: DDNC.System.Private.CoreLib.DNIEnumerable<DNValidationAttribute>);

  end;

  [DNTypeName('System.ComponentModel.DataAnnotations.Validator')]
  DNValidator = interface(DDNC.System.Private.CoreLib.DNObject)
  ['{B48530E5-3952-3AC3-834A-55676C614611}']
  { methods } 

    function ToString: string;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDNC.System.Private.CoreLib.DNType;

  end;

  TDNValidator = class(TDNGenericImport<DNValidatorClass, DNValidator>) end;

  //-------------namespace: System.ComponentModel.DataAnnotations----------------
  DNValidationExceptionClass = interface(DDNC.System.Private.CoreLib.DNExceptionClass)
  ['{0093A574-172E-562F-869B-C0C7BABC4EF7}']
  { constructors } 

    {class} function init(validationResult: DNValidationResult; validatingAttribute: DNValidationAttribute; value: DDNC.System.Private.CoreLib.DNObject): DNValidationException; overload;
    {class} function init(errorMessage: string; validatingAttribute: DNValidationAttribute; value: DDNC.System.Private.CoreLib.DNObject): DNValidationException; overload;
    {class} function init: DNValidationException; overload;
    {class} function init(message: string): DNValidationException; overload;
    {class} function init(message: string; innerException: DDNC.System.Private.CoreLib.DNException): DNValidationException; overload;

  end;

  [DNTypeName('System.ComponentModel.DataAnnotations.ValidationException')]
  DNValidationException = interface(DDNC.System.Private.CoreLib.DNException)
  ['{56955CC7-FA12-3A37-A67A-91FF8F8534AC}']
  { getters & setters } 

    function get_ValidationAttribute: DNValidationAttribute;
    function get_ValidationResult: DNValidationResult;
    function get_Value: DDNC.System.Private.CoreLib.DNObject;
    function get_Message: string;
    function get_Data: DDNC.System.Private.CoreLib.DNIDictionary;
    function get_InnerException: DDNC.System.Private.CoreLib.DNException;
    function get_TargetSite: DDNC.System.Private.CoreLib.DNMethodBase;
    function get_StackTrace: string;
    function get_HelpLink: string;
    procedure set_HelpLink(value: string);
    function get_Source: string;
    procedure set_Source(value: string);
    function get_HResult: Int32;

  { methods } 

    function GetBaseException: DDNC.System.Private.CoreLib.DNException;
    function ToString: string;
    procedure GetObjectData(info: DDNC.System.Private.CoreLib.DNSerializationInfo; context: DDNC.System.Private.CoreLib.DNStreamingContext);
    function GetType: DDNC.System.Private.CoreLib.DNType;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;

  { propertys } 

    property ValidationAttribute: DNValidationAttribute read get_ValidationAttribute;
    property ValidationResult: DNValidationResult read get_ValidationResult;
    property Value: DDNC.System.Private.CoreLib.DNObject read get_Value;
    property Message: string read get_Message;
    property Data: DDNC.System.Private.CoreLib.DNIDictionary read get_Data;
    property InnerException: DDNC.System.Private.CoreLib.DNException read get_InnerException;
    property TargetSite: DDNC.System.Private.CoreLib.DNMethodBase read get_TargetSite;
    property StackTrace: string read get_StackTrace;
    property HelpLink: string read get_HelpLink write set_HelpLink;
    property Source: string read get_Source write set_Source;
    property HResult: Int32 read get_HResult;
  end;

  TDNValidationException = class(TDNGenericImport<DNValidationExceptionClass, DNValidationException>) end;


implementation


initialization
  LoadAssemblyModule('System.ComponentModel.Annotations, Version=4.2.1.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a');

finalization

end.
