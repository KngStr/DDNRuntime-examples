//----------------------------------------------------------------------------
//  WindowsBase.dll: WindowsBase, Version=4.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35
//----------------------------------------------------------------------------
//  The code is automatically generated by the GenCodeNET tool.
//----------------------------------------------------------------------------
//  .NET Framework: 4.0
//----------------------------------------------------------------------------
//  UnitName: DDN.WindowsBase
//  Author: ying32
//----------------------------------------------------------------------------

unit DDN.WindowsBase;

{$IFDEF FPC}
  {$mode delphi}//{$H+}
  {$modeswitch advancedrecords}
  {$modeswitch prefixedattributes} // Custom attributes featureï¼Œfpc3.2.2+
{$ENDIF}

interface

uses
  DDN.Runtime,
  DDN.mscorlib,
  DDN.System,
  DDN.System.Xaml,
  DDN.System.Security;

type

{ enums }

  //-------------namespace: System.ComponentModel----------------
  ///<summary>Specifies where the placeholder for a new item appears in the collection.</summary>
  [DNTypeName('System.ComponentModel.NewItemPlaceholderPosition')]
  DNNewItemPlaceholderPosition = type Integer;
  DNNewItemPlaceholderPositionHelper = record helper for DNNewItemPlaceholderPosition
  public const
    ///<summary>The collection does not use a new item placeholder. The position of items that are added depends on the underlying collection.  Usually, they are added at the end of the collection.</summary>
    None = 0;
    ///<summary>The placeholder for a new item appears at the beginning of the collection.  New items are at the beginning of the collection, after the new item placeholder. </summary>
    AtBeginning = 1;
    ///<summary>The placeholder for a new item appears at the end of the collection. New items are added at the end of the collection, before the new item placeholder.</summary>
    AtEnd = 2;
  end;


  //-------------namespace: System.ComponentModel----------------
  ///<summary>Specifies which properties should be reported by type descriptors, specifically the <see cref="M:System.ComponentModel.TypeDescriptor.GetProperties(System.Object)" />
  ///  method. This enumeration is used to specify the value of the <see cref="P:System.ComponentModel.PropertyFilterAttribute.Filter" />
  ///  property.</summary>
  [DNTypeName('System.ComponentModel.PropertyFilterOptions')]
  DNPropertyFilterOptions = type Integer;
  DNPropertyFilterOptionsHelper = record helper for DNPropertyFilterOptions
  public const
    ///<summary>Return no properties</summary>
    None = 0;
    ///<summary>Return only those properties that are not valid given the current context of the object. See Remarks.</summary>
    Invalid = 1;
    ///<summary>Return only those properties that have local values currently set.</summary>
    SetValues = 2;
    ///<summary>Return only those properties whose local values are not set, or do not have properties set in an external expression store (such as binding or deferred resource).</summary>
    UnsetValues = 4;
    ///<summary>Return any property that is valid on the  object in the current scope. See Remarks.</summary>
    Valid = 8;
    ///<summary>Return all properties.</summary>
    All = 15;
  end;


  //-------------namespace: System.Diagnostics----------------
  ///<summary>Describes the level of detail to trace about a particular object.</summary>
  [DNTypeName('System.Diagnostics.PresentationTraceLevel')]
  DNPresentationTraceLevel = type Integer;
  DNPresentationTraceLevelHelper = record helper for DNPresentationTraceLevel
  public const
    ///<summary>Traces no available additional information.</summary>
    None = 0;
    ///<summary>Traces some additional information.</summary>
    Low = 1;
    ///<summary>Traces a medium amount of additional information.</summary>
    Medium = 2;
    ///<summary>Traces all additional information.</summary>
    High = 3;
  end;


  //-------------namespace: System.IO.Packaging----------------
  ///<summary>Specifies the location where the X.509 certificate that is used in signing is stored.</summary>
  [DNTypeName('System.IO.Packaging.CertificateEmbeddingOption')]
  DNCertificateEmbeddingOption = type Integer;
  DNCertificateEmbeddingOptionHelper = record helper for DNCertificateEmbeddingOption
  public const
    ///<summary>The certificate is embedded in its own <see cref="T:System.IO.Packaging.PackagePart" />
    ///  .</summary>
    InCertificatePart = 0;
    ///<summary>The certificate is embedded in the <see cref="P:System.IO.Packaging.PackageDigitalSignature.SignaturePart" />
    ///  that is created for the signature being added.</summary>
    InSignaturePart = 1;
    ///<summary>The certificate in not embedded in the package.</summary>
    NotEmbedded = 2;
  end;


  //-------------namespace: System.IO.Packaging----------------
  ///<summary>Specifies the compression level for content that is stored in a <see cref="T:System.IO.Packaging.PackagePart" />
  ///  . </summary>
  [DNTypeName('System.IO.Packaging.CompressionOption')]
  DNCompressionOption = type Integer;
  DNCompressionOptionHelper = record helper for DNCompressionOption
  public const
    ///<summary>Compression is optimized for a balance between size and performance. </summary>
    Normal = 0;
    ///<summary>Compression is optimized for size. </summary>
    Maximum = 1;
    ///<summary>Compression is optimized for performance. </summary>
    Fast = 2;
    ///<summary>Compression is optimized for high performance.</summary>
    SuperFast = 3;
    ///<summary>Compression is turned off. </summary>
    NotCompressed = -1;
  end;


  //-------------namespace: System.IO.Packaging----------------
  ///<summary>Specifies the encryption option for parts in a <see cref="T:System.IO.Packaging.Package" />
  ///  .</summary>
  [DNTypeName('System.IO.Packaging.EncryptionOption')]
  DNEncryptionOption = type Integer;
  DNEncryptionOptionHelper = record helper for DNEncryptionOption
  public const
    ///<summary>No encryption.</summary>
    None = 0;
    ///<summary>Encryption supported through rights management.</summary>
    RightsManagement = 1;
  end;


  //-------------namespace: System.IO.Packaging----------------
  ///<summary>Specifies the type of selection criteria that is used to match and return <see cref="T:System.IO.Packaging.PackageRelationship" />
  ///  selections through a <see cref="T:System.IO.Packaging.PackageRelationshipSelector" />
  ///  .   </summary>
  [DNTypeName('System.IO.Packaging.PackageRelationshipSelectorType')]
  DNPackageRelationshipSelectorType = type Integer;
  DNPackageRelationshipSelectorTypeHelper = record helper for DNPackageRelationshipSelectorType
  public const
    ///<summary><see cref="T:System.IO.Packaging.PackageRelationship" />
    ///  selections are by <see cref="P:System.IO.Packaging.PackageRelationship.Id" />
    ///  .</summary>
    Id = 0;
    ///<summary><see cref="T:System.IO.Packaging.PackageRelationship" />
    ///  selections are by <see cref="P:System.IO.Packaging.PackageRelationship.RelationshipType" />
    ///  .</summary>
    Type_ = 1;
  end;


  //-------------namespace: System.IO.Packaging----------------
  ///<summary>Specifies whether the target of a <see cref="T:System.IO.Packaging.PackageRelationship" />
  ///  is inside or outside the <see cref="T:System.IO.Packaging.Package" />
  ///  .</summary>
  [DNTypeName('System.IO.Packaging.TargetMode')]
  DNTargetMode = type Integer;
  DNTargetModeHelper = record helper for DNTargetMode
  public const
    ///<summary>The relationship references a part that is inside the package. </summary>
    Internal = 0;
    ///<summary>The relationship references a resource that is external to the package. </summary>
    External_ = 1;
  end;


  //-------------namespace: System.IO.Packaging----------------
  ///<summary>Specifies the result of a certificate or signature verification.</summary>
  [DNTypeName('System.IO.Packaging.VerifyResult')]
  DNVerifyResult = type Integer;
  DNVerifyResultHelper = record helper for DNVerifyResult
  public const
    ///<summary>The verification was successful.</summary>
    Success = 0;
    ///<summary>The signature is not valid.</summary>
    InvalidSignature = 1;
    ///<summary>The X.509 certificate is not available to verify the signature.</summary>
    CertificateRequired = 2;
    ///<summary>The X.509 certificate is not valid.</summary>
    InvalidCertificate = 3;
    ///<summary>A reference relationship to the signature was not found.</summary>
    ReferenceNotFound = 4;
    ///<summary>The specified package or part has no signature.</summary>
    NotSigned = 5;
  end;


  //-------------namespace: System.Security.Permissions----------------
  ///<summary>Specifies the permission level for audio.</summary>
  [DNTypeName('System.Security.Permissions.MediaPermissionAudio')]
  DNMediaPermissionAudio = type Integer;
  DNMediaPermissionAudioHelper = record helper for DNMediaPermissionAudio
  public const
    ///<summary>Permission that denies all audio playback.</summary>
    NoAudio = 0;
    ///<summary>Permission that only allows audio playback of files that are located at the application's site of origin.</summary>
    SiteOfOriginAudio = 1;
    ///<summary>Permission that allows safe, limited audio playback, which includes denying stream access to the image file.</summary>
    SafeAudio = 2;
    ///<summary>Permission that allows unrestricted audio playback.</summary>
    AllAudio = 3;
  end;


  //-------------namespace: System.Security.Permissions----------------
  ///<summary>Specifies the permission level for images.</summary>
  [DNTypeName('System.Security.Permissions.MediaPermissionImage')]
  DNMediaPermissionImage = type Integer;
  DNMediaPermissionImageHelper = record helper for DNMediaPermissionImage
  public const
    ///<summary>Permission that denies all images to be displayed.</summary>
    NoImage = 0;
    ///<summary>Permission that only allows display of images that are located at the application's site of origin.</summary>
    SiteOfOriginImage = 1;
    ///<summary>Permission that allows safe, limited image display, which includes denying stream access to the image file.</summary>
    SafeImage = 2;
    ///<summary>Permission that allows unrestricted image display.</summary>
    AllImage = 3;
  end;


  //-------------namespace: System.Security.Permissions----------------
  ///<summary>Specifies the permission level for video.</summary>
  [DNTypeName('System.Security.Permissions.MediaPermissionVideo')]
  DNMediaPermissionVideo = type Integer;
  DNMediaPermissionVideoHelper = record helper for DNMediaPermissionVideo
  public const
    ///<summary>Permission that denies all video playback.</summary>
    NoVideo = 0;
    ///<summary>Permission that only allows video playback of files that are located at the application's site of origin.</summary>
    SiteOfOriginVideo = 1;
    ///<summary>Permission that allows safe, limited video playback, which includes denying stream access to the image file.</summary>
    SafeVideo = 2;
    ///<summary>Permission that allows unrestricted video playback.</summary>
    AllVideo = 3;
  end;


  //-------------namespace: System.Security.Permissions----------------
  ///<summary>Specifies the permission level for a Web browser.</summary>
  [DNTypeName('System.Security.Permissions.WebBrowserPermissionLevel')]
  DNWebBrowserPermissionLevel = type Integer;
  DNWebBrowserPermissionLevelHelper = record helper for DNWebBrowserPermissionLevel
  public const
    ///<summary>A Web browser that cannot navigate frames to HTML.</summary>
    None = 0;
    ///<summary>A Web browser that can safely navigate frames to HTML but with several restrictions.</summary>
    Safe = 1;
    ///<summary>A Web browser that can navigate without restrictions.</summary>
    Unrestricted = 2;
  end;


  //-------------namespace: System.Security.RightsManagement----------------
  ///<summary>Specifies the method of rights management authentication.</summary>
  [DNTypeName('System.Security.RightsManagement.AuthenticationType')]
  DNAuthenticationType = type Integer;
  DNAuthenticationTypeHelper = record helper for DNAuthenticationType
  public const
    ///<summary>
    ///  Windows authentication in a corporate domain environment.</summary>
    Windows = 0;
    ///<summary>
    ///  Windows Live ID authentication.</summary>
    Passport = 1;
    ///<summary>Either Windows authentication or Windows Live ID authentication.</summary>
    WindowsPassport = 2;
    ///<summary>Implicit authentication to any requesting user.</summary>
    Internal = 3;
  end;


  //-------------namespace: System.Security.RightsManagement----------------
  ///<summary>Specifies rights that can be granted to users for accessing content in a rights managed document.</summary>
  [DNTypeName('System.Security.RightsManagement.ContentRight')]
  DNContentRight = type Integer;
  DNContentRightHelper = record helper for DNContentRight
  public const
    ///<summary>The user can view the protected content.</summary>
    View = 0;
    ///<summary>The user can edit and encrypt the protected content.</summary>
    Edit = 1;
    ///<summary>The user can print the protected content.</summary>
    Print = 2;
    ///<summary>The user can extract (copy and paste) the protected content.</summary>
    Extract = 3;
    ///<summary>The user can control programmed access to the protected content.</summary>
    ObjectModel = 4;
    ///<summary>The user is the content owner.  The owner can edit and encrypt the protected content, and decrypt the signed <see cref="T:System.Security.RightsManagement.PublishLicense" />
    ///  .</summary>
    Owner = 5;
    ///<summary>The user can decrypt and view the rights specified in the signed <see cref="T:System.Security.RightsManagement.PublishLicense" />
    ///  .</summary>
    ViewRightsData = 6;
    ///<summary>The user can forward the protected content to another user.</summary>
    Forward_ = 7;
    ///<summary>The user can reply to the sender of the protected content.</summary>
    Reply = 8;
    ///<summary>The user can "reply all" to recipients of the protected content.</summary>
    ReplyAll = 9;
    ///<summary>The user can digitally sign the protected content.</summary>
    Sign = 10;
    ///<summary>The user can edit the document that contains the protected content.</summary>
    DocumentEdit = 11;
    ///<summary>The user can export the protected content.</summary>
    Export_ = 12;
  end;


  //-------------namespace: System.Security.RightsManagement----------------
  ///<summary>Specifies error conditions that can occur when performing a rights management operation.</summary>
  [DNTypeName('System.Security.RightsManagement.RightsManagementFailureCode')]
  DNRightsManagementFailureCode = type Integer;
  DNRightsManagementFailureCodeHelper = record helper for DNRightsManagementFailureCode
  public const
    ///<summary>Operation has competed successfully.</summary>
    Success = 0;
    ///<summary>An operation is in violation of the rights management manifest policy.</summary>
    ManifestPolicyViolation = -2147183860;
    ///<summary>The license structure in one of the certificates is invalid.</summary>
    InvalidLicense = -2147168512;
    ///<summary>When creating a bound license, an issuance license, not an end-use license, was specified.</summary>
    InfoNotInLicense = -2147168511;
    ///<summary>Rights management signed digital certificate cannot be validated. (The signed certificate may have been tampered.)</summary>
    InvalidLicenseSignature = -2147168510;
    ///<summary>Encryption is not permitted. </summary>
    EncryptionNotPermitted = -2147168508;
    ///<summary>The current user does not have rights to access the protected content.</summary>
    RightNotGranted = -2147168507;
    ///<summary>The rights management version is incorrect.</summary>
    InvalidVersion = -2147168506;
    ///<summary>The specified encoding type is invalid. </summary>
    InvalidEncodingType = -2147168505;
    ///<summary>The numeric value specified is invalid.</summary>
    InvalidNumericalValue = -2147168504;
    ///<summary>The algorithm type specified is invalid.</summary>
    InvalidAlgorithmType = -2147168503;
    ///<summary>The <see cref="T:System.Security.RightsManagement.SecureEnvironment" />
    ///  cannot load.</summary>
    EnvironmentNotLoaded = -2147168502;
    ///<summary>The <see cref="T:System.Security.RightsManagement.SecureEnvironment" />
    ///  cannot load.</summary>
    EnvironmentCannotLoad = -2147168501;
    ///<summary>Too many <see cref="T:System.Security.RightsManagement.SecureEnvironment" />
    ///  instance have been created.</summary>
    TooManyLoadedEnvironments = -2147168500;
    ///<summary>An object type passed is incompatible with this operation.</summary>
    IncompatibleObjects = -2147168498;
    ///<summary>A library operation failed.</summary>
    LibraryFail = -2147168497;
    ///<summary>The specified principal cannot be enabled</summary>
    EnablingPrincipalFailure = -2147168496;
    ///<summary>Some information is missing.</summary>
    InfoNotPresent = -2147168495;
    ///<summary>An invalid constant was passed.</summary>
    BadGetInfoQuery = -2147168494;
    ///<summary>The key type specified in a key/value pair is not supported.</summary>
    KeyTypeUnsupported = -2147168493;
    ///<summary>A cryptographic operation that was requested is not supported. For example, passing an RMS encrypting object for decrypting purposes.</summary>
    CryptoOperationUnsupported = -2147168492;
    ///<summary>Clock rollback has been detected. Protected content cannot be accessed.</summary>
    ClockRollbackDetected = -2147168491;
    ///<summary>No instances of the requested attribute exist.</summary>
    QueryReportsNoResults = -2147168490;
    ///<summary>An unspecified error occurred.  Also thrown when an application runs in debug mode.</summary>
    UnexpectedException = -2147168489;
    ///<summary>The defined time period for the protected content has expired; access is no longer permitted.</summary>
    BindValidityTimeViolated = -2147168488;
    ///<summary>The rights management certificate chain is broken.</summary>
    BrokenCertChain = -2147168487;
    ///<summary>The current user does not have rights to access the protected content.</summary>
    BindPolicyViolation = -2147168485;
    ///<summary>The current user does not have rights to access the protected content.</summary>
    BindRevokedLicense = -2147168484;
    ///<summary>The current user does not have rights to access the protected content.</summary>
    BindRevokedIssuer = -2147168483;
    ///<summary>The current user does not have rights to access the protected content.</summary>
    BindRevokedPrincipal = -2147168482;
    ///<summary>The current user does not have rights to access the protected content.</summary>
    BindRevokedResource = -2147168481;
    ///<summary>Rights management services are not properly configured.</summary>
    BindRevokedModule = -2147168480;
    ///<summary>The specified resource is not contained in any WORK node of the license.</summary>
    BindContentNotInEndUseLicense = -2147168479;
    ///<summary>The access condition is not matched to the enabling principal that is handed into the bind.</summary>
    BindAccessPrincipalNotEnabling = -2147168478;
    ///<summary>The current user does not satisfy the conditions defined in the End Use License (EUL).</summary>
    BindAccessUnsatisfied = -2147168477;
    ///<summary>The enabling principal does not match the issued principal of the End Use License (EUL).</summary>
    BindIndicatedPrincipalMissing = -2147168476;
    ///<summary>The current machine is not defined within the rights managed group identity.</summary>
    BindMachineNotFoundInGroupIdentity = -2147168475;
    ///<summary>The specified library plug-in is not supported.</summary>
    LibraryUnsupportedPlugIn = -2147168474;
    ///<summary>The license requires that a new revocation list must be acquired.</summary>
    BindRevocationListStale = -2147168473;
    ///<summary>The current user does not have rights to access the protected content.</summary>
    BindNoApplicableRevocationList = -2147168472;
    ///<summary>Either the environment or the enabling principal handle is invalid.</summary>
    InvalidHandle = -2147168468;
    ///<summary>The defined time period for the protected content has expired; access is no longer permitted.</summary>
    BindIntervalTimeViolated = -2147168465;
    ///<summary>The specified rights group is not contained in the End Use License (EUL).</summary>
    BindNoSatisfiedRightsGroup = -2147168464;
    ///<summary>The End Use License (EUL) contains no WORK node.</summary>
    BindSpecifiedWorkMissing = -2147168463;
    ///<summary>No license or certificate exists at the specified index.</summary>
    NoMoreData = -2147168461;
    ///<summary>An End Use License (EUL) could not be acquired from the rights management server.</summary>
    LicenseAcquisitionFailed = -2147168460;
    ///<summary>The content ID from the license does not match the content ID the license storage session</summary>
    IdMismatch = -2147168459;
    ///<summary>The number of certificates has exceeded the maximum number allowed.</summary>
    TooManyCertificates = -2147168458;
    ///<summary>The protected content is corrupted.</summary>
    NoDistributionPointUrlFound = -2147168457;
    ///<summary>The requested operation is already in progress.</summary>
    AlreadyInProgress = -2147168456;
    ///<summary>A user name was not specified for the client session</summary>
    GroupIdentityNotSet = -2147168455;
    ///<summary>The specified license was not found.</summary>
    RecordNotFound = -2147168454;
    ///<summary>Rights management cannot connect to the URI specified for the license server.</summary>
    NoConnect = -2147168453;
    ///<summary>A required license is not available.</summary>
    NoLicense = -2147168452;
    ///<summary>The computer must be activated before the user can be activated.</summary>
    NeedsMachineActivation = -2147168451;
    ///<summary>The user is not activated, or no Rights Account Certificate (RAC) was submitted and none was found in the license store to match the license associated with this session.</summary>
    NeedsGroupIdentityActivation = -2147168450;
    ///<summary>License activation failed; rights management services are not properly configured.</summary>
    ActivationFailed = -2147168448;
    ///<summary>Asynchronous operation canceled, or a non-recoverable error has occurred.</summary>
    Aborted = -2147168447;
    ///<summary>The license server's maximum quota of End Use Licenses (EULs) has been reached.</summary>
    OutOfQuota = -2147168446;
    ///<summary>Possible authentication error (HTTP error 401) returned by an Internet request. Or, the current user does not have valid domain credentials in a silent user activation attempt. Or, the certification server in silent user activation is not in the local intranet or trusted sites zone.</summary>
    AuthenticationFailed = -2147168445;
    ///<summary>Rights management services are not properly configured.</summary>
    ServerError = -2147168444;
    ///<summary>An installation operation failed.</summary>
    InstallationFailed = -2147168443;
    ///<summary>The Hardware ID (HID) used in a machine activation attempt is incorrectly formatted. Rights management services are not properly configured. </summary>
    HidCorrupted = -2147168442;
    ///<summary>Rights management services are not properly configured.</summary>
    InvalidServerResponse = -2147168441;
    ///<summary>Rights management services are not properly configured.</summary>
    ServiceNotFound = -2147168440;
    ///<summary>If a request is made for computer activation or a rights account certificate, receiving <see cref="F:System.Security.RightsManagement.RightsManagementFailureCode.UseDefault" />
    ///  indicates that the application should pass <see langword="null" />
    ///  into the ActServInfo parameter</summary>
    UseDefault = -2147168439;
    ///<summary>Rights management services are not properly configured.</summary>
    ServerNotFound = -2147168438;
    ///<summary>RMS Server email address verification failed.</summary>
    InvalidEmail = -2147168437;
    ///<summary>The defined time period for the protected content has expired; access is no longer permitted.</summary>
    ValidityTimeViolation = -2147168436;
    ///<summary>Rights management services are not properly configured.</summary>
    OutdatedModule = -2147168435;
    ///<summary>The item requested to delete does not exist.</summary>
    NotSet = -2147168434;
    ///<summary>The specified metadata could net be set.</summary>
    MetadataNotSet = -2147168433;
    ///<summary>Certificate or license revocation information has not been set.</summary>
    RevocationInfoNotSet = -2147168432;
    ///<summary>The time information specified is invalid.</summary>
    InvalidTimeInfo = -2147168431;
    ///<summary>The requested right was not specified when the content was published with rights management.</summary>
    RightNotSet = -2147168430;
    ///<summary>The current user credentials are not valid for acquiring a license.</summary>
    LicenseBindingToWindowsIdentityFailed = -2147168429;
    ///<summary>The Rights Management Services template contains one or more errors.</summary>
    InvalidIssuanceLicenseTemplate = -2147168428;
    ///<summary>The key length specified in a key/value pair is invalid.  </summary>
    InvalidKeyLength = -2147168427;
    ///<summary>The authorized time period defined in the issuance license template has expired; access is no longer permitted.</summary>
    ExpiredOfficialIssuanceLicenseTemplate = -2147168425;
    ///<summary>Rights management services are not properly configured.</summary>
    InvalidClientLicensorCertificate = -2147168424;
    ///<summary>The Hardware ID (HID) used in a machine activation attempt is invalid. Rights management services are not properly configured.</summary>
    HidInvalid = -2147168423;
    ///<summary>The user's email address cannot be verified.</summary>
    EmailNotVerified = -2147168422;
    ///<summary>Rights management services are not properly configured.</summary>
    ServiceMoved = -2147168421;
    ///<summary>Rights management services are not properly configured.</summary>
    ServiceGone = -2147168420;
    ///<summary>The current user was not found in the Active Directory (AD) for certification under Windows authentication.</summary>
    AdEntryNotFound = -2147168419;
    ///<summary>Rights managed content is corrupted.</summary>
    NotAChain = -2147168418;
    ///<summary>The Rights Management server does not allow temporary certification of the current user.</summary>
    RequestDenied = -2147168417;
    ///<summary>Cannot open or publish content with restricted permissions because a debugger has been detected. </summary>
    DebuggerDetected = -2147168416;
    ///<summary>Rights management services are not properly configured.</summary>
    InvalidLockboxType = -2147168400;
    ///<summary>Rights management services are not properly configured.</summary>
    InvalidLockboxPath = -2147168399;
    ///<summary>The specified registry path is invalid.</summary>
    InvalidRegistryPath = -2147168398;
    ///<summary>Rights management services are not properly configured.</summary>
    NoAesCryptoProvider = -2147168397;
    ///<summary>The option specified has already been set. </summary>
    GlobalOptionAlreadySet = -2147168396;
    ///<summary>The document does not contain an Owner License.</summary>
    OwnerLicenseNotFound = -2147168395;
  end;


  //-------------namespace: System.Security.RightsManagement----------------
  ///<summary>Specifies the type of user Rights Account Certificate to request for rights management activation.</summary>
  [DNTypeName('System.Security.RightsManagement.UserActivationMode')]
  DNUserActivationMode = type Integer;
  DNUserActivationModeHelper = record helper for DNUserActivationMode
  public const
    ///<summary>A permanent Rights Account Certificate.</summary>
    Permanent = 0;
    ///<summary>A temporary Rights Account Certificate.</summary>
    Temporary = 1;
  end;


  //-------------namespace: System.Windows----------------
  ///<summary>Provides a set of values that describes how the dispatcher responds to failures that are encountered while requesting processing.  </summary>
  [DNTypeName('System.Windows.BaseCompatibilityPreferences+HandleDispatcherRequestProcessingFailureOptions')]
  DNBaseCompatibilityPreferences_HandleDispatcherRequestProcessingFailureOptions = type Integer;
  DNBaseCompatibilityPreferences_HandleDispatcherRequestProcessingFailureOptionsHelper = record helper for DNBaseCompatibilityPreferences_HandleDispatcherRequestProcessingFailureOptions
  public const
    ///<summary>Continue after the failure. This is the default value. It defines the behavior of the Windows Presentation Foundation dispatcher prior to the .NET Framework 4.7.1. The dispatcher may come unresponsive when this option is selected.</summary>
    Continue_ = 0;
    ///<summary>Throw an exception.This option immediately brings the problem to the application developer's attention. </summary>
    Throw = 1;
    ///<summary>Reset the dispatcher's state to try another equest the next time one is needed. While this option can sometimes "repair" unresponsiveness, it cannot honor the usual timing of processing, which can be crucial. Selecting this option can lead to unexpected behavior. </summary>
    Reset = 2;
  end;


  //-------------namespace: System.Windows.Input----------------
  ///<summary>Specifies the direction within a user interface (UI) in which a desired focus change request is attempted. The direction is either based on tab order or by relative direction in layout.</summary>
  [DNTypeName('System.Windows.Input.FocusNavigationDirection')]
  DNFocusNavigationDirection = type Integer;
  DNFocusNavigationDirectionHelper = record helper for DNFocusNavigationDirection
  public const
    ///<summary>Move focus to the next focusable element in tab order. Not supported for <see cref="M:System.Windows.UIElement.PredictFocus(System.Windows.Input.FocusNavigationDirection)" />
    ///  .</summary>
    Next = 0;
    ///<summary>Move focus to the previous focusable element in tab order. Not supported for <see cref="M:System.Windows.UIElement.PredictFocus(System.Windows.Input.FocusNavigationDirection)" />
    ///  .</summary>
    Previous = 1;
    ///<summary>Move focus to the first focusable element in tab order. Not supported for <see cref="M:System.Windows.UIElement.PredictFocus(System.Windows.Input.FocusNavigationDirection)" />
    ///  .</summary>
    First = 2;
    ///<summary>Move focus to the last focusable element in tab order. Not supported for <see cref="M:System.Windows.UIElement.PredictFocus(System.Windows.Input.FocusNavigationDirection)" />
    ///  .</summary>
    Last = 3;
    ///<summary>Move focus to another focusable element to the left of the currently focused element.</summary>
    Left = 4;
    ///<summary>Move focus to another focusable element to the right of the currently focused element.</summary>
    Right = 5;
    ///<summary>Move focus to another focusable element upwards from the currently focused element.</summary>
    Up = 6;
    ///<summary>Move focus to another focusable element downwards from the currently focused element.</summary>
    Down = 7;
  end;


  //-------------namespace: System.Windows.Input----------------
  ///<summary>Specifies the possible key values on a keyboard. </summary>
  [DNTypeName('System.Windows.Input.Key')]
  DNKey = type Integer;
  DNKeyHelper = record helper for DNKey
  public const
    ///<summary>No key pressed. </summary>
    None = 0;
    ///<summary>The Cancel key. </summary>
    Cancel = 1;
    ///<summary>The Backspace key. </summary>
    Back = 2;
    ///<summary>The Tab key. </summary>
    Tab = 3;
    ///<summary>The Linefeed key. </summary>
    LineFeed = 4;
    ///<summary>The Clear key. </summary>
    Clear = 5;
    ///<summary>The Return key. </summary>
    Return = 6;
    ///<summary>The Enter key. </summary>
    Enter = 6;
    ///<summary>The Pause key. </summary>
    Pause = 7;
    ///<summary>The Caps Lock key. </summary>
    Capital = 8;
    ///<summary>The Caps Lock key. </summary>
    CapsLock = 8;
    ///<summary>The IME Kana mode key. </summary>
    KanaMode = 9;
    ///<summary>The IME Hangul mode key. </summary>
    HangulMode = 9;
    ///<summary>The IME Junja mode key. </summary>
    JunjaMode = 10;
    ///<summary>The IME Final mode key. </summary>
    FinalMode = 11;
    ///<summary>The IME Hanja mode key. </summary>
    HanjaMode = 12;
    ///<summary>The IME Kanji mode key. </summary>
    KanjiMode = 12;
    ///<summary>The ESC key. </summary>
    Escape = 13;
    ///<summary>The IME Convert key. </summary>
    ImeConvert = 14;
    ///<summary>The IME NonConvert key. </summary>
    ImeNonConvert = 15;
    ///<summary>The IME Accept key. </summary>
    ImeAccept = 16;
    ///<summary>The IME Mode change request. </summary>
    ImeModeChange = 17;
    ///<summary>The Spacebar key. </summary>
    Space = 18;
    ///<summary>The Page Up key. </summary>
    Prior = 19;
    ///<summary>The Page Up key. </summary>
    PageUp = 19;
    ///<summary>The Page Down key. </summary>
    Next = 20;
    ///<summary>The Page Down key. </summary>
    PageDown = 20;
    ///<summary>The End key. </summary>
    End_ = 21;
    ///<summary>The Home key. </summary>
    Home = 22;
    ///<summary>The Left Arrow key. </summary>
    Left = 23;
    ///<summary>The Up Arrow key. </summary>
    Up = 24;
    ///<summary>The Right Arrow key. </summary>
    Right = 25;
    ///<summary>The Down Arrow key. </summary>
    Down = 26;
    ///<summary>The Select key. </summary>
    Select = 27;
    ///<summary>The Print key. </summary>
    Print = 28;
    ///<summary>The Execute key. </summary>
    Execute = 29;
    ///<summary>The Print Screen key. </summary>
    Snapshot = 30;
    ///<summary>The Print Screen key. </summary>
    PrintScreen = 30;
    ///<summary>The Insert key. </summary>
    Insert = 31;
    ///<summary>The Delete key. </summary>
    Delete = 32;
    ///<summary>The Help key. </summary>
    Help = 33;
    ///<summary>The 0 (zero) key. </summary>
    D0 = 34;
    ///<summary>The 1 (one) key. </summary>
    D1 = 35;
    ///<summary>The 2 key. </summary>
    D2 = 36;
    ///<summary>The 3 key. </summary>
    D3 = 37;
    ///<summary>The 4 key. </summary>
    D4 = 38;
    ///<summary>The 5 key. </summary>
    D5 = 39;
    ///<summary>The 6 key. </summary>
    D6 = 40;
    ///<summary>The 7 key. </summary>
    D7 = 41;
    ///<summary>The 8 key. </summary>
    D8 = 42;
    ///<summary>The 9 key. </summary>
    D9 = 43;
    ///<summary>The A key. </summary>
    A = 44;
    ///<summary>The B key. </summary>
    B = 45;
    ///<summary>The C key. </summary>
    C = 46;
    ///<summary>The D key. </summary>
    D = 47;
    ///<summary>The E key. </summary>
    E = 48;
    ///<summary>The F key. </summary>
    F = 49;
    ///<summary>The G key. </summary>
    G = 50;
    ///<summary>The H key. </summary>
    H = 51;
    ///<summary>The I key. </summary>
    I = 52;
    ///<summary>The J key. </summary>
    J = 53;
    ///<summary>The K key. </summary>
    K = 54;
    ///<summary>The L key. </summary>
    L = 55;
    ///<summary>The M key. </summary>
    M = 56;
    ///<summary>The N key. </summary>
    N = 57;
    ///<summary>The O key. </summary>
    O = 58;
    ///<summary>The P key. </summary>
    P = 59;
    ///<summary>The Q key. </summary>
    Q = 60;
    ///<summary>The R key. </summary>
    R = 61;
    ///<summary>The S key. </summary>
    S = 62;
    ///<summary>The T key. </summary>
    T = 63;
    ///<summary>The U key. </summary>
    U = 64;
    ///<summary>The V key. </summary>
    V = 65;
    ///<summary>The W key. </summary>
    W = 66;
    ///<summary>The X key. </summary>
    X = 67;
    ///<summary>The Y key. </summary>
    Y = 68;
    ///<summary>The Z key. </summary>
    Z = 69;
    ///<summary>The left Windows logo key (Microsoft Natural Keyboard). </summary>
    LWin = 70;
    ///<summary>The right Windows logo key (Microsoft Natural Keyboard). </summary>
    RWin = 71;
    ///<summary>The Application key (Microsoft Natural Keyboard). </summary>
    Apps = 72;
    ///<summary>The Computer Sleep key. </summary>
    Sleep = 73;
    ///<summary>The 0 key on the numeric keypad. </summary>
    NumPad0 = 74;
    ///<summary>The 1 key on the numeric keypad. </summary>
    NumPad1 = 75;
    ///<summary>The 2 key on the numeric keypad. </summary>
    NumPad2 = 76;
    ///<summary>The 3 key on the numeric keypad. </summary>
    NumPad3 = 77;
    ///<summary>The 4 key on the numeric keypad. </summary>
    NumPad4 = 78;
    ///<summary>The 5 key on the numeric keypad. </summary>
    NumPad5 = 79;
    ///<summary>The 6 key on the numeric keypad. </summary>
    NumPad6 = 80;
    ///<summary>The 7 key on the numeric keypad. </summary>
    NumPad7 = 81;
    ///<summary>The 8 key on the numeric keypad. </summary>
    NumPad8 = 82;
    ///<summary>The 9 key on the numeric keypad. </summary>
    NumPad9 = 83;
    ///<summary>The Multiply key. </summary>
    Multiply = 84;
    ///<summary>The Add key. </summary>
    Add = 85;
    ///<summary>The Separator key. </summary>
    Separator = 86;
    ///<summary>The Subtract key. </summary>
    Subtract = 87;
    ///<summary>The Decimal key. </summary>
    Decimal = 88;
    ///<summary>The Divide key. </summary>
    Divide = 89;
    ///<summary>The F1 key. </summary>
    F1 = 90;
    ///<summary>The F2 key. </summary>
    F2 = 91;
    ///<summary>The F3 key. </summary>
    F3 = 92;
    ///<summary>The F4 key. </summary>
    F4 = 93;
    ///<summary>The F5 key. </summary>
    F5 = 94;
    ///<summary>The F6 key. </summary>
    F6 = 95;
    ///<summary>The F7 key. </summary>
    F7 = 96;
    ///<summary>The F8 key. </summary>
    F8 = 97;
    ///<summary>The F9 key. </summary>
    F9 = 98;
    ///<summary>The F10 key. </summary>
    F10 = 99;
    ///<summary>The F11 key. </summary>
    F11 = 100;
    ///<summary>The F12 key. </summary>
    F12 = 101;
    ///<summary>The F13 key. </summary>
    F13 = 102;
    ///<summary>The F14 key. </summary>
    F14 = 103;
    ///<summary>The F15 key. </summary>
    F15 = 104;
    ///<summary>The F16 key. </summary>
    F16 = 105;
    ///<summary>The F17 key. </summary>
    F17 = 106;
    ///<summary>The F18 key. </summary>
    F18 = 107;
    ///<summary>The F19 key. </summary>
    F19 = 108;
    ///<summary>The F20 key. </summary>
    F20 = 109;
    ///<summary>The F21 key. </summary>
    F21 = 110;
    ///<summary>The F22 key. </summary>
    F22 = 111;
    ///<summary>The F23 key. </summary>
    F23 = 112;
    ///<summary>The F24 key. </summary>
    F24 = 113;
    ///<summary>The Num Lock key. </summary>
    NumLock = 114;
    ///<summary>The Scroll Lock key. </summary>
    Scroll = 115;
    ///<summary>The left Shift key. </summary>
    LeftShift = 116;
    ///<summary>The right Shift key. </summary>
    RightShift = 117;
    ///<summary>The left CTRL key. </summary>
    LeftCtrl = 118;
    ///<summary>The right CTRL key. </summary>
    RightCtrl = 119;
    ///<summary>The left ALT key. </summary>
    LeftAlt = 120;
    ///<summary>The right ALT key. </summary>
    RightAlt = 121;
    ///<summary>The Browser Back key. </summary>
    BrowserBack = 122;
    ///<summary>The Browser Forward key. </summary>
    BrowserForward = 123;
    ///<summary>The Browser Refresh key. </summary>
    BrowserRefresh = 124;
    ///<summary>The Browser Stop key. </summary>
    BrowserStop = 125;
    ///<summary>The Browser Search key. </summary>
    BrowserSearch = 126;
    ///<summary>The Browser Favorites key. </summary>
    BrowserFavorites = 127;
    ///<summary>The Browser Home key. </summary>
    BrowserHome = 128;
    ///<summary>The Volume Mute key. </summary>
    VolumeMute = 129;
    ///<summary>The Volume Down key. </summary>
    VolumeDown = 130;
    ///<summary>The Volume Up key. </summary>
    VolumeUp = 131;
    ///<summary>The Media Next Track key. </summary>
    MediaNextTrack = 132;
    ///<summary>The Media Previous Track key. </summary>
    MediaPreviousTrack = 133;
    ///<summary>The Media Stop key. </summary>
    MediaStop = 134;
    ///<summary>The Media Play Pause key. </summary>
    MediaPlayPause = 135;
    ///<summary>The Launch Mail key. </summary>
    LaunchMail = 136;
    ///<summary>The Select Media key. </summary>
    SelectMedia = 137;
    ///<summary>The Launch Application1 key. </summary>
    LaunchApplication1 = 138;
    ///<summary>The Launch Application2 key. </summary>
    LaunchApplication2 = 139;
    ///<summary>The OEM 1 key. </summary>
    Oem1 = 140;
    ///<summary>The OEM Semicolon key. </summary>
    OemSemicolon = 140;
    ///<summary>The OEM Addition key. </summary>
    OemPlus = 141;
    ///<summary>The OEM Comma key. </summary>
    OemComma = 142;
    ///<summary>The OEM Minus key. </summary>
    OemMinus = 143;
    ///<summary>The OEM Period key. </summary>
    OemPeriod = 144;
    ///<summary>The OEM 2 key. </summary>
    Oem2 = 145;
    ///<summary>The OEM Question key. </summary>
    OemQuestion = 145;
    ///<summary>The OEM 3 key. </summary>
    Oem3 = 146;
    ///<summary>The OEM Tilde key. </summary>
    OemTilde = 146;
    ///<summary>The ABNT_C1 (Brazilian) key. </summary>
    AbntC1 = 147;
    ///<summary>The ABNT_C2 (Brazilian) key. </summary>
    AbntC2 = 148;
    ///<summary>The OEM 4 key. </summary>
    Oem4 = 149;
    ///<summary>The OEM Open Brackets key. </summary>
    OemOpenBrackets = 149;
    ///<summary>The OEM 5 key. </summary>
    Oem5 = 150;
    ///<summary>The OEM Pipe key. </summary>
    OemPipe = 150;
    ///<summary>The OEM 6 key. </summary>
    Oem6 = 151;
    ///<summary>The OEM Close Brackets key. </summary>
    OemCloseBrackets = 151;
    ///<summary>The OEM 7 key. </summary>
    Oem7 = 152;
    ///<summary>The OEM Quotes key. </summary>
    OemQuotes = 152;
    ///<summary>The OEM 8 key. </summary>
    Oem8 = 153;
    ///<summary>The OEM 102 key. </summary>
    Oem102 = 154;
    ///<summary>The OEM Backslash key. </summary>
    OemBackslash = 154;
    ///<summary>A special key masking the real key being processed by an IME. </summary>
    ImeProcessed = 155;
    ///<summary>A special key masking the real key being processed as a system key. </summary>
    System = 156;
    ///<summary>The OEM ATTN key. </summary>
    OemAttn = 157;
    ///<summary>The DBE_ALPHANUMERIC key. </summary>
    DbeAlphanumeric = 157;
    ///<summary>The OEM FINISH key. </summary>
    OemFinish = 158;
    ///<summary>The DBE_KATAKANA key. </summary>
    DbeKatakana = 158;
    ///<summary>The OEM COPY key. </summary>
    OemCopy = 159;
    ///<summary>The DBE_HIRAGANA key. </summary>
    DbeHiragana = 159;
    ///<summary>The OEM AUTO key. </summary>
    OemAuto = 160;
    ///<summary>The DBE_SBCSCHAR key. </summary>
    DbeSbcsChar = 160;
    ///<summary>The OEM ENLW key. </summary>
    OemEnlw = 161;
    ///<summary>The DBE_DBCSCHAR key. </summary>
    DbeDbcsChar = 161;
    ///<summary>The OEM BACKTAB key. </summary>
    OemBackTab = 162;
    ///<summary>The DBE_ROMAN key. </summary>
    DbeRoman = 162;
    ///<summary>The ATTN key. </summary>
    Attn = 163;
    ///<summary>The DBE_NOROMAN key. </summary>
    DbeNoRoman = 163;
    ///<summary>The CRSEL key. </summary>
    CrSel = 164;
    ///<summary>The DBE_ENTERWORDREGISTERMODE key. </summary>
    DbeEnterWordRegisterMode = 164;
    ///<summary>The EXSEL key. </summary>
    ExSel = 165;
    ///<summary>The DBE_ENTERIMECONFIGMODE key. </summary>
    DbeEnterImeConfigureMode = 165;
    ///<summary>The ERASE EOF key. </summary>
    EraseEof = 166;
    ///<summary>The DBE_FLUSHSTRING key. </summary>
    DbeFlushString = 166;
    ///<summary>The PLAY key. </summary>
    Play = 167;
    ///<summary>The DBE_CODEINPUT key. </summary>
    DbeCodeInput = 167;
    ///<summary>The ZOOM key. </summary>
    Zoom = 168;
    ///<summary>The DBE_NOCODEINPUT key. </summary>
    DbeNoCodeInput = 168;
    ///<summary>A constant reserved for future use. </summary>
    NoName = 169;
    ///<summary>The DBE_DETERMINESTRING key. </summary>
    DbeDetermineString = 169;
    ///<summary>The PA1 key. </summary>
    Pa1 = 170;
    ///<summary>The DBE_ENTERDLGCONVERSIONMODE key. </summary>
    DbeEnterDialogConversionMode = 170;
    ///<summary>The OEM Clear key. </summary>
    OemClear = 171;
    ///<summary>The key is used with another key to create a single combined character.</summary>
    DeadCharProcessed = 172;
  end;


  //-------------namespace: System.Windows.Input----------------
  ///<summary>Specifies the set of modifier keys. </summary>
  [DNTypeName('System.Windows.Input.ModifierKeys')]
  DNModifierKeys = type Integer;
  DNModifierKeysHelper = record helper for DNModifierKeys
  public const
    ///<summary>No modifiers are pressed. </summary>
    None = 0;
    ///<summary>The ALT key. </summary>
    Alt = 1;
    ///<summary>The CTRL key. </summary>
    Control = 2;
    ///<summary>The SHIFT key. </summary>
    Shift = 4;
    ///<summary>The Windows logo key.</summary>
    Windows = 8;
  end;


  //-------------namespace: System.Windows.Markup----------------
  ///<summary>Specifies how a property is to be serialized.</summary>
  [DNTypeName('System.Windows.Markup.DesignerSerializationOptions')]
  DNDesignerSerializationOptions = type Integer;
  DNDesignerSerializationOptionsHelper = record helper for DNDesignerSerializationOptions
  public const
    ///<summary>The property should be serialized as an attribute.</summary>
    SerializeAsAttribute = 1;
  end;


  //-------------namespace: System.Windows.Threading----------------
  ///<summary>Describes the possible values for the status of a <see cref="T:System.Windows.Threading.DispatcherOperation" />
  ///  . </summary>
  [DNTypeName('System.Windows.Threading.DispatcherOperationStatus')]
  DNDispatcherOperationStatus = type Integer;
  DNDispatcherOperationStatusHelper = record helper for DNDispatcherOperationStatus
  public const
    ///<summary>The operation is pending and is still in the <see cref="T:System.Windows.Threading.Dispatcher" />
    ///  queue.</summary>
    Pending = 0;
    ///<summary>The operation has aborted. </summary>
    Aborted = 1;
    ///<summary>The operation is completed. </summary>
    Completed = 2;
    ///<summary>The operation started executing, but has not completed. </summary>
    Executing = 3;
  end;


  //-------------namespace: System.Windows.Threading----------------
  ///<summary>Describes the priorities at which operations can be invoked by way of the <see cref="T:System.Windows.Threading.Dispatcher" />
  ///  . </summary>
  [DNTypeName('System.Windows.Threading.DispatcherPriority')]
  DNDispatcherPriority = type Integer;
  DNDispatcherPriorityHelper = record helper for DNDispatcherPriority
  public const
    ///<summary>The enumeration value is 0.  Operations are not processed.</summary>
    Inactive = 0;
    ///<summary>The enumeration value is 1.  Operations are processed when the system is idle.</summary>
    SystemIdle = 1;
    ///<summary>The enumeration value is 2.  Operations are processed when the application is idle. </summary>
    ApplicationIdle = 2;
    ///<summary>The enumeration value is 3.  Operations are processed after background operations have completed.</summary>
    ContextIdle = 3;
    ///<summary>The enumeration value is 4.  Operations are processed after all other non-idle operations are completed.</summary>
    Background = 4;
    ///<summary>The enumeration value is 5.  Operations are processed at the same priority as input.</summary>
    Input = 5;
    ///<summary>The enumeration value is 6.  Operations are processed when layout and render has finished but just before items at input priority are serviced. Specifically this is used when raising the Loaded event.</summary>
    Loaded = 6;
    ///<summary>The enumeration value is 7.  Operations processed at the same priority as rendering.</summary>
    Render = 7;
    ///<summary>The enumeration value is 8.  Operations are processed at the same priority as data binding.</summary>
    DataBind = 8;
    ///<summary>The enumeration value is 9.  Operations are processed at normal priority.  This is the typical application priority.</summary>
    Normal = 9;
    ///<summary>The enumeration value is 10.  Operations are processed before other asynchronous operations.  This is the highest priority. </summary>
    Send = 10;
    ///<summary>The enumeration value is -1.  This is an invalid priority.</summary>
    Invalid = -1;
  end;




type


{ declares }

  DNICollectionView = interface; // type: System.ComponentModel.ICollectionView, namespace: System.ComponentModel
  DNICollectionViewFactory = interface; // type: System.ComponentModel.ICollectionViewFactory, namespace: System.ComponentModel
  DNICollectionViewLiveShaping = interface; // type: System.ComponentModel.ICollectionViewLiveShaping, namespace: System.ComponentModel
  DNIEditableCollectionView = interface; // type: System.ComponentModel.IEditableCollectionView, namespace: System.ComponentModel
  DNIEditableCollectionViewAddNewItem = interface; // type: System.ComponentModel.IEditableCollectionViewAddNewItem, namespace: System.ComponentModel
  DNIItemProperties = interface; // type: System.ComponentModel.IItemProperties, namespace: System.ComponentModel
  DNIKeyboardInputSink = interface; // type: System.Windows.Interop.IKeyboardInputSink, namespace: System.Windows.Interop
  DNIKeyboardInputSite = interface; // type: System.Windows.Interop.IKeyboardInputSite, namespace: System.Windows.Interop
  DNIWeakEventListener = interface; // type: System.Windows.IWeakEventListener, namespace: System.Windows
  DNIReceiveMarkupExtension = interface; // type: System.Windows.Markup.IReceiveMarkupExtension, namespace: System.Windows.Markup
  DNPropertyFilterAttribute = interface; // type: System.ComponentModel.PropertyFilterAttribute, namespace: System.ComponentModel
  DNMediaPermissionAttribute = interface; // type: System.Security.Permissions.MediaPermissionAttribute, namespace: System.Security.Permissions
  DNWebBrowserPermissionAttribute = interface; // type: System.Security.Permissions.WebBrowserPermissionAttribute, namespace: System.Security.Permissions
  DNAttachedPropertyBrowsableAttribute = interface; // type: System.Windows.AttachedPropertyBrowsableAttribute, namespace: System.Windows
  DNAttachedPropertyBrowsableForTypeAttribute = interface; // type: System.Windows.AttachedPropertyBrowsableForTypeAttribute, namespace: System.Windows
  DNAttachedPropertyBrowsableWhenAttributePresentAttribute = interface; // type: System.Windows.AttachedPropertyBrowsableWhenAttributePresentAttribute, namespace: System.Windows
  DNDesignerSerializationOptionsAttribute = interface; // type: System.Windows.Markup.DesignerSerializationOptionsAttribute, namespace: System.Windows.Markup
  DNDisableDpiAwarenessAttribute = interface; // type: System.Windows.Media.DisableDpiAwarenessAttribute, namespace: System.Windows.Media
  DNSortDescriptionCollection = interface; // type: System.ComponentModel.SortDescriptionCollection, namespace: System.ComponentModel
  DNGroupDescription = interface; // type: System.ComponentModel.GroupDescription, namespace: System.ComponentModel
  DNItemPropertyInfo = interface; // type: System.ComponentModel.ItemPropertyInfo, namespace: System.ComponentModel
  DNDependencyPropertyDescriptor = interface; // type: System.ComponentModel.DependencyPropertyDescriptor, namespace: System.ComponentModel
  DNExpressionConverter = interface; // type: System.Windows.ExpressionConverter, namespace: System.Windows
  DNKeyConverter = interface; // type: System.Windows.Input.KeyConverter, namespace: System.Windows.Input
  DNModifierKeysConverter = interface; // type: System.Windows.Input.ModifierKeysConverter, namespace: System.Windows.Input
  DNInt32RectConverter = interface; // type: System.Windows.Int32RectConverter, namespace: System.Windows
  DNMatrixConverter = interface; // type: System.Windows.Media.MatrixConverter, namespace: System.Windows.Media
  DNPointConverter = interface; // type: System.Windows.PointConverter, namespace: System.Windows
  DNRectConverter = interface; // type: System.Windows.RectConverter, namespace: System.Windows
  DNSizeConverter = interface; // type: System.Windows.SizeConverter, namespace: System.Windows
  DNVectorConverter = interface; // type: System.Windows.VectorConverter, namespace: System.Windows
  DNPresentationTraceSources = interface; // type: System.Diagnostics.PresentationTraceSources, namespace: System.Diagnostics
  DNCurrentChangingEventArgs = interface; // type: System.ComponentModel.CurrentChangingEventArgs, namespace: System.ComponentModel
  DNSignatureVerificationEventArgs = interface; // type: System.IO.Packaging.SignatureVerificationEventArgs, namespace: System.IO.Packaging
  DNDispatcherEventArgs = interface; // type: System.Windows.Threading.DispatcherEventArgs, namespace: System.Windows.Threading
  DNDispatcherUnhandledExceptionEventArgs = interface; // type: System.Windows.Threading.DispatcherUnhandledExceptionEventArgs, namespace: System.Windows.Threading
  DNDispatcherUnhandledExceptionFilterEventArgs = interface; // type: System.Windows.Threading.DispatcherUnhandledExceptionFilterEventArgs, namespace: System.Windows.Threading
  DNDispatcherHookEventArgs = interface; // type: System.Windows.Threading.DispatcherHookEventArgs, namespace: System.Windows.Threading
  DNRightsManagementException = interface; // type: System.Security.RightsManagement.RightsManagementException, namespace: System.Security.RightsManagement
  DNFileFormatException = interface; // type: System.IO.FileFormatException, namespace: System.IO
  DNEncryptedPackageEnvelope = interface; // type: System.IO.Packaging.EncryptedPackageEnvelope, namespace: System.IO.Packaging
  DNPackage = interface; // type: System.IO.Packaging.Package, namespace: System.IO.Packaging
  DNZipPackage = interface; // type: System.IO.Packaging.ZipPackage, namespace: System.IO.Packaging
  DNPackageDigitalSignature = interface; // type: System.IO.Packaging.PackageDigitalSignature, namespace: System.IO.Packaging
  DNPackageDigitalSignatureManager = interface; // type: System.IO.Packaging.PackageDigitalSignatureManager, namespace: System.IO.Packaging
  DNPackagePart = interface; // type: System.IO.Packaging.PackagePart, namespace: System.IO.Packaging
  DNZipPackagePart = interface; // type: System.IO.Packaging.ZipPackagePart, namespace: System.IO.Packaging
  DNPackagePartCollection = interface; // type: System.IO.Packaging.PackagePartCollection, namespace: System.IO.Packaging
  DNPackageProperties = interface; // type: System.IO.Packaging.PackageProperties, namespace: System.IO.Packaging
  DNPackageRelationship = interface; // type: System.IO.Packaging.PackageRelationship, namespace: System.IO.Packaging
  DNPackageRelationshipCollection = interface; // type: System.IO.Packaging.PackageRelationshipCollection, namespace: System.IO.Packaging
  DNPackageRelationshipSelector = interface; // type: System.IO.Packaging.PackageRelationshipSelector, namespace: System.IO.Packaging
  DNPackUriHelper = interface; // type: System.IO.Packaging.PackUriHelper, namespace: System.IO.Packaging
  DNRightsManagementInformation = interface; // type: System.IO.Packaging.RightsManagementInformation, namespace: System.IO.Packaging
  DNStorageInfo = interface; // type: System.IO.Packaging.StorageInfo, namespace: System.IO.Packaging
  DNStreamInfo = interface; // type: System.IO.Packaging.StreamInfo, namespace: System.IO.Packaging
  DNMediaPermission = interface; // type: System.Security.Permissions.MediaPermission, namespace: System.Security.Permissions
  DNWebBrowserPermission = interface; // type: System.Security.Permissions.WebBrowserPermission, namespace: System.Security.Permissions
  DNContentGrant = interface; // type: System.Security.RightsManagement.ContentGrant, namespace: System.Security.RightsManagement
  DNContentUser = interface; // type: System.Security.RightsManagement.ContentUser, namespace: System.Security.RightsManagement
  DNCryptoProvider = interface; // type: System.Security.RightsManagement.CryptoProvider, namespace: System.Security.RightsManagement
  DNLocalizedNameDescriptionPair = interface; // type: System.Security.RightsManagement.LocalizedNameDescriptionPair, namespace: System.Security.RightsManagement
  DNPublishLicense = interface; // type: System.Security.RightsManagement.PublishLicense, namespace: System.Security.RightsManagement
  DNSecureEnvironment = interface; // type: System.Security.RightsManagement.SecureEnvironment, namespace: System.Security.RightsManagement
  DNUnsignedPublishLicense = interface; // type: System.Security.RightsManagement.UnsignedPublishLicense, namespace: System.Security.RightsManagement
  DNUseLicense = interface; // type: System.Security.RightsManagement.UseLicense, namespace: System.Security.RightsManagement
  DNDispatcherSynchronizationContext = interface; // type: System.Windows.Threading.DispatcherSynchronizationContext, namespace: System.Windows.Threading
  DNSortDescription = interface; // type: System.ComponentModel.SortDescription, namespace: System.ComponentModel
  DNDependencyPropertyChangedEventArgs = interface; // type: System.Windows.DependencyPropertyChangedEventArgs, namespace: System.Windows
  DNInt32Rect = interface; // type: System.Windows.Int32Rect, namespace: System.Windows
  DNMSG = interface; // type: System.Windows.Interop.MSG, namespace: System.Windows.Interop
  DNLocalValueEntry = interface; // type: System.Windows.LocalValueEntry, namespace: System.Windows
  DNLocalValueEnumerator = interface; // type: System.Windows.LocalValueEnumerator, namespace: System.Windows
  DNMatrix = interface; // type: System.Windows.Media.Matrix, namespace: System.Windows.Media
  DNPoint = interface; // type: System.Windows.Point, namespace: System.Windows
  DNRect = interface; // type: System.Windows.Rect, namespace: System.Windows
  DNSize = interface; // type: System.Windows.Size, namespace: System.Windows
  DNDispatcherPriorityAwaitable = interface; // type: System.Windows.Threading.DispatcherPriorityAwaitable, namespace: System.Windows.Threading
  DNDispatcherPriorityAwaiter = interface; // type: System.Windows.Threading.DispatcherPriorityAwaiter, namespace: System.Windows.Threading
  DNDispatcherProcessingDisabled = interface; // type: System.Windows.Threading.DispatcherProcessingDisabled, namespace: System.Windows.Threading
  DNVector = interface; // type: System.Windows.Vector, namespace: System.Windows
  DNBaseCompatibilityPreferences = interface; // type: System.Windows.BaseCompatibilityPreferences, namespace: System.Windows
  DNDataSourceProvider = interface; // type: System.Windows.Data.DataSourceProvider, namespace: System.Windows.Data
  DNDependencyObjectType = interface; // type: System.Windows.DependencyObjectType, namespace: System.Windows
  DNDependencyProperty = interface; // type: System.Windows.DependencyProperty, namespace: System.Windows
  DNDependencyPropertyKey = interface; // type: System.Windows.DependencyPropertyKey, namespace: System.Windows
  DNExpression = interface; // type: System.Windows.Expression, namespace: System.Windows
  DNKeyInterop = interface; // type: System.Windows.Input.KeyInterop, namespace: System.Windows.Input
  DNTraversalRequest = interface; // type: System.Windows.Input.TraversalRequest, namespace: System.Windows.Input
  DNComponentDispatcher = interface; // type: System.Windows.Interop.ComponentDispatcher, namespace: System.Windows.Interop
  DNInternalTypeHelper = interface; // type: System.Windows.Markup.InternalTypeHelper, namespace: System.Windows.Markup
  DNMarkupObject = interface; // type: System.Windows.Markup.Primitives.MarkupObject, namespace: System.Windows.Markup.Primitives
  DNMarkupProperty = interface; // type: System.Windows.Markup.Primitives.MarkupProperty, namespace: System.Windows.Markup.Primitives
  DNServiceProviders = interface; // type: System.Windows.Markup.ServiceProviders, namespace: System.Windows.Markup
  DNInt32RectValueSerializer = interface; // type: System.Windows.Converters.Int32RectValueSerializer, namespace: System.Windows.Converters
  DNPointValueSerializer = interface; // type: System.Windows.Converters.PointValueSerializer, namespace: System.Windows.Converters
  DNRectValueSerializer = interface; // type: System.Windows.Converters.RectValueSerializer, namespace: System.Windows.Converters
  DNSizeValueSerializer = interface; // type: System.Windows.Converters.SizeValueSerializer, namespace: System.Windows.Converters
  DNVectorValueSerializer = interface; // type: System.Windows.Converters.VectorValueSerializer, namespace: System.Windows.Converters
  DNKeyValueSerializer = interface; // type: System.Windows.Input.KeyValueSerializer, namespace: System.Windows.Input
  DNModifierKeysValueSerializer = interface; // type: System.Windows.Input.ModifierKeysValueSerializer, namespace: System.Windows.Input
  DNMatrixValueSerializer = interface; // type: System.Windows.Media.Converters.MatrixValueSerializer, namespace: System.Windows.Media.Converters
  DNNameScope = interface; // type: System.Windows.NameScope, namespace: System.Windows
  DNPropertyMetadata = interface; // type: System.Windows.PropertyMetadata, namespace: System.Windows
  DNSplashScreen = interface; // type: System.Windows.SplashScreen, namespace: System.Windows
  DNDispatcher = interface; // type: System.Windows.Threading.Dispatcher, namespace: System.Windows.Threading
  DNDispatcherHooks = interface; // type: System.Windows.Threading.DispatcherHooks, namespace: System.Windows.Threading
  DNDispatcherObject = interface; // type: System.Windows.Threading.DispatcherObject, namespace: System.Windows.Threading
  DNDependencyObject = interface; // type: System.Windows.DependencyObject, namespace: System.Windows
  DNFreezable = interface; // type: System.Windows.Freezable, namespace: System.Windows
  DNDispatcherFrame = interface; // type: System.Windows.Threading.DispatcherFrame, namespace: System.Windows.Threading
  DNWeakEventManager = interface; // type: System.Windows.WeakEventManager, namespace: System.Windows
  DNCollectionChangedEventManager = interface; // type: System.Collections.Specialized.CollectionChangedEventManager, namespace: System.Collections.Specialized
  DNCurrentChangedEventManager = interface; // type: System.ComponentModel.CurrentChangedEventManager, namespace: System.ComponentModel
  DNCurrentChangingEventManager = interface; // type: System.ComponentModel.CurrentChangingEventManager, namespace: System.ComponentModel
  DNErrorsChangedEventManager = interface; // type: System.ComponentModel.ErrorsChangedEventManager, namespace: System.ComponentModel
  DNPropertyChangedEventManager = interface; // type: System.ComponentModel.PropertyChangedEventManager, namespace: System.ComponentModel
  DNWeakEventManager<TEventSource, TEventArgs> = interface; // type: System.Windows.WeakEventManager`2, namespace: System.Windows
  DNDispatcherOperation = interface; // type: System.Windows.Threading.DispatcherOperation, namespace: System.Windows.Threading
  DNDispatcherOperation<TResult> = interface; // type: System.Windows.Threading.DispatcherOperation`1, namespace: System.Windows.Threading
  DNDispatcherTimer = interface; // type: System.Windows.Threading.DispatcherTimer, namespace: System.Windows.Threading

{ delegates }

  ///<summary>Represents the method that handles the <see cref="E:System.Windows.Data.CollectionView.CurrentChanging" />
  ///  event.</summary>
  ///  <param name="sender">The object that raised the event.</param>
  ///  <param name="e">Information about the event.</param>
  [DNTypeName('System.ComponentModel.CurrentChangingEventHandler')]
  DNCurrentChangingEventHandler = procedure(sender: DDN.mscorlib.DNObject; e: DNCurrentChangingEventArgs) of object;

  ///<summary>Represents the method that handles the <see cref="E:System.IO.Packaging.PackageDigitalSignatureManager.InvalidSignatureEvent" />
  ///  that is raised when <see cref="M:System.IO.Packaging.PackageDigitalSignatureManager.VerifySignatures(System.Boolean)" />
  ///  detects an invalid signature.</summary>
  ///  <param name="sender">The invalid <see cref="T:System.IO.Packaging.PackageDigitalSignature" />
  ///  source of the event.</param>
  ///  <param name="e">The event data.</param>
  [DNTypeName('System.IO.Packaging.InvalidSignatureEventHandler')]
  DNInvalidSignatureEventHandler = procedure(sender: DDN.mscorlib.DNObject; e: DNSignatureVerificationEventArgs) of object;

  ///<summary>Provides a template for a method that is called whenever a dependency property value is being re-evaluated, or coercion is specifically requested.</summary>
  ///  <param name="d">The object that the property exists on. When the callback is invoked, the property system will pass this value.</param>
  ///  <param name="baseValue">The new value of the property, prior to any coercion attempt.</param>
  ///<returns>The coerced value (with appropriate type). </returns>
  [DNTypeName('System.Windows.CoerceValueCallback')]
  DNCoerceValueCallback = function(d: DNDependencyObject; baseValue: DDN.mscorlib.DNObject): DDN.mscorlib.DNObject of object;

  ///<summary>Represents the method that will handle events raised when a <see cref="T:System.Windows.DependencyProperty" />
  ///  is changed on a particular <see cref="T:System.Windows.DependencyObject" />
  ///  implementation.</summary>
  ///  <param name="sender">The source of the event.</param>
  ///  <param name="e">The event data.</param>
  [DNTypeName('System.Windows.DependencyPropertyChangedEventHandler')]
  DNDependencyPropertyChangedEventHandler = procedure(sender: DDN.mscorlib.DNObject; e: DNDependencyPropertyChangedEventArgs) of object;

  ///<summary>Represents the method that handles the <see cref="E:System.Windows.Interop.ComponentDispatcher.ThreadFilterMessage" />
  ///  and <see cref="E:System.Windows.Interop.ComponentDispatcher.ThreadPreprocessMessage" />
  ///  events. </summary>
  ///  <param name="msg">A structure with the message data.</param>
  ///  <param name="handled"><see langword="true" />
  ///  if the message was handled; otherwise, <see langword="false" />
  ///  .</param>
  [DNTypeName('System.Windows.Interop.ThreadMessageEventHandler')]
  DNThreadMessageEventHandler = procedure(out msg: DNMSG; out handled: Boolean) of object;

  ///<summary>Represents the callback that is invoked when the effective property value of a dependency property changes.</summary>
  ///  <param name="d">The <see cref="T:System.Windows.DependencyObject" />
  ///  on which the property has changed value.</param>
  ///  <param name="e">Event data that is issued by any event that tracks changes to the effective value of this property.</param>
  [DNTypeName('System.Windows.PropertyChangedCallback')]
  DNPropertyChangedCallback = procedure(d: DNDependencyObject; e: DNDependencyPropertyChangedEventArgs) of object;

  ///<summary>Represents the method that will handle <see cref="T:System.Windows.Threading.DispatcherHooks" />
  ///  related events. </summary>
  ///  <param name="sender">The source of the event.</param>
  ///  <param name="e">The event data.</param>
  [DNTypeName('System.Windows.Threading.DispatcherHookEventHandler')]
  DNDispatcherHookEventHandler = procedure(sender: DDN.mscorlib.DNObject; e: DNDispatcherHookEventArgs) of object;

  ///<summary>Represents a delegate to use for dispatcher operations.</summary>
  ///  <param name="arg">An argument passed to the callback.</param>
  ///<returns>The object returned by the callback.</returns>
  [DNTypeName('System.Windows.Threading.DispatcherOperationCallback')]
  DNDispatcherOperationCallback = function(arg: DDN.mscorlib.DNObject): DDN.mscorlib.DNObject of object;

  ///<summary>Represents the method that will handle the <see cref="E:System.Windows.Threading.Dispatcher.UnhandledException" />
  ///  event.</summary>
  ///  <param name="sender">The source of the event.</param>
  ///  <param name="e">The event data.</param>
  [DNTypeName('System.Windows.Threading.DispatcherUnhandledExceptionEventHandler')]
  DNDispatcherUnhandledExceptionEventHandler = procedure(sender: DDN.mscorlib.DNObject; e: DNDispatcherUnhandledExceptionEventArgs) of object;

  ///<summary>Represents the method that will handle the <see cref="E:System.Windows.Threading.Dispatcher.UnhandledExceptionFilter" />
  ///  event.</summary>
  ///  <param name="sender">The source of the event.</param>
  ///  <param name="e">The event data.</param>
  [DNTypeName('System.Windows.Threading.DispatcherUnhandledExceptionFilterEventHandler')]
  DNDispatcherUnhandledExceptionFilterEventHandler = procedure(sender: DDN.mscorlib.DNObject; e: DNDispatcherUnhandledExceptionFilterEventArgs) of object;

  ///<summary>Represents a method used as a callback that validates the effective value of a  dependency property.</summary>
  ///  <param name="value">The value to be validated.</param>
  ///<returns><see langword="true" />
  ///  if the value was validated; <see langword="false" />
  ///  if the submitted value was invalid.</returns>
  [DNTypeName('System.Windows.ValidateValueCallback')]
  DNValidateValueCallback = function(value: DDN.mscorlib.DNObject): Boolean of object;




{ objects }

  //-------------namespace: System.ComponentModel----------------
  ///<summary>Enables collections to have the functionalities of current record management, custom sorting, filtering, and grouping.</summary>
  [DNTypeName('System.ComponentModel.ICollectionView')]
  DNICollectionView = interface(DDN.mscorlib.DNIEnumerable)
  ['{BC1C216E-67A1-3933-9CD6-A13AA4B974A9}']
  { getters & setters } 

    function get_Culture: DDN.mscorlib.DNCultureInfo;
    procedure set_Culture(value: DDN.mscorlib.DNCultureInfo);
    function get_SourceCollection: DDN.mscorlib.DNIEnumerable;
    function get_Filter: DDN.mscorlib.DNPredicate<DDN.mscorlib.DNObject>;
    procedure set_Filter(value: DDN.mscorlib.DNPredicate<DDN.mscorlib.DNObject>);
    function get_CanFilter: Boolean;
    function get_SortDescriptions: DNSortDescriptionCollection;
    function get_CanSort: Boolean;
    function get_CanGroup: Boolean;
    function get_GroupDescriptions: DDN.System.DNObservableCollection<DNGroupDescription>;
    function get_Groups: DDN.System.DNReadOnlyObservableCollection<DDN.mscorlib.DNObject>;
    function get_IsEmpty: Boolean;
    function get_CurrentItem: DDN.mscorlib.DNObject;
    function get_CurrentPosition: Int32;
    function get_IsCurrentAfterLast: Boolean;
    function get_IsCurrentBeforeFirst: Boolean;

  { events } 

    procedure add_CurrentChanging(value: DNCurrentChangingEventHandler);
    procedure remove_CurrentChanging(value: DNCurrentChangingEventHandler);
    procedure add_CurrentChanged(value: DDN.mscorlib.DNEventHandler);
    procedure remove_CurrentChanged(value: DDN.mscorlib.DNEventHandler);

  { methods } 

    ///<summary>Recreates the view.</summary>
    procedure Refresh;
    ///<summary>Returns a value that indicates whether a given item belongs to this collection view.</summary>
    ///  <param name="item">The object to check.</param>
    ///<returns><see langword="true" />
    ///  if the item belongs to this collection view; otherwise, <see langword="false" />
    ///  .</returns>
    function &Contains(item: DDN.mscorlib.DNObject): Boolean;
    ///<summary>Enters a defer cycle that you can use to merge changes to the view and delay automatic refresh.</summary>
    ///<returns>An <see cref="T:System.IDisposable" />
    ///  object that you can use to dispose of the calling object.</returns>
    function DeferRefresh: DDN.mscorlib.DNIDisposable;
    ///<summary>Sets the first item in the view as the <see cref="P:System.ComponentModel.ICollectionView.CurrentItem" />
    ///  .</summary>
    ///<returns><see langword="true" />
    ///  if the resulting <see cref="P:System.ComponentModel.ICollectionView.CurrentItem" />
    ///  is an item within the view; otherwise, <see langword="false" />
    ///  .</returns>
    function MoveCurrentToFirst: Boolean;
    ///<summary>Sets the last item in the view as the <see cref="P:System.ComponentModel.ICollectionView.CurrentItem" />
    ///  .</summary>
    ///<returns><see langword="true" />
    ///  if the resulting <see cref="P:System.ComponentModel.ICollectionView.CurrentItem" />
    ///  is an item within the view; otherwise, <see langword="false" />
    ///  .</returns>
    function MoveCurrentToLast: Boolean;
    ///<summary>Sets the item after the <see cref="P:System.ComponentModel.ICollectionView.CurrentItem" />
    ///  in the view as the <see cref="P:System.ComponentModel.ICollectionView.CurrentItem" />
    ///  .</summary>
    ///<returns><see langword="true" />
    ///  if the resulting <see cref="P:System.ComponentModel.ICollectionView.CurrentItem" />
    ///  is an item within the view; otherwise, <see langword="false" />
    ///  .</returns>
    function MoveCurrentToNext: Boolean;
    ///<summary>Sets the item before the <see cref="P:System.ComponentModel.ICollectionView.CurrentItem" />
    ///  in the view as the <see cref="P:System.ComponentModel.ICollectionView.CurrentItem" />
    ///  .</summary>
    ///<returns><see langword="true" />
    ///  if the resulting <see cref="P:System.ComponentModel.ICollectionView.CurrentItem" />
    ///  is an item within the view; otherwise, <see langword="false" />
    ///  .</returns>
    function MoveCurrentToPrevious: Boolean;
    ///<summary>Sets the specified item to be the <see cref="P:System.ComponentModel.ICollectionView.CurrentItem" />
    ///  in the view.</summary>
    ///  <param name="item">The item to set as the <see cref="P:System.ComponentModel.ICollectionView.CurrentItem" />
    ///  .</param>
    ///<returns><see langword="true" />
    ///  if the resulting <see cref="P:System.ComponentModel.ICollectionView.CurrentItem" />
    ///  is within the view; otherwise, <see langword="false" />
    ///  .</returns>
    function MoveCurrentTo(item: DDN.mscorlib.DNObject): Boolean;
    ///<summary>Sets the item at the specified index to be the <see cref="P:System.ComponentModel.ICollectionView.CurrentItem" />
    ///  in the view.</summary>
    ///  <param name="position">The index to set the <see cref="P:System.ComponentModel.ICollectionView.CurrentItem" />
    ///  to.</param>
    ///<returns><see langword="true" />
    ///  if the resulting <see cref="P:System.ComponentModel.ICollectionView.CurrentItem" />
    ///  is an item within the view; otherwise, <see langword="false" />
    ///  .</returns>
    function MoveCurrentToPosition(position: Int32): Boolean;

  { propertys } 

    ///<summary>Gets or sets the cultural info for any operations of the view that may differ by culture, such as sorting.</summary>
    ///<returns>The culture to use during sorting.</returns>
    property Culture: DDN.mscorlib.DNCultureInfo read get_Culture write set_Culture;
    ///<summary>Returns the underlying collection.</summary>
    ///<returns>An <see cref="T:System.Collections.IEnumerable" />
    ///  object that is the underlying collection.</returns>
    property SourceCollection: DDN.mscorlib.DNIEnumerable read get_SourceCollection;
    ///<summary>Gets or sets a callback used to determine if an item is suitable for inclusion in the view.</summary>
    ///<returns>A method used to determine if an item is suitable for inclusion in the view.</returns>
    property Filter: DDN.mscorlib.DNPredicate<DDN.mscorlib.DNObject> read get_Filter write set_Filter;
    ///<summary>Gets a value that indicates whether this view supports filtering via the <see cref="P:System.ComponentModel.ICollectionView.Filter" />
    ///  property.</summary>
    ///<returns><see langword="true" />
    ///  if this view support filtering; otherwise, <see langword="false" />
    ///  .</returns>
    property CanFilter: Boolean read get_CanFilter;
    ///<summary>Gets a collection of <see cref="T:System.ComponentModel.SortDescription" />
    ///  objects that describe how the items in the collection are sorted in the view.</summary>
    ///<returns>A collection of <see cref="T:System.ComponentModel.SortDescription" />
    ///  objects that describe how the items in the collection are sorted in the view.</returns>
    property SortDescriptions: DNSortDescriptionCollection read get_SortDescriptions;
    ///<summary>Gets a value that indicates whether this view supports sorting via the <see cref="P:System.ComponentModel.ICollectionView.SortDescriptions" />
    ///  property.</summary>
    ///<returns><see langword="true" />
    ///  if this view supports sorting; otherwise, <see langword="false" />
    ///  .</returns>
    property CanSort: Boolean read get_CanSort;
    ///<summary>Gets a value that indicates whether this view supports grouping via the <see cref="P:System.ComponentModel.ICollectionView.GroupDescriptions" />
    ///  property.</summary>
    ///<returns><see langword="true" />
    ///  if this view supports grouping; otherwise, <see langword="false" />
    ///  .</returns>
    property CanGroup: Boolean read get_CanGroup;
    ///<summary>Gets a collection of <see cref="T:System.ComponentModel.GroupDescription" />
    ///  objects that describe how the items in the collection are grouped in the view.</summary>
    ///<returns>A collection of <see cref="T:System.ComponentModel.GroupDescription" />
    ///  objects that describe how the items in the collection are grouped in the view.</returns>
    property GroupDescriptions: DDN.System.DNObservableCollection<DNGroupDescription> read get_GroupDescriptions;
    ///<summary>Gets the top-level groups.</summary>
    ///<returns>A read-only collection of the top-level groups or <see langword="null" />
    ///  if there are no groups.</returns>
    property Groups: DDN.System.DNReadOnlyObservableCollection<DDN.mscorlib.DNObject> read get_Groups;
    ///<summary>Returns a value that indicates whether the resulting view is empty.</summary>
    ///<returns><see langword="true" />
    ///  if the resulting view is empty; otherwise, <see langword="false" />
    ///  .</returns>
    property IsEmpty: Boolean read get_IsEmpty;
    ///<summary>Gets the current item in the view.</summary>
    ///<returns>The current item of the view or <see langword="null" />
    ///  if there is no current item.</returns>
    property CurrentItem: DDN.mscorlib.DNObject read get_CurrentItem;
    ///<summary>Gets the ordinal position of the <see cref="P:System.ComponentModel.ICollectionView.CurrentItem" />
    ///  within the view.</summary>
    ///<returns>The ordinal position of the <see cref="P:System.ComponentModel.ICollectionView.CurrentItem" />
    ///  within the view.</returns>
    property CurrentPosition: Int32 read get_CurrentPosition;
    ///<summary>Gets a value that indicates whether the <see cref="P:System.ComponentModel.ICollectionView.CurrentItem" />
    ///  of the view is beyond the end of the collection.</summary>
    ///<returns>Returns <see langword="true" />
    ///  if the <see cref="P:System.ComponentModel.ICollectionView.CurrentItem" />
    ///  of the view is beyond the end of the collection; otherwise, <see langword="false" />
    ///  .</returns>
    property IsCurrentAfterLast: Boolean read get_IsCurrentAfterLast;
    ///<summary>Gets a value that indicates whether the <see cref="P:System.ComponentModel.ICollectionView.CurrentItem" />
    ///  of the view is beyond the beginning of the collection.</summary>
    ///<returns>Returns <see langword="true" />
    ///  if the <see cref="P:System.ComponentModel.ICollectionView.CurrentItem" />
    ///  of the view is beyond the beginning of the collection; otherwise, <see langword="false" />
    ///  .</returns>
    property IsCurrentBeforeFirst: Boolean read get_IsCurrentBeforeFirst;
  end;

  //-------------namespace: System.ComponentModel----------------
  ///<summary>An interface that enables implementing collections to create a view to their data. Normally, user code does not call methods on this interface.</summary>
  [DNTypeName('System.ComponentModel.ICollectionViewFactory')]
  DNICollectionViewFactory = interface(DDN.mscorlib.DNObject)
  ['{85E748D2-9AAC-3538-990B-FD8BCEC62EAC}']
  { methods } 

    ///<summary>Creates a new view on the collection that implements this interface. Typically, user code does not call this method.</summary>
    ///<returns>The newly created view.</returns>
    function CreateView: DNICollectionView;

  end;

  //-------------namespace: System.ComponentModel----------------
  ///<summary>Defines properties that enables sorting, grouping, and filtering on a <see cref="T:System.Windows.Data.CollectionView" />
  ///  in real time.</summary>
  [DNTypeName('System.ComponentModel.ICollectionViewLiveShaping')]
  DNICollectionViewLiveShaping = interface(DDN.mscorlib.DNObject)
  ['{842756FF-4D11-32C7-B4FF-86265B5B34F6}']
  { getters & setters } 

    function get_CanChangeLiveSorting: Boolean;
    function get_CanChangeLiveFiltering: Boolean;
    function get_CanChangeLiveGrouping: Boolean;
    function get_IsLiveSorting: DDN.mscorlib.DNNullable<Boolean>;
    procedure set_IsLiveSorting(value: DDN.mscorlib.DNNullable<Boolean>);
    function get_IsLiveFiltering: DDN.mscorlib.DNNullable<Boolean>;
    procedure set_IsLiveFiltering(value: DDN.mscorlib.DNNullable<Boolean>);
    function get_IsLiveGrouping: DDN.mscorlib.DNNullable<Boolean>;
    procedure set_IsLiveGrouping(value: DDN.mscorlib.DNNullable<Boolean>);
    function get_LiveSortingProperties: DDN.System.DNObservableCollection<string>;
    function get_LiveFilteringProperties: DDN.System.DNObservableCollection<string>;
    function get_LiveGroupingProperties: DDN.System.DNObservableCollection<string>;

  { propertys } 

    ///<summary>Gets a value that indicates whether the collection view supports turning sorting data in real time on or off.</summary>
    ///<returns><see langword="true" />
    ///  if the collection view supports turning live sorting on or off; otherwise, <see langword="false" />
    ///  .</returns>
    property CanChangeLiveSorting: Boolean read get_CanChangeLiveSorting;
    ///<summary>Gets a value that indicates whether the collection view supports turning filtering data in real time on or off.</summary>
    ///<returns><see langword="true" />
    ///  if the collection view supports turning live filtering on or off; otherwise, <see langword="false" />
    ///  .</returns>
    property CanChangeLiveFiltering: Boolean read get_CanChangeLiveFiltering;
    ///<summary>Gets a value that indicates whether the collection view supports turning grouping data in real time on or off.</summary>
    ///<returns><see langword="true" />
    ///  if the collection view supports turning live grouping on or off; otherwise, <see langword="false" />
    ///  .</returns>
    property CanChangeLiveGrouping: Boolean read get_CanChangeLiveGrouping;
    ///<summary>Gets or sets a value that indicates whether sorting in real time is enabled.</summary>
    ///<returns><see langword="true" />
    ///  if sorting data in real time is enable; <see langword="false" />
    ///  if live sorting is not enabled; <see langword="null" />
    ///  if it cannot be determined whether the collection view implements live sorting.</returns>
    property IsLiveSorting: DDN.mscorlib.DNNullable<Boolean> read get_IsLiveSorting write set_IsLiveSorting;
    ///<summary>Gets or sets a value that indicates whether filtering data in real time is enabled.</summary>
    ///<returns><see langword="true" />
    ///  if filtering data in real time is enabled; <see langword="false" />
    ///  if live filtering is not enabled; <see langword="null" />
    ///  if it cannot be determined whether the collection view implements live filtering.</returns>
    property IsLiveFiltering: DDN.mscorlib.DNNullable<Boolean> read get_IsLiveFiltering write set_IsLiveFiltering;
    ///<summary>Gets or sets a value that indicates whether grouping data in real time is enabled.</summary>
    ///<returns><see langword="true" />
    ///  if grouping data in real time is enable; <see langword="false" />
    ///  if live grouping is not enabled; <see langword="null" />
    ///  if it cannot be determined whether the collection view implements live grouping.</returns>
    property IsLiveGrouping: DDN.mscorlib.DNNullable<Boolean> read get_IsLiveGrouping write set_IsLiveGrouping;
    ///<summary>Gets a collection of strings that specify the properties that participate in sorting data in real time.</summary>
    ///<returns>A collection of strings that specify the properties that participate in sorting data in real time.</returns>
    property LiveSortingProperties: DDN.System.DNObservableCollection<string> read get_LiveSortingProperties;
    ///<summary>Gets a collection of strings that specify the properties that participate in filtering data in real time.</summary>
    ///<returns>A collection of strings that specify the properties that participate in filtering data in real time.</returns>
    property LiveFilteringProperties: DDN.System.DNObservableCollection<string> read get_LiveFilteringProperties;
    ///<summary>Gets a collection of strings that specify the properties that participate in grouping data in real time.</summary>
    ///<returns>A collection of strings that specify the properties that participate in grouping data in real time.</returns>
    property LiveGroupingProperties: DDN.System.DNObservableCollection<string> read get_LiveGroupingProperties;
  end;

  //-------------namespace: System.ComponentModel----------------
  ///<summary>Defines methods and properties that a <see cref="T:System.Windows.Data.CollectionView" />
  ///  implements to provide editing capabilities to a collection.</summary>
  [DNTypeName('System.ComponentModel.IEditableCollectionView')]
  DNIEditableCollectionView = interface(DDN.mscorlib.DNObject)
  ['{BD2E0E08-6611-31CD-A1BC-2737C49744C8}']
  { getters & setters } 

    function get_NewItemPlaceholderPosition: DNNewItemPlaceholderPosition;
    procedure set_NewItemPlaceholderPosition(value: DNNewItemPlaceholderPosition);
    function get_CanAddNew: Boolean;
    function get_IsAddingNew: Boolean;
    function get_CurrentAddItem: DDN.mscorlib.DNObject;
    function get_CanRemove: Boolean;
    function get_CanCancelEdit: Boolean;
    function get_IsEditingItem: Boolean;
    function get_CurrentEditItem: DDN.mscorlib.DNObject;

  { methods } 

    ///<summary>Adds a new item to the collection.</summary>
    ///<returns>The new item that is added to the collection.</returns>
    function AddNew: DDN.mscorlib.DNObject;
    ///<summary>Ends the add transaction and saves the pending new item.</summary>
    procedure CommitNew;
    ///<summary>Ends the add transaction and discards the pending new item.</summary>
    procedure CancelNew;
    ///<summary>Removes the item at the specified position from the collection.</summary>
    ///  <param name="index">The position of the item to remove.</param>
    ///<exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index" />
    ///  is less than 0 or greater than the number of items in the collection view.</exception>
    procedure RemoveAt(index: Int32);
    ///<summary>Removes the specified item from the collection.</summary>
    ///  <param name="item">The item to remove.</param>
    procedure Remove(item: DDN.mscorlib.DNObject);
    ///<summary>Begins an edit transaction of the specified item.</summary>
    ///  <param name="item">The item to edit.</param>
    procedure EditItem(item: DDN.mscorlib.DNObject);
    ///<summary>Ends the edit transaction and saves the pending changes.</summary>
    procedure CommitEdit;
    ///<summary>Ends the edit transaction and, if possible, restores the original value to the item.</summary>
    procedure CancelEdit;

  { propertys } 

    ///<summary>Gets or sets the position of the new item placeholder in the collection view.</summary>
    ///<returns>One of the enumeration values that specifies the position of the new item placeholder in the collection view.</returns>
    property NewItemPlaceholderPosition: DNNewItemPlaceholderPosition read get_NewItemPlaceholderPosition write set_NewItemPlaceholderPosition;
    ///<summary>Gets a value that indicates whether a new item can be added to the collection.</summary>
    ///<returns><see langword="true" />
    ///  if a new item can be added to the collection; otherwise, <see langword="false" />
    ///  .</returns>
    property CanAddNew: Boolean read get_CanAddNew;
    ///<summary>Gets a value that indicates whether an add transaction is in progress.</summary>
    ///<returns><see langword="true" />
    ///  if an add transaction is in progress; otherwise, <see langword="false" />
    ///  .</returns>
    property IsAddingNew: Boolean read get_IsAddingNew;
    ///<summary>Gets the item that is being added during the current add transaction.</summary>
    ///<returns>The item that is being added if <see cref="P:System.ComponentModel.IEditableCollectionView.IsAddingNew" />
    ///  is <see langword="true" />
    ///  ; otherwise, <see langword="null" />
    ///  .</returns>
    property CurrentAddItem: DDN.mscorlib.DNObject read get_CurrentAddItem;
    ///<summary>Gets a value that indicates whether an item can be removed from the collection.</summary>
    ///<returns><see langword="true" />
    ///  if an item can be removed from the collection; otherwise, <see langword="false" />
    ///  .</returns>
    property CanRemove: Boolean read get_CanRemove;
    ///<summary>Gets a value that indicates whether the collection view can discard pending changes and restore the original values of an edited object.</summary>
    ///<returns><see langword="true" />
    ///  if the collection view can discard pending changes and restore the original values of an edited object; otherwise, <see langword="false" />
    ///  .</returns>
    property CanCancelEdit: Boolean read get_CanCancelEdit;
    ///<summary>Gets a value that indicates whether an edit transaction is in progress.</summary>
    ///<returns><see langword="true" />
    ///  if an edit transaction is in progress; otherwise, <see langword="false" />
    ///  .</returns>
    property IsEditingItem: Boolean read get_IsEditingItem;
    ///<summary>Gets the item in the collection that is being edited.</summary>
    ///<returns>The item in the collection that is being edited if <see cref="P:System.ComponentModel.IEditableCollectionView.IsEditingItem" />
    ///  is <see langword="true" />
    ///  ; otherwise, <see langword="null" />
    ///  .</returns>
    property CurrentEditItem: DDN.mscorlib.DNObject read get_CurrentEditItem;
  end;

  //-------------namespace: System.ComponentModel----------------
  ///<summary>Defines methods and properties that a <see cref="T:System.Windows.Data.CollectionView" />
  ///  implements to enable specifying adding items of a specific type.</summary>
  [DNTypeName('System.ComponentModel.IEditableCollectionViewAddNewItem')]
  DNIEditableCollectionViewAddNewItem = interface(DNIEditableCollectionView)
  ['{70E3A90C-E666-3296-93BA-0723DAD78889}']
  { getters & setters } 

    function get_CanAddNewItem: Boolean;

  { methods } 

    ///<summary>Adds the specified object to the collection.</summary>
    ///  <param name="newItem">The object to add to the collection.</param>
    ///<returns>The object that is added to the collection.</returns>
    function AddNewItem(newItem: DDN.mscorlib.DNObject): DDN.mscorlib.DNObject;

  { propertys } 

    ///<summary>Gets a value that indicates whether a specified object can be added to the collection.</summary>
    ///<returns><see langword="true" />
    ///  if a specified object can be added to the collection; otherwise, <see langword="false" />
    ///  .</returns>
    property CanAddNewItem: Boolean read get_CanAddNewItem;
  end;

  //-------------namespace: System.ComponentModel----------------
  ///<summary>Defines a property that provides information about an object's properties.</summary>
  [DNTypeName('System.ComponentModel.IItemProperties')]
  DNIItemProperties = interface(DDN.mscorlib.DNObject)
  ['{23541A78-7913-3740-B38A-85551A894944}']
  { getters & setters } 

    function get_ItemProperties: DDN.mscorlib.DNReadOnlyCollection<DNItemPropertyInfo>;

  { propertys } 

    ///<summary>Gets a collection that contains information about the properties that are available on the items in a collection.</summary>
    ///<returns>A collection that contains information about the properties that are available on the items in a collection.</returns>
    property ItemProperties: DDN.mscorlib.DNReadOnlyCollection<DNItemPropertyInfo> read get_ItemProperties;
  end;

  //-------------namespace: System.Windows.Interop----------------
  ///<summary>Provides a keyboard sink for components that manages tabbing, accelerators, and mnemonics across interop boundaries and between HWNDs. This interface implements keyboard message management in WPF-Win32 interoperation scenarios.</summary>
  [DNTypeName('System.Windows.Interop.IKeyboardInputSink')]
  DNIKeyboardInputSink = interface(DDN.mscorlib.DNObject)
  ['{C3BFFF23-62B6-3563-9920-C32DAD9E64D9}']
  { getters & setters } 

    function get_KeyboardInputSite: DNIKeyboardInputSite;
    procedure set_KeyboardInputSite(value: DNIKeyboardInputSite);

  { methods } 

    ///<summary>Registers the <see cref="T:System.Windows.Interop.IKeyboardInputSink" />
    ///  interface of a contained component. </summary>
    ///  <param name="sink">The <see cref="T:System.Windows.Interop.IKeyboardInputSink" />
    ///  sink of the contained component.</param>
    ///<returns>The <see cref="T:System.Windows.Interop.IKeyboardInputSite" />
    ///  site of the contained component.</returns>
    function RegisterKeyboardInputSink(sink: DNIKeyboardInputSink): DNIKeyboardInputSite;
    function TranslateAccelerator(out msg: DNMSG; modifiers: DNModifierKeys): Boolean;
    ///<summary>Sets focus on either the first tab stop or the last tab stop of the sink. </summary>
    ///  <param name="request">Specifies whether focus should be set to the first or the last tab stop.</param>
    ///<returns><see langword="true" />
    ///  if the focus has been set as requested; <see langword="false" />
    ///  , if there are no tab stops.</returns>
    function TabInto(request: DNTraversalRequest): Boolean;
    function OnMnemonic(out msg: DNMSG; modifiers: DNModifierKeys): Boolean;
    function TranslateChar(out msg: DNMSG; modifiers: DNModifierKeys): Boolean;
    ///<summary>Gets a value that indicates whether the sink or one of its contained components has focus. </summary>
    ///<returns><see langword="true" />
    ///  if the sink or one of its contained components has focus; otherwise, <see langword="false" />
    ///  .</returns>
    function HasFocusWithin: Boolean;

  { propertys } 

    ///<summary>Gets or sets a reference to the component's container's <see cref="T:System.Windows.Interop.IKeyboardInputSite" />
    ///  interface. </summary>
    ///<returns>A reference to the container's <see cref="T:System.Windows.Interop.IKeyboardInputSite" />
    ///  interface.</returns>
    property KeyboardInputSite: DNIKeyboardInputSite read get_KeyboardInputSite write set_KeyboardInputSite;
  end;

  //-------------namespace: System.Windows.Interop----------------
  ///<summary>Manages keyboard focus within the container.  This interface implements keyboard message management in WPF-Win32 interoperation scenarios.</summary>
  [DNTypeName('System.Windows.Interop.IKeyboardInputSite')]
  DNIKeyboardInputSite = interface(DDN.mscorlib.DNObject)
  ['{688FB57F-AFC1-3FF7-ACBE-B97C9F648A6A}']
  { getters & setters } 

    function get_Sink: DNIKeyboardInputSink;

  { methods } 

    ///<summary>Unregisters a child keyboard input sink from this site. </summary>
    procedure Unregister;
    ///<summary>Called by a contained component when it has reached its last tab stop and has no further items to tab to. </summary>
    ///  <param name="request">Specifies whether focus should be set to the first or the last tab stop.</param>
    ///<returns>If this method returns <see langword="true" />
    ///  , the site has shifted focus to another component. If this method returns <see langword="false" />
    ///  , focus is still within the calling component. The component should "wrap around" and set focus to its first contained tab stop.</returns>
    function OnNoMoreTabStops(request: DNTraversalRequest): Boolean;

  { propertys } 

    ///<summary>Gets the keyboard sink associated with this site. </summary>
    ///<returns>The current site's <see cref="T:System.Windows.Interop.IKeyboardInputSink" />
    ///  interface.</returns>
    property Sink: DNIKeyboardInputSink read get_Sink;
  end;

  //-------------namespace: System.Windows----------------
  ///<summary>Provides event listening support for classes that expect to receive events through the WeakEvent pattern and a <see cref="T:System.Windows.WeakEventManager" />
  ///  .</summary>
  [DNTypeName('System.Windows.IWeakEventListener')]
  DNIWeakEventListener = interface(DDN.mscorlib.DNObject)
  ['{A2047CE1-23C1-39A8-9036-8B16A2D7AAFF}']
  { methods } 

    ///<summary>Receives events from the centralized event manager.</summary>
    ///  <param name="managerType">The type of the <see cref="T:System.Windows.WeakEventManager" />
    ///  calling this method.</param>
    ///  <param name="sender">Object that originated the event.</param>
    ///  <param name="e">Event data.</param>
    ///<returns><see langword="true" />
    ///  if the listener handled the event. It is considered an error by the <see cref="T:System.Windows.WeakEventManager" />
    ///  handling in WPFÂ to register a listener for an event that the listener does not handle. Regardless, the method should return <see langword="false" />
    ///  if it receives an event that it does not recognize or handle.</returns>
    function ReceiveWeakEvent(managerType: DDN.mscorlib.DNType; sender: DDN.mscorlib.DNObject; e: DDN.mscorlib.DNEventArgs): Boolean;

  end;

  //-------------namespace: System.Windows.Markup----------------
  ///<summary>Provides a mechanism whereby types can declare that they can receive an expression (or another class) from a markup extension, where the output is a different property type than the target property. Do not use for .NET FrameworkÂ 4 implementations; see Remarks.</summary>
  [DNTypeName('System.Windows.Markup.IReceiveMarkupExtension')]
  DNIReceiveMarkupExtension = interface(DDN.mscorlib.DNObject)
  ['{41069949-88FE-3F3B-B5F8-8E9554D5B722}']
  { methods } 

    ///<summary>Provides the handling for markup extensions that provide property values. Do not use for .NET FrameworkÂ 4 implementations; see Remarks in <see cref="T:System.Windows.Markup.IReceiveMarkupExtension" />
    ///  .</summary>
    ///  <param name="property">The name of the target property.</param>
    ///  <param name="markupExtension">The markup extension instance of the incoming data.</param>
    ///  <param name="serviceProvider">Can provide additional services that should be performed when processing the markup extension data for a property value.</param>
    procedure ReceiveMarkupExtension(&property: string; markupExtension: DDN.System.Xaml.DNMarkupExtension; serviceProvider: DDN.mscorlib.DNIServiceProvider);

  end;

  //-------------namespace: System.ComponentModel----------------
  DNPropertyFilterAttributeClass = interface(DDN.mscorlib.DNAttributeClass)
  ['{5C6A6AFF-3F9A-519B-99A5-312074939030}']
  { constructors } 

    ///<summary>Initializes a new instance of the <see cref="T:System.ComponentModel.PropertyFilterAttribute" />
    ///  class.</summary>
    ///  <param name="filter">The options that describe this property filter.</param>
    {class} function init(filter: DNPropertyFilterOptions): DNPropertyFilterAttribute;

  { static fields getter & setter } 

   function __fakeFieldGet_Default: DNPropertyFilterAttribute;

  { static fields } 

    ///<summary>This member supports the Microsoft .NET Framework infrastructure and is not intended to be used directly from your code. </summary>
    {class} property &Default: DNPropertyFilterAttribute read __fakeFieldGet_Default;

  end;

  ///<summary>Specifies which properties should be reported by type descriptors, specifically the <see cref="M:System.ComponentModel.TypeDescriptor.GetProperties(System.Object)" />
  ///  method.</summary>
  [DNTypeName('System.ComponentModel.PropertyFilterAttribute')]
  DNPropertyFilterAttribute = interface(DDN.mscorlib.DNAttribute)
  ['{89E6532A-978D-3CF3-BAE6-40AC4B9FECE6}']
  { getters & setters } 

    function get_Filter: DNPropertyFilterOptions;
    function get_TypeId: DDN.mscorlib.DNObject;

  { methods } 

    ///<summary>Returns a value that indicates whether the current <see cref="T:System.ComponentModel.PropertyFilterAttribute" />
    ///  .NET Framework attribute is equal to a specified object.</summary>
    ///  <param name="value">The object to compare to this <see cref="T:System.ComponentModel.PropertyFilterAttribute" />
    ///  .</param>
    ///<returns><see langword="true" />
    ///  if the specified <see cref="T:System.ComponentModel.PropertyFilterAttribute" />
    ///  is equal to the current <see cref="T:System.ComponentModel.PropertyFilterAttribute" />
    ///  ; otherwise, <see langword="false" />
    ///  . </returns>
    function Equals(value: DDN.mscorlib.DNObject): Boolean;
    ///<summary>Returns the hash code for the current <see cref="T:System.ComponentModel.PropertyFilterAttribute" />
    ///  .NET Framework attribute. </summary>
    ///<returns>A signed 32-bit integer value.</returns>
    function GetHashCode: Int32;
    ///<summary>Returns a value that indicates whether the property filter options of the current <see cref="T:System.ComponentModel.PropertyFilterAttribute" />
    ///  .NET Framework attribute match the property filter options of the provided object. </summary>
    ///  <param name="value">The object to compare. This object is expected to be a <see cref="T:System.ComponentModel.PropertyFilterAttribute" />
    ///  .</param>
    ///<returns><see langword="true" />
    ///  if a match exists; otherwise, <see langword="false" />
    ///  .</returns>
    function Match(value: DDN.mscorlib.DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>Gets the filter options for this <see cref="T:System.ComponentModel.PropertyFilterAttribute" />
    ///  .NET Framework attribute.</summary>
    ///<returns>The property filter options.</returns>
    property Filter: DNPropertyFilterOptions read get_Filter;
    property TypeId: DDN.mscorlib.DNObject read get_TypeId;
  end;

  TDNPropertyFilterAttribute = class(TDNGenericImport<DNPropertyFilterAttributeClass, DNPropertyFilterAttribute>) end;

  //-------------namespace: System.Security.Permissions----------------
  DNMediaPermissionAttributeClass = interface(DDN.mscorlib.DNCodeAccessSecurityAttributeClass)
  ['{3E806C3A-A5EB-592A-A223-141B443C9800}']
  { constructors } 

    ///<summary>Initializes a new instance of <see cref="T:System.Security.Permissions.MediaPermissionAttribute" />
    ///  .</summary>
    ///  <param name="action">One of the <see cref="T:System.Security.Permissions.SecurityAction" />
    ///  values.</param>
    {class} function init(action: DDN.mscorlib.DNSecurityAction): DNMediaPermissionAttribute;

  end;

  ///<summary>Allows security actions for <see cref="T:System.Security.Permissions.MediaPermission" />
  ///  to be applied to code using declarative security.</summary>
  [DNTypeName('System.Security.Permissions.MediaPermissionAttribute')]
  DNMediaPermissionAttribute = interface(DDN.mscorlib.DNCodeAccessSecurityAttribute)
  ['{20716BD3-162B-3692-A528-2763E0E68CA2}']
  { getters & setters } 

    function get_Audio: DNMediaPermissionAudio;
    procedure set_Audio(value: DNMediaPermissionAudio);
    function get_Video: DNMediaPermissionVideo;
    procedure set_Video(value: DNMediaPermissionVideo);
    function get_Image: DNMediaPermissionImage;
    procedure set_Image(value: DNMediaPermissionImage);
    function get_Action: DDN.mscorlib.DNSecurityAction;
    procedure set_Action(value: DDN.mscorlib.DNSecurityAction);
    function get_Unrestricted: Boolean;
    procedure set_Unrestricted(value: Boolean);
    function get_TypeId: DDN.mscorlib.DNObject;

  { methods } 

    ///<summary>Creates and returns a new <see cref="T:System.Security.Permissions.MediaPermission" />
    ///  .</summary>
    ///<returns>A <see cref="T:System.Security.Permissions.MediaPermission" />
    ///  that corresponds to this attribute.</returns>
    function CreatePermission: DDN.mscorlib.DNIPermission;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DDN.mscorlib.DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>Gets or sets the audio permission level for the <see cref="T:System.Security.Permissions.MediaPermissionAttribute" />
    ///  .</summary>
    ///<returns>The state of the <see cref="T:System.Security.Permissions.MediaPermissionAudio" />
    ///  .</returns>
    property Audio: DNMediaPermissionAudio read get_Audio write set_Audio;
    ///<summary>Gets or sets the video permission level for the <see cref="T:System.Security.Permissions.MediaPermissionAttribute" />
    ///  .</summary>
    ///<returns>The state of the <see cref="T:System.Security.Permissions.MediaPermissionVideo" />
    ///  .</returns>
    property Video: DNMediaPermissionVideo read get_Video write set_Video;
    ///<summary>Gets or sets the image permission level for the <see cref="T:System.Security.Permissions.MediaPermissionAttribute" />
    ///  .</summary>
    ///<returns>The state of the <see cref="T:System.Security.Permissions.MediaPermissionImage" />
    ///  .</returns>
    property Image: DNMediaPermissionImage read get_Image write set_Image;
    property Action: DDN.mscorlib.DNSecurityAction read get_Action write set_Action;
    property Unrestricted: Boolean read get_Unrestricted write set_Unrestricted;
    property TypeId: DDN.mscorlib.DNObject read get_TypeId;
  end;

  TDNMediaPermissionAttribute = class(TDNGenericImport<DNMediaPermissionAttributeClass, DNMediaPermissionAttribute>) end;

  //-------------namespace: System.Security.Permissions----------------
  DNWebBrowserPermissionAttributeClass = interface(DDN.mscorlib.DNCodeAccessSecurityAttributeClass)
  ['{BE1B7E1E-4DC9-51AF-BBD9-3E380EF70299}']
  { constructors } 

    ///<summary>Initializes a new instance of the <see cref="T:System.Security.Permissions.WebBrowserPermissionAttribute" />
    ///  class with the specified <see cref="T:System.Security.Permissions.SecurityAction" />
    ///  .</summary>
    ///  <param name="action">One of the <see cref="T:System.Security.Permissions.SecurityAction" />
    ///  values.</param>
    {class} function init(action: DDN.mscorlib.DNSecurityAction): DNWebBrowserPermissionAttribute;

  end;

  ///<summary>Allows security actions for <see cref="T:System.Security.Permissions.WebBrowserPermission" />
  ///  to be applied to code using declarative security.</summary>
  [DNTypeName('System.Security.Permissions.WebBrowserPermissionAttribute')]
  DNWebBrowserPermissionAttribute = interface(DDN.mscorlib.DNCodeAccessSecurityAttribute)
  ['{212C7429-8573-3B2C-B712-AF5F64215B4C}']
  { getters & setters } 

    function get_Level: DNWebBrowserPermissionLevel;
    procedure set_Level(value: DNWebBrowserPermissionLevel);
    function get_Action: DDN.mscorlib.DNSecurityAction;
    procedure set_Action(value: DDN.mscorlib.DNSecurityAction);
    function get_Unrestricted: Boolean;
    procedure set_Unrestricted(value: Boolean);
    function get_TypeId: DDN.mscorlib.DNObject;

  { methods } 

    ///<summary>Creates and returns a new instance of the <see cref="T:System.Security.Permissions.WebBrowserPermission" />
    ///  class.</summary>
    ///<returns>A <see cref="T:System.Security.Permissions.WebBrowserPermission" />
    ///  corresponding to the security declaration.</returns>
    function CreatePermission: DDN.mscorlib.DNIPermission;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DDN.mscorlib.DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>Gets or sets the current Web browser permission level for the <see cref="T:System.Security.Permissions.WebBrowserPermissionAttribute" />
    ///  .</summary>
    ///<returns>The state of the current Web browser permission level.</returns>
    property Level: DNWebBrowserPermissionLevel read get_Level write set_Level;
    property Action: DDN.mscorlib.DNSecurityAction read get_Action write set_Action;
    property Unrestricted: Boolean read get_Unrestricted write set_Unrestricted;
    property TypeId: DDN.mscorlib.DNObject read get_TypeId;
  end;

  TDNWebBrowserPermissionAttribute = class(TDNGenericImport<DNWebBrowserPermissionAttributeClass, DNWebBrowserPermissionAttribute>) end;

  //-------------namespace: System.Windows----------------
  DNAttachedPropertyBrowsableAttributeClass = interface(DDN.mscorlib.DNAttributeClass)
  ['{589E7A88-D6A6-55A2-8BBA-64D68D891597}']
  end;

  ///<summary>Provides a base class for .NET Framework attributes that report the use scope of attached properties.</summary>
  [DNTypeName('System.Windows.AttachedPropertyBrowsableAttribute')]
  DNAttachedPropertyBrowsableAttribute = interface(DDN.mscorlib.DNAttribute)
  ['{8B67D7A8-1467-3116-8A9D-6446AA4C2271}']
  { getters & setters } 

    function get_TypeId: DDN.mscorlib.DNObject;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DDN.mscorlib.DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property TypeId: DDN.mscorlib.DNObject read get_TypeId;
  end;

  TDNAttachedPropertyBrowsableAttribute = class(TDNGenericImport<DNAttachedPropertyBrowsableAttributeClass, DNAttachedPropertyBrowsableAttribute>) end;

  //-------------namespace: System.Windows----------------
  DNAttachedPropertyBrowsableForTypeAttributeClass = interface(DNAttachedPropertyBrowsableAttributeClass)
  ['{966CA66C-7D48-5EF7-BF48-9733D863C3B0}']
  { constructors } 

    ///<summary>Initializes a new instance of the <see cref="T:System.Windows.AttachedPropertyBrowsableForTypeAttribute" />
    ///  class, using the provided <paramref name="targetType" />
    ///  .</summary>
    ///  <param name="targetType">The intended type that scopes the use of the attached property where thisÂ .NET Framework attributeÂ applies.</param>
    {class} function init(targetType: DDN.mscorlib.DNType): DNAttachedPropertyBrowsableForTypeAttribute;

  end;

  ///<summary>Specifies that an attached property is browsable only for elements that derive from a specified type.</summary>
  [DNTypeName('System.Windows.AttachedPropertyBrowsableForTypeAttribute')]
  DNAttachedPropertyBrowsableForTypeAttribute = interface(DNAttachedPropertyBrowsableAttribute)
  ['{E71003C1-724B-3F32-9CF6-0418B4D65F6B}']
  { getters & setters } 

    function get_TargetType: DDN.mscorlib.DNType;
    function get_TypeId: DDN.mscorlib.DNObject;

  { methods } 

    ///<summary>Determines whether the current <see cref="T:System.Windows.AttachedPropertyBrowsableForTypeAttribute" />
    ///  .NET Framework attribute is equal to a specified object.</summary>
    ///  <param name="obj">The <see cref="T:System.Windows.AttachedPropertyBrowsableForTypeAttribute" />
    ///  to compare to the current <see cref="T:System.Windows.AttachedPropertyBrowsableForTypeAttribute" />
    ///  .</param>
    ///<returns><see langword="true" />
    ///  if the specified <see cref="T:System.Windows.AttachedPropertyBrowsableForTypeAttribute" />
    ///  is equal to the current <see cref="T:System.Windows.AttachedPropertyBrowsableForTypeAttribute" />
    ///  ; otherwise, <see langword="false" />
    ///  .</returns>
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    ///<summary>Returns the hash code for this <see cref="T:System.Windows.AttachedPropertyBrowsableForTypeAttribute" />
    ///  .NET Framework attribute.</summary>
    ///<returns>An unsigned 32-bit integer value.</returns>
    function GetHashCode: Int32;
    function Match(obj: DDN.mscorlib.DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>Gets the base type that scopes the use of the attached property where thisÂ .NET Framework attributeÂ applies.</summary>
    ///<returns>The requested <see cref="T:System.Type" />
    ///  .</returns>
    property TargetType: DDN.mscorlib.DNType read get_TargetType;
    ///<summary>Gets a unique type identifier for this <see cref="T:System.Windows.AttachedPropertyBrowsableForTypeAttribute" />
    ///  .NET Framework attribute.</summary>
    ///<returns>An object that is a unique identifier for the <see cref="T:System.Windows.AttachedPropertyBrowsableForTypeAttribute" />
    ///  .</returns>
    property TypeId: DDN.mscorlib.DNObject read get_TypeId;
  end;

  TDNAttachedPropertyBrowsableForTypeAttribute = class(TDNGenericImport<DNAttachedPropertyBrowsableForTypeAttributeClass, DNAttachedPropertyBrowsableForTypeAttribute>) end;

  //-------------namespace: System.Windows----------------
  DNAttachedPropertyBrowsableWhenAttributePresentAttributeClass = interface(DNAttachedPropertyBrowsableAttributeClass)
  ['{5DC529B1-399D-5FEF-8EEE-9F46F6059ECE}']
  { constructors } 

    ///<summary>Initializes a new instance of the <see cref="T:System.Windows.AttachedPropertyBrowsableWhenAttributePresentAttribute" />
    ///  class.</summary>
    ///  <param name="attributeType">The <see cref="T:System.Type" />
    ///  of the Â .NET Framework attribute that must also be applied on a class in order for the attached property to be browsable on the class where <see cref="T:System.Windows.AttachedPropertyBrowsableWhenAttributePresentAttribute" />
    ///  is applied..</param>
    {class} function init(attributeType: DDN.mscorlib.DNType): DNAttachedPropertyBrowsableWhenAttributePresentAttribute;

  end;

  ///<summary>Specifies that an attached property is only browsable on an element that also has another specific Â .NET Framework attributeÂ applied to its class definition.</summary>
  [DNTypeName('System.Windows.AttachedPropertyBrowsableWhenAttributePresentAttribute')]
  DNAttachedPropertyBrowsableWhenAttributePresentAttribute = interface(DNAttachedPropertyBrowsableAttribute)
  ['{E9A4B603-7C3D-3914-9782-EF145C185806}']
  { getters & setters } 

    function get_AttributeType: DDN.mscorlib.DNType;
    function get_TypeId: DDN.mscorlib.DNObject;

  { methods } 

    ///<summary>Determines whether the current <see cref="T:System.Windows.AttachedPropertyBrowsableWhenAttributePresentAttribute" />
    ///  .NET Framework attribute is equal to a specified object.</summary>
    ///  <param name="obj">The <see cref="T:System.Windows.AttachedPropertyBrowsableWhenAttributePresentAttribute" />
    ///  to compare to the current <see cref="T:System.Windows.AttachedPropertyBrowsableWhenAttributePresentAttribute" />
    ///  .</param>
    ///<returns><see langword="true" />
    ///  if the specified <see cref="T:System.Windows.AttachedPropertyBrowsableWhenAttributePresentAttribute" />
    ///  is equal to the current <see cref="T:System.Windows.AttachedPropertyBrowsableWhenAttributePresentAttribute" />
    ///  ; otherwise, <see langword="false" />
    ///  .</returns>
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    ///<summary>Returns the hash code for this <see cref="T:System.Windows.AttachedPropertyBrowsableWhenAttributePresentAttribute" />
    ///  .NET Framework attribute.</summary>
    ///<returns>An unsigned 32-bit integer value.</returns>
    function GetHashCode: Int32;
    function Match(obj: DDN.mscorlib.DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>Gets the type of the Â .NET Framework attributeÂ that must also be applied on a class.</summary>
    ///<returns>The Â .NET Framework attribute type.</returns>
    property AttributeType: DDN.mscorlib.DNType read get_AttributeType;
    property TypeId: DDN.mscorlib.DNObject read get_TypeId;
  end;

  TDNAttachedPropertyBrowsableWhenAttributePresentAttribute = class(TDNGenericImport<DNAttachedPropertyBrowsableWhenAttributePresentAttributeClass, DNAttachedPropertyBrowsableWhenAttributePresentAttribute>) end;

  //-------------namespace: System.Windows.Markup----------------
  DNDesignerSerializationOptionsAttributeClass = interface(DDN.mscorlib.DNAttributeClass)
  ['{C614AE2D-6B8D-5955-B839-555F3B70FDE9}']
  { constructors } 

    ///<summary>Initializes a new instance of the <see cref="T:System.Windows.Markup.DesignerSerializationOptionsAttribute" />
    ///  class.</summary>
    ///  <param name="designerSerializationOptions">Specifies how the property is to be serialized. </param>
    ///<exception cref="T:System.ComponentModel.InvalidEnumArgumentException"><paramref name="designerSerializationOptions" />
    ///  is not a valid <see cref="T:System.Windows.Markup.DesignerSerializationOptions" />
    ///  value.</exception>
    {class} function init(designerSerializationOptions: DNDesignerSerializationOptions): DNDesignerSerializationOptionsAttribute;

  end;

  ///<summary>Specifies the serialization flags for a property.</summary>
  [DNTypeName('System.Windows.Markup.DesignerSerializationOptionsAttribute')]
  DNDesignerSerializationOptionsAttribute = interface(DDN.mscorlib.DNAttribute)
  ['{6E86F54F-B211-38C9-A5CF-985DE37D20BC}']
  { getters & setters } 

    function get_DesignerSerializationOptions: DNDesignerSerializationOptions;
    function get_TypeId: DDN.mscorlib.DNObject;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DDN.mscorlib.DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>Gets the <see cref="T:System.Windows.Markup.DesignerSerializationOptions" />
    ///  set on the attribute.</summary>
    ///<returns>The serialization option, as a value of the enumeration.</returns>
    property DesignerSerializationOptions: DNDesignerSerializationOptions read get_DesignerSerializationOptions;
    property TypeId: DDN.mscorlib.DNObject read get_TypeId;
  end;

  TDNDesignerSerializationOptionsAttribute = class(TDNGenericImport<DNDesignerSerializationOptionsAttributeClass, DNDesignerSerializationOptionsAttribute>) end;

  //-------------namespace: System.Windows.Media----------------
  DNDisableDpiAwarenessAttributeClass = interface(DDN.mscorlib.DNAttributeClass)
  ['{331764CA-3753-540F-9BEA-492C3A6F8E9E}']
  { constructors } 

    ///<summary>Initializes a new instance of <see cref="T:System.Windows.Media.DisableDpiAwarenessAttribute" />
    ///  .</summary>
    {class} function init: DNDisableDpiAwarenessAttribute;

  end;

  ///<summary>Allows WPFÂ applications to disable dots per inch (dpi) awareness for all user interface elements.</summary>
  [DNTypeName('System.Windows.Media.DisableDpiAwarenessAttribute')]
  DNDisableDpiAwarenessAttribute = interface(DDN.mscorlib.DNAttribute)
  ['{79EE8AC3-DCDB-35A7-9CE9-2A27F838933E}']
  { getters & setters } 

    function get_TypeId: DDN.mscorlib.DNObject;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DDN.mscorlib.DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property TypeId: DDN.mscorlib.DNObject read get_TypeId;
  end;

  TDNDisableDpiAwarenessAttribute = class(TDNGenericImport<DNDisableDpiAwarenessAttributeClass, DNDisableDpiAwarenessAttribute>) end;

  //-------------namespace: System.ComponentModel----------------
  DNSortDescriptionCollectionClass = interface(DDN.mscorlib.DNCollectionClass<DNSortDescription>)
  ['{3F82F2F0-1F83-5D26-902D-64C828F77F00}']
  { constructors } 

    ///<summary>Initializes a new instance of the <see cref="T:System.ComponentModel.SortDescriptionCollection" />
    ///  class.</summary>
    {class} function init: DNSortDescriptionCollection;

  { static fields getter & setter } 

   function __fakeFieldGet_Empty: DNSortDescriptionCollection;

  { static fields } 

    ///<summary>Gets an empty and non-modifiable instance of <see cref="T:System.ComponentModel.SortDescriptionCollection" />
    ///  . </summary>
    {class} property Empty: DNSortDescriptionCollection read __fakeFieldGet_Empty;

  end;

  ///<summary>Represents a collection of <see cref="T:System.ComponentModel.SortDescription" />
  ///  objects.</summary>
  [DNTypeName('System.ComponentModel.SortDescriptionCollection')]
  DNSortDescriptionCollection = interface(DDN.mscorlib.DNCollection<DNSortDescription>)
  ['{4D31FCBB-7A91-3E0F-9E3A-E30A76D1F74A}']
  { getters & setters } 

    function get_Count: Int32;

  { methods } 

    procedure CopyTo(&array: TArray<DNSortDescription>; index: Int32);
    function &Contains(item: DNSortDescription): Boolean;
    function GetEnumerator: DDN.mscorlib.DNIEnumerator<DNSortDescription>;
    function IndexOf(item: DNSortDescription): Int32;
    procedure Insert(index: Int32; item: DNSortDescription);
    procedure RemoveAt(index: Int32);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Count: Int32 read get_Count;
  end;

  TDNSortDescriptionCollection = class(TDNGenericImport<DNSortDescriptionCollectionClass, DNSortDescriptionCollection>) end;

  //-------------namespace: System.ComponentModel----------------
  DNGroupDescriptionClass = interface(DNObjectClass)
  ['{072B00B2-AA86-5257-A309-232B0CE079AD}']
  end;

  ///<summary>Provides an abstract base class for types that describe how to divide the items in a collection into groups.</summary>
  [DNTypeName('System.ComponentModel.GroupDescription')]
  DNGroupDescription = interface(DDN.System.DNINotifyPropertyChanged)
  ['{B052C46C-1867-3D59-AD83-439B670DCE0F}']
  { getters & setters } 

    function get_GroupNames: DDN.System.DNObservableCollection<DDN.mscorlib.DNObject>;
    function get_SortDescriptions: DNSortDescriptionCollection;
    function get_CustomSort: DDN.mscorlib.DNIComparer;
    procedure set_CustomSort(value: DDN.mscorlib.DNIComparer);

  { methods } 

    ///<summary>Returns whether serialization processes should serialize the effective value of the <see cref="P:System.ComponentModel.GroupDescription.GroupNames" />
    ///  property on instances of this class.</summary>
    ///<returns>Returns <see langword="true" />
    ///  if the <see cref="P:System.ComponentModel.GroupDescription.GroupNames" />
    ///  property value should be serialized; otherwise, false.</returns>
    function ShouldSerializeGroupNames: Boolean;
    ///<summary>Returns whether serialization processes should serialize the effective value of the <see cref="P:System.ComponentModel.GroupDescription.SortDescriptions" />
    ///  property on instances of this class.</summary>
    ///<returns><see langword="true" />
    ///  if the <see cref="P:System.ComponentModel.GroupDescription.SortDescriptions" />
    ///  property value should be serialized; otherwise, <see langword="false" />
    ///  .</returns>
    function ShouldSerializeSortDescriptions: Boolean;
    ///<summary>Returns a value that indicates whether the group name and the item name match such that the item belongs to the group.</summary>
    ///  <param name="groupName">The name of the group to check.</param>
    ///  <param name="itemName">The name of the item to check.</param>
    ///<returns><see langword="true" />
    ///  if the names match and the item belongs to the group; otherwise, <see langword="false" />
    ///  .</returns>
    function NamesMatch(groupName: DDN.mscorlib.DNObject; itemName: DDN.mscorlib.DNObject): Boolean;
    ///<summary>Returns the group name(s) for the given item.</summary>
    ///  <param name="item">The item to return group names for.</param>
    ///  <param name="level">The level of grouping.</param>
    ///  <param name="culture">The <see cref="T:System.Globalization.CultureInfo" />
    ///  to supply to the converter.</param>
    ///<returns>The group name(s) for the given item.</returns>
    function GroupNameFromItem(item: DDN.mscorlib.DNObject; level: Int32; culture: DDN.mscorlib.DNCultureInfo): DDN.mscorlib.DNObject;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>Gets the collection of names that are used to initialize a group with a set of subgroups with the given names.</summary>
    ///<returns>The collection of names that are used to initialize a group with a set of subgroups with the given names.</returns>
    property GroupNames: DDN.System.DNObservableCollection<DDN.mscorlib.DNObject> read get_GroupNames;
    ///<summary>Gets the collection of sort criteria in which to sort the groups.</summary>
    ///<returns>The collection of sort criteria in which to sort the groups.</returns>
    property SortDescriptions: DNSortDescriptionCollection read get_SortDescriptions;
    ///<summary>Gets or sets a custom comparer that sorts groups using an object that implements <see cref="T:System.Collections.IComparer" />
    ///  .</summary>
    ///<returns> A custom comparer that sorts groups using an object that implements <see cref="T:System.Collections.IComparer" />
    ///  .</returns>
    property CustomSort: DDN.mscorlib.DNIComparer read get_CustomSort write set_CustomSort;
  end;

  TDNGroupDescription = class(TDNGenericImport<DNGroupDescriptionClass, DNGroupDescription>) end;

  //-------------namespace: System.ComponentModel----------------
  DNItemPropertyInfoClass = interface(DDN.mscorlib.DNObjectClass)
  ['{1535B3A4-09B3-50E4-8AA4-CA58A3003A7E}']
  { constructors } 

    ///<summary>Initializes a new instance of the <see cref="T:System.ComponentModel.ItemPropertyInfo" />
    ///  class. </summary>
    ///  <param name="name">The name of the property.</param>
    ///  <param name="type">The type of the property.</param>
    ///  <param name="descriptor">An object that contains additional information about the property.</param>
    {class} function init(name: string; &type: DDN.mscorlib.DNType; descriptor: DDN.mscorlib.DNObject): DNItemPropertyInfo;

  end;

  ///<summary>Contains information about a property.</summary>
  [DNTypeName('System.ComponentModel.ItemPropertyInfo')]
  DNItemPropertyInfo = interface(DDN.mscorlib.DNObject)
  ['{208737A0-8321-3C1B-8FFC-98636B44AB07}']
  { getters & setters } 

    function get_Name: string;
    function get_PropertyType: DDN.mscorlib.DNType;
    function get_Descriptor: DDN.mscorlib.DNObject;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>Gets the name of the property.</summary>
    ///<returns>The name of the property.</returns>
    property Name: string read get_Name;
    ///<summary>Gets the type of the property.</summary>
    ///<returns>The type of the property.</returns>
    property PropertyType: DDN.mscorlib.DNType read get_PropertyType;
    ///<summary>Get an object that contains additional information about the property.</summary>
    ///<returns>An object that contains additional information about the property.</returns>
    property Descriptor: DDN.mscorlib.DNObject read get_Descriptor;
  end;

  TDNItemPropertyInfo = class(TDNGenericImport<DNItemPropertyInfoClass, DNItemPropertyInfo>) end;

  //-------------namespace: System.ComponentModel----------------
  DNDependencyPropertyDescriptorClass = interface(DNObjectClass)
  ['{D32F3FD0-BCCE-5AEE-9BE7-78A506C8514B}']
  { static methods } 

    ///<summary>Returns a <see cref="T:System.ComponentModel.DependencyPropertyDescriptor" />
    ///  for a provided <see cref="T:System.ComponentModel.PropertyDescriptor" />
    ///  .</summary>
    ///  <param name="property">The <see cref="T:System.ComponentModel.PropertyDescriptor" />
    ///  to check.</param>
    ///<returns>If the property described by <paramref name="property" />
    ///  is a dependency property, returns a valid <see cref="T:System.ComponentModel.DependencyPropertyDescriptor" />
    ///  . Otherwise, returns a <see langword="null" />
    ///<see cref="T:System.ComponentModel.DependencyPropertyDescriptor" />
    ///  .</returns>
    {class} function FromProperty(&property: DDN.System.DNPropertyDescriptor): DNDependencyPropertyDescriptor; overload;
    ///<summary>Returns a <see cref="T:System.ComponentModel.DependencyPropertyDescriptor" />
    ///  for a provided dependency property and target type.</summary>
    ///  <param name="dependencyProperty">The identifier for a dependency property.</param>
    ///  <param name="targetType">The type of the object where the property is set.</param>
    ///<returns>A <see cref="T:System.ComponentModel.DependencyPropertyDescriptor" />
    ///  for the provided dependency property.</returns>
    {class} function FromProperty(dependencyProperty: DNDependencyProperty; targetType: DDN.mscorlib.DNType): DNDependencyPropertyDescriptor; overload;
    ///<summary>Returns a <see cref="T:System.ComponentModel.DependencyPropertyDescriptor" />
    ///  for a provided property name.</summary>
    ///  <param name="name">The registered name of a dependency property or an attached property.</param>
    ///  <param name="ownerType">The <see cref="T:System.Type" />
    ///  of the object that owns the property definition.</param>
    ///  <param name="targetType">The <see cref="T:System.Type" />
    ///  of the object you want to set the property for.</param>
    ///<returns>The requested <see cref="T:System.ComponentModel.DependencyPropertyDescriptor" />
    ///  .</returns>
    {class} function FromName(name: string; ownerType: DDN.mscorlib.DNType; targetType: DDN.mscorlib.DNType): DNDependencyPropertyDescriptor; overload;
    ///<summary>Returns a <see cref="T:System.ComponentModel.DependencyPropertyDescriptor" />
    ///  for a provided property name.</summary>
    ///  <param name="name">The registered name of a dependency property or an attached property.</param>
    ///  <param name="ownerType">The <see cref="T:System.Type" />
    ///  of the object that owns the property definition.</param>
    ///  <param name="targetType">The <see cref="T:System.Type" />
    ///  of the object you want to set the property for.</param>
    ///  <param name="ignorePropertyType">Specifies to ignore the property type.</param>
    ///<returns>The requested <see cref="T:System.ComponentModel.DependencyPropertyDescriptor" />
    ///  .</returns>
    {class} function FromName(name: string; ownerType: DDN.mscorlib.DNType; targetType: DDN.mscorlib.DNType; ignorePropertyType: Boolean): DNDependencyPropertyDescriptor; overload;

  end;

  ///<summary>Provides an extension of <see cref="T:System.ComponentModel.PropertyDescriptor" />
  ///  that accounts for the additional property characteristics of a dependency property.</summary>
  [DNTypeName('System.ComponentModel.DependencyPropertyDescriptor')]
  DNDependencyPropertyDescriptor = interface(DNObject)
  ['{BD362B95-A4D3-3A87-9B76-81675EA7454E}']
  { getters & setters } 

    function get_DependencyProperty: DNDependencyProperty;
    function get_IsAttached: Boolean;
    function get_Metadata: DNPropertyMetadata;
    function get_ComponentType: DDN.mscorlib.DNType;
    function get_IsReadOnly: Boolean;
    function get_PropertyType: DDN.mscorlib.DNType;
    function get_Attributes: DDN.System.DNAttributeCollection;
    function get_Category: string;
    function get_Description: string;
    function get_DesignTimeOnly: Boolean;
    function get_DisplayName: string;
    function get_Converter: DDN.System.DNTypeConverter;
    function get_IsBrowsable: Boolean;
    function get_IsLocalizable: Boolean;
    function get_SupportsChangeEvents: Boolean;
    function get_DesignerCoerceValueCallback: DNCoerceValueCallback;
    procedure set_DesignerCoerceValueCallback(value: DNCoerceValueCallback);
    function get_SerializationVisibility: DDN.System.DNDesignerSerializationVisibility;
    function get_Name: string;

  { methods } 

    ///<summary>Compares two <see cref="T:System.ComponentModel.DependencyPropertyDescriptor" />
    ///  instances for equality.</summary>
    ///  <param name="obj">The <see cref="T:System.ComponentModel.DependencyPropertyDescriptor" />
    ///  to compare with the current instance. </param>
    ///<returns><see langword="true" />
    ///  if the values are equivalent; otherwise, <see langword="false" />
    ///  .</returns>
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    ///<summary>Returns the hash code for this <see cref="T:System.ComponentModel.DependencyPropertyDescriptor" />
    ///  .</summary>
    ///<returns>A 32-bit signed integer hash code. </returns>
    function GetHashCode: Int32;
    ///<summary>Converts the value of this instance to its equivalent string representation.</summary>
    ///<returns>Returns the <see cref="P:System.ComponentModel.MemberDescriptor.Name" />
    ///  value.</returns>
    function ToString: string;
    ///<summary>Returns whether resetting an object changes its value.</summary>
    ///  <param name="component">The component to test for reset capability. </param>
    ///<returns><see langword="true" />
    ///  if resetting the component changes its value; otherwise, <see langword="false" />
    ///  .</returns>
    function CanResetValue(component: DDN.mscorlib.DNObject): Boolean;
    ///<summary>Resturns the current value of the property on a component.</summary>
    ///  <param name="component">The component instance.</param>
    ///<returns>The requested value.</returns>
    function GetValue(component: DDN.mscorlib.DNObject): DDN.mscorlib.DNObject;
    ///<summary>Resets the value for this property of the component to the default value.</summary>
    ///  <param name="component">The component with the property value that is to be reset to the default value. </param>
    procedure ResetValue(component: DDN.mscorlib.DNObject);
    ///<summary>Sets the value of the component to a different value.</summary>
    ///  <param name="component">The component with the property value that is to be set. </param>
    ///  <param name="value">The new value.</param>
    procedure SetValue(component: DDN.mscorlib.DNObject; value: DDN.mscorlib.DNObject);
    ///<summary>Indicates whether the value of this property needs to be persisted by serialization processes.</summary>
    ///  <param name="component">The component with the property to be examined for persistence.</param>
    ///<returns><see langword="true" />
    ///  if the property should be persisted; otherwise, <see langword="false" />
    ///  .</returns>
    function ShouldSerializeValue(component: DDN.mscorlib.DNObject): Boolean;
    ///<summary>Enables other objects to be notified when this property changes. </summary>
    ///  <param name="component">The component to add the handler for.</param>
    ///  <param name="handler">The delegate to add as a listener.</param>
    procedure AddValueChanged(component: DDN.mscorlib.DNObject; handler: DDN.mscorlib.DNEventHandler);
    ///<summary>Enables other objects to be notified when this property changes.</summary>
    ///  <param name="component">The component to add the handler for. </param>
    ///  <param name="handler">The delegate to add as a listener. </param>
    procedure RemoveValueChanged(component: DDN.mscorlib.DNObject; handler: DDN.mscorlib.DNEventHandler);
    ///<summary>Returns a <see cref="T:System.ComponentModel.PropertyDescriptorCollection" />
    ///  .</summary>
    ///  <param name="instance">A component to get the properties for.</param>
    ///  <param name="filter">An array of type <see cref="T:System.Attribute" />
    ///  to use as a filter. </param>
    ///<returns>A <see cref="T:System.ComponentModel.PropertyDescriptorCollection" />
    ///  with the properties that match the specified attributes for the specified component.</returns>
    function GetChildProperties(instance: DDN.mscorlib.DNObject; filter: TArray<DDN.mscorlib.DNAttribute>): DDN.System.DNPropertyDescriptorCollection; overload;
    ///<summary>Gets an editor of the specified type.</summary>
    ///  <param name="editorBaseType">The base type of editor, which is used to differentiate between multiple editors that a property supports. </param>
    ///<returns>An instance of the requested editor type, or <see langword="null" />
    ///  if an editor cannot be found.</returns>
    function GetEditor(editorBaseType: DDN.mscorlib.DNType): DDN.mscorlib.DNObject;
    function GetChildProperties: DDN.System.DNPropertyDescriptorCollection; overload;
    function GetChildProperties(filter: TArray<DDN.mscorlib.DNAttribute>): DDN.System.DNPropertyDescriptorCollection; overload;
    function GetChildProperties(instance: DDN.mscorlib.DNObject): DDN.System.DNPropertyDescriptorCollection; overload;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    ///<summary>Returns the dependency property identifier.</summary>
    ///<returns>The dependency property identifier.</returns>
    property DependencyProperty: DNDependencyProperty read get_DependencyProperty;
    ///<summary>Gets a value that indicates whether the property is registered as an attached property and is being used through an attached usage.</summary>
    ///<returns><see langword="true" />
    ///  if the property is an attached property; otherwise, <see langword="false" />
    ///  .</returns>
    property IsAttached: Boolean read get_IsAttached;
    ///<summary>Gets the metadata associated with the dependency property.</summary>
    ///<returns>The dependency property metadata.</returns>
    property Metadata: DNPropertyMetadata read get_Metadata;
    ///<summary>Gets the type of the component this property is bound to.</summary>
    ///<returns>A <see cref="T:System.Type" />
    ///  that represents the type of component this property is bound to. When <see cref="M:System.ComponentModel.DependencyPropertyDescriptor.GetValue(System.Object)" />
    ///  or <see cref="M:System.ComponentModel.DependencyPropertyDescriptor.SetValue(System.Object,System.Object)" />
    ///  are invoked, the object specified might be an instance of this type.</returns>
    property ComponentType: DDN.mscorlib.DNType read get_ComponentType;
    ///<summary>Gets a value indicating whether this property is read-only.</summary>
    ///<returns><see langword="true" />
    ///  if the property is read-only; otherwise, <see langword="false" />
    ///  .</returns>
    property IsReadOnly: Boolean read get_IsReadOnly;
    ///<summary>Gets the represented <see cref="T:System.Type" />
    ///  of the dependency property.</summary>
    ///<returns>The <see cref="T:System.Type" />
    ///  of the dependency property.</returns>
    property PropertyType: DDN.mscorlib.DNType read get_PropertyType;
    ///<summary>Gets the collection of attributes for this member.</summary>
    ///<returns>The <see cref="T:System.ComponentModel.AttributeCollection" />
    ///  collection of attributes.</returns>
    property Attributes: DDN.System.DNAttributeCollection read get_Attributes;
    ///<summary>Gets the name of the category that the member belongs to, as specified in the <see cref="T:System.ComponentModel.CategoryAttribute" />
    ///  .</summary>
    ///<returns>The name of the category to which the member belongs. If there is no <see cref="T:System.ComponentModel.CategoryAttribute" />
    ///  , the category name is set to the default category, <see langword="Misc" />
    ///  .</returns>
    property Category: string read get_Category;
    ///<summary>Gets the description of the member, as specified in the <see cref="T:System.ComponentModel.DescriptionAttribute" />
    ///  .</summary>
    ///<returns>The description of the member. If there is no <see cref="T:System.ComponentModel.DescriptionAttribute" />
    ///  , the property value is set to the default, which is an empty string ("").</returns>
    property Description: string read get_Description;
    ///<summary>Gets whether this member should be set only at design time, as specified in the <see cref="T:System.ComponentModel.DesignOnlyAttribute" />
    ///  .</summary>
    ///<returns><see langword="true" />
    ///  if this member should be set only at design time; <see langword="false" />
    ///  if the member can be set during run time. If there is no <see cref="T:System.ComponentModel.DesignOnlyAttribute" />
    ///  , the return value is the default, which is <see langword="false" />
    ///  .</returns>
    property DesignTimeOnly: Boolean read get_DesignTimeOnly;
    ///<summary>Gets the name that can be displayed in a window, such as a Properties window.</summary>
    ///<returns>The name to display for the property.</returns>
    property DisplayName: string read get_DisplayName;
    ///<summary>Gets the type converter for this property.</summary>
    ///<returns>A <see cref="T:System.ComponentModel.TypeConverter" />
    ///  that is used to convert the <see cref="T:System.Type" />
    ///  of this property.</returns>
    property Converter: DDN.System.DNTypeConverter read get_Converter;
    ///<summary>Gets a value that indicates the value of the <see cref="T:System.ComponentModel.BrowsableAttribute" />
    ///  on the property.</summary>
    ///<returns><see langword="true" />
    ///  if the <see cref="T:System.ComponentModel.BrowsableAttribute" />
    ///  was specified on the property; otherwise, <see langword="false" />
    ///  .</returns>
    property IsBrowsable: Boolean read get_IsBrowsable;
    ///<summary>Gets a value indicating whether this property should be localized, as specified in the <see cref="T:System.ComponentModel.LocalizableAttribute" />
    ///  .</summary>
    ///<returns><see langword="true" />
    ///  if the member is marked with the <see cref="T:System.ComponentModel.LocalizableAttribute" />
    ///  constructor of the value true; otherwise, <see langword="false" />
    ///  .</returns>
    property IsLocalizable: Boolean read get_IsLocalizable;
    ///<summary>Indicates whether value change notifications for this property may originate from outside the property descriptor, such as from the component itself, or whether notifications will only originate from direct calls made to <see cref="M:System.ComponentModel.DependencyPropertyDescriptor.SetValue(System.Object,System.Object)" />
    ///  . </summary>
    ///<returns><see langword="true" />
    ///  if notifications for this property may originate from outside the property descriptor, such as from the component itself. <see langword="false" />
    ///  if notifications will only originate from direct calls made to <see cref="M:System.ComponentModel.DependencyPropertyDescriptor.SetValue(System.Object,System.Object)" />
    ///  .</returns>
    property SupportsChangeEvents: Boolean read get_SupportsChangeEvents;
    ///<summary>Gets or sets a callback that designers use to modify the effective value of a dependency property before the dependency property value is stored in the dependency property engine.</summary>
    ///<returns>A callback that designers use to modify the effective value of a dependency property before the dependency property value is stored in the dependency property engine.</returns>
    property DesignerCoerceValueCallback: DNCoerceValueCallback read get_DesignerCoerceValueCallback write set_DesignerCoerceValueCallback;
    property SerializationVisibility: DDN.System.DNDesignerSerializationVisibility read get_SerializationVisibility;
    property Name: string read get_Name;
  end;

  TDNDependencyPropertyDescriptor = class(TDNGenericImport<DNDependencyPropertyDescriptorClass, DNDependencyPropertyDescriptor>) end;

  //-------------namespace: System.Windows----------------
  DNExpressionConverterClass = interface(DNObjectClass)
  ['{72281B02-4880-5234-A8C6-AAA267714B94}']
  { constructors } 

    ///<summary>Initializes a new instance of the <see cref="T:System.Windows.ExpressionConverter" />
    ///  class. </summary>
    {class} function init: DNExpressionConverter;

  end;

  ///<summary>Converts instances of <see cref="T:System.Windows.Expression" />
  ///  to and from other types. </summary>
  [DNTypeName('System.Windows.ExpressionConverter')]
  DNExpressionConverter = interface(DNObject)
  ['{5E80B855-1CDF-30F1-A7D9-F660D45E6021}']
  { methods } 

    ///<summary>Returns whether this converter can convert from a source object to an <see cref="T:System.Windows.Expression" />
    ///  object. </summary>
    ///  <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext" />
    ///  that provides a format context. </param>
    ///  <param name="sourceType">A <see cref="T:System.Type" />
    ///  that represents the type you wish to convert from.</param>
    ///<returns>Always <see langword="false" />
    ///  .</returns>
    function CanConvertFrom(context: DDN.System.DNITypeDescriptorContext; sourceType: DDN.mscorlib.DNType): Boolean; overload;
    ///<summary>Returns whether this converter can convert an <see cref="T:System.Windows.Expression" />
    ///  object to a specific destination type. </summary>
    ///  <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext" />
    ///  that provides a format context. </param>
    ///  <param name="destinationType">A <see cref="T:System.Type" />
    ///  that represents the type you wish to convert to.</param>
    ///<returns>Always <see langword="false" />
    ///  .</returns>
    function CanConvertTo(context: DDN.System.DNITypeDescriptorContext; destinationType: DDN.mscorlib.DNType): Boolean; overload;
    ///<summary>Converts the provided value to the <see cref="T:System.Windows.Expression" />
    ///  type. </summary>
    ///  <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext" />
    ///  that provides a format context. </param>
    ///  <param name="culture">The <see cref="T:System.Globalization.CultureInfo" />
    ///  to use as the current culture. </param>
    ///  <param name="value">The object to convert.</param>
    ///<returns>Always throws an exception and returns <see langword="null" />
    ///  .</returns>
    function ConvertFrom(context: DDN.System.DNITypeDescriptorContext; culture: DDN.mscorlib.DNCultureInfo; value: DDN.mscorlib.DNObject): DDN.mscorlib.DNObject; overload;
    ///<summary>Converts the provided <see cref="T:System.Windows.Expression" />
    ///  object to the specified type.</summary>
    ///  <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext" />
    ///  that provides a format context. </param>
    ///  <param name="culture">The <see cref="T:System.Globalization.CultureInfo" />
    ///  to use as the current culture. </param>
    ///  <param name="value">The object to convert.</param>
    ///  <param name="destinationType">A <see cref="T:System.Type" />
    ///  that represents the type you wish to convert to.</param>
    ///<returns>Always throws an exception and returns <see langword="null" />
    ///  .</returns>
    function ConvertTo(context: DDN.System.DNITypeDescriptorContext; culture: DDN.mscorlib.DNCultureInfo; value: DDN.mscorlib.DNObject; destinationType: DDN.mscorlib.DNType): DDN.mscorlib.DNObject; overload;
    function CanConvertFrom(sourceType: DDN.mscorlib.DNType): Boolean; overload;
    function CanConvertTo(destinationType: DDN.mscorlib.DNType): Boolean; overload;
    function ConvertFrom(value: DDN.mscorlib.DNObject): DDN.mscorlib.DNObject; overload;
    function ConvertFromInvariantString(text: string): DDN.mscorlib.DNObject; overload;
    function ConvertFromInvariantString(context: DDN.System.DNITypeDescriptorContext; text: string): DDN.mscorlib.DNObject; overload;
    function ConvertFromString(text: string): DDN.mscorlib.DNObject; overload;
    function ConvertFromString(context: DDN.System.DNITypeDescriptorContext; text: string): DDN.mscorlib.DNObject; overload;
    function ConvertFromString(context: DDN.System.DNITypeDescriptorContext; culture: DDN.mscorlib.DNCultureInfo; text: string): DDN.mscorlib.DNObject; overload;
    function ConvertTo(value: DDN.mscorlib.DNObject; destinationType: DDN.mscorlib.DNType): DDN.mscorlib.DNObject; overload;
    function ConvertToInvariantString(value: DDN.mscorlib.DNObject): string; overload;
    function ConvertToInvariantString(context: DDN.System.DNITypeDescriptorContext; value: DDN.mscorlib.DNObject): string; overload;
    function ConvertToString(value: DDN.mscorlib.DNObject): string; overload;
    function ConvertToString(context: DDN.System.DNITypeDescriptorContext; value: DDN.mscorlib.DNObject): string; overload;
    function ConvertToString(context: DDN.System.DNITypeDescriptorContext; culture: DDN.mscorlib.DNCultureInfo; value: DDN.mscorlib.DNObject): string; overload;
    function CreateInstance(propertyValues: DDN.mscorlib.DNIDictionary): DDN.mscorlib.DNObject; overload;
    function CreateInstance(context: DDN.System.DNITypeDescriptorContext; propertyValues: DDN.mscorlib.DNIDictionary): DDN.mscorlib.DNObject; overload;
    function GetCreateInstanceSupported: Boolean; overload;
    function GetCreateInstanceSupported(context: DDN.System.DNITypeDescriptorContext): Boolean; overload;
    function GetProperties(value: DDN.mscorlib.DNObject): DDN.System.DNPropertyDescriptorCollection; overload;
    function GetProperties(context: DDN.System.DNITypeDescriptorContext; value: DDN.mscorlib.DNObject; attributes: TArray<DDN.mscorlib.DNAttribute>): DDN.System.DNPropertyDescriptorCollection; overload;
    function GetPropertiesSupported: Boolean; overload;
    function GetPropertiesSupported(context: DDN.System.DNITypeDescriptorContext): Boolean; overload;
    function GetStandardValues: DDN.mscorlib.DNICollection; overload;
    function GetStandardValues(context: DDN.System.DNITypeDescriptorContext): DDN.System.DNTypeConverter_StandardValuesCollection; overload;
    function GetStandardValuesExclusive: Boolean; overload;
    function GetStandardValuesExclusive(context: DDN.System.DNITypeDescriptorContext): Boolean; overload;
    function GetStandardValuesSupported: Boolean; overload;
    function GetStandardValuesSupported(context: DDN.System.DNITypeDescriptorContext): Boolean; overload;
    function IsValid(value: DDN.mscorlib.DNObject): Boolean; overload;
    function IsValid(context: DDN.System.DNITypeDescriptorContext; value: DDN.mscorlib.DNObject): Boolean; overload;
    function GetProperties(context: DDN.System.DNITypeDescriptorContext; value: DDN.mscorlib.DNObject): DDN.System.DNPropertyDescriptorCollection; overload;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNExpressionConverter = class(TDNGenericImport<DNExpressionConverterClass, DNExpressionConverter>) end;

  //-------------namespace: System.Windows.Input----------------
  DNKeyConverterClass = interface(DNObjectClass)
  ['{41C66CB3-3BAE-5A6A-8DC7-AA608ED42834}']
  { constructors } 

    ///<summary>Initializes a new instance of the <see cref="T:System.Windows.Input.Key" />
    ///  class. </summary>
    {class} function init: DNKeyConverter;

  end;

  ///<summary>Converts a <see cref="T:System.Windows.Input.Key" />
  ///  object to and from other types.</summary>
  [DNTypeName('System.Windows.Input.KeyConverter')]
  DNKeyConverter = interface(DNObject)
  ['{3865113F-3FF6-3475-A398-F3552F183825}']
  { methods } 

    ///<summary>Attempts to convert the specified object to a <see cref="T:System.Windows.Input.Key" />
    ///  , using the specified context.</summary>
    ///  <param name="context">A format context that provides information about the environment from which this converter is being invoked.</param>
    ///  <param name="culture">Culture specific information.</param>
    ///  <param name="source">The object to convert.</param>
    ///<returns>The converted object.</returns>
    ///<exception cref="T:System.NotSupportedException"><paramref name="source" />
    ///  cannot be converted.</exception>
    function ConvertFrom(context: DDN.System.DNITypeDescriptorContext; culture: DDN.mscorlib.DNCultureInfo; source: DDN.mscorlib.DNObject): DDN.mscorlib.DNObject; overload;
    ///<summary>Determines whether an object of the specified type can be converted to an instance of <see cref="T:System.Windows.Input.Key" />
    ///  , using the specified context. </summary>
    ///  <param name="context">A format context that provides information about the environment from which this converter is being invoked.</param>
    ///  <param name="sourceType">The type being evaluated for conversion.</param>
    ///<returns><see langword="true" />
    ///  if <paramref name="sourceType" />
    ///  is of type <see cref="T:System.String" />
    ///  ; otherwise, <see langword="false" />
    ///  .</returns>
    function CanConvertFrom(context: DDN.System.DNITypeDescriptorContext; sourceType: DDN.mscorlib.DNType): Boolean; overload;
    ///<summary>Determines whether an instance of <see cref="T:System.Windows.Input.Key" />
    ///  can be converted to the specified type, using the specified context.</summary>
    ///  <param name="context">A format context that provides information about the environment from which this converter is being invoked.</param>
    ///  <param name="destinationType">The type being evaluated for conversion.</param>
    ///<returns><see langword="true" />
    ///  if <paramref name="destinationType" />
    ///  is of type <see cref="T:System.String" />
    ///  ; otherwise, <see langword="false" />
    ///  .</returns>
    function CanConvertTo(context: DDN.System.DNITypeDescriptorContext; destinationType: DDN.mscorlib.DNType): Boolean; overload;
    ///<summary>Attempts to convert a <see cref="T:System.Windows.Input.Key" />
    ///  to the specified type, using the specified context.</summary>
    ///  <param name="context">A format context that provides information about the environment from which this converter is being invoked.</param>
    ///  <param name="culture">Culture specific information.</param>
    ///  <param name="value">The object to convert.</param>
    ///  <param name="destinationType">The type to convert the object to.</param>
    ///<returns>The converted object.</returns>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="destinationType" />
    ///  is <see langword="null" />
    ///  .</exception><exception cref="T:System.NotSupportedException"><paramref name="value" />
    ///  cannot be converted to <paramref name="destinationType" />
    ///  .</exception>
    function ConvertTo(context: DDN.System.DNITypeDescriptorContext; culture: DDN.mscorlib.DNCultureInfo; value: DDN.mscorlib.DNObject; destinationType: DDN.mscorlib.DNType): DDN.mscorlib.DNObject; overload;
    function CanConvertFrom(sourceType: DDN.mscorlib.DNType): Boolean; overload;
    function CanConvertTo(destinationType: DDN.mscorlib.DNType): Boolean; overload;
    function ConvertFrom(value: DDN.mscorlib.DNObject): DDN.mscorlib.DNObject; overload;
    function ConvertFromInvariantString(text: string): DDN.mscorlib.DNObject; overload;
    function ConvertFromInvariantString(context: DDN.System.DNITypeDescriptorContext; text: string): DDN.mscorlib.DNObject; overload;
    function ConvertFromString(text: string): DDN.mscorlib.DNObject; overload;
    function ConvertFromString(context: DDN.System.DNITypeDescriptorContext; text: string): DDN.mscorlib.DNObject; overload;
    function ConvertFromString(context: DDN.System.DNITypeDescriptorContext; culture: DDN.mscorlib.DNCultureInfo; text: string): DDN.mscorlib.DNObject; overload;
    function ConvertTo(value: DDN.mscorlib.DNObject; destinationType: DDN.mscorlib.DNType): DDN.mscorlib.DNObject; overload;
    function ConvertToInvariantString(value: DDN.mscorlib.DNObject): string; overload;
    function ConvertToInvariantString(context: DDN.System.DNITypeDescriptorContext; value: DDN.mscorlib.DNObject): string; overload;
    function ConvertToString(value: DDN.mscorlib.DNObject): string; overload;
    function ConvertToString(context: DDN.System.DNITypeDescriptorContext; value: DDN.mscorlib.DNObject): string; overload;
    function ConvertToString(context: DDN.System.DNITypeDescriptorContext; culture: DDN.mscorlib.DNCultureInfo; value: DDN.mscorlib.DNObject): string; overload;
    function CreateInstance(propertyValues: DDN.mscorlib.DNIDictionary): DDN.mscorlib.DNObject; overload;
    function CreateInstance(context: DDN.System.DNITypeDescriptorContext; propertyValues: DDN.mscorlib.DNIDictionary): DDN.mscorlib.DNObject; overload;
    function GetCreateInstanceSupported: Boolean; overload;
    function GetCreateInstanceSupported(context: DDN.System.DNITypeDescriptorContext): Boolean; overload;
    function GetProperties(value: DDN.mscorlib.DNObject): DDN.System.DNPropertyDescriptorCollection; overload;
    function GetProperties(context: DDN.System.DNITypeDescriptorContext; value: DDN.mscorlib.DNObject; attributes: TArray<DDN.mscorlib.DNAttribute>): DDN.System.DNPropertyDescriptorCollection; overload;
    function GetPropertiesSupported: Boolean; overload;
    function GetPropertiesSupported(context: DDN.System.DNITypeDescriptorContext): Boolean; overload;
    function GetStandardValues: DDN.mscorlib.DNICollection; overload;
    function GetStandardValues(context: DDN.System.DNITypeDescriptorContext): DDN.System.DNTypeConverter_StandardValuesCollection; overload;
    function GetStandardValuesExclusive: Boolean; overload;
    function GetStandardValuesExclusive(context: DDN.System.DNITypeDescriptorContext): Boolean; overload;
    function GetStandardValuesSupported: Boolean; overload;
    function GetStandardValuesSupported(context: DDN.System.DNITypeDescriptorContext): Boolean; overload;
    function IsValid(value: DDN.mscorlib.DNObject): Boolean; overload;
    function IsValid(context: DDN.System.DNITypeDescriptorContext; value: DDN.mscorlib.DNObject): Boolean; overload;
    function GetProperties(context: DDN.System.DNITypeDescriptorContext; value: DDN.mscorlib.DNObject): DDN.System.DNPropertyDescriptorCollection; overload;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNKeyConverter = class(TDNGenericImport<DNKeyConverterClass, DNKeyConverter>) end;

  //-------------namespace: System.Windows.Input----------------
  DNModifierKeysConverterClass = interface(DNObjectClass)
  ['{69F2EA22-7E62-5528-B1BF-205360C997E3}']
  { constructors } 

    ///<summary>Initializes a new instance of the <see cref="T:System.Windows.Input.ModifierKeysConverter" />
    ///  class.</summary>
    {class} function init: DNModifierKeysConverter;

  { static methods } 

    ///<summary>Determines whether the specified value is a valid <see cref="T:System.Windows.Input.ModifierKeys" />
    ///  value. </summary>
    ///  <param name="modifierKeys">The value to check for validity.</param>
    ///<returns><see langword="true" />
    ///  if input is a valid <see cref="T:System.Windows.Input.ModifierKeys" />
    ///  value; otherwise, <see langword="false" />
    ///  .</returns>
    {class} function IsDefinedModifierKeys(modifierKeys: DNModifierKeys): Boolean;

  end;

  ///<summary>Converts a <see cref="T:System.Windows.Input.ModifierKeys" />
  ///  object to and from other types.</summary>
  [DNTypeName('System.Windows.Input.ModifierKeysConverter')]
  DNModifierKeysConverter = interface(DNObject)
  ['{F6DA1D6C-511E-3DD9-8F7E-32BF2F79895B}']
  { methods } 

    ///<summary>Determines whether an object of the specified type can be converted to an instance of <see cref="T:System.Windows.Input.ModifierKeys" />
    ///  , using the specified context.</summary>
    ///  <param name="context">A format context that provides information about the environment from which this converter is being invoked.</param>
    ///  <param name="sourceType">The type being evaluated for conversion.</param>
    ///<returns><see langword="true" />
    ///  if <paramref name="sourceType" />
    ///  is type <see cref="T:System.String" />
    ///  ; otherwise, <see langword="false" />
    ///  .</returns>
    function CanConvertFrom(context: DDN.System.DNITypeDescriptorContext; sourceType: DDN.mscorlib.DNType): Boolean; overload;
    ///<summary>Determines whether an instance of <see cref="T:System.Windows.Input.ModifierKeys" />
    ///  can be converted to the specified type, using the specified context.</summary>
    ///  <param name="context">A format context that provides information about the environment from which this converter is being invoked.</param>
    ///  <param name="destinationType">The type being evaluated for conversion.</param>
    ///<returns><see langword="true" />
    ///  if <paramref name="destinationType" />
    ///  is type <see cref="T:System.String" />
    ///  ; otherwise, <see langword="false" />
    ///  .</returns>
    function CanConvertTo(context: DDN.System.DNITypeDescriptorContext; destinationType: DDN.mscorlib.DNType): Boolean; overload;
    ///<summary>Attempts to convert the specified object to a <see cref="T:System.Windows.Input.ModifierKeys" />
    ///  , using the specified context.</summary>
    ///  <param name="context">A format context that provides information about the environment from which this converter is being invoked.</param>
    ///  <param name="culture">Culture specific information.</param>
    ///  <param name="source">The object to convert.</param>
    ///<returns>The converted object.</returns>
    ///<exception cref="T:System.NotSupportedException"><paramref name="source" />
    ///  cannot be converted.</exception>
    function ConvertFrom(context: DDN.System.DNITypeDescriptorContext; culture: DDN.mscorlib.DNCultureInfo; source: DDN.mscorlib.DNObject): DDN.mscorlib.DNObject; overload;
    ///<summary>Attempts to convert a <see cref="T:System.Windows.Input.ModifierKeys" />
    ///  to the specified type, using the specified context.</summary>
    ///  <param name="context">A format context that provides information about the environment from which this converter is being invoked.</param>
    ///  <param name="culture">Culture specific information.</param>
    ///  <param name="value">The object to convert.</param>
    ///  <param name="destinationType">The type to convert the object to.</param>
    ///<returns>The converted object.</returns>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="destinationType" />
    ///  is <see langword="null" />
    ///  .</exception><exception cref="T:System.ComponentModel.InvalidEnumArgumentException"><paramref name="value" />
    ///  does not map to a valid <see cref="T:System.Windows.Input.ModifierKeys" />
    ///  .</exception><exception cref="T:System.NotSupportedException"><paramref name="value" />
    ///  cannot be converted.</exception>
    function ConvertTo(context: DDN.System.DNITypeDescriptorContext; culture: DDN.mscorlib.DNCultureInfo; value: DDN.mscorlib.DNObject; destinationType: DDN.mscorlib.DNType): DDN.mscorlib.DNObject; overload;
    function CanConvertFrom(sourceType: DDN.mscorlib.DNType): Boolean; overload;
    function CanConvertTo(destinationType: DDN.mscorlib.DNType): Boolean; overload;
    function ConvertFrom(value: DDN.mscorlib.DNObject): DDN.mscorlib.DNObject; overload;
    function ConvertFromInvariantString(text: string): DDN.mscorlib.DNObject; overload;
    function ConvertFromInvariantString(context: DDN.System.DNITypeDescriptorContext; text: string): DDN.mscorlib.DNObject; overload;
    function ConvertFromString(text: string): DDN.mscorlib.DNObject; overload;
    function ConvertFromString(context: DDN.System.DNITypeDescriptorContext; text: string): DDN.mscorlib.DNObject; overload;
    function ConvertFromString(context: DDN.System.DNITypeDescriptorContext; culture: DDN.mscorlib.DNCultureInfo; text: string): DDN.mscorlib.DNObject; overload;
    function ConvertTo(value: DDN.mscorlib.DNObject; destinationType: DDN.mscorlib.DNType): DDN.mscorlib.DNObject; overload;
    function ConvertToInvariantString(value: DDN.mscorlib.DNObject): string; overload;
    function ConvertToInvariantString(context: DDN.System.DNITypeDescriptorContext; value: DDN.mscorlib.DNObject): string; overload;
    function ConvertToString(value: DDN.mscorlib.DNObject): string; overload;
    function ConvertToString(context: DDN.System.DNITypeDescriptorContext; value: DDN.mscorlib.DNObject): string; overload;
    function ConvertToString(context: DDN.System.DNITypeDescriptorContext; culture: DDN.mscorlib.DNCultureInfo; value: DDN.mscorlib.DNObject): string; overload;
    function CreateInstance(propertyValues: DDN.mscorlib.DNIDictionary): DDN.mscorlib.DNObject; overload;
    function CreateInstance(context: DDN.System.DNITypeDescriptorContext; propertyValues: DDN.mscorlib.DNIDictionary): DDN.mscorlib.DNObject; overload;
    function GetCreateInstanceSupported: Boolean; overload;
    function GetCreateInstanceSupported(context: DDN.System.DNITypeDescriptorContext): Boolean; overload;
    function GetProperties(value: DDN.mscorlib.DNObject): DDN.System.DNPropertyDescriptorCollection; overload;
    function GetProperties(context: DDN.System.DNITypeDescriptorContext; value: DDN.mscorlib.DNObject; attributes: TArray<DDN.mscorlib.DNAttribute>): DDN.System.DNPropertyDescriptorCollection; overload;
    function GetPropertiesSupported: Boolean; overload;
    function GetPropertiesSupported(context: DDN.System.DNITypeDescriptorContext): Boolean; overload;
    function GetStandardValues: DDN.mscorlib.DNICollection; overload;
    function GetStandardValues(context: DDN.System.DNITypeDescriptorContext): DDN.System.DNTypeConverter_StandardValuesCollection; overload;
    function GetStandardValuesExclusive: Boolean; overload;
    function GetStandardValuesExclusive(context: DDN.System.DNITypeDescriptorContext): Boolean; overload;
    function GetStandardValuesSupported: Boolean; overload;
    function GetStandardValuesSupported(context: DDN.System.DNITypeDescriptorContext): Boolean; overload;
    function IsValid(value: DDN.mscorlib.DNObject): Boolean; overload;
    function IsValid(context: DDN.System.DNITypeDescriptorContext; value: DDN.mscorlib.DNObject): Boolean; overload;
    function GetProperties(context: DDN.System.DNITypeDescriptorContext; value: DDN.mscorlib.DNObject): DDN.System.DNPropertyDescriptorCollection; overload;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNModifierKeysConverter = class(TDNGenericImport<DNModifierKeysConverterClass, DNModifierKeysConverter>) end;

  //-------------namespace: System.Windows----------------
  DNInt32RectConverterClass = interface(DNObjectClass)
  ['{DED00561-41DC-55B2-A7EA-EF6400B1DF87}']
  { constructors } 

    ///<summary>Initializes a new instance of the <see cref="T:System.Windows.Int32RectConverter" />
    ///  class.</summary>
    {class} function init: DNInt32RectConverter;

  end;

  ///<summary>Converts instances of other types to and from an <see cref="T:System.Windows.Int32Rect" />
  ///  .</summary>
  [DNTypeName('System.Windows.Int32RectConverter')]
  DNInt32RectConverter = interface(DNObject)
  ['{6BB4BA26-6328-3F0C-8FCA-84D6516A32B4}']
  { methods } 

    ///<summary>Determines whether an object can be converted from a given type to an instance of an <see cref="T:System.Windows.Int32Rect" />
    ///  .  </summary>
    ///  <param name="context">Describes the context information of a type.</param>
    ///  <param name="sourceType">The type of the source that is being evaluated for conversion.</param>
    ///<returns><see langword="true" />
    ///  if the type can be converted to an <see cref="T:System.Windows.Int32Rect" />
    ///  ; otherwise, <see langword="false" />
    ///  .</returns>
    function CanConvertFrom(context: DDN.System.DNITypeDescriptorContext; sourceType: DDN.mscorlib.DNType): Boolean; overload;
    ///<summary>Determines whether an instance of an <see cref="T:System.Windows.Int32Rect" />
    ///  can be converted to a different type.</summary>
    ///  <param name="context">Describes the context information of a type.</param>
    ///  <param name="destinationType">The desired type this <see cref="T:System.Windows.Int32Rect" />
    ///  is being evaluated for conversion.</param>
    ///<returns><see langword="true" />
    ///  if this <see cref="T:System.Windows.Int32Rect" />
    ///  can be converted to <paramref name="destinationType" />
    ///  ; otherwise, <see langword="false" />
    ///  .</returns>
    function CanConvertTo(context: DDN.System.DNITypeDescriptorContext; destinationType: DDN.mscorlib.DNType): Boolean; overload;
    ///<summary>Attempts to convert the specified type to an <see cref="T:System.Windows.Int32Rect" />
    ///  .</summary>
    ///  <param name="context">Provides contextual information required for conversion.</param>
    ///  <param name="culture">Cultural information to respect during conversion.</param>
    ///  <param name="value">The object being converted.</param>
    ///<returns>The <see cref="T:System.Windows.Int32Rect" />
    ///  created from converting <paramref name="value" />
    ///  .</returns>
    ///<exception cref="T:System.NotSupportedException">Thrown if the specified object is NULL or is a type that cannot be converted to an <see cref="T:System.Windows.Int32Rect" />
    ///  .</exception>
    function ConvertFrom(context: DDN.System.DNITypeDescriptorContext; culture: DDN.mscorlib.DNCultureInfo; value: DDN.mscorlib.DNObject): DDN.mscorlib.DNObject; overload;
    ///<summary>Attempts to convert an <see cref="T:System.Windows.Int32Rect" />
    ///  to a specified type.</summary>
    ///  <param name="context">Provides contextual information required for conversion.</param>
    ///  <param name="culture">Cultural information to respect during conversion.</param>
    ///  <param name="value">The <see cref="T:System.Windows.Int32Rect" />
    ///  to convert.</param>
    ///  <param name="destinationType">The type to convert this <see cref="T:System.Windows.Int32Rect" />
    ///  to.</param>
    ///<returns>The object created from converting this <see cref="T:System.Windows.Int32Rect" />
    ///  .</returns>
    ///<exception cref="T:System.NotSupportedException">Thrown if <paramref name="value" />
    ///  is <see langword="null" />
    ///  or is not an <see cref="T:System.Windows.Int32Rect" />
    ///  , or if the <paramref name="destinationType" />
    ///  is not one of the valid types for conversion.</exception>
    function ConvertTo(context: DDN.System.DNITypeDescriptorContext; culture: DDN.mscorlib.DNCultureInfo; value: DDN.mscorlib.DNObject; destinationType: DDN.mscorlib.DNType): DDN.mscorlib.DNObject; overload;
    function CanConvertFrom(sourceType: DDN.mscorlib.DNType): Boolean; overload;
    function CanConvertTo(destinationType: DDN.mscorlib.DNType): Boolean; overload;
    function ConvertFrom(value: DDN.mscorlib.DNObject): DDN.mscorlib.DNObject; overload;
    function ConvertFromInvariantString(text: string): DDN.mscorlib.DNObject; overload;
    function ConvertFromInvariantString(context: DDN.System.DNITypeDescriptorContext; text: string): DDN.mscorlib.DNObject; overload;
    function ConvertFromString(text: string): DDN.mscorlib.DNObject; overload;
    function ConvertFromString(context: DDN.System.DNITypeDescriptorContext; text: string): DDN.mscorlib.DNObject; overload;
    function ConvertFromString(context: DDN.System.DNITypeDescriptorContext; culture: DDN.mscorlib.DNCultureInfo; text: string): DDN.mscorlib.DNObject; overload;
    function ConvertTo(value: DDN.mscorlib.DNObject; destinationType: DDN.mscorlib.DNType): DDN.mscorlib.DNObject; overload;
    function ConvertToInvariantString(value: DDN.mscorlib.DNObject): string; overload;
    function ConvertToInvariantString(context: DDN.System.DNITypeDescriptorContext; value: DDN.mscorlib.DNObject): string; overload;
    function ConvertToString(value: DDN.mscorlib.DNObject): string; overload;
    function ConvertToString(context: DDN.System.DNITypeDescriptorContext; value: DDN.mscorlib.DNObject): string; overload;
    function ConvertToString(context: DDN.System.DNITypeDescriptorContext; culture: DDN.mscorlib.DNCultureInfo; value: DDN.mscorlib.DNObject): string; overload;
    function CreateInstance(propertyValues: DDN.mscorlib.DNIDictionary): DDN.mscorlib.DNObject; overload;
    function CreateInstance(context: DDN.System.DNITypeDescriptorContext; propertyValues: DDN.mscorlib.DNIDictionary): DDN.mscorlib.DNObject; overload;
    function GetCreateInstanceSupported: Boolean; overload;
    function GetCreateInstanceSupported(context: DDN.System.DNITypeDescriptorContext): Boolean; overload;
    function GetProperties(value: DDN.mscorlib.DNObject): DDN.System.DNPropertyDescriptorCollection; overload;
    function GetProperties(context: DDN.System.DNITypeDescriptorContext; value: DDN.mscorlib.DNObject; attributes: TArray<DDN.mscorlib.DNAttribute>): DDN.System.DNPropertyDescriptorCollection; overload;
    function GetPropertiesSupported: Boolean; overload;
    function GetPropertiesSupported(context: DDN.System.DNITypeDescriptorContext): Boolean; overload;
    function GetStandardValues: DDN.mscorlib.DNICollection; overload;
    function GetStandardValues(context: DDN.System.DNITypeDescriptorContext): DDN.System.DNTypeConverter_StandardValuesCollection; overload;
    function GetStandardValuesExclusive: Boolean; overload;
    function GetStandardValuesExclusive(context: DDN.System.DNITypeDescriptorContext): Boolean; overload;
    function GetStandardValuesSupported: Boolean; overload;
    function GetStandardValuesSupported(context: DDN.System.DNITypeDescriptorContext): Boolean; overload;
    function IsValid(value: DDN.mscorlib.DNObject): Boolean; overload;
    function IsValid(context: DDN.System.DNITypeDescriptorContext; value: DDN.mscorlib.DNObject): Boolean; overload;
    function GetProperties(context: DDN.System.DNITypeDescriptorContext; value: DDN.mscorlib.DNObject): DDN.System.DNPropertyDescriptorCollection; overload;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNInt32RectConverter = class(TDNGenericImport<DNInt32RectConverterClass, DNInt32RectConverter>) end;

  //-------------namespace: System.Windows.Media----------------
  DNMatrixConverterClass = interface(DNObjectClass)
  ['{D978D67E-906C-5AEC-8846-F074D6A77D3B}']
  { constructors } 

    ///<summary>Initializes a new instance of <see cref="T:System.Windows.Media.MatrixConverter" />
    ///  .</summary>
    {class} function init: DNMatrixConverter;

  end;

  ///<summary>Converts instances of other types to and from a <see cref="T:System.Windows.Media.Matrix" />
  ///  . </summary>
  [DNTypeName('System.Windows.Media.MatrixConverter')]
  DNMatrixConverter = interface(DNObject)
  ['{78D85CC9-B579-393D-B89A-6BC95DFF8515}']
  { methods } 

    ///<summary>Determines whether an object can be converted from a specific type to an instance of a <see cref="T:System.Windows.Media.Matrix" />
    ///  .  </summary>
    ///  <param name="context">The context information of a type.</param>
    ///  <param name="sourceType">The type of the source that is being evaluated for conversion.</param>
    ///<returns><see langword="true" />
    ///  if the type can be converted to a <see cref="T:System.Windows.Media.Matrix" />
    ///  ; otherwise, <see langword="false" />
    ///  .</returns>
    function CanConvertFrom(context: DDN.System.DNITypeDescriptorContext; sourceType: DDN.mscorlib.DNType): Boolean; overload;
    ///<summary>Determines whether an instance of a <see cref="T:System.Windows.Media.Matrix" />
    ///  can be converted to a different type. </summary>
    ///  <param name="context">The context information of a type.</param>
    ///  <param name="destinationType">The desired type this <see cref="T:System.Windows.Media.Matrix" />
    ///  is being evaluated for conversion.</param>
    ///<returns><see langword="true" />
    ///  if this <see cref="T:System.Windows.Media.Matrix" />
    ///  can be converted to <paramref name="destinationType" />
    ///  ; otherwise, <see langword="false" />
    ///  .</returns>
    function CanConvertTo(context: DDN.System.DNITypeDescriptorContext; destinationType: DDN.mscorlib.DNType): Boolean; overload;
    ///<summary>Attempts to convert the specified object to a <see cref="T:System.Windows.Media.Matrix" />
    ///  . </summary>
    ///  <param name="context">The context information of a type.</param>
    ///  <param name="culture">The <see cref="T:System.Globalization.CultureInfo" />
    ///  of the type being converted.</param>
    ///  <param name="value">The object being converted.</param>
    ///<returns>The <see cref="T:System.Windows.Media.Matrix" />
    ///  created from converting <paramref name="value" />
    ///  .</returns>
    ///<exception cref="T:System.NotSupportedException">The specified object is null or is a type that cannot be converted to a <see cref="T:System.Windows.Media.Matrix" />
    ///  .</exception>
    function ConvertFrom(context: DDN.System.DNITypeDescriptorContext; culture: DDN.mscorlib.DNCultureInfo; value: DDN.mscorlib.DNObject): DDN.mscorlib.DNObject; overload;
    ///<summary>Attempts to convert a <see cref="T:System.Windows.Media.Matrix" />
    ///  to a specified type. </summary>
    ///  <param name="context">The context information of a type.</param>
    ///  <param name="culture">The <see cref="T:System.Globalization.CultureInfo" />
    ///  of the type being converted.</param>
    ///  <param name="value">The <see cref="T:System.Windows.Media.Matrix" />
    ///  to convert.</param>
    ///  <param name="destinationType">The type to convert this <see cref="T:System.Windows.Media.Matrix" />
    ///  to.</param>
    ///<returns>The object created from converting this <see cref="T:System.Windows.Media.Matrix" />
    ///  .</returns>
    ///<exception cref="T:System.NotSupportedException">The <paramref name="value" />
    ///  is null or is not a <see cref="T:System.Windows.Media.Matrix" />
    ///  , or the <paramref name="destinationType" />
    ///  is not a valid conversion type.</exception>
    function ConvertTo(context: DDN.System.DNITypeDescriptorContext; culture: DDN.mscorlib.DNCultureInfo; value: DDN.mscorlib.DNObject; destinationType: DDN.mscorlib.DNType): DDN.mscorlib.DNObject; overload;
    function CanConvertFrom(sourceType: DDN.mscorlib.DNType): Boolean; overload;
    function CanConvertTo(destinationType: DDN.mscorlib.DNType): Boolean; overload;
    function ConvertFrom(value: DDN.mscorlib.DNObject): DDN.mscorlib.DNObject; overload;
    function ConvertFromInvariantString(text: string): DDN.mscorlib.DNObject; overload;
    function ConvertFromInvariantString(context: DDN.System.DNITypeDescriptorContext; text: string): DDN.mscorlib.DNObject; overload;
    function ConvertFromString(text: string): DDN.mscorlib.DNObject; overload;
    function ConvertFromString(context: DDN.System.DNITypeDescriptorContext; text: string): DDN.mscorlib.DNObject; overload;
    function ConvertFromString(context: DDN.System.DNITypeDescriptorContext; culture: DDN.mscorlib.DNCultureInfo; text: string): DDN.mscorlib.DNObject; overload;
    function ConvertTo(value: DDN.mscorlib.DNObject; destinationType: DDN.mscorlib.DNType): DDN.mscorlib.DNObject; overload;
    function ConvertToInvariantString(value: DDN.mscorlib.DNObject): string; overload;
    function ConvertToInvariantString(context: DDN.System.DNITypeDescriptorContext; value: DDN.mscorlib.DNObject): string; overload;
    function ConvertToString(value: DDN.mscorlib.DNObject): string; overload;
    function ConvertToString(context: DDN.System.DNITypeDescriptorContext; value: DDN.mscorlib.DNObject): string; overload;
    function ConvertToString(context: DDN.System.DNITypeDescriptorContext; culture: DDN.mscorlib.DNCultureInfo; value: DDN.mscorlib.DNObject): string; overload;
    function CreateInstance(propertyValues: DDN.mscorlib.DNIDictionary): DDN.mscorlib.DNObject; overload;
    function CreateInstance(context: DDN.System.DNITypeDescriptorContext; propertyValues: DDN.mscorlib.DNIDictionary): DDN.mscorlib.DNObject; overload;
    function GetCreateInstanceSupported: Boolean; overload;
    function GetCreateInstanceSupported(context: DDN.System.DNITypeDescriptorContext): Boolean; overload;
    function GetProperties(value: DDN.mscorlib.DNObject): DDN.System.DNPropertyDescriptorCollection; overload;
    function GetProperties(context: DDN.System.DNITypeDescriptorContext; value: DDN.mscorlib.DNObject; attributes: TArray<DDN.mscorlib.DNAttribute>): DDN.System.DNPropertyDescriptorCollection; overload;
    function GetPropertiesSupported: Boolean; overload;
    function GetPropertiesSupported(context: DDN.System.DNITypeDescriptorContext): Boolean; overload;
    function GetStandardValues: DDN.mscorlib.DNICollection; overload;
    function GetStandardValues(context: DDN.System.DNITypeDescriptorContext): DDN.System.DNTypeConverter_StandardValuesCollection; overload;
    function GetStandardValuesExclusive: Boolean; overload;
    function GetStandardValuesExclusive(context: DDN.System.DNITypeDescriptorContext): Boolean; overload;
    function GetStandardValuesSupported: Boolean; overload;
    function GetStandardValuesSupported(context: DDN.System.DNITypeDescriptorContext): Boolean; overload;
    function IsValid(value: DDN.mscorlib.DNObject): Boolean; overload;
    function IsValid(context: DDN.System.DNITypeDescriptorContext; value: DDN.mscorlib.DNObject): Boolean; overload;
    function GetProperties(context: DDN.System.DNITypeDescriptorContext; value: DDN.mscorlib.DNObject): DDN.System.DNPropertyDescriptorCollection; overload;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNMatrixConverter = class(TDNGenericImport<DNMatrixConverterClass, DNMatrixConverter>) end;

  //-------------namespace: System.Windows----------------
  DNPointConverterClass = interface(DNObjectClass)
  ['{60846F49-DDF5-5BAB-8376-76038E566B11}']
  { constructors } 

    ///<summary>Initializes a new instance of the <see cref="T:System.Windows.PointConverter" />
    ///  class. </summary>
    {class} function init: DNPointConverter;

  end;

  ///<summary>Converts instances of other types to and from a <see cref="T:System.Windows.Point" />
  ///  . </summary>
  [DNTypeName('System.Windows.PointConverter')]
  DNPointConverter = interface(DNObject)
  ['{3E199910-B21A-3CD2-8698-4E4D060E1550}']
  { methods } 

    ///<summary>Determines whether an object can be converted from a given type to an instance of a <see cref="T:System.Windows.Point" />
    ///  .  </summary>
    ///  <param name="context">Describes the context information of a type.</param>
    ///  <param name="sourceType">The type of the source that is being evaluated for conversion.</param>
    ///<returns><see langword="true" />
    ///  if the type can be converted to a <see cref="T:System.Windows.Point" />
    ///  ; otherwise, <see langword="false" />
    ///  .</returns>
    function CanConvertFrom(context: DDN.System.DNITypeDescriptorContext; sourceType: DDN.mscorlib.DNType): Boolean; overload;
    ///<summary>Determines whether an instance of a <see cref="T:System.Windows.Point" />
    ///  can be converted to a different type. </summary>
    ///  <param name="context">Describes the context information of a type.</param>
    ///  <param name="destinationType">The desired type this <see cref="T:System.Windows.Point" />
    ///  is being evaluated for conversion.</param>
    ///<returns><see langword="true" />
    ///  if this <see cref="T:System.Windows.Point" />
    ///  can be converted to <paramref name="destinationType" />
    ///  ; otherwise, <see langword="false" />
    ///  .</returns>
    function CanConvertTo(context: DDN.System.DNITypeDescriptorContext; destinationType: DDN.mscorlib.DNType): Boolean; overload;
    ///<summary>Attempts to convert the specified object to a <see cref="T:System.Windows.Point" />
    ///  . </summary>
    ///  <param name="context">Provides contextual information required for conversion.</param>
    ///  <param name="culture">Cultural information to respect during conversion.</param>
    ///  <param name="value">The object being converted.</param>
    ///<returns>The <see cref="T:System.Windows.Point" />
    ///  created from converting <paramref name="value" />
    ///  .</returns>
    ///<exception cref="T:System.NotSupportedException">Thrown if the specified object is NULL or is a type that cannot be converted to a <see cref="T:System.Windows.Point" />
    ///  .</exception>
    function ConvertFrom(context: DDN.System.DNITypeDescriptorContext; culture: DDN.mscorlib.DNCultureInfo; value: DDN.mscorlib.DNObject): DDN.mscorlib.DNObject; overload;
    ///<summary>Attempts to convert a <see cref="T:System.Windows.Point" />
    ///  to a specified type. </summary>
    ///  <param name="context">Provides contextual information required for conversion.</param>
    ///  <param name="culture">Cultural information to respect during conversion.</param>
    ///  <param name="value">The <see cref="T:System.Windows.Point" />
    ///  to convert.</param>
    ///  <param name="destinationType">The type to convert this <see cref="T:System.Windows.Point" />
    ///  to.</param>
    ///<returns>The object created from converting this <see cref="T:System.Windows.Point" />
    ///  .</returns>
    ///<exception cref="T:System.NotSupportedException">Thrown if <paramref name="value" />
    ///  is <see langword="null" />
    ///  or is not a <see cref="T:System.Windows.Point" />
    ///  , or if the <paramref name="destinationType" />
    ///  is not one of the valid types for conversion.</exception>
    function ConvertTo(context: DDN.System.DNITypeDescriptorContext; culture: DDN.mscorlib.DNCultureInfo; value: DDN.mscorlib.DNObject; destinationType: DDN.mscorlib.DNType): DDN.mscorlib.DNObject; overload;
    function CanConvertFrom(sourceType: DDN.mscorlib.DNType): Boolean; overload;
    function CanConvertTo(destinationType: DDN.mscorlib.DNType): Boolean; overload;
    function ConvertFrom(value: DDN.mscorlib.DNObject): DDN.mscorlib.DNObject; overload;
    function ConvertFromInvariantString(text: string): DDN.mscorlib.DNObject; overload;
    function ConvertFromInvariantString(context: DDN.System.DNITypeDescriptorContext; text: string): DDN.mscorlib.DNObject; overload;
    function ConvertFromString(text: string): DDN.mscorlib.DNObject; overload;
    function ConvertFromString(context: DDN.System.DNITypeDescriptorContext; text: string): DDN.mscorlib.DNObject; overload;
    function ConvertFromString(context: DDN.System.DNITypeDescriptorContext; culture: DDN.mscorlib.DNCultureInfo; text: string): DDN.mscorlib.DNObject; overload;
    function ConvertTo(value: DDN.mscorlib.DNObject; destinationType: DDN.mscorlib.DNType): DDN.mscorlib.DNObject; overload;
    function ConvertToInvariantString(value: DDN.mscorlib.DNObject): string; overload;
    function ConvertToInvariantString(context: DDN.System.DNITypeDescriptorContext; value: DDN.mscorlib.DNObject): string; overload;
    function ConvertToString(value: DDN.mscorlib.DNObject): string; overload;
    function ConvertToString(context: DDN.System.DNITypeDescriptorContext; value: DDN.mscorlib.DNObject): string; overload;
    function ConvertToString(context: DDN.System.DNITypeDescriptorContext; culture: DDN.mscorlib.DNCultureInfo; value: DDN.mscorlib.DNObject): string; overload;
    function CreateInstance(propertyValues: DDN.mscorlib.DNIDictionary): DDN.mscorlib.DNObject; overload;
    function CreateInstance(context: DDN.System.DNITypeDescriptorContext; propertyValues: DDN.mscorlib.DNIDictionary): DDN.mscorlib.DNObject; overload;
    function GetCreateInstanceSupported: Boolean; overload;
    function GetCreateInstanceSupported(context: DDN.System.DNITypeDescriptorContext): Boolean; overload;
    function GetProperties(value: DDN.mscorlib.DNObject): DDN.System.DNPropertyDescriptorCollection; overload;
    function GetProperties(context: DDN.System.DNITypeDescriptorContext; value: DDN.mscorlib.DNObject; attributes: TArray<DDN.mscorlib.DNAttribute>): DDN.System.DNPropertyDescriptorCollection; overload;
    function GetPropertiesSupported: Boolean; overload;
    function GetPropertiesSupported(context: DDN.System.DNITypeDescriptorContext): Boolean; overload;
    function GetStandardValues: DDN.mscorlib.DNICollection; overload;
    function GetStandardValues(context: DDN.System.DNITypeDescriptorContext): DDN.System.DNTypeConverter_StandardValuesCollection; overload;
    function GetStandardValuesExclusive: Boolean; overload;
    function GetStandardValuesExclusive(context: DDN.System.DNITypeDescriptorContext): Boolean; overload;
    function GetStandardValuesSupported: Boolean; overload;
    function GetStandardValuesSupported(context: DDN.System.DNITypeDescriptorContext): Boolean; overload;
    function IsValid(value: DDN.mscorlib.DNObject): Boolean; overload;
    function IsValid(context: DDN.System.DNITypeDescriptorContext; value: DDN.mscorlib.DNObject): Boolean; overload;
    function GetProperties(context: DDN.System.DNITypeDescriptorContext; value: DDN.mscorlib.DNObject): DDN.System.DNPropertyDescriptorCollection; overload;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNPointConverter = class(TDNGenericImport<DNPointConverterClass, DNPointConverter>) end;

  //-------------namespace: System.Windows----------------
  DNRectConverterClass = interface(DNObjectClass)
  ['{114ED835-ED8E-5F46-AA0D-9962ADE0BE87}']
  { constructors } 

    ///<summary>Initializes a new instance of the <see cref="T:System.Windows.RectConverter" />
    ///  class. </summary>
    {class} function init: DNRectConverter;

  end;

  ///<summary>Converts instances of other types to and from instances of <see cref="T:System.Windows.Rect" />
  ///  .</summary>
  [DNTypeName('System.Windows.RectConverter')]
  DNRectConverter = interface(DNObject)
  ['{72CE60D6-AF4F-3B9A-86C2-F9F635576250}']
  { methods } 

    ///<summary>Determines whether an object can be converted from a given type to an instance of <see cref="T:System.Windows.Rect" />
    ///  .</summary>
    ///  <param name="context">Provides contextual information required for conversion.</param>
    ///  <param name="sourceType">The type of the source that is being evaluated for conversion.</param>
    ///<returns><see langword="true" />
    ///  if the type can be converted to a <see cref="T:System.Windows.Rect" />
    ///  ; otherwise, <see langword="false" />
    ///  .</returns>
    function CanConvertFrom(context: DDN.System.DNITypeDescriptorContext; sourceType: DDN.mscorlib.DNType): Boolean; overload;
    ///<summary>Determines whether a <see cref="T:System.Windows.Rect" />
    ///  can be converted to the specified type. </summary>
    ///  <param name="context">Provides contextual information required for conversion.</param>
    ///  <param name="destinationType">The desired type this <see cref="T:System.Windows.Rect" />
    ///  is being evaluated for conversion.</param>
    ///<returns><see langword="true" />
    ///  if a <see cref="T:System.Windows.Rect" />
    ///  can be converted to <paramref name="destinationType" />
    ///  ; otherwise, <see langword="false" />
    ///  .</returns>
    function CanConvertTo(context: DDN.System.DNITypeDescriptorContext; destinationType: DDN.mscorlib.DNType): Boolean; overload;
    ///<summary>Attempts to convert the specified object to a <see cref="T:System.Windows.Rect" />
    ///  . </summary>
    ///  <param name="context">Provides contextual information required for conversion.</param>
    ///  <param name="culture">Cultural information which is respected when converting.</param>
    ///  <param name="value">The object being converted.</param>
    ///<returns>The <see cref="T:System.Windows.Rect" />
    ///  created from converting <paramref name="value" />
    ///  .</returns>
    ///<exception cref="T:System.NotSupportedException">Thrown if the specified object is NULL or is a type that cannot be converted to a <see cref="T:System.Windows.Rect" />
    ///  .</exception>
    function ConvertFrom(context: DDN.System.DNITypeDescriptorContext; culture: DDN.mscorlib.DNCultureInfo; value: DDN.mscorlib.DNObject): DDN.mscorlib.DNObject; overload;
    ///<summary> Attempts to convert a <see cref="T:System.Windows.Rect" />
    ///  to the specified type. </summary>
    ///  <param name="context">Provides contextual information required for conversion.</param>
    ///  <param name="culture">Cultural information which is respected during conversion.</param>
    ///  <param name="value">The <see cref="T:System.Windows.Rect" />
    ///  to convert.</param>
    ///  <param name="destinationType">The type to convert this <see cref="T:System.Windows.Rect" />
    ///  to.</param>
    ///<returns>The object created from converting this <see cref="T:System.Windows.Rect" />
    ///  .</returns>
    ///<exception cref="T:System.NotSupportedException"><paramref name="value" />
    ///  is <see langword="null" />
    ///  .- or -
    ///  <paramref name="value" />
    ///  is not a <see cref="T:System.Windows.Rect" />
    ///  .- or - The <paramref name="destinationType" />
    ///  is not one of the valid types for conversion.</exception>
    function ConvertTo(context: DDN.System.DNITypeDescriptorContext; culture: DDN.mscorlib.DNCultureInfo; value: DDN.mscorlib.DNObject; destinationType: DDN.mscorlib.DNType): DDN.mscorlib.DNObject; overload;
    function CanConvertFrom(sourceType: DDN.mscorlib.DNType): Boolean; overload;
    function CanConvertTo(destinationType: DDN.mscorlib.DNType): Boolean; overload;
    function ConvertFrom(value: DDN.mscorlib.DNObject): DDN.mscorlib.DNObject; overload;
    function ConvertFromInvariantString(text: string): DDN.mscorlib.DNObject; overload;
    function ConvertFromInvariantString(context: DDN.System.DNITypeDescriptorContext; text: string): DDN.mscorlib.DNObject; overload;
    function ConvertFromString(text: string): DDN.mscorlib.DNObject; overload;
    function ConvertFromString(context: DDN.System.DNITypeDescriptorContext; text: string): DDN.mscorlib.DNObject; overload;
    function ConvertFromString(context: DDN.System.DNITypeDescriptorContext; culture: DDN.mscorlib.DNCultureInfo; text: string): DDN.mscorlib.DNObject; overload;
    function ConvertTo(value: DDN.mscorlib.DNObject; destinationType: DDN.mscorlib.DNType): DDN.mscorlib.DNObject; overload;
    function ConvertToInvariantString(value: DDN.mscorlib.DNObject): string; overload;
    function ConvertToInvariantString(context: DDN.System.DNITypeDescriptorContext; value: DDN.mscorlib.DNObject): string; overload;
    function ConvertToString(value: DDN.mscorlib.DNObject): string; overload;
    function ConvertToString(context: DDN.System.DNITypeDescriptorContext; value: DDN.mscorlib.DNObject): string; overload;
    function ConvertToString(context: DDN.System.DNITypeDescriptorContext; culture: DDN.mscorlib.DNCultureInfo; value: DDN.mscorlib.DNObject): string; overload;
    function CreateInstance(propertyValues: DDN.mscorlib.DNIDictionary): DDN.mscorlib.DNObject; overload;
    function CreateInstance(context: DDN.System.DNITypeDescriptorContext; propertyValues: DDN.mscorlib.DNIDictionary): DDN.mscorlib.DNObject; overload;
    function GetCreateInstanceSupported: Boolean; overload;
    function GetCreateInstanceSupported(context: DDN.System.DNITypeDescriptorContext): Boolean; overload;
    function GetProperties(value: DDN.mscorlib.DNObject): DDN.System.DNPropertyDescriptorCollection; overload;
    function GetProperties(context: DDN.System.DNITypeDescriptorContext; value: DDN.mscorlib.DNObject; attributes: TArray<DDN.mscorlib.DNAttribute>): DDN.System.DNPropertyDescriptorCollection; overload;
    function GetPropertiesSupported: Boolean; overload;
    function GetPropertiesSupported(context: DDN.System.DNITypeDescriptorContext): Boolean; overload;
    function GetStandardValues: DDN.mscorlib.DNICollection; overload;
    function GetStandardValues(context: DDN.System.DNITypeDescriptorContext): DDN.System.DNTypeConverter_StandardValuesCollection; overload;
    function GetStandardValuesExclusive: Boolean; overload;
    function GetStandardValuesExclusive(context: DDN.System.DNITypeDescriptorContext): Boolean; overload;
    function GetStandardValuesSupported: Boolean; overload;
    function GetStandardValuesSupported(context: DDN.System.DNITypeDescriptorContext): Boolean; overload;
    function IsValid(value: DDN.mscorlib.DNObject): Boolean; overload;
    function IsValid(context: DDN.System.DNITypeDescriptorContext; value: DDN.mscorlib.DNObject): Boolean; overload;
    function GetProperties(context: DDN.System.DNITypeDescriptorContext; value: DDN.mscorlib.DNObject): DDN.System.DNPropertyDescriptorCollection; overload;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNRectConverter = class(TDNGenericImport<DNRectConverterClass, DNRectConverter>) end;

  //-------------namespace: System.Windows----------------
  DNSizeConverterClass = interface(DNObjectClass)
  ['{751F233D-67AF-5A04-AFD7-6994D9AB571D}']
  { constructors } 

    ///<summary>Initializes a new instance of the <see cref="T:System.Windows.SizeConverter" />
    ///  class. </summary>
    {class} function init: DNSizeConverter;

  end;

  ///<summary>Converts instances of other types to and from instances of the <see cref="T:System.Windows.Size" />
  ///  class. </summary>
  [DNTypeName('System.Windows.SizeConverter')]
  DNSizeConverter = interface(DNObject)
  ['{B4C3D0D4-E060-3CFF-B4BB-542C5FCB1E36}']
  { methods } 

    ///<summary>Determines whether a class can be converted from a given type to an instance of <see cref="T:System.Windows.Size" />
    ///  . </summary>
    ///  <param name="context">Provides contextual information about a component.</param>
    ///  <param name="sourceType">Identifies the data type to evaluate for conversion.</param>
    ///<returns><see langword="true" />
    ///  if the <paramref name="sourceType" />
    ///  can be converted to an instance of <see cref="T:System.Windows.Size" />
    ///  ; otherwise, <see langword="false" />
    ///  .</returns>
    function CanConvertFrom(context: DDN.System.DNITypeDescriptorContext; sourceType: DDN.mscorlib.DNType): Boolean; overload;
    ///<summary>Determines whether an instance of <see cref="T:System.Windows.Size" />
    ///  can be converted to a different type. </summary>
    ///  <param name="context">Provides contextual information about a component.</param>
    ///  <param name="destinationType">Identifies the data type to evaluate for conversion.</param>
    ///<returns><see langword="true" />
    ///  if this instance of <see cref="T:System.Windows.Size" />
    ///  can be converted to the <paramref name="destinationType" />
    ///  ; otherwise, <see langword="false" />
    ///  .</returns>
    function CanConvertTo(context: DDN.System.DNITypeDescriptorContext; destinationType: DDN.mscorlib.DNType): Boolean; overload;
    ///<summary>Attempts to convert a specified object to an instance of <see cref="T:System.Windows.Size" />
    ///  .</summary>
    ///  <param name="context">Provides contextual information about a component.</param>
    ///  <param name="culture">Culture-specific information that should be respected during conversion.</param>
    ///  <param name="value">The source object that is being converted.</param>
    ///<returns>The instance of <see cref="T:System.Windows.Size" />
    ///  that is created from the converted <paramref name="source" />
    ///  .</returns>
    function ConvertFrom(context: DDN.System.DNITypeDescriptorContext; culture: DDN.mscorlib.DNCultureInfo; value: DDN.mscorlib.DNObject): DDN.mscorlib.DNObject; overload;
    ///<summary>Attempts to convert an instance of <see cref="T:System.Windows.Size" />
    ///  to a specified type. </summary>
    ///  <param name="context">Provides contextual information about a component.</param>
    ///  <param name="culture">Culture-specific information that should be respected during conversion.</param>
    ///  <param name="value">The instance of <see cref="T:System.Windows.Size" />
    ///  to convert.</param>
    ///  <param name="destinationType">The type that this instance of <see cref="T:System.Windows.Size" />
    ///  is converted to.</param>
    ///<returns>The object that is created from the converted instance of <see cref="T:System.Windows.Size" />
    ///  .</returns>
    ///<exception cref="T:System.NotSupportedException"><paramref name="value" />
    ///  is <see langword="null" />
    ///  or is not an instance of <see cref="T:System.Windows.Size" />
    ///  , or if the <paramref name="destinationType" />
    ///  is not one of the valid destination types.</exception>
    function ConvertTo(context: DDN.System.DNITypeDescriptorContext; culture: DDN.mscorlib.DNCultureInfo; value: DDN.mscorlib.DNObject; destinationType: DDN.mscorlib.DNType): DDN.mscorlib.DNObject; overload;
    function CanConvertFrom(sourceType: DDN.mscorlib.DNType): Boolean; overload;
    function CanConvertTo(destinationType: DDN.mscorlib.DNType): Boolean; overload;
    function ConvertFrom(value: DDN.mscorlib.DNObject): DDN.mscorlib.DNObject; overload;
    function ConvertFromInvariantString(text: string): DDN.mscorlib.DNObject; overload;
    function ConvertFromInvariantString(context: DDN.System.DNITypeDescriptorContext; text: string): DDN.mscorlib.DNObject; overload;
    function ConvertFromString(text: string): DDN.mscorlib.DNObject; overload;
    function ConvertFromString(context: DDN.System.DNITypeDescriptorContext; text: string): DDN.mscorlib.DNObject; overload;
    function ConvertFromString(context: DDN.System.DNITypeDescriptorContext; culture: DDN.mscorlib.DNCultureInfo; text: string): DDN.mscorlib.DNObject; overload;
    function ConvertTo(value: DDN.mscorlib.DNObject; destinationType: DDN.mscorlib.DNType): DDN.mscorlib.DNObject; overload;
    function ConvertToInvariantString(value: DDN.mscorlib.DNObject): string; overload;
    function ConvertToInvariantString(context: DDN.System.DNITypeDescriptorContext; value: DDN.mscorlib.DNObject): string; overload;
    function ConvertToString(value: DDN.mscorlib.DNObject): string; overload;
    function ConvertToString(context: DDN.System.DNITypeDescriptorContext; value: DDN.mscorlib.DNObject): string; overload;
    function ConvertToString(context: DDN.System.DNITypeDescriptorContext; culture: DDN.mscorlib.DNCultureInfo; value: DDN.mscorlib.DNObject): string; overload;
    function CreateInstance(propertyValues: DDN.mscorlib.DNIDictionary): DDN.mscorlib.DNObject; overload;
    function CreateInstance(context: DDN.System.DNITypeDescriptorContext; propertyValues: DDN.mscorlib.DNIDictionary): DDN.mscorlib.DNObject; overload;
    function GetCreateInstanceSupported: Boolean; overload;
    function GetCreateInstanceSupported(context: DDN.System.DNITypeDescriptorContext): Boolean; overload;
    function GetProperties(value: DDN.mscorlib.DNObject): DDN.System.DNPropertyDescriptorCollection; overload;
    function GetProperties(context: DDN.System.DNITypeDescriptorContext; value: DDN.mscorlib.DNObject; attributes: TArray<DDN.mscorlib.DNAttribute>): DDN.System.DNPropertyDescriptorCollection; overload;
    function GetPropertiesSupported: Boolean; overload;
    function GetPropertiesSupported(context: DDN.System.DNITypeDescriptorContext): Boolean; overload;
    function GetStandardValues: DDN.mscorlib.DNICollection; overload;
    function GetStandardValues(context: DDN.System.DNITypeDescriptorContext): DDN.System.DNTypeConverter_StandardValuesCollection; overload;
    function GetStandardValuesExclusive: Boolean; overload;
    function GetStandardValuesExclusive(context: DDN.System.DNITypeDescriptorContext): Boolean; overload;
    function GetStandardValuesSupported: Boolean; overload;
    function GetStandardValuesSupported(context: DDN.System.DNITypeDescriptorContext): Boolean; overload;
    function IsValid(value: DDN.mscorlib.DNObject): Boolean; overload;
    function IsValid(context: DDN.System.DNITypeDescriptorContext; value: DDN.mscorlib.DNObject): Boolean; overload;
    function GetProperties(context: DDN.System.DNITypeDescriptorContext; value: DDN.mscorlib.DNObject): DDN.System.DNPropertyDescriptorCollection; overload;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNSizeConverter = class(TDNGenericImport<DNSizeConverterClass, DNSizeConverter>) end;

  //-------------namespace: System.Windows----------------
  DNVectorConverterClass = interface(DNObjectClass)
  ['{531D7ACE-B255-567B-82DF-1B4C47AD3E2F}']
  { constructors } 

    ///<summary>Initializes a new instance of the <see cref="T:System.Windows.Vector" />
    ///  structure. </summary>
    {class} function init: DNVectorConverter;

  end;

  ///<summary> Converts instances of other types to and from a <see cref="T:System.Windows.Vector" />
  ///  . </summary>
  [DNTypeName('System.Windows.VectorConverter')]
  DNVectorConverter = interface(DNObject)
  ['{A3C06C1A-1D75-38A8-8A12-6DF2838F1BCE}']
  { methods } 

    ///<summary>Indicates whether an object can be converted from a given type to an instance of a <see cref="T:System.Windows.Vector" />
    ///  .</summary>
    ///  <param name="context">Describes the context information of a type.</param>
    ///  <param name="sourceType">The source <see cref="T:System.Type" />
    ///  that is being queried for conversion support.</param>
    ///<returns><see langword="true" />
    ///  if objects of the specified type can be converted to a <see cref="T:System.Windows.Vector" />
    ///  ; otherwise, <see langword="false" />
    ///  .</returns>
    function CanConvertFrom(context: DDN.System.DNITypeDescriptorContext; sourceType: DDN.mscorlib.DNType): Boolean; overload;
    ///<summary>Determines whether instances of <see cref="T:System.Windows.Vector" />
    ///  can be converted to the specified type. </summary>
    ///  <param name="context">Describes the context information of a type.</param>
    ///  <param name="destinationType">The desired type this <see cref="T:System.Windows.Vector" />
    ///  is being evaluated for conversion.</param>
    ///<returns><see langword="true" />
    ///  if instances of <see cref="T:System.Windows.Vector" />
    ///  can be converted to <paramref name="destinationType" />
    ///  ; otherwise, <see langword="false" />
    ///  .</returns>
    function CanConvertTo(context: DDN.System.DNITypeDescriptorContext; destinationType: DDN.mscorlib.DNType): Boolean; overload;
    ///<summary>Converts the specified object to a <see cref="T:System.Windows.Vector" />
    ///  . </summary>
    ///  <param name="context">Describes the context information of a type.</param>
    ///  <param name="culture">Describes the <see cref="T:System.Globalization.CultureInfo" />
    ///  of the type being converted.</param>
    ///  <param name="value">The object being converted.</param>
    ///<returns>The <see cref="T:System.Windows.Vector" />
    ///  created from converting <paramref name="value" />
    ///  .</returns>
    function ConvertFrom(context: DDN.System.DNITypeDescriptorContext; culture: DDN.mscorlib.DNCultureInfo; value: DDN.mscorlib.DNObject): DDN.mscorlib.DNObject; overload;
    ///<summary> Converts the specified <see cref="T:System.Windows.Vector" />
    ///  to the specified type. </summary>
    ///  <param name="context">Describes the context information of a type.</param>
    ///  <param name="culture">Describes the <see cref="T:System.Globalization.CultureInfo" />
    ///  of the type being converted.</param>
    ///  <param name="value">The <see cref="T:System.Windows.Vector" />
    ///  to convert.</param>
    ///  <param name="destinationType">The type to convert this <see cref="T:System.Windows.Vector" />
    ///  to.</param>
    ///<returns>The object created from converting this <see cref="T:System.Windows.Vector" />
    ///  .</returns>
    function ConvertTo(context: DDN.System.DNITypeDescriptorContext; culture: DDN.mscorlib.DNCultureInfo; value: DDN.mscorlib.DNObject; destinationType: DDN.mscorlib.DNType): DDN.mscorlib.DNObject; overload;
    function CanConvertFrom(sourceType: DDN.mscorlib.DNType): Boolean; overload;
    function CanConvertTo(destinationType: DDN.mscorlib.DNType): Boolean; overload;
    function ConvertFrom(value: DDN.mscorlib.DNObject): DDN.mscorlib.DNObject; overload;
    function ConvertFromInvariantString(text: string): DDN.mscorlib.DNObject; overload;
    function ConvertFromInvariantString(context: DDN.System.DNITypeDescriptorContext; text: string): DDN.mscorlib.DNObject; overload;
    function ConvertFromString(text: string): DDN.mscorlib.DNObject; overload;
    function ConvertFromString(context: DDN.System.DNITypeDescriptorContext; text: string): DDN.mscorlib.DNObject; overload;
    function ConvertFromString(context: DDN.System.DNITypeDescriptorContext; culture: DDN.mscorlib.DNCultureInfo; text: string): DDN.mscorlib.DNObject; overload;
    function ConvertTo(value: DDN.mscorlib.DNObject; destinationType: DDN.mscorlib.DNType): DDN.mscorlib.DNObject; overload;
    function ConvertToInvariantString(value: DDN.mscorlib.DNObject): string; overload;
    function ConvertToInvariantString(context: DDN.System.DNITypeDescriptorContext; value: DDN.mscorlib.DNObject): string; overload;
    function ConvertToString(value: DDN.mscorlib.DNObject): string; overload;
    function ConvertToString(context: DDN.System.DNITypeDescriptorContext; value: DDN.mscorlib.DNObject): string; overload;
    function ConvertToString(context: DDN.System.DNITypeDescriptorContext; culture: DDN.mscorlib.DNCultureInfo; value: DDN.mscorlib.DNObject): string; overload;
    function CreateInstance(propertyValues: DDN.mscorlib.DNIDictionary): DDN.mscorlib.DNObject; overload;
    function CreateInstance(context: DDN.System.DNITypeDescriptorContext; propertyValues: DDN.mscorlib.DNIDictionary): DDN.mscorlib.DNObject; overload;
    function GetCreateInstanceSupported: Boolean; overload;
    function GetCreateInstanceSupported(context: DDN.System.DNITypeDescriptorContext): Boolean; overload;
    function GetProperties(value: DDN.mscorlib.DNObject): DDN.System.DNPropertyDescriptorCollection; overload;
    function GetProperties(context: DDN.System.DNITypeDescriptorContext; value: DDN.mscorlib.DNObject; attributes: TArray<DDN.mscorlib.DNAttribute>): DDN.System.DNPropertyDescriptorCollection; overload;
    function GetPropertiesSupported: Boolean; overload;
    function GetPropertiesSupported(context: DDN.System.DNITypeDescriptorContext): Boolean; overload;
    function GetStandardValues: DDN.mscorlib.DNICollection; overload;
    function GetStandardValues(context: DDN.System.DNITypeDescriptorContext): DDN.System.DNTypeConverter_StandardValuesCollection; overload;
    function GetStandardValuesExclusive: Boolean; overload;
    function GetStandardValuesExclusive(context: DDN.System.DNITypeDescriptorContext): Boolean; overload;
    function GetStandardValuesSupported: Boolean; overload;
    function GetStandardValuesSupported(context: DDN.System.DNITypeDescriptorContext): Boolean; overload;
    function IsValid(value: DDN.mscorlib.DNObject): Boolean; overload;
    function IsValid(context: DDN.System.DNITypeDescriptorContext; value: DDN.mscorlib.DNObject): Boolean; overload;
    function GetProperties(context: DDN.System.DNITypeDescriptorContext; value: DDN.mscorlib.DNObject): DDN.System.DNPropertyDescriptorCollection; overload;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNVectorConverter = class(TDNGenericImport<DNVectorConverterClass, DNVectorConverter>) end;

  //-------------namespace: System.Diagnostics----------------
  DNPresentationTraceSourcesClass = interface(DDN.mscorlib.DNObjectClass)
  ['{7ACE599D-CF4E-519C-8938-579D0DE609FB}']
  { static getter & setter } 

    {class} function get_DependencyPropertySource: DDN.System.DNTraceSource;
    {class} function get_FreezableSource: DDN.System.DNTraceSource;
    {class} function get_NameScopeSource: DDN.System.DNTraceSource;
    {class} function get_RoutedEventSource: DDN.System.DNTraceSource;
    {class} function get_AnimationSource: DDN.System.DNTraceSource;
    {class} function get_DataBindingSource: DDN.System.DNTraceSource;
    {class} function get_DocumentsSource: DDN.System.DNTraceSource;
    {class} function get_ResourceDictionarySource: DDN.System.DNTraceSource;
    {class} function get_MarkupSource: DDN.System.DNTraceSource;
    {class} function get_HwndHostSource: DDN.System.DNTraceSource;
    {class} function get_ShellSource: DDN.System.DNTraceSource;

  { static fields getter & setter } 

   function __fakeFieldGet_TraceLevelProperty: DNDependencyProperty;

  { static fields } 

    ///<summary>Identifies the <see cref="P:System.Diagnostics.PresentationTraceSources.TraceLevel" />
    ///  attached property.</summary>
    {class} property TraceLevelProperty: DNDependencyProperty read __fakeFieldGet_TraceLevelProperty;

  { static methods } 

    ///<summary>Gets the value of the <see cref="P:System.Diagnostics.PresentationTraceSources.TraceLevel" />
    ///  attached property for a specified element.</summary>
    ///  <param name="element">The element from which the property value is read.</param>
    ///<returns>The <see cref="P:System.Diagnostics.PresentationTraceSources.TraceLevel" />
    ///  property value for the element.</returns>
    {class} function GetTraceLevel(element: DDN.mscorlib.DNObject): DNPresentationTraceLevel;
    ///<summary>Sets the value of the <see cref="P:System.Diagnostics.PresentationTraceSources.TraceLevel" />
    ///  attached property to a specified element.</summary>
    ///  <param name="element">The element to which the attached property is written.</param>
    ///  <param name="traceLevel">The needed <see cref="T:System.Diagnostics.PresentationTraceLevel" />
    ///  value.</param>
    {class} procedure SetTraceLevel(element: DDN.mscorlib.DNObject; traceLevel: DNPresentationTraceLevel);
    ///<summary>Refreshes trace sources, by forcing the app.config file to be re-read.</summary>
    {class} procedure Refresh;

  { static propertys } 

    ///<summary>Gets a dependency property trace source.</summary>
    ///<returns>A dependency property trace source.</returns>
    {class} property DependencyPropertySource: DDN.System.DNTraceSource read get_DependencyPropertySource;
    ///<summary>Gets a Freezable trace source.</summary>
    ///<returns>A Freezable trace source.</returns>
    {class} property FreezableSource: DDN.System.DNTraceSource read get_FreezableSource;
    ///<summary>Gets a name scope trace source.</summary>
    ///<returns>A name scope trace source.</returns>
    {class} property NameScopeSource: DDN.System.DNTraceSource read get_NameScopeSource;
    ///<summary>Gets a routed event trace source.</summary>
    ///<returns>A routed event trace source.</returns>
    {class} property RoutedEventSource: DDN.System.DNTraceSource read get_RoutedEventSource;
    ///<summary>Gets an animation trace source.</summary>
    ///<returns>An animation trace source.</returns>
    {class} property AnimationSource: DDN.System.DNTraceSource read get_AnimationSource;
    ///<summary>Gets a data-binding trace source.</summary>
    ///<returns>A data-binding trace source.</returns>
    {class} property DataBindingSource: DDN.System.DNTraceSource read get_DataBindingSource;
    ///<summary>Gets a document trace source.</summary>
    ///<returns>A document trace source.</returns>
    {class} property DocumentsSource: DDN.System.DNTraceSource read get_DocumentsSource;
    ///<summary>Gets a resource dictionary trace source.</summary>
    ///<returns>A resource dictionary trace source.</returns>
    {class} property ResourceDictionarySource: DDN.System.DNTraceSource read get_ResourceDictionarySource;
    ///<summary>Gets a markup trace source.</summary>
    ///<returns>A markup trace source.</returns>
    {class} property MarkupSource: DDN.System.DNTraceSource read get_MarkupSource;
    ///<summary>Gets an hwnd host trace source.</summary>
    ///<returns>An hwnd host trace source.</returns>
    {class} property HwndHostSource: DDN.System.DNTraceSource read get_HwndHostSource;
    ///<summary>Gets a shell trace source.</summary>
    ///<returns>A shell trace source.</returns>
    {class} property ShellSource: DDN.System.DNTraceSource read get_ShellSource;
  end;

  ///<summary>Provides debug tracing support that is specifically targeted for Windows Presentation Foundation (WPF) applications. </summary>
  [DNTypeName('System.Diagnostics.PresentationTraceSources')]
  DNPresentationTraceSources = interface(DDN.mscorlib.DNObject)
  ['{1FB0A883-23AE-3A94-AD1E-7FD02AE8CF58}']
  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNPresentationTraceSources = class(TDNGenericImport<DNPresentationTraceSourcesClass, DNPresentationTraceSources>) end;

  //-------------namespace: System.ComponentModel----------------
  DNCurrentChangingEventArgsClass = interface(DDN.mscorlib.DNEventArgsClass)
  ['{D5249D4F-7113-5338-B171-44CB8AC67A87}']
  { constructors } 

    ///<summary>Initializes a new instance of the <see cref="T:System.ComponentModel.CurrentChangingEventArgs" />
    ///  class.</summary>
    {class} function init: DNCurrentChangingEventArgs; overload;
    ///<summary>Initializes a new instance of the <see cref="T:System.ComponentModel.CurrentChangingEventArgs" />
    ///  class with the specified <paramref name="isCancelable" />
    ///  value.</summary>
    ///  <param name="isCancelable">A value that indicates whether the event is cancelable.</param>
    {class} function init(isCancelable: Boolean): DNCurrentChangingEventArgs; overload;

  end;

  ///<summary>Provides information for the <see cref="E:System.ComponentModel.ICollectionView.CurrentChanging" />
  ///  event.</summary>
  [DNTypeName('System.ComponentModel.CurrentChangingEventArgs')]
  DNCurrentChangingEventArgs = interface(DDN.mscorlib.DNEventArgs)
  ['{BD0DE444-65E7-3DCE-868D-F46694E861F3}']
  { getters & setters } 

    function get_IsCancelable: Boolean;
    function get_Cancel: Boolean;
    procedure set_Cancel(value: Boolean);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>Gets a value that indicates whether the event is cancelable.</summary>
    ///<returns><see langword="true" />
    ///  if the event is cancelable, otherwise, <see langword="false" />
    ///  . The default value is <see langword="true" />
    ///  .</returns>
    property IsCancelable: Boolean read get_IsCancelable;
    ///<summary>Gets or sets a value that indicates whether to cancel the event.</summary>
    ///<returns><see langword="true" />
    ///  if the event is to be canceled; otherwise, <see langword="false" />
    ///  . The default value is <see langword="false" />
    ///  .</returns>
    ///<exception cref="T:System.InvalidOperationException">If the value of <see cref="P:System.ComponentModel.CurrentChangingEventArgs.IsCancelable" />
    ///  is <see langword="false" />
    ///  .</exception>
    property Cancel: Boolean read get_Cancel write set_Cancel;
  end;

  TDNCurrentChangingEventArgs = class(TDNGenericImport<DNCurrentChangingEventArgsClass, DNCurrentChangingEventArgs>) end;

  //-------------namespace: System.IO.Packaging----------------
  DNSignatureVerificationEventArgsClass = interface(DDN.mscorlib.DNEventArgsClass)
  ['{C5635637-753B-5307-97C3-F6D52F794203}']
  end;

  ///<summary> Specifies the event args provided to the <see cref="T:System.IO.Packaging.InvalidSignatureEventHandler" />
  ///  . </summary>
  [DNTypeName('System.IO.Packaging.SignatureVerificationEventArgs')]
  DNSignatureVerificationEventArgs = interface(DDN.mscorlib.DNEventArgs)
  ['{1F5ADE43-CE21-3DA2-9F10-6ED4D16BB050}']
  { getters & setters } 

    function get_Signature: DNPackageDigitalSignature;
    function get_VerifyResult: DNVerifyResult;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary> Gets the digital signature being verified. </summary>
    ///<returns>The digital signature being verified.</returns>
    property Signature: DNPackageDigitalSignature read get_Signature;
    ///<summary> Gets the signature verification error. </summary>
    ///<returns>The signature verification error.</returns>
    property VerifyResult: DNVerifyResult read get_VerifyResult;
  end;

  TDNSignatureVerificationEventArgs = class(TDNGenericImport<DNSignatureVerificationEventArgsClass, DNSignatureVerificationEventArgs>) end;

  //-------------namespace: System.Windows.Threading----------------
  DNDispatcherEventArgsClass = interface(DDN.mscorlib.DNEventArgsClass)
  ['{4CE50468-3B58-5443-8EE1-D4B277BA19C3}']
  end;

  ///<summary>Provides event data for <see cref="T:System.Windows.Threading.Dispatcher" />
  ///  related events. </summary>
  [DNTypeName('System.Windows.Threading.DispatcherEventArgs')]
  DNDispatcherEventArgs = interface(DDN.mscorlib.DNEventArgs)
  ['{19265382-AC07-3B05-8935-325193B3B40E}']
  { getters & setters } 

    function get_Dispatcher: DNDispatcher;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>The <see cref="T:System.Windows.Threading.Dispatcher" />
    ///  associated with this event. </summary>
    ///<returns>The dispatcher.</returns>
    property Dispatcher: DNDispatcher read get_Dispatcher;
  end;

  TDNDispatcherEventArgs = class(TDNGenericImport<DNDispatcherEventArgsClass, DNDispatcherEventArgs>) end;

  //-------------namespace: System.Windows.Threading----------------
  DNDispatcherUnhandledExceptionEventArgsClass = interface(DNDispatcherEventArgsClass)
  ['{F751C5B1-5A3E-5CA9-B1D7-593024F0F674}']
  end;

  ///<summary>Provides data for the <see cref="T:System.Windows.Threading.Dispatcher" />
  ///<see cref="E:System.Windows.Threading.Dispatcher.UnhandledException" />
  ///  event.</summary>
  [DNTypeName('System.Windows.Threading.DispatcherUnhandledExceptionEventArgs')]
  DNDispatcherUnhandledExceptionEventArgs = interface(DNDispatcherEventArgs)
  ['{35CD6937-DB5C-32CB-BBF7-E1F9BC201095}']
  { getters & setters } 

    function get_Exception: DDN.mscorlib.DNException;
    function get_Handled: Boolean;
    procedure set_Handled(value: Boolean);
    function get_Dispatcher: DNDispatcher;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>Gets the exception that was raised when executing code by way of the dispatcher. </summary>
    ///<returns>The exception. </returns>
    property Exception: DDN.mscorlib.DNException read get_Exception;
    ///<summary>Gets or sets whether the exception event has been handled. </summary>
    ///<returns><see langword="true" />
    ///  if the exception was handled; otherwise, <see langword="false" />
    ///  .</returns>
    property Handled: Boolean read get_Handled write set_Handled;
    ///<summary>The <see cref="T:System.Windows.Threading.Dispatcher" />
    ///  associated with this event. </summary>
    ///<returns>The dispatcher.</returns>
    property Dispatcher: DNDispatcher read get_Dispatcher;
  end;

  TDNDispatcherUnhandledExceptionEventArgs = class(TDNGenericImport<DNDispatcherUnhandledExceptionEventArgsClass, DNDispatcherUnhandledExceptionEventArgs>) end;

  //-------------namespace: System.Windows.Threading----------------
  DNDispatcherUnhandledExceptionFilterEventArgsClass = interface(DNDispatcherEventArgsClass)
  ['{E8F12DA3-4148-575A-8DE1-D12088C7DAE7}']
  end;

  ///<summary>Provides data for the <see cref="T:System.Windows.Threading.Dispatcher" />
  ///<see cref="E:System.Windows.Threading.Dispatcher.UnhandledExceptionFilter" />
  ///  event.</summary>
  [DNTypeName('System.Windows.Threading.DispatcherUnhandledExceptionFilterEventArgs')]
  DNDispatcherUnhandledExceptionFilterEventArgs = interface(DNDispatcherEventArgs)
  ['{918BB443-6F39-3EBC-8E57-8FAC3C428B92}']
  { getters & setters } 

    function get_Exception: DDN.mscorlib.DNException;
    function get_RequestCatch: Boolean;
    procedure set_RequestCatch(value: Boolean);
    function get_Dispatcher: DNDispatcher;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>Gets the exception that was raised when executing code by way of the dispatcher.</summary>
    ///<returns>The exception.</returns>
    property Exception: DDN.mscorlib.DNException read get_Exception;
    ///<summary>Gets or sets whether the exception should be caught and the event handlers called. </summary>
    ///<returns><see langword="true" />
    ///  if the <see cref="E:System.Windows.Threading.Dispatcher.UnhandledException" />
    ///  should be raised; otherwise; <see langword="false" />
    ///  .  The default value is <see langword="true" />
    ///  .</returns>
    property RequestCatch: Boolean read get_RequestCatch write set_RequestCatch;
    ///<summary>The <see cref="T:System.Windows.Threading.Dispatcher" />
    ///  associated with this event. </summary>
    ///<returns>The dispatcher.</returns>
    property Dispatcher: DNDispatcher read get_Dispatcher;
  end;

  TDNDispatcherUnhandledExceptionFilterEventArgs = class(TDNGenericImport<DNDispatcherUnhandledExceptionFilterEventArgsClass, DNDispatcherUnhandledExceptionFilterEventArgs>) end;

  //-------------namespace: System.Windows.Threading----------------
  DNDispatcherHookEventArgsClass = interface(DDN.mscorlib.DNEventArgsClass)
  ['{8E5B96AD-675A-5D77-A0E4-14B54A5C6A07}']
  { constructors } 

    ///<summary>Initializes a new instance of the <see cref="T:System.Windows.Threading.DispatcherHookEventArgs" />
    ///  class. </summary>
    ///  <param name="operation">The operation associated with the event.</param>
    {class} function init(operation: DNDispatcherOperation): DNDispatcherHookEventArgs;

  end;

  ///<summary>Provides event data for <see cref="T:System.Windows.Threading.DispatcherHooks" />
  ///  events.</summary>
  [DNTypeName('System.Windows.Threading.DispatcherHookEventArgs')]
  DNDispatcherHookEventArgs = interface(DDN.mscorlib.DNEventArgs)
  ['{B48BDDAF-9FC9-3589-8B18-F5CDB772877B}']
  { getters & setters } 

    function get_Dispatcher: DNDispatcher;
    function get_Operation: DNDispatcherOperation;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>Gets the <see cref="T:System.Windows.Threading.Dispatcher" />
    ///  associated with this event. </summary>
    ///<returns>The <see cref="T:System.Windows.Threading.Dispatcher" />
    ///  associated with this event.</returns>
    property Dispatcher: DNDispatcher read get_Dispatcher;
    ///<summary>Gets the <see cref="T:System.Windows.Threading.DispatcherOperation" />
    ///  associated with this event. </summary>
    ///<returns>The operation.</returns>
    property Operation: DNDispatcherOperation read get_Operation;
  end;

  TDNDispatcherHookEventArgs = class(TDNGenericImport<DNDispatcherHookEventArgsClass, DNDispatcherHookEventArgs>) end;

  //-------------namespace: System.Security.RightsManagement----------------
  DNRightsManagementExceptionClass = interface(DDN.mscorlib.DNExceptionClass)
  ['{7AA9D20E-AEEB-55E4-83FD-C97C4D085292}']
  { constructors } 

    ///<summary>Initializes a new instance of the <see cref="T:System.Security.RightsManagement.RightsManagementException" />
    ///  class.</summary>
    {class} function init: DNRightsManagementException; overload;
    ///<summary>Initializes a new instance of the <see cref="T:System.Security.RightsManagement.RightsManagementException" />
    ///  class with a given message.</summary>
    ///  <param name="message">A message that describes the error.</param>
    {class} function init(message: string): DNRightsManagementException; overload;
    ///<summary>Initializes a new instance of the <see cref="T:System.Security.RightsManagement.RightsManagementException" />
    ///  class with a given <see cref="P:System.Exception.Message" />
    ///  and <see cref="P:System.Exception.InnerException" />
    ///  .</summary>
    ///  <param name="message">A message that describes the error.</param>
    ///  <param name="innerException">The exception instance that caused this exception.</param>
    {class} function init(message: string; innerException: DDN.mscorlib.DNException): DNRightsManagementException; overload;
    ///<summary>Initializes a new instance of the <see cref="T:System.Security.RightsManagement.RightsManagementException" />
    ///  class with a given <see cref="T:System.Security.RightsManagement.RightsManagementFailureCode" />
    ///  .</summary>
    ///  <param name="failureCode">The failure code for the error.</param>
    {class} function init(failureCode: DNRightsManagementFailureCode): DNRightsManagementException; overload;
    ///<summary>Initializes a new instance of the <see cref="T:System.Security.RightsManagement.RightsManagementException" />
    ///  class with a given <see cref="T:System.Security.RightsManagement.RightsManagementFailureCode" />
    ///  and <see cref="P:System.Exception.Message" />
    ///  .</summary>
    ///  <param name="failureCode">The failure code for the error.</param>
    ///  <param name="message">A message that describes the error.</param>
    {class} function init(failureCode: DNRightsManagementFailureCode; message: string): DNRightsManagementException; overload;
    ///<summary>Initializes a new instance of the <see cref="T:System.Security.RightsManagement.RightsManagementException" />
    ///  class with a given <see cref="T:System.Security.RightsManagement.RightsManagementFailureCode" />
    ///  and <see cref="P:System.Exception.InnerException" />
    ///  .</summary>
    ///  <param name="failureCode">The failure code for the error.</param>
    ///  <param name="innerException">The exception instance that caused the error.</param>
    {class} function init(failureCode: DNRightsManagementFailureCode; innerException: DDN.mscorlib.DNException): DNRightsManagementException; overload;
    ///<summary>Initializes a new instance of the <see cref="T:System.Security.RightsManagement.RightsManagementException" />
    ///  class with a given <see cref="T:System.Security.RightsManagement.RightsManagementFailureCode" />
    ///  , <see cref="P:System.Exception.Message" />
    ///  and <see cref="P:System.Exception.InnerException" />
    ///  .</summary>
    ///  <param name="failureCode">The failure code for the error.</param>
    ///  <param name="message">A message that describes the error.</param>
    ///  <param name="innerException">The exception instance that caused the error.</param>
    {class} function init(failureCode: DNRightsManagementFailureCode; message: string; innerException: DDN.mscorlib.DNException): DNRightsManagementException; overload;

  end;

  ///<summary>Represents an error condition when a rights management operation cannot complete successfully.</summary>
  [DNTypeName('System.Security.RightsManagement.RightsManagementException')]
  DNRightsManagementException = interface(DDN.mscorlib.DNException)
  ['{3C3EA39B-22C2-38B9-9DE8-236C4D2F0360}']
  { getters & setters } 

    function get_FailureCode: DNRightsManagementFailureCode;
    function get_Message: string;
    function get_Data: DDN.mscorlib.DNIDictionary;
    function get_InnerException: DDN.mscorlib.DNException;
    function get_TargetSite: DDN.mscorlib.DNMethodBase;
    function get_StackTrace: string;
    function get_HelpLink: string;
    procedure set_HelpLink(value: string);
    function get_Source: string;
    procedure set_Source(value: string);
    function get_HResult: Int32;

  { methods } 

    ///<summary>Sets the <see cref="T:System.Runtime.Serialization.SerializationInfo" />
    ///  store with the parameter name and information about the exception.</summary>
    ///  <param name="info">The object that holds the serialized data.</param>
    ///  <param name="context">The contextual information about the source or destination.</param>
    ///<exception cref="T:System.ArgumentNullException">The <paramref name="info" />
    ///  parameter is <see langword="null" />
    ///  .</exception>
    procedure GetObjectData(info: DDN.mscorlib.DNSerializationInfo; context: DDN.mscorlib.DNStreamingContext);
    function GetBaseException: DDN.mscorlib.DNException;
    function ToString: string;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    ///<summary>Gets the <see cref="T:System.Security.RightsManagement.RightsManagementFailureCode" />
    ///  for the error.</summary>
    ///<returns>The failure code for the error.</returns>
    property FailureCode: DNRightsManagementFailureCode read get_FailureCode;
    property Message: string read get_Message;
    property Data: DDN.mscorlib.DNIDictionary read get_Data;
    property InnerException: DDN.mscorlib.DNException read get_InnerException;
    property TargetSite: DDN.mscorlib.DNMethodBase read get_TargetSite;
    property StackTrace: string read get_StackTrace;
    property HelpLink: string read get_HelpLink write set_HelpLink;
    property Source: string read get_Source write set_Source;
    property HResult: Int32 read get_HResult;
  end;

  TDNRightsManagementException = class(TDNGenericImport<DNRightsManagementExceptionClass, DNRightsManagementException>) end;

  //-------------namespace: System.IO----------------
  DNFileFormatExceptionClass = interface(DDN.mscorlib.DNFormatExceptionClass)
  ['{1CE1179D-68EC-5715-9FD6-B18C9BBB7256}']
  { constructors } 

    ///<summary>Creates a new instance of the <see cref="T:System.IO.FileFormatException" />
    ///  class.</summary>
    {class} function init: DNFileFormatException; overload;
    ///<summary>Creates a new instance of the <see cref="T:System.IO.FileFormatException" />
    ///  class with a specified error message.</summary>
    ///  <param name="message">A <see cref="T:System.String" />
    ///  value that represents the error message.</param>
    {class} function init(message: string): DNFileFormatException; overload;
    ///<summary>Creates a new instance of the <see cref="T:System.IO.FileFormatException" />
    ///  class with a specified error message and exception type.</summary>
    ///  <param name="message">A <see cref="T:System.String" />
    ///  value that represents the error message.</param>
    ///  <param name="innerException">The value of the <see cref="P:System.Exception.InnerException" />
    ///  property, which represents the cause of the current exception.</param>
    {class} function init(message: string; innerException: DDN.mscorlib.DNException): DNFileFormatException; overload;
    ///<summary>Creates a new instance of the <see cref="T:System.IO.FileFormatException" />
    ///  class with a source URI value.</summary>
    ///  <param name="sourceUri">The <see cref="T:System.Uri" />
    ///  value of the file that caused this error.</param>
    {class} function init(sourceUri: DDN.System.DNUri): DNFileFormatException; overload;
    ///<summary>Creates a new instance of the <see cref="T:System.IO.FileFormatException" />
    ///  class with a source URI value and a specified error message.</summary>
    ///  <param name="sourceUri">The <see cref="T:System.Uri" />
    ///  value of the file that caused this error.</param>
    ///  <param name="message">A <see cref="T:System.String" />
    ///  value that represents the error message.</param>
    {class} function init(sourceUri: DDN.System.DNUri; message: string): DNFileFormatException; overload;
    ///<summary>Creates a new instance of the <see cref="T:System.IO.FileFormatException" />
    ///  class with a source URI value and an exception type.</summary>
    ///  <param name="sourceUri">The <see cref="T:System.Uri" />
    ///  value of the file that caused this error.</param>
    ///  <param name="innerException">The value of the <see cref="P:System.Exception.InnerException" />
    ///  property, which represents the cause of the current exception.</param>
    {class} function init(sourceUri: DDN.System.DNUri; innerException: DDN.mscorlib.DNException): DNFileFormatException; overload;
    ///<summary>Creates a new instance of the <see cref="T:System.IO.FileFormatException" />
    ///  class with a source URI value, a specified error message, and an exception type.</summary>
    ///  <param name="sourceUri">The <see cref="T:System.Uri" />
    ///  value of the file that caused this error.</param>
    ///  <param name="message">A <see cref="T:System.String" />
    ///  value that represents the error message.</param>
    ///  <param name="innerException">The value of the <see cref="P:System.Exception.InnerException" />
    ///  property, which represents the cause of the current exception.</param>
    {class} function init(sourceUri: DDN.System.DNUri; message: string; innerException: DDN.mscorlib.DNException): DNFileFormatException; overload;

  end;

  ///<summary>The exception that is thrown when an input file or a data stream that is supposed to conform to a certain file format specification is malformed.</summary>
  [DNTypeName('System.IO.FileFormatException')]
  DNFileFormatException = interface(DDN.mscorlib.DNFormatException)
  ['{7A9233CA-6291-3354-8D1B-86B97F572403}']
  { getters & setters } 

    function get_SourceUri: DDN.System.DNUri;
    function get_Message: string;
    function get_Data: DDN.mscorlib.DNIDictionary;
    function get_InnerException: DDN.mscorlib.DNException;
    function get_TargetSite: DDN.mscorlib.DNMethodBase;
    function get_StackTrace: string;
    function get_HelpLink: string;
    procedure set_HelpLink(value: string);
    function get_Source: string;
    procedure set_Source(value: string);
    function get_HResult: Int32;

  { methods } 

    ///<summary>Sets the <see cref="T:System.Runtime.Serialization.SerializationInfo" />
    ///  object with the file name and additional exception information.</summary>
    ///  <param name="info">The object that holds the serialized object data.</param>
    ///  <param name="context">The contextual information about the source or destination.</param>
    procedure GetObjectData(info: DDN.mscorlib.DNSerializationInfo; context: DDN.mscorlib.DNStreamingContext);
    function GetBaseException: DDN.mscorlib.DNException;
    function ToString: string;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    ///<summary>Gets the name of a file that caused the <see cref="T:System.IO.FileFormatException" />
    ///  .</summary>
    ///<returns>A <see cref="T:System.Uri" />
    ///  that represents the name the file that caused the exception.</returns>
    property SourceUri: DDN.System.DNUri read get_SourceUri;
    property Message: string read get_Message;
    property Data: DDN.mscorlib.DNIDictionary read get_Data;
    property InnerException: DDN.mscorlib.DNException read get_InnerException;
    property TargetSite: DDN.mscorlib.DNMethodBase read get_TargetSite;
    property StackTrace: string read get_StackTrace;
    property HelpLink: string read get_HelpLink write set_HelpLink;
    property Source: string read get_Source write set_Source;
    property HResult: Int32 read get_HResult;
  end;

  TDNFileFormatException = class(TDNGenericImport<DNFileFormatExceptionClass, DNFileFormatException>) end;

  //-------------namespace: System.IO.Packaging----------------
  DNEncryptedPackageEnvelopeClass = interface(DNObjectClass)
  ['{D2D92B94-85F2-5742-9F44-0B94DD3D1572}']
  { static methods } 

    ///<summary>Creates and returns an <see cref="T:System.IO.Packaging.EncryptedPackageEnvelope" />
    ///  and gives it the specified file name.</summary>
    ///  <param name="envelopeFileName">The name of the OLE compound file.</param>
    ///  <param name="publishLicense">The publish license that is embedded in the compound file.</param>
    ///  <param name="cryptoProvider">An object that determines what operations the current user is allowed to perform on the encrypted content.</param>
    ///<returns>The newly created <see cref="T:System.IO.Packaging.EncryptedPackageEnvelope" />
    ///  . </returns>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="envelopeFileName" />
    ///  is <see langword="null" />
    ///  .</exception>
    {class} function Create(envelopeFileName: string; publishLicense: DNPublishLicense; cryptoProvider: DNCryptoProvider): DNEncryptedPackageEnvelope; overload;
    ///<summary>Creates and returns an <see cref="T:System.IO.Packaging.EncryptedPackageEnvelope" />
    ///  on the specified stream.</summary>
    ///  <param name="envelopeStream">The stream on which to create the file.</param>
    ///  <param name="publishLicense">The publish license that is embedded in the compound file.</param>
    ///  <param name="cryptoProvider">An object that determines what operations the current user is allowed to perform on the encrypted content.</param>
    ///<returns>The newly created <see cref="T:System.IO.Packaging.EncryptedPackageEnvelope" />
    ///  . </returns>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="envelopeStream" />
    ///  is <see langword="null" />
    ///  .</exception><exception cref="T:System.NotSupportedException"><paramref name="envelopeStream" />
    ///  does not provide read/write access.</exception>
    {class} function Create(envelopeStream: DDN.mscorlib.DNStream; publishLicense: DNPublishLicense; cryptoProvider: DNCryptoProvider): DNEncryptedPackageEnvelope; overload;
    ///<summary>Creates and returns an <see cref="T:System.IO.Packaging.EncryptedPackageEnvelope" />
    ///  that uses the specified unencrypted package as its content, and gives it the specified file name.</summary>
    ///  <param name="envelopeFileName">The name of the OLE compound file.</param>
    ///  <param name="packageStream">The stream representing the existing unencrypted package.</param>
    ///  <param name="publishLicense">The publish license that is embedded in the compound file.</param>
    ///  <param name="cryptoProvider">An object that determines what operations the current user is allowed to perform on the encrypted content.</param>
    ///<returns>The newly created <see cref="T:System.IO.Packaging.EncryptedPackageEnvelope" />
    ///  .</returns>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="envelopeFileName" />
    ///  or <paramref name="packageStream" />
    ///  is <see langword="null" />
    ///  .</exception>
    {class} function CreateFromPackage(envelopeFileName: string; packageStream: DDN.mscorlib.DNStream; publishLicense: DNPublishLicense; cryptoProvider: DNCryptoProvider): DNEncryptedPackageEnvelope; overload;
    ///<summary>Creates and returns an <see cref="T:System.IO.Packaging.EncryptedPackageEnvelope" />
    ///  (on the specified stream) that uses the specified unencrypted package as its content.</summary>
    ///  <param name="envelopeStream">The stream on which to create the file.</param>
    ///  <param name="packageStream">The stream representing the existing unencrypted package.</param>
    ///  <param name="publishLicense">The publish license that is embedded in the compound file.</param>
    ///  <param name="cryptoProvider">An object that determines what operations the current user is allowed to perform on the encrypted content.</param>
    ///<returns>The newly created <see cref="T:System.IO.Packaging.EncryptedPackageEnvelope" />
    ///  . </returns>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="envelopeStream" />
    ///  or <paramref name="packageStream" />
    ///  is <see langword="null" />
    ///  .</exception><exception cref="T:System.NotSupportedException"><paramref name="envelopeStream" />
    ///  does not provide read/write access.</exception>
    {class} function CreateFromPackage(envelopeStream: DDN.mscorlib.DNStream; packageStream: DDN.mscorlib.DNStream; publishLicense: DNPublishLicense; cryptoProvider: DNCryptoProvider): DNEncryptedPackageEnvelope; overload;
    ///<summary>Open the encrypted package in the specified file as read only and unshared.</summary>
    ///  <param name="envelopeFileName">The file containing the encrypted package.</param>
    ///<returns>The <see cref="T:System.IO.Packaging.EncryptedPackageEnvelope" />
    ///  that is opened.</returns>
    {class} function Open(envelopeFileName: string): DNEncryptedPackageEnvelope; overload;
    ///<summary>Open the encrypted package in the specified file as unshared and with the specified access.</summary>
    ///  <param name="envelopeFileName">The file containing the encrypted package.</param>
    ///  <param name="access">The type of access.</param>
    ///<returns>The <see cref="T:System.IO.Packaging.EncryptedPackageEnvelope" />
    ///  that is opened.</returns>
    {class} function Open(envelopeFileName: string; access: DDN.mscorlib.DNFileAccess): DNEncryptedPackageEnvelope; overload;
    ///<summary>Open the encrypted package in the specified file and gives it the specified access and sharing.</summary>
    ///  <param name="envelopeFileName">The file containing the encrypted package.</param>
    ///  <param name="access">The type of access.</param>
    ///  <param name="sharing">The type of sharing.</param>
    ///<returns>The <see cref="T:System.IO.Packaging.EncryptedPackageEnvelope" />
    ///  that is opened.</returns>
    {class} function Open(envelopeFileName: string; access: DDN.mscorlib.DNFileAccess; sharing: DDN.mscorlib.DNFileShare): DNEncryptedPackageEnvelope; overload;
    ///<summary>Open the encrypted package in the specified stream.</summary>
    ///  <param name="envelopeStream">The stream containing the encrypted package.</param>
    ///<returns>The <see cref="T:System.IO.Packaging.EncryptedPackageEnvelope" />
    ///  that is opened.</returns>
    {class} function Open(envelopeStream: DDN.mscorlib.DNStream): DNEncryptedPackageEnvelope; overload;
    ///<summary>Gets a value specifying whether the specified file is an OLE compound file with an encrypted package stream.</summary>
    ///  <param name="fileName">The file that is tested.</param>
    ///<returns><see langword="true" />
    ///  if the specified file is an OLE compound file with an encrypted package stream; otherwise, <see langword="false" />
    ///  . </returns>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="fileName" />
    ///  is <see langword="null" />
    ///  .</exception>
    {class} function IsEncryptedPackageEnvelope(fileName: string): Boolean; overload;
    ///<summary>Gets a value specifying whether the specified stream is an OLE compound file with an encrypted package stream.</summary>
    ///  <param name="stream">The stream that is tested.</param>
    ///<returns><see langword="true" />
    ///  if the specified stream is an OLE compound file with an encrypted package stream; otherwise, <see langword="false" />
    ///  . </returns>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="stream" />
    ///  is <see langword="null" />
    ///  .</exception>
    {class} function IsEncryptedPackageEnvelope(stream: DDN.mscorlib.DNStream): Boolean; overload;

  end;

  ///<summary>Represents an OLE compound file that contains an encrypted package.</summary>
  [DNTypeName('System.IO.Packaging.EncryptedPackageEnvelope')]
  DNEncryptedPackageEnvelope = interface(DDN.mscorlib.DNIDisposable)
  ['{2C887216-0039-30CA-A073-7695662D31FE}']
  { getters & setters } 

    function get_RightsManagementInformation: DNRightsManagementInformation;
    function get_PackageProperties: DNPackageProperties;
    function get_FileOpenAccess: DDN.mscorlib.DNFileAccess;
    function get_StorageInfo: DNStorageInfo;

  { methods } 

    ///<summary>Closes the encrypted package and the OLE compound file that holds it.</summary>
    procedure Close;
    ///<summary>Releases all resources used by the <see cref="T:System.IO.Packaging.EncryptedPackageEnvelope" />
    ///  . </summary>
    procedure Dispose;
    ///<summary>Flush the stream for both the <see cref="T:System.IO.Packaging.EncryptedPackageEnvelope" />
    ///  and its package content.</summary>
    procedure Flush;
    ///<summary>Gets the encrypted package inside the <see cref="T:System.IO.Packaging.EncryptedPackageEnvelope" />
    ///  .</summary>
    ///<returns>The <see cref="T:System.IO.Packaging.Package" />
    ///  in the envelope. </returns>
    function GetPackage: DNPackage;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>Gets the rights management information stored in the <see cref="T:System.IO.Packaging.EncryptedPackageEnvelope" />
    ///  ; specifically, the <see cref="T:System.Security.RightsManagement.PublishLicense" />
    ///  and the <see cref="T:System.Security.RightsManagement.UseLicense" />
    ///  s stored in the OLE compound file that embodies the rights-management protected package</summary>
    ///<returns>The <see cref="T:System.IO.Packaging.RightsManagementInformation" />
    ///  for the package.</returns>
    property RightsManagementInformation: DNRightsManagementInformation read get_RightsManagementInformation;
    ///<summary>Gets the core package properties (such as Title and Subject) of the rights managed document.</summary>
    ///<returns>The <see cref="T:System.IO.Packaging.PackageProperties" />
    ///  for the package.</returns>
    property PackageProperties: DNPackageProperties read get_PackageProperties;
    ///<summary>Gets a value that specifies whether the file was opened with access to read, write, or both.</summary>
    ///<returns>The <see cref="T:System.IO.FileAccess" />
    ///  value that was used to open the file. </returns>
    property FileOpenAccess: DDN.mscorlib.DNFileAccess read get_FileOpenAccess;
    ///<summary>Gets an object that provides access to the compound file streams outside the encrypted package.</summary>
    ///<returns>A <see cref="T:System.IO.Packaging.StorageInfo" />
    ///  representing streams in the OLE compound file that are outside the encrypted package.</returns>
    property StorageInfo: DNStorageInfo read get_StorageInfo;
  end;

  TDNEncryptedPackageEnvelope = class(TDNGenericImport<DNEncryptedPackageEnvelopeClass, DNEncryptedPackageEnvelope>) end;

  //-------------namespace: System.IO.Packaging----------------
  DNPackageClass = interface(DNObjectClass)
  ['{D4A59CAA-C0BD-5A0A-AC6A-F9266ED14B99}']
  { static methods } 

    ///<summary>Opens a package at a given path and file name.</summary>
    ///  <param name="path">The path and file name of the package.</param>
    ///<returns>The opened package.</returns>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="path" />
    ///  is <see langword="null" />
    ///  .</exception>
    {class} function Open(path: string): DNPackage; overload;
    ///<summary>Opens a package at a given path using a given file mode. </summary>
    ///  <param name="path">The path and file name of the package.</param>
    ///  <param name="packageMode">The file mode in which to open the package.</param>
    ///<returns>The opened package.</returns>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="path" />
    ///  is <see langword="null" />
    ///  .</exception><exception cref="T:System.ArgumentOutOfRangeException">Value for <paramref name="packageMode" />
    ///  is not valid.</exception>
    {class} function Open(path: string; packageMode: DDN.mscorlib.DNFileMode): DNPackage; overload;
    ///<summary>Opens a package at a given path using a given file mode and file access setting.</summary>
    ///  <param name="path">The path and file name of the package.</param>
    ///  <param name="packageMode">The file mode in which to open the package.</param>
    ///  <param name="packageAccess">The file access in which to open the package.</param>
    ///<returns>The opened package.</returns>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="path" />
    ///  is <see langword="null" />
    ///  .</exception><exception cref="T:System.ArgumentOutOfRangeException">Value for <paramref name="packageMode" />
    ///  or <paramref name="packageAccess" />
    ///  is not valid.</exception>
    {class} function Open(path: string; packageMode: DDN.mscorlib.DNFileMode; packageAccess: DDN.mscorlib.DNFileAccess): DNPackage; overload;
    ///<summary>Opens a package at a given path using a given file mode, file access, and file share setting.</summary>
    ///  <param name="path">The path and file name of the package.</param>
    ///  <param name="packageMode">The file mode in which to open the package.</param>
    ///  <param name="packageAccess">The file access in which to open the package.</param>
    ///  <param name="packageShare">The file sharing mode in which to open the package.</param>
    ///<returns>The opened package.</returns>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="path" />
    ///  is <see langword="null" />
    ///  .</exception><exception cref="T:System.ArgumentOutOfRangeException">The value for <paramref name="packageMode" />
    ///  , <paramref name="packageAccess" />
    ///  , or <paramref name="packageShare" />
    ///  is not valid.</exception>
    {class} function Open(path: string; packageMode: DDN.mscorlib.DNFileMode; packageAccess: DDN.mscorlib.DNFileAccess; packageShare: DDN.mscorlib.DNFileShare): DNPackage; overload;
    ///<summary>Opens a package on a given IO stream.</summary>
    ///  <param name="stream">The IO stream on which to open the package.</param>
    ///<returns>The opened package.</returns>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="stream" />
    ///  is <see langword="null" />
    ///  .</exception><exception cref="T:System.IO.IOException">The package to open requires read or read/write permission and the specified <paramref name="stream" />
    ///  is write-only; or, the package to open requires write or read/write permission and the specified <paramref name="stream" />
    ///  is read-only.</exception>
    {class} function Open(stream: DDN.mscorlib.DNStream): DNPackage; overload;
    ///<summary>Opens a package with a given IO stream and file mode.</summary>
    ///  <param name="stream">The IO stream on which to open the package.</param>
    ///  <param name="packageMode">The file mode in which to open the package.</param>
    ///<returns>The opened package.</returns>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="stream" />
    ///  is <see langword="null" />
    ///  .</exception><exception cref="T:System.ArgumentOutOfRangeException"><paramref name="packageMode" />
    ///  value is not valid.</exception><exception cref="T:System.IO.IOException">The package to open requires read or read/write permission and the specified <paramref name="stream" />
    ///  is write-only; or, the package to open requires write or read/write permission and the specified <paramref name="stream" />
    ///  is read-only.</exception>
    {class} function Open(stream: DDN.mscorlib.DNStream; packageMode: DDN.mscorlib.DNFileMode): DNPackage; overload;
    ///<summary>Opens a package with a given IO stream, file mode, and file access setting.</summary>
    ///  <param name="stream">The IO stream on which to open the package.</param>
    ///  <param name="packageMode">The file mode in which to open the package.</param>
    ///  <param name="packageAccess">The file access in which to open the package.</param>
    ///<returns>The opened package.</returns>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="stream" />
    ///  is <see langword="null" />
    ///  .</exception><exception cref="T:System.ArgumentOutOfRangeException">The value for <paramref name="packageMode" />
    ///  or <paramref name="packageAccess" />
    ///  is not valid.</exception><exception cref="T:System.IO.IOException">The package to open requires read or read/write permission and the specified <paramref name="stream" />
    ///  is write-only; or the package to open requires write or read/write permission and the specified <paramref name="stream" />
    ///  is read-only.</exception>
    {class} function Open(stream: DDN.mscorlib.DNStream; packageMode: DDN.mscorlib.DNFileMode; packageAccess: DDN.mscorlib.DNFileAccess): DNPackage; overload;

  end;

  ///<summary>Represents a container that can store multiple data objects.</summary>
  [DNTypeName('System.IO.Packaging.Package')]
  DNPackage = interface(DDN.mscorlib.DNIDisposable)
  ['{E64FFA71-5302-3787-84BC-17A0A7697095}']
  { getters & setters } 

    function get_FileOpenAccess: DDN.mscorlib.DNFileAccess;
    function get_PackageProperties: DNPackageProperties;

  { methods } 

    ///<summary>Creates a new uncompressed part with a given URI and content type.</summary>
    ///  <param name="partUri">The uniform resource identifier (URI)Â of the new part.</param>
    ///  <param name="contentType">The content type of the data stream.</param>
    ///<returns>The new created part.</returns>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="partUri" />
    ///  or <paramref name="contentType" />
    ///  is <see langword="null" />
    ///  .</exception><exception cref="T:System.ArgumentException"><paramref name="partUri" />
    ///  is not a valid <see cref="T:System.IO.Packaging.PackagePart" />
    ///  URI.</exception><exception cref="T:System.InvalidOperationException">A part with the specified <paramref name="partUri" />
    ///  is already present in the package.</exception><exception cref="T:System.ObjectDisposedException">The package is not open (<see cref="M:System.IO.Packaging.Package.Dispose(System.Boolean)" />
    ///  or <see cref="M:System.IO.Packaging.Package.Close" />
    ///  has been called).</exception><exception cref="T:System.IO.IOException">The package is read-only (a new part cannot be added).</exception>
    function CreatePart(partUri: DDN.System.DNUri; contentType: string): DNPackagePart; overload;
    ///<summary>Creates a new part with a given URI, content type, and compression option.</summary>
    ///  <param name="partUri">The URIÂ of the new part.</param>
    ///  <param name="contentType">The content type of the data stream.</param>
    ///  <param name="compressionOption">The compression option for the data stream, <see cref="F:System.IO.Packaging.CompressionOption.NotCompressed" />
    ///  or <see cref="F:System.IO.Packaging.CompressionOption.Normal" />
    ///  compression.</param>
    ///<returns>The new created part.</returns>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="partUri" />
    ///  or <paramref name="contentType" />
    ///  is <see langword="null" />
    ///  .</exception><exception cref="T:System.ArgumentException"><paramref name="partUri" />
    ///  is not a valid <see cref="T:System.IO.Packaging.PackagePart" />
    ///  uniform resource identifier (URI).</exception><exception cref="T:System.InvalidOperationException">A part with the specified <paramref name="partUri" />
    ///  is already present in the package.</exception><exception cref="T:System.ArgumentOutOfRangeException">The <paramref name="compressionOption" />
    ///  value is not valid.</exception><exception cref="T:System.ObjectDisposedException">The package is not open (<see cref="M:System.IO.Packaging.Package.Dispose(System.Boolean)" />
    ///  or <see cref="M:System.IO.Packaging.Package.Close" />
    ///  has been called).</exception><exception cref="T:System.IO.IOException">The package is read-only (a new part cannot be added).</exception>
    function CreatePart(partUri: DDN.System.DNUri; contentType: string; compressionOption: DNCompressionOption): DNPackagePart; overload;
    ///<summary>Returns the part with a given URI.</summary>
    ///  <param name="partUri">The uniform resource identifier (URI) of the part to return.</param>
    ///<returns>The part with the specified <paramref name="partUri" />
    ///  .</returns>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="partUri" />
    ///  is <see langword="null" />
    ///  .</exception><exception cref="T:System.ArgumentException"><paramref name="partUri" />
    ///  is not a valid <see cref="T:System.IO.Packaging.PackagePart" />
    ///  uniform resource identifier (URI).</exception><exception cref="T:System.InvalidOperationException">A part with the specified <paramref name="partUri" />
    ///  is not in the package.</exception><exception cref="T:System.ObjectDisposedException">The package is not open (<see cref="M:System.IO.Packaging.Package.Dispose(System.Boolean)" />
    ///  or <see cref="M:System.IO.Packaging.Package.Close" />
    ///  has been called).</exception><exception cref="T:System.IO.IOException">The package is write-only.</exception>
    function GetPart(partUri: DDN.System.DNUri): DNPackagePart;
    ///<summary>Indicates whether a part with a given URI is in the package.</summary>
    ///  <param name="partUri">The <see cref="T:System.Uri" />
    ///  of the part to check for.</param>
    ///<returns><see langword="true" />
    ///  if a part with the specified <paramref name="partUri" />
    ///  is in the package; otherwise, <see langword="false" />
    ///  .</returns>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="partUri" />
    ///  is <see langword="null" />
    ///  .</exception><exception cref="T:System.ArgumentException"><paramref name="partUri" />
    ///  is not a valid <see cref="T:System.IO.Packaging.PackagePart" />
    ///  uniform resource identifier (URI).</exception><exception cref="T:System.ObjectDisposedException">The package is not open (<see cref="M:System.IO.Packaging.Package.Dispose(System.Boolean)" />
    ///  or <see cref="M:System.IO.Packaging.Package.Close" />
    ///  has been called).</exception><exception cref="T:System.IO.IOException">The package is write-only (information cannot be read).</exception>
    function PartExists(partUri: DDN.System.DNUri): Boolean;
    ///<summary>Saves and closes the package plus all underlying part streams.</summary>
    procedure Close;
    ///<summary>Creates a package-level relationship to a part with a given URI, target mode, and relationship type. </summary>
    ///  <param name="targetUri">The uniform resource identifier (URI) of the target part.</param>
    ///  <param name="targetMode">Indicates if the target part is <see cref="F:System.IO.Packaging.TargetMode.Internal" />
    ///  or <see cref="F:System.IO.Packaging.TargetMode.External" />
    ///  to the package.</param>
    ///  <param name="relationshipType">A URI that uniquely defines the role of the relationship.</param>
    ///<returns>The package-level relationship to the specified part.</returns>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="targetUri" />
    ///  or <paramref name="relationshipType" />
    ///  is <see langword="null" />
    ///  .</exception><exception cref="T:System.ArgumentException">The <paramref name="targetUri" />
    ///  part is a <see cref="T:System.IO.Packaging.PackageRelationship" />
    ///  , or <paramref name="targetMode" />
    ///  is <see cref="F:System.IO.Packaging.TargetMode.Internal" />
    ///  and <paramref name="targetUri" />
    ///  is an absolute URI.</exception><exception cref="T:System.ArgumentOutOfRangeException">The value for <paramref name="targetMode" />
    ///  is not valid.</exception><exception cref="T:System.ObjectDisposedException">The package is not open (<see cref="M:System.IO.Packaging.Package.Dispose(System.Boolean)" />
    ///  or <see cref="M:System.IO.Packaging.Package.Close" />
    ///  has been called).</exception><exception cref="T:System.IO.IOException">The package is read-only.</exception>
    function CreateRelationship(targetUri: DDN.System.DNUri; targetMode: DNTargetMode; relationshipType: string): DNPackageRelationship; overload;
    ///<summary>Creates a package-level relationship to a part with a given URI, target mode, relationship type, and identifier (ID).</summary>
    ///  <param name="targetUri">The uniform resource identifier (URI) of the target part.</param>
    ///  <param name="targetMode">Indicates if the target part is <see cref="F:System.IO.Packaging.TargetMode.Internal" />
    ///  or <see cref="F:System.IO.Packaging.TargetMode.External" />
    ///  to the package.</param>
    ///  <param name="relationshipType">A URI that uniquely defines the role of the relationship.</param>
    ///  <param name="id">A unique XML identifier.</param>
    ///<returns>The package-level relationship to the specified part.</returns>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="targetUri" />
    ///  or <paramref name="relationshipType" />
    ///  is <see langword="null" />
    ///  .</exception><exception cref="T:System.ArgumentException">The <paramref name="targetUri" />
    ///  part is a <see cref="T:System.IO.Packaging.PackageRelationship" />
    ///  , or <paramref name="targetMode" />
    ///  is <see cref="F:System.IO.Packaging.TargetMode.Internal" />
    ///  and <paramref name="targetUri" />
    ///  is an absolute URI.</exception><exception cref="T:System.ArgumentOutOfRangeException">The value for <paramref name="targetMode" />
    ///  is not valid.</exception><exception cref="T:System.ObjectDisposedException">The package is not open (<see cref="M:System.IO.Packaging.Package.Dispose(System.Boolean)" />
    ///  or <see cref="M:System.IO.Packaging.Package.Close" />
    ///  has been called).</exception><exception cref="T:System.IO.IOException">The package is read-only.</exception><exception cref="T:System.Xml.XmlException"><paramref name="id" />
    ///  is not a valid XML identifier; or a part with the specified <paramref name="id" />
    ///  already occurs in the package.</exception>
    function CreateRelationship(targetUri: DDN.System.DNUri; targetMode: DNTargetMode; relationshipType: string; id: string): DNPackageRelationship; overload;
    ///<summary>Returns a collection of all the package-level relationships.</summary>
    ///<returns>A collection of all the package-level relationships that are contained in the package.</returns>
    ///<exception cref="T:System.ObjectDisposedException">The package is not open (<see cref="M:System.IO.Packaging.Package.Dispose(System.Boolean)" />
    ///  or <see cref="M:System.IO.Packaging.Package.Close" />
    ///  has been called).</exception><exception cref="T:System.IO.IOException">The package is write-only.</exception>
    function GetRelationships: DNPackageRelationshipCollection;
    ///<summary>Returns a collection of all the package-level relationships that match a given <see cref="P:System.IO.Packaging.PackageRelationship.RelationshipType" />
    ///  . </summary>
    ///  <param name="relationshipType">The <see cref="P:System.IO.Packaging.PackageRelationship.RelationshipType" />
    ///  to match and return in the collection.</param>
    ///<returns>A collection of package-level relationships that match the specified <paramref name="relationshipType" />
    ///  .</returns>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="relationshipType" />
    ///  is <see langword="null" />
    ///  .</exception><exception cref="T:System.ArgumentException"><paramref name="relationshipType" />
    ///  is an empty string.</exception><exception cref="T:System.ObjectDisposedException">The package is not open (<see cref="M:System.IO.Packaging.Package.Dispose(System.Boolean)" />
    ///  or <see cref="M:System.IO.Packaging.Package.Close" />
    ///  has been called).</exception><exception cref="T:System.IO.IOException">The package is write-only.</exception>
    function GetRelationshipsByType(relationshipType: string): DNPackageRelationshipCollection;
    ///<summary>Returns the package-level relationship with a given identifier.</summary>
    ///  <param name="id">The <see cref="P:System.IO.Packaging.PackageRelationship.Id" />
    ///  of the relationship to return.</param>
    ///<returns>The package-level relationship with the specified <paramref name="id" />
    ///  .</returns>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="id" />
    ///  is <see langword="null" />
    ///  .</exception><exception cref="T:System.Xml.XmlException"><paramref name="id" />
    ///  is not a valid XML identifier.</exception><exception cref="T:System.InvalidOperationException">A relationship with the specified <paramref name="id" />
    ///  is not in the package.</exception><exception cref="T:System.ObjectDisposedException">The package is not open (<see cref="M:System.IO.Packaging.Package.Dispose(System.Boolean)" />
    ///  or <see cref="M:System.IO.Packaging.Package.Close" />
    ///  has been called).</exception><exception cref="T:System.IO.IOException">The package is write-only.</exception>
    function GetRelationship(id: string): DNPackageRelationship;
    ///<summary>Indicates whether a package-level relationship with a given ID is contained in the package.</summary>
    ///  <param name="id">The <see cref="P:System.IO.Packaging.PackageRelationship.Id" />
    ///  of the relationship to check for.</param>
    ///<returns><see langword="true" />
    ///  if a package-level relationship with the specified <paramref name="id" />
    ///  is in the package; otherwise, <see langword="false" />
    ///  .</returns>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="id" />
    ///  is <see langword="null" />
    ///  .</exception><exception cref="T:System.Xml.XmlException"><paramref name="id" />
    ///  is not a valid XML identifier.</exception><exception cref="T:System.ObjectDisposedException">The package is not open (<see cref="M:System.IO.Packaging.Package.Dispose(System.Boolean)" />
    ///  or <see cref="M:System.IO.Packaging.Package.Close" />
    ///  has been called).</exception><exception cref="T:System.IO.IOException">The package is write-only.</exception>
    function RelationshipExists(id: string): Boolean;
    ///<summary>Saves the contents of all parts and relationships that are contained in the package.</summary>
    ///<exception cref="T:System.ObjectDisposedException">The package is not open (<see cref="M:System.IO.Packaging.Package.Dispose(System.Boolean)" />
    ///  or <see cref="M:System.IO.Packaging.Package.Close" />
    ///  has been called).</exception><exception cref="T:System.IO.IOException">The package is read-only and cannot be modified.</exception>
    procedure Flush;
    ///<summary>Deletes a package-level relationship.</summary>
    ///  <param name="id">The <see cref="P:System.IO.Packaging.PackageRelationship.Id" />
    ///  of the <see cref="T:System.IO.Packaging.PackageRelationship" />
    ///  to delete.</param>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="id" />
    ///  is <see langword="null" />
    ///  .</exception><exception cref="T:System.ObjectDisposedException">The package is not open (<see cref="M:System.IO.Packaging.Package.Dispose(System.Boolean)" />
    ///  or <see cref="M:System.IO.Packaging.Package.Close" />
    ///  has been called).</exception><exception cref="T:System.IO.IOException">The package is read-only.</exception><exception cref="T:System.Xml.XmlException"><paramref name="id" />
    ///  is not a valid XML identifier.</exception>
    procedure DeleteRelationship(id: string);
    ///<summary>Deletes a part with a given URI from the package.</summary>
    ///  <param name="partUri">The URI of the part to delete.</param>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="partUri" />
    ///  is <see langword="null" />
    ///  .</exception><exception cref="T:System.ArgumentException"><paramref name="partUri" />
    ///  is not a valid <see cref="T:System.IO.Packaging.PackagePart" />
    ///  URI.</exception><exception cref="T:System.ObjectDisposedException">The package is not open (<see cref="M:System.IO.Packaging.Package.Dispose(System.Boolean)" />
    ///  or <see cref="M:System.IO.Packaging.Package.Close" />
    ///  has been called).</exception><exception cref="T:System.IO.IOException">The package is read-only.</exception>
    procedure DeletePart(partUri: DDN.System.DNUri);
    ///<summary>Returns a collection of all the parts in the package.</summary>
    ///<returns>A collection of all the <see cref="T:System.IO.Packaging.PackagePart" />
    ///  elements that are contained in the package.</returns>
    ///<exception cref="T:System.ObjectDisposedException">The package is not open (<see cref="M:System.IO.Packaging.Package.Dispose(System.Boolean)" />
    ///  or <see cref="M:System.IO.Packaging.Package.Close" />
    ///  has been called).</exception><exception cref="T:System.IO.IOException">The package is write-only.</exception>
    function GetParts: DNPackagePartCollection;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>Gets the file access setting for the package.</summary>
    ///<returns>One of the <see cref="T:System.IO.FileAccess" />
    ///  values: <see cref="F:System.IO.FileAccess.Read" />
    ///  , <see cref="F:System.IO.FileAccess.Write" />
    ///  , or <see cref="F:System.IO.FileAccess.ReadWrite" />
    ///  .</returns>
    ///<exception cref="T:System.ObjectDisposedException">The package is not open (<see cref="M:System.IO.Packaging.Package.Dispose(System.Boolean)" />
    ///  or <see cref="M:System.IO.Packaging.Package.Close" />
    ///  has been called).</exception>
    property FileOpenAccess: DDN.mscorlib.DNFileAccess read get_FileOpenAccess;
    ///<summary>Gets the core properties of the package.</summary>
    ///<returns>The core properties of the package.</returns>
    ///<exception cref="T:System.ObjectDisposedException">The package is not open (<see cref="M:System.IO.Packaging.Package.Dispose(System.Boolean)" />
    ///  or <see cref="M:System.IO.Packaging.Package.Close" />
    ///  has been called).</exception>
    property PackageProperties: DNPackageProperties read get_PackageProperties;
  end;

  TDNPackage = class(TDNGenericImport<DNPackageClass, DNPackage>) end;

  //-------------namespace: System.IO.Packaging----------------
  DNZipPackageClass = interface(DNPackageClass)
  ['{BC67A887-FACD-52CC-9AD6-42C07D81C783}']
  end;

  ///<summary>Implements a derived subclass of the abstract <see cref="T:System.IO.Packaging.Package" />
  ///  base classâ€”the <see cref="T:System.IO.Packaging.ZipPackage" />
  ///  class uses a ZIP archive as the container store. This class cannot be inherited.</summary>
  [DNTypeName('System.IO.Packaging.ZipPackage')]
  DNZipPackage = interface(DNPackage)
  ['{5C761E0C-7A71-3A67-8B00-F2E55832900E}']
  { getters & setters } 

    function get_FileOpenAccess: DDN.mscorlib.DNFileAccess;
    function get_PackageProperties: DNPackageProperties;

  { methods } 

    ///<summary>Creates a new uncompressed part with a given URI and content type.</summary>
    ///  <param name="partUri">The uniform resource identifier (URI)Â of the new part.</param>
    ///  <param name="contentType">The content type of the data stream.</param>
    ///<returns>The new created part.</returns>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="partUri" />
    ///  or <paramref name="contentType" />
    ///  is <see langword="null" />
    ///  .</exception><exception cref="T:System.ArgumentException"><paramref name="partUri" />
    ///  is not a valid <see cref="T:System.IO.Packaging.PackagePart" />
    ///  URI.</exception><exception cref="T:System.InvalidOperationException">A part with the specified <paramref name="partUri" />
    ///  is already present in the package.</exception><exception cref="T:System.ObjectDisposedException">The package is not open (<see cref="M:System.IO.Packaging.Package.Dispose(System.Boolean)" />
    ///  or <see cref="M:System.IO.Packaging.Package.Close" />
    ///  has been called).</exception><exception cref="T:System.IO.IOException">The package is read-only (a new part cannot be added).</exception>
    function CreatePart(partUri: DDN.System.DNUri; contentType: string): DNPackagePart; overload;
    ///<summary>Creates a new part with a given URI, content type, and compression option.</summary>
    ///  <param name="partUri">The URIÂ of the new part.</param>
    ///  <param name="contentType">The content type of the data stream.</param>
    ///  <param name="compressionOption">The compression option for the data stream, <see cref="F:System.IO.Packaging.CompressionOption.NotCompressed" />
    ///  or <see cref="F:System.IO.Packaging.CompressionOption.Normal" />
    ///  compression.</param>
    ///<returns>The new created part.</returns>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="partUri" />
    ///  or <paramref name="contentType" />
    ///  is <see langword="null" />
    ///  .</exception><exception cref="T:System.ArgumentException"><paramref name="partUri" />
    ///  is not a valid <see cref="T:System.IO.Packaging.PackagePart" />
    ///  uniform resource identifier (URI).</exception><exception cref="T:System.InvalidOperationException">A part with the specified <paramref name="partUri" />
    ///  is already present in the package.</exception><exception cref="T:System.ArgumentOutOfRangeException">The <paramref name="compressionOption" />
    ///  value is not valid.</exception><exception cref="T:System.ObjectDisposedException">The package is not open (<see cref="M:System.IO.Packaging.Package.Dispose(System.Boolean)" />
    ///  or <see cref="M:System.IO.Packaging.Package.Close" />
    ///  has been called).</exception><exception cref="T:System.IO.IOException">The package is read-only (a new part cannot be added).</exception>
    function CreatePart(partUri: DDN.System.DNUri; contentType: string; compressionOption: DNCompressionOption): DNPackagePart; overload;
    ///<summary>Returns the part with a given URI.</summary>
    ///  <param name="partUri">The uniform resource identifier (URI) of the part to return.</param>
    ///<returns>The part with the specified <paramref name="partUri" />
    ///  .</returns>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="partUri" />
    ///  is <see langword="null" />
    ///  .</exception><exception cref="T:System.ArgumentException"><paramref name="partUri" />
    ///  is not a valid <see cref="T:System.IO.Packaging.PackagePart" />
    ///  uniform resource identifier (URI).</exception><exception cref="T:System.InvalidOperationException">A part with the specified <paramref name="partUri" />
    ///  is not in the package.</exception><exception cref="T:System.ObjectDisposedException">The package is not open (<see cref="M:System.IO.Packaging.Package.Dispose(System.Boolean)" />
    ///  or <see cref="M:System.IO.Packaging.Package.Close" />
    ///  has been called).</exception><exception cref="T:System.IO.IOException">The package is write-only.</exception>
    function GetPart(partUri: DDN.System.DNUri): DNPackagePart;
    ///<summary>Indicates whether a part with a given URI is in the package.</summary>
    ///  <param name="partUri">The <see cref="T:System.Uri" />
    ///  of the part to check for.</param>
    ///<returns><see langword="true" />
    ///  if a part with the specified <paramref name="partUri" />
    ///  is in the package; otherwise, <see langword="false" />
    ///  .</returns>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="partUri" />
    ///  is <see langword="null" />
    ///  .</exception><exception cref="T:System.ArgumentException"><paramref name="partUri" />
    ///  is not a valid <see cref="T:System.IO.Packaging.PackagePart" />
    ///  uniform resource identifier (URI).</exception><exception cref="T:System.ObjectDisposedException">The package is not open (<see cref="M:System.IO.Packaging.Package.Dispose(System.Boolean)" />
    ///  or <see cref="M:System.IO.Packaging.Package.Close" />
    ///  has been called).</exception><exception cref="T:System.IO.IOException">The package is write-only (information cannot be read).</exception>
    function PartExists(partUri: DDN.System.DNUri): Boolean;
    ///<summary>Saves and closes the package plus all underlying part streams.</summary>
    procedure Close;
    ///<summary>Creates a package-level relationship to a part with a given URI, target mode, and relationship type. </summary>
    ///  <param name="targetUri">The uniform resource identifier (URI) of the target part.</param>
    ///  <param name="targetMode">Indicates if the target part is <see cref="F:System.IO.Packaging.TargetMode.Internal" />
    ///  or <see cref="F:System.IO.Packaging.TargetMode.External" />
    ///  to the package.</param>
    ///  <param name="relationshipType">A URI that uniquely defines the role of the relationship.</param>
    ///<returns>The package-level relationship to the specified part.</returns>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="targetUri" />
    ///  or <paramref name="relationshipType" />
    ///  is <see langword="null" />
    ///  .</exception><exception cref="T:System.ArgumentException">The <paramref name="targetUri" />
    ///  part is a <see cref="T:System.IO.Packaging.PackageRelationship" />
    ///  , or <paramref name="targetMode" />
    ///  is <see cref="F:System.IO.Packaging.TargetMode.Internal" />
    ///  and <paramref name="targetUri" />
    ///  is an absolute URI.</exception><exception cref="T:System.ArgumentOutOfRangeException">The value for <paramref name="targetMode" />
    ///  is not valid.</exception><exception cref="T:System.ObjectDisposedException">The package is not open (<see cref="M:System.IO.Packaging.Package.Dispose(System.Boolean)" />
    ///  or <see cref="M:System.IO.Packaging.Package.Close" />
    ///  has been called).</exception><exception cref="T:System.IO.IOException">The package is read-only.</exception>
    function CreateRelationship(targetUri: DDN.System.DNUri; targetMode: DNTargetMode; relationshipType: string): DNPackageRelationship; overload;
    ///<summary>Creates a package-level relationship to a part with a given URI, target mode, relationship type, and identifier (ID).</summary>
    ///  <param name="targetUri">The uniform resource identifier (URI) of the target part.</param>
    ///  <param name="targetMode">Indicates if the target part is <see cref="F:System.IO.Packaging.TargetMode.Internal" />
    ///  or <see cref="F:System.IO.Packaging.TargetMode.External" />
    ///  to the package.</param>
    ///  <param name="relationshipType">A URI that uniquely defines the role of the relationship.</param>
    ///  <param name="id">A unique XML identifier.</param>
    ///<returns>The package-level relationship to the specified part.</returns>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="targetUri" />
    ///  or <paramref name="relationshipType" />
    ///  is <see langword="null" />
    ///  .</exception><exception cref="T:System.ArgumentException">The <paramref name="targetUri" />
    ///  part is a <see cref="T:System.IO.Packaging.PackageRelationship" />
    ///  , or <paramref name="targetMode" />
    ///  is <see cref="F:System.IO.Packaging.TargetMode.Internal" />
    ///  and <paramref name="targetUri" />
    ///  is an absolute URI.</exception><exception cref="T:System.ArgumentOutOfRangeException">The value for <paramref name="targetMode" />
    ///  is not valid.</exception><exception cref="T:System.ObjectDisposedException">The package is not open (<see cref="M:System.IO.Packaging.Package.Dispose(System.Boolean)" />
    ///  or <see cref="M:System.IO.Packaging.Package.Close" />
    ///  has been called).</exception><exception cref="T:System.IO.IOException">The package is read-only.</exception><exception cref="T:System.Xml.XmlException"><paramref name="id" />
    ///  is not a valid XML identifier; or a part with the specified <paramref name="id" />
    ///  already occurs in the package.</exception>
    function CreateRelationship(targetUri: DDN.System.DNUri; targetMode: DNTargetMode; relationshipType: string; id: string): DNPackageRelationship; overload;
    ///<summary>Returns a collection of all the package-level relationships.</summary>
    ///<returns>A collection of all the package-level relationships that are contained in the package.</returns>
    ///<exception cref="T:System.ObjectDisposedException">The package is not open (<see cref="M:System.IO.Packaging.Package.Dispose(System.Boolean)" />
    ///  or <see cref="M:System.IO.Packaging.Package.Close" />
    ///  has been called).</exception><exception cref="T:System.IO.IOException">The package is write-only.</exception>
    function GetRelationships: DNPackageRelationshipCollection;
    ///<summary>Returns a collection of all the package-level relationships that match a given <see cref="P:System.IO.Packaging.PackageRelationship.RelationshipType" />
    ///  . </summary>
    ///  <param name="relationshipType">The <see cref="P:System.IO.Packaging.PackageRelationship.RelationshipType" />
    ///  to match and return in the collection.</param>
    ///<returns>A collection of package-level relationships that match the specified <paramref name="relationshipType" />
    ///  .</returns>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="relationshipType" />
    ///  is <see langword="null" />
    ///  .</exception><exception cref="T:System.ArgumentException"><paramref name="relationshipType" />
    ///  is an empty string.</exception><exception cref="T:System.ObjectDisposedException">The package is not open (<see cref="M:System.IO.Packaging.Package.Dispose(System.Boolean)" />
    ///  or <see cref="M:System.IO.Packaging.Package.Close" />
    ///  has been called).</exception><exception cref="T:System.IO.IOException">The package is write-only.</exception>
    function GetRelationshipsByType(relationshipType: string): DNPackageRelationshipCollection;
    ///<summary>Returns the package-level relationship with a given identifier.</summary>
    ///  <param name="id">The <see cref="P:System.IO.Packaging.PackageRelationship.Id" />
    ///  of the relationship to return.</param>
    ///<returns>The package-level relationship with the specified <paramref name="id" />
    ///  .</returns>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="id" />
    ///  is <see langword="null" />
    ///  .</exception><exception cref="T:System.Xml.XmlException"><paramref name="id" />
    ///  is not a valid XML identifier.</exception><exception cref="T:System.InvalidOperationException">A relationship with the specified <paramref name="id" />
    ///  is not in the package.</exception><exception cref="T:System.ObjectDisposedException">The package is not open (<see cref="M:System.IO.Packaging.Package.Dispose(System.Boolean)" />
    ///  or <see cref="M:System.IO.Packaging.Package.Close" />
    ///  has been called).</exception><exception cref="T:System.IO.IOException">The package is write-only.</exception>
    function GetRelationship(id: string): DNPackageRelationship;
    ///<summary>Indicates whether a package-level relationship with a given ID is contained in the package.</summary>
    ///  <param name="id">The <see cref="P:System.IO.Packaging.PackageRelationship.Id" />
    ///  of the relationship to check for.</param>
    ///<returns><see langword="true" />
    ///  if a package-level relationship with the specified <paramref name="id" />
    ///  is in the package; otherwise, <see langword="false" />
    ///  .</returns>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="id" />
    ///  is <see langword="null" />
    ///  .</exception><exception cref="T:System.Xml.XmlException"><paramref name="id" />
    ///  is not a valid XML identifier.</exception><exception cref="T:System.ObjectDisposedException">The package is not open (<see cref="M:System.IO.Packaging.Package.Dispose(System.Boolean)" />
    ///  or <see cref="M:System.IO.Packaging.Package.Close" />
    ///  has been called).</exception><exception cref="T:System.IO.IOException">The package is write-only.</exception>
    function RelationshipExists(id: string): Boolean;
    ///<summary>Saves the contents of all parts and relationships that are contained in the package.</summary>
    ///<exception cref="T:System.ObjectDisposedException">The package is not open (<see cref="M:System.IO.Packaging.Package.Dispose(System.Boolean)" />
    ///  or <see cref="M:System.IO.Packaging.Package.Close" />
    ///  has been called).</exception><exception cref="T:System.IO.IOException">The package is read-only and cannot be modified.</exception>
    procedure Flush;
    ///<summary>Deletes a package-level relationship.</summary>
    ///  <param name="id">The <see cref="P:System.IO.Packaging.PackageRelationship.Id" />
    ///  of the <see cref="T:System.IO.Packaging.PackageRelationship" />
    ///  to delete.</param>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="id" />
    ///  is <see langword="null" />
    ///  .</exception><exception cref="T:System.ObjectDisposedException">The package is not open (<see cref="M:System.IO.Packaging.Package.Dispose(System.Boolean)" />
    ///  or <see cref="M:System.IO.Packaging.Package.Close" />
    ///  has been called).</exception><exception cref="T:System.IO.IOException">The package is read-only.</exception><exception cref="T:System.Xml.XmlException"><paramref name="id" />
    ///  is not a valid XML identifier.</exception>
    procedure DeleteRelationship(id: string);
    ///<summary>Deletes a part with a given URI from the package.</summary>
    ///  <param name="partUri">The URI of the part to delete.</param>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="partUri" />
    ///  is <see langword="null" />
    ///  .</exception><exception cref="T:System.ArgumentException"><paramref name="partUri" />
    ///  is not a valid <see cref="T:System.IO.Packaging.PackagePart" />
    ///  URI.</exception><exception cref="T:System.ObjectDisposedException">The package is not open (<see cref="M:System.IO.Packaging.Package.Dispose(System.Boolean)" />
    ///  or <see cref="M:System.IO.Packaging.Package.Close" />
    ///  has been called).</exception><exception cref="T:System.IO.IOException">The package is read-only.</exception>
    procedure DeletePart(partUri: DDN.System.DNUri);
    ///<summary>Returns a collection of all the parts in the package.</summary>
    ///<returns>A collection of all the <see cref="T:System.IO.Packaging.PackagePart" />
    ///  elements that are contained in the package.</returns>
    ///<exception cref="T:System.ObjectDisposedException">The package is not open (<see cref="M:System.IO.Packaging.Package.Dispose(System.Boolean)" />
    ///  or <see cref="M:System.IO.Packaging.Package.Close" />
    ///  has been called).</exception><exception cref="T:System.IO.IOException">The package is write-only.</exception>
    function GetParts: DNPackagePartCollection;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>Gets the file access setting for the package.</summary>
    ///<returns>One of the <see cref="T:System.IO.FileAccess" />
    ///  values: <see cref="F:System.IO.FileAccess.Read" />
    ///  , <see cref="F:System.IO.FileAccess.Write" />
    ///  , or <see cref="F:System.IO.FileAccess.ReadWrite" />
    ///  .</returns>
    ///<exception cref="T:System.ObjectDisposedException">The package is not open (<see cref="M:System.IO.Packaging.Package.Dispose(System.Boolean)" />
    ///  or <see cref="M:System.IO.Packaging.Package.Close" />
    ///  has been called).</exception>
    property FileOpenAccess: DDN.mscorlib.DNFileAccess read get_FileOpenAccess;
    ///<summary>Gets the core properties of the package.</summary>
    ///<returns>The core properties of the package.</returns>
    ///<exception cref="T:System.ObjectDisposedException">The package is not open (<see cref="M:System.IO.Packaging.Package.Dispose(System.Boolean)" />
    ///  or <see cref="M:System.IO.Packaging.Package.Close" />
    ///  has been called).</exception>
    property PackageProperties: DNPackageProperties read get_PackageProperties;
  end;

  TDNZipPackage = class(TDNGenericImport<DNZipPackageClass, DNZipPackage>) end;

  //-------------namespace: System.IO.Packaging----------------
  DNPackageDigitalSignatureClass = interface(DDN.mscorlib.DNObjectClass)
  ['{A29D9758-1FD7-5DCF-9CAC-419F7617D4E4}']
  end;

  ///<summary>Represents a digital signature that is applied to a set of package parts and relationships.</summary>
  [DNTypeName('System.IO.Packaging.PackageDigitalSignature')]
  DNPackageDigitalSignature = interface(DDN.mscorlib.DNObject)
  ['{94E97C04-1E6C-380C-AD59-EDC878F387CB}']
  { getters & setters } 

    function get_SignedParts: DDN.mscorlib.DNReadOnlyCollection<DDN.System.DNUri>;
    function get_SignedRelationshipSelectors: DDN.mscorlib.DNReadOnlyCollection<DNPackageRelationshipSelector>;
    function get_SignaturePart: DNPackagePart;
    function get_Signer: DDN.mscorlib.DNX509Certificate;
    function get_SigningTime: DDN.mscorlib.DNDateTime;
    function get_TimeFormat: string;
    function get_SignatureValue: TArray<Byte>;
    function get_SignatureType: string;
    function get_Signature: DDN.System.Security.DNSignature;
    procedure set_Signature(value: DDN.System.Security.DNSignature);
    function get_CertificateEmbeddingOption: DNCertificateEmbeddingOption;

  { methods } 

    ///<summary>Returns an ordered list of the <see cref="T:System.Security.Cryptography.Xml.Transform" />
    ///  operations applied to a given part. </summary>
    ///  <param name="partName">The <see cref="T:System.Uri" />
    ///  of the <see cref="T:System.IO.Packaging.PackagePart" />
    ///  to return the transform list for.</param>
    ///<returns>An ordered list of URI strings, such as <see cref="F:System.Security.Cryptography.Xml.SignedXml.XmlDsigCanonicalizationUrl" />
    ///  or <see cref="F:System.Security.Cryptography.Xml.SignedXml.XmlDsigC14NTransformUrl" />
    ///  , that represents the canonical XML transformations applied to the part with the given <paramref name="partName" />
    ///  URI.</returns>
    ///<exception cref="T:System.InvalidOperationException">The digital <see cref="P:System.IO.Packaging.PackageDigitalSignature.Signature" />
    ///  has been deleted.</exception>
    function GetPartTransformList(partName: DDN.System.DNUri): DDN.mscorlib.DNList<string>;
    ///<summary>Verifies the digital signature against an X.509 certificate. </summary>
    ///<returns><see cref="F:System.IO.Packaging.VerifyResult.Success" />
    ///  if the verification succeeded; otherwise, one of the <see cref="T:System.IO.Packaging.VerifyResult" />
    ///  values that identifies a problem. </returns>
    ///<exception cref="T:System.InvalidOperationException">The digital <see cref="P:System.IO.Packaging.PackageDigitalSignature.Signature" />
    ///  has been deleted.</exception>
    function Verify: DNVerifyResult; overload;
    ///<summary>Verifies the digital signature against a given X.509 certificate. </summary>
    ///  <param name="signingCertificate">The signer's X.509 certificate to verify the digital signature against.</param>
    ///<returns><see cref="F:System.IO.Packaging.VerifyResult.Success" />
    ///  if the verification succeeded; otherwise, one of the <see cref="T:System.IO.Packaging.VerifyResult" />
    ///  values that identifies a problem.</returns>
    ///<exception cref="T:System.InvalidOperationException">The digital <see cref="P:System.IO.Packaging.PackageDigitalSignature.Signature" />
    ///  has been deleted.</exception>
    function Verify(signingCertificate: DDN.mscorlib.DNX509Certificate): DNVerifyResult; overload;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>Gets a collection of all the <see cref="T:System.IO.Packaging.PackagePart" />
    ///  objects signed with the signature. </summary>
    ///<returns>A collection that contains all the package parts signed with the signature.</returns>
    ///<exception cref="T:System.InvalidOperationException">The digital <see cref="P:System.IO.Packaging.PackageDigitalSignature.Signature" />
    ///  has been deleted.</exception>
    property SignedParts: DDN.mscorlib.DNReadOnlyCollection<DDN.System.DNUri> read get_SignedParts;
    ///<summary>Gets the list of the <see cref="T:System.IO.Packaging.PackageRelationship" />
    ///  parts that have been signed with the signature.</summary>
    ///<returns>The list of the <see cref="T:System.IO.Packaging.PackageRelationship" />
    ///  parts that have been signed with the signature.</returns>
    ///<exception cref="T:System.InvalidOperationException">The digital <see cref="P:System.IO.Packaging.PackageDigitalSignature.Signature" />
    ///  has been deleted.</exception>
    property SignedRelationshipSelectors: DDN.mscorlib.DNReadOnlyCollection<DNPackageRelationshipSelector> read get_SignedRelationshipSelectors;
    ///<summary>Gets the <see cref="T:System.IO.Packaging.PackagePart" />
    ///  that contains the signature. </summary>
    ///<returns>The package part that contains the signature.</returns>
    ///<exception cref="T:System.InvalidOperationException">The digital <see cref="P:System.IO.Packaging.PackageDigitalSignature.Signature" />
    ///  has been deleted.</exception>
    property SignaturePart: DNPackagePart read get_SignaturePart;
    ///<summary>Gets the X.509 certificate of the signer. </summary>
    ///<returns>The digital certificate of the signer, or <see langword="null" />
    ///  if the certificate is not stored in the <see cref="T:System.IO.Packaging.Package" />
    ///  .</returns>
    ///<exception cref="T:System.InvalidOperationException">The digital <see cref="P:System.IO.Packaging.PackageDigitalSignature.Signature" />
    ///  has been deleted.</exception>
    property Signer: DDN.mscorlib.DNX509Certificate read get_Signer;
    ///<summary>Gets the date and time that the signature was created. </summary>
    ///<returns>The date and time that the signature was created.</returns>
    ///<exception cref="T:System.InvalidOperationException">The digital <see cref="P:System.IO.Packaging.PackageDigitalSignature.Signature" />
    ///  has been deleted.</exception>
    property SigningTime: DDN.mscorlib.DNDateTime read get_SigningTime;
    ///<summary>Gets the format of the date and time returned by the <see cref="P:System.IO.Packaging.PackageDigitalSignature.SigningTime" />
    ///  property. </summary>
    ///<returns>The format of the date and time returned by the <see cref="P:System.IO.Packaging.PackageDigitalSignature.SigningTime" />
    ///  property.</returns>
    ///<exception cref="T:System.InvalidOperationException">The digital <see cref="P:System.IO.Packaging.PackageDigitalSignature.Signature" />
    ///  has been deleted.</exception>
    property TimeFormat: string read get_TimeFormat;
    ///<summary>Gets the encrypted hash value of the <see cref="P:System.IO.Packaging.PackageDigitalSignature.Signature" />
    ///  . </summary>
    ///<returns>A byte array that contains the encrypted hash value of the <see cref="P:System.IO.Packaging.PackageDigitalSignature.Signature" />
    ///  .</returns>
    ///<exception cref="T:System.InvalidOperationException">The digital <see cref="P:System.IO.Packaging.PackageDigitalSignature.Signature" />
    ///  has been deleted.</exception>
    property SignatureValue: TArray<Byte> read get_SignatureValue;
    ///<summary>Gets the URI string that identifies the signature type.Â </summary>
    ///<returns>A URI string that identifies the signature type. The default is <see cref="F:System.Security.Cryptography.Xml.SignedXml.XmlDsigC14NTransformUrl" />
    ///  .</returns>
    ///<exception cref="T:System.InvalidOperationException">The digital <see cref="P:System.IO.Packaging.PackageDigitalSignature.Signature" />
    ///  has been deleted.</exception>
    property SignatureType: string read get_SignatureType;
    ///<summary>Gets or sets the XML digital signature.</summary>
    ///<returns>The XML digital signature.</returns>
    ///<exception cref="T:System.InvalidOperationException">The digital <see cref="P:System.IO.Packaging.PackageDigitalSignature.Signature" />
    ///  has been deleted.</exception>
    property Signature: DDN.System.Security.DNSignature read get_Signature write set_Signature;
    ///<summary>Gets the X.509 certificate embedding option. </summary>
    ///<returns>One of the <see cref="T:System.IO.Packaging.CertificateEmbeddingOption" />
    ///  values that specifies the option for the digital signature.</returns>
    ///<exception cref="T:System.InvalidOperationException">The digital <see cref="P:System.IO.Packaging.PackageDigitalSignature.Signature" />
    ///  has been deleted.</exception>
    property CertificateEmbeddingOption: DNCertificateEmbeddingOption read get_CertificateEmbeddingOption;
  end;

  TDNPackageDigitalSignature = class(TDNGenericImport<DNPackageDigitalSignatureClass, DNPackageDigitalSignature>) end;

  //-------------namespace: System.IO.Packaging----------------
  DNPackageDigitalSignatureManagerClass = interface(DDN.mscorlib.DNObjectClass)
  ['{F3A95624-0B0B-5662-AAA4-8B5EB6838E3E}']
  { static getter & setter } 

    {class} function get_SignatureOriginRelationshipType: string;
    {class} function get_DefaultHashAlgorithm: string;

  { constructors } 

    ///<summary>Initializes a new instance of the <see cref="T:System.IO.Packaging.PackageDigitalSignatureManager" />
    ///  class for use with a specified <see cref="T:System.IO.Packaging.Package" />
    ///  . </summary>
    ///  <param name="package">The package associated with this signature manager.</param>
    {class} function init(&package: DNPackage): DNPackageDigitalSignatureManager;

  { static methods } 

    ///<summary>Verifies a given X.509 certificate. </summary>
    ///  <param name="certificate">The X.509 certificate to verify.</param>
    ///<returns><see cref="F:System.Security.Cryptography.X509Certificates.X509ChainStatusFlags.NoError" />
    ///  (value 0) if the certificate verified successfully; otherwise, a bitwise enumeration of error flags.</returns>
    {class} function VerifyCertificate(certificate: DDN.mscorlib.DNX509Certificate): DDN.System.DNX509ChainStatusFlags;

  { static propertys } 

    ///<summary>Gets the type of default signature origin relationship.</summary>
    ///<returns>The type of default signature origin relationship.</returns>
    {class} property SignatureOriginRelationshipType: string read get_SignatureOriginRelationshipType;
    ///<summary>Gets a URIÂ string that identifies the default hash algorithm used to create and verify signatures. </summary>
    ///<returns>A URI string that identifies the default hash algorithm used to create and verify signatures.</returns>
    {class} property DefaultHashAlgorithm: string read get_DefaultHashAlgorithm;
  end;

  ///<summary>Provides a utility class for the creation and verification of digital signatures in a <see cref="T:System.IO.Packaging.Package" />
  ///  .    </summary>
  [DNTypeName('System.IO.Packaging.PackageDigitalSignatureManager')]
  DNPackageDigitalSignatureManager = interface(DDN.mscorlib.DNObject)
  ['{E0499EAA-EAD8-33C1-889B-3DA058ADD975}']
  { getters & setters } 

    function get_IsSigned: Boolean;
    function get_Signatures: DDN.mscorlib.DNReadOnlyCollection<DNPackageDigitalSignature>;
    function get_TransformMapping: DDN.mscorlib.DNDictionary<string, string>;
    function get_ParentWindow: IntPtr;
    procedure set_ParentWindow(value: IntPtr);
    function get_HashAlgorithm: string;
    procedure set_HashAlgorithm(value: string);
    function get_CertificateOption: DNCertificateEmbeddingOption;
    procedure set_CertificateOption(value: DNCertificateEmbeddingOption);
    function get_TimeFormat: string;
    procedure set_TimeFormat(value: string);
    function get_SignatureOrigin: DDN.System.DNUri;

  { events } 

    procedure add_InvalidSignatureEvent(value: DNInvalidSignatureEventHandler);
    procedure remove_InvalidSignatureEvent(value: DNInvalidSignatureEventHandler);

  { methods } 

    function Sign(parts: DDN.mscorlib.DNIEnumerable<DDN.System.DNUri>): DNPackageDigitalSignature; overload;
    function Sign(parts: DDN.mscorlib.DNIEnumerable<DDN.System.DNUri>; certificate: DDN.mscorlib.DNX509Certificate): DNPackageDigitalSignature; overload;
    function Sign(parts: DDN.mscorlib.DNIEnumerable<DDN.System.DNUri>; certificate: DDN.mscorlib.DNX509Certificate; relationshipSelectors: DDN.mscorlib.DNIEnumerable<DNPackageRelationshipSelector>): DNPackageDigitalSignature; overload;
    function Sign(parts: DDN.mscorlib.DNIEnumerable<DDN.System.DNUri>; certificate: DDN.mscorlib.DNX509Certificate; relationshipSelectors: DDN.mscorlib.DNIEnumerable<DNPackageRelationshipSelector>; signatureId: string): DNPackageDigitalSignature; overload;
    ///<summary>Countersigns all the signatures in the package with a user-selected X.509 certificate.</summary>
    ///<returns>The signature that was added as a countersign; or <see langword="null" />
    ///  if no certificate could be located or the user canceled the certificate selection dialog.</returns>
    function Countersign: DNPackageDigitalSignature; overload;
    ///<summary>Verifies the signatures on all signed parts within the package. </summary>
    ///  <param name="exitOnFailure"><see langword="true" />
    ///  to exit on first failure; otherwise, <see langword="false" />
    ///  to continue and check all signatures.</param>
    ///<returns><see cref="F:System.IO.Packaging.VerifyResult.Success" />
    ///  (value 0) if all signatures are verified successfully; otherwise, an enumeration that identifies the error.</returns>
    function VerifySignatures(exitOnFailure: Boolean): DNVerifyResult;
    ///<summary>Removes the digital signature with a given signature uniform resource identifier (URI).Â </summary>
    ///  <param name="signatureUri">The URI of the <see cref="T:System.IO.Packaging.PackageDigitalSignature" />
    ///  to remove.</param>
    procedure RemoveSignature(signatureUri: DDN.System.DNUri);
    ///<summary>Removes all digital signatures from the package. </summary>
    procedure RemoveAllSignatures;
    ///<summary>Returns the digital signature for a given signature uniform resource identifier (URI).Â </summary>
    ///  <param name="signatureUri">The URI of the digital signature to return.</param>
    ///<returns>The digital signature for the specified <paramref name="signatureUri" />
    ///  , or <see langword="null" />
    ///  if a signature for the given <paramref name="signatureUri" />
    ///  cannot be found.</returns>
    function GetSignature(signatureUri: DDN.System.DNUri): DNPackageDigitalSignature;
    function Sign(parts: DDN.mscorlib.DNIEnumerable<DDN.System.DNUri>; certificate: DDN.mscorlib.DNX509Certificate; relationshipSelectors: DDN.mscorlib.DNIEnumerable<DNPackageRelationshipSelector>; signatureId: string; signatureObjects: DDN.mscorlib.DNIEnumerable<DDN.System.Security.DNDataObject>; objectReferences: DDN.mscorlib.DNIEnumerable<DDN.System.Security.DNReference>): DNPackageDigitalSignature; overload;
    ///<summary>Countersigns all the signatures in the package with a specified X.509 certificate. </summary>
    ///  <param name="certificate">The X.509 certificate to add as a countersign signature.</param>
    ///<returns>The signature that was added as a countersign.</returns>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="certificate" />
    ///  is <see langword="null" />
    ///</exception>
    function Countersign(certificate: DDN.mscorlib.DNX509Certificate): DNPackageDigitalSignature; overload;
    function Countersign(certificate: DDN.mscorlib.DNX509Certificate; signatures: DDN.mscorlib.DNIEnumerable<DDN.System.DNUri>): DNPackageDigitalSignature; overload;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>Gets a value that indicates whether the package contains any signatures. </summary>
    ///<returns><see langword="true" />
    ///  if the package contains signatures; otherwise, <see langword="false" />
    ///  .</returns>
    property IsSigned: Boolean read get_IsSigned;
    ///<summary>Gets a collection of all the signatures contained in the package. </summary>
    ///<returns>A collection of all the <see cref="T:System.IO.Packaging.PackageDigitalSignature" />
    ///  objects.</returns>
    property Signatures: DDN.mscorlib.DNReadOnlyCollection<DNPackageDigitalSignature> read get_Signatures;
    ///<summary>Gets a dictionary that contains each defined <see cref="P:System.IO.Packaging.PackagePart.ContentType" />
    ///  and its associated XMLÂ <see cref="T:System.Security.Cryptography.Xml.Transform" />
    ///  .<see cref="P:System.Security.Cryptography.Xml.Transform.Algorithm" />
    ///  identifier. </summary>
    ///<returns>A dictionary that contains each defined <see cref="P:System.IO.Packaging.PackagePart.ContentType" />
    ///  and its associated XMLÂ <see cref="T:System.Security.Cryptography.Xml.Transform" />
    ///  .<see cref="P:System.Security.Cryptography.Xml.Transform.Algorithm" />
    ///  identifier.</returns>
    property TransformMapping: DDN.mscorlib.DNDictionary<string, string> read get_TransformMapping;
    ///<summary>Gets or sets a handle to the parent window for displaying a certificate selection dialog box. </summary>
    ///<returns>The handle of the parent window to use to display the certificate selection dialog box.</returns>
    property ParentWindow: IntPtr read get_ParentWindow write set_ParentWindow;
    ///<summary>Gets or sets the URIÂ identifier for the <see cref="T:System.Security.Cryptography.HashAlgorithm" />
    ///  instanceÂ used to create and verify signatures. </summary>
    ///<returns>The <see cref="T:System.Security.Cryptography.Xml.SignedXml" />
    ///  URI identifier for the <see cref="T:System.Security.Cryptography.HashAlgorithm" />
    ///  instanceÂ used to create and verify signatures.</returns>
    ///<exception cref="T:System.ArgumentNullException">The string for the URI to set is <see langword="null" />
    ///  .</exception><exception cref="T:System.ArgumentException">The string for the URI to set is empty.</exception>
    property HashAlgorithm: string read get_HashAlgorithm write set_HashAlgorithm;
    ///<summary>Gets or sets the X.509 certificate embedding option used by the <see cref="M:System.IO.Packaging.PackageDigitalSignatureManager.Sign(System.Collections.Generic.IEnumerable{System.Uri})" />
    ///  method to digitally sign package parts. </summary>
    ///<returns>One of the <see cref="T:System.IO.Packaging.CertificateEmbeddingOption" />
    ///  values. </returns>
    property CertificateOption: DNCertificateEmbeddingOption read get_CertificateOption write set_CertificateOption;
    ///<summary>Gets or sets the date/time format used to create a signature <see cref="P:System.IO.Packaging.PackageDigitalSignature.SigningTime" />
    ///  . </summary>
    ///<returns>The date/time format used to create a signature <see cref="P:System.IO.Packaging.PackageDigitalSignature.SigningTime" />
    ///  .</returns>
    property TimeFormat: string read get_TimeFormat write set_TimeFormat;
    ///<summary>Gets the uniform resource identifier (URI) of the signature origin part.</summary>
    ///<returns>The URI of the signature origin part.</returns>
    property SignatureOrigin: DDN.System.DNUri read get_SignatureOrigin;
  end;

  TDNPackageDigitalSignatureManager = class(TDNGenericImport<DNPackageDigitalSignatureManagerClass, DNPackageDigitalSignatureManager>) end;

  //-------------namespace: System.IO.Packaging----------------
  DNPackagePartClass = interface(DDN.mscorlib.DNObjectClass)
  ['{75F366D9-0429-5B89-8D90-F5202A3C7A4D}']
  end;

  ///<summary>Provides a base class for parts stored in a <see cref="T:System.IO.Packaging.Package" />
  ///  .  This class is abstract.</summary>
  [DNTypeName('System.IO.Packaging.PackagePart')]
  DNPackagePart = interface(DDN.mscorlib.DNObject)
  ['{857D257F-E47D-3A3E-AD50-E039B205F092}']
  { getters & setters } 

    function get_Uri: DDN.System.DNUri;
    function get_ContentType: string;
    function get_Package: DNPackage;
    function get_CompressionOption: DNCompressionOption;

  { methods } 

    ///<summary>Returns the part content data stream.</summary>
    ///<returns>The content data stream for the part.</returns>
    ///<exception cref="T:System.InvalidOperationException">The part has been deleted.-or-The <see cref="P:System.IO.Packaging.PackagePart.Package" />
    ///  is not open (<see cref="M:System.IO.Packaging.Package.Dispose(System.Boolean)" />
    ///  or <see cref="M:System.IO.Packaging.Package.Close" />
    ///  has been called).</exception><exception cref="T:System.IO.IOException">The stream object returned by the <see cref="M:System.IO.Packaging.PackagePart.GetStreamCore(System.IO.FileMode,System.IO.FileAccess)" />
    ///  method of the derived subclass is <see langword="null" />
    ///  .</exception>
    function GetStream: DDN.mscorlib.DNStream; overload;
    ///<summary>Returns the content stream opened in a specified I/O <see cref="T:System.IO.FileMode" />
    ///  .</summary>
    ///  <param name="mode">The I/O mode in which to open the content stream.</param>
    ///<returns>The content stream of the part.</returns>
    ///<exception cref="T:System.InvalidOperationException">The part has been deleted.-or-The <see cref="P:System.IO.Packaging.PackagePart.Package" />
    ///  is not open (<see cref="M:System.IO.Packaging.Package.Dispose(System.Boolean)" />
    ///  or <see cref="M:System.IO.Packaging.Package.Close" />
    ///  has been called).</exception><exception cref="T:System.ArgumentOutOfRangeException">The <paramref name="mode" />
    ///  parameter is not a valid <see cref="T:System.IO.FileMode" />
    ///  enumeration value.</exception><exception cref="T:System.IO.IOException">The <paramref name="mode" />
    ///  parameter is not compatible with the package and part stream.-or-The stream object returned by the <see cref="M:System.IO.Packaging.PackagePart.GetStreamCore(System.IO.FileMode,System.IO.FileAccess)" />
    ///  method of the derived subclass is <see langword="null" />
    ///  .</exception>
    function GetStream(mode: DDN.mscorlib.DNFileMode): DDN.mscorlib.DNStream; overload;
    ///<summary>Creates a part-level relationship between this <see cref="T:System.IO.Packaging.PackagePart" />
    ///  to a specified target <see cref="T:System.IO.Packaging.PackagePart" />
    ///  or external resource.</summary>
    ///  <param name="targetUri">The URIÂ of the target part.</param>
    ///  <param name="targetMode">One of the enumeration values. For example, <see cref="F:System.IO.Packaging.TargetMode.Internal" />
    ///  if the target part is inside the <see cref="T:System.IO.Packaging.Package" />
    ///  ; or <see cref="F:System.IO.Packaging.TargetMode.External" />
    ///  if the target is a resource outside the <see cref="T:System.IO.Packaging.Package" />
    ///  .</param>
    ///  <param name="relationshipType">The role of the relationship.</param>
    ///<returns>The part-level relationship between this <see cref="T:System.IO.Packaging.PackagePart" />
    ///  to the target <see cref="T:System.IO.Packaging.PackagePart" />
    ///  or external resource.</returns>
    ///<exception cref="T:System.InvalidOperationException">The part has been deleted.-or-The <see cref="P:System.IO.Packaging.PackagePart.Package" />
    ///  is not open (<see cref="M:System.IO.Packaging.Package.Dispose(System.Boolean)" />
    ///  or <see cref="M:System.IO.Packaging.Package.Close" />
    ///  has been called).</exception><exception cref="T:System.ArgumentNullException"><paramref name="targetUri" />
    ///  or <paramref name="relationshipType" />
    ///  is <see langword="null" />
    ///  .</exception><exception cref="T:System.ArgumentOutOfRangeException">The <paramref name="targetMode" />
    ///  parameter is not a valid <see cref="T:System.IO.Packaging.TargetMode" />
    ///  enumeration value.</exception><exception cref="T:System.ArgumentException">The part identified by the <paramref name="targetUri" />
    ///  is a relationship (the target of a relationship cannot be another relationship).-or-
    ///  <paramref name="targetMode" />
    ///  is specified as <see cref="F:System.IO.Packaging.TargetMode.Internal" />
    ///  but <paramref name="targetUri" />
    ///  is an absolute external URI.</exception><exception cref="T:System.IO.IOException">The package is read-only (a new relationship cannot be added).</exception>
    function CreateRelationship(targetUri: DDN.System.DNUri; targetMode: DNTargetMode; relationshipType: string): DNPackageRelationship; overload;
    ///<summary>Creates a part-level relationship between this <see cref="T:System.IO.Packaging.PackagePart" />
    ///  to a specified target <see cref="T:System.IO.Packaging.PackagePart" />
    ///  or external resource.</summary>
    ///  <param name="targetUri">The URIÂ of the target part.</param>
    ///  <param name="targetMode">One of the enumeration values. For example, <see cref="F:System.IO.Packaging.TargetMode.Internal" />
    ///  if the target part is inside the <see cref="T:System.IO.Packaging.Package" />
    ///  ; or <see cref="F:System.IO.Packaging.TargetMode.External" />
    ///  if the target is a resource outside the <see cref="T:System.IO.Packaging.Package" />
    ///  .</param>
    ///  <param name="relationshipType">The role of the relationship.</param>
    ///  <param name="id">A unique ID for the relationship.</param>
    ///<returns>The part-level relationship between this <see cref="T:System.IO.Packaging.PackagePart" />
    ///  to the target <see cref="T:System.IO.Packaging.PackagePart" />
    ///  or external resource.</returns>
    ///<exception cref="T:System.InvalidOperationException">The part has been deleted.-or-The <see cref="P:System.IO.Packaging.PackagePart.Package" />
    ///  is not open (<see cref="M:System.IO.Packaging.Package.Dispose(System.Boolean)" />
    ///  or <see cref="M:System.IO.Packaging.Package.Close" />
    ///  has been called).</exception><exception cref="T:System.ArgumentNullException"><paramref name="targetUri" />
    ///  or <paramref name="relationshipType" />
    ///  is <see langword="null" />
    ///  .</exception><exception cref="T:System.ArgumentOutOfRangeException">The <paramref name="targetMode" />
    ///  parameter is not a valid <see cref="T:System.IO.Packaging.TargetMode" />
    ///  enumeration value.</exception><exception cref="T:System.ArgumentException">The part identified by the <paramref name="targetUri" />
    ///  is a relationship (the target of a relationship cannot be another relationship).-or-
    ///  <paramref name="targetMode" />
    ///  is specified as <see cref="F:System.IO.Packaging.TargetMode.Internal" />
    ///  but <paramref name="targetUri" />
    ///  is an absolute external URI.</exception><exception cref="T:System.IO.IOException">The package is read-only (a new relationship cannot be added).</exception><exception cref="T:System.Xml.XmlException"><paramref name="id" />
    ///  is not a valid XML identifier.-or-A part with the specified <paramref name="id" />
    ///  already exists.</exception>
    function CreateRelationship(targetUri: DDN.System.DNUri; targetMode: DNTargetMode; relationshipType: string; id: string): DNPackageRelationship; overload;
    ///<summary>Returns a collection of all the relationships that are owned by this part.</summary>
    ///<returns>A collection of all the relationships that are owned by the part.</returns>
    ///<exception cref="T:System.InvalidOperationException">The part has been deleted.-or-The <see cref="P:System.IO.Packaging.PackagePart.Package" />
    ///  is not open (<see cref="M:System.IO.Packaging.Package.Dispose(System.Boolean)" />
    ///  or <see cref="M:System.IO.Packaging.Package.Close" />
    ///  has been called).</exception><exception cref="T:System.IO.IOException">The package is write-only (relationship information cannot be read).</exception>
    function GetRelationships: DNPackageRelationshipCollection;
    ///<summary>Returns a collection of the relationships that match a specified <see cref="P:System.IO.Packaging.PackageRelationship.RelationshipType" />
    ///  .</summary>
    ///  <param name="relationshipType">The <see cref="P:System.IO.Packaging.PackageRelationship.RelationshipType" />
    ///  of the relationships to locate and return in the collection.</param>
    ///<returns>A collection of the relationships that match the specified <paramref name="relationshipType" />
    ///  .</returns>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="relationshipType" />
    ///  is <see langword="null" />
    ///  .</exception><exception cref="T:System.ArgumentException"><paramref name="relationshipType" />
    ///  is an empty string.</exception><exception cref="T:System.InvalidOperationException">The part has been deleted.-or-The <see cref="P:System.IO.Packaging.PackagePart.Package" />
    ///  is not open (<see cref="M:System.IO.Packaging.Package.Dispose(System.Boolean)" />
    ///  or <see cref="M:System.IO.Packaging.Package.Close" />
    ///  has been called).</exception><exception cref="T:System.IO.IOException">The package is write-only (relationship information cannot be read).</exception>
    function GetRelationshipsByType(relationshipType: string): DNPackageRelationshipCollection;
    ///<summary>Returns the relationship that has a specified <see cref="P:System.IO.Packaging.PackageRelationship.Id" />
    ///  . </summary>
    ///  <param name="id">The <see cref="P:System.IO.Packaging.PackageRelationship.Id" />
    ///  of the relationship to return.</param>
    ///<returns>The relationship that matches the specified <paramref name="id" />
    ///  .</returns>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="id" />
    ///  is <see langword="null" />
    ///  .</exception><exception cref="T:System.Xml.XmlException"><paramref name="id" />
    ///  is not a valid XML identifier.</exception><exception cref="T:System.ArgumentException"><paramref name="relationshipType" />
    ///  is an empty string.</exception><exception cref="T:System.InvalidOperationException">The part has been deleted.-or-The <see cref="P:System.IO.Packaging.PackagePart.Package" />
    ///  is not open (<see cref="M:System.IO.Packaging.Package.Dispose(System.Boolean)" />
    ///  or <see cref="M:System.IO.Packaging.Package.Close" />
    ///  has been called).-or-A relationship with the specified <paramref name="id" />
    ///  does not exist in the package.</exception><exception cref="T:System.IO.IOException">The package is write-only (relationship information cannot be read).</exception>
    function GetRelationship(id: string): DNPackageRelationship;
    ///<summary>Returns a value that indicates whether this part owns a relationship with a specified <see cref="P:System.IO.Packaging.PackageRelationship.Id" />
    ///  .</summary>
    ///  <param name="id">The <see cref="P:System.IO.Packaging.PackageRelationship.Id" />
    ///  of the relationship to check for.</param>
    ///<returns><see langword="true" />
    ///  if this part owns a relationship with the specified <paramref name="id" />
    ///  ; otherwise, <see langword="false" />
    ///  .</returns>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="id" />
    ///  is <see langword="null" />
    ///  .</exception><exception cref="T:System.Xml.XmlException"><paramref name="id" />
    ///  is not a valid XML identifier.</exception><exception cref="T:System.InvalidOperationException">The part has been deleted.-or-The <see cref="P:System.IO.Packaging.PackagePart.Package" />
    ///  is not open (<see cref="M:System.IO.Packaging.Package.Dispose(System.Boolean)" />
    ///  or <see cref="M:System.IO.Packaging.Package.Close" />
    ///  has been called).</exception><exception cref="T:System.IO.IOException">The package is write-only (relationship information cannot be read).</exception>
    function RelationshipExists(id: string): Boolean;
    ///<summary>Deletes a specified part-level <see cref="T:System.IO.Packaging.PackageRelationship" />
    ///  .</summary>
    ///  <param name="id">The <see cref="P:System.IO.Packaging.PackageRelationship.Id" />
    ///  of the relationship to delete.</param>
    ///<exception cref="T:System.InvalidOperationException">The part has been deleted.-or-The <see cref="P:System.IO.Packaging.PackagePart.Package" />
    ///  is not open (<see cref="M:System.IO.Packaging.Package.Dispose(System.Boolean)" />
    ///  or <see cref="M:System.IO.Packaging.Package.Close" />
    ///  has been called).</exception><exception cref="T:System.ArgumentNullException"><paramref name="id" />
    ///  is <see langword="null" />
    ///  .</exception><exception cref="T:System.IO.IOException">The package is read-only (relationships cannot be deleted).</exception><exception cref="T:System.Xml.XmlException"><paramref name="id" />
    ///  is not a valid XML identifier.</exception>
    procedure DeleteRelationship(id: string);
    ///<summary>Returns the part content stream opened with a specified <see cref="T:System.IO.FileMode" />
    ///  and <see cref="T:System.IO.FileAccess" />
    ///  .</summary>
    ///  <param name="mode">The I/O mode in which to open the content stream.</param>
    ///  <param name="access">The access permissions to use in opening the content stream.</param>
    ///<returns>The content stream for the part.</returns>
    ///<exception cref="T:System.InvalidOperationException">The part has been deleted.-or-The <see cref="P:System.IO.Packaging.PackagePart.Package" />
    ///  is not open (<see cref="M:System.IO.Packaging.Package.Dispose(System.Boolean)" />
    ///  or <see cref="M:System.IO.Packaging.Package.Close" />
    ///  has been called).</exception><exception cref="T:System.ArgumentOutOfRangeException">The <paramref name="mode" />
    ///  parameter is not a valid <see cref="T:System.IO.FileMode" />
    ///  enumeration value.-or-The <paramref name="access" />
    ///  parameter is not a valid <see cref="T:System.IO.FileAccess" />
    ///  enumeration value.</exception><exception cref="T:System.IO.IOException"><paramref name="mode" />
    ///  or <paramref name="access" />
    ///  is not compatible with the package and part stream.-or-The <paramref name="access" />
    ///  parameter is specified as <see cref="F:System.IO.FileAccess.Read" />
    ///  but the <paramref name="mode" />
    ///  parameter requires write access.  (<see cref="T:System.IO.FileMode" />
    ///  values of <see cref="F:System.IO.FileMode.Create" />
    ///  , <see cref="F:System.IO.FileMode.CreateNew" />
    ///  , <see cref="F:System.IO.FileMode.Truncate" />
    ///  , and <see cref="F:System.IO.FileMode.Append" />
    ///  require <see cref="F:System.IO.FileAccess.Write" />
    ///  or <see cref="F:System.IO.FileAccess.ReadWrite" />
    ///  access.)-or-The stream object returned by the <see cref="M:System.IO.Packaging.PackagePart.GetStreamCore(System.IO.FileMode,System.IO.FileAccess)" />
    ///  method of the derived subclass is <see langword="null" />
    ///  .</exception>
    function GetStream(mode: DDN.mscorlib.DNFileMode; access: DDN.mscorlib.DNFileAccess): DDN.mscorlib.DNStream; overload;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>Gets the URI of the part.</summary>
    ///<returns>The URIÂ of the part relative to the package root.</returns>
    ///<exception cref="T:System.InvalidOperationException">The part has been deleted.-or-The <see cref="P:System.IO.Packaging.PackagePart.Package" />
    ///  is not open (<see cref="M:System.IO.Packaging.Package.Dispose(System.Boolean)" />
    ///  or <see cref="M:System.IO.Packaging.Package.Close" />
    ///  has been called).</exception>
    property Uri: DDN.System.DNUri read get_Uri;
    ///<summary>Gets the MIME type of the content stream.</summary>
    ///<returns>The MIME type of the content data stream for the part.</returns>
    ///<exception cref="T:System.InvalidOperationException">The part has been deleted.-or-The <see cref="P:System.IO.Packaging.PackagePart.Package" />
    ///  is not open (<see cref="M:System.IO.Packaging.Package.Dispose(System.Boolean)" />
    ///  or <see cref="M:System.IO.Packaging.Package.Close" />
    ///  has been called).-or-The string returned by the derived class <see cref="M:System.IO.Packaging.PackagePart.GetContentTypeCore" />
    ///  method is empty.</exception>
    property ContentType: string read get_ContentType;
    ///<summary>Gets the parent <see cref="T:System.IO.Packaging.Package" />
    ///  of the part.</summary>
    ///<returns>The parent package of the part.</returns>
    ///<exception cref="T:System.InvalidOperationException">The part has been deleted.-or-The <see cref="P:System.IO.Packaging.PackagePart.Package" />
    ///  is not open (<see cref="M:System.IO.Packaging.Package.Dispose(System.Boolean)" />
    ///  or <see cref="M:System.IO.Packaging.Package.Close" />
    ///  has been called).</exception>
    property &Package: DNPackage read get_Package;
    ///<summary>Gets the compression option of the part content stream.</summary>
    ///<returns>The compression option of the part content stream.</returns>
    ///<exception cref="T:System.InvalidOperationException">The part has been deleted.-or-The <see cref="P:System.IO.Packaging.PackagePart.Package" />
    ///  is not open (<see cref="M:System.IO.Packaging.Package.Dispose(System.Boolean)" />
    ///  or <see cref="M:System.IO.Packaging.Package.Close" />
    ///  has been called).</exception>
    property CompressionOption: DNCompressionOption read get_CompressionOption;
  end;

  TDNPackagePart = class(TDNGenericImport<DNPackagePartClass, DNPackagePart>) end;

  //-------------namespace: System.IO.Packaging----------------
  DNZipPackagePartClass = interface(DNPackagePartClass)
  ['{067FCD09-E20B-5F21-9D97-F53AA46C3E08}']
  end;

  ///<summary>Represents a part that is stored in a <see cref="T:System.IO.Packaging.ZipPackage" />
  ///  .</summary>
  [DNTypeName('System.IO.Packaging.ZipPackagePart')]
  DNZipPackagePart = interface(DNPackagePart)
  ['{60E07AD0-380B-3B17-85E1-9D6344E02756}']
  { getters & setters } 

    function get_Uri: DDN.System.DNUri;
    function get_ContentType: string;
    function get_Package: DNPackage;
    function get_CompressionOption: DNCompressionOption;

  { methods } 

    ///<summary>Returns the part content data stream.</summary>
    ///<returns>The content data stream for the part.</returns>
    ///<exception cref="T:System.InvalidOperationException">The part has been deleted.-or-The <see cref="P:System.IO.Packaging.PackagePart.Package" />
    ///  is not open (<see cref="M:System.IO.Packaging.Package.Dispose(System.Boolean)" />
    ///  or <see cref="M:System.IO.Packaging.Package.Close" />
    ///  has been called).</exception><exception cref="T:System.IO.IOException">The stream object returned by the <see cref="M:System.IO.Packaging.PackagePart.GetStreamCore(System.IO.FileMode,System.IO.FileAccess)" />
    ///  method of the derived subclass is <see langword="null" />
    ///  .</exception>
    function GetStream: DDN.mscorlib.DNStream; overload;
    ///<summary>Returns the content stream opened in a specified I/O <see cref="T:System.IO.FileMode" />
    ///  .</summary>
    ///  <param name="mode">The I/O mode in which to open the content stream.</param>
    ///<returns>The content stream of the part.</returns>
    ///<exception cref="T:System.InvalidOperationException">The part has been deleted.-or-The <see cref="P:System.IO.Packaging.PackagePart.Package" />
    ///  is not open (<see cref="M:System.IO.Packaging.Package.Dispose(System.Boolean)" />
    ///  or <see cref="M:System.IO.Packaging.Package.Close" />
    ///  has been called).</exception><exception cref="T:System.ArgumentOutOfRangeException">The <paramref name="mode" />
    ///  parameter is not a valid <see cref="T:System.IO.FileMode" />
    ///  enumeration value.</exception><exception cref="T:System.IO.IOException">The <paramref name="mode" />
    ///  parameter is not compatible with the package and part stream.-or-The stream object returned by the <see cref="M:System.IO.Packaging.PackagePart.GetStreamCore(System.IO.FileMode,System.IO.FileAccess)" />
    ///  method of the derived subclass is <see langword="null" />
    ///  .</exception>
    function GetStream(mode: DDN.mscorlib.DNFileMode): DDN.mscorlib.DNStream; overload;
    ///<summary>Creates a part-level relationship between this <see cref="T:System.IO.Packaging.PackagePart" />
    ///  to a specified target <see cref="T:System.IO.Packaging.PackagePart" />
    ///  or external resource.</summary>
    ///  <param name="targetUri">The URIÂ of the target part.</param>
    ///  <param name="targetMode">One of the enumeration values. For example, <see cref="F:System.IO.Packaging.TargetMode.Internal" />
    ///  if the target part is inside the <see cref="T:System.IO.Packaging.Package" />
    ///  ; or <see cref="F:System.IO.Packaging.TargetMode.External" />
    ///  if the target is a resource outside the <see cref="T:System.IO.Packaging.Package" />
    ///  .</param>
    ///  <param name="relationshipType">The role of the relationship.</param>
    ///<returns>The part-level relationship between this <see cref="T:System.IO.Packaging.PackagePart" />
    ///  to the target <see cref="T:System.IO.Packaging.PackagePart" />
    ///  or external resource.</returns>
    ///<exception cref="T:System.InvalidOperationException">The part has been deleted.-or-The <see cref="P:System.IO.Packaging.PackagePart.Package" />
    ///  is not open (<see cref="M:System.IO.Packaging.Package.Dispose(System.Boolean)" />
    ///  or <see cref="M:System.IO.Packaging.Package.Close" />
    ///  has been called).</exception><exception cref="T:System.ArgumentNullException"><paramref name="targetUri" />
    ///  or <paramref name="relationshipType" />
    ///  is <see langword="null" />
    ///  .</exception><exception cref="T:System.ArgumentOutOfRangeException">The <paramref name="targetMode" />
    ///  parameter is not a valid <see cref="T:System.IO.Packaging.TargetMode" />
    ///  enumeration value.</exception><exception cref="T:System.ArgumentException">The part identified by the <paramref name="targetUri" />
    ///  is a relationship (the target of a relationship cannot be another relationship).-or-
    ///  <paramref name="targetMode" />
    ///  is specified as <see cref="F:System.IO.Packaging.TargetMode.Internal" />
    ///  but <paramref name="targetUri" />
    ///  is an absolute external URI.</exception><exception cref="T:System.IO.IOException">The package is read-only (a new relationship cannot be added).</exception>
    function CreateRelationship(targetUri: DDN.System.DNUri; targetMode: DNTargetMode; relationshipType: string): DNPackageRelationship; overload;
    ///<summary>Creates a part-level relationship between this <see cref="T:System.IO.Packaging.PackagePart" />
    ///  to a specified target <see cref="T:System.IO.Packaging.PackagePart" />
    ///  or external resource.</summary>
    ///  <param name="targetUri">The URIÂ of the target part.</param>
    ///  <param name="targetMode">One of the enumeration values. For example, <see cref="F:System.IO.Packaging.TargetMode.Internal" />
    ///  if the target part is inside the <see cref="T:System.IO.Packaging.Package" />
    ///  ; or <see cref="F:System.IO.Packaging.TargetMode.External" />
    ///  if the target is a resource outside the <see cref="T:System.IO.Packaging.Package" />
    ///  .</param>
    ///  <param name="relationshipType">The role of the relationship.</param>
    ///  <param name="id">A unique ID for the relationship.</param>
    ///<returns>The part-level relationship between this <see cref="T:System.IO.Packaging.PackagePart" />
    ///  to the target <see cref="T:System.IO.Packaging.PackagePart" />
    ///  or external resource.</returns>
    ///<exception cref="T:System.InvalidOperationException">The part has been deleted.-or-The <see cref="P:System.IO.Packaging.PackagePart.Package" />
    ///  is not open (<see cref="M:System.IO.Packaging.Package.Dispose(System.Boolean)" />
    ///  or <see cref="M:System.IO.Packaging.Package.Close" />
    ///  has been called).</exception><exception cref="T:System.ArgumentNullException"><paramref name="targetUri" />
    ///  or <paramref name="relationshipType" />
    ///  is <see langword="null" />
    ///  .</exception><exception cref="T:System.ArgumentOutOfRangeException">The <paramref name="targetMode" />
    ///  parameter is not a valid <see cref="T:System.IO.Packaging.TargetMode" />
    ///  enumeration value.</exception><exception cref="T:System.ArgumentException">The part identified by the <paramref name="targetUri" />
    ///  is a relationship (the target of a relationship cannot be another relationship).-or-
    ///  <paramref name="targetMode" />
    ///  is specified as <see cref="F:System.IO.Packaging.TargetMode.Internal" />
    ///  but <paramref name="targetUri" />
    ///  is an absolute external URI.</exception><exception cref="T:System.IO.IOException">The package is read-only (a new relationship cannot be added).</exception><exception cref="T:System.Xml.XmlException"><paramref name="id" />
    ///  is not a valid XML identifier.-or-A part with the specified <paramref name="id" />
    ///  already exists.</exception>
    function CreateRelationship(targetUri: DDN.System.DNUri; targetMode: DNTargetMode; relationshipType: string; id: string): DNPackageRelationship; overload;
    ///<summary>Returns a collection of all the relationships that are owned by this part.</summary>
    ///<returns>A collection of all the relationships that are owned by the part.</returns>
    ///<exception cref="T:System.InvalidOperationException">The part has been deleted.-or-The <see cref="P:System.IO.Packaging.PackagePart.Package" />
    ///  is not open (<see cref="M:System.IO.Packaging.Package.Dispose(System.Boolean)" />
    ///  or <see cref="M:System.IO.Packaging.Package.Close" />
    ///  has been called).</exception><exception cref="T:System.IO.IOException">The package is write-only (relationship information cannot be read).</exception>
    function GetRelationships: DNPackageRelationshipCollection;
    ///<summary>Returns a collection of the relationships that match a specified <see cref="P:System.IO.Packaging.PackageRelationship.RelationshipType" />
    ///  .</summary>
    ///  <param name="relationshipType">The <see cref="P:System.IO.Packaging.PackageRelationship.RelationshipType" />
    ///  of the relationships to locate and return in the collection.</param>
    ///<returns>A collection of the relationships that match the specified <paramref name="relationshipType" />
    ///  .</returns>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="relationshipType" />
    ///  is <see langword="null" />
    ///  .</exception><exception cref="T:System.ArgumentException"><paramref name="relationshipType" />
    ///  is an empty string.</exception><exception cref="T:System.InvalidOperationException">The part has been deleted.-or-The <see cref="P:System.IO.Packaging.PackagePart.Package" />
    ///  is not open (<see cref="M:System.IO.Packaging.Package.Dispose(System.Boolean)" />
    ///  or <see cref="M:System.IO.Packaging.Package.Close" />
    ///  has been called).</exception><exception cref="T:System.IO.IOException">The package is write-only (relationship information cannot be read).</exception>
    function GetRelationshipsByType(relationshipType: string): DNPackageRelationshipCollection;
    ///<summary>Returns the relationship that has a specified <see cref="P:System.IO.Packaging.PackageRelationship.Id" />
    ///  . </summary>
    ///  <param name="id">The <see cref="P:System.IO.Packaging.PackageRelationship.Id" />
    ///  of the relationship to return.</param>
    ///<returns>The relationship that matches the specified <paramref name="id" />
    ///  .</returns>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="id" />
    ///  is <see langword="null" />
    ///  .</exception><exception cref="T:System.Xml.XmlException"><paramref name="id" />
    ///  is not a valid XML identifier.</exception><exception cref="T:System.ArgumentException"><paramref name="relationshipType" />
    ///  is an empty string.</exception><exception cref="T:System.InvalidOperationException">The part has been deleted.-or-The <see cref="P:System.IO.Packaging.PackagePart.Package" />
    ///  is not open (<see cref="M:System.IO.Packaging.Package.Dispose(System.Boolean)" />
    ///  or <see cref="M:System.IO.Packaging.Package.Close" />
    ///  has been called).-or-A relationship with the specified <paramref name="id" />
    ///  does not exist in the package.</exception><exception cref="T:System.IO.IOException">The package is write-only (relationship information cannot be read).</exception>
    function GetRelationship(id: string): DNPackageRelationship;
    ///<summary>Returns a value that indicates whether this part owns a relationship with a specified <see cref="P:System.IO.Packaging.PackageRelationship.Id" />
    ///  .</summary>
    ///  <param name="id">The <see cref="P:System.IO.Packaging.PackageRelationship.Id" />
    ///  of the relationship to check for.</param>
    ///<returns><see langword="true" />
    ///  if this part owns a relationship with the specified <paramref name="id" />
    ///  ; otherwise, <see langword="false" />
    ///  .</returns>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="id" />
    ///  is <see langword="null" />
    ///  .</exception><exception cref="T:System.Xml.XmlException"><paramref name="id" />
    ///  is not a valid XML identifier.</exception><exception cref="T:System.InvalidOperationException">The part has been deleted.-or-The <see cref="P:System.IO.Packaging.PackagePart.Package" />
    ///  is not open (<see cref="M:System.IO.Packaging.Package.Dispose(System.Boolean)" />
    ///  or <see cref="M:System.IO.Packaging.Package.Close" />
    ///  has been called).</exception><exception cref="T:System.IO.IOException">The package is write-only (relationship information cannot be read).</exception>
    function RelationshipExists(id: string): Boolean;
    ///<summary>Deletes a specified part-level <see cref="T:System.IO.Packaging.PackageRelationship" />
    ///  .</summary>
    ///  <param name="id">The <see cref="P:System.IO.Packaging.PackageRelationship.Id" />
    ///  of the relationship to delete.</param>
    ///<exception cref="T:System.InvalidOperationException">The part has been deleted.-or-The <see cref="P:System.IO.Packaging.PackagePart.Package" />
    ///  is not open (<see cref="M:System.IO.Packaging.Package.Dispose(System.Boolean)" />
    ///  or <see cref="M:System.IO.Packaging.Package.Close" />
    ///  has been called).</exception><exception cref="T:System.ArgumentNullException"><paramref name="id" />
    ///  is <see langword="null" />
    ///  .</exception><exception cref="T:System.IO.IOException">The package is read-only (relationships cannot be deleted).</exception><exception cref="T:System.Xml.XmlException"><paramref name="id" />
    ///  is not a valid XML identifier.</exception>
    procedure DeleteRelationship(id: string);
    ///<summary>Returns the part content stream opened with a specified <see cref="T:System.IO.FileMode" />
    ///  and <see cref="T:System.IO.FileAccess" />
    ///  .</summary>
    ///  <param name="mode">The I/O mode in which to open the content stream.</param>
    ///  <param name="access">The access permissions to use in opening the content stream.</param>
    ///<returns>The content stream for the part.</returns>
    ///<exception cref="T:System.InvalidOperationException">The part has been deleted.-or-The <see cref="P:System.IO.Packaging.PackagePart.Package" />
    ///  is not open (<see cref="M:System.IO.Packaging.Package.Dispose(System.Boolean)" />
    ///  or <see cref="M:System.IO.Packaging.Package.Close" />
    ///  has been called).</exception><exception cref="T:System.ArgumentOutOfRangeException">The <paramref name="mode" />
    ///  parameter is not a valid <see cref="T:System.IO.FileMode" />
    ///  enumeration value.-or-The <paramref name="access" />
    ///  parameter is not a valid <see cref="T:System.IO.FileAccess" />
    ///  enumeration value.</exception><exception cref="T:System.IO.IOException"><paramref name="mode" />
    ///  or <paramref name="access" />
    ///  is not compatible with the package and part stream.-or-The <paramref name="access" />
    ///  parameter is specified as <see cref="F:System.IO.FileAccess.Read" />
    ///  but the <paramref name="mode" />
    ///  parameter requires write access.  (<see cref="T:System.IO.FileMode" />
    ///  values of <see cref="F:System.IO.FileMode.Create" />
    ///  , <see cref="F:System.IO.FileMode.CreateNew" />
    ///  , <see cref="F:System.IO.FileMode.Truncate" />
    ///  , and <see cref="F:System.IO.FileMode.Append" />
    ///  require <see cref="F:System.IO.FileAccess.Write" />
    ///  or <see cref="F:System.IO.FileAccess.ReadWrite" />
    ///  access.)-or-The stream object returned by the <see cref="M:System.IO.Packaging.PackagePart.GetStreamCore(System.IO.FileMode,System.IO.FileAccess)" />
    ///  method of the derived subclass is <see langword="null" />
    ///  .</exception>
    function GetStream(mode: DDN.mscorlib.DNFileMode; access: DDN.mscorlib.DNFileAccess): DDN.mscorlib.DNStream; overload;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>Gets the URI of the part.</summary>
    ///<returns>The URIÂ of the part relative to the package root.</returns>
    ///<exception cref="T:System.InvalidOperationException">The part has been deleted.-or-The <see cref="P:System.IO.Packaging.PackagePart.Package" />
    ///  is not open (<see cref="M:System.IO.Packaging.Package.Dispose(System.Boolean)" />
    ///  or <see cref="M:System.IO.Packaging.Package.Close" />
    ///  has been called).</exception>
    property Uri: DDN.System.DNUri read get_Uri;
    ///<summary>Gets the MIME type of the content stream.</summary>
    ///<returns>The MIME type of the content data stream for the part.</returns>
    ///<exception cref="T:System.InvalidOperationException">The part has been deleted.-or-The <see cref="P:System.IO.Packaging.PackagePart.Package" />
    ///  is not open (<see cref="M:System.IO.Packaging.Package.Dispose(System.Boolean)" />
    ///  or <see cref="M:System.IO.Packaging.Package.Close" />
    ///  has been called).-or-The string returned by the derived class <see cref="M:System.IO.Packaging.PackagePart.GetContentTypeCore" />
    ///  method is empty.</exception>
    property ContentType: string read get_ContentType;
    ///<summary>Gets the parent <see cref="T:System.IO.Packaging.Package" />
    ///  of the part.</summary>
    ///<returns>The parent package of the part.</returns>
    ///<exception cref="T:System.InvalidOperationException">The part has been deleted.-or-The <see cref="P:System.IO.Packaging.PackagePart.Package" />
    ///  is not open (<see cref="M:System.IO.Packaging.Package.Dispose(System.Boolean)" />
    ///  or <see cref="M:System.IO.Packaging.Package.Close" />
    ///  has been called).</exception>
    property &Package: DNPackage read get_Package;
    ///<summary>Gets the compression option of the part content stream.</summary>
    ///<returns>The compression option of the part content stream.</returns>
    ///<exception cref="T:System.InvalidOperationException">The part has been deleted.-or-The <see cref="P:System.IO.Packaging.PackagePart.Package" />
    ///  is not open (<see cref="M:System.IO.Packaging.Package.Dispose(System.Boolean)" />
    ///  or <see cref="M:System.IO.Packaging.Package.Close" />
    ///  has been called).</exception>
    property CompressionOption: DNCompressionOption read get_CompressionOption;
  end;

  TDNZipPackagePart = class(TDNGenericImport<DNZipPackagePartClass, DNZipPackagePart>) end;

  //-------------namespace: System.IO.Packaging----------------
  DNPackagePartCollectionClass = interface(DDN.mscorlib.DNObjectClass)
  ['{F42B37AB-59AF-50F6-A915-7222FE7B06C8}']
  end;

  ///<summary>Represents a collection of <see cref="T:System.IO.Packaging.PackagePart" />
  ///  objects.</summary>
  [DNTypeName('System.IO.Packaging.PackagePartCollection')]
  DNPackagePartCollection = interface(DDN.mscorlib.DNObject)
  ['{080F5D9A-0A28-3CA9-8D5A-B0F287CDC5BC}']
  { methods } 

    ///<summary>Returns an enumerator for iterating through the parts in the collection. </summary>
    ///<returns>An enumerator for iterating through the <see cref="T:System.IO.Packaging.PackagePart" />
    ///  elements in the collection.</returns>
    function GetEnumerator: DDN.mscorlib.DNIEnumerator<DNPackagePart>;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNPackagePartCollection = class(TDNGenericImport<DNPackagePartCollectionClass, DNPackagePartCollection>) end;

  //-------------namespace: System.IO.Packaging----------------
  DNPackagePropertiesClass = interface(DNObjectClass)
  ['{47C0AEB2-E581-5E0A-BA27-562FF14A8597}']
  end;

  ///<summary>Represents the core properties of a <see cref="T:System.IO.Packaging.Package" />
  ///  .  </summary>
  [DNTypeName('System.IO.Packaging.PackageProperties')]
  DNPackageProperties = interface(DDN.mscorlib.DNIDisposable)
  ['{8E0D9515-9AB1-3222-861F-1055272E7959}']
  { getters & setters } 

    function get_Title: string;
    procedure set_Title(value: string);
    function get_Subject: string;
    procedure set_Subject(value: string);
    function get_Creator: string;
    procedure set_Creator(value: string);
    function get_Keywords: string;
    procedure set_Keywords(value: string);
    function get_Description: string;
    procedure set_Description(value: string);
    function get_LastModifiedBy: string;
    procedure set_LastModifiedBy(value: string);
    function get_Revision: string;
    procedure set_Revision(value: string);
    function get_LastPrinted: DDN.mscorlib.DNNullable<DDN.mscorlib.DNDateTime>;
    procedure set_LastPrinted(value: DDN.mscorlib.DNNullable<DDN.mscorlib.DNDateTime>);
    function get_Created: DDN.mscorlib.DNNullable<DDN.mscorlib.DNDateTime>;
    procedure set_Created(value: DDN.mscorlib.DNNullable<DDN.mscorlib.DNDateTime>);
    function get_Modified: DDN.mscorlib.DNNullable<DDN.mscorlib.DNDateTime>;
    procedure set_Modified(value: DDN.mscorlib.DNNullable<DDN.mscorlib.DNDateTime>);
    function get_Category: string;
    procedure set_Category(value: string);
    function get_Identifier: string;
    procedure set_Identifier(value: string);
    function get_ContentType: string;
    procedure set_ContentType(value: string);
    function get_Language: string;
    procedure set_Language(value: string);
    function get_Version: string;
    procedure set_Version(value: string);
    function get_ContentStatus: string;
    procedure set_ContentStatus(value: string);

  { methods } 

    ///<summary>Releases all resources used by the <see cref="T:System.IO.Packaging.PackageProperties" />
    ///  instance.</summary>
    procedure Dispose;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>When overridden in a derived class, gets or sets the name given to the <see cref="T:System.IO.Packaging.Package" />
    ///  and its content.</summary>
    ///<returns>The name given to the <see cref="T:System.IO.Packaging.Package" />
    ///  and its content.</returns>
    property Title: string read get_Title write set_Title;
    ///<summary>When overridden in a derived class, gets or sets the topic of the <see cref="T:System.IO.Packaging.Package" />
    ///  content.</summary>
    ///<returns>The topic of the <see cref="T:System.IO.Packaging.Package" />
    ///  content.</returns>
    property Subject: string read get_Subject write set_Subject;
    ///<summary>When overridden in a derived class, gets or sets a value that identifies the individual or entity that created the <see cref="T:System.IO.Packaging.Package" />
    ///  and its content.</summary>
    ///<returns>The individual or entity that created the <see cref="T:System.IO.Packaging.Package" />
    ///  and its content.</returns>
    property Creator: string read get_Creator write set_Creator;
    ///<summary>When overridden in a derived class, gets or sets a value that define a delimited set of keywords to support searching and indexing the <see cref="T:System.IO.Packaging.Package" />
    ///  and its content.</summary>
    ///<returns>A delimited set of keywords to support searching and indexing the <see cref="T:System.IO.Packaging.Package" />
    ///  and content.</returns>
    property Keywords: string read get_Keywords write set_Keywords;
    ///<summary>When overridden in a derived class, gets or sets a description of the content contained in the <see cref="T:System.IO.Packaging.Package" />
    ///  .</summary>
    ///<returns>A description of the content contained in the <see cref="T:System.IO.Packaging.Package" />
    ///  .</returns>
    property Description: string read get_Description write set_Description;
    ///<summary>When overridden in a derived class, gets or sets a value that identifies the user who last modified the <see cref="T:System.IO.Packaging.Package" />
    ///  content.</summary>
    ///<returns>The user who last modified the <see cref="T:System.IO.Packaging.Package" />
    ///  content.</returns>
    property LastModifiedBy: string read get_LastModifiedBy write set_LastModifiedBy;
    ///<summary>When overridden in a derived class, gets or sets the revision number of the <see cref="T:System.IO.Packaging.Package" />
    ///  .</summary>
    ///<returns>The revision number of the <see cref="T:System.IO.Packaging.Package" />
    ///  .</returns>
    property Revision: string read get_Revision write set_Revision;
    ///<summary>When overridden in a derived class, gets or sets the date and time the <see cref="T:System.IO.Packaging.Package" />
    ///  content was last printed.</summary>
    ///<returns>The date and time the <see cref="T:System.IO.Packaging.Package" />
    ///  content was last printed.</returns>
    property LastPrinted: DDN.mscorlib.DNNullable<DDN.mscorlib.DNDateTime> read get_LastPrinted write set_LastPrinted;
    ///<summary>When overridden in a derived class, gets or sets the date and time the <see cref="T:System.IO.Packaging.Package" />
    ///  was created.</summary>
    ///<returns>The date and time the <see cref="T:System.IO.Packaging.Package" />
    ///  was initially created.</returns>
    property Created: DDN.mscorlib.DNNullable<DDN.mscorlib.DNDateTime> read get_Created write set_Created;
    ///<summary>When overridden in a derived class, gets or sets the date and time the <see cref="T:System.IO.Packaging.Package" />
    ///  was last changed.</summary>
    ///<returns>The date and time the <see cref="T:System.IO.Packaging.Package" />
    ///  was last changed.</returns>
    property Modified: DDN.mscorlib.DNNullable<DDN.mscorlib.DNDateTime> read get_Modified write set_Modified;
    ///<summary>When overridden in a derived class, gets or sets the category of the <see cref="T:System.IO.Packaging.Package" />
    ///  .</summary>
    ///<returns>The category of the content that is contained in the <see cref="T:System.IO.Packaging.Package" />
    ///  .</returns>
    property Category: string read get_Category write set_Category;
    ///<summary>When overridden in a derived class, gets or sets a value that unambiguously identifies the <see cref="T:System.IO.Packaging.Package" />
    ///  and its content.</summary>
    ///<returns>A value that unambiguously identifies the <see cref="T:System.IO.Packaging.Package" />
    ///  and its content.</returns>
    property Identifier: string read get_Identifier write set_Identifier;
    ///<summary>When overridden in a derived class, gets or sets a value that represents the type of content that is contained in the <see cref="T:System.IO.Packaging.Package" />
    ///  .</summary>
    ///<returns>The type of content that is contained in the <see cref="T:System.IO.Packaging.Package" />
    ///  .</returns>
    property ContentType: string read get_ContentType write set_ContentType;
    ///<summary>When overridden in a derived class, gets or sets a value that identifies the language of the <see cref="T:System.IO.Packaging.Package" />
    ///  content.</summary>
    ///<returns>A value that identifies the <see cref="T:System.IO.Packaging.Package" />
    ///  content language.</returns>
    property Language: string read get_Language write set_Language;
    ///<summary>When overridden in a derived class, gets or sets the version number of the <see cref="T:System.IO.Packaging.Package" />
    ///  .</summary>
    ///<returns>The version number of the <see cref="T:System.IO.Packaging.Package" />
    ///  .</returns>
    property Version: string read get_Version write set_Version;
    ///<summary>When overridden in a derived class, gets or sets a value that represents the status of the <see cref="T:System.IO.Packaging.Package" />
    ///  .</summary>
    ///<returns>The status of the <see cref="T:System.IO.Packaging.Package" />
    ///  content.</returns>
    property ContentStatus: string read get_ContentStatus write set_ContentStatus;
  end;

  TDNPackageProperties = class(TDNGenericImport<DNPackagePropertiesClass, DNPackageProperties>) end;

  //-------------namespace: System.IO.Packaging----------------
  DNPackageRelationshipClass = interface(DDN.mscorlib.DNObjectClass)
  ['{D111D645-490B-50ED-A0E7-A5380832660B}']
  end;

  ///<summary>Represents an association between a source <see cref="T:System.IO.Packaging.Package" />
  ///  or <see cref="T:System.IO.Packaging.PackagePart" />
  ///  , and a target object which can be a <see cref="T:System.IO.Packaging.PackagePart" />
  ///  or external resource.</summary>
  [DNTypeName('System.IO.Packaging.PackageRelationship')]
  DNPackageRelationship = interface(DDN.mscorlib.DNObject)
  ['{9DFA56CE-0D16-3E13-84AF-4EA76757236E}']
  { getters & setters } 

    function get_SourceUri: DDN.System.DNUri;
    function get_TargetUri: DDN.System.DNUri;
    function get_RelationshipType: string;
    function get_TargetMode: DNTargetMode;
    function get_Id: string;
    function get_Package: DNPackage;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>Gets the URI of the package or partÂ that owns the relationship.</summary>
    ///<returns>The URI of the <see cref="T:System.IO.Packaging.Package" />
    ///  or <see cref="T:System.IO.Packaging.PackagePart" />
    ///  that owns the relationship.</returns>
    property SourceUri: DDN.System.DNUri read get_SourceUri;
    ///<summary>Gets the URI of the target resource of the relationship.</summary>
    ///<returns>The URI of the target resource.</returns>
    property TargetUri: DDN.System.DNUri read get_TargetUri;
    ///<summary>Gets the qualified type name of the relationship. </summary>
    ///<returns>The qualified type name of the relationship.</returns>
    property RelationshipType: string read get_RelationshipType;
    ///<summary>Gets a value that indicates whether the target of the relationship is <see cref="F:System.IO.Packaging.TargetMode.Internal" />
    ///  or <see cref="F:System.IO.Packaging.TargetMode.External" />
    ///  to the <see cref="T:System.IO.Packaging.Package" />
    ///  .</summary>
    ///<returns>An enumeration value that indicates whether <see cref="P:System.IO.Packaging.PackageRelationship.TargetUri" />
    ///  references a resource <see cref="F:System.IO.Packaging.TargetMode.Internal" />
    ///  or <see cref="F:System.IO.Packaging.TargetMode.External" />
    ///  to the <see cref="T:System.IO.Packaging.Package" />
    ///  .</returns>
    property TargetMode: DNTargetMode read get_TargetMode;
    ///<summary>Gets a string that identifies the relationship.</summary>
    ///<returns>A string that identifies the relationship.</returns>
    property Id: string read get_Id;
    ///<summary>Gets the <see cref="T:System.IO.Packaging.Package" />
    ///  that contains this relationship.</summary>
    ///<returns>The package that contains this relationship.</returns>
    property &Package: DNPackage read get_Package;
  end;

  TDNPackageRelationship = class(TDNGenericImport<DNPackageRelationshipClass, DNPackageRelationship>) end;

  //-------------namespace: System.IO.Packaging----------------
  DNPackageRelationshipCollectionClass = interface(DDN.mscorlib.DNObjectClass)
  ['{DECF96DA-060B-58A5-8674-7A758AF68FA3}']
  end;

  ///<summary>Represents a collection of <see cref="T:System.IO.Packaging.PackageRelationship" />
  ///  elements that are owned by a given <see cref="T:System.IO.Packaging.PackagePart" />
  ///  or the <see cref="T:System.IO.Packaging.Package" />
  ///  . </summary>
  [DNTypeName('System.IO.Packaging.PackageRelationshipCollection')]
  DNPackageRelationshipCollection = interface(DDN.mscorlib.DNObject)
  ['{0B9D239A-1FB1-35CA-8665-0C637E28CABA}']
  { methods } 

    ///<summary>Returns an enumerator for iterating through the relationships in the collection. </summary>
    ///<returns>An enumerator for iterating through the <see cref="T:System.IO.Packaging.PackageRelationship" />
    ///  elements in the collection.</returns>
    function GetEnumerator: DDN.mscorlib.DNIEnumerator<DNPackageRelationship>;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNPackageRelationshipCollection = class(TDNGenericImport<DNPackageRelationshipCollectionClass, DNPackageRelationshipCollection>) end;

  //-------------namespace: System.IO.Packaging----------------
  DNPackageRelationshipSelectorClass = interface(DDN.mscorlib.DNObjectClass)
  ['{75D14400-2752-5E47-9C6C-3EF9E38AF585}']
  { constructors } 

    ///<summary>Initializes a new instance of the <see cref="T:System.IO.Packaging.PackageRelationshipSelector" />
    ///  class.</summary>
    ///  <param name="sourceUri">The uniform resource identifier (URI)Â of the <see cref="T:System.IO.Packaging.PackagePart" />
    ///  or the <see cref="T:System.IO.Packaging.Package" />
    ///  (<paramref name="SourceUri" />
    ///  ="/") that owns the relationship.</param>
    ///  <param name="selectorType">The type of the <paramref name="selectionCriteria" />
    ///  , either by relationship <see cref="F:System.IO.Packaging.PackageRelationshipSelectorType.Id" />
    ///  or relationship <see cref="F:System.IO.Packaging.PackageRelationshipSelectorType.Type" />
    ///  .</param>
    ///  <param name="selectionCriteria">The qualification string that is used to select the relationships based on the <paramref name="selectorType" />
    ///  .</param>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="sourceUri" />
    ///  or <paramref name="selectionCriteria" />
    ///  is <see langword="null" />
    ///  .</exception><exception cref="T:System.ArgumentOutOfRangeException">The <paramref name="selectorType" />
    ///  parameter is not valid.</exception><exception cref="T:System.Xml.XmlException">The <paramref name="selectorType" />
    ///  parameter is <see cref="F:System.IO.Packaging.PackageRelationshipSelectorType.Id" />
    ///  but <paramref name="selectionCriteria" />
    ///  is not a valid XML Schema Definition (XSD)Â identifier (ID).</exception><exception cref="T:System.ArgumentException">The <paramref name="selectionCriteria" />
    ///  is not valid for the specified <paramref name="selectorType" />
    ///  .</exception><exception cref="T:System.ArgumentException">The <paramref name="sourceUri" />
    ///  is not the <see cref="T:System.IO.Packaging.Package" />
    ///  root ("/") and is also not a valid <see cref="T:System.IO.Packaging.PackagePart" />
    ///  URI.</exception>
    {class} function init(sourceUri: DDN.System.DNUri; selectorType: DNPackageRelationshipSelectorType; selectionCriteria: string): DNPackageRelationshipSelector;

  end;

  ///<summary>Defines <see cref="T:System.IO.Packaging.PackageRelationship" />
  ///  criteria to select part-level or package-level relationships.</summary>
  [DNTypeName('System.IO.Packaging.PackageRelationshipSelector')]
  DNPackageRelationshipSelector = interface(DDN.mscorlib.DNObject)
  ['{29E40F0A-D9D4-3B54-9D9B-8B00DE2FC181}']
  { getters & setters } 

    function get_SourceUri: DDN.System.DNUri;
    function get_SelectorType: DNPackageRelationshipSelectorType;
    function get_SelectionCriteria: string;

  { methods } 

    ///<summary>Returns a list of <see cref="T:System.IO.Packaging.PackageRelationship" />
    ///  objects that match the defined <see cref="P:System.IO.Packaging.PackageRelationshipSelector.SourceUri" />
    ///  , <see cref="P:System.IO.Packaging.PackageRelationshipSelector.SelectorType" />
    ///  , and <see cref="P:System.IO.Packaging.PackageRelationshipSelector.SelectionCriteria" />
    ///  .</summary>
    ///  <param name="package">The package from which to select the relationships based on the selection criteria.</param>
    ///<returns>A list of relationships that match the selection parameters specified to the <see cref="M:System.IO.Packaging.PackageRelationshipSelector.#ctor(System.Uri,System.IO.Packaging.PackageRelationshipSelectorType,System.String)" />
    ///  constructor.</returns>
    function Select(&package: DNPackage): DDN.mscorlib.DNList<DNPackageRelationship>;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>Gets the root package URI ("/") or part <see cref="P:System.IO.Packaging.PackagePart.Uri" />
    ///  specified to the <see cref="M:System.IO.Packaging.PackageRelationshipSelector.#ctor(System.Uri,System.IO.Packaging.PackageRelationshipSelectorType,System.String)" />
    ///  constructor as the owner of the relationship.</summary>
    ///<returns>The root package URI ("/") or part <see cref="P:System.IO.Packaging.PackagePart.Uri" />
    ///  specified to the <see cref="M:System.IO.Packaging.PackageRelationshipSelector.#ctor(System.Uri,System.IO.Packaging.PackageRelationshipSelectorType,System.String)" />
    ///  constructor as the owner of the relationship.</returns>
    property SourceUri: DDN.System.DNUri read get_SourceUri;
    ///<summary>Gets the <see cref="T:System.IO.Packaging.PackageRelationshipSelectorType" />
    ///  specified to the <see cref="M:System.IO.Packaging.PackageRelationshipSelector.#ctor(System.Uri,System.IO.Packaging.PackageRelationshipSelectorType,System.String)" />
    ///  constructor.</summary>
    ///<returns>The selector type of <see cref="F:System.IO.Packaging.PackageRelationshipSelectorType.Id" />
    ///  or <see cref="F:System.IO.Packaging.PackageRelationshipSelectorType.Type" />
    ///  specified to the <see cref="M:System.IO.Packaging.PackageRelationshipSelector.#ctor(System.Uri,System.IO.Packaging.PackageRelationshipSelectorType,System.String)" />
    ///  constructor.</returns>
    property SelectorType: DNPackageRelationshipSelectorType read get_SelectorType;
    ///<summary>Gets the selection criteria specified to the <see cref="M:System.IO.Packaging.PackageRelationshipSelector.#ctor(System.Uri,System.IO.Packaging.PackageRelationshipSelectorType,System.String)" />
    ///  constructor.</summary>
    ///<returns>The selection criteria based on the <see cref="P:System.IO.Packaging.PackageRelationshipSelector.SelectorType" />
    ///  of <see cref="F:System.IO.Packaging.PackageRelationshipSelectorType.Id" />
    ///  or <see cref="F:System.IO.Packaging.PackageRelationshipSelectorType.Type" />
    ///  specified to the <see cref="M:System.IO.Packaging.PackageRelationshipSelector.#ctor(System.Uri,System.IO.Packaging.PackageRelationshipSelectorType,System.String)" />
    ///  constructor.</returns>
    property SelectionCriteria: string read get_SelectionCriteria;
  end;

  TDNPackageRelationshipSelector = class(TDNGenericImport<DNPackageRelationshipSelectorClass, DNPackageRelationshipSelector>) end;

  //-------------namespace: System.IO.Packaging----------------
  DNPackUriHelperClass = interface(DDN.mscorlib.DNObjectClass)
  ['{E4E54953-0E17-59D2-84AA-A7578B973722}']
  { static fields getter & setter } 

   function __fakeFieldGet_UriSchemePack: string;

  { static fields } 

    ///<summary>Defines the pack URI scheme name "pack".</summary>
    ///<returns>The pack URI scheme name string "pack".</returns>
    {class} property UriSchemePack: string read __fakeFieldGet_UriSchemePack;

  { static methods } 

    ///<summary>Creates a pack URI given a <see cref="T:System.IO.Packaging.Package" />
    ///  URI, the URI of aÂ part in the package, andÂ a "#" fragment to append.</summary>
    ///  <param name="packageUri">The URIÂ of the <see cref="T:System.IO.Packaging.Package" />
    ///  .</param>
    ///  <param name="partUri">The URI of the <see cref="T:System.IO.Packaging.PackagePart" />
    ///  inÂ the package.</param>
    ///  <param name="fragment">A "#" reference identifying an element within the package part.</param>
    ///<returns>The pack URI that identifies the specified package, package part, and fragment.</returns>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="packageUri" />
    ///  is <see langword="null" />
    ///  .</exception><exception cref="T:System.ArgumentException"><paramref name="packageUri" />
    ///  is not an absolute URI.-or-
    ///  <paramref name="partUri" />
    ///  is not a valid part URI syntax. -or-
    ///  <paramref name="fragment" />
    ///  is empty or does begin with "#".</exception>
    {class} function Create(packageUri: DDN.System.DNUri; partUri: DDN.System.DNUri; fragment: string): DDN.System.DNUri; overload;
    ///<summary>Creates a new pack URI that points to a package. </summary>
    ///  <param name="packageUri">The URI of the referenced <see cref="T:System.IO.Packaging.Package" />
    ///  .</param>
    ///<returns>The pack URI for the <see cref="T:System.IO.Packaging.Package" />
    ///  referenced by the given <paramref name="packageUri" />
    ///  .</returns>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="packageUri" />
    ///  is <see langword="null" />
    ///  .</exception><exception cref="T:System.ArgumentException"><paramref name="packageUri" />
    ///  is not an absolute URI.</exception>
    {class} function Create(packageUri: DDN.System.DNUri): DDN.System.DNUri; overload;
    ///<summary>Creates a pack URI given a <see cref="T:System.IO.Packaging.Package" />
    ///  URIÂ and theÂ URIÂ of a part in the package.</summary>
    ///  <param name="packageUri">The URI of the <see cref="T:System.IO.Packaging.Package" />
    ///  .</param>
    ///  <param name="partUri">The URI of the <see cref="T:System.IO.Packaging.PackagePart" />
    ///  inÂ the package.</param>
    ///<returns>The pack URI of the given <see cref="T:System.IO.Packaging.PackagePart" />
    ///  .</returns>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="packageUri" />
    ///  is <see langword="null" />
    ///  .</exception><exception cref="T:System.ArgumentException"><paramref name="packageUri" />
    ///  is not an absolute URI.-or-
    ///  <paramref name="partUri" />
    ///  is not a valid part URI syntax.</exception>
    {class} function Create(packageUri: DDN.System.DNUri; partUri: DDN.System.DNUri): DDN.System.DNUri; overload;
    ///<summary>Returns the inner URI that points to the entire package of a specified pack URI. </summary>
    ///  <param name="packUri">The pack URI from which to return the URI of the <see cref="T:System.IO.Packaging.Package" />
    ///  .</param>
    ///<returns>The URI of the <see cref="T:System.IO.Packaging.Package" />
    ///  from the specified <paramref name="packUri" />
    ///  .</returns>
    {class} function GetPackageUri(packUri: DDN.System.DNUri): DDN.System.DNUri;
    ///<summary>Returns the URI of a <see cref="T:System.IO.Packaging.PackagePart" />
    ///  within a specified pack URI. </summary>
    ///  <param name="packUri">The pack URI from which to return the <see cref="T:System.IO.Packaging.PackagePart" />
    ///  URI.</param>
    ///<returns>The URI of the <see cref="T:System.IO.Packaging.PackagePart" />
    ///  in the given <paramref name="packUri" />
    ///  , or <see langword="null" />
    ///  if <paramref name="packUri" />
    ///  points to a package instead of a <see cref="T:System.IO.Packaging.PackagePart" />
    ///  . </returns>
    {class} function GetPartUri(packUri: DDN.System.DNUri): DDN.System.DNUri;
    ///<summary>Creates a formatted <see cref="T:System.IO.Packaging.PackagePart" />
    ///  URI. </summary>
    ///  <param name="partUri">The URI of the <see cref="T:System.IO.Packaging.PackagePart" />
    ///  within the package.</param>
    ///<returns>A formatted <see cref="T:System.IO.Packaging.PackagePart" />
    ///  URI.</returns>
    {class} function CreatePartUri(partUri: DDN.System.DNUri): DDN.System.DNUri;
    ///<summary>Returns a part URI given a source part URI and a URI with a relative path to a target part.</summary>
    ///  <param name="sourcePartUri">The URI of the source part, or "/" to designate the <see cref="T:System.IO.Packaging.Package" />
    ///  root.</param>
    ///  <param name="targetUri">The relative URI to the target part.</param>
    ///<returns>The URI of the target part resolved between the specified <paramref name="SourcePartUri" />
    ///  and the <paramref name="targetUri" />
    ///  parameters.</returns>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="sourcePartUri" />
    ///  or <paramref name="targetUri" />
    ///  is <see langword="null" />
    ///  .</exception><exception cref="T:System.ArgumentException"><paramref name="sourcePartUri" />
    ///  is not a valid part URI.-or-
    ///  <paramref name="targetUri" />
    ///  is not a valid relative URI.</exception>
    {class} function ResolvePartUri(sourcePartUri: DDN.System.DNUri; targetUri: DDN.System.DNUri): DDN.System.DNUri;
    ///<summary>Returns the relative URI between two specifiedÂ <see cref="T:System.IO.Packaging.PackagePart" />
    ///  URIs.</summary>
    ///  <param name="sourcePartUri">The URI of the source part.</param>
    ///  <param name="targetPartUri">The URI of the target part.</param>
    ///<returns>The relative URI from <paramref name="sourcePartUri" />
    ///  to <paramref name="targetPartUri" />
    ///  .</returns>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="sourcePartUri" />
    ///  or <paramref name="targetPartUri" />
    ///  is <see langword="null" />
    ///  .</exception>
    {class} function GetRelativeUri(sourcePartUri: DDN.System.DNUri; targetPartUri: DDN.System.DNUri): DDN.System.DNUri;
    ///<summary>Returns the normalized form of a specified <see cref="T:System.IO.Packaging.PackagePart" />
    ///  URI. </summary>
    ///  <param name="partUri">The <see cref="T:System.IO.Packaging.PackagePart" />
    ///  URI to normalize.</param>
    ///<returns>The normalized form of the given <paramref name="partUri" />
    ///  .</returns>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="partUri" />
    ///  is <see langword="null" />
    ///  .</exception>
    {class} function GetNormalizedPartUri(partUri: DDN.System.DNUri): DDN.System.DNUri;
    ///<summary>Returns a value that indicates whether two pack URIs are equivalent.</summary>
    ///  <param name="firstPackUri">The first pack URI.</param>
    ///  <param name="secondPackUri">The second pack URI.</param>
    ///<returns>A signed integer indicating the relationship between <paramref name="firstPackUri" />
    ///  and <paramref name="secondPackUri" />
    ///  .ValueMeaningLess than 0
    ///  <paramref name="firstPackUri" />
    ///  is less than <paramref name="secondPackUri" />
    ///  .0
    ///  <paramref name="firstPackUri" />
    ///  is equivalent to <paramref name="secondPackUri" />
    ///  .Greater than 0
    ///  <paramref name="firstPackUri" />
    ///  is greater than <paramref name="secondPackUri" />
    ///  .</returns>
    ///<exception cref="T:System.ArgumentException">Either <paramref name="firstPackUri" />
    ///  or <paramref name="secondPackUri" />
    ///  is not an absolute URI.-or-Either <paramref name="firstPackUri" />
    ///  or <paramref name="secondPackUri" />
    ///  do not begin with a "pack://" scheme.</exception>
    {class} function ComparePackUri(firstPackUri: DDN.System.DNUri; secondPackUri: DDN.System.DNUri): Int32;
    ///<summary>Returns a value that indicates whether two package part URIsÂ are equivalent.</summary>
    ///  <param name="firstPartUri">The URI of the first <see cref="T:System.IO.Packaging.PackagePart" />
    ///  .</param>
    ///  <param name="secondPartUri">The URI of the second <see cref="T:System.IO.Packaging.PackagePart" />
    ///  .</param>
    ///<returns>A value that indicates the relationship between <paramref name="firstPartUri" />
    ///  and <paramref name="secondPartUri" />
    ///  .ValueMeaningLess than 0
    ///  <paramref name="firstPartUri" />
    ///  is less than <paramref name="secondPartUri" />
    ///  .0
    ///  <paramref name="firstPartUri" />
    ///  is equivalent to <paramref name="secondPartUri" />
    ///  .Greater than 0
    ///  <paramref name="firstPartUri" />
    ///  is greater than <paramref name="secondPartUri" />
    ///  .</returns>
    ///<exception cref="T:System.ArgumentException"><paramref name="firstPartUri" />
    ///  or <paramref name="secondPartUri" />
    ///  is not a valid part URI syntax.</exception>
    {class} function ComparePartUri(firstPartUri: DDN.System.DNUri; secondPartUri: DDN.System.DNUri): Int32;
    ///<summary>Returns a value that indicates whether a specified URI is the URI of a <see cref="T:System.IO.Packaging.PackageRelationship" />
    ///  part.</summary>
    ///  <param name="partUri">The URI to check for a <see cref="T:System.IO.Packaging.PackageRelationship" />
    ///  part.</param>
    ///<returns><see langword="true" />
    ///  if <paramref name="partUri" />
    ///  identifies a <see cref="T:System.IO.Packaging.PackageRelationship" />
    ///  part; otherwise, <see langword="false" />
    ///  .</returns>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="partUri" />
    ///  is <see langword="null" />
    ///  .</exception><exception cref="T:System.ArgumentException"><paramref name="partUri" />
    ///  is an absolute URI.-or-
    ///  <paramref name="partUri" />
    ///  is an invalid <see cref="T:System.IO.Packaging.PackagePart" />
    ///  syntax.</exception>
    {class} function IsRelationshipPartUri(partUri: DDN.System.DNUri): Boolean;
    ///<summary>Returns the URIÂ of the relationship part associated with a specifiedÂ <see cref="T:System.IO.Packaging.PackagePart" />
    ///  .</summary>
    ///  <param name="partUri">The <see cref="P:System.IO.Packaging.PackagePart.Uri" />
    ///  of the <see cref="T:System.IO.Packaging.PackagePart" />
    ///  to return the URI for the associated <see cref="T:System.IO.Packaging.PackageRelationship" />
    ///  .</param>
    ///<returns>The URI of the <see cref="T:System.IO.Packaging.PackageRelationship" />
    ///  part associated with the <see cref="T:System.IO.Packaging.PackagePart" />
    ///  identified by <paramref name="partUri" />
    ///  .</returns>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="partUri" />
    ///  is <see langword="null" />
    ///  .</exception><exception cref="T:System.ArgumentException"><paramref name="partUri" />
    ///  syntax is not valid for a package part URI.-or-
    ///  <paramref name="partUri" />
    ///  is an absolute URI.-or-
    ///  <paramref name="partUri" />
    ///  references a relationship part.</exception>
    {class} function GetRelationshipPartUri(partUri: DDN.System.DNUri): DDN.System.DNUri;
    ///<summary>Returns the <see cref="P:System.IO.Packaging.PackageRelationship.SourceUri" />
    ///  from the <see cref="T:System.IO.Packaging.PackageRelationship" />
    ///  with a specified URI.</summary>
    ///  <param name="relationshipPartUri">The URI of the relationship part to return the <see cref="P:System.IO.Packaging.PackageRelationship.SourceUri" />
    ///  from.</param>
    ///<returns>The <see cref="P:System.IO.Packaging.PackageRelationship.SourceUri" />
    ///  of the <see cref="T:System.IO.Packaging.PackagePart" />
    ///  from the relationship with the specified <paramref name="relationshipPartUri" />
    ///  .</returns>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="relationshipPartUri" />
    ///  is <see langword="null" />
    ///  .</exception><exception cref="T:System.ArgumentException"><paramref name="relationshipPartUri" />
    ///  is an absolute URI.-or-
    ///  <paramref name="relationshipPartUri" />
    ///  syntax is not valid for a <see cref="T:System.IO.Packaging.PackagePart" />
    ///  .-or-
    ///  <paramref name="relationshipPartUri" />
    ///  does not reference a relationship part.-or-The <see cref="P:System.IO.Packaging.PackageRelationship.SourceUri" />
    ///  of the relationship part references another relationship part (not valid, see Remarks).</exception>
    {class} function GetSourcePartUriFromRelationshipPartUri(relationshipPartUri: DDN.System.DNUri): DDN.System.DNUri;

  end;

  ///<summary>Provides utility methods to compose and parse pack URI objects.</summary>
  [DNTypeName('System.IO.Packaging.PackUriHelper')]
  DNPackUriHelper = interface(DDN.mscorlib.DNObject)
  ['{8186724F-86EF-305F-999A-905EBB4E9BB8}']
  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNPackUriHelper = class(TDNGenericImport<DNPackUriHelperClass, DNPackUriHelper>) end;

  //-------------namespace: System.IO.Packaging----------------
  DNRightsManagementInformationClass = interface(DDN.mscorlib.DNObjectClass)
  ['{79B2FC96-3D01-5351-B4E4-4FD90317D246}']
  end;

  ///<summary>Represents Digital Rights Management (DRM) information that is stored in an <see cref="T:System.IO.Packaging.EncryptedPackageEnvelope" />
  ///  .</summary>
  [DNTypeName('System.IO.Packaging.RightsManagementInformation')]
  DNRightsManagementInformation = interface(DDN.mscorlib.DNObject)
  ['{63F0104C-046C-313E-8824-32B114EB8582}']
  { getters & setters } 

    function get_CryptoProvider: DNCryptoProvider;
    procedure set_CryptoProvider(value: DNCryptoProvider);

  { methods } 

    ///<summary>Returns the embedded <see cref="T:System.Security.RightsManagement.PublishLicense" />
    ///  from the encrypted rights management data stream.</summary>
    ///<returns>The embedded <see cref="T:System.Security.RightsManagement.PublishLicense" />
    ///  ; or <see langword="null" />
    ///  , if the package does not contain a <see cref="T:System.Security.RightsManagement.PublishLicense" />
    ///  .</returns>
    ///<exception cref="T:System.IO.FileFormatException">The rights management information in this package cannot be read by the current version of this class.</exception>
    function LoadPublishLicense: DNPublishLicense;
    ///<summary>Saves a given <see cref="T:System.Security.RightsManagement.PublishLicense" />
    ///  to the encrypted rights management data stream.</summary>
    ///  <param name="publishLicense">The publish license to store and embed in the package.</param>
    ///<exception cref="T:System.ArgumentNullException">The <paramref name="publishLicense" />
    ///  parameter is <see langword="null" />
    ///  .</exception><exception cref="T:System.IO.FileFormatException">The rights management information in this package cannot be read by the current version of this class.</exception>
    procedure SavePublishLicense(publishLicense: DNPublishLicense);
    ///<summary>Returns a specified user's embedded <see cref="T:System.Security.RightsManagement.UseLicense" />
    ///  from the encrypted rights management data stream.</summary>
    ///  <param name="userKey">The user or user group to return the <see cref="T:System.Security.RightsManagement.UseLicense" />
    ///  for.</param>
    ///<returns>The <see cref="T:System.Security.RightsManagement.UseLicense" />
    ///  for the specified user; or <see langword="null" />
    ///  , if the package does not contain a <see cref="T:System.Security.RightsManagement.UseLicense" />
    ///  that matches the given <paramref name="userKey" />
    ///  .</returns>
    ///<exception cref="T:System.ArgumentNullException">The <paramref name="userKey" />
    ///  parameter is <see langword="null" />
    ///  .</exception><exception cref="T:System.IO.FileFormatException">The rights management information in this package cannot be read by the current version of this class.</exception>
    function LoadUseLicense(userKey: DNContentUser): DNUseLicense;
    ///<summary>Saves a given <see cref="T:System.Security.RightsManagement.UseLicense" />
    ///  for a specified user to the encrypted rights management data stream.</summary>
    ///  <param name="userKey">The user of the <see cref="T:System.Security.RightsManagement.UseLicense" />
    ///  .</param>
    ///  <param name="useLicense">The use license to store and embed in the package.</param>
    ///<exception cref="T:System.ArgumentNullException">Either the <paramref name="userKey" />
    ///  or <paramref name="useLicense" />
    ///  parameter is <see langword="null" />
    ///  .</exception><exception cref="T:System.IO.FileFormatException">The rights management information in this package cannot be read by the current version of this class.</exception>
    procedure SaveUseLicense(userKey: DNContentUser; useLicense: DNUseLicense);
    ///<summary>Deletes the <see cref="T:System.Security.RightsManagement.UseLicense" />
    ///  for a specified user from the encrypted rights management data stream.</summary>
    ///  <param name="userKey">The user of the <see cref="T:System.Security.RightsManagement.UseLicense" />
    ///  to be deleted.</param>
    procedure DeleteUseLicense(userKey: DNContentUser);
    ///<summary>Returns a dictionary collection of user and <see cref="T:System.Security.RightsManagement.UseLicense" />
    ///  key/value pairs from the encrypted rights management data stream.</summary>
    ///<returns>A collection of user and <see cref="T:System.Security.RightsManagement.UseLicense" />
    ///  key/value pairs that are contained in the rights managed protected package.</returns>
    function GetEmbeddedUseLicenses: DDN.mscorlib.DNIDictionary<DNContentUser, DNUseLicense>;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>Gets or sets the <see cref="T:System.Security.RightsManagement.CryptoProvider" />
    ///  for accessing the package's encrypted rights management data stream.</summary>
    ///<returns>The <see cref="T:System.Security.RightsManagement.CryptoProvider" />
    ///  for accessing the rights management information.</returns>
    property CryptoProvider: DNCryptoProvider read get_CryptoProvider write set_CryptoProvider;
  end;

  TDNRightsManagementInformation = class(TDNGenericImport<DNRightsManagementInformationClass, DNRightsManagementInformation>) end;

  //-------------namespace: System.IO.Packaging----------------
  DNStorageInfoClass = interface(DDN.mscorlib.DNObjectClass)
  ['{08D58140-3E93-5327-95F4-5BFBB8C4E6C3}']
  end;

  ///<summary>Provides access and information for manipulating data stores in a <see cref="T:System.IO.Packaging.Package" />
  ///  .  </summary>
  [DNTypeName('System.IO.Packaging.StorageInfo')]
  DNStorageInfo = interface(DDN.mscorlib.DNObject)
  ['{D838A82C-3F5E-3B6B-BB29-8A4F306F93C2}']
  { getters & setters } 

    function get_Name: string;

  { methods } 

    ///<summary>Creates a new stream with a given name.</summary>
    ///  <param name="name">The name for the new stream.</param>
    ///<returns>The new stream with the specified <paramref name="name" />
    ///  .</returns>
    function CreateStream(name: string): DNStreamInfo; overload;
    ///<summary>Returns the <see cref="T:System.IO.Packaging.StreamInfo" />
    ///  instance with the given name.</summary>
    ///  <param name="name">The name of the <see cref="T:System.IO.Packaging.StreamInfo" />
    ///  instance to return.</param>
    ///<returns>The stream with the specified <paramref name="name" />
    ///  .</returns>
    ///<exception cref="T:System.ArgumentNullException">The <paramref name="name" />
    ///  parameter is <see langword="null" />
    ///  .</exception>
    function GetStreamInfo(name: string): DNStreamInfo;
    ///<summary>Returns a value that indicates whether a given stream exists.</summary>
    ///  <param name="name">The <see cref="T:System.IO.Packaging.StreamInfo" />
    ///  name to check for.</param>
    ///<returns><see langword="true" />
    ///  if a stream with the specified <paramref name="name" />
    ///  exists; otherwise, <see langword="false" />
    ///  .</returns>
    function StreamExists(name: string): Boolean;
    ///<summary>Deletes the stream with a specified name. </summary>
    ///  <param name="name">The <see cref="T:System.IO.Packaging.StreamInfo" />
    ///  name of the stream to delete.</param>
    ///<exception cref="T:System.ArgumentNullException">The <paramref name="name" />
    ///  parameter is <see langword="null" />
    ///  .</exception>
    procedure DeleteStream(name: string);
    ///<summary>Creates a new childÂ <see cref="T:System.IO.Packaging.StorageInfo" />
    ///  with this <see cref="T:System.IO.Packaging.StorageInfo" />
    ///  as the parent.</summary>
    ///  <param name="name">The name for the new child data store.</param>
    ///<returns>The new child data store.</returns>
    ///<exception cref="T:System.ArgumentNullException">The <paramref name="name" />
    ///  parameter is <see langword="null" />
    ///  .</exception>
    function CreateSubStorage(name: string): DNStorageInfo;
    ///<summary>Returns the child sub-store with a given name.</summary>
    ///  <param name="name">The name of the sub-store to return.</param>
    ///<returns>The child sub-store with the specified <paramref name="name" />
    ///  .</returns>
    ///<exception cref="T:System.ArgumentNullException">The <paramref name="name" />
    ///  parameter is <see langword="null" />
    ///  .</exception>
    function GetSubStorageInfo(name: string): DNStorageInfo;
    ///<summary>Returns a value that indicates whether a given child sub-store exists.</summary>
    ///  <param name="name">The child <see cref="T:System.IO.Packaging.StorageInfo" />
    ///  name to check for.</param>
    ///<returns><see langword="true" />
    ///  if a child sub-store with the specified <paramref name="name" />
    ///  exists; otherwise, <see langword="false" />
    ///  .</returns>
    function SubStorageExists(name: string): Boolean;
    ///<summary>Deletes a specified sub-store.</summary>
    ///  <param name="name">The name of the sub-store to delete.</param>
    ///<exception cref="T:System.ArgumentNullException">The <paramref name="name" />
    ///  parameter is <see langword="null" />
    ///  .</exception>
    procedure DeleteSubStorage(name: string);
    ///<summary>Returns an array of the <see cref="T:System.IO.Packaging.StreamInfo" />
    ///  instances that are currently contained in this store.</summary>
    ///<returns>An array of the <see cref="T:System.IO.Packaging.StreamInfo" />
    ///  objects, each pointing to an I/O steam defined within this store.</returns>
    function GetStreams: TArray<DNStreamInfo>;
    ///<summary>Returns an array of the child sub-stores that are currently contained in this store.</summary>
    ///<returns>An array of <see cref="T:System.IO.Packaging.StorageInfo" />
    ///  objects, each pointing to a sub-store defined within this store.</returns>
    function GetSubStorages: TArray<DNStorageInfo>;
    ///<summary>Creates a new stream with a given name, <see cref="T:System.IO.Packaging.CompressionOption" />
    ///  , and <see cref="T:System.IO.Packaging.EncryptionOption" />
    ///  .</summary>
    ///  <param name="name">The name for the new stream.</param>
    ///  <param name="compressionOption">The compression option for the data stream.</param>
    ///  <param name="encryptionOption">The encryption option for the data stream.</param>
    ///<returns>The new stream with the specified <paramref name="name" />
    ///  , <paramref name="compressionOption" />
    ///  , and <paramref name="encryptionOption" />
    ///  .</returns>
    function CreateStream(name: string; compressionOption: DNCompressionOption; encryptionOption: DNEncryptionOption): DNStreamInfo; overload;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>Gets the name of the store.</summary>
    ///<returns>The name of this store.</returns>
    property Name: string read get_Name;
  end;

  TDNStorageInfo = class(TDNGenericImport<DNStorageInfoClass, DNStorageInfo>) end;

  //-------------namespace: System.IO.Packaging----------------
  DNStreamInfoClass = interface(DDN.mscorlib.DNObjectClass)
  ['{B1E8A613-6F89-5E29-909B-2483843F033D}']
  end;

  ///<summary>Provides access and information for manipulating I/O streams within a <see cref="T:System.IO.Packaging.Package" />
  ///  .  </summary>
  [DNTypeName('System.IO.Packaging.StreamInfo')]
  DNStreamInfo = interface(DDN.mscorlib.DNObject)
  ['{AD86EFB5-F2C5-3235-8D98-02C3A16B9EE4}']
  { getters & setters } 

    function get_CompressionOption: DNCompressionOption;
    function get_EncryptionOption: DNEncryptionOption;
    function get_Name: string;

  { methods } 

    ///<summary>Returns a stream opened in a default <see cref="T:System.IO.FileMode" />
    ///  and <see cref="T:System.IO.FileAccess" />
    ///  .</summary>
    ///<returns>The I/O stream opened in a default <see cref="T:System.IO.Packaging.Package" />
    ///  root <see cref="T:System.IO.FileMode" />
    ///  and <see cref="T:System.IO.FileAccess" />
    ///  ..</returns>
    function GetStream: DDN.mscorlib.DNStream; overload;
    ///<summary>Returns an I/O stream opened in a specified <see cref="T:System.IO.FileMode" />
    ///  .</summary>
    ///  <param name="mode">The file mode in which to open the stream.</param>
    ///<returns>The stream opened in the specified file <paramref name="mode" />
    ///  .</returns>
    function GetStream(mode: DDN.mscorlib.DNFileMode): DDN.mscorlib.DNStream; overload;
    ///<summary>Returns an I/O stream opened in a specified <see cref="T:System.IO.FileMode" />
    ///  and with a given <see cref="T:System.IO.FileAccess" />
    ///  .</summary>
    ///  <param name="mode">The file mode in which to open the stream.</param>
    ///  <param name="access">The file access mode in which to read or write to the stream.</param>
    ///<returns>The I/O stream opened in the specified <see cref="T:System.IO.FileMode" />
    ///  and with a given <see cref="T:System.IO.FileAccess" />
    ///  .</returns>
    function GetStream(mode: DDN.mscorlib.DNFileMode; access: DDN.mscorlib.DNFileAccess): DDN.mscorlib.DNStream; overload;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>Gets the <see cref="T:System.IO.Packaging.CompressionOption" />
    ///  setting for the stream.</summary>
    ///<returns>The compression option setting for the package stream.</returns>
    property CompressionOption: DNCompressionOption read get_CompressionOption;
    ///<summary>Gets the <see cref="T:System.IO.Packaging.EncryptionOption" />
    ///  setting for the stream.</summary>
    ///<returns>The encryption option setting for the package stream.</returns>
    property EncryptionOption: DNEncryptionOption read get_EncryptionOption;
    ///<summary>Gets the name of the stream.</summary>
    ///<returns>The name of this stream.</returns>
    property Name: string read get_Name;
  end;

  TDNStreamInfo = class(TDNGenericImport<DNStreamInfoClass, DNStreamInfo>) end;

  //-------------namespace: System.Security.Permissions----------------
  DNMediaPermissionClass = interface(DDN.mscorlib.DNCodeAccessPermissionClass)
  ['{514A6564-4F97-54A9-B4A3-1C05472003A4}']
  { constructors } 

    ///<summary>Initializes a new instance of the <see cref="T:System.Security.Permissions.MediaPermission" />
    ///  class.</summary>
    {class} function init: DNMediaPermission; overload;
    ///<summary>Initializes a new instance of the <see cref="T:System.Security.Permissions.MediaPermission" />
    ///  class by specifying a permission state.</summary>
    ///  <param name="state">An enumerated value of <see cref="T:System.Security.Permissions.PermissionState" />
    ///  .</param>
    {class} function init(state: DDN.mscorlib.DNPermissionState): DNMediaPermission; overload;
    ///<summary>Initializes a new instance of the <see cref="T:System.Security.Permissions.MediaPermission" />
    ///  class by specifying the audio permission level.</summary>
    ///  <param name="permissionAudio">An enumerated value of <see cref="T:System.Security.Permissions.MediaPermissionAudio" />
    ///  .</param>
    {class} function init(permissionAudio: DNMediaPermissionAudio): DNMediaPermission; overload;
    ///<summary>Initializes a new instance of the <see cref="T:System.Security.Permissions.MediaPermission" />
    ///  class by specifying the video permission level.</summary>
    ///  <param name="permissionVideo">An enumerated value of <see cref="T:System.Security.Permissions.MediaPermissionVideo" />
    ///  .</param>
    {class} function init(permissionVideo: DNMediaPermissionVideo): DNMediaPermission; overload;
    ///<summary>Initializes a new instance of the <see cref="T:System.Security.Permissions.MediaPermission" />
    ///  class by specifying the image permission level.</summary>
    ///  <param name="permissionImage">An enumerated value of <see cref="T:System.Security.Permissions.MediaPermissionImage" />
    ///  .</param>
    {class} function init(permissionImage: DNMediaPermissionImage): DNMediaPermission; overload;
    ///<summary>Initializes a new instance of the <see cref="T:System.Security.Permissions.MediaPermission" />
    ///  class by specifying the audio, video, and image permission levels.</summary>
    ///  <param name="permissionAudio">An enumerated value of <see cref="T:System.Security.Permissions.MediaPermissionAudio" />
    ///  .</param>
    ///  <param name="permissionVideo">An enumerated value of <see cref="T:System.Security.Permissions.MediaPermissionVideo" />
    ///  .</param>
    ///  <param name="permissionImage">An enumerated value of <see cref="T:System.Security.Permissions.MediaPermissionImage" />
    ///  .</param>
    {class} function init(permissionAudio: DNMediaPermissionAudio; permissionVideo: DNMediaPermissionVideo; permissionImage: DNMediaPermissionImage): DNMediaPermission; overload;

  end;

  ///<summary>The <see cref="T:System.Security.Permissions.MediaPermission" />
  ///  describes a set of security permissions that controls the ability for audio, image, and video media to work in a partial-trust Windows Presentation Foundation (WPF) application.</summary>
  [DNTypeName('System.Security.Permissions.MediaPermission')]
  DNMediaPermission = interface(DDN.mscorlib.DNCodeAccessPermission)
  ['{BF64F395-CD9B-345B-B4AB-7806E4CE2477}']
  { getters & setters } 

    function get_Audio: DNMediaPermissionAudio;
    function get_Video: DNMediaPermissionVideo;
    function get_Image: DNMediaPermissionImage;

  { methods } 

    ///<summary>Returns a value indicating whether the current permission is unrestricted.</summary>
    ///<returns><see langword="true" />
    ///  if the audio, image, and video permissions are all unrestricted; otherwise, <see langword="false" />
    ///  .</returns>
    function IsUnrestricted: Boolean;
    ///<summary>Determines whether the current permission is a subset of the specified permission.</summary>
    ///  <param name="target">A permission that is to be tested for the subset relationship. This permission must be of the same type as the current permission.</param>
    ///<returns><see langword="true" />
    ///  if the current permission is a subset of the specified permission; otherwise, <see langword="false" />
    ///  .</returns>
    function IsSubsetOf(target: DDN.mscorlib.DNIPermission): Boolean;
    ///<summary>Creates and returns a permission that is the intersection of the current permission and the specified permission.</summary>
    ///  <param name="target">A permission to intersect with the current permission. It must be of the same type as the current permission.</param>
    ///<returns>The intersection of two permissions is a permission that describes the state that they both describe in common. Only a demand that passes both original permissions will be valid for the intersected permission.</returns>
    function Intersect(target: DDN.mscorlib.DNIPermission): DDN.mscorlib.DNIPermission;
    ///<summary>Creates a permission that is the union of the current permission and the specified permission.</summary>
    ///  <param name="target">A permission to combine with the current permission. It must be of the same type as the current permission. </param>
    ///<returns>A new permission that represents the union of the current permission and the specified permission.</returns>
    function Union(target: DDN.mscorlib.DNIPermission): DDN.mscorlib.DNIPermission;
    ///<summary>Creates and returns an identical copy of the current permission.</summary>
    ///<returns>A copy of the current permission.</returns>
    function Copy: DDN.mscorlib.DNIPermission;
    ///<summary>Creates an XML encoding of the permission and its current state.</summary>
    ///<returns>An XML encoding of the permission, including any state information.</returns>
    function ToXml: DDN.mscorlib.DNSecurityElement;
    ///<summary>Reconstructs a permission with a specified state from an XML encoding.</summary>
    ///  <param name="securityElement">The XML encoding to use to reconstruct the permission.</param>
    procedure FromXml(securityElement: DDN.mscorlib.DNSecurityElement);
    procedure Demand;
    procedure Assert;
    procedure Deny;
    procedure PermitOnly;
    function ToString: string;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    ///<summary>Gets the current value of the audio permission level.</summary>
    ///<returns>The audio permission level.</returns>
    property Audio: DNMediaPermissionAudio read get_Audio;
    ///<summary>Gets the current value of the video permission level.</summary>
    ///<returns>The media permission level.</returns>
    property Video: DNMediaPermissionVideo read get_Video;
    ///<summary>Gets the current value of the image permission level.</summary>
    ///<returns>The image permission level.</returns>
    property Image: DNMediaPermissionImage read get_Image;
  end;

  TDNMediaPermission = class(TDNGenericImport<DNMediaPermissionClass, DNMediaPermission>) end;

  //-------------namespace: System.Security.Permissions----------------
  DNWebBrowserPermissionClass = interface(DDN.mscorlib.DNCodeAccessPermissionClass)
  ['{D1E17305-0969-5562-906E-2C30A1CDEF19}']
  { constructors } 

    ///<summary>Initializes a new instance of the <see cref="T:System.Security.Permissions.WebBrowserPermission" />
    ///  class.</summary>
    {class} function init: DNWebBrowserPermission; overload;
    ///<summary>Initializes a new instance of the <see cref="T:System.Security.Permissions.WebBrowserPermission" />
    ///  class by specifying a permission state.</summary>
    ///  <param name="state">An enumerated value of <see cref="T:System.Security.Permissions.PermissionState" />
    ///  .</param>
    {class} function init(state: DDN.mscorlib.DNPermissionState): DNWebBrowserPermission; overload;
    ///<summary>Initializes a new instance of the <see cref="T:System.Security.Permissions.WebBrowserPermission" />
    ///  class by specifying the Web browser permission level.</summary>
    ///  <param name="webBrowserPermissionLevel">An enumerated value of <see cref="T:System.Security.Permissions.WebBrowserPermissionLevel" />
    ///  .</param>
    {class} function init(webBrowserPermissionLevel: DNWebBrowserPermissionLevel): DNWebBrowserPermission; overload;

  end;

  ///<summary>The <see cref="T:System.Security.Permissions.WebBrowserPermission" />
  ///  object controls the ability to create the WebBrowser control.</summary>
  [DNTypeName('System.Security.Permissions.WebBrowserPermission')]
  DNWebBrowserPermission = interface(DDN.mscorlib.DNCodeAccessPermission)
  ['{12E97C8A-2A31-3E3E-8197-C897148A0560}']
  { getters & setters } 

    function get_Level: DNWebBrowserPermissionLevel;
    procedure set_Level(value: DNWebBrowserPermissionLevel);

  { methods } 

    ///<summary>Returns a value indicating whether the current permission is unrestricted.</summary>
    ///<returns><see langword="true" />
    ///  if the <see cref="P:System.Security.Permissions.WebBrowserPermission.Level" />
    ///  property is set to <see cref="F:System.Security.Permissions.WebBrowserPermissionLevel.Unrestricted" />
    ///  ; otherwise, <see langword="false" />
    ///  .</returns>
    function IsUnrestricted: Boolean;
    ///<summary>Determines whether the current permission is a subset of the specified permission.</summary>
    ///  <param name="target">A permission that is to be tested for the subset relationship. This permission must be of the same type as the current permission.</param>
    ///<returns><see langword="true" />
    ///  if the current permission is a subset of the specified permission; otherwise, <see langword="false" />
    ///  .</returns>
    function IsSubsetOf(target: DDN.mscorlib.DNIPermission): Boolean;
    ///<summary>Creates and returns a permission that is the intersection of the current permission and the specified permission.</summary>
    ///  <param name="target">A permission to intersect with the current permission. It must be of the same type as the current permission.</param>
    ///<returns>The intersection of two permissions is a permission that describes the state that they both describe in common. Only a demand that passes both original permissions will be valid for the intersected permission.</returns>
    function Intersect(target: DDN.mscorlib.DNIPermission): DDN.mscorlib.DNIPermission;
    ///<summary>Creates a permission that is the union of the current permission and the specified permission.</summary>
    ///  <param name="target">A permission to combine with the current permission. It must be of the same type as the current permission.</param>
    ///<returns>A new permission that represents the union of the current permission and the specified permission.</returns>
    function Union(target: DDN.mscorlib.DNIPermission): DDN.mscorlib.DNIPermission;
    ///<summary>Creates and returns an identical copy of the current permission.</summary>
    ///<returns>A copy of the current permission.</returns>
    function Copy: DDN.mscorlib.DNIPermission;
    ///<summary>Creates an XML encoding of the permission and its current state.</summary>
    ///<returns>An XML encoding of the permission, including any state information.</returns>
    function ToXml: DDN.mscorlib.DNSecurityElement;
    ///<summary>Reconstructs a permission with a specified state from an XML encoding.</summary>
    ///  <param name="securityElement">The XML encoding to use to reconstruct the permission.</param>
    procedure FromXml(securityElement: DDN.mscorlib.DNSecurityElement);
    procedure Demand;
    procedure Assert;
    procedure Deny;
    procedure PermitOnly;
    function ToString: string;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    ///<summary>Gets or sets the current value of the Web browser permission level.</summary>
    ///<returns>The current value of the Web browser permission level.</returns>
    property Level: DNWebBrowserPermissionLevel read get_Level write set_Level;
  end;

  TDNWebBrowserPermission = class(TDNGenericImport<DNWebBrowserPermissionClass, DNWebBrowserPermission>) end;

  //-------------namespace: System.Security.RightsManagement----------------
  DNContentGrantClass = interface(DDN.mscorlib.DNObjectClass)
  ['{CA5FA5CC-06C8-52C1-9146-0DC013C1B899}']
  { constructors } 

    ///<summary>Initializes a new instance of the <see cref="T:System.Security.RightsManagement.ContentGrant" />
    ///  class that grants a specified <see cref="T:System.Security.RightsManagement.ContentUser" />
    ///  a specified <see cref="T:System.Security.RightsManagement.ContentRight" />
    ///  .</summary>
    ///  <param name="user">The user the access right is granted to.</param>
    ///  <param name="right">The access right that is granted.</param>
    {class} function init(user: DNContentUser; right: DNContentRight): DNContentGrant; overload;
    ///<summary>Initializes a new instance of the <see cref="T:System.Security.RightsManagement.ContentGrant" />
    ///  class that grants a specified <see cref="T:System.Security.RightsManagement.ContentUser" />
    ///  a specified <see cref="T:System.Security.RightsManagement.ContentRight" />
    ///  for a specified <see cref="T:System.DateTime" />
    ///  duration.</summary>
    ///  <param name="user">The user the access right is granted to.</param>
    ///  <param name="right">The access right that is granted.</param>
    ///  <param name="validFrom">The starting date and time that the right begins.</param>
    ///  <param name="validUntil">The ending date and time that the right expires.</param>
    {class} function init(user: DNContentUser; right: DNContentRight; validFrom: DDN.mscorlib.DNDateTime; validUntil: DDN.mscorlib.DNDateTime): DNContentGrant; overload;

  end;

  ///<summary>Represents a right granted to a user to access information in a rights managed document.</summary>
  [DNTypeName('System.Security.RightsManagement.ContentGrant')]
  DNContentGrant = interface(DDN.mscorlib.DNObject)
  ['{FEC5B4F1-77B9-3A77-82B0-53C420B26E5D}']
  { getters & setters } 

    function get_User: DNContentUser;
    function get_Right: DNContentRight;
    function get_ValidFrom: DDN.mscorlib.DNDateTime;
    function get_ValidUntil: DDN.mscorlib.DNDateTime;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>Gets the user who is granted the access <see cref="P:System.Security.RightsManagement.ContentGrant.Right" />
    ///  .</summary>
    ///<returns>The user that the access <see cref="P:System.Security.RightsManagement.ContentGrant.Right" />
    ///  is granted to, as specified to the <see cref="M:System.Security.RightsManagement.ContentGrant.#ctor(System.Security.RightsManagement.ContentUser,System.Security.RightsManagement.ContentRight)" />
    ///  constructor.</returns>
    property User: DNContentUser read get_User;
    ///<summary>Gets the <see cref="T:System.Security.RightsManagement.ContentRight" />
    ///  that is granted.</summary>
    ///<returns>The access right that is granted to the <see cref="P:System.Security.RightsManagement.ContentGrant.User" />
    ///  , as specified to the <see cref="M:System.Security.RightsManagement.ContentGrant.#ctor(System.Security.RightsManagement.ContentUser,System.Security.RightsManagement.ContentRight)" />
    ///  constructor.</returns>
    property Right: DNContentRight read get_Right;
    ///<summary>Gets the starting date and time that the granted <see cref="P:System.Security.RightsManagement.ContentGrant.Right" />
    ///  begins.</summary>
    ///<returns>The start date and time that the granted <see cref="P:System.Security.RightsManagement.ContentGrant.Right" />
    ///  begins, or <see cref="T:System.DateTime" />
    ///  .<see cref="F:System.DateTime.MinValue" />
    ///  if there is there is no starting limitation.</returns>
    property ValidFrom: DDN.mscorlib.DNDateTime read get_ValidFrom;
    ///<summary>Gets the ending date and time that the granted <see cref="P:System.Security.RightsManagement.ContentGrant.Right" />
    ///  expires.</summary>
    ///<returns>The end date and time that the granted <see cref="P:System.Security.RightsManagement.ContentGrant.Right" />
    ///  expires, or <see cref="T:System.DateTime" />
    ///  .<see cref="F:System.DateTime.MaxValue" />
    ///  if there is no ending limitation.</returns>
    property ValidUntil: DDN.mscorlib.DNDateTime read get_ValidUntil;
  end;

  TDNContentGrant = class(TDNGenericImport<DNContentGrantClass, DNContentGrant>) end;

  //-------------namespace: System.Security.RightsManagement----------------
  DNContentUserClass = interface(DDN.mscorlib.DNObjectClass)
  ['{FC885AF0-5B9D-5256-BA83-D8C96EEEB5FA}']
  { static getter & setter } 

    {class} function get_AnyoneUser: DNContentUser;
    {class} function get_OwnerUser: DNContentUser;

  { constructors } 

    ///<summary>Initializes a new instance of the <see cref="T:System.Security.RightsManagement.ContentUser" />
    ///  class.</summary>
    ///  <param name="name">The user or group name.</param>
    ///  <param name="authenticationType">The method for authentication.</param>
    {class} function init(name: string; authenticationType: DNAuthenticationType): DNContentUser;

  { static propertys } 

    ///<summary>Gets an instance of the "Anyone" <see cref="T:System.Security.RightsManagement.ContentUser" />
    ///  persona.</summary>
    ///<returns>An instance of the "Anyone" <see cref="T:System.Security.RightsManagement.ContentUser" />
    ///  persona.</returns>
    {class} property AnyoneUser: DNContentUser read get_AnyoneUser;
    ///<summary>Gets an instance of the "Owner" <see cref="T:System.Security.RightsManagement.ContentUser" />
    ///  persona.</summary>
    ///<returns>An instance of the "Owner" <see cref="T:System.Security.RightsManagement.ContentUser" />
    ///  persona.</returns>
    {class} property OwnerUser: DNContentUser read get_OwnerUser;
  end;

  ///<summary>Represents a user or user-group for granting access to rights managed content.  </summary>
  [DNTypeName('System.Security.RightsManagement.ContentUser')]
  DNContentUser = interface(DDN.mscorlib.DNObject)
  ['{EC2247A2-538F-3A09-9E3C-C00F06F62B4F}']
  { getters & setters } 

    function get_AuthenticationType: DNAuthenticationType;
    function get_Name: string;

  { methods } 

    ///<summary>Returns a value that indicates whether the user is currently authenticated.</summary>
    ///<returns><see langword="true" />
    ///  if the user is currently authenticated; otherwise, <see langword="false" />
    ///  .  The default is <see langword="false" />
    ///  until authenticated.</returns>
    function IsAuthenticated: Boolean;
    ///<summary>Returns a value that indicates whether this <see cref="T:System.Security.RightsManagement.ContentUser" />
    ///  is equivalent to another given instance.</summary>
    ///  <param name="obj">The user instance to compare for equality.</param>
    ///<returns><see langword="true" />
    ///  if <see cref="P:System.Security.RightsManagement.ContentUser.Name" />
    ///  and <see cref="P:System.Security.RightsManagement.ContentUser.AuthenticationType" />
    ///  are the same for both this user and the given user; otherwise, <see langword="false" />
    ///  .</returns>
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    ///<summary>Returns a computed hash code based on the user <see cref="P:System.Security.RightsManagement.ContentUser.Name" />
    ///  and <see cref="P:System.Security.RightsManagement.ContentUser.AuthenticationType" />
    ///  .</summary>
    ///<returns>A hash code computed from the user <see cref="P:System.Security.RightsManagement.ContentUser.Name" />
    ///  and <see cref="P:System.Security.RightsManagement.ContentUser.AuthenticationType" />
    ///  .</returns>
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>Gets the <see cref="T:System.Security.RightsManagement.AuthenticationType" />
    ///  specified to the <see cref="M:System.Security.RightsManagement.ContentUser.#ctor(System.String,System.Security.RightsManagement.AuthenticationType)" />
    ///  constructor.</summary>
    ///<returns>The <see cref="T:System.Security.RightsManagement.AuthenticationType" />
    ///  specified to the <see cref="M:System.Security.RightsManagement.ContentUser.#ctor(System.String,System.Security.RightsManagement.AuthenticationType)" />
    ///  constructor.</returns>
    property AuthenticationType: DNAuthenticationType read get_AuthenticationType;
    ///<summary>Gets the user or group name specified to the <see cref="M:System.Security.RightsManagement.ContentUser.#ctor(System.String,System.Security.RightsManagement.AuthenticationType)" />
    ///  constructor.</summary>
    ///<returns>The user or group name specified to the <see cref="M:System.Security.RightsManagement.ContentUser.#ctor(System.String,System.Security.RightsManagement.AuthenticationType)" />
    ///  constructor.</returns>
    property Name: string read get_Name;
  end;

  TDNContentUser = class(TDNGenericImport<DNContentUserClass, DNContentUser>) end;

  //-------------namespace: System.Security.RightsManagement----------------
  DNCryptoProviderClass = interface(DNObjectClass)
  ['{1F644620-16FD-5451-B6FA-13B8BF0F0AAB}']
  end;

  ///<summary>Provides digital rights management services for encrypting and decrypting protected content. </summary>
  [DNTypeName('System.Security.RightsManagement.CryptoProvider')]
  DNCryptoProvider = interface(DDN.mscorlib.DNIDisposable)
  ['{4C06B4D4-30CE-3C8F-8769-965C283CDD79}']
  { getters & setters } 

    function get_BlockSize: Int32;
    function get_CanMergeBlocks: Boolean;
    function get_BoundGrants: DDN.mscorlib.DNReadOnlyCollection<DNContentGrant>;
    function get_CanEncrypt: Boolean;
    function get_CanDecrypt: Boolean;

  { methods } 

    ///<summary>Releases all resources used by the <see cref="T:System.Security.RightsManagement.CryptoProvider" />
    ///  . </summary>
    procedure Dispose;
    ///<summary>Encrypts clear text to cipher text. </summary>
    ///  <param name="clearText">The clear text content to encrypt.</param>
    ///<returns>Encrypted cipher text of the given <paramref name="clearText" />
    ///  .</returns>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="clearText" />
    ///  is null.</exception><exception cref="T:System.Security.RightsManagement.RightsManagementException">Encryption is not permitted.</exception>
    function Encrypt(clearText: TArray<Byte>): TArray<Byte>;
    ///<summary>Decrypts cipher text to clear text. </summary>
    ///  <param name="cryptoText">The cipher text to decrypt.</param>
    ///<returns>The decrypted clear text of <paramref name="cryptoText" />
    ///  .</returns>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="cipherText" />
    ///  is null.</exception><exception cref="T:System.Security.RightsManagement.RightsManagementException">Decryption right not granted.</exception>
    function Decrypt(cryptoText: TArray<Byte>): TArray<Byte>;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>Gets the cipher block size, in bytes. </summary>
    ///<returns>The cipher block size, in bytes.  The default block size for Advanced Encryption Standard (AES) is 8.</returns>
    property BlockSize: Int32 read get_BlockSize;
    ///<summary>Gets a value that indicates whether <see cref="M:System.Security.RightsManagement.CryptoProvider.Encrypt(System.Byte[])" />
    ///  and <see cref="M:System.Security.RightsManagement.CryptoProvider.Decrypt(System.Byte[])" />
    ///  can accept buffers that are different block sizes in length.</summary>
    ///<returns>
    ///  true if the buffer passed to <see cref="M:System.Security.RightsManagement.CryptoProvider.Encrypt(System.Byte[])" />
    ///  can be a different length from the buffer passed to <see cref="M:System.Security.RightsManagement.CryptoProvider.Decrypt(System.Byte[])" />
    ///  ; otherwise, false if the buffers passed to <see cref="M:System.Security.RightsManagement.CryptoProvider.Encrypt(System.Byte[])" />
    ///  and <see cref="M:System.Security.RightsManagement.CryptoProvider.Decrypt(System.Byte[])" />
    ///  must be the exact same length.  For Advanced Encryption Standard (AES) the default is true.</returns>
    property CanMergeBlocks: Boolean read get_CanMergeBlocks;
    ///<summary>Gets a collection listing the rights that passed verification and that are granted to the user.</summary>
    ///<returns>A collection enumerating the rights that passed verification and that are granted to the user.</returns>
    property BoundGrants: DDN.mscorlib.DNReadOnlyCollection<DNContentGrant> read get_BoundGrants;
    ///<summary>Gets a value that indicates whether the user has rights to encrypt. </summary>
    ///<returns>
    ///  true if the <see cref="T:System.Security.RightsManagement.UseLicense" />
    ///  grants the user rights to encrypt; otherwise, false.</returns>
    property CanEncrypt: Boolean read get_CanEncrypt;
    ///<summary>Gets a value that indicates whether the user has rights to decrypt. </summary>
    ///<returns>
    ///  true if the <see cref="T:System.Security.RightsManagement.UseLicense" />
    ///  grants the user rights to decrypt; otherwise, false.</returns>
    property CanDecrypt: Boolean read get_CanDecrypt;
  end;

  TDNCryptoProvider = class(TDNGenericImport<DNCryptoProviderClass, DNCryptoProvider>) end;

  //-------------namespace: System.Security.RightsManagement----------------
  DNLocalizedNameDescriptionPairClass = interface(DDN.mscorlib.DNObjectClass)
  ['{8C7A365B-7FC1-5A72-B910-FA94FE618B53}']
  { constructors } 

    ///<summary>Initializes a new instance of the <see cref="T:System.Security.RightsManagement.LocalizedNameDescriptionPair" />
    ///  class.</summary>
    ///  <param name="name">The value for the locale <see cref="P:System.Security.RightsManagement.LocalizedNameDescriptionPair.Name" />
    ///  property.</param>
    ///  <param name="description">The value for the locale <see cref="P:System.Security.RightsManagement.LocalizedNameDescriptionPair.Description" />
    ///  property.</param>
    ///<exception cref="T:System.ArgumentNullException">Either the <paramref name="name" />
    ///  parameter or <paramref name="description" />
    ///  parameter is <see langword="null" />
    ///  .</exception>
    {class} function init(name: string; description: string): DNLocalizedNameDescriptionPair;

  end;

  ///<summary>Represents an immutable (read-only) pair of "Name" and "Description" strings.  </summary>
  [DNTypeName('System.Security.RightsManagement.LocalizedNameDescriptionPair')]
  DNLocalizedNameDescriptionPair = interface(DDN.mscorlib.DNObject)
  ['{56509365-E88F-3269-A37B-6B3FAD16BD20}']
  { getters & setters } 

    function get_Name: string;
    function get_Description: string;

  { methods } 

    ///<summary>Indicates whether the <see cref="P:System.Security.RightsManagement.LocalizedNameDescriptionPair.Name" />
    ///  and <see cref="P:System.Security.RightsManagement.LocalizedNameDescriptionPair.Description" />
    ///  properties of a given object match those of this <see cref="T:System.Security.RightsManagement.LocalizedNameDescriptionPair" />
    ///  .</summary>
    ///  <param name="obj">The object to compare the <see cref="P:System.Security.RightsManagement.LocalizedNameDescriptionPair.Name" />
    ///  and <see cref="P:System.Security.RightsManagement.LocalizedNameDescriptionPair.Description" />
    ///  properties of.</param>
    ///<returns><see langword="true" />
    ///  if the <see cref="P:System.Security.RightsManagement.LocalizedNameDescriptionPair.Name" />
    ///  and <see cref="P:System.Security.RightsManagement.LocalizedNameDescriptionPair.Description" />
    ///  properties of the given object match those of this instance; otherwise, <see langword="false" />
    ///  .</returns>
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    ///<summary>Gets a computed hash code based on the <see cref="P:System.Security.RightsManagement.LocalizedNameDescriptionPair.Name" />
    ///  and <see cref="P:System.Security.RightsManagement.LocalizedNameDescriptionPair.Description" />
    ///  properties.</summary>
    ///<returns>A computed hash code based on the <see cref="P:System.Security.RightsManagement.LocalizedNameDescriptionPair.Name" />
    ///  and <see cref="P:System.Security.RightsManagement.LocalizedNameDescriptionPair.Description" />
    ///  properties of this <see cref="T:System.Security.RightsManagement.LocalizedNameDescriptionPair" />
    ///  .</returns>
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>Gets the locale name.</summary>
    ///<returns>The locale name.</returns>
    property Name: string read get_Name;
    ///<summary>Gets the locale description.</summary>
    ///<returns>The locale description.</returns>
    property Description: string read get_Description;
  end;

  TDNLocalizedNameDescriptionPair = class(TDNGenericImport<DNLocalizedNameDescriptionPairClass, DNLocalizedNameDescriptionPair>) end;

  //-------------namespace: System.Security.RightsManagement----------------
  DNPublishLicenseClass = interface(DDN.mscorlib.DNObjectClass)
  ['{6572480A-1B8D-518C-AEEE-F29C62E90E96}']
  { constructors } 

    ///<summary>Initializes a new instance of the <see cref="T:System.Security.RightsManagement.PublishLicense" />
    ///  class from a specified serialized and signed <see cref="T:System.Security.RightsManagement.PublishLicense" />
    ///  .</summary>
    ///  <param name="signedPublishLicense">A signed and serialized publish license.</param>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="signedPublishLicense" />
    ///  is <see langword="null" />
    ///  .</exception><exception cref="T:System.Security.RightsManagement.RightsManagementException">The license is invalid.</exception>
    {class} function init(signedPublishLicense: string): DNPublishLicense;

  end;

  ///<summary>Represents a signed rights managed publish license.</summary>
  [DNTypeName('System.Security.RightsManagement.PublishLicense')]
  DNPublishLicense = interface(DDN.mscorlib.DNObject)
  ['{78DD373F-97ED-390C-A6F4-4E46E480B1C2}']
  { getters & setters } 

    function get_ReferralInfoName: string;
    function get_ReferralInfoUri: DDN.System.DNUri;
    function get_ContentId: DDN.mscorlib.DNGuid;
    function get_UseLicenseAcquisitionUrl: DDN.System.DNUri;

  { methods } 

    ///<summary>Returns a decrypted <see cref="T:System.Security.RightsManagement.UnsignedPublishLicense" />
    ///  version of this signed <see cref="T:System.Security.RightsManagement.PublishLicense" />
    ///  .</summary>
    ///  <param name="cryptoProvider">The rights management service to use for decrypting the license.</param>
    ///<returns>A decrypted, unsigned version of this license.</returns>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="cryptoProvider" />
    ///  is <see langword="null" />
    ///  .</exception>
    function DecryptUnsignedPublishLicense(cryptoProvider: DNCryptoProvider): DNUnsignedPublishLicense;
    ///<summary>Returns the serialized XrMLÂ string that wasÂ used to create this license.</summary>
    ///<returns>The serializedÂ Extensible Rights Markup Language (XrML) string that wasÂ used to create this license.</returns>
    function ToString: string;
    ///<summary>Attempts to acquire a <see cref="T:System.Security.RightsManagement.UseLicense" />
    ///  for a user or user group in a specified <see cref="T:System.Security.RightsManagement.SecureEnvironment" />
    ///  .</summary>
    ///  <param name="secureEnvironment">The secure environment for license activation and binding.</param>
    ///<returns>The <see cref="T:System.Security.RightsManagement.UseLicense" />
    ///  for a user or user group in the specified <paramref name="secureEnvironment" />
    ///  .</returns>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="secureEnvironment" />
    ///  is <see langword="null" />
    ///  .</exception><exception cref="T:System.Security.RightsManagement.RightsManagementException">The authentication failed.</exception>
    function AcquireUseLicense(secureEnvironment: DNSecureEnvironment): DNUseLicense;
    ///<summary>Attempts to acquire a <see cref="T:System.Security.RightsManagement.UseLicense" />
    ///  for a user or user group in a specified <see cref="T:System.Security.RightsManagement.SecureEnvironment" />
    ///  .</summary>
    ///  <param name="secureEnvironment">The secure environment for license activation and binding.</param>
    ///<returns>The <see cref="T:System.Security.RightsManagement.UseLicense" />
    ///  for a user or user group in the specified <paramref name="secureEnvironment" />
    ///  .</returns>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="secureEnvironment" />
    ///  is <see langword="null" />
    ///  .</exception><exception cref="T:System.Security.RightsManagement.RightsManagementException">The authentication failed.</exception>
    function AcquireUseLicenseNoUI(secureEnvironment: DNSecureEnvironment): DNUseLicense;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    ///<summary>Gets the contact name for the author or publisher of the content.</summary>
    ///<returns>The contact name for the author or publisher of the content.</returns>
    property ReferralInfoName: string read get_ReferralInfoName;
    ///<summary>Gets the contact URI for the author or publisher of the content.</summary>
    ///<returns>The contact uniform resource identifier (URI) for the author or publisher of the content.</returns>
    property ReferralInfoUri: DDN.System.DNUri read get_ReferralInfoUri;
    ///<summary>Gets the publisher-created content identifier. </summary>
    ///<returns>The publisher-created content identifier.</returns>
    property ContentId: DDN.mscorlib.DNGuid read get_ContentId;
    ///<summary>Gets the URI to use for acquiring a <see cref="T:System.Security.RightsManagement.UseLicense" />
    ///  .</summary>
    ///<returns>The URI to use for acquiring a <see cref="T:System.Security.RightsManagement.UseLicense" />
    ///  .</returns>
    property UseLicenseAcquisitionUrl: DDN.System.DNUri read get_UseLicenseAcquisitionUrl;
  end;

  TDNPublishLicense = class(TDNGenericImport<DNPublishLicenseClass, DNPublishLicense>) end;

  //-------------namespace: System.Security.RightsManagement----------------
  DNSecureEnvironmentClass = interface(DNObjectClass)
  ['{66C51EAD-42D0-5942-8FAB-764F2657FCC6}']
  { static methods } 

    ///<summary>Creates a secure client session for a specified user with a given rights manifest.</summary>
    ///  <param name="applicationManifest">The application rights manifest.</param>
    ///  <param name="user">The user or user-group for granting access to rights managed content.</param>
    ///<returns>A secure client session for activation, license binding, and other rights management operations.</returns>
    {class} function Create(applicationManifest: string; user: DNContentUser): DNSecureEnvironment; overload;
    ///<summary>Creates a secure client session given an application rights manifest, <see cref="T:System.Security.RightsManagement.AuthenticationType" />
    ///  , and <see cref="T:System.Security.RightsManagement.UserActivationMode" />
    ///  .</summary>
    ///  <param name="applicationManifest">The application rights manifest.</param>
    ///  <param name="authentication">The method of authentication.</param>
    ///  <param name="userActivationMode">The type of the user rights account certificate.</param>
    ///<returns>A secure client session for activation, license binding, and other rights management operations.</returns>
    {class} function Create(applicationManifest: string; authentication: DNAuthenticationType; userActivationMode: DNUserActivationMode): DNSecureEnvironment; overload;
    ///<summary>Indicates whether a given user has been activated for accessing rights managed content.</summary>
    ///  <param name="user">The user or user-group for granting access to rights managed content.</param>
    ///<returns><see langword="true" />
    ///  if the given <paramref name="user" />
    ///  has been activated for accessing rights managed content; otherwise, <see langword="false" />
    ///  .</returns>
    {class} function IsUserActivated(user: DNContentUser): Boolean;
    ///<summary>Returns a list of the activated users.</summary>
    ///<returns>A list of the currently activated users.</returns>
    {class} function GetActivatedUsers: DDN.mscorlib.DNReadOnlyCollection<DNContentUser>;
    ///<summary>Removes the license activation for a specified user.</summary>
    ///  <param name="user">The user to remove the license activation for.</param>
    ///<exception cref="T:System.ArgumentNullException">The <paramref name="user" />
    ///  parameter is <see langword="null" />
    ///  .</exception><exception cref="T:System.ArgumentOutOfRangeException">The given <paramref name="user" />
    ///  is not authenticated with either Windows authentication or Passport authentication.</exception>
    {class} procedure RemoveActivatedUser(user: DNContentUser);

  end;

  ///<summary>Represents a secure client session for user activation, license binding, and other rights management operations.</summary>
  [DNTypeName('System.Security.RightsManagement.SecureEnvironment')]
  DNSecureEnvironment = interface(DDN.mscorlib.DNIDisposable)
  ['{204B8E3F-555B-3A76-83DA-6BD9DCFE4BA2}']
  { getters & setters } 

    function get_User: DNContentUser;
    function get_ApplicationManifest: string;

  { methods } 

    ///<summary>Releases all resources used by the <see cref="T:System.Security.RightsManagement.SecureEnvironment" />
    ///  .</summary>
    procedure Dispose;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>Gets the user or user-group specified when the <see cref="T:System.Security.RightsManagement.SecureEnvironment" />
    ///  was created. </summary>
    ///<returns>The user or user-group specified to the <see cref="M:System.Security.RightsManagement.SecureEnvironment.Create(System.String,System.Security.RightsManagement.ContentUser)" />
    ///  method when the <see cref="T:System.Security.RightsManagement.SecureEnvironment" />
    ///  was created.</returns>
    property User: DNContentUser read get_User;
    ///<summary>Gets the <see cref="P:System.Security.RightsManagement.SecureEnvironment.ApplicationManifest" />
    ///  specified when the <see cref="T:System.Security.RightsManagement.SecureEnvironment" />
    ///  was created.</summary>
    ///<returns>The application manifest specified to the <see cref="Overload:System.Security.RightsManagement.SecureEnvironment.Create" />
    ///  method when the <see cref="T:System.Security.RightsManagement.SecureEnvironment" />
    ///  is created.</returns>
    property ApplicationManifest: string read get_ApplicationManifest;
  end;

  TDNSecureEnvironment = class(TDNGenericImport<DNSecureEnvironmentClass, DNSecureEnvironment>) end;

  //-------------namespace: System.Security.RightsManagement----------------
  DNUnsignedPublishLicenseClass = interface(DDN.mscorlib.DNObjectClass)
  ['{5031376F-85CC-58EE-90BD-46D73C41947A}']
  { constructors } 

    ///<summary>Initializes a new instance of the <see cref="T:System.Security.RightsManagement.UnsignedPublishLicense" />
    ///  class. </summary>
    {class} function init: DNUnsignedPublishLicense; overload;
    ///<summary>Initializes a new instance of the <see cref="T:System.Security.RightsManagement.UnsignedPublishLicense" />
    ///  class from a specified XrMLÂ publish-license template.Â </summary>
    ///  <param name="publishLicenseTemplate">The Extensible Rights Markup Language (XrML)Â publish-license template to use to create this license.</param>
    {class} function init(publishLicenseTemplate: string): DNUnsignedPublishLicense; overload;

  end;

  ///<summary>Represents an unsigned rights managedÂ <see cref="T:System.Security.RightsManagement.PublishLicense" />
  ///  or an unsigned <see cref="T:System.Security.RightsManagement.PublishLicense" />
  ///  template.</summary>
  [DNTypeName('System.Security.RightsManagement.UnsignedPublishLicense')]
  DNUnsignedPublishLicense = interface(DDN.mscorlib.DNObject)
  ['{4C44A1DC-0B6F-3833-AFE8-2F9081410FA3}']
  { getters & setters } 

    function get_Owner: DNContentUser;
    procedure set_Owner(value: DNContentUser);
    function get_ReferralInfoName: string;
    procedure set_ReferralInfoName(value: string);
    function get_ReferralInfoUri: DDN.System.DNUri;
    procedure set_ReferralInfoUri(value: DDN.System.DNUri);
    function get_ContentId: DDN.mscorlib.DNGuid;
    procedure set_ContentId(value: DDN.mscorlib.DNGuid);
    function get_Grants: DDN.mscorlib.DNICollection<DNContentGrant>;
    function get_LocalizedNameDescriptionDictionary: DDN.mscorlib.DNIDictionary<Int32, DNLocalizedNameDescriptionPair>;

  { methods } 

    function Sign(secureEnvironment: DNSecureEnvironment; out authorUseLicense: DNUseLicense): DNPublishLicense;
    ///<summary>Returns a serialized template created from the XrML of the <see cref="T:System.Security.RightsManagement.UnsignedPublishLicense" />
    ///  .</summary>
    ///<returns>A serialized template created from the XrML of the <see cref="T:System.Security.RightsManagement.UnsignedPublishLicense" />
    ///  .</returns>
    function ToString: string;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    ///<summary>Gets or sets the content owner. </summary>
    ///<returns>The user who owns the published content.</returns>
    property Owner: DNContentUser read get_Owner write set_Owner;
    ///<summary>Gets or sets the contact name for the author or publisher of the content.</summary>
    ///<returns>The contact name for the author or publisher of the content.</returns>
    property ReferralInfoName: string read get_ReferralInfoName write set_ReferralInfoName;
    ///<summary>Gets or sets the contact URI for the author or publisher of the content.</summary>
    ///<returns>The contact uniform resource identifier (URI) for the author or publisher of the content.</returns>
    property ReferralInfoUri: DDN.System.DNUri read get_ReferralInfoUri write set_ReferralInfoUri;
    ///<summary>Gets or sets the publisher-created content identifier. </summary>
    ///<returns>The publisher-created rights-managed content identifier.</returns>
    property ContentId: DDN.mscorlib.DNGuid read get_ContentId write set_ContentId;
    ///<summary>Gets a collection of assigned user rights.</summary>
    ///<returns>A collection of the assigned user rights that are provided in this license.</returns>
    property Grants: DDN.mscorlib.DNICollection<DNContentGrant> read get_Grants;
    ///<summary>Gets a collection of name and description pairs.</summary>
    ///<returns>A collection of name and description pairs.</returns>
    property LocalizedNameDescriptionDictionary: DDN.mscorlib.DNIDictionary<Int32, DNLocalizedNameDescriptionPair> read get_LocalizedNameDescriptionDictionary;
  end;

  TDNUnsignedPublishLicense = class(TDNGenericImport<DNUnsignedPublishLicenseClass, DNUnsignedPublishLicense>) end;

  //-------------namespace: System.Security.RightsManagement----------------
  DNUseLicenseClass = interface(DDN.mscorlib.DNObjectClass)
  ['{61ADF14F-C95D-5C6C-873B-FBBCE8CAD442}']
  { constructors } 

    ///<summary>Initializes a new instance of the <see cref="T:System.Security.RightsManagement.UseLicense" />
    ///  class. </summary>
    ///  <param name="useLicense">A use license in serialized Extensible Rights Markup Language (XrML) form.</param>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="useLicense" />
    ///  is <see langword="null" />
    ///  .</exception><exception cref="T:System.Security.RightsManagement.RightsManagementException"><paramref name="useLicense" />
    ///  is invalid.</exception>
    {class} function init(useLicense: string): DNUseLicense;

  end;

  ///<summary>Represents a license that enables access to protected rights managed content. </summary>
  [DNTypeName('System.Security.RightsManagement.UseLicense')]
  DNUseLicense = interface(DDN.mscorlib.DNObject)
  ['{BD61521E-E105-389D-8243-125E17BFD22D}']
  { getters & setters } 

    function get_Owner: DNContentUser;
    function get_ContentId: DDN.mscorlib.DNGuid;
    function get_ApplicationData: DDN.mscorlib.DNIDictionary<string, string>;

  { methods } 

    ///<summary>Returns the serialized XrML string used to create this license.</summary>
    ///<returns>The serialized Extensible Rights Markup Language (XrML) string originally passed to the <see cref="M:System.Security.RightsManagement.UseLicense.#ctor(System.String)" />
    ///  constructor.</returns>
    function ToString: string;
    ///<summary>Binds the license to a given <see cref="T:System.Security.RightsManagement.SecureEnvironment" />
    ///  .</summary>
    ///  <param name="secureEnvironment">The environment to bind the license to.</param>
    ///<returns>A <see cref="T:System.Security.RightsManagement.CryptoProvider" />
    ///  instance if the license binding succeeded; otherwise, <see langword="null" />
    ///  .</returns>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="secureEnvironment" />
    ///  is <see langword="null" />
    ///  .</exception>
    function Bind(secureEnvironment: DNSecureEnvironment): DNCryptoProvider;
    ///<summary>Indicates if this license is equivalent to another given license.</summary>
    ///  <param name="x">The license to compare.</param>
    ///<returns><see langword="true" />
    ///  if both licenses are the equivalent; otherwise, <see langword="false" />
    ///  .</returns>
    function Equals(x: DDN.mscorlib.DNObject): Boolean;
    ///<summary>Returns the hash code associated with this license.</summary>
    ///<returns>A hash code for this license. </returns>
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    ///<summary>Gets the owner of the license. </summary>
    ///<returns>The owner of the license. </returns>
    property Owner: DNContentUser read get_Owner;
    ///<summary>Gets the content identifier created by the publisher.</summary>
    ///<returns>The content identifier created by the publisher.</returns>
    property ContentId: DDN.mscorlib.DNGuid read get_ContentId;
    ///<summary>Gets the application data dictionary that contains key/value pairs passed from the publishing application to the consuming application.</summary>
    ///<returns>The application data dictionary that contains key/value pairs passed from the publishing application to the consuming application.</returns>
    property ApplicationData: DDN.mscorlib.DNIDictionary<string, string> read get_ApplicationData;
  end;

  TDNUseLicense = class(TDNGenericImport<DNUseLicenseClass, DNUseLicense>) end;

  //-------------namespace: System.Windows.Threading----------------
  DNDispatcherSynchronizationContextClass = interface(DDN.mscorlib.DNSynchronizationContextClass)
  ['{980381EE-E16A-551F-BFFB-154E725EF013}']
  { constructors } 

    ///<summary>Initializes a new instance of the <see cref="T:System.Windows.Threading.DispatcherSynchronizationContext" />
    ///  class by using the current <see cref="T:System.Windows.Threading.Dispatcher" />
    ///  .</summary>
    {class} function init: DNDispatcherSynchronizationContext; overload;
    ///<summary>Initializes a new instance of the <see cref="T:System.Windows.Threading.DispatcherSynchronizationContext" />
    ///  class by using the specified <see cref="T:System.Windows.Threading.Dispatcher" />
    ///  .</summary>
    ///  <param name="dispatcher">The <see cref="T:System.Windows.Threading.Dispatcher" />
    ///  to associate this <see cref="T:System.Windows.Threading.DispatcherSynchronizationContext" />
    ///  with.</param>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="dispatcher" />
    ///  is <see langword="null" />
    ///  .</exception>
    {class} function init(dispatcher: DNDispatcher): DNDispatcherSynchronizationContext; overload;
    ///<summary>Initializes a new instance of the <see cref="T:System.Windows.Threading.DispatcherSynchronizationContext" />
    ///  class by using the specified <see cref="T:System.Windows.Threading.Dispatcher" />
    ///  .</summary>
    ///  <param name="dispatcher">The <see cref="T:System.Windows.Threading.Dispatcher" />
    ///  to associate this <see cref="T:System.Windows.Threading.DispatcherSynchronizationContext" />
    ///  with.</param>
    ///  <param name="priority">The priority used to send and post callback methods.</param>
    {class} function init(dispatcher: DNDispatcher; priority: DNDispatcherPriority): DNDispatcherSynchronizationContext; overload;

  end;

  ///<summary>Provides a synchronization context for Windows Presentation Foundation (WPF).</summary>
  [DNTypeName('System.Windows.Threading.DispatcherSynchronizationContext')]
  DNDispatcherSynchronizationContext = interface(DDN.mscorlib.DNSynchronizationContext)
  ['{73D885A0-7A9E-36EC-94DE-3A777E4E3E2E}']
  { methods } 

    ///<summary>Invokes the callback in the synchronization context synchronously.</summary>
    ///  <param name="d">The delegate to call.</param>
    ///  <param name="state">The object passed to the delegate.</param>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="d" />
    ///  is <see langword="null" />
    ///  .</exception>
    procedure Send(d: DDN.mscorlib.DNSendOrPostCallback; state: DDN.mscorlib.DNObject);
    ///<summary>Invokes the callback in the synchronization context asynchronously. </summary>
    ///  <param name="d">The delegate to call.</param>
    ///  <param name="state">The object passed to the delegate.</param>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="d" />
    ///  is <see langword="null" />
    ///  .</exception>
    procedure Post(d: DDN.mscorlib.DNSendOrPostCallback; state: DDN.mscorlib.DNObject);
    ///<summary>Waits for any or all the elements in the specified array to receive a signal.</summary>
    ///  <param name="waitHandles">An array that contains the native operating system handles.</param>
    ///  <param name="waitAll"><see langword="true" />
    ///  to wait for all handles; <see langword="false" />
    ///  to wait for any handle.</param>
    ///  <param name="millisecondsTimeout">The number of milliseconds to wait, or <see cref="F:System.Threading.Timeout.Infinite" />
    ///  (-1) to wait indefinitely.</param>
    ///<returns>The array index of the object that satisfied the wait.</returns>
    function Wait(waitHandles: TArray<IntPtr>; waitAll: Boolean; millisecondsTimeout: Int32): Int32;
    ///<summary>Creates a copy of this <see cref="T:System.Windows.Threading.DispatcherSynchronizationContext" />
    ///  . </summary>
    ///<returns>The copy of this synchronization context.</returns>
    function CreateCopy: DDN.mscorlib.DNSynchronizationContext;
    procedure OperationStarted;
    procedure OperationCompleted;
    function IsWaitNotificationRequired: Boolean;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNDispatcherSynchronizationContext = class(TDNGenericImport<DNDispatcherSynchronizationContextClass, DNDispatcherSynchronizationContext>) end;

  //-------------namespace: System.ComponentModel----------------
  DNSortDescriptionClass = interface(DDN.mscorlib.DNValueTypeClass)
  ['{594F45B1-D8C6-599A-87F8-A03191CA8E9B}']
  { constructors } 

    ///<summary>Initializes a new instance of the <see cref="T:System.ComponentModel.SortDescription" />
    ///  structure.</summary>
    ///  <param name="propertyName">The name of the property to sort the list by.</param>
    ///  <param name="direction">The sort order.</param>
    ///<exception cref="T:System.ArgumentNullException">The <paramref name="propertyName" />
    ///  parameter cannot be null.</exception><exception cref="T:System.ArgumentException">The <paramref name="propertyName" />
    ///  parameter cannot be empty</exception><exception cref="T:System.ComponentModel.InvalidEnumArgumentException">The <paramref name="direction" />
    ///  parameter does not specify a valid value.</exception>
    {class} function init(propertyName: string; direction: DDN.System.DNListSortDirection): DNSortDescription;

  end;

  ///<summary>Defines the direction and the property name to be used as the criteria for sorting a collection.</summary>
  [DNTypeName('System.ComponentModel.SortDescription')]
  DNSortDescription = interface(DDN.mscorlib.DNValueType)
  ['{B071A4ED-78A6-3FDB-8F78-3330B96E0BB4}']
  { getters & setters } 

    function get_PropertyName: string;
    procedure set_PropertyName(value: string);
    function get_Direction: DDN.System.DNListSortDirection;
    procedure set_Direction(value: DDN.System.DNListSortDirection);
    function get_IsSealed: Boolean;

  { methods } 

    ///<summary>Compares the specified instance and the current instance of <see cref="T:System.ComponentModel.SortDescription" />
    ///  for value equality.</summary>
    ///  <param name="obj">The <see cref="T:System.ComponentModel.SortDescription" />
    ///  instance to compare.</param>
    ///<returns><see langword="true" />
    ///  if <paramref name="obj" />
    ///  and this instance of <see cref="T:System.ComponentModel.SortDescription" />
    ///  have the same values.</returns>
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    ///<summary>Returns the hash code for this instance of <see cref="T:System.ComponentModel.SortDescription" />
    ///  .</summary>
    ///<returns>The hash code for this instance of <see cref="T:System.ComponentModel.SortDescription" />
    ///  .</returns>
    function GetHashCode: Int32;
    function ToString: string;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    ///<summary>Gets or sets the property name being used as the sorting criteria.</summary>
    ///<returns>The default value is null.</returns>
    property PropertyName: string read get_PropertyName write set_PropertyName;
    ///<summary>Gets or sets a value that indicates whether to sort in ascending or descending order.</summary>
    ///<returns>A <see cref="T:System.ComponentModel.ListSortDirection" />
    ///  value to indicate whether to sort in ascending or descending order.</returns>
    property Direction: DDN.System.DNListSortDirection read get_Direction write set_Direction;
    ///<summary>Gets a value that indicates whether this object is in an immutable state.</summary>
    ///<returns><see langword="true" />
    ///  if this object is in use; otherwise, <see langword="false" />
    ///  .</returns>
    property IsSealed: Boolean read get_IsSealed;
  end;

  TDNSortDescription = class(TDNGenericImport<DNSortDescriptionClass, DNSortDescription>) end;

  //-------------namespace: System.Windows----------------
  DNDependencyPropertyChangedEventArgsClass = interface(DDN.mscorlib.DNValueTypeClass)
  ['{1043A968-EBF2-5A0E-A233-C255118AFC7F}']
  { constructors } 

    ///<summary>Initializes a new instance of the <see cref="T:System.Windows.DependencyPropertyChangedEventArgs" />
    ///  class.</summary>
    ///  <param name="property">The identifier for the dependency property that changed.</param>
    ///  <param name="oldValue">The value of the property before the change reported by the relevant event or state change.</param>
    ///  <param name="newValue">The value of the property after the change reported by the relevant event or state change.</param>
    {class} function init(&property: DNDependencyProperty; oldValue: DDN.mscorlib.DNObject; newValue: DDN.mscorlib.DNObject): DNDependencyPropertyChangedEventArgs;

  end;

  ///<summary>Provides data for various property changed events. Typically these events report effective value changes in the value of a read-only dependency property. Another usage is as part of a <see cref="T:System.Windows.PropertyChangedCallback" />
  ///  implementation.</summary>
  [DNTypeName('System.Windows.DependencyPropertyChangedEventArgs')]
  DNDependencyPropertyChangedEventArgs = interface(DDN.mscorlib.DNValueType)
  ['{7D6F0EB5-506E-35BF-BFFA-CA81D64EABEC}']
  { getters & setters } 

    function get_Property: DNDependencyProperty;
    function get_OldValue: DDN.mscorlib.DNObject;
    function get_NewValue: DDN.mscorlib.DNObject;

  { methods } 

    ///<summary>Gets a hash code  for this <see cref="T:System.Windows.DependencyPropertyChangedEventArgs" />
    ///  . </summary>
    ///<returns>A signed 32-bit integer hash code. </returns>
    function GetHashCode: Int32;
    ///<summary>Determines whether the provided object is equivalent to the current <see cref="T:System.Windows.DependencyPropertyChangedEventArgs" />
    ///  .</summary>
    ///  <param name="obj">The object to compare to the current <see cref="T:System.Windows.DependencyPropertyChangedEventArgs" />
    ///  .</param>
    ///<returns><see langword="true" />
    ///  if the provided object is equivalent to the current <see cref="T:System.Windows.DependencyPropertyChangedEventArgs" />
    ///  ; otherwise, <see langword="false" />
    ///  .</returns>
    function Equals(obj: DDN.mscorlib.DNObject): Boolean; overload;
    ///<summary>Determines whether the provided <see cref="T:System.Windows.DependencyPropertyChangedEventArgs" />
    ///  is equivalent to the current <see cref="T:System.Windows.DependencyPropertyChangedEventArgs" />
    ///  .</summary>
    ///  <param name="args">The <see cref="T:System.Windows.DependencyPropertyChangedEventArgs" />
    ///  to compare to the current <see cref="T:System.Windows.DependencyPropertyChangedEventArgs" />
    ///</param>
    ///<returns><see langword="true" />
    ///  if the provided <see cref="T:System.Windows.DependencyPropertyChangedEventArgs" />
    ///  is equivalent to the current <see cref="T:System.Windows.DependencyPropertyChangedEventArgs" />
    ///  ; otherwise, <see langword="false" />
    ///  .</returns>
    function Equals(args: DNDependencyPropertyChangedEventArgs): Boolean; overload;
    function ToString: string;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    ///<summary>Gets the identifier for the dependency property where the value change occurred.</summary>
    ///<returns>The identifier field of the dependency property where the value change occurred.</returns>
    property &Property: DNDependencyProperty read get_Property;
    ///<summary>Gets the value of the property before the change.</summary>
    ///<returns>The property value before the change.</returns>
    property OldValue: DDN.mscorlib.DNObject read get_OldValue;
    ///<summary>Gets the value of the property after the change.</summary>
    ///<returns>The property value after the change.</returns>
    property NewValue: DDN.mscorlib.DNObject read get_NewValue;
  end;

  TDNDependencyPropertyChangedEventArgs = class(TDNGenericImport<DNDependencyPropertyChangedEventArgsClass, DNDependencyPropertyChangedEventArgs>) end;

  //-------------namespace: System.Windows----------------
  DNInt32RectClass = interface(DDN.mscorlib.DNValueTypeClass)
  ['{97F71006-A87B-54D0-8BCA-CCC7D9E17DF6}']
  { static getter & setter } 

    {class} function get_Empty: DNInt32Rect;

  { constructors } 

    ///<summary>Initializes a new instance of an <see cref="T:System.Windows.Int32Rect" />
    ///  with the specified <see cref="P:System.Windows.Int32Rect.X" />
    ///  and <see cref="P:System.Windows.Int32Rect.Y" />
    ///  coordinates and the specified <see cref="P:System.Windows.Int32Rect.Width" />
    ///  and <see cref="P:System.Windows.Int32Rect.Height" />
    ///  . </summary>
    ///  <param name="x">The <see cref="P:System.Windows.Int32Rect.X" />
    ///  of the new <see cref="T:System.Windows.Int32Rect" />
    ///  instance which specifies the x-coordinate of the top-left corner of the rectangle.</param>
    ///  <param name="y">The <see cref="P:System.Windows.Int32Rect.Y" />
    ///  of the new <see cref="T:System.Windows.Int32Rect" />
    ///  instance which specifies the y-coordinate of the top-left corner of the rectangle.</param>
    ///  <param name="width">The <see cref="P:System.Windows.Int32Rect.Width" />
    ///  of the new <see cref="T:System.Windows.Int32Rect" />
    ///  instance which specifies the width of the rectangle.</param>
    ///  <param name="height">The <see cref="P:System.Windows.Int32Rect.Height" />
    ///  of the new <see cref="T:System.Windows.Int32Rect" />
    ///  instance which specifies the height of the rectangle.</param>
    {class} function init(x: Int32; y: Int32; width: Int32; height: Int32): DNInt32Rect;

  { static methods } 

    ///<summary>Determines whether the specified rectangles are equal.</summary>
    ///  <param name="int32Rect1">The first rectangle to compare.</param>
    ///  <param name="int32Rect2">The second rectangle to compare.</param>
    ///<returns>
    ///  true if int32Rect1 and int32Rect2 have the same <see cref="P:System.Windows.Int32Rect.X" />
    ///  , <see cref="P:System.Windows.Int32Rect.Y" />
    ///  , <see cref="P:System.Windows.Int32Rect.Width" />
    ///  , and <see cref="P:System.Windows.Int32Rect.Height" />
    ///  ; otherwise, false.</returns>
    {class} function Equals(int32Rect1: DNInt32Rect; int32Rect2: DNInt32Rect): Boolean; overload;
    ///<summary>Creates an <see cref="T:System.Windows.Int32Rect" />
    ///  structure from the specified <see cref="T:System.String" />
    ///  representation.</summary>
    ///  <param name="source">A string representation of an <see cref="T:System.Windows.Int32Rect" />
    ///  .</param>
    ///<returns>The equivalent <see cref="T:System.Windows.Int32Rect" />
    ///  structure.</returns>
    {class} function Parse(source: string): DNInt32Rect;

  { static propertys } 

    ///<summary>Gets the empty rectangle, a special value that represents a rectangle with no position or area. </summary>
    ///<returns>An empty rectangle with no position or area.</returns>
    {class} property Empty: DNInt32Rect read get_Empty;
  end;

  ///<summary>Describes the width, height, and location of an integer rectangle.</summary>
  [DNTypeName('System.Windows.Int32Rect')]
  DNInt32Rect = interface(DDN.mscorlib.DNValueType)
  ['{5F943127-FAB2-3DCD-BB34-D6430F6957D0}']
  { getters & setters } 

    function get_X: Int32;
    procedure set_X(value: Int32);
    function get_Y: Int32;
    procedure set_Y(value: Int32);
    function get_Width: Int32;
    procedure set_Width(value: Int32);
    function get_Height: Int32;
    procedure set_Height(value: Int32);
    function get_IsEmpty: Boolean;
    function get_HasArea: Boolean;

  { methods } 

    ///<summary>Determines whether the specified rectangle is equal to this rectangle.</summary>
    ///  <param name="o">The object to compare to the current rectangle.</param>
    ///<returns>
    ///  true if o is an <see cref="T:System.Windows.Int32Rect" />
    ///  and the same <see cref="P:System.Windows.Int32Rect.X" />
    ///  , <see cref="P:System.Windows.Int32Rect.Y" />
    ///  , <see cref="P:System.Windows.Int32Rect.Width" />
    ///  , and <see cref="P:System.Windows.Int32Rect.Height" />
    ///  as this rectangle; otherwise, false.</returns>
    function Equals(o: DDN.mscorlib.DNObject): Boolean; overload;
    ///<summary>Determines whether the specified rectangle is equal to this rectangle.</summary>
    ///  <param name="value">The rectangle to compare to the current rectangle.</param>
    ///<returns>
    ///  true if both rectangles have the same <see cref="P:System.Windows.Int32Rect.X" />
    ///  , <see cref="P:System.Windows.Int32Rect.Y" />
    ///  , <see cref="P:System.Windows.Int32Rect.Width" />
    ///  , and <see cref="P:System.Windows.Int32Rect.Height" />
    ///  as this rectangle; otherwise, false.</returns>
    function Equals(value: DNInt32Rect): Boolean; overload;
    ///<summary>Creates a hash code from this rectangle's <see cref="P:System.Windows.Int32Rect.X" />
    ///  , <see cref="P:System.Windows.Int32Rect.Y" />
    ///  , <see cref="P:System.Windows.Int32Rect.Width" />
    ///  , and <see cref="P:System.Windows.Int32Rect.Height" />
    ///  values.</summary>
    ///<returns>This rectangle's hash code.</returns>
    function GetHashCode: Int32;
    ///<summary>Creates a string representation of this <see cref="T:System.Windows.Int32Rect" />
    ///  .</summary>
    ///<returns>A string containing the same <see cref="P:System.Windows.Int32Rect.X" />
    ///  , <see cref="P:System.Windows.Int32Rect.Y" />
    ///  , <see cref="P:System.Windows.Int32Rect.Width" />
    ///  , and <see cref="P:System.Windows.Int32Rect.Height" />
    ///  values of this <see cref="T:System.Windows.Int32Rect" />
    ///  structure.</returns>
    function ToString: string; overload;
    ///<summary>Creates a string representation of this <see cref="T:System.Windows.Int32Rect" />
    ///  based on the supplied <see cref="T:System.IFormatProvider" />
    ///  .</summary>
    ///  <param name="provider">The format provider to use. If provider is <see langword="null" />
    ///  , the current culture is used.</param>
    ///<returns>A string representation of this instance of <see cref="T:System.Windows.Int32Rect" />
    ///  .</returns>
    function ToString(provider: DDN.mscorlib.DNIFormatProvider): string; overload;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    ///<summary>Gets or sets the x-coordinate of the top-left corner of the rectangle.</summary>
    ///<returns>The x-coordinate of the top-left corner of the rectangle. The default value is 0.</returns>
    property X: Int32 read get_X write set_X;
    ///<summary>Gets or sets the y-coordinate of the top-left corner of the rectangle.</summary>
    ///<returns>The y-coordinate of the top-left corner of the rectangle. The default value is 0.</returns>
    property Y: Int32 read get_Y write set_Y;
    ///<summary>Gets or sets the width of the rectangle.</summary>
    ///<returns>The width of the rectangle. The default value is 0.</returns>
    property Width: Int32 read get_Width write set_Width;
    ///<summary>Gets or sets the height of the rectangle.</summary>
    ///<returns>The height of the rectangle. The default value is 0.</returns>
    property Height: Int32 read get_Height write set_Height;
    ///<summary>Gets a value indicating whether the rectangle is empty.</summary>
    ///<returns>
    ///  true if the rectangle is empty; otherwise, false. The default value is true.</returns>
    property IsEmpty: Boolean read get_IsEmpty;
    ///<summary>Gets a value that indicates whether the <see cref="P:System.Windows.Int32Rect.Width" />
    ///  and <see cref="P:System.Windows.Int32Rect.Height" />
    ///  properties of the <see cref="T:System.Windows.Int32Rect" />
    ///  are greater than 0.</summary>
    ///<returns>true if the <see cref="P:System.Windows.Int32Rect.Width" />
    ///  and <see cref="P:System.Windows.Int32Rect.Height" />
    ///  properties of the <see cref="T:System.Windows.Int32Rect" />
    ///  are greater than 0; otherwise, <paramref name="false" />
    ///  .</returns>
    property HasArea: Boolean read get_HasArea;
  end;

  TDNInt32Rect = class(TDNGenericImport<DNInt32RectClass, DNInt32Rect>) end;

  //-------------namespace: System.Windows.Interop----------------
  DNMSGClass = interface(DDN.mscorlib.DNValueTypeClass)
  ['{A00FC6CD-E54F-5687-9335-8EBE16D118B0}']
  end;

  ///<summary>Contains message information from a thread's message queue. </summary>
  [DNTypeName('System.Windows.Interop.MSG')]
  DNMSG = interface(DDN.mscorlib.DNValueType)
  ['{B908E879-0C00-3800-9E17-8F5C3D0CF736}']
  { getters & setters } 

    function get_hwnd: IntPtr;
    procedure set_hwnd(value: IntPtr);
    function get_message: Int32;
    procedure set_message(value: Int32);
    function get_wParam: IntPtr;
    procedure set_wParam(value: IntPtr);
    function get_lParam: IntPtr;
    procedure set_lParam(value: IntPtr);
    function get_time: Int32;
    procedure set_time(value: Int32);
    function get_pt_x: Int32;
    procedure set_pt_x(value: Int32);
    function get_pt_y: Int32;
    procedure set_pt_y(value: Int32);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function ToString: string;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    ///<summary>Gets or sets the window handle (HWND) to the window whose window procedure receives the message. </summary>
    ///<returns>The window handle (HWND).</returns>
    property hwnd: IntPtr read get_hwnd write set_hwnd;
    ///<summary>Gets or sets the message identifier. </summary>
    ///<returns>The message identifier.</returns>
    property message: Int32 read get_message write set_message;
    ///<summary>Gets or sets the <paramref name="wParam" />
    ///  value for the message, which specifies additional information about the message. The exact meaning depends on the value of the message. </summary>
    ///<returns>The <paramref name="wParam" />
    ///  value for the message.</returns>
    property wParam: IntPtr read get_wParam write set_wParam;
    ///<summary>Gets or sets the <paramref name="lParam" />
    ///  value that specifies additional information about the message. The exact meaning depends on the value of the <see cref="P:System.Windows.Interop.MSG.message" />
    ///  member.</summary>
    ///<returns>The <paramref name="lParam" />
    ///  value for the message.</returns>
    property lParam: IntPtr read get_lParam write set_lParam;
    ///<summary>Gets or sets the time at which the message was posted.</summary>
    ///<returns>The time that the message was posted.</returns>
    property time: Int32 read get_time write set_time;
    ///<summary>Gets or sets the x coordinate of the cursor position on the screen, when the message was posted. </summary>
    ///<returns>The x coordinate of the cursor position.</returns>
    property pt_x: Int32 read get_pt_x write set_pt_x;
    ///<summary>Gets or sets the y coordinate of the cursor position on the screen, when the message was posted. </summary>
    ///<returns>The y coordinate of the cursor position.</returns>
    property pt_y: Int32 read get_pt_y write set_pt_y;
  end;

  TDNMSG = class(TDNGenericImport<DNMSGClass, DNMSG>) end;

  //-------------namespace: System.Windows----------------
  DNLocalValueEntryClass = interface(DDN.mscorlib.DNValueTypeClass)
  ['{6D491468-4A5A-5D8C-926F-E98B006DF08C}']
  end;

  ///<summary>Represents a property identifier and the property value for a locally set dependency property.</summary>
  [DNTypeName('System.Windows.LocalValueEntry')]
  DNLocalValueEntry = interface(DDN.mscorlib.DNValueType)
  ['{637EC814-5100-3B56-80D0-05B3BEA16AD5}']
  { getters & setters } 

    function get_Property: DNDependencyProperty;
    function get_Value: DDN.mscorlib.DNObject;

  { methods } 

    ///<summary>Returns the hash code for this <see cref="T:System.Windows.LocalValueEntry" />
    ///  .</summary>
    ///<returns>A signed 32-bit integer value.</returns>
    function GetHashCode: Int32;
    ///<summary>Determines whether two <see cref="T:System.Windows.LocalValueEntry" />
    ///  instances are equal.</summary>
    ///  <param name="obj">The <see cref="T:System.Windows.LocalValueEntry" />
    ///  to compare with the current <see cref="T:System.Windows.LocalValueEntry" />
    ///  .</param>
    ///<returns>This <see cref="M:System.Windows.LocalValueEntry.op_Equality(System.Windows.LocalValueEntry,System.Windows.LocalValueEntry)" />
    ///  implementation compares the values of the <see cref="P:System.Windows.LocalValueEntry.Property" />
    ///  , and potentially compares the values of <see cref="P:System.Windows.LocalValueEntry.Value" />
    ///  . The <see cref="P:System.Windows.LocalValueEntry.Property" />
    ///  component of a <see cref="T:System.Windows.LocalValueEntry" />
    ///  is a value type, so will always be a bitwise comparison. For the <see cref="P:System.Windows.LocalValueEntry.Value" />
    ///  component, this implementation employs a bitwise comparison if it is a value type. For locally set properties that have reference types, the behavior is deferred to that type's equality determination mechanisms, because it just uses the == operator on the two values internally. By default, this would be a reference equality of the values and thus the equality of the entire <see cref="T:System.Windows.LocalValueEntry" />
    ///  would become a reference equality. </returns>
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function ToString: string;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    ///<summary>Gets the identifier for the locally set dependency property that is represented by this entry. </summary>
    ///<returns>The identifier for the locally set dependency property.</returns>
    property &Property: DNDependencyProperty read get_Property;
    ///<summary>Gets the value of the locally set dependency property. </summary>
    ///<returns>The value of the locally set dependency property as an object. </returns>
    property Value: DDN.mscorlib.DNObject read get_Value;
  end;

  TDNLocalValueEntry = class(TDNGenericImport<DNLocalValueEntryClass, DNLocalValueEntry>) end;

  //-------------namespace: System.Windows----------------
  DNLocalValueEnumeratorClass = interface(DDN.mscorlib.DNValueTypeClass)
  ['{81080CE4-3DA2-543C-9F1A-20A61867A608}']
  end;

  ///<summary>Provides enumeration support for the local values of any dependency properties that exist on a <see cref="T:System.Windows.DependencyObject" />
  ///  .</summary>
  [DNTypeName('System.Windows.LocalValueEnumerator')]
  DNLocalValueEnumerator = interface(DDN.mscorlib.DNValueType)
  ['{7560CD58-6EA4-3167-99C6-1DA6D308772A}']
  { getters & setters } 

    function get_Current: DNLocalValueEntry;
    function get_Count: Int32;

  { methods } 

    ///<summary>Returns a hash code for the current <see cref="T:System.Windows.LocalValueEnumerator" />
    ///  .</summary>
    ///<returns>A 32-bit integer hash code.</returns>
    function GetHashCode: Int32;
    ///<summary>Determines whether the provided <see cref="T:System.Windows.LocalValueEnumerator" />
    ///  is equivalent to this <see cref="T:System.Windows.LocalValueEnumerator" />
    ///  .</summary>
    ///  <param name="obj">The <see cref="T:System.Windows.LocalValueEnumerator" />
    ///  to compare with the current <see cref="T:System.Windows.LocalValueEnumerator" />
    ///  .</param>
    ///<returns><see langword="true" />
    ///  if the specified <see cref="T:System.Windows.LocalValueEnumerator" />
    ///  is equal to the current <see cref="T:System.Windows.LocalValueEnumerator" />
    ///  ; otherwise, <see langword="false" />
    ///  .</returns>
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    ///<summary>Advances the enumerator to the next element of the collection.</summary>
    ///<returns><see langword="true" />
    ///  if the enumerator was successfully advanced to the next element; <see langword="false" />
    ///  if the enumerator has passed the end of the collection.</returns>
    function MoveNext: Boolean;
    ///<summary>Sets the enumerator to its initial position, which is before the first element in the collection.</summary>
    procedure Reset;
    function ToString: string;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    ///<summary>Gets the current element in the collection.</summary>
    ///<returns>The current <see cref="T:System.Windows.LocalValueEntry" />
    ///  in the collection.</returns>
    property Current: DNLocalValueEntry read get_Current;
    ///<summary>Gets the number of items that are represented in the collection. </summary>
    ///<returns>The number of items in the collection.</returns>
    property Count: Int32 read get_Count;
  end;

  TDNLocalValueEnumerator = class(TDNGenericImport<DNLocalValueEnumeratorClass, DNLocalValueEnumerator>) end;

  //-------------namespace: System.Windows.Media----------------
  DNMatrixClass = interface(DDN.mscorlib.DNValueTypeClass)
  ['{C2D284FD-CEC8-58EB-99B6-46402D8B8C84}']
  { static getter & setter } 

    {class} function get_Identity: DNMatrix;

  { constructors } 

    ///<summary> Initializes a new instance of the <see cref="T:System.Windows.Media.Matrix" />
    ///  structure. </summary>
    ///  <param name="m11">The new <see cref="T:System.Windows.Media.Matrix" />
    ///  structure's <see cref="P:System.Windows.Media.Matrix.M11" />
    ///  coefficient.</param>
    ///  <param name="m12">The new <see cref="T:System.Windows.Media.Matrix" />
    ///  structure's <see cref="P:System.Windows.Media.Matrix.M12" />
    ///  coefficient.</param>
    ///  <param name="m21">The new <see cref="T:System.Windows.Media.Matrix" />
    ///  structure's <see cref="P:System.Windows.Media.Matrix.M21" />
    ///  coefficient.</param>
    ///  <param name="m22">The new <see cref="T:System.Windows.Media.Matrix" />
    ///  structure's <see cref="P:System.Windows.Media.Matrix.M22" />
    ///  coefficient.</param>
    ///  <param name="offsetX">The new <see cref="T:System.Windows.Media.Matrix" />
    ///  structure's <see cref="P:System.Windows.Media.Matrix.OffsetX" />
    ///  coefficient.</param>
    ///  <param name="offsetY">The new <see cref="T:System.Windows.Media.Matrix" />
    ///  structure's <see cref="P:System.Windows.Media.Matrix.OffsetY" />
    ///  coefficient.</param>
    {class} function init(m11: Double; m12: Double; m21: Double; m22: Double; offsetX: Double; offsetY: Double): DNMatrix;

  { static methods } 

    ///<summary> Multiplies a <see cref="T:System.Windows.Media.Matrix" />
    ///  structure by another <see cref="T:System.Windows.Media.Matrix" />
    ///  structure. </summary>
    ///  <param name="trans1">The first <see cref="T:System.Windows.Media.Matrix" />
    ///  structure to multiply.</param>
    ///  <param name="trans2">The second <see cref="T:System.Windows.Media.Matrix" />
    ///  structure to multiply.</param>
    ///<returns>The result of multiplying <paramref name="trans1" />
    ///  by <paramref name="trans2" />
    ///  .</returns>
    {class} function Multiply(trans1: DNMatrix; trans2: DNMatrix): DNMatrix;
    ///<summary> Determines whether the two specified <see cref="T:System.Windows.Media.Matrix" />
    ///  structures are identical.</summary>
    ///  <param name="matrix1">The first <see cref="T:System.Windows.Media.Matrix" />
    ///  structure to compare.</param>
    ///  <param name="matrix2">The second <see cref="T:System.Windows.Media.Matrix" />
    ///  structure to compare.</param>
    ///<returns><see langword="true" />
    ///  if <paramref name="matrix1" />
    ///  and <paramref name="matrix2" />
    ///  are identical; otherwise, <see langword="false" />
    ///  .</returns>
    {class} function Equals(matrix1: DNMatrix; matrix2: DNMatrix): Boolean; overload;
    ///<summary> Converts a <see cref="T:System.String" />
    ///  representation of a matrix into the equivalent <see cref="T:System.Windows.Media.Matrix" />
    ///  structure. </summary>
    ///  <param name="source">The <see cref="T:System.String" />
    ///  representation of the matrix.</param>
    ///<returns>The equivalent <see cref="T:System.Windows.Media.Matrix" />
    ///  structure.</returns>
    {class} function Parse(source: string): DNMatrix;

  { static propertys } 

    ///<summary> Gets an identity <see cref="T:System.Windows.Media.Matrix" />
    ///  . </summary>
    ///<returns>An identity matrix.</returns>
    {class} property Identity: DNMatrix read get_Identity;
  end;

  ///<summary> Represents a 3x3 affine transformation matrix used for transformations in 2-D space. </summary>
  [DNTypeName('System.Windows.Media.Matrix')]
  DNMatrix = interface(DDN.mscorlib.DNValueType)
  ['{F2A79FC1-F4B4-30C3-AEBE-CC6B1DF2B467}']
  { getters & setters } 

    function get_IsIdentity: Boolean;
    function get_Determinant: Double;
    function get_HasInverse: Boolean;
    function get_M11: Double;
    procedure set_M11(value: Double);
    function get_M12: Double;
    procedure set_M12(value: Double);
    function get_M21: Double;
    procedure set_M21(value: Double);
    function get_M22: Double;
    procedure set_M22(value: Double);
    function get_OffsetX: Double;
    procedure set_OffsetX(value: Double);
    function get_OffsetY: Double;
    procedure set_OffsetY(value: Double);

  { methods } 

    ///<summary> Changes this <see cref="T:System.Windows.Media.Matrix" />
    ///  structure into an identity matrix. </summary>
    procedure SetIdentity;
    ///<summary> Appends the specified <see cref="T:System.Windows.Media.Matrix" />
    ///  structure to this <see cref="T:System.Windows.Media.Matrix" />
    ///  structure. </summary>
    ///  <param name="matrix">The <see cref="T:System.Windows.Media.Matrix" />
    ///  structure to append to this <see cref="T:System.Windows.Media.Matrix" />
    ///  structure.</param>
    procedure Append(matrix: DNMatrix);
    ///<summary> Prepends the specified <see cref="T:System.Windows.Media.Matrix" />
    ///  structure onto this <see cref="T:System.Windows.Media.Matrix" />
    ///  structure. </summary>
    ///  <param name="matrix">The <see cref="T:System.Windows.Media.Matrix" />
    ///  structure to prepend to this <see cref="T:System.Windows.Media.Matrix" />
    ///  structure.</param>
    procedure Prepend(matrix: DNMatrix);
    ///<summary> Applies a rotation of the specified angle about the origin of this <see cref="T:System.Windows.Media.Matrix" />
    ///  structure. </summary>
    ///  <param name="angle">The angle of rotation.</param>
    procedure Rotate(angle: Double);
    ///<summary> Prepends a rotation of the specified angle to this <see cref="T:System.Windows.Media.Matrix" />
    ///  structure. </summary>
    ///  <param name="angle">The angle of rotation to prepend.</param>
    procedure RotatePrepend(angle: Double);
    ///<summary>Rotates this matrix about the specified point.</summary>
    ///  <param name="angle">The angle, in degrees, by which to rotate this matrix. </param>
    ///  <param name="centerX">The x-coordinate of the point about which to rotate this matrix.</param>
    ///  <param name="centerY">The y-coordinate of the point about which to rotate this matrix.</param>
    procedure RotateAt(angle: Double; centerX: Double; centerY: Double);
    ///<summary>Prepends a rotation of the specified angle at the specified point to this <see cref="T:System.Windows.Media.Matrix" />
    ///  structure.</summary>
    ///  <param name="angle">The rotation angle, in degrees.</param>
    ///  <param name="centerX">The x-coordinate of the rotation center.</param>
    ///  <param name="centerY">The y-coordinate of the rotation center.</param>
    procedure RotateAtPrepend(angle: Double; centerX: Double; centerY: Double);
    ///<summary> Appends the specified scale vector to this <see cref="T:System.Windows.Media.Matrix" />
    ///  structure. </summary>
    ///  <param name="scaleX">The value by which to scale this <see cref="T:System.Windows.Media.Matrix" />
    ///  along the x-axis.</param>
    ///  <param name="scaleY">The value by which to scale this <see cref="T:System.Windows.Media.Matrix" />
    ///  along the y-axis.</param>
    procedure Scale(scaleX: Double; scaleY: Double);
    ///<summary> Prepends the specified scale vector to this <see cref="T:System.Windows.Media.Matrix" />
    ///  structure. </summary>
    ///  <param name="scaleX">The value by which to scale this <see cref="T:System.Windows.Media.Matrix" />
    ///  structure along the x-axis.</param>
    ///  <param name="scaleY">The value by which to scale this <see cref="T:System.Windows.Media.Matrix" />
    ///  structure along the y-axis.</param>
    procedure ScalePrepend(scaleX: Double; scaleY: Double);
    ///<summary>Scales this <see cref="T:System.Windows.Media.Matrix" />
    ///  by the specified amount about the specified point.</summary>
    ///  <param name="scaleX">The amount by which to scale this <see cref="T:System.Windows.Media.Matrix" />
    ///  along the x-axis. </param>
    ///  <param name="scaleY">The amount by which to scale this <see cref="T:System.Windows.Media.Matrix" />
    ///  along the y-axis.</param>
    ///  <param name="centerX">The x-coordinate of the scale operation's center point.</param>
    ///  <param name="centerY">The y-coordinate of the scale operation's center point.</param>
    procedure ScaleAt(scaleX: Double; scaleY: Double; centerX: Double; centerY: Double);
    ///<summary>Prepends the specified scale about the specified point of this <see cref="T:System.Windows.Media.Matrix" />
    ///  .</summary>
    ///  <param name="scaleX">The x-axis scale factor.</param>
    ///  <param name="scaleY">The y-axis scale factor.</param>
    ///  <param name="centerX">The x-coordinate of the point about which the scale operation is performed.</param>
    ///  <param name="centerY">The y-coordinate of the point about which the scale operation is performed.</param>
    procedure ScaleAtPrepend(scaleX: Double; scaleY: Double; centerX: Double; centerY: Double);
    ///<summary> Appends a skew of the specified degrees in the x and y dimensions to this <see cref="T:System.Windows.Media.Matrix" />
    ///  structure. </summary>
    ///  <param name="skewX">The angle in the x dimension by which to skew this <see cref="T:System.Windows.Media.Matrix" />
    ///  .</param>
    ///  <param name="skewY">The angle in the y dimension by which to skew this <see cref="T:System.Windows.Media.Matrix" />
    ///  .</param>
    procedure Skew(skewX: Double; skewY: Double);
    ///<summary> Prepends a skew of the specified degrees in the x and y dimensions to this <see cref="T:System.Windows.Media.Matrix" />
    ///  structure. </summary>
    ///  <param name="skewX">The angle in the x dimension by which to skew this <see cref="T:System.Windows.Media.Matrix" />
    ///  .</param>
    ///  <param name="skewY">The angle in the y dimension by which to skew this <see cref="T:System.Windows.Media.Matrix" />
    ///  .</param>
    procedure SkewPrepend(skewX: Double; skewY: Double);
    ///<summary> Appends a translation of the specified offsets to this <see cref="T:System.Windows.Media.Matrix" />
    ///  structure. </summary>
    ///  <param name="offsetX">The amount to offset this <see cref="T:System.Windows.Media.Matrix" />
    ///  along the x-axis.</param>
    ///  <param name="offsetY">The amount to offset this <see cref="T:System.Windows.Media.Matrix" />
    ///  along the y-axis.</param>
    procedure Translate(offsetX: Double; offsetY: Double);
    ///<summary> Prepends a translation of the specified offsets to this <see cref="T:System.Windows.Media.Matrix" />
    ///  structure. </summary>
    ///  <param name="offsetX">The amount to offset this <see cref="T:System.Windows.Media.Matrix" />
    ///  along the x-axis.</param>
    ///  <param name="offsetY">The amount to offset this <see cref="T:System.Windows.Media.Matrix" />
    ///  along the y-axis.</param>
    procedure TranslatePrepend(offsetX: Double; offsetY: Double);
    ///<summary>Transforms the specified point by the <see cref="T:System.Windows.Media.Matrix" />
    ///  and returns the result.</summary>
    ///  <param name="point">The point to transform.</param>
    ///<returns>The result of transforming <paramref name="point" />
    ///  by this <see cref="T:System.Windows.Media.Matrix" />
    ///  .</returns>
    function Transform(point: DNPoint): DNPoint; overload;
    ///<summary>Transforms the specified points by this <see cref="T:System.Windows.Media.Matrix" />
    ///  . </summary>
    ///  <param name="points">The points to transform. The original points in the array are replaced by their transformed values.</param>
    procedure Transform(points: TArray<DNPoint>); overload;
    ///<summary>Transforms the specified vector by this <see cref="T:System.Windows.Media.Matrix" />
    ///  .</summary>
    ///  <param name="vector">The vector to transform.</param>
    ///<returns>The result of transforming <paramref name="vector" />
    ///  by this <see cref="T:System.Windows.Media.Matrix" />
    ///  .</returns>
    function Transform(vector: DNVector): DNVector; overload;
    ///<summary>Transforms the specified vectors by this <see cref="T:System.Windows.Media.Matrix" />
    ///  .</summary>
    ///  <param name="vectors">The vectors to transform. The original vectors in the array are replaced by their transformed values.</param>
    procedure Transform(vectors: TArray<DNVector>); overload;
    ///<summary> Inverts this <see cref="T:System.Windows.Media.Matrix" />
    ///  structure. </summary>
    ///<exception cref="T:System.InvalidOperationException">The <see cref="T:System.Windows.Media.Matrix" />
    ///  structure is not invertible.</exception>
    procedure Invert;
    ///<summary> Determines whether the specified <see cref="T:System.Object" />
    ///  is a <see cref="T:System.Windows.Media.Matrix" />
    ///  structure that is identical to this <see cref="T:System.Windows.Media.Matrix" />
    ///  . </summary>
    ///  <param name="o">The <see cref="T:System.Object" />
    ///  to compare.</param>
    ///<returns><see langword="true" />
    ///  if <paramref name="o" />
    ///  is a <see cref="T:System.Windows.Media.Matrix" />
    ///  structure that is identical to this <see cref="T:System.Windows.Media.Matrix" />
    ///  structure; otherwise, <see langword="false" />
    ///  .</returns>
    function Equals(o: DDN.mscorlib.DNObject): Boolean; overload;
    ///<summary> Determines whether the specified <see cref="T:System.Windows.Media.Matrix" />
    ///  structure is identical to this instance. </summary>
    ///  <param name="value">The instance of <see cref="T:System.Windows.Media.Matrix" />
    ///  to compare to this instance.</param>
    ///<returns><see langword="true" />
    ///  if instances are equal; otherwise, <see langword="false" />
    ///  . </returns>
    function Equals(value: DNMatrix): Boolean; overload;
    ///<summary> Returns the hash code for this <see cref="T:System.Windows.Media.Matrix" />
    ///  structure. </summary>
    ///<returns>The hash code for this instance.</returns>
    function GetHashCode: Int32;
    ///<summary> Creates a <see cref="T:System.String" />
    ///  representation of this <see cref="T:System.Windows.Media.Matrix" />
    ///  structure. </summary>
    ///<returns>A <see cref="T:System.String" />
    ///  containing the <see cref="P:System.Windows.Media.Matrix.M11" />
    ///  , <see cref="P:System.Windows.Media.Matrix.M12" />
    ///  , <see cref="P:System.Windows.Media.Matrix.M21" />
    ///  , <see cref="P:System.Windows.Media.Matrix.M22" />
    ///  , <see cref="P:System.Windows.Media.Matrix.OffsetX" />
    ///  , and <see cref="P:System.Windows.Media.Matrix.OffsetY" />
    ///  values of this <see cref="T:System.Windows.Media.Matrix" />
    ///  .</returns>
    function ToString: string; overload;
    ///<summary> Creates a <see cref="T:System.String" />
    ///  representation of this <see cref="T:System.Windows.Media.Matrix" />
    ///  structure with culture-specific formatting information. </summary>
    ///  <param name="provider">The culture-specific formatting information.</param>
    ///<returns>A <see cref="T:System.String" />
    ///  containing the <see cref="P:System.Windows.Media.Matrix.M11" />
    ///  , <see cref="P:System.Windows.Media.Matrix.M12" />
    ///  , <see cref="P:System.Windows.Media.Matrix.M21" />
    ///  , <see cref="P:System.Windows.Media.Matrix.M22" />
    ///  , <see cref="P:System.Windows.Media.Matrix.OffsetX" />
    ///  , and <see cref="P:System.Windows.Media.Matrix.OffsetY" />
    ///  values of this <see cref="T:System.Windows.Media.Matrix" />
    ///  .</returns>
    function ToString(provider: DDN.mscorlib.DNIFormatProvider): string; overload;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    ///<summary> Gets a value that indicates whether this <see cref="T:System.Windows.Media.Matrix" />
    ///  structure is an identity matrix. </summary>
    ///<returns><see langword="true" />
    ///  if the <see cref="T:System.Windows.Media.Matrix" />
    ///  structure is an identity matrix; otherwise, <see langword="false" />
    ///  . The default is <see langword="true" />
    ///  .</returns>
    property IsIdentity: Boolean read get_IsIdentity;
    ///<summary> Gets the determinant of this <see cref="T:System.Windows.Media.Matrix" />
    ///  structure. </summary>
    ///<returns>The determinant of this <see cref="T:System.Windows.Media.Matrix" />
    ///  .</returns>
    property Determinant: Double read get_Determinant;
    ///<summary> Gets a value that indicates whether this <see cref="T:System.Windows.Media.Matrix" />
    ///  structure is invertible. </summary>
    ///<returns><see langword="true" />
    ///  if the <see cref="T:System.Windows.Media.Matrix" />
    ///  has an inverse; otherwise, <see langword="false" />
    ///  . The default is <see langword="true" />
    ///  .</returns>
    property HasInverse: Boolean read get_HasInverse;
    ///<summary>Gets or sets the value of the first row and first column of this <see cref="T:System.Windows.Media.Matrix" />
    ///  structure. </summary>
    ///<returns>The value of the first row and first column of this <see cref="T:System.Windows.Media.Matrix" />
    ///  . The default value is 1.</returns>
    property M11: Double read get_M11 write set_M11;
    ///<summary> Gets or sets the value of the first row and second column of this <see cref="T:System.Windows.Media.Matrix" />
    ///  structure. </summary>
    ///<returns>The value of the first row and second column of this <see cref="T:System.Windows.Media.Matrix" />
    ///  . The default value is 0.</returns>
    property M12: Double read get_M12 write set_M12;
    ///<summary> Gets or sets the value of the second row and first column of this <see cref="T:System.Windows.Media.Matrix" />
    ///  structure.</summary>
    ///<returns>The value of the second row and first column of this <see cref="T:System.Windows.Media.Matrix" />
    ///  . The default value is 0.</returns>
    property M21: Double read get_M21 write set_M21;
    ///<summary>Gets or sets the value of the second row and second column of this <see cref="T:System.Windows.Media.Matrix" />
    ///  structure. </summary>
    ///<returns>The value of the second row and second column of this <see cref="T:System.Windows.Media.Matrix" />
    ///  structure. The default value is 1.</returns>
    property M22: Double read get_M22 write set_M22;
    ///<summary>Gets or sets the value of the third row and first column of this <see cref="T:System.Windows.Media.Matrix" />
    ///  structure.  </summary>
    ///<returns>The value of the third row and first column of this <see cref="T:System.Windows.Media.Matrix" />
    ///  structure. The default value is 0.</returns>
    property OffsetX: Double read get_OffsetX write set_OffsetX;
    ///<summary>Gets or sets the value of the third row and second column of this <see cref="T:System.Windows.Media.Matrix" />
    ///  structure. </summary>
    ///<returns>The value of the third row and second column of this <see cref="T:System.Windows.Media.Matrix" />
    ///  structure. The default value is 0.</returns>
    property OffsetY: Double read get_OffsetY write set_OffsetY;
  end;

  TDNMatrix = class(TDNGenericImport<DNMatrixClass, DNMatrix>) end;

  //-------------namespace: System.Windows----------------
  DNPointClass = interface(DDN.mscorlib.DNValueTypeClass)
  ['{BF3D9A6A-3303-5D36-9170-E071F4B612E7}']
  { constructors } 

    ///<summary>Creates a new <see cref="T:System.Windows.Point" />
    ///  structure that contains the specified coordinates. </summary>
    ///  <param name="x">The x-coordinate of the new <see cref="T:System.Windows.Point" />
    ///  structure. </param>
    ///  <param name="y">The y-coordinate of the new <see cref="T:System.Windows.Point" />
    ///  structure. </param>
    {class} function init(x: Double; y: Double): DNPoint;

  { static methods } 

    ///<summary>Compares two <see cref="T:System.Windows.Point" />
    ///  structures for equality. </summary>
    ///  <param name="point1">The first point to compare.</param>
    ///  <param name="point2">The second point to compare.</param>
    ///<returns><see langword="true" />
    ///  if <paramref name="point1" />
    ///  and <paramref name="point2" />
    ///  contain the same <see cref="P:System.Windows.Point.X" />
    ///  and <see cref="P:System.Windows.Point.Y" />
    ///  values; otherwise, <see langword="false" />
    ///  .</returns>
    {class} function Equals(point1: DNPoint; point2: DNPoint): Boolean; overload;
    ///<summary>Constructs a <see cref="T:System.Windows.Point" />
    ///  from the specified <see cref="T:System.String" />
    ///  .</summary>
    ///  <param name="source">A string representation of a point.</param>
    ///<returns>The equivalent <see cref="T:System.Windows.Point" />
    ///  structure. </returns>
    ///<exception cref="T:System.FormatException"><paramref name="source" />
    ///  is not composed of two comma- or space-delimited double values.</exception><exception cref="T:System.InvalidOperationException"><paramref name="source" />
    ///  does not contain two numbers.-or-
    ///  <paramref name="source" />
    ///  contains too many delimiters.</exception>
    {class} function Parse(source: string): DNPoint;
    ///<summary>Adds a <see cref="T:System.Windows.Vector" />
    ///  to a <see cref="T:System.Windows.Point" />
    ///  and returns the result as a <see cref="T:System.Windows.Point" />
    ///  structure.</summary>
    ///  <param name="point">The <see cref="T:System.Windows.Point" />
    ///  structure to add.</param>
    ///  <param name="vector">The <see cref="T:System.Windows.Vector" />
    ///  structure to add. </param>
    ///<returns>Returns the sum of <paramref name="point" />
    ///  and <paramref name="vector" />
    ///  .</returns>
    {class} function Add(point: DNPoint; vector: DNVector): DNPoint;
    ///<summary>Subtracts the specified <see cref="T:System.Windows.Vector" />
    ///  from the specified <see cref="T:System.Windows.Point" />
    ///  and returns the resulting <see cref="T:System.Windows.Point" />
    ///  . </summary>
    ///  <param name="point">The point from which <paramref name="vector" />
    ///  is subtracted.</param>
    ///  <param name="vector">The <paramref name="vector" />
    ///  to subtract from <paramref name="point" />
    ///  .</param>
    ///<returns>The difference between <paramref name="point" />
    ///  and <paramref name="vector" />
    ///  .</returns>
    {class} function Subtract(point: DNPoint; vector: DNVector): DNPoint; overload;
    ///<summary>Subtracts the specified <see cref="T:System.Windows.Point" />
    ///  from another specified <see cref="T:System.Windows.Point" />
    ///  and returns the difference as a <see cref="T:System.Windows.Vector" />
    ///  .</summary>
    ///  <param name="point1">The point from which <paramref name="point2" />
    ///  is subtracted. </param>
    ///  <param name="point2">The point to subtract from <paramref name="point1" />
    ///  .</param>
    ///<returns>The difference between <paramref name="point1" />
    ///  and <paramref name="point2" />
    ///  .</returns>
    {class} function Subtract(point1: DNPoint; point2: DNPoint): DNVector; overload;
    ///<summary>Transforms the specified <see cref="T:System.Windows.Point" />
    ///  structure by the specified <see cref="T:System.Windows.Media.Matrix" />
    ///  structure.</summary>
    ///  <param name="point">The point to transform.</param>
    ///  <param name="matrix">The transformation matrix.</param>
    ///<returns>The transformed point. </returns>
    {class} function Multiply(point: DNPoint; matrix: DNMatrix): DNPoint;

  end;

  ///<summary>Represents an x- and y-coordinate pair in two-dimensional space.</summary>
  [DNTypeName('System.Windows.Point')]
  DNPoint = interface(DDN.mscorlib.DNValueType)
  ['{8C9042D3-3635-3580-934F-8A49A1CD8E97}']
  { getters & setters } 

    function get_X: Double;
    procedure set_X(value: Double);
    function get_Y: Double;
    procedure set_Y(value: Double);

  { methods } 

    ///<summary>Determines whether the specified <see cref="T:System.Object" />
    ///  is a <see cref="T:System.Windows.Point" />
    ///  and whether it contains the same coordinates as this <see cref="T:System.Windows.Point" />
    ///  . </summary>
    ///  <param name="o">The <see cref="T:System.Object" />
    ///  to compare.</param>
    ///<returns><see langword="true" />
    ///  if <paramref name="o" />
    ///  is a <see cref="T:System.Windows.Point" />
    ///  and contains the same <see cref="P:System.Windows.Point.X" />
    ///  and <see cref="P:System.Windows.Point.Y" />
    ///  values as this <see cref="T:System.Windows.Point" />
    ///  ; otherwise, <see langword="false" />
    ///  .</returns>
    function Equals(o: DDN.mscorlib.DNObject): Boolean; overload;
    ///<summary>Compares two <see cref="T:System.Windows.Point" />
    ///  structures for equality.</summary>
    ///  <param name="value">The point to compare to this instance.</param>
    ///<returns><see langword="true" />
    ///  if both <see cref="T:System.Windows.Point" />
    ///  structures contain the same <see cref="P:System.Windows.Point.X" />
    ///  and <see cref="P:System.Windows.Point.Y" />
    ///  values; otherwise, <see langword="false" />
    ///  .</returns>
    function Equals(value: DNPoint): Boolean; overload;
    ///<summary>Returns the hash code for this <see cref="T:System.Windows.Point" />
    ///  .</summary>
    ///<returns>The hash code for this <see cref="T:System.Windows.Point" />
    ///  structure.</returns>
    function GetHashCode: Int32;
    ///<summary>Creates a <see cref="T:System.String" />
    ///  representation of this <see cref="T:System.Windows.Point" />
    ///  . </summary>
    ///<returns>A <see cref="T:System.String" />
    ///  containing the <see cref="P:System.Windows.Point.X" />
    ///  and <see cref="P:System.Windows.Point.Y" />
    ///  values of this <see cref="T:System.Windows.Point" />
    ///  structure.</returns>
    function ToString: string; overload;
    ///<summary>Creates a <see cref="T:System.String" />
    ///  representation of this <see cref="T:System.Windows.Point" />
    ///  . </summary>
    ///  <param name="provider">Culture-specific formatting information.</param>
    ///<returns>A <see cref="T:System.String" />
    ///  containing the <see cref="P:System.Windows.Point.X" />
    ///  and <see cref="P:System.Windows.Point.Y" />
    ///  values of this <see cref="T:System.Windows.Point" />
    ///  structure.</returns>
    function ToString(provider: DDN.mscorlib.DNIFormatProvider): string; overload;
    ///<summary>Offsets a point's <see cref="P:System.Windows.Point.X" />
    ///  and <see cref="P:System.Windows.Point.Y" />
    ///  coordinates by the specified amounts.</summary>
    ///  <param name="offsetX">The amount to offset the point's
    ///<see cref="P:System.Windows.Point.X" />
    ///  coordinate. </param>
    ///  <param name="offsetY">The amount to offset thepoint's <see cref="P:System.Windows.Point.Y" />
    ///  coordinate.</param>
    procedure Offset(offsetX: Double; offsetY: Double);
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    ///<summary>Gets or sets the <see cref="P:System.Windows.Point.X" />
    ///  -coordinate value of this <see cref="T:System.Windows.Point" />
    ///  structure. </summary>
    ///<returns>The <see cref="P:System.Windows.Point.X" />
    ///  -coordinate value of this <see cref="T:System.Windows.Point" />
    ///  structure.  The default value is 0.</returns>
    property X: Double read get_X write set_X;
    ///<summary>Gets or sets the <see cref="P:System.Windows.Point.Y" />
    ///  -coordinate value of this <see cref="T:System.Windows.Point" />
    ///  . </summary>
    ///<returns>The <see cref="P:System.Windows.Point.Y" />
    ///  -coordinate value of this <see cref="T:System.Windows.Point" />
    ///  structure.  The default value is 0.</returns>
    property Y: Double read get_Y write set_Y;
  end;

  TDNPoint = class(TDNGenericImport<DNPointClass, DNPoint>) end;

  //-------------namespace: System.Windows----------------
  DNRectClass = interface(DDN.mscorlib.DNValueTypeClass)
  ['{419A9400-87EB-53CC-B620-A2368A596521}']
  { static getter & setter } 

    {class} function get_Empty: DNRect;

  { constructors } 

    ///<summary>Initializes a new instance of the <see cref="T:System.Windows.Rect" />
    ///  structure that has the specified top-left corner location and the specified width and height. </summary>
    ///  <param name="location">A point that specifies the location of the top-left corner of the rectangle.</param>
    ///  <param name="size">A <see cref="T:System.Windows.Size" />
    ///  structure that specifies the width and height of the rectangle.</param>
    {class} function init(location: DNPoint; size: DNSize): DNRect; overload;
    ///<summary>Initializes a new instance of the <see cref="T:System.Windows.Rect" />
    ///  structure that has the specified x-coordinate, y-coordinate, width, and height. </summary>
    ///  <param name="x">The x-coordinate of the top-left corner of the rectangle.</param>
    ///  <param name="y">The y-coordinate of the top-left corner of the rectangle.</param>
    ///  <param name="width">The width of the rectangle.</param>
    ///  <param name="height">The height of the rectangle.</param>
    ///<exception cref="T:System.ArgumentException"><paramref name="width" />
    ///  is a negative value.-or-
    ///  <paramref name="height" />
    ///  is a negative value.</exception>
    {class} function init(x: Double; y: Double; width: Double; height: Double): DNRect; overload;
    ///<summary>Initializes a new instance of the <see cref="T:System.Windows.Rect" />
    ///  structure that is exactly large enough to contain the two specified points. </summary>
    ///  <param name="point1">The first point that the new rectangle must contain.</param>
    ///  <param name="point2">The second point that the new rectangle must contain.</param>
    {class} function init(point1: DNPoint; point2: DNPoint): DNRect; overload;
    ///<summary>Initializes a new instance of the <see cref="T:System.Windows.Rect" />
    ///  structure that is exactly large enough to contain the specified point and the sum of the specified point and the specified vector. </summary>
    ///  <param name="point">The first point the rectangle must contain.</param>
    ///  <param name="vector">The amount to offset the specified point. The resulting rectangle will be exactly large enough to contain both points.</param>
    {class} function init(point: DNPoint; vector: DNVector): DNRect; overload;
    ///<summary>Initializes a new instance of the <see cref="T:System.Windows.Rect" />
    ///  structure that is of the specified size and is located at (0,0).  </summary>
    ///  <param name="size">A <see cref="T:System.Windows.Size" />
    ///  structure that specifies the width and height of the rectangle.</param>
    {class} function init(size: DNSize): DNRect; overload;

  { static methods } 

    ///<summary>Indicates whether the specified rectangles are equal. </summary>
    ///  <param name="rect1">The first rectangle to compare.</param>
    ///  <param name="rect2">The second rectangle to compare.</param>
    ///<returns><see langword="true" />
    ///  if the rectangles have the same <see cref="P:System.Windows.Rect.Location" />
    ///  and <see cref="P:System.Windows.Rect.Size" />
    ///  values; otherwise, <see langword="false" />
    ///  .</returns>
    {class} function Equals(rect1: DNRect; rect2: DNRect): Boolean; overload;
    ///<summary>Returns the intersection of the specified rectangles. </summary>
    ///  <param name="rect1">The first rectangle to compare.</param>
    ///  <param name="rect2">The second rectangle to compare.</param>
    ///<returns>The intersection of the two rectangles, or <see cref="P:System.Windows.Rect.Empty" />
    ///  if no intersection exists.</returns>
    {class} function Intersect(rect1: DNRect; rect2: DNRect): DNRect; overload;
    ///<summary>Creates a rectangle that is exactly large enough to contain the two specified rectangles. </summary>
    ///  <param name="rect1">The first rectangle to include.</param>
    ///  <param name="rect2">The second rectangle to include.</param>
    ///<returns>The resulting rectangle.</returns>
    {class} function Union(rect1: DNRect; rect2: DNRect): DNRect; overload;
    ///<summary>Creates a rectangle that is exactly large enough to include the specified rectangle and the specified point. </summary>
    ///  <param name="rect">The rectangle to include.</param>
    ///  <param name="point">The point to include.</param>
    ///<returns>A rectangle that is exactly large enough to contain the specified rectangle and the specified point.</returns>
    {class} function Union(rect: DNRect; point: DNPoint): DNRect; overload;
    ///<summary>Returns a rectangle that is offset from the specified rectangle by using the specified vector. </summary>
    ///  <param name="rect">The original rectangle.</param>
    ///  <param name="offsetVector">A vector that specifies the horizontal and vertical offsets for the new rectangle.</param>
    ///<returns>The resulting rectangle.</returns>
    ///<exception cref="T:System.InvalidOperationException"><paramref name="rect" />
    ///  is <see cref="P:System.Windows.Rect.Empty" />
    ///  .</exception>
    {class} function Offset(rect: DNRect; offsetVector: DNVector): DNRect; overload;
    ///<summary>Returns a rectangle that is offset from the specified rectangle by using the specified horizontal and vertical amounts. </summary>
    ///  <param name="rect">The rectangle to move.</param>
    ///  <param name="offsetX">The horizontal offset for the new rectangle.</param>
    ///  <param name="offsetY">The vertical offset for the new rectangle.</param>
    ///<returns>The resulting rectangle.</returns>
    ///<exception cref="T:System.InvalidOperationException"><paramref name="rect" />
    ///  is <see cref="P:System.Windows.Rect.Empty" />
    ///  .</exception>
    {class} function Offset(rect: DNRect; offsetX: Double; offsetY: Double): DNRect; overload;
    ///<summary>Returns the rectangle that results from expanding the specified rectangle by the specified <see cref="T:System.Windows.Size" />
    ///  , in all directions. </summary>
    ///  <param name="rect">The <see cref="T:System.Windows.Rect" />
    ///  structure to modify.</param>
    ///  <param name="size">Specifies the amount to expand the rectangle. The <see cref="T:System.Windows.Size" />
    ///  structure's <see cref="P:System.Windows.Size.Width" />
    ///  property specifies the amount to increase the rectangle's <see cref="P:System.Windows.Rect.Left" />
    ///  and <see cref="P:System.Windows.Rect.Right" />
    ///  properties. The <see cref="T:System.Windows.Size" />
    ///  structure's <see cref="P:System.Windows.Size.Height" />
    ///  property specifies the amount to increase the rectangle's <see cref="P:System.Windows.Rect.Top" />
    ///  and <see cref="P:System.Windows.Rect.Bottom" />
    ///  properties.</param>
    ///<returns>The resulting rectangle.</returns>
    ///<exception cref="T:System.InvalidOperationException"><paramref name="rect" />
    ///  is an <see cref="P:System.Windows.Rect.Empty" />
    ///  rectangle.</exception>
    {class} function Inflate(rect: DNRect; size: DNSize): DNRect; overload;
    ///<summary>Creates a rectangle that results from expanding or shrinking the specified rectangle by the specified width and height amounts, in all directions. </summary>
    ///  <param name="rect">The <see cref="T:System.Windows.Rect" />
    ///  structure to modify.</param>
    ///  <param name="width">The amount by which to expand or shrink the left and right sides of the rectangle.</param>
    ///  <param name="height">The amount by which to expand or shrink the top and bottom sides of the rectangle.</param>
    ///<returns>The resulting rectangle. </returns>
    ///<exception cref="T:System.InvalidOperationException"><paramref name="rect" />
    ///  is an <see cref="P:System.Windows.Rect.Empty" />
    ///  rectangle.</exception>
    {class} function Inflate(rect: DNRect; width: Double; height: Double): DNRect; overload;
    ///<summary>Returns the rectangle that results from applying the specified matrix to the specified rectangle. </summary>
    ///  <param name="rect">A rectangle that is the basis for the transformation.</param>
    ///  <param name="matrix">A matrix that specifies the transformation to apply.</param>
    ///<returns>The rectangle that results from the operation.</returns>
    {class} function Transform(rect: DNRect; matrix: DNMatrix): DNRect; overload;
    ///<summary>Creates a new rectangle from the specified string representation. </summary>
    ///  <param name="source">The string representation of the rectangle, in the form "x, y, width, height".</param>
    ///<returns>The resulting rectangle.</returns>
    {class} function Parse(source: string): DNRect;

  { static propertys } 

    ///<summary>Gets a special value that represents a rectangle with no position or area. </summary>
    ///<returns>The empty rectangle, which has <see cref="P:System.Windows.Rect.X" />
    ///  and <see cref="P:System.Windows.Rect.Y" />
    ///  property values of <see cref="F:System.Double.PositiveInfinity" />
    ///  , and has <see cref="P:System.Windows.Rect.Width" />
    ///  and <see cref="P:System.Windows.Rect.Height" />
    ///  property values of <see cref="F:System.Double.NegativeInfinity" />
    ///  .</returns>
    {class} property Empty: DNRect read get_Empty;
  end;

  ///<summary>Describes the width, height, and location of a rectangle. </summary>
  [DNTypeName('System.Windows.Rect')]
  DNRect = interface(DDN.mscorlib.DNValueType)
  ['{8BD3E975-4EAE-354C-B79B-8F2BA096461F}']
  { getters & setters } 

    function get_IsEmpty: Boolean;
    function get_Location: DNPoint;
    procedure set_Location(value: DNPoint);
    function get_Size: DNSize;
    procedure set_Size(value: DNSize);
    function get_X: Double;
    procedure set_X(value: Double);
    function get_Y: Double;
    procedure set_Y(value: Double);
    function get_Width: Double;
    procedure set_Width(value: Double);
    function get_Height: Double;
    procedure set_Height(value: Double);
    function get_Left: Double;
    function get_Top: Double;
    function get_Right: Double;
    function get_Bottom: Double;
    function get_TopLeft: DNPoint;
    function get_TopRight: DNPoint;
    function get_BottomLeft: DNPoint;
    function get_BottomRight: DNPoint;

  { methods } 

    ///<summary>Indicates whether the specified object is equal to the current rectangle.</summary>
    ///  <param name="o">The object to compare to the current rectangle.</param>
    ///<returns><see langword="true" />
    ///  if <paramref name="o" />
    ///  is a <see cref="T:System.Windows.Rect" />
    ///  and has the same <see cref="P:System.Windows.Rect.Location" />
    ///  and <see cref="P:System.Windows.Rect.Size" />
    ///  values as the current rectangle; otherwise, <see langword="false" />
    ///  .</returns>
    function Equals(o: DDN.mscorlib.DNObject): Boolean; overload;
    ///<summary>Indicates whether the specified rectangle is equal to the current rectangle. </summary>
    ///  <param name="value">The rectangle to compare to the current rectangle.</param>
    ///<returns><see langword="true" />
    ///  if the specified rectangle has the same <see cref="P:System.Windows.Rect.Location" />
    ///  and <see cref="P:System.Windows.Rect.Size" />
    ///  values as the current rectangle; otherwise, <see langword="false" />
    ///  .</returns>
    function Equals(value: DNRect): Boolean; overload;
    ///<summary>Creates a hash code for the rectangle. </summary>
    ///<returns>A hash code for the current <see cref="T:System.Windows.Rect" />
    ///  structure.</returns>
    function GetHashCode: Int32;
    ///<summary>Returns a string representation of the rectangle. </summary>
    ///<returns>A string representation of the current rectangle. The string has the following form: "<see cref="P:System.Windows.Rect.X" />
    ///  ,<see cref="P:System.Windows.Rect.Y" />
    ///  ,<see cref="P:System.Windows.Rect.Width" />
    ///  ,<see cref="P:System.Windows.Rect.Height" />
    ///  ".</returns>
    function ToString: string; overload;
    ///<summary>Returns a string representation of the rectangle by using the specified format provider. </summary>
    ///  <param name="provider">Culture-specific formatting information.</param>
    ///<returns>A string representation of the current rectangle that is determined by the specified format provider.</returns>
    function ToString(provider: DDN.mscorlib.DNIFormatProvider): string; overload;
    ///<summary>Indicates whether the rectangle contains the specified point.</summary>
    ///  <param name="point">The point to check.</param>
    ///<returns><see langword="true" />
    ///  if the rectangle contains the specified point; otherwise, <see langword="false" />
    ///  .</returns>
    function &Contains(point: DNPoint): Boolean; overload;
    ///<summary>Indicates whether the rectangle contains the specified x-coordinate and y-coordinate. </summary>
    ///  <param name="x">The x-coordinate of the point to check.</param>
    ///  <param name="y">The y-coordinate of the point to check.</param>
    ///<returns><see langword="true" />
    ///  if (<paramref name="x" />
    ///  , <paramref name="y" />
    ///  ) is contained by the rectangle; otherwise, <see langword="false" />
    ///  .</returns>
    function &Contains(x: Double; y: Double): Boolean; overload;
    ///<summary>Indicates whether the rectangle contains the specified rectangle. </summary>
    ///  <param name="rect">The rectangle to check.</param>
    ///<returns><see langword="true" />
    ///  if <paramref name="rect" />
    ///  is entirely contained by the rectangle; otherwise, <see langword="false" />
    ///  .</returns>
    function &Contains(rect: DNRect): Boolean; overload;
    ///<summary>Indicates whether the specified rectangle intersects with the current rectangle. </summary>
    ///  <param name="rect">The rectangle to check.</param>
    ///<returns><see langword="true" />
    ///  if the specified rectangle intersects with the current rectangle; otherwise, <see langword="false" />
    ///  .</returns>
    function IntersectsWith(rect: DNRect): Boolean;
    ///<summary>Finds the intersection of the current rectangle and the specified rectangle, and stores the result as the current rectangle. </summary>
    ///  <param name="rect">The rectangle to intersect with the current rectangle.</param>
    procedure Intersect(rect: DNRect); overload;
    ///<summary>Expands the current rectangle exactly enough to contain the specified rectangle. </summary>
    ///  <param name="rect">The rectangle to include.</param>
    procedure Union(rect: DNRect); overload;
    ///<summary>Expands the current rectangle exactly enough to contain the specified point. </summary>
    ///  <param name="point">The point to include.</param>
    procedure Union(point: DNPoint); overload;
    ///<summary>Moves the rectangle by the specified vector. </summary>
    ///  <param name="offsetVector">A vector that specifies the horizontal and vertical amounts to move the rectangle.</param>
    ///<exception cref="T:System.InvalidOperationException">This method is called on the <see cref="P:System.Windows.Rect.Empty" />
    ///  rectangle.</exception>
    procedure Offset(offsetVector: DNVector); overload;
    ///<summary>Moves the rectangle by the specified horizontal and vertical amounts. </summary>
    ///  <param name="offsetX">The amount to move the rectangle horizontally.</param>
    ///  <param name="offsetY">The amount to move the rectangle vertically.</param>
    ///<exception cref="T:System.InvalidOperationException">This method is called on the <see cref="P:System.Windows.Rect.Empty" />
    ///  rectangle.</exception>
    procedure Offset(offsetX: Double; offsetY: Double); overload;
    ///<summary>Expands the rectangle by using the specified <see cref="T:System.Windows.Size" />
    ///  , in all directions. </summary>
    ///  <param name="size">Specifies the amount to expand the rectangle. The <see cref="T:System.Windows.Size" />
    ///  structure's <see cref="P:System.Windows.Size.Width" />
    ///  property specifies the amount to increase the rectangle's <see cref="P:System.Windows.Rect.Left" />
    ///  and <see cref="P:System.Windows.Rect.Right" />
    ///  properties. The <see cref="T:System.Windows.Size" />
    ///  structure's <see cref="P:System.Windows.Size.Height" />
    ///  property specifies the amount to increase the rectangle's <see cref="P:System.Windows.Rect.Top" />
    ///  and <see cref="P:System.Windows.Rect.Bottom" />
    ///  properties. </param>
    ///<exception cref="T:System.InvalidOperationException">This method is called on the <see cref="P:System.Windows.Rect.Empty" />
    ///  rectangle.</exception>
    procedure Inflate(size: DNSize); overload;
    ///<summary>Expands or shrinks the rectangle by using the specified width and height amounts, in all directions. </summary>
    ///  <param name="width">The amount by which to expand or shrink the left and right sides of the rectangle.</param>
    ///  <param name="height">The amount by which to expand or shrink the top and bottom sides of the rectangle.</param>
    ///<exception cref="T:System.InvalidOperationException">This method is called on the <see cref="P:System.Windows.Rect.Empty" />
    ///  rectangle.</exception>
    procedure Inflate(width: Double; height: Double); overload;
    ///<summary>Transforms the rectangle by applying the specified matrix. </summary>
    ///  <param name="matrix">A matrix that specifies the transformation to apply.</param>
    procedure Transform(matrix: DNMatrix); overload;
    ///<summary>Multiplies the size of the current rectangle by the specified x and y values.</summary>
    ///  <param name="scaleX">The scale factor in the x-direction.</param>
    ///  <param name="scaleY">The scale factor in the y-direction.</param>
    procedure Scale(scaleX: Double; scaleY: Double);
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    ///<summary>Gets a value that indicates whether the rectangle is the <see cref="P:System.Windows.Rect.Empty" />
    ///  rectangle.</summary>
    ///<returns><see langword="true" />
    ///  if the rectangle is the <see cref="P:System.Windows.Rect.Empty" />
    ///  rectangle; otherwise, <see langword="false" />
    ///  .</returns>
    property IsEmpty: Boolean read get_IsEmpty;
    ///<summary>Gets or sets the position of the top-left corner of the rectangle.</summary>
    ///<returns>The position of the top-left corner of the rectangle. The default is (0, 0). </returns>
    ///<exception cref="T:System.InvalidOperationException"><see cref="P:System.Windows.Rect.Location" />
    ///  is set on an <see cref="P:System.Windows.Rect.Empty" />
    ///  rectangle. </exception>
    property Location: DNPoint read get_Location write set_Location;
    ///<summary>Gets or sets the width and height of the rectangle. </summary>
    ///<returns>A <see cref="T:System.Windows.Size" />
    ///  structure that specifies the width and height of the rectangle.</returns>
    ///<exception cref="T:System.InvalidOperationException"><see cref="P:System.Windows.Rect.Size" />
    ///  is set on an <see cref="P:System.Windows.Rect.Empty" />
    ///  rectangle. </exception>
    property Size: DNSize read get_Size write set_Size;
    ///<summary>Gets or sets the x-axis value of the left side of the rectangle. </summary>
    ///<returns>The x-axis value of the left side of the rectangle.</returns>
    ///<exception cref="T:System.InvalidOperationException"><see cref="P:System.Windows.Rect.X" />
    ///  is set on an <see cref="P:System.Windows.Rect.Empty" />
    ///  rectangle. </exception>
    property X: Double read get_X write set_X;
    ///<summary>Gets or sets the y-axis value of the top side of the rectangle. </summary>
    ///<returns>The y-axis value of the top side of the rectangle.</returns>
    ///<exception cref="T:System.InvalidOperationException"><see cref="P:System.Windows.Rect.Y" />
    ///  is set on an <see cref="P:System.Windows.Rect.Empty" />
    ///  rectangle. </exception>
    property Y: Double read get_Y write set_Y;
    ///<summary>Gets or sets the width of the rectangle.  </summary>
    ///<returns>A positive number that represents the width of the rectangle. The default is 0.</returns>
    ///<exception cref="T:System.ArgumentException"><see cref="P:System.Windows.Rect.Width" />
    ///  is set to a negative value.</exception><exception cref="T:System.InvalidOperationException"><see cref="P:System.Windows.Rect.Width" />
    ///  is set on an <see cref="P:System.Windows.Rect.Empty" />
    ///  rectangle. </exception>
    property Width: Double read get_Width write set_Width;
    ///<summary>Gets or sets the height of the rectangle. </summary>
    ///<returns>A positive number that represents the height of the rectangle. The default is 0.</returns>
    ///<exception cref="T:System.ArgumentException"><see cref="P:System.Windows.Rect.Height" />
    ///  is set to a negative value.</exception><exception cref="T:System.InvalidOperationException"><see cref="P:System.Windows.Rect.Height" />
    ///  is set on an <see cref="P:System.Windows.Rect.Empty" />
    ///  rectangle. </exception>
    property Height: Double read get_Height write set_Height;
    ///<summary>Gets the x-axis value of the left side of the rectangle. </summary>
    ///<returns>The x-axis value of the left side of the rectangle.</returns>
    property Left: Double read get_Left;
    ///<summary>Gets the y-axis position of the top of the rectangle. </summary>
    ///<returns>The y-axis position of the top of the rectangle.</returns>
    property Top: Double read get_Top;
    ///<summary>Gets the x-axis value of the right side of the rectangle.  </summary>
    ///<returns>The x-axis value of the right side of the rectangle.</returns>
    property Right: Double read get_Right;
    ///<summary>Gets the y-axis value of the bottom of the rectangle. </summary>
    ///<returns>The y-axis value of the bottom of the rectangle. If the rectangle is empty, the value is <see cref="F:System.Double.NegativeInfinity" />
    ///  .</returns>
    property Bottom: Double read get_Bottom;
    ///<summary>Gets the position of the top-left corner of the rectangle. </summary>
    ///<returns>The position of the top-left corner of the rectangle.</returns>
    property TopLeft: DNPoint read get_TopLeft;
    ///<summary>Gets the position of the top-right corner of the rectangle. </summary>
    ///<returns>The position of the top-right corner of the rectangle.</returns>
    property TopRight: DNPoint read get_TopRight;
    ///<summary>Gets the position of the bottom-left corner of the rectangle </summary>
    ///<returns>The position of the bottom-left corner of the rectangle.</returns>
    property BottomLeft: DNPoint read get_BottomLeft;
    ///<summary>Gets the position of the bottom-right corner of the rectangle. </summary>
    ///<returns>The position of the bottom-right corner of the rectangle.</returns>
    property BottomRight: DNPoint read get_BottomRight;
  end;

  TDNRect = class(TDNGenericImport<DNRectClass, DNRect>) end;

  //-------------namespace: System.Windows----------------
  DNSizeClass = interface(DDN.mscorlib.DNValueTypeClass)
  ['{8F140A85-9E83-524D-938A-26F90880709C}']
  { static getter & setter } 

    {class} function get_Empty: DNSize;

  { constructors } 

    ///<summary>Initializes a new instance of the <see cref="T:System.Windows.Size" />
    ///  structure and assigns it an initial <paramref name="width" />
    ///  and <paramref name="height" />
    ///  .</summary>
    ///  <param name="width">The initial width of the instance of <see cref="T:System.Windows.Size" />
    ///  .</param>
    ///  <param name="height">The initial height of the instance of <see cref="T:System.Windows.Size" />
    ///  .</param>
    {class} function init(width: Double; height: Double): DNSize;

  { static methods } 

    ///<summary>Compares two instances of <see cref="T:System.Windows.Size" />
    ///  for equality. </summary>
    ///  <param name="size1">The first instance of <see cref="T:System.Windows.Size" />
    ///  to compare.</param>
    ///  <param name="size2">The second instance of <see cref="T:System.Windows.Size" />
    ///  to compare.</param>
    ///<returns><see langword="true" />
    ///  if the instances of <see cref="T:System.Windows.Size" />
    ///  are equal; otherwise, <see langword="false" />
    ///  .</returns>
    {class} function Equals(size1: DNSize; size2: DNSize): Boolean; overload;
    ///<summary>Returns an instance of <see cref="T:System.Windows.Size" />
    ///  from a converted <see cref="T:System.String" />
    ///  . </summary>
    ///  <param name="source">A <see cref="T:System.String" />
    ///  value to parse to a <see cref="T:System.Windows.Size" />
    ///  value.</param>
    ///<returns>An instance of <see cref="T:System.Windows.Size" />
    ///  .</returns>
    {class} function Parse(source: string): DNSize;

  { static propertys } 

    ///<summary>Gets a value that represents a static empty <see cref="T:System.Windows.Size" />
    ///  . </summary>
    ///<returns>An empty instance of <see cref="T:System.Windows.Size" />
    ///  .</returns>
    {class} property Empty: DNSize read get_Empty;
  end;

  ///<summary>Implements a structure that is used to describe the <see cref="T:System.Windows.Size" />
  ///  of an object. </summary>
  [DNTypeName('System.Windows.Size')]
  DNSize = interface(DDN.mscorlib.DNValueType)
  ['{B9173617-7205-33E7-9783-1FDE49D29AE4}']
  { getters & setters } 

    function get_IsEmpty: Boolean;
    function get_Width: Double;
    procedure set_Width(value: Double);
    function get_Height: Double;
    procedure set_Height(value: Double);

  { methods } 

    ///<summary>Compares an object to an instance of <see cref="T:System.Windows.Size" />
    ///  for equality. </summary>
    ///  <param name="o">The <see cref="T:System.Object" />
    ///  to compare.</param>
    ///<returns><see langword="true" />
    ///  if the sizes are equal; otherwise, <see langword="false" />
    ///  .</returns>
    function Equals(o: DDN.mscorlib.DNObject): Boolean; overload;
    ///<summary>Compares a value to an instance of <see cref="T:System.Windows.Size" />
    ///  for equality. </summary>
    ///  <param name="value">The size to compare to this current instance of <see cref="T:System.Windows.Size" />
    ///  .</param>
    ///<returns><see langword="true" />
    ///  if the instances of <see cref="T:System.Windows.Size" />
    ///  are equal; otherwise, <see langword="false" />
    ///  .</returns>
    function Equals(value: DNSize): Boolean; overload;
    ///<summary>Gets the hash code for this instance of <see cref="T:System.Windows.Size" />
    ///  . </summary>
    ///<returns>The hash code for this instance of <see cref="T:System.Windows.Size" />
    ///  .</returns>
    function GetHashCode: Int32;
    ///<summary>Returns a <see cref="T:System.String" />
    ///  that represents this <see cref="T:System.Windows.Size" />
    ///  object. </summary>
    ///<returns>A <see cref="T:System.String" />
    ///  that specifies the width followed by the height.</returns>
    function ToString: string; overload;
    ///<summary>Returns a <see cref="T:System.String" />
    ///  that represents this instance of <see cref="T:System.Windows.Size" />
    ///  . </summary>
    ///  <param name="provider">An object that provides a way to control formatting.</param>
    ///<returns>A <see cref="T:System.String" />
    ///  that represents this <see cref="T:System.Windows.Size" />
    ///  object.</returns>
    function ToString(provider: DDN.mscorlib.DNIFormatProvider): string; overload;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    ///<summary>Gets a value that indicates whether this instance of <see cref="T:System.Windows.Size" />
    ///  is <see cref="P:System.Windows.Size.Empty" />
    ///  . </summary>
    ///<returns><see langword="true" />
    ///  if this instance of size is <see cref="P:System.Windows.Size.Empty" />
    ///  ; otherwise <see langword="false" />
    ///  .</returns>
    property IsEmpty: Boolean read get_IsEmpty;
    ///<summary>Gets or sets the <see cref="P:System.Windows.Size.Width" />
    ///  of this instance of <see cref="T:System.Windows.Size" />
    ///  . </summary>
    ///<returns>The <see cref="P:System.Windows.Size.Width" />
    ///  of this instance of <see cref="T:System.Windows.Size" />
    ///  . The default value is 0. The value cannot be negative.</returns>
    property Width: Double read get_Width write set_Width;
    ///<summary>Gets or sets the <see cref="P:System.Windows.Size.Height" />
    ///  of this instance of <see cref="T:System.Windows.Size" />
    ///  . </summary>
    ///<returns>The <see cref="P:System.Windows.Size.Height" />
    ///  of this instance of <see cref="T:System.Windows.Size" />
    ///  . The default is 0. The value cannot be negative.</returns>
    property Height: Double read get_Height write set_Height;
  end;

  TDNSize = class(TDNGenericImport<DNSizeClass, DNSize>) end;

  //-------------namespace: System.Windows.Threading----------------
  DNDispatcherPriorityAwaitableClass = interface(DDN.mscorlib.DNValueTypeClass)
  ['{68932EF2-4918-5B84-A847-E51EFDA132A4}']
  end;

  ///<summary>Represents an awaitable object that asynchronously yields control back to the current dispatcher and provides an opportunity for the dispatcher to process other events</summary>
  [DNTypeName('System.Windows.Threading.DispatcherPriorityAwaitable')]
  DNDispatcherPriorityAwaitable = interface(DDN.mscorlib.DNValueType)
  ['{5ADAA5A0-A182-3F7F-AC73-0D120170F338}']
  { methods } 

    ///<summary>Returns an object that waits for the completion of an asynchronous task.</summary>
    ///<returns>An object that waits for the completion of an asynchronous task.</returns>
    function GetAwaiter: DNDispatcherPriorityAwaiter;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function ToString: string;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  end;

  TDNDispatcherPriorityAwaitable = class(TDNGenericImport<DNDispatcherPriorityAwaitableClass, DNDispatcherPriorityAwaitable>) end;

  //-------------namespace: System.Windows.Threading----------------
  DNDispatcherPriorityAwaiterClass = interface(DDN.mscorlib.DNValueTypeClass)
  ['{46C5A669-629F-55FD-8BE5-14F424826A40}']
  end;

  ///<summary>Represents an object that waits for the completion of an asynchronous task.</summary>
  [DNTypeName('System.Windows.Threading.DispatcherPriorityAwaiter')]
  DNDispatcherPriorityAwaiter = interface(DDN.mscorlib.DNValueType)
  ['{BCA34C06-4AF6-3CF5-8D85-F30652B81880}']
  { getters & setters } 

    function get_IsCompleted: Boolean;

  { methods } 

    ///<summary>Ends the wait for the completion of the asynchronous task.</summary>
    procedure GetResult;
    ///<summary>Sets the action to perform when the <see cref="T:System.Windows.Threading.DispatcherPriorityAwaiter" />
    ///  object stops waiting for the asynchronous task to complete.</summary>
    ///  <param name="continuation">The action to perform when the wait operation completes.</param>
    procedure OnCompleted(continuation: DDN.mscorlib.DNAction);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function ToString: string;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    ///<summary>Gets a value that indicates whether the asynchronous task has completed.</summary>
    ///<returns><see langword="false" />
    ///  in all cases.</returns>
    property IsCompleted: Boolean read get_IsCompleted;
  end;

  TDNDispatcherPriorityAwaiter = class(TDNGenericImport<DNDispatcherPriorityAwaiterClass, DNDispatcherPriorityAwaiter>) end;

  //-------------namespace: System.Windows.Threading----------------
  DNDispatcherProcessingDisabledClass = interface(DDN.mscorlib.DNValueTypeClass)
  ['{BE141EE5-CD7F-525F-BED6-F45D886F0D5B}']
  end;

  ///<summary>Represents the Dispatcher when it is in a disable state and provides a means to re-enable dispatcher processing. </summary>
  [DNTypeName('System.Windows.Threading.DispatcherProcessingDisabled')]
  DNDispatcherProcessingDisabled = interface(DDN.mscorlib.DNValueType)
  ['{86728AEF-3F4A-3D48-BAA3-42814888B8B1}']
  { methods } 

    ///<summary>Re-enables dispatcher processing.</summary>
    procedure Dispose;
    ///<summary>Determines whether the specified <see cref="T:System.Windows.Threading.DispatcherProcessingDisabled" />
    ///  object is equal to this <see cref="T:System.Windows.Threading.DispatcherProcessingDisabled" />
    ///  object.</summary>
    ///  <param name="obj">The object to evaluate for equality.</param>
    ///<returns><see langword="true" />
    ///  if the specified object is equal to this <see cref="T:System.Windows.Threading.DispatcherProcessingDisabled" />
    ///  object; otherwise, <see langword="false" />
    ///  .</returns>
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    ///<summary>Gets a hash code for this instance. </summary>
    ///<returns>A signed 32-bit integer hash code.</returns>
    function GetHashCode: Int32;
    function ToString: string;
    function GetType: DDN.mscorlib.DNType;

  end;

  TDNDispatcherProcessingDisabled = class(TDNGenericImport<DNDispatcherProcessingDisabledClass, DNDispatcherProcessingDisabled>) end;

  //-------------namespace: System.Windows----------------
  DNVectorClass = interface(DDN.mscorlib.DNValueTypeClass)
  ['{84691167-212B-5C2D-8FDA-6D8FEE090D75}']
  { constructors } 

    ///<summary>Initializes a new instance of the <see cref="T:System.Windows.Vector" />
    ///  structure. </summary>
    ///  <param name="x">The <see cref="P:System.Windows.Vector.X" />
    ///  -offset of the new <see cref="T:System.Windows.Vector" />
    ///  .</param>
    ///  <param name="y">The <see cref="P:System.Windows.Vector.Y" />
    ///  -offset of the new <see cref="T:System.Windows.Vector" />
    ///  .</param>
    {class} function init(x: Double; y: Double): DNVector;

  { static methods } 

    ///<summary>Compares the two specified vectors for equality.</summary>
    ///  <param name="vector1">The first vector to compare.</param>
    ///  <param name="vector2">The second vector to compare.</param>
    ///<returns><see langword="true" />
    ///  if t he <see cref="P:System.Windows.Vector.X" />
    ///  and <see cref="P:System.Windows.Vector.Y" />
    ///  components of <paramref name="vector1" />
    ///  and <paramref name="vector2" />
    ///  are equal; otherwise, <see langword="false" />
    ///  .</returns>
    {class} function Equals(vector1: DNVector; vector2: DNVector): Boolean; overload;
    ///<summary>Converts a string representation of a vector into the equivalent <see cref="T:System.Windows.Vector" />
    ///  structure. </summary>
    ///  <param name="source">The string representation of the vector.</param>
    ///<returns>The equivalent <see cref="T:System.Windows.Vector" />
    ///  structure.</returns>
    {class} function Parse(source: string): DNVector;
    ///<summary>Calculates the cross product of two vectors. </summary>
    ///  <param name="vector1">The first vector to evaluate.</param>
    ///  <param name="vector2">The second vector to evaluate.</param>
    ///<returns>The cross product of <paramref name="vector1" />
    ///  and <paramref name="vector2" />
    ///  . The following formula is used to calculate the cross product:
    ///  (Vector1.X * Vector2.Y) - (Vector1.Y * Vector2.X)
    ///</returns>
    {class} function CrossProduct(vector1: DNVector; vector2: DNVector): Double;
    ///<summary>Retrieves the angle, expressed in degrees, between the two specified vectors. </summary>
    ///  <param name="vector1">The first vector to evaluate.</param>
    ///  <param name="vector2">The second vector to evaluate.</param>
    ///<returns>The angle, in degrees, between <paramref name="vector1" />
    ///  and <paramref name="vector2" />
    ///  .</returns>
    {class} function AngleBetween(vector1: DNVector; vector2: DNVector): Double;
    ///<summary>Adds two vectors and returns the result as a <see cref="T:System.Windows.Vector" />
    ///  structure. </summary>
    ///  <param name="vector1">The first vector to add.</param>
    ///  <param name="vector2">The second vector to add.</param>
    ///<returns>The sum of <paramref name="vector1" />
    ///  and <paramref name="vector2" />
    ///  .</returns>
    {class} function Add(vector1: DNVector; vector2: DNVector): DNVector; overload;
    ///<summary>Subtracts the specified vector from another specified vector. </summary>
    ///  <param name="vector1">The vector from which <paramref name="vector2" />
    ///  is subtracted.</param>
    ///  <param name="vector2">The vector to subtract from <paramref name="vector1" />
    ///  .</param>
    ///<returns>The difference between <paramref name="vector1" />
    ///  and <paramref name="vector2" />
    ///  . </returns>
    {class} function Subtract(vector1: DNVector; vector2: DNVector): DNVector;
    ///<summary>Translates the specified point by the specified vector and returns the resulting point.</summary>
    ///  <param name="vector">The amount to translate the specified point.</param>
    ///  <param name="point">The point to translate.</param>
    ///<returns>The result of translating <paramref name="point" />
    ///  by <paramref name="vector" />
    ///  .</returns>
    {class} function Add(vector: DNVector; point: DNPoint): DNPoint; overload;
    ///<summary> Multiplies the specified vector by the specified scalar and returns the resulting <see cref="T:System.Windows.Vector" />
    ///  . </summary>
    ///  <param name="vector">The vector to multiply.</param>
    ///  <param name="scalar">The scalar to multiply.</param>
    ///<returns>The result of multiplying <paramref name="vector" />
    ///  and <paramref name="scalar" />
    ///  .</returns>
    {class} function Multiply(vector: DNVector; scalar: Double): DNVector; overload;
    ///<summary> Multiplies the specified scalar by the specified vector and returns the resulting <see cref="T:System.Windows.Vector" />
    ///  . </summary>
    ///  <param name="scalar">The scalar to multiply.</param>
    ///  <param name="vector">The vector to multiply.</param>
    ///<returns>The result of multiplying <paramref name="scalar" />
    ///  and <paramref name="vector" />
    ///  .</returns>
    {class} function Multiply(scalar: Double; vector: DNVector): DNVector; overload;
    ///<summary>Divides the specified vector by the specified scalar and returns the result as a <see cref="T:System.Windows.Vector" />
    ///  .</summary>
    ///  <param name="vector">The vector structure to divide.</param>
    ///  <param name="scalar">The amount by which <paramref name="vector" />
    ///  is divided.</param>
    ///<returns>The result of dividing <paramref name="vector" />
    ///  by <paramref name="scalar" />
    ///  .</returns>
    {class} function Divide(vector: DNVector; scalar: Double): DNVector;
    ///<summary>Transforms the coordinate space of the specified vector using the specified <see cref="T:System.Windows.Media.Matrix" />
    ///  .</summary>
    ///  <param name="vector">The vector structure to transform.</param>
    ///  <param name="matrix">The transformation to apply to <paramref name="vector" />
    ///  .</param>
    ///<returns>The result of transforming <paramref name="vector" />
    ///  by <paramref name="matrix" />
    ///  .</returns>
    {class} function Multiply(vector: DNVector; matrix: DNMatrix): DNVector; overload;
    ///<summary>Calculates the dot product of the two specified vectors and returns the result as a <see cref="T:System.Double" />
    ///  .</summary>
    ///  <param name="vector1">The first vector to multiply.</param>
    ///  <param name="vector2">The second vector structure to multiply.</param>
    ///<returns>A <see cref="T:System.Double" />
    ///  containing the scalar dot product of <paramref name="vector1" />
    ///  and <paramref name="vector2" />
    ///  , which is calculated using the following formula:
    ///  (vector1.X * vector2.X) + (vector1.Y * vector2.Y)
    ///</returns>
    {class} function Multiply(vector1: DNVector; vector2: DNVector): Double; overload;
    ///<summary>Calculates the determinant of two vectors.</summary>
    ///  <param name="vector1">The first vector to evaluate.</param>
    ///  <param name="vector2">The second vector to evaluate.</param>
    ///<returns>The determinant of <paramref name="vector1" />
    ///  and <paramref name="vector2" />
    ///  .</returns>
    {class} function Determinant(vector1: DNVector; vector2: DNVector): Double;

  end;

  ///<summary>Represents a displacement in 2-D space. </summary>
  [DNTypeName('System.Windows.Vector')]
  DNVector = interface(DDN.mscorlib.DNValueType)
  ['{F17EA9EC-1E4B-3A7F-A2D7-DA5E4DAD6AFA}']
  { getters & setters } 

    function get_X: Double;
    procedure set_X(value: Double);
    function get_Y: Double;
    procedure set_Y(value: Double);
    function get_Length: Double;
    function get_LengthSquared: Double;

  { methods } 

    ///<summary>Determines whether the specified <see cref="T:System.Object" />
    ///  is a <see cref="T:System.Windows.Vector" />
    ///  structure and, if it is, whether it has the same <see cref="P:System.Windows.Vector.X" />
    ///  and <see cref="P:System.Windows.Vector.Y" />
    ///  values as this vector.</summary>
    ///  <param name="o">The vector to compare.</param>
    ///<returns><see langword="true" />
    ///  if <paramref name="o" />
    ///  is a <see cref="T:System.Windows.Vector" />
    ///  and has the same <see cref="P:System.Windows.Vector.X" />
    ///  and <see cref="P:System.Windows.Vector.Y" />
    ///  values as this vector; otherwise, <see langword="false" />
    ///  .</returns>
    function Equals(o: DDN.mscorlib.DNObject): Boolean; overload;
    ///<summary> Compares two vectors for equality.</summary>
    ///  <param name="value">The vector to compare with this vector.</param>
    ///<returns><see langword="true" />
    ///  if <paramref name="value" />
    ///  has the same <see cref="P:System.Windows.Vector.X" />
    ///  and <see cref="P:System.Windows.Vector.Y" />
    ///  values as this vector; otherwise, <see langword="false" />
    ///  .</returns>
    function Equals(value: DNVector): Boolean; overload;
    ///<summary>Returns the hash code for this vector. </summary>
    ///<returns>The hash code for this instance.</returns>
    function GetHashCode: Int32;
    ///<summary>Returns the string representation of this <see cref="T:System.Windows.Vector" />
    ///  structure.</summary>
    ///<returns>A string that represents the <see cref="P:System.Windows.Vector.X" />
    ///  and <see cref="P:System.Windows.Vector.Y" />
    ///  values of this <see cref="T:System.Windows.Vector" />
    ///  .</returns>
    function ToString: string; overload;
    ///<summary>Returns the string representation of this <see cref="T:System.Windows.Vector" />
    ///  structure with the specified formatting information. </summary>
    ///  <param name="provider">The culture-specific formatting information.</param>
    ///<returns>A string that represents the <see cref="P:System.Windows.Vector.X" />
    ///  and <see cref="P:System.Windows.Vector.Y" />
    ///  values of this <see cref="T:System.Windows.Vector" />
    ///  .</returns>
    function ToString(provider: DDN.mscorlib.DNIFormatProvider): string; overload;
    ///<summary> Normalizes this vector. </summary>
    procedure Normalize;
    ///<summary>Negates this vector. The vector has the same magnitude as before, but its direction is now opposite. </summary>
    procedure Negate;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    ///<summary>Gets or sets the <see cref="P:System.Windows.Vector.X" />
    ///  component of this vector. </summary>
    ///<returns>The <see cref="P:System.Windows.Vector.X" />
    ///  component of this vector. The default value is 0.</returns>
    property X: Double read get_X write set_X;
    ///<summary>Gets or sets the <see cref="P:System.Windows.Vector.Y" />
    ///  component of this vector. </summary>
    ///<returns>The <see cref="P:System.Windows.Vector.Y" />
    ///  component of this vector. The default value is 0.</returns>
    property Y: Double read get_Y write set_Y;
    ///<summary>Gets the length of this vector. </summary>
    ///<returns>The length of this vector. </returns>
    property Length: Double read get_Length;
    ///<summary>Gets the square of the length of this vector. </summary>
    ///<returns>The square of the <see cref="P:System.Windows.Vector.Length" />
    ///  of this vector.</returns>
    property LengthSquared: Double read get_LengthSquared;
  end;

  TDNVector = class(TDNGenericImport<DNVectorClass, DNVector>) end;

  //-------------namespace: System.Windows----------------
  DNBaseCompatibilityPreferencesClass = interface(DDN.mscorlib.DNObjectClass)
  ['{426E44C3-1313-5A76-894E-2C70D14AAD2E}']
  { static getter & setter } 

    {class} function get_ReuseDispatcherSynchronizationContextInstance: Boolean;
    {class} procedure set_ReuseDispatcherSynchronizationContextInstance(value: Boolean);
    {class} function get_FlowDispatcherSynchronizationContextPriority: Boolean;
    {class} procedure set_FlowDispatcherSynchronizationContextPriority(value: Boolean);
    {class} function get_InlineDispatcherSynchronizationContextSend: Boolean;
    {class} procedure set_InlineDispatcherSynchronizationContextSend(value: Boolean);
    {class} function get_HandleDispatcherRequestProcessingFailure: DNBaseCompatibilityPreferences_HandleDispatcherRequestProcessingFailureOptions;
    {class} procedure set_HandleDispatcherRequestProcessingFailure(value: DNBaseCompatibilityPreferences_HandleDispatcherRequestProcessingFailureOptions);

  { static propertys } 

    ///<summary>Gets or sets a value that indicates whether a single <see cref="T:System.Windows.Threading.DispatcherSynchronizationContext" />
    ///  is used for multiple dispatcher operations.</summary>
    ///<returns>true if a single <see cref="T:System.Windows.Threading.DispatcherSynchronizationContext" />
    ///  is used for multiple dispatcher operations; otherwise, <see langword="false" />
    ///  .</returns>
    {class} property ReuseDispatcherSynchronizationContextInstance: Boolean read get_ReuseDispatcherSynchronizationContextInstance write set_ReuseDispatcherSynchronizationContextInstance;
    ///<summary>Gets or sets a value that indicates whether information about the <see cref="P:System.Windows.Threading.DispatcherOperation.Priority" />
    ///  is saved to the <see cref="T:System.Windows.Threading.DispatcherSynchronizationContext" />
    ///  .</summary>
    ///<returns><see langword="true" />
    ///  if information about the <see cref="P:System.Windows.Threading.DispatcherOperation.Priority" />
    ///  is saved to the <see cref="T:System.Windows.Threading.DispatcherSynchronizationContext" />
    ///  ; otherwise, <see langword="false" />
    ///  .</returns>
    {class} property FlowDispatcherSynchronizationContextPriority: Boolean read get_FlowDispatcherSynchronizationContextPriority write set_FlowDispatcherSynchronizationContextPriority;
    ///<summary>Gets or sets a value that indicates whether the <see cref="M:System.Windows.Threading.DispatcherSynchronizationContext.Send(System.Threading.SendOrPostCallback,System.Object)" />
    ///  method puts the delegates on the dispatcher queue or if the delegate is directly invoked.</summary>
    ///<returns><see langword="true" />
    ///  if the <see cref="M:System.Windows.Threading.DispatcherSynchronizationContext.Send(System.Threading.SendOrPostCallback,System.Object)" />
    ///  method puts the delegates on the dispatcher queue or if the delegate is directly invoked; otherwise, <see langword="false" />
    ///  .</returns>
    {class} property InlineDispatcherSynchronizationContextSend: Boolean read get_InlineDispatcherSynchronizationContextSend write set_InlineDispatcherSynchronizationContextSend;
    ///<summary>Defines how the dispatcher reacts to failures encountered when it requests processing. </summary>
    ///<returns>A value that defines how the dispatcher reacts to failures. </returns>
    {class} property HandleDispatcherRequestProcessingFailure: DNBaseCompatibilityPreferences_HandleDispatcherRequestProcessingFailureOptions read get_HandleDispatcherRequestProcessingFailure write set_HandleDispatcherRequestProcessingFailure;
  end;

  ///<summary>Contains properties that specify how an application should behave relative to new WPF features that are in the WindowsBase assembly.</summary>
  [DNTypeName('System.Windows.BaseCompatibilityPreferences')]
  DNBaseCompatibilityPreferences = interface(DDN.mscorlib.DNObject)
  ['{47D6DB4C-75ED-34E8-9C13-E3ECD48C47C1}']
  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNBaseCompatibilityPreferences = class(TDNGenericImport<DNBaseCompatibilityPreferencesClass, DNBaseCompatibilityPreferences>) end;

  //-------------namespace: System.Windows.Data----------------
  DNDataSourceProviderClass = interface(DNObjectClass)
  ['{6497BCAF-A290-5E8C-B139-70BA436C0A7E}']
  end;

  ///<summary>Common base class and contract for <see cref="T:System.Windows.Data.DataSourceProvider" />
  ///  objects, which are factories that execute some queries to produce a single object or a list of objects that you can use as binding source objects.</summary>
  [DNTypeName('System.Windows.Data.DataSourceProvider')]
  DNDataSourceProvider = interface(DDN.System.DNINotifyPropertyChanged)
  ['{08AA1407-3558-3E56-9BF4-BE3B13545776}']
  { getters & setters } 

    function get_IsInitialLoadEnabled: Boolean;
    procedure set_IsInitialLoadEnabled(value: Boolean);
    function get_Data: DDN.mscorlib.DNObject;
    function get_Error: DDN.mscorlib.DNException;

  { events } 

    procedure add_DataChanged(value: DDN.mscorlib.DNEventHandler);
    procedure remove_DataChanged(value: DDN.mscorlib.DNEventHandler);

  { methods } 

    ///<summary>Starts the initial query to the underlying data model. The result is returned on the <see cref="P:System.Windows.Data.DataSourceProvider.Data" />
    ///  property.</summary>
    procedure InitialLoad;
    ///<summary>Initiates a refresh operation to the underlying data model. The result is returned on the <see cref="P:System.Windows.Data.DataSourceProvider.Data" />
    ///  property.</summary>
    procedure Refresh;
    ///<summary>Enters a defer cycle that you can use to change properties of the provider and delay automatic refresh.</summary>
    ///<returns>An <see cref="T:System.IDisposable" />
    ///  object that you can use to dispose of the calling object.</returns>
    function DeferRefresh: DDN.mscorlib.DNIDisposable;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>Gets or sets a value that indicates whether to prevent or delay the automatic loading of data.</summary>
    ///<returns><see langword="false" />
    ///  to prevent or delay the automatic loading of data; otherwise, <see langword="true" />
    ///  . The default value is <see langword="true" />
    ///  .</returns>
    property IsInitialLoadEnabled: Boolean read get_IsInitialLoadEnabled write set_IsInitialLoadEnabled;
    ///<summary>Gets the underlying data object.</summary>
    ///<returns>A value of type <see cref="T:System.Object" />
    ///  that is the underlying data object.</returns>
    property Data: DDN.mscorlib.DNObject read get_Data;
    ///<summary>Gets the error of the last query operation.</summary>
    ///<returns>A value of type <see cref="T:System.Exception" />
    ///  that is the error of the last query operation, or <see langword="null" />
    ///  if there was no error.</returns>
    property Error: DDN.mscorlib.DNException read get_Error;
  end;

  TDNDataSourceProvider = class(TDNGenericImport<DNDataSourceProviderClass, DNDataSourceProvider>) end;

  //-------------namespace: System.Windows----------------
  DNDependencyObjectTypeClass = interface(DDN.mscorlib.DNObjectClass)
  ['{2ACA1967-1326-56C5-9D92-407BCEBFA664}']
  { static methods } 

    ///<summary>Returns a <see cref="T:System.Windows.DependencyObjectType" />
    ///  that represents a given system (CLR) type.</summary>
    ///  <param name="systemType">The system (CLR) type to convert.</param>
    ///<returns>A <see cref="T:System.Windows.DependencyObjectType" />
    ///  that represents the system (CLR) type.</returns>
    {class} function FromSystemType(systemType: DDN.mscorlib.DNType): DNDependencyObjectType;

  end;

  ///<summary>Implements an underlying type cache for all <see cref="T:System.Windows.DependencyObject" />
  ///  derived types.</summary>
  [DNTypeName('System.Windows.DependencyObjectType')]
  DNDependencyObjectType = interface(DDN.mscorlib.DNObject)
  ['{1921CB8E-808D-3ACA-BCBD-129E70001695}']
  { getters & setters } 

    function get_Id: Int32;
    function get_SystemType: DDN.mscorlib.DNType;
    function get_BaseType: DNDependencyObjectType;
    function get_Name: string;

  { methods } 

    ///<summary>Determines whether the specified object is an instance of the current <see cref="T:System.Windows.DependencyObjectType" />
    ///  .</summary>
    ///  <param name="dependencyObject">The object to compare with the current <see cref="T:System.Windows.DependencyObjectType" />
    ///  .</param>
    ///<returns><see langword="true" />
    ///  if the class represented by the current <see cref="T:System.Windows.DependencyObjectType" />
    ///  is in the inheritance hierarchy of the <see cref="T:System.Windows.DependencyObject" />
    ///  passed as <paramref name="d" />
    ///  ; otherwise, <see langword="false" />
    ///  .</returns>
    function IsInstanceOfType(dependencyObject: DNDependencyObject): Boolean;
    ///<summary>Determines whether the current <see cref="T:System.Windows.DependencyObjectType" />
    ///  derives from the specified <see cref="T:System.Windows.DependencyObjectType" />
    ///  .</summary>
    ///  <param name="dependencyObjectType">The <see cref="T:System.Windows.DependencyObjectType" />
    ///  to compare.</param>
    ///<returns><see langword="true" />
    ///  if the <paramref name="dependencyObjectType" />
    ///  parameter and the current <see cref="T:System.Windows.DependencyObjectType" />
    ///  represent types of classes, and the class represented by the current <see cref="T:System.Windows.DependencyObjectType" />
    ///  derives from the class represented by <paramref name="dependencyObjectType" />
    ///  . Otherwise, <see langword="false" />
    ///  . This method also returns <see langword="false" />
    ///  if <paramref name="dependencyObjectType" />
    ///  and the current <see cref="T:System.Windows.DependencyObjectType" />
    ///  represent the same class.</returns>
    function IsSubclassOf(dependencyObjectType: DNDependencyObjectType): Boolean;
    ///<summary>Returns the hash code for this <see cref="T:System.Windows.DependencyObjectType" />
    ///  .</summary>
    ///<returns>A 32-bit signed integer hash code. </returns>
    function GetHashCode: Int32;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>Gets a zero-based unique identifier for constant-time array lookup operations.</summary>
    ///<returns>An internal identifier.</returns>
    property Id: Int32 read get_Id;
    ///<summary> Gets the common language runtime (CLR) system type represented by this <see cref="T:System.Windows.DependencyObjectType" />
    ///  . </summary>
    ///<returns>The CLR system type represented by this <see cref="T:System.Windows.DependencyObjectType" />
    ///  .</returns>
    property SystemType: DDN.mscorlib.DNType read get_SystemType;
    ///<summary>Gets the <see cref="T:System.Windows.DependencyObjectType" />
    ///  of the immediate base class of the current <see cref="T:System.Windows.DependencyObjectType" />
    ///  . </summary>
    ///<returns>The type of the base class.</returns>
    property BaseType: DNDependencyObjectType read get_BaseType;
    ///<summary>Gets the name of the represented common language runtime (CLR) system type. </summary>
    ///<returns>The name of the represented CLR system type.</returns>
    property Name: string read get_Name;
  end;

  TDNDependencyObjectType = class(TDNGenericImport<DNDependencyObjectTypeClass, DNDependencyObjectType>) end;

  //-------------namespace: System.Windows----------------
  DNDependencyPropertyClass = interface(DDN.mscorlib.DNObjectClass)
  ['{088296B5-AE06-579C-AF3A-FC64CC724EEA}']
  { static fields getter & setter } 

   function __fakeFieldGet_UnsetValue: DDN.mscorlib.DNObject;

  { static fields } 

    ///<summary>Specifies a static value that is used by the WPF property system rather than <see langword="null" />
    ///  to indicate that the property exists, but does not have its value set by the property system.</summary>
    ///<returns>An unset value. This is effectively the result of a call to the <see cref="T:System.Object" />
    ///  constructor.</returns>
    {class} property UnsetValue: DDN.mscorlib.DNObject read __fakeFieldGet_UnsetValue;

  { static methods } 

    ///<summary>Registers a dependency property with the specified property name, property type, and owner type. </summary>
    ///  <param name="name">The name of the dependency property to register. The name must be unique within the registration namespace of the owner type.</param>
    ///  <param name="propertyType">The type of the property.</param>
    ///  <param name="ownerType">The owner type that is registering the dependency property.</param>
    ///<returns>A dependency property identifier that should be used to set the value of a <see langword="public static readonly" />
    ///  field in your class. That identifier is then used to reference the dependency property later, for operations such as setting its value programmatically or obtaining metadata.</returns>
    {class} function &Register(name: string; propertyType: DDN.mscorlib.DNType; ownerType: DDN.mscorlib.DNType): DNDependencyProperty; overload;
    ///<summary>Registers a dependency property with the specified property name, property type, owner type, and property metadata. </summary>
    ///  <param name="name">The name of the dependency property to register.</param>
    ///  <param name="propertyType">The type of the property.</param>
    ///  <param name="ownerType">The owner type that is registering the dependency property.</param>
    ///  <param name="typeMetadata">Property metadata for the dependency property.</param>
    ///<returns>A dependency property identifier that should be used to set the value of a <see langword="publicÂ staticÂ readonly" />
    ///  field in your class. That identifier is then used to reference the dependency property later, for operations such as setting its value programmatically or obtaining metadata.</returns>
    {class} function &Register(name: string; propertyType: DDN.mscorlib.DNType; ownerType: DDN.mscorlib.DNType; typeMetadata: DNPropertyMetadata): DNDependencyProperty; overload;
    ///<summary>Registers a dependency property with the specified property name, property type, owner type, property metadata, and a value validation callback for the property. </summary>
    ///  <param name="name">The name of the dependency property to register.</param>
    ///  <param name="propertyType">The type of the property.</param>
    ///  <param name="ownerType">The owner type that is registering the dependency property.</param>
    ///  <param name="typeMetadata">Property metadata for the dependency property.</param>
    ///  <param name="validateValueCallback">A reference to a callback that should perform any custom validation of the dependency property value beyond typical type validation.</param>
    ///<returns>A dependency property identifier that should be used to set the value of a <see langword="publicÂ staticÂ readonly" />
    ///  field in your class. That identifier is then used to reference the dependency property later, for operations such as setting its value programmatically or obtaining metadata.</returns>
    {class} function &Register(name: string; propertyType: DDN.mscorlib.DNType; ownerType: DDN.mscorlib.DNType; typeMetadata: DNPropertyMetadata; validateValueCallback: DNValidateValueCallback): DNDependencyProperty; overload;
    ///<summary> Registers a read-only dependency property, with the specified property type, owner type, and property metadata. </summary>
    ///  <param name="name">The name of the dependency property to register.</param>
    ///  <param name="propertyType">The type of the property.</param>
    ///  <param name="ownerType">The owner type that is registering the dependency property.</param>
    ///  <param name="typeMetadata">Property metadata for the dependency property.</param>
    ///<returns>A dependency property key that should be used to set the value of a static read-only field in your class, which is then used to reference the dependency property.</returns>
    {class} function RegisterReadOnly(name: string; propertyType: DDN.mscorlib.DNType; ownerType: DDN.mscorlib.DNType; typeMetadata: DNPropertyMetadata): DNDependencyPropertyKey; overload;
    ///<summary>Registers a read-only dependency property, with the specified property type, owner type, property metadata, and a validation callback. </summary>
    ///  <param name="name">The name of the dependency property to register.</param>
    ///  <param name="propertyType">The type of the property.</param>
    ///  <param name="ownerType">The owner type that is registering the dependency property.</param>
    ///  <param name="typeMetadata">Property metadata for the dependency property.</param>
    ///  <param name="validateValueCallback">A reference to a user-created callback that should perform any custom validation of the dependency property value beyond typical type validation.</param>
    ///<returns>A dependency property key that should be used to set the value of a static read-only field in your class, which is then used to reference the dependency property later.</returns>
    {class} function RegisterReadOnly(name: string; propertyType: DDN.mscorlib.DNType; ownerType: DDN.mscorlib.DNType; typeMetadata: DNPropertyMetadata; validateValueCallback: DNValidateValueCallback): DNDependencyPropertyKey; overload;
    ///<summary>Registers a read-only attached property, with the specified property type, owner type, and property metadata. </summary>
    ///  <param name="name">The name of the dependency property to register.</param>
    ///  <param name="propertyType">The type of the property.</param>
    ///  <param name="ownerType">The owner type that is registering the dependency property.</param>
    ///  <param name="defaultMetadata">Property metadata for the dependency property.</param>
    ///<returns>A dependency property key that should be used to set the value of a static read-only field in your class, which is then used to reference the dependency property later.</returns>
    {class} function RegisterAttachedReadOnly(name: string; propertyType: DDN.mscorlib.DNType; ownerType: DDN.mscorlib.DNType; defaultMetadata: DNPropertyMetadata): DNDependencyPropertyKey; overload;
    ///<summary>Registers a read-only attached property, with the specified property type, owner type, property metadata, and a validation callback. </summary>
    ///  <param name="name">The name of the dependency property to register.</param>
    ///  <param name="propertyType">The type of the property.</param>
    ///  <param name="ownerType">The owner type that is registering the dependency property.</param>
    ///  <param name="defaultMetadata">Property metadata for the dependency property.</param>
    ///  <param name="validateValueCallback">A reference to a user-created callback that should perform any custom validation of the dependency property value beyond typical type validation.</param>
    ///<returns>A dependency property key that should be used to set the value of a static read-only field in your class, which is then used to reference the dependency property.</returns>
    {class} function RegisterAttachedReadOnly(name: string; propertyType: DDN.mscorlib.DNType; ownerType: DDN.mscorlib.DNType; defaultMetadata: DNPropertyMetadata; validateValueCallback: DNValidateValueCallback): DNDependencyPropertyKey; overload;
    ///<summary>Registers an attached property with the specified property name, property type, and owner type. </summary>
    ///  <param name="name">The name of the dependency property to register.</param>
    ///  <param name="propertyType">The type of the property.</param>
    ///  <param name="ownerType">The owner type that is registering the dependency property.</param>
    ///<returns>A dependency property identifier that should be used to set the value of a <see langword="publicÂ staticÂ readonly" />
    ///  field in your class. That identifier is then used to reference the dependency property later, for operations such as setting its value programmatically or obtaining metadata.</returns>
    {class} function RegisterAttached(name: string; propertyType: DDN.mscorlib.DNType; ownerType: DDN.mscorlib.DNType): DNDependencyProperty; overload;
    ///<summary>Registers an attached property with the specified property name, property type, owner type, and property metadata. </summary>
    ///  <param name="name">The name of the dependency property to register.</param>
    ///  <param name="propertyType">The type of the property.</param>
    ///  <param name="ownerType">The owner type that is registering the dependency property.</param>
    ///  <param name="defaultMetadata">Property metadata for the dependency property. This can include the default value as well as other characteristics.</param>
    ///<returns>A dependency property identifier that should be used to set the value of a <see langword="publicÂ staticÂ readonly" />
    ///  field in your class. That identifier is then used to reference the dependency property later, for operations such as setting its value programmatically or obtaining metadata.</returns>
    {class} function RegisterAttached(name: string; propertyType: DDN.mscorlib.DNType; ownerType: DDN.mscorlib.DNType; defaultMetadata: DNPropertyMetadata): DNDependencyProperty; overload;
    ///<summary>Registers an attached property with the specified property type, owner type, property metadata, and value validation callback for the property. </summary>
    ///  <param name="name">The name of the dependency property to register.</param>
    ///  <param name="propertyType">The type of the property.</param>
    ///  <param name="ownerType">The owner type that is registering the dependency property.</param>
    ///  <param name="defaultMetadata">Property metadata for the dependency property. This can include the default value as well as other characteristics.</param>
    ///  <param name="validateValueCallback">A reference to a callback that should perform any custom validation of the dependency property value beyond typical type validation.</param>
    ///<returns>A dependency property identifier that should be used to set the value of a <see langword="public static readonly" />
    ///  field in your class. That identifier is then used to reference the dependency property later, for operations such as setting its value programmatically or obtaining metadata.</returns>
    {class} function RegisterAttached(name: string; propertyType: DDN.mscorlib.DNType; ownerType: DDN.mscorlib.DNType; defaultMetadata: DNPropertyMetadata; validateValueCallback: DNValidateValueCallback): DNDependencyProperty; overload;

  end;

  ///<summary>Represents a property that can be set through methods such as, styling, data binding, animation, and inheritance.</summary>
  [DNTypeName('System.Windows.DependencyProperty')]
  DNDependencyProperty = interface(DDN.mscorlib.DNObject)
  ['{FBE9F247-33CA-3CBF-99CB-DD40F5A0C3B2}']
  { getters & setters } 

    function get_Name: string;
    function get_PropertyType: DDN.mscorlib.DNType;
    function get_OwnerType: DDN.mscorlib.DNType;
    function get_DefaultMetadata: DNPropertyMetadata;
    function get_ValidateValueCallback: DNValidateValueCallback;
    function get_GlobalIndex: Int32;
    function get_ReadOnly: Boolean;

  { methods } 

    ///<summary>Returns the metadata for this dependency property as it exists on a specified existing type. </summary>
    ///  <param name="forType">The specific type from which to retrieve the dependency property metadata.</param>
    ///<returns>A property metadata object.</returns>
    function GetMetadata(forType: DDN.mscorlib.DNType): DNPropertyMetadata; overload;
    ///<summary>Returns the metadata for this dependency property as it exists on the specified object instance. </summary>
    ///  <param name="dependencyObject">A dependency object that is checked for type, to determine which type-specific version of the dependency property the metadata should come from.</param>
    ///<returns>A property metadata object.</returns>
    function GetMetadata(dependencyObject: DNDependencyObject): DNPropertyMetadata; overload;
    ///<summary> Returns the metadata for this dependency property as it exists on a specified type. </summary>
    ///  <param name="dependencyObjectType">A specific object that records the dependency object type from which the dependency property metadata is desired.</param>
    ///<returns>A property metadata object.</returns>
    function GetMetadata(dependencyObjectType: DNDependencyObjectType): DNPropertyMetadata; overload;
    ///<summary>Adds another type as an owner of a dependency property that has already been registered.</summary>
    ///  <param name="ownerType">The type to add as an owner of this dependency property.</param>
    ///<returns>A reference to the original <see cref="T:System.Windows.DependencyProperty" />
    ///  identifier that identifies the dependency property. This identifier should be exposed by the adding class as a <see langword="public static readonly" />
    ///  field.</returns>
    function AddOwner(ownerType: DDN.mscorlib.DNType): DNDependencyProperty; overload;
    ///<summary>Returns a hash code for this <see cref="T:System.Windows.DependencyProperty" />
    ///  .</summary>
    ///<returns>The hash code for this <see cref="T:System.Windows.DependencyProperty" />
    ///  .</returns>
    function GetHashCode: Int32;
    ///<summary>Determines whether a specified value is acceptable for this dependency property's type, as checked against the property type provided in the original dependency property registration. </summary>
    ///  <param name="value">The value to check.</param>
    ///<returns><see langword="true" />
    ///  if the specified value is the registered property type or an acceptable derived type; otherwise, <see langword="false" />
    ///  .</returns>
    function IsValidType(value: DDN.mscorlib.DNObject): Boolean;
    ///<summary>Determines whether the provided value is accepted for the type of property through basic type checking, and also potentially if it is within the allowed range of values for that type. </summary>
    ///  <param name="value">The value to check.</param>
    ///<returns><see langword="true" />
    ///  if the value is acceptable and is of the correct type or a derived type; otherwise, <see langword="false" />
    ///  .</returns>
    function IsValidValue(value: DDN.mscorlib.DNObject): Boolean;
    ///<summary> Returns the string representation of the dependency property. </summary>
    ///<returns>The string representation of the dependency property.</returns>
    function ToString: string;
    ///<summary>Specifies alternate metadata for this dependency property when it is present on instances of a specified type, overriding the metadata that existed for the dependency property as it was inherited from base types.</summary>
    ///  <param name="forType">The type where this dependency property is inherited and where the provided alternate metadata will be applied.</param>
    ///  <param name="typeMetadata">The metadata to apply to the dependency property on the overriding type.</param>
    ///<exception cref="T:System.InvalidOperationException">An attempt was made to override metadata on a read-only dependency property (that operation cannot be done using this signature).</exception><exception cref="T:System.ArgumentException">Metadata was already established for the dependency property as it exists on the provided type.</exception>
    procedure OverrideMetadata(forType: DDN.mscorlib.DNType; typeMetadata: DNPropertyMetadata); overload;
    ///<summary>Supplies alternate metadata for a read-only dependency property when it is present on instances of a specified type, overriding the metadata that was provided in the initial dependency property registration. You must pass the <see cref="T:System.Windows.DependencyPropertyKey" />
    ///  for the read-only dependency property to avoid raising an exception.</summary>
    ///  <param name="forType">The type where this dependency property is inherited and where the provided alternate metadata will be applied.</param>
    ///  <param name="typeMetadata">The metadata to apply to the dependency property on the overriding type.</param>
    ///  <param name="key">The access key for a read-only dependency property. </param>
    procedure OverrideMetadata(forType: DDN.mscorlib.DNType; typeMetadata: DNPropertyMetadata; key: DNDependencyPropertyKey); overload;
    ///<summary>Adds another type as an owner of a dependency property that has already been registered, providing dependency property metadata for the dependency property as it will exist on the provided owner type. </summary>
    ///  <param name="ownerType">The type to add as owner of this dependency property.</param>
    ///  <param name="typeMetadata">The metadata that qualifies the dependency property as it exists on the provided type.</param>
    ///<returns>A reference to the original <see cref="T:System.Windows.DependencyProperty" />
    ///  identifier that identifies the dependency property. This identifier should be exposed by the adding class as a <see langword="publicÂ staticÂ readonly" />
    ///  field.</returns>
    function AddOwner(ownerType: DDN.mscorlib.DNType; typeMetadata: DNPropertyMetadata): DNDependencyProperty; overload;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    ///<summary>Gets the name of the dependency property. </summary>
    ///<returns>The name of the property.</returns>
    property Name: string read get_Name;
    ///<summary>Gets the type that the dependency property uses for its value. </summary>
    ///<returns>The <see cref="T:System.Type" />
    ///  of the property value.</returns>
    property PropertyType: DDN.mscorlib.DNType read get_PropertyType;
    ///<summary>Gets the type of the object that registered the dependency property with the property system, or added itself as owner of the property. </summary>
    ///<returns>The type of the object that registered the property or added itself as owner of the property.</returns>
    property OwnerType: DDN.mscorlib.DNType read get_OwnerType;
    ///<summary>Gets the default metadata of the dependency property. </summary>
    ///<returns>The default metadata of the dependency property.</returns>
    property DefaultMetadata: DNPropertyMetadata read get_DefaultMetadata;
    ///<summary>Gets the value validation callback for the dependency property. </summary>
    ///<returns>The value validation callback for this dependency property, as provided for the <paramref name="validateValueCallback" />
    ///  parameter in the original dependency property registration.</returns>
    property ValidateValueCallback: DNValidateValueCallback read get_ValidateValueCallback;
    ///<summary>Gets an internally generated value that uniquely identifies the dependency property.</summary>
    ///<returns>A unique numeric identifier.</returns>
    property GlobalIndex: Int32 read get_GlobalIndex;
    ///<summary>Gets a value that indicates whether the dependency property identified by this <see cref="T:System.Windows.DependencyProperty" />
    ///  instance is a read-only dependency property.</summary>
    ///<returns><see langword="true" />
    ///  if the dependency property is read-only; otherwise, <see langword="false" />
    ///  .</returns>
    property ReadOnly: Boolean read get_ReadOnly;
  end;

  TDNDependencyProperty = class(TDNGenericImport<DNDependencyPropertyClass, DNDependencyProperty>) end;

  //-------------namespace: System.Windows----------------
  DNDependencyPropertyKeyClass = interface(DDN.mscorlib.DNObjectClass)
  ['{1A62B526-354A-5346-BC3E-AB7DA7003C0F}']
  end;

  ///<summary>Provides a dependency property identifier for limited write access to a read-only dependency property.</summary>
  [DNTypeName('System.Windows.DependencyPropertyKey')]
  DNDependencyPropertyKey = interface(DDN.mscorlib.DNObject)
  ['{120F12BC-31DD-36BF-B9BE-80493EEA9E82}']
  { getters & setters } 

    function get_DependencyProperty: DNDependencyProperty;

  { methods } 

    ///<summary>Overrides the metadata of a read-only dependency property that is represented by this dependency property identifier.</summary>
    ///  <param name="forType">The type on which this dependency property exists and metadata should be overridden.</param>
    ///  <param name="typeMetadata">Metadata supplied for this type.</param>
    ///<exception cref="T:System.InvalidOperationException">Attempted metadata override on a read-write dependency property (cannot be done using this signature).</exception><exception cref="T:System.ArgumentException">Metadata was already established for the property as it exists on the provided type.</exception>
    procedure OverrideMetadata(forType: DDN.mscorlib.DNType; typeMetadata: DNPropertyMetadata);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>Gets the dependency property identifier associated with this specialized read-only dependency property identifier. </summary>
    ///<returns>The relevant dependency property identifier.</returns>
    property DependencyProperty: DNDependencyProperty read get_DependencyProperty;
  end;

  TDNDependencyPropertyKey = class(TDNGenericImport<DNDependencyPropertyKeyClass, DNDependencyPropertyKey>) end;

  //-------------namespace: System.Windows----------------
  DNExpressionClass = interface(DDN.mscorlib.DNObjectClass)
  ['{0AD5CA09-E60C-5098-BAE1-997B5DC2F91E}']
  end;

  ///<summary>This type supports the Windows Presentation Foundation (WPF) infrastructure and is not intended to be used directly from your code. </summary>
  [DNTypeName('System.Windows.Expression')]
  DNExpression = interface(DDN.mscorlib.DNObject)
  ['{1F05D065-E3D3-3AC4-9EDE-62A0E991DD0F}']
  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNExpression = class(TDNGenericImport<DNExpressionClass, DNExpression>) end;

  //-------------namespace: System.Windows.Input----------------
  DNKeyInteropClass = interface(DDN.mscorlib.DNObjectClass)
  ['{C776FC50-E7B5-5FDB-8112-345B4A7B0181}']
  { static methods } 

    ///<summary>Converts a Win32 Virtual-Key into WPFÂ <see cref="T:System.Windows.Input.Key" />
    ///  .</summary>
    ///  <param name="virtualKey">The virtual key to convert.</param>
    ///<returns>The WPF key.</returns>
    {class} function KeyFromVirtualKey(virtualKey: Int32): DNKey;
    ///<summary>Converts a WPFÂ <see cref="T:System.Windows.Input.Key" />
    ///  into aÂ Win32 Virtual-Key.</summary>
    ///  <param name="key">The WPF to convert.</param>
    ///<returns>The Win32 Virtual-Key.</returns>
    {class} function VirtualKeyFromKey(key: DNKey): Int32;

  end;

  ///<summary>Provides static methods to convert between Win32 Virtual-Keys and the WPFÂ <see cref="T:System.Windows.Input.Key" />
  ///  enumeration. </summary>
  [DNTypeName('System.Windows.Input.KeyInterop')]
  DNKeyInterop = interface(DDN.mscorlib.DNObject)
  ['{0BCEF380-C904-315A-888C-066D0031F4B6}']
  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNKeyInterop = class(TDNGenericImport<DNKeyInteropClass, DNKeyInterop>) end;

  //-------------namespace: System.Windows.Input----------------
  DNTraversalRequestClass = interface(DDN.mscorlib.DNObjectClass)
  ['{D16AE65D-C65B-566F-82D8-8E0DAF7D6B71}']
  { constructors } 

    ///<summary>Initializes a new instance of the <see cref="T:System.Windows.Input.TraversalRequest" />
    ///  class. </summary>
    ///  <param name="focusNavigationDirection">The intended direction of the focus traversal, as a value of the enumeration.</param>
    {class} function init(focusNavigationDirection: DNFocusNavigationDirection): DNTraversalRequest;

  end;

  ///<summary>Represents a request to move focus to another control. </summary>
  [DNTypeName('System.Windows.Input.TraversalRequest')]
  DNTraversalRequest = interface(DDN.mscorlib.DNObject)
  ['{E0FF0AB7-5D61-3CFE-809F-9AD90E3692C1}']
  { getters & setters } 

    function get_Wrapped: Boolean;
    procedure set_Wrapped(value: Boolean);
    function get_FocusNavigationDirection: DNFocusNavigationDirection;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary> Gets or sets a value that indicates whether focus traversal has reached the end of child elements that can have focus. </summary>
    ///<returns><see langword="true" />
    ///  if this traversal has reached the end of child elements that can have focus; otherwise, <see langword="false" />
    ///  . The default is <see langword="false" />
    ///  .</returns>
    property Wrapped: Boolean read get_Wrapped write set_Wrapped;
    ///<summary>Gets the traversal direction. </summary>
    ///<returns>One of the traversal direction enumeration values.</returns>
    property FocusNavigationDirection: DNFocusNavigationDirection read get_FocusNavigationDirection;
  end;

  TDNTraversalRequest = class(TDNGenericImport<DNTraversalRequestClass, DNTraversalRequest>) end;

  //-------------namespace: System.Windows.Interop----------------
  DNComponentDispatcherClass = interface(DDN.mscorlib.DNObjectClass)
  ['{5D05EE5A-44FD-5F1F-9B28-E9C85E98AE82}']
  { static getter & setter } 

    {class} function get_IsThreadModal: Boolean;
    {class} function get_CurrentKeyboardMessage: DNMSG;

  { static methods } 

    ///<summary>Called to indicate that the thread is modal. </summary>
    {class} procedure PushModal;
    ///<summary>Called to indicate that a modal thread is no longer modal.</summary>
    {class} procedure PopModal;
    ///<summary>Called to indicate that a thread is idle. </summary>
    {class} procedure RaiseIdle;
    {class} function RaiseThreadMessage(out msg: DNMSG): Boolean;

  { static propertys } 

    ///<summary>Gets a value that indicates whether the thread is modal. </summary>
    ///<returns><see langword="true" />
    ///  if the thread is modal; otherwise, <see langword="false" />
    ///  .</returns>
    {class} property IsThreadModal: Boolean read get_IsThreadModal;
    ///<summary>Gets the last message that was raised. </summary>
    ///<returns>The last message.</returns>
    {class} property CurrentKeyboardMessage: DNMSG read get_CurrentKeyboardMessage;
  end;

  ///<summary>Enables shared control of the message pump between Win32 and WPF in interoperation scenarios. </summary>
  [DNTypeName('System.Windows.Interop.ComponentDispatcher')]
  DNComponentDispatcher = interface(DDN.mscorlib.DNObject)
  ['{13DC69A2-0784-3EB4-B914-B44F4E61F7F3}']
  { events } 

    {class} procedure add_ThreadIdle(value: DDN.mscorlib.DNEventHandler);
    {class} procedure remove_ThreadIdle(value: DDN.mscorlib.DNEventHandler);
    {class} procedure add_ThreadFilterMessage(value: DNThreadMessageEventHandler);
    {class} procedure remove_ThreadFilterMessage(value: DNThreadMessageEventHandler);
    {class} procedure add_ThreadPreprocessMessage(value: DNThreadMessageEventHandler);
    {class} procedure remove_ThreadPreprocessMessage(value: DNThreadMessageEventHandler);
    {class} procedure add_EnterThreadModal(value: DDN.mscorlib.DNEventHandler);
    {class} procedure remove_EnterThreadModal(value: DDN.mscorlib.DNEventHandler);
    {class} procedure add_LeaveThreadModal(value: DDN.mscorlib.DNEventHandler);
    {class} procedure remove_LeaveThreadModal(value: DDN.mscorlib.DNEventHandler);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNComponentDispatcher = class(TDNGenericImport<DNComponentDispatcherClass, DNComponentDispatcher>) end;

  //-------------namespace: System.Windows.Markup----------------
  DNInternalTypeHelperClass = interface(DDN.mscorlib.DNObjectClass)
  ['{FC7C835B-D6ED-533E-8EFF-51A92B77CFBB}']
  end;

  ///<summary>Abstract class used internally by the WPF XAML compiler to support the use of internal types.</summary>
  [DNTypeName('System.Windows.Markup.InternalTypeHelper')]
  DNInternalTypeHelper = interface(DDN.mscorlib.DNObject)
  ['{0BF28642-6ED8-3A31-8B2D-B11D093618BD}']
  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNInternalTypeHelper = class(TDNGenericImport<DNInternalTypeHelperClass, DNInternalTypeHelper>) end;

  //-------------namespace: System.Windows.Markup.Primitives----------------
  DNMarkupObjectClass = interface(DDN.mscorlib.DNObjectClass)
  ['{406F2606-588B-5F50-8AE5-C0F82707D4DE}']
  end;

  ///<summary>Abstract class that represents an object that can be used to navigate a tree of objects.</summary>
  [DNTypeName('System.Windows.Markup.Primitives.MarkupObject')]
  DNMarkupObject = interface(DDN.mscorlib.DNObject)
  ['{5571F728-28B1-3956-8F92-25D2B222531F}']
  { getters & setters } 

    function get_ObjectType: DDN.mscorlib.DNType;
    function get_Instance: DDN.mscorlib.DNObject;
    function get_Properties: DDN.mscorlib.DNIEnumerable<DNMarkupProperty>;
    function get_Attributes: DDN.System.DNAttributeCollection;

  { methods } 

    ///<summary>When overridden in a derived class, assigns a root context for <see cref="T:System.Windows.Markup.ValueSerializer" />
    ///  classes.</summary>
    ///  <param name="context">The <see cref="T:System.Windows.Markup.IValueSerializerContext" />
    ///  to assign a root context for.</param>
    procedure AssignRootContext(context: DDN.System.Xaml.DNIValueSerializerContext);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>When overridden in a derived class, gets the type of the <see cref="T:System.Windows.Markup.Primitives.MarkupObject" />
    ///  instance.</summary>
    ///<returns>The type of the object. </returns>
    property ObjectType: DDN.mscorlib.DNType read get_ObjectType;
    ///<summary>When overridden in a derived class, gets the instance of the object represented by this <see cref="T:System.Windows.Markup.Primitives.MarkupObject" />
    ///  .</summary>
    ///<returns>The instance of the object</returns>
    property Instance: DDN.mscorlib.DNObject read get_Instance;
    ///<summary>When overridden in a derived class, gets the properties of this <see cref="T:System.Windows.Markup.Primitives.MarkupObject" />
    ///  instance that should be written to XAML.</summary>
    ///<returns>The properties.  </returns>
    property Properties: DDN.mscorlib.DNIEnumerable<DNMarkupProperty> read get_Properties;
    ///<summary>When overridden in a derived class, gets the attributes associated with this <see cref="T:System.Windows.Markup.Primitives.MarkupObject" />
    ///  .  </summary>
    ///<returns>The collection of attributes. </returns>
    property Attributes: DDN.System.DNAttributeCollection read get_Attributes;
  end;

  TDNMarkupObject = class(TDNGenericImport<DNMarkupObjectClass, DNMarkupObject>) end;

  //-------------namespace: System.Windows.Markup.Primitives----------------
  DNMarkupPropertyClass = interface(DDN.mscorlib.DNObjectClass)
  ['{FB5946F8-B51B-5DE1-8AF0-5A208E17C97D}']
  end;

  ///<summary>Abstract class that provides a property description to be used while writing to markup which encapsulates access to properties and their values. </summary>
  [DNTypeName('System.Windows.Markup.Primitives.MarkupProperty')]
  DNMarkupProperty = interface(DDN.mscorlib.DNObject)
  ['{F465C255-E04E-3BB3-B7CF-89ABB3804307}']
  { getters & setters } 

    function get_Name: string;
    function get_PropertyType: DDN.mscorlib.DNType;
    function get_PropertyDescriptor: DDN.System.DNPropertyDescriptor;
    function get_DependencyProperty: DNDependencyProperty;
    function get_IsAttached: Boolean;
    function get_IsConstructorArgument: Boolean;
    function get_IsValueAsString: Boolean;
    function get_IsContent: Boolean;
    function get_IsKey: Boolean;
    function get_IsComposite: Boolean;
    function get_Value: DDN.mscorlib.DNObject;
    function get_StringValue: string;
    function get_TypeReferences: DDN.mscorlib.DNIEnumerable<DDN.mscorlib.DNType>;
    function get_Items: DDN.mscorlib.DNIEnumerable<DNMarkupObject>;
    function get_Attributes: DDN.System.DNAttributeCollection;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>When overridden in a derived class, gets a name that is used for diagnostics and error reporting. </summary>
    ///<returns>The identifier property name.</returns>
    property Name: string read get_Name;
    ///<summary>When overridden in a derived class, gets the CLR type of the property.</summary>
    ///<returns>The CLR type.</returns>
    property PropertyType: DDN.mscorlib.DNType read get_PropertyType;
    ///<summary>When overridden in a derived class, gets the <see cref="T:System.ComponentModel.PropertyDescriptor" />
    ///  for the markup property. </summary>
    ///<returns>The property descriptor. </returns>
    property PropertyDescriptor: DDN.System.DNPropertyDescriptor read get_PropertyDescriptor;
    ///<summary>When overridden in a derived class, gets the <see cref="T:System.Windows.DependencyProperty" />
    ///  identifier for the markup property if the property is implemented as a dependency property</summary>
    ///<returns>The dependency property identifier.</returns>
    property DependencyProperty: DNDependencyProperty read get_DependencyProperty;
    ///<summary>When overridden in a derived class, determines whether this <see cref="T:System.Windows.Markup.Primitives.MarkupProperty" />
    ///  is an attached <see cref="T:System.Windows.DependencyProperty" />
    ///  . </summary>
    ///<returns><see langword="true" />
    ///  if the property is an attached <see cref="T:System.Windows.DependencyProperty" />
    ///  ; otherwise, <see langword="false" />
    ///  .</returns>
    property IsAttached: Boolean read get_IsAttached;
    ///<summary>When overridden in a derived class, determines whether this <see cref="T:System.Windows.Markup.Primitives.MarkupProperty" />
    ///  represents a constructor argument.</summary>
    ///<returns><see langword="true" />
    ///  if this property represents a constructor argument; otherwise, <see langword="false" />
    ///  .</returns>
    property IsConstructorArgument: Boolean read get_IsConstructorArgument;
    ///<summary>When overridden in a derived class, determines whether this <see cref="T:System.Windows.Markup.Primitives.MarkupProperty" />
    ///  represents text which is passed to a type converter to create an instance of the property or if a constructor should be used.</summary>
    ///<returns><see langword="true" />
    ///  , if this <see cref="T:System.Windows.Markup.Primitives.MarkupProperty" />
    ///  represents a string; otherwise, <see langword="false" />
    ///  .</returns>
    property IsValueAsString: Boolean read get_IsValueAsString;
    ///<summary>When overridden in a derived class, determines whether this <see cref="T:System.Windows.Markup.Primitives.MarkupProperty" />
    ///  represents direct content of a collection.</summary>
    ///<returns><see langword="true" />
    ///  if the property represents direct content; otherwise, <see langword="false" />
    ///  .</returns>
    property IsContent: Boolean read get_IsContent;
    ///<summary>When overridden in a derived class, determines whether this <see cref="T:System.Windows.Markup.Primitives.MarkupProperty" />
    ///  represents the key used by the <see cref="T:System.Windows.Markup.Primitives.MarkupObject" />
    ///  to store the item in a dictionary.</summary>
    ///<returns><see langword="true" />
    ///  if this property represents a key; otherwise, <see langword="false" />
    ///  .</returns>
    property IsKey: Boolean read get_IsKey;
    ///<summary>When overridden in a derived class, determines whether this <see cref="T:System.Windows.Markup.Primitives.MarkupProperty" />
    ///  is a composite property. </summary>
    ///<returns><see langword="true" />
    ///  is this property is a composite property; otherwise, <see langword="false" />
    ///  .</returns>
    property IsComposite: Boolean read get_IsComposite;
    ///<summary>When overridden in a derived class, gets the current value of this <see cref="T:System.Windows.Markup.Primitives.MarkupProperty" />
    ///  .</summary>
    ///<returns>The current value.</returns>
    property Value: DDN.mscorlib.DNObject read get_Value;
    ///<summary>When overridden in a derived class, gets the string value of this <see cref="T:System.Windows.Markup.Primitives.MarkupProperty" />
    ///  .</summary>
    ///<returns>The string value.</returns>
    property StringValue: string read get_StringValue;
    ///<summary>When overridden in a derived class, gets the set of types that this <see cref="T:System.Windows.Markup.Primitives.MarkupProperty" />
    ///  will reference when it serializes its value as a string.</summary>
    ///<returns>The set of types.</returns>
    property TypeReferences: DDN.mscorlib.DNIEnumerable<DDN.mscorlib.DNType> read get_TypeReferences;
    ///<summary>When overridden in a derived class, gets the items that make up the value of this property. </summary>
    ///<returns>The items that make up the value of this property.</returns>
    property Items: DDN.mscorlib.DNIEnumerable<DNMarkupObject> read get_Items;
    ///<summary>When overridden in a derived class, gets the attributes associated with this <see cref="T:System.Windows.Markup.Primitives.MarkupProperty" />
    ///  .</summary>
    ///<returns>The collection of attributes.</returns>
    property Attributes: DDN.System.DNAttributeCollection read get_Attributes;
  end;

  TDNMarkupProperty = class(TDNGenericImport<DNMarkupPropertyClass, DNMarkupProperty>) end;

  //-------------namespace: System.Windows.Markup----------------
  DNServiceProvidersClass = interface(DNObjectClass)
  ['{9FF498D0-994B-5F24-9C2A-8E552D755A09}']
  { constructors } 

    ///<summary>Initializes a new instance of the <see cref="T:System.Windows.Markup.ServiceProviders" />
    ///  class. </summary>
    {class} function init: DNServiceProviders;

  end;

  ///<summary>Provides an implementation for the <see cref="T:System.IServiceProvider" />
  ///  interface with methods that enable adding services.</summary>
  [DNTypeName('System.Windows.Markup.ServiceProviders')]
  DNServiceProviders = interface(DDN.mscorlib.DNIServiceProvider)
  ['{E52C4415-C8BA-32D0-BB68-B03CAF8B102C}']
  { methods } 

    ///<summary>Gets the service object of the specified type.</summary>
    ///  <param name="serviceType">The type of service object to get.</param>
    ///<returns>A service implementation for the type <paramref name="serviceType" />
    ///  . May be <see langword="null" />
    ///  if there is no service stored for type <paramref name="serviceType" />
    ///  .</returns>
    function GetService(serviceType: DDN.mscorlib.DNType): DDN.mscorlib.DNObject;
    ///<summary>Adds a service to the list. </summary>
    ///  <param name="serviceType">Service type of the new service.</param>
    ///  <param name="service">The service implementation class.</param>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="serviceType" />
    ///  or <paramref name="service" />
    ///  is <see langword="null" />
    ///  .</exception><exception cref="T:System.ArgumentException">Attempted to add a service that already exists in the dictionary.</exception>
    procedure AddService(serviceType: DDN.mscorlib.DNType; service: DDN.mscorlib.DNObject);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNServiceProviders = class(TDNGenericImport<DNServiceProvidersClass, DNServiceProviders>) end;

  //-------------namespace: System.Windows.Converters----------------
  DNInt32RectValueSerializerClass = interface(DNObjectClass)
  ['{6C070776-62BC-590B-B93A-9D2B0862C1F0}']
  { constructors } 

    ///<summary>Initializes a new instance of the <see cref="T:System.Windows.Converters.Int32RectValueSerializer" />
    ///  class.</summary>
    {class} function init: DNInt32RectValueSerializer;

  end;

  ///<summary>Converts instances of <see cref="T:System.String" />
  ///  to and from instances of <see cref="T:System.Windows.Int32Rect" />
  ///  .</summary>
  [DNTypeName('System.Windows.Converters.Int32RectValueSerializer')]
  DNInt32RectValueSerializer = interface(DNObject)
  ['{018CBEAD-FE38-36A1-85A6-8CFF4CB74BA8}']
  { methods } 

    ///<summary>Determines whether the specified <see cref="T:System.String" />
    ///  can be converted to an instance of <see cref="T:System.Windows.Int32Rect" />
    ///  .</summary>
    ///  <param name="value">String to evaluate for conversion.</param>
    ///  <param name="context">Context information that is used for conversion.</param>
    ///<returns>Always returns <see langword="true" />
    ///  .</returns>
    function CanConvertFromString(value: string; context: DDN.System.Xaml.DNIValueSerializerContext): Boolean;
    ///<summary>Determines whether the specified <see cref="T:System.Windows.Int32Rect" />
    ///  can be converted to a <see cref="T:System.String" />
    ///  .</summary>
    ///  <param name="value">The object to evaluate for conversion.</param>
    ///  <param name="context">Context information that is used for conversion.</param>
    ///<returns><see langword="true" />
    ///  if <paramref name="value" />
    ///  can be converted into a <see cref="T:System.String" />
    ///  ; otherwise, <see langword="false" />
    ///  .</returns>
    function CanConvertToString(value: DDN.mscorlib.DNObject; context: DDN.System.Xaml.DNIValueSerializerContext): Boolean;
    ///<summary>Converts a <see cref="T:System.String" />
    ///  into a <see cref="T:System.Windows.Int32Rect" />
    ///  .</summary>
    ///  <param name="value">The string to convert.</param>
    ///  <param name="context">Context information that is used for conversion.</param>
    ///<returns>A new instance of <see cref="T:System.Windows.Int32Rect" />
    ///  based on the supplied <paramref name="value" />
    ///  .</returns>
    function ConvertFromString(value: string; context: DDN.System.Xaml.DNIValueSerializerContext): DDN.mscorlib.DNObject;
    ///<summary>Converts an instance of <see cref="T:System.Windows.Int32Rect" />
    ///  to a <see cref="T:System.String" />
    ///  .</summary>
    ///  <param name="value">The object to convert into a string.</param>
    ///  <param name="context">Context information that is used for conversion.</param>
    ///<returns>A string representation of the specified <see cref="T:System.Windows.Int32Rect" />
    ///  .</returns>
    function ConvertToString(value: DDN.mscorlib.DNObject; context: DDN.System.Xaml.DNIValueSerializerContext): string;
    function TypeReferences(value: DDN.mscorlib.DNObject; context: DDN.System.Xaml.DNIValueSerializerContext): DDN.mscorlib.DNIEnumerable<DDN.mscorlib.DNType>;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNInt32RectValueSerializer = class(TDNGenericImport<DNInt32RectValueSerializerClass, DNInt32RectValueSerializer>) end;

  //-------------namespace: System.Windows.Converters----------------
  DNPointValueSerializerClass = interface(DNObjectClass)
  ['{05009FCE-B22D-58D7-9F9C-6D1B9B9DCB98}']
  { constructors } 

    ///<summary>Initializes a new instance of the <see cref="T:System.Windows.Converters.PointValueSerializer" />
    ///  class.</summary>
    {class} function init: DNPointValueSerializer;

  end;

  ///<summary>Converts instances of <see cref="T:System.String" />
  ///  to and from instances of <see cref="T:System.Windows.Point" />
  ///  .</summary>
  [DNTypeName('System.Windows.Converters.PointValueSerializer')]
  DNPointValueSerializer = interface(DNObject)
  ['{9361D9E1-FA34-3EE1-8025-1CDB26180AB1}']
  { methods } 

    ///<summary>Determines whether the specified <see cref="T:System.String" />
    ///  can be converted to an instance of <see cref="T:System.Windows.Point" />
    ///  .</summary>
    ///  <param name="value">String to evaluate for conversion.</param>
    ///  <param name="context">Context information that is used for conversion.</param>
    ///<returns>Always returns <see langword="true" />
    ///  .</returns>
    function CanConvertFromString(value: string; context: DDN.System.Xaml.DNIValueSerializerContext): Boolean;
    ///<summary>Determines whether the specified <see cref="T:System.Windows.Point" />
    ///  can be converted to a <see cref="T:System.String" />
    ///  .</summary>
    ///  <param name="value">The object to evaluate for conversion.</param>
    ///  <param name="context">Context information that is used for conversion.</param>
    ///<returns><see langword="true" />
    ///  if <paramref name="value" />
    ///  can be converted into a <see cref="T:System.String" />
    ///  ; otherwise, <see langword="false" />
    ///  .</returns>
    function CanConvertToString(value: DDN.mscorlib.DNObject; context: DDN.System.Xaml.DNIValueSerializerContext): Boolean;
    ///<summary>Converts a <see cref="T:System.String" />
    ///  into a <see cref="T:System.Windows.Point" />
    ///  .</summary>
    ///  <param name="value">The string to convert.</param>
    ///  <param name="context">Context information that is used for conversion.</param>
    ///<returns>A new instance of <see cref="T:System.Windows.Point" />
    ///  based on the supplied <paramref name="value" />
    ///  .</returns>
    function ConvertFromString(value: string; context: DDN.System.Xaml.DNIValueSerializerContext): DDN.mscorlib.DNObject;
    ///<summary>Converts an instance of <see cref="T:System.Windows.Point" />
    ///  to a <see cref="T:System.String" />
    ///  .</summary>
    ///  <param name="value">The object to convert into a string.</param>
    ///  <param name="context">Context information that is used for conversion.</param>
    ///<returns>A string representation of the specified <see cref="T:System.Windows.Point" />
    ///  .</returns>
    function ConvertToString(value: DDN.mscorlib.DNObject; context: DDN.System.Xaml.DNIValueSerializerContext): string;
    function TypeReferences(value: DDN.mscorlib.DNObject; context: DDN.System.Xaml.DNIValueSerializerContext): DDN.mscorlib.DNIEnumerable<DDN.mscorlib.DNType>;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNPointValueSerializer = class(TDNGenericImport<DNPointValueSerializerClass, DNPointValueSerializer>) end;

  //-------------namespace: System.Windows.Converters----------------
  DNRectValueSerializerClass = interface(DNObjectClass)
  ['{CFC00544-5C1B-5CDC-AFD2-8F1EDADC4E62}']
  { constructors } 

    ///<summary>Initializes a new instance of the <see cref="T:System.Windows.Converters.RectValueSerializer" />
    ///  class.</summary>
    {class} function init: DNRectValueSerializer;

  end;

  ///<summary>Converts instances of <see cref="T:System.String" />
  ///  to and from instances of <see cref="T:System.Windows.Rect" />
  ///  .</summary>
  [DNTypeName('System.Windows.Converters.RectValueSerializer')]
  DNRectValueSerializer = interface(DNObject)
  ['{36731F48-797D-3C84-A695-0DD5D5FE9D6F}']
  { methods } 

    ///<summary>Determines whether the specified <see cref="T:System.String" />
    ///  can be converted to an instance of <see cref="T:System.Windows.Rect" />
    ///  .</summary>
    ///  <param name="value">String to evaluate for conversion.</param>
    ///  <param name="context">Context information that is used for conversion.</param>
    ///<returns>Always returns <see langword="true" />
    ///  .</returns>
    function CanConvertFromString(value: string; context: DDN.System.Xaml.DNIValueSerializerContext): Boolean;
    ///<summary>Determines whether the specified <see cref="T:System.Windows.Rect" />
    ///  can be converted to a <see cref="T:System.String" />
    ///  .</summary>
    ///  <param name="value">The object to evaluate for conversion.</param>
    ///  <param name="context">Context information that is used for conversion.</param>
    ///<returns><see langword="true" />
    ///  if <paramref name="value" />
    ///  can be converted into a <see cref="T:System.String" />
    ///  ; otherwise, <see langword="false" />
    ///  .</returns>
    function CanConvertToString(value: DDN.mscorlib.DNObject; context: DDN.System.Xaml.DNIValueSerializerContext): Boolean;
    ///<summary>Converts a <see cref="T:System.String" />
    ///  into a <see cref="T:System.Windows.Rect" />
    ///  .</summary>
    ///  <param name="value">The string to convert.</param>
    ///  <param name="context">Context information that is used for conversion.</param>
    ///<returns>A new instance of <see cref="T:System.Windows.Rect" />
    ///  based on the supplied <paramref name="value" />
    ///  .</returns>
    function ConvertFromString(value: string; context: DDN.System.Xaml.DNIValueSerializerContext): DDN.mscorlib.DNObject;
    ///<summary>Converts an instance of <see cref="T:System.Windows.Rect" />
    ///  to a <see cref="T:System.String" />
    ///  .</summary>
    ///  <param name="value">The object to convert into a string.</param>
    ///  <param name="context">Context information that is used for conversion.</param>
    ///<returns>A string representation of the specified <see cref="T:System.Windows.Rect" />
    ///  .</returns>
    function ConvertToString(value: DDN.mscorlib.DNObject; context: DDN.System.Xaml.DNIValueSerializerContext): string;
    function TypeReferences(value: DDN.mscorlib.DNObject; context: DDN.System.Xaml.DNIValueSerializerContext): DDN.mscorlib.DNIEnumerable<DDN.mscorlib.DNType>;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNRectValueSerializer = class(TDNGenericImport<DNRectValueSerializerClass, DNRectValueSerializer>) end;

  //-------------namespace: System.Windows.Converters----------------
  DNSizeValueSerializerClass = interface(DNObjectClass)
  ['{637D9FA5-0FAB-5FF5-BE33-60CAE7A7F008}']
  { constructors } 

    ///<summary>Initializes a new instance of the <see cref="T:System.Windows.Converters.SizeValueSerializer" />
    ///  class.</summary>
    {class} function init: DNSizeValueSerializer;

  end;

  ///<summary>Converts instances of <see cref="T:System.String" />
  ///  to and from instances of <see cref="T:System.Windows.Size" />
  ///  .</summary>
  [DNTypeName('System.Windows.Converters.SizeValueSerializer')]
  DNSizeValueSerializer = interface(DNObject)
  ['{CC5F4927-CC0D-368C-9DF5-DBB5AB396158}']
  { methods } 

    ///<summary>Determines whether the specified <see cref="T:System.String" />
    ///  can be converted to an instance of <see cref="T:System.Windows.Size" />
    ///  .</summary>
    ///  <param name="value">String to evaluate for conversion.</param>
    ///  <param name="context">Context information that is used for conversion.</param>
    ///<returns>Always returns <see langword="true" />
    ///  .</returns>
    function CanConvertFromString(value: string; context: DDN.System.Xaml.DNIValueSerializerContext): Boolean;
    ///<summary>Determines whether the specified <see cref="T:System.Windows.Size" />
    ///  can be converted to a <see cref="T:System.String" />
    ///  .</summary>
    ///  <param name="value">The object to evaluate for conversion.</param>
    ///  <param name="context">Context information that is used for conversion.</param>
    ///<returns><see langword="true" />
    ///  if <paramref name="value" />
    ///  can be converted into a <see cref="T:System.String" />
    ///  ; otherwise, <see langword="false" />
    ///  .</returns>
    function CanConvertToString(value: DDN.mscorlib.DNObject; context: DDN.System.Xaml.DNIValueSerializerContext): Boolean;
    ///<summary>Converts a <see cref="T:System.String" />
    ///  into a <see cref="T:System.Windows.Size" />
    ///  .</summary>
    ///  <param name="value">The string to convert.</param>
    ///  <param name="context">Context information that is used for conversion.</param>
    ///<returns>A new instance of <see cref="T:System.Windows.Size" />
    ///  based on the supplied <paramref name="value" />
    ///  .</returns>
    function ConvertFromString(value: string; context: DDN.System.Xaml.DNIValueSerializerContext): DDN.mscorlib.DNObject;
    ///<summary>Converts an instance of <see cref="T:System.Windows.Size" />
    ///  to a <see cref="T:System.String" />
    ///  .</summary>
    ///  <param name="value">The object to convert into a string.</param>
    ///  <param name="context">Context information that is used for conversion.</param>
    ///<returns>A string representation of the specified <see cref="T:System.Windows.Size" />
    ///  .</returns>
    function ConvertToString(value: DDN.mscorlib.DNObject; context: DDN.System.Xaml.DNIValueSerializerContext): string;
    function TypeReferences(value: DDN.mscorlib.DNObject; context: DDN.System.Xaml.DNIValueSerializerContext): DDN.mscorlib.DNIEnumerable<DDN.mscorlib.DNType>;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNSizeValueSerializer = class(TDNGenericImport<DNSizeValueSerializerClass, DNSizeValueSerializer>) end;

  //-------------namespace: System.Windows.Converters----------------
  DNVectorValueSerializerClass = interface(DNObjectClass)
  ['{DFDE1ED8-C1A0-529A-A2CB-A7C1EAACFC71}']
  { constructors } 

    ///<summary>Initializes a new instance of the <see cref="T:System.Windows.Converters.VectorValueSerializer" />
    ///  class.</summary>
    {class} function init: DNVectorValueSerializer;

  end;

  ///<summary>Converts instances of <see cref="T:System.String" />
  ///  to and from instances of <see cref="T:System.Windows.Vector" />
  ///  .</summary>
  [DNTypeName('System.Windows.Converters.VectorValueSerializer')]
  DNVectorValueSerializer = interface(DNObject)
  ['{8D5A89DA-B624-380E-99B6-E681863BA008}']
  { methods } 

    ///<summary>Determines whether the specified <see cref="T:System.String" />
    ///  can be converted to an instance of <see cref="T:System.Windows.Vector" />
    ///  .</summary>
    ///  <param name="value">String to evaluate for conversion.</param>
    ///  <param name="context">Context information that is used for conversion.</param>
    ///<returns>Always returns <see langword="true" />
    ///  .</returns>
    function CanConvertFromString(value: string; context: DDN.System.Xaml.DNIValueSerializerContext): Boolean;
    ///<summary>Determines whether the specified <see cref="T:System.Windows.Vector" />
    ///  can be converted to a <see cref="T:System.String" />
    ///  .</summary>
    ///  <param name="value">The object to evaluate for conversion.</param>
    ///  <param name="context">Context information that is used for conversion.</param>
    ///<returns><see langword="true" />
    ///  if <paramref name="value" />
    ///  can be converted into a <see cref="T:System.String" />
    ///  ; otherwise, <see langword="false" />
    ///  .</returns>
    function CanConvertToString(value: DDN.mscorlib.DNObject; context: DDN.System.Xaml.DNIValueSerializerContext): Boolean;
    ///<summary>Converts a <see cref="T:System.String" />
    ///  into a <see cref="T:System.Windows.Vector" />
    ///  .</summary>
    ///  <param name="value">The string to convert.</param>
    ///  <param name="context">Context information that is used for conversion.</param>
    ///<returns>A new instance of <see cref="T:System.Windows.Vector" />
    ///  based on the supplied <paramref name="value" />
    ///  .</returns>
    function ConvertFromString(value: string; context: DDN.System.Xaml.DNIValueSerializerContext): DDN.mscorlib.DNObject;
    ///<summary>Converts an instance of <see cref="T:System.Windows.Vector" />
    ///  to a <see cref="T:System.String" />
    ///  .</summary>
    ///  <param name="value">The object to convert into a string.</param>
    ///  <param name="context">Context information that is used for conversion.</param>
    ///<returns>A string representation of the specified <see cref="T:System.Windows.Vector" />
    ///  .</returns>
    function ConvertToString(value: DDN.mscorlib.DNObject; context: DDN.System.Xaml.DNIValueSerializerContext): string;
    function TypeReferences(value: DDN.mscorlib.DNObject; context: DDN.System.Xaml.DNIValueSerializerContext): DDN.mscorlib.DNIEnumerable<DDN.mscorlib.DNType>;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNVectorValueSerializer = class(TDNGenericImport<DNVectorValueSerializerClass, DNVectorValueSerializer>) end;

  //-------------namespace: System.Windows.Input----------------
  DNKeyValueSerializerClass = interface(DNObjectClass)
  ['{8E5EE957-35DB-54C4-A406-2E4BBE349DD3}']
  { constructors } 

    ///<summary>Initializes a new instance of the <see cref="T:System.Windows.Input.KeyValueSerializer" />
    ///  class.</summary>
    {class} function init: DNKeyValueSerializer;

  end;

  ///<summary>Converts instances of <see cref="T:System.String" />
  ///  to and from instances of <see cref="T:System.Windows.Input.Key" />
  ///  .</summary>
  [DNTypeName('System.Windows.Input.KeyValueSerializer')]
  DNKeyValueSerializer = interface(DNObject)
  ['{E473D58E-2B94-31F9-8C18-69CAFDCEEA11}']
  { methods } 

    ///<summary>Determines if the specified <see cref="T:System.String" />
    ///  can be convert to an instance of <see cref="T:System.Windows.Input.Key" />
    ///  .</summary>
    ///  <param name="value">String to evaluate for conversion.</param>
    ///  <param name="context">Context information that is used for conversion.</param>
    ///<returns>Always returns <see langword="true" />
    ///  .</returns>
    function CanConvertFromString(value: string; context: DDN.System.Xaml.DNIValueSerializerContext): Boolean;
    ///<summary>Determines if the specified <see cref="T:System.Windows.Input.Key" />
    ///  can be converted to a <see cref="T:System.String" />
    ///  .</summary>
    ///  <param name="value">The key to evaluate for conversion.</param>
    ///  <param name="context">Context information that is used for conversion.</param>
    ///<returns><see langword="true" />
    ///  if <paramref name="value" />
    ///  can be converted into a <see cref="T:System.String" />
    ///  ; otherwise, <see langword="false" />
    ///  .</returns>
    function CanConvertToString(value: DDN.mscorlib.DNObject; context: DDN.System.Xaml.DNIValueSerializerContext): Boolean;
    ///<summary>Converts a <see cref="T:System.String" />
    ///  into a <see cref="T:System.Windows.Input.Key" />
    ///  .</summary>
    ///  <param name="value">The string to convert into a <see cref="T:System.Windows.Input.Key" />
    ///  .</param>
    ///  <param name="context">Context information that is used for conversion.</param>
    ///<returns>A new instance of <see cref="T:System.Windows.Input.Key" />
    ///  based on the supplied <paramref name="value" />
    ///  .</returns>
    function ConvertFromString(value: string; context: DDN.System.Xaml.DNIValueSerializerContext): DDN.mscorlib.DNObject;
    ///<summary>Converts an instance of <see cref="T:System.Windows.Input.Key" />
    ///  to a <see cref="T:System.String" />
    ///  .</summary>
    ///  <param name="value">The key to convert into a string.</param>
    ///  <param name="context">Context information that is used for conversion.</param>
    ///<returns>An invariant string representation of the specified <see cref="T:System.Windows.Input.Key" />
    ///  .</returns>
    function ConvertToString(value: DDN.mscorlib.DNObject; context: DDN.System.Xaml.DNIValueSerializerContext): string;
    function TypeReferences(value: DDN.mscorlib.DNObject; context: DDN.System.Xaml.DNIValueSerializerContext): DDN.mscorlib.DNIEnumerable<DDN.mscorlib.DNType>;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNKeyValueSerializer = class(TDNGenericImport<DNKeyValueSerializerClass, DNKeyValueSerializer>) end;

  //-------------namespace: System.Windows.Input----------------
  DNModifierKeysValueSerializerClass = interface(DNObjectClass)
  ['{3DF1EAF8-DF69-5516-8179-4DD45086900C}']
  { constructors } 

    ///<summary>Initializes a new instance of the <see cref="T:System.Windows.Input.ModifierKeysValueSerializer" />
    ///  class.</summary>
    {class} function init: DNModifierKeysValueSerializer;

  end;

  ///<summary>Converts instances of <see cref="T:System.String" />
  ///  to and from instances of <see cref="T:System.Windows.Input.ModifierKeys" />
  ///  .</summary>
  [DNTypeName('System.Windows.Input.ModifierKeysValueSerializer')]
  DNModifierKeysValueSerializer = interface(DNObject)
  ['{4AE8E962-73A3-399A-9969-85A8074619DF}']
  { methods } 

    ///<summary>Determines if the specified <see cref="T:System.String" />
    ///  can be convert to an instance of <see cref="T:System.Windows.Input.ModifierKeys" />
    ///  .</summary>
    ///  <param name="value">String to evaluate for conversion.</param>
    ///  <param name="context">Context information that is used for conversion.</param>
    ///<returns>Always returns <see langword="true" />
    ///  .</returns>
    function CanConvertFromString(value: string; context: DDN.System.Xaml.DNIValueSerializerContext): Boolean;
    ///<summary>Determines if the specified <see cref="T:System.Windows.Input.ModifierKeys" />
    ///  can be converted to a <see cref="T:System.String" />
    ///  .</summary>
    ///  <param name="value">The modifier keys to evaluate for conversion.</param>
    ///  <param name="context">Context information that is used for conversion.</param>
    ///<returns><see langword="true" />
    ///  if <paramref name="value" />
    ///  can be converted into a <see cref="T:System.String" />
    ///  ; otherwise, <see langword="false" />
    ///  .</returns>
    function CanConvertToString(value: DDN.mscorlib.DNObject; context: DDN.System.Xaml.DNIValueSerializerContext): Boolean;
    ///<summary>Converts a <see cref="T:System.String" />
    ///  into a <see cref="T:System.Windows.Input.ModifierKeys" />
    ///  value.</summary>
    ///  <param name="value">The string to convert into a <see cref="T:System.Windows.Input.ModifierKeys" />
    ///  .</param>
    ///  <param name="context">Context information that is used for conversion.</param>
    ///<returns>A new instance of <see cref="T:System.Windows.Input.ModifierKeys" />
    ///  based on the supplied <paramref name="value" />
    ///  .</returns>
    function ConvertFromString(value: string; context: DDN.System.Xaml.DNIValueSerializerContext): DDN.mscorlib.DNObject;
    ///<summary>Converts an instance of <see cref="T:System.Windows.Input.ModifierKeys" />
    ///  to a <see cref="T:System.String" />
    ///  .</summary>
    ///  <param name="value">The key to convert into a string.</param>
    ///  <param name="context">Context information that is used for conversion.</param>
    ///<returns>An invariant string representation of the specified <see cref="T:System.Windows.Input.ModifierKeys" />
    ///  value.</returns>
    function ConvertToString(value: DDN.mscorlib.DNObject; context: DDN.System.Xaml.DNIValueSerializerContext): string;
    function TypeReferences(value: DDN.mscorlib.DNObject; context: DDN.System.Xaml.DNIValueSerializerContext): DDN.mscorlib.DNIEnumerable<DDN.mscorlib.DNType>;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNModifierKeysValueSerializer = class(TDNGenericImport<DNModifierKeysValueSerializerClass, DNModifierKeysValueSerializer>) end;

  //-------------namespace: System.Windows.Media.Converters----------------
  DNMatrixValueSerializerClass = interface(DNObjectClass)
  ['{4D781055-5D82-508F-970B-9699C1E5F883}']
  { constructors } 

    ///<summary>Initializes a new instance of the <see cref="T:System.Windows.Media.Converters.MatrixValueSerializer" />
    ///  class.</summary>
    {class} function init: DNMatrixValueSerializer;

  end;

  ///<summary>Converts instances of <see cref="T:System.String" />
  ///  to and from instances of <see cref="T:System.Windows.Media.Matrix" />
  ///  .</summary>
  [DNTypeName('System.Windows.Media.Converters.MatrixValueSerializer')]
  DNMatrixValueSerializer = interface(DNObject)
  ['{1CB5965A-4569-3BA1-BADD-D45004B2FC34}']
  { methods } 

    ///<summary>Determines if conversion from a given <see cref="T:System.String" />
    ///  to an instance of <see cref="T:System.Windows.Media.Matrix" />
    ///  is possible.</summary>
    ///  <param name="value">String to evaluate for conversion.</param>
    ///  <param name="context">Context information used for conversion.</param>
    ///<returns><see langword="true" />
    ///  if the value can be converted; otherwise, <see langword="false" />
    ///  .</returns>
    function CanConvertFromString(value: string; context: DDN.System.Xaml.DNIValueSerializerContext): Boolean;
    ///<summary>Determines if an instance of <see cref="T:System.Windows.Media.Matrix" />
    ///  can be converted to a <see cref="T:System.String" />
    ///  .</summary>
    ///  <param name="value">Instance of <see cref="T:System.Windows.Media.Matrix" />
    ///  to evaluate for conversion.</param>
    ///  <param name="context">Context information used for conversion.</param>
    ///<returns><see langword="true" />
    ///  if <paramref name="value" />
    ///  can be converted into a <see cref="T:System.String" />
    ///  ; otherwise, <see langword="false" />
    ///  .</returns>
    ///<exception cref="T:System.ArgumentException">Occurs when <paramref name="value" />
    ///  is not a <see cref="T:System.Windows.Media.Int32Collection" />
    ///  .</exception>
    function CanConvertToString(value: DDN.mscorlib.DNObject; context: DDN.System.Xaml.DNIValueSerializerContext): Boolean;
    ///<summary>Converts a <see cref="T:System.String" />
    ///  into a <see cref="T:System.Windows.Media.Matrix" />
    ///  .</summary>
    ///  <param name="value"><see cref="T:System.String" />
    ///  value to convert into a <see cref="T:System.Windows.Media.Matrix" />
    ///  .</param>
    ///  <param name="context">Context information used for conversion.</param>
    ///<returns>A new instance of <see cref="T:System.Windows.Media.Matrix" />
    ///  based on the supplied <paramref name="value" />
    ///  .</returns>
    function ConvertFromString(value: string; context: DDN.System.Xaml.DNIValueSerializerContext): DDN.mscorlib.DNObject;
    ///<summary>Converts an instance of <see cref="T:System.Windows.Media.Matrix" />
    ///  to a <see cref="T:System.String" />
    ///  .</summary>
    ///  <param name="value">Instance of <see cref="T:System.Windows.Media.Matrix" />
    ///  to evaluate for conversion.</param>
    ///  <param name="context">Context information used for conversion.</param>
    ///<returns>A <see cref="T:System.String" />
    ///  representation of the supplied <see cref="T:System.Windows.Media.Matrix" />
    ///  object.</returns>
    function ConvertToString(value: DDN.mscorlib.DNObject; context: DDN.System.Xaml.DNIValueSerializerContext): string;
    function TypeReferences(value: DDN.mscorlib.DNObject; context: DDN.System.Xaml.DNIValueSerializerContext): DDN.mscorlib.DNIEnumerable<DDN.mscorlib.DNType>;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNMatrixValueSerializer = class(TDNGenericImport<DNMatrixValueSerializerClass, DNMatrixValueSerializer>) end;

  //-------------namespace: System.Windows----------------
  DNNameScopeClass = interface(DNObjectClass)
  ['{C0839F22-B3A9-5149-97D9-3AC477AA1A22}']
  { constructors } 

    ///<summary>Initializes a new instance of the <see cref="T:System.Windows.NameScope" />
    ///  class.</summary>
    {class} function init: DNNameScope;

  { static fields getter & setter } 

   function __fakeFieldGet_NameScopeProperty: DNDependencyProperty;

  { static fields } 

    ///<summary>Identifies the <see cref="P:System.Windows.NameScope.NameScope" />
    ///  attached property. </summary>
    ///<returns>The identifier for the <see cref="P:System.Windows.NameScope.NameScope" />
    ///  attached property.</returns>
    {class} property NameScopeProperty: DNDependencyProperty read __fakeFieldGet_NameScopeProperty;

  { static methods } 

    ///<summary>Provides the attached property set accessor for the <see cref="P:System.Windows.NameScope.NameScope" />
    ///  attached property.</summary>
    ///  <param name="dependencyObject">Object to change XAML namescope for.</param>
    ///  <param name="value">The new XAML namescope, using an interface cast.</param>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="dependencyObject" />
    ///  is <see langword="null" />
    ///  .</exception>
    {class} procedure SetNameScope(dependencyObject: DNDependencyObject; value: DDN.System.Xaml.DNINameScope);
    ///<summary>Provides the attached property get accessor for the <see cref="P:System.Windows.NameScope.NameScope" />
    ///  attached property.</summary>
    ///  <param name="dependencyObject">The object to get the XAML namescope from.</param>
    ///<returns>A XAML namescope, as an <see cref="T:System.Windows.Markup.INameScope" />
    ///  instance.</returns>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="dependencyObject" />
    ///  is <see langword="null" />
    ///  .</exception>
    {class} function GetNameScope(dependencyObject: DNDependencyObject): DDN.System.Xaml.DNINameScope;

  end;

  ///<summary>Implements base WPF support for the <see cref="T:System.Windows.Markup.INameScope" />
  ///  methods that store or retrieve name-object mappings into a particular XAML namescope. Adds attached property support to make it simpler to get or set XAML namescope names dynamically at the element level..</summary>
  [DNTypeName('System.Windows.NameScope')]
  DNNameScope = interface(DDN.System.Xaml.DNINameScopeDictionary)
  ['{9B417001-72EB-3C78-BE3C-89CE2379918E}']
  { getters & setters } 

    function get_Count: Int32;
    function get_IsReadOnly: Boolean;
    function get_Keys: DDN.mscorlib.DNICollection<string>;
    function get_Values: DDN.mscorlib.DNICollection<DDN.mscorlib.DNObject>;

  { methods } 

    ///<summary>Registers a new name-object pair into the current XAML namescope.</summary>
    ///  <param name="name">The name to use for mapping the given object.</param>
    ///  <param name="scopedElement">The object to be mapped to the provided name.</param>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="name" />
    ///  or <paramref name="scopedElement" />
    ///  was provided as <see langword="null" />
    ///  .</exception><exception cref="T:System.ArgumentException"><paramref name="name" />
    ///  was provided as empty string- or -
    ///  <paramref name="name" />
    ///  provided was rejected by the parser, because it contained characters that are invalid for a XAML name- or -
    ///  <paramref name="name" />
    ///  provided would result in a duplicate name registration.</exception>
    procedure RegisterName(name: string; scopedElement: DDN.mscorlib.DNObject);
    function &Contains(item: DDN.mscorlib.DNKeyValuePair<string, DDN.mscorlib.DNObject>): Boolean;
    ///<summary>Removes a name-object mapping from the XAML namescope.</summary>
    ///  <param name="name">The name of the mapping to remove.</param>
    ///<exception cref="T:System.ArgumentException"><paramref name="name" />
    ///  was provided as empty string.- or -
    ///  <paramref name="name" />
    ///  provided had not been registered.</exception><exception cref="T:System.ArgumentNullException"><paramref name="name" />
    ///  is <see langword="null" />
    ///  .</exception>
    procedure UnregisterName(name: string);
    ///<summary>Returns the corresponding object in the XAML namescope maintained by this <see cref="T:System.Windows.NameScope" />
    ///  , based on a provided name string.</summary>
    ///  <param name="name">Name portion of an existing mapping to retrieve the object portion for.</param>
    ///<returns>The requested object that is mapped with <paramref name="name" />
    ///  . Can return <see langword="null" />
    ///  if <paramref name="name" />
    ///  was provided as <see langword="null" />
    ///  or empty string, or if no matching object was found.</returns>
    function FindName(name: string): DDN.mscorlib.DNObject;
    procedure CopyTo(&array: TArray<DDN.mscorlib.DNKeyValuePair<string, DDN.mscorlib.DNObject>>; arrayIndex: Int32);
    ///<summary>Returns whether a provided name already exists in this <see cref="T:System.Windows.NameScope" />
    ///  .</summary>
    ///  <param name="key">The string key to find.</param>
    ///<returns><see langword="true" />
    ///  if the specified <paramref name="key" />
    ///  identifies a name for an existing mapping in this <see cref="T:System.Windows.NameScope" />
    ///  . <see langword="false" />
    ///  if the specified <paramref name="key" />
    ///  does not exist in the current <see cref="T:System.Windows.NameScope" />
    ///  .</returns>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="key" />
    ///  is <see langword="null" />
    ///  .</exception>
    function ContainsKey(key: string): Boolean;
    function TryGetValue(key: string; out value: DDN.mscorlib.DNObject): Boolean;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>Returns the number of items in the collection of mapped names in this <see cref="T:System.Windows.NameScope" />
    ///  .</summary>
    ///<returns>The number of items in the collection.</returns>
    property Count: Int32 read get_Count;
    ///<summary>Gets a value indicating whether the collection is read-only.</summary>
    ///<returns>Always returns <see langword="false" />
    ///  .</returns>
    property IsReadOnly: Boolean read get_IsReadOnly;
    ///<summary>Gets a collection of the keys in the <see cref="T:System.Windows.NameScope" />
    ///  dictionary.</summary>
    ///<returns>A collection of the keys in the <see cref="T:System.Windows.NameScope" />
    ///  dictionary.</returns>
    property Keys: DDN.mscorlib.DNICollection<string> read get_Keys;
    ///<summary>Gets a collection of the values in the <see cref="T:System.Windows.NameScope" />
    ///  dictionary.</summary>
    ///<returns>A collection of the values in the <see cref="T:System.Windows.NameScope" />
    ///  dictionary.</returns>
    property Values: DDN.mscorlib.DNICollection<DDN.mscorlib.DNObject> read get_Values;
  end;

  TDNNameScope = class(TDNGenericImport<DNNameScopeClass, DNNameScope>) end;

  //-------------namespace: System.Windows----------------
  DNPropertyMetadataClass = interface(DDN.mscorlib.DNObjectClass)
  ['{9645A368-C862-5437-866B-6C7C71730A73}']
  { constructors } 

    ///<summary> Initializes a new instance of the <see cref="T:System.Windows.PropertyMetadata" />
    ///  class. </summary>
    {class} function init: DNPropertyMetadata; overload;
    ///<summary> Initializes a new instance of the <see cref="T:System.Windows.PropertyMetadata" />
    ///  class with a specified default value for the dependency property that this metadata will be applied to. </summary>
    ///  <param name="defaultValue">The default value to specify for a dependency property, usually provided as a value of some specific type.</param>
    ///<exception cref="T:System.ArgumentException"><paramref name="defaultValue" />
    ///  cannot be set to the value <see cref="F:System.Windows.DependencyProperty.UnsetValue" />
    ///  ; see Remarks.</exception>
    {class} function init(defaultValue: DDN.mscorlib.DNObject): DNPropertyMetadata; overload;
    ///<summary> Initializes a new instance of the <see cref="T:System.Windows.PropertyMetadata" />
    ///  class with the specified <see cref="T:System.Windows.PropertyChangedCallback" />
    ///  implementation reference. </summary>
    ///  <param name="propertyChangedCallback">Reference to a handler implementation that is to be called by the property system whenever the effective value of the property changes.</param>
    {class} function init(propertyChangedCallback: DNPropertyChangedCallback): DNPropertyMetadata; overload;
    ///<summary> Initializes a new instance of the <see cref="T:System.Windows.PropertyMetadata" />
    ///  class with the specified default value and <see cref="T:System.Windows.PropertyChangedCallback" />
    ///  implementation reference. </summary>
    ///  <param name="defaultValue">The default value of the dependency property, usually provided as a value of some specific type.</param>
    ///  <param name="propertyChangedCallback">Reference to a handler implementation that is to be called by the property system whenever the effective value of the property changes.</param>
    ///<exception cref="T:System.ArgumentException"><paramref name="defaultValue" />
    ///  cannot be set to the value <see cref="F:System.Windows.DependencyProperty.UnsetValue" />
    ///  ; see Remarks.</exception>
    {class} function init(defaultValue: DDN.mscorlib.DNObject; propertyChangedCallback: DNPropertyChangedCallback): DNPropertyMetadata; overload;
    ///<summary>Initializes a new instance of the <see cref="T:System.Windows.PropertyMetadata" />
    ///  class with the specified default value and callbacks. </summary>
    ///  <param name="defaultValue">The default value of the dependency property, usually provided as a value of some specific type.</param>
    ///  <param name="propertyChangedCallback">Reference to a handler implementation that is to be called by the property system whenever the effective value of the property changes.</param>
    ///  <param name="coerceValueCallback">Reference to a handler implementation that is to be called whenever the property system calls <see cref="M:System.Windows.DependencyObject.CoerceValue(System.Windows.DependencyProperty)" />
    ///  against this property.</param>
    ///<exception cref="T:System.ArgumentException"><paramref name="defaultValue" />
    ///  cannot be set to the value <see cref="F:System.Windows.DependencyProperty.UnsetValue" />
    ///  ; see Remarks.</exception>
    {class} function init(defaultValue: DDN.mscorlib.DNObject; propertyChangedCallback: DNPropertyChangedCallback; coerceValueCallback: DNCoerceValueCallback): DNPropertyMetadata; overload;

  end;

  ///<summary>Defines certain behavior aspects of a dependency property as it is applied to a specific type, including conditions it was registered with. </summary>
  [DNTypeName('System.Windows.PropertyMetadata')]
  DNPropertyMetadata = interface(DDN.mscorlib.DNObject)
  ['{A5B94737-0792-361D-9239-1F0A7E9F9DBD}']
  { getters & setters } 

    function get_DefaultValue: DDN.mscorlib.DNObject;
    procedure set_DefaultValue(value: DDN.mscorlib.DNObject);
    function get_PropertyChangedCallback: DNPropertyChangedCallback;
    procedure set_PropertyChangedCallback(value: DNPropertyChangedCallback);
    function get_CoerceValueCallback: DNCoerceValueCallback;
    procedure set_CoerceValueCallback(value: DNCoerceValueCallback);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary> Gets or sets the default value of the dependency property. </summary>
    ///<returns>The default value of the property. The default value on a <see cref="T:System.Windows.PropertyMetadata" />
    ///  instance created with the parameterless constructor will be <see cref="F:System.Windows.DependencyProperty.UnsetValue" />
    ///  ; see Remarks.</returns>
    ///<exception cref="T:System.ArgumentException">Cannot be set to the value <see cref="F:System.Windows.DependencyProperty.UnsetValue" />
    ///  once created; see Remarks.</exception><exception cref="T:System.InvalidOperationException">Cannot set a metadata property once it is applied to a dependency property operation.</exception>
    property DefaultValue: DDN.mscorlib.DNObject read get_DefaultValue write set_DefaultValue;
    ///<summary>Gets or sets a reference to a <see cref="T:System.Windows.PropertyChangedCallback" />
    ///  implementation specified in this metadata.</summary>
    ///<returns>A <see cref="T:System.Windows.PropertyChangedCallback" />
    ///  implementation reference.</returns>
    ///<exception cref="T:System.InvalidOperationException">Cannot set a metadata property once it is applied to a dependency property operation.</exception>
    property PropertyChangedCallback: DNPropertyChangedCallback read get_PropertyChangedCallback write set_PropertyChangedCallback;
    ///<summary>Gets or sets a reference to a <see cref="T:System.Windows.CoerceValueCallback" />
    ///  implementation specified in this metadata.</summary>
    ///<returns>A <see cref="T:System.Windows.CoerceValueCallback" />
    ///  implementation reference.</returns>
    ///<exception cref="T:System.InvalidOperationException">Cannot set a metadata property once it is applied to a dependency property operation.</exception>
    property CoerceValueCallback: DNCoerceValueCallback read get_CoerceValueCallback write set_CoerceValueCallback;
  end;

  TDNPropertyMetadata = class(TDNGenericImport<DNPropertyMetadataClass, DNPropertyMetadata>) end;

  //-------------namespace: System.Windows----------------
  DNSplashScreenClass = interface(DDN.mscorlib.DNObjectClass)
  ['{56DCC3EC-99C7-5A47-8E88-C2BAC9007FBD}']
  { constructors } 

    ///<summary>Initializes a new instance of the <see cref="T:System.Windows.SplashScreen" />
    ///  class with the specified resource. </summary>
    ///  <param name="resourceName">The name of the embedded resource.</param>
    {class} function init(resourceName: string): DNSplashScreen; overload;
    ///<summary>Initializes a new instance of the <see cref="T:System.Windows.SplashScreen" />
    ///  class with the specified resource assembly. </summary>
    ///  <param name="resourceAssembly">The assembly that contains the embedded resource.</param>
    ///  <param name="resourceName">The name of the embedded resource.</param>
    {class} function init(resourceAssembly: DDN.mscorlib.DNAssembly; resourceName: string): DNSplashScreen; overload;

  end;

  ///<summary>Provides a startup screen for a Windows Presentation Foundation (WPF) application. </summary>
  [DNTypeName('System.Windows.SplashScreen')]
  DNSplashScreen = interface(DDN.mscorlib.DNObject)
  ['{E25E7B38-19DF-31AA-BC8A-FAB0AAE1BEE3}']
  { methods } 

    ///<summary>Displays the splash screen. </summary>
    ///  <param name="autoClose"><see langword="true" />
    ///  to automatically close the splash screen; <see langword="false" />
    ///  to close the splash screen manually.</param>
    ///<exception cref="T:System.IO.IOException">The resource specified in the constructor could not be found. </exception>
    procedure Show(autoClose: Boolean); overload;
    ///<summary>Displays the splash screen.</summary>
    ///  <param name="autoClose"><see langword="true" />
    ///  to automatically close the splash screen; <see langword="false" />
    ///  to close the splash screen manually.</param>
    ///  <param name="topMost"><see langword="true" />
    ///  if the splash screen window should use the WS_EX_TOPMOST style; otherwise <see langword="false" />
    ///  .</param>
    procedure Show(autoClose: Boolean; topMost: Boolean); overload;
    ///<summary>Closes the splash screen. </summary>
    ///  <param name="fadeoutDuration">A <see cref="T:System.TimeSpan" />
    ///  that specifies how long it will take for the splash screen to fade after the close operation has been initiated. </param>
    procedure Close(fadeoutDuration: DDN.mscorlib.DNTimeSpan);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNSplashScreen = class(TDNGenericImport<DNSplashScreenClass, DNSplashScreen>) end;

  //-------------namespace: System.Windows.Threading----------------
  DNDispatcherClass = interface(DDN.mscorlib.DNObjectClass)
  ['{FA3F7C83-1FA3-5F68-ADA4-1B8ACCB4E554}']
  { static getter & setter } 

    {class} function get_CurrentDispatcher: DNDispatcher;

  { static methods } 

    ///<summary>Gets the <see cref="T:System.Windows.Threading.Dispatcher" />
    ///  for the specified thread. </summary>
    ///  <param name="thread">The thread to obtain the <see cref="T:System.Windows.Threading.Dispatcher" />
    ///  from.</param>
    ///<returns>The dispatcher for <paramref name="thread" />
    ///  .</returns>
    {class} function FromThread(thread: DDN.mscorlib.DNThread): DNDispatcher;
    ///<summary>Pushes the main execution frame on the event queue of the <see cref="T:System.Windows.Threading.Dispatcher" />
    ///  . </summary>
    {class} procedure Run;
    ///<summary>Enters an execute loop.</summary>
    ///  <param name="frame">The frame for the dispatcher to process.</param>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="frame" />
    ///  is <see langword="null" />
    ///  .</exception><exception cref="T:System.InvalidOperationException"><see cref="P:System.Windows.Threading.Dispatcher.HasShutdownFinished" />
    ///  is <see langword="true" />
    ///  -or-
    ///  <paramref name="frame" />
    ///  is running on a different <see cref="T:System.Windows.Threading.Dispatcher" />
    ///  .-or-Dispatcher processing has been disabled.</exception>
    {class} procedure PushFrame(frame: DNDispatcherFrame);
    ///<summary>Creates an awaitable object that asynchronously yields control back to the current dispatcher and provides an opportunity for the dispatcher to process other events.</summary>
    ///<returns>An awaitable object that asynchronously yields control back to the current dispatcher and provides an opportunity for the dispatcher to process other events.</returns>
    {class} function Yield: DNDispatcherPriorityAwaitable; overload;
    ///<summary>Determines whether the specified <see cref="T:System.Windows.Threading.DispatcherPriority" />
    ///  is a valid priority. </summary>
    ///  <param name="priority">The priority to check.</param>
    ///  <param name="parameterName">A string that will be returned by the exception that occurs if the priority is invalid.</param>
    ///<exception cref="T:System.ComponentModel.InvalidEnumArgumentException"><paramref name="priority" />
    ///  is not a valid <see cref="T:System.Windows.Threading.DispatcherPriority" />
    ///  .</exception>
    {class} procedure ValidatePriority(priority: DNDispatcherPriority; parameterName: string);
    ///<summary>Requests that all frames exit, including nested frames.</summary>
    {class} procedure ExitAllFrames;
    ///<summary>Creates an awaitable object that asynchronously yields control back to the current dispatcher and provides an opportunity for the dispatcher to process other events.  The work that occurs when control returns to the code awaiting the result of this method is scheduled with the specified priority.</summary>
    ///  <param name="priority">The priority at which to schedule the continuation.</param>
    ///<returns>An awaitable object that asynchronously yields control back to the current dispatcher and provides an opportunity for the dispatcher to process other events.</returns>
    {class} function Yield(priority: DNDispatcherPriority): DNDispatcherPriorityAwaitable; overload;

  { static propertys } 

    ///<summary>Gets the <see cref="T:System.Windows.Threading.Dispatcher" />
    ///  for the thread currently executing and creates a new <see cref="T:System.Windows.Threading.Dispatcher" />
    ///  if one is not already associated with the thread. </summary>
    ///<returns>The dispatcher associated with the current thread.</returns>
    {class} property CurrentDispatcher: DNDispatcher read get_CurrentDispatcher;
  end;

  ///<summary>Provides services for managing the queue of work items for a thread.</summary>
  [DNTypeName('System.Windows.Threading.Dispatcher')]
  DNDispatcher = interface(DDN.mscorlib.DNObject)
  ['{E5319C47-7036-38A5-BA1D-BBC394F3B822}']
  { getters & setters } 

    function get_Thread: DDN.mscorlib.DNThread;
    function get_HasShutdownStarted: Boolean;
    function get_HasShutdownFinished: Boolean;
    function get_Hooks: DNDispatcherHooks;

  { events } 

    procedure add_ShutdownStarted(value: DDN.mscorlib.DNEventHandler);
    procedure remove_ShutdownStarted(value: DDN.mscorlib.DNEventHandler);
    procedure add_ShutdownFinished(value: DDN.mscorlib.DNEventHandler);
    procedure remove_ShutdownFinished(value: DDN.mscorlib.DNEventHandler);
    procedure add_UnhandledExceptionFilter(value: DNDispatcherUnhandledExceptionFilterEventHandler);
    procedure remove_UnhandledExceptionFilter(value: DNDispatcherUnhandledExceptionFilterEventHandler);
    procedure add_UnhandledException(value: DNDispatcherUnhandledExceptionEventHandler);
    procedure remove_UnhandledException(value: DNDispatcherUnhandledExceptionEventHandler);

  { methods } 

    ///<summary>Determines whether the calling thread is the thread associated with this <see cref="T:System.Windows.Threading.Dispatcher" />
    ///  . </summary>
    ///<returns><see langword="true" />
    ///  if the calling thread is the thread associated with this <see cref="T:System.Windows.Threading.Dispatcher" />
    ///  ; otherwise, <see langword="false" />
    ///  .</returns>
    function CheckAccess: Boolean;
    ///<summary>Determines whether the calling thread has access to this <see cref="T:System.Windows.Threading.Dispatcher" />
    ///  . </summary>
    ///<exception cref="T:System.InvalidOperationException">The calling thread does not have access to this <see cref="T:System.Windows.Threading.Dispatcher" />
    ///  .</exception>
    procedure VerifyAccess;
    ///<summary>Initiates the shutdown process of the <see cref="T:System.Windows.Threading.Dispatcher" />
    ///  synchronously.</summary>
    procedure InvokeShutdown;
    ///<summary>Executes the specified delegate asynchronously at the specified priority on the thread the <see cref="T:System.Windows.Threading.Dispatcher" />
    ///  is associated with.</summary>
    ///  <param name="priority">The priority, relative to the other pending operations in the <see cref="T:System.Windows.Threading.Dispatcher" />
    ///  event queue, the specified method is invoked.</param>
    ///  <param name="method">The delegate to a method that takes no arguments, which is pushed onto the <see cref="T:System.Windows.Threading.Dispatcher" />
    ///  event queue.</param>
    ///<returns>An object, which is returned immediately after <see cref="Overload:System.Windows.Threading.Dispatcher.BeginInvoke" />
    ///  is called, that can be used to interact with the delegate as it is pending execution in the event queue.</returns>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="method" />
    ///  is <see langword="null" />
    ///  . </exception><exception cref="T:System.ComponentModel.InvalidEnumArgumentException"><paramref name="priority" />
    ///  is not a valid <see cref="T:System.Windows.Threading.DispatcherPriority" />
    ///  .</exception>
    function BeginInvoke(priority: DNDispatcherPriority; method: DDN.mscorlib.DNDelegate): DNDispatcherOperation; overload;
    ///<summary>Executes the specified delegate asynchronously at the specified priority and with the specified argument on the thread the <see cref="T:System.Windows.Threading.Dispatcher" />
    ///  is associated with.</summary>
    ///  <param name="priority">The priority, relative to the other pending operations in the <see cref="T:System.Windows.Threading.Dispatcher" />
    ///  event queue, the specified method is invoked.</param>
    ///  <param name="method">A delegate to a method that takes one argument, which is pushed onto the <see cref="T:System.Windows.Threading.Dispatcher" />
    ///  event queue.</param>
    ///  <param name="arg">The object to pass as an argument to the specified method.</param>
    ///<returns>An object, which is returned immediately after <see cref="Overload:System.Windows.Threading.Dispatcher.BeginInvoke" />
    ///  is called, that can be used to interact with the delegate as it is pending execution in the event queue.</returns>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="method" />
    ///  is <see langword="null" />
    ///  . </exception><exception cref="T:System.ComponentModel.InvalidEnumArgumentException"><paramref name="priority" />
    ///  is not a valid <see cref="T:System.Windows.Threading.DispatcherPriority" />
    ///  .</exception>
    function BeginInvoke(priority: DNDispatcherPriority; method: DDN.mscorlib.DNDelegate; arg: DDN.mscorlib.DNObject): DNDispatcherOperation; overload;
    ///<summary>Executes the specified delegate asynchronously at the specified priority and with the specified array of arguments on the thread the <see cref="T:System.Windows.Threading.Dispatcher" />
    ///  is associated with.</summary>
    ///  <param name="priority">The priority, relative to the other pending operations in the <see cref="T:System.Windows.Threading.Dispatcher" />
    ///  event queue, the specified method is invoked.</param>
    ///  <param name="method">A delegate to a method that takes multiple arguments, which is pushed onto the <see cref="T:System.Windows.Threading.Dispatcher" />
    ///  event queue.</param>
    ///  <param name="arg">The object to pass as an argument to the specified method.</param>
    ///  <param name="args">An array of objects to pass as arguments to the specified method.</param>
    ///<returns>An object, which is returned immediately after <see cref="Overload:System.Windows.Threading.Dispatcher.BeginInvoke" />
    ///  is called, that can be used to interact with the delegate as it is pending execution in the <see cref="T:System.Windows.Threading.Dispatcher" />
    ///  queue.</returns>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="method" />
    ///  is <see langword="null" />
    ///  . </exception><exception cref="T:System.ComponentModel.InvalidEnumArgumentException"><see cref="T:System.Windows.Threading.DispatcherPriority" />
    ///  is not a valid priority.</exception>
    function BeginInvoke(priority: DNDispatcherPriority; method: DDN.mscorlib.DNDelegate; arg: DDN.mscorlib.DNObject; args: TArray<DDN.mscorlib.DNObject>): DNDispatcherOperation; overload;
    ///<summary>Executes the specified delegate asynchronously with the specified arguments on the thread that the <see cref="T:System.Windows.Threading.Dispatcher" />
    ///  was created on.</summary>
    ///  <param name="method">The delegate to a method that takes parameters specified in <paramref name="args" />
    ///  , which is pushed onto the <see cref="T:System.Windows.Threading.Dispatcher" />
    ///  event queue.</param>
    ///  <param name="args">An array of objects to pass as arguments to the given method. Can be <see langword="null" />
    ///  .</param>
    ///<returns>An object, which is returned immediately after <see cref="Overload:System.Windows.Threading.Dispatcher.BeginInvoke" />
    ///  is called, that can be used to interact with the delegate as it is pending execution in the event queue.</returns>
    function BeginInvoke(method: DDN.mscorlib.DNDelegate; args: TArray<DDN.mscorlib.DNObject>): DNDispatcherOperation; overload;
    ///<summary>Executes the specified delegate asynchronously with the specified arguments, at the specified priority, on the thread that the <see cref="T:System.Windows.Threading.Dispatcher" />
    ///  was created on.</summary>
    ///  <param name="method">The delegate to a method that takes parameters specified in <paramref name="args" />
    ///  , which is pushed onto the <see cref="T:System.Windows.Threading.Dispatcher" />
    ///  event queue.</param>
    ///  <param name="priority">The priority, relative to the other pending operations in the <see cref="T:System.Windows.Threading.Dispatcher" />
    ///  event queue, the specified method is invoked.</param>
    ///  <param name="args">An array of objects to pass as arguments to the given method. Can be <see langword="null" />
    ///  .</param>
    ///<returns>An object, which is returned immediately after <see cref="Overload:System.Windows.Threading.Dispatcher.BeginInvoke" />
    ///  is called, that can be used to interact with the delegate as it is pending execution in the event queue.</returns>
    function BeginInvoke(method: DDN.mscorlib.DNDelegate; priority: DNDispatcherPriority; args: TArray<DDN.mscorlib.DNObject>): DNDispatcherOperation; overload;
    ///<summary>Executes the specified <see cref="T:System.Action" />
    ///  synchronously on the thread the <see cref="T:System.Windows.Threading.Dispatcher" />
    ///  is associated with.</summary>
    ///  <param name="callback">A delegate to invoke through the dispatcher.</param>
    procedure Invoke(callback: DDN.mscorlib.DNAction); overload;
    ///<summary>Executes the specified <see cref="T:System.Action" />
    ///  synchronously at the specified priority on the thread the <see cref="T:System.Windows.Threading.Dispatcher" />
    ///  is associated with.</summary>
    ///  <param name="callback">A delegate to invoke through the dispatcher.</param>
    ///  <param name="priority">The priority that determines in what order the specified callback is invoked relative to the other pending operations in the <see cref="T:System.Windows.Threading.Dispatcher" />
    ///  .</param>
    procedure Invoke(callback: DDN.mscorlib.DNAction; priority: DNDispatcherPriority); overload;
    ///<summary>Executes the specified <see cref="T:System.Action" />
    ///  synchronously at the specified priority on the thread the <see cref="T:System.Windows.Threading.Dispatcher" />
    ///  is associated with.</summary>
    ///  <param name="callback">A delegate to invoke through the dispatcher.</param>
    ///  <param name="priority">The priority that determines in what order the specified callback is invoked relative to the other pending operations in the <see cref="T:System.Windows.Threading.Dispatcher" />
    ///  .</param>
    ///  <param name="cancellationToken">An object that indicates whether to cancel the action.</param>
    procedure Invoke(callback: DDN.mscorlib.DNAction; priority: DNDispatcherPriority; cancellationToken: DDN.mscorlib.DNCancellationToken); overload;
    ///<summary>Executes the specified <see cref="T:System.Action" />
    ///  asynchronously on the thread the <see cref="T:System.Windows.Threading.Dispatcher" />
    ///  is associated with.</summary>
    ///  <param name="callback">A delegate to invoke through the dispatcher.</param>
    ///<returns>An object, which is returned immediately after <see cref="M:System.Windows.Threading.Dispatcher.InvokeAsync(System.Action)" />
    ///  is called, that can be used to interact with the delegate as it is pending execution in the event queue.</returns>
    function InvokeAsync(callback: DDN.mscorlib.DNAction): DNDispatcherOperation; overload;
    ///<summary>Executes the specified <see cref="T:System.Action" />
    ///  asynchronously at the specified priority on the thread the <see cref="T:System.Windows.Threading.Dispatcher" />
    ///  is associated with.</summary>
    ///  <param name="callback">A delegate to invoke through the dispatcher.</param>
    ///  <param name="priority">The priority that determines in what order the specified callback is invoked relative to the other pending operations in the <see cref="T:System.Windows.Threading.Dispatcher" />
    ///  .</param>
    ///<returns>An object, which is returned immediately after <see cref="M:System.Windows.Threading.Dispatcher.InvokeAsync(System.Action,System.Windows.Threading.DispatcherPriority)" />
    ///  is called, that can be used to interact with the delegate as it is pending execution in the event queue.</returns>
    function InvokeAsync(callback: DDN.mscorlib.DNAction; priority: DNDispatcherPriority): DNDispatcherOperation; overload;
    ///<summary>Executes the specified delegate synchronously at the specified priority on the thread on which the <see cref="T:System.Windows.Threading.Dispatcher" />
    ///  is associated with. </summary>
    ///  <param name="priority">The priority, relative to the other pending operations in the <see cref="T:System.Windows.Threading.Dispatcher" />
    ///  event queue, the specified method is invoked.</param>
    ///  <param name="method">A delegate to a method that takes no arguments, which is pushed onto the <see cref="T:System.Windows.Threading.Dispatcher" />
    ///  event queue.</param>
    ///<returns>The return value from the delegate being invoked or <see langword="null" />
    ///  if the delegate has no return value.</returns>
    ///<exception cref="T:System.ArgumentException"><paramref name="priority" />
    ///  is equal to <see cref="F:System.Windows.Threading.DispatcherPriority.Inactive" />
    ///  .</exception><exception cref="T:System.ComponentModel.InvalidEnumArgumentException"><paramref name="priority" />
    ///  is not a valid priority.</exception><exception cref="T:System.ArgumentNullException"><paramref name="method" />
    ///  is <see langword="null" />
    ///  . </exception>
    function Invoke(priority: DNDispatcherPriority; method: DDN.mscorlib.DNDelegate): DDN.mscorlib.DNObject; overload;
    ///<summary>Executes the specified delegate at the specified priority with the specified argument synchronously on the thread the <see cref="T:System.Windows.Threading.Dispatcher" />
    ///  is associated with.</summary>
    ///  <param name="priority">The priority, relative to the other pending operations in the <see cref="T:System.Windows.Threading.Dispatcher" />
    ///  event queue, the specified method is invoked.</param>
    ///  <param name="method">A delegate to a method that takes one argument, which is pushed onto the <see cref="T:System.Windows.Threading.Dispatcher" />
    ///  event queue.</param>
    ///  <param name="arg">An object to pass as an argument to the given method.</param>
    ///<returns>The return value from the delegate being invoked or <see langword="null" />
    ///  if the delegate has no return value.</returns>
    ///<exception cref="T:System.ArgumentException"><paramref name="priority" />
    ///  is equal to <see cref="F:System.Windows.Threading.DispatcherPriority.Inactive" />
    ///  .</exception><exception cref="T:System.ComponentModel.InvalidEnumArgumentException"><paramref name="priority" />
    ///  is not a valid priority.</exception><exception cref="T:System.ArgumentNullException"><paramref name="method" />
    ///  is <see langword="null" />
    ///  . </exception>
    function Invoke(priority: DNDispatcherPriority; method: DDN.mscorlib.DNDelegate; arg: DDN.mscorlib.DNObject): DDN.mscorlib.DNObject; overload;
    ///<summary>Executes the specified delegate at the specified priority with the specified arguments synchronously on the thread the <see cref="T:System.Windows.Threading.Dispatcher" />
    ///  is associated with.</summary>
    ///  <param name="priority">The priority, relative to the other pending operations in the <see cref="T:System.Windows.Threading.Dispatcher" />
    ///  event queue, the specified method is invoked.</param>
    ///  <param name="method">A delegate to a method that takes multiple arguments, which is pushed onto the <see cref="T:System.Windows.Threading.Dispatcher" />
    ///  event queue.</param>
    ///  <param name="arg">An object to pass as an argument to the given method.</param>
    ///  <param name="args">An array of objects to pass as arguments to the given method.</param>
    ///<returns>The return value from the delegate being invoked or <see langword="null" />
    ///  if the delegate has no return value.</returns>
    ///<exception cref="T:System.ArgumentException"><paramref name="priority" />
    ///  is equal to <see cref="F:System.Windows.Threading.DispatcherPriority.Inactive" />
    ///  .</exception><exception cref="T:System.ComponentModel.InvalidEnumArgumentException"><paramref name="priority" />
    ///  is not a valid priority.</exception><exception cref="T:System.ArgumentNullException"><paramref name="method" />
    ///  is <see langword="null" />
    ///  . </exception>
    function Invoke(priority: DNDispatcherPriority; method: DDN.mscorlib.DNDelegate; arg: DDN.mscorlib.DNObject; args: TArray<DDN.mscorlib.DNObject>): DDN.mscorlib.DNObject; overload;
    ///<summary>Executes the specified delegate synchronously at the specified priority and with the specified time-out value on the thread the <see cref="T:System.Windows.Threading.Dispatcher" />
    ///  was created.</summary>
    ///  <param name="priority">The priority, relative to the other pending operations in the <see cref="T:System.Windows.Threading.Dispatcher" />
    ///  event queue, the specified method is invoked.</param>
    ///  <param name="timeout">The maximum time to wait for the operation to finish.</param>
    ///  <param name="method">The delegate to a method that takes no arguments, which is pushed onto the <see cref="T:System.Windows.Threading.Dispatcher" />
    ///  event queue.</param>
    ///<returns>The return value from the delegate being invoked or <see langword="null" />
    ///  if the delegate has no return value.</returns>
    function Invoke(priority: DNDispatcherPriority; timeout: DDN.mscorlib.DNTimeSpan; method: DDN.mscorlib.DNDelegate): DDN.mscorlib.DNObject; overload;
    ///<summary>Executes the specified delegate at the specified priority with the specified argument synchronously on the thread the <see cref="T:System.Windows.Threading.Dispatcher" />
    ///  is associated with.</summary>
    ///  <param name="priority">The priority, relative to the other pending operations in the <see cref="T:System.Windows.Threading.Dispatcher" />
    ///  event queue, the specified method is invoked.</param>
    ///  <param name="timeout">The maximum time to wait for the operation to finish.</param>
    ///  <param name="method">A delegate to a method that takes multiple arguments, which is pushed onto the <see cref="T:System.Windows.Threading.Dispatcher" />
    ///  event queue.</param>
    ///  <param name="arg">An object to pass as an argument to the given method. This can be <see langword="null" />
    ///  if no arguments are needed.</param>
    ///<returns>The return value from the delegate being invoked or <see langword="null" />
    ///  if the delegate has no return value.</returns>
    ///<exception cref="T:System.ArgumentException"><paramref name="priority" />
    ///  is equal to <see cref="F:System.Windows.Threading.DispatcherPriority.Inactive" />
    ///  .</exception><exception cref="T:System.ComponentModel.InvalidEnumArgumentException"><paramref name="priority" />
    ///  is not a valid priority.</exception><exception cref="T:System.ArgumentNullException"><paramref name="method" />
    ///  is <see langword="null" />
    ///  . </exception>
    function Invoke(priority: DNDispatcherPriority; timeout: DDN.mscorlib.DNTimeSpan; method: DDN.mscorlib.DNDelegate; arg: DDN.mscorlib.DNObject): DDN.mscorlib.DNObject; overload;
    ///<summary>Executes the specified delegate at the specified priority with the specified arguments synchronously on the thread the <see cref="T:System.Windows.Threading.Dispatcher" />
    ///  is associated with.</summary>
    ///  <param name="priority">The priority, relative to the other pending operations in the <see cref="T:System.Windows.Threading.Dispatcher" />
    ///  event queue, the specified method is invoked.</param>
    ///  <param name="timeout">The maximum time to wait for the operation to finish.</param>
    ///  <param name="method">A delegate to a method that takes multiple arguments, which is pushed onto the <see cref="T:System.Windows.Threading.Dispatcher" />
    ///  event queue.</param>
    ///  <param name="arg">An object to pass as an argument to the specified method.</param>
    ///  <param name="args">An array of objects to pass as arguments to the specified method. </param>
    ///<returns>The return value from the delegate being invoked or <see langword="null" />
    ///  if the delegate has no return value.</returns>
    ///<exception cref="T:System.ArgumentException"><paramref name="priority" />
    ///  is equal to <see cref="F:System.Windows.Threading.DispatcherPriority.Inactive" />
    ///  .</exception><exception cref="T:System.ComponentModel.InvalidEnumArgumentException"><paramref name="priority" />
    ///  is not a valid <see cref="T:System.Windows.Threading.DispatcherPriority" />
    ///  .</exception><exception cref="T:System.ArgumentNullException"><paramref name="method" />
    ///  is <see langword="null" />
    ///  . </exception>
    function Invoke(priority: DNDispatcherPriority; timeout: DDN.mscorlib.DNTimeSpan; method: DDN.mscorlib.DNDelegate; arg: DDN.mscorlib.DNObject; args: TArray<DDN.mscorlib.DNObject>): DDN.mscorlib.DNObject; overload;
    ///<summary>Executes the specified delegate with the specified arguments synchronously on the thread the <see cref="T:System.Windows.Threading.Dispatcher" />
    ///  is associated with.</summary>
    ///  <param name="method">A delegate to a method that takes parameters specified in <paramref name="args" />
    ///  , which is pushed onto the <see cref="T:System.Windows.Threading.Dispatcher" />
    ///  event queue.</param>
    ///  <param name="args">An array of objects to pass as arguments to the given method. Can be <see langword="null" />
    ///  .</param>
    ///<returns>The return value from the delegate being invoked or <see langword="null" />
    ///  if the delegate has no return value.</returns>
    function Invoke(method: DDN.mscorlib.DNDelegate; args: TArray<DDN.mscorlib.DNObject>): DDN.mscorlib.DNObject; overload;
    ///<summary>Executes the specified delegate at the specified priority with the specified arguments synchronously on the thread the <see cref="T:System.Windows.Threading.Dispatcher" />
    ///  is associated with.</summary>
    ///  <param name="method">A delegate to a method that takes parameters specified in <paramref name="args" />
    ///  , which is pushed onto the <see cref="T:System.Windows.Threading.Dispatcher" />
    ///  event queue.</param>
    ///  <param name="priority">The priority, relative to the other pending operations in the <see cref="T:System.Windows.Threading.Dispatcher" />
    ///  event queue, the specified method is invoked.</param>
    ///  <param name="args">An array of objects to pass as arguments to the given method. Can be <see langword="null" />
    ///  .</param>
    ///<returns>The return value from the delegate being invoked or <see langword="null" />
    ///  if the delegate has no return value.</returns>
    function Invoke(method: DDN.mscorlib.DNDelegate; priority: DNDispatcherPriority; args: TArray<DDN.mscorlib.DNObject>): DDN.mscorlib.DNObject; overload;
    ///<summary>Executes the specified delegate within the designated time span at the specified priority with the specified arguments synchronously on the thread the <see cref="T:System.Windows.Threading.Dispatcher" />
    ///  is associated with.</summary>
    ///  <param name="method">A delegate to a method that takes parameters specified in <paramref name="args" />
    ///  , which is pushed onto the <see cref="T:System.Windows.Threading.Dispatcher" />
    ///  event queue.</param>
    ///  <param name="timeout">The maximum amount of time to wait for the operation to complete.</param>
    ///  <param name="args">An array of objects to pass as arguments to the given method. Can be <see langword="null" />
    ///  .</param>
    ///<returns>The return value from the delegate being invoked or <see langword="null" />
    ///  if the delegate has no return value.</returns>
    function Invoke(method: DDN.mscorlib.DNDelegate; timeout: DDN.mscorlib.DNTimeSpan; args: TArray<DDN.mscorlib.DNObject>): DDN.mscorlib.DNObject; overload;
    ///<summary>Executes the specified delegate within the designated time span at the specified priority with the specified arguments synchronously on the thread the <see cref="T:System.Windows.Threading.Dispatcher" />
    ///  is associated with.</summary>
    ///  <param name="method">A delegate to a method that takes parameters specified in <paramref name="args" />
    ///  , which is pushed onto the <see cref="T:System.Windows.Threading.Dispatcher" />
    ///  event queue.</param>
    ///  <param name="timeout">The maximum amount of time to wait for the operation to complete.</param>
    ///  <param name="priority">The priority, relative to the other pending operations in the <see cref="T:System.Windows.Threading.Dispatcher" />
    ///  event queue, the specified method is invoked.</param>
    ///  <param name="args">An array of objects to pass as arguments to the given method. Can be <see langword="null" />
    ///  .</param>
    ///<returns>The return value from the delegate being invoked or <see langword="null" />
    ///  if the delegate has no return value.</returns>
    function Invoke(method: DDN.mscorlib.DNDelegate; timeout: DDN.mscorlib.DNTimeSpan; priority: DNDispatcherPriority; args: TArray<DDN.mscorlib.DNObject>): DDN.mscorlib.DNObject; overload;
    ///<summary>Disables processing of the <see cref="T:System.Windows.Threading.Dispatcher" />
    ///  queue.</summary>
    ///<returns>A structure used to re-enable dispatcher processing.</returns>
    function DisableProcessing: DNDispatcherProcessingDisabled;
    ///<summary>Initiates shutdown of the <see cref="T:System.Windows.Threading.Dispatcher" />
    ///  asynchronously. </summary>
    ///  <param name="priority">The priority at which to begin shutting down the dispatcher.</param>
    procedure BeginInvokeShutdown(priority: DNDispatcherPriority);
    ///<summary>Executes the specified <see cref="T:System.Action" />
    ///  asynchronously at the specified priority on the thread the <see cref="T:System.Windows.Threading.Dispatcher" />
    ///  is associated with.</summary>
    ///  <param name="callback">A delegate to invoke through the dispatcher.</param>
    ///  <param name="priority">The priority that determines in what order the specified callback is invoked relative to the other pending operations in the <see cref="T:System.Windows.Threading.Dispatcher" />
    ///  .</param>
    ///  <param name="cancellationToken">An object that indicates whether to cancel the action.</param>
    ///<returns>An object, which is returned immediately after <see cref="M:System.Windows.Threading.Dispatcher.InvokeAsync(System.Action,System.Windows.Threading.DispatcherPriority,System.Threading.CancellationToken)" />
    ///  is called, that can be used to interact with the delegate as it is pending execution in the event queue.</returns>
    function InvokeAsync(callback: DDN.mscorlib.DNAction; priority: DNDispatcherPriority; cancellationToken: DDN.mscorlib.DNCancellationToken): DNDispatcherOperation; overload;
    ///<summary>Executes the specified <see cref="T:System.Action" />
    ///  synchronously at the specified priority on the thread the <see cref="T:System.Windows.Threading.Dispatcher" />
    ///  is associated with.</summary>
    ///  <param name="callback">A delegate to invoke through the dispatcher.</param>
    ///  <param name="priority">The priority that determines in what order the specified callback is invoked relative to the other pending operations in the <see cref="T:System.Windows.Threading.Dispatcher" />
    ///  .</param>
    ///  <param name="cancellationToken">An object that indicates whether to cancel the action.</param>
    ///  <param name="timeout">The minimum amount of time to wait for the operation to start.</param>
    procedure Invoke(callback: DDN.mscorlib.DNAction; priority: DNDispatcherPriority; cancellationToken: DDN.mscorlib.DNCancellationToken; timeout: DDN.mscorlib.DNTimeSpan); overload;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>Gets the thread this <see cref="T:System.Windows.Threading.Dispatcher" />
    ///  is associated with.</summary>
    ///<returns>The thread.</returns>
    property Thread: DDN.mscorlib.DNThread read get_Thread;
    ///<summary>Determines whether the <see cref="T:System.Windows.Threading.Dispatcher" />
    ///  is shutting down. </summary>
    ///<returns><see langword="true" />
    ///  if the <see cref="T:System.Windows.Threading.Dispatcher" />
    ///  has started shutting down; otherwise, <see langword="false" />
    ///  .</returns>
    property HasShutdownStarted: Boolean read get_HasShutdownStarted;
    ///<summary>Determines whether the <see cref="T:System.Windows.Threading.Dispatcher" />
    ///  has finished shutting down.</summary>
    ///<returns><see langword="true" />
    ///  if the dispatcher has finished shutting down; otherwise, <see langword="false" />
    ///  .</returns>
    property HasShutdownFinished: Boolean read get_HasShutdownFinished;
    ///<summary>Gets the collection of hooks that provide additional event information about the <see cref="T:System.Windows.Threading.Dispatcher" />
    ///  . </summary>
    ///<returns>The hooks associated with this <see cref="T:System.Windows.Threading.Dispatcher" />
    ///  . </returns>
    property Hooks: DNDispatcherHooks read get_Hooks;
  end;

  TDNDispatcher = class(TDNGenericImport<DNDispatcherClass, DNDispatcher>) end;

  //-------------namespace: System.Windows.Threading----------------
  DNDispatcherHooksClass = interface(DDN.mscorlib.DNObjectClass)
  ['{9AFC17B0-5CBF-525E-85E8-B1923998E863}']
  end;

  ///<summary>Provides additional event information about <see cref="T:System.Windows.Threading.Dispatcher" />
  ///  processing.</summary>
  [DNTypeName('System.Windows.Threading.DispatcherHooks')]
  DNDispatcherHooks = interface(DDN.mscorlib.DNObject)
  ['{A0DF799D-F876-3568-A7A5-C25319747B58}']
  { events } 

    procedure add_DispatcherInactive(value: DDN.mscorlib.DNEventHandler);
    procedure remove_DispatcherInactive(value: DDN.mscorlib.DNEventHandler);
    procedure add_OperationPosted(value: DNDispatcherHookEventHandler);
    procedure remove_OperationPosted(value: DNDispatcherHookEventHandler);
    procedure add_OperationStarted(value: DNDispatcherHookEventHandler);
    procedure remove_OperationStarted(value: DNDispatcherHookEventHandler);
    procedure add_OperationCompleted(value: DNDispatcherHookEventHandler);
    procedure remove_OperationCompleted(value: DNDispatcherHookEventHandler);
    procedure add_OperationPriorityChanged(value: DNDispatcherHookEventHandler);
    procedure remove_OperationPriorityChanged(value: DNDispatcherHookEventHandler);
    procedure add_OperationAborted(value: DNDispatcherHookEventHandler);
    procedure remove_OperationAborted(value: DNDispatcherHookEventHandler);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNDispatcherHooks = class(TDNGenericImport<DNDispatcherHooksClass, DNDispatcherHooks>) end;

  //-------------namespace: System.Windows.Threading----------------
  DNDispatcherObjectClass = interface(DDN.mscorlib.DNObjectClass)
  ['{2E6F7708-7242-5AEB-A69E-295CF3B6B6AB}']
  end;

  ///<summary>Represents an object that is associated with a <see cref="T:System.Windows.Threading.Dispatcher" />
  ///  . </summary>
  [DNTypeName('System.Windows.Threading.DispatcherObject')]
  DNDispatcherObject = interface(DDN.mscorlib.DNObject)
  ['{F76563BB-A612-3482-ACBE-7FF19E51A68B}']
  { getters & setters } 

    function get_Dispatcher: DNDispatcher;

  { methods } 

    ///<summary>Determines whether the calling thread has access to this <see cref="T:System.Windows.Threading.DispatcherObject" />
    ///  .</summary>
    ///<returns><see langword="true" />
    ///  if the calling thread has access to this object; otherwise, <see langword="false" />
    ///  .</returns>
    function CheckAccess: Boolean;
    ///<summary>Enforces that the calling thread has access to this <see cref="T:System.Windows.Threading.DispatcherObject" />
    ///  .</summary>
    ///<exception cref="T:System.InvalidOperationException">the calling thread does not have access to this <see cref="T:System.Windows.Threading.DispatcherObject" />
    ///  .</exception>
    procedure VerifyAccess;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>Gets the <see cref="T:System.Windows.Threading.Dispatcher" />
    ///  this <see cref="T:System.Windows.Threading.DispatcherObject" />
    ///  is associated with. </summary>
    ///<returns>The dispatcher.</returns>
    property Dispatcher: DNDispatcher read get_Dispatcher;
  end;

  TDNDispatcherObject = class(TDNGenericImport<DNDispatcherObjectClass, DNDispatcherObject>) end;

  //-------------namespace: System.Windows----------------
  DNDependencyObjectClass = interface(DNDispatcherObjectClass)
  ['{413D2E66-8AC2-5D20-B437-171C661774A2}']
  { constructors } 

    ///<summary>Initializes a new instance of the <see cref="T:System.Windows.DependencyObject" />
    ///  class. </summary>
    {class} function init: DNDependencyObject;

  end;

  ///<summary>Represents an object that participates in the dependency property system.</summary>
  [DNTypeName('System.Windows.DependencyObject')]
  DNDependencyObject = interface(DNDispatcherObject)
  ['{00987CC5-472E-3854-8A5C-D746A7FD1739}']
  { getters & setters } 

    function get_DependencyObjectType: DNDependencyObjectType;
    function get_IsSealed: Boolean;
    function get_Dispatcher: DNDispatcher;

  { methods } 

    ///<summary>Determines whether a provided <see cref="T:System.Windows.DependencyObject" />
    ///  is equivalent to the current <see cref="T:System.Windows.DependencyObject" />
    ///  .</summary>
    ///  <param name="obj">The <see cref="T:System.Windows.DependencyObject" />
    ///  to compare to the current instance.</param>
    ///<returns><see langword="true" />
    ///  if the two instances are the same; otherwise, <see langword="false" />
    ///  .</returns>
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    ///<summary>Gets a hash code for this <see cref="T:System.Windows.DependencyObject" />
    ///  .</summary>
    ///<returns>A signed 32-bit integer hash code.</returns>
    function GetHashCode: Int32;
    ///<summary>Returns the current effective value of a dependency property on this instance of a <see cref="T:System.Windows.DependencyObject" />
    ///  . </summary>
    ///  <param name="dp">The <see cref="T:System.Windows.DependencyProperty" />
    ///  identifier of the property to retrieve the value for.</param>
    ///<returns>Returns the current effective value.</returns>
    ///<exception cref="T:System.InvalidOperationException">The specified <paramref name="dp" />
    ///  or its value was invalid, or the specified <paramref name="dp" />
    ///  does not exist.</exception>
    function GetValue(dp: DNDependencyProperty): DDN.mscorlib.DNObject;
    ///<summary>Sets the local value of a dependency property, specified by its dependency property identifier. </summary>
    ///  <param name="dp">The identifier of the dependency property to set.</param>
    ///  <param name="value">The new local value.</param>
    ///<exception cref="T:System.InvalidOperationException">Attempted to modify a read-only dependency property, or a property on a sealed <see cref="T:System.Windows.DependencyObject" />
    ///  .</exception><exception cref="T:System.ArgumentException"><paramref name="value" />
    ///  was not the correct type as registered for the <paramref name="dp" />
    ///  property.</exception>
    procedure SetValue(dp: DNDependencyProperty; value: DDN.mscorlib.DNObject); overload;
    ///<summary>Sets the value of a dependency property without changing its value source. </summary>
    ///  <param name="dp">The identifier of the dependency property to set.</param>
    ///  <param name="value">The new local value.</param>
    ///<exception cref="T:System.InvalidOperationException">Attempted to modify a read-only dependency property, or a property on a sealed <see cref="T:System.Windows.DependencyObject" />
    ///  .</exception><exception cref="T:System.ArgumentException"><paramref name="value" />
    ///  was not the correct type as registered for the <paramref name="dp" />
    ///  property.</exception>
    procedure SetCurrentValue(dp: DNDependencyProperty; value: DDN.mscorlib.DNObject);
    ///<summary>Sets the local value of a read-only dependency property, specified by the <see cref="T:System.Windows.DependencyPropertyKey" />
    ///  identifier of the dependency property. </summary>
    ///  <param name="key">The <see cref="T:System.Windows.DependencyPropertyKey" />
    ///  identifier of the property to set.</param>
    ///  <param name="value">The new local value.</param>
    procedure SetValue(key: DNDependencyPropertyKey; value: DDN.mscorlib.DNObject); overload;
    ///<summary>Clears the local value of a property. The property to be cleared is specified by a <see cref="T:System.Windows.DependencyProperty" />
    ///  identifier. </summary>
    ///  <param name="dp">The dependency property to be cleared, identified by a <see cref="T:System.Windows.DependencyProperty" />
    ///  object reference.</param>
    ///<exception cref="T:System.InvalidOperationException">Attempted to call <see cref="M:System.Windows.DependencyObject.ClearValue(System.Windows.DependencyProperty)" />
    ///  on a sealed <see cref="T:System.Windows.DependencyObject" />
    ///  .</exception>
    procedure ClearValue(dp: DNDependencyProperty); overload;
    ///<summary>Clears the local value of a read-only property. The property to be cleared is specified by a <see cref="T:System.Windows.DependencyPropertyKey" />
    ///  . </summary>
    ///  <param name="key">The key for the dependency property to be cleared.</param>
    ///<exception cref="T:System.InvalidOperationException">Attempted to call <see cref="M:System.Windows.DependencyObject.ClearValue(System.Windows.DependencyProperty)" />
    ///  on a sealed <see cref="T:System.Windows.DependencyObject" />
    ///  .</exception>
    procedure ClearValue(key: DNDependencyPropertyKey); overload;
    ///<summary>Coerces the value of the specified dependency property. This is accomplished by invoking any <see cref="T:System.Windows.CoerceValueCallback" />
    ///  function specified in property metadata for the dependency property as it exists on the calling <see cref="T:System.Windows.DependencyObject" />
    ///  .</summary>
    ///  <param name="dp">The identifier for the dependency property to coerce.</param>
    ///<exception cref="T:System.InvalidOperationException">The specified <paramref name="dp" />
    ///  or its value were invalid or do not exist.</exception>
    procedure CoerceValue(dp: DNDependencyProperty);
    ///<summary>Re-evaluates the effective value for the specified dependency property</summary>
    ///  <param name="dp">The <see cref="T:System.Windows.DependencyProperty" />
    ///  identifier of the property to invalidate.</param>
    procedure InvalidateProperty(dp: DNDependencyProperty);
    ///<summary>Returns the local value of a dependency property, if it exists. </summary>
    ///  <param name="dp">The <see cref="T:System.Windows.DependencyProperty" />
    ///  identifier of the property to retrieve the value for.</param>
    ///<returns>Returns the local value, or returns the sentinel value <see cref="F:System.Windows.DependencyProperty.UnsetValue" />
    ///  if no local value is set.</returns>
    function ReadLocalValue(dp: DNDependencyProperty): DDN.mscorlib.DNObject;
    ///<summary>Creates a specialized enumerator for determining which dependency properties have locally set values on this <see cref="T:System.Windows.DependencyObject" />
    ///  . </summary>
    ///<returns>A specialized local value enumerator.</returns>
    function GetLocalValueEnumerator: DNLocalValueEnumerator;
    ///<summary>Determines whether the calling thread has access to this <see cref="T:System.Windows.Threading.DispatcherObject" />
    ///  .</summary>
    ///<returns><see langword="true" />
    ///  if the calling thread has access to this object; otherwise, <see langword="false" />
    ///  .</returns>
    function CheckAccess: Boolean;
    ///<summary>Enforces that the calling thread has access to this <see cref="T:System.Windows.Threading.DispatcherObject" />
    ///  .</summary>
    ///<exception cref="T:System.InvalidOperationException">the calling thread does not have access to this <see cref="T:System.Windows.Threading.DispatcherObject" />
    ///  .</exception>
    procedure VerifyAccess;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>Gets the <see cref="T:System.Windows.DependencyObjectType" />
    ///  that wraps the CLR type of this instance.Â </summary>
    ///<returns>A <see cref="T:System.Windows.DependencyObjectType" />
    ///  that wraps the CLR type of this instance. </returns>
    property DependencyObjectType: DNDependencyObjectType read get_DependencyObjectType;
    ///<summary>Gets a value that indicates whether this instance is currently sealed (read-only).</summary>
    ///<returns><see langword="true" />
    ///  if this instance is sealed; otherwise, <see langword="false" />
    ///  .</returns>
    property IsSealed: Boolean read get_IsSealed;
    ///<summary>Gets the <see cref="T:System.Windows.Threading.Dispatcher" />
    ///  this <see cref="T:System.Windows.Threading.DispatcherObject" />
    ///  is associated with. </summary>
    ///<returns>The dispatcher.</returns>
    property Dispatcher: DNDispatcher read get_Dispatcher;
  end;

  TDNDependencyObject = class(TDNGenericImport<DNDependencyObjectClass, DNDependencyObject>) end;

  //-------------namespace: System.Windows----------------
  DNFreezableClass = interface(DNDependencyObjectClass)
  ['{8FA2C711-3764-537A-9DCC-4D6597158D4B}']
  end;

  ///<summary>Defines an object that has a modifiable state and a read-only (frozen) state. Classes that derive from <see cref="T:System.Windows.Freezable" />
  ///  provide detailed change notification, can be made immutable, and can clone themselves. </summary>
  [DNTypeName('System.Windows.Freezable')]
  DNFreezable = interface(DNDependencyObject)
  ['{FFD99072-5B12-3B0D-8491-D97DFF56CDCE}']
  { getters & setters } 

    function get_CanFreeze: Boolean;
    function get_IsFrozen: Boolean;
    function get_DependencyObjectType: DNDependencyObjectType;
    function get_IsSealed: Boolean;
    function get_Dispatcher: DNDispatcher;

  { events } 

    procedure add_Changed(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Changed(value: DDN.mscorlib.DNEventHandler);

  { methods } 

    ///<summary>Creates a modifiable clone of the <see cref="T:System.Windows.Freezable" />
    ///  , making deep copies of the object's values. When copying the object's dependency properties, this method copies expressions (which might no longer resolve) but not animations or their current values. </summary>
    ///<returns>A modifiable clone of the current object. The cloned object's <see cref="P:System.Windows.Freezable.IsFrozen" />
    ///  property is <see langword="false" />
    ///  even if the source's <see cref="P:System.Windows.Freezable.IsFrozen" />
    ///  property is <see langword="true." />
    ///</returns>
    function Clone: DNFreezable;
    ///<summary>Creates a modifiable clone (deep copy) of the <see cref="T:System.Windows.Freezable" />
    ///  using its current values.</summary>
    ///<returns>A modifiable clone of the current object. The cloned object's <see cref="P:System.Windows.Freezable.IsFrozen" />
    ///  property is <see langword="false" />
    ///  even if the source's <see cref="P:System.Windows.Freezable.IsFrozen" />
    ///  property is <see langword="true." />
    ///</returns>
    function CloneCurrentValue: DNFreezable;
    ///<summary>Creates a frozen copy of the <see cref="T:System.Windows.Freezable" />
    ///  , using base (non-animated) property values. Because the copy is frozen, any frozen sub-objects are copied by reference. </summary>
    ///<returns>A frozen copy of the <see cref="T:System.Windows.Freezable" />
    ///  . The copy's <see cref="P:System.Windows.Freezable.IsFrozen" />
    ///  property is set to <see langword="true" />
    ///  . </returns>
    ///<exception cref="T:System.InvalidOperationException">The <see cref="T:System.Windows.Freezable" />
    ///  cannot be frozen because it contains expressions or animated properties.</exception>
    function GetAsFrozen: DNFreezable;
    ///<summary>Creates a frozen copy of the <see cref="T:System.Windows.Freezable" />
    ///  using current property values. Because the copy is frozen, any frozen sub-objects are copied by reference.</summary>
    ///<returns>A frozen copy of the <see cref="T:System.Windows.Freezable" />
    ///  . The copy's <see cref="P:System.Windows.Freezable.IsFrozen" />
    ///  property is set to <see langword="true" />
    ///  .</returns>
    function GetCurrentValueAsFrozen: DNFreezable;
    ///<summary>Makes the current object unmodifiable and sets its <see cref="P:System.Windows.Freezable.IsFrozen" />
    ///  property to <see langword="true" />
    ///  . </summary>
    ///<exception cref="T:System.InvalidOperationException">The <see cref="T:System.Windows.Freezable" />
    ///  cannot be made unmodifiable. </exception>
    procedure Freeze;
    ///<summary>Determines whether a provided <see cref="T:System.Windows.DependencyObject" />
    ///  is equivalent to the current <see cref="T:System.Windows.DependencyObject" />
    ///  .</summary>
    ///  <param name="obj">The <see cref="T:System.Windows.DependencyObject" />
    ///  to compare to the current instance.</param>
    ///<returns><see langword="true" />
    ///  if the two instances are the same; otherwise, <see langword="false" />
    ///  .</returns>
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    ///<summary>Gets a hash code for this <see cref="T:System.Windows.DependencyObject" />
    ///  .</summary>
    ///<returns>A signed 32-bit integer hash code.</returns>
    function GetHashCode: Int32;
    ///<summary>Returns the current effective value of a dependency property on this instance of a <see cref="T:System.Windows.DependencyObject" />
    ///  . </summary>
    ///  <param name="dp">The <see cref="T:System.Windows.DependencyProperty" />
    ///  identifier of the property to retrieve the value for.</param>
    ///<returns>Returns the current effective value.</returns>
    ///<exception cref="T:System.InvalidOperationException">The specified <paramref name="dp" />
    ///  or its value was invalid, or the specified <paramref name="dp" />
    ///  does not exist.</exception>
    function GetValue(dp: DNDependencyProperty): DDN.mscorlib.DNObject;
    ///<summary>Sets the local value of a dependency property, specified by its dependency property identifier. </summary>
    ///  <param name="dp">The identifier of the dependency property to set.</param>
    ///  <param name="value">The new local value.</param>
    ///<exception cref="T:System.InvalidOperationException">Attempted to modify a read-only dependency property, or a property on a sealed <see cref="T:System.Windows.DependencyObject" />
    ///  .</exception><exception cref="T:System.ArgumentException"><paramref name="value" />
    ///  was not the correct type as registered for the <paramref name="dp" />
    ///  property.</exception>
    procedure SetValue(dp: DNDependencyProperty; value: DDN.mscorlib.DNObject); overload;
    ///<summary>Sets the value of a dependency property without changing its value source. </summary>
    ///  <param name="dp">The identifier of the dependency property to set.</param>
    ///  <param name="value">The new local value.</param>
    ///<exception cref="T:System.InvalidOperationException">Attempted to modify a read-only dependency property, or a property on a sealed <see cref="T:System.Windows.DependencyObject" />
    ///  .</exception><exception cref="T:System.ArgumentException"><paramref name="value" />
    ///  was not the correct type as registered for the <paramref name="dp" />
    ///  property.</exception>
    procedure SetCurrentValue(dp: DNDependencyProperty; value: DDN.mscorlib.DNObject);
    ///<summary>Sets the local value of a read-only dependency property, specified by the <see cref="T:System.Windows.DependencyPropertyKey" />
    ///  identifier of the dependency property. </summary>
    ///  <param name="key">The <see cref="T:System.Windows.DependencyPropertyKey" />
    ///  identifier of the property to set.</param>
    ///  <param name="value">The new local value.</param>
    procedure SetValue(key: DNDependencyPropertyKey; value: DDN.mscorlib.DNObject); overload;
    ///<summary>Clears the local value of a property. The property to be cleared is specified by a <see cref="T:System.Windows.DependencyProperty" />
    ///  identifier. </summary>
    ///  <param name="dp">The dependency property to be cleared, identified by a <see cref="T:System.Windows.DependencyProperty" />
    ///  object reference.</param>
    ///<exception cref="T:System.InvalidOperationException">Attempted to call <see cref="M:System.Windows.DependencyObject.ClearValue(System.Windows.DependencyProperty)" />
    ///  on a sealed <see cref="T:System.Windows.DependencyObject" />
    ///  .</exception>
    procedure ClearValue(dp: DNDependencyProperty); overload;
    ///<summary>Clears the local value of a read-only property. The property to be cleared is specified by a <see cref="T:System.Windows.DependencyPropertyKey" />
    ///  . </summary>
    ///  <param name="key">The key for the dependency property to be cleared.</param>
    ///<exception cref="T:System.InvalidOperationException">Attempted to call <see cref="M:System.Windows.DependencyObject.ClearValue(System.Windows.DependencyProperty)" />
    ///  on a sealed <see cref="T:System.Windows.DependencyObject" />
    ///  .</exception>
    procedure ClearValue(key: DNDependencyPropertyKey); overload;
    ///<summary>Coerces the value of the specified dependency property. This is accomplished by invoking any <see cref="T:System.Windows.CoerceValueCallback" />
    ///  function specified in property metadata for the dependency property as it exists on the calling <see cref="T:System.Windows.DependencyObject" />
    ///  .</summary>
    ///  <param name="dp">The identifier for the dependency property to coerce.</param>
    ///<exception cref="T:System.InvalidOperationException">The specified <paramref name="dp" />
    ///  or its value were invalid or do not exist.</exception>
    procedure CoerceValue(dp: DNDependencyProperty);
    ///<summary>Re-evaluates the effective value for the specified dependency property</summary>
    ///  <param name="dp">The <see cref="T:System.Windows.DependencyProperty" />
    ///  identifier of the property to invalidate.</param>
    procedure InvalidateProperty(dp: DNDependencyProperty);
    ///<summary>Returns the local value of a dependency property, if it exists. </summary>
    ///  <param name="dp">The <see cref="T:System.Windows.DependencyProperty" />
    ///  identifier of the property to retrieve the value for.</param>
    ///<returns>Returns the local value, or returns the sentinel value <see cref="F:System.Windows.DependencyProperty.UnsetValue" />
    ///  if no local value is set.</returns>
    function ReadLocalValue(dp: DNDependencyProperty): DDN.mscorlib.DNObject;
    ///<summary>Creates a specialized enumerator for determining which dependency properties have locally set values on this <see cref="T:System.Windows.DependencyObject" />
    ///  . </summary>
    ///<returns>A specialized local value enumerator.</returns>
    function GetLocalValueEnumerator: DNLocalValueEnumerator;
    function CheckAccess: Boolean;
    procedure VerifyAccess;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>Gets a value that indicates whether the object can be made unmodifiable. </summary>
    ///<returns><see langword="true" />
    ///  if the current object can be made unmodifiable or is already unmodifiable; otherwise, <see langword="false" />
    ///  .</returns>
    property CanFreeze: Boolean read get_CanFreeze;
    ///<summary>Gets a value that indicates whether the object is currently modifiable. </summary>
    ///<returns><see langword="true" />
    ///  if the object is frozen and cannot be modified; <see langword="false" />
    ///  if the object can be modified.</returns>
    property IsFrozen: Boolean read get_IsFrozen;
    ///<summary>Gets the <see cref="T:System.Windows.DependencyObjectType" />
    ///  that wraps the CLR type of this instance.Â </summary>
    ///<returns>A <see cref="T:System.Windows.DependencyObjectType" />
    ///  that wraps the CLR type of this instance. </returns>
    property DependencyObjectType: DNDependencyObjectType read get_DependencyObjectType;
    ///<summary>Gets a value that indicates whether this instance is currently sealed (read-only).</summary>
    ///<returns><see langword="true" />
    ///  if this instance is sealed; otherwise, <see langword="false" />
    ///  .</returns>
    property IsSealed: Boolean read get_IsSealed;
    property Dispatcher: DNDispatcher read get_Dispatcher;
  end;

  TDNFreezable = class(TDNGenericImport<DNFreezableClass, DNFreezable>) end;

  //-------------namespace: System.Windows.Threading----------------
  DNDispatcherFrameClass = interface(DNDispatcherObjectClass)
  ['{E6DD9745-ADF2-559A-8CB6-316D900ECDFD}']
  { constructors } 

    ///<summary>Initializes a new instance of the <see cref="T:System.Windows.Threading.DispatcherFrame" />
    ///  class.</summary>
    {class} function init: DNDispatcherFrame; overload;
    ///<summary>Initializes a new instance of the <see cref="T:System.Windows.Threading.DispatcherFrame" />
    ///  class, by using the specified exit request flag.</summary>
    ///  <param name="exitWhenRequested">Indicates whether this frame will exit when all frames are requested to exit.</param>
    {class} function init(exitWhenRequested: Boolean): DNDispatcherFrame; overload;

  end;

  ///<summary>Represents an execution loop in the <see cref="T:System.Windows.Threading.Dispatcher" />
  ///  . </summary>
  [DNTypeName('System.Windows.Threading.DispatcherFrame')]
  DNDispatcherFrame = interface(DNDispatcherObject)
  ['{68499B53-61D4-3068-B35C-97BFE597985E}']
  { getters & setters } 

    function get_Continue: Boolean;
    procedure set_Continue(value: Boolean);
    function get_Dispatcher: DNDispatcher;

  { methods } 

    ///<summary>Determines whether the calling thread has access to this <see cref="T:System.Windows.Threading.DispatcherObject" />
    ///  .</summary>
    ///<returns><see langword="true" />
    ///  if the calling thread has access to this object; otherwise, <see langword="false" />
    ///  .</returns>
    function CheckAccess: Boolean;
    ///<summary>Enforces that the calling thread has access to this <see cref="T:System.Windows.Threading.DispatcherObject" />
    ///  .</summary>
    ///<exception cref="T:System.InvalidOperationException">the calling thread does not have access to this <see cref="T:System.Windows.Threading.DispatcherObject" />
    ///  .</exception>
    procedure VerifyAccess;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>Gets or sets a value that indicates whether this <see cref="T:System.Windows.Threading.DispatcherFrame" />
    ///  should continue.</summary>
    ///<returns><see langword="true" />
    ///  if the frame should continue; otherwise, <see langword="false" />
    ///  .  The default value is <see langword="true" />
    ///  .</returns>
    property &Continue: Boolean read get_Continue write set_Continue;
    ///<summary>Gets the <see cref="T:System.Windows.Threading.Dispatcher" />
    ///  this <see cref="T:System.Windows.Threading.DispatcherObject" />
    ///  is associated with. </summary>
    ///<returns>The dispatcher.</returns>
    property Dispatcher: DNDispatcher read get_Dispatcher;
  end;

  TDNDispatcherFrame = class(TDNGenericImport<DNDispatcherFrameClass, DNDispatcherFrame>) end;

  //-------------namespace: System.Windows----------------
  DNWeakEventManagerClass = interface(DNDispatcherObjectClass)
  ['{EC1A780D-5474-5C90-A449-485A6D896FF3}']
  end;

  ///<summary>Provides a base class for the event manager that is used in the weak event pattern. The manager adds and removes listeners for events (or callbacks) that also use the pattern.</summary>
  [DNTypeName('System.Windows.WeakEventManager')]
  DNWeakEventManager = interface(DNDispatcherObject)
  ['{1E3727EE-0804-35E0-A877-BE085FAB7564}']
  { getters & setters } 

    function get_Dispatcher: DNDispatcher;

  { methods } 

    ///<summary>Determines whether the calling thread has access to this <see cref="T:System.Windows.Threading.DispatcherObject" />
    ///  .</summary>
    ///<returns><see langword="true" />
    ///  if the calling thread has access to this object; otherwise, <see langword="false" />
    ///  .</returns>
    function CheckAccess: Boolean;
    ///<summary>Enforces that the calling thread has access to this <see cref="T:System.Windows.Threading.DispatcherObject" />
    ///  .</summary>
    ///<exception cref="T:System.InvalidOperationException">the calling thread does not have access to this <see cref="T:System.Windows.Threading.DispatcherObject" />
    ///  .</exception>
    procedure VerifyAccess;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>Gets the <see cref="T:System.Windows.Threading.Dispatcher" />
    ///  this <see cref="T:System.Windows.Threading.DispatcherObject" />
    ///  is associated with. </summary>
    ///<returns>The dispatcher.</returns>
    property Dispatcher: DNDispatcher read get_Dispatcher;
  end;

  TDNWeakEventManager = class(TDNGenericImport<DNWeakEventManagerClass, DNWeakEventManager>) end;

  //-------------namespace: System.Collections.Specialized----------------
  DNCollectionChangedEventManagerClass = interface(DNWeakEventManagerClass)
  ['{FD184746-FF6C-575F-9E2C-0F70271216A6}']
  { static methods } 

    ///<summary>Adds the specified listener to the <see cref="E:System.Collections.Specialized.INotifyCollectionChanged.CollectionChanged" />
    ///  event of the specified source.</summary>
    ///  <param name="source">The object with the event.</param>
    ///  <param name="listener">The object to add as a listener.</param>
    {class} procedure AddListener(source: DDN.System.DNINotifyCollectionChanged; listener: DNIWeakEventListener);
    ///<summary>Removes the specified listener from the <see cref="E:System.Collections.Specialized.INotifyCollectionChanged.CollectionChanged" />
    ///  event of the specified source.</summary>
    ///  <param name="source">The object with the event.</param>
    ///  <param name="listener">The listener to remove.</param>
    {class} procedure RemoveListener(source: DDN.System.DNINotifyCollectionChanged; listener: DNIWeakEventListener);
    {class} procedure AddHandler(source: DDN.System.DNINotifyCollectionChanged; handler: DDN.mscorlib.DNEventHandler<DDN.System.DNNotifyCollectionChangedEventArgs>);
    {class} procedure RemoveHandler(source: DDN.System.DNINotifyCollectionChanged; handler: DDN.mscorlib.DNEventHandler<DDN.System.DNNotifyCollectionChangedEventArgs>);

  end;

  ///<summary>Provides a <see cref="T:System.Windows.WeakEventManager" />
  ///  implementation so that you can use the "weak event listener" pattern to attach listeners for the <see cref="E:System.Collections.Specialized.INotifyCollectionChanged.CollectionChanged" />
  ///  event.</summary>
  [DNTypeName('System.Collections.Specialized.CollectionChangedEventManager')]
  DNCollectionChangedEventManager = interface(DNWeakEventManager)
  ['{8B1E5228-C3B7-3A07-A24B-8D5563E0085A}']
  { getters & setters } 

    function get_Dispatcher: DNDispatcher;

  { methods } 

    function CheckAccess: Boolean;
    procedure VerifyAccess;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Dispatcher: DNDispatcher read get_Dispatcher;
  end;

  TDNCollectionChangedEventManager = class(TDNGenericImport<DNCollectionChangedEventManagerClass, DNCollectionChangedEventManager>) end;

  //-------------namespace: System.ComponentModel----------------
  DNCurrentChangedEventManagerClass = interface(DNWeakEventManagerClass)
  ['{D99B691F-5F39-5C67-9E03-9404D1528211}']
  { static methods } 

    {class} procedure AddHandler(source: DNICollectionView; handler: DDN.mscorlib.DNEventHandler<DDN.mscorlib.DNEventArgs>);
    {class} procedure RemoveHandler(source: DNICollectionView; handler: DDN.mscorlib.DNEventHandler<DDN.mscorlib.DNEventArgs>);
    ///<summary>Adds the specified listener to the <see cref="E:System.ComponentModel.ICollectionView.CurrentChanged" />
    ///  event of the specified source.</summary>
    ///  <param name="source">The object with the event.</param>
    ///  <param name="listener">The object to add as a listener.</param>
    {class} procedure AddListener(source: DNICollectionView; listener: DNIWeakEventListener);
    ///<summary>Removes the specified listener from the <see cref="E:System.ComponentModel.ICollectionView.CurrentChanged" />
    ///  event of the specified source.</summary>
    ///  <param name="source">The object with the event.</param>
    ///  <param name="listener">The listener to remove.</param>
    {class} procedure RemoveListener(source: DNICollectionView; listener: DNIWeakEventListener);

  end;

  ///<summary>Provides a <see cref="T:System.Windows.WeakEventManager" />
  ///  implementation so that you can use the "weak event listener" pattern to attach listeners for the <see cref="E:System.ComponentModel.ICollectionView.CurrentChanged" />
  ///  event.</summary>
  [DNTypeName('System.ComponentModel.CurrentChangedEventManager')]
  DNCurrentChangedEventManager = interface(DNWeakEventManager)
  ['{A9ADEF08-1872-3B9F-8535-5B4BF30F937B}']
  { getters & setters } 

    function get_Dispatcher: DNDispatcher;

  { methods } 

    function CheckAccess: Boolean;
    procedure VerifyAccess;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Dispatcher: DNDispatcher read get_Dispatcher;
  end;

  TDNCurrentChangedEventManager = class(TDNGenericImport<DNCurrentChangedEventManagerClass, DNCurrentChangedEventManager>) end;

  //-------------namespace: System.ComponentModel----------------
  DNCurrentChangingEventManagerClass = interface(DNWeakEventManagerClass)
  ['{3961BE8C-AF87-5D48-8D78-8DEC7FAD54F9}']
  { static methods } 

    {class} procedure AddHandler(source: DNICollectionView; handler: DDN.mscorlib.DNEventHandler<DNCurrentChangingEventArgs>);
    {class} procedure RemoveHandler(source: DNICollectionView; handler: DDN.mscorlib.DNEventHandler<DNCurrentChangingEventArgs>);
    ///<summary>Adds the specified listener to the <see cref="E:System.ComponentModel.ICollectionView.CurrentChanging" />
    ///  event of the specified source.</summary>
    ///  <param name="source">The object with the event.</param>
    ///  <param name="listener">The object to add as a listener.</param>
    {class} procedure AddListener(source: DNICollectionView; listener: DNIWeakEventListener);
    ///<summary>Removes the specified listener from the <see cref="E:System.ComponentModel.ICollectionView.CurrentChanging" />
    ///  event of the specified source.</summary>
    ///  <param name="source">The object with the event.</param>
    ///  <param name="listener">The listener to remove.</param>
    {class} procedure RemoveListener(source: DNICollectionView; listener: DNIWeakEventListener);

  end;

  ///<summary>Provides a <see cref="T:System.Windows.WeakEventManager" />
  ///  implementation so that you can use the "weak event listener" pattern to attach listeners for the <see cref="E:System.ComponentModel.ICollectionView.CurrentChanging" />
  ///  event.</summary>
  [DNTypeName('System.ComponentModel.CurrentChangingEventManager')]
  DNCurrentChangingEventManager = interface(DNWeakEventManager)
  ['{3B505C32-2DF8-381E-89C6-AA7ED6DCA914}']
  { getters & setters } 

    function get_Dispatcher: DNDispatcher;

  { methods } 

    function CheckAccess: Boolean;
    procedure VerifyAccess;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Dispatcher: DNDispatcher read get_Dispatcher;
  end;

  TDNCurrentChangingEventManager = class(TDNGenericImport<DNCurrentChangingEventManagerClass, DNCurrentChangingEventManager>) end;

  //-------------namespace: System.ComponentModel----------------
  DNErrorsChangedEventManagerClass = interface(DNWeakEventManagerClass)
  ['{80E15846-562F-5F30-8684-36E7999F8F6B}']
  { static methods } 

    {class} procedure AddHandler(source: DDN.System.DNINotifyDataErrorInfo; handler: DDN.mscorlib.DNEventHandler<DDN.System.DNDataErrorsChangedEventArgs>);
    {class} procedure RemoveHandler(source: DDN.System.DNINotifyDataErrorInfo; handler: DDN.mscorlib.DNEventHandler<DDN.System.DNDataErrorsChangedEventArgs>);

  end;

  ///<summary>Provides a <see cref="T:System.Windows.WeakEventManager" />
  ///  implementation so that you can use the weak event listener pattern to attach listeners for the <see cref="E:System.ComponentModel.INotifyDataErrorInfo.ErrorsChanged" />
  ///  event.</summary>
  [DNTypeName('System.ComponentModel.ErrorsChangedEventManager')]
  DNErrorsChangedEventManager = interface(DNWeakEventManager)
  ['{471A065D-4307-3A9C-A00D-2126673ACF39}']
  { getters & setters } 

    function get_Dispatcher: DNDispatcher;

  { methods } 

    function CheckAccess: Boolean;
    procedure VerifyAccess;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Dispatcher: DNDispatcher read get_Dispatcher;
  end;

  TDNErrorsChangedEventManager = class(TDNGenericImport<DNErrorsChangedEventManagerClass, DNErrorsChangedEventManager>) end;

  //-------------namespace: System.ComponentModel----------------
  DNPropertyChangedEventManagerClass = interface(DNWeakEventManagerClass)
  ['{A3E408A4-8B20-52B9-B4F9-8ED79C4999F0}']
  { static methods } 

    ///<summary>Adds the specified listener to the list of listeners on the specified source.</summary>
    ///  <param name="source">The object with the event.</param>
    ///  <param name="listener">The object to add as a listener.</param>
    ///  <param name="propertyName">The name of the property that exists on <paramref name="source" />
    ///  upon which to listen for changes. Set to <see cref="F:System.String.Empty" />
    ///  to indicate "any property".</param>
    {class} procedure AddListener(source: DDN.System.DNINotifyPropertyChanged; listener: DNIWeakEventListener; propertyName: string);
    ///<summary>Removes the specified listener from the list of listeners on the provided source.</summary>
    ///  <param name="source">The object to remove the listener from.</param>
    ///  <param name="listener">The listener to remove.</param>
    ///  <param name="propertyName">The name of the property that exists on <paramref name="source" />
    ///  upon which to stop listening for changes. Set to <see cref="F:System.String.Empty" />
    ///  to indicate "any property".</param>
    {class} procedure RemoveListener(source: DDN.System.DNINotifyPropertyChanged; listener: DNIWeakEventListener; propertyName: string);
    {class} procedure AddHandler(source: DDN.System.DNINotifyPropertyChanged; handler: DDN.mscorlib.DNEventHandler<DDN.System.DNPropertyChangedEventArgs>; propertyName: string);
    {class} procedure RemoveHandler(source: DDN.System.DNINotifyPropertyChanged; handler: DDN.mscorlib.DNEventHandler<DDN.System.DNPropertyChangedEventArgs>; propertyName: string);

  end;

  ///<summary>Provides a <see cref="T:System.Windows.WeakEventManager" />
  ///  implementation so that you can use the "weak event listener" pattern to attach listeners for the <see cref="E:System.ComponentModel.INotifyPropertyChanged.PropertyChanged" />
  ///  event.</summary>
  [DNTypeName('System.ComponentModel.PropertyChangedEventManager')]
  DNPropertyChangedEventManager = interface(DNWeakEventManager)
  ['{EC82AD5B-0628-39D8-A596-9B130B8C1183}']
  { getters & setters } 

    function get_Dispatcher: DNDispatcher;

  { methods } 

    function CheckAccess: Boolean;
    procedure VerifyAccess;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Dispatcher: DNDispatcher read get_Dispatcher;
  end;

  TDNPropertyChangedEventManager = class(TDNGenericImport<DNPropertyChangedEventManagerClass, DNPropertyChangedEventManager>) end;

  //-------------namespace: System.Windows----------------
  DNWeakEventManagerClass<TEventSource, TEventArgs> = interface(DNWeakEventManagerClass)
  ['{791D2AEC-D463-557C-BA2A-56D2BD3CA71B}']
  { static methods } 

    {class} procedure AddHandler(source: TEventSource; eventName: string; handler: DDN.mscorlib.DNEventHandler<TEventArgs>);
    {class} procedure RemoveHandler(source: TEventSource; eventName: string; handler: DDN.mscorlib.DNEventHandler<TEventArgs>);

  end;

  ///<summary>Provides a type-safe <see cref="T:System.Windows.WeakEventManager" />
  ///  that enables you to specify the event handler to use for the "weak event listener" pattern. This class defines a type parameter for the source of the event and a type parameter for the event data that is used.</summary>
  ///<typeparam name="TEventSource">The type that raises the event.</typeparam><typeparam name="TEventArgs">The type that holds the event data.</typeparam>
  [DNTypeName('System.Windows.WeakEventManager`2')]
  DNWeakEventManager<TEventSource, TEventArgs> = interface(DNWeakEventManager)
  ['{D1B61D1D-442D-3005-B85C-94149332E78C}']
  { getters & setters } 

    function get_Dispatcher: DNDispatcher;

  { methods } 

    function CheckAccess: Boolean;
    procedure VerifyAccess;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Dispatcher: DNDispatcher read get_Dispatcher;
  end;

  TDNWeakEventManager<TEventSource, TEventArgs> = class(TDNGenericImport<DNWeakEventManagerClass<TEventSource, TEventArgs>, DNWeakEventManager<TEventSource, TEventArgs>>) end;

  //-------------namespace: System.Windows.Threading----------------
  DNDispatcherOperationClass = interface(DDN.mscorlib.DNObjectClass)
  ['{48A2A2EF-CE7F-5B39-9372-F9A28A5D7AA7}']
  end;

  ///<summary>Represents an object that is used to interact with an operation that has been posted to the <see cref="T:System.Windows.Threading.Dispatcher" />
  ///  queue.</summary>
  [DNTypeName('System.Windows.Threading.DispatcherOperation')]
  DNDispatcherOperation = interface(DDN.mscorlib.DNObject)
  ['{DB22AF9A-DDDD-3CF5-8768-4C076EDBCC02}']
  { getters & setters } 

    function get_Dispatcher: DNDispatcher;
    function get_Priority: DNDispatcherPriority;
    procedure set_Priority(value: DNDispatcherPriority);
    function get_Status: DNDispatcherOperationStatus;
    function get_Task: DDN.mscorlib.DNTask;
    function get_Result: DDN.mscorlib.DNObject;

  { events } 

    procedure add_Aborted(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Aborted(value: DDN.mscorlib.DNEventHandler);
    procedure add_Completed(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Completed(value: DDN.mscorlib.DNEventHandler);

  { methods } 

    ///<summary>Returns an object that is notified when the asynchronous operation is finished.</summary>
    ///<returns>An object that is notified when the asynchronous operation is finished.</returns>
    function GetAwaiter: DDN.mscorlib.DNTaskAwaiter;
    ///<summary>Waits for the operation to complete</summary>
    ///<returns>The status of the operation. </returns>
    ///<exception cref="T:System.InvalidOperationException"><see cref="P:System.Windows.Threading.DispatcherOperation.Status" />
    ///  is equal to <see cref="F:System.Windows.Threading.DispatcherOperationStatus.Executing" />
    ///  .  This can occur when waiting for an operation that is already executing on the same thread.</exception>
    function Wait: DNDispatcherOperationStatus; overload;
    ///<summary>Waits for the operation to complete in the specified period of time.</summary>
    ///  <param name="timeout">The maximum period of time to wait.</param>
    ///<returns>The status of the operation. </returns>
    ///<exception cref="T:System.InvalidOperationException"><see cref="P:System.Windows.Threading.DispatcherOperation.Status" />
    ///  is equal to <see cref="F:System.Windows.Threading.DispatcherOperationStatus.Executing" />
    ///  .  This can occur when waiting for an operation that is already executing on the same thread.</exception>
    function Wait(timeout: DDN.mscorlib.DNTimeSpan): DNDispatcherOperationStatus; overload;
    ///<summary>Aborts the operation. </summary>
    ///<returns><see langword="true" />
    ///  if the operation was aborted; otherwise, <see langword="false" />
    ///  .</returns>
    function &Abort: Boolean;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>Gets the <see cref="T:System.Windows.Threading.Dispatcher" />
    ///  that the operation was posted to. </summary>
    ///<returns>The dispatcher.</returns>
    property Dispatcher: DNDispatcher read get_Dispatcher;
    ///<summary>Gets or sets the priority of the operation in the <see cref="T:System.Windows.Threading.Dispatcher" />
    ///  queue. </summary>
    ///<returns>The priority of the delegate on the queue.</returns>
    property Priority: DNDispatcherPriority read get_Priority write set_Priority;
    ///<summary>Gets the current status of the operation..</summary>
    ///<returns>The status of the operation.</returns>
    property Status: DNDispatcherOperationStatus read get_Status;
    ///<summary>Gets a <see cref="T:System.Threading.Tasks.Task`1" />
    ///  that represents the current operation.</summary>
    ///<returns>An object that represents the current operation.</returns>
    property Task: DDN.mscorlib.DNTask read get_Task;
    ///<summary>Gets the result of the operation after it has completed. </summary>
    ///<returns>
    ///  The result of the operation -or- <see langword="null" />
    ///  if the operation has not completed.</returns>
    property Result: DDN.mscorlib.DNObject read get_Result;
  end;

  TDNDispatcherOperation = class(TDNGenericImport<DNDispatcherOperationClass, DNDispatcherOperation>) end;

  //-------------namespace: System.Windows.Threading----------------
  DNDispatcherOperationClass<TResult> = interface(DNDispatcherOperationClass)
  ['{AB908011-A6EF-506E-8D47-3742172AAFE3}']
  end;

  ///<summary>Represents an object that is used to interact with an operation that has been posted to the <see cref="T:System.Windows.Threading.Dispatcher" />
  ///  queue and contains a <see cref="T:System.Threading.Tasks.Task`1" />
  ///  . </summary>
  ///<typeparam name="TResult">The type that is returned by the <see cref="T:System.Threading.Tasks.Task`1" />
  ///  .</typeparam>
  [DNTypeName('System.Windows.Threading.DispatcherOperation`1')]
  DNDispatcherOperation<TResult> = interface(DNDispatcherOperation)
  ['{FCE6E672-5B63-3EE2-90E3-91BE785A0FD5}']
  { getters & setters } 

    function get_Task: DDN.mscorlib.DNTask<TResult>;
    function get_Result: TResult;
    function get_Dispatcher: DNDispatcher;
    function get_Priority: DNDispatcherPriority;
    procedure set_Priority(value: DNDispatcherPriority);
    function get_Status: DNDispatcherOperationStatus;

  { events } 

    procedure add_Aborted(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Aborted(value: DDN.mscorlib.DNEventHandler);
    procedure add_Completed(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Completed(value: DDN.mscorlib.DNEventHandler);

  { methods } 

    ///<summary>Returns an object that awaits an asynchronous operation that returns a result.</summary>
    ///<returns>An object that awaits an asynchronous operation that returns a result.</returns>
    function GetAwaiter: DDN.mscorlib.DNTaskAwaiter<TResult>;
    ///<summary>Waits for the operation to complete</summary>
    ///<returns>The status of the operation. </returns>
    ///<exception cref="T:System.InvalidOperationException"><see cref="P:System.Windows.Threading.DispatcherOperation.Status" />
    ///  is equal to <see cref="F:System.Windows.Threading.DispatcherOperationStatus.Executing" />
    ///  .  This can occur when waiting for an operation that is already executing on the same thread.</exception>
    function Wait: DNDispatcherOperationStatus; overload;
    ///<summary>Waits for the operation to complete in the specified period of time.</summary>
    ///  <param name="timeout">The maximum period of time to wait.</param>
    ///<returns>The status of the operation. </returns>
    ///<exception cref="T:System.InvalidOperationException"><see cref="P:System.Windows.Threading.DispatcherOperation.Status" />
    ///  is equal to <see cref="F:System.Windows.Threading.DispatcherOperationStatus.Executing" />
    ///  .  This can occur when waiting for an operation that is already executing on the same thread.</exception>
    function Wait(timeout: DDN.mscorlib.DNTimeSpan): DNDispatcherOperationStatus; overload;
    ///<summary>Aborts the operation. </summary>
    ///<returns><see langword="true" />
    ///  if the operation was aborted; otherwise, <see langword="false" />
    ///  .</returns>
    function &Abort: Boolean;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>Gets a <see cref="T:System.Threading.Tasks.Task`1" />
    ///  that represents the current operation.</summary>
    ///<returns>An object that represents the current operation.</returns>
    property Task: DDN.mscorlib.DNTask<TResult> read get_Task;
    ///<summary>Gets the result of the operation after it has completed.</summary>
    ///<returns>The result of the operation.</returns>
    property Result: TResult read get_Result;
    ///<summary>Gets the <see cref="T:System.Windows.Threading.Dispatcher" />
    ///  that the operation was posted to. </summary>
    ///<returns>The dispatcher.</returns>
    property Dispatcher: DNDispatcher read get_Dispatcher;
    ///<summary>Gets or sets the priority of the operation in the <see cref="T:System.Windows.Threading.Dispatcher" />
    ///  queue. </summary>
    ///<returns>The priority of the delegate on the queue.</returns>
    property Priority: DNDispatcherPriority read get_Priority write set_Priority;
    ///<summary>Gets the current status of the operation..</summary>
    ///<returns>The status of the operation.</returns>
    property Status: DNDispatcherOperationStatus read get_Status;
  end;

  TDNDispatcherOperation<TResult> = class(TDNGenericImport<DNDispatcherOperationClass<TResult>, DNDispatcherOperation<TResult>>) end;

  //-------------namespace: System.Windows.Threading----------------
  DNDispatcherTimerClass = interface(DDN.mscorlib.DNObjectClass)
  ['{BAB225DA-E8ED-50C4-82B3-23DF67E2E759}']
  { constructors } 

    ///<summary>Initializes a new instance of the <see cref="T:System.Windows.Threading.DispatcherTimer" />
    ///  class.</summary>
    {class} function init: DNDispatcherTimer; overload;
    ///<summary>Initializes a new instance of the <see cref="T:System.Windows.Threading.DispatcherTimer" />
    ///  class which processes timer events at the specified priority.</summary>
    ///  <param name="priority">The priority at which to invoke the timer.</param>
    {class} function init(priority: DNDispatcherPriority): DNDispatcherTimer; overload;
    ///<summary>Initializes a new instance of the <see cref="T:System.Windows.Threading.DispatcherTimer" />
    ///  class which runs on the specified <see cref="T:System.Windows.Threading.Dispatcher" />
    ///  at the specified priority.</summary>
    ///  <param name="priority">The priority at which to invoke the timer.</param>
    ///  <param name="dispatcher">The dispatcher the timer is associated with.</param>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="dispatcher" />
    ///  is <see langword="null" />
    ///  .</exception>
    {class} function init(priority: DNDispatcherPriority; dispatcher: DNDispatcher): DNDispatcherTimer; overload;
    ///<summary>Initializes a new instance of the <see cref="T:System.Windows.Threading.DispatcherTimer" />
    ///  class which uses the specified time interval, priority, event handler, and <see cref="T:System.Windows.Threading.Dispatcher" />
    ///  .</summary>
    ///  <param name="interval">The period of time between ticks.</param>
    ///  <param name="priority">The priority at which to invoke the timer.</param>
    ///  <param name="callback">The event handler to call when the <see cref="E:System.Windows.Threading.DispatcherTimer.Tick" />
    ///  event occurs.</param>
    ///  <param name="dispatcher">The dispatcher the timer is associated with.</param>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="dispatcher" />
    ///  is <see langword="null" />
    ///  .</exception><exception cref="T:System.ArgumentNullException"><paramref name="callback" />
    ///  is <see langword="null" />
    ///  .</exception><exception cref="T:System.ArgumentOutOfRangeException"><paramref name="interval" />
    ///  is less than 0 or greater than <see cref="F:System.Int32.MaxValue" />
    ///  .</exception>
    {class} function init(interval: DDN.mscorlib.DNTimeSpan; priority: DNDispatcherPriority; callback: DDN.mscorlib.DNEventHandler; dispatcher: DNDispatcher): DNDispatcherTimer; overload;

  end;

  ///<summary>A timer that is integrated into the <see cref="T:System.Windows.Threading.Dispatcher" />
  ///  queue which is processed at a specified interval of time and at a specified priority. </summary>
  [DNTypeName('System.Windows.Threading.DispatcherTimer')]
  DNDispatcherTimer = interface(DDN.mscorlib.DNObject)
  ['{D364767F-0592-3217-874C-3D7F0046AA1F}']
  { getters & setters } 

    function get_Dispatcher: DNDispatcher;
    function get_IsEnabled: Boolean;
    procedure set_IsEnabled(value: Boolean);
    function get_Interval: DDN.mscorlib.DNTimeSpan;
    procedure set_Interval(value: DDN.mscorlib.DNTimeSpan);
    function get_Tag: DDN.mscorlib.DNObject;
    procedure set_Tag(value: DDN.mscorlib.DNObject);

  { events } 

    procedure add_Tick(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Tick(value: DDN.mscorlib.DNEventHandler);

  { methods } 

    ///<summary>Starts the <see cref="T:System.Windows.Threading.DispatcherTimer" />
    ///  . </summary>
    procedure Start;
    ///<summary>Stops the <see cref="T:System.Windows.Threading.DispatcherTimer" />
    ///  . </summary>
    procedure Stop;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>Gets the <see cref="T:System.Windows.Threading.Dispatcher" />
    ///  associated with this <see cref="T:System.Windows.Threading.DispatcherTimer" />
    ///  . </summary>
    ///<returns>The dispatcher.</returns>
    property Dispatcher: DNDispatcher read get_Dispatcher;
    ///<summary>Gets or sets a value that indicates whether the timer is running. </summary>
    ///<returns><see langword="true" />
    ///  if the timer is enabled; otherwise, <see langword="false" />
    ///  .  The default is <see langword="false" />
    ///  .</returns>
    property IsEnabled: Boolean read get_IsEnabled write set_IsEnabled;
    ///<summary>Gets or sets the period of time between timer ticks. </summary>
    ///<returns>The period of time between ticks. The default is 00:00:00.</returns>
    ///<exception cref="T:System.ArgumentOutOfRangeException"><paramref name="interval" />
    ///  is less than 0 or greater than <see cref="F:System.Int32.MaxValue" />
    ///  milliseconds.</exception>
    property Interval: DDN.mscorlib.DNTimeSpan read get_Interval write set_Interval;
    ///<summary>Gets or sets a user-defined data object. </summary>
    ///<returns>The user-defined data.  The default is <see langword="null" />
    ///  .</returns>
    property Tag: DDN.mscorlib.DNObject read get_Tag write set_Tag;
  end;

  TDNDispatcherTimer = class(TDNGenericImport<DNDispatcherTimerClass, DNDispatcherTimer>) end;


implementation


initialization
  LoadAssemblyModule('WPF\WindowsBase.dll', True);

finalization

end.
