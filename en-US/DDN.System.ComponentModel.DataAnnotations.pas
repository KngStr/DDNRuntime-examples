//----------------------------------------------------------------------------
//  System.ComponentModel.DataAnnotations.dll: System.ComponentModel.DataAnnotations, Version=4.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35
//----------------------------------------------------------------------------
//  The code is automatically generated by the GenCodeNET tool.
//----------------------------------------------------------------------------
//  .NET Framework: 4.0
//----------------------------------------------------------------------------
//  UnitName: DDN.System.ComponentModel.DataAnnotations
//  Author: ying32
//----------------------------------------------------------------------------

unit DDN.System.ComponentModel.DataAnnotations;

{$IFDEF FPC}
  {$mode delphi}//{$H+}
  {$modeswitch advancedrecords}
  {$modeswitch prefixedattributes} // Custom attributes featureï¼Œfpc3.2.2+
{$ENDIF}

interface

uses
  DDN.Runtime,
  DDN.mscorlib,
  DDN.System;

type

{ enums }

  //-------------namespace: System.ComponentModel.DataAnnotations----------------
  ///<summary>Represents an enumeration of the data types associated with data fields and parameters. </summary>
  [DNTypeName('System.ComponentModel.DataAnnotations.DataType')]
  DNDataType = type Integer;
  DNDataTypeHelper = record helper for DNDataType
  public const
    ///<summary>Represents a custom data type.</summary>
    Custom = 0;
    ///<summary>Represents an instant in time, expressed as a date and time of day.</summary>
    DateTime = 1;
    ///<summary>Represents a date value.</summary>
    Date = 2;
    ///<summary>Represents a time value.</summary>
    Time = 3;
    ///<summary>Represents a continuous time during which an object exists.</summary>
    Duration = 4;
    ///<summary>Represents a phone number value.</summary>
    PhoneNumber = 5;
    ///<summary>Represents a currency value.</summary>
    Currency = 6;
    ///<summary>Represents text that is displayed.</summary>
    Text = 7;
    ///<summary>Represents an HTML file.</summary>
    Html = 8;
    ///<summary>Represents multi-line text.</summary>
    MultilineText = 9;
    ///<summary>Represents an e-mail address.</summary>
    EmailAddress = 10;
    ///<summary>Represent a password value.</summary>
    Password = 11;
    ///<summary>Represents a URL value.</summary>
    Url = 12;
    ///<summary>Represents a URL to an image.</summary>
    ImageUrl = 13;
    ///<summary>Represents a credit card number.</summary>
    CreditCard = 14;
    ///<summary>Represents a postal code.</summary>
    PostalCode = 15;
    ///<summary>Represents file upload data type.</summary>
    Upload = 16;
  end;


  //-------------namespace: System.ComponentModel.DataAnnotations.Schema----------------
  ///<summary>Represents the pattern used to generate values for a property in the database.</summary>
  [DNTypeName('System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption')]
  DNDatabaseGeneratedOption = type Integer;
  DNDatabaseGeneratedOptionHelper = record helper for DNDatabaseGeneratedOption
  public const
    ///<summary>The database does not generate values.</summary>
    None = 0;
    ///<summary>The database generates a value when a row is inserted.</summary>
    Identity = 1;
    ///<summary>The database generates a value when a row is inserted or updated.</summary>
    Computed = 2;
  end;




type


{ declares }

  DNIValidatableObject = interface; // type: System.ComponentModel.DataAnnotations.IValidatableObject, namespace: System.ComponentModel.DataAnnotations
  DNAssociationAttribute = interface; // type: System.ComponentModel.DataAnnotations.AssociationAttribute, namespace: System.ComponentModel.DataAnnotations
  DNBindableTypeAttribute = interface; // type: System.ComponentModel.DataAnnotations.BindableTypeAttribute, namespace: System.ComponentModel.DataAnnotations
  DNConcurrencyCheckAttribute = interface; // type: System.ComponentModel.DataAnnotations.ConcurrencyCheckAttribute, namespace: System.ComponentModel.DataAnnotations
  DNDisplayAttribute = interface; // type: System.ComponentModel.DataAnnotations.DisplayAttribute, namespace: System.ComponentModel.DataAnnotations
  DNDisplayColumnAttribute = interface; // type: System.ComponentModel.DataAnnotations.DisplayColumnAttribute, namespace: System.ComponentModel.DataAnnotations
  DNDisplayFormatAttribute = interface; // type: System.ComponentModel.DataAnnotations.DisplayFormatAttribute, namespace: System.ComponentModel.DataAnnotations
  DNEditableAttribute = interface; // type: System.ComponentModel.DataAnnotations.EditableAttribute, namespace: System.ComponentModel.DataAnnotations
  DNFilterUIHintAttribute = interface; // type: System.ComponentModel.DataAnnotations.FilterUIHintAttribute, namespace: System.ComponentModel.DataAnnotations
  DNKeyAttribute = interface; // type: System.ComponentModel.DataAnnotations.KeyAttribute, namespace: System.ComponentModel.DataAnnotations
  DNMetadataTypeAttribute = interface; // type: System.ComponentModel.DataAnnotations.MetadataTypeAttribute, namespace: System.ComponentModel.DataAnnotations
  DNScaffoldColumnAttribute = interface; // type: System.ComponentModel.DataAnnotations.ScaffoldColumnAttribute, namespace: System.ComponentModel.DataAnnotations
  DNScaffoldTableAttribute = interface; // type: System.ComponentModel.DataAnnotations.ScaffoldTableAttribute, namespace: System.ComponentModel.DataAnnotations
  DNColumnAttribute = interface; // type: System.ComponentModel.DataAnnotations.Schema.ColumnAttribute, namespace: System.ComponentModel.DataAnnotations.Schema
  DNComplexTypeAttribute = interface; // type: System.ComponentModel.DataAnnotations.Schema.ComplexTypeAttribute, namespace: System.ComponentModel.DataAnnotations.Schema
  DNDatabaseGeneratedAttribute = interface; // type: System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedAttribute, namespace: System.ComponentModel.DataAnnotations.Schema
  DNForeignKeyAttribute = interface; // type: System.ComponentModel.DataAnnotations.Schema.ForeignKeyAttribute, namespace: System.ComponentModel.DataAnnotations.Schema
  DNInversePropertyAttribute = interface; // type: System.ComponentModel.DataAnnotations.Schema.InversePropertyAttribute, namespace: System.ComponentModel.DataAnnotations.Schema
  DNNotMappedAttribute = interface; // type: System.ComponentModel.DataAnnotations.Schema.NotMappedAttribute, namespace: System.ComponentModel.DataAnnotations.Schema
  DNTableAttribute = interface; // type: System.ComponentModel.DataAnnotations.Schema.TableAttribute, namespace: System.ComponentModel.DataAnnotations.Schema
  DNTimestampAttribute = interface; // type: System.ComponentModel.DataAnnotations.TimestampAttribute, namespace: System.ComponentModel.DataAnnotations
  DNUIHintAttribute = interface; // type: System.ComponentModel.DataAnnotations.UIHintAttribute, namespace: System.ComponentModel.DataAnnotations
  DNValidationAttribute = interface; // type: System.ComponentModel.DataAnnotations.ValidationAttribute, namespace: System.ComponentModel.DataAnnotations
  DNCompareAttribute = interface; // type: System.ComponentModel.DataAnnotations.CompareAttribute, namespace: System.ComponentModel.DataAnnotations
  DNCustomValidationAttribute = interface; // type: System.ComponentModel.DataAnnotations.CustomValidationAttribute, namespace: System.ComponentModel.DataAnnotations
  DNDataTypeAttribute = interface; // type: System.ComponentModel.DataAnnotations.DataTypeAttribute, namespace: System.ComponentModel.DataAnnotations
  DNCreditCardAttribute = interface; // type: System.ComponentModel.DataAnnotations.CreditCardAttribute, namespace: System.ComponentModel.DataAnnotations
  DNEmailAddressAttribute = interface; // type: System.ComponentModel.DataAnnotations.EmailAddressAttribute, namespace: System.ComponentModel.DataAnnotations
  DNEnumDataTypeAttribute = interface; // type: System.ComponentModel.DataAnnotations.EnumDataTypeAttribute, namespace: System.ComponentModel.DataAnnotations
  DNFileExtensionsAttribute = interface; // type: System.ComponentModel.DataAnnotations.FileExtensionsAttribute, namespace: System.ComponentModel.DataAnnotations
  DNPhoneAttribute = interface; // type: System.ComponentModel.DataAnnotations.PhoneAttribute, namespace: System.ComponentModel.DataAnnotations
  DNUrlAttribute = interface; // type: System.ComponentModel.DataAnnotations.UrlAttribute, namespace: System.ComponentModel.DataAnnotations
  DNMaxLengthAttribute = interface; // type: System.ComponentModel.DataAnnotations.MaxLengthAttribute, namespace: System.ComponentModel.DataAnnotations
  DNMinLengthAttribute = interface; // type: System.ComponentModel.DataAnnotations.MinLengthAttribute, namespace: System.ComponentModel.DataAnnotations
  DNRangeAttribute = interface; // type: System.ComponentModel.DataAnnotations.RangeAttribute, namespace: System.ComponentModel.DataAnnotations
  DNRegularExpressionAttribute = interface; // type: System.ComponentModel.DataAnnotations.RegularExpressionAttribute, namespace: System.ComponentModel.DataAnnotations
  DNRequiredAttribute = interface; // type: System.ComponentModel.DataAnnotations.RequiredAttribute, namespace: System.ComponentModel.DataAnnotations
  DNStringLengthAttribute = interface; // type: System.ComponentModel.DataAnnotations.StringLengthAttribute, namespace: System.ComponentModel.DataAnnotations
  DNValidationContext = interface; // type: System.ComponentModel.DataAnnotations.ValidationContext, namespace: System.ComponentModel.DataAnnotations
  DNValidationResult = interface; // type: System.ComponentModel.DataAnnotations.ValidationResult, namespace: System.ComponentModel.DataAnnotations
  DNValidator = interface; // type: System.ComponentModel.DataAnnotations.Validator, namespace: System.ComponentModel.DataAnnotations
  DNAssociatedMetadataTypeTypeDescriptionProvider = interface; // type: System.ComponentModel.DataAnnotations.AssociatedMetadataTypeTypeDescriptionProvider, namespace: System.ComponentModel.DataAnnotations
  DNValidationException = interface; // type: System.ComponentModel.DataAnnotations.ValidationException, namespace: System.ComponentModel.DataAnnotations


{ objects }

  //-------------namespace: System.ComponentModel.DataAnnotations----------------
  ///<summary>Provides a way for an object to be invalidated.</summary>
  [DNTypeName('System.ComponentModel.DataAnnotations.IValidatableObject')]
  DNIValidatableObject = interface(DDN.mscorlib.DNObject)
  ['{FEC73482-FAD1-339F-AEAF-FB7C715B7D08}']
  { methods } 

    ///<summary>Determines whether the specified object is valid.</summary>
    ///  <param name="validationContext">The validation context.</param>
    ///<returns>A collection that holds failed-validation information.</returns>
    function Validate(validationContext: DNValidationContext): DDN.mscorlib.DNIEnumerable<DNValidationResult>;

  end;

  //-------------namespace: System.ComponentModel.DataAnnotations----------------
  DNAssociationAttributeClass = interface(DDN.mscorlib.DNAttributeClass)
  ['{A00ED2FB-5600-59C0-9867-62962336C84E}']
  { constructors } 

    ///<summary>Initializes a new instance of the <see cref="T:System.ComponentModel.DataAnnotations.AssociationAttribute" />
    ///  class.</summary>
    ///  <param name="name">The name of the association. </param>
    ///  <param name="thisKey">A comma-separated list of the property names of the key values on the <paramref name="thisKey" />
    ///  side of the association.</param>
    ///  <param name="otherKey">A comma-separated list of the property names of the key values on the <paramref name="otherKey" />
    ///  side of the association.</param>
    {class} function init(name: string; thisKey: string; otherKey: string): DNAssociationAttribute;

  end;

  ///<summary>Specifies that an entity member represents a data relationship, such as a foreign key relationship.</summary>
  [DNTypeName('System.ComponentModel.DataAnnotations.AssociationAttribute')]
  DNAssociationAttribute = interface(DDN.mscorlib.DNAttribute)
  ['{505CB5D6-BD2C-3930-B557-6877FFD39229}']
  { getters & setters } 

    function get_Name: string;
    function get_ThisKey: string;
    function get_OtherKey: string;
    function get_IsForeignKey: Boolean;
    procedure set_IsForeignKey(value: Boolean);
    function get_ThisKeyMembers: DDN.mscorlib.DNIEnumerable<string>;
    function get_OtherKeyMembers: DDN.mscorlib.DNIEnumerable<string>;
    function get_TypeId: DDN.mscorlib.DNObject;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DDN.mscorlib.DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>Gets the name of the association.</summary>
    ///<returns>The name of the association.</returns>
    property Name: string read get_Name;
    ///<summary>Gets the property names of the key values on the ThisKey side of the association.</summary>
    ///<returns>A comma-separated list of the property names that represent the key values on the ThisKey side of the association.</returns>
    property ThisKey: string read get_ThisKey;
    ///<summary>Gets the property names of the key values on the OtherKey side of the association.</summary>
    ///<returns>A comma-separated list of the property names that represent the key values on the OtherKey side of the association.</returns>
    property OtherKey: string read get_OtherKey;
    ///<summary>Gets or sets a value that indicates whether the association member represents a foreign key.</summary>
    ///<returns><see langword="true" />
    ///  if the association represents a foreign key; otherwise, <see langword="false" />
    ///  .</returns>
    property IsForeignKey: Boolean read get_IsForeignKey write set_IsForeignKey;
    ///<summary>Gets a collection of individual key members that are specified in the <see cref="P:System.ComponentModel.DataAnnotations.AssociationAttribute.ThisKey" />
    ///  property.</summary>
    ///<returns>A collection of individual key members that are specified in the <see cref="P:System.ComponentModel.DataAnnotations.AssociationAttribute.ThisKey" />
    ///  property.</returns>
    property ThisKeyMembers: DDN.mscorlib.DNIEnumerable<string> read get_ThisKeyMembers;
    ///<summary>Gets a collection of individual key members that are specified in the <see cref="P:System.ComponentModel.DataAnnotations.AssociationAttribute.OtherKey" />
    ///  property.</summary>
    ///<returns>A collection of individual key members that are specified in the <see cref="P:System.ComponentModel.DataAnnotations.AssociationAttribute.OtherKey" />
    ///  property.</returns>
    property OtherKeyMembers: DDN.mscorlib.DNIEnumerable<string> read get_OtherKeyMembers;
    property TypeId: DDN.mscorlib.DNObject read get_TypeId;
  end;

  TDNAssociationAttribute = class(TDNGenericImport<DNAssociationAttributeClass, DNAssociationAttribute>) end;

  //-------------namespace: System.ComponentModel.DataAnnotations----------------
  DNBindableTypeAttributeClass = interface(DDN.mscorlib.DNAttributeClass)
  ['{2FA4B21F-A7BA-5DF1-B24E-AEBC41F37201}']
  { constructors } 

    ///<summary>Initializes a new instance of the <see cref="T:System.ComponentModel.DataAnnotations.BindableTypeAttribute" />
    ///  class.</summary>
    {class} function init: DNBindableTypeAttribute;

  end;

  ///<summary>Specifies whether a type is typically used for binding.</summary>
  [DNTypeName('System.ComponentModel.DataAnnotations.BindableTypeAttribute')]
  DNBindableTypeAttribute = interface(DDN.mscorlib.DNAttribute)
  ['{34CA8A83-0DB5-3907-B762-23C7E92B3901}']
  { getters & setters } 

    function get_IsBindable: Boolean;
    procedure set_IsBindable(value: Boolean);
    function get_TypeId: DDN.mscorlib.DNObject;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DDN.mscorlib.DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>Gets a value indicating that a type is typically used for binding.</summary>
    ///<returns>
    ///  true if the property is typically used for binding; otherwise, false.</returns>
    property IsBindable: Boolean read get_IsBindable write set_IsBindable;
    property TypeId: DDN.mscorlib.DNObject read get_TypeId;
  end;

  TDNBindableTypeAttribute = class(TDNGenericImport<DNBindableTypeAttributeClass, DNBindableTypeAttribute>) end;

  //-------------namespace: System.ComponentModel.DataAnnotations----------------
  DNConcurrencyCheckAttributeClass = interface(DDN.mscorlib.DNAttributeClass)
  ['{1D3E64AB-3825-5F49-BAA9-23ACFAE79A89}']
  { constructors } 

    ///<summary>Initializes a new instance of the <see cref="T:System.ComponentModel.DataAnnotations.ConcurrencyCheckAttribute" />
    ///  class.</summary>
    {class} function init: DNConcurrencyCheckAttribute;

  end;

  ///<summary>Specifies that a property participates in optimistic concurrency checks.</summary>
  [DNTypeName('System.ComponentModel.DataAnnotations.ConcurrencyCheckAttribute')]
  DNConcurrencyCheckAttribute = interface(DDN.mscorlib.DNAttribute)
  ['{15B66C64-0770-3170-BF09-FED4005D813B}']
  { getters & setters } 

    function get_TypeId: DDN.mscorlib.DNObject;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DDN.mscorlib.DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property TypeId: DDN.mscorlib.DNObject read get_TypeId;
  end;

  TDNConcurrencyCheckAttribute = class(TDNGenericImport<DNConcurrencyCheckAttributeClass, DNConcurrencyCheckAttribute>) end;

  //-------------namespace: System.ComponentModel.DataAnnotations----------------
  DNDisplayAttributeClass = interface(DDN.mscorlib.DNAttributeClass)
  ['{9F961B36-EAFD-5CCC-A771-860B15A7190A}']
  { constructors } 

    ///<summary>Initializes a new instance of the <see cref="T:System.ComponentModel.DataAnnotations.DisplayAttribute" />
    ///  class.</summary>
    {class} function init: DNDisplayAttribute;

  end;

  ///<summary>Provides a general-purpose attribute that lets you specify localizable strings for types and members of entity partial classes.</summary>
  [DNTypeName('System.ComponentModel.DataAnnotations.DisplayAttribute')]
  DNDisplayAttribute = interface(DDN.mscorlib.DNAttribute)
  ['{C458178A-090C-3176-8897-A34E3D717B09}']
  { getters & setters } 

    function get_ShortName: string;
    procedure set_ShortName(value: string);
    function get_Name: string;
    procedure set_Name(value: string);
    function get_Description: string;
    procedure set_Description(value: string);
    function get_Prompt: string;
    procedure set_Prompt(value: string);
    function get_GroupName: string;
    procedure set_GroupName(value: string);
    function get_ResourceType: DDN.mscorlib.DNType;
    procedure set_ResourceType(value: DDN.mscorlib.DNType);
    function get_AutoGenerateField: Boolean;
    procedure set_AutoGenerateField(value: Boolean);
    function get_AutoGenerateFilter: Boolean;
    procedure set_AutoGenerateFilter(value: Boolean);
    function get_Order: Int32;
    procedure set_Order(value: Int32);
    function get_TypeId: DDN.mscorlib.DNObject;

  { methods } 

    ///<summary>Returns the value of the <see cref="P:System.ComponentModel.DataAnnotations.DisplayAttribute.ShortName" />
    ///  property.</summary>
    ///<returns>The localized string for the <see cref="P:System.ComponentModel.DataAnnotations.DisplayAttribute.ShortName" />
    ///  property if the <see cref="P:System.ComponentModel.DataAnnotations.DisplayAttribute.ResourceType" />
    ///  property has been specified and if the <see cref="P:System.ComponentModel.DataAnnotations.DisplayAttribute.ShortName" />
    ///  property represents a resource key; otherwise, the non-localized value of the <see cref="P:System.ComponentModel.DataAnnotations.DisplayAttribute.ShortName" />
    ///  value property.</returns>
    function GetShortName: string;
    ///<summary>Returns a value that is used for field display in the UI.</summary>
    ///<returns>The localized string for the <see cref="P:System.ComponentModel.DataAnnotations.DisplayAttribute.Name" />
    ///  property, if the <see cref="P:System.ComponentModel.DataAnnotations.DisplayAttribute.ResourceType" />
    ///  property has been specified and the <see cref="P:System.ComponentModel.DataAnnotations.DisplayAttribute.Name" />
    ///  property represents a resource key; otherwise, the non-localized value of the <see cref="P:System.ComponentModel.DataAnnotations.DisplayAttribute.Name" />
    ///  property.</returns>
    ///<exception cref="T:System.InvalidOperationException">The <see cref="P:System.ComponentModel.DataAnnotations.DisplayAttribute.ResourceType" />
    ///  property and the <see cref="P:System.ComponentModel.DataAnnotations.DisplayAttribute.Name" />
    ///  property are initialized, but a public static property that has a name that matches the <see cref="P:System.ComponentModel.DataAnnotations.DisplayAttribute.Name" />
    ///  value could not be found for the <see cref="P:System.ComponentModel.DataAnnotations.DisplayAttribute.ResourceType" />
    ///  property.</exception>
    function GetName: string;
    ///<summary>Returns the value of the <see cref="P:System.ComponentModel.DataAnnotations.DisplayAttribute.Description" />
    ///  property.</summary>
    ///<returns>The localized description, if the <see cref="P:System.ComponentModel.DataAnnotations.DisplayAttribute.ResourceType" />
    ///  has been specified and the <see cref="P:System.ComponentModel.DataAnnotations.DisplayAttribute.Description" />
    ///  property represents a resource key; otherwise, the non-localized value of the <see cref="P:System.ComponentModel.DataAnnotations.DisplayAttribute.Description" />
    ///  property.</returns>
    ///<exception cref="T:System.InvalidOperationException">The <see cref="P:System.ComponentModel.DataAnnotations.DisplayAttribute.ResourceType" />
    ///  property and the <see cref="P:System.ComponentModel.DataAnnotations.DisplayAttribute.Description" />
    ///  property are initialized, but a public static property that has a name that matches the <see cref="P:System.ComponentModel.DataAnnotations.DisplayAttribute.Description" />
    ///  value could not be found for the <see cref="P:System.ComponentModel.DataAnnotations.DisplayAttribute.ResourceType" />
    ///  property.</exception>
    function GetDescription: string;
    ///<summary>Returns the value of the <see cref="P:System.ComponentModel.DataAnnotations.DisplayAttribute.Prompt" />
    ///  property.</summary>
    ///<returns>Gets the localized string for the <see cref="P:System.ComponentModel.DataAnnotations.DisplayAttribute.Prompt" />
    ///  property if the <see cref="P:System.ComponentModel.DataAnnotations.DisplayAttribute.ResourceType" />
    ///  property has been specified and if the <see cref="P:System.ComponentModel.DataAnnotations.DisplayAttribute.Prompt" />
    ///  property represents a resource key; otherwise, the non-localized value of the <see cref="P:System.ComponentModel.DataAnnotations.DisplayAttribute.Prompt" />
    ///  property.</returns>
    function GetPrompt: string;
    ///<summary>Returns the value of the <see cref="P:System.ComponentModel.DataAnnotations.DisplayAttribute.GroupName" />
    ///  property.</summary>
    ///<returns>A value that will be used for grouping fields in the UI, if <see cref="P:System.ComponentModel.DataAnnotations.DisplayAttribute.GroupName" />
    ///  has been initialized; otherwise, <see langword="null" />
    ///  . If the <see cref="P:System.ComponentModel.DataAnnotations.DisplayAttribute.ResourceType" />
    ///  property has been specified and the <see cref="P:System.ComponentModel.DataAnnotations.DisplayAttribute.GroupName" />
    ///  property represents a resource key, a localized string is returned; otherwise, a non-localized string is returned.</returns>
    function GetGroupName: string;
    ///<summary>Returns the value of the <see cref="P:System.ComponentModel.DataAnnotations.DisplayAttribute.AutoGenerateField" />
    ///  property.</summary>
    ///<returns>The value of <see cref="P:System.ComponentModel.DataAnnotations.DisplayAttribute.AutoGenerateField" />
    ///  if the property has been initialized; otherwise, <see langword="null" />
    ///  .</returns>
    function GetAutoGenerateField: DDN.mscorlib.DNNullable<Boolean>;
    ///<summary>Returns a value that indicates whether UI should be generated automatically in order to display filtering for this field. </summary>
    ///<returns>The value of <see cref="P:System.ComponentModel.DataAnnotations.DisplayAttribute.AutoGenerateFilter" />
    ///  if the property has been initialized; otherwise, <see langword="null" />
    ///  .</returns>
    function GetAutoGenerateFilter: DDN.mscorlib.DNNullable<Boolean>;
    ///<summary>Returns the value of the <see cref="P:System.ComponentModel.DataAnnotations.DisplayAttribute.Order" />
    ///  property.</summary>
    ///<returns>The value of the <see cref="P:System.ComponentModel.DataAnnotations.DisplayAttribute.Order" />
    ///  property, if it has been set; otherwise, <see langword="null" />
    ///  .</returns>
    function GetOrder: DDN.mscorlib.DNNullable<Int32>;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DDN.mscorlib.DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>Gets or sets a value that is used for the grid column label.</summary>
    ///<returns>A value that is for the grid column label.</returns>
    property ShortName: string read get_ShortName write set_ShortName;
    ///<summary>Gets or sets a value that is used for display in the UI.</summary>
    ///<returns>A value that is used for display in the UI.</returns>
    property Name: string read get_Name write set_Name;
    ///<summary>Gets or sets a value that is used to display a description in the UI.</summary>
    ///<returns>The value that is used to display a description in the UI.</returns>
    property Description: string read get_Description write set_Description;
    ///<summary>Gets or sets a value that will be used to set the watermark for prompts in the UI.</summary>
    ///<returns>A value that will be used to display a watermark in the UI.</returns>
    property Prompt: string read get_Prompt write set_Prompt;
    ///<summary>Gets or sets a value that is used to group fields in the UI.</summary>
    ///<returns>A value that is used to group fields in the UI.</returns>
    property GroupName: string read get_GroupName write set_GroupName;
    ///<summary>Gets or sets the type that contains the resources for the <see cref="P:System.ComponentModel.DataAnnotations.DisplayAttribute.ShortName" />
    ///  , <see cref="P:System.ComponentModel.DataAnnotations.DisplayAttribute.Name" />
    ///  , <see cref="P:System.ComponentModel.DataAnnotations.DisplayAttribute.Prompt" />
    ///  , and <see cref="P:System.ComponentModel.DataAnnotations.DisplayAttribute.Description" />
    ///  properties.</summary>
    ///<returns>The type of the resource that contains the <see cref="P:System.ComponentModel.DataAnnotations.DisplayAttribute.ShortName" />
    ///  , <see cref="P:System.ComponentModel.DataAnnotations.DisplayAttribute.Name" />
    ///  , <see cref="P:System.ComponentModel.DataAnnotations.DisplayAttribute.Prompt" />
    ///  , and <see cref="P:System.ComponentModel.DataAnnotations.DisplayAttribute.Description" />
    ///  properties.</returns>
    property ResourceType: DDN.mscorlib.DNType read get_ResourceType write set_ResourceType;
    ///<summary>Gets or sets a value that indicates whether UI should be generated automatically in order to display this field.</summary>
    ///<returns><see langword="true" />
    ///  if UI should be generated automatically to display this field; otherwise, <see langword="false" />
    ///  .</returns>
    ///<exception cref="T:System.InvalidOperationException">An attempt was made to get the property value before it was set.</exception>
    property AutoGenerateField: Boolean read get_AutoGenerateField write set_AutoGenerateField;
    ///<summary>Gets or sets a value that indicates whether filtering UI is automatically displayed for this field. </summary>
    ///<returns><see langword="true" />
    ///  if UI should be generated automatically to display filtering for this field; otherwise, <see langword="false" />
    ///  .</returns>
    ///<exception cref="T:System.InvalidOperationException">An attempt was made to get the property value before it was set.</exception>
    property AutoGenerateFilter: Boolean read get_AutoGenerateFilter write set_AutoGenerateFilter;
    ///<summary>Gets or sets the order weight of the column.</summary>
    ///<returns>The order weight of the column.</returns>
    property Order: Int32 read get_Order write set_Order;
    property TypeId: DDN.mscorlib.DNObject read get_TypeId;
  end;

  TDNDisplayAttribute = class(TDNGenericImport<DNDisplayAttributeClass, DNDisplayAttribute>) end;

  //-------------namespace: System.ComponentModel.DataAnnotations----------------
  DNDisplayColumnAttributeClass = interface(DDN.mscorlib.DNAttributeClass)
  ['{A82CAC57-8BC6-5261-95E7-4C1C1275C67C}']
  { constructors } 

    ///<summary>Initializes a new instance of the <see cref="T:System.ComponentModel.DataAnnotations.DisplayColumnAttribute" />
    ///  class by using the specified column. </summary>
    ///  <param name="displayColumn">The name of the column to use as the display column.</param>
    {class} function init(displayColumn: string): DNDisplayColumnAttribute; overload;
    ///<summary>Initializes a new instance of the <see cref="T:System.ComponentModel.DataAnnotations.DisplayColumnAttribute" />
    ///  class by using the specified display and sort columns. </summary>
    ///  <param name="displayColumn">The name of the column to use as the display column.</param>
    ///  <param name="sortColumn">The name of the column to use for sorting.</param>
    {class} function init(displayColumn: string; sortColumn: string): DNDisplayColumnAttribute; overload;
    ///<summary>Initializes a new instance of the <see cref="T:System.ComponentModel.DataAnnotations.DisplayColumnAttribute" />
    ///  class by using the specified display column, and the specified sort column and sort order. </summary>
    ///  <param name="displayColumn">The name of the column to use as the display column.</param>
    ///  <param name="sortColumn">The name of the column to use for sorting.</param>
    ///  <param name="sortDescending"><see langword="true" />
    ///  to sort in descending order; otherwise, <see langword="false" />
    ///  . The default is <see langword="false" />
    ///  .</param>
    {class} function init(displayColumn: string; sortColumn: string; sortDescending: Boolean): DNDisplayColumnAttribute; overload;

  end;

  ///<summary>Specifies the column that is displayed in the referred table as a foreign-key column.</summary>
  [DNTypeName('System.ComponentModel.DataAnnotations.DisplayColumnAttribute')]
  DNDisplayColumnAttribute = interface(DDN.mscorlib.DNAttribute)
  ['{96567ADC-2AD8-3CFB-97A2-0BD44DA477B2}']
  { getters & setters } 

    function get_DisplayColumn: string;
    function get_SortColumn: string;
    function get_SortDescending: Boolean;
    function get_TypeId: DDN.mscorlib.DNObject;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DDN.mscorlib.DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>Gets the name of the column to use as the display field.</summary>
    ///<returns>The name of the display column.</returns>
    property DisplayColumn: string read get_DisplayColumn;
    ///<summary>Gets the name of the column to use for sorting.</summary>
    ///<returns>The name of the sort column.</returns>
    property SortColumn: string read get_SortColumn;
    ///<summary>Gets a value that indicates whether to sort in descending or ascending order.</summary>
    ///<returns><see langword="true" />
    ///  if the column will be sorted in descending order; otherwise, <see langword="false" />
    ///  .</returns>
    property SortDescending: Boolean read get_SortDescending;
    property TypeId: DDN.mscorlib.DNObject read get_TypeId;
  end;

  TDNDisplayColumnAttribute = class(TDNGenericImport<DNDisplayColumnAttributeClass, DNDisplayColumnAttribute>) end;

  //-------------namespace: System.ComponentModel.DataAnnotations----------------
  DNDisplayFormatAttributeClass = interface(DDN.mscorlib.DNAttributeClass)
  ['{FC6A5CC2-C93D-59D0-A805-7B07028CCBE1}']
  { constructors } 

    ///<summary>Initializes a new instance of the <see cref="T:System.ComponentModel.DataAnnotations.DisplayFormatAttribute" />
    ///  class. </summary>
    {class} function init: DNDisplayFormatAttribute;

  end;

  ///<summary>Specifies how data fields are displayed and formatted by ASP.NET Dynamic Data.</summary>
  [DNTypeName('System.ComponentModel.DataAnnotations.DisplayFormatAttribute')]
  DNDisplayFormatAttribute = interface(DDN.mscorlib.DNAttribute)
  ['{0AA2ECF9-934A-34C5-94C8-221700D2D0F0}']
  { getters & setters } 

    function get_DataFormatString: string;
    procedure set_DataFormatString(value: string);
    function get_NullDisplayText: string;
    procedure set_NullDisplayText(value: string);
    function get_ConvertEmptyStringToNull: Boolean;
    procedure set_ConvertEmptyStringToNull(value: Boolean);
    function get_ApplyFormatInEditMode: Boolean;
    procedure set_ApplyFormatInEditMode(value: Boolean);
    function get_HtmlEncode: Boolean;
    procedure set_HtmlEncode(value: Boolean);
    function get_TypeId: DDN.mscorlib.DNObject;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DDN.mscorlib.DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>Gets or sets the display format for the field value.</summary>
    ///<returns>A formatting string that specifies the display format for the value of the data field. The default is an empty string (""), which indicates that no special formatting is applied to the field value.</returns>
    property DataFormatString: string read get_DataFormatString write set_DataFormatString;
    ///<summary>Gets or sets the text that is displayed for a field when the field's value is <see langword="null" />
    ///  .</summary>
    ///<returns>The text that is displayed for a field when the field's value is <see langword="null" />
    ///  . The default is an empty string (""), which indicates that this property is not set.</returns>
    property NullDisplayText: string read get_NullDisplayText write set_NullDisplayText;
    ///<summary>Gets or sets a value that indicates whether empty string values ("") are automatically converted to <see langword="null" />
    ///  when the data field is updated in the data source.</summary>
    ///<returns><see langword="true" />
    ///  if empty string values are automatically converted to <see langword="null" />
    ///  ; otherwise, <see langword="false" />
    ///  . The default is <see langword="true" />
    ///  .</returns>
    property ConvertEmptyStringToNull: Boolean read get_ConvertEmptyStringToNull write set_ConvertEmptyStringToNull;
    ///<summary>Gets or sets a value that indicates whether the formatting string that is specified by the <see cref="P:System.ComponentModel.DataAnnotations.DisplayFormatAttribute.DataFormatString" />
    ///  property is applied to the field value when the data field is in edit mode.</summary>
    ///<returns><see langword="true" />
    ///  if the formatting string applies to the field value in edit mode; otherwise, <see langword="false" />
    ///  . The default is <see langword="false" />
    ///  .</returns>
    property ApplyFormatInEditMode: Boolean read get_ApplyFormatInEditMode write set_ApplyFormatInEditMode;
    ///<summary>Gets or sets a value that indicates whether the field should be HTML-encoded.</summary>
    ///<returns><see langword="true" />
    ///  if the field should be HTML-encoded; otherwise, <see langword="false" />
    ///  .</returns>
    property HtmlEncode: Boolean read get_HtmlEncode write set_HtmlEncode;
    property TypeId: DDN.mscorlib.DNObject read get_TypeId;
  end;

  TDNDisplayFormatAttribute = class(TDNGenericImport<DNDisplayFormatAttributeClass, DNDisplayFormatAttribute>) end;

  //-------------namespace: System.ComponentModel.DataAnnotations----------------
  DNEditableAttributeClass = interface(DDN.mscorlib.DNAttributeClass)
  ['{A3AF6857-FC3A-57FA-A79B-2ABEC1442135}']
  { constructors } 

    ///<summary>Initializes a new instance of the <see cref="T:System.ComponentModel.DataAnnotations.EditableAttribute" />
    ///  class.</summary>
    ///  <param name="allowEdit"><see langword="true" />
    ///  to specify that field is editable; otherwise, <see langword="false" />
    ///  .</param>
    {class} function init(allowEdit: Boolean): DNEditableAttribute;

  end;

  ///<summary>Indicates whether a data field is editable.</summary>
  [DNTypeName('System.ComponentModel.DataAnnotations.EditableAttribute')]
  DNEditableAttribute = interface(DDN.mscorlib.DNAttribute)
  ['{01BC5DE8-604A-3101-B6B8-F4881965ED57}']
  { getters & setters } 

    function get_AllowEdit: Boolean;
    function get_AllowInitialValue: Boolean;
    procedure set_AllowInitialValue(value: Boolean);
    function get_TypeId: DDN.mscorlib.DNObject;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DDN.mscorlib.DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>Gets a value that indicates whether a field is editable.</summary>
    ///<returns><see langword="true" />
    ///  if the field is editable; otherwise, <see langword="false" />
    ///  .</returns>
    property AllowEdit: Boolean read get_AllowEdit;
    ///<summary>Gets or sets a value that indicates whether an initial value is enabled.</summary>
    ///<returns><see langword="true " />
    ///  if an initial value is enabled; otherwise, <see langword="false" />
    ///  .</returns>
    property AllowInitialValue: Boolean read get_AllowInitialValue write set_AllowInitialValue;
    property TypeId: DDN.mscorlib.DNObject read get_TypeId;
  end;

  TDNEditableAttribute = class(TDNGenericImport<DNEditableAttributeClass, DNEditableAttribute>) end;

  //-------------namespace: System.ComponentModel.DataAnnotations----------------
  DNFilterUIHintAttributeClass = interface(DDN.mscorlib.DNAttributeClass)
  ['{852CBF73-3688-5FCB-A32C-2F7F4E339660}']
  { constructors } 

    ///<summary>Initializes a new instance of the <see cref="T:System.ComponentModel.DataAnnotations.FilterUIHintAttribute" />
    ///  class by using the filter UI hint.</summary>
    ///  <param name="filterUIHint">The name of the control to use for filtering.</param>
    {class} function init(filterUIHint: string): DNFilterUIHintAttribute; overload;
    ///<summary>Initializes a new instance of the <see cref="T:System.ComponentModel.DataAnnotations.FilterUIHintAttribute" />
    ///  class by using the filter UI hint and presentation layer name.</summary>
    ///  <param name="filterUIHint">The name of the control to use for filtering.</param>
    ///  <param name="presentationLayer">The name of the presentation layer that supports this control.</param>
    {class} function init(filterUIHint: string; presentationLayer: string): DNFilterUIHintAttribute; overload;
    ///<summary>Initializes a new instance of the <see cref="T:System.ComponentModel.DataAnnotations.FilterUIHintAttribute" />
    ///  class by using the filter UI hint, presentation layer name, and control parameters.</summary>
    ///  <param name="filterUIHint">The name of the control to use for filtering.</param>
    ///  <param name="presentationLayer">The name of the presentation layer that supports this control.</param>
    ///  <param name="controlParameters">The list of parameters for the control.</param>
    {class} function init(filterUIHint: string; presentationLayer: string; controlParameters: TArray<DDN.mscorlib.DNObject>): DNFilterUIHintAttribute; overload;

  end;

  ///<summary>Represents an attribute that is used to specify the filtering behavior for a column.</summary>
  [DNTypeName('System.ComponentModel.DataAnnotations.FilterUIHintAttribute')]
  DNFilterUIHintAttribute = interface(DDN.mscorlib.DNAttribute)
  ['{336C6A0B-F27B-33F8-A98B-E109842FFA07}']
  { getters & setters } 

    function get_FilterUIHint: string;
    function get_PresentationLayer: string;
    function get_ControlParameters: DDN.mscorlib.DNIDictionary<string, DDN.mscorlib.DNObject>;
    function get_TypeId: DDN.mscorlib.DNObject;

  { methods } 

    ///<summary>Returns the hash code for this attribute instance.</summary>
    ///<returns>This attribute insatnce hash code.</returns>
    function GetHashCode: Int32;
    ///<summary>Returns a value that indicates whether this attribute instance is equal to a specified object.</summary>
    ///  <param name="obj">The object to compare with this attribute instance.</param>
    ///<returns><see langword="True" />
    ///  if the passed object is equal to this attribute instance; otherwise, <see langword="false" />
    ///  .</returns>
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function Match(obj: DDN.mscorlib.DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>Gets the name of the control to use for filtering.</summary>
    ///<returns>The name of the control to use for filtering.</returns>
    property FilterUIHint: string read get_FilterUIHint;
    ///<summary>Gets the name of the presentation layer that supports this control.</summary>
    ///<returns>The name of the presentation layer that supports this control.</returns>
    property PresentationLayer: string read get_PresentationLayer;
    ///<summary>Gets the name/value pairs that are used as parameters in the control's constructor.</summary>
    ///<returns>The name/value pairs that are used as parameters in the control's constructor.</returns>
    property ControlParameters: DDN.mscorlib.DNIDictionary<string, DDN.mscorlib.DNObject> read get_ControlParameters;
    ///<summary>Returns the unique identifier for this attribute instance.</summary>
    ///<returns>This attribuet instance unique identifier.</returns>
    property TypeId: DDN.mscorlib.DNObject read get_TypeId;
  end;

  TDNFilterUIHintAttribute = class(TDNGenericImport<DNFilterUIHintAttributeClass, DNFilterUIHintAttribute>) end;

  //-------------namespace: System.ComponentModel.DataAnnotations----------------
  DNKeyAttributeClass = interface(DDN.mscorlib.DNAttributeClass)
  ['{46B4D56D-D3F3-5FD9-BC50-97015B50D587}']
  { constructors } 

    ///<summary>Initializes a new instance of the <see cref="T:System.ComponentModel.DataAnnotations.KeyAttribute" />
    ///  class.</summary>
    {class} function init: DNKeyAttribute;

  end;

  ///<summary>Denotes one or more properties that uniquely identify an entity.</summary>
  [DNTypeName('System.ComponentModel.DataAnnotations.KeyAttribute')]
  DNKeyAttribute = interface(DDN.mscorlib.DNAttribute)
  ['{C1CEDDC4-1548-3C26-B2FD-51621AA6709A}']
  { getters & setters } 

    function get_TypeId: DDN.mscorlib.DNObject;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DDN.mscorlib.DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property TypeId: DDN.mscorlib.DNObject read get_TypeId;
  end;

  TDNKeyAttribute = class(TDNGenericImport<DNKeyAttributeClass, DNKeyAttribute>) end;

  //-------------namespace: System.ComponentModel.DataAnnotations----------------
  DNMetadataTypeAttributeClass = interface(DDN.mscorlib.DNAttributeClass)
  ['{16E3251E-7E4A-53B8-A47C-A278B32CE3CD}']
  { constructors } 

    ///<summary>Initializes a new instance of the <see cref="T:System.ComponentModel.DataAnnotations.MetadataTypeAttribute" />
    ///  class.</summary>
    ///  <param name="metadataClassType">The metadata class to reference.</param>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="metadataClassType" />
    ///  is <see langword="null" />
    ///  . </exception>
    {class} function init(metadataClassType: DDN.mscorlib.DNType): DNMetadataTypeAttribute;

  end;

  ///<summary>Specifies the metadata class to associate with a data model class.</summary>
  [DNTypeName('System.ComponentModel.DataAnnotations.MetadataTypeAttribute')]
  DNMetadataTypeAttribute = interface(DDN.mscorlib.DNAttribute)
  ['{BA47AD81-FE14-3098-B874-A1C02D66BE87}']
  { getters & setters } 

    function get_MetadataClassType: DDN.mscorlib.DNType;
    function get_TypeId: DDN.mscorlib.DNObject;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DDN.mscorlib.DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>Gets the metadata class that is associated with a data-model partial class.</summary>
    ///<returns>The type value that represents the metadata class.</returns>
    property MetadataClassType: DDN.mscorlib.DNType read get_MetadataClassType;
    property TypeId: DDN.mscorlib.DNObject read get_TypeId;
  end;

  TDNMetadataTypeAttribute = class(TDNGenericImport<DNMetadataTypeAttributeClass, DNMetadataTypeAttribute>) end;

  //-------------namespace: System.ComponentModel.DataAnnotations----------------
  DNScaffoldColumnAttributeClass = interface(DDN.mscorlib.DNAttributeClass)
  ['{4EF8E8F5-C7D4-5852-9135-63CD1DD28A2E}']
  { constructors } 

    ///<summary>Initializes a new instance of <see cref="T:System.ComponentModel.DataAnnotations.ScaffoldColumnAttribute" />
    ///  using the <see cref="P:System.ComponentModel.DataAnnotations.ScaffoldColumnAttribute.Scaffold" />
    ///  property.</summary>
    ///  <param name="scaffold">The value that specifies whether scaffolding is enabled.</param>
    {class} function init(scaffold: Boolean): DNScaffoldColumnAttribute;

  end;

  ///<summary>Specifies whether a class or data column uses scaffolding.</summary>
  [DNTypeName('System.ComponentModel.DataAnnotations.ScaffoldColumnAttribute')]
  DNScaffoldColumnAttribute = interface(DDN.mscorlib.DNAttribute)
  ['{6BE1DF74-31E9-38BD-BF02-5CA97295F182}']
  { getters & setters } 

    function get_Scaffold: Boolean;
    function get_TypeId: DDN.mscorlib.DNObject;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DDN.mscorlib.DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>Gets or sets the value that specifies whether scaffolding is enabled.</summary>
    ///<returns><see langword="true" />
    ///  , if scaffolding is enabled; otherwise <see langword="false" />
    ///  .</returns>
    property Scaffold: Boolean read get_Scaffold;
    property TypeId: DDN.mscorlib.DNObject read get_TypeId;
  end;

  TDNScaffoldColumnAttribute = class(TDNGenericImport<DNScaffoldColumnAttributeClass, DNScaffoldColumnAttribute>) end;

  //-------------namespace: System.ComponentModel.DataAnnotations----------------
  DNScaffoldTableAttributeClass = interface(DDN.mscorlib.DNAttributeClass)
  ['{9878C6BB-139B-5D63-A63C-7E0CB0CB3061}']
  { constructors } 

    ///<summary>Initializes a new instance of <see cref="T:System.ComponentModel.DataAnnotations.ScaffoldTableAttribute" />
    ///  using the <see cref="P:System.ComponentModel.DataAnnotations.ScaffoldTableAttribute.Scaffold" />
    ///  property.</summary>
    ///  <param name="scaffold">The value that specifies whether scaffolding is enabled.</param>
    {class} function init(scaffold: Boolean): DNScaffoldTableAttribute;

  end;

  ///<summary>Specifies whether a class or data table uses scaffolding.</summary>
  [DNTypeName('System.ComponentModel.DataAnnotations.ScaffoldTableAttribute')]
  DNScaffoldTableAttribute = interface(DDN.mscorlib.DNAttribute)
  ['{8DC703B7-9C77-37EC-BE43-A1C21A6BC9B5}']
  { getters & setters } 

    function get_Scaffold: Boolean;
    function get_TypeId: DDN.mscorlib.DNObject;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DDN.mscorlib.DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>Gets or sets the value that specifies whether scaffolding is enabled.</summary>
    ///<returns><see langword="true" />
    ///  , if scaffolding is enabled; otherwise <see langword="false" />
    ///  .</returns>
    property Scaffold: Boolean read get_Scaffold;
    property TypeId: DDN.mscorlib.DNObject read get_TypeId;
  end;

  TDNScaffoldTableAttribute = class(TDNGenericImport<DNScaffoldTableAttributeClass, DNScaffoldTableAttribute>) end;

  //-------------namespace: System.ComponentModel.DataAnnotations.Schema----------------
  DNColumnAttributeClass = interface(DDN.mscorlib.DNAttributeClass)
  ['{87D5B0F7-D18E-52FD-A8C8-3B1BC819C7AF}']
  { constructors } 

    ///<summary>Initializes a new instance of the <see cref="T:System.ComponentModel.DataAnnotations.Schema.ColumnAttribute" />
    ///  class.</summary>
    {class} function init: DNColumnAttribute; overload;
    ///<summary>Initializes a new instance of the <see cref="T:System.ComponentModel.DataAnnotations.Schema.ColumnAttribute" />
    ///  class.</summary>
    ///  <param name="name">The name of the column the property is mapped to.</param>
    {class} function init(name: string): DNColumnAttribute; overload;

  end;

  ///<summary>Represents the database column that a property is mapped to.</summary>
  [DNTypeName('System.ComponentModel.DataAnnotations.Schema.ColumnAttribute')]
  DNColumnAttribute = interface(DDN.mscorlib.DNAttribute)
  ['{48D30EB7-F488-3FC0-BED8-E459BFDB98FC}']
  { getters & setters } 

    function get_Name: string;
    function get_Order: Int32;
    procedure set_Order(value: Int32);
    function get_TypeName: string;
    procedure set_TypeName(value: string);
    function get_TypeId: DDN.mscorlib.DNObject;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DDN.mscorlib.DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>Gets the name of the column the property is mapped to.</summary>
    ///<returns>The name of the column the property is mapped to.</returns>
    property Name: string read get_Name;
    ///<summary>Gets or sets the zero-based order of the column the property is mapped to.</summary>
    ///<returns>The order of the column.</returns>
    property Order: Int32 read get_Order write set_Order;
    ///<summary>Gets or sets the database provider specific data type of the column the property is mapped to.</summary>
    ///<returns>The database provider specific data type of the column the property is mapped to.</returns>
    property TypeName: string read get_TypeName write set_TypeName;
    property TypeId: DDN.mscorlib.DNObject read get_TypeId;
  end;

  TDNColumnAttribute = class(TDNGenericImport<DNColumnAttributeClass, DNColumnAttribute>) end;

  //-------------namespace: System.ComponentModel.DataAnnotations.Schema----------------
  DNComplexTypeAttributeClass = interface(DDN.mscorlib.DNAttributeClass)
  ['{8993006F-1FDA-5A53-AB1D-45887D46E65C}']
  { constructors } 

    ///<summary>Initializes a new instance of the <see cref="T:System.ComponentModel.DataAnnotations.Schema.ComplexTypeAttribute" />
    ///  class.</summary>
    {class} function init: DNComplexTypeAttribute;

  end;

  ///<summary>Denotes that the class is a complex type. Complex types are non-scalar properties of entity types that enable scalar properties to be organized within entities. Complex types do not have keys and cannot be managed by the Entity Framework apart from the parent object.</summary>
  [DNTypeName('System.ComponentModel.DataAnnotations.Schema.ComplexTypeAttribute')]
  DNComplexTypeAttribute = interface(DDN.mscorlib.DNAttribute)
  ['{9CD25314-21C7-3794-820B-5BF6AFBC520B}']
  { getters & setters } 

    function get_TypeId: DDN.mscorlib.DNObject;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DDN.mscorlib.DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property TypeId: DDN.mscorlib.DNObject read get_TypeId;
  end;

  TDNComplexTypeAttribute = class(TDNGenericImport<DNComplexTypeAttributeClass, DNComplexTypeAttribute>) end;

  //-------------namespace: System.ComponentModel.DataAnnotations.Schema----------------
  DNDatabaseGeneratedAttributeClass = interface(DDN.mscorlib.DNAttributeClass)
  ['{71BEF30A-41C3-53AB-80AD-6F00D88ABCC2}']
  { constructors } 

    ///<summary>Initializes a new instance of the <see cref="T:System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedAttribute" />
    ///  class.</summary>
    ///  <param name="databaseGeneratedOption">The database generated option.</param>
    {class} function init(databaseGeneratedOption: DNDatabaseGeneratedOption): DNDatabaseGeneratedAttribute;

  end;

  ///<summary>Specifies how the database generates values for a property.</summary>
  [DNTypeName('System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedAttribute')]
  DNDatabaseGeneratedAttribute = interface(DDN.mscorlib.DNAttribute)
  ['{81C27FA6-AE95-3E0C-AD60-3C965BC9064D}']
  { getters & setters } 

    function get_DatabaseGeneratedOption: DNDatabaseGeneratedOption;
    function get_TypeId: DDN.mscorlib.DNObject;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DDN.mscorlib.DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>Gets or sets the pattern used to generate values for the property in the database.</summary>
    ///<returns>The database generated option.</returns>
    property DatabaseGeneratedOption: DNDatabaseGeneratedOption read get_DatabaseGeneratedOption;
    property TypeId: DDN.mscorlib.DNObject read get_TypeId;
  end;

  TDNDatabaseGeneratedAttribute = class(TDNGenericImport<DNDatabaseGeneratedAttributeClass, DNDatabaseGeneratedAttribute>) end;

  //-------------namespace: System.ComponentModel.DataAnnotations.Schema----------------
  DNForeignKeyAttributeClass = interface(DDN.mscorlib.DNAttributeClass)
  ['{81E42CF8-D0F0-5956-8607-F62FFF7983F6}']
  { constructors } 

    ///<summary>Initializes a new instance of the <see cref="T:System.ComponentModel.DataAnnotations.Schema.ForeignKeyAttribute" />
    ///  class.</summary>
    ///  <param name="name">If you add the ForeigKey attribute to a foreign key property, you should specify the name of the associated navigation property. If you add the ForeigKey attribute to a navigation property, you should specify the name of the associated foreign key(s). If a navigation property has multiple foreign keys, use comma to separate the list of foreign key names. For more information, see Code First Data Annotations.  </param>
    {class} function init(name: string): DNForeignKeyAttribute;

  end;

  ///<summary>Denotes a property used as a foreign key in a relationship. The annotation may be placed on the foreign key property and specify the associated navigation property name, or placed on a navigation property and specify the associated foreign key name.</summary>
  [DNTypeName('System.ComponentModel.DataAnnotations.Schema.ForeignKeyAttribute')]
  DNForeignKeyAttribute = interface(DDN.mscorlib.DNAttribute)
  ['{1A013D1B-AF84-349C-8698-89C6C06FC1D1}']
  { getters & setters } 

    function get_Name: string;
    function get_TypeId: DDN.mscorlib.DNObject;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DDN.mscorlib.DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>If you add the ForeigKey attribute to a foreign key property, you should specify the name of the associated navigation property. If you add the ForeigKey attribute to a navigation property, you should specify the name of the associated foreign key(s). If a navigation property has multiple foreign keys, use comma to separate the list of foreign key names. For more information, see Code First Data Annotations.  </summary>
    ///<returns>The name of the associated navigation property or the associated foreign key property.</returns>
    property Name: string read get_Name;
    property TypeId: DDN.mscorlib.DNObject read get_TypeId;
  end;

  TDNForeignKeyAttribute = class(TDNGenericImport<DNForeignKeyAttributeClass, DNForeignKeyAttribute>) end;

  //-------------namespace: System.ComponentModel.DataAnnotations.Schema----------------
  DNInversePropertyAttributeClass = interface(DDN.mscorlib.DNAttributeClass)
  ['{7C500502-6F62-5284-930D-C80C09C56160}']
  { constructors } 

    ///<summary>Initializes a new instance of the <see cref="T:System.ComponentModel.DataAnnotations.Schema.InversePropertyAttribute" />
    ///  class using the specified property.</summary>
    ///  <param name="property">The navigation property representing the other end of the same relationship.</param>
    {class} function init(&property: string): DNInversePropertyAttribute;

  end;

  ///<summary>Specifies the inverse of a navigation property that represents the other end of the same relationship.</summary>
  [DNTypeName('System.ComponentModel.DataAnnotations.Schema.InversePropertyAttribute')]
  DNInversePropertyAttribute = interface(DDN.mscorlib.DNAttribute)
  ['{A1087EB9-2CB5-30E8-93B3-7609218C43F4}']
  { getters & setters } 

    function get_Property: string;
    function get_TypeId: DDN.mscorlib.DNObject;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DDN.mscorlib.DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>Gets the navigation property representing the other end of the same relationship.</summary>
    ///<returns>The property of the attribute.</returns>
    property &Property: string read get_Property;
    property TypeId: DDN.mscorlib.DNObject read get_TypeId;
  end;

  TDNInversePropertyAttribute = class(TDNGenericImport<DNInversePropertyAttributeClass, DNInversePropertyAttribute>) end;

  //-------------namespace: System.ComponentModel.DataAnnotations.Schema----------------
  DNNotMappedAttributeClass = interface(DDN.mscorlib.DNAttributeClass)
  ['{62929748-5467-5938-8487-5B63EDE09D50}']
  { constructors } 

    ///<summary>Initializes a new instance of the <see cref="T:System.ComponentModel.DataAnnotations.Schema.NotMappedAttribute" />
    ///  class.</summary>
    {class} function init: DNNotMappedAttribute;

  end;

  ///<summary>Denotes that a property or class should be excluded from database mapping.</summary>
  [DNTypeName('System.ComponentModel.DataAnnotations.Schema.NotMappedAttribute')]
  DNNotMappedAttribute = interface(DDN.mscorlib.DNAttribute)
  ['{359CFFD0-8FC3-3825-B578-80A1516A1730}']
  { getters & setters } 

    function get_TypeId: DDN.mscorlib.DNObject;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DDN.mscorlib.DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property TypeId: DDN.mscorlib.DNObject read get_TypeId;
  end;

  TDNNotMappedAttribute = class(TDNGenericImport<DNNotMappedAttributeClass, DNNotMappedAttribute>) end;

  //-------------namespace: System.ComponentModel.DataAnnotations.Schema----------------
  DNTableAttributeClass = interface(DDN.mscorlib.DNAttributeClass)
  ['{D945F621-69D0-538D-A795-AAE683F6266F}']
  { constructors } 

    ///<summary>Initializes a new instance of the <see cref="T:System.ComponentModel.DataAnnotations.Schema.TableAttribute" />
    ///  class using the specified name of the table.</summary>
    ///  <param name="name">The name of the table the class is mapped to.</param>
    {class} function init(name: string): DNTableAttribute;

  end;

  ///<summary>Specifies the database table that a class is mapped to.</summary>
  [DNTypeName('System.ComponentModel.DataAnnotations.Schema.TableAttribute')]
  DNTableAttribute = interface(DDN.mscorlib.DNAttribute)
  ['{A627724F-A76F-3E6E-963E-8460AEF4870B}']
  { getters & setters } 

    function get_Name: string;
    function get_Schema: string;
    procedure set_Schema(value: string);
    function get_TypeId: DDN.mscorlib.DNObject;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DDN.mscorlib.DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>Gets the name of the table the class is mapped to.</summary>
    ///<returns>The name of the table the class is mapped to.</returns>
    property Name: string read get_Name;
    ///<summary>Gets or sets the schema of the table the class is mapped to.</summary>
    ///<returns>The schema of the table the class is mapped to.</returns>
    property Schema: string read get_Schema write set_Schema;
    property TypeId: DDN.mscorlib.DNObject read get_TypeId;
  end;

  TDNTableAttribute = class(TDNGenericImport<DNTableAttributeClass, DNTableAttribute>) end;

  //-------------namespace: System.ComponentModel.DataAnnotations----------------
  DNTimestampAttributeClass = interface(DDN.mscorlib.DNAttributeClass)
  ['{8A7E743C-227A-5211-91E3-76E1F968B68C}']
  { constructors } 

    ///<summary>Initializes a new instance of the <see cref="T:System.ComponentModel.DataAnnotations.TimestampAttribute" />
    ///  class.</summary>
    {class} function init: DNTimestampAttribute;

  end;

  ///<summary>Specifies the data type of the column as a row version.</summary>
  [DNTypeName('System.ComponentModel.DataAnnotations.TimestampAttribute')]
  DNTimestampAttribute = interface(DDN.mscorlib.DNAttribute)
  ['{51F4048A-A3EF-3F85-A795-EF2C00329DF4}']
  { getters & setters } 

    function get_TypeId: DDN.mscorlib.DNObject;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DDN.mscorlib.DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property TypeId: DDN.mscorlib.DNObject read get_TypeId;
  end;

  TDNTimestampAttribute = class(TDNGenericImport<DNTimestampAttributeClass, DNTimestampAttribute>) end;

  //-------------namespace: System.ComponentModel.DataAnnotations----------------
  DNUIHintAttributeClass = interface(DDN.mscorlib.DNAttributeClass)
  ['{048594A7-87D3-5C5B-9BAD-1AB300F00991}']
  { constructors } 

    ///<summary>Initializes a new instance of the <see cref="T:System.ComponentModel.DataAnnotations.UIHintAttribute" />
    ///  class by using a specified user control. </summary>
    ///  <param name="uiHint">The user control to use to display the data field. </param>
    {class} function init(uiHint: string): DNUIHintAttribute; overload;
    ///<summary>Initializes a new instance of the <see cref="T:System.ComponentModel.DataAnnotations.UIHintAttribute" />
    ///  class using the specified user control and specified presentation layer. </summary>
    ///  <param name="uiHint">The user control (field template) to use to display the data field.</param>
    ///  <param name="presentationLayer">The presentation layer that uses the class. Can be set to "HTML", "Silverlight", "WPF", or "WinForms".</param>
    {class} function init(uiHint: string; presentationLayer: string): DNUIHintAttribute; overload;
    ///<summary>Initializes a new instance of the <see cref="T:System.ComponentModel.DataAnnotations.UIHintAttribute" />
    ///  class by using the specified user control, presentation layer, and control parameters.</summary>
    ///  <param name="uiHint">The user control (field template) to use to display the data field.</param>
    ///  <param name="presentationLayer">The presentation layer that uses the class. Can be set to "HTML", "Silverlight", "WPF", or "WinForms".</param>
    ///  <param name="controlParameters">The object to use to retrieve values from any data sources. </param>
    ///<exception cref="T:System.ArgumentException"><see cref="P:System.ComponentModel.DataAnnotations.UIHintAttribute.ControlParameters" />
    ///  is <see langword="null" />
    ///  or it is a constraint key.-or-The value of <see cref="P:System.ComponentModel.DataAnnotations.UIHintAttribute.ControlParameters" />
    ///  is not a string. </exception>
    {class} function init(uiHint: string; presentationLayer: string; controlParameters: TArray<DDN.mscorlib.DNObject>): DNUIHintAttribute; overload;

  end;

  ///<summary>Specifies the template or user control that Dynamic Data uses to display a data field. </summary>
  [DNTypeName('System.ComponentModel.DataAnnotations.UIHintAttribute')]
  DNUIHintAttribute = interface(DDN.mscorlib.DNAttribute)
  ['{5DF4FAFB-5CAF-3BC5-A497-9A6E30CB9FF9}']
  { getters & setters } 

    function get_UIHint: string;
    function get_PresentationLayer: string;
    function get_ControlParameters: DDN.mscorlib.DNIDictionary<string, DDN.mscorlib.DNObject>;
    function get_TypeId: DDN.mscorlib.DNObject;

  { methods } 

    ///<summary>Gets the hash code for the current instance of the attribute.</summary>
    ///<returns>The attribute instance hash code.</returns>
    function GetHashCode: Int32;
    ///<summary>Gets a value that indicates whether this instance is equal to the specified object.</summary>
    ///  <param name="obj">The object to compare with this instance, or a <see langword="null" />
    ///  reference.</param>
    ///<returns><see langword="true" />
    ///  if the specified object is equal to this instance; otherwise, <see langword="false" />
    ///  .</returns>
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function Match(obj: DDN.mscorlib.DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>Gets or sets the name of the field template to use to display the data field.</summary>
    ///<returns>The name of the field template that displays the data field.</returns>
    property UIHint: string read get_UIHint;
    ///<summary>Gets or sets the presentation layer that uses the <see cref="T:System.ComponentModel.DataAnnotations.UIHintAttribute" />
    ///  class. </summary>
    ///<returns>The presentation layer that is used by this class.</returns>
    property PresentationLayer: string read get_PresentationLayer;
    ///<summary>Gets or sets the <see cref="T:System.Web.DynamicData.DynamicControlParameter" />
    ///  object to use to retrieve values from any data source.</summary>
    ///<returns>A collection of key/value pairs. </returns>
    property ControlParameters: DDN.mscorlib.DNIDictionary<string, DDN.mscorlib.DNObject> read get_ControlParameters;
    ///<summary>Gets the unique identifier for the attribute.</summary>
    ///<returns>The unique identifier for the attribute.</returns>
    property TypeId: DDN.mscorlib.DNObject read get_TypeId;
  end;

  TDNUIHintAttribute = class(TDNGenericImport<DNUIHintAttributeClass, DNUIHintAttribute>) end;

  //-------------namespace: System.ComponentModel.DataAnnotations----------------
  DNValidationAttributeClass = interface(DDN.mscorlib.DNAttributeClass)
  ['{9D55B972-D8FC-560F-B1CE-5790ACA24E5A}']
  end;

  ///<summary>Serves as the base class for all validation attributes.</summary>
  ///<exception cref="T:System.ComponentModel.DataAnnotations.ValidationException">The <see cref="P:System.ComponentModel.DataAnnotations.ValidationAttribute.ErrorMessageResourceType" />
  ///  and <see cref="P:System.ComponentModel.DataAnnotations.ValidationAttribute.ErrorMessageResourceName" />
  ///  properties for localized error message are set at the same time that the non-localized <see cref="P:System.ComponentModel.DataAnnotations.ValidationAttribute.ErrorMessage" />
  ///  property error message is set.</exception>
  [DNTypeName('System.ComponentModel.DataAnnotations.ValidationAttribute')]
  DNValidationAttribute = interface(DDN.mscorlib.DNAttribute)
  ['{E2E5E586-99F5-3ECF-8153-F5FFE585F033}']
  { getters & setters } 

    function get_RequiresValidationContext: Boolean;
    function get_ErrorMessage: string;
    procedure set_ErrorMessage(value: string);
    function get_ErrorMessageResourceName: string;
    procedure set_ErrorMessageResourceName(value: string);
    function get_ErrorMessageResourceType: DDN.mscorlib.DNType;
    procedure set_ErrorMessageResourceType(value: DDN.mscorlib.DNType);
    function get_TypeId: DDN.mscorlib.DNObject;

  { methods } 

    ///<summary>Determines whether the specified value of the object is valid. </summary>
    ///  <param name="value">The value of the object to validate. </param>
    ///<returns><see langword="true" />
    ///  if the specified value is valid; otherwise, <see langword="false" />
    ///  .</returns>
    function IsValid(value: DDN.mscorlib.DNObject): Boolean;
    ///<summary>Validates the specified object.</summary>
    ///  <param name="value">The value of the object to validate.</param>
    ///  <param name="name">The name to include in the error message.</param>
    ///<exception cref="T:System.ComponentModel.DataAnnotations.ValidationException"><paramref name="value" />
    ///  is not valid.</exception>
    procedure Validate(value: DDN.mscorlib.DNObject; name: string); overload;
    ///<summary>Validates the specified object.</summary>
    ///  <param name="value">The object to validate.</param>
    ///  <param name="validationContext">The <see cref="T:System.ComponentModel.DataAnnotations.ValidationContext" />
    ///  object that describes the context where the validation checks are performed. This parameter cannot be <see langword="null" />
    ///  .</param>
    ///<exception cref="T:System.ComponentModel.DataAnnotations.ValidationException">Validation failed.</exception>
    procedure Validate(value: DDN.mscorlib.DNObject; validationContext: DNValidationContext); overload;
    ///<summary>Applies formatting to an error message, based on the data field where the error occurred. </summary>
    ///  <param name="name">The name to include in the formatted message.</param>
    ///<returns>An instance of the formatted error message.</returns>
    function FormatErrorMessage(name: string): string;
    ///<summary>Checks whether the specified value is valid with respect to the current validation attribute.</summary>
    ///  <param name="value">The value to validate.</param>
    ///  <param name="validationContext">The context information about the validation operation.</param>
    ///<returns>An instance of the <see cref="T:System.ComponentModel.DataAnnotations.ValidationResult" />
    ///  class. </returns>
    function GetValidationResult(value: DDN.mscorlib.DNObject; validationContext: DNValidationContext): DNValidationResult;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DDN.mscorlib.DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>Gets a value that indicates whether the attribute requires validation context.</summary>
    ///<returns><see langword="true" />
    ///  if the attribute requires validation context; otherwise, <see langword="false" />
    ///  .</returns>
    property RequiresValidationContext: Boolean read get_RequiresValidationContext;
    ///<summary>Gets or sets an error message to associate with a validation control if validation fails.</summary>
    ///<returns>The error message that is associated with the validation control.</returns>
    property ErrorMessage: string read get_ErrorMessage write set_ErrorMessage;
    ///<summary>Gets or sets the error message resource name to use in order to look up the <see cref="P:System.ComponentModel.DataAnnotations.ValidationAttribute.ErrorMessageResourceType" />
    ///  property value if validation fails.</summary>
    ///<returns>The error message resource that is associated with a validation control.</returns>
    property ErrorMessageResourceName: string read get_ErrorMessageResourceName write set_ErrorMessageResourceName;
    ///<summary>Gets or sets the resource type to use for error-message lookup if validation fails.</summary>
    ///<returns>The type of error message that is associated with a validation control.</returns>
    property ErrorMessageResourceType: DDN.mscorlib.DNType read get_ErrorMessageResourceType write set_ErrorMessageResourceType;
    property TypeId: DDN.mscorlib.DNObject read get_TypeId;
  end;

  TDNValidationAttribute = class(TDNGenericImport<DNValidationAttributeClass, DNValidationAttribute>) end;

  //-------------namespace: System.ComponentModel.DataAnnotations----------------
  DNCompareAttributeClass = interface(DNValidationAttributeClass)
  ['{42F9A176-36FF-565E-B665-4031305BD024}']
  { constructors } 

    ///<summary>Initializes a new instance of the <see cref="T:System.ComponentModel.DataAnnotations.CompareAttribute" />
    ///  class.</summary>
    ///  <param name="otherProperty">The property to compare with the current property.</param>
    {class} function init(otherProperty: string): DNCompareAttribute;

  end;

  ///<summary>Provides an attribute that compares two properties.</summary>
  [DNTypeName('System.ComponentModel.DataAnnotations.CompareAttribute')]
  DNCompareAttribute = interface(DNValidationAttribute)
  ['{9570D576-9BB8-3947-B222-AC8AEF5E6F81}']
  { getters & setters } 

    function get_OtherProperty: string;
    function get_OtherPropertyDisplayName: string;
    function get_RequiresValidationContext: Boolean;
    function get_ErrorMessage: string;
    procedure set_ErrorMessage(value: string);
    function get_ErrorMessageResourceName: string;
    procedure set_ErrorMessageResourceName(value: string);
    function get_ErrorMessageResourceType: DDN.mscorlib.DNType;
    procedure set_ErrorMessageResourceType(value: DDN.mscorlib.DNType);
    function get_TypeId: DDN.mscorlib.DNObject;

  { methods } 

    ///<summary>Applies formatting to an error message, based on the data field where the error occurred.</summary>
    ///  <param name="name">The name of the field that caused the validation failure.</param>
    ///<returns>The formatted error message.</returns>
    function FormatErrorMessage(name: string): string;
    ///<summary>Determines whether the specified value of the object is valid. </summary>
    ///  <param name="value">The value of the object to validate. </param>
    ///<returns><see langword="true" />
    ///  if the specified value is valid; otherwise, <see langword="false" />
    ///  .</returns>
    function IsValid(value: DDN.mscorlib.DNObject): Boolean;
    ///<summary>Validates the specified object.</summary>
    ///  <param name="value">The value of the object to validate.</param>
    ///  <param name="name">The name to include in the error message.</param>
    ///<exception cref="T:System.ComponentModel.DataAnnotations.ValidationException"><paramref name="value" />
    ///  is not valid.</exception>
    procedure Validate(value: DDN.mscorlib.DNObject; name: string); overload;
    ///<summary>Validates the specified object.</summary>
    ///  <param name="value">The object to validate.</param>
    ///  <param name="validationContext">The <see cref="T:System.ComponentModel.DataAnnotations.ValidationContext" />
    ///  object that describes the context where the validation checks are performed. This parameter cannot be <see langword="null" />
    ///  .</param>
    ///<exception cref="T:System.ComponentModel.DataAnnotations.ValidationException">Validation failed.</exception>
    procedure Validate(value: DDN.mscorlib.DNObject; validationContext: DNValidationContext); overload;
    ///<summary>Checks whether the specified value is valid with respect to the current validation attribute.</summary>
    ///  <param name="value">The value to validate.</param>
    ///  <param name="validationContext">The context information about the validation operation.</param>
    ///<returns>An instance of the <see cref="T:System.ComponentModel.DataAnnotations.ValidationResult" />
    ///  class. </returns>
    function GetValidationResult(value: DDN.mscorlib.DNObject; validationContext: DNValidationContext): DNValidationResult;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DDN.mscorlib.DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>Gets the property to compare with the current property.</summary>
    ///<returns>The other property.</returns>
    property OtherProperty: string read get_OtherProperty;
    ///<summary>Gets the display name of the other property.</summary>
    ///<returns>The display name of the other property.</returns>
    property OtherPropertyDisplayName: string read get_OtherPropertyDisplayName;
    ///<summary>Gets a value that indicates whether the attribute requires validation context.</summary>
    ///<returns><see langword="true" />
    ///  if the attribute requires validation context; otherwise, <see langword="false" />
    ///  .</returns>
    property RequiresValidationContext: Boolean read get_RequiresValidationContext;
    ///<summary>Gets or sets an error message to associate with a validation control if validation fails.</summary>
    ///<returns>The error message that is associated with the validation control.</returns>
    property ErrorMessage: string read get_ErrorMessage write set_ErrorMessage;
    ///<summary>Gets or sets the error message resource name to use in order to look up the <see cref="P:System.ComponentModel.DataAnnotations.ValidationAttribute.ErrorMessageResourceType" />
    ///  property value if validation fails.</summary>
    ///<returns>The error message resource that is associated with a validation control.</returns>
    property ErrorMessageResourceName: string read get_ErrorMessageResourceName write set_ErrorMessageResourceName;
    ///<summary>Gets or sets the resource type to use for error-message lookup if validation fails.</summary>
    ///<returns>The type of error message that is associated with a validation control.</returns>
    property ErrorMessageResourceType: DDN.mscorlib.DNType read get_ErrorMessageResourceType write set_ErrorMessageResourceType;
    property TypeId: DDN.mscorlib.DNObject read get_TypeId;
  end;

  TDNCompareAttribute = class(TDNGenericImport<DNCompareAttributeClass, DNCompareAttribute>) end;

  //-------------namespace: System.ComponentModel.DataAnnotations----------------
  DNCustomValidationAttributeClass = interface(DNValidationAttributeClass)
  ['{E84D59D9-9414-554F-83D6-9332F6E909F2}']
  { constructors } 

    ///<summary>Initializes a new instance of the <see cref="T:System.ComponentModel.DataAnnotations.CustomValidationAttribute" />
    ///  class.</summary>
    ///  <param name="validatorType">The type that contains the method that performs custom validation.</param>
    ///  <param name="method">The method that performs custom validation.</param>
    {class} function init(validatorType: DDN.mscorlib.DNType; method: string): DNCustomValidationAttribute;

  end;

  ///<summary>Specifies a custom validation method that is used to validate a property or class instance.</summary>
  [DNTypeName('System.ComponentModel.DataAnnotations.CustomValidationAttribute')]
  DNCustomValidationAttribute = interface(DNValidationAttribute)
  ['{B6A55D1F-9BE1-38DA-9FFD-DB51E3AB535D}']
  { getters & setters } 

    function get_ValidatorType: DDN.mscorlib.DNType;
    function get_Method: string;
    function get_TypeId: DDN.mscorlib.DNObject;
    function get_RequiresValidationContext: Boolean;
    function get_ErrorMessage: string;
    procedure set_ErrorMessage(value: string);
    function get_ErrorMessageResourceName: string;
    procedure set_ErrorMessageResourceName(value: string);
    function get_ErrorMessageResourceType: DDN.mscorlib.DNType;
    procedure set_ErrorMessageResourceType(value: DDN.mscorlib.DNType);

  { methods } 

    ///<summary>Formats a validation error message.</summary>
    ///  <param name="name">The name to include in the formatted message.</param>
    ///<returns>An instance of the formatted error message.</returns>
    function FormatErrorMessage(name: string): string;
    ///<summary>Determines whether the specified value of the object is valid. </summary>
    ///  <param name="value">The value of the object to validate. </param>
    ///<returns><see langword="true" />
    ///  if the specified value is valid; otherwise, <see langword="false" />
    ///  .</returns>
    function IsValid(value: DDN.mscorlib.DNObject): Boolean;
    ///<summary>Validates the specified object.</summary>
    ///  <param name="value">The value of the object to validate.</param>
    ///  <param name="name">The name to include in the error message.</param>
    ///<exception cref="T:System.ComponentModel.DataAnnotations.ValidationException"><paramref name="value" />
    ///  is not valid.</exception>
    procedure Validate(value: DDN.mscorlib.DNObject; name: string); overload;
    ///<summary>Validates the specified object.</summary>
    ///  <param name="value">The object to validate.</param>
    ///  <param name="validationContext">The <see cref="T:System.ComponentModel.DataAnnotations.ValidationContext" />
    ///  object that describes the context where the validation checks are performed. This parameter cannot be <see langword="null" />
    ///  .</param>
    ///<exception cref="T:System.ComponentModel.DataAnnotations.ValidationException">Validation failed.</exception>
    procedure Validate(value: DDN.mscorlib.DNObject; validationContext: DNValidationContext); overload;
    ///<summary>Checks whether the specified value is valid with respect to the current validation attribute.</summary>
    ///  <param name="value">The value to validate.</param>
    ///  <param name="validationContext">The context information about the validation operation.</param>
    ///<returns>An instance of the <see cref="T:System.ComponentModel.DataAnnotations.ValidationResult" />
    ///  class. </returns>
    function GetValidationResult(value: DDN.mscorlib.DNObject; validationContext: DNValidationContext): DNValidationResult;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DDN.mscorlib.DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>Gets the type that performs custom validation.</summary>
    ///<returns>The type that performs custom validation.</returns>
    property ValidatorType: DDN.mscorlib.DNType read get_ValidatorType;
    ///<summary>Gets the validation method.</summary>
    ///<returns>The name of the validation method.</returns>
    property Method: string read get_Method;
    ///<summary>Gets a unique identifier for this attribute.</summary>
    ///<returns>The object that identifies this attribute.</returns>
    property TypeId: DDN.mscorlib.DNObject read get_TypeId;
    ///<summary>Gets a value that indicates whether the attribute requires validation context.</summary>
    ///<returns><see langword="true" />
    ///  if the attribute requires validation context; otherwise, <see langword="false" />
    ///  .</returns>
    property RequiresValidationContext: Boolean read get_RequiresValidationContext;
    ///<summary>Gets or sets an error message to associate with a validation control if validation fails.</summary>
    ///<returns>The error message that is associated with the validation control.</returns>
    property ErrorMessage: string read get_ErrorMessage write set_ErrorMessage;
    ///<summary>Gets or sets the error message resource name to use in order to look up the <see cref="P:System.ComponentModel.DataAnnotations.ValidationAttribute.ErrorMessageResourceType" />
    ///  property value if validation fails.</summary>
    ///<returns>The error message resource that is associated with a validation control.</returns>
    property ErrorMessageResourceName: string read get_ErrorMessageResourceName write set_ErrorMessageResourceName;
    ///<summary>Gets or sets the resource type to use for error-message lookup if validation fails.</summary>
    ///<returns>The type of error message that is associated with a validation control.</returns>
    property ErrorMessageResourceType: DDN.mscorlib.DNType read get_ErrorMessageResourceType write set_ErrorMessageResourceType;
  end;

  TDNCustomValidationAttribute = class(TDNGenericImport<DNCustomValidationAttributeClass, DNCustomValidationAttribute>) end;

  //-------------namespace: System.ComponentModel.DataAnnotations----------------
  DNDataTypeAttributeClass = interface(DNValidationAttributeClass)
  ['{887AB953-773F-53F4-9C48-A90A4BC6DCB3}']
  { constructors } 

    ///<summary>Initializes a new instance of the <see cref="T:System.ComponentModel.DataAnnotations.DataTypeAttribute" />
    ///  class by using the specified type name.</summary>
    ///  <param name="dataType">The name of the type to associate with the data field.</param>
    {class} function init(dataType: DNDataType): DNDataTypeAttribute; overload;
    ///<summary>Initializes a new instance of the <see cref="T:System.ComponentModel.DataAnnotations.DataTypeAttribute" />
    ///  class by using the specified field template name.</summary>
    ///  <param name="customDataType">The name of the custom field template to associate with the data field.</param>
    ///<exception cref="T:System.ArgumentException"><paramref name="customDataType" />
    ///  is <see langword="null" />
    ///  or an empty string (""). </exception>
    {class} function init(customDataType: string): DNDataTypeAttribute; overload;

  end;

  ///<summary>Specifies the name of an additional type to associate with a data field.</summary>
  [DNTypeName('System.ComponentModel.DataAnnotations.DataTypeAttribute')]
  DNDataTypeAttribute = interface(DNValidationAttribute)
  ['{FDC452CE-F502-319D-A282-D680B2D5D49A}']
  { getters & setters } 

    function get_DataType: DNDataType;
    function get_CustomDataType: string;
    function get_DisplayFormat: DNDisplayFormatAttribute;
    function get_RequiresValidationContext: Boolean;
    function get_ErrorMessage: string;
    procedure set_ErrorMessage(value: string);
    function get_ErrorMessageResourceName: string;
    procedure set_ErrorMessageResourceName(value: string);
    function get_ErrorMessageResourceType: DDN.mscorlib.DNType;
    procedure set_ErrorMessageResourceType(value: DDN.mscorlib.DNType);
    function get_TypeId: DDN.mscorlib.DNObject;

  { methods } 

    ///<summary>Returns the name of the type that is associated with the data field.</summary>
    ///<returns>The name of the type associated with the data field.</returns>
    function GetDataTypeName: string;
    ///<summary>Checks that the value of the data field is valid.</summary>
    ///  <param name="value">The data field value to validate.</param>
    ///<returns><see langword="true" />
    ///  always.</returns>
    function IsValid(value: DDN.mscorlib.DNObject): Boolean;
    ///<summary>Validates the specified object.</summary>
    ///  <param name="value">The value of the object to validate.</param>
    ///  <param name="name">The name to include in the error message.</param>
    ///<exception cref="T:System.ComponentModel.DataAnnotations.ValidationException"><paramref name="value" />
    ///  is not valid.</exception>
    procedure Validate(value: DDN.mscorlib.DNObject; name: string); overload;
    ///<summary>Validates the specified object.</summary>
    ///  <param name="value">The object to validate.</param>
    ///  <param name="validationContext">The <see cref="T:System.ComponentModel.DataAnnotations.ValidationContext" />
    ///  object that describes the context where the validation checks are performed. This parameter cannot be <see langword="null" />
    ///  .</param>
    ///<exception cref="T:System.ComponentModel.DataAnnotations.ValidationException">Validation failed.</exception>
    procedure Validate(value: DDN.mscorlib.DNObject; validationContext: DNValidationContext); overload;
    ///<summary>Applies formatting to an error message, based on the data field where the error occurred. </summary>
    ///  <param name="name">The name to include in the formatted message.</param>
    ///<returns>An instance of the formatted error message.</returns>
    function FormatErrorMessage(name: string): string;
    ///<summary>Checks whether the specified value is valid with respect to the current validation attribute.</summary>
    ///  <param name="value">The value to validate.</param>
    ///  <param name="validationContext">The context information about the validation operation.</param>
    ///<returns>An instance of the <see cref="T:System.ComponentModel.DataAnnotations.ValidationResult" />
    ///  class. </returns>
    function GetValidationResult(value: DDN.mscorlib.DNObject; validationContext: DNValidationContext): DNValidationResult;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DDN.mscorlib.DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>Gets the type that is associated with the data field.</summary>
    ///<returns>One of the <see cref="T:System.ComponentModel.DataAnnotations.DataType" />
    ///  values.</returns>
    property DataType: DNDataType read get_DataType;
    ///<summary>Gets the name of custom field template that is associated with the data field.</summary>
    ///<returns>The name of the custom field template that is associated with the data field.</returns>
    property CustomDataType: string read get_CustomDataType;
    ///<summary>Gets a data-field display format.</summary>
    ///<returns>The data-field display format.</returns>
    property DisplayFormat: DNDisplayFormatAttribute read get_DisplayFormat;
    ///<summary>Gets a value that indicates whether the attribute requires validation context.</summary>
    ///<returns><see langword="true" />
    ///  if the attribute requires validation context; otherwise, <see langword="false" />
    ///  .</returns>
    property RequiresValidationContext: Boolean read get_RequiresValidationContext;
    ///<summary>Gets or sets an error message to associate with a validation control if validation fails.</summary>
    ///<returns>The error message that is associated with the validation control.</returns>
    property ErrorMessage: string read get_ErrorMessage write set_ErrorMessage;
    ///<summary>Gets or sets the error message resource name to use in order to look up the <see cref="P:System.ComponentModel.DataAnnotations.ValidationAttribute.ErrorMessageResourceType" />
    ///  property value if validation fails.</summary>
    ///<returns>The error message resource that is associated with a validation control.</returns>
    property ErrorMessageResourceName: string read get_ErrorMessageResourceName write set_ErrorMessageResourceName;
    ///<summary>Gets or sets the resource type to use for error-message lookup if validation fails.</summary>
    ///<returns>The type of error message that is associated with a validation control.</returns>
    property ErrorMessageResourceType: DDN.mscorlib.DNType read get_ErrorMessageResourceType write set_ErrorMessageResourceType;
    property TypeId: DDN.mscorlib.DNObject read get_TypeId;
  end;

  TDNDataTypeAttribute = class(TDNGenericImport<DNDataTypeAttributeClass, DNDataTypeAttribute>) end;

  //-------------namespace: System.ComponentModel.DataAnnotations----------------
  DNCreditCardAttributeClass = interface(DNDataTypeAttributeClass)
  ['{5D11C2A4-B483-5727-963B-657B2E92B819}']
  { constructors } 

    ///<summary>Initializes a new instance of the <see cref="T:System.ComponentModel.DataAnnotations.CreditCardAttribute" />
    ///  class.</summary>
    {class} function init: DNCreditCardAttribute;

  end;

  ///<summary>Specifies that a data field value is a credit card number.</summary>
  [DNTypeName('System.ComponentModel.DataAnnotations.CreditCardAttribute')]
  DNCreditCardAttribute = interface(DNDataTypeAttribute)
  ['{33F3D09D-0F30-3E32-AA8C-1B2E9AAE7DC0}']
  { getters & setters } 

    function get_DataType: DNDataType;
    function get_CustomDataType: string;
    function get_DisplayFormat: DNDisplayFormatAttribute;
    function get_RequiresValidationContext: Boolean;
    function get_ErrorMessage: string;
    procedure set_ErrorMessage(value: string);
    function get_ErrorMessageResourceName: string;
    procedure set_ErrorMessageResourceName(value: string);
    function get_ErrorMessageResourceType: DDN.mscorlib.DNType;
    procedure set_ErrorMessageResourceType(value: DDN.mscorlib.DNType);
    function get_TypeId: DDN.mscorlib.DNObject;

  { methods } 

    ///<summary>Determines whether the specified credit card number is valid. </summary>
    ///  <param name="value">The value to validate.</param>
    ///<returns><see langword="true" />
    ///  if the credit card number is valid; otherwise, <see langword="false" />
    ///  .</returns>
    function IsValid(value: DDN.mscorlib.DNObject): Boolean;
    ///<summary>Returns the name of the type that is associated with the data field.</summary>
    ///<returns>The name of the type associated with the data field.</returns>
    function GetDataTypeName: string;
    procedure Validate(value: DDN.mscorlib.DNObject; name: string); overload;
    procedure Validate(value: DDN.mscorlib.DNObject; validationContext: DNValidationContext); overload;
    function FormatErrorMessage(name: string): string;
    function GetValidationResult(value: DDN.mscorlib.DNObject; validationContext: DNValidationContext): DNValidationResult;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DDN.mscorlib.DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>Gets the type that is associated with the data field.</summary>
    ///<returns>One of the <see cref="T:System.ComponentModel.DataAnnotations.DataType" />
    ///  values.</returns>
    property DataType: DNDataType read get_DataType;
    ///<summary>Gets the name of custom field template that is associated with the data field.</summary>
    ///<returns>The name of the custom field template that is associated with the data field.</returns>
    property CustomDataType: string read get_CustomDataType;
    ///<summary>Gets a data-field display format.</summary>
    ///<returns>The data-field display format.</returns>
    property DisplayFormat: DNDisplayFormatAttribute read get_DisplayFormat;
    property RequiresValidationContext: Boolean read get_RequiresValidationContext;
    property ErrorMessage: string read get_ErrorMessage write set_ErrorMessage;
    property ErrorMessageResourceName: string read get_ErrorMessageResourceName write set_ErrorMessageResourceName;
    property ErrorMessageResourceType: DDN.mscorlib.DNType read get_ErrorMessageResourceType write set_ErrorMessageResourceType;
    property TypeId: DDN.mscorlib.DNObject read get_TypeId;
  end;

  TDNCreditCardAttribute = class(TDNGenericImport<DNCreditCardAttributeClass, DNCreditCardAttribute>) end;

  //-------------namespace: System.ComponentModel.DataAnnotations----------------
  DNEmailAddressAttributeClass = interface(DNDataTypeAttributeClass)
  ['{ED4740B9-4FE6-5DA5-92F7-D9DF1BEFCB8F}']
  { constructors } 

    ///<summary>Initializes a new instance of the <see cref="T:System.ComponentModel.DataAnnotations.EmailAddressAttribute" />
    ///  class.</summary>
    {class} function init: DNEmailAddressAttribute;

  end;

  ///<summary>Validates an email address.</summary>
  [DNTypeName('System.ComponentModel.DataAnnotations.EmailAddressAttribute')]
  DNEmailAddressAttribute = interface(DNDataTypeAttribute)
  ['{F90A629B-38D9-38A1-B8B6-C359973CAA7D}']
  { getters & setters } 

    function get_DataType: DNDataType;
    function get_CustomDataType: string;
    function get_DisplayFormat: DNDisplayFormatAttribute;
    function get_RequiresValidationContext: Boolean;
    function get_ErrorMessage: string;
    procedure set_ErrorMessage(value: string);
    function get_ErrorMessageResourceName: string;
    procedure set_ErrorMessageResourceName(value: string);
    function get_ErrorMessageResourceType: DDN.mscorlib.DNType;
    procedure set_ErrorMessageResourceType(value: DDN.mscorlib.DNType);
    function get_TypeId: DDN.mscorlib.DNObject;

  { methods } 

    ///<summary>Determines whether the specified value matches the pattern of a valid email address.</summary>
    ///  <param name="value">The value to validate.</param>
    ///<returns><see langword="true" />
    ///  if the specified value is valid or <see langword="null" />
    ///  ; otherwise, <see langword="false" />
    ///  .</returns>
    function IsValid(value: DDN.mscorlib.DNObject): Boolean;
    ///<summary>Returns the name of the type that is associated with the data field.</summary>
    ///<returns>The name of the type associated with the data field.</returns>
    function GetDataTypeName: string;
    procedure Validate(value: DDN.mscorlib.DNObject; name: string); overload;
    procedure Validate(value: DDN.mscorlib.DNObject; validationContext: DNValidationContext); overload;
    function FormatErrorMessage(name: string): string;
    function GetValidationResult(value: DDN.mscorlib.DNObject; validationContext: DNValidationContext): DNValidationResult;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DDN.mscorlib.DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>Gets the type that is associated with the data field.</summary>
    ///<returns>One of the <see cref="T:System.ComponentModel.DataAnnotations.DataType" />
    ///  values.</returns>
    property DataType: DNDataType read get_DataType;
    ///<summary>Gets the name of custom field template that is associated with the data field.</summary>
    ///<returns>The name of the custom field template that is associated with the data field.</returns>
    property CustomDataType: string read get_CustomDataType;
    ///<summary>Gets a data-field display format.</summary>
    ///<returns>The data-field display format.</returns>
    property DisplayFormat: DNDisplayFormatAttribute read get_DisplayFormat;
    property RequiresValidationContext: Boolean read get_RequiresValidationContext;
    property ErrorMessage: string read get_ErrorMessage write set_ErrorMessage;
    property ErrorMessageResourceName: string read get_ErrorMessageResourceName write set_ErrorMessageResourceName;
    property ErrorMessageResourceType: DDN.mscorlib.DNType read get_ErrorMessageResourceType write set_ErrorMessageResourceType;
    property TypeId: DDN.mscorlib.DNObject read get_TypeId;
  end;

  TDNEmailAddressAttribute = class(TDNGenericImport<DNEmailAddressAttributeClass, DNEmailAddressAttribute>) end;

  //-------------namespace: System.ComponentModel.DataAnnotations----------------
  DNEnumDataTypeAttributeClass = interface(DNDataTypeAttributeClass)
  ['{F039B12B-65A3-57E1-A0DD-CDCF0A5C8660}']
  { constructors } 

    ///<summary>Initializes a new instance of the <see cref="T:System.ComponentModel.DataAnnotations.EnumDataTypeAttribute" />
    ///  class.</summary>
    ///  <param name="enumType">The type of the enumeration.</param>
    {class} function init(enumType: DDN.mscorlib.DNType): DNEnumDataTypeAttribute;

  end;

  ///<summary>Enables a .NET Framework enumeration to be mapped to a data column.</summary>
  [DNTypeName('System.ComponentModel.DataAnnotations.EnumDataTypeAttribute')]
  DNEnumDataTypeAttribute = interface(DNDataTypeAttribute)
  ['{33F31804-C167-3C8C-93A4-B576038D39E5}']
  { getters & setters } 

    function get_EnumType: DDN.mscorlib.DNType;
    function get_DataType: DNDataType;
    function get_CustomDataType: string;
    function get_DisplayFormat: DNDisplayFormatAttribute;
    function get_RequiresValidationContext: Boolean;
    function get_ErrorMessage: string;
    procedure set_ErrorMessage(value: string);
    function get_ErrorMessageResourceName: string;
    procedure set_ErrorMessageResourceName(value: string);
    function get_ErrorMessageResourceType: DDN.mscorlib.DNType;
    procedure set_ErrorMessageResourceType(value: DDN.mscorlib.DNType);
    function get_TypeId: DDN.mscorlib.DNObject;

  { methods } 

    ///<summary>Checks that the value of the data field is valid.</summary>
    ///  <param name="value">The data field value to validate.</param>
    ///<returns><see langword="true" />
    ///  if the data field value is valid; otherwise, <see langword="false" />
    ///  .</returns>
    function IsValid(value: DDN.mscorlib.DNObject): Boolean;
    ///<summary>Returns the name of the type that is associated with the data field.</summary>
    ///<returns>The name of the type associated with the data field.</returns>
    function GetDataTypeName: string;
    procedure Validate(value: DDN.mscorlib.DNObject; name: string); overload;
    procedure Validate(value: DDN.mscorlib.DNObject; validationContext: DNValidationContext); overload;
    function FormatErrorMessage(name: string): string;
    function GetValidationResult(value: DDN.mscorlib.DNObject; validationContext: DNValidationContext): DNValidationResult;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DDN.mscorlib.DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>Gets or sets the enumeration type.</summary>
    ///<returns>The enumeration type.</returns>
    property EnumType: DDN.mscorlib.DNType read get_EnumType;
    ///<summary>Gets the type that is associated with the data field.</summary>
    ///<returns>One of the <see cref="T:System.ComponentModel.DataAnnotations.DataType" />
    ///  values.</returns>
    property DataType: DNDataType read get_DataType;
    ///<summary>Gets the name of custom field template that is associated with the data field.</summary>
    ///<returns>The name of the custom field template that is associated with the data field.</returns>
    property CustomDataType: string read get_CustomDataType;
    ///<summary>Gets a data-field display format.</summary>
    ///<returns>The data-field display format.</returns>
    property DisplayFormat: DNDisplayFormatAttribute read get_DisplayFormat;
    property RequiresValidationContext: Boolean read get_RequiresValidationContext;
    property ErrorMessage: string read get_ErrorMessage write set_ErrorMessage;
    property ErrorMessageResourceName: string read get_ErrorMessageResourceName write set_ErrorMessageResourceName;
    property ErrorMessageResourceType: DDN.mscorlib.DNType read get_ErrorMessageResourceType write set_ErrorMessageResourceType;
    property TypeId: DDN.mscorlib.DNObject read get_TypeId;
  end;

  TDNEnumDataTypeAttribute = class(TDNGenericImport<DNEnumDataTypeAttributeClass, DNEnumDataTypeAttribute>) end;

  //-------------namespace: System.ComponentModel.DataAnnotations----------------
  DNFileExtensionsAttributeClass = interface(DNDataTypeAttributeClass)
  ['{EAE7D7D8-A36C-566A-A16F-5DF5C38CF7D8}']
  { constructors } 

    ///<summary>Initializes a new instance of the <see cref="T:System.ComponentModel.DataAnnotations.FileExtensionsAttribute" />
    ///  class.</summary>
    {class} function init: DNFileExtensionsAttribute;

  end;

  ///<summary>Validates file name extensions.</summary>
  [DNTypeName('System.ComponentModel.DataAnnotations.FileExtensionsAttribute')]
  DNFileExtensionsAttribute = interface(DNDataTypeAttribute)
  ['{5B5A45C3-0956-3979-95F0-9C371C4B35D1}']
  { getters & setters } 

    function get_Extensions: string;
    procedure set_Extensions(value: string);
    function get_DataType: DNDataType;
    function get_CustomDataType: string;
    function get_DisplayFormat: DNDisplayFormatAttribute;
    function get_RequiresValidationContext: Boolean;
    function get_ErrorMessage: string;
    procedure set_ErrorMessage(value: string);
    function get_ErrorMessageResourceName: string;
    procedure set_ErrorMessageResourceName(value: string);
    function get_ErrorMessageResourceType: DDN.mscorlib.DNType;
    procedure set_ErrorMessageResourceType(value: DDN.mscorlib.DNType);
    function get_TypeId: DDN.mscorlib.DNObject;

  { methods } 

    ///<summary>Checks that the specified file name extension or extensions is valid.</summary>
    ///  <param name="value">A comma delimited list of valid file extensions.</param>
    ///<returns><see langword="true" />
    ///  if the file name extension is valid; otherwise, <see langword="false" />
    ///  .</returns>
    function IsValid(value: DDN.mscorlib.DNObject): Boolean;
    ///<summary>Applies formatting to an error message, based on the data field where the error occurred.</summary>
    ///  <param name="name">The name of the field that caused the validation failure.</param>
    ///<returns>The formatted error message.</returns>
    function FormatErrorMessage(name: string): string;
    ///<summary>Returns the name of the type that is associated with the data field.</summary>
    ///<returns>The name of the type associated with the data field.</returns>
    function GetDataTypeName: string;
    procedure Validate(value: DDN.mscorlib.DNObject; name: string); overload;
    procedure Validate(value: DDN.mscorlib.DNObject; validationContext: DNValidationContext); overload;
    function GetValidationResult(value: DDN.mscorlib.DNObject; validationContext: DNValidationContext): DNValidationResult;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DDN.mscorlib.DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>Gets or sets the file name extensions.</summary>
    ///<returns>The file name extensions, or the default file extensions (".png", ".jpg", ".jpeg", and ".gif") if the property is not set.</returns>
    property Extensions: string read get_Extensions write set_Extensions;
    ///<summary>Gets the type that is associated with the data field.</summary>
    ///<returns>One of the <see cref="T:System.ComponentModel.DataAnnotations.DataType" />
    ///  values.</returns>
    property DataType: DNDataType read get_DataType;
    ///<summary>Gets the name of custom field template that is associated with the data field.</summary>
    ///<returns>The name of the custom field template that is associated with the data field.</returns>
    property CustomDataType: string read get_CustomDataType;
    ///<summary>Gets a data-field display format.</summary>
    ///<returns>The data-field display format.</returns>
    property DisplayFormat: DNDisplayFormatAttribute read get_DisplayFormat;
    property RequiresValidationContext: Boolean read get_RequiresValidationContext;
    property ErrorMessage: string read get_ErrorMessage write set_ErrorMessage;
    property ErrorMessageResourceName: string read get_ErrorMessageResourceName write set_ErrorMessageResourceName;
    property ErrorMessageResourceType: DDN.mscorlib.DNType read get_ErrorMessageResourceType write set_ErrorMessageResourceType;
    property TypeId: DDN.mscorlib.DNObject read get_TypeId;
  end;

  TDNFileExtensionsAttribute = class(TDNGenericImport<DNFileExtensionsAttributeClass, DNFileExtensionsAttribute>) end;

  //-------------namespace: System.ComponentModel.DataAnnotations----------------
  DNPhoneAttributeClass = interface(DNDataTypeAttributeClass)
  ['{EF34558C-16D2-5810-A555-AF41DA1DEA1B}']
  { constructors } 

    ///<summary>Initializes a new instance of the <see cref="T:System.ComponentModel.DataAnnotations.PhoneAttribute" />
    ///  class.</summary>
    {class} function init: DNPhoneAttribute;

  end;

  ///<summary>Specifies that a data field value is a  well-formed phone number using a regular expression for phone numbers.</summary>
  [DNTypeName('System.ComponentModel.DataAnnotations.PhoneAttribute')]
  DNPhoneAttribute = interface(DNDataTypeAttribute)
  ['{2D62C454-9C1F-3D8D-9119-8F7DEF1B0961}']
  { getters & setters } 

    function get_DataType: DNDataType;
    function get_CustomDataType: string;
    function get_DisplayFormat: DNDisplayFormatAttribute;
    function get_RequiresValidationContext: Boolean;
    function get_ErrorMessage: string;
    procedure set_ErrorMessage(value: string);
    function get_ErrorMessageResourceName: string;
    procedure set_ErrorMessageResourceName(value: string);
    function get_ErrorMessageResourceType: DDN.mscorlib.DNType;
    procedure set_ErrorMessageResourceType(value: DDN.mscorlib.DNType);
    function get_TypeId: DDN.mscorlib.DNObject;

  { methods } 

    ///<summary>Determines whether the specified phone number is in a valid phone number format. </summary>
    ///  <param name="value">The value to validate.</param>
    ///<returns><see langword="true" />
    ///  if the phone number is valid; otherwise, <see langword="false" />
    ///  .</returns>
    function IsValid(value: DDN.mscorlib.DNObject): Boolean;
    ///<summary>Returns the name of the type that is associated with the data field.</summary>
    ///<returns>The name of the type associated with the data field.</returns>
    function GetDataTypeName: string;
    procedure Validate(value: DDN.mscorlib.DNObject; name: string); overload;
    procedure Validate(value: DDN.mscorlib.DNObject; validationContext: DNValidationContext); overload;
    function FormatErrorMessage(name: string): string;
    function GetValidationResult(value: DDN.mscorlib.DNObject; validationContext: DNValidationContext): DNValidationResult;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DDN.mscorlib.DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>Gets the type that is associated with the data field.</summary>
    ///<returns>One of the <see cref="T:System.ComponentModel.DataAnnotations.DataType" />
    ///  values.</returns>
    property DataType: DNDataType read get_DataType;
    ///<summary>Gets the name of custom field template that is associated with the data field.</summary>
    ///<returns>The name of the custom field template that is associated with the data field.</returns>
    property CustomDataType: string read get_CustomDataType;
    ///<summary>Gets a data-field display format.</summary>
    ///<returns>The data-field display format.</returns>
    property DisplayFormat: DNDisplayFormatAttribute read get_DisplayFormat;
    property RequiresValidationContext: Boolean read get_RequiresValidationContext;
    property ErrorMessage: string read get_ErrorMessage write set_ErrorMessage;
    property ErrorMessageResourceName: string read get_ErrorMessageResourceName write set_ErrorMessageResourceName;
    property ErrorMessageResourceType: DDN.mscorlib.DNType read get_ErrorMessageResourceType write set_ErrorMessageResourceType;
    property TypeId: DDN.mscorlib.DNObject read get_TypeId;
  end;

  TDNPhoneAttribute = class(TDNGenericImport<DNPhoneAttributeClass, DNPhoneAttribute>) end;

  //-------------namespace: System.ComponentModel.DataAnnotations----------------
  DNUrlAttributeClass = interface(DNDataTypeAttributeClass)
  ['{9B388E38-40C8-5CF6-A0CA-5E5B487CB011}']
  { constructors } 

    ///<summary>Initializes a new instance of the <see cref="T:System.ComponentModel.DataAnnotations.UrlAttribute" />
    ///  class.</summary>
    {class} function init: DNUrlAttribute;

  end;

  ///<summary>Provides URL validation.</summary>
  [DNTypeName('System.ComponentModel.DataAnnotations.UrlAttribute')]
  DNUrlAttribute = interface(DNDataTypeAttribute)
  ['{B4240412-05CF-39FF-A519-75711A685949}']
  { getters & setters } 

    function get_DataType: DNDataType;
    function get_CustomDataType: string;
    function get_DisplayFormat: DNDisplayFormatAttribute;
    function get_RequiresValidationContext: Boolean;
    function get_ErrorMessage: string;
    procedure set_ErrorMessage(value: string);
    function get_ErrorMessageResourceName: string;
    procedure set_ErrorMessageResourceName(value: string);
    function get_ErrorMessageResourceType: DDN.mscorlib.DNType;
    procedure set_ErrorMessageResourceType(value: DDN.mscorlib.DNType);
    function get_TypeId: DDN.mscorlib.DNObject;

  { methods } 

    ///<summary>Validates the format of the specified URL.</summary>
    ///  <param name="value">The URL to validate.</param>
    ///<returns><see langword="true" />
    ///  if the URL format is valid or <see langword="null" />
    ///  ; otherwise, <see langword="false" />
    ///  .</returns>
    function IsValid(value: DDN.mscorlib.DNObject): Boolean;
    ///<summary>Returns the name of the type that is associated with the data field.</summary>
    ///<returns>The name of the type associated with the data field.</returns>
    function GetDataTypeName: string;
    procedure Validate(value: DDN.mscorlib.DNObject; name: string); overload;
    procedure Validate(value: DDN.mscorlib.DNObject; validationContext: DNValidationContext); overload;
    function FormatErrorMessage(name: string): string;
    function GetValidationResult(value: DDN.mscorlib.DNObject; validationContext: DNValidationContext): DNValidationResult;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DDN.mscorlib.DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>Gets the type that is associated with the data field.</summary>
    ///<returns>One of the <see cref="T:System.ComponentModel.DataAnnotations.DataType" />
    ///  values.</returns>
    property DataType: DNDataType read get_DataType;
    ///<summary>Gets the name of custom field template that is associated with the data field.</summary>
    ///<returns>The name of the custom field template that is associated with the data field.</returns>
    property CustomDataType: string read get_CustomDataType;
    ///<summary>Gets a data-field display format.</summary>
    ///<returns>The data-field display format.</returns>
    property DisplayFormat: DNDisplayFormatAttribute read get_DisplayFormat;
    property RequiresValidationContext: Boolean read get_RequiresValidationContext;
    property ErrorMessage: string read get_ErrorMessage write set_ErrorMessage;
    property ErrorMessageResourceName: string read get_ErrorMessageResourceName write set_ErrorMessageResourceName;
    property ErrorMessageResourceType: DDN.mscorlib.DNType read get_ErrorMessageResourceType write set_ErrorMessageResourceType;
    property TypeId: DDN.mscorlib.DNObject read get_TypeId;
  end;

  TDNUrlAttribute = class(TDNGenericImport<DNUrlAttributeClass, DNUrlAttribute>) end;

  //-------------namespace: System.ComponentModel.DataAnnotations----------------
  DNMaxLengthAttributeClass = interface(DNValidationAttributeClass)
  ['{56126C3F-D706-5B81-AD48-B7C7C669D2D4}']
  { constructors } 

    ///<summary>Initializes a new instance of the <see cref="T:System.ComponentModel.DataAnnotations.MaxLengthAttribute" />
    ///  class based on the <paramref name="length" />
    ///  parameter.</summary>
    ///  <param name="length">The maximum allowable length of array or string data.</param>
    {class} function init(length: Int32): DNMaxLengthAttribute; overload;
    ///<summary>Initializes a new instance of the <see cref="T:System.ComponentModel.DataAnnotations.MaxLengthAttribute" />
    ///  class.</summary>
    {class} function init: DNMaxLengthAttribute; overload;

  end;

  ///<summary>Specifies the maximum length of array or string data allowed in a property.</summary>
  [DNTypeName('System.ComponentModel.DataAnnotations.MaxLengthAttribute')]
  DNMaxLengthAttribute = interface(DNValidationAttribute)
  ['{71AFDFC5-2BC7-3789-9A6A-2BCFEFF5A3E2}']
  { getters & setters } 

    function get_Length: Int32;
    function get_RequiresValidationContext: Boolean;
    function get_ErrorMessage: string;
    procedure set_ErrorMessage(value: string);
    function get_ErrorMessageResourceName: string;
    procedure set_ErrorMessageResourceName(value: string);
    function get_ErrorMessageResourceType: DDN.mscorlib.DNType;
    procedure set_ErrorMessageResourceType(value: DDN.mscorlib.DNType);
    function get_TypeId: DDN.mscorlib.DNObject;

  { methods } 

    ///<summary>Determines whether a specified object is valid.</summary>
    ///  <param name="value">The object to validate.</param>
    ///<returns><see langword="true" />
    ///  if the value is null, or if the value is less than or equal to the specified maximum length; otherwise, <see langword="false" />
    ///  .</returns>
    ///<exception cref="T:System.InvalidOperationException">Length is zero or less than negative one.</exception>
    function IsValid(value: DDN.mscorlib.DNObject): Boolean;
    ///<summary>Applies formatting to a specified error message.</summary>
    ///  <param name="name">The name to include in the formatted string.</param>
    ///<returns>A localized string to describe the maximum acceptable length.</returns>
    function FormatErrorMessage(name: string): string;
    ///<summary>Validates the specified object.</summary>
    ///  <param name="value">The value of the object to validate.</param>
    ///  <param name="name">The name to include in the error message.</param>
    ///<exception cref="T:System.ComponentModel.DataAnnotations.ValidationException"><paramref name="value" />
    ///  is not valid.</exception>
    procedure Validate(value: DDN.mscorlib.DNObject; name: string); overload;
    ///<summary>Validates the specified object.</summary>
    ///  <param name="value">The object to validate.</param>
    ///  <param name="validationContext">The <see cref="T:System.ComponentModel.DataAnnotations.ValidationContext" />
    ///  object that describes the context where the validation checks are performed. This parameter cannot be <see langword="null" />
    ///  .</param>
    ///<exception cref="T:System.ComponentModel.DataAnnotations.ValidationException">Validation failed.</exception>
    procedure Validate(value: DDN.mscorlib.DNObject; validationContext: DNValidationContext); overload;
    ///<summary>Checks whether the specified value is valid with respect to the current validation attribute.</summary>
    ///  <param name="value">The value to validate.</param>
    ///  <param name="validationContext">The context information about the validation operation.</param>
    ///<returns>An instance of the <see cref="T:System.ComponentModel.DataAnnotations.ValidationResult" />
    ///  class. </returns>
    function GetValidationResult(value: DDN.mscorlib.DNObject; validationContext: DNValidationContext): DNValidationResult;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DDN.mscorlib.DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>Gets the maximum allowable length of the array or string data.</summary>
    ///<returns>The maximum allowable length of the array or string data.</returns>
    property Length: Int32 read get_Length;
    ///<summary>Gets a value that indicates whether the attribute requires validation context.</summary>
    ///<returns><see langword="true" />
    ///  if the attribute requires validation context; otherwise, <see langword="false" />
    ///  .</returns>
    property RequiresValidationContext: Boolean read get_RequiresValidationContext;
    ///<summary>Gets or sets an error message to associate with a validation control if validation fails.</summary>
    ///<returns>The error message that is associated with the validation control.</returns>
    property ErrorMessage: string read get_ErrorMessage write set_ErrorMessage;
    ///<summary>Gets or sets the error message resource name to use in order to look up the <see cref="P:System.ComponentModel.DataAnnotations.ValidationAttribute.ErrorMessageResourceType" />
    ///  property value if validation fails.</summary>
    ///<returns>The error message resource that is associated with a validation control.</returns>
    property ErrorMessageResourceName: string read get_ErrorMessageResourceName write set_ErrorMessageResourceName;
    ///<summary>Gets or sets the resource type to use for error-message lookup if validation fails.</summary>
    ///<returns>The type of error message that is associated with a validation control.</returns>
    property ErrorMessageResourceType: DDN.mscorlib.DNType read get_ErrorMessageResourceType write set_ErrorMessageResourceType;
    property TypeId: DDN.mscorlib.DNObject read get_TypeId;
  end;

  TDNMaxLengthAttribute = class(TDNGenericImport<DNMaxLengthAttributeClass, DNMaxLengthAttribute>) end;

  //-------------namespace: System.ComponentModel.DataAnnotations----------------
  DNMinLengthAttributeClass = interface(DNValidationAttributeClass)
  ['{8D59A566-57EF-5D41-96A9-DE09670A9F69}']
  { constructors } 

    ///<summary>Initializes a new instance of the <see cref="T:System.ComponentModel.DataAnnotations.MinLengthAttribute" />
    ///  class.</summary>
    ///  <param name="length">The length of the array or string data.</param>
    {class} function init(length: Int32): DNMinLengthAttribute;

  end;

  ///<summary>Specifies the minimum length of array or string data allowed in a property.</summary>
  [DNTypeName('System.ComponentModel.DataAnnotations.MinLengthAttribute')]
  DNMinLengthAttribute = interface(DNValidationAttribute)
  ['{5CCD40F7-81D7-320B-A0E5-A7E3E6664B58}']
  { getters & setters } 

    function get_Length: Int32;
    function get_RequiresValidationContext: Boolean;
    function get_ErrorMessage: string;
    procedure set_ErrorMessage(value: string);
    function get_ErrorMessageResourceName: string;
    procedure set_ErrorMessageResourceName(value: string);
    function get_ErrorMessageResourceType: DDN.mscorlib.DNType;
    procedure set_ErrorMessageResourceType(value: DDN.mscorlib.DNType);
    function get_TypeId: DDN.mscorlib.DNObject;

  { methods } 

    ///<summary>Determines whether a specified object is valid.</summary>
    ///  <param name="value">The object to validate.</param>
    ///<returns><see langword="true" />
    ///  if the specified object is valid; otherwise, <see langword="false" />
    ///  .</returns>
    function IsValid(value: DDN.mscorlib.DNObject): Boolean;
    ///<summary>Applies formatting to a specified error message.</summary>
    ///  <param name="name">The name to include in the formatted string.</param>
    ///<returns>A localized string to describe the minimum acceptable length.</returns>
    function FormatErrorMessage(name: string): string;
    ///<summary>Validates the specified object.</summary>
    ///  <param name="value">The value of the object to validate.</param>
    ///  <param name="name">The name to include in the error message.</param>
    ///<exception cref="T:System.ComponentModel.DataAnnotations.ValidationException"><paramref name="value" />
    ///  is not valid.</exception>
    procedure Validate(value: DDN.mscorlib.DNObject; name: string); overload;
    ///<summary>Validates the specified object.</summary>
    ///  <param name="value">The object to validate.</param>
    ///  <param name="validationContext">The <see cref="T:System.ComponentModel.DataAnnotations.ValidationContext" />
    ///  object that describes the context where the validation checks are performed. This parameter cannot be <see langword="null" />
    ///  .</param>
    ///<exception cref="T:System.ComponentModel.DataAnnotations.ValidationException">Validation failed.</exception>
    procedure Validate(value: DDN.mscorlib.DNObject; validationContext: DNValidationContext); overload;
    ///<summary>Checks whether the specified value is valid with respect to the current validation attribute.</summary>
    ///  <param name="value">The value to validate.</param>
    ///  <param name="validationContext">The context information about the validation operation.</param>
    ///<returns>An instance of the <see cref="T:System.ComponentModel.DataAnnotations.ValidationResult" />
    ///  class. </returns>
    function GetValidationResult(value: DDN.mscorlib.DNObject; validationContext: DNValidationContext): DNValidationResult;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DDN.mscorlib.DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>Gets or sets the minimum allowable length of the array or string data.</summary>
    ///<returns>The minimum allowable length of the array or string data.</returns>
    property Length: Int32 read get_Length;
    ///<summary>Gets a value that indicates whether the attribute requires validation context.</summary>
    ///<returns><see langword="true" />
    ///  if the attribute requires validation context; otherwise, <see langword="false" />
    ///  .</returns>
    property RequiresValidationContext: Boolean read get_RequiresValidationContext;
    ///<summary>Gets or sets an error message to associate with a validation control if validation fails.</summary>
    ///<returns>The error message that is associated with the validation control.</returns>
    property ErrorMessage: string read get_ErrorMessage write set_ErrorMessage;
    ///<summary>Gets or sets the error message resource name to use in order to look up the <see cref="P:System.ComponentModel.DataAnnotations.ValidationAttribute.ErrorMessageResourceType" />
    ///  property value if validation fails.</summary>
    ///<returns>The error message resource that is associated with a validation control.</returns>
    property ErrorMessageResourceName: string read get_ErrorMessageResourceName write set_ErrorMessageResourceName;
    ///<summary>Gets or sets the resource type to use for error-message lookup if validation fails.</summary>
    ///<returns>The type of error message that is associated with a validation control.</returns>
    property ErrorMessageResourceType: DDN.mscorlib.DNType read get_ErrorMessageResourceType write set_ErrorMessageResourceType;
    property TypeId: DDN.mscorlib.DNObject read get_TypeId;
  end;

  TDNMinLengthAttribute = class(TDNGenericImport<DNMinLengthAttributeClass, DNMinLengthAttribute>) end;

  //-------------namespace: System.ComponentModel.DataAnnotations----------------
  DNRangeAttributeClass = interface(DNValidationAttributeClass)
  ['{0A995450-C31D-5A79-AA20-F9BD7807AD93}']
  { constructors } 

    ///<summary>Initializes a new instance of the <see cref="T:System.ComponentModel.DataAnnotations.RangeAttribute" />
    ///  class by using the specified minimum and maximum values.</summary>
    ///  <param name="minimum">Specifies the minimum value allowed for the data field value.</param>
    ///  <param name="maximum">Specifies the maximum value allowed for the data field value.</param>
    {class} function init(minimum: Int32; maximum: Int32): DNRangeAttribute; overload;
    ///<summary>Initializes a new instance of the <see cref="T:System.ComponentModel.DataAnnotations.RangeAttribute" />
    ///  class by using the specified minimum and maximum values. </summary>
    ///  <param name="minimum">Specifies the minimum value allowed for the data field value.</param>
    ///  <param name="maximum">Specifies the maximum value allowed for the data field value.</param>
    {class} function init(minimum: Double; maximum: Double): DNRangeAttribute; overload;
    ///<summary>Initializes a new instance of the <see cref="T:System.ComponentModel.DataAnnotations.RangeAttribute" />
    ///  class by using the specified minimum and maximum values and the specific type.</summary>
    ///  <param name="type">Specifies the type of the object to test.</param>
    ///  <param name="minimum">Specifies the minimum value allowed for the data field value.</param>
    ///  <param name="maximum">Specifies the maximum value allowed for the data field value.</param>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="type" />
    ///  is <see langword="null" />
    ///  .</exception>
    {class} function init(&type: DDN.mscorlib.DNType; minimum: string; maximum: string): DNRangeAttribute; overload;

  end;

  ///<summary>Specifies the numeric range constraints for the value of a data field. </summary>
  [DNTypeName('System.ComponentModel.DataAnnotations.RangeAttribute')]
  DNRangeAttribute = interface(DNValidationAttribute)
  ['{A5F4EC07-9CA6-333B-8293-7E88F5038ED9}']
  { getters & setters } 

    function get_Minimum: DDN.mscorlib.DNObject;
    function get_Maximum: DDN.mscorlib.DNObject;
    function get_OperandType: DDN.mscorlib.DNType;
    function get_RequiresValidationContext: Boolean;
    function get_ErrorMessage: string;
    procedure set_ErrorMessage(value: string);
    function get_ErrorMessageResourceName: string;
    procedure set_ErrorMessageResourceName(value: string);
    function get_ErrorMessageResourceType: DDN.mscorlib.DNType;
    procedure set_ErrorMessageResourceType(value: DDN.mscorlib.DNType);
    function get_TypeId: DDN.mscorlib.DNObject;

  { methods } 

    ///<summary>Checks that the value of the data field is in the specified range.</summary>
    ///  <param name="value">The data field value to validate.</param>
    ///<returns><see langword="true" />
    ///  if the specified value is in the range; otherwise, <see langword="false" />
    ///  .</returns>
    ///<exception cref="T:System.ComponentModel.DataAnnotations.ValidationException">The data field value was outside the allowed range.</exception>
    function IsValid(value: DDN.mscorlib.DNObject): Boolean;
    ///<summary>Formats the error message that is displayed when range validation fails.</summary>
    ///  <param name="name">The name of the field that caused the validation failure. </param>
    ///<returns>The formatted error message.</returns>
    function FormatErrorMessage(name: string): string;
    ///<summary>Validates the specified object.</summary>
    ///  <param name="value">The value of the object to validate.</param>
    ///  <param name="name">The name to include in the error message.</param>
    ///<exception cref="T:System.ComponentModel.DataAnnotations.ValidationException"><paramref name="value" />
    ///  is not valid.</exception>
    procedure Validate(value: DDN.mscorlib.DNObject; name: string); overload;
    ///<summary>Validates the specified object.</summary>
    ///  <param name="value">The object to validate.</param>
    ///  <param name="validationContext">The <see cref="T:System.ComponentModel.DataAnnotations.ValidationContext" />
    ///  object that describes the context where the validation checks are performed. This parameter cannot be <see langword="null" />
    ///  .</param>
    ///<exception cref="T:System.ComponentModel.DataAnnotations.ValidationException">Validation failed.</exception>
    procedure Validate(value: DDN.mscorlib.DNObject; validationContext: DNValidationContext); overload;
    ///<summary>Checks whether the specified value is valid with respect to the current validation attribute.</summary>
    ///  <param name="value">The value to validate.</param>
    ///  <param name="validationContext">The context information about the validation operation.</param>
    ///<returns>An instance of the <see cref="T:System.ComponentModel.DataAnnotations.ValidationResult" />
    ///  class. </returns>
    function GetValidationResult(value: DDN.mscorlib.DNObject; validationContext: DNValidationContext): DNValidationResult;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DDN.mscorlib.DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>Gets the minimum allowed field value.</summary>
    ///<returns>The minimu value that is allowed for the data field.</returns>
    property Minimum: DDN.mscorlib.DNObject read get_Minimum;
    ///<summary>Gets the maximum allowed field value.</summary>
    ///<returns>The maximum value that is allowed for the data field.</returns>
    property Maximum: DDN.mscorlib.DNObject read get_Maximum;
    ///<summary>Gets the type of the data field whose value must be validated.</summary>
    ///<returns>The type of the data field whose value must be validated.</returns>
    property OperandType: DDN.mscorlib.DNType read get_OperandType;
    ///<summary>Gets a value that indicates whether the attribute requires validation context.</summary>
    ///<returns><see langword="true" />
    ///  if the attribute requires validation context; otherwise, <see langword="false" />
    ///  .</returns>
    property RequiresValidationContext: Boolean read get_RequiresValidationContext;
    ///<summary>Gets or sets an error message to associate with a validation control if validation fails.</summary>
    ///<returns>The error message that is associated with the validation control.</returns>
    property ErrorMessage: string read get_ErrorMessage write set_ErrorMessage;
    ///<summary>Gets or sets the error message resource name to use in order to look up the <see cref="P:System.ComponentModel.DataAnnotations.ValidationAttribute.ErrorMessageResourceType" />
    ///  property value if validation fails.</summary>
    ///<returns>The error message resource that is associated with a validation control.</returns>
    property ErrorMessageResourceName: string read get_ErrorMessageResourceName write set_ErrorMessageResourceName;
    ///<summary>Gets or sets the resource type to use for error-message lookup if validation fails.</summary>
    ///<returns>The type of error message that is associated with a validation control.</returns>
    property ErrorMessageResourceType: DDN.mscorlib.DNType read get_ErrorMessageResourceType write set_ErrorMessageResourceType;
    property TypeId: DDN.mscorlib.DNObject read get_TypeId;
  end;

  TDNRangeAttribute = class(TDNGenericImport<DNRangeAttributeClass, DNRangeAttribute>) end;

  //-------------namespace: System.ComponentModel.DataAnnotations----------------
  DNRegularExpressionAttributeClass = interface(DNValidationAttributeClass)
  ['{B46FC7C3-0DC3-5A97-B410-0A5EE8EA2DF1}']
  { constructors } 

    ///<summary>Initializes a new instance of the <see cref="T:System.ComponentModel.DataAnnotations.RegularExpressionAttribute" />
    ///  class.</summary>
    ///  <param name="pattern">The regular expression that is used to validate the data field value. </param>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="pattern" />
    ///  is <see langword="null" />
    ///  .</exception>
    {class} function init(pattern: string): DNRegularExpressionAttribute;

  end;

  ///<summary>Specifies that a data field value in ASP.NET Dynamic Data must match the specified regular expression.</summary>
  [DNTypeName('System.ComponentModel.DataAnnotations.RegularExpressionAttribute')]
  DNRegularExpressionAttribute = interface(DNValidationAttribute)
  ['{F80BAAE7-D511-384D-AC4C-DB4BFD74311B}']
  { getters & setters } 

    function get_Pattern: string;
    function get_MatchTimeoutInMilliseconds: Int32;
    procedure set_MatchTimeoutInMilliseconds(value: Int32);
    function get_RequiresValidationContext: Boolean;
    function get_ErrorMessage: string;
    procedure set_ErrorMessage(value: string);
    function get_ErrorMessageResourceName: string;
    procedure set_ErrorMessageResourceName(value: string);
    function get_ErrorMessageResourceType: DDN.mscorlib.DNType;
    procedure set_ErrorMessageResourceType(value: DDN.mscorlib.DNType);
    function get_TypeId: DDN.mscorlib.DNObject;

  { methods } 

    ///<summary>Checks whether the value entered by the user matches the regular expression pattern. </summary>
    ///  <param name="value">The data field value to validate.</param>
    ///<returns><see langword="true" />
    ///  if validation is successful; otherwise, <see langword="false" />
    ///  .</returns>
    ///<exception cref="T:System.ComponentModel.DataAnnotations.ValidationException">The data field value did not match the regular expression pattern.</exception>
    function IsValid(value: DDN.mscorlib.DNObject): Boolean;
    ///<summary>Formats the error message to display if the regular expression validation fails.</summary>
    ///  <param name="name">The name of the field that caused the validation failure.</param>
    ///<returns>The formatted error message.</returns>
    function FormatErrorMessage(name: string): string;
    ///<summary>Validates the specified object.</summary>
    ///  <param name="value">The value of the object to validate.</param>
    ///  <param name="name">The name to include in the error message.</param>
    ///<exception cref="T:System.ComponentModel.DataAnnotations.ValidationException"><paramref name="value" />
    ///  is not valid.</exception>
    procedure Validate(value: DDN.mscorlib.DNObject; name: string); overload;
    ///<summary>Validates the specified object.</summary>
    ///  <param name="value">The object to validate.</param>
    ///  <param name="validationContext">The <see cref="T:System.ComponentModel.DataAnnotations.ValidationContext" />
    ///  object that describes the context where the validation checks are performed. This parameter cannot be <see langword="null" />
    ///  .</param>
    ///<exception cref="T:System.ComponentModel.DataAnnotations.ValidationException">Validation failed.</exception>
    procedure Validate(value: DDN.mscorlib.DNObject; validationContext: DNValidationContext); overload;
    ///<summary>Checks whether the specified value is valid with respect to the current validation attribute.</summary>
    ///  <param name="value">The value to validate.</param>
    ///  <param name="validationContext">The context information about the validation operation.</param>
    ///<returns>An instance of the <see cref="T:System.ComponentModel.DataAnnotations.ValidationResult" />
    ///  class. </returns>
    function GetValidationResult(value: DDN.mscorlib.DNObject; validationContext: DNValidationContext): DNValidationResult;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DDN.mscorlib.DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>Gets the regular expression pattern.</summary>
    ///<returns>The pattern to match.</returns>
    property Pattern: string read get_Pattern;
    ///<summary>Gets or set the amount of time in milliseconds to execute a single matching operation before the operation times out.</summary>
    ///<returns>The amount of time in milliseconds to execute a single matching operation.</returns>
    property MatchTimeoutInMilliseconds: Int32 read get_MatchTimeoutInMilliseconds write set_MatchTimeoutInMilliseconds;
    ///<summary>Gets a value that indicates whether the attribute requires validation context.</summary>
    ///<returns><see langword="true" />
    ///  if the attribute requires validation context; otherwise, <see langword="false" />
    ///  .</returns>
    property RequiresValidationContext: Boolean read get_RequiresValidationContext;
    ///<summary>Gets or sets an error message to associate with a validation control if validation fails.</summary>
    ///<returns>The error message that is associated with the validation control.</returns>
    property ErrorMessage: string read get_ErrorMessage write set_ErrorMessage;
    ///<summary>Gets or sets the error message resource name to use in order to look up the <see cref="P:System.ComponentModel.DataAnnotations.ValidationAttribute.ErrorMessageResourceType" />
    ///  property value if validation fails.</summary>
    ///<returns>The error message resource that is associated with a validation control.</returns>
    property ErrorMessageResourceName: string read get_ErrorMessageResourceName write set_ErrorMessageResourceName;
    ///<summary>Gets or sets the resource type to use for error-message lookup if validation fails.</summary>
    ///<returns>The type of error message that is associated with a validation control.</returns>
    property ErrorMessageResourceType: DDN.mscorlib.DNType read get_ErrorMessageResourceType write set_ErrorMessageResourceType;
    property TypeId: DDN.mscorlib.DNObject read get_TypeId;
  end;

  TDNRegularExpressionAttribute = class(TDNGenericImport<DNRegularExpressionAttributeClass, DNRegularExpressionAttribute>) end;

  //-------------namespace: System.ComponentModel.DataAnnotations----------------
  DNRequiredAttributeClass = interface(DNValidationAttributeClass)
  ['{3E4BA435-4165-5C32-B7B6-B793A29F0362}']
  { constructors } 

    ///<summary>Initializes a new instance of the <see cref="T:System.ComponentModel.DataAnnotations.RequiredAttribute" />
    ///  class.</summary>
    {class} function init: DNRequiredAttribute;

  end;

  ///<summary>Specifies that a data field value is required.</summary>
  [DNTypeName('System.ComponentModel.DataAnnotations.RequiredAttribute')]
  DNRequiredAttribute = interface(DNValidationAttribute)
  ['{0304FE9C-59D6-37B0-A2D2-9B2CC9A9DABE}']
  { getters & setters } 

    function get_AllowEmptyStrings: Boolean;
    procedure set_AllowEmptyStrings(value: Boolean);
    function get_RequiresValidationContext: Boolean;
    function get_ErrorMessage: string;
    procedure set_ErrorMessage(value: string);
    function get_ErrorMessageResourceName: string;
    procedure set_ErrorMessageResourceName(value: string);
    function get_ErrorMessageResourceType: DDN.mscorlib.DNType;
    procedure set_ErrorMessageResourceType(value: DDN.mscorlib.DNType);
    function get_TypeId: DDN.mscorlib.DNObject;

  { methods } 

    ///<summary>Checks that the value of the required data field is not empty.</summary>
    ///  <param name="value">The data field value to validate.</param>
    ///<returns><see langword="true" />
    ///  if validation is successful; otherwise, <see langword="false" />
    ///  .</returns>
    ///<exception cref="T:System.ComponentModel.DataAnnotations.ValidationException">The data field value was <see langword="null" />
    ///  .</exception>
    function IsValid(value: DDN.mscorlib.DNObject): Boolean;
    ///<summary>Validates the specified object.</summary>
    ///  <param name="value">The value of the object to validate.</param>
    ///  <param name="name">The name to include in the error message.</param>
    ///<exception cref="T:System.ComponentModel.DataAnnotations.ValidationException"><paramref name="value" />
    ///  is not valid.</exception>
    procedure Validate(value: DDN.mscorlib.DNObject; name: string); overload;
    ///<summary>Validates the specified object.</summary>
    ///  <param name="value">The object to validate.</param>
    ///  <param name="validationContext">The <see cref="T:System.ComponentModel.DataAnnotations.ValidationContext" />
    ///  object that describes the context where the validation checks are performed. This parameter cannot be <see langword="null" />
    ///  .</param>
    ///<exception cref="T:System.ComponentModel.DataAnnotations.ValidationException">Validation failed.</exception>
    procedure Validate(value: DDN.mscorlib.DNObject; validationContext: DNValidationContext); overload;
    ///<summary>Applies formatting to an error message, based on the data field where the error occurred. </summary>
    ///  <param name="name">The name to include in the formatted message.</param>
    ///<returns>An instance of the formatted error message.</returns>
    function FormatErrorMessage(name: string): string;
    ///<summary>Checks whether the specified value is valid with respect to the current validation attribute.</summary>
    ///  <param name="value">The value to validate.</param>
    ///  <param name="validationContext">The context information about the validation operation.</param>
    ///<returns>An instance of the <see cref="T:System.ComponentModel.DataAnnotations.ValidationResult" />
    ///  class. </returns>
    function GetValidationResult(value: DDN.mscorlib.DNObject; validationContext: DNValidationContext): DNValidationResult;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DDN.mscorlib.DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>Gets or sets a value that indicates whether an empty string is allowed.</summary>
    ///<returns><see langword="true" />
    ///  if an empty string is allowed; otherwise, <see langword="false" />
    ///  . The default value is <see langword="false" />
    ///  .</returns>
    property AllowEmptyStrings: Boolean read get_AllowEmptyStrings write set_AllowEmptyStrings;
    ///<summary>Gets a value that indicates whether the attribute requires validation context.</summary>
    ///<returns><see langword="true" />
    ///  if the attribute requires validation context; otherwise, <see langword="false" />
    ///  .</returns>
    property RequiresValidationContext: Boolean read get_RequiresValidationContext;
    ///<summary>Gets or sets an error message to associate with a validation control if validation fails.</summary>
    ///<returns>The error message that is associated with the validation control.</returns>
    property ErrorMessage: string read get_ErrorMessage write set_ErrorMessage;
    ///<summary>Gets or sets the error message resource name to use in order to look up the <see cref="P:System.ComponentModel.DataAnnotations.ValidationAttribute.ErrorMessageResourceType" />
    ///  property value if validation fails.</summary>
    ///<returns>The error message resource that is associated with a validation control.</returns>
    property ErrorMessageResourceName: string read get_ErrorMessageResourceName write set_ErrorMessageResourceName;
    ///<summary>Gets or sets the resource type to use for error-message lookup if validation fails.</summary>
    ///<returns>The type of error message that is associated with a validation control.</returns>
    property ErrorMessageResourceType: DDN.mscorlib.DNType read get_ErrorMessageResourceType write set_ErrorMessageResourceType;
    property TypeId: DDN.mscorlib.DNObject read get_TypeId;
  end;

  TDNRequiredAttribute = class(TDNGenericImport<DNRequiredAttributeClass, DNRequiredAttribute>) end;

  //-------------namespace: System.ComponentModel.DataAnnotations----------------
  DNStringLengthAttributeClass = interface(DNValidationAttributeClass)
  ['{1F398A50-5FA1-54B3-B1AA-750D61E357EB}']
  { constructors } 

    ///<summary>Initializes a new instance of the <see cref="T:System.ComponentModel.DataAnnotations.StringLengthAttribute" />
    ///  class by using a specified maximum length.</summary>
    ///  <param name="maximumLength">The maximum length of a string. </param>
    {class} function init(maximumLength: Int32): DNStringLengthAttribute;

  end;

  ///<summary>Specifies the minimum and maximum length of characters that are allowed in a data field.</summary>
  [DNTypeName('System.ComponentModel.DataAnnotations.StringLengthAttribute')]
  DNStringLengthAttribute = interface(DNValidationAttribute)
  ['{56116897-7B2D-3925-9F4C-2EAE6A3EBCC0}']
  { getters & setters } 

    function get_MaximumLength: Int32;
    function get_MinimumLength: Int32;
    procedure set_MinimumLength(value: Int32);
    function get_RequiresValidationContext: Boolean;
    function get_ErrorMessage: string;
    procedure set_ErrorMessage(value: string);
    function get_ErrorMessageResourceName: string;
    procedure set_ErrorMessageResourceName(value: string);
    function get_ErrorMessageResourceType: DDN.mscorlib.DNType;
    procedure set_ErrorMessageResourceType(value: DDN.mscorlib.DNType);
    function get_TypeId: DDN.mscorlib.DNObject;

  { methods } 

    ///<summary>Determines whether a specified object is valid.</summary>
    ///  <param name="value">The object to validate.</param>
    ///<returns><see langword="true" />
    ///  if the specified object is valid; otherwise, <see langword="false" />
    ///  .</returns>
    ///<exception cref="T:System.ArgumentOutOfRangeException"><paramref name="maximumLength" />
    ///  is negative.-or-
    ///  <paramref name="maximumLength" />
    ///  is less than <see cref="P:System.ComponentModel.DataAnnotations.StringLengthAttribute.MinimumLength" />
    ///  .</exception>
    function IsValid(value: DDN.mscorlib.DNObject): Boolean;
    ///<summary>Applies formatting to a specified error message.</summary>
    ///  <param name="name">The name of the field that caused the validation failure.</param>
    ///<returns>The formatted error message.</returns>
    ///<exception cref="T:System.ArgumentOutOfRangeException"><paramref name="maximumLength" />
    ///  is negative. -or-
    ///  <paramref name="maximumLength" />
    ///  is less than <paramref name="minimumLength" />
    ///  .</exception>
    function FormatErrorMessage(name: string): string;
    ///<summary>Validates the specified object.</summary>
    ///  <param name="value">The value of the object to validate.</param>
    ///  <param name="name">The name to include in the error message.</param>
    ///<exception cref="T:System.ComponentModel.DataAnnotations.ValidationException"><paramref name="value" />
    ///  is not valid.</exception>
    procedure Validate(value: DDN.mscorlib.DNObject; name: string); overload;
    ///<summary>Validates the specified object.</summary>
    ///  <param name="value">The object to validate.</param>
    ///  <param name="validationContext">The <see cref="T:System.ComponentModel.DataAnnotations.ValidationContext" />
    ///  object that describes the context where the validation checks are performed. This parameter cannot be <see langword="null" />
    ///  .</param>
    ///<exception cref="T:System.ComponentModel.DataAnnotations.ValidationException">Validation failed.</exception>
    procedure Validate(value: DDN.mscorlib.DNObject; validationContext: DNValidationContext); overload;
    ///<summary>Checks whether the specified value is valid with respect to the current validation attribute.</summary>
    ///  <param name="value">The value to validate.</param>
    ///  <param name="validationContext">The context information about the validation operation.</param>
    ///<returns>An instance of the <see cref="T:System.ComponentModel.DataAnnotations.ValidationResult" />
    ///  class. </returns>
    function GetValidationResult(value: DDN.mscorlib.DNObject; validationContext: DNValidationContext): DNValidationResult;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DDN.mscorlib.DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>Gets or sets the maximum length of a string.</summary>
    ///<returns>The maximum length a string. </returns>
    property MaximumLength: Int32 read get_MaximumLength;
    ///<summary>Gets or sets the minimum length of a string.</summary>
    ///<returns>The minimum length of a string.</returns>
    property MinimumLength: Int32 read get_MinimumLength write set_MinimumLength;
    ///<summary>Gets a value that indicates whether the attribute requires validation context.</summary>
    ///<returns><see langword="true" />
    ///  if the attribute requires validation context; otherwise, <see langword="false" />
    ///  .</returns>
    property RequiresValidationContext: Boolean read get_RequiresValidationContext;
    ///<summary>Gets or sets an error message to associate with a validation control if validation fails.</summary>
    ///<returns>The error message that is associated with the validation control.</returns>
    property ErrorMessage: string read get_ErrorMessage write set_ErrorMessage;
    ///<summary>Gets or sets the error message resource name to use in order to look up the <see cref="P:System.ComponentModel.DataAnnotations.ValidationAttribute.ErrorMessageResourceType" />
    ///  property value if validation fails.</summary>
    ///<returns>The error message resource that is associated with a validation control.</returns>
    property ErrorMessageResourceName: string read get_ErrorMessageResourceName write set_ErrorMessageResourceName;
    ///<summary>Gets or sets the resource type to use for error-message lookup if validation fails.</summary>
    ///<returns>The type of error message that is associated with a validation control.</returns>
    property ErrorMessageResourceType: DDN.mscorlib.DNType read get_ErrorMessageResourceType write set_ErrorMessageResourceType;
    property TypeId: DDN.mscorlib.DNObject read get_TypeId;
  end;

  TDNStringLengthAttribute = class(TDNGenericImport<DNStringLengthAttributeClass, DNStringLengthAttribute>) end;

  //-------------namespace: System.ComponentModel.DataAnnotations----------------
  DNValidationContextClass = interface(DNObjectClass)
  ['{DFEDEDFA-6A77-5E78-AE67-2C9A91762E0A}']
  { constructors } 

    ///<summary>Initializes a new instance of the <see cref="T:System.ComponentModel.DataAnnotations.ValidationContext" />
    ///  class using the specified object instance</summary>
    ///  <param name="instance">The object instance to validate. It cannot be <see langword="null" />
    ///  .</param>
    {class} function init(instance: DDN.mscorlib.DNObject): DNValidationContext; overload;
    {class} function init(instance: DDN.mscorlib.DNObject; items: DDN.mscorlib.DNIDictionary<DDN.mscorlib.DNObject, DDN.mscorlib.DNObject>): DNValidationContext; overload;
    {class} function init(instance: DDN.mscorlib.DNObject; serviceProvider: DDN.mscorlib.DNIServiceProvider; items: DDN.mscorlib.DNIDictionary<DDN.mscorlib.DNObject, DDN.mscorlib.DNObject>): DNValidationContext; overload;

  end;

  ///<summary>Describes the context in which a validation check is performed.</summary>
  [DNTypeName('System.ComponentModel.DataAnnotations.ValidationContext')]
  DNValidationContext = interface(DDN.mscorlib.DNIServiceProvider)
  ['{13413F9C-FEB5-3AA3-9E47-57765FE3E971}']
  { getters & setters } 

    function get_ObjectInstance: DDN.mscorlib.DNObject;
    function get_ObjectType: DDN.mscorlib.DNType;
    function get_DisplayName: string;
    procedure set_DisplayName(value: string);
    function get_MemberName: string;
    procedure set_MemberName(value: string);
    function get_Items: DDN.mscorlib.DNIDictionary<DDN.mscorlib.DNObject, DDN.mscorlib.DNObject>;
    function get_ServiceContainer: DDN.System.DNIServiceContainer;

  { methods } 

    procedure InitializeServiceProvider(serviceProvider: DDN.mscorlib.DNFunc<DDN.mscorlib.DNType, DDN.mscorlib.DNObject>);
    ///<summary>Returns the service that provides custom validation.</summary>
    ///  <param name="serviceType">The type of the service to use for validation.</param>
    ///<returns>An instance of the service, or <see langword="null" />
    ///  if the service is not available.</returns>
    function GetService(serviceType: DDN.mscorlib.DNType): DDN.mscorlib.DNObject;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>Gets the object to validate.</summary>
    ///<returns>The object to validate.</returns>
    property ObjectInstance: DDN.mscorlib.DNObject read get_ObjectInstance;
    ///<summary>Gets the type of the object to validate.</summary>
    ///<returns>The type of the object to validate.</returns>
    property ObjectType: DDN.mscorlib.DNType read get_ObjectType;
    ///<summary>Gets or sets the name of the member to validate. </summary>
    ///<returns>The name of the member to validate. </returns>
    property DisplayName: string read get_DisplayName write set_DisplayName;
    ///<summary>Gets or sets the name of the member to validate. </summary>
    ///<returns>The name of the member to validate. </returns>
    property MemberName: string read get_MemberName write set_MemberName;
    ///<summary>Gets the dictionary of key/value pairs that is associated with this context.</summary>
    ///<returns>The dictionary of the key/value pairs for this context.</returns>
    property Items: DDN.mscorlib.DNIDictionary<DDN.mscorlib.DNObject, DDN.mscorlib.DNObject> read get_Items;
    ///<summary>Gets the validation services container.</summary>
    ///<returns>The validation services container.</returns>
    property ServiceContainer: DDN.System.DNIServiceContainer read get_ServiceContainer;
  end;

  TDNValidationContext = class(TDNGenericImport<DNValidationContextClass, DNValidationContext>) end;

  //-------------namespace: System.ComponentModel.DataAnnotations----------------
  DNValidationResultClass = interface(DDN.mscorlib.DNObjectClass)
  ['{8DD53DA4-91F8-5992-B0E7-0B95CA1D9537}']
  { constructors } 

    ///<summary>Initializes a new instance of the <see cref="T:System.ComponentModel.DataAnnotations.ValidationResult" />
    ///  class by using an error message.</summary>
    ///  <param name="errorMessage">The error message.</param>
    {class} function init(errorMessage: string): DNValidationResult; overload;
    {class} function init(errorMessage: string; memberNames: DDN.mscorlib.DNIEnumerable<string>): DNValidationResult; overload;

  { static fields getter & setter } 

   function __fakeFieldGet_Success: DNValidationResult;

  { static fields } 

    ///<summary>Represents the success of the validation (<see langword="true" />
    ///  if validation was successful; otherwise, <see langword="false" />
    ///  ).</summary>
    {class} property Success: DNValidationResult read __fakeFieldGet_Success;

  end;

  ///<summary>Represents a container for the results of a validation request.</summary>
  [DNTypeName('System.ComponentModel.DataAnnotations.ValidationResult')]
  DNValidationResult = interface(DDN.mscorlib.DNObject)
  ['{72A73F37-E362-3D31-ADF1-0DEF7F66164F}']
  { getters & setters } 

    function get_MemberNames: DDN.mscorlib.DNIEnumerable<string>;
    function get_ErrorMessage: string;
    procedure set_ErrorMessage(value: string);

  { methods } 

    ///<summary>Returns a string representation of the current validation result.</summary>
    ///<returns>The current validation result.</returns>
    function ToString: string;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    ///<summary>Gets the collection of member names that indicate which fields have validation errors.</summary>
    ///<returns>The collection of member names that indicate which fields have validation errors.</returns>
    property MemberNames: DDN.mscorlib.DNIEnumerable<string> read get_MemberNames;
    ///<summary>Gets the error message for the validation.</summary>
    ///<returns>The error message for the validation.</returns>
    property ErrorMessage: string read get_ErrorMessage write set_ErrorMessage;
  end;

  TDNValidationResult = class(TDNGenericImport<DNValidationResultClass, DNValidationResult>) end;

  //-------------namespace: System.ComponentModel.DataAnnotations----------------
  DNValidatorClass = interface(DDN.mscorlib.DNObjectClass)
  ['{7F0B6EE4-CD62-564C-8F74-0C66769094B2}']
  { static methods } 

    {class} function TryValidateProperty(value: DDN.mscorlib.DNObject; validationContext: DNValidationContext; validationResults: DDN.mscorlib.DNICollection<DNValidationResult>): Boolean;
    {class} function TryValidateObject(instance: DDN.mscorlib.DNObject; validationContext: DNValidationContext; validationResults: DDN.mscorlib.DNICollection<DNValidationResult>): Boolean; overload;
    {class} function TryValidateObject(instance: DDN.mscorlib.DNObject; validationContext: DNValidationContext; validationResults: DDN.mscorlib.DNICollection<DNValidationResult>; validateAllProperties: Boolean): Boolean; overload;
    {class} function TryValidateValue(value: DDN.mscorlib.DNObject; validationContext: DNValidationContext; validationResults: DDN.mscorlib.DNICollection<DNValidationResult>; validationAttributes: DDN.mscorlib.DNIEnumerable<DNValidationAttribute>): Boolean;
    ///<summary>Determines whether the specified object is valid using the validation context.</summary>
    ///  <param name="instance">The object to validate.</param>
    ///  <param name="validationContext">The context that describes the object to validate.</param>
    ///<exception cref="T:System.ComponentModel.DataAnnotations.ValidationException">The object is not valid.</exception><exception cref="T:System.ArgumentNullException"><paramref name="instance" />
    ///  is <see langword="null" />
    ///  .</exception>
    {class} procedure ValidateObject(instance: DDN.mscorlib.DNObject; validationContext: DNValidationContext); overload;
    ///<summary>Validates the property.</summary>
    ///  <param name="value">The value to validate.</param>
    ///  <param name="validationContext">The context that describes the property to validate.</param>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="value" />
    ///  cannot be assigned to the property.</exception><exception cref="T:System.ComponentModel.DataAnnotations.ValidationException">The <paramref name="value" />
    ///  parameter is not valid.</exception>
    {class} procedure ValidateProperty(value: DDN.mscorlib.DNObject; validationContext: DNValidationContext);
    ///<summary>Determines whether the specified object is valid using the validation context, and a value that specifies whether to validate all properties.</summary>
    ///  <param name="instance">The object to validate.</param>
    ///  <param name="validationContext">The context that describes the object to validate.</param>
    ///  <param name="validateAllProperties"><see langword="true" />
    ///  to validate all properties; otherwise, <see langword="false" />
    ///  .</param>
    ///<exception cref="T:System.ComponentModel.DataAnnotations.ValidationException"><paramref name="instance" />
    ///  is not valid.</exception><exception cref="T:System.ArgumentNullException"><paramref name="instance" />
    ///  is <see langword="null" />
    ///  .</exception>
    {class} procedure ValidateObject(instance: DDN.mscorlib.DNObject; validationContext: DNValidationContext; validateAllProperties: Boolean); overload;
    {class} procedure ValidateValue(value: DDN.mscorlib.DNObject; validationContext: DNValidationContext; validationAttributes: DDN.mscorlib.DNIEnumerable<DNValidationAttribute>);

  end;

  ///<summary>Defines a helper class that can be used to validate objects, properties, and methods when it is included in their associated <see cref="T:System.ComponentModel.DataAnnotations.ValidationAttribute" />
  ///  attributes.</summary>
  [DNTypeName('System.ComponentModel.DataAnnotations.Validator')]
  DNValidator = interface(DDN.mscorlib.DNObject)
  ['{49F0947B-ECC6-33A2-9F41-22175AA1DB20}']
  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNValidator = class(TDNGenericImport<DNValidatorClass, DNValidator>) end;

  //-------------namespace: System.ComponentModel.DataAnnotations----------------
  DNAssociatedMetadataTypeTypeDescriptionProviderClass = interface(DNObjectClass)
  ['{F1D3B7D7-28D5-5C29-93C0-AC88B7ECA91F}']
  { constructors } 

    ///<summary>Initializes a new instance of the <see cref="T:System.ComponentModel.DataAnnotations.AssociatedMetadataTypeTypeDescriptionProvider" />
    ///  class by using the specified type.</summary>
    ///  <param name="type">The type for which the metadata provider is created.</param>
    {class} function init(&type: DDN.mscorlib.DNType): DNAssociatedMetadataTypeTypeDescriptionProvider; overload;
    ///<summary>Initializes a new instance of the <see cref="T:System.ComponentModel.DataAnnotations.AssociatedMetadataTypeTypeDescriptionProvider" />
    ///  class by using the specified metadata provider type and associated type.</summary>
    ///  <param name="type">The type for which the metadata provider is created.</param>
    ///  <param name="associatedMetadataType">The associated type that contains the metadata.</param>
    ///<exception cref="T:System.ArgumentNullException">The value of <paramref name="associatedMetadataType" />
    ///  is <see langword="null" />
    ///  .</exception>
    {class} function init(&type: DDN.mscorlib.DNType; associatedMetadataType: DDN.mscorlib.DNType): DNAssociatedMetadataTypeTypeDescriptionProvider; overload;

  end;

  ///<summary>Extends the metadata information for a class by adding attributes and property information that is defined in an associated class.</summary>
  [DNTypeName('System.ComponentModel.DataAnnotations.AssociatedMetadataTypeTypeDescriptionProvider')]
  DNAssociatedMetadataTypeTypeDescriptionProvider = interface(DNObject)
  ['{C33A37F1-AA37-38E9-BADF-AC552B06A2A0}']
  { methods } 

    ///<summary>Gets a type descriptor for the specified type and object.</summary>
    ///  <param name="objectType">The type of object to retrieve the type descriptor for.</param>
    ///  <param name="instance">An instance of the type. </param>
    ///<returns>The descriptor that provides metadata for the type.</returns>
    function GetTypeDescriptor(objectType: DDN.mscorlib.DNType; instance: DDN.mscorlib.DNObject): DDN.System.DNICustomTypeDescriptor; overload;
    function GetExtendedTypeDescriptor(instance: DDN.mscorlib.DNObject): DDN.System.DNICustomTypeDescriptor;
    function CreateInstance(provider: DDN.mscorlib.DNIServiceProvider; objectType: DDN.mscorlib.DNType; argTypes: TArray<DDN.mscorlib.DNType>; args: TArray<DDN.mscorlib.DNObject>): DDN.mscorlib.DNObject;
    function GetCache(instance: DDN.mscorlib.DNObject): DDN.mscorlib.DNIDictionary;
    function GetFullComponentName(component: DDN.mscorlib.DNObject): string;
    function GetReflectionType(objectType: DDN.mscorlib.DNType): DDN.mscorlib.DNType; overload;
    function GetReflectionType(instance: DDN.mscorlib.DNObject): DDN.mscorlib.DNType; overload;
    function GetReflectionType(objectType: DDN.mscorlib.DNType; instance: DDN.mscorlib.DNObject): DDN.mscorlib.DNType; overload;
    function GetRuntimeType(reflectionType: DDN.mscorlib.DNType): DDN.mscorlib.DNType;
    function GetTypeDescriptor(objectType: DDN.mscorlib.DNType): DDN.System.DNICustomTypeDescriptor; overload;
    function GetTypeDescriptor(instance: DDN.mscorlib.DNObject): DDN.System.DNICustomTypeDescriptor; overload;
    function IsSupportedType(&type: DDN.mscorlib.DNType): Boolean;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNAssociatedMetadataTypeTypeDescriptionProvider = class(TDNGenericImport<DNAssociatedMetadataTypeTypeDescriptionProviderClass, DNAssociatedMetadataTypeTypeDescriptionProvider>) end;

  //-------------namespace: System.ComponentModel.DataAnnotations----------------
  DNValidationExceptionClass = interface(DDN.mscorlib.DNExceptionClass)
  ['{7F4AC8F4-8913-5E6E-B3DB-840018483359}']
  { constructors } 

    ///<summary>Initializes a new instance of the <see cref="T:System.ComponentModel.DataAnnotations.ValidationException" />
    ///  class by using a validation result, a validation attribute, and the value of the current exception.</summary>
    ///  <param name="validationResult">The list of validation results.</param>
    ///  <param name="validatingAttribute">The attribute that caused the current exception.</param>
    ///  <param name="value">The value of the object that caused the attribute to trigger the validation error.</param>
    {class} function init(validationResult: DNValidationResult; validatingAttribute: DNValidationAttribute; value: DDN.mscorlib.DNObject): DNValidationException; overload;
    ///<summary>Initializes a new instance of the <see cref="T:System.ComponentModel.DataAnnotations.ValidationException" />
    ///  class using a specified error message, a validation attribute, and the value of the current exception.</summary>
    ///  <param name="errorMessage">The message that states the error.</param>
    ///  <param name="validatingAttribute">The attribute that caused the current exception.</param>
    ///  <param name="value">The value of the object that caused the attribute to trigger validation error.</param>
    {class} function init(errorMessage: string; validatingAttribute: DNValidationAttribute; value: DDN.mscorlib.DNObject): DNValidationException; overload;
    ///<summary>Initializes a new instance of the <see cref="T:System.ComponentModel.DataAnnotations.ValidationException" />
    ///  class using an error message generated by the system.</summary>
    {class} function init: DNValidationException; overload;
    ///<summary>Initializes a new instance of the <see cref="T:System.ComponentModel.DataAnnotations.ValidationException" />
    ///  class using a specified error message.</summary>
    ///  <param name="message">A specified message that states the error.</param>
    {class} function init(message: string): DNValidationException; overload;
    ///<summary>Initializes a new instance of the <see cref="T:System.ComponentModel.DataAnnotations.ValidationException" />
    ///  class using a specified error message and a collection of inner exception instances.</summary>
    ///  <param name="message">The error message. </param>
    ///  <param name="innerException">The collection of validation exceptions.</param>
    {class} function init(message: string; innerException: DDN.mscorlib.DNException): DNValidationException; overload;

  end;

  ///<summary>Represents the exception that occurs during validation of a data field when the <see cref="T:System.ComponentModel.DataAnnotations.ValidationAttribute" />
  ///  class is used. </summary>
  [DNTypeName('System.ComponentModel.DataAnnotations.ValidationException')]
  DNValidationException = interface(DDN.mscorlib.DNException)
  ['{A2933A3B-7254-365F-A30F-EE4A120245EA}']
  { getters & setters } 

    function get_ValidationAttribute: DNValidationAttribute;
    function get_ValidationResult: DNValidationResult;
    function get_Value: DDN.mscorlib.DNObject;
    function get_Message: string;
    function get_Data: DDN.mscorlib.DNIDictionary;
    function get_InnerException: DDN.mscorlib.DNException;
    function get_TargetSite: DDN.mscorlib.DNMethodBase;
    function get_StackTrace: string;
    function get_HelpLink: string;
    procedure set_HelpLink(value: string);
    function get_Source: string;
    procedure set_Source(value: string);
    function get_HResult: Int32;

  { methods } 

    function GetBaseException: DDN.mscorlib.DNException;
    function ToString: string;
    procedure GetObjectData(info: DDN.mscorlib.DNSerializationInfo; context: DDN.mscorlib.DNStreamingContext);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    ///<summary>Gets the instance of the <see cref="T:System.ComponentModel.DataAnnotations.ValidationAttribute" />
    ///  class that triggered this exception.</summary>
    ///<returns>An instance of the validation attribute type that triggered this exception.</returns>
    property ValidationAttribute: DNValidationAttribute read get_ValidationAttribute;
    ///<summary>Gets the <see cref="P:System.ComponentModel.DataAnnotations.ValidationException.ValidationResult" />
    ///  instance that describes the validation error.</summary>
    ///<returns>The <see cref="P:System.ComponentModel.DataAnnotations.ValidationException.ValidationResult" />
    ///  instance that describes the validation error.</returns>
    property ValidationResult: DNValidationResult read get_ValidationResult;
    ///<summary>Gets the value of the object that causes the <see cref="T:System.ComponentModel.DataAnnotations.ValidationAttribute" />
    ///  class to trigger this exception.</summary>
    ///<returns>The value of the object that caused the <see cref="T:System.ComponentModel.DataAnnotations.ValidationAttribute" />
    ///  class to trigger the validation error.</returns>
    property Value: DDN.mscorlib.DNObject read get_Value;
    property Message: string read get_Message;
    property Data: DDN.mscorlib.DNIDictionary read get_Data;
    property InnerException: DDN.mscorlib.DNException read get_InnerException;
    property TargetSite: DDN.mscorlib.DNMethodBase read get_TargetSite;
    property StackTrace: string read get_StackTrace;
    property HelpLink: string read get_HelpLink write set_HelpLink;
    property Source: string read get_Source write set_Source;
    property HResult: Int32 read get_HResult;
  end;

  TDNValidationException = class(TDNGenericImport<DNValidationExceptionClass, DNValidationException>) end;


implementation


initialization
  LoadAssemblyModule('System.ComponentModel.DataAnnotations.dll', True);

finalization

end.
