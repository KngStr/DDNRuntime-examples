//----------------------------------------------------------------------------
//  System.Collections.Immutable.dll: System.Collections.Immutable, Version=1.2.5.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a
//----------------------------------------------------------------------------
//  The code is automatically generated by the GenCodeNET tool.
//----------------------------------------------------------------------------
//  .NET Core 3.1.18
//----------------------------------------------------------------------------
//  UnitName: DDNC.System.Collections.Immutable
//  Author: ying32
//----------------------------------------------------------------------------

unit DDNC.System.Collections.Immutable;

{$IFDEF FPC}
  {$mode delphi}//{$H+}
  {$modeswitch advancedrecords}
  {$modeswitch prefixedattributes} // Custom attributes featureï¼Œfpc3.2.2+
{$ENDIF}

interface

uses
  DDN.Runtime,
  DDNC.System.Private.CoreLib;

type


{ declares }

  DNIImmutableDictionary<TKey, TValue> = interface; // type: System.Collections.Immutable.IImmutableDictionary`2, namespace: System.Collections.Immutable
  DNIImmutableList<T> = interface; // type: System.Collections.Immutable.IImmutableList`1, namespace: System.Collections.Immutable
  DNIImmutableSet<T> = interface; // type: System.Collections.Immutable.IImmutableSet`1, namespace: System.Collections.Immutable
  DNIImmutableQueue<T> = interface; // type: System.Collections.Immutable.IImmutableQueue`1, namespace: System.Collections.Immutable
  DNIImmutableStack<T> = interface; // type: System.Collections.Immutable.IImmutableStack`1, namespace: System.Collections.Immutable
  DNImmutableArray_Builder<T> = interface; // type: System.Collections.Immutable.ImmutableArray`1+Builder, namespace: System.Collections.Immutable
  DNImmutableArray = interface; // type: System.Collections.Immutable.ImmutableArray, namespace: System.Collections.Immutable
  DNImmutableDictionary<TKey, TValue> = interface; // type: System.Collections.Immutable.ImmutableDictionary`2, namespace: System.Collections.Immutable
  DNImmutableDictionary_Builder<TKey, TValue> = interface; // type: System.Collections.Immutable.ImmutableDictionary`2+Builder, namespace: System.Collections.Immutable
  DNImmutableDictionary = interface; // type: System.Collections.Immutable.ImmutableDictionary, namespace: System.Collections.Immutable
  DNImmutableHashSet<T> = interface; // type: System.Collections.Immutable.ImmutableHashSet`1, namespace: System.Collections.Immutable
  DNImmutableHashSet_Builder<T> = interface; // type: System.Collections.Immutable.ImmutableHashSet`1+Builder, namespace: System.Collections.Immutable
  DNImmutableHashSet = interface; // type: System.Collections.Immutable.ImmutableHashSet, namespace: System.Collections.Immutable
  DNImmutableInterlocked = interface; // type: System.Collections.Immutable.ImmutableInterlocked, namespace: System.Collections.Immutable
  DNImmutableList<T> = interface; // type: System.Collections.Immutable.ImmutableList`1, namespace: System.Collections.Immutable
  DNImmutableList_Builder<T> = interface; // type: System.Collections.Immutable.ImmutableList`1+Builder, namespace: System.Collections.Immutable
  DNImmutableList = interface; // type: System.Collections.Immutable.ImmutableList, namespace: System.Collections.Immutable
  DNImmutableQueue<T> = interface; // type: System.Collections.Immutable.ImmutableQueue`1, namespace: System.Collections.Immutable
  DNImmutableQueue = interface; // type: System.Collections.Immutable.ImmutableQueue, namespace: System.Collections.Immutable
  DNImmutableSortedDictionary<TKey, TValue> = interface; // type: System.Collections.Immutable.ImmutableSortedDictionary`2, namespace: System.Collections.Immutable
  DNImmutableSortedDictionary_Builder<TKey, TValue> = interface; // type: System.Collections.Immutable.ImmutableSortedDictionary`2+Builder, namespace: System.Collections.Immutable
  DNImmutableSortedDictionary = interface; // type: System.Collections.Immutable.ImmutableSortedDictionary, namespace: System.Collections.Immutable
  DNImmutableSortedSet<T> = interface; // type: System.Collections.Immutable.ImmutableSortedSet`1, namespace: System.Collections.Immutable
  DNImmutableSortedSet_Builder<T> = interface; // type: System.Collections.Immutable.ImmutableSortedSet`1+Builder, namespace: System.Collections.Immutable
  DNImmutableSortedSet = interface; // type: System.Collections.Immutable.ImmutableSortedSet, namespace: System.Collections.Immutable
  DNImmutableStack<T> = interface; // type: System.Collections.Immutable.ImmutableStack`1, namespace: System.Collections.Immutable
  DNImmutableStack = interface; // type: System.Collections.Immutable.ImmutableStack, namespace: System.Collections.Immutable
  DNImmutableArrayExtensions = interface; // type: System.Linq.ImmutableArrayExtensions, namespace: System.Linq
  DNImmutableArray<T> = interface; // type: System.Collections.Immutable.ImmutableArray`1, namespace: System.Collections.Immutable
  DNImmutableArray_Enumerator<T> = interface; // type: System.Collections.Immutable.ImmutableArray`1+Enumerator, namespace: System.Collections.Immutable
  DNImmutableDictionary_Enumerator<TKey, TValue> = interface; // type: System.Collections.Immutable.ImmutableDictionary`2+Enumerator, namespace: System.Collections.Immutable
  DNImmutableHashSet_Enumerator<T> = interface; // type: System.Collections.Immutable.ImmutableHashSet`1+Enumerator, namespace: System.Collections.Immutable
  DNImmutableList_Enumerator<T> = interface; // type: System.Collections.Immutable.ImmutableList`1+Enumerator, namespace: System.Collections.Immutable
  DNImmutableQueue_Enumerator<T> = interface; // type: System.Collections.Immutable.ImmutableQueue`1+Enumerator, namespace: System.Collections.Immutable
  DNImmutableSortedDictionary_Enumerator<TKey, TValue> = interface; // type: System.Collections.Immutable.ImmutableSortedDictionary`2+Enumerator, namespace: System.Collections.Immutable
  DNImmutableSortedSet_Enumerator<T> = interface; // type: System.Collections.Immutable.ImmutableSortedSet`1+Enumerator, namespace: System.Collections.Immutable
  DNImmutableStack_Enumerator<T> = interface; // type: System.Collections.Immutable.ImmutableStack`1+Enumerator, namespace: System.Collections.Immutable


{ objects }

  //-------------namespace: System.Collections.Immutable----------------
  [DNTypeName('System.Collections.Immutable.IImmutableDictionary`2')]
  DNIImmutableDictionary<TKey, TValue> = interface(DDNC.System.Private.CoreLib.DNIReadOnlyDictionary<TKey, TValue>)
  ['{39EFFA9F-1802-34FF-80E0-18981EBBD4D0}']
  { methods } 

    function Clear: DNIImmutableDictionary<TKey, TValue>;
    function Add(key: TKey; value: TValue): DNIImmutableDictionary<TKey, TValue>;
    function AddRange(pairs: DDNC.System.Private.CoreLib.DNIEnumerable<DDNC.System.Private.CoreLib.DNKeyValuePair<TKey, TValue>>): DNIImmutableDictionary<TKey, TValue>;
    function SetItem(key: TKey; value: TValue): DNIImmutableDictionary<TKey, TValue>;
    function SetItems(items: DDNC.System.Private.CoreLib.DNIEnumerable<DDNC.System.Private.CoreLib.DNKeyValuePair<TKey, TValue>>): DNIImmutableDictionary<TKey, TValue>;
    function RemoveRange(keys: DDNC.System.Private.CoreLib.DNIEnumerable<TKey>): DNIImmutableDictionary<TKey, TValue>;
    function Remove(key: TKey): DNIImmutableDictionary<TKey, TValue>;
    function &Contains(pair: DDNC.System.Private.CoreLib.DNKeyValuePair<TKey, TValue>): Boolean;
    function TryGetKey(equalKey: TKey; out actualKey: TKey): Boolean;

  end;

  //-------------namespace: System.Collections.Immutable----------------
  [DNTypeName('System.Collections.Immutable.IImmutableList`1')]
  DNIImmutableList<T> = interface(DDNC.System.Private.CoreLib.DNIReadOnlyList<T>)
  ['{26D524FD-8B27-3B73-9543-208B3FD97910}']
  { methods } 

    function Clear: DNIImmutableList<T>;
    function IndexOf(item: T; index: Int32; count: Int32; equalityComparer: DDNC.System.Private.CoreLib.DNIEqualityComparer<T>): Int32;
    function LastIndexOf(item: T; index: Int32; count: Int32; equalityComparer: DDNC.System.Private.CoreLib.DNIEqualityComparer<T>): Int32;
    function Add(value: T): DNIImmutableList<T>;
    function AddRange(items: DDNC.System.Private.CoreLib.DNIEnumerable<T>): DNIImmutableList<T>;
    function Insert(index: Int32; element: T): DNIImmutableList<T>;
    function InsertRange(index: Int32; items: DDNC.System.Private.CoreLib.DNIEnumerable<T>): DNIImmutableList<T>;
    function Remove(value: T; equalityComparer: DDNC.System.Private.CoreLib.DNIEqualityComparer<T>): DNIImmutableList<T>;
    function RemoveAll(match: DDNC.System.Private.CoreLib.DNPredicate<T>): DNIImmutableList<T>;
    function RemoveRange(items: DDNC.System.Private.CoreLib.DNIEnumerable<T>; equalityComparer: DDNC.System.Private.CoreLib.DNIEqualityComparer<T>): DNIImmutableList<T>; overload;
    function RemoveRange(index: Int32; count: Int32): DNIImmutableList<T>; overload;
    function RemoveAt(index: Int32): DNIImmutableList<T>;
    function SetItem(index: Int32; value: T): DNIImmutableList<T>;
    function Replace(oldValue: T; newValue: T; equalityComparer: DDNC.System.Private.CoreLib.DNIEqualityComparer<T>): DNIImmutableList<T>;

  end;

  //-------------namespace: System.Collections.Immutable----------------
  [DNTypeName('System.Collections.Immutable.IImmutableSet`1')]
  DNIImmutableSet<T> = interface(DDNC.System.Private.CoreLib.DNIReadOnlyCollection<T>)
  ['{B040AC84-1F1D-3505-8BE4-FB08563E0D03}']
  { methods } 

    function Clear: DNIImmutableSet<T>;
    function &Contains(value: T): Boolean;
    function Add(value: T): DNIImmutableSet<T>;
    function Remove(value: T): DNIImmutableSet<T>;
    function TryGetValue(equalValue: T; out actualValue: T): Boolean;
    function Intersect(other: DDNC.System.Private.CoreLib.DNIEnumerable<T>): DNIImmutableSet<T>;
    function &Except(other: DDNC.System.Private.CoreLib.DNIEnumerable<T>): DNIImmutableSet<T>;
    function SymmetricExcept(other: DDNC.System.Private.CoreLib.DNIEnumerable<T>): DNIImmutableSet<T>;
    function Union(other: DDNC.System.Private.CoreLib.DNIEnumerable<T>): DNIImmutableSet<T>;
    function SetEquals(other: DDNC.System.Private.CoreLib.DNIEnumerable<T>): Boolean;
    function IsProperSubsetOf(other: DDNC.System.Private.CoreLib.DNIEnumerable<T>): Boolean;
    function IsProperSupersetOf(other: DDNC.System.Private.CoreLib.DNIEnumerable<T>): Boolean;
    function IsSubsetOf(other: DDNC.System.Private.CoreLib.DNIEnumerable<T>): Boolean;
    function IsSupersetOf(other: DDNC.System.Private.CoreLib.DNIEnumerable<T>): Boolean;
    function Overlaps(other: DDNC.System.Private.CoreLib.DNIEnumerable<T>): Boolean;

  end;

  //-------------namespace: System.Collections.Immutable----------------
  [DNTypeName('System.Collections.Immutable.IImmutableQueue`1')]
  DNIImmutableQueue<T> = interface(DDNC.System.Private.CoreLib.DNIEnumerable<T>)
  ['{F1EE422F-4F18-3468-93B1-3C72CCDF2B29}']
  { getters & setters } 

    function get_IsEmpty: Boolean;

  { methods } 

    function Clear: DNIImmutableQueue<T>;
    function Peek: T;
    function Enqueue(value: T): DNIImmutableQueue<T>;
    function Dequeue: DNIImmutableQueue<T>;

  { propertys } 

    property IsEmpty: Boolean read get_IsEmpty;
  end;

  //-------------namespace: System.Collections.Immutable----------------
  [DNTypeName('System.Collections.Immutable.IImmutableStack`1')]
  DNIImmutableStack<T> = interface(DDNC.System.Private.CoreLib.DNIEnumerable<T>)
  ['{3740202A-E4E9-3C75-8459-DAE2011949BE}']
  { getters & setters } 

    function get_IsEmpty: Boolean;

  { methods } 

    function Clear: DNIImmutableStack<T>;
    function Push(value: T): DNIImmutableStack<T>;
    function Pop: DNIImmutableStack<T>;
    function Peek: T;

  { propertys } 

    property IsEmpty: Boolean read get_IsEmpty;
  end;

  //-------------namespace: System.Collections.Immutable----------------
  DNImmutableArray_BuilderClass<T> = interface(DNObjectClass)
  ['{AE6C9F5E-3C74-5AD6-8DF3-309DBA73C4F9}']
  end;

  [DNTypeName('System.Collections.Immutable.ImmutableArray`1+Builder')]
  DNImmutableArray_Builder<T> = interface(DDNC.System.Private.CoreLib.DNIList<T>)
  ['{CDEE934D-99E2-3436-8DE8-03261B2886D6}']
  { getters & setters } 

    function get_Capacity: Int32;
    procedure set_Capacity(value: Int32);
    function get_Count: Int32;
    procedure set_Count(value: Int32);

  { methods } 

    function ItemRef(index: Int32): T;
    function ToImmutable: DNImmutableArray<T>;
    function MoveToImmutable: DNImmutableArray<T>;
    procedure Insert(index: Int32; item: T);
    procedure AddRange(items: DDNC.System.Private.CoreLib.DNIEnumerable<T>); overload;
    procedure AddRange(items: TArray<T>); overload;
    procedure AddRange(items: TArray<T>; length: Int32); overload;
    procedure AddRange(items: DNImmutableArray<T>); overload;
    procedure AddRange(items: DNImmutableArray<T>; length: Int32); overload;
    procedure AddRange(items: DNImmutableArray_Builder<T>); overload;
    procedure RemoveAt(index: Int32);
    function &Contains(item: T): Boolean;
    function ToArray: TArray<T>;
    procedure CopyTo(&array: TArray<T>; index: Int32);
    function IndexOf(item: T): Int32; overload;
    function IndexOf(item: T; startIndex: Int32): Int32; overload;
    function IndexOf(item: T; startIndex: Int32; count: Int32): Int32; overload;
    function IndexOf(item: T; startIndex: Int32; count: Int32; equalityComparer: DDNC.System.Private.CoreLib.DNIEqualityComparer<T>): Int32; overload;
    function LastIndexOf(item: T): Int32; overload;
    function LastIndexOf(item: T; startIndex: Int32): Int32; overload;
    function LastIndexOf(item: T; startIndex: Int32; count: Int32): Int32; overload;
    function LastIndexOf(item: T; startIndex: Int32; count: Int32; equalityComparer: DDNC.System.Private.CoreLib.DNIEqualityComparer<T>): Int32; overload;
    procedure Reverse;
    procedure Sort; overload;
    procedure Sort(comparison: DDNC.System.Private.CoreLib.DNComparison<T>); overload;
    procedure Sort(comparer: DDNC.System.Private.CoreLib.DNIComparer<T>); overload;
    procedure Sort(index: Int32; count: Int32; comparer: DDNC.System.Private.CoreLib.DNIComparer<T>); overload;
    function GetEnumerator: DDNC.System.Private.CoreLib.DNIEnumerator<T>;
    function GetType: DDNC.System.Private.CoreLib.DNType;
    function ToString: string;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;

  { propertys } 

    property Capacity: Int32 read get_Capacity write set_Capacity;
    property Count: Int32 read get_Count write set_Count;
  end;

  TDNImmutableArray_Builder<T> = class(TDNGenericImport<DNImmutableArray_BuilderClass<T>, DNImmutableArray_Builder<T>>) end;

  //-------------namespace: System.Collections.Immutable----------------
  DNImmutableArrayClass = interface(DDNC.System.Private.CoreLib.DNObjectClass)
  ['{6A2A3913-0063-5741-BE7D-3435FCF7E655}']
  end;

  [DNTypeName('System.Collections.Immutable.ImmutableArray')]
  DNImmutableArray = interface(DDNC.System.Private.CoreLib.DNObject)
  ['{DC16F680-D8BA-36E3-A29A-A74253BC4030}']
  { methods } 

    function GetType: DDNC.System.Private.CoreLib.DNType;
    function ToString: string;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;

  end;

  TDNImmutableArray = class(TDNGenericImport<DNImmutableArrayClass, DNImmutableArray>) end;

  //-------------namespace: System.Collections.Immutable----------------
  DNImmutableDictionaryClass<TKey, TValue> = interface(DNObjectClass)
  ['{4F0C7B99-511E-546D-BCC9-CBAA66847F15}']
  { static fields getter & setter } 

   function __fakeFieldGet_Empty: DNImmutableDictionary<TKey, TValue>;

  { static fields } 

    {class} property Empty: DNImmutableDictionary<TKey, TValue> read __fakeFieldGet_Empty;

  end;

  [DNTypeName('System.Collections.Immutable.ImmutableDictionary`2')]
  DNImmutableDictionary<TKey, TValue> = interface(DNIImmutableDictionary<TKey, TValue>)
  ['{AEC2C772-61A3-3709-A304-88114879BDFC}']
  { getters & setters } 

    function get_Count: Int32;
    function get_IsEmpty: Boolean;
    function get_KeyComparer: DDNC.System.Private.CoreLib.DNIEqualityComparer<TKey>;
    function get_ValueComparer: DDNC.System.Private.CoreLib.DNIEqualityComparer<TValue>;
    function get_Keys: DDNC.System.Private.CoreLib.DNIEnumerable<TKey>;
    function get_Values: DDNC.System.Private.CoreLib.DNIEnumerable<TValue>;

  { methods } 

    function Clear: DNImmutableDictionary<TKey, TValue>;
    function ToBuilder: DNImmutableDictionary_Builder<TKey, TValue>;
    function Add(key: TKey; value: TValue): DNImmutableDictionary<TKey, TValue>;
    function AddRange(pairs: DDNC.System.Private.CoreLib.DNIEnumerable<DDNC.System.Private.CoreLib.DNKeyValuePair<TKey, TValue>>): DNImmutableDictionary<TKey, TValue>;
    function SetItem(key: TKey; value: TValue): DNImmutableDictionary<TKey, TValue>;
    function SetItems(items: DDNC.System.Private.CoreLib.DNIEnumerable<DDNC.System.Private.CoreLib.DNKeyValuePair<TKey, TValue>>): DNImmutableDictionary<TKey, TValue>;
    function Remove(key: TKey): DNImmutableDictionary<TKey, TValue>;
    function RemoveRange(keys: DDNC.System.Private.CoreLib.DNIEnumerable<TKey>): DNImmutableDictionary<TKey, TValue>;
    function ContainsKey(key: TKey): Boolean;
    function &Contains(pair: DDNC.System.Private.CoreLib.DNKeyValuePair<TKey, TValue>): Boolean;
    function TryGetValue(key: TKey; out value: TValue): Boolean;
    function TryGetKey(equalKey: TKey; out actualKey: TKey): Boolean;
    function WithComparers(keyComparer: DDNC.System.Private.CoreLib.DNIEqualityComparer<TKey>; valueComparer: DDNC.System.Private.CoreLib.DNIEqualityComparer<TValue>): DNImmutableDictionary<TKey, TValue>; overload;
    function WithComparers(keyComparer: DDNC.System.Private.CoreLib.DNIEqualityComparer<TKey>): DNImmutableDictionary<TKey, TValue>; overload;
    function ContainsValue(value: TValue): Boolean;
    function GetEnumerator: DNImmutableDictionary_Enumerator<TKey, TValue>;
    function GetType: DDNC.System.Private.CoreLib.DNType;
    function ToString: string;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;

  { propertys } 

    property Count: Int32 read get_Count;
    property IsEmpty: Boolean read get_IsEmpty;
    property KeyComparer: DDNC.System.Private.CoreLib.DNIEqualityComparer<TKey> read get_KeyComparer;
    property ValueComparer: DDNC.System.Private.CoreLib.DNIEqualityComparer<TValue> read get_ValueComparer;
    property Keys: DDNC.System.Private.CoreLib.DNIEnumerable<TKey> read get_Keys;
    property Values: DDNC.System.Private.CoreLib.DNIEnumerable<TValue> read get_Values;
  end;

  TDNImmutableDictionary<TKey, TValue> = class(TDNGenericImport<DNImmutableDictionaryClass<TKey, TValue>, DNImmutableDictionary<TKey, TValue>>) end;

  //-------------namespace: System.Collections.Immutable----------------
  DNImmutableDictionary_BuilderClass<TKey, TValue> = interface(DNObjectClass)
  ['{79E70606-4018-564F-8E43-1928BB3FD68E}']
  end;

  [DNTypeName('System.Collections.Immutable.ImmutableDictionary`2+Builder')]
  DNImmutableDictionary_Builder<TKey, TValue> = interface(DDNC.System.Private.CoreLib.DNIDictionary<TKey, TValue>)
  ['{AB3C4502-C8DA-3EDD-9DE5-79FD9A1A1C35}']
  { getters & setters } 

    function get_KeyComparer: DDNC.System.Private.CoreLib.DNIEqualityComparer<TKey>;
    procedure set_KeyComparer(value: DDNC.System.Private.CoreLib.DNIEqualityComparer<TKey>);
    function get_ValueComparer: DDNC.System.Private.CoreLib.DNIEqualityComparer<TValue>;
    procedure set_ValueComparer(value: DDNC.System.Private.CoreLib.DNIEqualityComparer<TValue>);
    function get_Count: Int32;
    function get_Keys: DDNC.System.Private.CoreLib.DNIEnumerable<TKey>;
    function get_Values: DDNC.System.Private.CoreLib.DNIEnumerable<TValue>;

  { methods } 

    procedure AddRange(items: DDNC.System.Private.CoreLib.DNIEnumerable<DDNC.System.Private.CoreLib.DNKeyValuePair<TKey, TValue>>);
    procedure RemoveRange(keys: DDNC.System.Private.CoreLib.DNIEnumerable<TKey>);
    function GetEnumerator: DNImmutableDictionary_Enumerator<TKey, TValue>;
    function GetValueOrDefault(key: TKey): TValue; overload;
    function GetValueOrDefault(key: TKey; defaultValue: TValue): TValue; overload;
    function ToImmutable: DNImmutableDictionary<TKey, TValue>;
    function ContainsKey(key: TKey): Boolean;
    function ContainsValue(value: TValue): Boolean;
    function TryGetValue(key: TKey; out value: TValue): Boolean;
    function TryGetKey(equalKey: TKey; out actualKey: TKey): Boolean;
    function &Contains(item: DDNC.System.Private.CoreLib.DNKeyValuePair<TKey, TValue>): Boolean;
    function GetType: DDNC.System.Private.CoreLib.DNType;
    function ToString: string;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;

  { propertys } 

    property KeyComparer: DDNC.System.Private.CoreLib.DNIEqualityComparer<TKey> read get_KeyComparer write set_KeyComparer;
    property ValueComparer: DDNC.System.Private.CoreLib.DNIEqualityComparer<TValue> read get_ValueComparer write set_ValueComparer;
    property Count: Int32 read get_Count;
    property Keys: DDNC.System.Private.CoreLib.DNIEnumerable<TKey> read get_Keys;
    property Values: DDNC.System.Private.CoreLib.DNIEnumerable<TValue> read get_Values;
  end;

  TDNImmutableDictionary_Builder<TKey, TValue> = class(TDNGenericImport<DNImmutableDictionary_BuilderClass<TKey, TValue>, DNImmutableDictionary_Builder<TKey, TValue>>) end;

  //-------------namespace: System.Collections.Immutable----------------
  DNImmutableDictionaryClass = interface(DDNC.System.Private.CoreLib.DNObjectClass)
  ['{B9CBD687-AA55-56A4-9576-EA48C1666147}']
  end;

  [DNTypeName('System.Collections.Immutable.ImmutableDictionary')]
  DNImmutableDictionary = interface(DDNC.System.Private.CoreLib.DNObject)
  ['{943ADC18-3239-30E7-AAE7-A3F877973B59}']
  { methods } 

    function GetType: DDNC.System.Private.CoreLib.DNType;
    function ToString: string;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;

  end;

  TDNImmutableDictionary = class(TDNGenericImport<DNImmutableDictionaryClass, DNImmutableDictionary>) end;

  //-------------namespace: System.Collections.Immutable----------------
  DNImmutableHashSetClass<T> = interface(DNObjectClass)
  ['{BB02B3CB-509E-5014-94B7-3EFC7168B67E}']
  { static fields getter & setter } 

   function __fakeFieldGet_Empty: DNImmutableHashSet<T>;

  { static fields } 

    {class} property Empty: DNImmutableHashSet<T> read __fakeFieldGet_Empty;

  end;

  [DNTypeName('System.Collections.Immutable.ImmutableHashSet`1')]
  DNImmutableHashSet<T> = interface(DNIImmutableSet<T>)
  ['{9AAF71EE-ADFF-37FD-9F1C-EBAA28A2447B}']
  { getters & setters } 

    function get_Count: Int32;
    function get_IsEmpty: Boolean;
    function get_KeyComparer: DDNC.System.Private.CoreLib.DNIEqualityComparer<T>;

  { methods } 

    function Clear: DNImmutableHashSet<T>;
    function ToBuilder: DNImmutableHashSet_Builder<T>;
    function Add(item: T): DNImmutableHashSet<T>;
    function Remove(item: T): DNImmutableHashSet<T>;
    function TryGetValue(equalValue: T; out actualValue: T): Boolean;
    function Union(other: DDNC.System.Private.CoreLib.DNIEnumerable<T>): DNImmutableHashSet<T>;
    function Intersect(other: DDNC.System.Private.CoreLib.DNIEnumerable<T>): DNImmutableHashSet<T>;
    function &Except(other: DDNC.System.Private.CoreLib.DNIEnumerable<T>): DNImmutableHashSet<T>;
    function SymmetricExcept(other: DDNC.System.Private.CoreLib.DNIEnumerable<T>): DNImmutableHashSet<T>;
    function SetEquals(other: DDNC.System.Private.CoreLib.DNIEnumerable<T>): Boolean;
    function IsProperSubsetOf(other: DDNC.System.Private.CoreLib.DNIEnumerable<T>): Boolean;
    function IsProperSupersetOf(other: DDNC.System.Private.CoreLib.DNIEnumerable<T>): Boolean;
    function IsSubsetOf(other: DDNC.System.Private.CoreLib.DNIEnumerable<T>): Boolean;
    function IsSupersetOf(other: DDNC.System.Private.CoreLib.DNIEnumerable<T>): Boolean;
    function Overlaps(other: DDNC.System.Private.CoreLib.DNIEnumerable<T>): Boolean;
    function &Contains(item: T): Boolean;
    function WithComparer(equalityComparer: DDNC.System.Private.CoreLib.DNIEqualityComparer<T>): DNImmutableHashSet<T>;
    function GetEnumerator: DNImmutableHashSet_Enumerator<T>;
    function GetType: DDNC.System.Private.CoreLib.DNType;
    function ToString: string;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;

  { propertys } 

    property Count: Int32 read get_Count;
    property IsEmpty: Boolean read get_IsEmpty;
    property KeyComparer: DDNC.System.Private.CoreLib.DNIEqualityComparer<T> read get_KeyComparer;
  end;

  TDNImmutableHashSet<T> = class(TDNGenericImport<DNImmutableHashSetClass<T>, DNImmutableHashSet<T>>) end;

  //-------------namespace: System.Collections.Immutable----------------
  DNImmutableHashSet_BuilderClass<T> = interface(DNObjectClass)
  ['{25B86434-D922-57E9-B192-9E510D313AF2}']
  end;

  [DNTypeName('System.Collections.Immutable.ImmutableHashSet`1+Builder')]
  DNImmutableHashSet_Builder<T> = interface(DDNC.System.Private.CoreLib.DNIReadOnlyCollection<T>)
  ['{0286B821-45C0-3B4F-8F16-893F12161E79}']
  { getters & setters } 

    function get_Count: Int32;
    function get_KeyComparer: DDNC.System.Private.CoreLib.DNIEqualityComparer<T>;
    procedure set_KeyComparer(value: DDNC.System.Private.CoreLib.DNIEqualityComparer<T>);

  { methods } 

    function GetEnumerator: DNImmutableHashSet_Enumerator<T>;
    function ToImmutable: DNImmutableHashSet<T>;
    function &Contains(item: T): Boolean;
    procedure ExceptWith(other: DDNC.System.Private.CoreLib.DNIEnumerable<T>);
    procedure IntersectWith(other: DDNC.System.Private.CoreLib.DNIEnumerable<T>);
    function IsProperSubsetOf(other: DDNC.System.Private.CoreLib.DNIEnumerable<T>): Boolean;
    function IsProperSupersetOf(other: DDNC.System.Private.CoreLib.DNIEnumerable<T>): Boolean;
    function IsSubsetOf(other: DDNC.System.Private.CoreLib.DNIEnumerable<T>): Boolean;
    function IsSupersetOf(other: DDNC.System.Private.CoreLib.DNIEnumerable<T>): Boolean;
    function Overlaps(other: DDNC.System.Private.CoreLib.DNIEnumerable<T>): Boolean;
    function SetEquals(other: DDNC.System.Private.CoreLib.DNIEnumerable<T>): Boolean;
    procedure SymmetricExceptWith(other: DDNC.System.Private.CoreLib.DNIEnumerable<T>);
    procedure UnionWith(other: DDNC.System.Private.CoreLib.DNIEnumerable<T>);
    function GetType: DDNC.System.Private.CoreLib.DNType;
    function ToString: string;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;

  { propertys } 

    property Count: Int32 read get_Count;
    property KeyComparer: DDNC.System.Private.CoreLib.DNIEqualityComparer<T> read get_KeyComparer write set_KeyComparer;
  end;

  TDNImmutableHashSet_Builder<T> = class(TDNGenericImport<DNImmutableHashSet_BuilderClass<T>, DNImmutableHashSet_Builder<T>>) end;

  //-------------namespace: System.Collections.Immutable----------------
  DNImmutableHashSetClass = interface(DDNC.System.Private.CoreLib.DNObjectClass)
  ['{DD1DED15-868D-521F-A911-AF07B2C3050A}']
  end;

  [DNTypeName('System.Collections.Immutable.ImmutableHashSet')]
  DNImmutableHashSet = interface(DDNC.System.Private.CoreLib.DNObject)
  ['{F2B2EFEE-4E1B-3321-89D5-3B2780D6B91F}']
  { methods } 

    function GetType: DDNC.System.Private.CoreLib.DNType;
    function ToString: string;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;

  end;

  TDNImmutableHashSet = class(TDNGenericImport<DNImmutableHashSetClass, DNImmutableHashSet>) end;

  //-------------namespace: System.Collections.Immutable----------------
  DNImmutableInterlockedClass = interface(DDNC.System.Private.CoreLib.DNObjectClass)
  ['{BF090B35-4B74-5FC6-A8F5-885593BCFB97}']
  end;

  [DNTypeName('System.Collections.Immutable.ImmutableInterlocked')]
  DNImmutableInterlocked = interface(DDNC.System.Private.CoreLib.DNObject)
  ['{D5E4F692-21C2-36C8-A8C6-1E0108C2FB39}']
  { methods } 

    function GetType: DDNC.System.Private.CoreLib.DNType;
    function ToString: string;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;

  end;

  TDNImmutableInterlocked = class(TDNGenericImport<DNImmutableInterlockedClass, DNImmutableInterlocked>) end;

  //-------------namespace: System.Collections.Immutable----------------
  DNImmutableListClass<T> = interface(DNObjectClass)
  ['{851A9BFD-5EFC-5E18-9638-E23BDE809B15}']
  { static fields getter & setter } 

   function __fakeFieldGet_Empty: DNImmutableList<T>;

  { static fields } 

    {class} property Empty: DNImmutableList<T> read __fakeFieldGet_Empty;

  end;

  [DNTypeName('System.Collections.Immutable.ImmutableList`1')]
  DNImmutableList<T> = interface(DNIImmutableList<T>)
  ['{91D41F65-A623-354F-A600-DC5DA246E0E1}']
  { getters & setters } 

    function get_IsEmpty: Boolean;
    function get_Count: Int32;

  { methods } 

    function GetEnumerator: DNImmutableList_Enumerator<T>;
    function Clear: DNImmutableList<T>;
    function BinarySearch(item: T): Int32; overload;
    function BinarySearch(item: T; comparer: DDNC.System.Private.CoreLib.DNIComparer<T>): Int32; overload;
    function BinarySearch(index: Int32; count: Int32; item: T; comparer: DDNC.System.Private.CoreLib.DNIComparer<T>): Int32; overload;
    function ItemRef(index: Int32): T;
    function ToBuilder: DNImmutableList_Builder<T>;
    function Add(value: T): DNImmutableList<T>;
    function AddRange(items: DDNC.System.Private.CoreLib.DNIEnumerable<T>): DNImmutableList<T>;
    function Insert(index: Int32; item: T): DNImmutableList<T>;
    function InsertRange(index: Int32; items: DDNC.System.Private.CoreLib.DNIEnumerable<T>): DNImmutableList<T>;
    function Remove(value: T): DNImmutableList<T>; overload;
    function Remove(value: T; equalityComparer: DDNC.System.Private.CoreLib.DNIEqualityComparer<T>): DNImmutableList<T>; overload;
    function RemoveRange(index: Int32; count: Int32): DNImmutableList<T>; overload;
    function RemoveRange(items: DDNC.System.Private.CoreLib.DNIEnumerable<T>): DNImmutableList<T>; overload;
    function RemoveRange(items: DDNC.System.Private.CoreLib.DNIEnumerable<T>; equalityComparer: DDNC.System.Private.CoreLib.DNIEqualityComparer<T>): DNImmutableList<T>; overload;
    function RemoveAt(index: Int32): DNImmutableList<T>;
    function RemoveAll(match: DDNC.System.Private.CoreLib.DNPredicate<T>): DNImmutableList<T>;
    function SetItem(index: Int32; value: T): DNImmutableList<T>;
    function Replace(oldValue: T; newValue: T): DNImmutableList<T>; overload;
    function Replace(oldValue: T; newValue: T; equalityComparer: DDNC.System.Private.CoreLib.DNIEqualityComparer<T>): DNImmutableList<T>; overload;
    function Reverse: DNImmutableList<T>; overload;
    function Reverse(index: Int32; count: Int32): DNImmutableList<T>; overload;
    function Sort: DNImmutableList<T>; overload;
    function Sort(comparison: DDNC.System.Private.CoreLib.DNComparison<T>): DNImmutableList<T>; overload;
    function Sort(comparer: DDNC.System.Private.CoreLib.DNIComparer<T>): DNImmutableList<T>; overload;
    function Sort(index: Int32; count: Int32; comparer: DDNC.System.Private.CoreLib.DNIComparer<T>): DNImmutableList<T>; overload;
    procedure ForEach(action: DDNC.System.Private.CoreLib.DNAction<T>);
    procedure CopyTo(&array: TArray<T>); overload;
    procedure CopyTo(&array: TArray<T>; arrayIndex: Int32); overload;
    procedure CopyTo(index: Int32; &array: TArray<T>; arrayIndex: Int32; count: Int32); overload;
    function GetRange(index: Int32; count: Int32): DNImmutableList<T>;
    function Exists(match: DDNC.System.Private.CoreLib.DNPredicate<T>): Boolean;
    function Find(match: DDNC.System.Private.CoreLib.DNPredicate<T>): T;
    function FindAll(match: DDNC.System.Private.CoreLib.DNPredicate<T>): DNImmutableList<T>;
    function FindIndex(match: DDNC.System.Private.CoreLib.DNPredicate<T>): Int32; overload;
    function FindIndex(startIndex: Int32; match: DDNC.System.Private.CoreLib.DNPredicate<T>): Int32; overload;
    function FindIndex(startIndex: Int32; count: Int32; match: DDNC.System.Private.CoreLib.DNPredicate<T>): Int32; overload;
    function FindLast(match: DDNC.System.Private.CoreLib.DNPredicate<T>): T;
    function FindLastIndex(match: DDNC.System.Private.CoreLib.DNPredicate<T>): Int32; overload;
    function FindLastIndex(startIndex: Int32; match: DDNC.System.Private.CoreLib.DNPredicate<T>): Int32; overload;
    function FindLastIndex(startIndex: Int32; count: Int32; match: DDNC.System.Private.CoreLib.DNPredicate<T>): Int32; overload;
    function IndexOf(item: T; index: Int32; count: Int32; equalityComparer: DDNC.System.Private.CoreLib.DNIEqualityComparer<T>): Int32; overload;
    function LastIndexOf(item: T; index: Int32; count: Int32; equalityComparer: DDNC.System.Private.CoreLib.DNIEqualityComparer<T>): Int32;
    function TrueForAll(match: DDNC.System.Private.CoreLib.DNPredicate<T>): Boolean;
    function &Contains(value: T): Boolean;
    function IndexOf(value: T): Int32; overload;
    function GetType: DDNC.System.Private.CoreLib.DNType;
    function ToString: string;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;

  { propertys } 

    property IsEmpty: Boolean read get_IsEmpty;
    property Count: Int32 read get_Count;
  end;

  TDNImmutableList<T> = class(TDNGenericImport<DNImmutableListClass<T>, DNImmutableList<T>>) end;

  //-------------namespace: System.Collections.Immutable----------------
  DNImmutableList_BuilderClass<T> = interface(DNObjectClass)
  ['{A7376F43-3421-5E45-ABF7-E46F44956102}']
  end;

  [DNTypeName('System.Collections.Immutable.ImmutableList`1+Builder')]
  DNImmutableList_Builder<T> = interface(DDNC.System.Private.CoreLib.DNIList<T>)
  ['{E5C040DF-55E7-312D-B347-C27B2E2632F0}']
  { getters & setters } 

    function get_Count: Int32;

  { methods } 

    function ItemRef(index: Int32): T;
    function IndexOf(item: T): Int32; overload;
    procedure Insert(index: Int32; item: T);
    procedure RemoveAt(index: Int32);
    function &Contains(item: T): Boolean;
    function GetEnumerator: DNImmutableList_Enumerator<T>;
    procedure ForEach(action: DDNC.System.Private.CoreLib.DNAction<T>);
    procedure CopyTo(&array: TArray<T>); overload;
    procedure CopyTo(&array: TArray<T>; arrayIndex: Int32); overload;
    procedure CopyTo(index: Int32; &array: TArray<T>; arrayIndex: Int32; count: Int32); overload;
    function GetRange(index: Int32; count: Int32): DNImmutableList<T>;
    function Exists(match: DDNC.System.Private.CoreLib.DNPredicate<T>): Boolean;
    function Find(match: DDNC.System.Private.CoreLib.DNPredicate<T>): T;
    function FindAll(match: DDNC.System.Private.CoreLib.DNPredicate<T>): DNImmutableList<T>;
    function FindIndex(match: DDNC.System.Private.CoreLib.DNPredicate<T>): Int32; overload;
    function FindIndex(startIndex: Int32; match: DDNC.System.Private.CoreLib.DNPredicate<T>): Int32; overload;
    function FindIndex(startIndex: Int32; count: Int32; match: DDNC.System.Private.CoreLib.DNPredicate<T>): Int32; overload;
    function FindLast(match: DDNC.System.Private.CoreLib.DNPredicate<T>): T;
    function FindLastIndex(match: DDNC.System.Private.CoreLib.DNPredicate<T>): Int32; overload;
    function FindLastIndex(startIndex: Int32; match: DDNC.System.Private.CoreLib.DNPredicate<T>): Int32; overload;
    function FindLastIndex(startIndex: Int32; count: Int32; match: DDNC.System.Private.CoreLib.DNPredicate<T>): Int32; overload;
    function IndexOf(item: T; index: Int32): Int32; overload;
    function IndexOf(item: T; index: Int32; count: Int32): Int32; overload;
    function IndexOf(item: T; index: Int32; count: Int32; equalityComparer: DDNC.System.Private.CoreLib.DNIEqualityComparer<T>): Int32; overload;
    function LastIndexOf(item: T): Int32; overload;
    function LastIndexOf(item: T; startIndex: Int32): Int32; overload;
    function LastIndexOf(item: T; startIndex: Int32; count: Int32): Int32; overload;
    function LastIndexOf(item: T; startIndex: Int32; count: Int32; equalityComparer: DDNC.System.Private.CoreLib.DNIEqualityComparer<T>): Int32; overload;
    function TrueForAll(match: DDNC.System.Private.CoreLib.DNPredicate<T>): Boolean;
    procedure AddRange(items: DDNC.System.Private.CoreLib.DNIEnumerable<T>);
    procedure InsertRange(index: Int32; items: DDNC.System.Private.CoreLib.DNIEnumerable<T>);
    function RemoveAll(match: DDNC.System.Private.CoreLib.DNPredicate<T>): Int32;
    procedure Reverse; overload;
    procedure Reverse(index: Int32; count: Int32); overload;
    procedure Sort; overload;
    procedure Sort(comparison: DDNC.System.Private.CoreLib.DNComparison<T>); overload;
    procedure Sort(comparer: DDNC.System.Private.CoreLib.DNIComparer<T>); overload;
    procedure Sort(index: Int32; count: Int32; comparer: DDNC.System.Private.CoreLib.DNIComparer<T>); overload;
    function BinarySearch(item: T): Int32; overload;
    function BinarySearch(item: T; comparer: DDNC.System.Private.CoreLib.DNIComparer<T>): Int32; overload;
    function BinarySearch(index: Int32; count: Int32; item: T; comparer: DDNC.System.Private.CoreLib.DNIComparer<T>): Int32; overload;
    function ToImmutable: DNImmutableList<T>;
    function GetType: DDNC.System.Private.CoreLib.DNType;
    function ToString: string;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;

  { propertys } 

    property Count: Int32 read get_Count;
  end;

  TDNImmutableList_Builder<T> = class(TDNGenericImport<DNImmutableList_BuilderClass<T>, DNImmutableList_Builder<T>>) end;

  //-------------namespace: System.Collections.Immutable----------------
  DNImmutableListClass = interface(DDNC.System.Private.CoreLib.DNObjectClass)
  ['{7B2D0E3D-BA6F-588F-AF94-462A8C7C522A}']
  end;

  [DNTypeName('System.Collections.Immutable.ImmutableList')]
  DNImmutableList = interface(DDNC.System.Private.CoreLib.DNObject)
  ['{65E88D09-85CC-3BFB-BDBD-7CF57A467ED5}']
  { methods } 

    function GetType: DDNC.System.Private.CoreLib.DNType;
    function ToString: string;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;

  end;

  TDNImmutableList = class(TDNGenericImport<DNImmutableListClass, DNImmutableList>) end;

  //-------------namespace: System.Collections.Immutable----------------
  DNImmutableQueueClass<T> = interface(DNObjectClass)
  ['{C35434F5-78C0-5DBE-B7D9-B4DF85A63C17}']
  { static getter & setter } 

    {class} function get_Empty: DNImmutableQueue<T>;

  { static propertys } 

    {class} property Empty: DNImmutableQueue<T> read get_Empty;
  end;

  [DNTypeName('System.Collections.Immutable.ImmutableQueue`1')]
  DNImmutableQueue<T> = interface(DNIImmutableQueue<T>)
  ['{11396E9B-9F06-3922-8C37-102BA80593BC}']
  { getters & setters } 

    function get_IsEmpty: Boolean;

  { methods } 

    function Clear: DNImmutableQueue<T>;
    function Peek: T;
    function PeekRef: T;
    function Enqueue(value: T): DNImmutableQueue<T>;
    function Dequeue: DNImmutableQueue<T>; overload;
    function Dequeue(out value: T): DNImmutableQueue<T>; overload;
    function GetEnumerator: DNImmutableQueue_Enumerator<T>;
    function GetType: DDNC.System.Private.CoreLib.DNType;
    function ToString: string;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;

  { propertys } 

    property IsEmpty: Boolean read get_IsEmpty;
  end;

  TDNImmutableQueue<T> = class(TDNGenericImport<DNImmutableQueueClass<T>, DNImmutableQueue<T>>) end;

  //-------------namespace: System.Collections.Immutable----------------
  DNImmutableQueueClass = interface(DDNC.System.Private.CoreLib.DNObjectClass)
  ['{2FC971B7-5F5D-521C-9D4A-0031F0E44039}']
  end;

  [DNTypeName('System.Collections.Immutable.ImmutableQueue')]
  DNImmutableQueue = interface(DDNC.System.Private.CoreLib.DNObject)
  ['{6D20F8CF-5AF7-32B5-8BD1-D80E84A4EBC4}']
  { methods } 

    function GetType: DDNC.System.Private.CoreLib.DNType;
    function ToString: string;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;

  end;

  TDNImmutableQueue = class(TDNGenericImport<DNImmutableQueueClass, DNImmutableQueue>) end;

  //-------------namespace: System.Collections.Immutable----------------
  DNImmutableSortedDictionaryClass<TKey, TValue> = interface(DNObjectClass)
  ['{6A02A3E9-E788-5046-AB16-613C25C03571}']
  { static fields getter & setter } 

   function __fakeFieldGet_Empty: DNImmutableSortedDictionary<TKey, TValue>;

  { static fields } 

    {class} property Empty: DNImmutableSortedDictionary<TKey, TValue> read __fakeFieldGet_Empty;

  end;

  [DNTypeName('System.Collections.Immutable.ImmutableSortedDictionary`2')]
  DNImmutableSortedDictionary<TKey, TValue> = interface(DNIImmutableDictionary<TKey, TValue>)
  ['{8798E9D8-C885-32D4-8DFB-C90722A08B32}']
  { getters & setters } 

    function get_ValueComparer: DDNC.System.Private.CoreLib.DNIEqualityComparer<TValue>;
    function get_IsEmpty: Boolean;
    function get_Count: Int32;
    function get_Keys: DDNC.System.Private.CoreLib.DNIEnumerable<TKey>;
    function get_Values: DDNC.System.Private.CoreLib.DNIEnumerable<TValue>;
    function get_KeyComparer: DDNC.System.Private.CoreLib.DNIComparer<TKey>;

  { methods } 

    function Clear: DNImmutableSortedDictionary<TKey, TValue>;
    function ValueRef(key: TKey): TValue;
    function ToBuilder: DNImmutableSortedDictionary_Builder<TKey, TValue>;
    function Add(key: TKey; value: TValue): DNImmutableSortedDictionary<TKey, TValue>;
    function SetItem(key: TKey; value: TValue): DNImmutableSortedDictionary<TKey, TValue>;
    function SetItems(items: DDNC.System.Private.CoreLib.DNIEnumerable<DDNC.System.Private.CoreLib.DNKeyValuePair<TKey, TValue>>): DNImmutableSortedDictionary<TKey, TValue>;
    function AddRange(items: DDNC.System.Private.CoreLib.DNIEnumerable<DDNC.System.Private.CoreLib.DNKeyValuePair<TKey, TValue>>): DNImmutableSortedDictionary<TKey, TValue>;
    function Remove(value: TKey): DNImmutableSortedDictionary<TKey, TValue>;
    function RemoveRange(keys: DDNC.System.Private.CoreLib.DNIEnumerable<TKey>): DNImmutableSortedDictionary<TKey, TValue>;
    function WithComparers(keyComparer: DDNC.System.Private.CoreLib.DNIComparer<TKey>; valueComparer: DDNC.System.Private.CoreLib.DNIEqualityComparer<TValue>): DNImmutableSortedDictionary<TKey, TValue>; overload;
    function WithComparers(keyComparer: DDNC.System.Private.CoreLib.DNIComparer<TKey>): DNImmutableSortedDictionary<TKey, TValue>; overload;
    function ContainsValue(value: TValue): Boolean;
    function ContainsKey(key: TKey): Boolean;
    function &Contains(pair: DDNC.System.Private.CoreLib.DNKeyValuePair<TKey, TValue>): Boolean;
    function TryGetValue(key: TKey; out value: TValue): Boolean;
    function TryGetKey(equalKey: TKey; out actualKey: TKey): Boolean;
    function GetEnumerator: DNImmutableSortedDictionary_Enumerator<TKey, TValue>;
    function GetType: DDNC.System.Private.CoreLib.DNType;
    function ToString: string;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;

  { propertys } 

    property ValueComparer: DDNC.System.Private.CoreLib.DNIEqualityComparer<TValue> read get_ValueComparer;
    property IsEmpty: Boolean read get_IsEmpty;
    property Count: Int32 read get_Count;
    property Keys: DDNC.System.Private.CoreLib.DNIEnumerable<TKey> read get_Keys;
    property Values: DDNC.System.Private.CoreLib.DNIEnumerable<TValue> read get_Values;
    property KeyComparer: DDNC.System.Private.CoreLib.DNIComparer<TKey> read get_KeyComparer;
  end;

  TDNImmutableSortedDictionary<TKey, TValue> = class(TDNGenericImport<DNImmutableSortedDictionaryClass<TKey, TValue>, DNImmutableSortedDictionary<TKey, TValue>>) end;

  //-------------namespace: System.Collections.Immutable----------------
  DNImmutableSortedDictionary_BuilderClass<TKey, TValue> = interface(DNObjectClass)
  ['{4999A25A-200D-5125-9A1B-7BB3D36F8ADD}']
  end;

  [DNTypeName('System.Collections.Immutable.ImmutableSortedDictionary`2+Builder')]
  DNImmutableSortedDictionary_Builder<TKey, TValue> = interface(DDNC.System.Private.CoreLib.DNIDictionary<TKey, TValue>)
  ['{0E6C51A2-8231-3995-A806-27A648316128}']
  { getters & setters } 

    function get_Keys: DDNC.System.Private.CoreLib.DNIEnumerable<TKey>;
    function get_Values: DDNC.System.Private.CoreLib.DNIEnumerable<TValue>;
    function get_Count: Int32;
    function get_KeyComparer: DDNC.System.Private.CoreLib.DNIComparer<TKey>;
    procedure set_KeyComparer(value: DDNC.System.Private.CoreLib.DNIComparer<TKey>);
    function get_ValueComparer: DDNC.System.Private.CoreLib.DNIEqualityComparer<TValue>;
    procedure set_ValueComparer(value: DDNC.System.Private.CoreLib.DNIEqualityComparer<TValue>);

  { methods } 

    function ValueRef(key: TKey): TValue;
    function ContainsKey(key: TKey): Boolean;
    function TryGetValue(key: TKey; out value: TValue): Boolean;
    function TryGetKey(equalKey: TKey; out actualKey: TKey): Boolean;
    function &Contains(item: DDNC.System.Private.CoreLib.DNKeyValuePair<TKey, TValue>): Boolean;
    function GetEnumerator: DNImmutableSortedDictionary_Enumerator<TKey, TValue>;
    function ContainsValue(value: TValue): Boolean;
    procedure AddRange(items: DDNC.System.Private.CoreLib.DNIEnumerable<DDNC.System.Private.CoreLib.DNKeyValuePair<TKey, TValue>>);
    procedure RemoveRange(keys: DDNC.System.Private.CoreLib.DNIEnumerable<TKey>);
    function GetValueOrDefault(key: TKey): TValue; overload;
    function GetValueOrDefault(key: TKey; defaultValue: TValue): TValue; overload;
    function ToImmutable: DNImmutableSortedDictionary<TKey, TValue>;
    function GetType: DDNC.System.Private.CoreLib.DNType;
    function ToString: string;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;

  { propertys } 

    property Keys: DDNC.System.Private.CoreLib.DNIEnumerable<TKey> read get_Keys;
    property Values: DDNC.System.Private.CoreLib.DNIEnumerable<TValue> read get_Values;
    property Count: Int32 read get_Count;
    property KeyComparer: DDNC.System.Private.CoreLib.DNIComparer<TKey> read get_KeyComparer write set_KeyComparer;
    property ValueComparer: DDNC.System.Private.CoreLib.DNIEqualityComparer<TValue> read get_ValueComparer write set_ValueComparer;
  end;

  TDNImmutableSortedDictionary_Builder<TKey, TValue> = class(TDNGenericImport<DNImmutableSortedDictionary_BuilderClass<TKey, TValue>, DNImmutableSortedDictionary_Builder<TKey, TValue>>) end;

  //-------------namespace: System.Collections.Immutable----------------
  DNImmutableSortedDictionaryClass = interface(DDNC.System.Private.CoreLib.DNObjectClass)
  ['{3858D46D-32DD-5725-A725-FBD92D5EC50C}']
  end;

  [DNTypeName('System.Collections.Immutable.ImmutableSortedDictionary')]
  DNImmutableSortedDictionary = interface(DDNC.System.Private.CoreLib.DNObject)
  ['{C296817F-F709-3542-B376-7BEA54168981}']
  { methods } 

    function GetType: DDNC.System.Private.CoreLib.DNType;
    function ToString: string;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;

  end;

  TDNImmutableSortedDictionary = class(TDNGenericImport<DNImmutableSortedDictionaryClass, DNImmutableSortedDictionary>) end;

  //-------------namespace: System.Collections.Immutable----------------
  DNImmutableSortedSetClass<T> = interface(DNObjectClass)
  ['{47C8C3ED-AD40-5139-A9C2-21DFD91EEDF3}']
  { static fields getter & setter } 

   function __fakeFieldGet_Empty: DNImmutableSortedSet<T>;

  { static fields } 

    {class} property Empty: DNImmutableSortedSet<T> read __fakeFieldGet_Empty;

  end;

  [DNTypeName('System.Collections.Immutable.ImmutableSortedSet`1')]
  DNImmutableSortedSet<T> = interface(DNIImmutableSet<T>)
  ['{C65FED32-61EE-3475-8D74-DF3848F3161E}']
  { getters & setters } 

    function get_Max: T;
    function get_Min: T;
    function get_IsEmpty: Boolean;
    function get_Count: Int32;
    function get_KeyComparer: DDNC.System.Private.CoreLib.DNIComparer<T>;

  { methods } 

    function Clear: DNImmutableSortedSet<T>;
    function ItemRef(index: Int32): T;
    function ToBuilder: DNImmutableSortedSet_Builder<T>;
    function Add(value: T): DNImmutableSortedSet<T>;
    function Remove(value: T): DNImmutableSortedSet<T>;
    function TryGetValue(equalValue: T; out actualValue: T): Boolean;
    function Intersect(other: DDNC.System.Private.CoreLib.DNIEnumerable<T>): DNImmutableSortedSet<T>;
    function &Except(other: DDNC.System.Private.CoreLib.DNIEnumerable<T>): DNImmutableSortedSet<T>;
    function SymmetricExcept(other: DDNC.System.Private.CoreLib.DNIEnumerable<T>): DNImmutableSortedSet<T>;
    function Union(other: DDNC.System.Private.CoreLib.DNIEnumerable<T>): DNImmutableSortedSet<T>;
    function WithComparer(comparer: DDNC.System.Private.CoreLib.DNIComparer<T>): DNImmutableSortedSet<T>;
    function SetEquals(other: DDNC.System.Private.CoreLib.DNIEnumerable<T>): Boolean;
    function IsProperSubsetOf(other: DDNC.System.Private.CoreLib.DNIEnumerable<T>): Boolean;
    function IsProperSupersetOf(other: DDNC.System.Private.CoreLib.DNIEnumerable<T>): Boolean;
    function IsSubsetOf(other: DDNC.System.Private.CoreLib.DNIEnumerable<T>): Boolean;
    function IsSupersetOf(other: DDNC.System.Private.CoreLib.DNIEnumerable<T>): Boolean;
    function Overlaps(other: DDNC.System.Private.CoreLib.DNIEnumerable<T>): Boolean;
    function Reverse: DDNC.System.Private.CoreLib.DNIEnumerable<T>;
    function IndexOf(item: T): Int32;
    function &Contains(value: T): Boolean;
    function GetEnumerator: DNImmutableSortedSet_Enumerator<T>;
    function GetType: DDNC.System.Private.CoreLib.DNType;
    function ToString: string;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;

  { propertys } 

    property Max: T read get_Max;
    property Min: T read get_Min;
    property IsEmpty: Boolean read get_IsEmpty;
    property Count: Int32 read get_Count;
    property KeyComparer: DDNC.System.Private.CoreLib.DNIComparer<T> read get_KeyComparer;
  end;

  TDNImmutableSortedSet<T> = class(TDNGenericImport<DNImmutableSortedSetClass<T>, DNImmutableSortedSet<T>>) end;

  //-------------namespace: System.Collections.Immutable----------------
  DNImmutableSortedSet_BuilderClass<T> = interface(DDNC.System.Private.CoreLib.DNObjectClass)
  ['{AFF44C3C-6E13-5884-91E9-8788EFB6B945}']
  end;

  [DNTypeName('System.Collections.Immutable.ImmutableSortedSet`1+Builder')]
  DNImmutableSortedSet_Builder<T> = interface(DDNC.System.Private.CoreLib.DNObject)
  ['{2D4F2E16-6328-300A-BDF3-3C335088CC11}']
  { getters & setters } 

    function get_Count: Int32;
    function get_Item(index: Int32): T;
    function get_Max: T;
    function get_Min: T;
    function get_KeyComparer: DDNC.System.Private.CoreLib.DNIComparer<T>;
    procedure set_KeyComparer(value: DDNC.System.Private.CoreLib.DNIComparer<T>);

  { methods } 

    function ItemRef(index: Int32): T;
    procedure ExceptWith(other: DDNC.System.Private.CoreLib.DNIEnumerable<T>);
    procedure IntersectWith(other: DDNC.System.Private.CoreLib.DNIEnumerable<T>);
    function IsProperSubsetOf(other: DDNC.System.Private.CoreLib.DNIEnumerable<T>): Boolean;
    function IsProperSupersetOf(other: DDNC.System.Private.CoreLib.DNIEnumerable<T>): Boolean;
    function IsSubsetOf(other: DDNC.System.Private.CoreLib.DNIEnumerable<T>): Boolean;
    function IsSupersetOf(other: DDNC.System.Private.CoreLib.DNIEnumerable<T>): Boolean;
    function Overlaps(other: DDNC.System.Private.CoreLib.DNIEnumerable<T>): Boolean;
    function SetEquals(other: DDNC.System.Private.CoreLib.DNIEnumerable<T>): Boolean;
    procedure SymmetricExceptWith(other: DDNC.System.Private.CoreLib.DNIEnumerable<T>);
    procedure UnionWith(other: DDNC.System.Private.CoreLib.DNIEnumerable<T>);
    function &Contains(item: T): Boolean;
    function GetEnumerator: DNImmutableSortedSet_Enumerator<T>;
    function Reverse: DDNC.System.Private.CoreLib.DNIEnumerable<T>;
    function ToImmutable: DNImmutableSortedSet<T>;
    function GetType: DDNC.System.Private.CoreLib.DNType;
    function ToString: string;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;

  { propertys } 

    property Count: Int32 read get_Count;
    property Item[index: Int32]: T read get_Item; default;
    property Max: T read get_Max;
    property Min: T read get_Min;
    property KeyComparer: DDNC.System.Private.CoreLib.DNIComparer<T> read get_KeyComparer write set_KeyComparer;
  end;

  TDNImmutableSortedSet_Builder<T> = class(TDNGenericImport<DNImmutableSortedSet_BuilderClass<T>, DNImmutableSortedSet_Builder<T>>) end;

  //-------------namespace: System.Collections.Immutable----------------
  DNImmutableSortedSetClass = interface(DDNC.System.Private.CoreLib.DNObjectClass)
  ['{6E801E90-8C65-557A-BA7C-EF895C1E99DA}']
  end;

  [DNTypeName('System.Collections.Immutable.ImmutableSortedSet')]
  DNImmutableSortedSet = interface(DDNC.System.Private.CoreLib.DNObject)
  ['{41827551-AA7B-3F8A-A04E-93F58147AC73}']
  { methods } 

    function GetType: DDNC.System.Private.CoreLib.DNType;
    function ToString: string;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;

  end;

  TDNImmutableSortedSet = class(TDNGenericImport<DNImmutableSortedSetClass, DNImmutableSortedSet>) end;

  //-------------namespace: System.Collections.Immutable----------------
  DNImmutableStackClass<T> = interface(DNObjectClass)
  ['{E9823E3E-6B8D-5B34-9E18-EA9CC0FDA90B}']
  { static getter & setter } 

    {class} function get_Empty: DNImmutableStack<T>;

  { static propertys } 

    {class} property Empty: DNImmutableStack<T> read get_Empty;
  end;

  [DNTypeName('System.Collections.Immutable.ImmutableStack`1')]
  DNImmutableStack<T> = interface(DNIImmutableStack<T>)
  ['{1D0D7B38-6902-3B67-91B0-C08CF3040A64}']
  { getters & setters } 

    function get_IsEmpty: Boolean;

  { methods } 

    function Clear: DNImmutableStack<T>;
    function Peek: T;
    function PeekRef: T;
    function Push(value: T): DNImmutableStack<T>;
    function Pop: DNImmutableStack<T>; overload;
    function Pop(out value: T): DNImmutableStack<T>; overload;
    function GetEnumerator: DNImmutableStack_Enumerator<T>;
    function GetType: DDNC.System.Private.CoreLib.DNType;
    function ToString: string;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;

  { propertys } 

    property IsEmpty: Boolean read get_IsEmpty;
  end;

  TDNImmutableStack<T> = class(TDNGenericImport<DNImmutableStackClass<T>, DNImmutableStack<T>>) end;

  //-------------namespace: System.Collections.Immutable----------------
  DNImmutableStackClass = interface(DDNC.System.Private.CoreLib.DNObjectClass)
  ['{0CA45F3D-0CEA-5BF1-B5B1-0F563933FE8A}']
  end;

  [DNTypeName('System.Collections.Immutable.ImmutableStack')]
  DNImmutableStack = interface(DDNC.System.Private.CoreLib.DNObject)
  ['{0E07902F-2FF2-3F32-99E0-7D05F2057B70}']
  { methods } 

    function GetType: DDNC.System.Private.CoreLib.DNType;
    function ToString: string;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;

  end;

  TDNImmutableStack = class(TDNGenericImport<DNImmutableStackClass, DNImmutableStack>) end;

  //-------------namespace: System.Linq----------------
  DNImmutableArrayExtensionsClass = interface(DDNC.System.Private.CoreLib.DNObjectClass)
  ['{F55B586E-72B2-53A6-82CF-776D6B4C9880}']
  end;

  [DNTypeName('System.Linq.ImmutableArrayExtensions')]
  DNImmutableArrayExtensions = interface(DDNC.System.Private.CoreLib.DNObject)
  ['{720EE177-2268-3941-837F-0E9211F39449}']
  { methods } 

    function GetType: DDNC.System.Private.CoreLib.DNType;
    function ToString: string;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;

  end;

  TDNImmutableArrayExtensions = class(TDNGenericImport<DNImmutableArrayExtensionsClass, DNImmutableArrayExtensions>) end;

  //-------------namespace: System.Collections.Immutable----------------
  DNImmutableArrayClass<T> = interface(DDNC.System.Private.CoreLib.DNValueTypeClass)
  ['{3B5EB6F0-C4F1-5DED-9DF7-6944264E51B1}']
  { static fields getter & setter } 

   function __fakeFieldGet_Empty: DNImmutableArray<T>;

  { static fields } 

    {class} property Empty: DNImmutableArray<T> read __fakeFieldGet_Empty;

  end;

  [DNTypeName('System.Collections.Immutable.ImmutableArray`1')]
  DNImmutableArray<T> = interface(DDNC.System.Private.CoreLib.DNValueType)
  ['{8BA3BCA1-9367-319A-AA5C-19F759FD17F3}']
  { getters & setters } 

    function get_Item(index: Int32): T;
    function get_IsEmpty: Boolean;
    function get_Length: Int32;
    function get_IsDefault: Boolean;
    function get_IsDefaultOrEmpty: Boolean;

  { methods } 

    function ItemRef(index: Int32): T;
    procedure CopyTo(destination: TArray<T>); overload;
    procedure CopyTo(destination: TArray<T>; destinationIndex: Int32); overload;
    procedure CopyTo(sourceIndex: Int32; destination: TArray<T>; destinationIndex: Int32; length: Int32); overload;
    function ToBuilder: DNImmutableArray_Builder<T>;
    function GetEnumerator: DNImmutableArray_Enumerator<T>;
    function GetHashCode: Int32;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean; overload;
    function Equals(other: DNImmutableArray<T>): Boolean; overload;
    function AsSpan: DDNC.System.Private.CoreLib.DNReadOnlySpan<T>;
    function AsMemory: DDNC.System.Private.CoreLib.DNReadOnlyMemory<T>;
    function IndexOf(item: T): Int32; overload;
    function IndexOf(item: T; startIndex: Int32; equalityComparer: DDNC.System.Private.CoreLib.DNIEqualityComparer<T>): Int32; overload;
    function IndexOf(item: T; startIndex: Int32): Int32; overload;
    function IndexOf(item: T; startIndex: Int32; count: Int32): Int32; overload;
    function IndexOf(item: T; startIndex: Int32; count: Int32; equalityComparer: DDNC.System.Private.CoreLib.DNIEqualityComparer<T>): Int32; overload;
    function LastIndexOf(item: T): Int32; overload;
    function LastIndexOf(item: T; startIndex: Int32): Int32; overload;
    function LastIndexOf(item: T; startIndex: Int32; count: Int32): Int32; overload;
    function LastIndexOf(item: T; startIndex: Int32; count: Int32; equalityComparer: DDNC.System.Private.CoreLib.DNIEqualityComparer<T>): Int32; overload;
    function &Contains(item: T): Boolean;
    function Insert(index: Int32; item: T): DNImmutableArray<T>;
    function InsertRange(index: Int32; items: DDNC.System.Private.CoreLib.DNIEnumerable<T>): DNImmutableArray<T>; overload;
    function InsertRange(index: Int32; items: DNImmutableArray<T>): DNImmutableArray<T>; overload;
    function Add(item: T): DNImmutableArray<T>;
    function AddRange(items: DDNC.System.Private.CoreLib.DNIEnumerable<T>): DNImmutableArray<T>; overload;
    function AddRange(items: DNImmutableArray<T>): DNImmutableArray<T>; overload;
    function SetItem(index: Int32; item: T): DNImmutableArray<T>;
    function Replace(oldValue: T; newValue: T): DNImmutableArray<T>; overload;
    function Replace(oldValue: T; newValue: T; equalityComparer: DDNC.System.Private.CoreLib.DNIEqualityComparer<T>): DNImmutableArray<T>; overload;
    function Remove(item: T): DNImmutableArray<T>; overload;
    function Remove(item: T; equalityComparer: DDNC.System.Private.CoreLib.DNIEqualityComparer<T>): DNImmutableArray<T>; overload;
    function RemoveAt(index: Int32): DNImmutableArray<T>;
    function RemoveRange(index: Int32; length: Int32): DNImmutableArray<T>; overload;
    function RemoveRange(items: DDNC.System.Private.CoreLib.DNIEnumerable<T>): DNImmutableArray<T>; overload;
    function RemoveRange(items: DDNC.System.Private.CoreLib.DNIEnumerable<T>; equalityComparer: DDNC.System.Private.CoreLib.DNIEqualityComparer<T>): DNImmutableArray<T>; overload;
    function RemoveRange(items: DNImmutableArray<T>): DNImmutableArray<T>; overload;
    function RemoveRange(items: DNImmutableArray<T>; equalityComparer: DDNC.System.Private.CoreLib.DNIEqualityComparer<T>): DNImmutableArray<T>; overload;
    function RemoveAll(match: DDNC.System.Private.CoreLib.DNPredicate<T>): DNImmutableArray<T>;
    function Clear: DNImmutableArray<T>;
    function Sort: DNImmutableArray<T>; overload;
    function Sort(comparison: DDNC.System.Private.CoreLib.DNComparison<T>): DNImmutableArray<T>; overload;
    function Sort(comparer: DDNC.System.Private.CoreLib.DNIComparer<T>): DNImmutableArray<T>; overload;
    function Sort(index: Int32; count: Int32; comparer: DDNC.System.Private.CoreLib.DNIComparer<T>): DNImmutableArray<T>; overload;
    function ToString: string;
    function GetType: DDNC.System.Private.CoreLib.DNType;

  { propertys } 

    property Item[index: Int32]: T read get_Item; default;
    property IsEmpty: Boolean read get_IsEmpty;
    property Length: Int32 read get_Length;
    property IsDefault: Boolean read get_IsDefault;
    property IsDefaultOrEmpty: Boolean read get_IsDefaultOrEmpty;
  end;

  TDNImmutableArray<T> = class(TDNGenericImport<DNImmutableArrayClass<T>, DNImmutableArray<T>>) end;

  //-------------namespace: System.Collections.Immutable----------------
  DNImmutableArray_EnumeratorClass<T> = interface(DDNC.System.Private.CoreLib.DNValueTypeClass)
  ['{08E4B46E-FDED-5C97-85EA-F10809A045C9}']
  end;

  [DNTypeName('System.Collections.Immutable.ImmutableArray`1+Enumerator')]
  DNImmutableArray_Enumerator<T> = interface(DDNC.System.Private.CoreLib.DNValueType)
  ['{36F7CA41-1BD7-38D2-A39F-54B7ABBF0DAE}']
  { getters & setters } 

    function get_Current: T;

  { methods } 

    function MoveNext: Boolean;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;
    function ToString: string;
    function GetType: DDNC.System.Private.CoreLib.DNType;

  { propertys } 

    property Current: T read get_Current;
  end;

  TDNImmutableArray_Enumerator<T> = class(TDNGenericImport<DNImmutableArray_EnumeratorClass<T>, DNImmutableArray_Enumerator<T>>) end;

  //-------------namespace: System.Collections.Immutable----------------
  DNImmutableDictionary_EnumeratorClass<TKey, TValue> = interface(DDNC.System.Private.CoreLib.DNValueTypeClass)
  ['{5AB286F6-699F-51A8-9C76-85B23614DF46}']
  end;

  [DNTypeName('System.Collections.Immutable.ImmutableDictionary`2+Enumerator')]
  DNImmutableDictionary_Enumerator<TKey, TValue> = interface(DDNC.System.Private.CoreLib.DNValueType)
  ['{1CBACAC2-0162-37FC-850F-AC53727759F2}']
  { getters & setters } 

    function get_Current: DDNC.System.Private.CoreLib.DNKeyValuePair<TKey, TValue>;

  { methods } 

    function MoveNext: Boolean;
    procedure Reset;
    procedure Dispose;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;
    function ToString: string;
    function GetType: DDNC.System.Private.CoreLib.DNType;

  { propertys } 

    property Current: DDNC.System.Private.CoreLib.DNKeyValuePair<TKey, TValue> read get_Current;
  end;

  TDNImmutableDictionary_Enumerator<TKey, TValue> = class(TDNGenericImport<DNImmutableDictionary_EnumeratorClass<TKey, TValue>, DNImmutableDictionary_Enumerator<TKey, TValue>>) end;

  //-------------namespace: System.Collections.Immutable----------------
  DNImmutableHashSet_EnumeratorClass<T> = interface(DDNC.System.Private.CoreLib.DNValueTypeClass)
  ['{7A0F064F-0117-5A01-AC84-5E41B637A4A2}']
  end;

  [DNTypeName('System.Collections.Immutable.ImmutableHashSet`1+Enumerator')]
  DNImmutableHashSet_Enumerator<T> = interface(DDNC.System.Private.CoreLib.DNValueType)
  ['{7CBD3CE4-25FF-3321-B78F-1A6138569DEB}']
  { getters & setters } 

    function get_Current: T;

  { methods } 

    function MoveNext: Boolean;
    procedure Reset;
    procedure Dispose;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;
    function ToString: string;
    function GetType: DDNC.System.Private.CoreLib.DNType;

  { propertys } 

    property Current: T read get_Current;
  end;

  TDNImmutableHashSet_Enumerator<T> = class(TDNGenericImport<DNImmutableHashSet_EnumeratorClass<T>, DNImmutableHashSet_Enumerator<T>>) end;

  //-------------namespace: System.Collections.Immutable----------------
  DNImmutableList_EnumeratorClass<T> = interface(DDNC.System.Private.CoreLib.DNValueTypeClass)
  ['{72066680-019B-55F6-9039-EBA376115DE3}']
  end;

  [DNTypeName('System.Collections.Immutable.ImmutableList`1+Enumerator')]
  DNImmutableList_Enumerator<T> = interface(DDNC.System.Private.CoreLib.DNValueType)
  ['{C9095C1D-943A-3F60-9A9E-D1273822EC5C}']
  { getters & setters } 

    function get_Current: T;

  { methods } 

    procedure Dispose;
    function MoveNext: Boolean;
    procedure Reset;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;
    function ToString: string;
    function GetType: DDNC.System.Private.CoreLib.DNType;

  { propertys } 

    property Current: T read get_Current;
  end;

  TDNImmutableList_Enumerator<T> = class(TDNGenericImport<DNImmutableList_EnumeratorClass<T>, DNImmutableList_Enumerator<T>>) end;

  //-------------namespace: System.Collections.Immutable----------------
  DNImmutableQueue_EnumeratorClass<T> = interface(DDNC.System.Private.CoreLib.DNValueTypeClass)
  ['{5142E001-B00D-53A7-A695-21180740185B}']
  end;

  [DNTypeName('System.Collections.Immutable.ImmutableQueue`1+Enumerator')]
  DNImmutableQueue_Enumerator<T> = interface(DDNC.System.Private.CoreLib.DNValueType)
  ['{697E1177-B202-31C1-B578-95E831544651}']
  { getters & setters } 

    function get_Current: T;

  { methods } 

    function MoveNext: Boolean;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;
    function ToString: string;
    function GetType: DDNC.System.Private.CoreLib.DNType;

  { propertys } 

    property Current: T read get_Current;
  end;

  TDNImmutableQueue_Enumerator<T> = class(TDNGenericImport<DNImmutableQueue_EnumeratorClass<T>, DNImmutableQueue_Enumerator<T>>) end;

  //-------------namespace: System.Collections.Immutable----------------
  DNImmutableSortedDictionary_EnumeratorClass<TKey, TValue> = interface(DDNC.System.Private.CoreLib.DNValueTypeClass)
  ['{47F94C09-3387-55F3-8804-CDA6770BB31C}']
  end;

  [DNTypeName('System.Collections.Immutable.ImmutableSortedDictionary`2+Enumerator')]
  DNImmutableSortedDictionary_Enumerator<TKey, TValue> = interface(DDNC.System.Private.CoreLib.DNValueType)
  ['{08D0F1B2-D084-3F30-B5B2-DCA0F0D4C9F0}']
  { getters & setters } 

    function get_Current: DDNC.System.Private.CoreLib.DNKeyValuePair<TKey, TValue>;

  { methods } 

    procedure Dispose;
    function MoveNext: Boolean;
    procedure Reset;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;
    function ToString: string;
    function GetType: DDNC.System.Private.CoreLib.DNType;

  { propertys } 

    property Current: DDNC.System.Private.CoreLib.DNKeyValuePair<TKey, TValue> read get_Current;
  end;

  TDNImmutableSortedDictionary_Enumerator<TKey, TValue> = class(TDNGenericImport<DNImmutableSortedDictionary_EnumeratorClass<TKey, TValue>, DNImmutableSortedDictionary_Enumerator<TKey, TValue>>) end;

  //-------------namespace: System.Collections.Immutable----------------
  DNImmutableSortedSet_EnumeratorClass<T> = interface(DDNC.System.Private.CoreLib.DNValueTypeClass)
  ['{DD2A3770-2C75-52BA-AC1D-B9FE3FD8C8FF}']
  end;

  [DNTypeName('System.Collections.Immutable.ImmutableSortedSet`1+Enumerator')]
  DNImmutableSortedSet_Enumerator<T> = interface(DDNC.System.Private.CoreLib.DNValueType)
  ['{E38707F7-4542-3B12-9571-4EC96C4A80ED}']
  { getters & setters } 

    function get_Current: T;

  { methods } 

    procedure Dispose;
    function MoveNext: Boolean;
    procedure Reset;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;
    function ToString: string;
    function GetType: DDNC.System.Private.CoreLib.DNType;

  { propertys } 

    property Current: T read get_Current;
  end;

  TDNImmutableSortedSet_Enumerator<T> = class(TDNGenericImport<DNImmutableSortedSet_EnumeratorClass<T>, DNImmutableSortedSet_Enumerator<T>>) end;

  //-------------namespace: System.Collections.Immutable----------------
  DNImmutableStack_EnumeratorClass<T> = interface(DDNC.System.Private.CoreLib.DNValueTypeClass)
  ['{CC342BE9-3361-5C25-BAFA-65F8225A53BD}']
  end;

  [DNTypeName('System.Collections.Immutable.ImmutableStack`1+Enumerator')]
  DNImmutableStack_Enumerator<T> = interface(DDNC.System.Private.CoreLib.DNValueType)
  ['{A2E4D155-458E-3ADE-89CB-334C4EDA58AE}']
  { getters & setters } 

    function get_Current: T;

  { methods } 

    function MoveNext: Boolean;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;
    function ToString: string;
    function GetType: DDNC.System.Private.CoreLib.DNType;

  { propertys } 

    property Current: T read get_Current;
  end;

  TDNImmutableStack_Enumerator<T> = class(TDNGenericImport<DNImmutableStack_EnumeratorClass<T>, DNImmutableStack_Enumerator<T>>) end;


implementation


initialization
  LoadAssemblyModule('System.Collections.Immutable, Version=1.2.5.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a');

finalization

end.
