//----------------------------------------------------------------------------
//  System.IO.Compression.dll: System.IO.Compression, Version=4.2.2.0, Culture=neutral, PublicKeyToken=b77a5c561934e089
//----------------------------------------------------------------------------
//  The code is automatically generated by the GenCodeNET tool.
//----------------------------------------------------------------------------
//  .NET Core 3.1.18
//----------------------------------------------------------------------------
//  UnitName: DDNC.System.IO.Compression
//  Author: ying32
//----------------------------------------------------------------------------

unit DDNC.System.IO.Compression;

{$IFDEF FPC}
  {$mode delphi}//{$H+}
  {$modeswitch advancedrecords}
  {$modeswitch prefixedattributes} // Custom attributes featureï¼Œfpc3.2.2+
{$ENDIF}

interface

uses
  DDN.Runtime,
  DDNC.System.Private.CoreLib;

type

{ enums }

  //-------------namespace: System.IO.Compression----------------
  [DNTypeName('System.IO.Compression.CompressionLevel')]
  DNCompressionLevel = type Integer;
  DNCompressionLevelHelper = record helper for DNCompressionLevel
  public const
    Optimal = 0;
    Fastest = 1;
    NoCompression = 2;
  end;


  //-------------namespace: System.IO.Compression----------------
  [DNTypeName('System.IO.Compression.CompressionMode')]
  DNCompressionMode = type Integer;
  DNCompressionModeHelper = record helper for DNCompressionMode
  public const
    Decompress = 0;
    Compress = 1;
  end;


  //-------------namespace: System.IO.Compression----------------
  [DNTypeName('System.IO.Compression.ZipArchiveMode')]
  DNZipArchiveMode = type Integer;
  DNZipArchiveModeHelper = record helper for DNZipArchiveMode
  public const
    Read = 0;
    Create = 1;
    Update = 2;
  end;




type


{ declares }

  DNZLibException = interface; // type: System.IO.Compression.ZLibException, namespace: System.IO.Compression
  DNZipArchive = interface; // type: System.IO.Compression.ZipArchive, namespace: System.IO.Compression
  DNZipArchiveEntry = interface; // type: System.IO.Compression.ZipArchiveEntry, namespace: System.IO.Compression
  DNDeflateStream = interface; // type: System.IO.Compression.DeflateStream, namespace: System.IO.Compression
  DNGZipStream = interface; // type: System.IO.Compression.GZipStream, namespace: System.IO.Compression


{ objects }

  //-------------namespace: System.IO.Compression----------------
  DNZLibExceptionClass = interface(DDNC.System.Private.CoreLib.DNIOExceptionClass)
  ['{6CDC360D-1C04-526F-B7B9-B573F336F1F3}']
  { constructors } 

    {class} function init(message: string; zlibErrorContext: string; zlibErrorCode: Int32; zlibErrorMessage: string): DNZLibException; overload;
    {class} function init: DNZLibException; overload;
    {class} function init(message: string; innerException: DDNC.System.Private.CoreLib.DNException): DNZLibException; overload;

  end;

  [DNTypeName('System.IO.Compression.ZLibException')]
  DNZLibException = interface(DDNC.System.Private.CoreLib.DNIOException)
  ['{372CB695-3E8A-3DB2-BB5E-1CDC19B33CAB}']
  { getters & setters } 

    function get_TargetSite: DDNC.System.Private.CoreLib.DNMethodBase;
    function get_StackTrace: string;
    function get_Message: string;
    function get_Data: DDNC.System.Private.CoreLib.DNIDictionary;
    function get_InnerException: DDNC.System.Private.CoreLib.DNException;
    function get_HelpLink: string;
    procedure set_HelpLink(value: string);
    function get_Source: string;
    procedure set_Source(value: string);
    function get_HResult: Int32;
    procedure set_HResult(value: Int32);

  { methods } 

    function GetBaseException: DDNC.System.Private.CoreLib.DNException;
    procedure GetObjectData(info: DDNC.System.Private.CoreLib.DNSerializationInfo; context: DDNC.System.Private.CoreLib.DNStreamingContext);
    function ToString: string;
    function GetType: DDNC.System.Private.CoreLib.DNType;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;

  { propertys } 

    property TargetSite: DDNC.System.Private.CoreLib.DNMethodBase read get_TargetSite;
    property StackTrace: string read get_StackTrace;
    property Message: string read get_Message;
    property Data: DDNC.System.Private.CoreLib.DNIDictionary read get_Data;
    property InnerException: DDNC.System.Private.CoreLib.DNException read get_InnerException;
    property HelpLink: string read get_HelpLink write set_HelpLink;
    property Source: string read get_Source write set_Source;
    property HResult: Int32 read get_HResult write set_HResult;
  end;

  TDNZLibException = class(TDNGenericImport<DNZLibExceptionClass, DNZLibException>) end;

  //-------------namespace: System.IO.Compression----------------
  DNZipArchiveClass = interface(DNObjectClass)
  ['{12D1A2A4-5BA7-5BC9-AB11-E46BE80F72CB}']
  { constructors } 

    {class} function init(stream: DDNC.System.Private.CoreLib.DNStream): DNZipArchive; overload;
    {class} function init(stream: DDNC.System.Private.CoreLib.DNStream; mode: DNZipArchiveMode): DNZipArchive; overload;
    {class} function init(stream: DDNC.System.Private.CoreLib.DNStream; mode: DNZipArchiveMode; leaveOpen: Boolean): DNZipArchive; overload;
    {class} function init(stream: DDNC.System.Private.CoreLib.DNStream; mode: DNZipArchiveMode; leaveOpen: Boolean; entryNameEncoding: DDNC.System.Private.CoreLib.DNEncoding): DNZipArchive; overload;

  end;

  [DNTypeName('System.IO.Compression.ZipArchive')]
  DNZipArchive = interface(DDNC.System.Private.CoreLib.DNIDisposable)
  ['{A99BA97E-67D3-3E01-8782-56EFF47B896F}']
  { getters & setters } 

    function get_Entries: DDNC.System.Private.CoreLib.DNReadOnlyCollection<DNZipArchiveEntry>;
    function get_Mode: DNZipArchiveMode;

  { methods } 

    function CreateEntry(entryName: string): DNZipArchiveEntry; overload;
    function CreateEntry(entryName: string; compressionLevel: DNCompressionLevel): DNZipArchiveEntry; overload;
    procedure Dispose;
    function GetEntry(entryName: string): DNZipArchiveEntry;
    function GetType: DDNC.System.Private.CoreLib.DNType;
    function ToString: string;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;

  { propertys } 

    property Entries: DDNC.System.Private.CoreLib.DNReadOnlyCollection<DNZipArchiveEntry> read get_Entries;
    property Mode: DNZipArchiveMode read get_Mode;
  end;

  TDNZipArchive = class(TDNGenericImport<DNZipArchiveClass, DNZipArchive>) end;

  //-------------namespace: System.IO.Compression----------------
  DNZipArchiveEntryClass = interface(DDNC.System.Private.CoreLib.DNObjectClass)
  ['{F479ED61-6A68-5F92-98AC-9E27249443D9}']
  end;

  [DNTypeName('System.IO.Compression.ZipArchiveEntry')]
  DNZipArchiveEntry = interface(DDNC.System.Private.CoreLib.DNObject)
  ['{669B60A7-15DA-3E7D-BFBD-20304D1110DA}']
  { getters & setters } 

    function get_Archive: DNZipArchive;
    function get_Crc32: UInt32;
    function get_CompressedLength: Int64;
    function get_ExternalAttributes: Int32;
    procedure set_ExternalAttributes(value: Int32);
    function get_FullName: string;
    function get_LastWriteTime: DDNC.System.Private.CoreLib.DNDateTimeOffset;
    procedure set_LastWriteTime(value: DDNC.System.Private.CoreLib.DNDateTimeOffset);
    function get_Length: Int64;
    function get_Name: string;

  { methods } 

    procedure Delete;
    function Open: DDNC.System.Private.CoreLib.DNStream;
    function ToString: string;
    function GetType: DDNC.System.Private.CoreLib.DNType;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;

  { propertys } 

    property Archive: DNZipArchive read get_Archive;
    property Crc32: UInt32 read get_Crc32;
    property CompressedLength: Int64 read get_CompressedLength;
    property ExternalAttributes: Int32 read get_ExternalAttributes write set_ExternalAttributes;
    property FullName: string read get_FullName;
    property LastWriteTime: DDNC.System.Private.CoreLib.DNDateTimeOffset read get_LastWriteTime write set_LastWriteTime;
    property Length: Int64 read get_Length;
    property Name: string read get_Name;
  end;

  TDNZipArchiveEntry = class(TDNGenericImport<DNZipArchiveEntryClass, DNZipArchiveEntry>) end;

  //-------------namespace: System.IO.Compression----------------
  DNDeflateStreamClass = interface(DDNC.System.Private.CoreLib.DNStreamClass)
  ['{BFA98728-B275-5F7C-A22A-CDC55E9A79E2}']
  { constructors } 

    {class} function init(stream: DDNC.System.Private.CoreLib.DNStream; mode: DNCompressionMode): DNDeflateStream; overload;
    {class} function init(stream: DDNC.System.Private.CoreLib.DNStream; mode: DNCompressionMode; leaveOpen: Boolean): DNDeflateStream; overload;
    {class} function init(stream: DDNC.System.Private.CoreLib.DNStream; compressionLevel: DNCompressionLevel): DNDeflateStream; overload;
    {class} function init(stream: DDNC.System.Private.CoreLib.DNStream; compressionLevel: DNCompressionLevel; leaveOpen: Boolean): DNDeflateStream; overload;

  end;

  [DNTypeName('System.IO.Compression.DeflateStream')]
  DNDeflateStream = interface(DDNC.System.Private.CoreLib.DNStream)
  ['{C4E8E127-BC28-395C-8FA1-D757596A50D4}']
  { getters & setters } 

    function get_BaseStream: DDNC.System.Private.CoreLib.DNStream;
    function get_CanRead: Boolean;
    function get_CanWrite: Boolean;
    function get_CanSeek: Boolean;
    function get_Length: Int64;
    function get_Position: Int64;
    procedure set_Position(value: Int64);
    function get_CanTimeout: Boolean;
    function get_ReadTimeout: Int32;
    procedure set_ReadTimeout(value: Int32);
    function get_WriteTimeout: Int32;
    procedure set_WriteTimeout(value: Int32);

  { methods } 

    procedure Flush;
    function FlushAsync(cancellationToken: DDNC.System.Private.CoreLib.DNCancellationToken): DDNC.System.Private.CoreLib.DNTask; overload;
    function Seek(offset: Int64; origin: DDNC.System.Private.CoreLib.DNSeekOrigin): Int64;
    procedure SetLength(value: Int64);
    function ReadByte: Int32;
    function Read(&array: TArray<Byte>; offset: Int32; count: Int32): Int32; overload;
    function Read(buffer: DDNC.System.Private.CoreLib.DNSpan<Byte>): Int32; overload;
    function BeginRead(buffer: TArray<Byte>; offset: Int32; count: Int32; asyncCallback: DDNC.System.Private.CoreLib.DNAsyncCallback; asyncState: DDNC.System.Private.CoreLib.DNObject): DDNC.System.Private.CoreLib.DNIAsyncResult;
    function EndRead(asyncResult: DDNC.System.Private.CoreLib.DNIAsyncResult): Int32;
    function ReadAsync(&array: TArray<Byte>; offset: Int32; count: Int32; cancellationToken: DDNC.System.Private.CoreLib.DNCancellationToken): DDNC.System.Private.CoreLib.DNTask<Int32>; overload;
    function ReadAsync(buffer: DDNC.System.Private.CoreLib.DNMemory<Byte>; cancellationToken: DDNC.System.Private.CoreLib.DNCancellationToken): DDNC.System.Private.CoreLib.DNValueTask<Int32>; overload;
    procedure Write(&array: TArray<Byte>; offset: Int32; count: Int32); overload;
    procedure Write(buffer: DDNC.System.Private.CoreLib.DNReadOnlySpan<Byte>); overload;
    function DisposeAsync: DDNC.System.Private.CoreLib.DNValueTask;
    function BeginWrite(&array: TArray<Byte>; offset: Int32; count: Int32; asyncCallback: DDNC.System.Private.CoreLib.DNAsyncCallback; asyncState: DDNC.System.Private.CoreLib.DNObject): DDNC.System.Private.CoreLib.DNIAsyncResult;
    procedure EndWrite(asyncResult: DDNC.System.Private.CoreLib.DNIAsyncResult);
    function WriteAsync(&array: TArray<Byte>; offset: Int32; count: Int32; cancellationToken: DDNC.System.Private.CoreLib.DNCancellationToken): DDNC.System.Private.CoreLib.DNTask; overload;
    function WriteAsync(buffer: DDNC.System.Private.CoreLib.DNReadOnlyMemory<Byte>; cancellationToken: DDNC.System.Private.CoreLib.DNCancellationToken): DDNC.System.Private.CoreLib.DNValueTask; overload;
    procedure CopyTo(destination: DDNC.System.Private.CoreLib.DNStream; bufferSize: Int32); overload;
    function CopyToAsync(destination: DDNC.System.Private.CoreLib.DNStream; bufferSize: Int32; cancellationToken: DDNC.System.Private.CoreLib.DNCancellationToken): DDNC.System.Private.CoreLib.DNTask; overload;
    function CopyToAsync(destination: DDNC.System.Private.CoreLib.DNStream): DDNC.System.Private.CoreLib.DNTask; overload;
    function CopyToAsync(destination: DDNC.System.Private.CoreLib.DNStream; bufferSize: Int32): DDNC.System.Private.CoreLib.DNTask; overload;
    function CopyToAsync(destination: DDNC.System.Private.CoreLib.DNStream; cancellationToken: DDNC.System.Private.CoreLib.DNCancellationToken): DDNC.System.Private.CoreLib.DNTask; overload;
    procedure CopyTo(destination: DDNC.System.Private.CoreLib.DNStream); overload;
    procedure Close;
    procedure Dispose;
    function FlushAsync: DDNC.System.Private.CoreLib.DNTask; overload;
    function ReadAsync(buffer: TArray<Byte>; offset: Int32; count: Int32): DDNC.System.Private.CoreLib.DNTask<Int32>; overload;
    function WriteAsync(buffer: TArray<Byte>; offset: Int32; count: Int32): DDNC.System.Private.CoreLib.DNTask; overload;
    procedure WriteByte(value: Byte);
    function GetLifetimeService: DDNC.System.Private.CoreLib.DNObject;
    function InitializeLifetimeService: DDNC.System.Private.CoreLib.DNObject;
    function GetType: DDNC.System.Private.CoreLib.DNType;
    function ToString: string;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;

  { propertys } 

    property BaseStream: DDNC.System.Private.CoreLib.DNStream read get_BaseStream;
    property CanRead: Boolean read get_CanRead;
    property CanWrite: Boolean read get_CanWrite;
    property CanSeek: Boolean read get_CanSeek;
    property Length: Int64 read get_Length;
    property Position: Int64 read get_Position write set_Position;
    property CanTimeout: Boolean read get_CanTimeout;
    property ReadTimeout: Int32 read get_ReadTimeout write set_ReadTimeout;
    property WriteTimeout: Int32 read get_WriteTimeout write set_WriteTimeout;
  end;

  TDNDeflateStream = class(TDNGenericImport<DNDeflateStreamClass, DNDeflateStream>) end;

  //-------------namespace: System.IO.Compression----------------
  DNGZipStreamClass = interface(DDNC.System.Private.CoreLib.DNStreamClass)
  ['{7F2567C1-2D58-575E-A438-21719B261A15}']
  { constructors } 

    {class} function init(stream: DDNC.System.Private.CoreLib.DNStream; mode: DNCompressionMode): DNGZipStream; overload;
    {class} function init(stream: DDNC.System.Private.CoreLib.DNStream; mode: DNCompressionMode; leaveOpen: Boolean): DNGZipStream; overload;
    {class} function init(stream: DDNC.System.Private.CoreLib.DNStream; compressionLevel: DNCompressionLevel): DNGZipStream; overload;
    {class} function init(stream: DDNC.System.Private.CoreLib.DNStream; compressionLevel: DNCompressionLevel; leaveOpen: Boolean): DNGZipStream; overload;

  end;

  [DNTypeName('System.IO.Compression.GZipStream')]
  DNGZipStream = interface(DDNC.System.Private.CoreLib.DNStream)
  ['{34DEAC15-D53E-351A-876A-7966CC8C678C}']
  { getters & setters } 

    function get_CanRead: Boolean;
    function get_CanWrite: Boolean;
    function get_CanSeek: Boolean;
    function get_Length: Int64;
    function get_Position: Int64;
    procedure set_Position(value: Int64);
    function get_BaseStream: DDNC.System.Private.CoreLib.DNStream;
    function get_CanTimeout: Boolean;
    function get_ReadTimeout: Int32;
    procedure set_ReadTimeout(value: Int32);
    function get_WriteTimeout: Int32;
    procedure set_WriteTimeout(value: Int32);

  { methods } 

    procedure Flush;
    function Seek(offset: Int64; origin: DDNC.System.Private.CoreLib.DNSeekOrigin): Int64;
    procedure SetLength(value: Int64);
    function ReadByte: Int32;
    function BeginRead(&array: TArray<Byte>; offset: Int32; count: Int32; asyncCallback: DDNC.System.Private.CoreLib.DNAsyncCallback; asyncState: DDNC.System.Private.CoreLib.DNObject): DDNC.System.Private.CoreLib.DNIAsyncResult;
    function EndRead(asyncResult: DDNC.System.Private.CoreLib.DNIAsyncResult): Int32;
    function Read(&array: TArray<Byte>; offset: Int32; count: Int32): Int32; overload;
    function Read(buffer: DDNC.System.Private.CoreLib.DNSpan<Byte>): Int32; overload;
    function BeginWrite(&array: TArray<Byte>; offset: Int32; count: Int32; asyncCallback: DDNC.System.Private.CoreLib.DNAsyncCallback; asyncState: DDNC.System.Private.CoreLib.DNObject): DDNC.System.Private.CoreLib.DNIAsyncResult;
    procedure EndWrite(asyncResult: DDNC.System.Private.CoreLib.DNIAsyncResult);
    procedure Write(&array: TArray<Byte>; offset: Int32; count: Int32); overload;
    procedure Write(buffer: DDNC.System.Private.CoreLib.DNReadOnlySpan<Byte>); overload;
    procedure CopyTo(destination: DDNC.System.Private.CoreLib.DNStream; bufferSize: Int32); overload;
    function DisposeAsync: DDNC.System.Private.CoreLib.DNValueTask;
    function ReadAsync(&array: TArray<Byte>; offset: Int32; count: Int32; cancellationToken: DDNC.System.Private.CoreLib.DNCancellationToken): DDNC.System.Private.CoreLib.DNTask<Int32>; overload;
    function ReadAsync(buffer: DDNC.System.Private.CoreLib.DNMemory<Byte>; cancellationToken: DDNC.System.Private.CoreLib.DNCancellationToken): DDNC.System.Private.CoreLib.DNValueTask<Int32>; overload;
    function WriteAsync(&array: TArray<Byte>; offset: Int32; count: Int32; cancellationToken: DDNC.System.Private.CoreLib.DNCancellationToken): DDNC.System.Private.CoreLib.DNTask; overload;
    function WriteAsync(buffer: DDNC.System.Private.CoreLib.DNReadOnlyMemory<Byte>; cancellationToken: DDNC.System.Private.CoreLib.DNCancellationToken): DDNC.System.Private.CoreLib.DNValueTask; overload;
    function FlushAsync(cancellationToken: DDNC.System.Private.CoreLib.DNCancellationToken): DDNC.System.Private.CoreLib.DNTask; overload;
    function CopyToAsync(destination: DDNC.System.Private.CoreLib.DNStream; bufferSize: Int32; cancellationToken: DDNC.System.Private.CoreLib.DNCancellationToken): DDNC.System.Private.CoreLib.DNTask; overload;
    function CopyToAsync(destination: DDNC.System.Private.CoreLib.DNStream): DDNC.System.Private.CoreLib.DNTask; overload;
    function CopyToAsync(destination: DDNC.System.Private.CoreLib.DNStream; bufferSize: Int32): DDNC.System.Private.CoreLib.DNTask; overload;
    function CopyToAsync(destination: DDNC.System.Private.CoreLib.DNStream; cancellationToken: DDNC.System.Private.CoreLib.DNCancellationToken): DDNC.System.Private.CoreLib.DNTask; overload;
    procedure CopyTo(destination: DDNC.System.Private.CoreLib.DNStream); overload;
    procedure Close;
    procedure Dispose;
    function FlushAsync: DDNC.System.Private.CoreLib.DNTask; overload;
    function ReadAsync(buffer: TArray<Byte>; offset: Int32; count: Int32): DDNC.System.Private.CoreLib.DNTask<Int32>; overload;
    function WriteAsync(buffer: TArray<Byte>; offset: Int32; count: Int32): DDNC.System.Private.CoreLib.DNTask; overload;
    procedure WriteByte(value: Byte);
    function GetLifetimeService: DDNC.System.Private.CoreLib.DNObject;
    function InitializeLifetimeService: DDNC.System.Private.CoreLib.DNObject;
    function GetType: DDNC.System.Private.CoreLib.DNType;
    function ToString: string;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;

  { propertys } 

    property CanRead: Boolean read get_CanRead;
    property CanWrite: Boolean read get_CanWrite;
    property CanSeek: Boolean read get_CanSeek;
    property Length: Int64 read get_Length;
    property Position: Int64 read get_Position write set_Position;
    property BaseStream: DDNC.System.Private.CoreLib.DNStream read get_BaseStream;
    property CanTimeout: Boolean read get_CanTimeout;
    property ReadTimeout: Int32 read get_ReadTimeout write set_ReadTimeout;
    property WriteTimeout: Int32 read get_WriteTimeout write set_WriteTimeout;
  end;

  TDNGZipStream = class(TDNGenericImport<DNGZipStreamClass, DNGZipStream>) end;


implementation


initialization
  LoadAssemblyModule('System.IO.Compression, Version=4.2.2.0, Culture=neutral, PublicKeyToken=b77a5c561934e089');

finalization

end.
