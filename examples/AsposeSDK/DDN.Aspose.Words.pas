//----------------------------------------------------------------------------
//  Aspose.Words.dll: Aspose.Words, Version=21.6.0.0, Culture=neutral, PublicKeyToken=716fcc553a201e56
//----------------------------------------------------------------------------
//  The code is automatically generated by the GenCodeNET tool.
//----------------------------------------------------------------------------
//  .NET Framework: 4.0
//----------------------------------------------------------------------------
//  UnitName: DDN.Aspose.Words
//  Author: ying32
//----------------------------------------------------------------------------

unit DDN.Aspose.Words;

{$IFDEF FPC}
  {$mode delphi}//{$H+}
  {$modeswitch advancedrecords}
  {$modeswitch prefixedattributes} // Custom attributes featureï¼Œfpc3.2.2+
{$ENDIF}

interface

uses
  DDN.Runtime,
  DDN.mscorlib,
  DDN.System.Drawing,
  DDN.System,
  DDN.System.Data,
  DDN.System.Xml,
  DDN.System.Web;

type

{ enums }

  //-------------namespace: Aspose.Words----------------
  [DNTypeName('Aspose.Words.BorderType')]
  DNBorderType = type Integer;
  DNBorderTypeHelper = record helper for DNBorderType
  public const
    Bottom = 0;
    Left = 1;
    Right = 2;
    Top = 3;
    Horizontal = 4;
    Vertical = 5;
    DiagonalDown = 6;
    DiagonalUp = 7;
    None = -1;
  end;


  //-------------namespace: Aspose.Words----------------
  [DNTypeName('Aspose.Words.BreakType')]
  DNBreakType = type Integer;
  DNBreakTypeHelper = record helper for DNBreakType
  public const
    ParagraphBreak = 0;
    PageBreak = 1;
    ColumnBreak = 2;
    SectionBreakContinuous = 3;
    SectionBreakNewColumn = 4;
    SectionBreakNewPage = 5;
    SectionBreakEvenPage = 6;
    SectionBreakOddPage = 7;
    LineBreak = 8;
  end;


  //-------------namespace: Aspose.Words.BuildingBlocks----------------
  [DNTypeName('Aspose.Words.BuildingBlocks.BuildingBlockBehavior')]
  DNBuildingBlockBehavior = type Integer;
  DNBuildingBlockBehaviorHelper = record helper for DNBuildingBlockBehavior
  public const
    Default_ = 0;
    Content = 0;
    Paragraph = 1;
    Page = 2;
  end;


  //-------------namespace: Aspose.Words.BuildingBlocks----------------
  [DNTypeName('Aspose.Words.BuildingBlocks.BuildingBlockGallery')]
  DNBuildingBlockGallery = type Integer;
  DNBuildingBlockGalleryHelper = record helper for DNBuildingBlockGallery
  public const
    Default_ = 0;
    All = 0;
    AutoText = 1;
    Bibliography = 2;
    CoverPage = 3;
    CustomAutoText = 4;
    CustomBibliography = 5;
    CustomCoverPage = 6;
    CustomEquations = 7;
    CustomFooters = 8;
    CustomHeaders = 9;
    Custom1 = 10;
    Custom2 = 11;
    Custom3 = 12;
    Custom4 = 13;
    Custom5 = 14;
    CustomPageNumber = 15;
    CustomPageNumberAtBottom = 16;
    CustomPageNumberAtMargin = 17;
    CustomPageNumberAtTop = 18;
    CustomQuickParts = 19;
    CustomTableOfContents = 20;
    CustomTables = 21;
    CustomTextBox = 22;
    CustomWatermarks = 23;
    NoGallery = 24;
    QuickParts = 25;
    Equations = 26;
    Footers = 27;
    Headers = 28;
    PageNumber = 29;
    PageNumberAtBottom = 30;
    PageNumberAtMargin = 31;
    PageNumberAtTop = 32;
    StructuredDocumentTagPlaceholderText = 33;
    TableOfContents = 34;
    Tables = 35;
    TextBox = 36;
    Watermarks = 37;
  end;


  //-------------namespace: Aspose.Words.BuildingBlocks----------------
  [DNTypeName('Aspose.Words.BuildingBlocks.BuildingBlockType')]
  DNBuildingBlockType = type Integer;
  DNBuildingBlockTypeHelper = record helper for DNBuildingBlockType
  public const
    Default_ = 0;
    None = 0;
    AutomaticallyReplaceNameWithContent = 1;
    StructuredDocumentTagPlaceholderText = 2;
    FormFieldHelpText = 3;
    Normal = 4;
    AutoCorrect = 5;
    AutoText = 6;
    All = 7;
  end;


  //-------------namespace: Aspose.Words----------------
  [DNTypeName('Aspose.Words.CalendarType')]
  DNCalendarType = type Integer;
  DNCalendarTypeHelper = record helper for DNCalendarType
  public const
    Gregorian = 0;
    Hijri = 1;
    Hebrew = 2;
    SakaEra = 3;
    UmAlQura = 4;
  end;


  //-------------namespace: Aspose.Words.Comparing----------------
  [DNTypeName('Aspose.Words.Comparing.ComparisonTargetType')]
  DNComparisonTargetType = type Integer;
  DNComparisonTargetTypeHelper = record helper for DNComparisonTargetType
  public const
    Current = 0;
    New = 1;
  end;


  //-------------namespace: Aspose.Words.Comparing----------------
  [DNTypeName('Aspose.Words.Comparing.Granularity')]
  DNGranularity = type Integer;
  DNGranularityHelper = record helper for DNGranularity
  public const
    CharLevel = 0;
    WordLevel = 1;
  end;


  //-------------namespace: Aspose.Words----------------
  [DNTypeName('Aspose.Words.ConditionalStyleType')]
  DNConditionalStyleType = type Integer;
  DNConditionalStyleTypeHelper = record helper for DNConditionalStyleType
  public const
    FirstRow = 0;
    FirstColumn = 1;
    LastRow = 2;
    LastColumn = 3;
    OddRowBanding = 4;
    OddColumnBanding = 5;
    EvenRowBanding = 6;
    EvenColumnBanding = 7;
    TopLeftCell = 8;
    TopRightCell = 9;
    BottomLeftCell = 10;
    BottomRightCell = 11;
  end;


  //-------------namespace: Aspose.Words----------------
  [DNTypeName('Aspose.Words.ContentDisposition')]
  DNContentDisposition = type Integer;
  DNContentDispositionHelper = record helper for DNContentDisposition
  public const
    Attachment = 0;
    Inline_ = 1;
  end;


  //-------------namespace: Aspose.Words.DigitalSignatures----------------
  [DNTypeName('Aspose.Words.DigitalSignatures.DigitalSignatureType')]
  DNDigitalSignatureType = type Integer;
  DNDigitalSignatureTypeHelper = record helper for DNDigitalSignatureType
  public const
    Unknown = 0;
    CryptoApi = 1;
    XmlDsig = 2;
  end;


  //-------------namespace: Aspose.Words.Drawing----------------
  [DNTypeName('Aspose.Words.Drawing.ArrowLength')]
  DNArrowLength = type Integer;
  DNArrowLengthHelper = record helper for DNArrowLength
  public const
    Default_ = 0;
    Short = 0;
    Medium = 1;
    Long = 2;
  end;


  //-------------namespace: Aspose.Words.Drawing----------------
  [DNTypeName('Aspose.Words.Drawing.ArrowType')]
  DNArrowType = type Integer;
  DNArrowTypeHelper = record helper for DNArrowType
  public const
    None = 0;
    Default_ = 0;
    Arrow = 1;
    Stealth = 2;
    Diamond = 3;
    Oval = 4;
    Open = 5;
  end;


  //-------------namespace: Aspose.Words.Drawing----------------
  [DNTypeName('Aspose.Words.Drawing.ArrowWidth')]
  DNArrowWidth = type Integer;
  DNArrowWidthHelper = record helper for DNArrowWidth
  public const
    Default_ = 0;
    Narrow = 0;
    Medium = 1;
    Wide = 2;
  end;


  //-------------namespace: Aspose.Words.Drawing.Charts----------------
  [DNTypeName('Aspose.Words.Drawing.Charts.AxisBuiltInUnit')]
  DNAxisBuiltInUnit = type Integer;
  DNAxisBuiltInUnitHelper = record helper for DNAxisBuiltInUnit
  public const
    None = 0;
    Custom = 1;
    Billions = 2;
    HundredMillions = 3;
    Hundreds = 4;
    HundredThousands = 5;
    Millions = 6;
    TenMillions = 7;
    TenThousands = 8;
    Thousands = 9;
    Trillions = 10;
    Percentage = 11;
  end;


  //-------------namespace: Aspose.Words.Drawing.Charts----------------
  [DNTypeName('Aspose.Words.Drawing.Charts.AxisCategoryType')]
  DNAxisCategoryType = type Integer;
  DNAxisCategoryTypeHelper = record helper for DNAxisCategoryType
  public const
    Automatic = 0;
    Category = 1;
    Time = 2;
  end;


  //-------------namespace: Aspose.Words.Drawing.Charts----------------
  [DNTypeName('Aspose.Words.Drawing.Charts.AxisCrosses')]
  DNAxisCrosses = type Integer;
  DNAxisCrossesHelper = record helper for DNAxisCrosses
  public const
    Automatic = 0;
    Maximum = 1;
    Minimum = 2;
    Custom = 3;
  end;


  //-------------namespace: Aspose.Words.Drawing.Charts----------------
  [DNTypeName('Aspose.Words.Drawing.Charts.AxisScaleType')]
  DNAxisScaleType = type Integer;
  DNAxisScaleTypeHelper = record helper for DNAxisScaleType
  public const
    Linear = 0;
    Logarithmic = 1;
  end;


  //-------------namespace: Aspose.Words.Drawing.Charts----------------
  [DNTypeName('Aspose.Words.Drawing.Charts.AxisTickLabelPosition')]
  DNAxisTickLabelPosition = type Integer;
  DNAxisTickLabelPositionHelper = record helper for DNAxisTickLabelPosition
  public const
    High = 0;
    Low = 1;
    NextToAxis = 2;
    Default_ = 2;
    None = 3;
  end;


  //-------------namespace: Aspose.Words.Drawing.Charts----------------
  [DNTypeName('Aspose.Words.Drawing.Charts.AxisTickMark')]
  DNAxisTickMark = type Integer;
  DNAxisTickMarkHelper = record helper for DNAxisTickMark
  public const
    Cross = 0;
    Inside = 1;
    Outside = 2;
    None = 3;
  end;


  //-------------namespace: Aspose.Words.Drawing.Charts----------------
  [DNTypeName('Aspose.Words.Drawing.Charts.AxisTimeUnit')]
  DNAxisTimeUnit = type Integer;
  DNAxisTimeUnitHelper = record helper for DNAxisTimeUnit
  public const
    Automatic = 0;
    Days = 1;
    Months = 2;
    Years = 3;
  end;


  //-------------namespace: Aspose.Words.Drawing.Charts----------------
  [DNTypeName('Aspose.Words.Drawing.Charts.ChartAxisType')]
  DNChartAxisType = type Integer;
  DNChartAxisTypeHelper = record helper for DNChartAxisType
  public const
    Category = 0;
    Series = 1;
    Value = 2;
  end;


  //-------------namespace: Aspose.Words.Drawing.Charts----------------
  [DNTypeName('Aspose.Words.Drawing.Charts.ChartType')]
  DNChartType = type Integer;
  DNChartTypeHelper = record helper for DNChartType
  public const
    Area = 0;
    AreaStacked = 1;
    AreaPercentStacked = 2;
    Area3D = 3;
    Area3DStacked = 4;
    Area3DPercentStacked = 5;
    Bar = 6;
    BarStacked = 7;
    BarPercentStacked = 8;
    Bar3D = 9;
    Bar3DStacked = 10;
    Bar3DPercentStacked = 11;
    Bubble = 12;
    Bubble3D = 13;
    Column = 14;
    ColumnStacked = 15;
    ColumnPercentStacked = 16;
    Column3D = 17;
    Column3DStacked = 18;
    Column3DPercentStacked = 19;
    Column3DClustered = 20;
    Doughnut = 21;
    Line = 22;
    LineStacked = 23;
    LinePercentStacked = 24;
    Line3D = 25;
    Pie = 26;
    Pie3D = 27;
    PieOfBar = 28;
    PieOfPie = 29;
    Radar = 30;
    Scatter = 31;
    Stock = 32;
    Surface = 33;
    Surface3D = 34;
  end;


  //-------------namespace: Aspose.Words.Drawing.Charts----------------
  [DNTypeName('Aspose.Words.Drawing.Charts.LegendPosition')]
  DNLegendPosition = type Integer;
  DNLegendPositionHelper = record helper for DNLegendPosition
  public const
    None = 0;
    Bottom = 1;
    Left = 2;
    Right = 3;
    Top = 4;
    TopRight = 5;
  end;


  //-------------namespace: Aspose.Words.Drawing.Charts----------------
  [DNTypeName('Aspose.Words.Drawing.Charts.MarkerSymbol')]
  DNMarkerSymbol = type Integer;
  DNMarkerSymbolHelper = record helper for DNMarkerSymbol
  public const
    Default_ = 0;
    Circle = 1;
    Dash = 2;
    Diamond = 3;
    Dot = 4;
    None = 5;
    Picture = 6;
    Plus = 7;
    Square = 8;
    Star = 9;
    Triangle = 10;
    X = 11;
  end;


  //-------------namespace: Aspose.Words.Drawing----------------
  [DNTypeName('Aspose.Words.Drawing.DashStyle')]
  DNDashStyle = type Integer;
  DNDashStyleHelper = record helper for DNDashStyle
  public const
    Default_ = 0;
    Solid = 0;
    ShortDash = 1;
    ShortDot = 2;
    ShortDashDot = 3;
    ShortDashDotDot = 4;
    Dot = 5;
    Dash = 6;
    LongDash = 7;
    DashDot = 8;
    LongDashDot = 9;
    LongDashDotDot = 10;
  end;


  //-------------namespace: Aspose.Words.Drawing----------------
  [DNTypeName('Aspose.Words.Drawing.EndCap')]
  DNEndCap = type Integer;
  DNEndCapHelper = record helper for DNEndCap
  public const
    Round = 0;
    Square = 1;
    Flat = 2;
    Default_ = 2;
  end;


  //-------------namespace: Aspose.Words.Drawing----------------
  [DNTypeName('Aspose.Words.Drawing.FillType')]
  DNFillType = type Integer;
  DNFillTypeHelper = record helper for DNFillType
  public const
    Solid = 1;
    Patterned = 2;
    Gradient = 3;
    Textured = 4;
    Background = 5;
    Picture = 6;
  end;


  //-------------namespace: Aspose.Words.Drawing----------------
  [DNTypeName('Aspose.Words.Drawing.FlipOrientation')]
  DNFlipOrientation = type Integer;
  DNFlipOrientationHelper = record helper for DNFlipOrientation
  public const
    None = 0;
    Horizontal = 1;
    Vertical = 2;
    Both = 3;
  end;


  //-------------namespace: Aspose.Words.Drawing----------------
  [DNTypeName('Aspose.Words.Drawing.HorizontalAlignment')]
  DNHorizontalAlignment = type Integer;
  DNHorizontalAlignmentHelper = record helper for DNHorizontalAlignment
  public const
    None = 0;
    Default_ = 0;
    Left = 1;
    Center = 2;
    Right = 3;
    Inside = 4;
    Outside = 5;
  end;


  //-------------namespace: Aspose.Words.Drawing----------------
  [DNTypeName('Aspose.Words.Drawing.HorizontalRuleAlignment')]
  DNHorizontalRuleAlignment = type Integer;
  DNHorizontalRuleAlignmentHelper = record helper for DNHorizontalRuleAlignment
  public const
    Left = 0;
    Center = 1;
    Right = 2;
  end;


  //-------------namespace: Aspose.Words.Drawing----------------
  [DNTypeName('Aspose.Words.Drawing.ImageType')]
  DNImageType = type Integer;
  DNImageTypeHelper = record helper for DNImageType
  public const
    NoImage = 0;
    Unknown = 1;
    Emf = 2;
    Wmf = 3;
    Pict = 4;
    Jpeg = 5;
    Png = 6;
    Bmp = 7;
  end;


  //-------------namespace: Aspose.Words.Drawing----------------
  [DNTypeName('Aspose.Words.Drawing.JoinStyle')]
  DNJoinStyle = type Integer;
  DNJoinStyleHelper = record helper for DNJoinStyle
  public const
    Bevel = 0;
    Miter = 1;
    Round = 2;
  end;


  //-------------namespace: Aspose.Words.Drawing----------------
  [DNTypeName('Aspose.Words.Drawing.LayoutFlow')]
  DNLayoutFlow = type Integer;
  DNLayoutFlowHelper = record helper for DNLayoutFlow
  public const
    Horizontal = 0;
    TopToBottomIdeographic = 1;
    BottomToTop = 2;
    TopToBottom = 3;
    HorizontalIdeographic = 4;
    Vertical = 5;
  end;


  //-------------namespace: Aspose.Words.Drawing.Ole----------------
  [DNTypeName('Aspose.Words.Drawing.Ole.Forms2OleControlType')]
  DNForms2OleControlType = type Integer;
  DNForms2OleControlTypeHelper = record helper for DNForms2OleControlType
  public const
    OptionButton = 0;
    Label_ = 1;
    Textbox = 2;
    CheckBox = 3;
    ToggleButton = 4;
    SpinButton = 5;
    ComboBox = 6;
    Frame = 7;
    MultiPage = 8;
    TabStrip = 9;
    CommandButton = 10;
    Image = 11;
    ScrollBar = 12;
    Form = 13;
    ListBox = 14;
  end;


  //-------------namespace: Aspose.Words.Drawing----------------
  [DNTypeName('Aspose.Words.Drawing.PresetTexture')]
  DNPresetTexture = type Integer;
  DNPresetTextureHelper = record helper for DNPresetTexture
  public const
    BlueTissuePaper = 1;
    Bouquet = 2;
    BrownMarble = 3;
    Canvas = 4;
    Cork = 5;
    Denim = 6;
    FishFossil = 7;
    Granite = 8;
    GreenMarble = 9;
    MediumWood = 10;
    Newsprint = 11;
    Oak = 12;
    PaperBag = 13;
    Papyrus = 14;
    Parchment = 15;
    PinkTissuePaper = 16;
    PurpleMesh = 17;
    RecycledPaper = 18;
    Sand = 19;
    Stationery = 20;
    Walnut = 21;
    WaterDroplets = 22;
    WhiteMarble = 23;
    WovenMat = 24;
    None = -1;
  end;


  //-------------namespace: Aspose.Words.Drawing----------------
  [DNTypeName('Aspose.Words.Drawing.RelativeHorizontalPosition')]
  DNRelativeHorizontalPosition = type Integer;
  DNRelativeHorizontalPositionHelper = record helper for DNRelativeHorizontalPosition
  public const
    Margin = 0;
    Page = 1;
    Column = 2;
    Default_ = 2;
    Character = 3;
    LeftMargin = 4;
    RightMargin = 5;
    InsideMargin = 6;
    OutsideMargin = 7;
  end;


  //-------------namespace: Aspose.Words.Drawing----------------
  [DNTypeName('Aspose.Words.Drawing.RelativeVerticalPosition')]
  DNRelativeVerticalPosition = type Integer;
  DNRelativeVerticalPositionHelper = record helper for DNRelativeVerticalPosition
  public const
    Margin = 0;
    TableDefault = 0;
    Page = 1;
    Paragraph = 2;
    TextFrameDefault = 2;
    Line = 3;
    TopMargin = 4;
    BottomMargin = 5;
    InsideMargin = 6;
    OutsideMargin = 7;
  end;


  //-------------namespace: Aspose.Words.Drawing----------------
  [DNTypeName('Aspose.Words.Drawing.ShapeLineStyle')]
  DNShapeLineStyle = type Integer;
  DNShapeLineStyleHelper = record helper for DNShapeLineStyle
  public const
    Single = 0;
    Default_ = 0;
    Double = 1;
    ThickThin = 2;
    ThinThick = 3;
    Triple = 4;
  end;


  //-------------namespace: Aspose.Words.Drawing----------------
  [DNTypeName('Aspose.Words.Drawing.ShapeMarkupLanguage')]
  DNShapeMarkupLanguage = type Integer;
  DNShapeMarkupLanguageHelper = record helper for DNShapeMarkupLanguage
  public const
    Dml = 0;
    Vml = 1;
  end;


  //-------------namespace: Aspose.Words.Drawing----------------
  [DNTypeName('Aspose.Words.Drawing.ShapeType')]
  DNShapeType = type Integer;
  DNShapeTypeHelper = record helper for DNShapeType
  public const
    NonPrimitive = 0;
    Rectangle = 1;
    RoundRectangle = 2;
    Ellipse = 3;
    Diamond = 4;
    Triangle = 5;
    RightTriangle = 6;
    Parallelogram = 7;
    Trapezoid = 8;
    Hexagon = 9;
    Octagon = 10;
    Plus = 11;
    Star = 12;
    Arrow = 13;
    ThickArrow = 14;
    HomePlate = 15;
    Cube = 16;
    Balloon = 17;
    Seal = 18;
    Arc = 19;
    Line = 20;
    Plaque = 21;
    Can = 22;
    Donut = 23;
    TextSimple = 24;
    TextOctagon = 25;
    TextHexagon = 26;
    TextCurve = 27;
    TextWave = 28;
    TextRing = 29;
    TextOnCurve = 30;
    TextOnRing = 31;
    StraightConnector1 = 32;
    BentConnector2 = 33;
    BentConnector3 = 34;
    BentConnector4 = 35;
    BentConnector5 = 36;
    CurvedConnector2 = 37;
    CurvedConnector3 = 38;
    CurvedConnector4 = 39;
    CurvedConnector5 = 40;
    Callout1 = 41;
    Callout2 = 42;
    Callout3 = 43;
    AccentCallout1 = 44;
    AccentCallout2 = 45;
    AccentCallout3 = 46;
    BorderCallout1 = 47;
    BorderCallout2 = 48;
    BorderCallout3 = 49;
    AccentBorderCallout1 = 50;
    AccentBorderCallout2 = 51;
    AccentBorderCallout3 = 52;
    Ribbon = 53;
    Ribbon2 = 54;
    Chevron = 55;
    Pentagon = 56;
    NoSmoking = 57;
    Seal8 = 58;
    Seal16 = 59;
    Seal32 = 60;
    WedgeRectCallout = 61;
    WedgeRRectCallout = 62;
    WedgeEllipseCallout = 63;
    Wave = 64;
    FoldedCorner = 65;
    LeftArrow = 66;
    DownArrow = 67;
    UpArrow = 68;
    LeftRightArrow = 69;
    UpDownArrow = 70;
    IrregularSeal1 = 71;
    IrregularSeal2 = 72;
    LightningBolt = 73;
    Heart = 74;
    Image = 75;
    QuadArrow = 76;
    LeftArrowCallout = 77;
    RightArrowCallout = 78;
    UpArrowCallout = 79;
    DownArrowCallout = 80;
    LeftRightArrowCallout = 81;
    UpDownArrowCallout = 82;
    QuadArrowCallout = 83;
    Bevel = 84;
    LeftBracket = 85;
    RightBracket = 86;
    LeftBrace = 87;
    RightBrace = 88;
    LeftUpArrow = 89;
    BentUpArrow = 90;
    BentArrow = 91;
    Seal24 = 92;
    StripedRightArrow = 93;
    NotchedRightArrow = 94;
    BlockArc = 95;
    SmileyFace = 96;
    VerticalScroll = 97;
    HorizontalScroll = 98;
    CircularArrow = 99;
    CustomShape = 100;
    UturnArrow = 101;
    CurvedRightArrow = 102;
    CurvedLeftArrow = 103;
    CurvedUpArrow = 104;
    CurvedDownArrow = 105;
    CloudCallout = 106;
    EllipseRibbon = 107;
    EllipseRibbon2 = 108;
    FlowChartProcess = 109;
    FlowChartDecision = 110;
    FlowChartInputOutput = 111;
    FlowChartPredefinedProcess = 112;
    FlowChartInternalStorage = 113;
    FlowChartDocument = 114;
    FlowChartMultidocument = 115;
    FlowChartTerminator = 116;
    FlowChartPreparation = 117;
    FlowChartManualInput = 118;
    FlowChartManualOperation = 119;
    FlowChartConnector = 120;
    FlowChartPunchedCard = 121;
    FlowChartPunchedTape = 122;
    FlowChartSummingJunction = 123;
    FlowChartOr = 124;
    FlowChartCollate = 125;
    FlowChartSort = 126;
    FlowChartExtract = 127;
    FlowChartMerge = 128;
    FlowChartOfflineStorage = 129;
    FlowChartOnlineStorage = 130;
    FlowChartMagneticTape = 131;
    FlowChartMagneticDisk = 132;
    FlowChartMagneticDrum = 133;
    FlowChartDisplay = 134;
    FlowChartDelay = 135;
    TextPlainText = 136;
    TextStop = 137;
    TextTriangle = 138;
    TextTriangleInverted = 139;
    TextChevron = 140;
    TextChevronInverted = 141;
    TextRingInside = 142;
    TextRingOutside = 143;
    TextArchUpCurve = 144;
    TextArchDownCurve = 145;
    TextCircleCurve = 146;
    TextButtonCurve = 147;
    TextArchUpPour = 148;
    TextArchDownPour = 149;
    TextCirclePour = 150;
    TextButtonPour = 151;
    TextCurveUp = 152;
    TextCurveDown = 153;
    TextCascadeUp = 154;
    TextCascadeDown = 155;
    TextWave1 = 156;
    TextWave2 = 157;
    TextWave3 = 158;
    TextWave4 = 159;
    TextInflate = 160;
    TextDeflate = 161;
    TextInflateBottom = 162;
    TextDeflateBottom = 163;
    TextInflateTop = 164;
    TextDeflateTop = 165;
    TextDeflateInflate = 166;
    TextDeflateInflateDeflate = 167;
    TextFadeRight = 168;
    TextFadeLeft = 169;
    TextFadeUp = 170;
    TextFadeDown = 171;
    TextSlantUp = 172;
    TextSlantDown = 173;
    TextCanUp = 174;
    TextCanDown = 175;
    FlowChartAlternateProcess = 176;
    FlowChartOffpageConnector = 177;
    Callout90 = 178;
    AccentCallout90 = 179;
    BorderCallout90 = 180;
    AccentBorderCallout90 = 181;
    LeftRightUpArrow = 182;
    Sun = 183;
    Moon = 184;
    BracketPair = 185;
    BracePair = 186;
    Seal4 = 187;
    DoubleWave = 188;
    ActionButtonBlank = 189;
    ActionButtonHome = 190;
    ActionButtonHelp = 191;
    ActionButtonInformation = 192;
    ActionButtonForwardNext = 193;
    ActionButtonBackPrevious = 194;
    ActionButtonEnd = 195;
    ActionButtonBeginning = 196;
    ActionButtonReturn = 197;
    ActionButtonDocument = 198;
    ActionButtonSound = 199;
    ActionButtonMovie = 200;
    OleControl = 201;
    TextBox = 202;
    SingleCornerSnipped = 203;
    TopCornersSnipped = 204;
    DiagonalCornersSnipped = 205;
    TopCornersOneRoundedOneSnipped = 206;
    SingleCornerRounded = 207;
    TopCornersRounded = 208;
    DiagonalCornersRounded = 209;
    Heptagon = 210;
    Cloud = 211;
    Seal6 = 212;
    Seal7 = 213;
    Seal10 = 214;
    Seal12 = 215;
    SwooshArrow = 216;
    Teardrop = 217;
    SquareTabs = 218;
    PlaqueTabs = 219;
    Pie = 220;
    WedgePie = 221;
    InverseLine = 222;
    MathPlus = 223;
    MathMinus = 224;
    MathMultiply = 225;
    MathDivide = 226;
    MathEqual = 227;
    MathNotEqual = 228;
    NonIsoscelesTrapezoid = 229;
    LeftRightCircularArrow = 230;
    LeftRightRibbon = 231;
    LeftCircularArrow = 232;
    Frame = 233;
    HalfFrame = 234;
    Funnel = 235;
    Gear6 = 236;
    Gear9 = 237;
    Decagon = 238;
    Dodecagon = 239;
    DiagonalStripe = 240;
    Corner = 241;
    CornerTabs = 242;
    Chord = 243;
    ChartPlus = 244;
    ChartStar = 245;
    ChartX = 246;
    OleObject = -2;
    MinValue = -2;
    Group = -1;
  end;


  //-------------namespace: Aspose.Words.Drawing----------------
  [DNTypeName('Aspose.Words.Drawing.TextBoxAnchor')]
  DNTextBoxAnchor = type Integer;
  DNTextBoxAnchorHelper = record helper for DNTextBoxAnchor
  public const
    Top = 0;
    Middle = 1;
    Bottom = 2;
    TopCentered = 3;
    MiddleCentered = 4;
    BottomCentered = 5;
    TopBaseline = 6;
    BottomBaseline = 7;
    TopCenteredBaseline = 8;
    BottomCenteredBaseline = 9;
  end;


  //-------------namespace: Aspose.Words.Drawing----------------
  [DNTypeName('Aspose.Words.Drawing.TextBoxWrapMode')]
  DNTextBoxWrapMode = type Integer;
  DNTextBoxWrapModeHelper = record helper for DNTextBoxWrapMode
  public const
    Square = 0;
    None = 2;
  end;


  //-------------namespace: Aspose.Words.Drawing----------------
  [DNTypeName('Aspose.Words.Drawing.TextPathAlignment')]
  DNTextPathAlignment = type Integer;
  DNTextPathAlignmentHelper = record helper for DNTextPathAlignment
  public const
    Stretch = 0;
    Center = 1;
    Left = 2;
    Right = 3;
    LetterJustify = 4;
    WordJustify = 5;
  end;


  //-------------namespace: Aspose.Words.Drawing----------------
  [DNTypeName('Aspose.Words.Drawing.VerticalAlignment')]
  DNVerticalAlignment = type Integer;
  DNVerticalAlignmentHelper = record helper for DNVerticalAlignment
  public const
    None = 0;
    Default_ = 0;
    Top = 1;
    Center = 2;
    Bottom = 3;
    Inside = 4;
    Outside = 5;
    Inline_ = -1;
  end;


  //-------------namespace: Aspose.Words.Drawing----------------
  [DNTypeName('Aspose.Words.Drawing.WrapSide')]
  DNWrapSide = type Integer;
  DNWrapSideHelper = record helper for DNWrapSide
  public const
    Both = 0;
    Default_ = 0;
    Left = 1;
    Right = 2;
    Largest = 3;
  end;


  //-------------namespace: Aspose.Words.Drawing----------------
  [DNTypeName('Aspose.Words.Drawing.WrapType')]
  DNWrapType = type Integer;
  DNWrapTypeHelper = record helper for DNWrapType
  public const
    Inline_ = 0;
    TopBottom = 1;
    Square = 2;
    None = 3;
    Tight = 4;
    Through = 5;
  end;


  //-------------namespace: Aspose.Words----------------
  [DNTypeName('Aspose.Words.DropCapPosition')]
  DNDropCapPosition = type Integer;
  DNDropCapPositionHelper = record helper for DNDropCapPosition
  public const
    None = 0;
    Normal = 1;
    Margin = 2;
  end;


  //-------------namespace: Aspose.Words----------------
  [DNTypeName('Aspose.Words.EditorType')]
  DNEditorType = type Integer;
  DNEditorTypeHelper = record helper for DNEditorType
  public const
    Default_ = 0;
    Unspecified = 0;
    Administrators = 1;
    Contributors = 2;
    Current = 3;
    Editors = 4;
    Everyone = 5;
    None = 6;
    Owners = 7;
  end;


  //-------------namespace: Aspose.Words----------------
  [DNTypeName('Aspose.Words.EmphasisMark')]
  DNEmphasisMark = type Integer;
  DNEmphasisMarkHelper = record helper for DNEmphasisMark
  public const
    None = 0;
    OverSolidCircle = 1;
    OverComma = 2;
    OverWhiteCircle = 3;
    UnderSolidCircle = 4;
  end;


  //-------------namespace: Aspose.Words.Fields----------------
  [DNTypeName('Aspose.Words.Fields.FieldIfComparisonResult')]
  DNFieldIfComparisonResult = type Integer;
  DNFieldIfComparisonResultHelper = record helper for DNFieldIfComparisonResult
  public const
    Error = 0;
    True = 1;
    False = 2;
  end;


  //-------------namespace: Aspose.Words.Fields----------------
  [DNTypeName('Aspose.Words.Fields.FieldIndexFormat')]
  DNFieldIndexFormat = type Integer;
  DNFieldIndexFormatHelper = record helper for DNFieldIndexFormat
  public const
    Template = 0;
    Classic = 1;
    Fancy = 2;
    Modern = 3;
    Bulleted = 4;
    Formal = 5;
    Simple = 6;
  end;


  //-------------namespace: Aspose.Words.Fields----------------
  [DNTypeName('Aspose.Words.Fields.FieldType')]
  DNFieldType = type Integer;
  DNFieldTypeHelper = record helper for DNFieldType
  public const
    FieldNone = 0;
    FieldCannotParse = 1;
    FieldRefNoKeyword = 2;
    FieldRef = 3;
    FieldIndexEntry = 4;
    FieldFootnoteRef = 5;
    FieldSet = 6;
    FieldIf = 7;
    FieldIndex = 8;
    FieldTOCEntry = 9;
    FieldStyleRef = 10;
    FieldRefDoc = 11;
    FieldSequence = 12;
    FieldTOC = 13;
    FieldInfo = 14;
    FieldTitle = 15;
    FieldSubject = 16;
    FieldAuthor = 17;
    FieldKeyword = 18;
    FieldComments = 19;
    FieldLastSavedBy = 20;
    FieldCreateDate = 21;
    FieldSaveDate = 22;
    FieldPrintDate = 23;
    FieldRevisionNum = 24;
    FieldEditTime = 25;
    FieldNumPages = 26;
    FieldNumWords = 27;
    FieldNumChars = 28;
    FieldFileName = 29;
    FieldTemplate = 30;
    FieldDate = 31;
    FieldTime = 32;
    FieldPage = 33;
    FieldFormula = 34;
    FieldQuote = 35;
    FieldInclude = 36;
    FieldPageRef = 37;
    FieldAsk = 38;
    FieldFillIn = 39;
    FieldData = 40;
    FieldNext = 41;
    FieldNextIf = 42;
    FieldSkipIf = 43;
    FieldMergeRec = 44;
    FieldDDE = 45;
    FieldDDEAuto = 46;
    FieldGlossary = 47;
    FieldPrint = 48;
    FieldEquation = 49;
    FieldGoToButton = 50;
    FieldMacroButton = 51;
    FieldAutoNumOutline = 52;
    FieldAutoNumLegal = 53;
    FieldAutoNum = 54;
    FieldImport = 55;
    FieldLink = 56;
    FieldSymbol = 57;
    FieldEmbed = 58;
    FieldMergeField = 59;
    FieldUserName = 60;
    FieldUserInitials = 61;
    FieldUserAddress = 62;
    FieldBarcode = 63;
    FieldDocVariable = 64;
    FieldSection = 65;
    FieldSectionPages = 66;
    FieldIncludePicture = 67;
    FieldIncludeText = 68;
    FieldFileSize = 69;
    FieldFormTextInput = 70;
    FieldFormCheckBox = 71;
    FieldNoteRef = 72;
    FieldTOA = 73;
    FieldTOAEntry = 74;
    FieldMergeSeq = 75;
    FieldPrivate = 77;
    FieldDatabase = 78;
    FieldAutoText = 79;
    FieldCompare = 80;
    FieldAddin = 81;
    FieldFormDropDown = 83;
    FieldAdvance = 84;
    FieldDocProperty = 85;
    FieldOcx = 87;
    FieldHyperlink = 88;
    FieldAutoTextList = 89;
    FieldListNum = 90;
    FieldHtmlActiveX = 91;
    FieldBidiOutline = 92;
    FieldAddressBlock = 93;
    FieldGreetingLine = 94;
    FieldShape = 95;
    FieldCitation = 1980;
    FieldDisplayBarcode = 6301;
    FieldMergeBarcode = 6302;
    FieldBibliography = 100500;
  end;


  //-------------namespace: Aspose.Words.Fields----------------
  [DNTypeName('Aspose.Words.Fields.FieldUpdateCultureSource')]
  DNFieldUpdateCultureSource = type Integer;
  DNFieldUpdateCultureSourceHelper = record helper for DNFieldUpdateCultureSource
  public const
    CurrentThread = 0;
    FieldCode = 1;
  end;


  //-------------namespace: Aspose.Words.Fields----------------
  [DNTypeName('Aspose.Words.Fields.GeneralFormat')]
  DNGeneralFormat = type Integer;
  DNGeneralFormatHelper = record helper for DNGeneralFormat
  public const
    None = 0;
    Aiueo = 1;
    UppercaseAlphabetic = 2;
    LowercaseAlphabetic = 3;
    Arabic = 4;
    ArabicAbjad = 5;
    ArabicAlpha = 6;
    ArabicDash = 7;
    BahtText = 8;
    CardText = 9;
    ChineseNum1 = 10;
    ChineseNum2 = 11;
    ChineseNum3 = 12;
    Chosung = 13;
    CircleNum = 14;
    DBChar = 15;
    DBNum1 = 16;
    DBNum2 = 17;
    DBNum3 = 18;
    DBNum4 = 19;
    DollarText = 20;
    Ganada = 21;
    GB1 = 22;
    GB2 = 23;
    GB3 = 24;
    GB4 = 25;
    Hebrew1 = 26;
    Hebrew2 = 27;
    Hex = 28;
    HindiArabic = 29;
    HindiCardText = 30;
    HindiLetter1 = 31;
    HindiLetter2 = 32;
    Iroha = 33;
    KanjiNum1 = 34;
    KanjiNum2 = 35;
    KanjiNum3 = 36;
    Ordinal = 37;
    OrdText = 38;
    UppercaseRoman = 39;
    LowercaseRoman = 40;
    SBChar = 41;
    ThaiArabic = 42;
    ThaiCardText = 43;
    ThaiLetter = 44;
    VietCardText = 45;
    Zodiac1 = 46;
    Zodiac2 = 47;
    Zodiac3 = 48;
    Caps = 49;
    FirstCap = 50;
    Lower = 51;
    Upper = 52;
    CharFormat = 53;
    MergeFormat = 54;
    MergeFormatInet = 55;
  end;


  //-------------namespace: Aspose.Words.Fields----------------
  [DNTypeName('Aspose.Words.Fields.MergeFieldImageDimensionUnit')]
  DNMergeFieldImageDimensionUnit = type Integer;
  DNMergeFieldImageDimensionUnitHelper = record helper for DNMergeFieldImageDimensionUnit
  public const
    Point = 0;
    Percent = 1;
  end;


  //-------------namespace: Aspose.Words.Fields----------------
  [DNTypeName('Aspose.Words.Fields.TextFormFieldType')]
  DNTextFormFieldType = type Integer;
  DNTextFormFieldTypeHelper = record helper for DNTextFormFieldType
  public const
    Regular = 0;
    Number = 1;
    Date = 2;
    CurrentDate = 3;
    CurrentTime = 4;
    Calculated = 5;
  end;


  //-------------namespace: Aspose.Words.Fonts----------------
  [DNTypeName('Aspose.Words.Fonts.EmbeddedFontFormat')]
  DNEmbeddedFontFormat = type Integer;
  DNEmbeddedFontFormatHelper = record helper for DNEmbeddedFontFormat
  public const
    EmbeddedOpenType = 0;
    OpenType = 1;
  end;


  //-------------namespace: Aspose.Words.Fonts----------------
  [DNTypeName('Aspose.Words.Fonts.EmbeddedFontStyle')]
  DNEmbeddedFontStyle = type Integer;
  DNEmbeddedFontStyleHelper = record helper for DNEmbeddedFontStyle
  public const
    Regular = 0;
    Bold = 1;
    Italic = 2;
    BoldItalic = 3;
  end;


  //-------------namespace: Aspose.Words.Fonts----------------
  [DNTypeName('Aspose.Words.Fonts.FontFamily')]
  DNFontFamily = type Integer;
  DNFontFamilyHelper = record helper for DNFontFamily
  public const
    Auto = 0;
    Roman = 1;
    Swiss = 2;
    Modern = 3;
    Script = 4;
    Decorative = 5;
  end;


  //-------------namespace: Aspose.Words.Fonts----------------
  [DNTypeName('Aspose.Words.Fonts.FontPitch')]
  DNFontPitch = type Integer;
  DNFontPitchHelper = record helper for DNFontPitch
  public const
    Default_ = 0;
    Fixed = 1;
    Variable = 2;
  end;


  //-------------namespace: Aspose.Words.Fonts----------------
  [DNTypeName('Aspose.Words.Fonts.FontSourceType')]
  DNFontSourceType = type Integer;
  DNFontSourceTypeHelper = record helper for DNFontSourceType
  public const
    FontFile = 0;
    FontsFolder = 1;
    MemoryFont = 2;
    SystemFonts = 3;
    FontStream = 4;
  end;


  //-------------namespace: Aspose.Words----------------
  [DNTypeName('Aspose.Words.HeaderFooterType')]
  DNHeaderFooterType = type Integer;
  DNHeaderFooterTypeHelper = record helper for DNHeaderFooterType
  public const
    HeaderEven = 0;
    HeaderPrimary = 1;
    FooterEven = 2;
    FooterPrimary = 3;
    HeaderFirst = 4;
    FooterFirst = 5;
  end;


  //-------------namespace: Aspose.Words----------------
  [DNTypeName('Aspose.Words.HeightRule')]
  DNHeightRule = type Integer;
  DNHeightRuleHelper = record helper for DNHeightRule
  public const
    AtLeast = 0;
    Exactly = 1;
    Auto = 2;
  end;


  //-------------namespace: Aspose.Words----------------
  [DNTypeName('Aspose.Words.ImportFormatMode')]
  DNImportFormatMode = type Integer;
  DNImportFormatModeHelper = record helper for DNImportFormatMode
  public const
    UseDestinationStyles = 0;
    KeepSourceFormatting = 1;
    KeepDifferentStyles = 2;
  end;


  //-------------namespace: Aspose.Words.Layout----------------
  [DNTypeName('Aspose.Words.Layout.CommentDisplayMode')]
  DNCommentDisplayMode = type Integer;
  DNCommentDisplayModeHelper = record helper for DNCommentDisplayMode
  public const
    Hide = 0;
    ShowInBalloons = 1;
    ShowInAnnotations = 2;
  end;


  //-------------namespace: Aspose.Words.Layout----------------
  [DNTypeName('Aspose.Words.Layout.ContinuosSectionRestart')]
  DNContinuosSectionRestart = type Integer;
  DNContinuosSectionRestartHelper = record helper for DNContinuosSectionRestart
  public const
    Always = 0;
    FromNewPageOnly = 1;
  end;


  //-------------namespace: Aspose.Words.Layout----------------
  [DNTypeName('Aspose.Words.Layout.LayoutEntityType')]
  DNLayoutEntityType = type Integer;
  DNLayoutEntityTypeHelper = record helper for DNLayoutEntityType
  public const
    None = 0;
    Page = 1;
    Column = 2;
    Row = 8;
    Cell = 16;
    Line = 32;
    Span = 64;
    Footnote = 256;
    Endnote = 512;
    HeaderFooter = 1024;
    TextBox = 2048;
    Comment = 4096;
    NoteSeparator = 8192;
    Note = 16384;
  end;


  //-------------namespace: Aspose.Words.Layout----------------
  [DNTypeName('Aspose.Words.Layout.PageLayoutEvent')]
  DNPageLayoutEvent = type Integer;
  DNPageLayoutEventHelper = record helper for DNPageLayoutEvent
  public const
    None = 0;
    WatchDog = 1;
    BuildStarted = 2;
    BuildFinished = 3;
    ConversionStarted = 4;
    ConversionFinished = 5;
    ReflowStarted = 6;
    ReflowFinished = 7;
    PartReflowStarted = 8;
    PartReflowFinished = 9;
    PartRenderingStarted = 10;
    PartRenderingFinished = 11;
  end;


  //-------------namespace: Aspose.Words.Layout----------------
  [DNTypeName('Aspose.Words.Layout.RevisionColor')]
  DNRevisionColor = type Integer;
  DNRevisionColorHelper = record helper for DNRevisionColor
  public const
    Auto = 0;
    Black = 1;
    Blue = 2;
    BrightGreen = 3;
    DarkBlue = 4;
    DarkRed = 5;
    DarkYellow = 6;
    Gray25 = 7;
    Gray50 = 8;
    Green = 9;
    Pink = 10;
    Red = 11;
    Teal = 12;
    Turquoise = 13;
    Violet = 14;
    White = 15;
    Yellow = 16;
    NoHighlight = 17;
    ByAuthor = 18;
  end;


  //-------------namespace: Aspose.Words.Layout----------------
  [DNTypeName('Aspose.Words.Layout.RevisionTextEffect')]
  DNRevisionTextEffect = type Integer;
  DNRevisionTextEffectHelper = record helper for DNRevisionTextEffect
  public const
    None = 0;
    Color = 1;
    Bold = 2;
    Italic = 3;
    Underline = 4;
    DoubleUnderline = 5;
    StrikeThrough = 6;
    DoubleStrikeThrough = 7;
    Hidden = 8;
  end;


  //-------------namespace: Aspose.Words.Layout----------------
  [DNTypeName('Aspose.Words.Layout.ShowInBalloons')]
  DNShowInBalloons = type Integer;
  DNShowInBalloonsHelper = record helper for DNShowInBalloons
  public const
    None = 0;
    Format = 1;
    FormatAndDelete = 2;
  end;


  //-------------namespace: Aspose.Words----------------
  [DNTypeName('Aspose.Words.LineNumberRestartMode')]
  DNLineNumberRestartMode = type Integer;
  DNLineNumberRestartModeHelper = record helper for DNLineNumberRestartMode
  public const
    RestartPage = 0;
    RestartSection = 1;
    Continuous = 2;
  end;


  //-------------namespace: Aspose.Words----------------
  [DNTypeName('Aspose.Words.LineSpacingRule')]
  DNLineSpacingRule = type Integer;
  DNLineSpacingRuleHelper = record helper for DNLineSpacingRule
  public const
    AtLeast = 0;
    Exactly = 1;
    Multiple = 2;
  end;


  //-------------namespace: Aspose.Words----------------
  [DNTypeName('Aspose.Words.LineStyle')]
  DNLineStyle = type Integer;
  DNLineStyleHelper = record helper for DNLineStyle
  public const
    None = 0;
    Single = 1;
    Thick = 2;
    Double = 3;
    Hairline = 5;
    Dot = 6;
    DashLargeGap = 7;
    DotDash = 8;
    DotDotDash = 9;
    Triple = 10;
    ThinThickSmallGap = 11;
    ThickThinSmallGap = 12;
    ThinThickThinSmallGap = 13;
    ThinThickMediumGap = 14;
    ThickThinMediumGap = 15;
    ThinThickThinMediumGap = 16;
    ThinThickLargeGap = 17;
    ThickThinLargeGap = 18;
    ThinThickThinLargeGap = 19;
    Wave = 20;
    DoubleWave = 21;
    DashSmallGap = 22;
    DashDotStroker = 23;
    Emboss3D = 24;
    Engrave3D = 25;
    Outset = 26;
    Inset = 27;
  end;


  //-------------namespace: Aspose.Words.Lists----------------
  [DNTypeName('Aspose.Words.Lists.ListLevelAlignment')]
  DNListLevelAlignment = type Integer;
  DNListLevelAlignmentHelper = record helper for DNListLevelAlignment
  public const
    Left = 0;
    Center = 1;
    Right = 2;
  end;


  //-------------namespace: Aspose.Words.Lists----------------
  [DNTypeName('Aspose.Words.Lists.ListTemplate')]
  DNListTemplate = type Integer;
  DNListTemplateHelper = record helper for DNListTemplate
  public const
    BulletDefault = 0;
    BulletDisk = 0;
    BulletCircle = 1;
    BulletSquare = 2;
    BulletDiamonds = 3;
    BulletArrowHead = 4;
    BulletTick = 5;
    NumberDefault = 6;
    NumberArabicDot = 6;
    NumberArabicParenthesis = 7;
    NumberUppercaseRomanDot = 8;
    NumberUppercaseLetterDot = 9;
    NumberLowercaseLetterParenthesis = 10;
    NumberLowercaseLetterDot = 11;
    NumberLowercaseRomanDot = 12;
    OutlineNumbers = 13;
    OutlineLegal = 14;
    OutlineBullets = 15;
    OutlineHeadingsArticleSection = 16;
    OutlineHeadingsLegal = 17;
    OutlineHeadingsNumbers = 18;
    OutlineHeadingsChapter = 19;
  end;


  //-------------namespace: Aspose.Words.Lists----------------
  [DNTypeName('Aspose.Words.Lists.ListTrailingCharacter')]
  DNListTrailingCharacter = type Integer;
  DNListTrailingCharacterHelper = record helper for DNListTrailingCharacter
  public const
    Tab = 0;
    Space = 1;
    Nothing = 2;
  end;


  //-------------namespace: Aspose.Words----------------
  [DNTypeName('Aspose.Words.LoadFormat')]
  DNLoadFormat = type Integer;
  DNLoadFormatHelper = record helper for DNLoadFormat
  public const
    Auto = 0;
    Doc = 10;
    Dot = 11;
    DocPreWord60 = 12;
    Docx = 20;
    Docm = 21;
    Dotx = 22;
    Dotm = 23;
    FlatOpc = 24;
    FlatOpcMacroEnabled = 25;
    FlatOpcTemplate = 26;
    FlatOpcTemplateMacroEnabled = 27;
    Rtf = 30;
    WordML = 31;
    Html = 50;
    Mhtml = 51;
    Mobi = 52;
    Chm = 53;
    Odt = 60;
    Ott = 61;
    Text = 62;
    Markdown = 63;
    Pdf = 64;
    Unknown = 255;
  end;


  //-------------namespace: Aspose.Words.Loading----------------
  [DNTypeName('Aspose.Words.Loading.DocumentDirection')]
  DNDocumentDirection = type Integer;
  DNDocumentDirectionHelper = record helper for DNDocumentDirection
  public const
    LeftToRight = 0;
    RightToLeft = 1;
    Auto = 2;
  end;


  //-------------namespace: Aspose.Words.Loading----------------
  [DNTypeName('Aspose.Words.Loading.EditingLanguage')]
  DNEditingLanguage = type Integer;
  DNEditingLanguageHelper = record helper for DNEditingLanguage
  public const
    ArabicSaudiArabia = 1025;
    Bulgarian = 1026;
    Catalan = 1027;
    ChineseTaiwan = 1028;
    Czech = 1029;
    Danish = 1030;
    GermanGermany = 1031;
    Greek = 1032;
    EnglishUS = 1033;
    SpanishSpainTraditionalSort = 1034;
    Finnish = 1035;
    FrenchFrance = 1036;
    Hebrew = 1037;
    Hungarian = 1038;
    Icelandic = 1039;
    ItalianItaly = 1040;
    Japanese = 1041;
    Korean = 1042;
    DutchNetherlands = 1043;
    NorwegianBokmal = 1044;
    Polish = 1045;
    PortugueseBrazil = 1046;
    Romansh = 1047;
    Romanian = 1048;
    Russian = 1049;
    Croatian = 1050;
    Slovak = 1051;
    Albanian = 1052;
    SwedishSweden = 1053;
    Thai = 1054;
    Turkish = 1055;
    Urdu = 1056;
    Indonesian = 1057;
    Ukrainian = 1058;
    Belarusian = 1059;
    Slovenian = 1060;
    Estonian = 1061;
    Latvian = 1062;
    Lithuanian = 1063;
    Tajik = 1064;
    Persian = 1065;
    Vietnamese = 1066;
    Armenian = 1067;
    AzerbaijaniLatin = 1068;
    Basque = 1069;
    Sorbian = 1070;
    Macedonian = 1071;
    Sutu = 1072;
    Tsonga = 1073;
    Tswana = 1074;
    Venda = 1075;
    IsiXhosa = 1076;
    IsiZulu = 1077;
    Afrikaans = 1078;
    Georgian = 1079;
    Faeroese = 1080;
    Hindi = 1081;
    Maltese = 1082;
    NorthernSamiNorway = 1083;
    Yiddish = 1085;
    MalayMalaysia = 1086;
    Kazakh = 1087;
    Kyrgyz = 1088;
    Kiswahili = 1089;
    Turkmen = 1090;
    UzbekLatin = 1091;
    Tatar = 1092;
    BanglaIndia = 1093;
    PunjabiIndia = 1094;
    Gujarati = 1095;
    Oriya = 1096;
    Tamil = 1097;
    Telugu = 1098;
    Kannada = 1099;
    Malayalam = 1100;
    Assamese = 1101;
    Marathi = 1102;
    Sanskrit = 1103;
    MongolianCyrillic = 1104;
    TibetanChina = 1105;
    Welsh = 1106;
    Khmer = 1107;
    Lao = 1108;
    Burmese = 1109;
    Galician = 1110;
    Konkani = 1111;
    Manipuri = 1112;
    SindhiDevanagaric = 1113;
    Syriac = 1114;
    Sinhalese = 1115;
    Cherokee = 1116;
    Amharic = 1118;
    Tamazight = 1119;
    KashmiriArabic = 1120;
    Nepali = 1121;
    Frisian = 1122;
    Pashto = 1123;
    Filipino = 1124;
    Divehi = 1125;
    Edo = 1126;
    FulahNigeria = 1127;
    Hausa = 1128;
    Yoruba = 1130;
    QuechuaBolivia = 1131;
    Bashkir = 1133;
    Luxembougish = 1134;
    Greenlandic = 1135;
    Igbo = 1136;
    Kanuri = 1137;
    Oromo = 1138;
    TigrignaEthiopia = 1139;
    Guarani = 1140;
    Hawaiian = 1141;
    Latin = 1142;
    Somali = 1143;
    Yi = 1144;
    Papiamentu = 1145;
    MapudungunChile = 1146;
    Mohawk = 1148;
    Breton = 1150;
    Maori = 1153;
    Corsican = 1155;
    Alsatian = 1156;
    Sakha = 1157;
    Kinyarwanda = 1159;
    ScottishGaelic = 1169;
    CentralKurdishIraq = 1170;
    ArabicIraq = 2049;
    ChinesePRC = 2052;
    GermanSwitzerland = 2055;
    EnglishUK = 2057;
    SpanishMexico = 2058;
    FrenchBelgium = 2060;
    ItalianSwitzerland = 2064;
    DutchBelgium = 2067;
    NorwegianNynorsk = 2068;
    PortuguesePortugal = 2070;
    SerbianLatinSerbiaAndMontenegro = 2074;
    SwedishFinland = 2077;
    AzerbaijaniCyrillic = 2092;
    NorthernSamiSweden = 2107;
    Irish = 2108;
    MalayBruneiDarussalam = 2110;
    UzbekCyrillic = 2115;
    BanglaBangladesh = 2117;
    PunjabiPakistan = 2118;
    MongolianMongolian = 2128;
    TibetanButan = 2129;
    Sindhi = 2137;
    TamazightLatin = 2143;
    Kashmiri = 2144;
    FulahLatinSenegal = 2151;
    QuechuaEcuador = 2155;
    TigrignaEritrea = 2163;
    ArabicEgypt = 3073;
    ChineseHongKong = 3076;
    GermanAustria = 3079;
    EnglishAustralia = 3081;
    SpanishSpainModernSort = 3082;
    FrenchCanada = 3084;
    SerbianCyrillicSerbiaAndMontenegro = 3098;
    NorthernSamiFinland = 3131;
    QuechuaPeru = 3179;
    ArabicLibya = 4097;
    ChineseSingapore = 4100;
    GermanLuxembourg = 4103;
    EnglishCanada = 4105;
    SpanishGuatemala = 4106;
    FrenchSwitzerland = 4108;
    CroatianBozniaAndHerzegovina = 4122;
    LuleSamiNorway = 4155;
    ArabicAlgeria = 5121;
    ChineseMacao = 5124;
    GermanLiechtenstein = 5127;
    EnglishNewZealand = 5129;
    SpanishCostaRica = 5130;
    FrenchLuxembourg = 5132;
    BosnianLatin = 5146;
    LuleSamiSweden = 5179;
    ArabicMorocco = 6145;
    EnglishIreland = 6153;
    SpanishPanama = 6154;
    FrenchMonaco = 6156;
    SerbianLatinBosniaAndHerzegovina = 6170;
    ArabicTunisia = 7169;
    EnglishSouthAfrica = 7177;
    SpanishDominicanRepublic = 7178;
    SerbianCyrillicBosniaAndHerzegovina = 7194;
    ArabicOman = 8193;
    EnglishJamaica = 8201;
    SpanishVenezuela = 8202;
    BosnianCyrillic = 8218;
    ArabicYemen = 9217;
    EnglishCaribbean = 9225;
    SpanishColombia = 9226;
    InariSamiFinland = 9275;
    ArabicSyria = 10241;
    EnglishBelize = 10249;
    SpanishPeru = 10250;
    ArabicJordan = 11265;
    EnglishTrinidadAndTobago = 11273;
    SpanishArgentina = 11274;
    ArabicLebanon = 12289;
    EnglishZimbabwe = 12297;
    SpanishEcuador = 12298;
    ArabicKuwait = 13313;
    EnglishPhilippines = 13321;
    SpanishChile = 13322;
    ArabicUAE = 14337;
    EnglishIndonesia = 14345;
    SpanishUruguay = 14346;
    ArabicBahrain = 15361;
    EnglishHongKong = 15369;
    SpanishParaguay = 15370;
    ArabicQatar = 16385;
    EnglishIndia = 16393;
    SpanishBolivia = 16394;
    EnglishMalaysia = 17417;
    SpanishElSalvador = 17418;
    EnglishSingapore = 18441;
    SpanishHonduras = 18442;
    SpanishNicaragua = 19466;
    SpanishPuertoRico = 20490;
    InuktitutSyllabics = 30813;
    LowerSorbian = 31790;
    InuktitutLatin = 31837;
    Kiche = 31878;
  end;


  //-------------namespace: Aspose.Words.Loading----------------
  [DNTypeName('Aspose.Words.Loading.HtmlControlType')]
  DNHtmlControlType = type Integer;
  DNHtmlControlTypeHelper = record helper for DNHtmlControlType
  public const
    FormField = 0;
    StructuredDocumentTag = 1;
  end;


  //-------------namespace: Aspose.Words.Loading----------------
  [DNTypeName('Aspose.Words.Loading.ResourceLoadingAction')]
  DNResourceLoadingAction = type Integer;
  DNResourceLoadingActionHelper = record helper for DNResourceLoadingAction
  public const
    Default_ = 0;
    Skip = 1;
    UserProvided = 2;
  end;


  //-------------namespace: Aspose.Words.Loading----------------
  [DNTypeName('Aspose.Words.Loading.ResourceType')]
  DNResourceType = type Integer;
  DNResourceTypeHelper = record helper for DNResourceType
  public const
    Image = 0;
    CssStyleSheet = 1;
    Document = 2;
  end;


  //-------------namespace: Aspose.Words.Loading----------------
  [DNTypeName('Aspose.Words.Loading.TxtLeadingSpacesOptions')]
  DNTxtLeadingSpacesOptions = type Integer;
  DNTxtLeadingSpacesOptionsHelper = record helper for DNTxtLeadingSpacesOptions
  public const
    ConvertToIndent = 0;
    Trim = 1;
    Preserve = 2;
  end;


  //-------------namespace: Aspose.Words.Loading----------------
  [DNTypeName('Aspose.Words.Loading.TxtTrailingSpacesOptions')]
  DNTxtTrailingSpacesOptions = type Integer;
  DNTxtTrailingSpacesOptionsHelper = record helper for DNTxtTrailingSpacesOptions
  public const
    Trim = 0;
    Preserve = 1;
  end;


  //-------------namespace: Aspose.Words.MailMerging----------------
  [DNTypeName('Aspose.Words.MailMerging.MailMergeCleanupOptions')]
  DNMailMergeCleanupOptions = type Integer;
  DNMailMergeCleanupOptionsHelper = record helper for DNMailMergeCleanupOptions
  public const
    None = 0;
    RemoveEmptyParagraphs = 1;
    RemoveUnusedRegions = 2;
    RemoveUnusedFields = 4;
    RemoveContainingFields = 8;
    RemoveStaticFields = 16;
    RemoveEmptyTableRows = 32;
  end;


  //-------------namespace: Aspose.Words.Markup----------------
  [DNTypeName('Aspose.Words.Markup.MarkupLevel')]
  DNMarkupLevel = type Integer;
  DNMarkupLevelHelper = record helper for DNMarkupLevel
  public const
    Unknown = 0;
    Inline_ = 1;
    Block = 2;
    Row = 3;
    Cell = 4;
  end;


  //-------------namespace: Aspose.Words.Markup----------------
  [DNTypeName('Aspose.Words.Markup.SdtCalendarType')]
  DNSdtCalendarType = type Integer;
  DNSdtCalendarTypeHelper = record helper for DNSdtCalendarType
  public const
    Default_ = 0;
    Gregorian = 0;
    GregorianArabic = 1;
    GregorianMeFrench = 2;
    GregorianUs = 3;
    GregorianXlitEnglish = 4;
    GregorianXlitFrench = 5;
    Hebrew = 6;
    Hijri = 7;
    Japan = 8;
    Korea = 9;
    None = 10;
    Saka = 11;
    Taiwan = 12;
    Thai = 13;
  end;


  //-------------namespace: Aspose.Words.Markup----------------
  [DNTypeName('Aspose.Words.Markup.SdtDateStorageFormat')]
  DNSdtDateStorageFormat = type Integer;
  DNSdtDateStorageFormatHelper = record helper for DNSdtDateStorageFormat
  public const
    Date = 0;
    DateTime = 1;
    Default_ = 1;
    Text = 2;
  end;


  //-------------namespace: Aspose.Words.Markup----------------
  [DNTypeName('Aspose.Words.Markup.SdtType')]
  DNSdtType = type Integer;
  DNSdtTypeHelper = record helper for DNSdtType
  public const
    None = 0;
    Bibliography = 1;
    Citation = 2;
    Equation = 3;
    DropDownList = 4;
    ComboBox = 5;
    Date = 6;
    BuildingBlockGallery = 7;
    DocPartObj = 8;
    Group = 9;
    Picture = 10;
    RichText = 11;
    PlainText = 12;
    Checkbox = 13;
    RepeatingSection = 14;
    RepeatingSectionItem = 15;
    EntityPicker = 16;
  end;


  //-------------namespace: Aspose.Words.Math----------------
  [DNTypeName('Aspose.Words.Math.MathObjectType')]
  DNMathObjectType = type Integer;
  DNMathObjectTypeHelper = record helper for DNMathObjectType
  public const
    OMath = 0;
    OMathPara = 1;
    Accent = 2;
    Bar = 3;
    BorderBox = 4;
    Box = 5;
    Delimiter = 6;
    Degree = 7;
    Argument = 8;
    Array_ = 9;
    Fraction = 10;
    Denominator = 11;
    Numerator = 12;
    Function_ = 13;
    FunctionName = 14;
    GroupCharacter = 15;
    Limit = 16;
    LowerLimit = 17;
    UpperLimit = 18;
    Matrix = 19;
    MatrixRow = 20;
    NAry = 21;
    Phantom = 22;
    Radical = 23;
    SubscriptPart = 24;
    SuperscriptPart = 25;
    PreSubSuperscript = 26;
    Subscript = 27;
    SubSuperscript = 28;
    Supercript = 29;
  end;


  //-------------namespace: Aspose.Words.Math----------------
  [DNTypeName('Aspose.Words.Math.OfficeMathDisplayType')]
  DNOfficeMathDisplayType = type Integer;
  DNOfficeMathDisplayTypeHelper = record helper for DNOfficeMathDisplayType
  public const
    Display = 0;
    Inline_ = 1;
  end;


  //-------------namespace: Aspose.Words.Math----------------
  [DNTypeName('Aspose.Words.Math.OfficeMathJustification')]
  DNOfficeMathJustification = type Integer;
  DNOfficeMathJustificationHelper = record helper for DNOfficeMathJustification
  public const
    CenterGroup = 1;
    Default_ = 1;
    Center = 2;
    Left = 3;
    Right = 4;
    Inline_ = 7;
  end;


  //-------------namespace: Aspose.Words----------------
  [DNTypeName('Aspose.Words.MeasurementUnits')]
  DNMeasurementUnits = type Integer;
  DNMeasurementUnitsHelper = record helper for DNMeasurementUnits
  public const
    Inches = 0;
    Centimeters = 1;
    Millimeters = 2;
    Points = 3;
    Picas = 4;
  end;


  //-------------namespace: Aspose.Words----------------
  [DNTypeName('Aspose.Words.NodeChangingAction')]
  DNNodeChangingAction = type Integer;
  DNNodeChangingActionHelper = record helper for DNNodeChangingAction
  public const
    Insert = 0;
    Remove = 1;
  end;


  //-------------namespace: Aspose.Words----------------
  [DNTypeName('Aspose.Words.NodeType')]
  DNNodeType = type Integer;
  DNNodeTypeHelper = record helper for DNNodeType
  public const
    Any = 0;
    Document = 1;
    Section = 2;
    Body = 3;
    HeaderFooter = 4;
    Table = 5;
    Row = 6;
    Cell = 7;
    Paragraph = 8;
    BookmarkStart = 9;
    BookmarkEnd = 10;
    EditableRangeStart = 11;
    EditableRangeEnd = 12;
    MoveFromRangeStart = 13;
    MoveFromRangeEnd = 14;
    MoveToRangeStart = 15;
    MoveToRangeEnd = 16;
    GroupShape = 17;
    Shape = 18;
    Comment = 19;
    Footnote = 20;
    Run = 21;
    FieldStart = 22;
    FieldSeparator = 23;
    FieldEnd = 24;
    FormField = 25;
    SpecialChar = 26;
    SmartTag = 27;
    StructuredDocumentTag = 28;
    StructuredDocumentTagRangeStart = 29;
    StructuredDocumentTagRangeEnd = 30;
    GlossaryDocument = 31;
    BuildingBlock = 32;
    CommentRangeStart = 33;
    CommentRangeEnd = 34;
    OfficeMath = 35;
    SubDocument = 36;
    System = 37;
    Null = 38;
  end;


  //-------------namespace: Aspose.Words.Notes----------------
  [DNTypeName('Aspose.Words.Notes.EndnotePosition')]
  DNEndnotePosition = type Integer;
  DNEndnotePositionHelper = record helper for DNEndnotePosition
  public const
    EndOfSection = 0;
    EndOfDocument = 3;
  end;


  //-------------namespace: Aspose.Words.Notes----------------
  [DNTypeName('Aspose.Words.Notes.FootnoteNumberingRule')]
  DNFootnoteNumberingRule = type Integer;
  DNFootnoteNumberingRuleHelper = record helper for DNFootnoteNumberingRule
  public const
    Default_ = 0;
    Continuous = 0;
    RestartSection = 1;
    RestartPage = 2;
  end;


  //-------------namespace: Aspose.Words.Notes----------------
  [DNTypeName('Aspose.Words.Notes.FootnotePosition')]
  DNFootnotePosition = type Integer;
  DNFootnotePositionHelper = record helper for DNFootnotePosition
  public const
    BottomOfPage = 1;
    BeneathText = 2;
  end;


  //-------------namespace: Aspose.Words.Notes----------------
  [DNTypeName('Aspose.Words.Notes.FootnoteType')]
  DNFootnoteType = type Integer;
  DNFootnoteTypeHelper = record helper for DNFootnoteType
  public const
    Footnote = 0;
    Endnote = 1;
  end;


  //-------------namespace: Aspose.Words----------------
  [DNTypeName('Aspose.Words.NumberStyle')]
  DNNumberStyle = type Integer;
  DNNumberStyleHelper = record helper for DNNumberStyle
  public const
    Arabic = 0;
    UppercaseRoman = 1;
    LowercaseRoman = 2;
    UppercaseLetter = 3;
    LowercaseLetter = 4;
    Ordinal = 5;
    Number = 6;
    OrdinalText = 7;
    Hex = 8;
    ChicagoManual = 9;
    Kanji = 10;
    KanjiDigit = 11;
    AiueoHalfWidth = 12;
    IrohaHalfWidth = 13;
    ArabicFullWidth = 14;
    ArabicHalfWidth = 15;
    KanjiTraditional = 16;
    KanjiTraditional2 = 17;
    NumberInCircle = 18;
    DecimalFullWidth = 19;
    Aiueo = 20;
    Iroha = 21;
    LeadingZero = 22;
    Bullet = 23;
    Ganada = 24;
    Chosung = 25;
    GB1 = 26;
    GB2 = 27;
    GB3 = 28;
    GB4 = 29;
    Zodiac1 = 30;
    Zodiac2 = 31;
    Zodiac3 = 32;
    TradChinNum1 = 33;
    TradChinNum2 = 34;
    TradChinNum3 = 35;
    TradChinNum4 = 36;
    SimpChinNum1 = 37;
    SimpChinNum2 = 38;
    SimpChinNum3 = 39;
    SimpChinNum4 = 40;
    HanjaRead = 41;
    HanjaReadDigit = 42;
    Hangul = 43;
    Hanja = 44;
    Hebrew1 = 45;
    Arabic1 = 46;
    Hebrew2 = 47;
    Arabic2 = 48;
    HindiLetter1 = 49;
    HindiLetter2 = 50;
    HindiArabic = 51;
    HindiCardinalText = 52;
    ThaiLetter = 53;
    ThaiArabic = 54;
    ThaiCardinalText = 55;
    VietCardinalText = 56;
    NumberInDash = 57;
    LowercaseRussian = 58;
    UppercaseRussian = 59;
    None = 255;
    Custom = 65280;
  end;


  //-------------namespace: Aspose.Words----------------
  [DNTypeName('Aspose.Words.Orientation')]
  DNOrientation = type Integer;
  DNOrientationHelper = record helper for DNOrientation
  public const
    Portrait = 1;
    Landscape = 2;
  end;


  //-------------namespace: Aspose.Words----------------
  [DNTypeName('Aspose.Words.OutlineLevel')]
  DNOutlineLevel = type Integer;
  DNOutlineLevelHelper = record helper for DNOutlineLevel
  public const
    Level1 = 0;
    Level2 = 1;
    Level3 = 2;
    Level4 = 3;
    Level5 = 4;
    Level6 = 5;
    Level7 = 6;
    Level8 = 7;
    Level9 = 8;
    BodyText = 9;
  end;


  //-------------namespace: Aspose.Words----------------
  [DNTypeName('Aspose.Words.PageBorderAppliesTo')]
  DNPageBorderAppliesTo = type Integer;
  DNPageBorderAppliesToHelper = record helper for DNPageBorderAppliesTo
  public const
    AllPages = 0;
    FirstPage = 1;
    OtherPages = 2;
  end;


  //-------------namespace: Aspose.Words----------------
  [DNTypeName('Aspose.Words.PageBorderDistanceFrom')]
  DNPageBorderDistanceFrom = type Integer;
  DNPageBorderDistanceFromHelper = record helper for DNPageBorderDistanceFrom
  public const
    Text = 0;
    PageEdge = 1;
  end;


  //-------------namespace: Aspose.Words----------------
  [DNTypeName('Aspose.Words.PageVerticalAlignment')]
  DNPageVerticalAlignment = type Integer;
  DNPageVerticalAlignmentHelper = record helper for DNPageVerticalAlignment
  public const
    Top = 0;
    Center = 1;
    Justify = 2;
    Bottom = 3;
  end;


  //-------------namespace: Aspose.Words----------------
  [DNTypeName('Aspose.Words.PaperSize')]
  DNPaperSize = type Integer;
  DNPaperSizeHelper = record helper for DNPaperSize
  public const
    A3 = 0;
    A4 = 1;
    A5 = 2;
    B4 = 3;
    B5 = 4;
    Executive = 5;
    Folio = 6;
    Ledger = 7;
    Legal = 8;
    Letter = 9;
    EnvelopeDL = 10;
    Quarto = 11;
    Statement = 12;
    Tabloid = 13;
    Paper10x14 = 14;
    Paper11x17 = 15;
    Custom = 16;
  end;


  //-------------namespace: Aspose.Words----------------
  [DNTypeName('Aspose.Words.ParagraphAlignment')]
  DNParagraphAlignment = type Integer;
  DNParagraphAlignmentHelper = record helper for DNParagraphAlignment
  public const
    Left = 0;
    Center = 1;
    Right = 2;
    Justify = 3;
    Distributed = 4;
    ArabicMediumKashida = 5;
    ArabicHighKashida = 7;
    ArabicLowKashida = 8;
    ThaiDistributed = 9;
  end;


  //-------------namespace: Aspose.Words.Properties----------------
  [DNTypeName('Aspose.Words.Properties.DocumentSecurity')]
  DNDocumentSecurity = type Integer;
  DNDocumentSecurityHelper = record helper for DNDocumentSecurity
  public const
    None = 0;
    PasswordProtected = 1;
    ReadOnlyRecommended = 2;
    ReadOnlyEnforced = 4;
    ReadOnlyExceptAnnotations = 8;
  end;


  //-------------namespace: Aspose.Words.Properties----------------
  [DNTypeName('Aspose.Words.Properties.PropertyType')]
  DNPropertyType = type Integer;
  DNPropertyTypeHelper = record helper for DNPropertyType
  public const
    Boolean = 0;
    DateTime = 1;
    Double = 2;
    Number = 3;
    String_ = 4;
    StringArray = 5;
    ObjectArray = 6;
    ByteArray = 7;
    Other = 8;
  end;


  //-------------namespace: Aspose.Words----------------
  [DNTypeName('Aspose.Words.ProtectionType')]
  DNProtectionType = type Integer;
  DNProtectionTypeHelper = record helper for DNProtectionType
  public const
    AllowOnlyRevisions = 0;
    AllowOnlyComments = 1;
    AllowOnlyFormFields = 2;
    ReadOnly = 3;
    NoProtection = -1;
  end;


  //-------------namespace: Aspose.Words.Replacing----------------
  [DNTypeName('Aspose.Words.Replacing.FindReplaceDirection')]
  DNFindReplaceDirection = type Integer;
  DNFindReplaceDirectionHelper = record helper for DNFindReplaceDirection
  public const
    Forward_ = 0;
    Backward = 1;
  end;


  //-------------namespace: Aspose.Words.Replacing----------------
  [DNTypeName('Aspose.Words.Replacing.ReplaceAction')]
  DNReplaceAction = type Integer;
  DNReplaceActionHelper = record helper for DNReplaceAction
  public const
    Replace = 0;
    Skip = 1;
    Stop = 2;
  end;


  //-------------namespace: Aspose.Words.Reporting----------------
  [DNTypeName('Aspose.Words.Reporting.JsonSimpleValueParseMode')]
  DNJsonSimpleValueParseMode = type Integer;
  DNJsonSimpleValueParseModeHelper = record helper for DNJsonSimpleValueParseMode
  public const
    Loose = 0;
    Strict_ = 1;
  end;


  //-------------namespace: Aspose.Words.Reporting----------------
  [DNTypeName('Aspose.Words.Reporting.ReportBuildOptions')]
  DNReportBuildOptions = type Integer;
  DNReportBuildOptionsHelper = record helper for DNReportBuildOptions
  public const
    None = 0;
    AllowMissingMembers = 1;
    RemoveEmptyParagraphs = 2;
    InlineErrorMessages = 4;
  end;


  //-------------namespace: Aspose.Words----------------
  [DNTypeName('Aspose.Words.RevisionsView')]
  DNRevisionsView = type Integer;
  DNRevisionsViewHelper = record helper for DNRevisionsView
  public const
    Original = 0;
    Final_ = 1;
  end;


  //-------------namespace: Aspose.Words----------------
  [DNTypeName('Aspose.Words.RevisionType')]
  DNRevisionType = type Integer;
  DNRevisionTypeHelper = record helper for DNRevisionType
  public const
    Insertion = 0;
    Deletion = 1;
    FormatChange = 2;
    StyleDefinitionChange = 3;
    Moving = 4;
  end;


  //-------------namespace: Aspose.Words----------------
  [DNTypeName('Aspose.Words.SaveFormat')]
  DNSaveFormat = type Integer;
  DNSaveFormatHelper = record helper for DNSaveFormat
  public const
    Unknown = 0;
    Doc = 10;
    Dot = 11;
    Docx = 20;
    Docm = 21;
    Dotx = 22;
    Dotm = 23;
    FlatOpc = 24;
    FlatOpcMacroEnabled = 25;
    FlatOpcTemplate = 26;
    FlatOpcTemplateMacroEnabled = 27;
    Rtf = 30;
    WordML = 31;
    Pdf = 40;
    Xps = 41;
    XamlFixed = 42;
    Svg = 44;
    HtmlFixed = 45;
    OpenXps = 46;
    Ps = 47;
    Pcl = 48;
    Html = 50;
    Mhtml = 51;
    Epub = 52;
    Odt = 60;
    Ott = 61;
    Text = 70;
    XamlFlow = 71;
    XamlFlowPack = 72;
    Markdown = 73;
    Tiff = 100;
    Png = 101;
    Bmp = 102;
    Emf = 103;
    Jpeg = 104;
    Gif = 105;
  end;


  //-------------namespace: Aspose.Words.Saving----------------
  [DNTypeName('Aspose.Words.Saving.ColorMode')]
  DNColorMode = type Integer;
  DNColorModeHelper = record helper for DNColorMode
  public const
    Normal = 0;
    Grayscale = 1;
  end;


  //-------------namespace: Aspose.Words.Saving----------------
  [DNTypeName('Aspose.Words.Saving.CompressionLevel')]
  DNCompressionLevel = type Integer;
  DNCompressionLevelHelper = record helper for DNCompressionLevel
  public const
    Normal = 0;
    Maximum = 1;
    Fast = 2;
    SuperFast = 3;
  end;


  //-------------namespace: Aspose.Words.Saving----------------
  [DNTypeName('Aspose.Words.Saving.CssStyleSheetType')]
  DNCssStyleSheetType = type Integer;
  DNCssStyleSheetTypeHelper = record helper for DNCssStyleSheetType
  public const
    Inline_ = 0;
    Embedded = 1;
    External_ = 2;
  end;


  //-------------namespace: Aspose.Words.Saving----------------
  [DNTypeName('Aspose.Words.Saving.Dml3DEffectsRenderingMode')]
  DNDml3DEffectsRenderingMode = type Integer;
  DNDml3DEffectsRenderingModeHelper = record helper for DNDml3DEffectsRenderingMode
  public const
    Basic = 0;
    Advanced = 1;
  end;


  //-------------namespace: Aspose.Words.Saving----------------
  [DNTypeName('Aspose.Words.Saving.DmlEffectsRenderingMode')]
  DNDmlEffectsRenderingMode = type Integer;
  DNDmlEffectsRenderingModeHelper = record helper for DNDmlEffectsRenderingMode
  public const
    Simplified = 0;
    None = 1;
    Fine = 2;
  end;


  //-------------namespace: Aspose.Words.Saving----------------
  [DNTypeName('Aspose.Words.Saving.DmlRenderingMode')]
  DNDmlRenderingMode = type Integer;
  DNDmlRenderingModeHelper = record helper for DNDmlRenderingMode
  public const
    Fallback = 0;
    DrawingML = 1;
  end;


  //-------------namespace: Aspose.Words.Saving----------------
  [DNTypeName('Aspose.Words.Saving.DocumentSplitCriteria')]
  DNDocumentSplitCriteria = type Integer;
  DNDocumentSplitCriteriaHelper = record helper for DNDocumentSplitCriteria
  public const
    None = 0;
    PageBreak = 1;
    ColumnBreak = 2;
    SectionBreak = 4;
    HeadingParagraph = 8;
  end;


  //-------------namespace: Aspose.Words.Saving----------------
  [DNTypeName('Aspose.Words.Saving.EmfPlusDualRenderingMode')]
  DNEmfPlusDualRenderingMode = type Integer;
  DNEmfPlusDualRenderingModeHelper = record helper for DNEmfPlusDualRenderingMode
  public const
    EmfPlusWithFallback = 0;
    EmfPlus = 1;
    Emf = 2;
  end;


  //-------------namespace: Aspose.Words.Saving----------------
  [DNTypeName('Aspose.Words.Saving.ExportFontFormat')]
  DNExportFontFormat = type Integer;
  DNExportFontFormatHelper = record helper for DNExportFontFormat
  public const
    Woff = 0;
    Ttf = 1;
  end;


  //-------------namespace: Aspose.Words.Saving----------------
  [DNTypeName('Aspose.Words.Saving.ExportHeadersFootersMode')]
  DNExportHeadersFootersMode = type Integer;
  DNExportHeadersFootersModeHelper = record helper for DNExportHeadersFootersMode
  public const
    None = 0;
    PerSection = 1;
    FirstSectionHeaderLastSectionFooter = 2;
    FirstPageHeaderFooterPerSection = 3;
  end;


  //-------------namespace: Aspose.Words.Saving----------------
  [DNTypeName('Aspose.Words.Saving.ExportListLabels')]
  DNExportListLabels = type Integer;
  DNExportListLabelsHelper = record helper for DNExportListLabels
  public const
    Auto = 0;
    AsInlineText = 1;
    ByHtmlTags = 2;
  end;


  //-------------namespace: Aspose.Words.Saving----------------
  [DNTypeName('Aspose.Words.Saving.HeaderFooterBookmarksExportMode')]
  DNHeaderFooterBookmarksExportMode = type Integer;
  DNHeaderFooterBookmarksExportModeHelper = record helper for DNHeaderFooterBookmarksExportMode
  public const
    None = 0;
    First = 1;
    All = 2;
  end;


  //-------------namespace: Aspose.Words.Saving----------------
  [DNTypeName('Aspose.Words.Saving.HtmlElementSizeOutputMode')]
  DNHtmlElementSizeOutputMode = type Integer;
  DNHtmlElementSizeOutputModeHelper = record helper for DNHtmlElementSizeOutputMode
  public const
    All = 0;
    RelativeOnly = 1;
    None = 2;
  end;


  //-------------namespace: Aspose.Words.Saving----------------
  [DNTypeName('Aspose.Words.Saving.HtmlFixedPageHorizontalAlignment')]
  DNHtmlFixedPageHorizontalAlignment = type Integer;
  DNHtmlFixedPageHorizontalAlignmentHelper = record helper for DNHtmlFixedPageHorizontalAlignment
  public const
    Left = 0;
    Center = 1;
    Right = 2;
  end;


  //-------------namespace: Aspose.Words.Saving----------------
  [DNTypeName('Aspose.Words.Saving.HtmlMetafileFormat')]
  DNHtmlMetafileFormat = type Integer;
  DNHtmlMetafileFormatHelper = record helper for DNHtmlMetafileFormat
  public const
    Png = 0;
    Svg = 1;
    EmfOrWmf = 2;
  end;


  //-------------namespace: Aspose.Words.Saving----------------
  [DNTypeName('Aspose.Words.Saving.HtmlOfficeMathOutputMode')]
  DNHtmlOfficeMathOutputMode = type Integer;
  DNHtmlOfficeMathOutputModeHelper = record helper for DNHtmlOfficeMathOutputMode
  public const
    Image = 0;
    MathML = 1;
    Text = 2;
  end;


  //-------------namespace: Aspose.Words.Saving----------------
  [DNTypeName('Aspose.Words.Saving.HtmlVersion')]
  DNHtmlVersion = type Integer;
  DNHtmlVersionHelper = record helper for DNHtmlVersion
  public const
    Xhtml = 0;
    Html5 = 1;
  end;


  //-------------namespace: Aspose.Words.Saving----------------
  [DNTypeName('Aspose.Words.Saving.ImageBinarizationMethod')]
  DNImageBinarizationMethod = type Integer;
  DNImageBinarizationMethodHelper = record helper for DNImageBinarizationMethod
  public const
    Threshold = 0;
    FloydSteinbergDithering = 1;
  end;


  //-------------namespace: Aspose.Words.Saving----------------
  [DNTypeName('Aspose.Words.Saving.ImageColorMode')]
  DNImageColorMode = type Integer;
  DNImageColorModeHelper = record helper for DNImageColorMode
  public const
    None = 0;
    Grayscale = 1;
    BlackAndWhite = 2;
  end;


  //-------------namespace: Aspose.Words.Saving----------------
  [DNTypeName('Aspose.Words.Saving.ImagePixelFormat')]
  DNImagePixelFormat = type Integer;
  DNImagePixelFormatHelper = record helper for DNImagePixelFormat
  public const
    Format16BppRgb555 = 0;
    Format16BppRgb565 = 1;
    Format16BppArgb1555 = 2;
    Format24BppRgb = 3;
    Format32BppRgb = 4;
    Format32BppArgb = 5;
    Format32BppPArgb = 6;
    Format48BppRgb = 7;
    Format64BppArgb = 8;
    Format64BppPArgb = 9;
    Format1bppIndexed = 10;
  end;


  //-------------namespace: Aspose.Words.Saving----------------
  [DNTypeName('Aspose.Words.Saving.ImlRenderingMode')]
  DNImlRenderingMode = type Integer;
  DNImlRenderingModeHelper = record helper for DNImlRenderingMode
  public const
    Fallback = 0;
    InkML = 1;
  end;


  //-------------namespace: Aspose.Words.Saving----------------
  [DNTypeName('Aspose.Words.Saving.MetafileRenderingMode')]
  DNMetafileRenderingMode = type Integer;
  DNMetafileRenderingModeHelper = record helper for DNMetafileRenderingMode
  public const
    VectorWithFallback = 0;
    Vector = 1;
    Bitmap = 2;
  end;


  //-------------namespace: Aspose.Words.Saving----------------
  [DNTypeName('Aspose.Words.Saving.NumeralFormat')]
  DNNumeralFormat = type Integer;
  DNNumeralFormatHelper = record helper for DNNumeralFormat
  public const
    European = 0;
    ArabicIndic = 1;
    EasternArabicIndic = 2;
    Context = 3;
    System = 4;
  end;


  //-------------namespace: Aspose.Words.Saving----------------
  [DNTypeName('Aspose.Words.Saving.OdtSaveMeasureUnit')]
  DNOdtSaveMeasureUnit = type Integer;
  DNOdtSaveMeasureUnitHelper = record helper for DNOdtSaveMeasureUnit
  public const
    Centimeters = 0;
    Inches = 1;
  end;


  //-------------namespace: Aspose.Words.Saving----------------
  [DNTypeName('Aspose.Words.Saving.OoxmlCompliance')]
  DNOoxmlCompliance = type Integer;
  DNOoxmlComplianceHelper = record helper for DNOoxmlCompliance
  public const
    Ecma376_2006 = 0;
    Iso29500_2008_Transitional = 1;
    Iso29500_2008_Strict = 2;
  end;


  //-------------namespace: Aspose.Words.Saving----------------
  [DNTypeName('Aspose.Words.Saving.PdfCompliance')]
  DNPdfCompliance = type Integer;
  DNPdfComplianceHelper = record helper for DNPdfCompliance
  public const
    Pdf17 = 0;
    Pdf15 = 1;
    PdfA1a = 2;
    PdfA1b = 3;
  end;


  //-------------namespace: Aspose.Words.Saving----------------
  [DNTypeName('Aspose.Words.Saving.PdfCustomPropertiesExport')]
  DNPdfCustomPropertiesExport = type Integer;
  DNPdfCustomPropertiesExportHelper = record helper for DNPdfCustomPropertiesExport
  public const
    None = 0;
    Standard = 1;
    Metadata = 2;
  end;


  //-------------namespace: Aspose.Words.Saving----------------
  [DNTypeName('Aspose.Words.Saving.PdfDigitalSignatureHashAlgorithm')]
  DNPdfDigitalSignatureHashAlgorithm = type Integer;
  DNPdfDigitalSignatureHashAlgorithmHelper = record helper for DNPdfDigitalSignatureHashAlgorithm
  public const
    Sha1 = 0;
    Sha256 = 1;
    Sha384 = 2;
    Sha512 = 3;
    Md5 = 4;
  end;


  //-------------namespace: Aspose.Words.Saving----------------
  [DNTypeName('Aspose.Words.Saving.PdfEncryptionAlgorithm')]
  DNPdfEncryptionAlgorithm = type Integer;
  DNPdfEncryptionAlgorithmHelper = record helper for DNPdfEncryptionAlgorithm
  public const
    RC4_40 = 0;
    RC4_128 = 1;
  end;


  //-------------namespace: Aspose.Words.Saving----------------
  [DNTypeName('Aspose.Words.Saving.PdfFontEmbeddingMode')]
  DNPdfFontEmbeddingMode = type Integer;
  DNPdfFontEmbeddingModeHelper = record helper for DNPdfFontEmbeddingMode
  public const
    EmbedAll = 0;
    EmbedNonstandard = 1;
    EmbedNone = 2;
  end;


  //-------------namespace: Aspose.Words.Saving----------------
  [DNTypeName('Aspose.Words.Saving.PdfImageColorSpaceExportMode')]
  DNPdfImageColorSpaceExportMode = type Integer;
  DNPdfImageColorSpaceExportModeHelper = record helper for DNPdfImageColorSpaceExportMode
  public const
    Auto = 0;
    SimpleCmyk = 1;
  end;


  //-------------namespace: Aspose.Words.Saving----------------
  [DNTypeName('Aspose.Words.Saving.PdfImageCompression')]
  DNPdfImageCompression = type Integer;
  DNPdfImageCompressionHelper = record helper for DNPdfImageCompression
  public const
    Auto = 0;
    Jpeg = 1;
  end;


  //-------------namespace: Aspose.Words.Saving----------------
  [DNTypeName('Aspose.Words.Saving.PdfPageMode')]
  DNPdfPageMode = type Integer;
  DNPdfPageModeHelper = record helper for DNPdfPageMode
  public const
    UseNone = 0;
    UseOutlines = 1;
    UseThumbs = 2;
    FullScreen = 3;
    UseOC = 4;
  end;


  //-------------namespace: Aspose.Words.Saving----------------
  [DNTypeName('Aspose.Words.Saving.PdfPermissions')]
  DNPdfPermissions = type Integer;
  DNPdfPermissionsHelper = record helper for DNPdfPermissions
  public const
    DisallowAll = 0;
    Printing = 4;
    ModifyContents = 8;
    ContentCopy = 16;
    ModifyAnnotations = 32;
    FillIn = 256;
    ContentCopyForAccessibility = 512;
    DocumentAssembly = 1024;
    HighResolutionPrinting = 2052;
    AllowAll = 65535;
  end;


  //-------------namespace: Aspose.Words.Saving----------------
  [DNTypeName('Aspose.Words.Saving.PdfTextCompression')]
  DNPdfTextCompression = type Integer;
  DNPdfTextCompressionHelper = record helper for DNPdfTextCompression
  public const
    None = 0;
    Flate = 1;
  end;


  //-------------namespace: Aspose.Words.Saving----------------
  [DNTypeName('Aspose.Words.Saving.PdfZoomBehavior')]
  DNPdfZoomBehavior = type Integer;
  DNPdfZoomBehaviorHelper = record helper for DNPdfZoomBehavior
  public const
    None = 0;
    ZoomFactor = 1;
    FitPage = 2;
    FitWidth = 3;
    FitHeight = 4;
    FitBox = 5;
  end;


  //-------------namespace: Aspose.Words.Saving----------------
  [DNTypeName('Aspose.Words.Saving.SvgTextOutputMode')]
  DNSvgTextOutputMode = type Integer;
  DNSvgTextOutputModeHelper = record helper for DNSvgTextOutputMode
  public const
    UseSvgFonts = 0;
    UseTargetMachineFonts = 1;
    UsePlacedGlyphs = 2;
  end;


  //-------------namespace: Aspose.Words.Saving----------------
  [DNTypeName('Aspose.Words.Saving.TableContentAlignment')]
  DNTableContentAlignment = type Integer;
  DNTableContentAlignmentHelper = record helper for DNTableContentAlignment
  public const
    Auto = 0;
    Left = 1;
    Center = 2;
    Right = 3;
  end;


  //-------------namespace: Aspose.Words.Saving----------------
  [DNTypeName('Aspose.Words.Saving.TiffCompression')]
  DNTiffCompression = type Integer;
  DNTiffCompressionHelper = record helper for DNTiffCompression
  public const
    None = 0;
    Rle = 1;
    Lzw = 2;
    Ccitt3 = 3;
    Ccitt4 = 4;
  end;


  //-------------namespace: Aspose.Words.Saving----------------
  [DNTypeName('Aspose.Words.Saving.TxtExportHeadersFootersMode')]
  DNTxtExportHeadersFootersMode = type Integer;
  DNTxtExportHeadersFootersModeHelper = record helper for DNTxtExportHeadersFootersMode
  public const
    None = 0;
    PrimaryOnly = 1;
    AllAtEnd = 2;
  end;


  //-------------namespace: Aspose.Words----------------
  [DNTypeName('Aspose.Words.SectionLayoutMode')]
  DNSectionLayoutMode = type Integer;
  DNSectionLayoutModeHelper = record helper for DNSectionLayoutMode
  public const
    Default_ = 0;
    Grid = 1;
    LineGrid = 2;
    SnapToChars = 3;
  end;


  //-------------namespace: Aspose.Words----------------
  [DNTypeName('Aspose.Words.SectionStart')]
  DNSectionStart = type Integer;
  DNSectionStartHelper = record helper for DNSectionStart
  public const
    Continuous = 0;
    NewColumn = 1;
    NewPage = 2;
    EvenPage = 3;
    OddPage = 4;
  end;


  //-------------namespace: Aspose.Words.Settings----------------
  [DNTypeName('Aspose.Words.Settings.Compatibility')]
  DNCompatibility = type Integer;
  DNCompatibilityHelper = record helper for DNCompatibility
  public const
    NoTabHangInd = 0;
    NoSpaceRaiseLower = 1;
    SuppressSpBfAfterPgBrk = 2;
    WrapTrailSpaces = 3;
    PrintColBlack = 4;
    NoColumnBalance = 5;
    ConvMailMergeEsc = 6;
    SuppressTopSpacing = 7;
    UseSingleBorderforContiguousCells = 8;
    TransparentMetafiles = 9;
    ShowBreaksInFrames = 10;
    SwapBordersOddFacingPgs = 11;
    DoNotLeaveBackslashAlone = 12;
    DoNotExpandOnShiftReturn = 13;
    UlTrailSpace = 14;
    BalanceSingleByteDoubleByteWidth = 15;
    SuppressTopSpacingAtTopOfPage = 16;
    SpacingInWholePoints = 17;
    PrintBodyTextBeforeHeader = 18;
    NoLeading = 19;
    SpaceForUL = 20;
    MWSmallCaps = 21;
    SuppressTopLineSpacingWP = 22;
    TruncateFontHeightLikeWP6 = 23;
    SubFontBySize = 24;
    LineWrapLikeWord6 = 25;
    DoNotSuppressParagraphBorder = 26;
    NoExtraLineSpacing = 27;
    SuppressBottomSpacing = 28;
    WPSpaceWidth = 29;
    WPJustification = 30;
    UsePrinterMetrics = 31;
    ShapeLayoutLikeWW8 = 32;
    FootnoteLayoutLikeWW8 = 33;
    DoNotUseHtmlParagraphAutoSpacing = 34;
    AdjustLineHeightInTable = 35;
    ForgetLastTabAlignment = 36;
    AutoSpaceLikeWord95 = 37;
    AlignTableRowByRow = 38;
    LayoutRawTableWidth = 39;
    LayoutTableRowsApart = 40;
    UseWord97LineBreakRules = 41;
    DoNotBreakWrappedTables = 42;
    doNotSnapToGridInCell = 43;
    SelectFldWithFirstOrLastChar = 44;
    ApplyBreakingRules = 45;
    DoNotWrapTextWithPunct = 46;
    DoNotUseEastAsianBreakRules = 47;
    UseWord2002TableStyleRules = 48;
    GrowAutofit = 49;
    UseNormalStyleForList = 50;
    DoNotUseIndentAsNumberingTabStop = 51;
    UseAltKinsokuLineBreakRules = 52;
    AllowSpaceOfSameStyleInTable = 53;
    DoNotSuppressIndentation = 54;
    DoNotAutofitConstrainedTables = 55;
    AutofitToFirstFixedWidthCell = 56;
    UnderlineTabInNumList = 57;
    DisplayHangulFixedWidth = 58;
    SplitPgBreakAndParaMark = 59;
    DoNotVertAlignCellWithSp = 60;
    DoNotBreakConstrainedForcedTable = 61;
    DoNotVertAlignInTxbx = 62;
    UseAnsiKerningPairs = 63;
    CachedColBalance = 64;
    UseFELayout = 65;
    UICompat97To2003 = 66;
    OverrideTableStyleFontSizeAndJustification = 67;
    DisableOpenTypeFontFormattingFeatures = 68;
    SwapInsideAndOutsideForMirrorIndentsAndRelativePositioning = 69;
    UseWord2010TableStyleRules = 70;
  end;


  //-------------namespace: Aspose.Words.Settings----------------
  [DNTypeName('Aspose.Words.Settings.MailMergeCheckErrors')]
  DNMailMergeCheckErrors = type Integer;
  DNMailMergeCheckErrorsHelper = record helper for DNMailMergeCheckErrors
  public const
    Simulate = 1;
    PauseOnError = 2;
    Default_ = 2;
    CollectErrors = 3;
  end;


  //-------------namespace: Aspose.Words.Settings----------------
  [DNTypeName('Aspose.Words.Settings.MailMergeDataType')]
  DNMailMergeDataType = type Integer;
  DNMailMergeDataTypeHelper = record helper for DNMailMergeDataType
  public const
    TextFile = 0;
    Database = 1;
    Spreadsheet = 2;
    Query = 3;
    Odbc = 4;
    Native = 5;
    None = -1;
    Default_ = -1;
  end;


  //-------------namespace: Aspose.Words.Settings----------------
  [DNTypeName('Aspose.Words.Settings.MailMergeDestination')]
  DNMailMergeDestination = type Integer;
  DNMailMergeDestinationHelper = record helper for DNMailMergeDestination
  public const
    NewDocument = 0;
    Default_ = 0;
    Printer = 1;
    Email = 2;
    Fax = 4;
  end;


  //-------------namespace: Aspose.Words.Settings----------------
  [DNTypeName('Aspose.Words.Settings.MailMergeMainDocumentType')]
  DNMailMergeMainDocumentType = type Integer;
  DNMailMergeMainDocumentTypeHelper = record helper for DNMailMergeMainDocumentType
  public const
    NotAMergeDocument = 0;
    Default_ = 0;
    FormLetters = 1;
    MailingLabels = 2;
    Envelopes = 4;
    Catalog = 8;
    Email = 16;
    Fax = 32;
  end;


  //-------------namespace: Aspose.Words.Settings----------------
  [DNTypeName('Aspose.Words.Settings.MsWordVersion')]
  DNMsWordVersion = type Integer;
  DNMsWordVersionHelper = record helper for DNMsWordVersion
  public const
    Word2000 = 0;
    Word2002 = 1;
    Word2003 = 2;
    Word2007 = 3;
    Word2010 = 4;
    Word2013 = 5;
    Word2016 = 6;
    Word2019 = 7;
  end;


  //-------------namespace: Aspose.Words.Settings----------------
  [DNTypeName('Aspose.Words.Settings.MultiplePagesType')]
  DNMultiplePagesType = type Integer;
  DNMultiplePagesTypeHelper = record helper for DNMultiplePagesType
  public const
    Normal = 0;
    Default_ = 0;
    MirrorMargins = 1;
    TwoPagesPerSheet = 2;
    BookFoldPrinting = 3;
    BookFoldPrintingReverse = 4;
  end;


  //-------------namespace: Aspose.Words.Settings----------------
  [DNTypeName('Aspose.Words.Settings.OdsoDataSourceType')]
  DNOdsoDataSourceType = type Integer;
  DNOdsoDataSourceTypeHelper = record helper for DNOdsoDataSourceType
  public const
    Text = 0;
    Database = 1;
    AddressBook = 2;
    Document1 = 3;
    Document2 = 4;
    Native = 5;
    Email = 6;
    None = 7;
    Default_ = 7;
    Legacy = 8;
    Master = 9;
  end;


  //-------------namespace: Aspose.Words.Settings----------------
  [DNTypeName('Aspose.Words.Settings.OdsoFieldMappingType')]
  DNOdsoFieldMappingType = type Integer;
  DNOdsoFieldMappingTypeHelper = record helper for DNOdsoFieldMappingType
  public const
    Column = 0;
    Null = 1;
    Default_ = 1;
  end;


  //-------------namespace: Aspose.Words.Settings----------------
  [DNTypeName('Aspose.Words.Settings.ViewType')]
  DNViewType = type Integer;
  DNViewTypeHelper = record helper for DNViewType
  public const
    None = 0;
    Reading = 0;
    PageLayout = 1;
    Outline = 3;
    Normal = 4;
    Web = 5;
  end;


  //-------------namespace: Aspose.Words.Settings----------------
  [DNTypeName('Aspose.Words.Settings.ZoomType')]
  DNZoomType = type Integer;
  DNZoomTypeHelper = record helper for DNZoomType
  public const
    Custom = 0;
    None = 0;
    FullPage = 1;
    PageWidth = 2;
    TextFit = 3;
  end;


  //-------------namespace: Aspose.Words.Shaping----------------
  [DNTypeName('Aspose.Words.Shaping.Direction')]
  DNDirection = type Integer;
  DNDirectionHelper = record helper for DNDirection
  public const
    Default_ = 0;
    LTR = 0;
    RTL = 1;
    TTB = 2;
    BTT = 3;
  end;


  //-------------namespace: Aspose.Words.Shaping----------------
  [DNTypeName('Aspose.Words.Shaping.FontFeature')]
  DNFontFeature = type Integer;
  DNFontFeatureHelper = record helper for DNFontFeature
  public const
    GlyphCompositionDecomposition = 1667460464;
    ContextualLigatures = 1668049255;
    DiscretionaryLigatures = 1684826471;
    HistoricalLigatures = 1751935335;
    Kerning = 1801810542;
    StandardLigatures = 1818847073;
    LiningFigures = 1819178349;
    OldstyleFigures = 1869509997;
    ProportionalFigures = 1886287213;
    RequiredLigatures = 1919707495;
    StylisticSet01 = 1936928817;
    StylisticSet02 = 1936928818;
    StylisticSet03 = 1936928819;
    StylisticSet04 = 1936928820;
    StylisticSet05 = 1936928821;
    StylisticSet06 = 1936928822;
    StylisticSet07 = 1936928823;
    StylisticSet08 = 1936928824;
    StylisticSet09 = 1936928825;
    StylisticSet10 = 1936929072;
    StylisticSet11 = 1936929073;
    StylisticSet12 = 1936929074;
    StylisticSet13 = 1936929075;
    StylisticSet14 = 1936929076;
    StylisticSet15 = 1936929077;
    StylisticSet16 = 1936929078;
    StylisticSet17 = 1936929079;
    StylisticSet18 = 1936929080;
    StylisticSet19 = 1936929081;
    StylisticSet20 = 1936929328;
    TabularFigures = 1953396077;
    VerticalAlternates = 1986359924;
    VerticalAlternatesAndRotation = 1987212338;
  end;


  //-------------namespace: Aspose.Words.Shaping----------------
  [DNTypeName('Aspose.Words.Shaping.UnicodeScript')]
  DNUnicodeScript = type Integer;
  DNUnicodeScriptHelper = record helper for DNUnicodeScript
  public const
    Adlam = 1097100397;
    Caucasian_Albanian = 1097295970;
    Ahom = 1097363309;
    Arabic = 1098015074;
    Imperial_Aramaic = 1098018153;
    Armenian = 1098018158;
    Avestan = 1098281844;
    Balinese = 1113681001;
    Bamum = 1113681269;
    Bassa_Vah = 1113682803;
    Batak = 1113683051;
    Bengali = 1113943655;
    Bhaiksuki = 1114139507;
    Bopomofo = 1114599535;
    Brahmi = 1114792296;
    Braille = 1114792297;
    Buginese = 1114990441;
    Buhid = 1114990692;
    Chakma = 1130457965;
    Canadian_Aboriginal = 1130458739;
    Carian = 1130459753;
    Cham = 1130914157;
    Cherokee = 1130915186;
    Chorasmian = 1130918515;
    Coptic = 1131376756;
    Cypriot = 1131442804;
    Cyrillic = 1132032620;
    Devanagari = 1147500129;
    Dives_Akuru = 1147756907;
    Dogra = 1148151666;
    Deseret = 1148416628;
    Duployan = 1148547180;
    Egyptian_Hieroglyphs = 1164409200;
    Elbasan = 1164730977;
    Elymaic = 1164736877;
    Ethiopic = 1165256809;
    Georgian = 1197830002;
    Glagolitic = 1198285159;
    Gunjala_Gondi = 1198485095;
    Masaram_Gondi = 1198485101;
    Gothic = 1198486632;
    Grantha = 1198678382;
    Greek = 1198679403;
    Gujarati = 1198877298;
    Gurmukhi = 1198879349;
    Hangul = 1214344807;
    Han = 1214344809;
    Hanunoo = 1214344815;
    Hatran = 1214346354;
    Hebrew = 1214603890;
    Hiragana = 1214870113;
    Anatolian_Hieroglyphs = 1215067511;
    Pahawh_Hmong = 1215131239;
    Nyiakeng_Puachue_Hmong = 1215131248;
    Katakana_Or_Hiragana = 1215458164;
    Old_Hungarian = 1215655527;
    Old_Italic = 1232363884;
    Javanese = 1247901281;
    Kayah_Li = 1264675945;
    Katakana = 1264676449;
    Kharoshthi = 1265131890;
    Khmer = 1265134962;
    Khojki = 1265135466;
    Khitan_Small_Script = 1265202291;
    Kannada = 1265525857;
    Kaithi = 1265920105;
    Tai_Tham = 1281453665;
    Lao = 1281453935;
    Latin = 1281455214;
    Lepcha = 1281716323;
    Limbu = 1281977698;
    Linear_A = 1281977953;
    Linear_B = 1281977954;
    Lisu = 1281979253;
    Lycian = 1283023721;
    Lydian = 1283023977;
    Mahajani = 1298229354;
    Makasar = 1298230113;
    Mandaic = 1298230884;
    Manichaean = 1298230889;
    Marchen = 1298231907;
    Medefaidrin = 1298490470;
    Mende_Kikakui = 1298493028;
    Meroitic_Cursive = 1298494051;
    Meroitic_Hieroglyphs = 1298494063;
    Malayalam = 1298954605;
    Modi = 1299145833;
    Mongolian = 1299148391;
    Mro = 1299345263;
    Meetei_Mayek = 1299473769;
    Multani = 1299541108;
    Myanmar = 1299803506;
    Nandinagari = 1315008100;
    Old_North_Arabian = 1315009122;
    Nabataean = 1315070324;
    Newa = 1315272545;
    Nko = 1315663727;
    Nushu = 1316186229;
    Ogham = 1332175213;
    Ol_Chiki = 1332503403;
    Old_Turkic = 1332898664;
    Oriya = 1332902241;
    Osage = 1332963173;
    Osmanya = 1332964705;
    Palmyrene = 1348562029;
    Pau_Cin_Hau = 1348564323;
    Old_Permic = 1348825709;
    Phags_Pa = 1349017959;
    Inscriptional_Pahlavi = 1349020777;
    Psalter_Pahlavi = 1349020784;
    Phoenician = 1349021304;
    Miao = 1349284452;
    Inscriptional_Parthian = 1349678185;
    Rejang = 1382706791;
    Hanifi_Rohingya = 1383032935;
    Runic = 1383427698;
    Samaritan = 1398893938;
    Old_South_Arabian = 1398895202;
    Saurashtra = 1398895986;
    SignWriting = 1399287415;
    Shavian = 1399349623;
    Sharada = 1399353956;
    Siddham = 1399415908;
    Khudawadi = 1399418468;
    Sinhala = 1399418472;
    Sogdian = 1399809892;
    Old_Sogdian = 1399809903;
    Sora_Sompeng = 1399812705;
    Soyombo = 1399814511;
    Sundanese = 1400204900;
    Syloti_Nagri = 1400466543;
    Syriac = 1400468067;
    Tagbanwa = 1415669602;
    Takri = 1415670642;
    Tai_Le = 1415670885;
    New_Tai_Lue = 1415670901;
    Tamil = 1415671148;
    Tangut = 1415671399;
    Tai_Viet = 1415673460;
    Telugu = 1415933045;
    Tifinagh = 1415999079;
    Tagalog = 1416064103;
    Thaana = 1416126817;
    Thai = 1416126825;
    Tibetan = 1416192628;
    Tirhuta = 1416196712;
    Ugaritic = 1432838514;
    Vai = 1449224553;
    Warang_Citi = 1466004065;
    Wancho = 1466132591;
    Old_Persian = 1483761007;
    Cuneiform = 1483961720;
    Yezidi = 1499822697;
    Yi = 1500080489;
    Zanabazar_Square = 1516334690;
    Inherited_ = 1516858984;
    Common = 1517910393;
    Unknown = 1517976186;
  end;


  //-------------namespace: Aspose.Words----------------
  [DNTypeName('Aspose.Words.StoryType')]
  DNStoryType = type Integer;
  DNStoryTypeHelper = record helper for DNStoryType
  public const
    None = 0;
    MainText = 1;
    Footnotes = 2;
    Endnotes = 3;
    Comments = 4;
    Textbox = 5;
    EvenPagesHeader = 6;
    PrimaryHeader = 7;
    EvenPagesFooter = 8;
    PrimaryFooter = 9;
    FirstPageHeader = 10;
    FirstPageFooter = 11;
    FootnoteSeparator = 12;
    FootnoteContinuationSeparator = 13;
    FootnoteContinuationNotice = 14;
    EndnoteSeparator = 15;
    EndnoteContinuationSeparator = 16;
    EndnoteContinuationNotice = 17;
  end;


  //-------------namespace: Aspose.Words----------------
  [DNTypeName('Aspose.Words.StyleIdentifier')]
  DNStyleIdentifier = type Integer;
  DNStyleIdentifierHelper = record helper for DNStyleIdentifier
  public const
    Normal = 0;
    Heading1 = 1;
    Heading2 = 2;
    Heading3 = 3;
    Heading4 = 4;
    Heading5 = 5;
    Heading6 = 6;
    Heading7 = 7;
    Heading8 = 8;
    Heading9 = 9;
    Index1 = 10;
    Index2 = 11;
    Index3 = 12;
    Index4 = 13;
    Index5 = 14;
    Index6 = 15;
    Index7 = 16;
    Index8 = 17;
    Index9 = 18;
    Toc1 = 19;
    Toc2 = 20;
    Toc3 = 21;
    Toc4 = 22;
    Toc5 = 23;
    Toc6 = 24;
    Toc7 = 25;
    Toc8 = 26;
    Toc9 = 27;
    NormalIndent = 28;
    FootnoteText = 29;
    CommentText = 30;
    Header = 31;
    Footer = 32;
    IndexHeading = 33;
    Caption = 34;
    TableOfFigures = 35;
    EnvelopeAddress = 36;
    EnvelopeReturn = 37;
    FootnoteReference = 38;
    CommentReference = 39;
    LineNumber = 40;
    PageNumber = 41;
    EndnoteReference = 42;
    EndnoteText = 43;
    TableOfAuthorities = 44;
    Macro = 45;
    ToaHeading = 46;
    List = 47;
    ListBullet = 48;
    ListNumber = 49;
    List2 = 50;
    List3 = 51;
    List4 = 52;
    List5 = 53;
    ListBullet2 = 54;
    ListBullet3 = 55;
    ListBullet4 = 56;
    ListBullet5 = 57;
    ListNumber2 = 58;
    ListNumber3 = 59;
    ListNumber4 = 60;
    ListNumber5 = 61;
    Title = 62;
    Closing = 63;
    Signature = 64;
    DefaultParagraphFont = 65;
    BodyText = 66;
    BodyTextInd = 67;
    ListContinue = 68;
    ListContinue2 = 69;
    ListContinue3 = 70;
    ListContinue4 = 71;
    ListContinue5 = 72;
    MessageHeader = 73;
    Subtitle = 74;
    Salutation = 75;
    Date = 76;
    BodyText1I = 77;
    BodyText1I2 = 78;
    NoteHeading = 79;
    BodyText2 = 80;
    BodyText3 = 81;
    BodyTextInd2 = 82;
    BodyTextInd3 = 83;
    BlockText = 84;
    Hyperlink = 85;
    FollowedHyperlink = 86;
    Strong = 87;
    Emphasis = 88;
    DocumentMap = 89;
    PlainText = 90;
    EmailSignature = 91;
    HtmlTopOfForm = 92;
    HtmlBottomOfForm = 93;
    NormalWeb = 94;
    HtmlAcronym = 95;
    HtmlAddress = 96;
    HtmlCite = 97;
    HtmlCode = 98;
    HtmlDefinition = 99;
    HtmlKeyboard = 100;
    HtmlPreformatted = 101;
    HtmlSample = 102;
    HtmlTypewriter = 103;
    HtmlVariable = 104;
    TableNormal = 105;
    CommentSubject = 106;
    NoList = 107;
    OutlineList1 = 108;
    OutlineList2 = 109;
    OutlineList3 = 110;
    TableSimple1 = 111;
    TableSimple2 = 112;
    TableSimple3 = 113;
    TableClassic1 = 114;
    TableClassic2 = 115;
    TableClassic3 = 116;
    TableClassic4 = 117;
    TableColorful1 = 118;
    TableColorful2 = 119;
    TableColorful3 = 120;
    TableColumns1 = 121;
    TableColumns2 = 122;
    TableColumns3 = 123;
    TableColumns4 = 124;
    TableColumns5 = 125;
    TableGrid1 = 126;
    TableGrid2 = 127;
    TableGrid3 = 128;
    TableGrid4 = 129;
    TableGrid5 = 130;
    TableGrid6 = 131;
    TableGrid7 = 132;
    TableGrid8 = 133;
    TableList1 = 134;
    TableList2 = 135;
    TableList3 = 136;
    TableList4 = 137;
    TableList5 = 138;
    TableList6 = 139;
    TableList7 = 140;
    TableList8 = 141;
    Table3DEffects1 = 142;
    Table3DEffects2 = 143;
    Table3DEffects3 = 144;
    TableContemporary = 145;
    TableElegant = 146;
    TableProfessional = 147;
    TableSubtle1 = 148;
    TableSubtle2 = 149;
    TableWeb1 = 150;
    TableWeb2 = 151;
    TableWeb3 = 152;
    BalloonText = 153;
    TableGrid = 154;
    TableTheme = 155;
    PlaceholderText = 156;
    NoSpacing = 157;
    LightShading = 158;
    LightList = 159;
    LightGrid = 160;
    MediumShading1 = 161;
    MediumShading2 = 162;
    MediumList1 = 163;
    MediumList2 = 164;
    MediumGrid1 = 165;
    MediumGrid2 = 166;
    MediumGrid3 = 167;
    DarkList = 168;
    ColorfulShading = 169;
    ColorfulList = 170;
    ColorfulGrid = 171;
    LightShadingAccent1 = 172;
    LightListAccent1 = 173;
    LightGridAccent1 = 174;
    MediumShading1Accent1 = 175;
    MediumShading2Accent1 = 176;
    MediumList1Accent1 = 177;
    Revision = 178;
    ListParagraph = 179;
    Quote = 180;
    IntenseQuote = 181;
    MediumList2Accent1 = 182;
    MediumGrid1Accent1 = 183;
    MediumGrid2Accent1 = 184;
    MediumGrid3Accent1 = 185;
    DarkListAccent1 = 186;
    ColorfulShadingAccent1 = 187;
    ColorfulListAccent1 = 188;
    ColorfulGridAccent1 = 189;
    LightShadingAccent2 = 190;
    LightListAccent2 = 191;
    LightGridAccent2 = 192;
    MediumShading1Accent2 = 193;
    MediumShading2Accent2 = 194;
    MediumList1Accent2 = 195;
    MediumList2Accent2 = 196;
    MediumGrid1Accent2 = 197;
    MediumGrid2Accent2 = 198;
    MediumGrid3Accent2 = 199;
    DarkListAccent2 = 200;
    ColorfulShadingAccent2 = 201;
    ColorfulListAccent2 = 202;
    ColorfulGridAccent2 = 203;
    LightShadingAccent3 = 204;
    LightListAccent3 = 205;
    LightGridAccent3 = 206;
    MediumShading1Accent3 = 207;
    MediumShading2Accent3 = 208;
    MediumList1Accent3 = 209;
    MediumList2Accent3 = 210;
    MediumGrid1Accent3 = 211;
    MediumGrid2Accent3 = 212;
    MediumGrid3Accent3 = 213;
    DarkListAccent3 = 214;
    ColorfulShadingAccent3 = 215;
    ColorfulListAccent3 = 216;
    ColorfulGridAccent3 = 217;
    LightShadingAccent4 = 218;
    LightListAccent4 = 219;
    LightGridAccent4 = 220;
    MediumShading1Accent4 = 221;
    MediumShading2Accent4 = 222;
    MediumList1Accent4 = 223;
    MediumList2Accent4 = 224;
    MediumGrid1Accent4 = 225;
    MediumGrid2Accent4 = 226;
    MediumGrid3Accent4 = 227;
    DarkListAccent4 = 228;
    ColorfulShadingAccent4 = 229;
    ColorfulListAccent4 = 230;
    ColorfulGridAccent4 = 231;
    LightShadingAccent5 = 232;
    LightListAccent5 = 233;
    LightGridAccent5 = 234;
    MediumShading1Accent5 = 235;
    MediumShading2Accent5 = 236;
    MediumList1Accent5 = 237;
    MediumList2Accent5 = 238;
    MediumGrid1Accent5 = 239;
    MediumGrid2Accent5 = 240;
    MediumGrid3Accent5 = 241;
    DarkListAccent5 = 242;
    ColorfulShadingAccent5 = 243;
    ColorfulListAccent5 = 244;
    ColorfulGridAccent5 = 245;
    LightShadingAccent6 = 246;
    LightListAccent6 = 247;
    LightGridAccent6 = 248;
    MediumShading1Accent6 = 249;
    MediumShading2Accent6 = 250;
    MediumList1Accent6 = 251;
    MediumList2Accent6 = 252;
    MediumGrid1Accent6 = 253;
    MediumGrid2Accent6 = 254;
    MediumGrid3Accent6 = 255;
    DarkListAccent6 = 256;
    ColorfulShadingAccent6 = 257;
    ColorfulListAccent6 = 258;
    ColorfulGridAccent6 = 259;
    SubtleEmphasis = 260;
    IntenseEmphasis = 261;
    SubtleReference = 262;
    IntenseReference = 263;
    BookTitle = 264;
    Bibliography = 265;
    TocHeading = 266;
    PlainTable1 = 267;
    PlainTable2 = 268;
    PlainTable3 = 269;
    PlainTable4 = 270;
    PlainTable5 = 271;
    TableGridLight = 272;
    GridTable1Light = 273;
    GridTable2 = 274;
    GridTable3 = 275;
    GridTable4 = 276;
    GridTable5Dark = 277;
    GridTable6Colorful = 278;
    GridTable7Colorful = 279;
    GridTable1LightAccent1 = 280;
    GridTable2Accent1 = 281;
    GridTable3Accent1 = 282;
    GridTable4Accent1 = 283;
    GridTable5DarkAccent1 = 284;
    GridTable6ColorfulAccent1 = 285;
    GridTable7ColorfulAccent1 = 286;
    GridTable1LightAccent2 = 287;
    GridTable2Accent2 = 288;
    GridTable3Accent2 = 289;
    GridTable4Accent2 = 290;
    GridTable5DarkAccent2 = 291;
    GridTable6ColorfulAccent2 = 292;
    GridTable7ColorfulAccent2 = 293;
    GridTable1LightAccent3 = 294;
    GridTable2Accent3 = 295;
    GridTable3Accent3 = 296;
    GridTable4Accent3 = 297;
    GridTable5DarkAccent3 = 298;
    GridTable6ColorfulAccent3 = 299;
    GridTable7ColorfulAccent3 = 300;
    GridTable1LightAccent4 = 301;
    GridTable2Accent4 = 302;
    GridTable3Accent4 = 303;
    GridTable4Accent4 = 304;
    GridTable5DarkAccent4 = 305;
    GridTable6ColorfulAccent4 = 306;
    GridTable7ColorfulAccent4 = 307;
    GridTable1LightAccent5 = 308;
    GridTable2Accent5 = 309;
    GridTable3Accent5 = 310;
    GridTable4Accent5 = 311;
    GridTable5DarkAccent5 = 312;
    GridTable6ColorfulAccent5 = 313;
    GridTable7ColorfulAccent5 = 314;
    GridTable1LightAccent6 = 315;
    GridTable2Accent6 = 316;
    GridTable3Accent6 = 317;
    GridTable4Accent6 = 318;
    GridTable5DarkAccent6 = 319;
    GridTable6ColorfulAccent6 = 320;
    GridTable7ColorfulAccent6 = 321;
    ListTable1Light = 322;
    ListTable2 = 323;
    ListTable3 = 324;
    ListTable4 = 325;
    ListTable5Dark = 326;
    ListTable6Colorful = 327;
    ListTable7Colorful = 328;
    ListTable1LightAccent1 = 329;
    ListTable2Accent1 = 330;
    ListTable3Accent1 = 331;
    ListTable4Accent1 = 332;
    ListTable5DarkAccent1 = 333;
    ListTable6ColorfulAccent1 = 334;
    ListTable7ColorfulAccent1 = 335;
    ListTable1LightAccent2 = 336;
    ListTable2Accent2 = 337;
    ListTable3Accent2 = 338;
    ListTable4Accent2 = 339;
    ListTable5DarkAccent2 = 340;
    ListTable6ColorfulAccent2 = 341;
    ListTable7ColorfulAccent2 = 342;
    ListTable1LightAccent3 = 343;
    ListTable2Accent3 = 344;
    ListTable3Accent3 = 345;
    ListTable4Accent3 = 346;
    ListTable5DarkAccent3 = 347;
    ListTable6ColorfulAccent3 = 348;
    ListTable7ColorfulAccent3 = 349;
    ListTable1LightAccent4 = 350;
    ListTable2Accent4 = 351;
    ListTable3Accent4 = 352;
    ListTable4Accent4 = 353;
    ListTable5DarkAccent4 = 354;
    ListTable6ColorfulAccent4 = 355;
    ListTable7ColorfulAccent4 = 356;
    ListTable1LightAccent5 = 357;
    ListTable2Accent5 = 358;
    ListTable3Accent5 = 359;
    ListTable4Accent5 = 360;
    ListTable5DarkAccent5 = 361;
    ListTable6ColorfulAccent5 = 362;
    ListTable7ColorfulAccent5 = 363;
    ListTable1LightAccent6 = 364;
    ListTable2Accent6 = 365;
    ListTable3Accent6 = 366;
    ListTable4Accent6 = 367;
    ListTable5DarkAccent6 = 368;
    ListTable6ColorfulAccent6 = 369;
    ListTable7ColorfulAccent6 = 370;
    SmartLink = 371;
    User = 4094;
    Nil_ = 12287;
  end;


  //-------------namespace: Aspose.Words----------------
  [DNTypeName('Aspose.Words.StyleType')]
  DNStyleType = type Integer;
  DNStyleTypeHelper = record helper for DNStyleType
  public const
    Paragraph = 1;
    Character = 2;
    Table = 3;
    List = 4;
  end;


  //-------------namespace: Aspose.Words----------------
  [DNTypeName('Aspose.Words.TabAlignment')]
  DNTabAlignment = type Integer;
  DNTabAlignmentHelper = record helper for DNTabAlignment
  public const
    Left = 0;
    Center = 1;
    Right = 2;
    Decimal = 3;
    Bar = 4;
    List = 6;
    Clear = 7;
  end;


  //-------------namespace: Aspose.Words----------------
  [DNTypeName('Aspose.Words.TabLeader')]
  DNTabLeader = type Integer;
  DNTabLeaderHelper = record helper for DNTabLeader
  public const
    None = 0;
    Dots = 1;
    Dashes = 2;
    Line = 3;
    Heavy = 4;
    MiddleDot = 5;
  end;


  //-------------namespace: Aspose.Words.Tables----------------
  [DNTypeName('Aspose.Words.Tables.AutoFitBehavior')]
  DNAutoFitBehavior = type Integer;
  DNAutoFitBehaviorHelper = record helper for DNAutoFitBehavior
  public const
    AutoFitToContents = 0;
    AutoFitToWindow = 1;
    FixedColumnWidths = 2;
  end;


  //-------------namespace: Aspose.Words.Tables----------------
  [DNTypeName('Aspose.Words.Tables.CellMerge')]
  DNCellMerge = type Integer;
  DNCellMergeHelper = record helper for DNCellMerge
  public const
    None = 0;
    First = 1;
    Previous = 2;
  end;


  //-------------namespace: Aspose.Words.Tables----------------
  [DNTypeName('Aspose.Words.Tables.CellVerticalAlignment')]
  DNCellVerticalAlignment = type Integer;
  DNCellVerticalAlignmentHelper = record helper for DNCellVerticalAlignment
  public const
    Top = 0;
    Center = 1;
    Bottom = 2;
  end;


  //-------------namespace: Aspose.Words.Tables----------------
  [DNTypeName('Aspose.Words.Tables.PreferredWidthType')]
  DNPreferredWidthType = type Integer;
  DNPreferredWidthTypeHelper = record helper for DNPreferredWidthType
  public const
    Auto = 1;
    Percent = 2;
    Points = 3;
  end;


  //-------------namespace: Aspose.Words.Tables----------------
  [DNTypeName('Aspose.Words.Tables.TableAlignment')]
  DNTableAlignment = type Integer;
  DNTableAlignmentHelper = record helper for DNTableAlignment
  public const
    Left = 0;
    Center = 1;
    Right = 2;
  end;


  //-------------namespace: Aspose.Words.Tables----------------
  [DNTypeName('Aspose.Words.Tables.TableStyleOptions')]
  DNTableStyleOptions = type Integer;
  DNTableStyleOptionsHelper = record helper for DNTableStyleOptions
  public const
    None = 0;
    FirstRow = 32;
    LastRow = 64;
    FirstColumn = 128;
    LastColumn = 256;
    RowBands = 512;
    Default_ = 672;
    ColumnBands = 1024;
    Default2003 = 1536;
  end;


  //-------------namespace: Aspose.Words.Tables----------------
  [DNTypeName('Aspose.Words.Tables.TextWrapping')]
  DNTextWrapping = type Integer;
  DNTextWrappingHelper = record helper for DNTextWrapping
  public const
    Default_ = 0;
    None = 0;
    Around = 1;
  end;


  //-------------namespace: Aspose.Words----------------
  [DNTypeName('Aspose.Words.TextDmlEffect')]
  DNTextDmlEffect = type Integer;
  DNTextDmlEffectHelper = record helper for DNTextDmlEffect
  public const
    Glow = 0;
    Fill = 1;
    Shadow = 2;
    Outline = 3;
    Effect3D = 4;
    Reflection = 5;
  end;


  //-------------namespace: Aspose.Words----------------
  [DNTypeName('Aspose.Words.TextEffect')]
  DNTextEffect = type Integer;
  DNTextEffectHelper = record helper for DNTextEffect
  public const
    None = 0;
    LasVegasLights = 1;
    BlinkingBackground = 2;
    SparkleText = 3;
    MarchingBlackAnts = 4;
    MarchingRedAnts = 5;
    Shimmer = 6;
  end;


  //-------------namespace: Aspose.Words----------------
  [DNTypeName('Aspose.Words.TextOrientation')]
  DNTextOrientation = type Integer;
  DNTextOrientationHelper = record helper for DNTextOrientation
  public const
    Horizontal = 0;
    Downward = 1;
    Upward = 3;
    HorizontalRotatedFarEast = 4;
    VerticalFarEast = 5;
    VerticalRotatedFarEast = 7;
  end;


  //-------------namespace: Aspose.Words----------------
  [DNTypeName('Aspose.Words.TextureIndex')]
  DNTextureIndex = type Integer;
  DNTextureIndexHelper = record helper for DNTextureIndex
  public const
    TextureNone = 0;
    TextureSolid = 1;
    Texture5Percent = 2;
    Texture10Percent = 3;
    Texture20Percent = 4;
    Texture25Percent = 5;
    Texture30Percent = 6;
    Texture40Percent = 7;
    Texture50Percent = 8;
    Texture60Percent = 9;
    Texture70Percent = 10;
    Texture75Percent = 11;
    Texture80Percent = 12;
    Texture90Percent = 13;
    TextureDarkHorizontal = 14;
    TextureDarkVertical = 15;
    TextureDarkDiagonalDown = 16;
    TextureDarkDiagonalUp = 17;
    TextureDarkCross = 18;
    TextureDarkDiagonalCross = 19;
    TextureHorizontal = 20;
    TextureVertical = 21;
    TextureDiagonalDown = 22;
    TextureDiagonalUp = 23;
    TextureCross = 24;
    TextureDiagonalCross = 25;
    Texture2Pt5Percent = 35;
    Texture7Pt5Percent = 36;
    Texture12Pt5Percent = 37;
    Texture15Percent = 38;
    Texture17Pt5Percent = 39;
    Texture22Pt5Percent = 40;
    Texture27Pt5Percent = 41;
    Texture32Pt5Percent = 42;
    Texture35Percent = 43;
    Texture37Pt5Percent = 44;
    Texture42Pt5Percent = 45;
    Texture45Percent = 46;
    Texture47Pt5Percent = 47;
    Texture52Pt5Percent = 48;
    Texture55Percent = 49;
    Texture57Pt5Percent = 50;
    Texture62Pt5Percent = 51;
    Texture65Percent = 52;
    Texture67Pt5Percent = 53;
    Texture72Pt5Percent = 54;
    Texture77Pt5Percent = 55;
    Texture82Pt5Percent = 56;
    Texture85Percent = 57;
    Texture87Pt5Percent = 58;
    Texture92Pt5Percent = 59;
    Texture95Percent = 60;
    Texture97Pt5Percent = 61;
    TextureNil = 65535;
  end;


  //-------------namespace: Aspose.Words.Themes----------------
  [DNTypeName('Aspose.Words.Themes.ThemeColor')]
  DNThemeColor = type Integer;
  DNThemeColorHelper = record helper for DNThemeColor
  public const
    Dark1 = 0;
    Light1 = 1;
    Dark2 = 2;
    Light2 = 3;
    Accent1 = 4;
    Accent2 = 5;
    Accent3 = 6;
    Accent4 = 7;
    Accent5 = 8;
    Accent6 = 9;
    Hyperlink = 10;
    FollowedHyperlink = 11;
    Text1 = 12;
    Text2 = 13;
    Background1 = 14;
    Background2 = 15;
    None = -1;
  end;


  //-------------namespace: Aspose.Words.Themes----------------
  [DNTypeName('Aspose.Words.Themes.ThemeFont')]
  DNThemeFont = type Integer;
  DNThemeFontHelper = record helper for DNThemeFont
  public const
    None = 0;
    Major = 1;
    Minor = 2;
  end;


  //-------------namespace: Aspose.Words----------------
  [DNTypeName('Aspose.Words.Underline')]
  DNUnderline = type Integer;
  DNUnderlineHelper = record helper for DNUnderline
  public const
    None = 0;
    Single = 1;
    Words = 2;
    Double = 3;
    Dotted = 4;
    Thick = 6;
    Dash = 7;
    DotDash = 9;
    DotDotDash = 10;
    Wavy = 11;
    DottedHeavy = 20;
    DashHeavy = 23;
    DotDashHeavy = 25;
    DotDotDashHeavy = 26;
    WavyHeavy = 27;
    DashLong = 39;
    WavyDouble = 43;
    DashLongHeavy = 55;
  end;


  //-------------namespace: Aspose.Words.Vba----------------
  [DNTypeName('Aspose.Words.Vba.VbaModuleType')]
  DNVbaModuleType = type Integer;
  DNVbaModuleTypeHelper = record helper for DNVbaModuleType
  public const
    DocumentModule = 0;
    ProceduralModule = 1;
    ClassModule = 2;
    DesignerModule = 3;
  end;


  //-------------namespace: Aspose.Words.Vba----------------
  [DNTypeName('Aspose.Words.Vba.VbaReferenceType')]
  DNVbaReferenceType = type Integer;
  DNVbaReferenceTypeHelper = record helper for DNVbaReferenceType
  public const
    Registered = 13;
    Project = 14;
    Control = 47;
    Original = 51;
  end;


  //-------------namespace: Aspose.Words----------------
  [DNTypeName('Aspose.Words.VisitorAction')]
  DNVisitorAction = type Integer;
  DNVisitorActionHelper = record helper for DNVisitorAction
  public const
    Continue_ = 0;
    SkipThisNode = 1;
    Stop = 2;
  end;


  //-------------namespace: Aspose.Words----------------
  [DNTypeName('Aspose.Words.WarningSource')]
  DNWarningSource = type Integer;
  DNWarningSourceHelper = record helper for DNWarningSource
  public const
    Unknown = 0;
    Layout = 1;
    DrawingML = 2;
    OfficeMath = 3;
    Shapes = 4;
    Metafile = 5;
    Xps = 6;
    Pdf = 7;
    Image = 8;
    Docx = 9;
    Doc = 10;
    Text = 11;
    Rtf = 12;
    WordML = 13;
    Nrx = 14;
    Odt = 15;
    Html = 16;
    Validator = 17;
    Xaml = 18;
    Svm = 19;
    MathML = 20;
    Font = 21;
    Svg = 22;
    Markdown = 23;
    Chm = 24;
  end;


  //-------------namespace: Aspose.Words----------------
  [DNTypeName('Aspose.Words.WarningType')]
  DNWarningType = type Integer;
  DNWarningTypeHelper = record helper for DNWarningType
  public const
    DataLoss = 1;
    DataLossCategory = 255;
    MajorFormattingLoss = 256;
    MajorFormattingLossCategory = 65280;
    MinorFormattingLoss = 65536;
    FontSubstitution = 131072;
    FontEmbedding = 262144;
    MinorFormattingLossCategory = 16711680;
    UnexpectedContent = 16777216;
    UnexpectedContentCategory = 251658240;
    Hint = 268435456;
  end;


  //-------------namespace: Aspose.Words----------------
  [DNTypeName('Aspose.Words.WatermarkLayout')]
  DNWatermarkLayout = type Integer;
  DNWatermarkLayoutHelper = record helper for DNWatermarkLayout
  public const
    Horizontal = 0;
    Diagonal = 315;
  end;


  //-------------namespace: Aspose.Words----------------
  [DNTypeName('Aspose.Words.WatermarkType')]
  DNWatermarkType = type Integer;
  DNWatermarkTypeHelper = record helper for DNWatermarkType
  public const
    Text = 0;
    Image = 1;
    None = 2;
  end;


  //-------------namespace: Aspose.Words.WebExtensions----------------
  [DNTypeName('Aspose.Words.WebExtensions.TaskPaneDockState')]
  DNTaskPaneDockState = type Integer;
  DNTaskPaneDockStateHelper = record helper for DNTaskPaneDockState
  public const
    Right = 0;
    Left = 1;
  end;


  //-------------namespace: Aspose.Words.WebExtensions----------------
  [DNTypeName('Aspose.Words.WebExtensions.WebExtensionBindingType')]
  DNWebExtensionBindingType = type Integer;
  DNWebExtensionBindingTypeHelper = record helper for DNWebExtensionBindingType
  public const
    Default_ = 0;
    Matrix = 0;
    Table = 1;
    Text = 2;
  end;


  //-------------namespace: Aspose.Words.WebExtensions----------------
  [DNTypeName('Aspose.Words.WebExtensions.WebExtensionStoreType')]
  DNWebExtensionStoreType = type Integer;
  DNWebExtensionStoreTypeHelper = record helper for DNWebExtensionStoreType
  public const
    SPCatalog = 0;
    Default_ = 0;
    OMEX = 1;
    SPApp = 2;
    Exchange = 3;
    FileSystem = 4;
    Registry = 5;
    ExCatalog = 6;
  end;




type


{ declares }

  DNIChartDataPoint = interface; // type: Aspose.Words.Drawing.Charts.IChartDataPoint, namespace: Aspose.Words.Drawing.Charts
  DNIBarcodeGenerator = interface; // type: Aspose.Words.Fields.IBarcodeGenerator, namespace: Aspose.Words.Fields
  DNIComparisonExpressionEvaluator = interface; // type: Aspose.Words.Fields.IComparisonExpressionEvaluator, namespace: Aspose.Words.Fields
  DNIFieldResultFormatter = interface; // type: Aspose.Words.Fields.IFieldResultFormatter, namespace: Aspose.Words.Fields
  DNIFieldUpdateCultureProvider = interface; // type: Aspose.Words.Fields.IFieldUpdateCultureProvider, namespace: Aspose.Words.Fields
  DNIFieldUserPromptRespondent = interface; // type: Aspose.Words.Fields.IFieldUserPromptRespondent, namespace: Aspose.Words.Fields
  DNIDocumentReaderPlugin = interface; // type: Aspose.Words.IDocumentReaderPlugin, namespace: Aspose.Words
  DNIHyphenationCallback = interface; // type: Aspose.Words.IHyphenationCallback, namespace: Aspose.Words
  DNINodeChangingCallback = interface; // type: Aspose.Words.INodeChangingCallback, namespace: Aspose.Words
  DNIWarningCallback = interface; // type: Aspose.Words.IWarningCallback, namespace: Aspose.Words
  DNIPageLayoutCallback = interface; // type: Aspose.Words.Layout.IPageLayoutCallback, namespace: Aspose.Words.Layout
  DNIResourceLoadingCallback = interface; // type: Aspose.Words.Loading.IResourceLoadingCallback, namespace: Aspose.Words.Loading
  DNIFieldMergingCallback = interface; // type: Aspose.Words.MailMerging.IFieldMergingCallback, namespace: Aspose.Words.MailMerging
  DNIMailMergeCallback = interface; // type: Aspose.Words.MailMerging.IMailMergeCallback, namespace: Aspose.Words.MailMerging
  DNIMailMergeDataSource = interface; // type: Aspose.Words.MailMerging.IMailMergeDataSource, namespace: Aspose.Words.MailMerging
  DNIMailMergeDataSourceRoot = interface; // type: Aspose.Words.MailMerging.IMailMergeDataSourceRoot, namespace: Aspose.Words.MailMerging
  DNIReplacingCallback = interface; // type: Aspose.Words.Replacing.IReplacingCallback, namespace: Aspose.Words.Replacing
  DNICssSavingCallback = interface; // type: Aspose.Words.Saving.ICssSavingCallback, namespace: Aspose.Words.Saving
  DNIDocumentPartSavingCallback = interface; // type: Aspose.Words.Saving.IDocumentPartSavingCallback, namespace: Aspose.Words.Saving
  DNIFontSavingCallback = interface; // type: Aspose.Words.Saving.IFontSavingCallback, namespace: Aspose.Words.Saving
  DNIImageSavingCallback = interface; // type: Aspose.Words.Saving.IImageSavingCallback, namespace: Aspose.Words.Saving
  DNIPageSavingCallback = interface; // type: Aspose.Words.Saving.IPageSavingCallback, namespace: Aspose.Words.Saving
  DNIResourceSavingCallback = interface; // type: Aspose.Words.Saving.IResourceSavingCallback, namespace: Aspose.Words.Saving
  DNITextShaperFactory = interface; // type: Aspose.Words.Shaping.ITextShaperFactory, namespace: Aspose.Words.Shaping
  DNITextShaper = interface; // type: Aspose.Words.Shaping.ITextShaper, namespace: Aspose.Words.Shaping
  DNBookmark = interface; // type: Aspose.Words.Bookmark, namespace: Aspose.Words
  DNBookmarkCollection = interface; // type: Aspose.Words.BookmarkCollection, namespace: Aspose.Words
  DNBorderCollection = interface; // type: Aspose.Words.BorderCollection, namespace: Aspose.Words
  DNBuildVersionInfo = interface; // type: Aspose.Words.BuildVersionInfo, namespace: Aspose.Words
  DNCleanupOptions = interface; // type: Aspose.Words.CleanupOptions, namespace: Aspose.Words
  DNComHelper = interface; // type: Aspose.Words.ComHelper, namespace: Aspose.Words
  DNCompareOptions = interface; // type: Aspose.Words.Comparing.CompareOptions, namespace: Aspose.Words.Comparing
  DNConditionalStyle = interface; // type: Aspose.Words.ConditionalStyle, namespace: Aspose.Words
  DNConditionalStyleCollection = interface; // type: Aspose.Words.ConditionalStyleCollection, namespace: Aspose.Words
  DNControlChar = interface; // type: Aspose.Words.ControlChar, namespace: Aspose.Words
  DNConvertUtil = interface; // type: Aspose.Words.ConvertUtil, namespace: Aspose.Words
  DNCertificateHolder = interface; // type: Aspose.Words.DigitalSignatures.CertificateHolder, namespace: Aspose.Words.DigitalSignatures
  DNDigitalSignature = interface; // type: Aspose.Words.DigitalSignatures.DigitalSignature, namespace: Aspose.Words.DigitalSignatures
  DNDigitalSignatureCollection = interface; // type: Aspose.Words.DigitalSignatures.DigitalSignatureCollection, namespace: Aspose.Words.DigitalSignatures
  DNDigitalSignatureUtil = interface; // type: Aspose.Words.DigitalSignatures.DigitalSignatureUtil, namespace: Aspose.Words.DigitalSignatures
  DNSignOptions = interface; // type: Aspose.Words.DigitalSignatures.SignOptions, namespace: Aspose.Words.DigitalSignatures
  DNDocumentBuilder = interface; // type: Aspose.Words.DocumentBuilder, namespace: Aspose.Words
  DNDocumentVisitor = interface; // type: Aspose.Words.DocumentVisitor, namespace: Aspose.Words
  DNAxisBound = interface; // type: Aspose.Words.Drawing.Charts.AxisBound, namespace: Aspose.Words.Drawing.Charts
  DNAxisDisplayUnit = interface; // type: Aspose.Words.Drawing.Charts.AxisDisplayUnit, namespace: Aspose.Words.Drawing.Charts
  DNAxisScaling = interface; // type: Aspose.Words.Drawing.Charts.AxisScaling, namespace: Aspose.Words.Drawing.Charts
  DNChart = interface; // type: Aspose.Words.Drawing.Charts.Chart, namespace: Aspose.Words.Drawing.Charts
  DNChartAxis = interface; // type: Aspose.Words.Drawing.Charts.ChartAxis, namespace: Aspose.Words.Drawing.Charts
  DNChartDataLabel = interface; // type: Aspose.Words.Drawing.Charts.ChartDataLabel, namespace: Aspose.Words.Drawing.Charts
  DNChartDataLabelCollection = interface; // type: Aspose.Words.Drawing.Charts.ChartDataLabelCollection, namespace: Aspose.Words.Drawing.Charts
  DNChartDataPoint = interface; // type: Aspose.Words.Drawing.Charts.ChartDataPoint, namespace: Aspose.Words.Drawing.Charts
  DNChartDataPointCollection = interface; // type: Aspose.Words.Drawing.Charts.ChartDataPointCollection, namespace: Aspose.Words.Drawing.Charts
  DNChartFormat = interface; // type: Aspose.Words.Drawing.Charts.ChartFormat, namespace: Aspose.Words.Drawing.Charts
  DNChartLegend = interface; // type: Aspose.Words.Drawing.Charts.ChartLegend, namespace: Aspose.Words.Drawing.Charts
  DNChartMarker = interface; // type: Aspose.Words.Drawing.Charts.ChartMarker, namespace: Aspose.Words.Drawing.Charts
  DNChartNumberFormat = interface; // type: Aspose.Words.Drawing.Charts.ChartNumberFormat, namespace: Aspose.Words.Drawing.Charts
  DNChartSeries = interface; // type: Aspose.Words.Drawing.Charts.ChartSeries, namespace: Aspose.Words.Drawing.Charts
  DNChartSeriesCollection = interface; // type: Aspose.Words.Drawing.Charts.ChartSeriesCollection, namespace: Aspose.Words.Drawing.Charts
  DNChartTitle = interface; // type: Aspose.Words.Drawing.Charts.ChartTitle, namespace: Aspose.Words.Drawing.Charts
  DNFill = interface; // type: Aspose.Words.Drawing.Fill, namespace: Aspose.Words.Drawing
  DNHorizontalRuleFormat = interface; // type: Aspose.Words.Drawing.HorizontalRuleFormat, namespace: Aspose.Words.Drawing
  DNImageData = interface; // type: Aspose.Words.Drawing.ImageData, namespace: Aspose.Words.Drawing
  DNImageSize = interface; // type: Aspose.Words.Drawing.ImageSize, namespace: Aspose.Words.Drawing
  DNForms2OleControlCollection = interface; // type: Aspose.Words.Drawing.Ole.Forms2OleControlCollection, namespace: Aspose.Words.Drawing.Ole
  DNOleControl = interface; // type: Aspose.Words.Drawing.Ole.OleControl, namespace: Aspose.Words.Drawing.Ole
  DNForms2OleControl = interface; // type: Aspose.Words.Drawing.Ole.Forms2OleControl, namespace: Aspose.Words.Drawing.Ole
  DNOleFormat = interface; // type: Aspose.Words.Drawing.OleFormat, namespace: Aspose.Words.Drawing
  DNOlePackage = interface; // type: Aspose.Words.Drawing.OlePackage, namespace: Aspose.Words.Drawing
  DNSignatureLine = interface; // type: Aspose.Words.Drawing.SignatureLine, namespace: Aspose.Words.Drawing
  DNStroke = interface; // type: Aspose.Words.Drawing.Stroke, namespace: Aspose.Words.Drawing
  DNTextBox = interface; // type: Aspose.Words.Drawing.TextBox, namespace: Aspose.Words.Drawing
  DNTextPath = interface; // type: Aspose.Words.Drawing.TextPath, namespace: Aspose.Words.Drawing
  DNEditableRange = interface; // type: Aspose.Words.EditableRange, namespace: Aspose.Words
  DNBarcodeParameters = interface; // type: Aspose.Words.Fields.BarcodeParameters, namespace: Aspose.Words.Fields
  DNComparisonEvaluationResult = interface; // type: Aspose.Words.Fields.ComparisonEvaluationResult, namespace: Aspose.Words.Fields
  DNComparisonExpression = interface; // type: Aspose.Words.Fields.ComparisonExpression, namespace: Aspose.Words.Fields
  DNDropDownItemCollection = interface; // type: Aspose.Words.Fields.DropDownItemCollection, namespace: Aspose.Words.Fields
  DNField = interface; // type: Aspose.Words.Fields.Field, namespace: Aspose.Words.Fields
  DNFieldAddIn = interface; // type: Aspose.Words.Fields.FieldAddIn, namespace: Aspose.Words.Fields
  DNFieldAddressBlock = interface; // type: Aspose.Words.Fields.FieldAddressBlock, namespace: Aspose.Words.Fields
  DNFieldAdvance = interface; // type: Aspose.Words.Fields.FieldAdvance, namespace: Aspose.Words.Fields
  DNFieldAsk = interface; // type: Aspose.Words.Fields.FieldAsk, namespace: Aspose.Words.Fields
  DNFieldAuthor = interface; // type: Aspose.Words.Fields.FieldAuthor, namespace: Aspose.Words.Fields
  DNFieldAutoNum = interface; // type: Aspose.Words.Fields.FieldAutoNum, namespace: Aspose.Words.Fields
  DNFieldAutoNumLgl = interface; // type: Aspose.Words.Fields.FieldAutoNumLgl, namespace: Aspose.Words.Fields
  DNFieldAutoNumOut = interface; // type: Aspose.Words.Fields.FieldAutoNumOut, namespace: Aspose.Words.Fields
  DNFieldAutoText = interface; // type: Aspose.Words.Fields.FieldAutoText, namespace: Aspose.Words.Fields
  DNFieldAutoTextList = interface; // type: Aspose.Words.Fields.FieldAutoTextList, namespace: Aspose.Words.Fields
  DNFieldBarcode = interface; // type: Aspose.Words.Fields.FieldBarcode, namespace: Aspose.Words.Fields
  DNFieldBibliography = interface; // type: Aspose.Words.Fields.FieldBibliography, namespace: Aspose.Words.Fields
  DNFieldBidiOutline = interface; // type: Aspose.Words.Fields.FieldBidiOutline, namespace: Aspose.Words.Fields
  DNFieldCitation = interface; // type: Aspose.Words.Fields.FieldCitation, namespace: Aspose.Words.Fields
  DNFieldComments = interface; // type: Aspose.Words.Fields.FieldComments, namespace: Aspose.Words.Fields
  DNFieldCompare = interface; // type: Aspose.Words.Fields.FieldCompare, namespace: Aspose.Words.Fields
  DNFieldCreateDate = interface; // type: Aspose.Words.Fields.FieldCreateDate, namespace: Aspose.Words.Fields
  DNFieldData = interface; // type: Aspose.Words.Fields.FieldData, namespace: Aspose.Words.Fields
  DNFieldDatabase = interface; // type: Aspose.Words.Fields.FieldDatabase, namespace: Aspose.Words.Fields
  DNFieldDate = interface; // type: Aspose.Words.Fields.FieldDate, namespace: Aspose.Words.Fields
  DNFieldDde = interface; // type: Aspose.Words.Fields.FieldDde, namespace: Aspose.Words.Fields
  DNFieldDdeAuto = interface; // type: Aspose.Words.Fields.FieldDdeAuto, namespace: Aspose.Words.Fields
  DNFieldDisplayBarcode = interface; // type: Aspose.Words.Fields.FieldDisplayBarcode, namespace: Aspose.Words.Fields
  DNFieldDocProperty = interface; // type: Aspose.Words.Fields.FieldDocProperty, namespace: Aspose.Words.Fields
  DNFieldDocVariable = interface; // type: Aspose.Words.Fields.FieldDocVariable, namespace: Aspose.Words.Fields
  DNFieldEditTime = interface; // type: Aspose.Words.Fields.FieldEditTime, namespace: Aspose.Words.Fields
  DNFieldEmbed = interface; // type: Aspose.Words.Fields.FieldEmbed, namespace: Aspose.Words.Fields
  DNFieldEQ = interface; // type: Aspose.Words.Fields.FieldEQ, namespace: Aspose.Words.Fields
  DNFieldFileName = interface; // type: Aspose.Words.Fields.FieldFileName, namespace: Aspose.Words.Fields
  DNFieldFileSize = interface; // type: Aspose.Words.Fields.FieldFileSize, namespace: Aspose.Words.Fields
  DNFieldFillIn = interface; // type: Aspose.Words.Fields.FieldFillIn, namespace: Aspose.Words.Fields
  DNFieldFootnoteRef = interface; // type: Aspose.Words.Fields.FieldFootnoteRef, namespace: Aspose.Words.Fields
  DNFieldFormCheckBox = interface; // type: Aspose.Words.Fields.FieldFormCheckBox, namespace: Aspose.Words.Fields
  DNFieldFormDropDown = interface; // type: Aspose.Words.Fields.FieldFormDropDown, namespace: Aspose.Words.Fields
  DNFieldFormText = interface; // type: Aspose.Words.Fields.FieldFormText, namespace: Aspose.Words.Fields
  DNFieldFormula = interface; // type: Aspose.Words.Fields.FieldFormula, namespace: Aspose.Words.Fields
  DNFieldGlossary = interface; // type: Aspose.Words.Fields.FieldGlossary, namespace: Aspose.Words.Fields
  DNFieldGoToButton = interface; // type: Aspose.Words.Fields.FieldGoToButton, namespace: Aspose.Words.Fields
  DNFieldGreetingLine = interface; // type: Aspose.Words.Fields.FieldGreetingLine, namespace: Aspose.Words.Fields
  DNFieldHyperlink = interface; // type: Aspose.Words.Fields.FieldHyperlink, namespace: Aspose.Words.Fields
  DNFieldIf = interface; // type: Aspose.Words.Fields.FieldIf, namespace: Aspose.Words.Fields
  DNFieldImport = interface; // type: Aspose.Words.Fields.FieldImport, namespace: Aspose.Words.Fields
  DNFieldInclude = interface; // type: Aspose.Words.Fields.FieldInclude, namespace: Aspose.Words.Fields
  DNFieldIncludePicture = interface; // type: Aspose.Words.Fields.FieldIncludePicture, namespace: Aspose.Words.Fields
  DNFieldIncludeText = interface; // type: Aspose.Words.Fields.FieldIncludeText, namespace: Aspose.Words.Fields
  DNFieldIndex = interface; // type: Aspose.Words.Fields.FieldIndex, namespace: Aspose.Words.Fields
  DNFieldInfo = interface; // type: Aspose.Words.Fields.FieldInfo, namespace: Aspose.Words.Fields
  DNFieldKeywords = interface; // type: Aspose.Words.Fields.FieldKeywords, namespace: Aspose.Words.Fields
  DNFieldLastSavedBy = interface; // type: Aspose.Words.Fields.FieldLastSavedBy, namespace: Aspose.Words.Fields
  DNFieldLink = interface; // type: Aspose.Words.Fields.FieldLink, namespace: Aspose.Words.Fields
  DNFieldListNum = interface; // type: Aspose.Words.Fields.FieldListNum, namespace: Aspose.Words.Fields
  DNFieldMacroButton = interface; // type: Aspose.Words.Fields.FieldMacroButton, namespace: Aspose.Words.Fields
  DNFieldMergeBarcode = interface; // type: Aspose.Words.Fields.FieldMergeBarcode, namespace: Aspose.Words.Fields
  DNFieldMergeField = interface; // type: Aspose.Words.Fields.FieldMergeField, namespace: Aspose.Words.Fields
  DNFieldMergeRec = interface; // type: Aspose.Words.Fields.FieldMergeRec, namespace: Aspose.Words.Fields
  DNFieldMergeSeq = interface; // type: Aspose.Words.Fields.FieldMergeSeq, namespace: Aspose.Words.Fields
  DNFieldNext = interface; // type: Aspose.Words.Fields.FieldNext, namespace: Aspose.Words.Fields
  DNFieldNextIf = interface; // type: Aspose.Words.Fields.FieldNextIf, namespace: Aspose.Words.Fields
  DNFieldNoteRef = interface; // type: Aspose.Words.Fields.FieldNoteRef, namespace: Aspose.Words.Fields
  DNFieldNumChars = interface; // type: Aspose.Words.Fields.FieldNumChars, namespace: Aspose.Words.Fields
  DNFieldNumPages = interface; // type: Aspose.Words.Fields.FieldNumPages, namespace: Aspose.Words.Fields
  DNFieldNumWords = interface; // type: Aspose.Words.Fields.FieldNumWords, namespace: Aspose.Words.Fields
  DNFieldOcx = interface; // type: Aspose.Words.Fields.FieldOcx, namespace: Aspose.Words.Fields
  DNFieldPage = interface; // type: Aspose.Words.Fields.FieldPage, namespace: Aspose.Words.Fields
  DNFieldPageRef = interface; // type: Aspose.Words.Fields.FieldPageRef, namespace: Aspose.Words.Fields
  DNFieldPrint = interface; // type: Aspose.Words.Fields.FieldPrint, namespace: Aspose.Words.Fields
  DNFieldPrintDate = interface; // type: Aspose.Words.Fields.FieldPrintDate, namespace: Aspose.Words.Fields
  DNFieldPrivate = interface; // type: Aspose.Words.Fields.FieldPrivate, namespace: Aspose.Words.Fields
  DNFieldQuote = interface; // type: Aspose.Words.Fields.FieldQuote, namespace: Aspose.Words.Fields
  DNFieldRD = interface; // type: Aspose.Words.Fields.FieldRD, namespace: Aspose.Words.Fields
  DNFieldRef = interface; // type: Aspose.Words.Fields.FieldRef, namespace: Aspose.Words.Fields
  DNFieldRevNum = interface; // type: Aspose.Words.Fields.FieldRevNum, namespace: Aspose.Words.Fields
  DNFieldSaveDate = interface; // type: Aspose.Words.Fields.FieldSaveDate, namespace: Aspose.Words.Fields
  DNFieldSection = interface; // type: Aspose.Words.Fields.FieldSection, namespace: Aspose.Words.Fields
  DNFieldSectionPages = interface; // type: Aspose.Words.Fields.FieldSectionPages, namespace: Aspose.Words.Fields
  DNFieldSeq = interface; // type: Aspose.Words.Fields.FieldSeq, namespace: Aspose.Words.Fields
  DNFieldSet = interface; // type: Aspose.Words.Fields.FieldSet, namespace: Aspose.Words.Fields
  DNFieldShape = interface; // type: Aspose.Words.Fields.FieldShape, namespace: Aspose.Words.Fields
  DNFieldSkipIf = interface; // type: Aspose.Words.Fields.FieldSkipIf, namespace: Aspose.Words.Fields
  DNFieldStyleRef = interface; // type: Aspose.Words.Fields.FieldStyleRef, namespace: Aspose.Words.Fields
  DNFieldSubject = interface; // type: Aspose.Words.Fields.FieldSubject, namespace: Aspose.Words.Fields
  DNFieldSymbol = interface; // type: Aspose.Words.Fields.FieldSymbol, namespace: Aspose.Words.Fields
  DNFieldTA = interface; // type: Aspose.Words.Fields.FieldTA, namespace: Aspose.Words.Fields
  DNFieldTC = interface; // type: Aspose.Words.Fields.FieldTC, namespace: Aspose.Words.Fields
  DNFieldTemplate = interface; // type: Aspose.Words.Fields.FieldTemplate, namespace: Aspose.Words.Fields
  DNFieldTime = interface; // type: Aspose.Words.Fields.FieldTime, namespace: Aspose.Words.Fields
  DNFieldTitle = interface; // type: Aspose.Words.Fields.FieldTitle, namespace: Aspose.Words.Fields
  DNFieldToa = interface; // type: Aspose.Words.Fields.FieldToa, namespace: Aspose.Words.Fields
  DNFieldToc = interface; // type: Aspose.Words.Fields.FieldToc, namespace: Aspose.Words.Fields
  DNFieldUnknown = interface; // type: Aspose.Words.Fields.FieldUnknown, namespace: Aspose.Words.Fields
  DNFieldUserAddress = interface; // type: Aspose.Words.Fields.FieldUserAddress, namespace: Aspose.Words.Fields
  DNFieldUserInitials = interface; // type: Aspose.Words.Fields.FieldUserInitials, namespace: Aspose.Words.Fields
  DNFieldUserName = interface; // type: Aspose.Words.Fields.FieldUserName, namespace: Aspose.Words.Fields
  DNFieldXE = interface; // type: Aspose.Words.Fields.FieldXE, namespace: Aspose.Words.Fields
  DNFieldArgumentBuilder = interface; // type: Aspose.Words.Fields.FieldArgumentBuilder, namespace: Aspose.Words.Fields
  DNFieldBuilder = interface; // type: Aspose.Words.Fields.FieldBuilder, namespace: Aspose.Words.Fields
  DNFieldCollection = interface; // type: Aspose.Words.Fields.FieldCollection, namespace: Aspose.Words.Fields
  DNFieldFormat = interface; // type: Aspose.Words.Fields.FieldFormat, namespace: Aspose.Words.Fields
  DNFieldOptions = interface; // type: Aspose.Words.Fields.FieldOptions, namespace: Aspose.Words.Fields
  DNFormFieldCollection = interface; // type: Aspose.Words.Fields.FormFieldCollection, namespace: Aspose.Words.Fields
  DNGeneralFormatCollection = interface; // type: Aspose.Words.Fields.GeneralFormatCollection, namespace: Aspose.Words.Fields
  DNMergeFieldImageDimension = interface; // type: Aspose.Words.Fields.MergeFieldImageDimension, namespace: Aspose.Words.Fields
  DNToaCategories = interface; // type: Aspose.Words.Fields.ToaCategories, namespace: Aspose.Words.Fields
  DNUserInformation = interface; // type: Aspose.Words.Fields.UserInformation, namespace: Aspose.Words.Fields
  DNFileFormatInfo = interface; // type: Aspose.Words.FileFormatInfo, namespace: Aspose.Words
  DNFileFormatUtil = interface; // type: Aspose.Words.FileFormatUtil, namespace: Aspose.Words
  DNFont = interface; // type: Aspose.Words.Font, namespace: Aspose.Words
  DNFontFallbackSettings = interface; // type: Aspose.Words.Fonts.FontFallbackSettings, namespace: Aspose.Words.Fonts
  DNFontInfo = interface; // type: Aspose.Words.Fonts.FontInfo, namespace: Aspose.Words.Fonts
  DNFontInfoCollection = interface; // type: Aspose.Words.Fonts.FontInfoCollection, namespace: Aspose.Words.Fonts
  DNFontSettings = interface; // type: Aspose.Words.Fonts.FontSettings, namespace: Aspose.Words.Fonts
  DNFontSourceBase = interface; // type: Aspose.Words.Fonts.FontSourceBase, namespace: Aspose.Words.Fonts
  DNFileFontSource = interface; // type: Aspose.Words.Fonts.FileFontSource, namespace: Aspose.Words.Fonts
  DNFolderFontSource = interface; // type: Aspose.Words.Fonts.FolderFontSource, namespace: Aspose.Words.Fonts
  DNMemoryFontSource = interface; // type: Aspose.Words.Fonts.MemoryFontSource, namespace: Aspose.Words.Fonts
  DNStreamFontSource = interface; // type: Aspose.Words.Fonts.StreamFontSource, namespace: Aspose.Words.Fonts
  DNSystemFontSource = interface; // type: Aspose.Words.Fonts.SystemFontSource, namespace: Aspose.Words.Fonts
  DNFontSubstitutionRule = interface; // type: Aspose.Words.Fonts.FontSubstitutionRule, namespace: Aspose.Words.Fonts
  DNDefaultFontSubstitutionRule = interface; // type: Aspose.Words.Fonts.DefaultFontSubstitutionRule, namespace: Aspose.Words.Fonts
  DNFontConfigSubstitutionRule = interface; // type: Aspose.Words.Fonts.FontConfigSubstitutionRule, namespace: Aspose.Words.Fonts
  DNFontInfoSubstitutionRule = interface; // type: Aspose.Words.Fonts.FontInfoSubstitutionRule, namespace: Aspose.Words.Fonts
  DNFontNameSubstitutionRule = interface; // type: Aspose.Words.Fonts.FontNameSubstitutionRule, namespace: Aspose.Words.Fonts
  DNTableSubstitutionRule = interface; // type: Aspose.Words.Fonts.TableSubstitutionRule, namespace: Aspose.Words.Fonts
  DNFontSubstitutionSettings = interface; // type: Aspose.Words.Fonts.FontSubstitutionSettings, namespace: Aspose.Words.Fonts
  DNPhysicalFontInfo = interface; // type: Aspose.Words.Fonts.PhysicalFontInfo, namespace: Aspose.Words.Fonts
  DNFrameFormat = interface; // type: Aspose.Words.FrameFormat, namespace: Aspose.Words
  DNHyphenation = interface; // type: Aspose.Words.Hyphenation, namespace: Aspose.Words
  DNImageWatermarkOptions = interface; // type: Aspose.Words.ImageWatermarkOptions, namespace: Aspose.Words
  DNImportFormatOptions = interface; // type: Aspose.Words.ImportFormatOptions, namespace: Aspose.Words
  DNInternableComplexAttr = interface; // type: Aspose.Words.InternableComplexAttr, namespace: Aspose.Words
  DNBorder = interface; // type: Aspose.Words.Border, namespace: Aspose.Words
  DNShading = interface; // type: Aspose.Words.Shading, namespace: Aspose.Words
  DNTabStopCollection = interface; // type: Aspose.Words.TabStopCollection, namespace: Aspose.Words
  DNInterruptionToken = interface; // type: Aspose.Words.InterruptionToken, namespace: Aspose.Words
  DNLayoutCollector = interface; // type: Aspose.Words.Layout.LayoutCollector, namespace: Aspose.Words.Layout
  DNLayoutEnumerator = interface; // type: Aspose.Words.Layout.LayoutEnumerator, namespace: Aspose.Words.Layout
  DNLayoutOptions = interface; // type: Aspose.Words.Layout.LayoutOptions, namespace: Aspose.Words.Layout
  DNPageLayoutCallbackArgs = interface; // type: Aspose.Words.Layout.PageLayoutCallbackArgs, namespace: Aspose.Words.Layout
  DNRevisionOptions = interface; // type: Aspose.Words.Layout.RevisionOptions, namespace: Aspose.Words.Layout
  DNLicense = interface; // type: Aspose.Words.License, namespace: Aspose.Words
  DNList = interface; // type: Aspose.Words.Lists.List, namespace: Aspose.Words.Lists
  DNListCollection = interface; // type: Aspose.Words.Lists.ListCollection, namespace: Aspose.Words.Lists
  DNListFormat = interface; // type: Aspose.Words.Lists.ListFormat, namespace: Aspose.Words.Lists
  DNListLabel = interface; // type: Aspose.Words.Lists.ListLabel, namespace: Aspose.Words.Lists
  DNListLevel = interface; // type: Aspose.Words.Lists.ListLevel, namespace: Aspose.Words.Lists
  DNListLevelCollection = interface; // type: Aspose.Words.Lists.ListLevelCollection, namespace: Aspose.Words.Lists
  DNLanguagePreferences = interface; // type: Aspose.Words.Loading.LanguagePreferences, namespace: Aspose.Words.Loading
  DNLoadOptions = interface; // type: Aspose.Words.Loading.LoadOptions, namespace: Aspose.Words.Loading
  DNHtmlLoadOptions = interface; // type: Aspose.Words.Loading.HtmlLoadOptions, namespace: Aspose.Words.Loading
  DNPdfLoadOptions = interface; // type: Aspose.Words.Loading.PdfLoadOptions, namespace: Aspose.Words.Loading
  DNRtfLoadOptions = interface; // type: Aspose.Words.Loading.RtfLoadOptions, namespace: Aspose.Words.Loading
  DNTxtLoadOptions = interface; // type: Aspose.Words.Loading.TxtLoadOptions, namespace: Aspose.Words.Loading
  DNResourceLoadingArgs = interface; // type: Aspose.Words.Loading.ResourceLoadingArgs, namespace: Aspose.Words.Loading
  DNFieldMergingArgsBase = interface; // type: Aspose.Words.MailMerging.FieldMergingArgsBase, namespace: Aspose.Words.MailMerging
  DNFieldMergingArgs = interface; // type: Aspose.Words.MailMerging.FieldMergingArgs, namespace: Aspose.Words.MailMerging
  DNImageFieldMergingArgs = interface; // type: Aspose.Words.MailMerging.ImageFieldMergingArgs, namespace: Aspose.Words.MailMerging
  DNMailMerge = interface; // type: Aspose.Words.MailMerging.MailMerge, namespace: Aspose.Words.MailMerging
  DNMailMergeRegionInfo = interface; // type: Aspose.Words.MailMerging.MailMergeRegionInfo, namespace: Aspose.Words.MailMerging
  DNMappedDataFieldCollection = interface; // type: Aspose.Words.MailMerging.MappedDataFieldCollection, namespace: Aspose.Words.MailMerging
  DNCustomPart = interface; // type: Aspose.Words.Markup.CustomPart, namespace: Aspose.Words.Markup
  DNCustomPartCollection = interface; // type: Aspose.Words.Markup.CustomPartCollection, namespace: Aspose.Words.Markup
  DNCustomXmlPart = interface; // type: Aspose.Words.Markup.CustomXmlPart, namespace: Aspose.Words.Markup
  DNCustomXmlPartCollection = interface; // type: Aspose.Words.Markup.CustomXmlPartCollection, namespace: Aspose.Words.Markup
  DNCustomXmlProperty = interface; // type: Aspose.Words.Markup.CustomXmlProperty, namespace: Aspose.Words.Markup
  DNCustomXmlPropertyCollection = interface; // type: Aspose.Words.Markup.CustomXmlPropertyCollection, namespace: Aspose.Words.Markup
  DNCustomXmlSchemaCollection = interface; // type: Aspose.Words.Markup.CustomXmlSchemaCollection, namespace: Aspose.Words.Markup
  DNSdtListItem = interface; // type: Aspose.Words.Markup.SdtListItem, namespace: Aspose.Words.Markup
  DNSdtListItemCollection = interface; // type: Aspose.Words.Markup.SdtListItemCollection, namespace: Aspose.Words.Markup
  DNXmlMapping = interface; // type: Aspose.Words.Markup.XmlMapping, namespace: Aspose.Words.Markup
  DNMetered = interface; // type: Aspose.Words.Metered, namespace: Aspose.Words
  DNNode = interface; // type: Aspose.Words.Node, namespace: Aspose.Words
  DNBookmarkEnd = interface; // type: Aspose.Words.BookmarkEnd, namespace: Aspose.Words
  DNBookmarkStart = interface; // type: Aspose.Words.BookmarkStart, namespace: Aspose.Words
  DNCommentRangeEnd = interface; // type: Aspose.Words.CommentRangeEnd, namespace: Aspose.Words
  DNCommentRangeStart = interface; // type: Aspose.Words.CommentRangeStart, namespace: Aspose.Words
  DNCompositeNode = interface; // type: Aspose.Words.CompositeNode, namespace: Aspose.Words
  DNBuildingBlock = interface; // type: Aspose.Words.BuildingBlocks.BuildingBlock, namespace: Aspose.Words.BuildingBlocks
  DNDocumentBase = interface; // type: Aspose.Words.DocumentBase, namespace: Aspose.Words
  DNGlossaryDocument = interface; // type: Aspose.Words.BuildingBlocks.GlossaryDocument, namespace: Aspose.Words.BuildingBlocks
  DNDocument = interface; // type: Aspose.Words.Document, namespace: Aspose.Words
  DNShapeBase = interface; // type: Aspose.Words.Drawing.ShapeBase, namespace: Aspose.Words.Drawing
  DNGroupShape = interface; // type: Aspose.Words.Drawing.GroupShape, namespace: Aspose.Words.Drawing
  DNShape = interface; // type: Aspose.Words.Drawing.Shape, namespace: Aspose.Words.Drawing
  DNInlineStory = interface; // type: Aspose.Words.InlineStory, namespace: Aspose.Words
  DNComment = interface; // type: Aspose.Words.Comment, namespace: Aspose.Words
  DNFootnote = interface; // type: Aspose.Words.Notes.Footnote, namespace: Aspose.Words.Notes
  DNSmartTag = interface; // type: Aspose.Words.Markup.SmartTag, namespace: Aspose.Words.Markup
  DNStructuredDocumentTag = interface; // type: Aspose.Words.Markup.StructuredDocumentTag, namespace: Aspose.Words.Markup
  DNOfficeMath = interface; // type: Aspose.Words.Math.OfficeMath, namespace: Aspose.Words.Math
  DNParagraph = interface; // type: Aspose.Words.Paragraph, namespace: Aspose.Words
  DNSection = interface; // type: Aspose.Words.Section, namespace: Aspose.Words
  DNStory = interface; // type: Aspose.Words.Story, namespace: Aspose.Words
  DNBody = interface; // type: Aspose.Words.Body, namespace: Aspose.Words
  DNHeaderFooter = interface; // type: Aspose.Words.HeaderFooter, namespace: Aspose.Words
  DNCell = interface; // type: Aspose.Words.Tables.Cell, namespace: Aspose.Words.Tables
  DNRow = interface; // type: Aspose.Words.Tables.Row, namespace: Aspose.Words.Tables
  DNTable = interface; // type: Aspose.Words.Tables.Table, namespace: Aspose.Words.Tables
  DNEditableRangeEnd = interface; // type: Aspose.Words.EditableRangeEnd, namespace: Aspose.Words
  DNEditableRangeStart = interface; // type: Aspose.Words.EditableRangeStart, namespace: Aspose.Words
  DNInline = interface; // type: Aspose.Words.Inline, namespace: Aspose.Words
  DNRun = interface; // type: Aspose.Words.Run, namespace: Aspose.Words
  DNSpecialChar = interface; // type: Aspose.Words.SpecialChar, namespace: Aspose.Words
  DNAbsolutePositionTab = interface; // type: Aspose.Words.AbsolutePositionTab, namespace: Aspose.Words
  DNFieldChar = interface; // type: Aspose.Words.Fields.FieldChar, namespace: Aspose.Words.Fields
  DNFieldEnd = interface; // type: Aspose.Words.Fields.FieldEnd, namespace: Aspose.Words.Fields
  DNFieldSeparator = interface; // type: Aspose.Words.Fields.FieldSeparator, namespace: Aspose.Words.Fields
  DNFieldStart = interface; // type: Aspose.Words.Fields.FieldStart, namespace: Aspose.Words.Fields
  DNFormField = interface; // type: Aspose.Words.Fields.FormField, namespace: Aspose.Words.Fields
  DNStructuredDocumentTagRangeEnd = interface; // type: Aspose.Words.Markup.StructuredDocumentTagRangeEnd, namespace: Aspose.Words.Markup
  DNStructuredDocumentTagRangeStart = interface; // type: Aspose.Words.Markup.StructuredDocumentTagRangeStart, namespace: Aspose.Words.Markup
  DNSubDocument = interface; // type: Aspose.Words.SubDocument, namespace: Aspose.Words
  DNNodeChangingArgs = interface; // type: Aspose.Words.NodeChangingArgs, namespace: Aspose.Words
  DNNodeCollection = interface; // type: Aspose.Words.NodeCollection, namespace: Aspose.Words
  DNBuildingBlockCollection = interface; // type: Aspose.Words.BuildingBlocks.BuildingBlockCollection, namespace: Aspose.Words.BuildingBlocks
  DNCommentCollection = interface; // type: Aspose.Words.CommentCollection, namespace: Aspose.Words
  DNHeaderFooterCollection = interface; // type: Aspose.Words.HeaderFooterCollection, namespace: Aspose.Words
  DNParagraphCollection = interface; // type: Aspose.Words.ParagraphCollection, namespace: Aspose.Words
  DNRunCollection = interface; // type: Aspose.Words.RunCollection, namespace: Aspose.Words
  DNSectionCollection = interface; // type: Aspose.Words.SectionCollection, namespace: Aspose.Words
  DNCellCollection = interface; // type: Aspose.Words.Tables.CellCollection, namespace: Aspose.Words.Tables
  DNRowCollection = interface; // type: Aspose.Words.Tables.RowCollection, namespace: Aspose.Words.Tables
  DNTableCollection = interface; // type: Aspose.Words.Tables.TableCollection, namespace: Aspose.Words.Tables
  DNNodeImporter = interface; // type: Aspose.Words.NodeImporter, namespace: Aspose.Words
  DNNodeList = interface; // type: Aspose.Words.NodeList, namespace: Aspose.Words
  DNEndnoteOptions = interface; // type: Aspose.Words.Notes.EndnoteOptions, namespace: Aspose.Words.Notes
  DNFootnoteOptions = interface; // type: Aspose.Words.Notes.FootnoteOptions, namespace: Aspose.Words.Notes
  DNPageSetup = interface; // type: Aspose.Words.PageSetup, namespace: Aspose.Words
  DNParagraphFormat = interface; // type: Aspose.Words.ParagraphFormat, namespace: Aspose.Words
  DNPlainTextDocument = interface; // type: Aspose.Words.PlainTextDocument, namespace: Aspose.Words
  DNDocumentProperty = interface; // type: Aspose.Words.Properties.DocumentProperty, namespace: Aspose.Words.Properties
  DNDocumentPropertyCollection = interface; // type: Aspose.Words.Properties.DocumentPropertyCollection, namespace: Aspose.Words.Properties
  DNBuiltInDocumentProperties = interface; // type: Aspose.Words.Properties.BuiltInDocumentProperties, namespace: Aspose.Words.Properties
  DNCustomDocumentProperties = interface; // type: Aspose.Words.Properties.CustomDocumentProperties, namespace: Aspose.Words.Properties
  DNRange = interface; // type: Aspose.Words.Range, namespace: Aspose.Words
  DNNodeRendererBase = interface; // type: Aspose.Words.Rendering.NodeRendererBase, namespace: Aspose.Words.Rendering
  DNOfficeMathRenderer = interface; // type: Aspose.Words.Rendering.OfficeMathRenderer, namespace: Aspose.Words.Rendering
  DNShapeRenderer = interface; // type: Aspose.Words.Rendering.ShapeRenderer, namespace: Aspose.Words.Rendering
  DNPageInfo = interface; // type: Aspose.Words.Rendering.PageInfo, namespace: Aspose.Words.Rendering
  DNPrinterSettingsContainer = interface; // type: Aspose.Words.Rendering.PrinterSettingsContainer, namespace: Aspose.Words.Rendering
  DNThumbnailGeneratingOptions = interface; // type: Aspose.Words.Rendering.ThumbnailGeneratingOptions, namespace: Aspose.Words.Rendering
  DNFindReplaceOptions = interface; // type: Aspose.Words.Replacing.FindReplaceOptions, namespace: Aspose.Words.Replacing
  DNReplacingArgs = interface; // type: Aspose.Words.Replacing.ReplacingArgs, namespace: Aspose.Words.Replacing
  DNCsvDataLoadOptions = interface; // type: Aspose.Words.Reporting.CsvDataLoadOptions, namespace: Aspose.Words.Reporting
  DNCsvDataSource = interface; // type: Aspose.Words.Reporting.CsvDataSource, namespace: Aspose.Words.Reporting
  DNJsonDataLoadOptions = interface; // type: Aspose.Words.Reporting.JsonDataLoadOptions, namespace: Aspose.Words.Reporting
  DNJsonDataSource = interface; // type: Aspose.Words.Reporting.JsonDataSource, namespace: Aspose.Words.Reporting
  DNKnownTypeSet = interface; // type: Aspose.Words.Reporting.KnownTypeSet, namespace: Aspose.Words.Reporting
  DNReportingEngine = interface; // type: Aspose.Words.Reporting.ReportingEngine, namespace: Aspose.Words.Reporting
  DNXmlDataLoadOptions = interface; // type: Aspose.Words.Reporting.XmlDataLoadOptions, namespace: Aspose.Words.Reporting
  DNXmlDataSource = interface; // type: Aspose.Words.Reporting.XmlDataSource, namespace: Aspose.Words.Reporting
  DNRevision = interface; // type: Aspose.Words.Revision, namespace: Aspose.Words
  DNRevisionCollection = interface; // type: Aspose.Words.RevisionCollection, namespace: Aspose.Words
  DNRevisionGroup = interface; // type: Aspose.Words.RevisionGroup, namespace: Aspose.Words
  DNRevisionGroupCollection = interface; // type: Aspose.Words.RevisionGroupCollection, namespace: Aspose.Words
  DNBookmarksOutlineLevelCollection = interface; // type: Aspose.Words.Saving.BookmarksOutlineLevelCollection, namespace: Aspose.Words.Saving
  DNCssSavingArgs = interface; // type: Aspose.Words.Saving.CssSavingArgs, namespace: Aspose.Words.Saving
  DNDocumentPartSavingArgs = interface; // type: Aspose.Words.Saving.DocumentPartSavingArgs, namespace: Aspose.Words.Saving
  DNDownsampleOptions = interface; // type: Aspose.Words.Saving.DownsampleOptions, namespace: Aspose.Words.Saving
  DNFontSavingArgs = interface; // type: Aspose.Words.Saving.FontSavingArgs, namespace: Aspose.Words.Saving
  DNGraphicsQualityOptions = interface; // type: Aspose.Words.Saving.GraphicsQualityOptions, namespace: Aspose.Words.Saving
  DNImageSavingArgs = interface; // type: Aspose.Words.Saving.ImageSavingArgs, namespace: Aspose.Words.Saving
  DNMetafileRenderingOptions = interface; // type: Aspose.Words.Saving.MetafileRenderingOptions, namespace: Aspose.Words.Saving
  DNOutlineOptions = interface; // type: Aspose.Words.Saving.OutlineOptions, namespace: Aspose.Words.Saving
  DNPageRange = interface; // type: Aspose.Words.Saving.PageRange, namespace: Aspose.Words.Saving
  DNPageSavingArgs = interface; // type: Aspose.Words.Saving.PageSavingArgs, namespace: Aspose.Words.Saving
  DNPageSet = interface; // type: Aspose.Words.Saving.PageSet, namespace: Aspose.Words.Saving
  DNPdfDigitalSignatureDetails = interface; // type: Aspose.Words.Saving.PdfDigitalSignatureDetails, namespace: Aspose.Words.Saving
  DNPdfDigitalSignatureTimestampSettings = interface; // type: Aspose.Words.Saving.PdfDigitalSignatureTimestampSettings, namespace: Aspose.Words.Saving
  DNPdfEncryptionDetails = interface; // type: Aspose.Words.Saving.PdfEncryptionDetails, namespace: Aspose.Words.Saving
  DNResourceSavingArgs = interface; // type: Aspose.Words.Saving.ResourceSavingArgs, namespace: Aspose.Words.Saving
  DNSaveOptions = interface; // type: Aspose.Words.Saving.SaveOptions, namespace: Aspose.Words.Saving
  DNDocSaveOptions = interface; // type: Aspose.Words.Saving.DocSaveOptions, namespace: Aspose.Words.Saving
  DNFixedPageSaveOptions = interface; // type: Aspose.Words.Saving.FixedPageSaveOptions, namespace: Aspose.Words.Saving
  DNHtmlFixedSaveOptions = interface; // type: Aspose.Words.Saving.HtmlFixedSaveOptions, namespace: Aspose.Words.Saving
  DNImageSaveOptions = interface; // type: Aspose.Words.Saving.ImageSaveOptions, namespace: Aspose.Words.Saving
  DNPclSaveOptions = interface; // type: Aspose.Words.Saving.PclSaveOptions, namespace: Aspose.Words.Saving
  DNPdfSaveOptions = interface; // type: Aspose.Words.Saving.PdfSaveOptions, namespace: Aspose.Words.Saving
  DNPsSaveOptions = interface; // type: Aspose.Words.Saving.PsSaveOptions, namespace: Aspose.Words.Saving
  DNSvgSaveOptions = interface; // type: Aspose.Words.Saving.SvgSaveOptions, namespace: Aspose.Words.Saving
  DNXamlFixedSaveOptions = interface; // type: Aspose.Words.Saving.XamlFixedSaveOptions, namespace: Aspose.Words.Saving
  DNXpsSaveOptions = interface; // type: Aspose.Words.Saving.XpsSaveOptions, namespace: Aspose.Words.Saving
  DNHtmlSaveOptions = interface; // type: Aspose.Words.Saving.HtmlSaveOptions, namespace: Aspose.Words.Saving
  DNOdtSaveOptions = interface; // type: Aspose.Words.Saving.OdtSaveOptions, namespace: Aspose.Words.Saving
  DNOoxmlSaveOptions = interface; // type: Aspose.Words.Saving.OoxmlSaveOptions, namespace: Aspose.Words.Saving
  DNRtfSaveOptions = interface; // type: Aspose.Words.Saving.RtfSaveOptions, namespace: Aspose.Words.Saving
  DNTxtSaveOptionsBase = interface; // type: Aspose.Words.Saving.TxtSaveOptionsBase, namespace: Aspose.Words.Saving
  DNMarkdownSaveOptions = interface; // type: Aspose.Words.Saving.MarkdownSaveOptions, namespace: Aspose.Words.Saving
  DNTxtSaveOptions = interface; // type: Aspose.Words.Saving.TxtSaveOptions, namespace: Aspose.Words.Saving
  DNWordML2003SaveOptions = interface; // type: Aspose.Words.Saving.WordML2003SaveOptions, namespace: Aspose.Words.Saving
  DNXamlFlowSaveOptions = interface; // type: Aspose.Words.Saving.XamlFlowSaveOptions, namespace: Aspose.Words.Saving
  DNSaveOutputParameters = interface; // type: Aspose.Words.Saving.SaveOutputParameters, namespace: Aspose.Words.Saving
  DNTxtListIndentation = interface; // type: Aspose.Words.Saving.TxtListIndentation, namespace: Aspose.Words.Saving
  DNCompatibilityOptions = interface; // type: Aspose.Words.Settings.CompatibilityOptions, namespace: Aspose.Words.Settings
  DNHyphenationOptions = interface; // type: Aspose.Words.Settings.HyphenationOptions, namespace: Aspose.Words.Settings
  DNMailMergeSettings = interface; // type: Aspose.Words.Settings.MailMergeSettings, namespace: Aspose.Words.Settings
  DNOdso = interface; // type: Aspose.Words.Settings.Odso, namespace: Aspose.Words.Settings
  DNOdsoFieldMapData = interface; // type: Aspose.Words.Settings.OdsoFieldMapData, namespace: Aspose.Words.Settings
  DNOdsoFieldMapDataCollection = interface; // type: Aspose.Words.Settings.OdsoFieldMapDataCollection, namespace: Aspose.Words.Settings
  DNOdsoRecipientData = interface; // type: Aspose.Words.Settings.OdsoRecipientData, namespace: Aspose.Words.Settings
  DNOdsoRecipientDataCollection = interface; // type: Aspose.Words.Settings.OdsoRecipientDataCollection, namespace: Aspose.Words.Settings
  DNViewOptions = interface; // type: Aspose.Words.Settings.ViewOptions, namespace: Aspose.Words.Settings
  DNWriteProtection = interface; // type: Aspose.Words.Settings.WriteProtection, namespace: Aspose.Words.Settings
  DNBasicTextShaperCache = interface; // type: Aspose.Words.Shaping.BasicTextShaperCache, namespace: Aspose.Words.Shaping
  DNCluster = interface; // type: Aspose.Words.Shaping.Cluster, namespace: Aspose.Words.Shaping
  DNGlyph = interface; // type: Aspose.Words.Shaping.Glyph, namespace: Aspose.Words.Shaping
  DNSignatureLineOptions = interface; // type: Aspose.Words.SignatureLineOptions, namespace: Aspose.Words
  DNStyle = interface; // type: Aspose.Words.Style, namespace: Aspose.Words
  DNTableStyle = interface; // type: Aspose.Words.TableStyle, namespace: Aspose.Words
  DNStyleCollection = interface; // type: Aspose.Words.StyleCollection, namespace: Aspose.Words
  DNCellFormat = interface; // type: Aspose.Words.Tables.CellFormat, namespace: Aspose.Words.Tables
  DNPreferredWidth = interface; // type: Aspose.Words.Tables.PreferredWidth, namespace: Aspose.Words.Tables
  DNRowFormat = interface; // type: Aspose.Words.Tables.RowFormat, namespace: Aspose.Words.Tables
  DNTabStop = interface; // type: Aspose.Words.TabStop, namespace: Aspose.Words
  DNTextColumn = interface; // type: Aspose.Words.TextColumn, namespace: Aspose.Words
  DNTextColumnCollection = interface; // type: Aspose.Words.TextColumnCollection, namespace: Aspose.Words
  DNTextWatermarkOptions = interface; // type: Aspose.Words.TextWatermarkOptions, namespace: Aspose.Words
  DNTheme = interface; // type: Aspose.Words.Themes.Theme, namespace: Aspose.Words.Themes
  DNThemeColors = interface; // type: Aspose.Words.Themes.ThemeColors, namespace: Aspose.Words.Themes
  DNThemeFonts = interface; // type: Aspose.Words.Themes.ThemeFonts, namespace: Aspose.Words.Themes
  DNVariableCollection = interface; // type: Aspose.Words.VariableCollection, namespace: Aspose.Words
  DNVbaModule = interface; // type: Aspose.Words.Vba.VbaModule, namespace: Aspose.Words.Vba
  DNVbaModuleCollection = interface; // type: Aspose.Words.Vba.VbaModuleCollection, namespace: Aspose.Words.Vba
  DNVbaProject = interface; // type: Aspose.Words.Vba.VbaProject, namespace: Aspose.Words.Vba
  DNVbaReference = interface; // type: Aspose.Words.Vba.VbaReference, namespace: Aspose.Words.Vba
  DNVbaReferenceCollection = interface; // type: Aspose.Words.Vba.VbaReferenceCollection, namespace: Aspose.Words.Vba
  DNWarningInfo = interface; // type: Aspose.Words.WarningInfo, namespace: Aspose.Words
  DNWarningInfoCollection = interface; // type: Aspose.Words.WarningInfoCollection, namespace: Aspose.Words
  DNWatermark = interface; // type: Aspose.Words.Watermark, namespace: Aspose.Words
  DNTaskPaneCollection = interface; // type: Aspose.Words.WebExtensions.TaskPaneCollection, namespace: Aspose.Words.WebExtensions
  DNWebExtensionBindingCollection = interface; // type: Aspose.Words.WebExtensions.WebExtensionBindingCollection, namespace: Aspose.Words.WebExtensions
  DNWebExtensionPropertyCollection = interface; // type: Aspose.Words.WebExtensions.WebExtensionPropertyCollection, namespace: Aspose.Words.WebExtensions
  DNWebExtensionReferenceCollection = interface; // type: Aspose.Words.WebExtensions.WebExtensionReferenceCollection, namespace: Aspose.Words.WebExtensions
  DNBaseWebExtensionCollection<T> = interface; // type: Aspose.Words.WebExtensions.BaseWebExtensionCollection`1, namespace: Aspose.Words.WebExtensions
  DNTaskPane = interface; // type: Aspose.Words.WebExtensions.TaskPane, namespace: Aspose.Words.WebExtensions
  DNWebExtension = interface; // type: Aspose.Words.WebExtensions.WebExtension, namespace: Aspose.Words.WebExtensions
  DNWebExtensionBinding = interface; // type: Aspose.Words.WebExtensions.WebExtensionBinding, namespace: Aspose.Words.WebExtensions
  DNWebExtensionProperty = interface; // type: Aspose.Words.WebExtensions.WebExtensionProperty, namespace: Aspose.Words.WebExtensions
  DNWebExtensionReference = interface; // type: Aspose.Words.WebExtensions.WebExtensionReference, namespace: Aspose.Words.WebExtensions
  DNDocumentReaderPluginLoadException = interface; // type: Aspose.Words.DocumentReaderPluginLoadException, namespace: Aspose.Words
  DNFileCorruptedException = interface; // type: Aspose.Words.FileCorruptedException, namespace: Aspose.Words
  DNIncorrectPasswordException = interface; // type: Aspose.Words.IncorrectPasswordException, namespace: Aspose.Words
  DNUnsupportedFileFormatException = interface; // type: Aspose.Words.UnsupportedFileFormatException, namespace: Aspose.Words
  DNAsposeWordsPrintDocument = interface; // type: Aspose.Words.Rendering.AsposeWordsPrintDocument, namespace: Aspose.Words.Rendering


{ objects }

  //-------------namespace: Aspose.Words.Drawing.Charts----------------
  [DNTypeName('Aspose.Words.Drawing.Charts.IChartDataPoint')]
  DNIChartDataPoint = interface(DDN.mscorlib.DNObject)
  ['{5887582F-F858-3A19-AF56-6C33936182A3}']
  { getters & setters } 

    function get_Explosion: Int32;
    procedure set_Explosion(value: Int32);
    function get_InvertIfNegative: Boolean;
    procedure set_InvertIfNegative(value: Boolean);
    function get_Marker: DNChartMarker;
    function get_Bubble3D: Boolean;
    procedure set_Bubble3D(value: Boolean);

  { propertys } 

    property Explosion: Int32 read get_Explosion write set_Explosion;
    property InvertIfNegative: Boolean read get_InvertIfNegative write set_InvertIfNegative;
    property Marker: DNChartMarker read get_Marker;
    property Bubble3D: Boolean read get_Bubble3D write set_Bubble3D;
  end;

  //-------------namespace: Aspose.Words.Fields----------------
  [DNTypeName('Aspose.Words.Fields.IBarcodeGenerator')]
  DNIBarcodeGenerator = interface(DDN.mscorlib.DNObject)
  ['{D6B151F7-0BF2-3973-8176-C0C4E178C4ED}']
  { methods } 

    function GetBarcodeImage(parameters: DNBarcodeParameters): DDN.System.Drawing.DNImage;
    function GetOldBarcodeImage(parameters: DNBarcodeParameters): DDN.System.Drawing.DNImage;

  end;

  //-------------namespace: Aspose.Words.Fields----------------
  [DNTypeName('Aspose.Words.Fields.IComparisonExpressionEvaluator')]
  DNIComparisonExpressionEvaluator = interface(DDN.mscorlib.DNObject)
  ['{BDB4A8BE-6A68-3742-ADA1-5329DA8A168E}']
  { methods } 

    function Evaluate(field: DNField; expression: DNComparisonExpression): DNComparisonEvaluationResult;

  end;

  //-------------namespace: Aspose.Words.Fields----------------
  [DNTypeName('Aspose.Words.Fields.IFieldResultFormatter')]
  DNIFieldResultFormatter = interface(DDN.mscorlib.DNObject)
  ['{97E06029-227C-364E-B0E1-9BE0B49103DC}']
  { methods } 

    function FormatNumeric(value: Double; format: string): string;
    function FormatDateTime(value: DDN.mscorlib.DNDateTime; format: string; calendarType: DNCalendarType): string;
    function Format(value: string; format: DNGeneralFormat): string; overload;
    function Format(value: Double; format: DNGeneralFormat): string; overload;

  end;

  //-------------namespace: Aspose.Words.Fields----------------
  [DNTypeName('Aspose.Words.Fields.IFieldUpdateCultureProvider')]
  DNIFieldUpdateCultureProvider = interface(DDN.mscorlib.DNObject)
  ['{835EBA32-A873-3A3E-A484-52A967203D77}']
  { methods } 

    function GetCulture(culture: string; field: DNField): DDN.mscorlib.DNCultureInfo;

  end;

  //-------------namespace: Aspose.Words.Fields----------------
  [DNTypeName('Aspose.Words.Fields.IFieldUserPromptRespondent')]
  DNIFieldUserPromptRespondent = interface(DDN.mscorlib.DNObject)
  ['{F36797B9-8E3C-3C7B-AEC4-F7433F1B74F8}']
  { methods } 

    function Respond(promptText: string; defaultResponse: string): string;

  end;

  //-------------namespace: Aspose.Words----------------
  [DNTypeName('Aspose.Words.IDocumentReaderPlugin')]
  DNIDocumentReaderPlugin = interface(DDN.mscorlib.DNObject)
  ['{9F4B5B97-7223-349C-A401-1A48BBA07C03}']
  { methods } 

    procedure Read(src: DDN.mscorlib.DNStream; loadOptions: DNLoadOptions; document: DNDocument);

  end;

  //-------------namespace: Aspose.Words----------------
  [DNTypeName('Aspose.Words.IHyphenationCallback')]
  DNIHyphenationCallback = interface(DDN.mscorlib.DNObject)
  ['{8FE5A898-05D7-3A31-BFEB-4590D9F4D257}']
  { methods } 

    procedure RequestDictionary(language: string);

  end;

  //-------------namespace: Aspose.Words----------------
  [DNTypeName('Aspose.Words.INodeChangingCallback')]
  DNINodeChangingCallback = interface(DDN.mscorlib.DNObject)
  ['{5F271C32-AF80-3ADF-BBFA-4AAB6F5DBF13}']
  { methods } 

    procedure NodeInserting(args: DNNodeChangingArgs);
    procedure NodeInserted(args: DNNodeChangingArgs);
    procedure NodeRemoving(args: DNNodeChangingArgs);
    procedure NodeRemoved(args: DNNodeChangingArgs);

  end;

  //-------------namespace: Aspose.Words----------------
  [DNTypeName('Aspose.Words.IWarningCallback')]
  DNIWarningCallback = interface(DDN.mscorlib.DNObject)
  ['{29662C09-EE27-3859-B5CD-1C2181644240}']
  { methods } 

    procedure Warning(info: DNWarningInfo);

  end;

  //-------------namespace: Aspose.Words.Layout----------------
  [DNTypeName('Aspose.Words.Layout.IPageLayoutCallback')]
  DNIPageLayoutCallback = interface(DDN.mscorlib.DNObject)
  ['{891E18AC-FBC5-3304-8653-8B4C6D28FF6A}']
  { methods } 

    procedure Notify(args: DNPageLayoutCallbackArgs);

  end;

  //-------------namespace: Aspose.Words.Loading----------------
  [DNTypeName('Aspose.Words.Loading.IResourceLoadingCallback')]
  DNIResourceLoadingCallback = interface(DDN.mscorlib.DNObject)
  ['{A2546162-6B9C-3605-9724-A653468CF0EC}']
  { methods } 

    function ResourceLoading(args: DNResourceLoadingArgs): DNResourceLoadingAction;

  end;

  //-------------namespace: Aspose.Words.MailMerging----------------
  [DNTypeName('Aspose.Words.MailMerging.IFieldMergingCallback')]
  DNIFieldMergingCallback = interface(DDN.mscorlib.DNObject)
  ['{EA71F2E8-71B5-3141-9ABB-6AAED29E71CC}']
  { methods } 

    procedure FieldMerging(args: DNFieldMergingArgs);
    procedure ImageFieldMerging(args: DNImageFieldMergingArgs);

  end;

  //-------------namespace: Aspose.Words.MailMerging----------------
  [DNTypeName('Aspose.Words.MailMerging.IMailMergeCallback')]
  DNIMailMergeCallback = interface(DDN.mscorlib.DNObject)
  ['{4854824C-F854-3B7C-AB21-DBBDD751A4E4}']
  { methods } 

    procedure TagsReplaced;

  end;

  //-------------namespace: Aspose.Words.MailMerging----------------
  [DNTypeName('Aspose.Words.MailMerging.IMailMergeDataSource')]
  DNIMailMergeDataSource = interface(DDN.mscorlib.DNObject)
  ['{0E06BFCC-D9C8-3C46-9492-D81B5491332B}']
  { getters & setters } 

    function get_TableName: string;

  { methods } 

    function MoveNext: Boolean;
    function GetValue(fieldName: string; out fieldValue: DDN.mscorlib.DNObject): Boolean;
    function GetChildDataSource(tableName: string): DNIMailMergeDataSource;

  { propertys } 

    property TableName: string read get_TableName;
  end;

  //-------------namespace: Aspose.Words.MailMerging----------------
  [DNTypeName('Aspose.Words.MailMerging.IMailMergeDataSourceRoot')]
  DNIMailMergeDataSourceRoot = interface(DDN.mscorlib.DNObject)
  ['{A23255FE-0464-36A4-BCFE-38E4C4073CEA}']
  { methods } 

    function GetDataSource(tableName: string): DNIMailMergeDataSource;

  end;

  //-------------namespace: Aspose.Words.Replacing----------------
  [DNTypeName('Aspose.Words.Replacing.IReplacingCallback')]
  DNIReplacingCallback = interface(DDN.mscorlib.DNObject)
  ['{FF0B8E19-D9B7-3495-9CD2-FB8E0D099D17}']
  { methods } 

    function Replacing(args: DNReplacingArgs): DNReplaceAction;

  end;

  //-------------namespace: Aspose.Words.Saving----------------
  [DNTypeName('Aspose.Words.Saving.ICssSavingCallback')]
  DNICssSavingCallback = interface(DDN.mscorlib.DNObject)
  ['{2847C427-25CE-3CB8-85D1-C102E440176F}']
  { methods } 

    procedure CssSaving(args: DNCssSavingArgs);

  end;

  //-------------namespace: Aspose.Words.Saving----------------
  [DNTypeName('Aspose.Words.Saving.IDocumentPartSavingCallback')]
  DNIDocumentPartSavingCallback = interface(DDN.mscorlib.DNObject)
  ['{16EC42F9-029C-3185-9A3B-4B587C995F24}']
  { methods } 

    procedure DocumentPartSaving(args: DNDocumentPartSavingArgs);

  end;

  //-------------namespace: Aspose.Words.Saving----------------
  [DNTypeName('Aspose.Words.Saving.IFontSavingCallback')]
  DNIFontSavingCallback = interface(DDN.mscorlib.DNObject)
  ['{489BB40F-AED0-316E-9308-2D95652FA990}']
  { methods } 

    procedure FontSaving(args: DNFontSavingArgs);

  end;

  //-------------namespace: Aspose.Words.Saving----------------
  [DNTypeName('Aspose.Words.Saving.IImageSavingCallback')]
  DNIImageSavingCallback = interface(DDN.mscorlib.DNObject)
  ['{D8C578B7-7378-3897-8D13-31B3372593D8}']
  { methods } 

    procedure ImageSaving(args: DNImageSavingArgs);

  end;

  //-------------namespace: Aspose.Words.Saving----------------
  [DNTypeName('Aspose.Words.Saving.IPageSavingCallback')]
  DNIPageSavingCallback = interface(DDN.mscorlib.DNObject)
  ['{E7399323-579A-3523-8D78-FCCD043DA3DD}']
  { methods } 

    procedure PageSaving(args: DNPageSavingArgs);

  end;

  //-------------namespace: Aspose.Words.Saving----------------
  [DNTypeName('Aspose.Words.Saving.IResourceSavingCallback')]
  DNIResourceSavingCallback = interface(DDN.mscorlib.DNObject)
  ['{A7400D28-517F-3EC3-8BF2-6783ECC6A626}']
  { methods } 

    procedure ResourceSaving(args: DNResourceSavingArgs);

  end;

  //-------------namespace: Aspose.Words.Shaping----------------
  [DNTypeName('Aspose.Words.Shaping.ITextShaperFactory')]
  DNITextShaperFactory = interface(DDN.mscorlib.DNObject)
  ['{70F491F8-4760-3E37-8A21-20C3293D4C4D}']
  { methods } 

    function GetTextShaper(fontPath: string; faceIndex: Int32): DNITextShaper; overload;
    function GetTextShaper(fontId: string; fontBlob: TArray<Byte>; faceIndex: Int32): DNITextShaper; overload;

  end;

  //-------------namespace: Aspose.Words.Shaping----------------
  [DNTypeName('Aspose.Words.Shaping.ITextShaper')]
  DNITextShaper = interface(DDN.mscorlib.DNIDisposable)
  ['{54342F49-90D6-36F7-A47B-DDE50D7A558C}']
  { methods } 

    function ShapeText(runs: TArray<string>; direction: DNDirection; script: DNUnicodeScript; fontFeatures: TArray<DNFontFeature>): TArray<TArray<DNCluster>>;

  end;

  //-------------namespace: Aspose.Words----------------
  DNBookmarkClass = interface(DDN.mscorlib.DNObjectClass)
  ['{43AEC448-050E-59CB-9120-69177BD4F172}']
  end;

  [DNTypeName('Aspose.Words.Bookmark')]
  DNBookmark = interface(DDN.mscorlib.DNObject)
  ['{CFD911E7-64F8-36B0-B4D4-E8EBD37442F9}']
  { getters & setters } 

    function get_Name: string;
    procedure set_Name(value: string);
    function get_Text: string;
    procedure set_Text(value: string);
    function get_BookmarkStart: DNBookmarkStart;
    function get_BookmarkEnd: DNBookmarkEnd;
    function get_IsColumn: Boolean;
    function get_FirstColumn: Int32;
    function get_LastColumn: Int32;

  { methods } 

    procedure Remove;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Name: string read get_Name write set_Name;
    property Text: string read get_Text write set_Text;
    property BookmarkStart: DNBookmarkStart read get_BookmarkStart;
    property BookmarkEnd: DNBookmarkEnd read get_BookmarkEnd;
    property IsColumn: Boolean read get_IsColumn;
    property FirstColumn: Int32 read get_FirstColumn;
    property LastColumn: Int32 read get_LastColumn;
  end;

  TDNBookmark = class(TDNGenericImport<DNBookmarkClass, DNBookmark>) end;

  //-------------namespace: Aspose.Words----------------
  DNBookmarkCollectionClass = interface(DNObjectClass)
  ['{2FFA0F26-E1F2-5B05-9F70-23EFEB5914BF}']
  end;

  [DNTypeName('Aspose.Words.BookmarkCollection')]
  DNBookmarkCollection = interface(DDN.mscorlib.DNIEnumerable)
  ['{FA9215EE-0796-354E-B443-C79FBF4B479E}']
  { getters & setters } 

    function get_Count: Int32;
    function get_Item(index: Int32): DNBookmark; overload;
    function get_Item(bookmarkName: string): DNBookmark; overload;

  { methods } 

    procedure Remove(bookmark: DNBookmark); overload;
    procedure Remove(bookmarkName: string); overload;
    procedure RemoveAt(index: Int32);
    procedure Clear;
    function GetEnumerator: DDN.mscorlib.DNIEnumerator<DNBookmark>;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Count: Int32 read get_Count;
    property Item[index: Int32]: DNBookmark read get_Item; default;
    property Item[bookmarkName: string]: DNBookmark read get_Item; default;
  end;

  TDNBookmarkCollection = class(TDNGenericImport<DNBookmarkCollectionClass, DNBookmarkCollection>) end;

  //-------------namespace: Aspose.Words----------------
  DNBorderCollectionClass = interface(DNObjectClass)
  ['{03A74EFA-6854-5DE1-B0BF-AC310B88982E}']
  end;

  [DNTypeName('Aspose.Words.BorderCollection')]
  DNBorderCollection = interface(DDN.mscorlib.DNIEnumerable)
  ['{0962E84A-ED6F-3E5D-BE9B-4BBC1DA3DE43}']
  { getters & setters } 

    function get_Item(borderType: DNBorderType): DNBorder; overload;
    function get_Item(index: Int32): DNBorder; overload;
    function get_Left: DNBorder;
    function get_Right: DNBorder;
    function get_Top: DNBorder;
    function get_Bottom: DNBorder;
    function get_Horizontal: DNBorder;
    function get_Vertical: DNBorder;
    function get_Count: Int32;
    function get_LineWidth: Double;
    procedure set_LineWidth(value: Double);
    function get_LineStyle: DNLineStyle;
    procedure set_LineStyle(value: DNLineStyle);
    function get_Color: DDN.System.Drawing.DNColor;
    procedure set_Color(value: DDN.System.Drawing.DNColor);
    function get_DistanceFromText: Double;
    procedure set_DistanceFromText(value: Double);
    function get_Shadow: Boolean;
    procedure set_Shadow(value: Boolean);

  { methods } 

    function Equals(brColl: DNBorderCollection): Boolean; overload;
    procedure ClearFormatting;
    function GetEnumerator: DDN.mscorlib.DNIEnumerator<DNBorder>;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean; overload;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Item[borderType: DNBorderType]: DNBorder read get_Item; default;
    property Item[index: Int32]: DNBorder read get_Item; default;
    property Left: DNBorder read get_Left;
    property Right: DNBorder read get_Right;
    property Top: DNBorder read get_Top;
    property Bottom: DNBorder read get_Bottom;
    property Horizontal: DNBorder read get_Horizontal;
    property Vertical: DNBorder read get_Vertical;
    property Count: Int32 read get_Count;
    property LineWidth: Double read get_LineWidth write set_LineWidth;
    property LineStyle: DNLineStyle read get_LineStyle write set_LineStyle;
    property Color: DDN.System.Drawing.DNColor read get_Color write set_Color;
    property DistanceFromText: Double read get_DistanceFromText write set_DistanceFromText;
    property Shadow: Boolean read get_Shadow write set_Shadow;
  end;

  TDNBorderCollection = class(TDNGenericImport<DNBorderCollectionClass, DNBorderCollection>) end;

  //-------------namespace: Aspose.Words----------------
  DNBuildVersionInfoClass = interface(DDN.mscorlib.DNObjectClass)
  ['{71F3FA54-873E-5806-91E9-8ABDD4097372}']
  { static getter & setter } 

    {class} function get_Product: string;
    {class} function get_Version: string;

  { static propertys } 

    {class} property Product: string read get_Product;
    {class} property Version: string read get_Version;
  end;

  [DNTypeName('Aspose.Words.BuildVersionInfo')]
  DNBuildVersionInfo = interface(DDN.mscorlib.DNObject)
  ['{4B06F422-6C19-30EF-A905-A8B44C118369}']
  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNBuildVersionInfo = class(TDNGenericImport<DNBuildVersionInfoClass, DNBuildVersionInfo>) end;

  //-------------namespace: Aspose.Words----------------
  DNCleanupOptionsClass = interface(DDN.mscorlib.DNObjectClass)
  ['{02D58285-2A26-5A97-85AF-8818BEB9EE4E}']
  { constructors } 

    {class} function init: DNCleanupOptions;

  end;

  [DNTypeName('Aspose.Words.CleanupOptions')]
  DNCleanupOptions = interface(DDN.mscorlib.DNObject)
  ['{249523B2-5932-307E-B734-31769661E7D9}']
  { getters & setters } 

    function get_UnusedStyles: Boolean;
    procedure set_UnusedStyles(value: Boolean);
    function get_UnusedLists: Boolean;
    procedure set_UnusedLists(value: Boolean);
    function get_DuplicateStyle: Boolean;
    procedure set_DuplicateStyle(value: Boolean);
    function get_UnusedBuiltinStyles: Boolean;
    procedure set_UnusedBuiltinStyles(value: Boolean);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property UnusedStyles: Boolean read get_UnusedStyles write set_UnusedStyles;
    property UnusedLists: Boolean read get_UnusedLists write set_UnusedLists;
    property DuplicateStyle: Boolean read get_DuplicateStyle write set_DuplicateStyle;
    property UnusedBuiltinStyles: Boolean read get_UnusedBuiltinStyles write set_UnusedBuiltinStyles;
  end;

  TDNCleanupOptions = class(TDNGenericImport<DNCleanupOptionsClass, DNCleanupOptions>) end;

  //-------------namespace: Aspose.Words----------------
  DNComHelperClass = interface(DDN.mscorlib.DNObjectClass)
  ['{87041206-2EDF-5C05-9E17-133EF2116868}']
  { constructors } 

    {class} function init: DNComHelper;

  end;

  [DNTypeName('Aspose.Words.ComHelper')]
  DNComHelper = interface(DDN.mscorlib.DNObject)
  ['{EE4C722F-91C2-3CDC-B5BA-C6D600A9E961}']
  { methods } 

    function Open(fileName: string): DNDocument; overload;
    function Open(stream: DDN.mscorlib.DNStream): DNDocument; overload;
    function OpenIStream(stream: DDN.mscorlib.DNIStream): DNDocument;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNComHelper = class(TDNGenericImport<DNComHelperClass, DNComHelper>) end;

  //-------------namespace: Aspose.Words.Comparing----------------
  DNCompareOptionsClass = interface(DDN.mscorlib.DNObjectClass)
  ['{DBC4FB73-B420-5613-A13E-FA9E0522318E}']
  { constructors } 

    {class} function init: DNCompareOptions;

  end;

  [DNTypeName('Aspose.Words.Comparing.CompareOptions')]
  DNCompareOptions = interface(DDN.mscorlib.DNObject)
  ['{F3CA892E-8D71-3A0F-BA3C-A8D699D5AAC8}']
  { getters & setters } 

    function get_IgnoreCaseChanges: Boolean;
    procedure set_IgnoreCaseChanges(value: Boolean);
    function get_IgnoreTables: Boolean;
    procedure set_IgnoreTables(value: Boolean);
    function get_IgnoreFields: Boolean;
    procedure set_IgnoreFields(value: Boolean);
    function get_IgnoreFootnotes: Boolean;
    procedure set_IgnoreFootnotes(value: Boolean);
    function get_IgnoreComments: Boolean;
    procedure set_IgnoreComments(value: Boolean);
    function get_IgnoreTextboxes: Boolean;
    procedure set_IgnoreTextboxes(value: Boolean);
    function get_IgnoreFormatting: Boolean;
    procedure set_IgnoreFormatting(value: Boolean);
    function get_IgnoreHeadersAndFooters: Boolean;
    procedure set_IgnoreHeadersAndFooters(value: Boolean);
    function get_Target: DNComparisonTargetType;
    procedure set_Target(value: DNComparisonTargetType);
    function get_Granularity: DNGranularity;
    procedure set_Granularity(value: DNGranularity);
    function get_IgnoreDmlUniqueId: Boolean;
    procedure set_IgnoreDmlUniqueId(value: Boolean);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property IgnoreCaseChanges: Boolean read get_IgnoreCaseChanges write set_IgnoreCaseChanges;
    property IgnoreTables: Boolean read get_IgnoreTables write set_IgnoreTables;
    property IgnoreFields: Boolean read get_IgnoreFields write set_IgnoreFields;
    property IgnoreFootnotes: Boolean read get_IgnoreFootnotes write set_IgnoreFootnotes;
    property IgnoreComments: Boolean read get_IgnoreComments write set_IgnoreComments;
    property IgnoreTextboxes: Boolean read get_IgnoreTextboxes write set_IgnoreTextboxes;
    property IgnoreFormatting: Boolean read get_IgnoreFormatting write set_IgnoreFormatting;
    property IgnoreHeadersAndFooters: Boolean read get_IgnoreHeadersAndFooters write set_IgnoreHeadersAndFooters;
    property Target: DNComparisonTargetType read get_Target write set_Target;
    property Granularity: DNGranularity read get_Granularity write set_Granularity;
    property IgnoreDmlUniqueId: Boolean read get_IgnoreDmlUniqueId write set_IgnoreDmlUniqueId;
  end;

  TDNCompareOptions = class(TDNGenericImport<DNCompareOptionsClass, DNCompareOptions>) end;

  //-------------namespace: Aspose.Words----------------
  DNConditionalStyleClass = interface(DDN.mscorlib.DNObjectClass)
  ['{C8CD1329-F7AD-56A0-80AF-C20220C06048}']
  end;

  [DNTypeName('Aspose.Words.ConditionalStyle')]
  DNConditionalStyle = interface(DDN.mscorlib.DNObject)
  ['{F4DE8FB8-1690-3A1F-8B7A-4DAB17519A7C}']
  { getters & setters } 

    function get_ParagraphFormat: DNParagraphFormat;
    function get_Font: DNFont;
    function get_Shading: DNShading;
    function get_Borders: DNBorderCollection;
    function get_LeftPadding: Double;
    procedure set_LeftPadding(value: Double);
    function get_RightPadding: Double;
    procedure set_RightPadding(value: Double);
    function get_TopPadding: Double;
    procedure set_TopPadding(value: Double);
    function get_BottomPadding: Double;
    procedure set_BottomPadding(value: Double);
    function get_Type: DNConditionalStyleType;

  { methods } 

    procedure ClearFormatting;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property ParagraphFormat: DNParagraphFormat read get_ParagraphFormat;
    property Font: DNFont read get_Font;
    property Shading: DNShading read get_Shading;
    property Borders: DNBorderCollection read get_Borders;
    property LeftPadding: Double read get_LeftPadding write set_LeftPadding;
    property RightPadding: Double read get_RightPadding write set_RightPadding;
    property TopPadding: Double read get_TopPadding write set_TopPadding;
    property BottomPadding: Double read get_BottomPadding write set_BottomPadding;
    property &Type: DNConditionalStyleType read get_Type;
  end;

  TDNConditionalStyle = class(TDNGenericImport<DNConditionalStyleClass, DNConditionalStyle>) end;

  //-------------namespace: Aspose.Words----------------
  DNConditionalStyleCollectionClass = interface(DNObjectClass)
  ['{7DBB4BDD-E1BD-5F9C-8EC0-CE65D2193603}']
  end;

  [DNTypeName('Aspose.Words.ConditionalStyleCollection')]
  DNConditionalStyleCollection = interface(DDN.mscorlib.DNIEnumerable)
  ['{BFECBE31-AD54-3C87-8717-F2DA7E478E10}']
  { getters & setters } 

    function get_Item(conditionalStyleType: DNConditionalStyleType): DNConditionalStyle; overload;
    function get_Item(index: Int32): DNConditionalStyle; overload;
    function get_Count: Int32;
    function get_FirstRow: DNConditionalStyle;
    function get_FirstColumn: DNConditionalStyle;
    function get_LastRow: DNConditionalStyle;
    function get_LastColumn: DNConditionalStyle;
    function get_OddRowBanding: DNConditionalStyle;
    function get_OddColumnBanding: DNConditionalStyle;
    function get_EvenRowBanding: DNConditionalStyle;
    function get_EvenColumnBanding: DNConditionalStyle;
    function get_TopLeftCell: DNConditionalStyle;
    function get_TopRightCell: DNConditionalStyle;
    function get_BottomLeftCell: DNConditionalStyle;
    function get_BottomRightCell: DNConditionalStyle;

  { methods } 

    procedure ClearFormatting;
    function GetEnumerator: DDN.mscorlib.DNIEnumerator<DNConditionalStyle>;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Item[conditionalStyleType: DNConditionalStyleType]: DNConditionalStyle read get_Item; default;
    property Item[index: Int32]: DNConditionalStyle read get_Item; default;
    property Count: Int32 read get_Count;
    property FirstRow: DNConditionalStyle read get_FirstRow;
    property FirstColumn: DNConditionalStyle read get_FirstColumn;
    property LastRow: DNConditionalStyle read get_LastRow;
    property LastColumn: DNConditionalStyle read get_LastColumn;
    property OddRowBanding: DNConditionalStyle read get_OddRowBanding;
    property OddColumnBanding: DNConditionalStyle read get_OddColumnBanding;
    property EvenRowBanding: DNConditionalStyle read get_EvenRowBanding;
    property EvenColumnBanding: DNConditionalStyle read get_EvenColumnBanding;
    property TopLeftCell: DNConditionalStyle read get_TopLeftCell;
    property TopRightCell: DNConditionalStyle read get_TopRightCell;
    property BottomLeftCell: DNConditionalStyle read get_BottomLeftCell;
    property BottomRightCell: DNConditionalStyle read get_BottomRightCell;
  end;

  TDNConditionalStyleCollection = class(TDNGenericImport<DNConditionalStyleCollectionClass, DNConditionalStyleCollection>) end;

  //-------------namespace: Aspose.Words----------------
  DNControlCharClass = interface(DDN.mscorlib.DNObjectClass)
  ['{3BBA41D5-FD36-5EAA-9EA9-684BD011DF07}']
  { static fields getter & setter } 

   function __fakeFieldGet_Cell: string;
   function __fakeFieldGet_Tab: string;
   function __fakeFieldGet_Lf: string;
   function __fakeFieldGet_LineFeed: string;
   function __fakeFieldGet_LineBreak: string;
   function __fakeFieldGet_PageBreak: string;
   function __fakeFieldGet_SectionBreak: string;
   function __fakeFieldGet_Cr: string;
   function __fakeFieldGet_ParagraphBreak: string;
   function __fakeFieldGet_ColumnBreak: string;
   function __fakeFieldGet_CrLf: string;
   function __fakeFieldGet_NonBreakingSpace: string;
   function __fakeFieldGet_CellChar: Char;
   function __fakeFieldGet_TabChar: Char;
   function __fakeFieldGet_LineFeedChar: Char;
   function __fakeFieldGet_LineBreakChar: Char;
   function __fakeFieldGet_PageBreakChar: Char;
   function __fakeFieldGet_SectionBreakChar: Char;
   function __fakeFieldGet_ParagraphBreakChar: Char;
   function __fakeFieldGet_ColumnBreakChar: Char;
   function __fakeFieldGet_FieldStartChar: Char;
   function __fakeFieldGet_FieldSeparatorChar: Char;
   function __fakeFieldGet_FieldEndChar: Char;
   function __fakeFieldGet_NonBreakingHyphenChar: Char;
   function __fakeFieldGet_OptionalHyphenChar: Char;
   function __fakeFieldGet_SpaceChar: Char;
   function __fakeFieldGet_NonBreakingSpaceChar: Char;
   function __fakeFieldGet_DefaultTextInputChar: Char;

  { static fields } 

    {class} property Cell: string read __fakeFieldGet_Cell;
    {class} property Tab: string read __fakeFieldGet_Tab;
    {class} property Lf: string read __fakeFieldGet_Lf;
    {class} property LineFeed: string read __fakeFieldGet_LineFeed;
    {class} property LineBreak: string read __fakeFieldGet_LineBreak;
    {class} property PageBreak: string read __fakeFieldGet_PageBreak;
    {class} property SectionBreak: string read __fakeFieldGet_SectionBreak;
    {class} property Cr: string read __fakeFieldGet_Cr;
    {class} property ParagraphBreak: string read __fakeFieldGet_ParagraphBreak;
    {class} property ColumnBreak: string read __fakeFieldGet_ColumnBreak;
    {class} property CrLf: string read __fakeFieldGet_CrLf;
    {class} property NonBreakingSpace: string read __fakeFieldGet_NonBreakingSpace;
    {class} property CellChar: Char read __fakeFieldGet_CellChar;
    {class} property TabChar: Char read __fakeFieldGet_TabChar;
    {class} property LineFeedChar: Char read __fakeFieldGet_LineFeedChar;
    {class} property LineBreakChar: Char read __fakeFieldGet_LineBreakChar;
    {class} property PageBreakChar: Char read __fakeFieldGet_PageBreakChar;
    {class} property SectionBreakChar: Char read __fakeFieldGet_SectionBreakChar;
    {class} property ParagraphBreakChar: Char read __fakeFieldGet_ParagraphBreakChar;
    {class} property ColumnBreakChar: Char read __fakeFieldGet_ColumnBreakChar;
    {class} property FieldStartChar: Char read __fakeFieldGet_FieldStartChar;
    {class} property FieldSeparatorChar: Char read __fakeFieldGet_FieldSeparatorChar;
    {class} property FieldEndChar: Char read __fakeFieldGet_FieldEndChar;
    {class} property NonBreakingHyphenChar: Char read __fakeFieldGet_NonBreakingHyphenChar;
    {class} property OptionalHyphenChar: Char read __fakeFieldGet_OptionalHyphenChar;
    {class} property SpaceChar: Char read __fakeFieldGet_SpaceChar;
    {class} property NonBreakingSpaceChar: Char read __fakeFieldGet_NonBreakingSpaceChar;
    {class} property DefaultTextInputChar: Char read __fakeFieldGet_DefaultTextInputChar;

  end;

  [DNTypeName('Aspose.Words.ControlChar')]
  DNControlChar = interface(DDN.mscorlib.DNObject)
  ['{A3A4C162-93EE-3557-8FF3-B24C00E3E5D2}']
  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNControlChar = class(TDNGenericImport<DNControlCharClass, DNControlChar>)
  public const
   CellChar = #7;
   TabChar = #9;
   LineFeedChar = #10;
   LineBreakChar = #11;
   PageBreakChar = #12;
   SectionBreakChar = #12;
   ParagraphBreakChar = #13;
   ColumnBreakChar = #14;
   FieldStartChar = #19;
   FieldSeparatorChar = #20;
   FieldEndChar = #21;
   NonBreakingHyphenChar = #30;
   OptionalHyphenChar = #31;
   SpaceChar = #32;
   NonBreakingSpaceChar = #160;
   DefaultTextInputChar = #8194;
  end;

  //-------------namespace: Aspose.Words----------------
  DNConvertUtilClass = interface(DDN.mscorlib.DNObjectClass)
  ['{281DA24C-F1B2-5C43-BDE6-3C94C94D4A75}']
  { static methods } 

    {class} function PointToPixel(points: Double): Double; overload;
    {class} function PointToPixel(points: Double; resolution: Double): Double; overload;
    {class} function PixelToPoint(pixels: Double): Double; overload;
    {class} function PixelToPoint(pixels: Double; resolution: Double): Double; overload;
    {class} function PixelToNewDpi(pixels: Double; oldDpi: Double; newDpi: Double): Int32;
    {class} function InchToPoint(inches: Double): Double;
    {class} function PointToInch(points: Double): Double;
    {class} function MillimeterToPoint(millimeters: Double): Double;

  end;

  [DNTypeName('Aspose.Words.ConvertUtil')]
  DNConvertUtil = interface(DDN.mscorlib.DNObject)
  ['{6BBCC53D-4605-3326-A641-EFC1F8243239}']
  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNConvertUtil = class(TDNGenericImport<DNConvertUtilClass, DNConvertUtil>) end;

  //-------------namespace: Aspose.Words.DigitalSignatures----------------
  DNCertificateHolderClass = interface(DDN.mscorlib.DNObjectClass)
  ['{0F7FF78E-89BD-5AE5-B79C-84D9ABB4CE77}']
  { static methods } 

    {class} function Create(certBytes: TArray<Byte>; password: DDN.mscorlib.DNSecureString): DNCertificateHolder; overload;
    {class} function Create(certBytes: TArray<Byte>; password: string): DNCertificateHolder; overload;
    {class} function Create(fileName: string; password: string): DNCertificateHolder; overload;
    {class} function Create(fileName: string; password: string; alias: string): DNCertificateHolder; overload;

  end;

  [DNTypeName('Aspose.Words.DigitalSignatures.CertificateHolder')]
  DNCertificateHolder = interface(DDN.mscorlib.DNObject)
  ['{D8247497-DB88-3EE7-9B46-79E1F9570335}']
  { getters & setters } 

    function get_Certificate: DDN.System.DNX509Certificate2;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Certificate: DDN.System.DNX509Certificate2 read get_Certificate;
  end;

  TDNCertificateHolder = class(TDNGenericImport<DNCertificateHolderClass, DNCertificateHolder>) end;

  //-------------namespace: Aspose.Words.DigitalSignatures----------------
  DNDigitalSignatureClass = interface(DDN.mscorlib.DNObjectClass)
  ['{71A100C2-B423-545D-9080-1B04885C8474}']
  end;

  [DNTypeName('Aspose.Words.DigitalSignatures.DigitalSignature')]
  DNDigitalSignature = interface(DDN.mscorlib.DNObject)
  ['{BC6E8F6B-92DC-3CC1-BDD6-D898F72C81AA}']
  { getters & setters } 

    function get_SignatureType: DNDigitalSignatureType;
    function get_SignTime: DDN.mscorlib.DNDateTime;
    function get_Comments: string;
    function get_SubjectName: string;
    function get_IssuerName: string;
    function get_IsValid: Boolean;
    function get_CertificateHolder: DNCertificateHolder;

  { methods } 

    function ToString: string;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    property SignatureType: DNDigitalSignatureType read get_SignatureType;
    property SignTime: DDN.mscorlib.DNDateTime read get_SignTime;
    property Comments: string read get_Comments;
    property SubjectName: string read get_SubjectName;
    property IssuerName: string read get_IssuerName;
    property IsValid: Boolean read get_IsValid;
    property CertificateHolder: DNCertificateHolder read get_CertificateHolder;
  end;

  TDNDigitalSignature = class(TDNGenericImport<DNDigitalSignatureClass, DNDigitalSignature>) end;

  //-------------namespace: Aspose.Words.DigitalSignatures----------------
  DNDigitalSignatureCollectionClass = interface(DNObjectClass)
  ['{2EB7ED37-40D8-5025-929A-60CEBE106FEC}']
  { constructors } 

    {class} function init: DNDigitalSignatureCollection;

  end;

  [DNTypeName('Aspose.Words.DigitalSignatures.DigitalSignatureCollection')]
  DNDigitalSignatureCollection = interface(DDN.mscorlib.DNIEnumerable)
  ['{DA3CCA37-3AE8-3B09-9527-FA34D7FA7E85}']
  { getters & setters } 

    function get_IsValid: Boolean;
    function get_Count: Int32;
    function get_Item(index: Int32): DNDigitalSignature;

  { methods } 

    function GetEnumerator: DDN.mscorlib.DNIEnumerator<DNDigitalSignature>;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property IsValid: Boolean read get_IsValid;
    property Count: Int32 read get_Count;
    property Item[index: Int32]: DNDigitalSignature read get_Item; default;
  end;

  TDNDigitalSignatureCollection = class(TDNGenericImport<DNDigitalSignatureCollectionClass, DNDigitalSignatureCollection>) end;

  //-------------namespace: Aspose.Words.DigitalSignatures----------------
  DNDigitalSignatureUtilClass = interface(DDN.mscorlib.DNObjectClass)
  ['{F07A1E73-E2BC-5292-B508-AAAE96DD6D9D}']
  { static methods } 

    {class} procedure Sign(srcStream: DDN.mscorlib.DNStream; dstStream: DDN.mscorlib.DNStream; certHolder: DNCertificateHolder; signOptions: DNSignOptions); overload;
    {class} procedure Sign(srcFileName: string; dstFileName: string; certHolder: DNCertificateHolder; signOptions: DNSignOptions); overload;
    {class} procedure Sign(srcStream: DDN.mscorlib.DNStream; dstStream: DDN.mscorlib.DNStream; certHolder: DNCertificateHolder); overload;
    {class} procedure Sign(srcFileName: string; dstFileName: string; certHolder: DNCertificateHolder); overload;
    {class} procedure RemoveAllSignatures(srcFileName: string; dstFileName: string); overload;
    {class} procedure RemoveAllSignatures(srcStream: DDN.mscorlib.DNStream; dstStream: DDN.mscorlib.DNStream); overload;
    {class} function LoadSignatures(fileName: string): DNDigitalSignatureCollection; overload;
    {class} function LoadSignatures(stream: DDN.mscorlib.DNStream): DNDigitalSignatureCollection; overload;

  end;

  [DNTypeName('Aspose.Words.DigitalSignatures.DigitalSignatureUtil')]
  DNDigitalSignatureUtil = interface(DDN.mscorlib.DNObject)
  ['{01413692-5DB2-343B-9F33-D523120B3D4F}']
  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNDigitalSignatureUtil = class(TDNGenericImport<DNDigitalSignatureUtilClass, DNDigitalSignatureUtil>) end;

  //-------------namespace: Aspose.Words.DigitalSignatures----------------
  DNSignOptionsClass = interface(DDN.mscorlib.DNObjectClass)
  ['{3D5604AE-10A1-509A-B15E-5DAE0BB02FF6}']
  { constructors } 

    {class} function init: DNSignOptions;

  end;

  [DNTypeName('Aspose.Words.DigitalSignatures.SignOptions')]
  DNSignOptions = interface(DDN.mscorlib.DNObject)
  ['{BA08ED92-4B65-3997-8C2A-35D5BFF261F8}']
  { getters & setters } 

    function get_Comments: string;
    procedure set_Comments(value: string);
    function get_SignTime: DDN.mscorlib.DNDateTime;
    procedure set_SignTime(value: DDN.mscorlib.DNDateTime);
    function get_SignatureLineId: DDN.mscorlib.DNGuid;
    procedure set_SignatureLineId(value: DDN.mscorlib.DNGuid);
    function get_SignatureLineImage: TArray<Byte>;
    procedure set_SignatureLineImage(value: TArray<Byte>);
    function get_DecryptionPassword: string;
    procedure set_DecryptionPassword(value: string);
    function get_ProviderId: DDN.mscorlib.DNGuid;
    procedure set_ProviderId(value: DDN.mscorlib.DNGuid);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Comments: string read get_Comments write set_Comments;
    property SignTime: DDN.mscorlib.DNDateTime read get_SignTime write set_SignTime;
    property SignatureLineId: DDN.mscorlib.DNGuid read get_SignatureLineId write set_SignatureLineId;
    property SignatureLineImage: TArray<Byte> read get_SignatureLineImage write set_SignatureLineImage;
    property DecryptionPassword: string read get_DecryptionPassword write set_DecryptionPassword;
    property ProviderId: DDN.mscorlib.DNGuid read get_ProviderId write set_ProviderId;
  end;

  TDNSignOptions = class(TDNGenericImport<DNSignOptionsClass, DNSignOptions>) end;

  //-------------namespace: Aspose.Words----------------
  DNDocumentBuilderClass = interface(DDN.mscorlib.DNObjectClass)
  ['{B4E7D328-171B-573A-AE62-F34665482B6E}']
  { constructors } 

    {class} function init: DNDocumentBuilder; overload;
    {class} function init(doc: DNDocument): DNDocumentBuilder; overload;

  end;

  [DNTypeName('Aspose.Words.DocumentBuilder')]
  DNDocumentBuilder = interface(DDN.mscorlib.DNObject)
  ['{CBA946FB-3CDD-383E-9ECF-243BDF0BD1F8}']
  { getters & setters } 

    function get_Document: DNDocument;
    procedure set_Document(value: DNDocument);
    function get_Font: DNFont;
    function get_Bold: Boolean;
    procedure set_Bold(value: Boolean);
    function get_Italic: Boolean;
    procedure set_Italic(value: Boolean);
    function get_Underline: DNUnderline;
    procedure set_Underline(value: DNUnderline);
    function get_ParagraphFormat: DNParagraphFormat;
    function get_ListFormat: DNListFormat;
    function get_PageSetup: DNPageSetup;
    function get_RowFormat: DNRowFormat;
    function get_CellFormat: DNCellFormat;
    function get_IsAtStartOfParagraph: Boolean;
    function get_IsAtEndOfParagraph: Boolean;
    function get_CurrentNode: DNNode;
    function get_CurrentParagraph: DNParagraph;
    function get_CurrentStory: DNStory;
    function get_CurrentSection: DNSection;

  { methods } 

    procedure MoveToDocumentStart;
    procedure MoveToDocumentEnd;
    procedure MoveToSection(sectionIndex: Int32);
    procedure MoveToHeaderFooter(headerFooterType: DNHeaderFooterType);
    function MoveToMergeField(fieldName: string): Boolean; overload;
    function MoveToMergeField(fieldName: string; isAfter: Boolean; isDeleteField: Boolean): Boolean; overload;
    procedure MoveToField(field: DNField; isAfter: Boolean);
    function MoveToBookmark(bookmarkName: string): Boolean; overload;
    function MoveToBookmark(bookmarkName: string; isStart: Boolean; isAfter: Boolean): Boolean; overload;
    procedure MoveToParagraph(paragraphIndex: Int32; characterIndex: Int32);
    procedure MoveToCell(tableIndex: Int32; rowIndex: Int32; columnIndex: Int32; characterIndex: Int32);
    procedure MoveTo(node: DNNode);
    function DeleteRow(tableIndex: Int32; rowIndex: Int32): DNRow;
    procedure Write(text: string);
    procedure Writeln(text: string); overload;
    procedure Writeln; overload;
    function InsertParagraph: DNParagraph;
    procedure InsertStyleSeparator;
    procedure InsertBreak(breakType: DNBreakType);
    function InsertTableOfContents(switches: string): DNField;
    function InsertField(fieldType: DNFieldType; updateField: Boolean): DNField; overload;
    function InsertField(fieldCode: string): DNField; overload;
    function InsertField(fieldCode: string; fieldValue: string): DNField; overload;
    function InsertHyperlink(displayText: string; urlOrBookmark: string; isBookmark: Boolean): DNField;
    function InsertTextInput(name: string; &type: DNTextFormFieldType; format: string; fieldValue: string; maxLength: Int32): DNFormField;
    function InsertCheckBox(name: string; checkedValue: Boolean; size: Int32): DNFormField; overload;
    function InsertCheckBox(name: string; defaultValue: Boolean; checkedValue: Boolean; size: Int32): DNFormField; overload;
    function InsertComboBox(name: string; items: TArray<string>; selectedIndex: Int32): DNFormField;
    function InsertFootnote(footnoteType: DNFootnoteType; footnoteText: string): DNFootnote; overload;
    function InsertFootnote(footnoteType: DNFootnoteType; footnoteText: string; referenceMark: string): DNFootnote; overload;
    function InsertImage(image: DDN.System.Drawing.DNImage): DNShape; overload;
    function InsertImage(fileName: string): DNShape; overload;
    function InsertImage(stream: DDN.mscorlib.DNStream): DNShape; overload;
    function InsertImage(imageBytes: TArray<Byte>): DNShape; overload;
    function InsertImage(image: DDN.System.Drawing.DNImage; width: Double; height: Double): DNShape; overload;
    function InsertImage(fileName: string; width: Double; height: Double): DNShape; overload;
    function InsertImage(stream: DDN.mscorlib.DNStream; width: Double; height: Double): DNShape; overload;
    function InsertImage(imageBytes: TArray<Byte>; width: Double; height: Double): DNShape; overload;
    function InsertImage(image: DDN.System.Drawing.DNImage; horzPos: DNRelativeHorizontalPosition; left: Double; vertPos: DNRelativeVerticalPosition; top: Double; width: Double; height: Double; wrapType: DNWrapType): DNShape; overload;
    function InsertImage(fileName: string; horzPos: DNRelativeHorizontalPosition; left: Double; vertPos: DNRelativeVerticalPosition; top: Double; width: Double; height: Double; wrapType: DNWrapType): DNShape; overload;
    function InsertImage(stream: DDN.mscorlib.DNStream; horzPos: DNRelativeHorizontalPosition; left: Double; vertPos: DNRelativeVerticalPosition; top: Double; width: Double; height: Double; wrapType: DNWrapType): DNShape; overload;
    function InsertImage(imageBytes: TArray<Byte>; horzPos: DNRelativeHorizontalPosition; left: Double; vertPos: DNRelativeVerticalPosition; top: Double; width: Double; height: Double; wrapType: DNWrapType): DNShape; overload;
    function InsertOleObject(stream: DDN.mscorlib.DNStream; progId: string; asIcon: Boolean; presentation: DDN.mscorlib.DNStream): DNShape; overload;
    function InsertOleObject(fileName: string; isLinked: Boolean; asIcon: Boolean; presentation: DDN.mscorlib.DNStream): DNShape; overload;
    function InsertOleObject(fileName: string; progId: string; isLinked: Boolean; asIcon: Boolean; presentation: DDN.mscorlib.DNStream): DNShape; overload;
    function InsertOleObjectAsIcon(fileName: string; isLinked: Boolean; iconFile: string; iconCaption: string): DNShape; overload;
    function InsertOleObjectAsIcon(fileName: string; progId: string; isLinked: Boolean; iconFile: string; iconCaption: string): DNShape; overload;
    function InsertOleObjectAsIcon(stream: DDN.mscorlib.DNStream; progId: string; iconFile: string; iconCaption: string): DNShape; overload;
    procedure InsertHtml(html: string); overload;
    procedure InsertHtml(html: string; useBuilderFormatting: Boolean); overload;
    function InsertShape(shapeType: DNShapeType; width: Double; height: Double): DNShape; overload;
    function InsertShape(shapeType: DNShapeType; horzPos: DNRelativeHorizontalPosition; left: Double; vertPos: DNRelativeVerticalPosition; top: Double; width: Double; height: Double; wrapType: DNWrapType): DNShape; overload;
    function InsertChart(chartType: DNChartType; width: Double; height: Double): DNShape; overload;
    function InsertChart(chartType: DNChartType; horzPos: DNRelativeHorizontalPosition; left: Double; vertPos: DNRelativeVerticalPosition; top: Double; width: Double; height: Double; wrapType: DNWrapType): DNShape; overload;
    function InsertOnlineVideo(videoUrl: string; width: Double; height: Double): DNShape; overload;
    function InsertOnlineVideo(videoUrl: string; horzPos: DNRelativeHorizontalPosition; left: Double; vertPos: DNRelativeVerticalPosition; top: Double; width: Double; height: Double; wrapType: DNWrapType): DNShape; overload;
    function InsertOnlineVideo(videoUrl: string; videoEmbedCode: string; thumbnailImageBytes: TArray<Byte>; width: Double; height: Double): DNShape; overload;
    function InsertOnlineVideo(videoUrl: string; videoEmbedCode: string; thumbnailImageBytes: TArray<Byte>; horzPos: DNRelativeHorizontalPosition; left: Double; vertPos: DNRelativeVerticalPosition; top: Double; width: Double; height: Double; wrapType: DNWrapType): DNShape; overload;
    function InsertSignatureLine(signatureLineOptions: DNSignatureLineOptions): DNShape; overload;
    function InsertSignatureLine(signatureLineOptions: DNSignatureLineOptions; horzPos: DNRelativeHorizontalPosition; left: Double; vertPos: DNRelativeVerticalPosition; top: Double; wrapType: DNWrapType): DNShape; overload;
    function InsertHorizontalRule: DNShape;
    function InsertCell: DNCell;
    function StartTable: DNTable;
    function EndTable: DNTable;
    function EndRow: DNRow;
    function StartBookmark(bookmarkName: string): DNBookmarkStart;
    function EndBookmark(bookmarkName: string): DNBookmarkEnd;
    function StartColumnBookmark(bookmarkName: string): DNBookmarkStart;
    function EndColumnBookmark(bookmarkName: string): DNBookmarkEnd;
    function StartEditableRange: DNEditableRangeStart;
    function EndEditableRange: DNEditableRangeEnd; overload;
    function EndEditableRange(start: DNEditableRangeStart): DNEditableRangeEnd; overload;
    function InsertDocument(srcDoc: DNDocument; importFormatMode: DNImportFormatMode): DNNode; overload;
    function InsertDocument(srcDoc: DNDocument; importFormatMode: DNImportFormatMode; importFormatOptions: DNImportFormatOptions): DNNode; overload;
    procedure PushFont;
    procedure PopFont;
    procedure InsertNode(node: DNNode);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Document: DNDocument read get_Document write set_Document;
    property Font: DNFont read get_Font;
    property Bold: Boolean read get_Bold write set_Bold;
    property Italic: Boolean read get_Italic write set_Italic;
    property Underline: DNUnderline read get_Underline write set_Underline;
    property ParagraphFormat: DNParagraphFormat read get_ParagraphFormat;
    property ListFormat: DNListFormat read get_ListFormat;
    property PageSetup: DNPageSetup read get_PageSetup;
    property RowFormat: DNRowFormat read get_RowFormat;
    property CellFormat: DNCellFormat read get_CellFormat;
    property IsAtStartOfParagraph: Boolean read get_IsAtStartOfParagraph;
    property IsAtEndOfParagraph: Boolean read get_IsAtEndOfParagraph;
    property CurrentNode: DNNode read get_CurrentNode;
    property CurrentParagraph: DNParagraph read get_CurrentParagraph;
    property CurrentStory: DNStory read get_CurrentStory;
    property CurrentSection: DNSection read get_CurrentSection;
  end;

  TDNDocumentBuilder = class(TDNGenericImport<DNDocumentBuilderClass, DNDocumentBuilder>) end;

  //-------------namespace: Aspose.Words----------------
  DNDocumentVisitorClass = interface(DDN.mscorlib.DNObjectClass)
  ['{323F9143-0670-516D-9CDD-F8139610CBDF}']
  end;

  [DNTypeName('Aspose.Words.DocumentVisitor')]
  DNDocumentVisitor = interface(DDN.mscorlib.DNObject)
  ['{D85A796E-40BB-3E35-8470-5E1813082A83}']
  { methods } 

    function VisitDocumentStart(doc: DNDocument): DNVisitorAction;
    function VisitDocumentEnd(doc: DNDocument): DNVisitorAction;
    function VisitSectionStart(section: DNSection): DNVisitorAction;
    function VisitSectionEnd(section: DNSection): DNVisitorAction;
    function VisitBodyStart(body: DNBody): DNVisitorAction;
    function VisitBodyEnd(body: DNBody): DNVisitorAction;
    function VisitHeaderFooterStart(headerFooter: DNHeaderFooter): DNVisitorAction;
    function VisitHeaderFooterEnd(headerFooter: DNHeaderFooter): DNVisitorAction;
    function VisitParagraphStart(paragraph: DNParagraph): DNVisitorAction;
    function VisitParagraphEnd(paragraph: DNParagraph): DNVisitorAction;
    function VisitTableStart(table: DNTable): DNVisitorAction;
    function VisitTableEnd(table: DNTable): DNVisitorAction;
    function VisitRowStart(row: DNRow): DNVisitorAction;
    function VisitRowEnd(row: DNRow): DNVisitorAction;
    function VisitCellStart(cell: DNCell): DNVisitorAction;
    function VisitCellEnd(cell: DNCell): DNVisitorAction;
    function VisitRun(run: DNRun): DNVisitorAction;
    function VisitFieldStart(fieldStart: DNFieldStart): DNVisitorAction;
    function VisitFieldSeparator(fieldSeparator: DNFieldSeparator): DNVisitorAction;
    function VisitFieldEnd(fieldEnd: DNFieldEnd): DNVisitorAction;
    function VisitFormField(formField: DNFormField): DNVisitorAction;
    function VisitBookmarkStart(bookmarkStart: DNBookmarkStart): DNVisitorAction;
    function VisitBookmarkEnd(bookmarkEnd: DNBookmarkEnd): DNVisitorAction;
    function VisitFootnoteStart(footnote: DNFootnote): DNVisitorAction;
    function VisitFootnoteEnd(footnote: DNFootnote): DNVisitorAction;
    function VisitCommentStart(comment: DNComment): DNVisitorAction;
    function VisitCommentEnd(comment: DNComment): DNVisitorAction;
    function VisitEditableRangeStart(editableRangeStart: DNEditableRangeStart): DNVisitorAction;
    function VisitEditableRangeEnd(editableRangeEnd: DNEditableRangeEnd): DNVisitorAction;
    function VisitShapeStart(shape: DNShape): DNVisitorAction;
    function VisitShapeEnd(shape: DNShape): DNVisitorAction;
    function VisitGroupShapeStart(groupShape: DNGroupShape): DNVisitorAction;
    function VisitGroupShapeEnd(groupShape: DNGroupShape): DNVisitorAction;
    function VisitOfficeMathStart(officeMath: DNOfficeMath): DNVisitorAction;
    function VisitOfficeMathEnd(officeMath: DNOfficeMath): DNVisitorAction;
    function VisitSpecialChar(specialChar: DNSpecialChar): DNVisitorAction;
    function VisitAbsolutePositionTab(tab: DNAbsolutePositionTab): DNVisitorAction;
    function VisitSmartTagStart(smartTag: DNSmartTag): DNVisitorAction;
    function VisitSmartTagEnd(smartTag: DNSmartTag): DNVisitorAction;
    function VisitStructuredDocumentTagStart(sdt: DNStructuredDocumentTag): DNVisitorAction;
    function VisitStructuredDocumentTagEnd(sdt: DNStructuredDocumentTag): DNVisitorAction;
    function VisitGlossaryDocumentStart(glossary: DNGlossaryDocument): DNVisitorAction;
    function VisitGlossaryDocumentEnd(glossary: DNGlossaryDocument): DNVisitorAction;
    function VisitBuildingBlockStart(block: DNBuildingBlock): DNVisitorAction;
    function VisitBuildingBlockEnd(block: DNBuildingBlock): DNVisitorAction;
    function VisitCommentRangeStart(commentRangeStart: DNCommentRangeStart): DNVisitorAction;
    function VisitCommentRangeEnd(commentRangeEnd: DNCommentRangeEnd): DNVisitorAction;
    function VisitSubDocument(subDocument: DNSubDocument): DNVisitorAction;
    function VisitStructuredDocumentTagRangeStart(sdtRangeStart: DNStructuredDocumentTagRangeStart): DNVisitorAction;
    function VisitStructuredDocumentTagRangeEnd(sdtRangeEnd: DNStructuredDocumentTagRangeEnd): DNVisitorAction;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNDocumentVisitor = class(TDNGenericImport<DNDocumentVisitorClass, DNDocumentVisitor>) end;

  //-------------namespace: Aspose.Words.Drawing.Charts----------------
  DNAxisBoundClass = interface(DDN.mscorlib.DNObjectClass)
  ['{28738D18-BB5E-5EEE-91FE-8B04B7FF9062}']
  { constructors } 

    {class} function init: DNAxisBound; overload;
    {class} function init(value: Double): DNAxisBound; overload;
    {class} function init(datetime: DDN.mscorlib.DNDateTime): DNAxisBound; overload;

  end;

  [DNTypeName('Aspose.Words.Drawing.Charts.AxisBound')]
  DNAxisBound = interface(DDN.mscorlib.DNObject)
  ['{EAB4C2EF-3411-3272-8A99-4813A13B76E6}']
  { getters & setters } 

    function get_IsAuto: Boolean;
    function get_Value: Double;
    function get_ValueAsDate: DDN.mscorlib.DNDateTime;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function ToString: string;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    property IsAuto: Boolean read get_IsAuto;
    property Value: Double read get_Value;
    property ValueAsDate: DDN.mscorlib.DNDateTime read get_ValueAsDate;
  end;

  TDNAxisBound = class(TDNGenericImport<DNAxisBoundClass, DNAxisBound>) end;

  //-------------namespace: Aspose.Words.Drawing.Charts----------------
  DNAxisDisplayUnitClass = interface(DDN.mscorlib.DNObjectClass)
  ['{F194AF7F-CF69-5F09-B736-1C6BEB4E80DE}']
  { constructors } 

    {class} function init: DNAxisDisplayUnit;

  end;

  [DNTypeName('Aspose.Words.Drawing.Charts.AxisDisplayUnit')]
  DNAxisDisplayUnit = interface(DDN.mscorlib.DNObject)
  ['{EA7634FD-7808-3D58-831F-54635B759846}']
  { getters & setters } 

    function get_Unit: DNAxisBuiltInUnit;
    procedure set_Unit(value: DNAxisBuiltInUnit);
    function get_CustomUnit: Double;
    procedure set_CustomUnit(value: Double);
    function get_Document: DNDocumentBase;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property &Unit: DNAxisBuiltInUnit read get_Unit write set_Unit;
    property CustomUnit: Double read get_CustomUnit write set_CustomUnit;
    property Document: DNDocumentBase read get_Document;
  end;

  TDNAxisDisplayUnit = class(TDNGenericImport<DNAxisDisplayUnitClass, DNAxisDisplayUnit>) end;

  //-------------namespace: Aspose.Words.Drawing.Charts----------------
  DNAxisScalingClass = interface(DDN.mscorlib.DNObjectClass)
  ['{5FC90868-C377-52A2-B458-F6BF5DCCDFF9}']
  { constructors } 

    {class} function init: DNAxisScaling;

  end;

  [DNTypeName('Aspose.Words.Drawing.Charts.AxisScaling')]
  DNAxisScaling = interface(DDN.mscorlib.DNObject)
  ['{836D6C82-28F2-3743-9A14-5E623546A222}']
  { getters & setters } 

    function get_Type: DNAxisScaleType;
    procedure set_Type(value: DNAxisScaleType);
    function get_LogBase: Double;
    procedure set_LogBase(value: Double);
    function get_Minimum: DNAxisBound;
    procedure set_Minimum(value: DNAxisBound);
    function get_Maximum: DNAxisBound;
    procedure set_Maximum(value: DNAxisBound);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property &Type: DNAxisScaleType read get_Type write set_Type;
    property LogBase: Double read get_LogBase write set_LogBase;
    property Minimum: DNAxisBound read get_Minimum write set_Minimum;
    property Maximum: DNAxisBound read get_Maximum write set_Maximum;
  end;

  TDNAxisScaling = class(TDNGenericImport<DNAxisScalingClass, DNAxisScaling>) end;

  //-------------namespace: Aspose.Words.Drawing.Charts----------------
  DNChartClass = interface(DDN.mscorlib.DNObjectClass)
  ['{8C5ED8B4-A909-52CB-AAB1-DE13A16CB6A2}']
  end;

  [DNTypeName('Aspose.Words.Drawing.Charts.Chart')]
  DNChart = interface(DDN.mscorlib.DNObject)
  ['{6DC43F75-51E2-37E8-B539-5ACB15C8C080}']
  { getters & setters } 

    function get_Series: DNChartSeriesCollection;
    function get_Title: DNChartTitle;
    function get_Legend: DNChartLegend;
    function get_AxisX: DNChartAxis;
    function get_AxisY: DNChartAxis;
    function get_AxisZ: DNChartAxis;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Series: DNChartSeriesCollection read get_Series;
    property Title: DNChartTitle read get_Title;
    property Legend: DNChartLegend read get_Legend;
    property AxisX: DNChartAxis read get_AxisX;
    property AxisY: DNChartAxis read get_AxisY;
    property AxisZ: DNChartAxis read get_AxisZ;
  end;

  TDNChart = class(TDNGenericImport<DNChartClass, DNChart>) end;

  //-------------namespace: Aspose.Words.Drawing.Charts----------------
  DNChartAxisClass = interface(DDN.mscorlib.DNObjectClass)
  ['{1685D859-DA02-53E3-BB04-B256B973F0D8}']
  end;

  [DNTypeName('Aspose.Words.Drawing.Charts.ChartAxis')]
  DNChartAxis = interface(DDN.mscorlib.DNObject)
  ['{2445888D-0C29-3754-9E90-2F4E3EA9EC51}']
  { getters & setters } 

    function get_Type: DNChartAxisType;
    function get_CategoryType: DNAxisCategoryType;
    procedure set_CategoryType(value: DNAxisCategoryType);
    function get_Crosses: DNAxisCrosses;
    procedure set_Crosses(value: DNAxisCrosses);
    function get_CrossesAt: Double;
    procedure set_CrossesAt(value: Double);
    function get_ReverseOrder: Boolean;
    procedure set_ReverseOrder(value: Boolean);
    function get_MajorTickMark: DNAxisTickMark;
    procedure set_MajorTickMark(value: DNAxisTickMark);
    function get_MinorTickMark: DNAxisTickMark;
    procedure set_MinorTickMark(value: DNAxisTickMark);
    function get_TickLabelPosition: DNAxisTickLabelPosition;
    procedure set_TickLabelPosition(value: DNAxisTickLabelPosition);
    function get_MajorUnit: Double;
    procedure set_MajorUnit(value: Double);
    function get_MajorUnitIsAuto: Boolean;
    procedure set_MajorUnitIsAuto(value: Boolean);
    function get_MajorUnitScale: DNAxisTimeUnit;
    procedure set_MajorUnitScale(value: DNAxisTimeUnit);
    function get_MinorUnit: Double;
    procedure set_MinorUnit(value: Double);
    function get_MinorUnitIsAuto: Boolean;
    procedure set_MinorUnitIsAuto(value: Boolean);
    function get_MinorUnitScale: DNAxisTimeUnit;
    procedure set_MinorUnitScale(value: DNAxisTimeUnit);
    function get_BaseTimeUnit: DNAxisTimeUnit;
    procedure set_BaseTimeUnit(value: DNAxisTimeUnit);
    function get_NumberFormat: DNChartNumberFormat;
    function get_TickLabelOffset: Int32;
    procedure set_TickLabelOffset(value: Int32);
    function get_DisplayUnit: DNAxisDisplayUnit;
    function get_AxisBetweenCategories: Boolean;
    procedure set_AxisBetweenCategories(value: Boolean);
    function get_Scaling: DNAxisScaling;
    function get_TickLabelSpacing: Int32;
    procedure set_TickLabelSpacing(value: Int32);
    function get_TickLabelSpacingIsAuto: Boolean;
    procedure set_TickLabelSpacingIsAuto(value: Boolean);
    function get_TickLabelAlignment: DNParagraphAlignment;
    procedure set_TickLabelAlignment(value: DNParagraphAlignment);
    function get_TickMarkSpacing: Int32;
    procedure set_TickMarkSpacing(value: Int32);
    function get_Hidden: Boolean;
    procedure set_Hidden(value: Boolean);
    function get_Document: DNDocumentBase;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property &Type: DNChartAxisType read get_Type;
    property CategoryType: DNAxisCategoryType read get_CategoryType write set_CategoryType;
    property Crosses: DNAxisCrosses read get_Crosses write set_Crosses;
    property CrossesAt: Double read get_CrossesAt write set_CrossesAt;
    property ReverseOrder: Boolean read get_ReverseOrder write set_ReverseOrder;
    property MajorTickMark: DNAxisTickMark read get_MajorTickMark write set_MajorTickMark;
    property MinorTickMark: DNAxisTickMark read get_MinorTickMark write set_MinorTickMark;
    property TickLabelPosition: DNAxisTickLabelPosition read get_TickLabelPosition write set_TickLabelPosition;
    property MajorUnit: Double read get_MajorUnit write set_MajorUnit;
    property MajorUnitIsAuto: Boolean read get_MajorUnitIsAuto write set_MajorUnitIsAuto;
    property MajorUnitScale: DNAxisTimeUnit read get_MajorUnitScale write set_MajorUnitScale;
    property MinorUnit: Double read get_MinorUnit write set_MinorUnit;
    property MinorUnitIsAuto: Boolean read get_MinorUnitIsAuto write set_MinorUnitIsAuto;
    property MinorUnitScale: DNAxisTimeUnit read get_MinorUnitScale write set_MinorUnitScale;
    property BaseTimeUnit: DNAxisTimeUnit read get_BaseTimeUnit write set_BaseTimeUnit;
    property NumberFormat: DNChartNumberFormat read get_NumberFormat;
    property TickLabelOffset: Int32 read get_TickLabelOffset write set_TickLabelOffset;
    property DisplayUnit: DNAxisDisplayUnit read get_DisplayUnit;
    property AxisBetweenCategories: Boolean read get_AxisBetweenCategories write set_AxisBetweenCategories;
    property Scaling: DNAxisScaling read get_Scaling;
    property TickLabelSpacing: Int32 read get_TickLabelSpacing write set_TickLabelSpacing;
    property TickLabelSpacingIsAuto: Boolean read get_TickLabelSpacingIsAuto write set_TickLabelSpacingIsAuto;
    property TickLabelAlignment: DNParagraphAlignment read get_TickLabelAlignment write set_TickLabelAlignment;
    property TickMarkSpacing: Int32 read get_TickMarkSpacing write set_TickMarkSpacing;
    property Hidden: Boolean read get_Hidden write set_Hidden;
    property Document: DNDocumentBase read get_Document;
  end;

  TDNChartAxis = class(TDNGenericImport<DNChartAxisClass, DNChartAxis>) end;

  //-------------namespace: Aspose.Words.Drawing.Charts----------------
  DNChartDataLabelClass = interface(DDN.mscorlib.DNObjectClass)
  ['{030A9074-15A0-5B06-BB6A-6CF3772B1C08}']
  end;

  [DNTypeName('Aspose.Words.Drawing.Charts.ChartDataLabel')]
  DNChartDataLabel = interface(DDN.mscorlib.DNObject)
  ['{F0D579EC-6759-3439-BEB6-D262B8BBE192}']
  { getters & setters } 

    function get_Index: Int32;
    function get_ShowCategoryName: Boolean;
    procedure set_ShowCategoryName(value: Boolean);
    function get_ShowBubbleSize: Boolean;
    procedure set_ShowBubbleSize(value: Boolean);
    function get_ShowLegendKey: Boolean;
    procedure set_ShowLegendKey(value: Boolean);
    function get_ShowPercentage: Boolean;
    procedure set_ShowPercentage(value: Boolean);
    function get_ShowSeriesName: Boolean;
    procedure set_ShowSeriesName(value: Boolean);
    function get_ShowValue: Boolean;
    procedure set_ShowValue(value: Boolean);
    function get_ShowLeaderLines: Boolean;
    procedure set_ShowLeaderLines(value: Boolean);
    function get_ShowDataLabelsRange: Boolean;
    procedure set_ShowDataLabelsRange(value: Boolean);
    function get_Separator: string;
    procedure set_Separator(value: string);
    function get_IsVisible: Boolean;
    function get_NumberFormat: DNChartNumberFormat;
    function get_IsHidden: Boolean;
    procedure set_IsHidden(value: Boolean);

  { methods } 

    procedure ClearFormat;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Index: Int32 read get_Index;
    property ShowCategoryName: Boolean read get_ShowCategoryName write set_ShowCategoryName;
    property ShowBubbleSize: Boolean read get_ShowBubbleSize write set_ShowBubbleSize;
    property ShowLegendKey: Boolean read get_ShowLegendKey write set_ShowLegendKey;
    property ShowPercentage: Boolean read get_ShowPercentage write set_ShowPercentage;
    property ShowSeriesName: Boolean read get_ShowSeriesName write set_ShowSeriesName;
    property ShowValue: Boolean read get_ShowValue write set_ShowValue;
    property ShowLeaderLines: Boolean read get_ShowLeaderLines write set_ShowLeaderLines;
    property ShowDataLabelsRange: Boolean read get_ShowDataLabelsRange write set_ShowDataLabelsRange;
    property Separator: string read get_Separator write set_Separator;
    property IsVisible: Boolean read get_IsVisible;
    property NumberFormat: DNChartNumberFormat read get_NumberFormat;
    property IsHidden: Boolean read get_IsHidden write set_IsHidden;
  end;

  TDNChartDataLabel = class(TDNGenericImport<DNChartDataLabelClass, DNChartDataLabel>) end;

  //-------------namespace: Aspose.Words.Drawing.Charts----------------
  DNChartDataLabelCollectionClass = interface(DNObjectClass)
  ['{B63A467D-6D95-5DEF-A0F0-ED21EAA80CED}']
  end;

  [DNTypeName('Aspose.Words.Drawing.Charts.ChartDataLabelCollection')]
  DNChartDataLabelCollection = interface(DDN.mscorlib.DNIEnumerable)
  ['{A0F8F56B-A030-35A5-9D4A-F8DFE536C605}']
  { getters & setters } 

    function get_Item(index: Int32): DNChartDataLabel;
    function get_Count: Int32;
    function get_ShowCategoryName: Boolean;
    procedure set_ShowCategoryName(value: Boolean);
    function get_ShowBubbleSize: Boolean;
    procedure set_ShowBubbleSize(value: Boolean);
    function get_ShowLegendKey: Boolean;
    procedure set_ShowLegendKey(value: Boolean);
    function get_ShowPercentage: Boolean;
    procedure set_ShowPercentage(value: Boolean);
    function get_ShowSeriesName: Boolean;
    procedure set_ShowSeriesName(value: Boolean);
    function get_ShowValue: Boolean;
    procedure set_ShowValue(value: Boolean);
    function get_ShowLeaderLines: Boolean;
    procedure set_ShowLeaderLines(value: Boolean);
    function get_ShowDataLabelsRange: Boolean;
    procedure set_ShowDataLabelsRange(value: Boolean);
    function get_Separator: string;
    procedure set_Separator(value: string);
    function get_NumberFormat: DNChartNumberFormat;

  { methods } 

    function GetEnumerator: DDN.mscorlib.DNIEnumerator<DNChartDataLabel>;
    function Add(index: Int32): DNChartDataLabel;
    procedure RemoveAt(index: Int32);
    procedure Clear;
    procedure ClearFormat;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Item[index: Int32]: DNChartDataLabel read get_Item; default;
    property Count: Int32 read get_Count;
    property ShowCategoryName: Boolean read get_ShowCategoryName write set_ShowCategoryName;
    property ShowBubbleSize: Boolean read get_ShowBubbleSize write set_ShowBubbleSize;
    property ShowLegendKey: Boolean read get_ShowLegendKey write set_ShowLegendKey;
    property ShowPercentage: Boolean read get_ShowPercentage write set_ShowPercentage;
    property ShowSeriesName: Boolean read get_ShowSeriesName write set_ShowSeriesName;
    property ShowValue: Boolean read get_ShowValue write set_ShowValue;
    property ShowLeaderLines: Boolean read get_ShowLeaderLines write set_ShowLeaderLines;
    property ShowDataLabelsRange: Boolean read get_ShowDataLabelsRange write set_ShowDataLabelsRange;
    property Separator: string read get_Separator write set_Separator;
    property NumberFormat: DNChartNumberFormat read get_NumberFormat;
  end;

  TDNChartDataLabelCollection = class(TDNGenericImport<DNChartDataLabelCollectionClass, DNChartDataLabelCollection>) end;

  //-------------namespace: Aspose.Words.Drawing.Charts----------------
  DNChartDataPointClass = interface(DNObjectClass)
  ['{D708AAA2-3CF7-5689-AD47-1529E243DA04}']
  end;

  [DNTypeName('Aspose.Words.Drawing.Charts.ChartDataPoint')]
  DNChartDataPoint = interface(DNIChartDataPoint)
  ['{B41598BA-48AE-37BD-8C97-CEB472287DF9}']
  { getters & setters } 

    function get_Index: Int32;
    function get_Explosion: Int32;
    procedure set_Explosion(value: Int32);
    function get_InvertIfNegative: Boolean;
    procedure set_InvertIfNegative(value: Boolean);
    function get_Bubble3D: Boolean;
    procedure set_Bubble3D(value: Boolean);
    function get_Format: DNChartFormat;
    function get_Marker: DNChartMarker;

  { methods } 

    procedure ClearFormat;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Index: Int32 read get_Index;
    property Explosion: Int32 read get_Explosion write set_Explosion;
    property InvertIfNegative: Boolean read get_InvertIfNegative write set_InvertIfNegative;
    property Bubble3D: Boolean read get_Bubble3D write set_Bubble3D;
    property Format: DNChartFormat read get_Format;
    property Marker: DNChartMarker read get_Marker;
  end;

  TDNChartDataPoint = class(TDNGenericImport<DNChartDataPointClass, DNChartDataPoint>) end;

  //-------------namespace: Aspose.Words.Drawing.Charts----------------
  DNChartDataPointCollectionClass = interface(DNObjectClass)
  ['{D8F1D34D-2B2C-5575-BE47-C2CECAEEEA07}']
  end;

  [DNTypeName('Aspose.Words.Drawing.Charts.ChartDataPointCollection')]
  DNChartDataPointCollection = interface(DDN.mscorlib.DNIEnumerable)
  ['{A5B362F9-A55E-38FD-8E09-4CE80F454D31}']
  { getters & setters } 

    function get_Item(index: Int32): DNChartDataPoint;
    function get_Count: Int32;

  { methods } 

    function GetEnumerator: DDN.mscorlib.DNIEnumerator<DNChartDataPoint>;
    function Add(index: Int32): DNChartDataPoint;
    procedure RemoveAt(index: Int32);
    procedure Clear;
    procedure ClearFormat;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Item[index: Int32]: DNChartDataPoint read get_Item; default;
    property Count: Int32 read get_Count;
  end;

  TDNChartDataPointCollection = class(TDNGenericImport<DNChartDataPointCollectionClass, DNChartDataPointCollection>) end;

  //-------------namespace: Aspose.Words.Drawing.Charts----------------
  DNChartFormatClass = interface(DDN.mscorlib.DNObjectClass)
  ['{F946CF13-E990-50A1-BE4C-4EBEC33CE28A}']
  end;

  [DNTypeName('Aspose.Words.Drawing.Charts.ChartFormat')]
  DNChartFormat = interface(DDN.mscorlib.DNObject)
  ['{C2CADA09-3BE0-388F-BE1A-6E867F29145D}']
  { getters & setters } 

    function get_Fill: DNFill;
    function get_Stroke: DNStroke;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Fill: DNFill read get_Fill;
    property Stroke: DNStroke read get_Stroke;
  end;

  TDNChartFormat = class(TDNGenericImport<DNChartFormatClass, DNChartFormat>) end;

  //-------------namespace: Aspose.Words.Drawing.Charts----------------
  DNChartLegendClass = interface(DDN.mscorlib.DNObjectClass)
  ['{9FEE91D1-E1A9-57DA-9099-5FC00270C417}']
  { constructors } 

    {class} function init: DNChartLegend;

  end;

  [DNTypeName('Aspose.Words.Drawing.Charts.ChartLegend')]
  DNChartLegend = interface(DDN.mscorlib.DNObject)
  ['{5B9B754D-1787-3187-8B1B-6B3936CF7FBB}']
  { getters & setters } 

    function get_Position: DNLegendPosition;
    procedure set_Position(value: DNLegendPosition);
    function get_Overlay: Boolean;
    procedure set_Overlay(value: Boolean);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Position: DNLegendPosition read get_Position write set_Position;
    property Overlay: Boolean read get_Overlay write set_Overlay;
  end;

  TDNChartLegend = class(TDNGenericImport<DNChartLegendClass, DNChartLegend>) end;

  //-------------namespace: Aspose.Words.Drawing.Charts----------------
  DNChartMarkerClass = interface(DDN.mscorlib.DNObjectClass)
  ['{3B39C649-7F51-545F-9C0C-590872392090}']
  end;

  [DNTypeName('Aspose.Words.Drawing.Charts.ChartMarker')]
  DNChartMarker = interface(DDN.mscorlib.DNObject)
  ['{22124290-4D1C-3570-AE27-35DF360D9DFF}']
  { getters & setters } 

    function get_Symbol: DNMarkerSymbol;
    procedure set_Symbol(value: DNMarkerSymbol);
    function get_Size: Int32;
    procedure set_Size(value: Int32);
    function get_Format: DNChartFormat;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Symbol: DNMarkerSymbol read get_Symbol write set_Symbol;
    property Size: Int32 read get_Size write set_Size;
    property Format: DNChartFormat read get_Format;
  end;

  TDNChartMarker = class(TDNGenericImport<DNChartMarkerClass, DNChartMarker>) end;

  //-------------namespace: Aspose.Words.Drawing.Charts----------------
  DNChartNumberFormatClass = interface(DDN.mscorlib.DNObjectClass)
  ['{C4985BA5-F289-5A55-9610-95233025FAD1}']
  end;

  [DNTypeName('Aspose.Words.Drawing.Charts.ChartNumberFormat')]
  DNChartNumberFormat = interface(DDN.mscorlib.DNObject)
  ['{DEF7B41B-D44A-3595-9C0D-4C132742F28D}']
  { getters & setters } 

    function get_FormatCode: string;
    procedure set_FormatCode(value: string);
    function get_IsLinkedToSource: Boolean;
    procedure set_IsLinkedToSource(value: Boolean);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property FormatCode: string read get_FormatCode write set_FormatCode;
    property IsLinkedToSource: Boolean read get_IsLinkedToSource write set_IsLinkedToSource;
  end;

  TDNChartNumberFormat = class(TDNGenericImport<DNChartNumberFormatClass, DNChartNumberFormat>) end;

  //-------------namespace: Aspose.Words.Drawing.Charts----------------
  DNChartSeriesClass = interface(DDN.mscorlib.DNObjectClass)
  ['{8AFF7391-8CF5-5192-A451-B0CEBFB67215}']
  end;

  [DNTypeName('Aspose.Words.Drawing.Charts.ChartSeries')]
  DNChartSeries = interface(DDN.mscorlib.DNObject)
  ['{4F65AF6A-F592-3E27-B314-586F5267AD74}']
  { getters & setters } 

    function get_Explosion: Int32;
    procedure set_Explosion(value: Int32);
    function get_InvertIfNegative: Boolean;
    procedure set_InvertIfNegative(value: Boolean);
    function get_Marker: DNChartMarker;
    function get_Bubble3D: Boolean;
    procedure set_Bubble3D(value: Boolean);
    function get_DataPoints: DNChartDataPointCollection;
    function get_Name: string;
    procedure set_Name(value: string);
    function get_Smooth: Boolean;
    procedure set_Smooth(value: Boolean);
    function get_HasDataLabels: Boolean;
    procedure set_HasDataLabels(value: Boolean);
    function get_DataLabels: DNChartDataLabelCollection;
    function get_Format: DNChartFormat;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Explosion: Int32 read get_Explosion write set_Explosion;
    property InvertIfNegative: Boolean read get_InvertIfNegative write set_InvertIfNegative;
    property Marker: DNChartMarker read get_Marker;
    property Bubble3D: Boolean read get_Bubble3D write set_Bubble3D;
    property DataPoints: DNChartDataPointCollection read get_DataPoints;
    property Name: string read get_Name write set_Name;
    property Smooth: Boolean read get_Smooth write set_Smooth;
    property HasDataLabels: Boolean read get_HasDataLabels write set_HasDataLabels;
    property DataLabels: DNChartDataLabelCollection read get_DataLabels;
    property Format: DNChartFormat read get_Format;
  end;

  TDNChartSeries = class(TDNGenericImport<DNChartSeriesClass, DNChartSeries>) end;

  //-------------namespace: Aspose.Words.Drawing.Charts----------------
  DNChartSeriesCollectionClass = interface(DNObjectClass)
  ['{E031968D-43E8-5DEF-B50A-F859F0ED8567}']
  end;

  [DNTypeName('Aspose.Words.Drawing.Charts.ChartSeriesCollection')]
  DNChartSeriesCollection = interface(DDN.mscorlib.DNIEnumerable)
  ['{279E477B-5722-3475-9EBE-DDBD67BEE1BC}']
  { getters & setters } 

    function get_Item(index: Int32): DNChartSeries;
    function get_Count: Int32;

  { methods } 

    function GetEnumerator: DDN.mscorlib.DNIEnumerator<DNChartSeries>;
    procedure RemoveAt(index: Int32);
    procedure Clear;
    function Add(seriesName: string; categories: TArray<string>; values: TArray<Double>): DNChartSeries; overload;
    function Add(seriesName: string; xValues: TArray<Double>; yValues: TArray<Double>): DNChartSeries; overload;
    function Add(seriesName: string; dates: TArray<DDN.mscorlib.DNDateTime>; values: TArray<Double>): DNChartSeries; overload;
    function Add(seriesName: string; xValues: TArray<Double>; yValues: TArray<Double>; bubbleSizes: TArray<Double>): DNChartSeries; overload;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Item[index: Int32]: DNChartSeries read get_Item; default;
    property Count: Int32 read get_Count;
  end;

  TDNChartSeriesCollection = class(TDNGenericImport<DNChartSeriesCollectionClass, DNChartSeriesCollection>) end;

  //-------------namespace: Aspose.Words.Drawing.Charts----------------
  DNChartTitleClass = interface(DDN.mscorlib.DNObjectClass)
  ['{E62E697F-00C5-5E35-8DE9-F2810E02CC3E}']
  end;

  [DNTypeName('Aspose.Words.Drawing.Charts.ChartTitle')]
  DNChartTitle = interface(DDN.mscorlib.DNObject)
  ['{23D14192-1CEB-341B-A30D-C9F6CA8D3E78}']
  { getters & setters } 

    function get_Text: string;
    procedure set_Text(value: string);
    function get_Overlay: Boolean;
    procedure set_Overlay(value: Boolean);
    function get_Show: Boolean;
    procedure set_Show(value: Boolean);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Text: string read get_Text write set_Text;
    property Overlay: Boolean read get_Overlay write set_Overlay;
    property Show: Boolean read get_Show write set_Show;
  end;

  TDNChartTitle = class(TDNGenericImport<DNChartTitleClass, DNChartTitle>) end;

  //-------------namespace: Aspose.Words.Drawing----------------
  DNFillClass = interface(DDN.mscorlib.DNObjectClass)
  ['{8AFAB7F8-5408-5D14-A7B9-65B1EA89B7D5}']
  end;

  [DNTypeName('Aspose.Words.Drawing.Fill')]
  DNFill = interface(DDN.mscorlib.DNObject)
  ['{E95D70CF-0288-3E76-B0EF-F0ECECB7B704}']
  { getters & setters } 

    function get_PresetTexture: DNPresetTexture;
    function get_Color: DDN.System.Drawing.DNColor;
    procedure set_Color(value: DDN.System.Drawing.DNColor);
    function get_On: Boolean;
    procedure set_On(value: Boolean);
    function get_Opacity: Double;
    procedure set_Opacity(value: Double);
    function get_ImageBytes: TArray<Byte>;
    function get_ForeColor: DDN.System.Drawing.DNColor;
    procedure set_ForeColor(value: DDN.System.Drawing.DNColor);
    function get_BackColor: DDN.System.Drawing.DNColor;
    procedure set_BackColor(value: DDN.System.Drawing.DNColor);
    function get_Visible: Boolean;
    procedure set_Visible(value: Boolean);
    function get_Transparency: Double;
    procedure set_Transparency(value: Double);
    function get_RotateWithObject: Boolean;
    procedure set_RotateWithObject(value: Boolean);
    function get_FillType: DNFillType;

  { methods } 

    procedure Solid; overload;
    procedure Solid(color: DDN.System.Drawing.DNColor); overload;
    procedure PresetTextured(presetTexture: DNPresetTexture);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property PresetTexture: DNPresetTexture read get_PresetTexture;
    property Color: DDN.System.Drawing.DNColor read get_Color write set_Color;
    property &On: Boolean read get_On write set_On;
    property Opacity: Double read get_Opacity write set_Opacity;
    property ImageBytes: TArray<Byte> read get_ImageBytes;
    property ForeColor: DDN.System.Drawing.DNColor read get_ForeColor write set_ForeColor;
    property BackColor: DDN.System.Drawing.DNColor read get_BackColor write set_BackColor;
    property Visible: Boolean read get_Visible write set_Visible;
    property Transparency: Double read get_Transparency write set_Transparency;
    property RotateWithObject: Boolean read get_RotateWithObject write set_RotateWithObject;
    property FillType: DNFillType read get_FillType;
  end;

  TDNFill = class(TDNGenericImport<DNFillClass, DNFill>) end;

  //-------------namespace: Aspose.Words.Drawing----------------
  DNHorizontalRuleFormatClass = interface(DDN.mscorlib.DNObjectClass)
  ['{B6958BA7-4CE5-5A26-83A0-1CF08345BB20}']
  end;

  [DNTypeName('Aspose.Words.Drawing.HorizontalRuleFormat')]
  DNHorizontalRuleFormat = interface(DDN.mscorlib.DNObject)
  ['{78571D1B-420B-33C8-8974-E742A3DE94FF}']
  { getters & setters } 

    function get_WidthPercent: Double;
    procedure set_WidthPercent(value: Double);
    function get_Height: Double;
    procedure set_Height(value: Double);
    function get_NoShade: Boolean;
    procedure set_NoShade(value: Boolean);
    function get_Color: DDN.System.Drawing.DNColor;
    procedure set_Color(value: DDN.System.Drawing.DNColor);
    function get_Alignment: DNHorizontalRuleAlignment;
    procedure set_Alignment(value: DNHorizontalRuleAlignment);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property WidthPercent: Double read get_WidthPercent write set_WidthPercent;
    property Height: Double read get_Height write set_Height;
    property NoShade: Boolean read get_NoShade write set_NoShade;
    property Color: DDN.System.Drawing.DNColor read get_Color write set_Color;
    property Alignment: DNHorizontalRuleAlignment read get_Alignment write set_Alignment;
  end;

  TDNHorizontalRuleFormat = class(TDNGenericImport<DNHorizontalRuleFormatClass, DNHorizontalRuleFormat>) end;

  //-------------namespace: Aspose.Words.Drawing----------------
  DNImageDataClass = interface(DDN.mscorlib.DNObjectClass)
  ['{4F80C508-BE35-562F-9847-C3FD3F5C024F}']
  end;

  [DNTypeName('Aspose.Words.Drawing.ImageData')]
  DNImageData = interface(DDN.mscorlib.DNObject)
  ['{E02B2693-C39C-3D68-8272-04007241AC86}']
  { getters & setters } 

    function get_ImageBytes: TArray<Byte>;
    procedure set_ImageBytes(value: TArray<Byte>);
    function get_HasImage: Boolean;
    function get_ImageSize: DNImageSize;
    function get_ImageType: DNImageType;
    function get_IsLink: Boolean;
    function get_IsLinkOnly: Boolean;
    function get_SourceFullName: string;
    procedure set_SourceFullName(value: string);
    function get_Title: string;
    procedure set_Title(value: string);
    function get_CropTop: Double;
    procedure set_CropTop(value: Double);
    function get_CropBottom: Double;
    procedure set_CropBottom(value: Double);
    function get_CropLeft: Double;
    procedure set_CropLeft(value: Double);
    function get_CropRight: Double;
    procedure set_CropRight(value: Double);
    function get_Borders: DNBorderCollection;
    function get_ChromaKey: DDN.System.Drawing.DNColor;
    procedure set_ChromaKey(value: DDN.System.Drawing.DNColor);
    function get_Brightness: Double;
    procedure set_Brightness(value: Double);
    function get_Contrast: Double;
    procedure set_Contrast(value: Double);
    function get_BiLevel: Boolean;
    procedure set_BiLevel(value: Boolean);
    function get_GrayScale: Boolean;
    procedure set_GrayScale(value: Boolean);

  { methods } 

    procedure SetImage(image: DDN.System.Drawing.DNImage); overload;
    procedure SetImage(stream: DDN.mscorlib.DNStream); overload;
    procedure SetImage(fileName: string); overload;
    function ToImage: DDN.System.Drawing.DNImage;
    function ToStream: DDN.mscorlib.DNStream;
    function ToByteArray: TArray<Byte>;
    procedure Save(stream: DDN.mscorlib.DNStream); overload;
    procedure Save(fileName: string); overload;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property ImageBytes: TArray<Byte> read get_ImageBytes write set_ImageBytes;
    property HasImage: Boolean read get_HasImage;
    property ImageSize: DNImageSize read get_ImageSize;
    property ImageType: DNImageType read get_ImageType;
    property IsLink: Boolean read get_IsLink;
    property IsLinkOnly: Boolean read get_IsLinkOnly;
    property SourceFullName: string read get_SourceFullName write set_SourceFullName;
    property Title: string read get_Title write set_Title;
    property CropTop: Double read get_CropTop write set_CropTop;
    property CropBottom: Double read get_CropBottom write set_CropBottom;
    property CropLeft: Double read get_CropLeft write set_CropLeft;
    property CropRight: Double read get_CropRight write set_CropRight;
    property Borders: DNBorderCollection read get_Borders;
    property ChromaKey: DDN.System.Drawing.DNColor read get_ChromaKey write set_ChromaKey;
    property Brightness: Double read get_Brightness write set_Brightness;
    property Contrast: Double read get_Contrast write set_Contrast;
    property BiLevel: Boolean read get_BiLevel write set_BiLevel;
    property GrayScale: Boolean read get_GrayScale write set_GrayScale;
  end;

  TDNImageData = class(TDNGenericImport<DNImageDataClass, DNImageData>) end;

  //-------------namespace: Aspose.Words.Drawing----------------
  DNImageSizeClass = interface(DDN.mscorlib.DNObjectClass)
  ['{1475A378-FDA9-5C6A-B2D9-2E8EA1B578C6}']
  { constructors } 

    {class} function init(widthPixels: Int32; heightPixels: Int32): DNImageSize; overload;
    {class} function init(widthPixels: Int32; heightPixels: Int32; horizontalResolution: Double; verticalResolution: Double): DNImageSize; overload;

  end;

  [DNTypeName('Aspose.Words.Drawing.ImageSize')]
  DNImageSize = interface(DDN.mscorlib.DNObject)
  ['{2FBE507C-6A95-33B4-9EF9-AA50F271B03E}']
  { getters & setters } 

    function get_WidthPixels: Int32;
    function get_HeightPixels: Int32;
    function get_HorizontalResolution: Double;
    function get_VerticalResolution: Double;
    function get_WidthPoints: Double;
    function get_HeightPoints: Double;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property WidthPixels: Int32 read get_WidthPixels;
    property HeightPixels: Int32 read get_HeightPixels;
    property HorizontalResolution: Double read get_HorizontalResolution;
    property VerticalResolution: Double read get_VerticalResolution;
    property WidthPoints: Double read get_WidthPoints;
    property HeightPoints: Double read get_HeightPoints;
  end;

  TDNImageSize = class(TDNGenericImport<DNImageSizeClass, DNImageSize>) end;

  //-------------namespace: Aspose.Words.Drawing.Ole----------------
  DNForms2OleControlCollectionClass = interface(DDN.mscorlib.DNObjectClass)
  ['{31257109-EED0-516A-BF0A-F3B2AE9CD58A}']
  { constructors } 

    {class} function init: DNForms2OleControlCollection;

  end;

  [DNTypeName('Aspose.Words.Drawing.Ole.Forms2OleControlCollection')]
  DNForms2OleControlCollection = interface(DDN.mscorlib.DNObject)
  ['{22519FE1-7AC5-3CBE-997F-A7B6DDE25746}']
  { getters & setters } 

    function get_Item(index: Int32): DNForms2OleControl;
    function get_Count: Int32;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Item[index: Int32]: DNForms2OleControl read get_Item; default;
    property Count: Int32 read get_Count;
  end;

  TDNForms2OleControlCollection = class(TDNGenericImport<DNForms2OleControlCollectionClass, DNForms2OleControlCollection>) end;

  //-------------namespace: Aspose.Words.Drawing.Ole----------------
  DNOleControlClass = interface(DDN.mscorlib.DNObjectClass)
  ['{61939D73-2CF5-5EFC-9954-99449A677C5D}']
  end;

  [DNTypeName('Aspose.Words.Drawing.Ole.OleControl')]
  DNOleControl = interface(DDN.mscorlib.DNObject)
  ['{DA80F002-2A15-3015-A576-A07A82864EEE}']
  { getters & setters } 

    function get_IsForms2OleControl: Boolean;
    function get_Name: string;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property IsForms2OleControl: Boolean read get_IsForms2OleControl;
    property Name: string read get_Name;
  end;

  TDNOleControl = class(TDNGenericImport<DNOleControlClass, DNOleControl>) end;

  //-------------namespace: Aspose.Words.Drawing.Ole----------------
  DNForms2OleControlClass = interface(DNOleControlClass)
  ['{FD17A981-5C95-5D20-8D38-78F4A397BF85}']
  end;

  [DNTypeName('Aspose.Words.Drawing.Ole.Forms2OleControl')]
  DNForms2OleControl = interface(DNOleControl)
  ['{8B67A68A-48E2-3DC9-9155-2410E7268362}']
  { getters & setters } 

    function get_Caption: string;
    function get_Value: string;
    function get_Enabled: Boolean;
    function get_ChildNodes: DNForms2OleControlCollection;
    function get_Type: DNForms2OleControlType;
    function get_IsForms2OleControl: Boolean;
    function get_Name: string;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Caption: string read get_Caption;
    property Value: string read get_Value;
    property Enabled: Boolean read get_Enabled;
    property ChildNodes: DNForms2OleControlCollection read get_ChildNodes;
    property &Type: DNForms2OleControlType read get_Type;
    property IsForms2OleControl: Boolean read get_IsForms2OleControl;
    property Name: string read get_Name;
  end;

  TDNForms2OleControl = class(TDNGenericImport<DNForms2OleControlClass, DNForms2OleControl>) end;

  //-------------namespace: Aspose.Words.Drawing----------------
  DNOleFormatClass = interface(DDN.mscorlib.DNObjectClass)
  ['{BD0373E3-352F-559C-A31F-FEFBBEBD07AA}']
  end;

  [DNTypeName('Aspose.Words.Drawing.OleFormat')]
  DNOleFormat = interface(DDN.mscorlib.DNObject)
  ['{5132EC2C-54C5-31EF-86A0-97880FDE1EF5}']
  { getters & setters } 

    function get_IconCaption: string;
    function get_SuggestedExtension: string;
    function get_SuggestedFileName: string;
    function get_ProgId: string;
    procedure set_ProgId(value: string);
    function get_IsLink: Boolean;
    function get_SourceFullName: string;
    procedure set_SourceFullName(value: string);
    function get_SourceItem: string;
    procedure set_SourceItem(value: string);
    function get_AutoUpdate: Boolean;
    procedure set_AutoUpdate(value: Boolean);
    function get_OleIcon: Boolean;
    function get_IsLocked: Boolean;
    procedure set_IsLocked(value: Boolean);
    function get_Clsid: DDN.mscorlib.DNGuid;
    function get_OlePackage: DNOlePackage;
    function get_OleControl: DNOleControl;

  { methods } 

    procedure Save(stream: DDN.mscorlib.DNStream); overload;
    procedure Save(fileName: string); overload;
    function GetOleEntry(oleEntryName: string): DDN.mscorlib.DNMemoryStream;
    function GetRawData: TArray<Byte>;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property IconCaption: string read get_IconCaption;
    property SuggestedExtension: string read get_SuggestedExtension;
    property SuggestedFileName: string read get_SuggestedFileName;
    property ProgId: string read get_ProgId write set_ProgId;
    property IsLink: Boolean read get_IsLink;
    property SourceFullName: string read get_SourceFullName write set_SourceFullName;
    property SourceItem: string read get_SourceItem write set_SourceItem;
    property AutoUpdate: Boolean read get_AutoUpdate write set_AutoUpdate;
    property OleIcon: Boolean read get_OleIcon;
    property IsLocked: Boolean read get_IsLocked write set_IsLocked;
    property Clsid: DDN.mscorlib.DNGuid read get_Clsid;
    property OlePackage: DNOlePackage read get_OlePackage;
    property OleControl: DNOleControl read get_OleControl;
  end;

  TDNOleFormat = class(TDNGenericImport<DNOleFormatClass, DNOleFormat>) end;

  //-------------namespace: Aspose.Words.Drawing----------------
  DNOlePackageClass = interface(DDN.mscorlib.DNObjectClass)
  ['{4CC9FFED-CD41-5750-8C5A-5266343D7AE4}']
  end;

  [DNTypeName('Aspose.Words.Drawing.OlePackage')]
  DNOlePackage = interface(DDN.mscorlib.DNObject)
  ['{4A683E76-5237-3C85-A9CA-BF4AFFAD14EF}']
  { getters & setters } 

    function get_FileName: string;
    procedure set_FileName(value: string);
    function get_DisplayName: string;
    procedure set_DisplayName(value: string);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property FileName: string read get_FileName write set_FileName;
    property DisplayName: string read get_DisplayName write set_DisplayName;
  end;

  TDNOlePackage = class(TDNGenericImport<DNOlePackageClass, DNOlePackage>) end;

  //-------------namespace: Aspose.Words.Drawing----------------
  DNSignatureLineClass = interface(DDN.mscorlib.DNObjectClass)
  ['{83E7C892-5566-534A-8821-263220D5D8DB}']
  end;

  [DNTypeName('Aspose.Words.Drawing.SignatureLine')]
  DNSignatureLine = interface(DDN.mscorlib.DNObject)
  ['{EA4C5776-91C6-3929-83A7-4BD059C2733E}']
  { getters & setters } 

    function get_Signer: string;
    procedure set_Signer(value: string);
    function get_SignerTitle: string;
    procedure set_SignerTitle(value: string);
    function get_Email: string;
    procedure set_Email(value: string);
    function get_DefaultInstructions: Boolean;
    procedure set_DefaultInstructions(value: Boolean);
    function get_Instructions: string;
    procedure set_Instructions(value: string);
    function get_AllowComments: Boolean;
    procedure set_AllowComments(value: Boolean);
    function get_ShowDate: Boolean;
    procedure set_ShowDate(value: Boolean);
    function get_Id: DDN.mscorlib.DNGuid;
    procedure set_Id(value: DDN.mscorlib.DNGuid);
    function get_ProviderId: DDN.mscorlib.DNGuid;
    procedure set_ProviderId(value: DDN.mscorlib.DNGuid);
    function get_IsSigned: Boolean;
    function get_IsValid: Boolean;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Signer: string read get_Signer write set_Signer;
    property SignerTitle: string read get_SignerTitle write set_SignerTitle;
    property Email: string read get_Email write set_Email;
    property DefaultInstructions: Boolean read get_DefaultInstructions write set_DefaultInstructions;
    property Instructions: string read get_Instructions write set_Instructions;
    property AllowComments: Boolean read get_AllowComments write set_AllowComments;
    property ShowDate: Boolean read get_ShowDate write set_ShowDate;
    property Id: DDN.mscorlib.DNGuid read get_Id write set_Id;
    property ProviderId: DDN.mscorlib.DNGuid read get_ProviderId write set_ProviderId;
    property IsSigned: Boolean read get_IsSigned;
    property IsValid: Boolean read get_IsValid;
  end;

  TDNSignatureLine = class(TDNGenericImport<DNSignatureLineClass, DNSignatureLine>) end;

  //-------------namespace: Aspose.Words.Drawing----------------
  DNStrokeClass = interface(DDN.mscorlib.DNObjectClass)
  ['{EE288245-8CC4-51FA-9386-DBC465620650}']
  end;

  [DNTypeName('Aspose.Words.Drawing.Stroke')]
  DNStroke = interface(DDN.mscorlib.DNObject)
  ['{995D0F50-1E5E-37EB-86D9-487D33DB2EE6}']
  { getters & setters } 

    function get_On: Boolean;
    procedure set_On(value: Boolean);
    function get_Color: DDN.System.Drawing.DNColor;
    procedure set_Color(value: DDN.System.Drawing.DNColor);
    function get_Color2: DDN.System.Drawing.DNColor;
    procedure set_Color2(value: DDN.System.Drawing.DNColor);
    function get_ForeColor: DDN.System.Drawing.DNColor;
    procedure set_ForeColor(value: DDN.System.Drawing.DNColor);
    function get_BackColor: DDN.System.Drawing.DNColor;
    procedure set_BackColor(value: DDN.System.Drawing.DNColor);
    function get_Visible: Boolean;
    procedure set_Visible(value: Boolean);
    function get_Transparency: Double;
    procedure set_Transparency(value: Double);
    function get_Weight: Double;
    procedure set_Weight(value: Double);
    function get_DashStyle: DNDashStyle;
    procedure set_DashStyle(value: DNDashStyle);
    function get_JoinStyle: DNJoinStyle;
    procedure set_JoinStyle(value: DNJoinStyle);
    function get_EndCap: DNEndCap;
    procedure set_EndCap(value: DNEndCap);
    function get_LineStyle: DNShapeLineStyle;
    procedure set_LineStyle(value: DNShapeLineStyle);
    function get_StartArrowType: DNArrowType;
    procedure set_StartArrowType(value: DNArrowType);
    function get_EndArrowType: DNArrowType;
    procedure set_EndArrowType(value: DNArrowType);
    function get_StartArrowWidth: DNArrowWidth;
    procedure set_StartArrowWidth(value: DNArrowWidth);
    function get_StartArrowLength: DNArrowLength;
    procedure set_StartArrowLength(value: DNArrowLength);
    function get_EndArrowWidth: DNArrowWidth;
    procedure set_EndArrowWidth(value: DNArrowWidth);
    function get_EndArrowLength: DNArrowLength;
    procedure set_EndArrowLength(value: DNArrowLength);
    function get_Opacity: Double;
    procedure set_Opacity(value: Double);
    function get_ImageBytes: TArray<Byte>;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property &On: Boolean read get_On write set_On;
    property Color: DDN.System.Drawing.DNColor read get_Color write set_Color;
    property Color2: DDN.System.Drawing.DNColor read get_Color2 write set_Color2;
    property ForeColor: DDN.System.Drawing.DNColor read get_ForeColor write set_ForeColor;
    property BackColor: DDN.System.Drawing.DNColor read get_BackColor write set_BackColor;
    property Visible: Boolean read get_Visible write set_Visible;
    property Transparency: Double read get_Transparency write set_Transparency;
    property Weight: Double read get_Weight write set_Weight;
    property DashStyle: DNDashStyle read get_DashStyle write set_DashStyle;
    property JoinStyle: DNJoinStyle read get_JoinStyle write set_JoinStyle;
    property EndCap: DNEndCap read get_EndCap write set_EndCap;
    property LineStyle: DNShapeLineStyle read get_LineStyle write set_LineStyle;
    property StartArrowType: DNArrowType read get_StartArrowType write set_StartArrowType;
    property EndArrowType: DNArrowType read get_EndArrowType write set_EndArrowType;
    property StartArrowWidth: DNArrowWidth read get_StartArrowWidth write set_StartArrowWidth;
    property StartArrowLength: DNArrowLength read get_StartArrowLength write set_StartArrowLength;
    property EndArrowWidth: DNArrowWidth read get_EndArrowWidth write set_EndArrowWidth;
    property EndArrowLength: DNArrowLength read get_EndArrowLength write set_EndArrowLength;
    property Opacity: Double read get_Opacity write set_Opacity;
    property ImageBytes: TArray<Byte> read get_ImageBytes;
  end;

  TDNStroke = class(TDNGenericImport<DNStrokeClass, DNStroke>) end;

  //-------------namespace: Aspose.Words.Drawing----------------
  DNTextBoxClass = interface(DDN.mscorlib.DNObjectClass)
  ['{0B0AC423-6F02-537B-BCC5-6B3FB45378A6}']
  end;

  [DNTypeName('Aspose.Words.Drawing.TextBox')]
  DNTextBox = interface(DDN.mscorlib.DNObject)
  ['{D407E923-03CA-3B22-9AF6-60C22A62E3A3}']
  { getters & setters } 

    function get_InternalMarginLeft: Double;
    procedure set_InternalMarginLeft(value: Double);
    function get_InternalMarginRight: Double;
    procedure set_InternalMarginRight(value: Double);
    function get_InternalMarginTop: Double;
    procedure set_InternalMarginTop(value: Double);
    function get_InternalMarginBottom: Double;
    procedure set_InternalMarginBottom(value: Double);
    function get_FitShapeToText: Boolean;
    procedure set_FitShapeToText(value: Boolean);
    function get_LayoutFlow: DNLayoutFlow;
    procedure set_LayoutFlow(value: DNLayoutFlow);
    function get_TextBoxWrapMode: DNTextBoxWrapMode;
    procedure set_TextBoxWrapMode(value: DNTextBoxWrapMode);
    function get_VerticalAnchor: DNTextBoxAnchor;
    procedure set_VerticalAnchor(value: DNTextBoxAnchor);
    function get_Next: DNTextBox;
    procedure set_Next(value: DNTextBox);
    function get_Previous: DNTextBox;
    function get_Parent: DNShape;

  { methods } 

    function IsValidLinkTarget(target: DNTextBox): Boolean;
    procedure BreakForwardLink;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property InternalMarginLeft: Double read get_InternalMarginLeft write set_InternalMarginLeft;
    property InternalMarginRight: Double read get_InternalMarginRight write set_InternalMarginRight;
    property InternalMarginTop: Double read get_InternalMarginTop write set_InternalMarginTop;
    property InternalMarginBottom: Double read get_InternalMarginBottom write set_InternalMarginBottom;
    property FitShapeToText: Boolean read get_FitShapeToText write set_FitShapeToText;
    property LayoutFlow: DNLayoutFlow read get_LayoutFlow write set_LayoutFlow;
    property TextBoxWrapMode: DNTextBoxWrapMode read get_TextBoxWrapMode write set_TextBoxWrapMode;
    property VerticalAnchor: DNTextBoxAnchor read get_VerticalAnchor write set_VerticalAnchor;
    property Next: DNTextBox read get_Next write set_Next;
    property Previous: DNTextBox read get_Previous;
    property Parent: DNShape read get_Parent;
  end;

  TDNTextBox = class(TDNGenericImport<DNTextBoxClass, DNTextBox>) end;

  //-------------namespace: Aspose.Words.Drawing----------------
  DNTextPathClass = interface(DDN.mscorlib.DNObjectClass)
  ['{A9F88CD4-3A4B-5FB7-A81E-048D0E1C0D17}']
  end;

  [DNTypeName('Aspose.Words.Drawing.TextPath')]
  DNTextPath = interface(DDN.mscorlib.DNObject)
  ['{22CD7862-78E8-3B48-B72D-2FD06A1FA04F}']
  { getters & setters } 

    function get_On: Boolean;
    procedure set_On(value: Boolean);
    function get_FitPath: Boolean;
    procedure set_FitPath(value: Boolean);
    function get_FitShape: Boolean;
    procedure set_FitShape(value: Boolean);
    function get_FontFamily: string;
    procedure set_FontFamily(value: string);
    function get_Size: Double;
    procedure set_Size(value: Double);
    function get_Bold: Boolean;
    procedure set_Bold(value: Boolean);
    function get_Italic: Boolean;
    procedure set_Italic(value: Boolean);
    function get_SmallCaps: Boolean;
    procedure set_SmallCaps(value: Boolean);
    function get_RotateLetters: Boolean;
    procedure set_RotateLetters(value: Boolean);
    function get_Trim: Boolean;
    procedure set_Trim(value: Boolean);
    function get_Kerning: Boolean;
    procedure set_Kerning(value: Boolean);
    function get_Shadow: Boolean;
    procedure set_Shadow(value: Boolean);
    function get_Underline: Boolean;
    procedure set_Underline(value: Boolean);
    function get_StrikeThrough: Boolean;
    procedure set_StrikeThrough(value: Boolean);
    function get_SameLetterHeights: Boolean;
    procedure set_SameLetterHeights(value: Boolean);
    function get_Text: string;
    procedure set_Text(value: string);
    function get_TextPathAlignment: DNTextPathAlignment;
    procedure set_TextPathAlignment(value: DNTextPathAlignment);
    function get_ReverseRows: Boolean;
    procedure set_ReverseRows(value: Boolean);
    function get_Spacing: Double;
    procedure set_Spacing(value: Double);
    function get_XScale: Boolean;
    procedure set_XScale(value: Boolean);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property &On: Boolean read get_On write set_On;
    property FitPath: Boolean read get_FitPath write set_FitPath;
    property FitShape: Boolean read get_FitShape write set_FitShape;
    property FontFamily: string read get_FontFamily write set_FontFamily;
    property Size: Double read get_Size write set_Size;
    property Bold: Boolean read get_Bold write set_Bold;
    property Italic: Boolean read get_Italic write set_Italic;
    property SmallCaps: Boolean read get_SmallCaps write set_SmallCaps;
    property RotateLetters: Boolean read get_RotateLetters write set_RotateLetters;
    property Trim: Boolean read get_Trim write set_Trim;
    property Kerning: Boolean read get_Kerning write set_Kerning;
    property Shadow: Boolean read get_Shadow write set_Shadow;
    property Underline: Boolean read get_Underline write set_Underline;
    property StrikeThrough: Boolean read get_StrikeThrough write set_StrikeThrough;
    property SameLetterHeights: Boolean read get_SameLetterHeights write set_SameLetterHeights;
    property Text: string read get_Text write set_Text;
    property TextPathAlignment: DNTextPathAlignment read get_TextPathAlignment write set_TextPathAlignment;
    property ReverseRows: Boolean read get_ReverseRows write set_ReverseRows;
    property Spacing: Double read get_Spacing write set_Spacing;
    property XScale: Boolean read get_XScale write set_XScale;
  end;

  TDNTextPath = class(TDNGenericImport<DNTextPathClass, DNTextPath>) end;

  //-------------namespace: Aspose.Words----------------
  DNEditableRangeClass = interface(DDN.mscorlib.DNObjectClass)
  ['{441166C4-AFDC-529E-AB0D-455ADF6931FB}']
  end;

  [DNTypeName('Aspose.Words.EditableRange')]
  DNEditableRange = interface(DDN.mscorlib.DNObject)
  ['{3102D626-FA5C-30D1-BEFA-29A6AC4DFCFE}']
  { getters & setters } 

    function get_Id: Int32;
    function get_SingleUser: string;
    procedure set_SingleUser(value: string);
    function get_EditorGroup: DNEditorType;
    procedure set_EditorGroup(value: DNEditorType);
    function get_EditableRangeStart: DNEditableRangeStart;
    function get_EditableRangeEnd: DNEditableRangeEnd;

  { methods } 

    procedure Remove;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Id: Int32 read get_Id;
    property SingleUser: string read get_SingleUser write set_SingleUser;
    property EditorGroup: DNEditorType read get_EditorGroup write set_EditorGroup;
    property EditableRangeStart: DNEditableRangeStart read get_EditableRangeStart;
    property EditableRangeEnd: DNEditableRangeEnd read get_EditableRangeEnd;
  end;

  TDNEditableRange = class(TDNGenericImport<DNEditableRangeClass, DNEditableRange>) end;

  //-------------namespace: Aspose.Words.Fields----------------
  DNBarcodeParametersClass = interface(DDN.mscorlib.DNObjectClass)
  ['{441B032A-ACEC-5EE0-8932-03089518DAFA}']
  { constructors } 

    {class} function init: DNBarcodeParameters;

  end;

  [DNTypeName('Aspose.Words.Fields.BarcodeParameters')]
  DNBarcodeParameters = interface(DDN.mscorlib.DNObject)
  ['{A3A6CEF2-1DD4-380B-9AFF-A4D3A1024811}']
  { getters & setters } 

    function get_BarcodeType: string;
    procedure set_BarcodeType(value: string);
    function get_BarcodeValue: string;
    procedure set_BarcodeValue(value: string);
    function get_SymbolHeight: string;
    procedure set_SymbolHeight(value: string);
    function get_ForegroundColor: string;
    procedure set_ForegroundColor(value: string);
    function get_BackgroundColor: string;
    procedure set_BackgroundColor(value: string);
    function get_SymbolRotation: string;
    procedure set_SymbolRotation(value: string);
    function get_ScalingFactor: string;
    procedure set_ScalingFactor(value: string);
    function get_PosCodeStyle: string;
    procedure set_PosCodeStyle(value: string);
    function get_CaseCodeStyle: string;
    procedure set_CaseCodeStyle(value: string);
    function get_ErrorCorrectionLevel: string;
    procedure set_ErrorCorrectionLevel(value: string);
    function get_DisplayText: Boolean;
    procedure set_DisplayText(value: Boolean);
    function get_AddStartStopChar: Boolean;
    procedure set_AddStartStopChar(value: Boolean);
    function get_FixCheckDigit: Boolean;
    procedure set_FixCheckDigit(value: Boolean);
    function get_PostalAddress: string;
    procedure set_PostalAddress(value: string);
    function get_IsBookmark: Boolean;
    procedure set_IsBookmark(value: Boolean);
    function get_FacingIdentificationMark: string;
    procedure set_FacingIdentificationMark(value: string);
    function get_IsUSPostalAddress: Boolean;
    procedure set_IsUSPostalAddress(value: Boolean);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property BarcodeType: string read get_BarcodeType write set_BarcodeType;
    property BarcodeValue: string read get_BarcodeValue write set_BarcodeValue;
    property SymbolHeight: string read get_SymbolHeight write set_SymbolHeight;
    property ForegroundColor: string read get_ForegroundColor write set_ForegroundColor;
    property BackgroundColor: string read get_BackgroundColor write set_BackgroundColor;
    property SymbolRotation: string read get_SymbolRotation write set_SymbolRotation;
    property ScalingFactor: string read get_ScalingFactor write set_ScalingFactor;
    property PosCodeStyle: string read get_PosCodeStyle write set_PosCodeStyle;
    property CaseCodeStyle: string read get_CaseCodeStyle write set_CaseCodeStyle;
    property ErrorCorrectionLevel: string read get_ErrorCorrectionLevel write set_ErrorCorrectionLevel;
    property DisplayText: Boolean read get_DisplayText write set_DisplayText;
    property AddStartStopChar: Boolean read get_AddStartStopChar write set_AddStartStopChar;
    property FixCheckDigit: Boolean read get_FixCheckDigit write set_FixCheckDigit;
    property PostalAddress: string read get_PostalAddress write set_PostalAddress;
    property IsBookmark: Boolean read get_IsBookmark write set_IsBookmark;
    property FacingIdentificationMark: string read get_FacingIdentificationMark write set_FacingIdentificationMark;
    property IsUSPostalAddress: Boolean read get_IsUSPostalAddress write set_IsUSPostalAddress;
  end;

  TDNBarcodeParameters = class(TDNGenericImport<DNBarcodeParametersClass, DNBarcodeParameters>) end;

  //-------------namespace: Aspose.Words.Fields----------------
  DNComparisonEvaluationResultClass = interface(DDN.mscorlib.DNObjectClass)
  ['{F7D0837A-3C62-561C-AE22-7FB7987A8708}']
  { constructors } 

    {class} function init(result: Boolean): DNComparisonEvaluationResult; overload;
    {class} function init(errorMessage: string): DNComparisonEvaluationResult; overload;

  end;

  [DNTypeName('Aspose.Words.Fields.ComparisonEvaluationResult')]
  DNComparisonEvaluationResult = interface(DDN.mscorlib.DNObject)
  ['{BDF2155A-DC8D-304E-9277-3BE126EB4B1A}']
  { getters & setters } 

    function get_Result: Boolean;
    function get_ErrorMessage: string;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Result: Boolean read get_Result;
    property ErrorMessage: string read get_ErrorMessage;
  end;

  TDNComparisonEvaluationResult = class(TDNGenericImport<DNComparisonEvaluationResultClass, DNComparisonEvaluationResult>) end;

  //-------------namespace: Aspose.Words.Fields----------------
  DNComparisonExpressionClass = interface(DDN.mscorlib.DNObjectClass)
  ['{58C556D2-2F28-55DB-9263-C7730C26AA64}']
  end;

  [DNTypeName('Aspose.Words.Fields.ComparisonExpression')]
  DNComparisonExpression = interface(DDN.mscorlib.DNObject)
  ['{949B5B26-039E-35D8-BA56-C2C316786D68}']
  { getters & setters } 

    function get_LeftExpression: string;
    function get_ComparisonOperator: string;
    function get_RightExpression: string;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property LeftExpression: string read get_LeftExpression;
    property ComparisonOperator: string read get_ComparisonOperator;
    property RightExpression: string read get_RightExpression;
  end;

  TDNComparisonExpression = class(TDNGenericImport<DNComparisonExpressionClass, DNComparisonExpression>) end;

  //-------------namespace: Aspose.Words.Fields----------------
  DNDropDownItemCollectionClass = interface(DDN.mscorlib.DNObjectClass)
  ['{60EF6076-95FC-5E8C-B871-D89A52E8FAB2}']
  end;

  [DNTypeName('Aspose.Words.Fields.DropDownItemCollection')]
  DNDropDownItemCollection = interface(DDN.mscorlib.DNObject)
  ['{89282693-6CDE-3429-91C5-765570873605}']
  { getters & setters } 

    function get_Count: Int32;
    function get_Item(index: Int32): string;
    procedure set_Item(index: Int32; value: string);

  { methods } 

    function GetEnumerator: DDN.mscorlib.DNIEnumerator<string>;
    function Add(value: string): Int32;
    function &Contains(value: string): Boolean;
    function IndexOf(value: string): Int32;
    procedure Insert(index: Int32; value: string);
    procedure Remove(name: string);
    procedure RemoveAt(index: Int32);
    procedure Clear;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Count: Int32 read get_Count;
    property Item[index: Int32]: string read get_Item write set_Item; default;
  end;

  TDNDropDownItemCollection = class(TDNGenericImport<DNDropDownItemCollectionClass, DNDropDownItemCollection>) end;

  //-------------namespace: Aspose.Words.Fields----------------
  DNFieldClass = interface(DDN.mscorlib.DNObjectClass)
  ['{7F9FF57F-0CAC-5BBA-BDF7-35DC98A46158}']
  end;

  [DNTypeName('Aspose.Words.Fields.Field')]
  DNField = interface(DDN.mscorlib.DNObject)
  ['{229A53BC-A029-39E4-A768-37A0F2672484}']
  { getters & setters } 

    function get_Start: DNFieldStart;
    function get_Separator: DNFieldSeparator;
    function get_End: DNFieldEnd;
    function get_Type: DNFieldType;
    function get_Result: string;
    procedure set_Result(value: string);
    function get_DisplayResult: string;
    function get_IsLocked: Boolean;
    procedure set_IsLocked(value: Boolean);
    function get_IsDirty: Boolean;
    procedure set_IsDirty(value: Boolean);
    function get_Format: DNFieldFormat;
    function get_LocaleId: Int32;
    procedure set_LocaleId(value: Int32);

  { methods } 

    function GetFieldCode: string; overload;
    function GetFieldCode(includeChildFieldCodes: Boolean): string; overload;
    function Remove: DNNode;
    procedure Update; overload;
    procedure Update(ignoreMergeFormat: Boolean); overload;
    function Unlink: Boolean;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Start: DNFieldStart read get_Start;
    property Separator: DNFieldSeparator read get_Separator;
    property &End: DNFieldEnd read get_End;
    property &Type: DNFieldType read get_Type;
    property Result: string read get_Result write set_Result;
    property DisplayResult: string read get_DisplayResult;
    property IsLocked: Boolean read get_IsLocked write set_IsLocked;
    property IsDirty: Boolean read get_IsDirty write set_IsDirty;
    property Format: DNFieldFormat read get_Format;
    property LocaleId: Int32 read get_LocaleId write set_LocaleId;
  end;

  TDNField = class(TDNGenericImport<DNFieldClass, DNField>) end;

  //-------------namespace: Aspose.Words.Fields----------------
  DNFieldAddInClass = interface(DNFieldClass)
  ['{5DC105C2-C2B9-543D-BD64-832DABF32F6D}']
  { constructors } 

    {class} function init: DNFieldAddIn;

  end;

  [DNTypeName('Aspose.Words.Fields.FieldAddIn')]
  DNFieldAddIn = interface(DNField)
  ['{E61CA7B1-B894-3B3E-A763-E8FCF439162A}']
  { getters & setters } 

    function get_Start: DNFieldStart;
    function get_Separator: DNFieldSeparator;
    function get_End: DNFieldEnd;
    function get_Type: DNFieldType;
    function get_Result: string;
    procedure set_Result(value: string);
    function get_DisplayResult: string;
    function get_IsLocked: Boolean;
    procedure set_IsLocked(value: Boolean);
    function get_IsDirty: Boolean;
    procedure set_IsDirty(value: Boolean);
    function get_Format: DNFieldFormat;
    function get_LocaleId: Int32;
    procedure set_LocaleId(value: Int32);

  { methods } 

    function GetFieldCode: string; overload;
    function GetFieldCode(includeChildFieldCodes: Boolean): string; overload;
    function Remove: DNNode;
    procedure Update; overload;
    procedure Update(ignoreMergeFormat: Boolean); overload;
    function Unlink: Boolean;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Start: DNFieldStart read get_Start;
    property Separator: DNFieldSeparator read get_Separator;
    property &End: DNFieldEnd read get_End;
    property &Type: DNFieldType read get_Type;
    property Result: string read get_Result write set_Result;
    property DisplayResult: string read get_DisplayResult;
    property IsLocked: Boolean read get_IsLocked write set_IsLocked;
    property IsDirty: Boolean read get_IsDirty write set_IsDirty;
    property Format: DNFieldFormat read get_Format;
    property LocaleId: Int32 read get_LocaleId write set_LocaleId;
  end;

  TDNFieldAddIn = class(TDNGenericImport<DNFieldAddInClass, DNFieldAddIn>) end;

  //-------------namespace: Aspose.Words.Fields----------------
  DNFieldAddressBlockClass = interface(DNFieldClass)
  ['{157EA77C-1990-5456-A4D8-93A1995A89B2}']
  { constructors } 

    {class} function init: DNFieldAddressBlock;

  end;

  [DNTypeName('Aspose.Words.Fields.FieldAddressBlock')]
  DNFieldAddressBlock = interface(DNField)
  ['{73FF1AFC-7C08-31C9-B8A0-41AC2CD288A2}']
  { getters & setters } 

    function get_FormatAddressOnCountryOrRegion: Boolean;
    procedure set_FormatAddressOnCountryOrRegion(value: Boolean);
    function get_IncludeCountryOrRegionName: string;
    procedure set_IncludeCountryOrRegionName(value: string);
    function get_ExcludedCountryOrRegionName: string;
    procedure set_ExcludedCountryOrRegionName(value: string);
    function get_NameAndAddressFormat: string;
    procedure set_NameAndAddressFormat(value: string);
    function get_LanguageId: string;
    procedure set_LanguageId(value: string);
    function get_Start: DNFieldStart;
    function get_Separator: DNFieldSeparator;
    function get_End: DNFieldEnd;
    function get_Type: DNFieldType;
    function get_Result: string;
    procedure set_Result(value: string);
    function get_DisplayResult: string;
    function get_IsLocked: Boolean;
    procedure set_IsLocked(value: Boolean);
    function get_IsDirty: Boolean;
    procedure set_IsDirty(value: Boolean);
    function get_Format: DNFieldFormat;
    function get_LocaleId: Int32;
    procedure set_LocaleId(value: Int32);

  { methods } 

    function GetFieldNames: TArray<string>;
    function GetFieldCode: string; overload;
    function GetFieldCode(includeChildFieldCodes: Boolean): string; overload;
    function Remove: DNNode;
    procedure Update; overload;
    procedure Update(ignoreMergeFormat: Boolean); overload;
    function Unlink: Boolean;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property FormatAddressOnCountryOrRegion: Boolean read get_FormatAddressOnCountryOrRegion write set_FormatAddressOnCountryOrRegion;
    property IncludeCountryOrRegionName: string read get_IncludeCountryOrRegionName write set_IncludeCountryOrRegionName;
    property ExcludedCountryOrRegionName: string read get_ExcludedCountryOrRegionName write set_ExcludedCountryOrRegionName;
    property NameAndAddressFormat: string read get_NameAndAddressFormat write set_NameAndAddressFormat;
    property LanguageId: string read get_LanguageId write set_LanguageId;
    property Start: DNFieldStart read get_Start;
    property Separator: DNFieldSeparator read get_Separator;
    property &End: DNFieldEnd read get_End;
    property &Type: DNFieldType read get_Type;
    property Result: string read get_Result write set_Result;
    property DisplayResult: string read get_DisplayResult;
    property IsLocked: Boolean read get_IsLocked write set_IsLocked;
    property IsDirty: Boolean read get_IsDirty write set_IsDirty;
    property Format: DNFieldFormat read get_Format;
    property LocaleId: Int32 read get_LocaleId write set_LocaleId;
  end;

  TDNFieldAddressBlock = class(TDNGenericImport<DNFieldAddressBlockClass, DNFieldAddressBlock>) end;

  //-------------namespace: Aspose.Words.Fields----------------
  DNFieldAdvanceClass = interface(DNFieldClass)
  ['{6B6F79B2-C6B8-5032-B35F-512C78159E34}']
  { constructors } 

    {class} function init: DNFieldAdvance;

  end;

  [DNTypeName('Aspose.Words.Fields.FieldAdvance')]
  DNFieldAdvance = interface(DNField)
  ['{2894E0BC-2D99-3E28-9440-534CFBAF7B9F}']
  { getters & setters } 

    function get_DownOffset: string;
    procedure set_DownOffset(value: string);
    function get_LeftOffset: string;
    procedure set_LeftOffset(value: string);
    function get_RightOffset: string;
    procedure set_RightOffset(value: string);
    function get_UpOffset: string;
    procedure set_UpOffset(value: string);
    function get_HorizontalPosition: string;
    procedure set_HorizontalPosition(value: string);
    function get_VerticalPosition: string;
    procedure set_VerticalPosition(value: string);
    function get_Start: DNFieldStart;
    function get_Separator: DNFieldSeparator;
    function get_End: DNFieldEnd;
    function get_Type: DNFieldType;
    function get_Result: string;
    procedure set_Result(value: string);
    function get_DisplayResult: string;
    function get_IsLocked: Boolean;
    procedure set_IsLocked(value: Boolean);
    function get_IsDirty: Boolean;
    procedure set_IsDirty(value: Boolean);
    function get_Format: DNFieldFormat;
    function get_LocaleId: Int32;
    procedure set_LocaleId(value: Int32);

  { methods } 

    function GetFieldCode: string; overload;
    function GetFieldCode(includeChildFieldCodes: Boolean): string; overload;
    function Remove: DNNode;
    procedure Update; overload;
    procedure Update(ignoreMergeFormat: Boolean); overload;
    function Unlink: Boolean;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property DownOffset: string read get_DownOffset write set_DownOffset;
    property LeftOffset: string read get_LeftOffset write set_LeftOffset;
    property RightOffset: string read get_RightOffset write set_RightOffset;
    property UpOffset: string read get_UpOffset write set_UpOffset;
    property HorizontalPosition: string read get_HorizontalPosition write set_HorizontalPosition;
    property VerticalPosition: string read get_VerticalPosition write set_VerticalPosition;
    property Start: DNFieldStart read get_Start;
    property Separator: DNFieldSeparator read get_Separator;
    property &End: DNFieldEnd read get_End;
    property &Type: DNFieldType read get_Type;
    property Result: string read get_Result write set_Result;
    property DisplayResult: string read get_DisplayResult;
    property IsLocked: Boolean read get_IsLocked write set_IsLocked;
    property IsDirty: Boolean read get_IsDirty write set_IsDirty;
    property Format: DNFieldFormat read get_Format;
    property LocaleId: Int32 read get_LocaleId write set_LocaleId;
  end;

  TDNFieldAdvance = class(TDNGenericImport<DNFieldAdvanceClass, DNFieldAdvance>) end;

  //-------------namespace: Aspose.Words.Fields----------------
  DNFieldAskClass = interface(DNFieldClass)
  ['{9D08BEFB-E239-51F2-B0F7-E9282257B2E1}']
  { constructors } 

    {class} function init: DNFieldAsk;

  end;

  [DNTypeName('Aspose.Words.Fields.FieldAsk')]
  DNFieldAsk = interface(DNField)
  ['{A85B5276-4983-3A4C-9469-63B0D4D7300B}']
  { getters & setters } 

    function get_BookmarkName: string;
    procedure set_BookmarkName(value: string);
    function get_PromptText: string;
    procedure set_PromptText(value: string);
    function get_DefaultResponse: string;
    procedure set_DefaultResponse(value: string);
    function get_PromptOnceOnMailMerge: Boolean;
    procedure set_PromptOnceOnMailMerge(value: Boolean);
    function get_Start: DNFieldStart;
    function get_Separator: DNFieldSeparator;
    function get_End: DNFieldEnd;
    function get_Type: DNFieldType;
    function get_Result: string;
    procedure set_Result(value: string);
    function get_DisplayResult: string;
    function get_IsLocked: Boolean;
    procedure set_IsLocked(value: Boolean);
    function get_IsDirty: Boolean;
    procedure set_IsDirty(value: Boolean);
    function get_Format: DNFieldFormat;
    function get_LocaleId: Int32;
    procedure set_LocaleId(value: Int32);

  { methods } 

    function GetFieldCode: string; overload;
    function GetFieldCode(includeChildFieldCodes: Boolean): string; overload;
    function Remove: DNNode;
    procedure Update; overload;
    procedure Update(ignoreMergeFormat: Boolean); overload;
    function Unlink: Boolean;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property BookmarkName: string read get_BookmarkName write set_BookmarkName;
    property PromptText: string read get_PromptText write set_PromptText;
    property DefaultResponse: string read get_DefaultResponse write set_DefaultResponse;
    property PromptOnceOnMailMerge: Boolean read get_PromptOnceOnMailMerge write set_PromptOnceOnMailMerge;
    property Start: DNFieldStart read get_Start;
    property Separator: DNFieldSeparator read get_Separator;
    property &End: DNFieldEnd read get_End;
    property &Type: DNFieldType read get_Type;
    property Result: string read get_Result write set_Result;
    property DisplayResult: string read get_DisplayResult;
    property IsLocked: Boolean read get_IsLocked write set_IsLocked;
    property IsDirty: Boolean read get_IsDirty write set_IsDirty;
    property Format: DNFieldFormat read get_Format;
    property LocaleId: Int32 read get_LocaleId write set_LocaleId;
  end;

  TDNFieldAsk = class(TDNGenericImport<DNFieldAskClass, DNFieldAsk>) end;

  //-------------namespace: Aspose.Words.Fields----------------
  DNFieldAuthorClass = interface(DNFieldClass)
  ['{FF48DD4C-990F-574A-8C94-53E2BD53D20B}']
  { constructors } 

    {class} function init: DNFieldAuthor;

  end;

  [DNTypeName('Aspose.Words.Fields.FieldAuthor')]
  DNFieldAuthor = interface(DNField)
  ['{1DEAEA38-C2A2-3405-8977-FFD22230DEA8}']
  { getters & setters } 

    function get_AuthorName: string;
    procedure set_AuthorName(value: string);
    function get_Start: DNFieldStart;
    function get_Separator: DNFieldSeparator;
    function get_End: DNFieldEnd;
    function get_Type: DNFieldType;
    function get_Result: string;
    procedure set_Result(value: string);
    function get_DisplayResult: string;
    function get_IsLocked: Boolean;
    procedure set_IsLocked(value: Boolean);
    function get_IsDirty: Boolean;
    procedure set_IsDirty(value: Boolean);
    function get_Format: DNFieldFormat;
    function get_LocaleId: Int32;
    procedure set_LocaleId(value: Int32);

  { methods } 

    function GetFieldCode: string; overload;
    function GetFieldCode(includeChildFieldCodes: Boolean): string; overload;
    function Remove: DNNode;
    procedure Update; overload;
    procedure Update(ignoreMergeFormat: Boolean); overload;
    function Unlink: Boolean;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property AuthorName: string read get_AuthorName write set_AuthorName;
    property Start: DNFieldStart read get_Start;
    property Separator: DNFieldSeparator read get_Separator;
    property &End: DNFieldEnd read get_End;
    property &Type: DNFieldType read get_Type;
    property Result: string read get_Result write set_Result;
    property DisplayResult: string read get_DisplayResult;
    property IsLocked: Boolean read get_IsLocked write set_IsLocked;
    property IsDirty: Boolean read get_IsDirty write set_IsDirty;
    property Format: DNFieldFormat read get_Format;
    property LocaleId: Int32 read get_LocaleId write set_LocaleId;
  end;

  TDNFieldAuthor = class(TDNGenericImport<DNFieldAuthorClass, DNFieldAuthor>) end;

  //-------------namespace: Aspose.Words.Fields----------------
  DNFieldAutoNumClass = interface(DNFieldClass)
  ['{759BDAB4-448F-5A2A-94E4-EC275ADE20E0}']
  { constructors } 

    {class} function init: DNFieldAutoNum;

  end;

  [DNTypeName('Aspose.Words.Fields.FieldAutoNum')]
  DNFieldAutoNum = interface(DNField)
  ['{71A59ADA-5A60-3806-9B8E-8F40F775BAF8}']
  { getters & setters } 

    function get_SeparatorCharacter: string;
    procedure set_SeparatorCharacter(value: string);
    function get_Start: DNFieldStart;
    function get_Separator: DNFieldSeparator;
    function get_End: DNFieldEnd;
    function get_Type: DNFieldType;
    function get_Result: string;
    procedure set_Result(value: string);
    function get_DisplayResult: string;
    function get_IsLocked: Boolean;
    procedure set_IsLocked(value: Boolean);
    function get_IsDirty: Boolean;
    procedure set_IsDirty(value: Boolean);
    function get_Format: DNFieldFormat;
    function get_LocaleId: Int32;
    procedure set_LocaleId(value: Int32);

  { methods } 

    function GetFieldCode: string; overload;
    function GetFieldCode(includeChildFieldCodes: Boolean): string; overload;
    function Remove: DNNode;
    procedure Update; overload;
    procedure Update(ignoreMergeFormat: Boolean); overload;
    function Unlink: Boolean;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property SeparatorCharacter: string read get_SeparatorCharacter write set_SeparatorCharacter;
    property Start: DNFieldStart read get_Start;
    property Separator: DNFieldSeparator read get_Separator;
    property &End: DNFieldEnd read get_End;
    property &Type: DNFieldType read get_Type;
    property Result: string read get_Result write set_Result;
    property DisplayResult: string read get_DisplayResult;
    property IsLocked: Boolean read get_IsLocked write set_IsLocked;
    property IsDirty: Boolean read get_IsDirty write set_IsDirty;
    property Format: DNFieldFormat read get_Format;
    property LocaleId: Int32 read get_LocaleId write set_LocaleId;
  end;

  TDNFieldAutoNum = class(TDNGenericImport<DNFieldAutoNumClass, DNFieldAutoNum>) end;

  //-------------namespace: Aspose.Words.Fields----------------
  DNFieldAutoNumLglClass = interface(DNFieldClass)
  ['{E48AFDE4-46F5-5BA1-85F2-169900CEE000}']
  { constructors } 

    {class} function init: DNFieldAutoNumLgl;

  end;

  [DNTypeName('Aspose.Words.Fields.FieldAutoNumLgl')]
  DNFieldAutoNumLgl = interface(DNField)
  ['{C8D67FAD-ECF3-3719-875C-175858A0F493}']
  { getters & setters } 

    function get_RemoveTrailingPeriod: Boolean;
    procedure set_RemoveTrailingPeriod(value: Boolean);
    function get_SeparatorCharacter: string;
    procedure set_SeparatorCharacter(value: string);
    function get_Start: DNFieldStart;
    function get_Separator: DNFieldSeparator;
    function get_End: DNFieldEnd;
    function get_Type: DNFieldType;
    function get_Result: string;
    procedure set_Result(value: string);
    function get_DisplayResult: string;
    function get_IsLocked: Boolean;
    procedure set_IsLocked(value: Boolean);
    function get_IsDirty: Boolean;
    procedure set_IsDirty(value: Boolean);
    function get_Format: DNFieldFormat;
    function get_LocaleId: Int32;
    procedure set_LocaleId(value: Int32);

  { methods } 

    function GetFieldCode: string; overload;
    function GetFieldCode(includeChildFieldCodes: Boolean): string; overload;
    function Remove: DNNode;
    procedure Update; overload;
    procedure Update(ignoreMergeFormat: Boolean); overload;
    function Unlink: Boolean;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property RemoveTrailingPeriod: Boolean read get_RemoveTrailingPeriod write set_RemoveTrailingPeriod;
    property SeparatorCharacter: string read get_SeparatorCharacter write set_SeparatorCharacter;
    property Start: DNFieldStart read get_Start;
    property Separator: DNFieldSeparator read get_Separator;
    property &End: DNFieldEnd read get_End;
    property &Type: DNFieldType read get_Type;
    property Result: string read get_Result write set_Result;
    property DisplayResult: string read get_DisplayResult;
    property IsLocked: Boolean read get_IsLocked write set_IsLocked;
    property IsDirty: Boolean read get_IsDirty write set_IsDirty;
    property Format: DNFieldFormat read get_Format;
    property LocaleId: Int32 read get_LocaleId write set_LocaleId;
  end;

  TDNFieldAutoNumLgl = class(TDNGenericImport<DNFieldAutoNumLglClass, DNFieldAutoNumLgl>) end;

  //-------------namespace: Aspose.Words.Fields----------------
  DNFieldAutoNumOutClass = interface(DNFieldClass)
  ['{D97314B1-F319-5411-ABA6-F9596190C157}']
  { constructors } 

    {class} function init: DNFieldAutoNumOut;

  end;

  [DNTypeName('Aspose.Words.Fields.FieldAutoNumOut')]
  DNFieldAutoNumOut = interface(DNField)
  ['{E12540DA-3962-3C1B-A861-5593B1B3BA5D}']
  { getters & setters } 

    function get_Start: DNFieldStart;
    function get_Separator: DNFieldSeparator;
    function get_End: DNFieldEnd;
    function get_Type: DNFieldType;
    function get_Result: string;
    procedure set_Result(value: string);
    function get_DisplayResult: string;
    function get_IsLocked: Boolean;
    procedure set_IsLocked(value: Boolean);
    function get_IsDirty: Boolean;
    procedure set_IsDirty(value: Boolean);
    function get_Format: DNFieldFormat;
    function get_LocaleId: Int32;
    procedure set_LocaleId(value: Int32);

  { methods } 

    function GetFieldCode: string; overload;
    function GetFieldCode(includeChildFieldCodes: Boolean): string; overload;
    function Remove: DNNode;
    procedure Update; overload;
    procedure Update(ignoreMergeFormat: Boolean); overload;
    function Unlink: Boolean;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Start: DNFieldStart read get_Start;
    property Separator: DNFieldSeparator read get_Separator;
    property &End: DNFieldEnd read get_End;
    property &Type: DNFieldType read get_Type;
    property Result: string read get_Result write set_Result;
    property DisplayResult: string read get_DisplayResult;
    property IsLocked: Boolean read get_IsLocked write set_IsLocked;
    property IsDirty: Boolean read get_IsDirty write set_IsDirty;
    property Format: DNFieldFormat read get_Format;
    property LocaleId: Int32 read get_LocaleId write set_LocaleId;
  end;

  TDNFieldAutoNumOut = class(TDNGenericImport<DNFieldAutoNumOutClass, DNFieldAutoNumOut>) end;

  //-------------namespace: Aspose.Words.Fields----------------
  DNFieldAutoTextClass = interface(DNFieldClass)
  ['{CB955D7C-919A-517E-8DE5-7C7079E1DD93}']
  { constructors } 

    {class} function init: DNFieldAutoText;

  end;

  [DNTypeName('Aspose.Words.Fields.FieldAutoText')]
  DNFieldAutoText = interface(DNField)
  ['{DFF9D88C-8259-357D-A80C-B83F47433086}']
  { getters & setters } 

    function get_EntryName: string;
    procedure set_EntryName(value: string);
    function get_Start: DNFieldStart;
    function get_Separator: DNFieldSeparator;
    function get_End: DNFieldEnd;
    function get_Type: DNFieldType;
    function get_Result: string;
    procedure set_Result(value: string);
    function get_DisplayResult: string;
    function get_IsLocked: Boolean;
    procedure set_IsLocked(value: Boolean);
    function get_IsDirty: Boolean;
    procedure set_IsDirty(value: Boolean);
    function get_Format: DNFieldFormat;
    function get_LocaleId: Int32;
    procedure set_LocaleId(value: Int32);

  { methods } 

    function GetFieldCode: string; overload;
    function GetFieldCode(includeChildFieldCodes: Boolean): string; overload;
    function Remove: DNNode;
    procedure Update; overload;
    procedure Update(ignoreMergeFormat: Boolean); overload;
    function Unlink: Boolean;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property EntryName: string read get_EntryName write set_EntryName;
    property Start: DNFieldStart read get_Start;
    property Separator: DNFieldSeparator read get_Separator;
    property &End: DNFieldEnd read get_End;
    property &Type: DNFieldType read get_Type;
    property Result: string read get_Result write set_Result;
    property DisplayResult: string read get_DisplayResult;
    property IsLocked: Boolean read get_IsLocked write set_IsLocked;
    property IsDirty: Boolean read get_IsDirty write set_IsDirty;
    property Format: DNFieldFormat read get_Format;
    property LocaleId: Int32 read get_LocaleId write set_LocaleId;
  end;

  TDNFieldAutoText = class(TDNGenericImport<DNFieldAutoTextClass, DNFieldAutoText>) end;

  //-------------namespace: Aspose.Words.Fields----------------
  DNFieldAutoTextListClass = interface(DNFieldClass)
  ['{B3D5C7CC-DD0E-537B-B272-2EF542E8E16A}']
  { constructors } 

    {class} function init: DNFieldAutoTextList;

  end;

  [DNTypeName('Aspose.Words.Fields.FieldAutoTextList')]
  DNFieldAutoTextList = interface(DNField)
  ['{4E87F851-01C5-36B0-B33F-75E2C85DDFD4}']
  { getters & setters } 

    function get_EntryName: string;
    procedure set_EntryName(value: string);
    function get_ListStyle: string;
    procedure set_ListStyle(value: string);
    function get_ScreenTip: string;
    procedure set_ScreenTip(value: string);
    function get_Start: DNFieldStart;
    function get_Separator: DNFieldSeparator;
    function get_End: DNFieldEnd;
    function get_Type: DNFieldType;
    function get_Result: string;
    procedure set_Result(value: string);
    function get_DisplayResult: string;
    function get_IsLocked: Boolean;
    procedure set_IsLocked(value: Boolean);
    function get_IsDirty: Boolean;
    procedure set_IsDirty(value: Boolean);
    function get_Format: DNFieldFormat;
    function get_LocaleId: Int32;
    procedure set_LocaleId(value: Int32);

  { methods } 

    function GetFieldCode: string; overload;
    function GetFieldCode(includeChildFieldCodes: Boolean): string; overload;
    function Remove: DNNode;
    procedure Update; overload;
    procedure Update(ignoreMergeFormat: Boolean); overload;
    function Unlink: Boolean;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property EntryName: string read get_EntryName write set_EntryName;
    property ListStyle: string read get_ListStyle write set_ListStyle;
    property ScreenTip: string read get_ScreenTip write set_ScreenTip;
    property Start: DNFieldStart read get_Start;
    property Separator: DNFieldSeparator read get_Separator;
    property &End: DNFieldEnd read get_End;
    property &Type: DNFieldType read get_Type;
    property Result: string read get_Result write set_Result;
    property DisplayResult: string read get_DisplayResult;
    property IsLocked: Boolean read get_IsLocked write set_IsLocked;
    property IsDirty: Boolean read get_IsDirty write set_IsDirty;
    property Format: DNFieldFormat read get_Format;
    property LocaleId: Int32 read get_LocaleId write set_LocaleId;
  end;

  TDNFieldAutoTextList = class(TDNGenericImport<DNFieldAutoTextListClass, DNFieldAutoTextList>) end;

  //-------------namespace: Aspose.Words.Fields----------------
  DNFieldBarcodeClass = interface(DNFieldClass)
  ['{7CDABC97-745E-5079-909C-078A82F2B4B8}']
  { constructors } 

    {class} function init: DNFieldBarcode;

  end;

  [DNTypeName('Aspose.Words.Fields.FieldBarcode')]
  DNFieldBarcode = interface(DNField)
  ['{C48961D5-5D42-3500-A8B6-3259D7572745}']
  { getters & setters } 

    function get_PostalAddress: string;
    procedure set_PostalAddress(value: string);
    function get_IsBookmark: Boolean;
    procedure set_IsBookmark(value: Boolean);
    function get_FacingIdentificationMark: string;
    procedure set_FacingIdentificationMark(value: string);
    function get_IsUSPostalAddress: Boolean;
    procedure set_IsUSPostalAddress(value: Boolean);
    function get_Start: DNFieldStart;
    function get_Separator: DNFieldSeparator;
    function get_End: DNFieldEnd;
    function get_Type: DNFieldType;
    function get_Result: string;
    procedure set_Result(value: string);
    function get_DisplayResult: string;
    function get_IsLocked: Boolean;
    procedure set_IsLocked(value: Boolean);
    function get_IsDirty: Boolean;
    procedure set_IsDirty(value: Boolean);
    function get_Format: DNFieldFormat;
    function get_LocaleId: Int32;
    procedure set_LocaleId(value: Int32);

  { methods } 

    function GetFieldCode: string; overload;
    function GetFieldCode(includeChildFieldCodes: Boolean): string; overload;
    function Remove: DNNode;
    procedure Update; overload;
    procedure Update(ignoreMergeFormat: Boolean); overload;
    function Unlink: Boolean;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property PostalAddress: string read get_PostalAddress write set_PostalAddress;
    property IsBookmark: Boolean read get_IsBookmark write set_IsBookmark;
    property FacingIdentificationMark: string read get_FacingIdentificationMark write set_FacingIdentificationMark;
    property IsUSPostalAddress: Boolean read get_IsUSPostalAddress write set_IsUSPostalAddress;
    property Start: DNFieldStart read get_Start;
    property Separator: DNFieldSeparator read get_Separator;
    property &End: DNFieldEnd read get_End;
    property &Type: DNFieldType read get_Type;
    property Result: string read get_Result write set_Result;
    property DisplayResult: string read get_DisplayResult;
    property IsLocked: Boolean read get_IsLocked write set_IsLocked;
    property IsDirty: Boolean read get_IsDirty write set_IsDirty;
    property Format: DNFieldFormat read get_Format;
    property LocaleId: Int32 read get_LocaleId write set_LocaleId;
  end;

  TDNFieldBarcode = class(TDNGenericImport<DNFieldBarcodeClass, DNFieldBarcode>) end;

  //-------------namespace: Aspose.Words.Fields----------------
  DNFieldBibliographyClass = interface(DNFieldClass)
  ['{8E1E9A17-0D3A-563C-8A98-85BFD8F53D76}']
  { constructors } 

    {class} function init: DNFieldBibliography;

  end;

  [DNTypeName('Aspose.Words.Fields.FieldBibliography')]
  DNFieldBibliography = interface(DNField)
  ['{A844C3A9-967F-315A-A84E-58BC59524C1A}']
  { getters & setters } 

    function get_FormatLanguageId: string;
    procedure set_FormatLanguageId(value: string);
    function get_Start: DNFieldStart;
    function get_Separator: DNFieldSeparator;
    function get_End: DNFieldEnd;
    function get_Type: DNFieldType;
    function get_Result: string;
    procedure set_Result(value: string);
    function get_DisplayResult: string;
    function get_IsLocked: Boolean;
    procedure set_IsLocked(value: Boolean);
    function get_IsDirty: Boolean;
    procedure set_IsDirty(value: Boolean);
    function get_Format: DNFieldFormat;
    function get_LocaleId: Int32;
    procedure set_LocaleId(value: Int32);

  { methods } 

    function GetFieldCode: string; overload;
    function GetFieldCode(includeChildFieldCodes: Boolean): string; overload;
    function Remove: DNNode;
    procedure Update; overload;
    procedure Update(ignoreMergeFormat: Boolean); overload;
    function Unlink: Boolean;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property FormatLanguageId: string read get_FormatLanguageId write set_FormatLanguageId;
    property Start: DNFieldStart read get_Start;
    property Separator: DNFieldSeparator read get_Separator;
    property &End: DNFieldEnd read get_End;
    property &Type: DNFieldType read get_Type;
    property Result: string read get_Result write set_Result;
    property DisplayResult: string read get_DisplayResult;
    property IsLocked: Boolean read get_IsLocked write set_IsLocked;
    property IsDirty: Boolean read get_IsDirty write set_IsDirty;
    property Format: DNFieldFormat read get_Format;
    property LocaleId: Int32 read get_LocaleId write set_LocaleId;
  end;

  TDNFieldBibliography = class(TDNGenericImport<DNFieldBibliographyClass, DNFieldBibliography>) end;

  //-------------namespace: Aspose.Words.Fields----------------
  DNFieldBidiOutlineClass = interface(DNFieldClass)
  ['{055C022F-1356-5153-AC64-8177D680E1CD}']
  { constructors } 

    {class} function init: DNFieldBidiOutline;

  end;

  [DNTypeName('Aspose.Words.Fields.FieldBidiOutline')]
  DNFieldBidiOutline = interface(DNField)
  ['{B78597AE-44B1-3897-A7F8-FA1A04F7175A}']
  { getters & setters } 

    function get_Start: DNFieldStart;
    function get_Separator: DNFieldSeparator;
    function get_End: DNFieldEnd;
    function get_Type: DNFieldType;
    function get_Result: string;
    procedure set_Result(value: string);
    function get_DisplayResult: string;
    function get_IsLocked: Boolean;
    procedure set_IsLocked(value: Boolean);
    function get_IsDirty: Boolean;
    procedure set_IsDirty(value: Boolean);
    function get_Format: DNFieldFormat;
    function get_LocaleId: Int32;
    procedure set_LocaleId(value: Int32);

  { methods } 

    function GetFieldCode: string; overload;
    function GetFieldCode(includeChildFieldCodes: Boolean): string; overload;
    function Remove: DNNode;
    procedure Update; overload;
    procedure Update(ignoreMergeFormat: Boolean); overload;
    function Unlink: Boolean;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Start: DNFieldStart read get_Start;
    property Separator: DNFieldSeparator read get_Separator;
    property &End: DNFieldEnd read get_End;
    property &Type: DNFieldType read get_Type;
    property Result: string read get_Result write set_Result;
    property DisplayResult: string read get_DisplayResult;
    property IsLocked: Boolean read get_IsLocked write set_IsLocked;
    property IsDirty: Boolean read get_IsDirty write set_IsDirty;
    property Format: DNFieldFormat read get_Format;
    property LocaleId: Int32 read get_LocaleId write set_LocaleId;
  end;

  TDNFieldBidiOutline = class(TDNGenericImport<DNFieldBidiOutlineClass, DNFieldBidiOutline>) end;

  //-------------namespace: Aspose.Words.Fields----------------
  DNFieldCitationClass = interface(DNFieldClass)
  ['{D0F73E71-C31A-5E6E-A68C-0F7F14F1B09C}']
  { constructors } 

    {class} function init: DNFieldCitation;

  end;

  [DNTypeName('Aspose.Words.Fields.FieldCitation')]
  DNFieldCitation = interface(DNField)
  ['{5F73992B-A27E-3E8B-B511-CD3C9020E96B}']
  { getters & setters } 

    function get_SourceTag: string;
    procedure set_SourceTag(value: string);
    function get_FormatLanguageId: string;
    procedure set_FormatLanguageId(value: string);
    function get_Prefix: string;
    procedure set_Prefix(value: string);
    function get_Suffix: string;
    procedure set_Suffix(value: string);
    function get_SuppressAuthor: Boolean;
    procedure set_SuppressAuthor(value: Boolean);
    function get_SuppressTitle: Boolean;
    procedure set_SuppressTitle(value: Boolean);
    function get_SuppressYear: Boolean;
    procedure set_SuppressYear(value: Boolean);
    function get_PageNumber: string;
    procedure set_PageNumber(value: string);
    function get_VolumeNumber: string;
    procedure set_VolumeNumber(value: string);
    function get_AnotherSourceTag: string;
    procedure set_AnotherSourceTag(value: string);
    function get_Start: DNFieldStart;
    function get_Separator: DNFieldSeparator;
    function get_End: DNFieldEnd;
    function get_Type: DNFieldType;
    function get_Result: string;
    procedure set_Result(value: string);
    function get_DisplayResult: string;
    function get_IsLocked: Boolean;
    procedure set_IsLocked(value: Boolean);
    function get_IsDirty: Boolean;
    procedure set_IsDirty(value: Boolean);
    function get_Format: DNFieldFormat;
    function get_LocaleId: Int32;
    procedure set_LocaleId(value: Int32);

  { methods } 

    function GetFieldCode: string; overload;
    function GetFieldCode(includeChildFieldCodes: Boolean): string; overload;
    function Remove: DNNode;
    procedure Update; overload;
    procedure Update(ignoreMergeFormat: Boolean); overload;
    function Unlink: Boolean;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property SourceTag: string read get_SourceTag write set_SourceTag;
    property FormatLanguageId: string read get_FormatLanguageId write set_FormatLanguageId;
    property Prefix: string read get_Prefix write set_Prefix;
    property Suffix: string read get_Suffix write set_Suffix;
    property SuppressAuthor: Boolean read get_SuppressAuthor write set_SuppressAuthor;
    property SuppressTitle: Boolean read get_SuppressTitle write set_SuppressTitle;
    property SuppressYear: Boolean read get_SuppressYear write set_SuppressYear;
    property PageNumber: string read get_PageNumber write set_PageNumber;
    property VolumeNumber: string read get_VolumeNumber write set_VolumeNumber;
    property AnotherSourceTag: string read get_AnotherSourceTag write set_AnotherSourceTag;
    property Start: DNFieldStart read get_Start;
    property Separator: DNFieldSeparator read get_Separator;
    property &End: DNFieldEnd read get_End;
    property &Type: DNFieldType read get_Type;
    property Result: string read get_Result write set_Result;
    property DisplayResult: string read get_DisplayResult;
    property IsLocked: Boolean read get_IsLocked write set_IsLocked;
    property IsDirty: Boolean read get_IsDirty write set_IsDirty;
    property Format: DNFieldFormat read get_Format;
    property LocaleId: Int32 read get_LocaleId write set_LocaleId;
  end;

  TDNFieldCitation = class(TDNGenericImport<DNFieldCitationClass, DNFieldCitation>) end;

  //-------------namespace: Aspose.Words.Fields----------------
  DNFieldCommentsClass = interface(DNFieldClass)
  ['{7F747C94-1C21-5544-AACB-D69C0378DC63}']
  { constructors } 

    {class} function init: DNFieldComments;

  end;

  [DNTypeName('Aspose.Words.Fields.FieldComments')]
  DNFieldComments = interface(DNField)
  ['{F7575D18-0228-386F-B123-16E9DDDA313F}']
  { getters & setters } 

    function get_Text: string;
    procedure set_Text(value: string);
    function get_Start: DNFieldStart;
    function get_Separator: DNFieldSeparator;
    function get_End: DNFieldEnd;
    function get_Type: DNFieldType;
    function get_Result: string;
    procedure set_Result(value: string);
    function get_DisplayResult: string;
    function get_IsLocked: Boolean;
    procedure set_IsLocked(value: Boolean);
    function get_IsDirty: Boolean;
    procedure set_IsDirty(value: Boolean);
    function get_Format: DNFieldFormat;
    function get_LocaleId: Int32;
    procedure set_LocaleId(value: Int32);

  { methods } 

    function GetFieldCode: string; overload;
    function GetFieldCode(includeChildFieldCodes: Boolean): string; overload;
    function Remove: DNNode;
    procedure Update; overload;
    procedure Update(ignoreMergeFormat: Boolean); overload;
    function Unlink: Boolean;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Text: string read get_Text write set_Text;
    property Start: DNFieldStart read get_Start;
    property Separator: DNFieldSeparator read get_Separator;
    property &End: DNFieldEnd read get_End;
    property &Type: DNFieldType read get_Type;
    property Result: string read get_Result write set_Result;
    property DisplayResult: string read get_DisplayResult;
    property IsLocked: Boolean read get_IsLocked write set_IsLocked;
    property IsDirty: Boolean read get_IsDirty write set_IsDirty;
    property Format: DNFieldFormat read get_Format;
    property LocaleId: Int32 read get_LocaleId write set_LocaleId;
  end;

  TDNFieldComments = class(TDNGenericImport<DNFieldCommentsClass, DNFieldComments>) end;

  //-------------namespace: Aspose.Words.Fields----------------
  DNFieldCompareClass = interface(DNFieldClass)
  ['{78767D18-3147-596B-8053-944FCE5EDE2F}']
  { constructors } 

    {class} function init: DNFieldCompare;

  end;

  [DNTypeName('Aspose.Words.Fields.FieldCompare')]
  DNFieldCompare = interface(DNField)
  ['{E6B34847-1A7B-3C66-AF21-926AC4827652}']
  { getters & setters } 

    function get_LeftExpression: string;
    procedure set_LeftExpression(value: string);
    function get_ComparisonOperator: string;
    procedure set_ComparisonOperator(value: string);
    function get_RightExpression: string;
    procedure set_RightExpression(value: string);
    function get_Start: DNFieldStart;
    function get_Separator: DNFieldSeparator;
    function get_End: DNFieldEnd;
    function get_Type: DNFieldType;
    function get_Result: string;
    procedure set_Result(value: string);
    function get_DisplayResult: string;
    function get_IsLocked: Boolean;
    procedure set_IsLocked(value: Boolean);
    function get_IsDirty: Boolean;
    procedure set_IsDirty(value: Boolean);
    function get_Format: DNFieldFormat;
    function get_LocaleId: Int32;
    procedure set_LocaleId(value: Int32);

  { methods } 

    function GetFieldCode: string; overload;
    function GetFieldCode(includeChildFieldCodes: Boolean): string; overload;
    function Remove: DNNode;
    procedure Update; overload;
    procedure Update(ignoreMergeFormat: Boolean); overload;
    function Unlink: Boolean;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property LeftExpression: string read get_LeftExpression write set_LeftExpression;
    property ComparisonOperator: string read get_ComparisonOperator write set_ComparisonOperator;
    property RightExpression: string read get_RightExpression write set_RightExpression;
    property Start: DNFieldStart read get_Start;
    property Separator: DNFieldSeparator read get_Separator;
    property &End: DNFieldEnd read get_End;
    property &Type: DNFieldType read get_Type;
    property Result: string read get_Result write set_Result;
    property DisplayResult: string read get_DisplayResult;
    property IsLocked: Boolean read get_IsLocked write set_IsLocked;
    property IsDirty: Boolean read get_IsDirty write set_IsDirty;
    property Format: DNFieldFormat read get_Format;
    property LocaleId: Int32 read get_LocaleId write set_LocaleId;
  end;

  TDNFieldCompare = class(TDNGenericImport<DNFieldCompareClass, DNFieldCompare>) end;

  //-------------namespace: Aspose.Words.Fields----------------
  DNFieldCreateDateClass = interface(DNFieldClass)
  ['{6A77BA44-3892-5C64-9139-C4D5F05DEC0C}']
  { constructors } 

    {class} function init: DNFieldCreateDate;

  end;

  [DNTypeName('Aspose.Words.Fields.FieldCreateDate')]
  DNFieldCreateDate = interface(DNField)
  ['{D509863E-6031-33E8-8B8A-E85317D4D11A}']
  { getters & setters } 

    function get_UseLunarCalendar: Boolean;
    procedure set_UseLunarCalendar(value: Boolean);
    function get_UseSakaEraCalendar: Boolean;
    procedure set_UseSakaEraCalendar(value: Boolean);
    function get_UseUmAlQuraCalendar: Boolean;
    procedure set_UseUmAlQuraCalendar(value: Boolean);
    function get_Start: DNFieldStart;
    function get_Separator: DNFieldSeparator;
    function get_End: DNFieldEnd;
    function get_Type: DNFieldType;
    function get_Result: string;
    procedure set_Result(value: string);
    function get_DisplayResult: string;
    function get_IsLocked: Boolean;
    procedure set_IsLocked(value: Boolean);
    function get_IsDirty: Boolean;
    procedure set_IsDirty(value: Boolean);
    function get_Format: DNFieldFormat;
    function get_LocaleId: Int32;
    procedure set_LocaleId(value: Int32);

  { methods } 

    function GetFieldCode: string; overload;
    function GetFieldCode(includeChildFieldCodes: Boolean): string; overload;
    function Remove: DNNode;
    procedure Update; overload;
    procedure Update(ignoreMergeFormat: Boolean); overload;
    function Unlink: Boolean;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property UseLunarCalendar: Boolean read get_UseLunarCalendar write set_UseLunarCalendar;
    property UseSakaEraCalendar: Boolean read get_UseSakaEraCalendar write set_UseSakaEraCalendar;
    property UseUmAlQuraCalendar: Boolean read get_UseUmAlQuraCalendar write set_UseUmAlQuraCalendar;
    property Start: DNFieldStart read get_Start;
    property Separator: DNFieldSeparator read get_Separator;
    property &End: DNFieldEnd read get_End;
    property &Type: DNFieldType read get_Type;
    property Result: string read get_Result write set_Result;
    property DisplayResult: string read get_DisplayResult;
    property IsLocked: Boolean read get_IsLocked write set_IsLocked;
    property IsDirty: Boolean read get_IsDirty write set_IsDirty;
    property Format: DNFieldFormat read get_Format;
    property LocaleId: Int32 read get_LocaleId write set_LocaleId;
  end;

  TDNFieldCreateDate = class(TDNGenericImport<DNFieldCreateDateClass, DNFieldCreateDate>) end;

  //-------------namespace: Aspose.Words.Fields----------------
  DNFieldDataClass = interface(DNFieldClass)
  ['{2EF6A561-4727-5C1D-841E-06507014829E}']
  { constructors } 

    {class} function init: DNFieldData;

  end;

  [DNTypeName('Aspose.Words.Fields.FieldData')]
  DNFieldData = interface(DNField)
  ['{2510FC93-D8FD-3F5A-B9B9-B786DF37EAF0}']
  { getters & setters } 

    function get_Start: DNFieldStart;
    function get_Separator: DNFieldSeparator;
    function get_End: DNFieldEnd;
    function get_Type: DNFieldType;
    function get_Result: string;
    procedure set_Result(value: string);
    function get_DisplayResult: string;
    function get_IsLocked: Boolean;
    procedure set_IsLocked(value: Boolean);
    function get_IsDirty: Boolean;
    procedure set_IsDirty(value: Boolean);
    function get_Format: DNFieldFormat;
    function get_LocaleId: Int32;
    procedure set_LocaleId(value: Int32);

  { methods } 

    function GetFieldCode: string; overload;
    function GetFieldCode(includeChildFieldCodes: Boolean): string; overload;
    function Remove: DNNode;
    procedure Update; overload;
    procedure Update(ignoreMergeFormat: Boolean); overload;
    function Unlink: Boolean;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Start: DNFieldStart read get_Start;
    property Separator: DNFieldSeparator read get_Separator;
    property &End: DNFieldEnd read get_End;
    property &Type: DNFieldType read get_Type;
    property Result: string read get_Result write set_Result;
    property DisplayResult: string read get_DisplayResult;
    property IsLocked: Boolean read get_IsLocked write set_IsLocked;
    property IsDirty: Boolean read get_IsDirty write set_IsDirty;
    property Format: DNFieldFormat read get_Format;
    property LocaleId: Int32 read get_LocaleId write set_LocaleId;
  end;

  TDNFieldData = class(TDNGenericImport<DNFieldDataClass, DNFieldData>) end;

  //-------------namespace: Aspose.Words.Fields----------------
  DNFieldDatabaseClass = interface(DNFieldClass)
  ['{533C701D-1B92-5581-A947-3CC6349FB451}']
  { constructors } 

    {class} function init: DNFieldDatabase;

  end;

  [DNTypeName('Aspose.Words.Fields.FieldDatabase')]
  DNFieldDatabase = interface(DNField)
  ['{E9B70AF2-77CE-3095-835B-1D92F55E616E}']
  { getters & setters } 

    function get_FormatAttributes: string;
    procedure set_FormatAttributes(value: string);
    function get_Connection: string;
    procedure set_Connection(value: string);
    function get_FileName: string;
    procedure set_FileName(value: string);
    function get_FirstRecord: string;
    procedure set_FirstRecord(value: string);
    function get_InsertHeadings: Boolean;
    procedure set_InsertHeadings(value: Boolean);
    function get_TableFormat: string;
    procedure set_TableFormat(value: string);
    function get_InsertOnceOnMailMerge: Boolean;
    procedure set_InsertOnceOnMailMerge(value: Boolean);
    function get_Query: string;
    procedure set_Query(value: string);
    function get_LastRecord: string;
    procedure set_LastRecord(value: string);
    function get_Start: DNFieldStart;
    function get_Separator: DNFieldSeparator;
    function get_End: DNFieldEnd;
    function get_Type: DNFieldType;
    function get_Result: string;
    procedure set_Result(value: string);
    function get_DisplayResult: string;
    function get_IsLocked: Boolean;
    procedure set_IsLocked(value: Boolean);
    function get_IsDirty: Boolean;
    procedure set_IsDirty(value: Boolean);
    function get_Format: DNFieldFormat;
    function get_LocaleId: Int32;
    procedure set_LocaleId(value: Int32);

  { methods } 

    function GetFieldCode: string; overload;
    function GetFieldCode(includeChildFieldCodes: Boolean): string; overload;
    function Remove: DNNode;
    procedure Update; overload;
    procedure Update(ignoreMergeFormat: Boolean); overload;
    function Unlink: Boolean;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property FormatAttributes: string read get_FormatAttributes write set_FormatAttributes;
    property Connection: string read get_Connection write set_Connection;
    property FileName: string read get_FileName write set_FileName;
    property FirstRecord: string read get_FirstRecord write set_FirstRecord;
    property InsertHeadings: Boolean read get_InsertHeadings write set_InsertHeadings;
    property TableFormat: string read get_TableFormat write set_TableFormat;
    property InsertOnceOnMailMerge: Boolean read get_InsertOnceOnMailMerge write set_InsertOnceOnMailMerge;
    property Query: string read get_Query write set_Query;
    property LastRecord: string read get_LastRecord write set_LastRecord;
    property Start: DNFieldStart read get_Start;
    property Separator: DNFieldSeparator read get_Separator;
    property &End: DNFieldEnd read get_End;
    property &Type: DNFieldType read get_Type;
    property Result: string read get_Result write set_Result;
    property DisplayResult: string read get_DisplayResult;
    property IsLocked: Boolean read get_IsLocked write set_IsLocked;
    property IsDirty: Boolean read get_IsDirty write set_IsDirty;
    property Format: DNFieldFormat read get_Format;
    property LocaleId: Int32 read get_LocaleId write set_LocaleId;
  end;

  TDNFieldDatabase = class(TDNGenericImport<DNFieldDatabaseClass, DNFieldDatabase>) end;

  //-------------namespace: Aspose.Words.Fields----------------
  DNFieldDateClass = interface(DNFieldClass)
  ['{3C76FB40-2C7E-5021-85CF-7BB91DAC3642}']
  { constructors } 

    {class} function init: DNFieldDate;

  end;

  [DNTypeName('Aspose.Words.Fields.FieldDate')]
  DNFieldDate = interface(DNField)
  ['{73F914F8-E864-328F-BCA4-D07EFA609B05}']
  { getters & setters } 

    function get_UseLunarCalendar: Boolean;
    procedure set_UseLunarCalendar(value: Boolean);
    function get_UseLastFormat: Boolean;
    procedure set_UseLastFormat(value: Boolean);
    function get_UseSakaEraCalendar: Boolean;
    procedure set_UseSakaEraCalendar(value: Boolean);
    function get_UseUmAlQuraCalendar: Boolean;
    procedure set_UseUmAlQuraCalendar(value: Boolean);
    function get_Start: DNFieldStart;
    function get_Separator: DNFieldSeparator;
    function get_End: DNFieldEnd;
    function get_Type: DNFieldType;
    function get_Result: string;
    procedure set_Result(value: string);
    function get_DisplayResult: string;
    function get_IsLocked: Boolean;
    procedure set_IsLocked(value: Boolean);
    function get_IsDirty: Boolean;
    procedure set_IsDirty(value: Boolean);
    function get_Format: DNFieldFormat;
    function get_LocaleId: Int32;
    procedure set_LocaleId(value: Int32);

  { methods } 

    function GetFieldCode: string; overload;
    function GetFieldCode(includeChildFieldCodes: Boolean): string; overload;
    function Remove: DNNode;
    procedure Update; overload;
    procedure Update(ignoreMergeFormat: Boolean); overload;
    function Unlink: Boolean;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property UseLunarCalendar: Boolean read get_UseLunarCalendar write set_UseLunarCalendar;
    property UseLastFormat: Boolean read get_UseLastFormat write set_UseLastFormat;
    property UseSakaEraCalendar: Boolean read get_UseSakaEraCalendar write set_UseSakaEraCalendar;
    property UseUmAlQuraCalendar: Boolean read get_UseUmAlQuraCalendar write set_UseUmAlQuraCalendar;
    property Start: DNFieldStart read get_Start;
    property Separator: DNFieldSeparator read get_Separator;
    property &End: DNFieldEnd read get_End;
    property &Type: DNFieldType read get_Type;
    property Result: string read get_Result write set_Result;
    property DisplayResult: string read get_DisplayResult;
    property IsLocked: Boolean read get_IsLocked write set_IsLocked;
    property IsDirty: Boolean read get_IsDirty write set_IsDirty;
    property Format: DNFieldFormat read get_Format;
    property LocaleId: Int32 read get_LocaleId write set_LocaleId;
  end;

  TDNFieldDate = class(TDNGenericImport<DNFieldDateClass, DNFieldDate>) end;

  //-------------namespace: Aspose.Words.Fields----------------
  DNFieldDdeClass = interface(DNFieldClass)
  ['{137D4F39-9D53-5BDE-B8A7-3163B93B2E38}']
  { constructors } 

    {class} function init: DNFieldDde;

  end;

  [DNTypeName('Aspose.Words.Fields.FieldDde')]
  DNFieldDde = interface(DNField)
  ['{B4827D67-492B-344A-A72C-22728E96623D}']
  { getters & setters } 

    function get_ProgId: string;
    procedure set_ProgId(value: string);
    function get_SourceFullName: string;
    procedure set_SourceFullName(value: string);
    function get_SourceItem: string;
    procedure set_SourceItem(value: string);
    function get_AutoUpdate: Boolean;
    procedure set_AutoUpdate(value: Boolean);
    function get_InsertAsBitmap: Boolean;
    procedure set_InsertAsBitmap(value: Boolean);
    function get_IsLinked: Boolean;
    procedure set_IsLinked(value: Boolean);
    function get_InsertAsHtml: Boolean;
    procedure set_InsertAsHtml(value: Boolean);
    function get_InsertAsPicture: Boolean;
    procedure set_InsertAsPicture(value: Boolean);
    function get_InsertAsRtf: Boolean;
    procedure set_InsertAsRtf(value: Boolean);
    function get_InsertAsText: Boolean;
    procedure set_InsertAsText(value: Boolean);
    function get_InsertAsUnicode: Boolean;
    procedure set_InsertAsUnicode(value: Boolean);
    function get_Start: DNFieldStart;
    function get_Separator: DNFieldSeparator;
    function get_End: DNFieldEnd;
    function get_Type: DNFieldType;
    function get_Result: string;
    procedure set_Result(value: string);
    function get_DisplayResult: string;
    function get_IsLocked: Boolean;
    procedure set_IsLocked(value: Boolean);
    function get_IsDirty: Boolean;
    procedure set_IsDirty(value: Boolean);
    function get_Format: DNFieldFormat;
    function get_LocaleId: Int32;
    procedure set_LocaleId(value: Int32);

  { methods } 

    function GetFieldCode: string; overload;
    function GetFieldCode(includeChildFieldCodes: Boolean): string; overload;
    function Remove: DNNode;
    procedure Update; overload;
    procedure Update(ignoreMergeFormat: Boolean); overload;
    function Unlink: Boolean;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property ProgId: string read get_ProgId write set_ProgId;
    property SourceFullName: string read get_SourceFullName write set_SourceFullName;
    property SourceItem: string read get_SourceItem write set_SourceItem;
    property AutoUpdate: Boolean read get_AutoUpdate write set_AutoUpdate;
    property InsertAsBitmap: Boolean read get_InsertAsBitmap write set_InsertAsBitmap;
    property IsLinked: Boolean read get_IsLinked write set_IsLinked;
    property InsertAsHtml: Boolean read get_InsertAsHtml write set_InsertAsHtml;
    property InsertAsPicture: Boolean read get_InsertAsPicture write set_InsertAsPicture;
    property InsertAsRtf: Boolean read get_InsertAsRtf write set_InsertAsRtf;
    property InsertAsText: Boolean read get_InsertAsText write set_InsertAsText;
    property InsertAsUnicode: Boolean read get_InsertAsUnicode write set_InsertAsUnicode;
    property Start: DNFieldStart read get_Start;
    property Separator: DNFieldSeparator read get_Separator;
    property &End: DNFieldEnd read get_End;
    property &Type: DNFieldType read get_Type;
    property Result: string read get_Result write set_Result;
    property DisplayResult: string read get_DisplayResult;
    property IsLocked: Boolean read get_IsLocked write set_IsLocked;
    property IsDirty: Boolean read get_IsDirty write set_IsDirty;
    property Format: DNFieldFormat read get_Format;
    property LocaleId: Int32 read get_LocaleId write set_LocaleId;
  end;

  TDNFieldDde = class(TDNGenericImport<DNFieldDdeClass, DNFieldDde>) end;

  //-------------namespace: Aspose.Words.Fields----------------
  DNFieldDdeAutoClass = interface(DNFieldClass)
  ['{D7E71541-0A87-5238-A6B0-D7E659CB971C}']
  { constructors } 

    {class} function init: DNFieldDdeAuto;

  end;

  [DNTypeName('Aspose.Words.Fields.FieldDdeAuto')]
  DNFieldDdeAuto = interface(DNField)
  ['{97160B19-DFCC-3F46-A713-F84B5C1BFCCE}']
  { getters & setters } 

    function get_ProgId: string;
    procedure set_ProgId(value: string);
    function get_SourceFullName: string;
    procedure set_SourceFullName(value: string);
    function get_SourceItem: string;
    procedure set_SourceItem(value: string);
    function get_InsertAsBitmap: Boolean;
    procedure set_InsertAsBitmap(value: Boolean);
    function get_IsLinked: Boolean;
    procedure set_IsLinked(value: Boolean);
    function get_InsertAsHtml: Boolean;
    procedure set_InsertAsHtml(value: Boolean);
    function get_InsertAsPicture: Boolean;
    procedure set_InsertAsPicture(value: Boolean);
    function get_InsertAsRtf: Boolean;
    procedure set_InsertAsRtf(value: Boolean);
    function get_InsertAsText: Boolean;
    procedure set_InsertAsText(value: Boolean);
    function get_InsertAsUnicode: Boolean;
    procedure set_InsertAsUnicode(value: Boolean);
    function get_Start: DNFieldStart;
    function get_Separator: DNFieldSeparator;
    function get_End: DNFieldEnd;
    function get_Type: DNFieldType;
    function get_Result: string;
    procedure set_Result(value: string);
    function get_DisplayResult: string;
    function get_IsLocked: Boolean;
    procedure set_IsLocked(value: Boolean);
    function get_IsDirty: Boolean;
    procedure set_IsDirty(value: Boolean);
    function get_Format: DNFieldFormat;
    function get_LocaleId: Int32;
    procedure set_LocaleId(value: Int32);

  { methods } 

    function GetFieldCode: string; overload;
    function GetFieldCode(includeChildFieldCodes: Boolean): string; overload;
    function Remove: DNNode;
    procedure Update; overload;
    procedure Update(ignoreMergeFormat: Boolean); overload;
    function Unlink: Boolean;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property ProgId: string read get_ProgId write set_ProgId;
    property SourceFullName: string read get_SourceFullName write set_SourceFullName;
    property SourceItem: string read get_SourceItem write set_SourceItem;
    property InsertAsBitmap: Boolean read get_InsertAsBitmap write set_InsertAsBitmap;
    property IsLinked: Boolean read get_IsLinked write set_IsLinked;
    property InsertAsHtml: Boolean read get_InsertAsHtml write set_InsertAsHtml;
    property InsertAsPicture: Boolean read get_InsertAsPicture write set_InsertAsPicture;
    property InsertAsRtf: Boolean read get_InsertAsRtf write set_InsertAsRtf;
    property InsertAsText: Boolean read get_InsertAsText write set_InsertAsText;
    property InsertAsUnicode: Boolean read get_InsertAsUnicode write set_InsertAsUnicode;
    property Start: DNFieldStart read get_Start;
    property Separator: DNFieldSeparator read get_Separator;
    property &End: DNFieldEnd read get_End;
    property &Type: DNFieldType read get_Type;
    property Result: string read get_Result write set_Result;
    property DisplayResult: string read get_DisplayResult;
    property IsLocked: Boolean read get_IsLocked write set_IsLocked;
    property IsDirty: Boolean read get_IsDirty write set_IsDirty;
    property Format: DNFieldFormat read get_Format;
    property LocaleId: Int32 read get_LocaleId write set_LocaleId;
  end;

  TDNFieldDdeAuto = class(TDNGenericImport<DNFieldDdeAutoClass, DNFieldDdeAuto>) end;

  //-------------namespace: Aspose.Words.Fields----------------
  DNFieldDisplayBarcodeClass = interface(DNFieldClass)
  ['{87079811-4396-5B48-9079-B7DAA3FF7D00}']
  { constructors } 

    {class} function init: DNFieldDisplayBarcode;

  end;

  [DNTypeName('Aspose.Words.Fields.FieldDisplayBarcode')]
  DNFieldDisplayBarcode = interface(DNField)
  ['{3E90513A-929C-351F-A9DE-73727AFC71A6}']
  { getters & setters } 

    function get_BarcodeValue: string;
    procedure set_BarcodeValue(value: string);
    function get_BarcodeType: string;
    procedure set_BarcodeType(value: string);
    function get_SymbolHeight: string;
    procedure set_SymbolHeight(value: string);
    function get_SymbolRotation: string;
    procedure set_SymbolRotation(value: string);
    function get_ScalingFactor: string;
    procedure set_ScalingFactor(value: string);
    function get_ForegroundColor: string;
    procedure set_ForegroundColor(value: string);
    function get_BackgroundColor: string;
    procedure set_BackgroundColor(value: string);
    function get_PosCodeStyle: string;
    procedure set_PosCodeStyle(value: string);
    function get_CaseCodeStyle: string;
    procedure set_CaseCodeStyle(value: string);
    function get_ErrorCorrectionLevel: string;
    procedure set_ErrorCorrectionLevel(value: string);
    function get_DisplayText: Boolean;
    procedure set_DisplayText(value: Boolean);
    function get_AddStartStopChar: Boolean;
    procedure set_AddStartStopChar(value: Boolean);
    function get_FixCheckDigit: Boolean;
    procedure set_FixCheckDigit(value: Boolean);
    function get_Start: DNFieldStart;
    function get_Separator: DNFieldSeparator;
    function get_End: DNFieldEnd;
    function get_Type: DNFieldType;
    function get_Result: string;
    procedure set_Result(value: string);
    function get_DisplayResult: string;
    function get_IsLocked: Boolean;
    procedure set_IsLocked(value: Boolean);
    function get_IsDirty: Boolean;
    procedure set_IsDirty(value: Boolean);
    function get_Format: DNFieldFormat;
    function get_LocaleId: Int32;
    procedure set_LocaleId(value: Int32);

  { methods } 

    function GetFieldCode: string; overload;
    function GetFieldCode(includeChildFieldCodes: Boolean): string; overload;
    function Remove: DNNode;
    procedure Update; overload;
    procedure Update(ignoreMergeFormat: Boolean); overload;
    function Unlink: Boolean;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property BarcodeValue: string read get_BarcodeValue write set_BarcodeValue;
    property BarcodeType: string read get_BarcodeType write set_BarcodeType;
    property SymbolHeight: string read get_SymbolHeight write set_SymbolHeight;
    property SymbolRotation: string read get_SymbolRotation write set_SymbolRotation;
    property ScalingFactor: string read get_ScalingFactor write set_ScalingFactor;
    property ForegroundColor: string read get_ForegroundColor write set_ForegroundColor;
    property BackgroundColor: string read get_BackgroundColor write set_BackgroundColor;
    property PosCodeStyle: string read get_PosCodeStyle write set_PosCodeStyle;
    property CaseCodeStyle: string read get_CaseCodeStyle write set_CaseCodeStyle;
    property ErrorCorrectionLevel: string read get_ErrorCorrectionLevel write set_ErrorCorrectionLevel;
    property DisplayText: Boolean read get_DisplayText write set_DisplayText;
    property AddStartStopChar: Boolean read get_AddStartStopChar write set_AddStartStopChar;
    property FixCheckDigit: Boolean read get_FixCheckDigit write set_FixCheckDigit;
    property Start: DNFieldStart read get_Start;
    property Separator: DNFieldSeparator read get_Separator;
    property &End: DNFieldEnd read get_End;
    property &Type: DNFieldType read get_Type;
    property Result: string read get_Result write set_Result;
    property DisplayResult: string read get_DisplayResult;
    property IsLocked: Boolean read get_IsLocked write set_IsLocked;
    property IsDirty: Boolean read get_IsDirty write set_IsDirty;
    property Format: DNFieldFormat read get_Format;
    property LocaleId: Int32 read get_LocaleId write set_LocaleId;
  end;

  TDNFieldDisplayBarcode = class(TDNGenericImport<DNFieldDisplayBarcodeClass, DNFieldDisplayBarcode>) end;

  //-------------namespace: Aspose.Words.Fields----------------
  DNFieldDocPropertyClass = interface(DNFieldClass)
  ['{17FCA47C-77C2-5937-B982-01D575CE0CF0}']
  { constructors } 

    {class} function init: DNFieldDocProperty;

  end;

  [DNTypeName('Aspose.Words.Fields.FieldDocProperty')]
  DNFieldDocProperty = interface(DNField)
  ['{2309AFF9-0C32-3D0C-BBE5-51F8D7FCC61C}']
  { getters & setters } 

    function get_Start: DNFieldStart;
    function get_Separator: DNFieldSeparator;
    function get_End: DNFieldEnd;
    function get_Type: DNFieldType;
    function get_Result: string;
    procedure set_Result(value: string);
    function get_DisplayResult: string;
    function get_IsLocked: Boolean;
    procedure set_IsLocked(value: Boolean);
    function get_IsDirty: Boolean;
    procedure set_IsDirty(value: Boolean);
    function get_Format: DNFieldFormat;
    function get_LocaleId: Int32;
    procedure set_LocaleId(value: Int32);

  { methods } 

    function GetFieldCode: string; overload;
    function GetFieldCode(includeChildFieldCodes: Boolean): string; overload;
    function Remove: DNNode;
    procedure Update; overload;
    procedure Update(ignoreMergeFormat: Boolean); overload;
    function Unlink: Boolean;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Start: DNFieldStart read get_Start;
    property Separator: DNFieldSeparator read get_Separator;
    property &End: DNFieldEnd read get_End;
    property &Type: DNFieldType read get_Type;
    property Result: string read get_Result write set_Result;
    property DisplayResult: string read get_DisplayResult;
    property IsLocked: Boolean read get_IsLocked write set_IsLocked;
    property IsDirty: Boolean read get_IsDirty write set_IsDirty;
    property Format: DNFieldFormat read get_Format;
    property LocaleId: Int32 read get_LocaleId write set_LocaleId;
  end;

  TDNFieldDocProperty = class(TDNGenericImport<DNFieldDocPropertyClass, DNFieldDocProperty>) end;

  //-------------namespace: Aspose.Words.Fields----------------
  DNFieldDocVariableClass = interface(DNFieldClass)
  ['{EC9C05C3-94D7-5FFE-B9C6-D3D4961394AE}']
  { constructors } 

    {class} function init: DNFieldDocVariable;

  end;

  [DNTypeName('Aspose.Words.Fields.FieldDocVariable')]
  DNFieldDocVariable = interface(DNField)
  ['{A8B71DB2-D6C2-3759-A12F-23778C2AF6FE}']
  { getters & setters } 

    function get_VariableName: string;
    procedure set_VariableName(value: string);
    function get_Start: DNFieldStart;
    function get_Separator: DNFieldSeparator;
    function get_End: DNFieldEnd;
    function get_Type: DNFieldType;
    function get_Result: string;
    procedure set_Result(value: string);
    function get_DisplayResult: string;
    function get_IsLocked: Boolean;
    procedure set_IsLocked(value: Boolean);
    function get_IsDirty: Boolean;
    procedure set_IsDirty(value: Boolean);
    function get_Format: DNFieldFormat;
    function get_LocaleId: Int32;
    procedure set_LocaleId(value: Int32);

  { methods } 

    function GetFieldCode: string; overload;
    function GetFieldCode(includeChildFieldCodes: Boolean): string; overload;
    function Remove: DNNode;
    procedure Update; overload;
    procedure Update(ignoreMergeFormat: Boolean); overload;
    function Unlink: Boolean;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property VariableName: string read get_VariableName write set_VariableName;
    property Start: DNFieldStart read get_Start;
    property Separator: DNFieldSeparator read get_Separator;
    property &End: DNFieldEnd read get_End;
    property &Type: DNFieldType read get_Type;
    property Result: string read get_Result write set_Result;
    property DisplayResult: string read get_DisplayResult;
    property IsLocked: Boolean read get_IsLocked write set_IsLocked;
    property IsDirty: Boolean read get_IsDirty write set_IsDirty;
    property Format: DNFieldFormat read get_Format;
    property LocaleId: Int32 read get_LocaleId write set_LocaleId;
  end;

  TDNFieldDocVariable = class(TDNGenericImport<DNFieldDocVariableClass, DNFieldDocVariable>) end;

  //-------------namespace: Aspose.Words.Fields----------------
  DNFieldEditTimeClass = interface(DNFieldClass)
  ['{857935F8-7FAC-55C7-90FD-B77E862AC22A}']
  { constructors } 

    {class} function init: DNFieldEditTime;

  end;

  [DNTypeName('Aspose.Words.Fields.FieldEditTime')]
  DNFieldEditTime = interface(DNField)
  ['{4CC3C820-98E9-3BB0-831B-4FBA5AA21558}']
  { getters & setters } 

    function get_Start: DNFieldStart;
    function get_Separator: DNFieldSeparator;
    function get_End: DNFieldEnd;
    function get_Type: DNFieldType;
    function get_Result: string;
    procedure set_Result(value: string);
    function get_DisplayResult: string;
    function get_IsLocked: Boolean;
    procedure set_IsLocked(value: Boolean);
    function get_IsDirty: Boolean;
    procedure set_IsDirty(value: Boolean);
    function get_Format: DNFieldFormat;
    function get_LocaleId: Int32;
    procedure set_LocaleId(value: Int32);

  { methods } 

    function GetFieldCode: string; overload;
    function GetFieldCode(includeChildFieldCodes: Boolean): string; overload;
    function Remove: DNNode;
    procedure Update; overload;
    procedure Update(ignoreMergeFormat: Boolean); overload;
    function Unlink: Boolean;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Start: DNFieldStart read get_Start;
    property Separator: DNFieldSeparator read get_Separator;
    property &End: DNFieldEnd read get_End;
    property &Type: DNFieldType read get_Type;
    property Result: string read get_Result write set_Result;
    property DisplayResult: string read get_DisplayResult;
    property IsLocked: Boolean read get_IsLocked write set_IsLocked;
    property IsDirty: Boolean read get_IsDirty write set_IsDirty;
    property Format: DNFieldFormat read get_Format;
    property LocaleId: Int32 read get_LocaleId write set_LocaleId;
  end;

  TDNFieldEditTime = class(TDNGenericImport<DNFieldEditTimeClass, DNFieldEditTime>) end;

  //-------------namespace: Aspose.Words.Fields----------------
  DNFieldEmbedClass = interface(DNFieldClass)
  ['{A257C457-C0FD-5281-9317-3B982834E05A}']
  { constructors } 

    {class} function init: DNFieldEmbed;

  end;

  [DNTypeName('Aspose.Words.Fields.FieldEmbed')]
  DNFieldEmbed = interface(DNField)
  ['{55CE8CF1-E044-3E06-98DC-15CF5CFE89EA}']
  { getters & setters } 

    function get_Start: DNFieldStart;
    function get_Separator: DNFieldSeparator;
    function get_End: DNFieldEnd;
    function get_Type: DNFieldType;
    function get_Result: string;
    procedure set_Result(value: string);
    function get_DisplayResult: string;
    function get_IsLocked: Boolean;
    procedure set_IsLocked(value: Boolean);
    function get_IsDirty: Boolean;
    procedure set_IsDirty(value: Boolean);
    function get_Format: DNFieldFormat;
    function get_LocaleId: Int32;
    procedure set_LocaleId(value: Int32);

  { methods } 

    function GetFieldCode: string; overload;
    function GetFieldCode(includeChildFieldCodes: Boolean): string; overload;
    function Remove: DNNode;
    procedure Update; overload;
    procedure Update(ignoreMergeFormat: Boolean); overload;
    function Unlink: Boolean;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Start: DNFieldStart read get_Start;
    property Separator: DNFieldSeparator read get_Separator;
    property &End: DNFieldEnd read get_End;
    property &Type: DNFieldType read get_Type;
    property Result: string read get_Result write set_Result;
    property DisplayResult: string read get_DisplayResult;
    property IsLocked: Boolean read get_IsLocked write set_IsLocked;
    property IsDirty: Boolean read get_IsDirty write set_IsDirty;
    property Format: DNFieldFormat read get_Format;
    property LocaleId: Int32 read get_LocaleId write set_LocaleId;
  end;

  TDNFieldEmbed = class(TDNGenericImport<DNFieldEmbedClass, DNFieldEmbed>) end;

  //-------------namespace: Aspose.Words.Fields----------------
  DNFieldEQClass = interface(DNFieldClass)
  ['{C81CF2F3-2F6C-50D6-92E2-524BB30EE0CE}']
  { constructors } 

    {class} function init: DNFieldEQ;

  end;

  [DNTypeName('Aspose.Words.Fields.FieldEQ')]
  DNFieldEQ = interface(DNField)
  ['{FCB5C35A-8ABF-35AF-ACBA-5585FCE6B996}']
  { getters & setters } 

    function get_Start: DNFieldStart;
    function get_Separator: DNFieldSeparator;
    function get_End: DNFieldEnd;
    function get_Type: DNFieldType;
    function get_Result: string;
    procedure set_Result(value: string);
    function get_DisplayResult: string;
    function get_IsLocked: Boolean;
    procedure set_IsLocked(value: Boolean);
    function get_IsDirty: Boolean;
    procedure set_IsDirty(value: Boolean);
    function get_Format: DNFieldFormat;
    function get_LocaleId: Int32;
    procedure set_LocaleId(value: Int32);

  { methods } 

    function GetFieldCode: string; overload;
    function GetFieldCode(includeChildFieldCodes: Boolean): string; overload;
    function Remove: DNNode;
    procedure Update; overload;
    procedure Update(ignoreMergeFormat: Boolean); overload;
    function Unlink: Boolean;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Start: DNFieldStart read get_Start;
    property Separator: DNFieldSeparator read get_Separator;
    property &End: DNFieldEnd read get_End;
    property &Type: DNFieldType read get_Type;
    property Result: string read get_Result write set_Result;
    property DisplayResult: string read get_DisplayResult;
    property IsLocked: Boolean read get_IsLocked write set_IsLocked;
    property IsDirty: Boolean read get_IsDirty write set_IsDirty;
    property Format: DNFieldFormat read get_Format;
    property LocaleId: Int32 read get_LocaleId write set_LocaleId;
  end;

  TDNFieldEQ = class(TDNGenericImport<DNFieldEQClass, DNFieldEQ>) end;

  //-------------namespace: Aspose.Words.Fields----------------
  DNFieldFileNameClass = interface(DNFieldClass)
  ['{276BD5E3-1727-5C53-B6A6-931CE98F957D}']
  { constructors } 

    {class} function init: DNFieldFileName;

  end;

  [DNTypeName('Aspose.Words.Fields.FieldFileName')]
  DNFieldFileName = interface(DNField)
  ['{AD6C7B50-4A8A-3B21-9AA5-71A0D1FCA4A4}']
  { getters & setters } 

    function get_IncludeFullPath: Boolean;
    procedure set_IncludeFullPath(value: Boolean);
    function get_Start: DNFieldStart;
    function get_Separator: DNFieldSeparator;
    function get_End: DNFieldEnd;
    function get_Type: DNFieldType;
    function get_Result: string;
    procedure set_Result(value: string);
    function get_DisplayResult: string;
    function get_IsLocked: Boolean;
    procedure set_IsLocked(value: Boolean);
    function get_IsDirty: Boolean;
    procedure set_IsDirty(value: Boolean);
    function get_Format: DNFieldFormat;
    function get_LocaleId: Int32;
    procedure set_LocaleId(value: Int32);

  { methods } 

    function GetFieldCode: string; overload;
    function GetFieldCode(includeChildFieldCodes: Boolean): string; overload;
    function Remove: DNNode;
    procedure Update; overload;
    procedure Update(ignoreMergeFormat: Boolean); overload;
    function Unlink: Boolean;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property IncludeFullPath: Boolean read get_IncludeFullPath write set_IncludeFullPath;
    property Start: DNFieldStart read get_Start;
    property Separator: DNFieldSeparator read get_Separator;
    property &End: DNFieldEnd read get_End;
    property &Type: DNFieldType read get_Type;
    property Result: string read get_Result write set_Result;
    property DisplayResult: string read get_DisplayResult;
    property IsLocked: Boolean read get_IsLocked write set_IsLocked;
    property IsDirty: Boolean read get_IsDirty write set_IsDirty;
    property Format: DNFieldFormat read get_Format;
    property LocaleId: Int32 read get_LocaleId write set_LocaleId;
  end;

  TDNFieldFileName = class(TDNGenericImport<DNFieldFileNameClass, DNFieldFileName>) end;

  //-------------namespace: Aspose.Words.Fields----------------
  DNFieldFileSizeClass = interface(DNFieldClass)
  ['{5AA4B9A4-FA41-55C0-A153-D0E529780E38}']
  { constructors } 

    {class} function init: DNFieldFileSize;

  end;

  [DNTypeName('Aspose.Words.Fields.FieldFileSize')]
  DNFieldFileSize = interface(DNField)
  ['{8601243E-B485-37BB-858D-81501B34FFD6}']
  { getters & setters } 

    function get_IsInKilobytes: Boolean;
    procedure set_IsInKilobytes(value: Boolean);
    function get_IsInMegabytes: Boolean;
    procedure set_IsInMegabytes(value: Boolean);
    function get_Start: DNFieldStart;
    function get_Separator: DNFieldSeparator;
    function get_End: DNFieldEnd;
    function get_Type: DNFieldType;
    function get_Result: string;
    procedure set_Result(value: string);
    function get_DisplayResult: string;
    function get_IsLocked: Boolean;
    procedure set_IsLocked(value: Boolean);
    function get_IsDirty: Boolean;
    procedure set_IsDirty(value: Boolean);
    function get_Format: DNFieldFormat;
    function get_LocaleId: Int32;
    procedure set_LocaleId(value: Int32);

  { methods } 

    function GetFieldCode: string; overload;
    function GetFieldCode(includeChildFieldCodes: Boolean): string; overload;
    function Remove: DNNode;
    procedure Update; overload;
    procedure Update(ignoreMergeFormat: Boolean); overload;
    function Unlink: Boolean;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property IsInKilobytes: Boolean read get_IsInKilobytes write set_IsInKilobytes;
    property IsInMegabytes: Boolean read get_IsInMegabytes write set_IsInMegabytes;
    property Start: DNFieldStart read get_Start;
    property Separator: DNFieldSeparator read get_Separator;
    property &End: DNFieldEnd read get_End;
    property &Type: DNFieldType read get_Type;
    property Result: string read get_Result write set_Result;
    property DisplayResult: string read get_DisplayResult;
    property IsLocked: Boolean read get_IsLocked write set_IsLocked;
    property IsDirty: Boolean read get_IsDirty write set_IsDirty;
    property Format: DNFieldFormat read get_Format;
    property LocaleId: Int32 read get_LocaleId write set_LocaleId;
  end;

  TDNFieldFileSize = class(TDNGenericImport<DNFieldFileSizeClass, DNFieldFileSize>) end;

  //-------------namespace: Aspose.Words.Fields----------------
  DNFieldFillInClass = interface(DNFieldClass)
  ['{0536757F-B7C4-5D6A-9CEC-96EB70FB2DE3}']
  { constructors } 

    {class} function init: DNFieldFillIn;

  end;

  [DNTypeName('Aspose.Words.Fields.FieldFillIn')]
  DNFieldFillIn = interface(DNField)
  ['{4B0A92F1-CF17-365A-AFDC-637531A0C8C7}']
  { getters & setters } 

    function get_PromptText: string;
    procedure set_PromptText(value: string);
    function get_PromptOnceOnMailMerge: Boolean;
    procedure set_PromptOnceOnMailMerge(value: Boolean);
    function get_DefaultResponse: string;
    procedure set_DefaultResponse(value: string);
    function get_Start: DNFieldStart;
    function get_Separator: DNFieldSeparator;
    function get_End: DNFieldEnd;
    function get_Type: DNFieldType;
    function get_Result: string;
    procedure set_Result(value: string);
    function get_DisplayResult: string;
    function get_IsLocked: Boolean;
    procedure set_IsLocked(value: Boolean);
    function get_IsDirty: Boolean;
    procedure set_IsDirty(value: Boolean);
    function get_Format: DNFieldFormat;
    function get_LocaleId: Int32;
    procedure set_LocaleId(value: Int32);

  { methods } 

    function GetFieldCode: string; overload;
    function GetFieldCode(includeChildFieldCodes: Boolean): string; overload;
    function Remove: DNNode;
    procedure Update; overload;
    procedure Update(ignoreMergeFormat: Boolean); overload;
    function Unlink: Boolean;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property PromptText: string read get_PromptText write set_PromptText;
    property PromptOnceOnMailMerge: Boolean read get_PromptOnceOnMailMerge write set_PromptOnceOnMailMerge;
    property DefaultResponse: string read get_DefaultResponse write set_DefaultResponse;
    property Start: DNFieldStart read get_Start;
    property Separator: DNFieldSeparator read get_Separator;
    property &End: DNFieldEnd read get_End;
    property &Type: DNFieldType read get_Type;
    property Result: string read get_Result write set_Result;
    property DisplayResult: string read get_DisplayResult;
    property IsLocked: Boolean read get_IsLocked write set_IsLocked;
    property IsDirty: Boolean read get_IsDirty write set_IsDirty;
    property Format: DNFieldFormat read get_Format;
    property LocaleId: Int32 read get_LocaleId write set_LocaleId;
  end;

  TDNFieldFillIn = class(TDNGenericImport<DNFieldFillInClass, DNFieldFillIn>) end;

  //-------------namespace: Aspose.Words.Fields----------------
  DNFieldFootnoteRefClass = interface(DNFieldClass)
  ['{AD29AD3C-4005-55F7-B16C-8A7FAE8359FF}']
  { constructors } 

    {class} function init: DNFieldFootnoteRef;

  end;

  [DNTypeName('Aspose.Words.Fields.FieldFootnoteRef')]
  DNFieldFootnoteRef = interface(DNField)
  ['{B1D56C69-C509-3CD9-A0A6-4722F21E52A3}']
  { getters & setters } 

    function get_Start: DNFieldStart;
    function get_Separator: DNFieldSeparator;
    function get_End: DNFieldEnd;
    function get_Type: DNFieldType;
    function get_Result: string;
    procedure set_Result(value: string);
    function get_DisplayResult: string;
    function get_IsLocked: Boolean;
    procedure set_IsLocked(value: Boolean);
    function get_IsDirty: Boolean;
    procedure set_IsDirty(value: Boolean);
    function get_Format: DNFieldFormat;
    function get_LocaleId: Int32;
    procedure set_LocaleId(value: Int32);

  { methods } 

    function GetFieldCode: string; overload;
    function GetFieldCode(includeChildFieldCodes: Boolean): string; overload;
    function Remove: DNNode;
    procedure Update; overload;
    procedure Update(ignoreMergeFormat: Boolean); overload;
    function Unlink: Boolean;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Start: DNFieldStart read get_Start;
    property Separator: DNFieldSeparator read get_Separator;
    property &End: DNFieldEnd read get_End;
    property &Type: DNFieldType read get_Type;
    property Result: string read get_Result write set_Result;
    property DisplayResult: string read get_DisplayResult;
    property IsLocked: Boolean read get_IsLocked write set_IsLocked;
    property IsDirty: Boolean read get_IsDirty write set_IsDirty;
    property Format: DNFieldFormat read get_Format;
    property LocaleId: Int32 read get_LocaleId write set_LocaleId;
  end;

  TDNFieldFootnoteRef = class(TDNGenericImport<DNFieldFootnoteRefClass, DNFieldFootnoteRef>) end;

  //-------------namespace: Aspose.Words.Fields----------------
  DNFieldFormCheckBoxClass = interface(DNFieldClass)
  ['{8EF4F193-86ED-5F89-A0CA-A0BA4B8799B7}']
  { constructors } 

    {class} function init: DNFieldFormCheckBox;

  end;

  [DNTypeName('Aspose.Words.Fields.FieldFormCheckBox')]
  DNFieldFormCheckBox = interface(DNField)
  ['{70FE43B2-D519-3B2D-87E5-A53639315DF5}']
  { getters & setters } 

    function get_Start: DNFieldStart;
    function get_Separator: DNFieldSeparator;
    function get_End: DNFieldEnd;
    function get_Type: DNFieldType;
    function get_Result: string;
    procedure set_Result(value: string);
    function get_DisplayResult: string;
    function get_IsLocked: Boolean;
    procedure set_IsLocked(value: Boolean);
    function get_IsDirty: Boolean;
    procedure set_IsDirty(value: Boolean);
    function get_Format: DNFieldFormat;
    function get_LocaleId: Int32;
    procedure set_LocaleId(value: Int32);

  { methods } 

    function GetFieldCode: string; overload;
    function GetFieldCode(includeChildFieldCodes: Boolean): string; overload;
    function Remove: DNNode;
    procedure Update; overload;
    procedure Update(ignoreMergeFormat: Boolean); overload;
    function Unlink: Boolean;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Start: DNFieldStart read get_Start;
    property Separator: DNFieldSeparator read get_Separator;
    property &End: DNFieldEnd read get_End;
    property &Type: DNFieldType read get_Type;
    property Result: string read get_Result write set_Result;
    property DisplayResult: string read get_DisplayResult;
    property IsLocked: Boolean read get_IsLocked write set_IsLocked;
    property IsDirty: Boolean read get_IsDirty write set_IsDirty;
    property Format: DNFieldFormat read get_Format;
    property LocaleId: Int32 read get_LocaleId write set_LocaleId;
  end;

  TDNFieldFormCheckBox = class(TDNGenericImport<DNFieldFormCheckBoxClass, DNFieldFormCheckBox>) end;

  //-------------namespace: Aspose.Words.Fields----------------
  DNFieldFormDropDownClass = interface(DNFieldClass)
  ['{4C5E1629-E4E1-54E3-8D28-326F75ABDF10}']
  { constructors } 

    {class} function init: DNFieldFormDropDown;

  end;

  [DNTypeName('Aspose.Words.Fields.FieldFormDropDown')]
  DNFieldFormDropDown = interface(DNField)
  ['{F1BA1D99-A5F1-3DA9-89BF-65806ED45BD9}']
  { getters & setters } 

    function get_Start: DNFieldStart;
    function get_Separator: DNFieldSeparator;
    function get_End: DNFieldEnd;
    function get_Type: DNFieldType;
    function get_Result: string;
    procedure set_Result(value: string);
    function get_DisplayResult: string;
    function get_IsLocked: Boolean;
    procedure set_IsLocked(value: Boolean);
    function get_IsDirty: Boolean;
    procedure set_IsDirty(value: Boolean);
    function get_Format: DNFieldFormat;
    function get_LocaleId: Int32;
    procedure set_LocaleId(value: Int32);

  { methods } 

    function GetFieldCode: string; overload;
    function GetFieldCode(includeChildFieldCodes: Boolean): string; overload;
    function Remove: DNNode;
    procedure Update; overload;
    procedure Update(ignoreMergeFormat: Boolean); overload;
    function Unlink: Boolean;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Start: DNFieldStart read get_Start;
    property Separator: DNFieldSeparator read get_Separator;
    property &End: DNFieldEnd read get_End;
    property &Type: DNFieldType read get_Type;
    property Result: string read get_Result write set_Result;
    property DisplayResult: string read get_DisplayResult;
    property IsLocked: Boolean read get_IsLocked write set_IsLocked;
    property IsDirty: Boolean read get_IsDirty write set_IsDirty;
    property Format: DNFieldFormat read get_Format;
    property LocaleId: Int32 read get_LocaleId write set_LocaleId;
  end;

  TDNFieldFormDropDown = class(TDNGenericImport<DNFieldFormDropDownClass, DNFieldFormDropDown>) end;

  //-------------namespace: Aspose.Words.Fields----------------
  DNFieldFormTextClass = interface(DNFieldClass)
  ['{18647DDA-0091-58FA-8CE6-231DFAD7A37F}']
  { constructors } 

    {class} function init: DNFieldFormText;

  end;

  [DNTypeName('Aspose.Words.Fields.FieldFormText')]
  DNFieldFormText = interface(DNField)
  ['{E4C9933B-8AE7-3749-AF7B-7C88F916D2C6}']
  { getters & setters } 

    function get_Start: DNFieldStart;
    function get_Separator: DNFieldSeparator;
    function get_End: DNFieldEnd;
    function get_Type: DNFieldType;
    function get_Result: string;
    procedure set_Result(value: string);
    function get_DisplayResult: string;
    function get_IsLocked: Boolean;
    procedure set_IsLocked(value: Boolean);
    function get_IsDirty: Boolean;
    procedure set_IsDirty(value: Boolean);
    function get_Format: DNFieldFormat;
    function get_LocaleId: Int32;
    procedure set_LocaleId(value: Int32);

  { methods } 

    function GetFieldCode: string; overload;
    function GetFieldCode(includeChildFieldCodes: Boolean): string; overload;
    function Remove: DNNode;
    procedure Update; overload;
    procedure Update(ignoreMergeFormat: Boolean); overload;
    function Unlink: Boolean;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Start: DNFieldStart read get_Start;
    property Separator: DNFieldSeparator read get_Separator;
    property &End: DNFieldEnd read get_End;
    property &Type: DNFieldType read get_Type;
    property Result: string read get_Result write set_Result;
    property DisplayResult: string read get_DisplayResult;
    property IsLocked: Boolean read get_IsLocked write set_IsLocked;
    property IsDirty: Boolean read get_IsDirty write set_IsDirty;
    property Format: DNFieldFormat read get_Format;
    property LocaleId: Int32 read get_LocaleId write set_LocaleId;
  end;

  TDNFieldFormText = class(TDNGenericImport<DNFieldFormTextClass, DNFieldFormText>) end;

  //-------------namespace: Aspose.Words.Fields----------------
  DNFieldFormulaClass = interface(DNFieldClass)
  ['{8E1C9123-18B5-5961-ABD1-E33C1EC10DA7}']
  { constructors } 

    {class} function init: DNFieldFormula;

  end;

  [DNTypeName('Aspose.Words.Fields.FieldFormula')]
  DNFieldFormula = interface(DNField)
  ['{3DE0C309-DF7E-3AA9-A217-4F42ADC3903E}']
  { getters & setters } 

    function get_Start: DNFieldStart;
    function get_Separator: DNFieldSeparator;
    function get_End: DNFieldEnd;
    function get_Type: DNFieldType;
    function get_Result: string;
    procedure set_Result(value: string);
    function get_DisplayResult: string;
    function get_IsLocked: Boolean;
    procedure set_IsLocked(value: Boolean);
    function get_IsDirty: Boolean;
    procedure set_IsDirty(value: Boolean);
    function get_Format: DNFieldFormat;
    function get_LocaleId: Int32;
    procedure set_LocaleId(value: Int32);

  { methods } 

    function GetFieldCode: string; overload;
    function GetFieldCode(includeChildFieldCodes: Boolean): string; overload;
    function Remove: DNNode;
    procedure Update; overload;
    procedure Update(ignoreMergeFormat: Boolean); overload;
    function Unlink: Boolean;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Start: DNFieldStart read get_Start;
    property Separator: DNFieldSeparator read get_Separator;
    property &End: DNFieldEnd read get_End;
    property &Type: DNFieldType read get_Type;
    property Result: string read get_Result write set_Result;
    property DisplayResult: string read get_DisplayResult;
    property IsLocked: Boolean read get_IsLocked write set_IsLocked;
    property IsDirty: Boolean read get_IsDirty write set_IsDirty;
    property Format: DNFieldFormat read get_Format;
    property LocaleId: Int32 read get_LocaleId write set_LocaleId;
  end;

  TDNFieldFormula = class(TDNGenericImport<DNFieldFormulaClass, DNFieldFormula>) end;

  //-------------namespace: Aspose.Words.Fields----------------
  DNFieldGlossaryClass = interface(DNFieldClass)
  ['{6666D891-7902-582D-AB5A-BEA85743CE22}']
  { constructors } 

    {class} function init: DNFieldGlossary;

  end;

  [DNTypeName('Aspose.Words.Fields.FieldGlossary')]
  DNFieldGlossary = interface(DNField)
  ['{045D9B22-6F00-3FD9-A4E3-4A3D811844EC}']
  { getters & setters } 

    function get_EntryName: string;
    procedure set_EntryName(value: string);
    function get_Start: DNFieldStart;
    function get_Separator: DNFieldSeparator;
    function get_End: DNFieldEnd;
    function get_Type: DNFieldType;
    function get_Result: string;
    procedure set_Result(value: string);
    function get_DisplayResult: string;
    function get_IsLocked: Boolean;
    procedure set_IsLocked(value: Boolean);
    function get_IsDirty: Boolean;
    procedure set_IsDirty(value: Boolean);
    function get_Format: DNFieldFormat;
    function get_LocaleId: Int32;
    procedure set_LocaleId(value: Int32);

  { methods } 

    function GetFieldCode: string; overload;
    function GetFieldCode(includeChildFieldCodes: Boolean): string; overload;
    function Remove: DNNode;
    procedure Update; overload;
    procedure Update(ignoreMergeFormat: Boolean); overload;
    function Unlink: Boolean;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property EntryName: string read get_EntryName write set_EntryName;
    property Start: DNFieldStart read get_Start;
    property Separator: DNFieldSeparator read get_Separator;
    property &End: DNFieldEnd read get_End;
    property &Type: DNFieldType read get_Type;
    property Result: string read get_Result write set_Result;
    property DisplayResult: string read get_DisplayResult;
    property IsLocked: Boolean read get_IsLocked write set_IsLocked;
    property IsDirty: Boolean read get_IsDirty write set_IsDirty;
    property Format: DNFieldFormat read get_Format;
    property LocaleId: Int32 read get_LocaleId write set_LocaleId;
  end;

  TDNFieldGlossary = class(TDNGenericImport<DNFieldGlossaryClass, DNFieldGlossary>) end;

  //-------------namespace: Aspose.Words.Fields----------------
  DNFieldGoToButtonClass = interface(DNFieldClass)
  ['{42656015-B99C-5E44-A7CD-669485B8CB49}']
  { constructors } 

    {class} function init: DNFieldGoToButton;

  end;

  [DNTypeName('Aspose.Words.Fields.FieldGoToButton')]
  DNFieldGoToButton = interface(DNField)
  ['{07DB9A87-4280-3065-BB4B-132A71F04694}']
  { getters & setters } 

    function get_Location: string;
    procedure set_Location(value: string);
    function get_DisplayText: string;
    procedure set_DisplayText(value: string);
    function get_Start: DNFieldStart;
    function get_Separator: DNFieldSeparator;
    function get_End: DNFieldEnd;
    function get_Type: DNFieldType;
    function get_Result: string;
    procedure set_Result(value: string);
    function get_DisplayResult: string;
    function get_IsLocked: Boolean;
    procedure set_IsLocked(value: Boolean);
    function get_IsDirty: Boolean;
    procedure set_IsDirty(value: Boolean);
    function get_Format: DNFieldFormat;
    function get_LocaleId: Int32;
    procedure set_LocaleId(value: Int32);

  { methods } 

    function GetFieldCode: string; overload;
    function GetFieldCode(includeChildFieldCodes: Boolean): string; overload;
    function Remove: DNNode;
    procedure Update; overload;
    procedure Update(ignoreMergeFormat: Boolean); overload;
    function Unlink: Boolean;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Location: string read get_Location write set_Location;
    property DisplayText: string read get_DisplayText write set_DisplayText;
    property Start: DNFieldStart read get_Start;
    property Separator: DNFieldSeparator read get_Separator;
    property &End: DNFieldEnd read get_End;
    property &Type: DNFieldType read get_Type;
    property Result: string read get_Result write set_Result;
    property DisplayResult: string read get_DisplayResult;
    property IsLocked: Boolean read get_IsLocked write set_IsLocked;
    property IsDirty: Boolean read get_IsDirty write set_IsDirty;
    property Format: DNFieldFormat read get_Format;
    property LocaleId: Int32 read get_LocaleId write set_LocaleId;
  end;

  TDNFieldGoToButton = class(TDNGenericImport<DNFieldGoToButtonClass, DNFieldGoToButton>) end;

  //-------------namespace: Aspose.Words.Fields----------------
  DNFieldGreetingLineClass = interface(DNFieldClass)
  ['{CBD37E55-F16C-5777-80C9-48D0CE8A1F81}']
  { constructors } 

    {class} function init: DNFieldGreetingLine;

  end;

  [DNTypeName('Aspose.Words.Fields.FieldGreetingLine')]
  DNFieldGreetingLine = interface(DNField)
  ['{6B49C1FF-3007-3C0D-8F61-AEE58C6E3898}']
  { getters & setters } 

    function get_AlternateText: string;
    procedure set_AlternateText(value: string);
    function get_NameFormat: string;
    procedure set_NameFormat(value: string);
    function get_LanguageId: string;
    procedure set_LanguageId(value: string);
    function get_Start: DNFieldStart;
    function get_Separator: DNFieldSeparator;
    function get_End: DNFieldEnd;
    function get_Type: DNFieldType;
    function get_Result: string;
    procedure set_Result(value: string);
    function get_DisplayResult: string;
    function get_IsLocked: Boolean;
    procedure set_IsLocked(value: Boolean);
    function get_IsDirty: Boolean;
    procedure set_IsDirty(value: Boolean);
    function get_Format: DNFieldFormat;
    function get_LocaleId: Int32;
    procedure set_LocaleId(value: Int32);

  { methods } 

    function GetFieldNames: TArray<string>;
    function GetFieldCode: string; overload;
    function GetFieldCode(includeChildFieldCodes: Boolean): string; overload;
    function Remove: DNNode;
    procedure Update; overload;
    procedure Update(ignoreMergeFormat: Boolean); overload;
    function Unlink: Boolean;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property AlternateText: string read get_AlternateText write set_AlternateText;
    property NameFormat: string read get_NameFormat write set_NameFormat;
    property LanguageId: string read get_LanguageId write set_LanguageId;
    property Start: DNFieldStart read get_Start;
    property Separator: DNFieldSeparator read get_Separator;
    property &End: DNFieldEnd read get_End;
    property &Type: DNFieldType read get_Type;
    property Result: string read get_Result write set_Result;
    property DisplayResult: string read get_DisplayResult;
    property IsLocked: Boolean read get_IsLocked write set_IsLocked;
    property IsDirty: Boolean read get_IsDirty write set_IsDirty;
    property Format: DNFieldFormat read get_Format;
    property LocaleId: Int32 read get_LocaleId write set_LocaleId;
  end;

  TDNFieldGreetingLine = class(TDNGenericImport<DNFieldGreetingLineClass, DNFieldGreetingLine>) end;

  //-------------namespace: Aspose.Words.Fields----------------
  DNFieldHyperlinkClass = interface(DNFieldClass)
  ['{43BD32D2-0317-574B-9873-6538641914D4}']
  { constructors } 

    {class} function init: DNFieldHyperlink;

  end;

  [DNTypeName('Aspose.Words.Fields.FieldHyperlink')]
  DNFieldHyperlink = interface(DNField)
  ['{285CAFF2-E895-3919-B714-87B429715F2C}']
  { getters & setters } 

    function get_Target: string;
    procedure set_Target(value: string);
    function get_Address: string;
    procedure set_Address(value: string);
    function get_SubAddress: string;
    procedure set_SubAddress(value: string);
    function get_IsImageMap: Boolean;
    procedure set_IsImageMap(value: Boolean);
    function get_OpenInNewWindow: Boolean;
    procedure set_OpenInNewWindow(value: Boolean);
    function get_ScreenTip: string;
    procedure set_ScreenTip(value: string);
    function get_Start: DNFieldStart;
    function get_Separator: DNFieldSeparator;
    function get_End: DNFieldEnd;
    function get_Type: DNFieldType;
    function get_Result: string;
    procedure set_Result(value: string);
    function get_DisplayResult: string;
    function get_IsLocked: Boolean;
    procedure set_IsLocked(value: Boolean);
    function get_IsDirty: Boolean;
    procedure set_IsDirty(value: Boolean);
    function get_Format: DNFieldFormat;
    function get_LocaleId: Int32;
    procedure set_LocaleId(value: Int32);

  { methods } 

    function GetFieldCode: string; overload;
    function GetFieldCode(includeChildFieldCodes: Boolean): string; overload;
    function Remove: DNNode;
    procedure Update; overload;
    procedure Update(ignoreMergeFormat: Boolean); overload;
    function Unlink: Boolean;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Target: string read get_Target write set_Target;
    property Address: string read get_Address write set_Address;
    property SubAddress: string read get_SubAddress write set_SubAddress;
    property IsImageMap: Boolean read get_IsImageMap write set_IsImageMap;
    property OpenInNewWindow: Boolean read get_OpenInNewWindow write set_OpenInNewWindow;
    property ScreenTip: string read get_ScreenTip write set_ScreenTip;
    property Start: DNFieldStart read get_Start;
    property Separator: DNFieldSeparator read get_Separator;
    property &End: DNFieldEnd read get_End;
    property &Type: DNFieldType read get_Type;
    property Result: string read get_Result write set_Result;
    property DisplayResult: string read get_DisplayResult;
    property IsLocked: Boolean read get_IsLocked write set_IsLocked;
    property IsDirty: Boolean read get_IsDirty write set_IsDirty;
    property Format: DNFieldFormat read get_Format;
    property LocaleId: Int32 read get_LocaleId write set_LocaleId;
  end;

  TDNFieldHyperlink = class(TDNGenericImport<DNFieldHyperlinkClass, DNFieldHyperlink>) end;

  //-------------namespace: Aspose.Words.Fields----------------
  DNFieldIfClass = interface(DNFieldClass)
  ['{98E4B5E9-39A7-5215-B87A-656517AB4FA2}']
  { constructors } 

    {class} function init: DNFieldIf;

  end;

  [DNTypeName('Aspose.Words.Fields.FieldIf')]
  DNFieldIf = interface(DNField)
  ['{B08D7E25-304B-378F-8F1C-2A5A51705C85}']
  { getters & setters } 

    function get_LeftExpression: string;
    procedure set_LeftExpression(value: string);
    function get_ComparisonOperator: string;
    procedure set_ComparisonOperator(value: string);
    function get_RightExpression: string;
    procedure set_RightExpression(value: string);
    function get_TrueText: string;
    procedure set_TrueText(value: string);
    function get_FalseText: string;
    procedure set_FalseText(value: string);
    function get_Start: DNFieldStart;
    function get_Separator: DNFieldSeparator;
    function get_End: DNFieldEnd;
    function get_Type: DNFieldType;
    function get_Result: string;
    procedure set_Result(value: string);
    function get_DisplayResult: string;
    function get_IsLocked: Boolean;
    procedure set_IsLocked(value: Boolean);
    function get_IsDirty: Boolean;
    procedure set_IsDirty(value: Boolean);
    function get_Format: DNFieldFormat;
    function get_LocaleId: Int32;
    procedure set_LocaleId(value: Int32);

  { methods } 

    function EvaluateCondition: DNFieldIfComparisonResult;
    function GetFieldCode: string; overload;
    function GetFieldCode(includeChildFieldCodes: Boolean): string; overload;
    function Remove: DNNode;
    procedure Update; overload;
    procedure Update(ignoreMergeFormat: Boolean); overload;
    function Unlink: Boolean;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property LeftExpression: string read get_LeftExpression write set_LeftExpression;
    property ComparisonOperator: string read get_ComparisonOperator write set_ComparisonOperator;
    property RightExpression: string read get_RightExpression write set_RightExpression;
    property TrueText: string read get_TrueText write set_TrueText;
    property FalseText: string read get_FalseText write set_FalseText;
    property Start: DNFieldStart read get_Start;
    property Separator: DNFieldSeparator read get_Separator;
    property &End: DNFieldEnd read get_End;
    property &Type: DNFieldType read get_Type;
    property Result: string read get_Result write set_Result;
    property DisplayResult: string read get_DisplayResult;
    property IsLocked: Boolean read get_IsLocked write set_IsLocked;
    property IsDirty: Boolean read get_IsDirty write set_IsDirty;
    property Format: DNFieldFormat read get_Format;
    property LocaleId: Int32 read get_LocaleId write set_LocaleId;
  end;

  TDNFieldIf = class(TDNGenericImport<DNFieldIfClass, DNFieldIf>) end;

  //-------------namespace: Aspose.Words.Fields----------------
  DNFieldImportClass = interface(DNFieldClass)
  ['{0DD62AD8-40D1-551F-B609-993DFA5B1B00}']
  { constructors } 

    {class} function init: DNFieldImport;

  end;

  [DNTypeName('Aspose.Words.Fields.FieldImport')]
  DNFieldImport = interface(DNField)
  ['{FBFD459C-F403-3F3B-A46F-005350421789}']
  { getters & setters } 

    function get_SourceFullName: string;
    procedure set_SourceFullName(value: string);
    function get_GraphicFilter: string;
    procedure set_GraphicFilter(value: string);
    function get_IsLinked: Boolean;
    procedure set_IsLinked(value: Boolean);
    function get_Start: DNFieldStart;
    function get_Separator: DNFieldSeparator;
    function get_End: DNFieldEnd;
    function get_Type: DNFieldType;
    function get_Result: string;
    procedure set_Result(value: string);
    function get_DisplayResult: string;
    function get_IsLocked: Boolean;
    procedure set_IsLocked(value: Boolean);
    function get_IsDirty: Boolean;
    procedure set_IsDirty(value: Boolean);
    function get_Format: DNFieldFormat;
    function get_LocaleId: Int32;
    procedure set_LocaleId(value: Int32);

  { methods } 

    function GetFieldCode: string; overload;
    function GetFieldCode(includeChildFieldCodes: Boolean): string; overload;
    function Remove: DNNode;
    procedure Update; overload;
    procedure Update(ignoreMergeFormat: Boolean); overload;
    function Unlink: Boolean;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property SourceFullName: string read get_SourceFullName write set_SourceFullName;
    property GraphicFilter: string read get_GraphicFilter write set_GraphicFilter;
    property IsLinked: Boolean read get_IsLinked write set_IsLinked;
    property Start: DNFieldStart read get_Start;
    property Separator: DNFieldSeparator read get_Separator;
    property &End: DNFieldEnd read get_End;
    property &Type: DNFieldType read get_Type;
    property Result: string read get_Result write set_Result;
    property DisplayResult: string read get_DisplayResult;
    property IsLocked: Boolean read get_IsLocked write set_IsLocked;
    property IsDirty: Boolean read get_IsDirty write set_IsDirty;
    property Format: DNFieldFormat read get_Format;
    property LocaleId: Int32 read get_LocaleId write set_LocaleId;
  end;

  TDNFieldImport = class(TDNGenericImport<DNFieldImportClass, DNFieldImport>) end;

  //-------------namespace: Aspose.Words.Fields----------------
  DNFieldIncludeClass = interface(DNFieldClass)
  ['{6C7C2EF7-0E99-54C0-A40D-25CF797EC77B}']
  { constructors } 

    {class} function init: DNFieldInclude;

  end;

  [DNTypeName('Aspose.Words.Fields.FieldInclude')]
  DNFieldInclude = interface(DNField)
  ['{A939BA4F-7647-3EF7-BCBA-53B529D707A4}']
  { getters & setters } 

    function get_SourceFullName: string;
    procedure set_SourceFullName(value: string);
    function get_BookmarkName: string;
    procedure set_BookmarkName(value: string);
    function get_LockFields: Boolean;
    procedure set_LockFields(value: Boolean);
    function get_TextConverter: string;
    procedure set_TextConverter(value: string);
    function get_Start: DNFieldStart;
    function get_Separator: DNFieldSeparator;
    function get_End: DNFieldEnd;
    function get_Type: DNFieldType;
    function get_Result: string;
    procedure set_Result(value: string);
    function get_DisplayResult: string;
    function get_IsLocked: Boolean;
    procedure set_IsLocked(value: Boolean);
    function get_IsDirty: Boolean;
    procedure set_IsDirty(value: Boolean);
    function get_Format: DNFieldFormat;
    function get_LocaleId: Int32;
    procedure set_LocaleId(value: Int32);

  { methods } 

    function GetFieldCode: string; overload;
    function GetFieldCode(includeChildFieldCodes: Boolean): string; overload;
    function Remove: DNNode;
    procedure Update; overload;
    procedure Update(ignoreMergeFormat: Boolean); overload;
    function Unlink: Boolean;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property SourceFullName: string read get_SourceFullName write set_SourceFullName;
    property BookmarkName: string read get_BookmarkName write set_BookmarkName;
    property LockFields: Boolean read get_LockFields write set_LockFields;
    property TextConverter: string read get_TextConverter write set_TextConverter;
    property Start: DNFieldStart read get_Start;
    property Separator: DNFieldSeparator read get_Separator;
    property &End: DNFieldEnd read get_End;
    property &Type: DNFieldType read get_Type;
    property Result: string read get_Result write set_Result;
    property DisplayResult: string read get_DisplayResult;
    property IsLocked: Boolean read get_IsLocked write set_IsLocked;
    property IsDirty: Boolean read get_IsDirty write set_IsDirty;
    property Format: DNFieldFormat read get_Format;
    property LocaleId: Int32 read get_LocaleId write set_LocaleId;
  end;

  TDNFieldInclude = class(TDNGenericImport<DNFieldIncludeClass, DNFieldInclude>) end;

  //-------------namespace: Aspose.Words.Fields----------------
  DNFieldIncludePictureClass = interface(DNFieldClass)
  ['{C8971D1D-6886-51CE-B14B-D2CBD3D536B1}']
  { constructors } 

    {class} function init: DNFieldIncludePicture;

  end;

  [DNTypeName('Aspose.Words.Fields.FieldIncludePicture')]
  DNFieldIncludePicture = interface(DNField)
  ['{760A6711-DA64-3951-AB4C-B909361D1E41}']
  { getters & setters } 

    function get_SourceFullName: string;
    procedure set_SourceFullName(value: string);
    function get_GraphicFilter: string;
    procedure set_GraphicFilter(value: string);
    function get_IsLinked: Boolean;
    procedure set_IsLinked(value: Boolean);
    function get_ResizeHorizontally: Boolean;
    procedure set_ResizeHorizontally(value: Boolean);
    function get_ResizeVertically: Boolean;
    procedure set_ResizeVertically(value: Boolean);
    function get_Start: DNFieldStart;
    function get_Separator: DNFieldSeparator;
    function get_End: DNFieldEnd;
    function get_Type: DNFieldType;
    function get_Result: string;
    procedure set_Result(value: string);
    function get_DisplayResult: string;
    function get_IsLocked: Boolean;
    procedure set_IsLocked(value: Boolean);
    function get_IsDirty: Boolean;
    procedure set_IsDirty(value: Boolean);
    function get_Format: DNFieldFormat;
    function get_LocaleId: Int32;
    procedure set_LocaleId(value: Int32);

  { methods } 

    function GetFieldCode: string; overload;
    function GetFieldCode(includeChildFieldCodes: Boolean): string; overload;
    function Remove: DNNode;
    procedure Update; overload;
    procedure Update(ignoreMergeFormat: Boolean); overload;
    function Unlink: Boolean;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property SourceFullName: string read get_SourceFullName write set_SourceFullName;
    property GraphicFilter: string read get_GraphicFilter write set_GraphicFilter;
    property IsLinked: Boolean read get_IsLinked write set_IsLinked;
    property ResizeHorizontally: Boolean read get_ResizeHorizontally write set_ResizeHorizontally;
    property ResizeVertically: Boolean read get_ResizeVertically write set_ResizeVertically;
    property Start: DNFieldStart read get_Start;
    property Separator: DNFieldSeparator read get_Separator;
    property &End: DNFieldEnd read get_End;
    property &Type: DNFieldType read get_Type;
    property Result: string read get_Result write set_Result;
    property DisplayResult: string read get_DisplayResult;
    property IsLocked: Boolean read get_IsLocked write set_IsLocked;
    property IsDirty: Boolean read get_IsDirty write set_IsDirty;
    property Format: DNFieldFormat read get_Format;
    property LocaleId: Int32 read get_LocaleId write set_LocaleId;
  end;

  TDNFieldIncludePicture = class(TDNGenericImport<DNFieldIncludePictureClass, DNFieldIncludePicture>) end;

  //-------------namespace: Aspose.Words.Fields----------------
  DNFieldIncludeTextClass = interface(DNFieldClass)
  ['{963C4873-8D80-57AF-B4E4-CCFBFE45D8EA}']
  { constructors } 

    {class} function init: DNFieldIncludeText;

  end;

  [DNTypeName('Aspose.Words.Fields.FieldIncludeText')]
  DNFieldIncludeText = interface(DNField)
  ['{59E93B74-21FE-3F26-9279-5429CE060723}']
  { getters & setters } 

    function get_SourceFullName: string;
    procedure set_SourceFullName(value: string);
    function get_BookmarkName: string;
    procedure set_BookmarkName(value: string);
    function get_LockFields: Boolean;
    procedure set_LockFields(value: Boolean);
    function get_TextConverter: string;
    procedure set_TextConverter(value: string);
    function get_NamespaceMappings: string;
    procedure set_NamespaceMappings(value: string);
    function get_XslTransformation: string;
    procedure set_XslTransformation(value: string);
    function get_XPath: string;
    procedure set_XPath(value: string);
    function get_Encoding: string;
    procedure set_Encoding(value: string);
    function get_MimeType: string;
    procedure set_MimeType(value: string);
    function get_Start: DNFieldStart;
    function get_Separator: DNFieldSeparator;
    function get_End: DNFieldEnd;
    function get_Type: DNFieldType;
    function get_Result: string;
    procedure set_Result(value: string);
    function get_DisplayResult: string;
    function get_IsLocked: Boolean;
    procedure set_IsLocked(value: Boolean);
    function get_IsDirty: Boolean;
    procedure set_IsDirty(value: Boolean);
    function get_Format: DNFieldFormat;
    function get_LocaleId: Int32;
    procedure set_LocaleId(value: Int32);

  { methods } 

    function GetFieldCode: string; overload;
    function GetFieldCode(includeChildFieldCodes: Boolean): string; overload;
    function Remove: DNNode;
    procedure Update; overload;
    procedure Update(ignoreMergeFormat: Boolean); overload;
    function Unlink: Boolean;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property SourceFullName: string read get_SourceFullName write set_SourceFullName;
    property BookmarkName: string read get_BookmarkName write set_BookmarkName;
    property LockFields: Boolean read get_LockFields write set_LockFields;
    property TextConverter: string read get_TextConverter write set_TextConverter;
    property NamespaceMappings: string read get_NamespaceMappings write set_NamespaceMappings;
    property XslTransformation: string read get_XslTransformation write set_XslTransformation;
    property XPath: string read get_XPath write set_XPath;
    property Encoding: string read get_Encoding write set_Encoding;
    property MimeType: string read get_MimeType write set_MimeType;
    property Start: DNFieldStart read get_Start;
    property Separator: DNFieldSeparator read get_Separator;
    property &End: DNFieldEnd read get_End;
    property &Type: DNFieldType read get_Type;
    property Result: string read get_Result write set_Result;
    property DisplayResult: string read get_DisplayResult;
    property IsLocked: Boolean read get_IsLocked write set_IsLocked;
    property IsDirty: Boolean read get_IsDirty write set_IsDirty;
    property Format: DNFieldFormat read get_Format;
    property LocaleId: Int32 read get_LocaleId write set_LocaleId;
  end;

  TDNFieldIncludeText = class(TDNGenericImport<DNFieldIncludeTextClass, DNFieldIncludeText>) end;

  //-------------namespace: Aspose.Words.Fields----------------
  DNFieldIndexClass = interface(DNFieldClass)
  ['{C715F949-EC34-54A3-B489-8AA08A882A16}']
  { constructors } 

    {class} function init: DNFieldIndex;

  end;

  [DNTypeName('Aspose.Words.Fields.FieldIndex')]
  DNFieldIndex = interface(DNField)
  ['{098830D9-803F-3CB0-9AA5-D1198B0B7B61}']
  { getters & setters } 

    function get_BookmarkName: string;
    procedure set_BookmarkName(value: string);
    function get_NumberOfColumns: string;
    procedure set_NumberOfColumns(value: string);
    function get_SequenceSeparator: string;
    procedure set_SequenceSeparator(value: string);
    function get_PageNumberSeparator: string;
    procedure set_PageNumberSeparator(value: string);
    function get_HasPageNumberSeparator: Boolean;
    function get_EntryType: string;
    procedure set_EntryType(value: string);
    function get_PageRangeSeparator: string;
    procedure set_PageRangeSeparator(value: string);
    function get_Heading: string;
    procedure set_Heading(value: string);
    function get_CrossReferenceSeparator: string;
    procedure set_CrossReferenceSeparator(value: string);
    function get_PageNumberListSeparator: string;
    procedure set_PageNumberListSeparator(value: string);
    function get_LetterRange: string;
    procedure set_LetterRange(value: string);
    function get_RunSubentriesOnSameLine: Boolean;
    procedure set_RunSubentriesOnSameLine(value: Boolean);
    function get_SequenceName: string;
    procedure set_SequenceName(value: string);
    function get_HasSequenceName: Boolean;
    function get_UseYomi: Boolean;
    procedure set_UseYomi(value: Boolean);
    function get_LanguageId: string;
    procedure set_LanguageId(value: string);
    function get_Start: DNFieldStart;
    function get_Separator: DNFieldSeparator;
    function get_End: DNFieldEnd;
    function get_Type: DNFieldType;
    function get_Result: string;
    procedure set_Result(value: string);
    function get_DisplayResult: string;
    function get_IsLocked: Boolean;
    procedure set_IsLocked(value: Boolean);
    function get_IsDirty: Boolean;
    procedure set_IsDirty(value: Boolean);
    function get_Format: DNFieldFormat;
    function get_LocaleId: Int32;
    procedure set_LocaleId(value: Int32);

  { methods } 

    function GetFieldCode: string; overload;
    function GetFieldCode(includeChildFieldCodes: Boolean): string; overload;
    function Remove: DNNode;
    procedure Update; overload;
    procedure Update(ignoreMergeFormat: Boolean); overload;
    function Unlink: Boolean;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property BookmarkName: string read get_BookmarkName write set_BookmarkName;
    property NumberOfColumns: string read get_NumberOfColumns write set_NumberOfColumns;
    property SequenceSeparator: string read get_SequenceSeparator write set_SequenceSeparator;
    property PageNumberSeparator: string read get_PageNumberSeparator write set_PageNumberSeparator;
    property HasPageNumberSeparator: Boolean read get_HasPageNumberSeparator;
    property EntryType: string read get_EntryType write set_EntryType;
    property PageRangeSeparator: string read get_PageRangeSeparator write set_PageRangeSeparator;
    property Heading: string read get_Heading write set_Heading;
    property CrossReferenceSeparator: string read get_CrossReferenceSeparator write set_CrossReferenceSeparator;
    property PageNumberListSeparator: string read get_PageNumberListSeparator write set_PageNumberListSeparator;
    property LetterRange: string read get_LetterRange write set_LetterRange;
    property RunSubentriesOnSameLine: Boolean read get_RunSubentriesOnSameLine write set_RunSubentriesOnSameLine;
    property SequenceName: string read get_SequenceName write set_SequenceName;
    property HasSequenceName: Boolean read get_HasSequenceName;
    property UseYomi: Boolean read get_UseYomi write set_UseYomi;
    property LanguageId: string read get_LanguageId write set_LanguageId;
    property Start: DNFieldStart read get_Start;
    property Separator: DNFieldSeparator read get_Separator;
    property &End: DNFieldEnd read get_End;
    property &Type: DNFieldType read get_Type;
    property Result: string read get_Result write set_Result;
    property DisplayResult: string read get_DisplayResult;
    property IsLocked: Boolean read get_IsLocked write set_IsLocked;
    property IsDirty: Boolean read get_IsDirty write set_IsDirty;
    property Format: DNFieldFormat read get_Format;
    property LocaleId: Int32 read get_LocaleId write set_LocaleId;
  end;

  TDNFieldIndex = class(TDNGenericImport<DNFieldIndexClass, DNFieldIndex>) end;

  //-------------namespace: Aspose.Words.Fields----------------
  DNFieldInfoClass = interface(DNFieldClass)
  ['{99A2C72A-2620-5D51-B357-5EA3CD1C14FF}']
  { constructors } 

    {class} function init: DNFieldInfo;

  end;

  [DNTypeName('Aspose.Words.Fields.FieldInfo')]
  DNFieldInfo = interface(DNField)
  ['{AD952E3C-E766-307E-B691-B61F87E5CD84}']
  { getters & setters } 

    function get_InfoType: string;
    procedure set_InfoType(value: string);
    function get_NewValue: string;
    procedure set_NewValue(value: string);
    function get_Start: DNFieldStart;
    function get_Separator: DNFieldSeparator;
    function get_End: DNFieldEnd;
    function get_Type: DNFieldType;
    function get_Result: string;
    procedure set_Result(value: string);
    function get_DisplayResult: string;
    function get_IsLocked: Boolean;
    procedure set_IsLocked(value: Boolean);
    function get_IsDirty: Boolean;
    procedure set_IsDirty(value: Boolean);
    function get_Format: DNFieldFormat;
    function get_LocaleId: Int32;
    procedure set_LocaleId(value: Int32);

  { methods } 

    function GetFieldCode: string; overload;
    function GetFieldCode(includeChildFieldCodes: Boolean): string; overload;
    function Remove: DNNode;
    procedure Update; overload;
    procedure Update(ignoreMergeFormat: Boolean); overload;
    function Unlink: Boolean;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property InfoType: string read get_InfoType write set_InfoType;
    property NewValue: string read get_NewValue write set_NewValue;
    property Start: DNFieldStart read get_Start;
    property Separator: DNFieldSeparator read get_Separator;
    property &End: DNFieldEnd read get_End;
    property &Type: DNFieldType read get_Type;
    property Result: string read get_Result write set_Result;
    property DisplayResult: string read get_DisplayResult;
    property IsLocked: Boolean read get_IsLocked write set_IsLocked;
    property IsDirty: Boolean read get_IsDirty write set_IsDirty;
    property Format: DNFieldFormat read get_Format;
    property LocaleId: Int32 read get_LocaleId write set_LocaleId;
  end;

  TDNFieldInfo = class(TDNGenericImport<DNFieldInfoClass, DNFieldInfo>) end;

  //-------------namespace: Aspose.Words.Fields----------------
  DNFieldKeywordsClass = interface(DNFieldClass)
  ['{CFBB7096-72D6-51FD-8EC0-712A790638AD}']
  { constructors } 

    {class} function init: DNFieldKeywords;

  end;

  [DNTypeName('Aspose.Words.Fields.FieldKeywords')]
  DNFieldKeywords = interface(DNField)
  ['{E84F8F26-D87D-37D1-AC10-BBA41B3CCCCA}']
  { getters & setters } 

    function get_Text: string;
    procedure set_Text(value: string);
    function get_Start: DNFieldStart;
    function get_Separator: DNFieldSeparator;
    function get_End: DNFieldEnd;
    function get_Type: DNFieldType;
    function get_Result: string;
    procedure set_Result(value: string);
    function get_DisplayResult: string;
    function get_IsLocked: Boolean;
    procedure set_IsLocked(value: Boolean);
    function get_IsDirty: Boolean;
    procedure set_IsDirty(value: Boolean);
    function get_Format: DNFieldFormat;
    function get_LocaleId: Int32;
    procedure set_LocaleId(value: Int32);

  { methods } 

    function GetFieldCode: string; overload;
    function GetFieldCode(includeChildFieldCodes: Boolean): string; overload;
    function Remove: DNNode;
    procedure Update; overload;
    procedure Update(ignoreMergeFormat: Boolean); overload;
    function Unlink: Boolean;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Text: string read get_Text write set_Text;
    property Start: DNFieldStart read get_Start;
    property Separator: DNFieldSeparator read get_Separator;
    property &End: DNFieldEnd read get_End;
    property &Type: DNFieldType read get_Type;
    property Result: string read get_Result write set_Result;
    property DisplayResult: string read get_DisplayResult;
    property IsLocked: Boolean read get_IsLocked write set_IsLocked;
    property IsDirty: Boolean read get_IsDirty write set_IsDirty;
    property Format: DNFieldFormat read get_Format;
    property LocaleId: Int32 read get_LocaleId write set_LocaleId;
  end;

  TDNFieldKeywords = class(TDNGenericImport<DNFieldKeywordsClass, DNFieldKeywords>) end;

  //-------------namespace: Aspose.Words.Fields----------------
  DNFieldLastSavedByClass = interface(DNFieldClass)
  ['{756E050F-3B8C-581C-ADF3-6741D92B8C26}']
  { constructors } 

    {class} function init: DNFieldLastSavedBy;

  end;

  [DNTypeName('Aspose.Words.Fields.FieldLastSavedBy')]
  DNFieldLastSavedBy = interface(DNField)
  ['{B64CD935-4E34-3D17-AB18-E01A1185E7E7}']
  { getters & setters } 

    function get_Start: DNFieldStart;
    function get_Separator: DNFieldSeparator;
    function get_End: DNFieldEnd;
    function get_Type: DNFieldType;
    function get_Result: string;
    procedure set_Result(value: string);
    function get_DisplayResult: string;
    function get_IsLocked: Boolean;
    procedure set_IsLocked(value: Boolean);
    function get_IsDirty: Boolean;
    procedure set_IsDirty(value: Boolean);
    function get_Format: DNFieldFormat;
    function get_LocaleId: Int32;
    procedure set_LocaleId(value: Int32);

  { methods } 

    function GetFieldCode: string; overload;
    function GetFieldCode(includeChildFieldCodes: Boolean): string; overload;
    function Remove: DNNode;
    procedure Update; overload;
    procedure Update(ignoreMergeFormat: Boolean); overload;
    function Unlink: Boolean;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Start: DNFieldStart read get_Start;
    property Separator: DNFieldSeparator read get_Separator;
    property &End: DNFieldEnd read get_End;
    property &Type: DNFieldType read get_Type;
    property Result: string read get_Result write set_Result;
    property DisplayResult: string read get_DisplayResult;
    property IsLocked: Boolean read get_IsLocked write set_IsLocked;
    property IsDirty: Boolean read get_IsDirty write set_IsDirty;
    property Format: DNFieldFormat read get_Format;
    property LocaleId: Int32 read get_LocaleId write set_LocaleId;
  end;

  TDNFieldLastSavedBy = class(TDNGenericImport<DNFieldLastSavedByClass, DNFieldLastSavedBy>) end;

  //-------------namespace: Aspose.Words.Fields----------------
  DNFieldLinkClass = interface(DNFieldClass)
  ['{0743A928-4536-5997-AF41-3FE516708ACE}']
  { constructors } 

    {class} function init: DNFieldLink;

  end;

  [DNTypeName('Aspose.Words.Fields.FieldLink')]
  DNFieldLink = interface(DNField)
  ['{31381381-022C-3037-AFF1-D74761F0122B}']
  { getters & setters } 

    function get_ProgId: string;
    procedure set_ProgId(value: string);
    function get_SourceFullName: string;
    procedure set_SourceFullName(value: string);
    function get_SourceItem: string;
    procedure set_SourceItem(value: string);
    function get_AutoUpdate: Boolean;
    procedure set_AutoUpdate(value: Boolean);
    function get_InsertAsBitmap: Boolean;
    procedure set_InsertAsBitmap(value: Boolean);
    function get_IsLinked: Boolean;
    procedure set_IsLinked(value: Boolean);
    function get_FormatUpdateType: string;
    procedure set_FormatUpdateType(value: string);
    function get_InsertAsHtml: Boolean;
    procedure set_InsertAsHtml(value: Boolean);
    function get_InsertAsPicture: Boolean;
    procedure set_InsertAsPicture(value: Boolean);
    function get_InsertAsRtf: Boolean;
    procedure set_InsertAsRtf(value: Boolean);
    function get_InsertAsText: Boolean;
    procedure set_InsertAsText(value: Boolean);
    function get_InsertAsUnicode: Boolean;
    procedure set_InsertAsUnicode(value: Boolean);
    function get_Start: DNFieldStart;
    function get_Separator: DNFieldSeparator;
    function get_End: DNFieldEnd;
    function get_Type: DNFieldType;
    function get_Result: string;
    procedure set_Result(value: string);
    function get_DisplayResult: string;
    function get_IsLocked: Boolean;
    procedure set_IsLocked(value: Boolean);
    function get_IsDirty: Boolean;
    procedure set_IsDirty(value: Boolean);
    function get_Format: DNFieldFormat;
    function get_LocaleId: Int32;
    procedure set_LocaleId(value: Int32);

  { methods } 

    function GetFieldCode: string; overload;
    function GetFieldCode(includeChildFieldCodes: Boolean): string; overload;
    function Remove: DNNode;
    procedure Update; overload;
    procedure Update(ignoreMergeFormat: Boolean); overload;
    function Unlink: Boolean;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property ProgId: string read get_ProgId write set_ProgId;
    property SourceFullName: string read get_SourceFullName write set_SourceFullName;
    property SourceItem: string read get_SourceItem write set_SourceItem;
    property AutoUpdate: Boolean read get_AutoUpdate write set_AutoUpdate;
    property InsertAsBitmap: Boolean read get_InsertAsBitmap write set_InsertAsBitmap;
    property IsLinked: Boolean read get_IsLinked write set_IsLinked;
    property FormatUpdateType: string read get_FormatUpdateType write set_FormatUpdateType;
    property InsertAsHtml: Boolean read get_InsertAsHtml write set_InsertAsHtml;
    property InsertAsPicture: Boolean read get_InsertAsPicture write set_InsertAsPicture;
    property InsertAsRtf: Boolean read get_InsertAsRtf write set_InsertAsRtf;
    property InsertAsText: Boolean read get_InsertAsText write set_InsertAsText;
    property InsertAsUnicode: Boolean read get_InsertAsUnicode write set_InsertAsUnicode;
    property Start: DNFieldStart read get_Start;
    property Separator: DNFieldSeparator read get_Separator;
    property &End: DNFieldEnd read get_End;
    property &Type: DNFieldType read get_Type;
    property Result: string read get_Result write set_Result;
    property DisplayResult: string read get_DisplayResult;
    property IsLocked: Boolean read get_IsLocked write set_IsLocked;
    property IsDirty: Boolean read get_IsDirty write set_IsDirty;
    property Format: DNFieldFormat read get_Format;
    property LocaleId: Int32 read get_LocaleId write set_LocaleId;
  end;

  TDNFieldLink = class(TDNGenericImport<DNFieldLinkClass, DNFieldLink>) end;

  //-------------namespace: Aspose.Words.Fields----------------
  DNFieldListNumClass = interface(DNFieldClass)
  ['{06592E2A-E7E5-5A20-98EC-0B24BA4BAFF9}']
  { constructors } 

    {class} function init: DNFieldListNum;

  end;

  [DNTypeName('Aspose.Words.Fields.FieldListNum')]
  DNFieldListNum = interface(DNField)
  ['{BF696C0D-043C-3DBD-B05F-BDC8A6026A4F}']
  { getters & setters } 

    function get_ListName: string;
    procedure set_ListName(value: string);
    function get_HasListName: Boolean;
    function get_ListLevel: string;
    procedure set_ListLevel(value: string);
    function get_StartingNumber: string;
    procedure set_StartingNumber(value: string);
    function get_Start: DNFieldStart;
    function get_Separator: DNFieldSeparator;
    function get_End: DNFieldEnd;
    function get_Type: DNFieldType;
    function get_Result: string;
    procedure set_Result(value: string);
    function get_DisplayResult: string;
    function get_IsLocked: Boolean;
    procedure set_IsLocked(value: Boolean);
    function get_IsDirty: Boolean;
    procedure set_IsDirty(value: Boolean);
    function get_Format: DNFieldFormat;
    function get_LocaleId: Int32;
    procedure set_LocaleId(value: Int32);

  { methods } 

    function GetFieldCode: string; overload;
    function GetFieldCode(includeChildFieldCodes: Boolean): string; overload;
    function Remove: DNNode;
    procedure Update; overload;
    procedure Update(ignoreMergeFormat: Boolean); overload;
    function Unlink: Boolean;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property ListName: string read get_ListName write set_ListName;
    property HasListName: Boolean read get_HasListName;
    property ListLevel: string read get_ListLevel write set_ListLevel;
    property StartingNumber: string read get_StartingNumber write set_StartingNumber;
    property Start: DNFieldStart read get_Start;
    property Separator: DNFieldSeparator read get_Separator;
    property &End: DNFieldEnd read get_End;
    property &Type: DNFieldType read get_Type;
    property Result: string read get_Result write set_Result;
    property DisplayResult: string read get_DisplayResult;
    property IsLocked: Boolean read get_IsLocked write set_IsLocked;
    property IsDirty: Boolean read get_IsDirty write set_IsDirty;
    property Format: DNFieldFormat read get_Format;
    property LocaleId: Int32 read get_LocaleId write set_LocaleId;
  end;

  TDNFieldListNum = class(TDNGenericImport<DNFieldListNumClass, DNFieldListNum>) end;

  //-------------namespace: Aspose.Words.Fields----------------
  DNFieldMacroButtonClass = interface(DNFieldClass)
  ['{F091C6C8-5251-54CD-A516-D5BD8C69578F}']
  { constructors } 

    {class} function init: DNFieldMacroButton;

  end;

  [DNTypeName('Aspose.Words.Fields.FieldMacroButton')]
  DNFieldMacroButton = interface(DNField)
  ['{45F48DEC-9B4F-3119-A2B1-4D504D36FC07}']
  { getters & setters } 

    function get_MacroName: string;
    procedure set_MacroName(value: string);
    function get_DisplayText: string;
    procedure set_DisplayText(value: string);
    function get_Start: DNFieldStart;
    function get_Separator: DNFieldSeparator;
    function get_End: DNFieldEnd;
    function get_Type: DNFieldType;
    function get_Result: string;
    procedure set_Result(value: string);
    function get_DisplayResult: string;
    function get_IsLocked: Boolean;
    procedure set_IsLocked(value: Boolean);
    function get_IsDirty: Boolean;
    procedure set_IsDirty(value: Boolean);
    function get_Format: DNFieldFormat;
    function get_LocaleId: Int32;
    procedure set_LocaleId(value: Int32);

  { methods } 

    function GetFieldCode: string; overload;
    function GetFieldCode(includeChildFieldCodes: Boolean): string; overload;
    function Remove: DNNode;
    procedure Update; overload;
    procedure Update(ignoreMergeFormat: Boolean); overload;
    function Unlink: Boolean;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property MacroName: string read get_MacroName write set_MacroName;
    property DisplayText: string read get_DisplayText write set_DisplayText;
    property Start: DNFieldStart read get_Start;
    property Separator: DNFieldSeparator read get_Separator;
    property &End: DNFieldEnd read get_End;
    property &Type: DNFieldType read get_Type;
    property Result: string read get_Result write set_Result;
    property DisplayResult: string read get_DisplayResult;
    property IsLocked: Boolean read get_IsLocked write set_IsLocked;
    property IsDirty: Boolean read get_IsDirty write set_IsDirty;
    property Format: DNFieldFormat read get_Format;
    property LocaleId: Int32 read get_LocaleId write set_LocaleId;
  end;

  TDNFieldMacroButton = class(TDNGenericImport<DNFieldMacroButtonClass, DNFieldMacroButton>) end;

  //-------------namespace: Aspose.Words.Fields----------------
  DNFieldMergeBarcodeClass = interface(DNFieldClass)
  ['{32932566-5BEB-5711-9F49-0ECA6219D711}']
  { constructors } 

    {class} function init: DNFieldMergeBarcode;

  end;

  [DNTypeName('Aspose.Words.Fields.FieldMergeBarcode')]
  DNFieldMergeBarcode = interface(DNField)
  ['{71F5BB6C-4C50-30BA-AAE8-0BDE464B984D}']
  { getters & setters } 

    function get_BarcodeValue: string;
    procedure set_BarcodeValue(value: string);
    function get_BarcodeType: string;
    procedure set_BarcodeType(value: string);
    function get_SymbolHeight: string;
    procedure set_SymbolHeight(value: string);
    function get_SymbolRotation: string;
    procedure set_SymbolRotation(value: string);
    function get_ScalingFactor: string;
    procedure set_ScalingFactor(value: string);
    function get_ForegroundColor: string;
    procedure set_ForegroundColor(value: string);
    function get_BackgroundColor: string;
    procedure set_BackgroundColor(value: string);
    function get_PosCodeStyle: string;
    procedure set_PosCodeStyle(value: string);
    function get_CaseCodeStyle: string;
    procedure set_CaseCodeStyle(value: string);
    function get_ErrorCorrectionLevel: string;
    procedure set_ErrorCorrectionLevel(value: string);
    function get_DisplayText: Boolean;
    procedure set_DisplayText(value: Boolean);
    function get_AddStartStopChar: Boolean;
    procedure set_AddStartStopChar(value: Boolean);
    function get_FixCheckDigit: Boolean;
    procedure set_FixCheckDigit(value: Boolean);
    function get_Start: DNFieldStart;
    function get_Separator: DNFieldSeparator;
    function get_End: DNFieldEnd;
    function get_Type: DNFieldType;
    function get_Result: string;
    procedure set_Result(value: string);
    function get_DisplayResult: string;
    function get_IsLocked: Boolean;
    procedure set_IsLocked(value: Boolean);
    function get_IsDirty: Boolean;
    procedure set_IsDirty(value: Boolean);
    function get_Format: DNFieldFormat;
    function get_LocaleId: Int32;
    procedure set_LocaleId(value: Int32);

  { methods } 

    function GetFieldCode: string; overload;
    function GetFieldCode(includeChildFieldCodes: Boolean): string; overload;
    function Remove: DNNode;
    procedure Update; overload;
    procedure Update(ignoreMergeFormat: Boolean); overload;
    function Unlink: Boolean;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property BarcodeValue: string read get_BarcodeValue write set_BarcodeValue;
    property BarcodeType: string read get_BarcodeType write set_BarcodeType;
    property SymbolHeight: string read get_SymbolHeight write set_SymbolHeight;
    property SymbolRotation: string read get_SymbolRotation write set_SymbolRotation;
    property ScalingFactor: string read get_ScalingFactor write set_ScalingFactor;
    property ForegroundColor: string read get_ForegroundColor write set_ForegroundColor;
    property BackgroundColor: string read get_BackgroundColor write set_BackgroundColor;
    property PosCodeStyle: string read get_PosCodeStyle write set_PosCodeStyle;
    property CaseCodeStyle: string read get_CaseCodeStyle write set_CaseCodeStyle;
    property ErrorCorrectionLevel: string read get_ErrorCorrectionLevel write set_ErrorCorrectionLevel;
    property DisplayText: Boolean read get_DisplayText write set_DisplayText;
    property AddStartStopChar: Boolean read get_AddStartStopChar write set_AddStartStopChar;
    property FixCheckDigit: Boolean read get_FixCheckDigit write set_FixCheckDigit;
    property Start: DNFieldStart read get_Start;
    property Separator: DNFieldSeparator read get_Separator;
    property &End: DNFieldEnd read get_End;
    property &Type: DNFieldType read get_Type;
    property Result: string read get_Result write set_Result;
    property DisplayResult: string read get_DisplayResult;
    property IsLocked: Boolean read get_IsLocked write set_IsLocked;
    property IsDirty: Boolean read get_IsDirty write set_IsDirty;
    property Format: DNFieldFormat read get_Format;
    property LocaleId: Int32 read get_LocaleId write set_LocaleId;
  end;

  TDNFieldMergeBarcode = class(TDNGenericImport<DNFieldMergeBarcodeClass, DNFieldMergeBarcode>) end;

  //-------------namespace: Aspose.Words.Fields----------------
  DNFieldMergeFieldClass = interface(DNFieldClass)
  ['{40F43819-1C35-57A6-BFC4-8D4B86F16437}']
  end;

  [DNTypeName('Aspose.Words.Fields.FieldMergeField')]
  DNFieldMergeField = interface(DNField)
  ['{3D250C68-2D3C-3E33-B4C0-9F6F2C7D1B9A}']
  { getters & setters } 

    function get_Type: DNFieldType;
    function get_FieldNameNoPrefix: string;
    function get_FieldName: string;
    procedure set_FieldName(value: string);
    function get_TextBefore: string;
    procedure set_TextBefore(value: string);
    function get_TextAfter: string;
    procedure set_TextAfter(value: string);
    function get_IsMapped: Boolean;
    procedure set_IsMapped(value: Boolean);
    function get_IsVerticalFormatting: Boolean;
    procedure set_IsVerticalFormatting(value: Boolean);
    function get_Start: DNFieldStart;
    function get_Separator: DNFieldSeparator;
    function get_End: DNFieldEnd;
    function get_Result: string;
    procedure set_Result(value: string);
    function get_DisplayResult: string;
    function get_IsLocked: Boolean;
    procedure set_IsLocked(value: Boolean);
    function get_IsDirty: Boolean;
    procedure set_IsDirty(value: Boolean);
    function get_Format: DNFieldFormat;
    function get_LocaleId: Int32;
    procedure set_LocaleId(value: Int32);

  { methods } 

    function GetFieldCode: string; overload;
    function GetFieldCode(includeChildFieldCodes: Boolean): string; overload;
    function Remove: DNNode;
    procedure Update; overload;
    procedure Update(ignoreMergeFormat: Boolean); overload;
    function Unlink: Boolean;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property &Type: DNFieldType read get_Type;
    property FieldNameNoPrefix: string read get_FieldNameNoPrefix;
    property FieldName: string read get_FieldName write set_FieldName;
    property TextBefore: string read get_TextBefore write set_TextBefore;
    property TextAfter: string read get_TextAfter write set_TextAfter;
    property IsMapped: Boolean read get_IsMapped write set_IsMapped;
    property IsVerticalFormatting: Boolean read get_IsVerticalFormatting write set_IsVerticalFormatting;
    property Start: DNFieldStart read get_Start;
    property Separator: DNFieldSeparator read get_Separator;
    property &End: DNFieldEnd read get_End;
    property Result: string read get_Result write set_Result;
    property DisplayResult: string read get_DisplayResult;
    property IsLocked: Boolean read get_IsLocked write set_IsLocked;
    property IsDirty: Boolean read get_IsDirty write set_IsDirty;
    property Format: DNFieldFormat read get_Format;
    property LocaleId: Int32 read get_LocaleId write set_LocaleId;
  end;

  TDNFieldMergeField = class(TDNGenericImport<DNFieldMergeFieldClass, DNFieldMergeField>) end;

  //-------------namespace: Aspose.Words.Fields----------------
  DNFieldMergeRecClass = interface(DNFieldClass)
  ['{53AA7A54-B268-5FC3-9823-9455522242AD}']
  { constructors } 

    {class} function init: DNFieldMergeRec;

  end;

  [DNTypeName('Aspose.Words.Fields.FieldMergeRec')]
  DNFieldMergeRec = interface(DNField)
  ['{4F36298E-1B5D-3AB5-A007-712152208B79}']
  { getters & setters } 

    function get_Start: DNFieldStart;
    function get_Separator: DNFieldSeparator;
    function get_End: DNFieldEnd;
    function get_Type: DNFieldType;
    function get_Result: string;
    procedure set_Result(value: string);
    function get_DisplayResult: string;
    function get_IsLocked: Boolean;
    procedure set_IsLocked(value: Boolean);
    function get_IsDirty: Boolean;
    procedure set_IsDirty(value: Boolean);
    function get_Format: DNFieldFormat;
    function get_LocaleId: Int32;
    procedure set_LocaleId(value: Int32);

  { methods } 

    function GetFieldCode: string; overload;
    function GetFieldCode(includeChildFieldCodes: Boolean): string; overload;
    function Remove: DNNode;
    procedure Update; overload;
    procedure Update(ignoreMergeFormat: Boolean); overload;
    function Unlink: Boolean;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Start: DNFieldStart read get_Start;
    property Separator: DNFieldSeparator read get_Separator;
    property &End: DNFieldEnd read get_End;
    property &Type: DNFieldType read get_Type;
    property Result: string read get_Result write set_Result;
    property DisplayResult: string read get_DisplayResult;
    property IsLocked: Boolean read get_IsLocked write set_IsLocked;
    property IsDirty: Boolean read get_IsDirty write set_IsDirty;
    property Format: DNFieldFormat read get_Format;
    property LocaleId: Int32 read get_LocaleId write set_LocaleId;
  end;

  TDNFieldMergeRec = class(TDNGenericImport<DNFieldMergeRecClass, DNFieldMergeRec>) end;

  //-------------namespace: Aspose.Words.Fields----------------
  DNFieldMergeSeqClass = interface(DNFieldClass)
  ['{F47B2FF7-271C-511D-A2EE-3CD43370A832}']
  { constructors } 

    {class} function init: DNFieldMergeSeq;

  end;

  [DNTypeName('Aspose.Words.Fields.FieldMergeSeq')]
  DNFieldMergeSeq = interface(DNField)
  ['{1076C2CF-39B8-39E9-87B3-1ECB9C808D5F}']
  { getters & setters } 

    function get_Start: DNFieldStart;
    function get_Separator: DNFieldSeparator;
    function get_End: DNFieldEnd;
    function get_Type: DNFieldType;
    function get_Result: string;
    procedure set_Result(value: string);
    function get_DisplayResult: string;
    function get_IsLocked: Boolean;
    procedure set_IsLocked(value: Boolean);
    function get_IsDirty: Boolean;
    procedure set_IsDirty(value: Boolean);
    function get_Format: DNFieldFormat;
    function get_LocaleId: Int32;
    procedure set_LocaleId(value: Int32);

  { methods } 

    function GetFieldCode: string; overload;
    function GetFieldCode(includeChildFieldCodes: Boolean): string; overload;
    function Remove: DNNode;
    procedure Update; overload;
    procedure Update(ignoreMergeFormat: Boolean); overload;
    function Unlink: Boolean;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Start: DNFieldStart read get_Start;
    property Separator: DNFieldSeparator read get_Separator;
    property &End: DNFieldEnd read get_End;
    property &Type: DNFieldType read get_Type;
    property Result: string read get_Result write set_Result;
    property DisplayResult: string read get_DisplayResult;
    property IsLocked: Boolean read get_IsLocked write set_IsLocked;
    property IsDirty: Boolean read get_IsDirty write set_IsDirty;
    property Format: DNFieldFormat read get_Format;
    property LocaleId: Int32 read get_LocaleId write set_LocaleId;
  end;

  TDNFieldMergeSeq = class(TDNGenericImport<DNFieldMergeSeqClass, DNFieldMergeSeq>) end;

  //-------------namespace: Aspose.Words.Fields----------------
  DNFieldNextClass = interface(DNFieldClass)
  ['{927EC9F3-37C4-5FB3-BF98-EC0786030B15}']
  { constructors } 

    {class} function init: DNFieldNext;

  end;

  [DNTypeName('Aspose.Words.Fields.FieldNext')]
  DNFieldNext = interface(DNField)
  ['{9D6BF2B5-4AF9-3C4C-8093-F66AFD4518DB}']
  { getters & setters } 

    function get_Start: DNFieldStart;
    function get_Separator: DNFieldSeparator;
    function get_End: DNFieldEnd;
    function get_Type: DNFieldType;
    function get_Result: string;
    procedure set_Result(value: string);
    function get_DisplayResult: string;
    function get_IsLocked: Boolean;
    procedure set_IsLocked(value: Boolean);
    function get_IsDirty: Boolean;
    procedure set_IsDirty(value: Boolean);
    function get_Format: DNFieldFormat;
    function get_LocaleId: Int32;
    procedure set_LocaleId(value: Int32);

  { methods } 

    function GetFieldCode: string; overload;
    function GetFieldCode(includeChildFieldCodes: Boolean): string; overload;
    function Remove: DNNode;
    procedure Update; overload;
    procedure Update(ignoreMergeFormat: Boolean); overload;
    function Unlink: Boolean;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Start: DNFieldStart read get_Start;
    property Separator: DNFieldSeparator read get_Separator;
    property &End: DNFieldEnd read get_End;
    property &Type: DNFieldType read get_Type;
    property Result: string read get_Result write set_Result;
    property DisplayResult: string read get_DisplayResult;
    property IsLocked: Boolean read get_IsLocked write set_IsLocked;
    property IsDirty: Boolean read get_IsDirty write set_IsDirty;
    property Format: DNFieldFormat read get_Format;
    property LocaleId: Int32 read get_LocaleId write set_LocaleId;
  end;

  TDNFieldNext = class(TDNGenericImport<DNFieldNextClass, DNFieldNext>) end;

  //-------------namespace: Aspose.Words.Fields----------------
  DNFieldNextIfClass = interface(DNFieldClass)
  ['{498CF9E3-3D26-583C-AFC9-E91393F51345}']
  { constructors } 

    {class} function init: DNFieldNextIf;

  end;

  [DNTypeName('Aspose.Words.Fields.FieldNextIf')]
  DNFieldNextIf = interface(DNField)
  ['{7E62BF3F-C96D-3C57-AC4E-BEC8046E5D0A}']
  { getters & setters } 

    function get_LeftExpression: string;
    procedure set_LeftExpression(value: string);
    function get_ComparisonOperator: string;
    procedure set_ComparisonOperator(value: string);
    function get_RightExpression: string;
    procedure set_RightExpression(value: string);
    function get_Start: DNFieldStart;
    function get_Separator: DNFieldSeparator;
    function get_End: DNFieldEnd;
    function get_Type: DNFieldType;
    function get_Result: string;
    procedure set_Result(value: string);
    function get_DisplayResult: string;
    function get_IsLocked: Boolean;
    procedure set_IsLocked(value: Boolean);
    function get_IsDirty: Boolean;
    procedure set_IsDirty(value: Boolean);
    function get_Format: DNFieldFormat;
    function get_LocaleId: Int32;
    procedure set_LocaleId(value: Int32);

  { methods } 

    function GetFieldCode: string; overload;
    function GetFieldCode(includeChildFieldCodes: Boolean): string; overload;
    function Remove: DNNode;
    procedure Update; overload;
    procedure Update(ignoreMergeFormat: Boolean); overload;
    function Unlink: Boolean;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property LeftExpression: string read get_LeftExpression write set_LeftExpression;
    property ComparisonOperator: string read get_ComparisonOperator write set_ComparisonOperator;
    property RightExpression: string read get_RightExpression write set_RightExpression;
    property Start: DNFieldStart read get_Start;
    property Separator: DNFieldSeparator read get_Separator;
    property &End: DNFieldEnd read get_End;
    property &Type: DNFieldType read get_Type;
    property Result: string read get_Result write set_Result;
    property DisplayResult: string read get_DisplayResult;
    property IsLocked: Boolean read get_IsLocked write set_IsLocked;
    property IsDirty: Boolean read get_IsDirty write set_IsDirty;
    property Format: DNFieldFormat read get_Format;
    property LocaleId: Int32 read get_LocaleId write set_LocaleId;
  end;

  TDNFieldNextIf = class(TDNGenericImport<DNFieldNextIfClass, DNFieldNextIf>) end;

  //-------------namespace: Aspose.Words.Fields----------------
  DNFieldNoteRefClass = interface(DNFieldClass)
  ['{DE2BA9E2-956F-5C0F-AA8D-8D5470C87A92}']
  { constructors } 

    {class} function init: DNFieldNoteRef;

  end;

  [DNTypeName('Aspose.Words.Fields.FieldNoteRef')]
  DNFieldNoteRef = interface(DNField)
  ['{88253182-7532-3A03-8C4B-A2C50CB585BA}']
  { getters & setters } 

    function get_BookmarkName: string;
    procedure set_BookmarkName(value: string);
    function get_InsertReferenceMark: Boolean;
    procedure set_InsertReferenceMark(value: Boolean);
    function get_InsertHyperlink: Boolean;
    procedure set_InsertHyperlink(value: Boolean);
    function get_InsertRelativePosition: Boolean;
    procedure set_InsertRelativePosition(value: Boolean);
    function get_Start: DNFieldStart;
    function get_Separator: DNFieldSeparator;
    function get_End: DNFieldEnd;
    function get_Type: DNFieldType;
    function get_Result: string;
    procedure set_Result(value: string);
    function get_DisplayResult: string;
    function get_IsLocked: Boolean;
    procedure set_IsLocked(value: Boolean);
    function get_IsDirty: Boolean;
    procedure set_IsDirty(value: Boolean);
    function get_Format: DNFieldFormat;
    function get_LocaleId: Int32;
    procedure set_LocaleId(value: Int32);

  { methods } 

    function GetFieldCode: string; overload;
    function GetFieldCode(includeChildFieldCodes: Boolean): string; overload;
    function Remove: DNNode;
    procedure Update; overload;
    procedure Update(ignoreMergeFormat: Boolean); overload;
    function Unlink: Boolean;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property BookmarkName: string read get_BookmarkName write set_BookmarkName;
    property InsertReferenceMark: Boolean read get_InsertReferenceMark write set_InsertReferenceMark;
    property InsertHyperlink: Boolean read get_InsertHyperlink write set_InsertHyperlink;
    property InsertRelativePosition: Boolean read get_InsertRelativePosition write set_InsertRelativePosition;
    property Start: DNFieldStart read get_Start;
    property Separator: DNFieldSeparator read get_Separator;
    property &End: DNFieldEnd read get_End;
    property &Type: DNFieldType read get_Type;
    property Result: string read get_Result write set_Result;
    property DisplayResult: string read get_DisplayResult;
    property IsLocked: Boolean read get_IsLocked write set_IsLocked;
    property IsDirty: Boolean read get_IsDirty write set_IsDirty;
    property Format: DNFieldFormat read get_Format;
    property LocaleId: Int32 read get_LocaleId write set_LocaleId;
  end;

  TDNFieldNoteRef = class(TDNGenericImport<DNFieldNoteRefClass, DNFieldNoteRef>) end;

  //-------------namespace: Aspose.Words.Fields----------------
  DNFieldNumCharsClass = interface(DNFieldClass)
  ['{A8A646AD-25FC-5819-A0E5-6F4B5C9CF716}']
  { constructors } 

    {class} function init: DNFieldNumChars;

  end;

  [DNTypeName('Aspose.Words.Fields.FieldNumChars')]
  DNFieldNumChars = interface(DNField)
  ['{E59E80BC-C59B-3A5F-A005-CCF431D3688A}']
  { getters & setters } 

    function get_Start: DNFieldStart;
    function get_Separator: DNFieldSeparator;
    function get_End: DNFieldEnd;
    function get_Type: DNFieldType;
    function get_Result: string;
    procedure set_Result(value: string);
    function get_DisplayResult: string;
    function get_IsLocked: Boolean;
    procedure set_IsLocked(value: Boolean);
    function get_IsDirty: Boolean;
    procedure set_IsDirty(value: Boolean);
    function get_Format: DNFieldFormat;
    function get_LocaleId: Int32;
    procedure set_LocaleId(value: Int32);

  { methods } 

    function GetFieldCode: string; overload;
    function GetFieldCode(includeChildFieldCodes: Boolean): string; overload;
    function Remove: DNNode;
    procedure Update; overload;
    procedure Update(ignoreMergeFormat: Boolean); overload;
    function Unlink: Boolean;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Start: DNFieldStart read get_Start;
    property Separator: DNFieldSeparator read get_Separator;
    property &End: DNFieldEnd read get_End;
    property &Type: DNFieldType read get_Type;
    property Result: string read get_Result write set_Result;
    property DisplayResult: string read get_DisplayResult;
    property IsLocked: Boolean read get_IsLocked write set_IsLocked;
    property IsDirty: Boolean read get_IsDirty write set_IsDirty;
    property Format: DNFieldFormat read get_Format;
    property LocaleId: Int32 read get_LocaleId write set_LocaleId;
  end;

  TDNFieldNumChars = class(TDNGenericImport<DNFieldNumCharsClass, DNFieldNumChars>) end;

  //-------------namespace: Aspose.Words.Fields----------------
  DNFieldNumPagesClass = interface(DNFieldClass)
  ['{18644BEA-DCDE-5057-A52F-A4C3167667F6}']
  { constructors } 

    {class} function init: DNFieldNumPages;

  end;

  [DNTypeName('Aspose.Words.Fields.FieldNumPages')]
  DNFieldNumPages = interface(DNField)
  ['{649532C6-758C-389D-82F7-6BE25E89F081}']
  { getters & setters } 

    function get_Start: DNFieldStart;
    function get_Separator: DNFieldSeparator;
    function get_End: DNFieldEnd;
    function get_Type: DNFieldType;
    function get_Result: string;
    procedure set_Result(value: string);
    function get_DisplayResult: string;
    function get_IsLocked: Boolean;
    procedure set_IsLocked(value: Boolean);
    function get_IsDirty: Boolean;
    procedure set_IsDirty(value: Boolean);
    function get_Format: DNFieldFormat;
    function get_LocaleId: Int32;
    procedure set_LocaleId(value: Int32);

  { methods } 

    function GetFieldCode: string; overload;
    function GetFieldCode(includeChildFieldCodes: Boolean): string; overload;
    function Remove: DNNode;
    procedure Update; overload;
    procedure Update(ignoreMergeFormat: Boolean); overload;
    function Unlink: Boolean;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Start: DNFieldStart read get_Start;
    property Separator: DNFieldSeparator read get_Separator;
    property &End: DNFieldEnd read get_End;
    property &Type: DNFieldType read get_Type;
    property Result: string read get_Result write set_Result;
    property DisplayResult: string read get_DisplayResult;
    property IsLocked: Boolean read get_IsLocked write set_IsLocked;
    property IsDirty: Boolean read get_IsDirty write set_IsDirty;
    property Format: DNFieldFormat read get_Format;
    property LocaleId: Int32 read get_LocaleId write set_LocaleId;
  end;

  TDNFieldNumPages = class(TDNGenericImport<DNFieldNumPagesClass, DNFieldNumPages>) end;

  //-------------namespace: Aspose.Words.Fields----------------
  DNFieldNumWordsClass = interface(DNFieldClass)
  ['{141701C4-3224-5905-9177-3FB97C5A5F1D}']
  { constructors } 

    {class} function init: DNFieldNumWords;

  end;

  [DNTypeName('Aspose.Words.Fields.FieldNumWords')]
  DNFieldNumWords = interface(DNField)
  ['{DEF9F6B8-F9B8-380F-B94D-18FA7B6787AD}']
  { getters & setters } 

    function get_Start: DNFieldStart;
    function get_Separator: DNFieldSeparator;
    function get_End: DNFieldEnd;
    function get_Type: DNFieldType;
    function get_Result: string;
    procedure set_Result(value: string);
    function get_DisplayResult: string;
    function get_IsLocked: Boolean;
    procedure set_IsLocked(value: Boolean);
    function get_IsDirty: Boolean;
    procedure set_IsDirty(value: Boolean);
    function get_Format: DNFieldFormat;
    function get_LocaleId: Int32;
    procedure set_LocaleId(value: Int32);

  { methods } 

    function GetFieldCode: string; overload;
    function GetFieldCode(includeChildFieldCodes: Boolean): string; overload;
    function Remove: DNNode;
    procedure Update; overload;
    procedure Update(ignoreMergeFormat: Boolean); overload;
    function Unlink: Boolean;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Start: DNFieldStart read get_Start;
    property Separator: DNFieldSeparator read get_Separator;
    property &End: DNFieldEnd read get_End;
    property &Type: DNFieldType read get_Type;
    property Result: string read get_Result write set_Result;
    property DisplayResult: string read get_DisplayResult;
    property IsLocked: Boolean read get_IsLocked write set_IsLocked;
    property IsDirty: Boolean read get_IsDirty write set_IsDirty;
    property Format: DNFieldFormat read get_Format;
    property LocaleId: Int32 read get_LocaleId write set_LocaleId;
  end;

  TDNFieldNumWords = class(TDNGenericImport<DNFieldNumWordsClass, DNFieldNumWords>) end;

  //-------------namespace: Aspose.Words.Fields----------------
  DNFieldOcxClass = interface(DNFieldClass)
  ['{D4176962-23B6-5F3A-AEB1-45329B616505}']
  { constructors } 

    {class} function init: DNFieldOcx;

  end;

  [DNTypeName('Aspose.Words.Fields.FieldOcx')]
  DNFieldOcx = interface(DNField)
  ['{22A8493F-BFE0-3271-9EE2-7C64FECC4B60}']
  { getters & setters } 

    function get_Start: DNFieldStart;
    function get_Separator: DNFieldSeparator;
    function get_End: DNFieldEnd;
    function get_Type: DNFieldType;
    function get_Result: string;
    procedure set_Result(value: string);
    function get_DisplayResult: string;
    function get_IsLocked: Boolean;
    procedure set_IsLocked(value: Boolean);
    function get_IsDirty: Boolean;
    procedure set_IsDirty(value: Boolean);
    function get_Format: DNFieldFormat;
    function get_LocaleId: Int32;
    procedure set_LocaleId(value: Int32);

  { methods } 

    function GetFieldCode: string; overload;
    function GetFieldCode(includeChildFieldCodes: Boolean): string; overload;
    function Remove: DNNode;
    procedure Update; overload;
    procedure Update(ignoreMergeFormat: Boolean); overload;
    function Unlink: Boolean;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Start: DNFieldStart read get_Start;
    property Separator: DNFieldSeparator read get_Separator;
    property &End: DNFieldEnd read get_End;
    property &Type: DNFieldType read get_Type;
    property Result: string read get_Result write set_Result;
    property DisplayResult: string read get_DisplayResult;
    property IsLocked: Boolean read get_IsLocked write set_IsLocked;
    property IsDirty: Boolean read get_IsDirty write set_IsDirty;
    property Format: DNFieldFormat read get_Format;
    property LocaleId: Int32 read get_LocaleId write set_LocaleId;
  end;

  TDNFieldOcx = class(TDNGenericImport<DNFieldOcxClass, DNFieldOcx>) end;

  //-------------namespace: Aspose.Words.Fields----------------
  DNFieldPageClass = interface(DNFieldClass)
  ['{C81F55A6-3D6E-55FD-BA3A-42F4173D4741}']
  { constructors } 

    {class} function init: DNFieldPage;

  end;

  [DNTypeName('Aspose.Words.Fields.FieldPage')]
  DNFieldPage = interface(DNField)
  ['{35961244-EC15-3C42-841B-F2DD45E90BED}']
  { getters & setters } 

    function get_Start: DNFieldStart;
    function get_Separator: DNFieldSeparator;
    function get_End: DNFieldEnd;
    function get_Type: DNFieldType;
    function get_Result: string;
    procedure set_Result(value: string);
    function get_DisplayResult: string;
    function get_IsLocked: Boolean;
    procedure set_IsLocked(value: Boolean);
    function get_IsDirty: Boolean;
    procedure set_IsDirty(value: Boolean);
    function get_Format: DNFieldFormat;
    function get_LocaleId: Int32;
    procedure set_LocaleId(value: Int32);

  { methods } 

    function GetFieldCode: string; overload;
    function GetFieldCode(includeChildFieldCodes: Boolean): string; overload;
    function Remove: DNNode;
    procedure Update; overload;
    procedure Update(ignoreMergeFormat: Boolean); overload;
    function Unlink: Boolean;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Start: DNFieldStart read get_Start;
    property Separator: DNFieldSeparator read get_Separator;
    property &End: DNFieldEnd read get_End;
    property &Type: DNFieldType read get_Type;
    property Result: string read get_Result write set_Result;
    property DisplayResult: string read get_DisplayResult;
    property IsLocked: Boolean read get_IsLocked write set_IsLocked;
    property IsDirty: Boolean read get_IsDirty write set_IsDirty;
    property Format: DNFieldFormat read get_Format;
    property LocaleId: Int32 read get_LocaleId write set_LocaleId;
  end;

  TDNFieldPage = class(TDNGenericImport<DNFieldPageClass, DNFieldPage>) end;

  //-------------namespace: Aspose.Words.Fields----------------
  DNFieldPageRefClass = interface(DNFieldClass)
  ['{F6F5296C-5DD4-57D6-BA0E-EB9A1A2FB5DD}']
  { constructors } 

    {class} function init: DNFieldPageRef;

  end;

  [DNTypeName('Aspose.Words.Fields.FieldPageRef')]
  DNFieldPageRef = interface(DNField)
  ['{9C11A508-6111-3063-A46D-C24A010D2B4B}']
  { getters & setters } 

    function get_BookmarkName: string;
    procedure set_BookmarkName(value: string);
    function get_InsertHyperlink: Boolean;
    procedure set_InsertHyperlink(value: Boolean);
    function get_InsertRelativePosition: Boolean;
    procedure set_InsertRelativePosition(value: Boolean);
    function get_Start: DNFieldStart;
    function get_Separator: DNFieldSeparator;
    function get_End: DNFieldEnd;
    function get_Type: DNFieldType;
    function get_Result: string;
    procedure set_Result(value: string);
    function get_DisplayResult: string;
    function get_IsLocked: Boolean;
    procedure set_IsLocked(value: Boolean);
    function get_IsDirty: Boolean;
    procedure set_IsDirty(value: Boolean);
    function get_Format: DNFieldFormat;
    function get_LocaleId: Int32;
    procedure set_LocaleId(value: Int32);

  { methods } 

    function GetFieldCode: string; overload;
    function GetFieldCode(includeChildFieldCodes: Boolean): string; overload;
    function Remove: DNNode;
    procedure Update; overload;
    procedure Update(ignoreMergeFormat: Boolean); overload;
    function Unlink: Boolean;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property BookmarkName: string read get_BookmarkName write set_BookmarkName;
    property InsertHyperlink: Boolean read get_InsertHyperlink write set_InsertHyperlink;
    property InsertRelativePosition: Boolean read get_InsertRelativePosition write set_InsertRelativePosition;
    property Start: DNFieldStart read get_Start;
    property Separator: DNFieldSeparator read get_Separator;
    property &End: DNFieldEnd read get_End;
    property &Type: DNFieldType read get_Type;
    property Result: string read get_Result write set_Result;
    property DisplayResult: string read get_DisplayResult;
    property IsLocked: Boolean read get_IsLocked write set_IsLocked;
    property IsDirty: Boolean read get_IsDirty write set_IsDirty;
    property Format: DNFieldFormat read get_Format;
    property LocaleId: Int32 read get_LocaleId write set_LocaleId;
  end;

  TDNFieldPageRef = class(TDNGenericImport<DNFieldPageRefClass, DNFieldPageRef>) end;

  //-------------namespace: Aspose.Words.Fields----------------
  DNFieldPrintClass = interface(DNFieldClass)
  ['{20DD8852-AAFE-5EE8-9DB1-E0615ADB3A53}']
  { constructors } 

    {class} function init: DNFieldPrint;

  end;

  [DNTypeName('Aspose.Words.Fields.FieldPrint')]
  DNFieldPrint = interface(DNField)
  ['{84BED927-49C4-3900-AA36-E77917239DD6}']
  { getters & setters } 

    function get_PrinterInstructions: string;
    procedure set_PrinterInstructions(value: string);
    function get_PostScriptGroup: string;
    procedure set_PostScriptGroup(value: string);
    function get_Start: DNFieldStart;
    function get_Separator: DNFieldSeparator;
    function get_End: DNFieldEnd;
    function get_Type: DNFieldType;
    function get_Result: string;
    procedure set_Result(value: string);
    function get_DisplayResult: string;
    function get_IsLocked: Boolean;
    procedure set_IsLocked(value: Boolean);
    function get_IsDirty: Boolean;
    procedure set_IsDirty(value: Boolean);
    function get_Format: DNFieldFormat;
    function get_LocaleId: Int32;
    procedure set_LocaleId(value: Int32);

  { methods } 

    function GetFieldCode: string; overload;
    function GetFieldCode(includeChildFieldCodes: Boolean): string; overload;
    function Remove: DNNode;
    procedure Update; overload;
    procedure Update(ignoreMergeFormat: Boolean); overload;
    function Unlink: Boolean;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property PrinterInstructions: string read get_PrinterInstructions write set_PrinterInstructions;
    property PostScriptGroup: string read get_PostScriptGroup write set_PostScriptGroup;
    property Start: DNFieldStart read get_Start;
    property Separator: DNFieldSeparator read get_Separator;
    property &End: DNFieldEnd read get_End;
    property &Type: DNFieldType read get_Type;
    property Result: string read get_Result write set_Result;
    property DisplayResult: string read get_DisplayResult;
    property IsLocked: Boolean read get_IsLocked write set_IsLocked;
    property IsDirty: Boolean read get_IsDirty write set_IsDirty;
    property Format: DNFieldFormat read get_Format;
    property LocaleId: Int32 read get_LocaleId write set_LocaleId;
  end;

  TDNFieldPrint = class(TDNGenericImport<DNFieldPrintClass, DNFieldPrint>) end;

  //-------------namespace: Aspose.Words.Fields----------------
  DNFieldPrintDateClass = interface(DNFieldClass)
  ['{DAE0CE07-CADB-5ACE-9873-00AD2DB80B4E}']
  { constructors } 

    {class} function init: DNFieldPrintDate;

  end;

  [DNTypeName('Aspose.Words.Fields.FieldPrintDate')]
  DNFieldPrintDate = interface(DNField)
  ['{113949E0-A610-3214-936C-42FF37C5DD3C}']
  { getters & setters } 

    function get_UseLunarCalendar: Boolean;
    procedure set_UseLunarCalendar(value: Boolean);
    function get_UseSakaEraCalendar: Boolean;
    procedure set_UseSakaEraCalendar(value: Boolean);
    function get_UseUmAlQuraCalendar: Boolean;
    procedure set_UseUmAlQuraCalendar(value: Boolean);
    function get_Start: DNFieldStart;
    function get_Separator: DNFieldSeparator;
    function get_End: DNFieldEnd;
    function get_Type: DNFieldType;
    function get_Result: string;
    procedure set_Result(value: string);
    function get_DisplayResult: string;
    function get_IsLocked: Boolean;
    procedure set_IsLocked(value: Boolean);
    function get_IsDirty: Boolean;
    procedure set_IsDirty(value: Boolean);
    function get_Format: DNFieldFormat;
    function get_LocaleId: Int32;
    procedure set_LocaleId(value: Int32);

  { methods } 

    function GetFieldCode: string; overload;
    function GetFieldCode(includeChildFieldCodes: Boolean): string; overload;
    function Remove: DNNode;
    procedure Update; overload;
    procedure Update(ignoreMergeFormat: Boolean); overload;
    function Unlink: Boolean;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property UseLunarCalendar: Boolean read get_UseLunarCalendar write set_UseLunarCalendar;
    property UseSakaEraCalendar: Boolean read get_UseSakaEraCalendar write set_UseSakaEraCalendar;
    property UseUmAlQuraCalendar: Boolean read get_UseUmAlQuraCalendar write set_UseUmAlQuraCalendar;
    property Start: DNFieldStart read get_Start;
    property Separator: DNFieldSeparator read get_Separator;
    property &End: DNFieldEnd read get_End;
    property &Type: DNFieldType read get_Type;
    property Result: string read get_Result write set_Result;
    property DisplayResult: string read get_DisplayResult;
    property IsLocked: Boolean read get_IsLocked write set_IsLocked;
    property IsDirty: Boolean read get_IsDirty write set_IsDirty;
    property Format: DNFieldFormat read get_Format;
    property LocaleId: Int32 read get_LocaleId write set_LocaleId;
  end;

  TDNFieldPrintDate = class(TDNGenericImport<DNFieldPrintDateClass, DNFieldPrintDate>) end;

  //-------------namespace: Aspose.Words.Fields----------------
  DNFieldPrivateClass = interface(DNFieldClass)
  ['{67CB702F-AAFF-565F-B8DC-0F03A7344497}']
  { constructors } 

    {class} function init: DNFieldPrivate;

  end;

  [DNTypeName('Aspose.Words.Fields.FieldPrivate')]
  DNFieldPrivate = interface(DNField)
  ['{C240F50A-820B-3993-BC5C-A936C570752B}']
  { getters & setters } 

    function get_Start: DNFieldStart;
    function get_Separator: DNFieldSeparator;
    function get_End: DNFieldEnd;
    function get_Type: DNFieldType;
    function get_Result: string;
    procedure set_Result(value: string);
    function get_DisplayResult: string;
    function get_IsLocked: Boolean;
    procedure set_IsLocked(value: Boolean);
    function get_IsDirty: Boolean;
    procedure set_IsDirty(value: Boolean);
    function get_Format: DNFieldFormat;
    function get_LocaleId: Int32;
    procedure set_LocaleId(value: Int32);

  { methods } 

    function GetFieldCode: string; overload;
    function GetFieldCode(includeChildFieldCodes: Boolean): string; overload;
    function Remove: DNNode;
    procedure Update; overload;
    procedure Update(ignoreMergeFormat: Boolean); overload;
    function Unlink: Boolean;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Start: DNFieldStart read get_Start;
    property Separator: DNFieldSeparator read get_Separator;
    property &End: DNFieldEnd read get_End;
    property &Type: DNFieldType read get_Type;
    property Result: string read get_Result write set_Result;
    property DisplayResult: string read get_DisplayResult;
    property IsLocked: Boolean read get_IsLocked write set_IsLocked;
    property IsDirty: Boolean read get_IsDirty write set_IsDirty;
    property Format: DNFieldFormat read get_Format;
    property LocaleId: Int32 read get_LocaleId write set_LocaleId;
  end;

  TDNFieldPrivate = class(TDNGenericImport<DNFieldPrivateClass, DNFieldPrivate>) end;

  //-------------namespace: Aspose.Words.Fields----------------
  DNFieldQuoteClass = interface(DNFieldClass)
  ['{2974B0D1-FCDE-55DC-A599-EC7E21F21E2C}']
  { constructors } 

    {class} function init: DNFieldQuote;

  end;

  [DNTypeName('Aspose.Words.Fields.FieldQuote')]
  DNFieldQuote = interface(DNField)
  ['{97F64C88-2F44-3555-99F1-BEA583040016}']
  { getters & setters } 

    function get_Text: string;
    procedure set_Text(value: string);
    function get_Start: DNFieldStart;
    function get_Separator: DNFieldSeparator;
    function get_End: DNFieldEnd;
    function get_Type: DNFieldType;
    function get_Result: string;
    procedure set_Result(value: string);
    function get_DisplayResult: string;
    function get_IsLocked: Boolean;
    procedure set_IsLocked(value: Boolean);
    function get_IsDirty: Boolean;
    procedure set_IsDirty(value: Boolean);
    function get_Format: DNFieldFormat;
    function get_LocaleId: Int32;
    procedure set_LocaleId(value: Int32);

  { methods } 

    function GetFieldCode: string; overload;
    function GetFieldCode(includeChildFieldCodes: Boolean): string; overload;
    function Remove: DNNode;
    procedure Update; overload;
    procedure Update(ignoreMergeFormat: Boolean); overload;
    function Unlink: Boolean;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Text: string read get_Text write set_Text;
    property Start: DNFieldStart read get_Start;
    property Separator: DNFieldSeparator read get_Separator;
    property &End: DNFieldEnd read get_End;
    property &Type: DNFieldType read get_Type;
    property Result: string read get_Result write set_Result;
    property DisplayResult: string read get_DisplayResult;
    property IsLocked: Boolean read get_IsLocked write set_IsLocked;
    property IsDirty: Boolean read get_IsDirty write set_IsDirty;
    property Format: DNFieldFormat read get_Format;
    property LocaleId: Int32 read get_LocaleId write set_LocaleId;
  end;

  TDNFieldQuote = class(TDNGenericImport<DNFieldQuoteClass, DNFieldQuote>) end;

  //-------------namespace: Aspose.Words.Fields----------------
  DNFieldRDClass = interface(DNFieldClass)
  ['{92028E29-B83C-5FE3-BA9E-819E36D85461}']
  { constructors } 

    {class} function init: DNFieldRD;

  end;

  [DNTypeName('Aspose.Words.Fields.FieldRD')]
  DNFieldRD = interface(DNField)
  ['{2103C488-5D05-347D-B6E5-31B556E4C359}']
  { getters & setters } 

    function get_FileName: string;
    procedure set_FileName(value: string);
    function get_IsPathRelative: Boolean;
    procedure set_IsPathRelative(value: Boolean);
    function get_Start: DNFieldStart;
    function get_Separator: DNFieldSeparator;
    function get_End: DNFieldEnd;
    function get_Type: DNFieldType;
    function get_Result: string;
    procedure set_Result(value: string);
    function get_DisplayResult: string;
    function get_IsLocked: Boolean;
    procedure set_IsLocked(value: Boolean);
    function get_IsDirty: Boolean;
    procedure set_IsDirty(value: Boolean);
    function get_Format: DNFieldFormat;
    function get_LocaleId: Int32;
    procedure set_LocaleId(value: Int32);

  { methods } 

    function GetFieldCode: string; overload;
    function GetFieldCode(includeChildFieldCodes: Boolean): string; overload;
    function Remove: DNNode;
    procedure Update; overload;
    procedure Update(ignoreMergeFormat: Boolean); overload;
    function Unlink: Boolean;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property FileName: string read get_FileName write set_FileName;
    property IsPathRelative: Boolean read get_IsPathRelative write set_IsPathRelative;
    property Start: DNFieldStart read get_Start;
    property Separator: DNFieldSeparator read get_Separator;
    property &End: DNFieldEnd read get_End;
    property &Type: DNFieldType read get_Type;
    property Result: string read get_Result write set_Result;
    property DisplayResult: string read get_DisplayResult;
    property IsLocked: Boolean read get_IsLocked write set_IsLocked;
    property IsDirty: Boolean read get_IsDirty write set_IsDirty;
    property Format: DNFieldFormat read get_Format;
    property LocaleId: Int32 read get_LocaleId write set_LocaleId;
  end;

  TDNFieldRD = class(TDNGenericImport<DNFieldRDClass, DNFieldRD>) end;

  //-------------namespace: Aspose.Words.Fields----------------
  DNFieldRefClass = interface(DNFieldClass)
  ['{A9519067-0F7A-5364-A9C1-8B81EDC17561}']
  { constructors } 

    {class} function init: DNFieldRef;

  end;

  [DNTypeName('Aspose.Words.Fields.FieldRef')]
  DNFieldRef = interface(DNField)
  ['{C3C94339-9BF0-30DE-8A43-595102E9AA9C}']
  { getters & setters } 

    function get_BookmarkName: string;
    procedure set_BookmarkName(value: string);
    function get_NumberSeparator: string;
    procedure set_NumberSeparator(value: string);
    function get_IncludeNoteOrComment: Boolean;
    procedure set_IncludeNoteOrComment(value: Boolean);
    function get_InsertHyperlink: Boolean;
    procedure set_InsertHyperlink(value: Boolean);
    function get_InsertParagraphNumber: Boolean;
    procedure set_InsertParagraphNumber(value: Boolean);
    function get_InsertRelativePosition: Boolean;
    procedure set_InsertRelativePosition(value: Boolean);
    function get_InsertParagraphNumberInRelativeContext: Boolean;
    procedure set_InsertParagraphNumberInRelativeContext(value: Boolean);
    function get_SuppressNonDelimiters: Boolean;
    procedure set_SuppressNonDelimiters(value: Boolean);
    function get_InsertParagraphNumberInFullContext: Boolean;
    procedure set_InsertParagraphNumberInFullContext(value: Boolean);
    function get_Start: DNFieldStart;
    function get_Separator: DNFieldSeparator;
    function get_End: DNFieldEnd;
    function get_Type: DNFieldType;
    function get_Result: string;
    procedure set_Result(value: string);
    function get_DisplayResult: string;
    function get_IsLocked: Boolean;
    procedure set_IsLocked(value: Boolean);
    function get_IsDirty: Boolean;
    procedure set_IsDirty(value: Boolean);
    function get_Format: DNFieldFormat;
    function get_LocaleId: Int32;
    procedure set_LocaleId(value: Int32);

  { methods } 

    function GetFieldCode: string; overload;
    function GetFieldCode(includeChildFieldCodes: Boolean): string; overload;
    function Remove: DNNode;
    procedure Update; overload;
    procedure Update(ignoreMergeFormat: Boolean); overload;
    function Unlink: Boolean;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property BookmarkName: string read get_BookmarkName write set_BookmarkName;
    property NumberSeparator: string read get_NumberSeparator write set_NumberSeparator;
    property IncludeNoteOrComment: Boolean read get_IncludeNoteOrComment write set_IncludeNoteOrComment;
    property InsertHyperlink: Boolean read get_InsertHyperlink write set_InsertHyperlink;
    property InsertParagraphNumber: Boolean read get_InsertParagraphNumber write set_InsertParagraphNumber;
    property InsertRelativePosition: Boolean read get_InsertRelativePosition write set_InsertRelativePosition;
    property InsertParagraphNumberInRelativeContext: Boolean read get_InsertParagraphNumberInRelativeContext write set_InsertParagraphNumberInRelativeContext;
    property SuppressNonDelimiters: Boolean read get_SuppressNonDelimiters write set_SuppressNonDelimiters;
    property InsertParagraphNumberInFullContext: Boolean read get_InsertParagraphNumberInFullContext write set_InsertParagraphNumberInFullContext;
    property Start: DNFieldStart read get_Start;
    property Separator: DNFieldSeparator read get_Separator;
    property &End: DNFieldEnd read get_End;
    property &Type: DNFieldType read get_Type;
    property Result: string read get_Result write set_Result;
    property DisplayResult: string read get_DisplayResult;
    property IsLocked: Boolean read get_IsLocked write set_IsLocked;
    property IsDirty: Boolean read get_IsDirty write set_IsDirty;
    property Format: DNFieldFormat read get_Format;
    property LocaleId: Int32 read get_LocaleId write set_LocaleId;
  end;

  TDNFieldRef = class(TDNGenericImport<DNFieldRefClass, DNFieldRef>) end;

  //-------------namespace: Aspose.Words.Fields----------------
  DNFieldRevNumClass = interface(DNFieldClass)
  ['{D61E1193-06D9-5BF3-8F43-27E418721991}']
  { constructors } 

    {class} function init: DNFieldRevNum;

  end;

  [DNTypeName('Aspose.Words.Fields.FieldRevNum')]
  DNFieldRevNum = interface(DNField)
  ['{F1C17B68-9B96-3556-AC2A-462DC1F2179F}']
  { getters & setters } 

    function get_Start: DNFieldStart;
    function get_Separator: DNFieldSeparator;
    function get_End: DNFieldEnd;
    function get_Type: DNFieldType;
    function get_Result: string;
    procedure set_Result(value: string);
    function get_DisplayResult: string;
    function get_IsLocked: Boolean;
    procedure set_IsLocked(value: Boolean);
    function get_IsDirty: Boolean;
    procedure set_IsDirty(value: Boolean);
    function get_Format: DNFieldFormat;
    function get_LocaleId: Int32;
    procedure set_LocaleId(value: Int32);

  { methods } 

    function GetFieldCode: string; overload;
    function GetFieldCode(includeChildFieldCodes: Boolean): string; overload;
    function Remove: DNNode;
    procedure Update; overload;
    procedure Update(ignoreMergeFormat: Boolean); overload;
    function Unlink: Boolean;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Start: DNFieldStart read get_Start;
    property Separator: DNFieldSeparator read get_Separator;
    property &End: DNFieldEnd read get_End;
    property &Type: DNFieldType read get_Type;
    property Result: string read get_Result write set_Result;
    property DisplayResult: string read get_DisplayResult;
    property IsLocked: Boolean read get_IsLocked write set_IsLocked;
    property IsDirty: Boolean read get_IsDirty write set_IsDirty;
    property Format: DNFieldFormat read get_Format;
    property LocaleId: Int32 read get_LocaleId write set_LocaleId;
  end;

  TDNFieldRevNum = class(TDNGenericImport<DNFieldRevNumClass, DNFieldRevNum>) end;

  //-------------namespace: Aspose.Words.Fields----------------
  DNFieldSaveDateClass = interface(DNFieldClass)
  ['{32E8A2CB-D0CA-5FA6-92D4-82D898753AD5}']
  { constructors } 

    {class} function init: DNFieldSaveDate;

  end;

  [DNTypeName('Aspose.Words.Fields.FieldSaveDate')]
  DNFieldSaveDate = interface(DNField)
  ['{41103CE9-5BF9-3ABE-A191-334A05AB96AA}']
  { getters & setters } 

    function get_UseLunarCalendar: Boolean;
    procedure set_UseLunarCalendar(value: Boolean);
    function get_UseSakaEraCalendar: Boolean;
    procedure set_UseSakaEraCalendar(value: Boolean);
    function get_UseUmAlQuraCalendar: Boolean;
    procedure set_UseUmAlQuraCalendar(value: Boolean);
    function get_Start: DNFieldStart;
    function get_Separator: DNFieldSeparator;
    function get_End: DNFieldEnd;
    function get_Type: DNFieldType;
    function get_Result: string;
    procedure set_Result(value: string);
    function get_DisplayResult: string;
    function get_IsLocked: Boolean;
    procedure set_IsLocked(value: Boolean);
    function get_IsDirty: Boolean;
    procedure set_IsDirty(value: Boolean);
    function get_Format: DNFieldFormat;
    function get_LocaleId: Int32;
    procedure set_LocaleId(value: Int32);

  { methods } 

    function GetFieldCode: string; overload;
    function GetFieldCode(includeChildFieldCodes: Boolean): string; overload;
    function Remove: DNNode;
    procedure Update; overload;
    procedure Update(ignoreMergeFormat: Boolean); overload;
    function Unlink: Boolean;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property UseLunarCalendar: Boolean read get_UseLunarCalendar write set_UseLunarCalendar;
    property UseSakaEraCalendar: Boolean read get_UseSakaEraCalendar write set_UseSakaEraCalendar;
    property UseUmAlQuraCalendar: Boolean read get_UseUmAlQuraCalendar write set_UseUmAlQuraCalendar;
    property Start: DNFieldStart read get_Start;
    property Separator: DNFieldSeparator read get_Separator;
    property &End: DNFieldEnd read get_End;
    property &Type: DNFieldType read get_Type;
    property Result: string read get_Result write set_Result;
    property DisplayResult: string read get_DisplayResult;
    property IsLocked: Boolean read get_IsLocked write set_IsLocked;
    property IsDirty: Boolean read get_IsDirty write set_IsDirty;
    property Format: DNFieldFormat read get_Format;
    property LocaleId: Int32 read get_LocaleId write set_LocaleId;
  end;

  TDNFieldSaveDate = class(TDNGenericImport<DNFieldSaveDateClass, DNFieldSaveDate>) end;

  //-------------namespace: Aspose.Words.Fields----------------
  DNFieldSectionClass = interface(DNFieldClass)
  ['{403CC26D-B027-5EF5-AE20-A1D140C36BD4}']
  { constructors } 

    {class} function init: DNFieldSection;

  end;

  [DNTypeName('Aspose.Words.Fields.FieldSection')]
  DNFieldSection = interface(DNField)
  ['{1482150A-F9F1-3510-825C-B1B539A9DBED}']
  { getters & setters } 

    function get_Start: DNFieldStart;
    function get_Separator: DNFieldSeparator;
    function get_End: DNFieldEnd;
    function get_Type: DNFieldType;
    function get_Result: string;
    procedure set_Result(value: string);
    function get_DisplayResult: string;
    function get_IsLocked: Boolean;
    procedure set_IsLocked(value: Boolean);
    function get_IsDirty: Boolean;
    procedure set_IsDirty(value: Boolean);
    function get_Format: DNFieldFormat;
    function get_LocaleId: Int32;
    procedure set_LocaleId(value: Int32);

  { methods } 

    function GetFieldCode: string; overload;
    function GetFieldCode(includeChildFieldCodes: Boolean): string; overload;
    function Remove: DNNode;
    procedure Update; overload;
    procedure Update(ignoreMergeFormat: Boolean); overload;
    function Unlink: Boolean;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Start: DNFieldStart read get_Start;
    property Separator: DNFieldSeparator read get_Separator;
    property &End: DNFieldEnd read get_End;
    property &Type: DNFieldType read get_Type;
    property Result: string read get_Result write set_Result;
    property DisplayResult: string read get_DisplayResult;
    property IsLocked: Boolean read get_IsLocked write set_IsLocked;
    property IsDirty: Boolean read get_IsDirty write set_IsDirty;
    property Format: DNFieldFormat read get_Format;
    property LocaleId: Int32 read get_LocaleId write set_LocaleId;
  end;

  TDNFieldSection = class(TDNGenericImport<DNFieldSectionClass, DNFieldSection>) end;

  //-------------namespace: Aspose.Words.Fields----------------
  DNFieldSectionPagesClass = interface(DNFieldClass)
  ['{06DC23A3-945C-568D-A4B6-A8BF83191723}']
  { constructors } 

    {class} function init: DNFieldSectionPages;

  end;

  [DNTypeName('Aspose.Words.Fields.FieldSectionPages')]
  DNFieldSectionPages = interface(DNField)
  ['{53D54231-A5DD-3BB8-947B-7A3BB6BE1877}']
  { getters & setters } 

    function get_Start: DNFieldStart;
    function get_Separator: DNFieldSeparator;
    function get_End: DNFieldEnd;
    function get_Type: DNFieldType;
    function get_Result: string;
    procedure set_Result(value: string);
    function get_DisplayResult: string;
    function get_IsLocked: Boolean;
    procedure set_IsLocked(value: Boolean);
    function get_IsDirty: Boolean;
    procedure set_IsDirty(value: Boolean);
    function get_Format: DNFieldFormat;
    function get_LocaleId: Int32;
    procedure set_LocaleId(value: Int32);

  { methods } 

    function GetFieldCode: string; overload;
    function GetFieldCode(includeChildFieldCodes: Boolean): string; overload;
    function Remove: DNNode;
    procedure Update; overload;
    procedure Update(ignoreMergeFormat: Boolean); overload;
    function Unlink: Boolean;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Start: DNFieldStart read get_Start;
    property Separator: DNFieldSeparator read get_Separator;
    property &End: DNFieldEnd read get_End;
    property &Type: DNFieldType read get_Type;
    property Result: string read get_Result write set_Result;
    property DisplayResult: string read get_DisplayResult;
    property IsLocked: Boolean read get_IsLocked write set_IsLocked;
    property IsDirty: Boolean read get_IsDirty write set_IsDirty;
    property Format: DNFieldFormat read get_Format;
    property LocaleId: Int32 read get_LocaleId write set_LocaleId;
  end;

  TDNFieldSectionPages = class(TDNGenericImport<DNFieldSectionPagesClass, DNFieldSectionPages>) end;

  //-------------namespace: Aspose.Words.Fields----------------
  DNFieldSeqClass = interface(DNFieldClass)
  ['{559B357C-8E0F-53CE-A880-279762F9AE6C}']
  { constructors } 

    {class} function init: DNFieldSeq;

  end;

  [DNTypeName('Aspose.Words.Fields.FieldSeq')]
  DNFieldSeq = interface(DNField)
  ['{1A65B34B-C5F4-3D18-AB89-817F1B20D1A7}']
  { getters & setters } 

    function get_SequenceIdentifier: string;
    procedure set_SequenceIdentifier(value: string);
    function get_BookmarkName: string;
    procedure set_BookmarkName(value: string);
    function get_InsertNextNumber: Boolean;
    procedure set_InsertNextNumber(value: Boolean);
    function get_ResetNumber: string;
    procedure set_ResetNumber(value: string);
    function get_ResetHeadingLevel: string;
    procedure set_ResetHeadingLevel(value: string);
    function get_Start: DNFieldStart;
    function get_Separator: DNFieldSeparator;
    function get_End: DNFieldEnd;
    function get_Type: DNFieldType;
    function get_Result: string;
    procedure set_Result(value: string);
    function get_DisplayResult: string;
    function get_IsLocked: Boolean;
    procedure set_IsLocked(value: Boolean);
    function get_IsDirty: Boolean;
    procedure set_IsDirty(value: Boolean);
    function get_Format: DNFieldFormat;
    function get_LocaleId: Int32;
    procedure set_LocaleId(value: Int32);

  { methods } 

    function GetFieldCode: string; overload;
    function GetFieldCode(includeChildFieldCodes: Boolean): string; overload;
    function Remove: DNNode;
    procedure Update; overload;
    procedure Update(ignoreMergeFormat: Boolean); overload;
    function Unlink: Boolean;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property SequenceIdentifier: string read get_SequenceIdentifier write set_SequenceIdentifier;
    property BookmarkName: string read get_BookmarkName write set_BookmarkName;
    property InsertNextNumber: Boolean read get_InsertNextNumber write set_InsertNextNumber;
    property ResetNumber: string read get_ResetNumber write set_ResetNumber;
    property ResetHeadingLevel: string read get_ResetHeadingLevel write set_ResetHeadingLevel;
    property Start: DNFieldStart read get_Start;
    property Separator: DNFieldSeparator read get_Separator;
    property &End: DNFieldEnd read get_End;
    property &Type: DNFieldType read get_Type;
    property Result: string read get_Result write set_Result;
    property DisplayResult: string read get_DisplayResult;
    property IsLocked: Boolean read get_IsLocked write set_IsLocked;
    property IsDirty: Boolean read get_IsDirty write set_IsDirty;
    property Format: DNFieldFormat read get_Format;
    property LocaleId: Int32 read get_LocaleId write set_LocaleId;
  end;

  TDNFieldSeq = class(TDNGenericImport<DNFieldSeqClass, DNFieldSeq>) end;

  //-------------namespace: Aspose.Words.Fields----------------
  DNFieldSetClass = interface(DNFieldClass)
  ['{D0E661E0-8E2E-5ACA-879D-1F106C1C13B8}']
  { constructors } 

    {class} function init: DNFieldSet;

  end;

  [DNTypeName('Aspose.Words.Fields.FieldSet')]
  DNFieldSet = interface(DNField)
  ['{4EF0214C-33CB-3931-BA34-3ACF9C820AE3}']
  { getters & setters } 

    function get_BookmarkName: string;
    procedure set_BookmarkName(value: string);
    function get_BookmarkText: string;
    procedure set_BookmarkText(value: string);
    function get_Start: DNFieldStart;
    function get_Separator: DNFieldSeparator;
    function get_End: DNFieldEnd;
    function get_Type: DNFieldType;
    function get_Result: string;
    procedure set_Result(value: string);
    function get_DisplayResult: string;
    function get_IsLocked: Boolean;
    procedure set_IsLocked(value: Boolean);
    function get_IsDirty: Boolean;
    procedure set_IsDirty(value: Boolean);
    function get_Format: DNFieldFormat;
    function get_LocaleId: Int32;
    procedure set_LocaleId(value: Int32);

  { methods } 

    function GetFieldCode: string; overload;
    function GetFieldCode(includeChildFieldCodes: Boolean): string; overload;
    function Remove: DNNode;
    procedure Update; overload;
    procedure Update(ignoreMergeFormat: Boolean); overload;
    function Unlink: Boolean;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property BookmarkName: string read get_BookmarkName write set_BookmarkName;
    property BookmarkText: string read get_BookmarkText write set_BookmarkText;
    property Start: DNFieldStart read get_Start;
    property Separator: DNFieldSeparator read get_Separator;
    property &End: DNFieldEnd read get_End;
    property &Type: DNFieldType read get_Type;
    property Result: string read get_Result write set_Result;
    property DisplayResult: string read get_DisplayResult;
    property IsLocked: Boolean read get_IsLocked write set_IsLocked;
    property IsDirty: Boolean read get_IsDirty write set_IsDirty;
    property Format: DNFieldFormat read get_Format;
    property LocaleId: Int32 read get_LocaleId write set_LocaleId;
  end;

  TDNFieldSet = class(TDNGenericImport<DNFieldSetClass, DNFieldSet>) end;

  //-------------namespace: Aspose.Words.Fields----------------
  DNFieldShapeClass = interface(DNFieldClass)
  ['{B249D230-50D3-5C64-A667-CCD81165A2A8}']
  { constructors } 

    {class} function init: DNFieldShape;

  end;

  [DNTypeName('Aspose.Words.Fields.FieldShape')]
  DNFieldShape = interface(DNField)
  ['{BBB5F8DB-1845-37C5-AD52-89784173BA21}']
  { getters & setters } 

    function get_Text: string;
    procedure set_Text(value: string);
    function get_Start: DNFieldStart;
    function get_Separator: DNFieldSeparator;
    function get_End: DNFieldEnd;
    function get_Type: DNFieldType;
    function get_Result: string;
    procedure set_Result(value: string);
    function get_DisplayResult: string;
    function get_IsLocked: Boolean;
    procedure set_IsLocked(value: Boolean);
    function get_IsDirty: Boolean;
    procedure set_IsDirty(value: Boolean);
    function get_Format: DNFieldFormat;
    function get_LocaleId: Int32;
    procedure set_LocaleId(value: Int32);

  { methods } 

    function GetFieldCode: string; overload;
    function GetFieldCode(includeChildFieldCodes: Boolean): string; overload;
    function Remove: DNNode;
    procedure Update; overload;
    procedure Update(ignoreMergeFormat: Boolean); overload;
    function Unlink: Boolean;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Text: string read get_Text write set_Text;
    property Start: DNFieldStart read get_Start;
    property Separator: DNFieldSeparator read get_Separator;
    property &End: DNFieldEnd read get_End;
    property &Type: DNFieldType read get_Type;
    property Result: string read get_Result write set_Result;
    property DisplayResult: string read get_DisplayResult;
    property IsLocked: Boolean read get_IsLocked write set_IsLocked;
    property IsDirty: Boolean read get_IsDirty write set_IsDirty;
    property Format: DNFieldFormat read get_Format;
    property LocaleId: Int32 read get_LocaleId write set_LocaleId;
  end;

  TDNFieldShape = class(TDNGenericImport<DNFieldShapeClass, DNFieldShape>) end;

  //-------------namespace: Aspose.Words.Fields----------------
  DNFieldSkipIfClass = interface(DNFieldClass)
  ['{BE34E73C-A3A2-5065-A2AD-1AFFFA5EE879}']
  { constructors } 

    {class} function init: DNFieldSkipIf;

  end;

  [DNTypeName('Aspose.Words.Fields.FieldSkipIf')]
  DNFieldSkipIf = interface(DNField)
  ['{820FDF2B-463D-3ABE-9E59-EF38D121594F}']
  { getters & setters } 

    function get_LeftExpression: string;
    procedure set_LeftExpression(value: string);
    function get_ComparisonOperator: string;
    procedure set_ComparisonOperator(value: string);
    function get_RightExpression: string;
    procedure set_RightExpression(value: string);
    function get_Start: DNFieldStart;
    function get_Separator: DNFieldSeparator;
    function get_End: DNFieldEnd;
    function get_Type: DNFieldType;
    function get_Result: string;
    procedure set_Result(value: string);
    function get_DisplayResult: string;
    function get_IsLocked: Boolean;
    procedure set_IsLocked(value: Boolean);
    function get_IsDirty: Boolean;
    procedure set_IsDirty(value: Boolean);
    function get_Format: DNFieldFormat;
    function get_LocaleId: Int32;
    procedure set_LocaleId(value: Int32);

  { methods } 

    function GetFieldCode: string; overload;
    function GetFieldCode(includeChildFieldCodes: Boolean): string; overload;
    function Remove: DNNode;
    procedure Update; overload;
    procedure Update(ignoreMergeFormat: Boolean); overload;
    function Unlink: Boolean;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property LeftExpression: string read get_LeftExpression write set_LeftExpression;
    property ComparisonOperator: string read get_ComparisonOperator write set_ComparisonOperator;
    property RightExpression: string read get_RightExpression write set_RightExpression;
    property Start: DNFieldStart read get_Start;
    property Separator: DNFieldSeparator read get_Separator;
    property &End: DNFieldEnd read get_End;
    property &Type: DNFieldType read get_Type;
    property Result: string read get_Result write set_Result;
    property DisplayResult: string read get_DisplayResult;
    property IsLocked: Boolean read get_IsLocked write set_IsLocked;
    property IsDirty: Boolean read get_IsDirty write set_IsDirty;
    property Format: DNFieldFormat read get_Format;
    property LocaleId: Int32 read get_LocaleId write set_LocaleId;
  end;

  TDNFieldSkipIf = class(TDNGenericImport<DNFieldSkipIfClass, DNFieldSkipIf>) end;

  //-------------namespace: Aspose.Words.Fields----------------
  DNFieldStyleRefClass = interface(DNFieldClass)
  ['{08DAC79A-3467-5510-A44B-C662E8020BC9}']
  { constructors } 

    {class} function init: DNFieldStyleRef;

  end;

  [DNTypeName('Aspose.Words.Fields.FieldStyleRef')]
  DNFieldStyleRef = interface(DNField)
  ['{EBD37490-C97C-32A4-8B40-539967000E1A}']
  { getters & setters } 

    function get_StyleName: string;
    procedure set_StyleName(value: string);
    function get_SearchFromBottom: Boolean;
    procedure set_SearchFromBottom(value: Boolean);
    function get_InsertParagraphNumber: Boolean;
    procedure set_InsertParagraphNumber(value: Boolean);
    function get_InsertRelativePosition: Boolean;
    procedure set_InsertRelativePosition(value: Boolean);
    function get_InsertParagraphNumberInRelativeContext: Boolean;
    procedure set_InsertParagraphNumberInRelativeContext(value: Boolean);
    function get_SuppressNonDelimiters: Boolean;
    procedure set_SuppressNonDelimiters(value: Boolean);
    function get_InsertParagraphNumberInFullContext: Boolean;
    procedure set_InsertParagraphNumberInFullContext(value: Boolean);
    function get_Start: DNFieldStart;
    function get_Separator: DNFieldSeparator;
    function get_End: DNFieldEnd;
    function get_Type: DNFieldType;
    function get_Result: string;
    procedure set_Result(value: string);
    function get_DisplayResult: string;
    function get_IsLocked: Boolean;
    procedure set_IsLocked(value: Boolean);
    function get_IsDirty: Boolean;
    procedure set_IsDirty(value: Boolean);
    function get_Format: DNFieldFormat;
    function get_LocaleId: Int32;
    procedure set_LocaleId(value: Int32);

  { methods } 

    function GetFieldCode: string; overload;
    function GetFieldCode(includeChildFieldCodes: Boolean): string; overload;
    function Remove: DNNode;
    procedure Update; overload;
    procedure Update(ignoreMergeFormat: Boolean); overload;
    function Unlink: Boolean;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property StyleName: string read get_StyleName write set_StyleName;
    property SearchFromBottom: Boolean read get_SearchFromBottom write set_SearchFromBottom;
    property InsertParagraphNumber: Boolean read get_InsertParagraphNumber write set_InsertParagraphNumber;
    property InsertRelativePosition: Boolean read get_InsertRelativePosition write set_InsertRelativePosition;
    property InsertParagraphNumberInRelativeContext: Boolean read get_InsertParagraphNumberInRelativeContext write set_InsertParagraphNumberInRelativeContext;
    property SuppressNonDelimiters: Boolean read get_SuppressNonDelimiters write set_SuppressNonDelimiters;
    property InsertParagraphNumberInFullContext: Boolean read get_InsertParagraphNumberInFullContext write set_InsertParagraphNumberInFullContext;
    property Start: DNFieldStart read get_Start;
    property Separator: DNFieldSeparator read get_Separator;
    property &End: DNFieldEnd read get_End;
    property &Type: DNFieldType read get_Type;
    property Result: string read get_Result write set_Result;
    property DisplayResult: string read get_DisplayResult;
    property IsLocked: Boolean read get_IsLocked write set_IsLocked;
    property IsDirty: Boolean read get_IsDirty write set_IsDirty;
    property Format: DNFieldFormat read get_Format;
    property LocaleId: Int32 read get_LocaleId write set_LocaleId;
  end;

  TDNFieldStyleRef = class(TDNGenericImport<DNFieldStyleRefClass, DNFieldStyleRef>) end;

  //-------------namespace: Aspose.Words.Fields----------------
  DNFieldSubjectClass = interface(DNFieldClass)
  ['{1B9E110F-6B5E-507D-929F-04090ABCCCEC}']
  { constructors } 

    {class} function init: DNFieldSubject;

  end;

  [DNTypeName('Aspose.Words.Fields.FieldSubject')]
  DNFieldSubject = interface(DNField)
  ['{124654C4-4947-383C-B108-7E238C2CE54C}']
  { getters & setters } 

    function get_Text: string;
    procedure set_Text(value: string);
    function get_Start: DNFieldStart;
    function get_Separator: DNFieldSeparator;
    function get_End: DNFieldEnd;
    function get_Type: DNFieldType;
    function get_Result: string;
    procedure set_Result(value: string);
    function get_DisplayResult: string;
    function get_IsLocked: Boolean;
    procedure set_IsLocked(value: Boolean);
    function get_IsDirty: Boolean;
    procedure set_IsDirty(value: Boolean);
    function get_Format: DNFieldFormat;
    function get_LocaleId: Int32;
    procedure set_LocaleId(value: Int32);

  { methods } 

    function GetFieldCode: string; overload;
    function GetFieldCode(includeChildFieldCodes: Boolean): string; overload;
    function Remove: DNNode;
    procedure Update; overload;
    procedure Update(ignoreMergeFormat: Boolean); overload;
    function Unlink: Boolean;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Text: string read get_Text write set_Text;
    property Start: DNFieldStart read get_Start;
    property Separator: DNFieldSeparator read get_Separator;
    property &End: DNFieldEnd read get_End;
    property &Type: DNFieldType read get_Type;
    property Result: string read get_Result write set_Result;
    property DisplayResult: string read get_DisplayResult;
    property IsLocked: Boolean read get_IsLocked write set_IsLocked;
    property IsDirty: Boolean read get_IsDirty write set_IsDirty;
    property Format: DNFieldFormat read get_Format;
    property LocaleId: Int32 read get_LocaleId write set_LocaleId;
  end;

  TDNFieldSubject = class(TDNGenericImport<DNFieldSubjectClass, DNFieldSubject>) end;

  //-------------namespace: Aspose.Words.Fields----------------
  DNFieldSymbolClass = interface(DNFieldClass)
  ['{955A94DD-6C3D-5C52-BFAE-E6970AA71FA8}']
  { constructors } 

    {class} function init: DNFieldSymbol;

  end;

  [DNTypeName('Aspose.Words.Fields.FieldSymbol')]
  DNFieldSymbol = interface(DNField)
  ['{915EB00D-1855-3DCF-B2BE-EA3B8FE1FDCE}']
  { getters & setters } 

    function get_CharacterCode: string;
    procedure set_CharacterCode(value: string);
    function get_FontName: string;
    procedure set_FontName(value: string);
    function get_FontSize: string;
    procedure set_FontSize(value: string);
    function get_IsAnsi: Boolean;
    procedure set_IsAnsi(value: Boolean);
    function get_IsUnicode: Boolean;
    procedure set_IsUnicode(value: Boolean);
    function get_IsShiftJis: Boolean;
    procedure set_IsShiftJis(value: Boolean);
    function get_DontAffectsLineSpacing: Boolean;
    procedure set_DontAffectsLineSpacing(value: Boolean);
    function get_Start: DNFieldStart;
    function get_Separator: DNFieldSeparator;
    function get_End: DNFieldEnd;
    function get_Type: DNFieldType;
    function get_Result: string;
    procedure set_Result(value: string);
    function get_DisplayResult: string;
    function get_IsLocked: Boolean;
    procedure set_IsLocked(value: Boolean);
    function get_IsDirty: Boolean;
    procedure set_IsDirty(value: Boolean);
    function get_Format: DNFieldFormat;
    function get_LocaleId: Int32;
    procedure set_LocaleId(value: Int32);

  { methods } 

    function GetFieldCode: string; overload;
    function GetFieldCode(includeChildFieldCodes: Boolean): string; overload;
    function Remove: DNNode;
    procedure Update; overload;
    procedure Update(ignoreMergeFormat: Boolean); overload;
    function Unlink: Boolean;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property CharacterCode: string read get_CharacterCode write set_CharacterCode;
    property FontName: string read get_FontName write set_FontName;
    property FontSize: string read get_FontSize write set_FontSize;
    property IsAnsi: Boolean read get_IsAnsi write set_IsAnsi;
    property IsUnicode: Boolean read get_IsUnicode write set_IsUnicode;
    property IsShiftJis: Boolean read get_IsShiftJis write set_IsShiftJis;
    property DontAffectsLineSpacing: Boolean read get_DontAffectsLineSpacing write set_DontAffectsLineSpacing;
    property Start: DNFieldStart read get_Start;
    property Separator: DNFieldSeparator read get_Separator;
    property &End: DNFieldEnd read get_End;
    property &Type: DNFieldType read get_Type;
    property Result: string read get_Result write set_Result;
    property DisplayResult: string read get_DisplayResult;
    property IsLocked: Boolean read get_IsLocked write set_IsLocked;
    property IsDirty: Boolean read get_IsDirty write set_IsDirty;
    property Format: DNFieldFormat read get_Format;
    property LocaleId: Int32 read get_LocaleId write set_LocaleId;
  end;

  TDNFieldSymbol = class(TDNGenericImport<DNFieldSymbolClass, DNFieldSymbol>) end;

  //-------------namespace: Aspose.Words.Fields----------------
  DNFieldTAClass = interface(DNFieldClass)
  ['{62AC5758-1000-5C6F-847F-E1FFF193AB73}']
  { constructors } 

    {class} function init: DNFieldTA;

  end;

  [DNTypeName('Aspose.Words.Fields.FieldTA')]
  DNFieldTA = interface(DNField)
  ['{5AB0E289-CFB6-37B1-A353-BE4EC18B9D7C}']
  { getters & setters } 

    function get_IsBold: Boolean;
    procedure set_IsBold(value: Boolean);
    function get_EntryCategory: string;
    procedure set_EntryCategory(value: string);
    function get_IsItalic: Boolean;
    procedure set_IsItalic(value: Boolean);
    function get_LongCitation: string;
    procedure set_LongCitation(value: string);
    function get_PageRangeBookmarkName: string;
    procedure set_PageRangeBookmarkName(value: string);
    function get_ShortCitation: string;
    procedure set_ShortCitation(value: string);
    function get_Start: DNFieldStart;
    function get_Separator: DNFieldSeparator;
    function get_End: DNFieldEnd;
    function get_Type: DNFieldType;
    function get_Result: string;
    procedure set_Result(value: string);
    function get_DisplayResult: string;
    function get_IsLocked: Boolean;
    procedure set_IsLocked(value: Boolean);
    function get_IsDirty: Boolean;
    procedure set_IsDirty(value: Boolean);
    function get_Format: DNFieldFormat;
    function get_LocaleId: Int32;
    procedure set_LocaleId(value: Int32);

  { methods } 

    function GetFieldCode: string; overload;
    function GetFieldCode(includeChildFieldCodes: Boolean): string; overload;
    function Remove: DNNode;
    procedure Update; overload;
    procedure Update(ignoreMergeFormat: Boolean); overload;
    function Unlink: Boolean;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property IsBold: Boolean read get_IsBold write set_IsBold;
    property EntryCategory: string read get_EntryCategory write set_EntryCategory;
    property IsItalic: Boolean read get_IsItalic write set_IsItalic;
    property LongCitation: string read get_LongCitation write set_LongCitation;
    property PageRangeBookmarkName: string read get_PageRangeBookmarkName write set_PageRangeBookmarkName;
    property ShortCitation: string read get_ShortCitation write set_ShortCitation;
    property Start: DNFieldStart read get_Start;
    property Separator: DNFieldSeparator read get_Separator;
    property &End: DNFieldEnd read get_End;
    property &Type: DNFieldType read get_Type;
    property Result: string read get_Result write set_Result;
    property DisplayResult: string read get_DisplayResult;
    property IsLocked: Boolean read get_IsLocked write set_IsLocked;
    property IsDirty: Boolean read get_IsDirty write set_IsDirty;
    property Format: DNFieldFormat read get_Format;
    property LocaleId: Int32 read get_LocaleId write set_LocaleId;
  end;

  TDNFieldTA = class(TDNGenericImport<DNFieldTAClass, DNFieldTA>) end;

  //-------------namespace: Aspose.Words.Fields----------------
  DNFieldTCClass = interface(DNFieldClass)
  ['{F776998A-FBFD-56EF-A9E0-0057204C0C44}']
  { constructors } 

    {class} function init: DNFieldTC;

  end;

  [DNTypeName('Aspose.Words.Fields.FieldTC')]
  DNFieldTC = interface(DNField)
  ['{84CF866A-2357-386B-9355-D5AD99143128}']
  { getters & setters } 

    function get_Text: string;
    procedure set_Text(value: string);
    function get_TypeIdentifier: string;
    procedure set_TypeIdentifier(value: string);
    function get_EntryLevel: string;
    procedure set_EntryLevel(value: string);
    function get_OmitPageNumber: Boolean;
    procedure set_OmitPageNumber(value: Boolean);
    function get_Start: DNFieldStart;
    function get_Separator: DNFieldSeparator;
    function get_End: DNFieldEnd;
    function get_Type: DNFieldType;
    function get_Result: string;
    procedure set_Result(value: string);
    function get_DisplayResult: string;
    function get_IsLocked: Boolean;
    procedure set_IsLocked(value: Boolean);
    function get_IsDirty: Boolean;
    procedure set_IsDirty(value: Boolean);
    function get_Format: DNFieldFormat;
    function get_LocaleId: Int32;
    procedure set_LocaleId(value: Int32);

  { methods } 

    function GetFieldCode: string; overload;
    function GetFieldCode(includeChildFieldCodes: Boolean): string; overload;
    function Remove: DNNode;
    procedure Update; overload;
    procedure Update(ignoreMergeFormat: Boolean); overload;
    function Unlink: Boolean;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Text: string read get_Text write set_Text;
    property TypeIdentifier: string read get_TypeIdentifier write set_TypeIdentifier;
    property EntryLevel: string read get_EntryLevel write set_EntryLevel;
    property OmitPageNumber: Boolean read get_OmitPageNumber write set_OmitPageNumber;
    property Start: DNFieldStart read get_Start;
    property Separator: DNFieldSeparator read get_Separator;
    property &End: DNFieldEnd read get_End;
    property &Type: DNFieldType read get_Type;
    property Result: string read get_Result write set_Result;
    property DisplayResult: string read get_DisplayResult;
    property IsLocked: Boolean read get_IsLocked write set_IsLocked;
    property IsDirty: Boolean read get_IsDirty write set_IsDirty;
    property Format: DNFieldFormat read get_Format;
    property LocaleId: Int32 read get_LocaleId write set_LocaleId;
  end;

  TDNFieldTC = class(TDNGenericImport<DNFieldTCClass, DNFieldTC>) end;

  //-------------namespace: Aspose.Words.Fields----------------
  DNFieldTemplateClass = interface(DNFieldClass)
  ['{8F72B61C-F4D1-51CF-8900-DFFF1EA0E6A7}']
  { constructors } 

    {class} function init: DNFieldTemplate;

  end;

  [DNTypeName('Aspose.Words.Fields.FieldTemplate')]
  DNFieldTemplate = interface(DNField)
  ['{673CA90A-E23A-3ED3-A6DE-29783ECE16FD}']
  { getters & setters } 

    function get_IncludeFullPath: Boolean;
    procedure set_IncludeFullPath(value: Boolean);
    function get_Start: DNFieldStart;
    function get_Separator: DNFieldSeparator;
    function get_End: DNFieldEnd;
    function get_Type: DNFieldType;
    function get_Result: string;
    procedure set_Result(value: string);
    function get_DisplayResult: string;
    function get_IsLocked: Boolean;
    procedure set_IsLocked(value: Boolean);
    function get_IsDirty: Boolean;
    procedure set_IsDirty(value: Boolean);
    function get_Format: DNFieldFormat;
    function get_LocaleId: Int32;
    procedure set_LocaleId(value: Int32);

  { methods } 

    function GetFieldCode: string; overload;
    function GetFieldCode(includeChildFieldCodes: Boolean): string; overload;
    function Remove: DNNode;
    procedure Update; overload;
    procedure Update(ignoreMergeFormat: Boolean); overload;
    function Unlink: Boolean;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property IncludeFullPath: Boolean read get_IncludeFullPath write set_IncludeFullPath;
    property Start: DNFieldStart read get_Start;
    property Separator: DNFieldSeparator read get_Separator;
    property &End: DNFieldEnd read get_End;
    property &Type: DNFieldType read get_Type;
    property Result: string read get_Result write set_Result;
    property DisplayResult: string read get_DisplayResult;
    property IsLocked: Boolean read get_IsLocked write set_IsLocked;
    property IsDirty: Boolean read get_IsDirty write set_IsDirty;
    property Format: DNFieldFormat read get_Format;
    property LocaleId: Int32 read get_LocaleId write set_LocaleId;
  end;

  TDNFieldTemplate = class(TDNGenericImport<DNFieldTemplateClass, DNFieldTemplate>) end;

  //-------------namespace: Aspose.Words.Fields----------------
  DNFieldTimeClass = interface(DNFieldClass)
  ['{4AB512A7-F442-5208-851B-49C14F0FEC85}']
  { constructors } 

    {class} function init: DNFieldTime;

  end;

  [DNTypeName('Aspose.Words.Fields.FieldTime')]
  DNFieldTime = interface(DNField)
  ['{0C071C20-F292-3F86-8D2F-95494213A8A6}']
  { getters & setters } 

    function get_Start: DNFieldStart;
    function get_Separator: DNFieldSeparator;
    function get_End: DNFieldEnd;
    function get_Type: DNFieldType;
    function get_Result: string;
    procedure set_Result(value: string);
    function get_DisplayResult: string;
    function get_IsLocked: Boolean;
    procedure set_IsLocked(value: Boolean);
    function get_IsDirty: Boolean;
    procedure set_IsDirty(value: Boolean);
    function get_Format: DNFieldFormat;
    function get_LocaleId: Int32;
    procedure set_LocaleId(value: Int32);

  { methods } 

    function GetFieldCode: string; overload;
    function GetFieldCode(includeChildFieldCodes: Boolean): string; overload;
    function Remove: DNNode;
    procedure Update; overload;
    procedure Update(ignoreMergeFormat: Boolean); overload;
    function Unlink: Boolean;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Start: DNFieldStart read get_Start;
    property Separator: DNFieldSeparator read get_Separator;
    property &End: DNFieldEnd read get_End;
    property &Type: DNFieldType read get_Type;
    property Result: string read get_Result write set_Result;
    property DisplayResult: string read get_DisplayResult;
    property IsLocked: Boolean read get_IsLocked write set_IsLocked;
    property IsDirty: Boolean read get_IsDirty write set_IsDirty;
    property Format: DNFieldFormat read get_Format;
    property LocaleId: Int32 read get_LocaleId write set_LocaleId;
  end;

  TDNFieldTime = class(TDNGenericImport<DNFieldTimeClass, DNFieldTime>) end;

  //-------------namespace: Aspose.Words.Fields----------------
  DNFieldTitleClass = interface(DNFieldClass)
  ['{955E1D5C-F010-5CD6-AFF4-2CA06FC9AAD6}']
  { constructors } 

    {class} function init: DNFieldTitle;

  end;

  [DNTypeName('Aspose.Words.Fields.FieldTitle')]
  DNFieldTitle = interface(DNField)
  ['{4332E7B6-8546-3C37-AE4E-AEE4E696660F}']
  { getters & setters } 

    function get_Text: string;
    procedure set_Text(value: string);
    function get_Start: DNFieldStart;
    function get_Separator: DNFieldSeparator;
    function get_End: DNFieldEnd;
    function get_Type: DNFieldType;
    function get_Result: string;
    procedure set_Result(value: string);
    function get_DisplayResult: string;
    function get_IsLocked: Boolean;
    procedure set_IsLocked(value: Boolean);
    function get_IsDirty: Boolean;
    procedure set_IsDirty(value: Boolean);
    function get_Format: DNFieldFormat;
    function get_LocaleId: Int32;
    procedure set_LocaleId(value: Int32);

  { methods } 

    function GetFieldCode: string; overload;
    function GetFieldCode(includeChildFieldCodes: Boolean): string; overload;
    function Remove: DNNode;
    procedure Update; overload;
    procedure Update(ignoreMergeFormat: Boolean); overload;
    function Unlink: Boolean;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Text: string read get_Text write set_Text;
    property Start: DNFieldStart read get_Start;
    property Separator: DNFieldSeparator read get_Separator;
    property &End: DNFieldEnd read get_End;
    property &Type: DNFieldType read get_Type;
    property Result: string read get_Result write set_Result;
    property DisplayResult: string read get_DisplayResult;
    property IsLocked: Boolean read get_IsLocked write set_IsLocked;
    property IsDirty: Boolean read get_IsDirty write set_IsDirty;
    property Format: DNFieldFormat read get_Format;
    property LocaleId: Int32 read get_LocaleId write set_LocaleId;
  end;

  TDNFieldTitle = class(TDNGenericImport<DNFieldTitleClass, DNFieldTitle>) end;

  //-------------namespace: Aspose.Words.Fields----------------
  DNFieldToaClass = interface(DNFieldClass)
  ['{784804B3-44ED-5FD6-A51B-1066099FD8F9}']
  { constructors } 

    {class} function init: DNFieldToa;

  end;

  [DNTypeName('Aspose.Words.Fields.FieldToa')]
  DNFieldToa = interface(DNField)
  ['{B364E83C-A4D9-392C-8C71-2D769A0F2355}']
  { getters & setters } 

    function get_BookmarkName: string;
    procedure set_BookmarkName(value: string);
    function get_EntryCategory: string;
    procedure set_EntryCategory(value: string);
    function get_SequenceSeparator: string;
    procedure set_SequenceSeparator(value: string);
    function get_EntrySeparator: string;
    procedure set_EntrySeparator(value: string);
    function get_RemoveEntryFormatting: Boolean;
    procedure set_RemoveEntryFormatting(value: Boolean);
    function get_PageRangeSeparator: string;
    procedure set_PageRangeSeparator(value: string);
    function get_UseHeading: Boolean;
    procedure set_UseHeading(value: Boolean);
    function get_PageNumberListSeparator: string;
    procedure set_PageNumberListSeparator(value: string);
    function get_UsePassim: Boolean;
    procedure set_UsePassim(value: Boolean);
    function get_SequenceName: string;
    procedure set_SequenceName(value: string);
    function get_Start: DNFieldStart;
    function get_Separator: DNFieldSeparator;
    function get_End: DNFieldEnd;
    function get_Type: DNFieldType;
    function get_Result: string;
    procedure set_Result(value: string);
    function get_DisplayResult: string;
    function get_IsLocked: Boolean;
    procedure set_IsLocked(value: Boolean);
    function get_IsDirty: Boolean;
    procedure set_IsDirty(value: Boolean);
    function get_Format: DNFieldFormat;
    function get_LocaleId: Int32;
    procedure set_LocaleId(value: Int32);

  { methods } 

    function GetFieldCode: string; overload;
    function GetFieldCode(includeChildFieldCodes: Boolean): string; overload;
    function Remove: DNNode;
    procedure Update; overload;
    procedure Update(ignoreMergeFormat: Boolean); overload;
    function Unlink: Boolean;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property BookmarkName: string read get_BookmarkName write set_BookmarkName;
    property EntryCategory: string read get_EntryCategory write set_EntryCategory;
    property SequenceSeparator: string read get_SequenceSeparator write set_SequenceSeparator;
    property EntrySeparator: string read get_EntrySeparator write set_EntrySeparator;
    property RemoveEntryFormatting: Boolean read get_RemoveEntryFormatting write set_RemoveEntryFormatting;
    property PageRangeSeparator: string read get_PageRangeSeparator write set_PageRangeSeparator;
    property UseHeading: Boolean read get_UseHeading write set_UseHeading;
    property PageNumberListSeparator: string read get_PageNumberListSeparator write set_PageNumberListSeparator;
    property UsePassim: Boolean read get_UsePassim write set_UsePassim;
    property SequenceName: string read get_SequenceName write set_SequenceName;
    property Start: DNFieldStart read get_Start;
    property Separator: DNFieldSeparator read get_Separator;
    property &End: DNFieldEnd read get_End;
    property &Type: DNFieldType read get_Type;
    property Result: string read get_Result write set_Result;
    property DisplayResult: string read get_DisplayResult;
    property IsLocked: Boolean read get_IsLocked write set_IsLocked;
    property IsDirty: Boolean read get_IsDirty write set_IsDirty;
    property Format: DNFieldFormat read get_Format;
    property LocaleId: Int32 read get_LocaleId write set_LocaleId;
  end;

  TDNFieldToa = class(TDNGenericImport<DNFieldToaClass, DNFieldToa>) end;

  //-------------namespace: Aspose.Words.Fields----------------
  DNFieldTocClass = interface(DNFieldClass)
  ['{B6273E42-B63B-55FB-ADAF-115250E3790C}']
  { constructors } 

    {class} function init: DNFieldToc;

  end;

  [DNTypeName('Aspose.Words.Fields.FieldToc')]
  DNFieldToc = interface(DNField)
  ['{034763C6-7CED-3EA3-AB9E-49BF1D9FA44A}']
  { getters & setters } 

    function get_BookmarkName: string;
    procedure set_BookmarkName(value: string);
    function get_TableOfFiguresLabel: string;
    procedure set_TableOfFiguresLabel(value: string);
    function get_CaptionlessTableOfFiguresLabel: string;
    procedure set_CaptionlessTableOfFiguresLabel(value: string);
    function get_SequenceSeparator: string;
    procedure set_SequenceSeparator(value: string);
    function get_EntryIdentifier: string;
    procedure set_EntryIdentifier(value: string);
    function get_InsertHyperlinks: Boolean;
    procedure set_InsertHyperlinks(value: Boolean);
    function get_EntryLevelRange: string;
    procedure set_EntryLevelRange(value: string);
    function get_PageNumberOmittingLevelRange: string;
    procedure set_PageNumberOmittingLevelRange(value: string);
    function get_HeadingLevelRange: string;
    procedure set_HeadingLevelRange(value: string);
    function get_EntrySeparator: string;
    procedure set_EntrySeparator(value: string);
    function get_PrefixedSequenceIdentifier: string;
    procedure set_PrefixedSequenceIdentifier(value: string);
    function get_CustomStyles: string;
    procedure set_CustomStyles(value: string);
    function get_UseParagraphOutlineLevel: Boolean;
    procedure set_UseParagraphOutlineLevel(value: Boolean);
    function get_PreserveTabs: Boolean;
    procedure set_PreserveTabs(value: Boolean);
    function get_PreserveLineBreaks: Boolean;
    procedure set_PreserveLineBreaks(value: Boolean);
    function get_HideInWebLayout: Boolean;
    procedure set_HideInWebLayout(value: Boolean);
    function get_Start: DNFieldStart;
    function get_Separator: DNFieldSeparator;
    function get_End: DNFieldEnd;
    function get_Type: DNFieldType;
    function get_Result: string;
    procedure set_Result(value: string);
    function get_DisplayResult: string;
    function get_IsLocked: Boolean;
    procedure set_IsLocked(value: Boolean);
    function get_IsDirty: Boolean;
    procedure set_IsDirty(value: Boolean);
    function get_Format: DNFieldFormat;
    function get_LocaleId: Int32;
    procedure set_LocaleId(value: Int32);

  { methods } 

    function UpdatePageNumbers: Boolean;
    function GetFieldCode: string; overload;
    function GetFieldCode(includeChildFieldCodes: Boolean): string; overload;
    function Remove: DNNode;
    procedure Update; overload;
    procedure Update(ignoreMergeFormat: Boolean); overload;
    function Unlink: Boolean;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property BookmarkName: string read get_BookmarkName write set_BookmarkName;
    property TableOfFiguresLabel: string read get_TableOfFiguresLabel write set_TableOfFiguresLabel;
    property CaptionlessTableOfFiguresLabel: string read get_CaptionlessTableOfFiguresLabel write set_CaptionlessTableOfFiguresLabel;
    property SequenceSeparator: string read get_SequenceSeparator write set_SequenceSeparator;
    property EntryIdentifier: string read get_EntryIdentifier write set_EntryIdentifier;
    property InsertHyperlinks: Boolean read get_InsertHyperlinks write set_InsertHyperlinks;
    property EntryLevelRange: string read get_EntryLevelRange write set_EntryLevelRange;
    property PageNumberOmittingLevelRange: string read get_PageNumberOmittingLevelRange write set_PageNumberOmittingLevelRange;
    property HeadingLevelRange: string read get_HeadingLevelRange write set_HeadingLevelRange;
    property EntrySeparator: string read get_EntrySeparator write set_EntrySeparator;
    property PrefixedSequenceIdentifier: string read get_PrefixedSequenceIdentifier write set_PrefixedSequenceIdentifier;
    property CustomStyles: string read get_CustomStyles write set_CustomStyles;
    property UseParagraphOutlineLevel: Boolean read get_UseParagraphOutlineLevel write set_UseParagraphOutlineLevel;
    property PreserveTabs: Boolean read get_PreserveTabs write set_PreserveTabs;
    property PreserveLineBreaks: Boolean read get_PreserveLineBreaks write set_PreserveLineBreaks;
    property HideInWebLayout: Boolean read get_HideInWebLayout write set_HideInWebLayout;
    property Start: DNFieldStart read get_Start;
    property Separator: DNFieldSeparator read get_Separator;
    property &End: DNFieldEnd read get_End;
    property &Type: DNFieldType read get_Type;
    property Result: string read get_Result write set_Result;
    property DisplayResult: string read get_DisplayResult;
    property IsLocked: Boolean read get_IsLocked write set_IsLocked;
    property IsDirty: Boolean read get_IsDirty write set_IsDirty;
    property Format: DNFieldFormat read get_Format;
    property LocaleId: Int32 read get_LocaleId write set_LocaleId;
  end;

  TDNFieldToc = class(TDNGenericImport<DNFieldTocClass, DNFieldToc>) end;

  //-------------namespace: Aspose.Words.Fields----------------
  DNFieldUnknownClass = interface(DNFieldClass)
  ['{9E98DFA9-7F2A-5EFF-BC84-A6BC82C03A92}']
  { constructors } 

    {class} function init: DNFieldUnknown;

  end;

  [DNTypeName('Aspose.Words.Fields.FieldUnknown')]
  DNFieldUnknown = interface(DNField)
  ['{1EC67080-FEC4-3C3E-9BFE-8AAA11C44191}']
  { getters & setters } 

    function get_Start: DNFieldStart;
    function get_Separator: DNFieldSeparator;
    function get_End: DNFieldEnd;
    function get_Type: DNFieldType;
    function get_Result: string;
    procedure set_Result(value: string);
    function get_DisplayResult: string;
    function get_IsLocked: Boolean;
    procedure set_IsLocked(value: Boolean);
    function get_IsDirty: Boolean;
    procedure set_IsDirty(value: Boolean);
    function get_Format: DNFieldFormat;
    function get_LocaleId: Int32;
    procedure set_LocaleId(value: Int32);

  { methods } 

    function GetFieldCode: string; overload;
    function GetFieldCode(includeChildFieldCodes: Boolean): string; overload;
    function Remove: DNNode;
    procedure Update; overload;
    procedure Update(ignoreMergeFormat: Boolean); overload;
    function Unlink: Boolean;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Start: DNFieldStart read get_Start;
    property Separator: DNFieldSeparator read get_Separator;
    property &End: DNFieldEnd read get_End;
    property &Type: DNFieldType read get_Type;
    property Result: string read get_Result write set_Result;
    property DisplayResult: string read get_DisplayResult;
    property IsLocked: Boolean read get_IsLocked write set_IsLocked;
    property IsDirty: Boolean read get_IsDirty write set_IsDirty;
    property Format: DNFieldFormat read get_Format;
    property LocaleId: Int32 read get_LocaleId write set_LocaleId;
  end;

  TDNFieldUnknown = class(TDNGenericImport<DNFieldUnknownClass, DNFieldUnknown>) end;

  //-------------namespace: Aspose.Words.Fields----------------
  DNFieldUserAddressClass = interface(DNFieldClass)
  ['{71397CEC-F20C-5689-B76B-FB5F790DABFA}']
  { constructors } 

    {class} function init: DNFieldUserAddress;

  end;

  [DNTypeName('Aspose.Words.Fields.FieldUserAddress')]
  DNFieldUserAddress = interface(DNField)
  ['{566692E5-D868-38FB-8B74-B43B2A6FCD39}']
  { getters & setters } 

    function get_UserAddress: string;
    procedure set_UserAddress(value: string);
    function get_Start: DNFieldStart;
    function get_Separator: DNFieldSeparator;
    function get_End: DNFieldEnd;
    function get_Type: DNFieldType;
    function get_Result: string;
    procedure set_Result(value: string);
    function get_DisplayResult: string;
    function get_IsLocked: Boolean;
    procedure set_IsLocked(value: Boolean);
    function get_IsDirty: Boolean;
    procedure set_IsDirty(value: Boolean);
    function get_Format: DNFieldFormat;
    function get_LocaleId: Int32;
    procedure set_LocaleId(value: Int32);

  { methods } 

    function GetFieldCode: string; overload;
    function GetFieldCode(includeChildFieldCodes: Boolean): string; overload;
    function Remove: DNNode;
    procedure Update; overload;
    procedure Update(ignoreMergeFormat: Boolean); overload;
    function Unlink: Boolean;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property UserAddress: string read get_UserAddress write set_UserAddress;
    property Start: DNFieldStart read get_Start;
    property Separator: DNFieldSeparator read get_Separator;
    property &End: DNFieldEnd read get_End;
    property &Type: DNFieldType read get_Type;
    property Result: string read get_Result write set_Result;
    property DisplayResult: string read get_DisplayResult;
    property IsLocked: Boolean read get_IsLocked write set_IsLocked;
    property IsDirty: Boolean read get_IsDirty write set_IsDirty;
    property Format: DNFieldFormat read get_Format;
    property LocaleId: Int32 read get_LocaleId write set_LocaleId;
  end;

  TDNFieldUserAddress = class(TDNGenericImport<DNFieldUserAddressClass, DNFieldUserAddress>) end;

  //-------------namespace: Aspose.Words.Fields----------------
  DNFieldUserInitialsClass = interface(DNFieldClass)
  ['{64363826-421D-565F-96DD-9D2114E8614F}']
  { constructors } 

    {class} function init: DNFieldUserInitials;

  end;

  [DNTypeName('Aspose.Words.Fields.FieldUserInitials')]
  DNFieldUserInitials = interface(DNField)
  ['{3A1255E2-FCAC-3908-8E01-1A4A5C59F42B}']
  { getters & setters } 

    function get_UserInitials: string;
    procedure set_UserInitials(value: string);
    function get_Start: DNFieldStart;
    function get_Separator: DNFieldSeparator;
    function get_End: DNFieldEnd;
    function get_Type: DNFieldType;
    function get_Result: string;
    procedure set_Result(value: string);
    function get_DisplayResult: string;
    function get_IsLocked: Boolean;
    procedure set_IsLocked(value: Boolean);
    function get_IsDirty: Boolean;
    procedure set_IsDirty(value: Boolean);
    function get_Format: DNFieldFormat;
    function get_LocaleId: Int32;
    procedure set_LocaleId(value: Int32);

  { methods } 

    function GetFieldCode: string; overload;
    function GetFieldCode(includeChildFieldCodes: Boolean): string; overload;
    function Remove: DNNode;
    procedure Update; overload;
    procedure Update(ignoreMergeFormat: Boolean); overload;
    function Unlink: Boolean;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property UserInitials: string read get_UserInitials write set_UserInitials;
    property Start: DNFieldStart read get_Start;
    property Separator: DNFieldSeparator read get_Separator;
    property &End: DNFieldEnd read get_End;
    property &Type: DNFieldType read get_Type;
    property Result: string read get_Result write set_Result;
    property DisplayResult: string read get_DisplayResult;
    property IsLocked: Boolean read get_IsLocked write set_IsLocked;
    property IsDirty: Boolean read get_IsDirty write set_IsDirty;
    property Format: DNFieldFormat read get_Format;
    property LocaleId: Int32 read get_LocaleId write set_LocaleId;
  end;

  TDNFieldUserInitials = class(TDNGenericImport<DNFieldUserInitialsClass, DNFieldUserInitials>) end;

  //-------------namespace: Aspose.Words.Fields----------------
  DNFieldUserNameClass = interface(DNFieldClass)
  ['{14372049-A714-571B-B054-7C2D08F19BBE}']
  { constructors } 

    {class} function init: DNFieldUserName;

  end;

  [DNTypeName('Aspose.Words.Fields.FieldUserName')]
  DNFieldUserName = interface(DNField)
  ['{E9B5D4D7-770F-3203-A056-481B97380407}']
  { getters & setters } 

    function get_UserName: string;
    procedure set_UserName(value: string);
    function get_Start: DNFieldStart;
    function get_Separator: DNFieldSeparator;
    function get_End: DNFieldEnd;
    function get_Type: DNFieldType;
    function get_Result: string;
    procedure set_Result(value: string);
    function get_DisplayResult: string;
    function get_IsLocked: Boolean;
    procedure set_IsLocked(value: Boolean);
    function get_IsDirty: Boolean;
    procedure set_IsDirty(value: Boolean);
    function get_Format: DNFieldFormat;
    function get_LocaleId: Int32;
    procedure set_LocaleId(value: Int32);

  { methods } 

    function GetFieldCode: string; overload;
    function GetFieldCode(includeChildFieldCodes: Boolean): string; overload;
    function Remove: DNNode;
    procedure Update; overload;
    procedure Update(ignoreMergeFormat: Boolean); overload;
    function Unlink: Boolean;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property UserName: string read get_UserName write set_UserName;
    property Start: DNFieldStart read get_Start;
    property Separator: DNFieldSeparator read get_Separator;
    property &End: DNFieldEnd read get_End;
    property &Type: DNFieldType read get_Type;
    property Result: string read get_Result write set_Result;
    property DisplayResult: string read get_DisplayResult;
    property IsLocked: Boolean read get_IsLocked write set_IsLocked;
    property IsDirty: Boolean read get_IsDirty write set_IsDirty;
    property Format: DNFieldFormat read get_Format;
    property LocaleId: Int32 read get_LocaleId write set_LocaleId;
  end;

  TDNFieldUserName = class(TDNGenericImport<DNFieldUserNameClass, DNFieldUserName>) end;

  //-------------namespace: Aspose.Words.Fields----------------
  DNFieldXEClass = interface(DNFieldClass)
  ['{FBF9DC22-A0DA-50A6-B892-BAC8CD7FE78C}']
  { constructors } 

    {class} function init: DNFieldXE;

  end;

  [DNTypeName('Aspose.Words.Fields.FieldXE')]
  DNFieldXE = interface(DNField)
  ['{68D7D654-D8B9-31C0-9E8F-36229D959A70}']
  { getters & setters } 

    function get_Text: string;
    procedure set_Text(value: string);
    function get_IsBold: Boolean;
    procedure set_IsBold(value: Boolean);
    function get_EntryType: string;
    procedure set_EntryType(value: string);
    function get_IsItalic: Boolean;
    procedure set_IsItalic(value: Boolean);
    function get_PageRangeBookmarkName: string;
    procedure set_PageRangeBookmarkName(value: string);
    function get_HasPageRangeBookmarkName: Boolean;
    function get_PageNumberReplacement: string;
    procedure set_PageNumberReplacement(value: string);
    function get_Yomi: string;
    procedure set_Yomi(value: string);
    function get_Start: DNFieldStart;
    function get_Separator: DNFieldSeparator;
    function get_End: DNFieldEnd;
    function get_Type: DNFieldType;
    function get_Result: string;
    procedure set_Result(value: string);
    function get_DisplayResult: string;
    function get_IsLocked: Boolean;
    procedure set_IsLocked(value: Boolean);
    function get_IsDirty: Boolean;
    procedure set_IsDirty(value: Boolean);
    function get_Format: DNFieldFormat;
    function get_LocaleId: Int32;
    procedure set_LocaleId(value: Int32);

  { methods } 

    function GetFieldCode: string; overload;
    function GetFieldCode(includeChildFieldCodes: Boolean): string; overload;
    function Remove: DNNode;
    procedure Update; overload;
    procedure Update(ignoreMergeFormat: Boolean); overload;
    function Unlink: Boolean;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Text: string read get_Text write set_Text;
    property IsBold: Boolean read get_IsBold write set_IsBold;
    property EntryType: string read get_EntryType write set_EntryType;
    property IsItalic: Boolean read get_IsItalic write set_IsItalic;
    property PageRangeBookmarkName: string read get_PageRangeBookmarkName write set_PageRangeBookmarkName;
    property HasPageRangeBookmarkName: Boolean read get_HasPageRangeBookmarkName;
    property PageNumberReplacement: string read get_PageNumberReplacement write set_PageNumberReplacement;
    property Yomi: string read get_Yomi write set_Yomi;
    property Start: DNFieldStart read get_Start;
    property Separator: DNFieldSeparator read get_Separator;
    property &End: DNFieldEnd read get_End;
    property &Type: DNFieldType read get_Type;
    property Result: string read get_Result write set_Result;
    property DisplayResult: string read get_DisplayResult;
    property IsLocked: Boolean read get_IsLocked write set_IsLocked;
    property IsDirty: Boolean read get_IsDirty write set_IsDirty;
    property Format: DNFieldFormat read get_Format;
    property LocaleId: Int32 read get_LocaleId write set_LocaleId;
  end;

  TDNFieldXE = class(TDNGenericImport<DNFieldXEClass, DNFieldXE>) end;

  //-------------namespace: Aspose.Words.Fields----------------
  DNFieldArgumentBuilderClass = interface(DDN.mscorlib.DNObjectClass)
  ['{1A8CFB73-62BF-528A-A9D5-D370BA38F2E7}']
  { constructors } 

    {class} function init: DNFieldArgumentBuilder;

  end;

  [DNTypeName('Aspose.Words.Fields.FieldArgumentBuilder')]
  DNFieldArgumentBuilder = interface(DDN.mscorlib.DNObject)
  ['{19C4380F-F7E9-3A34-908D-872E7BDAED2C}']
  { methods } 

    function AddText(text: string): DNFieldArgumentBuilder;
    function AddNode(node: DNInline): DNFieldArgumentBuilder;
    function AddField(fieldBuilder: DNFieldBuilder): DNFieldArgumentBuilder;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNFieldArgumentBuilder = class(TDNGenericImport<DNFieldArgumentBuilderClass, DNFieldArgumentBuilder>) end;

  //-------------namespace: Aspose.Words.Fields----------------
  DNFieldBuilderClass = interface(DDN.mscorlib.DNObjectClass)
  ['{17AF38BD-7AEC-5A69-9395-998FE1E35888}']
  { constructors } 

    {class} function init(fieldType: DNFieldType): DNFieldBuilder;

  end;

  [DNTypeName('Aspose.Words.Fields.FieldBuilder')]
  DNFieldBuilder = interface(DDN.mscorlib.DNObject)
  ['{F9DE7A12-1AA8-3169-82AD-8E63B3A12350}']
  { methods } 

    function AddArgument(argument: string): DNFieldBuilder; overload;
    function AddArgument(argument: Int32): DNFieldBuilder; overload;
    function AddArgument(argument: Double): DNFieldBuilder; overload;
    function AddArgument(argument: DNFieldBuilder): DNFieldBuilder; overload;
    function AddArgument(argument: DNFieldArgumentBuilder): DNFieldBuilder; overload;
    function AddSwitch(switchName: string): DNFieldBuilder; overload;
    function AddSwitch(switchName: string; switchArgument: string): DNFieldBuilder; overload;
    function AddSwitch(switchName: string; switchArgument: Int32): DNFieldBuilder; overload;
    function AddSwitch(switchName: string; switchArgument: Double): DNFieldBuilder; overload;
    function BuildAndInsert(refNode: DNInline): DNField; overload;
    function BuildAndInsert(refNode: DNParagraph): DNField; overload;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNFieldBuilder = class(TDNGenericImport<DNFieldBuilderClass, DNFieldBuilder>) end;

  //-------------namespace: Aspose.Words.Fields----------------
  DNFieldCollectionClass = interface(DNObjectClass)
  ['{CFF3D34E-436D-5848-B6EE-1BE51E3D52A4}']
  end;

  [DNTypeName('Aspose.Words.Fields.FieldCollection')]
  DNFieldCollection = interface(DDN.mscorlib.DNIEnumerable)
  ['{E37D092F-F88D-32D7-AC71-4A8FEFC97A17}']
  { getters & setters } 

    function get_Count: Int32;
    function get_Item(index: Int32): DNField;

  { methods } 

    procedure Remove(field: DNField);
    procedure RemoveAt(index: Int32);
    procedure Clear;
    function GetEnumerator: DDN.mscorlib.DNIEnumerator<DNField>;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Count: Int32 read get_Count;
    property Item[index: Int32]: DNField read get_Item; default;
  end;

  TDNFieldCollection = class(TDNGenericImport<DNFieldCollectionClass, DNFieldCollection>) end;

  //-------------namespace: Aspose.Words.Fields----------------
  DNFieldFormatClass = interface(DDN.mscorlib.DNObjectClass)
  ['{9F9D2A74-724D-53AB-8C49-789E0171B193}']
  end;

  [DNTypeName('Aspose.Words.Fields.FieldFormat')]
  DNFieldFormat = interface(DDN.mscorlib.DNObject)
  ['{CC69843C-B7A3-38A7-B1FF-D30996524C64}']
  { getters & setters } 

    function get_NumericFormat: string;
    procedure set_NumericFormat(value: string);
    function get_DateTimeFormat: string;
    procedure set_DateTimeFormat(value: string);
    function get_GeneralFormats: DNGeneralFormatCollection;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property NumericFormat: string read get_NumericFormat write set_NumericFormat;
    property DateTimeFormat: string read get_DateTimeFormat write set_DateTimeFormat;
    property GeneralFormats: DNGeneralFormatCollection read get_GeneralFormats;
  end;

  TDNFieldFormat = class(TDNGenericImport<DNFieldFormatClass, DNFieldFormat>) end;

  //-------------namespace: Aspose.Words.Fields----------------
  DNFieldOptionsClass = interface(DDN.mscorlib.DNObjectClass)
  ['{243D5D84-F488-5E02-A55E-04935AB420C2}']
  end;

  [DNTypeName('Aspose.Words.Fields.FieldOptions')]
  DNFieldOptions = interface(DDN.mscorlib.DNObject)
  ['{21220D56-1015-3528-88F9-5DAA741837AA}']
  { getters & setters } 

    function get_FieldUpdateCultureSource: DNFieldUpdateCultureSource;
    procedure set_FieldUpdateCultureSource(value: DNFieldUpdateCultureSource);
    function get_FieldUpdateCultureProvider: DNIFieldUpdateCultureProvider;
    procedure set_FieldUpdateCultureProvider(value: DNIFieldUpdateCultureProvider);
    function get_IsBidiTextSupportedOnUpdate: Boolean;
    procedure set_IsBidiTextSupportedOnUpdate(value: Boolean);
    function get_UserPromptRespondent: DNIFieldUserPromptRespondent;
    procedure set_UserPromptRespondent(value: DNIFieldUserPromptRespondent);
    function get_ComparisonExpressionEvaluator: DNIComparisonExpressionEvaluator;
    procedure set_ComparisonExpressionEvaluator(value: DNIComparisonExpressionEvaluator);
    function get_DefaultDocumentAuthor: string;
    procedure set_DefaultDocumentAuthor(value: string);
    function get_CustomTocStyleSeparator: string;
    procedure set_CustomTocStyleSeparator(value: string);
    function get_LegacyNumberFormat: Boolean;
    procedure set_LegacyNumberFormat(value: Boolean);
    function get_UseInvariantCultureNumberFormat: Boolean;
    procedure set_UseInvariantCultureNumberFormat(value: Boolean);
    function get_BarcodeGenerator: DNIBarcodeGenerator;
    procedure set_BarcodeGenerator(value: DNIBarcodeGenerator);
    function get_PreProcessCulture: DDN.mscorlib.DNCultureInfo;
    procedure set_PreProcessCulture(value: DDN.mscorlib.DNCultureInfo);
    function get_CurrentUser: DNUserInformation;
    procedure set_CurrentUser(value: DNUserInformation);
    function get_ToaCategories: DNToaCategories;
    procedure set_ToaCategories(value: DNToaCategories);
    function get_FieldIndexFormat: DNFieldIndexFormat;
    procedure set_FieldIndexFormat(value: DNFieldIndexFormat);
    function get_FileName: string;
    procedure set_FileName(value: string);
    function get_ResultFormatter: DNIFieldResultFormatter;
    procedure set_ResultFormatter(value: DNIFieldResultFormatter);
    function get_BuiltInTemplatesPaths: TArray<string>;
    procedure set_BuiltInTemplatesPaths(value: TArray<string>);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property FieldUpdateCultureSource: DNFieldUpdateCultureSource read get_FieldUpdateCultureSource write set_FieldUpdateCultureSource;
    property FieldUpdateCultureProvider: DNIFieldUpdateCultureProvider read get_FieldUpdateCultureProvider write set_FieldUpdateCultureProvider;
    property IsBidiTextSupportedOnUpdate: Boolean read get_IsBidiTextSupportedOnUpdate write set_IsBidiTextSupportedOnUpdate;
    property UserPromptRespondent: DNIFieldUserPromptRespondent read get_UserPromptRespondent write set_UserPromptRespondent;
    property ComparisonExpressionEvaluator: DNIComparisonExpressionEvaluator read get_ComparisonExpressionEvaluator write set_ComparisonExpressionEvaluator;
    property DefaultDocumentAuthor: string read get_DefaultDocumentAuthor write set_DefaultDocumentAuthor;
    property CustomTocStyleSeparator: string read get_CustomTocStyleSeparator write set_CustomTocStyleSeparator;
    property LegacyNumberFormat: Boolean read get_LegacyNumberFormat write set_LegacyNumberFormat;
    property UseInvariantCultureNumberFormat: Boolean read get_UseInvariantCultureNumberFormat write set_UseInvariantCultureNumberFormat;
    property BarcodeGenerator: DNIBarcodeGenerator read get_BarcodeGenerator write set_BarcodeGenerator;
    property PreProcessCulture: DDN.mscorlib.DNCultureInfo read get_PreProcessCulture write set_PreProcessCulture;
    property CurrentUser: DNUserInformation read get_CurrentUser write set_CurrentUser;
    property ToaCategories: DNToaCategories read get_ToaCategories write set_ToaCategories;
    property FieldIndexFormat: DNFieldIndexFormat read get_FieldIndexFormat write set_FieldIndexFormat;
    property FileName: string read get_FileName write set_FileName;
    property ResultFormatter: DNIFieldResultFormatter read get_ResultFormatter write set_ResultFormatter;
    property BuiltInTemplatesPaths: TArray<string> read get_BuiltInTemplatesPaths write set_BuiltInTemplatesPaths;
  end;

  TDNFieldOptions = class(TDNGenericImport<DNFieldOptionsClass, DNFieldOptions>) end;

  //-------------namespace: Aspose.Words.Fields----------------
  DNFormFieldCollectionClass = interface(DNObjectClass)
  ['{445394B3-8184-5161-AF4D-FC3F13F1DB4E}']
  end;

  [DNTypeName('Aspose.Words.Fields.FormFieldCollection')]
  DNFormFieldCollection = interface(DDN.mscorlib.DNIEnumerable)
  ['{CD66D8CB-78E8-31A8-96FA-AF9796D9E7FB}']
  { getters & setters } 

    function get_Count: Int32;
    function get_Item(index: Int32): DNFormField; overload;
    function get_Item(bookmarkName: string): DNFormField; overload;

  { methods } 

    procedure Remove(formField: string);
    procedure RemoveAt(index: Int32);
    procedure Clear;
    function GetEnumerator: DDN.mscorlib.DNIEnumerator<DNFormField>;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Count: Int32 read get_Count;
    property Item[index: Int32]: DNFormField read get_Item; default;
    property Item[bookmarkName: string]: DNFormField read get_Item; default;
  end;

  TDNFormFieldCollection = class(TDNGenericImport<DNFormFieldCollectionClass, DNFormFieldCollection>) end;

  //-------------namespace: Aspose.Words.Fields----------------
  DNGeneralFormatCollectionClass = interface(DNObjectClass)
  ['{18F51988-E54E-5B53-B8C5-92795EF4CAAB}']
  end;

  [DNTypeName('Aspose.Words.Fields.GeneralFormatCollection')]
  DNGeneralFormatCollection = interface(DDN.mscorlib.DNIEnumerable)
  ['{E281C391-3062-3114-9849-07D5BA4AD4DA}']
  { getters & setters } 

    function get_Count: Int32;
    function get_Item(index: Int32): DNGeneralFormat;

  { methods } 

    procedure Add(item: DNGeneralFormat);
    procedure Remove(item: DNGeneralFormat);
    procedure RemoveAt(index: Int32);
    function GetEnumerator: DDN.mscorlib.DNIEnumerator<DNGeneralFormat>;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Count: Int32 read get_Count;
    property Item[index: Int32]: DNGeneralFormat read get_Item; default;
  end;

  TDNGeneralFormatCollection = class(TDNGenericImport<DNGeneralFormatCollectionClass, DNGeneralFormatCollection>) end;

  //-------------namespace: Aspose.Words.Fields----------------
  DNMergeFieldImageDimensionClass = interface(DDN.mscorlib.DNObjectClass)
  ['{70210FEB-A8B0-5AA6-9D35-C967E7C7E98A}']
  { constructors } 

    {class} function init(value: Double): DNMergeFieldImageDimension; overload;
    {class} function init(value: Double; &unit: DNMergeFieldImageDimensionUnit): DNMergeFieldImageDimension; overload;

  end;

  [DNTypeName('Aspose.Words.Fields.MergeFieldImageDimension')]
  DNMergeFieldImageDimension = interface(DDN.mscorlib.DNObject)
  ['{524C8B31-2ED0-34F1-B563-0F0D7208F424}']
  { getters & setters } 

    function get_Value: Double;
    procedure set_Value(value: Double);
    function get_Unit: DNMergeFieldImageDimensionUnit;
    procedure set_Unit(value: DNMergeFieldImageDimensionUnit);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Value: Double read get_Value write set_Value;
    property &Unit: DNMergeFieldImageDimensionUnit read get_Unit write set_Unit;
  end;

  TDNMergeFieldImageDimension = class(TDNGenericImport<DNMergeFieldImageDimensionClass, DNMergeFieldImageDimension>) end;

  //-------------namespace: Aspose.Words.Fields----------------
  DNToaCategoriesClass = interface(DDN.mscorlib.DNObjectClass)
  ['{E18C36F8-4F87-54CF-8523-874FB0FE4857}']
  { static getter & setter } 

    {class} function get_DefaultCategories: DNToaCategories;

  { constructors } 

    {class} function init: DNToaCategories;

  { static propertys } 

    {class} property DefaultCategories: DNToaCategories read get_DefaultCategories;
  end;

  [DNTypeName('Aspose.Words.Fields.ToaCategories')]
  DNToaCategories = interface(DDN.mscorlib.DNObject)
  ['{85596E88-BD10-3658-B1E6-46FA2E5BC8EB}']
  { getters & setters } 

    function get_Item(number: Int32): string;
    procedure set_Item(number: Int32; value: string);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Item[number: Int32]: string read get_Item write set_Item; default;
  end;

  TDNToaCategories = class(TDNGenericImport<DNToaCategoriesClass, DNToaCategories>) end;

  //-------------namespace: Aspose.Words.Fields----------------
  DNUserInformationClass = interface(DDN.mscorlib.DNObjectClass)
  ['{7041EB5F-3E19-533A-91D5-A1F5F178C6E8}']
  { static getter & setter } 

    {class} function get_DefaultUser: DNUserInformation;

  { constructors } 

    {class} function init: DNUserInformation;

  { static propertys } 

    {class} property DefaultUser: DNUserInformation read get_DefaultUser;
  end;

  [DNTypeName('Aspose.Words.Fields.UserInformation')]
  DNUserInformation = interface(DDN.mscorlib.DNObject)
  ['{7B860C04-F96D-3CE1-9419-957FB300E3C6}']
  { getters & setters } 

    function get_Name: string;
    procedure set_Name(value: string);
    function get_Initials: string;
    procedure set_Initials(value: string);
    function get_Address: string;
    procedure set_Address(value: string);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Name: string read get_Name write set_Name;
    property Initials: string read get_Initials write set_Initials;
    property Address: string read get_Address write set_Address;
  end;

  TDNUserInformation = class(TDNGenericImport<DNUserInformationClass, DNUserInformation>) end;

  //-------------namespace: Aspose.Words----------------
  DNFileFormatInfoClass = interface(DDN.mscorlib.DNObjectClass)
  ['{A35051DB-ED4C-5025-A3B5-06FB48E9E456}']
  end;

  [DNTypeName('Aspose.Words.FileFormatInfo')]
  DNFileFormatInfo = interface(DDN.mscorlib.DNObject)
  ['{96B1AF04-94FF-3138-8C7C-5FFA8EC1C8B6}']
  { getters & setters } 

    function get_LoadFormat: DNLoadFormat;
    function get_IsEncrypted: Boolean;
    function get_HasDigitalSignature: Boolean;
    function get_Encoding: DDN.mscorlib.DNEncoding;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property LoadFormat: DNLoadFormat read get_LoadFormat;
    property IsEncrypted: Boolean read get_IsEncrypted;
    property HasDigitalSignature: Boolean read get_HasDigitalSignature;
    property Encoding: DDN.mscorlib.DNEncoding read get_Encoding;
  end;

  TDNFileFormatInfo = class(TDNGenericImport<DNFileFormatInfoClass, DNFileFormatInfo>) end;

  //-------------namespace: Aspose.Words----------------
  DNFileFormatUtilClass = interface(DDN.mscorlib.DNObjectClass)
  ['{C964A4F4-3422-5979-8958-AD4C40FDB4D5}']
  { static methods } 

    {class} function DetectFileFormat(fileName: string): DNFileFormatInfo; overload;
    {class} function DetectFileFormat(stream: DDN.mscorlib.DNStream): DNFileFormatInfo; overload;
    {class} function ContentTypeToLoadFormat(contentType: string): DNLoadFormat;
    {class} function ContentTypeToSaveFormat(contentType: string): DNSaveFormat;
    {class} function LoadFormatToExtension(loadFormat: DNLoadFormat): string;
    {class} function SaveFormatToLoadFormat(saveFormat: DNSaveFormat): DNLoadFormat;
    {class} function LoadFormatToSaveFormat(loadFormat: DNLoadFormat): DNSaveFormat;
    {class} function SaveFormatToExtension(saveFormat: DNSaveFormat): string;
    {class} function ExtensionToSaveFormat(extension: string): DNSaveFormat;
    {class} function ImageTypeToExtension(imageType: DNImageType): string;

  end;

  [DNTypeName('Aspose.Words.FileFormatUtil')]
  DNFileFormatUtil = interface(DDN.mscorlib.DNObject)
  ['{014DE47F-CBB7-3A05-AE06-CDECDC26225F}']
  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNFileFormatUtil = class(TDNGenericImport<DNFileFormatUtilClass, DNFileFormatUtil>) end;

  //-------------namespace: Aspose.Words----------------
  DNFontClass = interface(DDN.mscorlib.DNObjectClass)
  ['{D2994000-8776-5395-B0FE-B6B5FF03D95A}']
  end;

  [DNTypeName('Aspose.Words.Font')]
  DNFont = interface(DDN.mscorlib.DNObject)
  ['{FC330B45-38AE-3C81-BDEF-F9F93B2C9115}']
  { getters & setters } 

    function get_Name: string;
    procedure set_Name(value: string);
    function get_NameAscii: string;
    procedure set_NameAscii(value: string);
    function get_NameBi: string;
    procedure set_NameBi(value: string);
    function get_NameFarEast: string;
    procedure set_NameFarEast(value: string);
    function get_NameOther: string;
    procedure set_NameOther(value: string);
    function get_ThemeFont: DNThemeFont;
    procedure set_ThemeFont(value: DNThemeFont);
    function get_ThemeFontAscii: DNThemeFont;
    procedure set_ThemeFontAscii(value: DNThemeFont);
    function get_ThemeFontFarEast: DNThemeFont;
    procedure set_ThemeFontFarEast(value: DNThemeFont);
    function get_ThemeFontOther: DNThemeFont;
    procedure set_ThemeFontOther(value: DNThemeFont);
    function get_ThemeFontBi: DNThemeFont;
    procedure set_ThemeFontBi(value: DNThemeFont);
    function get_Size: Double;
    procedure set_Size(value: Double);
    function get_SizeBi: Double;
    procedure set_SizeBi(value: Double);
    function get_Bold: Boolean;
    procedure set_Bold(value: Boolean);
    function get_BoldBi: Boolean;
    procedure set_BoldBi(value: Boolean);
    function get_Italic: Boolean;
    procedure set_Italic(value: Boolean);
    function get_ItalicBi: Boolean;
    procedure set_ItalicBi(value: Boolean);
    function get_Color: DDN.System.Drawing.DNColor;
    procedure set_Color(value: DDN.System.Drawing.DNColor);
    function get_ThemeColor: DNThemeColor;
    procedure set_ThemeColor(value: DNThemeColor);
    function get_TintAndShade: Double;
    procedure set_TintAndShade(value: Double);
    function get_AutoColor: DDN.System.Drawing.DNColor;
    function get_StrikeThrough: Boolean;
    procedure set_StrikeThrough(value: Boolean);
    function get_DoubleStrikeThrough: Boolean;
    procedure set_DoubleStrikeThrough(value: Boolean);
    function get_Shadow: Boolean;
    procedure set_Shadow(value: Boolean);
    function get_Outline: Boolean;
    procedure set_Outline(value: Boolean);
    function get_Emboss: Boolean;
    procedure set_Emboss(value: Boolean);
    function get_Engrave: Boolean;
    procedure set_Engrave(value: Boolean);
    function get_Superscript: Boolean;
    procedure set_Superscript(value: Boolean);
    function get_Subscript: Boolean;
    procedure set_Subscript(value: Boolean);
    function get_SmallCaps: Boolean;
    procedure set_SmallCaps(value: Boolean);
    function get_AllCaps: Boolean;
    procedure set_AllCaps(value: Boolean);
    function get_Hidden: Boolean;
    procedure set_Hidden(value: Boolean);
    function get_Underline: DNUnderline;
    procedure set_Underline(value: DNUnderline);
    function get_UnderlineColor: DDN.System.Drawing.DNColor;
    procedure set_UnderlineColor(value: DDN.System.Drawing.DNColor);
    function get_Scaling: Int32;
    procedure set_Scaling(value: Int32);
    function get_Spacing: Double;
    procedure set_Spacing(value: Double);
    function get_LineSpacing: Double;
    function get_Position: Double;
    procedure set_Position(value: Double);
    function get_Kerning: Double;
    procedure set_Kerning(value: Double);
    function get_HighlightColor: DDN.System.Drawing.DNColor;
    procedure set_HighlightColor(value: DDN.System.Drawing.DNColor);
    function get_TextEffect: DNTextEffect;
    procedure set_TextEffect(value: DNTextEffect);
    function get_Fill: DNFill;
    function get_Bidi: Boolean;
    procedure set_Bidi(value: Boolean);
    function get_ComplexScript: Boolean;
    procedure set_ComplexScript(value: Boolean);
    function get_NoProofing: Boolean;
    procedure set_NoProofing(value: Boolean);
    function get_LocaleId: Int32;
    procedure set_LocaleId(value: Int32);
    function get_LocaleIdBi: Int32;
    procedure set_LocaleIdBi(value: Int32);
    function get_LocaleIdFarEast: Int32;
    procedure set_LocaleIdFarEast(value: Int32);
    function get_Border: DNBorder;
    function get_Shading: DNShading;
    function get_Style: DNStyle;
    procedure set_Style(value: DNStyle);
    function get_StyleName: string;
    procedure set_StyleName(value: string);
    function get_StyleIdentifier: DNStyleIdentifier;
    procedure set_StyleIdentifier(value: DNStyleIdentifier);
    function get_SnapToGrid: Boolean;
    procedure set_SnapToGrid(value: Boolean);
    function get_EmphasisMark: DNEmphasisMark;
    procedure set_EmphasisMark(value: DNEmphasisMark);

  { methods } 

    procedure ClearFormatting;
    function HasDmlEffect(dmlEffectType: DNTextDmlEffect): Boolean;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Name: string read get_Name write set_Name;
    property NameAscii: string read get_NameAscii write set_NameAscii;
    property NameBi: string read get_NameBi write set_NameBi;
    property NameFarEast: string read get_NameFarEast write set_NameFarEast;
    property NameOther: string read get_NameOther write set_NameOther;
    property ThemeFont: DNThemeFont read get_ThemeFont write set_ThemeFont;
    property ThemeFontAscii: DNThemeFont read get_ThemeFontAscii write set_ThemeFontAscii;
    property ThemeFontFarEast: DNThemeFont read get_ThemeFontFarEast write set_ThemeFontFarEast;
    property ThemeFontOther: DNThemeFont read get_ThemeFontOther write set_ThemeFontOther;
    property ThemeFontBi: DNThemeFont read get_ThemeFontBi write set_ThemeFontBi;
    property Size: Double read get_Size write set_Size;
    property SizeBi: Double read get_SizeBi write set_SizeBi;
    property Bold: Boolean read get_Bold write set_Bold;
    property BoldBi: Boolean read get_BoldBi write set_BoldBi;
    property Italic: Boolean read get_Italic write set_Italic;
    property ItalicBi: Boolean read get_ItalicBi write set_ItalicBi;
    property Color: DDN.System.Drawing.DNColor read get_Color write set_Color;
    property ThemeColor: DNThemeColor read get_ThemeColor write set_ThemeColor;
    property TintAndShade: Double read get_TintAndShade write set_TintAndShade;
    property AutoColor: DDN.System.Drawing.DNColor read get_AutoColor;
    property StrikeThrough: Boolean read get_StrikeThrough write set_StrikeThrough;
    property DoubleStrikeThrough: Boolean read get_DoubleStrikeThrough write set_DoubleStrikeThrough;
    property Shadow: Boolean read get_Shadow write set_Shadow;
    property Outline: Boolean read get_Outline write set_Outline;
    property Emboss: Boolean read get_Emboss write set_Emboss;
    property Engrave: Boolean read get_Engrave write set_Engrave;
    property Superscript: Boolean read get_Superscript write set_Superscript;
    property Subscript: Boolean read get_Subscript write set_Subscript;
    property SmallCaps: Boolean read get_SmallCaps write set_SmallCaps;
    property AllCaps: Boolean read get_AllCaps write set_AllCaps;
    property Hidden: Boolean read get_Hidden write set_Hidden;
    property Underline: DNUnderline read get_Underline write set_Underline;
    property UnderlineColor: DDN.System.Drawing.DNColor read get_UnderlineColor write set_UnderlineColor;
    property Scaling: Int32 read get_Scaling write set_Scaling;
    property Spacing: Double read get_Spacing write set_Spacing;
    property LineSpacing: Double read get_LineSpacing;
    property Position: Double read get_Position write set_Position;
    property Kerning: Double read get_Kerning write set_Kerning;
    property HighlightColor: DDN.System.Drawing.DNColor read get_HighlightColor write set_HighlightColor;
    property TextEffect: DNTextEffect read get_TextEffect write set_TextEffect;
    property Fill: DNFill read get_Fill;
    property Bidi: Boolean read get_Bidi write set_Bidi;
    property ComplexScript: Boolean read get_ComplexScript write set_ComplexScript;
    property NoProofing: Boolean read get_NoProofing write set_NoProofing;
    property LocaleId: Int32 read get_LocaleId write set_LocaleId;
    property LocaleIdBi: Int32 read get_LocaleIdBi write set_LocaleIdBi;
    property LocaleIdFarEast: Int32 read get_LocaleIdFarEast write set_LocaleIdFarEast;
    property Border: DNBorder read get_Border;
    property Shading: DNShading read get_Shading;
    property Style: DNStyle read get_Style write set_Style;
    property StyleName: string read get_StyleName write set_StyleName;
    property StyleIdentifier: DNStyleIdentifier read get_StyleIdentifier write set_StyleIdentifier;
    property SnapToGrid: Boolean read get_SnapToGrid write set_SnapToGrid;
    property EmphasisMark: DNEmphasisMark read get_EmphasisMark write set_EmphasisMark;
  end;

  TDNFont = class(TDNGenericImport<DNFontClass, DNFont>) end;

  //-------------namespace: Aspose.Words.Fonts----------------
  DNFontFallbackSettingsClass = interface(DDN.mscorlib.DNObjectClass)
  ['{CC39475E-6CE5-5425-953E-6B911CC6E79F}']
  end;

  [DNTypeName('Aspose.Words.Fonts.FontFallbackSettings')]
  DNFontFallbackSettings = interface(DDN.mscorlib.DNObject)
  ['{95064B87-8961-3BC8-B43E-5E0F2F25C74A}']
  { methods } 

    procedure Load(fileName: string); overload;
    procedure Load(stream: DDN.mscorlib.DNStream); overload;
    procedure LoadMsOfficeFallbackSettings;
    procedure LoadNotoFallbackSettings;
    procedure Save(outputStream: DDN.mscorlib.DNStream); overload;
    procedure Save(fileName: string); overload;
    procedure BuildAutomatic;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNFontFallbackSettings = class(TDNGenericImport<DNFontFallbackSettingsClass, DNFontFallbackSettings>) end;

  //-------------namespace: Aspose.Words.Fonts----------------
  DNFontInfoClass = interface(DDN.mscorlib.DNObjectClass)
  ['{CCFD4662-A096-5349-86FB-FE01671B3809}']
  end;

  [DNTypeName('Aspose.Words.Fonts.FontInfo')]
  DNFontInfo = interface(DDN.mscorlib.DNObject)
  ['{8C8A18E3-A0C0-3CCC-9C97-FFB0829EC48E}']
  { getters & setters } 

    function get_Pitch: DNFontPitch;
    procedure set_Pitch(value: DNFontPitch);
    function get_IsTrueType: Boolean;
    procedure set_IsTrueType(value: Boolean);
    function get_Family: DNFontFamily;
    procedure set_Family(value: DNFontFamily);
    function get_Charset: Int32;
    procedure set_Charset(value: Int32);
    function get_Panose: TArray<Byte>;
    procedure set_Panose(value: TArray<Byte>);
    function get_Name: string;
    function get_AltName: string;
    procedure set_AltName(value: string);

  { methods } 

    function GetEmbeddedFont(format: DNEmbeddedFontFormat; style: DNEmbeddedFontStyle): TArray<Byte>;
    function GetEmbeddedFontAsOpenType(style: DNEmbeddedFontStyle): TArray<Byte>;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Pitch: DNFontPitch read get_Pitch write set_Pitch;
    property IsTrueType: Boolean read get_IsTrueType write set_IsTrueType;
    property Family: DNFontFamily read get_Family write set_Family;
    property Charset: Int32 read get_Charset write set_Charset;
    property Panose: TArray<Byte> read get_Panose write set_Panose;
    property Name: string read get_Name;
    property AltName: string read get_AltName write set_AltName;
  end;

  TDNFontInfo = class(TDNGenericImport<DNFontInfoClass, DNFontInfo>) end;

  //-------------namespace: Aspose.Words.Fonts----------------
  DNFontInfoCollectionClass = interface(DNObjectClass)
  ['{2C514BCD-1BA2-529E-8AD7-794712A638CB}']
  end;

  [DNTypeName('Aspose.Words.Fonts.FontInfoCollection')]
  DNFontInfoCollection = interface(DDN.mscorlib.DNIEnumerable)
  ['{786FE7EC-7D93-32CE-A06A-1DB4E8154FBE}']
  { getters & setters } 

    function get_Count: Int32;
    function get_Item(name: string): DNFontInfo; overload;
    function get_Item(index: Int32): DNFontInfo; overload;
    function get_EmbedTrueTypeFonts: Boolean;
    procedure set_EmbedTrueTypeFonts(value: Boolean);
    function get_EmbedSystemFonts: Boolean;
    procedure set_EmbedSystemFonts(value: Boolean);
    function get_SaveSubsetFonts: Boolean;
    procedure set_SaveSubsetFonts(value: Boolean);

  { methods } 

    function GetEnumerator: DDN.mscorlib.DNIEnumerator<DNFontInfo>;
    function &Contains(name: string): Boolean;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Count: Int32 read get_Count;
    property Item[name: string]: DNFontInfo read get_Item; default;
    property Item[index: Int32]: DNFontInfo read get_Item; default;
    property EmbedTrueTypeFonts: Boolean read get_EmbedTrueTypeFonts write set_EmbedTrueTypeFonts;
    property EmbedSystemFonts: Boolean read get_EmbedSystemFonts write set_EmbedSystemFonts;
    property SaveSubsetFonts: Boolean read get_SaveSubsetFonts write set_SaveSubsetFonts;
  end;

  TDNFontInfoCollection = class(TDNGenericImport<DNFontInfoCollectionClass, DNFontInfoCollection>) end;

  //-------------namespace: Aspose.Words.Fonts----------------
  DNFontSettingsClass = interface(DDN.mscorlib.DNObjectClass)
  ['{4AEA4131-B8B5-5579-B47E-4390D26105D9}']
  { static getter & setter } 

    {class} function get_DefaultInstance: DNFontSettings;

  { constructors } 

    {class} function init: DNFontSettings;

  { static propertys } 

    {class} property DefaultInstance: DNFontSettings read get_DefaultInstance;
  end;

  [DNTypeName('Aspose.Words.Fonts.FontSettings')]
  DNFontSettings = interface(DDN.mscorlib.DNObject)
  ['{93F8CEA0-168C-3CD4-9CAF-D029BE062025}']
  { getters & setters } 

    function get_FallbackSettings: DNFontFallbackSettings;
    function get_SubstitutionSettings: DNFontSubstitutionSettings;

  { methods } 

    procedure SetFontsFolder(fontFolder: string; recursive: Boolean);
    procedure SetFontsFolders(fontsFolders: TArray<string>; recursive: Boolean);
    procedure SetFontsSources(sources: TArray<DNFontSourceBase>);
    function GetFontsSources: TArray<DNFontSourceBase>;
    procedure ResetFontSources;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property FallbackSettings: DNFontFallbackSettings read get_FallbackSettings;
    property SubstitutionSettings: DNFontSubstitutionSettings read get_SubstitutionSettings;
  end;

  TDNFontSettings = class(TDNGenericImport<DNFontSettingsClass, DNFontSettings>) end;

  //-------------namespace: Aspose.Words.Fonts----------------
  DNFontSourceBaseClass = interface(DDN.mscorlib.DNObjectClass)
  ['{F0F0FF83-CEBA-5976-83AA-FDDA0219C61C}']
  end;

  [DNTypeName('Aspose.Words.Fonts.FontSourceBase')]
  DNFontSourceBase = interface(DDN.mscorlib.DNObject)
  ['{F91DC164-8E8C-348C-986F-0687AF071B3D}']
  { getters & setters } 

    function get_Type: DNFontSourceType;
    function get_Priority: Int32;
    function get_WarningCallback: DNIWarningCallback;
    procedure set_WarningCallback(value: DNIWarningCallback);

  { methods } 

    function GetAvailableFonts: DDN.mscorlib.DNIList<DNPhysicalFontInfo>;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property &Type: DNFontSourceType read get_Type;
    property Priority: Int32 read get_Priority;
    property WarningCallback: DNIWarningCallback read get_WarningCallback write set_WarningCallback;
  end;

  TDNFontSourceBase = class(TDNGenericImport<DNFontSourceBaseClass, DNFontSourceBase>) end;

  //-------------namespace: Aspose.Words.Fonts----------------
  DNFileFontSourceClass = interface(DNFontSourceBaseClass)
  ['{574A98D3-4F7D-5C0D-B32D-7F938F8F4CD8}']
  { constructors } 

    {class} function init(filePath: string): DNFileFontSource; overload;
    {class} function init(filePath: string; priority: Int32): DNFileFontSource; overload;

  end;

  [DNTypeName('Aspose.Words.Fonts.FileFontSource')]
  DNFileFontSource = interface(DNFontSourceBase)
  ['{3AB7DDB5-BD83-390E-8A79-D52466E64181}']
  { getters & setters } 

    function get_FilePath: string;
    function get_Type: DNFontSourceType;
    function get_Priority: Int32;
    function get_WarningCallback: DNIWarningCallback;
    procedure set_WarningCallback(value: DNIWarningCallback);

  { methods } 

    function GetAvailableFonts: DDN.mscorlib.DNIList<DNPhysicalFontInfo>;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property FilePath: string read get_FilePath;
    property &Type: DNFontSourceType read get_Type;
    property Priority: Int32 read get_Priority;
    property WarningCallback: DNIWarningCallback read get_WarningCallback write set_WarningCallback;
  end;

  TDNFileFontSource = class(TDNGenericImport<DNFileFontSourceClass, DNFileFontSource>) end;

  //-------------namespace: Aspose.Words.Fonts----------------
  DNFolderFontSourceClass = interface(DNFontSourceBaseClass)
  ['{0F6D24B6-301A-58B1-851D-1FE8CDA248B8}']
  { constructors } 

    {class} function init(folderPath: string; scanSubfolders: Boolean): DNFolderFontSource; overload;
    {class} function init(folderPath: string; scanSubfolders: Boolean; priority: Int32): DNFolderFontSource; overload;

  end;

  [DNTypeName('Aspose.Words.Fonts.FolderFontSource')]
  DNFolderFontSource = interface(DNFontSourceBase)
  ['{BA4651A3-4ED5-3497-90EF-4656AD8E4724}']
  { getters & setters } 

    function get_FolderPath: string;
    function get_ScanSubfolders: Boolean;
    function get_Type: DNFontSourceType;
    function get_Priority: Int32;
    function get_WarningCallback: DNIWarningCallback;
    procedure set_WarningCallback(value: DNIWarningCallback);

  { methods } 

    function GetAvailableFonts: DDN.mscorlib.DNIList<DNPhysicalFontInfo>;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property FolderPath: string read get_FolderPath;
    property ScanSubfolders: Boolean read get_ScanSubfolders;
    property &Type: DNFontSourceType read get_Type;
    property Priority: Int32 read get_Priority;
    property WarningCallback: DNIWarningCallback read get_WarningCallback write set_WarningCallback;
  end;

  TDNFolderFontSource = class(TDNGenericImport<DNFolderFontSourceClass, DNFolderFontSource>) end;

  //-------------namespace: Aspose.Words.Fonts----------------
  DNMemoryFontSourceClass = interface(DNFontSourceBaseClass)
  ['{6B763232-7313-5001-AFAA-462BC94DBA76}']
  { constructors } 

    {class} function init(fontData: TArray<Byte>): DNMemoryFontSource; overload;
    {class} function init(fontData: TArray<Byte>; priority: Int32): DNMemoryFontSource; overload;

  end;

  [DNTypeName('Aspose.Words.Fonts.MemoryFontSource')]
  DNMemoryFontSource = interface(DNFontSourceBase)
  ['{D7F6A138-08A7-3D23-98BF-55ECF6474D75}']
  { getters & setters } 

    function get_FontData: TArray<Byte>;
    function get_Type: DNFontSourceType;
    function get_Priority: Int32;
    function get_WarningCallback: DNIWarningCallback;
    procedure set_WarningCallback(value: DNIWarningCallback);

  { methods } 

    function GetAvailableFonts: DDN.mscorlib.DNIList<DNPhysicalFontInfo>;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property FontData: TArray<Byte> read get_FontData;
    property &Type: DNFontSourceType read get_Type;
    property Priority: Int32 read get_Priority;
    property WarningCallback: DNIWarningCallback read get_WarningCallback write set_WarningCallback;
  end;

  TDNMemoryFontSource = class(TDNGenericImport<DNMemoryFontSourceClass, DNMemoryFontSource>) end;

  //-------------namespace: Aspose.Words.Fonts----------------
  DNStreamFontSourceClass = interface(DNFontSourceBaseClass)
  ['{502A4D4F-5BF3-5413-8132-3E71320E8D43}']
  end;

  [DNTypeName('Aspose.Words.Fonts.StreamFontSource')]
  DNStreamFontSource = interface(DNFontSourceBase)
  ['{6AD381E4-8D65-34A1-8285-A3D3547EC1DC}']
  { getters & setters } 

    function get_Type: DNFontSourceType;
    function get_Priority: Int32;
    function get_WarningCallback: DNIWarningCallback;
    procedure set_WarningCallback(value: DNIWarningCallback);

  { methods } 

    function OpenFontDataStream: DDN.mscorlib.DNStream;
    function GetAvailableFonts: DDN.mscorlib.DNIList<DNPhysicalFontInfo>;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property &Type: DNFontSourceType read get_Type;
    property Priority: Int32 read get_Priority;
    property WarningCallback: DNIWarningCallback read get_WarningCallback write set_WarningCallback;
  end;

  TDNStreamFontSource = class(TDNGenericImport<DNStreamFontSourceClass, DNStreamFontSource>) end;

  //-------------namespace: Aspose.Words.Fonts----------------
  DNSystemFontSourceClass = interface(DNFontSourceBaseClass)
  ['{DE81F0AD-DD90-5A6A-9A67-5DBAF0DFCE90}']
  { constructors } 

    {class} function init: DNSystemFontSource; overload;
    {class} function init(priority: Int32): DNSystemFontSource; overload;

  { static methods } 

    {class} function GetSystemFontFolders: TArray<string>;

  end;

  [DNTypeName('Aspose.Words.Fonts.SystemFontSource')]
  DNSystemFontSource = interface(DNFontSourceBase)
  ['{63F33722-E4AD-318E-BC55-90E13F225A8E}']
  { getters & setters } 

    function get_Type: DNFontSourceType;
    function get_Priority: Int32;
    function get_WarningCallback: DNIWarningCallback;
    procedure set_WarningCallback(value: DNIWarningCallback);

  { methods } 

    function GetAvailableFonts: DDN.mscorlib.DNIList<DNPhysicalFontInfo>;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property &Type: DNFontSourceType read get_Type;
    property Priority: Int32 read get_Priority;
    property WarningCallback: DNIWarningCallback read get_WarningCallback write set_WarningCallback;
  end;

  TDNSystemFontSource = class(TDNGenericImport<DNSystemFontSourceClass, DNSystemFontSource>) end;

  //-------------namespace: Aspose.Words.Fonts----------------
  DNFontSubstitutionRuleClass = interface(DDN.mscorlib.DNObjectClass)
  ['{14C36172-AE74-5AC4-891C-C310497B8447}']
  end;

  [DNTypeName('Aspose.Words.Fonts.FontSubstitutionRule')]
  DNFontSubstitutionRule = interface(DDN.mscorlib.DNObject)
  ['{009E5993-2D22-3C85-BC17-166A3E923B5C}']
  { getters & setters } 

    function get_Enabled: Boolean;
    procedure set_Enabled(value: Boolean);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Enabled: Boolean read get_Enabled write set_Enabled;
  end;

  TDNFontSubstitutionRule = class(TDNGenericImport<DNFontSubstitutionRuleClass, DNFontSubstitutionRule>) end;

  //-------------namespace: Aspose.Words.Fonts----------------
  DNDefaultFontSubstitutionRuleClass = interface(DNFontSubstitutionRuleClass)
  ['{9AE70874-FA2F-5B6A-8683-0B4B6FB53CEF}']
  end;

  [DNTypeName('Aspose.Words.Fonts.DefaultFontSubstitutionRule')]
  DNDefaultFontSubstitutionRule = interface(DNFontSubstitutionRule)
  ['{0EB395AC-53F7-3D87-905B-60C10C1D0761}']
  { getters & setters } 

    function get_DefaultFontName: string;
    procedure set_DefaultFontName(value: string);
    function get_Enabled: Boolean;
    procedure set_Enabled(value: Boolean);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property DefaultFontName: string read get_DefaultFontName write set_DefaultFontName;
    property Enabled: Boolean read get_Enabled write set_Enabled;
  end;

  TDNDefaultFontSubstitutionRule = class(TDNGenericImport<DNDefaultFontSubstitutionRuleClass, DNDefaultFontSubstitutionRule>) end;

  //-------------namespace: Aspose.Words.Fonts----------------
  DNFontConfigSubstitutionRuleClass = interface(DNFontSubstitutionRuleClass)
  ['{A216D63E-7BC8-5439-8428-72C81E57595D}']
  { static getter & setter } 

    procedure set_Enabled(value: Boolean);

  { static propertys } 

    {class} property Enabled: Boolean write set_Enabled;
  end;

  [DNTypeName('Aspose.Words.Fonts.FontConfigSubstitutionRule')]
  DNFontConfigSubstitutionRule = interface(DNFontSubstitutionRule)
  ['{5452B9D5-8B09-3D7C-BFEB-36105A5D49BE}']
  { getters & setters } 

    procedure set_Enabled(value: Boolean);

  { methods } 

    function IsFontConfigAvailable: Boolean;
    procedure ResetCache;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Enabled: Boolean write set_Enabled;
  end;

  TDNFontConfigSubstitutionRule = class(TDNGenericImport<DNFontConfigSubstitutionRuleClass, DNFontConfigSubstitutionRule>) end;

  //-------------namespace: Aspose.Words.Fonts----------------
  DNFontInfoSubstitutionRuleClass = interface(DNFontSubstitutionRuleClass)
  ['{E1061DBF-E12D-5568-BF77-834ECE43ED17}']
  end;

  [DNTypeName('Aspose.Words.Fonts.FontInfoSubstitutionRule')]
  DNFontInfoSubstitutionRule = interface(DNFontSubstitutionRule)
  ['{EAF8F7A3-3794-3F7B-B35D-9CB999B4443A}']
  { getters & setters } 

    function get_Enabled: Boolean;
    procedure set_Enabled(value: Boolean);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Enabled: Boolean read get_Enabled write set_Enabled;
  end;

  TDNFontInfoSubstitutionRule = class(TDNGenericImport<DNFontInfoSubstitutionRuleClass, DNFontInfoSubstitutionRule>) end;

  //-------------namespace: Aspose.Words.Fonts----------------
  DNFontNameSubstitutionRuleClass = interface(DNFontSubstitutionRuleClass)
  ['{A9F5CB47-B483-572C-8CD6-458E04C5A270}']
  end;

  [DNTypeName('Aspose.Words.Fonts.FontNameSubstitutionRule')]
  DNFontNameSubstitutionRule = interface(DNFontSubstitutionRule)
  ['{3E76EDB0-B902-3CDB-804C-63F327732A1B}']
  { getters & setters } 

    function get_Enabled: Boolean;
    procedure set_Enabled(value: Boolean);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Enabled: Boolean read get_Enabled write set_Enabled;
  end;

  TDNFontNameSubstitutionRule = class(TDNGenericImport<DNFontNameSubstitutionRuleClass, DNFontNameSubstitutionRule>) end;

  //-------------namespace: Aspose.Words.Fonts----------------
  DNTableSubstitutionRuleClass = interface(DNFontSubstitutionRuleClass)
  ['{3EC050A5-0F77-5D32-BC2A-0859B7A557FD}']
  end;

  [DNTypeName('Aspose.Words.Fonts.TableSubstitutionRule')]
  DNTableSubstitutionRule = interface(DNFontSubstitutionRule)
  ['{C9DA4AF0-30C7-3B5F-B3D2-18A6CA187438}']
  { getters & setters } 

    function get_Enabled: Boolean;
    procedure set_Enabled(value: Boolean);

  { methods } 

    procedure Load(fileName: string); overload;
    procedure Load(stream: DDN.mscorlib.DNStream); overload;
    procedure LoadWindowsSettings;
    procedure LoadLinuxSettings;
    procedure LoadAndroidSettings;
    procedure Save(fileName: string); overload;
    procedure Save(outputStream: DDN.mscorlib.DNStream); overload;
    function GetSubstitutes(originalFontName: string): DDN.mscorlib.DNIEnumerable<string>;
    procedure SetSubstitutes(originalFontName: string; substituteFontNames: TArray<string>);
    procedure AddSubstitutes(originalFontName: string; substituteFontNames: TArray<string>);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Enabled: Boolean read get_Enabled write set_Enabled;
  end;

  TDNTableSubstitutionRule = class(TDNGenericImport<DNTableSubstitutionRuleClass, DNTableSubstitutionRule>) end;

  //-------------namespace: Aspose.Words.Fonts----------------
  DNFontSubstitutionSettingsClass = interface(DDN.mscorlib.DNObjectClass)
  ['{11EA9E57-09B3-54DF-810C-981475525FF0}']
  end;

  [DNTypeName('Aspose.Words.Fonts.FontSubstitutionSettings')]
  DNFontSubstitutionSettings = interface(DDN.mscorlib.DNObject)
  ['{C11F738D-3E60-38BF-9B44-06432C2A860B}']
  { getters & setters } 

    function get_TableSubstitution: DNTableSubstitutionRule;
    function get_FontInfoSubstitution: DNFontInfoSubstitutionRule;
    function get_DefaultFontSubstitution: DNDefaultFontSubstitutionRule;
    function get_FontConfigSubstitution: DNFontConfigSubstitutionRule;
    function get_FontNameSubstitution: DNFontNameSubstitutionRule;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property TableSubstitution: DNTableSubstitutionRule read get_TableSubstitution;
    property FontInfoSubstitution: DNFontInfoSubstitutionRule read get_FontInfoSubstitution;
    property DefaultFontSubstitution: DNDefaultFontSubstitutionRule read get_DefaultFontSubstitution;
    property FontConfigSubstitution: DNFontConfigSubstitutionRule read get_FontConfigSubstitution;
    property FontNameSubstitution: DNFontNameSubstitutionRule read get_FontNameSubstitution;
  end;

  TDNFontSubstitutionSettings = class(TDNGenericImport<DNFontSubstitutionSettingsClass, DNFontSubstitutionSettings>) end;

  //-------------namespace: Aspose.Words.Fonts----------------
  DNPhysicalFontInfoClass = interface(DDN.mscorlib.DNObjectClass)
  ['{BD22C2B3-257B-56AB-96A3-97801E793DB2}']
  end;

  [DNTypeName('Aspose.Words.Fonts.PhysicalFontInfo')]
  DNPhysicalFontInfo = interface(DDN.mscorlib.DNObject)
  ['{2786A2A2-1931-3205-8FF4-8DD01A658625}']
  { getters & setters } 

    function get_FontFamilyName: string;
    function get_FullFontName: string;
    function get_Version: string;
    function get_FilePath: string;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property FontFamilyName: string read get_FontFamilyName;
    property FullFontName: string read get_FullFontName;
    property Version: string read get_Version;
    property FilePath: string read get_FilePath;
  end;

  TDNPhysicalFontInfo = class(TDNGenericImport<DNPhysicalFontInfoClass, DNPhysicalFontInfo>) end;

  //-------------namespace: Aspose.Words----------------
  DNFrameFormatClass = interface(DDN.mscorlib.DNObjectClass)
  ['{9272EBDB-C50B-5D2D-B3A8-4F0AB42FFD63}']
  end;

  [DNTypeName('Aspose.Words.FrameFormat')]
  DNFrameFormat = interface(DDN.mscorlib.DNObject)
  ['{7FADCE06-0767-3F5D-8C07-75C40EA74B86}']
  { getters & setters } 

    function get_HeightRule: DNHeightRule;
    function get_Height: Double;
    function get_HorizontalDistanceFromText: Double;
    function get_HorizontalPosition: Double;
    function get_RelativeHorizontalPosition: DNRelativeHorizontalPosition;
    function get_RelativeVerticalPosition: DNRelativeVerticalPosition;
    function get_VerticalDistanceFromText: Double;
    function get_VerticalPosition: Double;
    function get_Width: Double;
    function get_VerticalAlignment: DNVerticalAlignment;
    function get_HorizontalAlignment: DNHorizontalAlignment;
    function get_IsFrame: Boolean;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property HeightRule: DNHeightRule read get_HeightRule;
    property Height: Double read get_Height;
    property HorizontalDistanceFromText: Double read get_HorizontalDistanceFromText;
    property HorizontalPosition: Double read get_HorizontalPosition;
    property RelativeHorizontalPosition: DNRelativeHorizontalPosition read get_RelativeHorizontalPosition;
    property RelativeVerticalPosition: DNRelativeVerticalPosition read get_RelativeVerticalPosition;
    property VerticalDistanceFromText: Double read get_VerticalDistanceFromText;
    property VerticalPosition: Double read get_VerticalPosition;
    property Width: Double read get_Width;
    property VerticalAlignment: DNVerticalAlignment read get_VerticalAlignment;
    property HorizontalAlignment: DNHorizontalAlignment read get_HorizontalAlignment;
    property IsFrame: Boolean read get_IsFrame;
  end;

  TDNFrameFormat = class(TDNGenericImport<DNFrameFormatClass, DNFrameFormat>) end;

  //-------------namespace: Aspose.Words----------------
  DNHyphenationClass = interface(DDN.mscorlib.DNObjectClass)
  ['{88C27D92-809C-5EBD-B9E8-B651BE86EE63}']
  { static getter & setter } 

    {class} function get_Callback: DNIHyphenationCallback;
    {class} procedure set_Callback(value: DNIHyphenationCallback);
    {class} function get_WarningCallback: DNIWarningCallback;
    {class} procedure set_WarningCallback(value: DNIWarningCallback);

  { static methods } 

    {class} procedure RegisterDictionary(language: string; stream: DDN.mscorlib.DNStream); overload;
    {class} procedure RegisterDictionary(language: string; fileName: string); overload;
    {class} procedure UnregisterDictionary(language: string);
    {class} function IsDictionaryRegistered(language: string): Boolean;

  { static propertys } 

    {class} property Callback: DNIHyphenationCallback read get_Callback write set_Callback;
    {class} property WarningCallback: DNIWarningCallback read get_WarningCallback write set_WarningCallback;
  end;

  [DNTypeName('Aspose.Words.Hyphenation')]
  DNHyphenation = interface(DDN.mscorlib.DNObject)
  ['{F1EFBF73-FA4E-34B3-AF62-E0AA38D59055}']
  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNHyphenation = class(TDNGenericImport<DNHyphenationClass, DNHyphenation>) end;

  //-------------namespace: Aspose.Words----------------
  DNImageWatermarkOptionsClass = interface(DDN.mscorlib.DNObjectClass)
  ['{630E8552-E962-5BAE-8286-6B55F73779EA}']
  { constructors } 

    {class} function init: DNImageWatermarkOptions;

  end;

  [DNTypeName('Aspose.Words.ImageWatermarkOptions')]
  DNImageWatermarkOptions = interface(DDN.mscorlib.DNObject)
  ['{40A2D941-16A6-3F20-B653-E979DF76E62F}']
  { getters & setters } 

    function get_Scale: Double;
    procedure set_Scale(value: Double);
    function get_IsWashout: Boolean;
    procedure set_IsWashout(value: Boolean);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Scale: Double read get_Scale write set_Scale;
    property IsWashout: Boolean read get_IsWashout write set_IsWashout;
  end;

  TDNImageWatermarkOptions = class(TDNGenericImport<DNImageWatermarkOptionsClass, DNImageWatermarkOptions>) end;

  //-------------namespace: Aspose.Words----------------
  DNImportFormatOptionsClass = interface(DDN.mscorlib.DNObjectClass)
  ['{4F591F8F-D02D-5B7C-9DEE-76E505FA9CCE}']
  { constructors } 

    {class} function init: DNImportFormatOptions;

  end;

  [DNTypeName('Aspose.Words.ImportFormatOptions')]
  DNImportFormatOptions = interface(DDN.mscorlib.DNObject)
  ['{88C412C2-920E-3A30-B3E1-738499C3869B}']
  { getters & setters } 

    function get_SmartStyleBehavior: Boolean;
    procedure set_SmartStyleBehavior(value: Boolean);
    function get_KeepSourceNumbering: Boolean;
    procedure set_KeepSourceNumbering(value: Boolean);
    function get_IgnoreTextBoxes: Boolean;
    procedure set_IgnoreTextBoxes(value: Boolean);
    function get_IgnoreHeaderFooter: Boolean;
    procedure set_IgnoreHeaderFooter(value: Boolean);
    function get_MergePastedLists: Boolean;
    procedure set_MergePastedLists(value: Boolean);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property SmartStyleBehavior: Boolean read get_SmartStyleBehavior write set_SmartStyleBehavior;
    property KeepSourceNumbering: Boolean read get_KeepSourceNumbering write set_KeepSourceNumbering;
    property IgnoreTextBoxes: Boolean read get_IgnoreTextBoxes write set_IgnoreTextBoxes;
    property IgnoreHeaderFooter: Boolean read get_IgnoreHeaderFooter write set_IgnoreHeaderFooter;
    property MergePastedLists: Boolean read get_MergePastedLists write set_MergePastedLists;
  end;

  TDNImportFormatOptions = class(TDNGenericImport<DNImportFormatOptionsClass, DNImportFormatOptions>) end;

  //-------------namespace: Aspose.Words----------------
  DNInternableComplexAttrClass = interface(DDN.mscorlib.DNObjectClass)
  ['{3FA5EE3F-D6BE-547E-96D9-8A3209FFF6F4}']
  end;

  [DNTypeName('Aspose.Words.InternableComplexAttr')]
  DNInternableComplexAttr = interface(DDN.mscorlib.DNObject)
  ['{B1237D3E-5DC7-348A-B022-466502C75446}']
  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNInternableComplexAttr = class(TDNGenericImport<DNInternableComplexAttrClass, DNInternableComplexAttr>) end;

  //-------------namespace: Aspose.Words----------------
  DNBorderClass = interface(DNInternableComplexAttrClass)
  ['{C40B6109-98E3-5DAC-B628-788FB43331AE}']
  end;

  [DNTypeName('Aspose.Words.Border')]
  DNBorder = interface(DNInternableComplexAttr)
  ['{C07E34CC-AAA3-36A4-87C6-95A89ECB773F}']
  { getters & setters } 

    function get_LineStyle: DNLineStyle;
    procedure set_LineStyle(value: DNLineStyle);
    function get_LineWidth: Double;
    procedure set_LineWidth(value: Double);
    function get_IsVisible: Boolean;
    function get_Color: DDN.System.Drawing.DNColor;
    procedure set_Color(value: DDN.System.Drawing.DNColor);
    function get_DistanceFromText: Double;
    procedure set_DistanceFromText(value: Double);
    function get_Shadow: Boolean;
    procedure set_Shadow(value: Boolean);

  { methods } 

    procedure ClearFormatting;
    function Equals(rhs: DNBorder): Boolean; overload;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean; overload;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property LineStyle: DNLineStyle read get_LineStyle write set_LineStyle;
    property LineWidth: Double read get_LineWidth write set_LineWidth;
    property IsVisible: Boolean read get_IsVisible;
    property Color: DDN.System.Drawing.DNColor read get_Color write set_Color;
    property DistanceFromText: Double read get_DistanceFromText write set_DistanceFromText;
    property Shadow: Boolean read get_Shadow write set_Shadow;
  end;

  TDNBorder = class(TDNGenericImport<DNBorderClass, DNBorder>) end;

  //-------------namespace: Aspose.Words----------------
  DNShadingClass = interface(DNInternableComplexAttrClass)
  ['{A186CFA7-EACA-5B32-AAB8-97FA643975A3}']
  end;

  [DNTypeName('Aspose.Words.Shading')]
  DNShading = interface(DNInternableComplexAttr)
  ['{09D62332-2807-3026-AA89-49E036EEEAF5}']
  { getters & setters } 

    function get_BackgroundPatternColor: DDN.System.Drawing.DNColor;
    procedure set_BackgroundPatternColor(value: DDN.System.Drawing.DNColor);
    function get_ForegroundPatternColor: DDN.System.Drawing.DNColor;
    procedure set_ForegroundPatternColor(value: DDN.System.Drawing.DNColor);
    function get_Texture: DNTextureIndex;
    procedure set_Texture(value: DNTextureIndex);

  { methods } 

    procedure ClearFormatting;
    function Equals(rhs: DNShading): Boolean; overload;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean; overload;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property BackgroundPatternColor: DDN.System.Drawing.DNColor read get_BackgroundPatternColor write set_BackgroundPatternColor;
    property ForegroundPatternColor: DDN.System.Drawing.DNColor read get_ForegroundPatternColor write set_ForegroundPatternColor;
    property Texture: DNTextureIndex read get_Texture write set_Texture;
  end;

  TDNShading = class(TDNGenericImport<DNShadingClass, DNShading>) end;

  //-------------namespace: Aspose.Words----------------
  DNTabStopCollectionClass = interface(DNInternableComplexAttrClass)
  ['{7DD7971F-3AB0-5576-ABFD-B7F0667E5A95}']
  end;

  [DNTypeName('Aspose.Words.TabStopCollection')]
  DNTabStopCollection = interface(DNInternableComplexAttr)
  ['{5B61DC7D-E15A-309A-8444-CA4259144EAA}']
  { getters & setters } 

    function get_Count: Int32;
    function get_Item(index: Int32): DNTabStop; overload;
    function get_Item(position: Double): DNTabStop; overload;

  { methods } 

    function Equals(rhs: DNTabStopCollection): Boolean; overload;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean; overload;
    function GetHashCode: Int32;
    procedure Clear;
    function GetPositionByIndex(index: Int32): Double;
    function GetIndexByPosition(position: Double): Int32;
    procedure Add(tabStop: DNTabStop); overload;
    procedure Add(position: Double; alignment: DNTabAlignment; leader: DNTabLeader); overload;
    procedure RemoveByPosition(position: Double);
    procedure RemoveByIndex(index: Int32);
    function After(position: Double): DNTabStop;
    function Before(position: Double): DNTabStop;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Count: Int32 read get_Count;
    property Item[index: Int32]: DNTabStop read get_Item; default;
    property Item[position: Double]: DNTabStop read get_Item; default;
  end;

  TDNTabStopCollection = class(TDNGenericImport<DNTabStopCollectionClass, DNTabStopCollection>) end;

  //-------------namespace: Aspose.Words----------------
  DNInterruptionTokenClass = interface(DDN.mscorlib.DNObjectClass)
  ['{F92C1AAB-F777-51A7-983E-505DE0F061AE}']
  { constructors } 

    {class} function init: DNInterruptionToken;

  end;

  [DNTypeName('Aspose.Words.InterruptionToken')]
  DNInterruptionToken = interface(DDN.mscorlib.DNObject)
  ['{8EE95A75-2BC8-315A-AFF5-3B649ACE4376}']
  { methods } 

    procedure Interrupt;
    procedure BindToCurrentThread;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNInterruptionToken = class(TDNGenericImport<DNInterruptionTokenClass, DNInterruptionToken>) end;

  //-------------namespace: Aspose.Words.Layout----------------
  DNLayoutCollectorClass = interface(DDN.mscorlib.DNObjectClass)
  ['{25427A9A-E133-500A-8CF7-63622287ADFC}']
  { constructors } 

    {class} function init(doc: DNDocument): DNLayoutCollector;

  end;

  [DNTypeName('Aspose.Words.Layout.LayoutCollector')]
  DNLayoutCollector = interface(DDN.mscorlib.DNObject)
  ['{5597DB5B-D931-3620-AFDC-B5333C81A8FC}']
  { getters & setters } 

    function get_Document: DNDocument;
    procedure set_Document(value: DNDocument);

  { methods } 

    function GetStartPageIndex(node: DNNode): Int32;
    function GetEndPageIndex(node: DNNode): Int32;
    function GetNumPagesSpanned(node: DNNode): Int32;
    procedure Clear;
    function GetEntity(node: DNNode): DDN.mscorlib.DNObject;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Document: DNDocument read get_Document write set_Document;
  end;

  TDNLayoutCollector = class(TDNGenericImport<DNLayoutCollectorClass, DNLayoutCollector>) end;

  //-------------namespace: Aspose.Words.Layout----------------
  DNLayoutEnumeratorClass = interface(DDN.mscorlib.DNObjectClass)
  ['{7E620816-ABCF-59A8-973A-18CF6481529D}']
  { constructors } 

    {class} function init(document: DNDocument): DNLayoutEnumerator;

  end;

  [DNTypeName('Aspose.Words.Layout.LayoutEnumerator')]
  DNLayoutEnumerator = interface(DDN.mscorlib.DNObject)
  ['{7CDF92B8-874A-3B76-AFE2-924A59FD08F2}']
  { getters & setters } 

    function get_Type: DNLayoutEntityType;
    function get_Rectangle: DDN.System.Drawing.DNRectangleF;
    function get_Kind: string;
    function get_Text: string;
    function get_PageIndex: Int32;
    function get_Current: DDN.mscorlib.DNObject;
    procedure set_Current(value: DDN.mscorlib.DNObject);
    function get_Document: DNDocument;

  { methods } 

    procedure Reset;
    function MoveNext: Boolean;
    function MoveNextLogical: Boolean;
    function MovePrevious: Boolean;
    function MovePreviousLogical: Boolean;
    function MoveFirstChild: Boolean;
    function MoveLastChild: Boolean;
    function MoveParent: Boolean; overload;
    function MoveParent(types: DNLayoutEntityType): Boolean; overload;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property &Type: DNLayoutEntityType read get_Type;
    property Rectangle: DDN.System.Drawing.DNRectangleF read get_Rectangle;
    property Kind: string read get_Kind;
    property Text: string read get_Text;
    property PageIndex: Int32 read get_PageIndex;
    property Current: DDN.mscorlib.DNObject read get_Current write set_Current;
    property Document: DNDocument read get_Document;
  end;

  TDNLayoutEnumerator = class(TDNGenericImport<DNLayoutEnumeratorClass, DNLayoutEnumerator>) end;

  //-------------namespace: Aspose.Words.Layout----------------
  DNLayoutOptionsClass = interface(DDN.mscorlib.DNObjectClass)
  ['{20A0E29F-EC4B-5B2B-83C8-7EBAAA8352AC}']
  { constructors } 

    {class} function init: DNLayoutOptions;

  end;

  [DNTypeName('Aspose.Words.Layout.LayoutOptions')]
  DNLayoutOptions = interface(DDN.mscorlib.DNObject)
  ['{392BE305-6066-3CDA-B58D-9F6058347003}']
  { getters & setters } 

    function get_RevisionOptions: DNRevisionOptions;
    function get_ShowHiddenText: Boolean;
    procedure set_ShowHiddenText(value: Boolean);
    function get_ShowParagraphMarks: Boolean;
    procedure set_ShowParagraphMarks(value: Boolean);
    function get_ShowComments: Boolean;
    procedure set_ShowComments(value: Boolean);
    function get_CommentDisplayMode: DNCommentDisplayMode;
    procedure set_CommentDisplayMode(value: DNCommentDisplayMode);
    function get_TextShaperFactory: DNITextShaperFactory;
    procedure set_TextShaperFactory(value: DNITextShaperFactory);
    function get_Callback: DNIPageLayoutCallback;
    procedure set_Callback(value: DNIPageLayoutCallback);
    function get_IgnorePrinterMetrics: Boolean;
    procedure set_IgnorePrinterMetrics(value: Boolean);
    function get_ContinuousSectionPageNumberingRestart: DNContinuosSectionRestart;
    procedure set_ContinuousSectionPageNumberingRestart(value: DNContinuosSectionRestart);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property RevisionOptions: DNRevisionOptions read get_RevisionOptions;
    property ShowHiddenText: Boolean read get_ShowHiddenText write set_ShowHiddenText;
    property ShowParagraphMarks: Boolean read get_ShowParagraphMarks write set_ShowParagraphMarks;
    property ShowComments: Boolean read get_ShowComments write set_ShowComments;
    property CommentDisplayMode: DNCommentDisplayMode read get_CommentDisplayMode write set_CommentDisplayMode;
    property TextShaperFactory: DNITextShaperFactory read get_TextShaperFactory write set_TextShaperFactory;
    property Callback: DNIPageLayoutCallback read get_Callback write set_Callback;
    property IgnorePrinterMetrics: Boolean read get_IgnorePrinterMetrics write set_IgnorePrinterMetrics;
    property ContinuousSectionPageNumberingRestart: DNContinuosSectionRestart read get_ContinuousSectionPageNumberingRestart write set_ContinuousSectionPageNumberingRestart;
  end;

  TDNLayoutOptions = class(TDNGenericImport<DNLayoutOptionsClass, DNLayoutOptions>) end;

  //-------------namespace: Aspose.Words.Layout----------------
  DNPageLayoutCallbackArgsClass = interface(DDN.mscorlib.DNObjectClass)
  ['{73F1BCF1-ADD7-5A26-8D4D-659F014D994D}']
  end;

  [DNTypeName('Aspose.Words.Layout.PageLayoutCallbackArgs')]
  DNPageLayoutCallbackArgs = interface(DDN.mscorlib.DNObject)
  ['{C2B42F85-C703-3343-9374-80855250EEB3}']
  { getters & setters } 

    function get_Event: DNPageLayoutEvent;
    function get_Document: DNDocument;
    function get_PageIndex: Int32;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Event: DNPageLayoutEvent read get_Event;
    property Document: DNDocument read get_Document;
    property PageIndex: Int32 read get_PageIndex;
  end;

  TDNPageLayoutCallbackArgs = class(TDNGenericImport<DNPageLayoutCallbackArgsClass, DNPageLayoutCallbackArgs>) end;

  //-------------namespace: Aspose.Words.Layout----------------
  DNRevisionOptionsClass = interface(DDN.mscorlib.DNObjectClass)
  ['{FC76A5B9-886D-56D8-AB78-411946499BB3}']
  end;

  [DNTypeName('Aspose.Words.Layout.RevisionOptions')]
  DNRevisionOptions = interface(DDN.mscorlib.DNObject)
  ['{DA2F81AA-3C24-36A0-8E81-7198B0859D5F}']
  { getters & setters } 

    function get_ShowRevisionMarks: Boolean;
    procedure set_ShowRevisionMarks(value: Boolean);
    function get_ShowRevisionBars: Boolean;
    procedure set_ShowRevisionBars(value: Boolean);
    function get_ShowOriginalRevision: Boolean;
    procedure set_ShowOriginalRevision(value: Boolean);
    function get_InsertedTextColor: DNRevisionColor;
    procedure set_InsertedTextColor(value: DNRevisionColor);
    function get_InsertedTextEffect: DNRevisionTextEffect;
    procedure set_InsertedTextEffect(value: DNRevisionTextEffect);
    function get_DeletedTextColor: DNRevisionColor;
    procedure set_DeletedTextColor(value: DNRevisionColor);
    function get_DeletedTextEffect: DNRevisionTextEffect;
    procedure set_DeletedTextEffect(value: DNRevisionTextEffect);
    function get_MovedFromTextColor: DNRevisionColor;
    procedure set_MovedFromTextColor(value: DNRevisionColor);
    function get_MovedFromTextEffect: DNRevisionTextEffect;
    procedure set_MovedFromTextEffect(value: DNRevisionTextEffect);
    function get_MovedToTextColor: DNRevisionColor;
    procedure set_MovedToTextColor(value: DNRevisionColor);
    function get_MovedToTextEffect: DNRevisionTextEffect;
    procedure set_MovedToTextEffect(value: DNRevisionTextEffect);
    function get_RevisedPropertiesColor: DNRevisionColor;
    procedure set_RevisedPropertiesColor(value: DNRevisionColor);
    function get_RevisedPropertiesEffect: DNRevisionTextEffect;
    procedure set_RevisedPropertiesEffect(value: DNRevisionTextEffect);
    function get_RevisionBarsColor: DNRevisionColor;
    procedure set_RevisionBarsColor(value: DNRevisionColor);
    function get_RevisionBarsWidth: Single;
    procedure set_RevisionBarsWidth(value: Single);
    function get_RevisionBarsPosition: DNHorizontalAlignment;
    procedure set_RevisionBarsPosition(value: DNHorizontalAlignment);
    function get_CommentColor: DNRevisionColor;
    procedure set_CommentColor(value: DNRevisionColor);
    function get_ShowInBalloons: DNShowInBalloons;
    procedure set_ShowInBalloons(value: DNShowInBalloons);
    function get_MeasurementUnit: DNMeasurementUnits;
    procedure set_MeasurementUnit(value: DNMeasurementUnits);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property ShowRevisionMarks: Boolean read get_ShowRevisionMarks write set_ShowRevisionMarks;
    property ShowRevisionBars: Boolean read get_ShowRevisionBars write set_ShowRevisionBars;
    property ShowOriginalRevision: Boolean read get_ShowOriginalRevision write set_ShowOriginalRevision;
    property InsertedTextColor: DNRevisionColor read get_InsertedTextColor write set_InsertedTextColor;
    property InsertedTextEffect: DNRevisionTextEffect read get_InsertedTextEffect write set_InsertedTextEffect;
    property DeletedTextColor: DNRevisionColor read get_DeletedTextColor write set_DeletedTextColor;
    property DeletedTextEffect: DNRevisionTextEffect read get_DeletedTextEffect write set_DeletedTextEffect;
    property MovedFromTextColor: DNRevisionColor read get_MovedFromTextColor write set_MovedFromTextColor;
    property MovedFromTextEffect: DNRevisionTextEffect read get_MovedFromTextEffect write set_MovedFromTextEffect;
    property MovedToTextColor: DNRevisionColor read get_MovedToTextColor write set_MovedToTextColor;
    property MovedToTextEffect: DNRevisionTextEffect read get_MovedToTextEffect write set_MovedToTextEffect;
    property RevisedPropertiesColor: DNRevisionColor read get_RevisedPropertiesColor write set_RevisedPropertiesColor;
    property RevisedPropertiesEffect: DNRevisionTextEffect read get_RevisedPropertiesEffect write set_RevisedPropertiesEffect;
    property RevisionBarsColor: DNRevisionColor read get_RevisionBarsColor write set_RevisionBarsColor;
    property RevisionBarsWidth: Single read get_RevisionBarsWidth write set_RevisionBarsWidth;
    property RevisionBarsPosition: DNHorizontalAlignment read get_RevisionBarsPosition write set_RevisionBarsPosition;
    property CommentColor: DNRevisionColor read get_CommentColor write set_CommentColor;
    property ShowInBalloons: DNShowInBalloons read get_ShowInBalloons write set_ShowInBalloons;
    property MeasurementUnit: DNMeasurementUnits read get_MeasurementUnit write set_MeasurementUnit;
  end;

  TDNRevisionOptions = class(TDNGenericImport<DNRevisionOptionsClass, DNRevisionOptions>) end;

  //-------------namespace: Aspose.Words----------------
  DNLicenseClass = interface(DDN.mscorlib.DNObjectClass)
  ['{3DFC5A0F-95CC-5BD8-8D00-EAB36F46400C}']
  { constructors } 

    {class} function init: DNLicense;

  end;

  [DNTypeName('Aspose.Words.License')]
  DNLicense = interface(DDN.mscorlib.DNObject)
  ['{ABE5A2FD-6AF6-38DD-8A68-8569B9A802FF}']
  { methods } 

    procedure SetLicense(licenseName: string); overload;
    procedure SetLicense(stream: DDN.mscorlib.DNStream); overload;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNLicense = class(TDNGenericImport<DNLicenseClass, DNLicense>) end;

  //-------------namespace: Aspose.Words.Lists----------------
  DNListClass = interface(DDN.mscorlib.DNObjectClass)
  ['{7AC2294B-77BF-56D9-ABD8-283A748F9827}']
  end;

  [DNTypeName('Aspose.Words.Lists.List')]
  DNList = interface(DDN.mscorlib.DNObject)
  ['{0A4EA0A6-4084-3244-908E-DDAF311DA593}']
  { getters & setters } 

    function get_ListId: Int32;
    function get_Document: DNDocumentBase;
    function get_IsMultiLevel: Boolean;
    function get_ListLevels: DNListLevelCollection;
    function get_IsRestartAtEachSection: Boolean;
    procedure set_IsRestartAtEachSection(value: Boolean);
    function get_IsListStyleDefinition: Boolean;
    function get_IsListStyleReference: Boolean;
    function get_Style: DNStyle;

  { methods } 

    function Equals(list: DNList): Boolean; overload;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean; overload;
    function GetHashCode: Int32;
    function CompareTo(obj: DDN.mscorlib.DNObject): Int32; overload;
    function CompareTo(other: DNList): Int32; overload;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property ListId: Int32 read get_ListId;
    property Document: DNDocumentBase read get_Document;
    property IsMultiLevel: Boolean read get_IsMultiLevel;
    property ListLevels: DNListLevelCollection read get_ListLevels;
    property IsRestartAtEachSection: Boolean read get_IsRestartAtEachSection write set_IsRestartAtEachSection;
    property IsListStyleDefinition: Boolean read get_IsListStyleDefinition;
    property IsListStyleReference: Boolean read get_IsListStyleReference;
    property Style: DNStyle read get_Style;
  end;

  TDNList = class(TDNGenericImport<DNListClass, DNList>) end;

  //-------------namespace: Aspose.Words.Lists----------------
  DNListCollectionClass = interface(DNObjectClass)
  ['{F4E6E1E2-3F08-55E0-962C-8BA2A72D26A7}']
  end;

  [DNTypeName('Aspose.Words.Lists.ListCollection')]
  DNListCollection = interface(DDN.mscorlib.DNIEnumerable)
  ['{FB03DB48-800F-3337-B98B-03353232E375}']
  { getters & setters } 

    function get_Count: Int32;
    function get_Item(index: Int32): DNList;
    function get_Document: DNDocumentBase;

  { methods } 

    function GetEnumerator: DDN.mscorlib.DNIEnumerator<DNList>;
    function Add(listTemplate: DNListTemplate): DNList; overload;
    function Add(listStyle: DNStyle): DNList; overload;
    function AddCopy(srcList: DNList): DNList;
    function GetListByListId(listId: Int32): DNList;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Count: Int32 read get_Count;
    property Item[index: Int32]: DNList read get_Item; default;
    property Document: DNDocumentBase read get_Document;
  end;

  TDNListCollection = class(TDNGenericImport<DNListCollectionClass, DNListCollection>) end;

  //-------------namespace: Aspose.Words.Lists----------------
  DNListFormatClass = interface(DDN.mscorlib.DNObjectClass)
  ['{7EA03F05-90D4-56E7-B23C-4F39C6DFFF02}']
  end;

  [DNTypeName('Aspose.Words.Lists.ListFormat')]
  DNListFormat = interface(DDN.mscorlib.DNObject)
  ['{9ECD5C6A-9A39-3A90-8F35-16A40216DAEF}']
  { getters & setters } 

    function get_ListLevelNumber: Int32;
    procedure set_ListLevelNumber(value: Int32);
    function get_IsListItem: Boolean;
    function get_List: DNList;
    procedure set_List(value: DNList);
    function get_ListLevel: DNListLevel;

  { methods } 

    procedure ApplyBulletDefault;
    procedure ApplyNumberDefault;
    procedure RemoveNumbers;
    procedure ListIndent;
    procedure ListOutdent;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property ListLevelNumber: Int32 read get_ListLevelNumber write set_ListLevelNumber;
    property IsListItem: Boolean read get_IsListItem;
    property List: DNList read get_List write set_List;
    property ListLevel: DNListLevel read get_ListLevel;
  end;

  TDNListFormat = class(TDNGenericImport<DNListFormatClass, DNListFormat>) end;

  //-------------namespace: Aspose.Words.Lists----------------
  DNListLabelClass = interface(DDN.mscorlib.DNObjectClass)
  ['{ADA2A7EF-AFBE-51B2-B499-9A45A98ABBE1}']
  end;

  [DNTypeName('Aspose.Words.Lists.ListLabel')]
  DNListLabel = interface(DDN.mscorlib.DNObject)
  ['{140FC719-802A-396F-B8E4-AA7490BA7FF8}']
  { getters & setters } 

    function get_Font: DNFont;
    function get_LabelString: string;
    function get_LabelValue: Int32;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Font: DNFont read get_Font;
    property LabelString: string read get_LabelString;
    property LabelValue: Int32 read get_LabelValue;
  end;

  TDNListLabel = class(TDNGenericImport<DNListLabelClass, DNListLabel>) end;

  //-------------namespace: Aspose.Words.Lists----------------
  DNListLevelClass = interface(DDN.mscorlib.DNObjectClass)
  ['{AC80F624-AE5C-524D-B925-7ADCA323FEA0}']
  end;

  [DNTypeName('Aspose.Words.Lists.ListLevel')]
  DNListLevel = interface(DDN.mscorlib.DNObject)
  ['{826BCEFA-0A0B-3160-965C-C2553AEDCAD2}']
  { getters & setters } 

    function get_StartAt: Int32;
    procedure set_StartAt(value: Int32);
    function get_NumberStyle: DNNumberStyle;
    procedure set_NumberStyle(value: DNNumberStyle);
    function get_NumberFormat: string;
    procedure set_NumberFormat(value: string);
    function get_Alignment: DNListLevelAlignment;
    procedure set_Alignment(value: DNListLevelAlignment);
    function get_IsLegal: Boolean;
    procedure set_IsLegal(value: Boolean);
    function get_RestartAfterLevel: Int32;
    procedure set_RestartAfterLevel(value: Int32);
    function get_TrailingCharacter: DNListTrailingCharacter;
    procedure set_TrailingCharacter(value: DNListTrailingCharacter);
    function get_Font: DNFont;
    function get_TabPosition: Double;
    procedure set_TabPosition(value: Double);
    function get_NumberPosition: Double;
    procedure set_NumberPosition(value: Double);
    function get_TextPosition: Double;
    procedure set_TextPosition(value: Double);
    function get_LinkedStyle: DNStyle;
    procedure set_LinkedStyle(value: DNStyle);
    function get_ImageData: DNImageData;

  { methods } 

    procedure CreatePictureBullet;
    procedure DeletePictureBullet;
    function Equals(level: DNListLevel): Boolean; overload;
    function GetHashCode: Int32;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean; overload;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property StartAt: Int32 read get_StartAt write set_StartAt;
    property NumberStyle: DNNumberStyle read get_NumberStyle write set_NumberStyle;
    property NumberFormat: string read get_NumberFormat write set_NumberFormat;
    property Alignment: DNListLevelAlignment read get_Alignment write set_Alignment;
    property IsLegal: Boolean read get_IsLegal write set_IsLegal;
    property RestartAfterLevel: Int32 read get_RestartAfterLevel write set_RestartAfterLevel;
    property TrailingCharacter: DNListTrailingCharacter read get_TrailingCharacter write set_TrailingCharacter;
    property Font: DNFont read get_Font;
    property TabPosition: Double read get_TabPosition write set_TabPosition;
    property NumberPosition: Double read get_NumberPosition write set_NumberPosition;
    property TextPosition: Double read get_TextPosition write set_TextPosition;
    property LinkedStyle: DNStyle read get_LinkedStyle write set_LinkedStyle;
    property ImageData: DNImageData read get_ImageData;
  end;

  TDNListLevel = class(TDNGenericImport<DNListLevelClass, DNListLevel>) end;

  //-------------namespace: Aspose.Words.Lists----------------
  DNListLevelCollectionClass = interface(DNObjectClass)
  ['{E7BE9CC2-111A-5465-BFAB-ABBDF27C71C3}']
  end;

  [DNTypeName('Aspose.Words.Lists.ListLevelCollection')]
  DNListLevelCollection = interface(DDN.mscorlib.DNIEnumerable)
  ['{F7755F05-808E-31CC-B0FF-42D824BBD59C}']
  { getters & setters } 

    function get_Item(index: Int32): DNListLevel;
    procedure set_Item(index: Int32; value: DNListLevel);
    function get_Count: Int32;

  { methods } 

    function GetEnumerator: DDN.mscorlib.DNIEnumerator<DNListLevel>;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Item[index: Int32]: DNListLevel read get_Item write set_Item; default;
    property Count: Int32 read get_Count;
  end;

  TDNListLevelCollection = class(TDNGenericImport<DNListLevelCollectionClass, DNListLevelCollection>) end;

  //-------------namespace: Aspose.Words.Loading----------------
  DNLanguagePreferencesClass = interface(DDN.mscorlib.DNObjectClass)
  ['{A2A2779F-16C0-52FD-970A-338C497433BB}']
  { constructors } 

    {class} function init: DNLanguagePreferences;

  end;

  [DNTypeName('Aspose.Words.Loading.LanguagePreferences')]
  DNLanguagePreferences = interface(DDN.mscorlib.DNObject)
  ['{75F43710-65F6-30C8-BEB6-4A2ABBA9D482}']
  { getters & setters } 

    function get_DefaultEditingLanguage: DNEditingLanguage;
    procedure set_DefaultEditingLanguage(value: DNEditingLanguage);

  { methods } 

    procedure AddEditingLanguage(language: DNEditingLanguage);
    procedure AddEditingLanguages(languages: TArray<DNEditingLanguage>);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property DefaultEditingLanguage: DNEditingLanguage read get_DefaultEditingLanguage write set_DefaultEditingLanguage;
  end;

  TDNLanguagePreferences = class(TDNGenericImport<DNLanguagePreferencesClass, DNLanguagePreferences>) end;

  //-------------namespace: Aspose.Words.Loading----------------
  DNLoadOptionsClass = interface(DDN.mscorlib.DNObjectClass)
  ['{FB880FDD-1499-59CC-AD38-6C4B7A1F87A0}']
  { constructors } 

    {class} function init: DNLoadOptions; overload;
    {class} function init(password: string): DNLoadOptions; overload;
    {class} function init(loadFormat: DNLoadFormat; password: string; baseUri: string): DNLoadOptions; overload;

  end;

  [DNTypeName('Aspose.Words.Loading.LoadOptions')]
  DNLoadOptions = interface(DDN.mscorlib.DNObject)
  ['{DF12D757-F0AE-35F5-B5B2-4AC956069410}']
  { getters & setters } 

    function get_LoadFormat: DNLoadFormat;
    procedure set_LoadFormat(value: DNLoadFormat);
    function get_Password: string;
    procedure set_Password(value: string);
    function get_BaseUri: string;
    procedure set_BaseUri(value: string);
    function get_Encoding: DDN.mscorlib.DNEncoding;
    procedure set_Encoding(value: DDN.mscorlib.DNEncoding);
    function get_ResourceLoadingCallback: DNIResourceLoadingCallback;
    procedure set_ResourceLoadingCallback(value: DNIResourceLoadingCallback);
    function get_WarningCallback: DNIWarningCallback;
    procedure set_WarningCallback(value: DNIWarningCallback);
    function get_PreserveIncludePictureField: Boolean;
    procedure set_PreserveIncludePictureField(value: Boolean);
    function get_ConvertShapeToOfficeMath: Boolean;
    procedure set_ConvertShapeToOfficeMath(value: Boolean);
    function get_FontSettings: DNFontSettings;
    procedure set_FontSettings(value: DNFontSettings);
    function get_TempFolder: string;
    procedure set_TempFolder(value: string);
    function get_ConvertMetafilesToPng: Boolean;
    procedure set_ConvertMetafilesToPng(value: Boolean);
    function get_MswVersion: DNMsWordVersion;
    procedure set_MswVersion(value: DNMsWordVersion);
    function get_UpdateDirtyFields: Boolean;
    procedure set_UpdateDirtyFields(value: Boolean);
    function get_LanguagePreferences: DNLanguagePreferences;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property LoadFormat: DNLoadFormat read get_LoadFormat write set_LoadFormat;
    property Password: string read get_Password write set_Password;
    property BaseUri: string read get_BaseUri write set_BaseUri;
    property Encoding: DDN.mscorlib.DNEncoding read get_Encoding write set_Encoding;
    property ResourceLoadingCallback: DNIResourceLoadingCallback read get_ResourceLoadingCallback write set_ResourceLoadingCallback;
    property WarningCallback: DNIWarningCallback read get_WarningCallback write set_WarningCallback;
    property PreserveIncludePictureField: Boolean read get_PreserveIncludePictureField write set_PreserveIncludePictureField;
    property ConvertShapeToOfficeMath: Boolean read get_ConvertShapeToOfficeMath write set_ConvertShapeToOfficeMath;
    property FontSettings: DNFontSettings read get_FontSettings write set_FontSettings;
    property TempFolder: string read get_TempFolder write set_TempFolder;
    property ConvertMetafilesToPng: Boolean read get_ConvertMetafilesToPng write set_ConvertMetafilesToPng;
    property MswVersion: DNMsWordVersion read get_MswVersion write set_MswVersion;
    property UpdateDirtyFields: Boolean read get_UpdateDirtyFields write set_UpdateDirtyFields;
    property LanguagePreferences: DNLanguagePreferences read get_LanguagePreferences;
  end;

  TDNLoadOptions = class(TDNGenericImport<DNLoadOptionsClass, DNLoadOptions>) end;

  //-------------namespace: Aspose.Words.Loading----------------
  DNHtmlLoadOptionsClass = interface(DNLoadOptionsClass)
  ['{FCAC1B2A-8E60-5E54-B72A-9AE77D228252}']
  { constructors } 

    {class} function init: DNHtmlLoadOptions; overload;
    {class} function init(password: string): DNHtmlLoadOptions; overload;
    {class} function init(loadFormat: DNLoadFormat; password: string; baseUri: string): DNHtmlLoadOptions; overload;

  end;

  [DNTypeName('Aspose.Words.Loading.HtmlLoadOptions')]
  DNHtmlLoadOptions = interface(DNLoadOptions)
  ['{5888FA3B-CDF6-3C22-9FA1-F30639F64A93}']
  { getters & setters } 

    function get_SupportVml: Boolean;
    procedure set_SupportVml(value: Boolean);
    function get_WebRequestTimeout: Int32;
    procedure set_WebRequestTimeout(value: Int32);
    function get_PreferredControlType: DNHtmlControlType;
    procedure set_PreferredControlType(value: DNHtmlControlType);
    function get_IgnoreNoscriptElements: Boolean;
    procedure set_IgnoreNoscriptElements(value: Boolean);
    function get_LoadFormat: DNLoadFormat;
    procedure set_LoadFormat(value: DNLoadFormat);
    function get_Password: string;
    procedure set_Password(value: string);
    function get_BaseUri: string;
    procedure set_BaseUri(value: string);
    function get_Encoding: DDN.mscorlib.DNEncoding;
    procedure set_Encoding(value: DDN.mscorlib.DNEncoding);
    function get_ResourceLoadingCallback: DNIResourceLoadingCallback;
    procedure set_ResourceLoadingCallback(value: DNIResourceLoadingCallback);
    function get_WarningCallback: DNIWarningCallback;
    procedure set_WarningCallback(value: DNIWarningCallback);
    function get_PreserveIncludePictureField: Boolean;
    procedure set_PreserveIncludePictureField(value: Boolean);
    function get_ConvertShapeToOfficeMath: Boolean;
    procedure set_ConvertShapeToOfficeMath(value: Boolean);
    function get_FontSettings: DNFontSettings;
    procedure set_FontSettings(value: DNFontSettings);
    function get_TempFolder: string;
    procedure set_TempFolder(value: string);
    function get_ConvertMetafilesToPng: Boolean;
    procedure set_ConvertMetafilesToPng(value: Boolean);
    function get_MswVersion: DNMsWordVersion;
    procedure set_MswVersion(value: DNMsWordVersion);
    function get_UpdateDirtyFields: Boolean;
    procedure set_UpdateDirtyFields(value: Boolean);
    function get_LanguagePreferences: DNLanguagePreferences;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property SupportVml: Boolean read get_SupportVml write set_SupportVml;
    property WebRequestTimeout: Int32 read get_WebRequestTimeout write set_WebRequestTimeout;
    property PreferredControlType: DNHtmlControlType read get_PreferredControlType write set_PreferredControlType;
    property IgnoreNoscriptElements: Boolean read get_IgnoreNoscriptElements write set_IgnoreNoscriptElements;
    property LoadFormat: DNLoadFormat read get_LoadFormat write set_LoadFormat;
    property Password: string read get_Password write set_Password;
    property BaseUri: string read get_BaseUri write set_BaseUri;
    property Encoding: DDN.mscorlib.DNEncoding read get_Encoding write set_Encoding;
    property ResourceLoadingCallback: DNIResourceLoadingCallback read get_ResourceLoadingCallback write set_ResourceLoadingCallback;
    property WarningCallback: DNIWarningCallback read get_WarningCallback write set_WarningCallback;
    property PreserveIncludePictureField: Boolean read get_PreserveIncludePictureField write set_PreserveIncludePictureField;
    property ConvertShapeToOfficeMath: Boolean read get_ConvertShapeToOfficeMath write set_ConvertShapeToOfficeMath;
    property FontSettings: DNFontSettings read get_FontSettings write set_FontSettings;
    property TempFolder: string read get_TempFolder write set_TempFolder;
    property ConvertMetafilesToPng: Boolean read get_ConvertMetafilesToPng write set_ConvertMetafilesToPng;
    property MswVersion: DNMsWordVersion read get_MswVersion write set_MswVersion;
    property UpdateDirtyFields: Boolean read get_UpdateDirtyFields write set_UpdateDirtyFields;
    property LanguagePreferences: DNLanguagePreferences read get_LanguagePreferences;
  end;

  TDNHtmlLoadOptions = class(TDNGenericImport<DNHtmlLoadOptionsClass, DNHtmlLoadOptions>) end;

  //-------------namespace: Aspose.Words.Loading----------------
  DNPdfLoadOptionsClass = interface(DNLoadOptionsClass)
  ['{ADEE365C-8324-5A7B-B788-0519CD75A52D}']
  { constructors } 

    {class} function init: DNPdfLoadOptions;

  end;

  [DNTypeName('Aspose.Words.Loading.PdfLoadOptions')]
  DNPdfLoadOptions = interface(DNLoadOptions)
  ['{BD6BD15B-B34C-3962-A6FD-AE981DE837DF}']
  { getters & setters } 

    function get_PageIndex: Int32;
    procedure set_PageIndex(value: Int32);
    function get_PageCount: Int32;
    procedure set_PageCount(value: Int32);
    function get_SkipPdfImages: Boolean;
    procedure set_SkipPdfImages(value: Boolean);
    function get_LoadFormat: DNLoadFormat;
    procedure set_LoadFormat(value: DNLoadFormat);
    function get_Password: string;
    procedure set_Password(value: string);
    function get_BaseUri: string;
    procedure set_BaseUri(value: string);
    function get_Encoding: DDN.mscorlib.DNEncoding;
    procedure set_Encoding(value: DDN.mscorlib.DNEncoding);
    function get_ResourceLoadingCallback: DNIResourceLoadingCallback;
    procedure set_ResourceLoadingCallback(value: DNIResourceLoadingCallback);
    function get_WarningCallback: DNIWarningCallback;
    procedure set_WarningCallback(value: DNIWarningCallback);
    function get_PreserveIncludePictureField: Boolean;
    procedure set_PreserveIncludePictureField(value: Boolean);
    function get_ConvertShapeToOfficeMath: Boolean;
    procedure set_ConvertShapeToOfficeMath(value: Boolean);
    function get_FontSettings: DNFontSettings;
    procedure set_FontSettings(value: DNFontSettings);
    function get_TempFolder: string;
    procedure set_TempFolder(value: string);
    function get_ConvertMetafilesToPng: Boolean;
    procedure set_ConvertMetafilesToPng(value: Boolean);
    function get_MswVersion: DNMsWordVersion;
    procedure set_MswVersion(value: DNMsWordVersion);
    function get_UpdateDirtyFields: Boolean;
    procedure set_UpdateDirtyFields(value: Boolean);
    function get_LanguagePreferences: DNLanguagePreferences;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property PageIndex: Int32 read get_PageIndex write set_PageIndex;
    property PageCount: Int32 read get_PageCount write set_PageCount;
    property SkipPdfImages: Boolean read get_SkipPdfImages write set_SkipPdfImages;
    property LoadFormat: DNLoadFormat read get_LoadFormat write set_LoadFormat;
    property Password: string read get_Password write set_Password;
    property BaseUri: string read get_BaseUri write set_BaseUri;
    property Encoding: DDN.mscorlib.DNEncoding read get_Encoding write set_Encoding;
    property ResourceLoadingCallback: DNIResourceLoadingCallback read get_ResourceLoadingCallback write set_ResourceLoadingCallback;
    property WarningCallback: DNIWarningCallback read get_WarningCallback write set_WarningCallback;
    property PreserveIncludePictureField: Boolean read get_PreserveIncludePictureField write set_PreserveIncludePictureField;
    property ConvertShapeToOfficeMath: Boolean read get_ConvertShapeToOfficeMath write set_ConvertShapeToOfficeMath;
    property FontSettings: DNFontSettings read get_FontSettings write set_FontSettings;
    property TempFolder: string read get_TempFolder write set_TempFolder;
    property ConvertMetafilesToPng: Boolean read get_ConvertMetafilesToPng write set_ConvertMetafilesToPng;
    property MswVersion: DNMsWordVersion read get_MswVersion write set_MswVersion;
    property UpdateDirtyFields: Boolean read get_UpdateDirtyFields write set_UpdateDirtyFields;
    property LanguagePreferences: DNLanguagePreferences read get_LanguagePreferences;
  end;

  TDNPdfLoadOptions = class(TDNGenericImport<DNPdfLoadOptionsClass, DNPdfLoadOptions>) end;

  //-------------namespace: Aspose.Words.Loading----------------
  DNRtfLoadOptionsClass = interface(DNLoadOptionsClass)
  ['{ED61D824-CC7B-5791-B624-E4C54759BCD2}']
  { constructors } 

    {class} function init: DNRtfLoadOptions;

  end;

  [DNTypeName('Aspose.Words.Loading.RtfLoadOptions')]
  DNRtfLoadOptions = interface(DNLoadOptions)
  ['{3CF2DAD6-6A3A-3410-A296-F7FC3ED62F92}']
  { getters & setters } 

    function get_RecognizeUtf8Text: Boolean;
    procedure set_RecognizeUtf8Text(value: Boolean);
    function get_LoadFormat: DNLoadFormat;
    procedure set_LoadFormat(value: DNLoadFormat);
    function get_Password: string;
    procedure set_Password(value: string);
    function get_BaseUri: string;
    procedure set_BaseUri(value: string);
    function get_Encoding: DDN.mscorlib.DNEncoding;
    procedure set_Encoding(value: DDN.mscorlib.DNEncoding);
    function get_ResourceLoadingCallback: DNIResourceLoadingCallback;
    procedure set_ResourceLoadingCallback(value: DNIResourceLoadingCallback);
    function get_WarningCallback: DNIWarningCallback;
    procedure set_WarningCallback(value: DNIWarningCallback);
    function get_PreserveIncludePictureField: Boolean;
    procedure set_PreserveIncludePictureField(value: Boolean);
    function get_ConvertShapeToOfficeMath: Boolean;
    procedure set_ConvertShapeToOfficeMath(value: Boolean);
    function get_FontSettings: DNFontSettings;
    procedure set_FontSettings(value: DNFontSettings);
    function get_TempFolder: string;
    procedure set_TempFolder(value: string);
    function get_ConvertMetafilesToPng: Boolean;
    procedure set_ConvertMetafilesToPng(value: Boolean);
    function get_MswVersion: DNMsWordVersion;
    procedure set_MswVersion(value: DNMsWordVersion);
    function get_UpdateDirtyFields: Boolean;
    procedure set_UpdateDirtyFields(value: Boolean);
    function get_LanguagePreferences: DNLanguagePreferences;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property RecognizeUtf8Text: Boolean read get_RecognizeUtf8Text write set_RecognizeUtf8Text;
    property LoadFormat: DNLoadFormat read get_LoadFormat write set_LoadFormat;
    property Password: string read get_Password write set_Password;
    property BaseUri: string read get_BaseUri write set_BaseUri;
    property Encoding: DDN.mscorlib.DNEncoding read get_Encoding write set_Encoding;
    property ResourceLoadingCallback: DNIResourceLoadingCallback read get_ResourceLoadingCallback write set_ResourceLoadingCallback;
    property WarningCallback: DNIWarningCallback read get_WarningCallback write set_WarningCallback;
    property PreserveIncludePictureField: Boolean read get_PreserveIncludePictureField write set_PreserveIncludePictureField;
    property ConvertShapeToOfficeMath: Boolean read get_ConvertShapeToOfficeMath write set_ConvertShapeToOfficeMath;
    property FontSettings: DNFontSettings read get_FontSettings write set_FontSettings;
    property TempFolder: string read get_TempFolder write set_TempFolder;
    property ConvertMetafilesToPng: Boolean read get_ConvertMetafilesToPng write set_ConvertMetafilesToPng;
    property MswVersion: DNMsWordVersion read get_MswVersion write set_MswVersion;
    property UpdateDirtyFields: Boolean read get_UpdateDirtyFields write set_UpdateDirtyFields;
    property LanguagePreferences: DNLanguagePreferences read get_LanguagePreferences;
  end;

  TDNRtfLoadOptions = class(TDNGenericImport<DNRtfLoadOptionsClass, DNRtfLoadOptions>) end;

  //-------------namespace: Aspose.Words.Loading----------------
  DNTxtLoadOptionsClass = interface(DNLoadOptionsClass)
  ['{2A436BD2-2EBC-5948-BE38-2C31AD230C80}']
  { constructors } 

    {class} function init: DNTxtLoadOptions;

  end;

  [DNTypeName('Aspose.Words.Loading.TxtLoadOptions')]
  DNTxtLoadOptions = interface(DNLoadOptions)
  ['{6DFA75C5-6FE6-34F4-B90D-1DF62CCE0F41}']
  { getters & setters } 

    function get_DetectNumberingWithWhitespaces: Boolean;
    procedure set_DetectNumberingWithWhitespaces(value: Boolean);
    function get_TrailingSpacesOptions: DNTxtTrailingSpacesOptions;
    procedure set_TrailingSpacesOptions(value: DNTxtTrailingSpacesOptions);
    function get_LeadingSpacesOptions: DNTxtLeadingSpacesOptions;
    procedure set_LeadingSpacesOptions(value: DNTxtLeadingSpacesOptions);
    function get_DocumentDirection: DNDocumentDirection;
    procedure set_DocumentDirection(value: DNDocumentDirection);
    function get_LoadFormat: DNLoadFormat;
    procedure set_LoadFormat(value: DNLoadFormat);
    function get_Password: string;
    procedure set_Password(value: string);
    function get_BaseUri: string;
    procedure set_BaseUri(value: string);
    function get_Encoding: DDN.mscorlib.DNEncoding;
    procedure set_Encoding(value: DDN.mscorlib.DNEncoding);
    function get_ResourceLoadingCallback: DNIResourceLoadingCallback;
    procedure set_ResourceLoadingCallback(value: DNIResourceLoadingCallback);
    function get_WarningCallback: DNIWarningCallback;
    procedure set_WarningCallback(value: DNIWarningCallback);
    function get_PreserveIncludePictureField: Boolean;
    procedure set_PreserveIncludePictureField(value: Boolean);
    function get_ConvertShapeToOfficeMath: Boolean;
    procedure set_ConvertShapeToOfficeMath(value: Boolean);
    function get_FontSettings: DNFontSettings;
    procedure set_FontSettings(value: DNFontSettings);
    function get_TempFolder: string;
    procedure set_TempFolder(value: string);
    function get_ConvertMetafilesToPng: Boolean;
    procedure set_ConvertMetafilesToPng(value: Boolean);
    function get_MswVersion: DNMsWordVersion;
    procedure set_MswVersion(value: DNMsWordVersion);
    function get_UpdateDirtyFields: Boolean;
    procedure set_UpdateDirtyFields(value: Boolean);
    function get_LanguagePreferences: DNLanguagePreferences;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property DetectNumberingWithWhitespaces: Boolean read get_DetectNumberingWithWhitespaces write set_DetectNumberingWithWhitespaces;
    property TrailingSpacesOptions: DNTxtTrailingSpacesOptions read get_TrailingSpacesOptions write set_TrailingSpacesOptions;
    property LeadingSpacesOptions: DNTxtLeadingSpacesOptions read get_LeadingSpacesOptions write set_LeadingSpacesOptions;
    property DocumentDirection: DNDocumentDirection read get_DocumentDirection write set_DocumentDirection;
    property LoadFormat: DNLoadFormat read get_LoadFormat write set_LoadFormat;
    property Password: string read get_Password write set_Password;
    property BaseUri: string read get_BaseUri write set_BaseUri;
    property Encoding: DDN.mscorlib.DNEncoding read get_Encoding write set_Encoding;
    property ResourceLoadingCallback: DNIResourceLoadingCallback read get_ResourceLoadingCallback write set_ResourceLoadingCallback;
    property WarningCallback: DNIWarningCallback read get_WarningCallback write set_WarningCallback;
    property PreserveIncludePictureField: Boolean read get_PreserveIncludePictureField write set_PreserveIncludePictureField;
    property ConvertShapeToOfficeMath: Boolean read get_ConvertShapeToOfficeMath write set_ConvertShapeToOfficeMath;
    property FontSettings: DNFontSettings read get_FontSettings write set_FontSettings;
    property TempFolder: string read get_TempFolder write set_TempFolder;
    property ConvertMetafilesToPng: Boolean read get_ConvertMetafilesToPng write set_ConvertMetafilesToPng;
    property MswVersion: DNMsWordVersion read get_MswVersion write set_MswVersion;
    property UpdateDirtyFields: Boolean read get_UpdateDirtyFields write set_UpdateDirtyFields;
    property LanguagePreferences: DNLanguagePreferences read get_LanguagePreferences;
  end;

  TDNTxtLoadOptions = class(TDNGenericImport<DNTxtLoadOptionsClass, DNTxtLoadOptions>) end;

  //-------------namespace: Aspose.Words.Loading----------------
  DNResourceLoadingArgsClass = interface(DDN.mscorlib.DNObjectClass)
  ['{7F2D7C1E-59DB-5CAF-968E-B7877950A13D}']
  end;

  [DNTypeName('Aspose.Words.Loading.ResourceLoadingArgs')]
  DNResourceLoadingArgs = interface(DDN.mscorlib.DNObject)
  ['{32B87CC2-B78D-320B-9920-9710FE40E464}']
  { getters & setters } 

    function get_ResourceType: DNResourceType;
    function get_Uri: string;
    procedure set_Uri(value: string);
    function get_OriginalUri: string;

  { methods } 

    procedure SetData(data: TArray<Byte>);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property ResourceType: DNResourceType read get_ResourceType;
    property Uri: string read get_Uri write set_Uri;
    property OriginalUri: string read get_OriginalUri;
  end;

  TDNResourceLoadingArgs = class(TDNGenericImport<DNResourceLoadingArgsClass, DNResourceLoadingArgs>) end;

  //-------------namespace: Aspose.Words.MailMerging----------------
  DNFieldMergingArgsBaseClass = interface(DDN.mscorlib.DNObjectClass)
  ['{DDC72044-8D44-5CAC-A126-7A0C94394FD5}']
  end;

  [DNTypeName('Aspose.Words.MailMerging.FieldMergingArgsBase')]
  DNFieldMergingArgsBase = interface(DDN.mscorlib.DNObject)
  ['{0E233C19-1C18-3F54-872A-0686EE588726}']
  { getters & setters } 

    function get_Document: DNDocument;
    function get_TableName: string;
    function get_RecordIndex: Int32;
    function get_FieldName: string;
    function get_DocumentFieldName: string;
    function get_FieldValue: DDN.mscorlib.DNObject;
    procedure set_FieldValue(value: DDN.mscorlib.DNObject);
    function get_Field: DNFieldMergeField;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Document: DNDocument read get_Document;
    property TableName: string read get_TableName;
    property RecordIndex: Int32 read get_RecordIndex;
    property FieldName: string read get_FieldName;
    property DocumentFieldName: string read get_DocumentFieldName;
    property FieldValue: DDN.mscorlib.DNObject read get_FieldValue write set_FieldValue;
    property Field: DNFieldMergeField read get_Field;
  end;

  TDNFieldMergingArgsBase = class(TDNGenericImport<DNFieldMergingArgsBaseClass, DNFieldMergingArgsBase>) end;

  //-------------namespace: Aspose.Words.MailMerging----------------
  DNFieldMergingArgsClass = interface(DNFieldMergingArgsBaseClass)
  ['{769E1743-3713-5C4D-B54D-1821E0D08D8A}']
  end;

  [DNTypeName('Aspose.Words.MailMerging.FieldMergingArgs')]
  DNFieldMergingArgs = interface(DNFieldMergingArgsBase)
  ['{C5D5FFD0-9019-3CA8-B08F-A29000375B3B}']
  { getters & setters } 

    function get_Text: string;
    procedure set_Text(value: string);
    function get_Document: DNDocument;
    function get_TableName: string;
    function get_RecordIndex: Int32;
    function get_FieldName: string;
    function get_DocumentFieldName: string;
    function get_FieldValue: DDN.mscorlib.DNObject;
    procedure set_FieldValue(value: DDN.mscorlib.DNObject);
    function get_Field: DNFieldMergeField;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Text: string read get_Text write set_Text;
    property Document: DNDocument read get_Document;
    property TableName: string read get_TableName;
    property RecordIndex: Int32 read get_RecordIndex;
    property FieldName: string read get_FieldName;
    property DocumentFieldName: string read get_DocumentFieldName;
    property FieldValue: DDN.mscorlib.DNObject read get_FieldValue write set_FieldValue;
    property Field: DNFieldMergeField read get_Field;
  end;

  TDNFieldMergingArgs = class(TDNGenericImport<DNFieldMergingArgsClass, DNFieldMergingArgs>) end;

  //-------------namespace: Aspose.Words.MailMerging----------------
  DNImageFieldMergingArgsClass = interface(DNFieldMergingArgsBaseClass)
  ['{7E59101D-464B-5A59-8254-C8A1016038FE}']
  end;

  [DNTypeName('Aspose.Words.MailMerging.ImageFieldMergingArgs')]
  DNImageFieldMergingArgs = interface(DNFieldMergingArgsBase)
  ['{ABE3856B-8FFD-3EA8-A8FA-75F3567DC683}']
  { getters & setters } 

    function get_ImageFileName: string;
    procedure set_ImageFileName(value: string);
    function get_ImageStream: DDN.mscorlib.DNStream;
    procedure set_ImageStream(value: DDN.mscorlib.DNStream);
    function get_Image: DDN.System.Drawing.DNImage;
    procedure set_Image(value: DDN.System.Drawing.DNImage);
    function get_Shape: DNShape;
    procedure set_Shape(value: DNShape);
    function get_ImageWidth: DNMergeFieldImageDimension;
    procedure set_ImageWidth(value: DNMergeFieldImageDimension);
    function get_ImageHeight: DNMergeFieldImageDimension;
    procedure set_ImageHeight(value: DNMergeFieldImageDimension);
    function get_Document: DNDocument;
    function get_TableName: string;
    function get_RecordIndex: Int32;
    function get_FieldName: string;
    function get_DocumentFieldName: string;
    function get_FieldValue: DDN.mscorlib.DNObject;
    procedure set_FieldValue(value: DDN.mscorlib.DNObject);
    function get_Field: DNFieldMergeField;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property ImageFileName: string read get_ImageFileName write set_ImageFileName;
    property ImageStream: DDN.mscorlib.DNStream read get_ImageStream write set_ImageStream;
    property Image: DDN.System.Drawing.DNImage read get_Image write set_Image;
    property Shape: DNShape read get_Shape write set_Shape;
    property ImageWidth: DNMergeFieldImageDimension read get_ImageWidth write set_ImageWidth;
    property ImageHeight: DNMergeFieldImageDimension read get_ImageHeight write set_ImageHeight;
    property Document: DNDocument read get_Document;
    property TableName: string read get_TableName;
    property RecordIndex: Int32 read get_RecordIndex;
    property FieldName: string read get_FieldName;
    property DocumentFieldName: string read get_DocumentFieldName;
    property FieldValue: DDN.mscorlib.DNObject read get_FieldValue write set_FieldValue;
    property Field: DNFieldMergeField read get_Field;
  end;

  TDNImageFieldMergingArgs = class(TDNGenericImport<DNImageFieldMergingArgsClass, DNImageFieldMergingArgs>) end;

  //-------------namespace: Aspose.Words.MailMerging----------------
  DNMailMergeClass = interface(DDN.mscorlib.DNObjectClass)
  ['{F6E4DE33-5B68-5514-A568-15D1D2A85713}']
  end;

  [DNTypeName('Aspose.Words.MailMerging.MailMerge')]
  DNMailMerge = interface(DDN.mscorlib.DNObject)
  ['{B1227389-77D8-338C-A446-DE9889EFBF02}']
  { getters & setters } 

    function get_RegionStartTag: string;
    procedure set_RegionStartTag(value: string);
    function get_RegionEndTag: string;
    procedure set_RegionEndTag(value: string);
    function get_CleanupOptions: DNMailMergeCleanupOptions;
    procedure set_CleanupOptions(value: DNMailMergeCleanupOptions);
    function get_CleanupParagraphsWithPunctuationMarks: Boolean;
    procedure set_CleanupParagraphsWithPunctuationMarks(value: Boolean);
    function get_UseNonMergeFields: Boolean;
    procedure set_UseNonMergeFields(value: Boolean);
    function get_PreserveUnusedTags: Boolean;
    procedure set_PreserveUnusedTags(value: Boolean);
    function get_MergeDuplicateRegions: Boolean;
    procedure set_MergeDuplicateRegions(value: Boolean);
    function get_MergeWholeDocument: Boolean;
    procedure set_MergeWholeDocument(value: Boolean);
    function get_UseWholeParagraphAsRegion: Boolean;
    procedure set_UseWholeParagraphAsRegion(value: Boolean);
    function get_RestartListsAtEachSection: Boolean;
    procedure set_RestartListsAtEachSection(value: Boolean);
    function get_MappedDataFields: DNMappedDataFieldCollection;
    function get_FieldMergingCallback: DNIFieldMergingCallback;
    procedure set_FieldMergingCallback(value: DNIFieldMergingCallback);
    function get_MailMergeCallback: DNIMailMergeCallback;
    procedure set_MailMergeCallback(value: DNIMailMergeCallback);
    function get_TrimWhitespaces: Boolean;
    procedure set_TrimWhitespaces(value: Boolean);
    function get_UnconditionalMergeFieldsAndRegions: Boolean;
    procedure set_UnconditionalMergeFieldsAndRegions(value: Boolean);
    function get_RetainFirstSectionStart: Boolean;
    procedure set_RetainFirstSectionStart(value: Boolean);

  { methods } 

    procedure Execute(dataSource: DNIMailMergeDataSource); overload;
    procedure Execute(fieldNames: TArray<string>; values: TArray<DDN.mscorlib.DNObject>); overload;
    procedure Execute(table: DDN.System.Data.DNDataTable); overload;
    procedure ExecuteADO(recordset: DDN.mscorlib.DNObject);
    procedure Execute(dataReader: DDN.System.Data.DNIDataReader); overload;
    procedure Execute(dataView: DDN.System.Data.DNDataView); overload;
    procedure Execute(row: DDN.System.Data.DNDataRow); overload;
    procedure ExecuteWithRegions(dataSource: DNIMailMergeDataSource); overload;
    procedure ExecuteWithRegions(dataSourceRoot: DNIMailMergeDataSourceRoot); overload;
    procedure ExecuteWithRegions(dataSet: DDN.System.Data.DNDataSet); overload;
    procedure ExecuteWithRegions(dataTable: DDN.System.Data.DNDataTable); overload;
    procedure ExecuteWithRegionsADO(recordset: DDN.mscorlib.DNObject; tableName: string);
    procedure ExecuteWithRegions(dataView: DDN.System.Data.DNDataView); overload;
    procedure ExecuteWithRegions(dataReader: DDN.System.Data.DNIDataReader; tableName: string); overload;
    function GetFieldNames: TArray<string>;
    function GetFieldNamesForRegion(regionName: string): TArray<string>; overload;
    function GetFieldNamesForRegion(regionName: string; regionIndex: Int32): TArray<string>; overload;
    function GetRegionsByName(regionName: string): DDN.mscorlib.DNIList<DNMailMergeRegionInfo>;
    function GetRegionsHierarchy: DNMailMergeRegionInfo;
    procedure DeleteFields;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property RegionStartTag: string read get_RegionStartTag write set_RegionStartTag;
    property RegionEndTag: string read get_RegionEndTag write set_RegionEndTag;
    property CleanupOptions: DNMailMergeCleanupOptions read get_CleanupOptions write set_CleanupOptions;
    property CleanupParagraphsWithPunctuationMarks: Boolean read get_CleanupParagraphsWithPunctuationMarks write set_CleanupParagraphsWithPunctuationMarks;
    property UseNonMergeFields: Boolean read get_UseNonMergeFields write set_UseNonMergeFields;
    property PreserveUnusedTags: Boolean read get_PreserveUnusedTags write set_PreserveUnusedTags;
    property MergeDuplicateRegions: Boolean read get_MergeDuplicateRegions write set_MergeDuplicateRegions;
    property MergeWholeDocument: Boolean read get_MergeWholeDocument write set_MergeWholeDocument;
    property UseWholeParagraphAsRegion: Boolean read get_UseWholeParagraphAsRegion write set_UseWholeParagraphAsRegion;
    property RestartListsAtEachSection: Boolean read get_RestartListsAtEachSection write set_RestartListsAtEachSection;
    property MappedDataFields: DNMappedDataFieldCollection read get_MappedDataFields;
    property FieldMergingCallback: DNIFieldMergingCallback read get_FieldMergingCallback write set_FieldMergingCallback;
    property MailMergeCallback: DNIMailMergeCallback read get_MailMergeCallback write set_MailMergeCallback;
    property TrimWhitespaces: Boolean read get_TrimWhitespaces write set_TrimWhitespaces;
    property UnconditionalMergeFieldsAndRegions: Boolean read get_UnconditionalMergeFieldsAndRegions write set_UnconditionalMergeFieldsAndRegions;
    property RetainFirstSectionStart: Boolean read get_RetainFirstSectionStart write set_RetainFirstSectionStart;
  end;

  TDNMailMerge = class(TDNGenericImport<DNMailMergeClass, DNMailMerge>) end;

  //-------------namespace: Aspose.Words.MailMerging----------------
  DNMailMergeRegionInfoClass = interface(DDN.mscorlib.DNObjectClass)
  ['{B70F5A91-9B16-5F5A-B81E-4AC8780EE6C6}']
  end;

  [DNTypeName('Aspose.Words.MailMerging.MailMergeRegionInfo')]
  DNMailMergeRegionInfo = interface(DDN.mscorlib.DNObject)
  ['{F3B33259-4459-38A9-8863-2F009D80C30F}']
  { getters & setters } 

    function get_Regions: DDN.mscorlib.DNIList<DNMailMergeRegionInfo>;
    function get_Fields: DDN.mscorlib.DNIList<DNField>;
    function get_Name: string;
    function get_StartField: DNFieldMergeField;
    function get_EndField: DNFieldMergeField;
    function get_Level: Int32;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Regions: DDN.mscorlib.DNIList<DNMailMergeRegionInfo> read get_Regions;
    property Fields: DDN.mscorlib.DNIList<DNField> read get_Fields;
    property Name: string read get_Name;
    property StartField: DNFieldMergeField read get_StartField;
    property EndField: DNFieldMergeField read get_EndField;
    property Level: Int32 read get_Level;
  end;

  TDNMailMergeRegionInfo = class(TDNGenericImport<DNMailMergeRegionInfoClass, DNMailMergeRegionInfo>) end;

  //-------------namespace: Aspose.Words.MailMerging----------------
  DNMappedDataFieldCollectionClass = interface(DNObjectClass)
  ['{6BC4DA64-CE78-53D3-B431-B80C08AB9424}']
  end;

  [DNTypeName('Aspose.Words.MailMerging.MappedDataFieldCollection')]
  DNMappedDataFieldCollection = interface(DDN.mscorlib.DNIEnumerable)
  ['{DC088113-D127-341F-9E9A-E1A0CFFD5928}']
  { getters & setters } 

    function get_Count: Int32;
    function get_Item(documentFieldName: string): string;
    procedure set_Item(documentFieldName: string; value: string);

  { methods } 

    function GetEnumerator: DDN.mscorlib.DNIEnumerator<DDN.mscorlib.DNKeyValuePair<string, string>>;
    procedure Add(documentFieldName: string; dataSourceFieldName: string);
    function ContainsKey(documentFieldName: string): Boolean;
    function ContainsValue(dataSourceFieldName: string): Boolean;
    procedure Remove(documentFieldName: string);
    procedure Clear;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Count: Int32 read get_Count;
    property Item[documentFieldName: string]: string read get_Item write set_Item; default;
  end;

  TDNMappedDataFieldCollection = class(TDNGenericImport<DNMappedDataFieldCollectionClass, DNMappedDataFieldCollection>) end;

  //-------------namespace: Aspose.Words.Markup----------------
  DNCustomPartClass = interface(DDN.mscorlib.DNObjectClass)
  ['{87E8E09A-4EE1-5525-BE02-C859779413F7}']
  { constructors } 

    {class} function init: DNCustomPart;

  end;

  [DNTypeName('Aspose.Words.Markup.CustomPart')]
  DNCustomPart = interface(DDN.mscorlib.DNObject)
  ['{08A02C95-383F-340B-AD58-CDE47ED57C63}']
  { getters & setters } 

    function get_Name: string;
    procedure set_Name(value: string);
    function get_RelationshipType: string;
    procedure set_RelationshipType(value: string);
    function get_IsExternal: Boolean;
    procedure set_IsExternal(value: Boolean);
    function get_ContentType: string;
    procedure set_ContentType(value: string);
    function get_Data: TArray<Byte>;
    procedure set_Data(value: TArray<Byte>);

  { methods } 

    function Clone: DNCustomPart;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Name: string read get_Name write set_Name;
    property RelationshipType: string read get_RelationshipType write set_RelationshipType;
    property IsExternal: Boolean read get_IsExternal write set_IsExternal;
    property ContentType: string read get_ContentType write set_ContentType;
    property Data: TArray<Byte> read get_Data write set_Data;
  end;

  TDNCustomPart = class(TDNGenericImport<DNCustomPartClass, DNCustomPart>) end;

  //-------------namespace: Aspose.Words.Markup----------------
  DNCustomPartCollectionClass = interface(DNObjectClass)
  ['{4EA16210-BB84-5061-9F01-687D17017252}']
  { constructors } 

    {class} function init: DNCustomPartCollection;

  end;

  [DNTypeName('Aspose.Words.Markup.CustomPartCollection')]
  DNCustomPartCollection = interface(DDN.mscorlib.DNIEnumerable)
  ['{9E601C52-4878-3B04-80AD-C26FEE55B3D6}']
  { getters & setters } 

    function get_Count: Int32;
    function get_Item(index: Int32): DNCustomPart;
    procedure set_Item(index: Int32; value: DNCustomPart);

  { methods } 

    function GetEnumerator: DDN.mscorlib.DNIEnumerator<DNCustomPart>;
    procedure Add(part: DNCustomPart);
    procedure RemoveAt(index: Int32);
    procedure Clear;
    function Clone: DNCustomPartCollection;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Count: Int32 read get_Count;
    property Item[index: Int32]: DNCustomPart read get_Item write set_Item; default;
  end;

  TDNCustomPartCollection = class(TDNGenericImport<DNCustomPartCollectionClass, DNCustomPartCollection>) end;

  //-------------namespace: Aspose.Words.Markup----------------
  DNCustomXmlPartClass = interface(DDN.mscorlib.DNObjectClass)
  ['{D94DF793-5F50-5484-8F46-0498513F697B}']
  { constructors } 

    {class} function init: DNCustomXmlPart;

  end;

  [DNTypeName('Aspose.Words.Markup.CustomXmlPart')]
  DNCustomXmlPart = interface(DDN.mscorlib.DNObject)
  ['{14AFE0EE-0567-3BB0-9939-E76DEB4A72CA}']
  { getters & setters } 

    function get_Id: string;
    procedure set_Id(value: string);
    function get_Schemas: DNCustomXmlSchemaCollection;
    function get_Data: TArray<Byte>;
    procedure set_Data(value: TArray<Byte>);
    function get_DataChecksum: Int64;

  { methods } 

    function Clone: DNCustomXmlPart;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Id: string read get_Id write set_Id;
    property Schemas: DNCustomXmlSchemaCollection read get_Schemas;
    property Data: TArray<Byte> read get_Data write set_Data;
    property DataChecksum: Int64 read get_DataChecksum;
  end;

  TDNCustomXmlPart = class(TDNGenericImport<DNCustomXmlPartClass, DNCustomXmlPart>) end;

  //-------------namespace: Aspose.Words.Markup----------------
  DNCustomXmlPartCollectionClass = interface(DNObjectClass)
  ['{0E444485-AF1F-58C1-B6A2-A4E25BE8A4AE}']
  { constructors } 

    {class} function init: DNCustomXmlPartCollection;

  end;

  [DNTypeName('Aspose.Words.Markup.CustomXmlPartCollection')]
  DNCustomXmlPartCollection = interface(DDN.mscorlib.DNIEnumerable)
  ['{E70D3EC1-D1B5-3315-931D-FAA559C70596}']
  { getters & setters } 

    function get_Count: Int32;
    function get_Item(index: Int32): DNCustomXmlPart;
    procedure set_Item(index: Int32; value: DNCustomXmlPart);

  { methods } 

    function GetEnumerator: DDN.mscorlib.DNIEnumerator<DNCustomXmlPart>;
    procedure Add(part: DNCustomXmlPart); overload;
    function Add(id: string; xml: string): DNCustomXmlPart; overload;
    procedure RemoveAt(index: Int32);
    procedure Clear;
    function GetById(id: string): DNCustomXmlPart;
    function Clone: DNCustomXmlPartCollection;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Count: Int32 read get_Count;
    property Item[index: Int32]: DNCustomXmlPart read get_Item write set_Item; default;
  end;

  TDNCustomXmlPartCollection = class(TDNGenericImport<DNCustomXmlPartCollectionClass, DNCustomXmlPartCollection>) end;

  //-------------namespace: Aspose.Words.Markup----------------
  DNCustomXmlPropertyClass = interface(DDN.mscorlib.DNObjectClass)
  ['{133ACAE9-835A-51A0-831E-7C97C74016C1}']
  { constructors } 

    {class} function init(name: string; uri: string; value: string): DNCustomXmlProperty;

  end;

  [DNTypeName('Aspose.Words.Markup.CustomXmlProperty')]
  DNCustomXmlProperty = interface(DDN.mscorlib.DNObject)
  ['{8B82CAC3-860A-3D49-BF97-EE2CB171FA52}']
  { getters & setters } 

    function get_Name: string;
    function get_Uri: string;
    procedure set_Uri(value: string);
    function get_Value: string;
    procedure set_Value(value: string);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Name: string read get_Name;
    property Uri: string read get_Uri write set_Uri;
    property Value: string read get_Value write set_Value;
  end;

  TDNCustomXmlProperty = class(TDNGenericImport<DNCustomXmlPropertyClass, DNCustomXmlProperty>) end;

  //-------------namespace: Aspose.Words.Markup----------------
  DNCustomXmlPropertyCollectionClass = interface(DNObjectClass)
  ['{C977FFCF-EF49-58CE-8B89-EA33AACB7A1B}']
  end;

  [DNTypeName('Aspose.Words.Markup.CustomXmlPropertyCollection')]
  DNCustomXmlPropertyCollection = interface(DDN.mscorlib.DNIEnumerable)
  ['{1AFB79C6-C954-30CB-AB64-210F0FF2C3D2}']
  { getters & setters } 

    function get_Count: Int32;
    function get_Item(name: string): DNCustomXmlProperty; overload;
    function get_Item(index: Int32): DNCustomXmlProperty; overload;

  { methods } 

    function GetEnumerator: DDN.mscorlib.DNIEnumerator<DNCustomXmlProperty>;
    procedure Add(&property: DNCustomXmlProperty);
    function &Contains(name: string): Boolean;
    function IndexOfKey(name: string): Int32;
    procedure Remove(name: string);
    procedure RemoveAt(index: Int32);
    procedure Clear;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Count: Int32 read get_Count;
    property Item[name: string]: DNCustomXmlProperty read get_Item; default;
    property Item[index: Int32]: DNCustomXmlProperty read get_Item; default;
  end;

  TDNCustomXmlPropertyCollection = class(TDNGenericImport<DNCustomXmlPropertyCollectionClass, DNCustomXmlPropertyCollection>) end;

  //-------------namespace: Aspose.Words.Markup----------------
  DNCustomXmlSchemaCollectionClass = interface(DDN.mscorlib.DNObjectClass)
  ['{283DB25B-A3BC-52C9-B90A-DFF4ABD21761}']
  end;

  [DNTypeName('Aspose.Words.Markup.CustomXmlSchemaCollection')]
  DNCustomXmlSchemaCollection = interface(DDN.mscorlib.DNObject)
  ['{5BD9D4EB-77CD-3EEE-AEA5-B6AC0EF495B0}']
  { getters & setters } 

    function get_Count: Int32;
    function get_Item(index: Int32): string;
    procedure set_Item(index: Int32; value: string);

  { methods } 

    function GetEnumerator: DDN.mscorlib.DNIEnumerator<string>;
    procedure Add(value: string);
    function IndexOf(value: string): Int32;
    procedure Remove(name: string);
    procedure RemoveAt(index: Int32);
    procedure Clear;
    function Clone: DNCustomXmlSchemaCollection;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Count: Int32 read get_Count;
    property Item[index: Int32]: string read get_Item write set_Item; default;
  end;

  TDNCustomXmlSchemaCollection = class(TDNGenericImport<DNCustomXmlSchemaCollectionClass, DNCustomXmlSchemaCollection>) end;

  //-------------namespace: Aspose.Words.Markup----------------
  DNSdtListItemClass = interface(DDN.mscorlib.DNObjectClass)
  ['{D7BB0759-2D94-5985-A118-5C7658978A39}']
  { constructors } 

    {class} function init(displayText: string; value: string): DNSdtListItem; overload;
    {class} function init(value: string): DNSdtListItem; overload;

  end;

  [DNTypeName('Aspose.Words.Markup.SdtListItem')]
  DNSdtListItem = interface(DDN.mscorlib.DNObject)
  ['{1A3357CD-DC48-3483-902A-99E46B735644}']
  { getters & setters } 

    function get_DisplayText: string;
    function get_Value: string;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property DisplayText: string read get_DisplayText;
    property Value: string read get_Value;
  end;

  TDNSdtListItem = class(TDNGenericImport<DNSdtListItemClass, DNSdtListItem>) end;

  //-------------namespace: Aspose.Words.Markup----------------
  DNSdtListItemCollectionClass = interface(DNObjectClass)
  ['{AB41A8FA-2453-56FF-B0A6-3176B98E84BE}']
  end;

  [DNTypeName('Aspose.Words.Markup.SdtListItemCollection')]
  DNSdtListItemCollection = interface(DDN.mscorlib.DNIEnumerable)
  ['{5F1C7879-05AC-3C1A-B8E3-0100F304F587}']
  { getters & setters } 

    function get_SelectedValue: DNSdtListItem;
    procedure set_SelectedValue(value: DNSdtListItem);
    function get_Item(index: Int32): DNSdtListItem;
    function get_Count: Int32;

  { methods } 

    function GetEnumerator: DDN.mscorlib.DNIEnumerator<DNSdtListItem>;
    procedure Add(item: DNSdtListItem);
    procedure RemoveAt(index: Int32);
    procedure Clear;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property SelectedValue: DNSdtListItem read get_SelectedValue write set_SelectedValue;
    property Item[index: Int32]: DNSdtListItem read get_Item; default;
    property Count: Int32 read get_Count;
  end;

  TDNSdtListItemCollection = class(TDNGenericImport<DNSdtListItemCollectionClass, DNSdtListItemCollection>) end;

  //-------------namespace: Aspose.Words.Markup----------------
  DNXmlMappingClass = interface(DDN.mscorlib.DNObjectClass)
  ['{C606C29E-5D16-52BE-B11D-AC588E7722DC}']
  end;

  [DNTypeName('Aspose.Words.Markup.XmlMapping')]
  DNXmlMapping = interface(DDN.mscorlib.DNObject)
  ['{35E2EF04-B042-337D-BEFD-F724D74C8CF9}']
  { getters & setters } 

    function get_PrefixMappings: string;
    function get_XPath: string;
    function get_CustomXmlPart: DNCustomXmlPart;
    function get_IsMapped: Boolean;
    function get_StoreItemId: string;

  { methods } 

    function SetMapping(customXmlPart: DNCustomXmlPart; xPath: string; prefixMapping: string): Boolean;
    procedure Delete;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property PrefixMappings: string read get_PrefixMappings;
    property XPath: string read get_XPath;
    property CustomXmlPart: DNCustomXmlPart read get_CustomXmlPart;
    property IsMapped: Boolean read get_IsMapped;
    property StoreItemId: string read get_StoreItemId;
  end;

  TDNXmlMapping = class(TDNGenericImport<DNXmlMappingClass, DNXmlMapping>) end;

  //-------------namespace: Aspose.Words----------------
  DNMeteredClass = interface(DDN.mscorlib.DNObjectClass)
  ['{EEB973C2-BC04-5CE6-96F4-9A7C1D760E2D}']
  { constructors } 

    {class} function init: DNMetered;

  { static methods } 

    {class} function GetConsumptionQuantity: DDN.mscorlib.DNDecimal;
    {class} function GetConsumptionCredit: DDN.mscorlib.DNDecimal;

  end;

  [DNTypeName('Aspose.Words.Metered')]
  DNMetered = interface(DDN.mscorlib.DNObject)
  ['{2BFC2C85-8174-3E26-9E59-FF7624CBF96B}']
  { methods } 

    procedure SetMeteredKey(publicKey: string; privateKey: string);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNMetered = class(TDNGenericImport<DNMeteredClass, DNMetered>) end;

  //-------------namespace: Aspose.Words----------------
  DNNodeClass = interface(DDN.mscorlib.DNObjectClass)
  ['{C477094C-A317-59E9-9218-DF9A214224E3}']
  { static methods } 

    {class} function NodeTypeToString(nodeType: DNNodeType): string;

  end;

  [DNTypeName('Aspose.Words.Node')]
  DNNode = interface(DDN.mscorlib.DNObject)
  ['{A14CC93F-167B-361D-9F27-268FE8F75577}']
  { getters & setters } 

    function get_NodeType: DNNodeType;
    function get_ParentNode: DNCompositeNode;
    function get_Document: DNDocumentBase;
    function get_PreviousSibling: DNNode;
    function get_NextSibling: DNNode;
    function get_IsComposite: Boolean;
    function get_Range: DNRange;
    function get_CustomNodeId: Int32;
    procedure set_CustomNodeId(value: Int32);

  { methods } 

    function Clone(isCloneChildren: Boolean): DNNode;
    function Accept(visitor: DNDocumentVisitor): Boolean;
    function GetText: string;
    function GetAncestor(ancestorType: DDN.mscorlib.DNType): DNCompositeNode; overload;
    function GetAncestor(ancestorType: DNNodeType): DNCompositeNode; overload;
    procedure Remove;
    function NextPreOrder(rootNode: DNNode): DNNode;
    function PreviousPreOrder(rootNode: DNNode): DNNode;
    function ToString(saveFormat: DNSaveFormat): string; overload;
    function ToString(saveOptions: DNSaveOptions): string; overload;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string; overload;

  { propertys } 

    property NodeType: DNNodeType read get_NodeType;
    property ParentNode: DNCompositeNode read get_ParentNode;
    property Document: DNDocumentBase read get_Document;
    property PreviousSibling: DNNode read get_PreviousSibling;
    property NextSibling: DNNode read get_NextSibling;
    property IsComposite: Boolean read get_IsComposite;
    property Range: DNRange read get_Range;
    property CustomNodeId: Int32 read get_CustomNodeId write set_CustomNodeId;
  end;

  TDNNode = class(TDNGenericImport<DNNodeClass, DNNode>) end;

  //-------------namespace: Aspose.Words----------------
  DNBookmarkEndClass = interface(DNNodeClass)
  ['{58720A46-8F3E-5C1D-A5B5-CE50515848A5}']
  { constructors } 

    {class} function init(doc: DNDocumentBase; name: string): DNBookmarkEnd;

  end;

  [DNTypeName('Aspose.Words.BookmarkEnd')]
  DNBookmarkEnd = interface(DNNode)
  ['{B83EFD09-0CF3-361E-B837-CE2812593C0B}']
  { getters & setters } 

    function get_NodeType: DNNodeType;
    function get_Name: string;
    procedure set_Name(value: string);
    function get_ParentNode: DNCompositeNode;
    function get_Document: DNDocumentBase;
    function get_PreviousSibling: DNNode;
    function get_NextSibling: DNNode;
    function get_IsComposite: Boolean;
    function get_Range: DNRange;
    function get_CustomNodeId: Int32;
    procedure set_CustomNodeId(value: Int32);

  { methods } 

    function Accept(visitor: DNDocumentVisitor): Boolean;
    function Clone(isCloneChildren: Boolean): DNNode;
    function GetText: string;
    function GetAncestor(ancestorType: DDN.mscorlib.DNType): DNCompositeNode; overload;
    function GetAncestor(ancestorType: DNNodeType): DNCompositeNode; overload;
    procedure Remove;
    function NextPreOrder(rootNode: DNNode): DNNode;
    function PreviousPreOrder(rootNode: DNNode): DNNode;
    function ToString(saveFormat: DNSaveFormat): string; overload;
    function ToString(saveOptions: DNSaveOptions): string; overload;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string; overload;

  { propertys } 

    property NodeType: DNNodeType read get_NodeType;
    property Name: string read get_Name write set_Name;
    property ParentNode: DNCompositeNode read get_ParentNode;
    property Document: DNDocumentBase read get_Document;
    property PreviousSibling: DNNode read get_PreviousSibling;
    property NextSibling: DNNode read get_NextSibling;
    property IsComposite: Boolean read get_IsComposite;
    property Range: DNRange read get_Range;
    property CustomNodeId: Int32 read get_CustomNodeId write set_CustomNodeId;
  end;

  TDNBookmarkEnd = class(TDNGenericImport<DNBookmarkEndClass, DNBookmarkEnd>) end;

  //-------------namespace: Aspose.Words----------------
  DNBookmarkStartClass = interface(DNNodeClass)
  ['{7430C894-3609-5D33-BA21-71E71F601872}']
  { constructors } 

    {class} function init(doc: DNDocumentBase; name: string): DNBookmarkStart;

  end;

  [DNTypeName('Aspose.Words.BookmarkStart')]
  DNBookmarkStart = interface(DNNode)
  ['{E7E2D9BE-5B02-3C88-AC5F-008BBB3F9F4D}']
  { getters & setters } 

    function get_NodeType: DNNodeType;
    function get_Bookmark: DNBookmark;
    function get_Name: string;
    procedure set_Name(value: string);
    function get_ParentNode: DNCompositeNode;
    function get_Document: DNDocumentBase;
    function get_PreviousSibling: DNNode;
    function get_NextSibling: DNNode;
    function get_IsComposite: Boolean;
    function get_Range: DNRange;
    function get_CustomNodeId: Int32;
    procedure set_CustomNodeId(value: Int32);

  { methods } 

    function Accept(visitor: DNDocumentVisitor): Boolean;
    function GetText: string;
    function Clone(isCloneChildren: Boolean): DNNode;
    function GetAncestor(ancestorType: DDN.mscorlib.DNType): DNCompositeNode; overload;
    function GetAncestor(ancestorType: DNNodeType): DNCompositeNode; overload;
    procedure Remove;
    function NextPreOrder(rootNode: DNNode): DNNode;
    function PreviousPreOrder(rootNode: DNNode): DNNode;
    function ToString(saveFormat: DNSaveFormat): string; overload;
    function ToString(saveOptions: DNSaveOptions): string; overload;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string; overload;

  { propertys } 

    property NodeType: DNNodeType read get_NodeType;
    property Bookmark: DNBookmark read get_Bookmark;
    property Name: string read get_Name write set_Name;
    property ParentNode: DNCompositeNode read get_ParentNode;
    property Document: DNDocumentBase read get_Document;
    property PreviousSibling: DNNode read get_PreviousSibling;
    property NextSibling: DNNode read get_NextSibling;
    property IsComposite: Boolean read get_IsComposite;
    property Range: DNRange read get_Range;
    property CustomNodeId: Int32 read get_CustomNodeId write set_CustomNodeId;
  end;

  TDNBookmarkStart = class(TDNGenericImport<DNBookmarkStartClass, DNBookmarkStart>) end;

  //-------------namespace: Aspose.Words----------------
  DNCommentRangeEndClass = interface(DNNodeClass)
  ['{FC3FDA86-BAB0-51E3-BB1D-1DDDAE5CC2EF}']
  { constructors } 

    {class} function init(doc: DNDocumentBase; id: Int32): DNCommentRangeEnd;

  end;

  [DNTypeName('Aspose.Words.CommentRangeEnd')]
  DNCommentRangeEnd = interface(DNNode)
  ['{EEBF26B1-962E-371F-A537-0560A2DB3A90}']
  { getters & setters } 

    function get_Id: Int32;
    procedure set_Id(value: Int32);
    function get_NodeType: DNNodeType;
    function get_ParentNode: DNCompositeNode;
    function get_Document: DNDocumentBase;
    function get_PreviousSibling: DNNode;
    function get_NextSibling: DNNode;
    function get_IsComposite: Boolean;
    function get_Range: DNRange;
    function get_CustomNodeId: Int32;
    procedure set_CustomNodeId(value: Int32);

  { methods } 

    function Accept(visitor: DNDocumentVisitor): Boolean;
    function Clone(isCloneChildren: Boolean): DNNode;
    function GetText: string;
    function GetAncestor(ancestorType: DDN.mscorlib.DNType): DNCompositeNode; overload;
    function GetAncestor(ancestorType: DNNodeType): DNCompositeNode; overload;
    procedure Remove;
    function NextPreOrder(rootNode: DNNode): DNNode;
    function PreviousPreOrder(rootNode: DNNode): DNNode;
    function ToString(saveFormat: DNSaveFormat): string; overload;
    function ToString(saveOptions: DNSaveOptions): string; overload;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string; overload;

  { propertys } 

    property Id: Int32 read get_Id write set_Id;
    property NodeType: DNNodeType read get_NodeType;
    property ParentNode: DNCompositeNode read get_ParentNode;
    property Document: DNDocumentBase read get_Document;
    property PreviousSibling: DNNode read get_PreviousSibling;
    property NextSibling: DNNode read get_NextSibling;
    property IsComposite: Boolean read get_IsComposite;
    property Range: DNRange read get_Range;
    property CustomNodeId: Int32 read get_CustomNodeId write set_CustomNodeId;
  end;

  TDNCommentRangeEnd = class(TDNGenericImport<DNCommentRangeEndClass, DNCommentRangeEnd>) end;

  //-------------namespace: Aspose.Words----------------
  DNCommentRangeStartClass = interface(DNNodeClass)
  ['{97002D44-D496-5587-807B-C5C24C89FA9D}']
  { constructors } 

    {class} function init(doc: DNDocumentBase; id: Int32): DNCommentRangeStart;

  end;

  [DNTypeName('Aspose.Words.CommentRangeStart')]
  DNCommentRangeStart = interface(DNNode)
  ['{94C19A42-FD39-3069-A6EA-0E5C5819DB91}']
  { getters & setters } 

    function get_Id: Int32;
    procedure set_Id(value: Int32);
    function get_NodeType: DNNodeType;
    function get_ParentNode: DNCompositeNode;
    function get_Document: DNDocumentBase;
    function get_PreviousSibling: DNNode;
    function get_NextSibling: DNNode;
    function get_IsComposite: Boolean;
    function get_Range: DNRange;
    function get_CustomNodeId: Int32;
    procedure set_CustomNodeId(value: Int32);

  { methods } 

    function Accept(visitor: DNDocumentVisitor): Boolean;
    function Clone(isCloneChildren: Boolean): DNNode;
    function GetText: string;
    function GetAncestor(ancestorType: DDN.mscorlib.DNType): DNCompositeNode; overload;
    function GetAncestor(ancestorType: DNNodeType): DNCompositeNode; overload;
    procedure Remove;
    function NextPreOrder(rootNode: DNNode): DNNode;
    function PreviousPreOrder(rootNode: DNNode): DNNode;
    function ToString(saveFormat: DNSaveFormat): string; overload;
    function ToString(saveOptions: DNSaveOptions): string; overload;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string; overload;

  { propertys } 

    property Id: Int32 read get_Id write set_Id;
    property NodeType: DNNodeType read get_NodeType;
    property ParentNode: DNCompositeNode read get_ParentNode;
    property Document: DNDocumentBase read get_Document;
    property PreviousSibling: DNNode read get_PreviousSibling;
    property NextSibling: DNNode read get_NextSibling;
    property IsComposite: Boolean read get_IsComposite;
    property Range: DNRange read get_Range;
    property CustomNodeId: Int32 read get_CustomNodeId write set_CustomNodeId;
  end;

  TDNCommentRangeStart = class(TDNGenericImport<DNCommentRangeStartClass, DNCommentRangeStart>) end;

  //-------------namespace: Aspose.Words----------------
  DNCompositeNodeClass = interface(DNNodeClass)
  ['{8818376B-D2B7-5586-9B58-EBB6D1872177}']
  end;

  [DNTypeName('Aspose.Words.CompositeNode')]
  DNCompositeNode = interface(DNNode)
  ['{91ED26EF-F4AF-3C93-BD5B-0B6CE222B99C}']
  { getters & setters } 

    function get_IsComposite: Boolean;
    function get_HasChildNodes: Boolean;
    function get_ChildNodes: DNNodeCollection;
    function get_FirstChild: DNNode;
    function get_LastChild: DNNode;
    function get_Count: Int32;
    function get_NodeType: DNNodeType;
    function get_ParentNode: DNCompositeNode;
    function get_Document: DNDocumentBase;
    function get_PreviousSibling: DNNode;
    function get_NextSibling: DNNode;
    function get_Range: DNRange;
    function get_CustomNodeId: Int32;
    procedure set_CustomNodeId(value: Int32);

  { methods } 

    function GetText: string;
    function GetChildNodes(nodeType: DNNodeType; isDeep: Boolean): DNNodeCollection;
    function GetChild(nodeType: DNNodeType; index: Int32; isDeep: Boolean): DNNode;
    function SelectNodes(xpath: string): DNNodeList;
    function SelectSingleNode(xpath: string): DNNode;
    function GetEnumerator: DDN.mscorlib.DNIEnumerator<DNNode>;
    function AppendChild(newChild: DNNode): DNNode;
    function PrependChild(newChild: DNNode): DNNode;
    function InsertAfter(newChild: DNNode; refChild: DNNode): DNNode;
    function InsertBefore(newChild: DNNode; refChild: DNNode): DNNode;
    function RemoveChild(oldChild: DNNode): DNNode;
    procedure RemoveAllChildren;
    procedure RemoveSmartTags;
    function IndexOf(child: DNNode): Int32;
    function CreateNavigator: DDN.System.Xml.DNXPathNavigator;
    function Clone(isCloneChildren: Boolean): DNNode;
    function Accept(visitor: DNDocumentVisitor): Boolean;
    function GetAncestor(ancestorType: DDN.mscorlib.DNType): DNCompositeNode; overload;
    function GetAncestor(ancestorType: DNNodeType): DNCompositeNode; overload;
    procedure Remove;
    function NextPreOrder(rootNode: DNNode): DNNode;
    function PreviousPreOrder(rootNode: DNNode): DNNode;
    function ToString(saveFormat: DNSaveFormat): string; overload;
    function ToString(saveOptions: DNSaveOptions): string; overload;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string; overload;

  { propertys } 

    property IsComposite: Boolean read get_IsComposite;
    property HasChildNodes: Boolean read get_HasChildNodes;
    property ChildNodes: DNNodeCollection read get_ChildNodes;
    property FirstChild: DNNode read get_FirstChild;
    property LastChild: DNNode read get_LastChild;
    property Count: Int32 read get_Count;
    property NodeType: DNNodeType read get_NodeType;
    property ParentNode: DNCompositeNode read get_ParentNode;
    property Document: DNDocumentBase read get_Document;
    property PreviousSibling: DNNode read get_PreviousSibling;
    property NextSibling: DNNode read get_NextSibling;
    property Range: DNRange read get_Range;
    property CustomNodeId: Int32 read get_CustomNodeId write set_CustomNodeId;
  end;

  TDNCompositeNode = class(TDNGenericImport<DNCompositeNodeClass, DNCompositeNode>) end;

  //-------------namespace: Aspose.Words.BuildingBlocks----------------
  DNBuildingBlockClass = interface(DNCompositeNodeClass)
  ['{CEA70232-F3A2-5243-B4B9-02023C08F417}']
  { constructors } 

    {class} function init(glossaryDoc: DNGlossaryDocument): DNBuildingBlock;

  end;

  [DNTypeName('Aspose.Words.BuildingBlocks.BuildingBlock')]
  DNBuildingBlock = interface(DNCompositeNode)
  ['{6749BD89-1FC2-3187-A48D-BC8C2C2FD211}']
  { getters & setters } 

    function get_NodeType: DNNodeType;
    function get_Sections: DNSectionCollection;
    function get_FirstSection: DNSection;
    function get_LastSection: DNSection;
    function get_Name: string;
    procedure set_Name(value: string);
    function get_Guid: DDN.mscorlib.DNGuid;
    procedure set_Guid(value: DDN.mscorlib.DNGuid);
    function get_Description: string;
    procedure set_Description(value: string);
    function get_Gallery: DNBuildingBlockGallery;
    procedure set_Gallery(value: DNBuildingBlockGallery);
    function get_Category: string;
    procedure set_Category(value: string);
    function get_Behavior: DNBuildingBlockBehavior;
    procedure set_Behavior(value: DNBuildingBlockBehavior);
    function get_Type: DNBuildingBlockType;
    procedure set_Type(value: DNBuildingBlockType);
    function get_IsComposite: Boolean;
    function get_HasChildNodes: Boolean;
    function get_ChildNodes: DNNodeCollection;
    function get_FirstChild: DNNode;
    function get_LastChild: DNNode;
    function get_Count: Int32;
    function get_ParentNode: DNCompositeNode;
    function get_Document: DNDocumentBase;
    function get_PreviousSibling: DNNode;
    function get_NextSibling: DNNode;
    function get_Range: DNRange;
    function get_CustomNodeId: Int32;
    procedure set_CustomNodeId(value: Int32);

  { methods } 

    function Accept(visitor: DNDocumentVisitor): Boolean;
    function GetText: string;
    function GetChildNodes(nodeType: DNNodeType; isDeep: Boolean): DNNodeCollection;
    function GetChild(nodeType: DNNodeType; index: Int32; isDeep: Boolean): DNNode;
    function SelectNodes(xpath: string): DNNodeList;
    function SelectSingleNode(xpath: string): DNNode;
    function GetEnumerator: DDN.mscorlib.DNIEnumerator<DNNode>;
    function AppendChild(newChild: DNNode): DNNode;
    function PrependChild(newChild: DNNode): DNNode;
    function InsertAfter(newChild: DNNode; refChild: DNNode): DNNode;
    function InsertBefore(newChild: DNNode; refChild: DNNode): DNNode;
    function RemoveChild(oldChild: DNNode): DNNode;
    procedure RemoveAllChildren;
    procedure RemoveSmartTags;
    function IndexOf(child: DNNode): Int32;
    function CreateNavigator: DDN.System.Xml.DNXPathNavigator;
    function Clone(isCloneChildren: Boolean): DNNode;
    function GetAncestor(ancestorType: DDN.mscorlib.DNType): DNCompositeNode; overload;
    function GetAncestor(ancestorType: DNNodeType): DNCompositeNode; overload;
    procedure Remove;
    function NextPreOrder(rootNode: DNNode): DNNode;
    function PreviousPreOrder(rootNode: DNNode): DNNode;
    function ToString(saveFormat: DNSaveFormat): string; overload;
    function ToString(saveOptions: DNSaveOptions): string; overload;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string; overload;

  { propertys } 

    property NodeType: DNNodeType read get_NodeType;
    property Sections: DNSectionCollection read get_Sections;
    property FirstSection: DNSection read get_FirstSection;
    property LastSection: DNSection read get_LastSection;
    property Name: string read get_Name write set_Name;
    property Guid: DDN.mscorlib.DNGuid read get_Guid write set_Guid;
    property Description: string read get_Description write set_Description;
    property Gallery: DNBuildingBlockGallery read get_Gallery write set_Gallery;
    property Category: string read get_Category write set_Category;
    property Behavior: DNBuildingBlockBehavior read get_Behavior write set_Behavior;
    property &Type: DNBuildingBlockType read get_Type write set_Type;
    property IsComposite: Boolean read get_IsComposite;
    property HasChildNodes: Boolean read get_HasChildNodes;
    property ChildNodes: DNNodeCollection read get_ChildNodes;
    property FirstChild: DNNode read get_FirstChild;
    property LastChild: DNNode read get_LastChild;
    property Count: Int32 read get_Count;
    property ParentNode: DNCompositeNode read get_ParentNode;
    property Document: DNDocumentBase read get_Document;
    property PreviousSibling: DNNode read get_PreviousSibling;
    property NextSibling: DNNode read get_NextSibling;
    property Range: DNRange read get_Range;
    property CustomNodeId: Int32 read get_CustomNodeId write set_CustomNodeId;
  end;

  TDNBuildingBlock = class(TDNGenericImport<DNBuildingBlockClass, DNBuildingBlock>) end;

  //-------------namespace: Aspose.Words----------------
  DNDocumentBaseClass = interface(DNCompositeNodeClass)
  ['{55AE2CCC-7B3E-5819-8D03-16FC17FCCB90}']
  end;

  [DNTypeName('Aspose.Words.DocumentBase')]
  DNDocumentBase = interface(DNCompositeNode)
  ['{4D033E52-2538-3A3B-8BC8-EC7EA3457932}']
  { getters & setters } 

    function get_Document: DNDocumentBase;
    function get_NodeChangingCallback: DNINodeChangingCallback;
    procedure set_NodeChangingCallback(value: DNINodeChangingCallback);
    function get_ResourceLoadingCallback: DNIResourceLoadingCallback;
    procedure set_ResourceLoadingCallback(value: DNIResourceLoadingCallback);
    function get_FontInfos: DNFontInfoCollection;
    function get_Styles: DNStyleCollection;
    function get_Lists: DNListCollection;
    function get_WarningCallback: DNIWarningCallback;
    procedure set_WarningCallback(value: DNIWarningCallback);
    function get_BackgroundShape: DNShape;
    procedure set_BackgroundShape(value: DNShape);
    function get_PageColor: DDN.System.Drawing.DNColor;
    procedure set_PageColor(value: DDN.System.Drawing.DNColor);
    function get_IsComposite: Boolean;
    function get_HasChildNodes: Boolean;
    function get_ChildNodes: DNNodeCollection;
    function get_FirstChild: DNNode;
    function get_LastChild: DNNode;
    function get_Count: Int32;
    function get_NodeType: DNNodeType;
    function get_ParentNode: DNCompositeNode;
    function get_PreviousSibling: DNNode;
    function get_NextSibling: DNNode;
    function get_Range: DNRange;
    function get_CustomNodeId: Int32;
    procedure set_CustomNodeId(value: Int32);

  { methods } 

    function ImportNode(srcNode: DNNode; isImportChildren: Boolean): DNNode; overload;
    function ImportNode(srcNode: DNNode; isImportChildren: Boolean; importFormatMode: DNImportFormatMode): DNNode; overload;
    function GetText: string;
    function GetChildNodes(nodeType: DNNodeType; isDeep: Boolean): DNNodeCollection;
    function GetChild(nodeType: DNNodeType; index: Int32; isDeep: Boolean): DNNode;
    function SelectNodes(xpath: string): DNNodeList;
    function SelectSingleNode(xpath: string): DNNode;
    function GetEnumerator: DDN.mscorlib.DNIEnumerator<DNNode>;
    function AppendChild(newChild: DNNode): DNNode;
    function PrependChild(newChild: DNNode): DNNode;
    function InsertAfter(newChild: DNNode; refChild: DNNode): DNNode;
    function InsertBefore(newChild: DNNode; refChild: DNNode): DNNode;
    function RemoveChild(oldChild: DNNode): DNNode;
    procedure RemoveAllChildren;
    procedure RemoveSmartTags;
    function IndexOf(child: DNNode): Int32;
    function CreateNavigator: DDN.System.Xml.DNXPathNavigator;
    function Clone(isCloneChildren: Boolean): DNNode;
    function Accept(visitor: DNDocumentVisitor): Boolean;
    function GetAncestor(ancestorType: DDN.mscorlib.DNType): DNCompositeNode; overload;
    function GetAncestor(ancestorType: DNNodeType): DNCompositeNode; overload;
    procedure Remove;
    function NextPreOrder(rootNode: DNNode): DNNode;
    function PreviousPreOrder(rootNode: DNNode): DNNode;
    function ToString(saveFormat: DNSaveFormat): string; overload;
    function ToString(saveOptions: DNSaveOptions): string; overload;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string; overload;

  { propertys } 

    property Document: DNDocumentBase read get_Document;
    property NodeChangingCallback: DNINodeChangingCallback read get_NodeChangingCallback write set_NodeChangingCallback;
    property ResourceLoadingCallback: DNIResourceLoadingCallback read get_ResourceLoadingCallback write set_ResourceLoadingCallback;
    property FontInfos: DNFontInfoCollection read get_FontInfos;
    property Styles: DNStyleCollection read get_Styles;
    property Lists: DNListCollection read get_Lists;
    property WarningCallback: DNIWarningCallback read get_WarningCallback write set_WarningCallback;
    property BackgroundShape: DNShape read get_BackgroundShape write set_BackgroundShape;
    property PageColor: DDN.System.Drawing.DNColor read get_PageColor write set_PageColor;
    property IsComposite: Boolean read get_IsComposite;
    property HasChildNodes: Boolean read get_HasChildNodes;
    property ChildNodes: DNNodeCollection read get_ChildNodes;
    property FirstChild: DNNode read get_FirstChild;
    property LastChild: DNNode read get_LastChild;
    property Count: Int32 read get_Count;
    property NodeType: DNNodeType read get_NodeType;
    property ParentNode: DNCompositeNode read get_ParentNode;
    property PreviousSibling: DNNode read get_PreviousSibling;
    property NextSibling: DNNode read get_NextSibling;
    property Range: DNRange read get_Range;
    property CustomNodeId: Int32 read get_CustomNodeId write set_CustomNodeId;
  end;

  TDNDocumentBase = class(TDNGenericImport<DNDocumentBaseClass, DNDocumentBase>) end;

  //-------------namespace: Aspose.Words.BuildingBlocks----------------
  DNGlossaryDocumentClass = interface(DNDocumentBaseClass)
  ['{1996884C-5A31-54A7-8EA1-BF5A54F3C8A7}']
  { constructors } 

    {class} function init: DNGlossaryDocument;

  end;

  [DNTypeName('Aspose.Words.BuildingBlocks.GlossaryDocument')]
  DNGlossaryDocument = interface(DNDocumentBase)
  ['{BA3C4B24-F2FB-324B-A1C8-F735A9FA659F}']
  { getters & setters } 

    function get_NodeType: DNNodeType;
    function get_BuildingBlocks: DNBuildingBlockCollection;
    function get_FirstBuildingBlock: DNBuildingBlock;
    function get_LastBuildingBlock: DNBuildingBlock;
    function get_Document: DNDocumentBase;
    function get_NodeChangingCallback: DNINodeChangingCallback;
    procedure set_NodeChangingCallback(value: DNINodeChangingCallback);
    function get_ResourceLoadingCallback: DNIResourceLoadingCallback;
    procedure set_ResourceLoadingCallback(value: DNIResourceLoadingCallback);
    function get_FontInfos: DNFontInfoCollection;
    function get_Styles: DNStyleCollection;
    function get_Lists: DNListCollection;
    function get_WarningCallback: DNIWarningCallback;
    procedure set_WarningCallback(value: DNIWarningCallback);
    function get_BackgroundShape: DNShape;
    procedure set_BackgroundShape(value: DNShape);
    function get_PageColor: DDN.System.Drawing.DNColor;
    procedure set_PageColor(value: DDN.System.Drawing.DNColor);
    function get_IsComposite: Boolean;
    function get_HasChildNodes: Boolean;
    function get_ChildNodes: DNNodeCollection;
    function get_FirstChild: DNNode;
    function get_LastChild: DNNode;
    function get_Count: Int32;
    function get_ParentNode: DNCompositeNode;
    function get_PreviousSibling: DNNode;
    function get_NextSibling: DNNode;
    function get_Range: DNRange;
    function get_CustomNodeId: Int32;
    procedure set_CustomNodeId(value: Int32);

  { methods } 

    function Accept(visitor: DNDocumentVisitor): Boolean;
    function GetBuildingBlock(gallery: DNBuildingBlockGallery; category: string; name: string): DNBuildingBlock;
    function ImportNode(srcNode: DNNode; isImportChildren: Boolean): DNNode; overload;
    function ImportNode(srcNode: DNNode; isImportChildren: Boolean; importFormatMode: DNImportFormatMode): DNNode; overload;
    function GetText: string;
    function GetChildNodes(nodeType: DNNodeType; isDeep: Boolean): DNNodeCollection;
    function GetChild(nodeType: DNNodeType; index: Int32; isDeep: Boolean): DNNode;
    function SelectNodes(xpath: string): DNNodeList;
    function SelectSingleNode(xpath: string): DNNode;
    function GetEnumerator: DDN.mscorlib.DNIEnumerator<DNNode>;
    function AppendChild(newChild: DNNode): DNNode;
    function PrependChild(newChild: DNNode): DNNode;
    function InsertAfter(newChild: DNNode; refChild: DNNode): DNNode;
    function InsertBefore(newChild: DNNode; refChild: DNNode): DNNode;
    function RemoveChild(oldChild: DNNode): DNNode;
    procedure RemoveAllChildren;
    procedure RemoveSmartTags;
    function IndexOf(child: DNNode): Int32;
    function CreateNavigator: DDN.System.Xml.DNXPathNavigator;
    function Clone(isCloneChildren: Boolean): DNNode;
    function GetAncestor(ancestorType: DDN.mscorlib.DNType): DNCompositeNode; overload;
    function GetAncestor(ancestorType: DNNodeType): DNCompositeNode; overload;
    procedure Remove;
    function NextPreOrder(rootNode: DNNode): DNNode;
    function PreviousPreOrder(rootNode: DNNode): DNNode;
    function ToString(saveFormat: DNSaveFormat): string; overload;
    function ToString(saveOptions: DNSaveOptions): string; overload;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string; overload;

  { propertys } 

    property NodeType: DNNodeType read get_NodeType;
    property BuildingBlocks: DNBuildingBlockCollection read get_BuildingBlocks;
    property FirstBuildingBlock: DNBuildingBlock read get_FirstBuildingBlock;
    property LastBuildingBlock: DNBuildingBlock read get_LastBuildingBlock;
    property Document: DNDocumentBase read get_Document;
    property NodeChangingCallback: DNINodeChangingCallback read get_NodeChangingCallback write set_NodeChangingCallback;
    property ResourceLoadingCallback: DNIResourceLoadingCallback read get_ResourceLoadingCallback write set_ResourceLoadingCallback;
    property FontInfos: DNFontInfoCollection read get_FontInfos;
    property Styles: DNStyleCollection read get_Styles;
    property Lists: DNListCollection read get_Lists;
    property WarningCallback: DNIWarningCallback read get_WarningCallback write set_WarningCallback;
    property BackgroundShape: DNShape read get_BackgroundShape write set_BackgroundShape;
    property PageColor: DDN.System.Drawing.DNColor read get_PageColor write set_PageColor;
    property IsComposite: Boolean read get_IsComposite;
    property HasChildNodes: Boolean read get_HasChildNodes;
    property ChildNodes: DNNodeCollection read get_ChildNodes;
    property FirstChild: DNNode read get_FirstChild;
    property LastChild: DNNode read get_LastChild;
    property Count: Int32 read get_Count;
    property ParentNode: DNCompositeNode read get_ParentNode;
    property PreviousSibling: DNNode read get_PreviousSibling;
    property NextSibling: DNNode read get_NextSibling;
    property Range: DNRange read get_Range;
    property CustomNodeId: Int32 read get_CustomNodeId write set_CustomNodeId;
  end;

  TDNGlossaryDocument = class(TDNGenericImport<DNGlossaryDocumentClass, DNGlossaryDocument>) end;

  //-------------namespace: Aspose.Words----------------
  DNDocumentClass = interface(DNDocumentBaseClass)
  ['{79C4FC7E-5144-53DF-AE2B-03F04D506BD6}']
  { constructors } 

    {class} function init: DNDocument; overload;
    {class} function init(fileName: string): DNDocument; overload;
    {class} function init(fileName: string; loadOptions: DNLoadOptions): DNDocument; overload;
    {class} function init(stream: DDN.mscorlib.DNStream): DNDocument; overload;
    {class} function init(stream: DDN.mscorlib.DNStream; loadOptions: DNLoadOptions): DNDocument; overload;

  end;

  [DNTypeName('Aspose.Words.Document')]
  DNDocument = interface(DNDocumentBase)
  ['{43288E36-B94C-3D5D-9C6E-8C8B13CFB216}']
  { getters & setters } 

    function get_AttachedTemplate: string;
    procedure set_AttachedTemplate(value: string);
    function get_AutomaticallyUpdateStyles: Boolean;
    procedure set_AutomaticallyUpdateStyles(value: Boolean);
    function get_ShadeFormData: Boolean;
    procedure set_ShadeFormData(value: Boolean);
    function get_TrackRevisions: Boolean;
    procedure set_TrackRevisions(value: Boolean);
    function get_ShowGrammaticalErrors: Boolean;
    procedure set_ShowGrammaticalErrors(value: Boolean);
    function get_ShowSpellingErrors: Boolean;
    procedure set_ShowSpellingErrors(value: Boolean);
    function get_SpellingChecked: Boolean;
    procedure set_SpellingChecked(value: Boolean);
    function get_GrammarChecked: Boolean;
    procedure set_GrammarChecked(value: Boolean);
    function get_NodeType: DNNodeType;
    function get_BuiltInDocumentProperties: DNBuiltInDocumentProperties;
    function get_WebExtensionTaskPanes: DNTaskPaneCollection;
    function get_CustomDocumentProperties: DNCustomDocumentProperties;
    function get_MailMerge: DNMailMerge;
    function get_ProtectionType: DNProtectionType;
    function get_Sections: DNSectionCollection;
    function get_FirstSection: DNSection;
    function get_LastSection: DNSection;
    function get_ViewOptions: DNViewOptions;
    function get_WriteProtection: DNWriteProtection;
    function get_CompatibilityOptions: DNCompatibilityOptions;
    function get_MailMergeSettings: DNMailMergeSettings;
    procedure set_MailMergeSettings(value: DNMailMergeSettings);
    function get_HyphenationOptions: DNHyphenationOptions;
    function get_HasRevisions: Boolean;
    function get_HasMacros: Boolean;
    function get_Watermark: DNWatermark;
    function get_VersionsCount: Int32;
    function get_DefaultTabStop: Double;
    procedure set_DefaultTabStop(value: Double);
    function get_Theme: DNTheme;
    function get_CustomXmlParts: DNCustomXmlPartCollection;
    procedure set_CustomXmlParts(value: DNCustomXmlPartCollection);
    function get_PackageCustomParts: DNCustomPartCollection;
    procedure set_PackageCustomParts(value: DNCustomPartCollection);
    function get_Variables: DNVariableCollection;
    function get_GlossaryDocument: DNGlossaryDocument;
    procedure set_GlossaryDocument(value: DNGlossaryDocument);
    function get_OriginalFileName: string;
    function get_OriginalLoadFormat: DNLoadFormat;
    function get_Compliance: DNOoxmlCompliance;
    function get_DigitalSignatures: DNDigitalSignatureCollection;
    function get_FontSettings: DNFontSettings;
    procedure set_FontSettings(value: DNFontSettings);
    function get_PageCount: Int32;
    function get_Revisions: DNRevisionCollection;
    function get_LayoutOptions: DNLayoutOptions;
    function get_RevisionsView: DNRevisionsView;
    procedure set_RevisionsView(value: DNRevisionsView);
    function get_FootnoteOptions: DNFootnoteOptions;
    function get_EndnoteOptions: DNEndnoteOptions;
    function get_FieldOptions: DNFieldOptions;
    function get_RemovePersonalInformation: Boolean;
    procedure set_RemovePersonalInformation(value: Boolean);
    function get_VbaProject: DNVbaProject;
    procedure set_VbaProject(value: DNVbaProject);
    function get_Document: DNDocumentBase;
    function get_NodeChangingCallback: DNINodeChangingCallback;
    procedure set_NodeChangingCallback(value: DNINodeChangingCallback);
    function get_ResourceLoadingCallback: DNIResourceLoadingCallback;
    procedure set_ResourceLoadingCallback(value: DNIResourceLoadingCallback);
    function get_FontInfos: DNFontInfoCollection;
    function get_Styles: DNStyleCollection;
    function get_Lists: DNListCollection;
    function get_WarningCallback: DNIWarningCallback;
    procedure set_WarningCallback(value: DNIWarningCallback);
    function get_BackgroundShape: DNShape;
    procedure set_BackgroundShape(value: DNShape);
    function get_PageColor: DDN.System.Drawing.DNColor;
    procedure set_PageColor(value: DDN.System.Drawing.DNColor);
    function get_IsComposite: Boolean;
    function get_HasChildNodes: Boolean;
    function get_ChildNodes: DNNodeCollection;
    function get_FirstChild: DNNode;
    function get_LastChild: DNNode;
    function get_Count: Int32;
    function get_ParentNode: DNCompositeNode;
    function get_PreviousSibling: DNNode;
    function get_NextSibling: DNNode;
    function get_Range: DNRange;
    function get_CustomNodeId: Int32;
    procedure set_CustomNodeId(value: Int32);

  { methods } 

    procedure CopyStylesFromTemplate(template: DNDocument); overload;
    procedure UpdatePageLayout;
    function RenderToScale(pageIndex: Int32; graphics: DDN.System.Drawing.DNGraphics; x: Single; y: Single; scale: Single): DDN.System.Drawing.DNSizeF;
    function RenderToSize(pageIndex: Int32; graphics: DDN.System.Drawing.DNGraphics; x: Single; y: Single; width: Single; height: Single): Single;
    function GetPageInfo(pageIndex: Int32): DNPageInfo;
    procedure Print; overload;
    procedure Print(printerName: string); overload;
    procedure Print(printerSettings: DDN.System.Drawing.DNPrinterSettings); overload;
    procedure Print(printerSettings: DDN.System.Drawing.DNPrinterSettings; documentName: string); overload;
    procedure UpdateThumbnail(options: DNThumbnailGeneratingOptions); overload;
    procedure UpdateThumbnail; overload;
    function ExtractPages(index: Int32; count: Int32): DNDocument;
    function Clone: DNDocument; overload;
    function Accept(visitor: DNDocumentVisitor): Boolean;
    procedure AppendDocument(srcDoc: DNDocument; importFormatMode: DNImportFormatMode); overload;
    procedure AppendDocument(srcDoc: DNDocument; importFormatMode: DNImportFormatMode; importFormatOptions: DNImportFormatOptions); overload;
    function Save(fileName: string): DNSaveOutputParameters; overload;
    function Save(fileName: string; saveFormat: DNSaveFormat): DNSaveOutputParameters; overload;
    function Save(fileName: string; saveOptions: DNSaveOptions): DNSaveOutputParameters; overload;
    function Save(stream: DDN.mscorlib.DNStream; saveFormat: DNSaveFormat): DNSaveOutputParameters; overload;
    function Save(stream: DDN.mscorlib.DNStream; saveOptions: DNSaveOptions): DNSaveOutputParameters; overload;
    function Save(response: DDN.System.Web.DNHttpResponse; fileName: string; contentDisposition: DNContentDisposition; saveOptions: DNSaveOptions): DNSaveOutputParameters; overload;
    procedure EnsureMinimum;
    procedure AcceptAllRevisions;
    procedure Protect(&type: DNProtectionType); overload;
    procedure Protect(&type: DNProtectionType; password: string); overload;
    procedure Unprotect; overload;
    function Unprotect(password: string): Boolean; overload;
    procedure UpdateWordCount; overload;
    procedure UpdateWordCount(updateLinesCount: Boolean); overload;
    procedure UpdateTableLayout;
    procedure UpdateListLabels;
    procedure RemoveMacros;
    procedure UpdateFields;
    procedure UnlinkFields;
    procedure NormalizeFieldTypes;
    function JoinRunsWithSameFormatting: Int32;
    procedure ExpandTableStylesToDirectFormatting;
    procedure Cleanup; overload;
    procedure Cleanup(options: DNCleanupOptions); overload;
    procedure RemoveExternalSchemaReferences;
    procedure StartTrackRevisions(author: string; dateTime: DDN.mscorlib.DNDateTime); overload;
    procedure StartTrackRevisions(author: string); overload;
    procedure StopTrackRevisions;
    procedure Compare(document: DNDocument; author: string; dateTime: DDN.mscorlib.DNDateTime); overload;
    procedure Compare(document: DNDocument; author: string; dateTime: DDN.mscorlib.DNDateTime; options: DNCompareOptions); overload;
    procedure CopyStylesFromTemplate(template: string); overload;
    function ImportNode(srcNode: DNNode; isImportChildren: Boolean): DNNode; overload;
    function ImportNode(srcNode: DNNode; isImportChildren: Boolean; importFormatMode: DNImportFormatMode): DNNode; overload;
    function GetText: string;
    function GetChildNodes(nodeType: DNNodeType; isDeep: Boolean): DNNodeCollection;
    function GetChild(nodeType: DNNodeType; index: Int32; isDeep: Boolean): DNNode;
    function SelectNodes(xpath: string): DNNodeList;
    function SelectSingleNode(xpath: string): DNNode;
    function GetEnumerator: DDN.mscorlib.DNIEnumerator<DNNode>;
    function AppendChild(newChild: DNNode): DNNode;
    function PrependChild(newChild: DNNode): DNNode;
    function InsertAfter(newChild: DNNode; refChild: DNNode): DNNode;
    function InsertBefore(newChild: DNNode; refChild: DNNode): DNNode;
    function RemoveChild(oldChild: DNNode): DNNode;
    procedure RemoveAllChildren;
    procedure RemoveSmartTags;
    function IndexOf(child: DNNode): Int32;
    function CreateNavigator: DDN.System.Xml.DNXPathNavigator;
    function Clone(isCloneChildren: Boolean): DNNode; overload;
    function GetAncestor(ancestorType: DDN.mscorlib.DNType): DNCompositeNode; overload;
    function GetAncestor(ancestorType: DNNodeType): DNCompositeNode; overload;
    procedure Remove;
    function NextPreOrder(rootNode: DNNode): DNNode;
    function PreviousPreOrder(rootNode: DNNode): DNNode;
    function ToString(saveFormat: DNSaveFormat): string; overload;
    function ToString(saveOptions: DNSaveOptions): string; overload;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string; overload;

  { propertys } 

    property AttachedTemplate: string read get_AttachedTemplate write set_AttachedTemplate;
    property AutomaticallyUpdateStyles: Boolean read get_AutomaticallyUpdateStyles write set_AutomaticallyUpdateStyles;
    property ShadeFormData: Boolean read get_ShadeFormData write set_ShadeFormData;
    property TrackRevisions: Boolean read get_TrackRevisions write set_TrackRevisions;
    property ShowGrammaticalErrors: Boolean read get_ShowGrammaticalErrors write set_ShowGrammaticalErrors;
    property ShowSpellingErrors: Boolean read get_ShowSpellingErrors write set_ShowSpellingErrors;
    property SpellingChecked: Boolean read get_SpellingChecked write set_SpellingChecked;
    property GrammarChecked: Boolean read get_GrammarChecked write set_GrammarChecked;
    property NodeType: DNNodeType read get_NodeType;
    property BuiltInDocumentProperties: DNBuiltInDocumentProperties read get_BuiltInDocumentProperties;
    property WebExtensionTaskPanes: DNTaskPaneCollection read get_WebExtensionTaskPanes;
    property CustomDocumentProperties: DNCustomDocumentProperties read get_CustomDocumentProperties;
    property MailMerge: DNMailMerge read get_MailMerge;
    property ProtectionType: DNProtectionType read get_ProtectionType;
    property Sections: DNSectionCollection read get_Sections;
    property FirstSection: DNSection read get_FirstSection;
    property LastSection: DNSection read get_LastSection;
    property ViewOptions: DNViewOptions read get_ViewOptions;
    property WriteProtection: DNWriteProtection read get_WriteProtection;
    property CompatibilityOptions: DNCompatibilityOptions read get_CompatibilityOptions;
    property MailMergeSettings: DNMailMergeSettings read get_MailMergeSettings write set_MailMergeSettings;
    property HyphenationOptions: DNHyphenationOptions read get_HyphenationOptions;
    property HasRevisions: Boolean read get_HasRevisions;
    property HasMacros: Boolean read get_HasMacros;
    property Watermark: DNWatermark read get_Watermark;
    property VersionsCount: Int32 read get_VersionsCount;
    property DefaultTabStop: Double read get_DefaultTabStop write set_DefaultTabStop;
    property Theme: DNTheme read get_Theme;
    property CustomXmlParts: DNCustomXmlPartCollection read get_CustomXmlParts write set_CustomXmlParts;
    property PackageCustomParts: DNCustomPartCollection read get_PackageCustomParts write set_PackageCustomParts;
    property Variables: DNVariableCollection read get_Variables;
    property GlossaryDocument: DNGlossaryDocument read get_GlossaryDocument write set_GlossaryDocument;
    property OriginalFileName: string read get_OriginalFileName;
    property OriginalLoadFormat: DNLoadFormat read get_OriginalLoadFormat;
    property Compliance: DNOoxmlCompliance read get_Compliance;
    property DigitalSignatures: DNDigitalSignatureCollection read get_DigitalSignatures;
    property FontSettings: DNFontSettings read get_FontSettings write set_FontSettings;
    property PageCount: Int32 read get_PageCount;
    property Revisions: DNRevisionCollection read get_Revisions;
    property LayoutOptions: DNLayoutOptions read get_LayoutOptions;
    property RevisionsView: DNRevisionsView read get_RevisionsView write set_RevisionsView;
    property FootnoteOptions: DNFootnoteOptions read get_FootnoteOptions;
    property EndnoteOptions: DNEndnoteOptions read get_EndnoteOptions;
    property FieldOptions: DNFieldOptions read get_FieldOptions;
    property RemovePersonalInformation: Boolean read get_RemovePersonalInformation write set_RemovePersonalInformation;
    property VbaProject: DNVbaProject read get_VbaProject write set_VbaProject;
    property Document: DNDocumentBase read get_Document;
    property NodeChangingCallback: DNINodeChangingCallback read get_NodeChangingCallback write set_NodeChangingCallback;
    property ResourceLoadingCallback: DNIResourceLoadingCallback read get_ResourceLoadingCallback write set_ResourceLoadingCallback;
    property FontInfos: DNFontInfoCollection read get_FontInfos;
    property Styles: DNStyleCollection read get_Styles;
    property Lists: DNListCollection read get_Lists;
    property WarningCallback: DNIWarningCallback read get_WarningCallback write set_WarningCallback;
    property BackgroundShape: DNShape read get_BackgroundShape write set_BackgroundShape;
    property PageColor: DDN.System.Drawing.DNColor read get_PageColor write set_PageColor;
    property IsComposite: Boolean read get_IsComposite;
    property HasChildNodes: Boolean read get_HasChildNodes;
    property ChildNodes: DNNodeCollection read get_ChildNodes;
    property FirstChild: DNNode read get_FirstChild;
    property LastChild: DNNode read get_LastChild;
    property Count: Int32 read get_Count;
    property ParentNode: DNCompositeNode read get_ParentNode;
    property PreviousSibling: DNNode read get_PreviousSibling;
    property NextSibling: DNNode read get_NextSibling;
    property Range: DNRange read get_Range;
    property CustomNodeId: Int32 read get_CustomNodeId write set_CustomNodeId;
  end;

  TDNDocument = class(TDNGenericImport<DNDocumentClass, DNDocument>) end;

  //-------------namespace: Aspose.Words.Drawing----------------
  DNShapeBaseClass = interface(DNCompositeNodeClass)
  ['{C228A8A4-6CF3-5AF0-8F24-B707CAC7DA84}']
  end;

  [DNTypeName('Aspose.Words.Drawing.ShapeBase')]
  DNShapeBase = interface(DNCompositeNode)
  ['{5DE248BE-A9C5-38C3-8C7E-07512A9D6192}']
  { getters & setters } 

    function get_Fill: DNFill;
    function get_ScreenTip: string;
    procedure set_ScreenTip(value: string);
    function get_HRef: string;
    procedure set_HRef(value: string);
    function get_Target: string;
    procedure set_Target(value: string);
    function get_AlternativeText: string;
    procedure set_AlternativeText(value: string);
    function get_Title: string;
    procedure set_Title(value: string);
    function get_Name: string;
    procedure set_Name(value: string);
    function get_IsInsertRevision: Boolean;
    function get_IsDeleteRevision: Boolean;
    function get_IsMoveFromRevision: Boolean;
    function get_IsMoveToRevision: Boolean;
    function get_IsTopLevel: Boolean;
    function get_IsGroup: Boolean;
    function get_IsImage: Boolean;
    function get_IsHorizontalRule: Boolean;
    function get_IsWordArt: Boolean;
    function get_CanHaveImage: Boolean;
    function get_AnchorLocked: Boolean;
    procedure set_AnchorLocked(value: Boolean);
    function get_AspectRatioLocked: Boolean;
    procedure set_AspectRatioLocked(value: Boolean);
    function get_AllowOverlap: Boolean;
    procedure set_AllowOverlap(value: Boolean);
    function get_BehindText: Boolean;
    procedure set_BehindText(value: Boolean);
    function get_IsInline: Boolean;
    function get_Left: Double;
    procedure set_Left(value: Double);
    function get_Top: Double;
    procedure set_Top(value: Double);
    function get_Right: Double;
    function get_Bottom: Double;
    function get_Width: Double;
    procedure set_Width(value: Double);
    function get_Height: Double;
    procedure set_Height(value: Double);
    function get_DistanceTop: Double;
    procedure set_DistanceTop(value: Double);
    function get_DistanceBottom: Double;
    procedure set_DistanceBottom(value: Double);
    function get_DistanceLeft: Double;
    procedure set_DistanceLeft(value: Double);
    function get_DistanceRight: Double;
    procedure set_DistanceRight(value: Double);
    function get_Rotation: Double;
    procedure set_Rotation(value: Double);
    function get_ZOrder: Int32;
    procedure set_ZOrder(value: Int32);
    function get_ParentParagraph: DNParagraph;
    function get_Bounds: DDN.System.Drawing.DNRectangleF;
    procedure set_Bounds(value: DDN.System.Drawing.DNRectangleF);
    function get_BoundsInPoints: DDN.System.Drawing.DNRectangleF;
    function get_BoundsWithEffects: DDN.System.Drawing.DNRectangleF;
    function get_ShapeType: DNShapeType;
    function get_MarkupLanguage: DNShapeMarkupLanguage;
    function get_SizeInPoints: DDN.System.Drawing.DNSizeF;
    function get_FlipOrientation: DNFlipOrientation;
    procedure set_FlipOrientation(value: DNFlipOrientation);
    function get_RelativeHorizontalPosition: DNRelativeHorizontalPosition;
    procedure set_RelativeHorizontalPosition(value: DNRelativeHorizontalPosition);
    function get_RelativeVerticalPosition: DNRelativeVerticalPosition;
    procedure set_RelativeVerticalPosition(value: DNRelativeVerticalPosition);
    function get_HorizontalAlignment: DNHorizontalAlignment;
    procedure set_HorizontalAlignment(value: DNHorizontalAlignment);
    function get_VerticalAlignment: DNVerticalAlignment;
    procedure set_VerticalAlignment(value: DNVerticalAlignment);
    function get_WrapType: DNWrapType;
    procedure set_WrapType(value: DNWrapType);
    function get_WrapSide: DNWrapSide;
    procedure set_WrapSide(value: DNWrapSide);
    function get_CoordOrigin: DDN.System.Drawing.DNPoint;
    procedure set_CoordOrigin(value: DDN.System.Drawing.DNPoint);
    function get_CoordSize: DDN.System.Drawing.DNSize;
    procedure set_CoordSize(value: DDN.System.Drawing.DNSize);
    function get_Font: DNFont;
    function get_IsSignatureLine: Boolean;
    function get_IsLayoutInCell: Boolean;
    procedure set_IsLayoutInCell(value: Boolean);
    function get_IsComposite: Boolean;
    function get_HasChildNodes: Boolean;
    function get_ChildNodes: DNNodeCollection;
    function get_FirstChild: DNNode;
    function get_LastChild: DNNode;
    function get_Count: Int32;
    function get_NodeType: DNNodeType;
    function get_ParentNode: DNCompositeNode;
    function get_Document: DNDocumentBase;
    function get_PreviousSibling: DNNode;
    function get_NextSibling: DNNode;
    function get_Range: DNRange;
    function get_CustomNodeId: Int32;
    procedure set_CustomNodeId(value: Int32);

  { methods } 

    function AdjustWithEffects(source: DDN.System.Drawing.DNRectangleF): DDN.System.Drawing.DNRectangleF;
    function GetShapeRenderer: DNShapeRenderer;
    function GetDirectShapeAttr(key: Int32): DDN.mscorlib.DNObject;
    function FetchInheritedShapeAttr(key: Int32): DDN.mscorlib.DNObject;
    function FetchShapeAttr(key: Int32): DDN.mscorlib.DNObject;
    procedure SetShapeAttr(key: Int32; value: DDN.mscorlib.DNObject);
    procedure RemoveShapeAttr(key: Int32);
    function LocalToParent(value: DDN.System.Drawing.DNPointF): DDN.System.Drawing.DNPointF;
    function GetText: string;
    function GetChildNodes(nodeType: DNNodeType; isDeep: Boolean): DNNodeCollection;
    function GetChild(nodeType: DNNodeType; index: Int32; isDeep: Boolean): DNNode;
    function SelectNodes(xpath: string): DNNodeList;
    function SelectSingleNode(xpath: string): DNNode;
    function GetEnumerator: DDN.mscorlib.DNIEnumerator<DNNode>;
    function AppendChild(newChild: DNNode): DNNode;
    function PrependChild(newChild: DNNode): DNNode;
    function InsertAfter(newChild: DNNode; refChild: DNNode): DNNode;
    function InsertBefore(newChild: DNNode; refChild: DNNode): DNNode;
    function RemoveChild(oldChild: DNNode): DNNode;
    procedure RemoveAllChildren;
    procedure RemoveSmartTags;
    function IndexOf(child: DNNode): Int32;
    function CreateNavigator: DDN.System.Xml.DNXPathNavigator;
    function Clone(isCloneChildren: Boolean): DNNode;
    function Accept(visitor: DNDocumentVisitor): Boolean;
    function GetAncestor(ancestorType: DDN.mscorlib.DNType): DNCompositeNode; overload;
    function GetAncestor(ancestorType: DNNodeType): DNCompositeNode; overload;
    procedure Remove;
    function NextPreOrder(rootNode: DNNode): DNNode;
    function PreviousPreOrder(rootNode: DNNode): DNNode;
    function ToString(saveFormat: DNSaveFormat): string; overload;
    function ToString(saveOptions: DNSaveOptions): string; overload;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string; overload;

  { propertys } 

    property Fill: DNFill read get_Fill;
    property ScreenTip: string read get_ScreenTip write set_ScreenTip;
    property HRef: string read get_HRef write set_HRef;
    property Target: string read get_Target write set_Target;
    property AlternativeText: string read get_AlternativeText write set_AlternativeText;
    property Title: string read get_Title write set_Title;
    property Name: string read get_Name write set_Name;
    property IsInsertRevision: Boolean read get_IsInsertRevision;
    property IsDeleteRevision: Boolean read get_IsDeleteRevision;
    property IsMoveFromRevision: Boolean read get_IsMoveFromRevision;
    property IsMoveToRevision: Boolean read get_IsMoveToRevision;
    property IsTopLevel: Boolean read get_IsTopLevel;
    property IsGroup: Boolean read get_IsGroup;
    property IsImage: Boolean read get_IsImage;
    property IsHorizontalRule: Boolean read get_IsHorizontalRule;
    property IsWordArt: Boolean read get_IsWordArt;
    property CanHaveImage: Boolean read get_CanHaveImage;
    property AnchorLocked: Boolean read get_AnchorLocked write set_AnchorLocked;
    property AspectRatioLocked: Boolean read get_AspectRatioLocked write set_AspectRatioLocked;
    property AllowOverlap: Boolean read get_AllowOverlap write set_AllowOverlap;
    property BehindText: Boolean read get_BehindText write set_BehindText;
    property IsInline: Boolean read get_IsInline;
    property Left: Double read get_Left write set_Left;
    property Top: Double read get_Top write set_Top;
    property Right: Double read get_Right;
    property Bottom: Double read get_Bottom;
    property Width: Double read get_Width write set_Width;
    property Height: Double read get_Height write set_Height;
    property DistanceTop: Double read get_DistanceTop write set_DistanceTop;
    property DistanceBottom: Double read get_DistanceBottom write set_DistanceBottom;
    property DistanceLeft: Double read get_DistanceLeft write set_DistanceLeft;
    property DistanceRight: Double read get_DistanceRight write set_DistanceRight;
    property Rotation: Double read get_Rotation write set_Rotation;
    property ZOrder: Int32 read get_ZOrder write set_ZOrder;
    property ParentParagraph: DNParagraph read get_ParentParagraph;
    property Bounds: DDN.System.Drawing.DNRectangleF read get_Bounds write set_Bounds;
    property BoundsInPoints: DDN.System.Drawing.DNRectangleF read get_BoundsInPoints;
    property BoundsWithEffects: DDN.System.Drawing.DNRectangleF read get_BoundsWithEffects;
    property ShapeType: DNShapeType read get_ShapeType;
    property MarkupLanguage: DNShapeMarkupLanguage read get_MarkupLanguage;
    property SizeInPoints: DDN.System.Drawing.DNSizeF read get_SizeInPoints;
    property FlipOrientation: DNFlipOrientation read get_FlipOrientation write set_FlipOrientation;
    property RelativeHorizontalPosition: DNRelativeHorizontalPosition read get_RelativeHorizontalPosition write set_RelativeHorizontalPosition;
    property RelativeVerticalPosition: DNRelativeVerticalPosition read get_RelativeVerticalPosition write set_RelativeVerticalPosition;
    property HorizontalAlignment: DNHorizontalAlignment read get_HorizontalAlignment write set_HorizontalAlignment;
    property VerticalAlignment: DNVerticalAlignment read get_VerticalAlignment write set_VerticalAlignment;
    property WrapType: DNWrapType read get_WrapType write set_WrapType;
    property WrapSide: DNWrapSide read get_WrapSide write set_WrapSide;
    property CoordOrigin: DDN.System.Drawing.DNPoint read get_CoordOrigin write set_CoordOrigin;
    property CoordSize: DDN.System.Drawing.DNSize read get_CoordSize write set_CoordSize;
    property Font: DNFont read get_Font;
    property IsSignatureLine: Boolean read get_IsSignatureLine;
    property IsLayoutInCell: Boolean read get_IsLayoutInCell write set_IsLayoutInCell;
    property IsComposite: Boolean read get_IsComposite;
    property HasChildNodes: Boolean read get_HasChildNodes;
    property ChildNodes: DNNodeCollection read get_ChildNodes;
    property FirstChild: DNNode read get_FirstChild;
    property LastChild: DNNode read get_LastChild;
    property Count: Int32 read get_Count;
    property NodeType: DNNodeType read get_NodeType;
    property ParentNode: DNCompositeNode read get_ParentNode;
    property Document: DNDocumentBase read get_Document;
    property PreviousSibling: DNNode read get_PreviousSibling;
    property NextSibling: DNNode read get_NextSibling;
    property Range: DNRange read get_Range;
    property CustomNodeId: Int32 read get_CustomNodeId write set_CustomNodeId;
  end;

  TDNShapeBase = class(TDNGenericImport<DNShapeBaseClass, DNShapeBase>) end;

  //-------------namespace: Aspose.Words.Drawing----------------
  DNGroupShapeClass = interface(DNShapeBaseClass)
  ['{0F0B8EF9-437C-5131-9BF7-102A606701B8}']
  { constructors } 

    {class} function init(doc: DNDocumentBase): DNGroupShape;

  end;

  [DNTypeName('Aspose.Words.Drawing.GroupShape')]
  DNGroupShape = interface(DNShapeBase)
  ['{5A878B83-6A3E-358F-BCE7-4D4CB0AA3603}']
  { getters & setters } 

    function get_NodeType: DNNodeType;
    function get_Fill: DNFill;
    function get_ScreenTip: string;
    procedure set_ScreenTip(value: string);
    function get_HRef: string;
    procedure set_HRef(value: string);
    function get_Target: string;
    procedure set_Target(value: string);
    function get_AlternativeText: string;
    procedure set_AlternativeText(value: string);
    function get_Title: string;
    procedure set_Title(value: string);
    function get_Name: string;
    procedure set_Name(value: string);
    function get_IsInsertRevision: Boolean;
    function get_IsDeleteRevision: Boolean;
    function get_IsMoveFromRevision: Boolean;
    function get_IsMoveToRevision: Boolean;
    function get_IsTopLevel: Boolean;
    function get_IsGroup: Boolean;
    function get_IsImage: Boolean;
    function get_IsHorizontalRule: Boolean;
    function get_IsWordArt: Boolean;
    function get_CanHaveImage: Boolean;
    function get_AnchorLocked: Boolean;
    procedure set_AnchorLocked(value: Boolean);
    function get_AspectRatioLocked: Boolean;
    procedure set_AspectRatioLocked(value: Boolean);
    function get_AllowOverlap: Boolean;
    procedure set_AllowOverlap(value: Boolean);
    function get_BehindText: Boolean;
    procedure set_BehindText(value: Boolean);
    function get_IsInline: Boolean;
    function get_Left: Double;
    procedure set_Left(value: Double);
    function get_Top: Double;
    procedure set_Top(value: Double);
    function get_Right: Double;
    function get_Bottom: Double;
    function get_Width: Double;
    procedure set_Width(value: Double);
    function get_Height: Double;
    procedure set_Height(value: Double);
    function get_DistanceTop: Double;
    procedure set_DistanceTop(value: Double);
    function get_DistanceBottom: Double;
    procedure set_DistanceBottom(value: Double);
    function get_DistanceLeft: Double;
    procedure set_DistanceLeft(value: Double);
    function get_DistanceRight: Double;
    procedure set_DistanceRight(value: Double);
    function get_Rotation: Double;
    procedure set_Rotation(value: Double);
    function get_ZOrder: Int32;
    procedure set_ZOrder(value: Int32);
    function get_ParentParagraph: DNParagraph;
    function get_Bounds: DDN.System.Drawing.DNRectangleF;
    procedure set_Bounds(value: DDN.System.Drawing.DNRectangleF);
    function get_BoundsInPoints: DDN.System.Drawing.DNRectangleF;
    function get_BoundsWithEffects: DDN.System.Drawing.DNRectangleF;
    function get_ShapeType: DNShapeType;
    function get_MarkupLanguage: DNShapeMarkupLanguage;
    function get_SizeInPoints: DDN.System.Drawing.DNSizeF;
    function get_FlipOrientation: DNFlipOrientation;
    procedure set_FlipOrientation(value: DNFlipOrientation);
    function get_RelativeHorizontalPosition: DNRelativeHorizontalPosition;
    procedure set_RelativeHorizontalPosition(value: DNRelativeHorizontalPosition);
    function get_RelativeVerticalPosition: DNRelativeVerticalPosition;
    procedure set_RelativeVerticalPosition(value: DNRelativeVerticalPosition);
    function get_HorizontalAlignment: DNHorizontalAlignment;
    procedure set_HorizontalAlignment(value: DNHorizontalAlignment);
    function get_VerticalAlignment: DNVerticalAlignment;
    procedure set_VerticalAlignment(value: DNVerticalAlignment);
    function get_WrapType: DNWrapType;
    procedure set_WrapType(value: DNWrapType);
    function get_WrapSide: DNWrapSide;
    procedure set_WrapSide(value: DNWrapSide);
    function get_CoordOrigin: DDN.System.Drawing.DNPoint;
    procedure set_CoordOrigin(value: DDN.System.Drawing.DNPoint);
    function get_CoordSize: DDN.System.Drawing.DNSize;
    procedure set_CoordSize(value: DDN.System.Drawing.DNSize);
    function get_Font: DNFont;
    function get_IsSignatureLine: Boolean;
    function get_IsLayoutInCell: Boolean;
    procedure set_IsLayoutInCell(value: Boolean);
    function get_IsComposite: Boolean;
    function get_HasChildNodes: Boolean;
    function get_ChildNodes: DNNodeCollection;
    function get_FirstChild: DNNode;
    function get_LastChild: DNNode;
    function get_Count: Int32;
    function get_ParentNode: DNCompositeNode;
    function get_Document: DNDocumentBase;
    function get_PreviousSibling: DNNode;
    function get_NextSibling: DNNode;
    function get_Range: DNRange;
    function get_CustomNodeId: Int32;
    procedure set_CustomNodeId(value: Int32);

  { methods } 

    function Accept(visitor: DNDocumentVisitor): Boolean;
    function AdjustWithEffects(source: DDN.System.Drawing.DNRectangleF): DDN.System.Drawing.DNRectangleF;
    function GetShapeRenderer: DNShapeRenderer;
    function GetDirectShapeAttr(key: Int32): DDN.mscorlib.DNObject;
    function FetchInheritedShapeAttr(key: Int32): DDN.mscorlib.DNObject;
    function FetchShapeAttr(key: Int32): DDN.mscorlib.DNObject;
    procedure SetShapeAttr(key: Int32; value: DDN.mscorlib.DNObject);
    procedure RemoveShapeAttr(key: Int32);
    function LocalToParent(value: DDN.System.Drawing.DNPointF): DDN.System.Drawing.DNPointF;
    function GetText: string;
    function GetChildNodes(nodeType: DNNodeType; isDeep: Boolean): DNNodeCollection;
    function GetChild(nodeType: DNNodeType; index: Int32; isDeep: Boolean): DNNode;
    function SelectNodes(xpath: string): DNNodeList;
    function SelectSingleNode(xpath: string): DNNode;
    function GetEnumerator: DDN.mscorlib.DNIEnumerator<DNNode>;
    function AppendChild(newChild: DNNode): DNNode;
    function PrependChild(newChild: DNNode): DNNode;
    function InsertAfter(newChild: DNNode; refChild: DNNode): DNNode;
    function InsertBefore(newChild: DNNode; refChild: DNNode): DNNode;
    function RemoveChild(oldChild: DNNode): DNNode;
    procedure RemoveAllChildren;
    procedure RemoveSmartTags;
    function IndexOf(child: DNNode): Int32;
    function CreateNavigator: DDN.System.Xml.DNXPathNavigator;
    function Clone(isCloneChildren: Boolean): DNNode;
    function GetAncestor(ancestorType: DDN.mscorlib.DNType): DNCompositeNode; overload;
    function GetAncestor(ancestorType: DNNodeType): DNCompositeNode; overload;
    procedure Remove;
    function NextPreOrder(rootNode: DNNode): DNNode;
    function PreviousPreOrder(rootNode: DNNode): DNNode;
    function ToString(saveFormat: DNSaveFormat): string; overload;
    function ToString(saveOptions: DNSaveOptions): string; overload;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string; overload;

  { propertys } 

    property NodeType: DNNodeType read get_NodeType;
    property Fill: DNFill read get_Fill;
    property ScreenTip: string read get_ScreenTip write set_ScreenTip;
    property HRef: string read get_HRef write set_HRef;
    property Target: string read get_Target write set_Target;
    property AlternativeText: string read get_AlternativeText write set_AlternativeText;
    property Title: string read get_Title write set_Title;
    property Name: string read get_Name write set_Name;
    property IsInsertRevision: Boolean read get_IsInsertRevision;
    property IsDeleteRevision: Boolean read get_IsDeleteRevision;
    property IsMoveFromRevision: Boolean read get_IsMoveFromRevision;
    property IsMoveToRevision: Boolean read get_IsMoveToRevision;
    property IsTopLevel: Boolean read get_IsTopLevel;
    property IsGroup: Boolean read get_IsGroup;
    property IsImage: Boolean read get_IsImage;
    property IsHorizontalRule: Boolean read get_IsHorizontalRule;
    property IsWordArt: Boolean read get_IsWordArt;
    property CanHaveImage: Boolean read get_CanHaveImage;
    property AnchorLocked: Boolean read get_AnchorLocked write set_AnchorLocked;
    property AspectRatioLocked: Boolean read get_AspectRatioLocked write set_AspectRatioLocked;
    property AllowOverlap: Boolean read get_AllowOverlap write set_AllowOverlap;
    property BehindText: Boolean read get_BehindText write set_BehindText;
    property IsInline: Boolean read get_IsInline;
    property Left: Double read get_Left write set_Left;
    property Top: Double read get_Top write set_Top;
    property Right: Double read get_Right;
    property Bottom: Double read get_Bottom;
    property Width: Double read get_Width write set_Width;
    property Height: Double read get_Height write set_Height;
    property DistanceTop: Double read get_DistanceTop write set_DistanceTop;
    property DistanceBottom: Double read get_DistanceBottom write set_DistanceBottom;
    property DistanceLeft: Double read get_DistanceLeft write set_DistanceLeft;
    property DistanceRight: Double read get_DistanceRight write set_DistanceRight;
    property Rotation: Double read get_Rotation write set_Rotation;
    property ZOrder: Int32 read get_ZOrder write set_ZOrder;
    property ParentParagraph: DNParagraph read get_ParentParagraph;
    property Bounds: DDN.System.Drawing.DNRectangleF read get_Bounds write set_Bounds;
    property BoundsInPoints: DDN.System.Drawing.DNRectangleF read get_BoundsInPoints;
    property BoundsWithEffects: DDN.System.Drawing.DNRectangleF read get_BoundsWithEffects;
    property ShapeType: DNShapeType read get_ShapeType;
    property MarkupLanguage: DNShapeMarkupLanguage read get_MarkupLanguage;
    property SizeInPoints: DDN.System.Drawing.DNSizeF read get_SizeInPoints;
    property FlipOrientation: DNFlipOrientation read get_FlipOrientation write set_FlipOrientation;
    property RelativeHorizontalPosition: DNRelativeHorizontalPosition read get_RelativeHorizontalPosition write set_RelativeHorizontalPosition;
    property RelativeVerticalPosition: DNRelativeVerticalPosition read get_RelativeVerticalPosition write set_RelativeVerticalPosition;
    property HorizontalAlignment: DNHorizontalAlignment read get_HorizontalAlignment write set_HorizontalAlignment;
    property VerticalAlignment: DNVerticalAlignment read get_VerticalAlignment write set_VerticalAlignment;
    property WrapType: DNWrapType read get_WrapType write set_WrapType;
    property WrapSide: DNWrapSide read get_WrapSide write set_WrapSide;
    property CoordOrigin: DDN.System.Drawing.DNPoint read get_CoordOrigin write set_CoordOrigin;
    property CoordSize: DDN.System.Drawing.DNSize read get_CoordSize write set_CoordSize;
    property Font: DNFont read get_Font;
    property IsSignatureLine: Boolean read get_IsSignatureLine;
    property IsLayoutInCell: Boolean read get_IsLayoutInCell write set_IsLayoutInCell;
    property IsComposite: Boolean read get_IsComposite;
    property HasChildNodes: Boolean read get_HasChildNodes;
    property ChildNodes: DNNodeCollection read get_ChildNodes;
    property FirstChild: DNNode read get_FirstChild;
    property LastChild: DNNode read get_LastChild;
    property Count: Int32 read get_Count;
    property ParentNode: DNCompositeNode read get_ParentNode;
    property Document: DNDocumentBase read get_Document;
    property PreviousSibling: DNNode read get_PreviousSibling;
    property NextSibling: DNNode read get_NextSibling;
    property Range: DNRange read get_Range;
    property CustomNodeId: Int32 read get_CustomNodeId write set_CustomNodeId;
  end;

  TDNGroupShape = class(TDNGenericImport<DNGroupShapeClass, DNGroupShape>) end;

  //-------------namespace: Aspose.Words.Drawing----------------
  DNShapeClass = interface(DNShapeBaseClass)
  ['{D0D52D8C-06CE-5955-9F77-20B2DFDF227A}']
  { constructors } 

    {class} function init(doc: DNDocumentBase; shapeType: DNShapeType): DNShape;

  end;

  [DNTypeName('Aspose.Words.Drawing.Shape')]
  DNShape = interface(DNShapeBase)
  ['{9C84FC9B-C6F0-3676-A054-8C657CDC1297}']
  { getters & setters } 

    function get_NodeType: DNNodeType;
    function get_StoryType: DNStoryType;
    function get_ExtrusionEnabled: Boolean;
    function get_ShadowEnabled: Boolean;
    function get_Stroke: DNStroke;
    function get_Stroked: Boolean;
    procedure set_Stroked(value: Boolean);
    function get_StrokeWeight: Double;
    procedure set_StrokeWeight(value: Double);
    function get_StrokeColor: DDN.System.Drawing.DNColor;
    procedure set_StrokeColor(value: DDN.System.Drawing.DNColor);
    function get_Filled: Boolean;
    procedure set_Filled(value: Boolean);
    function get_FillColor: DDN.System.Drawing.DNColor;
    procedure set_FillColor(value: DDN.System.Drawing.DNColor);
    function get_HasImage: Boolean;
    function get_ImageData: DNImageData;
    function get_OleFormat: DNOleFormat;
    function get_TextBox: DNTextBox;
    function get_TextPath: DNTextPath;
    function get_FirstParagraph: DNParagraph;
    function get_LastParagraph: DNParagraph;
    function get_HorizontalRuleFormat: DNHorizontalRuleFormat;
    function get_SignatureLine: DNSignatureLine;
    function get_HasChart: Boolean;
    function get_HasSmartArt: Boolean;
    function get_Chart: DNChart;
    function get_Fill: DNFill;
    function get_ScreenTip: string;
    procedure set_ScreenTip(value: string);
    function get_HRef: string;
    procedure set_HRef(value: string);
    function get_Target: string;
    procedure set_Target(value: string);
    function get_AlternativeText: string;
    procedure set_AlternativeText(value: string);
    function get_Title: string;
    procedure set_Title(value: string);
    function get_Name: string;
    procedure set_Name(value: string);
    function get_IsInsertRevision: Boolean;
    function get_IsDeleteRevision: Boolean;
    function get_IsMoveFromRevision: Boolean;
    function get_IsMoveToRevision: Boolean;
    function get_IsTopLevel: Boolean;
    function get_IsGroup: Boolean;
    function get_IsImage: Boolean;
    function get_IsHorizontalRule: Boolean;
    function get_IsWordArt: Boolean;
    function get_CanHaveImage: Boolean;
    function get_AnchorLocked: Boolean;
    procedure set_AnchorLocked(value: Boolean);
    function get_AspectRatioLocked: Boolean;
    procedure set_AspectRatioLocked(value: Boolean);
    function get_AllowOverlap: Boolean;
    procedure set_AllowOverlap(value: Boolean);
    function get_BehindText: Boolean;
    procedure set_BehindText(value: Boolean);
    function get_IsInline: Boolean;
    function get_Left: Double;
    procedure set_Left(value: Double);
    function get_Top: Double;
    procedure set_Top(value: Double);
    function get_Right: Double;
    function get_Bottom: Double;
    function get_Width: Double;
    procedure set_Width(value: Double);
    function get_Height: Double;
    procedure set_Height(value: Double);
    function get_DistanceTop: Double;
    procedure set_DistanceTop(value: Double);
    function get_DistanceBottom: Double;
    procedure set_DistanceBottom(value: Double);
    function get_DistanceLeft: Double;
    procedure set_DistanceLeft(value: Double);
    function get_DistanceRight: Double;
    procedure set_DistanceRight(value: Double);
    function get_Rotation: Double;
    procedure set_Rotation(value: Double);
    function get_ZOrder: Int32;
    procedure set_ZOrder(value: Int32);
    function get_ParentParagraph: DNParagraph;
    function get_Bounds: DDN.System.Drawing.DNRectangleF;
    procedure set_Bounds(value: DDN.System.Drawing.DNRectangleF);
    function get_BoundsInPoints: DDN.System.Drawing.DNRectangleF;
    function get_BoundsWithEffects: DDN.System.Drawing.DNRectangleF;
    function get_ShapeType: DNShapeType;
    function get_MarkupLanguage: DNShapeMarkupLanguage;
    function get_SizeInPoints: DDN.System.Drawing.DNSizeF;
    function get_FlipOrientation: DNFlipOrientation;
    procedure set_FlipOrientation(value: DNFlipOrientation);
    function get_RelativeHorizontalPosition: DNRelativeHorizontalPosition;
    procedure set_RelativeHorizontalPosition(value: DNRelativeHorizontalPosition);
    function get_RelativeVerticalPosition: DNRelativeVerticalPosition;
    procedure set_RelativeVerticalPosition(value: DNRelativeVerticalPosition);
    function get_HorizontalAlignment: DNHorizontalAlignment;
    procedure set_HorizontalAlignment(value: DNHorizontalAlignment);
    function get_VerticalAlignment: DNVerticalAlignment;
    procedure set_VerticalAlignment(value: DNVerticalAlignment);
    function get_WrapType: DNWrapType;
    procedure set_WrapType(value: DNWrapType);
    function get_WrapSide: DNWrapSide;
    procedure set_WrapSide(value: DNWrapSide);
    function get_CoordOrigin: DDN.System.Drawing.DNPoint;
    procedure set_CoordOrigin(value: DDN.System.Drawing.DNPoint);
    function get_CoordSize: DDN.System.Drawing.DNSize;
    procedure set_CoordSize(value: DDN.System.Drawing.DNSize);
    function get_Font: DNFont;
    function get_IsSignatureLine: Boolean;
    function get_IsLayoutInCell: Boolean;
    procedure set_IsLayoutInCell(value: Boolean);
    function get_IsComposite: Boolean;
    function get_HasChildNodes: Boolean;
    function get_ChildNodes: DNNodeCollection;
    function get_FirstChild: DNNode;
    function get_LastChild: DNNode;
    function get_Count: Int32;
    function get_ParentNode: DNCompositeNode;
    function get_Document: DNDocumentBase;
    function get_PreviousSibling: DNNode;
    function get_NextSibling: DNNode;
    function get_Range: DNRange;
    function get_CustomNodeId: Int32;
    procedure set_CustomNodeId(value: Int32);

  { methods } 

    procedure UpdateSmartArtDrawing;
    function Accept(visitor: DNDocumentVisitor): Boolean;
    function AdjustWithEffects(source: DDN.System.Drawing.DNRectangleF): DDN.System.Drawing.DNRectangleF;
    function GetShapeRenderer: DNShapeRenderer;
    function GetDirectShapeAttr(key: Int32): DDN.mscorlib.DNObject;
    function FetchInheritedShapeAttr(key: Int32): DDN.mscorlib.DNObject;
    function FetchShapeAttr(key: Int32): DDN.mscorlib.DNObject;
    procedure SetShapeAttr(key: Int32; value: DDN.mscorlib.DNObject);
    procedure RemoveShapeAttr(key: Int32);
    function LocalToParent(value: DDN.System.Drawing.DNPointF): DDN.System.Drawing.DNPointF;
    function GetText: string;
    function GetChildNodes(nodeType: DNNodeType; isDeep: Boolean): DNNodeCollection;
    function GetChild(nodeType: DNNodeType; index: Int32; isDeep: Boolean): DNNode;
    function SelectNodes(xpath: string): DNNodeList;
    function SelectSingleNode(xpath: string): DNNode;
    function GetEnumerator: DDN.mscorlib.DNIEnumerator<DNNode>;
    function AppendChild(newChild: DNNode): DNNode;
    function PrependChild(newChild: DNNode): DNNode;
    function InsertAfter(newChild: DNNode; refChild: DNNode): DNNode;
    function InsertBefore(newChild: DNNode; refChild: DNNode): DNNode;
    function RemoveChild(oldChild: DNNode): DNNode;
    procedure RemoveAllChildren;
    procedure RemoveSmartTags;
    function IndexOf(child: DNNode): Int32;
    function CreateNavigator: DDN.System.Xml.DNXPathNavigator;
    function Clone(isCloneChildren: Boolean): DNNode;
    function GetAncestor(ancestorType: DDN.mscorlib.DNType): DNCompositeNode; overload;
    function GetAncestor(ancestorType: DNNodeType): DNCompositeNode; overload;
    procedure Remove;
    function NextPreOrder(rootNode: DNNode): DNNode;
    function PreviousPreOrder(rootNode: DNNode): DNNode;
    function ToString(saveFormat: DNSaveFormat): string; overload;
    function ToString(saveOptions: DNSaveOptions): string; overload;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string; overload;

  { propertys } 

    property NodeType: DNNodeType read get_NodeType;
    property StoryType: DNStoryType read get_StoryType;
    property ExtrusionEnabled: Boolean read get_ExtrusionEnabled;
    property ShadowEnabled: Boolean read get_ShadowEnabled;
    property Stroke: DNStroke read get_Stroke;
    property Stroked: Boolean read get_Stroked write set_Stroked;
    property StrokeWeight: Double read get_StrokeWeight write set_StrokeWeight;
    property StrokeColor: DDN.System.Drawing.DNColor read get_StrokeColor write set_StrokeColor;
    property Filled: Boolean read get_Filled write set_Filled;
    property FillColor: DDN.System.Drawing.DNColor read get_FillColor write set_FillColor;
    property HasImage: Boolean read get_HasImage;
    property ImageData: DNImageData read get_ImageData;
    property OleFormat: DNOleFormat read get_OleFormat;
    property TextBox: DNTextBox read get_TextBox;
    property TextPath: DNTextPath read get_TextPath;
    property FirstParagraph: DNParagraph read get_FirstParagraph;
    property LastParagraph: DNParagraph read get_LastParagraph;
    property HorizontalRuleFormat: DNHorizontalRuleFormat read get_HorizontalRuleFormat;
    property SignatureLine: DNSignatureLine read get_SignatureLine;
    property HasChart: Boolean read get_HasChart;
    property HasSmartArt: Boolean read get_HasSmartArt;
    property Chart: DNChart read get_Chart;
    property Fill: DNFill read get_Fill;
    property ScreenTip: string read get_ScreenTip write set_ScreenTip;
    property HRef: string read get_HRef write set_HRef;
    property Target: string read get_Target write set_Target;
    property AlternativeText: string read get_AlternativeText write set_AlternativeText;
    property Title: string read get_Title write set_Title;
    property Name: string read get_Name write set_Name;
    property IsInsertRevision: Boolean read get_IsInsertRevision;
    property IsDeleteRevision: Boolean read get_IsDeleteRevision;
    property IsMoveFromRevision: Boolean read get_IsMoveFromRevision;
    property IsMoveToRevision: Boolean read get_IsMoveToRevision;
    property IsTopLevel: Boolean read get_IsTopLevel;
    property IsGroup: Boolean read get_IsGroup;
    property IsImage: Boolean read get_IsImage;
    property IsHorizontalRule: Boolean read get_IsHorizontalRule;
    property IsWordArt: Boolean read get_IsWordArt;
    property CanHaveImage: Boolean read get_CanHaveImage;
    property AnchorLocked: Boolean read get_AnchorLocked write set_AnchorLocked;
    property AspectRatioLocked: Boolean read get_AspectRatioLocked write set_AspectRatioLocked;
    property AllowOverlap: Boolean read get_AllowOverlap write set_AllowOverlap;
    property BehindText: Boolean read get_BehindText write set_BehindText;
    property IsInline: Boolean read get_IsInline;
    property Left: Double read get_Left write set_Left;
    property Top: Double read get_Top write set_Top;
    property Right: Double read get_Right;
    property Bottom: Double read get_Bottom;
    property Width: Double read get_Width write set_Width;
    property Height: Double read get_Height write set_Height;
    property DistanceTop: Double read get_DistanceTop write set_DistanceTop;
    property DistanceBottom: Double read get_DistanceBottom write set_DistanceBottom;
    property DistanceLeft: Double read get_DistanceLeft write set_DistanceLeft;
    property DistanceRight: Double read get_DistanceRight write set_DistanceRight;
    property Rotation: Double read get_Rotation write set_Rotation;
    property ZOrder: Int32 read get_ZOrder write set_ZOrder;
    property ParentParagraph: DNParagraph read get_ParentParagraph;
    property Bounds: DDN.System.Drawing.DNRectangleF read get_Bounds write set_Bounds;
    property BoundsInPoints: DDN.System.Drawing.DNRectangleF read get_BoundsInPoints;
    property BoundsWithEffects: DDN.System.Drawing.DNRectangleF read get_BoundsWithEffects;
    property ShapeType: DNShapeType read get_ShapeType;
    property MarkupLanguage: DNShapeMarkupLanguage read get_MarkupLanguage;
    property SizeInPoints: DDN.System.Drawing.DNSizeF read get_SizeInPoints;
    property FlipOrientation: DNFlipOrientation read get_FlipOrientation write set_FlipOrientation;
    property RelativeHorizontalPosition: DNRelativeHorizontalPosition read get_RelativeHorizontalPosition write set_RelativeHorizontalPosition;
    property RelativeVerticalPosition: DNRelativeVerticalPosition read get_RelativeVerticalPosition write set_RelativeVerticalPosition;
    property HorizontalAlignment: DNHorizontalAlignment read get_HorizontalAlignment write set_HorizontalAlignment;
    property VerticalAlignment: DNVerticalAlignment read get_VerticalAlignment write set_VerticalAlignment;
    property WrapType: DNWrapType read get_WrapType write set_WrapType;
    property WrapSide: DNWrapSide read get_WrapSide write set_WrapSide;
    property CoordOrigin: DDN.System.Drawing.DNPoint read get_CoordOrigin write set_CoordOrigin;
    property CoordSize: DDN.System.Drawing.DNSize read get_CoordSize write set_CoordSize;
    property Font: DNFont read get_Font;
    property IsSignatureLine: Boolean read get_IsSignatureLine;
    property IsLayoutInCell: Boolean read get_IsLayoutInCell write set_IsLayoutInCell;
    property IsComposite: Boolean read get_IsComposite;
    property HasChildNodes: Boolean read get_HasChildNodes;
    property ChildNodes: DNNodeCollection read get_ChildNodes;
    property FirstChild: DNNode read get_FirstChild;
    property LastChild: DNNode read get_LastChild;
    property Count: Int32 read get_Count;
    property ParentNode: DNCompositeNode read get_ParentNode;
    property Document: DNDocumentBase read get_Document;
    property PreviousSibling: DNNode read get_PreviousSibling;
    property NextSibling: DNNode read get_NextSibling;
    property Range: DNRange read get_Range;
    property CustomNodeId: Int32 read get_CustomNodeId write set_CustomNodeId;
  end;

  TDNShape = class(TDNGenericImport<DNShapeClass, DNShape>) end;

  //-------------namespace: Aspose.Words----------------
  DNInlineStoryClass = interface(DNCompositeNodeClass)
  ['{E0BC41BF-55E8-5E53-8848-6D72684816FD}']
  end;

  [DNTypeName('Aspose.Words.InlineStory')]
  DNInlineStory = interface(DNCompositeNode)
  ['{5E9B2814-0E6C-3ECF-885E-0904E01A0516}']
  { getters & setters } 

    function get_StoryType: DNStoryType;
    function get_ParentParagraph: DNParagraph;
    function get_FirstParagraph: DNParagraph;
    function get_LastParagraph: DNParagraph;
    function get_Paragraphs: DNParagraphCollection;
    function get_Tables: DNTableCollection;
    function get_IsInsertRevision: Boolean;
    function get_IsDeleteRevision: Boolean;
    function get_IsMoveFromRevision: Boolean;
    function get_IsMoveToRevision: Boolean;
    function get_Font: DNFont;
    function get_IsComposite: Boolean;
    function get_HasChildNodes: Boolean;
    function get_ChildNodes: DNNodeCollection;
    function get_FirstChild: DNNode;
    function get_LastChild: DNNode;
    function get_Count: Int32;
    function get_NodeType: DNNodeType;
    function get_ParentNode: DNCompositeNode;
    function get_Document: DNDocumentBase;
    function get_PreviousSibling: DNNode;
    function get_NextSibling: DNNode;
    function get_Range: DNRange;
    function get_CustomNodeId: Int32;
    procedure set_CustomNodeId(value: Int32);

  { methods } 

    procedure EnsureMinimum;
    function GetText: string;
    function GetChildNodes(nodeType: DNNodeType; isDeep: Boolean): DNNodeCollection;
    function GetChild(nodeType: DNNodeType; index: Int32; isDeep: Boolean): DNNode;
    function SelectNodes(xpath: string): DNNodeList;
    function SelectSingleNode(xpath: string): DNNode;
    function GetEnumerator: DDN.mscorlib.DNIEnumerator<DNNode>;
    function AppendChild(newChild: DNNode): DNNode;
    function PrependChild(newChild: DNNode): DNNode;
    function InsertAfter(newChild: DNNode; refChild: DNNode): DNNode;
    function InsertBefore(newChild: DNNode; refChild: DNNode): DNNode;
    function RemoveChild(oldChild: DNNode): DNNode;
    procedure RemoveAllChildren;
    procedure RemoveSmartTags;
    function IndexOf(child: DNNode): Int32;
    function CreateNavigator: DDN.System.Xml.DNXPathNavigator;
    function Clone(isCloneChildren: Boolean): DNNode;
    function Accept(visitor: DNDocumentVisitor): Boolean;
    function GetAncestor(ancestorType: DDN.mscorlib.DNType): DNCompositeNode; overload;
    function GetAncestor(ancestorType: DNNodeType): DNCompositeNode; overload;
    procedure Remove;
    function NextPreOrder(rootNode: DNNode): DNNode;
    function PreviousPreOrder(rootNode: DNNode): DNNode;
    function ToString(saveFormat: DNSaveFormat): string; overload;
    function ToString(saveOptions: DNSaveOptions): string; overload;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string; overload;

  { propertys } 

    property StoryType: DNStoryType read get_StoryType;
    property ParentParagraph: DNParagraph read get_ParentParagraph;
    property FirstParagraph: DNParagraph read get_FirstParagraph;
    property LastParagraph: DNParagraph read get_LastParagraph;
    property Paragraphs: DNParagraphCollection read get_Paragraphs;
    property Tables: DNTableCollection read get_Tables;
    property IsInsertRevision: Boolean read get_IsInsertRevision;
    property IsDeleteRevision: Boolean read get_IsDeleteRevision;
    property IsMoveFromRevision: Boolean read get_IsMoveFromRevision;
    property IsMoveToRevision: Boolean read get_IsMoveToRevision;
    property Font: DNFont read get_Font;
    property IsComposite: Boolean read get_IsComposite;
    property HasChildNodes: Boolean read get_HasChildNodes;
    property ChildNodes: DNNodeCollection read get_ChildNodes;
    property FirstChild: DNNode read get_FirstChild;
    property LastChild: DNNode read get_LastChild;
    property Count: Int32 read get_Count;
    property NodeType: DNNodeType read get_NodeType;
    property ParentNode: DNCompositeNode read get_ParentNode;
    property Document: DNDocumentBase read get_Document;
    property PreviousSibling: DNNode read get_PreviousSibling;
    property NextSibling: DNNode read get_NextSibling;
    property Range: DNRange read get_Range;
    property CustomNodeId: Int32 read get_CustomNodeId write set_CustomNodeId;
  end;

  TDNInlineStory = class(TDNGenericImport<DNInlineStoryClass, DNInlineStory>) end;

  //-------------namespace: Aspose.Words----------------
  DNCommentClass = interface(DNInlineStoryClass)
  ['{59BDB005-8E31-50D6-B922-A414128F2730}']
  { constructors } 

    {class} function init(doc: DNDocumentBase): DNComment; overload;
    {class} function init(doc: DNDocumentBase; author: string; initial: string; dateTime: DDN.mscorlib.DNDateTime): DNComment; overload;

  end;

  [DNTypeName('Aspose.Words.Comment')]
  DNComment = interface(DNInlineStory)
  ['{701D74FC-B514-36D3-B422-2D042D3E9FF7}']
  { getters & setters } 

    function get_NodeType: DNNodeType;
    function get_StoryType: DNStoryType;
    function get_Id: Int32;
    function get_Initial: string;
    procedure set_Initial(value: string);
    function get_DateTime: DDN.mscorlib.DNDateTime;
    procedure set_DateTime(value: DDN.mscorlib.DNDateTime);
    function get_Author: string;
    procedure set_Author(value: string);
    function get_Ancestor: DNComment;
    function get_Replies: DNCommentCollection;
    function get_Done: Boolean;
    procedure set_Done(value: Boolean);
    function get_ParentParagraph: DNParagraph;
    function get_FirstParagraph: DNParagraph;
    function get_LastParagraph: DNParagraph;
    function get_Paragraphs: DNParagraphCollection;
    function get_Tables: DNTableCollection;
    function get_IsInsertRevision: Boolean;
    function get_IsDeleteRevision: Boolean;
    function get_IsMoveFromRevision: Boolean;
    function get_IsMoveToRevision: Boolean;
    function get_Font: DNFont;
    function get_IsComposite: Boolean;
    function get_HasChildNodes: Boolean;
    function get_ChildNodes: DNNodeCollection;
    function get_FirstChild: DNNode;
    function get_LastChild: DNNode;
    function get_Count: Int32;
    function get_ParentNode: DNCompositeNode;
    function get_Document: DNDocumentBase;
    function get_PreviousSibling: DNNode;
    function get_NextSibling: DNNode;
    function get_Range: DNRange;
    function get_CustomNodeId: Int32;
    procedure set_CustomNodeId(value: Int32);

  { methods } 

    function Accept(visitor: DNDocumentVisitor): Boolean;
    function AddReply(author: string; initial: string; dateTime: DDN.mscorlib.DNDateTime; text: string): DNComment;
    procedure RemoveReply(reply: DNComment);
    procedure RemoveAllReplies;
    procedure SetText(text: string);
    procedure EnsureMinimum;
    function GetText: string;
    function GetChildNodes(nodeType: DNNodeType; isDeep: Boolean): DNNodeCollection;
    function GetChild(nodeType: DNNodeType; index: Int32; isDeep: Boolean): DNNode;
    function SelectNodes(xpath: string): DNNodeList;
    function SelectSingleNode(xpath: string): DNNode;
    function GetEnumerator: DDN.mscorlib.DNIEnumerator<DNNode>;
    function AppendChild(newChild: DNNode): DNNode;
    function PrependChild(newChild: DNNode): DNNode;
    function InsertAfter(newChild: DNNode; refChild: DNNode): DNNode;
    function InsertBefore(newChild: DNNode; refChild: DNNode): DNNode;
    function RemoveChild(oldChild: DNNode): DNNode;
    procedure RemoveAllChildren;
    procedure RemoveSmartTags;
    function IndexOf(child: DNNode): Int32;
    function CreateNavigator: DDN.System.Xml.DNXPathNavigator;
    function Clone(isCloneChildren: Boolean): DNNode;
    function GetAncestor(ancestorType: DDN.mscorlib.DNType): DNCompositeNode; overload;
    function GetAncestor(ancestorType: DNNodeType): DNCompositeNode; overload;
    procedure Remove;
    function NextPreOrder(rootNode: DNNode): DNNode;
    function PreviousPreOrder(rootNode: DNNode): DNNode;
    function ToString(saveFormat: DNSaveFormat): string; overload;
    function ToString(saveOptions: DNSaveOptions): string; overload;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string; overload;

  { propertys } 

    property NodeType: DNNodeType read get_NodeType;
    property StoryType: DNStoryType read get_StoryType;
    property Id: Int32 read get_Id;
    property Initial: string read get_Initial write set_Initial;
    property DateTime: DDN.mscorlib.DNDateTime read get_DateTime write set_DateTime;
    property Author: string read get_Author write set_Author;
    property Ancestor: DNComment read get_Ancestor;
    property Replies: DNCommentCollection read get_Replies;
    property Done: Boolean read get_Done write set_Done;
    property ParentParagraph: DNParagraph read get_ParentParagraph;
    property FirstParagraph: DNParagraph read get_FirstParagraph;
    property LastParagraph: DNParagraph read get_LastParagraph;
    property Paragraphs: DNParagraphCollection read get_Paragraphs;
    property Tables: DNTableCollection read get_Tables;
    property IsInsertRevision: Boolean read get_IsInsertRevision;
    property IsDeleteRevision: Boolean read get_IsDeleteRevision;
    property IsMoveFromRevision: Boolean read get_IsMoveFromRevision;
    property IsMoveToRevision: Boolean read get_IsMoveToRevision;
    property Font: DNFont read get_Font;
    property IsComposite: Boolean read get_IsComposite;
    property HasChildNodes: Boolean read get_HasChildNodes;
    property ChildNodes: DNNodeCollection read get_ChildNodes;
    property FirstChild: DNNode read get_FirstChild;
    property LastChild: DNNode read get_LastChild;
    property Count: Int32 read get_Count;
    property ParentNode: DNCompositeNode read get_ParentNode;
    property Document: DNDocumentBase read get_Document;
    property PreviousSibling: DNNode read get_PreviousSibling;
    property NextSibling: DNNode read get_NextSibling;
    property Range: DNRange read get_Range;
    property CustomNodeId: Int32 read get_CustomNodeId write set_CustomNodeId;
  end;

  TDNComment = class(TDNGenericImport<DNCommentClass, DNComment>) end;

  //-------------namespace: Aspose.Words.Notes----------------
  DNFootnoteClass = interface(DNInlineStoryClass)
  ['{6725CAB5-9C77-5710-BA30-4DA40F93192A}']
  { constructors } 

    {class} function init(doc: DNDocumentBase; footnoteType: DNFootnoteType): DNFootnote;

  end;

  [DNTypeName('Aspose.Words.Notes.Footnote')]
  DNFootnote = interface(DNInlineStory)
  ['{6183FD76-8C36-3A95-8F73-8542BA059359}']
  { getters & setters } 

    function get_NodeType: DNNodeType;
    function get_StoryType: DNStoryType;
    function get_FootnoteType: DNFootnoteType;
    function get_IsAuto: Boolean;
    procedure set_IsAuto(value: Boolean);
    function get_ReferenceMark: string;
    procedure set_ReferenceMark(value: string);
    function get_ParentParagraph: DNParagraph;
    function get_FirstParagraph: DNParagraph;
    function get_LastParagraph: DNParagraph;
    function get_Paragraphs: DNParagraphCollection;
    function get_Tables: DNTableCollection;
    function get_IsInsertRevision: Boolean;
    function get_IsDeleteRevision: Boolean;
    function get_IsMoveFromRevision: Boolean;
    function get_IsMoveToRevision: Boolean;
    function get_Font: DNFont;
    function get_IsComposite: Boolean;
    function get_HasChildNodes: Boolean;
    function get_ChildNodes: DNNodeCollection;
    function get_FirstChild: DNNode;
    function get_LastChild: DNNode;
    function get_Count: Int32;
    function get_ParentNode: DNCompositeNode;
    function get_Document: DNDocumentBase;
    function get_PreviousSibling: DNNode;
    function get_NextSibling: DNNode;
    function get_Range: DNRange;
    function get_CustomNodeId: Int32;
    procedure set_CustomNodeId(value: Int32);

  { methods } 

    function Accept(visitor: DNDocumentVisitor): Boolean;
    procedure EnsureMinimum;
    function GetText: string;
    function GetChildNodes(nodeType: DNNodeType; isDeep: Boolean): DNNodeCollection;
    function GetChild(nodeType: DNNodeType; index: Int32; isDeep: Boolean): DNNode;
    function SelectNodes(xpath: string): DNNodeList;
    function SelectSingleNode(xpath: string): DNNode;
    function GetEnumerator: DDN.mscorlib.DNIEnumerator<DNNode>;
    function AppendChild(newChild: DNNode): DNNode;
    function PrependChild(newChild: DNNode): DNNode;
    function InsertAfter(newChild: DNNode; refChild: DNNode): DNNode;
    function InsertBefore(newChild: DNNode; refChild: DNNode): DNNode;
    function RemoveChild(oldChild: DNNode): DNNode;
    procedure RemoveAllChildren;
    procedure RemoveSmartTags;
    function IndexOf(child: DNNode): Int32;
    function CreateNavigator: DDN.System.Xml.DNXPathNavigator;
    function Clone(isCloneChildren: Boolean): DNNode;
    function GetAncestor(ancestorType: DDN.mscorlib.DNType): DNCompositeNode; overload;
    function GetAncestor(ancestorType: DNNodeType): DNCompositeNode; overload;
    procedure Remove;
    function NextPreOrder(rootNode: DNNode): DNNode;
    function PreviousPreOrder(rootNode: DNNode): DNNode;
    function ToString(saveFormat: DNSaveFormat): string; overload;
    function ToString(saveOptions: DNSaveOptions): string; overload;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string; overload;

  { propertys } 

    property NodeType: DNNodeType read get_NodeType;
    property StoryType: DNStoryType read get_StoryType;
    property FootnoteType: DNFootnoteType read get_FootnoteType;
    property IsAuto: Boolean read get_IsAuto write set_IsAuto;
    property ReferenceMark: string read get_ReferenceMark write set_ReferenceMark;
    property ParentParagraph: DNParagraph read get_ParentParagraph;
    property FirstParagraph: DNParagraph read get_FirstParagraph;
    property LastParagraph: DNParagraph read get_LastParagraph;
    property Paragraphs: DNParagraphCollection read get_Paragraphs;
    property Tables: DNTableCollection read get_Tables;
    property IsInsertRevision: Boolean read get_IsInsertRevision;
    property IsDeleteRevision: Boolean read get_IsDeleteRevision;
    property IsMoveFromRevision: Boolean read get_IsMoveFromRevision;
    property IsMoveToRevision: Boolean read get_IsMoveToRevision;
    property Font: DNFont read get_Font;
    property IsComposite: Boolean read get_IsComposite;
    property HasChildNodes: Boolean read get_HasChildNodes;
    property ChildNodes: DNNodeCollection read get_ChildNodes;
    property FirstChild: DNNode read get_FirstChild;
    property LastChild: DNNode read get_LastChild;
    property Count: Int32 read get_Count;
    property ParentNode: DNCompositeNode read get_ParentNode;
    property Document: DNDocumentBase read get_Document;
    property PreviousSibling: DNNode read get_PreviousSibling;
    property NextSibling: DNNode read get_NextSibling;
    property Range: DNRange read get_Range;
    property CustomNodeId: Int32 read get_CustomNodeId write set_CustomNodeId;
  end;

  TDNFootnote = class(TDNGenericImport<DNFootnoteClass, DNFootnote>) end;

  //-------------namespace: Aspose.Words.Markup----------------
  DNSmartTagClass = interface(DNCompositeNodeClass)
  ['{57CD8AFC-581D-5726-9AE9-F132EDBF312C}']
  { constructors } 

    {class} function init(doc: DNDocumentBase): DNSmartTag;

  end;

  [DNTypeName('Aspose.Words.Markup.SmartTag')]
  DNSmartTag = interface(DNCompositeNode)
  ['{E6D770E8-8E30-3F72-8EA0-4A209613AB0F}']
  { getters & setters } 

    function get_NodeType: DNNodeType;
    function get_Element: string;
    procedure set_Element(value: string);
    function get_Uri: string;
    procedure set_Uri(value: string);
    function get_Properties: DNCustomXmlPropertyCollection;
    function get_IsComposite: Boolean;
    function get_HasChildNodes: Boolean;
    function get_ChildNodes: DNNodeCollection;
    function get_FirstChild: DNNode;
    function get_LastChild: DNNode;
    function get_Count: Int32;
    function get_ParentNode: DNCompositeNode;
    function get_Document: DNDocumentBase;
    function get_PreviousSibling: DNNode;
    function get_NextSibling: DNNode;
    function get_Range: DNRange;
    function get_CustomNodeId: Int32;
    procedure set_CustomNodeId(value: Int32);

  { methods } 

    function Accept(visitor: DNDocumentVisitor): Boolean;
    function GetText: string;
    function GetChildNodes(nodeType: DNNodeType; isDeep: Boolean): DNNodeCollection;
    function GetChild(nodeType: DNNodeType; index: Int32; isDeep: Boolean): DNNode;
    function SelectNodes(xpath: string): DNNodeList;
    function SelectSingleNode(xpath: string): DNNode;
    function GetEnumerator: DDN.mscorlib.DNIEnumerator<DNNode>;
    function AppendChild(newChild: DNNode): DNNode;
    function PrependChild(newChild: DNNode): DNNode;
    function InsertAfter(newChild: DNNode; refChild: DNNode): DNNode;
    function InsertBefore(newChild: DNNode; refChild: DNNode): DNNode;
    function RemoveChild(oldChild: DNNode): DNNode;
    procedure RemoveAllChildren;
    procedure RemoveSmartTags;
    function IndexOf(child: DNNode): Int32;
    function CreateNavigator: DDN.System.Xml.DNXPathNavigator;
    function Clone(isCloneChildren: Boolean): DNNode;
    function GetAncestor(ancestorType: DDN.mscorlib.DNType): DNCompositeNode; overload;
    function GetAncestor(ancestorType: DNNodeType): DNCompositeNode; overload;
    procedure Remove;
    function NextPreOrder(rootNode: DNNode): DNNode;
    function PreviousPreOrder(rootNode: DNNode): DNNode;
    function ToString(saveFormat: DNSaveFormat): string; overload;
    function ToString(saveOptions: DNSaveOptions): string; overload;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string; overload;

  { propertys } 

    property NodeType: DNNodeType read get_NodeType;
    property Element: string read get_Element write set_Element;
    property Uri: string read get_Uri write set_Uri;
    property Properties: DNCustomXmlPropertyCollection read get_Properties;
    property IsComposite: Boolean read get_IsComposite;
    property HasChildNodes: Boolean read get_HasChildNodes;
    property ChildNodes: DNNodeCollection read get_ChildNodes;
    property FirstChild: DNNode read get_FirstChild;
    property LastChild: DNNode read get_LastChild;
    property Count: Int32 read get_Count;
    property ParentNode: DNCompositeNode read get_ParentNode;
    property Document: DNDocumentBase read get_Document;
    property PreviousSibling: DNNode read get_PreviousSibling;
    property NextSibling: DNNode read get_NextSibling;
    property Range: DNRange read get_Range;
    property CustomNodeId: Int32 read get_CustomNodeId write set_CustomNodeId;
  end;

  TDNSmartTag = class(TDNGenericImport<DNSmartTagClass, DNSmartTag>) end;

  //-------------namespace: Aspose.Words.Markup----------------
  DNStructuredDocumentTagClass = interface(DNCompositeNodeClass)
  ['{BC6B84D0-32C9-5D8C-A88C-552C8A19DC13}']
  { constructors } 

    {class} function init(doc: DNDocumentBase; &type: DNSdtType; level: DNMarkupLevel): DNStructuredDocumentTag;

  end;

  [DNTypeName('Aspose.Words.Markup.StructuredDocumentTag')]
  DNStructuredDocumentTag = interface(DNCompositeNode)
  ['{7698ED80-B832-3D35-8EDC-10DA363FB614}']
  { getters & setters } 

    function get_NodeType: DNNodeType;
    function get_Placeholder: DNBuildingBlock;
    function get_PlaceholderName: string;
    procedure set_PlaceholderName(value: string);
    function get_Level: DNMarkupLevel;
    function get_SdtType: DNSdtType;
    function get_Id: Int32;
    function get_LockContentControl: Boolean;
    procedure set_LockContentControl(value: Boolean);
    function get_LockContents: Boolean;
    procedure set_LockContents(value: Boolean);
    function get_IsShowingPlaceholderText: Boolean;
    procedure set_IsShowingPlaceholderText(value: Boolean);
    function get_Tag: string;
    procedure set_Tag(value: string);
    function get_ContentsFont: DNFont;
    function get_EndCharacterFont: DNFont;
    function get_IsTemporary: Boolean;
    procedure set_IsTemporary(value: Boolean);
    function get_Title: string;
    procedure set_Title(value: string);
    function get_ListItems: DNSdtListItemCollection;
    function get_Checked: Boolean;
    procedure set_Checked(value: Boolean);
    function get_DateDisplayLocale: Int32;
    procedure set_DateDisplayLocale(value: Int32);
    function get_DateDisplayFormat: string;
    procedure set_DateDisplayFormat(value: string);
    function get_FullDate: DDN.mscorlib.DNDateTime;
    procedure set_FullDate(value: DDN.mscorlib.DNDateTime);
    function get_DateStorageFormat: DNSdtDateStorageFormat;
    procedure set_DateStorageFormat(value: DNSdtDateStorageFormat);
    function get_CalendarType: DNSdtCalendarType;
    procedure set_CalendarType(value: DNSdtCalendarType);
    function get_BuildingBlockGallery: string;
    procedure set_BuildingBlockGallery(value: string);
    function get_BuildingBlockCategory: string;
    procedure set_BuildingBlockCategory(value: string);
    function get_Multiline: Boolean;
    procedure set_Multiline(value: Boolean);
    function get_Color: DDN.System.Drawing.DNColor;
    procedure set_Color(value: DDN.System.Drawing.DNColor);
    function get_Style: DNStyle;
    procedure set_Style(value: DNStyle);
    function get_StyleName: string;
    procedure set_StyleName(value: string);
    function get_XmlMapping: DNXmlMapping;
    function get_IsComposite: Boolean;
    function get_HasChildNodes: Boolean;
    function get_ChildNodes: DNNodeCollection;
    function get_FirstChild: DNNode;
    function get_LastChild: DNNode;
    function get_Count: Int32;
    function get_ParentNode: DNCompositeNode;
    function get_Document: DNDocumentBase;
    function get_PreviousSibling: DNNode;
    function get_NextSibling: DNNode;
    function get_Range: DNRange;
    function get_CustomNodeId: Int32;
    procedure set_CustomNodeId(value: Int32);

  { methods } 

    procedure SetCheckedSymbol(characterCode: Int32; fontName: string);
    procedure SetUncheckedSymbol(characterCode: Int32; fontName: string);
    procedure RemoveSelfOnly;
    function Accept(visitor: DNDocumentVisitor): Boolean;
    procedure Clear;
    function GetText: string;
    function GetChildNodes(nodeType: DNNodeType; isDeep: Boolean): DNNodeCollection;
    function GetChild(nodeType: DNNodeType; index: Int32; isDeep: Boolean): DNNode;
    function SelectNodes(xpath: string): DNNodeList;
    function SelectSingleNode(xpath: string): DNNode;
    function GetEnumerator: DDN.mscorlib.DNIEnumerator<DNNode>;
    function AppendChild(newChild: DNNode): DNNode;
    function PrependChild(newChild: DNNode): DNNode;
    function InsertAfter(newChild: DNNode; refChild: DNNode): DNNode;
    function InsertBefore(newChild: DNNode; refChild: DNNode): DNNode;
    function RemoveChild(oldChild: DNNode): DNNode;
    procedure RemoveAllChildren;
    procedure RemoveSmartTags;
    function IndexOf(child: DNNode): Int32;
    function CreateNavigator: DDN.System.Xml.DNXPathNavigator;
    function Clone(isCloneChildren: Boolean): DNNode;
    function GetAncestor(ancestorType: DDN.mscorlib.DNType): DNCompositeNode; overload;
    function GetAncestor(ancestorType: DNNodeType): DNCompositeNode; overload;
    procedure Remove;
    function NextPreOrder(rootNode: DNNode): DNNode;
    function PreviousPreOrder(rootNode: DNNode): DNNode;
    function ToString(saveFormat: DNSaveFormat): string; overload;
    function ToString(saveOptions: DNSaveOptions): string; overload;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string; overload;

  { propertys } 

    property NodeType: DNNodeType read get_NodeType;
    property Placeholder: DNBuildingBlock read get_Placeholder;
    property PlaceholderName: string read get_PlaceholderName write set_PlaceholderName;
    property Level: DNMarkupLevel read get_Level;
    property SdtType: DNSdtType read get_SdtType;
    property Id: Int32 read get_Id;
    property LockContentControl: Boolean read get_LockContentControl write set_LockContentControl;
    property LockContents: Boolean read get_LockContents write set_LockContents;
    property IsShowingPlaceholderText: Boolean read get_IsShowingPlaceholderText write set_IsShowingPlaceholderText;
    property Tag: string read get_Tag write set_Tag;
    property ContentsFont: DNFont read get_ContentsFont;
    property EndCharacterFont: DNFont read get_EndCharacterFont;
    property IsTemporary: Boolean read get_IsTemporary write set_IsTemporary;
    property Title: string read get_Title write set_Title;
    property ListItems: DNSdtListItemCollection read get_ListItems;
    property Checked: Boolean read get_Checked write set_Checked;
    property DateDisplayLocale: Int32 read get_DateDisplayLocale write set_DateDisplayLocale;
    property DateDisplayFormat: string read get_DateDisplayFormat write set_DateDisplayFormat;
    property FullDate: DDN.mscorlib.DNDateTime read get_FullDate write set_FullDate;
    property DateStorageFormat: DNSdtDateStorageFormat read get_DateStorageFormat write set_DateStorageFormat;
    property CalendarType: DNSdtCalendarType read get_CalendarType write set_CalendarType;
    property BuildingBlockGallery: string read get_BuildingBlockGallery write set_BuildingBlockGallery;
    property BuildingBlockCategory: string read get_BuildingBlockCategory write set_BuildingBlockCategory;
    property Multiline: Boolean read get_Multiline write set_Multiline;
    property Color: DDN.System.Drawing.DNColor read get_Color write set_Color;
    property Style: DNStyle read get_Style write set_Style;
    property StyleName: string read get_StyleName write set_StyleName;
    property XmlMapping: DNXmlMapping read get_XmlMapping;
    property IsComposite: Boolean read get_IsComposite;
    property HasChildNodes: Boolean read get_HasChildNodes;
    property ChildNodes: DNNodeCollection read get_ChildNodes;
    property FirstChild: DNNode read get_FirstChild;
    property LastChild: DNNode read get_LastChild;
    property Count: Int32 read get_Count;
    property ParentNode: DNCompositeNode read get_ParentNode;
    property Document: DNDocumentBase read get_Document;
    property PreviousSibling: DNNode read get_PreviousSibling;
    property NextSibling: DNNode read get_NextSibling;
    property Range: DNRange read get_Range;
    property CustomNodeId: Int32 read get_CustomNodeId write set_CustomNodeId;
  end;

  TDNStructuredDocumentTag = class(TDNGenericImport<DNStructuredDocumentTagClass, DNStructuredDocumentTag>) end;

  //-------------namespace: Aspose.Words.Math----------------
  DNOfficeMathClass = interface(DNCompositeNodeClass)
  ['{8ACB6F38-844B-52D5-9CA2-E1FD0C982353}']
  end;

  [DNTypeName('Aspose.Words.Math.OfficeMath')]
  DNOfficeMath = interface(DNCompositeNode)
  ['{9CC83208-8525-3DBD-A708-35E0A8F97636}']
  { getters & setters } 

    function get_NodeType: DNNodeType;
    function get_ParentParagraph: DNParagraph;
    function get_MathObjectType: DNMathObjectType;
    function get_EquationXmlEncoding: DDN.mscorlib.DNEncoding;
    procedure set_EquationXmlEncoding(value: DDN.mscorlib.DNEncoding);
    function get_Justification: DNOfficeMathJustification;
    procedure set_Justification(value: DNOfficeMathJustification);
    function get_DisplayType: DNOfficeMathDisplayType;
    procedure set_DisplayType(value: DNOfficeMathDisplayType);
    function get_IsComposite: Boolean;
    function get_HasChildNodes: Boolean;
    function get_ChildNodes: DNNodeCollection;
    function get_FirstChild: DNNode;
    function get_LastChild: DNNode;
    function get_Count: Int32;
    function get_ParentNode: DNCompositeNode;
    function get_Document: DNDocumentBase;
    function get_PreviousSibling: DNNode;
    function get_NextSibling: DNNode;
    function get_Range: DNRange;
    function get_CustomNodeId: Int32;
    procedure set_CustomNodeId(value: Int32);

  { methods } 

    function Accept(visitor: DNDocumentVisitor): Boolean;
    function GetMathRenderer: DNOfficeMathRenderer;
    function GetText: string;
    function GetChildNodes(nodeType: DNNodeType; isDeep: Boolean): DNNodeCollection;
    function GetChild(nodeType: DNNodeType; index: Int32; isDeep: Boolean): DNNode;
    function SelectNodes(xpath: string): DNNodeList;
    function SelectSingleNode(xpath: string): DNNode;
    function GetEnumerator: DDN.mscorlib.DNIEnumerator<DNNode>;
    function AppendChild(newChild: DNNode): DNNode;
    function PrependChild(newChild: DNNode): DNNode;
    function InsertAfter(newChild: DNNode; refChild: DNNode): DNNode;
    function InsertBefore(newChild: DNNode; refChild: DNNode): DNNode;
    function RemoveChild(oldChild: DNNode): DNNode;
    procedure RemoveAllChildren;
    procedure RemoveSmartTags;
    function IndexOf(child: DNNode): Int32;
    function CreateNavigator: DDN.System.Xml.DNXPathNavigator;
    function Clone(isCloneChildren: Boolean): DNNode;
    function GetAncestor(ancestorType: DDN.mscorlib.DNType): DNCompositeNode; overload;
    function GetAncestor(ancestorType: DNNodeType): DNCompositeNode; overload;
    procedure Remove;
    function NextPreOrder(rootNode: DNNode): DNNode;
    function PreviousPreOrder(rootNode: DNNode): DNNode;
    function ToString(saveFormat: DNSaveFormat): string; overload;
    function ToString(saveOptions: DNSaveOptions): string; overload;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string; overload;

  { propertys } 

    property NodeType: DNNodeType read get_NodeType;
    property ParentParagraph: DNParagraph read get_ParentParagraph;
    property MathObjectType: DNMathObjectType read get_MathObjectType;
    property EquationXmlEncoding: DDN.mscorlib.DNEncoding read get_EquationXmlEncoding write set_EquationXmlEncoding;
    property Justification: DNOfficeMathJustification read get_Justification write set_Justification;
    property DisplayType: DNOfficeMathDisplayType read get_DisplayType write set_DisplayType;
    property IsComposite: Boolean read get_IsComposite;
    property HasChildNodes: Boolean read get_HasChildNodes;
    property ChildNodes: DNNodeCollection read get_ChildNodes;
    property FirstChild: DNNode read get_FirstChild;
    property LastChild: DNNode read get_LastChild;
    property Count: Int32 read get_Count;
    property ParentNode: DNCompositeNode read get_ParentNode;
    property Document: DNDocumentBase read get_Document;
    property PreviousSibling: DNNode read get_PreviousSibling;
    property NextSibling: DNNode read get_NextSibling;
    property Range: DNRange read get_Range;
    property CustomNodeId: Int32 read get_CustomNodeId write set_CustomNodeId;
  end;

  TDNOfficeMath = class(TDNGenericImport<DNOfficeMathClass, DNOfficeMath>) end;

  //-------------namespace: Aspose.Words----------------
  DNParagraphClass = interface(DNCompositeNodeClass)
  ['{671A0A0B-1989-5411-BF3A-3310E8DFCDA4}']
  { constructors } 

    {class} function init(doc: DNDocumentBase): DNParagraph;

  end;

  [DNTypeName('Aspose.Words.Paragraph')]
  DNParagraph = interface(DNCompositeNode)
  ['{E72DEBC5-7B23-3148-8A96-1E336C74E9AD}']
  { getters & setters } 

    function get_NodeType: DNNodeType;
    function get_ParentStory: DNStory;
    function get_ParentSection: DNSection;
    function get_IsInCell: Boolean;
    function get_IsEndOfCell: Boolean;
    function get_BreakIsStyleSeparator: Boolean;
    function get_IsEndOfSection: Boolean;
    function get_IsEndOfHeaderFooter: Boolean;
    function get_IsEndOfDocument: Boolean;
    function get_ParagraphFormat: DNParagraphFormat;
    function get_ListFormat: DNListFormat;
    function get_FrameFormat: DNFrameFormat;
    function get_ListLabel: DNListLabel;
    function get_Runs: DNRunCollection;
    function get_ParagraphBreakFont: DNFont;
    function get_IsInsertRevision: Boolean;
    function get_IsDeleteRevision: Boolean;
    function get_IsMoveFromRevision: Boolean;
    function get_IsMoveToRevision: Boolean;
    function get_IsFormatRevision: Boolean;
    function get_IsListItem: Boolean;
    function get_IsComposite: Boolean;
    function get_HasChildNodes: Boolean;
    function get_ChildNodes: DNNodeCollection;
    function get_FirstChild: DNNode;
    function get_LastChild: DNNode;
    function get_Count: Int32;
    function get_ParentNode: DNCompositeNode;
    function get_Document: DNDocumentBase;
    function get_PreviousSibling: DNNode;
    function get_NextSibling: DNNode;
    function get_Range: DNRange;
    function get_CustomNodeId: Int32;
    procedure set_CustomNodeId(value: Int32);

  { methods } 

    function Accept(visitor: DNDocumentVisitor): Boolean;
    function GetText: string;
    function GetEffectiveTabStops: TArray<DNTabStop>;
    function JoinRunsWithSameFormatting: Int32;
    function AppendField(fieldType: DNFieldType; updateField: Boolean): DNField; overload;
    function AppendField(fieldCode: string): DNField; overload;
    function AppendField(fieldCode: string; fieldValue: string): DNField; overload;
    function InsertField(fieldType: DNFieldType; updateField: Boolean; refNode: DNNode; isAfter: Boolean): DNField; overload;
    function InsertField(fieldCode: string; refNode: DNNode; isAfter: Boolean): DNField; overload;
    function InsertField(fieldCode: string; fieldValue: string; refNode: DNNode; isAfter: Boolean): DNField; overload;
    function GetChildNodes(nodeType: DNNodeType; isDeep: Boolean): DNNodeCollection;
    function GetChild(nodeType: DNNodeType; index: Int32; isDeep: Boolean): DNNode;
    function SelectNodes(xpath: string): DNNodeList;
    function SelectSingleNode(xpath: string): DNNode;
    function GetEnumerator: DDN.mscorlib.DNIEnumerator<DNNode>;
    function AppendChild(newChild: DNNode): DNNode;
    function PrependChild(newChild: DNNode): DNNode;
    function InsertAfter(newChild: DNNode; refChild: DNNode): DNNode;
    function InsertBefore(newChild: DNNode; refChild: DNNode): DNNode;
    function RemoveChild(oldChild: DNNode): DNNode;
    procedure RemoveAllChildren;
    procedure RemoveSmartTags;
    function IndexOf(child: DNNode): Int32;
    function CreateNavigator: DDN.System.Xml.DNXPathNavigator;
    function Clone(isCloneChildren: Boolean): DNNode;
    function GetAncestor(ancestorType: DDN.mscorlib.DNType): DNCompositeNode; overload;
    function GetAncestor(ancestorType: DNNodeType): DNCompositeNode; overload;
    procedure Remove;
    function NextPreOrder(rootNode: DNNode): DNNode;
    function PreviousPreOrder(rootNode: DNNode): DNNode;
    function ToString(saveFormat: DNSaveFormat): string; overload;
    function ToString(saveOptions: DNSaveOptions): string; overload;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string; overload;

  { propertys } 

    property NodeType: DNNodeType read get_NodeType;
    property ParentStory: DNStory read get_ParentStory;
    property ParentSection: DNSection read get_ParentSection;
    property IsInCell: Boolean read get_IsInCell;
    property IsEndOfCell: Boolean read get_IsEndOfCell;
    property BreakIsStyleSeparator: Boolean read get_BreakIsStyleSeparator;
    property IsEndOfSection: Boolean read get_IsEndOfSection;
    property IsEndOfHeaderFooter: Boolean read get_IsEndOfHeaderFooter;
    property IsEndOfDocument: Boolean read get_IsEndOfDocument;
    property ParagraphFormat: DNParagraphFormat read get_ParagraphFormat;
    property ListFormat: DNListFormat read get_ListFormat;
    property FrameFormat: DNFrameFormat read get_FrameFormat;
    property ListLabel: DNListLabel read get_ListLabel;
    property Runs: DNRunCollection read get_Runs;
    property ParagraphBreakFont: DNFont read get_ParagraphBreakFont;
    property IsInsertRevision: Boolean read get_IsInsertRevision;
    property IsDeleteRevision: Boolean read get_IsDeleteRevision;
    property IsMoveFromRevision: Boolean read get_IsMoveFromRevision;
    property IsMoveToRevision: Boolean read get_IsMoveToRevision;
    property IsFormatRevision: Boolean read get_IsFormatRevision;
    property IsListItem: Boolean read get_IsListItem;
    property IsComposite: Boolean read get_IsComposite;
    property HasChildNodes: Boolean read get_HasChildNodes;
    property ChildNodes: DNNodeCollection read get_ChildNodes;
    property FirstChild: DNNode read get_FirstChild;
    property LastChild: DNNode read get_LastChild;
    property Count: Int32 read get_Count;
    property ParentNode: DNCompositeNode read get_ParentNode;
    property Document: DNDocumentBase read get_Document;
    property PreviousSibling: DNNode read get_PreviousSibling;
    property NextSibling: DNNode read get_NextSibling;
    property Range: DNRange read get_Range;
    property CustomNodeId: Int32 read get_CustomNodeId write set_CustomNodeId;
  end;

  TDNParagraph = class(TDNGenericImport<DNParagraphClass, DNParagraph>) end;

  //-------------namespace: Aspose.Words----------------
  DNSectionClass = interface(DNCompositeNodeClass)
  ['{A669DD85-73B6-5801-A7C7-636CD9E340D1}']
  { constructors } 

    {class} function init(doc: DNDocumentBase): DNSection;

  end;

  [DNTypeName('Aspose.Words.Section')]
  DNSection = interface(DNCompositeNode)
  ['{E6FD02C8-94DD-3784-AB78-FC147DA02805}']
  { getters & setters } 

    function get_NodeType: DNNodeType;
    function get_Body: DNBody;
    function get_HeadersFooters: DNHeaderFooterCollection;
    function get_PageSetup: DNPageSetup;
    function get_ProtectedForForms: Boolean;
    procedure set_ProtectedForForms(value: Boolean);
    function get_IsComposite: Boolean;
    function get_HasChildNodes: Boolean;
    function get_ChildNodes: DNNodeCollection;
    function get_FirstChild: DNNode;
    function get_LastChild: DNNode;
    function get_Count: Int32;
    function get_ParentNode: DNCompositeNode;
    function get_Document: DNDocumentBase;
    function get_PreviousSibling: DNNode;
    function get_NextSibling: DNNode;
    function get_Range: DNRange;
    function get_CustomNodeId: Int32;
    procedure set_CustomNodeId(value: Int32);

  { methods } 

    function Clone: DNSection; overload;
    function Accept(visitor: DNDocumentVisitor): Boolean;
    procedure PrependContent(sourceSection: DNSection);
    procedure AppendContent(sourceSection: DNSection);
    procedure ClearContent;
    procedure ClearHeadersFooters;
    procedure DeleteHeaderFooterShapes;
    procedure EnsureMinimum;
    function GetText: string;
    function GetChildNodes(nodeType: DNNodeType; isDeep: Boolean): DNNodeCollection;
    function GetChild(nodeType: DNNodeType; index: Int32; isDeep: Boolean): DNNode;
    function SelectNodes(xpath: string): DNNodeList;
    function SelectSingleNode(xpath: string): DNNode;
    function GetEnumerator: DDN.mscorlib.DNIEnumerator<DNNode>;
    function AppendChild(newChild: DNNode): DNNode;
    function PrependChild(newChild: DNNode): DNNode;
    function InsertAfter(newChild: DNNode; refChild: DNNode): DNNode;
    function InsertBefore(newChild: DNNode; refChild: DNNode): DNNode;
    function RemoveChild(oldChild: DNNode): DNNode;
    procedure RemoveAllChildren;
    procedure RemoveSmartTags;
    function IndexOf(child: DNNode): Int32;
    function CreateNavigator: DDN.System.Xml.DNXPathNavigator;
    function Clone(isCloneChildren: Boolean): DNNode; overload;
    function GetAncestor(ancestorType: DDN.mscorlib.DNType): DNCompositeNode; overload;
    function GetAncestor(ancestorType: DNNodeType): DNCompositeNode; overload;
    procedure Remove;
    function NextPreOrder(rootNode: DNNode): DNNode;
    function PreviousPreOrder(rootNode: DNNode): DNNode;
    function ToString(saveFormat: DNSaveFormat): string; overload;
    function ToString(saveOptions: DNSaveOptions): string; overload;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string; overload;

  { propertys } 

    property NodeType: DNNodeType read get_NodeType;
    property Body: DNBody read get_Body;
    property HeadersFooters: DNHeaderFooterCollection read get_HeadersFooters;
    property PageSetup: DNPageSetup read get_PageSetup;
    property ProtectedForForms: Boolean read get_ProtectedForForms write set_ProtectedForForms;
    property IsComposite: Boolean read get_IsComposite;
    property HasChildNodes: Boolean read get_HasChildNodes;
    property ChildNodes: DNNodeCollection read get_ChildNodes;
    property FirstChild: DNNode read get_FirstChild;
    property LastChild: DNNode read get_LastChild;
    property Count: Int32 read get_Count;
    property ParentNode: DNCompositeNode read get_ParentNode;
    property Document: DNDocumentBase read get_Document;
    property PreviousSibling: DNNode read get_PreviousSibling;
    property NextSibling: DNNode read get_NextSibling;
    property Range: DNRange read get_Range;
    property CustomNodeId: Int32 read get_CustomNodeId write set_CustomNodeId;
  end;

  TDNSection = class(TDNGenericImport<DNSectionClass, DNSection>) end;

  //-------------namespace: Aspose.Words----------------
  DNStoryClass = interface(DNCompositeNodeClass)
  ['{38A5BD53-AF70-548B-8012-94DFD24B3EAE}']
  end;

  [DNTypeName('Aspose.Words.Story')]
  DNStory = interface(DNCompositeNode)
  ['{08342A10-1618-3B77-9DD9-2CAD04F3551D}']
  { getters & setters } 

    function get_StoryType: DNStoryType;
    function get_FirstParagraph: DNParagraph;
    function get_LastParagraph: DNParagraph;
    function get_Paragraphs: DNParagraphCollection;
    function get_Tables: DNTableCollection;
    function get_IsComposite: Boolean;
    function get_HasChildNodes: Boolean;
    function get_ChildNodes: DNNodeCollection;
    function get_FirstChild: DNNode;
    function get_LastChild: DNNode;
    function get_Count: Int32;
    function get_NodeType: DNNodeType;
    function get_ParentNode: DNCompositeNode;
    function get_Document: DNDocumentBase;
    function get_PreviousSibling: DNNode;
    function get_NextSibling: DNNode;
    function get_Range: DNRange;
    function get_CustomNodeId: Int32;
    procedure set_CustomNodeId(value: Int32);

  { methods } 

    procedure DeleteShapes;
    function AppendParagraph(text: string): DNParagraph;
    function GetText: string;
    function GetChildNodes(nodeType: DNNodeType; isDeep: Boolean): DNNodeCollection;
    function GetChild(nodeType: DNNodeType; index: Int32; isDeep: Boolean): DNNode;
    function SelectNodes(xpath: string): DNNodeList;
    function SelectSingleNode(xpath: string): DNNode;
    function GetEnumerator: DDN.mscorlib.DNIEnumerator<DNNode>;
    function AppendChild(newChild: DNNode): DNNode;
    function PrependChild(newChild: DNNode): DNNode;
    function InsertAfter(newChild: DNNode; refChild: DNNode): DNNode;
    function InsertBefore(newChild: DNNode; refChild: DNNode): DNNode;
    function RemoveChild(oldChild: DNNode): DNNode;
    procedure RemoveAllChildren;
    procedure RemoveSmartTags;
    function IndexOf(child: DNNode): Int32;
    function CreateNavigator: DDN.System.Xml.DNXPathNavigator;
    function Clone(isCloneChildren: Boolean): DNNode;
    function Accept(visitor: DNDocumentVisitor): Boolean;
    function GetAncestor(ancestorType: DDN.mscorlib.DNType): DNCompositeNode; overload;
    function GetAncestor(ancestorType: DNNodeType): DNCompositeNode; overload;
    procedure Remove;
    function NextPreOrder(rootNode: DNNode): DNNode;
    function PreviousPreOrder(rootNode: DNNode): DNNode;
    function ToString(saveFormat: DNSaveFormat): string; overload;
    function ToString(saveOptions: DNSaveOptions): string; overload;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string; overload;

  { propertys } 

    property StoryType: DNStoryType read get_StoryType;
    property FirstParagraph: DNParagraph read get_FirstParagraph;
    property LastParagraph: DNParagraph read get_LastParagraph;
    property Paragraphs: DNParagraphCollection read get_Paragraphs;
    property Tables: DNTableCollection read get_Tables;
    property IsComposite: Boolean read get_IsComposite;
    property HasChildNodes: Boolean read get_HasChildNodes;
    property ChildNodes: DNNodeCollection read get_ChildNodes;
    property FirstChild: DNNode read get_FirstChild;
    property LastChild: DNNode read get_LastChild;
    property Count: Int32 read get_Count;
    property NodeType: DNNodeType read get_NodeType;
    property ParentNode: DNCompositeNode read get_ParentNode;
    property Document: DNDocumentBase read get_Document;
    property PreviousSibling: DNNode read get_PreviousSibling;
    property NextSibling: DNNode read get_NextSibling;
    property Range: DNRange read get_Range;
    property CustomNodeId: Int32 read get_CustomNodeId write set_CustomNodeId;
  end;

  TDNStory = class(TDNGenericImport<DNStoryClass, DNStory>) end;

  //-------------namespace: Aspose.Words----------------
  DNBodyClass = interface(DNStoryClass)
  ['{1F5E608B-C732-507E-B81C-F51EDE3921DB}']
  { constructors } 

    {class} function init(doc: DNDocumentBase): DNBody;

  end;

  [DNTypeName('Aspose.Words.Body')]
  DNBody = interface(DNStory)
  ['{48FABDF0-319D-3714-AEB6-1D21F0F5040F}']
  { getters & setters } 

    function get_NodeType: DNNodeType;
    function get_ParentSection: DNSection;
    function get_StoryType: DNStoryType;
    function get_FirstParagraph: DNParagraph;
    function get_LastParagraph: DNParagraph;
    function get_Paragraphs: DNParagraphCollection;
    function get_Tables: DNTableCollection;
    function get_IsComposite: Boolean;
    function get_HasChildNodes: Boolean;
    function get_ChildNodes: DNNodeCollection;
    function get_FirstChild: DNNode;
    function get_LastChild: DNNode;
    function get_Count: Int32;
    function get_ParentNode: DNCompositeNode;
    function get_Document: DNDocumentBase;
    function get_PreviousSibling: DNNode;
    function get_NextSibling: DNNode;
    function get_Range: DNRange;
    function get_CustomNodeId: Int32;
    procedure set_CustomNodeId(value: Int32);

  { methods } 

    function Accept(visitor: DNDocumentVisitor): Boolean;
    procedure EnsureMinimum;
    procedure DeleteShapes;
    function AppendParagraph(text: string): DNParagraph;
    function GetText: string;
    function GetChildNodes(nodeType: DNNodeType; isDeep: Boolean): DNNodeCollection;
    function GetChild(nodeType: DNNodeType; index: Int32; isDeep: Boolean): DNNode;
    function SelectNodes(xpath: string): DNNodeList;
    function SelectSingleNode(xpath: string): DNNode;
    function GetEnumerator: DDN.mscorlib.DNIEnumerator<DNNode>;
    function AppendChild(newChild: DNNode): DNNode;
    function PrependChild(newChild: DNNode): DNNode;
    function InsertAfter(newChild: DNNode; refChild: DNNode): DNNode;
    function InsertBefore(newChild: DNNode; refChild: DNNode): DNNode;
    function RemoveChild(oldChild: DNNode): DNNode;
    procedure RemoveAllChildren;
    procedure RemoveSmartTags;
    function IndexOf(child: DNNode): Int32;
    function CreateNavigator: DDN.System.Xml.DNXPathNavigator;
    function Clone(isCloneChildren: Boolean): DNNode;
    function GetAncestor(ancestorType: DDN.mscorlib.DNType): DNCompositeNode; overload;
    function GetAncestor(ancestorType: DNNodeType): DNCompositeNode; overload;
    procedure Remove;
    function NextPreOrder(rootNode: DNNode): DNNode;
    function PreviousPreOrder(rootNode: DNNode): DNNode;
    function ToString(saveFormat: DNSaveFormat): string; overload;
    function ToString(saveOptions: DNSaveOptions): string; overload;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string; overload;

  { propertys } 

    property NodeType: DNNodeType read get_NodeType;
    property ParentSection: DNSection read get_ParentSection;
    property StoryType: DNStoryType read get_StoryType;
    property FirstParagraph: DNParagraph read get_FirstParagraph;
    property LastParagraph: DNParagraph read get_LastParagraph;
    property Paragraphs: DNParagraphCollection read get_Paragraphs;
    property Tables: DNTableCollection read get_Tables;
    property IsComposite: Boolean read get_IsComposite;
    property HasChildNodes: Boolean read get_HasChildNodes;
    property ChildNodes: DNNodeCollection read get_ChildNodes;
    property FirstChild: DNNode read get_FirstChild;
    property LastChild: DNNode read get_LastChild;
    property Count: Int32 read get_Count;
    property ParentNode: DNCompositeNode read get_ParentNode;
    property Document: DNDocumentBase read get_Document;
    property PreviousSibling: DNNode read get_PreviousSibling;
    property NextSibling: DNNode read get_NextSibling;
    property Range: DNRange read get_Range;
    property CustomNodeId: Int32 read get_CustomNodeId write set_CustomNodeId;
  end;

  TDNBody = class(TDNGenericImport<DNBodyClass, DNBody>) end;

  //-------------namespace: Aspose.Words----------------
  DNHeaderFooterClass = interface(DNStoryClass)
  ['{D495DD52-C917-5F94-BF65-1D7643E24E6F}']
  { constructors } 

    {class} function init(doc: DNDocumentBase; headerFooterType: DNHeaderFooterType): DNHeaderFooter;

  end;

  [DNTypeName('Aspose.Words.HeaderFooter')]
  DNHeaderFooter = interface(DNStory)
  ['{BDC9F3D3-A70B-3832-8F60-5368EDA45E37}']
  { getters & setters } 

    function get_NodeType: DNNodeType;
    function get_ParentSection: DNSection;
    function get_HeaderFooterType: DNHeaderFooterType;
    function get_IsHeader: Boolean;
    function get_IsLinkedToPrevious: Boolean;
    procedure set_IsLinkedToPrevious(value: Boolean);
    function get_StoryType: DNStoryType;
    function get_FirstParagraph: DNParagraph;
    function get_LastParagraph: DNParagraph;
    function get_Paragraphs: DNParagraphCollection;
    function get_Tables: DNTableCollection;
    function get_IsComposite: Boolean;
    function get_HasChildNodes: Boolean;
    function get_ChildNodes: DNNodeCollection;
    function get_FirstChild: DNNode;
    function get_LastChild: DNNode;
    function get_Count: Int32;
    function get_ParentNode: DNCompositeNode;
    function get_Document: DNDocumentBase;
    function get_PreviousSibling: DNNode;
    function get_NextSibling: DNNode;
    function get_Range: DNRange;
    function get_CustomNodeId: Int32;
    procedure set_CustomNodeId(value: Int32);

  { methods } 

    function Accept(visitor: DNDocumentVisitor): Boolean;
    procedure DeleteShapes;
    function AppendParagraph(text: string): DNParagraph;
    function GetText: string;
    function GetChildNodes(nodeType: DNNodeType; isDeep: Boolean): DNNodeCollection;
    function GetChild(nodeType: DNNodeType; index: Int32; isDeep: Boolean): DNNode;
    function SelectNodes(xpath: string): DNNodeList;
    function SelectSingleNode(xpath: string): DNNode;
    function GetEnumerator: DDN.mscorlib.DNIEnumerator<DNNode>;
    function AppendChild(newChild: DNNode): DNNode;
    function PrependChild(newChild: DNNode): DNNode;
    function InsertAfter(newChild: DNNode; refChild: DNNode): DNNode;
    function InsertBefore(newChild: DNNode; refChild: DNNode): DNNode;
    function RemoveChild(oldChild: DNNode): DNNode;
    procedure RemoveAllChildren;
    procedure RemoveSmartTags;
    function IndexOf(child: DNNode): Int32;
    function CreateNavigator: DDN.System.Xml.DNXPathNavigator;
    function Clone(isCloneChildren: Boolean): DNNode;
    function GetAncestor(ancestorType: DDN.mscorlib.DNType): DNCompositeNode; overload;
    function GetAncestor(ancestorType: DNNodeType): DNCompositeNode; overload;
    procedure Remove;
    function NextPreOrder(rootNode: DNNode): DNNode;
    function PreviousPreOrder(rootNode: DNNode): DNNode;
    function ToString(saveFormat: DNSaveFormat): string; overload;
    function ToString(saveOptions: DNSaveOptions): string; overload;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string; overload;

  { propertys } 

    property NodeType: DNNodeType read get_NodeType;
    property ParentSection: DNSection read get_ParentSection;
    property HeaderFooterType: DNHeaderFooterType read get_HeaderFooterType;
    property IsHeader: Boolean read get_IsHeader;
    property IsLinkedToPrevious: Boolean read get_IsLinkedToPrevious write set_IsLinkedToPrevious;
    property StoryType: DNStoryType read get_StoryType;
    property FirstParagraph: DNParagraph read get_FirstParagraph;
    property LastParagraph: DNParagraph read get_LastParagraph;
    property Paragraphs: DNParagraphCollection read get_Paragraphs;
    property Tables: DNTableCollection read get_Tables;
    property IsComposite: Boolean read get_IsComposite;
    property HasChildNodes: Boolean read get_HasChildNodes;
    property ChildNodes: DNNodeCollection read get_ChildNodes;
    property FirstChild: DNNode read get_FirstChild;
    property LastChild: DNNode read get_LastChild;
    property Count: Int32 read get_Count;
    property ParentNode: DNCompositeNode read get_ParentNode;
    property Document: DNDocumentBase read get_Document;
    property PreviousSibling: DNNode read get_PreviousSibling;
    property NextSibling: DNNode read get_NextSibling;
    property Range: DNRange read get_Range;
    property CustomNodeId: Int32 read get_CustomNodeId write set_CustomNodeId;
  end;

  TDNHeaderFooter = class(TDNGenericImport<DNHeaderFooterClass, DNHeaderFooter>) end;

  //-------------namespace: Aspose.Words.Tables----------------
  DNCellClass = interface(DNCompositeNodeClass)
  ['{8C62A7BC-31C5-5CC4-8A92-624C53417AC7}']
  { constructors } 

    {class} function init(doc: DNDocumentBase): DNCell;

  end;

  [DNTypeName('Aspose.Words.Tables.Cell')]
  DNCell = interface(DNCompositeNode)
  ['{554FC14F-8EE5-377A-BC5B-EFFC006E6DF5}']
  { getters & setters } 

    function get_NodeType: DNNodeType;
    function get_ParentRow: DNRow;
    function get_FirstParagraph: DNParagraph;
    function get_LastParagraph: DNParagraph;
    function get_IsFirstCell: Boolean;
    function get_IsLastCell: Boolean;
    function get_CellFormat: DNCellFormat;
    function get_Paragraphs: DNParagraphCollection;
    function get_Tables: DNTableCollection;
    function get_IsComposite: Boolean;
    function get_HasChildNodes: Boolean;
    function get_ChildNodes: DNNodeCollection;
    function get_FirstChild: DNNode;
    function get_LastChild: DNNode;
    function get_Count: Int32;
    function get_ParentNode: DNCompositeNode;
    function get_Document: DNDocumentBase;
    function get_PreviousSibling: DNNode;
    function get_NextSibling: DNNode;
    function get_Range: DNRange;
    function get_CustomNodeId: Int32;
    procedure set_CustomNodeId(value: Int32);

  { methods } 

    function Accept(visitor: DNDocumentVisitor): Boolean;
    procedure EnsureMinimum;
    function GetText: string;
    function GetChildNodes(nodeType: DNNodeType; isDeep: Boolean): DNNodeCollection;
    function GetChild(nodeType: DNNodeType; index: Int32; isDeep: Boolean): DNNode;
    function SelectNodes(xpath: string): DNNodeList;
    function SelectSingleNode(xpath: string): DNNode;
    function GetEnumerator: DDN.mscorlib.DNIEnumerator<DNNode>;
    function AppendChild(newChild: DNNode): DNNode;
    function PrependChild(newChild: DNNode): DNNode;
    function InsertAfter(newChild: DNNode; refChild: DNNode): DNNode;
    function InsertBefore(newChild: DNNode; refChild: DNNode): DNNode;
    function RemoveChild(oldChild: DNNode): DNNode;
    procedure RemoveAllChildren;
    procedure RemoveSmartTags;
    function IndexOf(child: DNNode): Int32;
    function CreateNavigator: DDN.System.Xml.DNXPathNavigator;
    function Clone(isCloneChildren: Boolean): DNNode;
    function GetAncestor(ancestorType: DDN.mscorlib.DNType): DNCompositeNode; overload;
    function GetAncestor(ancestorType: DNNodeType): DNCompositeNode; overload;
    procedure Remove;
    function NextPreOrder(rootNode: DNNode): DNNode;
    function PreviousPreOrder(rootNode: DNNode): DNNode;
    function ToString(saveFormat: DNSaveFormat): string; overload;
    function ToString(saveOptions: DNSaveOptions): string; overload;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string; overload;

  { propertys } 

    property NodeType: DNNodeType read get_NodeType;
    property ParentRow: DNRow read get_ParentRow;
    property FirstParagraph: DNParagraph read get_FirstParagraph;
    property LastParagraph: DNParagraph read get_LastParagraph;
    property IsFirstCell: Boolean read get_IsFirstCell;
    property IsLastCell: Boolean read get_IsLastCell;
    property CellFormat: DNCellFormat read get_CellFormat;
    property Paragraphs: DNParagraphCollection read get_Paragraphs;
    property Tables: DNTableCollection read get_Tables;
    property IsComposite: Boolean read get_IsComposite;
    property HasChildNodes: Boolean read get_HasChildNodes;
    property ChildNodes: DNNodeCollection read get_ChildNodes;
    property FirstChild: DNNode read get_FirstChild;
    property LastChild: DNNode read get_LastChild;
    property Count: Int32 read get_Count;
    property ParentNode: DNCompositeNode read get_ParentNode;
    property Document: DNDocumentBase read get_Document;
    property PreviousSibling: DNNode read get_PreviousSibling;
    property NextSibling: DNNode read get_NextSibling;
    property Range: DNRange read get_Range;
    property CustomNodeId: Int32 read get_CustomNodeId write set_CustomNodeId;
  end;

  TDNCell = class(TDNGenericImport<DNCellClass, DNCell>) end;

  //-------------namespace: Aspose.Words.Tables----------------
  DNRowClass = interface(DNCompositeNodeClass)
  ['{777A6873-6420-5FAA-A5C2-ADDF6F4A94BB}']
  { constructors } 

    {class} function init(doc: DNDocumentBase): DNRow;

  end;

  [DNTypeName('Aspose.Words.Tables.Row')]
  DNRow = interface(DNCompositeNode)
  ['{AB978284-EFFB-3943-8D30-3D38A3FA3F3D}']
  { getters & setters } 

    function get_NodeType: DNNodeType;
    function get_ParentTable: DNTable;
    function get_IsFirstRow: Boolean;
    function get_IsLastRow: Boolean;
    function get_FirstCell: DNCell;
    function get_LastCell: DNCell;
    function get_Cells: DNCellCollection;
    function get_RowFormat: DNRowFormat;
    function get_IsComposite: Boolean;
    function get_HasChildNodes: Boolean;
    function get_ChildNodes: DNNodeCollection;
    function get_FirstChild: DNNode;
    function get_LastChild: DNNode;
    function get_Count: Int32;
    function get_ParentNode: DNCompositeNode;
    function get_Document: DNDocumentBase;
    function get_PreviousSibling: DNNode;
    function get_NextSibling: DNNode;
    function get_Range: DNRange;
    function get_CustomNodeId: Int32;
    procedure set_CustomNodeId(value: Int32);

  { methods } 

    function Accept(visitor: DNDocumentVisitor): Boolean;
    function GetText: string;
    procedure EnsureMinimum;
    function GetChildNodes(nodeType: DNNodeType; isDeep: Boolean): DNNodeCollection;
    function GetChild(nodeType: DNNodeType; index: Int32; isDeep: Boolean): DNNode;
    function SelectNodes(xpath: string): DNNodeList;
    function SelectSingleNode(xpath: string): DNNode;
    function GetEnumerator: DDN.mscorlib.DNIEnumerator<DNNode>;
    function AppendChild(newChild: DNNode): DNNode;
    function PrependChild(newChild: DNNode): DNNode;
    function InsertAfter(newChild: DNNode; refChild: DNNode): DNNode;
    function InsertBefore(newChild: DNNode; refChild: DNNode): DNNode;
    function RemoveChild(oldChild: DNNode): DNNode;
    procedure RemoveAllChildren;
    procedure RemoveSmartTags;
    function IndexOf(child: DNNode): Int32;
    function CreateNavigator: DDN.System.Xml.DNXPathNavigator;
    function Clone(isCloneChildren: Boolean): DNNode;
    function GetAncestor(ancestorType: DDN.mscorlib.DNType): DNCompositeNode; overload;
    function GetAncestor(ancestorType: DNNodeType): DNCompositeNode; overload;
    procedure Remove;
    function NextPreOrder(rootNode: DNNode): DNNode;
    function PreviousPreOrder(rootNode: DNNode): DNNode;
    function ToString(saveFormat: DNSaveFormat): string; overload;
    function ToString(saveOptions: DNSaveOptions): string; overload;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string; overload;

  { propertys } 

    property NodeType: DNNodeType read get_NodeType;
    property ParentTable: DNTable read get_ParentTable;
    property IsFirstRow: Boolean read get_IsFirstRow;
    property IsLastRow: Boolean read get_IsLastRow;
    property FirstCell: DNCell read get_FirstCell;
    property LastCell: DNCell read get_LastCell;
    property Cells: DNCellCollection read get_Cells;
    property RowFormat: DNRowFormat read get_RowFormat;
    property IsComposite: Boolean read get_IsComposite;
    property HasChildNodes: Boolean read get_HasChildNodes;
    property ChildNodes: DNNodeCollection read get_ChildNodes;
    property FirstChild: DNNode read get_FirstChild;
    property LastChild: DNNode read get_LastChild;
    property Count: Int32 read get_Count;
    property ParentNode: DNCompositeNode read get_ParentNode;
    property Document: DNDocumentBase read get_Document;
    property PreviousSibling: DNNode read get_PreviousSibling;
    property NextSibling: DNNode read get_NextSibling;
    property Range: DNRange read get_Range;
    property CustomNodeId: Int32 read get_CustomNodeId write set_CustomNodeId;
  end;

  TDNRow = class(TDNGenericImport<DNRowClass, DNRow>) end;

  //-------------namespace: Aspose.Words.Tables----------------
  DNTableClass = interface(DNCompositeNodeClass)
  ['{027F0284-0F37-5651-9CCB-3222A176DFE1}']
  { constructors } 

    {class} function init(doc: DNDocumentBase): DNTable;

  end;

  [DNTypeName('Aspose.Words.Tables.Table')]
  DNTable = interface(DNCompositeNode)
  ['{70231099-6DED-3E46-9E99-2EE4BF1EAE7A}']
  { getters & setters } 

    function get_NodeType: DNNodeType;
    function get_FirstRow: DNRow;
    function get_LastRow: DNRow;
    function get_Rows: DNRowCollection;
    function get_Alignment: DNTableAlignment;
    procedure set_Alignment(value: DNTableAlignment);
    function get_AllowAutoFit: Boolean;
    procedure set_AllowAutoFit(value: Boolean);
    function get_PreferredWidth: DNPreferredWidth;
    procedure set_PreferredWidth(value: DNPreferredWidth);
    function get_Bidi: Boolean;
    procedure set_Bidi(value: Boolean);
    function get_LeftPadding: Double;
    procedure set_LeftPadding(value: Double);
    function get_RightPadding: Double;
    procedure set_RightPadding(value: Double);
    function get_TopPadding: Double;
    procedure set_TopPadding(value: Double);
    function get_BottomPadding: Double;
    procedure set_BottomPadding(value: Double);
    function get_CellSpacing: Double;
    procedure set_CellSpacing(value: Double);
    function get_AllowCellSpacing: Boolean;
    procedure set_AllowCellSpacing(value: Boolean);
    function get_LeftIndent: Double;
    procedure set_LeftIndent(value: Double);
    function get_StyleOptions: DNTableStyleOptions;
    procedure set_StyleOptions(value: DNTableStyleOptions);
    function get_Style: DNStyle;
    procedure set_Style(value: DNStyle);
    function get_StyleName: string;
    procedure set_StyleName(value: string);
    function get_StyleIdentifier: DNStyleIdentifier;
    procedure set_StyleIdentifier(value: DNStyleIdentifier);
    function get_TextWrapping: DNTextWrapping;
    procedure set_TextWrapping(value: DNTextWrapping);
    function get_Title: string;
    procedure set_Title(value: string);
    function get_Description: string;
    procedure set_Description(value: string);
    function get_DistanceLeft: Double;
    function get_DistanceRight: Double;
    function get_DistanceTop: Double;
    function get_DistanceBottom: Double;
    function get_RelativeHorizontalAlignment: DNHorizontalAlignment;
    procedure set_RelativeHorizontalAlignment(value: DNHorizontalAlignment);
    function get_RelativeVerticalAlignment: DNVerticalAlignment;
    procedure set_RelativeVerticalAlignment(value: DNVerticalAlignment);
    function get_HorizontalAnchor: DNRelativeHorizontalPosition;
    procedure set_HorizontalAnchor(value: DNRelativeHorizontalPosition);
    function get_VerticalAnchor: DNRelativeVerticalPosition;
    procedure set_VerticalAnchor(value: DNRelativeVerticalPosition);
    function get_AbsoluteHorizontalDistance: Double;
    procedure set_AbsoluteHorizontalDistance(value: Double);
    function get_AbsoluteVerticalDistance: Double;
    procedure set_AbsoluteVerticalDistance(value: Double);
    function get_AllowOverlap: Boolean;
    function get_IsComposite: Boolean;
    function get_HasChildNodes: Boolean;
    function get_ChildNodes: DNNodeCollection;
    function get_FirstChild: DNNode;
    function get_LastChild: DNNode;
    function get_Count: Int32;
    function get_ParentNode: DNCompositeNode;
    function get_Document: DNDocumentBase;
    function get_PreviousSibling: DNNode;
    function get_NextSibling: DNNode;
    function get_Range: DNRange;
    function get_CustomNodeId: Int32;
    procedure set_CustomNodeId(value: Int32);

  { methods } 

    procedure ConvertToHorizontallyMergedCells;
    function Accept(visitor: DNDocumentVisitor): Boolean;
    procedure EnsureMinimum;
    procedure SetBorders(lineStyle: DNLineStyle; lineWidth: Double; color: DDN.System.Drawing.DNColor);
    procedure SetBorder(borderType: DNBorderType; lineStyle: DNLineStyle; lineWidth: Double; color: DDN.System.Drawing.DNColor; isOverrideCellBorders: Boolean);
    procedure ClearBorders;
    procedure SetShading(texture: DNTextureIndex; foregroundColor: DDN.System.Drawing.DNColor; backgroundColor: DDN.System.Drawing.DNColor);
    procedure ClearShading;
    procedure AutoFit(behavior: DNAutoFitBehavior);
    function GetText: string;
    function GetChildNodes(nodeType: DNNodeType; isDeep: Boolean): DNNodeCollection;
    function GetChild(nodeType: DNNodeType; index: Int32; isDeep: Boolean): DNNode;
    function SelectNodes(xpath: string): DNNodeList;
    function SelectSingleNode(xpath: string): DNNode;
    function GetEnumerator: DDN.mscorlib.DNIEnumerator<DNNode>;
    function AppendChild(newChild: DNNode): DNNode;
    function PrependChild(newChild: DNNode): DNNode;
    function InsertAfter(newChild: DNNode; refChild: DNNode): DNNode;
    function InsertBefore(newChild: DNNode; refChild: DNNode): DNNode;
    function RemoveChild(oldChild: DNNode): DNNode;
    procedure RemoveAllChildren;
    procedure RemoveSmartTags;
    function IndexOf(child: DNNode): Int32;
    function CreateNavigator: DDN.System.Xml.DNXPathNavigator;
    function Clone(isCloneChildren: Boolean): DNNode;
    function GetAncestor(ancestorType: DDN.mscorlib.DNType): DNCompositeNode; overload;
    function GetAncestor(ancestorType: DNNodeType): DNCompositeNode; overload;
    procedure Remove;
    function NextPreOrder(rootNode: DNNode): DNNode;
    function PreviousPreOrder(rootNode: DNNode): DNNode;
    function ToString(saveFormat: DNSaveFormat): string; overload;
    function ToString(saveOptions: DNSaveOptions): string; overload;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string; overload;

  { propertys } 

    property NodeType: DNNodeType read get_NodeType;
    property FirstRow: DNRow read get_FirstRow;
    property LastRow: DNRow read get_LastRow;
    property Rows: DNRowCollection read get_Rows;
    property Alignment: DNTableAlignment read get_Alignment write set_Alignment;
    property AllowAutoFit: Boolean read get_AllowAutoFit write set_AllowAutoFit;
    property PreferredWidth: DNPreferredWidth read get_PreferredWidth write set_PreferredWidth;
    property Bidi: Boolean read get_Bidi write set_Bidi;
    property LeftPadding: Double read get_LeftPadding write set_LeftPadding;
    property RightPadding: Double read get_RightPadding write set_RightPadding;
    property TopPadding: Double read get_TopPadding write set_TopPadding;
    property BottomPadding: Double read get_BottomPadding write set_BottomPadding;
    property CellSpacing: Double read get_CellSpacing write set_CellSpacing;
    property AllowCellSpacing: Boolean read get_AllowCellSpacing write set_AllowCellSpacing;
    property LeftIndent: Double read get_LeftIndent write set_LeftIndent;
    property StyleOptions: DNTableStyleOptions read get_StyleOptions write set_StyleOptions;
    property Style: DNStyle read get_Style write set_Style;
    property StyleName: string read get_StyleName write set_StyleName;
    property StyleIdentifier: DNStyleIdentifier read get_StyleIdentifier write set_StyleIdentifier;
    property TextWrapping: DNTextWrapping read get_TextWrapping write set_TextWrapping;
    property Title: string read get_Title write set_Title;
    property Description: string read get_Description write set_Description;
    property DistanceLeft: Double read get_DistanceLeft;
    property DistanceRight: Double read get_DistanceRight;
    property DistanceTop: Double read get_DistanceTop;
    property DistanceBottom: Double read get_DistanceBottom;
    property RelativeHorizontalAlignment: DNHorizontalAlignment read get_RelativeHorizontalAlignment write set_RelativeHorizontalAlignment;
    property RelativeVerticalAlignment: DNVerticalAlignment read get_RelativeVerticalAlignment write set_RelativeVerticalAlignment;
    property HorizontalAnchor: DNRelativeHorizontalPosition read get_HorizontalAnchor write set_HorizontalAnchor;
    property VerticalAnchor: DNRelativeVerticalPosition read get_VerticalAnchor write set_VerticalAnchor;
    property AbsoluteHorizontalDistance: Double read get_AbsoluteHorizontalDistance write set_AbsoluteHorizontalDistance;
    property AbsoluteVerticalDistance: Double read get_AbsoluteVerticalDistance write set_AbsoluteVerticalDistance;
    property AllowOverlap: Boolean read get_AllowOverlap;
    property IsComposite: Boolean read get_IsComposite;
    property HasChildNodes: Boolean read get_HasChildNodes;
    property ChildNodes: DNNodeCollection read get_ChildNodes;
    property FirstChild: DNNode read get_FirstChild;
    property LastChild: DNNode read get_LastChild;
    property Count: Int32 read get_Count;
    property ParentNode: DNCompositeNode read get_ParentNode;
    property Document: DNDocumentBase read get_Document;
    property PreviousSibling: DNNode read get_PreviousSibling;
    property NextSibling: DNNode read get_NextSibling;
    property Range: DNRange read get_Range;
    property CustomNodeId: Int32 read get_CustomNodeId write set_CustomNodeId;
  end;

  TDNTable = class(TDNGenericImport<DNTableClass, DNTable>) end;

  //-------------namespace: Aspose.Words----------------
  DNEditableRangeEndClass = interface(DNNodeClass)
  ['{743F02F2-E692-5859-9675-C2D06CC24565}']
  end;

  [DNTypeName('Aspose.Words.EditableRangeEnd')]
  DNEditableRangeEnd = interface(DNNode)
  ['{67846C31-8087-30F6-8441-0D5372111D9C}']
  { getters & setters } 

    function get_EditableRangeStart: DNEditableRangeStart;
    function get_Id: Int32;
    procedure set_Id(value: Int32);
    function get_NodeType: DNNodeType;
    function get_ParentNode: DNCompositeNode;
    function get_Document: DNDocumentBase;
    function get_PreviousSibling: DNNode;
    function get_NextSibling: DNNode;
    function get_IsComposite: Boolean;
    function get_Range: DNRange;
    function get_CustomNodeId: Int32;
    procedure set_CustomNodeId(value: Int32);

  { methods } 

    function Accept(visitor: DNDocumentVisitor): Boolean;
    function Clone(isCloneChildren: Boolean): DNNode;
    function GetText: string;
    function GetAncestor(ancestorType: DDN.mscorlib.DNType): DNCompositeNode; overload;
    function GetAncestor(ancestorType: DNNodeType): DNCompositeNode; overload;
    procedure Remove;
    function NextPreOrder(rootNode: DNNode): DNNode;
    function PreviousPreOrder(rootNode: DNNode): DNNode;
    function ToString(saveFormat: DNSaveFormat): string; overload;
    function ToString(saveOptions: DNSaveOptions): string; overload;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string; overload;

  { propertys } 

    property EditableRangeStart: DNEditableRangeStart read get_EditableRangeStart;
    property Id: Int32 read get_Id write set_Id;
    property NodeType: DNNodeType read get_NodeType;
    property ParentNode: DNCompositeNode read get_ParentNode;
    property Document: DNDocumentBase read get_Document;
    property PreviousSibling: DNNode read get_PreviousSibling;
    property NextSibling: DNNode read get_NextSibling;
    property IsComposite: Boolean read get_IsComposite;
    property Range: DNRange read get_Range;
    property CustomNodeId: Int32 read get_CustomNodeId write set_CustomNodeId;
  end;

  TDNEditableRangeEnd = class(TDNGenericImport<DNEditableRangeEndClass, DNEditableRangeEnd>) end;

  //-------------namespace: Aspose.Words----------------
  DNEditableRangeStartClass = interface(DNNodeClass)
  ['{7610740F-2DC0-5A55-B39F-615CB7951BA8}']
  end;

  [DNTypeName('Aspose.Words.EditableRangeStart')]
  DNEditableRangeStart = interface(DNNode)
  ['{E7C5E0E4-B32F-35FF-A484-75AFC571383A}']
  { getters & setters } 

    function get_Id: Int32;
    procedure set_Id(value: Int32);
    function get_EditableRange: DNEditableRange;
    function get_NodeType: DNNodeType;
    function get_ParentNode: DNCompositeNode;
    function get_Document: DNDocumentBase;
    function get_PreviousSibling: DNNode;
    function get_NextSibling: DNNode;
    function get_IsComposite: Boolean;
    function get_Range: DNRange;
    function get_CustomNodeId: Int32;
    procedure set_CustomNodeId(value: Int32);

  { methods } 

    function Accept(visitor: DNDocumentVisitor): Boolean;
    function Clone(isCloneChildren: Boolean): DNNode;
    function GetText: string;
    function GetAncestor(ancestorType: DDN.mscorlib.DNType): DNCompositeNode; overload;
    function GetAncestor(ancestorType: DNNodeType): DNCompositeNode; overload;
    procedure Remove;
    function NextPreOrder(rootNode: DNNode): DNNode;
    function PreviousPreOrder(rootNode: DNNode): DNNode;
    function ToString(saveFormat: DNSaveFormat): string; overload;
    function ToString(saveOptions: DNSaveOptions): string; overload;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string; overload;

  { propertys } 

    property Id: Int32 read get_Id write set_Id;
    property EditableRange: DNEditableRange read get_EditableRange;
    property NodeType: DNNodeType read get_NodeType;
    property ParentNode: DNCompositeNode read get_ParentNode;
    property Document: DNDocumentBase read get_Document;
    property PreviousSibling: DNNode read get_PreviousSibling;
    property NextSibling: DNNode read get_NextSibling;
    property IsComposite: Boolean read get_IsComposite;
    property Range: DNRange read get_Range;
    property CustomNodeId: Int32 read get_CustomNodeId write set_CustomNodeId;
  end;

  TDNEditableRangeStart = class(TDNGenericImport<DNEditableRangeStartClass, DNEditableRangeStart>) end;

  //-------------namespace: Aspose.Words----------------
  DNInlineClass = interface(DNNodeClass)
  ['{CC7C7F58-8BF5-5702-AE52-DE40B4F3D55B}']
  end;

  [DNTypeName('Aspose.Words.Inline')]
  DNInline = interface(DNNode)
  ['{55AC8D97-B72B-357A-B54F-910ABE089A90}']
  { getters & setters } 

    function get_ParentParagraph: DNParagraph;
    function get_Font: DNFont;
    function get_IsInsertRevision: Boolean;
    function get_IsDeleteRevision: Boolean;
    function get_IsMoveFromRevision: Boolean;
    function get_IsMoveToRevision: Boolean;
    function get_IsFormatRevision: Boolean;
    function get_NodeType: DNNodeType;
    function get_ParentNode: DNCompositeNode;
    function get_Document: DNDocumentBase;
    function get_PreviousSibling: DNNode;
    function get_NextSibling: DNNode;
    function get_IsComposite: Boolean;
    function get_Range: DNRange;
    function get_CustomNodeId: Int32;
    procedure set_CustomNodeId(value: Int32);

  { methods } 

    function Clone(isCloneChildren: Boolean): DNNode;
    function Accept(visitor: DNDocumentVisitor): Boolean;
    function GetText: string;
    function GetAncestor(ancestorType: DDN.mscorlib.DNType): DNCompositeNode; overload;
    function GetAncestor(ancestorType: DNNodeType): DNCompositeNode; overload;
    procedure Remove;
    function NextPreOrder(rootNode: DNNode): DNNode;
    function PreviousPreOrder(rootNode: DNNode): DNNode;
    function ToString(saveFormat: DNSaveFormat): string; overload;
    function ToString(saveOptions: DNSaveOptions): string; overload;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string; overload;

  { propertys } 

    property ParentParagraph: DNParagraph read get_ParentParagraph;
    property Font: DNFont read get_Font;
    property IsInsertRevision: Boolean read get_IsInsertRevision;
    property IsDeleteRevision: Boolean read get_IsDeleteRevision;
    property IsMoveFromRevision: Boolean read get_IsMoveFromRevision;
    property IsMoveToRevision: Boolean read get_IsMoveToRevision;
    property IsFormatRevision: Boolean read get_IsFormatRevision;
    property NodeType: DNNodeType read get_NodeType;
    property ParentNode: DNCompositeNode read get_ParentNode;
    property Document: DNDocumentBase read get_Document;
    property PreviousSibling: DNNode read get_PreviousSibling;
    property NextSibling: DNNode read get_NextSibling;
    property IsComposite: Boolean read get_IsComposite;
    property Range: DNRange read get_Range;
    property CustomNodeId: Int32 read get_CustomNodeId write set_CustomNodeId;
  end;

  TDNInline = class(TDNGenericImport<DNInlineClass, DNInline>) end;

  //-------------namespace: Aspose.Words----------------
  DNRunClass = interface(DNInlineClass)
  ['{19E4AF0D-CC98-5FAA-A35E-D70518C30751}']
  { constructors } 

    {class} function init(doc: DNDocumentBase): DNRun; overload;
    {class} function init(doc: DNDocumentBase; text: string): DNRun; overload;

  end;

  [DNTypeName('Aspose.Words.Run')]
  DNRun = interface(DNInline)
  ['{A4EB63A2-B49C-3E67-918D-7D6986D13AD5}']
  { getters & setters } 

    function get_NodeType: DNNodeType;
    function get_Text: string;
    procedure set_Text(value: string);
    function get_ParentParagraph: DNParagraph;
    function get_Font: DNFont;
    function get_IsInsertRevision: Boolean;
    function get_IsDeleteRevision: Boolean;
    function get_IsMoveFromRevision: Boolean;
    function get_IsMoveToRevision: Boolean;
    function get_IsFormatRevision: Boolean;
    function get_ParentNode: DNCompositeNode;
    function get_Document: DNDocumentBase;
    function get_PreviousSibling: DNNode;
    function get_NextSibling: DNNode;
    function get_IsComposite: Boolean;
    function get_Range: DNRange;
    function get_CustomNodeId: Int32;
    procedure set_CustomNodeId(value: Int32);

  { methods } 

    function Accept(visitor: DNDocumentVisitor): Boolean;
    function GetText: string;
    function Clone(isCloneChildren: Boolean): DNNode;
    function GetAncestor(ancestorType: DDN.mscorlib.DNType): DNCompositeNode; overload;
    function GetAncestor(ancestorType: DNNodeType): DNCompositeNode; overload;
    procedure Remove;
    function NextPreOrder(rootNode: DNNode): DNNode;
    function PreviousPreOrder(rootNode: DNNode): DNNode;
    function ToString(saveFormat: DNSaveFormat): string; overload;
    function ToString(saveOptions: DNSaveOptions): string; overload;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string; overload;

  { propertys } 

    property NodeType: DNNodeType read get_NodeType;
    property Text: string read get_Text write set_Text;
    property ParentParagraph: DNParagraph read get_ParentParagraph;
    property Font: DNFont read get_Font;
    property IsInsertRevision: Boolean read get_IsInsertRevision;
    property IsDeleteRevision: Boolean read get_IsDeleteRevision;
    property IsMoveFromRevision: Boolean read get_IsMoveFromRevision;
    property IsMoveToRevision: Boolean read get_IsMoveToRevision;
    property IsFormatRevision: Boolean read get_IsFormatRevision;
    property ParentNode: DNCompositeNode read get_ParentNode;
    property Document: DNDocumentBase read get_Document;
    property PreviousSibling: DNNode read get_PreviousSibling;
    property NextSibling: DNNode read get_NextSibling;
    property IsComposite: Boolean read get_IsComposite;
    property Range: DNRange read get_Range;
    property CustomNodeId: Int32 read get_CustomNodeId write set_CustomNodeId;
  end;

  TDNRun = class(TDNGenericImport<DNRunClass, DNRun>) end;

  //-------------namespace: Aspose.Words----------------
  DNSpecialCharClass = interface(DNInlineClass)
  ['{C31F5841-3D45-5A00-ABEB-99DFBB76DF74}']
  end;

  [DNTypeName('Aspose.Words.SpecialChar')]
  DNSpecialChar = interface(DNInline)
  ['{52E29E56-8BAE-31ED-BC97-EA6EACF16A75}']
  { getters & setters } 

    function get_NodeType: DNNodeType;
    function get_ParentParagraph: DNParagraph;
    function get_Font: DNFont;
    function get_IsInsertRevision: Boolean;
    function get_IsDeleteRevision: Boolean;
    function get_IsMoveFromRevision: Boolean;
    function get_IsMoveToRevision: Boolean;
    function get_IsFormatRevision: Boolean;
    function get_ParentNode: DNCompositeNode;
    function get_Document: DNDocumentBase;
    function get_PreviousSibling: DNNode;
    function get_NextSibling: DNNode;
    function get_IsComposite: Boolean;
    function get_Range: DNRange;
    function get_CustomNodeId: Int32;
    procedure set_CustomNodeId(value: Int32);

  { methods } 

    function Accept(visitor: DNDocumentVisitor): Boolean;
    function GetText: string;
    function Clone(isCloneChildren: Boolean): DNNode;
    function GetAncestor(ancestorType: DDN.mscorlib.DNType): DNCompositeNode; overload;
    function GetAncestor(ancestorType: DNNodeType): DNCompositeNode; overload;
    procedure Remove;
    function NextPreOrder(rootNode: DNNode): DNNode;
    function PreviousPreOrder(rootNode: DNNode): DNNode;
    function ToString(saveFormat: DNSaveFormat): string; overload;
    function ToString(saveOptions: DNSaveOptions): string; overload;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string; overload;

  { propertys } 

    property NodeType: DNNodeType read get_NodeType;
    property ParentParagraph: DNParagraph read get_ParentParagraph;
    property Font: DNFont read get_Font;
    property IsInsertRevision: Boolean read get_IsInsertRevision;
    property IsDeleteRevision: Boolean read get_IsDeleteRevision;
    property IsMoveFromRevision: Boolean read get_IsMoveFromRevision;
    property IsMoveToRevision: Boolean read get_IsMoveToRevision;
    property IsFormatRevision: Boolean read get_IsFormatRevision;
    property ParentNode: DNCompositeNode read get_ParentNode;
    property Document: DNDocumentBase read get_Document;
    property PreviousSibling: DNNode read get_PreviousSibling;
    property NextSibling: DNNode read get_NextSibling;
    property IsComposite: Boolean read get_IsComposite;
    property Range: DNRange read get_Range;
    property CustomNodeId: Int32 read get_CustomNodeId write set_CustomNodeId;
  end;

  TDNSpecialChar = class(TDNGenericImport<DNSpecialCharClass, DNSpecialChar>) end;

  //-------------namespace: Aspose.Words----------------
  DNAbsolutePositionTabClass = interface(DNSpecialCharClass)
  ['{9F81A92A-B130-598D-9F30-BAF2F0892CF1}']
  end;

  [DNTypeName('Aspose.Words.AbsolutePositionTab')]
  DNAbsolutePositionTab = interface(DNSpecialChar)
  ['{0347CDF3-4CB2-300B-902A-E4821B8840FA}']
  { getters & setters } 

    function get_NodeType: DNNodeType;
    function get_ParentParagraph: DNParagraph;
    function get_Font: DNFont;
    function get_IsInsertRevision: Boolean;
    function get_IsDeleteRevision: Boolean;
    function get_IsMoveFromRevision: Boolean;
    function get_IsMoveToRevision: Boolean;
    function get_IsFormatRevision: Boolean;
    function get_ParentNode: DNCompositeNode;
    function get_Document: DNDocumentBase;
    function get_PreviousSibling: DNNode;
    function get_NextSibling: DNNode;
    function get_IsComposite: Boolean;
    function get_Range: DNRange;
    function get_CustomNodeId: Int32;
    procedure set_CustomNodeId(value: Int32);

  { methods } 

    function Accept(visitor: DNDocumentVisitor): Boolean;
    function GetText: string;
    function Clone(isCloneChildren: Boolean): DNNode;
    function GetAncestor(ancestorType: DDN.mscorlib.DNType): DNCompositeNode; overload;
    function GetAncestor(ancestorType: DNNodeType): DNCompositeNode; overload;
    procedure Remove;
    function NextPreOrder(rootNode: DNNode): DNNode;
    function PreviousPreOrder(rootNode: DNNode): DNNode;
    function ToString(saveFormat: DNSaveFormat): string; overload;
    function ToString(saveOptions: DNSaveOptions): string; overload;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string; overload;

  { propertys } 

    property NodeType: DNNodeType read get_NodeType;
    property ParentParagraph: DNParagraph read get_ParentParagraph;
    property Font: DNFont read get_Font;
    property IsInsertRevision: Boolean read get_IsInsertRevision;
    property IsDeleteRevision: Boolean read get_IsDeleteRevision;
    property IsMoveFromRevision: Boolean read get_IsMoveFromRevision;
    property IsMoveToRevision: Boolean read get_IsMoveToRevision;
    property IsFormatRevision: Boolean read get_IsFormatRevision;
    property ParentNode: DNCompositeNode read get_ParentNode;
    property Document: DNDocumentBase read get_Document;
    property PreviousSibling: DNNode read get_PreviousSibling;
    property NextSibling: DNNode read get_NextSibling;
    property IsComposite: Boolean read get_IsComposite;
    property Range: DNRange read get_Range;
    property CustomNodeId: Int32 read get_CustomNodeId write set_CustomNodeId;
  end;

  TDNAbsolutePositionTab = class(TDNGenericImport<DNAbsolutePositionTabClass, DNAbsolutePositionTab>) end;

  //-------------namespace: Aspose.Words.Fields----------------
  DNFieldCharClass = interface(DNSpecialCharClass)
  ['{ECF289F7-CA8B-58AB-9386-87E4E6B4E9DC}']
  end;

  [DNTypeName('Aspose.Words.Fields.FieldChar')]
  DNFieldChar = interface(DNSpecialChar)
  ['{CF88CE0D-B561-3B74-AD64-CC8C70980470}']
  { getters & setters } 

    function get_FieldType: DNFieldType;
    function get_IsLocked: Boolean;
    procedure set_IsLocked(value: Boolean);
    function get_IsDirty: Boolean;
    procedure set_IsDirty(value: Boolean);
    function get_NodeType: DNNodeType;
    function get_ParentParagraph: DNParagraph;
    function get_Font: DNFont;
    function get_IsInsertRevision: Boolean;
    function get_IsDeleteRevision: Boolean;
    function get_IsMoveFromRevision: Boolean;
    function get_IsMoveToRevision: Boolean;
    function get_IsFormatRevision: Boolean;
    function get_ParentNode: DNCompositeNode;
    function get_Document: DNDocumentBase;
    function get_PreviousSibling: DNNode;
    function get_NextSibling: DNNode;
    function get_IsComposite: Boolean;
    function get_Range: DNRange;
    function get_CustomNodeId: Int32;
    procedure set_CustomNodeId(value: Int32);

  { methods } 

    function GetField: DNField;
    function Accept(visitor: DNDocumentVisitor): Boolean;
    function GetText: string;
    function Clone(isCloneChildren: Boolean): DNNode;
    function GetAncestor(ancestorType: DDN.mscorlib.DNType): DNCompositeNode; overload;
    function GetAncestor(ancestorType: DNNodeType): DNCompositeNode; overload;
    procedure Remove;
    function NextPreOrder(rootNode: DNNode): DNNode;
    function PreviousPreOrder(rootNode: DNNode): DNNode;
    function ToString(saveFormat: DNSaveFormat): string; overload;
    function ToString(saveOptions: DNSaveOptions): string; overload;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string; overload;

  { propertys } 

    property FieldType: DNFieldType read get_FieldType;
    property IsLocked: Boolean read get_IsLocked write set_IsLocked;
    property IsDirty: Boolean read get_IsDirty write set_IsDirty;
    property NodeType: DNNodeType read get_NodeType;
    property ParentParagraph: DNParagraph read get_ParentParagraph;
    property Font: DNFont read get_Font;
    property IsInsertRevision: Boolean read get_IsInsertRevision;
    property IsDeleteRevision: Boolean read get_IsDeleteRevision;
    property IsMoveFromRevision: Boolean read get_IsMoveFromRevision;
    property IsMoveToRevision: Boolean read get_IsMoveToRevision;
    property IsFormatRevision: Boolean read get_IsFormatRevision;
    property ParentNode: DNCompositeNode read get_ParentNode;
    property Document: DNDocumentBase read get_Document;
    property PreviousSibling: DNNode read get_PreviousSibling;
    property NextSibling: DNNode read get_NextSibling;
    property IsComposite: Boolean read get_IsComposite;
    property Range: DNRange read get_Range;
    property CustomNodeId: Int32 read get_CustomNodeId write set_CustomNodeId;
  end;

  TDNFieldChar = class(TDNGenericImport<DNFieldCharClass, DNFieldChar>) end;

  //-------------namespace: Aspose.Words.Fields----------------
  DNFieldEndClass = interface(DNFieldCharClass)
  ['{983847A4-D0CE-5C53-BAED-92749161CEC8}']
  end;

  [DNTypeName('Aspose.Words.Fields.FieldEnd')]
  DNFieldEnd = interface(DNFieldChar)
  ['{430F0F84-21F0-3672-B567-8E9A35DC926A}']
  { getters & setters } 

    function get_NodeType: DNNodeType;
    function get_HasSeparator: Boolean;
    function get_FieldType: DNFieldType;
    function get_IsLocked: Boolean;
    procedure set_IsLocked(value: Boolean);
    function get_IsDirty: Boolean;
    procedure set_IsDirty(value: Boolean);
    function get_ParentParagraph: DNParagraph;
    function get_Font: DNFont;
    function get_IsInsertRevision: Boolean;
    function get_IsDeleteRevision: Boolean;
    function get_IsMoveFromRevision: Boolean;
    function get_IsMoveToRevision: Boolean;
    function get_IsFormatRevision: Boolean;
    function get_ParentNode: DNCompositeNode;
    function get_Document: DNDocumentBase;
    function get_PreviousSibling: DNNode;
    function get_NextSibling: DNNode;
    function get_IsComposite: Boolean;
    function get_Range: DNRange;
    function get_CustomNodeId: Int32;
    procedure set_CustomNodeId(value: Int32);

  { methods } 

    function Accept(visitor: DNDocumentVisitor): Boolean;
    function GetField: DNField;
    function GetText: string;
    function Clone(isCloneChildren: Boolean): DNNode;
    function GetAncestor(ancestorType: DDN.mscorlib.DNType): DNCompositeNode; overload;
    function GetAncestor(ancestorType: DNNodeType): DNCompositeNode; overload;
    procedure Remove;
    function NextPreOrder(rootNode: DNNode): DNNode;
    function PreviousPreOrder(rootNode: DNNode): DNNode;
    function ToString(saveFormat: DNSaveFormat): string; overload;
    function ToString(saveOptions: DNSaveOptions): string; overload;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string; overload;

  { propertys } 

    property NodeType: DNNodeType read get_NodeType;
    property HasSeparator: Boolean read get_HasSeparator;
    property FieldType: DNFieldType read get_FieldType;
    property IsLocked: Boolean read get_IsLocked write set_IsLocked;
    property IsDirty: Boolean read get_IsDirty write set_IsDirty;
    property ParentParagraph: DNParagraph read get_ParentParagraph;
    property Font: DNFont read get_Font;
    property IsInsertRevision: Boolean read get_IsInsertRevision;
    property IsDeleteRevision: Boolean read get_IsDeleteRevision;
    property IsMoveFromRevision: Boolean read get_IsMoveFromRevision;
    property IsMoveToRevision: Boolean read get_IsMoveToRevision;
    property IsFormatRevision: Boolean read get_IsFormatRevision;
    property ParentNode: DNCompositeNode read get_ParentNode;
    property Document: DNDocumentBase read get_Document;
    property PreviousSibling: DNNode read get_PreviousSibling;
    property NextSibling: DNNode read get_NextSibling;
    property IsComposite: Boolean read get_IsComposite;
    property Range: DNRange read get_Range;
    property CustomNodeId: Int32 read get_CustomNodeId write set_CustomNodeId;
  end;

  TDNFieldEnd = class(TDNGenericImport<DNFieldEndClass, DNFieldEnd>) end;

  //-------------namespace: Aspose.Words.Fields----------------
  DNFieldSeparatorClass = interface(DNFieldCharClass)
  ['{9CBAE3FC-3C3D-5AA5-91B8-7035FE70C012}']
  end;

  [DNTypeName('Aspose.Words.Fields.FieldSeparator')]
  DNFieldSeparator = interface(DNFieldChar)
  ['{39B7C2DC-E9B5-331D-9F15-ACBB0857C9F0}']
  { getters & setters } 

    function get_NodeType: DNNodeType;
    function get_FieldType: DNFieldType;
    function get_IsLocked: Boolean;
    procedure set_IsLocked(value: Boolean);
    function get_IsDirty: Boolean;
    procedure set_IsDirty(value: Boolean);
    function get_ParentParagraph: DNParagraph;
    function get_Font: DNFont;
    function get_IsInsertRevision: Boolean;
    function get_IsDeleteRevision: Boolean;
    function get_IsMoveFromRevision: Boolean;
    function get_IsMoveToRevision: Boolean;
    function get_IsFormatRevision: Boolean;
    function get_ParentNode: DNCompositeNode;
    function get_Document: DNDocumentBase;
    function get_PreviousSibling: DNNode;
    function get_NextSibling: DNNode;
    function get_IsComposite: Boolean;
    function get_Range: DNRange;
    function get_CustomNodeId: Int32;
    procedure set_CustomNodeId(value: Int32);

  { methods } 

    function Accept(visitor: DNDocumentVisitor): Boolean;
    function GetField: DNField;
    function GetText: string;
    function Clone(isCloneChildren: Boolean): DNNode;
    function GetAncestor(ancestorType: DDN.mscorlib.DNType): DNCompositeNode; overload;
    function GetAncestor(ancestorType: DNNodeType): DNCompositeNode; overload;
    procedure Remove;
    function NextPreOrder(rootNode: DNNode): DNNode;
    function PreviousPreOrder(rootNode: DNNode): DNNode;
    function ToString(saveFormat: DNSaveFormat): string; overload;
    function ToString(saveOptions: DNSaveOptions): string; overload;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string; overload;

  { propertys } 

    property NodeType: DNNodeType read get_NodeType;
    property FieldType: DNFieldType read get_FieldType;
    property IsLocked: Boolean read get_IsLocked write set_IsLocked;
    property IsDirty: Boolean read get_IsDirty write set_IsDirty;
    property ParentParagraph: DNParagraph read get_ParentParagraph;
    property Font: DNFont read get_Font;
    property IsInsertRevision: Boolean read get_IsInsertRevision;
    property IsDeleteRevision: Boolean read get_IsDeleteRevision;
    property IsMoveFromRevision: Boolean read get_IsMoveFromRevision;
    property IsMoveToRevision: Boolean read get_IsMoveToRevision;
    property IsFormatRevision: Boolean read get_IsFormatRevision;
    property ParentNode: DNCompositeNode read get_ParentNode;
    property Document: DNDocumentBase read get_Document;
    property PreviousSibling: DNNode read get_PreviousSibling;
    property NextSibling: DNNode read get_NextSibling;
    property IsComposite: Boolean read get_IsComposite;
    property Range: DNRange read get_Range;
    property CustomNodeId: Int32 read get_CustomNodeId write set_CustomNodeId;
  end;

  TDNFieldSeparator = class(TDNGenericImport<DNFieldSeparatorClass, DNFieldSeparator>) end;

  //-------------namespace: Aspose.Words.Fields----------------
  DNFieldStartClass = interface(DNFieldCharClass)
  ['{FE189022-DB07-565F-A56B-743CF50F969D}']
  end;

  [DNTypeName('Aspose.Words.Fields.FieldStart')]
  DNFieldStart = interface(DNFieldChar)
  ['{5A6C9667-B572-3E4E-9FF4-7AD01A0A7020}']
  { getters & setters } 

    function get_NodeType: DNNodeType;
    function get_FieldType: DNFieldType;
    function get_IsLocked: Boolean;
    procedure set_IsLocked(value: Boolean);
    function get_IsDirty: Boolean;
    procedure set_IsDirty(value: Boolean);
    function get_ParentParagraph: DNParagraph;
    function get_Font: DNFont;
    function get_IsInsertRevision: Boolean;
    function get_IsDeleteRevision: Boolean;
    function get_IsMoveFromRevision: Boolean;
    function get_IsMoveToRevision: Boolean;
    function get_IsFormatRevision: Boolean;
    function get_ParentNode: DNCompositeNode;
    function get_Document: DNDocumentBase;
    function get_PreviousSibling: DNNode;
    function get_NextSibling: DNNode;
    function get_IsComposite: Boolean;
    function get_Range: DNRange;
    function get_CustomNodeId: Int32;
    procedure set_CustomNodeId(value: Int32);

  { methods } 

    function Accept(visitor: DNDocumentVisitor): Boolean;
    function GetField: DNField;
    function GetText: string;
    function Clone(isCloneChildren: Boolean): DNNode;
    function GetAncestor(ancestorType: DDN.mscorlib.DNType): DNCompositeNode; overload;
    function GetAncestor(ancestorType: DNNodeType): DNCompositeNode; overload;
    procedure Remove;
    function NextPreOrder(rootNode: DNNode): DNNode;
    function PreviousPreOrder(rootNode: DNNode): DNNode;
    function ToString(saveFormat: DNSaveFormat): string; overload;
    function ToString(saveOptions: DNSaveOptions): string; overload;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string; overload;

  { propertys } 

    property NodeType: DNNodeType read get_NodeType;
    property FieldType: DNFieldType read get_FieldType;
    property IsLocked: Boolean read get_IsLocked write set_IsLocked;
    property IsDirty: Boolean read get_IsDirty write set_IsDirty;
    property ParentParagraph: DNParagraph read get_ParentParagraph;
    property Font: DNFont read get_Font;
    property IsInsertRevision: Boolean read get_IsInsertRevision;
    property IsDeleteRevision: Boolean read get_IsDeleteRevision;
    property IsMoveFromRevision: Boolean read get_IsMoveFromRevision;
    property IsMoveToRevision: Boolean read get_IsMoveToRevision;
    property IsFormatRevision: Boolean read get_IsFormatRevision;
    property ParentNode: DNCompositeNode read get_ParentNode;
    property Document: DNDocumentBase read get_Document;
    property PreviousSibling: DNNode read get_PreviousSibling;
    property NextSibling: DNNode read get_NextSibling;
    property IsComposite: Boolean read get_IsComposite;
    property Range: DNRange read get_Range;
    property CustomNodeId: Int32 read get_CustomNodeId write set_CustomNodeId;
  end;

  TDNFieldStart = class(TDNGenericImport<DNFieldStartClass, DNFieldStart>) end;

  //-------------namespace: Aspose.Words.Fields----------------
  DNFormFieldClass = interface(DNSpecialCharClass)
  ['{2D296846-BA2F-5FA4-974A-340B407840E0}']
  end;

  [DNTypeName('Aspose.Words.Fields.FormField')]
  DNFormField = interface(DNSpecialChar)
  ['{2D2C0C23-8258-31AD-926D-4CB545F2ED9B}']
  { getters & setters } 

    function get_NodeType: DNNodeType;
    function get_Name: string;
    procedure set_Name(value: string);
    function get_Type: DNFieldType;
    function get_Result: string;
    procedure set_Result(value: string);
    function get_StatusText: string;
    procedure set_StatusText(value: string);
    function get_OwnStatus: Boolean;
    procedure set_OwnStatus(value: Boolean);
    function get_HelpText: string;
    procedure set_HelpText(value: string);
    function get_OwnHelp: Boolean;
    procedure set_OwnHelp(value: Boolean);
    function get_CalculateOnExit: Boolean;
    procedure set_CalculateOnExit(value: Boolean);
    function get_EntryMacro: string;
    procedure set_EntryMacro(value: string);
    function get_ExitMacro: string;
    procedure set_ExitMacro(value: string);
    function get_Enabled: Boolean;
    procedure set_Enabled(value: Boolean);
    function get_TextInputFormat: string;
    procedure set_TextInputFormat(value: string);
    function get_TextInputType: DNTextFormFieldType;
    procedure set_TextInputType(value: DNTextFormFieldType);
    function get_TextInputDefault: string;
    procedure set_TextInputDefault(value: string);
    function get_MaxLength: Int32;
    procedure set_MaxLength(value: Int32);
    function get_DropDownItems: DNDropDownItemCollection;
    function get_DropDownSelectedIndex: Int32;
    procedure set_DropDownSelectedIndex(value: Int32);
    function get_Checked: Boolean;
    procedure set_Checked(value: Boolean);
    function get_Default: Boolean;
    procedure set_Default(value: Boolean);
    function get_IsCheckBoxExactSize: Boolean;
    procedure set_IsCheckBoxExactSize(value: Boolean);
    function get_CheckBoxSize: Double;
    procedure set_CheckBoxSize(value: Double);
    function get_ParentParagraph: DNParagraph;
    function get_Font: DNFont;
    function get_IsInsertRevision: Boolean;
    function get_IsDeleteRevision: Boolean;
    function get_IsMoveFromRevision: Boolean;
    function get_IsMoveToRevision: Boolean;
    function get_IsFormatRevision: Boolean;
    function get_ParentNode: DNCompositeNode;
    function get_Document: DNDocumentBase;
    function get_PreviousSibling: DNNode;
    function get_NextSibling: DNNode;
    function get_IsComposite: Boolean;
    function get_Range: DNRange;
    function get_CustomNodeId: Int32;
    procedure set_CustomNodeId(value: Int32);

  { methods } 

    function Accept(visitor: DNDocumentVisitor): Boolean;
    procedure RemoveField;
    procedure SetTextInputValue(newValue: DDN.mscorlib.DNObject);
    function GetText: string;
    function Clone(isCloneChildren: Boolean): DNNode;
    function GetAncestor(ancestorType: DDN.mscorlib.DNType): DNCompositeNode; overload;
    function GetAncestor(ancestorType: DNNodeType): DNCompositeNode; overload;
    procedure Remove;
    function NextPreOrder(rootNode: DNNode): DNNode;
    function PreviousPreOrder(rootNode: DNNode): DNNode;
    function ToString(saveFormat: DNSaveFormat): string; overload;
    function ToString(saveOptions: DNSaveOptions): string; overload;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string; overload;

  { propertys } 

    property NodeType: DNNodeType read get_NodeType;
    property Name: string read get_Name write set_Name;
    property &Type: DNFieldType read get_Type;
    property Result: string read get_Result write set_Result;
    property StatusText: string read get_StatusText write set_StatusText;
    property OwnStatus: Boolean read get_OwnStatus write set_OwnStatus;
    property HelpText: string read get_HelpText write set_HelpText;
    property OwnHelp: Boolean read get_OwnHelp write set_OwnHelp;
    property CalculateOnExit: Boolean read get_CalculateOnExit write set_CalculateOnExit;
    property EntryMacro: string read get_EntryMacro write set_EntryMacro;
    property ExitMacro: string read get_ExitMacro write set_ExitMacro;
    property Enabled: Boolean read get_Enabled write set_Enabled;
    property TextInputFormat: string read get_TextInputFormat write set_TextInputFormat;
    property TextInputType: DNTextFormFieldType read get_TextInputType write set_TextInputType;
    property TextInputDefault: string read get_TextInputDefault write set_TextInputDefault;
    property MaxLength: Int32 read get_MaxLength write set_MaxLength;
    property DropDownItems: DNDropDownItemCollection read get_DropDownItems;
    property DropDownSelectedIndex: Int32 read get_DropDownSelectedIndex write set_DropDownSelectedIndex;
    property Checked: Boolean read get_Checked write set_Checked;
    property &Default: Boolean read get_Default write set_Default;
    property IsCheckBoxExactSize: Boolean read get_IsCheckBoxExactSize write set_IsCheckBoxExactSize;
    property CheckBoxSize: Double read get_CheckBoxSize write set_CheckBoxSize;
    property ParentParagraph: DNParagraph read get_ParentParagraph;
    property Font: DNFont read get_Font;
    property IsInsertRevision: Boolean read get_IsInsertRevision;
    property IsDeleteRevision: Boolean read get_IsDeleteRevision;
    property IsMoveFromRevision: Boolean read get_IsMoveFromRevision;
    property IsMoveToRevision: Boolean read get_IsMoveToRevision;
    property IsFormatRevision: Boolean read get_IsFormatRevision;
    property ParentNode: DNCompositeNode read get_ParentNode;
    property Document: DNDocumentBase read get_Document;
    property PreviousSibling: DNNode read get_PreviousSibling;
    property NextSibling: DNNode read get_NextSibling;
    property IsComposite: Boolean read get_IsComposite;
    property Range: DNRange read get_Range;
    property CustomNodeId: Int32 read get_CustomNodeId write set_CustomNodeId;
  end;

  TDNFormField = class(TDNGenericImport<DNFormFieldClass, DNFormField>) end;

  //-------------namespace: Aspose.Words.Markup----------------
  DNStructuredDocumentTagRangeEndClass = interface(DNNodeClass)
  ['{F928A81D-A4EB-56D1-8122-EEC8DBCB89E5}']
  { constructors } 

    {class} function init(doc: DNDocumentBase; id: Int32): DNStructuredDocumentTagRangeEnd;

  end;

  [DNTypeName('Aspose.Words.Markup.StructuredDocumentTagRangeEnd')]
  DNStructuredDocumentTagRangeEnd = interface(DNNode)
  ['{A42A3AA6-21E5-35E4-A643-CF671210D920}']
  { getters & setters } 

    function get_NodeType: DNNodeType;
    function get_Id: Int32;
    function get_ParentNode: DNCompositeNode;
    function get_Document: DNDocumentBase;
    function get_PreviousSibling: DNNode;
    function get_NextSibling: DNNode;
    function get_IsComposite: Boolean;
    function get_Range: DNRange;
    function get_CustomNodeId: Int32;
    procedure set_CustomNodeId(value: Int32);

  { methods } 

    function Accept(visitor: DNDocumentVisitor): Boolean;
    function Clone(isCloneChildren: Boolean): DNNode;
    function GetText: string;
    function GetAncestor(ancestorType: DDN.mscorlib.DNType): DNCompositeNode; overload;
    function GetAncestor(ancestorType: DNNodeType): DNCompositeNode; overload;
    procedure Remove;
    function NextPreOrder(rootNode: DNNode): DNNode;
    function PreviousPreOrder(rootNode: DNNode): DNNode;
    function ToString(saveFormat: DNSaveFormat): string; overload;
    function ToString(saveOptions: DNSaveOptions): string; overload;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string; overload;

  { propertys } 

    property NodeType: DNNodeType read get_NodeType;
    property Id: Int32 read get_Id;
    property ParentNode: DNCompositeNode read get_ParentNode;
    property Document: DNDocumentBase read get_Document;
    property PreviousSibling: DNNode read get_PreviousSibling;
    property NextSibling: DNNode read get_NextSibling;
    property IsComposite: Boolean read get_IsComposite;
    property Range: DNRange read get_Range;
    property CustomNodeId: Int32 read get_CustomNodeId write set_CustomNodeId;
  end;

  TDNStructuredDocumentTagRangeEnd = class(TDNGenericImport<DNStructuredDocumentTagRangeEndClass, DNStructuredDocumentTagRangeEnd>) end;

  //-------------namespace: Aspose.Words.Markup----------------
  DNStructuredDocumentTagRangeStartClass = interface(DNNodeClass)
  ['{1B338B23-CFC8-5898-B301-AA44C02635B0}']
  { constructors } 

    {class} function init(doc: DNDocumentBase; &type: DNSdtType): DNStructuredDocumentTagRangeStart;

  end;

  [DNTypeName('Aspose.Words.Markup.StructuredDocumentTagRangeStart')]
  DNStructuredDocumentTagRangeStart = interface(DNNode)
  ['{DCCDE17E-C127-37BC-A8A6-CB7DCFC24092}']
  { getters & setters } 

    function get_NodeType: DNNodeType;
    function get_ChildNodes: DNNodeCollection;
    function get_LastChild: DNNode;
    function get_Level: DNMarkupLevel;
    function get_SdtType: DNSdtType;
    function get_Color: DDN.System.Drawing.DNColor;
    procedure set_Color(value: DDN.System.Drawing.DNColor);
    function get_Id: Int32;
    function get_LockContentControl: Boolean;
    procedure set_LockContentControl(value: Boolean);
    function get_LockContents: Boolean;
    procedure set_LockContents(value: Boolean);
    function get_IsShowingPlaceholderText: Boolean;
    procedure set_IsShowingPlaceholderText(value: Boolean);
    function get_Placeholder: DNBuildingBlock;
    function get_PlaceholderName: string;
    procedure set_PlaceholderName(value: string);
    function get_Tag: string;
    procedure set_Tag(value: string);
    function get_Title: string;
    procedure set_Title(value: string);
    function get_XmlMapping: DNXmlMapping;
    function get_RangeEnd: DNStructuredDocumentTagRangeEnd;
    function get_ParentNode: DNCompositeNode;
    function get_Document: DNDocumentBase;
    function get_PreviousSibling: DNNode;
    function get_NextSibling: DNNode;
    function get_IsComposite: Boolean;
    function get_Range: DNRange;
    function get_CustomNodeId: Int32;
    procedure set_CustomNodeId(value: Int32);

  { methods } 

    function GetChildNodes(nodeType: DNNodeType; isDeep: Boolean): DNNodeCollection;
    function Accept(visitor: DNDocumentVisitor): Boolean;
    function GetEnumerator: DDN.mscorlib.DNIEnumerator<DNNode>;
    function AppendChild(newChild: DNNode): DNNode;
    procedure RemoveAllChildren;
    procedure RemoveSelfOnly;
    function Clone(isCloneChildren: Boolean): DNNode;
    function GetText: string;
    function GetAncestor(ancestorType: DDN.mscorlib.DNType): DNCompositeNode; overload;
    function GetAncestor(ancestorType: DNNodeType): DNCompositeNode; overload;
    procedure Remove;
    function NextPreOrder(rootNode: DNNode): DNNode;
    function PreviousPreOrder(rootNode: DNNode): DNNode;
    function ToString(saveFormat: DNSaveFormat): string; overload;
    function ToString(saveOptions: DNSaveOptions): string; overload;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string; overload;

  { propertys } 

    property NodeType: DNNodeType read get_NodeType;
    property ChildNodes: DNNodeCollection read get_ChildNodes;
    property LastChild: DNNode read get_LastChild;
    property Level: DNMarkupLevel read get_Level;
    property SdtType: DNSdtType read get_SdtType;
    property Color: DDN.System.Drawing.DNColor read get_Color write set_Color;
    property Id: Int32 read get_Id;
    property LockContentControl: Boolean read get_LockContentControl write set_LockContentControl;
    property LockContents: Boolean read get_LockContents write set_LockContents;
    property IsShowingPlaceholderText: Boolean read get_IsShowingPlaceholderText write set_IsShowingPlaceholderText;
    property Placeholder: DNBuildingBlock read get_Placeholder;
    property PlaceholderName: string read get_PlaceholderName write set_PlaceholderName;
    property Tag: string read get_Tag write set_Tag;
    property Title: string read get_Title write set_Title;
    property XmlMapping: DNXmlMapping read get_XmlMapping;
    property RangeEnd: DNStructuredDocumentTagRangeEnd read get_RangeEnd;
    property ParentNode: DNCompositeNode read get_ParentNode;
    property Document: DNDocumentBase read get_Document;
    property PreviousSibling: DNNode read get_PreviousSibling;
    property NextSibling: DNNode read get_NextSibling;
    property IsComposite: Boolean read get_IsComposite;
    property Range: DNRange read get_Range;
    property CustomNodeId: Int32 read get_CustomNodeId write set_CustomNodeId;
  end;

  TDNStructuredDocumentTagRangeStart = class(TDNGenericImport<DNStructuredDocumentTagRangeStartClass, DNStructuredDocumentTagRangeStart>) end;

  //-------------namespace: Aspose.Words----------------
  DNSubDocumentClass = interface(DNNodeClass)
  ['{5F9EB952-50F4-5478-B813-52F5ACD88FFD}']
  end;

  [DNTypeName('Aspose.Words.SubDocument')]
  DNSubDocument = interface(DNNode)
  ['{3BCB0991-32DE-3A57-A001-EF4FE73ED2A4}']
  { getters & setters } 

    function get_NodeType: DNNodeType;
    function get_ParentNode: DNCompositeNode;
    function get_Document: DNDocumentBase;
    function get_PreviousSibling: DNNode;
    function get_NextSibling: DNNode;
    function get_IsComposite: Boolean;
    function get_Range: DNRange;
    function get_CustomNodeId: Int32;
    procedure set_CustomNodeId(value: Int32);

  { methods } 

    function Accept(visitor: DNDocumentVisitor): Boolean;
    function Clone(isCloneChildren: Boolean): DNNode;
    function GetText: string;
    function GetAncestor(ancestorType: DDN.mscorlib.DNType): DNCompositeNode; overload;
    function GetAncestor(ancestorType: DNNodeType): DNCompositeNode; overload;
    procedure Remove;
    function NextPreOrder(rootNode: DNNode): DNNode;
    function PreviousPreOrder(rootNode: DNNode): DNNode;
    function ToString(saveFormat: DNSaveFormat): string; overload;
    function ToString(saveOptions: DNSaveOptions): string; overload;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string; overload;

  { propertys } 

    property NodeType: DNNodeType read get_NodeType;
    property ParentNode: DNCompositeNode read get_ParentNode;
    property Document: DNDocumentBase read get_Document;
    property PreviousSibling: DNNode read get_PreviousSibling;
    property NextSibling: DNNode read get_NextSibling;
    property IsComposite: Boolean read get_IsComposite;
    property Range: DNRange read get_Range;
    property CustomNodeId: Int32 read get_CustomNodeId write set_CustomNodeId;
  end;

  TDNSubDocument = class(TDNGenericImport<DNSubDocumentClass, DNSubDocument>) end;

  //-------------namespace: Aspose.Words----------------
  DNNodeChangingArgsClass = interface(DDN.mscorlib.DNObjectClass)
  ['{93DF10FD-0E44-514F-B078-9195980ADD4F}']
  end;

  [DNTypeName('Aspose.Words.NodeChangingArgs')]
  DNNodeChangingArgs = interface(DDN.mscorlib.DNObject)
  ['{635F9463-EF4C-3295-8013-83177CB6115C}']
  { getters & setters } 

    function get_Node: DNNode;
    function get_OldParent: DNNode;
    function get_NewParent: DNNode;
    function get_Action: DNNodeChangingAction;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Node: DNNode read get_Node;
    property OldParent: DNNode read get_OldParent;
    property NewParent: DNNode read get_NewParent;
    property Action: DNNodeChangingAction read get_Action;
  end;

  TDNNodeChangingArgs = class(TDNGenericImport<DNNodeChangingArgsClass, DNNodeChangingArgs>) end;

  //-------------namespace: Aspose.Words----------------
  DNNodeCollectionClass = interface(DNObjectClass)
  ['{E0848A83-D237-5CDE-9740-505DD1C7A8BD}']
  end;

  [DNTypeName('Aspose.Words.NodeCollection')]
  DNNodeCollection = interface(DDN.mscorlib.DNIEnumerable)
  ['{812B3881-C65B-3C5D-A865-04ED8F02B9FF}']
  { getters & setters } 

    function get_Item(index: Int32): DNNode;
    function get_Count: Int32;

  { methods } 

    procedure Add(node: DNNode);
    procedure Insert(index: Int32; node: DNNode);
    procedure Remove(node: DNNode);
    procedure RemoveAt(index: Int32);
    procedure Clear;
    function &Contains(node: DNNode): Boolean;
    function IndexOf(node: DNNode): Int32;
    function ToArray: TArray<DNNode>;
    function GetEnumerator: DDN.mscorlib.DNIEnumerator<DNNode>;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Item[index: Int32]: DNNode read get_Item; default;
    property Count: Int32 read get_Count;
  end;

  TDNNodeCollection = class(TDNGenericImport<DNNodeCollectionClass, DNNodeCollection>) end;

  //-------------namespace: Aspose.Words.BuildingBlocks----------------
  DNBuildingBlockCollectionClass = interface(DNNodeCollectionClass)
  ['{4DB2D1FF-A18F-5074-8D27-E384840506FF}']
  end;

  [DNTypeName('Aspose.Words.BuildingBlocks.BuildingBlockCollection')]
  DNBuildingBlockCollection = interface(DNNodeCollection)
  ['{3DFEC7B2-8098-3897-8A80-E18F05A3DFFD}']
  { getters & setters } 

    function get_Item(index: Int32): DNBuildingBlock;
    function get_Count: Int32;

  { methods } 

    function ToArray: TArray<DNBuildingBlock>;
    procedure Add(node: DNNode);
    procedure Insert(index: Int32; node: DNNode);
    procedure Remove(node: DNNode);
    procedure RemoveAt(index: Int32);
    procedure Clear;
    function &Contains(node: DNNode): Boolean;
    function IndexOf(node: DNNode): Int32;
    function GetEnumerator: DDN.mscorlib.DNIEnumerator<DNNode>;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Item[index: Int32]: DNBuildingBlock read get_Item; default;
    property Count: Int32 read get_Count;
  end;

  TDNBuildingBlockCollection = class(TDNGenericImport<DNBuildingBlockCollectionClass, DNBuildingBlockCollection>) end;

  //-------------namespace: Aspose.Words----------------
  DNCommentCollectionClass = interface(DNNodeCollectionClass)
  ['{03C809E5-8C58-5C24-9274-070AC5C63D47}']
  end;

  [DNTypeName('Aspose.Words.CommentCollection')]
  DNCommentCollection = interface(DNNodeCollection)
  ['{AE0C4514-54AC-3A56-ABDE-E14E6BE0769F}']
  { getters & setters } 

    function get_Item(index: Int32): DNComment;
    function get_Count: Int32;

  { methods } 

    procedure Add(node: DNNode);
    procedure Insert(index: Int32; node: DNNode);
    procedure Remove(node: DNNode);
    procedure RemoveAt(index: Int32);
    procedure Clear;
    function &Contains(node: DNNode): Boolean;
    function IndexOf(node: DNNode): Int32;
    function ToArray: TArray<DNNode>;
    function GetEnumerator: DDN.mscorlib.DNIEnumerator<DNNode>;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Item[index: Int32]: DNComment read get_Item; default;
    property Count: Int32 read get_Count;
  end;

  TDNCommentCollection = class(TDNGenericImport<DNCommentCollectionClass, DNCommentCollection>) end;

  //-------------namespace: Aspose.Words----------------
  DNHeaderFooterCollectionClass = interface(DNNodeCollectionClass)
  ['{958D0956-310B-56A5-B9AC-21D1ECE6A4A0}']
  end;

  [DNTypeName('Aspose.Words.HeaderFooterCollection')]
  DNHeaderFooterCollection = interface(DNNodeCollection)
  ['{474E72BF-A50C-35A0-BC71-ED6E60DA716B}']
  { getters & setters } 

    function get_Item(index: Int32): DNHeaderFooter; overload;
    function get_Item(headerFooterType: DNHeaderFooterType): DNHeaderFooter; overload;
    function get_Count: Int32;

  { methods } 

    procedure LinkToPrevious(isLinkToPrevious: Boolean); overload;
    procedure LinkToPrevious(headerFooterType: DNHeaderFooterType; isLinkToPrevious: Boolean); overload;
    function ToArray: TArray<DNHeaderFooter>;
    procedure Add(node: DNNode);
    procedure Insert(index: Int32; node: DNNode);
    procedure Remove(node: DNNode);
    procedure RemoveAt(index: Int32);
    procedure Clear;
    function &Contains(node: DNNode): Boolean;
    function IndexOf(node: DNNode): Int32;
    function GetEnumerator: DDN.mscorlib.DNIEnumerator<DNNode>;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Item[index: Int32]: DNHeaderFooter read get_Item; default;
    property Item[headerFooterType: DNHeaderFooterType]: DNHeaderFooter read get_Item; default;
    property Count: Int32 read get_Count;
  end;

  TDNHeaderFooterCollection = class(TDNGenericImport<DNHeaderFooterCollectionClass, DNHeaderFooterCollection>) end;

  //-------------namespace: Aspose.Words----------------
  DNParagraphCollectionClass = interface(DNNodeCollectionClass)
  ['{4B339BA6-783A-50F6-824C-6077CAC5DE86}']
  end;

  [DNTypeName('Aspose.Words.ParagraphCollection')]
  DNParagraphCollection = interface(DNNodeCollection)
  ['{E0003EAB-8A3C-3AA0-80D3-32384B9C05AB}']
  { getters & setters } 

    function get_Item(index: Int32): DNParagraph;
    function get_Count: Int32;

  { methods } 

    function ToArray: TArray<DNParagraph>;
    procedure Add(node: DNNode);
    procedure Insert(index: Int32; node: DNNode);
    procedure Remove(node: DNNode);
    procedure RemoveAt(index: Int32);
    procedure Clear;
    function &Contains(node: DNNode): Boolean;
    function IndexOf(node: DNNode): Int32;
    function GetEnumerator: DDN.mscorlib.DNIEnumerator<DNNode>;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Item[index: Int32]: DNParagraph read get_Item; default;
    property Count: Int32 read get_Count;
  end;

  TDNParagraphCollection = class(TDNGenericImport<DNParagraphCollectionClass, DNParagraphCollection>) end;

  //-------------namespace: Aspose.Words----------------
  DNRunCollectionClass = interface(DNNodeCollectionClass)
  ['{47C6DC46-64CB-53BE-B595-CC3B7F675BAA}']
  end;

  [DNTypeName('Aspose.Words.RunCollection')]
  DNRunCollection = interface(DNNodeCollection)
  ['{3D12B004-D86D-35F2-A0C2-C209BBA1170A}']
  { getters & setters } 

    function get_Item(index: Int32): DNRun;
    function get_Count: Int32;

  { methods } 

    function ToArray: TArray<DNRun>;
    procedure Add(node: DNNode);
    procedure Insert(index: Int32; node: DNNode);
    procedure Remove(node: DNNode);
    procedure RemoveAt(index: Int32);
    procedure Clear;
    function &Contains(node: DNNode): Boolean;
    function IndexOf(node: DNNode): Int32;
    function GetEnumerator: DDN.mscorlib.DNIEnumerator<DNNode>;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Item[index: Int32]: DNRun read get_Item; default;
    property Count: Int32 read get_Count;
  end;

  TDNRunCollection = class(TDNGenericImport<DNRunCollectionClass, DNRunCollection>) end;

  //-------------namespace: Aspose.Words----------------
  DNSectionCollectionClass = interface(DNNodeCollectionClass)
  ['{D045BE58-54FD-52CC-8609-D88EB445CA85}']
  end;

  [DNTypeName('Aspose.Words.SectionCollection')]
  DNSectionCollection = interface(DNNodeCollection)
  ['{AD204A75-4D86-312D-BA85-38589B19CDA8}']
  { getters & setters } 

    function get_Item(index: Int32): DNSection;
    function get_Count: Int32;

  { methods } 

    function ToArray: TArray<DNSection>;
    procedure Add(node: DNNode);
    procedure Insert(index: Int32; node: DNNode);
    procedure Remove(node: DNNode);
    procedure RemoveAt(index: Int32);
    procedure Clear;
    function &Contains(node: DNNode): Boolean;
    function IndexOf(node: DNNode): Int32;
    function GetEnumerator: DDN.mscorlib.DNIEnumerator<DNNode>;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Item[index: Int32]: DNSection read get_Item; default;
    property Count: Int32 read get_Count;
  end;

  TDNSectionCollection = class(TDNGenericImport<DNSectionCollectionClass, DNSectionCollection>) end;

  //-------------namespace: Aspose.Words.Tables----------------
  DNCellCollectionClass = interface(DNNodeCollectionClass)
  ['{DBD54C62-9688-5684-B221-FACA9D93E0EA}']
  end;

  [DNTypeName('Aspose.Words.Tables.CellCollection')]
  DNCellCollection = interface(DNNodeCollection)
  ['{E897CDF4-993D-3252-9E97-6B3E56A188DD}']
  { getters & setters } 

    function get_Item(index: Int32): DNCell;
    function get_Count: Int32;

  { methods } 

    function ToArray: TArray<DNCell>;
    procedure Add(node: DNNode);
    procedure Insert(index: Int32; node: DNNode);
    procedure Remove(node: DNNode);
    procedure RemoveAt(index: Int32);
    procedure Clear;
    function &Contains(node: DNNode): Boolean;
    function IndexOf(node: DNNode): Int32;
    function GetEnumerator: DDN.mscorlib.DNIEnumerator<DNNode>;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Item[index: Int32]: DNCell read get_Item; default;
    property Count: Int32 read get_Count;
  end;

  TDNCellCollection = class(TDNGenericImport<DNCellCollectionClass, DNCellCollection>) end;

  //-------------namespace: Aspose.Words.Tables----------------
  DNRowCollectionClass = interface(DNNodeCollectionClass)
  ['{6D150B72-6C1A-5ED6-A008-9CD5FFA9958B}']
  end;

  [DNTypeName('Aspose.Words.Tables.RowCollection')]
  DNRowCollection = interface(DNNodeCollection)
  ['{A861A047-5A78-3656-9EBE-E44DCF80174C}']
  { getters & setters } 

    function get_Item(index: Int32): DNRow;
    function get_Count: Int32;

  { methods } 

    function ToArray: TArray<DNRow>;
    procedure Add(node: DNNode);
    procedure Insert(index: Int32; node: DNNode);
    procedure Remove(node: DNNode);
    procedure RemoveAt(index: Int32);
    procedure Clear;
    function &Contains(node: DNNode): Boolean;
    function IndexOf(node: DNNode): Int32;
    function GetEnumerator: DDN.mscorlib.DNIEnumerator<DNNode>;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Item[index: Int32]: DNRow read get_Item; default;
    property Count: Int32 read get_Count;
  end;

  TDNRowCollection = class(TDNGenericImport<DNRowCollectionClass, DNRowCollection>) end;

  //-------------namespace: Aspose.Words.Tables----------------
  DNTableCollectionClass = interface(DNNodeCollectionClass)
  ['{FD31337E-662A-5099-99BD-391D8CF09F58}']
  end;

  [DNTypeName('Aspose.Words.Tables.TableCollection')]
  DNTableCollection = interface(DNNodeCollection)
  ['{F29700E8-77EA-3800-A365-610DEB5839F6}']
  { getters & setters } 

    function get_Item(index: Int32): DNTable;
    function get_Count: Int32;

  { methods } 

    function ToArray: TArray<DNTable>;
    procedure Add(node: DNNode);
    procedure Insert(index: Int32; node: DNNode);
    procedure Remove(node: DNNode);
    procedure RemoveAt(index: Int32);
    procedure Clear;
    function &Contains(node: DNNode): Boolean;
    function IndexOf(node: DNNode): Int32;
    function GetEnumerator: DDN.mscorlib.DNIEnumerator<DNNode>;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Item[index: Int32]: DNTable read get_Item; default;
    property Count: Int32 read get_Count;
  end;

  TDNTableCollection = class(TDNGenericImport<DNTableCollectionClass, DNTableCollection>) end;

  //-------------namespace: Aspose.Words----------------
  DNNodeImporterClass = interface(DDN.mscorlib.DNObjectClass)
  ['{2D496794-FA07-5E21-A1E8-AD20AED16B09}']
  { constructors } 

    {class} function init(srcDoc: DNDocumentBase; dstDoc: DNDocumentBase; importFormatMode: DNImportFormatMode): DNNodeImporter; overload;
    {class} function init(srcDoc: DNDocumentBase; dstDoc: DNDocumentBase; importFormatMode: DNImportFormatMode; importFormatOptions: DNImportFormatOptions): DNNodeImporter; overload;

  end;

  [DNTypeName('Aspose.Words.NodeImporter')]
  DNNodeImporter = interface(DDN.mscorlib.DNObject)
  ['{AE19784E-F6B7-302A-854F-F5009B003E17}']
  { methods } 

    function ImportNode(srcNode: DNNode; isImportChildren: Boolean): DNNode;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNNodeImporter = class(TDNGenericImport<DNNodeImporterClass, DNNodeImporter>) end;

  //-------------namespace: Aspose.Words----------------
  DNNodeListClass = interface(DNObjectClass)
  ['{7A08AACD-35FC-5F05-A029-5B599364CC5A}']
  end;

  [DNTypeName('Aspose.Words.NodeList')]
  DNNodeList = interface(DDN.mscorlib.DNIEnumerable)
  ['{839D053C-7D17-3598-8E82-152051A14B61}']
  { getters & setters } 

    function get_Item(index: Int32): DNNode;
    function get_Count: Int32;

  { methods } 

    function ToArray: TArray<DNNode>;
    function GetEnumerator: DDN.mscorlib.DNIEnumerator<DNNode>;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Item[index: Int32]: DNNode read get_Item; default;
    property Count: Int32 read get_Count;
  end;

  TDNNodeList = class(TDNGenericImport<DNNodeListClass, DNNodeList>) end;

  //-------------namespace: Aspose.Words.Notes----------------
  DNEndnoteOptionsClass = interface(DDN.mscorlib.DNObjectClass)
  ['{2261E24B-6F2F-5F1B-9969-4DAA5D044C93}']
  end;

  [DNTypeName('Aspose.Words.Notes.EndnoteOptions')]
  DNEndnoteOptions = interface(DDN.mscorlib.DNObject)
  ['{645F81B5-5528-34D5-88E5-3BCB3A0D02B0}']
  { getters & setters } 

    function get_Position: DNEndnotePosition;
    procedure set_Position(value: DNEndnotePosition);
    function get_NumberStyle: DNNumberStyle;
    procedure set_NumberStyle(value: DNNumberStyle);
    function get_StartNumber: Int32;
    procedure set_StartNumber(value: Int32);
    function get_RestartRule: DNFootnoteNumberingRule;
    procedure set_RestartRule(value: DNFootnoteNumberingRule);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Position: DNEndnotePosition read get_Position write set_Position;
    property NumberStyle: DNNumberStyle read get_NumberStyle write set_NumberStyle;
    property StartNumber: Int32 read get_StartNumber write set_StartNumber;
    property RestartRule: DNFootnoteNumberingRule read get_RestartRule write set_RestartRule;
  end;

  TDNEndnoteOptions = class(TDNGenericImport<DNEndnoteOptionsClass, DNEndnoteOptions>) end;

  //-------------namespace: Aspose.Words.Notes----------------
  DNFootnoteOptionsClass = interface(DDN.mscorlib.DNObjectClass)
  ['{22B0CEFE-3BF8-56D7-9097-6005BEA6E55C}']
  end;

  [DNTypeName('Aspose.Words.Notes.FootnoteOptions')]
  DNFootnoteOptions = interface(DDN.mscorlib.DNObject)
  ['{A71070B9-018F-31A4-8BE5-60407F63FCFC}']
  { getters & setters } 

    function get_Position: DNFootnotePosition;
    procedure set_Position(value: DNFootnotePosition);
    function get_NumberStyle: DNNumberStyle;
    procedure set_NumberStyle(value: DNNumberStyle);
    function get_StartNumber: Int32;
    procedure set_StartNumber(value: Int32);
    function get_RestartRule: DNFootnoteNumberingRule;
    procedure set_RestartRule(value: DNFootnoteNumberingRule);
    function get_Columns: Int32;
    procedure set_Columns(value: Int32);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Position: DNFootnotePosition read get_Position write set_Position;
    property NumberStyle: DNNumberStyle read get_NumberStyle write set_NumberStyle;
    property StartNumber: Int32 read get_StartNumber write set_StartNumber;
    property RestartRule: DNFootnoteNumberingRule read get_RestartRule write set_RestartRule;
    property Columns: Int32 read get_Columns write set_Columns;
  end;

  TDNFootnoteOptions = class(TDNGenericImport<DNFootnoteOptionsClass, DNFootnoteOptions>) end;

  //-------------namespace: Aspose.Words----------------
  DNPageSetupClass = interface(DDN.mscorlib.DNObjectClass)
  ['{F27F5F00-C374-5219-81DE-E32195CCEECC}']
  end;

  [DNTypeName('Aspose.Words.PageSetup')]
  DNPageSetup = interface(DDN.mscorlib.DNObject)
  ['{F86E3F2E-2938-37E5-8834-5CD905696831}']
  { getters & setters } 

    function get_OddAndEvenPagesHeaderFooter: Boolean;
    procedure set_OddAndEvenPagesHeaderFooter(value: Boolean);
    function get_DifferentFirstPageHeaderFooter: Boolean;
    procedure set_DifferentFirstPageHeaderFooter(value: Boolean);
    function get_MultiplePages: DNMultiplePagesType;
    procedure set_MultiplePages(value: DNMultiplePagesType);
    function get_SheetsPerBooklet: Int32;
    procedure set_SheetsPerBooklet(value: Int32);
    function get_SectionStart: DNSectionStart;
    procedure set_SectionStart(value: DNSectionStart);
    function get_SuppressEndnotes: Boolean;
    procedure set_SuppressEndnotes(value: Boolean);
    function get_VerticalAlignment: DNPageVerticalAlignment;
    procedure set_VerticalAlignment(value: DNPageVerticalAlignment);
    function get_Bidi: Boolean;
    procedure set_Bidi(value: Boolean);
    function get_LayoutMode: DNSectionLayoutMode;
    procedure set_LayoutMode(value: DNSectionLayoutMode);
    function get_CharactersPerLine: Int32;
    procedure set_CharactersPerLine(value: Int32);
    function get_LinesPerPage: Int32;
    procedure set_LinesPerPage(value: Int32);
    function get_PageWidth: Double;
    procedure set_PageWidth(value: Double);
    function get_PageHeight: Double;
    procedure set_PageHeight(value: Double);
    function get_PaperSize: DNPaperSize;
    procedure set_PaperSize(value: DNPaperSize);
    function get_Orientation: DNOrientation;
    procedure set_Orientation(value: DNOrientation);
    function get_LeftMargin: Double;
    procedure set_LeftMargin(value: Double);
    function get_RightMargin: Double;
    procedure set_RightMargin(value: Double);
    function get_TopMargin: Double;
    procedure set_TopMargin(value: Double);
    function get_BottomMargin: Double;
    procedure set_BottomMargin(value: Double);
    function get_HeaderDistance: Double;
    procedure set_HeaderDistance(value: Double);
    function get_FooterDistance: Double;
    procedure set_FooterDistance(value: Double);
    function get_Gutter: Double;
    procedure set_Gutter(value: Double);
    function get_FirstPageTray: Int32;
    procedure set_FirstPageTray(value: Int32);
    function get_OtherPagesTray: Int32;
    procedure set_OtherPagesTray(value: Int32);
    function get_PageNumberStyle: DNNumberStyle;
    procedure set_PageNumberStyle(value: DNNumberStyle);
    function get_RestartPageNumbering: Boolean;
    procedure set_RestartPageNumbering(value: Boolean);
    function get_PageStartingNumber: Int32;
    procedure set_PageStartingNumber(value: Int32);
    function get_LineNumberRestartMode: DNLineNumberRestartMode;
    procedure set_LineNumberRestartMode(value: DNLineNumberRestartMode);
    function get_LineNumberCountBy: Int32;
    procedure set_LineNumberCountBy(value: Int32);
    function get_LineNumberDistanceFromText: Double;
    procedure set_LineNumberDistanceFromText(value: Double);
    function get_LineStartingNumber: Int32;
    procedure set_LineStartingNumber(value: Int32);
    function get_TextColumns: DNTextColumnCollection;
    function get_RtlGutter: Boolean;
    procedure set_RtlGutter(value: Boolean);
    function get_BorderAlwaysInFront: Boolean;
    procedure set_BorderAlwaysInFront(value: Boolean);
    function get_BorderDistanceFrom: DNPageBorderDistanceFrom;
    procedure set_BorderDistanceFrom(value: DNPageBorderDistanceFrom);
    function get_BorderAppliesTo: DNPageBorderAppliesTo;
    procedure set_BorderAppliesTo(value: DNPageBorderAppliesTo);
    function get_BorderSurroundsHeader: Boolean;
    procedure set_BorderSurroundsHeader(value: Boolean);
    function get_BorderSurroundsFooter: Boolean;
    procedure set_BorderSurroundsFooter(value: Boolean);
    function get_Borders: DNBorderCollection;
    function get_FootnoteOptions: DNFootnoteOptions;
    function get_EndnoteOptions: DNEndnoteOptions;
    function get_TextOrientation: DNTextOrientation;
    procedure set_TextOrientation(value: DNTextOrientation);

  { methods } 

    procedure ClearFormatting;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property OddAndEvenPagesHeaderFooter: Boolean read get_OddAndEvenPagesHeaderFooter write set_OddAndEvenPagesHeaderFooter;
    property DifferentFirstPageHeaderFooter: Boolean read get_DifferentFirstPageHeaderFooter write set_DifferentFirstPageHeaderFooter;
    property MultiplePages: DNMultiplePagesType read get_MultiplePages write set_MultiplePages;
    property SheetsPerBooklet: Int32 read get_SheetsPerBooklet write set_SheetsPerBooklet;
    property SectionStart: DNSectionStart read get_SectionStart write set_SectionStart;
    property SuppressEndnotes: Boolean read get_SuppressEndnotes write set_SuppressEndnotes;
    property VerticalAlignment: DNPageVerticalAlignment read get_VerticalAlignment write set_VerticalAlignment;
    property Bidi: Boolean read get_Bidi write set_Bidi;
    property LayoutMode: DNSectionLayoutMode read get_LayoutMode write set_LayoutMode;
    property CharactersPerLine: Int32 read get_CharactersPerLine write set_CharactersPerLine;
    property LinesPerPage: Int32 read get_LinesPerPage write set_LinesPerPage;
    property PageWidth: Double read get_PageWidth write set_PageWidth;
    property PageHeight: Double read get_PageHeight write set_PageHeight;
    property PaperSize: DNPaperSize read get_PaperSize write set_PaperSize;
    property Orientation: DNOrientation read get_Orientation write set_Orientation;
    property LeftMargin: Double read get_LeftMargin write set_LeftMargin;
    property RightMargin: Double read get_RightMargin write set_RightMargin;
    property TopMargin: Double read get_TopMargin write set_TopMargin;
    property BottomMargin: Double read get_BottomMargin write set_BottomMargin;
    property HeaderDistance: Double read get_HeaderDistance write set_HeaderDistance;
    property FooterDistance: Double read get_FooterDistance write set_FooterDistance;
    property Gutter: Double read get_Gutter write set_Gutter;
    property FirstPageTray: Int32 read get_FirstPageTray write set_FirstPageTray;
    property OtherPagesTray: Int32 read get_OtherPagesTray write set_OtherPagesTray;
    property PageNumberStyle: DNNumberStyle read get_PageNumberStyle write set_PageNumberStyle;
    property RestartPageNumbering: Boolean read get_RestartPageNumbering write set_RestartPageNumbering;
    property PageStartingNumber: Int32 read get_PageStartingNumber write set_PageStartingNumber;
    property LineNumberRestartMode: DNLineNumberRestartMode read get_LineNumberRestartMode write set_LineNumberRestartMode;
    property LineNumberCountBy: Int32 read get_LineNumberCountBy write set_LineNumberCountBy;
    property LineNumberDistanceFromText: Double read get_LineNumberDistanceFromText write set_LineNumberDistanceFromText;
    property LineStartingNumber: Int32 read get_LineStartingNumber write set_LineStartingNumber;
    property TextColumns: DNTextColumnCollection read get_TextColumns;
    property RtlGutter: Boolean read get_RtlGutter write set_RtlGutter;
    property BorderAlwaysInFront: Boolean read get_BorderAlwaysInFront write set_BorderAlwaysInFront;
    property BorderDistanceFrom: DNPageBorderDistanceFrom read get_BorderDistanceFrom write set_BorderDistanceFrom;
    property BorderAppliesTo: DNPageBorderAppliesTo read get_BorderAppliesTo write set_BorderAppliesTo;
    property BorderSurroundsHeader: Boolean read get_BorderSurroundsHeader write set_BorderSurroundsHeader;
    property BorderSurroundsFooter: Boolean read get_BorderSurroundsFooter write set_BorderSurroundsFooter;
    property Borders: DNBorderCollection read get_Borders;
    property FootnoteOptions: DNFootnoteOptions read get_FootnoteOptions;
    property EndnoteOptions: DNEndnoteOptions read get_EndnoteOptions;
    property TextOrientation: DNTextOrientation read get_TextOrientation write set_TextOrientation;
  end;

  TDNPageSetup = class(TDNGenericImport<DNPageSetupClass, DNPageSetup>) end;

  //-------------namespace: Aspose.Words----------------
  DNParagraphFormatClass = interface(DDN.mscorlib.DNObjectClass)
  ['{6261CF0B-464B-5729-886A-7D375D30BEEA}']
  end;

  [DNTypeName('Aspose.Words.ParagraphFormat')]
  DNParagraphFormat = interface(DDN.mscorlib.DNObject)
  ['{F2448B50-30BA-34A8-ACFA-89F346156D7A}']
  { getters & setters } 

    function get_Alignment: DNParagraphAlignment;
    procedure set_Alignment(value: DNParagraphAlignment);
    function get_NoSpaceBetweenParagraphsOfSameStyle: Boolean;
    procedure set_NoSpaceBetweenParagraphsOfSameStyle(value: Boolean);
    function get_KeepTogether: Boolean;
    procedure set_KeepTogether(value: Boolean);
    function get_KeepWithNext: Boolean;
    procedure set_KeepWithNext(value: Boolean);
    function get_PageBreakBefore: Boolean;
    procedure set_PageBreakBefore(value: Boolean);
    function get_SuppressLineNumbers: Boolean;
    procedure set_SuppressLineNumbers(value: Boolean);
    function get_SuppressAutoHyphens: Boolean;
    procedure set_SuppressAutoHyphens(value: Boolean);
    function get_WidowControl: Boolean;
    procedure set_WidowControl(value: Boolean);
    function get_AddSpaceBetweenFarEastAndAlpha: Boolean;
    procedure set_AddSpaceBetweenFarEastAndAlpha(value: Boolean);
    function get_AddSpaceBetweenFarEastAndDigit: Boolean;
    procedure set_AddSpaceBetweenFarEastAndDigit(value: Boolean);
    function get_FarEastLineBreakControl: Boolean;
    procedure set_FarEastLineBreakControl(value: Boolean);
    function get_WordWrap: Boolean;
    procedure set_WordWrap(value: Boolean);
    function get_HangingPunctuation: Boolean;
    procedure set_HangingPunctuation(value: Boolean);
    function get_Bidi: Boolean;
    procedure set_Bidi(value: Boolean);
    function get_LeftIndent: Double;
    procedure set_LeftIndent(value: Double);
    function get_CharacterUnitLeftIndent: Double;
    procedure set_CharacterUnitLeftIndent(value: Double);
    function get_RightIndent: Double;
    procedure set_RightIndent(value: Double);
    function get_CharacterUnitRightIndent: Double;
    procedure set_CharacterUnitRightIndent(value: Double);
    function get_FirstLineIndent: Double;
    procedure set_FirstLineIndent(value: Double);
    function get_CharacterUnitFirstLineIndent: Double;
    procedure set_CharacterUnitFirstLineIndent(value: Double);
    function get_SpaceBeforeAuto: Boolean;
    procedure set_SpaceBeforeAuto(value: Boolean);
    function get_SpaceAfterAuto: Boolean;
    procedure set_SpaceAfterAuto(value: Boolean);
    function get_SpaceBefore: Double;
    procedure set_SpaceBefore(value: Double);
    function get_LineUnitBefore: Double;
    procedure set_LineUnitBefore(value: Double);
    function get_SpaceAfter: Double;
    procedure set_SpaceAfter(value: Double);
    function get_LineUnitAfter: Double;
    procedure set_LineUnitAfter(value: Double);
    function get_LineSpacingRule: DNLineSpacingRule;
    procedure set_LineSpacingRule(value: DNLineSpacingRule);
    function get_LineSpacing: Double;
    procedure set_LineSpacing(value: Double);
    function get_IsHeading: Boolean;
    function get_IsListItem: Boolean;
    function get_OutlineLevel: DNOutlineLevel;
    procedure set_OutlineLevel(value: DNOutlineLevel);
    function get_LinesToDrop: Int32;
    procedure set_LinesToDrop(value: Int32);
    function get_DropCapPosition: DNDropCapPosition;
    procedure set_DropCapPosition(value: DNDropCapPosition);
    function get_Shading: DNShading;
    function get_Borders: DNBorderCollection;
    function get_Style: DNStyle;
    procedure set_Style(value: DNStyle);
    function get_StyleName: string;
    procedure set_StyleName(value: string);
    function get_StyleIdentifier: DNStyleIdentifier;
    procedure set_StyleIdentifier(value: DNStyleIdentifier);
    function get_SnapToGrid: Boolean;
    procedure set_SnapToGrid(value: Boolean);
    function get_TabStops: DNTabStopCollection;

  { methods } 

    procedure ClearFormatting;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Alignment: DNParagraphAlignment read get_Alignment write set_Alignment;
    property NoSpaceBetweenParagraphsOfSameStyle: Boolean read get_NoSpaceBetweenParagraphsOfSameStyle write set_NoSpaceBetweenParagraphsOfSameStyle;
    property KeepTogether: Boolean read get_KeepTogether write set_KeepTogether;
    property KeepWithNext: Boolean read get_KeepWithNext write set_KeepWithNext;
    property PageBreakBefore: Boolean read get_PageBreakBefore write set_PageBreakBefore;
    property SuppressLineNumbers: Boolean read get_SuppressLineNumbers write set_SuppressLineNumbers;
    property SuppressAutoHyphens: Boolean read get_SuppressAutoHyphens write set_SuppressAutoHyphens;
    property WidowControl: Boolean read get_WidowControl write set_WidowControl;
    property AddSpaceBetweenFarEastAndAlpha: Boolean read get_AddSpaceBetweenFarEastAndAlpha write set_AddSpaceBetweenFarEastAndAlpha;
    property AddSpaceBetweenFarEastAndDigit: Boolean read get_AddSpaceBetweenFarEastAndDigit write set_AddSpaceBetweenFarEastAndDigit;
    property FarEastLineBreakControl: Boolean read get_FarEastLineBreakControl write set_FarEastLineBreakControl;
    property WordWrap: Boolean read get_WordWrap write set_WordWrap;
    property HangingPunctuation: Boolean read get_HangingPunctuation write set_HangingPunctuation;
    property Bidi: Boolean read get_Bidi write set_Bidi;
    property LeftIndent: Double read get_LeftIndent write set_LeftIndent;
    property CharacterUnitLeftIndent: Double read get_CharacterUnitLeftIndent write set_CharacterUnitLeftIndent;
    property RightIndent: Double read get_RightIndent write set_RightIndent;
    property CharacterUnitRightIndent: Double read get_CharacterUnitRightIndent write set_CharacterUnitRightIndent;
    property FirstLineIndent: Double read get_FirstLineIndent write set_FirstLineIndent;
    property CharacterUnitFirstLineIndent: Double read get_CharacterUnitFirstLineIndent write set_CharacterUnitFirstLineIndent;
    property SpaceBeforeAuto: Boolean read get_SpaceBeforeAuto write set_SpaceBeforeAuto;
    property SpaceAfterAuto: Boolean read get_SpaceAfterAuto write set_SpaceAfterAuto;
    property SpaceBefore: Double read get_SpaceBefore write set_SpaceBefore;
    property LineUnitBefore: Double read get_LineUnitBefore write set_LineUnitBefore;
    property SpaceAfter: Double read get_SpaceAfter write set_SpaceAfter;
    property LineUnitAfter: Double read get_LineUnitAfter write set_LineUnitAfter;
    property LineSpacingRule: DNLineSpacingRule read get_LineSpacingRule write set_LineSpacingRule;
    property LineSpacing: Double read get_LineSpacing write set_LineSpacing;
    property IsHeading: Boolean read get_IsHeading;
    property IsListItem: Boolean read get_IsListItem;
    property OutlineLevel: DNOutlineLevel read get_OutlineLevel write set_OutlineLevel;
    property LinesToDrop: Int32 read get_LinesToDrop write set_LinesToDrop;
    property DropCapPosition: DNDropCapPosition read get_DropCapPosition write set_DropCapPosition;
    property Shading: DNShading read get_Shading;
    property Borders: DNBorderCollection read get_Borders;
    property Style: DNStyle read get_Style write set_Style;
    property StyleName: string read get_StyleName write set_StyleName;
    property StyleIdentifier: DNStyleIdentifier read get_StyleIdentifier write set_StyleIdentifier;
    property SnapToGrid: Boolean read get_SnapToGrid write set_SnapToGrid;
    property TabStops: DNTabStopCollection read get_TabStops;
  end;

  TDNParagraphFormat = class(TDNGenericImport<DNParagraphFormatClass, DNParagraphFormat>) end;

  //-------------namespace: Aspose.Words----------------
  DNPlainTextDocumentClass = interface(DDN.mscorlib.DNObjectClass)
  ['{FD0A7F9C-F78B-55F5-81DA-6E13F761FA9B}']
  { constructors } 

    {class} function init(fileName: string): DNPlainTextDocument; overload;
    {class} function init(fileName: string; loadOptions: DNLoadOptions): DNPlainTextDocument; overload;
    {class} function init(stream: DDN.mscorlib.DNStream): DNPlainTextDocument; overload;
    {class} function init(stream: DDN.mscorlib.DNStream; loadOptions: DNLoadOptions): DNPlainTextDocument; overload;

  end;

  [DNTypeName('Aspose.Words.PlainTextDocument')]
  DNPlainTextDocument = interface(DDN.mscorlib.DNObject)
  ['{41AE8608-8468-3A07-B403-B12FFE6B308B}']
  { getters & setters } 

    function get_Text: string;
    function get_BuiltInDocumentProperties: DNBuiltInDocumentProperties;
    function get_CustomDocumentProperties: DNCustomDocumentProperties;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Text: string read get_Text;
    property BuiltInDocumentProperties: DNBuiltInDocumentProperties read get_BuiltInDocumentProperties;
    property CustomDocumentProperties: DNCustomDocumentProperties read get_CustomDocumentProperties;
  end;

  TDNPlainTextDocument = class(TDNGenericImport<DNPlainTextDocumentClass, DNPlainTextDocument>) end;

  //-------------namespace: Aspose.Words.Properties----------------
  DNDocumentPropertyClass = interface(DDN.mscorlib.DNObjectClass)
  ['{3C31B3ED-E1E9-5203-8D43-A8EB8AF488AD}']
  end;

  [DNTypeName('Aspose.Words.Properties.DocumentProperty')]
  DNDocumentProperty = interface(DDN.mscorlib.DNObject)
  ['{7D74154F-9B3F-3DE9-A078-A2454E547770}']
  { getters & setters } 

    function get_Name: string;
    function get_Value: DDN.mscorlib.DNObject;
    procedure set_Value(value: DDN.mscorlib.DNObject);
    function get_Type: DNPropertyType;
    function get_LinkSource: string;
    function get_IsLinkToContent: Boolean;

  { methods } 

    function ToString: string;
    function ToInt: Int32;
    function ToDouble: Double;
    function ToDateTime: DDN.mscorlib.DNDateTime;
    function ToBool: Boolean;
    function ToByteArray: TArray<Byte>;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    property Name: string read get_Name;
    property Value: DDN.mscorlib.DNObject read get_Value write set_Value;
    property &Type: DNPropertyType read get_Type;
    property LinkSource: string read get_LinkSource;
    property IsLinkToContent: Boolean read get_IsLinkToContent;
  end;

  TDNDocumentProperty = class(TDNGenericImport<DNDocumentPropertyClass, DNDocumentProperty>) end;

  //-------------namespace: Aspose.Words.Properties----------------
  DNDocumentPropertyCollectionClass = interface(DNObjectClass)
  ['{A9117CA0-DE41-5688-A490-81BACA4013F2}']
  end;

  [DNTypeName('Aspose.Words.Properties.DocumentPropertyCollection')]
  DNDocumentPropertyCollection = interface(DDN.mscorlib.DNIEnumerable)
  ['{58DF0EB8-BA96-3107-8AEE-6C355508336E}']
  { getters & setters } 

    function get_Count: Int32;
    function get_Item(name: string): DNDocumentProperty; overload;
    function get_Item(index: Int32): DNDocumentProperty; overload;

  { methods } 

    function GetEnumerator: DDN.mscorlib.DNIEnumerator<DNDocumentProperty>;
    function &Contains(name: string): Boolean;
    function IndexOf(name: string): Int32;
    procedure Remove(name: string);
    procedure RemoveAt(index: Int32);
    procedure Clear;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Count: Int32 read get_Count;
    property Item[name: string]: DNDocumentProperty read get_Item; default;
    property Item[index: Int32]: DNDocumentProperty read get_Item; default;
  end;

  TDNDocumentPropertyCollection = class(TDNGenericImport<DNDocumentPropertyCollectionClass, DNDocumentPropertyCollection>) end;

  //-------------namespace: Aspose.Words.Properties----------------
  DNBuiltInDocumentPropertiesClass = interface(DNDocumentPropertyCollectionClass)
  ['{3EA92E44-67D4-5B82-BCA6-4D8E395B28C6}']
  end;

  [DNTypeName('Aspose.Words.Properties.BuiltInDocumentProperties')]
  DNBuiltInDocumentProperties = interface(DNDocumentPropertyCollection)
  ['{7BB98A40-A4D1-3459-BC42-EB8CF2F34613}']
  { getters & setters } 

    function get_Item(name: string): DNDocumentProperty; overload;
    function get_Author: string;
    procedure set_Author(value: string);
    function get_Bytes: Int32;
    procedure set_Bytes(value: Int32);
    function get_Characters: Int32;
    procedure set_Characters(value: Int32);
    function get_CharactersWithSpaces: Int32;
    procedure set_CharactersWithSpaces(value: Int32);
    function get_Comments: string;
    procedure set_Comments(value: string);
    function get_Category: string;
    procedure set_Category(value: string);
    function get_Company: string;
    procedure set_Company(value: string);
    function get_CreatedTime: DDN.mscorlib.DNDateTime;
    procedure set_CreatedTime(value: DDN.mscorlib.DNDateTime);
    function get_HyperlinkBase: string;
    procedure set_HyperlinkBase(value: string);
    function get_Keywords: string;
    procedure set_Keywords(value: string);
    function get_LastPrinted: DDN.mscorlib.DNDateTime;
    procedure set_LastPrinted(value: DDN.mscorlib.DNDateTime);
    function get_LastSavedBy: string;
    procedure set_LastSavedBy(value: string);
    function get_LastSavedTime: DDN.mscorlib.DNDateTime;
    procedure set_LastSavedTime(value: DDN.mscorlib.DNDateTime);
    function get_Lines: Int32;
    procedure set_Lines(value: Int32);
    function get_LinksUpToDate: Boolean;
    procedure set_LinksUpToDate(value: Boolean);
    function get_Manager: string;
    procedure set_Manager(value: string);
    function get_NameOfApplication: string;
    procedure set_NameOfApplication(value: string);
    function get_Pages: Int32;
    procedure set_Pages(value: Int32);
    function get_Paragraphs: Int32;
    procedure set_Paragraphs(value: Int32);
    function get_RevisionNumber: Int32;
    procedure set_RevisionNumber(value: Int32);
    function get_Security: DNDocumentSecurity;
    procedure set_Security(value: DNDocumentSecurity);
    function get_Subject: string;
    procedure set_Subject(value: string);
    function get_Template: string;
    procedure set_Template(value: string);
    function get_Thumbnail: TArray<Byte>;
    procedure set_Thumbnail(value: TArray<Byte>);
    function get_Title: string;
    procedure set_Title(value: string);
    function get_TotalEditingTime: Int32;
    procedure set_TotalEditingTime(value: Int32);
    function get_ContentType: string;
    procedure set_ContentType(value: string);
    function get_ContentStatus: string;
    procedure set_ContentStatus(value: string);
    function get_Version: Int32;
    procedure set_Version(value: Int32);
    function get_Words: Int32;
    procedure set_Words(value: Int32);
    function get_HeadingPairs: TArray<DDN.mscorlib.DNObject>;
    procedure set_HeadingPairs(value: TArray<DDN.mscorlib.DNObject>);
    function get_TitlesOfParts: TArray<string>;
    procedure set_TitlesOfParts(value: TArray<string>);
    function get_Count: Int32;
    function get_Item(index: Int32): DNDocumentProperty; overload;

  { methods } 

    function GetEnumerator: DDN.mscorlib.DNIEnumerator<DNDocumentProperty>;
    function &Contains(name: string): Boolean;
    function IndexOf(name: string): Int32;
    procedure Remove(name: string);
    procedure RemoveAt(index: Int32);
    procedure Clear;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Item[name: string]: DNDocumentProperty read get_Item; default;
    property Author: string read get_Author write set_Author;
    property Bytes: Int32 read get_Bytes write set_Bytes;
    property Characters: Int32 read get_Characters write set_Characters;
    property CharactersWithSpaces: Int32 read get_CharactersWithSpaces write set_CharactersWithSpaces;
    property Comments: string read get_Comments write set_Comments;
    property Category: string read get_Category write set_Category;
    property Company: string read get_Company write set_Company;
    property CreatedTime: DDN.mscorlib.DNDateTime read get_CreatedTime write set_CreatedTime;
    property HyperlinkBase: string read get_HyperlinkBase write set_HyperlinkBase;
    property Keywords: string read get_Keywords write set_Keywords;
    property LastPrinted: DDN.mscorlib.DNDateTime read get_LastPrinted write set_LastPrinted;
    property LastSavedBy: string read get_LastSavedBy write set_LastSavedBy;
    property LastSavedTime: DDN.mscorlib.DNDateTime read get_LastSavedTime write set_LastSavedTime;
    property Lines: Int32 read get_Lines write set_Lines;
    property LinksUpToDate: Boolean read get_LinksUpToDate write set_LinksUpToDate;
    property Manager: string read get_Manager write set_Manager;
    property NameOfApplication: string read get_NameOfApplication write set_NameOfApplication;
    property Pages: Int32 read get_Pages write set_Pages;
    property Paragraphs: Int32 read get_Paragraphs write set_Paragraphs;
    property RevisionNumber: Int32 read get_RevisionNumber write set_RevisionNumber;
    property Security: DNDocumentSecurity read get_Security write set_Security;
    property Subject: string read get_Subject write set_Subject;
    property Template: string read get_Template write set_Template;
    property Thumbnail: TArray<Byte> read get_Thumbnail write set_Thumbnail;
    property Title: string read get_Title write set_Title;
    property TotalEditingTime: Int32 read get_TotalEditingTime write set_TotalEditingTime;
    property ContentType: string read get_ContentType write set_ContentType;
    property ContentStatus: string read get_ContentStatus write set_ContentStatus;
    property Version: Int32 read get_Version write set_Version;
    property Words: Int32 read get_Words write set_Words;
    property HeadingPairs: TArray<DDN.mscorlib.DNObject> read get_HeadingPairs write set_HeadingPairs;
    property TitlesOfParts: TArray<string> read get_TitlesOfParts write set_TitlesOfParts;
    property Count: Int32 read get_Count;
    property Item[index: Int32]: DNDocumentProperty read get_Item; default;
  end;

  TDNBuiltInDocumentProperties = class(TDNGenericImport<DNBuiltInDocumentPropertiesClass, DNBuiltInDocumentProperties>) end;

  //-------------namespace: Aspose.Words.Properties----------------
  DNCustomDocumentPropertiesClass = interface(DNDocumentPropertyCollectionClass)
  ['{E7432482-4D86-52EB-A7DC-5AAD1367F2C7}']
  end;

  [DNTypeName('Aspose.Words.Properties.CustomDocumentProperties')]
  DNCustomDocumentProperties = interface(DNDocumentPropertyCollection)
  ['{4B149D04-7EEF-33A6-B2A3-964D8AFF12E1}']
  { getters & setters } 

    function get_Count: Int32;
    function get_Item(name: string): DNDocumentProperty; overload;
    function get_Item(index: Int32): DNDocumentProperty; overload;

  { methods } 

    function Add(name: string; value: string): DNDocumentProperty; overload;
    function Add(name: string; value: Int32): DNDocumentProperty; overload;
    function Add(name: string; value: DDN.mscorlib.DNDateTime): DNDocumentProperty; overload;
    function Add(name: string; value: Boolean): DNDocumentProperty; overload;
    function Add(name: string; value: Double): DNDocumentProperty; overload;
    function AddLinkToContent(name: string; linkSource: string): DNDocumentProperty;
    function GetEnumerator: DDN.mscorlib.DNIEnumerator<DNDocumentProperty>;
    function &Contains(name: string): Boolean;
    function IndexOf(name: string): Int32;
    procedure Remove(name: string);
    procedure RemoveAt(index: Int32);
    procedure Clear;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Count: Int32 read get_Count;
    property Item[name: string]: DNDocumentProperty read get_Item; default;
    property Item[index: Int32]: DNDocumentProperty read get_Item; default;
  end;

  TDNCustomDocumentProperties = class(TDNGenericImport<DNCustomDocumentPropertiesClass, DNCustomDocumentProperties>) end;

  //-------------namespace: Aspose.Words----------------
  DNRangeClass = interface(DDN.mscorlib.DNObjectClass)
  ['{2D500E05-8062-550B-9280-C3CFD05A596B}']
  end;

  [DNTypeName('Aspose.Words.Range')]
  DNRange = interface(DDN.mscorlib.DNObject)
  ['{A633B5D1-5131-3B26-A52E-0DB8E9E75A6B}']
  { getters & setters } 

    function get_Text: string;
    function get_FormFields: DNFormFieldCollection;
    function get_Bookmarks: DNBookmarkCollection;
    function get_Fields: DNFieldCollection;

  { methods } 

    procedure Delete;
    function Replace(pattern: string; replacement: string): Int32; overload;
    function Replace(pattern: DDN.System.DNRegex; replacement: string): Int32; overload;
    function Replace(pattern: string; replacement: string; options: DNFindReplaceOptions): Int32; overload;
    function Replace(pattern: DDN.System.DNRegex; replacement: string; options: DNFindReplaceOptions): Int32; overload;
    procedure UpdateFields;
    procedure UnlinkFields;
    procedure NormalizeFieldTypes;
    function ToDocument: DNDocument;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Text: string read get_Text;
    property FormFields: DNFormFieldCollection read get_FormFields;
    property Bookmarks: DNBookmarkCollection read get_Bookmarks;
    property Fields: DNFieldCollection read get_Fields;
  end;

  TDNRange = class(TDNGenericImport<DNRangeClass, DNRange>) end;

  //-------------namespace: Aspose.Words.Rendering----------------
  DNNodeRendererBaseClass = interface(DDN.mscorlib.DNObjectClass)
  ['{B53C2152-3E6E-5289-9CA4-69D61778B704}']
  end;

  [DNTypeName('Aspose.Words.Rendering.NodeRendererBase')]
  DNNodeRendererBase = interface(DDN.mscorlib.DNObject)
  ['{E5FE63A1-69BA-32E0-A5E6-FC2276937412}']
  { getters & setters } 

    function get_SizeInPoints: DDN.System.Drawing.DNSizeF;
    function get_BoundsInPoints: DDN.System.Drawing.DNRectangleF;
    function get_OpaqueBoundsInPoints: DDN.System.Drawing.DNRectangleF;

  { methods } 

    function GetSizeInPixels(scale: Single; dpi: Single): DDN.System.Drawing.DNSize; overload;
    function GetSizeInPixels(scale: Single; horizontalDpi: Single; verticalDpi: Single): DDN.System.Drawing.DNSize; overload;
    function GetBoundsInPixels(scale: Single; dpi: Single): DDN.System.Drawing.DNRectangle; overload;
    function GetBoundsInPixels(scale: Single; horizontalDpi: Single; verticalDpi: Single): DDN.System.Drawing.DNRectangle; overload;
    function GetOpaqueBoundsInPixels(scale: Single; dpi: Single): DDN.System.Drawing.DNRectangle; overload;
    function GetOpaqueBoundsInPixels(scale: Single; horizontalDpi: Single; verticalDpi: Single): DDN.System.Drawing.DNRectangle; overload;
    function RenderToScale(graphics: DDN.System.Drawing.DNGraphics; x: Single; y: Single; scale: Single): DDN.System.Drawing.DNSizeF;
    function RenderToSize(graphics: DDN.System.Drawing.DNGraphics; x: Single; y: Single; width: Single; height: Single): Single;
    procedure Save(fileName: string; saveOptions: DNImageSaveOptions); overload;
    procedure Save(stream: DDN.mscorlib.DNStream; saveOptions: DNImageSaveOptions); overload;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property SizeInPoints: DDN.System.Drawing.DNSizeF read get_SizeInPoints;
    property BoundsInPoints: DDN.System.Drawing.DNRectangleF read get_BoundsInPoints;
    property OpaqueBoundsInPoints: DDN.System.Drawing.DNRectangleF read get_OpaqueBoundsInPoints;
  end;

  TDNNodeRendererBase = class(TDNGenericImport<DNNodeRendererBaseClass, DNNodeRendererBase>) end;

  //-------------namespace: Aspose.Words.Rendering----------------
  DNOfficeMathRendererClass = interface(DNNodeRendererBaseClass)
  ['{F5063BC1-0A73-5956-88DE-9A1A8E865B7C}']
  { constructors } 

    {class} function init(math: DNOfficeMath): DNOfficeMathRenderer;

  end;

  [DNTypeName('Aspose.Words.Rendering.OfficeMathRenderer')]
  DNOfficeMathRenderer = interface(DNNodeRendererBase)
  ['{B8DAD271-98E1-3D10-956B-148ED8F65665}']
  { getters & setters } 

    function get_SizeInPoints: DDN.System.Drawing.DNSizeF;
    function get_BoundsInPoints: DDN.System.Drawing.DNRectangleF;
    function get_OpaqueBoundsInPoints: DDN.System.Drawing.DNRectangleF;

  { methods } 

    function GetSizeInPixels(scale: Single; dpi: Single): DDN.System.Drawing.DNSize; overload;
    function GetSizeInPixels(scale: Single; horizontalDpi: Single; verticalDpi: Single): DDN.System.Drawing.DNSize; overload;
    function GetBoundsInPixels(scale: Single; dpi: Single): DDN.System.Drawing.DNRectangle; overload;
    function GetBoundsInPixels(scale: Single; horizontalDpi: Single; verticalDpi: Single): DDN.System.Drawing.DNRectangle; overload;
    function GetOpaqueBoundsInPixels(scale: Single; dpi: Single): DDN.System.Drawing.DNRectangle; overload;
    function GetOpaqueBoundsInPixels(scale: Single; horizontalDpi: Single; verticalDpi: Single): DDN.System.Drawing.DNRectangle; overload;
    function RenderToScale(graphics: DDN.System.Drawing.DNGraphics; x: Single; y: Single; scale: Single): DDN.System.Drawing.DNSizeF;
    function RenderToSize(graphics: DDN.System.Drawing.DNGraphics; x: Single; y: Single; width: Single; height: Single): Single;
    procedure Save(fileName: string; saveOptions: DNImageSaveOptions); overload;
    procedure Save(stream: DDN.mscorlib.DNStream; saveOptions: DNImageSaveOptions); overload;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property SizeInPoints: DDN.System.Drawing.DNSizeF read get_SizeInPoints;
    property BoundsInPoints: DDN.System.Drawing.DNRectangleF read get_BoundsInPoints;
    property OpaqueBoundsInPoints: DDN.System.Drawing.DNRectangleF read get_OpaqueBoundsInPoints;
  end;

  TDNOfficeMathRenderer = class(TDNGenericImport<DNOfficeMathRendererClass, DNOfficeMathRenderer>) end;

  //-------------namespace: Aspose.Words.Rendering----------------
  DNShapeRendererClass = interface(DNNodeRendererBaseClass)
  ['{ED28174D-5107-5771-B474-82DBB3C703B3}']
  { constructors } 

    {class} function init(shape: DNShapeBase): DNShapeRenderer;

  end;

  [DNTypeName('Aspose.Words.Rendering.ShapeRenderer')]
  DNShapeRenderer = interface(DNNodeRendererBase)
  ['{5F064B2E-6D8B-39D4-8DFE-9D955410F1F0}']
  { getters & setters } 

    function get_SizeInPoints: DDN.System.Drawing.DNSizeF;
    function get_BoundsInPoints: DDN.System.Drawing.DNRectangleF;
    function get_OpaqueBoundsInPoints: DDN.System.Drawing.DNRectangleF;

  { methods } 

    function GetSizeInPixels(scale: Single; dpi: Single): DDN.System.Drawing.DNSize; overload;
    function GetSizeInPixels(scale: Single; horizontalDpi: Single; verticalDpi: Single): DDN.System.Drawing.DNSize; overload;
    function GetBoundsInPixels(scale: Single; dpi: Single): DDN.System.Drawing.DNRectangle; overload;
    function GetBoundsInPixels(scale: Single; horizontalDpi: Single; verticalDpi: Single): DDN.System.Drawing.DNRectangle; overload;
    function GetOpaqueBoundsInPixels(scale: Single; dpi: Single): DDN.System.Drawing.DNRectangle; overload;
    function GetOpaqueBoundsInPixels(scale: Single; horizontalDpi: Single; verticalDpi: Single): DDN.System.Drawing.DNRectangle; overload;
    function RenderToScale(graphics: DDN.System.Drawing.DNGraphics; x: Single; y: Single; scale: Single): DDN.System.Drawing.DNSizeF;
    function RenderToSize(graphics: DDN.System.Drawing.DNGraphics; x: Single; y: Single; width: Single; height: Single): Single;
    procedure Save(fileName: string; saveOptions: DNImageSaveOptions); overload;
    procedure Save(stream: DDN.mscorlib.DNStream; saveOptions: DNImageSaveOptions); overload;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property SizeInPoints: DDN.System.Drawing.DNSizeF read get_SizeInPoints;
    property BoundsInPoints: DDN.System.Drawing.DNRectangleF read get_BoundsInPoints;
    property OpaqueBoundsInPoints: DDN.System.Drawing.DNRectangleF read get_OpaqueBoundsInPoints;
  end;

  TDNShapeRenderer = class(TDNGenericImport<DNShapeRendererClass, DNShapeRenderer>) end;

  //-------------namespace: Aspose.Words.Rendering----------------
  DNPageInfoClass = interface(DDN.mscorlib.DNObjectClass)
  ['{E612F5E3-AE21-581E-8D30-00036B587576}']
  end;

  [DNTypeName('Aspose.Words.Rendering.PageInfo')]
  DNPageInfo = interface(DDN.mscorlib.DNObject)
  ['{DBD5BE33-319C-326A-9E6B-7ACACEDB9260}']
  { getters & setters } 

    function get_PaperSize: DNPaperSize;
    function get_WidthInPoints: Single;
    function get_HeightInPoints: Single;
    function get_SizeInPoints: DDN.System.Drawing.DNSizeF;
    function get_PaperTray: Int32;
    function get_Landscape: Boolean;

  { methods } 

    function GetSizeInPixels(scale: Single; dpi: Single): DDN.System.Drawing.DNSize; overload;
    function GetSizeInPixels(scale: Single; horizontalDpi: Single; verticalDpi: Single): DDN.System.Drawing.DNSize; overload;
    function GetDotNetPaperSize(paperSizes: DDN.System.Drawing.DNPrinterSettings_PaperSizeCollection): DDN.System.Drawing.DNPaperSize;
    function GetSpecifiedPrinterPaperSource(paperSources: DDN.System.Drawing.DNPrinterSettings_PaperSourceCollection; defaultPageSettingsPaperSource: DDN.System.Drawing.DNPaperSource): DDN.System.Drawing.DNPaperSource;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property PaperSize: DNPaperSize read get_PaperSize;
    property WidthInPoints: Single read get_WidthInPoints;
    property HeightInPoints: Single read get_HeightInPoints;
    property SizeInPoints: DDN.System.Drawing.DNSizeF read get_SizeInPoints;
    property PaperTray: Int32 read get_PaperTray;
    property Landscape: Boolean read get_Landscape;
  end;

  TDNPageInfo = class(TDNGenericImport<DNPageInfoClass, DNPageInfo>) end;

  //-------------namespace: Aspose.Words.Rendering----------------
  DNPrinterSettingsContainerClass = interface(DDN.mscorlib.DNObjectClass)
  ['{66553913-2712-5E9B-A087-A3B1EB6DF105}']
  { constructors } 

    {class} function init(settings: DDN.System.Drawing.DNPrinterSettings): DNPrinterSettingsContainer;

  end;

  [DNTypeName('Aspose.Words.Rendering.PrinterSettingsContainer')]
  DNPrinterSettingsContainer = interface(DDN.mscorlib.DNObject)
  ['{9A3B4282-636C-3734-9BBF-01077702961D}']
  { getters & setters } 

    function get_PaperSizes: DDN.System.Drawing.DNPrinterSettings_PaperSizeCollection;
    function get_DefaultPageSettingsPaperSource: DDN.System.Drawing.DNPaperSource;
    function get_PaperSources: DDN.System.Drawing.DNPrinterSettings_PaperSourceCollection;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property PaperSizes: DDN.System.Drawing.DNPrinterSettings_PaperSizeCollection read get_PaperSizes;
    property DefaultPageSettingsPaperSource: DDN.System.Drawing.DNPaperSource read get_DefaultPageSettingsPaperSource;
    property PaperSources: DDN.System.Drawing.DNPrinterSettings_PaperSourceCollection read get_PaperSources;
  end;

  TDNPrinterSettingsContainer = class(TDNGenericImport<DNPrinterSettingsContainerClass, DNPrinterSettingsContainer>) end;

  //-------------namespace: Aspose.Words.Rendering----------------
  DNThumbnailGeneratingOptionsClass = interface(DDN.mscorlib.DNObjectClass)
  ['{AA8CAB08-E7EE-58BB-B43C-37FBA20623E8}']
  { constructors } 

    {class} function init: DNThumbnailGeneratingOptions;

  end;

  [DNTypeName('Aspose.Words.Rendering.ThumbnailGeneratingOptions')]
  DNThumbnailGeneratingOptions = interface(DDN.mscorlib.DNObject)
  ['{7710F27B-3BB9-38D9-BFC1-155455F8934E}']
  { getters & setters } 

    function get_GenerateFromFirstPage: Boolean;
    procedure set_GenerateFromFirstPage(value: Boolean);
    function get_ThumbnailSize: DDN.System.Drawing.DNSize;
    procedure set_ThumbnailSize(value: DDN.System.Drawing.DNSize);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property GenerateFromFirstPage: Boolean read get_GenerateFromFirstPage write set_GenerateFromFirstPage;
    property ThumbnailSize: DDN.System.Drawing.DNSize read get_ThumbnailSize write set_ThumbnailSize;
  end;

  TDNThumbnailGeneratingOptions = class(TDNGenericImport<DNThumbnailGeneratingOptionsClass, DNThumbnailGeneratingOptions>) end;

  //-------------namespace: Aspose.Words.Replacing----------------
  DNFindReplaceOptionsClass = interface(DDN.mscorlib.DNObjectClass)
  ['{4BF66460-E974-538D-875C-B039687EB4F8}']
  { constructors } 

    {class} function init: DNFindReplaceOptions; overload;
    {class} function init(direction: DNFindReplaceDirection): DNFindReplaceOptions; overload;
    {class} function init(replacingCallback: DNIReplacingCallback): DNFindReplaceOptions; overload;
    {class} function init(direction: DNFindReplaceDirection; replacingCallback: DNIReplacingCallback): DNFindReplaceOptions; overload;

  end;

  [DNTypeName('Aspose.Words.Replacing.FindReplaceOptions')]
  DNFindReplaceOptions = interface(DDN.mscorlib.DNObject)
  ['{44FCE32E-EEAE-3F5C-9588-1804F3FCA31A}']
  { getters & setters } 

    function get_ApplyFont: DNFont;
    function get_ApplyParagraphFormat: DNParagraphFormat;
    function get_Direction: DNFindReplaceDirection;
    procedure set_Direction(value: DNFindReplaceDirection);
    function get_MatchCase: Boolean;
    procedure set_MatchCase(value: Boolean);
    function get_FindWholeWordsOnly: Boolean;
    procedure set_FindWholeWordsOnly(value: Boolean);
    function get_ReplacingCallback: DNIReplacingCallback;
    procedure set_ReplacingCallback(value: DNIReplacingCallback);
    function get_UseLegacyOrder: Boolean;
    procedure set_UseLegacyOrder(value: Boolean);
    function get_IgnoreDeleted: Boolean;
    procedure set_IgnoreDeleted(value: Boolean);
    function get_IgnoreInserted: Boolean;
    procedure set_IgnoreInserted(value: Boolean);
    function get_IgnoreFields: Boolean;
    procedure set_IgnoreFields(value: Boolean);
    function get_UseSubstitutions: Boolean;
    procedure set_UseSubstitutions(value: Boolean);
    function get_LegacyMode: Boolean;
    procedure set_LegacyMode(value: Boolean);
    function get_SmartParagraphBreakReplacement: Boolean;
    procedure set_SmartParagraphBreakReplacement(value: Boolean);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property ApplyFont: DNFont read get_ApplyFont;
    property ApplyParagraphFormat: DNParagraphFormat read get_ApplyParagraphFormat;
    property Direction: DNFindReplaceDirection read get_Direction write set_Direction;
    property MatchCase: Boolean read get_MatchCase write set_MatchCase;
    property FindWholeWordsOnly: Boolean read get_FindWholeWordsOnly write set_FindWholeWordsOnly;
    property ReplacingCallback: DNIReplacingCallback read get_ReplacingCallback write set_ReplacingCallback;
    property UseLegacyOrder: Boolean read get_UseLegacyOrder write set_UseLegacyOrder;
    property IgnoreDeleted: Boolean read get_IgnoreDeleted write set_IgnoreDeleted;
    property IgnoreInserted: Boolean read get_IgnoreInserted write set_IgnoreInserted;
    property IgnoreFields: Boolean read get_IgnoreFields write set_IgnoreFields;
    property UseSubstitutions: Boolean read get_UseSubstitutions write set_UseSubstitutions;
    property LegacyMode: Boolean read get_LegacyMode write set_LegacyMode;
    property SmartParagraphBreakReplacement: Boolean read get_SmartParagraphBreakReplacement write set_SmartParagraphBreakReplacement;
  end;

  TDNFindReplaceOptions = class(TDNGenericImport<DNFindReplaceOptionsClass, DNFindReplaceOptions>) end;

  //-------------namespace: Aspose.Words.Replacing----------------
  DNReplacingArgsClass = interface(DDN.mscorlib.DNObjectClass)
  ['{042294B3-D622-5F4B-A95D-89B75FAA6CE1}']
  end;

  [DNTypeName('Aspose.Words.Replacing.ReplacingArgs')]
  DNReplacingArgs = interface(DDN.mscorlib.DNObject)
  ['{CDB4CE2F-24BC-3A9D-9228-6A1C90CA70F4}']
  { getters & setters } 

    function get_Match: DDN.System.DNMatch;
    function get_MatchNode: DNNode;
    function get_MatchOffset: Int32;
    function get_Replacement: string;
    procedure set_Replacement(value: string);
    function get_GroupName: string;
    procedure set_GroupName(value: string);
    function get_GroupIndex: Int32;
    procedure set_GroupIndex(value: Int32);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Match: DDN.System.DNMatch read get_Match;
    property MatchNode: DNNode read get_MatchNode;
    property MatchOffset: Int32 read get_MatchOffset;
    property Replacement: string read get_Replacement write set_Replacement;
    property GroupName: string read get_GroupName write set_GroupName;
    property GroupIndex: Int32 read get_GroupIndex write set_GroupIndex;
  end;

  TDNReplacingArgs = class(TDNGenericImport<DNReplacingArgsClass, DNReplacingArgs>) end;

  //-------------namespace: Aspose.Words.Reporting----------------
  DNCsvDataLoadOptionsClass = interface(DDN.mscorlib.DNObjectClass)
  ['{D7250289-D8F7-5CAC-BB42-63601093BC4E}']
  { constructors } 

    {class} function init: DNCsvDataLoadOptions; overload;
    {class} function init(hasHeaders: Boolean): DNCsvDataLoadOptions; overload;

  end;

  [DNTypeName('Aspose.Words.Reporting.CsvDataLoadOptions')]
  DNCsvDataLoadOptions = interface(DDN.mscorlib.DNObject)
  ['{A0BFEBC2-C684-3F8C-BD51-B74783F13327}']
  { getters & setters } 

    function get_HasHeaders: Boolean;
    procedure set_HasHeaders(value: Boolean);
    function get_Delimiter: Char;
    procedure set_Delimiter(value: Char);
    function get_QuoteChar: Char;
    procedure set_QuoteChar(value: Char);
    function get_CommentChar: Char;
    procedure set_CommentChar(value: Char);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property HasHeaders: Boolean read get_HasHeaders write set_HasHeaders;
    property Delimiter: Char read get_Delimiter write set_Delimiter;
    property QuoteChar: Char read get_QuoteChar write set_QuoteChar;
    property CommentChar: Char read get_CommentChar write set_CommentChar;
  end;

  TDNCsvDataLoadOptions = class(TDNGenericImport<DNCsvDataLoadOptionsClass, DNCsvDataLoadOptions>) end;

  //-------------namespace: Aspose.Words.Reporting----------------
  DNCsvDataSourceClass = interface(DDN.mscorlib.DNObjectClass)
  ['{0F4040FF-551A-55DA-9AC6-6B57563AC0FF}']
  { constructors } 

    {class} function init(csvPath: string): DNCsvDataSource; overload;
    {class} function init(csvPath: string; options: DNCsvDataLoadOptions): DNCsvDataSource; overload;
    {class} function init(csvStream: DDN.mscorlib.DNStream): DNCsvDataSource; overload;
    {class} function init(csvStream: DDN.mscorlib.DNStream; options: DNCsvDataLoadOptions): DNCsvDataSource; overload;

  end;

  [DNTypeName('Aspose.Words.Reporting.CsvDataSource')]
  DNCsvDataSource = interface(DDN.mscorlib.DNObject)
  ['{26921917-93A0-3D60-A892-4F61D4D023BC}']
  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNCsvDataSource = class(TDNGenericImport<DNCsvDataSourceClass, DNCsvDataSource>) end;

  //-------------namespace: Aspose.Words.Reporting----------------
  DNJsonDataLoadOptionsClass = interface(DDN.mscorlib.DNObjectClass)
  ['{9E168B7D-6D90-5561-A6AB-3A42F4146D7E}']
  { constructors } 

    {class} function init: DNJsonDataLoadOptions;

  end;

  [DNTypeName('Aspose.Words.Reporting.JsonDataLoadOptions')]
  DNJsonDataLoadOptions = interface(DDN.mscorlib.DNObject)
  ['{D24DB930-451B-3E3F-8DD5-3EDFAE2B0EAC}']
  { getters & setters } 

    function get_SimpleValueParseMode: DNJsonSimpleValueParseMode;
    procedure set_SimpleValueParseMode(value: DNJsonSimpleValueParseMode);
    function get_ExactDateTimeParseFormat: string;
    procedure set_ExactDateTimeParseFormat(value: string);
    function get_AlwaysGenerateRootObject: Boolean;
    procedure set_AlwaysGenerateRootObject(value: Boolean);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property SimpleValueParseMode: DNJsonSimpleValueParseMode read get_SimpleValueParseMode write set_SimpleValueParseMode;
    property ExactDateTimeParseFormat: string read get_ExactDateTimeParseFormat write set_ExactDateTimeParseFormat;
    property AlwaysGenerateRootObject: Boolean read get_AlwaysGenerateRootObject write set_AlwaysGenerateRootObject;
  end;

  TDNJsonDataLoadOptions = class(TDNGenericImport<DNJsonDataLoadOptionsClass, DNJsonDataLoadOptions>) end;

  //-------------namespace: Aspose.Words.Reporting----------------
  DNJsonDataSourceClass = interface(DDN.mscorlib.DNObjectClass)
  ['{AD568618-CB27-5419-B5B4-29A4F0053570}']
  { constructors } 

    {class} function init(jsonPath: string): DNJsonDataSource; overload;
    {class} function init(jsonStream: DDN.mscorlib.DNStream): DNJsonDataSource; overload;
    {class} function init(jsonPath: string; options: DNJsonDataLoadOptions): DNJsonDataSource; overload;
    {class} function init(jsonStream: DDN.mscorlib.DNStream; options: DNJsonDataLoadOptions): DNJsonDataSource; overload;

  end;

  [DNTypeName('Aspose.Words.Reporting.JsonDataSource')]
  DNJsonDataSource = interface(DDN.mscorlib.DNObject)
  ['{6B12A8F3-92D2-3DE0-99C6-29DB8F8F204B}']
  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNJsonDataSource = class(TDNGenericImport<DNJsonDataSourceClass, DNJsonDataSource>) end;

  //-------------namespace: Aspose.Words.Reporting----------------
  DNKnownTypeSetClass = interface(DNObjectClass)
  ['{124E4DF2-AF88-5049-A660-3568E2CA70B0}']
  end;

  [DNTypeName('Aspose.Words.Reporting.KnownTypeSet')]
  DNKnownTypeSet = interface(DDN.mscorlib.DNIEnumerable)
  ['{F772DA9A-B33A-3673-977E-7A1A40F8CCE3}']
  { getters & setters } 

    function get_Count: Int32;

  { methods } 

    procedure Add(&type: DDN.mscorlib.DNType);
    procedure Remove(&type: DDN.mscorlib.DNType);
    procedure Clear;
    function GetEnumerator: DDN.mscorlib.DNIEnumerator<DDN.mscorlib.DNType>;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Count: Int32 read get_Count;
  end;

  TDNKnownTypeSet = class(TDNGenericImport<DNKnownTypeSetClass, DNKnownTypeSet>) end;

  //-------------namespace: Aspose.Words.Reporting----------------
  DNReportingEngineClass = interface(DDN.mscorlib.DNObjectClass)
  ['{4C4B5C72-84EB-5894-B9C9-63FCB0DC6D4F}']
  { static getter & setter } 

    {class} function get_UseReflectionOptimization: Boolean;
    {class} procedure set_UseReflectionOptimization(value: Boolean);

  { constructors } 

    {class} function init: DNReportingEngine;

  { static propertys } 

    {class} property UseReflectionOptimization: Boolean read get_UseReflectionOptimization write set_UseReflectionOptimization;
  end;

  [DNTypeName('Aspose.Words.Reporting.ReportingEngine')]
  DNReportingEngine = interface(DDN.mscorlib.DNObject)
  ['{D710A255-DE82-3B62-8E3F-65501AD7555A}']
  { getters & setters } 

    function get_Options: DNReportBuildOptions;
    procedure set_Options(value: DNReportBuildOptions);
    function get_KnownTypes: DNKnownTypeSet;

  { methods } 

    function BuildReport(document: DNDocument; dataSource: DDN.mscorlib.DNObject): Boolean; overload;
    function BuildReport(document: DNDocument; dataSource: DDN.mscorlib.DNObject; dataSourceName: string): Boolean; overload;
    function BuildReport(document: DNDocument; dataSources: TArray<DDN.mscorlib.DNObject>; dataSourceNames: TArray<string>): Boolean; overload;
    function GetHashCode: Int32;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Options: DNReportBuildOptions read get_Options write set_Options;
    property KnownTypes: DNKnownTypeSet read get_KnownTypes;
  end;

  TDNReportingEngine = class(TDNGenericImport<DNReportingEngineClass, DNReportingEngine>) end;

  //-------------namespace: Aspose.Words.Reporting----------------
  DNXmlDataLoadOptionsClass = interface(DDN.mscorlib.DNObjectClass)
  ['{9D320A09-B0ED-56DF-A703-20FB5A745887}']
  { constructors } 

    {class} function init: DNXmlDataLoadOptions;

  end;

  [DNTypeName('Aspose.Words.Reporting.XmlDataLoadOptions')]
  DNXmlDataLoadOptions = interface(DDN.mscorlib.DNObject)
  ['{A7C0B862-FC41-317D-8D13-FD3A3957D66C}']
  { getters & setters } 

    function get_AlwaysGenerateRootObject: Boolean;
    procedure set_AlwaysGenerateRootObject(value: Boolean);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property AlwaysGenerateRootObject: Boolean read get_AlwaysGenerateRootObject write set_AlwaysGenerateRootObject;
  end;

  TDNXmlDataLoadOptions = class(TDNGenericImport<DNXmlDataLoadOptionsClass, DNXmlDataLoadOptions>) end;

  //-------------namespace: Aspose.Words.Reporting----------------
  DNXmlDataSourceClass = interface(DDN.mscorlib.DNObjectClass)
  ['{7C499077-6B0C-5D31-8809-9C24C266036E}']
  { constructors } 

    {class} function init(xmlPath: string): DNXmlDataSource; overload;
    {class} function init(xmlStream: DDN.mscorlib.DNStream): DNXmlDataSource; overload;
    {class} function init(xmlPath: string; xmlSchemaPath: string): DNXmlDataSource; overload;
    {class} function init(xmlStream: DDN.mscorlib.DNStream; xmlSchemaStream: DDN.mscorlib.DNStream): DNXmlDataSource; overload;
    {class} function init(xmlPath: string; options: DNXmlDataLoadOptions): DNXmlDataSource; overload;
    {class} function init(xmlStream: DDN.mscorlib.DNStream; options: DNXmlDataLoadOptions): DNXmlDataSource; overload;
    {class} function init(xmlPath: string; xmlSchemaPath: string; options: DNXmlDataLoadOptions): DNXmlDataSource; overload;
    {class} function init(xmlStream: DDN.mscorlib.DNStream; xmlSchemaStream: DDN.mscorlib.DNStream; options: DNXmlDataLoadOptions): DNXmlDataSource; overload;

  end;

  [DNTypeName('Aspose.Words.Reporting.XmlDataSource')]
  DNXmlDataSource = interface(DDN.mscorlib.DNObject)
  ['{EB29C297-A884-3884-BF8E-397A1445F3B8}']
  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNXmlDataSource = class(TDNGenericImport<DNXmlDataSourceClass, DNXmlDataSource>) end;

  //-------------namespace: Aspose.Words----------------
  DNRevisionClass = interface(DDN.mscorlib.DNObjectClass)
  ['{0563EF5B-1A3F-550F-9640-21AB684B6B13}']
  end;

  [DNTypeName('Aspose.Words.Revision')]
  DNRevision = interface(DDN.mscorlib.DNObject)
  ['{CF34EF66-1D88-3E66-A8F8-A6CF59D6E382}']
  { getters & setters } 

    function get_Author: string;
    procedure set_Author(value: string);
    function get_DateTime: DDN.mscorlib.DNDateTime;
    procedure set_DateTime(value: DDN.mscorlib.DNDateTime);
    function get_RevisionType: DNRevisionType;
    function get_ParentNode: DNNode;
    function get_ParentStyle: DNStyle;
    function get_Group: DNRevisionGroup;

  { methods } 

    procedure Accept;
    procedure Reject;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Author: string read get_Author write set_Author;
    property DateTime: DDN.mscorlib.DNDateTime read get_DateTime write set_DateTime;
    property RevisionType: DNRevisionType read get_RevisionType;
    property ParentNode: DNNode read get_ParentNode;
    property ParentStyle: DNStyle read get_ParentStyle;
    property Group: DNRevisionGroup read get_Group;
  end;

  TDNRevision = class(TDNGenericImport<DNRevisionClass, DNRevision>) end;

  //-------------namespace: Aspose.Words----------------
  DNRevisionCollectionClass = interface(DNObjectClass)
  ['{C34DEF14-8578-5017-986D-CA21A2C9ABAF}']
  end;

  [DNTypeName('Aspose.Words.RevisionCollection')]
  DNRevisionCollection = interface(DDN.mscorlib.DNIEnumerable)
  ['{A4D9FA64-5727-3DD7-ACAF-C161EFD02870}']
  { getters & setters } 

    function get_Count: Int32;
    function get_Item(index: Int32): DNRevision;
    function get_Groups: DNRevisionGroupCollection;

  { methods } 

    procedure AcceptAll;
    procedure RejectAll;
    function GetEnumerator: DDN.mscorlib.DNIEnumerator<DNRevision>;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Count: Int32 read get_Count;
    property Item[index: Int32]: DNRevision read get_Item; default;
    property Groups: DNRevisionGroupCollection read get_Groups;
  end;

  TDNRevisionCollection = class(TDNGenericImport<DNRevisionCollectionClass, DNRevisionCollection>) end;

  //-------------namespace: Aspose.Words----------------
  DNRevisionGroupClass = interface(DDN.mscorlib.DNObjectClass)
  ['{4167FA46-A49B-5682-87D1-921A491FDCA4}']
  end;

  [DNTypeName('Aspose.Words.RevisionGroup')]
  DNRevisionGroup = interface(DDN.mscorlib.DNObject)
  ['{8E1ED317-A87E-3308-915C-1DFEFF3DCD8F}']
  { getters & setters } 

    function get_Text: string;
    function get_Author: string;
    function get_RevisionType: DNRevisionType;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Text: string read get_Text;
    property Author: string read get_Author;
    property RevisionType: DNRevisionType read get_RevisionType;
  end;

  TDNRevisionGroup = class(TDNGenericImport<DNRevisionGroupClass, DNRevisionGroup>) end;

  //-------------namespace: Aspose.Words----------------
  DNRevisionGroupCollectionClass = interface(DNObjectClass)
  ['{6F886536-A828-57C2-B4AD-A7B674A8861A}']
  end;

  [DNTypeName('Aspose.Words.RevisionGroupCollection')]
  DNRevisionGroupCollection = interface(DDN.mscorlib.DNIEnumerable)
  ['{9DC25D55-E1BF-3AAC-8B7D-E29554315D23}']
  { getters & setters } 

    function get_Item(index: Int32): DNRevisionGroup;
    function get_Count: Int32;

  { methods } 

    function GetEnumerator: DDN.mscorlib.DNIEnumerator<DNRevisionGroup>;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Item[index: Int32]: DNRevisionGroup read get_Item; default;
    property Count: Int32 read get_Count;
  end;

  TDNRevisionGroupCollection = class(TDNGenericImport<DNRevisionGroupCollectionClass, DNRevisionGroupCollection>) end;

  //-------------namespace: Aspose.Words.Saving----------------
  DNBookmarksOutlineLevelCollectionClass = interface(DNObjectClass)
  ['{807C00C9-7283-557B-88FA-7D2D7346B7D4}']
  { constructors } 

    {class} function init: DNBookmarksOutlineLevelCollection;

  end;

  [DNTypeName('Aspose.Words.Saving.BookmarksOutlineLevelCollection')]
  DNBookmarksOutlineLevelCollection = interface(DDN.mscorlib.DNIEnumerable)
  ['{593F4037-1A76-3FC7-85B7-472F72815356}']
  { getters & setters } 

    function get_Count: Int32;
    function get_Item(name: string): Int32; overload;
    procedure set_Item(name: string; value: Int32); overload;
    function get_Item(index: Int32): Int32; overload;
    procedure set_Item(index: Int32; value: Int32); overload;

  { methods } 

    procedure Add(name: string; outlineLevel: Int32);
    function &Contains(name: string): Boolean;
    function IndexOfKey(name: string): Int32;
    procedure Remove(name: string);
    procedure RemoveAt(index: Int32);
    procedure Clear;
    function GetEnumerator: DDN.mscorlib.DNIEnumerator<DDN.mscorlib.DNKeyValuePair<string, Int32>>;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Count: Int32 read get_Count;
    property Item[name: string]: Int32 read get_Item write set_Item; default;
    property Item[index: Int32]: Int32 read get_Item write set_Item; default;
  end;

  TDNBookmarksOutlineLevelCollection = class(TDNGenericImport<DNBookmarksOutlineLevelCollectionClass, DNBookmarksOutlineLevelCollection>) end;

  //-------------namespace: Aspose.Words.Saving----------------
  DNCssSavingArgsClass = interface(DDN.mscorlib.DNObjectClass)
  ['{295A768B-68E3-5CD3-B0A6-389F7F4C7053}']
  end;

  [DNTypeName('Aspose.Words.Saving.CssSavingArgs')]
  DNCssSavingArgs = interface(DDN.mscorlib.DNObject)
  ['{32E5AB82-E4C7-38DE-B09B-07A8362E2CB8}']
  { getters & setters } 

    function get_Document: DNDocument;
    function get_KeepCssStreamOpen: Boolean;
    procedure set_KeepCssStreamOpen(value: Boolean);
    function get_CssStream: DDN.mscorlib.DNStream;
    procedure set_CssStream(value: DDN.mscorlib.DNStream);
    function get_IsExportNeeded: Boolean;
    procedure set_IsExportNeeded(value: Boolean);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Document: DNDocument read get_Document;
    property KeepCssStreamOpen: Boolean read get_KeepCssStreamOpen write set_KeepCssStreamOpen;
    property CssStream: DDN.mscorlib.DNStream read get_CssStream write set_CssStream;
    property IsExportNeeded: Boolean read get_IsExportNeeded write set_IsExportNeeded;
  end;

  TDNCssSavingArgs = class(TDNGenericImport<DNCssSavingArgsClass, DNCssSavingArgs>) end;

  //-------------namespace: Aspose.Words.Saving----------------
  DNDocumentPartSavingArgsClass = interface(DDN.mscorlib.DNObjectClass)
  ['{7E804940-CBB9-54A6-B856-177470153B4B}']
  end;

  [DNTypeName('Aspose.Words.Saving.DocumentPartSavingArgs')]
  DNDocumentPartSavingArgs = interface(DDN.mscorlib.DNObject)
  ['{7ACC42DE-A6E9-3515-AB9A-6A68FD1923A2}']
  { getters & setters } 

    function get_Document: DNDocument;
    function get_DocumentPartFileName: string;
    procedure set_DocumentPartFileName(value: string);
    function get_KeepDocumentPartStreamOpen: Boolean;
    procedure set_KeepDocumentPartStreamOpen(value: Boolean);
    function get_DocumentPartStream: DDN.mscorlib.DNStream;
    procedure set_DocumentPartStream(value: DDN.mscorlib.DNStream);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Document: DNDocument read get_Document;
    property DocumentPartFileName: string read get_DocumentPartFileName write set_DocumentPartFileName;
    property KeepDocumentPartStreamOpen: Boolean read get_KeepDocumentPartStreamOpen write set_KeepDocumentPartStreamOpen;
    property DocumentPartStream: DDN.mscorlib.DNStream read get_DocumentPartStream write set_DocumentPartStream;
  end;

  TDNDocumentPartSavingArgs = class(TDNGenericImport<DNDocumentPartSavingArgsClass, DNDocumentPartSavingArgs>) end;

  //-------------namespace: Aspose.Words.Saving----------------
  DNDownsampleOptionsClass = interface(DDN.mscorlib.DNObjectClass)
  ['{0E24C941-3FC0-54C8-AB6D-ACC7B5A31D10}']
  { constructors } 

    {class} function init: DNDownsampleOptions;

  end;

  [DNTypeName('Aspose.Words.Saving.DownsampleOptions')]
  DNDownsampleOptions = interface(DDN.mscorlib.DNObject)
  ['{0D4A52ED-9EF7-3DB0-A9B2-E53150BFAAC7}']
  { getters & setters } 

    function get_DownsampleImages: Boolean;
    procedure set_DownsampleImages(value: Boolean);
    function get_Resolution: Int32;
    procedure set_Resolution(value: Int32);
    function get_ResolutionThreshold: Int32;
    procedure set_ResolutionThreshold(value: Int32);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property DownsampleImages: Boolean read get_DownsampleImages write set_DownsampleImages;
    property Resolution: Int32 read get_Resolution write set_Resolution;
    property ResolutionThreshold: Int32 read get_ResolutionThreshold write set_ResolutionThreshold;
  end;

  TDNDownsampleOptions = class(TDNGenericImport<DNDownsampleOptionsClass, DNDownsampleOptions>) end;

  //-------------namespace: Aspose.Words.Saving----------------
  DNFontSavingArgsClass = interface(DDN.mscorlib.DNObjectClass)
  ['{3B99152D-C138-5E59-8870-9431784DED06}']
  end;

  [DNTypeName('Aspose.Words.Saving.FontSavingArgs')]
  DNFontSavingArgs = interface(DDN.mscorlib.DNObject)
  ['{50055EFF-FBE1-306C-A87A-C7B5E3FCB895}']
  { getters & setters } 

    function get_Document: DNDocument;
    function get_FontFamilyName: string;
    function get_Bold: Boolean;
    function get_Italic: Boolean;
    function get_OriginalFileName: string;
    function get_OriginalFileSize: Int32;
    function get_IsExportNeeded: Boolean;
    procedure set_IsExportNeeded(value: Boolean);
    function get_IsSubsettingNeeded: Boolean;
    procedure set_IsSubsettingNeeded(value: Boolean);
    function get_FontFileName: string;
    procedure set_FontFileName(value: string);
    function get_KeepFontStreamOpen: Boolean;
    procedure set_KeepFontStreamOpen(value: Boolean);
    function get_FontStream: DDN.mscorlib.DNStream;
    procedure set_FontStream(value: DDN.mscorlib.DNStream);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Document: DNDocument read get_Document;
    property FontFamilyName: string read get_FontFamilyName;
    property Bold: Boolean read get_Bold;
    property Italic: Boolean read get_Italic;
    property OriginalFileName: string read get_OriginalFileName;
    property OriginalFileSize: Int32 read get_OriginalFileSize;
    property IsExportNeeded: Boolean read get_IsExportNeeded write set_IsExportNeeded;
    property IsSubsettingNeeded: Boolean read get_IsSubsettingNeeded write set_IsSubsettingNeeded;
    property FontFileName: string read get_FontFileName write set_FontFileName;
    property KeepFontStreamOpen: Boolean read get_KeepFontStreamOpen write set_KeepFontStreamOpen;
    property FontStream: DDN.mscorlib.DNStream read get_FontStream write set_FontStream;
  end;

  TDNFontSavingArgs = class(TDNGenericImport<DNFontSavingArgsClass, DNFontSavingArgs>) end;

  //-------------namespace: Aspose.Words.Saving----------------
  DNGraphicsQualityOptionsClass = interface(DDN.mscorlib.DNObjectClass)
  ['{F292A8D1-6801-5413-AE0F-8848CDDC2685}']
  { constructors } 

    {class} function init: DNGraphicsQualityOptions;

  end;

  [DNTypeName('Aspose.Words.Saving.GraphicsQualityOptions')]
  DNGraphicsQualityOptions = interface(DDN.mscorlib.DNObject)
  ['{A6E09747-D439-33D0-8A61-B3505CF04C10}']
  { getters & setters } 

    function get_StringFormat: DDN.System.Drawing.DNStringFormat;
    procedure set_StringFormat(value: DDN.System.Drawing.DNStringFormat);
    function get_CompositingMode: DDN.mscorlib.DNNullable<DDN.System.Drawing.DNCompositingMode>;
    procedure set_CompositingMode(value: DDN.mscorlib.DNNullable<DDN.System.Drawing.DNCompositingMode>);
    function get_CompositingQuality: DDN.mscorlib.DNNullable<DDN.System.Drawing.DNCompositingQuality>;
    procedure set_CompositingQuality(value: DDN.mscorlib.DNNullable<DDN.System.Drawing.DNCompositingQuality>);
    function get_InterpolationMode: DDN.mscorlib.DNNullable<DDN.System.Drawing.DNInterpolationMode>;
    procedure set_InterpolationMode(value: DDN.mscorlib.DNNullable<DDN.System.Drawing.DNInterpolationMode>);
    function get_SmoothingMode: DDN.mscorlib.DNNullable<DDN.System.Drawing.DNSmoothingMode>;
    procedure set_SmoothingMode(value: DDN.mscorlib.DNNullable<DDN.System.Drawing.DNSmoothingMode>);
    function get_TextRenderingHint: DDN.mscorlib.DNNullable<DDN.System.Drawing.DNTextRenderingHint>;
    procedure set_TextRenderingHint(value: DDN.mscorlib.DNNullable<DDN.System.Drawing.DNTextRenderingHint>);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property StringFormat: DDN.System.Drawing.DNStringFormat read get_StringFormat write set_StringFormat;
    property CompositingMode: DDN.mscorlib.DNNullable<DDN.System.Drawing.DNCompositingMode> read get_CompositingMode write set_CompositingMode;
    property CompositingQuality: DDN.mscorlib.DNNullable<DDN.System.Drawing.DNCompositingQuality> read get_CompositingQuality write set_CompositingQuality;
    property InterpolationMode: DDN.mscorlib.DNNullable<DDN.System.Drawing.DNInterpolationMode> read get_InterpolationMode write set_InterpolationMode;
    property SmoothingMode: DDN.mscorlib.DNNullable<DDN.System.Drawing.DNSmoothingMode> read get_SmoothingMode write set_SmoothingMode;
    property TextRenderingHint: DDN.mscorlib.DNNullable<DDN.System.Drawing.DNTextRenderingHint> read get_TextRenderingHint write set_TextRenderingHint;
  end;

  TDNGraphicsQualityOptions = class(TDNGenericImport<DNGraphicsQualityOptionsClass, DNGraphicsQualityOptions>) end;

  //-------------namespace: Aspose.Words.Saving----------------
  DNImageSavingArgsClass = interface(DDN.mscorlib.DNObjectClass)
  ['{73329822-7C3B-5501-BAE0-E455282B154B}']
  end;

  [DNTypeName('Aspose.Words.Saving.ImageSavingArgs')]
  DNImageSavingArgs = interface(DDN.mscorlib.DNObject)
  ['{64F48B81-AA59-36DB-A9BB-90A48C4D8FB4}']
  { getters & setters } 

    function get_Document: DNDocument;
    function get_CurrentShape: DNShapeBase;
    function get_IsImageAvailable: Boolean;
    function get_ImageFileName: string;
    procedure set_ImageFileName(value: string);
    function get_KeepImageStreamOpen: Boolean;
    procedure set_KeepImageStreamOpen(value: Boolean);
    function get_ImageStream: DDN.mscorlib.DNStream;
    procedure set_ImageStream(value: DDN.mscorlib.DNStream);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Document: DNDocument read get_Document;
    property CurrentShape: DNShapeBase read get_CurrentShape;
    property IsImageAvailable: Boolean read get_IsImageAvailable;
    property ImageFileName: string read get_ImageFileName write set_ImageFileName;
    property KeepImageStreamOpen: Boolean read get_KeepImageStreamOpen write set_KeepImageStreamOpen;
    property ImageStream: DDN.mscorlib.DNStream read get_ImageStream write set_ImageStream;
  end;

  TDNImageSavingArgs = class(TDNGenericImport<DNImageSavingArgsClass, DNImageSavingArgs>) end;

  //-------------namespace: Aspose.Words.Saving----------------
  DNMetafileRenderingOptionsClass = interface(DDN.mscorlib.DNObjectClass)
  ['{033CE463-404A-5E19-A309-1B4C0B550717}']
  { constructors } 

    {class} function init: DNMetafileRenderingOptions;

  end;

  [DNTypeName('Aspose.Words.Saving.MetafileRenderingOptions')]
  DNMetafileRenderingOptions = interface(DDN.mscorlib.DNObject)
  ['{DB3AA226-7A88-324E-A21D-DCF1B31F53A0}']
  { getters & setters } 

    function get_RenderingMode: DNMetafileRenderingMode;
    procedure set_RenderingMode(value: DNMetafileRenderingMode);
    function get_EmfPlusDualRenderingMode: DNEmfPlusDualRenderingMode;
    procedure set_EmfPlusDualRenderingMode(value: DNEmfPlusDualRenderingMode);
    function get_UseEmfEmbeddedToWmf: Boolean;
    procedure set_UseEmfEmbeddedToWmf(value: Boolean);
    function get_EmulateRasterOperations: Boolean;
    procedure set_EmulateRasterOperations(value: Boolean);
    function get_ScaleWmfFontsToMetafileSize: Boolean;
    procedure set_ScaleWmfFontsToMetafileSize(value: Boolean);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property RenderingMode: DNMetafileRenderingMode read get_RenderingMode write set_RenderingMode;
    property EmfPlusDualRenderingMode: DNEmfPlusDualRenderingMode read get_EmfPlusDualRenderingMode write set_EmfPlusDualRenderingMode;
    property UseEmfEmbeddedToWmf: Boolean read get_UseEmfEmbeddedToWmf write set_UseEmfEmbeddedToWmf;
    property EmulateRasterOperations: Boolean read get_EmulateRasterOperations write set_EmulateRasterOperations;
    property ScaleWmfFontsToMetafileSize: Boolean read get_ScaleWmfFontsToMetafileSize write set_ScaleWmfFontsToMetafileSize;
  end;

  TDNMetafileRenderingOptions = class(TDNGenericImport<DNMetafileRenderingOptionsClass, DNMetafileRenderingOptions>) end;

  //-------------namespace: Aspose.Words.Saving----------------
  DNOutlineOptionsClass = interface(DDN.mscorlib.DNObjectClass)
  ['{542711C2-EC51-5DBE-90ED-B22271A58FE8}']
  { constructors } 

    {class} function init: DNOutlineOptions;

  end;

  [DNTypeName('Aspose.Words.Saving.OutlineOptions')]
  DNOutlineOptions = interface(DDN.mscorlib.DNObject)
  ['{5D959010-3800-3CE5-B229-D546EA36267B}']
  { getters & setters } 

    function get_CreateMissingOutlineLevels: Boolean;
    procedure set_CreateMissingOutlineLevels(value: Boolean);
    function get_HeadingsOutlineLevels: Int32;
    procedure set_HeadingsOutlineLevels(value: Int32);
    function get_ExpandedOutlineLevels: Int32;
    procedure set_ExpandedOutlineLevels(value: Int32);
    function get_DefaultBookmarksOutlineLevel: Int32;
    procedure set_DefaultBookmarksOutlineLevel(value: Int32);
    function get_BookmarksOutlineLevels: DNBookmarksOutlineLevelCollection;
    function get_CreateOutlinesForHeadingsInTables: Boolean;
    procedure set_CreateOutlinesForHeadingsInTables(value: Boolean);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property CreateMissingOutlineLevels: Boolean read get_CreateMissingOutlineLevels write set_CreateMissingOutlineLevels;
    property HeadingsOutlineLevels: Int32 read get_HeadingsOutlineLevels write set_HeadingsOutlineLevels;
    property ExpandedOutlineLevels: Int32 read get_ExpandedOutlineLevels write set_ExpandedOutlineLevels;
    property DefaultBookmarksOutlineLevel: Int32 read get_DefaultBookmarksOutlineLevel write set_DefaultBookmarksOutlineLevel;
    property BookmarksOutlineLevels: DNBookmarksOutlineLevelCollection read get_BookmarksOutlineLevels;
    property CreateOutlinesForHeadingsInTables: Boolean read get_CreateOutlinesForHeadingsInTables write set_CreateOutlinesForHeadingsInTables;
  end;

  TDNOutlineOptions = class(TDNGenericImport<DNOutlineOptionsClass, DNOutlineOptions>) end;

  //-------------namespace: Aspose.Words.Saving----------------
  DNPageRangeClass = interface(DDN.mscorlib.DNObjectClass)
  ['{855D43F2-FEE8-57FA-B89C-07499E320F10}']
  { constructors } 

    {class} function init(from: Int32; &to: Int32): DNPageRange;

  end;

  [DNTypeName('Aspose.Words.Saving.PageRange')]
  DNPageRange = interface(DDN.mscorlib.DNObject)
  ['{E8CBA7A9-E809-34CF-B185-06B09FC6213D}']
  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNPageRange = class(TDNGenericImport<DNPageRangeClass, DNPageRange>) end;

  //-------------namespace: Aspose.Words.Saving----------------
  DNPageSavingArgsClass = interface(DDN.mscorlib.DNObjectClass)
  ['{B5DA3B76-1E51-567B-B396-B594342A1A15}']
  { constructors } 

    {class} function init: DNPageSavingArgs;

  end;

  [DNTypeName('Aspose.Words.Saving.PageSavingArgs')]
  DNPageSavingArgs = interface(DDN.mscorlib.DNObject)
  ['{F7749EBE-C935-37AE-89B7-D49B8C67AD9E}']
  { getters & setters } 

    function get_PageStream: DDN.mscorlib.DNStream;
    procedure set_PageStream(value: DDN.mscorlib.DNStream);
    function get_KeepPageStreamOpen: Boolean;
    procedure set_KeepPageStreamOpen(value: Boolean);
    function get_PageFileName: string;
    procedure set_PageFileName(value: string);
    function get_PageIndex: Int32;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property PageStream: DDN.mscorlib.DNStream read get_PageStream write set_PageStream;
    property KeepPageStreamOpen: Boolean read get_KeepPageStreamOpen write set_KeepPageStreamOpen;
    property PageFileName: string read get_PageFileName write set_PageFileName;
    property PageIndex: Int32 read get_PageIndex;
  end;

  TDNPageSavingArgs = class(TDNGenericImport<DNPageSavingArgsClass, DNPageSavingArgs>) end;

  //-------------namespace: Aspose.Words.Saving----------------
  DNPageSetClass = interface(DDN.mscorlib.DNObjectClass)
  ['{A74FF888-D921-5D56-898C-F399203A4F9C}']
  { static getter & setter } 

    {class} function get_All: DNPageSet;
    {class} function get_Even: DNPageSet;
    {class} function get_Odd: DNPageSet;

  { constructors } 

    {class} function init(page: Int32): DNPageSet; overload;
    {class} function init(pages: TArray<Int32>): DNPageSet; overload;
    {class} function init(ranges: TArray<DNPageRange>): DNPageSet; overload;

  { static propertys } 

    {class} property All: DNPageSet read get_All;
    {class} property Even: DNPageSet read get_Even;
    {class} property Odd: DNPageSet read get_Odd;
  end;

  [DNTypeName('Aspose.Words.Saving.PageSet')]
  DNPageSet = interface(DDN.mscorlib.DNObject)
  ['{D9B4133D-DE33-313C-BF6D-AE77DE88CD62}']
  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNPageSet = class(TDNGenericImport<DNPageSetClass, DNPageSet>) end;

  //-------------namespace: Aspose.Words.Saving----------------
  DNPdfDigitalSignatureDetailsClass = interface(DDN.mscorlib.DNObjectClass)
  ['{7603AF66-E63D-5BEF-B752-F5ECBAE3E4CC}']
  { constructors } 

    {class} function init: DNPdfDigitalSignatureDetails; overload;
    {class} function init(certificateHolder: DNCertificateHolder; reason: string; location: string; signatureDate: DDN.mscorlib.DNDateTime): DNPdfDigitalSignatureDetails; overload;

  end;

  [DNTypeName('Aspose.Words.Saving.PdfDigitalSignatureDetails')]
  DNPdfDigitalSignatureDetails = interface(DDN.mscorlib.DNObject)
  ['{AC310561-CF6F-3C83-ADB7-69077F2EAE11}']
  { getters & setters } 

    function get_CertificateHolder: DNCertificateHolder;
    procedure set_CertificateHolder(value: DNCertificateHolder);
    function get_Reason: string;
    procedure set_Reason(value: string);
    function get_Location: string;
    procedure set_Location(value: string);
    function get_SignatureDate: DDN.mscorlib.DNDateTime;
    procedure set_SignatureDate(value: DDN.mscorlib.DNDateTime);
    function get_HashAlgorithm: DNPdfDigitalSignatureHashAlgorithm;
    procedure set_HashAlgorithm(value: DNPdfDigitalSignatureHashAlgorithm);
    function get_TimestampSettings: DNPdfDigitalSignatureTimestampSettings;
    procedure set_TimestampSettings(value: DNPdfDigitalSignatureTimestampSettings);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property CertificateHolder: DNCertificateHolder read get_CertificateHolder write set_CertificateHolder;
    property Reason: string read get_Reason write set_Reason;
    property Location: string read get_Location write set_Location;
    property SignatureDate: DDN.mscorlib.DNDateTime read get_SignatureDate write set_SignatureDate;
    property HashAlgorithm: DNPdfDigitalSignatureHashAlgorithm read get_HashAlgorithm write set_HashAlgorithm;
    property TimestampSettings: DNPdfDigitalSignatureTimestampSettings read get_TimestampSettings write set_TimestampSettings;
  end;

  TDNPdfDigitalSignatureDetails = class(TDNGenericImport<DNPdfDigitalSignatureDetailsClass, DNPdfDigitalSignatureDetails>) end;

  //-------------namespace: Aspose.Words.Saving----------------
  DNPdfDigitalSignatureTimestampSettingsClass = interface(DDN.mscorlib.DNObjectClass)
  ['{4F2BDC11-C66E-587D-9933-0A144228E589}']
  { constructors } 

    {class} function init: DNPdfDigitalSignatureTimestampSettings; overload;
    {class} function init(serverUrl: string; userName: string; password: string): DNPdfDigitalSignatureTimestampSettings; overload;
    {class} function init(serverUrl: string; userName: string; password: string; timeout: DDN.mscorlib.DNTimeSpan): DNPdfDigitalSignatureTimestampSettings; overload;

  end;

  [DNTypeName('Aspose.Words.Saving.PdfDigitalSignatureTimestampSettings')]
  DNPdfDigitalSignatureTimestampSettings = interface(DDN.mscorlib.DNObject)
  ['{8820CC95-CA11-3497-A456-D13AB1A4A1C3}']
  { getters & setters } 

    function get_ServerUrl: string;
    procedure set_ServerUrl(value: string);
    function get_UserName: string;
    procedure set_UserName(value: string);
    function get_Password: string;
    procedure set_Password(value: string);
    function get_Timeout: DDN.mscorlib.DNTimeSpan;
    procedure set_Timeout(value: DDN.mscorlib.DNTimeSpan);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property ServerUrl: string read get_ServerUrl write set_ServerUrl;
    property UserName: string read get_UserName write set_UserName;
    property Password: string read get_Password write set_Password;
    property Timeout: DDN.mscorlib.DNTimeSpan read get_Timeout write set_Timeout;
  end;

  TDNPdfDigitalSignatureTimestampSettings = class(TDNGenericImport<DNPdfDigitalSignatureTimestampSettingsClass, DNPdfDigitalSignatureTimestampSettings>) end;

  //-------------namespace: Aspose.Words.Saving----------------
  DNPdfEncryptionDetailsClass = interface(DDN.mscorlib.DNObjectClass)
  ['{886D4E08-691F-58BC-9D7A-F243C874B62E}']
  { constructors } 

    {class} function init(userPassword: string; ownerPassword: string; encryptionAlgorithm: DNPdfEncryptionAlgorithm): DNPdfEncryptionDetails;

  end;

  [DNTypeName('Aspose.Words.Saving.PdfEncryptionDetails')]
  DNPdfEncryptionDetails = interface(DDN.mscorlib.DNObject)
  ['{D706733D-208B-3460-AB84-B08B0EA1E1E2}']
  { getters & setters } 

    function get_UserPassword: string;
    procedure set_UserPassword(value: string);
    function get_OwnerPassword: string;
    procedure set_OwnerPassword(value: string);
    function get_Permissions: DNPdfPermissions;
    procedure set_Permissions(value: DNPdfPermissions);
    function get_EncryptionAlgorithm: DNPdfEncryptionAlgorithm;
    procedure set_EncryptionAlgorithm(value: DNPdfEncryptionAlgorithm);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property UserPassword: string read get_UserPassword write set_UserPassword;
    property OwnerPassword: string read get_OwnerPassword write set_OwnerPassword;
    property Permissions: DNPdfPermissions read get_Permissions write set_Permissions;
    property EncryptionAlgorithm: DNPdfEncryptionAlgorithm read get_EncryptionAlgorithm write set_EncryptionAlgorithm;
  end;

  TDNPdfEncryptionDetails = class(TDNGenericImport<DNPdfEncryptionDetailsClass, DNPdfEncryptionDetails>) end;

  //-------------namespace: Aspose.Words.Saving----------------
  DNResourceSavingArgsClass = interface(DDN.mscorlib.DNObjectClass)
  ['{C57BF7C0-2E18-5E70-9C30-4F5B8070984E}']
  end;

  [DNTypeName('Aspose.Words.Saving.ResourceSavingArgs')]
  DNResourceSavingArgs = interface(DDN.mscorlib.DNObject)
  ['{79533972-54D5-3012-A0AE-86FA8C4B0CFF}']
  { getters & setters } 

    function get_Document: DNDocument;
    function get_ResourceFileName: string;
    procedure set_ResourceFileName(value: string);
    function get_ResourceFileUri: string;
    procedure set_ResourceFileUri(value: string);
    function get_KeepResourceStreamOpen: Boolean;
    procedure set_KeepResourceStreamOpen(value: Boolean);
    function get_ResourceStream: DDN.mscorlib.DNStream;
    procedure set_ResourceStream(value: DDN.mscorlib.DNStream);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Document: DNDocument read get_Document;
    property ResourceFileName: string read get_ResourceFileName write set_ResourceFileName;
    property ResourceFileUri: string read get_ResourceFileUri write set_ResourceFileUri;
    property KeepResourceStreamOpen: Boolean read get_KeepResourceStreamOpen write set_KeepResourceStreamOpen;
    property ResourceStream: DDN.mscorlib.DNStream read get_ResourceStream write set_ResourceStream;
  end;

  TDNResourceSavingArgs = class(TDNGenericImport<DNResourceSavingArgsClass, DNResourceSavingArgs>) end;

  //-------------namespace: Aspose.Words.Saving----------------
  DNSaveOptionsClass = interface(DDN.mscorlib.DNObjectClass)
  ['{9EDB797C-8D17-5FD1-9FE5-47888ABFEAF1}']
  { static methods } 

    {class} function CreateSaveOptions(saveFormat: DNSaveFormat): DNSaveOptions; overload;
    {class} function CreateSaveOptions(fileName: string): DNSaveOptions; overload;

  end;

  [DNTypeName('Aspose.Words.Saving.SaveOptions')]
  DNSaveOptions = interface(DDN.mscorlib.DNObject)
  ['{A75BF89C-3DC7-33BD-9139-2D359A348915}']
  { getters & setters } 

    function get_SaveFormat: DNSaveFormat;
    procedure set_SaveFormat(value: DNSaveFormat);
    function get_TempFolder: string;
    procedure set_TempFolder(value: string);
    function get_PrettyFormat: Boolean;
    procedure set_PrettyFormat(value: Boolean);
    function get_UseAntiAliasing: Boolean;
    procedure set_UseAntiAliasing(value: Boolean);
    function get_UseHighQualityRendering: Boolean;
    procedure set_UseHighQualityRendering(value: Boolean);
    function get_UpdateSdtContent: Boolean;
    procedure set_UpdateSdtContent(value: Boolean);
    function get_DmlRenderingMode: DNDmlRenderingMode;
    procedure set_DmlRenderingMode(value: DNDmlRenderingMode);
    function get_DmlEffectsRenderingMode: DNDmlEffectsRenderingMode;
    procedure set_DmlEffectsRenderingMode(value: DNDmlEffectsRenderingMode);
    function get_ImlRenderingMode: DNImlRenderingMode;
    procedure set_ImlRenderingMode(value: DNImlRenderingMode);
    function get_DefaultTemplate: string;
    procedure set_DefaultTemplate(value: string);
    function get_UpdateFields: Boolean;
    procedure set_UpdateFields(value: Boolean);
    function get_UpdateLastSavedTimeProperty: Boolean;
    procedure set_UpdateLastSavedTimeProperty(value: Boolean);
    function get_UpdateLastPrintedProperty: Boolean;
    procedure set_UpdateLastPrintedProperty(value: Boolean);
    function get_UpdateCreatedTimeProperty: Boolean;
    procedure set_UpdateCreatedTimeProperty(value: Boolean);
    function get_MemoryOptimization: Boolean;
    procedure set_MemoryOptimization(value: Boolean);
    function get_Dml3DEffectsRenderingMode: DNDml3DEffectsRenderingMode;
    procedure set_Dml3DEffectsRenderingMode(value: DNDml3DEffectsRenderingMode);
    function get_AllowEmbeddingPostScriptFonts: Boolean;
    procedure set_AllowEmbeddingPostScriptFonts(value: Boolean);
    function get_CustomTimeZoneInfo: DDN.mscorlib.DNTimeZoneInfo;
    procedure set_CustomTimeZoneInfo(value: DDN.mscorlib.DNTimeZoneInfo);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property SaveFormat: DNSaveFormat read get_SaveFormat write set_SaveFormat;
    property TempFolder: string read get_TempFolder write set_TempFolder;
    property PrettyFormat: Boolean read get_PrettyFormat write set_PrettyFormat;
    property UseAntiAliasing: Boolean read get_UseAntiAliasing write set_UseAntiAliasing;
    property UseHighQualityRendering: Boolean read get_UseHighQualityRendering write set_UseHighQualityRendering;
    property UpdateSdtContent: Boolean read get_UpdateSdtContent write set_UpdateSdtContent;
    property DmlRenderingMode: DNDmlRenderingMode read get_DmlRenderingMode write set_DmlRenderingMode;
    property DmlEffectsRenderingMode: DNDmlEffectsRenderingMode read get_DmlEffectsRenderingMode write set_DmlEffectsRenderingMode;
    property ImlRenderingMode: DNImlRenderingMode read get_ImlRenderingMode write set_ImlRenderingMode;
    property DefaultTemplate: string read get_DefaultTemplate write set_DefaultTemplate;
    property UpdateFields: Boolean read get_UpdateFields write set_UpdateFields;
    property UpdateLastSavedTimeProperty: Boolean read get_UpdateLastSavedTimeProperty write set_UpdateLastSavedTimeProperty;
    property UpdateLastPrintedProperty: Boolean read get_UpdateLastPrintedProperty write set_UpdateLastPrintedProperty;
    property UpdateCreatedTimeProperty: Boolean read get_UpdateCreatedTimeProperty write set_UpdateCreatedTimeProperty;
    property MemoryOptimization: Boolean read get_MemoryOptimization write set_MemoryOptimization;
    property Dml3DEffectsRenderingMode: DNDml3DEffectsRenderingMode read get_Dml3DEffectsRenderingMode write set_Dml3DEffectsRenderingMode;
    property AllowEmbeddingPostScriptFonts: Boolean read get_AllowEmbeddingPostScriptFonts write set_AllowEmbeddingPostScriptFonts;
    property CustomTimeZoneInfo: DDN.mscorlib.DNTimeZoneInfo read get_CustomTimeZoneInfo write set_CustomTimeZoneInfo;
  end;

  TDNSaveOptions = class(TDNGenericImport<DNSaveOptionsClass, DNSaveOptions>) end;

  //-------------namespace: Aspose.Words.Saving----------------
  DNDocSaveOptionsClass = interface(DNSaveOptionsClass)
  ['{9209A1F3-6BAE-5A0E-B1E7-E25C51217840}']
  { constructors } 

    {class} function init: DNDocSaveOptions; overload;
    {class} function init(saveFormat: DNSaveFormat): DNDocSaveOptions; overload;

  end;

  [DNTypeName('Aspose.Words.Saving.DocSaveOptions')]
  DNDocSaveOptions = interface(DNSaveOptions)
  ['{AAE8429B-1E49-376A-8FBB-4E2673E3F0C7}']
  { getters & setters } 

    function get_SaveFormat: DNSaveFormat;
    procedure set_SaveFormat(value: DNSaveFormat);
    function get_Password: string;
    procedure set_Password(value: string);
    function get_SaveRoutingSlip: Boolean;
    procedure set_SaveRoutingSlip(value: Boolean);
    function get_AlwaysCompressMetafiles: Boolean;
    procedure set_AlwaysCompressMetafiles(value: Boolean);
    function get_SavePictureBullet: Boolean;
    procedure set_SavePictureBullet(value: Boolean);
    function get_TempFolder: string;
    procedure set_TempFolder(value: string);
    function get_PrettyFormat: Boolean;
    procedure set_PrettyFormat(value: Boolean);
    function get_UseAntiAliasing: Boolean;
    procedure set_UseAntiAliasing(value: Boolean);
    function get_UseHighQualityRendering: Boolean;
    procedure set_UseHighQualityRendering(value: Boolean);
    function get_UpdateSdtContent: Boolean;
    procedure set_UpdateSdtContent(value: Boolean);
    function get_DmlRenderingMode: DNDmlRenderingMode;
    procedure set_DmlRenderingMode(value: DNDmlRenderingMode);
    function get_DmlEffectsRenderingMode: DNDmlEffectsRenderingMode;
    procedure set_DmlEffectsRenderingMode(value: DNDmlEffectsRenderingMode);
    function get_ImlRenderingMode: DNImlRenderingMode;
    procedure set_ImlRenderingMode(value: DNImlRenderingMode);
    function get_DefaultTemplate: string;
    procedure set_DefaultTemplate(value: string);
    function get_UpdateFields: Boolean;
    procedure set_UpdateFields(value: Boolean);
    function get_UpdateLastSavedTimeProperty: Boolean;
    procedure set_UpdateLastSavedTimeProperty(value: Boolean);
    function get_UpdateLastPrintedProperty: Boolean;
    procedure set_UpdateLastPrintedProperty(value: Boolean);
    function get_UpdateCreatedTimeProperty: Boolean;
    procedure set_UpdateCreatedTimeProperty(value: Boolean);
    function get_MemoryOptimization: Boolean;
    procedure set_MemoryOptimization(value: Boolean);
    function get_Dml3DEffectsRenderingMode: DNDml3DEffectsRenderingMode;
    procedure set_Dml3DEffectsRenderingMode(value: DNDml3DEffectsRenderingMode);
    function get_AllowEmbeddingPostScriptFonts: Boolean;
    procedure set_AllowEmbeddingPostScriptFonts(value: Boolean);
    function get_CustomTimeZoneInfo: DDN.mscorlib.DNTimeZoneInfo;
    procedure set_CustomTimeZoneInfo(value: DDN.mscorlib.DNTimeZoneInfo);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property SaveFormat: DNSaveFormat read get_SaveFormat write set_SaveFormat;
    property Password: string read get_Password write set_Password;
    property SaveRoutingSlip: Boolean read get_SaveRoutingSlip write set_SaveRoutingSlip;
    property AlwaysCompressMetafiles: Boolean read get_AlwaysCompressMetafiles write set_AlwaysCompressMetafiles;
    property SavePictureBullet: Boolean read get_SavePictureBullet write set_SavePictureBullet;
    property TempFolder: string read get_TempFolder write set_TempFolder;
    property PrettyFormat: Boolean read get_PrettyFormat write set_PrettyFormat;
    property UseAntiAliasing: Boolean read get_UseAntiAliasing write set_UseAntiAliasing;
    property UseHighQualityRendering: Boolean read get_UseHighQualityRendering write set_UseHighQualityRendering;
    property UpdateSdtContent: Boolean read get_UpdateSdtContent write set_UpdateSdtContent;
    property DmlRenderingMode: DNDmlRenderingMode read get_DmlRenderingMode write set_DmlRenderingMode;
    property DmlEffectsRenderingMode: DNDmlEffectsRenderingMode read get_DmlEffectsRenderingMode write set_DmlEffectsRenderingMode;
    property ImlRenderingMode: DNImlRenderingMode read get_ImlRenderingMode write set_ImlRenderingMode;
    property DefaultTemplate: string read get_DefaultTemplate write set_DefaultTemplate;
    property UpdateFields: Boolean read get_UpdateFields write set_UpdateFields;
    property UpdateLastSavedTimeProperty: Boolean read get_UpdateLastSavedTimeProperty write set_UpdateLastSavedTimeProperty;
    property UpdateLastPrintedProperty: Boolean read get_UpdateLastPrintedProperty write set_UpdateLastPrintedProperty;
    property UpdateCreatedTimeProperty: Boolean read get_UpdateCreatedTimeProperty write set_UpdateCreatedTimeProperty;
    property MemoryOptimization: Boolean read get_MemoryOptimization write set_MemoryOptimization;
    property Dml3DEffectsRenderingMode: DNDml3DEffectsRenderingMode read get_Dml3DEffectsRenderingMode write set_Dml3DEffectsRenderingMode;
    property AllowEmbeddingPostScriptFonts: Boolean read get_AllowEmbeddingPostScriptFonts write set_AllowEmbeddingPostScriptFonts;
    property CustomTimeZoneInfo: DDN.mscorlib.DNTimeZoneInfo read get_CustomTimeZoneInfo write set_CustomTimeZoneInfo;
  end;

  TDNDocSaveOptions = class(TDNGenericImport<DNDocSaveOptionsClass, DNDocSaveOptions>) end;

  //-------------namespace: Aspose.Words.Saving----------------
  DNFixedPageSaveOptionsClass = interface(DNSaveOptionsClass)
  ['{C9794E3A-527C-5360-AE58-31993EDB69E9}']
  end;

  [DNTypeName('Aspose.Words.Saving.FixedPageSaveOptions')]
  DNFixedPageSaveOptions = interface(DNSaveOptions)
  ['{BAD9E945-D097-3ED3-B2B6-5FF03F92280C}']
  { getters & setters } 

    function get_PageSet: DNPageSet;
    procedure set_PageSet(value: DNPageSet);
    function get_PageSavingCallback: DNIPageSavingCallback;
    procedure set_PageSavingCallback(value: DNIPageSavingCallback);
    function get_NumeralFormat: DNNumeralFormat;
    procedure set_NumeralFormat(value: DNNumeralFormat);
    function get_MetafileRenderingOptions: DNMetafileRenderingOptions;
    procedure set_MetafileRenderingOptions(value: DNMetafileRenderingOptions);
    function get_JpegQuality: Int32;
    procedure set_JpegQuality(value: Int32);
    function get_ColorMode: DNColorMode;
    procedure set_ColorMode(value: DNColorMode);
    function get_OptimizeOutput: Boolean;
    procedure set_OptimizeOutput(value: Boolean);
    function get_SaveFormat: DNSaveFormat;
    procedure set_SaveFormat(value: DNSaveFormat);
    function get_TempFolder: string;
    procedure set_TempFolder(value: string);
    function get_PrettyFormat: Boolean;
    procedure set_PrettyFormat(value: Boolean);
    function get_UseAntiAliasing: Boolean;
    procedure set_UseAntiAliasing(value: Boolean);
    function get_UseHighQualityRendering: Boolean;
    procedure set_UseHighQualityRendering(value: Boolean);
    function get_UpdateSdtContent: Boolean;
    procedure set_UpdateSdtContent(value: Boolean);
    function get_DmlRenderingMode: DNDmlRenderingMode;
    procedure set_DmlRenderingMode(value: DNDmlRenderingMode);
    function get_DmlEffectsRenderingMode: DNDmlEffectsRenderingMode;
    procedure set_DmlEffectsRenderingMode(value: DNDmlEffectsRenderingMode);
    function get_ImlRenderingMode: DNImlRenderingMode;
    procedure set_ImlRenderingMode(value: DNImlRenderingMode);
    function get_DefaultTemplate: string;
    procedure set_DefaultTemplate(value: string);
    function get_UpdateFields: Boolean;
    procedure set_UpdateFields(value: Boolean);
    function get_UpdateLastSavedTimeProperty: Boolean;
    procedure set_UpdateLastSavedTimeProperty(value: Boolean);
    function get_UpdateLastPrintedProperty: Boolean;
    procedure set_UpdateLastPrintedProperty(value: Boolean);
    function get_UpdateCreatedTimeProperty: Boolean;
    procedure set_UpdateCreatedTimeProperty(value: Boolean);
    function get_MemoryOptimization: Boolean;
    procedure set_MemoryOptimization(value: Boolean);
    function get_Dml3DEffectsRenderingMode: DNDml3DEffectsRenderingMode;
    procedure set_Dml3DEffectsRenderingMode(value: DNDml3DEffectsRenderingMode);
    function get_AllowEmbeddingPostScriptFonts: Boolean;
    procedure set_AllowEmbeddingPostScriptFonts(value: Boolean);
    function get_CustomTimeZoneInfo: DDN.mscorlib.DNTimeZoneInfo;
    procedure set_CustomTimeZoneInfo(value: DDN.mscorlib.DNTimeZoneInfo);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property PageSet: DNPageSet read get_PageSet write set_PageSet;
    property PageSavingCallback: DNIPageSavingCallback read get_PageSavingCallback write set_PageSavingCallback;
    property NumeralFormat: DNNumeralFormat read get_NumeralFormat write set_NumeralFormat;
    property MetafileRenderingOptions: DNMetafileRenderingOptions read get_MetafileRenderingOptions write set_MetafileRenderingOptions;
    property JpegQuality: Int32 read get_JpegQuality write set_JpegQuality;
    property ColorMode: DNColorMode read get_ColorMode write set_ColorMode;
    property OptimizeOutput: Boolean read get_OptimizeOutput write set_OptimizeOutput;
    property SaveFormat: DNSaveFormat read get_SaveFormat write set_SaveFormat;
    property TempFolder: string read get_TempFolder write set_TempFolder;
    property PrettyFormat: Boolean read get_PrettyFormat write set_PrettyFormat;
    property UseAntiAliasing: Boolean read get_UseAntiAliasing write set_UseAntiAliasing;
    property UseHighQualityRendering: Boolean read get_UseHighQualityRendering write set_UseHighQualityRendering;
    property UpdateSdtContent: Boolean read get_UpdateSdtContent write set_UpdateSdtContent;
    property DmlRenderingMode: DNDmlRenderingMode read get_DmlRenderingMode write set_DmlRenderingMode;
    property DmlEffectsRenderingMode: DNDmlEffectsRenderingMode read get_DmlEffectsRenderingMode write set_DmlEffectsRenderingMode;
    property ImlRenderingMode: DNImlRenderingMode read get_ImlRenderingMode write set_ImlRenderingMode;
    property DefaultTemplate: string read get_DefaultTemplate write set_DefaultTemplate;
    property UpdateFields: Boolean read get_UpdateFields write set_UpdateFields;
    property UpdateLastSavedTimeProperty: Boolean read get_UpdateLastSavedTimeProperty write set_UpdateLastSavedTimeProperty;
    property UpdateLastPrintedProperty: Boolean read get_UpdateLastPrintedProperty write set_UpdateLastPrintedProperty;
    property UpdateCreatedTimeProperty: Boolean read get_UpdateCreatedTimeProperty write set_UpdateCreatedTimeProperty;
    property MemoryOptimization: Boolean read get_MemoryOptimization write set_MemoryOptimization;
    property Dml3DEffectsRenderingMode: DNDml3DEffectsRenderingMode read get_Dml3DEffectsRenderingMode write set_Dml3DEffectsRenderingMode;
    property AllowEmbeddingPostScriptFonts: Boolean read get_AllowEmbeddingPostScriptFonts write set_AllowEmbeddingPostScriptFonts;
    property CustomTimeZoneInfo: DDN.mscorlib.DNTimeZoneInfo read get_CustomTimeZoneInfo write set_CustomTimeZoneInfo;
  end;

  TDNFixedPageSaveOptions = class(TDNGenericImport<DNFixedPageSaveOptionsClass, DNFixedPageSaveOptions>) end;

  //-------------namespace: Aspose.Words.Saving----------------
  DNHtmlFixedSaveOptionsClass = interface(DNFixedPageSaveOptionsClass)
  ['{5DB329F9-80D1-541A-BD2B-04A64E5EA1AB}']
  { constructors } 

    {class} function init: DNHtmlFixedSaveOptions;

  end;

  [DNTypeName('Aspose.Words.Saving.HtmlFixedSaveOptions')]
  DNHtmlFixedSaveOptions = interface(DNFixedPageSaveOptions)
  ['{C1F38AB0-CE84-3277-8738-1E14D6CDB301}']
  { getters & setters } 

    function get_SaveFormat: DNSaveFormat;
    procedure set_SaveFormat(value: DNSaveFormat);
    function get_ShowPageBorder: Boolean;
    procedure set_ShowPageBorder(value: Boolean);
    function get_PageHorizontalAlignment: DNHtmlFixedPageHorizontalAlignment;
    procedure set_PageHorizontalAlignment(value: DNHtmlFixedPageHorizontalAlignment);
    function get_PageMargins: Double;
    procedure set_PageMargins(value: Double);
    function get_ResourcesFolder: string;
    procedure set_ResourcesFolder(value: string);
    function get_ResourcesFolderAlias: string;
    procedure set_ResourcesFolderAlias(value: string);
    function get_ExportEmbeddedImages: Boolean;
    procedure set_ExportEmbeddedImages(value: Boolean);
    function get_ExportEmbeddedFonts: Boolean;
    procedure set_ExportEmbeddedFonts(value: Boolean);
    function get_ExportEmbeddedCss: Boolean;
    procedure set_ExportEmbeddedCss(value: Boolean);
    function get_ExportEmbeddedSvg: Boolean;
    procedure set_ExportEmbeddedSvg(value: Boolean);
    function get_FontFormat: DNExportFontFormat;
    procedure set_FontFormat(value: DNExportFontFormat);
    function get_CssClassNamesPrefix: string;
    procedure set_CssClassNamesPrefix(value: string);
    function get_ResourceSavingCallback: DNIResourceSavingCallback;
    procedure set_ResourceSavingCallback(value: DNIResourceSavingCallback);
    function get_Encoding: DDN.mscorlib.DNEncoding;
    procedure set_Encoding(value: DDN.mscorlib.DNEncoding);
    function get_ExportFormFields: Boolean;
    procedure set_ExportFormFields(value: Boolean);
    function get_OptimizeOutput: Boolean;
    procedure set_OptimizeOutput(value: Boolean);
    function get_UseTargetMachineFonts: Boolean;
    procedure set_UseTargetMachineFonts(value: Boolean);
    function get_SaveFontFaceCssSeparately: Boolean;
    procedure set_SaveFontFaceCssSeparately(value: Boolean);
    function get_PageSet: DNPageSet;
    procedure set_PageSet(value: DNPageSet);
    function get_PageSavingCallback: DNIPageSavingCallback;
    procedure set_PageSavingCallback(value: DNIPageSavingCallback);
    function get_NumeralFormat: DNNumeralFormat;
    procedure set_NumeralFormat(value: DNNumeralFormat);
    function get_MetafileRenderingOptions: DNMetafileRenderingOptions;
    procedure set_MetafileRenderingOptions(value: DNMetafileRenderingOptions);
    function get_JpegQuality: Int32;
    procedure set_JpegQuality(value: Int32);
    function get_ColorMode: DNColorMode;
    procedure set_ColorMode(value: DNColorMode);
    function get_TempFolder: string;
    procedure set_TempFolder(value: string);
    function get_PrettyFormat: Boolean;
    procedure set_PrettyFormat(value: Boolean);
    function get_UseAntiAliasing: Boolean;
    procedure set_UseAntiAliasing(value: Boolean);
    function get_UseHighQualityRendering: Boolean;
    procedure set_UseHighQualityRendering(value: Boolean);
    function get_UpdateSdtContent: Boolean;
    procedure set_UpdateSdtContent(value: Boolean);
    function get_DmlRenderingMode: DNDmlRenderingMode;
    procedure set_DmlRenderingMode(value: DNDmlRenderingMode);
    function get_DmlEffectsRenderingMode: DNDmlEffectsRenderingMode;
    procedure set_DmlEffectsRenderingMode(value: DNDmlEffectsRenderingMode);
    function get_ImlRenderingMode: DNImlRenderingMode;
    procedure set_ImlRenderingMode(value: DNImlRenderingMode);
    function get_DefaultTemplate: string;
    procedure set_DefaultTemplate(value: string);
    function get_UpdateFields: Boolean;
    procedure set_UpdateFields(value: Boolean);
    function get_UpdateLastSavedTimeProperty: Boolean;
    procedure set_UpdateLastSavedTimeProperty(value: Boolean);
    function get_UpdateLastPrintedProperty: Boolean;
    procedure set_UpdateLastPrintedProperty(value: Boolean);
    function get_UpdateCreatedTimeProperty: Boolean;
    procedure set_UpdateCreatedTimeProperty(value: Boolean);
    function get_MemoryOptimization: Boolean;
    procedure set_MemoryOptimization(value: Boolean);
    function get_Dml3DEffectsRenderingMode: DNDml3DEffectsRenderingMode;
    procedure set_Dml3DEffectsRenderingMode(value: DNDml3DEffectsRenderingMode);
    function get_AllowEmbeddingPostScriptFonts: Boolean;
    procedure set_AllowEmbeddingPostScriptFonts(value: Boolean);
    function get_CustomTimeZoneInfo: DDN.mscorlib.DNTimeZoneInfo;
    procedure set_CustomTimeZoneInfo(value: DDN.mscorlib.DNTimeZoneInfo);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property SaveFormat: DNSaveFormat read get_SaveFormat write set_SaveFormat;
    property ShowPageBorder: Boolean read get_ShowPageBorder write set_ShowPageBorder;
    property PageHorizontalAlignment: DNHtmlFixedPageHorizontalAlignment read get_PageHorizontalAlignment write set_PageHorizontalAlignment;
    property PageMargins: Double read get_PageMargins write set_PageMargins;
    property ResourcesFolder: string read get_ResourcesFolder write set_ResourcesFolder;
    property ResourcesFolderAlias: string read get_ResourcesFolderAlias write set_ResourcesFolderAlias;
    property ExportEmbeddedImages: Boolean read get_ExportEmbeddedImages write set_ExportEmbeddedImages;
    property ExportEmbeddedFonts: Boolean read get_ExportEmbeddedFonts write set_ExportEmbeddedFonts;
    property ExportEmbeddedCss: Boolean read get_ExportEmbeddedCss write set_ExportEmbeddedCss;
    property ExportEmbeddedSvg: Boolean read get_ExportEmbeddedSvg write set_ExportEmbeddedSvg;
    property FontFormat: DNExportFontFormat read get_FontFormat write set_FontFormat;
    property CssClassNamesPrefix: string read get_CssClassNamesPrefix write set_CssClassNamesPrefix;
    property ResourceSavingCallback: DNIResourceSavingCallback read get_ResourceSavingCallback write set_ResourceSavingCallback;
    property Encoding: DDN.mscorlib.DNEncoding read get_Encoding write set_Encoding;
    property ExportFormFields: Boolean read get_ExportFormFields write set_ExportFormFields;
    property OptimizeOutput: Boolean read get_OptimizeOutput write set_OptimizeOutput;
    property UseTargetMachineFonts: Boolean read get_UseTargetMachineFonts write set_UseTargetMachineFonts;
    property SaveFontFaceCssSeparately: Boolean read get_SaveFontFaceCssSeparately write set_SaveFontFaceCssSeparately;
    property PageSet: DNPageSet read get_PageSet write set_PageSet;
    property PageSavingCallback: DNIPageSavingCallback read get_PageSavingCallback write set_PageSavingCallback;
    property NumeralFormat: DNNumeralFormat read get_NumeralFormat write set_NumeralFormat;
    property MetafileRenderingOptions: DNMetafileRenderingOptions read get_MetafileRenderingOptions write set_MetafileRenderingOptions;
    property JpegQuality: Int32 read get_JpegQuality write set_JpegQuality;
    property ColorMode: DNColorMode read get_ColorMode write set_ColorMode;
    property TempFolder: string read get_TempFolder write set_TempFolder;
    property PrettyFormat: Boolean read get_PrettyFormat write set_PrettyFormat;
    property UseAntiAliasing: Boolean read get_UseAntiAliasing write set_UseAntiAliasing;
    property UseHighQualityRendering: Boolean read get_UseHighQualityRendering write set_UseHighQualityRendering;
    property UpdateSdtContent: Boolean read get_UpdateSdtContent write set_UpdateSdtContent;
    property DmlRenderingMode: DNDmlRenderingMode read get_DmlRenderingMode write set_DmlRenderingMode;
    property DmlEffectsRenderingMode: DNDmlEffectsRenderingMode read get_DmlEffectsRenderingMode write set_DmlEffectsRenderingMode;
    property ImlRenderingMode: DNImlRenderingMode read get_ImlRenderingMode write set_ImlRenderingMode;
    property DefaultTemplate: string read get_DefaultTemplate write set_DefaultTemplate;
    property UpdateFields: Boolean read get_UpdateFields write set_UpdateFields;
    property UpdateLastSavedTimeProperty: Boolean read get_UpdateLastSavedTimeProperty write set_UpdateLastSavedTimeProperty;
    property UpdateLastPrintedProperty: Boolean read get_UpdateLastPrintedProperty write set_UpdateLastPrintedProperty;
    property UpdateCreatedTimeProperty: Boolean read get_UpdateCreatedTimeProperty write set_UpdateCreatedTimeProperty;
    property MemoryOptimization: Boolean read get_MemoryOptimization write set_MemoryOptimization;
    property Dml3DEffectsRenderingMode: DNDml3DEffectsRenderingMode read get_Dml3DEffectsRenderingMode write set_Dml3DEffectsRenderingMode;
    property AllowEmbeddingPostScriptFonts: Boolean read get_AllowEmbeddingPostScriptFonts write set_AllowEmbeddingPostScriptFonts;
    property CustomTimeZoneInfo: DDN.mscorlib.DNTimeZoneInfo read get_CustomTimeZoneInfo write set_CustomTimeZoneInfo;
  end;

  TDNHtmlFixedSaveOptions = class(TDNGenericImport<DNHtmlFixedSaveOptionsClass, DNHtmlFixedSaveOptions>) end;

  //-------------namespace: Aspose.Words.Saving----------------
  DNImageSaveOptionsClass = interface(DNFixedPageSaveOptionsClass)
  ['{81C1273B-782B-507E-BD6B-67BB671B3C6E}']
  { static getter & setter } 

    procedure set_Resolution(value: Single);

  { constructors } 

    {class} function init(saveFormat: DNSaveFormat): DNImageSaveOptions;

  { static propertys } 

    {class} property Resolution: Single write set_Resolution;
  end;

  [DNTypeName('Aspose.Words.Saving.ImageSaveOptions')]
  DNImageSaveOptions = interface(DNFixedPageSaveOptions)
  ['{4D42F7A9-EF61-37FC-98F4-C2437CBFB364}']
  { getters & setters } 

    function get_SaveFormat: DNSaveFormat;
    procedure set_SaveFormat(value: DNSaveFormat);
    function get_PageSet: DNPageSet;
    procedure set_PageSet(value: DNPageSet);
    function get_PaperColor: DDN.System.Drawing.DNColor;
    procedure set_PaperColor(value: DDN.System.Drawing.DNColor);
    function get_PixelFormat: DNImagePixelFormat;
    procedure set_PixelFormat(value: DNImagePixelFormat);
    function get_HorizontalResolution: Single;
    procedure set_HorizontalResolution(value: Single);
    function get_VerticalResolution: Single;
    procedure set_VerticalResolution(value: Single);
    procedure set_Resolution(value: Single);
    function get_JpegQuality: Int32;
    procedure set_JpegQuality(value: Int32);
    function get_TiffCompression: DNTiffCompression;
    procedure set_TiffCompression(value: DNTiffCompression);
    function get_ImageColorMode: DNImageColorMode;
    procedure set_ImageColorMode(value: DNImageColorMode);
    function get_ImageBrightness: Single;
    procedure set_ImageBrightness(value: Single);
    function get_ImageContrast: Single;
    procedure set_ImageContrast(value: Single);
    function get_Scale: Single;
    procedure set_Scale(value: Single);
    function get_MetafileRenderingOptions: DNMetafileRenderingOptions;
    function get_TiffBinarizationMethod: DNImageBinarizationMethod;
    procedure set_TiffBinarizationMethod(value: DNImageBinarizationMethod);
    function get_ThresholdForFloydSteinbergDithering: Byte;
    procedure set_ThresholdForFloydSteinbergDithering(value: Byte);
    function get_GraphicsQualityOptions: DNGraphicsQualityOptions;
    procedure set_GraphicsQualityOptions(value: DNGraphicsQualityOptions);
    function get_UseGdiEmfRenderer: Boolean;
    procedure set_UseGdiEmfRenderer(value: Boolean);
    function get_PageSavingCallback: DNIPageSavingCallback;
    procedure set_PageSavingCallback(value: DNIPageSavingCallback);
    function get_NumeralFormat: DNNumeralFormat;
    procedure set_NumeralFormat(value: DNNumeralFormat);
    function get_ColorMode: DNColorMode;
    procedure set_ColorMode(value: DNColorMode);
    function get_OptimizeOutput: Boolean;
    procedure set_OptimizeOutput(value: Boolean);
    function get_TempFolder: string;
    procedure set_TempFolder(value: string);
    function get_PrettyFormat: Boolean;
    procedure set_PrettyFormat(value: Boolean);
    function get_UseAntiAliasing: Boolean;
    procedure set_UseAntiAliasing(value: Boolean);
    function get_UseHighQualityRendering: Boolean;
    procedure set_UseHighQualityRendering(value: Boolean);
    function get_UpdateSdtContent: Boolean;
    procedure set_UpdateSdtContent(value: Boolean);
    function get_DmlRenderingMode: DNDmlRenderingMode;
    procedure set_DmlRenderingMode(value: DNDmlRenderingMode);
    function get_DmlEffectsRenderingMode: DNDmlEffectsRenderingMode;
    procedure set_DmlEffectsRenderingMode(value: DNDmlEffectsRenderingMode);
    function get_ImlRenderingMode: DNImlRenderingMode;
    procedure set_ImlRenderingMode(value: DNImlRenderingMode);
    function get_DefaultTemplate: string;
    procedure set_DefaultTemplate(value: string);
    function get_UpdateFields: Boolean;
    procedure set_UpdateFields(value: Boolean);
    function get_UpdateLastSavedTimeProperty: Boolean;
    procedure set_UpdateLastSavedTimeProperty(value: Boolean);
    function get_UpdateLastPrintedProperty: Boolean;
    procedure set_UpdateLastPrintedProperty(value: Boolean);
    function get_UpdateCreatedTimeProperty: Boolean;
    procedure set_UpdateCreatedTimeProperty(value: Boolean);
    function get_MemoryOptimization: Boolean;
    procedure set_MemoryOptimization(value: Boolean);
    function get_Dml3DEffectsRenderingMode: DNDml3DEffectsRenderingMode;
    procedure set_Dml3DEffectsRenderingMode(value: DNDml3DEffectsRenderingMode);
    function get_AllowEmbeddingPostScriptFonts: Boolean;
    procedure set_AllowEmbeddingPostScriptFonts(value: Boolean);
    function get_CustomTimeZoneInfo: DDN.mscorlib.DNTimeZoneInfo;
    procedure set_CustomTimeZoneInfo(value: DDN.mscorlib.DNTimeZoneInfo);

  { methods } 

    function Clone: DNImageSaveOptions;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property SaveFormat: DNSaveFormat read get_SaveFormat write set_SaveFormat;
    property PageSet: DNPageSet read get_PageSet write set_PageSet;
    property PaperColor: DDN.System.Drawing.DNColor read get_PaperColor write set_PaperColor;
    property PixelFormat: DNImagePixelFormat read get_PixelFormat write set_PixelFormat;
    property HorizontalResolution: Single read get_HorizontalResolution write set_HorizontalResolution;
    property VerticalResolution: Single read get_VerticalResolution write set_VerticalResolution;
    property Resolution: Single write set_Resolution;
    property JpegQuality: Int32 read get_JpegQuality write set_JpegQuality;
    property TiffCompression: DNTiffCompression read get_TiffCompression write set_TiffCompression;
    property ImageColorMode: DNImageColorMode read get_ImageColorMode write set_ImageColorMode;
    property ImageBrightness: Single read get_ImageBrightness write set_ImageBrightness;
    property ImageContrast: Single read get_ImageContrast write set_ImageContrast;
    property Scale: Single read get_Scale write set_Scale;
    property MetafileRenderingOptions: DNMetafileRenderingOptions read get_MetafileRenderingOptions;
    property TiffBinarizationMethod: DNImageBinarizationMethod read get_TiffBinarizationMethod write set_TiffBinarizationMethod;
    property ThresholdForFloydSteinbergDithering: Byte read get_ThresholdForFloydSteinbergDithering write set_ThresholdForFloydSteinbergDithering;
    property GraphicsQualityOptions: DNGraphicsQualityOptions read get_GraphicsQualityOptions write set_GraphicsQualityOptions;
    property UseGdiEmfRenderer: Boolean read get_UseGdiEmfRenderer write set_UseGdiEmfRenderer;
    property PageSavingCallback: DNIPageSavingCallback read get_PageSavingCallback write set_PageSavingCallback;
    property NumeralFormat: DNNumeralFormat read get_NumeralFormat write set_NumeralFormat;
    property ColorMode: DNColorMode read get_ColorMode write set_ColorMode;
    property OptimizeOutput: Boolean read get_OptimizeOutput write set_OptimizeOutput;
    property TempFolder: string read get_TempFolder write set_TempFolder;
    property PrettyFormat: Boolean read get_PrettyFormat write set_PrettyFormat;
    property UseAntiAliasing: Boolean read get_UseAntiAliasing write set_UseAntiAliasing;
    property UseHighQualityRendering: Boolean read get_UseHighQualityRendering write set_UseHighQualityRendering;
    property UpdateSdtContent: Boolean read get_UpdateSdtContent write set_UpdateSdtContent;
    property DmlRenderingMode: DNDmlRenderingMode read get_DmlRenderingMode write set_DmlRenderingMode;
    property DmlEffectsRenderingMode: DNDmlEffectsRenderingMode read get_DmlEffectsRenderingMode write set_DmlEffectsRenderingMode;
    property ImlRenderingMode: DNImlRenderingMode read get_ImlRenderingMode write set_ImlRenderingMode;
    property DefaultTemplate: string read get_DefaultTemplate write set_DefaultTemplate;
    property UpdateFields: Boolean read get_UpdateFields write set_UpdateFields;
    property UpdateLastSavedTimeProperty: Boolean read get_UpdateLastSavedTimeProperty write set_UpdateLastSavedTimeProperty;
    property UpdateLastPrintedProperty: Boolean read get_UpdateLastPrintedProperty write set_UpdateLastPrintedProperty;
    property UpdateCreatedTimeProperty: Boolean read get_UpdateCreatedTimeProperty write set_UpdateCreatedTimeProperty;
    property MemoryOptimization: Boolean read get_MemoryOptimization write set_MemoryOptimization;
    property Dml3DEffectsRenderingMode: DNDml3DEffectsRenderingMode read get_Dml3DEffectsRenderingMode write set_Dml3DEffectsRenderingMode;
    property AllowEmbeddingPostScriptFonts: Boolean read get_AllowEmbeddingPostScriptFonts write set_AllowEmbeddingPostScriptFonts;
    property CustomTimeZoneInfo: DDN.mscorlib.DNTimeZoneInfo read get_CustomTimeZoneInfo write set_CustomTimeZoneInfo;
  end;

  TDNImageSaveOptions = class(TDNGenericImport<DNImageSaveOptionsClass, DNImageSaveOptions>) end;

  //-------------namespace: Aspose.Words.Saving----------------
  DNPclSaveOptionsClass = interface(DNFixedPageSaveOptionsClass)
  ['{00D49C5F-CDAF-5FDF-B9A6-065D1467FE47}']
  { constructors } 

    {class} function init: DNPclSaveOptions;

  end;

  [DNTypeName('Aspose.Words.Saving.PclSaveOptions')]
  DNPclSaveOptions = interface(DNFixedPageSaveOptions)
  ['{1D77C81F-CFC5-325F-85B8-BCCE4D84D4A9}']
  { getters & setters } 

    function get_SaveFormat: DNSaveFormat;
    procedure set_SaveFormat(value: DNSaveFormat);
    function get_RasterizeTransformedElements: Boolean;
    procedure set_RasterizeTransformedElements(value: Boolean);
    function get_FallbackFontName: string;
    procedure set_FallbackFontName(value: string);
    function get_PageSet: DNPageSet;
    procedure set_PageSet(value: DNPageSet);
    function get_PageSavingCallback: DNIPageSavingCallback;
    procedure set_PageSavingCallback(value: DNIPageSavingCallback);
    function get_NumeralFormat: DNNumeralFormat;
    procedure set_NumeralFormat(value: DNNumeralFormat);
    function get_MetafileRenderingOptions: DNMetafileRenderingOptions;
    procedure set_MetafileRenderingOptions(value: DNMetafileRenderingOptions);
    function get_JpegQuality: Int32;
    procedure set_JpegQuality(value: Int32);
    function get_ColorMode: DNColorMode;
    procedure set_ColorMode(value: DNColorMode);
    function get_OptimizeOutput: Boolean;
    procedure set_OptimizeOutput(value: Boolean);
    function get_TempFolder: string;
    procedure set_TempFolder(value: string);
    function get_PrettyFormat: Boolean;
    procedure set_PrettyFormat(value: Boolean);
    function get_UseAntiAliasing: Boolean;
    procedure set_UseAntiAliasing(value: Boolean);
    function get_UseHighQualityRendering: Boolean;
    procedure set_UseHighQualityRendering(value: Boolean);
    function get_UpdateSdtContent: Boolean;
    procedure set_UpdateSdtContent(value: Boolean);
    function get_DmlRenderingMode: DNDmlRenderingMode;
    procedure set_DmlRenderingMode(value: DNDmlRenderingMode);
    function get_DmlEffectsRenderingMode: DNDmlEffectsRenderingMode;
    procedure set_DmlEffectsRenderingMode(value: DNDmlEffectsRenderingMode);
    function get_ImlRenderingMode: DNImlRenderingMode;
    procedure set_ImlRenderingMode(value: DNImlRenderingMode);
    function get_DefaultTemplate: string;
    procedure set_DefaultTemplate(value: string);
    function get_UpdateFields: Boolean;
    procedure set_UpdateFields(value: Boolean);
    function get_UpdateLastSavedTimeProperty: Boolean;
    procedure set_UpdateLastSavedTimeProperty(value: Boolean);
    function get_UpdateLastPrintedProperty: Boolean;
    procedure set_UpdateLastPrintedProperty(value: Boolean);
    function get_UpdateCreatedTimeProperty: Boolean;
    procedure set_UpdateCreatedTimeProperty(value: Boolean);
    function get_MemoryOptimization: Boolean;
    procedure set_MemoryOptimization(value: Boolean);
    function get_Dml3DEffectsRenderingMode: DNDml3DEffectsRenderingMode;
    procedure set_Dml3DEffectsRenderingMode(value: DNDml3DEffectsRenderingMode);
    function get_AllowEmbeddingPostScriptFonts: Boolean;
    procedure set_AllowEmbeddingPostScriptFonts(value: Boolean);
    function get_CustomTimeZoneInfo: DDN.mscorlib.DNTimeZoneInfo;
    procedure set_CustomTimeZoneInfo(value: DDN.mscorlib.DNTimeZoneInfo);

  { methods } 

    procedure AddPrinterFont(fontFullName: string; fontPclName: string);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property SaveFormat: DNSaveFormat read get_SaveFormat write set_SaveFormat;
    property RasterizeTransformedElements: Boolean read get_RasterizeTransformedElements write set_RasterizeTransformedElements;
    property FallbackFontName: string read get_FallbackFontName write set_FallbackFontName;
    property PageSet: DNPageSet read get_PageSet write set_PageSet;
    property PageSavingCallback: DNIPageSavingCallback read get_PageSavingCallback write set_PageSavingCallback;
    property NumeralFormat: DNNumeralFormat read get_NumeralFormat write set_NumeralFormat;
    property MetafileRenderingOptions: DNMetafileRenderingOptions read get_MetafileRenderingOptions write set_MetafileRenderingOptions;
    property JpegQuality: Int32 read get_JpegQuality write set_JpegQuality;
    property ColorMode: DNColorMode read get_ColorMode write set_ColorMode;
    property OptimizeOutput: Boolean read get_OptimizeOutput write set_OptimizeOutput;
    property TempFolder: string read get_TempFolder write set_TempFolder;
    property PrettyFormat: Boolean read get_PrettyFormat write set_PrettyFormat;
    property UseAntiAliasing: Boolean read get_UseAntiAliasing write set_UseAntiAliasing;
    property UseHighQualityRendering: Boolean read get_UseHighQualityRendering write set_UseHighQualityRendering;
    property UpdateSdtContent: Boolean read get_UpdateSdtContent write set_UpdateSdtContent;
    property DmlRenderingMode: DNDmlRenderingMode read get_DmlRenderingMode write set_DmlRenderingMode;
    property DmlEffectsRenderingMode: DNDmlEffectsRenderingMode read get_DmlEffectsRenderingMode write set_DmlEffectsRenderingMode;
    property ImlRenderingMode: DNImlRenderingMode read get_ImlRenderingMode write set_ImlRenderingMode;
    property DefaultTemplate: string read get_DefaultTemplate write set_DefaultTemplate;
    property UpdateFields: Boolean read get_UpdateFields write set_UpdateFields;
    property UpdateLastSavedTimeProperty: Boolean read get_UpdateLastSavedTimeProperty write set_UpdateLastSavedTimeProperty;
    property UpdateLastPrintedProperty: Boolean read get_UpdateLastPrintedProperty write set_UpdateLastPrintedProperty;
    property UpdateCreatedTimeProperty: Boolean read get_UpdateCreatedTimeProperty write set_UpdateCreatedTimeProperty;
    property MemoryOptimization: Boolean read get_MemoryOptimization write set_MemoryOptimization;
    property Dml3DEffectsRenderingMode: DNDml3DEffectsRenderingMode read get_Dml3DEffectsRenderingMode write set_Dml3DEffectsRenderingMode;
    property AllowEmbeddingPostScriptFonts: Boolean read get_AllowEmbeddingPostScriptFonts write set_AllowEmbeddingPostScriptFonts;
    property CustomTimeZoneInfo: DDN.mscorlib.DNTimeZoneInfo read get_CustomTimeZoneInfo write set_CustomTimeZoneInfo;
  end;

  TDNPclSaveOptions = class(TDNGenericImport<DNPclSaveOptionsClass, DNPclSaveOptions>) end;

  //-------------namespace: Aspose.Words.Saving----------------
  DNPdfSaveOptionsClass = interface(DNFixedPageSaveOptionsClass)
  ['{8B1DB7FB-DF8C-5A90-AF1C-7368E0257685}']
  { constructors } 

    {class} function init: DNPdfSaveOptions;

  end;

  [DNTypeName('Aspose.Words.Saving.PdfSaveOptions')]
  DNPdfSaveOptions = interface(DNFixedPageSaveOptions)
  ['{9D576DD9-EE16-369F-BBC3-56B85FECA563}']
  { getters & setters } 

    function get_SaveFormat: DNSaveFormat;
    procedure set_SaveFormat(value: DNSaveFormat);
    function get_OutlineOptions: DNOutlineOptions;
    function get_TextCompression: DNPdfTextCompression;
    procedure set_TextCompression(value: DNPdfTextCompression);
    function get_JpegQuality: Int32;
    procedure set_JpegQuality(value: Int32);
    function get_PreserveFormFields: Boolean;
    procedure set_PreserveFormFields(value: Boolean);
    function get_CreateNoteHyperlinks: Boolean;
    procedure set_CreateNoteHyperlinks(value: Boolean);
    function get_EncryptionDetails: DNPdfEncryptionDetails;
    procedure set_EncryptionDetails(value: DNPdfEncryptionDetails);
    function get_DigitalSignatureDetails: DNPdfDigitalSignatureDetails;
    procedure set_DigitalSignatureDetails(value: DNPdfDigitalSignatureDetails);
    function get_EmbedFullFonts: Boolean;
    procedure set_EmbedFullFonts(value: Boolean);
    function get_FontEmbeddingMode: DNPdfFontEmbeddingMode;
    procedure set_FontEmbeddingMode(value: DNPdfFontEmbeddingMode);
    function get_UseCoreFonts: Boolean;
    procedure set_UseCoreFonts(value: Boolean);
    function get_CustomPropertiesExport: DNPdfCustomPropertiesExport;
    procedure set_CustomPropertiesExport(value: DNPdfCustomPropertiesExport);
    function get_ZoomBehavior: DNPdfZoomBehavior;
    procedure set_ZoomBehavior(value: DNPdfZoomBehavior);
    function get_ZoomFactor: Int32;
    procedure set_ZoomFactor(value: Int32);
    function get_ImageCompression: DNPdfImageCompression;
    procedure set_ImageCompression(value: DNPdfImageCompression);
    function get_OpenHyperlinksInNewWindow: Boolean;
    procedure set_OpenHyperlinksInNewWindow(value: Boolean);
    function get_ExportDocumentStructure: Boolean;
    procedure set_ExportDocumentStructure(value: Boolean);
    function get_UseBookFoldPrintingSettings: Boolean;
    procedure set_UseBookFoldPrintingSettings(value: Boolean);
    function get_DownsampleOptions: DNDownsampleOptions;
    procedure set_DownsampleOptions(value: DNDownsampleOptions);
    function get_PageMode: DNPdfPageMode;
    procedure set_PageMode(value: DNPdfPageMode);
    function get_ImageColorSpaceExportMode: DNPdfImageColorSpaceExportMode;
    procedure set_ImageColorSpaceExportMode(value: DNPdfImageColorSpaceExportMode);
    function get_PreblendImages: Boolean;
    procedure set_PreblendImages(value: Boolean);
    function get_DisplayDocTitle: Boolean;
    procedure set_DisplayDocTitle(value: Boolean);
    function get_DmlEffectsRenderingMode: DNDmlEffectsRenderingMode;
    procedure set_DmlEffectsRenderingMode(value: DNDmlEffectsRenderingMode);
    function get_HeaderFooterBookmarksExportMode: DNHeaderFooterBookmarksExportMode;
    procedure set_HeaderFooterBookmarksExportMode(value: DNHeaderFooterBookmarksExportMode);
    function get_AdditionalTextPositioning: Boolean;
    procedure set_AdditionalTextPositioning(value: Boolean);
    function get_InterpolateImages: Boolean;
    procedure set_InterpolateImages(value: Boolean);
    function get_Compliance: DNPdfCompliance;
    procedure set_Compliance(value: DNPdfCompliance);
    function get_PageSet: DNPageSet;
    procedure set_PageSet(value: DNPageSet);
    function get_PageSavingCallback: DNIPageSavingCallback;
    procedure set_PageSavingCallback(value: DNIPageSavingCallback);
    function get_NumeralFormat: DNNumeralFormat;
    procedure set_NumeralFormat(value: DNNumeralFormat);
    function get_MetafileRenderingOptions: DNMetafileRenderingOptions;
    procedure set_MetafileRenderingOptions(value: DNMetafileRenderingOptions);
    function get_ColorMode: DNColorMode;
    procedure set_ColorMode(value: DNColorMode);
    function get_OptimizeOutput: Boolean;
    procedure set_OptimizeOutput(value: Boolean);
    function get_TempFolder: string;
    procedure set_TempFolder(value: string);
    function get_PrettyFormat: Boolean;
    procedure set_PrettyFormat(value: Boolean);
    function get_UseAntiAliasing: Boolean;
    procedure set_UseAntiAliasing(value: Boolean);
    function get_UseHighQualityRendering: Boolean;
    procedure set_UseHighQualityRendering(value: Boolean);
    function get_UpdateSdtContent: Boolean;
    procedure set_UpdateSdtContent(value: Boolean);
    function get_DmlRenderingMode: DNDmlRenderingMode;
    procedure set_DmlRenderingMode(value: DNDmlRenderingMode);
    function get_ImlRenderingMode: DNImlRenderingMode;
    procedure set_ImlRenderingMode(value: DNImlRenderingMode);
    function get_DefaultTemplate: string;
    procedure set_DefaultTemplate(value: string);
    function get_UpdateFields: Boolean;
    procedure set_UpdateFields(value: Boolean);
    function get_UpdateLastSavedTimeProperty: Boolean;
    procedure set_UpdateLastSavedTimeProperty(value: Boolean);
    function get_UpdateLastPrintedProperty: Boolean;
    procedure set_UpdateLastPrintedProperty(value: Boolean);
    function get_UpdateCreatedTimeProperty: Boolean;
    procedure set_UpdateCreatedTimeProperty(value: Boolean);
    function get_MemoryOptimization: Boolean;
    procedure set_MemoryOptimization(value: Boolean);
    function get_Dml3DEffectsRenderingMode: DNDml3DEffectsRenderingMode;
    procedure set_Dml3DEffectsRenderingMode(value: DNDml3DEffectsRenderingMode);
    function get_AllowEmbeddingPostScriptFonts: Boolean;
    procedure set_AllowEmbeddingPostScriptFonts(value: Boolean);
    function get_CustomTimeZoneInfo: DDN.mscorlib.DNTimeZoneInfo;
    procedure set_CustomTimeZoneInfo(value: DDN.mscorlib.DNTimeZoneInfo);

  { methods } 

    function Clone: DNPdfSaveOptions;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property SaveFormat: DNSaveFormat read get_SaveFormat write set_SaveFormat;
    property OutlineOptions: DNOutlineOptions read get_OutlineOptions;
    property TextCompression: DNPdfTextCompression read get_TextCompression write set_TextCompression;
    property JpegQuality: Int32 read get_JpegQuality write set_JpegQuality;
    property PreserveFormFields: Boolean read get_PreserveFormFields write set_PreserveFormFields;
    property CreateNoteHyperlinks: Boolean read get_CreateNoteHyperlinks write set_CreateNoteHyperlinks;
    property EncryptionDetails: DNPdfEncryptionDetails read get_EncryptionDetails write set_EncryptionDetails;
    property DigitalSignatureDetails: DNPdfDigitalSignatureDetails read get_DigitalSignatureDetails write set_DigitalSignatureDetails;
    property EmbedFullFonts: Boolean read get_EmbedFullFonts write set_EmbedFullFonts;
    property FontEmbeddingMode: DNPdfFontEmbeddingMode read get_FontEmbeddingMode write set_FontEmbeddingMode;
    property UseCoreFonts: Boolean read get_UseCoreFonts write set_UseCoreFonts;
    property CustomPropertiesExport: DNPdfCustomPropertiesExport read get_CustomPropertiesExport write set_CustomPropertiesExport;
    property ZoomBehavior: DNPdfZoomBehavior read get_ZoomBehavior write set_ZoomBehavior;
    property ZoomFactor: Int32 read get_ZoomFactor write set_ZoomFactor;
    property ImageCompression: DNPdfImageCompression read get_ImageCompression write set_ImageCompression;
    property OpenHyperlinksInNewWindow: Boolean read get_OpenHyperlinksInNewWindow write set_OpenHyperlinksInNewWindow;
    property ExportDocumentStructure: Boolean read get_ExportDocumentStructure write set_ExportDocumentStructure;
    property UseBookFoldPrintingSettings: Boolean read get_UseBookFoldPrintingSettings write set_UseBookFoldPrintingSettings;
    property DownsampleOptions: DNDownsampleOptions read get_DownsampleOptions write set_DownsampleOptions;
    property PageMode: DNPdfPageMode read get_PageMode write set_PageMode;
    property ImageColorSpaceExportMode: DNPdfImageColorSpaceExportMode read get_ImageColorSpaceExportMode write set_ImageColorSpaceExportMode;
    property PreblendImages: Boolean read get_PreblendImages write set_PreblendImages;
    property DisplayDocTitle: Boolean read get_DisplayDocTitle write set_DisplayDocTitle;
    property DmlEffectsRenderingMode: DNDmlEffectsRenderingMode read get_DmlEffectsRenderingMode write set_DmlEffectsRenderingMode;
    property HeaderFooterBookmarksExportMode: DNHeaderFooterBookmarksExportMode read get_HeaderFooterBookmarksExportMode write set_HeaderFooterBookmarksExportMode;
    property AdditionalTextPositioning: Boolean read get_AdditionalTextPositioning write set_AdditionalTextPositioning;
    property InterpolateImages: Boolean read get_InterpolateImages write set_InterpolateImages;
    property Compliance: DNPdfCompliance read get_Compliance write set_Compliance;
    property PageSet: DNPageSet read get_PageSet write set_PageSet;
    property PageSavingCallback: DNIPageSavingCallback read get_PageSavingCallback write set_PageSavingCallback;
    property NumeralFormat: DNNumeralFormat read get_NumeralFormat write set_NumeralFormat;
    property MetafileRenderingOptions: DNMetafileRenderingOptions read get_MetafileRenderingOptions write set_MetafileRenderingOptions;
    property ColorMode: DNColorMode read get_ColorMode write set_ColorMode;
    property OptimizeOutput: Boolean read get_OptimizeOutput write set_OptimizeOutput;
    property TempFolder: string read get_TempFolder write set_TempFolder;
    property PrettyFormat: Boolean read get_PrettyFormat write set_PrettyFormat;
    property UseAntiAliasing: Boolean read get_UseAntiAliasing write set_UseAntiAliasing;
    property UseHighQualityRendering: Boolean read get_UseHighQualityRendering write set_UseHighQualityRendering;
    property UpdateSdtContent: Boolean read get_UpdateSdtContent write set_UpdateSdtContent;
    property DmlRenderingMode: DNDmlRenderingMode read get_DmlRenderingMode write set_DmlRenderingMode;
    property ImlRenderingMode: DNImlRenderingMode read get_ImlRenderingMode write set_ImlRenderingMode;
    property DefaultTemplate: string read get_DefaultTemplate write set_DefaultTemplate;
    property UpdateFields: Boolean read get_UpdateFields write set_UpdateFields;
    property UpdateLastSavedTimeProperty: Boolean read get_UpdateLastSavedTimeProperty write set_UpdateLastSavedTimeProperty;
    property UpdateLastPrintedProperty: Boolean read get_UpdateLastPrintedProperty write set_UpdateLastPrintedProperty;
    property UpdateCreatedTimeProperty: Boolean read get_UpdateCreatedTimeProperty write set_UpdateCreatedTimeProperty;
    property MemoryOptimization: Boolean read get_MemoryOptimization write set_MemoryOptimization;
    property Dml3DEffectsRenderingMode: DNDml3DEffectsRenderingMode read get_Dml3DEffectsRenderingMode write set_Dml3DEffectsRenderingMode;
    property AllowEmbeddingPostScriptFonts: Boolean read get_AllowEmbeddingPostScriptFonts write set_AllowEmbeddingPostScriptFonts;
    property CustomTimeZoneInfo: DDN.mscorlib.DNTimeZoneInfo read get_CustomTimeZoneInfo write set_CustomTimeZoneInfo;
  end;

  TDNPdfSaveOptions = class(TDNGenericImport<DNPdfSaveOptionsClass, DNPdfSaveOptions>) end;

  //-------------namespace: Aspose.Words.Saving----------------
  DNPsSaveOptionsClass = interface(DNFixedPageSaveOptionsClass)
  ['{407AC513-19E9-573C-BC13-D641B7F7DB8D}']
  { constructors } 

    {class} function init: DNPsSaveOptions;

  end;

  [DNTypeName('Aspose.Words.Saving.PsSaveOptions')]
  DNPsSaveOptions = interface(DNFixedPageSaveOptions)
  ['{BB25BA83-0E38-3987-8A91-6B68FF64AB8D}']
  { getters & setters } 

    function get_SaveFormat: DNSaveFormat;
    procedure set_SaveFormat(value: DNSaveFormat);
    function get_UseBookFoldPrintingSettings: Boolean;
    procedure set_UseBookFoldPrintingSettings(value: Boolean);
    function get_PageSet: DNPageSet;
    procedure set_PageSet(value: DNPageSet);
    function get_PageSavingCallback: DNIPageSavingCallback;
    procedure set_PageSavingCallback(value: DNIPageSavingCallback);
    function get_NumeralFormat: DNNumeralFormat;
    procedure set_NumeralFormat(value: DNNumeralFormat);
    function get_MetafileRenderingOptions: DNMetafileRenderingOptions;
    procedure set_MetafileRenderingOptions(value: DNMetafileRenderingOptions);
    function get_JpegQuality: Int32;
    procedure set_JpegQuality(value: Int32);
    function get_ColorMode: DNColorMode;
    procedure set_ColorMode(value: DNColorMode);
    function get_OptimizeOutput: Boolean;
    procedure set_OptimizeOutput(value: Boolean);
    function get_TempFolder: string;
    procedure set_TempFolder(value: string);
    function get_PrettyFormat: Boolean;
    procedure set_PrettyFormat(value: Boolean);
    function get_UseAntiAliasing: Boolean;
    procedure set_UseAntiAliasing(value: Boolean);
    function get_UseHighQualityRendering: Boolean;
    procedure set_UseHighQualityRendering(value: Boolean);
    function get_UpdateSdtContent: Boolean;
    procedure set_UpdateSdtContent(value: Boolean);
    function get_DmlRenderingMode: DNDmlRenderingMode;
    procedure set_DmlRenderingMode(value: DNDmlRenderingMode);
    function get_DmlEffectsRenderingMode: DNDmlEffectsRenderingMode;
    procedure set_DmlEffectsRenderingMode(value: DNDmlEffectsRenderingMode);
    function get_ImlRenderingMode: DNImlRenderingMode;
    procedure set_ImlRenderingMode(value: DNImlRenderingMode);
    function get_DefaultTemplate: string;
    procedure set_DefaultTemplate(value: string);
    function get_UpdateFields: Boolean;
    procedure set_UpdateFields(value: Boolean);
    function get_UpdateLastSavedTimeProperty: Boolean;
    procedure set_UpdateLastSavedTimeProperty(value: Boolean);
    function get_UpdateLastPrintedProperty: Boolean;
    procedure set_UpdateLastPrintedProperty(value: Boolean);
    function get_UpdateCreatedTimeProperty: Boolean;
    procedure set_UpdateCreatedTimeProperty(value: Boolean);
    function get_MemoryOptimization: Boolean;
    procedure set_MemoryOptimization(value: Boolean);
    function get_Dml3DEffectsRenderingMode: DNDml3DEffectsRenderingMode;
    procedure set_Dml3DEffectsRenderingMode(value: DNDml3DEffectsRenderingMode);
    function get_AllowEmbeddingPostScriptFonts: Boolean;
    procedure set_AllowEmbeddingPostScriptFonts(value: Boolean);
    function get_CustomTimeZoneInfo: DDN.mscorlib.DNTimeZoneInfo;
    procedure set_CustomTimeZoneInfo(value: DDN.mscorlib.DNTimeZoneInfo);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property SaveFormat: DNSaveFormat read get_SaveFormat write set_SaveFormat;
    property UseBookFoldPrintingSettings: Boolean read get_UseBookFoldPrintingSettings write set_UseBookFoldPrintingSettings;
    property PageSet: DNPageSet read get_PageSet write set_PageSet;
    property PageSavingCallback: DNIPageSavingCallback read get_PageSavingCallback write set_PageSavingCallback;
    property NumeralFormat: DNNumeralFormat read get_NumeralFormat write set_NumeralFormat;
    property MetafileRenderingOptions: DNMetafileRenderingOptions read get_MetafileRenderingOptions write set_MetafileRenderingOptions;
    property JpegQuality: Int32 read get_JpegQuality write set_JpegQuality;
    property ColorMode: DNColorMode read get_ColorMode write set_ColorMode;
    property OptimizeOutput: Boolean read get_OptimizeOutput write set_OptimizeOutput;
    property TempFolder: string read get_TempFolder write set_TempFolder;
    property PrettyFormat: Boolean read get_PrettyFormat write set_PrettyFormat;
    property UseAntiAliasing: Boolean read get_UseAntiAliasing write set_UseAntiAliasing;
    property UseHighQualityRendering: Boolean read get_UseHighQualityRendering write set_UseHighQualityRendering;
    property UpdateSdtContent: Boolean read get_UpdateSdtContent write set_UpdateSdtContent;
    property DmlRenderingMode: DNDmlRenderingMode read get_DmlRenderingMode write set_DmlRenderingMode;
    property DmlEffectsRenderingMode: DNDmlEffectsRenderingMode read get_DmlEffectsRenderingMode write set_DmlEffectsRenderingMode;
    property ImlRenderingMode: DNImlRenderingMode read get_ImlRenderingMode write set_ImlRenderingMode;
    property DefaultTemplate: string read get_DefaultTemplate write set_DefaultTemplate;
    property UpdateFields: Boolean read get_UpdateFields write set_UpdateFields;
    property UpdateLastSavedTimeProperty: Boolean read get_UpdateLastSavedTimeProperty write set_UpdateLastSavedTimeProperty;
    property UpdateLastPrintedProperty: Boolean read get_UpdateLastPrintedProperty write set_UpdateLastPrintedProperty;
    property UpdateCreatedTimeProperty: Boolean read get_UpdateCreatedTimeProperty write set_UpdateCreatedTimeProperty;
    property MemoryOptimization: Boolean read get_MemoryOptimization write set_MemoryOptimization;
    property Dml3DEffectsRenderingMode: DNDml3DEffectsRenderingMode read get_Dml3DEffectsRenderingMode write set_Dml3DEffectsRenderingMode;
    property AllowEmbeddingPostScriptFonts: Boolean read get_AllowEmbeddingPostScriptFonts write set_AllowEmbeddingPostScriptFonts;
    property CustomTimeZoneInfo: DDN.mscorlib.DNTimeZoneInfo read get_CustomTimeZoneInfo write set_CustomTimeZoneInfo;
  end;

  TDNPsSaveOptions = class(TDNGenericImport<DNPsSaveOptionsClass, DNPsSaveOptions>) end;

  //-------------namespace: Aspose.Words.Saving----------------
  DNSvgSaveOptionsClass = interface(DNFixedPageSaveOptionsClass)
  ['{D6C65AFC-6F81-5707-A3C7-1B7C3280C100}']
  { constructors } 

    {class} function init: DNSvgSaveOptions;

  end;

  [DNTypeName('Aspose.Words.Saving.SvgSaveOptions')]
  DNSvgSaveOptions = interface(DNFixedPageSaveOptions)
  ['{69F847AE-37ED-3E89-99FA-1962B62CD876}']
  { getters & setters } 

    function get_SaveFormat: DNSaveFormat;
    procedure set_SaveFormat(value: DNSaveFormat);
    function get_ShowPageBorder: Boolean;
    procedure set_ShowPageBorder(value: Boolean);
    function get_TextOutputMode: DNSvgTextOutputMode;
    procedure set_TextOutputMode(value: DNSvgTextOutputMode);
    function get_ResourcesFolder: string;
    procedure set_ResourcesFolder(value: string);
    function get_ResourcesFolderAlias: string;
    procedure set_ResourcesFolderAlias(value: string);
    function get_ExportEmbeddedImages: Boolean;
    procedure set_ExportEmbeddedImages(value: Boolean);
    function get_FitToViewPort: Boolean;
    procedure set_FitToViewPort(value: Boolean);
    function get_ResourceSavingCallback: DNIResourceSavingCallback;
    procedure set_ResourceSavingCallback(value: DNIResourceSavingCallback);
    function get_PageSet: DNPageSet;
    procedure set_PageSet(value: DNPageSet);
    function get_PageSavingCallback: DNIPageSavingCallback;
    procedure set_PageSavingCallback(value: DNIPageSavingCallback);
    function get_NumeralFormat: DNNumeralFormat;
    procedure set_NumeralFormat(value: DNNumeralFormat);
    function get_MetafileRenderingOptions: DNMetafileRenderingOptions;
    procedure set_MetafileRenderingOptions(value: DNMetafileRenderingOptions);
    function get_JpegQuality: Int32;
    procedure set_JpegQuality(value: Int32);
    function get_ColorMode: DNColorMode;
    procedure set_ColorMode(value: DNColorMode);
    function get_OptimizeOutput: Boolean;
    procedure set_OptimizeOutput(value: Boolean);
    function get_TempFolder: string;
    procedure set_TempFolder(value: string);
    function get_PrettyFormat: Boolean;
    procedure set_PrettyFormat(value: Boolean);
    function get_UseAntiAliasing: Boolean;
    procedure set_UseAntiAliasing(value: Boolean);
    function get_UseHighQualityRendering: Boolean;
    procedure set_UseHighQualityRendering(value: Boolean);
    function get_UpdateSdtContent: Boolean;
    procedure set_UpdateSdtContent(value: Boolean);
    function get_DmlRenderingMode: DNDmlRenderingMode;
    procedure set_DmlRenderingMode(value: DNDmlRenderingMode);
    function get_DmlEffectsRenderingMode: DNDmlEffectsRenderingMode;
    procedure set_DmlEffectsRenderingMode(value: DNDmlEffectsRenderingMode);
    function get_ImlRenderingMode: DNImlRenderingMode;
    procedure set_ImlRenderingMode(value: DNImlRenderingMode);
    function get_DefaultTemplate: string;
    procedure set_DefaultTemplate(value: string);
    function get_UpdateFields: Boolean;
    procedure set_UpdateFields(value: Boolean);
    function get_UpdateLastSavedTimeProperty: Boolean;
    procedure set_UpdateLastSavedTimeProperty(value: Boolean);
    function get_UpdateLastPrintedProperty: Boolean;
    procedure set_UpdateLastPrintedProperty(value: Boolean);
    function get_UpdateCreatedTimeProperty: Boolean;
    procedure set_UpdateCreatedTimeProperty(value: Boolean);
    function get_MemoryOptimization: Boolean;
    procedure set_MemoryOptimization(value: Boolean);
    function get_Dml3DEffectsRenderingMode: DNDml3DEffectsRenderingMode;
    procedure set_Dml3DEffectsRenderingMode(value: DNDml3DEffectsRenderingMode);
    function get_AllowEmbeddingPostScriptFonts: Boolean;
    procedure set_AllowEmbeddingPostScriptFonts(value: Boolean);
    function get_CustomTimeZoneInfo: DDN.mscorlib.DNTimeZoneInfo;
    procedure set_CustomTimeZoneInfo(value: DDN.mscorlib.DNTimeZoneInfo);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property SaveFormat: DNSaveFormat read get_SaveFormat write set_SaveFormat;
    property ShowPageBorder: Boolean read get_ShowPageBorder write set_ShowPageBorder;
    property TextOutputMode: DNSvgTextOutputMode read get_TextOutputMode write set_TextOutputMode;
    property ResourcesFolder: string read get_ResourcesFolder write set_ResourcesFolder;
    property ResourcesFolderAlias: string read get_ResourcesFolderAlias write set_ResourcesFolderAlias;
    property ExportEmbeddedImages: Boolean read get_ExportEmbeddedImages write set_ExportEmbeddedImages;
    property FitToViewPort: Boolean read get_FitToViewPort write set_FitToViewPort;
    property ResourceSavingCallback: DNIResourceSavingCallback read get_ResourceSavingCallback write set_ResourceSavingCallback;
    property PageSet: DNPageSet read get_PageSet write set_PageSet;
    property PageSavingCallback: DNIPageSavingCallback read get_PageSavingCallback write set_PageSavingCallback;
    property NumeralFormat: DNNumeralFormat read get_NumeralFormat write set_NumeralFormat;
    property MetafileRenderingOptions: DNMetafileRenderingOptions read get_MetafileRenderingOptions write set_MetafileRenderingOptions;
    property JpegQuality: Int32 read get_JpegQuality write set_JpegQuality;
    property ColorMode: DNColorMode read get_ColorMode write set_ColorMode;
    property OptimizeOutput: Boolean read get_OptimizeOutput write set_OptimizeOutput;
    property TempFolder: string read get_TempFolder write set_TempFolder;
    property PrettyFormat: Boolean read get_PrettyFormat write set_PrettyFormat;
    property UseAntiAliasing: Boolean read get_UseAntiAliasing write set_UseAntiAliasing;
    property UseHighQualityRendering: Boolean read get_UseHighQualityRendering write set_UseHighQualityRendering;
    property UpdateSdtContent: Boolean read get_UpdateSdtContent write set_UpdateSdtContent;
    property DmlRenderingMode: DNDmlRenderingMode read get_DmlRenderingMode write set_DmlRenderingMode;
    property DmlEffectsRenderingMode: DNDmlEffectsRenderingMode read get_DmlEffectsRenderingMode write set_DmlEffectsRenderingMode;
    property ImlRenderingMode: DNImlRenderingMode read get_ImlRenderingMode write set_ImlRenderingMode;
    property DefaultTemplate: string read get_DefaultTemplate write set_DefaultTemplate;
    property UpdateFields: Boolean read get_UpdateFields write set_UpdateFields;
    property UpdateLastSavedTimeProperty: Boolean read get_UpdateLastSavedTimeProperty write set_UpdateLastSavedTimeProperty;
    property UpdateLastPrintedProperty: Boolean read get_UpdateLastPrintedProperty write set_UpdateLastPrintedProperty;
    property UpdateCreatedTimeProperty: Boolean read get_UpdateCreatedTimeProperty write set_UpdateCreatedTimeProperty;
    property MemoryOptimization: Boolean read get_MemoryOptimization write set_MemoryOptimization;
    property Dml3DEffectsRenderingMode: DNDml3DEffectsRenderingMode read get_Dml3DEffectsRenderingMode write set_Dml3DEffectsRenderingMode;
    property AllowEmbeddingPostScriptFonts: Boolean read get_AllowEmbeddingPostScriptFonts write set_AllowEmbeddingPostScriptFonts;
    property CustomTimeZoneInfo: DDN.mscorlib.DNTimeZoneInfo read get_CustomTimeZoneInfo write set_CustomTimeZoneInfo;
  end;

  TDNSvgSaveOptions = class(TDNGenericImport<DNSvgSaveOptionsClass, DNSvgSaveOptions>) end;

  //-------------namespace: Aspose.Words.Saving----------------
  DNXamlFixedSaveOptionsClass = interface(DNFixedPageSaveOptionsClass)
  ['{91668CBA-988B-569D-8EA1-1941FB01C6E1}']
  { constructors } 

    {class} function init: DNXamlFixedSaveOptions;

  end;

  [DNTypeName('Aspose.Words.Saving.XamlFixedSaveOptions')]
  DNXamlFixedSaveOptions = interface(DNFixedPageSaveOptions)
  ['{CA17D521-691C-395C-9A26-DF7CAEB12E7A}']
  { getters & setters } 

    function get_SaveFormat: DNSaveFormat;
    procedure set_SaveFormat(value: DNSaveFormat);
    function get_ResourcesFolder: string;
    procedure set_ResourcesFolder(value: string);
    function get_ResourcesFolderAlias: string;
    procedure set_ResourcesFolderAlias(value: string);
    function get_ResourceSavingCallback: DNIResourceSavingCallback;
    procedure set_ResourceSavingCallback(value: DNIResourceSavingCallback);
    function get_PageSet: DNPageSet;
    procedure set_PageSet(value: DNPageSet);
    function get_PageSavingCallback: DNIPageSavingCallback;
    procedure set_PageSavingCallback(value: DNIPageSavingCallback);
    function get_NumeralFormat: DNNumeralFormat;
    procedure set_NumeralFormat(value: DNNumeralFormat);
    function get_MetafileRenderingOptions: DNMetafileRenderingOptions;
    procedure set_MetafileRenderingOptions(value: DNMetafileRenderingOptions);
    function get_JpegQuality: Int32;
    procedure set_JpegQuality(value: Int32);
    function get_ColorMode: DNColorMode;
    procedure set_ColorMode(value: DNColorMode);
    function get_OptimizeOutput: Boolean;
    procedure set_OptimizeOutput(value: Boolean);
    function get_TempFolder: string;
    procedure set_TempFolder(value: string);
    function get_PrettyFormat: Boolean;
    procedure set_PrettyFormat(value: Boolean);
    function get_UseAntiAliasing: Boolean;
    procedure set_UseAntiAliasing(value: Boolean);
    function get_UseHighQualityRendering: Boolean;
    procedure set_UseHighQualityRendering(value: Boolean);
    function get_UpdateSdtContent: Boolean;
    procedure set_UpdateSdtContent(value: Boolean);
    function get_DmlRenderingMode: DNDmlRenderingMode;
    procedure set_DmlRenderingMode(value: DNDmlRenderingMode);
    function get_DmlEffectsRenderingMode: DNDmlEffectsRenderingMode;
    procedure set_DmlEffectsRenderingMode(value: DNDmlEffectsRenderingMode);
    function get_ImlRenderingMode: DNImlRenderingMode;
    procedure set_ImlRenderingMode(value: DNImlRenderingMode);
    function get_DefaultTemplate: string;
    procedure set_DefaultTemplate(value: string);
    function get_UpdateFields: Boolean;
    procedure set_UpdateFields(value: Boolean);
    function get_UpdateLastSavedTimeProperty: Boolean;
    procedure set_UpdateLastSavedTimeProperty(value: Boolean);
    function get_UpdateLastPrintedProperty: Boolean;
    procedure set_UpdateLastPrintedProperty(value: Boolean);
    function get_UpdateCreatedTimeProperty: Boolean;
    procedure set_UpdateCreatedTimeProperty(value: Boolean);
    function get_MemoryOptimization: Boolean;
    procedure set_MemoryOptimization(value: Boolean);
    function get_Dml3DEffectsRenderingMode: DNDml3DEffectsRenderingMode;
    procedure set_Dml3DEffectsRenderingMode(value: DNDml3DEffectsRenderingMode);
    function get_AllowEmbeddingPostScriptFonts: Boolean;
    procedure set_AllowEmbeddingPostScriptFonts(value: Boolean);
    function get_CustomTimeZoneInfo: DDN.mscorlib.DNTimeZoneInfo;
    procedure set_CustomTimeZoneInfo(value: DDN.mscorlib.DNTimeZoneInfo);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property SaveFormat: DNSaveFormat read get_SaveFormat write set_SaveFormat;
    property ResourcesFolder: string read get_ResourcesFolder write set_ResourcesFolder;
    property ResourcesFolderAlias: string read get_ResourcesFolderAlias write set_ResourcesFolderAlias;
    property ResourceSavingCallback: DNIResourceSavingCallback read get_ResourceSavingCallback write set_ResourceSavingCallback;
    property PageSet: DNPageSet read get_PageSet write set_PageSet;
    property PageSavingCallback: DNIPageSavingCallback read get_PageSavingCallback write set_PageSavingCallback;
    property NumeralFormat: DNNumeralFormat read get_NumeralFormat write set_NumeralFormat;
    property MetafileRenderingOptions: DNMetafileRenderingOptions read get_MetafileRenderingOptions write set_MetafileRenderingOptions;
    property JpegQuality: Int32 read get_JpegQuality write set_JpegQuality;
    property ColorMode: DNColorMode read get_ColorMode write set_ColorMode;
    property OptimizeOutput: Boolean read get_OptimizeOutput write set_OptimizeOutput;
    property TempFolder: string read get_TempFolder write set_TempFolder;
    property PrettyFormat: Boolean read get_PrettyFormat write set_PrettyFormat;
    property UseAntiAliasing: Boolean read get_UseAntiAliasing write set_UseAntiAliasing;
    property UseHighQualityRendering: Boolean read get_UseHighQualityRendering write set_UseHighQualityRendering;
    property UpdateSdtContent: Boolean read get_UpdateSdtContent write set_UpdateSdtContent;
    property DmlRenderingMode: DNDmlRenderingMode read get_DmlRenderingMode write set_DmlRenderingMode;
    property DmlEffectsRenderingMode: DNDmlEffectsRenderingMode read get_DmlEffectsRenderingMode write set_DmlEffectsRenderingMode;
    property ImlRenderingMode: DNImlRenderingMode read get_ImlRenderingMode write set_ImlRenderingMode;
    property DefaultTemplate: string read get_DefaultTemplate write set_DefaultTemplate;
    property UpdateFields: Boolean read get_UpdateFields write set_UpdateFields;
    property UpdateLastSavedTimeProperty: Boolean read get_UpdateLastSavedTimeProperty write set_UpdateLastSavedTimeProperty;
    property UpdateLastPrintedProperty: Boolean read get_UpdateLastPrintedProperty write set_UpdateLastPrintedProperty;
    property UpdateCreatedTimeProperty: Boolean read get_UpdateCreatedTimeProperty write set_UpdateCreatedTimeProperty;
    property MemoryOptimization: Boolean read get_MemoryOptimization write set_MemoryOptimization;
    property Dml3DEffectsRenderingMode: DNDml3DEffectsRenderingMode read get_Dml3DEffectsRenderingMode write set_Dml3DEffectsRenderingMode;
    property AllowEmbeddingPostScriptFonts: Boolean read get_AllowEmbeddingPostScriptFonts write set_AllowEmbeddingPostScriptFonts;
    property CustomTimeZoneInfo: DDN.mscorlib.DNTimeZoneInfo read get_CustomTimeZoneInfo write set_CustomTimeZoneInfo;
  end;

  TDNXamlFixedSaveOptions = class(TDNGenericImport<DNXamlFixedSaveOptionsClass, DNXamlFixedSaveOptions>) end;

  //-------------namespace: Aspose.Words.Saving----------------
  DNXpsSaveOptionsClass = interface(DNFixedPageSaveOptionsClass)
  ['{A3DC1193-2F71-5F6E-8FE2-24C77DA103B5}']
  { constructors } 

    {class} function init: DNXpsSaveOptions; overload;
    {class} function init(saveFormat: DNSaveFormat): DNXpsSaveOptions; overload;

  end;

  [DNTypeName('Aspose.Words.Saving.XpsSaveOptions')]
  DNXpsSaveOptions = interface(DNFixedPageSaveOptions)
  ['{C6F78792-EA5F-35F9-B2C0-501850CC136C}']
  { getters & setters } 

    function get_SaveFormat: DNSaveFormat;
    procedure set_SaveFormat(value: DNSaveFormat);
    function get_OutlineOptions: DNOutlineOptions;
    function get_UseBookFoldPrintingSettings: Boolean;
    procedure set_UseBookFoldPrintingSettings(value: Boolean);
    function get_PageSet: DNPageSet;
    procedure set_PageSet(value: DNPageSet);
    function get_PageSavingCallback: DNIPageSavingCallback;
    procedure set_PageSavingCallback(value: DNIPageSavingCallback);
    function get_NumeralFormat: DNNumeralFormat;
    procedure set_NumeralFormat(value: DNNumeralFormat);
    function get_MetafileRenderingOptions: DNMetafileRenderingOptions;
    procedure set_MetafileRenderingOptions(value: DNMetafileRenderingOptions);
    function get_JpegQuality: Int32;
    procedure set_JpegQuality(value: Int32);
    function get_ColorMode: DNColorMode;
    procedure set_ColorMode(value: DNColorMode);
    function get_OptimizeOutput: Boolean;
    procedure set_OptimizeOutput(value: Boolean);
    function get_TempFolder: string;
    procedure set_TempFolder(value: string);
    function get_PrettyFormat: Boolean;
    procedure set_PrettyFormat(value: Boolean);
    function get_UseAntiAliasing: Boolean;
    procedure set_UseAntiAliasing(value: Boolean);
    function get_UseHighQualityRendering: Boolean;
    procedure set_UseHighQualityRendering(value: Boolean);
    function get_UpdateSdtContent: Boolean;
    procedure set_UpdateSdtContent(value: Boolean);
    function get_DmlRenderingMode: DNDmlRenderingMode;
    procedure set_DmlRenderingMode(value: DNDmlRenderingMode);
    function get_DmlEffectsRenderingMode: DNDmlEffectsRenderingMode;
    procedure set_DmlEffectsRenderingMode(value: DNDmlEffectsRenderingMode);
    function get_ImlRenderingMode: DNImlRenderingMode;
    procedure set_ImlRenderingMode(value: DNImlRenderingMode);
    function get_DefaultTemplate: string;
    procedure set_DefaultTemplate(value: string);
    function get_UpdateFields: Boolean;
    procedure set_UpdateFields(value: Boolean);
    function get_UpdateLastSavedTimeProperty: Boolean;
    procedure set_UpdateLastSavedTimeProperty(value: Boolean);
    function get_UpdateLastPrintedProperty: Boolean;
    procedure set_UpdateLastPrintedProperty(value: Boolean);
    function get_UpdateCreatedTimeProperty: Boolean;
    procedure set_UpdateCreatedTimeProperty(value: Boolean);
    function get_MemoryOptimization: Boolean;
    procedure set_MemoryOptimization(value: Boolean);
    function get_Dml3DEffectsRenderingMode: DNDml3DEffectsRenderingMode;
    procedure set_Dml3DEffectsRenderingMode(value: DNDml3DEffectsRenderingMode);
    function get_AllowEmbeddingPostScriptFonts: Boolean;
    procedure set_AllowEmbeddingPostScriptFonts(value: Boolean);
    function get_CustomTimeZoneInfo: DDN.mscorlib.DNTimeZoneInfo;
    procedure set_CustomTimeZoneInfo(value: DDN.mscorlib.DNTimeZoneInfo);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property SaveFormat: DNSaveFormat read get_SaveFormat write set_SaveFormat;
    property OutlineOptions: DNOutlineOptions read get_OutlineOptions;
    property UseBookFoldPrintingSettings: Boolean read get_UseBookFoldPrintingSettings write set_UseBookFoldPrintingSettings;
    property PageSet: DNPageSet read get_PageSet write set_PageSet;
    property PageSavingCallback: DNIPageSavingCallback read get_PageSavingCallback write set_PageSavingCallback;
    property NumeralFormat: DNNumeralFormat read get_NumeralFormat write set_NumeralFormat;
    property MetafileRenderingOptions: DNMetafileRenderingOptions read get_MetafileRenderingOptions write set_MetafileRenderingOptions;
    property JpegQuality: Int32 read get_JpegQuality write set_JpegQuality;
    property ColorMode: DNColorMode read get_ColorMode write set_ColorMode;
    property OptimizeOutput: Boolean read get_OptimizeOutput write set_OptimizeOutput;
    property TempFolder: string read get_TempFolder write set_TempFolder;
    property PrettyFormat: Boolean read get_PrettyFormat write set_PrettyFormat;
    property UseAntiAliasing: Boolean read get_UseAntiAliasing write set_UseAntiAliasing;
    property UseHighQualityRendering: Boolean read get_UseHighQualityRendering write set_UseHighQualityRendering;
    property UpdateSdtContent: Boolean read get_UpdateSdtContent write set_UpdateSdtContent;
    property DmlRenderingMode: DNDmlRenderingMode read get_DmlRenderingMode write set_DmlRenderingMode;
    property DmlEffectsRenderingMode: DNDmlEffectsRenderingMode read get_DmlEffectsRenderingMode write set_DmlEffectsRenderingMode;
    property ImlRenderingMode: DNImlRenderingMode read get_ImlRenderingMode write set_ImlRenderingMode;
    property DefaultTemplate: string read get_DefaultTemplate write set_DefaultTemplate;
    property UpdateFields: Boolean read get_UpdateFields write set_UpdateFields;
    property UpdateLastSavedTimeProperty: Boolean read get_UpdateLastSavedTimeProperty write set_UpdateLastSavedTimeProperty;
    property UpdateLastPrintedProperty: Boolean read get_UpdateLastPrintedProperty write set_UpdateLastPrintedProperty;
    property UpdateCreatedTimeProperty: Boolean read get_UpdateCreatedTimeProperty write set_UpdateCreatedTimeProperty;
    property MemoryOptimization: Boolean read get_MemoryOptimization write set_MemoryOptimization;
    property Dml3DEffectsRenderingMode: DNDml3DEffectsRenderingMode read get_Dml3DEffectsRenderingMode write set_Dml3DEffectsRenderingMode;
    property AllowEmbeddingPostScriptFonts: Boolean read get_AllowEmbeddingPostScriptFonts write set_AllowEmbeddingPostScriptFonts;
    property CustomTimeZoneInfo: DDN.mscorlib.DNTimeZoneInfo read get_CustomTimeZoneInfo write set_CustomTimeZoneInfo;
  end;

  TDNXpsSaveOptions = class(TDNGenericImport<DNXpsSaveOptionsClass, DNXpsSaveOptions>) end;

  //-------------namespace: Aspose.Words.Saving----------------
  DNHtmlSaveOptionsClass = interface(DNSaveOptionsClass)
  ['{4A46DB8B-5958-5873-A8B1-D31B03D3AA8C}']
  { constructors } 

    {class} function init: DNHtmlSaveOptions; overload;
    {class} function init(saveFormat: DNSaveFormat): DNHtmlSaveOptions; overload;

  end;

  [DNTypeName('Aspose.Words.Saving.HtmlSaveOptions')]
  DNHtmlSaveOptions = interface(DNSaveOptions)
  ['{5BA53B75-29CD-307A-B2A1-76B33A8C3D0B}']
  { getters & setters } 

    function get_SaveFormat: DNSaveFormat;
    procedure set_SaveFormat(value: DNSaveFormat);
    function get_AllowNegativeIndent: Boolean;
    procedure set_AllowNegativeIndent(value: Boolean);
    function get_CssStyleSheetFileName: string;
    procedure set_CssStyleSheetFileName(value: string);
    function get_CssStyleSheetType: DNCssStyleSheetType;
    procedure set_CssStyleSheetType(value: DNCssStyleSheetType);
    function get_CssClassNamePrefix: string;
    procedure set_CssClassNamePrefix(value: string);
    function get_DocumentPartSavingCallback: DNIDocumentPartSavingCallback;
    procedure set_DocumentPartSavingCallback(value: DNIDocumentPartSavingCallback);
    function get_CssSavingCallback: DNICssSavingCallback;
    procedure set_CssSavingCallback(value: DNICssSavingCallback);
    function get_DocumentSplitCriteria: DNDocumentSplitCriteria;
    procedure set_DocumentSplitCriteria(value: DNDocumentSplitCriteria);
    function get_DocumentSplitHeadingLevel: Int32;
    procedure set_DocumentSplitHeadingLevel(value: Int32);
    function get_Encoding: DDN.mscorlib.DNEncoding;
    procedure set_Encoding(value: DDN.mscorlib.DNEncoding);
    function get_EpubNavigationMapLevel: Int32;
    procedure set_EpubNavigationMapLevel(value: Int32);
    function get_ExportDocumentProperties: Boolean;
    procedure set_ExportDocumentProperties(value: Boolean);
    function get_ExportFontResources: Boolean;
    procedure set_ExportFontResources(value: Boolean);
    function get_ExportFontsAsBase64: Boolean;
    procedure set_ExportFontsAsBase64(value: Boolean);
    function get_ExportHeadersFootersMode: DNExportHeadersFootersMode;
    procedure set_ExportHeadersFootersMode(value: DNExportHeadersFootersMode);
    function get_ExportImagesAsBase64: Boolean;
    procedure set_ExportImagesAsBase64(value: Boolean);
    function get_ExportLanguageInformation: Boolean;
    procedure set_ExportLanguageInformation(value: Boolean);
    function get_ExportListLabels: DNExportListLabels;
    procedure set_ExportListLabels(value: DNExportListLabels);
    function get_MetafileFormat: DNHtmlMetafileFormat;
    procedure set_MetafileFormat(value: DNHtmlMetafileFormat);
    function get_ExportPageSetup: Boolean;
    procedure set_ExportPageSetup(value: Boolean);
    function get_ExportPageMargins: Boolean;
    procedure set_ExportPageMargins(value: Boolean);
    function get_ExportRelativeFontSize: Boolean;
    procedure set_ExportRelativeFontSize(value: Boolean);
    function get_ExportTextInputFormFieldAsText: Boolean;
    procedure set_ExportTextInputFormFieldAsText(value: Boolean);
    function get_ExportTextBoxAsSvg: Boolean;
    procedure set_ExportTextBoxAsSvg(value: Boolean);
    function get_ExportDropDownFormFieldAsText: Boolean;
    procedure set_ExportDropDownFormFieldAsText(value: Boolean);
    function get_ExportTocPageNumbers: Boolean;
    procedure set_ExportTocPageNumbers(value: Boolean);
    function get_ExportXhtmlTransitional: Boolean;
    procedure set_ExportXhtmlTransitional(value: Boolean);
    function get_HtmlVersion: DNHtmlVersion;
    procedure set_HtmlVersion(value: DNHtmlVersion);
    function get_ExportRoundtripInformation: Boolean;
    procedure set_ExportRoundtripInformation(value: Boolean);
    function get_ResourceFolder: string;
    procedure set_ResourceFolder(value: string);
    function get_ResourceFolderAlias: string;
    procedure set_ResourceFolderAlias(value: string);
    function get_FontsFolder: string;
    procedure set_FontsFolder(value: string);
    function get_FontsFolderAlias: string;
    procedure set_FontsFolderAlias(value: string);
    function get_FontResourcesSubsettingSizeThreshold: Int32;
    procedure set_FontResourcesSubsettingSizeThreshold(value: Int32);
    function get_FontSavingCallback: DNIFontSavingCallback;
    procedure set_FontSavingCallback(value: DNIFontSavingCallback);
    function get_ImagesFolder: string;
    procedure set_ImagesFolder(value: string);
    function get_ImagesFolderAlias: string;
    procedure set_ImagesFolderAlias(value: string);
    function get_ImageResolution: Int32;
    procedure set_ImageResolution(value: Int32);
    function get_ImageSavingCallback: DNIImageSavingCallback;
    procedure set_ImageSavingCallback(value: DNIImageSavingCallback);
    function get_ScaleImageToShapeSize: Boolean;
    procedure set_ScaleImageToShapeSize(value: Boolean);
    function get_TableWidthOutputMode: DNHtmlElementSizeOutputMode;
    procedure set_TableWidthOutputMode(value: DNHtmlElementSizeOutputMode);
    function get_OfficeMathOutputMode: DNHtmlOfficeMathOutputMode;
    procedure set_OfficeMathOutputMode(value: DNHtmlOfficeMathOutputMode);
    function get_ExportOriginalUrlForLinkedImages: Boolean;
    procedure set_ExportOriginalUrlForLinkedImages(value: Boolean);
    function get_ExportCidUrlsForMhtmlResources: Boolean;
    procedure set_ExportCidUrlsForMhtmlResources(value: Boolean);
    function get_ResolveFontNames: Boolean;
    procedure set_ResolveFontNames(value: Boolean);
    function get_TempFolder: string;
    procedure set_TempFolder(value: string);
    function get_PrettyFormat: Boolean;
    procedure set_PrettyFormat(value: Boolean);
    function get_UseAntiAliasing: Boolean;
    procedure set_UseAntiAliasing(value: Boolean);
    function get_UseHighQualityRendering: Boolean;
    procedure set_UseHighQualityRendering(value: Boolean);
    function get_UpdateSdtContent: Boolean;
    procedure set_UpdateSdtContent(value: Boolean);
    function get_DmlRenderingMode: DNDmlRenderingMode;
    procedure set_DmlRenderingMode(value: DNDmlRenderingMode);
    function get_DmlEffectsRenderingMode: DNDmlEffectsRenderingMode;
    procedure set_DmlEffectsRenderingMode(value: DNDmlEffectsRenderingMode);
    function get_ImlRenderingMode: DNImlRenderingMode;
    procedure set_ImlRenderingMode(value: DNImlRenderingMode);
    function get_DefaultTemplate: string;
    procedure set_DefaultTemplate(value: string);
    function get_UpdateFields: Boolean;
    procedure set_UpdateFields(value: Boolean);
    function get_UpdateLastSavedTimeProperty: Boolean;
    procedure set_UpdateLastSavedTimeProperty(value: Boolean);
    function get_UpdateLastPrintedProperty: Boolean;
    procedure set_UpdateLastPrintedProperty(value: Boolean);
    function get_UpdateCreatedTimeProperty: Boolean;
    procedure set_UpdateCreatedTimeProperty(value: Boolean);
    function get_MemoryOptimization: Boolean;
    procedure set_MemoryOptimization(value: Boolean);
    function get_Dml3DEffectsRenderingMode: DNDml3DEffectsRenderingMode;
    procedure set_Dml3DEffectsRenderingMode(value: DNDml3DEffectsRenderingMode);
    function get_AllowEmbeddingPostScriptFonts: Boolean;
    procedure set_AllowEmbeddingPostScriptFonts(value: Boolean);
    function get_CustomTimeZoneInfo: DDN.mscorlib.DNTimeZoneInfo;
    procedure set_CustomTimeZoneInfo(value: DDN.mscorlib.DNTimeZoneInfo);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property SaveFormat: DNSaveFormat read get_SaveFormat write set_SaveFormat;
    property AllowNegativeIndent: Boolean read get_AllowNegativeIndent write set_AllowNegativeIndent;
    property CssStyleSheetFileName: string read get_CssStyleSheetFileName write set_CssStyleSheetFileName;
    property CssStyleSheetType: DNCssStyleSheetType read get_CssStyleSheetType write set_CssStyleSheetType;
    property CssClassNamePrefix: string read get_CssClassNamePrefix write set_CssClassNamePrefix;
    property DocumentPartSavingCallback: DNIDocumentPartSavingCallback read get_DocumentPartSavingCallback write set_DocumentPartSavingCallback;
    property CssSavingCallback: DNICssSavingCallback read get_CssSavingCallback write set_CssSavingCallback;
    property DocumentSplitCriteria: DNDocumentSplitCriteria read get_DocumentSplitCriteria write set_DocumentSplitCriteria;
    property DocumentSplitHeadingLevel: Int32 read get_DocumentSplitHeadingLevel write set_DocumentSplitHeadingLevel;
    property Encoding: DDN.mscorlib.DNEncoding read get_Encoding write set_Encoding;
    property EpubNavigationMapLevel: Int32 read get_EpubNavigationMapLevel write set_EpubNavigationMapLevel;
    property ExportDocumentProperties: Boolean read get_ExportDocumentProperties write set_ExportDocumentProperties;
    property ExportFontResources: Boolean read get_ExportFontResources write set_ExportFontResources;
    property ExportFontsAsBase64: Boolean read get_ExportFontsAsBase64 write set_ExportFontsAsBase64;
    property ExportHeadersFootersMode: DNExportHeadersFootersMode read get_ExportHeadersFootersMode write set_ExportHeadersFootersMode;
    property ExportImagesAsBase64: Boolean read get_ExportImagesAsBase64 write set_ExportImagesAsBase64;
    property ExportLanguageInformation: Boolean read get_ExportLanguageInformation write set_ExportLanguageInformation;
    property ExportListLabels: DNExportListLabels read get_ExportListLabels write set_ExportListLabels;
    property MetafileFormat: DNHtmlMetafileFormat read get_MetafileFormat write set_MetafileFormat;
    property ExportPageSetup: Boolean read get_ExportPageSetup write set_ExportPageSetup;
    property ExportPageMargins: Boolean read get_ExportPageMargins write set_ExportPageMargins;
    property ExportRelativeFontSize: Boolean read get_ExportRelativeFontSize write set_ExportRelativeFontSize;
    property ExportTextInputFormFieldAsText: Boolean read get_ExportTextInputFormFieldAsText write set_ExportTextInputFormFieldAsText;
    property ExportTextBoxAsSvg: Boolean read get_ExportTextBoxAsSvg write set_ExportTextBoxAsSvg;
    property ExportDropDownFormFieldAsText: Boolean read get_ExportDropDownFormFieldAsText write set_ExportDropDownFormFieldAsText;
    property ExportTocPageNumbers: Boolean read get_ExportTocPageNumbers write set_ExportTocPageNumbers;
    property ExportXhtmlTransitional: Boolean read get_ExportXhtmlTransitional write set_ExportXhtmlTransitional;
    property HtmlVersion: DNHtmlVersion read get_HtmlVersion write set_HtmlVersion;
    property ExportRoundtripInformation: Boolean read get_ExportRoundtripInformation write set_ExportRoundtripInformation;
    property ResourceFolder: string read get_ResourceFolder write set_ResourceFolder;
    property ResourceFolderAlias: string read get_ResourceFolderAlias write set_ResourceFolderAlias;
    property FontsFolder: string read get_FontsFolder write set_FontsFolder;
    property FontsFolderAlias: string read get_FontsFolderAlias write set_FontsFolderAlias;
    property FontResourcesSubsettingSizeThreshold: Int32 read get_FontResourcesSubsettingSizeThreshold write set_FontResourcesSubsettingSizeThreshold;
    property FontSavingCallback: DNIFontSavingCallback read get_FontSavingCallback write set_FontSavingCallback;
    property ImagesFolder: string read get_ImagesFolder write set_ImagesFolder;
    property ImagesFolderAlias: string read get_ImagesFolderAlias write set_ImagesFolderAlias;
    property ImageResolution: Int32 read get_ImageResolution write set_ImageResolution;
    property ImageSavingCallback: DNIImageSavingCallback read get_ImageSavingCallback write set_ImageSavingCallback;
    property ScaleImageToShapeSize: Boolean read get_ScaleImageToShapeSize write set_ScaleImageToShapeSize;
    property TableWidthOutputMode: DNHtmlElementSizeOutputMode read get_TableWidthOutputMode write set_TableWidthOutputMode;
    property OfficeMathOutputMode: DNHtmlOfficeMathOutputMode read get_OfficeMathOutputMode write set_OfficeMathOutputMode;
    property ExportOriginalUrlForLinkedImages: Boolean read get_ExportOriginalUrlForLinkedImages write set_ExportOriginalUrlForLinkedImages;
    property ExportCidUrlsForMhtmlResources: Boolean read get_ExportCidUrlsForMhtmlResources write set_ExportCidUrlsForMhtmlResources;
    property ResolveFontNames: Boolean read get_ResolveFontNames write set_ResolveFontNames;
    property TempFolder: string read get_TempFolder write set_TempFolder;
    property PrettyFormat: Boolean read get_PrettyFormat write set_PrettyFormat;
    property UseAntiAliasing: Boolean read get_UseAntiAliasing write set_UseAntiAliasing;
    property UseHighQualityRendering: Boolean read get_UseHighQualityRendering write set_UseHighQualityRendering;
    property UpdateSdtContent: Boolean read get_UpdateSdtContent write set_UpdateSdtContent;
    property DmlRenderingMode: DNDmlRenderingMode read get_DmlRenderingMode write set_DmlRenderingMode;
    property DmlEffectsRenderingMode: DNDmlEffectsRenderingMode read get_DmlEffectsRenderingMode write set_DmlEffectsRenderingMode;
    property ImlRenderingMode: DNImlRenderingMode read get_ImlRenderingMode write set_ImlRenderingMode;
    property DefaultTemplate: string read get_DefaultTemplate write set_DefaultTemplate;
    property UpdateFields: Boolean read get_UpdateFields write set_UpdateFields;
    property UpdateLastSavedTimeProperty: Boolean read get_UpdateLastSavedTimeProperty write set_UpdateLastSavedTimeProperty;
    property UpdateLastPrintedProperty: Boolean read get_UpdateLastPrintedProperty write set_UpdateLastPrintedProperty;
    property UpdateCreatedTimeProperty: Boolean read get_UpdateCreatedTimeProperty write set_UpdateCreatedTimeProperty;
    property MemoryOptimization: Boolean read get_MemoryOptimization write set_MemoryOptimization;
    property Dml3DEffectsRenderingMode: DNDml3DEffectsRenderingMode read get_Dml3DEffectsRenderingMode write set_Dml3DEffectsRenderingMode;
    property AllowEmbeddingPostScriptFonts: Boolean read get_AllowEmbeddingPostScriptFonts write set_AllowEmbeddingPostScriptFonts;
    property CustomTimeZoneInfo: DDN.mscorlib.DNTimeZoneInfo read get_CustomTimeZoneInfo write set_CustomTimeZoneInfo;
  end;

  TDNHtmlSaveOptions = class(TDNGenericImport<DNHtmlSaveOptionsClass, DNHtmlSaveOptions>) end;

  //-------------namespace: Aspose.Words.Saving----------------
  DNOdtSaveOptionsClass = interface(DNSaveOptionsClass)
  ['{75683997-3815-55F4-98A7-597A73882305}']
  { constructors } 

    {class} function init: DNOdtSaveOptions; overload;
    {class} function init(password: string): DNOdtSaveOptions; overload;
    {class} function init(saveFormat: DNSaveFormat): DNOdtSaveOptions; overload;

  end;

  [DNTypeName('Aspose.Words.Saving.OdtSaveOptions')]
  DNOdtSaveOptions = interface(DNSaveOptions)
  ['{09AB98A9-13A3-3E80-A59E-3F39E4B5F079}']
  { getters & setters } 

    function get_SaveFormat: DNSaveFormat;
    procedure set_SaveFormat(value: DNSaveFormat);
    function get_IsStrictSchema11: Boolean;
    procedure set_IsStrictSchema11(value: Boolean);
    function get_MeasureUnit: DNOdtSaveMeasureUnit;
    procedure set_MeasureUnit(value: DNOdtSaveMeasureUnit);
    function get_Password: string;
    procedure set_Password(value: string);
    function get_TempFolder: string;
    procedure set_TempFolder(value: string);
    function get_PrettyFormat: Boolean;
    procedure set_PrettyFormat(value: Boolean);
    function get_UseAntiAliasing: Boolean;
    procedure set_UseAntiAliasing(value: Boolean);
    function get_UseHighQualityRendering: Boolean;
    procedure set_UseHighQualityRendering(value: Boolean);
    function get_UpdateSdtContent: Boolean;
    procedure set_UpdateSdtContent(value: Boolean);
    function get_DmlRenderingMode: DNDmlRenderingMode;
    procedure set_DmlRenderingMode(value: DNDmlRenderingMode);
    function get_DmlEffectsRenderingMode: DNDmlEffectsRenderingMode;
    procedure set_DmlEffectsRenderingMode(value: DNDmlEffectsRenderingMode);
    function get_ImlRenderingMode: DNImlRenderingMode;
    procedure set_ImlRenderingMode(value: DNImlRenderingMode);
    function get_DefaultTemplate: string;
    procedure set_DefaultTemplate(value: string);
    function get_UpdateFields: Boolean;
    procedure set_UpdateFields(value: Boolean);
    function get_UpdateLastSavedTimeProperty: Boolean;
    procedure set_UpdateLastSavedTimeProperty(value: Boolean);
    function get_UpdateLastPrintedProperty: Boolean;
    procedure set_UpdateLastPrintedProperty(value: Boolean);
    function get_UpdateCreatedTimeProperty: Boolean;
    procedure set_UpdateCreatedTimeProperty(value: Boolean);
    function get_MemoryOptimization: Boolean;
    procedure set_MemoryOptimization(value: Boolean);
    function get_Dml3DEffectsRenderingMode: DNDml3DEffectsRenderingMode;
    procedure set_Dml3DEffectsRenderingMode(value: DNDml3DEffectsRenderingMode);
    function get_AllowEmbeddingPostScriptFonts: Boolean;
    procedure set_AllowEmbeddingPostScriptFonts(value: Boolean);
    function get_CustomTimeZoneInfo: DDN.mscorlib.DNTimeZoneInfo;
    procedure set_CustomTimeZoneInfo(value: DDN.mscorlib.DNTimeZoneInfo);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property SaveFormat: DNSaveFormat read get_SaveFormat write set_SaveFormat;
    property IsStrictSchema11: Boolean read get_IsStrictSchema11 write set_IsStrictSchema11;
    property MeasureUnit: DNOdtSaveMeasureUnit read get_MeasureUnit write set_MeasureUnit;
    property Password: string read get_Password write set_Password;
    property TempFolder: string read get_TempFolder write set_TempFolder;
    property PrettyFormat: Boolean read get_PrettyFormat write set_PrettyFormat;
    property UseAntiAliasing: Boolean read get_UseAntiAliasing write set_UseAntiAliasing;
    property UseHighQualityRendering: Boolean read get_UseHighQualityRendering write set_UseHighQualityRendering;
    property UpdateSdtContent: Boolean read get_UpdateSdtContent write set_UpdateSdtContent;
    property DmlRenderingMode: DNDmlRenderingMode read get_DmlRenderingMode write set_DmlRenderingMode;
    property DmlEffectsRenderingMode: DNDmlEffectsRenderingMode read get_DmlEffectsRenderingMode write set_DmlEffectsRenderingMode;
    property ImlRenderingMode: DNImlRenderingMode read get_ImlRenderingMode write set_ImlRenderingMode;
    property DefaultTemplate: string read get_DefaultTemplate write set_DefaultTemplate;
    property UpdateFields: Boolean read get_UpdateFields write set_UpdateFields;
    property UpdateLastSavedTimeProperty: Boolean read get_UpdateLastSavedTimeProperty write set_UpdateLastSavedTimeProperty;
    property UpdateLastPrintedProperty: Boolean read get_UpdateLastPrintedProperty write set_UpdateLastPrintedProperty;
    property UpdateCreatedTimeProperty: Boolean read get_UpdateCreatedTimeProperty write set_UpdateCreatedTimeProperty;
    property MemoryOptimization: Boolean read get_MemoryOptimization write set_MemoryOptimization;
    property Dml3DEffectsRenderingMode: DNDml3DEffectsRenderingMode read get_Dml3DEffectsRenderingMode write set_Dml3DEffectsRenderingMode;
    property AllowEmbeddingPostScriptFonts: Boolean read get_AllowEmbeddingPostScriptFonts write set_AllowEmbeddingPostScriptFonts;
    property CustomTimeZoneInfo: DDN.mscorlib.DNTimeZoneInfo read get_CustomTimeZoneInfo write set_CustomTimeZoneInfo;
  end;

  TDNOdtSaveOptions = class(TDNGenericImport<DNOdtSaveOptionsClass, DNOdtSaveOptions>) end;

  //-------------namespace: Aspose.Words.Saving----------------
  DNOoxmlSaveOptionsClass = interface(DNSaveOptionsClass)
  ['{BE828524-9605-53E2-8442-E060CE18CD06}']
  { constructors } 

    {class} function init: DNOoxmlSaveOptions; overload;
    {class} function init(saveFormat: DNSaveFormat): DNOoxmlSaveOptions; overload;

  end;

  [DNTypeName('Aspose.Words.Saving.OoxmlSaveOptions')]
  DNOoxmlSaveOptions = interface(DNSaveOptions)
  ['{08F4DD51-9EF3-352B-9A40-EB99CF50EE43}']
  { getters & setters } 

    function get_SaveFormat: DNSaveFormat;
    procedure set_SaveFormat(value: DNSaveFormat);
    function get_Password: string;
    procedure set_Password(value: string);
    function get_Compliance: DNOoxmlCompliance;
    procedure set_Compliance(value: DNOoxmlCompliance);
    function get_KeepLegacyControlChars: Boolean;
    procedure set_KeepLegacyControlChars(value: Boolean);
    function get_CompressionLevel: DNCompressionLevel;
    procedure set_CompressionLevel(value: DNCompressionLevel);
    function get_TempFolder: string;
    procedure set_TempFolder(value: string);
    function get_PrettyFormat: Boolean;
    procedure set_PrettyFormat(value: Boolean);
    function get_UseAntiAliasing: Boolean;
    procedure set_UseAntiAliasing(value: Boolean);
    function get_UseHighQualityRendering: Boolean;
    procedure set_UseHighQualityRendering(value: Boolean);
    function get_UpdateSdtContent: Boolean;
    procedure set_UpdateSdtContent(value: Boolean);
    function get_DmlRenderingMode: DNDmlRenderingMode;
    procedure set_DmlRenderingMode(value: DNDmlRenderingMode);
    function get_DmlEffectsRenderingMode: DNDmlEffectsRenderingMode;
    procedure set_DmlEffectsRenderingMode(value: DNDmlEffectsRenderingMode);
    function get_ImlRenderingMode: DNImlRenderingMode;
    procedure set_ImlRenderingMode(value: DNImlRenderingMode);
    function get_DefaultTemplate: string;
    procedure set_DefaultTemplate(value: string);
    function get_UpdateFields: Boolean;
    procedure set_UpdateFields(value: Boolean);
    function get_UpdateLastSavedTimeProperty: Boolean;
    procedure set_UpdateLastSavedTimeProperty(value: Boolean);
    function get_UpdateLastPrintedProperty: Boolean;
    procedure set_UpdateLastPrintedProperty(value: Boolean);
    function get_UpdateCreatedTimeProperty: Boolean;
    procedure set_UpdateCreatedTimeProperty(value: Boolean);
    function get_MemoryOptimization: Boolean;
    procedure set_MemoryOptimization(value: Boolean);
    function get_Dml3DEffectsRenderingMode: DNDml3DEffectsRenderingMode;
    procedure set_Dml3DEffectsRenderingMode(value: DNDml3DEffectsRenderingMode);
    function get_AllowEmbeddingPostScriptFonts: Boolean;
    procedure set_AllowEmbeddingPostScriptFonts(value: Boolean);
    function get_CustomTimeZoneInfo: DDN.mscorlib.DNTimeZoneInfo;
    procedure set_CustomTimeZoneInfo(value: DDN.mscorlib.DNTimeZoneInfo);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property SaveFormat: DNSaveFormat read get_SaveFormat write set_SaveFormat;
    property Password: string read get_Password write set_Password;
    property Compliance: DNOoxmlCompliance read get_Compliance write set_Compliance;
    property KeepLegacyControlChars: Boolean read get_KeepLegacyControlChars write set_KeepLegacyControlChars;
    property CompressionLevel: DNCompressionLevel read get_CompressionLevel write set_CompressionLevel;
    property TempFolder: string read get_TempFolder write set_TempFolder;
    property PrettyFormat: Boolean read get_PrettyFormat write set_PrettyFormat;
    property UseAntiAliasing: Boolean read get_UseAntiAliasing write set_UseAntiAliasing;
    property UseHighQualityRendering: Boolean read get_UseHighQualityRendering write set_UseHighQualityRendering;
    property UpdateSdtContent: Boolean read get_UpdateSdtContent write set_UpdateSdtContent;
    property DmlRenderingMode: DNDmlRenderingMode read get_DmlRenderingMode write set_DmlRenderingMode;
    property DmlEffectsRenderingMode: DNDmlEffectsRenderingMode read get_DmlEffectsRenderingMode write set_DmlEffectsRenderingMode;
    property ImlRenderingMode: DNImlRenderingMode read get_ImlRenderingMode write set_ImlRenderingMode;
    property DefaultTemplate: string read get_DefaultTemplate write set_DefaultTemplate;
    property UpdateFields: Boolean read get_UpdateFields write set_UpdateFields;
    property UpdateLastSavedTimeProperty: Boolean read get_UpdateLastSavedTimeProperty write set_UpdateLastSavedTimeProperty;
    property UpdateLastPrintedProperty: Boolean read get_UpdateLastPrintedProperty write set_UpdateLastPrintedProperty;
    property UpdateCreatedTimeProperty: Boolean read get_UpdateCreatedTimeProperty write set_UpdateCreatedTimeProperty;
    property MemoryOptimization: Boolean read get_MemoryOptimization write set_MemoryOptimization;
    property Dml3DEffectsRenderingMode: DNDml3DEffectsRenderingMode read get_Dml3DEffectsRenderingMode write set_Dml3DEffectsRenderingMode;
    property AllowEmbeddingPostScriptFonts: Boolean read get_AllowEmbeddingPostScriptFonts write set_AllowEmbeddingPostScriptFonts;
    property CustomTimeZoneInfo: DDN.mscorlib.DNTimeZoneInfo read get_CustomTimeZoneInfo write set_CustomTimeZoneInfo;
  end;

  TDNOoxmlSaveOptions = class(TDNGenericImport<DNOoxmlSaveOptionsClass, DNOoxmlSaveOptions>) end;

  //-------------namespace: Aspose.Words.Saving----------------
  DNRtfSaveOptionsClass = interface(DNSaveOptionsClass)
  ['{8CED6F30-9AB5-50D1-8DF3-BDA123BEFCD1}']
  { constructors } 

    {class} function init: DNRtfSaveOptions;

  end;

  [DNTypeName('Aspose.Words.Saving.RtfSaveOptions')]
  DNRtfSaveOptions = interface(DNSaveOptions)
  ['{08719B96-9A2E-38BD-A0DE-CE64A3F2C642}']
  { getters & setters } 

    function get_SaveFormat: DNSaveFormat;
    procedure set_SaveFormat(value: DNSaveFormat);
    function get_ExportCompactSize: Boolean;
    procedure set_ExportCompactSize(value: Boolean);
    function get_ExportImagesForOldReaders: Boolean;
    procedure set_ExportImagesForOldReaders(value: Boolean);
    function get_SaveImagesAsWmf: Boolean;
    procedure set_SaveImagesAsWmf(value: Boolean);
    function get_TempFolder: string;
    procedure set_TempFolder(value: string);
    function get_PrettyFormat: Boolean;
    procedure set_PrettyFormat(value: Boolean);
    function get_UseAntiAliasing: Boolean;
    procedure set_UseAntiAliasing(value: Boolean);
    function get_UseHighQualityRendering: Boolean;
    procedure set_UseHighQualityRendering(value: Boolean);
    function get_UpdateSdtContent: Boolean;
    procedure set_UpdateSdtContent(value: Boolean);
    function get_DmlRenderingMode: DNDmlRenderingMode;
    procedure set_DmlRenderingMode(value: DNDmlRenderingMode);
    function get_DmlEffectsRenderingMode: DNDmlEffectsRenderingMode;
    procedure set_DmlEffectsRenderingMode(value: DNDmlEffectsRenderingMode);
    function get_ImlRenderingMode: DNImlRenderingMode;
    procedure set_ImlRenderingMode(value: DNImlRenderingMode);
    function get_DefaultTemplate: string;
    procedure set_DefaultTemplate(value: string);
    function get_UpdateFields: Boolean;
    procedure set_UpdateFields(value: Boolean);
    function get_UpdateLastSavedTimeProperty: Boolean;
    procedure set_UpdateLastSavedTimeProperty(value: Boolean);
    function get_UpdateLastPrintedProperty: Boolean;
    procedure set_UpdateLastPrintedProperty(value: Boolean);
    function get_UpdateCreatedTimeProperty: Boolean;
    procedure set_UpdateCreatedTimeProperty(value: Boolean);
    function get_MemoryOptimization: Boolean;
    procedure set_MemoryOptimization(value: Boolean);
    function get_Dml3DEffectsRenderingMode: DNDml3DEffectsRenderingMode;
    procedure set_Dml3DEffectsRenderingMode(value: DNDml3DEffectsRenderingMode);
    function get_AllowEmbeddingPostScriptFonts: Boolean;
    procedure set_AllowEmbeddingPostScriptFonts(value: Boolean);
    function get_CustomTimeZoneInfo: DDN.mscorlib.DNTimeZoneInfo;
    procedure set_CustomTimeZoneInfo(value: DDN.mscorlib.DNTimeZoneInfo);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property SaveFormat: DNSaveFormat read get_SaveFormat write set_SaveFormat;
    property ExportCompactSize: Boolean read get_ExportCompactSize write set_ExportCompactSize;
    property ExportImagesForOldReaders: Boolean read get_ExportImagesForOldReaders write set_ExportImagesForOldReaders;
    property SaveImagesAsWmf: Boolean read get_SaveImagesAsWmf write set_SaveImagesAsWmf;
    property TempFolder: string read get_TempFolder write set_TempFolder;
    property PrettyFormat: Boolean read get_PrettyFormat write set_PrettyFormat;
    property UseAntiAliasing: Boolean read get_UseAntiAliasing write set_UseAntiAliasing;
    property UseHighQualityRendering: Boolean read get_UseHighQualityRendering write set_UseHighQualityRendering;
    property UpdateSdtContent: Boolean read get_UpdateSdtContent write set_UpdateSdtContent;
    property DmlRenderingMode: DNDmlRenderingMode read get_DmlRenderingMode write set_DmlRenderingMode;
    property DmlEffectsRenderingMode: DNDmlEffectsRenderingMode read get_DmlEffectsRenderingMode write set_DmlEffectsRenderingMode;
    property ImlRenderingMode: DNImlRenderingMode read get_ImlRenderingMode write set_ImlRenderingMode;
    property DefaultTemplate: string read get_DefaultTemplate write set_DefaultTemplate;
    property UpdateFields: Boolean read get_UpdateFields write set_UpdateFields;
    property UpdateLastSavedTimeProperty: Boolean read get_UpdateLastSavedTimeProperty write set_UpdateLastSavedTimeProperty;
    property UpdateLastPrintedProperty: Boolean read get_UpdateLastPrintedProperty write set_UpdateLastPrintedProperty;
    property UpdateCreatedTimeProperty: Boolean read get_UpdateCreatedTimeProperty write set_UpdateCreatedTimeProperty;
    property MemoryOptimization: Boolean read get_MemoryOptimization write set_MemoryOptimization;
    property Dml3DEffectsRenderingMode: DNDml3DEffectsRenderingMode read get_Dml3DEffectsRenderingMode write set_Dml3DEffectsRenderingMode;
    property AllowEmbeddingPostScriptFonts: Boolean read get_AllowEmbeddingPostScriptFonts write set_AllowEmbeddingPostScriptFonts;
    property CustomTimeZoneInfo: DDN.mscorlib.DNTimeZoneInfo read get_CustomTimeZoneInfo write set_CustomTimeZoneInfo;
  end;

  TDNRtfSaveOptions = class(TDNGenericImport<DNRtfSaveOptionsClass, DNRtfSaveOptions>) end;

  //-------------namespace: Aspose.Words.Saving----------------
  DNTxtSaveOptionsBaseClass = interface(DNSaveOptionsClass)
  ['{F6FCE2C2-6B84-515B-86E3-64796F81AD17}']
  end;

  [DNTypeName('Aspose.Words.Saving.TxtSaveOptionsBase')]
  DNTxtSaveOptionsBase = interface(DNSaveOptions)
  ['{B497D40F-3125-3EE8-9579-69422FDE9087}']
  { getters & setters } 

    function get_Encoding: DDN.mscorlib.DNEncoding;
    procedure set_Encoding(value: DDN.mscorlib.DNEncoding);
    function get_ParagraphBreak: string;
    procedure set_ParagraphBreak(value: string);
    function get_ForcePageBreaks: Boolean;
    procedure set_ForcePageBreaks(value: Boolean);
    function get_ExportHeadersFootersMode: DNTxtExportHeadersFootersMode;
    procedure set_ExportHeadersFootersMode(value: DNTxtExportHeadersFootersMode);
    function get_SaveFormat: DNSaveFormat;
    procedure set_SaveFormat(value: DNSaveFormat);
    function get_TempFolder: string;
    procedure set_TempFolder(value: string);
    function get_PrettyFormat: Boolean;
    procedure set_PrettyFormat(value: Boolean);
    function get_UseAntiAliasing: Boolean;
    procedure set_UseAntiAliasing(value: Boolean);
    function get_UseHighQualityRendering: Boolean;
    procedure set_UseHighQualityRendering(value: Boolean);
    function get_UpdateSdtContent: Boolean;
    procedure set_UpdateSdtContent(value: Boolean);
    function get_DmlRenderingMode: DNDmlRenderingMode;
    procedure set_DmlRenderingMode(value: DNDmlRenderingMode);
    function get_DmlEffectsRenderingMode: DNDmlEffectsRenderingMode;
    procedure set_DmlEffectsRenderingMode(value: DNDmlEffectsRenderingMode);
    function get_ImlRenderingMode: DNImlRenderingMode;
    procedure set_ImlRenderingMode(value: DNImlRenderingMode);
    function get_DefaultTemplate: string;
    procedure set_DefaultTemplate(value: string);
    function get_UpdateFields: Boolean;
    procedure set_UpdateFields(value: Boolean);
    function get_UpdateLastSavedTimeProperty: Boolean;
    procedure set_UpdateLastSavedTimeProperty(value: Boolean);
    function get_UpdateLastPrintedProperty: Boolean;
    procedure set_UpdateLastPrintedProperty(value: Boolean);
    function get_UpdateCreatedTimeProperty: Boolean;
    procedure set_UpdateCreatedTimeProperty(value: Boolean);
    function get_MemoryOptimization: Boolean;
    procedure set_MemoryOptimization(value: Boolean);
    function get_Dml3DEffectsRenderingMode: DNDml3DEffectsRenderingMode;
    procedure set_Dml3DEffectsRenderingMode(value: DNDml3DEffectsRenderingMode);
    function get_AllowEmbeddingPostScriptFonts: Boolean;
    procedure set_AllowEmbeddingPostScriptFonts(value: Boolean);
    function get_CustomTimeZoneInfo: DDN.mscorlib.DNTimeZoneInfo;
    procedure set_CustomTimeZoneInfo(value: DDN.mscorlib.DNTimeZoneInfo);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Encoding: DDN.mscorlib.DNEncoding read get_Encoding write set_Encoding;
    property ParagraphBreak: string read get_ParagraphBreak write set_ParagraphBreak;
    property ForcePageBreaks: Boolean read get_ForcePageBreaks write set_ForcePageBreaks;
    property ExportHeadersFootersMode: DNTxtExportHeadersFootersMode read get_ExportHeadersFootersMode write set_ExportHeadersFootersMode;
    property SaveFormat: DNSaveFormat read get_SaveFormat write set_SaveFormat;
    property TempFolder: string read get_TempFolder write set_TempFolder;
    property PrettyFormat: Boolean read get_PrettyFormat write set_PrettyFormat;
    property UseAntiAliasing: Boolean read get_UseAntiAliasing write set_UseAntiAliasing;
    property UseHighQualityRendering: Boolean read get_UseHighQualityRendering write set_UseHighQualityRendering;
    property UpdateSdtContent: Boolean read get_UpdateSdtContent write set_UpdateSdtContent;
    property DmlRenderingMode: DNDmlRenderingMode read get_DmlRenderingMode write set_DmlRenderingMode;
    property DmlEffectsRenderingMode: DNDmlEffectsRenderingMode read get_DmlEffectsRenderingMode write set_DmlEffectsRenderingMode;
    property ImlRenderingMode: DNImlRenderingMode read get_ImlRenderingMode write set_ImlRenderingMode;
    property DefaultTemplate: string read get_DefaultTemplate write set_DefaultTemplate;
    property UpdateFields: Boolean read get_UpdateFields write set_UpdateFields;
    property UpdateLastSavedTimeProperty: Boolean read get_UpdateLastSavedTimeProperty write set_UpdateLastSavedTimeProperty;
    property UpdateLastPrintedProperty: Boolean read get_UpdateLastPrintedProperty write set_UpdateLastPrintedProperty;
    property UpdateCreatedTimeProperty: Boolean read get_UpdateCreatedTimeProperty write set_UpdateCreatedTimeProperty;
    property MemoryOptimization: Boolean read get_MemoryOptimization write set_MemoryOptimization;
    property Dml3DEffectsRenderingMode: DNDml3DEffectsRenderingMode read get_Dml3DEffectsRenderingMode write set_Dml3DEffectsRenderingMode;
    property AllowEmbeddingPostScriptFonts: Boolean read get_AllowEmbeddingPostScriptFonts write set_AllowEmbeddingPostScriptFonts;
    property CustomTimeZoneInfo: DDN.mscorlib.DNTimeZoneInfo read get_CustomTimeZoneInfo write set_CustomTimeZoneInfo;
  end;

  TDNTxtSaveOptionsBase = class(TDNGenericImport<DNTxtSaveOptionsBaseClass, DNTxtSaveOptionsBase>) end;

  //-------------namespace: Aspose.Words.Saving----------------
  DNMarkdownSaveOptionsClass = interface(DNTxtSaveOptionsBaseClass)
  ['{12040165-2CAD-51E9-A8E3-B145B55B2E88}']
  { constructors } 

    {class} function init: DNMarkdownSaveOptions;

  end;

  [DNTypeName('Aspose.Words.Saving.MarkdownSaveOptions')]
  DNMarkdownSaveOptions = interface(DNTxtSaveOptionsBase)
  ['{6FA59D6B-5FCD-3DBA-8241-553A3F5063A1}']
  { getters & setters } 

    function get_SaveFormat: DNSaveFormat;
    procedure set_SaveFormat(value: DNSaveFormat);
    function get_TableContentAlignment: DNTableContentAlignment;
    procedure set_TableContentAlignment(value: DNTableContentAlignment);
    function get_ImagesFolder: string;
    procedure set_ImagesFolder(value: string);
    function get_ImageSavingCallback: DNIImageSavingCallback;
    procedure set_ImageSavingCallback(value: DNIImageSavingCallback);
    function get_Encoding: DDN.mscorlib.DNEncoding;
    procedure set_Encoding(value: DDN.mscorlib.DNEncoding);
    function get_ParagraphBreak: string;
    procedure set_ParagraphBreak(value: string);
    function get_ForcePageBreaks: Boolean;
    procedure set_ForcePageBreaks(value: Boolean);
    function get_ExportHeadersFootersMode: DNTxtExportHeadersFootersMode;
    procedure set_ExportHeadersFootersMode(value: DNTxtExportHeadersFootersMode);
    function get_TempFolder: string;
    procedure set_TempFolder(value: string);
    function get_PrettyFormat: Boolean;
    procedure set_PrettyFormat(value: Boolean);
    function get_UseAntiAliasing: Boolean;
    procedure set_UseAntiAliasing(value: Boolean);
    function get_UseHighQualityRendering: Boolean;
    procedure set_UseHighQualityRendering(value: Boolean);
    function get_UpdateSdtContent: Boolean;
    procedure set_UpdateSdtContent(value: Boolean);
    function get_DmlRenderingMode: DNDmlRenderingMode;
    procedure set_DmlRenderingMode(value: DNDmlRenderingMode);
    function get_DmlEffectsRenderingMode: DNDmlEffectsRenderingMode;
    procedure set_DmlEffectsRenderingMode(value: DNDmlEffectsRenderingMode);
    function get_ImlRenderingMode: DNImlRenderingMode;
    procedure set_ImlRenderingMode(value: DNImlRenderingMode);
    function get_DefaultTemplate: string;
    procedure set_DefaultTemplate(value: string);
    function get_UpdateFields: Boolean;
    procedure set_UpdateFields(value: Boolean);
    function get_UpdateLastSavedTimeProperty: Boolean;
    procedure set_UpdateLastSavedTimeProperty(value: Boolean);
    function get_UpdateLastPrintedProperty: Boolean;
    procedure set_UpdateLastPrintedProperty(value: Boolean);
    function get_UpdateCreatedTimeProperty: Boolean;
    procedure set_UpdateCreatedTimeProperty(value: Boolean);
    function get_MemoryOptimization: Boolean;
    procedure set_MemoryOptimization(value: Boolean);
    function get_Dml3DEffectsRenderingMode: DNDml3DEffectsRenderingMode;
    procedure set_Dml3DEffectsRenderingMode(value: DNDml3DEffectsRenderingMode);
    function get_AllowEmbeddingPostScriptFonts: Boolean;
    procedure set_AllowEmbeddingPostScriptFonts(value: Boolean);
    function get_CustomTimeZoneInfo: DDN.mscorlib.DNTimeZoneInfo;
    procedure set_CustomTimeZoneInfo(value: DDN.mscorlib.DNTimeZoneInfo);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property SaveFormat: DNSaveFormat read get_SaveFormat write set_SaveFormat;
    property TableContentAlignment: DNTableContentAlignment read get_TableContentAlignment write set_TableContentAlignment;
    property ImagesFolder: string read get_ImagesFolder write set_ImagesFolder;
    property ImageSavingCallback: DNIImageSavingCallback read get_ImageSavingCallback write set_ImageSavingCallback;
    property Encoding: DDN.mscorlib.DNEncoding read get_Encoding write set_Encoding;
    property ParagraphBreak: string read get_ParagraphBreak write set_ParagraphBreak;
    property ForcePageBreaks: Boolean read get_ForcePageBreaks write set_ForcePageBreaks;
    property ExportHeadersFootersMode: DNTxtExportHeadersFootersMode read get_ExportHeadersFootersMode write set_ExportHeadersFootersMode;
    property TempFolder: string read get_TempFolder write set_TempFolder;
    property PrettyFormat: Boolean read get_PrettyFormat write set_PrettyFormat;
    property UseAntiAliasing: Boolean read get_UseAntiAliasing write set_UseAntiAliasing;
    property UseHighQualityRendering: Boolean read get_UseHighQualityRendering write set_UseHighQualityRendering;
    property UpdateSdtContent: Boolean read get_UpdateSdtContent write set_UpdateSdtContent;
    property DmlRenderingMode: DNDmlRenderingMode read get_DmlRenderingMode write set_DmlRenderingMode;
    property DmlEffectsRenderingMode: DNDmlEffectsRenderingMode read get_DmlEffectsRenderingMode write set_DmlEffectsRenderingMode;
    property ImlRenderingMode: DNImlRenderingMode read get_ImlRenderingMode write set_ImlRenderingMode;
    property DefaultTemplate: string read get_DefaultTemplate write set_DefaultTemplate;
    property UpdateFields: Boolean read get_UpdateFields write set_UpdateFields;
    property UpdateLastSavedTimeProperty: Boolean read get_UpdateLastSavedTimeProperty write set_UpdateLastSavedTimeProperty;
    property UpdateLastPrintedProperty: Boolean read get_UpdateLastPrintedProperty write set_UpdateLastPrintedProperty;
    property UpdateCreatedTimeProperty: Boolean read get_UpdateCreatedTimeProperty write set_UpdateCreatedTimeProperty;
    property MemoryOptimization: Boolean read get_MemoryOptimization write set_MemoryOptimization;
    property Dml3DEffectsRenderingMode: DNDml3DEffectsRenderingMode read get_Dml3DEffectsRenderingMode write set_Dml3DEffectsRenderingMode;
    property AllowEmbeddingPostScriptFonts: Boolean read get_AllowEmbeddingPostScriptFonts write set_AllowEmbeddingPostScriptFonts;
    property CustomTimeZoneInfo: DDN.mscorlib.DNTimeZoneInfo read get_CustomTimeZoneInfo write set_CustomTimeZoneInfo;
  end;

  TDNMarkdownSaveOptions = class(TDNGenericImport<DNMarkdownSaveOptionsClass, DNMarkdownSaveOptions>) end;

  //-------------namespace: Aspose.Words.Saving----------------
  DNTxtSaveOptionsClass = interface(DNTxtSaveOptionsBaseClass)
  ['{94939A2B-0C18-5984-9678-E114ECA7C20E}']
  { constructors } 

    {class} function init: DNTxtSaveOptions;

  end;

  [DNTypeName('Aspose.Words.Saving.TxtSaveOptions')]
  DNTxtSaveOptions = interface(DNTxtSaveOptionsBase)
  ['{07740729-1142-3DD3-878B-BFD0C3D67FD3}']
  { getters & setters } 

    function get_SaveFormat: DNSaveFormat;
    procedure set_SaveFormat(value: DNSaveFormat);
    function get_SimplifyListLabels: Boolean;
    procedure set_SimplifyListLabels(value: Boolean);
    function get_AddBidiMarks: Boolean;
    procedure set_AddBidiMarks(value: Boolean);
    function get_ListIndentation: DNTxtListIndentation;
    function get_PreserveTableLayout: Boolean;
    procedure set_PreserveTableLayout(value: Boolean);
    function get_MaxCharactersPerLine: Int32;
    procedure set_MaxCharactersPerLine(value: Int32);
    function get_Encoding: DDN.mscorlib.DNEncoding;
    procedure set_Encoding(value: DDN.mscorlib.DNEncoding);
    function get_ParagraphBreak: string;
    procedure set_ParagraphBreak(value: string);
    function get_ForcePageBreaks: Boolean;
    procedure set_ForcePageBreaks(value: Boolean);
    function get_ExportHeadersFootersMode: DNTxtExportHeadersFootersMode;
    procedure set_ExportHeadersFootersMode(value: DNTxtExportHeadersFootersMode);
    function get_TempFolder: string;
    procedure set_TempFolder(value: string);
    function get_PrettyFormat: Boolean;
    procedure set_PrettyFormat(value: Boolean);
    function get_UseAntiAliasing: Boolean;
    procedure set_UseAntiAliasing(value: Boolean);
    function get_UseHighQualityRendering: Boolean;
    procedure set_UseHighQualityRendering(value: Boolean);
    function get_UpdateSdtContent: Boolean;
    procedure set_UpdateSdtContent(value: Boolean);
    function get_DmlRenderingMode: DNDmlRenderingMode;
    procedure set_DmlRenderingMode(value: DNDmlRenderingMode);
    function get_DmlEffectsRenderingMode: DNDmlEffectsRenderingMode;
    procedure set_DmlEffectsRenderingMode(value: DNDmlEffectsRenderingMode);
    function get_ImlRenderingMode: DNImlRenderingMode;
    procedure set_ImlRenderingMode(value: DNImlRenderingMode);
    function get_DefaultTemplate: string;
    procedure set_DefaultTemplate(value: string);
    function get_UpdateFields: Boolean;
    procedure set_UpdateFields(value: Boolean);
    function get_UpdateLastSavedTimeProperty: Boolean;
    procedure set_UpdateLastSavedTimeProperty(value: Boolean);
    function get_UpdateLastPrintedProperty: Boolean;
    procedure set_UpdateLastPrintedProperty(value: Boolean);
    function get_UpdateCreatedTimeProperty: Boolean;
    procedure set_UpdateCreatedTimeProperty(value: Boolean);
    function get_MemoryOptimization: Boolean;
    procedure set_MemoryOptimization(value: Boolean);
    function get_Dml3DEffectsRenderingMode: DNDml3DEffectsRenderingMode;
    procedure set_Dml3DEffectsRenderingMode(value: DNDml3DEffectsRenderingMode);
    function get_AllowEmbeddingPostScriptFonts: Boolean;
    procedure set_AllowEmbeddingPostScriptFonts(value: Boolean);
    function get_CustomTimeZoneInfo: DDN.mscorlib.DNTimeZoneInfo;
    procedure set_CustomTimeZoneInfo(value: DDN.mscorlib.DNTimeZoneInfo);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property SaveFormat: DNSaveFormat read get_SaveFormat write set_SaveFormat;
    property SimplifyListLabels: Boolean read get_SimplifyListLabels write set_SimplifyListLabels;
    property AddBidiMarks: Boolean read get_AddBidiMarks write set_AddBidiMarks;
    property ListIndentation: DNTxtListIndentation read get_ListIndentation;
    property PreserveTableLayout: Boolean read get_PreserveTableLayout write set_PreserveTableLayout;
    property MaxCharactersPerLine: Int32 read get_MaxCharactersPerLine write set_MaxCharactersPerLine;
    property Encoding: DDN.mscorlib.DNEncoding read get_Encoding write set_Encoding;
    property ParagraphBreak: string read get_ParagraphBreak write set_ParagraphBreak;
    property ForcePageBreaks: Boolean read get_ForcePageBreaks write set_ForcePageBreaks;
    property ExportHeadersFootersMode: DNTxtExportHeadersFootersMode read get_ExportHeadersFootersMode write set_ExportHeadersFootersMode;
    property TempFolder: string read get_TempFolder write set_TempFolder;
    property PrettyFormat: Boolean read get_PrettyFormat write set_PrettyFormat;
    property UseAntiAliasing: Boolean read get_UseAntiAliasing write set_UseAntiAliasing;
    property UseHighQualityRendering: Boolean read get_UseHighQualityRendering write set_UseHighQualityRendering;
    property UpdateSdtContent: Boolean read get_UpdateSdtContent write set_UpdateSdtContent;
    property DmlRenderingMode: DNDmlRenderingMode read get_DmlRenderingMode write set_DmlRenderingMode;
    property DmlEffectsRenderingMode: DNDmlEffectsRenderingMode read get_DmlEffectsRenderingMode write set_DmlEffectsRenderingMode;
    property ImlRenderingMode: DNImlRenderingMode read get_ImlRenderingMode write set_ImlRenderingMode;
    property DefaultTemplate: string read get_DefaultTemplate write set_DefaultTemplate;
    property UpdateFields: Boolean read get_UpdateFields write set_UpdateFields;
    property UpdateLastSavedTimeProperty: Boolean read get_UpdateLastSavedTimeProperty write set_UpdateLastSavedTimeProperty;
    property UpdateLastPrintedProperty: Boolean read get_UpdateLastPrintedProperty write set_UpdateLastPrintedProperty;
    property UpdateCreatedTimeProperty: Boolean read get_UpdateCreatedTimeProperty write set_UpdateCreatedTimeProperty;
    property MemoryOptimization: Boolean read get_MemoryOptimization write set_MemoryOptimization;
    property Dml3DEffectsRenderingMode: DNDml3DEffectsRenderingMode read get_Dml3DEffectsRenderingMode write set_Dml3DEffectsRenderingMode;
    property AllowEmbeddingPostScriptFonts: Boolean read get_AllowEmbeddingPostScriptFonts write set_AllowEmbeddingPostScriptFonts;
    property CustomTimeZoneInfo: DDN.mscorlib.DNTimeZoneInfo read get_CustomTimeZoneInfo write set_CustomTimeZoneInfo;
  end;

  TDNTxtSaveOptions = class(TDNGenericImport<DNTxtSaveOptionsClass, DNTxtSaveOptions>) end;

  //-------------namespace: Aspose.Words.Saving----------------
  DNWordML2003SaveOptionsClass = interface(DNSaveOptionsClass)
  ['{303BAC21-076C-555F-A664-720912729924}']
  { constructors } 

    {class} function init: DNWordML2003SaveOptions;

  end;

  [DNTypeName('Aspose.Words.Saving.WordML2003SaveOptions')]
  DNWordML2003SaveOptions = interface(DNSaveOptions)
  ['{05DC32AB-BD1B-3D07-81DC-C2BC021C1DD5}']
  { getters & setters } 

    function get_SaveFormat: DNSaveFormat;
    procedure set_SaveFormat(value: DNSaveFormat);
    function get_TempFolder: string;
    procedure set_TempFolder(value: string);
    function get_PrettyFormat: Boolean;
    procedure set_PrettyFormat(value: Boolean);
    function get_UseAntiAliasing: Boolean;
    procedure set_UseAntiAliasing(value: Boolean);
    function get_UseHighQualityRendering: Boolean;
    procedure set_UseHighQualityRendering(value: Boolean);
    function get_UpdateSdtContent: Boolean;
    procedure set_UpdateSdtContent(value: Boolean);
    function get_DmlRenderingMode: DNDmlRenderingMode;
    procedure set_DmlRenderingMode(value: DNDmlRenderingMode);
    function get_DmlEffectsRenderingMode: DNDmlEffectsRenderingMode;
    procedure set_DmlEffectsRenderingMode(value: DNDmlEffectsRenderingMode);
    function get_ImlRenderingMode: DNImlRenderingMode;
    procedure set_ImlRenderingMode(value: DNImlRenderingMode);
    function get_DefaultTemplate: string;
    procedure set_DefaultTemplate(value: string);
    function get_UpdateFields: Boolean;
    procedure set_UpdateFields(value: Boolean);
    function get_UpdateLastSavedTimeProperty: Boolean;
    procedure set_UpdateLastSavedTimeProperty(value: Boolean);
    function get_UpdateLastPrintedProperty: Boolean;
    procedure set_UpdateLastPrintedProperty(value: Boolean);
    function get_UpdateCreatedTimeProperty: Boolean;
    procedure set_UpdateCreatedTimeProperty(value: Boolean);
    function get_MemoryOptimization: Boolean;
    procedure set_MemoryOptimization(value: Boolean);
    function get_Dml3DEffectsRenderingMode: DNDml3DEffectsRenderingMode;
    procedure set_Dml3DEffectsRenderingMode(value: DNDml3DEffectsRenderingMode);
    function get_AllowEmbeddingPostScriptFonts: Boolean;
    procedure set_AllowEmbeddingPostScriptFonts(value: Boolean);
    function get_CustomTimeZoneInfo: DDN.mscorlib.DNTimeZoneInfo;
    procedure set_CustomTimeZoneInfo(value: DDN.mscorlib.DNTimeZoneInfo);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property SaveFormat: DNSaveFormat read get_SaveFormat write set_SaveFormat;
    property TempFolder: string read get_TempFolder write set_TempFolder;
    property PrettyFormat: Boolean read get_PrettyFormat write set_PrettyFormat;
    property UseAntiAliasing: Boolean read get_UseAntiAliasing write set_UseAntiAliasing;
    property UseHighQualityRendering: Boolean read get_UseHighQualityRendering write set_UseHighQualityRendering;
    property UpdateSdtContent: Boolean read get_UpdateSdtContent write set_UpdateSdtContent;
    property DmlRenderingMode: DNDmlRenderingMode read get_DmlRenderingMode write set_DmlRenderingMode;
    property DmlEffectsRenderingMode: DNDmlEffectsRenderingMode read get_DmlEffectsRenderingMode write set_DmlEffectsRenderingMode;
    property ImlRenderingMode: DNImlRenderingMode read get_ImlRenderingMode write set_ImlRenderingMode;
    property DefaultTemplate: string read get_DefaultTemplate write set_DefaultTemplate;
    property UpdateFields: Boolean read get_UpdateFields write set_UpdateFields;
    property UpdateLastSavedTimeProperty: Boolean read get_UpdateLastSavedTimeProperty write set_UpdateLastSavedTimeProperty;
    property UpdateLastPrintedProperty: Boolean read get_UpdateLastPrintedProperty write set_UpdateLastPrintedProperty;
    property UpdateCreatedTimeProperty: Boolean read get_UpdateCreatedTimeProperty write set_UpdateCreatedTimeProperty;
    property MemoryOptimization: Boolean read get_MemoryOptimization write set_MemoryOptimization;
    property Dml3DEffectsRenderingMode: DNDml3DEffectsRenderingMode read get_Dml3DEffectsRenderingMode write set_Dml3DEffectsRenderingMode;
    property AllowEmbeddingPostScriptFonts: Boolean read get_AllowEmbeddingPostScriptFonts write set_AllowEmbeddingPostScriptFonts;
    property CustomTimeZoneInfo: DDN.mscorlib.DNTimeZoneInfo read get_CustomTimeZoneInfo write set_CustomTimeZoneInfo;
  end;

  TDNWordML2003SaveOptions = class(TDNGenericImport<DNWordML2003SaveOptionsClass, DNWordML2003SaveOptions>) end;

  //-------------namespace: Aspose.Words.Saving----------------
  DNXamlFlowSaveOptionsClass = interface(DNSaveOptionsClass)
  ['{E9AD8DC3-BBD1-562F-808F-E004F3E4F12E}']
  { constructors } 

    {class} function init: DNXamlFlowSaveOptions; overload;
    {class} function init(saveFormat: DNSaveFormat): DNXamlFlowSaveOptions; overload;

  end;

  [DNTypeName('Aspose.Words.Saving.XamlFlowSaveOptions')]
  DNXamlFlowSaveOptions = interface(DNSaveOptions)
  ['{B893C5BB-AFC5-3CF8-B26F-AAEF6457C859}']
  { getters & setters } 

    function get_SaveFormat: DNSaveFormat;
    procedure set_SaveFormat(value: DNSaveFormat);
    function get_ImagesFolder: string;
    procedure set_ImagesFolder(value: string);
    function get_ImagesFolderAlias: string;
    procedure set_ImagesFolderAlias(value: string);
    function get_ImageSavingCallback: DNIImageSavingCallback;
    procedure set_ImageSavingCallback(value: DNIImageSavingCallback);
    function get_TempFolder: string;
    procedure set_TempFolder(value: string);
    function get_PrettyFormat: Boolean;
    procedure set_PrettyFormat(value: Boolean);
    function get_UseAntiAliasing: Boolean;
    procedure set_UseAntiAliasing(value: Boolean);
    function get_UseHighQualityRendering: Boolean;
    procedure set_UseHighQualityRendering(value: Boolean);
    function get_UpdateSdtContent: Boolean;
    procedure set_UpdateSdtContent(value: Boolean);
    function get_DmlRenderingMode: DNDmlRenderingMode;
    procedure set_DmlRenderingMode(value: DNDmlRenderingMode);
    function get_DmlEffectsRenderingMode: DNDmlEffectsRenderingMode;
    procedure set_DmlEffectsRenderingMode(value: DNDmlEffectsRenderingMode);
    function get_ImlRenderingMode: DNImlRenderingMode;
    procedure set_ImlRenderingMode(value: DNImlRenderingMode);
    function get_DefaultTemplate: string;
    procedure set_DefaultTemplate(value: string);
    function get_UpdateFields: Boolean;
    procedure set_UpdateFields(value: Boolean);
    function get_UpdateLastSavedTimeProperty: Boolean;
    procedure set_UpdateLastSavedTimeProperty(value: Boolean);
    function get_UpdateLastPrintedProperty: Boolean;
    procedure set_UpdateLastPrintedProperty(value: Boolean);
    function get_UpdateCreatedTimeProperty: Boolean;
    procedure set_UpdateCreatedTimeProperty(value: Boolean);
    function get_MemoryOptimization: Boolean;
    procedure set_MemoryOptimization(value: Boolean);
    function get_Dml3DEffectsRenderingMode: DNDml3DEffectsRenderingMode;
    procedure set_Dml3DEffectsRenderingMode(value: DNDml3DEffectsRenderingMode);
    function get_AllowEmbeddingPostScriptFonts: Boolean;
    procedure set_AllowEmbeddingPostScriptFonts(value: Boolean);
    function get_CustomTimeZoneInfo: DDN.mscorlib.DNTimeZoneInfo;
    procedure set_CustomTimeZoneInfo(value: DDN.mscorlib.DNTimeZoneInfo);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property SaveFormat: DNSaveFormat read get_SaveFormat write set_SaveFormat;
    property ImagesFolder: string read get_ImagesFolder write set_ImagesFolder;
    property ImagesFolderAlias: string read get_ImagesFolderAlias write set_ImagesFolderAlias;
    property ImageSavingCallback: DNIImageSavingCallback read get_ImageSavingCallback write set_ImageSavingCallback;
    property TempFolder: string read get_TempFolder write set_TempFolder;
    property PrettyFormat: Boolean read get_PrettyFormat write set_PrettyFormat;
    property UseAntiAliasing: Boolean read get_UseAntiAliasing write set_UseAntiAliasing;
    property UseHighQualityRendering: Boolean read get_UseHighQualityRendering write set_UseHighQualityRendering;
    property UpdateSdtContent: Boolean read get_UpdateSdtContent write set_UpdateSdtContent;
    property DmlRenderingMode: DNDmlRenderingMode read get_DmlRenderingMode write set_DmlRenderingMode;
    property DmlEffectsRenderingMode: DNDmlEffectsRenderingMode read get_DmlEffectsRenderingMode write set_DmlEffectsRenderingMode;
    property ImlRenderingMode: DNImlRenderingMode read get_ImlRenderingMode write set_ImlRenderingMode;
    property DefaultTemplate: string read get_DefaultTemplate write set_DefaultTemplate;
    property UpdateFields: Boolean read get_UpdateFields write set_UpdateFields;
    property UpdateLastSavedTimeProperty: Boolean read get_UpdateLastSavedTimeProperty write set_UpdateLastSavedTimeProperty;
    property UpdateLastPrintedProperty: Boolean read get_UpdateLastPrintedProperty write set_UpdateLastPrintedProperty;
    property UpdateCreatedTimeProperty: Boolean read get_UpdateCreatedTimeProperty write set_UpdateCreatedTimeProperty;
    property MemoryOptimization: Boolean read get_MemoryOptimization write set_MemoryOptimization;
    property Dml3DEffectsRenderingMode: DNDml3DEffectsRenderingMode read get_Dml3DEffectsRenderingMode write set_Dml3DEffectsRenderingMode;
    property AllowEmbeddingPostScriptFonts: Boolean read get_AllowEmbeddingPostScriptFonts write set_AllowEmbeddingPostScriptFonts;
    property CustomTimeZoneInfo: DDN.mscorlib.DNTimeZoneInfo read get_CustomTimeZoneInfo write set_CustomTimeZoneInfo;
  end;

  TDNXamlFlowSaveOptions = class(TDNGenericImport<DNXamlFlowSaveOptionsClass, DNXamlFlowSaveOptions>) end;

  //-------------namespace: Aspose.Words.Saving----------------
  DNSaveOutputParametersClass = interface(DDN.mscorlib.DNObjectClass)
  ['{11B4698C-6FEB-5F82-9A66-898C81F9524C}']
  end;

  [DNTypeName('Aspose.Words.Saving.SaveOutputParameters')]
  DNSaveOutputParameters = interface(DDN.mscorlib.DNObject)
  ['{625E5307-FC3D-333A-BFB7-CB164624C339}']
  { getters & setters } 

    function get_ContentType: string;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property ContentType: string read get_ContentType;
  end;

  TDNSaveOutputParameters = class(TDNGenericImport<DNSaveOutputParametersClass, DNSaveOutputParameters>) end;

  //-------------namespace: Aspose.Words.Saving----------------
  DNTxtListIndentationClass = interface(DDN.mscorlib.DNObjectClass)
  ['{6EA9839D-3316-593A-9279-E79E606F026F}']
  { constructors } 

    {class} function init: DNTxtListIndentation;

  end;

  [DNTypeName('Aspose.Words.Saving.TxtListIndentation')]
  DNTxtListIndentation = interface(DDN.mscorlib.DNObject)
  ['{59513251-3BB5-3CE9-9076-F63E4FB5C523}']
  { getters & setters } 

    function get_Count: Int32;
    procedure set_Count(value: Int32);
    function get_Character: Char;
    procedure set_Character(value: Char);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Count: Int32 read get_Count write set_Count;
    property Character: Char read get_Character write set_Character;
  end;

  TDNTxtListIndentation = class(TDNGenericImport<DNTxtListIndentationClass, DNTxtListIndentation>) end;

  //-------------namespace: Aspose.Words.Settings----------------
  DNCompatibilityOptionsClass = interface(DDN.mscorlib.DNObjectClass)
  ['{456E5D8E-6EF6-574B-9548-389734C4FF5F}']
  end;

  [DNTypeName('Aspose.Words.Settings.CompatibilityOptions')]
  DNCompatibilityOptions = interface(DDN.mscorlib.DNObject)
  ['{0A513673-91A6-3086-8949-9D10EC12C3C2}']
  { getters & setters } 

    function get_NoTabHangInd: Boolean;
    procedure set_NoTabHangInd(value: Boolean);
    function get_NoSpaceRaiseLower: Boolean;
    procedure set_NoSpaceRaiseLower(value: Boolean);
    function get_SuppressSpBfAfterPgBrk: Boolean;
    procedure set_SuppressSpBfAfterPgBrk(value: Boolean);
    function get_WrapTrailSpaces: Boolean;
    procedure set_WrapTrailSpaces(value: Boolean);
    function get_PrintColBlack: Boolean;
    procedure set_PrintColBlack(value: Boolean);
    function get_NoColumnBalance: Boolean;
    procedure set_NoColumnBalance(value: Boolean);
    function get_ConvMailMergeEsc: Boolean;
    procedure set_ConvMailMergeEsc(value: Boolean);
    function get_SuppressTopSpacing: Boolean;
    procedure set_SuppressTopSpacing(value: Boolean);
    function get_UseSingleBorderforContiguousCells: Boolean;
    procedure set_UseSingleBorderforContiguousCells(value: Boolean);
    function get_TransparentMetafiles: Boolean;
    procedure set_TransparentMetafiles(value: Boolean);
    function get_ShowBreaksInFrames: Boolean;
    procedure set_ShowBreaksInFrames(value: Boolean);
    function get_SwapBordersFacingPgs: Boolean;
    procedure set_SwapBordersFacingPgs(value: Boolean);
    function get_DoNotLeaveBackslashAlone: Boolean;
    procedure set_DoNotLeaveBackslashAlone(value: Boolean);
    function get_DoNotExpandShiftReturn: Boolean;
    procedure set_DoNotExpandShiftReturn(value: Boolean);
    function get_UlTrailSpace: Boolean;
    procedure set_UlTrailSpace(value: Boolean);
    function get_BalanceSingleByteDoubleByteWidth: Boolean;
    procedure set_BalanceSingleByteDoubleByteWidth(value: Boolean);
    function get_SuppressSpacingAtTopOfPage: Boolean;
    procedure set_SuppressSpacingAtTopOfPage(value: Boolean);
    function get_SpacingInWholePoints: Boolean;
    procedure set_SpacingInWholePoints(value: Boolean);
    function get_PrintBodyTextBeforeHeader: Boolean;
    procedure set_PrintBodyTextBeforeHeader(value: Boolean);
    function get_NoLeading: Boolean;
    procedure set_NoLeading(value: Boolean);
    function get_SpaceForUL: Boolean;
    procedure set_SpaceForUL(value: Boolean);
    function get_MWSmallCaps: Boolean;
    procedure set_MWSmallCaps(value: Boolean);
    function get_SuppressTopSpacingWP: Boolean;
    procedure set_SuppressTopSpacingWP(value: Boolean);
    function get_TruncateFontHeightsLikeWP6: Boolean;
    procedure set_TruncateFontHeightsLikeWP6(value: Boolean);
    function get_SubFontBySize: Boolean;
    procedure set_SubFontBySize(value: Boolean);
    function get_LineWrapLikeWord6: Boolean;
    procedure set_LineWrapLikeWord6(value: Boolean);
    function get_DoNotSuppressParagraphBorders: Boolean;
    procedure set_DoNotSuppressParagraphBorders(value: Boolean);
    function get_NoExtraLineSpacing: Boolean;
    procedure set_NoExtraLineSpacing(value: Boolean);
    function get_SuppressBottomSpacing: Boolean;
    procedure set_SuppressBottomSpacing(value: Boolean);
    function get_WPSpaceWidth: Boolean;
    procedure set_WPSpaceWidth(value: Boolean);
    function get_WPJustification: Boolean;
    procedure set_WPJustification(value: Boolean);
    function get_UsePrinterMetrics: Boolean;
    procedure set_UsePrinterMetrics(value: Boolean);
    function get_ShapeLayoutLikeWW8: Boolean;
    procedure set_ShapeLayoutLikeWW8(value: Boolean);
    function get_FootnoteLayoutLikeWW8: Boolean;
    procedure set_FootnoteLayoutLikeWW8(value: Boolean);
    function get_DoNotUseHTMLParagraphAutoSpacing: Boolean;
    procedure set_DoNotUseHTMLParagraphAutoSpacing(value: Boolean);
    function get_AdjustLineHeightInTable: Boolean;
    procedure set_AdjustLineHeightInTable(value: Boolean);
    function get_ForgetLastTabAlignment: Boolean;
    procedure set_ForgetLastTabAlignment(value: Boolean);
    function get_AutoSpaceLikeWord95: Boolean;
    procedure set_AutoSpaceLikeWord95(value: Boolean);
    function get_AlignTablesRowByRow: Boolean;
    procedure set_AlignTablesRowByRow(value: Boolean);
    function get_LayoutRawTableWidth: Boolean;
    procedure set_LayoutRawTableWidth(value: Boolean);
    function get_LayoutTableRowsApart: Boolean;
    procedure set_LayoutTableRowsApart(value: Boolean);
    function get_UseWord97LineBreakRules: Boolean;
    procedure set_UseWord97LineBreakRules(value: Boolean);
    function get_DoNotBreakWrappedTables: Boolean;
    procedure set_DoNotBreakWrappedTables(value: Boolean);
    function get_DoNotSnapToGridInCell: Boolean;
    procedure set_DoNotSnapToGridInCell(value: Boolean);
    function get_SelectFldWithFirstOrLastChar: Boolean;
    procedure set_SelectFldWithFirstOrLastChar(value: Boolean);
    function get_ApplyBreakingRules: Boolean;
    procedure set_ApplyBreakingRules(value: Boolean);
    function get_DoNotWrapTextWithPunct: Boolean;
    procedure set_DoNotWrapTextWithPunct(value: Boolean);
    function get_DoNotUseEastAsianBreakRules: Boolean;
    procedure set_DoNotUseEastAsianBreakRules(value: Boolean);
    function get_UseWord2002TableStyleRules: Boolean;
    procedure set_UseWord2002TableStyleRules(value: Boolean);
    function get_GrowAutofit: Boolean;
    procedure set_GrowAutofit(value: Boolean);
    function get_UseNormalStyleForList: Boolean;
    procedure set_UseNormalStyleForList(value: Boolean);
    function get_DoNotUseIndentAsNumberingTabStop: Boolean;
    procedure set_DoNotUseIndentAsNumberingTabStop(value: Boolean);
    function get_UseAltKinsokuLineBreakRules: Boolean;
    procedure set_UseAltKinsokuLineBreakRules(value: Boolean);
    function get_AllowSpaceOfSameStyleInTable: Boolean;
    procedure set_AllowSpaceOfSameStyleInTable(value: Boolean);
    function get_DoNotSuppressIndentation: Boolean;
    procedure set_DoNotSuppressIndentation(value: Boolean);
    function get_DoNotAutofitConstrainedTables: Boolean;
    procedure set_DoNotAutofitConstrainedTables(value: Boolean);
    function get_AutofitToFirstFixedWidthCell: Boolean;
    procedure set_AutofitToFirstFixedWidthCell(value: Boolean);
    function get_UnderlineTabInNumList: Boolean;
    procedure set_UnderlineTabInNumList(value: Boolean);
    function get_DisplayHangulFixedWidth: Boolean;
    procedure set_DisplayHangulFixedWidth(value: Boolean);
    function get_SplitPgBreakAndParaMark: Boolean;
    procedure set_SplitPgBreakAndParaMark(value: Boolean);
    function get_DoNotVertAlignCellWithSp: Boolean;
    procedure set_DoNotVertAlignCellWithSp(value: Boolean);
    function get_DoNotBreakConstrainedForcedTable: Boolean;
    procedure set_DoNotBreakConstrainedForcedTable(value: Boolean);
    function get_DoNotVertAlignInTxbx: Boolean;
    procedure set_DoNotVertAlignInTxbx(value: Boolean);
    function get_UseAnsiKerningPairs: Boolean;
    procedure set_UseAnsiKerningPairs(value: Boolean);
    function get_CachedColBalance: Boolean;
    procedure set_CachedColBalance(value: Boolean);
    function get_UseFELayout: Boolean;
    procedure set_UseFELayout(value: Boolean);
    function get_OverrideTableStyleFontSizeAndJustification: Boolean;
    procedure set_OverrideTableStyleFontSizeAndJustification(value: Boolean);
    function get_DisableOpenTypeFontFormattingFeatures: Boolean;
    procedure set_DisableOpenTypeFontFormattingFeatures(value: Boolean);
    function get_SwapInsideAndOutsideForMirrorIndentsAndRelativePositioning: Boolean;
    procedure set_SwapInsideAndOutsideForMirrorIndentsAndRelativePositioning(value: Boolean);
    function get_UseWord2010TableStyleRules: Boolean;
    procedure set_UseWord2010TableStyleRules(value: Boolean);
    function get_UICompat97To2003: Boolean;
    procedure set_UICompat97To2003(value: Boolean);

  { methods } 

    procedure OptimizeFor(version: DNMsWordVersion);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property NoTabHangInd: Boolean read get_NoTabHangInd write set_NoTabHangInd;
    property NoSpaceRaiseLower: Boolean read get_NoSpaceRaiseLower write set_NoSpaceRaiseLower;
    property SuppressSpBfAfterPgBrk: Boolean read get_SuppressSpBfAfterPgBrk write set_SuppressSpBfAfterPgBrk;
    property WrapTrailSpaces: Boolean read get_WrapTrailSpaces write set_WrapTrailSpaces;
    property PrintColBlack: Boolean read get_PrintColBlack write set_PrintColBlack;
    property NoColumnBalance: Boolean read get_NoColumnBalance write set_NoColumnBalance;
    property ConvMailMergeEsc: Boolean read get_ConvMailMergeEsc write set_ConvMailMergeEsc;
    property SuppressTopSpacing: Boolean read get_SuppressTopSpacing write set_SuppressTopSpacing;
    property UseSingleBorderforContiguousCells: Boolean read get_UseSingleBorderforContiguousCells write set_UseSingleBorderforContiguousCells;
    property TransparentMetafiles: Boolean read get_TransparentMetafiles write set_TransparentMetafiles;
    property ShowBreaksInFrames: Boolean read get_ShowBreaksInFrames write set_ShowBreaksInFrames;
    property SwapBordersFacingPgs: Boolean read get_SwapBordersFacingPgs write set_SwapBordersFacingPgs;
    property DoNotLeaveBackslashAlone: Boolean read get_DoNotLeaveBackslashAlone write set_DoNotLeaveBackslashAlone;
    property DoNotExpandShiftReturn: Boolean read get_DoNotExpandShiftReturn write set_DoNotExpandShiftReturn;
    property UlTrailSpace: Boolean read get_UlTrailSpace write set_UlTrailSpace;
    property BalanceSingleByteDoubleByteWidth: Boolean read get_BalanceSingleByteDoubleByteWidth write set_BalanceSingleByteDoubleByteWidth;
    property SuppressSpacingAtTopOfPage: Boolean read get_SuppressSpacingAtTopOfPage write set_SuppressSpacingAtTopOfPage;
    property SpacingInWholePoints: Boolean read get_SpacingInWholePoints write set_SpacingInWholePoints;
    property PrintBodyTextBeforeHeader: Boolean read get_PrintBodyTextBeforeHeader write set_PrintBodyTextBeforeHeader;
    property NoLeading: Boolean read get_NoLeading write set_NoLeading;
    property SpaceForUL: Boolean read get_SpaceForUL write set_SpaceForUL;
    property MWSmallCaps: Boolean read get_MWSmallCaps write set_MWSmallCaps;
    property SuppressTopSpacingWP: Boolean read get_SuppressTopSpacingWP write set_SuppressTopSpacingWP;
    property TruncateFontHeightsLikeWP6: Boolean read get_TruncateFontHeightsLikeWP6 write set_TruncateFontHeightsLikeWP6;
    property SubFontBySize: Boolean read get_SubFontBySize write set_SubFontBySize;
    property LineWrapLikeWord6: Boolean read get_LineWrapLikeWord6 write set_LineWrapLikeWord6;
    property DoNotSuppressParagraphBorders: Boolean read get_DoNotSuppressParagraphBorders write set_DoNotSuppressParagraphBorders;
    property NoExtraLineSpacing: Boolean read get_NoExtraLineSpacing write set_NoExtraLineSpacing;
    property SuppressBottomSpacing: Boolean read get_SuppressBottomSpacing write set_SuppressBottomSpacing;
    property WPSpaceWidth: Boolean read get_WPSpaceWidth write set_WPSpaceWidth;
    property WPJustification: Boolean read get_WPJustification write set_WPJustification;
    property UsePrinterMetrics: Boolean read get_UsePrinterMetrics write set_UsePrinterMetrics;
    property ShapeLayoutLikeWW8: Boolean read get_ShapeLayoutLikeWW8 write set_ShapeLayoutLikeWW8;
    property FootnoteLayoutLikeWW8: Boolean read get_FootnoteLayoutLikeWW8 write set_FootnoteLayoutLikeWW8;
    property DoNotUseHTMLParagraphAutoSpacing: Boolean read get_DoNotUseHTMLParagraphAutoSpacing write set_DoNotUseHTMLParagraphAutoSpacing;
    property AdjustLineHeightInTable: Boolean read get_AdjustLineHeightInTable write set_AdjustLineHeightInTable;
    property ForgetLastTabAlignment: Boolean read get_ForgetLastTabAlignment write set_ForgetLastTabAlignment;
    property AutoSpaceLikeWord95: Boolean read get_AutoSpaceLikeWord95 write set_AutoSpaceLikeWord95;
    property AlignTablesRowByRow: Boolean read get_AlignTablesRowByRow write set_AlignTablesRowByRow;
    property LayoutRawTableWidth: Boolean read get_LayoutRawTableWidth write set_LayoutRawTableWidth;
    property LayoutTableRowsApart: Boolean read get_LayoutTableRowsApart write set_LayoutTableRowsApart;
    property UseWord97LineBreakRules: Boolean read get_UseWord97LineBreakRules write set_UseWord97LineBreakRules;
    property DoNotBreakWrappedTables: Boolean read get_DoNotBreakWrappedTables write set_DoNotBreakWrappedTables;
    property DoNotSnapToGridInCell: Boolean read get_DoNotSnapToGridInCell write set_DoNotSnapToGridInCell;
    property SelectFldWithFirstOrLastChar: Boolean read get_SelectFldWithFirstOrLastChar write set_SelectFldWithFirstOrLastChar;
    property ApplyBreakingRules: Boolean read get_ApplyBreakingRules write set_ApplyBreakingRules;
    property DoNotWrapTextWithPunct: Boolean read get_DoNotWrapTextWithPunct write set_DoNotWrapTextWithPunct;
    property DoNotUseEastAsianBreakRules: Boolean read get_DoNotUseEastAsianBreakRules write set_DoNotUseEastAsianBreakRules;
    property UseWord2002TableStyleRules: Boolean read get_UseWord2002TableStyleRules write set_UseWord2002TableStyleRules;
    property GrowAutofit: Boolean read get_GrowAutofit write set_GrowAutofit;
    property UseNormalStyleForList: Boolean read get_UseNormalStyleForList write set_UseNormalStyleForList;
    property DoNotUseIndentAsNumberingTabStop: Boolean read get_DoNotUseIndentAsNumberingTabStop write set_DoNotUseIndentAsNumberingTabStop;
    property UseAltKinsokuLineBreakRules: Boolean read get_UseAltKinsokuLineBreakRules write set_UseAltKinsokuLineBreakRules;
    property AllowSpaceOfSameStyleInTable: Boolean read get_AllowSpaceOfSameStyleInTable write set_AllowSpaceOfSameStyleInTable;
    property DoNotSuppressIndentation: Boolean read get_DoNotSuppressIndentation write set_DoNotSuppressIndentation;
    property DoNotAutofitConstrainedTables: Boolean read get_DoNotAutofitConstrainedTables write set_DoNotAutofitConstrainedTables;
    property AutofitToFirstFixedWidthCell: Boolean read get_AutofitToFirstFixedWidthCell write set_AutofitToFirstFixedWidthCell;
    property UnderlineTabInNumList: Boolean read get_UnderlineTabInNumList write set_UnderlineTabInNumList;
    property DisplayHangulFixedWidth: Boolean read get_DisplayHangulFixedWidth write set_DisplayHangulFixedWidth;
    property SplitPgBreakAndParaMark: Boolean read get_SplitPgBreakAndParaMark write set_SplitPgBreakAndParaMark;
    property DoNotVertAlignCellWithSp: Boolean read get_DoNotVertAlignCellWithSp write set_DoNotVertAlignCellWithSp;
    property DoNotBreakConstrainedForcedTable: Boolean read get_DoNotBreakConstrainedForcedTable write set_DoNotBreakConstrainedForcedTable;
    property DoNotVertAlignInTxbx: Boolean read get_DoNotVertAlignInTxbx write set_DoNotVertAlignInTxbx;
    property UseAnsiKerningPairs: Boolean read get_UseAnsiKerningPairs write set_UseAnsiKerningPairs;
    property CachedColBalance: Boolean read get_CachedColBalance write set_CachedColBalance;
    property UseFELayout: Boolean read get_UseFELayout write set_UseFELayout;
    property OverrideTableStyleFontSizeAndJustification: Boolean read get_OverrideTableStyleFontSizeAndJustification write set_OverrideTableStyleFontSizeAndJustification;
    property DisableOpenTypeFontFormattingFeatures: Boolean read get_DisableOpenTypeFontFormattingFeatures write set_DisableOpenTypeFontFormattingFeatures;
    property SwapInsideAndOutsideForMirrorIndentsAndRelativePositioning: Boolean read get_SwapInsideAndOutsideForMirrorIndentsAndRelativePositioning write set_SwapInsideAndOutsideForMirrorIndentsAndRelativePositioning;
    property UseWord2010TableStyleRules: Boolean read get_UseWord2010TableStyleRules write set_UseWord2010TableStyleRules;
    property UICompat97To2003: Boolean read get_UICompat97To2003 write set_UICompat97To2003;
  end;

  TDNCompatibilityOptions = class(TDNGenericImport<DNCompatibilityOptionsClass, DNCompatibilityOptions>) end;

  //-------------namespace: Aspose.Words.Settings----------------
  DNHyphenationOptionsClass = interface(DDN.mscorlib.DNObjectClass)
  ['{3BE46930-918B-5418-9FD4-4D50BCAC496E}']
  { constructors } 

    {class} function init: DNHyphenationOptions;

  end;

  [DNTypeName('Aspose.Words.Settings.HyphenationOptions')]
  DNHyphenationOptions = interface(DDN.mscorlib.DNObject)
  ['{1F90E4D9-B5A4-35D5-A6D4-6166D0AE1D00}']
  { getters & setters } 

    function get_AutoHyphenation: Boolean;
    procedure set_AutoHyphenation(value: Boolean);
    function get_ConsecutiveHyphenLimit: Int32;
    procedure set_ConsecutiveHyphenLimit(value: Int32);
    function get_HyphenationZone: Int32;
    procedure set_HyphenationZone(value: Int32);
    function get_HyphenateCaps: Boolean;
    procedure set_HyphenateCaps(value: Boolean);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property AutoHyphenation: Boolean read get_AutoHyphenation write set_AutoHyphenation;
    property ConsecutiveHyphenLimit: Int32 read get_ConsecutiveHyphenLimit write set_ConsecutiveHyphenLimit;
    property HyphenationZone: Int32 read get_HyphenationZone write set_HyphenationZone;
    property HyphenateCaps: Boolean read get_HyphenateCaps write set_HyphenateCaps;
  end;

  TDNHyphenationOptions = class(TDNGenericImport<DNHyphenationOptionsClass, DNHyphenationOptions>) end;

  //-------------namespace: Aspose.Words.Settings----------------
  DNMailMergeSettingsClass = interface(DDN.mscorlib.DNObjectClass)
  ['{76FB862F-73D6-5B7D-8A64-98F4E3F5104A}']
  { constructors } 

    {class} function init: DNMailMergeSettings;

  end;

  [DNTypeName('Aspose.Words.Settings.MailMergeSettings')]
  DNMailMergeSettings = interface(DDN.mscorlib.DNObject)
  ['{CAA6BD1E-C5FA-3387-8BC8-877655715A6C}']
  { getters & setters } 

    function get_ActiveRecord: Int32;
    procedure set_ActiveRecord(value: Int32);
    function get_AddressFieldName: string;
    procedure set_AddressFieldName(value: string);
    function get_CheckErrors: DNMailMergeCheckErrors;
    procedure set_CheckErrors(value: DNMailMergeCheckErrors);
    function get_ConnectString: string;
    procedure set_ConnectString(value: string);
    function get_DataSource: string;
    procedure set_DataSource(value: string);
    function get_DataType: DNMailMergeDataType;
    procedure set_DataType(value: DNMailMergeDataType);
    function get_Destination: DNMailMergeDestination;
    procedure set_Destination(value: DNMailMergeDestination);
    function get_DoNotSupressBlankLines: Boolean;
    procedure set_DoNotSupressBlankLines(value: Boolean);
    function get_HeaderSource: string;
    procedure set_HeaderSource(value: string);
    function get_LinkToQuery: Boolean;
    procedure set_LinkToQuery(value: Boolean);
    function get_MailAsAttachment: Boolean;
    procedure set_MailAsAttachment(value: Boolean);
    function get_MailSubject: string;
    procedure set_MailSubject(value: string);
    function get_MainDocumentType: DNMailMergeMainDocumentType;
    procedure set_MainDocumentType(value: DNMailMergeMainDocumentType);
    function get_Odso: DNOdso;
    procedure set_Odso(value: DNOdso);
    function get_Query: string;
    procedure set_Query(value: string);
    function get_ViewMergedData: Boolean;
    procedure set_ViewMergedData(value: Boolean);

  { methods } 

    procedure Clear;
    function Clone: DNMailMergeSettings;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property ActiveRecord: Int32 read get_ActiveRecord write set_ActiveRecord;
    property AddressFieldName: string read get_AddressFieldName write set_AddressFieldName;
    property CheckErrors: DNMailMergeCheckErrors read get_CheckErrors write set_CheckErrors;
    property ConnectString: string read get_ConnectString write set_ConnectString;
    property DataSource: string read get_DataSource write set_DataSource;
    property DataType: DNMailMergeDataType read get_DataType write set_DataType;
    property Destination: DNMailMergeDestination read get_Destination write set_Destination;
    property DoNotSupressBlankLines: Boolean read get_DoNotSupressBlankLines write set_DoNotSupressBlankLines;
    property HeaderSource: string read get_HeaderSource write set_HeaderSource;
    property LinkToQuery: Boolean read get_LinkToQuery write set_LinkToQuery;
    property MailAsAttachment: Boolean read get_MailAsAttachment write set_MailAsAttachment;
    property MailSubject: string read get_MailSubject write set_MailSubject;
    property MainDocumentType: DNMailMergeMainDocumentType read get_MainDocumentType write set_MainDocumentType;
    property Odso: DNOdso read get_Odso write set_Odso;
    property Query: string read get_Query write set_Query;
    property ViewMergedData: Boolean read get_ViewMergedData write set_ViewMergedData;
  end;

  TDNMailMergeSettings = class(TDNGenericImport<DNMailMergeSettingsClass, DNMailMergeSettings>) end;

  //-------------namespace: Aspose.Words.Settings----------------
  DNOdsoClass = interface(DDN.mscorlib.DNObjectClass)
  ['{6BC3BB86-3036-58C1-864E-6F31B0215CB0}']
  { constructors } 

    {class} function init: DNOdso;

  end;

  [DNTypeName('Aspose.Words.Settings.Odso')]
  DNOdso = interface(DDN.mscorlib.DNObject)
  ['{CF017D73-F247-3840-AF61-3F0CF7144CC0}']
  { getters & setters } 

    function get_ColumnDelimiter: Char;
    procedure set_ColumnDelimiter(value: Char);
    function get_FirstRowContainsColumnNames: Boolean;
    procedure set_FirstRowContainsColumnNames(value: Boolean);
    function get_DataSource: string;
    procedure set_DataSource(value: string);
    function get_TableName: string;
    procedure set_TableName(value: string);
    function get_DataSourceType: DNOdsoDataSourceType;
    procedure set_DataSourceType(value: DNOdsoDataSourceType);
    function get_UdlConnectString: string;
    procedure set_UdlConnectString(value: string);
    function get_FieldMapDatas: DNOdsoFieldMapDataCollection;
    procedure set_FieldMapDatas(value: DNOdsoFieldMapDataCollection);
    function get_RecipientDatas: DNOdsoRecipientDataCollection;
    procedure set_RecipientDatas(value: DNOdsoRecipientDataCollection);

  { methods } 

    function Clone: DNOdso;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property ColumnDelimiter: Char read get_ColumnDelimiter write set_ColumnDelimiter;
    property FirstRowContainsColumnNames: Boolean read get_FirstRowContainsColumnNames write set_FirstRowContainsColumnNames;
    property DataSource: string read get_DataSource write set_DataSource;
    property TableName: string read get_TableName write set_TableName;
    property DataSourceType: DNOdsoDataSourceType read get_DataSourceType write set_DataSourceType;
    property UdlConnectString: string read get_UdlConnectString write set_UdlConnectString;
    property FieldMapDatas: DNOdsoFieldMapDataCollection read get_FieldMapDatas write set_FieldMapDatas;
    property RecipientDatas: DNOdsoRecipientDataCollection read get_RecipientDatas write set_RecipientDatas;
  end;

  TDNOdso = class(TDNGenericImport<DNOdsoClass, DNOdso>) end;

  //-------------namespace: Aspose.Words.Settings----------------
  DNOdsoFieldMapDataClass = interface(DDN.mscorlib.DNObjectClass)
  ['{8F4CAA55-397E-5702-A461-83D168B8FF43}']
  { constructors } 

    {class} function init: DNOdsoFieldMapData;

  end;

  [DNTypeName('Aspose.Words.Settings.OdsoFieldMapData')]
  DNOdsoFieldMapData = interface(DDN.mscorlib.DNObject)
  ['{DB0A2311-0FC8-3654-99F7-FDD0689FFA39}']
  { getters & setters } 

    function get_Column: Int32;
    procedure set_Column(value: Int32);
    function get_MappedName: string;
    procedure set_MappedName(value: string);
    function get_Name: string;
    procedure set_Name(value: string);
    function get_Type: DNOdsoFieldMappingType;
    procedure set_Type(value: DNOdsoFieldMappingType);

  { methods } 

    function Clone: DNOdsoFieldMapData;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Column: Int32 read get_Column write set_Column;
    property MappedName: string read get_MappedName write set_MappedName;
    property Name: string read get_Name write set_Name;
    property &Type: DNOdsoFieldMappingType read get_Type write set_Type;
  end;

  TDNOdsoFieldMapData = class(TDNGenericImport<DNOdsoFieldMapDataClass, DNOdsoFieldMapData>) end;

  //-------------namespace: Aspose.Words.Settings----------------
  DNOdsoFieldMapDataCollectionClass = interface(DNObjectClass)
  ['{6EC27F95-9728-5BF4-967D-C546938E91B2}']
  { constructors } 

    {class} function init: DNOdsoFieldMapDataCollection;

  end;

  [DNTypeName('Aspose.Words.Settings.OdsoFieldMapDataCollection')]
  DNOdsoFieldMapDataCollection = interface(DDN.mscorlib.DNIEnumerable)
  ['{4B75C58F-DC36-3EA5-9D28-2270E970D001}']
  { getters & setters } 

    function get_Count: Int32;
    function get_Item(index: Int32): DNOdsoFieldMapData;
    procedure set_Item(index: Int32; value: DNOdsoFieldMapData);

  { methods } 

    function GetEnumerator: DDN.mscorlib.DNIEnumerator<DNOdsoFieldMapData>;
    function Add(value: DNOdsoFieldMapData): Int32;
    procedure Clear;
    procedure RemoveAt(index: Int32);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Count: Int32 read get_Count;
    property Item[index: Int32]: DNOdsoFieldMapData read get_Item write set_Item; default;
  end;

  TDNOdsoFieldMapDataCollection = class(TDNGenericImport<DNOdsoFieldMapDataCollectionClass, DNOdsoFieldMapDataCollection>) end;

  //-------------namespace: Aspose.Words.Settings----------------
  DNOdsoRecipientDataClass = interface(DDN.mscorlib.DNObjectClass)
  ['{4885F9C9-B2DF-5CAD-9CB6-10E0B602D829}']
  { constructors } 

    {class} function init: DNOdsoRecipientData;

  end;

  [DNTypeName('Aspose.Words.Settings.OdsoRecipientData')]
  DNOdsoRecipientData = interface(DDN.mscorlib.DNObject)
  ['{79A92811-BDDE-3159-89EC-D1AF92475706}']
  { getters & setters } 

    function get_Active: Boolean;
    procedure set_Active(value: Boolean);
    function get_Column: Int32;
    procedure set_Column(value: Int32);
    function get_UniqueTag: TArray<Byte>;
    procedure set_UniqueTag(value: TArray<Byte>);
    function get_Hash: Int32;
    procedure set_Hash(value: Int32);

  { methods } 

    function Clone: DNOdsoRecipientData;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Active: Boolean read get_Active write set_Active;
    property Column: Int32 read get_Column write set_Column;
    property UniqueTag: TArray<Byte> read get_UniqueTag write set_UniqueTag;
    property Hash: Int32 read get_Hash write set_Hash;
  end;

  TDNOdsoRecipientData = class(TDNGenericImport<DNOdsoRecipientDataClass, DNOdsoRecipientData>) end;

  //-------------namespace: Aspose.Words.Settings----------------
  DNOdsoRecipientDataCollectionClass = interface(DNObjectClass)
  ['{5DF04E0A-F21C-57AA-ACD5-74F2B95DF33C}']
  { constructors } 

    {class} function init: DNOdsoRecipientDataCollection;

  end;

  [DNTypeName('Aspose.Words.Settings.OdsoRecipientDataCollection')]
  DNOdsoRecipientDataCollection = interface(DDN.mscorlib.DNIEnumerable)
  ['{86150772-1F9F-3197-A8B7-8863AE4D1797}']
  { getters & setters } 

    function get_Count: Int32;
    function get_Item(index: Int32): DNOdsoRecipientData;
    procedure set_Item(index: Int32; value: DNOdsoRecipientData);

  { methods } 

    function GetEnumerator: DDN.mscorlib.DNIEnumerator<DNOdsoRecipientData>;
    function Add(value: DNOdsoRecipientData): Int32;
    procedure Clear;
    procedure RemoveAt(index: Int32);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Count: Int32 read get_Count;
    property Item[index: Int32]: DNOdsoRecipientData read get_Item write set_Item; default;
  end;

  TDNOdsoRecipientDataCollection = class(TDNGenericImport<DNOdsoRecipientDataCollectionClass, DNOdsoRecipientDataCollection>) end;

  //-------------namespace: Aspose.Words.Settings----------------
  DNViewOptionsClass = interface(DDN.mscorlib.DNObjectClass)
  ['{E9AF0A4E-AD9B-5E2D-AC82-F46437DE17FC}']
  end;

  [DNTypeName('Aspose.Words.Settings.ViewOptions')]
  DNViewOptions = interface(DDN.mscorlib.DNObject)
  ['{8FFACF64-3C38-3B60-9D1C-9FD08C923309}']
  { getters & setters } 

    function get_ViewType: DNViewType;
    procedure set_ViewType(value: DNViewType);
    function get_ZoomType: DNZoomType;
    procedure set_ZoomType(value: DNZoomType);
    function get_ZoomPercent: Int32;
    procedure set_ZoomPercent(value: Int32);
    function get_DoNotDisplayPageBoundaries: Boolean;
    procedure set_DoNotDisplayPageBoundaries(value: Boolean);
    function get_DisplayBackgroundShape: Boolean;
    procedure set_DisplayBackgroundShape(value: Boolean);
    function get_FormsDesign: Boolean;
    procedure set_FormsDesign(value: Boolean);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property ViewType: DNViewType read get_ViewType write set_ViewType;
    property ZoomType: DNZoomType read get_ZoomType write set_ZoomType;
    property ZoomPercent: Int32 read get_ZoomPercent write set_ZoomPercent;
    property DoNotDisplayPageBoundaries: Boolean read get_DoNotDisplayPageBoundaries write set_DoNotDisplayPageBoundaries;
    property DisplayBackgroundShape: Boolean read get_DisplayBackgroundShape write set_DisplayBackgroundShape;
    property FormsDesign: Boolean read get_FormsDesign write set_FormsDesign;
  end;

  TDNViewOptions = class(TDNGenericImport<DNViewOptionsClass, DNViewOptions>) end;

  //-------------namespace: Aspose.Words.Settings----------------
  DNWriteProtectionClass = interface(DDN.mscorlib.DNObjectClass)
  ['{4E4702BC-8D74-5F68-B9F0-39502879B743}']
  end;

  [DNTypeName('Aspose.Words.Settings.WriteProtection')]
  DNWriteProtection = interface(DDN.mscorlib.DNObject)
  ['{84CD56B7-DE81-35C6-88D7-F24F2255B7AA}']
  { getters & setters } 

    function get_ReadOnlyRecommended: Boolean;
    procedure set_ReadOnlyRecommended(value: Boolean);
    function get_IsWriteProtected: Boolean;

  { methods } 

    procedure SetPassword(password: string);
    function ValidatePassword(password: string): Boolean;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property ReadOnlyRecommended: Boolean read get_ReadOnlyRecommended write set_ReadOnlyRecommended;
    property IsWriteProtected: Boolean read get_IsWriteProtected;
  end;

  TDNWriteProtection = class(TDNGenericImport<DNWriteProtectionClass, DNWriteProtection>) end;

  //-------------namespace: Aspose.Words.Shaping----------------
  DNBasicTextShaperCacheClass = interface(DNObjectClass)
  ['{625DECF7-7768-52D6-9FCB-308744F1D955}']
  { constructors } 

    {class} function init(factory: DNITextShaperFactory): DNBasicTextShaperCache;

  end;

  [DNTypeName('Aspose.Words.Shaping.BasicTextShaperCache')]
  DNBasicTextShaperCache = interface(DDN.mscorlib.DNIDisposable)
  ['{9A5C99B1-F2D4-39F4-8B6A-FE44F9A60F83}']
  { methods } 

    procedure Dispose;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNBasicTextShaperCache = class(TDNGenericImport<DNBasicTextShaperCacheClass, DNBasicTextShaperCache>) end;

  //-------------namespace: Aspose.Words.Shaping----------------
  DNClusterClass = interface(DDN.mscorlib.DNObjectClass)
  ['{909B7C0A-768C-5B36-BD70-561ECBCD5F61}']
  { constructors } 

    {class} function init(codepoints: TArray<Int32>; glyphs: TArray<DNGlyph>): DNCluster;

  { static methods } 

    {class} function GetString(clusters: TArray<DNCluster>): string;

  end;

  [DNTypeName('Aspose.Words.Shaping.Cluster')]
  DNCluster = interface(DDN.mscorlib.DNObject)
  ['{4DA202D4-5C0C-38AA-B10D-D08D53D1B40D}']
  { getters & setters } 

    function get_Codepoints: TArray<Int32>;
    function get_CodepointsLength: Int32;
    function get_Glyphs: TArray<DNGlyph>;

  { methods } 

    function GetWidth(em: Int32; fontSize: Single): Single;
    function DeepClone: DNCluster;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Codepoints: TArray<Int32> read get_Codepoints;
    property CodepointsLength: Int32 read get_CodepointsLength;
    property Glyphs: TArray<DNGlyph> read get_Glyphs;
  end;

  TDNCluster = class(TDNGenericImport<DNClusterClass, DNCluster>) end;

  //-------------namespace: Aspose.Words.Shaping----------------
  DNGlyphClass = interface(DDN.mscorlib.DNObjectClass)
  ['{03221F11-9952-5F95-8399-FC80BD750C46}']
  { constructors } 

    {class} function init(glyphIndex: Int32; advance: Int16; advanceOffset: Int16; ascenderOffset: Int16): DNGlyph;

  end;

  [DNTypeName('Aspose.Words.Shaping.Glyph')]
  DNGlyph = interface(DDN.mscorlib.DNObject)
  ['{79C5B45E-50E0-39C7-9F5C-C2AD245935A8}']
  { getters & setters } 

    function get_GlyphIndex: Int32;
    function get_Advance: Int16;
    procedure set_Advance(value: Int16);
    function get_AdvanceOffset: Int16;
    function get_AscenderOffset: Int16;

  { methods } 

    function GetWidth(em: Int32; fontSize: Single): Single;
    function Clone: DNGlyph;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property GlyphIndex: Int32 read get_GlyphIndex;
    property Advance: Int16 read get_Advance write set_Advance;
    property AdvanceOffset: Int16 read get_AdvanceOffset;
    property AscenderOffset: Int16 read get_AscenderOffset;
  end;

  TDNGlyph = class(TDNGenericImport<DNGlyphClass, DNGlyph>) end;

  //-------------namespace: Aspose.Words----------------
  DNSignatureLineOptionsClass = interface(DDN.mscorlib.DNObjectClass)
  ['{1D4A8242-87C9-58FB-A675-046C1DE948D4}']
  { constructors } 

    {class} function init: DNSignatureLineOptions;

  end;

  [DNTypeName('Aspose.Words.SignatureLineOptions')]
  DNSignatureLineOptions = interface(DDN.mscorlib.DNObject)
  ['{326A4341-380D-3D70-87E9-30B72573017B}']
  { getters & setters } 

    function get_Signer: string;
    procedure set_Signer(value: string);
    function get_SignerTitle: string;
    procedure set_SignerTitle(value: string);
    function get_Email: string;
    procedure set_Email(value: string);
    function get_DefaultInstructions: Boolean;
    procedure set_DefaultInstructions(value: Boolean);
    function get_Instructions: string;
    procedure set_Instructions(value: string);
    function get_AllowComments: Boolean;
    procedure set_AllowComments(value: Boolean);
    function get_ShowDate: Boolean;
    procedure set_ShowDate(value: Boolean);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Signer: string read get_Signer write set_Signer;
    property SignerTitle: string read get_SignerTitle write set_SignerTitle;
    property Email: string read get_Email write set_Email;
    property DefaultInstructions: Boolean read get_DefaultInstructions write set_DefaultInstructions;
    property Instructions: string read get_Instructions write set_Instructions;
    property AllowComments: Boolean read get_AllowComments write set_AllowComments;
    property ShowDate: Boolean read get_ShowDate write set_ShowDate;
  end;

  TDNSignatureLineOptions = class(TDNGenericImport<DNSignatureLineOptionsClass, DNSignatureLineOptions>) end;

  //-------------namespace: Aspose.Words----------------
  DNStyleClass = interface(DDN.mscorlib.DNObjectClass)
  ['{6316924D-DC4D-5781-B786-E752250F4A14}']
  end;

  [DNTypeName('Aspose.Words.Style')]
  DNStyle = interface(DDN.mscorlib.DNObject)
  ['{DDA7CCF0-27F0-31C1-8AE8-EF46D8861000}']
  { getters & setters } 

    function get_Name: string;
    procedure set_Name(value: string);
    function get_StyleIdentifier: DNStyleIdentifier;
    function get_Aliases: TArray<string>;
    function get_IsHeading: Boolean;
    function get_Type: DNStyleType;
    function get_Document: DNDocumentBase;
    function get_LinkedStyleName: string;
    function get_BaseStyleName: string;
    procedure set_BaseStyleName(value: string);
    function get_NextParagraphStyleName: string;
    procedure set_NextParagraphStyleName(value: string);
    function get_BuiltIn: Boolean;
    function get_Font: DNFont;
    function get_ParagraphFormat: DNParagraphFormat;
    function get_List: DNList;
    function get_ListFormat: DNListFormat;
    function get_IsQuickStyle: Boolean;
    procedure set_IsQuickStyle(value: Boolean);
    function get_Styles: DNStyleCollection;

  { methods } 

    procedure Remove;
    function Equals(style: DNStyle): Boolean; overload;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean; overload;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Name: string read get_Name write set_Name;
    property StyleIdentifier: DNStyleIdentifier read get_StyleIdentifier;
    property Aliases: TArray<string> read get_Aliases;
    property IsHeading: Boolean read get_IsHeading;
    property &Type: DNStyleType read get_Type;
    property Document: DNDocumentBase read get_Document;
    property LinkedStyleName: string read get_LinkedStyleName;
    property BaseStyleName: string read get_BaseStyleName write set_BaseStyleName;
    property NextParagraphStyleName: string read get_NextParagraphStyleName write set_NextParagraphStyleName;
    property BuiltIn: Boolean read get_BuiltIn;
    property Font: DNFont read get_Font;
    property ParagraphFormat: DNParagraphFormat read get_ParagraphFormat;
    property List: DNList read get_List;
    property ListFormat: DNListFormat read get_ListFormat;
    property IsQuickStyle: Boolean read get_IsQuickStyle write set_IsQuickStyle;
    property Styles: DNStyleCollection read get_Styles;
  end;

  TDNStyle = class(TDNGenericImport<DNStyleClass, DNStyle>) end;

  //-------------namespace: Aspose.Words----------------
  DNTableStyleClass = interface(DNStyleClass)
  ['{B49108C5-CAEE-55CD-BED2-43C02C7009F6}']
  end;

  [DNTypeName('Aspose.Words.TableStyle')]
  DNTableStyle = interface(DNStyle)
  ['{771048DD-8839-3358-A638-0DAAF50BDA80}']
  { getters & setters } 

    function get_AllowBreakAcrossPages: Boolean;
    procedure set_AllowBreakAcrossPages(value: Boolean);
    function get_Borders: DNBorderCollection;
    function get_LeftPadding: Double;
    procedure set_LeftPadding(value: Double);
    function get_RightPadding: Double;
    procedure set_RightPadding(value: Double);
    function get_TopPadding: Double;
    procedure set_TopPadding(value: Double);
    function get_BottomPadding: Double;
    procedure set_BottomPadding(value: Double);
    function get_Alignment: DNTableAlignment;
    procedure set_Alignment(value: DNTableAlignment);
    function get_CellSpacing: Double;
    procedure set_CellSpacing(value: Double);
    function get_Bidi: Boolean;
    procedure set_Bidi(value: Boolean);
    function get_LeftIndent: Double;
    procedure set_LeftIndent(value: Double);
    function get_Shading: DNShading;
    function get_VerticalAlignment: DNCellVerticalAlignment;
    procedure set_VerticalAlignment(value: DNCellVerticalAlignment);
    function get_RowStripe: Int32;
    procedure set_RowStripe(value: Int32);
    function get_ColumnStripe: Int32;
    procedure set_ColumnStripe(value: Int32);
    function get_ConditionalStyles: DNConditionalStyleCollection;
    function get_Name: string;
    procedure set_Name(value: string);
    function get_StyleIdentifier: DNStyleIdentifier;
    function get_Aliases: TArray<string>;
    function get_IsHeading: Boolean;
    function get_Type: DNStyleType;
    function get_Document: DNDocumentBase;
    function get_LinkedStyleName: string;
    function get_BaseStyleName: string;
    procedure set_BaseStyleName(value: string);
    function get_NextParagraphStyleName: string;
    procedure set_NextParagraphStyleName(value: string);
    function get_BuiltIn: Boolean;
    function get_Font: DNFont;
    function get_ParagraphFormat: DNParagraphFormat;
    function get_List: DNList;
    function get_ListFormat: DNListFormat;
    function get_IsQuickStyle: Boolean;
    procedure set_IsQuickStyle(value: Boolean);
    function get_Styles: DNStyleCollection;

  { methods } 

    procedure Remove;
    function Equals(style: DNStyle): Boolean; overload;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean; overload;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property AllowBreakAcrossPages: Boolean read get_AllowBreakAcrossPages write set_AllowBreakAcrossPages;
    property Borders: DNBorderCollection read get_Borders;
    property LeftPadding: Double read get_LeftPadding write set_LeftPadding;
    property RightPadding: Double read get_RightPadding write set_RightPadding;
    property TopPadding: Double read get_TopPadding write set_TopPadding;
    property BottomPadding: Double read get_BottomPadding write set_BottomPadding;
    property Alignment: DNTableAlignment read get_Alignment write set_Alignment;
    property CellSpacing: Double read get_CellSpacing write set_CellSpacing;
    property Bidi: Boolean read get_Bidi write set_Bidi;
    property LeftIndent: Double read get_LeftIndent write set_LeftIndent;
    property Shading: DNShading read get_Shading;
    property VerticalAlignment: DNCellVerticalAlignment read get_VerticalAlignment write set_VerticalAlignment;
    property RowStripe: Int32 read get_RowStripe write set_RowStripe;
    property ColumnStripe: Int32 read get_ColumnStripe write set_ColumnStripe;
    property ConditionalStyles: DNConditionalStyleCollection read get_ConditionalStyles;
    property Name: string read get_Name write set_Name;
    property StyleIdentifier: DNStyleIdentifier read get_StyleIdentifier;
    property Aliases: TArray<string> read get_Aliases;
    property IsHeading: Boolean read get_IsHeading;
    property &Type: DNStyleType read get_Type;
    property Document: DNDocumentBase read get_Document;
    property LinkedStyleName: string read get_LinkedStyleName;
    property BaseStyleName: string read get_BaseStyleName write set_BaseStyleName;
    property NextParagraphStyleName: string read get_NextParagraphStyleName write set_NextParagraphStyleName;
    property BuiltIn: Boolean read get_BuiltIn;
    property Font: DNFont read get_Font;
    property ParagraphFormat: DNParagraphFormat read get_ParagraphFormat;
    property List: DNList read get_List;
    property ListFormat: DNListFormat read get_ListFormat;
    property IsQuickStyle: Boolean read get_IsQuickStyle write set_IsQuickStyle;
    property Styles: DNStyleCollection read get_Styles;
  end;

  TDNTableStyle = class(TDNGenericImport<DNTableStyleClass, DNTableStyle>) end;

  //-------------namespace: Aspose.Words----------------
  DNStyleCollectionClass = interface(DNObjectClass)
  ['{335E7ACE-B325-5201-AEC5-D8A639765D41}']
  end;

  [DNTypeName('Aspose.Words.StyleCollection')]
  DNStyleCollection = interface(DDN.mscorlib.DNIEnumerable)
  ['{9578406E-1090-3C30-976D-195110A8F4E5}']
  { getters & setters } 

    function get_Document: DNDocumentBase;
    function get_DefaultFont: DNFont;
    function get_DefaultParagraphFormat: DNParagraphFormat;
    function get_Count: Int32;
    function get_Item(name: string): DNStyle; overload;
    function get_Item(sti: DNStyleIdentifier): DNStyle; overload;
    function get_Item(index: Int32): DNStyle; overload;

  { methods } 

    procedure ClearQuickStyleGallery;
    function GetEnumerator: DDN.mscorlib.DNIEnumerator<DNStyle>;
    function Add(&type: DNStyleType; name: string): DNStyle;
    function AddCopy(style: DNStyle): DNStyle;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Document: DNDocumentBase read get_Document;
    property DefaultFont: DNFont read get_DefaultFont;
    property DefaultParagraphFormat: DNParagraphFormat read get_DefaultParagraphFormat;
    property Count: Int32 read get_Count;
    property Item[name: string]: DNStyle read get_Item; default;
    property Item[sti: DNStyleIdentifier]: DNStyle read get_Item; default;
    property Item[index: Int32]: DNStyle read get_Item; default;
  end;

  TDNStyleCollection = class(TDNGenericImport<DNStyleCollectionClass, DNStyleCollection>) end;

  //-------------namespace: Aspose.Words.Tables----------------
  DNCellFormatClass = interface(DDN.mscorlib.DNObjectClass)
  ['{C0B640B3-F66A-59AE-BD22-6B85695AD1AC}']
  end;

  [DNTypeName('Aspose.Words.Tables.CellFormat')]
  DNCellFormat = interface(DDN.mscorlib.DNObject)
  ['{746BFBF9-8785-3AF5-847E-FBE77644F369}']
  { getters & setters } 

    function get_LeftPadding: Double;
    procedure set_LeftPadding(value: Double);
    function get_RightPadding: Double;
    procedure set_RightPadding(value: Double);
    function get_TopPadding: Double;
    procedure set_TopPadding(value: Double);
    function get_BottomPadding: Double;
    procedure set_BottomPadding(value: Double);
    function get_Borders: DNBorderCollection;
    function get_Shading: DNShading;
    function get_VerticalAlignment: DNCellVerticalAlignment;
    procedure set_VerticalAlignment(value: DNCellVerticalAlignment);
    function get_Width: Double;
    procedure set_Width(value: Double);
    function get_PreferredWidth: DNPreferredWidth;
    procedure set_PreferredWidth(value: DNPreferredWidth);
    function get_VerticalMerge: DNCellMerge;
    procedure set_VerticalMerge(value: DNCellMerge);
    function get_HorizontalMerge: DNCellMerge;
    procedure set_HorizontalMerge(value: DNCellMerge);
    function get_Orientation: DNTextOrientation;
    procedure set_Orientation(value: DNTextOrientation);
    function get_FitText: Boolean;
    procedure set_FitText(value: Boolean);
    function get_WrapText: Boolean;
    procedure set_WrapText(value: Boolean);

  { methods } 

    procedure ClearFormatting;
    procedure SetPaddings(leftPadding: Double; topPadding: Double; rightPadding: Double; bottomPadding: Double);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property LeftPadding: Double read get_LeftPadding write set_LeftPadding;
    property RightPadding: Double read get_RightPadding write set_RightPadding;
    property TopPadding: Double read get_TopPadding write set_TopPadding;
    property BottomPadding: Double read get_BottomPadding write set_BottomPadding;
    property Borders: DNBorderCollection read get_Borders;
    property Shading: DNShading read get_Shading;
    property VerticalAlignment: DNCellVerticalAlignment read get_VerticalAlignment write set_VerticalAlignment;
    property Width: Double read get_Width write set_Width;
    property PreferredWidth: DNPreferredWidth read get_PreferredWidth write set_PreferredWidth;
    property VerticalMerge: DNCellMerge read get_VerticalMerge write set_VerticalMerge;
    property HorizontalMerge: DNCellMerge read get_HorizontalMerge write set_HorizontalMerge;
    property Orientation: DNTextOrientation read get_Orientation write set_Orientation;
    property FitText: Boolean read get_FitText write set_FitText;
    property WrapText: Boolean read get_WrapText write set_WrapText;
  end;

  TDNCellFormat = class(TDNGenericImport<DNCellFormatClass, DNCellFormat>) end;

  //-------------namespace: Aspose.Words.Tables----------------
  DNPreferredWidthClass = interface(DDN.mscorlib.DNObjectClass)
  ['{7FC73144-3E93-52D9-9DD3-2BFACBF253A2}']
  { static fields getter & setter } 

   function __fakeFieldGet_Auto: DNPreferredWidth;

  { static fields } 

    {class} property Auto: DNPreferredWidth read __fakeFieldGet_Auto;

  { static methods } 

    {class} function FromPercent(percent: Double): DNPreferredWidth;
    {class} function FromPoints(points: Double): DNPreferredWidth;

  end;

  [DNTypeName('Aspose.Words.Tables.PreferredWidth')]
  DNPreferredWidth = interface(DDN.mscorlib.DNObject)
  ['{57107975-D7B3-3379-99D8-14C599705A9A}']
  { getters & setters } 

    function get_Type: DNPreferredWidthType;
    function get_Value: Double;

  { methods } 

    function Equals(other: DNPreferredWidth): Boolean; overload;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean; overload;
    function GetHashCode: Int32;
    function ToString: string;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    property &Type: DNPreferredWidthType read get_Type;
    property Value: Double read get_Value;
  end;

  TDNPreferredWidth = class(TDNGenericImport<DNPreferredWidthClass, DNPreferredWidth>) end;

  //-------------namespace: Aspose.Words.Tables----------------
  DNRowFormatClass = interface(DDN.mscorlib.DNObjectClass)
  ['{36E1D3D4-10F8-5415-BC72-D1ED5F6D84D8}']
  end;

  [DNTypeName('Aspose.Words.Tables.RowFormat')]
  DNRowFormat = interface(DDN.mscorlib.DNObject)
  ['{D175925D-1E8B-30FE-9443-27F569CB9D18}']
  { getters & setters } 

    function get_Borders: DNBorderCollection;
    function get_Height: Double;
    procedure set_Height(value: Double);
    function get_HeightRule: DNHeightRule;
    procedure set_HeightRule(value: DNHeightRule);
    function get_AllowBreakAcrossPages: Boolean;
    procedure set_AllowBreakAcrossPages(value: Boolean);
    function get_HeadingFormat: Boolean;
    procedure set_HeadingFormat(value: Boolean);

  { methods } 

    procedure ClearFormatting;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Borders: DNBorderCollection read get_Borders;
    property Height: Double read get_Height write set_Height;
    property HeightRule: DNHeightRule read get_HeightRule write set_HeightRule;
    property AllowBreakAcrossPages: Boolean read get_AllowBreakAcrossPages write set_AllowBreakAcrossPages;
    property HeadingFormat: Boolean read get_HeadingFormat write set_HeadingFormat;
  end;

  TDNRowFormat = class(TDNGenericImport<DNRowFormatClass, DNRowFormat>) end;

  //-------------namespace: Aspose.Words----------------
  DNTabStopClass = interface(DDN.mscorlib.DNObjectClass)
  ['{1651598C-D91E-5703-88EA-DB55EED49078}']
  { constructors } 

    {class} function init(position: Double): DNTabStop; overload;
    {class} function init(position: Double; alignment: DNTabAlignment; leader: DNTabLeader): DNTabStop; overload;

  end;

  [DNTypeName('Aspose.Words.TabStop')]
  DNTabStop = interface(DDN.mscorlib.DNObject)
  ['{ACC9600F-0C72-3737-AF39-ACE4CC73EC27}']
  { getters & setters } 

    function get_Position: Double;
    function get_Alignment: DNTabAlignment;
    procedure set_Alignment(value: DNTabAlignment);
    function get_Leader: DNTabLeader;
    procedure set_Leader(value: DNTabLeader);
    function get_IsClear: Boolean;

  { methods } 

    function Equals(rhs: DNTabStop): Boolean; overload;
    function GetHashCode: Int32;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean; overload;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Position: Double read get_Position;
    property Alignment: DNTabAlignment read get_Alignment write set_Alignment;
    property Leader: DNTabLeader read get_Leader write set_Leader;
    property IsClear: Boolean read get_IsClear;
  end;

  TDNTabStop = class(TDNGenericImport<DNTabStopClass, DNTabStop>) end;

  //-------------namespace: Aspose.Words----------------
  DNTextColumnClass = interface(DDN.mscorlib.DNObjectClass)
  ['{0F28C792-3347-5CAC-B3FC-7B6EB4BC9326}']
  end;

  [DNTypeName('Aspose.Words.TextColumn')]
  DNTextColumn = interface(DDN.mscorlib.DNObject)
  ['{36DCC010-BA66-3A38-A879-B94DF0098A55}']
  { getters & setters } 

    function get_Width: Double;
    procedure set_Width(value: Double);
    function get_SpaceAfter: Double;
    procedure set_SpaceAfter(value: Double);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Width: Double read get_Width write set_Width;
    property SpaceAfter: Double read get_SpaceAfter write set_SpaceAfter;
  end;

  TDNTextColumn = class(TDNGenericImport<DNTextColumnClass, DNTextColumn>) end;

  //-------------namespace: Aspose.Words----------------
  DNTextColumnCollectionClass = interface(DDN.mscorlib.DNObjectClass)
  ['{2788615A-D1B7-58C5-A2E2-3317DB06A290}']
  end;

  [DNTypeName('Aspose.Words.TextColumnCollection')]
  DNTextColumnCollection = interface(DDN.mscorlib.DNObject)
  ['{0032900D-FB36-3B81-946C-F3369BA8DD7E}']
  { getters & setters } 

    function get_EvenlySpaced: Boolean;
    procedure set_EvenlySpaced(value: Boolean);
    function get_Spacing: Double;
    procedure set_Spacing(value: Double);
    function get_Width: Double;
    function get_LineBetween: Boolean;
    procedure set_LineBetween(value: Boolean);
    function get_Count: Int32;
    function get_Item(index: Int32): DNTextColumn;

  { methods } 

    procedure SetCount(newCount: Int32);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property EvenlySpaced: Boolean read get_EvenlySpaced write set_EvenlySpaced;
    property Spacing: Double read get_Spacing write set_Spacing;
    property Width: Double read get_Width;
    property LineBetween: Boolean read get_LineBetween write set_LineBetween;
    property Count: Int32 read get_Count;
    property Item[index: Int32]: DNTextColumn read get_Item; default;
  end;

  TDNTextColumnCollection = class(TDNGenericImport<DNTextColumnCollectionClass, DNTextColumnCollection>) end;

  //-------------namespace: Aspose.Words----------------
  DNTextWatermarkOptionsClass = interface(DDN.mscorlib.DNObjectClass)
  ['{E53194D3-D658-5452-A1D4-79D5153DA7F3}']
  { constructors } 

    {class} function init: DNTextWatermarkOptions;

  end;

  [DNTypeName('Aspose.Words.TextWatermarkOptions')]
  DNTextWatermarkOptions = interface(DDN.mscorlib.DNObject)
  ['{E0CD50A7-5675-3BD5-8A7F-03F77E7EC391}']
  { getters & setters } 

    function get_FontFamily: string;
    procedure set_FontFamily(value: string);
    function get_Color: DDN.System.Drawing.DNColor;
    procedure set_Color(value: DDN.System.Drawing.DNColor);
    function get_FontSize: Single;
    procedure set_FontSize(value: Single);
    function get_IsSemitrasparent: Boolean;
    procedure set_IsSemitrasparent(value: Boolean);
    function get_Layout: DNWatermarkLayout;
    procedure set_Layout(value: DNWatermarkLayout);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property FontFamily: string read get_FontFamily write set_FontFamily;
    property Color: DDN.System.Drawing.DNColor read get_Color write set_Color;
    property FontSize: Single read get_FontSize write set_FontSize;
    property IsSemitrasparent: Boolean read get_IsSemitrasparent write set_IsSemitrasparent;
    property Layout: DNWatermarkLayout read get_Layout write set_Layout;
  end;

  TDNTextWatermarkOptions = class(TDNGenericImport<DNTextWatermarkOptionsClass, DNTextWatermarkOptions>) end;

  //-------------namespace: Aspose.Words.Themes----------------
  DNThemeClass = interface(DDN.mscorlib.DNObjectClass)
  ['{9674EA5E-70D2-51C6-A575-C4E84604746A}']
  { constructors } 

    {class} function init: DNTheme;

  end;

  [DNTypeName('Aspose.Words.Themes.Theme')]
  DNTheme = interface(DDN.mscorlib.DNObject)
  ['{4A7BE2D1-1821-36E2-A8E8-69AFC3287A8F}']
  { getters & setters } 

    function get_MajorFonts: DNThemeFonts;
    function get_MinorFonts: DNThemeFonts;
    function get_Colors: DNThemeColors;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property MajorFonts: DNThemeFonts read get_MajorFonts;
    property MinorFonts: DNThemeFonts read get_MinorFonts;
    property Colors: DNThemeColors read get_Colors;
  end;

  TDNTheme = class(TDNGenericImport<DNThemeClass, DNTheme>) end;

  //-------------namespace: Aspose.Words.Themes----------------
  DNThemeColorsClass = interface(DDN.mscorlib.DNObjectClass)
  ['{3035ABC0-812C-52D9-A49D-1CD71E3A8D64}']
  end;

  [DNTypeName('Aspose.Words.Themes.ThemeColors')]
  DNThemeColors = interface(DDN.mscorlib.DNObject)
  ['{DB45BACE-88AB-3877-A9C6-AC9F78A14438}']
  { getters & setters } 

    function get_Accent1: DDN.System.Drawing.DNColor;
    procedure set_Accent1(value: DDN.System.Drawing.DNColor);
    function get_Accent2: DDN.System.Drawing.DNColor;
    procedure set_Accent2(value: DDN.System.Drawing.DNColor);
    function get_Accent3: DDN.System.Drawing.DNColor;
    procedure set_Accent3(value: DDN.System.Drawing.DNColor);
    function get_Accent4: DDN.System.Drawing.DNColor;
    procedure set_Accent4(value: DDN.System.Drawing.DNColor);
    function get_Accent5: DDN.System.Drawing.DNColor;
    procedure set_Accent5(value: DDN.System.Drawing.DNColor);
    function get_Accent6: DDN.System.Drawing.DNColor;
    procedure set_Accent6(value: DDN.System.Drawing.DNColor);
    function get_Dark1: DDN.System.Drawing.DNColor;
    procedure set_Dark1(value: DDN.System.Drawing.DNColor);
    function get_Dark2: DDN.System.Drawing.DNColor;
    procedure set_Dark2(value: DDN.System.Drawing.DNColor);
    function get_FollowedHyperlink: DDN.System.Drawing.DNColor;
    procedure set_FollowedHyperlink(value: DDN.System.Drawing.DNColor);
    function get_Hyperlink: DDN.System.Drawing.DNColor;
    procedure set_Hyperlink(value: DDN.System.Drawing.DNColor);
    function get_Light1: DDN.System.Drawing.DNColor;
    procedure set_Light1(value: DDN.System.Drawing.DNColor);
    function get_Light2: DDN.System.Drawing.DNColor;
    procedure set_Light2(value: DDN.System.Drawing.DNColor);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Accent1: DDN.System.Drawing.DNColor read get_Accent1 write set_Accent1;
    property Accent2: DDN.System.Drawing.DNColor read get_Accent2 write set_Accent2;
    property Accent3: DDN.System.Drawing.DNColor read get_Accent3 write set_Accent3;
    property Accent4: DDN.System.Drawing.DNColor read get_Accent4 write set_Accent4;
    property Accent5: DDN.System.Drawing.DNColor read get_Accent5 write set_Accent5;
    property Accent6: DDN.System.Drawing.DNColor read get_Accent6 write set_Accent6;
    property Dark1: DDN.System.Drawing.DNColor read get_Dark1 write set_Dark1;
    property Dark2: DDN.System.Drawing.DNColor read get_Dark2 write set_Dark2;
    property FollowedHyperlink: DDN.System.Drawing.DNColor read get_FollowedHyperlink write set_FollowedHyperlink;
    property Hyperlink: DDN.System.Drawing.DNColor read get_Hyperlink write set_Hyperlink;
    property Light1: DDN.System.Drawing.DNColor read get_Light1 write set_Light1;
    property Light2: DDN.System.Drawing.DNColor read get_Light2 write set_Light2;
  end;

  TDNThemeColors = class(TDNGenericImport<DNThemeColorsClass, DNThemeColors>) end;

  //-------------namespace: Aspose.Words.Themes----------------
  DNThemeFontsClass = interface(DDN.mscorlib.DNObjectClass)
  ['{1D52F073-017C-56EA-B61A-FAFEE0CE5AB9}']
  end;

  [DNTypeName('Aspose.Words.Themes.ThemeFonts')]
  DNThemeFonts = interface(DDN.mscorlib.DNObject)
  ['{2E29389A-1D8C-3482-8480-851121A64986}']
  { getters & setters } 

    function get_Latin: string;
    procedure set_Latin(value: string);
    function get_EastAsian: string;
    procedure set_EastAsian(value: string);
    function get_ComplexScript: string;
    procedure set_ComplexScript(value: string);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Latin: string read get_Latin write set_Latin;
    property EastAsian: string read get_EastAsian write set_EastAsian;
    property ComplexScript: string read get_ComplexScript write set_ComplexScript;
  end;

  TDNThemeFonts = class(TDNGenericImport<DNThemeFontsClass, DNThemeFonts>) end;

  //-------------namespace: Aspose.Words----------------
  DNVariableCollectionClass = interface(DNObjectClass)
  ['{544267DF-F261-5F00-9C6B-873CFDFF6CA2}']
  end;

  [DNTypeName('Aspose.Words.VariableCollection')]
  DNVariableCollection = interface(DDN.mscorlib.DNIEnumerable)
  ['{3AD29478-5D5B-3D72-AE6B-C88F0D6E307E}']
  { getters & setters } 

    function get_Count: Int32;
    function get_Item(name: string): string; overload;
    procedure set_Item(name: string; value: string); overload;
    function get_Item(index: Int32): string; overload;
    procedure set_Item(index: Int32; value: string); overload;

  { methods } 

    function GetEnumerator: DDN.mscorlib.DNIEnumerator<DDN.mscorlib.DNKeyValuePair<string, string>>;
    procedure Add(name: string; value: string);
    function &Contains(name: string): Boolean;
    function IndexOfKey(name: string): Int32;
    procedure Remove(name: string);
    procedure RemoveAt(index: Int32);
    procedure Clear;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Count: Int32 read get_Count;
    property Item[name: string]: string read get_Item write set_Item; default;
    property Item[index: Int32]: string read get_Item write set_Item; default;
  end;

  TDNVariableCollection = class(TDNGenericImport<DNVariableCollectionClass, DNVariableCollection>) end;

  //-------------namespace: Aspose.Words.Vba----------------
  DNVbaModuleClass = interface(DDN.mscorlib.DNObjectClass)
  ['{228294C1-9014-5BB8-9E10-5E5C40788725}']
  { constructors } 

    {class} function init: DNVbaModule;

  end;

  [DNTypeName('Aspose.Words.Vba.VbaModule')]
  DNVbaModule = interface(DDN.mscorlib.DNObject)
  ['{66B6050F-E4A2-3A3F-AA1F-86515C3F9628}']
  { getters & setters } 

    function get_Name: string;
    procedure set_Name(value: string);
    function get_SourceCode: string;
    procedure set_SourceCode(value: string);
    function get_Type: DNVbaModuleType;
    procedure set_Type(value: DNVbaModuleType);

  { methods } 

    function Clone: DNVbaModule;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Name: string read get_Name write set_Name;
    property SourceCode: string read get_SourceCode write set_SourceCode;
    property &Type: DNVbaModuleType read get_Type write set_Type;
  end;

  TDNVbaModule = class(TDNGenericImport<DNVbaModuleClass, DNVbaModule>) end;

  //-------------namespace: Aspose.Words.Vba----------------
  DNVbaModuleCollectionClass = interface(DNObjectClass)
  ['{3982FACE-D866-5F10-880E-D37D1DF84662}']
  end;

  [DNTypeName('Aspose.Words.Vba.VbaModuleCollection')]
  DNVbaModuleCollection = interface(DDN.mscorlib.DNIEnumerable)
  ['{14500945-5D5F-3DCE-B2B3-FEEDC3485C47}']
  { getters & setters } 

    function get_Item(index: Int32): DNVbaModule; overload;
    function get_Item(name: string): DNVbaModule; overload;
    function get_Count: Int32;

  { methods } 

    procedure Add(vbaModule: DNVbaModule);
    procedure Remove(module: DNVbaModule);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Item[index: Int32]: DNVbaModule read get_Item; default;
    property Item[name: string]: DNVbaModule read get_Item; default;
    property Count: Int32 read get_Count;
  end;

  TDNVbaModuleCollection = class(TDNGenericImport<DNVbaModuleCollectionClass, DNVbaModuleCollection>) end;

  //-------------namespace: Aspose.Words.Vba----------------
  DNVbaProjectClass = interface(DDN.mscorlib.DNObjectClass)
  ['{E6FFE32A-0DCB-5C9E-A3DD-709EC2041C58}']
  { constructors } 

    {class} function init: DNVbaProject;

  end;

  [DNTypeName('Aspose.Words.Vba.VbaProject')]
  DNVbaProject = interface(DDN.mscorlib.DNObject)
  ['{A57FB974-7CB6-384B-B9F2-E653FDBF4CF5}']
  { getters & setters } 

    function get_Name: string;
    procedure set_Name(value: string);
    function get_Modules: DNVbaModuleCollection;
    function get_CodePage: Int32;
    function get_IsSigned: Boolean;
    function get_References: DNVbaReferenceCollection;

  { methods } 

    function Clone: DNVbaProject;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Name: string read get_Name write set_Name;
    property Modules: DNVbaModuleCollection read get_Modules;
    property CodePage: Int32 read get_CodePage;
    property IsSigned: Boolean read get_IsSigned;
    property References: DNVbaReferenceCollection read get_References;
  end;

  TDNVbaProject = class(TDNGenericImport<DNVbaProjectClass, DNVbaProject>) end;

  //-------------namespace: Aspose.Words.Vba----------------
  DNVbaReferenceClass = interface(DDN.mscorlib.DNObjectClass)
  ['{22AB6555-7797-55F0-8EEA-CB514D5EBAC9}']
  end;

  [DNTypeName('Aspose.Words.Vba.VbaReference')]
  DNVbaReference = interface(DDN.mscorlib.DNObject)
  ['{BEC71B10-EB06-3D86-850C-53993CB0F828}']
  { getters & setters } 

    function get_Type: DNVbaReferenceType;
    function get_LibId: string;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property &Type: DNVbaReferenceType read get_Type;
    property LibId: string read get_LibId;
  end;

  TDNVbaReference = class(TDNGenericImport<DNVbaReferenceClass, DNVbaReference>) end;

  //-------------namespace: Aspose.Words.Vba----------------
  DNVbaReferenceCollectionClass = interface(DNObjectClass)
  ['{82B60898-F38D-504C-A8B4-F60C51A2BD69}']
  end;

  [DNTypeName('Aspose.Words.Vba.VbaReferenceCollection')]
  DNVbaReferenceCollection = interface(DDN.mscorlib.DNIEnumerable)
  ['{85201476-83D5-3001-81ED-4C3955BF6B1D}']
  { getters & setters } 

    function get_Count: Int32;
    function get_Item(index: Int32): DNVbaReference;

  { methods } 

    procedure Remove(item: DNVbaReference);
    procedure RemoveAt(index: Int32);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Count: Int32 read get_Count;
    property Item[index: Int32]: DNVbaReference read get_Item; default;
  end;

  TDNVbaReferenceCollection = class(TDNGenericImport<DNVbaReferenceCollectionClass, DNVbaReferenceCollection>) end;

  //-------------namespace: Aspose.Words----------------
  DNWarningInfoClass = interface(DDN.mscorlib.DNObjectClass)
  ['{865862A6-56A6-57D1-A810-D46D47B7DFDC}']
  end;

  [DNTypeName('Aspose.Words.WarningInfo')]
  DNWarningInfo = interface(DDN.mscorlib.DNObject)
  ['{06F63F53-1076-3B83-93FB-8FF07E66AC46}']
  { getters & setters } 

    function get_WarningType: DNWarningType;
    function get_Description: string;
    function get_Source: DNWarningSource;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property WarningType: DNWarningType read get_WarningType;
    property Description: string read get_Description;
    property Source: DNWarningSource read get_Source;
  end;

  TDNWarningInfo = class(TDNGenericImport<DNWarningInfoClass, DNWarningInfo>) end;

  //-------------namespace: Aspose.Words----------------
  DNWarningInfoCollectionClass = interface(DNObjectClass)
  ['{029BACC2-2116-52AE-AAA7-6EF208DB9C13}']
  { constructors } 

    {class} function init: DNWarningInfoCollection;

  end;

  [DNTypeName('Aspose.Words.WarningInfoCollection')]
  DNWarningInfoCollection = interface(DDN.mscorlib.DNIEnumerable)
  ['{AC46CEE5-B262-31C2-BF85-B1E189AD18DD}']
  { getters & setters } 

    function get_Count: Int32;
    function get_Item(index: Int32): DNWarningInfo;

  { methods } 

    function GetEnumerator: DDN.mscorlib.DNIEnumerator<DNWarningInfo>;
    procedure Clear;
    procedure Warning(info: DNWarningInfo);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Count: Int32 read get_Count;
    property Item[index: Int32]: DNWarningInfo read get_Item; default;
  end;

  TDNWarningInfoCollection = class(TDNGenericImport<DNWarningInfoCollectionClass, DNWarningInfoCollection>) end;

  //-------------namespace: Aspose.Words----------------
  DNWatermarkClass = interface(DDN.mscorlib.DNObjectClass)
  ['{F333959D-55AC-59D2-AEFF-B9D816F52565}']
  end;

  [DNTypeName('Aspose.Words.Watermark')]
  DNWatermark = interface(DDN.mscorlib.DNObject)
  ['{117DB641-A1B5-3562-8ECB-E542E3414C99}']
  { getters & setters } 

    function get_Type: DNWatermarkType;

  { methods } 

    procedure SetText(text: string); overload;
    procedure SetText(text: string; options: DNTextWatermarkOptions); overload;
    procedure SetImage(image: DDN.System.Drawing.DNImage); overload;
    procedure SetImage(image: DDN.System.Drawing.DNImage; options: DNImageWatermarkOptions); overload;
    procedure SetImage(imagePath: string; options: DNImageWatermarkOptions); overload;
    procedure Remove;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property &Type: DNWatermarkType read get_Type;
  end;

  TDNWatermark = class(TDNGenericImport<DNWatermarkClass, DNWatermark>) end;

  //-------------namespace: Aspose.Words.WebExtensions----------------
  DNTaskPaneCollectionClass = interface(DNObjectClass)
  ['{1C9CE4CF-2A34-543B-A4D2-7323C0D4A76D}']
  end;

  [DNTypeName('Aspose.Words.WebExtensions.TaskPaneCollection')]
  DNTaskPaneCollection = interface(DNObject)
  ['{16C01BA5-E789-327A-B661-AF9ACD138D30}']
  { getters & setters } 

    function get_Count: Int32;
    function get_Item(index: Int32): DNTaskPane;
    procedure set_Item(index: Int32; value: DNTaskPane);

  { methods } 

    procedure Add(item: DNTaskPane);
    procedure Clear;
    procedure Remove(index: Int32);
    function GetEnumerator: DDN.mscorlib.DNIEnumerator<DNTaskPane>;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Count: Int32 read get_Count;
    property Item[index: Int32]: DNTaskPane read get_Item write set_Item; default;
  end;

  TDNTaskPaneCollection = class(TDNGenericImport<DNTaskPaneCollectionClass, DNTaskPaneCollection>) end;

  //-------------namespace: Aspose.Words.WebExtensions----------------
  DNWebExtensionBindingCollectionClass = interface(DNObjectClass)
  ['{E967972C-F89E-5CA3-B27A-42A7ECA60E6B}']
  end;

  [DNTypeName('Aspose.Words.WebExtensions.WebExtensionBindingCollection')]
  DNWebExtensionBindingCollection = interface(DNObject)
  ['{A6731403-4FEA-3AF3-A1E7-BB209163496C}']
  { getters & setters } 

    function get_Count: Int32;
    function get_Item(index: Int32): DNWebExtensionBinding;
    procedure set_Item(index: Int32; value: DNWebExtensionBinding);

  { methods } 

    procedure Add(item: DNWebExtensionBinding);
    procedure Clear;
    procedure Remove(index: Int32);
    function GetEnumerator: DDN.mscorlib.DNIEnumerator<DNWebExtensionBinding>;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Count: Int32 read get_Count;
    property Item[index: Int32]: DNWebExtensionBinding read get_Item write set_Item; default;
  end;

  TDNWebExtensionBindingCollection = class(TDNGenericImport<DNWebExtensionBindingCollectionClass, DNWebExtensionBindingCollection>) end;

  //-------------namespace: Aspose.Words.WebExtensions----------------
  DNWebExtensionPropertyCollectionClass = interface(DNObjectClass)
  ['{CA76CA83-8F01-578E-8F1B-332030602D7F}']
  end;

  [DNTypeName('Aspose.Words.WebExtensions.WebExtensionPropertyCollection')]
  DNWebExtensionPropertyCollection = interface(DNObject)
  ['{6D4099F4-C0FB-3428-9BF1-6A8088FB9818}']
  { getters & setters } 

    function get_Count: Int32;
    function get_Item(index: Int32): DNWebExtensionProperty;
    procedure set_Item(index: Int32; value: DNWebExtensionProperty);

  { methods } 

    procedure Add(item: DNWebExtensionProperty);
    procedure Clear;
    procedure Remove(index: Int32);
    function GetEnumerator: DDN.mscorlib.DNIEnumerator<DNWebExtensionProperty>;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Count: Int32 read get_Count;
    property Item[index: Int32]: DNWebExtensionProperty read get_Item write set_Item; default;
  end;

  TDNWebExtensionPropertyCollection = class(TDNGenericImport<DNWebExtensionPropertyCollectionClass, DNWebExtensionPropertyCollection>) end;

  //-------------namespace: Aspose.Words.WebExtensions----------------
  DNWebExtensionReferenceCollectionClass = interface(DNObjectClass)
  ['{0F7D2C67-70B5-59E7-A47E-800D89791526}']
  end;

  [DNTypeName('Aspose.Words.WebExtensions.WebExtensionReferenceCollection')]
  DNWebExtensionReferenceCollection = interface(DNObject)
  ['{1CEA8F6C-966D-3A9D-818E-04407252C9DD}']
  { getters & setters } 

    function get_Count: Int32;
    function get_Item(index: Int32): DNWebExtensionReference;
    procedure set_Item(index: Int32; value: DNWebExtensionReference);

  { methods } 

    procedure Add(item: DNWebExtensionReference);
    procedure Clear;
    procedure Remove(index: Int32);
    function GetEnumerator: DDN.mscorlib.DNIEnumerator<DNWebExtensionReference>;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Count: Int32 read get_Count;
    property Item[index: Int32]: DNWebExtensionReference read get_Item write set_Item; default;
  end;

  TDNWebExtensionReferenceCollection = class(TDNGenericImport<DNWebExtensionReferenceCollectionClass, DNWebExtensionReferenceCollection>) end;

  //-------------namespace: Aspose.Words.WebExtensions----------------
  DNBaseWebExtensionCollectionClass<T> = interface(DNObjectClass)
  ['{118D7AAC-D699-5DB1-8737-1C2FFC928A6C}']
  end;

  [DNTypeName('Aspose.Words.WebExtensions.BaseWebExtensionCollection`1')]
  DNBaseWebExtensionCollection<T> = interface(DDN.mscorlib.DNIEnumerable<T>)
  ['{4E45A6D7-9D5C-3C52-8B8B-07934126F37E}']
  { getters & setters } 

    function get_Count: Int32;
    function get_Item(index: Int32): T;
    procedure set_Item(index: Int32; value: T);

  { methods } 

    procedure Add(item: T);
    procedure Clear;
    procedure Remove(index: Int32);
    function GetEnumerator: DDN.mscorlib.DNIEnumerator<T>;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Count: Int32 read get_Count;
    property Item[index: Int32]: T read get_Item write set_Item; default;
  end;

  TDNBaseWebExtensionCollection<T> = class(TDNGenericImport<DNBaseWebExtensionCollectionClass<T>, DNBaseWebExtensionCollection<T>>) end;

  //-------------namespace: Aspose.Words.WebExtensions----------------
  DNTaskPaneClass = interface(DDN.mscorlib.DNObjectClass)
  ['{D80358EE-385D-55DB-BAE8-EFFD15764EC3}']
  { constructors } 

    {class} function init: DNTaskPane;

  end;

  [DNTypeName('Aspose.Words.WebExtensions.TaskPane')]
  DNTaskPane = interface(DDN.mscorlib.DNObject)
  ['{8BE20BA3-CE65-3C8A-A43D-B4C84D42A1E8}']
  { getters & setters } 

    function get_Row: Int32;
    procedure set_Row(value: Int32);
    function get_Width: Double;
    procedure set_Width(value: Double);
    function get_IsLocked: Boolean;
    procedure set_IsLocked(value: Boolean);
    function get_IsVisible: Boolean;
    procedure set_IsVisible(value: Boolean);
    function get_DockState: DNTaskPaneDockState;
    procedure set_DockState(value: DNTaskPaneDockState);
    function get_WebExtension: DNWebExtension;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Row: Int32 read get_Row write set_Row;
    property Width: Double read get_Width write set_Width;
    property IsLocked: Boolean read get_IsLocked write set_IsLocked;
    property IsVisible: Boolean read get_IsVisible write set_IsVisible;
    property DockState: DNTaskPaneDockState read get_DockState write set_DockState;
    property WebExtension: DNWebExtension read get_WebExtension;
  end;

  TDNTaskPane = class(TDNGenericImport<DNTaskPaneClass, DNTaskPane>) end;

  //-------------namespace: Aspose.Words.WebExtensions----------------
  DNWebExtensionClass = interface(DDN.mscorlib.DNObjectClass)
  ['{B8FEE4B2-77CA-520A-A780-2142CA1C0FB8}']
  end;

  [DNTypeName('Aspose.Words.WebExtensions.WebExtension')]
  DNWebExtension = interface(DDN.mscorlib.DNObject)
  ['{EDE979FC-E8D0-3373-9948-7F0D7D5F6B3A}']
  { getters & setters } 

    function get_Id: string;
    procedure set_Id(value: string);
    function get_IsFrozen: Boolean;
    procedure set_IsFrozen(value: Boolean);
    function get_Reference: DNWebExtensionReference;
    function get_Bindings: DNWebExtensionBindingCollection;
    function get_AlternateReferences: DNWebExtensionReferenceCollection;
    function get_Properties: DNWebExtensionPropertyCollection;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Id: string read get_Id write set_Id;
    property IsFrozen: Boolean read get_IsFrozen write set_IsFrozen;
    property Reference: DNWebExtensionReference read get_Reference;
    property Bindings: DNWebExtensionBindingCollection read get_Bindings;
    property AlternateReferences: DNWebExtensionReferenceCollection read get_AlternateReferences;
    property Properties: DNWebExtensionPropertyCollection read get_Properties;
  end;

  TDNWebExtension = class(TDNGenericImport<DNWebExtensionClass, DNWebExtension>) end;

  //-------------namespace: Aspose.Words.WebExtensions----------------
  DNWebExtensionBindingClass = interface(DDN.mscorlib.DNObjectClass)
  ['{96665C51-E519-5264-94A5-B43B448E61E2}']
  { constructors } 

    {class} function init(id: string; bindingType: DNWebExtensionBindingType; appRef: string): DNWebExtensionBinding;

  end;

  [DNTypeName('Aspose.Words.WebExtensions.WebExtensionBinding')]
  DNWebExtensionBinding = interface(DDN.mscorlib.DNObject)
  ['{CDF7DA44-927C-310A-B18A-3224D994995C}']
  { getters & setters } 

    function get_Id: string;
    procedure set_Id(value: string);
    function get_BindingType: DNWebExtensionBindingType;
    procedure set_BindingType(value: DNWebExtensionBindingType);
    function get_AppRef: string;
    procedure set_AppRef(value: string);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Id: string read get_Id write set_Id;
    property BindingType: DNWebExtensionBindingType read get_BindingType write set_BindingType;
    property AppRef: string read get_AppRef write set_AppRef;
  end;

  TDNWebExtensionBinding = class(TDNGenericImport<DNWebExtensionBindingClass, DNWebExtensionBinding>) end;

  //-------------namespace: Aspose.Words.WebExtensions----------------
  DNWebExtensionPropertyClass = interface(DDN.mscorlib.DNObjectClass)
  ['{20093733-C310-54B0-B289-7989B6F477A5}']
  { constructors } 

    {class} function init(name: string; value: string): DNWebExtensionProperty;

  end;

  [DNTypeName('Aspose.Words.WebExtensions.WebExtensionProperty')]
  DNWebExtensionProperty = interface(DDN.mscorlib.DNObject)
  ['{56A46FD7-F501-3B13-B41F-1522D0E134F3}']
  { getters & setters } 

    function get_Name: string;
    procedure set_Name(value: string);
    function get_Value: string;
    procedure set_Value(value: string);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Name: string read get_Name write set_Name;
    property Value: string read get_Value write set_Value;
  end;

  TDNWebExtensionProperty = class(TDNGenericImport<DNWebExtensionPropertyClass, DNWebExtensionProperty>) end;

  //-------------namespace: Aspose.Words.WebExtensions----------------
  DNWebExtensionReferenceClass = interface(DDN.mscorlib.DNObjectClass)
  ['{02671627-BB0A-56A3-930F-D8CA3EBF230D}']
  { constructors } 

    {class} function init: DNWebExtensionReference;

  end;

  [DNTypeName('Aspose.Words.WebExtensions.WebExtensionReference')]
  DNWebExtensionReference = interface(DDN.mscorlib.DNObject)
  ['{715CED18-4556-35F3-B1F3-9CC84F22BFD4}']
  { getters & setters } 

    function get_Id: string;
    procedure set_Id(value: string);
    function get_Version: string;
    procedure set_Version(value: string);
    function get_Store: string;
    procedure set_Store(value: string);
    function get_StoreType: DNWebExtensionStoreType;
    procedure set_StoreType(value: DNWebExtensionStoreType);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Id: string read get_Id write set_Id;
    property Version: string read get_Version write set_Version;
    property Store: string read get_Store write set_Store;
    property StoreType: DNWebExtensionStoreType read get_StoreType write set_StoreType;
  end;

  TDNWebExtensionReference = class(TDNGenericImport<DNWebExtensionReferenceClass, DNWebExtensionReference>) end;

  //-------------namespace: Aspose.Words----------------
  DNDocumentReaderPluginLoadExceptionClass = interface(DDN.mscorlib.DNExceptionClass)
  ['{633DC452-DD1F-5FB8-A121-DC94499FB1E3}']
  end;

  [DNTypeName('Aspose.Words.DocumentReaderPluginLoadException')]
  DNDocumentReaderPluginLoadException = interface(DDN.mscorlib.DNException)
  ['{1947A36C-6F85-3329-B7AA-1952FB428107}']
  { getters & setters } 

    function get_Message: string;
    function get_Data: DDN.mscorlib.DNIDictionary;
    function get_InnerException: DDN.mscorlib.DNException;
    function get_TargetSite: DDN.mscorlib.DNMethodBase;
    function get_StackTrace: string;
    function get_HelpLink: string;
    procedure set_HelpLink(value: string);
    function get_Source: string;
    procedure set_Source(value: string);
    function get_HResult: Int32;

  { methods } 

    function GetBaseException: DDN.mscorlib.DNException;
    function ToString: string;
    procedure GetObjectData(info: DDN.mscorlib.DNSerializationInfo; context: DDN.mscorlib.DNStreamingContext);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    property Message: string read get_Message;
    property Data: DDN.mscorlib.DNIDictionary read get_Data;
    property InnerException: DDN.mscorlib.DNException read get_InnerException;
    property TargetSite: DDN.mscorlib.DNMethodBase read get_TargetSite;
    property StackTrace: string read get_StackTrace;
    property HelpLink: string read get_HelpLink write set_HelpLink;
    property Source: string read get_Source write set_Source;
    property HResult: Int32 read get_HResult;
  end;

  TDNDocumentReaderPluginLoadException = class(TDNGenericImport<DNDocumentReaderPluginLoadExceptionClass, DNDocumentReaderPluginLoadException>) end;

  //-------------namespace: Aspose.Words----------------
  DNFileCorruptedExceptionClass = interface(DDN.mscorlib.DNExceptionClass)
  ['{4A124324-7413-5159-B2D1-ABC8EE8A64BB}']
  end;

  [DNTypeName('Aspose.Words.FileCorruptedException')]
  DNFileCorruptedException = interface(DDN.mscorlib.DNException)
  ['{B45F1E92-2D5C-3C8A-8302-68A3BE9D4CD7}']
  { getters & setters } 

    function get_Message: string;
    function get_Data: DDN.mscorlib.DNIDictionary;
    function get_InnerException: DDN.mscorlib.DNException;
    function get_TargetSite: DDN.mscorlib.DNMethodBase;
    function get_StackTrace: string;
    function get_HelpLink: string;
    procedure set_HelpLink(value: string);
    function get_Source: string;
    procedure set_Source(value: string);
    function get_HResult: Int32;

  { methods } 

    function GetBaseException: DDN.mscorlib.DNException;
    function ToString: string;
    procedure GetObjectData(info: DDN.mscorlib.DNSerializationInfo; context: DDN.mscorlib.DNStreamingContext);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    property Message: string read get_Message;
    property Data: DDN.mscorlib.DNIDictionary read get_Data;
    property InnerException: DDN.mscorlib.DNException read get_InnerException;
    property TargetSite: DDN.mscorlib.DNMethodBase read get_TargetSite;
    property StackTrace: string read get_StackTrace;
    property HelpLink: string read get_HelpLink write set_HelpLink;
    property Source: string read get_Source write set_Source;
    property HResult: Int32 read get_HResult;
  end;

  TDNFileCorruptedException = class(TDNGenericImport<DNFileCorruptedExceptionClass, DNFileCorruptedException>) end;

  //-------------namespace: Aspose.Words----------------
  DNIncorrectPasswordExceptionClass = interface(DDN.mscorlib.DNExceptionClass)
  ['{CB4EC97C-3B85-5867-B9E3-51CC190A26FC}']
  end;

  [DNTypeName('Aspose.Words.IncorrectPasswordException')]
  DNIncorrectPasswordException = interface(DDN.mscorlib.DNException)
  ['{C2075551-FF3D-36E6-95E2-D5F4E77BAD77}']
  { getters & setters } 

    function get_Message: string;
    function get_Data: DDN.mscorlib.DNIDictionary;
    function get_InnerException: DDN.mscorlib.DNException;
    function get_TargetSite: DDN.mscorlib.DNMethodBase;
    function get_StackTrace: string;
    function get_HelpLink: string;
    procedure set_HelpLink(value: string);
    function get_Source: string;
    procedure set_Source(value: string);
    function get_HResult: Int32;

  { methods } 

    function GetBaseException: DDN.mscorlib.DNException;
    function ToString: string;
    procedure GetObjectData(info: DDN.mscorlib.DNSerializationInfo; context: DDN.mscorlib.DNStreamingContext);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    property Message: string read get_Message;
    property Data: DDN.mscorlib.DNIDictionary read get_Data;
    property InnerException: DDN.mscorlib.DNException read get_InnerException;
    property TargetSite: DDN.mscorlib.DNMethodBase read get_TargetSite;
    property StackTrace: string read get_StackTrace;
    property HelpLink: string read get_HelpLink write set_HelpLink;
    property Source: string read get_Source write set_Source;
    property HResult: Int32 read get_HResult;
  end;

  TDNIncorrectPasswordException = class(TDNGenericImport<DNIncorrectPasswordExceptionClass, DNIncorrectPasswordException>) end;

  //-------------namespace: Aspose.Words----------------
  DNUnsupportedFileFormatExceptionClass = interface(DDN.mscorlib.DNExceptionClass)
  ['{8094CDC7-5367-556E-BF54-F97FAC524F9B}']
  end;

  [DNTypeName('Aspose.Words.UnsupportedFileFormatException')]
  DNUnsupportedFileFormatException = interface(DDN.mscorlib.DNException)
  ['{0B701103-861E-39CD-BE2E-0780C220C4B9}']
  { getters & setters } 

    function get_Message: string;
    function get_Data: DDN.mscorlib.DNIDictionary;
    function get_InnerException: DDN.mscorlib.DNException;
    function get_TargetSite: DDN.mscorlib.DNMethodBase;
    function get_StackTrace: string;
    function get_HelpLink: string;
    procedure set_HelpLink(value: string);
    function get_Source: string;
    procedure set_Source(value: string);
    function get_HResult: Int32;

  { methods } 

    function GetBaseException: DDN.mscorlib.DNException;
    function ToString: string;
    procedure GetObjectData(info: DDN.mscorlib.DNSerializationInfo; context: DDN.mscorlib.DNStreamingContext);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    property Message: string read get_Message;
    property Data: DDN.mscorlib.DNIDictionary read get_Data;
    property InnerException: DDN.mscorlib.DNException read get_InnerException;
    property TargetSite: DDN.mscorlib.DNMethodBase read get_TargetSite;
    property StackTrace: string read get_StackTrace;
    property HelpLink: string read get_HelpLink write set_HelpLink;
    property Source: string read get_Source write set_Source;
    property HResult: Int32 read get_HResult;
  end;

  TDNUnsupportedFileFormatException = class(TDNGenericImport<DNUnsupportedFileFormatExceptionClass, DNUnsupportedFileFormatException>) end;

  //-------------namespace: Aspose.Words.Rendering----------------
  DNAsposeWordsPrintDocumentClass = interface(DNObjectClass)
  ['{CD711D5D-37C5-52AD-B2D7-07931D08E3F2}']
  { constructors } 

    {class} function init(document: DNDocument): DNAsposeWordsPrintDocument;

  end;

  [DNTypeName('Aspose.Words.Rendering.AsposeWordsPrintDocument')]
  DNAsposeWordsPrintDocument = interface(DNObject)
  ['{8220A5D5-3C09-39B6-AF68-72C0E6810D8B}']
  { getters & setters } 

    function get_DefaultPageSettings: DDN.System.Drawing.DNPageSettings;
    procedure set_DefaultPageSettings(value: DDN.System.Drawing.DNPageSettings);
    function get_DocumentName: string;
    procedure set_DocumentName(value: string);
    function get_OriginAtMargins: Boolean;
    procedure set_OriginAtMargins(value: Boolean);
    function get_PrintController: DDN.System.Drawing.DNPrintController;
    procedure set_PrintController(value: DDN.System.Drawing.DNPrintController);
    function get_PrinterSettings: DDN.System.Drawing.DNPrinterSettings;
    procedure set_PrinterSettings(value: DDN.System.Drawing.DNPrinterSettings);
    function get_Site: DDN.System.DNISite;
    procedure set_Site(value: DDN.System.DNISite);
    function get_Container: DDN.System.DNIContainer;

  { events } 

    procedure add_BeginPrint(value: DDN.System.Drawing.DNPrintEventHandler);
    procedure remove_BeginPrint(value: DDN.System.Drawing.DNPrintEventHandler);
    procedure add_EndPrint(value: DDN.System.Drawing.DNPrintEventHandler);
    procedure remove_EndPrint(value: DDN.System.Drawing.DNPrintEventHandler);
    procedure add_PrintPage(value: DDN.System.Drawing.DNPrintPageEventHandler);
    procedure remove_PrintPage(value: DDN.System.Drawing.DNPrintPageEventHandler);
    procedure add_QueryPageSettings(value: DDN.System.Drawing.DNQueryPageSettingsEventHandler);
    procedure remove_QueryPageSettings(value: DDN.System.Drawing.DNQueryPageSettingsEventHandler);
    procedure add_Disposed(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Disposed(value: DDN.mscorlib.DNEventHandler);

  { methods } 

    procedure CachePrinterSettings;
    procedure Print;
    function ToString: string;
    procedure Dispose;
    function GetLifetimeService: DDN.mscorlib.DNObject;
    function InitializeLifetimeService: DDN.mscorlib.DNObject;
    function CreateObjRef(requestedType: DDN.mscorlib.DNType): DDN.mscorlib.DNObjRef;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    property DefaultPageSettings: DDN.System.Drawing.DNPageSettings read get_DefaultPageSettings write set_DefaultPageSettings;
    property DocumentName: string read get_DocumentName write set_DocumentName;
    property OriginAtMargins: Boolean read get_OriginAtMargins write set_OriginAtMargins;
    property PrintController: DDN.System.Drawing.DNPrintController read get_PrintController write set_PrintController;
    property PrinterSettings: DDN.System.Drawing.DNPrinterSettings read get_PrinterSettings write set_PrinterSettings;
    property Site: DDN.System.DNISite read get_Site write set_Site;
    property Container: DDN.System.DNIContainer read get_Container;
  end;

  TDNAsposeWordsPrintDocument = class(TDNGenericImport<DNAsposeWordsPrintDocumentClass, DNAsposeWordsPrintDocument>) end;


implementation

end.
