//----------------------------------------------------------------------------
//  System.ComponentModel.DataAnnotations.dll: System.ComponentModel.DataAnnotations, Version=4.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35
//----------------------------------------------------------------------------
//  The code is automatically generated by the GenCodeNET tool.
//----------------------------------------------------------------------------
//  .NET Framework 4.x
//----------------------------------------------------------------------------
//  UnitName: DDN.System.ComponentModel.DataAnnotations
//  Author: ying32
//----------------------------------------------------------------------------

unit DDN.System.ComponentModel.DataAnnotations;

{$IFDEF FPC}
  {$mode delphi}//{$H+}
  {$modeswitch advancedrecords}
  {$modeswitch prefixedattributes} // Custom attributes featureï¼Œfpc3.2.2+
{$ENDIF}

interface

uses
  DDN.Runtime,
  DDN.mscorlib,
  DDN.System;

type

{ enums }

  //-------------namespace: System.ComponentModel.DataAnnotations----------------
  [DNTypeName('System.ComponentModel.DataAnnotations.DataType')]
  DNDataType = type Integer;
  DNDataTypeHelper = record helper for DNDataType
  public const
    Custom = 0;
    DateTime = 1;
    Date = 2;
    Time = 3;
    Duration = 4;
    PhoneNumber = 5;
    Currency = 6;
    Text = 7;
    Html = 8;
    MultilineText = 9;
    EmailAddress = 10;
    Password = 11;
    Url = 12;
    ImageUrl = 13;
    CreditCard = 14;
    PostalCode = 15;
    Upload = 16;
  end;


  //-------------namespace: System.ComponentModel.DataAnnotations.Schema----------------
  [DNTypeName('System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption')]
  DNDatabaseGeneratedOption = type Integer;
  DNDatabaseGeneratedOptionHelper = record helper for DNDatabaseGeneratedOption
  public const
    None = 0;
    Identity = 1;
    Computed = 2;
  end;




type


{ declares }

  DNIValidatableObject = interface; // type: System.ComponentModel.DataAnnotations.IValidatableObject, namespace: System.ComponentModel.DataAnnotations
  DNAssociationAttribute = interface; // type: System.ComponentModel.DataAnnotations.AssociationAttribute, namespace: System.ComponentModel.DataAnnotations
  DNBindableTypeAttribute = interface; // type: System.ComponentModel.DataAnnotations.BindableTypeAttribute, namespace: System.ComponentModel.DataAnnotations
  DNConcurrencyCheckAttribute = interface; // type: System.ComponentModel.DataAnnotations.ConcurrencyCheckAttribute, namespace: System.ComponentModel.DataAnnotations
  DNDisplayAttribute = interface; // type: System.ComponentModel.DataAnnotations.DisplayAttribute, namespace: System.ComponentModel.DataAnnotations
  DNDisplayColumnAttribute = interface; // type: System.ComponentModel.DataAnnotations.DisplayColumnAttribute, namespace: System.ComponentModel.DataAnnotations
  DNDisplayFormatAttribute = interface; // type: System.ComponentModel.DataAnnotations.DisplayFormatAttribute, namespace: System.ComponentModel.DataAnnotations
  DNEditableAttribute = interface; // type: System.ComponentModel.DataAnnotations.EditableAttribute, namespace: System.ComponentModel.DataAnnotations
  DNFilterUIHintAttribute = interface; // type: System.ComponentModel.DataAnnotations.FilterUIHintAttribute, namespace: System.ComponentModel.DataAnnotations
  DNKeyAttribute = interface; // type: System.ComponentModel.DataAnnotations.KeyAttribute, namespace: System.ComponentModel.DataAnnotations
  DNMetadataTypeAttribute = interface; // type: System.ComponentModel.DataAnnotations.MetadataTypeAttribute, namespace: System.ComponentModel.DataAnnotations
  DNScaffoldColumnAttribute = interface; // type: System.ComponentModel.DataAnnotations.ScaffoldColumnAttribute, namespace: System.ComponentModel.DataAnnotations
  DNScaffoldTableAttribute = interface; // type: System.ComponentModel.DataAnnotations.ScaffoldTableAttribute, namespace: System.ComponentModel.DataAnnotations
  DNColumnAttribute = interface; // type: System.ComponentModel.DataAnnotations.Schema.ColumnAttribute, namespace: System.ComponentModel.DataAnnotations.Schema
  DNComplexTypeAttribute = interface; // type: System.ComponentModel.DataAnnotations.Schema.ComplexTypeAttribute, namespace: System.ComponentModel.DataAnnotations.Schema
  DNDatabaseGeneratedAttribute = interface; // type: System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedAttribute, namespace: System.ComponentModel.DataAnnotations.Schema
  DNForeignKeyAttribute = interface; // type: System.ComponentModel.DataAnnotations.Schema.ForeignKeyAttribute, namespace: System.ComponentModel.DataAnnotations.Schema
  DNInversePropertyAttribute = interface; // type: System.ComponentModel.DataAnnotations.Schema.InversePropertyAttribute, namespace: System.ComponentModel.DataAnnotations.Schema
  DNNotMappedAttribute = interface; // type: System.ComponentModel.DataAnnotations.Schema.NotMappedAttribute, namespace: System.ComponentModel.DataAnnotations.Schema
  DNTableAttribute = interface; // type: System.ComponentModel.DataAnnotations.Schema.TableAttribute, namespace: System.ComponentModel.DataAnnotations.Schema
  DNTimestampAttribute = interface; // type: System.ComponentModel.DataAnnotations.TimestampAttribute, namespace: System.ComponentModel.DataAnnotations
  DNUIHintAttribute = interface; // type: System.ComponentModel.DataAnnotations.UIHintAttribute, namespace: System.ComponentModel.DataAnnotations
  DNValidationAttribute = interface; // type: System.ComponentModel.DataAnnotations.ValidationAttribute, namespace: System.ComponentModel.DataAnnotations
  DNCompareAttribute = interface; // type: System.ComponentModel.DataAnnotations.CompareAttribute, namespace: System.ComponentModel.DataAnnotations
  DNCustomValidationAttribute = interface; // type: System.ComponentModel.DataAnnotations.CustomValidationAttribute, namespace: System.ComponentModel.DataAnnotations
  DNDataTypeAttribute = interface; // type: System.ComponentModel.DataAnnotations.DataTypeAttribute, namespace: System.ComponentModel.DataAnnotations
  DNCreditCardAttribute = interface; // type: System.ComponentModel.DataAnnotations.CreditCardAttribute, namespace: System.ComponentModel.DataAnnotations
  DNEmailAddressAttribute = interface; // type: System.ComponentModel.DataAnnotations.EmailAddressAttribute, namespace: System.ComponentModel.DataAnnotations
  DNEnumDataTypeAttribute = interface; // type: System.ComponentModel.DataAnnotations.EnumDataTypeAttribute, namespace: System.ComponentModel.DataAnnotations
  DNFileExtensionsAttribute = interface; // type: System.ComponentModel.DataAnnotations.FileExtensionsAttribute, namespace: System.ComponentModel.DataAnnotations
  DNPhoneAttribute = interface; // type: System.ComponentModel.DataAnnotations.PhoneAttribute, namespace: System.ComponentModel.DataAnnotations
  DNUrlAttribute = interface; // type: System.ComponentModel.DataAnnotations.UrlAttribute, namespace: System.ComponentModel.DataAnnotations
  DNMaxLengthAttribute = interface; // type: System.ComponentModel.DataAnnotations.MaxLengthAttribute, namespace: System.ComponentModel.DataAnnotations
  DNMinLengthAttribute = interface; // type: System.ComponentModel.DataAnnotations.MinLengthAttribute, namespace: System.ComponentModel.DataAnnotations
  DNRangeAttribute = interface; // type: System.ComponentModel.DataAnnotations.RangeAttribute, namespace: System.ComponentModel.DataAnnotations
  DNRegularExpressionAttribute = interface; // type: System.ComponentModel.DataAnnotations.RegularExpressionAttribute, namespace: System.ComponentModel.DataAnnotations
  DNRequiredAttribute = interface; // type: System.ComponentModel.DataAnnotations.RequiredAttribute, namespace: System.ComponentModel.DataAnnotations
  DNStringLengthAttribute = interface; // type: System.ComponentModel.DataAnnotations.StringLengthAttribute, namespace: System.ComponentModel.DataAnnotations
  DNValidationContext = interface; // type: System.ComponentModel.DataAnnotations.ValidationContext, namespace: System.ComponentModel.DataAnnotations
  DNValidationResult = interface; // type: System.ComponentModel.DataAnnotations.ValidationResult, namespace: System.ComponentModel.DataAnnotations
  DNValidator = interface; // type: System.ComponentModel.DataAnnotations.Validator, namespace: System.ComponentModel.DataAnnotations
  DNAssociatedMetadataTypeTypeDescriptionProvider = interface; // type: System.ComponentModel.DataAnnotations.AssociatedMetadataTypeTypeDescriptionProvider, namespace: System.ComponentModel.DataAnnotations
  DNValidationException = interface; // type: System.ComponentModel.DataAnnotations.ValidationException, namespace: System.ComponentModel.DataAnnotations


{ objects }

  //-------------namespace: System.ComponentModel.DataAnnotations----------------
  [DNTypeName('System.ComponentModel.DataAnnotations.IValidatableObject')]
  DNIValidatableObject = interface(DDN.mscorlib.DNObject)
  ['{FEC73482-FAD1-339F-AEAF-FB7C715B7D08}']
  { methods } 

    function Validate(validationContext: DNValidationContext): DDN.mscorlib.DNIEnumerable<DNValidationResult>;

  end;

  //-------------namespace: System.ComponentModel.DataAnnotations----------------
  DNAssociationAttributeClass = interface(DDN.mscorlib.DNAttributeClass)
  ['{A00ED2FB-5600-59C0-9867-62962336C84E}']
  { constructors } 

    {class} function init(name: string; thisKey: string; otherKey: string): DNAssociationAttribute;

  end;

  [DNTypeName('System.ComponentModel.DataAnnotations.AssociationAttribute')]
  DNAssociationAttribute = interface(DDN.mscorlib.DNAttribute)
  ['{505CB5D6-BD2C-3930-B557-6877FFD39229}']
  { getters & setters } 

    function get_Name: string;
    function get_ThisKey: string;
    function get_OtherKey: string;
    function get_IsForeignKey: Boolean;
    procedure set_IsForeignKey(value: Boolean);
    function get_ThisKeyMembers: DDN.mscorlib.DNIEnumerable<string>;
    function get_OtherKeyMembers: DDN.mscorlib.DNIEnumerable<string>;
    function get_TypeId: DDN.mscorlib.DNObject;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DDN.mscorlib.DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Name: string read get_Name;
    property ThisKey: string read get_ThisKey;
    property OtherKey: string read get_OtherKey;
    property IsForeignKey: Boolean read get_IsForeignKey write set_IsForeignKey;
    property ThisKeyMembers: DDN.mscorlib.DNIEnumerable<string> read get_ThisKeyMembers;
    property OtherKeyMembers: DDN.mscorlib.DNIEnumerable<string> read get_OtherKeyMembers;
    property TypeId: DDN.mscorlib.DNObject read get_TypeId;
  end;

  TDNAssociationAttribute = class(TDNGenericImport<DNAssociationAttributeClass, DNAssociationAttribute>) end;

  //-------------namespace: System.ComponentModel.DataAnnotations----------------
  DNBindableTypeAttributeClass = interface(DDN.mscorlib.DNAttributeClass)
  ['{2FA4B21F-A7BA-5DF1-B24E-AEBC41F37201}']
  { constructors } 

    {class} function init: DNBindableTypeAttribute;

  end;

  [DNTypeName('System.ComponentModel.DataAnnotations.BindableTypeAttribute')]
  DNBindableTypeAttribute = interface(DDN.mscorlib.DNAttribute)
  ['{34CA8A83-0DB5-3907-B762-23C7E92B3901}']
  { getters & setters } 

    function get_IsBindable: Boolean;
    procedure set_IsBindable(value: Boolean);
    function get_TypeId: DDN.mscorlib.DNObject;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DDN.mscorlib.DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property IsBindable: Boolean read get_IsBindable write set_IsBindable;
    property TypeId: DDN.mscorlib.DNObject read get_TypeId;
  end;

  TDNBindableTypeAttribute = class(TDNGenericImport<DNBindableTypeAttributeClass, DNBindableTypeAttribute>) end;

  //-------------namespace: System.ComponentModel.DataAnnotations----------------
  DNConcurrencyCheckAttributeClass = interface(DDN.mscorlib.DNAttributeClass)
  ['{1D3E64AB-3825-5F49-BAA9-23ACFAE79A89}']
  { constructors } 

    {class} function init: DNConcurrencyCheckAttribute;

  end;

  [DNTypeName('System.ComponentModel.DataAnnotations.ConcurrencyCheckAttribute')]
  DNConcurrencyCheckAttribute = interface(DDN.mscorlib.DNAttribute)
  ['{15B66C64-0770-3170-BF09-FED4005D813B}']
  { getters & setters } 

    function get_TypeId: DDN.mscorlib.DNObject;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DDN.mscorlib.DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property TypeId: DDN.mscorlib.DNObject read get_TypeId;
  end;

  TDNConcurrencyCheckAttribute = class(TDNGenericImport<DNConcurrencyCheckAttributeClass, DNConcurrencyCheckAttribute>) end;

  //-------------namespace: System.ComponentModel.DataAnnotations----------------
  DNDisplayAttributeClass = interface(DDN.mscorlib.DNAttributeClass)
  ['{9F961B36-EAFD-5CCC-A771-860B15A7190A}']
  { constructors } 

    {class} function init: DNDisplayAttribute;

  end;

  [DNTypeName('System.ComponentModel.DataAnnotations.DisplayAttribute')]
  DNDisplayAttribute = interface(DDN.mscorlib.DNAttribute)
  ['{C458178A-090C-3176-8897-A34E3D717B09}']
  { getters & setters } 

    function get_ShortName: string;
    procedure set_ShortName(value: string);
    function get_Name: string;
    procedure set_Name(value: string);
    function get_Description: string;
    procedure set_Description(value: string);
    function get_Prompt: string;
    procedure set_Prompt(value: string);
    function get_GroupName: string;
    procedure set_GroupName(value: string);
    function get_ResourceType: DDN.mscorlib.DNType;
    procedure set_ResourceType(value: DDN.mscorlib.DNType);
    function get_AutoGenerateField: Boolean;
    procedure set_AutoGenerateField(value: Boolean);
    function get_AutoGenerateFilter: Boolean;
    procedure set_AutoGenerateFilter(value: Boolean);
    function get_Order: Int32;
    procedure set_Order(value: Int32);
    function get_TypeId: DDN.mscorlib.DNObject;

  { methods } 

    function GetShortName: string;
    function GetName: string;
    function GetDescription: string;
    function GetPrompt: string;
    function GetGroupName: string;
    function GetAutoGenerateField: DDN.mscorlib.DNNullable<Boolean>;
    function GetAutoGenerateFilter: DDN.mscorlib.DNNullable<Boolean>;
    function GetOrder: DDN.mscorlib.DNNullable<Int32>;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DDN.mscorlib.DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property ShortName: string read get_ShortName write set_ShortName;
    property Name: string read get_Name write set_Name;
    property Description: string read get_Description write set_Description;
    property Prompt: string read get_Prompt write set_Prompt;
    property GroupName: string read get_GroupName write set_GroupName;
    property ResourceType: DDN.mscorlib.DNType read get_ResourceType write set_ResourceType;
    property AutoGenerateField: Boolean read get_AutoGenerateField write set_AutoGenerateField;
    property AutoGenerateFilter: Boolean read get_AutoGenerateFilter write set_AutoGenerateFilter;
    property Order: Int32 read get_Order write set_Order;
    property TypeId: DDN.mscorlib.DNObject read get_TypeId;
  end;

  TDNDisplayAttribute = class(TDNGenericImport<DNDisplayAttributeClass, DNDisplayAttribute>) end;

  //-------------namespace: System.ComponentModel.DataAnnotations----------------
  DNDisplayColumnAttributeClass = interface(DDN.mscorlib.DNAttributeClass)
  ['{A82CAC57-8BC6-5261-95E7-4C1C1275C67C}']
  { constructors } 

    {class} function init(displayColumn: string): DNDisplayColumnAttribute; overload;
    {class} function init(displayColumn: string; sortColumn: string): DNDisplayColumnAttribute; overload;
    {class} function init(displayColumn: string; sortColumn: string; sortDescending: Boolean): DNDisplayColumnAttribute; overload;

  end;

  [DNTypeName('System.ComponentModel.DataAnnotations.DisplayColumnAttribute')]
  DNDisplayColumnAttribute = interface(DDN.mscorlib.DNAttribute)
  ['{96567ADC-2AD8-3CFB-97A2-0BD44DA477B2}']
  { getters & setters } 

    function get_DisplayColumn: string;
    function get_SortColumn: string;
    function get_SortDescending: Boolean;
    function get_TypeId: DDN.mscorlib.DNObject;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DDN.mscorlib.DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property DisplayColumn: string read get_DisplayColumn;
    property SortColumn: string read get_SortColumn;
    property SortDescending: Boolean read get_SortDescending;
    property TypeId: DDN.mscorlib.DNObject read get_TypeId;
  end;

  TDNDisplayColumnAttribute = class(TDNGenericImport<DNDisplayColumnAttributeClass, DNDisplayColumnAttribute>) end;

  //-------------namespace: System.ComponentModel.DataAnnotations----------------
  DNDisplayFormatAttributeClass = interface(DDN.mscorlib.DNAttributeClass)
  ['{FC6A5CC2-C93D-59D0-A805-7B07028CCBE1}']
  { constructors } 

    {class} function init: DNDisplayFormatAttribute;

  end;

  [DNTypeName('System.ComponentModel.DataAnnotations.DisplayFormatAttribute')]
  DNDisplayFormatAttribute = interface(DDN.mscorlib.DNAttribute)
  ['{0AA2ECF9-934A-34C5-94C8-221700D2D0F0}']
  { getters & setters } 

    function get_DataFormatString: string;
    procedure set_DataFormatString(value: string);
    function get_NullDisplayText: string;
    procedure set_NullDisplayText(value: string);
    function get_ConvertEmptyStringToNull: Boolean;
    procedure set_ConvertEmptyStringToNull(value: Boolean);
    function get_ApplyFormatInEditMode: Boolean;
    procedure set_ApplyFormatInEditMode(value: Boolean);
    function get_HtmlEncode: Boolean;
    procedure set_HtmlEncode(value: Boolean);
    function get_TypeId: DDN.mscorlib.DNObject;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DDN.mscorlib.DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property DataFormatString: string read get_DataFormatString write set_DataFormatString;
    property NullDisplayText: string read get_NullDisplayText write set_NullDisplayText;
    property ConvertEmptyStringToNull: Boolean read get_ConvertEmptyStringToNull write set_ConvertEmptyStringToNull;
    property ApplyFormatInEditMode: Boolean read get_ApplyFormatInEditMode write set_ApplyFormatInEditMode;
    property HtmlEncode: Boolean read get_HtmlEncode write set_HtmlEncode;
    property TypeId: DDN.mscorlib.DNObject read get_TypeId;
  end;

  TDNDisplayFormatAttribute = class(TDNGenericImport<DNDisplayFormatAttributeClass, DNDisplayFormatAttribute>) end;

  //-------------namespace: System.ComponentModel.DataAnnotations----------------
  DNEditableAttributeClass = interface(DDN.mscorlib.DNAttributeClass)
  ['{A3AF6857-FC3A-57FA-A79B-2ABEC1442135}']
  { constructors } 

    {class} function init(allowEdit: Boolean): DNEditableAttribute;

  end;

  [DNTypeName('System.ComponentModel.DataAnnotations.EditableAttribute')]
  DNEditableAttribute = interface(DDN.mscorlib.DNAttribute)
  ['{01BC5DE8-604A-3101-B6B8-F4881965ED57}']
  { getters & setters } 

    function get_AllowEdit: Boolean;
    function get_AllowInitialValue: Boolean;
    procedure set_AllowInitialValue(value: Boolean);
    function get_TypeId: DDN.mscorlib.DNObject;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DDN.mscorlib.DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property AllowEdit: Boolean read get_AllowEdit;
    property AllowInitialValue: Boolean read get_AllowInitialValue write set_AllowInitialValue;
    property TypeId: DDN.mscorlib.DNObject read get_TypeId;
  end;

  TDNEditableAttribute = class(TDNGenericImport<DNEditableAttributeClass, DNEditableAttribute>) end;

  //-------------namespace: System.ComponentModel.DataAnnotations----------------
  DNFilterUIHintAttributeClass = interface(DDN.mscorlib.DNAttributeClass)
  ['{852CBF73-3688-5FCB-A32C-2F7F4E339660}']
  { constructors } 

    {class} function init(filterUIHint: string): DNFilterUIHintAttribute; overload;
    {class} function init(filterUIHint: string; presentationLayer: string): DNFilterUIHintAttribute; overload;
    {class} function init(filterUIHint: string; presentationLayer: string; controlParameters: TArray<DDN.mscorlib.DNObject>): DNFilterUIHintAttribute; overload;

  end;

  [DNTypeName('System.ComponentModel.DataAnnotations.FilterUIHintAttribute')]
  DNFilterUIHintAttribute = interface(DDN.mscorlib.DNAttribute)
  ['{336C6A0B-F27B-33F8-A98B-E109842FFA07}']
  { getters & setters } 

    function get_FilterUIHint: string;
    function get_PresentationLayer: string;
    function get_ControlParameters: DDN.mscorlib.DNIDictionary<string, DDN.mscorlib.DNObject>;
    function get_TypeId: DDN.mscorlib.DNObject;

  { methods } 

    function GetHashCode: Int32;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function Match(obj: DDN.mscorlib.DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property FilterUIHint: string read get_FilterUIHint;
    property PresentationLayer: string read get_PresentationLayer;
    property ControlParameters: DDN.mscorlib.DNIDictionary<string, DDN.mscorlib.DNObject> read get_ControlParameters;
    property TypeId: DDN.mscorlib.DNObject read get_TypeId;
  end;

  TDNFilterUIHintAttribute = class(TDNGenericImport<DNFilterUIHintAttributeClass, DNFilterUIHintAttribute>) end;

  //-------------namespace: System.ComponentModel.DataAnnotations----------------
  DNKeyAttributeClass = interface(DDN.mscorlib.DNAttributeClass)
  ['{46B4D56D-D3F3-5FD9-BC50-97015B50D587}']
  { constructors } 

    {class} function init: DNKeyAttribute;

  end;

  [DNTypeName('System.ComponentModel.DataAnnotations.KeyAttribute')]
  DNKeyAttribute = interface(DDN.mscorlib.DNAttribute)
  ['{C1CEDDC4-1548-3C26-B2FD-51621AA6709A}']
  { getters & setters } 

    function get_TypeId: DDN.mscorlib.DNObject;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DDN.mscorlib.DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property TypeId: DDN.mscorlib.DNObject read get_TypeId;
  end;

  TDNKeyAttribute = class(TDNGenericImport<DNKeyAttributeClass, DNKeyAttribute>) end;

  //-------------namespace: System.ComponentModel.DataAnnotations----------------
  DNMetadataTypeAttributeClass = interface(DDN.mscorlib.DNAttributeClass)
  ['{16E3251E-7E4A-53B8-A47C-A278B32CE3CD}']
  { constructors } 

    {class} function init(metadataClassType: DDN.mscorlib.DNType): DNMetadataTypeAttribute;

  end;

  [DNTypeName('System.ComponentModel.DataAnnotations.MetadataTypeAttribute')]
  DNMetadataTypeAttribute = interface(DDN.mscorlib.DNAttribute)
  ['{BA47AD81-FE14-3098-B874-A1C02D66BE87}']
  { getters & setters } 

    function get_MetadataClassType: DDN.mscorlib.DNType;
    function get_TypeId: DDN.mscorlib.DNObject;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DDN.mscorlib.DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property MetadataClassType: DDN.mscorlib.DNType read get_MetadataClassType;
    property TypeId: DDN.mscorlib.DNObject read get_TypeId;
  end;

  TDNMetadataTypeAttribute = class(TDNGenericImport<DNMetadataTypeAttributeClass, DNMetadataTypeAttribute>) end;

  //-------------namespace: System.ComponentModel.DataAnnotations----------------
  DNScaffoldColumnAttributeClass = interface(DDN.mscorlib.DNAttributeClass)
  ['{4EF8E8F5-C7D4-5852-9135-63CD1DD28A2E}']
  { constructors } 

    {class} function init(scaffold: Boolean): DNScaffoldColumnAttribute;

  end;

  [DNTypeName('System.ComponentModel.DataAnnotations.ScaffoldColumnAttribute')]
  DNScaffoldColumnAttribute = interface(DDN.mscorlib.DNAttribute)
  ['{6BE1DF74-31E9-38BD-BF02-5CA97295F182}']
  { getters & setters } 

    function get_Scaffold: Boolean;
    function get_TypeId: DDN.mscorlib.DNObject;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DDN.mscorlib.DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Scaffold: Boolean read get_Scaffold;
    property TypeId: DDN.mscorlib.DNObject read get_TypeId;
  end;

  TDNScaffoldColumnAttribute = class(TDNGenericImport<DNScaffoldColumnAttributeClass, DNScaffoldColumnAttribute>) end;

  //-------------namespace: System.ComponentModel.DataAnnotations----------------
  DNScaffoldTableAttributeClass = interface(DDN.mscorlib.DNAttributeClass)
  ['{9878C6BB-139B-5D63-A63C-7E0CB0CB3061}']
  { constructors } 

    {class} function init(scaffold: Boolean): DNScaffoldTableAttribute;

  end;

  [DNTypeName('System.ComponentModel.DataAnnotations.ScaffoldTableAttribute')]
  DNScaffoldTableAttribute = interface(DDN.mscorlib.DNAttribute)
  ['{8DC703B7-9C77-37EC-BE43-A1C21A6BC9B5}']
  { getters & setters } 

    function get_Scaffold: Boolean;
    function get_TypeId: DDN.mscorlib.DNObject;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DDN.mscorlib.DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Scaffold: Boolean read get_Scaffold;
    property TypeId: DDN.mscorlib.DNObject read get_TypeId;
  end;

  TDNScaffoldTableAttribute = class(TDNGenericImport<DNScaffoldTableAttributeClass, DNScaffoldTableAttribute>) end;

  //-------------namespace: System.ComponentModel.DataAnnotations.Schema----------------
  DNColumnAttributeClass = interface(DDN.mscorlib.DNAttributeClass)
  ['{87D5B0F7-D18E-52FD-A8C8-3B1BC819C7AF}']
  { constructors } 

    {class} function init: DNColumnAttribute; overload;
    {class} function init(name: string): DNColumnAttribute; overload;

  end;

  [DNTypeName('System.ComponentModel.DataAnnotations.Schema.ColumnAttribute')]
  DNColumnAttribute = interface(DDN.mscorlib.DNAttribute)
  ['{48D30EB7-F488-3FC0-BED8-E459BFDB98FC}']
  { getters & setters } 

    function get_Name: string;
    function get_Order: Int32;
    procedure set_Order(value: Int32);
    function get_TypeName: string;
    procedure set_TypeName(value: string);
    function get_TypeId: DDN.mscorlib.DNObject;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DDN.mscorlib.DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Name: string read get_Name;
    property Order: Int32 read get_Order write set_Order;
    property TypeName: string read get_TypeName write set_TypeName;
    property TypeId: DDN.mscorlib.DNObject read get_TypeId;
  end;

  TDNColumnAttribute = class(TDNGenericImport<DNColumnAttributeClass, DNColumnAttribute>) end;

  //-------------namespace: System.ComponentModel.DataAnnotations.Schema----------------
  DNComplexTypeAttributeClass = interface(DDN.mscorlib.DNAttributeClass)
  ['{8993006F-1FDA-5A53-AB1D-45887D46E65C}']
  { constructors } 

    {class} function init: DNComplexTypeAttribute;

  end;

  [DNTypeName('System.ComponentModel.DataAnnotations.Schema.ComplexTypeAttribute')]
  DNComplexTypeAttribute = interface(DDN.mscorlib.DNAttribute)
  ['{9CD25314-21C7-3794-820B-5BF6AFBC520B}']
  { getters & setters } 

    function get_TypeId: DDN.mscorlib.DNObject;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DDN.mscorlib.DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property TypeId: DDN.mscorlib.DNObject read get_TypeId;
  end;

  TDNComplexTypeAttribute = class(TDNGenericImport<DNComplexTypeAttributeClass, DNComplexTypeAttribute>) end;

  //-------------namespace: System.ComponentModel.DataAnnotations.Schema----------------
  DNDatabaseGeneratedAttributeClass = interface(DDN.mscorlib.DNAttributeClass)
  ['{71BEF30A-41C3-53AB-80AD-6F00D88ABCC2}']
  { constructors } 

    {class} function init(databaseGeneratedOption: DNDatabaseGeneratedOption): DNDatabaseGeneratedAttribute;

  end;

  [DNTypeName('System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedAttribute')]
  DNDatabaseGeneratedAttribute = interface(DDN.mscorlib.DNAttribute)
  ['{81C27FA6-AE95-3E0C-AD60-3C965BC9064D}']
  { getters & setters } 

    function get_DatabaseGeneratedOption: DNDatabaseGeneratedOption;
    function get_TypeId: DDN.mscorlib.DNObject;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DDN.mscorlib.DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property DatabaseGeneratedOption: DNDatabaseGeneratedOption read get_DatabaseGeneratedOption;
    property TypeId: DDN.mscorlib.DNObject read get_TypeId;
  end;

  TDNDatabaseGeneratedAttribute = class(TDNGenericImport<DNDatabaseGeneratedAttributeClass, DNDatabaseGeneratedAttribute>) end;

  //-------------namespace: System.ComponentModel.DataAnnotations.Schema----------------
  DNForeignKeyAttributeClass = interface(DDN.mscorlib.DNAttributeClass)
  ['{81E42CF8-D0F0-5956-8607-F62FFF7983F6}']
  { constructors } 

    {class} function init(name: string): DNForeignKeyAttribute;

  end;

  [DNTypeName('System.ComponentModel.DataAnnotations.Schema.ForeignKeyAttribute')]
  DNForeignKeyAttribute = interface(DDN.mscorlib.DNAttribute)
  ['{1A013D1B-AF84-349C-8698-89C6C06FC1D1}']
  { getters & setters } 

    function get_Name: string;
    function get_TypeId: DDN.mscorlib.DNObject;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DDN.mscorlib.DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Name: string read get_Name;
    property TypeId: DDN.mscorlib.DNObject read get_TypeId;
  end;

  TDNForeignKeyAttribute = class(TDNGenericImport<DNForeignKeyAttributeClass, DNForeignKeyAttribute>) end;

  //-------------namespace: System.ComponentModel.DataAnnotations.Schema----------------
  DNInversePropertyAttributeClass = interface(DDN.mscorlib.DNAttributeClass)
  ['{7C500502-6F62-5284-930D-C80C09C56160}']
  { constructors } 

    {class} function init(&property: string): DNInversePropertyAttribute;

  end;

  [DNTypeName('System.ComponentModel.DataAnnotations.Schema.InversePropertyAttribute')]
  DNInversePropertyAttribute = interface(DDN.mscorlib.DNAttribute)
  ['{A1087EB9-2CB5-30E8-93B3-7609218C43F4}']
  { getters & setters } 

    function get_Property: string;
    function get_TypeId: DDN.mscorlib.DNObject;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DDN.mscorlib.DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property &Property: string read get_Property;
    property TypeId: DDN.mscorlib.DNObject read get_TypeId;
  end;

  TDNInversePropertyAttribute = class(TDNGenericImport<DNInversePropertyAttributeClass, DNInversePropertyAttribute>) end;

  //-------------namespace: System.ComponentModel.DataAnnotations.Schema----------------
  DNNotMappedAttributeClass = interface(DDN.mscorlib.DNAttributeClass)
  ['{62929748-5467-5938-8487-5B63EDE09D50}']
  { constructors } 

    {class} function init: DNNotMappedAttribute;

  end;

  [DNTypeName('System.ComponentModel.DataAnnotations.Schema.NotMappedAttribute')]
  DNNotMappedAttribute = interface(DDN.mscorlib.DNAttribute)
  ['{359CFFD0-8FC3-3825-B578-80A1516A1730}']
  { getters & setters } 

    function get_TypeId: DDN.mscorlib.DNObject;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DDN.mscorlib.DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property TypeId: DDN.mscorlib.DNObject read get_TypeId;
  end;

  TDNNotMappedAttribute = class(TDNGenericImport<DNNotMappedAttributeClass, DNNotMappedAttribute>) end;

  //-------------namespace: System.ComponentModel.DataAnnotations.Schema----------------
  DNTableAttributeClass = interface(DDN.mscorlib.DNAttributeClass)
  ['{D945F621-69D0-538D-A795-AAE683F6266F}']
  { constructors } 

    {class} function init(name: string): DNTableAttribute;

  end;

  [DNTypeName('System.ComponentModel.DataAnnotations.Schema.TableAttribute')]
  DNTableAttribute = interface(DDN.mscorlib.DNAttribute)
  ['{A627724F-A76F-3E6E-963E-8460AEF4870B}']
  { getters & setters } 

    function get_Name: string;
    function get_Schema: string;
    procedure set_Schema(value: string);
    function get_TypeId: DDN.mscorlib.DNObject;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DDN.mscorlib.DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Name: string read get_Name;
    property Schema: string read get_Schema write set_Schema;
    property TypeId: DDN.mscorlib.DNObject read get_TypeId;
  end;

  TDNTableAttribute = class(TDNGenericImport<DNTableAttributeClass, DNTableAttribute>) end;

  //-------------namespace: System.ComponentModel.DataAnnotations----------------
  DNTimestampAttributeClass = interface(DDN.mscorlib.DNAttributeClass)
  ['{8A7E743C-227A-5211-91E3-76E1F968B68C}']
  { constructors } 

    {class} function init: DNTimestampAttribute;

  end;

  [DNTypeName('System.ComponentModel.DataAnnotations.TimestampAttribute')]
  DNTimestampAttribute = interface(DDN.mscorlib.DNAttribute)
  ['{51F4048A-A3EF-3F85-A795-EF2C00329DF4}']
  { getters & setters } 

    function get_TypeId: DDN.mscorlib.DNObject;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DDN.mscorlib.DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property TypeId: DDN.mscorlib.DNObject read get_TypeId;
  end;

  TDNTimestampAttribute = class(TDNGenericImport<DNTimestampAttributeClass, DNTimestampAttribute>) end;

  //-------------namespace: System.ComponentModel.DataAnnotations----------------
  DNUIHintAttributeClass = interface(DDN.mscorlib.DNAttributeClass)
  ['{048594A7-87D3-5C5B-9BAD-1AB300F00991}']
  { constructors } 

    {class} function init(uiHint: string): DNUIHintAttribute; overload;
    {class} function init(uiHint: string; presentationLayer: string): DNUIHintAttribute; overload;
    {class} function init(uiHint: string; presentationLayer: string; controlParameters: TArray<DDN.mscorlib.DNObject>): DNUIHintAttribute; overload;

  end;

  [DNTypeName('System.ComponentModel.DataAnnotations.UIHintAttribute')]
  DNUIHintAttribute = interface(DDN.mscorlib.DNAttribute)
  ['{5DF4FAFB-5CAF-3BC5-A497-9A6E30CB9FF9}']
  { getters & setters } 

    function get_UIHint: string;
    function get_PresentationLayer: string;
    function get_ControlParameters: DDN.mscorlib.DNIDictionary<string, DDN.mscorlib.DNObject>;
    function get_TypeId: DDN.mscorlib.DNObject;

  { methods } 

    function GetHashCode: Int32;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function Match(obj: DDN.mscorlib.DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property UIHint: string read get_UIHint;
    property PresentationLayer: string read get_PresentationLayer;
    property ControlParameters: DDN.mscorlib.DNIDictionary<string, DDN.mscorlib.DNObject> read get_ControlParameters;
    property TypeId: DDN.mscorlib.DNObject read get_TypeId;
  end;

  TDNUIHintAttribute = class(TDNGenericImport<DNUIHintAttributeClass, DNUIHintAttribute>) end;

  //-------------namespace: System.ComponentModel.DataAnnotations----------------
  DNValidationAttributeClass = interface(DDN.mscorlib.DNAttributeClass)
  ['{9D55B972-D8FC-560F-B1CE-5790ACA24E5A}']
  end;

  [DNTypeName('System.ComponentModel.DataAnnotations.ValidationAttribute')]
  DNValidationAttribute = interface(DDN.mscorlib.DNAttribute)
  ['{E2E5E586-99F5-3ECF-8153-F5FFE585F033}']
  { getters & setters } 

    function get_RequiresValidationContext: Boolean;
    function get_ErrorMessage: string;
    procedure set_ErrorMessage(value: string);
    function get_ErrorMessageResourceName: string;
    procedure set_ErrorMessageResourceName(value: string);
    function get_ErrorMessageResourceType: DDN.mscorlib.DNType;
    procedure set_ErrorMessageResourceType(value: DDN.mscorlib.DNType);
    function get_TypeId: DDN.mscorlib.DNObject;

  { methods } 

    function IsValid(value: DDN.mscorlib.DNObject): Boolean;
    procedure Validate(value: DDN.mscorlib.DNObject; name: string); overload;
    procedure Validate(value: DDN.mscorlib.DNObject; validationContext: DNValidationContext); overload;
    function FormatErrorMessage(name: string): string;
    function GetValidationResult(value: DDN.mscorlib.DNObject; validationContext: DNValidationContext): DNValidationResult;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DDN.mscorlib.DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property RequiresValidationContext: Boolean read get_RequiresValidationContext;
    property ErrorMessage: string read get_ErrorMessage write set_ErrorMessage;
    property ErrorMessageResourceName: string read get_ErrorMessageResourceName write set_ErrorMessageResourceName;
    property ErrorMessageResourceType: DDN.mscorlib.DNType read get_ErrorMessageResourceType write set_ErrorMessageResourceType;
    property TypeId: DDN.mscorlib.DNObject read get_TypeId;
  end;

  TDNValidationAttribute = class(TDNGenericImport<DNValidationAttributeClass, DNValidationAttribute>) end;

  //-------------namespace: System.ComponentModel.DataAnnotations----------------
  DNCompareAttributeClass = interface(DNValidationAttributeClass)
  ['{42F9A176-36FF-565E-B665-4031305BD024}']
  { constructors } 

    {class} function init(otherProperty: string): DNCompareAttribute;

  end;

  [DNTypeName('System.ComponentModel.DataAnnotations.CompareAttribute')]
  DNCompareAttribute = interface(DNValidationAttribute)
  ['{9570D576-9BB8-3947-B222-AC8AEF5E6F81}']
  { getters & setters } 

    function get_OtherProperty: string;
    function get_OtherPropertyDisplayName: string;
    function get_RequiresValidationContext: Boolean;
    function get_ErrorMessage: string;
    procedure set_ErrorMessage(value: string);
    function get_ErrorMessageResourceName: string;
    procedure set_ErrorMessageResourceName(value: string);
    function get_ErrorMessageResourceType: DDN.mscorlib.DNType;
    procedure set_ErrorMessageResourceType(value: DDN.mscorlib.DNType);
    function get_TypeId: DDN.mscorlib.DNObject;

  { methods } 

    function FormatErrorMessage(name: string): string;
    function IsValid(value: DDN.mscorlib.DNObject): Boolean;
    procedure Validate(value: DDN.mscorlib.DNObject; name: string); overload;
    procedure Validate(value: DDN.mscorlib.DNObject; validationContext: DNValidationContext); overload;
    function GetValidationResult(value: DDN.mscorlib.DNObject; validationContext: DNValidationContext): DNValidationResult;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DDN.mscorlib.DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property OtherProperty: string read get_OtherProperty;
    property OtherPropertyDisplayName: string read get_OtherPropertyDisplayName;
    property RequiresValidationContext: Boolean read get_RequiresValidationContext;
    property ErrorMessage: string read get_ErrorMessage write set_ErrorMessage;
    property ErrorMessageResourceName: string read get_ErrorMessageResourceName write set_ErrorMessageResourceName;
    property ErrorMessageResourceType: DDN.mscorlib.DNType read get_ErrorMessageResourceType write set_ErrorMessageResourceType;
    property TypeId: DDN.mscorlib.DNObject read get_TypeId;
  end;

  TDNCompareAttribute = class(TDNGenericImport<DNCompareAttributeClass, DNCompareAttribute>) end;

  //-------------namespace: System.ComponentModel.DataAnnotations----------------
  DNCustomValidationAttributeClass = interface(DNValidationAttributeClass)
  ['{E84D59D9-9414-554F-83D6-9332F6E909F2}']
  { constructors } 

    {class} function init(validatorType: DDN.mscorlib.DNType; method: string): DNCustomValidationAttribute;

  end;

  [DNTypeName('System.ComponentModel.DataAnnotations.CustomValidationAttribute')]
  DNCustomValidationAttribute = interface(DNValidationAttribute)
  ['{B6A55D1F-9BE1-38DA-9FFD-DB51E3AB535D}']
  { getters & setters } 

    function get_ValidatorType: DDN.mscorlib.DNType;
    function get_Method: string;
    function get_TypeId: DDN.mscorlib.DNObject;
    function get_RequiresValidationContext: Boolean;
    function get_ErrorMessage: string;
    procedure set_ErrorMessage(value: string);
    function get_ErrorMessageResourceName: string;
    procedure set_ErrorMessageResourceName(value: string);
    function get_ErrorMessageResourceType: DDN.mscorlib.DNType;
    procedure set_ErrorMessageResourceType(value: DDN.mscorlib.DNType);

  { methods } 

    function FormatErrorMessage(name: string): string;
    function IsValid(value: DDN.mscorlib.DNObject): Boolean;
    procedure Validate(value: DDN.mscorlib.DNObject; name: string); overload;
    procedure Validate(value: DDN.mscorlib.DNObject; validationContext: DNValidationContext); overload;
    function GetValidationResult(value: DDN.mscorlib.DNObject; validationContext: DNValidationContext): DNValidationResult;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DDN.mscorlib.DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property ValidatorType: DDN.mscorlib.DNType read get_ValidatorType;
    property Method: string read get_Method;
    property TypeId: DDN.mscorlib.DNObject read get_TypeId;
    property RequiresValidationContext: Boolean read get_RequiresValidationContext;
    property ErrorMessage: string read get_ErrorMessage write set_ErrorMessage;
    property ErrorMessageResourceName: string read get_ErrorMessageResourceName write set_ErrorMessageResourceName;
    property ErrorMessageResourceType: DDN.mscorlib.DNType read get_ErrorMessageResourceType write set_ErrorMessageResourceType;
  end;

  TDNCustomValidationAttribute = class(TDNGenericImport<DNCustomValidationAttributeClass, DNCustomValidationAttribute>) end;

  //-------------namespace: System.ComponentModel.DataAnnotations----------------
  DNDataTypeAttributeClass = interface(DNValidationAttributeClass)
  ['{887AB953-773F-53F4-9C48-A90A4BC6DCB3}']
  { constructors } 

    {class} function init(dataType: DNDataType): DNDataTypeAttribute; overload;
    {class} function init(customDataType: string): DNDataTypeAttribute; overload;

  end;

  [DNTypeName('System.ComponentModel.DataAnnotations.DataTypeAttribute')]
  DNDataTypeAttribute = interface(DNValidationAttribute)
  ['{FDC452CE-F502-319D-A282-D680B2D5D49A}']
  { getters & setters } 

    function get_DataType: DNDataType;
    function get_CustomDataType: string;
    function get_DisplayFormat: DNDisplayFormatAttribute;
    function get_RequiresValidationContext: Boolean;
    function get_ErrorMessage: string;
    procedure set_ErrorMessage(value: string);
    function get_ErrorMessageResourceName: string;
    procedure set_ErrorMessageResourceName(value: string);
    function get_ErrorMessageResourceType: DDN.mscorlib.DNType;
    procedure set_ErrorMessageResourceType(value: DDN.mscorlib.DNType);
    function get_TypeId: DDN.mscorlib.DNObject;

  { methods } 

    function GetDataTypeName: string;
    function IsValid(value: DDN.mscorlib.DNObject): Boolean;
    procedure Validate(value: DDN.mscorlib.DNObject; name: string); overload;
    procedure Validate(value: DDN.mscorlib.DNObject; validationContext: DNValidationContext); overload;
    function FormatErrorMessage(name: string): string;
    function GetValidationResult(value: DDN.mscorlib.DNObject; validationContext: DNValidationContext): DNValidationResult;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DDN.mscorlib.DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property DataType: DNDataType read get_DataType;
    property CustomDataType: string read get_CustomDataType;
    property DisplayFormat: DNDisplayFormatAttribute read get_DisplayFormat;
    property RequiresValidationContext: Boolean read get_RequiresValidationContext;
    property ErrorMessage: string read get_ErrorMessage write set_ErrorMessage;
    property ErrorMessageResourceName: string read get_ErrorMessageResourceName write set_ErrorMessageResourceName;
    property ErrorMessageResourceType: DDN.mscorlib.DNType read get_ErrorMessageResourceType write set_ErrorMessageResourceType;
    property TypeId: DDN.mscorlib.DNObject read get_TypeId;
  end;

  TDNDataTypeAttribute = class(TDNGenericImport<DNDataTypeAttributeClass, DNDataTypeAttribute>) end;

  //-------------namespace: System.ComponentModel.DataAnnotations----------------
  DNCreditCardAttributeClass = interface(DNDataTypeAttributeClass)
  ['{5D11C2A4-B483-5727-963B-657B2E92B819}']
  { constructors } 

    {class} function init: DNCreditCardAttribute;

  end;

  [DNTypeName('System.ComponentModel.DataAnnotations.CreditCardAttribute')]
  DNCreditCardAttribute = interface(DNDataTypeAttribute)
  ['{33F3D09D-0F30-3E32-AA8C-1B2E9AAE7DC0}']
  { getters & setters } 

    function get_DataType: DNDataType;
    function get_CustomDataType: string;
    function get_DisplayFormat: DNDisplayFormatAttribute;
    function get_RequiresValidationContext: Boolean;
    function get_ErrorMessage: string;
    procedure set_ErrorMessage(value: string);
    function get_ErrorMessageResourceName: string;
    procedure set_ErrorMessageResourceName(value: string);
    function get_ErrorMessageResourceType: DDN.mscorlib.DNType;
    procedure set_ErrorMessageResourceType(value: DDN.mscorlib.DNType);
    function get_TypeId: DDN.mscorlib.DNObject;

  { methods } 

    function IsValid(value: DDN.mscorlib.DNObject): Boolean;
    function GetDataTypeName: string;
    procedure Validate(value: DDN.mscorlib.DNObject; name: string); overload;
    procedure Validate(value: DDN.mscorlib.DNObject; validationContext: DNValidationContext); overload;
    function FormatErrorMessage(name: string): string;
    function GetValidationResult(value: DDN.mscorlib.DNObject; validationContext: DNValidationContext): DNValidationResult;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DDN.mscorlib.DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property DataType: DNDataType read get_DataType;
    property CustomDataType: string read get_CustomDataType;
    property DisplayFormat: DNDisplayFormatAttribute read get_DisplayFormat;
    property RequiresValidationContext: Boolean read get_RequiresValidationContext;
    property ErrorMessage: string read get_ErrorMessage write set_ErrorMessage;
    property ErrorMessageResourceName: string read get_ErrorMessageResourceName write set_ErrorMessageResourceName;
    property ErrorMessageResourceType: DDN.mscorlib.DNType read get_ErrorMessageResourceType write set_ErrorMessageResourceType;
    property TypeId: DDN.mscorlib.DNObject read get_TypeId;
  end;

  TDNCreditCardAttribute = class(TDNGenericImport<DNCreditCardAttributeClass, DNCreditCardAttribute>) end;

  //-------------namespace: System.ComponentModel.DataAnnotations----------------
  DNEmailAddressAttributeClass = interface(DNDataTypeAttributeClass)
  ['{ED4740B9-4FE6-5DA5-92F7-D9DF1BEFCB8F}']
  { constructors } 

    {class} function init: DNEmailAddressAttribute;

  end;

  [DNTypeName('System.ComponentModel.DataAnnotations.EmailAddressAttribute')]
  DNEmailAddressAttribute = interface(DNDataTypeAttribute)
  ['{F90A629B-38D9-38A1-B8B6-C359973CAA7D}']
  { getters & setters } 

    function get_DataType: DNDataType;
    function get_CustomDataType: string;
    function get_DisplayFormat: DNDisplayFormatAttribute;
    function get_RequiresValidationContext: Boolean;
    function get_ErrorMessage: string;
    procedure set_ErrorMessage(value: string);
    function get_ErrorMessageResourceName: string;
    procedure set_ErrorMessageResourceName(value: string);
    function get_ErrorMessageResourceType: DDN.mscorlib.DNType;
    procedure set_ErrorMessageResourceType(value: DDN.mscorlib.DNType);
    function get_TypeId: DDN.mscorlib.DNObject;

  { methods } 

    function IsValid(value: DDN.mscorlib.DNObject): Boolean;
    function GetDataTypeName: string;
    procedure Validate(value: DDN.mscorlib.DNObject; name: string); overload;
    procedure Validate(value: DDN.mscorlib.DNObject; validationContext: DNValidationContext); overload;
    function FormatErrorMessage(name: string): string;
    function GetValidationResult(value: DDN.mscorlib.DNObject; validationContext: DNValidationContext): DNValidationResult;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DDN.mscorlib.DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property DataType: DNDataType read get_DataType;
    property CustomDataType: string read get_CustomDataType;
    property DisplayFormat: DNDisplayFormatAttribute read get_DisplayFormat;
    property RequiresValidationContext: Boolean read get_RequiresValidationContext;
    property ErrorMessage: string read get_ErrorMessage write set_ErrorMessage;
    property ErrorMessageResourceName: string read get_ErrorMessageResourceName write set_ErrorMessageResourceName;
    property ErrorMessageResourceType: DDN.mscorlib.DNType read get_ErrorMessageResourceType write set_ErrorMessageResourceType;
    property TypeId: DDN.mscorlib.DNObject read get_TypeId;
  end;

  TDNEmailAddressAttribute = class(TDNGenericImport<DNEmailAddressAttributeClass, DNEmailAddressAttribute>) end;

  //-------------namespace: System.ComponentModel.DataAnnotations----------------
  DNEnumDataTypeAttributeClass = interface(DNDataTypeAttributeClass)
  ['{F039B12B-65A3-57E1-A0DD-CDCF0A5C8660}']
  { constructors } 

    {class} function init(enumType: DDN.mscorlib.DNType): DNEnumDataTypeAttribute;

  end;

  [DNTypeName('System.ComponentModel.DataAnnotations.EnumDataTypeAttribute')]
  DNEnumDataTypeAttribute = interface(DNDataTypeAttribute)
  ['{33F31804-C167-3C8C-93A4-B576038D39E5}']
  { getters & setters } 

    function get_EnumType: DDN.mscorlib.DNType;
    function get_DataType: DNDataType;
    function get_CustomDataType: string;
    function get_DisplayFormat: DNDisplayFormatAttribute;
    function get_RequiresValidationContext: Boolean;
    function get_ErrorMessage: string;
    procedure set_ErrorMessage(value: string);
    function get_ErrorMessageResourceName: string;
    procedure set_ErrorMessageResourceName(value: string);
    function get_ErrorMessageResourceType: DDN.mscorlib.DNType;
    procedure set_ErrorMessageResourceType(value: DDN.mscorlib.DNType);
    function get_TypeId: DDN.mscorlib.DNObject;

  { methods } 

    function IsValid(value: DDN.mscorlib.DNObject): Boolean;
    function GetDataTypeName: string;
    procedure Validate(value: DDN.mscorlib.DNObject; name: string); overload;
    procedure Validate(value: DDN.mscorlib.DNObject; validationContext: DNValidationContext); overload;
    function FormatErrorMessage(name: string): string;
    function GetValidationResult(value: DDN.mscorlib.DNObject; validationContext: DNValidationContext): DNValidationResult;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DDN.mscorlib.DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property EnumType: DDN.mscorlib.DNType read get_EnumType;
    property DataType: DNDataType read get_DataType;
    property CustomDataType: string read get_CustomDataType;
    property DisplayFormat: DNDisplayFormatAttribute read get_DisplayFormat;
    property RequiresValidationContext: Boolean read get_RequiresValidationContext;
    property ErrorMessage: string read get_ErrorMessage write set_ErrorMessage;
    property ErrorMessageResourceName: string read get_ErrorMessageResourceName write set_ErrorMessageResourceName;
    property ErrorMessageResourceType: DDN.mscorlib.DNType read get_ErrorMessageResourceType write set_ErrorMessageResourceType;
    property TypeId: DDN.mscorlib.DNObject read get_TypeId;
  end;

  TDNEnumDataTypeAttribute = class(TDNGenericImport<DNEnumDataTypeAttributeClass, DNEnumDataTypeAttribute>) end;

  //-------------namespace: System.ComponentModel.DataAnnotations----------------
  DNFileExtensionsAttributeClass = interface(DNDataTypeAttributeClass)
  ['{EAE7D7D8-A36C-566A-A16F-5DF5C38CF7D8}']
  { constructors } 

    {class} function init: DNFileExtensionsAttribute;

  end;

  [DNTypeName('System.ComponentModel.DataAnnotations.FileExtensionsAttribute')]
  DNFileExtensionsAttribute = interface(DNDataTypeAttribute)
  ['{5B5A45C3-0956-3979-95F0-9C371C4B35D1}']
  { getters & setters } 

    function get_Extensions: string;
    procedure set_Extensions(value: string);
    function get_DataType: DNDataType;
    function get_CustomDataType: string;
    function get_DisplayFormat: DNDisplayFormatAttribute;
    function get_RequiresValidationContext: Boolean;
    function get_ErrorMessage: string;
    procedure set_ErrorMessage(value: string);
    function get_ErrorMessageResourceName: string;
    procedure set_ErrorMessageResourceName(value: string);
    function get_ErrorMessageResourceType: DDN.mscorlib.DNType;
    procedure set_ErrorMessageResourceType(value: DDN.mscorlib.DNType);
    function get_TypeId: DDN.mscorlib.DNObject;

  { methods } 

    function IsValid(value: DDN.mscorlib.DNObject): Boolean;
    function FormatErrorMessage(name: string): string;
    function GetDataTypeName: string;
    procedure Validate(value: DDN.mscorlib.DNObject; name: string); overload;
    procedure Validate(value: DDN.mscorlib.DNObject; validationContext: DNValidationContext); overload;
    function GetValidationResult(value: DDN.mscorlib.DNObject; validationContext: DNValidationContext): DNValidationResult;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DDN.mscorlib.DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Extensions: string read get_Extensions write set_Extensions;
    property DataType: DNDataType read get_DataType;
    property CustomDataType: string read get_CustomDataType;
    property DisplayFormat: DNDisplayFormatAttribute read get_DisplayFormat;
    property RequiresValidationContext: Boolean read get_RequiresValidationContext;
    property ErrorMessage: string read get_ErrorMessage write set_ErrorMessage;
    property ErrorMessageResourceName: string read get_ErrorMessageResourceName write set_ErrorMessageResourceName;
    property ErrorMessageResourceType: DDN.mscorlib.DNType read get_ErrorMessageResourceType write set_ErrorMessageResourceType;
    property TypeId: DDN.mscorlib.DNObject read get_TypeId;
  end;

  TDNFileExtensionsAttribute = class(TDNGenericImport<DNFileExtensionsAttributeClass, DNFileExtensionsAttribute>) end;

  //-------------namespace: System.ComponentModel.DataAnnotations----------------
  DNPhoneAttributeClass = interface(DNDataTypeAttributeClass)
  ['{EF34558C-16D2-5810-A555-AF41DA1DEA1B}']
  { constructors } 

    {class} function init: DNPhoneAttribute;

  end;

  [DNTypeName('System.ComponentModel.DataAnnotations.PhoneAttribute')]
  DNPhoneAttribute = interface(DNDataTypeAttribute)
  ['{2D62C454-9C1F-3D8D-9119-8F7DEF1B0961}']
  { getters & setters } 

    function get_DataType: DNDataType;
    function get_CustomDataType: string;
    function get_DisplayFormat: DNDisplayFormatAttribute;
    function get_RequiresValidationContext: Boolean;
    function get_ErrorMessage: string;
    procedure set_ErrorMessage(value: string);
    function get_ErrorMessageResourceName: string;
    procedure set_ErrorMessageResourceName(value: string);
    function get_ErrorMessageResourceType: DDN.mscorlib.DNType;
    procedure set_ErrorMessageResourceType(value: DDN.mscorlib.DNType);
    function get_TypeId: DDN.mscorlib.DNObject;

  { methods } 

    function IsValid(value: DDN.mscorlib.DNObject): Boolean;
    function GetDataTypeName: string;
    procedure Validate(value: DDN.mscorlib.DNObject; name: string); overload;
    procedure Validate(value: DDN.mscorlib.DNObject; validationContext: DNValidationContext); overload;
    function FormatErrorMessage(name: string): string;
    function GetValidationResult(value: DDN.mscorlib.DNObject; validationContext: DNValidationContext): DNValidationResult;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DDN.mscorlib.DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property DataType: DNDataType read get_DataType;
    property CustomDataType: string read get_CustomDataType;
    property DisplayFormat: DNDisplayFormatAttribute read get_DisplayFormat;
    property RequiresValidationContext: Boolean read get_RequiresValidationContext;
    property ErrorMessage: string read get_ErrorMessage write set_ErrorMessage;
    property ErrorMessageResourceName: string read get_ErrorMessageResourceName write set_ErrorMessageResourceName;
    property ErrorMessageResourceType: DDN.mscorlib.DNType read get_ErrorMessageResourceType write set_ErrorMessageResourceType;
    property TypeId: DDN.mscorlib.DNObject read get_TypeId;
  end;

  TDNPhoneAttribute = class(TDNGenericImport<DNPhoneAttributeClass, DNPhoneAttribute>) end;

  //-------------namespace: System.ComponentModel.DataAnnotations----------------
  DNUrlAttributeClass = interface(DNDataTypeAttributeClass)
  ['{9B388E38-40C8-5CF6-A0CA-5E5B487CB011}']
  { constructors } 

    {class} function init: DNUrlAttribute;

  end;

  [DNTypeName('System.ComponentModel.DataAnnotations.UrlAttribute')]
  DNUrlAttribute = interface(DNDataTypeAttribute)
  ['{B4240412-05CF-39FF-A519-75711A685949}']
  { getters & setters } 

    function get_DataType: DNDataType;
    function get_CustomDataType: string;
    function get_DisplayFormat: DNDisplayFormatAttribute;
    function get_RequiresValidationContext: Boolean;
    function get_ErrorMessage: string;
    procedure set_ErrorMessage(value: string);
    function get_ErrorMessageResourceName: string;
    procedure set_ErrorMessageResourceName(value: string);
    function get_ErrorMessageResourceType: DDN.mscorlib.DNType;
    procedure set_ErrorMessageResourceType(value: DDN.mscorlib.DNType);
    function get_TypeId: DDN.mscorlib.DNObject;

  { methods } 

    function IsValid(value: DDN.mscorlib.DNObject): Boolean;
    function GetDataTypeName: string;
    procedure Validate(value: DDN.mscorlib.DNObject; name: string); overload;
    procedure Validate(value: DDN.mscorlib.DNObject; validationContext: DNValidationContext); overload;
    function FormatErrorMessage(name: string): string;
    function GetValidationResult(value: DDN.mscorlib.DNObject; validationContext: DNValidationContext): DNValidationResult;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DDN.mscorlib.DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property DataType: DNDataType read get_DataType;
    property CustomDataType: string read get_CustomDataType;
    property DisplayFormat: DNDisplayFormatAttribute read get_DisplayFormat;
    property RequiresValidationContext: Boolean read get_RequiresValidationContext;
    property ErrorMessage: string read get_ErrorMessage write set_ErrorMessage;
    property ErrorMessageResourceName: string read get_ErrorMessageResourceName write set_ErrorMessageResourceName;
    property ErrorMessageResourceType: DDN.mscorlib.DNType read get_ErrorMessageResourceType write set_ErrorMessageResourceType;
    property TypeId: DDN.mscorlib.DNObject read get_TypeId;
  end;

  TDNUrlAttribute = class(TDNGenericImport<DNUrlAttributeClass, DNUrlAttribute>) end;

  //-------------namespace: System.ComponentModel.DataAnnotations----------------
  DNMaxLengthAttributeClass = interface(DNValidationAttributeClass)
  ['{56126C3F-D706-5B81-AD48-B7C7C669D2D4}']
  { constructors } 

    {class} function init(length: Int32): DNMaxLengthAttribute; overload;
    {class} function init: DNMaxLengthAttribute; overload;

  end;

  [DNTypeName('System.ComponentModel.DataAnnotations.MaxLengthAttribute')]
  DNMaxLengthAttribute = interface(DNValidationAttribute)
  ['{71AFDFC5-2BC7-3789-9A6A-2BCFEFF5A3E2}']
  { getters & setters } 

    function get_Length: Int32;
    function get_RequiresValidationContext: Boolean;
    function get_ErrorMessage: string;
    procedure set_ErrorMessage(value: string);
    function get_ErrorMessageResourceName: string;
    procedure set_ErrorMessageResourceName(value: string);
    function get_ErrorMessageResourceType: DDN.mscorlib.DNType;
    procedure set_ErrorMessageResourceType(value: DDN.mscorlib.DNType);
    function get_TypeId: DDN.mscorlib.DNObject;

  { methods } 

    function IsValid(value: DDN.mscorlib.DNObject): Boolean;
    function FormatErrorMessage(name: string): string;
    procedure Validate(value: DDN.mscorlib.DNObject; name: string); overload;
    procedure Validate(value: DDN.mscorlib.DNObject; validationContext: DNValidationContext); overload;
    function GetValidationResult(value: DDN.mscorlib.DNObject; validationContext: DNValidationContext): DNValidationResult;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DDN.mscorlib.DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Length: Int32 read get_Length;
    property RequiresValidationContext: Boolean read get_RequiresValidationContext;
    property ErrorMessage: string read get_ErrorMessage write set_ErrorMessage;
    property ErrorMessageResourceName: string read get_ErrorMessageResourceName write set_ErrorMessageResourceName;
    property ErrorMessageResourceType: DDN.mscorlib.DNType read get_ErrorMessageResourceType write set_ErrorMessageResourceType;
    property TypeId: DDN.mscorlib.DNObject read get_TypeId;
  end;

  TDNMaxLengthAttribute = class(TDNGenericImport<DNMaxLengthAttributeClass, DNMaxLengthAttribute>) end;

  //-------------namespace: System.ComponentModel.DataAnnotations----------------
  DNMinLengthAttributeClass = interface(DNValidationAttributeClass)
  ['{8D59A566-57EF-5D41-96A9-DE09670A9F69}']
  { constructors } 

    {class} function init(length: Int32): DNMinLengthAttribute;

  end;

  [DNTypeName('System.ComponentModel.DataAnnotations.MinLengthAttribute')]
  DNMinLengthAttribute = interface(DNValidationAttribute)
  ['{5CCD40F7-81D7-320B-A0E5-A7E3E6664B58}']
  { getters & setters } 

    function get_Length: Int32;
    function get_RequiresValidationContext: Boolean;
    function get_ErrorMessage: string;
    procedure set_ErrorMessage(value: string);
    function get_ErrorMessageResourceName: string;
    procedure set_ErrorMessageResourceName(value: string);
    function get_ErrorMessageResourceType: DDN.mscorlib.DNType;
    procedure set_ErrorMessageResourceType(value: DDN.mscorlib.DNType);
    function get_TypeId: DDN.mscorlib.DNObject;

  { methods } 

    function IsValid(value: DDN.mscorlib.DNObject): Boolean;
    function FormatErrorMessage(name: string): string;
    procedure Validate(value: DDN.mscorlib.DNObject; name: string); overload;
    procedure Validate(value: DDN.mscorlib.DNObject; validationContext: DNValidationContext); overload;
    function GetValidationResult(value: DDN.mscorlib.DNObject; validationContext: DNValidationContext): DNValidationResult;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DDN.mscorlib.DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Length: Int32 read get_Length;
    property RequiresValidationContext: Boolean read get_RequiresValidationContext;
    property ErrorMessage: string read get_ErrorMessage write set_ErrorMessage;
    property ErrorMessageResourceName: string read get_ErrorMessageResourceName write set_ErrorMessageResourceName;
    property ErrorMessageResourceType: DDN.mscorlib.DNType read get_ErrorMessageResourceType write set_ErrorMessageResourceType;
    property TypeId: DDN.mscorlib.DNObject read get_TypeId;
  end;

  TDNMinLengthAttribute = class(TDNGenericImport<DNMinLengthAttributeClass, DNMinLengthAttribute>) end;

  //-------------namespace: System.ComponentModel.DataAnnotations----------------
  DNRangeAttributeClass = interface(DNValidationAttributeClass)
  ['{0A995450-C31D-5A79-AA20-F9BD7807AD93}']
  { constructors } 

    {class} function init(minimum: Int32; maximum: Int32): DNRangeAttribute; overload;
    {class} function init(minimum: Double; maximum: Double): DNRangeAttribute; overload;
    {class} function init(&type: DDN.mscorlib.DNType; minimum: string; maximum: string): DNRangeAttribute; overload;

  end;

  [DNTypeName('System.ComponentModel.DataAnnotations.RangeAttribute')]
  DNRangeAttribute = interface(DNValidationAttribute)
  ['{A5F4EC07-9CA6-333B-8293-7E88F5038ED9}']
  { getters & setters } 

    function get_Minimum: DDN.mscorlib.DNObject;
    function get_Maximum: DDN.mscorlib.DNObject;
    function get_OperandType: DDN.mscorlib.DNType;
    function get_RequiresValidationContext: Boolean;
    function get_ErrorMessage: string;
    procedure set_ErrorMessage(value: string);
    function get_ErrorMessageResourceName: string;
    procedure set_ErrorMessageResourceName(value: string);
    function get_ErrorMessageResourceType: DDN.mscorlib.DNType;
    procedure set_ErrorMessageResourceType(value: DDN.mscorlib.DNType);
    function get_TypeId: DDN.mscorlib.DNObject;

  { methods } 

    function IsValid(value: DDN.mscorlib.DNObject): Boolean;
    function FormatErrorMessage(name: string): string;
    procedure Validate(value: DDN.mscorlib.DNObject; name: string); overload;
    procedure Validate(value: DDN.mscorlib.DNObject; validationContext: DNValidationContext); overload;
    function GetValidationResult(value: DDN.mscorlib.DNObject; validationContext: DNValidationContext): DNValidationResult;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DDN.mscorlib.DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Minimum: DDN.mscorlib.DNObject read get_Minimum;
    property Maximum: DDN.mscorlib.DNObject read get_Maximum;
    property OperandType: DDN.mscorlib.DNType read get_OperandType;
    property RequiresValidationContext: Boolean read get_RequiresValidationContext;
    property ErrorMessage: string read get_ErrorMessage write set_ErrorMessage;
    property ErrorMessageResourceName: string read get_ErrorMessageResourceName write set_ErrorMessageResourceName;
    property ErrorMessageResourceType: DDN.mscorlib.DNType read get_ErrorMessageResourceType write set_ErrorMessageResourceType;
    property TypeId: DDN.mscorlib.DNObject read get_TypeId;
  end;

  TDNRangeAttribute = class(TDNGenericImport<DNRangeAttributeClass, DNRangeAttribute>) end;

  //-------------namespace: System.ComponentModel.DataAnnotations----------------
  DNRegularExpressionAttributeClass = interface(DNValidationAttributeClass)
  ['{B46FC7C3-0DC3-5A97-B410-0A5EE8EA2DF1}']
  { constructors } 

    {class} function init(pattern: string): DNRegularExpressionAttribute;

  end;

  [DNTypeName('System.ComponentModel.DataAnnotations.RegularExpressionAttribute')]
  DNRegularExpressionAttribute = interface(DNValidationAttribute)
  ['{F80BAAE7-D511-384D-AC4C-DB4BFD74311B}']
  { getters & setters } 

    function get_Pattern: string;
    function get_MatchTimeoutInMilliseconds: Int32;
    procedure set_MatchTimeoutInMilliseconds(value: Int32);
    function get_RequiresValidationContext: Boolean;
    function get_ErrorMessage: string;
    procedure set_ErrorMessage(value: string);
    function get_ErrorMessageResourceName: string;
    procedure set_ErrorMessageResourceName(value: string);
    function get_ErrorMessageResourceType: DDN.mscorlib.DNType;
    procedure set_ErrorMessageResourceType(value: DDN.mscorlib.DNType);
    function get_TypeId: DDN.mscorlib.DNObject;

  { methods } 

    function IsValid(value: DDN.mscorlib.DNObject): Boolean;
    function FormatErrorMessage(name: string): string;
    procedure Validate(value: DDN.mscorlib.DNObject; name: string); overload;
    procedure Validate(value: DDN.mscorlib.DNObject; validationContext: DNValidationContext); overload;
    function GetValidationResult(value: DDN.mscorlib.DNObject; validationContext: DNValidationContext): DNValidationResult;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DDN.mscorlib.DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Pattern: string read get_Pattern;
    property MatchTimeoutInMilliseconds: Int32 read get_MatchTimeoutInMilliseconds write set_MatchTimeoutInMilliseconds;
    property RequiresValidationContext: Boolean read get_RequiresValidationContext;
    property ErrorMessage: string read get_ErrorMessage write set_ErrorMessage;
    property ErrorMessageResourceName: string read get_ErrorMessageResourceName write set_ErrorMessageResourceName;
    property ErrorMessageResourceType: DDN.mscorlib.DNType read get_ErrorMessageResourceType write set_ErrorMessageResourceType;
    property TypeId: DDN.mscorlib.DNObject read get_TypeId;
  end;

  TDNRegularExpressionAttribute = class(TDNGenericImport<DNRegularExpressionAttributeClass, DNRegularExpressionAttribute>) end;

  //-------------namespace: System.ComponentModel.DataAnnotations----------------
  DNRequiredAttributeClass = interface(DNValidationAttributeClass)
  ['{3E4BA435-4165-5C32-B7B6-B793A29F0362}']
  { constructors } 

    {class} function init: DNRequiredAttribute;

  end;

  [DNTypeName('System.ComponentModel.DataAnnotations.RequiredAttribute')]
  DNRequiredAttribute = interface(DNValidationAttribute)
  ['{0304FE9C-59D6-37B0-A2D2-9B2CC9A9DABE}']
  { getters & setters } 

    function get_AllowEmptyStrings: Boolean;
    procedure set_AllowEmptyStrings(value: Boolean);
    function get_RequiresValidationContext: Boolean;
    function get_ErrorMessage: string;
    procedure set_ErrorMessage(value: string);
    function get_ErrorMessageResourceName: string;
    procedure set_ErrorMessageResourceName(value: string);
    function get_ErrorMessageResourceType: DDN.mscorlib.DNType;
    procedure set_ErrorMessageResourceType(value: DDN.mscorlib.DNType);
    function get_TypeId: DDN.mscorlib.DNObject;

  { methods } 

    function IsValid(value: DDN.mscorlib.DNObject): Boolean;
    procedure Validate(value: DDN.mscorlib.DNObject; name: string); overload;
    procedure Validate(value: DDN.mscorlib.DNObject; validationContext: DNValidationContext); overload;
    function FormatErrorMessage(name: string): string;
    function GetValidationResult(value: DDN.mscorlib.DNObject; validationContext: DNValidationContext): DNValidationResult;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DDN.mscorlib.DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property AllowEmptyStrings: Boolean read get_AllowEmptyStrings write set_AllowEmptyStrings;
    property RequiresValidationContext: Boolean read get_RequiresValidationContext;
    property ErrorMessage: string read get_ErrorMessage write set_ErrorMessage;
    property ErrorMessageResourceName: string read get_ErrorMessageResourceName write set_ErrorMessageResourceName;
    property ErrorMessageResourceType: DDN.mscorlib.DNType read get_ErrorMessageResourceType write set_ErrorMessageResourceType;
    property TypeId: DDN.mscorlib.DNObject read get_TypeId;
  end;

  TDNRequiredAttribute = class(TDNGenericImport<DNRequiredAttributeClass, DNRequiredAttribute>) end;

  //-------------namespace: System.ComponentModel.DataAnnotations----------------
  DNStringLengthAttributeClass = interface(DNValidationAttributeClass)
  ['{1F398A50-5FA1-54B3-B1AA-750D61E357EB}']
  { constructors } 

    {class} function init(maximumLength: Int32): DNStringLengthAttribute;

  end;

  [DNTypeName('System.ComponentModel.DataAnnotations.StringLengthAttribute')]
  DNStringLengthAttribute = interface(DNValidationAttribute)
  ['{56116897-7B2D-3925-9F4C-2EAE6A3EBCC0}']
  { getters & setters } 

    function get_MaximumLength: Int32;
    function get_MinimumLength: Int32;
    procedure set_MinimumLength(value: Int32);
    function get_RequiresValidationContext: Boolean;
    function get_ErrorMessage: string;
    procedure set_ErrorMessage(value: string);
    function get_ErrorMessageResourceName: string;
    procedure set_ErrorMessageResourceName(value: string);
    function get_ErrorMessageResourceType: DDN.mscorlib.DNType;
    procedure set_ErrorMessageResourceType(value: DDN.mscorlib.DNType);
    function get_TypeId: DDN.mscorlib.DNObject;

  { methods } 

    function IsValid(value: DDN.mscorlib.DNObject): Boolean;
    function FormatErrorMessage(name: string): string;
    procedure Validate(value: DDN.mscorlib.DNObject; name: string); overload;
    procedure Validate(value: DDN.mscorlib.DNObject; validationContext: DNValidationContext); overload;
    function GetValidationResult(value: DDN.mscorlib.DNObject; validationContext: DNValidationContext): DNValidationResult;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DDN.mscorlib.DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property MaximumLength: Int32 read get_MaximumLength;
    property MinimumLength: Int32 read get_MinimumLength write set_MinimumLength;
    property RequiresValidationContext: Boolean read get_RequiresValidationContext;
    property ErrorMessage: string read get_ErrorMessage write set_ErrorMessage;
    property ErrorMessageResourceName: string read get_ErrorMessageResourceName write set_ErrorMessageResourceName;
    property ErrorMessageResourceType: DDN.mscorlib.DNType read get_ErrorMessageResourceType write set_ErrorMessageResourceType;
    property TypeId: DDN.mscorlib.DNObject read get_TypeId;
  end;

  TDNStringLengthAttribute = class(TDNGenericImport<DNStringLengthAttributeClass, DNStringLengthAttribute>) end;

  //-------------namespace: System.ComponentModel.DataAnnotations----------------
  DNValidationContextClass = interface(DNObjectClass)
  ['{DFEDEDFA-6A77-5E78-AE67-2C9A91762E0A}']
  { constructors } 

    {class} function init(instance: DDN.mscorlib.DNObject): DNValidationContext; overload;
    {class} function init(instance: DDN.mscorlib.DNObject; items: DDN.mscorlib.DNIDictionary<DDN.mscorlib.DNObject, DDN.mscorlib.DNObject>): DNValidationContext; overload;
    {class} function init(instance: DDN.mscorlib.DNObject; serviceProvider: DDN.mscorlib.DNIServiceProvider; items: DDN.mscorlib.DNIDictionary<DDN.mscorlib.DNObject, DDN.mscorlib.DNObject>): DNValidationContext; overload;

  end;

  [DNTypeName('System.ComponentModel.DataAnnotations.ValidationContext')]
  DNValidationContext = interface(DDN.mscorlib.DNIServiceProvider)
  ['{13413F9C-FEB5-3AA3-9E47-57765FE3E971}']
  { getters & setters } 

    function get_ObjectInstance: DDN.mscorlib.DNObject;
    function get_ObjectType: DDN.mscorlib.DNType;
    function get_DisplayName: string;
    procedure set_DisplayName(value: string);
    function get_MemberName: string;
    procedure set_MemberName(value: string);
    function get_Items: DDN.mscorlib.DNIDictionary<DDN.mscorlib.DNObject, DDN.mscorlib.DNObject>;
    function get_ServiceContainer: DDN.System.DNIServiceContainer;

  { methods } 

    procedure InitializeServiceProvider(serviceProvider: DDN.mscorlib.DNFunc<DDN.mscorlib.DNType, DDN.mscorlib.DNObject>);
    function GetService(serviceType: DDN.mscorlib.DNType): DDN.mscorlib.DNObject;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property ObjectInstance: DDN.mscorlib.DNObject read get_ObjectInstance;
    property ObjectType: DDN.mscorlib.DNType read get_ObjectType;
    property DisplayName: string read get_DisplayName write set_DisplayName;
    property MemberName: string read get_MemberName write set_MemberName;
    property Items: DDN.mscorlib.DNIDictionary<DDN.mscorlib.DNObject, DDN.mscorlib.DNObject> read get_Items;
    property ServiceContainer: DDN.System.DNIServiceContainer read get_ServiceContainer;
  end;

  TDNValidationContext = class(TDNGenericImport<DNValidationContextClass, DNValidationContext>) end;

  //-------------namespace: System.ComponentModel.DataAnnotations----------------
  DNValidationResultClass = interface(DDN.mscorlib.DNObjectClass)
  ['{8DD53DA4-91F8-5992-B0E7-0B95CA1D9537}']
  { constructors } 

    {class} function init(errorMessage: string): DNValidationResult; overload;
    {class} function init(errorMessage: string; memberNames: DDN.mscorlib.DNIEnumerable<string>): DNValidationResult; overload;

  { static fields getter & setter } 

   function __fakeFieldGet_Success: DNValidationResult;

  { static fields } 

    {class} property Success: DNValidationResult read __fakeFieldGet_Success;

  end;

  [DNTypeName('System.ComponentModel.DataAnnotations.ValidationResult')]
  DNValidationResult = interface(DDN.mscorlib.DNObject)
  ['{72A73F37-E362-3D31-ADF1-0DEF7F66164F}']
  { getters & setters } 

    function get_MemberNames: DDN.mscorlib.DNIEnumerable<string>;
    function get_ErrorMessage: string;
    procedure set_ErrorMessage(value: string);

  { methods } 

    function ToString: string;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    property MemberNames: DDN.mscorlib.DNIEnumerable<string> read get_MemberNames;
    property ErrorMessage: string read get_ErrorMessage write set_ErrorMessage;
  end;

  TDNValidationResult = class(TDNGenericImport<DNValidationResultClass, DNValidationResult>) end;

  //-------------namespace: System.ComponentModel.DataAnnotations----------------
  DNValidatorClass = interface(DDN.mscorlib.DNObjectClass)
  ['{7F0B6EE4-CD62-564C-8F74-0C66769094B2}']
  { static methods } 

    {class} function TryValidateProperty(value: DDN.mscorlib.DNObject; validationContext: DNValidationContext; validationResults: DDN.mscorlib.DNICollection<DNValidationResult>): Boolean;
    {class} function TryValidateObject(instance: DDN.mscorlib.DNObject; validationContext: DNValidationContext; validationResults: DDN.mscorlib.DNICollection<DNValidationResult>): Boolean; overload;
    {class} function TryValidateObject(instance: DDN.mscorlib.DNObject; validationContext: DNValidationContext; validationResults: DDN.mscorlib.DNICollection<DNValidationResult>; validateAllProperties: Boolean): Boolean; overload;
    {class} function TryValidateValue(value: DDN.mscorlib.DNObject; validationContext: DNValidationContext; validationResults: DDN.mscorlib.DNICollection<DNValidationResult>; validationAttributes: DDN.mscorlib.DNIEnumerable<DNValidationAttribute>): Boolean;
    {class} procedure ValidateObject(instance: DDN.mscorlib.DNObject; validationContext: DNValidationContext); overload;
    {class} procedure ValidateProperty(value: DDN.mscorlib.DNObject; validationContext: DNValidationContext);
    {class} procedure ValidateObject(instance: DDN.mscorlib.DNObject; validationContext: DNValidationContext; validateAllProperties: Boolean); overload;
    {class} procedure ValidateValue(value: DDN.mscorlib.DNObject; validationContext: DNValidationContext; validationAttributes: DDN.mscorlib.DNIEnumerable<DNValidationAttribute>);

  end;

  [DNTypeName('System.ComponentModel.DataAnnotations.Validator')]
  DNValidator = interface(DDN.mscorlib.DNObject)
  ['{49F0947B-ECC6-33A2-9F41-22175AA1DB20}']
  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNValidator = class(TDNGenericImport<DNValidatorClass, DNValidator>) end;

  //-------------namespace: System.ComponentModel.DataAnnotations----------------
  DNAssociatedMetadataTypeTypeDescriptionProviderClass = interface(DNObjectClass)
  ['{F1D3B7D7-28D5-5C29-93C0-AC88B7ECA91F}']
  { constructors } 

    {class} function init(&type: DDN.mscorlib.DNType): DNAssociatedMetadataTypeTypeDescriptionProvider; overload;
    {class} function init(&type: DDN.mscorlib.DNType; associatedMetadataType: DDN.mscorlib.DNType): DNAssociatedMetadataTypeTypeDescriptionProvider; overload;

  end;

  [DNTypeName('System.ComponentModel.DataAnnotations.AssociatedMetadataTypeTypeDescriptionProvider')]
  DNAssociatedMetadataTypeTypeDescriptionProvider = interface(DNObject)
  ['{C33A37F1-AA37-38E9-BADF-AC552B06A2A0}']
  { methods } 

    function GetTypeDescriptor(objectType: DDN.mscorlib.DNType; instance: DDN.mscorlib.DNObject): DDN.System.DNICustomTypeDescriptor; overload;
    function GetExtendedTypeDescriptor(instance: DDN.mscorlib.DNObject): DDN.System.DNICustomTypeDescriptor;
    function CreateInstance(provider: DDN.mscorlib.DNIServiceProvider; objectType: DDN.mscorlib.DNType; argTypes: TArray<DDN.mscorlib.DNType>; args: TArray<DDN.mscorlib.DNObject>): DDN.mscorlib.DNObject;
    function GetCache(instance: DDN.mscorlib.DNObject): DDN.mscorlib.DNIDictionary;
    function GetFullComponentName(component: DDN.mscorlib.DNObject): string;
    function GetReflectionType(objectType: DDN.mscorlib.DNType): DDN.mscorlib.DNType; overload;
    function GetReflectionType(instance: DDN.mscorlib.DNObject): DDN.mscorlib.DNType; overload;
    function GetReflectionType(objectType: DDN.mscorlib.DNType; instance: DDN.mscorlib.DNObject): DDN.mscorlib.DNType; overload;
    function GetRuntimeType(reflectionType: DDN.mscorlib.DNType): DDN.mscorlib.DNType;
    function GetTypeDescriptor(objectType: DDN.mscorlib.DNType): DDN.System.DNICustomTypeDescriptor; overload;
    function GetTypeDescriptor(instance: DDN.mscorlib.DNObject): DDN.System.DNICustomTypeDescriptor; overload;
    function IsSupportedType(&type: DDN.mscorlib.DNType): Boolean;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNAssociatedMetadataTypeTypeDescriptionProvider = class(TDNGenericImport<DNAssociatedMetadataTypeTypeDescriptionProviderClass, DNAssociatedMetadataTypeTypeDescriptionProvider>) end;

  //-------------namespace: System.ComponentModel.DataAnnotations----------------
  DNValidationExceptionClass = interface(DDN.mscorlib.DNExceptionClass)
  ['{7F4AC8F4-8913-5E6E-B3DB-840018483359}']
  { constructors } 

    {class} function init(validationResult: DNValidationResult; validatingAttribute: DNValidationAttribute; value: DDN.mscorlib.DNObject): DNValidationException; overload;
    {class} function init(errorMessage: string; validatingAttribute: DNValidationAttribute; value: DDN.mscorlib.DNObject): DNValidationException; overload;
    {class} function init: DNValidationException; overload;
    {class} function init(message: string): DNValidationException; overload;
    {class} function init(message: string; innerException: DDN.mscorlib.DNException): DNValidationException; overload;

  end;

  [DNTypeName('System.ComponentModel.DataAnnotations.ValidationException')]
  DNValidationException = interface(DDN.mscorlib.DNException)
  ['{A2933A3B-7254-365F-A30F-EE4A120245EA}']
  { getters & setters } 

    function get_ValidationAttribute: DNValidationAttribute;
    function get_ValidationResult: DNValidationResult;
    function get_Value: DDN.mscorlib.DNObject;
    function get_Message: string;
    function get_Data: DDN.mscorlib.DNIDictionary;
    function get_InnerException: DDN.mscorlib.DNException;
    function get_TargetSite: DDN.mscorlib.DNMethodBase;
    function get_StackTrace: string;
    function get_HelpLink: string;
    procedure set_HelpLink(value: string);
    function get_Source: string;
    procedure set_Source(value: string);
    function get_HResult: Int32;

  { methods } 

    function GetBaseException: DDN.mscorlib.DNException;
    function ToString: string;
    procedure GetObjectData(info: DDN.mscorlib.DNSerializationInfo; context: DDN.mscorlib.DNStreamingContext);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    property ValidationAttribute: DNValidationAttribute read get_ValidationAttribute;
    property ValidationResult: DNValidationResult read get_ValidationResult;
    property Value: DDN.mscorlib.DNObject read get_Value;
    property Message: string read get_Message;
    property Data: DDN.mscorlib.DNIDictionary read get_Data;
    property InnerException: DDN.mscorlib.DNException read get_InnerException;
    property TargetSite: DDN.mscorlib.DNMethodBase read get_TargetSite;
    property StackTrace: string read get_StackTrace;
    property HelpLink: string read get_HelpLink write set_HelpLink;
    property Source: string read get_Source write set_Source;
    property HResult: Int32 read get_HResult;
  end;

  TDNValidationException = class(TDNGenericImport<DNValidationExceptionClass, DNValidationException>) end;


implementation


initialization
  InternalTryLoadAssemblyModule('System.ComponentModel.DataAnnotations, Version=4.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35');

finalization

end.
