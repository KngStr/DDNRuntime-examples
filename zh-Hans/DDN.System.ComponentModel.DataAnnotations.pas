//----------------------------------------------------------------------------
//  System.ComponentModel.DataAnnotations.dll: System.ComponentModel.DataAnnotations, Version=4.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35
//----------------------------------------------------------------------------
//  The code is automatically generated by the GenCodeNET tool.
//----------------------------------------------------------------------------
//  .NET Framework: 4.0
//----------------------------------------------------------------------------
//  UnitName: DDN.System.ComponentModel.DataAnnotations
//  Author: ying32
//----------------------------------------------------------------------------

unit DDN.System.ComponentModel.DataAnnotations;

{$IFDEF FPC}
  {$mode delphi}//{$H+}
  {$modeswitch advancedrecords}
  {$modeswitch prefixedattributes} // Custom attributes feature，fpc3.2.2+
{$ENDIF}

interface

uses
  DDN.Runtime,
  DDN.mscorlib,
  DDN.System;

type

{ enums }

  //-------------namespace: System.ComponentModel.DataAnnotations----------------
  ///<summary>
  ///  表示与数据字段和参数关联的数据类型的枚举。
  ///</summary>
  [DNTypeName('System.ComponentModel.DataAnnotations.DataType')]
  DNDataType = type Integer;
  DNDataTypeHelper = record helper for DNDataType
  public const
    ///<summary>
    ///  表示自定义数据类型。
    ///</summary>
    Custom = 0;
    ///<summary>
    ///  表示某一瞬间中时，表示为日期和当天的时间。
    ///</summary>
    DateTime = 1;
    ///<summary>
    ///  表示的日期值。
    ///</summary>
    Date = 2;
    ///<summary>
    ///  表示一个时间值。
    ///</summary>
    Time = 3;
    ///<summary>
    ///  表示存在的对象的持续时间。
    ///</summary>
    Duration = 4;
    ///<summary>
    ///  表示电话号码值。
    ///</summary>
    PhoneNumber = 5;
    ///<summary>
    ///  表示货币值。
    ///</summary>
    Currency = 6;
    ///<summary>
    ///  表示显示文本。
    ///</summary>
    Text = 7;
    ///<summary>
    ///  表示某一 HTML 文件。
    ///</summary>
    Html = 8;
    ///<summary>
    ///  表示多行文本。
    ///</summary>
    MultilineText = 9;
    ///<summary>
    ///  表示电子邮件地址。
    ///</summary>
    EmailAddress = 10;
    ///<summary>
    ///  表示密码值。
    ///</summary>
    Password = 11;
    ///<summary>
    ///  表示一个 URL 值。
    ///</summary>
    Url = 12;
    ///<summary>
    ///  表示的图像的 URL。
    ///</summary>
    ImageUrl = 13;
    ///<summary>
    ///  表示信用卡卡号。
    ///</summary>
    CreditCard = 14;
    ///<summary>
    ///  表示邮政编码。
    ///</summary>
    PostalCode = 15;
    ///<summary>
    ///  表示文件上载的数据类型。
    ///</summary>
    Upload = 16;
  end;


  //-------------namespace: System.ComponentModel.DataAnnotations.Schema----------------
  ///<summary>
  ///  表示用于在数据库中生成的属性的值的模式。
  ///</summary>
  [DNTypeName('System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption')]
  DNDatabaseGeneratedOption = type Integer;
  DNDatabaseGeneratedOptionHelper = record helper for DNDatabaseGeneratedOption
  public const
    ///<summary>
    ///  数据库不生成值。
    ///</summary>
    None = 0;
    ///<summary>
    ///  在插入行时，数据库将生成值。
    ///</summary>
    Identity = 1;
    ///<summary>
    ///  在插入或更新行时，数据库将生成值。
    ///</summary>
    Computed = 2;
  end;




type


{ declares }

  DNIValidatableObject = interface; // type: System.ComponentModel.DataAnnotations.IValidatableObject, namespace: System.ComponentModel.DataAnnotations
  DNAssociationAttribute = interface; // type: System.ComponentModel.DataAnnotations.AssociationAttribute, namespace: System.ComponentModel.DataAnnotations
  DNBindableTypeAttribute = interface; // type: System.ComponentModel.DataAnnotations.BindableTypeAttribute, namespace: System.ComponentModel.DataAnnotations
  DNConcurrencyCheckAttribute = interface; // type: System.ComponentModel.DataAnnotations.ConcurrencyCheckAttribute, namespace: System.ComponentModel.DataAnnotations
  DNDisplayAttribute = interface; // type: System.ComponentModel.DataAnnotations.DisplayAttribute, namespace: System.ComponentModel.DataAnnotations
  DNDisplayColumnAttribute = interface; // type: System.ComponentModel.DataAnnotations.DisplayColumnAttribute, namespace: System.ComponentModel.DataAnnotations
  DNDisplayFormatAttribute = interface; // type: System.ComponentModel.DataAnnotations.DisplayFormatAttribute, namespace: System.ComponentModel.DataAnnotations
  DNEditableAttribute = interface; // type: System.ComponentModel.DataAnnotations.EditableAttribute, namespace: System.ComponentModel.DataAnnotations
  DNFilterUIHintAttribute = interface; // type: System.ComponentModel.DataAnnotations.FilterUIHintAttribute, namespace: System.ComponentModel.DataAnnotations
  DNKeyAttribute = interface; // type: System.ComponentModel.DataAnnotations.KeyAttribute, namespace: System.ComponentModel.DataAnnotations
  DNMetadataTypeAttribute = interface; // type: System.ComponentModel.DataAnnotations.MetadataTypeAttribute, namespace: System.ComponentModel.DataAnnotations
  DNScaffoldColumnAttribute = interface; // type: System.ComponentModel.DataAnnotations.ScaffoldColumnAttribute, namespace: System.ComponentModel.DataAnnotations
  DNScaffoldTableAttribute = interface; // type: System.ComponentModel.DataAnnotations.ScaffoldTableAttribute, namespace: System.ComponentModel.DataAnnotations
  DNColumnAttribute = interface; // type: System.ComponentModel.DataAnnotations.Schema.ColumnAttribute, namespace: System.ComponentModel.DataAnnotations.Schema
  DNComplexTypeAttribute = interface; // type: System.ComponentModel.DataAnnotations.Schema.ComplexTypeAttribute, namespace: System.ComponentModel.DataAnnotations.Schema
  DNDatabaseGeneratedAttribute = interface; // type: System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedAttribute, namespace: System.ComponentModel.DataAnnotations.Schema
  DNForeignKeyAttribute = interface; // type: System.ComponentModel.DataAnnotations.Schema.ForeignKeyAttribute, namespace: System.ComponentModel.DataAnnotations.Schema
  DNInversePropertyAttribute = interface; // type: System.ComponentModel.DataAnnotations.Schema.InversePropertyAttribute, namespace: System.ComponentModel.DataAnnotations.Schema
  DNNotMappedAttribute = interface; // type: System.ComponentModel.DataAnnotations.Schema.NotMappedAttribute, namespace: System.ComponentModel.DataAnnotations.Schema
  DNTableAttribute = interface; // type: System.ComponentModel.DataAnnotations.Schema.TableAttribute, namespace: System.ComponentModel.DataAnnotations.Schema
  DNTimestampAttribute = interface; // type: System.ComponentModel.DataAnnotations.TimestampAttribute, namespace: System.ComponentModel.DataAnnotations
  DNUIHintAttribute = interface; // type: System.ComponentModel.DataAnnotations.UIHintAttribute, namespace: System.ComponentModel.DataAnnotations
  DNValidationAttribute = interface; // type: System.ComponentModel.DataAnnotations.ValidationAttribute, namespace: System.ComponentModel.DataAnnotations
  DNCompareAttribute = interface; // type: System.ComponentModel.DataAnnotations.CompareAttribute, namespace: System.ComponentModel.DataAnnotations
  DNCustomValidationAttribute = interface; // type: System.ComponentModel.DataAnnotations.CustomValidationAttribute, namespace: System.ComponentModel.DataAnnotations
  DNDataTypeAttribute = interface; // type: System.ComponentModel.DataAnnotations.DataTypeAttribute, namespace: System.ComponentModel.DataAnnotations
  DNCreditCardAttribute = interface; // type: System.ComponentModel.DataAnnotations.CreditCardAttribute, namespace: System.ComponentModel.DataAnnotations
  DNEmailAddressAttribute = interface; // type: System.ComponentModel.DataAnnotations.EmailAddressAttribute, namespace: System.ComponentModel.DataAnnotations
  DNEnumDataTypeAttribute = interface; // type: System.ComponentModel.DataAnnotations.EnumDataTypeAttribute, namespace: System.ComponentModel.DataAnnotations
  DNFileExtensionsAttribute = interface; // type: System.ComponentModel.DataAnnotations.FileExtensionsAttribute, namespace: System.ComponentModel.DataAnnotations
  DNPhoneAttribute = interface; // type: System.ComponentModel.DataAnnotations.PhoneAttribute, namespace: System.ComponentModel.DataAnnotations
  DNUrlAttribute = interface; // type: System.ComponentModel.DataAnnotations.UrlAttribute, namespace: System.ComponentModel.DataAnnotations
  DNMaxLengthAttribute = interface; // type: System.ComponentModel.DataAnnotations.MaxLengthAttribute, namespace: System.ComponentModel.DataAnnotations
  DNMinLengthAttribute = interface; // type: System.ComponentModel.DataAnnotations.MinLengthAttribute, namespace: System.ComponentModel.DataAnnotations
  DNRangeAttribute = interface; // type: System.ComponentModel.DataAnnotations.RangeAttribute, namespace: System.ComponentModel.DataAnnotations
  DNRegularExpressionAttribute = interface; // type: System.ComponentModel.DataAnnotations.RegularExpressionAttribute, namespace: System.ComponentModel.DataAnnotations
  DNRequiredAttribute = interface; // type: System.ComponentModel.DataAnnotations.RequiredAttribute, namespace: System.ComponentModel.DataAnnotations
  DNStringLengthAttribute = interface; // type: System.ComponentModel.DataAnnotations.StringLengthAttribute, namespace: System.ComponentModel.DataAnnotations
  DNValidationContext = interface; // type: System.ComponentModel.DataAnnotations.ValidationContext, namespace: System.ComponentModel.DataAnnotations
  DNValidationResult = interface; // type: System.ComponentModel.DataAnnotations.ValidationResult, namespace: System.ComponentModel.DataAnnotations
  DNValidator = interface; // type: System.ComponentModel.DataAnnotations.Validator, namespace: System.ComponentModel.DataAnnotations
  DNAssociatedMetadataTypeTypeDescriptionProvider = interface; // type: System.ComponentModel.DataAnnotations.AssociatedMetadataTypeTypeDescriptionProvider, namespace: System.ComponentModel.DataAnnotations
  DNValidationException = interface; // type: System.ComponentModel.DataAnnotations.ValidationException, namespace: System.ComponentModel.DataAnnotations


{ objects }

  //-------------namespace: System.ComponentModel.DataAnnotations----------------
  ///<summary>
  ///  提供使对象无效的方法。
  ///</summary>
  [DNTypeName('System.ComponentModel.DataAnnotations.IValidatableObject')]
  DNIValidatableObject = interface(DDN.mscorlib.DNObject)
  ['{FEC73482-FAD1-339F-AEAF-FB7C715B7D08}']
  { methods } 

    ///<summary>
    ///  确定指定的对象是否有效。
    ///</summary>
    ///  <param name="validationContext">
    ///  验证上下文中。
    ///</param>
    ///<returns>
    ///  保存失败验证的信息集合。
    ///</returns>
    function Validate(validationContext: DNValidationContext): DDN.mscorlib.DNIEnumerable<DNValidationResult>;

  end;

  //-------------namespace: System.ComponentModel.DataAnnotations----------------
  DNAssociationAttributeClass = interface(DDN.mscorlib.DNAttributeClass)
  ['{A00ED2FB-5600-59C0-9867-62962336C84E}']
  { constructors } 

    ///<summary>
    ///  初始化 <see cref="T:System.ComponentModel.DataAnnotations.AssociationAttribute" />
    ///  类的新实例。
    ///</summary>
    ///  <param name="name">
    ///  关联的名称。
    ///</param>
    ///  <param name="thisKey">
    ///  逗号分隔的键值上的属性名称的列表 <paramref name="thisKey" />
    ///  侧的关联。
    ///</param>
    ///  <param name="otherKey">
    ///  逗号分隔的键值上的属性名称的列表 <paramref name="otherKey" />
    ///  侧的关联。
    ///</param>
    {class} function init(name: string; thisKey: string; otherKey: string): DNAssociationAttribute;

  end;

  ///<summary>
  ///  指定实体成员表示数据关系（如外键关系）。
  ///</summary>
  [DNTypeName('System.ComponentModel.DataAnnotations.AssociationAttribute')]
  DNAssociationAttribute = interface(DDN.mscorlib.DNAttribute)
  ['{505CB5D6-BD2C-3930-B557-6877FFD39229}']
  { getters & setters } 

    function get_Name: string;
    function get_ThisKey: string;
    function get_OtherKey: string;
    function get_IsForeignKey: Boolean;
    procedure set_IsForeignKey(value: Boolean);
    function get_ThisKeyMembers: DDN.mscorlib.DNIEnumerable<string>;
    function get_OtherKeyMembers: DDN.mscorlib.DNIEnumerable<string>;
    function get_TypeId: DDN.mscorlib.DNObject;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DDN.mscorlib.DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  获取关联的名称。
    ///</summary>
    ///<returns>
    ///  关联的名称。
    ///</returns>
    property Name: string read get_Name;
    ///<summary>
    ///  获取关联的 ThisKey 端密钥值的属性名称。
    ///</summary>
    ///<returns>
    ///  表示键值的 ThisKey 端关联的属性名称的以逗号分隔列表。
    ///</returns>
    property ThisKey: string read get_ThisKey;
    ///<summary>
    ///  获取关联的 OtherKey 端密钥值的属性名称。
    ///</summary>
    ///<returns>
    ///  表示键值的 OtherKey 端关联的属性名称的以逗号分隔列表。
    ///</returns>
    property OtherKey: string read get_OtherKey;
    ///<summary>
    ///  获取或设置一个值，该值指示是否关联成员表示外键。
    ///</summary>
    ///<returns><see langword="true" />
    ///  如果关联表示外键;否则为 <see langword="false" />
    ///  。
    ///</returns>
    property IsForeignKey: Boolean read get_IsForeignKey write set_IsForeignKey;
    ///<summary>
    ///  获取集合中指定的各个键成员 <see cref="P:System.ComponentModel.DataAnnotations.AssociationAttribute.ThisKey" />
    ///  属性。
    ///</summary>
    ///<returns>
    ///  集合中指定的各个键成员 <see cref="P:System.ComponentModel.DataAnnotations.AssociationAttribute.ThisKey" />
    ///  属性。
    ///</returns>
    property ThisKeyMembers: DDN.mscorlib.DNIEnumerable<string> read get_ThisKeyMembers;
    ///<summary>
    ///  获取集合中指定的各个键成员 <see cref="P:System.ComponentModel.DataAnnotations.AssociationAttribute.OtherKey" />
    ///  属性。
    ///</summary>
    ///<returns>
    ///  集合中指定的各个键成员 <see cref="P:System.ComponentModel.DataAnnotations.AssociationAttribute.OtherKey" />
    ///  属性。
    ///</returns>
    property OtherKeyMembers: DDN.mscorlib.DNIEnumerable<string> read get_OtherKeyMembers;
    property TypeId: DDN.mscorlib.DNObject read get_TypeId;
  end;

  TDNAssociationAttribute = class(TDNGenericImport<DNAssociationAttributeClass, DNAssociationAttribute>) end;

  //-------------namespace: System.ComponentModel.DataAnnotations----------------
  DNBindableTypeAttributeClass = interface(DDN.mscorlib.DNAttributeClass)
  ['{2FA4B21F-A7BA-5DF1-B24E-AEBC41F37201}']
  { constructors } 

    ///<summary>
    ///  初始化 <see cref="T:System.ComponentModel.DataAnnotations.BindableTypeAttribute" />
    ///  类的新实例。
    ///</summary>
    {class} function init: DNBindableTypeAttribute;

  end;

  ///<summary>
  ///  指定是否一种类型通常用于绑定。
  ///</summary>
  [DNTypeName('System.ComponentModel.DataAnnotations.BindableTypeAttribute')]
  DNBindableTypeAttribute = interface(DDN.mscorlib.DNAttribute)
  ['{34CA8A83-0DB5-3907-B762-23C7E92B3901}']
  { getters & setters } 

    function get_IsBindable: Boolean;
    procedure set_IsBindable(value: Boolean);
    function get_TypeId: DDN.mscorlib.DNObject;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DDN.mscorlib.DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  获取一个值，该值类型通常用于绑定。
    ///</summary>
    ///<returns>
    ///  true 如果该属性通常用于绑定;否则为 false。
    ///</returns>
    property IsBindable: Boolean read get_IsBindable write set_IsBindable;
    property TypeId: DDN.mscorlib.DNObject read get_TypeId;
  end;

  TDNBindableTypeAttribute = class(TDNGenericImport<DNBindableTypeAttributeClass, DNBindableTypeAttribute>) end;

  //-------------namespace: System.ComponentModel.DataAnnotations----------------
  DNConcurrencyCheckAttributeClass = interface(DDN.mscorlib.DNAttributeClass)
  ['{1D3E64AB-3825-5F49-BAA9-23ACFAE79A89}']
  { constructors } 

    ///<summary>
    ///  初始化 <see cref="T:System.ComponentModel.DataAnnotations.ConcurrencyCheckAttribute" />
    ///  类的新实例。
    ///</summary>
    {class} function init: DNConcurrencyCheckAttribute;

  end;

  ///<summary>
  ///  指定属性参与乐观并发检查。
  ///</summary>
  [DNTypeName('System.ComponentModel.DataAnnotations.ConcurrencyCheckAttribute')]
  DNConcurrencyCheckAttribute = interface(DDN.mscorlib.DNAttribute)
  ['{15B66C64-0770-3170-BF09-FED4005D813B}']
  { getters & setters } 

    function get_TypeId: DDN.mscorlib.DNObject;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DDN.mscorlib.DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property TypeId: DDN.mscorlib.DNObject read get_TypeId;
  end;

  TDNConcurrencyCheckAttribute = class(TDNGenericImport<DNConcurrencyCheckAttributeClass, DNConcurrencyCheckAttribute>) end;

  //-------------namespace: System.ComponentModel.DataAnnotations----------------
  DNDisplayAttributeClass = interface(DDN.mscorlib.DNAttributeClass)
  ['{9F961B36-EAFD-5CCC-A771-860B15A7190A}']
  { constructors } 

    ///<summary>
    ///  初始化 <see cref="T:System.ComponentModel.DataAnnotations.DisplayAttribute" />
    ///  类的新实例。
    ///</summary>
    {class} function init: DNDisplayAttribute;

  end;

  ///<summary>
  ///  提供允许为实体分部类的类型和成员指定可本地化字符串的通用特性。
  ///</summary>
  [DNTypeName('System.ComponentModel.DataAnnotations.DisplayAttribute')]
  DNDisplayAttribute = interface(DDN.mscorlib.DNAttribute)
  ['{C458178A-090C-3176-8897-A34E3D717B09}']
  { getters & setters } 

    function get_ShortName: string;
    procedure set_ShortName(value: string);
    function get_Name: string;
    procedure set_Name(value: string);
    function get_Description: string;
    procedure set_Description(value: string);
    function get_Prompt: string;
    procedure set_Prompt(value: string);
    function get_GroupName: string;
    procedure set_GroupName(value: string);
    function get_ResourceType: DDN.mscorlib.DNType;
    procedure set_ResourceType(value: DDN.mscorlib.DNType);
    function get_AutoGenerateField: Boolean;
    procedure set_AutoGenerateField(value: Boolean);
    function get_AutoGenerateFilter: Boolean;
    procedure set_AutoGenerateFilter(value: Boolean);
    function get_Order: Int32;
    procedure set_Order(value: Int32);
    function get_TypeId: DDN.mscorlib.DNObject;

  { methods } 

    ///<summary>
    ///  返回的值 <see cref="P:System.ComponentModel.DataAnnotations.DisplayAttribute.ShortName" />
    ///  属性。
    ///</summary>
    ///<returns>
    ///  本地化的字符串 <see cref="P:System.ComponentModel.DataAnnotations.DisplayAttribute.ShortName" />
    ///  属性如果 <see cref="P:System.ComponentModel.DataAnnotations.DisplayAttribute.ResourceType" />
    ///  指定属性，如果 <see cref="P:System.ComponentModel.DataAnnotations.DisplayAttribute.ShortName" />
    ///  属性表示的资源键; 否则为非本地化的值 <see cref="P:System.ComponentModel.DataAnnotations.DisplayAttribute.ShortName" />
    ///  值属性。
    ///</returns>
    function GetShortName: string;
    ///<summary>
    ///  返回一个值，用于在 UI 中的字段显示。
    ///</summary>
    ///<returns>
    ///  本地化的字符串 <see cref="P:System.ComponentModel.DataAnnotations.DisplayAttribute.Name" />
    ///  属性，如果 <see cref="P:System.ComponentModel.DataAnnotations.DisplayAttribute.ResourceType" />
    ///  指定属性和 <see cref="P:System.ComponentModel.DataAnnotations.DisplayAttribute.Name" />
    ///  属性表示的资源键; 否则为非本地化的值 <see cref="P:System.ComponentModel.DataAnnotations.DisplayAttribute.Name" />
    ///  属性。
    ///</returns>
    ///<exception cref="T:System.InvalidOperationException"><see cref="P:System.ComponentModel.DataAnnotations.DisplayAttribute.ResourceType" />
    ///  属性和 <see cref="P:System.ComponentModel.DataAnnotations.DisplayAttribute.Name" />
    ///  属性进行了初始化，但公共静态属性具有匹配名称 <see cref="P:System.ComponentModel.DataAnnotations.DisplayAttribute.Name" />
    ///  为找不到值 <see cref="P:System.ComponentModel.DataAnnotations.DisplayAttribute.ResourceType" />
    ///  属性。
    ///</exception>
    function GetName: string;
    ///<summary>
    ///  返回的值 <see cref="P:System.ComponentModel.DataAnnotations.DisplayAttribute.Description" />
    ///  属性。
    ///</summary>
    ///<returns>
    ///  本地化的描述，如果 <see cref="P:System.ComponentModel.DataAnnotations.DisplayAttribute.ResourceType" />
    ///  已指定与 <see cref="P:System.ComponentModel.DataAnnotations.DisplayAttribute.Description" />
    ///  属性表示的资源键; 否则为非本地化的值 <see cref="P:System.ComponentModel.DataAnnotations.DisplayAttribute.Description" />
    ///  属性。
    ///</returns>
    ///<exception cref="T:System.InvalidOperationException"><see cref="P:System.ComponentModel.DataAnnotations.DisplayAttribute.ResourceType" />
    ///  属性和 <see cref="P:System.ComponentModel.DataAnnotations.DisplayAttribute.Description" />
    ///  属性进行了初始化，但公共静态属性具有匹配名称 <see cref="P:System.ComponentModel.DataAnnotations.DisplayAttribute.Description" />
    ///  为找不到值 <see cref="P:System.ComponentModel.DataAnnotations.DisplayAttribute.ResourceType" />
    ///  属性。
    ///</exception>
    function GetDescription: string;
    ///<summary>
    ///  返回的值 <see cref="P:System.ComponentModel.DataAnnotations.DisplayAttribute.Prompt" />
    ///  属性。
    ///</summary>
    ///<returns>
    ///  获取本地化的字符串为 <see cref="P:System.ComponentModel.DataAnnotations.DisplayAttribute.Prompt" />
    ///  属性如果 <see cref="P:System.ComponentModel.DataAnnotations.DisplayAttribute.ResourceType" />
    ///  指定属性，如果 <see cref="P:System.ComponentModel.DataAnnotations.DisplayAttribute.Prompt" />
    ///  属性表示的资源键; 否则为非本地化的值 <see cref="P:System.ComponentModel.DataAnnotations.DisplayAttribute.Prompt" />
    ///  属性。
    ///</returns>
    function GetPrompt: string;
    ///<summary>
    ///  返回的值 <see cref="P:System.ComponentModel.DataAnnotations.DisplayAttribute.GroupName" />
    ///  属性。
    ///</summary>
    ///<returns>
    ///  如果使用在 UI 中，分组字段的值 <see cref="P:System.ComponentModel.DataAnnotations.DisplayAttribute.GroupName" />
    ///  已初始化; 否则为 <see langword="null" />
    ///  。
    ///  如果 <see cref="P:System.ComponentModel.DataAnnotations.DisplayAttribute.ResourceType" />
    ///  指定属性和 <see cref="P:System.ComponentModel.DataAnnotations.DisplayAttribute.GroupName" />
    ///  属性表示的资源键，则返回一个本地化的字符串; 否则，返回一个非本地化的字符串。
    ///</returns>
    function GetGroupName: string;
    ///<summary>
    ///  返回的值 <see cref="P:System.ComponentModel.DataAnnotations.DisplayAttribute.AutoGenerateField" />
    ///  属性。
    ///</summary>
    ///<returns>
    ///  值 <see cref="P:System.ComponentModel.DataAnnotations.DisplayAttribute.AutoGenerateField" />
    ///  属性已初始化; 否则为如果 <see langword="null" />
    ///  。
    ///</returns>
    function GetAutoGenerateField: DDN.mscorlib.DNNullable<Boolean>;
    ///<summary>
    ///  返回一个值，该值指示是否应自动生成用户界面以显示为此字段的筛选。
    ///</summary>
    ///<returns>
    ///  值 <see cref="P:System.ComponentModel.DataAnnotations.DisplayAttribute.AutoGenerateFilter" />
    ///  属性已初始化; 否则为如果 <see langword="null" />
    ///  。
    ///</returns>
    function GetAutoGenerateFilter: DDN.mscorlib.DNNullable<Boolean>;
    ///<summary>
    ///  返回的值 <see cref="P:System.ComponentModel.DataAnnotations.DisplayAttribute.Order" />
    ///  属性。
    ///</summary>
    ///<returns>
    ///  值 <see cref="P:System.ComponentModel.DataAnnotations.DisplayAttribute.Order" />
    ///  属性，如果已设置; 否则为 <see langword="null" />
    ///  。
    ///</returns>
    function GetOrder: DDN.mscorlib.DNNullable<Int32>;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DDN.mscorlib.DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  获取或设置一个值，用于网格列标签。
    ///</summary>
    ///<returns>
    ///  一个值，表示网格列标签。
    ///</returns>
    property ShortName: string read get_ShortName write set_ShortName;
    ///<summary>
    ///  获取或设置一个值，用于在 UI 中显示。
    ///</summary>
    ///<returns>
    ///  一个值，用于在 UI 中显示。
    ///</returns>
    property Name: string read get_Name write set_Name;
    ///<summary>
    ///  获取或设置一个值，用于在 UI 中显示的说明。
    ///</summary>
    ///<returns>
    ///  该值用于在 UI 中显示的说明。
    ///</returns>
    property Description: string read get_Description write set_Description;
    ///<summary>
    ///  获取或设置一个值，用于设置用户界面中的提示的水印。
    ///</summary>
    ///<returns>
    ///  一个值，将用于水印的 UI 中显示。
    ///</returns>
    property Prompt: string read get_Prompt write set_Prompt;
    ///<summary>
    ///  获取或设置一个值，用于在 UI 中的字段进行分组。
    ///</summary>
    ///<returns>
    ///  一个值，用于在 UI 中的字段进行分组。
    ///</returns>
    property GroupName: string read get_GroupName write set_GroupName;
    ///<summary>
    ///  获取或设置包含的资源类型 <see cref="P:System.ComponentModel.DataAnnotations.DisplayAttribute.ShortName" />
    ///  , ，<see cref="P:System.ComponentModel.DataAnnotations.DisplayAttribute.Name" />
    ///  , ，<see cref="P:System.ComponentModel.DataAnnotations.DisplayAttribute.Prompt" />
    ///  , ，和 <see cref="P:System.ComponentModel.DataAnnotations.DisplayAttribute.Description" />
    ///  属性。
    ///</summary>
    ///<returns>
    ///  包含的资源的类型 <see cref="P:System.ComponentModel.DataAnnotations.DisplayAttribute.ShortName" />
    ///  , ，<see cref="P:System.ComponentModel.DataAnnotations.DisplayAttribute.Name" />
    ///  , ，<see cref="P:System.ComponentModel.DataAnnotations.DisplayAttribute.Prompt" />
    ///  , ，和 <see cref="P:System.ComponentModel.DataAnnotations.DisplayAttribute.Description" />
    ///  属性。
    ///</returns>
    property ResourceType: DDN.mscorlib.DNType read get_ResourceType write set_ResourceType;
    ///<summary>
    ///  获取或设置一个值，该值指示是否应自动生成 UI 以显示此字段。
    ///</summary>
    ///<returns><see langword="true" />
    ///  如果应自动生成用户界面来显示该字段;否则为 <see langword="false" />
    ///  。
    ///</returns>
    ///<exception cref="T:System.InvalidOperationException">
    ///  尝试获取属性值之前已设置。
    ///</exception>
    property AutoGenerateField: Boolean read get_AutoGenerateField write set_AutoGenerateField;
    ///<summary>
    ///  获取或设置一个值，该值指示是否筛选用户界面将自动显示为此字段。
    ///</summary>
    ///<returns><see langword="true" />
    ///  如果应自动生成用户界面以显示筛选为此字段;否则为 <see langword="false" />
    ///  。
    ///</returns>
    ///<exception cref="T:System.InvalidOperationException">
    ///  尝试获取属性值之前已设置。
    ///</exception>
    property AutoGenerateFilter: Boolean read get_AutoGenerateFilter write set_AutoGenerateFilter;
    ///<summary>
    ///  获取或设置列的排序权重。
    ///</summary>
    ///<returns>
    ///  列的排序权重。
    ///</returns>
    property Order: Int32 read get_Order write set_Order;
    property TypeId: DDN.mscorlib.DNObject read get_TypeId;
  end;

  TDNDisplayAttribute = class(TDNGenericImport<DNDisplayAttributeClass, DNDisplayAttribute>) end;

  //-------------namespace: System.ComponentModel.DataAnnotations----------------
  DNDisplayColumnAttributeClass = interface(DDN.mscorlib.DNAttributeClass)
  ['{A82CAC57-8BC6-5261-95E7-4C1C1275C67C}']
  { constructors } 

    ///<summary>
    ///  新实例初始化 <see cref="T:System.ComponentModel.DataAnnotations.DisplayColumnAttribute" />
    ///  类通过使用指定的列。
    ///</summary>
    ///  <param name="displayColumn">
    ///  要用作显示列的列的名称。
    ///</param>
    {class} function init(displayColumn: string): DNDisplayColumnAttribute; overload;
    ///<summary>
    ///  新实例初始化 <see cref="T:System.ComponentModel.DataAnnotations.DisplayColumnAttribute" />
    ///  类通过使用指定的显示和排序的列。
    ///</summary>
    ///  <param name="displayColumn">
    ///  要用作显示列的列的名称。
    ///</param>
    ///  <param name="sortColumn">
    ///  要用于排序的列的名称。
    ///</param>
    {class} function init(displayColumn: string; sortColumn: string): DNDisplayColumnAttribute; overload;
    ///<summary>
    ///  新实例初始化 <see cref="T:System.ComponentModel.DataAnnotations.DisplayColumnAttribute" />
    ///  类通过使用指定的显示列中，以及指定的排序列和排序顺序。
    ///</summary>
    ///  <param name="displayColumn">
    ///  要用作显示列的列的名称。
    ///</param>
    ///  <param name="sortColumn">
    ///  要用于排序的列的名称。
    ///</param>
    ///  <param name="sortDescending"><see langword="true" />
    ///  若要按降序顺序排列。否则为 <see langword="false" />
    ///  。
    ///  默认值为 <see langword="false" />
    ///  。
    ///</param>
    {class} function init(displayColumn: string; sortColumn: string; sortDescending: Boolean): DNDisplayColumnAttribute; overload;

  end;

  ///<summary>
  ///  指定作为外键列显示在被引用表中的列。
  ///</summary>
  [DNTypeName('System.ComponentModel.DataAnnotations.DisplayColumnAttribute')]
  DNDisplayColumnAttribute = interface(DDN.mscorlib.DNAttribute)
  ['{96567ADC-2AD8-3CFB-97A2-0BD44DA477B2}']
  { getters & setters } 

    function get_DisplayColumn: string;
    function get_SortColumn: string;
    function get_SortDescending: Boolean;
    function get_TypeId: DDN.mscorlib.DNObject;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DDN.mscorlib.DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  获取要用作显示字段的列的名称。
    ///</summary>
    ///<returns>
    ///  显示列的名称。
    ///</returns>
    property DisplayColumn: string read get_DisplayColumn;
    ///<summary>
    ///  获取要用于排序的列的名称。
    ///</summary>
    ///<returns>
    ///  排序列的名称。
    ///</returns>
    property SortColumn: string read get_SortColumn;
    ///<summary>
    ///  获取一个值，该值指示是否按升序或降序排列。
    ///</summary>
    ///<returns><see langword="true" />
    ///  如果此列将按降序排列;否则为 <see langword="false" />
    ///  。
    ///</returns>
    property SortDescending: Boolean read get_SortDescending;
    property TypeId: DDN.mscorlib.DNObject read get_TypeId;
  end;

  TDNDisplayColumnAttribute = class(TDNGenericImport<DNDisplayColumnAttributeClass, DNDisplayColumnAttribute>) end;

  //-------------namespace: System.ComponentModel.DataAnnotations----------------
  DNDisplayFormatAttributeClass = interface(DDN.mscorlib.DNAttributeClass)
  ['{FC6A5CC2-C93D-59D0-A805-7B07028CCBE1}']
  { constructors } 

    ///<summary>
    ///  初始化 <see cref="T:System.ComponentModel.DataAnnotations.DisplayFormatAttribute" />
    ///  类的新实例。
    ///</summary>
    {class} function init: DNDisplayFormatAttribute;

  end;

  ///<summary>
  ///  指定数据字段显示和设置格式的 ASP.NET 动态数据的方式。
  ///</summary>
  [DNTypeName('System.ComponentModel.DataAnnotations.DisplayFormatAttribute')]
  DNDisplayFormatAttribute = interface(DDN.mscorlib.DNAttribute)
  ['{0AA2ECF9-934A-34C5-94C8-221700D2D0F0}']
  { getters & setters } 

    function get_DataFormatString: string;
    procedure set_DataFormatString(value: string);
    function get_NullDisplayText: string;
    procedure set_NullDisplayText(value: string);
    function get_ConvertEmptyStringToNull: Boolean;
    procedure set_ConvertEmptyStringToNull(value: Boolean);
    function get_ApplyFormatInEditMode: Boolean;
    procedure set_ApplyFormatInEditMode(value: Boolean);
    function get_HtmlEncode: Boolean;
    procedure set_HtmlEncode(value: Boolean);
    function get_TypeId: DDN.mscorlib.DNObject;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DDN.mscorlib.DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  获取或设置字段值的显示格式。
    ///</summary>
    ///<returns>
    ///  一个指定数据字段的值的显示格式的格式设置字符串。
    ///  默认值为空字符串 ("")，表示尚无特殊格式设置应用于该字段值。
    ///</returns>
    property DataFormatString: string read get_DataFormatString write set_DataFormatString;
    ///<summary>
    ///  获取或设置该字段的值时，为字段显示的文本 <see langword="null" />
    ///  。
    ///</summary>
    ///<returns>
    ///  该字段的值时，为字段显示的文本 <see langword="null" />
    ///  。
    ///  默认值为空字符串 ("")，表示尚未设置此属性。
    ///</returns>
    property NullDisplayText: string read get_NullDisplayText write set_NullDisplayText;
    ///<summary>
    ///  获取或设置一个值，该值指示是否将空字符串值 ("") 自动转换为 <see langword="null" />
    ///  数据字段在数据源中的更新时。
    ///</summary>
    ///<returns><see langword="true" />
    ///  如果空字符串值自动转换为 <see langword="null" />
    ///  ; 否则为 <see langword="false" />
    ///  。
    ///  默认值为 <see langword="true" />
    ///  。
    ///</returns>
    property ConvertEmptyStringToNull: Boolean read get_ConvertEmptyStringToNull write set_ConvertEmptyStringToNull;
    ///<summary>
    ///  获取或设置一个值，该值指示是否的格式设置字符串，由指定 <see cref="P:System.ComponentModel.DataAnnotations.DisplayFormatAttribute.DataFormatString" />
    ///  数据字段是处于编辑模式时，将属性应用于该字段值。
    ///</summary>
    ///<returns><see langword="true" />
    ///  如果要将格式设置字符串应用于该字段值中，编辑模式，则为否则为 <see langword="false" />
    ///  。
    ///  默认值为 <see langword="false" />
    ///  。
    ///</returns>
    property ApplyFormatInEditMode: Boolean read get_ApplyFormatInEditMode write set_ApplyFormatInEditMode;
    ///<summary>
    ///  获取或设置一个值，该值指示字段是否应 HTML 编码。
    ///</summary>
    ///<returns><see langword="true" />
    ///  如果该字段应为 HTML 编码;否则为 <see langword="false" />
    ///  。
    ///</returns>
    property HtmlEncode: Boolean read get_HtmlEncode write set_HtmlEncode;
    property TypeId: DDN.mscorlib.DNObject read get_TypeId;
  end;

  TDNDisplayFormatAttribute = class(TDNGenericImport<DNDisplayFormatAttributeClass, DNDisplayFormatAttribute>) end;

  //-------------namespace: System.ComponentModel.DataAnnotations----------------
  DNEditableAttributeClass = interface(DDN.mscorlib.DNAttributeClass)
  ['{A3AF6857-FC3A-57FA-A79B-2ABEC1442135}']
  { constructors } 

    ///<summary>
    ///  初始化 <see cref="T:System.ComponentModel.DataAnnotations.EditableAttribute" />
    ///  类的新实例。
    ///</summary>
    ///  <param name="allowEdit"><see langword="true" />
    ///  若要指定该字段是可编辑;否则为 <see langword="false" />
    ///  。
    ///</param>
    {class} function init(allowEdit: Boolean): DNEditableAttribute;

  end;

  ///<summary>
  ///  指示数据字段是否可编辑。
  ///</summary>
  [DNTypeName('System.ComponentModel.DataAnnotations.EditableAttribute')]
  DNEditableAttribute = interface(DDN.mscorlib.DNAttribute)
  ['{01BC5DE8-604A-3101-B6B8-F4881965ED57}']
  { getters & setters } 

    function get_AllowEdit: Boolean;
    function get_AllowInitialValue: Boolean;
    procedure set_AllowInitialValue(value: Boolean);
    function get_TypeId: DDN.mscorlib.DNObject;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DDN.mscorlib.DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  获取一个值，该值指示是否可编辑字段。
    ///</summary>
    ///<returns><see langword="true" />
    ///  如果此字段为可编辑;否则为 <see langword="false" />
    ///  。
    ///</returns>
    property AllowEdit: Boolean read get_AllowEdit;
    ///<summary>
    ///  获取或设置一个值，该值指示是否启用初始值。
    ///</summary>
    ///<returns><see langword="true " />
    ///  如果启用了一个初始值，则否则为 <see langword="false" />
    ///  。
    ///</returns>
    property AllowInitialValue: Boolean read get_AllowInitialValue write set_AllowInitialValue;
    property TypeId: DDN.mscorlib.DNObject read get_TypeId;
  end;

  TDNEditableAttribute = class(TDNGenericImport<DNEditableAttributeClass, DNEditableAttribute>) end;

  //-------------namespace: System.ComponentModel.DataAnnotations----------------
  DNFilterUIHintAttributeClass = interface(DDN.mscorlib.DNAttributeClass)
  ['{852CBF73-3688-5FCB-A32C-2F7F4E339660}']
  { constructors } 

    ///<summary>
    ///  新实例初始化 <see cref="T:System.ComponentModel.DataAnnotations.FilterUIHintAttribute" />
    ///  类通过使用筛选器 UI 提示。
    ///</summary>
    ///  <param name="filterUIHint">
    ///  要用于筛选的控件名称。
    ///</param>
    {class} function init(filterUIHint: string): DNFilterUIHintAttribute; overload;
    ///<summary>
    ///  新实例初始化 <see cref="T:System.ComponentModel.DataAnnotations.FilterUIHintAttribute" />
    ///  类通过使用筛选器用户界面提示和表示层名称。
    ///</summary>
    ///  <param name="filterUIHint">
    ///  要用于筛选的控件名称。
    ///</param>
    ///  <param name="presentationLayer">
    ///  支持此控件的表示层的名称。
    ///</param>
    {class} function init(filterUIHint: string; presentationLayer: string): DNFilterUIHintAttribute; overload;
    ///<summary>
    ///  新实例初始化 <see cref="T:System.ComponentModel.DataAnnotations.FilterUIHintAttribute" />
    ///  类通过使用筛选器 UI 提示、 表示层名称和控制参数。
    ///</summary>
    ///  <param name="filterUIHint">
    ///  要用于筛选的控件名称。
    ///</param>
    ///  <param name="presentationLayer">
    ///  支持此控件的表示层的名称。
    ///</param>
    ///  <param name="controlParameters">
    ///  控件的参数的列表。
    ///</param>
    {class} function init(filterUIHint: string; presentationLayer: string; controlParameters: TArray<DDN.mscorlib.DNObject>): DNFilterUIHintAttribute; overload;

  end;

  ///<summary>
  ///  表示用于指定列的筛选行为的特性。
  ///</summary>
  [DNTypeName('System.ComponentModel.DataAnnotations.FilterUIHintAttribute')]
  DNFilterUIHintAttribute = interface(DDN.mscorlib.DNAttribute)
  ['{336C6A0B-F27B-33F8-A98B-E109842FFA07}']
  { getters & setters } 

    function get_FilterUIHint: string;
    function get_PresentationLayer: string;
    function get_ControlParameters: DDN.mscorlib.DNIDictionary<string, DDN.mscorlib.DNObject>;
    function get_TypeId: DDN.mscorlib.DNObject;

  { methods } 

    ///<summary>
    ///  返回此属性实例的哈希代码。
    ///</summary>
    ///<returns>
    ///  此属性实例的哈希代码。
    ///</returns>
    function GetHashCode: Int32;
    ///<summary>
    ///  返回一个值，该值指示此特性实例是否与指定的对象相等。
    ///</summary>
    ///  <param name="obj">
    ///  要与此特性实例进行比较的对象。
    ///</param>
    ///<returns><see langword="True" />
    ///  如果传递的对象是否等于此属性实例。否则为 <see langword="false" />
    ///  。
    ///</returns>
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function Match(obj: DDN.mscorlib.DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  获取要用于筛选的控件的名称。
    ///</summary>
    ///<returns>
    ///  要用于筛选的控件名称。
    ///</returns>
    property FilterUIHint: string read get_FilterUIHint;
    ///<summary>
    ///  获取支持此控件的表示层的名称。
    ///</summary>
    ///<returns>
    ///  支持此控件的表示层的名称。
    ///</returns>
    property PresentationLayer: string read get_PresentationLayer;
    ///<summary>
    ///  获取用作控件的构造函数中的参数的名称/值对。
    ///</summary>
    ///<returns>
    ///  用作控件的构造函数中的参数名称/值对。
    ///</returns>
    property ControlParameters: DDN.mscorlib.DNIDictionary<string, DDN.mscorlib.DNObject> read get_ControlParameters;
    ///<summary>
    ///  返回此属性实例的唯一标识符。
    ///</summary>
    ///<returns>
    ///  此特性实例的唯一标识符。
    ///</returns>
    property TypeId: DDN.mscorlib.DNObject read get_TypeId;
  end;

  TDNFilterUIHintAttribute = class(TDNGenericImport<DNFilterUIHintAttributeClass, DNFilterUIHintAttribute>) end;

  //-------------namespace: System.ComponentModel.DataAnnotations----------------
  DNKeyAttributeClass = interface(DDN.mscorlib.DNAttributeClass)
  ['{46B4D56D-D3F3-5FD9-BC50-97015B50D587}']
  { constructors } 

    ///<summary>
    ///  初始化 <see cref="T:System.ComponentModel.DataAnnotations.KeyAttribute" />
    ///  类的新实例。
    ///</summary>
    {class} function init: DNKeyAttribute;

  end;

  ///<summary>
  ///  表示唯一标识实体的一个或多个属性。
  ///</summary>
  [DNTypeName('System.ComponentModel.DataAnnotations.KeyAttribute')]
  DNKeyAttribute = interface(DDN.mscorlib.DNAttribute)
  ['{C1CEDDC4-1548-3C26-B2FD-51621AA6709A}']
  { getters & setters } 

    function get_TypeId: DDN.mscorlib.DNObject;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DDN.mscorlib.DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property TypeId: DDN.mscorlib.DNObject read get_TypeId;
  end;

  TDNKeyAttribute = class(TDNGenericImport<DNKeyAttributeClass, DNKeyAttribute>) end;

  //-------------namespace: System.ComponentModel.DataAnnotations----------------
  DNMetadataTypeAttributeClass = interface(DDN.mscorlib.DNAttributeClass)
  ['{16E3251E-7E4A-53B8-A47C-A278B32CE3CD}']
  { constructors } 

    ///<summary>
    ///  初始化 <see cref="T:System.ComponentModel.DataAnnotations.MetadataTypeAttribute" />
    ///  类的新实例。
    ///</summary>
    ///  <param name="metadataClassType">
    ///  要引用的元数据类。
    ///</param>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="metadataClassType" />
    ///  为 <see langword="null" />
    ///  。
    ///</exception>
    {class} function init(metadataClassType: DDN.mscorlib.DNType): DNMetadataTypeAttribute;

  end;

  ///<summary>
  ///  指定要与数据模型类关联的元数据类。
  ///</summary>
  [DNTypeName('System.ComponentModel.DataAnnotations.MetadataTypeAttribute')]
  DNMetadataTypeAttribute = interface(DDN.mscorlib.DNAttribute)
  ['{BA47AD81-FE14-3098-B874-A1C02D66BE87}']
  { getters & setters } 

    function get_MetadataClassType: DDN.mscorlib.DNType;
    function get_TypeId: DDN.mscorlib.DNObject;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DDN.mscorlib.DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  获取与数据模型的分部类相关联的元数据类。
    ///</summary>
    ///<returns>
    ///  表示元数据类的类型值。
    ///</returns>
    property MetadataClassType: DDN.mscorlib.DNType read get_MetadataClassType;
    property TypeId: DDN.mscorlib.DNObject read get_TypeId;
  end;

  TDNMetadataTypeAttribute = class(TDNGenericImport<DNMetadataTypeAttributeClass, DNMetadataTypeAttribute>) end;

  //-------------namespace: System.ComponentModel.DataAnnotations----------------
  DNScaffoldColumnAttributeClass = interface(DDN.mscorlib.DNAttributeClass)
  ['{4EF8E8F5-C7D4-5852-9135-63CD1DD28A2E}']
  { constructors } 

    ///<summary>
    ///  新实例初始化 <see cref="T:System.ComponentModel.DataAnnotations.ScaffoldColumnAttribute" />
    ///  使用 <see cref="P:System.ComponentModel.DataAnnotations.ScaffoldColumnAttribute.Scaffold" />
    ///  属性。
    ///</summary>
    ///  <param name="scaffold">
    ///  值，该值指定是否启用基架。
    ///</param>
    {class} function init(scaffold: Boolean): DNScaffoldColumnAttribute;

  end;

  ///<summary>
  ///  指定类或数据列是否使用基架。
  ///</summary>
  [DNTypeName('System.ComponentModel.DataAnnotations.ScaffoldColumnAttribute')]
  DNScaffoldColumnAttribute = interface(DDN.mscorlib.DNAttribute)
  ['{6BE1DF74-31E9-38BD-BF02-5CA97295F182}']
  { getters & setters } 

    function get_Scaffold: Boolean;
    function get_TypeId: DDN.mscorlib.DNObject;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DDN.mscorlib.DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  获取或设置用于指定是否启用基架的值。
    ///</summary>
    ///<returns><see langword="true" />
    ///  , 如果启用了基架;否则为 <see langword="false" />
    ///  。
    ///</returns>
    property Scaffold: Boolean read get_Scaffold;
    property TypeId: DDN.mscorlib.DNObject read get_TypeId;
  end;

  TDNScaffoldColumnAttribute = class(TDNGenericImport<DNScaffoldColumnAttributeClass, DNScaffoldColumnAttribute>) end;

  //-------------namespace: System.ComponentModel.DataAnnotations----------------
  DNScaffoldTableAttributeClass = interface(DDN.mscorlib.DNAttributeClass)
  ['{9878C6BB-139B-5D63-A63C-7E0CB0CB3061}']
  { constructors } 

    ///<summary>
    ///  新实例初始化 <see cref="T:System.ComponentModel.DataAnnotations.ScaffoldTableAttribute" />
    ///  使用 <see cref="P:System.ComponentModel.DataAnnotations.ScaffoldTableAttribute.Scaffold" />
    ///  属性。
    ///</summary>
    ///  <param name="scaffold">
    ///  值，该值指定是否启用基架。
    ///</param>
    {class} function init(scaffold: Boolean): DNScaffoldTableAttribute;

  end;

  ///<summary>
  ///  指定类或数据的表是否使用基架。
  ///</summary>
  [DNTypeName('System.ComponentModel.DataAnnotations.ScaffoldTableAttribute')]
  DNScaffoldTableAttribute = interface(DDN.mscorlib.DNAttribute)
  ['{8DC703B7-9C77-37EC-BE43-A1C21A6BC9B5}']
  { getters & setters } 

    function get_Scaffold: Boolean;
    function get_TypeId: DDN.mscorlib.DNObject;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DDN.mscorlib.DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  获取或设置用于指定是否启用基架的值。
    ///</summary>
    ///<returns><see langword="true" />
    ///  , 如果启用了基架;否则为 <see langword="false" />
    ///  。
    ///</returns>
    property Scaffold: Boolean read get_Scaffold;
    property TypeId: DDN.mscorlib.DNObject read get_TypeId;
  end;

  TDNScaffoldTableAttribute = class(TDNGenericImport<DNScaffoldTableAttributeClass, DNScaffoldTableAttribute>) end;

  //-------------namespace: System.ComponentModel.DataAnnotations.Schema----------------
  DNColumnAttributeClass = interface(DDN.mscorlib.DNAttributeClass)
  ['{87D5B0F7-D18E-52FD-A8C8-3B1BC819C7AF}']
  { constructors } 

    ///<summary>
    ///  初始化 <see cref="T:System.ComponentModel.DataAnnotations.Schema.ColumnAttribute" />
    ///  类的新实例。
    ///</summary>
    {class} function init: DNColumnAttribute; overload;
    ///<summary>
    ///  初始化 <see cref="T:System.ComponentModel.DataAnnotations.Schema.ColumnAttribute" />
    ///  类的新实例。
    ///</summary>
    ///  <param name="name">
    ///  属性将映射到的列的名称。
    ///</param>
    {class} function init(name: string): DNColumnAttribute; overload;

  end;

  ///<summary>
  ///  表示属性将映射到的数据库列。
  ///</summary>
  [DNTypeName('System.ComponentModel.DataAnnotations.Schema.ColumnAttribute')]
  DNColumnAttribute = interface(DDN.mscorlib.DNAttribute)
  ['{48D30EB7-F488-3FC0-BED8-E459BFDB98FC}']
  { getters & setters } 

    function get_Name: string;
    function get_Order: Int32;
    procedure set_Order(value: Int32);
    function get_TypeName: string;
    procedure set_TypeName(value: string);
    function get_TypeId: DDN.mscorlib.DNObject;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DDN.mscorlib.DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  获取属性映射到的列的名称。
    ///</summary>
    ///<returns>
    ///  属性将映射到的列的名称。
    ///</returns>
    property Name: string read get_Name;
    ///<summary>
    ///  获取或设置属性映射到的列的从零开始的顺序。
    ///</summary>
    ///<returns>
    ///  列的顺序。
    ///</returns>
    property Order: Int32 read get_Order write set_Order;
    ///<summary>
    ///  获取或设置该属性映射到的列的数据库提供程序特定的数据类型。
    ///</summary>
    ///<returns>
    ///  属性将映射到的列的数据库提供程序特定数据类型。
    ///</returns>
    property TypeName: string read get_TypeName write set_TypeName;
    property TypeId: DDN.mscorlib.DNObject read get_TypeId;
  end;

  TDNColumnAttribute = class(TDNGenericImport<DNColumnAttributeClass, DNColumnAttribute>) end;

  //-------------namespace: System.ComponentModel.DataAnnotations.Schema----------------
  DNComplexTypeAttributeClass = interface(DDN.mscorlib.DNAttributeClass)
  ['{8993006F-1FDA-5A53-AB1D-45887D46E65C}']
  { constructors } 

    ///<summary>
    ///  初始化 <see cref="T:System.ComponentModel.DataAnnotations.Schema.ComplexTypeAttribute" />
    ///  类的新实例。
    ///</summary>
    {class} function init: DNComplexTypeAttribute;

  end;

  ///<summary>
  ///  表示该类是复杂类型。
  ///  复杂类型是实体类型的非标量属性，实体类型允许在实体内组织标量属性。
  ///  复杂类型没有键，并且实体框架不能脱离父对象来管理复杂类型。
  ///</summary>
  [DNTypeName('System.ComponentModel.DataAnnotations.Schema.ComplexTypeAttribute')]
  DNComplexTypeAttribute = interface(DDN.mscorlib.DNAttribute)
  ['{9CD25314-21C7-3794-820B-5BF6AFBC520B}']
  { getters & setters } 

    function get_TypeId: DDN.mscorlib.DNObject;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DDN.mscorlib.DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property TypeId: DDN.mscorlib.DNObject read get_TypeId;
  end;

  TDNComplexTypeAttribute = class(TDNGenericImport<DNComplexTypeAttributeClass, DNComplexTypeAttribute>) end;

  //-------------namespace: System.ComponentModel.DataAnnotations.Schema----------------
  DNDatabaseGeneratedAttributeClass = interface(DDN.mscorlib.DNAttributeClass)
  ['{71BEF30A-41C3-53AB-80AD-6F00D88ABCC2}']
  { constructors } 

    ///<summary>
    ///  初始化 <see cref="T:System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedAttribute" />
    ///  类的新实例。
    ///</summary>
    ///  <param name="databaseGeneratedOption">
    ///  数据库生成的选项。
    ///</param>
    {class} function init(databaseGeneratedOption: DNDatabaseGeneratedOption): DNDatabaseGeneratedAttribute;

  end;

  ///<summary>
  ///  指定数据库生成属性值的方式。
  ///</summary>
  [DNTypeName('System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedAttribute')]
  DNDatabaseGeneratedAttribute = interface(DDN.mscorlib.DNAttribute)
  ['{81C27FA6-AE95-3E0C-AD60-3C965BC9064D}']
  { getters & setters } 

    function get_DatabaseGeneratedOption: DNDatabaseGeneratedOption;
    function get_TypeId: DDN.mscorlib.DNObject;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DDN.mscorlib.DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  获取或设置用于在数据库中生成的属性值的模式。
    ///</summary>
    ///<returns>
    ///  数据库生成的选项。
    ///</returns>
    property DatabaseGeneratedOption: DNDatabaseGeneratedOption read get_DatabaseGeneratedOption;
    property TypeId: DDN.mscorlib.DNObject read get_TypeId;
  end;

  TDNDatabaseGeneratedAttribute = class(TDNGenericImport<DNDatabaseGeneratedAttributeClass, DNDatabaseGeneratedAttribute>) end;

  //-------------namespace: System.ComponentModel.DataAnnotations.Schema----------------
  DNForeignKeyAttributeClass = interface(DDN.mscorlib.DNAttributeClass)
  ['{81E42CF8-D0F0-5956-8607-F62FFF7983F6}']
  { constructors } 

    ///<summary>
    ///  初始化 <see cref="T:System.ComponentModel.DataAnnotations.Schema.ForeignKeyAttribute" />
    ///  类的新实例。
    ///</summary>
    ///  <param name="name">
    ///  如果将 ForeigKey 特性添加到外键属性，则应指定关联的导航属性的名称。
    ///  如果将 ForeigKey 特性添加到导航属性，则应指定关联的外键的名称。
    ///  如果导航属性具有多个外键，则使用逗号分隔的外键名称列表。
    ///  有关详细信息，请参阅 Code First Data Annotations。
    ///</param>
    {class} function init(name: string): DNForeignKeyAttribute;

  end;

  ///<summary>
  ///  表示关系中用作外键的属性。
  ///  可以将批注放在外键属性上，然后指定关联的导航属性名称；也可以将批注放在导航属性上，然后指定关联的外键名称。
  ///</summary>
  [DNTypeName('System.ComponentModel.DataAnnotations.Schema.ForeignKeyAttribute')]
  DNForeignKeyAttribute = interface(DDN.mscorlib.DNAttribute)
  ['{1A013D1B-AF84-349C-8698-89C6C06FC1D1}']
  { getters & setters } 

    function get_Name: string;
    function get_TypeId: DDN.mscorlib.DNObject;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DDN.mscorlib.DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  如果将 ForeigKey 特性添加到外键属性，则应指定关联的导航属性的名称。
    ///  如果将 ForeigKey 特性添加到导航属性，则应指定关联的外键的名称。
    ///  如果导航属性具有多个外键，则使用逗号分隔的外键名称列表。
    ///  有关详细信息，请参阅 Code First Data Annotations。
    ///</summary>
    ///<returns>
    ///  关联的导航属性或关联的外键属性的名称。
    ///</returns>
    property Name: string read get_Name;
    property TypeId: DDN.mscorlib.DNObject read get_TypeId;
  end;

  TDNForeignKeyAttribute = class(TDNGenericImport<DNForeignKeyAttributeClass, DNForeignKeyAttribute>) end;

  //-------------namespace: System.ComponentModel.DataAnnotations.Schema----------------
  DNInversePropertyAttributeClass = interface(DDN.mscorlib.DNAttributeClass)
  ['{7C500502-6F62-5284-930D-C80C09C56160}']
  { constructors } 

    ///<summary>
    ///  新实例初始化 <see cref="T:System.ComponentModel.DataAnnotations.Schema.InversePropertyAttribute" />
    ///  类使用指定的属性。
    ///</summary>
    ///  <param name="property">
    ///  表示同一关系的另一端的导航属性。
    ///</param>
    {class} function init(&property: string): DNInversePropertyAttribute;

  end;

  ///<summary>
  ///  指定表示同一关系的另一端的导航属性的反向属性。
  ///</summary>
  [DNTypeName('System.ComponentModel.DataAnnotations.Schema.InversePropertyAttribute')]
  DNInversePropertyAttribute = interface(DDN.mscorlib.DNAttribute)
  ['{A1087EB9-2CB5-30E8-93B3-7609218C43F4}']
  { getters & setters } 

    function get_Property: string;
    function get_TypeId: DDN.mscorlib.DNObject;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DDN.mscorlib.DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  获取表示同一关系的另一端的导航属性。
    ///</summary>
    ///<returns>
    ///  该属性的属性。
    ///</returns>
    property &Property: string read get_Property;
    property TypeId: DDN.mscorlib.DNObject read get_TypeId;
  end;

  TDNInversePropertyAttribute = class(TDNGenericImport<DNInversePropertyAttributeClass, DNInversePropertyAttribute>) end;

  //-------------namespace: System.ComponentModel.DataAnnotations.Schema----------------
  DNNotMappedAttributeClass = interface(DDN.mscorlib.DNAttributeClass)
  ['{62929748-5467-5938-8487-5B63EDE09D50}']
  { constructors } 

    ///<summary>
    ///  初始化 <see cref="T:System.ComponentModel.DataAnnotations.Schema.NotMappedAttribute" />
    ///  类的新实例。
    ///</summary>
    {class} function init: DNNotMappedAttribute;

  end;

  ///<summary>
  ///  表示应从数据库映射中排除属性或类。
  ///</summary>
  [DNTypeName('System.ComponentModel.DataAnnotations.Schema.NotMappedAttribute')]
  DNNotMappedAttribute = interface(DDN.mscorlib.DNAttribute)
  ['{359CFFD0-8FC3-3825-B578-80A1516A1730}']
  { getters & setters } 

    function get_TypeId: DDN.mscorlib.DNObject;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DDN.mscorlib.DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property TypeId: DDN.mscorlib.DNObject read get_TypeId;
  end;

  TDNNotMappedAttribute = class(TDNGenericImport<DNNotMappedAttributeClass, DNNotMappedAttribute>) end;

  //-------------namespace: System.ComponentModel.DataAnnotations.Schema----------------
  DNTableAttributeClass = interface(DDN.mscorlib.DNAttributeClass)
  ['{D945F621-69D0-538D-A795-AAE683F6266F}']
  { constructors } 

    ///<summary>
    ///  新实例初始化 <see cref="T:System.ComponentModel.DataAnnotations.Schema.TableAttribute" />
    ///  类使用的表指定的名称。
    ///</summary>
    ///  <param name="name">
    ///  类将映射到的表的名称。
    ///</param>
    {class} function init(name: string): DNTableAttribute;

  end;

  ///<summary>
  ///  指定类将映射到的数据库表。
  ///</summary>
  [DNTypeName('System.ComponentModel.DataAnnotations.Schema.TableAttribute')]
  DNTableAttribute = interface(DDN.mscorlib.DNAttribute)
  ['{A627724F-A76F-3E6E-963E-8460AEF4870B}']
  { getters & setters } 

    function get_Name: string;
    function get_Schema: string;
    procedure set_Schema(value: string);
    function get_TypeId: DDN.mscorlib.DNObject;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DDN.mscorlib.DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  获取类映射到的表的名称。
    ///</summary>
    ///<returns>
    ///  类将映射到的表的名称。
    ///</returns>
    property Name: string read get_Name;
    ///<summary>
    ///  获取或设置类映射到表的架构。
    ///</summary>
    ///<returns>
    ///  类将映射到的表的架构。
    ///</returns>
    property Schema: string read get_Schema write set_Schema;
    property TypeId: DDN.mscorlib.DNObject read get_TypeId;
  end;

  TDNTableAttribute = class(TDNGenericImport<DNTableAttributeClass, DNTableAttribute>) end;

  //-------------namespace: System.ComponentModel.DataAnnotations----------------
  DNTimestampAttributeClass = interface(DDN.mscorlib.DNAttributeClass)
  ['{8A7E743C-227A-5211-91E3-76E1F968B68C}']
  { constructors } 

    ///<summary>
    ///  初始化 <see cref="T:System.ComponentModel.DataAnnotations.TimestampAttribute" />
    ///  类的新实例。
    ///</summary>
    {class} function init: DNTimestampAttribute;

  end;

  ///<summary>
  ///  列的数据类型指定为行版本。
  ///</summary>
  [DNTypeName('System.ComponentModel.DataAnnotations.TimestampAttribute')]
  DNTimestampAttribute = interface(DDN.mscorlib.DNAttribute)
  ['{51F4048A-A3EF-3F85-A795-EF2C00329DF4}']
  { getters & setters } 

    function get_TypeId: DDN.mscorlib.DNObject;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DDN.mscorlib.DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property TypeId: DDN.mscorlib.DNObject read get_TypeId;
  end;

  TDNTimestampAttribute = class(TDNGenericImport<DNTimestampAttributeClass, DNTimestampAttribute>) end;

  //-------------namespace: System.ComponentModel.DataAnnotations----------------
  DNUIHintAttributeClass = interface(DDN.mscorlib.DNAttributeClass)
  ['{048594A7-87D3-5C5B-9BAD-1AB300F00991}']
  { constructors } 

    ///<summary>
    ///  新实例初始化 <see cref="T:System.ComponentModel.DataAnnotations.UIHintAttribute" />
    ///  通过使用指定的用户控件的类。
    ///</summary>
    ///  <param name="uiHint">
    ///  要用于显示数据字段的用户控件。
    ///</param>
    {class} function init(uiHint: string): DNUIHintAttribute; overload;
    ///<summary>
    ///  新实例初始化 <see cref="T:System.ComponentModel.DataAnnotations.UIHintAttribute" />
    ///  类使用指定的用户控件和指定的表示层。
    ///</summary>
    ///  <param name="uiHint">
    ///  要使用可显示数据的字段的用户控件 （字段模板）。
    ///</param>
    ///  <param name="presentationLayer">
    ///  使用此类表示层。
    ///  可以设置为"HTML"、"Silverlight"、"WPF"或"WinForms"。
    ///</param>
    {class} function init(uiHint: string; presentationLayer: string): DNUIHintAttribute; overload;
    ///<summary>
    ///  新实例初始化 <see cref="T:System.ComponentModel.DataAnnotations.UIHintAttribute" />
    ///  类通过使用指定的用户控件、 表示层和控制参数。
    ///</summary>
    ///  <param name="uiHint">
    ///  要使用可显示数据的字段的用户控件 （字段模板）。
    ///</param>
    ///  <param name="presentationLayer">
    ///  使用此类表示层。
    ///  可以设置为"HTML"、"Silverlight"、"WPF"或"WinForms"。
    ///</param>
    ///  <param name="controlParameters">
    ///  要使用可从任何数据源检索值的对象。
    ///</param>
    ///<exception cref="T:System.ArgumentException"><see cref="P:System.ComponentModel.DataAnnotations.UIHintAttribute.ControlParameters" />
    ///  是 <see langword="null" />
    ///  或者它是一个约束键。
    ///  - 或 -
    ///  值 <see cref="P:System.ComponentModel.DataAnnotations.UIHintAttribute.ControlParameters" />
    ///  不是字符串。
    ///</exception>
    {class} function init(uiHint: string; presentationLayer: string; controlParameters: TArray<DDN.mscorlib.DNObject>): DNUIHintAttribute; overload;

  end;

  ///<summary>
  ///  指定动态数据使用来将数据字段显示的模板或用户控件。
  ///</summary>
  [DNTypeName('System.ComponentModel.DataAnnotations.UIHintAttribute')]
  DNUIHintAttribute = interface(DDN.mscorlib.DNAttribute)
  ['{5DF4FAFB-5CAF-3BC5-A497-9A6E30CB9FF9}']
  { getters & setters } 

    function get_UIHint: string;
    function get_PresentationLayer: string;
    function get_ControlParameters: DDN.mscorlib.DNIDictionary<string, DDN.mscorlib.DNObject>;
    function get_TypeId: DDN.mscorlib.DNObject;

  { methods } 

    ///<summary>
    ///  获取该属性的当前实例的哈希代码。
    ///</summary>
    ///<returns>
    ///  属性实例的哈希代码。
    ///</returns>
    function GetHashCode: Int32;
    ///<summary>
    ///  获取一个值，该值指示此实例是否等于指定的对象。
    ///</summary>
    ///  <param name="obj">
    ///  要与此实例进行比较的对象或 <see langword="null" />
    ///  引用。
    ///</param>
    ///<returns><see langword="true" />
    ///  如果指定的对象是否等于此实例;否则为 <see langword="false" />
    ///  。
    ///</returns>
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function Match(obj: DDN.mscorlib.DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  获取或设置要用于显示数据字段的字段模板的名称。
    ///</summary>
    ///<returns>
    ///  显示数据字段的字段模板的名称。
    ///</returns>
    property UIHint: string read get_UIHint;
    ///<summary>
    ///  获取或设置表示层使用 <see cref="T:System.ComponentModel.DataAnnotations.UIHintAttribute" />
    ///  类。
    ///</summary>
    ///<returns>
    ///  使用此类表示层。
    ///</returns>
    property PresentationLayer: string read get_PresentationLayer;
    ///<summary>
    ///  获取或设置 <see cref="T:System.Web.DynamicData.DynamicControlParameter" />
    ///  对象，用于从任何数据源中检索值。
    ///</summary>
    ///<returns>
    ///  键/值对的集合。
    ///</returns>
    property ControlParameters: DDN.mscorlib.DNIDictionary<string, DDN.mscorlib.DNObject> read get_ControlParameters;
    ///<summary>
    ///  获取该属性的唯一标识符。
    ///</summary>
    ///<returns>
    ///  属性的唯一标识符。
    ///</returns>
    property TypeId: DDN.mscorlib.DNObject read get_TypeId;
  end;

  TDNUIHintAttribute = class(TDNGenericImport<DNUIHintAttributeClass, DNUIHintAttribute>) end;

  //-------------namespace: System.ComponentModel.DataAnnotations----------------
  DNValidationAttributeClass = interface(DDN.mscorlib.DNAttributeClass)
  ['{9D55B972-D8FC-560F-B1CE-5790ACA24E5A}']
  end;

  ///<summary>
  ///  充当所有验证特性的基类。
  ///</summary>
  ///<exception cref="T:System.ComponentModel.DataAnnotations.ValidationException"><see cref="P:System.ComponentModel.DataAnnotations.ValidationAttribute.ErrorMessageResourceType" />
  ///  和<see cref="P:System.ComponentModel.DataAnnotations.ValidationAttribute.ErrorMessageResourceName" />
  ///  属性本地化的错误消息设置在同一时间非本地化<see cref="P:System.ComponentModel.DataAnnotations.ValidationAttribute.ErrorMessage" />
  ///  设置属性的错误消息。
  ///</exception>
  [DNTypeName('System.ComponentModel.DataAnnotations.ValidationAttribute')]
  DNValidationAttribute = interface(DDN.mscorlib.DNAttribute)
  ['{E2E5E586-99F5-3ECF-8153-F5FFE585F033}']
  { getters & setters } 

    function get_RequiresValidationContext: Boolean;
    function get_ErrorMessage: string;
    procedure set_ErrorMessage(value: string);
    function get_ErrorMessageResourceName: string;
    procedure set_ErrorMessageResourceName(value: string);
    function get_ErrorMessageResourceType: DDN.mscorlib.DNType;
    procedure set_ErrorMessageResourceType(value: DDN.mscorlib.DNType);
    function get_TypeId: DDN.mscorlib.DNObject;

  { methods } 

    ///<summary>
    ///  确定指定的值的对象是否有效。
    ///</summary>
    ///  <param name="value">
    ///  要验证的对象的值。
    ///</param>
    ///<returns><see langword="true" />
    ///  如果指定的值是否有效，则为否则为 <see langword="false" />
    ///  。
    ///</returns>
    function IsValid(value: DDN.mscorlib.DNObject): Boolean;
    ///<summary>
    ///  验证指定的对象。
    ///</summary>
    ///  <param name="value">
    ///  要验证的对象的值。
    ///</param>
    ///  <param name="name">
    ///  要包括错误消息中的名称。
    ///</param>
    ///<exception cref="T:System.ComponentModel.DataAnnotations.ValidationException"><paramref name="value" />
    ///  无效。
    ///</exception>
    procedure Validate(value: DDN.mscorlib.DNObject; name: string); overload;
    ///<summary>
    ///  验证指定的对象。
    ///</summary>
    ///  <param name="value">
    ///  要验证的对象。
    ///</param>
    ///  <param name="validationContext"><see cref="T:System.ComponentModel.DataAnnotations.ValidationContext" />
    ///  描述其中执行验证检查的上下文的对象。
    ///  此参数不能为<see langword="null" />
    ///  。
    ///</param>
    ///<exception cref="T:System.ComponentModel.DataAnnotations.ValidationException">
    ///  验证失败。
    ///</exception>
    procedure Validate(value: DDN.mscorlib.DNObject; validationContext: DNValidationContext); overload;
    ///<summary>
    ///  对应用格式设置错误消息，根据发生错误的数据字段。
    ///</summary>
    ///  <param name="name">
    ///  要在格式的消息中包含的名称。
    ///</param>
    ///<returns>
    ///  格式化的错误消息的实例。
    ///</returns>
    function FormatErrorMessage(name: string): string;
    ///<summary>
    ///  检查指定的值是否为有效相对于当前的验证特性。
    ///</summary>
    ///  <param name="value">
    ///  要验证的值。
    ///</param>
    ///  <param name="validationContext">
    ///  有关验证操作的上下文信息。
    ///</param>
    ///<returns><see cref="T:System.ComponentModel.DataAnnotations.ValidationResult" />
    ///  类的实例。
    ///</returns>
    function GetValidationResult(value: DDN.mscorlib.DNObject; validationContext: DNValidationContext): DNValidationResult;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DDN.mscorlib.DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  获取一个值，该值指示属性是否要求验证上下文。
    ///</summary>
    ///<returns><see langword="true" />
    ///  如果该属性需要验证上下文;否则为 <see langword="false" />
    ///  。
    ///</returns>
    property RequiresValidationContext: Boolean read get_RequiresValidationContext;
    ///<summary>
    ///  获取或设置与验证控件关联，如果验证失败的错误消息。
    ///</summary>
    ///<returns>
    ///  与验证控件相关联的错误消息。
    ///</returns>
    property ErrorMessage: string read get_ErrorMessage write set_ErrorMessage;
    ///<summary>
    ///  获取或设置要用于查找的错误消息资源名称 <see cref="P:System.ComponentModel.DataAnnotations.ValidationAttribute.ErrorMessageResourceType" />
    ///  属性值，如果验证失败。
    ///</summary>
    ///<returns>
    ///  与验证控件相关联的错误消息资源。
    ///</returns>
    property ErrorMessageResourceName: string read get_ErrorMessageResourceName write set_ErrorMessageResourceName;
    ///<summary>
    ///  获取或设置要用于查找错误消息，如果验证失败的资源类型。
    ///</summary>
    ///<returns>
    ///  与验证控件相关联的错误消息的类型。
    ///</returns>
    property ErrorMessageResourceType: DDN.mscorlib.DNType read get_ErrorMessageResourceType write set_ErrorMessageResourceType;
    property TypeId: DDN.mscorlib.DNObject read get_TypeId;
  end;

  TDNValidationAttribute = class(TDNGenericImport<DNValidationAttributeClass, DNValidationAttribute>) end;

  //-------------namespace: System.ComponentModel.DataAnnotations----------------
  DNCompareAttributeClass = interface(DNValidationAttributeClass)
  ['{42F9A176-36FF-565E-B665-4031305BD024}']
  { constructors } 

    ///<summary>
    ///  初始化 <see cref="T:System.ComponentModel.DataAnnotations.CompareAttribute" />
    ///  类的新实例。
    ///</summary>
    ///  <param name="otherProperty">
    ///  要与当前属性进行比较的属性。
    ///</param>
    {class} function init(otherProperty: string): DNCompareAttribute;

  end;

  ///<summary>
  ///  提供用于比较两个属性的特性。
  ///</summary>
  [DNTypeName('System.ComponentModel.DataAnnotations.CompareAttribute')]
  DNCompareAttribute = interface(DNValidationAttribute)
  ['{9570D576-9BB8-3947-B222-AC8AEF5E6F81}']
  { getters & setters } 

    function get_OtherProperty: string;
    function get_OtherPropertyDisplayName: string;
    function get_RequiresValidationContext: Boolean;
    function get_ErrorMessage: string;
    procedure set_ErrorMessage(value: string);
    function get_ErrorMessageResourceName: string;
    procedure set_ErrorMessageResourceName(value: string);
    function get_ErrorMessageResourceType: DDN.mscorlib.DNType;
    procedure set_ErrorMessageResourceType(value: DDN.mscorlib.DNType);
    function get_TypeId: DDN.mscorlib.DNObject;

  { methods } 

    ///<summary>
    ///  对应用格式设置错误消息，根据发生错误的数据字段。
    ///</summary>
    ///  <param name="name">
    ///  导致验证失败的字段的名称。
    ///</param>
    ///<returns>
    ///  格式化的错误消息。
    ///</returns>
    function FormatErrorMessage(name: string): string;
    ///<summary>
    ///  确定指定的值的对象是否有效。
    ///</summary>
    ///  <param name="value">
    ///  要验证的对象的值。
    ///</param>
    ///<returns><see langword="true" />
    ///  如果指定的值是否有效，则为否则为 <see langword="false" />
    ///  。
    ///</returns>
    function IsValid(value: DDN.mscorlib.DNObject): Boolean;
    ///<summary>
    ///  验证指定的对象。
    ///</summary>
    ///  <param name="value">
    ///  要验证的对象的值。
    ///</param>
    ///  <param name="name">
    ///  要包括错误消息中的名称。
    ///</param>
    ///<exception cref="T:System.ComponentModel.DataAnnotations.ValidationException"><paramref name="value" />
    ///  无效。
    ///</exception>
    procedure Validate(value: DDN.mscorlib.DNObject; name: string); overload;
    ///<summary>
    ///  验证指定的对象。
    ///</summary>
    ///  <param name="value">
    ///  要验证的对象。
    ///</param>
    ///  <param name="validationContext"><see cref="T:System.ComponentModel.DataAnnotations.ValidationContext" />
    ///  描述其中执行验证检查的上下文的对象。
    ///  此参数不能为<see langword="null" />
    ///  。
    ///</param>
    ///<exception cref="T:System.ComponentModel.DataAnnotations.ValidationException">
    ///  验证失败。
    ///</exception>
    procedure Validate(value: DDN.mscorlib.DNObject; validationContext: DNValidationContext); overload;
    ///<summary>
    ///  检查指定的值是否为有效相对于当前的验证特性。
    ///</summary>
    ///  <param name="value">
    ///  要验证的值。
    ///</param>
    ///  <param name="validationContext">
    ///  有关验证操作的上下文信息。
    ///</param>
    ///<returns><see cref="T:System.ComponentModel.DataAnnotations.ValidationResult" />
    ///  类的实例。
    ///</returns>
    function GetValidationResult(value: DDN.mscorlib.DNObject; validationContext: DNValidationContext): DNValidationResult;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DDN.mscorlib.DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  获取要与当前属性进行比较的属性。
    ///</summary>
    ///<returns>
    ///  另一个属性。
    ///</returns>
    property OtherProperty: string read get_OtherProperty;
    ///<summary>
    ///  获取另一个属性的显示名称。
    ///</summary>
    ///<returns>
    ///  另一个属性显示名称。
    ///</returns>
    property OtherPropertyDisplayName: string read get_OtherPropertyDisplayName;
    ///<summary>
    ///  获取一个值，该值指示属性是否要求验证上下文。
    ///</summary>
    ///<returns><see langword="true" />
    ///  如果该属性需要验证上下文;否则为 <see langword="false" />
    ///  。
    ///</returns>
    property RequiresValidationContext: Boolean read get_RequiresValidationContext;
    ///<summary>
    ///  获取或设置与验证控件关联，如果验证失败的错误消息。
    ///</summary>
    ///<returns>
    ///  与验证控件相关联的错误消息。
    ///</returns>
    property ErrorMessage: string read get_ErrorMessage write set_ErrorMessage;
    ///<summary>
    ///  获取或设置要用于查找的错误消息资源名称 <see cref="P:System.ComponentModel.DataAnnotations.ValidationAttribute.ErrorMessageResourceType" />
    ///  属性值，如果验证失败。
    ///</summary>
    ///<returns>
    ///  与验证控件相关联的错误消息资源。
    ///</returns>
    property ErrorMessageResourceName: string read get_ErrorMessageResourceName write set_ErrorMessageResourceName;
    ///<summary>
    ///  获取或设置要用于查找错误消息，如果验证失败的资源类型。
    ///</summary>
    ///<returns>
    ///  与验证控件相关联的错误消息的类型。
    ///</returns>
    property ErrorMessageResourceType: DDN.mscorlib.DNType read get_ErrorMessageResourceType write set_ErrorMessageResourceType;
    property TypeId: DDN.mscorlib.DNObject read get_TypeId;
  end;

  TDNCompareAttribute = class(TDNGenericImport<DNCompareAttributeClass, DNCompareAttribute>) end;

  //-------------namespace: System.ComponentModel.DataAnnotations----------------
  DNCustomValidationAttributeClass = interface(DNValidationAttributeClass)
  ['{E84D59D9-9414-554F-83D6-9332F6E909F2}']
  { constructors } 

    ///<summary>
    ///  初始化 <see cref="T:System.ComponentModel.DataAnnotations.CustomValidationAttribute" />
    ///  类的新实例。
    ///</summary>
    ///  <param name="validatorType">
    ///  包含执行自定义验证的方法的类型。
    ///</param>
    ///  <param name="method">
    ///  执行自定义验证的方法。
    ///</param>
    {class} function init(validatorType: DDN.mscorlib.DNType; method: string): DNCustomValidationAttribute;

  end;

  ///<summary>
  ///  指定用于验证属性或类实例的自定义验证方法。
  ///</summary>
  [DNTypeName('System.ComponentModel.DataAnnotations.CustomValidationAttribute')]
  DNCustomValidationAttribute = interface(DNValidationAttribute)
  ['{B6A55D1F-9BE1-38DA-9FFD-DB51E3AB535D}']
  { getters & setters } 

    function get_ValidatorType: DDN.mscorlib.DNType;
    function get_Method: string;
    function get_TypeId: DDN.mscorlib.DNObject;
    function get_RequiresValidationContext: Boolean;
    function get_ErrorMessage: string;
    procedure set_ErrorMessage(value: string);
    function get_ErrorMessageResourceName: string;
    procedure set_ErrorMessageResourceName(value: string);
    function get_ErrorMessageResourceType: DDN.mscorlib.DNType;
    procedure set_ErrorMessageResourceType(value: DDN.mscorlib.DNType);

  { methods } 

    ///<summary>
    ///  设置验证错误消息的格式。
    ///</summary>
    ///  <param name="name">
    ///  要在格式的消息中包含的名称。
    ///</param>
    ///<returns>
    ///  格式化的错误消息的实例。
    ///</returns>
    function FormatErrorMessage(name: string): string;
    ///<summary>
    ///  确定指定的值的对象是否有效。
    ///</summary>
    ///  <param name="value">
    ///  要验证的对象的值。
    ///</param>
    ///<returns><see langword="true" />
    ///  如果指定的值是否有效，则为否则为 <see langword="false" />
    ///  。
    ///</returns>
    function IsValid(value: DDN.mscorlib.DNObject): Boolean;
    ///<summary>
    ///  验证指定的对象。
    ///</summary>
    ///  <param name="value">
    ///  要验证的对象的值。
    ///</param>
    ///  <param name="name">
    ///  要包括错误消息中的名称。
    ///</param>
    ///<exception cref="T:System.ComponentModel.DataAnnotations.ValidationException"><paramref name="value" />
    ///  无效。
    ///</exception>
    procedure Validate(value: DDN.mscorlib.DNObject; name: string); overload;
    ///<summary>
    ///  验证指定的对象。
    ///</summary>
    ///  <param name="value">
    ///  要验证的对象。
    ///</param>
    ///  <param name="validationContext"><see cref="T:System.ComponentModel.DataAnnotations.ValidationContext" />
    ///  描述其中执行验证检查的上下文的对象。
    ///  此参数不能为<see langword="null" />
    ///  。
    ///</param>
    ///<exception cref="T:System.ComponentModel.DataAnnotations.ValidationException">
    ///  验证失败。
    ///</exception>
    procedure Validate(value: DDN.mscorlib.DNObject; validationContext: DNValidationContext); overload;
    ///<summary>
    ///  检查指定的值是否为有效相对于当前的验证特性。
    ///</summary>
    ///  <param name="value">
    ///  要验证的值。
    ///</param>
    ///  <param name="validationContext">
    ///  有关验证操作的上下文信息。
    ///</param>
    ///<returns><see cref="T:System.ComponentModel.DataAnnotations.ValidationResult" />
    ///  类的实例。
    ///</returns>
    function GetValidationResult(value: DDN.mscorlib.DNObject; validationContext: DNValidationContext): DNValidationResult;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DDN.mscorlib.DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  获取执行自定义验证的类型。
    ///</summary>
    ///<returns>
    ///  执行自定义验证类型。
    ///</returns>
    property ValidatorType: DDN.mscorlib.DNType read get_ValidatorType;
    ///<summary>
    ///  获取验证方法。
    ///</summary>
    ///<returns>
    ///  验证方法的名称。
    ///</returns>
    property Method: string read get_Method;
    ///<summary>
    ///  获取此特性的唯一标识符。
    ///</summary>
    ///<returns>
    ///  标识此属性的对象。
    ///</returns>
    property TypeId: DDN.mscorlib.DNObject read get_TypeId;
    ///<summary>
    ///  获取一个值，该值指示属性是否要求验证上下文。
    ///</summary>
    ///<returns><see langword="true" />
    ///  如果该属性需要验证上下文;否则为 <see langword="false" />
    ///  。
    ///</returns>
    property RequiresValidationContext: Boolean read get_RequiresValidationContext;
    ///<summary>
    ///  获取或设置与验证控件关联，如果验证失败的错误消息。
    ///</summary>
    ///<returns>
    ///  与验证控件相关联的错误消息。
    ///</returns>
    property ErrorMessage: string read get_ErrorMessage write set_ErrorMessage;
    ///<summary>
    ///  获取或设置要用于查找的错误消息资源名称 <see cref="P:System.ComponentModel.DataAnnotations.ValidationAttribute.ErrorMessageResourceType" />
    ///  属性值，如果验证失败。
    ///</summary>
    ///<returns>
    ///  与验证控件相关联的错误消息资源。
    ///</returns>
    property ErrorMessageResourceName: string read get_ErrorMessageResourceName write set_ErrorMessageResourceName;
    ///<summary>
    ///  获取或设置要用于查找错误消息，如果验证失败的资源类型。
    ///</summary>
    ///<returns>
    ///  与验证控件相关联的错误消息的类型。
    ///</returns>
    property ErrorMessageResourceType: DDN.mscorlib.DNType read get_ErrorMessageResourceType write set_ErrorMessageResourceType;
  end;

  TDNCustomValidationAttribute = class(TDNGenericImport<DNCustomValidationAttributeClass, DNCustomValidationAttribute>) end;

  //-------------namespace: System.ComponentModel.DataAnnotations----------------
  DNDataTypeAttributeClass = interface(DNValidationAttributeClass)
  ['{887AB953-773F-53F4-9C48-A90A4BC6DCB3}']
  { constructors } 

    ///<summary>
    ///  使用指定的类型名初始化 <see cref="T:System.ComponentModel.DataAnnotations.DataTypeAttribute" />
    ///  类的新实例。
    ///</summary>
    ///  <param name="dataType">
    ///  要与数据字段关联的类型名称。
    ///</param>
    {class} function init(dataType: DNDataType): DNDataTypeAttribute; overload;
    ///<summary>
    ///  使用指定的字段模版名初始化 <see cref="T:System.ComponentModel.DataAnnotations.DataTypeAttribute" />
    ///  类的新实例。
    ///</summary>
    ///  <param name="customDataType">
    ///  要与数据字段关联的自定义字段模版名称。
    ///</param>
    ///<exception cref="T:System.ArgumentException"><paramref name="customDataType" />
    ///  为 <see langword="null" />
    ///  或空字符串 ("")。
    ///</exception>
    {class} function init(customDataType: string): DNDataTypeAttribute; overload;

  end;

  ///<summary>
  ///  指定要与数据字段关联的其他类型的名称。
  ///</summary>
  [DNTypeName('System.ComponentModel.DataAnnotations.DataTypeAttribute')]
  DNDataTypeAttribute = interface(DNValidationAttribute)
  ['{FDC452CE-F502-319D-A282-D680B2D5D49A}']
  { getters & setters } 

    function get_DataType: DNDataType;
    function get_CustomDataType: string;
    function get_DisplayFormat: DNDisplayFormatAttribute;
    function get_RequiresValidationContext: Boolean;
    function get_ErrorMessage: string;
    procedure set_ErrorMessage(value: string);
    function get_ErrorMessageResourceName: string;
    procedure set_ErrorMessageResourceName(value: string);
    function get_ErrorMessageResourceType: DDN.mscorlib.DNType;
    procedure set_ErrorMessageResourceType(value: DDN.mscorlib.DNType);
    function get_TypeId: DDN.mscorlib.DNObject;

  { methods } 

    ///<summary>
    ///  返回与数据字段关联的类型的名称。
    ///</summary>
    ///<returns>
    ///  与数据字段相关联的类型名称。
    ///</returns>
    function GetDataTypeName: string;
    ///<summary>
    ///  检查数据字段的值有效。
    ///</summary>
    ///  <param name="value">
    ///  要验证的数据字段值。
    ///</param>
    ///<returns><see langword="true" />
    ///  始终。
    ///</returns>
    function IsValid(value: DDN.mscorlib.DNObject): Boolean;
    ///<summary>
    ///  验证指定的对象。
    ///</summary>
    ///  <param name="value">
    ///  要验证的对象的值。
    ///</param>
    ///  <param name="name">
    ///  要包括错误消息中的名称。
    ///</param>
    ///<exception cref="T:System.ComponentModel.DataAnnotations.ValidationException"><paramref name="value" />
    ///  无效。
    ///</exception>
    procedure Validate(value: DDN.mscorlib.DNObject; name: string); overload;
    ///<summary>
    ///  验证指定的对象。
    ///</summary>
    ///  <param name="value">
    ///  要验证的对象。
    ///</param>
    ///  <param name="validationContext"><see cref="T:System.ComponentModel.DataAnnotations.ValidationContext" />
    ///  描述其中执行验证检查的上下文的对象。
    ///  此参数不能为<see langword="null" />
    ///  。
    ///</param>
    ///<exception cref="T:System.ComponentModel.DataAnnotations.ValidationException">
    ///  验证失败。
    ///</exception>
    procedure Validate(value: DDN.mscorlib.DNObject; validationContext: DNValidationContext); overload;
    ///<summary>
    ///  对应用格式设置错误消息，根据发生错误的数据字段。
    ///</summary>
    ///  <param name="name">
    ///  要在格式的消息中包含的名称。
    ///</param>
    ///<returns>
    ///  格式化的错误消息的实例。
    ///</returns>
    function FormatErrorMessage(name: string): string;
    ///<summary>
    ///  检查指定的值是否为有效相对于当前的验证特性。
    ///</summary>
    ///  <param name="value">
    ///  要验证的值。
    ///</param>
    ///  <param name="validationContext">
    ///  有关验证操作的上下文信息。
    ///</param>
    ///<returns><see cref="T:System.ComponentModel.DataAnnotations.ValidationResult" />
    ///  类的实例。
    ///</returns>
    function GetValidationResult(value: DDN.mscorlib.DNObject; validationContext: DNValidationContext): DNValidationResult;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DDN.mscorlib.DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  获取与数据字段关联的类型。
    ///</summary>
    ///<returns><see cref="T:System.ComponentModel.DataAnnotations.DataType" />
    ///  值之一。
    ///</returns>
    property DataType: DNDataType read get_DataType;
    ///<summary>
    ///  获取与数据字段关联的自定义字段模板的名称。
    ///</summary>
    ///<returns>
    ///  与数据字段关联的自定义字段模板的名称。
    ///</returns>
    property CustomDataType: string read get_CustomDataType;
    ///<summary>
    ///  获取数据字段的显示格式。
    ///</summary>
    ///<returns>
    ///  数据字段的显示格式。
    ///</returns>
    property DisplayFormat: DNDisplayFormatAttribute read get_DisplayFormat;
    ///<summary>
    ///  获取一个值，该值指示属性是否要求验证上下文。
    ///</summary>
    ///<returns><see langword="true" />
    ///  如果该属性需要验证上下文;否则为 <see langword="false" />
    ///  。
    ///</returns>
    property RequiresValidationContext: Boolean read get_RequiresValidationContext;
    ///<summary>
    ///  获取或设置与验证控件关联，如果验证失败的错误消息。
    ///</summary>
    ///<returns>
    ///  与验证控件相关联的错误消息。
    ///</returns>
    property ErrorMessage: string read get_ErrorMessage write set_ErrorMessage;
    ///<summary>
    ///  获取或设置要用于查找的错误消息资源名称 <see cref="P:System.ComponentModel.DataAnnotations.ValidationAttribute.ErrorMessageResourceType" />
    ///  属性值，如果验证失败。
    ///</summary>
    ///<returns>
    ///  与验证控件相关联的错误消息资源。
    ///</returns>
    property ErrorMessageResourceName: string read get_ErrorMessageResourceName write set_ErrorMessageResourceName;
    ///<summary>
    ///  获取或设置要用于查找错误消息，如果验证失败的资源类型。
    ///</summary>
    ///<returns>
    ///  与验证控件相关联的错误消息的类型。
    ///</returns>
    property ErrorMessageResourceType: DDN.mscorlib.DNType read get_ErrorMessageResourceType write set_ErrorMessageResourceType;
    property TypeId: DDN.mscorlib.DNObject read get_TypeId;
  end;

  TDNDataTypeAttribute = class(TDNGenericImport<DNDataTypeAttributeClass, DNDataTypeAttribute>) end;

  //-------------namespace: System.ComponentModel.DataAnnotations----------------
  DNCreditCardAttributeClass = interface(DNDataTypeAttributeClass)
  ['{5D11C2A4-B483-5727-963B-657B2E92B819}']
  { constructors } 

    ///<summary>
    ///  初始化 <see cref="T:System.ComponentModel.DataAnnotations.CreditCardAttribute" />
    ///  类的新实例。
    ///</summary>
    {class} function init: DNCreditCardAttribute;

  end;

  ///<summary>
  ///  指定数据字段值是信用卡号。
  ///</summary>
  [DNTypeName('System.ComponentModel.DataAnnotations.CreditCardAttribute')]
  DNCreditCardAttribute = interface(DNDataTypeAttribute)
  ['{33F3D09D-0F30-3E32-AA8C-1B2E9AAE7DC0}']
  { getters & setters } 

    function get_DataType: DNDataType;
    function get_CustomDataType: string;
    function get_DisplayFormat: DNDisplayFormatAttribute;
    function get_RequiresValidationContext: Boolean;
    function get_ErrorMessage: string;
    procedure set_ErrorMessage(value: string);
    function get_ErrorMessageResourceName: string;
    procedure set_ErrorMessageResourceName(value: string);
    function get_ErrorMessageResourceType: DDN.mscorlib.DNType;
    procedure set_ErrorMessageResourceType(value: DDN.mscorlib.DNType);
    function get_TypeId: DDN.mscorlib.DNObject;

  { methods } 

    ///<summary>
    ///  确定指定的信用卡卡号都有效。
    ///</summary>
    ///  <param name="value">
    ///  要验证的值。
    ///</param>
    ///<returns><see langword="true" />
    ///  信用卡卡号是否有效，则为否则为 <see langword="false" />
    ///  。
    ///</returns>
    function IsValid(value: DDN.mscorlib.DNObject): Boolean;
    ///<summary>
    ///  返回与数据字段关联的类型的名称。
    ///</summary>
    ///<returns>
    ///  与数据字段相关联的类型名称。
    ///</returns>
    function GetDataTypeName: string;
    procedure Validate(value: DDN.mscorlib.DNObject; name: string); overload;
    procedure Validate(value: DDN.mscorlib.DNObject; validationContext: DNValidationContext); overload;
    function FormatErrorMessage(name: string): string;
    function GetValidationResult(value: DDN.mscorlib.DNObject; validationContext: DNValidationContext): DNValidationResult;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DDN.mscorlib.DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  获取与数据字段关联的类型。
    ///</summary>
    ///<returns><see cref="T:System.ComponentModel.DataAnnotations.DataType" />
    ///  值之一。
    ///</returns>
    property DataType: DNDataType read get_DataType;
    ///<summary>
    ///  获取与数据字段关联的自定义字段模板的名称。
    ///</summary>
    ///<returns>
    ///  与数据字段关联的自定义字段模板的名称。
    ///</returns>
    property CustomDataType: string read get_CustomDataType;
    ///<summary>
    ///  获取数据字段的显示格式。
    ///</summary>
    ///<returns>
    ///  数据字段的显示格式。
    ///</returns>
    property DisplayFormat: DNDisplayFormatAttribute read get_DisplayFormat;
    property RequiresValidationContext: Boolean read get_RequiresValidationContext;
    property ErrorMessage: string read get_ErrorMessage write set_ErrorMessage;
    property ErrorMessageResourceName: string read get_ErrorMessageResourceName write set_ErrorMessageResourceName;
    property ErrorMessageResourceType: DDN.mscorlib.DNType read get_ErrorMessageResourceType write set_ErrorMessageResourceType;
    property TypeId: DDN.mscorlib.DNObject read get_TypeId;
  end;

  TDNCreditCardAttribute = class(TDNGenericImport<DNCreditCardAttributeClass, DNCreditCardAttribute>) end;

  //-------------namespace: System.ComponentModel.DataAnnotations----------------
  DNEmailAddressAttributeClass = interface(DNDataTypeAttributeClass)
  ['{ED4740B9-4FE6-5DA5-92F7-D9DF1BEFCB8F}']
  { constructors } 

    ///<summary>
    ///  初始化 <see cref="T:System.ComponentModel.DataAnnotations.EmailAddressAttribute" />
    ///  类的新实例。
    ///</summary>
    {class} function init: DNEmailAddressAttribute;

  end;

  ///<summary>
  ///  验证电子邮件地址。
  ///</summary>
  [DNTypeName('System.ComponentModel.DataAnnotations.EmailAddressAttribute')]
  DNEmailAddressAttribute = interface(DNDataTypeAttribute)
  ['{F90A629B-38D9-38A1-B8B6-C359973CAA7D}']
  { getters & setters } 

    function get_DataType: DNDataType;
    function get_CustomDataType: string;
    function get_DisplayFormat: DNDisplayFormatAttribute;
    function get_RequiresValidationContext: Boolean;
    function get_ErrorMessage: string;
    procedure set_ErrorMessage(value: string);
    function get_ErrorMessageResourceName: string;
    procedure set_ErrorMessageResourceName(value: string);
    function get_ErrorMessageResourceType: DDN.mscorlib.DNType;
    procedure set_ErrorMessageResourceType(value: DDN.mscorlib.DNType);
    function get_TypeId: DDN.mscorlib.DNObject;

  { methods } 

    ///<summary>
    ///  确定指定的值是否与有效的电子邮件地址的模式相匹配。
    ///</summary>
    ///  <param name="value">
    ///  要验证的值。
    ///</param>
    ///<returns><see langword="true" />
    ///  如果指定的值是否有效或 <see langword="null" />
    ///  ; 否则为 <see langword="false" />
    ///  。
    ///</returns>
    function IsValid(value: DDN.mscorlib.DNObject): Boolean;
    ///<summary>
    ///  返回与数据字段关联的类型的名称。
    ///</summary>
    ///<returns>
    ///  与数据字段相关联的类型名称。
    ///</returns>
    function GetDataTypeName: string;
    procedure Validate(value: DDN.mscorlib.DNObject; name: string); overload;
    procedure Validate(value: DDN.mscorlib.DNObject; validationContext: DNValidationContext); overload;
    function FormatErrorMessage(name: string): string;
    function GetValidationResult(value: DDN.mscorlib.DNObject; validationContext: DNValidationContext): DNValidationResult;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DDN.mscorlib.DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  获取与数据字段关联的类型。
    ///</summary>
    ///<returns><see cref="T:System.ComponentModel.DataAnnotations.DataType" />
    ///  值之一。
    ///</returns>
    property DataType: DNDataType read get_DataType;
    ///<summary>
    ///  获取与数据字段关联的自定义字段模板的名称。
    ///</summary>
    ///<returns>
    ///  与数据字段关联的自定义字段模板的名称。
    ///</returns>
    property CustomDataType: string read get_CustomDataType;
    ///<summary>
    ///  获取数据字段的显示格式。
    ///</summary>
    ///<returns>
    ///  数据字段的显示格式。
    ///</returns>
    property DisplayFormat: DNDisplayFormatAttribute read get_DisplayFormat;
    property RequiresValidationContext: Boolean read get_RequiresValidationContext;
    property ErrorMessage: string read get_ErrorMessage write set_ErrorMessage;
    property ErrorMessageResourceName: string read get_ErrorMessageResourceName write set_ErrorMessageResourceName;
    property ErrorMessageResourceType: DDN.mscorlib.DNType read get_ErrorMessageResourceType write set_ErrorMessageResourceType;
    property TypeId: DDN.mscorlib.DNObject read get_TypeId;
  end;

  TDNEmailAddressAttribute = class(TDNGenericImport<DNEmailAddressAttributeClass, DNEmailAddressAttribute>) end;

  //-------------namespace: System.ComponentModel.DataAnnotations----------------
  DNEnumDataTypeAttributeClass = interface(DNDataTypeAttributeClass)
  ['{F039B12B-65A3-57E1-A0DD-CDCF0A5C8660}']
  { constructors } 

    ///<summary>
    ///  初始化 <see cref="T:System.ComponentModel.DataAnnotations.EnumDataTypeAttribute" />
    ///  类的新实例。
    ///</summary>
    ///  <param name="enumType">
    ///  枚举类型。
    ///</param>
    {class} function init(enumType: DDN.mscorlib.DNType): DNEnumDataTypeAttribute;

  end;

  ///<summary>
  ///  启用 .NET Framework 枚举，以映射到数据列。
  ///</summary>
  [DNTypeName('System.ComponentModel.DataAnnotations.EnumDataTypeAttribute')]
  DNEnumDataTypeAttribute = interface(DNDataTypeAttribute)
  ['{33F31804-C167-3C8C-93A4-B576038D39E5}']
  { getters & setters } 

    function get_EnumType: DDN.mscorlib.DNType;
    function get_DataType: DNDataType;
    function get_CustomDataType: string;
    function get_DisplayFormat: DNDisplayFormatAttribute;
    function get_RequiresValidationContext: Boolean;
    function get_ErrorMessage: string;
    procedure set_ErrorMessage(value: string);
    function get_ErrorMessageResourceName: string;
    procedure set_ErrorMessageResourceName(value: string);
    function get_ErrorMessageResourceType: DDN.mscorlib.DNType;
    procedure set_ErrorMessageResourceType(value: DDN.mscorlib.DNType);
    function get_TypeId: DDN.mscorlib.DNObject;

  { methods } 

    ///<summary>
    ///  检查数据字段的值有效。
    ///</summary>
    ///  <param name="value">
    ///  要验证的数据字段值。
    ///</param>
    ///<returns><see langword="true" />
    ///  如果数据字段值是否有效，则为否则为 <see langword="false" />
    ///  。
    ///</returns>
    function IsValid(value: DDN.mscorlib.DNObject): Boolean;
    ///<summary>
    ///  返回与数据字段关联的类型的名称。
    ///</summary>
    ///<returns>
    ///  与数据字段相关联的类型名称。
    ///</returns>
    function GetDataTypeName: string;
    procedure Validate(value: DDN.mscorlib.DNObject; name: string); overload;
    procedure Validate(value: DDN.mscorlib.DNObject; validationContext: DNValidationContext); overload;
    function FormatErrorMessage(name: string): string;
    function GetValidationResult(value: DDN.mscorlib.DNObject; validationContext: DNValidationContext): DNValidationResult;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DDN.mscorlib.DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  获取或设置枚举类型。
    ///</summary>
    ///<returns>
    ///  枚举类型中。
    ///</returns>
    property EnumType: DDN.mscorlib.DNType read get_EnumType;
    ///<summary>
    ///  获取与数据字段关联的类型。
    ///</summary>
    ///<returns><see cref="T:System.ComponentModel.DataAnnotations.DataType" />
    ///  值之一。
    ///</returns>
    property DataType: DNDataType read get_DataType;
    ///<summary>
    ///  获取与数据字段关联的自定义字段模板的名称。
    ///</summary>
    ///<returns>
    ///  与数据字段关联的自定义字段模板的名称。
    ///</returns>
    property CustomDataType: string read get_CustomDataType;
    ///<summary>
    ///  获取数据字段的显示格式。
    ///</summary>
    ///<returns>
    ///  数据字段的显示格式。
    ///</returns>
    property DisplayFormat: DNDisplayFormatAttribute read get_DisplayFormat;
    property RequiresValidationContext: Boolean read get_RequiresValidationContext;
    property ErrorMessage: string read get_ErrorMessage write set_ErrorMessage;
    property ErrorMessageResourceName: string read get_ErrorMessageResourceName write set_ErrorMessageResourceName;
    property ErrorMessageResourceType: DDN.mscorlib.DNType read get_ErrorMessageResourceType write set_ErrorMessageResourceType;
    property TypeId: DDN.mscorlib.DNObject read get_TypeId;
  end;

  TDNEnumDataTypeAttribute = class(TDNGenericImport<DNEnumDataTypeAttributeClass, DNEnumDataTypeAttribute>) end;

  //-------------namespace: System.ComponentModel.DataAnnotations----------------
  DNFileExtensionsAttributeClass = interface(DNDataTypeAttributeClass)
  ['{EAE7D7D8-A36C-566A-A16F-5DF5C38CF7D8}']
  { constructors } 

    ///<summary>
    ///  初始化 <see cref="T:System.ComponentModel.DataAnnotations.FileExtensionsAttribute" />
    ///  类的新实例。
    ///</summary>
    {class} function init: DNFileExtensionsAttribute;

  end;

  ///<summary>
  ///  验证文件扩展名。
  ///</summary>
  [DNTypeName('System.ComponentModel.DataAnnotations.FileExtensionsAttribute')]
  DNFileExtensionsAttribute = interface(DNDataTypeAttribute)
  ['{5B5A45C3-0956-3979-95F0-9C371C4B35D1}']
  { getters & setters } 

    function get_Extensions: string;
    procedure set_Extensions(value: string);
    function get_DataType: DNDataType;
    function get_CustomDataType: string;
    function get_DisplayFormat: DNDisplayFormatAttribute;
    function get_RequiresValidationContext: Boolean;
    function get_ErrorMessage: string;
    procedure set_ErrorMessage(value: string);
    function get_ErrorMessageResourceName: string;
    procedure set_ErrorMessageResourceName(value: string);
    function get_ErrorMessageResourceType: DDN.mscorlib.DNType;
    procedure set_ErrorMessageResourceType(value: DDN.mscorlib.DNType);
    function get_TypeId: DDN.mscorlib.DNObject;

  { methods } 

    ///<summary>
    ///  检查指定的文件名称或多个扩展名有效。
    ///</summary>
    ///  <param name="value">
    ///  以逗号分隔的有效文件扩展名的列表。
    ///</param>
    ///<returns><see langword="true" />
    ///  如果文件扩展名为有效，则为否则为 <see langword="false" />
    ///  。
    ///</returns>
    function IsValid(value: DDN.mscorlib.DNObject): Boolean;
    ///<summary>
    ///  对应用格式设置错误消息，根据发生错误的数据字段。
    ///</summary>
    ///  <param name="name">
    ///  导致验证失败的字段的名称。
    ///</param>
    ///<returns>
    ///  格式化的错误消息。
    ///</returns>
    function FormatErrorMessage(name: string): string;
    ///<summary>
    ///  返回与数据字段关联的类型的名称。
    ///</summary>
    ///<returns>
    ///  与数据字段相关联的类型名称。
    ///</returns>
    function GetDataTypeName: string;
    procedure Validate(value: DDN.mscorlib.DNObject; name: string); overload;
    procedure Validate(value: DDN.mscorlib.DNObject; validationContext: DNValidationContext); overload;
    function GetValidationResult(value: DDN.mscorlib.DNObject; validationContext: DNValidationContext): DNValidationResult;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DDN.mscorlib.DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  获取或设置的文件扩展名。
    ///</summary>
    ///<returns>
    ///  文件的名称的扩展或默认的文件扩展名 （".png"、".jpg"、".jpeg"和".gif"） 如果未设置该属性。
    ///</returns>
    property Extensions: string read get_Extensions write set_Extensions;
    ///<summary>
    ///  获取与数据字段关联的类型。
    ///</summary>
    ///<returns><see cref="T:System.ComponentModel.DataAnnotations.DataType" />
    ///  值之一。
    ///</returns>
    property DataType: DNDataType read get_DataType;
    ///<summary>
    ///  获取与数据字段关联的自定义字段模板的名称。
    ///</summary>
    ///<returns>
    ///  与数据字段关联的自定义字段模板的名称。
    ///</returns>
    property CustomDataType: string read get_CustomDataType;
    ///<summary>
    ///  获取数据字段的显示格式。
    ///</summary>
    ///<returns>
    ///  数据字段的显示格式。
    ///</returns>
    property DisplayFormat: DNDisplayFormatAttribute read get_DisplayFormat;
    property RequiresValidationContext: Boolean read get_RequiresValidationContext;
    property ErrorMessage: string read get_ErrorMessage write set_ErrorMessage;
    property ErrorMessageResourceName: string read get_ErrorMessageResourceName write set_ErrorMessageResourceName;
    property ErrorMessageResourceType: DDN.mscorlib.DNType read get_ErrorMessageResourceType write set_ErrorMessageResourceType;
    property TypeId: DDN.mscorlib.DNObject read get_TypeId;
  end;

  TDNFileExtensionsAttribute = class(TDNGenericImport<DNFileExtensionsAttributeClass, DNFileExtensionsAttribute>) end;

  //-------------namespace: System.ComponentModel.DataAnnotations----------------
  DNPhoneAttributeClass = interface(DNDataTypeAttributeClass)
  ['{EF34558C-16D2-5810-A555-AF41DA1DEA1B}']
  { constructors } 

    ///<summary>
    ///  初始化 <see cref="T:System.ComponentModel.DataAnnotations.PhoneAttribute" />
    ///  类的新实例。
    ///</summary>
    {class} function init: DNPhoneAttribute;

  end;

  ///<summary>
  ///  指定数据字段值是格式正确的电话号码，使用的是电话号码的正则表达式。
  ///</summary>
  [DNTypeName('System.ComponentModel.DataAnnotations.PhoneAttribute')]
  DNPhoneAttribute = interface(DNDataTypeAttribute)
  ['{2D62C454-9C1F-3D8D-9119-8F7DEF1B0961}']
  { getters & setters } 

    function get_DataType: DNDataType;
    function get_CustomDataType: string;
    function get_DisplayFormat: DNDisplayFormatAttribute;
    function get_RequiresValidationContext: Boolean;
    function get_ErrorMessage: string;
    procedure set_ErrorMessage(value: string);
    function get_ErrorMessageResourceName: string;
    procedure set_ErrorMessageResourceName(value: string);
    function get_ErrorMessageResourceType: DDN.mscorlib.DNType;
    procedure set_ErrorMessageResourceType(value: DDN.mscorlib.DNType);
    function get_TypeId: DDN.mscorlib.DNObject;

  { methods } 

    ///<summary>
    ///  确定指定的电话号码是否有效的电话号码的格式。
    ///</summary>
    ///  <param name="value">
    ///  要验证的值。
    ///</param>
    ///<returns><see langword="true" />
    ///  如果电话号码是有效，则为否则为 <see langword="false" />
    ///  。
    ///</returns>
    function IsValid(value: DDN.mscorlib.DNObject): Boolean;
    ///<summary>
    ///  返回与数据字段关联的类型的名称。
    ///</summary>
    ///<returns>
    ///  与数据字段相关联的类型名称。
    ///</returns>
    function GetDataTypeName: string;
    procedure Validate(value: DDN.mscorlib.DNObject; name: string); overload;
    procedure Validate(value: DDN.mscorlib.DNObject; validationContext: DNValidationContext); overload;
    function FormatErrorMessage(name: string): string;
    function GetValidationResult(value: DDN.mscorlib.DNObject; validationContext: DNValidationContext): DNValidationResult;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DDN.mscorlib.DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  获取与数据字段关联的类型。
    ///</summary>
    ///<returns><see cref="T:System.ComponentModel.DataAnnotations.DataType" />
    ///  值之一。
    ///</returns>
    property DataType: DNDataType read get_DataType;
    ///<summary>
    ///  获取与数据字段关联的自定义字段模板的名称。
    ///</summary>
    ///<returns>
    ///  与数据字段关联的自定义字段模板的名称。
    ///</returns>
    property CustomDataType: string read get_CustomDataType;
    ///<summary>
    ///  获取数据字段的显示格式。
    ///</summary>
    ///<returns>
    ///  数据字段的显示格式。
    ///</returns>
    property DisplayFormat: DNDisplayFormatAttribute read get_DisplayFormat;
    property RequiresValidationContext: Boolean read get_RequiresValidationContext;
    property ErrorMessage: string read get_ErrorMessage write set_ErrorMessage;
    property ErrorMessageResourceName: string read get_ErrorMessageResourceName write set_ErrorMessageResourceName;
    property ErrorMessageResourceType: DDN.mscorlib.DNType read get_ErrorMessageResourceType write set_ErrorMessageResourceType;
    property TypeId: DDN.mscorlib.DNObject read get_TypeId;
  end;

  TDNPhoneAttribute = class(TDNGenericImport<DNPhoneAttributeClass, DNPhoneAttribute>) end;

  //-------------namespace: System.ComponentModel.DataAnnotations----------------
  DNUrlAttributeClass = interface(DNDataTypeAttributeClass)
  ['{9B388E38-40C8-5CF6-A0CA-5E5B487CB011}']
  { constructors } 

    ///<summary>
    ///  新实例初始化 <see cref="T:System.ComponentModel.DataAnnotations.UrlAttribute" />
    ///  类。
    ///</summary>
    {class} function init: DNUrlAttribute;

  end;

  ///<summary>
  ///  提供 URL 验证。
  ///</summary>
  [DNTypeName('System.ComponentModel.DataAnnotations.UrlAttribute')]
  DNUrlAttribute = interface(DNDataTypeAttribute)
  ['{B4240412-05CF-39FF-A519-75711A685949}']
  { getters & setters } 

    function get_DataType: DNDataType;
    function get_CustomDataType: string;
    function get_DisplayFormat: DNDisplayFormatAttribute;
    function get_RequiresValidationContext: Boolean;
    function get_ErrorMessage: string;
    procedure set_ErrorMessage(value: string);
    function get_ErrorMessageResourceName: string;
    procedure set_ErrorMessageResourceName(value: string);
    function get_ErrorMessageResourceType: DDN.mscorlib.DNType;
    procedure set_ErrorMessageResourceType(value: DDN.mscorlib.DNType);
    function get_TypeId: DDN.mscorlib.DNObject;

  { methods } 

    ///<summary>
    ///  验证指定的 URL 的格式。
    ///</summary>
    ///  <param name="value">
    ///  要验证的 URL。
    ///</param>
    ///<returns><see langword="true" />
    ///  如果该 URL 的格式无效或 <see langword="null" />
    ///  ; 否则为 <see langword="false" />
    ///  。
    ///</returns>
    function IsValid(value: DDN.mscorlib.DNObject): Boolean;
    ///<summary>
    ///  返回与数据字段关联的类型的名称。
    ///</summary>
    ///<returns>
    ///  与数据字段相关联的类型名称。
    ///</returns>
    function GetDataTypeName: string;
    procedure Validate(value: DDN.mscorlib.DNObject; name: string); overload;
    procedure Validate(value: DDN.mscorlib.DNObject; validationContext: DNValidationContext); overload;
    function FormatErrorMessage(name: string): string;
    function GetValidationResult(value: DDN.mscorlib.DNObject; validationContext: DNValidationContext): DNValidationResult;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DDN.mscorlib.DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  获取与数据字段关联的类型。
    ///</summary>
    ///<returns><see cref="T:System.ComponentModel.DataAnnotations.DataType" />
    ///  值之一。
    ///</returns>
    property DataType: DNDataType read get_DataType;
    ///<summary>
    ///  获取与数据字段关联的自定义字段模板的名称。
    ///</summary>
    ///<returns>
    ///  与数据字段关联的自定义字段模板的名称。
    ///</returns>
    property CustomDataType: string read get_CustomDataType;
    ///<summary>
    ///  获取数据字段的显示格式。
    ///</summary>
    ///<returns>
    ///  数据字段的显示格式。
    ///</returns>
    property DisplayFormat: DNDisplayFormatAttribute read get_DisplayFormat;
    property RequiresValidationContext: Boolean read get_RequiresValidationContext;
    property ErrorMessage: string read get_ErrorMessage write set_ErrorMessage;
    property ErrorMessageResourceName: string read get_ErrorMessageResourceName write set_ErrorMessageResourceName;
    property ErrorMessageResourceType: DDN.mscorlib.DNType read get_ErrorMessageResourceType write set_ErrorMessageResourceType;
    property TypeId: DDN.mscorlib.DNObject read get_TypeId;
  end;

  TDNUrlAttribute = class(TDNGenericImport<DNUrlAttributeClass, DNUrlAttribute>) end;

  //-------------namespace: System.ComponentModel.DataAnnotations----------------
  DNMaxLengthAttributeClass = interface(DNValidationAttributeClass)
  ['{56126C3F-D706-5B81-AD48-B7C7C669D2D4}']
  { constructors } 

    ///<summary>
    ///  新实例初始化 <see cref="T:System.ComponentModel.DataAnnotations.MaxLengthAttribute" />
    ///  类根据 <paramref name="length" />
    ///  参数。
    ///</summary>
    ///  <param name="length">
    ///  数组或字符串数据的最大允许长度。
    ///</param>
    {class} function init(length: Int32): DNMaxLengthAttribute; overload;
    ///<summary>
    ///  初始化 <see cref="T:System.ComponentModel.DataAnnotations.MaxLengthAttribute" />
    ///  类的新实例。
    ///</summary>
    {class} function init: DNMaxLengthAttribute; overload;

  end;

  ///<summary>
  ///  指定属性中允许的数组或字符串数据的最大长度。
  ///</summary>
  [DNTypeName('System.ComponentModel.DataAnnotations.MaxLengthAttribute')]
  DNMaxLengthAttribute = interface(DNValidationAttribute)
  ['{71AFDFC5-2BC7-3789-9A6A-2BCFEFF5A3E2}']
  { getters & setters } 

    function get_Length: Int32;
    function get_RequiresValidationContext: Boolean;
    function get_ErrorMessage: string;
    procedure set_ErrorMessage(value: string);
    function get_ErrorMessageResourceName: string;
    procedure set_ErrorMessageResourceName(value: string);
    function get_ErrorMessageResourceType: DDN.mscorlib.DNType;
    procedure set_ErrorMessageResourceType(value: DDN.mscorlib.DNType);
    function get_TypeId: DDN.mscorlib.DNObject;

  { methods } 

    ///<summary>
    ///  确定指定的对象是否有效。
    ///</summary>
    ///  <param name="value">
    ///  要验证的对象。
    ///</param>
    ///<returns>
    ///  如果该值为 null 或该值小于或等于指定的最大长度，则为 <see langword="true" />
    ///  ；否则为 <see langword="false" />
    ///  。
    ///</returns>
    ///<exception cref="T:System.InvalidOperationException">
    ///  长度为零或小于 -1。
    ///</exception>
    function IsValid(value: DDN.mscorlib.DNObject): Boolean;
    ///<summary>
    ///  对指定的错误消息应用格式设置。
    ///</summary>
    ///  <param name="name">
    ///  要包含在格式化字符串中的名称。
    ///</param>
    ///<returns>
    ///  用于描述最大可接受长度的本地化字符串。
    ///</returns>
    function FormatErrorMessage(name: string): string;
    ///<summary>
    ///  验证指定的对象。
    ///</summary>
    ///  <param name="value">
    ///  要验证的对象的值。
    ///</param>
    ///  <param name="name">
    ///  要包括错误消息中的名称。
    ///</param>
    ///<exception cref="T:System.ComponentModel.DataAnnotations.ValidationException"><paramref name="value" />
    ///  无效。
    ///</exception>
    procedure Validate(value: DDN.mscorlib.DNObject; name: string); overload;
    ///<summary>
    ///  验证指定的对象。
    ///</summary>
    ///  <param name="value">
    ///  要验证的对象。
    ///</param>
    ///  <param name="validationContext"><see cref="T:System.ComponentModel.DataAnnotations.ValidationContext" />
    ///  描述其中执行验证检查的上下文的对象。
    ///  此参数不能为<see langword="null" />
    ///  。
    ///</param>
    ///<exception cref="T:System.ComponentModel.DataAnnotations.ValidationException">
    ///  验证失败。
    ///</exception>
    procedure Validate(value: DDN.mscorlib.DNObject; validationContext: DNValidationContext); overload;
    ///<summary>
    ///  检查指定的值是否为有效相对于当前的验证特性。
    ///</summary>
    ///  <param name="value">
    ///  要验证的值。
    ///</param>
    ///  <param name="validationContext">
    ///  有关验证操作的上下文信息。
    ///</param>
    ///<returns><see cref="T:System.ComponentModel.DataAnnotations.ValidationResult" />
    ///  类的实例。
    ///</returns>
    function GetValidationResult(value: DDN.mscorlib.DNObject; validationContext: DNValidationContext): DNValidationResult;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DDN.mscorlib.DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  获取数组或字符串数据的最大允许长度。
    ///</summary>
    ///<returns>
    ///  数组或字符串数据的最大允许长度。
    ///</returns>
    property Length: Int32 read get_Length;
    ///<summary>
    ///  获取一个值，该值指示属性是否要求验证上下文。
    ///</summary>
    ///<returns><see langword="true" />
    ///  如果该属性需要验证上下文;否则为 <see langword="false" />
    ///  。
    ///</returns>
    property RequiresValidationContext: Boolean read get_RequiresValidationContext;
    ///<summary>
    ///  获取或设置与验证控件关联，如果验证失败的错误消息。
    ///</summary>
    ///<returns>
    ///  与验证控件相关联的错误消息。
    ///</returns>
    property ErrorMessage: string read get_ErrorMessage write set_ErrorMessage;
    ///<summary>
    ///  获取或设置要用于查找的错误消息资源名称 <see cref="P:System.ComponentModel.DataAnnotations.ValidationAttribute.ErrorMessageResourceType" />
    ///  属性值，如果验证失败。
    ///</summary>
    ///<returns>
    ///  与验证控件相关联的错误消息资源。
    ///</returns>
    property ErrorMessageResourceName: string read get_ErrorMessageResourceName write set_ErrorMessageResourceName;
    ///<summary>
    ///  获取或设置要用于查找错误消息，如果验证失败的资源类型。
    ///</summary>
    ///<returns>
    ///  与验证控件相关联的错误消息的类型。
    ///</returns>
    property ErrorMessageResourceType: DDN.mscorlib.DNType read get_ErrorMessageResourceType write set_ErrorMessageResourceType;
    property TypeId: DDN.mscorlib.DNObject read get_TypeId;
  end;

  TDNMaxLengthAttribute = class(TDNGenericImport<DNMaxLengthAttributeClass, DNMaxLengthAttribute>) end;

  //-------------namespace: System.ComponentModel.DataAnnotations----------------
  DNMinLengthAttributeClass = interface(DNValidationAttributeClass)
  ['{8D59A566-57EF-5D41-96A9-DE09670A9F69}']
  { constructors } 

    ///<summary>
    ///  初始化 <see cref="T:System.ComponentModel.DataAnnotations.MinLengthAttribute" />
    ///  类的新实例。
    ///</summary>
    ///  <param name="length">
    ///  数组或字符串数据的长度。
    ///</param>
    {class} function init(length: Int32): DNMinLengthAttribute;

  end;

  ///<summary>
  ///  指定属性中允许的数组或字符串数据的最小长度。
  ///</summary>
  [DNTypeName('System.ComponentModel.DataAnnotations.MinLengthAttribute')]
  DNMinLengthAttribute = interface(DNValidationAttribute)
  ['{5CCD40F7-81D7-320B-A0E5-A7E3E6664B58}']
  { getters & setters } 

    function get_Length: Int32;
    function get_RequiresValidationContext: Boolean;
    function get_ErrorMessage: string;
    procedure set_ErrorMessage(value: string);
    function get_ErrorMessageResourceName: string;
    procedure set_ErrorMessageResourceName(value: string);
    function get_ErrorMessageResourceType: DDN.mscorlib.DNType;
    procedure set_ErrorMessageResourceType(value: DDN.mscorlib.DNType);
    function get_TypeId: DDN.mscorlib.DNObject;

  { methods } 

    ///<summary>
    ///  确定指定的对象是否有效。
    ///</summary>
    ///  <param name="value">
    ///  要验证的对象。
    ///</param>
    ///<returns><see langword="true" />
    ///  如果指定的对象是否有效，则为否则为 <see langword="false" />
    ///  。
    ///</returns>
    function IsValid(value: DDN.mscorlib.DNObject): Boolean;
    ///<summary>
    ///  对指定的错误消息应用格式设置。
    ///</summary>
    ///  <param name="name">
    ///  要包含在格式化字符串中的名称。
    ///</param>
    ///<returns>
    ///  用于描述最小可接受长度的本地化字符串。
    ///</returns>
    function FormatErrorMessage(name: string): string;
    ///<summary>
    ///  验证指定的对象。
    ///</summary>
    ///  <param name="value">
    ///  要验证的对象的值。
    ///</param>
    ///  <param name="name">
    ///  要包括错误消息中的名称。
    ///</param>
    ///<exception cref="T:System.ComponentModel.DataAnnotations.ValidationException"><paramref name="value" />
    ///  无效。
    ///</exception>
    procedure Validate(value: DDN.mscorlib.DNObject; name: string); overload;
    ///<summary>
    ///  验证指定的对象。
    ///</summary>
    ///  <param name="value">
    ///  要验证的对象。
    ///</param>
    ///  <param name="validationContext"><see cref="T:System.ComponentModel.DataAnnotations.ValidationContext" />
    ///  描述其中执行验证检查的上下文的对象。
    ///  此参数不能为<see langword="null" />
    ///  。
    ///</param>
    ///<exception cref="T:System.ComponentModel.DataAnnotations.ValidationException">
    ///  验证失败。
    ///</exception>
    procedure Validate(value: DDN.mscorlib.DNObject; validationContext: DNValidationContext); overload;
    ///<summary>
    ///  检查指定的值是否为有效相对于当前的验证特性。
    ///</summary>
    ///  <param name="value">
    ///  要验证的值。
    ///</param>
    ///  <param name="validationContext">
    ///  有关验证操作的上下文信息。
    ///</param>
    ///<returns><see cref="T:System.ComponentModel.DataAnnotations.ValidationResult" />
    ///  类的实例。
    ///</returns>
    function GetValidationResult(value: DDN.mscorlib.DNObject; validationContext: DNValidationContext): DNValidationResult;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DDN.mscorlib.DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  获取或设置数组或字符串数据的最小允许长度。
    ///</summary>
    ///<returns>
    ///  数组或字符串数据的最小允许长度。
    ///</returns>
    property Length: Int32 read get_Length;
    ///<summary>
    ///  获取一个值，该值指示属性是否要求验证上下文。
    ///</summary>
    ///<returns><see langword="true" />
    ///  如果该属性需要验证上下文;否则为 <see langword="false" />
    ///  。
    ///</returns>
    property RequiresValidationContext: Boolean read get_RequiresValidationContext;
    ///<summary>
    ///  获取或设置与验证控件关联，如果验证失败的错误消息。
    ///</summary>
    ///<returns>
    ///  与验证控件相关联的错误消息。
    ///</returns>
    property ErrorMessage: string read get_ErrorMessage write set_ErrorMessage;
    ///<summary>
    ///  获取或设置要用于查找的错误消息资源名称 <see cref="P:System.ComponentModel.DataAnnotations.ValidationAttribute.ErrorMessageResourceType" />
    ///  属性值，如果验证失败。
    ///</summary>
    ///<returns>
    ///  与验证控件相关联的错误消息资源。
    ///</returns>
    property ErrorMessageResourceName: string read get_ErrorMessageResourceName write set_ErrorMessageResourceName;
    ///<summary>
    ///  获取或设置要用于查找错误消息，如果验证失败的资源类型。
    ///</summary>
    ///<returns>
    ///  与验证控件相关联的错误消息的类型。
    ///</returns>
    property ErrorMessageResourceType: DDN.mscorlib.DNType read get_ErrorMessageResourceType write set_ErrorMessageResourceType;
    property TypeId: DDN.mscorlib.DNObject read get_TypeId;
  end;

  TDNMinLengthAttribute = class(TDNGenericImport<DNMinLengthAttributeClass, DNMinLengthAttribute>) end;

  //-------------namespace: System.ComponentModel.DataAnnotations----------------
  DNRangeAttributeClass = interface(DNValidationAttributeClass)
  ['{0A995450-C31D-5A79-AA20-F9BD7807AD93}']
  { constructors } 

    ///<summary>
    ///  新实例初始化 <see cref="T:System.ComponentModel.DataAnnotations.RangeAttribute" />
    ///  类通过使用指定的最小值和最大值。
    ///</summary>
    ///  <param name="minimum">
    ///  指定允许的数据字段值的最小值。
    ///</param>
    ///  <param name="maximum">
    ///  指定允许的数据字段值的最大值。
    ///</param>
    {class} function init(minimum: Int32; maximum: Int32): DNRangeAttribute; overload;
    ///<summary>
    ///  新实例初始化 <see cref="T:System.ComponentModel.DataAnnotations.RangeAttribute" />
    ///  类通过使用指定的最小值和最大值。
    ///</summary>
    ///  <param name="minimum">
    ///  指定允许的数据字段值的最小值。
    ///</param>
    ///  <param name="maximum">
    ///  指定允许的数据字段值的最大值。
    ///</param>
    {class} function init(minimum: Double; maximum: Double): DNRangeAttribute; overload;
    ///<summary>
    ///  新实例初始化 <see cref="T:System.ComponentModel.DataAnnotations.RangeAttribute" />
    ///  通过使用指定的最小和最大值和特定类型的类。
    ///</summary>
    ///  <param name="type">
    ///  指定要测试的对象的类型。
    ///</param>
    ///  <param name="minimum">
    ///  指定允许的数据字段值的最小值。
    ///</param>
    ///  <param name="maximum">
    ///  指定允许的数据字段值的最大值。
    ///</param>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="type" />
    ///  为 <see langword="null" />
    ///  。
    ///</exception>
    {class} function init(&type: DDN.mscorlib.DNType; minimum: string; maximum: string): DNRangeAttribute; overload;

  end;

  ///<summary>
  ///  为数据字段的值指定数值范围约束。
  ///</summary>
  [DNTypeName('System.ComponentModel.DataAnnotations.RangeAttribute')]
  DNRangeAttribute = interface(DNValidationAttribute)
  ['{A5F4EC07-9CA6-333B-8293-7E88F5038ED9}']
  { getters & setters } 

    function get_Minimum: DDN.mscorlib.DNObject;
    function get_Maximum: DDN.mscorlib.DNObject;
    function get_OperandType: DDN.mscorlib.DNType;
    function get_RequiresValidationContext: Boolean;
    function get_ErrorMessage: string;
    procedure set_ErrorMessage(value: string);
    function get_ErrorMessageResourceName: string;
    procedure set_ErrorMessageResourceName(value: string);
    function get_ErrorMessageResourceType: DDN.mscorlib.DNType;
    procedure set_ErrorMessageResourceType(value: DDN.mscorlib.DNType);
    function get_TypeId: DDN.mscorlib.DNObject;

  { methods } 

    ///<summary>
    ///  数据字段的值指定范围中的检查。
    ///</summary>
    ///  <param name="value">
    ///  要验证的数据字段值。
    ///</param>
    ///<returns><see langword="true" />
    ///  如果指定的值在范围内;否则为 <see langword="false" />
    ///  。
    ///</returns>
    ///<exception cref="T:System.ComponentModel.DataAnnotations.ValidationException">
    ///  数据字段值超出了允许范围。
    ///</exception>
    function IsValid(value: DDN.mscorlib.DNObject): Boolean;
    ///<summary>
    ///  设置的值域验证失败时显示的错误消息的格式。
    ///</summary>
    ///  <param name="name">
    ///  导致验证失败的字段的名称。
    ///</param>
    ///<returns>
    ///  格式化的错误消息。
    ///</returns>
    function FormatErrorMessage(name: string): string;
    ///<summary>
    ///  验证指定的对象。
    ///</summary>
    ///  <param name="value">
    ///  要验证的对象的值。
    ///</param>
    ///  <param name="name">
    ///  要包括错误消息中的名称。
    ///</param>
    ///<exception cref="T:System.ComponentModel.DataAnnotations.ValidationException"><paramref name="value" />
    ///  无效。
    ///</exception>
    procedure Validate(value: DDN.mscorlib.DNObject; name: string); overload;
    ///<summary>
    ///  验证指定的对象。
    ///</summary>
    ///  <param name="value">
    ///  要验证的对象。
    ///</param>
    ///  <param name="validationContext"><see cref="T:System.ComponentModel.DataAnnotations.ValidationContext" />
    ///  描述其中执行验证检查的上下文的对象。
    ///  此参数不能为<see langword="null" />
    ///  。
    ///</param>
    ///<exception cref="T:System.ComponentModel.DataAnnotations.ValidationException">
    ///  验证失败。
    ///</exception>
    procedure Validate(value: DDN.mscorlib.DNObject; validationContext: DNValidationContext); overload;
    ///<summary>
    ///  检查指定的值是否为有效相对于当前的验证特性。
    ///</summary>
    ///  <param name="value">
    ///  要验证的值。
    ///</param>
    ///  <param name="validationContext">
    ///  有关验证操作的上下文信息。
    ///</param>
    ///<returns><see cref="T:System.ComponentModel.DataAnnotations.ValidationResult" />
    ///  类的实例。
    ///</returns>
    function GetValidationResult(value: DDN.mscorlib.DNObject; validationContext: DNValidationContext): DNValidationResult;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DDN.mscorlib.DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  获取最小允许的字段值。
    ///</summary>
    ///<returns>
    ///  允许的数据字段的最小值。
    ///</returns>
    property Minimum: DDN.mscorlib.DNObject read get_Minimum;
    ///<summary>
    ///  获取最大允许的字段值。
    ///</summary>
    ///<returns>
    ///  允许的数据字段的最大值。
    ///</returns>
    property Maximum: DDN.mscorlib.DNObject read get_Maximum;
    ///<summary>
    ///  获取必须验证其值的数据字段的类型。
    ///</summary>
    ///<returns>
    ///  必须验证其值的数据字段的类型。
    ///</returns>
    property OperandType: DDN.mscorlib.DNType read get_OperandType;
    ///<summary>
    ///  获取一个值，该值指示属性是否要求验证上下文。
    ///</summary>
    ///<returns><see langword="true" />
    ///  如果该属性需要验证上下文;否则为 <see langword="false" />
    ///  。
    ///</returns>
    property RequiresValidationContext: Boolean read get_RequiresValidationContext;
    ///<summary>
    ///  获取或设置与验证控件关联，如果验证失败的错误消息。
    ///</summary>
    ///<returns>
    ///  与验证控件相关联的错误消息。
    ///</returns>
    property ErrorMessage: string read get_ErrorMessage write set_ErrorMessage;
    ///<summary>
    ///  获取或设置要用于查找的错误消息资源名称 <see cref="P:System.ComponentModel.DataAnnotations.ValidationAttribute.ErrorMessageResourceType" />
    ///  属性值，如果验证失败。
    ///</summary>
    ///<returns>
    ///  与验证控件相关联的错误消息资源。
    ///</returns>
    property ErrorMessageResourceName: string read get_ErrorMessageResourceName write set_ErrorMessageResourceName;
    ///<summary>
    ///  获取或设置要用于查找错误消息，如果验证失败的资源类型。
    ///</summary>
    ///<returns>
    ///  与验证控件相关联的错误消息的类型。
    ///</returns>
    property ErrorMessageResourceType: DDN.mscorlib.DNType read get_ErrorMessageResourceType write set_ErrorMessageResourceType;
    property TypeId: DDN.mscorlib.DNObject read get_TypeId;
  end;

  TDNRangeAttribute = class(TDNGenericImport<DNRangeAttributeClass, DNRangeAttribute>) end;

  //-------------namespace: System.ComponentModel.DataAnnotations----------------
  DNRegularExpressionAttributeClass = interface(DNValidationAttributeClass)
  ['{B46FC7C3-0DC3-5A97-B410-0A5EE8EA2DF1}']
  { constructors } 

    ///<summary>
    ///  初始化 <see cref="T:System.ComponentModel.DataAnnotations.RegularExpressionAttribute" />
    ///  类的新实例。
    ///</summary>
    ///  <param name="pattern">
    ///  用来验证数据字段值的正则表达式。
    ///</param>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="pattern" />
    ///  为 <see langword="null" />
    ///  。
    ///</exception>
    {class} function init(pattern: string): DNRegularExpressionAttribute;

  end;

  ///<summary>
  ///  指定 ASP.NET 动态数据中的数据字段值必须匹配指定正则表达式。
  ///</summary>
  [DNTypeName('System.ComponentModel.DataAnnotations.RegularExpressionAttribute')]
  DNRegularExpressionAttribute = interface(DNValidationAttribute)
  ['{F80BAAE7-D511-384D-AC4C-DB4BFD74311B}']
  { getters & setters } 

    function get_Pattern: string;
    function get_MatchTimeoutInMilliseconds: Int32;
    procedure set_MatchTimeoutInMilliseconds(value: Int32);
    function get_RequiresValidationContext: Boolean;
    function get_ErrorMessage: string;
    procedure set_ErrorMessage(value: string);
    function get_ErrorMessageResourceName: string;
    procedure set_ErrorMessageResourceName(value: string);
    function get_ErrorMessageResourceType: DDN.mscorlib.DNType;
    procedure set_ErrorMessageResourceType(value: DDN.mscorlib.DNType);
    function get_TypeId: DDN.mscorlib.DNObject;

  { methods } 

    ///<summary>
    ///  检查用户输入的值是否与正则表达式模式相匹配。
    ///</summary>
    ///  <param name="value">
    ///  要验证的数据字段值。
    ///</param>
    ///<returns>
    ///  如果验证成功，则为 <see langword="true" />
    ///  ；否则为 <see langword="false" />
    ///  。
    ///</returns>
    ///<exception cref="T:System.ComponentModel.DataAnnotations.ValidationException">
    ///  数据字段值与正则表达式模式不匹配。
    ///</exception>
    function IsValid(value: DDN.mscorlib.DNObject): Boolean;
    ///<summary>
    ///  设置要显示在正则表达式验证失败时的错误消息的格式。
    ///</summary>
    ///  <param name="name">
    ///  导致验证失败的字段的名称。
    ///</param>
    ///<returns>
    ///  格式化的错误消息。
    ///</returns>
    function FormatErrorMessage(name: string): string;
    ///<summary>
    ///  验证指定的对象。
    ///</summary>
    ///  <param name="value">
    ///  要验证的对象的值。
    ///</param>
    ///  <param name="name">
    ///  要包括错误消息中的名称。
    ///</param>
    ///<exception cref="T:System.ComponentModel.DataAnnotations.ValidationException"><paramref name="value" />
    ///  无效。
    ///</exception>
    procedure Validate(value: DDN.mscorlib.DNObject; name: string); overload;
    ///<summary>
    ///  验证指定的对象。
    ///</summary>
    ///  <param name="value">
    ///  要验证的对象。
    ///</param>
    ///  <param name="validationContext"><see cref="T:System.ComponentModel.DataAnnotations.ValidationContext" />
    ///  描述其中执行验证检查的上下文的对象。
    ///  此参数不能为<see langword="null" />
    ///  。
    ///</param>
    ///<exception cref="T:System.ComponentModel.DataAnnotations.ValidationException">
    ///  验证失败。
    ///</exception>
    procedure Validate(value: DDN.mscorlib.DNObject; validationContext: DNValidationContext); overload;
    ///<summary>
    ///  检查指定的值是否为有效相对于当前的验证特性。
    ///</summary>
    ///  <param name="value">
    ///  要验证的值。
    ///</param>
    ///  <param name="validationContext">
    ///  有关验证操作的上下文信息。
    ///</param>
    ///<returns><see cref="T:System.ComponentModel.DataAnnotations.ValidationResult" />
    ///  类的实例。
    ///</returns>
    function GetValidationResult(value: DDN.mscorlib.DNObject; validationContext: DNValidationContext): DNValidationResult;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DDN.mscorlib.DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  获取正则表达式模式。
    ///</summary>
    ///<returns>
    ///  要匹配的模式。
    ///</returns>
    property Pattern: string read get_Pattern;
    ///<summary>
    ///  获取或设置用于在操作超时前执行单个匹配操作的时间量（以毫秒为单位）。
    ///</summary>
    ///<returns>
    ///  用于执行单个匹配操作的时间量（以毫秒为单位）。
    ///</returns>
    property MatchTimeoutInMilliseconds: Int32 read get_MatchTimeoutInMilliseconds write set_MatchTimeoutInMilliseconds;
    ///<summary>
    ///  获取一个值，该值指示属性是否要求验证上下文。
    ///</summary>
    ///<returns><see langword="true" />
    ///  如果该属性需要验证上下文;否则为 <see langword="false" />
    ///  。
    ///</returns>
    property RequiresValidationContext: Boolean read get_RequiresValidationContext;
    ///<summary>
    ///  获取或设置与验证控件关联，如果验证失败的错误消息。
    ///</summary>
    ///<returns>
    ///  与验证控件相关联的错误消息。
    ///</returns>
    property ErrorMessage: string read get_ErrorMessage write set_ErrorMessage;
    ///<summary>
    ///  获取或设置要用于查找的错误消息资源名称 <see cref="P:System.ComponentModel.DataAnnotations.ValidationAttribute.ErrorMessageResourceType" />
    ///  属性值，如果验证失败。
    ///</summary>
    ///<returns>
    ///  与验证控件相关联的错误消息资源。
    ///</returns>
    property ErrorMessageResourceName: string read get_ErrorMessageResourceName write set_ErrorMessageResourceName;
    ///<summary>
    ///  获取或设置要用于查找错误消息，如果验证失败的资源类型。
    ///</summary>
    ///<returns>
    ///  与验证控件相关联的错误消息的类型。
    ///</returns>
    property ErrorMessageResourceType: DDN.mscorlib.DNType read get_ErrorMessageResourceType write set_ErrorMessageResourceType;
    property TypeId: DDN.mscorlib.DNObject read get_TypeId;
  end;

  TDNRegularExpressionAttribute = class(TDNGenericImport<DNRegularExpressionAttributeClass, DNRegularExpressionAttribute>) end;

  //-------------namespace: System.ComponentModel.DataAnnotations----------------
  DNRequiredAttributeClass = interface(DNValidationAttributeClass)
  ['{3E4BA435-4165-5C32-B7B6-B793A29F0362}']
  { constructors } 

    ///<summary>
    ///  初始化 <see cref="T:System.ComponentModel.DataAnnotations.RequiredAttribute" />
    ///  类的新实例。
    ///</summary>
    {class} function init: DNRequiredAttribute;

  end;

  ///<summary>
  ///  指定数据字段值是必需的。
  ///</summary>
  [DNTypeName('System.ComponentModel.DataAnnotations.RequiredAttribute')]
  DNRequiredAttribute = interface(DNValidationAttribute)
  ['{0304FE9C-59D6-37B0-A2D2-9B2CC9A9DABE}']
  { getters & setters } 

    function get_AllowEmptyStrings: Boolean;
    procedure set_AllowEmptyStrings(value: Boolean);
    function get_RequiresValidationContext: Boolean;
    function get_ErrorMessage: string;
    procedure set_ErrorMessage(value: string);
    function get_ErrorMessageResourceName: string;
    procedure set_ErrorMessageResourceName(value: string);
    function get_ErrorMessageResourceType: DDN.mscorlib.DNType;
    procedure set_ErrorMessageResourceType(value: DDN.mscorlib.DNType);
    function get_TypeId: DDN.mscorlib.DNObject;

  { methods } 

    ///<summary>
    ///  检查所需的数据字段的值不为空。
    ///</summary>
    ///  <param name="value">
    ///  要验证的数据字段值。
    ///</param>
    ///<returns>
    ///  如果验证成功，则为 <see langword="true" />
    ///  ；否则为 <see langword="false" />
    ///  。
    ///</returns>
    ///<exception cref="T:System.ComponentModel.DataAnnotations.ValidationException">
    ///  数据字段值为 <see langword="null" />
    ///  。
    ///</exception>
    function IsValid(value: DDN.mscorlib.DNObject): Boolean;
    ///<summary>
    ///  验证指定的对象。
    ///</summary>
    ///  <param name="value">
    ///  要验证的对象的值。
    ///</param>
    ///  <param name="name">
    ///  要包括错误消息中的名称。
    ///</param>
    ///<exception cref="T:System.ComponentModel.DataAnnotations.ValidationException"><paramref name="value" />
    ///  无效。
    ///</exception>
    procedure Validate(value: DDN.mscorlib.DNObject; name: string); overload;
    ///<summary>
    ///  验证指定的对象。
    ///</summary>
    ///  <param name="value">
    ///  要验证的对象。
    ///</param>
    ///  <param name="validationContext"><see cref="T:System.ComponentModel.DataAnnotations.ValidationContext" />
    ///  描述其中执行验证检查的上下文的对象。
    ///  此参数不能为<see langword="null" />
    ///  。
    ///</param>
    ///<exception cref="T:System.ComponentModel.DataAnnotations.ValidationException">
    ///  验证失败。
    ///</exception>
    procedure Validate(value: DDN.mscorlib.DNObject; validationContext: DNValidationContext); overload;
    ///<summary>
    ///  对应用格式设置错误消息，根据发生错误的数据字段。
    ///</summary>
    ///  <param name="name">
    ///  要在格式的消息中包含的名称。
    ///</param>
    ///<returns>
    ///  格式化的错误消息的实例。
    ///</returns>
    function FormatErrorMessage(name: string): string;
    ///<summary>
    ///  检查指定的值是否为有效相对于当前的验证特性。
    ///</summary>
    ///  <param name="value">
    ///  要验证的值。
    ///</param>
    ///  <param name="validationContext">
    ///  有关验证操作的上下文信息。
    ///</param>
    ///<returns><see cref="T:System.ComponentModel.DataAnnotations.ValidationResult" />
    ///  类的实例。
    ///</returns>
    function GetValidationResult(value: DDN.mscorlib.DNObject; validationContext: DNValidationContext): DNValidationResult;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DDN.mscorlib.DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  获取或设置一个值，该值指示是否允许为空字符串。
    ///</summary>
    ///<returns><see langword="true" />
    ///  如果允许为空字符串;否则为 <see langword="false" />
    ///  。
    ///  默认值为 <see langword="false" />
    ///  。
    ///</returns>
    property AllowEmptyStrings: Boolean read get_AllowEmptyStrings write set_AllowEmptyStrings;
    ///<summary>
    ///  获取一个值，该值指示属性是否要求验证上下文。
    ///</summary>
    ///<returns><see langword="true" />
    ///  如果该属性需要验证上下文;否则为 <see langword="false" />
    ///  。
    ///</returns>
    property RequiresValidationContext: Boolean read get_RequiresValidationContext;
    ///<summary>
    ///  获取或设置与验证控件关联，如果验证失败的错误消息。
    ///</summary>
    ///<returns>
    ///  与验证控件相关联的错误消息。
    ///</returns>
    property ErrorMessage: string read get_ErrorMessage write set_ErrorMessage;
    ///<summary>
    ///  获取或设置要用于查找的错误消息资源名称 <see cref="P:System.ComponentModel.DataAnnotations.ValidationAttribute.ErrorMessageResourceType" />
    ///  属性值，如果验证失败。
    ///</summary>
    ///<returns>
    ///  与验证控件相关联的错误消息资源。
    ///</returns>
    property ErrorMessageResourceName: string read get_ErrorMessageResourceName write set_ErrorMessageResourceName;
    ///<summary>
    ///  获取或设置要用于查找错误消息，如果验证失败的资源类型。
    ///</summary>
    ///<returns>
    ///  与验证控件相关联的错误消息的类型。
    ///</returns>
    property ErrorMessageResourceType: DDN.mscorlib.DNType read get_ErrorMessageResourceType write set_ErrorMessageResourceType;
    property TypeId: DDN.mscorlib.DNObject read get_TypeId;
  end;

  TDNRequiredAttribute = class(TDNGenericImport<DNRequiredAttributeClass, DNRequiredAttribute>) end;

  //-------------namespace: System.ComponentModel.DataAnnotations----------------
  DNStringLengthAttributeClass = interface(DNValidationAttributeClass)
  ['{1F398A50-5FA1-54B3-B1AA-750D61E357EB}']
  { constructors } 

    ///<summary>
    ///  新实例初始化 <see cref="T:System.ComponentModel.DataAnnotations.StringLengthAttribute" />
    ///  类通过使用指定的最大长度。
    ///</summary>
    ///  <param name="maximumLength">
    ///  一个字符串，最大长度。
    ///</param>
    {class} function init(maximumLength: Int32): DNStringLengthAttribute;

  end;

  ///<summary>
  ///  指定数据字段中允许的字符的最小长度和最大长度。
  ///</summary>
  [DNTypeName('System.ComponentModel.DataAnnotations.StringLengthAttribute')]
  DNStringLengthAttribute = interface(DNValidationAttribute)
  ['{56116897-7B2D-3925-9F4C-2EAE6A3EBCC0}']
  { getters & setters } 

    function get_MaximumLength: Int32;
    function get_MinimumLength: Int32;
    procedure set_MinimumLength(value: Int32);
    function get_RequiresValidationContext: Boolean;
    function get_ErrorMessage: string;
    procedure set_ErrorMessage(value: string);
    function get_ErrorMessageResourceName: string;
    procedure set_ErrorMessageResourceName(value: string);
    function get_ErrorMessageResourceType: DDN.mscorlib.DNType;
    procedure set_ErrorMessageResourceType(value: DDN.mscorlib.DNType);
    function get_TypeId: DDN.mscorlib.DNObject;

  { methods } 

    ///<summary>
    ///  确定指定的对象是否有效。
    ///</summary>
    ///  <param name="value">
    ///  要验证的对象。
    ///</param>
    ///<returns><see langword="true" />
    ///  如果指定的对象是否有效，则为否则为 <see langword="false" />
    ///  。
    ///</returns>
    ///<exception cref="T:System.ArgumentOutOfRangeException"><paramref name="maximumLength" />
    ///  为负。
    ///  - 或 -
    ///  <paramref name="maximumLength" />
    ///  小于 <see cref="P:System.ComponentModel.DataAnnotations.StringLengthAttribute.MinimumLength" />
    ///  。
    ///</exception>
    function IsValid(value: DDN.mscorlib.DNObject): Boolean;
    ///<summary>
    ///  对指定的错误消息应用格式设置。
    ///</summary>
    ///  <param name="name">
    ///  导致验证失败的字段的名称。
    ///</param>
    ///<returns>
    ///  格式化的错误消息。
    ///</returns>
    ///<exception cref="T:System.ArgumentOutOfRangeException"><paramref name="maximumLength" />
    ///  为负数。
    ///  - 或 -
    ///  <paramref name="maximumLength" />
    ///  小于 <paramref name="minimumLength" />
    ///  。
    ///</exception>
    function FormatErrorMessage(name: string): string;
    ///<summary>
    ///  验证指定的对象。
    ///</summary>
    ///  <param name="value">
    ///  要验证的对象的值。
    ///</param>
    ///  <param name="name">
    ///  要包括错误消息中的名称。
    ///</param>
    ///<exception cref="T:System.ComponentModel.DataAnnotations.ValidationException"><paramref name="value" />
    ///  无效。
    ///</exception>
    procedure Validate(value: DDN.mscorlib.DNObject; name: string); overload;
    ///<summary>
    ///  验证指定的对象。
    ///</summary>
    ///  <param name="value">
    ///  要验证的对象。
    ///</param>
    ///  <param name="validationContext"><see cref="T:System.ComponentModel.DataAnnotations.ValidationContext" />
    ///  描述其中执行验证检查的上下文的对象。
    ///  此参数不能为<see langword="null" />
    ///  。
    ///</param>
    ///<exception cref="T:System.ComponentModel.DataAnnotations.ValidationException">
    ///  验证失败。
    ///</exception>
    procedure Validate(value: DDN.mscorlib.DNObject; validationContext: DNValidationContext); overload;
    ///<summary>
    ///  检查指定的值是否为有效相对于当前的验证特性。
    ///</summary>
    ///  <param name="value">
    ///  要验证的值。
    ///</param>
    ///  <param name="validationContext">
    ///  有关验证操作的上下文信息。
    ///</param>
    ///<returns><see cref="T:System.ComponentModel.DataAnnotations.ValidationResult" />
    ///  类的实例。
    ///</returns>
    function GetValidationResult(value: DDN.mscorlib.DNObject; validationContext: DNValidationContext): DNValidationResult;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DDN.mscorlib.DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  获取或设置一个字符串的最大长度。
    ///</summary>
    ///<returns>
    ///  一个字符串最大长度。
    ///</returns>
    property MaximumLength: Int32 read get_MaximumLength;
    ///<summary>
    ///  获取或设置一个字符串的最小长度。
    ///</summary>
    ///<returns>
    ///  一个字符串，最小长度。
    ///</returns>
    property MinimumLength: Int32 read get_MinimumLength write set_MinimumLength;
    ///<summary>
    ///  获取一个值，该值指示属性是否要求验证上下文。
    ///</summary>
    ///<returns><see langword="true" />
    ///  如果该属性需要验证上下文;否则为 <see langword="false" />
    ///  。
    ///</returns>
    property RequiresValidationContext: Boolean read get_RequiresValidationContext;
    ///<summary>
    ///  获取或设置与验证控件关联，如果验证失败的错误消息。
    ///</summary>
    ///<returns>
    ///  与验证控件相关联的错误消息。
    ///</returns>
    property ErrorMessage: string read get_ErrorMessage write set_ErrorMessage;
    ///<summary>
    ///  获取或设置要用于查找的错误消息资源名称 <see cref="P:System.ComponentModel.DataAnnotations.ValidationAttribute.ErrorMessageResourceType" />
    ///  属性值，如果验证失败。
    ///</summary>
    ///<returns>
    ///  与验证控件相关联的错误消息资源。
    ///</returns>
    property ErrorMessageResourceName: string read get_ErrorMessageResourceName write set_ErrorMessageResourceName;
    ///<summary>
    ///  获取或设置要用于查找错误消息，如果验证失败的资源类型。
    ///</summary>
    ///<returns>
    ///  与验证控件相关联的错误消息的类型。
    ///</returns>
    property ErrorMessageResourceType: DDN.mscorlib.DNType read get_ErrorMessageResourceType write set_ErrorMessageResourceType;
    property TypeId: DDN.mscorlib.DNObject read get_TypeId;
  end;

  TDNStringLengthAttribute = class(TDNGenericImport<DNStringLengthAttributeClass, DNStringLengthAttribute>) end;

  //-------------namespace: System.ComponentModel.DataAnnotations----------------
  DNValidationContextClass = interface(DNObjectClass)
  ['{DFEDEDFA-6A77-5E78-AE67-2C9A91762E0A}']
  { constructors } 

    ///<summary>
    ///  使用指定的对象实例初始化 <see cref="T:System.ComponentModel.DataAnnotations.ValidationContext" />
    ///  类的新实例。
    ///</summary>
    ///  <param name="instance">
    ///  要验证的对象实例。
    ///  它不能为 <see langword="null" />
    ///  。
    ///</param>
    {class} function init(instance: DDN.mscorlib.DNObject): DNValidationContext; overload;
    {class} function init(instance: DDN.mscorlib.DNObject; items: DDN.mscorlib.DNIDictionary<DDN.mscorlib.DNObject, DDN.mscorlib.DNObject>): DNValidationContext; overload;
    {class} function init(instance: DDN.mscorlib.DNObject; serviceProvider: DDN.mscorlib.DNIServiceProvider; items: DDN.mscorlib.DNIDictionary<DDN.mscorlib.DNObject, DDN.mscorlib.DNObject>): DNValidationContext; overload;

  end;

  ///<summary>
  ///  描述执行验证检查的上下文。
  ///</summary>
  [DNTypeName('System.ComponentModel.DataAnnotations.ValidationContext')]
  DNValidationContext = interface(DDN.mscorlib.DNIServiceProvider)
  ['{13413F9C-FEB5-3AA3-9E47-57765FE3E971}']
  { getters & setters } 

    function get_ObjectInstance: DDN.mscorlib.DNObject;
    function get_ObjectType: DDN.mscorlib.DNType;
    function get_DisplayName: string;
    procedure set_DisplayName(value: string);
    function get_MemberName: string;
    procedure set_MemberName(value: string);
    function get_Items: DDN.mscorlib.DNIDictionary<DDN.mscorlib.DNObject, DDN.mscorlib.DNObject>;
    function get_ServiceContainer: DDN.System.DNIServiceContainer;

  { methods } 

    procedure InitializeServiceProvider(serviceProvider: DDN.mscorlib.DNFunc<DDN.mscorlib.DNType, DDN.mscorlib.DNObject>);
    ///<summary>
    ///  返回提供自定义验证的服务。
    ///</summary>
    ///  <param name="serviceType">
    ///  用于进行验证的服务的类型。
    ///</param>
    ///<returns>
    ///  该服务的实例；如果该服务不可用，则为 <see langword="null" />
    ///  。
    ///</returns>
    function GetService(serviceType: DDN.mscorlib.DNType): DDN.mscorlib.DNObject;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  获取要验证的对象。
    ///</summary>
    ///<returns>
    ///  要验证的对象。
    ///</returns>
    property ObjectInstance: DDN.mscorlib.DNObject read get_ObjectInstance;
    ///<summary>
    ///  获取要验证的对象的类型。
    ///</summary>
    ///<returns>
    ///  要验证的对象的类型。
    ///</returns>
    property ObjectType: DDN.mscorlib.DNType read get_ObjectType;
    ///<summary>
    ///  获取或设置要验证的成员的名称。
    ///</summary>
    ///<returns>
    ///  要验证的成员的名称。
    ///</returns>
    property DisplayName: string read get_DisplayName write set_DisplayName;
    ///<summary>
    ///  获取或设置要验证的成员的名称。
    ///</summary>
    ///<returns>
    ///  要验证的成员的名称。
    ///</returns>
    property MemberName: string read get_MemberName write set_MemberName;
    ///<summary>
    ///  获取与此上下文关联的键/值对的字典。
    ///</summary>
    ///<returns>
    ///  此上下文的键/值对的字典。
    ///</returns>
    property Items: DDN.mscorlib.DNIDictionary<DDN.mscorlib.DNObject, DDN.mscorlib.DNObject> read get_Items;
    ///<summary>
    ///  获取验证服务容器。
    ///</summary>
    ///<returns>
    ///  验证服务容器。
    ///</returns>
    property ServiceContainer: DDN.System.DNIServiceContainer read get_ServiceContainer;
  end;

  TDNValidationContext = class(TDNGenericImport<DNValidationContextClass, DNValidationContext>) end;

  //-------------namespace: System.ComponentModel.DataAnnotations----------------
  DNValidationResultClass = interface(DDN.mscorlib.DNObjectClass)
  ['{8DD53DA4-91F8-5992-B0E7-0B95CA1D9537}']
  { constructors } 

    ///<summary>
    ///  新实例初始化 <see cref="T:System.ComponentModel.DataAnnotations.ValidationResult" />
    ///  类通过使用一条错误消息。
    ///</summary>
    ///  <param name="errorMessage">
    ///  错误消息。
    ///</param>
    {class} function init(errorMessage: string): DNValidationResult; overload;
    {class} function init(errorMessage: string; memberNames: DDN.mscorlib.DNIEnumerable<string>): DNValidationResult; overload;

  { static fields getter & setter } 

   function __fakeFieldGet_Success: DNValidationResult;

  { static fields } 

    ///<summary>
    ///  表示验证成功 (<see langword="true" />
    ///  如果验证成功，否则为 <see langword="false" />
    ///  )。
    ///</summary>
    {class} property Success: DNValidationResult read __fakeFieldGet_Success;

  end;

  ///<summary>
  ///  表示验证请求的结果的容器。
  ///</summary>
  [DNTypeName('System.ComponentModel.DataAnnotations.ValidationResult')]
  DNValidationResult = interface(DDN.mscorlib.DNObject)
  ['{72A73F37-E362-3D31-ADF1-0DEF7F66164F}']
  { getters & setters } 

    function get_MemberNames: DDN.mscorlib.DNIEnumerable<string>;
    function get_ErrorMessage: string;
    procedure set_ErrorMessage(value: string);

  { methods } 

    ///<summary>
    ///  返回的字符串表示形式的当前验证结果。
    ///</summary>
    ///<returns>
    ///  当前的验证结果。
    ///</returns>
    function ToString: string;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    ///<summary>
    ///  获取指示具有验证错误的字段的成员名称的集合。
    ///</summary>
    ///<returns>
    ///  指示哪些字段有验证错误的成员名称的集合。
    ///</returns>
    property MemberNames: DDN.mscorlib.DNIEnumerable<string> read get_MemberNames;
    ///<summary>
    ///  获取验证错误消息。
    ///</summary>
    ///<returns>
    ///  验证错误消息。
    ///</returns>
    property ErrorMessage: string read get_ErrorMessage write set_ErrorMessage;
  end;

  TDNValidationResult = class(TDNGenericImport<DNValidationResultClass, DNValidationResult>) end;

  //-------------namespace: System.ComponentModel.DataAnnotations----------------
  DNValidatorClass = interface(DDN.mscorlib.DNObjectClass)
  ['{7F0B6EE4-CD62-564C-8F74-0C66769094B2}']
  { static methods } 

    {class} function TryValidateProperty(value: DDN.mscorlib.DNObject; validationContext: DNValidationContext; validationResults: DDN.mscorlib.DNICollection<DNValidationResult>): Boolean;
    {class} function TryValidateObject(instance: DDN.mscorlib.DNObject; validationContext: DNValidationContext; validationResults: DDN.mscorlib.DNICollection<DNValidationResult>): Boolean; overload;
    {class} function TryValidateObject(instance: DDN.mscorlib.DNObject; validationContext: DNValidationContext; validationResults: DDN.mscorlib.DNICollection<DNValidationResult>; validateAllProperties: Boolean): Boolean; overload;
    {class} function TryValidateValue(value: DDN.mscorlib.DNObject; validationContext: DNValidationContext; validationResults: DDN.mscorlib.DNICollection<DNValidationResult>; validationAttributes: DDN.mscorlib.DNIEnumerable<DNValidationAttribute>): Boolean;
    ///<summary>
    ///  确定指定的对象是否为有效使用验证上下文。
    ///</summary>
    ///  <param name="instance">
    ///  要验证的对象。
    ///</param>
    ///  <param name="validationContext">
    ///  用于描述要验证的对象的上下文。
    ///</param>
    ///<exception cref="T:System.ComponentModel.DataAnnotations.ValidationException">
    ///  对象不是有效的。
    ///</exception><exception cref="T:System.ArgumentNullException"><paramref name="instance" />
    ///  为 <see langword="null" />
    ///  。
    ///</exception>
    {class} procedure ValidateObject(instance: DDN.mscorlib.DNObject; validationContext: DNValidationContext); overload;
    ///<summary>
    ///  验证属性。
    ///</summary>
    ///  <param name="value">
    ///  要验证的值。
    ///</param>
    ///  <param name="validationContext">
    ///  用于描述要验证的属性的上下文。
    ///</param>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="value" />
    ///  不能分配给属性。
    ///</exception><exception cref="T:System.ComponentModel.DataAnnotations.ValidationException"><paramref name="value" />
    ///  参数无效。
    ///</exception>
    {class} procedure ValidateProperty(value: DDN.mscorlib.DNObject; validationContext: DNValidationContext);
    ///<summary>
    ///  确定指定的对象是否为有效使用验证上下文和指定是否要验证的所有属性的值。
    ///</summary>
    ///  <param name="instance">
    ///  要验证的对象。
    ///</param>
    ///  <param name="validationContext">
    ///  用于描述要验证的对象的上下文。
    ///</param>
    ///  <param name="validateAllProperties"><see langword="true" />
    ///  若要验证所有属性;否则为 <see langword="false" />
    ///  。
    ///</param>
    ///<exception cref="T:System.ComponentModel.DataAnnotations.ValidationException"><paramref name="instance" />
    ///  无效。
    ///</exception><exception cref="T:System.ArgumentNullException"><paramref name="instance" />
    ///  为 <see langword="null" />
    ///  。
    ///</exception>
    {class} procedure ValidateObject(instance: DDN.mscorlib.DNObject; validationContext: DNValidationContext; validateAllProperties: Boolean); overload;
    {class} procedure ValidateValue(value: DDN.mscorlib.DNObject; validationContext: DNValidationContext; validationAttributes: DDN.mscorlib.DNIEnumerable<DNValidationAttribute>);

  end;

  ///<summary>
  ///  定义用于验证对象、 属性和方法时包含一个帮助器类中其关联 <see cref="T:System.ComponentModel.DataAnnotations.ValidationAttribute" />
  ///  属性。
  ///</summary>
  [DNTypeName('System.ComponentModel.DataAnnotations.Validator')]
  DNValidator = interface(DDN.mscorlib.DNObject)
  ['{49F0947B-ECC6-33A2-9F41-22175AA1DB20}']
  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNValidator = class(TDNGenericImport<DNValidatorClass, DNValidator>) end;

  //-------------namespace: System.ComponentModel.DataAnnotations----------------
  DNAssociatedMetadataTypeTypeDescriptionProviderClass = interface(DNObjectClass)
  ['{F1D3B7D7-28D5-5C29-93C0-AC88B7ECA91F}']
  { constructors } 

    ///<summary>
    ///  新实例初始化 <see cref="T:System.ComponentModel.DataAnnotations.AssociatedMetadataTypeTypeDescriptionProvider" />
    ///  类通过使用指定的类型。
    ///</summary>
    ///  <param name="type">
    ///  为其创建元数据提供程序的类型。
    ///</param>
    {class} function init(&type: DDN.mscorlib.DNType): DNAssociatedMetadataTypeTypeDescriptionProvider; overload;
    ///<summary>
    ///  使用指定的元数据提供程序类型和关联类型初始化 <see cref="T:System.ComponentModel.DataAnnotations.AssociatedMetadataTypeTypeDescriptionProvider" />
    ///  类的新实例。
    ///</summary>
    ///  <param name="type">
    ///  要为其创建元数据提供程序的类型。
    ///</param>
    ///  <param name="associatedMetadataType">
    ///  包含元数据的关联类型。
    ///</param>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="associatedMetadataType" />
    ///  的值为 <see langword="null" />
    ///  。
    ///</exception>
    {class} function init(&type: DDN.mscorlib.DNType; associatedMetadataType: DDN.mscorlib.DNType): DNAssociatedMetadataTypeTypeDescriptionProvider; overload;

  end;

  ///<summary>
  ///  通过添加属性和关联的类中定义的属性信息扩展类的元数据信息。
  ///</summary>
  [DNTypeName('System.ComponentModel.DataAnnotations.AssociatedMetadataTypeTypeDescriptionProvider')]
  DNAssociatedMetadataTypeTypeDescriptionProvider = interface(DNObject)
  ['{C33A37F1-AA37-38E9-BADF-AC552B06A2A0}']
  { methods } 

    ///<summary>
    ///  获取指定的类型和对象的类型说明符。
    ///</summary>
    ///  <param name="objectType">
    ///  要检索的类型描述符的对象类型。
    ///</param>
    ///  <param name="instance">
    ///  类型的实例。
    ///</param>
    ///<returns>
    ///  元数据的类型提供的描述符。
    ///</returns>
    function GetTypeDescriptor(objectType: DDN.mscorlib.DNType; instance: DDN.mscorlib.DNObject): DDN.System.DNICustomTypeDescriptor; overload;
    function GetExtendedTypeDescriptor(instance: DDN.mscorlib.DNObject): DDN.System.DNICustomTypeDescriptor;
    function CreateInstance(provider: DDN.mscorlib.DNIServiceProvider; objectType: DDN.mscorlib.DNType; argTypes: TArray<DDN.mscorlib.DNType>; args: TArray<DDN.mscorlib.DNObject>): DDN.mscorlib.DNObject;
    function GetCache(instance: DDN.mscorlib.DNObject): DDN.mscorlib.DNIDictionary;
    function GetFullComponentName(component: DDN.mscorlib.DNObject): string;
    function GetReflectionType(objectType: DDN.mscorlib.DNType): DDN.mscorlib.DNType; overload;
    function GetReflectionType(instance: DDN.mscorlib.DNObject): DDN.mscorlib.DNType; overload;
    function GetReflectionType(objectType: DDN.mscorlib.DNType; instance: DDN.mscorlib.DNObject): DDN.mscorlib.DNType; overload;
    function GetRuntimeType(reflectionType: DDN.mscorlib.DNType): DDN.mscorlib.DNType;
    function GetTypeDescriptor(objectType: DDN.mscorlib.DNType): DDN.System.DNICustomTypeDescriptor; overload;
    function GetTypeDescriptor(instance: DDN.mscorlib.DNObject): DDN.System.DNICustomTypeDescriptor; overload;
    function IsSupportedType(&type: DDN.mscorlib.DNType): Boolean;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNAssociatedMetadataTypeTypeDescriptionProvider = class(TDNGenericImport<DNAssociatedMetadataTypeTypeDescriptionProviderClass, DNAssociatedMetadataTypeTypeDescriptionProvider>) end;

  //-------------namespace: System.ComponentModel.DataAnnotations----------------
  DNValidationExceptionClass = interface(DDN.mscorlib.DNExceptionClass)
  ['{7F4AC8F4-8913-5E6E-B3DB-840018483359}']
  { constructors } 

    ///<summary>
    ///  新实例初始化 <see cref="T:System.ComponentModel.DataAnnotations.ValidationException" />
    ///  类通过使用验证结果、 验证特性和当前异常的值。
    ///</summary>
    ///  <param name="validationResult">
    ///  验证结果的列表。
    ///</param>
    ///  <param name="validatingAttribute">
    ///  导致当前异常的属性。
    ///</param>
    ///  <param name="value">
    ///  导致要触发验证错误的属性的对象的值。
    ///</param>
    {class} function init(validationResult: DNValidationResult; validatingAttribute: DNValidationAttribute; value: DDN.mscorlib.DNObject): DNValidationException; overload;
    ///<summary>
    ///  新实例初始化 <see cref="T:System.ComponentModel.DataAnnotations.ValidationException" />
    ///  类使用指定的错误消息、 验证特性和当前异常的值。
    ///</summary>
    ///  <param name="errorMessage">
    ///  用于说明错误的消息。
    ///</param>
    ///  <param name="validatingAttribute">
    ///  导致当前异常的属性。
    ///</param>
    ///  <param name="value">
    ///  导致要触发验证错误的属性的对象的值。
    ///</param>
    {class} function init(errorMessage: string; validatingAttribute: DNValidationAttribute; value: DDN.mscorlib.DNObject): DNValidationException; overload;
    ///<summary>
    ///  新实例初始化 <see cref="T:System.ComponentModel.DataAnnotations.ValidationException" />
    ///  类使用由系统生成的错误消息。
    ///</summary>
    {class} function init: DNValidationException; overload;
    ///<summary>
    ///  新实例初始化 <see cref="T:System.ComponentModel.DataAnnotations.ValidationException" />
    ///  类使用指定的错误消息。
    ///</summary>
    ///  <param name="message">
    ///  指定的说明错误的消息。
    ///</param>
    {class} function init(message: string): DNValidationException; overload;
    ///<summary>
    ///  初始化的新实例 <see cref="T:System.ComponentModel.DataAnnotations.ValidationException" />
    ///  类使用指定的错误消息和内部异常实例的集合。
    ///</summary>
    ///  <param name="message">
    ///  错误消息。
    ///</param>
    ///  <param name="innerException">
    ///  验证异常的集合。
    ///</param>
    {class} function init(message: string; innerException: DDN.mscorlib.DNException): DNValidationException; overload;

  end;

  ///<summary>
  ///  表示数据的验证过程中发生的异常字段时<see cref="T:System.ComponentModel.DataAnnotations.ValidationAttribute" />
  ///  使用类。
  ///</summary>
  [DNTypeName('System.ComponentModel.DataAnnotations.ValidationException')]
  DNValidationException = interface(DDN.mscorlib.DNException)
  ['{A2933A3B-7254-365F-A30F-EE4A120245EA}']
  { getters & setters } 

    function get_ValidationAttribute: DNValidationAttribute;
    function get_ValidationResult: DNValidationResult;
    function get_Value: DDN.mscorlib.DNObject;
    function get_Message: string;
    function get_Data: DDN.mscorlib.DNIDictionary;
    function get_InnerException: DDN.mscorlib.DNException;
    function get_TargetSite: DDN.mscorlib.DNMethodBase;
    function get_StackTrace: string;
    function get_HelpLink: string;
    procedure set_HelpLink(value: string);
    function get_Source: string;
    procedure set_Source(value: string);
    function get_HResult: Int32;

  { methods } 

    function GetBaseException: DDN.mscorlib.DNException;
    function ToString: string;
    procedure GetObjectData(info: DDN.mscorlib.DNSerializationInfo; context: DDN.mscorlib.DNStreamingContext);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    ///<summary>
    ///  获取实例 <see cref="T:System.ComponentModel.DataAnnotations.ValidationAttribute" />
    ///  引发此异常的类。
    ///</summary>
    ///<returns>
    ///  引发此异常的验证特性类型的实例。
    ///</returns>
    property ValidationAttribute: DNValidationAttribute read get_ValidationAttribute;
    ///<summary>
    ///  获取 <see cref="P:System.ComponentModel.DataAnnotations.ValidationException.ValidationResult" />
    ///  描述验证错误的实例。
    ///</summary>
    ///<returns><see cref="P:System.ComponentModel.DataAnnotations.ValidationException.ValidationResult" />
    ///  描述验证错误的实例。
    ///</returns>
    property ValidationResult: DNValidationResult read get_ValidationResult;
    ///<summary>
    ///  获取导致的对象的值 <see cref="T:System.ComponentModel.DataAnnotations.ValidationAttribute" />
    ///  类来触发此异常。
    ///</summary>
    ///<returns>
    ///  导致的对象的值 <see cref="T:System.ComponentModel.DataAnnotations.ValidationAttribute" />
    ///  类来触发验证错误。
    ///</returns>
    property Value: DDN.mscorlib.DNObject read get_Value;
    property Message: string read get_Message;
    property Data: DDN.mscorlib.DNIDictionary read get_Data;
    property InnerException: DDN.mscorlib.DNException read get_InnerException;
    property TargetSite: DDN.mscorlib.DNMethodBase read get_TargetSite;
    property StackTrace: string read get_StackTrace;
    property HelpLink: string read get_HelpLink write set_HelpLink;
    property Source: string read get_Source write set_Source;
    property HResult: Int32 read get_HResult;
  end;

  TDNValidationException = class(TDNGenericImport<DNValidationExceptionClass, DNValidationException>) end;


implementation


initialization
  LoadAssemblyModule('System.ComponentModel.DataAnnotations.dll', True);

finalization

end.
