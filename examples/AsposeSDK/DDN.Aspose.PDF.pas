//----------------------------------------------------------------------------
//  Aspose.PDF.dll: Aspose.PDF, Version=21.6.0.0, Culture=neutral, PublicKeyToken=f0262d67fe233d63
//----------------------------------------------------------------------------
//  The code is automatically generated by the GenCodeNET tool.
//----------------------------------------------------------------------------
//  .NET Framework: 4.0
//----------------------------------------------------------------------------
//  UnitName: DDN.Aspose.PDF
//  Author: ying32
//----------------------------------------------------------------------------

unit DDN.Aspose.PDF;

{$IFDEF FPC}
  {$mode delphi}//{$H+}
  {$modeswitch advancedrecords}
  {$modeswitch prefixedattributes} // Custom attributes featureï¼Œfpc3.2.2+
{$ENDIF}

interface

uses
  DDN.Runtime,
  DDN.mscorlib,
  DDN.System.Drawing,
  DDN.System.Xml,
  DDN.System.Data,
  DDN.System.Web,
  DDN.System;

type

{ enums }

  //-------------namespace: Aspose.Pdf----------------
  [DNTypeName('Aspose.Pdf.AFRelationship')]
  DNAFRelationship = type Integer;
  DNAFRelationshipHelper = record helper for DNAFRelationship
  public const
    Source = 0;
    Data = 1;
    Alternative = 2;
    Supplement = 3;
    Unspecified = 4;
    EncryptedPayload = 5;
    None = 6;
  end;


  //-------------namespace: Aspose.Pdf.Annotations----------------
  [DNTypeName('Aspose.Pdf.Annotations.AnnotationFlags')]
  DNAnnotationFlags = type Integer;
  DNAnnotationFlagsHelper = record helper for DNAnnotationFlags
  public const
    Default_ = 0;
    Invisible = 1;
    Hidden = 2;
    Print = 4;
    NoZoom = 8;
    NoRotate = 16;
    NoView = 32;
    ReadOnly = 64;
    Locked = 128;
    ToggleNoView = 256;
    LockedContents = 512;
  end;


  //-------------namespace: Aspose.Pdf.Annotations----------------
  [DNTypeName('Aspose.Pdf.Annotations.AnnotationState')]
  DNAnnotationState = type Integer;
  DNAnnotationStateHelper = record helper for DNAnnotationState
  public const
    Undefined = 0;
    Marked = 1;
    Unmarked = 2;
    Accepted = 3;
    Rejected = 4;
    Cancelled = 5;
    Completed = 6;
    None = 7;
  end;


  //-------------namespace: Aspose.Pdf.Annotations----------------
  [DNTypeName('Aspose.Pdf.Annotations.AnnotationStateModel')]
  DNAnnotationStateModel = type Integer;
  DNAnnotationStateModelHelper = record helper for DNAnnotationStateModel
  public const
    Undefined = 0;
    Marked = 1;
    Review = 2;
  end;


  //-------------namespace: Aspose.Pdf.Annotations----------------
  [DNTypeName('Aspose.Pdf.Annotations.AnnotationType')]
  DNAnnotationType = type Integer;
  DNAnnotationTypeHelper = record helper for DNAnnotationType
  public const
    Text = 0;
    Circle = 1;
    Polygon = 2;
    PolyLine = 3;
    Line = 4;
    Square = 5;
    FreeText = 6;
    Highlight = 7;
    Underline = 8;
    Squiggly = 9;
    StrikeOut = 10;
    Caret = 11;
    Ink = 12;
    Link = 13;
    Popup = 14;
    FileAttachment = 15;
    Sound = 16;
    Movie = 17;
    Screen = 18;
    Widget = 19;
    Watermark = 20;
    TrapNet = 21;
    PrinterMark = 22;
    Redaction = 23;
    Stamp = 24;
    RichMedia = 25;
    Unknown = 26;
    PDF3D = 27;
  end;


  //-------------namespace: Aspose.Pdf.Annotations----------------
  [DNTypeName('Aspose.Pdf.Annotations.BorderEffect')]
  DNBorderEffect = type Integer;
  DNBorderEffectHelper = record helper for DNBorderEffect
  public const
    None = 0;
    Cloudy = 1;
  end;


  //-------------namespace: Aspose.Pdf.Annotations----------------
  [DNTypeName('Aspose.Pdf.Annotations.BorderStyle')]
  DNBorderStyle = type Integer;
  DNBorderStyleHelper = record helper for DNBorderStyle
  public const
    Solid = 0;
    Dashed = 1;
    Beveled = 2;
    Inset = 3;
    Underline = 4;
  end;


  //-------------namespace: Aspose.Pdf.Annotations----------------
  [DNTypeName('Aspose.Pdf.Annotations.CapStyle')]
  DNCapStyle = type Integer;
  DNCapStyleHelper = record helper for DNCapStyle
  public const
    Rectangular = 1;
    Rounded = 2;
  end;


  //-------------namespace: Aspose.Pdf.Annotations----------------
  [DNTypeName('Aspose.Pdf.Annotations.CaptionPosition')]
  DNCaptionPosition = type Integer;
  DNCaptionPositionHelper = record helper for DNCaptionPosition
  public const
    Inline_ = 0;
    Top = 1;
  end;


  //-------------namespace: Aspose.Pdf.Annotations----------------
  [DNTypeName('Aspose.Pdf.Annotations.CaretSymbol')]
  DNCaretSymbol = type Integer;
  DNCaretSymbolHelper = record helper for DNCaretSymbol
  public const
    None = 0;
    Paragraph = 1;
  end;


  //-------------namespace: Aspose.Pdf.Annotations----------------
  [DNTypeName('Aspose.Pdf.Annotations.ExplicitDestinationType')]
  DNExplicitDestinationType = type Integer;
  DNExplicitDestinationTypeHelper = record helper for DNExplicitDestinationType
  public const
    XYZ = 0;
    Fit = 1;
    FitH = 2;
    FitV = 3;
    FitR = 4;
    FitB = 5;
    FitBH = 6;
    FitBV = 7;
  end;


  //-------------namespace: Aspose.Pdf.Annotations----------------
  [DNTypeName('Aspose.Pdf.Annotations.FileIcon')]
  DNFileIcon = type Integer;
  DNFileIconHelper = record helper for DNFileIcon
  public const
    PushPin = 0;
    Graph = 1;
    Paperclip = 2;
    Tag = 3;
  end;


  //-------------namespace: Aspose.Pdf.Annotations----------------
  [DNTypeName('Aspose.Pdf.Annotations.FreeTextIntent')]
  DNFreeTextIntent = type Integer;
  DNFreeTextIntentHelper = record helper for DNFreeTextIntent
  public const
    Undefined = 0;
    FreeTextCallout = 1;
    FreeTextTypeWriter = 2;
  end;


  //-------------namespace: Aspose.Pdf.Annotations----------------
  [DNTypeName('Aspose.Pdf.Annotations.HighlightingMode')]
  DNHighlightingMode = type Integer;
  DNHighlightingModeHelper = record helper for DNHighlightingMode
  public const
    None = 0;
    Invert = 1;
    Outline = 2;
    Push = 3;
    Toggle = 4;
  end;


  //-------------namespace: Aspose.Pdf.Annotations----------------
  [DNTypeName('Aspose.Pdf.Annotations.Justification')]
  DNJustification = type Integer;
  DNJustificationHelper = record helper for DNJustification
  public const
    Left = 0;
    Center = 1;
    Right = 2;
  end;


  //-------------namespace: Aspose.Pdf.Annotations----------------
  [DNTypeName('Aspose.Pdf.Annotations.LaunchActionOperation')]
  DNLaunchActionOperation = type Integer;
  DNLaunchActionOperationHelper = record helper for DNLaunchActionOperation
  public const
    Undefined = 0;
    Open = 1;
    Print = 2;
  end;


  //-------------namespace: Aspose.Pdf.Annotations----------------
  [DNTypeName('Aspose.Pdf.Annotations.LightingSchemeType')]
  DNLightingSchemeType = type Integer;
  DNLightingSchemeTypeHelper = record helper for DNLightingSchemeType
  public const
    Artwork = 0;
    None = 1;
    White = 2;
    Day = 3;
    Night = 4;
    Hard = 5;
    Primary = 6;
    Blue = 7;
    Red = 8;
    Cube = 9;
    CAD = 10;
    Headlamp = 11;
  end;


  //-------------namespace: Aspose.Pdf.Annotations----------------
  [DNTypeName('Aspose.Pdf.Annotations.LineEnding')]
  DNLineEnding = type Integer;
  DNLineEndingHelper = record helper for DNLineEnding
  public const
    None = 0;
    Square = 1;
    Circle = 2;
    Diamond = 3;
    OpenArrow = 4;
    ClosedArrow = 5;
    Butt = 6;
    ROpenArrow = 7;
    RClosedArrow = 8;
    Slash = 9;
  end;


  //-------------namespace: Aspose.Pdf.Annotations----------------
  [DNTypeName('Aspose.Pdf.Annotations.LineIntent')]
  DNLineIntent = type Integer;
  DNLineIntentHelper = record helper for DNLineIntent
  public const
    Undefined = 0;
    LineArrow = 1;
    LineDimension = 2;
  end;


  //-------------namespace: Aspose.Pdf.Annotations----------------
  [DNTypeName('Aspose.Pdf.Annotations.Measure+NumberFormat+FractionStyle')]
  DNMeasure_NumberFormat_FractionStyle = type Integer;
  DNMeasure_NumberFormat_FractionStyleHelper = record helper for DNMeasure_NumberFormat_FractionStyle
  public const
    ShowAsDecimal = 0;
    ShowAsFraction = 1;
    Round = 2;
    Truncate = 3;
  end;


  //-------------namespace: Aspose.Pdf.Annotations----------------
  [DNTypeName('Aspose.Pdf.Annotations.PDF3DActivation')]
  DNPDF3DActivation = type Integer;
  DNPDF3DActivationHelper = record helper for DNPDF3DActivation
  public const
    activeWhenOpen = 0;
    activeWhenVisible = 1;
    activatedUserOrScriptAction = 2;
  end;


  //-------------namespace: Aspose.Pdf.Annotations----------------
  [DNTypeName('Aspose.Pdf.Annotations.PolyIntent')]
  DNPolyIntent = type Integer;
  DNPolyIntentHelper = record helper for DNPolyIntent
  public const
    Undefined = 0;
    PolygonCloud = 1;
    PolyLineDimension = 2;
    PolygonDimension = 3;
  end;


  //-------------namespace: Aspose.Pdf.Annotations----------------
  [DNTypeName('Aspose.Pdf.Annotations.PredefinedAction')]
  DNPredefinedAction = type Integer;
  DNPredefinedActionHelper = record helper for DNPredefinedAction
  public const
    FirstPage = 0;
    LastPage = 1;
    NextPage = 2;
    PrevPage = 3;
    PrintDialog = 4;
    Print = 5;
    Bookmarks_ExpanCurrentBookmark = 6;
    Bookmarks_HightlightCurrentBookmark = 7;
    Document_AttachFile = 8;
    Document_CropPages = 9;
    Document_DeletePages = 10;
    Document_ExtractPages = 11;
    Document_InsertPages = 12;
    Document_ReplacePages = 13;
    Document_RotatePages = 14;
    Edit_CheckSpelling_InComFieldEdit = 15;
    Edit_Find = 16;
    Edit_Preferences = 17;
    Edit_Search = 18;
    File_AttachToEmail = 19;
    File_Close = 20;
    File_CreatePDF_FromScanner = 21;
    File_CreatePDF_FromWebPage = 22;
    File_Exit = 23;
    File_Organizer_OpenOrganizer = 24;
    File_Print = 25;
    File_Properties = 26;
    File_SaveAs = 27;
    Miscellaneous_ZoomIn = 28;
    Miscellaneous_ZoomOut = 29;
    PageImages_PrintPages = 30;
    View_GoTo_NextView = 31;
    View_GoTo_Page = 32;
    View_GoTo_PreDocument = 33;
    View_GoTo_PreView = 34;
    View_NavigationPanels_Articles = 35;
    View_NavigationPanels_Attachments = 36;
    View_NavigationPanels_Boomarks = 37;
    View_NavigationPanels_Comments = 38;
    View_NavigationPanels_Fields = 39;
    View_NavigationPanels_Layers = 40;
    View_NavigationPanels_ModelTree = 41;
    View_NavigationPanels_Pages = 42;
    View_NavigationPanels_Signatures = 43;
    View_PageDisplay_SinglePage = 44;
    View_PageDisplay_SinglePageContinuous = 45;
    View_PageDisplay_TwoUp = 46;
    View_PageDisplay_TwoUpContinuous = 47;
    View_Toolbars_AdvanceEditing = 48;
    View_Toolbars_CommentMarkup = 49;
    View_Toolbars_Edit = 50;
    View_Toolbars_File = 51;
    View_Toolbars_Find = 52;
    View_Toolbars_Forms = 53;
    View_Toolbars_Measuring = 54;
    View_Toolbars_ObjectData = 55;
    View_Toolbars_PageDisplay = 56;
    View_Toolbars_PageNavigation = 57;
    View_Toolbars_PrintProduction = 58;
    View_Toolbars_PropertiesBar = 59;
    View_Toolbars_Redaction = 60;
    View_Toolbars_SelectZoom = 61;
    View_Toolbars_Tasks = 62;
    View_Toolbars_Typewriter = 63;
    View_Zoom_ActualSize = 64;
    View_Zoom_FitHeight = 65;
    View_Zoom_FitPage = 66;
    View_Zoom_FitVisible = 67;
    View_Zoom_FitWidth = 68;
    View_Zoom_ZoomTo = 69;
    Window_FullScreenMode = 70;
  end;


  //-------------namespace: Aspose.Pdf.Annotations----------------
  [DNTypeName('Aspose.Pdf.Annotations.RenderModeType')]
  DNRenderModeType = type Integer;
  DNRenderModeTypeHelper = record helper for DNRenderModeType
  public const
    Solid = 0;
    SolidWireframe = 1;
    Transparent = 2;
    TransparentWareFrame = 3;
    BoundingBox = 4;
    TransparentBoundingBox = 5;
    TransparentBoundingBoxOutline = 6;
    Wireframe = 7;
    ShadedWireframe = 8;
    Vertices = 9;
    ShadedVertices = 10;
    Illustration = 11;
    SolidOutline = 12;
    ShadedIllustration = 13;
  end;


  //-------------namespace: Aspose.Pdf.Annotations----------------
  [DNTypeName('Aspose.Pdf.Annotations.RenditionOperation')]
  DNRenditionOperation = type Integer;
  DNRenditionOperationHelper = record helper for DNRenditionOperation
  public const
    PlayStop = 0;
    Stop = 1;
    Pause = 2;
    Resume = 3;
    PlayResume = 4;
    Undefined = -1;
  end;


  //-------------namespace: Aspose.Pdf.Annotations----------------
  [DNTypeName('Aspose.Pdf.Annotations.RenditionType')]
  DNRenditionType = type Integer;
  DNRenditionTypeHelper = record helper for DNRenditionType
  public const
    Media = 0;
    Selector = 1;
    Undefined = 2;
  end;


  //-------------namespace: Aspose.Pdf.Annotations----------------
  [DNTypeName('Aspose.Pdf.Annotations.ReplyType')]
  DNReplyType = type Integer;
  DNReplyTypeHelper = record helper for DNReplyType
  public const
    Undefined = 0;
    Reply = 1;
    Group = 2;
  end;


  //-------------namespace: Aspose.Pdf.Annotations----------------
  [DNTypeName('Aspose.Pdf.Annotations.RichMediaAnnotation+ActivationEvent')]
  DNRichMediaAnnotation_ActivationEvent = type Integer;
  DNRichMediaAnnotation_ActivationEventHelper = record helper for DNRichMediaAnnotation_ActivationEvent
  public const
    Click = 0;
    PageOpen = 1;
    PageVisible = 2;
  end;


  //-------------namespace: Aspose.Pdf.Annotations----------------
  [DNTypeName('Aspose.Pdf.Annotations.RichMediaAnnotation+ContentType')]
  DNRichMediaAnnotation_ContentType = type Integer;
  DNRichMediaAnnotation_ContentTypeHelper = record helper for DNRichMediaAnnotation_ContentType
  public const
    Audio = 0;
    Video = 1;
    Unknown = 2;
  end;


  //-------------namespace: Aspose.Pdf.Annotations----------------
  [DNTypeName('Aspose.Pdf.Annotations.SoundEncoding')]
  DNSoundEncoding = type Integer;
  DNSoundEncodingHelper = record helper for DNSoundEncoding
  public const
    Raw = 0;
    Signed = 1;
    MuLaw = 2;
    ALaw = 3;
  end;


  //-------------namespace: Aspose.Pdf.Annotations----------------
  [DNTypeName('Aspose.Pdf.Annotations.SoundIcon')]
  DNSoundIcon = type Integer;
  DNSoundIconHelper = record helper for DNSoundIcon
  public const
    Speaker = 0;
    Mic = 1;
  end;


  //-------------namespace: Aspose.Pdf.Annotations----------------
  [DNTypeName('Aspose.Pdf.Annotations.SoundSampleDataEncodingFormat')]
  DNSoundSampleDataEncodingFormat = type Integer;
  DNSoundSampleDataEncodingFormatHelper = record helper for DNSoundSampleDataEncodingFormat
  public const
    Raw = 0;
    Signed = 1;
    muLaw = 2;
    ALaw = 3;
  end;


  //-------------namespace: Aspose.Pdf.Annotations----------------
  [DNTypeName('Aspose.Pdf.Annotations.StampIcon')]
  DNStampIcon = type Integer;
  DNStampIconHelper = record helper for DNStampIcon
  public const
    Draft = 0;
    Approved = 1;
    Experimental = 2;
    NotApproved = 3;
    AsIs = 4;
    Expired = 5;
    NotForPublicRelease = 6;
    Confidential = 7;
    Final_ = 8;
    Sold = 9;
    Departmental = 10;
    ForComment = 11;
    ForPublicRelease = 12;
    TopSecret = 13;
  end;


  //-------------namespace: Aspose.Pdf.Annotations----------------
  [DNTypeName('Aspose.Pdf.Annotations.TextAlignment')]
  DNTextAlignment = type Integer;
  DNTextAlignmentHelper = record helper for DNTextAlignment
  public const
    Left = 0;
    Center = 1;
    Right = 2;
  end;


  //-------------namespace: Aspose.Pdf.Annotations----------------
  [DNTypeName('Aspose.Pdf.Annotations.TextIcon')]
  DNTextIcon = type Integer;
  DNTextIconHelper = record helper for DNTextIcon
  public const
    Note = 0;
    Comment = 1;
    Key = 2;
    Help = 3;
    NewParagraph = 4;
    Paragraph = 5;
    Insert = 6;
    Check = 7;
    Cross = 8;
    Circle = 9;
    Star = 10;
  end;


  //-------------namespace: Aspose.Pdf----------------
  [DNTypeName('Aspose.Pdf.Artifact+ArtifactSubtype')]
  DNArtifact_ArtifactSubtype = type Integer;
  DNArtifact_ArtifactSubtypeHelper = record helper for DNArtifact_ArtifactSubtype
  public const
    Header = 0;
    Footer = 1;
    Watermark = 2;
    Background = 3;
    Undefined = 4;
  end;


  //-------------namespace: Aspose.Pdf----------------
  [DNTypeName('Aspose.Pdf.Artifact+ArtifactType')]
  DNArtifact_ArtifactType = type Integer;
  DNArtifact_ArtifactTypeHelper = record helper for DNArtifact_ArtifactType
  public const
    Pagination = 0;
    Layout = 1;
    Page = 2;
    Background = 3;
    Undefined = 4;
  end;


  //-------------namespace: Aspose.Pdf----------------
  [DNTypeName('Aspose.Pdf.BlendMode')]
  DNBlendMode = type Integer;
  DNBlendModeHelper = record helper for DNBlendMode
  public const
    Normal = 0;
    Multiply = 1;
    Screen = 2;
    Overlay = 3;
    Darken = 4;
    Lighten = 5;
    ColorDodge = 6;
    ColorBurn = 7;
    HardLight = 8;
    SoftLight = 9;
    Difference = 10;
    Exclusion = 11;
    Hue = 12;
    Saturation = 13;
    Color = 14;
    Luminosity = 15;
    Compatible = 16;
  end;


  //-------------namespace: Aspose.Pdf----------------
  [DNTypeName('Aspose.Pdf.BorderCornerStyle')]
  DNBorderCornerStyle = type Integer;
  DNBorderCornerStyleHelper = record helper for DNBorderCornerStyle
  public const
    None = 0;
    Round = 1;
  end;


  //-------------namespace: Aspose.Pdf----------------
  [DNTypeName('Aspose.Pdf.BorderSide')]
  DNBorderSide = type Integer;
  DNBorderSideHelper = record helper for DNBorderSide
  public const
    None = 0;
    Left = 1;
    Top = 2;
    Right = 4;
    Bottom = 8;
    All = 15;
    Box = 15;
  end;


  //-------------namespace: Aspose.Pdf----------------
  [DNTypeName('Aspose.Pdf.ColorSpace')]
  DNColorSpace = type Integer;
  DNColorSpaceHelper = record helper for DNColorSpace
  public const
    DeviceRGB = 0;
    DeviceCMYK = 1;
    DeviceGray = 2;
  end;


  //-------------namespace: Aspose.Pdf----------------
  [DNTypeName('Aspose.Pdf.ColorType')]
  DNColorType = type Integer;
  DNColorTypeHelper = record helper for DNColorType
  public const
    Rgb = 0;
    Grayscale = 1;
    BlackAndWhite = 2;
    Undefined = 3;
  end;


  //-------------namespace: Aspose.Pdf----------------
  [DNTypeName('Aspose.Pdf.ColumnAdjustment')]
  DNColumnAdjustment = type Integer;
  DNColumnAdjustmentHelper = record helper for DNColumnAdjustment
  public const
    Customized = 0;
    AutoFitToContent = 1;
    AutoFitToWindow = 2;
  end;


  //-------------namespace: Aspose.Pdf----------------
  [DNTypeName('Aspose.Pdf.ContentDisposition')]
  DNContentDisposition = type Integer;
  DNContentDispositionHelper = record helper for DNContentDisposition
  public const
    Inline_ = 0;
    Attachment = 1;
  end;


  //-------------namespace: Aspose.Pdf----------------
  [DNTypeName('Aspose.Pdf.ConvertErrorAction')]
  DNConvertErrorAction = type Integer;
  DNConvertErrorActionHelper = record helper for DNConvertErrorAction
  public const
    Delete = 0;
    None = 1;
  end;


  //-------------namespace: Aspose.Pdf----------------
  [DNTypeName('Aspose.Pdf.ConvertSoftMaskAction')]
  DNConvertSoftMaskAction = type Integer;
  DNConvertSoftMaskActionHelper = record helper for DNConvertSoftMaskAction
  public const
    Default_ = 0;
    ConvertToStencilMask = 1;
  end;


  //-------------namespace: Aspose.Pdf----------------
  [DNTypeName('Aspose.Pdf.ConvertTransparencyAction')]
  DNConvertTransparencyAction = type Integer;
  DNConvertTransparencyActionHelper = record helper for DNConvertTransparencyAction
  public const
    Default_ = 0;
    Mask = 1;
  end;


  //-------------namespace: Aspose.Pdf----------------
  [DNTypeName('Aspose.Pdf.CryptoAlgorithm')]
  DNCryptoAlgorithm = type Integer;
  DNCryptoAlgorithmHelper = record helper for DNCryptoAlgorithm
  public const
    RC4x40 = 0;
    RC4x128 = 1;
    AESx128 = 2;
    AESx256 = 3;
  end;


  //-------------namespace: Aspose.Pdf.Devices----------------
  [DNTypeName('Aspose.Pdf.Devices.ColorDepth')]
  DNColorDepth = type Integer;
  DNColorDepthHelper = record helper for DNColorDepth
  public const
    Default_ = 0;
    Format8bpp = 1;
    Format4bpp = 2;
    Format1bpp = 3;
  end;


  //-------------namespace: Aspose.Pdf.Devices----------------
  [DNTypeName('Aspose.Pdf.Devices.CompressionType')]
  DNCompressionType = type Integer;
  DNCompressionTypeHelper = record helper for DNCompressionType
  public const
    LZW = 0;
    CCITT4 = 1;
    CCITT3 = 2;
    RLE = 3;
    None = 4;
  end;


  //-------------namespace: Aspose.Pdf.Devices----------------
  [DNTypeName('Aspose.Pdf.Devices.FormPresentationMode')]
  DNFormPresentationMode = type Integer;
  DNFormPresentationModeHelper = record helper for DNFormPresentationMode
  public const
    Production = 0;
    Editor = 1;
  end;


  //-------------namespace: Aspose.Pdf.Devices----------------
  [DNTypeName('Aspose.Pdf.Devices.ShapeType')]
  DNShapeType = type Integer;
  DNShapeTypeHelper = record helper for DNShapeType
  public const
    None = 0;
    Landscape = 1;
    Portrait = 2;
  end;


  //-------------namespace: Aspose.Pdf----------------
  [DNTypeName('Aspose.Pdf.Direction')]
  DNDirection = type Integer;
  DNDirectionHelper = record helper for DNDirection
  public const
    L2R = 0;
    R2L = 1;
  end;


  //-------------namespace: Aspose.Pdf----------------
  [DNTypeName('Aspose.Pdf.DocSaveOptions+DocFormat')]
  DNDocSaveOptions_DocFormat = type Integer;
  DNDocSaveOptions_DocFormatHelper = record helper for DNDocSaveOptions_DocFormat
  public const
    Doc = 0;
    DocX = 1;
  end;


  //-------------namespace: Aspose.Pdf----------------
  [DNTypeName('Aspose.Pdf.DocSaveOptions+RecognitionMode')]
  DNDocSaveOptions_RecognitionMode = type Integer;
  DNDocSaveOptions_RecognitionModeHelper = record helper for DNDocSaveOptions_RecognitionMode
  public const
    Textbox = 0;
    Flow = 1;
    EnhancedFlow = 2;
  end;


  //-------------namespace: Aspose.Pdf.Drawing----------------
  [DNTypeName('Aspose.Pdf.Drawing.ImageFormat')]
  DNImageFormat = type Integer;
  DNImageFormatHelper = record helper for DNImageFormat
  public const
    Bmp = 0;
    Jpeg = 1;
    Gif = 2;
    Png = 3;
    Tiff = 4;
    Emf = 5;
  end;


  //-------------namespace: Aspose.Pdf----------------
  [DNTypeName('Aspose.Pdf.EpubSaveOptions+RecognitionMode')]
  DNEpubSaveOptions_RecognitionMode = type Integer;
  DNEpubSaveOptions_RecognitionModeHelper = record helper for DNEpubSaveOptions_RecognitionMode
  public const
    Flow = 0;
    PdfFlow = 1;
    Fixed = 2;
  end;


  //-------------namespace: Aspose.Pdf----------------
  [DNTypeName('Aspose.Pdf.ExcelSaveOptions+ConversionEngines')]
  DNExcelSaveOptions_ConversionEngines = type Integer;
  DNExcelSaveOptions_ConversionEnginesHelper = record helper for DNExcelSaveOptions_ConversionEngines
  public const
    LegacyEngine = 0;
    NewEngine = 1;
  end;


  //-------------namespace: Aspose.Pdf----------------
  [DNTypeName('Aspose.Pdf.ExcelSaveOptions+ExcelFormat')]
  DNExcelSaveOptions_ExcelFormat = type Integer;
  DNExcelSaveOptions_ExcelFormatHelper = record helper for DNExcelSaveOptions_ExcelFormat
  public const
    XMLSpreadSheet2003 = 0;
    XLSX = 1;
    CSV = 2;
    XLSM = 3;
    ODS = 4;
  end;


  //-------------namespace: Aspose.Pdf----------------
  [DNTypeName('Aspose.Pdf.ExtendedBoolean')]
  DNExtendedBoolean = type Integer;
  DNExtendedBooleanHelper = record helper for DNExtendedBoolean
  public const
    Undefined = 0;
    False = 1;
    True = 2;
  end;


  //-------------namespace: Aspose.Pdf----------------
  [DNTypeName('Aspose.Pdf.ExtractImageMode')]
  DNExtractImageMode = type Integer;
  DNExtractImageModeHelper = record helper for DNExtractImageMode
  public const
    DefinedInResources = 0;
    ActuallyUsed = 1;
  end;


  //-------------namespace: Aspose.Pdf.Facades----------------
  [DNTypeName('Aspose.Pdf.Facades.Algorithm')]
  DNAlgorithm = type Integer;
  DNAlgorithmHelper = record helper for DNAlgorithm
  public const
    RC4 = 0;
    AES = 1;
  end;


  //-------------namespace: Aspose.Pdf.Facades----------------
  [DNTypeName('Aspose.Pdf.Facades.AutoRotateMode')]
  DNAutoRotateMode = type Integer;
  DNAutoRotateModeHelper = record helper for DNAutoRotateMode
  public const
    None = 0;
    ClockWise = 1;
    AntiClockWise = 2;
  end;


  //-------------namespace: Aspose.Pdf.Facades----------------
  [DNTypeName('Aspose.Pdf.Facades.BlendingColorSpace')]
  DNBlendingColorSpace = type Integer;
  DNBlendingColorSpaceHelper = record helper for DNBlendingColorSpace
  public const
    DontChange = 0;
    Auto = 1;
    DeviceRGB = 2;
    DeviceCMYK = 3;
  end;


  //-------------namespace: Aspose.Pdf.Facades----------------
  [DNTypeName('Aspose.Pdf.Facades.DataType')]
  DNDataType = type Integer;
  DNDataTypeHelper = record helper for DNDataType
  public const
    FDF = 0;
    XML = 1;
    XFDF = 2;
    PDF = 3;
    OLEDB = 4;
    ODBC = 5;
  end;


  //-------------namespace: Aspose.Pdf.Facades----------------
  [DNTypeName('Aspose.Pdf.Facades.DefaultMetadataProperties')]
  DNDefaultMetadataProperties = type Integer;
  DNDefaultMetadataPropertiesHelper = record helper for DNDefaultMetadataProperties
  public const
    Advisory = 0;
    BaseURL = 1;
    CreateDate = 2;
    CreatorTool = 3;
    Identifier = 4;
    MetadataDate = 5;
    ModifyDate = 6;
    Nickname = 7;
    Thumbnails = 8;
  end;


  //-------------namespace: Aspose.Pdf.Facades----------------
  [DNTypeName('Aspose.Pdf.Facades.EncodingType')]
  DNEncodingType = type Integer;
  DNEncodingTypeHelper = record helper for DNEncodingType
  public const
    Identity_h = 0;
    Identity_v = 1;
    Cp1250 = 2;
    Cp1252 = 3;
    Cp1257 = 4;
    Winansi = 5;
    Macroman = 6;
  end;


  //-------------namespace: Aspose.Pdf.Facades----------------
  [DNTypeName('Aspose.Pdf.Facades.FieldType')]
  DNFieldType = type Integer;
  DNFieldTypeHelper = record helper for DNFieldType
  public const
    Text = 0;
    ComboBox = 1;
    ListBox = 2;
    Radio = 3;
    CheckBox = 4;
    PushButton = 5;
    MultiLineText = 6;
    Barcode = 7;
    InvalidNameOrType = 8;
    Signature = 9;
    Image = 10;
    Numeric = 11;
    DateTime = 12;
  end;


  //-------------namespace: Aspose.Pdf.Facades----------------
  [DNTypeName('Aspose.Pdf.Facades.FontStyle')]
  DNFontStyle = type Integer;
  DNFontStyleHelper = record helper for DNFontStyle
  public const
    Courier = 0;
    CourierBold = 1;
    CourierOblique = 2;
    CourierBoldOblique = 3;
    Helvetica = 4;
    HelveticaBold = 5;
    HelveticaOblique = 6;
    HelveticaBoldOblique = 7;
    Symbol = 8;
    TimesRoman = 9;
    TimesBold = 10;
    TimesItalic = 11;
    TimesBoldItalic = 12;
    ZapfDingbats = 13;
    Unknown = 14;
    CjkFont = 15;
  end;


  //-------------namespace: Aspose.Pdf.Facades----------------
  [DNTypeName('Aspose.Pdf.Facades.Form+ImportStatus')]
  DNForm_ImportStatus = type Integer;
  DNForm_ImportStatusHelper = record helper for DNForm_ImportStatus
  public const
    Success = 0;
    FieldNotFound = 1;
  end;


  //-------------namespace: Aspose.Pdf.Facades----------------
  [DNTypeName('Aspose.Pdf.Facades.ImageMergeMode')]
  DNImageMergeMode = type Integer;
  DNImageMergeModeHelper = record helper for DNImageMergeMode
  public const
    Vertical = 1;
    Horizontal = 2;
    Center = 3;
  end;


  //-------------namespace: Aspose.Pdf.Facades----------------
  [DNTypeName('Aspose.Pdf.Facades.KeySize')]
  DNKeySize = type Integer;
  DNKeySizeHelper = record helper for DNKeySize
  public const
    x40 = 0;
    x128 = 1;
    x256 = 2;
  end;


  //-------------namespace: Aspose.Pdf.Facades----------------
  [DNTypeName('Aspose.Pdf.Facades.PdfFileEditor+ConcatenateCorruptedFileAction')]
  DNPdfFileEditor_ConcatenateCorruptedFileAction = type Integer;
  DNPdfFileEditor_ConcatenateCorruptedFileActionHelper = record helper for DNPdfFileEditor_ConcatenateCorruptedFileAction
  public const
    StopWithError = 0;
    ConcatenateIgnoringCorrupted = 1;
    ConcatenateIgnoringCorruptedObjects = 2;
  end;


  //-------------namespace: Aspose.Pdf.Facades----------------
  [DNTypeName('Aspose.Pdf.Facades.PositioningMode')]
  DNPositioningMode = type Integer;
  DNPositioningModeHelper = record helper for DNPositioningMode
  public const
    Legacy = 0;
    ModernLineSpacing = 1;
    Current = 2;
  end;


  //-------------namespace: Aspose.Pdf.Facades----------------
  [DNTypeName('Aspose.Pdf.Facades.PropertyFlag')]
  DNPropertyFlag = type Integer;
  DNPropertyFlagHelper = record helper for DNPropertyFlag
  public const
    ReadOnly = 0;
    Required = 1;
    NoExport = 2;
    InvalidFlag = 3;
  end;


  //-------------namespace: Aspose.Pdf.Facades----------------
  [DNTypeName('Aspose.Pdf.Facades.ReplaceTextStrategy+NoCharacterAction')]
  DNReplaceTextStrategy_NoCharacterAction = type Integer;
  DNReplaceTextStrategy_NoCharacterActionHelper = record helper for DNReplaceTextStrategy_NoCharacterAction
  public const
    ThrowException = 0;
    UseStandardFont = 1;
    ReplaceAnyway = 2;
  end;


  //-------------namespace: Aspose.Pdf.Facades----------------
  [DNTypeName('Aspose.Pdf.Facades.ReplaceTextStrategy+Scope')]
  DNReplaceTextStrategy_Scope = type Integer;
  DNReplaceTextStrategy_ScopeHelper = record helper for DNReplaceTextStrategy_Scope
  public const
    ReplaceFirst = 0;
    ReplaceAll = 1;
  end;


  //-------------namespace: Aspose.Pdf.Facades----------------
  [DNTypeName('Aspose.Pdf.Facades.StampType')]
  DNStampType = type Integer;
  DNStampTypeHelper = record helper for DNStampType
  public const
    Form = 0;
    Image = 1;
  end;


  //-------------namespace: Aspose.Pdf.Facades----------------
  [DNTypeName('Aspose.Pdf.Facades.SubmitFormFlag')]
  DNSubmitFormFlag = type Integer;
  DNSubmitFormFlagHelper = record helper for DNSubmitFormFlag
  public const
    Fdf = 0;
    Html = 1;
    Xfdf = 2;
    FdfWithComments = 3;
    XfdfWithComments = 4;
    Pdf = 5;
  end;


  //-------------namespace: Aspose.Pdf.Facades----------------
  [DNTypeName('Aspose.Pdf.Facades.WordWrapMode')]
  DNWordWrapMode = type Integer;
  DNWordWrapModeHelper = record helper for DNWordWrapMode
  public const
    Default_ = 0;
    ByWords = 1;
  end;


  //-------------namespace: Aspose.Pdf----------------
  [DNTypeName('Aspose.Pdf.FileEncoding')]
  DNFileEncoding = type Integer;
  DNFileEncodingHelper = record helper for DNFileEncoding
  public const
    None = 0;
    Zip = 1;
  end;


  //-------------namespace: Aspose.Pdf----------------
  [DNTypeName('Aspose.Pdf.FontSubsetStrategy')]
  DNFontSubsetStrategy = type Integer;
  DNFontSubsetStrategyHelper = record helper for DNFontSubsetStrategy
  public const
    SubsetEmbeddedFontsOnly = 0;
    SubsetAllFonts = 1;
  end;


  //-------------namespace: Aspose.Pdf.Forms----------------
  [DNTypeName('Aspose.Pdf.Forms.BoxStyle')]
  DNBoxStyle = type Integer;
  DNBoxStyleHelper = record helper for DNBoxStyle
  public const
    Circle = 0;
    Check = 1;
    Cross = 2;
    Diamond = 3;
    Square = 4;
    Star = 5;
  end;


  //-------------namespace: Aspose.Pdf.Forms----------------
  [DNTypeName('Aspose.Pdf.Forms.DocMDPAccessPermissions')]
  DNDocMDPAccessPermissions = type Integer;
  DNDocMDPAccessPermissionsHelper = record helper for DNDocMDPAccessPermissions
  public const
    NoChanges = 1;
    FillingInForms = 2;
    AnnotationModification = 3;
  end;


  //-------------namespace: Aspose.Pdf.Forms----------------
  [DNTypeName('Aspose.Pdf.Forms.Form+SignDependentElementsRenderingModes')]
  DNForm_SignDependentElementsRenderingModes = type Integer;
  DNForm_SignDependentElementsRenderingModesHelper = record helper for DNForm_SignDependentElementsRenderingModes
  public const
    RenderFormAsUnsigned = 0;
    RenderFormAsSigned = 1;
  end;


  //-------------namespace: Aspose.Pdf.Forms----------------
  [DNTypeName('Aspose.Pdf.Forms.FormType')]
  DNFormType = type Integer;
  DNFormTypeHelper = record helper for DNFormType
  public const
    Standard = 0;
    Static_ = 1;
    Dynamic_ = 2;
  end;


  //-------------namespace: Aspose.Pdf.Forms----------------
  [DNTypeName('Aspose.Pdf.Forms.IconCaptionPosition')]
  DNIconCaptionPosition = type Integer;
  DNIconCaptionPositionHelper = record helper for DNIconCaptionPosition
  public const
    NoIcon = 0;
    NoCaption = 1;
    CaptionBelowIcon = 2;
    CaptionAboveIcon = 3;
    CaptionToTheRight = 4;
    CaptionToTheLeft = 5;
    CaptionOverlaid = 6;
  end;


  //-------------namespace: Aspose.Pdf.Forms----------------
  [DNTypeName('Aspose.Pdf.Forms.ScalingMode')]
  DNScalingMode = type Integer;
  DNScalingModeHelper = record helper for DNScalingMode
  public const
    Proportional = 0;
    Anamorphic = 1;
  end;


  //-------------namespace: Aspose.Pdf.Forms----------------
  [DNTypeName('Aspose.Pdf.Forms.ScalingReason')]
  DNScalingReason = type Integer;
  DNScalingReasonHelper = record helper for DNScalingReason
  public const
    Always = 0;
    IconIsBigger = 1;
    IconIsSmaller = 2;
    Never = 3;
  end;


  //-------------namespace: Aspose.Pdf.Forms----------------
  [DNTypeName('Aspose.Pdf.Forms.Symbology')]
  DNSymbology = type Integer;
  DNSymbologyHelper = record helper for DNSymbology
  public const
    PDF417 = 0;
    QRCode = 1;
    DataMatrix = 2;
  end;


  //-------------namespace: Aspose.Pdf----------------
  [DNTypeName('Aspose.Pdf.HorizontalAlignment')]
  DNHorizontalAlignment = type Integer;
  DNHorizontalAlignmentHelper = record helper for DNHorizontalAlignment
  public const
    None = 0;
    Left = 1;
    Center = 2;
    Right = 3;
    Justify = 4;
    FullJustify = 5;
  end;


  //-------------namespace: Aspose.Pdf----------------
  [DNTypeName('Aspose.Pdf.HtmlDocumentType')]
  DNHtmlDocumentType = type Integer;
  DNHtmlDocumentTypeHelper = record helper for DNHtmlDocumentType
  public const
    Xhtml = 0;
    Html5 = 1;
  end;


  //-------------namespace: Aspose.Pdf----------------
  [DNTypeName('Aspose.Pdf.HtmlMediaType')]
  DNHtmlMediaType = type Integer;
  DNHtmlMediaTypeHelper = record helper for DNHtmlMediaType
  public const
    Print = 0;
    Screen = 1;
  end;


  //-------------namespace: Aspose.Pdf----------------
  [DNTypeName('Aspose.Pdf.HtmlSaveOptions+AntialiasingProcessingType')]
  DNHtmlSaveOptions_AntialiasingProcessingType = type Integer;
  DNHtmlSaveOptions_AntialiasingProcessingTypeHelper = record helper for DNHtmlSaveOptions_AntialiasingProcessingType
  public const
    NoAdditionalProcessing = 0;
    TryCorrectResultHtml = 1;
  end;


  //-------------namespace: Aspose.Pdf----------------
  [DNTypeName('Aspose.Pdf.HtmlSaveOptions+FontEncodingRules')]
  DNHtmlSaveOptions_FontEncodingRules = type Integer;
  DNHtmlSaveOptions_FontEncodingRulesHelper = record helper for DNHtmlSaveOptions_FontEncodingRules
  public const
    Default_ = 0;
    DecreaseToUnicodePriorityLevel = 1;
  end;


  //-------------namespace: Aspose.Pdf----------------
  [DNTypeName('Aspose.Pdf.HtmlSaveOptions+FontSavingModes')]
  DNHtmlSaveOptions_FontSavingModes = type Integer;
  DNHtmlSaveOptions_FontSavingModesHelper = record helper for DNHtmlSaveOptions_FontSavingModes
  public const
    AlwaysSaveAsWOFF = 0;
    AlwaysSaveAsTTF = 1;
    AlwaysSaveAsEOT = 2;
    SaveInAllFormats = 3;
    DontSave = 4;
  end;


  //-------------namespace: Aspose.Pdf----------------
  [DNTypeName('Aspose.Pdf.HtmlSaveOptions+HtmlImageType')]
  DNHtmlSaveOptions_HtmlImageType = type Integer;
  DNHtmlSaveOptions_HtmlImageTypeHelper = record helper for DNHtmlSaveOptions_HtmlImageType
  public const
    Jpeg = 0;
    Png = 1;
    Bmp = 2;
    Gif = 3;
    Tiff = 4;
    Svg = 5;
    ZippedSvg = 6;
    Unknown = 7;
  end;


  //-------------namespace: Aspose.Pdf----------------
  [DNTypeName('Aspose.Pdf.HtmlSaveOptions+HtmlMarkupGenerationModes')]
  DNHtmlSaveOptions_HtmlMarkupGenerationModes = type Integer;
  DNHtmlSaveOptions_HtmlMarkupGenerationModesHelper = record helper for DNHtmlSaveOptions_HtmlMarkupGenerationModes
  public const
    WriteAllHtml = 0;
    WriteOnlyBodyContent = 1;
  end;


  //-------------namespace: Aspose.Pdf----------------
  [DNTypeName('Aspose.Pdf.HtmlSaveOptions+ImageParentTypes')]
  DNHtmlSaveOptions_ImageParentTypes = type Integer;
  DNHtmlSaveOptions_ImageParentTypesHelper = record helper for DNHtmlSaveOptions_ImageParentTypes
  public const
    HtmlPage = 0;
    SvgImage = 1;
  end;


  //-------------namespace: Aspose.Pdf----------------
  [DNTypeName('Aspose.Pdf.HtmlSaveOptions+LettersPositioningMethods')]
  DNHtmlSaveOptions_LettersPositioningMethods = type Integer;
  DNHtmlSaveOptions_LettersPositioningMethodsHelper = record helper for DNHtmlSaveOptions_LettersPositioningMethods
  public const
    UseEmUnitsAndCompensationOfRoundingErrorsInCss = 0;
    UsePixelUnitsInCssLetterSpacingForIE = 1;
  end;


  //-------------namespace: Aspose.Pdf----------------
  [DNTypeName('Aspose.Pdf.HtmlSaveOptions+PartsEmbeddingModes')]
  DNHtmlSaveOptions_PartsEmbeddingModes = type Integer;
  DNHtmlSaveOptions_PartsEmbeddingModesHelper = record helper for DNHtmlSaveOptions_PartsEmbeddingModes
  public const
    EmbedAllIntoHtml = 0;
    EmbedCssOnly = 1;
    NoEmbedding = 2;
  end;


  //-------------namespace: Aspose.Pdf----------------
  [DNTypeName('Aspose.Pdf.HtmlSaveOptions+RasterImagesSavingModes')]
  DNHtmlSaveOptions_RasterImagesSavingModes = type Integer;
  DNHtmlSaveOptions_RasterImagesSavingModesHelper = record helper for DNHtmlSaveOptions_RasterImagesSavingModes
  public const
    AsPngImagesEmbeddedIntoSvg = 0;
    AsExternalPngFilesReferencedViaSvg = 1;
    AsEmbeddedPartsOfPngPageBackground = 2;
  end;


  //-------------namespace: Aspose.Pdf----------------
  [DNTypeName('Aspose.Pdf.ImageDeleteAction')]
  DNImageDeleteAction = type Integer;
  DNImageDeleteActionHelper = record helper for DNImageDeleteAction
  public const
    KeepContents = 0;
    None = 1;
    ForceDelete = 2;
    Check = 3;
  end;


  //-------------namespace: Aspose.Pdf----------------
  [DNTypeName('Aspose.Pdf.ImageFileType')]
  DNImageFileType = type Integer;
  DNImageFileTypeHelper = record helper for DNImageFileType
  public const
    Unknown = 0;
    Svg = 1;
    Dicom = 2;
    Base64 = 3;
  end;


  //-------------namespace: Aspose.Pdf----------------
  [DNTypeName('Aspose.Pdf.ImageFilterType')]
  DNImageFilterType = type Integer;
  DNImageFilterTypeHelper = record helper for DNImageFilterType
  public const
    Jpeg2000 = 0;
    Jpeg = 1;
    Flate = 2;
    CCITTFax = 3;
  end;


  //-------------namespace: Aspose.Pdf----------------
  [DNTypeName('Aspose.Pdf.ImportFormat')]
  DNImportFormat = type Integer;
  DNImportFormatHelper = record helper for DNImportFormat
  public const
    Cgm = 1;
  end;


  //-------------namespace: Aspose.Pdf----------------
  [DNTypeName('Aspose.Pdf.LoadFormat')]
  DNLoadFormat = type Integer;
  DNLoadFormatHelper = record helper for DNLoadFormat
  public const
    CGM = 0;
    HTML = 1;
    EPUB = 2;
    XML = 3;
    XSLFO = 4;
    PCL = 5;
    XPS = 6;
    TEX = 7;
    SVG = 8;
    MHT = 9;
    PS = 10;
    MD = 11;
    TXT = 12;
    APS = 13;
    PDFXML = 14;
  end;


  //-------------namespace: Aspose.Pdf----------------
  [DNTypeName('Aspose.Pdf.LoadOptions+MarginsAreaUsageModes')]
  DNLoadOptions_MarginsAreaUsageModes = type Integer;
  DNLoadOptions_MarginsAreaUsageModesHelper = record helper for DNLoadOptions_MarginsAreaUsageModes
  public const
    PutContentOnMarginAreaIfNecessary = 0;
    NeverPutContentOnMarginArea = 1;
  end;


  //-------------namespace: Aspose.Pdf----------------
  [DNTypeName('Aspose.Pdf.LoadOptions+PageSizeAdjustmentModes')]
  DNLoadOptions_PageSizeAdjustmentModes = type Integer;
  DNLoadOptions_PageSizeAdjustmentModesHelper = record helper for DNLoadOptions_PageSizeAdjustmentModes
  public const
    NoAjustmentAllwaysUsePredefinedSize = 0;
    EnlargeRequiredViewportWidthAndDoConversionAgain = 1;
  end;


  //-------------namespace: Aspose.Pdf----------------
  [DNTypeName('Aspose.Pdf.NumberingStyle')]
  DNNumberingStyle = type Integer;
  DNNumberingStyleHelper = record helper for DNNumberingStyle
  public const
    NumeralsArabic = 0;
    NumeralsRomanUppercase = 1;
    NumeralsRomanLowercase = 2;
    LettersUppercase = 3;
    LettersLowercase = 4;
    None = 5;
  end;


  //-------------namespace: Aspose.Pdf.Optimization----------------
  [DNTypeName('Aspose.Pdf.Optimization.ImageCompressionVersion')]
  DNImageCompressionVersion = type Integer;
  DNImageCompressionVersionHelper = record helper for DNImageCompressionVersion
  public const
    Standard = 0;
    Fast = 2;
    Mixed = 3;
  end;


  //-------------namespace: Aspose.Pdf.Optimization----------------
  [DNTypeName('Aspose.Pdf.Optimization.ImageEncoding')]
  DNImageEncoding = type Integer;
  DNImageEncodingHelper = record helper for DNImageEncoding
  public const
    Unchanged = 0;
    Jpeg = 1;
    Flate = 2;
    Jpeg2000 = 3;
  end;


  //-------------namespace: Aspose.Pdf----------------
  [DNTypeName('Aspose.Pdf.PageCoordinateType')]
  DNPageCoordinateType = type Integer;
  DNPageCoordinateTypeHelper = record helper for DNPageCoordinateType
  public const
    MediaBox = 0;
    CropBox = 1;
  end;


  //-------------namespace: Aspose.Pdf----------------
  [DNTypeName('Aspose.Pdf.PageLayout')]
  DNPageLayout = type Integer;
  DNPageLayoutHelper = record helper for DNPageLayout
  public const
    SinglePage = 0;
    OneColumn = 1;
    TwoColumnLeft = 2;
    TwoColumnRight = 3;
    TwoPageLeft = 4;
    TwoPageRight = 5;
    Default_ = 6;
  end;


  //-------------namespace: Aspose.Pdf----------------
  [DNTypeName('Aspose.Pdf.PageMode')]
  DNPageMode = type Integer;
  DNPageModeHelper = record helper for DNPageMode
  public const
    UseNone = 0;
    UseOutlines = 1;
    UseThumbs = 2;
    FullScreen = 3;
    UseOC = 4;
    UseAttachments = 5;
  end;


  //-------------namespace: Aspose.Pdf----------------
  [DNTypeName('Aspose.Pdf.PasswordType')]
  DNPasswordType = type Integer;
  DNPasswordTypeHelper = record helper for DNPasswordType
  public const
    None = 0;
    User = 1;
    Owner = 2;
    Inaccessible = 3;
  end;


  //-------------namespace: Aspose.Pdf----------------
  [DNTypeName('Aspose.Pdf.PclLoadOptions+ConversionEngines')]
  DNPclLoadOptions_ConversionEngines = type Integer;
  DNPclLoadOptions_ConversionEnginesHelper = record helper for DNPclLoadOptions_ConversionEngines
  public const
    LegacyEngine = 0;
    NewEngine = 1;
  end;


  //-------------namespace: Aspose.Pdf----------------
  [DNTypeName('Aspose.Pdf.PdfASymbolicFontEncodingStrategy+QueueItem+CMapEncodingTableType')]
  DNPdfASymbolicFontEncodingStrategy_QueueItem_CMapEncodingTableType = type Integer;
  DNPdfASymbolicFontEncodingStrategy_QueueItem_CMapEncodingTableTypeHelper = record helper for DNPdfASymbolicFontEncodingStrategy_QueueItem_CMapEncodingTableType
  public const
    WindowsUnicodeTable = 0;
    WindowsSymbolicTable = 1;
    MacTable = 2;
    UnicodeTable = 3;
  end;


  //-------------namespace: Aspose.Pdf----------------
  [DNTypeName('Aspose.Pdf.PdfFormat')]
  DNPdfFormat = type Integer;
  DNPdfFormatHelper = record helper for DNPdfFormat
  public const
    PDF_A_1A = 0;
    PDF_A_1B = 1;
    PDF_A_2A = 2;
    PDF_A_3A = 3;
    PDF_A_2B = 4;
    PDF_A_2U = 5;
    PDF_A_3B = 6;
    PDF_A_3U = 7;
    v_1_3 = 8;
    v_1_4 = 9;
    v_1_5 = 10;
    v_1_6 = 11;
    v_1_7 = 12;
    PDF_UA_1 = 13;
    PDF_X_1A_2001 = 14;
    PDF_X_1A = 15;
    PDF_X_3 = 16;
    ZUGFeRD = 17;
  end;


  //-------------namespace: Aspose.Pdf----------------
  [DNTypeName('Aspose.Pdf.PdfFormatConversionOptions+PuaProcessingStrategy')]
  DNPdfFormatConversionOptions_PuaProcessingStrategy = type Integer;
  DNPdfFormatConversionOptions_PuaProcessingStrategyHelper = record helper for DNPdfFormatConversionOptions_PuaProcessingStrategy
  public const
    None = 0;
    SurroundPuaTextWithEmptyActualText = 1;
    SubstitutePuaSymbols = 2;
  end;


  //-------------namespace: Aspose.Pdf----------------
  [DNTypeName('Aspose.Pdf.PdfFormatConversionOptions+RemoveFontsStrategy')]
  DNPdfFormatConversionOptions_RemoveFontsStrategy = type Integer;
  DNPdfFormatConversionOptions_RemoveFontsStrategyHelper = record helper for DNPdfFormatConversionOptions_RemoveFontsStrategy
  public const
    RemoveSimilarFontsWithDifferentWidths = 1;
    SubsetFonts = 2;
    RemoveDuplicatedFonts = 4;
  end;


  //-------------namespace: Aspose.Pdf----------------
  [DNTypeName('Aspose.Pdf.PdfFormatConversionOptions+SegmentAlignStrategy')]
  DNPdfFormatConversionOptions_SegmentAlignStrategy = type Integer;
  DNPdfFormatConversionOptions_SegmentAlignStrategyHelper = record helper for DNPdfFormatConversionOptions_SegmentAlignStrategy
  public const
    None = 0;
    RestoreSegmentBounds = 1;
  end;


  //-------------namespace: Aspose.Pdf----------------
  [DNTypeName('Aspose.Pdf.Permissions')]
  DNPermissions = type Integer;
  DNPermissionsHelper = record helper for DNPermissions
  public const
    PrintDocument = 4;
    ModifyContent = 8;
    ExtractContent = 16;
    ModifyTextAnnotations = 32;
    FillForm = 256;
    ExtractContentWithDisabilities = 512;
    AssembleDocument = 1024;
    PrintingQuality = 2048;
  end;


  //-------------namespace: Aspose.Pdf----------------
  [DNTypeName('Aspose.Pdf.PrintDuplex')]
  DNPrintDuplex = type Integer;
  DNPrintDuplexHelper = record helper for DNPrintDuplex
  public const
    Simplex = 0;
    DuplexFlipShortEdge = 1;
    DuplexFlipLongEdge = 2;
  end;


  //-------------namespace: Aspose.Pdf----------------
  [DNTypeName('Aspose.Pdf.ProgressEventType')]
  DNProgressEventType = type Integer;
  DNProgressEventTypeHelper = record helper for DNProgressEventType
  public const
    TotalProgress = 0;
    SourcePageAnalysed = 1;
    ResultPageCreated = 2;
    ResultPageSaved = 3;
  end;


  //-------------namespace: Aspose.Pdf----------------
  [DNTypeName('Aspose.Pdf.ReturnAction')]
  DNReturnAction = type Integer;
  DNReturnActionHelper = record helper for DNReturnAction
  public const
    Continue_ = 0;
    Abort_ = 1;
  end;


  //-------------namespace: Aspose.Pdf----------------
  [DNTypeName('Aspose.Pdf.Rotation')]
  DNRotation = type Integer;
  DNRotationHelper = record helper for DNRotation
  public const
    None = 0;
    on90 = 1;
    on180 = 2;
    on270 = 3;
  end;


  //-------------namespace: Aspose.Pdf----------------
  [DNTypeName('Aspose.Pdf.SaveFormat')]
  DNSaveFormat = type Integer;
  DNSaveFormatHelper = record helper for DNSaveFormat
  public const
    Pdf = 0;
    None = 0;
    Doc = 1;
    Xps = 2;
    Html = 3;
    Xml = 4;
    TeX = 5;
    DocX = 6;
    Svg = 7;
    MobiXml = 8;
    Excel = 9;
    Epub = 10;
    Pptx = 14;
    Aps = 15;
    PdfXml = 16;
  end;


  //-------------namespace: Aspose.Pdf----------------
  [DNTypeName('Aspose.Pdf.SaveOptions+HtmlBorderLineType')]
  DNSaveOptions_HtmlBorderLineType = type Integer;
  DNSaveOptions_HtmlBorderLineTypeHelper = record helper for DNSaveOptions_HtmlBorderLineType
  public const
    None = 0;
    Dotted = 1;
    Dashed = 2;
    Solid = 3;
    Double = 4;
    Groove = 5;
    Ridge = 6;
    Inset = 7;
    Outset = 8;
  end;


  //-------------namespace: Aspose.Pdf----------------
  [DNTypeName('Aspose.Pdf.SaveOptions+NodeLevelResourceType')]
  DNSaveOptions_NodeLevelResourceType = type Integer;
  DNSaveOptions_NodeLevelResourceTypeHelper = record helper for DNSaveOptions_NodeLevelResourceType
  public const
    Image = 0;
    Font = 1;
  end;


  //-------------namespace: Aspose.Pdf----------------
  [DNTypeName('Aspose.Pdf.SvgLoadOptions+ConversionEngines')]
  DNSvgLoadOptions_ConversionEngines = type Integer;
  DNSvgLoadOptions_ConversionEnginesHelper = record helper for DNSvgLoadOptions_ConversionEngines
  public const
    LegacyEngine = 0;
    NewEngine = 1;
  end;


  //-------------namespace: Aspose.Pdf----------------
  [DNTypeName('Aspose.Pdf.SvgSaveOptions+SvgExternalImageType')]
  DNSvgSaveOptions_SvgExternalImageType = type Integer;
  DNSvgSaveOptions_SvgExternalImageTypeHelper = record helper for DNSvgSaveOptions_SvgExternalImageType
  public const
    Jpeg = 0;
    Png = 1;
    Bmp = 2;
    Gif = 3;
    Tiff = 4;
    Unknown = 5;
  end;


  //-------------namespace: Aspose.Pdf----------------
  [DNTypeName('Aspose.Pdf.TableBroken')]
  DNTableBroken = type Integer;
  DNTableBrokenHelper = record helper for DNTableBroken
  public const
    None = 0;
    Vertical = 1;
    VerticalInSamePage = 2;
  end;


  //-------------namespace: Aspose.Pdf----------------
  [DNTypeName('Aspose.Pdf.TabOrder')]
  DNTabOrder = type Integer;
  DNTabOrderHelper = record helper for DNTabOrder
  public const
    None = 0;
    Row = 1;
    Column = 2;
    Default_ = 3;
    Manual = 4;
  end;


  //-------------namespace: Aspose.Pdf.Text----------------
  [DNTypeName('Aspose.Pdf.Text.FontStyles')]
  DNFontStyles = type Integer;
  DNFontStylesHelper = record helper for DNFontStyles
  public const
    Regular = 0;
    Bold = 1;
    Italic = 2;
  end;


  //-------------namespace: Aspose.Pdf.Text----------------
  [DNTypeName('Aspose.Pdf.Text.FontTypes')]
  DNFontTypes = type Integer;
  DNFontTypesHelper = record helper for DNFontTypes
  public const
    TTF = 0;
    OTF = 1;
  end;


  //-------------namespace: Aspose.Pdf.Text----------------
  [DNTypeName('Aspose.Pdf.Text.SubstitutionFontCategories')]
  DNSubstitutionFontCategories = type Integer;
  DNSubstitutionFontCategoriesHelper = record helper for DNSubstitutionFontCategories
  public const
    TheSameNamedEmbeddedFonts = 0;
    AllEmbeddedFonts = 1;
  end;


  //-------------namespace: Aspose.Pdf.Text----------------
  [DNTypeName('Aspose.Pdf.Text.TabAlignmentType')]
  DNTabAlignmentType = type Integer;
  DNTabAlignmentTypeHelper = record helper for DNTabAlignmentType
  public const
    Left = 0;
    Center = 1;
    Right = 2;
  end;


  //-------------namespace: Aspose.Pdf.Text----------------
  [DNTypeName('Aspose.Pdf.Text.TabLeaderType')]
  DNTabLeaderType = type Integer;
  DNTabLeaderTypeHelper = record helper for DNTabLeaderType
  public const
    Solid = 0;
    Dash = 1;
    Dot = 2;
    None = 3;
  end;


  //-------------namespace: Aspose.Pdf.Text----------------
  [DNTypeName('Aspose.Pdf.Text.TextEditOptions+ClippingPathsProcessingMode')]
  DNTextEditOptions_ClippingPathsProcessingMode = type Integer;
  DNTextEditOptions_ClippingPathsProcessingModeHelper = record helper for DNTextEditOptions_ClippingPathsProcessingMode
  public const
    KeepIntact = 0;
    Expand = 1;
    Remove = 2;
  end;


  //-------------namespace: Aspose.Pdf.Text----------------
  [DNTypeName('Aspose.Pdf.Text.TextEditOptions+FontReplace')]
  DNTextEditOptions_FontReplace = type Integer;
  DNTextEditOptions_FontReplaceHelper = record helper for DNTextEditOptions_FontReplace
  public const
    Default_ = 0;
    RemoveUnusedFonts = 1;
  end;


  //-------------namespace: Aspose.Pdf.Text----------------
  [DNTypeName('Aspose.Pdf.Text.TextEditOptions+LanguageTransformation')]
  DNTextEditOptions_LanguageTransformation = type Integer;
  DNTextEditOptions_LanguageTransformationHelper = record helper for DNTextEditOptions_LanguageTransformation
  public const
    Default_ = 0;
    ExactlyAsISee = 1;
    None = 2;
  end;


  //-------------namespace: Aspose.Pdf.Text----------------
  [DNTypeName('Aspose.Pdf.Text.TextEditOptions+NoCharacterAction')]
  DNTextEditOptions_NoCharacterAction = type Integer;
  DNTextEditOptions_NoCharacterActionHelper = record helper for DNTextEditOptions_NoCharacterAction
  public const
    ThrowException = 0;
    UseStandardFont = 1;
    ReplaceAnyway = 2;
    UseCustomReplacementFont = 3;
  end;


  //-------------namespace: Aspose.Pdf.Text----------------
  [DNTypeName('Aspose.Pdf.Text.TextExtractionOptions+TextFormattingMode')]
  DNTextExtractionOptions_TextFormattingMode = type Integer;
  DNTextExtractionOptions_TextFormattingModeHelper = record helper for DNTextExtractionOptions_TextFormattingMode
  public const
    Pure = 0;
    Raw = 1;
    MemorySaving = 2;
  end;


  //-------------namespace: Aspose.Pdf.Text----------------
  [DNTypeName('Aspose.Pdf.Text.TextFormattingOptions+LineSpacingMode')]
  DNTextFormattingOptions_LineSpacingMode = type Integer;
  DNTextFormattingOptions_LineSpacingModeHelper = record helper for DNTextFormattingOptions_LineSpacingMode
  public const
    FontSize = 0;
    FullSize = 1;
  end;


  //-------------namespace: Aspose.Pdf.Text----------------
  [DNTypeName('Aspose.Pdf.Text.TextFormattingOptions+WordWrapMode')]
  DNTextFormattingOptions_WordWrapMode = type Integer;
  DNTextFormattingOptions_WordWrapModeHelper = record helper for DNTextFormattingOptions_WordWrapMode
  public const
    NoWrap = 0;
    DiscretionaryHyphenation = 1;
    ByWords = 2;
    Undefined = 3;
  end;


  //-------------namespace: Aspose.Pdf.Text----------------
  [DNTypeName('Aspose.Pdf.Text.TextRenderingMode')]
  DNTextRenderingMode = type Integer;
  DNTextRenderingModeHelper = record helper for DNTextRenderingMode
  public const
    FillText = 0;
    StrokeText = 1;
    FillThenStrokeText = 2;
    Invisible = 3;
    FillTextAndAddPathToClipping = 4;
    StrokeTextAndAddPathToClipping = 5;
    FillThenStrokeTextAndAddPathToClipping = 6;
    AddPathToClipping = 7;
  end;


  //-------------namespace: Aspose.Pdf.Text----------------
  [DNTypeName('Aspose.Pdf.Text.TextReplaceOptions+ReplaceAdjustment')]
  DNTextReplaceOptions_ReplaceAdjustment = type Integer;
  DNTextReplaceOptions_ReplaceAdjustmentHelper = record helper for DNTextReplaceOptions_ReplaceAdjustment
  public const
    None = 0;
    AdjustSpaceWidth = 1;
    WholeWordsHyphenation = 2;
    ShiftRestOfLine = 4;
  end;


  //-------------namespace: Aspose.Pdf.Text----------------
  [DNTypeName('Aspose.Pdf.Text.TextReplaceOptions+Scope')]
  DNTextReplaceOptions_Scope = type Integer;
  DNTextReplaceOptions_ScopeHelper = record helper for DNTextReplaceOptions_Scope
  public const
    REPLACE_FIRST = 0;
    REPLACE_ALL = 1;
  end;


  //-------------namespace: Aspose.Pdf----------------
  [DNTypeName('Aspose.Pdf.VerticalAlignment')]
  DNVerticalAlignment = type Integer;
  DNVerticalAlignmentHelper = record helper for DNVerticalAlignment
  public const
    None = 0;
    Top = 1;
    Center = 2;
    Bottom = 3;
  end;


  //-------------namespace: Aspose.Pdf----------------
  [DNTypeName('Aspose.Pdf.WarningType')]
  DNWarningType = type Integer;
  DNWarningTypeHelper = record helper for DNWarningType
  public const
    SourceFileCorruption = 0;
    DataLoss = 1;
    MajorFormattingLoss = 2;
    MinorFormattingLoss = 3;
    CompatibilityIssue = 4;
    InvalidInputStreamType = 5;
    UnexpectedContent = 99;
  end;


  //-------------namespace: Aspose.Pdf----------------
  [DNTypeName('Aspose.Pdf.XmpFieldType')]
  DNXmpFieldType = type Integer;
  DNXmpFieldTypeHelper = record helper for DNXmpFieldType
  public const
    Struct = 0;
    Array_ = 1;
    Property_ = 2;
    Packet = 3;
    Unknown = 4;
  end;


  //-------------namespace: Aspose.Pdf----------------
  [DNTypeName('Aspose.Pdf.XmpPdfAExtensionCategoryType')]
  DNXmpPdfAExtensionCategoryType = type Integer;
  DNXmpPdfAExtensionCategoryTypeHelper = record helper for DNXmpPdfAExtensionCategoryType
  public const
    Internal = 0;
    External_ = 1;
  end;


  //-------------namespace: Aspose.Pdf----------------
  [DNTypeName('Aspose.Pdf.XslFoLoadOptions+ParsingErrorsHandlingTypes')]
  DNXslFoLoadOptions_ParsingErrorsHandlingTypes = type Integer;
  DNXslFoLoadOptions_ParsingErrorsHandlingTypesHelper = record helper for DNXslFoLoadOptions_ParsingErrorsHandlingTypes
  public const
    TryIgnore = 0;
    ThrowExceptionImmediately = 1;
    InvokeCustomHandler = 2;
  end;




type


{ declares }

  DNIAnnotationVisitor = interface; // type: Aspose.Pdf.Annotations.IAnnotationVisitor, namespace: Aspose.Pdf.Annotations
  DNIAppointment = interface; // type: Aspose.Pdf.Annotations.IAppointment, namespace: Aspose.Pdf.Annotations
  DNDocument_IDocumentFontUtilities = interface; // type: Aspose.Pdf.Document+IDocumentFontUtilities, namespace: Aspose.Pdf
  DNIDocumentPageTextExtractor = interface; // type: Aspose.Pdf.GroupProcessor.IDocumentPageTextExtractor, namespace: Aspose.Pdf.GroupProcessor
  DNIDocumentTextExtractor = interface; // type: Aspose.Pdf.GroupProcessor.IDocumentTextExtractor, namespace: Aspose.Pdf.GroupProcessor
  DNIPdfTypeExtractor = interface; // type: Aspose.Pdf.GroupProcessor.IPdfTypeExtractor, namespace: Aspose.Pdf.GroupProcessor
  DNIColorSpaceConversionStrategy = interface; // type: Aspose.Pdf.IColorSpaceConversionStrategy, namespace: Aspose.Pdf
  DNIIndexBitmapConverter = interface; // type: Aspose.Pdf.IIndexBitmapConverter, namespace: Aspose.Pdf
  DNINamedDestinationCollection = interface; // type: Aspose.Pdf.INamedDestinationCollection, namespace: Aspose.Pdf
  DNIOperatorSelector = interface; // type: Aspose.Pdf.IOperatorSelector, namespace: Aspose.Pdf
  DNIPageSetOptions = interface; // type: Aspose.Pdf.IPageSetOptions, namespace: Aspose.Pdf
  DNIPipelineOptions = interface; // type: Aspose.Pdf.IPipelineOptions, namespace: Aspose.Pdf
  DNIResourceLoadingCallback = interface; // type: Aspose.Pdf.IResourceLoadingCallback, namespace: Aspose.Pdf
  DNIWarningCallback = interface; // type: Aspose.Pdf.IWarningCallback, namespace: Aspose.Pdf
  DNITextElement = interface; // type: Aspose.Pdf.LogicalStructure.ITextElement, namespace: Aspose.Pdf.LogicalStructure
  DNITaggedContent = interface; // type: Aspose.Pdf.Tagged.ITaggedContent, namespace: Aspose.Pdf.Tagged
  DNIFontOptions = interface; // type: Aspose.Pdf.Text.IFontOptions, namespace: Aspose.Pdf.Text
  DNITableElement = interface; // type: Aspose.Pdf.Text.ITableElement, namespace: Aspose.Pdf.Text
  DNIFacade = interface; // type: Aspose.Pdf.Facades.IFacade, namespace: Aspose.Pdf.Facades
  DNISaveableFacade = interface; // type: Aspose.Pdf.Facades.ISaveableFacade, namespace: Aspose.Pdf.Facades
  DNActionCollection = interface; // type: Aspose.Pdf.Annotations.ActionCollection, namespace: Aspose.Pdf.Annotations
  DNAnnotationCollection = interface; // type: Aspose.Pdf.Annotations.AnnotationCollection, namespace: Aspose.Pdf.Annotations
  DNAnnotationSelector = interface; // type: Aspose.Pdf.Annotations.AnnotationSelector, namespace: Aspose.Pdf.Annotations
  DNAppearanceDictionary = interface; // type: Aspose.Pdf.Annotations.AppearanceDictionary, namespace: Aspose.Pdf.Annotations
  DNBorder = interface; // type: Aspose.Pdf.Annotations.Border, namespace: Aspose.Pdf.Annotations
  DNCharacteristics = interface; // type: Aspose.Pdf.Annotations.Characteristics, namespace: Aspose.Pdf.Annotations
  DNDash = interface; // type: Aspose.Pdf.Annotations.Dash, namespace: Aspose.Pdf.Annotations
  DNDefaultAppearance = interface; // type: Aspose.Pdf.Annotations.DefaultAppearance, namespace: Aspose.Pdf.Annotations
  DNDocumentActionCollection = interface; // type: Aspose.Pdf.Annotations.DocumentActionCollection, namespace: Aspose.Pdf.Annotations
  DNExplicitDestination = interface; // type: Aspose.Pdf.Annotations.ExplicitDestination, namespace: Aspose.Pdf.Annotations
  DNCustomExplicitDestination = interface; // type: Aspose.Pdf.Annotations.CustomExplicitDestination, namespace: Aspose.Pdf.Annotations
  DNFitBExplicitDestination = interface; // type: Aspose.Pdf.Annotations.FitBExplicitDestination, namespace: Aspose.Pdf.Annotations
  DNFitBHExplicitDestination = interface; // type: Aspose.Pdf.Annotations.FitBHExplicitDestination, namespace: Aspose.Pdf.Annotations
  DNFitBVExplicitDestination = interface; // type: Aspose.Pdf.Annotations.FitBVExplicitDestination, namespace: Aspose.Pdf.Annotations
  DNFitExplicitDestination = interface; // type: Aspose.Pdf.Annotations.FitExplicitDestination, namespace: Aspose.Pdf.Annotations
  DNFitHExplicitDestination = interface; // type: Aspose.Pdf.Annotations.FitHExplicitDestination, namespace: Aspose.Pdf.Annotations
  DNFitRExplicitDestination = interface; // type: Aspose.Pdf.Annotations.FitRExplicitDestination, namespace: Aspose.Pdf.Annotations
  DNFitVExplicitDestination = interface; // type: Aspose.Pdf.Annotations.FitVExplicitDestination, namespace: Aspose.Pdf.Annotations
  DNXYZExplicitDestination = interface; // type: Aspose.Pdf.Annotations.XYZExplicitDestination, namespace: Aspose.Pdf.Annotations
  DNFixedPrint = interface; // type: Aspose.Pdf.Annotations.FixedPrint, namespace: Aspose.Pdf.Annotations
  DNMeasure = interface; // type: Aspose.Pdf.Annotations.Measure, namespace: Aspose.Pdf.Annotations
  DNMeasure_NumberFormat = interface; // type: Aspose.Pdf.Annotations.Measure+NumberFormat, namespace: Aspose.Pdf.Annotations
  DNMeasure_NumberFormatList = interface; // type: Aspose.Pdf.Annotations.Measure+NumberFormatList, namespace: Aspose.Pdf.Annotations
  DNMediaClip = interface; // type: Aspose.Pdf.Annotations.MediaClip, namespace: Aspose.Pdf.Annotations
  DNMediaClipData = interface; // type: Aspose.Pdf.Annotations.MediaClipData, namespace: Aspose.Pdf.Annotations
  DNMediaClipSection = interface; // type: Aspose.Pdf.Annotations.MediaClipSection, namespace: Aspose.Pdf.Annotations
  DNNamedDestination = interface; // type: Aspose.Pdf.Annotations.NamedDestination, namespace: Aspose.Pdf.Annotations
  DNPDF3DArtwork = interface; // type: Aspose.Pdf.Annotations.PDF3DArtwork, namespace: Aspose.Pdf.Annotations
  DNPDF3DContent = interface; // type: Aspose.Pdf.Annotations.PDF3DContent, namespace: Aspose.Pdf.Annotations
  DNPDF3DCrossSection = interface; // type: Aspose.Pdf.Annotations.PDF3DCrossSection, namespace: Aspose.Pdf.Annotations
  DNPDF3DCrossSectionArray = interface; // type: Aspose.Pdf.Annotations.PDF3DCrossSectionArray, namespace: Aspose.Pdf.Annotations
  DNPDF3DCuttingPlaneOrientation = interface; // type: Aspose.Pdf.Annotations.PDF3DCuttingPlaneOrientation, namespace: Aspose.Pdf.Annotations
  DNPDF3DLightingScheme = interface; // type: Aspose.Pdf.Annotations.PDF3DLightingScheme, namespace: Aspose.Pdf.Annotations
  DNPDF3DRenderMode = interface; // type: Aspose.Pdf.Annotations.PDF3DRenderMode, namespace: Aspose.Pdf.Annotations
  DNPDF3DStream = interface; // type: Aspose.Pdf.Annotations.PDF3DStream, namespace: Aspose.Pdf.Annotations
  DNPDF3DView = interface; // type: Aspose.Pdf.Annotations.PDF3DView, namespace: Aspose.Pdf.Annotations
  DNPDF3DViewArray = interface; // type: Aspose.Pdf.Annotations.PDF3DViewArray, namespace: Aspose.Pdf.Annotations
  DNPdfAction = interface; // type: Aspose.Pdf.Annotations.PdfAction, namespace: Aspose.Pdf.Annotations
  DNGoToAction = interface; // type: Aspose.Pdf.Annotations.GoToAction, namespace: Aspose.Pdf.Annotations
  DNGoToRemoteAction = interface; // type: Aspose.Pdf.Annotations.GoToRemoteAction, namespace: Aspose.Pdf.Annotations
  DNGoToURIAction = interface; // type: Aspose.Pdf.Annotations.GoToURIAction, namespace: Aspose.Pdf.Annotations
  DNHideAction = interface; // type: Aspose.Pdf.Annotations.HideAction, namespace: Aspose.Pdf.Annotations
  DNImportDataAction = interface; // type: Aspose.Pdf.Annotations.ImportDataAction, namespace: Aspose.Pdf.Annotations
  DNJavascriptAction = interface; // type: Aspose.Pdf.Annotations.JavascriptAction, namespace: Aspose.Pdf.Annotations
  DNLaunchAction = interface; // type: Aspose.Pdf.Annotations.LaunchAction, namespace: Aspose.Pdf.Annotations
  DNNamedAction = interface; // type: Aspose.Pdf.Annotations.NamedAction, namespace: Aspose.Pdf.Annotations
  DNRenditionAction = interface; // type: Aspose.Pdf.Annotations.RenditionAction, namespace: Aspose.Pdf.Annotations
  DNSubmitFormAction = interface; // type: Aspose.Pdf.Annotations.SubmitFormAction, namespace: Aspose.Pdf.Annotations
  DNPdfActionCollection = interface; // type: Aspose.Pdf.Annotations.PdfActionCollection, namespace: Aspose.Pdf.Annotations
  DNRendition = interface; // type: Aspose.Pdf.Annotations.Rendition, namespace: Aspose.Pdf.Annotations
  DNMediaRendition = interface; // type: Aspose.Pdf.Annotations.MediaRendition, namespace: Aspose.Pdf.Annotations
  DNSelectorRendition = interface; // type: Aspose.Pdf.Annotations.SelectorRendition, namespace: Aspose.Pdf.Annotations
  DNSoundData = interface; // type: Aspose.Pdf.Annotations.SoundData, namespace: Aspose.Pdf.Annotations
  DNSoundSampleData = interface; // type: Aspose.Pdf.Annotations.SoundSampleData, namespace: Aspose.Pdf.Annotations
  DNTextStyle = interface; // type: Aspose.Pdf.Annotations.TextStyle, namespace: Aspose.Pdf.Annotations
  DNXfdfReader = interface; // type: Aspose.Pdf.Annotations.XfdfReader, namespace: Aspose.Pdf.Annotations
  DNArtifact = interface; // type: Aspose.Pdf.Artifact, namespace: Aspose.Pdf
  DNBackgroundArtifact = interface; // type: Aspose.Pdf.BackgroundArtifact, namespace: Aspose.Pdf
  DNFooterArtifact = interface; // type: Aspose.Pdf.FooterArtifact, namespace: Aspose.Pdf
  DNHeaderArtifact = interface; // type: Aspose.Pdf.HeaderArtifact, namespace: Aspose.Pdf
  DNWatermarkArtifact = interface; // type: Aspose.Pdf.WatermarkArtifact, namespace: Aspose.Pdf
  DNArtifactCollection = interface; // type: Aspose.Pdf.ArtifactCollection, namespace: Aspose.Pdf
  DNBaseActionCollection = interface; // type: Aspose.Pdf.BaseActionCollection, namespace: Aspose.Pdf
  DNAnnotationActionCollection = interface; // type: Aspose.Pdf.Annotations.AnnotationActionCollection, namespace: Aspose.Pdf.Annotations
  DNPageActionCollection = interface; // type: Aspose.Pdf.PageActionCollection, namespace: Aspose.Pdf
  DNBaseOperatorCollection = interface; // type: Aspose.Pdf.BaseOperatorCollection, namespace: Aspose.Pdf
  DNOperatorCollection = interface; // type: Aspose.Pdf.OperatorCollection, namespace: Aspose.Pdf
  DNBaseParagraph = interface; // type: Aspose.Pdf.BaseParagraph, namespace: Aspose.Pdf
  DNAnnotation = interface; // type: Aspose.Pdf.Annotations.Annotation, namespace: Aspose.Pdf.Annotations
  DNLinkAnnotation = interface; // type: Aspose.Pdf.Annotations.LinkAnnotation, namespace: Aspose.Pdf.Annotations
  DNMarkupAnnotation = interface; // type: Aspose.Pdf.Annotations.MarkupAnnotation, namespace: Aspose.Pdf.Annotations
  DNCaretAnnotation = interface; // type: Aspose.Pdf.Annotations.CaretAnnotation, namespace: Aspose.Pdf.Annotations
  DNCommonFigureAnnotation = interface; // type: Aspose.Pdf.Annotations.CommonFigureAnnotation, namespace: Aspose.Pdf.Annotations
  DNCircleAnnotation = interface; // type: Aspose.Pdf.Annotations.CircleAnnotation, namespace: Aspose.Pdf.Annotations
  DNSquareAnnotation = interface; // type: Aspose.Pdf.Annotations.SquareAnnotation, namespace: Aspose.Pdf.Annotations
  DNFileAttachmentAnnotation = interface; // type: Aspose.Pdf.Annotations.FileAttachmentAnnotation, namespace: Aspose.Pdf.Annotations
  DNFreeTextAnnotation = interface; // type: Aspose.Pdf.Annotations.FreeTextAnnotation, namespace: Aspose.Pdf.Annotations
  DNInkAnnotation = interface; // type: Aspose.Pdf.Annotations.InkAnnotation, namespace: Aspose.Pdf.Annotations
  DNLineAnnotation = interface; // type: Aspose.Pdf.Annotations.LineAnnotation, namespace: Aspose.Pdf.Annotations
  DNPolyAnnotation = interface; // type: Aspose.Pdf.Annotations.PolyAnnotation, namespace: Aspose.Pdf.Annotations
  DNPolygonAnnotation = interface; // type: Aspose.Pdf.Annotations.PolygonAnnotation, namespace: Aspose.Pdf.Annotations
  DNPolylineAnnotation = interface; // type: Aspose.Pdf.Annotations.PolylineAnnotation, namespace: Aspose.Pdf.Annotations
  DNRedactionAnnotation = interface; // type: Aspose.Pdf.Annotations.RedactionAnnotation, namespace: Aspose.Pdf.Annotations
  DNSoundAnnotation = interface; // type: Aspose.Pdf.Annotations.SoundAnnotation, namespace: Aspose.Pdf.Annotations
  DNStampAnnotation = interface; // type: Aspose.Pdf.Annotations.StampAnnotation, namespace: Aspose.Pdf.Annotations
  DNTextAnnotation = interface; // type: Aspose.Pdf.Annotations.TextAnnotation, namespace: Aspose.Pdf.Annotations
  DNTextMarkupAnnotation = interface; // type: Aspose.Pdf.Annotations.TextMarkupAnnotation, namespace: Aspose.Pdf.Annotations
  DNHighlightAnnotation = interface; // type: Aspose.Pdf.Annotations.HighlightAnnotation, namespace: Aspose.Pdf.Annotations
  DNSquigglyAnnotation = interface; // type: Aspose.Pdf.Annotations.SquigglyAnnotation, namespace: Aspose.Pdf.Annotations
  DNStrikeOutAnnotation = interface; // type: Aspose.Pdf.Annotations.StrikeOutAnnotation, namespace: Aspose.Pdf.Annotations
  DNUnderlineAnnotation = interface; // type: Aspose.Pdf.Annotations.UnderlineAnnotation, namespace: Aspose.Pdf.Annotations
  DNMovieAnnotation = interface; // type: Aspose.Pdf.Annotations.MovieAnnotation, namespace: Aspose.Pdf.Annotations
  DNPDF3DAnnotation = interface; // type: Aspose.Pdf.Annotations.PDF3DAnnotation, namespace: Aspose.Pdf.Annotations
  DNPopupAnnotation = interface; // type: Aspose.Pdf.Annotations.PopupAnnotation, namespace: Aspose.Pdf.Annotations
  DNRichMediaAnnotation = interface; // type: Aspose.Pdf.Annotations.RichMediaAnnotation, namespace: Aspose.Pdf.Annotations
  DNScreenAnnotation = interface; // type: Aspose.Pdf.Annotations.ScreenAnnotation, namespace: Aspose.Pdf.Annotations
  DNWatermarkAnnotation = interface; // type: Aspose.Pdf.Annotations.WatermarkAnnotation, namespace: Aspose.Pdf.Annotations
  DNWidgetAnnotation = interface; // type: Aspose.Pdf.Annotations.WidgetAnnotation, namespace: Aspose.Pdf.Annotations
  DNField = interface; // type: Aspose.Pdf.Forms.Field, namespace: Aspose.Pdf.Forms
  DNButtonField = interface; // type: Aspose.Pdf.Forms.ButtonField, namespace: Aspose.Pdf.Forms
  DNCheckboxField = interface; // type: Aspose.Pdf.Forms.CheckboxField, namespace: Aspose.Pdf.Forms
  DNChoiceField = interface; // type: Aspose.Pdf.Forms.ChoiceField, namespace: Aspose.Pdf.Forms
  DNComboBoxField = interface; // type: Aspose.Pdf.Forms.ComboBoxField, namespace: Aspose.Pdf.Forms
  DNListBoxField = interface; // type: Aspose.Pdf.Forms.ListBoxField, namespace: Aspose.Pdf.Forms
  DNRadioButtonField = interface; // type: Aspose.Pdf.Forms.RadioButtonField, namespace: Aspose.Pdf.Forms
  DNRadioButtonOptionField = interface; // type: Aspose.Pdf.Forms.RadioButtonOptionField, namespace: Aspose.Pdf.Forms
  DNSignatureField = interface; // type: Aspose.Pdf.Forms.SignatureField, namespace: Aspose.Pdf.Forms
  DNTextBoxField = interface; // type: Aspose.Pdf.Forms.TextBoxField, namespace: Aspose.Pdf.Forms
  DNBarcodeField = interface; // type: Aspose.Pdf.Forms.BarcodeField, namespace: Aspose.Pdf.Forms
  DNFileSelectBoxField = interface; // type: Aspose.Pdf.Forms.FileSelectBoxField, namespace: Aspose.Pdf.Forms
  DNPasswordBoxField = interface; // type: Aspose.Pdf.Forms.PasswordBoxField, namespace: Aspose.Pdf.Forms
  DNRichTextBoxField = interface; // type: Aspose.Pdf.Forms.RichTextBoxField, namespace: Aspose.Pdf.Forms
  DNGraph = interface; // type: Aspose.Pdf.Drawing.Graph, namespace: Aspose.Pdf.Drawing
  DNFloatingBox = interface; // type: Aspose.Pdf.FloatingBox, namespace: Aspose.Pdf
  DNFormattedFragment = interface; // type: Aspose.Pdf.FormattedFragment, namespace: Aspose.Pdf
  DNHtmlFragment = interface; // type: Aspose.Pdf.HtmlFragment, namespace: Aspose.Pdf
  DNTeXFragment = interface; // type: Aspose.Pdf.TeXFragment, namespace: Aspose.Pdf
  DNLatexFragment = interface; // type: Aspose.Pdf.LatexFragment, namespace: Aspose.Pdf
  DNImage = interface; // type: Aspose.Pdf.Image, namespace: Aspose.Pdf
  DNTable = interface; // type: Aspose.Pdf.Table, namespace: Aspose.Pdf
  DNTextFragment = interface; // type: Aspose.Pdf.Text.TextFragment, namespace: Aspose.Pdf.Text
  DNHeading = interface; // type: Aspose.Pdf.Heading, namespace: Aspose.Pdf
  DNBorderInfo = interface; // type: Aspose.Pdf.BorderInfo, namespace: Aspose.Pdf
  DNBuildVersionInfo = interface; // type: Aspose.Pdf.BuildVersionInfo, namespace: Aspose.Pdf
  DNCell = interface; // type: Aspose.Pdf.Cell, namespace: Aspose.Pdf
  DNCells = interface; // type: Aspose.Pdf.Cells, namespace: Aspose.Pdf
  DNColor = interface; // type: Aspose.Pdf.Color, namespace: Aspose.Pdf
  DNColumnInfo = interface; // type: Aspose.Pdf.ColumnInfo, namespace: Aspose.Pdf
  DNComHelper = interface; // type: Aspose.Pdf.ComHelper, namespace: Aspose.Pdf
  DNCompositingParameters = interface; // type: Aspose.Pdf.CompositingParameters, namespace: Aspose.Pdf
  DNDestinationCollection = interface; // type: Aspose.Pdf.DestinationCollection, namespace: Aspose.Pdf
  DNDevice = interface; // type: Aspose.Pdf.Devices.Device, namespace: Aspose.Pdf.Devices
  DNDocumentDevice = interface; // type: Aspose.Pdf.Devices.DocumentDevice, namespace: Aspose.Pdf.Devices
  DNTiffDevice = interface; // type: Aspose.Pdf.Devices.TiffDevice, namespace: Aspose.Pdf.Devices
  DNPageDevice = interface; // type: Aspose.Pdf.Devices.PageDevice, namespace: Aspose.Pdf.Devices
  DNImageDevice = interface; // type: Aspose.Pdf.Devices.ImageDevice, namespace: Aspose.Pdf.Devices
  DNBmpDevice = interface; // type: Aspose.Pdf.Devices.BmpDevice, namespace: Aspose.Pdf.Devices
  DNEmfDevice = interface; // type: Aspose.Pdf.Devices.EmfDevice, namespace: Aspose.Pdf.Devices
  DNGifDevice = interface; // type: Aspose.Pdf.Devices.GifDevice, namespace: Aspose.Pdf.Devices
  DNJpegDevice = interface; // type: Aspose.Pdf.Devices.JpegDevice, namespace: Aspose.Pdf.Devices
  DNPngDevice = interface; // type: Aspose.Pdf.Devices.PngDevice, namespace: Aspose.Pdf.Devices
  DNTextDevice = interface; // type: Aspose.Pdf.Devices.TextDevice, namespace: Aspose.Pdf.Devices
  DNMargins = interface; // type: Aspose.Pdf.Devices.Margins, namespace: Aspose.Pdf.Devices
  DNResolution = interface; // type: Aspose.Pdf.Devices.Resolution, namespace: Aspose.Pdf.Devices
  DNTiffSettings = interface; // type: Aspose.Pdf.Devices.TiffSettings, namespace: Aspose.Pdf.Devices
  DNDocument = interface; // type: Aspose.Pdf.Document, namespace: Aspose.Pdf
  DNDocumentFactory = interface; // type: Aspose.Pdf.DocumentFactory, namespace: Aspose.Pdf
  DNPatternColorSpace = interface; // type: Aspose.Pdf.Drawing.PatternColorSpace, namespace: Aspose.Pdf.Drawing
  DNGradientAxialShading = interface; // type: Aspose.Pdf.Drawing.GradientAxialShading, namespace: Aspose.Pdf.Drawing
  DNGradientRadialShading = interface; // type: Aspose.Pdf.Drawing.GradientRadialShading, namespace: Aspose.Pdf.Drawing
  DNShape = interface; // type: Aspose.Pdf.Drawing.Shape, namespace: Aspose.Pdf.Drawing
  DNArc = interface; // type: Aspose.Pdf.Drawing.Arc, namespace: Aspose.Pdf.Drawing
  DNCircle = interface; // type: Aspose.Pdf.Drawing.Circle, namespace: Aspose.Pdf.Drawing
  DNCurve = interface; // type: Aspose.Pdf.Drawing.Curve, namespace: Aspose.Pdf.Drawing
  DNEllipse = interface; // type: Aspose.Pdf.Drawing.Ellipse, namespace: Aspose.Pdf.Drawing
  DNLine = interface; // type: Aspose.Pdf.Drawing.Line, namespace: Aspose.Pdf.Drawing
  DNPath = interface; // type: Aspose.Pdf.Drawing.Path, namespace: Aspose.Pdf.Drawing
  DNDrawing_Rectangle = interface; // type: Aspose.Pdf.Drawing.Rectangle, namespace: Aspose.Pdf.Drawing
  DNEmbeddedFileCollection = interface; // type: Aspose.Pdf.EmbeddedFileCollection, namespace: Aspose.Pdf
  DNCollection = interface; // type: Aspose.Pdf.Collection, namespace: Aspose.Pdf
  DNEncryptedPayload = interface; // type: Aspose.Pdf.EncryptedPayload, namespace: Aspose.Pdf
  DNAlignmentType = interface; // type: Aspose.Pdf.Facades.AlignmentType, namespace: Aspose.Pdf.Facades
  DNAutoFiller = interface; // type: Aspose.Pdf.Facades.AutoFiller, namespace: Aspose.Pdf.Facades
  DNBookmark = interface; // type: Aspose.Pdf.Facades.Bookmark, namespace: Aspose.Pdf.Facades
  DNDocumentPrivilege = interface; // type: Aspose.Pdf.Facades.DocumentPrivilege, namespace: Aspose.Pdf.Facades
  DNFacade = interface; // type: Aspose.Pdf.Facades.Facade, namespace: Aspose.Pdf.Facades
  DNPdfConverter = interface; // type: Aspose.Pdf.Facades.PdfConverter, namespace: Aspose.Pdf.Facades
  DNPdfExtractor = interface; // type: Aspose.Pdf.Facades.PdfExtractor, namespace: Aspose.Pdf.Facades
  DNSaveableFacade = interface; // type: Aspose.Pdf.Facades.SaveableFacade, namespace: Aspose.Pdf.Facades
  DNFacades_Form = interface; // type: Aspose.Pdf.Facades.Form, namespace: Aspose.Pdf.Facades
  DNFormEditor = interface; // type: Aspose.Pdf.Facades.FormEditor, namespace: Aspose.Pdf.Facades
  DNPdfAnnotationEditor = interface; // type: Aspose.Pdf.Facades.PdfAnnotationEditor, namespace: Aspose.Pdf.Facades
  DNPdfBookmarkEditor = interface; // type: Aspose.Pdf.Facades.PdfBookmarkEditor, namespace: Aspose.Pdf.Facades
  DNPdfContentEditor = interface; // type: Aspose.Pdf.Facades.PdfContentEditor, namespace: Aspose.Pdf.Facades
  DNPdfFileInfo = interface; // type: Aspose.Pdf.Facades.PdfFileInfo, namespace: Aspose.Pdf.Facades
  DNPdfFileMend = interface; // type: Aspose.Pdf.Facades.PdfFileMend, namespace: Aspose.Pdf.Facades
  DNPdfFileSecurity = interface; // type: Aspose.Pdf.Facades.PdfFileSecurity, namespace: Aspose.Pdf.Facades
  DNPdfFileSignature = interface; // type: Aspose.Pdf.Facades.PdfFileSignature, namespace: Aspose.Pdf.Facades
  DNPdfFileStamp = interface; // type: Aspose.Pdf.Facades.PdfFileStamp, namespace: Aspose.Pdf.Facades
  DNPdfPageEditor = interface; // type: Aspose.Pdf.Facades.PdfPageEditor, namespace: Aspose.Pdf.Facades
  DNPdfXmpMetadata = interface; // type: Aspose.Pdf.Facades.PdfXmpMetadata, namespace: Aspose.Pdf.Facades
  DNFontColor = interface; // type: Aspose.Pdf.Facades.FontColor, namespace: Aspose.Pdf.Facades
  DNForm_FormImportResult = interface; // type: Aspose.Pdf.Facades.Form+FormImportResult, namespace: Aspose.Pdf.Facades
  DNFormattedText = interface; // type: Aspose.Pdf.Facades.FormattedText, namespace: Aspose.Pdf.Facades
  DNFormDataConverter = interface; // type: Aspose.Pdf.Facades.FormDataConverter, namespace: Aspose.Pdf.Facades
  DNFormFieldFacade = interface; // type: Aspose.Pdf.Facades.FormFieldFacade, namespace: Aspose.Pdf.Facades
  DNLineInfo = interface; // type: Aspose.Pdf.Facades.LineInfo, namespace: Aspose.Pdf.Facades
  DNPdfFileEditor = interface; // type: Aspose.Pdf.Facades.PdfFileEditor, namespace: Aspose.Pdf.Facades
  DNPdfFileEditor_ContentsResizeParameters = interface; // type: Aspose.Pdf.Facades.PdfFileEditor+ContentsResizeParameters, namespace: Aspose.Pdf.Facades
  DNPdfFileEditor_ContentsResizeValue = interface; // type: Aspose.Pdf.Facades.PdfFileEditor+ContentsResizeValue, namespace: Aspose.Pdf.Facades
  DNPdfFileEditor_CorruptedItem = interface; // type: Aspose.Pdf.Facades.PdfFileEditor+CorruptedItem, namespace: Aspose.Pdf.Facades
  DNPdfFileEditor_PageBreak = interface; // type: Aspose.Pdf.Facades.PdfFileEditor+PageBreak, namespace: Aspose.Pdf.Facades
  DNPdfJavaScriptStripper = interface; // type: Aspose.Pdf.Facades.PdfJavaScriptStripper, namespace: Aspose.Pdf.Facades
  DNPdfPrintPageInfo = interface; // type: Aspose.Pdf.Facades.PdfPrintPageInfo, namespace: Aspose.Pdf.Facades
  DNPdfProducer = interface; // type: Aspose.Pdf.Facades.PdfProducer, namespace: Aspose.Pdf.Facades
  DNPdfViewer = interface; // type: Aspose.Pdf.Facades.PdfViewer, namespace: Aspose.Pdf.Facades
  DNReplaceTextStrategy = interface; // type: Aspose.Pdf.Facades.ReplaceTextStrategy, namespace: Aspose.Pdf.Facades
  DNFacades_Stamp = interface; // type: Aspose.Pdf.Facades.Stamp, namespace: Aspose.Pdf.Facades
  DNStampInfo = interface; // type: Aspose.Pdf.Facades.StampInfo, namespace: Aspose.Pdf.Facades
  DNTextProperties = interface; // type: Aspose.Pdf.Facades.TextProperties, namespace: Aspose.Pdf.Facades
  DNVerticalAlignmentType = interface; // type: Aspose.Pdf.Facades.VerticalAlignmentType, namespace: Aspose.Pdf.Facades
  DNViewerPreference = interface; // type: Aspose.Pdf.Facades.ViewerPreference, namespace: Aspose.Pdf.Facades
  DNFileParams = interface; // type: Aspose.Pdf.FileParams, namespace: Aspose.Pdf
  DNFileSpecification = interface; // type: Aspose.Pdf.FileSpecification, namespace: Aspose.Pdf
  DNDocMDPSignature = interface; // type: Aspose.Pdf.Forms.DocMDPSignature, namespace: Aspose.Pdf.Forms
  DNForms_Form = interface; // type: Aspose.Pdf.Forms.Form, namespace: Aspose.Pdf.Forms
  DNForm_FlattenSettings = interface; // type: Aspose.Pdf.Forms.Form+FlattenSettings, namespace: Aspose.Pdf.Forms
  DNIconFit = interface; // type: Aspose.Pdf.Forms.IconFit, namespace: Aspose.Pdf.Forms
  DNOption = interface; // type: Aspose.Pdf.Forms.Option, namespace: Aspose.Pdf.Forms
  DNOptionCollection = interface; // type: Aspose.Pdf.Forms.OptionCollection, namespace: Aspose.Pdf.Forms
  DNSignature = interface; // type: Aspose.Pdf.Forms.Signature, namespace: Aspose.Pdf.Forms
  DNExternalSignature = interface; // type: Aspose.Pdf.Forms.ExternalSignature, namespace: Aspose.Pdf.Forms
  DNPKCS1 = interface; // type: Aspose.Pdf.Forms.PKCS1, namespace: Aspose.Pdf.Forms
  DNPKCS7 = interface; // type: Aspose.Pdf.Forms.PKCS7, namespace: Aspose.Pdf.Forms
  DNPKCS7Detached = interface; // type: Aspose.Pdf.Forms.PKCS7Detached, namespace: Aspose.Pdf.Forms
  DNSignatureCustomAppearance = interface; // type: Aspose.Pdf.Forms.SignatureCustomAppearance, namespace: Aspose.Pdf.Forms
  DNXFA = interface; // type: Aspose.Pdf.Forms.XFA, namespace: Aspose.Pdf.Forms
  DNGraphInfo = interface; // type: Aspose.Pdf.GraphInfo, namespace: Aspose.Pdf
  DNGroup = interface; // type: Aspose.Pdf.Group, namespace: Aspose.Pdf
  DNPdfTypeObjectCreator = interface; // type: Aspose.Pdf.GroupProcessor.Creators.PdfTypeObjectCreator, namespace: Aspose.Pdf.GroupProcessor.Creators
  DNExtractorFactory = interface; // type: Aspose.Pdf.GroupProcessor.ExtractorFactory, namespace: Aspose.Pdf.GroupProcessor
  DNHeaderFooter = interface; // type: Aspose.Pdf.HeaderFooter, namespace: Aspose.Pdf
  DNHtmlSaveOptions_CssSavingInfo = interface; // type: Aspose.Pdf.HtmlSaveOptions+CssSavingInfo, namespace: Aspose.Pdf
  DNHtmlSaveOptions_CssUrlRequestInfo = interface; // type: Aspose.Pdf.HtmlSaveOptions+CssUrlRequestInfo, namespace: Aspose.Pdf
  DNHtmlSaveOptions_HtmlPageMarkupSavingInfo = interface; // type: Aspose.Pdf.HtmlSaveOptions+HtmlPageMarkupSavingInfo, namespace: Aspose.Pdf
  DNHyperlink = interface; // type: Aspose.Pdf.Hyperlink, namespace: Aspose.Pdf
  DNFileHyperlink = interface; // type: Aspose.Pdf.FileHyperlink, namespace: Aspose.Pdf
  DNLocalHyperlink = interface; // type: Aspose.Pdf.LocalHyperlink, namespace: Aspose.Pdf
  DNWebHyperlink = interface; // type: Aspose.Pdf.WebHyperlink, namespace: Aspose.Pdf
  DNPdf_Id = interface; // type: Aspose.Pdf.Id, namespace: Aspose.Pdf
  DNImagePlacement = interface; // type: Aspose.Pdf.ImagePlacement, namespace: Aspose.Pdf
  DNImagePlacementAbsorber = interface; // type: Aspose.Pdf.ImagePlacementAbsorber, namespace: Aspose.Pdf
  DNImagePlacementCollection = interface; // type: Aspose.Pdf.ImagePlacementCollection, namespace: Aspose.Pdf
  DNImportOptions = interface; // type: Aspose.Pdf.ImportOptions, namespace: Aspose.Pdf
  DNCgmImportOptions = interface; // type: Aspose.Pdf.CgmImportOptions, namespace: Aspose.Pdf
  DNJavaScriptCollection = interface; // type: Aspose.Pdf.JavaScriptCollection, namespace: Aspose.Pdf
  DNLayer = interface; // type: Aspose.Pdf.Layer, namespace: Aspose.Pdf
  DNLevelFormat = interface; // type: Aspose.Pdf.LevelFormat, namespace: Aspose.Pdf
  DNLicense = interface; // type: Aspose.Pdf.License, namespace: Aspose.Pdf
  DNLoadOptions = interface; // type: Aspose.Pdf.LoadOptions, namespace: Aspose.Pdf
  DNApsLoadOptions = interface; // type: Aspose.Pdf.ApsLoadOptions, namespace: Aspose.Pdf
  DNCgmLoadOptions = interface; // type: Aspose.Pdf.CgmLoadOptions, namespace: Aspose.Pdf
  DNEpubLoadOptions = interface; // type: Aspose.Pdf.EpubLoadOptions, namespace: Aspose.Pdf
  DNHtmlLoadOptions = interface; // type: Aspose.Pdf.HtmlLoadOptions, namespace: Aspose.Pdf
  DNMdLoadOptions = interface; // type: Aspose.Pdf.MdLoadOptions, namespace: Aspose.Pdf
  DNMhtLoadOptions = interface; // type: Aspose.Pdf.MhtLoadOptions, namespace: Aspose.Pdf
  DNPclLoadOptions = interface; // type: Aspose.Pdf.PclLoadOptions, namespace: Aspose.Pdf
  DNPdfXmlLoadOptions = interface; // type: Aspose.Pdf.PdfXmlLoadOptions, namespace: Aspose.Pdf
  DNPsLoadOptions = interface; // type: Aspose.Pdf.PsLoadOptions, namespace: Aspose.Pdf
  DNSvgLoadOptions = interface; // type: Aspose.Pdf.SvgLoadOptions, namespace: Aspose.Pdf
  DNTeXLoadOptions = interface; // type: Aspose.Pdf.TeXLoadOptions, namespace: Aspose.Pdf
  DNLatexLoadOptions = interface; // type: Aspose.Pdf.LatexLoadOptions, namespace: Aspose.Pdf
  DNTxtLoadOptions = interface; // type: Aspose.Pdf.TxtLoadOptions, namespace: Aspose.Pdf
  DNXmlLoadOptions = interface; // type: Aspose.Pdf.XmlLoadOptions, namespace: Aspose.Pdf
  DNXslFoLoadOptions = interface; // type: Aspose.Pdf.XslFoLoadOptions, namespace: Aspose.Pdf
  DNXpsLoadOptions = interface; // type: Aspose.Pdf.XpsLoadOptions, namespace: Aspose.Pdf
  DNLoadOptions_ResourceLoadingResult = interface; // type: Aspose.Pdf.LoadOptions+ResourceLoadingResult, namespace: Aspose.Pdf
  DNAttributeKey = interface; // type: Aspose.Pdf.LogicalStructure.AttributeKey, namespace: Aspose.Pdf.LogicalStructure
  DNAttributeName = interface; // type: Aspose.Pdf.LogicalStructure.AttributeName, namespace: Aspose.Pdf.LogicalStructure
  DNAttributeOwnerStandard = interface; // type: Aspose.Pdf.LogicalStructure.AttributeOwnerStandard, namespace: Aspose.Pdf.LogicalStructure
  DNLogicalStructure_Element = interface; // type: Aspose.Pdf.LogicalStructure.Element, namespace: Aspose.Pdf.LogicalStructure
  DNMCRElement = interface; // type: Aspose.Pdf.LogicalStructure.MCRElement, namespace: Aspose.Pdf.LogicalStructure
  DNOBJRElement = interface; // type: Aspose.Pdf.LogicalStructure.OBJRElement, namespace: Aspose.Pdf.LogicalStructure
  DNStructTreeRootElement = interface; // type: Aspose.Pdf.LogicalStructure.StructTreeRootElement, namespace: Aspose.Pdf.LogicalStructure
  DNStructureElement = interface; // type: Aspose.Pdf.LogicalStructure.StructureElement, namespace: Aspose.Pdf.LogicalStructure
  DNBLSElement = interface; // type: Aspose.Pdf.LogicalStructure.BLSElement, namespace: Aspose.Pdf.LogicalStructure
  DNBLSTextElement = interface; // type: Aspose.Pdf.LogicalStructure.BLSTextElement, namespace: Aspose.Pdf.LogicalStructure
  DNHeaderElement = interface; // type: Aspose.Pdf.LogicalStructure.HeaderElement, namespace: Aspose.Pdf.LogicalStructure
  DNParagraphElement = interface; // type: Aspose.Pdf.LogicalStructure.ParagraphElement, namespace: Aspose.Pdf.LogicalStructure
  DNListElement = interface; // type: Aspose.Pdf.LogicalStructure.ListElement, namespace: Aspose.Pdf.LogicalStructure
  DNTableElement = interface; // type: Aspose.Pdf.LogicalStructure.TableElement, namespace: Aspose.Pdf.LogicalStructure
  DNGroupingElement = interface; // type: Aspose.Pdf.LogicalStructure.GroupingElement, namespace: Aspose.Pdf.LogicalStructure
  DNArtElement = interface; // type: Aspose.Pdf.LogicalStructure.ArtElement, namespace: Aspose.Pdf.LogicalStructure
  DNBlockQuoteElement = interface; // type: Aspose.Pdf.LogicalStructure.BlockQuoteElement, namespace: Aspose.Pdf.LogicalStructure
  DNCaptionElement = interface; // type: Aspose.Pdf.LogicalStructure.CaptionElement, namespace: Aspose.Pdf.LogicalStructure
  DNDivElement = interface; // type: Aspose.Pdf.LogicalStructure.DivElement, namespace: Aspose.Pdf.LogicalStructure
  DNDocumentElement = interface; // type: Aspose.Pdf.LogicalStructure.DocumentElement, namespace: Aspose.Pdf.LogicalStructure
  DNIndexElement = interface; // type: Aspose.Pdf.LogicalStructure.IndexElement, namespace: Aspose.Pdf.LogicalStructure
  DNNonStructElement = interface; // type: Aspose.Pdf.LogicalStructure.NonStructElement, namespace: Aspose.Pdf.LogicalStructure
  DNPartElement = interface; // type: Aspose.Pdf.LogicalStructure.PartElement, namespace: Aspose.Pdf.LogicalStructure
  DNPrivateElement = interface; // type: Aspose.Pdf.LogicalStructure.PrivateElement, namespace: Aspose.Pdf.LogicalStructure
  DNSectElement = interface; // type: Aspose.Pdf.LogicalStructure.SectElement, namespace: Aspose.Pdf.LogicalStructure
  DNTOCElement = interface; // type: Aspose.Pdf.LogicalStructure.TOCElement, namespace: Aspose.Pdf.LogicalStructure
  DNTOCIElement = interface; // type: Aspose.Pdf.LogicalStructure.TOCIElement, namespace: Aspose.Pdf.LogicalStructure
  DNIllustrationElement = interface; // type: Aspose.Pdf.LogicalStructure.IllustrationElement, namespace: Aspose.Pdf.LogicalStructure
  DNLogicalStructure_FigureElement = interface; // type: Aspose.Pdf.LogicalStructure.FigureElement, namespace: Aspose.Pdf.LogicalStructure
  DNFormElement = interface; // type: Aspose.Pdf.LogicalStructure.FormElement, namespace: Aspose.Pdf.LogicalStructure
  DNFormulaElement = interface; // type: Aspose.Pdf.LogicalStructure.FormulaElement, namespace: Aspose.Pdf.LogicalStructure
  DNILSElement = interface; // type: Aspose.Pdf.LogicalStructure.ILSElement, namespace: Aspose.Pdf.LogicalStructure
  DNAnnotationElement = interface; // type: Aspose.Pdf.LogicalStructure.AnnotationElement, namespace: Aspose.Pdf.LogicalStructure
  DNAnnotElement = interface; // type: Aspose.Pdf.LogicalStructure.AnnotElement, namespace: Aspose.Pdf.LogicalStructure
  DNLinkElement = interface; // type: Aspose.Pdf.LogicalStructure.LinkElement, namespace: Aspose.Pdf.LogicalStructure
  DNBibEntryElement = interface; // type: Aspose.Pdf.LogicalStructure.BibEntryElement, namespace: Aspose.Pdf.LogicalStructure
  DNILSTextElement = interface; // type: Aspose.Pdf.LogicalStructure.ILSTextElement, namespace: Aspose.Pdf.LogicalStructure
  DNCodeElement = interface; // type: Aspose.Pdf.LogicalStructure.CodeElement, namespace: Aspose.Pdf.LogicalStructure
  DNNoteElement = interface; // type: Aspose.Pdf.LogicalStructure.NoteElement, namespace: Aspose.Pdf.LogicalStructure
  DNQuoteElement = interface; // type: Aspose.Pdf.LogicalStructure.QuoteElement, namespace: Aspose.Pdf.LogicalStructure
  DNSpanElement = interface; // type: Aspose.Pdf.LogicalStructure.SpanElement, namespace: Aspose.Pdf.LogicalStructure
  DNReferenceElement = interface; // type: Aspose.Pdf.LogicalStructure.ReferenceElement, namespace: Aspose.Pdf.LogicalStructure
  DNRubyElement = interface; // type: Aspose.Pdf.LogicalStructure.RubyElement, namespace: Aspose.Pdf.LogicalStructure
  DNWarichuElement = interface; // type: Aspose.Pdf.LogicalStructure.WarichuElement, namespace: Aspose.Pdf.LogicalStructure
  DNListChildElement = interface; // type: Aspose.Pdf.LogicalStructure.ListChildElement, namespace: Aspose.Pdf.LogicalStructure
  DNListLblElement = interface; // type: Aspose.Pdf.LogicalStructure.ListLblElement, namespace: Aspose.Pdf.LogicalStructure
  DNListLBodyElement = interface; // type: Aspose.Pdf.LogicalStructure.ListLBodyElement, namespace: Aspose.Pdf.LogicalStructure
  DNListLIElement = interface; // type: Aspose.Pdf.LogicalStructure.ListLIElement, namespace: Aspose.Pdf.LogicalStructure
  DNRubyChildElement = interface; // type: Aspose.Pdf.LogicalStructure.RubyChildElement, namespace: Aspose.Pdf.LogicalStructure
  DNRubyRBElement = interface; // type: Aspose.Pdf.LogicalStructure.RubyRBElement, namespace: Aspose.Pdf.LogicalStructure
  DNRubyRPElement = interface; // type: Aspose.Pdf.LogicalStructure.RubyRPElement, namespace: Aspose.Pdf.LogicalStructure
  DNRubyRTElement = interface; // type: Aspose.Pdf.LogicalStructure.RubyRTElement, namespace: Aspose.Pdf.LogicalStructure
  DNTableChildElement = interface; // type: Aspose.Pdf.LogicalStructure.TableChildElement, namespace: Aspose.Pdf.LogicalStructure
  DNTableCellElement = interface; // type: Aspose.Pdf.LogicalStructure.TableCellElement, namespace: Aspose.Pdf.LogicalStructure
  DNTableTDElement = interface; // type: Aspose.Pdf.LogicalStructure.TableTDElement, namespace: Aspose.Pdf.LogicalStructure
  DNTableTHElement = interface; // type: Aspose.Pdf.LogicalStructure.TableTHElement, namespace: Aspose.Pdf.LogicalStructure
  DNTableRowCollectionElement = interface; // type: Aspose.Pdf.LogicalStructure.TableRowCollectionElement, namespace: Aspose.Pdf.LogicalStructure
  DNTableTBodyElement = interface; // type: Aspose.Pdf.LogicalStructure.TableTBodyElement, namespace: Aspose.Pdf.LogicalStructure
  DNTableTFootElement = interface; // type: Aspose.Pdf.LogicalStructure.TableTFootElement, namespace: Aspose.Pdf.LogicalStructure
  DNTableTHeadElement = interface; // type: Aspose.Pdf.LogicalStructure.TableTHeadElement, namespace: Aspose.Pdf.LogicalStructure
  DNTableTRElement = interface; // type: Aspose.Pdf.LogicalStructure.TableTRElement, namespace: Aspose.Pdf.LogicalStructure
  DNWarichuChildElement = interface; // type: Aspose.Pdf.LogicalStructure.WarichuChildElement, namespace: Aspose.Pdf.LogicalStructure
  DNWarichuWPElement = interface; // type: Aspose.Pdf.LogicalStructure.WarichuWPElement, namespace: Aspose.Pdf.LogicalStructure
  DNWarichuWTElement = interface; // type: Aspose.Pdf.LogicalStructure.WarichuWTElement, namespace: Aspose.Pdf.LogicalStructure
  DNElementList = interface; // type: Aspose.Pdf.LogicalStructure.ElementList, namespace: Aspose.Pdf.LogicalStructure
  DNStructureAttribute = interface; // type: Aspose.Pdf.LogicalStructure.StructureAttribute, namespace: Aspose.Pdf.LogicalStructure
  DNStructureAttributeCollection = interface; // type: Aspose.Pdf.LogicalStructure.StructureAttributeCollection, namespace: Aspose.Pdf.LogicalStructure
  DNStructureAttributes = interface; // type: Aspose.Pdf.LogicalStructure.StructureAttributes, namespace: Aspose.Pdf.LogicalStructure
  DNStructureTextState = interface; // type: Aspose.Pdf.LogicalStructure.StructureTextState, namespace: Aspose.Pdf.LogicalStructure
  DNStructureTypeCategory = interface; // type: Aspose.Pdf.LogicalStructure.StructureTypeCategory, namespace: Aspose.Pdf.LogicalStructure
  DNStructureTypeStandard = interface; // type: Aspose.Pdf.LogicalStructure.StructureTypeStandard, namespace: Aspose.Pdf.LogicalStructure
  DNMarginInfo = interface; // type: Aspose.Pdf.MarginInfo, namespace: Aspose.Pdf
  DNMatrix = interface; // type: Aspose.Pdf.Matrix, namespace: Aspose.Pdf
  DNMatrix3D = interface; // type: Aspose.Pdf.Matrix3D, namespace: Aspose.Pdf
  DNMetadata = interface; // type: Aspose.Pdf.Metadata, namespace: Aspose.Pdf
  DNMetered = interface; // type: Aspose.Pdf.Metered, namespace: Aspose.Pdf
  DNNamedDestinationCollection = interface; // type: Aspose.Pdf.NamedDestinationCollection, namespace: Aspose.Pdf
  DNNote = interface; // type: Aspose.Pdf.Note, namespace: Aspose.Pdf
  DNOcspSettings = interface; // type: Aspose.Pdf.OcspSettings, namespace: Aspose.Pdf
  DNOperator = interface; // type: Aspose.Pdf.Operator, namespace: Aspose.Pdf
  DNBDC = interface; // type: Aspose.Pdf.Operators.BDC, namespace: Aspose.Pdf.Operators
  DNBI = interface; // type: Aspose.Pdf.Operators.BI, namespace: Aspose.Pdf.Operators
  DNBMC = interface; // type: Aspose.Pdf.Operators.BMC, namespace: Aspose.Pdf.Operators
  DNBX = interface; // type: Aspose.Pdf.Operators.BX, namespace: Aspose.Pdf.Operators
  DNClip = interface; // type: Aspose.Pdf.Operators.Clip, namespace: Aspose.Pdf.Operators
  DNClosePath = interface; // type: Aspose.Pdf.Operators.ClosePath, namespace: Aspose.Pdf.Operators
  DNClosePathEOFillStroke = interface; // type: Aspose.Pdf.Operators.ClosePathEOFillStroke, namespace: Aspose.Pdf.Operators
  DNClosePathFillStroke = interface; // type: Aspose.Pdf.Operators.ClosePathFillStroke, namespace: Aspose.Pdf.Operators
  DNClosePathStroke = interface; // type: Aspose.Pdf.Operators.ClosePathStroke, namespace: Aspose.Pdf.Operators
  DNConcatenateMatrix = interface; // type: Aspose.Pdf.Operators.ConcatenateMatrix, namespace: Aspose.Pdf.Operators
  DNCurveTo = interface; // type: Aspose.Pdf.Operators.CurveTo, namespace: Aspose.Pdf.Operators
  DNCurveTo1 = interface; // type: Aspose.Pdf.Operators.CurveTo1, namespace: Aspose.Pdf.Operators
  DNCurveTo2 = interface; // type: Aspose.Pdf.Operators.CurveTo2, namespace: Aspose.Pdf.Operators
  DNDo = interface; // type: Aspose.Pdf.Operators.Do, namespace: Aspose.Pdf.Operators
  DNDP = interface; // type: Aspose.Pdf.Operators.DP, namespace: Aspose.Pdf.Operators
  DNEI = interface; // type: Aspose.Pdf.Operators.EI, namespace: Aspose.Pdf.Operators
  DNEMC = interface; // type: Aspose.Pdf.Operators.EMC, namespace: Aspose.Pdf.Operators
  DNEndPath = interface; // type: Aspose.Pdf.Operators.EndPath, namespace: Aspose.Pdf.Operators
  DNEOClip = interface; // type: Aspose.Pdf.Operators.EOClip, namespace: Aspose.Pdf.Operators
  DNEOFill = interface; // type: Aspose.Pdf.Operators.EOFill, namespace: Aspose.Pdf.Operators
  DNEOFillStroke = interface; // type: Aspose.Pdf.Operators.EOFillStroke, namespace: Aspose.Pdf.Operators
  DNEX = interface; // type: Aspose.Pdf.Operators.EX, namespace: Aspose.Pdf.Operators
  DNFill = interface; // type: Aspose.Pdf.Operators.Fill, namespace: Aspose.Pdf.Operators
  DNFillStroke = interface; // type: Aspose.Pdf.Operators.FillStroke, namespace: Aspose.Pdf.Operators
  DNGRestore = interface; // type: Aspose.Pdf.Operators.GRestore, namespace: Aspose.Pdf.Operators
  DNGS = interface; // type: Aspose.Pdf.Operators.GS, namespace: Aspose.Pdf.Operators
  DNGSave = interface; // type: Aspose.Pdf.Operators.GSave, namespace: Aspose.Pdf.Operators
  DNOperators_ID = interface; // type: Aspose.Pdf.Operators.ID, namespace: Aspose.Pdf.Operators
  DNLineTo = interface; // type: Aspose.Pdf.Operators.LineTo, namespace: Aspose.Pdf.Operators
  DNMoveTo = interface; // type: Aspose.Pdf.Operators.MoveTo, namespace: Aspose.Pdf.Operators
  DNMP = interface; // type: Aspose.Pdf.Operators.MP, namespace: Aspose.Pdf.Operators
  DNObsoleteFill = interface; // type: Aspose.Pdf.Operators.ObsoleteFill, namespace: Aspose.Pdf.Operators
  DNRe = interface; // type: Aspose.Pdf.Operators.Re, namespace: Aspose.Pdf.Operators
  DNSetCharWidth = interface; // type: Aspose.Pdf.Operators.SetCharWidth, namespace: Aspose.Pdf.Operators
  DNSetCharWidthBoundingBox = interface; // type: Aspose.Pdf.Operators.SetCharWidthBoundingBox, namespace: Aspose.Pdf.Operators
  DNSetColorOperator = interface; // type: Aspose.Pdf.Operators.SetColorOperator, namespace: Aspose.Pdf.Operators
  DNBasicSetColorOperator = interface; // type: Aspose.Pdf.Operators.BasicSetColorOperator, namespace: Aspose.Pdf.Operators
  DNBasicSetColorAndPatternOperator = interface; // type: Aspose.Pdf.Operators.BasicSetColorAndPatternOperator, namespace: Aspose.Pdf.Operators
  DNSetAdvancedColor = interface; // type: Aspose.Pdf.Operators.SetAdvancedColor, namespace: Aspose.Pdf.Operators
  DNSetAdvancedColorStroke = interface; // type: Aspose.Pdf.Operators.SetAdvancedColorStroke, namespace: Aspose.Pdf.Operators
  DNSetColor = interface; // type: Aspose.Pdf.Operators.SetColor, namespace: Aspose.Pdf.Operators
  DNSetColorStroke = interface; // type: Aspose.Pdf.Operators.SetColorStroke, namespace: Aspose.Pdf.Operators
  DNSetCMYKColor = interface; // type: Aspose.Pdf.Operators.SetCMYKColor, namespace: Aspose.Pdf.Operators
  DNSetCMYKColorStroke = interface; // type: Aspose.Pdf.Operators.SetCMYKColorStroke, namespace: Aspose.Pdf.Operators
  DNSetGray = interface; // type: Aspose.Pdf.Operators.SetGray, namespace: Aspose.Pdf.Operators
  DNSetGrayStroke = interface; // type: Aspose.Pdf.Operators.SetGrayStroke, namespace: Aspose.Pdf.Operators
  DNSetRGBColor = interface; // type: Aspose.Pdf.Operators.SetRGBColor, namespace: Aspose.Pdf.Operators
  DNSetRGBColorStroke = interface; // type: Aspose.Pdf.Operators.SetRGBColorStroke, namespace: Aspose.Pdf.Operators
  DNSetColorRenderingIntent = interface; // type: Aspose.Pdf.Operators.SetColorRenderingIntent, namespace: Aspose.Pdf.Operators
  DNSetColorSpace = interface; // type: Aspose.Pdf.Operators.SetColorSpace, namespace: Aspose.Pdf.Operators
  DNSetColorSpaceStroke = interface; // type: Aspose.Pdf.Operators.SetColorSpaceStroke, namespace: Aspose.Pdf.Operators
  DNSetDash = interface; // type: Aspose.Pdf.Operators.SetDash, namespace: Aspose.Pdf.Operators
  DNSetFlat = interface; // type: Aspose.Pdf.Operators.SetFlat, namespace: Aspose.Pdf.Operators
  DNSetLineCap = interface; // type: Aspose.Pdf.Operators.SetLineCap, namespace: Aspose.Pdf.Operators
  DNSetLineJoin = interface; // type: Aspose.Pdf.Operators.SetLineJoin, namespace: Aspose.Pdf.Operators
  DNSetLineWidth = interface; // type: Aspose.Pdf.Operators.SetLineWidth, namespace: Aspose.Pdf.Operators
  DNSetMiterLimit = interface; // type: Aspose.Pdf.Operators.SetMiterLimit, namespace: Aspose.Pdf.Operators
  DNShFill = interface; // type: Aspose.Pdf.Operators.ShFill, namespace: Aspose.Pdf.Operators
  DNStroke = interface; // type: Aspose.Pdf.Operators.Stroke, namespace: Aspose.Pdf.Operators
  DNTextOperator = interface; // type: Aspose.Pdf.Operators.TextOperator, namespace: Aspose.Pdf.Operators
  DNBlockTextOperator = interface; // type: Aspose.Pdf.Operators.BlockTextOperator, namespace: Aspose.Pdf.Operators
  DNBT = interface; // type: Aspose.Pdf.Operators.BT, namespace: Aspose.Pdf.Operators
  DNET = interface; // type: Aspose.Pdf.Operators.ET, namespace: Aspose.Pdf.Operators
  DNTextPlaceOperator = interface; // type: Aspose.Pdf.Operators.TextPlaceOperator, namespace: Aspose.Pdf.Operators
  DNMoveTextPosition = interface; // type: Aspose.Pdf.Operators.MoveTextPosition, namespace: Aspose.Pdf.Operators
  DNMoveTextPositionSetLeading = interface; // type: Aspose.Pdf.Operators.MoveTextPositionSetLeading, namespace: Aspose.Pdf.Operators
  DNMoveToNextLine = interface; // type: Aspose.Pdf.Operators.MoveToNextLine, namespace: Aspose.Pdf.Operators
  DNSetTextMatrix = interface; // type: Aspose.Pdf.Operators.SetTextMatrix, namespace: Aspose.Pdf.Operators
  DNTextShowOperator = interface; // type: Aspose.Pdf.Operators.TextShowOperator, namespace: Aspose.Pdf.Operators
  DNMoveToNextLineShowText = interface; // type: Aspose.Pdf.Operators.MoveToNextLineShowText, namespace: Aspose.Pdf.Operators
  DNSetGlyphsPositionShowText = interface; // type: Aspose.Pdf.Operators.SetGlyphsPositionShowText, namespace: Aspose.Pdf.Operators
  DNSetSpacingMoveToNextLineShowText = interface; // type: Aspose.Pdf.Operators.SetSpacingMoveToNextLineShowText, namespace: Aspose.Pdf.Operators
  DNShowText = interface; // type: Aspose.Pdf.Operators.ShowText, namespace: Aspose.Pdf.Operators
  DNTextStateOperator = interface; // type: Aspose.Pdf.Operators.TextStateOperator, namespace: Aspose.Pdf.Operators
  DNSelectFont = interface; // type: Aspose.Pdf.Operators.SelectFont, namespace: Aspose.Pdf.Operators
  DNSetCharacterSpacing = interface; // type: Aspose.Pdf.Operators.SetCharacterSpacing, namespace: Aspose.Pdf.Operators
  DNSetHorizontalTextScaling = interface; // type: Aspose.Pdf.Operators.SetHorizontalTextScaling, namespace: Aspose.Pdf.Operators
  DNSetTextLeading = interface; // type: Aspose.Pdf.Operators.SetTextLeading, namespace: Aspose.Pdf.Operators
  DNSetTextRenderingMode = interface; // type: Aspose.Pdf.Operators.SetTextRenderingMode, namespace: Aspose.Pdf.Operators
  DNSetTextRise = interface; // type: Aspose.Pdf.Operators.SetTextRise, namespace: Aspose.Pdf.Operators
  DNSetWordSpacing = interface; // type: Aspose.Pdf.Operators.SetWordSpacing, namespace: Aspose.Pdf.Operators
  DNGlyphPosition = interface; // type: Aspose.Pdf.Operators.GlyphPosition, namespace: Aspose.Pdf.Operators
  DNOperatorSelector = interface; // type: Aspose.Pdf.OperatorSelector, namespace: Aspose.Pdf
  DNOpi = interface; // type: Aspose.Pdf.Opi, namespace: Aspose.Pdf
  DNImageCompressionOptions = interface; // type: Aspose.Pdf.Optimization.ImageCompressionOptions, namespace: Aspose.Pdf.Optimization
  DNOptimizationOptions = interface; // type: Aspose.Pdf.Optimization.OptimizationOptions, namespace: Aspose.Pdf.Optimization
  DNDocument_OptimizationOptions = interface; // type: Aspose.Pdf.Document+OptimizationOptions, namespace: Aspose.Pdf
  DNOutlines = interface; // type: Aspose.Pdf.Outlines, namespace: Aspose.Pdf
  DNOutlineCollection = interface; // type: Aspose.Pdf.OutlineCollection, namespace: Aspose.Pdf
  DNOutlineItemCollection = interface; // type: Aspose.Pdf.OutlineItemCollection, namespace: Aspose.Pdf
  DNPage = interface; // type: Aspose.Pdf.Page, namespace: Aspose.Pdf
  DNPageCollection = interface; // type: Aspose.Pdf.PageCollection, namespace: Aspose.Pdf
  DNPageInfo = interface; // type: Aspose.Pdf.PageInfo, namespace: Aspose.Pdf
  DNPageLabel = interface; // type: Aspose.Pdf.PageLabel, namespace: Aspose.Pdf
  DNPageLabelCollection = interface; // type: Aspose.Pdf.PageLabelCollection, namespace: Aspose.Pdf
  DNPageSize = interface; // type: Aspose.Pdf.PageSize, namespace: Aspose.Pdf
  DNParagraphs = interface; // type: Aspose.Pdf.Paragraphs, namespace: Aspose.Pdf
  DNPdfANonSpecificationFlags = interface; // type: Aspose.Pdf.PdfANonSpecificationFlags, namespace: Aspose.Pdf
  DNFontEmbeddingOptions = interface; // type: Aspose.Pdf.PdfAOptionClasses.FontEmbeddingOptions, namespace: Aspose.Pdf.PdfAOptionClasses
  DNToUnicodeProcessingRules = interface; // type: Aspose.Pdf.PdfAOptionClasses.ToUnicodeProcessingRules, namespace: Aspose.Pdf.PdfAOptionClasses
  DNPdfASymbolicFontEncodingStrategy = interface; // type: Aspose.Pdf.PdfASymbolicFontEncodingStrategy, namespace: Aspose.Pdf
  DNPdfASymbolicFontEncodingStrategy_QueueItem = interface; // type: Aspose.Pdf.PdfASymbolicFontEncodingStrategy+QueueItem, namespace: Aspose.Pdf
  DNPdfFormatConversionOptions = interface; // type: Aspose.Pdf.PdfFormatConversionOptions, namespace: Aspose.Pdf
  DNPoint = interface; // type: Aspose.Pdf.Point, namespace: Aspose.Pdf
  DNPoint3D = interface; // type: Aspose.Pdf.Point3D, namespace: Aspose.Pdf
  DNPdf_Rectangle = interface; // type: Aspose.Pdf.Rectangle, namespace: Aspose.Pdf
  DNRenderingOptions = interface; // type: Aspose.Pdf.RenderingOptions, namespace: Aspose.Pdf
  DNResourceLoadingResult = interface; // type: Aspose.Pdf.ResourceLoadingResult, namespace: Aspose.Pdf
  DNResources = interface; // type: Aspose.Pdf.Resources, namespace: Aspose.Pdf
  DNRgbToDeviceGrayConversionStrategy = interface; // type: Aspose.Pdf.RgbToDeviceGrayConversionStrategy, namespace: Aspose.Pdf
  DNRow = interface; // type: Aspose.Pdf.Row, namespace: Aspose.Pdf
  DNRows = interface; // type: Aspose.Pdf.Rows, namespace: Aspose.Pdf
  DNSaveOptions = interface; // type: Aspose.Pdf.SaveOptions, namespace: Aspose.Pdf
  DNPdfSaveOptions = interface; // type: Aspose.Pdf.PdfSaveOptions, namespace: Aspose.Pdf
  DNUnifiedSaveOptions = interface; // type: Aspose.Pdf.UnifiedSaveOptions, namespace: Aspose.Pdf
  DNApsSaveOptions = interface; // type: Aspose.Pdf.ApsSaveOptions, namespace: Aspose.Pdf
  DNDocSaveOptions = interface; // type: Aspose.Pdf.DocSaveOptions, namespace: Aspose.Pdf
  DNEpubSaveOptions = interface; // type: Aspose.Pdf.EpubSaveOptions, namespace: Aspose.Pdf
  DNExcelSaveOptions = interface; // type: Aspose.Pdf.ExcelSaveOptions, namespace: Aspose.Pdf
  DNHtmlSaveOptions = interface; // type: Aspose.Pdf.HtmlSaveOptions, namespace: Aspose.Pdf
  DNMobiXmlSaveOptions = interface; // type: Aspose.Pdf.MobiXmlSaveOptions, namespace: Aspose.Pdf
  DNPdfXmlSaveOptions = interface; // type: Aspose.Pdf.PdfXmlSaveOptions, namespace: Aspose.Pdf
  DNPptxSaveOptions = interface; // type: Aspose.Pdf.PptxSaveOptions, namespace: Aspose.Pdf
  DNSvgSaveOptions = interface; // type: Aspose.Pdf.SvgSaveOptions, namespace: Aspose.Pdf
  DNTeXSaveOptions = interface; // type: Aspose.Pdf.TeXSaveOptions, namespace: Aspose.Pdf
  DNLaTeXSaveOptions = interface; // type: Aspose.Pdf.LaTeXSaveOptions, namespace: Aspose.Pdf
  DNXpsSaveOptions = interface; // type: Aspose.Pdf.XpsSaveOptions, namespace: Aspose.Pdf
  DNXmlSaveOptions = interface; // type: Aspose.Pdf.XmlSaveOptions, namespace: Aspose.Pdf
  DNSaveOptions_BorderInfo = interface; // type: Aspose.Pdf.SaveOptions+BorderInfo, namespace: Aspose.Pdf
  DNSaveOptions_BorderPartStyle = interface; // type: Aspose.Pdf.SaveOptions+BorderPartStyle, namespace: Aspose.Pdf
  DNSaveOptions_MarginInfo = interface; // type: Aspose.Pdf.SaveOptions+MarginInfo, namespace: Aspose.Pdf
  DNSaveOptions_MarginPartStyle = interface; // type: Aspose.Pdf.SaveOptions+MarginPartStyle, namespace: Aspose.Pdf
  DNSaveOptions_ResourceSavingInfo = interface; // type: Aspose.Pdf.SaveOptions+ResourceSavingInfo, namespace: Aspose.Pdf
  DNHtmlSaveOptions_HtmlImageSavingInfo = interface; // type: Aspose.Pdf.HtmlSaveOptions+HtmlImageSavingInfo, namespace: Aspose.Pdf
  DNSvgSaveOptions_SvgImageSavingInfo = interface; // type: Aspose.Pdf.SvgSaveOptions+SvgImageSavingInfo, namespace: Aspose.Pdf
  DNPdf_Stamp = interface; // type: Aspose.Pdf.Stamp, namespace: Aspose.Pdf
  DNImageStamp = interface; // type: Aspose.Pdf.ImageStamp, namespace: Aspose.Pdf
  DNPdfPageStamp = interface; // type: Aspose.Pdf.PdfPageStamp, namespace: Aspose.Pdf
  DNTextStamp = interface; // type: Aspose.Pdf.TextStamp, namespace: Aspose.Pdf
  DNPageNumberStamp = interface; // type: Aspose.Pdf.PageNumberStamp, namespace: Aspose.Pdf
  DNStructure_Element = interface; // type: Aspose.Pdf.Structure.Element, namespace: Aspose.Pdf.Structure
  DNStructure_FigureElement = interface; // type: Aspose.Pdf.Structure.FigureElement, namespace: Aspose.Pdf.Structure
  DNRootElement = interface; // type: Aspose.Pdf.Structure.RootElement, namespace: Aspose.Pdf.Structure
  DNStructElement = interface; // type: Aspose.Pdf.Structure.StructElement, namespace: Aspose.Pdf.Structure
  DNTextElement = interface; // type: Aspose.Pdf.Structure.TextElement, namespace: Aspose.Pdf.Structure
  DNAbsorbedCell = interface; // type: Aspose.Pdf.Text.AbsorbedCell, namespace: Aspose.Pdf.Text
  DNAbsorbedRow = interface; // type: Aspose.Pdf.Text.AbsorbedRow, namespace: Aspose.Pdf.Text
  DNAbsorbedTable = interface; // type: Aspose.Pdf.Text.AbsorbedTable, namespace: Aspose.Pdf.Text
  DNCharInfo = interface; // type: Aspose.Pdf.Text.CharInfo, namespace: Aspose.Pdf.Text
  DNCharInfoCollection = interface; // type: Aspose.Pdf.Text.CharInfoCollection, namespace: Aspose.Pdf.Text
  DNCustomFontSubstitutionBase_OriginalFontSpecification = interface; // type: Aspose.Pdf.Text.CustomFontSubstitutionBase+OriginalFontSpecification, namespace: Aspose.Pdf.Text
  DNFont = interface; // type: Aspose.Pdf.Text.Font, namespace: Aspose.Pdf.Text
  DNFontAbsorber = interface; // type: Aspose.Pdf.Text.FontAbsorber, namespace: Aspose.Pdf.Text
  DNFontCollection = interface; // type: Aspose.Pdf.Text.FontCollection, namespace: Aspose.Pdf.Text
  DNFontRepository = interface; // type: Aspose.Pdf.Text.FontRepository, namespace: Aspose.Pdf.Text
  DNFontSource = interface; // type: Aspose.Pdf.Text.FontSource, namespace: Aspose.Pdf.Text
  DNFileFontSource = interface; // type: Aspose.Pdf.Text.FileFontSource, namespace: Aspose.Pdf.Text
  DNFolderFontSource = interface; // type: Aspose.Pdf.Text.FolderFontSource, namespace: Aspose.Pdf.Text
  DNMemoryFontSource = interface; // type: Aspose.Pdf.Text.MemoryFontSource, namespace: Aspose.Pdf.Text
  DNSystemFontSource = interface; // type: Aspose.Pdf.Text.SystemFontSource, namespace: Aspose.Pdf.Text
  DNFontSourceCollection = interface; // type: Aspose.Pdf.Text.FontSourceCollection, namespace: Aspose.Pdf.Text
  DNFontSubstitution = interface; // type: Aspose.Pdf.Text.FontSubstitution, namespace: Aspose.Pdf.Text
  DNCustomFontSubstitutionBase = interface; // type: Aspose.Pdf.Text.CustomFontSubstitutionBase, namespace: Aspose.Pdf.Text
  DNSimpleFontSubstitution = interface; // type: Aspose.Pdf.Text.SimpleFontSubstitution, namespace: Aspose.Pdf.Text
  DNSystemFontsSubstitution = interface; // type: Aspose.Pdf.Text.SystemFontsSubstitution, namespace: Aspose.Pdf.Text
  DNFontSubstitutionCollection = interface; // type: Aspose.Pdf.Text.FontSubstitutionCollection, namespace: Aspose.Pdf.Text
  DNMarkupParagraph = interface; // type: Aspose.Pdf.Text.MarkupParagraph, namespace: Aspose.Pdf.Text
  DNMarkupSection = interface; // type: Aspose.Pdf.Text.MarkupSection, namespace: Aspose.Pdf.Text
  DNPageMarkup = interface; // type: Aspose.Pdf.Text.PageMarkup, namespace: Aspose.Pdf.Text
  DNParagraphAbsorber = interface; // type: Aspose.Pdf.Text.ParagraphAbsorber, namespace: Aspose.Pdf.Text
  DNPosition = interface; // type: Aspose.Pdf.Text.Position, namespace: Aspose.Pdf.Text
  DNTableAbsorber = interface; // type: Aspose.Pdf.Text.TableAbsorber, namespace: Aspose.Pdf.Text
  DNTabStop = interface; // type: Aspose.Pdf.Text.TabStop, namespace: Aspose.Pdf.Text
  DNTabStops = interface; // type: Aspose.Pdf.Text.TabStops, namespace: Aspose.Pdf.Text
  DNTextAbsorber = interface; // type: Aspose.Pdf.Text.TextAbsorber, namespace: Aspose.Pdf.Text
  DNTextFragmentAbsorber = interface; // type: Aspose.Pdf.Text.TextFragmentAbsorber, namespace: Aspose.Pdf.Text
  DNTextBuilder = interface; // type: Aspose.Pdf.Text.TextBuilder, namespace: Aspose.Pdf.Text
  DNTextExtractionError = interface; // type: Aspose.Pdf.Text.TextExtractionError, namespace: Aspose.Pdf.Text
  DNTextExtractionErrorLocation = interface; // type: Aspose.Pdf.Text.TextExtractionErrorLocation, namespace: Aspose.Pdf.Text
  DNTextFragmentCollection = interface; // type: Aspose.Pdf.Text.TextFragmentCollection, namespace: Aspose.Pdf.Text
  DNTextOptions = interface; // type: Aspose.Pdf.Text.TextOptions, namespace: Aspose.Pdf.Text
  DNTextEditOptions = interface; // type: Aspose.Pdf.Text.TextEditOptions, namespace: Aspose.Pdf.Text
  DNTextExtractionOptions = interface; // type: Aspose.Pdf.Text.TextExtractionOptions, namespace: Aspose.Pdf.Text
  DNTextFormattingOptions = interface; // type: Aspose.Pdf.Text.TextFormattingOptions, namespace: Aspose.Pdf.Text
  DNTextReplaceOptions = interface; // type: Aspose.Pdf.Text.TextReplaceOptions, namespace: Aspose.Pdf.Text
  DNTextSearchOptions = interface; // type: Aspose.Pdf.Text.TextSearchOptions, namespace: Aspose.Pdf.Text
  DNTextParagraph = interface; // type: Aspose.Pdf.Text.TextParagraph, namespace: Aspose.Pdf.Text
  DNTextSegment = interface; // type: Aspose.Pdf.Text.TextSegment, namespace: Aspose.Pdf.Text
  DNTextSegmentCollection = interface; // type: Aspose.Pdf.Text.TextSegmentCollection, namespace: Aspose.Pdf.Text
  DNTextState = interface; // type: Aspose.Pdf.Text.TextState, namespace: Aspose.Pdf.Text
  DNTextFragmentState = interface; // type: Aspose.Pdf.Text.TextFragmentState, namespace: Aspose.Pdf.Text
  DNTimestampSettings = interface; // type: Aspose.Pdf.TimestampSettings, namespace: Aspose.Pdf
  DNTocInfo = interface; // type: Aspose.Pdf.TocInfo, namespace: Aspose.Pdf
  DNUnifiedSaveOptions_ProgressEventHandlerInfo = interface; // type: Aspose.Pdf.UnifiedSaveOptions+ProgressEventHandlerInfo, namespace: Aspose.Pdf
  DNWarningInfo = interface; // type: Aspose.Pdf.WarningInfo, namespace: Aspose.Pdf
  DNWatermark = interface; // type: Aspose.Pdf.Watermark, namespace: Aspose.Pdf
  DNXfaParserOptions = interface; // type: Aspose.Pdf.XfaConverter.XfaParserOptions, namespace: Aspose.Pdf.XfaConverter
  DNXForm = interface; // type: Aspose.Pdf.XForm, namespace: Aspose.Pdf
  DNXFormCollection = interface; // type: Aspose.Pdf.XFormCollection, namespace: Aspose.Pdf
  DNXImage = interface; // type: Aspose.Pdf.XImage, namespace: Aspose.Pdf
  DNXImageCollection = interface; // type: Aspose.Pdf.XImageCollection, namespace: Aspose.Pdf
  DNXmpField = interface; // type: Aspose.Pdf.XmpField, namespace: Aspose.Pdf
  DNXmpPdfAExtensionObject = interface; // type: Aspose.Pdf.XmpPdfAExtensionObject, namespace: Aspose.Pdf
  DNXmpPdfAExtensionField = interface; // type: Aspose.Pdf.XmpPdfAExtensionField, namespace: Aspose.Pdf
  DNXmpPdfAExtensionProperty = interface; // type: Aspose.Pdf.XmpPdfAExtensionProperty, namespace: Aspose.Pdf
  DNXmpPdfAExtensionValueType = interface; // type: Aspose.Pdf.XmpPdfAExtensionValueType, namespace: Aspose.Pdf
  DNXmpPdfAExtensionSchema = interface; // type: Aspose.Pdf.XmpPdfAExtensionSchema, namespace: Aspose.Pdf
  DNXmpPdfAExtensionSchemaDescription = interface; // type: Aspose.Pdf.XmpPdfAExtensionSchemaDescription, namespace: Aspose.Pdf
  DNXmpValue = interface; // type: Aspose.Pdf.XmpValue, namespace: Aspose.Pdf
  DNDocumentInfo = interface; // type: Aspose.Pdf.DocumentInfo, namespace: Aspose.Pdf
  DNBookmarks = interface; // type: Aspose.Pdf.Facades.Bookmarks, namespace: Aspose.Pdf.Facades
  DNPrintController = interface; // type: Aspose.Pdf.PrintController, namespace: Aspose.Pdf
  DNResourceLoadingEventArgs = interface; // type: Aspose.Pdf.ResourceLoadingEventArgs, namespace: Aspose.Pdf
  DNIncorrectCMapUsageException = interface; // type: Aspose.Pdf.IncorrectCMapUsageException, namespace: Aspose.Pdf
  DNPdfException = interface; // type: Aspose.Pdf.PdfException, namespace: Aspose.Pdf
  DNEmptyValueException = interface; // type: Aspose.Pdf.EmptyValueException, namespace: Aspose.Pdf
  DNInvalidFileFormatException = interface; // type: Aspose.Pdf.InvalidFileFormatException, namespace: Aspose.Pdf
  DNIncorrectFontUsageException = interface; // type: Aspose.Pdf.IncorrectFontUsageException, namespace: Aspose.Pdf
  DNInvalidCgmFileFormatException = interface; // type: Aspose.Pdf.InvalidCgmFileFormatException, namespace: Aspose.Pdf
  DNInvalidPdfFileFormatException = interface; // type: Aspose.Pdf.InvalidPdfFileFormatException, namespace: Aspose.Pdf
  DNInvalidPasswordException = interface; // type: Aspose.Pdf.InvalidPasswordException, namespace: Aspose.Pdf
  DNInvalidValueFormatException = interface; // type: Aspose.Pdf.InvalidValueFormatException, namespace: Aspose.Pdf
  DNTaggedException = interface; // type: Aspose.Pdf.Tagged.TaggedException, namespace: Aspose.Pdf.Tagged
  DNSanitizationException = interface; // type: Aspose.Pdf.Sanitization.SanitizationException, namespace: Aspose.Pdf.Sanitization
  DNFontEmbeddingException = interface; // type: Aspose.Pdf.FontEmbeddingException, namespace: Aspose.Pdf
  DNFontNotFoundException = interface; // type: Aspose.Pdf.FontNotFoundException, namespace: Aspose.Pdf
  DNUnsupportedFontTypeException = interface; // type: Aspose.Pdf.UnsupportedFontTypeException, namespace: Aspose.Pdf
  DNInvalidFormTypeOperationException = interface; // type: Aspose.Pdf.InvalidFormTypeOperationException, namespace: Aspose.Pdf

{ delegates }

  [DNTypeName('Aspose.Pdf.Document+CallBackGetHocr')]
  DNDocument_CallBackGetHocr = function(img: DDN.System.Drawing.DNImage): string of object;

  [DNTypeName('Aspose.Pdf.Document+FontSubstitutionHandler')]
  DNDocument_FontSubstitutionHandler = procedure(oldFont: DNFont; newFont: DNFont) of object;

  [DNTypeName('Aspose.Pdf.Facades.PdfQueryPageSettingsEventHandler')]
  DNPdfQueryPageSettingsEventHandler = procedure(sender: DDN.mscorlib.DNObject; queryPageSettingsEventArgs: DDN.System.Drawing.DNQueryPageSettingsEventArgs; currentPageInfo: DNPdfPrintPageInfo) of object;

  [DNTypeName('Aspose.Pdf.HtmlSaveOptions+CssSavingStrategy')]
  DNHtmlSaveOptions_CssSavingStrategy = procedure(partSavingInfo: DNHtmlSaveOptions_CssSavingInfo) of object;

  [DNTypeName('Aspose.Pdf.HtmlSaveOptions+CssUrlMakingStrategy')]
  DNHtmlSaveOptions_CssUrlMakingStrategy = function(cssUrlRequestInfo: DNHtmlSaveOptions_CssUrlRequestInfo): string of object;

  [DNTypeName('Aspose.Pdf.HtmlSaveOptions+HtmlPageMarkupSavingStrategy')]
  DNHtmlSaveOptions_HtmlPageMarkupSavingStrategy = procedure(htmlSavingInfo: DNHtmlSaveOptions_HtmlPageMarkupSavingInfo) of object;

  [DNTypeName('Aspose.Pdf.HtmlSaveOptions+ResourceSavingStrategy')]
  DNHtmlSaveOptions_ResourceSavingStrategy = function(resourceSavingInfo: DNSaveOptions_ResourceSavingInfo): string of object;

  [DNTypeName('Aspose.Pdf.LoadOptions+ResourceLoadingStrategy')]
  DNLoadOptions_ResourceLoadingStrategy = function(resourceURI: string): DNLoadOptions_ResourceLoadingResult of object;

  [DNTypeName('Aspose.Pdf.Page+BeforePageGenerate')]
  DNPage_BeforePageGenerate = procedure(page: DNPage) of object;

  [DNTypeName('Aspose.Pdf.SvgSaveOptions+EmbeddedImagesSavingStrategy')]
  DNSvgSaveOptions_EmbeddedImagesSavingStrategy = function(imageSavingInfo: DNSvgSaveOptions_SvgImageSavingInfo): string of object;

  [DNTypeName('Aspose.Pdf.UnifiedSaveOptions+ConversionProgressEventHandler')]
  DNUnifiedSaveOptions_ConversionProgressEventHandler = procedure(eventInfo: DNUnifiedSaveOptions_ProgressEventHandlerInfo) of object;




{ objects }

  //-------------namespace: Aspose.Pdf.Annotations----------------
  [DNTypeName('Aspose.Pdf.Annotations.IAnnotationVisitor')]
  DNIAnnotationVisitor = interface(DDN.mscorlib.DNObject)
  ['{B5C685A3-5B12-3DD9-9BD3-D667C6B6BDF5}']
  { methods } 

    procedure Visit(link: DNLinkAnnotation); overload;
    procedure Visit(attachment: DNFileAttachmentAnnotation); overload;
    procedure Visit(text: DNTextAnnotation); overload;
    procedure Visit(freetext: DNFreeTextAnnotation); overload;
    procedure Visit(highlight: DNHighlightAnnotation); overload;
    procedure Visit(underline: DNUnderlineAnnotation); overload;
    procedure Visit(strikeOut: DNStrikeOutAnnotation); overload;
    procedure Visit(squiggly: DNSquigglyAnnotation); overload;
    procedure Visit(popup: DNPopupAnnotation); overload;
    procedure Visit(line: DNLineAnnotation); overload;
    procedure Visit(circle: DNCircleAnnotation); overload;
    procedure Visit(square: DNSquareAnnotation); overload;
    procedure Visit(ink: DNInkAnnotation); overload;
    procedure Visit(polyline: DNPolylineAnnotation); overload;
    procedure Visit(polygon: DNPolygonAnnotation); overload;
    procedure Visit(caret: DNCaretAnnotation); overload;
    procedure Visit(stamp: DNStampAnnotation); overload;
    procedure Visit(widget: DNWidgetAnnotation); overload;
    procedure Visit(movie: DNMovieAnnotation); overload;
    procedure Visit(screen: DNScreenAnnotation); overload;

  end;

  //-------------namespace: Aspose.Pdf.Annotations----------------
  [DNTypeName('Aspose.Pdf.Annotations.IAppointment')]
  DNIAppointment = interface(DDN.mscorlib.DNObject)
  ['{68FB3EE4-EEF7-3960-89B4-EDD99C58EBEB}']
  { methods } 

    function ToString: string;

  end;

  //-------------namespace: Aspose.Pdf----------------
  [DNTypeName('Aspose.Pdf.Document+IDocumentFontUtilities')]
  DNDocument_IDocumentFontUtilities = interface(DDN.mscorlib.DNObject)
  ['{11514758-1979-37EB-8B5A-C57E8CFCCA29}']
  { methods } 

    procedure SubsetFonts(subsetStrategy: DNFontSubsetStrategy);
    function GetAllFonts: TArray<DNFont>;

  end;

  //-------------namespace: Aspose.Pdf.GroupProcessor----------------
  [DNTypeName('Aspose.Pdf.GroupProcessor.IDocumentPageTextExtractor')]
  DNIDocumentPageTextExtractor = interface(DDN.mscorlib.DNObject)
  ['{556CA483-2857-3EFC-869B-CD8FD671AAE4}']
  { getters & setters } 

    function get_PageCount: Int32;

  { methods } 

    function ExtractPageText(pageNumber: Int32): string;

  { propertys } 

    property PageCount: Int32 read get_PageCount;
  end;

  //-------------namespace: Aspose.Pdf.GroupProcessor----------------
  [DNTypeName('Aspose.Pdf.GroupProcessor.IDocumentTextExtractor')]
  DNIDocumentTextExtractor = interface(DDN.mscorlib.DNObject)
  ['{B3CBA481-8821-3208-A5B2-7BD3C456389F}']
  { methods } 

    function ExtractAllText: TArray<string>;

  end;

  //-------------namespace: Aspose.Pdf.GroupProcessor----------------
  [DNTypeName('Aspose.Pdf.GroupProcessor.IPdfTypeExtractor')]
  DNIPdfTypeExtractor = interface(DNIDocumentTextExtractor)
  ['{1980B518-B706-36EE-8626-EF1D2522C93C}']
  { getters & setters } 

    function get_PageCount: Int32;
    function get_Version: string;
    function get_IsFastExtractionUsed: Boolean;

  { methods } 

    function ExtractAllText: TArray<string>;
    function ExtractPageText(pageNumber: Int32): string;
    procedure Dispose;

  { propertys } 

    property PageCount: Int32 read get_PageCount;
    property Version: string read get_Version;
    property IsFastExtractionUsed: Boolean read get_IsFastExtractionUsed;
  end;

  //-------------namespace: Aspose.Pdf----------------
  [DNTypeName('Aspose.Pdf.IColorSpaceConversionStrategy')]
  DNIColorSpaceConversionStrategy = interface(DDN.mscorlib.DNObject)
  ['{29DCF425-B108-3A96-9B1D-66E5EF8542D8}']
  { methods } 

    procedure Convert(page: DNPage);

  end;

  //-------------namespace: Aspose.Pdf----------------
  [DNTypeName('Aspose.Pdf.IIndexBitmapConverter')]
  DNIIndexBitmapConverter = interface(DDN.mscorlib.DNObject)
  ['{D38C3BEE-DACA-37A9-B276-D2E356990339}']
  { methods } 

    function Get1BppImage(src: DDN.System.Drawing.DNBitmap): DDN.System.Drawing.DNBitmap;
    function Get4BppImage(src: DDN.System.Drawing.DNBitmap): DDN.System.Drawing.DNBitmap;
    function Get8BppImage(src: DDN.System.Drawing.DNBitmap): DDN.System.Drawing.DNBitmap;

  end;

  //-------------namespace: Aspose.Pdf----------------
  [DNTypeName('Aspose.Pdf.INamedDestinationCollection')]
  DNINamedDestinationCollection = interface(DDN.mscorlib.DNObject)
  ['{FC4347DF-8EEF-383A-8259-26E3FB8BCABC}']
  { getters & setters } 

    function get_Item(name: string): DNIAppointment;
    procedure set_Item(name: string; value: DNIAppointment);
    function get_Count: Int32;
    function get_Names: TArray<string>;

  { methods } 

    procedure Remove(name: string);
    procedure Add(name: string; appointment: DNIAppointment);

  { propertys } 

    property Item[name: string]: DNIAppointment read get_Item write set_Item; default;
    property Count: Int32 read get_Count;
    property Names: TArray<string> read get_Names;
  end;

  //-------------namespace: Aspose.Pdf----------------
  [DNTypeName('Aspose.Pdf.IOperatorSelector')]
  DNIOperatorSelector = interface(DDN.mscorlib.DNObject)
  ['{53222EBF-0D3E-3609-AB15-676640C489C8}']
  { methods } 

    procedure Visit(f: DNFill); overload;
    procedure Visit(F: DNObsoleteFill); overload;
    procedure Visit(f_: DNEOFill); overload;
    procedure Visit(G: DNSetGrayStroke); overload;
    procedure Visit(g: DNSetGray); overload;
    procedure Visit(gs: DNGS); overload;
    procedure Visit(h: DNClosePath); overload;
    procedure Visit(i: DNSetFlat); overload;
    procedure Visit(ID: DNOperators_ID); overload;
    procedure Visit(ri: DNSetColorRenderingIntent); overload;
    procedure Visit(J: DNSetLineCap); overload;
    procedure Visit(M: DNSetMiterLimit); overload;
    procedure Visit(MP: DNMP); overload;
    procedure Visit(n: DNEndPath); overload;
    procedure Visit(q: DNGSave); overload;
    procedure Visit(Q: DNGRestore); overload;
    procedure Visit(re: DNRe); overload;
    procedure Visit(RG: DNSetRGBColorStroke); overload;
    procedure Visit(rg: DNSetRGBColor); overload;
    procedure Visit(K: DNSetCMYKColorStroke); overload;
    procedure Visit(k: DNSetCMYKColor); overload;
    procedure Visit(l: DNLineTo); overload;
    procedure Visit(m: DNMoveTo); overload;
    procedure Visit(Tw: DNSetWordSpacing); overload;
    procedure Visit(s: DNClosePathStroke); overload;
    procedure Visit(TD: DNMoveTextPositionSetLeading); overload;
    procedure Visit(Tf: DNSelectFont); overload;
    procedure Visit(Tj: DNShowText); overload;
    procedure Visit(TJ: DNSetGlyphsPositionShowText); overload;
    procedure Visit(TL: DNSetTextLeading); overload;
    procedure Visit(Tm: DNSetTextMatrix); overload;
    procedure Visit(Tr: DNSetTextRenderingMode); overload;
    procedure Visit(Ts: DNSetTextRise); overload;
    procedure Visit(S: DNStroke); overload;
    procedure Visit(SC: DNSetColorStroke); overload;
    procedure Visit(sc: DNSetColor); overload;
    procedure Visit(SCN: DNSetAdvancedColorStroke); overload;
    procedure Visit(scn: DNSetAdvancedColor); overload;
    procedure Visit(sh: DNShFill); overload;
    procedure Visit(T_: DNMoveToNextLine); overload;
    procedure Visit(Tc: DNSetCharacterSpacing); overload;
    procedure Visit(Td: DNMoveTextPosition); overload;
    procedure Visit(y: DNCurveTo2); overload;
    procedure Visit(W_: DNEOClip); overload;
    procedure Visit(Tz: DNSetHorizontalTextScaling); overload;
    procedure Visit(v: DNCurveTo1); overload;
    procedure Visit(W: DNClip); overload;
    procedure Visit(w: DNSetLineWidth); overload;
    procedure Visit(j: DNSetLineJoin); overload;
    procedure Visit(EX: DNEX); overload;
    procedure Visit(ET: DNET); overload;
    procedure Visit(EMC: DNEMC); overload;
    procedure Visit(EI: DNEI); overload;
    procedure Visit(DP: DNDP); overload;
    procedure Visit(&Do: DNDo); overload;
    procedure Visit(d: DNSetDash); overload;
    procedure Visit(d0: DNSetCharWidth); overload;
    procedure Visit(d1: DNSetCharWidthBoundingBox); overload;
    procedure Visit(CS: DNSetColorSpaceStroke); overload;
    procedure Visit(cs: DNSetColorSpace); overload;
    procedure Visit(cm: DNConcatenateMatrix); overload;
    procedure Visit(c: DNCurveTo); overload;
    procedure Visit(BX: DNBX); overload;
    procedure Visit(BT: DNBT); overload;
    procedure Visit(BMC: DNBMC); overload;
    procedure Visit(BI: DNBI); overload;
    procedure Visit(BDC: DNBDC); overload;
    procedure Visit(B: DNFillStroke); overload;
    procedure Visit(b: DNClosePathFillStroke); overload;
    procedure Visit(B_: DNEOFillStroke); overload;
    procedure Visit(b_: DNClosePathEOFillStroke); overload;
    procedure Visit(_: DNMoveToNextLineShowText); overload;
    procedure Visit(__: DNSetSpacingMoveToNextLineShowText); overload;
    procedure Visit(textOperator: DNTextOperator); overload;

  end;

  //-------------namespace: Aspose.Pdf----------------
  [DNTypeName('Aspose.Pdf.IPageSetOptions')]
  DNIPageSetOptions = interface(DDN.mscorlib.DNObject)
  ['{12D7FFEC-5638-32A5-A8F7-4E47210D47F7}']
  { getters & setters } 

    function get_ExplicitListOfSavedPages: TArray<Int32>;
    procedure set_ExplicitListOfSavedPages(value: TArray<Int32>);

  { propertys } 

    property ExplicitListOfSavedPages: TArray<Int32> read get_ExplicitListOfSavedPages write set_ExplicitListOfSavedPages;
  end;

  //-------------namespace: Aspose.Pdf----------------
  [DNTypeName('Aspose.Pdf.IPipelineOptions')]
  DNIPipelineOptions = interface(DDN.mscorlib.DNObject)
  ['{F491BECB-C63F-3B3B-B17B-C82069D0294C}']
  { getters & setters } 

    function get_BatchSize: Int32;
    procedure set_BatchSize(value: Int32);

  { propertys } 

    property BatchSize: Int32 read get_BatchSize write set_BatchSize;
  end;

  //-------------namespace: Aspose.Pdf----------------
  [DNTypeName('Aspose.Pdf.IResourceLoadingCallback')]
  DNIResourceLoadingCallback = interface(DDN.mscorlib.DNObject)
  ['{539BB742-5A4A-3CA6-8ECC-8494E425137C}']
  { methods } 

    function ResourceLoading(sender: DDN.mscorlib.DNObject; e: DNResourceLoadingEventArgs): DNResourceLoadingResult;

  end;

  //-------------namespace: Aspose.Pdf----------------
  [DNTypeName('Aspose.Pdf.IWarningCallback')]
  DNIWarningCallback = interface(DDN.mscorlib.DNObject)
  ['{C893114E-B519-3477-A372-3112A391C27D}']
  { methods } 

    function Warning(warning: DNWarningInfo): DNReturnAction;

  end;

  //-------------namespace: Aspose.Pdf.LogicalStructure----------------
  [DNTypeName('Aspose.Pdf.LogicalStructure.ITextElement')]
  DNITextElement = interface(DDN.mscorlib.DNObject)
  ['{A30E0947-1393-3425-BBB1-933E19BA0CEB}']
  { getters & setters } 

    function get_StructureTextState: DNStructureTextState;

  { methods } 

    procedure SetText(text: string);

  { propertys } 

    property StructureTextState: DNStructureTextState read get_StructureTextState;
  end;

  //-------------namespace: Aspose.Pdf.Tagged----------------
  [DNTypeName('Aspose.Pdf.Tagged.ITaggedContent')]
  DNITaggedContent = interface(DDN.mscorlib.DNObject)
  ['{39803D5A-A88B-32F6-9518-64C316D9DB06}']
  { getters & setters } 

    function get_StructureTextState: DNStructureTextState;
    function get_StructTreeRootElement: DNStructTreeRootElement;
    function get_RootElement: DNStructureElement;

  { methods } 

    procedure SetLanguage(lang: string);
    procedure SetTitle(title: string);
    function CreatePartElement: DNPartElement;
    function CreateArtElement: DNArtElement;
    function CreateSectElement: DNSectElement;
    function CreateDivElement: DNDivElement;
    function CreateBlockQuoteElement: DNBlockQuoteElement;
    function CreateCaptionElement: DNCaptionElement;
    function CreateTOCElement: DNTOCElement;
    function CreateTOCIElement: DNTOCIElement;
    function CreateIndexElement: DNIndexElement;
    function CreateNonStructElement: DNNonStructElement;
    function CreatePrivateElement: DNPrivateElement;
    function CreateParagraphElement: DNParagraphElement;
    function CreateHeaderElement: DNHeaderElement; overload;
    function CreateHeaderElement(level: Int32): DNHeaderElement; overload;
    function CreateListElement: DNListElement;
    function CreateTableElement: DNTableElement;
    function CreateTableTHeadElement: DNTableTHeadElement;
    function CreateTableTBodyElement: DNTableTBodyElement;
    function CreateTableTFootElement: DNTableTFootElement;
    function CreateTableTRElement: DNTableTRElement;
    function CreateTableTHElement: DNTableTHElement;
    function CreateTableTDElement: DNTableTDElement;
    function CreateSpanElement: DNSpanElement;
    function CreateQuoteElement: DNQuoteElement;
    function CreateNoteElement: DNNoteElement;
    function CreateReferenceElement: DNReferenceElement;
    function CreateBibEntryElement: DNBibEntryElement;
    function CreateCodeElement: DNCodeElement;
    function CreateLinkElement: DNLinkElement;
    function CreateAnnotElement: DNAnnotElement;
    function CreateRubyElement: DNRubyElement;
    function CreateWarichuElement: DNWarichuElement;
    function CreateFigureElement: DNLogicalStructure_FigureElement;
    function CreateFormulaElement: DNFormulaElement;
    function CreateFormElement: DNFormElement;

  { propertys } 

    property StructureTextState: DNStructureTextState read get_StructureTextState;
    property StructTreeRootElement: DNStructTreeRootElement read get_StructTreeRootElement;
    property RootElement: DNStructureElement read get_RootElement;
  end;

  //-------------namespace: Aspose.Pdf.Text----------------
  [DNTypeName('Aspose.Pdf.Text.IFontOptions')]
  DNIFontOptions = interface(DDN.mscorlib.DNObject)
  ['{D0475854-BC93-35F9-A734-E7C255E441EA}']
  { getters & setters } 

    function get_NotifyAboutFontEmbeddingError: Boolean;
    procedure set_NotifyAboutFontEmbeddingError(value: Boolean);

  { propertys } 

    property NotifyAboutFontEmbeddingError: Boolean read get_NotifyAboutFontEmbeddingError write set_NotifyAboutFontEmbeddingError;
  end;

  //-------------namespace: Aspose.Pdf.Text----------------
  [DNTypeName('Aspose.Pdf.Text.ITableElement')]
  DNITableElement = interface(DDN.mscorlib.DNObject)
  ['{05D456CE-8272-313C-8CE0-E47BD16B8618}']
  { getters & setters } 

    function get_Rectangle: DNPdf_Rectangle;

  { propertys } 

    property Rectangle: DNPdf_Rectangle read get_Rectangle;
  end;

  //-------------namespace: Aspose.Pdf.Facades----------------
  [DNTypeName('Aspose.Pdf.Facades.IFacade')]
  DNIFacade = interface(DDN.mscorlib.DNIDisposable)
  ['{FC5E8C17-4B73-3AB9-87F6-7B05370683D5}']
  { methods } 

    procedure BindPdf(srcFile: string); overload;
    procedure BindPdf(srcStream: DDN.mscorlib.DNStream); overload;
    procedure BindPdf(srcDoc: DNDocument); overload;
    procedure Close;

  end;

  //-------------namespace: Aspose.Pdf.Facades----------------
  [DNTypeName('Aspose.Pdf.Facades.ISaveableFacade')]
  DNISaveableFacade = interface(DNIFacade)
  ['{B3768FA2-D883-37E2-BC87-5E5D7655FA29}']
  { methods } 

    procedure Save(destFile: string); overload;
    procedure Save(destStream: DDN.mscorlib.DNStream); overload;

  end;

  //-------------namespace: Aspose.Pdf.Annotations----------------
  DNActionCollectionClass = interface(DDN.mscorlib.DNObjectClass)
  ['{529DA8E0-CA2E-53F1-BDA8-024F3A35A41E}']
  end;

  [DNTypeName('Aspose.Pdf.Annotations.ActionCollection')]
  DNActionCollection = interface(DDN.mscorlib.DNObject)
  ['{8425AAA6-173B-3773-B1C2-B8D586560C7E}']
  { getters & setters } 

    function get_Count: Int32;
    function get_IsSynchronized: Boolean;
    function get_SyncRoot: DDN.mscorlib.DNObject;
    function get_IsReadOnly: Boolean;
    function get_Item(index: Int32): DNPdfAction;

  { methods } 

    procedure Delete(index: Int32); overload;
    procedure Delete; overload;
    procedure CopyTo(&array: TArray<DNPdfAction>; index: Int32);
    function GetEnumerator: DDN.mscorlib.DNIEnumerator<DNPdfAction>;
    function &Contains(item: DNPdfAction): Boolean;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Count: Int32 read get_Count;
    property IsSynchronized: Boolean read get_IsSynchronized;
    property SyncRoot: DDN.mscorlib.DNObject read get_SyncRoot;
    property IsReadOnly: Boolean read get_IsReadOnly;
    property Item[index: Int32]: DNPdfAction read get_Item; default;
  end;

  TDNActionCollection = class(TDNGenericImport<DNActionCollectionClass, DNActionCollection>) end;

  //-------------namespace: Aspose.Pdf.Annotations----------------
  DNAnnotationCollectionClass = interface(DDN.mscorlib.DNObjectClass)
  ['{B3970C9A-DC82-51A2-B34B-EAEA329D837B}']
  end;

  [DNTypeName('Aspose.Pdf.Annotations.AnnotationCollection')]
  DNAnnotationCollection = interface(DDN.mscorlib.DNObject)
  ['{E070C097-B984-3D69-8AC2-DF14715576F8}']
  { getters & setters } 

    function get_IsSynchronized: Boolean;
    function get_SyncRoot: DDN.mscorlib.DNObject;
    function get_Count: Int32;
    function get_IsReadOnly: Boolean;
    function get_Item(index: Int32): DNAnnotation;

  { methods } 

    procedure Add(annotation: DNAnnotation; considerRotation: Boolean);
    procedure Delete(index: Int32); overload;
    procedure Delete; overload;
    procedure CopyTo(&array: TArray<DNAnnotation>; index: Int32);
    function GetEnumerator: DDN.mscorlib.DNIEnumerator<DNAnnotation>;
    procedure Accept(visitor: DNAnnotationSelector);
    procedure Delete(annotation: DNAnnotation); overload;
    function &Contains(annotation: DNAnnotation): Boolean;
    function FindByName(name: string): DNAnnotation;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property IsSynchronized: Boolean read get_IsSynchronized;
    property SyncRoot: DDN.mscorlib.DNObject read get_SyncRoot;
    property Count: Int32 read get_Count;
    property IsReadOnly: Boolean read get_IsReadOnly;
    property Item[index: Int32]: DNAnnotation read get_Item; default;
  end;

  TDNAnnotationCollection = class(TDNGenericImport<DNAnnotationCollectionClass, DNAnnotationCollection>) end;

  //-------------namespace: Aspose.Pdf.Annotations----------------
  DNAnnotationSelectorClass = interface(DNObjectClass)
  ['{19187F87-EF9E-5492-B4CC-ADB2FB4D621F}']
  { constructors } 

    {class} function init: DNAnnotationSelector; overload;
    {class} function init(annotation: DNAnnotation): DNAnnotationSelector; overload;

  end;

  [DNTypeName('Aspose.Pdf.Annotations.AnnotationSelector')]
  DNAnnotationSelector = interface(DNIAnnotationVisitor)
  ['{AF620BE3-42DD-3C06-B70D-08DDC587EF1F}']
  { getters & setters } 

    function get_Selected: DDN.mscorlib.DNIList<DNAnnotation>;

  { methods } 

    procedure Visit(redact: DNRedactionAnnotation); overload;
    procedure Visit(watermark: DNWatermarkAnnotation); overload;
    procedure Visit(richMedia: DNRichMediaAnnotation); overload;
    procedure Visit(pdf3D: DNPDF3DAnnotation); overload;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Selected: DDN.mscorlib.DNIList<DNAnnotation> read get_Selected;
  end;

  TDNAnnotationSelector = class(TDNGenericImport<DNAnnotationSelectorClass, DNAnnotationSelector>) end;

  //-------------namespace: Aspose.Pdf.Annotations----------------
  DNAppearanceDictionaryClass = interface(DDN.mscorlib.DNObjectClass)
  ['{6240BC5A-C56E-570C-B139-D44758952125}']
  end;

  [DNTypeName('Aspose.Pdf.Annotations.AppearanceDictionary')]
  DNAppearanceDictionary = interface(DDN.mscorlib.DNObject)
  ['{0318009F-4470-3ACF-B6BB-8DC5B0D2A5EB}']
  { getters & setters } 

    function get_IsReadOnly: Boolean;
    function get_IsFixedSize: Boolean;
    function get_Keys: DDN.mscorlib.DNICollection<string>;
    function get_Values: DDN.mscorlib.DNICollection<DNXForm>;
    function get_IsSynchronized: Boolean;
    function get_SyncRoot: DDN.mscorlib.DNObject;
    function get_Count: Int32;

  { methods } 

    procedure Add(key: DDN.mscorlib.DNObject; value: DDN.mscorlib.DNObject);
    function GetEnumerator: DDN.mscorlib.DNIEnumerator<DDN.mscorlib.DNKeyValuePair<string, DNXForm>>;
    procedure CopyTo(&array: TArray<DNXForm>; index: Int32); overload;
    function ContainsKey(key: string): Boolean;
    function TryGetValue(key: string; out value: DNXForm): Boolean;
    function &Contains(item: DDN.mscorlib.DNKeyValuePair<string, DNXForm>): Boolean;
    procedure CopyTo(&array: TArray<DDN.mscorlib.DNKeyValuePair<string, DNXForm>>; arrayIndex: Int32); overload;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property IsReadOnly: Boolean read get_IsReadOnly;
    property IsFixedSize: Boolean read get_IsFixedSize;
    property Keys: DDN.mscorlib.DNICollection<string> read get_Keys;
    property Values: DDN.mscorlib.DNICollection<DNXForm> read get_Values;
    property IsSynchronized: Boolean read get_IsSynchronized;
    property SyncRoot: DDN.mscorlib.DNObject read get_SyncRoot;
    property Count: Int32 read get_Count;
  end;

  TDNAppearanceDictionary = class(TDNGenericImport<DNAppearanceDictionaryClass, DNAppearanceDictionary>) end;

  //-------------namespace: Aspose.Pdf.Annotations----------------
  DNBorderClass = interface(DDN.mscorlib.DNObjectClass)
  ['{5434F105-53F8-54BB-B7F1-9BEFDDABA890}']
  { constructors } 

    {class} function init(parent: DNAnnotation): DNBorder;

  end;

  [DNTypeName('Aspose.Pdf.Annotations.Border')]
  DNBorder = interface(DDN.mscorlib.DNObject)
  ['{76717D34-90E4-32B7-971D-9D6C4E10D9D0}']
  { getters & setters } 

    function get_HCornerRadius: Double;
    procedure set_HCornerRadius(value: Double);
    function get_VCornerRadius: Double;
    procedure set_VCornerRadius(value: Double);
    function get_Width: Int32;
    procedure set_Width(value: Int32);
    function get_EffectIntensity: Int32;
    procedure set_EffectIntensity(value: Int32);
    function get_Style: DNBorderStyle;
    procedure set_Style(value: DNBorderStyle);
    function get_Effect: DNBorderEffect;
    procedure set_Effect(value: DNBorderEffect);
    function get_Dash: DNDash;
    procedure set_Dash(value: DNDash);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property HCornerRadius: Double read get_HCornerRadius write set_HCornerRadius;
    property VCornerRadius: Double read get_VCornerRadius write set_VCornerRadius;
    property Width: Int32 read get_Width write set_Width;
    property EffectIntensity: Int32 read get_EffectIntensity write set_EffectIntensity;
    property Style: DNBorderStyle read get_Style write set_Style;
    property Effect: DNBorderEffect read get_Effect write set_Effect;
    property Dash: DNDash read get_Dash write set_Dash;
  end;

  TDNBorder = class(TDNGenericImport<DNBorderClass, DNBorder>) end;

  //-------------namespace: Aspose.Pdf.Annotations----------------
  DNCharacteristicsClass = interface(DDN.mscorlib.DNObjectClass)
  ['{66A1C1B6-C4A2-5642-94E9-4CC0FF892201}']
  end;

  [DNTypeName('Aspose.Pdf.Annotations.Characteristics')]
  DNCharacteristics = interface(DDN.mscorlib.DNObject)
  ['{3897DFE0-7206-3F09-8D25-B1F3D756C48A}']
  { getters & setters } 

    function get_Background: DDN.System.Drawing.DNColor;
    procedure set_Background(value: DDN.System.Drawing.DNColor);
    function get_Border: DDN.System.Drawing.DNColor;
    procedure set_Border(value: DDN.System.Drawing.DNColor);
    function get_Rotate: DNRotation;
    procedure set_Rotate(value: DNRotation);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Background: DDN.System.Drawing.DNColor read get_Background write set_Background;
    property Border: DDN.System.Drawing.DNColor read get_Border write set_Border;
    property Rotate: DNRotation read get_Rotate write set_Rotate;
  end;

  TDNCharacteristics = class(TDNGenericImport<DNCharacteristicsClass, DNCharacteristics>) end;

  //-------------namespace: Aspose.Pdf.Annotations----------------
  DNDashClass = interface(DDN.mscorlib.DNObjectClass)
  ['{0A727230-E2E8-5334-9DD3-289FF55E8B67}']
  { constructors } 

    {class} function init(&on: Int32; off: Int32): DNDash;

  end;

  [DNTypeName('Aspose.Pdf.Annotations.Dash')]
  DNDash = interface(DDN.mscorlib.DNObject)
  ['{4878B964-A0CC-3A98-8A45-AC67A4D27743}']
  { getters & setters } 

    function get_On: Int32;
    procedure set_On(value: Int32);
    function get_Off: Int32;
    procedure set_Off(value: Int32);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property &On: Int32 read get_On write set_On;
    property Off: Int32 read get_Off write set_Off;
  end;

  TDNDash = class(TDNGenericImport<DNDashClass, DNDash>) end;

  //-------------namespace: Aspose.Pdf.Annotations----------------
  DNDefaultAppearanceClass = interface(DDN.mscorlib.DNObjectClass)
  ['{18DD0221-5384-5B8A-A1FB-2BE3DEF9D36A}']
  { constructors } 

    {class} function init: DNDefaultAppearance; overload;
    {class} function init(fontName: string; fontSize: Double; textColor: DDN.System.Drawing.DNColor): DNDefaultAppearance; overload;
    {class} function init(font: DNFont; fontSize: Double; textColor: DDN.System.Drawing.DNColor): DNDefaultAppearance; overload;

  end;

  [DNTypeName('Aspose.Pdf.Annotations.DefaultAppearance')]
  DNDefaultAppearance = interface(DDN.mscorlib.DNObject)
  ['{303E8695-441E-3B5E-8B6D-6CCFD5452AC1}']
  { getters & setters } 

    function get_FontSize: Double;
    procedure set_FontSize(value: Double);
    function get_TextColor: DDN.System.Drawing.DNColor;
    procedure set_TextColor(value: DDN.System.Drawing.DNColor);
    function get_FontName: string;
    procedure set_FontName(value: string);
    function get_Font: DNFont;
    function get_Text: string;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property FontSize: Double read get_FontSize write set_FontSize;
    property TextColor: DDN.System.Drawing.DNColor read get_TextColor write set_TextColor;
    property FontName: string read get_FontName write set_FontName;
    property Font: DNFont read get_Font;
    property Text: string read get_Text;
  end;

  TDNDefaultAppearance = class(TDNGenericImport<DNDefaultAppearanceClass, DNDefaultAppearance>) end;

  //-------------namespace: Aspose.Pdf.Annotations----------------
  DNDocumentActionCollectionClass = interface(DDN.mscorlib.DNObjectClass)
  ['{BBA10093-ED23-50F5-AAD0-AC2A756B3B53}']
  { constructors } 

    {class} function init(document: DNDocument): DNDocumentActionCollection;

  end;

  [DNTypeName('Aspose.Pdf.Annotations.DocumentActionCollection')]
  DNDocumentActionCollection = interface(DDN.mscorlib.DNObject)
  ['{81D0D694-8BB5-3E2E-AA9A-E0CF84A1484F}']
  { getters & setters } 

    function get_BeforeSaving: DNPdfAction;
    procedure set_BeforeSaving(value: DNPdfAction);
    function get_BeforeClosing: DNPdfAction;
    procedure set_BeforeClosing(value: DNPdfAction);
    function get_AfterSaving: DNPdfAction;
    procedure set_AfterSaving(value: DNPdfAction);
    function get_BeforePrinting: DNPdfAction;
    procedure set_BeforePrinting(value: DNPdfAction);
    function get_AfterPrinting: DNPdfAction;
    procedure set_AfterPrinting(value: DNPdfAction);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property BeforeSaving: DNPdfAction read get_BeforeSaving write set_BeforeSaving;
    property BeforeClosing: DNPdfAction read get_BeforeClosing write set_BeforeClosing;
    property AfterSaving: DNPdfAction read get_AfterSaving write set_AfterSaving;
    property BeforePrinting: DNPdfAction read get_BeforePrinting write set_BeforePrinting;
    property AfterPrinting: DNPdfAction read get_AfterPrinting write set_AfterPrinting;
  end;

  TDNDocumentActionCollection = class(TDNGenericImport<DNDocumentActionCollectionClass, DNDocumentActionCollection>) end;

  //-------------namespace: Aspose.Pdf.Annotations----------------
  DNExplicitDestinationClass = interface(DNObjectClass)
  ['{B6388C7D-3B3C-54CB-9B9A-3DED06AA9734}']
  { static methods } 

    {class} function CreateDestination(page: DNPage; &type: DNExplicitDestinationType; values: TArray<Double>): DNExplicitDestination; overload;
    {class} function CreateDestination(doc: DNDocument; pageNumber: Int32; &type: DNExplicitDestinationType; values: TArray<Double>): DNExplicitDestination; overload;
    {class} function CreateDestination(pageNumber: Int32; &type: DNExplicitDestinationType; values: TArray<Double>): DNExplicitDestination; overload;

  end;

  [DNTypeName('Aspose.Pdf.Annotations.ExplicitDestination')]
  DNExplicitDestination = interface(DNIAppointment)
  ['{77CEED46-EDDA-3EBD-964A-4EDD38FBB3E7}']
  { getters & setters } 

    function get_Page: DNPage;
    function get_PageNumber: Int32;

  { methods } 

    function ToString: string;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    property Page: DNPage read get_Page;
    property PageNumber: Int32 read get_PageNumber;
  end;

  TDNExplicitDestination = class(TDNGenericImport<DNExplicitDestinationClass, DNExplicitDestination>) end;

  //-------------namespace: Aspose.Pdf.Annotations----------------
  DNCustomExplicitDestinationClass = interface(DNExplicitDestinationClass)
  ['{42140D29-872D-5B05-B839-F3CC488FE4FB}']
  end;

  [DNTypeName('Aspose.Pdf.Annotations.CustomExplicitDestination')]
  DNCustomExplicitDestination = interface(DNExplicitDestination)
  ['{9A73082D-727C-388B-8F9B-057FC3D4367D}']
  { getters & setters } 

    function get_Page: DNPage;
    function get_PageNumber: Int32;

  { methods } 

    function ToString: string;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    property Page: DNPage read get_Page;
    property PageNumber: Int32 read get_PageNumber;
  end;

  TDNCustomExplicitDestination = class(TDNGenericImport<DNCustomExplicitDestinationClass, DNCustomExplicitDestination>) end;

  //-------------namespace: Aspose.Pdf.Annotations----------------
  DNFitBExplicitDestinationClass = interface(DNExplicitDestinationClass)
  ['{0B7E45DA-0265-5FB4-8B66-3FD9AC3A6F00}']
  { constructors } 

    {class} function init(page: DNPage): DNFitBExplicitDestination; overload;
    {class} function init(document: DNDocument; pageNumber: Int32): DNFitBExplicitDestination; overload;
    {class} function init(pageNumber: Int32): DNFitBExplicitDestination; overload;

  end;

  [DNTypeName('Aspose.Pdf.Annotations.FitBExplicitDestination')]
  DNFitBExplicitDestination = interface(DNExplicitDestination)
  ['{32C01FE2-2C24-3621-9E07-D4BC7EA97F4F}']
  { getters & setters } 

    function get_Page: DNPage;
    function get_PageNumber: Int32;

  { methods } 

    function ToString: string;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    property Page: DNPage read get_Page;
    property PageNumber: Int32 read get_PageNumber;
  end;

  TDNFitBExplicitDestination = class(TDNGenericImport<DNFitBExplicitDestinationClass, DNFitBExplicitDestination>) end;

  //-------------namespace: Aspose.Pdf.Annotations----------------
  DNFitBHExplicitDestinationClass = interface(DNExplicitDestinationClass)
  ['{D8221FA8-C725-5004-9B57-6DFFFFDCC8D6}']
  { constructors } 

    {class} function init(page: DNPage; top: Double): DNFitBHExplicitDestination; overload;
    {class} function init(document: DNDocument; pageNumber: Int32; top: Double): DNFitBHExplicitDestination; overload;
    {class} function init(pageNumber: Int32; top: Double): DNFitBHExplicitDestination; overload;

  end;

  [DNTypeName('Aspose.Pdf.Annotations.FitBHExplicitDestination')]
  DNFitBHExplicitDestination = interface(DNExplicitDestination)
  ['{E5565A32-7E6D-3EFD-BE51-99D1B16DA8AC}']
  { getters & setters } 

    function get_Top: Double;
    function get_Page: DNPage;
    function get_PageNumber: Int32;

  { methods } 

    function ToString: string;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    property Top: Double read get_Top;
    property Page: DNPage read get_Page;
    property PageNumber: Int32 read get_PageNumber;
  end;

  TDNFitBHExplicitDestination = class(TDNGenericImport<DNFitBHExplicitDestinationClass, DNFitBHExplicitDestination>) end;

  //-------------namespace: Aspose.Pdf.Annotations----------------
  DNFitBVExplicitDestinationClass = interface(DNExplicitDestinationClass)
  ['{AD5ED94B-9C6D-5644-A52F-ECA90C8D9A5A}']
  { constructors } 

    {class} function init(page: DNPage; left: Double): DNFitBVExplicitDestination; overload;
    {class} function init(document: DNDocument; pageNumber: Int32; left: Double): DNFitBVExplicitDestination; overload;
    {class} function init(pageNumber: Int32; left: Double): DNFitBVExplicitDestination; overload;

  end;

  [DNTypeName('Aspose.Pdf.Annotations.FitBVExplicitDestination')]
  DNFitBVExplicitDestination = interface(DNExplicitDestination)
  ['{F39AF27F-9A2C-38D0-92AB-B9CF8C694C28}']
  { getters & setters } 

    function get_Left: Double;
    function get_Page: DNPage;
    function get_PageNumber: Int32;

  { methods } 

    function ToString: string;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    property Left: Double read get_Left;
    property Page: DNPage read get_Page;
    property PageNumber: Int32 read get_PageNumber;
  end;

  TDNFitBVExplicitDestination = class(TDNGenericImport<DNFitBVExplicitDestinationClass, DNFitBVExplicitDestination>) end;

  //-------------namespace: Aspose.Pdf.Annotations----------------
  DNFitExplicitDestinationClass = interface(DNExplicitDestinationClass)
  ['{C4E7AED2-CA9D-51CD-83FB-5D94E81BBA6B}']
  { constructors } 

    {class} function init(page: DNPage): DNFitExplicitDestination; overload;
    {class} function init(document: DNDocument; pageNumber: Int32): DNFitExplicitDestination; overload;
    {class} function init(pageNumber: Int32): DNFitExplicitDestination; overload;

  end;

  [DNTypeName('Aspose.Pdf.Annotations.FitExplicitDestination')]
  DNFitExplicitDestination = interface(DNExplicitDestination)
  ['{C76393F1-03DB-3D72-957D-F9342C3E7FD0}']
  { getters & setters } 

    function get_Page: DNPage;
    function get_PageNumber: Int32;

  { methods } 

    function ToString: string;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    property Page: DNPage read get_Page;
    property PageNumber: Int32 read get_PageNumber;
  end;

  TDNFitExplicitDestination = class(TDNGenericImport<DNFitExplicitDestinationClass, DNFitExplicitDestination>) end;

  //-------------namespace: Aspose.Pdf.Annotations----------------
  DNFitHExplicitDestinationClass = interface(DNExplicitDestinationClass)
  ['{0829E5C3-01E5-5999-B50D-AD612071BC8D}']
  { constructors } 

    {class} function init(page: DNPage; top: Double): DNFitHExplicitDestination; overload;
    {class} function init(document: DNDocument; pageNumber: Int32; top: Double): DNFitHExplicitDestination; overload;
    {class} function init(pageNumber: Int32; top: Double): DNFitHExplicitDestination; overload;

  end;

  [DNTypeName('Aspose.Pdf.Annotations.FitHExplicitDestination')]
  DNFitHExplicitDestination = interface(DNExplicitDestination)
  ['{2656A15D-A429-391B-9A80-54BBCC1F2CAA}']
  { getters & setters } 

    function get_Top: Double;
    function get_Page: DNPage;
    function get_PageNumber: Int32;

  { methods } 

    function ToString: string;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    property Top: Double read get_Top;
    property Page: DNPage read get_Page;
    property PageNumber: Int32 read get_PageNumber;
  end;

  TDNFitHExplicitDestination = class(TDNGenericImport<DNFitHExplicitDestinationClass, DNFitHExplicitDestination>) end;

  //-------------namespace: Aspose.Pdf.Annotations----------------
  DNFitRExplicitDestinationClass = interface(DNExplicitDestinationClass)
  ['{14C84A1C-B8FE-5C79-BD91-B424BF6D5B7F}']
  { constructors } 

    {class} function init(page: DNPage; left: Double; bottom: Double; right: Double; top: Double): DNFitRExplicitDestination; overload;
    {class} function init(document: DNDocument; pageNumber: Int32; left: Double; bottom: Double; right: Double; top: Double): DNFitRExplicitDestination; overload;
    {class} function init(pageNumber: Int32; left: Double; bottom: Double; right: Double; top: Double): DNFitRExplicitDestination; overload;

  end;

  [DNTypeName('Aspose.Pdf.Annotations.FitRExplicitDestination')]
  DNFitRExplicitDestination = interface(DNExplicitDestination)
  ['{EDA25105-E3C6-3369-A4EC-37036AC0BCDA}']
  { getters & setters } 

    function get_Left: Double;
    function get_Bottom: Double;
    function get_Right: Double;
    function get_Top: Double;
    function get_Page: DNPage;
    function get_PageNumber: Int32;

  { methods } 

    function ToString: string;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    property Left: Double read get_Left;
    property Bottom: Double read get_Bottom;
    property Right: Double read get_Right;
    property Top: Double read get_Top;
    property Page: DNPage read get_Page;
    property PageNumber: Int32 read get_PageNumber;
  end;

  TDNFitRExplicitDestination = class(TDNGenericImport<DNFitRExplicitDestinationClass, DNFitRExplicitDestination>) end;

  //-------------namespace: Aspose.Pdf.Annotations----------------
  DNFitVExplicitDestinationClass = interface(DNExplicitDestinationClass)
  ['{50DCB931-3046-5457-ACC1-4FE56C37E596}']
  { constructors } 

    {class} function init(page: DNPage; left: Double): DNFitVExplicitDestination; overload;
    {class} function init(document: DNDocument; pageNumber: Int32; left: Double): DNFitVExplicitDestination; overload;
    {class} function init(pageNumber: Int32; left: Double): DNFitVExplicitDestination; overload;

  end;

  [DNTypeName('Aspose.Pdf.Annotations.FitVExplicitDestination')]
  DNFitVExplicitDestination = interface(DNExplicitDestination)
  ['{6E435F34-903A-3C3B-9741-D433ACC0EC12}']
  { getters & setters } 

    function get_Left: Double;
    function get_Page: DNPage;
    function get_PageNumber: Int32;

  { methods } 

    function ToString: string;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    property Left: Double read get_Left;
    property Page: DNPage read get_Page;
    property PageNumber: Int32 read get_PageNumber;
  end;

  TDNFitVExplicitDestination = class(TDNGenericImport<DNFitVExplicitDestinationClass, DNFitVExplicitDestination>) end;

  //-------------namespace: Aspose.Pdf.Annotations----------------
  DNXYZExplicitDestinationClass = interface(DNExplicitDestinationClass)
  ['{7A21B98E-4D6F-5320-9797-C5BC7E51AA6B}']
  { constructors } 

    {class} function init(page: DNPage; left: Double; top: Double; zoom: Double): DNXYZExplicitDestination; overload;
    {class} function init(document: DNDocument; pageNumber: Int32; left: Double; top: Double; zoom: Double): DNXYZExplicitDestination; overload;
    {class} function init(pageNumber: Int32; left: Double; top: Double; zoom: Double): DNXYZExplicitDestination; overload;

  { static methods } 

    {class} function CreateDestination(page: DNPage; left: Double; top: Double; zoom: Double; considerRotation: Boolean): DNXYZExplicitDestination;
    {class} function CreateDestinationToUpperLeftCorner(page: DNPage; zoom: Double): DNXYZExplicitDestination; overload;
    {class} function CreateDestinationToUpperLeftCorner(page: DNPage): DNXYZExplicitDestination; overload;

  end;

  [DNTypeName('Aspose.Pdf.Annotations.XYZExplicitDestination')]
  DNXYZExplicitDestination = interface(DNExplicitDestination)
  ['{707A55F5-B34E-3730-8C1B-45196CBC74CA}']
  { getters & setters } 

    function get_Left: Double;
    function get_Top: Double;
    function get_Zoom: Double;
    function get_Page: DNPage;
    function get_PageNumber: Int32;

  { methods } 

    function ToString: string;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    property Left: Double read get_Left;
    property Top: Double read get_Top;
    property Zoom: Double read get_Zoom;
    property Page: DNPage read get_Page;
    property PageNumber: Int32 read get_PageNumber;
  end;

  TDNXYZExplicitDestination = class(TDNGenericImport<DNXYZExplicitDestinationClass, DNXYZExplicitDestination>) end;

  //-------------namespace: Aspose.Pdf.Annotations----------------
  DNFixedPrintClass = interface(DDN.mscorlib.DNObjectClass)
  ['{F278111F-A571-5DA8-91DB-E26870D42E1F}']
  end;

  [DNTypeName('Aspose.Pdf.Annotations.FixedPrint')]
  DNFixedPrint = interface(DDN.mscorlib.DNObject)
  ['{F762CF66-308B-3CA1-B130-F1E117230995}']
  { getters & setters } 

    function get_Matrix: DNMatrix;
    procedure set_Matrix(value: DNMatrix);
    function get_HorizontalTranslation: Double;
    procedure set_HorizontalTranslation(value: Double);
    function get_VerticalTranslation: Double;
    procedure set_VerticalTranslation(value: Double);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Matrix: DNMatrix read get_Matrix write set_Matrix;
    property HorizontalTranslation: Double read get_HorizontalTranslation write set_HorizontalTranslation;
    property VerticalTranslation: Double read get_VerticalTranslation write set_VerticalTranslation;
  end;

  TDNFixedPrint = class(TDNGenericImport<DNFixedPrintClass, DNFixedPrint>) end;

  //-------------namespace: Aspose.Pdf.Annotations----------------
  DNMeasureClass = interface(DDN.mscorlib.DNObjectClass)
  ['{7A038E47-AF30-5726-8A9B-F4D46A403AD6}']
  { constructors } 

    {class} function init(annotation: DNAnnotation): DNMeasure;

  end;

  [DNTypeName('Aspose.Pdf.Annotations.Measure')]
  DNMeasure = interface(DDN.mscorlib.DNObject)
  ['{A505924C-5D69-3E2A-852B-6117E17C90C5}']
  { getters & setters } 

    function get_ScaleRatio: string;
    procedure set_ScaleRatio(value: string);
    function get_XFormat: DNMeasure_NumberFormatList;
    procedure set_XFormat(value: DNMeasure_NumberFormatList);
    function get_YFormat: DNMeasure_NumberFormatList;
    procedure set_YFormat(value: DNMeasure_NumberFormatList);
    function get_DistanceFormat: DNMeasure_NumberFormatList;
    procedure set_DistanceFormat(value: DNMeasure_NumberFormatList);
    function get_AreaFormat: DNMeasure_NumberFormatList;
    procedure set_AreaFormat(value: DNMeasure_NumberFormatList);
    function get_AngleFormat: DNMeasure_NumberFormatList;
    procedure set_AngleFormat(value: DNMeasure_NumberFormatList);
    function get_SlopeFormat: DNMeasure_NumberFormatList;
    procedure set_SlopeFormat(value: DNMeasure_NumberFormatList);
    function get_Origin: DNPoint;
    procedure set_Origin(value: DNPoint);
    function get_XYFactor: Double;
    procedure set_XYFactor(value: Double);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property ScaleRatio: string read get_ScaleRatio write set_ScaleRatio;
    property XFormat: DNMeasure_NumberFormatList read get_XFormat write set_XFormat;
    property YFormat: DNMeasure_NumberFormatList read get_YFormat write set_YFormat;
    property DistanceFormat: DNMeasure_NumberFormatList read get_DistanceFormat write set_DistanceFormat;
    property AreaFormat: DNMeasure_NumberFormatList read get_AreaFormat write set_AreaFormat;
    property AngleFormat: DNMeasure_NumberFormatList read get_AngleFormat write set_AngleFormat;
    property SlopeFormat: DNMeasure_NumberFormatList read get_SlopeFormat write set_SlopeFormat;
    property Origin: DNPoint read get_Origin write set_Origin;
    property XYFactor: Double read get_XYFactor write set_XYFactor;
  end;

  TDNMeasure = class(TDNGenericImport<DNMeasureClass, DNMeasure>) end;

  //-------------namespace: Aspose.Pdf.Annotations----------------
  DNMeasure_NumberFormatClass = interface(DDN.mscorlib.DNObjectClass)
  ['{AAE2B89F-15EF-58FE-A65A-CB34A6A14757}']
  { constructors } 

    {class} function init(measure: DNMeasure): DNMeasure_NumberFormat;

  end;

  [DNTypeName('Aspose.Pdf.Annotations.Measure+NumberFormat')]
  DNMeasure_NumberFormat = interface(DDN.mscorlib.DNObject)
  ['{F8AFC3C0-1B42-3BD8-997E-1FFF7D53B5EC}']
  { getters & setters } 

    function get_UnitLabel: string;
    procedure set_UnitLabel(value: string);
    function get_ConvresionFactor: Double;
    procedure set_ConvresionFactor(value: Double);
    function get_FractionDisplayment: DNMeasure_NumberFormat_FractionStyle;
    procedure set_FractionDisplayment(value: DNMeasure_NumberFormat_FractionStyle);
    function get_Precision: Int32;
    procedure set_Precision(value: Int32);
    function get_Denominator: Int32;
    procedure set_Denominator(value: Int32);
    function get_ForceDenominator: Boolean;
    procedure set_ForceDenominator(value: Boolean);
    function get_ThousandsSeparator: string;
    procedure set_ThousandsSeparator(value: string);
    function get_FractionSeparator: string;
    procedure set_FractionSeparator(value: string);
    function get_BeforeText: string;
    procedure set_BeforeText(value: string);
    function get_AfterText: string;
    procedure set_AfterText(value: string);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property UnitLabel: string read get_UnitLabel write set_UnitLabel;
    property ConvresionFactor: Double read get_ConvresionFactor write set_ConvresionFactor;
    property FractionDisplayment: DNMeasure_NumberFormat_FractionStyle read get_FractionDisplayment write set_FractionDisplayment;
    property Precision: Int32 read get_Precision write set_Precision;
    property Denominator: Int32 read get_Denominator write set_Denominator;
    property ForceDenominator: Boolean read get_ForceDenominator write set_ForceDenominator;
    property ThousandsSeparator: string read get_ThousandsSeparator write set_ThousandsSeparator;
    property FractionSeparator: string read get_FractionSeparator write set_FractionSeparator;
    property BeforeText: string read get_BeforeText write set_BeforeText;
    property AfterText: string read get_AfterText write set_AfterText;
  end;

  TDNMeasure_NumberFormat = class(TDNGenericImport<DNMeasure_NumberFormatClass, DNMeasure_NumberFormat>) end;

  //-------------namespace: Aspose.Pdf.Annotations----------------
  DNMeasure_NumberFormatListClass = interface(DDN.mscorlib.DNObjectClass)
  ['{1A856092-2F7F-52B6-9CB0-FB60151F4BE9}']
  { constructors } 

    {class} function init(measure: DNMeasure): DNMeasure_NumberFormatList;

  end;

  [DNTypeName('Aspose.Pdf.Annotations.Measure+NumberFormatList')]
  DNMeasure_NumberFormatList = interface(DDN.mscorlib.DNObject)
  ['{EF97B762-8F1E-3094-8C65-9597F67603EC}']
  { getters & setters } 

    function get_Item(index: Int32): DNMeasure_NumberFormat;
    procedure set_Item(index: Int32; value: DNMeasure_NumberFormat);
    function get_Count: Int32;

  { methods } 

    procedure Add(value: DNMeasure_NumberFormat);
    procedure Insert(index: Int32; value: DNMeasure_NumberFormat);
    procedure RemoveAt(index: Int32);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Item[index: Int32]: DNMeasure_NumberFormat read get_Item write set_Item; default;
    property Count: Int32 read get_Count;
  end;

  TDNMeasure_NumberFormatList = class(TDNGenericImport<DNMeasure_NumberFormatListClass, DNMeasure_NumberFormatList>) end;

  //-------------namespace: Aspose.Pdf.Annotations----------------
  DNMediaClipClass = interface(DDN.mscorlib.DNObjectClass)
  ['{CE1AD388-6BF1-5D79-A777-240F47A5B42E}']
  end;

  [DNTypeName('Aspose.Pdf.Annotations.MediaClip')]
  DNMediaClip = interface(DDN.mscorlib.DNObject)
  ['{44C3072D-29BE-3736-BFA1-6D72389FAA36}']
  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNMediaClip = class(TDNGenericImport<DNMediaClipClass, DNMediaClip>) end;

  //-------------namespace: Aspose.Pdf.Annotations----------------
  DNMediaClipDataClass = interface(DNMediaClipClass)
  ['{8B66413D-1E64-54F9-A5E5-F2B0A1A3D4F3}']
  end;

  [DNTypeName('Aspose.Pdf.Annotations.MediaClipData')]
  DNMediaClipData = interface(DNMediaClip)
  ['{B514F7EE-F35B-3FC1-B6BF-29FBD0541ADD}']
  { getters & setters } 

    function get_Data: DNFileSpecification;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Data: DNFileSpecification read get_Data;
  end;

  TDNMediaClipData = class(TDNGenericImport<DNMediaClipDataClass, DNMediaClipData>) end;

  //-------------namespace: Aspose.Pdf.Annotations----------------
  DNMediaClipSectionClass = interface(DNMediaClipClass)
  ['{E732A316-B6A7-52C2-A3E6-FB703D49962C}']
  end;

  [DNTypeName('Aspose.Pdf.Annotations.MediaClipSection')]
  DNMediaClipSection = interface(DNMediaClip)
  ['{45BD14B9-AEA7-3E6A-9294-66D9BDFB61D5}']
  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNMediaClipSection = class(TDNGenericImport<DNMediaClipSectionClass, DNMediaClipSection>) end;

  //-------------namespace: Aspose.Pdf.Annotations----------------
  DNNamedDestinationClass = interface(DNObjectClass)
  ['{50826541-E783-521E-AE9B-3562F81195D6}']
  { constructors } 

    {class} function init(doc: DNDocument; name: string): DNNamedDestination;

  end;

  [DNTypeName('Aspose.Pdf.Annotations.NamedDestination')]
  DNNamedDestination = interface(DNIAppointment)
  ['{8E031FF3-DA99-36F6-92D7-454DBB142CE1}']
  { getters & setters } 

    function get_Name: string;

  { methods } 

    function ToString: string;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    property Name: string read get_Name;
  end;

  TDNNamedDestination = class(TDNGenericImport<DNNamedDestinationClass, DNNamedDestination>) end;

  //-------------namespace: Aspose.Pdf.Annotations----------------
  DNPDF3DArtworkClass = interface(DDN.mscorlib.DNObjectClass)
  ['{F9F6B6F3-3B27-530E-AB5F-12F5E037DBB1}']
  { constructors } 

    {class} function init(doc: DNDocument; content: DNPDF3DContent; lightingScheme: DNPDF3DLightingScheme; renderMode: DNPDF3DRenderMode): DNPDF3DArtwork; overload;
    {class} function init(doc: DNDocument; content: DNPDF3DContent): DNPDF3DArtwork; overload;

  end;

  [DNTypeName('Aspose.Pdf.Annotations.PDF3DArtwork')]
  DNPDF3DArtwork = interface(DDN.mscorlib.DNObject)
  ['{22C08AB8-CF87-3BE9-BF83-264849184F01}']
  { getters & setters } 

    function get_LightingScheme: DNPDF3DLightingScheme;
    procedure set_LightingScheme(value: DNPDF3DLightingScheme);
    function get_RenderMode: DNPDF3DRenderMode;
    procedure set_RenderMode(value: DNPDF3DRenderMode);
    function get_ViewArray: DNPDF3DViewArray;

  { methods } 

    function GetViewsList: DDN.mscorlib.DNReadOnlyCollection<DNPDF3DView>;
    function GetViewsArray: TArray<DNPDF3DView>;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property LightingScheme: DNPDF3DLightingScheme read get_LightingScheme write set_LightingScheme;
    property RenderMode: DNPDF3DRenderMode read get_RenderMode write set_RenderMode;
    property ViewArray: DNPDF3DViewArray read get_ViewArray;
  end;

  TDNPDF3DArtwork = class(TDNGenericImport<DNPDF3DArtworkClass, DNPDF3DArtwork>) end;

  //-------------namespace: Aspose.Pdf.Annotations----------------
  DNPDF3DContentClass = interface(DDN.mscorlib.DNObjectClass)
  ['{73599C70-803A-5E53-B94D-12B8802710C6}']
  { constructors } 

    {class} function init: DNPDF3DContent; overload;
    {class} function init(filename: string): DNPDF3DContent; overload;

  end;

  [DNTypeName('Aspose.Pdf.Annotations.PDF3DContent')]
  DNPDF3DContent = interface(DDN.mscorlib.DNObject)
  ['{0C589CCD-6083-34E3-8425-DD1134B6206B}']
  { getters & setters } 

    function get_Extension: string;

  { methods } 

    procedure Load(filename: string);
    procedure LoadAsPRC(filename: string); overload;
    procedure LoadAsU3D(filename: string); overload;
    procedure LoadAsPRC(stream: DDN.mscorlib.DNStream); overload;
    procedure LoadAsU3D(stream: DDN.mscorlib.DNStream); overload;
    procedure LoadAsPRC(stream: TArray<Byte>); overload;
    procedure LoadAsU3D(stream: TArray<Byte>); overload;
    procedure SaveToFile(filename: string);
    function GetAsStream: DDN.mscorlib.DNStream;
    function GetAsByteArray: TArray<Byte>;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Extension: string read get_Extension;
  end;

  TDNPDF3DContent = class(TDNGenericImport<DNPDF3DContentClass, DNPDF3DContent>) end;

  //-------------namespace: Aspose.Pdf.Annotations----------------
  DNPDF3DCrossSectionClass = interface(DDN.mscorlib.DNObjectClass)
  ['{0CB848F2-569A-5F21-84C8-F8B8B67E45CE}']
  { constructors } 

    {class} function init(doc: DNDocument): DNPDF3DCrossSection;

  end;

  [DNTypeName('Aspose.Pdf.Annotations.PDF3DCrossSection')]
  DNPDF3DCrossSection = interface(DDN.mscorlib.DNObject)
  ['{4A2A6338-4C64-32B9-B506-9C1EC18F6486}']
  { getters & setters } 

    function get_Center: DNPoint3D;
    procedure set_Center(value: DNPoint3D);
    function get_CuttingPlaneOpacity: Double;
    procedure set_CuttingPlaneOpacity(value: Double);
    function get_CuttingPlaneOrientation: DNPDF3DCuttingPlaneOrientation;
    procedure set_CuttingPlaneOrientation(value: DNPDF3DCuttingPlaneOrientation);
    function get_CuttingPlaneColor: DNColor;
    procedure set_CuttingPlaneColor(value: DNColor);
    function get_CuttingPlanesIntersectionColor: DNColor;
    procedure set_CuttingPlanesIntersectionColor(value: DNColor);
    function get_Visibility: Boolean;
    procedure set_Visibility(value: Boolean);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Center: DNPoint3D read get_Center write set_Center;
    property CuttingPlaneOpacity: Double read get_CuttingPlaneOpacity write set_CuttingPlaneOpacity;
    property CuttingPlaneOrientation: DNPDF3DCuttingPlaneOrientation read get_CuttingPlaneOrientation write set_CuttingPlaneOrientation;
    property CuttingPlaneColor: DNColor read get_CuttingPlaneColor write set_CuttingPlaneColor;
    property CuttingPlanesIntersectionColor: DNColor read get_CuttingPlanesIntersectionColor write set_CuttingPlanesIntersectionColor;
    property Visibility: Boolean read get_Visibility write set_Visibility;
  end;

  TDNPDF3DCrossSection = class(TDNGenericImport<DNPDF3DCrossSectionClass, DNPDF3DCrossSection>) end;

  //-------------namespace: Aspose.Pdf.Annotations----------------
  DNPDF3DCrossSectionArrayClass = interface(DDN.mscorlib.DNObjectClass)
  ['{B872CEFD-CBD3-5CC9-8A26-E443FD5A41D8}']
  { constructors } 

    {class} function init(doc: DNDocument): DNPDF3DCrossSectionArray;

  end;

  [DNTypeName('Aspose.Pdf.Annotations.PDF3DCrossSectionArray')]
  DNPDF3DCrossSectionArray = interface(DDN.mscorlib.DNObject)
  ['{E8013215-9304-3A2B-A645-9D2C9AC901F3}']
  { getters & setters } 

    function get_Count: Int32;
    function get_Item(index: Int32): DNPDF3DCrossSection;
    procedure set_Item(index: Int32; value: DNPDF3DCrossSection);

  { methods } 

    procedure Add(crossSection: DNPDF3DCrossSection);
    procedure RemoveAt(index: Int32);
    procedure RemoveAll;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Count: Int32 read get_Count;
    property Item[index: Int32]: DNPDF3DCrossSection read get_Item write set_Item; default;
  end;

  TDNPDF3DCrossSectionArray = class(TDNGenericImport<DNPDF3DCrossSectionArrayClass, DNPDF3DCrossSectionArray>) end;

  //-------------namespace: Aspose.Pdf.Annotations----------------
  DNPDF3DCuttingPlaneOrientationClass = interface(DDN.mscorlib.DNObjectClass)
  ['{093DEF30-B5A7-58BE-9ECF-855E12D695ED}']
  { constructors } 

    {class} function init: DNPDF3DCuttingPlaneOrientation; overload;
    {class} function init(angleX: DDN.mscorlib.DNNullable<Double>; angleY: DDN.mscorlib.DNNullable<Double>; angleZ: DDN.mscorlib.DNNullable<Double>): DNPDF3DCuttingPlaneOrientation; overload;

  end;

  [DNTypeName('Aspose.Pdf.Annotations.PDF3DCuttingPlaneOrientation')]
  DNPDF3DCuttingPlaneOrientation = interface(DDN.mscorlib.DNObject)
  ['{B5889E9C-DA83-3193-8766-3F6A846B5F76}']
  { getters & setters } 

    function get_AngleX: DDN.mscorlib.DNNullable<Double>;
    procedure set_AngleX(value: DDN.mscorlib.DNNullable<Double>);
    function get_AngleY: DDN.mscorlib.DNNullable<Double>;
    procedure set_AngleY(value: DDN.mscorlib.DNNullable<Double>);
    function get_AngleZ: DDN.mscorlib.DNNullable<Double>;
    procedure set_AngleZ(value: DDN.mscorlib.DNNullable<Double>);

  { methods } 

    function ToString: string;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    property AngleX: DDN.mscorlib.DNNullable<Double> read get_AngleX write set_AngleX;
    property AngleY: DDN.mscorlib.DNNullable<Double> read get_AngleY write set_AngleY;
    property AngleZ: DDN.mscorlib.DNNullable<Double> read get_AngleZ write set_AngleZ;
  end;

  TDNPDF3DCuttingPlaneOrientation = class(TDNGenericImport<DNPDF3DCuttingPlaneOrientationClass, DNPDF3DCuttingPlaneOrientation>) end;

  //-------------namespace: Aspose.Pdf.Annotations----------------
  DNPDF3DLightingSchemeClass = interface(DDN.mscorlib.DNObjectClass)
  ['{15B83825-B1AF-5B11-9CD6-BA1A8C97B826}']
  { constructors } 

    {class} function init(&type: DNLightingSchemeType): DNPDF3DLightingScheme; overload;
    {class} function init(typeName: string): DNPDF3DLightingScheme; overload;

  { static fields getter & setter } 

   function __fakeFieldGet_Artwork: DNPDF3DLightingScheme;
   function __fakeFieldGet_None: DNPDF3DLightingScheme;
   function __fakeFieldGet_White: DNPDF3DLightingScheme;
   function __fakeFieldGet_Day: DNPDF3DLightingScheme;
   function __fakeFieldGet_Night: DNPDF3DLightingScheme;
   function __fakeFieldGet_Hard: DNPDF3DLightingScheme;
   function __fakeFieldGet_Primary: DNPDF3DLightingScheme;
   function __fakeFieldGet_Blue: DNPDF3DLightingScheme;
   function __fakeFieldGet_Red: DNPDF3DLightingScheme;
   function __fakeFieldGet_Cube: DNPDF3DLightingScheme;
   function __fakeFieldGet_CAD: DNPDF3DLightingScheme;
   function __fakeFieldGet_Headlamp: DNPDF3DLightingScheme;

  { static fields } 

    {class} property Artwork: DNPDF3DLightingScheme read __fakeFieldGet_Artwork;
    {class} property None: DNPDF3DLightingScheme read __fakeFieldGet_None;
    {class} property White: DNPDF3DLightingScheme read __fakeFieldGet_White;
    {class} property Day: DNPDF3DLightingScheme read __fakeFieldGet_Day;
    {class} property Night: DNPDF3DLightingScheme read __fakeFieldGet_Night;
    {class} property Hard: DNPDF3DLightingScheme read __fakeFieldGet_Hard;
    {class} property Primary: DNPDF3DLightingScheme read __fakeFieldGet_Primary;
    {class} property Blue: DNPDF3DLightingScheme read __fakeFieldGet_Blue;
    {class} property Red: DNPDF3DLightingScheme read __fakeFieldGet_Red;
    {class} property Cube: DNPDF3DLightingScheme read __fakeFieldGet_Cube;
    {class} property CAD: DNPDF3DLightingScheme read __fakeFieldGet_CAD;
    {class} property Headlamp: DNPDF3DLightingScheme read __fakeFieldGet_Headlamp;

  end;

  [DNTypeName('Aspose.Pdf.Annotations.PDF3DLightingScheme')]
  DNPDF3DLightingScheme = interface(DDN.mscorlib.DNObject)
  ['{0FD43A6D-3623-394F-831D-1775A4C2F893}']
  { getters & setters } 

    function get_Type: DNLightingSchemeType;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property &Type: DNLightingSchemeType read get_Type;
  end;

  TDNPDF3DLightingScheme = class(TDNGenericImport<DNPDF3DLightingSchemeClass, DNPDF3DLightingScheme>) end;

  //-------------namespace: Aspose.Pdf.Annotations----------------
  DNPDF3DRenderModeClass = interface(DDN.mscorlib.DNObjectClass)
  ['{18EBAFA3-6DCB-5488-BC01-17D572D4E62F}']
  { constructors } 

    {class} function init(subtype: DNRenderModeType): DNPDF3DRenderMode; overload;
    {class} function init(typeName: string): DNPDF3DRenderMode; overload;

  { static fields getter & setter } 

   function __fakeFieldGet_Solid: DNPDF3DRenderMode;
   function __fakeFieldGet_SolidWireframe: DNPDF3DRenderMode;
   function __fakeFieldGet_Transparent: DNPDF3DRenderMode;
   function __fakeFieldGet_TransparentWareFrame: DNPDF3DRenderMode;
   function __fakeFieldGet_BoundingBox: DNPDF3DRenderMode;
   function __fakeFieldGet_TransparentBoundingBox: DNPDF3DRenderMode;
   function __fakeFieldGet_TransparentBoundingBoxOutline: DNPDF3DRenderMode;
   function __fakeFieldGet_Wireframe: DNPDF3DRenderMode;
   function __fakeFieldGet_ShadedWireframe: DNPDF3DRenderMode;
   function __fakeFieldGet_Vertices: DNPDF3DRenderMode;
   function __fakeFieldGet_ShadedVertices: DNPDF3DRenderMode;
   function __fakeFieldGet_Illustration: DNPDF3DRenderMode;
   function __fakeFieldGet_SolidOutline: DNPDF3DRenderMode;
   function __fakeFieldGet_ShadedIllustration: DNPDF3DRenderMode;

  { static fields } 

    {class} property Solid: DNPDF3DRenderMode read __fakeFieldGet_Solid;
    {class} property SolidWireframe: DNPDF3DRenderMode read __fakeFieldGet_SolidWireframe;
    {class} property Transparent: DNPDF3DRenderMode read __fakeFieldGet_Transparent;
    {class} property TransparentWareFrame: DNPDF3DRenderMode read __fakeFieldGet_TransparentWareFrame;
    {class} property BoundingBox: DNPDF3DRenderMode read __fakeFieldGet_BoundingBox;
    {class} property TransparentBoundingBox: DNPDF3DRenderMode read __fakeFieldGet_TransparentBoundingBox;
    {class} property TransparentBoundingBoxOutline: DNPDF3DRenderMode read __fakeFieldGet_TransparentBoundingBoxOutline;
    {class} property Wireframe: DNPDF3DRenderMode read __fakeFieldGet_Wireframe;
    {class} property ShadedWireframe: DNPDF3DRenderMode read __fakeFieldGet_ShadedWireframe;
    {class} property Vertices: DNPDF3DRenderMode read __fakeFieldGet_Vertices;
    {class} property ShadedVertices: DNPDF3DRenderMode read __fakeFieldGet_ShadedVertices;
    {class} property Illustration: DNPDF3DRenderMode read __fakeFieldGet_Illustration;
    {class} property SolidOutline: DNPDF3DRenderMode read __fakeFieldGet_SolidOutline;
    {class} property ShadedIllustration: DNPDF3DRenderMode read __fakeFieldGet_ShadedIllustration;

  end;

  [DNTypeName('Aspose.Pdf.Annotations.PDF3DRenderMode')]
  DNPDF3DRenderMode = interface(DDN.mscorlib.DNObject)
  ['{8A82F105-894A-3434-BE3C-54B0CE0831BB}']
  { getters & setters } 

    function get_Type: DNRenderModeType;

  { methods } 

    function GetAuxiliaryColour: DNColor;
    function SetAuxiliaryColour(color: DNColor): DNPDF3DRenderMode;
    function GetFaceColor: DDN.mscorlib.DNObject;
    function SetFaceColor(color: DNColor): DNPDF3DRenderMode;
    function GetOpacity: Double;
    function SetOpacity(opacity: Double): DNPDF3DRenderMode;
    function SetCreaseValue(creaseValue: Double): DNPDF3DRenderMode;
    function GetCreaseValue: Double;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property &Type: DNRenderModeType read get_Type;
  end;

  TDNPDF3DRenderMode = class(TDNGenericImport<DNPDF3DRenderModeClass, DNPDF3DRenderMode>) end;

  //-------------namespace: Aspose.Pdf.Annotations----------------
  DNPDF3DStreamClass = interface(DDN.mscorlib.DNObjectClass)
  ['{E8709DD2-A844-5EA3-A0AA-DC7B37AD40BA}']
  { constructors } 

    {class} function init(doc: DNDocument; pdf3DArtwork: DNPDF3DArtwork): DNPDF3DStream;

  end;

  [DNTypeName('Aspose.Pdf.Annotations.PDF3DStream')]
  DNPDF3DStream = interface(DDN.mscorlib.DNObject)
  ['{E797D4A2-E915-3B3C-B15D-6484502125DA}']
  { getters & setters } 

    function get_Content: DNPDF3DContent;
    procedure set_Content(value: DNPDF3DContent);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Content: DNPDF3DContent read get_Content write set_Content;
  end;

  TDNPDF3DStream = class(TDNGenericImport<DNPDF3DStreamClass, DNPDF3DStream>) end;

  //-------------namespace: Aspose.Pdf.Annotations----------------
  DNPDF3DViewClass = interface(DDN.mscorlib.DNObjectClass)
  ['{86D4D085-54C0-568D-BBDF-F9D16E68689D}']
  { constructors } 

    {class} function init(doc: DNDocument; cameraPosition: DNMatrix3D; cameraOrbit: Double; viewName: string): DNPDF3DView; overload;
    {class} function init(doc: DNDocument; view: DNPDF3DView; viewName: string): DNPDF3DView; overload;

  end;

  [DNTypeName('Aspose.Pdf.Annotations.PDF3DView')]
  DNPDF3DView = interface(DDN.mscorlib.DNObject)
  ['{7FDD92B8-7B3B-31AD-88A5-BBC7EF881FBA}']
  { getters & setters } 

    function get_LightingScheme: DNPDF3DLightingScheme;
    procedure set_LightingScheme(value: DNPDF3DLightingScheme);
    function get_RenderMode: DNPDF3DRenderMode;
    procedure set_RenderMode(value: DNPDF3DRenderMode);
    function get_CrossSectionsArray: DNPDF3DCrossSectionArray;
    function get_ViewName: string;
    procedure set_ViewName(value: string);
    function get_CameraPosition: DNMatrix3D;
    procedure set_CameraPosition(value: DNMatrix3D);
    function get_CameraOrbit: Double;
    procedure set_CameraOrbit(value: Double);
    function get_BackGroundColor: DNColor;
    procedure set_BackGroundColor(value: DNColor);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property LightingScheme: DNPDF3DLightingScheme read get_LightingScheme write set_LightingScheme;
    property RenderMode: DNPDF3DRenderMode read get_RenderMode write set_RenderMode;
    property CrossSectionsArray: DNPDF3DCrossSectionArray read get_CrossSectionsArray;
    property ViewName: string read get_ViewName write set_ViewName;
    property CameraPosition: DNMatrix3D read get_CameraPosition write set_CameraPosition;
    property CameraOrbit: Double read get_CameraOrbit write set_CameraOrbit;
    property BackGroundColor: DNColor read get_BackGroundColor write set_BackGroundColor;
  end;

  TDNPDF3DView = class(TDNGenericImport<DNPDF3DViewClass, DNPDF3DView>) end;

  //-------------namespace: Aspose.Pdf.Annotations----------------
  DNPDF3DViewArrayClass = interface(DDN.mscorlib.DNObjectClass)
  ['{75D11A71-BC31-5364-BFDD-CCB1BAD1FA76}']
  end;

  [DNTypeName('Aspose.Pdf.Annotations.PDF3DViewArray')]
  DNPDF3DViewArray = interface(DDN.mscorlib.DNObject)
  ['{D52F5236-27DB-3DC0-A30B-7785E17E4E1C}']
  { getters & setters } 

    function get_Count: Int32;
    function get_Item(index: Int32): DNPDF3DView;
    procedure set_Item(index: Int32; value: DNPDF3DView);

  { methods } 

    procedure Add(view: DNPDF3DView);
    procedure RemoveAt(index: Int32);
    procedure RemoveAll;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Count: Int32 read get_Count;
    property Item[index: Int32]: DNPDF3DView read get_Item write set_Item; default;
  end;

  TDNPDF3DViewArray = class(TDNGenericImport<DNPDF3DViewArrayClass, DNPDF3DViewArray>) end;

  //-------------namespace: Aspose.Pdf.Annotations----------------
  DNPdfActionClass = interface(DNObjectClass)
  ['{EE4C22E1-6328-5A40-A88F-DC213BFFE479}']
  end;

  [DNTypeName('Aspose.Pdf.Annotations.PdfAction')]
  DNPdfAction = interface(DNIAppointment)
  ['{24A6DFE0-B5CD-321B-A4AE-B8E2B4DE90F2}']
  { getters & setters } 

    function get_Next: DNActionCollection;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Next: DNActionCollection read get_Next;
  end;

  TDNPdfAction = class(TDNGenericImport<DNPdfActionClass, DNPdfAction>) end;

  //-------------namespace: Aspose.Pdf.Annotations----------------
  DNGoToActionClass = interface(DNPdfActionClass)
  ['{DBFD9C56-9799-569B-A312-1F50C463628D}']
  { constructors } 

    {class} function init(page: Int32): DNGoToAction; overload;
    {class} function init(page: DNPage): DNGoToAction; overload;
    {class} function init(page: DNPage; &type: DNExplicitDestinationType; values: TArray<Double>): DNGoToAction; overload;
    {class} function init(destination: DNExplicitDestination): DNGoToAction; overload;
    {class} function init: DNGoToAction; overload;
    {class} function init(doc: DNDocument; name: string): DNGoToAction; overload;

  end;

  [DNTypeName('Aspose.Pdf.Annotations.GoToAction')]
  DNGoToAction = interface(DNPdfAction)
  ['{2A3F8BF8-4CE5-391B-8EA4-980EA1FA7ABC}']
  { getters & setters } 

    function get_Destination: DNIAppointment;
    procedure set_Destination(value: DNIAppointment);
    function get_Next: DNActionCollection;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Destination: DNIAppointment read get_Destination write set_Destination;
    property Next: DNActionCollection read get_Next;
  end;

  TDNGoToAction = class(TDNGenericImport<DNGoToActionClass, DNGoToAction>) end;

  //-------------namespace: Aspose.Pdf.Annotations----------------
  DNGoToRemoteActionClass = interface(DNGoToActionClass)
  ['{4A6B727A-4DE8-5739-918C-7A9C2F8FBBAE}']
  { constructors } 

    {class} function init(remotePdf: string; remotePageNumber: Int32): DNGoToRemoteAction; overload;
    {class} function init(remotePdf: string; destination: DNExplicitDestination): DNGoToRemoteAction; overload;

  end;

  [DNTypeName('Aspose.Pdf.Annotations.GoToRemoteAction')]
  DNGoToRemoteAction = interface(DNGoToAction)
  ['{2EF2BDEC-948D-3270-BB07-AC720A7830A7}']
  { getters & setters } 

    function get_File: DNFileSpecification;
    procedure set_File(value: DNFileSpecification);
    function get_NewWindow: DNExtendedBoolean;
    procedure set_NewWindow(value: DNExtendedBoolean);
    function get_Destination: DNIAppointment;
    procedure set_Destination(value: DNIAppointment);
    function get_Next: DNActionCollection;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property &File: DNFileSpecification read get_File write set_File;
    property NewWindow: DNExtendedBoolean read get_NewWindow write set_NewWindow;
    property Destination: DNIAppointment read get_Destination write set_Destination;
    property Next: DNActionCollection read get_Next;
  end;

  TDNGoToRemoteAction = class(TDNGenericImport<DNGoToRemoteActionClass, DNGoToRemoteAction>) end;

  //-------------namespace: Aspose.Pdf.Annotations----------------
  DNGoToURIActionClass = interface(DNPdfActionClass)
  ['{84EA7F9A-EB2E-565C-9031-5891DF7D362E}']
  { constructors } 

    {class} function init(uri: string): DNGoToURIAction;

  end;

  [DNTypeName('Aspose.Pdf.Annotations.GoToURIAction')]
  DNGoToURIAction = interface(DNPdfAction)
  ['{651A3E3D-5F5C-3F2B-B7CD-67C2DB517D13}']
  { getters & setters } 

    function get_URI: string;
    procedure set_URI(value: string);
    function get_Next: DNActionCollection;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property URI: string read get_URI write set_URI;
    property Next: DNActionCollection read get_Next;
  end;

  TDNGoToURIAction = class(TDNGenericImport<DNGoToURIActionClass, DNGoToURIAction>) end;

  //-------------namespace: Aspose.Pdf.Annotations----------------
  DNHideActionClass = interface(DNPdfActionClass)
  ['{84131BAA-2EF3-5413-B0CE-D265C4E10E8A}']
  { constructors } 

    {class} function init(annotation: DNAnnotation): DNHideAction; overload;
    {class} function init(annotation: DNAnnotation; isHidden: Boolean): DNHideAction; overload;
    {class} function init(fieldName: string): DNHideAction; overload;
    {class} function init(fieldName: string; isHidden: Boolean): DNHideAction; overload;
    {class} function init(annotations: TArray<DNAnnotation>): DNHideAction; overload;
    {class} function init(annotations: TArray<DNAnnotation>; isHidden: Boolean): DNHideAction; overload;
    {class} function init(names: TArray<string>): DNHideAction; overload;
    {class} function init(names: TArray<string>; isHidden: Boolean): DNHideAction; overload;

  end;

  [DNTypeName('Aspose.Pdf.Annotations.HideAction')]
  DNHideAction = interface(DNPdfAction)
  ['{283BC020-9F74-35D6-A5E7-F29FF0393E1E}']
  { getters & setters } 

    function get_IsHidden: Boolean;
    procedure set_IsHidden(value: Boolean);
    function get_Next: DNActionCollection;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property IsHidden: Boolean read get_IsHidden write set_IsHidden;
    property Next: DNActionCollection read get_Next;
  end;

  TDNHideAction = class(TDNGenericImport<DNHideActionClass, DNHideAction>) end;

  //-------------namespace: Aspose.Pdf.Annotations----------------
  DNImportDataActionClass = interface(DNPdfActionClass)
  ['{18D4CAAD-FABA-5CBF-B4C1-3F052D0008C9}']
  end;

  [DNTypeName('Aspose.Pdf.Annotations.ImportDataAction')]
  DNImportDataAction = interface(DNPdfAction)
  ['{6DAB2A45-7896-33CF-AF46-D6D5E4E666C9}']
  { getters & setters } 

    function get_Data: DNFileSpecification;
    procedure set_Data(value: DNFileSpecification);
    function get_Next: DNActionCollection;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Data: DNFileSpecification read get_Data write set_Data;
    property Next: DNActionCollection read get_Next;
  end;

  TDNImportDataAction = class(TDNGenericImport<DNImportDataActionClass, DNImportDataAction>) end;

  //-------------namespace: Aspose.Pdf.Annotations----------------
  DNJavascriptActionClass = interface(DNPdfActionClass)
  ['{E9E19221-E866-5D7C-AF41-59EAF0040EC9}']
  { constructors } 

    {class} function init(javaScript: string): DNJavascriptAction;

  end;

  [DNTypeName('Aspose.Pdf.Annotations.JavascriptAction')]
  DNJavascriptAction = interface(DNPdfAction)
  ['{17245C15-90CD-359F-A4F4-1B4646AEBCD9}']
  { getters & setters } 

    function get_Script: string;
    procedure set_Script(value: string);
    function get_Next: DNActionCollection;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Script: string read get_Script write set_Script;
    property Next: DNActionCollection read get_Next;
  end;

  TDNJavascriptAction = class(TDNGenericImport<DNJavascriptActionClass, DNJavascriptAction>) end;

  //-------------namespace: Aspose.Pdf.Annotations----------------
  DNLaunchActionClass = interface(DNPdfActionClass)
  ['{A096DA75-6126-5BD9-919B-941596BBC933}']
  { constructors } 

    {class} function init(&file: string): DNLaunchAction; overload;
    {class} function init(document: DNDocument; &file: string): DNLaunchAction; overload;

  end;

  [DNTypeName('Aspose.Pdf.Annotations.LaunchAction')]
  DNLaunchAction = interface(DNPdfAction)
  ['{001FA1E9-2724-3E78-B0F2-8F628935BE90}']
  { getters & setters } 

    function get_File: string;
    procedure set_File(value: string);
    function get_NewWindow: DNExtendedBoolean;
    procedure set_NewWindow(value: DNExtendedBoolean);
    function get_Next: DNActionCollection;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property &File: string read get_File write set_File;
    property NewWindow: DNExtendedBoolean read get_NewWindow write set_NewWindow;
    property Next: DNActionCollection read get_Next;
  end;

  TDNLaunchAction = class(TDNGenericImport<DNLaunchActionClass, DNLaunchAction>) end;

  //-------------namespace: Aspose.Pdf.Annotations----------------
  DNNamedActionClass = interface(DNPdfActionClass)
  ['{F88E7E32-E482-5710-8C47-44720FAB3C4D}']
  { constructors } 

    {class} function init(action: DNPredefinedAction): DNNamedAction;

  end;

  [DNTypeName('Aspose.Pdf.Annotations.NamedAction')]
  DNNamedAction = interface(DNPdfAction)
  ['{30463AC3-8370-3B26-BCC5-623A7D9F3EAD}']
  { getters & setters } 

    function get_Name: string;
    procedure set_Name(value: string);
    function get_Next: DNActionCollection;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Name: string read get_Name write set_Name;
    property Next: DNActionCollection read get_Next;
  end;

  TDNNamedAction = class(TDNGenericImport<DNNamedActionClass, DNNamedAction>) end;

  //-------------namespace: Aspose.Pdf.Annotations----------------
  DNRenditionActionClass = interface(DNPdfActionClass)
  ['{DB187375-0AE1-5766-9ED9-6630955B5A12}']
  end;

  [DNTypeName('Aspose.Pdf.Annotations.RenditionAction')]
  DNRenditionAction = interface(DNPdfAction)
  ['{2F8918F8-F054-305B-B70C-99584021655E}']
  { getters & setters } 

    function get_Rendition: DNRendition;
    function get_RenditionOperation: DNRenditionOperation;
    procedure set_RenditionOperation(value: DNRenditionOperation);
    function get_JavaScript: string;
    procedure set_JavaScript(value: string);
    function get_Next: DNActionCollection;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Rendition: DNRendition read get_Rendition;
    property RenditionOperation: DNRenditionOperation read get_RenditionOperation write set_RenditionOperation;
    property JavaScript: string read get_JavaScript write set_JavaScript;
    property Next: DNActionCollection read get_Next;
  end;

  TDNRenditionAction = class(TDNGenericImport<DNRenditionActionClass, DNRenditionAction>) end;

  //-------------namespace: Aspose.Pdf.Annotations----------------
  DNSubmitFormActionClass = interface(DNPdfActionClass)
  ['{C190046D-CD40-50FD-9586-7CBC2D54A807}']
  { constructors } 

    {class} function init: DNSubmitFormAction;

  { static fields getter & setter } 

   function __fakeFieldGet_Exclude: Int32;
   function __fakeFieldGet_IncludeNoValueFields: Int32;
   function __fakeFieldGet_ExportFormat: Int32;
   function __fakeFieldGet_GetMethod: Int32;
   function __fakeFieldGet_SubmitCoordinates: Int32;
   function __fakeFieldGet_Xfdf: Int32;
   function __fakeFieldGet_IncludeAppendSaves: Int32;
   function __fakeFieldGet_IncludeAnnotations: Int32;
   function __fakeFieldGet_SubmitPdf: Int32;
   function __fakeFieldGet_CanonicalFormat: Int32;
   function __fakeFieldGet_ExclNonUserAnnots: Int32;
   function __fakeFieldGet_ExclFKey: Int32;
   function __fakeFieldGet_EmbedForm: Int32;

  { static fields } 

    {class} property Exclude: Int32 read __fakeFieldGet_Exclude;
    {class} property IncludeNoValueFields: Int32 read __fakeFieldGet_IncludeNoValueFields;
    {class} property ExportFormat: Int32 read __fakeFieldGet_ExportFormat;
    {class} property GetMethod: Int32 read __fakeFieldGet_GetMethod;
    {class} property SubmitCoordinates: Int32 read __fakeFieldGet_SubmitCoordinates;
    {class} property Xfdf: Int32 read __fakeFieldGet_Xfdf;
    {class} property IncludeAppendSaves: Int32 read __fakeFieldGet_IncludeAppendSaves;
    {class} property IncludeAnnotations: Int32 read __fakeFieldGet_IncludeAnnotations;
    {class} property SubmitPdf: Int32 read __fakeFieldGet_SubmitPdf;
    {class} property CanonicalFormat: Int32 read __fakeFieldGet_CanonicalFormat;
    {class} property ExclNonUserAnnots: Int32 read __fakeFieldGet_ExclNonUserAnnots;
    {class} property ExclFKey: Int32 read __fakeFieldGet_ExclFKey;
    {class} property EmbedForm: Int32 read __fakeFieldGet_EmbedForm;

  end;

  [DNTypeName('Aspose.Pdf.Annotations.SubmitFormAction')]
  DNSubmitFormAction = interface(DNPdfAction)
  ['{390CDB9F-F1D5-3B60-A9A1-BEEFDB914A14}']
  { getters & setters } 

    function get_Flags: Int32;
    procedure set_Flags(value: Int32);
    function get_Url: DNFileSpecification;
    procedure set_Url(value: DNFileSpecification);
    function get_Next: DNActionCollection;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Flags: Int32 read get_Flags write set_Flags;
    property Url: DNFileSpecification read get_Url write set_Url;
    property Next: DNActionCollection read get_Next;
  end;

  TDNSubmitFormAction = class(TDNGenericImport<DNSubmitFormActionClass, DNSubmitFormAction>)
  public const
   Exclude = 1;
   IncludeNoValueFields = 2;
   ExportFormat = 4;
   GetMethod = 8;
   SubmitCoordinates = 16;
   Xfdf = 32;
   IncludeAppendSaves = 64;
   IncludeAnnotations = 128;
   SubmitPdf = 256;
   CanonicalFormat = 512;
   ExclNonUserAnnots = 1024;
   ExclFKey = 2048;
   EmbedForm = 8192;
  end;

  //-------------namespace: Aspose.Pdf.Annotations----------------
  DNPdfActionCollectionClass = interface(DDN.mscorlib.DNObjectClass)
  ['{860FE26C-CA0D-570D-B8D2-EDB5FAA6CCF9}']
  end;

  [DNTypeName('Aspose.Pdf.Annotations.PdfActionCollection')]
  DNPdfActionCollection = interface(DDN.mscorlib.DNObject)
  ['{C9730893-2417-3C6F-8BCF-55802DB1C919}']
  { getters & setters } 

    function get_Count: Int32;
    function get_Item(index: Int32): DNPdfAction;

  { methods } 

    procedure Delete(index: Int32);
    procedure Add(action: DNPdfAction);
    function GetEnumerator: DDN.mscorlib.DNIEnumerator<DNPdfAction>;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Count: Int32 read get_Count;
    property Item[index: Int32]: DNPdfAction read get_Item; default;
  end;

  TDNPdfActionCollection = class(TDNGenericImport<DNPdfActionCollectionClass, DNPdfActionCollection>) end;

  //-------------namespace: Aspose.Pdf.Annotations----------------
  DNRenditionClass = interface(DDN.mscorlib.DNObjectClass)
  ['{91FCE545-313B-57BF-876D-890C867F6371}']
  end;

  [DNTypeName('Aspose.Pdf.Annotations.Rendition')]
  DNRendition = interface(DDN.mscorlib.DNObject)
  ['{4DE578CA-4646-31F3-B44B-CEA6B74C7727}']
  { getters & setters } 

    function get_Name: string;
    procedure set_Name(value: string);
    function get_RenditionType: DNRenditionType;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Name: string read get_Name write set_Name;
    property RenditionType: DNRenditionType read get_RenditionType;
  end;

  TDNRendition = class(TDNGenericImport<DNRenditionClass, DNRendition>) end;

  //-------------namespace: Aspose.Pdf.Annotations----------------
  DNMediaRenditionClass = interface(DNRenditionClass)
  ['{D14BC4CE-F3E7-50D2-A60D-E33C21386ABD}']
  end;

  [DNTypeName('Aspose.Pdf.Annotations.MediaRendition')]
  DNMediaRendition = interface(DNRendition)
  ['{F46ED2AF-CE21-39A8-8987-87F776FD8292}']
  { getters & setters } 

    function get_MediaClip: DNMediaClip;
    function get_Name: string;
    procedure set_Name(value: string);
    function get_RenditionType: DNRenditionType;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property MediaClip: DNMediaClip read get_MediaClip;
    property Name: string read get_Name write set_Name;
    property RenditionType: DNRenditionType read get_RenditionType;
  end;

  TDNMediaRendition = class(TDNGenericImport<DNMediaRenditionClass, DNMediaRendition>) end;

  //-------------namespace: Aspose.Pdf.Annotations----------------
  DNSelectorRenditionClass = interface(DNRenditionClass)
  ['{A337C45C-C63F-5C8D-8CF5-56A90B742DC6}']
  end;

  [DNTypeName('Aspose.Pdf.Annotations.SelectorRendition')]
  DNSelectorRendition = interface(DNRendition)
  ['{62F911C8-41B2-3008-8305-A0C334964430}']
  { getters & setters } 

    function get_Renditions: TArray<DNRendition>;
    function get_Name: string;
    procedure set_Name(value: string);
    function get_RenditionType: DNRenditionType;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Renditions: TArray<DNRendition> read get_Renditions;
    property Name: string read get_Name write set_Name;
    property RenditionType: DNRenditionType read get_RenditionType;
  end;

  TDNSelectorRendition = class(TDNGenericImport<DNSelectorRenditionClass, DNSelectorRendition>) end;

  //-------------namespace: Aspose.Pdf.Annotations----------------
  DNSoundDataClass = interface(DDN.mscorlib.DNObjectClass)
  ['{019E17E0-A060-5392-9528-565256A2A716}']
  end;

  [DNTypeName('Aspose.Pdf.Annotations.SoundData')]
  DNSoundData = interface(DDN.mscorlib.DNObject)
  ['{4AB2F4A1-0A7B-3732-B5FB-9B8A718CA535}']
  { getters & setters } 

    function get_Rate: Int32;
    procedure set_Rate(value: Int32);
    function get_Channels: Int32;
    procedure set_Channels(value: Int32);
    function get_Bits: Int32;
    procedure set_Bits(value: Int32);
    function get_Contents: DDN.mscorlib.DNStream;
    function get_Encoding: DNSoundEncoding;
    procedure set_Encoding(value: DNSoundEncoding);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Rate: Int32 read get_Rate write set_Rate;
    property Channels: Int32 read get_Channels write set_Channels;
    property Bits: Int32 read get_Bits write set_Bits;
    property Contents: DDN.mscorlib.DNStream read get_Contents;
    property Encoding: DNSoundEncoding read get_Encoding write set_Encoding;
  end;

  TDNSoundData = class(TDNGenericImport<DNSoundDataClass, DNSoundData>) end;

  //-------------namespace: Aspose.Pdf.Annotations----------------
  DNSoundSampleDataClass = interface(DDN.mscorlib.DNObjectClass)
  ['{39DAF750-A4B0-515C-A746-41A5EE674087}']
  { constructors } 

    {class} function init(samplingRate: Int64): DNSoundSampleData; overload;
    {class} function init(samplingRate: Int64; numberOfSoundChannels: Int32): DNSoundSampleData; overload;
    {class} function init(samplingRate: Int64; numberOfSoundChannels: Int32; bitsPerChannel: Int32): DNSoundSampleData; overload;
    {class} function init(samplingRate: Int64; numberOfSoundChannels: Int32; bitsPerChannel: Int32; soundSampleDataEncodingFormat: DNSoundSampleDataEncodingFormat): DNSoundSampleData; overload;

  { static fields getter & setter } 

   function __fakeFieldGet_DefaultSamplingRate: Int64;
   function __fakeFieldGet_DefaultOfSoundChannels: Int32;
   function __fakeFieldGet_DefaultOfBitsPerChannel: Int32;
   function __fakeFieldGet_DefaultEncodingFormat: DNSoundSampleDataEncodingFormat;

  { static fields } 

    {class} property DefaultSamplingRate: Int64 read __fakeFieldGet_DefaultSamplingRate;
    {class} property DefaultOfSoundChannels: Int32 read __fakeFieldGet_DefaultOfSoundChannels;
    {class} property DefaultOfBitsPerChannel: Int32 read __fakeFieldGet_DefaultOfBitsPerChannel;
    {class} property DefaultEncodingFormat: DNSoundSampleDataEncodingFormat read __fakeFieldGet_DefaultEncodingFormat;

  end;

  [DNTypeName('Aspose.Pdf.Annotations.SoundSampleData')]
  DNSoundSampleData = interface(DDN.mscorlib.DNObject)
  ['{B6825B40-EDE2-3B77-B65B-A288C0F93CC1}']
  { getters & setters } 

    function get_SamplingRate: Int64;
    procedure set_SamplingRate(value: Int64);
    function get_NumberOfSoundChannels: Int32;
    procedure set_NumberOfSoundChannels(value: Int32);
    function get_BitsPerChannel: Int32;
    procedure set_BitsPerChannel(value: Int32);
    function get_EncodingFormat: DNSoundSampleDataEncodingFormat;
    procedure set_EncodingFormat(value: DNSoundSampleDataEncodingFormat);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property SamplingRate: Int64 read get_SamplingRate write set_SamplingRate;
    property NumberOfSoundChannels: Int32 read get_NumberOfSoundChannels write set_NumberOfSoundChannels;
    property BitsPerChannel: Int32 read get_BitsPerChannel write set_BitsPerChannel;
    property EncodingFormat: DNSoundSampleDataEncodingFormat read get_EncodingFormat write set_EncodingFormat;
  end;

  TDNSoundSampleData = class(TDNGenericImport<DNSoundSampleDataClass, DNSoundSampleData>)
  public const
   DefaultSamplingRate = 11025;
   DefaultOfSoundChannels = 1;
   DefaultOfBitsPerChannel = 8;
   DefaultEncodingFormat = DNSoundSampleDataEncodingFormat.Raw;
  end;

  //-------------namespace: Aspose.Pdf.Annotations----------------
  DNTextStyleClass = interface(DDN.mscorlib.DNObjectClass)
  ['{81CEAA2E-696E-58B6-AF1E-E69EB69799C1}']
  end;

  [DNTypeName('Aspose.Pdf.Annotations.TextStyle')]
  DNTextStyle = interface(DDN.mscorlib.DNObject)
  ['{0C6667C1-36DC-3D31-8F03-75CB83CABF2A}']
  { getters & setters } 

    function get_FontName: string;
    procedure set_FontName(value: string);
    function get_FontSize: Double;
    procedure set_FontSize(value: Double);
    function get_Alignment: DNTextAlignment;
    procedure set_Alignment(value: DNTextAlignment);
    function get_HorizontalAlignment: DNHorizontalAlignment;
    procedure set_HorizontalAlignment(value: DNHorizontalAlignment);
    function get_Color: DDN.System.Drawing.DNColor;
    procedure set_Color(value: DDN.System.Drawing.DNColor);

  { methods } 

    function ToString: string;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    property FontName: string read get_FontName write set_FontName;
    property FontSize: Double read get_FontSize write set_FontSize;
    property Alignment: DNTextAlignment read get_Alignment write set_Alignment;
    property HorizontalAlignment: DNHorizontalAlignment read get_HorizontalAlignment write set_HorizontalAlignment;
    property Color: DDN.System.Drawing.DNColor read get_Color write set_Color;
  end;

  TDNTextStyle = class(TDNGenericImport<DNTextStyleClass, DNTextStyle>) end;

  //-------------namespace: Aspose.Pdf.Annotations----------------
  DNXfdfReaderClass = interface(DDN.mscorlib.DNObjectClass)
  ['{A6D5B0B1-D6B9-52E1-8C53-060A62381712}']
  { constructors } 

    {class} function init: DNXfdfReader;

  { static methods } 

    {class} procedure ReadAnnotations(stream: DDN.mscorlib.DNStream; document: DNDocument);
    {class} procedure ReadFields(stream: DDN.mscorlib.DNStream; document: DNDocument);
    {class} function GetElements(reader: DDN.System.Xml.DNXmlReader): DDN.mscorlib.DNDictionary<string, string>;

  end;

  [DNTypeName('Aspose.Pdf.Annotations.XfdfReader')]
  DNXfdfReader = interface(DDN.mscorlib.DNObject)
  ['{44BB6BE8-639D-3DAE-99EF-DC7EB36065E2}']
  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNXfdfReader = class(TDNGenericImport<DNXfdfReaderClass, DNXfdfReader>) end;

  //-------------namespace: Aspose.Pdf----------------
  DNArtifactClass = interface(DNObjectClass)
  ['{4F9E15D0-CE54-5AB0-821B-CF2BFAE8D924}']
  { constructors } 

    {class} function init(&type: string; subType: string): DNArtifact; overload;
    {class} function init(&type: DNArtifact_ArtifactType; subType: DNArtifact_ArtifactSubtype): DNArtifact; overload;

  end;

  [DNTypeName('Aspose.Pdf.Artifact')]
  DNArtifact = interface(DDN.mscorlib.DNIDisposable)
  ['{4E11936A-0D19-3943-A941-B25908C28FD8}']
  { getters & setters } 

    function get_CustomType: string;
    procedure set_CustomType(value: string);
    function get_CustomSubtype: string;
    procedure set_CustomSubtype(value: string);
    function get_Type: DNArtifact_ArtifactType;
    procedure set_Type(value: DNArtifact_ArtifactType);
    function get_Subtype: DNArtifact_ArtifactSubtype;
    procedure set_Subtype(value: DNArtifact_ArtifactSubtype);
    function get_Contents: DDN.mscorlib.DNList<DNOperator>;
    function get_Form: DNXForm;
    function get_Rectangle: DNPdf_Rectangle;
    function get_Position: DNPoint;
    procedure set_Position(value: DNPoint);
    function get_RightMargin: Double;
    procedure set_RightMargin(value: Double);
    function get_LeftMargin: Double;
    procedure set_LeftMargin(value: Double);
    function get_TopMargin: Double;
    procedure set_TopMargin(value: Double);
    function get_BottomMargin: Double;
    procedure set_BottomMargin(value: Double);
    function get_ArtifactHorizontalAlignment: DNHorizontalAlignment;
    procedure set_ArtifactHorizontalAlignment(value: DNHorizontalAlignment);
    function get_ArtifactVerticalAlignment: DNVerticalAlignment;
    procedure set_ArtifactVerticalAlignment(value: DNVerticalAlignment);
    function get_Rotation: Double;
    procedure set_Rotation(value: Double);
    function get_Text: string;
    procedure set_Text(value: string);
    function get_Image: DNXImage;
    function get_Opacity: Double;
    procedure set_Opacity(value: Double);
    function get_Lines: DDN.mscorlib.DNList<string>;
    function get_TextState: DNTextState;
    procedure set_TextState(value: DNTextState);
    function get_IsBackground: Boolean;
    procedure set_IsBackground(value: Boolean);

  { methods } 

    procedure SetText(formattedText: DNFormattedText);
    procedure SetTextAndState(text: string; textState: DNTextState);
    procedure SetLinesAndState(text: TArray<string>; textState: DNTextState);
    procedure SetImage(imageStream: DDN.mscorlib.DNStream); overload;
    procedure SetImage(imageName: string); overload;
    procedure SetPdfPage(page: DNPage);
    procedure Dispose;
    function GetValue(name: string): string;
    procedure SetValue(name: string; value: string);
    procedure RemoveValue(name: string);
    procedure BeginUpdates;
    procedure SaveUpdates;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property CustomType: string read get_CustomType write set_CustomType;
    property CustomSubtype: string read get_CustomSubtype write set_CustomSubtype;
    property &Type: DNArtifact_ArtifactType read get_Type write set_Type;
    property Subtype: DNArtifact_ArtifactSubtype read get_Subtype write set_Subtype;
    property Contents: DDN.mscorlib.DNList<DNOperator> read get_Contents;
    property Form: DNXForm read get_Form;
    property Rectangle: DNPdf_Rectangle read get_Rectangle;
    property Position: DNPoint read get_Position write set_Position;
    property RightMargin: Double read get_RightMargin write set_RightMargin;
    property LeftMargin: Double read get_LeftMargin write set_LeftMargin;
    property TopMargin: Double read get_TopMargin write set_TopMargin;
    property BottomMargin: Double read get_BottomMargin write set_BottomMargin;
    property ArtifactHorizontalAlignment: DNHorizontalAlignment read get_ArtifactHorizontalAlignment write set_ArtifactHorizontalAlignment;
    property ArtifactVerticalAlignment: DNVerticalAlignment read get_ArtifactVerticalAlignment write set_ArtifactVerticalAlignment;
    property Rotation: Double read get_Rotation write set_Rotation;
    property Text: string read get_Text write set_Text;
    property Image: DNXImage read get_Image;
    property Opacity: Double read get_Opacity write set_Opacity;
    property Lines: DDN.mscorlib.DNList<string> read get_Lines;
    property TextState: DNTextState read get_TextState write set_TextState;
    property IsBackground: Boolean read get_IsBackground write set_IsBackground;
  end;

  TDNArtifact = class(TDNGenericImport<DNArtifactClass, DNArtifact>) end;

  //-------------namespace: Aspose.Pdf----------------
  DNBackgroundArtifactClass = interface(DNArtifactClass)
  ['{FBCA7DD5-532E-571A-BDC5-8DA761C4AFAB}']
  { constructors } 

    {class} function init: DNBackgroundArtifact;

  end;

  [DNTypeName('Aspose.Pdf.BackgroundArtifact')]
  DNBackgroundArtifact = interface(DNArtifact)
  ['{CDBB1847-C63D-3C0D-B82E-C5FD8FD68C1D}']
  { getters & setters } 

    function get_BackgroundColor: DNColor;
    procedure set_BackgroundColor(value: DNColor);
    function get_BackgroundImage: DDN.mscorlib.DNStream;
    procedure set_BackgroundImage(value: DDN.mscorlib.DNStream);
    function get_CustomType: string;
    procedure set_CustomType(value: string);
    function get_CustomSubtype: string;
    procedure set_CustomSubtype(value: string);
    function get_Type: DNArtifact_ArtifactType;
    procedure set_Type(value: DNArtifact_ArtifactType);
    function get_Subtype: DNArtifact_ArtifactSubtype;
    procedure set_Subtype(value: DNArtifact_ArtifactSubtype);
    function get_Contents: DDN.mscorlib.DNList<DNOperator>;
    function get_Form: DNXForm;
    function get_Rectangle: DNPdf_Rectangle;
    function get_Position: DNPoint;
    procedure set_Position(value: DNPoint);
    function get_RightMargin: Double;
    procedure set_RightMargin(value: Double);
    function get_LeftMargin: Double;
    procedure set_LeftMargin(value: Double);
    function get_TopMargin: Double;
    procedure set_TopMargin(value: Double);
    function get_BottomMargin: Double;
    procedure set_BottomMargin(value: Double);
    function get_ArtifactHorizontalAlignment: DNHorizontalAlignment;
    procedure set_ArtifactHorizontalAlignment(value: DNHorizontalAlignment);
    function get_ArtifactVerticalAlignment: DNVerticalAlignment;
    procedure set_ArtifactVerticalAlignment(value: DNVerticalAlignment);
    function get_Rotation: Double;
    procedure set_Rotation(value: Double);
    function get_Text: string;
    procedure set_Text(value: string);
    function get_Image: DNXImage;
    function get_Opacity: Double;
    procedure set_Opacity(value: Double);
    function get_Lines: DDN.mscorlib.DNList<string>;
    function get_TextState: DNTextState;
    procedure set_TextState(value: DNTextState);
    function get_IsBackground: Boolean;
    procedure set_IsBackground(value: Boolean);

  { methods } 

    procedure SetText(formattedText: DNFormattedText);
    procedure SetTextAndState(text: string; textState: DNTextState);
    procedure SetLinesAndState(text: TArray<string>; textState: DNTextState);
    procedure SetImage(imageStream: DDN.mscorlib.DNStream); overload;
    procedure SetImage(imageName: string); overload;
    procedure SetPdfPage(page: DNPage);
    procedure Dispose;
    function GetValue(name: string): string;
    procedure SetValue(name: string; value: string);
    procedure RemoveValue(name: string);
    procedure BeginUpdates;
    procedure SaveUpdates;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property BackgroundColor: DNColor read get_BackgroundColor write set_BackgroundColor;
    property BackgroundImage: DDN.mscorlib.DNStream read get_BackgroundImage write set_BackgroundImage;
    property CustomType: string read get_CustomType write set_CustomType;
    property CustomSubtype: string read get_CustomSubtype write set_CustomSubtype;
    property &Type: DNArtifact_ArtifactType read get_Type write set_Type;
    property Subtype: DNArtifact_ArtifactSubtype read get_Subtype write set_Subtype;
    property Contents: DDN.mscorlib.DNList<DNOperator> read get_Contents;
    property Form: DNXForm read get_Form;
    property Rectangle: DNPdf_Rectangle read get_Rectangle;
    property Position: DNPoint read get_Position write set_Position;
    property RightMargin: Double read get_RightMargin write set_RightMargin;
    property LeftMargin: Double read get_LeftMargin write set_LeftMargin;
    property TopMargin: Double read get_TopMargin write set_TopMargin;
    property BottomMargin: Double read get_BottomMargin write set_BottomMargin;
    property ArtifactHorizontalAlignment: DNHorizontalAlignment read get_ArtifactHorizontalAlignment write set_ArtifactHorizontalAlignment;
    property ArtifactVerticalAlignment: DNVerticalAlignment read get_ArtifactVerticalAlignment write set_ArtifactVerticalAlignment;
    property Rotation: Double read get_Rotation write set_Rotation;
    property Text: string read get_Text write set_Text;
    property Image: DNXImage read get_Image;
    property Opacity: Double read get_Opacity write set_Opacity;
    property Lines: DDN.mscorlib.DNList<string> read get_Lines;
    property TextState: DNTextState read get_TextState write set_TextState;
    property IsBackground: Boolean read get_IsBackground write set_IsBackground;
  end;

  TDNBackgroundArtifact = class(TDNGenericImport<DNBackgroundArtifactClass, DNBackgroundArtifact>) end;

  //-------------namespace: Aspose.Pdf----------------
  DNFooterArtifactClass = interface(DNArtifactClass)
  ['{D904672F-4DC4-5DBC-84CC-FD1783A1DB1B}']
  { constructors } 

    {class} function init: DNFooterArtifact;

  end;

  [DNTypeName('Aspose.Pdf.FooterArtifact')]
  DNFooterArtifact = interface(DNArtifact)
  ['{DDDE536F-4E16-3B67-BC35-8DB8BA2E16B5}']
  { getters & setters } 

    function get_CustomType: string;
    procedure set_CustomType(value: string);
    function get_CustomSubtype: string;
    procedure set_CustomSubtype(value: string);
    function get_Type: DNArtifact_ArtifactType;
    procedure set_Type(value: DNArtifact_ArtifactType);
    function get_Subtype: DNArtifact_ArtifactSubtype;
    procedure set_Subtype(value: DNArtifact_ArtifactSubtype);
    function get_Contents: DDN.mscorlib.DNList<DNOperator>;
    function get_Form: DNXForm;
    function get_Rectangle: DNPdf_Rectangle;
    function get_Position: DNPoint;
    procedure set_Position(value: DNPoint);
    function get_RightMargin: Double;
    procedure set_RightMargin(value: Double);
    function get_LeftMargin: Double;
    procedure set_LeftMargin(value: Double);
    function get_TopMargin: Double;
    procedure set_TopMargin(value: Double);
    function get_BottomMargin: Double;
    procedure set_BottomMargin(value: Double);
    function get_ArtifactHorizontalAlignment: DNHorizontalAlignment;
    procedure set_ArtifactHorizontalAlignment(value: DNHorizontalAlignment);
    function get_ArtifactVerticalAlignment: DNVerticalAlignment;
    procedure set_ArtifactVerticalAlignment(value: DNVerticalAlignment);
    function get_Rotation: Double;
    procedure set_Rotation(value: Double);
    function get_Text: string;
    procedure set_Text(value: string);
    function get_Image: DNXImage;
    function get_Opacity: Double;
    procedure set_Opacity(value: Double);
    function get_Lines: DDN.mscorlib.DNList<string>;
    function get_TextState: DNTextState;
    procedure set_TextState(value: DNTextState);
    function get_IsBackground: Boolean;
    procedure set_IsBackground(value: Boolean);

  { methods } 

    procedure SetText(formattedText: DNFormattedText);
    procedure SetTextAndState(text: string; textState: DNTextState);
    procedure SetLinesAndState(text: TArray<string>; textState: DNTextState);
    procedure SetImage(imageStream: DDN.mscorlib.DNStream); overload;
    procedure SetImage(imageName: string); overload;
    procedure SetPdfPage(page: DNPage);
    procedure Dispose;
    function GetValue(name: string): string;
    procedure SetValue(name: string; value: string);
    procedure RemoveValue(name: string);
    procedure BeginUpdates;
    procedure SaveUpdates;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property CustomType: string read get_CustomType write set_CustomType;
    property CustomSubtype: string read get_CustomSubtype write set_CustomSubtype;
    property &Type: DNArtifact_ArtifactType read get_Type write set_Type;
    property Subtype: DNArtifact_ArtifactSubtype read get_Subtype write set_Subtype;
    property Contents: DDN.mscorlib.DNList<DNOperator> read get_Contents;
    property Form: DNXForm read get_Form;
    property Rectangle: DNPdf_Rectangle read get_Rectangle;
    property Position: DNPoint read get_Position write set_Position;
    property RightMargin: Double read get_RightMargin write set_RightMargin;
    property LeftMargin: Double read get_LeftMargin write set_LeftMargin;
    property TopMargin: Double read get_TopMargin write set_TopMargin;
    property BottomMargin: Double read get_BottomMargin write set_BottomMargin;
    property ArtifactHorizontalAlignment: DNHorizontalAlignment read get_ArtifactHorizontalAlignment write set_ArtifactHorizontalAlignment;
    property ArtifactVerticalAlignment: DNVerticalAlignment read get_ArtifactVerticalAlignment write set_ArtifactVerticalAlignment;
    property Rotation: Double read get_Rotation write set_Rotation;
    property Text: string read get_Text write set_Text;
    property Image: DNXImage read get_Image;
    property Opacity: Double read get_Opacity write set_Opacity;
    property Lines: DDN.mscorlib.DNList<string> read get_Lines;
    property TextState: DNTextState read get_TextState write set_TextState;
    property IsBackground: Boolean read get_IsBackground write set_IsBackground;
  end;

  TDNFooterArtifact = class(TDNGenericImport<DNFooterArtifactClass, DNFooterArtifact>) end;

  //-------------namespace: Aspose.Pdf----------------
  DNHeaderArtifactClass = interface(DNArtifactClass)
  ['{97FE5C2C-F688-50F7-A732-6BEECD68957A}']
  { constructors } 

    {class} function init: DNHeaderArtifact;

  end;

  [DNTypeName('Aspose.Pdf.HeaderArtifact')]
  DNHeaderArtifact = interface(DNArtifact)
  ['{ED17285E-B51B-349E-BBA6-B6F34186B7EA}']
  { getters & setters } 

    function get_CustomType: string;
    procedure set_CustomType(value: string);
    function get_CustomSubtype: string;
    procedure set_CustomSubtype(value: string);
    function get_Type: DNArtifact_ArtifactType;
    procedure set_Type(value: DNArtifact_ArtifactType);
    function get_Subtype: DNArtifact_ArtifactSubtype;
    procedure set_Subtype(value: DNArtifact_ArtifactSubtype);
    function get_Contents: DDN.mscorlib.DNList<DNOperator>;
    function get_Form: DNXForm;
    function get_Rectangle: DNPdf_Rectangle;
    function get_Position: DNPoint;
    procedure set_Position(value: DNPoint);
    function get_RightMargin: Double;
    procedure set_RightMargin(value: Double);
    function get_LeftMargin: Double;
    procedure set_LeftMargin(value: Double);
    function get_TopMargin: Double;
    procedure set_TopMargin(value: Double);
    function get_BottomMargin: Double;
    procedure set_BottomMargin(value: Double);
    function get_ArtifactHorizontalAlignment: DNHorizontalAlignment;
    procedure set_ArtifactHorizontalAlignment(value: DNHorizontalAlignment);
    function get_ArtifactVerticalAlignment: DNVerticalAlignment;
    procedure set_ArtifactVerticalAlignment(value: DNVerticalAlignment);
    function get_Rotation: Double;
    procedure set_Rotation(value: Double);
    function get_Text: string;
    procedure set_Text(value: string);
    function get_Image: DNXImage;
    function get_Opacity: Double;
    procedure set_Opacity(value: Double);
    function get_Lines: DDN.mscorlib.DNList<string>;
    function get_TextState: DNTextState;
    procedure set_TextState(value: DNTextState);
    function get_IsBackground: Boolean;
    procedure set_IsBackground(value: Boolean);

  { methods } 

    procedure SetText(formattedText: DNFormattedText);
    procedure SetTextAndState(text: string; textState: DNTextState);
    procedure SetLinesAndState(text: TArray<string>; textState: DNTextState);
    procedure SetImage(imageStream: DDN.mscorlib.DNStream); overload;
    procedure SetImage(imageName: string); overload;
    procedure SetPdfPage(page: DNPage);
    procedure Dispose;
    function GetValue(name: string): string;
    procedure SetValue(name: string; value: string);
    procedure RemoveValue(name: string);
    procedure BeginUpdates;
    procedure SaveUpdates;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property CustomType: string read get_CustomType write set_CustomType;
    property CustomSubtype: string read get_CustomSubtype write set_CustomSubtype;
    property &Type: DNArtifact_ArtifactType read get_Type write set_Type;
    property Subtype: DNArtifact_ArtifactSubtype read get_Subtype write set_Subtype;
    property Contents: DDN.mscorlib.DNList<DNOperator> read get_Contents;
    property Form: DNXForm read get_Form;
    property Rectangle: DNPdf_Rectangle read get_Rectangle;
    property Position: DNPoint read get_Position write set_Position;
    property RightMargin: Double read get_RightMargin write set_RightMargin;
    property LeftMargin: Double read get_LeftMargin write set_LeftMargin;
    property TopMargin: Double read get_TopMargin write set_TopMargin;
    property BottomMargin: Double read get_BottomMargin write set_BottomMargin;
    property ArtifactHorizontalAlignment: DNHorizontalAlignment read get_ArtifactHorizontalAlignment write set_ArtifactHorizontalAlignment;
    property ArtifactVerticalAlignment: DNVerticalAlignment read get_ArtifactVerticalAlignment write set_ArtifactVerticalAlignment;
    property Rotation: Double read get_Rotation write set_Rotation;
    property Text: string read get_Text write set_Text;
    property Image: DNXImage read get_Image;
    property Opacity: Double read get_Opacity write set_Opacity;
    property Lines: DDN.mscorlib.DNList<string> read get_Lines;
    property TextState: DNTextState read get_TextState write set_TextState;
    property IsBackground: Boolean read get_IsBackground write set_IsBackground;
  end;

  TDNHeaderArtifact = class(TDNGenericImport<DNHeaderArtifactClass, DNHeaderArtifact>) end;

  //-------------namespace: Aspose.Pdf----------------
  DNWatermarkArtifactClass = interface(DNArtifactClass)
  ['{9D1B9078-21D1-5B25-87FB-4C9FD38F532A}']
  { constructors } 

    {class} function init: DNWatermarkArtifact;

  end;

  [DNTypeName('Aspose.Pdf.WatermarkArtifact')]
  DNWatermarkArtifact = interface(DNArtifact)
  ['{3AC922AC-D821-3D4B-B5DA-FE479F5B1477}']
  { getters & setters } 

    function get_CustomType: string;
    procedure set_CustomType(value: string);
    function get_CustomSubtype: string;
    procedure set_CustomSubtype(value: string);
    function get_Type: DNArtifact_ArtifactType;
    procedure set_Type(value: DNArtifact_ArtifactType);
    function get_Subtype: DNArtifact_ArtifactSubtype;
    procedure set_Subtype(value: DNArtifact_ArtifactSubtype);
    function get_Contents: DDN.mscorlib.DNList<DNOperator>;
    function get_Form: DNXForm;
    function get_Rectangle: DNPdf_Rectangle;
    function get_Position: DNPoint;
    procedure set_Position(value: DNPoint);
    function get_RightMargin: Double;
    procedure set_RightMargin(value: Double);
    function get_LeftMargin: Double;
    procedure set_LeftMargin(value: Double);
    function get_TopMargin: Double;
    procedure set_TopMargin(value: Double);
    function get_BottomMargin: Double;
    procedure set_BottomMargin(value: Double);
    function get_ArtifactHorizontalAlignment: DNHorizontalAlignment;
    procedure set_ArtifactHorizontalAlignment(value: DNHorizontalAlignment);
    function get_ArtifactVerticalAlignment: DNVerticalAlignment;
    procedure set_ArtifactVerticalAlignment(value: DNVerticalAlignment);
    function get_Rotation: Double;
    procedure set_Rotation(value: Double);
    function get_Text: string;
    procedure set_Text(value: string);
    function get_Image: DNXImage;
    function get_Opacity: Double;
    procedure set_Opacity(value: Double);
    function get_Lines: DDN.mscorlib.DNList<string>;
    function get_TextState: DNTextState;
    procedure set_TextState(value: DNTextState);
    function get_IsBackground: Boolean;
    procedure set_IsBackground(value: Boolean);

  { methods } 

    procedure SetText(formattedText: DNFormattedText);
    procedure SetTextAndState(text: string; textState: DNTextState);
    procedure SetLinesAndState(text: TArray<string>; textState: DNTextState);
    procedure SetImage(imageStream: DDN.mscorlib.DNStream); overload;
    procedure SetImage(imageName: string); overload;
    procedure SetPdfPage(page: DNPage);
    procedure Dispose;
    function GetValue(name: string): string;
    procedure SetValue(name: string; value: string);
    procedure RemoveValue(name: string);
    procedure BeginUpdates;
    procedure SaveUpdates;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property CustomType: string read get_CustomType write set_CustomType;
    property CustomSubtype: string read get_CustomSubtype write set_CustomSubtype;
    property &Type: DNArtifact_ArtifactType read get_Type write set_Type;
    property Subtype: DNArtifact_ArtifactSubtype read get_Subtype write set_Subtype;
    property Contents: DDN.mscorlib.DNList<DNOperator> read get_Contents;
    property Form: DNXForm read get_Form;
    property Rectangle: DNPdf_Rectangle read get_Rectangle;
    property Position: DNPoint read get_Position write set_Position;
    property RightMargin: Double read get_RightMargin write set_RightMargin;
    property LeftMargin: Double read get_LeftMargin write set_LeftMargin;
    property TopMargin: Double read get_TopMargin write set_TopMargin;
    property BottomMargin: Double read get_BottomMargin write set_BottomMargin;
    property ArtifactHorizontalAlignment: DNHorizontalAlignment read get_ArtifactHorizontalAlignment write set_ArtifactHorizontalAlignment;
    property ArtifactVerticalAlignment: DNVerticalAlignment read get_ArtifactVerticalAlignment write set_ArtifactVerticalAlignment;
    property Rotation: Double read get_Rotation write set_Rotation;
    property Text: string read get_Text write set_Text;
    property Image: DNXImage read get_Image;
    property Opacity: Double read get_Opacity write set_Opacity;
    property Lines: DDN.mscorlib.DNList<string> read get_Lines;
    property TextState: DNTextState read get_TextState write set_TextState;
    property IsBackground: Boolean read get_IsBackground write set_IsBackground;
  end;

  TDNWatermarkArtifact = class(TDNGenericImport<DNWatermarkArtifactClass, DNWatermarkArtifact>) end;

  //-------------namespace: Aspose.Pdf----------------
  DNArtifactCollectionClass = interface(DDN.mscorlib.DNObjectClass)
  ['{273FAA65-F4CA-5942-9A42-9DBCF22C00B6}']
  end;

  [DNTypeName('Aspose.Pdf.ArtifactCollection')]
  DNArtifactCollection = interface(DDN.mscorlib.DNObject)
  ['{749F7AA8-8594-3987-A4BB-740E218E5D22}']
  { getters & setters } 

    function get_IsSynchronized: Boolean;
    function get_Count: Int32;
    function get_SyncRoot: DDN.mscorlib.DNObject;
    function get_Item(index: Int32): DNArtifact;
    function get_IsReadOnly: Boolean;

  { methods } 

    procedure CopyTo(dest: TArray<DNArtifact>; index: Int32);
    function GetEnumerator: DDN.mscorlib.DNIEnumerator<DNArtifact>;
    function FindByValue(name: string; expectedValue: string): DDN.mscorlib.DNList<DNArtifact>;
    procedure Delete(artifact: DNArtifact); overload;
    procedure Update(artifact: DNArtifact);
    procedure Delete(index: Int32); overload;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property IsSynchronized: Boolean read get_IsSynchronized;
    property Count: Int32 read get_Count;
    property SyncRoot: DDN.mscorlib.DNObject read get_SyncRoot;
    property Item[index: Int32]: DNArtifact read get_Item; default;
    property IsReadOnly: Boolean read get_IsReadOnly;
  end;

  TDNArtifactCollection = class(TDNGenericImport<DNArtifactCollectionClass, DNArtifactCollection>) end;

  //-------------namespace: Aspose.Pdf----------------
  DNBaseActionCollectionClass = interface(DDN.mscorlib.DNObjectClass)
  ['{F2438543-C303-5280-A018-82DC2861B12C}']
  end;

  [DNTypeName('Aspose.Pdf.BaseActionCollection')]
  DNBaseActionCollection = interface(DDN.mscorlib.DNObject)
  ['{8324B312-FC9F-3F15-9EAE-C6797C828B9D}']
  { methods } 

    procedure RemoveActions;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNBaseActionCollection = class(TDNGenericImport<DNBaseActionCollectionClass, DNBaseActionCollection>) end;

  //-------------namespace: Aspose.Pdf.Annotations----------------
  DNAnnotationActionCollectionClass = interface(DNBaseActionCollectionClass)
  ['{9D25F5FE-E658-511B-B518-CA553FFB79E4}']
  end;

  [DNTypeName('Aspose.Pdf.Annotations.AnnotationActionCollection')]
  DNAnnotationActionCollection = interface(DNBaseActionCollection)
  ['{876ACB7E-3195-3D02-ACFB-E25DE9931EC2}']
  { getters & setters } 

    function get_OnEnter: DNPdfAction;
    procedure set_OnEnter(value: DNPdfAction);
    function get_OnExit: DNPdfAction;
    procedure set_OnExit(value: DNPdfAction);
    function get_OnPressMouseBtn: DNPdfAction;
    procedure set_OnPressMouseBtn(value: DNPdfAction);
    function get_OnReleaseMouseBtn: DNPdfAction;
    procedure set_OnReleaseMouseBtn(value: DNPdfAction);
    function get_OnReceiveFocus: DNPdfAction;
    procedure set_OnReceiveFocus(value: DNPdfAction);
    function get_OnOpenPage: DNPdfAction;
    procedure set_OnOpenPage(value: DNPdfAction);
    function get_OnClosePage: DNPdfAction;
    procedure set_OnClosePage(value: DNPdfAction);
    function get_OnShowPage: DNPdfAction;
    procedure set_OnShowPage(value: DNPdfAction);
    function get_OnHidePage: DNPdfAction;
    procedure set_OnHidePage(value: DNPdfAction);
    function get_OnLostFocus: DNPdfAction;
    procedure set_OnLostFocus(value: DNPdfAction);
    function get_OnModifyCharacter: DNPdfAction;
    procedure set_OnModifyCharacter(value: DNPdfAction);
    function get_OnValidate: DNPdfAction;
    procedure set_OnValidate(value: DNPdfAction);
    function get_OnFormat: DNPdfAction;
    procedure set_OnFormat(value: DNPdfAction);
    function get_OnCalculate: DNPdfAction;
    procedure set_OnCalculate(value: DNPdfAction);

  { methods } 

    procedure RemoveActions;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property OnEnter: DNPdfAction read get_OnEnter write set_OnEnter;
    property OnExit: DNPdfAction read get_OnExit write set_OnExit;
    property OnPressMouseBtn: DNPdfAction read get_OnPressMouseBtn write set_OnPressMouseBtn;
    property OnReleaseMouseBtn: DNPdfAction read get_OnReleaseMouseBtn write set_OnReleaseMouseBtn;
    property OnReceiveFocus: DNPdfAction read get_OnReceiveFocus write set_OnReceiveFocus;
    property OnOpenPage: DNPdfAction read get_OnOpenPage write set_OnOpenPage;
    property OnClosePage: DNPdfAction read get_OnClosePage write set_OnClosePage;
    property OnShowPage: DNPdfAction read get_OnShowPage write set_OnShowPage;
    property OnHidePage: DNPdfAction read get_OnHidePage write set_OnHidePage;
    property OnLostFocus: DNPdfAction read get_OnLostFocus write set_OnLostFocus;
    property OnModifyCharacter: DNPdfAction read get_OnModifyCharacter write set_OnModifyCharacter;
    property OnValidate: DNPdfAction read get_OnValidate write set_OnValidate;
    property OnFormat: DNPdfAction read get_OnFormat write set_OnFormat;
    property OnCalculate: DNPdfAction read get_OnCalculate write set_OnCalculate;
  end;

  TDNAnnotationActionCollection = class(TDNGenericImport<DNAnnotationActionCollectionClass, DNAnnotationActionCollection>) end;

  //-------------namespace: Aspose.Pdf----------------
  DNPageActionCollectionClass = interface(DNBaseActionCollectionClass)
  ['{33AE155A-5FFC-5960-ABCB-BF94613F108A}']
  end;

  [DNTypeName('Aspose.Pdf.PageActionCollection')]
  DNPageActionCollection = interface(DNBaseActionCollection)
  ['{2C4C6E1C-0E2F-322A-86BE-E8695963D82E}']
  { getters & setters } 

    function get_OnOpen: DNPdfAction;
    procedure set_OnOpen(value: DNPdfAction);
    function get_OnClose: DNPdfAction;
    procedure set_OnClose(value: DNPdfAction);

  { methods } 

    procedure RemoveActions;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property OnOpen: DNPdfAction read get_OnOpen write set_OnOpen;
    property OnClose: DNPdfAction read get_OnClose write set_OnClose;
  end;

  TDNPageActionCollection = class(TDNGenericImport<DNPageActionCollectionClass, DNPageActionCollection>) end;

  //-------------namespace: Aspose.Pdf----------------
  DNBaseOperatorCollectionClass = interface(DDN.mscorlib.DNObjectClass)
  ['{B98A5D40-653C-5268-A170-C3B25F3AD869}']
  end;

  [DNTypeName('Aspose.Pdf.BaseOperatorCollection')]
  DNBaseOperatorCollection = interface(DDN.mscorlib.DNObject)
  ['{D3142BB3-77C1-3C4D-B0A7-A92A45695308}']
  { getters & setters } 

    function get_Item(index: Int32): DNOperator;
    procedure set_Item(index: Int32; value: DNOperator);
    function get_Count: Int32;
    function get_IsReadOnly: Boolean;
    function get_IsFastTextExtractionMode: Boolean;

  { methods } 

    function GetEnumerator: DDN.mscorlib.DNIEnumerator<DNOperator>;
    procedure CopyTo(&array: TArray<DNOperator>; index: Int32);
    procedure SuppressUpdate;
    procedure ResumeUpdate;
    procedure Insert(index: Int32; op: DNOperator);
    procedure Add(op: DNOperator);
    function Remove(item: DNOperator): Boolean;
    function &Contains(item: DNOperator): Boolean;
    procedure Clear;
    procedure CancelUpdate;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Item[index: Int32]: DNOperator read get_Item write set_Item; default;
    property Count: Int32 read get_Count;
    property IsReadOnly: Boolean read get_IsReadOnly;
    property IsFastTextExtractionMode: Boolean read get_IsFastTextExtractionMode;
  end;

  TDNBaseOperatorCollection = class(TDNGenericImport<DNBaseOperatorCollectionClass, DNBaseOperatorCollection>) end;

  //-------------namespace: Aspose.Pdf----------------
  DNOperatorCollectionClass = interface(DNBaseOperatorCollectionClass)
  ['{AAEF8148-4C3A-5206-8DC0-F6954C2CBF78}']
  end;

  [DNTypeName('Aspose.Pdf.OperatorCollection')]
  DNOperatorCollection = interface(DNBaseOperatorCollection)
  ['{35DBBC6D-456C-3902-B6D4-A4A6EEE92D1C}']
  { getters & setters } 

    function get_IsReadOnly: Boolean;
    function get_Count: Int32;
    function get_IsFastTextExtractionMode: Boolean;
    function get_Item(index: Int32): DNOperator;
    procedure set_Item(index: Int32; value: DNOperator);

  { methods } 

    procedure CopyTo(&array: TArray<DNOperator>; index: Int32);
    function GetEnumerator: DDN.mscorlib.DNIEnumerator<DNOperator>;
    procedure Accept(visitor: DNIOperatorSelector);
    procedure Add(op: DNOperator); overload;
    procedure Delete(index: Int32); overload;
    procedure Insert(index: Int32; op: DNOperator); overload;
    procedure Replace(operators: DDN.mscorlib.DNIList<DNOperator>);
    procedure Add(ops: TArray<DNOperator>); overload;
    procedure Insert(at: Int32; ops: TArray<DNOperator>); overload;
    procedure Delete(ops: TArray<DNOperator>); overload;
    procedure Delete(list: DDN.mscorlib.DNIList<DNOperator>); overload;
    procedure Insert(at: Int32; ops: DDN.mscorlib.DNIList<DNOperator>); overload;
    procedure Clear;
    function ToString: string;
    procedure Add(ops: DDN.mscorlib.DNICollection<DNOperator>); overload;
    procedure SuppressUpdate;
    procedure ResumeUpdate;
    procedure CancelUpdate;
    function Remove(op: DNOperator): Boolean;
    function &Contains(op: DNOperator): Boolean;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    property IsReadOnly: Boolean read get_IsReadOnly;
    property Count: Int32 read get_Count;
    property IsFastTextExtractionMode: Boolean read get_IsFastTextExtractionMode;
    property Item[index: Int32]: DNOperator read get_Item write set_Item; default;
  end;

  TDNOperatorCollection = class(TDNGenericImport<DNOperatorCollectionClass, DNOperatorCollection>) end;

  //-------------namespace: Aspose.Pdf----------------
  DNBaseParagraphClass = interface(DNObjectClass)
  ['{71434F94-BEA4-51E1-8966-61F56EED039E}']
  end;

  [DNTypeName('Aspose.Pdf.BaseParagraph')]
  DNBaseParagraph = interface(DDN.mscorlib.DNICloneable)
  ['{1F0C92BB-C9EE-3E52-A2D1-CFABCA5CFFEB}']
  { getters & setters } 

    function get_VerticalAlignment: DNVerticalAlignment;
    procedure set_VerticalAlignment(value: DNVerticalAlignment);
    function get_HorizontalAlignment: DNHorizontalAlignment;
    procedure set_HorizontalAlignment(value: DNHorizontalAlignment);
    function get_Margin: DNMarginInfo;
    procedure set_Margin(value: DNMarginInfo);
    function get_IsFirstParagraphInColumn: Boolean;
    procedure set_IsFirstParagraphInColumn(value: Boolean);
    function get_IsKeptWithNext: Boolean;
    procedure set_IsKeptWithNext(value: Boolean);
    function get_IsInNewPage: Boolean;
    procedure set_IsInNewPage(value: Boolean);
    function get_IsInLineParagraph: Boolean;
    procedure set_IsInLineParagraph(value: Boolean);
    function get_Hyperlink: DNHyperlink;
    procedure set_Hyperlink(value: DNHyperlink);
    function get_ZIndex: Int32;
    procedure set_ZIndex(value: Int32);

  { methods } 

    function Clone: DDN.mscorlib.DNObject;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property VerticalAlignment: DNVerticalAlignment read get_VerticalAlignment write set_VerticalAlignment;
    property HorizontalAlignment: DNHorizontalAlignment read get_HorizontalAlignment write set_HorizontalAlignment;
    property Margin: DNMarginInfo read get_Margin write set_Margin;
    property IsFirstParagraphInColumn: Boolean read get_IsFirstParagraphInColumn write set_IsFirstParagraphInColumn;
    property IsKeptWithNext: Boolean read get_IsKeptWithNext write set_IsKeptWithNext;
    property IsInNewPage: Boolean read get_IsInNewPage write set_IsInNewPage;
    property IsInLineParagraph: Boolean read get_IsInLineParagraph write set_IsInLineParagraph;
    property Hyperlink: DNHyperlink read get_Hyperlink write set_Hyperlink;
    property ZIndex: Int32 read get_ZIndex write set_ZIndex;
  end;

  TDNBaseParagraph = class(TDNGenericImport<DNBaseParagraphClass, DNBaseParagraph>) end;

  //-------------namespace: Aspose.Pdf.Annotations----------------
  DNAnnotationClass = interface(DNBaseParagraphClass)
  ['{C49F0A2F-4ED8-5F6E-8704-D1976C4383EC}']
  { static getter & setter } 

    {class} function get_UpdateAppearanceOnConvert: Boolean;
    {class} procedure set_UpdateAppearanceOnConvert(value: Boolean);
    {class} function get_UseFontSubset: Boolean;
    {class} procedure set_UseFontSubset(value: Boolean);

  { static propertys } 

    {class} property UpdateAppearanceOnConvert: Boolean read get_UpdateAppearanceOnConvert write set_UpdateAppearanceOnConvert;
    {class} property UseFontSubset: Boolean read get_UseFontSubset write set_UseFontSubset;
  end;

  [DNTypeName('Aspose.Pdf.Annotations.Annotation')]
  DNAnnotation = interface(DNBaseParagraph)
  ['{76CC3C2F-FE41-314B-83C1-1EC311F3BF62}']
  { getters & setters } 

    function get_Flags: DNAnnotationFlags;
    procedure set_Flags(value: DNAnnotationFlags);
    function get_AnnotationType: DNAnnotationType;
    function get_Width: Double;
    procedure set_Width(value: Double);
    function get_Actions: DNPdfActionCollection;
    function get_Height: Double;
    procedure set_Height(value: Double);
    function get_Rect: DNPdf_Rectangle;
    procedure set_Rect(value: DNPdf_Rectangle);
    function get_Contents: string;
    procedure set_Contents(value: string);
    function get_Name: string;
    procedure set_Name(value: string);
    function get_Modified: DDN.mscorlib.DNDateTime;
    procedure set_Modified(value: DDN.mscorlib.DNDateTime);
    function get_Color: DNColor;
    procedure set_Color(value: DNColor);
    function get_Border: DNBorder;
    procedure set_Border(value: DNBorder);
    function get_ActiveState: string;
    procedure set_ActiveState(value: string);
    function get_Characteristics: DNCharacteristics;
    function get_States: DNAppearanceDictionary;
    function get_Alignment: DNTextAlignment;
    procedure set_Alignment(value: DNTextAlignment);
    function get_HorizontalAlignment: DNHorizontalAlignment;
    procedure set_HorizontalAlignment(value: DNHorizontalAlignment);
    function get_TextHorizontalAlignment: DNHorizontalAlignment;
    procedure set_TextHorizontalAlignment(value: DNHorizontalAlignment);
    function get_FullName: string;
    function get_Appearance: DNAppearanceDictionary;
    function get_PageIndex: Int32;
    function get_VerticalAlignment: DNVerticalAlignment;
    procedure set_VerticalAlignment(value: DNVerticalAlignment);
    function get_Margin: DNMarginInfo;
    procedure set_Margin(value: DNMarginInfo);
    function get_IsFirstParagraphInColumn: Boolean;
    procedure set_IsFirstParagraphInColumn(value: Boolean);
    function get_IsKeptWithNext: Boolean;
    procedure set_IsKeptWithNext(value: Boolean);
    function get_IsInNewPage: Boolean;
    procedure set_IsInNewPage(value: Boolean);
    function get_IsInLineParagraph: Boolean;
    procedure set_IsInLineParagraph(value: Boolean);
    function get_Hyperlink: DNHyperlink;
    procedure set_Hyperlink(value: DNHyperlink);
    function get_ZIndex: Int32;
    procedure set_ZIndex(value: Int32);

  { methods } 

    function GetRectangle(considerRotation: Boolean): DNPdf_Rectangle;
    procedure Accept(visitor: DNAnnotationSelector);
    procedure Flatten;
    function Clone: DDN.mscorlib.DNObject;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Flags: DNAnnotationFlags read get_Flags write set_Flags;
    property AnnotationType: DNAnnotationType read get_AnnotationType;
    property Width: Double read get_Width write set_Width;
    property Actions: DNPdfActionCollection read get_Actions;
    property Height: Double read get_Height write set_Height;
    property Rect: DNPdf_Rectangle read get_Rect write set_Rect;
    property Contents: string read get_Contents write set_Contents;
    property Name: string read get_Name write set_Name;
    property Modified: DDN.mscorlib.DNDateTime read get_Modified write set_Modified;
    property Color: DNColor read get_Color write set_Color;
    property Border: DNBorder read get_Border write set_Border;
    property ActiveState: string read get_ActiveState write set_ActiveState;
    property Characteristics: DNCharacteristics read get_Characteristics;
    property States: DNAppearanceDictionary read get_States;
    property Alignment: DNTextAlignment read get_Alignment write set_Alignment;
    property HorizontalAlignment: DNHorizontalAlignment read get_HorizontalAlignment write set_HorizontalAlignment;
    property TextHorizontalAlignment: DNHorizontalAlignment read get_TextHorizontalAlignment write set_TextHorizontalAlignment;
    property FullName: string read get_FullName;
    property Appearance: DNAppearanceDictionary read get_Appearance;
    property PageIndex: Int32 read get_PageIndex;
    property VerticalAlignment: DNVerticalAlignment read get_VerticalAlignment write set_VerticalAlignment;
    property Margin: DNMarginInfo read get_Margin write set_Margin;
    property IsFirstParagraphInColumn: Boolean read get_IsFirstParagraphInColumn write set_IsFirstParagraphInColumn;
    property IsKeptWithNext: Boolean read get_IsKeptWithNext write set_IsKeptWithNext;
    property IsInNewPage: Boolean read get_IsInNewPage write set_IsInNewPage;
    property IsInLineParagraph: Boolean read get_IsInLineParagraph write set_IsInLineParagraph;
    property Hyperlink: DNHyperlink read get_Hyperlink write set_Hyperlink;
    property ZIndex: Int32 read get_ZIndex write set_ZIndex;
  end;

  TDNAnnotation = class(TDNGenericImport<DNAnnotationClass, DNAnnotation>) end;

  //-------------namespace: Aspose.Pdf.Annotations----------------
  DNLinkAnnotationClass = interface(DNAnnotationClass)
  ['{28890E0D-6BE8-5284-BE06-F62484470338}']
  { constructors } 

    {class} function init(page: DNPage; rect: DNPdf_Rectangle): DNLinkAnnotation;

  end;

  [DNTypeName('Aspose.Pdf.Annotations.LinkAnnotation')]
  DNLinkAnnotation = interface(DNAnnotation)
  ['{00D93A63-112F-3FB2-9CB9-81E609CE88C9}']
  { getters & setters } 

    function get_Action: DNPdfAction;
    procedure set_Action(value: DNPdfAction);
    function get_Destination: DNIAppointment;
    procedure set_Destination(value: DNIAppointment);
    function get_Highlighting: DNHighlightingMode;
    procedure set_Highlighting(value: DNHighlightingMode);
    function get_AnnotationType: DNAnnotationType;
    function get_Flags: DNAnnotationFlags;
    procedure set_Flags(value: DNAnnotationFlags);
    function get_Width: Double;
    procedure set_Width(value: Double);
    function get_Actions: DNPdfActionCollection;
    function get_Height: Double;
    procedure set_Height(value: Double);
    function get_Rect: DNPdf_Rectangle;
    procedure set_Rect(value: DNPdf_Rectangle);
    function get_Contents: string;
    procedure set_Contents(value: string);
    function get_Name: string;
    procedure set_Name(value: string);
    function get_Modified: DDN.mscorlib.DNDateTime;
    procedure set_Modified(value: DDN.mscorlib.DNDateTime);
    function get_Color: DNColor;
    procedure set_Color(value: DNColor);
    function get_Border: DNBorder;
    procedure set_Border(value: DNBorder);
    function get_ActiveState: string;
    procedure set_ActiveState(value: string);
    function get_Characteristics: DNCharacteristics;
    function get_States: DNAppearanceDictionary;
    function get_Alignment: DNTextAlignment;
    procedure set_Alignment(value: DNTextAlignment);
    function get_HorizontalAlignment: DNHorizontalAlignment;
    procedure set_HorizontalAlignment(value: DNHorizontalAlignment);
    function get_TextHorizontalAlignment: DNHorizontalAlignment;
    procedure set_TextHorizontalAlignment(value: DNHorizontalAlignment);
    function get_FullName: string;
    function get_Appearance: DNAppearanceDictionary;
    function get_PageIndex: Int32;
    function get_VerticalAlignment: DNVerticalAlignment;
    procedure set_VerticalAlignment(value: DNVerticalAlignment);
    function get_Margin: DNMarginInfo;
    procedure set_Margin(value: DNMarginInfo);
    function get_IsFirstParagraphInColumn: Boolean;
    procedure set_IsFirstParagraphInColumn(value: Boolean);
    function get_IsKeptWithNext: Boolean;
    procedure set_IsKeptWithNext(value: Boolean);
    function get_IsInNewPage: Boolean;
    procedure set_IsInNewPage(value: Boolean);
    function get_IsInLineParagraph: Boolean;
    procedure set_IsInLineParagraph(value: Boolean);
    function get_Hyperlink: DNHyperlink;
    procedure set_Hyperlink(value: DNHyperlink);
    function get_ZIndex: Int32;
    procedure set_ZIndex(value: Int32);

  { methods } 

    procedure Accept(visitor: DNAnnotationSelector);
    function GetRectangle(considerRotation: Boolean): DNPdf_Rectangle;
    procedure Flatten;
    function Clone: DDN.mscorlib.DNObject;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Action: DNPdfAction read get_Action write set_Action;
    property Destination: DNIAppointment read get_Destination write set_Destination;
    property Highlighting: DNHighlightingMode read get_Highlighting write set_Highlighting;
    property AnnotationType: DNAnnotationType read get_AnnotationType;
    property Flags: DNAnnotationFlags read get_Flags write set_Flags;
    property Width: Double read get_Width write set_Width;
    property Actions: DNPdfActionCollection read get_Actions;
    property Height: Double read get_Height write set_Height;
    property Rect: DNPdf_Rectangle read get_Rect write set_Rect;
    property Contents: string read get_Contents write set_Contents;
    property Name: string read get_Name write set_Name;
    property Modified: DDN.mscorlib.DNDateTime read get_Modified write set_Modified;
    property Color: DNColor read get_Color write set_Color;
    property Border: DNBorder read get_Border write set_Border;
    property ActiveState: string read get_ActiveState write set_ActiveState;
    property Characteristics: DNCharacteristics read get_Characteristics;
    property States: DNAppearanceDictionary read get_States;
    property Alignment: DNTextAlignment read get_Alignment write set_Alignment;
    property HorizontalAlignment: DNHorizontalAlignment read get_HorizontalAlignment write set_HorizontalAlignment;
    property TextHorizontalAlignment: DNHorizontalAlignment read get_TextHorizontalAlignment write set_TextHorizontalAlignment;
    property FullName: string read get_FullName;
    property Appearance: DNAppearanceDictionary read get_Appearance;
    property PageIndex: Int32 read get_PageIndex;
    property VerticalAlignment: DNVerticalAlignment read get_VerticalAlignment write set_VerticalAlignment;
    property Margin: DNMarginInfo read get_Margin write set_Margin;
    property IsFirstParagraphInColumn: Boolean read get_IsFirstParagraphInColumn write set_IsFirstParagraphInColumn;
    property IsKeptWithNext: Boolean read get_IsKeptWithNext write set_IsKeptWithNext;
    property IsInNewPage: Boolean read get_IsInNewPage write set_IsInNewPage;
    property IsInLineParagraph: Boolean read get_IsInLineParagraph write set_IsInLineParagraph;
    property Hyperlink: DNHyperlink read get_Hyperlink write set_Hyperlink;
    property ZIndex: Int32 read get_ZIndex write set_ZIndex;
  end;

  TDNLinkAnnotation = class(TDNGenericImport<DNLinkAnnotationClass, DNLinkAnnotation>) end;

  //-------------namespace: Aspose.Pdf.Annotations----------------
  DNMarkupAnnotationClass = interface(DNAnnotationClass)
  ['{35F64032-0843-576A-B54A-55B5B89AF2AD}']
  { constructors } 

    {class} function init(document: DNDocument): DNMarkupAnnotation;

  end;

  [DNTypeName('Aspose.Pdf.Annotations.MarkupAnnotation')]
  DNMarkupAnnotation = interface(DNAnnotation)
  ['{D3CB863A-3A70-3F14-98C4-8A46C5B42AA1}']
  { getters & setters } 

    function get_Title: string;
    procedure set_Title(value: string);
    function get_RichText: string;
    procedure set_RichText(value: string);
    function get_CreationDate: DDN.mscorlib.DNDateTime;
    function get_Subject: string;
    procedure set_Subject(value: string);
    function get_Popup: DNPopupAnnotation;
    procedure set_Popup(value: DNPopupAnnotation);
    function get_Opacity: Double;
    procedure set_Opacity(value: Double);
    function get_InReplyTo: DNAnnotation;
    procedure set_InReplyTo(value: DNAnnotation);
    function get_ReplyType: DNReplyType;
    procedure set_ReplyType(value: DNReplyType);
    function get_Flags: DNAnnotationFlags;
    procedure set_Flags(value: DNAnnotationFlags);
    function get_AnnotationType: DNAnnotationType;
    function get_Width: Double;
    procedure set_Width(value: Double);
    function get_Actions: DNPdfActionCollection;
    function get_Height: Double;
    procedure set_Height(value: Double);
    function get_Rect: DNPdf_Rectangle;
    procedure set_Rect(value: DNPdf_Rectangle);
    function get_Contents: string;
    procedure set_Contents(value: string);
    function get_Name: string;
    procedure set_Name(value: string);
    function get_Modified: DDN.mscorlib.DNDateTime;
    procedure set_Modified(value: DDN.mscorlib.DNDateTime);
    function get_Color: DNColor;
    procedure set_Color(value: DNColor);
    function get_Border: DNBorder;
    procedure set_Border(value: DNBorder);
    function get_ActiveState: string;
    procedure set_ActiveState(value: string);
    function get_Characteristics: DNCharacteristics;
    function get_States: DNAppearanceDictionary;
    function get_Alignment: DNTextAlignment;
    procedure set_Alignment(value: DNTextAlignment);
    function get_HorizontalAlignment: DNHorizontalAlignment;
    procedure set_HorizontalAlignment(value: DNHorizontalAlignment);
    function get_TextHorizontalAlignment: DNHorizontalAlignment;
    procedure set_TextHorizontalAlignment(value: DNHorizontalAlignment);
    function get_FullName: string;
    function get_Appearance: DNAppearanceDictionary;
    function get_PageIndex: Int32;
    function get_VerticalAlignment: DNVerticalAlignment;
    procedure set_VerticalAlignment(value: DNVerticalAlignment);
    function get_Margin: DNMarginInfo;
    procedure set_Margin(value: DNMarginInfo);
    function get_IsFirstParagraphInColumn: Boolean;
    procedure set_IsFirstParagraphInColumn(value: Boolean);
    function get_IsKeptWithNext: Boolean;
    procedure set_IsKeptWithNext(value: Boolean);
    function get_IsInNewPage: Boolean;
    procedure set_IsInNewPage(value: Boolean);
    function get_IsInLineParagraph: Boolean;
    procedure set_IsInLineParagraph(value: Boolean);
    function get_Hyperlink: DNHyperlink;
    procedure set_Hyperlink(value: DNHyperlink);
    function get_ZIndex: Int32;
    procedure set_ZIndex(value: Int32);

  { methods } 

    function GetRectangle(considerRotation: Boolean): DNPdf_Rectangle;
    procedure Accept(visitor: DNAnnotationSelector);
    procedure Flatten;
    function Clone: DDN.mscorlib.DNObject;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Title: string read get_Title write set_Title;
    property RichText: string read get_RichText write set_RichText;
    property CreationDate: DDN.mscorlib.DNDateTime read get_CreationDate;
    property Subject: string read get_Subject write set_Subject;
    property Popup: DNPopupAnnotation read get_Popup write set_Popup;
    property Opacity: Double read get_Opacity write set_Opacity;
    property InReplyTo: DNAnnotation read get_InReplyTo write set_InReplyTo;
    property ReplyType: DNReplyType read get_ReplyType write set_ReplyType;
    property Flags: DNAnnotationFlags read get_Flags write set_Flags;
    property AnnotationType: DNAnnotationType read get_AnnotationType;
    property Width: Double read get_Width write set_Width;
    property Actions: DNPdfActionCollection read get_Actions;
    property Height: Double read get_Height write set_Height;
    property Rect: DNPdf_Rectangle read get_Rect write set_Rect;
    property Contents: string read get_Contents write set_Contents;
    property Name: string read get_Name write set_Name;
    property Modified: DDN.mscorlib.DNDateTime read get_Modified write set_Modified;
    property Color: DNColor read get_Color write set_Color;
    property Border: DNBorder read get_Border write set_Border;
    property ActiveState: string read get_ActiveState write set_ActiveState;
    property Characteristics: DNCharacteristics read get_Characteristics;
    property States: DNAppearanceDictionary read get_States;
    property Alignment: DNTextAlignment read get_Alignment write set_Alignment;
    property HorizontalAlignment: DNHorizontalAlignment read get_HorizontalAlignment write set_HorizontalAlignment;
    property TextHorizontalAlignment: DNHorizontalAlignment read get_TextHorizontalAlignment write set_TextHorizontalAlignment;
    property FullName: string read get_FullName;
    property Appearance: DNAppearanceDictionary read get_Appearance;
    property PageIndex: Int32 read get_PageIndex;
    property VerticalAlignment: DNVerticalAlignment read get_VerticalAlignment write set_VerticalAlignment;
    property Margin: DNMarginInfo read get_Margin write set_Margin;
    property IsFirstParagraphInColumn: Boolean read get_IsFirstParagraphInColumn write set_IsFirstParagraphInColumn;
    property IsKeptWithNext: Boolean read get_IsKeptWithNext write set_IsKeptWithNext;
    property IsInNewPage: Boolean read get_IsInNewPage write set_IsInNewPage;
    property IsInLineParagraph: Boolean read get_IsInLineParagraph write set_IsInLineParagraph;
    property Hyperlink: DNHyperlink read get_Hyperlink write set_Hyperlink;
    property ZIndex: Int32 read get_ZIndex write set_ZIndex;
  end;

  TDNMarkupAnnotation = class(TDNGenericImport<DNMarkupAnnotationClass, DNMarkupAnnotation>) end;

  //-------------namespace: Aspose.Pdf.Annotations----------------
  DNCaretAnnotationClass = interface(DNMarkupAnnotationClass)
  ['{5CF48934-16EE-515D-B2E9-C0E43F0019F0}']
  { constructors } 

    {class} function init(document: DNDocument): DNCaretAnnotation; overload;
    {class} function init(page: DNPage; rect: DNPdf_Rectangle): DNCaretAnnotation; overload;

  end;

  [DNTypeName('Aspose.Pdf.Annotations.CaretAnnotation')]
  DNCaretAnnotation = interface(DNMarkupAnnotation)
  ['{38B09954-5641-37FD-9C92-35A14F5A90B2}']
  { getters & setters } 

    function get_AnnotationType: DNAnnotationType;
    function get_Frame: DNPdf_Rectangle;
    procedure set_Frame(value: DNPdf_Rectangle);
    function get_Symbol: DNCaretSymbol;
    procedure set_Symbol(value: DNCaretSymbol);
    function get_Title: string;
    procedure set_Title(value: string);
    function get_RichText: string;
    procedure set_RichText(value: string);
    function get_CreationDate: DDN.mscorlib.DNDateTime;
    function get_Subject: string;
    procedure set_Subject(value: string);
    function get_Popup: DNPopupAnnotation;
    procedure set_Popup(value: DNPopupAnnotation);
    function get_Opacity: Double;
    procedure set_Opacity(value: Double);
    function get_InReplyTo: DNAnnotation;
    procedure set_InReplyTo(value: DNAnnotation);
    function get_ReplyType: DNReplyType;
    procedure set_ReplyType(value: DNReplyType);
    function get_Flags: DNAnnotationFlags;
    procedure set_Flags(value: DNAnnotationFlags);
    function get_Width: Double;
    procedure set_Width(value: Double);
    function get_Actions: DNPdfActionCollection;
    function get_Height: Double;
    procedure set_Height(value: Double);
    function get_Rect: DNPdf_Rectangle;
    procedure set_Rect(value: DNPdf_Rectangle);
    function get_Contents: string;
    procedure set_Contents(value: string);
    function get_Name: string;
    procedure set_Name(value: string);
    function get_Modified: DDN.mscorlib.DNDateTime;
    procedure set_Modified(value: DDN.mscorlib.DNDateTime);
    function get_Color: DNColor;
    procedure set_Color(value: DNColor);
    function get_Border: DNBorder;
    procedure set_Border(value: DNBorder);
    function get_ActiveState: string;
    procedure set_ActiveState(value: string);
    function get_Characteristics: DNCharacteristics;
    function get_States: DNAppearanceDictionary;
    function get_Alignment: DNTextAlignment;
    procedure set_Alignment(value: DNTextAlignment);
    function get_HorizontalAlignment: DNHorizontalAlignment;
    procedure set_HorizontalAlignment(value: DNHorizontalAlignment);
    function get_TextHorizontalAlignment: DNHorizontalAlignment;
    procedure set_TextHorizontalAlignment(value: DNHorizontalAlignment);
    function get_FullName: string;
    function get_Appearance: DNAppearanceDictionary;
    function get_PageIndex: Int32;
    function get_VerticalAlignment: DNVerticalAlignment;
    procedure set_VerticalAlignment(value: DNVerticalAlignment);
    function get_Margin: DNMarginInfo;
    procedure set_Margin(value: DNMarginInfo);
    function get_IsFirstParagraphInColumn: Boolean;
    procedure set_IsFirstParagraphInColumn(value: Boolean);
    function get_IsKeptWithNext: Boolean;
    procedure set_IsKeptWithNext(value: Boolean);
    function get_IsInNewPage: Boolean;
    procedure set_IsInNewPage(value: Boolean);
    function get_IsInLineParagraph: Boolean;
    procedure set_IsInLineParagraph(value: Boolean);
    function get_Hyperlink: DNHyperlink;
    procedure set_Hyperlink(value: DNHyperlink);
    function get_ZIndex: Int32;
    procedure set_ZIndex(value: Int32);

  { methods } 

    procedure Accept(visitor: DNAnnotationSelector);
    function GetRectangle(considerRotation: Boolean): DNPdf_Rectangle;
    procedure Flatten;
    function Clone: DDN.mscorlib.DNObject;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property AnnotationType: DNAnnotationType read get_AnnotationType;
    property Frame: DNPdf_Rectangle read get_Frame write set_Frame;
    property Symbol: DNCaretSymbol read get_Symbol write set_Symbol;
    property Title: string read get_Title write set_Title;
    property RichText: string read get_RichText write set_RichText;
    property CreationDate: DDN.mscorlib.DNDateTime read get_CreationDate;
    property Subject: string read get_Subject write set_Subject;
    property Popup: DNPopupAnnotation read get_Popup write set_Popup;
    property Opacity: Double read get_Opacity write set_Opacity;
    property InReplyTo: DNAnnotation read get_InReplyTo write set_InReplyTo;
    property ReplyType: DNReplyType read get_ReplyType write set_ReplyType;
    property Flags: DNAnnotationFlags read get_Flags write set_Flags;
    property Width: Double read get_Width write set_Width;
    property Actions: DNPdfActionCollection read get_Actions;
    property Height: Double read get_Height write set_Height;
    property Rect: DNPdf_Rectangle read get_Rect write set_Rect;
    property Contents: string read get_Contents write set_Contents;
    property Name: string read get_Name write set_Name;
    property Modified: DDN.mscorlib.DNDateTime read get_Modified write set_Modified;
    property Color: DNColor read get_Color write set_Color;
    property Border: DNBorder read get_Border write set_Border;
    property ActiveState: string read get_ActiveState write set_ActiveState;
    property Characteristics: DNCharacteristics read get_Characteristics;
    property States: DNAppearanceDictionary read get_States;
    property Alignment: DNTextAlignment read get_Alignment write set_Alignment;
    property HorizontalAlignment: DNHorizontalAlignment read get_HorizontalAlignment write set_HorizontalAlignment;
    property TextHorizontalAlignment: DNHorizontalAlignment read get_TextHorizontalAlignment write set_TextHorizontalAlignment;
    property FullName: string read get_FullName;
    property Appearance: DNAppearanceDictionary read get_Appearance;
    property PageIndex: Int32 read get_PageIndex;
    property VerticalAlignment: DNVerticalAlignment read get_VerticalAlignment write set_VerticalAlignment;
    property Margin: DNMarginInfo read get_Margin write set_Margin;
    property IsFirstParagraphInColumn: Boolean read get_IsFirstParagraphInColumn write set_IsFirstParagraphInColumn;
    property IsKeptWithNext: Boolean read get_IsKeptWithNext write set_IsKeptWithNext;
    property IsInNewPage: Boolean read get_IsInNewPage write set_IsInNewPage;
    property IsInLineParagraph: Boolean read get_IsInLineParagraph write set_IsInLineParagraph;
    property Hyperlink: DNHyperlink read get_Hyperlink write set_Hyperlink;
    property ZIndex: Int32 read get_ZIndex write set_ZIndex;
  end;

  TDNCaretAnnotation = class(TDNGenericImport<DNCaretAnnotationClass, DNCaretAnnotation>) end;

  //-------------namespace: Aspose.Pdf.Annotations----------------
  DNCommonFigureAnnotationClass = interface(DNMarkupAnnotationClass)
  ['{F55EA253-0BAB-5127-BC2D-DE2B35182F4A}']
  { constructors } 

    {class} function init(document: DNDocument): DNCommonFigureAnnotation;

  end;

  [DNTypeName('Aspose.Pdf.Annotations.CommonFigureAnnotation')]
  DNCommonFigureAnnotation = interface(DNMarkupAnnotation)
  ['{6EC34194-60B4-32E4-BEC7-E83C2BC262D7}']
  { getters & setters } 

    function get_InteriorColor: DNColor;
    procedure set_InteriorColor(value: DNColor);
    function get_Frame: DNPdf_Rectangle;
    procedure set_Frame(value: DNPdf_Rectangle);
    function get_Title: string;
    procedure set_Title(value: string);
    function get_RichText: string;
    procedure set_RichText(value: string);
    function get_CreationDate: DDN.mscorlib.DNDateTime;
    function get_Subject: string;
    procedure set_Subject(value: string);
    function get_Popup: DNPopupAnnotation;
    procedure set_Popup(value: DNPopupAnnotation);
    function get_Opacity: Double;
    procedure set_Opacity(value: Double);
    function get_InReplyTo: DNAnnotation;
    procedure set_InReplyTo(value: DNAnnotation);
    function get_ReplyType: DNReplyType;
    procedure set_ReplyType(value: DNReplyType);
    function get_Flags: DNAnnotationFlags;
    procedure set_Flags(value: DNAnnotationFlags);
    function get_AnnotationType: DNAnnotationType;
    function get_Width: Double;
    procedure set_Width(value: Double);
    function get_Actions: DNPdfActionCollection;
    function get_Height: Double;
    procedure set_Height(value: Double);
    function get_Rect: DNPdf_Rectangle;
    procedure set_Rect(value: DNPdf_Rectangle);
    function get_Contents: string;
    procedure set_Contents(value: string);
    function get_Name: string;
    procedure set_Name(value: string);
    function get_Modified: DDN.mscorlib.DNDateTime;
    procedure set_Modified(value: DDN.mscorlib.DNDateTime);
    function get_Color: DNColor;
    procedure set_Color(value: DNColor);
    function get_Border: DNBorder;
    procedure set_Border(value: DNBorder);
    function get_ActiveState: string;
    procedure set_ActiveState(value: string);
    function get_Characteristics: DNCharacteristics;
    function get_States: DNAppearanceDictionary;
    function get_Alignment: DNTextAlignment;
    procedure set_Alignment(value: DNTextAlignment);
    function get_HorizontalAlignment: DNHorizontalAlignment;
    procedure set_HorizontalAlignment(value: DNHorizontalAlignment);
    function get_TextHorizontalAlignment: DNHorizontalAlignment;
    procedure set_TextHorizontalAlignment(value: DNHorizontalAlignment);
    function get_FullName: string;
    function get_Appearance: DNAppearanceDictionary;
    function get_PageIndex: Int32;
    function get_VerticalAlignment: DNVerticalAlignment;
    procedure set_VerticalAlignment(value: DNVerticalAlignment);
    function get_Margin: DNMarginInfo;
    procedure set_Margin(value: DNMarginInfo);
    function get_IsFirstParagraphInColumn: Boolean;
    procedure set_IsFirstParagraphInColumn(value: Boolean);
    function get_IsKeptWithNext: Boolean;
    procedure set_IsKeptWithNext(value: Boolean);
    function get_IsInNewPage: Boolean;
    procedure set_IsInNewPage(value: Boolean);
    function get_IsInLineParagraph: Boolean;
    procedure set_IsInLineParagraph(value: Boolean);
    function get_Hyperlink: DNHyperlink;
    procedure set_Hyperlink(value: DNHyperlink);
    function get_ZIndex: Int32;
    procedure set_ZIndex(value: Int32);

  { methods } 

    function GetRectangle(considerRotation: Boolean): DNPdf_Rectangle;
    procedure Accept(visitor: DNAnnotationSelector);
    procedure Flatten;
    function Clone: DDN.mscorlib.DNObject;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property InteriorColor: DNColor read get_InteriorColor write set_InteriorColor;
    property Frame: DNPdf_Rectangle read get_Frame write set_Frame;
    property Title: string read get_Title write set_Title;
    property RichText: string read get_RichText write set_RichText;
    property CreationDate: DDN.mscorlib.DNDateTime read get_CreationDate;
    property Subject: string read get_Subject write set_Subject;
    property Popup: DNPopupAnnotation read get_Popup write set_Popup;
    property Opacity: Double read get_Opacity write set_Opacity;
    property InReplyTo: DNAnnotation read get_InReplyTo write set_InReplyTo;
    property ReplyType: DNReplyType read get_ReplyType write set_ReplyType;
    property Flags: DNAnnotationFlags read get_Flags write set_Flags;
    property AnnotationType: DNAnnotationType read get_AnnotationType;
    property Width: Double read get_Width write set_Width;
    property Actions: DNPdfActionCollection read get_Actions;
    property Height: Double read get_Height write set_Height;
    property Rect: DNPdf_Rectangle read get_Rect write set_Rect;
    property Contents: string read get_Contents write set_Contents;
    property Name: string read get_Name write set_Name;
    property Modified: DDN.mscorlib.DNDateTime read get_Modified write set_Modified;
    property Color: DNColor read get_Color write set_Color;
    property Border: DNBorder read get_Border write set_Border;
    property ActiveState: string read get_ActiveState write set_ActiveState;
    property Characteristics: DNCharacteristics read get_Characteristics;
    property States: DNAppearanceDictionary read get_States;
    property Alignment: DNTextAlignment read get_Alignment write set_Alignment;
    property HorizontalAlignment: DNHorizontalAlignment read get_HorizontalAlignment write set_HorizontalAlignment;
    property TextHorizontalAlignment: DNHorizontalAlignment read get_TextHorizontalAlignment write set_TextHorizontalAlignment;
    property FullName: string read get_FullName;
    property Appearance: DNAppearanceDictionary read get_Appearance;
    property PageIndex: Int32 read get_PageIndex;
    property VerticalAlignment: DNVerticalAlignment read get_VerticalAlignment write set_VerticalAlignment;
    property Margin: DNMarginInfo read get_Margin write set_Margin;
    property IsFirstParagraphInColumn: Boolean read get_IsFirstParagraphInColumn write set_IsFirstParagraphInColumn;
    property IsKeptWithNext: Boolean read get_IsKeptWithNext write set_IsKeptWithNext;
    property IsInNewPage: Boolean read get_IsInNewPage write set_IsInNewPage;
    property IsInLineParagraph: Boolean read get_IsInLineParagraph write set_IsInLineParagraph;
    property Hyperlink: DNHyperlink read get_Hyperlink write set_Hyperlink;
    property ZIndex: Int32 read get_ZIndex write set_ZIndex;
  end;

  TDNCommonFigureAnnotation = class(TDNGenericImport<DNCommonFigureAnnotationClass, DNCommonFigureAnnotation>) end;

  //-------------namespace: Aspose.Pdf.Annotations----------------
  DNCircleAnnotationClass = interface(DNCommonFigureAnnotationClass)
  ['{A7F73233-6CC7-56FE-A49D-3B379584A5FB}']
  { constructors } 

    {class} function init(document: DNDocument): DNCircleAnnotation; overload;
    {class} function init(page: DNPage; rect: DNPdf_Rectangle): DNCircleAnnotation; overload;

  end;

  [DNTypeName('Aspose.Pdf.Annotations.CircleAnnotation')]
  DNCircleAnnotation = interface(DNCommonFigureAnnotation)
  ['{D47C6BBE-CE78-35C0-8359-A3A01C70652F}']
  { getters & setters } 

    function get_AnnotationType: DNAnnotationType;
    function get_InteriorColor: DNColor;
    procedure set_InteriorColor(value: DNColor);
    function get_Frame: DNPdf_Rectangle;
    procedure set_Frame(value: DNPdf_Rectangle);
    function get_Title: string;
    procedure set_Title(value: string);
    function get_RichText: string;
    procedure set_RichText(value: string);
    function get_CreationDate: DDN.mscorlib.DNDateTime;
    function get_Subject: string;
    procedure set_Subject(value: string);
    function get_Popup: DNPopupAnnotation;
    procedure set_Popup(value: DNPopupAnnotation);
    function get_Opacity: Double;
    procedure set_Opacity(value: Double);
    function get_InReplyTo: DNAnnotation;
    procedure set_InReplyTo(value: DNAnnotation);
    function get_ReplyType: DNReplyType;
    procedure set_ReplyType(value: DNReplyType);
    function get_Flags: DNAnnotationFlags;
    procedure set_Flags(value: DNAnnotationFlags);
    function get_Width: Double;
    procedure set_Width(value: Double);
    function get_Actions: DNPdfActionCollection;
    function get_Height: Double;
    procedure set_Height(value: Double);
    function get_Rect: DNPdf_Rectangle;
    procedure set_Rect(value: DNPdf_Rectangle);
    function get_Contents: string;
    procedure set_Contents(value: string);
    function get_Name: string;
    procedure set_Name(value: string);
    function get_Modified: DDN.mscorlib.DNDateTime;
    procedure set_Modified(value: DDN.mscorlib.DNDateTime);
    function get_Color: DNColor;
    procedure set_Color(value: DNColor);
    function get_Border: DNBorder;
    procedure set_Border(value: DNBorder);
    function get_ActiveState: string;
    procedure set_ActiveState(value: string);
    function get_Characteristics: DNCharacteristics;
    function get_States: DNAppearanceDictionary;
    function get_Alignment: DNTextAlignment;
    procedure set_Alignment(value: DNTextAlignment);
    function get_HorizontalAlignment: DNHorizontalAlignment;
    procedure set_HorizontalAlignment(value: DNHorizontalAlignment);
    function get_TextHorizontalAlignment: DNHorizontalAlignment;
    procedure set_TextHorizontalAlignment(value: DNHorizontalAlignment);
    function get_FullName: string;
    function get_Appearance: DNAppearanceDictionary;
    function get_PageIndex: Int32;
    function get_VerticalAlignment: DNVerticalAlignment;
    procedure set_VerticalAlignment(value: DNVerticalAlignment);
    function get_Margin: DNMarginInfo;
    procedure set_Margin(value: DNMarginInfo);
    function get_IsFirstParagraphInColumn: Boolean;
    procedure set_IsFirstParagraphInColumn(value: Boolean);
    function get_IsKeptWithNext: Boolean;
    procedure set_IsKeptWithNext(value: Boolean);
    function get_IsInNewPage: Boolean;
    procedure set_IsInNewPage(value: Boolean);
    function get_IsInLineParagraph: Boolean;
    procedure set_IsInLineParagraph(value: Boolean);
    function get_Hyperlink: DNHyperlink;
    procedure set_Hyperlink(value: DNHyperlink);
    function get_ZIndex: Int32;
    procedure set_ZIndex(value: Int32);

  { methods } 

    procedure Accept(visitor: DNAnnotationSelector);
    function GetRectangle(considerRotation: Boolean): DNPdf_Rectangle;
    procedure Flatten;
    function Clone: DDN.mscorlib.DNObject;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property AnnotationType: DNAnnotationType read get_AnnotationType;
    property InteriorColor: DNColor read get_InteriorColor write set_InteriorColor;
    property Frame: DNPdf_Rectangle read get_Frame write set_Frame;
    property Title: string read get_Title write set_Title;
    property RichText: string read get_RichText write set_RichText;
    property CreationDate: DDN.mscorlib.DNDateTime read get_CreationDate;
    property Subject: string read get_Subject write set_Subject;
    property Popup: DNPopupAnnotation read get_Popup write set_Popup;
    property Opacity: Double read get_Opacity write set_Opacity;
    property InReplyTo: DNAnnotation read get_InReplyTo write set_InReplyTo;
    property ReplyType: DNReplyType read get_ReplyType write set_ReplyType;
    property Flags: DNAnnotationFlags read get_Flags write set_Flags;
    property Width: Double read get_Width write set_Width;
    property Actions: DNPdfActionCollection read get_Actions;
    property Height: Double read get_Height write set_Height;
    property Rect: DNPdf_Rectangle read get_Rect write set_Rect;
    property Contents: string read get_Contents write set_Contents;
    property Name: string read get_Name write set_Name;
    property Modified: DDN.mscorlib.DNDateTime read get_Modified write set_Modified;
    property Color: DNColor read get_Color write set_Color;
    property Border: DNBorder read get_Border write set_Border;
    property ActiveState: string read get_ActiveState write set_ActiveState;
    property Characteristics: DNCharacteristics read get_Characteristics;
    property States: DNAppearanceDictionary read get_States;
    property Alignment: DNTextAlignment read get_Alignment write set_Alignment;
    property HorizontalAlignment: DNHorizontalAlignment read get_HorizontalAlignment write set_HorizontalAlignment;
    property TextHorizontalAlignment: DNHorizontalAlignment read get_TextHorizontalAlignment write set_TextHorizontalAlignment;
    property FullName: string read get_FullName;
    property Appearance: DNAppearanceDictionary read get_Appearance;
    property PageIndex: Int32 read get_PageIndex;
    property VerticalAlignment: DNVerticalAlignment read get_VerticalAlignment write set_VerticalAlignment;
    property Margin: DNMarginInfo read get_Margin write set_Margin;
    property IsFirstParagraphInColumn: Boolean read get_IsFirstParagraphInColumn write set_IsFirstParagraphInColumn;
    property IsKeptWithNext: Boolean read get_IsKeptWithNext write set_IsKeptWithNext;
    property IsInNewPage: Boolean read get_IsInNewPage write set_IsInNewPage;
    property IsInLineParagraph: Boolean read get_IsInLineParagraph write set_IsInLineParagraph;
    property Hyperlink: DNHyperlink read get_Hyperlink write set_Hyperlink;
    property ZIndex: Int32 read get_ZIndex write set_ZIndex;
  end;

  TDNCircleAnnotation = class(TDNGenericImport<DNCircleAnnotationClass, DNCircleAnnotation>) end;

  //-------------namespace: Aspose.Pdf.Annotations----------------
  DNSquareAnnotationClass = interface(DNCommonFigureAnnotationClass)
  ['{B2B43D55-ED25-5784-A88D-BB3F860DE633}']
  { constructors } 

    {class} function init(document: DNDocument): DNSquareAnnotation; overload;
    {class} function init(page: DNPage; rect: DNPdf_Rectangle): DNSquareAnnotation; overload;

  end;

  [DNTypeName('Aspose.Pdf.Annotations.SquareAnnotation')]
  DNSquareAnnotation = interface(DNCommonFigureAnnotation)
  ['{DFB626B0-5F74-3FC2-A815-9934784169C8}']
  { getters & setters } 

    function get_AnnotationType: DNAnnotationType;
    function get_InteriorColor: DNColor;
    procedure set_InteriorColor(value: DNColor);
    function get_Frame: DNPdf_Rectangle;
    procedure set_Frame(value: DNPdf_Rectangle);
    function get_Title: string;
    procedure set_Title(value: string);
    function get_RichText: string;
    procedure set_RichText(value: string);
    function get_CreationDate: DDN.mscorlib.DNDateTime;
    function get_Subject: string;
    procedure set_Subject(value: string);
    function get_Popup: DNPopupAnnotation;
    procedure set_Popup(value: DNPopupAnnotation);
    function get_Opacity: Double;
    procedure set_Opacity(value: Double);
    function get_InReplyTo: DNAnnotation;
    procedure set_InReplyTo(value: DNAnnotation);
    function get_ReplyType: DNReplyType;
    procedure set_ReplyType(value: DNReplyType);
    function get_Flags: DNAnnotationFlags;
    procedure set_Flags(value: DNAnnotationFlags);
    function get_Width: Double;
    procedure set_Width(value: Double);
    function get_Actions: DNPdfActionCollection;
    function get_Height: Double;
    procedure set_Height(value: Double);
    function get_Rect: DNPdf_Rectangle;
    procedure set_Rect(value: DNPdf_Rectangle);
    function get_Contents: string;
    procedure set_Contents(value: string);
    function get_Name: string;
    procedure set_Name(value: string);
    function get_Modified: DDN.mscorlib.DNDateTime;
    procedure set_Modified(value: DDN.mscorlib.DNDateTime);
    function get_Color: DNColor;
    procedure set_Color(value: DNColor);
    function get_Border: DNBorder;
    procedure set_Border(value: DNBorder);
    function get_ActiveState: string;
    procedure set_ActiveState(value: string);
    function get_Characteristics: DNCharacteristics;
    function get_States: DNAppearanceDictionary;
    function get_Alignment: DNTextAlignment;
    procedure set_Alignment(value: DNTextAlignment);
    function get_HorizontalAlignment: DNHorizontalAlignment;
    procedure set_HorizontalAlignment(value: DNHorizontalAlignment);
    function get_TextHorizontalAlignment: DNHorizontalAlignment;
    procedure set_TextHorizontalAlignment(value: DNHorizontalAlignment);
    function get_FullName: string;
    function get_Appearance: DNAppearanceDictionary;
    function get_PageIndex: Int32;
    function get_VerticalAlignment: DNVerticalAlignment;
    procedure set_VerticalAlignment(value: DNVerticalAlignment);
    function get_Margin: DNMarginInfo;
    procedure set_Margin(value: DNMarginInfo);
    function get_IsFirstParagraphInColumn: Boolean;
    procedure set_IsFirstParagraphInColumn(value: Boolean);
    function get_IsKeptWithNext: Boolean;
    procedure set_IsKeptWithNext(value: Boolean);
    function get_IsInNewPage: Boolean;
    procedure set_IsInNewPage(value: Boolean);
    function get_IsInLineParagraph: Boolean;
    procedure set_IsInLineParagraph(value: Boolean);
    function get_Hyperlink: DNHyperlink;
    procedure set_Hyperlink(value: DNHyperlink);
    function get_ZIndex: Int32;
    procedure set_ZIndex(value: Int32);

  { methods } 

    procedure Accept(visitor: DNAnnotationSelector);
    function GetRectangle(considerRotation: Boolean): DNPdf_Rectangle;
    procedure Flatten;
    function Clone: DDN.mscorlib.DNObject;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property AnnotationType: DNAnnotationType read get_AnnotationType;
    property InteriorColor: DNColor read get_InteriorColor write set_InteriorColor;
    property Frame: DNPdf_Rectangle read get_Frame write set_Frame;
    property Title: string read get_Title write set_Title;
    property RichText: string read get_RichText write set_RichText;
    property CreationDate: DDN.mscorlib.DNDateTime read get_CreationDate;
    property Subject: string read get_Subject write set_Subject;
    property Popup: DNPopupAnnotation read get_Popup write set_Popup;
    property Opacity: Double read get_Opacity write set_Opacity;
    property InReplyTo: DNAnnotation read get_InReplyTo write set_InReplyTo;
    property ReplyType: DNReplyType read get_ReplyType write set_ReplyType;
    property Flags: DNAnnotationFlags read get_Flags write set_Flags;
    property Width: Double read get_Width write set_Width;
    property Actions: DNPdfActionCollection read get_Actions;
    property Height: Double read get_Height write set_Height;
    property Rect: DNPdf_Rectangle read get_Rect write set_Rect;
    property Contents: string read get_Contents write set_Contents;
    property Name: string read get_Name write set_Name;
    property Modified: DDN.mscorlib.DNDateTime read get_Modified write set_Modified;
    property Color: DNColor read get_Color write set_Color;
    property Border: DNBorder read get_Border write set_Border;
    property ActiveState: string read get_ActiveState write set_ActiveState;
    property Characteristics: DNCharacteristics read get_Characteristics;
    property States: DNAppearanceDictionary read get_States;
    property Alignment: DNTextAlignment read get_Alignment write set_Alignment;
    property HorizontalAlignment: DNHorizontalAlignment read get_HorizontalAlignment write set_HorizontalAlignment;
    property TextHorizontalAlignment: DNHorizontalAlignment read get_TextHorizontalAlignment write set_TextHorizontalAlignment;
    property FullName: string read get_FullName;
    property Appearance: DNAppearanceDictionary read get_Appearance;
    property PageIndex: Int32 read get_PageIndex;
    property VerticalAlignment: DNVerticalAlignment read get_VerticalAlignment write set_VerticalAlignment;
    property Margin: DNMarginInfo read get_Margin write set_Margin;
    property IsFirstParagraphInColumn: Boolean read get_IsFirstParagraphInColumn write set_IsFirstParagraphInColumn;
    property IsKeptWithNext: Boolean read get_IsKeptWithNext write set_IsKeptWithNext;
    property IsInNewPage: Boolean read get_IsInNewPage write set_IsInNewPage;
    property IsInLineParagraph: Boolean read get_IsInLineParagraph write set_IsInLineParagraph;
    property Hyperlink: DNHyperlink read get_Hyperlink write set_Hyperlink;
    property ZIndex: Int32 read get_ZIndex write set_ZIndex;
  end;

  TDNSquareAnnotation = class(TDNGenericImport<DNSquareAnnotationClass, DNSquareAnnotation>) end;

  //-------------namespace: Aspose.Pdf.Annotations----------------
  DNFileAttachmentAnnotationClass = interface(DNMarkupAnnotationClass)
  ['{CC001A9F-114D-5853-8D9E-89BBD97DDE06}']
  { constructors } 

    {class} function init(page: DNPage; rect: DNPdf_Rectangle; fileSpec: DNFileSpecification): DNFileAttachmentAnnotation;

  end;

  [DNTypeName('Aspose.Pdf.Annotations.FileAttachmentAnnotation')]
  DNFileAttachmentAnnotation = interface(DNMarkupAnnotation)
  ['{7C332EFB-9012-3C6F-8C0A-DC6C2F475E1D}']
  { getters & setters } 

    function get_AnnotationType: DNAnnotationType;
    function get_File: DNFileSpecification;
    procedure set_File(value: DNFileSpecification);
    function get_Icon: DNFileIcon;
    procedure set_Icon(value: DNFileIcon);
    function get_Opacity: Double;
    procedure set_Opacity(value: Double);
    function get_Title: string;
    procedure set_Title(value: string);
    function get_RichText: string;
    procedure set_RichText(value: string);
    function get_CreationDate: DDN.mscorlib.DNDateTime;
    function get_Subject: string;
    procedure set_Subject(value: string);
    function get_Popup: DNPopupAnnotation;
    procedure set_Popup(value: DNPopupAnnotation);
    function get_InReplyTo: DNAnnotation;
    procedure set_InReplyTo(value: DNAnnotation);
    function get_ReplyType: DNReplyType;
    procedure set_ReplyType(value: DNReplyType);
    function get_Flags: DNAnnotationFlags;
    procedure set_Flags(value: DNAnnotationFlags);
    function get_Width: Double;
    procedure set_Width(value: Double);
    function get_Actions: DNPdfActionCollection;
    function get_Height: Double;
    procedure set_Height(value: Double);
    function get_Rect: DNPdf_Rectangle;
    procedure set_Rect(value: DNPdf_Rectangle);
    function get_Contents: string;
    procedure set_Contents(value: string);
    function get_Name: string;
    procedure set_Name(value: string);
    function get_Modified: DDN.mscorlib.DNDateTime;
    procedure set_Modified(value: DDN.mscorlib.DNDateTime);
    function get_Color: DNColor;
    procedure set_Color(value: DNColor);
    function get_Border: DNBorder;
    procedure set_Border(value: DNBorder);
    function get_ActiveState: string;
    procedure set_ActiveState(value: string);
    function get_Characteristics: DNCharacteristics;
    function get_States: DNAppearanceDictionary;
    function get_Alignment: DNTextAlignment;
    procedure set_Alignment(value: DNTextAlignment);
    function get_HorizontalAlignment: DNHorizontalAlignment;
    procedure set_HorizontalAlignment(value: DNHorizontalAlignment);
    function get_TextHorizontalAlignment: DNHorizontalAlignment;
    procedure set_TextHorizontalAlignment(value: DNHorizontalAlignment);
    function get_FullName: string;
    function get_Appearance: DNAppearanceDictionary;
    function get_PageIndex: Int32;
    function get_VerticalAlignment: DNVerticalAlignment;
    procedure set_VerticalAlignment(value: DNVerticalAlignment);
    function get_Margin: DNMarginInfo;
    procedure set_Margin(value: DNMarginInfo);
    function get_IsFirstParagraphInColumn: Boolean;
    procedure set_IsFirstParagraphInColumn(value: Boolean);
    function get_IsKeptWithNext: Boolean;
    procedure set_IsKeptWithNext(value: Boolean);
    function get_IsInNewPage: Boolean;
    procedure set_IsInNewPage(value: Boolean);
    function get_IsInLineParagraph: Boolean;
    procedure set_IsInLineParagraph(value: Boolean);
    function get_Hyperlink: DNHyperlink;
    procedure set_Hyperlink(value: DNHyperlink);
    function get_ZIndex: Int32;
    procedure set_ZIndex(value: Int32);

  { methods } 

    procedure Accept(visitor: DNAnnotationSelector);
    function GetRectangle(considerRotation: Boolean): DNPdf_Rectangle;
    procedure Flatten;
    function Clone: DDN.mscorlib.DNObject;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property AnnotationType: DNAnnotationType read get_AnnotationType;
    property &File: DNFileSpecification read get_File write set_File;
    property Icon: DNFileIcon read get_Icon write set_Icon;
    property Opacity: Double read get_Opacity write set_Opacity;
    property Title: string read get_Title write set_Title;
    property RichText: string read get_RichText write set_RichText;
    property CreationDate: DDN.mscorlib.DNDateTime read get_CreationDate;
    property Subject: string read get_Subject write set_Subject;
    property Popup: DNPopupAnnotation read get_Popup write set_Popup;
    property InReplyTo: DNAnnotation read get_InReplyTo write set_InReplyTo;
    property ReplyType: DNReplyType read get_ReplyType write set_ReplyType;
    property Flags: DNAnnotationFlags read get_Flags write set_Flags;
    property Width: Double read get_Width write set_Width;
    property Actions: DNPdfActionCollection read get_Actions;
    property Height: Double read get_Height write set_Height;
    property Rect: DNPdf_Rectangle read get_Rect write set_Rect;
    property Contents: string read get_Contents write set_Contents;
    property Name: string read get_Name write set_Name;
    property Modified: DDN.mscorlib.DNDateTime read get_Modified write set_Modified;
    property Color: DNColor read get_Color write set_Color;
    property Border: DNBorder read get_Border write set_Border;
    property ActiveState: string read get_ActiveState write set_ActiveState;
    property Characteristics: DNCharacteristics read get_Characteristics;
    property States: DNAppearanceDictionary read get_States;
    property Alignment: DNTextAlignment read get_Alignment write set_Alignment;
    property HorizontalAlignment: DNHorizontalAlignment read get_HorizontalAlignment write set_HorizontalAlignment;
    property TextHorizontalAlignment: DNHorizontalAlignment read get_TextHorizontalAlignment write set_TextHorizontalAlignment;
    property FullName: string read get_FullName;
    property Appearance: DNAppearanceDictionary read get_Appearance;
    property PageIndex: Int32 read get_PageIndex;
    property VerticalAlignment: DNVerticalAlignment read get_VerticalAlignment write set_VerticalAlignment;
    property Margin: DNMarginInfo read get_Margin write set_Margin;
    property IsFirstParagraphInColumn: Boolean read get_IsFirstParagraphInColumn write set_IsFirstParagraphInColumn;
    property IsKeptWithNext: Boolean read get_IsKeptWithNext write set_IsKeptWithNext;
    property IsInNewPage: Boolean read get_IsInNewPage write set_IsInNewPage;
    property IsInLineParagraph: Boolean read get_IsInLineParagraph write set_IsInLineParagraph;
    property Hyperlink: DNHyperlink read get_Hyperlink write set_Hyperlink;
    property ZIndex: Int32 read get_ZIndex write set_ZIndex;
  end;

  TDNFileAttachmentAnnotation = class(TDNGenericImport<DNFileAttachmentAnnotationClass, DNFileAttachmentAnnotation>) end;

  //-------------namespace: Aspose.Pdf.Annotations----------------
  DNFreeTextAnnotationClass = interface(DNMarkupAnnotationClass)
  ['{301EC734-292C-5DAB-AC01-144ADE3B3887}']
  { constructors } 

    {class} function init(document: DNDocument; appearance: DNDefaultAppearance): DNFreeTextAnnotation; overload;
    {class} function init(page: DNPage; rect: DNPdf_Rectangle; appearance: DNDefaultAppearance): DNFreeTextAnnotation; overload;

  end;

  [DNTypeName('Aspose.Pdf.Annotations.FreeTextAnnotation')]
  DNFreeTextAnnotation = interface(DNMarkupAnnotation)
  ['{25368158-800D-389E-B4A5-808E320B0605}']
  { getters & setters } 

    function get_StartingStyle: DNLineEnding;
    procedure set_StartingStyle(value: DNLineEnding);
    function get_EndingStyle: DNLineEnding;
    procedure set_EndingStyle(value: DNLineEnding);
    function get_Justification: DNJustification;
    procedure set_Justification(value: DNJustification);
    function get_DefaultAppearance: string;
    procedure set_DefaultAppearance(value: string);
    function get_DefaultAppearanceObject: DNDefaultAppearance;
    function get_Intent: DNFreeTextIntent;
    procedure set_Intent(value: DNFreeTextIntent);
    function get_DefaultStyle: string;
    procedure set_DefaultStyle(value: string);
    function get_TextStyle: DNTextStyle;
    procedure set_TextStyle(value: DNTextStyle);
    function get_Rotate: DNRotation;
    procedure set_Rotate(value: DNRotation);
    function get_AnnotationType: DNAnnotationType;
    function get_Callout: TArray<DNPoint>;
    procedure set_Callout(value: TArray<DNPoint>);
    function get_TextRectangle: DNPdf_Rectangle;
    procedure set_TextRectangle(value: DNPdf_Rectangle);
    function get_Title: string;
    procedure set_Title(value: string);
    function get_RichText: string;
    procedure set_RichText(value: string);
    function get_CreationDate: DDN.mscorlib.DNDateTime;
    function get_Subject: string;
    procedure set_Subject(value: string);
    function get_Popup: DNPopupAnnotation;
    procedure set_Popup(value: DNPopupAnnotation);
    function get_Opacity: Double;
    procedure set_Opacity(value: Double);
    function get_InReplyTo: DNAnnotation;
    procedure set_InReplyTo(value: DNAnnotation);
    function get_ReplyType: DNReplyType;
    procedure set_ReplyType(value: DNReplyType);
    function get_Flags: DNAnnotationFlags;
    procedure set_Flags(value: DNAnnotationFlags);
    function get_Width: Double;
    procedure set_Width(value: Double);
    function get_Actions: DNPdfActionCollection;
    function get_Height: Double;
    procedure set_Height(value: Double);
    function get_Rect: DNPdf_Rectangle;
    procedure set_Rect(value: DNPdf_Rectangle);
    function get_Contents: string;
    procedure set_Contents(value: string);
    function get_Name: string;
    procedure set_Name(value: string);
    function get_Modified: DDN.mscorlib.DNDateTime;
    procedure set_Modified(value: DDN.mscorlib.DNDateTime);
    function get_Color: DNColor;
    procedure set_Color(value: DNColor);
    function get_Border: DNBorder;
    procedure set_Border(value: DNBorder);
    function get_ActiveState: string;
    procedure set_ActiveState(value: string);
    function get_Characteristics: DNCharacteristics;
    function get_States: DNAppearanceDictionary;
    function get_Alignment: DNTextAlignment;
    procedure set_Alignment(value: DNTextAlignment);
    function get_HorizontalAlignment: DNHorizontalAlignment;
    procedure set_HorizontalAlignment(value: DNHorizontalAlignment);
    function get_TextHorizontalAlignment: DNHorizontalAlignment;
    procedure set_TextHorizontalAlignment(value: DNHorizontalAlignment);
    function get_FullName: string;
    function get_Appearance: DNAppearanceDictionary;
    function get_PageIndex: Int32;
    function get_VerticalAlignment: DNVerticalAlignment;
    procedure set_VerticalAlignment(value: DNVerticalAlignment);
    function get_Margin: DNMarginInfo;
    procedure set_Margin(value: DNMarginInfo);
    function get_IsFirstParagraphInColumn: Boolean;
    procedure set_IsFirstParagraphInColumn(value: Boolean);
    function get_IsKeptWithNext: Boolean;
    procedure set_IsKeptWithNext(value: Boolean);
    function get_IsInNewPage: Boolean;
    procedure set_IsInNewPage(value: Boolean);
    function get_IsInLineParagraph: Boolean;
    procedure set_IsInLineParagraph(value: Boolean);
    function get_Hyperlink: DNHyperlink;
    procedure set_Hyperlink(value: DNHyperlink);
    function get_ZIndex: Int32;
    procedure set_ZIndex(value: Int32);

  { methods } 

    procedure Accept(visitor: DNAnnotationSelector);
    function GetRectangle(considerRotation: Boolean): DNPdf_Rectangle;
    procedure Flatten;
    function Clone: DDN.mscorlib.DNObject;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property StartingStyle: DNLineEnding read get_StartingStyle write set_StartingStyle;
    property EndingStyle: DNLineEnding read get_EndingStyle write set_EndingStyle;
    property Justification: DNJustification read get_Justification write set_Justification;
    property DefaultAppearance: string read get_DefaultAppearance write set_DefaultAppearance;
    property DefaultAppearanceObject: DNDefaultAppearance read get_DefaultAppearanceObject;
    property Intent: DNFreeTextIntent read get_Intent write set_Intent;
    property DefaultStyle: string read get_DefaultStyle write set_DefaultStyle;
    property TextStyle: DNTextStyle read get_TextStyle write set_TextStyle;
    property Rotate: DNRotation read get_Rotate write set_Rotate;
    property AnnotationType: DNAnnotationType read get_AnnotationType;
    property Callout: TArray<DNPoint> read get_Callout write set_Callout;
    property TextRectangle: DNPdf_Rectangle read get_TextRectangle write set_TextRectangle;
    property Title: string read get_Title write set_Title;
    property RichText: string read get_RichText write set_RichText;
    property CreationDate: DDN.mscorlib.DNDateTime read get_CreationDate;
    property Subject: string read get_Subject write set_Subject;
    property Popup: DNPopupAnnotation read get_Popup write set_Popup;
    property Opacity: Double read get_Opacity write set_Opacity;
    property InReplyTo: DNAnnotation read get_InReplyTo write set_InReplyTo;
    property ReplyType: DNReplyType read get_ReplyType write set_ReplyType;
    property Flags: DNAnnotationFlags read get_Flags write set_Flags;
    property Width: Double read get_Width write set_Width;
    property Actions: DNPdfActionCollection read get_Actions;
    property Height: Double read get_Height write set_Height;
    property Rect: DNPdf_Rectangle read get_Rect write set_Rect;
    property Contents: string read get_Contents write set_Contents;
    property Name: string read get_Name write set_Name;
    property Modified: DDN.mscorlib.DNDateTime read get_Modified write set_Modified;
    property Color: DNColor read get_Color write set_Color;
    property Border: DNBorder read get_Border write set_Border;
    property ActiveState: string read get_ActiveState write set_ActiveState;
    property Characteristics: DNCharacteristics read get_Characteristics;
    property States: DNAppearanceDictionary read get_States;
    property Alignment: DNTextAlignment read get_Alignment write set_Alignment;
    property HorizontalAlignment: DNHorizontalAlignment read get_HorizontalAlignment write set_HorizontalAlignment;
    property TextHorizontalAlignment: DNHorizontalAlignment read get_TextHorizontalAlignment write set_TextHorizontalAlignment;
    property FullName: string read get_FullName;
    property Appearance: DNAppearanceDictionary read get_Appearance;
    property PageIndex: Int32 read get_PageIndex;
    property VerticalAlignment: DNVerticalAlignment read get_VerticalAlignment write set_VerticalAlignment;
    property Margin: DNMarginInfo read get_Margin write set_Margin;
    property IsFirstParagraphInColumn: Boolean read get_IsFirstParagraphInColumn write set_IsFirstParagraphInColumn;
    property IsKeptWithNext: Boolean read get_IsKeptWithNext write set_IsKeptWithNext;
    property IsInNewPage: Boolean read get_IsInNewPage write set_IsInNewPage;
    property IsInLineParagraph: Boolean read get_IsInLineParagraph write set_IsInLineParagraph;
    property Hyperlink: DNHyperlink read get_Hyperlink write set_Hyperlink;
    property ZIndex: Int32 read get_ZIndex write set_ZIndex;
  end;

  TDNFreeTextAnnotation = class(TDNGenericImport<DNFreeTextAnnotationClass, DNFreeTextAnnotation>) end;

  //-------------namespace: Aspose.Pdf.Annotations----------------
  DNInkAnnotationClass = interface(DNMarkupAnnotationClass)
  ['{FFB7A601-1C2C-5641-A8DD-05F368E7DA95}']
  { constructors } 

    {class} function init(document: DNDocument; inkList: DDN.mscorlib.DNIList<TArray<DNPoint>>): DNInkAnnotation; overload;
    {class} function init(page: DNPage; rect: DNPdf_Rectangle; inkList: DDN.mscorlib.DNIList): DNInkAnnotation; overload;
    {class} function init(page: DNPage; rect: DNPdf_Rectangle; inkList: DDN.mscorlib.DNIList<TArray<DNPoint>>): DNInkAnnotation; overload;

  end;

  [DNTypeName('Aspose.Pdf.Annotations.InkAnnotation')]
  DNInkAnnotation = interface(DNMarkupAnnotation)
  ['{1813D872-5E71-3158-8135-78E5EAB834BB}']
  { getters & setters } 

    function get_CapStyle: DNCapStyle;
    procedure set_CapStyle(value: DNCapStyle);
    function get_InkList: DDN.mscorlib.DNIList<TArray<DNPoint>>;
    procedure set_InkList(value: DDN.mscorlib.DNIList<TArray<DNPoint>>);
    function get_AnnotationType: DNAnnotationType;
    function get_Title: string;
    procedure set_Title(value: string);
    function get_RichText: string;
    procedure set_RichText(value: string);
    function get_CreationDate: DDN.mscorlib.DNDateTime;
    function get_Subject: string;
    procedure set_Subject(value: string);
    function get_Popup: DNPopupAnnotation;
    procedure set_Popup(value: DNPopupAnnotation);
    function get_Opacity: Double;
    procedure set_Opacity(value: Double);
    function get_InReplyTo: DNAnnotation;
    procedure set_InReplyTo(value: DNAnnotation);
    function get_ReplyType: DNReplyType;
    procedure set_ReplyType(value: DNReplyType);
    function get_Flags: DNAnnotationFlags;
    procedure set_Flags(value: DNAnnotationFlags);
    function get_Width: Double;
    procedure set_Width(value: Double);
    function get_Actions: DNPdfActionCollection;
    function get_Height: Double;
    procedure set_Height(value: Double);
    function get_Rect: DNPdf_Rectangle;
    procedure set_Rect(value: DNPdf_Rectangle);
    function get_Contents: string;
    procedure set_Contents(value: string);
    function get_Name: string;
    procedure set_Name(value: string);
    function get_Modified: DDN.mscorlib.DNDateTime;
    procedure set_Modified(value: DDN.mscorlib.DNDateTime);
    function get_Color: DNColor;
    procedure set_Color(value: DNColor);
    function get_Border: DNBorder;
    procedure set_Border(value: DNBorder);
    function get_ActiveState: string;
    procedure set_ActiveState(value: string);
    function get_Characteristics: DNCharacteristics;
    function get_States: DNAppearanceDictionary;
    function get_Alignment: DNTextAlignment;
    procedure set_Alignment(value: DNTextAlignment);
    function get_HorizontalAlignment: DNHorizontalAlignment;
    procedure set_HorizontalAlignment(value: DNHorizontalAlignment);
    function get_TextHorizontalAlignment: DNHorizontalAlignment;
    procedure set_TextHorizontalAlignment(value: DNHorizontalAlignment);
    function get_FullName: string;
    function get_Appearance: DNAppearanceDictionary;
    function get_PageIndex: Int32;
    function get_VerticalAlignment: DNVerticalAlignment;
    procedure set_VerticalAlignment(value: DNVerticalAlignment);
    function get_Margin: DNMarginInfo;
    procedure set_Margin(value: DNMarginInfo);
    function get_IsFirstParagraphInColumn: Boolean;
    procedure set_IsFirstParagraphInColumn(value: Boolean);
    function get_IsKeptWithNext: Boolean;
    procedure set_IsKeptWithNext(value: Boolean);
    function get_IsInNewPage: Boolean;
    procedure set_IsInNewPage(value: Boolean);
    function get_IsInLineParagraph: Boolean;
    procedure set_IsInLineParagraph(value: Boolean);
    function get_Hyperlink: DNHyperlink;
    procedure set_Hyperlink(value: DNHyperlink);
    function get_ZIndex: Int32;
    procedure set_ZIndex(value: Int32);

  { methods } 

    procedure Accept(visitor: DNAnnotationSelector);
    function GetRectangle(considerRotation: Boolean): DNPdf_Rectangle;
    procedure Flatten;
    function Clone: DDN.mscorlib.DNObject;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property CapStyle: DNCapStyle read get_CapStyle write set_CapStyle;
    property InkList: DDN.mscorlib.DNIList<TArray<DNPoint>> read get_InkList write set_InkList;
    property AnnotationType: DNAnnotationType read get_AnnotationType;
    property Title: string read get_Title write set_Title;
    property RichText: string read get_RichText write set_RichText;
    property CreationDate: DDN.mscorlib.DNDateTime read get_CreationDate;
    property Subject: string read get_Subject write set_Subject;
    property Popup: DNPopupAnnotation read get_Popup write set_Popup;
    property Opacity: Double read get_Opacity write set_Opacity;
    property InReplyTo: DNAnnotation read get_InReplyTo write set_InReplyTo;
    property ReplyType: DNReplyType read get_ReplyType write set_ReplyType;
    property Flags: DNAnnotationFlags read get_Flags write set_Flags;
    property Width: Double read get_Width write set_Width;
    property Actions: DNPdfActionCollection read get_Actions;
    property Height: Double read get_Height write set_Height;
    property Rect: DNPdf_Rectangle read get_Rect write set_Rect;
    property Contents: string read get_Contents write set_Contents;
    property Name: string read get_Name write set_Name;
    property Modified: DDN.mscorlib.DNDateTime read get_Modified write set_Modified;
    property Color: DNColor read get_Color write set_Color;
    property Border: DNBorder read get_Border write set_Border;
    property ActiveState: string read get_ActiveState write set_ActiveState;
    property Characteristics: DNCharacteristics read get_Characteristics;
    property States: DNAppearanceDictionary read get_States;
    property Alignment: DNTextAlignment read get_Alignment write set_Alignment;
    property HorizontalAlignment: DNHorizontalAlignment read get_HorizontalAlignment write set_HorizontalAlignment;
    property TextHorizontalAlignment: DNHorizontalAlignment read get_TextHorizontalAlignment write set_TextHorizontalAlignment;
    property FullName: string read get_FullName;
    property Appearance: DNAppearanceDictionary read get_Appearance;
    property PageIndex: Int32 read get_PageIndex;
    property VerticalAlignment: DNVerticalAlignment read get_VerticalAlignment write set_VerticalAlignment;
    property Margin: DNMarginInfo read get_Margin write set_Margin;
    property IsFirstParagraphInColumn: Boolean read get_IsFirstParagraphInColumn write set_IsFirstParagraphInColumn;
    property IsKeptWithNext: Boolean read get_IsKeptWithNext write set_IsKeptWithNext;
    property IsInNewPage: Boolean read get_IsInNewPage write set_IsInNewPage;
    property IsInLineParagraph: Boolean read get_IsInLineParagraph write set_IsInLineParagraph;
    property Hyperlink: DNHyperlink read get_Hyperlink write set_Hyperlink;
    property ZIndex: Int32 read get_ZIndex write set_ZIndex;
  end;

  TDNInkAnnotation = class(TDNGenericImport<DNInkAnnotationClass, DNInkAnnotation>) end;

  //-------------namespace: Aspose.Pdf.Annotations----------------
  DNLineAnnotationClass = interface(DNMarkupAnnotationClass)
  ['{59C093FF-4A63-5A22-8D53-C477A964437D}']
  { constructors } 

    {class} function init(document: DNDocument; start: DNPoint; &end: DNPoint): DNLineAnnotation; overload;
    {class} function init(page: DNPage; rect: DNPdf_Rectangle; start: DNPoint; &end: DNPoint): DNLineAnnotation; overload;

  end;

  [DNTypeName('Aspose.Pdf.Annotations.LineAnnotation')]
  DNLineAnnotation = interface(DNMarkupAnnotation)
  ['{FB4292C0-E200-33B5-B82E-109EDA22EAF9}']
  { getters & setters } 

    function get_Starting: DNPoint;
    procedure set_Starting(value: DNPoint);
    function get_StartingStyle: DNLineEnding;
    procedure set_StartingStyle(value: DNLineEnding);
    function get_Ending: DNPoint;
    procedure set_Ending(value: DNPoint);
    function get_EndingStyle: DNLineEnding;
    procedure set_EndingStyle(value: DNLineEnding);
    function get_InteriorColor: DNColor;
    procedure set_InteriorColor(value: DNColor);
    function get_LeaderLine: Double;
    procedure set_LeaderLine(value: Double);
    function get_LeaderLineExtension: Double;
    procedure set_LeaderLineExtension(value: Double);
    function get_ShowCaption: Boolean;
    procedure set_ShowCaption(value: Boolean);
    function get_LeaderLineOffset: Double;
    procedure set_LeaderLineOffset(value: Double);
    function get_CaptionOffset: DNPoint;
    procedure set_CaptionOffset(value: DNPoint);
    function get_CaptionPosition: DNCaptionPosition;
    procedure set_CaptionPosition(value: DNCaptionPosition);
    function get_Measure: DNMeasure;
    procedure set_Measure(value: DNMeasure);
    function get_Intent: DNLineIntent;
    procedure set_Intent(value: DNLineIntent);
    function get_AnnotationType: DNAnnotationType;
    function get_Title: string;
    procedure set_Title(value: string);
    function get_RichText: string;
    procedure set_RichText(value: string);
    function get_CreationDate: DDN.mscorlib.DNDateTime;
    function get_Subject: string;
    procedure set_Subject(value: string);
    function get_Popup: DNPopupAnnotation;
    procedure set_Popup(value: DNPopupAnnotation);
    function get_Opacity: Double;
    procedure set_Opacity(value: Double);
    function get_InReplyTo: DNAnnotation;
    procedure set_InReplyTo(value: DNAnnotation);
    function get_ReplyType: DNReplyType;
    procedure set_ReplyType(value: DNReplyType);
    function get_Flags: DNAnnotationFlags;
    procedure set_Flags(value: DNAnnotationFlags);
    function get_Width: Double;
    procedure set_Width(value: Double);
    function get_Actions: DNPdfActionCollection;
    function get_Height: Double;
    procedure set_Height(value: Double);
    function get_Rect: DNPdf_Rectangle;
    procedure set_Rect(value: DNPdf_Rectangle);
    function get_Contents: string;
    procedure set_Contents(value: string);
    function get_Name: string;
    procedure set_Name(value: string);
    function get_Modified: DDN.mscorlib.DNDateTime;
    procedure set_Modified(value: DDN.mscorlib.DNDateTime);
    function get_Color: DNColor;
    procedure set_Color(value: DNColor);
    function get_Border: DNBorder;
    procedure set_Border(value: DNBorder);
    function get_ActiveState: string;
    procedure set_ActiveState(value: string);
    function get_Characteristics: DNCharacteristics;
    function get_States: DNAppearanceDictionary;
    function get_Alignment: DNTextAlignment;
    procedure set_Alignment(value: DNTextAlignment);
    function get_HorizontalAlignment: DNHorizontalAlignment;
    procedure set_HorizontalAlignment(value: DNHorizontalAlignment);
    function get_TextHorizontalAlignment: DNHorizontalAlignment;
    procedure set_TextHorizontalAlignment(value: DNHorizontalAlignment);
    function get_FullName: string;
    function get_Appearance: DNAppearanceDictionary;
    function get_PageIndex: Int32;
    function get_VerticalAlignment: DNVerticalAlignment;
    procedure set_VerticalAlignment(value: DNVerticalAlignment);
    function get_Margin: DNMarginInfo;
    procedure set_Margin(value: DNMarginInfo);
    function get_IsFirstParagraphInColumn: Boolean;
    procedure set_IsFirstParagraphInColumn(value: Boolean);
    function get_IsKeptWithNext: Boolean;
    procedure set_IsKeptWithNext(value: Boolean);
    function get_IsInNewPage: Boolean;
    procedure set_IsInNewPage(value: Boolean);
    function get_IsInLineParagraph: Boolean;
    procedure set_IsInLineParagraph(value: Boolean);
    function get_Hyperlink: DNHyperlink;
    procedure set_Hyperlink(value: DNHyperlink);
    function get_ZIndex: Int32;
    procedure set_ZIndex(value: Int32);

  { methods } 

    procedure Accept(visitor: DNAnnotationSelector);
    function GetRectangle(considerRotation: Boolean): DNPdf_Rectangle;
    procedure Flatten;
    function Clone: DDN.mscorlib.DNObject;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Starting: DNPoint read get_Starting write set_Starting;
    property StartingStyle: DNLineEnding read get_StartingStyle write set_StartingStyle;
    property Ending: DNPoint read get_Ending write set_Ending;
    property EndingStyle: DNLineEnding read get_EndingStyle write set_EndingStyle;
    property InteriorColor: DNColor read get_InteriorColor write set_InteriorColor;
    property LeaderLine: Double read get_LeaderLine write set_LeaderLine;
    property LeaderLineExtension: Double read get_LeaderLineExtension write set_LeaderLineExtension;
    property ShowCaption: Boolean read get_ShowCaption write set_ShowCaption;
    property LeaderLineOffset: Double read get_LeaderLineOffset write set_LeaderLineOffset;
    property CaptionOffset: DNPoint read get_CaptionOffset write set_CaptionOffset;
    property CaptionPosition: DNCaptionPosition read get_CaptionPosition write set_CaptionPosition;
    property Measure: DNMeasure read get_Measure write set_Measure;
    property Intent: DNLineIntent read get_Intent write set_Intent;
    property AnnotationType: DNAnnotationType read get_AnnotationType;
    property Title: string read get_Title write set_Title;
    property RichText: string read get_RichText write set_RichText;
    property CreationDate: DDN.mscorlib.DNDateTime read get_CreationDate;
    property Subject: string read get_Subject write set_Subject;
    property Popup: DNPopupAnnotation read get_Popup write set_Popup;
    property Opacity: Double read get_Opacity write set_Opacity;
    property InReplyTo: DNAnnotation read get_InReplyTo write set_InReplyTo;
    property ReplyType: DNReplyType read get_ReplyType write set_ReplyType;
    property Flags: DNAnnotationFlags read get_Flags write set_Flags;
    property Width: Double read get_Width write set_Width;
    property Actions: DNPdfActionCollection read get_Actions;
    property Height: Double read get_Height write set_Height;
    property Rect: DNPdf_Rectangle read get_Rect write set_Rect;
    property Contents: string read get_Contents write set_Contents;
    property Name: string read get_Name write set_Name;
    property Modified: DDN.mscorlib.DNDateTime read get_Modified write set_Modified;
    property Color: DNColor read get_Color write set_Color;
    property Border: DNBorder read get_Border write set_Border;
    property ActiveState: string read get_ActiveState write set_ActiveState;
    property Characteristics: DNCharacteristics read get_Characteristics;
    property States: DNAppearanceDictionary read get_States;
    property Alignment: DNTextAlignment read get_Alignment write set_Alignment;
    property HorizontalAlignment: DNHorizontalAlignment read get_HorizontalAlignment write set_HorizontalAlignment;
    property TextHorizontalAlignment: DNHorizontalAlignment read get_TextHorizontalAlignment write set_TextHorizontalAlignment;
    property FullName: string read get_FullName;
    property Appearance: DNAppearanceDictionary read get_Appearance;
    property PageIndex: Int32 read get_PageIndex;
    property VerticalAlignment: DNVerticalAlignment read get_VerticalAlignment write set_VerticalAlignment;
    property Margin: DNMarginInfo read get_Margin write set_Margin;
    property IsFirstParagraphInColumn: Boolean read get_IsFirstParagraphInColumn write set_IsFirstParagraphInColumn;
    property IsKeptWithNext: Boolean read get_IsKeptWithNext write set_IsKeptWithNext;
    property IsInNewPage: Boolean read get_IsInNewPage write set_IsInNewPage;
    property IsInLineParagraph: Boolean read get_IsInLineParagraph write set_IsInLineParagraph;
    property Hyperlink: DNHyperlink read get_Hyperlink write set_Hyperlink;
    property ZIndex: Int32 read get_ZIndex write set_ZIndex;
  end;

  TDNLineAnnotation = class(TDNGenericImport<DNLineAnnotationClass, DNLineAnnotation>) end;

  //-------------namespace: Aspose.Pdf.Annotations----------------
  DNPolyAnnotationClass = interface(DNMarkupAnnotationClass)
  ['{8BD2DFD8-4C6F-585F-AE68-4FDD400479B8}']
  end;

  [DNTypeName('Aspose.Pdf.Annotations.PolyAnnotation')]
  DNPolyAnnotation = interface(DNMarkupAnnotation)
  ['{413BC0C8-92B6-37C3-A3EB-0E05D8050031}']
  { getters & setters } 

    function get_Measure: DNMeasure;
    procedure set_Measure(value: DNMeasure);
    function get_Vertices: TArray<DNPoint>;
    procedure set_Vertices(value: TArray<DNPoint>);
    function get_InteriorColor: DNColor;
    procedure set_InteriorColor(value: DNColor);
    function get_StartingStyle: DNLineEnding;
    procedure set_StartingStyle(value: DNLineEnding);
    function get_EndingStyle: DNLineEnding;
    procedure set_EndingStyle(value: DNLineEnding);
    function get_Intent: DNPolyIntent;
    procedure set_Intent(value: DNPolyIntent);
    function get_Title: string;
    procedure set_Title(value: string);
    function get_RichText: string;
    procedure set_RichText(value: string);
    function get_CreationDate: DDN.mscorlib.DNDateTime;
    function get_Subject: string;
    procedure set_Subject(value: string);
    function get_Popup: DNPopupAnnotation;
    procedure set_Popup(value: DNPopupAnnotation);
    function get_Opacity: Double;
    procedure set_Opacity(value: Double);
    function get_InReplyTo: DNAnnotation;
    procedure set_InReplyTo(value: DNAnnotation);
    function get_ReplyType: DNReplyType;
    procedure set_ReplyType(value: DNReplyType);
    function get_Flags: DNAnnotationFlags;
    procedure set_Flags(value: DNAnnotationFlags);
    function get_AnnotationType: DNAnnotationType;
    function get_Width: Double;
    procedure set_Width(value: Double);
    function get_Actions: DNPdfActionCollection;
    function get_Height: Double;
    procedure set_Height(value: Double);
    function get_Rect: DNPdf_Rectangle;
    procedure set_Rect(value: DNPdf_Rectangle);
    function get_Contents: string;
    procedure set_Contents(value: string);
    function get_Name: string;
    procedure set_Name(value: string);
    function get_Modified: DDN.mscorlib.DNDateTime;
    procedure set_Modified(value: DDN.mscorlib.DNDateTime);
    function get_Color: DNColor;
    procedure set_Color(value: DNColor);
    function get_Border: DNBorder;
    procedure set_Border(value: DNBorder);
    function get_ActiveState: string;
    procedure set_ActiveState(value: string);
    function get_Characteristics: DNCharacteristics;
    function get_States: DNAppearanceDictionary;
    function get_Alignment: DNTextAlignment;
    procedure set_Alignment(value: DNTextAlignment);
    function get_HorizontalAlignment: DNHorizontalAlignment;
    procedure set_HorizontalAlignment(value: DNHorizontalAlignment);
    function get_TextHorizontalAlignment: DNHorizontalAlignment;
    procedure set_TextHorizontalAlignment(value: DNHorizontalAlignment);
    function get_FullName: string;
    function get_Appearance: DNAppearanceDictionary;
    function get_PageIndex: Int32;
    function get_VerticalAlignment: DNVerticalAlignment;
    procedure set_VerticalAlignment(value: DNVerticalAlignment);
    function get_Margin: DNMarginInfo;
    procedure set_Margin(value: DNMarginInfo);
    function get_IsFirstParagraphInColumn: Boolean;
    procedure set_IsFirstParagraphInColumn(value: Boolean);
    function get_IsKeptWithNext: Boolean;
    procedure set_IsKeptWithNext(value: Boolean);
    function get_IsInNewPage: Boolean;
    procedure set_IsInNewPage(value: Boolean);
    function get_IsInLineParagraph: Boolean;
    procedure set_IsInLineParagraph(value: Boolean);
    function get_Hyperlink: DNHyperlink;
    procedure set_Hyperlink(value: DNHyperlink);
    function get_ZIndex: Int32;
    procedure set_ZIndex(value: Int32);

  { methods } 

    function GetRectangle(considerRotation: Boolean): DNPdf_Rectangle;
    procedure Accept(visitor: DNAnnotationSelector);
    procedure Flatten;
    function Clone: DDN.mscorlib.DNObject;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Measure: DNMeasure read get_Measure write set_Measure;
    property Vertices: TArray<DNPoint> read get_Vertices write set_Vertices;
    property InteriorColor: DNColor read get_InteriorColor write set_InteriorColor;
    property StartingStyle: DNLineEnding read get_StartingStyle write set_StartingStyle;
    property EndingStyle: DNLineEnding read get_EndingStyle write set_EndingStyle;
    property Intent: DNPolyIntent read get_Intent write set_Intent;
    property Title: string read get_Title write set_Title;
    property RichText: string read get_RichText write set_RichText;
    property CreationDate: DDN.mscorlib.DNDateTime read get_CreationDate;
    property Subject: string read get_Subject write set_Subject;
    property Popup: DNPopupAnnotation read get_Popup write set_Popup;
    property Opacity: Double read get_Opacity write set_Opacity;
    property InReplyTo: DNAnnotation read get_InReplyTo write set_InReplyTo;
    property ReplyType: DNReplyType read get_ReplyType write set_ReplyType;
    property Flags: DNAnnotationFlags read get_Flags write set_Flags;
    property AnnotationType: DNAnnotationType read get_AnnotationType;
    property Width: Double read get_Width write set_Width;
    property Actions: DNPdfActionCollection read get_Actions;
    property Height: Double read get_Height write set_Height;
    property Rect: DNPdf_Rectangle read get_Rect write set_Rect;
    property Contents: string read get_Contents write set_Contents;
    property Name: string read get_Name write set_Name;
    property Modified: DDN.mscorlib.DNDateTime read get_Modified write set_Modified;
    property Color: DNColor read get_Color write set_Color;
    property Border: DNBorder read get_Border write set_Border;
    property ActiveState: string read get_ActiveState write set_ActiveState;
    property Characteristics: DNCharacteristics read get_Characteristics;
    property States: DNAppearanceDictionary read get_States;
    property Alignment: DNTextAlignment read get_Alignment write set_Alignment;
    property HorizontalAlignment: DNHorizontalAlignment read get_HorizontalAlignment write set_HorizontalAlignment;
    property TextHorizontalAlignment: DNHorizontalAlignment read get_TextHorizontalAlignment write set_TextHorizontalAlignment;
    property FullName: string read get_FullName;
    property Appearance: DNAppearanceDictionary read get_Appearance;
    property PageIndex: Int32 read get_PageIndex;
    property VerticalAlignment: DNVerticalAlignment read get_VerticalAlignment write set_VerticalAlignment;
    property Margin: DNMarginInfo read get_Margin write set_Margin;
    property IsFirstParagraphInColumn: Boolean read get_IsFirstParagraphInColumn write set_IsFirstParagraphInColumn;
    property IsKeptWithNext: Boolean read get_IsKeptWithNext write set_IsKeptWithNext;
    property IsInNewPage: Boolean read get_IsInNewPage write set_IsInNewPage;
    property IsInLineParagraph: Boolean read get_IsInLineParagraph write set_IsInLineParagraph;
    property Hyperlink: DNHyperlink read get_Hyperlink write set_Hyperlink;
    property ZIndex: Int32 read get_ZIndex write set_ZIndex;
  end;

  TDNPolyAnnotation = class(TDNGenericImport<DNPolyAnnotationClass, DNPolyAnnotation>) end;

  //-------------namespace: Aspose.Pdf.Annotations----------------
  DNPolygonAnnotationClass = interface(DNPolyAnnotationClass)
  ['{EAE5A983-B760-584F-948A-BE1FA14C94E7}']
  { constructors } 

    {class} function init(document: DNDocument; vertices: TArray<DNPoint>): DNPolygonAnnotation; overload;
    {class} function init(page: DNPage; rect: DNPdf_Rectangle; vertices: TArray<DNPoint>): DNPolygonAnnotation; overload;

  end;

  [DNTypeName('Aspose.Pdf.Annotations.PolygonAnnotation')]
  DNPolygonAnnotation = interface(DNPolyAnnotation)
  ['{78E47EEC-97FC-335D-A1EF-74AAADAF372C}']
  { getters & setters } 

    function get_AnnotationType: DNAnnotationType;
    function get_Measure: DNMeasure;
    procedure set_Measure(value: DNMeasure);
    function get_Vertices: TArray<DNPoint>;
    procedure set_Vertices(value: TArray<DNPoint>);
    function get_InteriorColor: DNColor;
    procedure set_InteriorColor(value: DNColor);
    function get_StartingStyle: DNLineEnding;
    procedure set_StartingStyle(value: DNLineEnding);
    function get_EndingStyle: DNLineEnding;
    procedure set_EndingStyle(value: DNLineEnding);
    function get_Intent: DNPolyIntent;
    procedure set_Intent(value: DNPolyIntent);
    function get_Title: string;
    procedure set_Title(value: string);
    function get_RichText: string;
    procedure set_RichText(value: string);
    function get_CreationDate: DDN.mscorlib.DNDateTime;
    function get_Subject: string;
    procedure set_Subject(value: string);
    function get_Popup: DNPopupAnnotation;
    procedure set_Popup(value: DNPopupAnnotation);
    function get_Opacity: Double;
    procedure set_Opacity(value: Double);
    function get_InReplyTo: DNAnnotation;
    procedure set_InReplyTo(value: DNAnnotation);
    function get_ReplyType: DNReplyType;
    procedure set_ReplyType(value: DNReplyType);
    function get_Flags: DNAnnotationFlags;
    procedure set_Flags(value: DNAnnotationFlags);
    function get_Width: Double;
    procedure set_Width(value: Double);
    function get_Actions: DNPdfActionCollection;
    function get_Height: Double;
    procedure set_Height(value: Double);
    function get_Rect: DNPdf_Rectangle;
    procedure set_Rect(value: DNPdf_Rectangle);
    function get_Contents: string;
    procedure set_Contents(value: string);
    function get_Name: string;
    procedure set_Name(value: string);
    function get_Modified: DDN.mscorlib.DNDateTime;
    procedure set_Modified(value: DDN.mscorlib.DNDateTime);
    function get_Color: DNColor;
    procedure set_Color(value: DNColor);
    function get_Border: DNBorder;
    procedure set_Border(value: DNBorder);
    function get_ActiveState: string;
    procedure set_ActiveState(value: string);
    function get_Characteristics: DNCharacteristics;
    function get_States: DNAppearanceDictionary;
    function get_Alignment: DNTextAlignment;
    procedure set_Alignment(value: DNTextAlignment);
    function get_HorizontalAlignment: DNHorizontalAlignment;
    procedure set_HorizontalAlignment(value: DNHorizontalAlignment);
    function get_TextHorizontalAlignment: DNHorizontalAlignment;
    procedure set_TextHorizontalAlignment(value: DNHorizontalAlignment);
    function get_FullName: string;
    function get_Appearance: DNAppearanceDictionary;
    function get_PageIndex: Int32;
    function get_VerticalAlignment: DNVerticalAlignment;
    procedure set_VerticalAlignment(value: DNVerticalAlignment);
    function get_Margin: DNMarginInfo;
    procedure set_Margin(value: DNMarginInfo);
    function get_IsFirstParagraphInColumn: Boolean;
    procedure set_IsFirstParagraphInColumn(value: Boolean);
    function get_IsKeptWithNext: Boolean;
    procedure set_IsKeptWithNext(value: Boolean);
    function get_IsInNewPage: Boolean;
    procedure set_IsInNewPage(value: Boolean);
    function get_IsInLineParagraph: Boolean;
    procedure set_IsInLineParagraph(value: Boolean);
    function get_Hyperlink: DNHyperlink;
    procedure set_Hyperlink(value: DNHyperlink);
    function get_ZIndex: Int32;
    procedure set_ZIndex(value: Int32);

  { methods } 

    procedure Accept(visitor: DNAnnotationSelector);
    function GetRectangle(considerRotation: Boolean): DNPdf_Rectangle;
    procedure Flatten;
    function Clone: DDN.mscorlib.DNObject;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property AnnotationType: DNAnnotationType read get_AnnotationType;
    property Measure: DNMeasure read get_Measure write set_Measure;
    property Vertices: TArray<DNPoint> read get_Vertices write set_Vertices;
    property InteriorColor: DNColor read get_InteriorColor write set_InteriorColor;
    property StartingStyle: DNLineEnding read get_StartingStyle write set_StartingStyle;
    property EndingStyle: DNLineEnding read get_EndingStyle write set_EndingStyle;
    property Intent: DNPolyIntent read get_Intent write set_Intent;
    property Title: string read get_Title write set_Title;
    property RichText: string read get_RichText write set_RichText;
    property CreationDate: DDN.mscorlib.DNDateTime read get_CreationDate;
    property Subject: string read get_Subject write set_Subject;
    property Popup: DNPopupAnnotation read get_Popup write set_Popup;
    property Opacity: Double read get_Opacity write set_Opacity;
    property InReplyTo: DNAnnotation read get_InReplyTo write set_InReplyTo;
    property ReplyType: DNReplyType read get_ReplyType write set_ReplyType;
    property Flags: DNAnnotationFlags read get_Flags write set_Flags;
    property Width: Double read get_Width write set_Width;
    property Actions: DNPdfActionCollection read get_Actions;
    property Height: Double read get_Height write set_Height;
    property Rect: DNPdf_Rectangle read get_Rect write set_Rect;
    property Contents: string read get_Contents write set_Contents;
    property Name: string read get_Name write set_Name;
    property Modified: DDN.mscorlib.DNDateTime read get_Modified write set_Modified;
    property Color: DNColor read get_Color write set_Color;
    property Border: DNBorder read get_Border write set_Border;
    property ActiveState: string read get_ActiveState write set_ActiveState;
    property Characteristics: DNCharacteristics read get_Characteristics;
    property States: DNAppearanceDictionary read get_States;
    property Alignment: DNTextAlignment read get_Alignment write set_Alignment;
    property HorizontalAlignment: DNHorizontalAlignment read get_HorizontalAlignment write set_HorizontalAlignment;
    property TextHorizontalAlignment: DNHorizontalAlignment read get_TextHorizontalAlignment write set_TextHorizontalAlignment;
    property FullName: string read get_FullName;
    property Appearance: DNAppearanceDictionary read get_Appearance;
    property PageIndex: Int32 read get_PageIndex;
    property VerticalAlignment: DNVerticalAlignment read get_VerticalAlignment write set_VerticalAlignment;
    property Margin: DNMarginInfo read get_Margin write set_Margin;
    property IsFirstParagraphInColumn: Boolean read get_IsFirstParagraphInColumn write set_IsFirstParagraphInColumn;
    property IsKeptWithNext: Boolean read get_IsKeptWithNext write set_IsKeptWithNext;
    property IsInNewPage: Boolean read get_IsInNewPage write set_IsInNewPage;
    property IsInLineParagraph: Boolean read get_IsInLineParagraph write set_IsInLineParagraph;
    property Hyperlink: DNHyperlink read get_Hyperlink write set_Hyperlink;
    property ZIndex: Int32 read get_ZIndex write set_ZIndex;
  end;

  TDNPolygonAnnotation = class(TDNGenericImport<DNPolygonAnnotationClass, DNPolygonAnnotation>) end;

  //-------------namespace: Aspose.Pdf.Annotations----------------
  DNPolylineAnnotationClass = interface(DNPolyAnnotationClass)
  ['{F745A60D-E2B0-5440-9E9B-B4F3CDAF3719}']
  { constructors } 

    {class} function init(page: DNPage; rect: DNPdf_Rectangle; vertices: TArray<DNPoint>): DNPolylineAnnotation;

  end;

  [DNTypeName('Aspose.Pdf.Annotations.PolylineAnnotation')]
  DNPolylineAnnotation = interface(DNPolyAnnotation)
  ['{D609291D-E29A-3475-B45E-E0132500E237}']
  { getters & setters } 

    function get_AnnotationType: DNAnnotationType;
    function get_Measure: DNMeasure;
    procedure set_Measure(value: DNMeasure);
    function get_Vertices: TArray<DNPoint>;
    procedure set_Vertices(value: TArray<DNPoint>);
    function get_InteriorColor: DNColor;
    procedure set_InteriorColor(value: DNColor);
    function get_StartingStyle: DNLineEnding;
    procedure set_StartingStyle(value: DNLineEnding);
    function get_EndingStyle: DNLineEnding;
    procedure set_EndingStyle(value: DNLineEnding);
    function get_Intent: DNPolyIntent;
    procedure set_Intent(value: DNPolyIntent);
    function get_Title: string;
    procedure set_Title(value: string);
    function get_RichText: string;
    procedure set_RichText(value: string);
    function get_CreationDate: DDN.mscorlib.DNDateTime;
    function get_Subject: string;
    procedure set_Subject(value: string);
    function get_Popup: DNPopupAnnotation;
    procedure set_Popup(value: DNPopupAnnotation);
    function get_Opacity: Double;
    procedure set_Opacity(value: Double);
    function get_InReplyTo: DNAnnotation;
    procedure set_InReplyTo(value: DNAnnotation);
    function get_ReplyType: DNReplyType;
    procedure set_ReplyType(value: DNReplyType);
    function get_Flags: DNAnnotationFlags;
    procedure set_Flags(value: DNAnnotationFlags);
    function get_Width: Double;
    procedure set_Width(value: Double);
    function get_Actions: DNPdfActionCollection;
    function get_Height: Double;
    procedure set_Height(value: Double);
    function get_Rect: DNPdf_Rectangle;
    procedure set_Rect(value: DNPdf_Rectangle);
    function get_Contents: string;
    procedure set_Contents(value: string);
    function get_Name: string;
    procedure set_Name(value: string);
    function get_Modified: DDN.mscorlib.DNDateTime;
    procedure set_Modified(value: DDN.mscorlib.DNDateTime);
    function get_Color: DNColor;
    procedure set_Color(value: DNColor);
    function get_Border: DNBorder;
    procedure set_Border(value: DNBorder);
    function get_ActiveState: string;
    procedure set_ActiveState(value: string);
    function get_Characteristics: DNCharacteristics;
    function get_States: DNAppearanceDictionary;
    function get_Alignment: DNTextAlignment;
    procedure set_Alignment(value: DNTextAlignment);
    function get_HorizontalAlignment: DNHorizontalAlignment;
    procedure set_HorizontalAlignment(value: DNHorizontalAlignment);
    function get_TextHorizontalAlignment: DNHorizontalAlignment;
    procedure set_TextHorizontalAlignment(value: DNHorizontalAlignment);
    function get_FullName: string;
    function get_Appearance: DNAppearanceDictionary;
    function get_PageIndex: Int32;
    function get_VerticalAlignment: DNVerticalAlignment;
    procedure set_VerticalAlignment(value: DNVerticalAlignment);
    function get_Margin: DNMarginInfo;
    procedure set_Margin(value: DNMarginInfo);
    function get_IsFirstParagraphInColumn: Boolean;
    procedure set_IsFirstParagraphInColumn(value: Boolean);
    function get_IsKeptWithNext: Boolean;
    procedure set_IsKeptWithNext(value: Boolean);
    function get_IsInNewPage: Boolean;
    procedure set_IsInNewPage(value: Boolean);
    function get_IsInLineParagraph: Boolean;
    procedure set_IsInLineParagraph(value: Boolean);
    function get_Hyperlink: DNHyperlink;
    procedure set_Hyperlink(value: DNHyperlink);
    function get_ZIndex: Int32;
    procedure set_ZIndex(value: Int32);

  { methods } 

    procedure Accept(visitor: DNAnnotationSelector);
    function GetRectangle(considerRotation: Boolean): DNPdf_Rectangle;
    procedure Flatten;
    function Clone: DDN.mscorlib.DNObject;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property AnnotationType: DNAnnotationType read get_AnnotationType;
    property Measure: DNMeasure read get_Measure write set_Measure;
    property Vertices: TArray<DNPoint> read get_Vertices write set_Vertices;
    property InteriorColor: DNColor read get_InteriorColor write set_InteriorColor;
    property StartingStyle: DNLineEnding read get_StartingStyle write set_StartingStyle;
    property EndingStyle: DNLineEnding read get_EndingStyle write set_EndingStyle;
    property Intent: DNPolyIntent read get_Intent write set_Intent;
    property Title: string read get_Title write set_Title;
    property RichText: string read get_RichText write set_RichText;
    property CreationDate: DDN.mscorlib.DNDateTime read get_CreationDate;
    property Subject: string read get_Subject write set_Subject;
    property Popup: DNPopupAnnotation read get_Popup write set_Popup;
    property Opacity: Double read get_Opacity write set_Opacity;
    property InReplyTo: DNAnnotation read get_InReplyTo write set_InReplyTo;
    property ReplyType: DNReplyType read get_ReplyType write set_ReplyType;
    property Flags: DNAnnotationFlags read get_Flags write set_Flags;
    property Width: Double read get_Width write set_Width;
    property Actions: DNPdfActionCollection read get_Actions;
    property Height: Double read get_Height write set_Height;
    property Rect: DNPdf_Rectangle read get_Rect write set_Rect;
    property Contents: string read get_Contents write set_Contents;
    property Name: string read get_Name write set_Name;
    property Modified: DDN.mscorlib.DNDateTime read get_Modified write set_Modified;
    property Color: DNColor read get_Color write set_Color;
    property Border: DNBorder read get_Border write set_Border;
    property ActiveState: string read get_ActiveState write set_ActiveState;
    property Characteristics: DNCharacteristics read get_Characteristics;
    property States: DNAppearanceDictionary read get_States;
    property Alignment: DNTextAlignment read get_Alignment write set_Alignment;
    property HorizontalAlignment: DNHorizontalAlignment read get_HorizontalAlignment write set_HorizontalAlignment;
    property TextHorizontalAlignment: DNHorizontalAlignment read get_TextHorizontalAlignment write set_TextHorizontalAlignment;
    property FullName: string read get_FullName;
    property Appearance: DNAppearanceDictionary read get_Appearance;
    property PageIndex: Int32 read get_PageIndex;
    property VerticalAlignment: DNVerticalAlignment read get_VerticalAlignment write set_VerticalAlignment;
    property Margin: DNMarginInfo read get_Margin write set_Margin;
    property IsFirstParagraphInColumn: Boolean read get_IsFirstParagraphInColumn write set_IsFirstParagraphInColumn;
    property IsKeptWithNext: Boolean read get_IsKeptWithNext write set_IsKeptWithNext;
    property IsInNewPage: Boolean read get_IsInNewPage write set_IsInNewPage;
    property IsInLineParagraph: Boolean read get_IsInLineParagraph write set_IsInLineParagraph;
    property Hyperlink: DNHyperlink read get_Hyperlink write set_Hyperlink;
    property ZIndex: Int32 read get_ZIndex write set_ZIndex;
  end;

  TDNPolylineAnnotation = class(TDNGenericImport<DNPolylineAnnotationClass, DNPolylineAnnotation>) end;

  //-------------namespace: Aspose.Pdf.Annotations----------------
  DNRedactionAnnotationClass = interface(DNMarkupAnnotationClass)
  ['{2C07719E-130B-5B9C-819F-85089FF8865B}']
  { constructors } 

    {class} function init(document: DNDocument): DNRedactionAnnotation; overload;
    {class} function init(page: DNPage; rect: DNPdf_Rectangle): DNRedactionAnnotation; overload;

  end;

  [DNTypeName('Aspose.Pdf.Annotations.RedactionAnnotation')]
  DNRedactionAnnotation = interface(DNMarkupAnnotation)
  ['{3F6BD7F2-4BC3-3040-99DB-BA3A71CD6014}']
  { getters & setters } 

    function get_QuadPoint: TArray<DNPoint>;
    procedure set_QuadPoint(value: TArray<DNPoint>);
    function get_DefaultAppearance: string;
    procedure set_DefaultAppearance(value: string);
    function get_FillColor: DNColor;
    procedure set_FillColor(value: DNColor);
    function get_BorderColor: DNColor;
    procedure set_BorderColor(value: DNColor);
    function get_OverlayText: string;
    procedure set_OverlayText(value: string);
    function get_Repeat: Boolean;
    procedure set_Repeat(value: Boolean);
    function get_TextAlignment: DNHorizontalAlignment;
    procedure set_TextAlignment(value: DNHorizontalAlignment);
    function get_AnnotationType: DNAnnotationType;
    function get_Title: string;
    procedure set_Title(value: string);
    function get_RichText: string;
    procedure set_RichText(value: string);
    function get_CreationDate: DDN.mscorlib.DNDateTime;
    function get_Subject: string;
    procedure set_Subject(value: string);
    function get_Popup: DNPopupAnnotation;
    procedure set_Popup(value: DNPopupAnnotation);
    function get_Opacity: Double;
    procedure set_Opacity(value: Double);
    function get_InReplyTo: DNAnnotation;
    procedure set_InReplyTo(value: DNAnnotation);
    function get_ReplyType: DNReplyType;
    procedure set_ReplyType(value: DNReplyType);
    function get_Flags: DNAnnotationFlags;
    procedure set_Flags(value: DNAnnotationFlags);
    function get_Width: Double;
    procedure set_Width(value: Double);
    function get_Actions: DNPdfActionCollection;
    function get_Height: Double;
    procedure set_Height(value: Double);
    function get_Rect: DNPdf_Rectangle;
    procedure set_Rect(value: DNPdf_Rectangle);
    function get_Contents: string;
    procedure set_Contents(value: string);
    function get_Name: string;
    procedure set_Name(value: string);
    function get_Modified: DDN.mscorlib.DNDateTime;
    procedure set_Modified(value: DDN.mscorlib.DNDateTime);
    function get_Color: DNColor;
    procedure set_Color(value: DNColor);
    function get_Border: DNBorder;
    procedure set_Border(value: DNBorder);
    function get_ActiveState: string;
    procedure set_ActiveState(value: string);
    function get_Characteristics: DNCharacteristics;
    function get_States: DNAppearanceDictionary;
    function get_Alignment: DNTextAlignment;
    procedure set_Alignment(value: DNTextAlignment);
    function get_HorizontalAlignment: DNHorizontalAlignment;
    procedure set_HorizontalAlignment(value: DNHorizontalAlignment);
    function get_TextHorizontalAlignment: DNHorizontalAlignment;
    procedure set_TextHorizontalAlignment(value: DNHorizontalAlignment);
    function get_FullName: string;
    function get_Appearance: DNAppearanceDictionary;
    function get_PageIndex: Int32;
    function get_VerticalAlignment: DNVerticalAlignment;
    procedure set_VerticalAlignment(value: DNVerticalAlignment);
    function get_Margin: DNMarginInfo;
    procedure set_Margin(value: DNMarginInfo);
    function get_IsFirstParagraphInColumn: Boolean;
    procedure set_IsFirstParagraphInColumn(value: Boolean);
    function get_IsKeptWithNext: Boolean;
    procedure set_IsKeptWithNext(value: Boolean);
    function get_IsInNewPage: Boolean;
    procedure set_IsInNewPage(value: Boolean);
    function get_IsInLineParagraph: Boolean;
    procedure set_IsInLineParagraph(value: Boolean);
    function get_Hyperlink: DNHyperlink;
    procedure set_Hyperlink(value: DNHyperlink);
    function get_ZIndex: Int32;
    procedure set_ZIndex(value: Int32);

  { methods } 

    procedure Accept(visitor: DNAnnotationSelector);
    procedure Flatten;
    procedure Redact;
    function GetRectangle(considerRotation: Boolean): DNPdf_Rectangle;
    function Clone: DDN.mscorlib.DNObject;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property QuadPoint: TArray<DNPoint> read get_QuadPoint write set_QuadPoint;
    property DefaultAppearance: string read get_DefaultAppearance write set_DefaultAppearance;
    property FillColor: DNColor read get_FillColor write set_FillColor;
    property BorderColor: DNColor read get_BorderColor write set_BorderColor;
    property OverlayText: string read get_OverlayText write set_OverlayText;
    property &Repeat: Boolean read get_Repeat write set_Repeat;
    property TextAlignment: DNHorizontalAlignment read get_TextAlignment write set_TextAlignment;
    property AnnotationType: DNAnnotationType read get_AnnotationType;
    property Title: string read get_Title write set_Title;
    property RichText: string read get_RichText write set_RichText;
    property CreationDate: DDN.mscorlib.DNDateTime read get_CreationDate;
    property Subject: string read get_Subject write set_Subject;
    property Popup: DNPopupAnnotation read get_Popup write set_Popup;
    property Opacity: Double read get_Opacity write set_Opacity;
    property InReplyTo: DNAnnotation read get_InReplyTo write set_InReplyTo;
    property ReplyType: DNReplyType read get_ReplyType write set_ReplyType;
    property Flags: DNAnnotationFlags read get_Flags write set_Flags;
    property Width: Double read get_Width write set_Width;
    property Actions: DNPdfActionCollection read get_Actions;
    property Height: Double read get_Height write set_Height;
    property Rect: DNPdf_Rectangle read get_Rect write set_Rect;
    property Contents: string read get_Contents write set_Contents;
    property Name: string read get_Name write set_Name;
    property Modified: DDN.mscorlib.DNDateTime read get_Modified write set_Modified;
    property Color: DNColor read get_Color write set_Color;
    property Border: DNBorder read get_Border write set_Border;
    property ActiveState: string read get_ActiveState write set_ActiveState;
    property Characteristics: DNCharacteristics read get_Characteristics;
    property States: DNAppearanceDictionary read get_States;
    property Alignment: DNTextAlignment read get_Alignment write set_Alignment;
    property HorizontalAlignment: DNHorizontalAlignment read get_HorizontalAlignment write set_HorizontalAlignment;
    property TextHorizontalAlignment: DNHorizontalAlignment read get_TextHorizontalAlignment write set_TextHorizontalAlignment;
    property FullName: string read get_FullName;
    property Appearance: DNAppearanceDictionary read get_Appearance;
    property PageIndex: Int32 read get_PageIndex;
    property VerticalAlignment: DNVerticalAlignment read get_VerticalAlignment write set_VerticalAlignment;
    property Margin: DNMarginInfo read get_Margin write set_Margin;
    property IsFirstParagraphInColumn: Boolean read get_IsFirstParagraphInColumn write set_IsFirstParagraphInColumn;
    property IsKeptWithNext: Boolean read get_IsKeptWithNext write set_IsKeptWithNext;
    property IsInNewPage: Boolean read get_IsInNewPage write set_IsInNewPage;
    property IsInLineParagraph: Boolean read get_IsInLineParagraph write set_IsInLineParagraph;
    property Hyperlink: DNHyperlink read get_Hyperlink write set_Hyperlink;
    property ZIndex: Int32 read get_ZIndex write set_ZIndex;
  end;

  TDNRedactionAnnotation = class(TDNGenericImport<DNRedactionAnnotationClass, DNRedactionAnnotation>) end;

  //-------------namespace: Aspose.Pdf.Annotations----------------
  DNSoundAnnotationClass = interface(DNMarkupAnnotationClass)
  ['{0C3360DD-22D4-540F-BB1C-D00ADE6EC5BA}']
  { constructors } 

    {class} function init(page: DNPage; rect: DNPdf_Rectangle; soundFile: string): DNSoundAnnotation; overload;
    {class} function init(page: DNPage; rect: DNPdf_Rectangle; soundFile: string; soundSampleData: DNSoundSampleData): DNSoundAnnotation; overload;

  end;

  [DNTypeName('Aspose.Pdf.Annotations.SoundAnnotation')]
  DNSoundAnnotation = interface(DNMarkupAnnotation)
  ['{5135EAF6-DE99-3FC2-A7CE-F76823D2AF91}']
  { getters & setters } 

    function get_Icon: DNSoundIcon;
    procedure set_Icon(value: DNSoundIcon);
    function get_SoundData: DNSoundData;
    function get_AnnotationType: DNAnnotationType;
    function get_Title: string;
    procedure set_Title(value: string);
    function get_RichText: string;
    procedure set_RichText(value: string);
    function get_CreationDate: DDN.mscorlib.DNDateTime;
    function get_Subject: string;
    procedure set_Subject(value: string);
    function get_Popup: DNPopupAnnotation;
    procedure set_Popup(value: DNPopupAnnotation);
    function get_Opacity: Double;
    procedure set_Opacity(value: Double);
    function get_InReplyTo: DNAnnotation;
    procedure set_InReplyTo(value: DNAnnotation);
    function get_ReplyType: DNReplyType;
    procedure set_ReplyType(value: DNReplyType);
    function get_Flags: DNAnnotationFlags;
    procedure set_Flags(value: DNAnnotationFlags);
    function get_Width: Double;
    procedure set_Width(value: Double);
    function get_Actions: DNPdfActionCollection;
    function get_Height: Double;
    procedure set_Height(value: Double);
    function get_Rect: DNPdf_Rectangle;
    procedure set_Rect(value: DNPdf_Rectangle);
    function get_Contents: string;
    procedure set_Contents(value: string);
    function get_Name: string;
    procedure set_Name(value: string);
    function get_Modified: DDN.mscorlib.DNDateTime;
    procedure set_Modified(value: DDN.mscorlib.DNDateTime);
    function get_Color: DNColor;
    procedure set_Color(value: DNColor);
    function get_Border: DNBorder;
    procedure set_Border(value: DNBorder);
    function get_ActiveState: string;
    procedure set_ActiveState(value: string);
    function get_Characteristics: DNCharacteristics;
    function get_States: DNAppearanceDictionary;
    function get_Alignment: DNTextAlignment;
    procedure set_Alignment(value: DNTextAlignment);
    function get_HorizontalAlignment: DNHorizontalAlignment;
    procedure set_HorizontalAlignment(value: DNHorizontalAlignment);
    function get_TextHorizontalAlignment: DNHorizontalAlignment;
    procedure set_TextHorizontalAlignment(value: DNHorizontalAlignment);
    function get_FullName: string;
    function get_Appearance: DNAppearanceDictionary;
    function get_PageIndex: Int32;
    function get_VerticalAlignment: DNVerticalAlignment;
    procedure set_VerticalAlignment(value: DNVerticalAlignment);
    function get_Margin: DNMarginInfo;
    procedure set_Margin(value: DNMarginInfo);
    function get_IsFirstParagraphInColumn: Boolean;
    procedure set_IsFirstParagraphInColumn(value: Boolean);
    function get_IsKeptWithNext: Boolean;
    procedure set_IsKeptWithNext(value: Boolean);
    function get_IsInNewPage: Boolean;
    procedure set_IsInNewPage(value: Boolean);
    function get_IsInLineParagraph: Boolean;
    procedure set_IsInLineParagraph(value: Boolean);
    function get_Hyperlink: DNHyperlink;
    procedure set_Hyperlink(value: DNHyperlink);
    function get_ZIndex: Int32;
    procedure set_ZIndex(value: Int32);

  { methods } 

    procedure Accept(visitor: DNAnnotationSelector);
    function GetRectangle(considerRotation: Boolean): DNPdf_Rectangle;
    procedure Flatten;
    function Clone: DDN.mscorlib.DNObject;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Icon: DNSoundIcon read get_Icon write set_Icon;
    property SoundData: DNSoundData read get_SoundData;
    property AnnotationType: DNAnnotationType read get_AnnotationType;
    property Title: string read get_Title write set_Title;
    property RichText: string read get_RichText write set_RichText;
    property CreationDate: DDN.mscorlib.DNDateTime read get_CreationDate;
    property Subject: string read get_Subject write set_Subject;
    property Popup: DNPopupAnnotation read get_Popup write set_Popup;
    property Opacity: Double read get_Opacity write set_Opacity;
    property InReplyTo: DNAnnotation read get_InReplyTo write set_InReplyTo;
    property ReplyType: DNReplyType read get_ReplyType write set_ReplyType;
    property Flags: DNAnnotationFlags read get_Flags write set_Flags;
    property Width: Double read get_Width write set_Width;
    property Actions: DNPdfActionCollection read get_Actions;
    property Height: Double read get_Height write set_Height;
    property Rect: DNPdf_Rectangle read get_Rect write set_Rect;
    property Contents: string read get_Contents write set_Contents;
    property Name: string read get_Name write set_Name;
    property Modified: DDN.mscorlib.DNDateTime read get_Modified write set_Modified;
    property Color: DNColor read get_Color write set_Color;
    property Border: DNBorder read get_Border write set_Border;
    property ActiveState: string read get_ActiveState write set_ActiveState;
    property Characteristics: DNCharacteristics read get_Characteristics;
    property States: DNAppearanceDictionary read get_States;
    property Alignment: DNTextAlignment read get_Alignment write set_Alignment;
    property HorizontalAlignment: DNHorizontalAlignment read get_HorizontalAlignment write set_HorizontalAlignment;
    property TextHorizontalAlignment: DNHorizontalAlignment read get_TextHorizontalAlignment write set_TextHorizontalAlignment;
    property FullName: string read get_FullName;
    property Appearance: DNAppearanceDictionary read get_Appearance;
    property PageIndex: Int32 read get_PageIndex;
    property VerticalAlignment: DNVerticalAlignment read get_VerticalAlignment write set_VerticalAlignment;
    property Margin: DNMarginInfo read get_Margin write set_Margin;
    property IsFirstParagraphInColumn: Boolean read get_IsFirstParagraphInColumn write set_IsFirstParagraphInColumn;
    property IsKeptWithNext: Boolean read get_IsKeptWithNext write set_IsKeptWithNext;
    property IsInNewPage: Boolean read get_IsInNewPage write set_IsInNewPage;
    property IsInLineParagraph: Boolean read get_IsInLineParagraph write set_IsInLineParagraph;
    property Hyperlink: DNHyperlink read get_Hyperlink write set_Hyperlink;
    property ZIndex: Int32 read get_ZIndex write set_ZIndex;
  end;

  TDNSoundAnnotation = class(TDNGenericImport<DNSoundAnnotationClass, DNSoundAnnotation>) end;

  //-------------namespace: Aspose.Pdf.Annotations----------------
  DNStampAnnotationClass = interface(DNMarkupAnnotationClass)
  ['{953F975F-1996-5D51-AB0D-7A7CB798C7F4}']
  { constructors } 

    {class} function init(document: DNDocument): DNStampAnnotation; overload;
    {class} function init(page: DNPage; rect: DNPdf_Rectangle): DNStampAnnotation; overload;

  end;

  [DNTypeName('Aspose.Pdf.Annotations.StampAnnotation')]
  DNStampAnnotation = interface(DNMarkupAnnotation)
  ['{D5A0EC51-7DAD-3D2A-988E-AFFE13F7C6F5}']
  { getters & setters } 

    function get_Icon: DNStampIcon;
    procedure set_Icon(value: DNStampIcon);
    function get_AnnotationType: DNAnnotationType;
    function get_Image: DDN.mscorlib.DNStream;
    procedure set_Image(value: DDN.mscorlib.DNStream);
    function get_Title: string;
    procedure set_Title(value: string);
    function get_RichText: string;
    procedure set_RichText(value: string);
    function get_CreationDate: DDN.mscorlib.DNDateTime;
    function get_Subject: string;
    procedure set_Subject(value: string);
    function get_Popup: DNPopupAnnotation;
    procedure set_Popup(value: DNPopupAnnotation);
    function get_Opacity: Double;
    procedure set_Opacity(value: Double);
    function get_InReplyTo: DNAnnotation;
    procedure set_InReplyTo(value: DNAnnotation);
    function get_ReplyType: DNReplyType;
    procedure set_ReplyType(value: DNReplyType);
    function get_Flags: DNAnnotationFlags;
    procedure set_Flags(value: DNAnnotationFlags);
    function get_Width: Double;
    procedure set_Width(value: Double);
    function get_Actions: DNPdfActionCollection;
    function get_Height: Double;
    procedure set_Height(value: Double);
    function get_Rect: DNPdf_Rectangle;
    procedure set_Rect(value: DNPdf_Rectangle);
    function get_Contents: string;
    procedure set_Contents(value: string);
    function get_Name: string;
    procedure set_Name(value: string);
    function get_Modified: DDN.mscorlib.DNDateTime;
    procedure set_Modified(value: DDN.mscorlib.DNDateTime);
    function get_Color: DNColor;
    procedure set_Color(value: DNColor);
    function get_Border: DNBorder;
    procedure set_Border(value: DNBorder);
    function get_ActiveState: string;
    procedure set_ActiveState(value: string);
    function get_Characteristics: DNCharacteristics;
    function get_States: DNAppearanceDictionary;
    function get_Alignment: DNTextAlignment;
    procedure set_Alignment(value: DNTextAlignment);
    function get_HorizontalAlignment: DNHorizontalAlignment;
    procedure set_HorizontalAlignment(value: DNHorizontalAlignment);
    function get_TextHorizontalAlignment: DNHorizontalAlignment;
    procedure set_TextHorizontalAlignment(value: DNHorizontalAlignment);
    function get_FullName: string;
    function get_Appearance: DNAppearanceDictionary;
    function get_PageIndex: Int32;
    function get_VerticalAlignment: DNVerticalAlignment;
    procedure set_VerticalAlignment(value: DNVerticalAlignment);
    function get_Margin: DNMarginInfo;
    procedure set_Margin(value: DNMarginInfo);
    function get_IsFirstParagraphInColumn: Boolean;
    procedure set_IsFirstParagraphInColumn(value: Boolean);
    function get_IsKeptWithNext: Boolean;
    procedure set_IsKeptWithNext(value: Boolean);
    function get_IsInNewPage: Boolean;
    procedure set_IsInNewPage(value: Boolean);
    function get_IsInLineParagraph: Boolean;
    procedure set_IsInLineParagraph(value: Boolean);
    function get_Hyperlink: DNHyperlink;
    procedure set_Hyperlink(value: DNHyperlink);
    function get_ZIndex: Int32;
    procedure set_ZIndex(value: Int32);

  { methods } 

    procedure Accept(visitor: DNAnnotationSelector);
    function GetRectangle(considerRotation: Boolean): DNPdf_Rectangle;
    procedure Flatten;
    function Clone: DDN.mscorlib.DNObject;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Icon: DNStampIcon read get_Icon write set_Icon;
    property AnnotationType: DNAnnotationType read get_AnnotationType;
    property Image: DDN.mscorlib.DNStream read get_Image write set_Image;
    property Title: string read get_Title write set_Title;
    property RichText: string read get_RichText write set_RichText;
    property CreationDate: DDN.mscorlib.DNDateTime read get_CreationDate;
    property Subject: string read get_Subject write set_Subject;
    property Popup: DNPopupAnnotation read get_Popup write set_Popup;
    property Opacity: Double read get_Opacity write set_Opacity;
    property InReplyTo: DNAnnotation read get_InReplyTo write set_InReplyTo;
    property ReplyType: DNReplyType read get_ReplyType write set_ReplyType;
    property Flags: DNAnnotationFlags read get_Flags write set_Flags;
    property Width: Double read get_Width write set_Width;
    property Actions: DNPdfActionCollection read get_Actions;
    property Height: Double read get_Height write set_Height;
    property Rect: DNPdf_Rectangle read get_Rect write set_Rect;
    property Contents: string read get_Contents write set_Contents;
    property Name: string read get_Name write set_Name;
    property Modified: DDN.mscorlib.DNDateTime read get_Modified write set_Modified;
    property Color: DNColor read get_Color write set_Color;
    property Border: DNBorder read get_Border write set_Border;
    property ActiveState: string read get_ActiveState write set_ActiveState;
    property Characteristics: DNCharacteristics read get_Characteristics;
    property States: DNAppearanceDictionary read get_States;
    property Alignment: DNTextAlignment read get_Alignment write set_Alignment;
    property HorizontalAlignment: DNHorizontalAlignment read get_HorizontalAlignment write set_HorizontalAlignment;
    property TextHorizontalAlignment: DNHorizontalAlignment read get_TextHorizontalAlignment write set_TextHorizontalAlignment;
    property FullName: string read get_FullName;
    property Appearance: DNAppearanceDictionary read get_Appearance;
    property PageIndex: Int32 read get_PageIndex;
    property VerticalAlignment: DNVerticalAlignment read get_VerticalAlignment write set_VerticalAlignment;
    property Margin: DNMarginInfo read get_Margin write set_Margin;
    property IsFirstParagraphInColumn: Boolean read get_IsFirstParagraphInColumn write set_IsFirstParagraphInColumn;
    property IsKeptWithNext: Boolean read get_IsKeptWithNext write set_IsKeptWithNext;
    property IsInNewPage: Boolean read get_IsInNewPage write set_IsInNewPage;
    property IsInLineParagraph: Boolean read get_IsInLineParagraph write set_IsInLineParagraph;
    property Hyperlink: DNHyperlink read get_Hyperlink write set_Hyperlink;
    property ZIndex: Int32 read get_ZIndex write set_ZIndex;
  end;

  TDNStampAnnotation = class(TDNGenericImport<DNStampAnnotationClass, DNStampAnnotation>) end;

  //-------------namespace: Aspose.Pdf.Annotations----------------
  DNTextAnnotationClass = interface(DNMarkupAnnotationClass)
  ['{45D971AD-28A4-5F1A-8DAC-874732D2035B}']
  { constructors } 

    {class} function init(document: DNDocument): DNTextAnnotation; overload;
    {class} function init(page: DNPage; rect: DNPdf_Rectangle): DNTextAnnotation; overload;

  end;

  [DNTypeName('Aspose.Pdf.Annotations.TextAnnotation')]
  DNTextAnnotation = interface(DNMarkupAnnotation)
  ['{52187D7B-66A2-39B5-B359-6797D2C61BF8}']
  { getters & setters } 

    function get_Open: Boolean;
    procedure set_Open(value: Boolean);
    function get_Icon: DNTextIcon;
    procedure set_Icon(value: DNTextIcon);
    function get_State: DNAnnotationState;
    procedure set_State(value: DNAnnotationState);
    function get_AnnotationType: DNAnnotationType;
    function get_Title: string;
    procedure set_Title(value: string);
    function get_RichText: string;
    procedure set_RichText(value: string);
    function get_CreationDate: DDN.mscorlib.DNDateTime;
    function get_Subject: string;
    procedure set_Subject(value: string);
    function get_Popup: DNPopupAnnotation;
    procedure set_Popup(value: DNPopupAnnotation);
    function get_Opacity: Double;
    procedure set_Opacity(value: Double);
    function get_InReplyTo: DNAnnotation;
    procedure set_InReplyTo(value: DNAnnotation);
    function get_ReplyType: DNReplyType;
    procedure set_ReplyType(value: DNReplyType);
    function get_Flags: DNAnnotationFlags;
    procedure set_Flags(value: DNAnnotationFlags);
    function get_Width: Double;
    procedure set_Width(value: Double);
    function get_Actions: DNPdfActionCollection;
    function get_Height: Double;
    procedure set_Height(value: Double);
    function get_Rect: DNPdf_Rectangle;
    procedure set_Rect(value: DNPdf_Rectangle);
    function get_Contents: string;
    procedure set_Contents(value: string);
    function get_Name: string;
    procedure set_Name(value: string);
    function get_Modified: DDN.mscorlib.DNDateTime;
    procedure set_Modified(value: DDN.mscorlib.DNDateTime);
    function get_Color: DNColor;
    procedure set_Color(value: DNColor);
    function get_Border: DNBorder;
    procedure set_Border(value: DNBorder);
    function get_ActiveState: string;
    procedure set_ActiveState(value: string);
    function get_Characteristics: DNCharacteristics;
    function get_States: DNAppearanceDictionary;
    function get_Alignment: DNTextAlignment;
    procedure set_Alignment(value: DNTextAlignment);
    function get_HorizontalAlignment: DNHorizontalAlignment;
    procedure set_HorizontalAlignment(value: DNHorizontalAlignment);
    function get_TextHorizontalAlignment: DNHorizontalAlignment;
    procedure set_TextHorizontalAlignment(value: DNHorizontalAlignment);
    function get_FullName: string;
    function get_Appearance: DNAppearanceDictionary;
    function get_PageIndex: Int32;
    function get_VerticalAlignment: DNVerticalAlignment;
    procedure set_VerticalAlignment(value: DNVerticalAlignment);
    function get_Margin: DNMarginInfo;
    procedure set_Margin(value: DNMarginInfo);
    function get_IsFirstParagraphInColumn: Boolean;
    procedure set_IsFirstParagraphInColumn(value: Boolean);
    function get_IsKeptWithNext: Boolean;
    procedure set_IsKeptWithNext(value: Boolean);
    function get_IsInNewPage: Boolean;
    procedure set_IsInNewPage(value: Boolean);
    function get_IsInLineParagraph: Boolean;
    procedure set_IsInLineParagraph(value: Boolean);
    function get_Hyperlink: DNHyperlink;
    procedure set_Hyperlink(value: DNHyperlink);
    function get_ZIndex: Int32;
    procedure set_ZIndex(value: Int32);

  { methods } 

    procedure Accept(visitor: DNAnnotationSelector);
    function GetRectangle(considerRotation: Boolean): DNPdf_Rectangle;
    procedure Flatten;
    function Clone: DDN.mscorlib.DNObject;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Open: Boolean read get_Open write set_Open;
    property Icon: DNTextIcon read get_Icon write set_Icon;
    property State: DNAnnotationState read get_State write set_State;
    property AnnotationType: DNAnnotationType read get_AnnotationType;
    property Title: string read get_Title write set_Title;
    property RichText: string read get_RichText write set_RichText;
    property CreationDate: DDN.mscorlib.DNDateTime read get_CreationDate;
    property Subject: string read get_Subject write set_Subject;
    property Popup: DNPopupAnnotation read get_Popup write set_Popup;
    property Opacity: Double read get_Opacity write set_Opacity;
    property InReplyTo: DNAnnotation read get_InReplyTo write set_InReplyTo;
    property ReplyType: DNReplyType read get_ReplyType write set_ReplyType;
    property Flags: DNAnnotationFlags read get_Flags write set_Flags;
    property Width: Double read get_Width write set_Width;
    property Actions: DNPdfActionCollection read get_Actions;
    property Height: Double read get_Height write set_Height;
    property Rect: DNPdf_Rectangle read get_Rect write set_Rect;
    property Contents: string read get_Contents write set_Contents;
    property Name: string read get_Name write set_Name;
    property Modified: DDN.mscorlib.DNDateTime read get_Modified write set_Modified;
    property Color: DNColor read get_Color write set_Color;
    property Border: DNBorder read get_Border write set_Border;
    property ActiveState: string read get_ActiveState write set_ActiveState;
    property Characteristics: DNCharacteristics read get_Characteristics;
    property States: DNAppearanceDictionary read get_States;
    property Alignment: DNTextAlignment read get_Alignment write set_Alignment;
    property HorizontalAlignment: DNHorizontalAlignment read get_HorizontalAlignment write set_HorizontalAlignment;
    property TextHorizontalAlignment: DNHorizontalAlignment read get_TextHorizontalAlignment write set_TextHorizontalAlignment;
    property FullName: string read get_FullName;
    property Appearance: DNAppearanceDictionary read get_Appearance;
    property PageIndex: Int32 read get_PageIndex;
    property VerticalAlignment: DNVerticalAlignment read get_VerticalAlignment write set_VerticalAlignment;
    property Margin: DNMarginInfo read get_Margin write set_Margin;
    property IsFirstParagraphInColumn: Boolean read get_IsFirstParagraphInColumn write set_IsFirstParagraphInColumn;
    property IsKeptWithNext: Boolean read get_IsKeptWithNext write set_IsKeptWithNext;
    property IsInNewPage: Boolean read get_IsInNewPage write set_IsInNewPage;
    property IsInLineParagraph: Boolean read get_IsInLineParagraph write set_IsInLineParagraph;
    property Hyperlink: DNHyperlink read get_Hyperlink write set_Hyperlink;
    property ZIndex: Int32 read get_ZIndex write set_ZIndex;
  end;

  TDNTextAnnotation = class(TDNGenericImport<DNTextAnnotationClass, DNTextAnnotation>) end;

  //-------------namespace: Aspose.Pdf.Annotations----------------
  DNTextMarkupAnnotationClass = interface(DNMarkupAnnotationClass)
  ['{023F4DBE-58BE-587B-A21B-4E8F6FF5DA2F}']
  end;

  [DNTypeName('Aspose.Pdf.Annotations.TextMarkupAnnotation')]
  DNTextMarkupAnnotation = interface(DNMarkupAnnotation)
  ['{366868D8-303B-3670-B90C-B7073AD4DBCD}']
  { getters & setters } 

    function get_QuadPoints: TArray<DNPoint>;
    procedure set_QuadPoints(value: TArray<DNPoint>);
    function get_Title: string;
    procedure set_Title(value: string);
    function get_RichText: string;
    procedure set_RichText(value: string);
    function get_CreationDate: DDN.mscorlib.DNDateTime;
    function get_Subject: string;
    procedure set_Subject(value: string);
    function get_Popup: DNPopupAnnotation;
    procedure set_Popup(value: DNPopupAnnotation);
    function get_Opacity: Double;
    procedure set_Opacity(value: Double);
    function get_InReplyTo: DNAnnotation;
    procedure set_InReplyTo(value: DNAnnotation);
    function get_ReplyType: DNReplyType;
    procedure set_ReplyType(value: DNReplyType);
    function get_Flags: DNAnnotationFlags;
    procedure set_Flags(value: DNAnnotationFlags);
    function get_AnnotationType: DNAnnotationType;
    function get_Width: Double;
    procedure set_Width(value: Double);
    function get_Actions: DNPdfActionCollection;
    function get_Height: Double;
    procedure set_Height(value: Double);
    function get_Rect: DNPdf_Rectangle;
    procedure set_Rect(value: DNPdf_Rectangle);
    function get_Contents: string;
    procedure set_Contents(value: string);
    function get_Name: string;
    procedure set_Name(value: string);
    function get_Modified: DDN.mscorlib.DNDateTime;
    procedure set_Modified(value: DDN.mscorlib.DNDateTime);
    function get_Color: DNColor;
    procedure set_Color(value: DNColor);
    function get_Border: DNBorder;
    procedure set_Border(value: DNBorder);
    function get_ActiveState: string;
    procedure set_ActiveState(value: string);
    function get_Characteristics: DNCharacteristics;
    function get_States: DNAppearanceDictionary;
    function get_Alignment: DNTextAlignment;
    procedure set_Alignment(value: DNTextAlignment);
    function get_HorizontalAlignment: DNHorizontalAlignment;
    procedure set_HorizontalAlignment(value: DNHorizontalAlignment);
    function get_TextHorizontalAlignment: DNHorizontalAlignment;
    procedure set_TextHorizontalAlignment(value: DNHorizontalAlignment);
    function get_FullName: string;
    function get_Appearance: DNAppearanceDictionary;
    function get_PageIndex: Int32;
    function get_VerticalAlignment: DNVerticalAlignment;
    procedure set_VerticalAlignment(value: DNVerticalAlignment);
    function get_Margin: DNMarginInfo;
    procedure set_Margin(value: DNMarginInfo);
    function get_IsFirstParagraphInColumn: Boolean;
    procedure set_IsFirstParagraphInColumn(value: Boolean);
    function get_IsKeptWithNext: Boolean;
    procedure set_IsKeptWithNext(value: Boolean);
    function get_IsInNewPage: Boolean;
    procedure set_IsInNewPage(value: Boolean);
    function get_IsInLineParagraph: Boolean;
    procedure set_IsInLineParagraph(value: Boolean);
    function get_Hyperlink: DNHyperlink;
    procedure set_Hyperlink(value: DNHyperlink);
    function get_ZIndex: Int32;
    procedure set_ZIndex(value: Int32);

  { methods } 

    function GetMarkedText: string;
    function GetMarkedTextFragments: DNTextFragmentCollection;
    function GetRectangle(considerRotation: Boolean): DNPdf_Rectangle;
    procedure Accept(visitor: DNAnnotationSelector);
    procedure Flatten;
    function Clone: DDN.mscorlib.DNObject;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property QuadPoints: TArray<DNPoint> read get_QuadPoints write set_QuadPoints;
    property Title: string read get_Title write set_Title;
    property RichText: string read get_RichText write set_RichText;
    property CreationDate: DDN.mscorlib.DNDateTime read get_CreationDate;
    property Subject: string read get_Subject write set_Subject;
    property Popup: DNPopupAnnotation read get_Popup write set_Popup;
    property Opacity: Double read get_Opacity write set_Opacity;
    property InReplyTo: DNAnnotation read get_InReplyTo write set_InReplyTo;
    property ReplyType: DNReplyType read get_ReplyType write set_ReplyType;
    property Flags: DNAnnotationFlags read get_Flags write set_Flags;
    property AnnotationType: DNAnnotationType read get_AnnotationType;
    property Width: Double read get_Width write set_Width;
    property Actions: DNPdfActionCollection read get_Actions;
    property Height: Double read get_Height write set_Height;
    property Rect: DNPdf_Rectangle read get_Rect write set_Rect;
    property Contents: string read get_Contents write set_Contents;
    property Name: string read get_Name write set_Name;
    property Modified: DDN.mscorlib.DNDateTime read get_Modified write set_Modified;
    property Color: DNColor read get_Color write set_Color;
    property Border: DNBorder read get_Border write set_Border;
    property ActiveState: string read get_ActiveState write set_ActiveState;
    property Characteristics: DNCharacteristics read get_Characteristics;
    property States: DNAppearanceDictionary read get_States;
    property Alignment: DNTextAlignment read get_Alignment write set_Alignment;
    property HorizontalAlignment: DNHorizontalAlignment read get_HorizontalAlignment write set_HorizontalAlignment;
    property TextHorizontalAlignment: DNHorizontalAlignment read get_TextHorizontalAlignment write set_TextHorizontalAlignment;
    property FullName: string read get_FullName;
    property Appearance: DNAppearanceDictionary read get_Appearance;
    property PageIndex: Int32 read get_PageIndex;
    property VerticalAlignment: DNVerticalAlignment read get_VerticalAlignment write set_VerticalAlignment;
    property Margin: DNMarginInfo read get_Margin write set_Margin;
    property IsFirstParagraphInColumn: Boolean read get_IsFirstParagraphInColumn write set_IsFirstParagraphInColumn;
    property IsKeptWithNext: Boolean read get_IsKeptWithNext write set_IsKeptWithNext;
    property IsInNewPage: Boolean read get_IsInNewPage write set_IsInNewPage;
    property IsInLineParagraph: Boolean read get_IsInLineParagraph write set_IsInLineParagraph;
    property Hyperlink: DNHyperlink read get_Hyperlink write set_Hyperlink;
    property ZIndex: Int32 read get_ZIndex write set_ZIndex;
  end;

  TDNTextMarkupAnnotation = class(TDNGenericImport<DNTextMarkupAnnotationClass, DNTextMarkupAnnotation>) end;

  //-------------namespace: Aspose.Pdf.Annotations----------------
  DNHighlightAnnotationClass = interface(DNTextMarkupAnnotationClass)
  ['{9A35BED5-852A-5140-ABE6-0C37CB3007C9}']
  { constructors } 

    {class} function init(page: DNPage; rect: DNPdf_Rectangle): DNHighlightAnnotation;

  end;

  [DNTypeName('Aspose.Pdf.Annotations.HighlightAnnotation')]
  DNHighlightAnnotation = interface(DNTextMarkupAnnotation)
  ['{42EE240E-0652-3692-9D41-BD506681D580}']
  { getters & setters } 

    function get_AnnotationType: DNAnnotationType;
    function get_QuadPoints: TArray<DNPoint>;
    procedure set_QuadPoints(value: TArray<DNPoint>);
    function get_Title: string;
    procedure set_Title(value: string);
    function get_RichText: string;
    procedure set_RichText(value: string);
    function get_CreationDate: DDN.mscorlib.DNDateTime;
    function get_Subject: string;
    procedure set_Subject(value: string);
    function get_Popup: DNPopupAnnotation;
    procedure set_Popup(value: DNPopupAnnotation);
    function get_Opacity: Double;
    procedure set_Opacity(value: Double);
    function get_InReplyTo: DNAnnotation;
    procedure set_InReplyTo(value: DNAnnotation);
    function get_ReplyType: DNReplyType;
    procedure set_ReplyType(value: DNReplyType);
    function get_Flags: DNAnnotationFlags;
    procedure set_Flags(value: DNAnnotationFlags);
    function get_Width: Double;
    procedure set_Width(value: Double);
    function get_Actions: DNPdfActionCollection;
    function get_Height: Double;
    procedure set_Height(value: Double);
    function get_Rect: DNPdf_Rectangle;
    procedure set_Rect(value: DNPdf_Rectangle);
    function get_Contents: string;
    procedure set_Contents(value: string);
    function get_Name: string;
    procedure set_Name(value: string);
    function get_Modified: DDN.mscorlib.DNDateTime;
    procedure set_Modified(value: DDN.mscorlib.DNDateTime);
    function get_Color: DNColor;
    procedure set_Color(value: DNColor);
    function get_Border: DNBorder;
    procedure set_Border(value: DNBorder);
    function get_ActiveState: string;
    procedure set_ActiveState(value: string);
    function get_Characteristics: DNCharacteristics;
    function get_States: DNAppearanceDictionary;
    function get_Alignment: DNTextAlignment;
    procedure set_Alignment(value: DNTextAlignment);
    function get_HorizontalAlignment: DNHorizontalAlignment;
    procedure set_HorizontalAlignment(value: DNHorizontalAlignment);
    function get_TextHorizontalAlignment: DNHorizontalAlignment;
    procedure set_TextHorizontalAlignment(value: DNHorizontalAlignment);
    function get_FullName: string;
    function get_Appearance: DNAppearanceDictionary;
    function get_PageIndex: Int32;
    function get_VerticalAlignment: DNVerticalAlignment;
    procedure set_VerticalAlignment(value: DNVerticalAlignment);
    function get_Margin: DNMarginInfo;
    procedure set_Margin(value: DNMarginInfo);
    function get_IsFirstParagraphInColumn: Boolean;
    procedure set_IsFirstParagraphInColumn(value: Boolean);
    function get_IsKeptWithNext: Boolean;
    procedure set_IsKeptWithNext(value: Boolean);
    function get_IsInNewPage: Boolean;
    procedure set_IsInNewPage(value: Boolean);
    function get_IsInLineParagraph: Boolean;
    procedure set_IsInLineParagraph(value: Boolean);
    function get_Hyperlink: DNHyperlink;
    procedure set_Hyperlink(value: DNHyperlink);
    function get_ZIndex: Int32;
    procedure set_ZIndex(value: Int32);

  { methods } 

    procedure Accept(visitor: DNAnnotationSelector);
    function GetMarkedText: string;
    function GetMarkedTextFragments: DNTextFragmentCollection;
    function GetRectangle(considerRotation: Boolean): DNPdf_Rectangle;
    procedure Flatten;
    function Clone: DDN.mscorlib.DNObject;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property AnnotationType: DNAnnotationType read get_AnnotationType;
    property QuadPoints: TArray<DNPoint> read get_QuadPoints write set_QuadPoints;
    property Title: string read get_Title write set_Title;
    property RichText: string read get_RichText write set_RichText;
    property CreationDate: DDN.mscorlib.DNDateTime read get_CreationDate;
    property Subject: string read get_Subject write set_Subject;
    property Popup: DNPopupAnnotation read get_Popup write set_Popup;
    property Opacity: Double read get_Opacity write set_Opacity;
    property InReplyTo: DNAnnotation read get_InReplyTo write set_InReplyTo;
    property ReplyType: DNReplyType read get_ReplyType write set_ReplyType;
    property Flags: DNAnnotationFlags read get_Flags write set_Flags;
    property Width: Double read get_Width write set_Width;
    property Actions: DNPdfActionCollection read get_Actions;
    property Height: Double read get_Height write set_Height;
    property Rect: DNPdf_Rectangle read get_Rect write set_Rect;
    property Contents: string read get_Contents write set_Contents;
    property Name: string read get_Name write set_Name;
    property Modified: DDN.mscorlib.DNDateTime read get_Modified write set_Modified;
    property Color: DNColor read get_Color write set_Color;
    property Border: DNBorder read get_Border write set_Border;
    property ActiveState: string read get_ActiveState write set_ActiveState;
    property Characteristics: DNCharacteristics read get_Characteristics;
    property States: DNAppearanceDictionary read get_States;
    property Alignment: DNTextAlignment read get_Alignment write set_Alignment;
    property HorizontalAlignment: DNHorizontalAlignment read get_HorizontalAlignment write set_HorizontalAlignment;
    property TextHorizontalAlignment: DNHorizontalAlignment read get_TextHorizontalAlignment write set_TextHorizontalAlignment;
    property FullName: string read get_FullName;
    property Appearance: DNAppearanceDictionary read get_Appearance;
    property PageIndex: Int32 read get_PageIndex;
    property VerticalAlignment: DNVerticalAlignment read get_VerticalAlignment write set_VerticalAlignment;
    property Margin: DNMarginInfo read get_Margin write set_Margin;
    property IsFirstParagraphInColumn: Boolean read get_IsFirstParagraphInColumn write set_IsFirstParagraphInColumn;
    property IsKeptWithNext: Boolean read get_IsKeptWithNext write set_IsKeptWithNext;
    property IsInNewPage: Boolean read get_IsInNewPage write set_IsInNewPage;
    property IsInLineParagraph: Boolean read get_IsInLineParagraph write set_IsInLineParagraph;
    property Hyperlink: DNHyperlink read get_Hyperlink write set_Hyperlink;
    property ZIndex: Int32 read get_ZIndex write set_ZIndex;
  end;

  TDNHighlightAnnotation = class(TDNGenericImport<DNHighlightAnnotationClass, DNHighlightAnnotation>) end;

  //-------------namespace: Aspose.Pdf.Annotations----------------
  DNSquigglyAnnotationClass = interface(DNTextMarkupAnnotationClass)
  ['{AC284DF8-F007-588D-A427-13471F31B9C0}']
  { constructors } 

    {class} function init(page: DNPage; rect: DNPdf_Rectangle): DNSquigglyAnnotation;

  end;

  [DNTypeName('Aspose.Pdf.Annotations.SquigglyAnnotation')]
  DNSquigglyAnnotation = interface(DNTextMarkupAnnotation)
  ['{A9B00E99-51A0-3A3E-9152-EB0A109FDDE6}']
  { getters & setters } 

    function get_AnnotationType: DNAnnotationType;
    function get_QuadPoints: TArray<DNPoint>;
    procedure set_QuadPoints(value: TArray<DNPoint>);
    function get_Title: string;
    procedure set_Title(value: string);
    function get_RichText: string;
    procedure set_RichText(value: string);
    function get_CreationDate: DDN.mscorlib.DNDateTime;
    function get_Subject: string;
    procedure set_Subject(value: string);
    function get_Popup: DNPopupAnnotation;
    procedure set_Popup(value: DNPopupAnnotation);
    function get_Opacity: Double;
    procedure set_Opacity(value: Double);
    function get_InReplyTo: DNAnnotation;
    procedure set_InReplyTo(value: DNAnnotation);
    function get_ReplyType: DNReplyType;
    procedure set_ReplyType(value: DNReplyType);
    function get_Flags: DNAnnotationFlags;
    procedure set_Flags(value: DNAnnotationFlags);
    function get_Width: Double;
    procedure set_Width(value: Double);
    function get_Actions: DNPdfActionCollection;
    function get_Height: Double;
    procedure set_Height(value: Double);
    function get_Rect: DNPdf_Rectangle;
    procedure set_Rect(value: DNPdf_Rectangle);
    function get_Contents: string;
    procedure set_Contents(value: string);
    function get_Name: string;
    procedure set_Name(value: string);
    function get_Modified: DDN.mscorlib.DNDateTime;
    procedure set_Modified(value: DDN.mscorlib.DNDateTime);
    function get_Color: DNColor;
    procedure set_Color(value: DNColor);
    function get_Border: DNBorder;
    procedure set_Border(value: DNBorder);
    function get_ActiveState: string;
    procedure set_ActiveState(value: string);
    function get_Characteristics: DNCharacteristics;
    function get_States: DNAppearanceDictionary;
    function get_Alignment: DNTextAlignment;
    procedure set_Alignment(value: DNTextAlignment);
    function get_HorizontalAlignment: DNHorizontalAlignment;
    procedure set_HorizontalAlignment(value: DNHorizontalAlignment);
    function get_TextHorizontalAlignment: DNHorizontalAlignment;
    procedure set_TextHorizontalAlignment(value: DNHorizontalAlignment);
    function get_FullName: string;
    function get_Appearance: DNAppearanceDictionary;
    function get_PageIndex: Int32;
    function get_VerticalAlignment: DNVerticalAlignment;
    procedure set_VerticalAlignment(value: DNVerticalAlignment);
    function get_Margin: DNMarginInfo;
    procedure set_Margin(value: DNMarginInfo);
    function get_IsFirstParagraphInColumn: Boolean;
    procedure set_IsFirstParagraphInColumn(value: Boolean);
    function get_IsKeptWithNext: Boolean;
    procedure set_IsKeptWithNext(value: Boolean);
    function get_IsInNewPage: Boolean;
    procedure set_IsInNewPage(value: Boolean);
    function get_IsInLineParagraph: Boolean;
    procedure set_IsInLineParagraph(value: Boolean);
    function get_Hyperlink: DNHyperlink;
    procedure set_Hyperlink(value: DNHyperlink);
    function get_ZIndex: Int32;
    procedure set_ZIndex(value: Int32);

  { methods } 

    procedure Accept(visitor: DNAnnotationSelector);
    function GetMarkedText: string;
    function GetMarkedTextFragments: DNTextFragmentCollection;
    function GetRectangle(considerRotation: Boolean): DNPdf_Rectangle;
    procedure Flatten;
    function Clone: DDN.mscorlib.DNObject;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property AnnotationType: DNAnnotationType read get_AnnotationType;
    property QuadPoints: TArray<DNPoint> read get_QuadPoints write set_QuadPoints;
    property Title: string read get_Title write set_Title;
    property RichText: string read get_RichText write set_RichText;
    property CreationDate: DDN.mscorlib.DNDateTime read get_CreationDate;
    property Subject: string read get_Subject write set_Subject;
    property Popup: DNPopupAnnotation read get_Popup write set_Popup;
    property Opacity: Double read get_Opacity write set_Opacity;
    property InReplyTo: DNAnnotation read get_InReplyTo write set_InReplyTo;
    property ReplyType: DNReplyType read get_ReplyType write set_ReplyType;
    property Flags: DNAnnotationFlags read get_Flags write set_Flags;
    property Width: Double read get_Width write set_Width;
    property Actions: DNPdfActionCollection read get_Actions;
    property Height: Double read get_Height write set_Height;
    property Rect: DNPdf_Rectangle read get_Rect write set_Rect;
    property Contents: string read get_Contents write set_Contents;
    property Name: string read get_Name write set_Name;
    property Modified: DDN.mscorlib.DNDateTime read get_Modified write set_Modified;
    property Color: DNColor read get_Color write set_Color;
    property Border: DNBorder read get_Border write set_Border;
    property ActiveState: string read get_ActiveState write set_ActiveState;
    property Characteristics: DNCharacteristics read get_Characteristics;
    property States: DNAppearanceDictionary read get_States;
    property Alignment: DNTextAlignment read get_Alignment write set_Alignment;
    property HorizontalAlignment: DNHorizontalAlignment read get_HorizontalAlignment write set_HorizontalAlignment;
    property TextHorizontalAlignment: DNHorizontalAlignment read get_TextHorizontalAlignment write set_TextHorizontalAlignment;
    property FullName: string read get_FullName;
    property Appearance: DNAppearanceDictionary read get_Appearance;
    property PageIndex: Int32 read get_PageIndex;
    property VerticalAlignment: DNVerticalAlignment read get_VerticalAlignment write set_VerticalAlignment;
    property Margin: DNMarginInfo read get_Margin write set_Margin;
    property IsFirstParagraphInColumn: Boolean read get_IsFirstParagraphInColumn write set_IsFirstParagraphInColumn;
    property IsKeptWithNext: Boolean read get_IsKeptWithNext write set_IsKeptWithNext;
    property IsInNewPage: Boolean read get_IsInNewPage write set_IsInNewPage;
    property IsInLineParagraph: Boolean read get_IsInLineParagraph write set_IsInLineParagraph;
    property Hyperlink: DNHyperlink read get_Hyperlink write set_Hyperlink;
    property ZIndex: Int32 read get_ZIndex write set_ZIndex;
  end;

  TDNSquigglyAnnotation = class(TDNGenericImport<DNSquigglyAnnotationClass, DNSquigglyAnnotation>) end;

  //-------------namespace: Aspose.Pdf.Annotations----------------
  DNStrikeOutAnnotationClass = interface(DNTextMarkupAnnotationClass)
  ['{6DD94AB6-6D86-562C-ABCF-62420629491B}']
  { constructors } 

    {class} function init(page: DNPage; rect: DNPdf_Rectangle): DNStrikeOutAnnotation;

  end;

  [DNTypeName('Aspose.Pdf.Annotations.StrikeOutAnnotation')]
  DNStrikeOutAnnotation = interface(DNTextMarkupAnnotation)
  ['{95E794B5-1602-3E2A-A52D-F6F0B00EBAAA}']
  { getters & setters } 

    function get_AnnotationType: DNAnnotationType;
    function get_QuadPoints: TArray<DNPoint>;
    procedure set_QuadPoints(value: TArray<DNPoint>);
    function get_Title: string;
    procedure set_Title(value: string);
    function get_RichText: string;
    procedure set_RichText(value: string);
    function get_CreationDate: DDN.mscorlib.DNDateTime;
    function get_Subject: string;
    procedure set_Subject(value: string);
    function get_Popup: DNPopupAnnotation;
    procedure set_Popup(value: DNPopupAnnotation);
    function get_Opacity: Double;
    procedure set_Opacity(value: Double);
    function get_InReplyTo: DNAnnotation;
    procedure set_InReplyTo(value: DNAnnotation);
    function get_ReplyType: DNReplyType;
    procedure set_ReplyType(value: DNReplyType);
    function get_Flags: DNAnnotationFlags;
    procedure set_Flags(value: DNAnnotationFlags);
    function get_Width: Double;
    procedure set_Width(value: Double);
    function get_Actions: DNPdfActionCollection;
    function get_Height: Double;
    procedure set_Height(value: Double);
    function get_Rect: DNPdf_Rectangle;
    procedure set_Rect(value: DNPdf_Rectangle);
    function get_Contents: string;
    procedure set_Contents(value: string);
    function get_Name: string;
    procedure set_Name(value: string);
    function get_Modified: DDN.mscorlib.DNDateTime;
    procedure set_Modified(value: DDN.mscorlib.DNDateTime);
    function get_Color: DNColor;
    procedure set_Color(value: DNColor);
    function get_Border: DNBorder;
    procedure set_Border(value: DNBorder);
    function get_ActiveState: string;
    procedure set_ActiveState(value: string);
    function get_Characteristics: DNCharacteristics;
    function get_States: DNAppearanceDictionary;
    function get_Alignment: DNTextAlignment;
    procedure set_Alignment(value: DNTextAlignment);
    function get_HorizontalAlignment: DNHorizontalAlignment;
    procedure set_HorizontalAlignment(value: DNHorizontalAlignment);
    function get_TextHorizontalAlignment: DNHorizontalAlignment;
    procedure set_TextHorizontalAlignment(value: DNHorizontalAlignment);
    function get_FullName: string;
    function get_Appearance: DNAppearanceDictionary;
    function get_PageIndex: Int32;
    function get_VerticalAlignment: DNVerticalAlignment;
    procedure set_VerticalAlignment(value: DNVerticalAlignment);
    function get_Margin: DNMarginInfo;
    procedure set_Margin(value: DNMarginInfo);
    function get_IsFirstParagraphInColumn: Boolean;
    procedure set_IsFirstParagraphInColumn(value: Boolean);
    function get_IsKeptWithNext: Boolean;
    procedure set_IsKeptWithNext(value: Boolean);
    function get_IsInNewPage: Boolean;
    procedure set_IsInNewPage(value: Boolean);
    function get_IsInLineParagraph: Boolean;
    procedure set_IsInLineParagraph(value: Boolean);
    function get_Hyperlink: DNHyperlink;
    procedure set_Hyperlink(value: DNHyperlink);
    function get_ZIndex: Int32;
    procedure set_ZIndex(value: Int32);

  { methods } 

    procedure Accept(visitor: DNAnnotationSelector);
    function GetMarkedText: string;
    function GetMarkedTextFragments: DNTextFragmentCollection;
    function GetRectangle(considerRotation: Boolean): DNPdf_Rectangle;
    procedure Flatten;
    function Clone: DDN.mscorlib.DNObject;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property AnnotationType: DNAnnotationType read get_AnnotationType;
    property QuadPoints: TArray<DNPoint> read get_QuadPoints write set_QuadPoints;
    property Title: string read get_Title write set_Title;
    property RichText: string read get_RichText write set_RichText;
    property CreationDate: DDN.mscorlib.DNDateTime read get_CreationDate;
    property Subject: string read get_Subject write set_Subject;
    property Popup: DNPopupAnnotation read get_Popup write set_Popup;
    property Opacity: Double read get_Opacity write set_Opacity;
    property InReplyTo: DNAnnotation read get_InReplyTo write set_InReplyTo;
    property ReplyType: DNReplyType read get_ReplyType write set_ReplyType;
    property Flags: DNAnnotationFlags read get_Flags write set_Flags;
    property Width: Double read get_Width write set_Width;
    property Actions: DNPdfActionCollection read get_Actions;
    property Height: Double read get_Height write set_Height;
    property Rect: DNPdf_Rectangle read get_Rect write set_Rect;
    property Contents: string read get_Contents write set_Contents;
    property Name: string read get_Name write set_Name;
    property Modified: DDN.mscorlib.DNDateTime read get_Modified write set_Modified;
    property Color: DNColor read get_Color write set_Color;
    property Border: DNBorder read get_Border write set_Border;
    property ActiveState: string read get_ActiveState write set_ActiveState;
    property Characteristics: DNCharacteristics read get_Characteristics;
    property States: DNAppearanceDictionary read get_States;
    property Alignment: DNTextAlignment read get_Alignment write set_Alignment;
    property HorizontalAlignment: DNHorizontalAlignment read get_HorizontalAlignment write set_HorizontalAlignment;
    property TextHorizontalAlignment: DNHorizontalAlignment read get_TextHorizontalAlignment write set_TextHorizontalAlignment;
    property FullName: string read get_FullName;
    property Appearance: DNAppearanceDictionary read get_Appearance;
    property PageIndex: Int32 read get_PageIndex;
    property VerticalAlignment: DNVerticalAlignment read get_VerticalAlignment write set_VerticalAlignment;
    property Margin: DNMarginInfo read get_Margin write set_Margin;
    property IsFirstParagraphInColumn: Boolean read get_IsFirstParagraphInColumn write set_IsFirstParagraphInColumn;
    property IsKeptWithNext: Boolean read get_IsKeptWithNext write set_IsKeptWithNext;
    property IsInNewPage: Boolean read get_IsInNewPage write set_IsInNewPage;
    property IsInLineParagraph: Boolean read get_IsInLineParagraph write set_IsInLineParagraph;
    property Hyperlink: DNHyperlink read get_Hyperlink write set_Hyperlink;
    property ZIndex: Int32 read get_ZIndex write set_ZIndex;
  end;

  TDNStrikeOutAnnotation = class(TDNGenericImport<DNStrikeOutAnnotationClass, DNStrikeOutAnnotation>) end;

  //-------------namespace: Aspose.Pdf.Annotations----------------
  DNUnderlineAnnotationClass = interface(DNTextMarkupAnnotationClass)
  ['{74E92D58-FF3E-5BE2-9A6F-42ED58B0B1B5}']
  { constructors } 

    {class} function init(page: DNPage; rect: DNPdf_Rectangle): DNUnderlineAnnotation;

  end;

  [DNTypeName('Aspose.Pdf.Annotations.UnderlineAnnotation')]
  DNUnderlineAnnotation = interface(DNTextMarkupAnnotation)
  ['{197E31C5-50F2-3139-9443-0CEAA68D7383}']
  { getters & setters } 

    function get_AnnotationType: DNAnnotationType;
    function get_QuadPoints: TArray<DNPoint>;
    procedure set_QuadPoints(value: TArray<DNPoint>);
    function get_Title: string;
    procedure set_Title(value: string);
    function get_RichText: string;
    procedure set_RichText(value: string);
    function get_CreationDate: DDN.mscorlib.DNDateTime;
    function get_Subject: string;
    procedure set_Subject(value: string);
    function get_Popup: DNPopupAnnotation;
    procedure set_Popup(value: DNPopupAnnotation);
    function get_Opacity: Double;
    procedure set_Opacity(value: Double);
    function get_InReplyTo: DNAnnotation;
    procedure set_InReplyTo(value: DNAnnotation);
    function get_ReplyType: DNReplyType;
    procedure set_ReplyType(value: DNReplyType);
    function get_Flags: DNAnnotationFlags;
    procedure set_Flags(value: DNAnnotationFlags);
    function get_Width: Double;
    procedure set_Width(value: Double);
    function get_Actions: DNPdfActionCollection;
    function get_Height: Double;
    procedure set_Height(value: Double);
    function get_Rect: DNPdf_Rectangle;
    procedure set_Rect(value: DNPdf_Rectangle);
    function get_Contents: string;
    procedure set_Contents(value: string);
    function get_Name: string;
    procedure set_Name(value: string);
    function get_Modified: DDN.mscorlib.DNDateTime;
    procedure set_Modified(value: DDN.mscorlib.DNDateTime);
    function get_Color: DNColor;
    procedure set_Color(value: DNColor);
    function get_Border: DNBorder;
    procedure set_Border(value: DNBorder);
    function get_ActiveState: string;
    procedure set_ActiveState(value: string);
    function get_Characteristics: DNCharacteristics;
    function get_States: DNAppearanceDictionary;
    function get_Alignment: DNTextAlignment;
    procedure set_Alignment(value: DNTextAlignment);
    function get_HorizontalAlignment: DNHorizontalAlignment;
    procedure set_HorizontalAlignment(value: DNHorizontalAlignment);
    function get_TextHorizontalAlignment: DNHorizontalAlignment;
    procedure set_TextHorizontalAlignment(value: DNHorizontalAlignment);
    function get_FullName: string;
    function get_Appearance: DNAppearanceDictionary;
    function get_PageIndex: Int32;
    function get_VerticalAlignment: DNVerticalAlignment;
    procedure set_VerticalAlignment(value: DNVerticalAlignment);
    function get_Margin: DNMarginInfo;
    procedure set_Margin(value: DNMarginInfo);
    function get_IsFirstParagraphInColumn: Boolean;
    procedure set_IsFirstParagraphInColumn(value: Boolean);
    function get_IsKeptWithNext: Boolean;
    procedure set_IsKeptWithNext(value: Boolean);
    function get_IsInNewPage: Boolean;
    procedure set_IsInNewPage(value: Boolean);
    function get_IsInLineParagraph: Boolean;
    procedure set_IsInLineParagraph(value: Boolean);
    function get_Hyperlink: DNHyperlink;
    procedure set_Hyperlink(value: DNHyperlink);
    function get_ZIndex: Int32;
    procedure set_ZIndex(value: Int32);

  { methods } 

    procedure Accept(visitor: DNAnnotationSelector);
    function GetMarkedText: string;
    function GetMarkedTextFragments: DNTextFragmentCollection;
    function GetRectangle(considerRotation: Boolean): DNPdf_Rectangle;
    procedure Flatten;
    function Clone: DDN.mscorlib.DNObject;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property AnnotationType: DNAnnotationType read get_AnnotationType;
    property QuadPoints: TArray<DNPoint> read get_QuadPoints write set_QuadPoints;
    property Title: string read get_Title write set_Title;
    property RichText: string read get_RichText write set_RichText;
    property CreationDate: DDN.mscorlib.DNDateTime read get_CreationDate;
    property Subject: string read get_Subject write set_Subject;
    property Popup: DNPopupAnnotation read get_Popup write set_Popup;
    property Opacity: Double read get_Opacity write set_Opacity;
    property InReplyTo: DNAnnotation read get_InReplyTo write set_InReplyTo;
    property ReplyType: DNReplyType read get_ReplyType write set_ReplyType;
    property Flags: DNAnnotationFlags read get_Flags write set_Flags;
    property Width: Double read get_Width write set_Width;
    property Actions: DNPdfActionCollection read get_Actions;
    property Height: Double read get_Height write set_Height;
    property Rect: DNPdf_Rectangle read get_Rect write set_Rect;
    property Contents: string read get_Contents write set_Contents;
    property Name: string read get_Name write set_Name;
    property Modified: DDN.mscorlib.DNDateTime read get_Modified write set_Modified;
    property Color: DNColor read get_Color write set_Color;
    property Border: DNBorder read get_Border write set_Border;
    property ActiveState: string read get_ActiveState write set_ActiveState;
    property Characteristics: DNCharacteristics read get_Characteristics;
    property States: DNAppearanceDictionary read get_States;
    property Alignment: DNTextAlignment read get_Alignment write set_Alignment;
    property HorizontalAlignment: DNHorizontalAlignment read get_HorizontalAlignment write set_HorizontalAlignment;
    property TextHorizontalAlignment: DNHorizontalAlignment read get_TextHorizontalAlignment write set_TextHorizontalAlignment;
    property FullName: string read get_FullName;
    property Appearance: DNAppearanceDictionary read get_Appearance;
    property PageIndex: Int32 read get_PageIndex;
    property VerticalAlignment: DNVerticalAlignment read get_VerticalAlignment write set_VerticalAlignment;
    property Margin: DNMarginInfo read get_Margin write set_Margin;
    property IsFirstParagraphInColumn: Boolean read get_IsFirstParagraphInColumn write set_IsFirstParagraphInColumn;
    property IsKeptWithNext: Boolean read get_IsKeptWithNext write set_IsKeptWithNext;
    property IsInNewPage: Boolean read get_IsInNewPage write set_IsInNewPage;
    property IsInLineParagraph: Boolean read get_IsInLineParagraph write set_IsInLineParagraph;
    property Hyperlink: DNHyperlink read get_Hyperlink write set_Hyperlink;
    property ZIndex: Int32 read get_ZIndex write set_ZIndex;
  end;

  TDNUnderlineAnnotation = class(TDNGenericImport<DNUnderlineAnnotationClass, DNUnderlineAnnotation>) end;

  //-------------namespace: Aspose.Pdf.Annotations----------------
  DNMovieAnnotationClass = interface(DNAnnotationClass)
  ['{CE02F63C-A23F-51D6-AB67-F3CFE510901B}']
  { constructors } 

    {class} function init(document: DNDocument; movieFile: string): DNMovieAnnotation; overload;
    {class} function init(page: DNPage; rect: DNPdf_Rectangle; movieFile: string): DNMovieAnnotation; overload;

  end;

  [DNTypeName('Aspose.Pdf.Annotations.MovieAnnotation')]
  DNMovieAnnotation = interface(DNAnnotation)
  ['{1B50D90F-5158-3BD4-9221-8FF1D7EE2A96}']
  { getters & setters } 

    function get_Title: string;
    procedure set_Title(value: string);
    function get_File: DNFileSpecification;
    procedure set_File(value: DNFileSpecification);
    function get_Poster: Boolean;
    procedure set_Poster(value: Boolean);
    function get_Aspect: DNPoint;
    procedure set_Aspect(value: DNPoint);
    function get_Rotate: Int32;
    procedure set_Rotate(value: Int32);
    function get_AnnotationType: DNAnnotationType;
    function get_Flags: DNAnnotationFlags;
    procedure set_Flags(value: DNAnnotationFlags);
    function get_Width: Double;
    procedure set_Width(value: Double);
    function get_Actions: DNPdfActionCollection;
    function get_Height: Double;
    procedure set_Height(value: Double);
    function get_Rect: DNPdf_Rectangle;
    procedure set_Rect(value: DNPdf_Rectangle);
    function get_Contents: string;
    procedure set_Contents(value: string);
    function get_Name: string;
    procedure set_Name(value: string);
    function get_Modified: DDN.mscorlib.DNDateTime;
    procedure set_Modified(value: DDN.mscorlib.DNDateTime);
    function get_Color: DNColor;
    procedure set_Color(value: DNColor);
    function get_Border: DNBorder;
    procedure set_Border(value: DNBorder);
    function get_ActiveState: string;
    procedure set_ActiveState(value: string);
    function get_Characteristics: DNCharacteristics;
    function get_States: DNAppearanceDictionary;
    function get_Alignment: DNTextAlignment;
    procedure set_Alignment(value: DNTextAlignment);
    function get_HorizontalAlignment: DNHorizontalAlignment;
    procedure set_HorizontalAlignment(value: DNHorizontalAlignment);
    function get_TextHorizontalAlignment: DNHorizontalAlignment;
    procedure set_TextHorizontalAlignment(value: DNHorizontalAlignment);
    function get_FullName: string;
    function get_Appearance: DNAppearanceDictionary;
    function get_PageIndex: Int32;
    function get_VerticalAlignment: DNVerticalAlignment;
    procedure set_VerticalAlignment(value: DNVerticalAlignment);
    function get_Margin: DNMarginInfo;
    procedure set_Margin(value: DNMarginInfo);
    function get_IsFirstParagraphInColumn: Boolean;
    procedure set_IsFirstParagraphInColumn(value: Boolean);
    function get_IsKeptWithNext: Boolean;
    procedure set_IsKeptWithNext(value: Boolean);
    function get_IsInNewPage: Boolean;
    procedure set_IsInNewPage(value: Boolean);
    function get_IsInLineParagraph: Boolean;
    procedure set_IsInLineParagraph(value: Boolean);
    function get_Hyperlink: DNHyperlink;
    procedure set_Hyperlink(value: DNHyperlink);
    function get_ZIndex: Int32;
    procedure set_ZIndex(value: Int32);

  { methods } 

    procedure Accept(visitor: DNAnnotationSelector);
    function GetRectangle(considerRotation: Boolean): DNPdf_Rectangle;
    procedure Flatten;
    function Clone: DDN.mscorlib.DNObject;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Title: string read get_Title write set_Title;
    property &File: DNFileSpecification read get_File write set_File;
    property Poster: Boolean read get_Poster write set_Poster;
    property Aspect: DNPoint read get_Aspect write set_Aspect;
    property Rotate: Int32 read get_Rotate write set_Rotate;
    property AnnotationType: DNAnnotationType read get_AnnotationType;
    property Flags: DNAnnotationFlags read get_Flags write set_Flags;
    property Width: Double read get_Width write set_Width;
    property Actions: DNPdfActionCollection read get_Actions;
    property Height: Double read get_Height write set_Height;
    property Rect: DNPdf_Rectangle read get_Rect write set_Rect;
    property Contents: string read get_Contents write set_Contents;
    property Name: string read get_Name write set_Name;
    property Modified: DDN.mscorlib.DNDateTime read get_Modified write set_Modified;
    property Color: DNColor read get_Color write set_Color;
    property Border: DNBorder read get_Border write set_Border;
    property ActiveState: string read get_ActiveState write set_ActiveState;
    property Characteristics: DNCharacteristics read get_Characteristics;
    property States: DNAppearanceDictionary read get_States;
    property Alignment: DNTextAlignment read get_Alignment write set_Alignment;
    property HorizontalAlignment: DNHorizontalAlignment read get_HorizontalAlignment write set_HorizontalAlignment;
    property TextHorizontalAlignment: DNHorizontalAlignment read get_TextHorizontalAlignment write set_TextHorizontalAlignment;
    property FullName: string read get_FullName;
    property Appearance: DNAppearanceDictionary read get_Appearance;
    property PageIndex: Int32 read get_PageIndex;
    property VerticalAlignment: DNVerticalAlignment read get_VerticalAlignment write set_VerticalAlignment;
    property Margin: DNMarginInfo read get_Margin write set_Margin;
    property IsFirstParagraphInColumn: Boolean read get_IsFirstParagraphInColumn write set_IsFirstParagraphInColumn;
    property IsKeptWithNext: Boolean read get_IsKeptWithNext write set_IsKeptWithNext;
    property IsInNewPage: Boolean read get_IsInNewPage write set_IsInNewPage;
    property IsInLineParagraph: Boolean read get_IsInLineParagraph write set_IsInLineParagraph;
    property Hyperlink: DNHyperlink read get_Hyperlink write set_Hyperlink;
    property ZIndex: Int32 read get_ZIndex write set_ZIndex;
  end;

  TDNMovieAnnotation = class(TDNGenericImport<DNMovieAnnotationClass, DNMovieAnnotation>) end;

  //-------------namespace: Aspose.Pdf.Annotations----------------
  DNPDF3DAnnotationClass = interface(DNAnnotationClass)
  ['{9A4B3703-DB4B-58E2-A1A6-A693C757293E}']
  { constructors } 

    {class} function init(page: DNPage; rect: DNPdf_Rectangle; pdf3DArtwork: DNPDF3DArtwork): DNPDF3DAnnotation; overload;
    {class} function init(page: DNPage; rect: DNPdf_Rectangle; pdf3DArtwork: DNPDF3DArtwork; activation: DNPDF3DActivation): DNPDF3DAnnotation; overload;

  end;

  [DNTypeName('Aspose.Pdf.Annotations.PDF3DAnnotation')]
  DNPDF3DAnnotation = interface(DNAnnotation)
  ['{DC780085-F5F5-3C08-A935-5707864641D0}']
  { getters & setters } 

    function get_Pdf3DArtwork: DNPDF3DArtwork;
    function get_LightingScheme: DNPDF3DLightingScheme;
    function get_Content: DNPDF3DContent;
    procedure set_Content(value: DNPDF3DContent);
    function get_RenderMode: DNPDF3DRenderMode;
    function get_ViewArray: DNPDF3DViewArray;
    function get_AnnotationType: DNAnnotationType;
    function get_Flags: DNAnnotationFlags;
    procedure set_Flags(value: DNAnnotationFlags);
    function get_Width: Double;
    procedure set_Width(value: Double);
    function get_Actions: DNPdfActionCollection;
    function get_Height: Double;
    procedure set_Height(value: Double);
    function get_Rect: DNPdf_Rectangle;
    procedure set_Rect(value: DNPdf_Rectangle);
    function get_Contents: string;
    procedure set_Contents(value: string);
    function get_Name: string;
    procedure set_Name(value: string);
    function get_Modified: DDN.mscorlib.DNDateTime;
    procedure set_Modified(value: DDN.mscorlib.DNDateTime);
    function get_Color: DNColor;
    procedure set_Color(value: DNColor);
    function get_Border: DNBorder;
    procedure set_Border(value: DNBorder);
    function get_ActiveState: string;
    procedure set_ActiveState(value: string);
    function get_Characteristics: DNCharacteristics;
    function get_States: DNAppearanceDictionary;
    function get_Alignment: DNTextAlignment;
    procedure set_Alignment(value: DNTextAlignment);
    function get_HorizontalAlignment: DNHorizontalAlignment;
    procedure set_HorizontalAlignment(value: DNHorizontalAlignment);
    function get_TextHorizontalAlignment: DNHorizontalAlignment;
    procedure set_TextHorizontalAlignment(value: DNHorizontalAlignment);
    function get_FullName: string;
    function get_Appearance: DNAppearanceDictionary;
    function get_PageIndex: Int32;
    function get_VerticalAlignment: DNVerticalAlignment;
    procedure set_VerticalAlignment(value: DNVerticalAlignment);
    function get_Margin: DNMarginInfo;
    procedure set_Margin(value: DNMarginInfo);
    function get_IsFirstParagraphInColumn: Boolean;
    procedure set_IsFirstParagraphInColumn(value: Boolean);
    function get_IsKeptWithNext: Boolean;
    procedure set_IsKeptWithNext(value: Boolean);
    function get_IsInNewPage: Boolean;
    procedure set_IsInNewPage(value: Boolean);
    function get_IsInLineParagraph: Boolean;
    procedure set_IsInLineParagraph(value: Boolean);
    function get_Hyperlink: DNHyperlink;
    procedure set_Hyperlink(value: DNHyperlink);
    function get_ZIndex: Int32;
    procedure set_ZIndex(value: Int32);

  { methods } 

    procedure SetDefaultViewIndex(index: Int32);
    procedure Accept(visitor: DNAnnotationSelector);
    procedure SetImagePreview(filename: string); overload;
    procedure SetImagePreview(image: DDN.mscorlib.DNStream); overload;
    procedure ClearImagePreview;
    function GetImagePreview: DDN.mscorlib.DNStream;
    function GetRectangle(considerRotation: Boolean): DNPdf_Rectangle;
    procedure Flatten;
    function Clone: DDN.mscorlib.DNObject;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Pdf3DArtwork: DNPDF3DArtwork read get_Pdf3DArtwork;
    property LightingScheme: DNPDF3DLightingScheme read get_LightingScheme;
    property Content: DNPDF3DContent read get_Content write set_Content;
    property RenderMode: DNPDF3DRenderMode read get_RenderMode;
    property ViewArray: DNPDF3DViewArray read get_ViewArray;
    property AnnotationType: DNAnnotationType read get_AnnotationType;
    property Flags: DNAnnotationFlags read get_Flags write set_Flags;
    property Width: Double read get_Width write set_Width;
    property Actions: DNPdfActionCollection read get_Actions;
    property Height: Double read get_Height write set_Height;
    property Rect: DNPdf_Rectangle read get_Rect write set_Rect;
    property Contents: string read get_Contents write set_Contents;
    property Name: string read get_Name write set_Name;
    property Modified: DDN.mscorlib.DNDateTime read get_Modified write set_Modified;
    property Color: DNColor read get_Color write set_Color;
    property Border: DNBorder read get_Border write set_Border;
    property ActiveState: string read get_ActiveState write set_ActiveState;
    property Characteristics: DNCharacteristics read get_Characteristics;
    property States: DNAppearanceDictionary read get_States;
    property Alignment: DNTextAlignment read get_Alignment write set_Alignment;
    property HorizontalAlignment: DNHorizontalAlignment read get_HorizontalAlignment write set_HorizontalAlignment;
    property TextHorizontalAlignment: DNHorizontalAlignment read get_TextHorizontalAlignment write set_TextHorizontalAlignment;
    property FullName: string read get_FullName;
    property Appearance: DNAppearanceDictionary read get_Appearance;
    property PageIndex: Int32 read get_PageIndex;
    property VerticalAlignment: DNVerticalAlignment read get_VerticalAlignment write set_VerticalAlignment;
    property Margin: DNMarginInfo read get_Margin write set_Margin;
    property IsFirstParagraphInColumn: Boolean read get_IsFirstParagraphInColumn write set_IsFirstParagraphInColumn;
    property IsKeptWithNext: Boolean read get_IsKeptWithNext write set_IsKeptWithNext;
    property IsInNewPage: Boolean read get_IsInNewPage write set_IsInNewPage;
    property IsInLineParagraph: Boolean read get_IsInLineParagraph write set_IsInLineParagraph;
    property Hyperlink: DNHyperlink read get_Hyperlink write set_Hyperlink;
    property ZIndex: Int32 read get_ZIndex write set_ZIndex;
  end;

  TDNPDF3DAnnotation = class(TDNGenericImport<DNPDF3DAnnotationClass, DNPDF3DAnnotation>) end;

  //-------------namespace: Aspose.Pdf.Annotations----------------
  DNPopupAnnotationClass = interface(DNAnnotationClass)
  ['{FD11DBE0-8CC6-58A0-859F-0635C69C9D03}']
  { constructors } 

    {class} function init(document: DNDocument): DNPopupAnnotation; overload;
    {class} function init(page: DNPage; rect: DNPdf_Rectangle): DNPopupAnnotation; overload;

  end;

  [DNTypeName('Aspose.Pdf.Annotations.PopupAnnotation')]
  DNPopupAnnotation = interface(DNAnnotation)
  ['{A1C585C8-1A6B-3C56-96FC-A4827A9DA782}']
  { getters & setters } 

    function get_Open: Boolean;
    procedure set_Open(value: Boolean);
    function get_Parent: DNAnnotation;
    procedure set_Parent(value: DNAnnotation);
    function get_AnnotationType: DNAnnotationType;
    function get_Flags: DNAnnotationFlags;
    procedure set_Flags(value: DNAnnotationFlags);
    function get_Width: Double;
    procedure set_Width(value: Double);
    function get_Actions: DNPdfActionCollection;
    function get_Height: Double;
    procedure set_Height(value: Double);
    function get_Rect: DNPdf_Rectangle;
    procedure set_Rect(value: DNPdf_Rectangle);
    function get_Contents: string;
    procedure set_Contents(value: string);
    function get_Name: string;
    procedure set_Name(value: string);
    function get_Modified: DDN.mscorlib.DNDateTime;
    procedure set_Modified(value: DDN.mscorlib.DNDateTime);
    function get_Color: DNColor;
    procedure set_Color(value: DNColor);
    function get_Border: DNBorder;
    procedure set_Border(value: DNBorder);
    function get_ActiveState: string;
    procedure set_ActiveState(value: string);
    function get_Characteristics: DNCharacteristics;
    function get_States: DNAppearanceDictionary;
    function get_Alignment: DNTextAlignment;
    procedure set_Alignment(value: DNTextAlignment);
    function get_HorizontalAlignment: DNHorizontalAlignment;
    procedure set_HorizontalAlignment(value: DNHorizontalAlignment);
    function get_TextHorizontalAlignment: DNHorizontalAlignment;
    procedure set_TextHorizontalAlignment(value: DNHorizontalAlignment);
    function get_FullName: string;
    function get_Appearance: DNAppearanceDictionary;
    function get_PageIndex: Int32;
    function get_VerticalAlignment: DNVerticalAlignment;
    procedure set_VerticalAlignment(value: DNVerticalAlignment);
    function get_Margin: DNMarginInfo;
    procedure set_Margin(value: DNMarginInfo);
    function get_IsFirstParagraphInColumn: Boolean;
    procedure set_IsFirstParagraphInColumn(value: Boolean);
    function get_IsKeptWithNext: Boolean;
    procedure set_IsKeptWithNext(value: Boolean);
    function get_IsInNewPage: Boolean;
    procedure set_IsInNewPage(value: Boolean);
    function get_IsInLineParagraph: Boolean;
    procedure set_IsInLineParagraph(value: Boolean);
    function get_Hyperlink: DNHyperlink;
    procedure set_Hyperlink(value: DNHyperlink);
    function get_ZIndex: Int32;
    procedure set_ZIndex(value: Int32);

  { methods } 

    procedure Accept(visitor: DNAnnotationSelector);
    function GetRectangle(considerRotation: Boolean): DNPdf_Rectangle;
    procedure Flatten;
    function Clone: DDN.mscorlib.DNObject;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Open: Boolean read get_Open write set_Open;
    property Parent: DNAnnotation read get_Parent write set_Parent;
    property AnnotationType: DNAnnotationType read get_AnnotationType;
    property Flags: DNAnnotationFlags read get_Flags write set_Flags;
    property Width: Double read get_Width write set_Width;
    property Actions: DNPdfActionCollection read get_Actions;
    property Height: Double read get_Height write set_Height;
    property Rect: DNPdf_Rectangle read get_Rect write set_Rect;
    property Contents: string read get_Contents write set_Contents;
    property Name: string read get_Name write set_Name;
    property Modified: DDN.mscorlib.DNDateTime read get_Modified write set_Modified;
    property Color: DNColor read get_Color write set_Color;
    property Border: DNBorder read get_Border write set_Border;
    property ActiveState: string read get_ActiveState write set_ActiveState;
    property Characteristics: DNCharacteristics read get_Characteristics;
    property States: DNAppearanceDictionary read get_States;
    property Alignment: DNTextAlignment read get_Alignment write set_Alignment;
    property HorizontalAlignment: DNHorizontalAlignment read get_HorizontalAlignment write set_HorizontalAlignment;
    property TextHorizontalAlignment: DNHorizontalAlignment read get_TextHorizontalAlignment write set_TextHorizontalAlignment;
    property FullName: string read get_FullName;
    property Appearance: DNAppearanceDictionary read get_Appearance;
    property PageIndex: Int32 read get_PageIndex;
    property VerticalAlignment: DNVerticalAlignment read get_VerticalAlignment write set_VerticalAlignment;
    property Margin: DNMarginInfo read get_Margin write set_Margin;
    property IsFirstParagraphInColumn: Boolean read get_IsFirstParagraphInColumn write set_IsFirstParagraphInColumn;
    property IsKeptWithNext: Boolean read get_IsKeptWithNext write set_IsKeptWithNext;
    property IsInNewPage: Boolean read get_IsInNewPage write set_IsInNewPage;
    property IsInLineParagraph: Boolean read get_IsInLineParagraph write set_IsInLineParagraph;
    property Hyperlink: DNHyperlink read get_Hyperlink write set_Hyperlink;
    property ZIndex: Int32 read get_ZIndex write set_ZIndex;
  end;

  TDNPopupAnnotation = class(TDNGenericImport<DNPopupAnnotationClass, DNPopupAnnotation>) end;

  //-------------namespace: Aspose.Pdf.Annotations----------------
  DNRichMediaAnnotationClass = interface(DNAnnotationClass)
  ['{E6D1C60F-5607-537E-9DF5-73D185153517}']
  { constructors } 

    {class} function init(page: DNPage; rect: DNPdf_Rectangle): DNRichMediaAnnotation;

  end;

  [DNTypeName('Aspose.Pdf.Annotations.RichMediaAnnotation')]
  DNRichMediaAnnotation = interface(DNAnnotation)
  ['{C64F8A13-45D2-3997-BABC-DCCDC974D34A}']
  { getters & setters } 

    function get_AnnotationType: DNAnnotationType;
    function get_CustomPlayer: DDN.mscorlib.DNStream;
    procedure set_CustomPlayer(value: DDN.mscorlib.DNStream);
    function get_CustomFlashVariables: string;
    procedure set_CustomFlashVariables(value: string);
    function get_Content: DDN.mscorlib.DNStream;
    function get_Type: DNRichMediaAnnotation_ContentType;
    procedure set_Type(value: DNRichMediaAnnotation_ContentType);
    function get_ActivateOn: DNRichMediaAnnotation_ActivationEvent;
    procedure set_ActivateOn(value: DNRichMediaAnnotation_ActivationEvent);
    function get_Flags: DNAnnotationFlags;
    procedure set_Flags(value: DNAnnotationFlags);
    function get_Width: Double;
    procedure set_Width(value: Double);
    function get_Actions: DNPdfActionCollection;
    function get_Height: Double;
    procedure set_Height(value: Double);
    function get_Rect: DNPdf_Rectangle;
    procedure set_Rect(value: DNPdf_Rectangle);
    function get_Contents: string;
    procedure set_Contents(value: string);
    function get_Name: string;
    procedure set_Name(value: string);
    function get_Modified: DDN.mscorlib.DNDateTime;
    procedure set_Modified(value: DDN.mscorlib.DNDateTime);
    function get_Color: DNColor;
    procedure set_Color(value: DNColor);
    function get_Border: DNBorder;
    procedure set_Border(value: DNBorder);
    function get_ActiveState: string;
    procedure set_ActiveState(value: string);
    function get_Characteristics: DNCharacteristics;
    function get_States: DNAppearanceDictionary;
    function get_Alignment: DNTextAlignment;
    procedure set_Alignment(value: DNTextAlignment);
    function get_HorizontalAlignment: DNHorizontalAlignment;
    procedure set_HorizontalAlignment(value: DNHorizontalAlignment);
    function get_TextHorizontalAlignment: DNHorizontalAlignment;
    procedure set_TextHorizontalAlignment(value: DNHorizontalAlignment);
    function get_FullName: string;
    function get_Appearance: DNAppearanceDictionary;
    function get_PageIndex: Int32;
    function get_VerticalAlignment: DNVerticalAlignment;
    procedure set_VerticalAlignment(value: DNVerticalAlignment);
    function get_Margin: DNMarginInfo;
    procedure set_Margin(value: DNMarginInfo);
    function get_IsFirstParagraphInColumn: Boolean;
    procedure set_IsFirstParagraphInColumn(value: Boolean);
    function get_IsKeptWithNext: Boolean;
    procedure set_IsKeptWithNext(value: Boolean);
    function get_IsInNewPage: Boolean;
    procedure set_IsInNewPage(value: Boolean);
    function get_IsInLineParagraph: Boolean;
    procedure set_IsInLineParagraph(value: Boolean);
    function get_Hyperlink: DNHyperlink;
    procedure set_Hyperlink(value: DNHyperlink);
    function get_ZIndex: Int32;
    procedure set_ZIndex(value: Int32);

  { methods } 

    procedure Accept(visitor: DNAnnotationSelector);
    procedure AddCustomData(name: string; data: DDN.mscorlib.DNStream);
    procedure SetContent(fileName: string; audio: DDN.mscorlib.DNStream);
    procedure SetPoster(imageStream: DDN.mscorlib.DNStream);
    procedure Update;
    function GetRectangle(considerRotation: Boolean): DNPdf_Rectangle;
    procedure Flatten;
    function Clone: DDN.mscorlib.DNObject;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property AnnotationType: DNAnnotationType read get_AnnotationType;
    property CustomPlayer: DDN.mscorlib.DNStream read get_CustomPlayer write set_CustomPlayer;
    property CustomFlashVariables: string read get_CustomFlashVariables write set_CustomFlashVariables;
    property Content: DDN.mscorlib.DNStream read get_Content;
    property &Type: DNRichMediaAnnotation_ContentType read get_Type write set_Type;
    property ActivateOn: DNRichMediaAnnotation_ActivationEvent read get_ActivateOn write set_ActivateOn;
    property Flags: DNAnnotationFlags read get_Flags write set_Flags;
    property Width: Double read get_Width write set_Width;
    property Actions: DNPdfActionCollection read get_Actions;
    property Height: Double read get_Height write set_Height;
    property Rect: DNPdf_Rectangle read get_Rect write set_Rect;
    property Contents: string read get_Contents write set_Contents;
    property Name: string read get_Name write set_Name;
    property Modified: DDN.mscorlib.DNDateTime read get_Modified write set_Modified;
    property Color: DNColor read get_Color write set_Color;
    property Border: DNBorder read get_Border write set_Border;
    property ActiveState: string read get_ActiveState write set_ActiveState;
    property Characteristics: DNCharacteristics read get_Characteristics;
    property States: DNAppearanceDictionary read get_States;
    property Alignment: DNTextAlignment read get_Alignment write set_Alignment;
    property HorizontalAlignment: DNHorizontalAlignment read get_HorizontalAlignment write set_HorizontalAlignment;
    property TextHorizontalAlignment: DNHorizontalAlignment read get_TextHorizontalAlignment write set_TextHorizontalAlignment;
    property FullName: string read get_FullName;
    property Appearance: DNAppearanceDictionary read get_Appearance;
    property PageIndex: Int32 read get_PageIndex;
    property VerticalAlignment: DNVerticalAlignment read get_VerticalAlignment write set_VerticalAlignment;
    property Margin: DNMarginInfo read get_Margin write set_Margin;
    property IsFirstParagraphInColumn: Boolean read get_IsFirstParagraphInColumn write set_IsFirstParagraphInColumn;
    property IsKeptWithNext: Boolean read get_IsKeptWithNext write set_IsKeptWithNext;
    property IsInNewPage: Boolean read get_IsInNewPage write set_IsInNewPage;
    property IsInLineParagraph: Boolean read get_IsInLineParagraph write set_IsInLineParagraph;
    property Hyperlink: DNHyperlink read get_Hyperlink write set_Hyperlink;
    property ZIndex: Int32 read get_ZIndex write set_ZIndex;
  end;

  TDNRichMediaAnnotation = class(TDNGenericImport<DNRichMediaAnnotationClass, DNRichMediaAnnotation>) end;

  //-------------namespace: Aspose.Pdf.Annotations----------------
  DNScreenAnnotationClass = interface(DNAnnotationClass)
  ['{8FA8E7C2-55FA-5169-B547-A70760573EA7}']
  { constructors } 

    {class} function init(page: DNPage; rect: DNPdf_Rectangle; mediaFile: string): DNScreenAnnotation;

  end;

  [DNTypeName('Aspose.Pdf.Annotations.ScreenAnnotation')]
  DNScreenAnnotation = interface(DNAnnotation)
  ['{A8F1DF08-C487-337A-A6AB-1962C683B953}']
  { getters & setters } 

    function get_Title: string;
    procedure set_Title(value: string);
    function get_Action: DNPdfAction;
    function get_AnnotationType: DNAnnotationType;
    function get_Flags: DNAnnotationFlags;
    procedure set_Flags(value: DNAnnotationFlags);
    function get_Width: Double;
    procedure set_Width(value: Double);
    function get_Actions: DNPdfActionCollection;
    function get_Height: Double;
    procedure set_Height(value: Double);
    function get_Rect: DNPdf_Rectangle;
    procedure set_Rect(value: DNPdf_Rectangle);
    function get_Contents: string;
    procedure set_Contents(value: string);
    function get_Name: string;
    procedure set_Name(value: string);
    function get_Modified: DDN.mscorlib.DNDateTime;
    procedure set_Modified(value: DDN.mscorlib.DNDateTime);
    function get_Color: DNColor;
    procedure set_Color(value: DNColor);
    function get_Border: DNBorder;
    procedure set_Border(value: DNBorder);
    function get_ActiveState: string;
    procedure set_ActiveState(value: string);
    function get_Characteristics: DNCharacteristics;
    function get_States: DNAppearanceDictionary;
    function get_Alignment: DNTextAlignment;
    procedure set_Alignment(value: DNTextAlignment);
    function get_HorizontalAlignment: DNHorizontalAlignment;
    procedure set_HorizontalAlignment(value: DNHorizontalAlignment);
    function get_TextHorizontalAlignment: DNHorizontalAlignment;
    procedure set_TextHorizontalAlignment(value: DNHorizontalAlignment);
    function get_FullName: string;
    function get_Appearance: DNAppearanceDictionary;
    function get_PageIndex: Int32;
    function get_VerticalAlignment: DNVerticalAlignment;
    procedure set_VerticalAlignment(value: DNVerticalAlignment);
    function get_Margin: DNMarginInfo;
    procedure set_Margin(value: DNMarginInfo);
    function get_IsFirstParagraphInColumn: Boolean;
    procedure set_IsFirstParagraphInColumn(value: Boolean);
    function get_IsKeptWithNext: Boolean;
    procedure set_IsKeptWithNext(value: Boolean);
    function get_IsInNewPage: Boolean;
    procedure set_IsInNewPage(value: Boolean);
    function get_IsInLineParagraph: Boolean;
    procedure set_IsInLineParagraph(value: Boolean);
    function get_Hyperlink: DNHyperlink;
    procedure set_Hyperlink(value: DNHyperlink);
    function get_ZIndex: Int32;
    procedure set_ZIndex(value: Int32);

  { methods } 

    procedure Accept(visitor: DNAnnotationSelector);
    function GetRectangle(considerRotation: Boolean): DNPdf_Rectangle;
    procedure Flatten;
    function Clone: DDN.mscorlib.DNObject;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Title: string read get_Title write set_Title;
    property Action: DNPdfAction read get_Action;
    property AnnotationType: DNAnnotationType read get_AnnotationType;
    property Flags: DNAnnotationFlags read get_Flags write set_Flags;
    property Width: Double read get_Width write set_Width;
    property Actions: DNPdfActionCollection read get_Actions;
    property Height: Double read get_Height write set_Height;
    property Rect: DNPdf_Rectangle read get_Rect write set_Rect;
    property Contents: string read get_Contents write set_Contents;
    property Name: string read get_Name write set_Name;
    property Modified: DDN.mscorlib.DNDateTime read get_Modified write set_Modified;
    property Color: DNColor read get_Color write set_Color;
    property Border: DNBorder read get_Border write set_Border;
    property ActiveState: string read get_ActiveState write set_ActiveState;
    property Characteristics: DNCharacteristics read get_Characteristics;
    property States: DNAppearanceDictionary read get_States;
    property Alignment: DNTextAlignment read get_Alignment write set_Alignment;
    property HorizontalAlignment: DNHorizontalAlignment read get_HorizontalAlignment write set_HorizontalAlignment;
    property TextHorizontalAlignment: DNHorizontalAlignment read get_TextHorizontalAlignment write set_TextHorizontalAlignment;
    property FullName: string read get_FullName;
    property Appearance: DNAppearanceDictionary read get_Appearance;
    property PageIndex: Int32 read get_PageIndex;
    property VerticalAlignment: DNVerticalAlignment read get_VerticalAlignment write set_VerticalAlignment;
    property Margin: DNMarginInfo read get_Margin write set_Margin;
    property IsFirstParagraphInColumn: Boolean read get_IsFirstParagraphInColumn write set_IsFirstParagraphInColumn;
    property IsKeptWithNext: Boolean read get_IsKeptWithNext write set_IsKeptWithNext;
    property IsInNewPage: Boolean read get_IsInNewPage write set_IsInNewPage;
    property IsInLineParagraph: Boolean read get_IsInLineParagraph write set_IsInLineParagraph;
    property Hyperlink: DNHyperlink read get_Hyperlink write set_Hyperlink;
    property ZIndex: Int32 read get_ZIndex write set_ZIndex;
  end;

  TDNScreenAnnotation = class(TDNGenericImport<DNScreenAnnotationClass, DNScreenAnnotation>) end;

  //-------------namespace: Aspose.Pdf.Annotations----------------
  DNWatermarkAnnotationClass = interface(DNAnnotationClass)
  ['{51991EF8-AC83-5150-80B1-284FED95E5AD}']
  { constructors } 

    {class} function init(page: DNPage; rect: DNPdf_Rectangle): DNWatermarkAnnotation;

  end;

  [DNTypeName('Aspose.Pdf.Annotations.WatermarkAnnotation')]
  DNWatermarkAnnotation = interface(DNAnnotation)
  ['{C2166FD4-8C85-36DD-9BE1-DB107BA2DA18}']
  { getters & setters } 

    function get_FixedPrint: DNFixedPrint;
    function get_AnnotationType: DNAnnotationType;
    function get_Opacity: Double;
    procedure set_Opacity(value: Double);
    function get_Flags: DNAnnotationFlags;
    procedure set_Flags(value: DNAnnotationFlags);
    function get_Width: Double;
    procedure set_Width(value: Double);
    function get_Actions: DNPdfActionCollection;
    function get_Height: Double;
    procedure set_Height(value: Double);
    function get_Rect: DNPdf_Rectangle;
    procedure set_Rect(value: DNPdf_Rectangle);
    function get_Contents: string;
    procedure set_Contents(value: string);
    function get_Name: string;
    procedure set_Name(value: string);
    function get_Modified: DDN.mscorlib.DNDateTime;
    procedure set_Modified(value: DDN.mscorlib.DNDateTime);
    function get_Color: DNColor;
    procedure set_Color(value: DNColor);
    function get_Border: DNBorder;
    procedure set_Border(value: DNBorder);
    function get_ActiveState: string;
    procedure set_ActiveState(value: string);
    function get_Characteristics: DNCharacteristics;
    function get_States: DNAppearanceDictionary;
    function get_Alignment: DNTextAlignment;
    procedure set_Alignment(value: DNTextAlignment);
    function get_HorizontalAlignment: DNHorizontalAlignment;
    procedure set_HorizontalAlignment(value: DNHorizontalAlignment);
    function get_TextHorizontalAlignment: DNHorizontalAlignment;
    procedure set_TextHorizontalAlignment(value: DNHorizontalAlignment);
    function get_FullName: string;
    function get_Appearance: DNAppearanceDictionary;
    function get_PageIndex: Int32;
    function get_VerticalAlignment: DNVerticalAlignment;
    procedure set_VerticalAlignment(value: DNVerticalAlignment);
    function get_Margin: DNMarginInfo;
    procedure set_Margin(value: DNMarginInfo);
    function get_IsFirstParagraphInColumn: Boolean;
    procedure set_IsFirstParagraphInColumn(value: Boolean);
    function get_IsKeptWithNext: Boolean;
    procedure set_IsKeptWithNext(value: Boolean);
    function get_IsInNewPage: Boolean;
    procedure set_IsInNewPage(value: Boolean);
    function get_IsInLineParagraph: Boolean;
    procedure set_IsInLineParagraph(value: Boolean);
    function get_Hyperlink: DNHyperlink;
    procedure set_Hyperlink(value: DNHyperlink);
    function get_ZIndex: Int32;
    procedure set_ZIndex(value: Int32);

  { methods } 

    procedure SetText(text: DNFormattedText);
    procedure SetTextAndState(text: TArray<string>; textState: DNTextState);
    procedure Accept(visitor: DNAnnotationSelector);
    function GetRectangle(considerRotation: Boolean): DNPdf_Rectangle;
    procedure Flatten;
    function Clone: DDN.mscorlib.DNObject;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property FixedPrint: DNFixedPrint read get_FixedPrint;
    property AnnotationType: DNAnnotationType read get_AnnotationType;
    property Opacity: Double read get_Opacity write set_Opacity;
    property Flags: DNAnnotationFlags read get_Flags write set_Flags;
    property Width: Double read get_Width write set_Width;
    property Actions: DNPdfActionCollection read get_Actions;
    property Height: Double read get_Height write set_Height;
    property Rect: DNPdf_Rectangle read get_Rect write set_Rect;
    property Contents: string read get_Contents write set_Contents;
    property Name: string read get_Name write set_Name;
    property Modified: DDN.mscorlib.DNDateTime read get_Modified write set_Modified;
    property Color: DNColor read get_Color write set_Color;
    property Border: DNBorder read get_Border write set_Border;
    property ActiveState: string read get_ActiveState write set_ActiveState;
    property Characteristics: DNCharacteristics read get_Characteristics;
    property States: DNAppearanceDictionary read get_States;
    property Alignment: DNTextAlignment read get_Alignment write set_Alignment;
    property HorizontalAlignment: DNHorizontalAlignment read get_HorizontalAlignment write set_HorizontalAlignment;
    property TextHorizontalAlignment: DNHorizontalAlignment read get_TextHorizontalAlignment write set_TextHorizontalAlignment;
    property FullName: string read get_FullName;
    property Appearance: DNAppearanceDictionary read get_Appearance;
    property PageIndex: Int32 read get_PageIndex;
    property VerticalAlignment: DNVerticalAlignment read get_VerticalAlignment write set_VerticalAlignment;
    property Margin: DNMarginInfo read get_Margin write set_Margin;
    property IsFirstParagraphInColumn: Boolean read get_IsFirstParagraphInColumn write set_IsFirstParagraphInColumn;
    property IsKeptWithNext: Boolean read get_IsKeptWithNext write set_IsKeptWithNext;
    property IsInNewPage: Boolean read get_IsInNewPage write set_IsInNewPage;
    property IsInLineParagraph: Boolean read get_IsInLineParagraph write set_IsInLineParagraph;
    property Hyperlink: DNHyperlink read get_Hyperlink write set_Hyperlink;
    property ZIndex: Int32 read get_ZIndex write set_ZIndex;
  end;

  TDNWatermarkAnnotation = class(TDNGenericImport<DNWatermarkAnnotationClass, DNWatermarkAnnotation>) end;

  //-------------namespace: Aspose.Pdf.Annotations----------------
  DNWidgetAnnotationClass = interface(DNAnnotationClass)
  ['{23417580-9DEB-53E5-958C-70141FF6E05A}']
  { constructors } 

    {class} function init(doc: DNDocument): DNWidgetAnnotation;

  end;

  [DNTypeName('Aspose.Pdf.Annotations.WidgetAnnotation')]
  DNWidgetAnnotation = interface(DNAnnotation)
  ['{71BB59A5-B87C-3483-91FE-C1D194216B2B}']
  { getters & setters } 

    function get_OnActivated: DNPdfAction;
    procedure set_OnActivated(value: DNPdfAction);
    function get_Actions: DNAnnotationActionCollection;
    function get_Highlighting: DNHighlightingMode;
    procedure set_Highlighting(value: DNHighlightingMode);
    function get_Parent: DNField;
    function get_DefaultAppearance: DNDefaultAppearance;
    procedure set_DefaultAppearance(value: DNDefaultAppearance);
    function get_ReadOnly: Boolean;
    procedure set_ReadOnly(value: Boolean);
    function get_Required: Boolean;
    procedure set_Required(value: Boolean);
    function get_Exportable: Boolean;
    procedure set_Exportable(value: Boolean);
    function get_AnnotationType: DNAnnotationType;
    function get_Flags: DNAnnotationFlags;
    procedure set_Flags(value: DNAnnotationFlags);
    function get_Width: Double;
    procedure set_Width(value: Double);
    function get_Height: Double;
    procedure set_Height(value: Double);
    function get_Rect: DNPdf_Rectangle;
    procedure set_Rect(value: DNPdf_Rectangle);
    function get_Contents: string;
    procedure set_Contents(value: string);
    function get_Name: string;
    procedure set_Name(value: string);
    function get_Modified: DDN.mscorlib.DNDateTime;
    procedure set_Modified(value: DDN.mscorlib.DNDateTime);
    function get_Color: DNColor;
    procedure set_Color(value: DNColor);
    function get_Border: DNBorder;
    procedure set_Border(value: DNBorder);
    function get_ActiveState: string;
    procedure set_ActiveState(value: string);
    function get_Characteristics: DNCharacteristics;
    function get_States: DNAppearanceDictionary;
    function get_Alignment: DNTextAlignment;
    procedure set_Alignment(value: DNTextAlignment);
    function get_HorizontalAlignment: DNHorizontalAlignment;
    procedure set_HorizontalAlignment(value: DNHorizontalAlignment);
    function get_TextHorizontalAlignment: DNHorizontalAlignment;
    procedure set_TextHorizontalAlignment(value: DNHorizontalAlignment);
    function get_FullName: string;
    function get_Appearance: DNAppearanceDictionary;
    function get_PageIndex: Int32;
    function get_VerticalAlignment: DNVerticalAlignment;
    procedure set_VerticalAlignment(value: DNVerticalAlignment);
    function get_Margin: DNMarginInfo;
    procedure set_Margin(value: DNMarginInfo);
    function get_IsFirstParagraphInColumn: Boolean;
    procedure set_IsFirstParagraphInColumn(value: Boolean);
    function get_IsKeptWithNext: Boolean;
    procedure set_IsKeptWithNext(value: Boolean);
    function get_IsInNewPage: Boolean;
    procedure set_IsInNewPage(value: Boolean);
    function get_IsInLineParagraph: Boolean;
    procedure set_IsInLineParagraph(value: Boolean);
    function get_Hyperlink: DNHyperlink;
    procedure set_Hyperlink(value: DNHyperlink);
    function get_ZIndex: Int32;
    procedure set_ZIndex(value: Int32);

  { methods } 

    procedure Accept(visitor: DNAnnotationSelector);
    function GetRectangle(considerRotation: Boolean): DNPdf_Rectangle;
    procedure Flatten;
    function Clone: DDN.mscorlib.DNObject;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property OnActivated: DNPdfAction read get_OnActivated write set_OnActivated;
    property Actions: DNAnnotationActionCollection read get_Actions;
    property Highlighting: DNHighlightingMode read get_Highlighting write set_Highlighting;
    property Parent: DNField read get_Parent;
    property DefaultAppearance: DNDefaultAppearance read get_DefaultAppearance write set_DefaultAppearance;
    property ReadOnly: Boolean read get_ReadOnly write set_ReadOnly;
    property Required: Boolean read get_Required write set_Required;
    property Exportable: Boolean read get_Exportable write set_Exportable;
    property AnnotationType: DNAnnotationType read get_AnnotationType;
    property Flags: DNAnnotationFlags read get_Flags write set_Flags;
    property Width: Double read get_Width write set_Width;
    property Height: Double read get_Height write set_Height;
    property Rect: DNPdf_Rectangle read get_Rect write set_Rect;
    property Contents: string read get_Contents write set_Contents;
    property Name: string read get_Name write set_Name;
    property Modified: DDN.mscorlib.DNDateTime read get_Modified write set_Modified;
    property Color: DNColor read get_Color write set_Color;
    property Border: DNBorder read get_Border write set_Border;
    property ActiveState: string read get_ActiveState write set_ActiveState;
    property Characteristics: DNCharacteristics read get_Characteristics;
    property States: DNAppearanceDictionary read get_States;
    property Alignment: DNTextAlignment read get_Alignment write set_Alignment;
    property HorizontalAlignment: DNHorizontalAlignment read get_HorizontalAlignment write set_HorizontalAlignment;
    property TextHorizontalAlignment: DNHorizontalAlignment read get_TextHorizontalAlignment write set_TextHorizontalAlignment;
    property FullName: string read get_FullName;
    property Appearance: DNAppearanceDictionary read get_Appearance;
    property PageIndex: Int32 read get_PageIndex;
    property VerticalAlignment: DNVerticalAlignment read get_VerticalAlignment write set_VerticalAlignment;
    property Margin: DNMarginInfo read get_Margin write set_Margin;
    property IsFirstParagraphInColumn: Boolean read get_IsFirstParagraphInColumn write set_IsFirstParagraphInColumn;
    property IsKeptWithNext: Boolean read get_IsKeptWithNext write set_IsKeptWithNext;
    property IsInNewPage: Boolean read get_IsInNewPage write set_IsInNewPage;
    property IsInLineParagraph: Boolean read get_IsInLineParagraph write set_IsInLineParagraph;
    property Hyperlink: DNHyperlink read get_Hyperlink write set_Hyperlink;
    property ZIndex: Int32 read get_ZIndex write set_ZIndex;
  end;

  TDNWidgetAnnotation = class(TDNGenericImport<DNWidgetAnnotationClass, DNWidgetAnnotation>) end;

  //-------------namespace: Aspose.Pdf.Forms----------------
  DNFieldClass = interface(DNWidgetAnnotationClass)
  ['{234CBF36-AFA0-57D6-A836-309E7F0066AF}']
  { static getter & setter } 

    {class} function get_FitIntoRectangle: Boolean;
    {class} procedure set_FitIntoRectangle(value: Boolean);
    {class} function get_MaxFontSize: Double;
    {class} procedure set_MaxFontSize(value: Double);
    {class} function get_MinFontSize: Double;
    {class} procedure set_MinFontSize(value: Double);

  { constructors } 

    {class} function init(doc: DNDocument): DNField;

  { static propertys } 

    {class} property FitIntoRectangle: Boolean read get_FitIntoRectangle write set_FitIntoRectangle;
    {class} property MaxFontSize: Double read get_MaxFontSize write set_MaxFontSize;
    {class} property MinFontSize: Double read get_MinFontSize write set_MinFontSize;
  end;

  [DNTypeName('Aspose.Pdf.Forms.Field')]
  DNField = interface(DNWidgetAnnotation)
  ['{289468F4-6382-3D1C-B8DF-2F003FC51C6B}']
  { getters & setters } 

    function get_PartialName: string;
    procedure set_PartialName(value: string);
    function get_AlternateName: string;
    procedure set_AlternateName(value: string);
    function get_MappingName: string;
    procedure set_MappingName(value: string);
    function get_Value: string;
    procedure set_Value(value: string);
    function get_IsSynchronized: Boolean;
    function get_Count: Int32;
    function get_SyncRoot: DDN.mscorlib.DNObject;
    function get_IsGroup: Boolean;
    function get_Item(name: string): DNWidgetAnnotation; overload;
    function get_Item(index: Int32): DNWidgetAnnotation; overload;
    function get_AnnotationIndex: Int32;
    procedure set_AnnotationIndex(value: Int32);
    function get_PageIndex: Int32;
    function get_Rect: DNPdf_Rectangle;
    procedure set_Rect(value: DNPdf_Rectangle);
    function get_IsSharedField: Boolean;
    procedure set_IsSharedField(value: Boolean);
    function get_TabOrder: Int32;
    procedure set_TabOrder(value: Int32);
    function get_OnActivated: DNPdfAction;
    procedure set_OnActivated(value: DNPdfAction);
    function get_Actions: DNAnnotationActionCollection;
    function get_Highlighting: DNHighlightingMode;
    procedure set_Highlighting(value: DNHighlightingMode);
    function get_Parent: DNField;
    function get_DefaultAppearance: DNDefaultAppearance;
    procedure set_DefaultAppearance(value: DNDefaultAppearance);
    function get_ReadOnly: Boolean;
    procedure set_ReadOnly(value: Boolean);
    function get_Required: Boolean;
    procedure set_Required(value: Boolean);
    function get_Exportable: Boolean;
    procedure set_Exportable(value: Boolean);
    function get_AnnotationType: DNAnnotationType;
    function get_Flags: DNAnnotationFlags;
    procedure set_Flags(value: DNAnnotationFlags);
    function get_Width: Double;
    procedure set_Width(value: Double);
    function get_Height: Double;
    procedure set_Height(value: Double);
    function get_Contents: string;
    procedure set_Contents(value: string);
    function get_Name: string;
    procedure set_Name(value: string);
    function get_Modified: DDN.mscorlib.DNDateTime;
    procedure set_Modified(value: DDN.mscorlib.DNDateTime);
    function get_Color: DNColor;
    procedure set_Color(value: DNColor);
    function get_Border: DNBorder;
    procedure set_Border(value: DNBorder);
    function get_ActiveState: string;
    procedure set_ActiveState(value: string);
    function get_Characteristics: DNCharacteristics;
    function get_States: DNAppearanceDictionary;
    function get_Alignment: DNTextAlignment;
    procedure set_Alignment(value: DNTextAlignment);
    function get_HorizontalAlignment: DNHorizontalAlignment;
    procedure set_HorizontalAlignment(value: DNHorizontalAlignment);
    function get_TextHorizontalAlignment: DNHorizontalAlignment;
    procedure set_TextHorizontalAlignment(value: DNHorizontalAlignment);
    function get_FullName: string;
    function get_Appearance: DNAppearanceDictionary;
    function get_VerticalAlignment: DNVerticalAlignment;
    procedure set_VerticalAlignment(value: DNVerticalAlignment);
    function get_Margin: DNMarginInfo;
    procedure set_Margin(value: DNMarginInfo);
    function get_IsFirstParagraphInColumn: Boolean;
    procedure set_IsFirstParagraphInColumn(value: Boolean);
    function get_IsKeptWithNext: Boolean;
    procedure set_IsKeptWithNext(value: Boolean);
    function get_IsInNewPage: Boolean;
    procedure set_IsInNewPage(value: Boolean);
    function get_IsInLineParagraph: Boolean;
    procedure set_IsInLineParagraph(value: Boolean);
    function get_Hyperlink: DNHyperlink;
    procedure set_Hyperlink(value: DNHyperlink);
    function get_ZIndex: Int32;
    procedure set_ZIndex(value: Int32);

  { methods } 

    function Recalculate: Boolean;
    procedure CopyTo(&array: TArray<DNField>; index: Int32);
    function GetEnumerator: DDN.mscorlib.DNIEnumerator<DNWidgetAnnotation>;
    procedure Flatten;
    procedure SetPosition(point: DNPoint);
    procedure Accept(visitor: DNAnnotationSelector);
    function GetRectangle(considerRotation: Boolean): DNPdf_Rectangle;
    function Clone: DDN.mscorlib.DNObject;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property PartialName: string read get_PartialName write set_PartialName;
    property AlternateName: string read get_AlternateName write set_AlternateName;
    property MappingName: string read get_MappingName write set_MappingName;
    property Value: string read get_Value write set_Value;
    property IsSynchronized: Boolean read get_IsSynchronized;
    property Count: Int32 read get_Count;
    property SyncRoot: DDN.mscorlib.DNObject read get_SyncRoot;
    property IsGroup: Boolean read get_IsGroup;
    property Item[name: string]: DNWidgetAnnotation read get_Item; default;
    property Item[index: Int32]: DNWidgetAnnotation read get_Item; default;
    property AnnotationIndex: Int32 read get_AnnotationIndex write set_AnnotationIndex;
    property PageIndex: Int32 read get_PageIndex;
    property Rect: DNPdf_Rectangle read get_Rect write set_Rect;
    property IsSharedField: Boolean read get_IsSharedField write set_IsSharedField;
    property TabOrder: Int32 read get_TabOrder write set_TabOrder;
    property OnActivated: DNPdfAction read get_OnActivated write set_OnActivated;
    property Actions: DNAnnotationActionCollection read get_Actions;
    property Highlighting: DNHighlightingMode read get_Highlighting write set_Highlighting;
    property Parent: DNField read get_Parent;
    property DefaultAppearance: DNDefaultAppearance read get_DefaultAppearance write set_DefaultAppearance;
    property ReadOnly: Boolean read get_ReadOnly write set_ReadOnly;
    property Required: Boolean read get_Required write set_Required;
    property Exportable: Boolean read get_Exportable write set_Exportable;
    property AnnotationType: DNAnnotationType read get_AnnotationType;
    property Flags: DNAnnotationFlags read get_Flags write set_Flags;
    property Width: Double read get_Width write set_Width;
    property Height: Double read get_Height write set_Height;
    property Contents: string read get_Contents write set_Contents;
    property Name: string read get_Name write set_Name;
    property Modified: DDN.mscorlib.DNDateTime read get_Modified write set_Modified;
    property Color: DNColor read get_Color write set_Color;
    property Border: DNBorder read get_Border write set_Border;
    property ActiveState: string read get_ActiveState write set_ActiveState;
    property Characteristics: DNCharacteristics read get_Characteristics;
    property States: DNAppearanceDictionary read get_States;
    property Alignment: DNTextAlignment read get_Alignment write set_Alignment;
    property HorizontalAlignment: DNHorizontalAlignment read get_HorizontalAlignment write set_HorizontalAlignment;
    property TextHorizontalAlignment: DNHorizontalAlignment read get_TextHorizontalAlignment write set_TextHorizontalAlignment;
    property FullName: string read get_FullName;
    property Appearance: DNAppearanceDictionary read get_Appearance;
    property VerticalAlignment: DNVerticalAlignment read get_VerticalAlignment write set_VerticalAlignment;
    property Margin: DNMarginInfo read get_Margin write set_Margin;
    property IsFirstParagraphInColumn: Boolean read get_IsFirstParagraphInColumn write set_IsFirstParagraphInColumn;
    property IsKeptWithNext: Boolean read get_IsKeptWithNext write set_IsKeptWithNext;
    property IsInNewPage: Boolean read get_IsInNewPage write set_IsInNewPage;
    property IsInLineParagraph: Boolean read get_IsInLineParagraph write set_IsInLineParagraph;
    property Hyperlink: DNHyperlink read get_Hyperlink write set_Hyperlink;
    property ZIndex: Int32 read get_ZIndex write set_ZIndex;
  end;

  TDNField = class(TDNGenericImport<DNFieldClass, DNField>) end;

  //-------------namespace: Aspose.Pdf.Forms----------------
  DNButtonFieldClass = interface(DNFieldClass)
  ['{53836264-EEA6-5610-9528-8D348EC2E977}']
  { constructors } 

    {class} function init: DNButtonField; overload;
    {class} function init(page: DNPage; rect: DNPdf_Rectangle): DNButtonField; overload;
    {class} function init(doc: DNDocument; rect: DNPdf_Rectangle): DNButtonField; overload;

  end;

  [DNTypeName('Aspose.Pdf.Forms.ButtonField')]
  DNButtonField = interface(DNField)
  ['{A3890F24-E2A8-363A-9226-3AD7C58C18D4}']
  { getters & setters } 

    function get_NormalCaption: string;
    procedure set_NormalCaption(value: string);
    function get_RolloverCaption: string;
    procedure set_RolloverCaption(value: string);
    function get_AlternateCaption: string;
    procedure set_AlternateCaption(value: string);
    function get_NormalIcon: DNXForm;
    procedure set_NormalIcon(value: DNXForm);
    function get_RolloverIcon: DNXForm;
    procedure set_RolloverIcon(value: DNXForm);
    function get_AlternateIcon: DNXForm;
    procedure set_AlternateIcon(value: DNXForm);
    function get_IconFit: DNIconFit;
    function get_ICPosition: DNIconCaptionPosition;
    procedure set_ICPosition(value: DNIconCaptionPosition);
    function get_PartialName: string;
    procedure set_PartialName(value: string);
    function get_AlternateName: string;
    procedure set_AlternateName(value: string);
    function get_MappingName: string;
    procedure set_MappingName(value: string);
    function get_Value: string;
    procedure set_Value(value: string);
    function get_IsSynchronized: Boolean;
    function get_Count: Int32;
    function get_SyncRoot: DDN.mscorlib.DNObject;
    function get_IsGroup: Boolean;
    function get_Item(name: string): DNWidgetAnnotation; overload;
    function get_Item(index: Int32): DNWidgetAnnotation; overload;
    function get_AnnotationIndex: Int32;
    procedure set_AnnotationIndex(value: Int32);
    function get_PageIndex: Int32;
    function get_Rect: DNPdf_Rectangle;
    procedure set_Rect(value: DNPdf_Rectangle);
    function get_IsSharedField: Boolean;
    procedure set_IsSharedField(value: Boolean);
    function get_TabOrder: Int32;
    procedure set_TabOrder(value: Int32);
    function get_OnActivated: DNPdfAction;
    procedure set_OnActivated(value: DNPdfAction);
    function get_Actions: DNAnnotationActionCollection;
    function get_Highlighting: DNHighlightingMode;
    procedure set_Highlighting(value: DNHighlightingMode);
    function get_Parent: DNField;
    function get_DefaultAppearance: DNDefaultAppearance;
    procedure set_DefaultAppearance(value: DNDefaultAppearance);
    function get_ReadOnly: Boolean;
    procedure set_ReadOnly(value: Boolean);
    function get_Required: Boolean;
    procedure set_Required(value: Boolean);
    function get_Exportable: Boolean;
    procedure set_Exportable(value: Boolean);
    function get_AnnotationType: DNAnnotationType;
    function get_Flags: DNAnnotationFlags;
    procedure set_Flags(value: DNAnnotationFlags);
    function get_Width: Double;
    procedure set_Width(value: Double);
    function get_Height: Double;
    procedure set_Height(value: Double);
    function get_Contents: string;
    procedure set_Contents(value: string);
    function get_Name: string;
    procedure set_Name(value: string);
    function get_Modified: DDN.mscorlib.DNDateTime;
    procedure set_Modified(value: DDN.mscorlib.DNDateTime);
    function get_Color: DNColor;
    procedure set_Color(value: DNColor);
    function get_Border: DNBorder;
    procedure set_Border(value: DNBorder);
    function get_ActiveState: string;
    procedure set_ActiveState(value: string);
    function get_Characteristics: DNCharacteristics;
    function get_States: DNAppearanceDictionary;
    function get_Alignment: DNTextAlignment;
    procedure set_Alignment(value: DNTextAlignment);
    function get_HorizontalAlignment: DNHorizontalAlignment;
    procedure set_HorizontalAlignment(value: DNHorizontalAlignment);
    function get_TextHorizontalAlignment: DNHorizontalAlignment;
    procedure set_TextHorizontalAlignment(value: DNHorizontalAlignment);
    function get_FullName: string;
    function get_Appearance: DNAppearanceDictionary;
    function get_VerticalAlignment: DNVerticalAlignment;
    procedure set_VerticalAlignment(value: DNVerticalAlignment);
    function get_Margin: DNMarginInfo;
    procedure set_Margin(value: DNMarginInfo);
    function get_IsFirstParagraphInColumn: Boolean;
    procedure set_IsFirstParagraphInColumn(value: Boolean);
    function get_IsKeptWithNext: Boolean;
    procedure set_IsKeptWithNext(value: Boolean);
    function get_IsInNewPage: Boolean;
    procedure set_IsInNewPage(value: Boolean);
    function get_IsInLineParagraph: Boolean;
    procedure set_IsInLineParagraph(value: Boolean);
    function get_Hyperlink: DNHyperlink;
    procedure set_Hyperlink(value: DNHyperlink);
    function get_ZIndex: Int32;
    procedure set_ZIndex(value: Int32);

  { methods } 

    procedure AddImage(image: DDN.System.Drawing.DNImage);
    function Recalculate: Boolean;
    procedure CopyTo(&array: TArray<DNField>; index: Int32);
    function GetEnumerator: DDN.mscorlib.DNIEnumerator<DNWidgetAnnotation>;
    procedure Flatten;
    procedure SetPosition(point: DNPoint);
    procedure Accept(visitor: DNAnnotationSelector);
    function GetRectangle(considerRotation: Boolean): DNPdf_Rectangle;
    function Clone: DDN.mscorlib.DNObject;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property NormalCaption: string read get_NormalCaption write set_NormalCaption;
    property RolloverCaption: string read get_RolloverCaption write set_RolloverCaption;
    property AlternateCaption: string read get_AlternateCaption write set_AlternateCaption;
    property NormalIcon: DNXForm read get_NormalIcon write set_NormalIcon;
    property RolloverIcon: DNXForm read get_RolloverIcon write set_RolloverIcon;
    property AlternateIcon: DNXForm read get_AlternateIcon write set_AlternateIcon;
    property IconFit: DNIconFit read get_IconFit;
    property ICPosition: DNIconCaptionPosition read get_ICPosition write set_ICPosition;
    property PartialName: string read get_PartialName write set_PartialName;
    property AlternateName: string read get_AlternateName write set_AlternateName;
    property MappingName: string read get_MappingName write set_MappingName;
    property Value: string read get_Value write set_Value;
    property IsSynchronized: Boolean read get_IsSynchronized;
    property Count: Int32 read get_Count;
    property SyncRoot: DDN.mscorlib.DNObject read get_SyncRoot;
    property IsGroup: Boolean read get_IsGroup;
    property Item[name: string]: DNWidgetAnnotation read get_Item; default;
    property Item[index: Int32]: DNWidgetAnnotation read get_Item; default;
    property AnnotationIndex: Int32 read get_AnnotationIndex write set_AnnotationIndex;
    property PageIndex: Int32 read get_PageIndex;
    property Rect: DNPdf_Rectangle read get_Rect write set_Rect;
    property IsSharedField: Boolean read get_IsSharedField write set_IsSharedField;
    property TabOrder: Int32 read get_TabOrder write set_TabOrder;
    property OnActivated: DNPdfAction read get_OnActivated write set_OnActivated;
    property Actions: DNAnnotationActionCollection read get_Actions;
    property Highlighting: DNHighlightingMode read get_Highlighting write set_Highlighting;
    property Parent: DNField read get_Parent;
    property DefaultAppearance: DNDefaultAppearance read get_DefaultAppearance write set_DefaultAppearance;
    property ReadOnly: Boolean read get_ReadOnly write set_ReadOnly;
    property Required: Boolean read get_Required write set_Required;
    property Exportable: Boolean read get_Exportable write set_Exportable;
    property AnnotationType: DNAnnotationType read get_AnnotationType;
    property Flags: DNAnnotationFlags read get_Flags write set_Flags;
    property Width: Double read get_Width write set_Width;
    property Height: Double read get_Height write set_Height;
    property Contents: string read get_Contents write set_Contents;
    property Name: string read get_Name write set_Name;
    property Modified: DDN.mscorlib.DNDateTime read get_Modified write set_Modified;
    property Color: DNColor read get_Color write set_Color;
    property Border: DNBorder read get_Border write set_Border;
    property ActiveState: string read get_ActiveState write set_ActiveState;
    property Characteristics: DNCharacteristics read get_Characteristics;
    property States: DNAppearanceDictionary read get_States;
    property Alignment: DNTextAlignment read get_Alignment write set_Alignment;
    property HorizontalAlignment: DNHorizontalAlignment read get_HorizontalAlignment write set_HorizontalAlignment;
    property TextHorizontalAlignment: DNHorizontalAlignment read get_TextHorizontalAlignment write set_TextHorizontalAlignment;
    property FullName: string read get_FullName;
    property Appearance: DNAppearanceDictionary read get_Appearance;
    property VerticalAlignment: DNVerticalAlignment read get_VerticalAlignment write set_VerticalAlignment;
    property Margin: DNMarginInfo read get_Margin write set_Margin;
    property IsFirstParagraphInColumn: Boolean read get_IsFirstParagraphInColumn write set_IsFirstParagraphInColumn;
    property IsKeptWithNext: Boolean read get_IsKeptWithNext write set_IsKeptWithNext;
    property IsInNewPage: Boolean read get_IsInNewPage write set_IsInNewPage;
    property IsInLineParagraph: Boolean read get_IsInLineParagraph write set_IsInLineParagraph;
    property Hyperlink: DNHyperlink read get_Hyperlink write set_Hyperlink;
    property ZIndex: Int32 read get_ZIndex write set_ZIndex;
  end;

  TDNButtonField = class(TDNGenericImport<DNButtonFieldClass, DNButtonField>) end;

  //-------------namespace: Aspose.Pdf.Forms----------------
  DNCheckboxFieldClass = interface(DNFieldClass)
  ['{588984CB-5D86-55CF-9589-43910C6D9463}']
  { constructors } 

    {class} function init(page: DNPage; rect: DNPdf_Rectangle): DNCheckboxField; overload;
    {class} function init(doc: DNDocument; rect: DNPdf_Rectangle): DNCheckboxField; overload;
    {class} function init: DNCheckboxField; overload;
    {class} function init(doc: DNDocument): DNCheckboxField; overload;

  end;

  [DNTypeName('Aspose.Pdf.Forms.CheckboxField')]
  DNCheckboxField = interface(DNField)
  ['{41015024-5534-346B-93F9-16A6FB6FCB30}']
  { getters & setters } 

    function get_AllowedStates: DDN.mscorlib.DNList<string>;
    function get_Style: DNBoxStyle;
    procedure set_Style(value: DNBoxStyle);
    function get_ActiveState: string;
    procedure set_ActiveState(value: string);
    function get_Checked: Boolean;
    procedure set_Checked(value: Boolean);
    function get_Value: string;
    procedure set_Value(value: string);
    function get_ExportValue: string;
    procedure set_ExportValue(value: string);
    function get_PartialName: string;
    procedure set_PartialName(value: string);
    function get_AlternateName: string;
    procedure set_AlternateName(value: string);
    function get_MappingName: string;
    procedure set_MappingName(value: string);
    function get_IsSynchronized: Boolean;
    function get_Count: Int32;
    function get_SyncRoot: DDN.mscorlib.DNObject;
    function get_IsGroup: Boolean;
    function get_Item(name: string): DNWidgetAnnotation; overload;
    function get_Item(index: Int32): DNWidgetAnnotation; overload;
    function get_AnnotationIndex: Int32;
    procedure set_AnnotationIndex(value: Int32);
    function get_PageIndex: Int32;
    function get_Rect: DNPdf_Rectangle;
    procedure set_Rect(value: DNPdf_Rectangle);
    function get_IsSharedField: Boolean;
    procedure set_IsSharedField(value: Boolean);
    function get_TabOrder: Int32;
    procedure set_TabOrder(value: Int32);
    function get_OnActivated: DNPdfAction;
    procedure set_OnActivated(value: DNPdfAction);
    function get_Actions: DNAnnotationActionCollection;
    function get_Highlighting: DNHighlightingMode;
    procedure set_Highlighting(value: DNHighlightingMode);
    function get_Parent: DNField;
    function get_DefaultAppearance: DNDefaultAppearance;
    procedure set_DefaultAppearance(value: DNDefaultAppearance);
    function get_ReadOnly: Boolean;
    procedure set_ReadOnly(value: Boolean);
    function get_Required: Boolean;
    procedure set_Required(value: Boolean);
    function get_Exportable: Boolean;
    procedure set_Exportable(value: Boolean);
    function get_AnnotationType: DNAnnotationType;
    function get_Flags: DNAnnotationFlags;
    procedure set_Flags(value: DNAnnotationFlags);
    function get_Width: Double;
    procedure set_Width(value: Double);
    function get_Height: Double;
    procedure set_Height(value: Double);
    function get_Contents: string;
    procedure set_Contents(value: string);
    function get_Name: string;
    procedure set_Name(value: string);
    function get_Modified: DDN.mscorlib.DNDateTime;
    procedure set_Modified(value: DDN.mscorlib.DNDateTime);
    function get_Color: DNColor;
    procedure set_Color(value: DNColor);
    function get_Border: DNBorder;
    procedure set_Border(value: DNBorder);
    function get_Characteristics: DNCharacteristics;
    function get_States: DNAppearanceDictionary;
    function get_Alignment: DNTextAlignment;
    procedure set_Alignment(value: DNTextAlignment);
    function get_HorizontalAlignment: DNHorizontalAlignment;
    procedure set_HorizontalAlignment(value: DNHorizontalAlignment);
    function get_TextHorizontalAlignment: DNHorizontalAlignment;
    procedure set_TextHorizontalAlignment(value: DNHorizontalAlignment);
    function get_FullName: string;
    function get_Appearance: DNAppearanceDictionary;
    function get_VerticalAlignment: DNVerticalAlignment;
    procedure set_VerticalAlignment(value: DNVerticalAlignment);
    function get_Margin: DNMarginInfo;
    procedure set_Margin(value: DNMarginInfo);
    function get_IsFirstParagraphInColumn: Boolean;
    procedure set_IsFirstParagraphInColumn(value: Boolean);
    function get_IsKeptWithNext: Boolean;
    procedure set_IsKeptWithNext(value: Boolean);
    function get_IsInNewPage: Boolean;
    procedure set_IsInNewPage(value: Boolean);
    function get_IsInLineParagraph: Boolean;
    procedure set_IsInLineParagraph(value: Boolean);
    function get_Hyperlink: DNHyperlink;
    procedure set_Hyperlink(value: DNHyperlink);
    function get_ZIndex: Int32;
    procedure set_ZIndex(value: Int32);

  { methods } 

    function Clone: DDN.mscorlib.DNObject;
    function Recalculate: Boolean;
    procedure CopyTo(&array: TArray<DNField>; index: Int32);
    function GetEnumerator: DDN.mscorlib.DNIEnumerator<DNWidgetAnnotation>;
    procedure Flatten;
    procedure SetPosition(point: DNPoint);
    procedure Accept(visitor: DNAnnotationSelector);
    function GetRectangle(considerRotation: Boolean): DNPdf_Rectangle;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property AllowedStates: DDN.mscorlib.DNList<string> read get_AllowedStates;
    property Style: DNBoxStyle read get_Style write set_Style;
    property ActiveState: string read get_ActiveState write set_ActiveState;
    property Checked: Boolean read get_Checked write set_Checked;
    property Value: string read get_Value write set_Value;
    property ExportValue: string read get_ExportValue write set_ExportValue;
    property PartialName: string read get_PartialName write set_PartialName;
    property AlternateName: string read get_AlternateName write set_AlternateName;
    property MappingName: string read get_MappingName write set_MappingName;
    property IsSynchronized: Boolean read get_IsSynchronized;
    property Count: Int32 read get_Count;
    property SyncRoot: DDN.mscorlib.DNObject read get_SyncRoot;
    property IsGroup: Boolean read get_IsGroup;
    property Item[name: string]: DNWidgetAnnotation read get_Item; default;
    property Item[index: Int32]: DNWidgetAnnotation read get_Item; default;
    property AnnotationIndex: Int32 read get_AnnotationIndex write set_AnnotationIndex;
    property PageIndex: Int32 read get_PageIndex;
    property Rect: DNPdf_Rectangle read get_Rect write set_Rect;
    property IsSharedField: Boolean read get_IsSharedField write set_IsSharedField;
    property TabOrder: Int32 read get_TabOrder write set_TabOrder;
    property OnActivated: DNPdfAction read get_OnActivated write set_OnActivated;
    property Actions: DNAnnotationActionCollection read get_Actions;
    property Highlighting: DNHighlightingMode read get_Highlighting write set_Highlighting;
    property Parent: DNField read get_Parent;
    property DefaultAppearance: DNDefaultAppearance read get_DefaultAppearance write set_DefaultAppearance;
    property ReadOnly: Boolean read get_ReadOnly write set_ReadOnly;
    property Required: Boolean read get_Required write set_Required;
    property Exportable: Boolean read get_Exportable write set_Exportable;
    property AnnotationType: DNAnnotationType read get_AnnotationType;
    property Flags: DNAnnotationFlags read get_Flags write set_Flags;
    property Width: Double read get_Width write set_Width;
    property Height: Double read get_Height write set_Height;
    property Contents: string read get_Contents write set_Contents;
    property Name: string read get_Name write set_Name;
    property Modified: DDN.mscorlib.DNDateTime read get_Modified write set_Modified;
    property Color: DNColor read get_Color write set_Color;
    property Border: DNBorder read get_Border write set_Border;
    property Characteristics: DNCharacteristics read get_Characteristics;
    property States: DNAppearanceDictionary read get_States;
    property Alignment: DNTextAlignment read get_Alignment write set_Alignment;
    property HorizontalAlignment: DNHorizontalAlignment read get_HorizontalAlignment write set_HorizontalAlignment;
    property TextHorizontalAlignment: DNHorizontalAlignment read get_TextHorizontalAlignment write set_TextHorizontalAlignment;
    property FullName: string read get_FullName;
    property Appearance: DNAppearanceDictionary read get_Appearance;
    property VerticalAlignment: DNVerticalAlignment read get_VerticalAlignment write set_VerticalAlignment;
    property Margin: DNMarginInfo read get_Margin write set_Margin;
    property IsFirstParagraphInColumn: Boolean read get_IsFirstParagraphInColumn write set_IsFirstParagraphInColumn;
    property IsKeptWithNext: Boolean read get_IsKeptWithNext write set_IsKeptWithNext;
    property IsInNewPage: Boolean read get_IsInNewPage write set_IsInNewPage;
    property IsInLineParagraph: Boolean read get_IsInLineParagraph write set_IsInLineParagraph;
    property Hyperlink: DNHyperlink read get_Hyperlink write set_Hyperlink;
    property ZIndex: Int32 read get_ZIndex write set_ZIndex;
  end;

  TDNCheckboxField = class(TDNGenericImport<DNCheckboxFieldClass, DNCheckboxField>) end;

  //-------------namespace: Aspose.Pdf.Forms----------------
  DNChoiceFieldClass = interface(DNFieldClass)
  ['{5276F763-CB34-5624-94C0-1A7F97E3B565}']
  { constructors } 

    {class} function init(page: DNPage; rect: DNPdf_Rectangle): DNChoiceField; overload;
    {class} function init(doc: DNDocument): DNChoiceField; overload;
    {class} function init(doc: DNDocument; rect: DNPdf_Rectangle): DNChoiceField; overload;

  end;

  [DNTypeName('Aspose.Pdf.Forms.ChoiceField')]
  DNChoiceField = interface(DNField)
  ['{335D3158-DCDC-37BC-88C8-0AF399B11BDE}']
  { getters & setters } 

    function get_CommitImmediately: Boolean;
    procedure set_CommitImmediately(value: Boolean);
    function get_MultiSelect: Boolean;
    procedure set_MultiSelect(value: Boolean);
    function get_Selected: Int32;
    procedure set_Selected(value: Int32);
    function get_SelectedItems: TArray<Int32>;
    procedure set_SelectedItems(value: TArray<Int32>);
    function get_Options: DNOptionCollection;
    function get_Value: string;
    procedure set_Value(value: string);
    function get_PartialName: string;
    procedure set_PartialName(value: string);
    function get_AlternateName: string;
    procedure set_AlternateName(value: string);
    function get_MappingName: string;
    procedure set_MappingName(value: string);
    function get_IsSynchronized: Boolean;
    function get_Count: Int32;
    function get_SyncRoot: DDN.mscorlib.DNObject;
    function get_IsGroup: Boolean;
    function get_Item(name: string): DNWidgetAnnotation; overload;
    function get_Item(index: Int32): DNWidgetAnnotation; overload;
    function get_AnnotationIndex: Int32;
    procedure set_AnnotationIndex(value: Int32);
    function get_PageIndex: Int32;
    function get_Rect: DNPdf_Rectangle;
    procedure set_Rect(value: DNPdf_Rectangle);
    function get_IsSharedField: Boolean;
    procedure set_IsSharedField(value: Boolean);
    function get_TabOrder: Int32;
    procedure set_TabOrder(value: Int32);
    function get_OnActivated: DNPdfAction;
    procedure set_OnActivated(value: DNPdfAction);
    function get_Actions: DNAnnotationActionCollection;
    function get_Highlighting: DNHighlightingMode;
    procedure set_Highlighting(value: DNHighlightingMode);
    function get_Parent: DNField;
    function get_DefaultAppearance: DNDefaultAppearance;
    procedure set_DefaultAppearance(value: DNDefaultAppearance);
    function get_ReadOnly: Boolean;
    procedure set_ReadOnly(value: Boolean);
    function get_Required: Boolean;
    procedure set_Required(value: Boolean);
    function get_Exportable: Boolean;
    procedure set_Exportable(value: Boolean);
    function get_AnnotationType: DNAnnotationType;
    function get_Flags: DNAnnotationFlags;
    procedure set_Flags(value: DNAnnotationFlags);
    function get_Width: Double;
    procedure set_Width(value: Double);
    function get_Height: Double;
    procedure set_Height(value: Double);
    function get_Contents: string;
    procedure set_Contents(value: string);
    function get_Name: string;
    procedure set_Name(value: string);
    function get_Modified: DDN.mscorlib.DNDateTime;
    procedure set_Modified(value: DDN.mscorlib.DNDateTime);
    function get_Color: DNColor;
    procedure set_Color(value: DNColor);
    function get_Border: DNBorder;
    procedure set_Border(value: DNBorder);
    function get_ActiveState: string;
    procedure set_ActiveState(value: string);
    function get_Characteristics: DNCharacteristics;
    function get_States: DNAppearanceDictionary;
    function get_Alignment: DNTextAlignment;
    procedure set_Alignment(value: DNTextAlignment);
    function get_HorizontalAlignment: DNHorizontalAlignment;
    procedure set_HorizontalAlignment(value: DNHorizontalAlignment);
    function get_TextHorizontalAlignment: DNHorizontalAlignment;
    procedure set_TextHorizontalAlignment(value: DNHorizontalAlignment);
    function get_FullName: string;
    function get_Appearance: DNAppearanceDictionary;
    function get_VerticalAlignment: DNVerticalAlignment;
    procedure set_VerticalAlignment(value: DNVerticalAlignment);
    function get_Margin: DNMarginInfo;
    procedure set_Margin(value: DNMarginInfo);
    function get_IsFirstParagraphInColumn: Boolean;
    procedure set_IsFirstParagraphInColumn(value: Boolean);
    function get_IsKeptWithNext: Boolean;
    procedure set_IsKeptWithNext(value: Boolean);
    function get_IsInNewPage: Boolean;
    procedure set_IsInNewPage(value: Boolean);
    function get_IsInLineParagraph: Boolean;
    procedure set_IsInLineParagraph(value: Boolean);
    function get_Hyperlink: DNHyperlink;
    procedure set_Hyperlink(value: DNHyperlink);
    function get_ZIndex: Int32;
    procedure set_ZIndex(value: Int32);

  { methods } 

    procedure AddOption(optionName: string); overload;
    procedure AddOption(&export: string; name: string); overload;
    procedure DeleteOption(optionName: string);
    function Recalculate: Boolean;
    procedure CopyTo(&array: TArray<DNField>; index: Int32);
    function GetEnumerator: DDN.mscorlib.DNIEnumerator<DNWidgetAnnotation>;
    procedure Flatten;
    procedure SetPosition(point: DNPoint);
    procedure Accept(visitor: DNAnnotationSelector);
    function GetRectangle(considerRotation: Boolean): DNPdf_Rectangle;
    function Clone: DDN.mscorlib.DNObject;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property CommitImmediately: Boolean read get_CommitImmediately write set_CommitImmediately;
    property MultiSelect: Boolean read get_MultiSelect write set_MultiSelect;
    property Selected: Int32 read get_Selected write set_Selected;
    property SelectedItems: TArray<Int32> read get_SelectedItems write set_SelectedItems;
    property Options: DNOptionCollection read get_Options;
    property Value: string read get_Value write set_Value;
    property PartialName: string read get_PartialName write set_PartialName;
    property AlternateName: string read get_AlternateName write set_AlternateName;
    property MappingName: string read get_MappingName write set_MappingName;
    property IsSynchronized: Boolean read get_IsSynchronized;
    property Count: Int32 read get_Count;
    property SyncRoot: DDN.mscorlib.DNObject read get_SyncRoot;
    property IsGroup: Boolean read get_IsGroup;
    property Item[name: string]: DNWidgetAnnotation read get_Item; default;
    property Item[index: Int32]: DNWidgetAnnotation read get_Item; default;
    property AnnotationIndex: Int32 read get_AnnotationIndex write set_AnnotationIndex;
    property PageIndex: Int32 read get_PageIndex;
    property Rect: DNPdf_Rectangle read get_Rect write set_Rect;
    property IsSharedField: Boolean read get_IsSharedField write set_IsSharedField;
    property TabOrder: Int32 read get_TabOrder write set_TabOrder;
    property OnActivated: DNPdfAction read get_OnActivated write set_OnActivated;
    property Actions: DNAnnotationActionCollection read get_Actions;
    property Highlighting: DNHighlightingMode read get_Highlighting write set_Highlighting;
    property Parent: DNField read get_Parent;
    property DefaultAppearance: DNDefaultAppearance read get_DefaultAppearance write set_DefaultAppearance;
    property ReadOnly: Boolean read get_ReadOnly write set_ReadOnly;
    property Required: Boolean read get_Required write set_Required;
    property Exportable: Boolean read get_Exportable write set_Exportable;
    property AnnotationType: DNAnnotationType read get_AnnotationType;
    property Flags: DNAnnotationFlags read get_Flags write set_Flags;
    property Width: Double read get_Width write set_Width;
    property Height: Double read get_Height write set_Height;
    property Contents: string read get_Contents write set_Contents;
    property Name: string read get_Name write set_Name;
    property Modified: DDN.mscorlib.DNDateTime read get_Modified write set_Modified;
    property Color: DNColor read get_Color write set_Color;
    property Border: DNBorder read get_Border write set_Border;
    property ActiveState: string read get_ActiveState write set_ActiveState;
    property Characteristics: DNCharacteristics read get_Characteristics;
    property States: DNAppearanceDictionary read get_States;
    property Alignment: DNTextAlignment read get_Alignment write set_Alignment;
    property HorizontalAlignment: DNHorizontalAlignment read get_HorizontalAlignment write set_HorizontalAlignment;
    property TextHorizontalAlignment: DNHorizontalAlignment read get_TextHorizontalAlignment write set_TextHorizontalAlignment;
    property FullName: string read get_FullName;
    property Appearance: DNAppearanceDictionary read get_Appearance;
    property VerticalAlignment: DNVerticalAlignment read get_VerticalAlignment write set_VerticalAlignment;
    property Margin: DNMarginInfo read get_Margin write set_Margin;
    property IsFirstParagraphInColumn: Boolean read get_IsFirstParagraphInColumn write set_IsFirstParagraphInColumn;
    property IsKeptWithNext: Boolean read get_IsKeptWithNext write set_IsKeptWithNext;
    property IsInNewPage: Boolean read get_IsInNewPage write set_IsInNewPage;
    property IsInLineParagraph: Boolean read get_IsInLineParagraph write set_IsInLineParagraph;
    property Hyperlink: DNHyperlink read get_Hyperlink write set_Hyperlink;
    property ZIndex: Int32 read get_ZIndex write set_ZIndex;
  end;

  TDNChoiceField = class(TDNGenericImport<DNChoiceFieldClass, DNChoiceField>) end;

  //-------------namespace: Aspose.Pdf.Forms----------------
  DNComboBoxFieldClass = interface(DNChoiceFieldClass)
  ['{A824B83D-6C35-5F89-B73E-DCC9AF8F4AEF}']
  { constructors } 

    {class} function init: DNComboBoxField; overload;
    {class} function init(doc: DNDocument): DNComboBoxField; overload;
    {class} function init(page: DNPage; rect: DNPdf_Rectangle): DNComboBoxField; overload;
    {class} function init(doc: DNDocument; rect: DNPdf_Rectangle): DNComboBoxField; overload;

  end;

  [DNTypeName('Aspose.Pdf.Forms.ComboBoxField')]
  DNComboBoxField = interface(DNChoiceField)
  ['{E4EEE2CB-BF7F-3573-AFDC-33E9DB9AA3F1}']
  { getters & setters } 

    function get_Editable: Boolean;
    procedure set_Editable(value: Boolean);
    function get_SpellCheck: Boolean;
    procedure set_SpellCheck(value: Boolean);
    function get_CommitImmediately: Boolean;
    procedure set_CommitImmediately(value: Boolean);
    function get_MultiSelect: Boolean;
    procedure set_MultiSelect(value: Boolean);
    function get_Selected: Int32;
    procedure set_Selected(value: Int32);
    function get_SelectedItems: TArray<Int32>;
    procedure set_SelectedItems(value: TArray<Int32>);
    function get_Options: DNOptionCollection;
    function get_Value: string;
    procedure set_Value(value: string);
    function get_PartialName: string;
    procedure set_PartialName(value: string);
    function get_AlternateName: string;
    procedure set_AlternateName(value: string);
    function get_MappingName: string;
    procedure set_MappingName(value: string);
    function get_IsSynchronized: Boolean;
    function get_Count: Int32;
    function get_SyncRoot: DDN.mscorlib.DNObject;
    function get_IsGroup: Boolean;
    function get_Item(name: string): DNWidgetAnnotation; overload;
    function get_Item(index: Int32): DNWidgetAnnotation; overload;
    function get_AnnotationIndex: Int32;
    procedure set_AnnotationIndex(value: Int32);
    function get_PageIndex: Int32;
    function get_Rect: DNPdf_Rectangle;
    procedure set_Rect(value: DNPdf_Rectangle);
    function get_IsSharedField: Boolean;
    procedure set_IsSharedField(value: Boolean);
    function get_TabOrder: Int32;
    procedure set_TabOrder(value: Int32);
    function get_OnActivated: DNPdfAction;
    procedure set_OnActivated(value: DNPdfAction);
    function get_Actions: DNAnnotationActionCollection;
    function get_Highlighting: DNHighlightingMode;
    procedure set_Highlighting(value: DNHighlightingMode);
    function get_Parent: DNField;
    function get_DefaultAppearance: DNDefaultAppearance;
    procedure set_DefaultAppearance(value: DNDefaultAppearance);
    function get_ReadOnly: Boolean;
    procedure set_ReadOnly(value: Boolean);
    function get_Required: Boolean;
    procedure set_Required(value: Boolean);
    function get_Exportable: Boolean;
    procedure set_Exportable(value: Boolean);
    function get_AnnotationType: DNAnnotationType;
    function get_Flags: DNAnnotationFlags;
    procedure set_Flags(value: DNAnnotationFlags);
    function get_Width: Double;
    procedure set_Width(value: Double);
    function get_Height: Double;
    procedure set_Height(value: Double);
    function get_Contents: string;
    procedure set_Contents(value: string);
    function get_Name: string;
    procedure set_Name(value: string);
    function get_Modified: DDN.mscorlib.DNDateTime;
    procedure set_Modified(value: DDN.mscorlib.DNDateTime);
    function get_Color: DNColor;
    procedure set_Color(value: DNColor);
    function get_Border: DNBorder;
    procedure set_Border(value: DNBorder);
    function get_ActiveState: string;
    procedure set_ActiveState(value: string);
    function get_Characteristics: DNCharacteristics;
    function get_States: DNAppearanceDictionary;
    function get_Alignment: DNTextAlignment;
    procedure set_Alignment(value: DNTextAlignment);
    function get_HorizontalAlignment: DNHorizontalAlignment;
    procedure set_HorizontalAlignment(value: DNHorizontalAlignment);
    function get_TextHorizontalAlignment: DNHorizontalAlignment;
    procedure set_TextHorizontalAlignment(value: DNHorizontalAlignment);
    function get_FullName: string;
    function get_Appearance: DNAppearanceDictionary;
    function get_VerticalAlignment: DNVerticalAlignment;
    procedure set_VerticalAlignment(value: DNVerticalAlignment);
    function get_Margin: DNMarginInfo;
    procedure set_Margin(value: DNMarginInfo);
    function get_IsFirstParagraphInColumn: Boolean;
    procedure set_IsFirstParagraphInColumn(value: Boolean);
    function get_IsKeptWithNext: Boolean;
    procedure set_IsKeptWithNext(value: Boolean);
    function get_IsInNewPage: Boolean;
    procedure set_IsInNewPage(value: Boolean);
    function get_IsInLineParagraph: Boolean;
    procedure set_IsInLineParagraph(value: Boolean);
    function get_Hyperlink: DNHyperlink;
    procedure set_Hyperlink(value: DNHyperlink);
    function get_ZIndex: Int32;
    procedure set_ZIndex(value: Int32);

  { methods } 

    procedure AddOption(optionName: string); overload;
    procedure AddOption(&export: string; name: string); overload;
    procedure DeleteOption(optionName: string);
    function Recalculate: Boolean;
    procedure CopyTo(&array: TArray<DNField>; index: Int32);
    function GetEnumerator: DDN.mscorlib.DNIEnumerator<DNWidgetAnnotation>;
    procedure Flatten;
    procedure SetPosition(point: DNPoint);
    procedure Accept(visitor: DNAnnotationSelector);
    function GetRectangle(considerRotation: Boolean): DNPdf_Rectangle;
    function Clone: DDN.mscorlib.DNObject;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Editable: Boolean read get_Editable write set_Editable;
    property SpellCheck: Boolean read get_SpellCheck write set_SpellCheck;
    property CommitImmediately: Boolean read get_CommitImmediately write set_CommitImmediately;
    property MultiSelect: Boolean read get_MultiSelect write set_MultiSelect;
    property Selected: Int32 read get_Selected write set_Selected;
    property SelectedItems: TArray<Int32> read get_SelectedItems write set_SelectedItems;
    property Options: DNOptionCollection read get_Options;
    property Value: string read get_Value write set_Value;
    property PartialName: string read get_PartialName write set_PartialName;
    property AlternateName: string read get_AlternateName write set_AlternateName;
    property MappingName: string read get_MappingName write set_MappingName;
    property IsSynchronized: Boolean read get_IsSynchronized;
    property Count: Int32 read get_Count;
    property SyncRoot: DDN.mscorlib.DNObject read get_SyncRoot;
    property IsGroup: Boolean read get_IsGroup;
    property Item[name: string]: DNWidgetAnnotation read get_Item; default;
    property Item[index: Int32]: DNWidgetAnnotation read get_Item; default;
    property AnnotationIndex: Int32 read get_AnnotationIndex write set_AnnotationIndex;
    property PageIndex: Int32 read get_PageIndex;
    property Rect: DNPdf_Rectangle read get_Rect write set_Rect;
    property IsSharedField: Boolean read get_IsSharedField write set_IsSharedField;
    property TabOrder: Int32 read get_TabOrder write set_TabOrder;
    property OnActivated: DNPdfAction read get_OnActivated write set_OnActivated;
    property Actions: DNAnnotationActionCollection read get_Actions;
    property Highlighting: DNHighlightingMode read get_Highlighting write set_Highlighting;
    property Parent: DNField read get_Parent;
    property DefaultAppearance: DNDefaultAppearance read get_DefaultAppearance write set_DefaultAppearance;
    property ReadOnly: Boolean read get_ReadOnly write set_ReadOnly;
    property Required: Boolean read get_Required write set_Required;
    property Exportable: Boolean read get_Exportable write set_Exportable;
    property AnnotationType: DNAnnotationType read get_AnnotationType;
    property Flags: DNAnnotationFlags read get_Flags write set_Flags;
    property Width: Double read get_Width write set_Width;
    property Height: Double read get_Height write set_Height;
    property Contents: string read get_Contents write set_Contents;
    property Name: string read get_Name write set_Name;
    property Modified: DDN.mscorlib.DNDateTime read get_Modified write set_Modified;
    property Color: DNColor read get_Color write set_Color;
    property Border: DNBorder read get_Border write set_Border;
    property ActiveState: string read get_ActiveState write set_ActiveState;
    property Characteristics: DNCharacteristics read get_Characteristics;
    property States: DNAppearanceDictionary read get_States;
    property Alignment: DNTextAlignment read get_Alignment write set_Alignment;
    property HorizontalAlignment: DNHorizontalAlignment read get_HorizontalAlignment write set_HorizontalAlignment;
    property TextHorizontalAlignment: DNHorizontalAlignment read get_TextHorizontalAlignment write set_TextHorizontalAlignment;
    property FullName: string read get_FullName;
    property Appearance: DNAppearanceDictionary read get_Appearance;
    property VerticalAlignment: DNVerticalAlignment read get_VerticalAlignment write set_VerticalAlignment;
    property Margin: DNMarginInfo read get_Margin write set_Margin;
    property IsFirstParagraphInColumn: Boolean read get_IsFirstParagraphInColumn write set_IsFirstParagraphInColumn;
    property IsKeptWithNext: Boolean read get_IsKeptWithNext write set_IsKeptWithNext;
    property IsInNewPage: Boolean read get_IsInNewPage write set_IsInNewPage;
    property IsInLineParagraph: Boolean read get_IsInLineParagraph write set_IsInLineParagraph;
    property Hyperlink: DNHyperlink read get_Hyperlink write set_Hyperlink;
    property ZIndex: Int32 read get_ZIndex write set_ZIndex;
  end;

  TDNComboBoxField = class(TDNGenericImport<DNComboBoxFieldClass, DNComboBoxField>) end;

  //-------------namespace: Aspose.Pdf.Forms----------------
  DNListBoxFieldClass = interface(DNChoiceFieldClass)
  ['{B246C696-42EB-5D0B-8012-4E81A03808FF}']
  { static getter & setter } 

    procedure set_Selected(value: Int32);
    procedure set_SelectedItems(value: TArray<Int32>);

  { constructors } 

    {class} function init: DNListBoxField; overload;
    {class} function init(page: DNPage; rect: DNPdf_Rectangle): DNListBoxField; overload;
    {class} function init(doc: DNDocument; rect: DNPdf_Rectangle): DNListBoxField; overload;

  { static propertys } 

    {class} property Selected: Int32 write set_Selected;
    {class} property SelectedItems: TArray<Int32> write set_SelectedItems;
  end;

  [DNTypeName('Aspose.Pdf.Forms.ListBoxField')]
  DNListBoxField = interface(DNChoiceField)
  ['{3C0D3999-8A56-3D4A-B3C7-BEE986E21D69}']
  { getters & setters } 

    function get_TopIndex: Int32;
    procedure set_TopIndex(value: Int32);
    procedure set_Selected(value: Int32);
    procedure set_SelectedItems(value: TArray<Int32>);
    function get_CommitImmediately: Boolean;
    procedure set_CommitImmediately(value: Boolean);
    function get_MultiSelect: Boolean;
    procedure set_MultiSelect(value: Boolean);
    function get_Options: DNOptionCollection;
    function get_Value: string;
    procedure set_Value(value: string);
    function get_PartialName: string;
    procedure set_PartialName(value: string);
    function get_AlternateName: string;
    procedure set_AlternateName(value: string);
    function get_MappingName: string;
    procedure set_MappingName(value: string);
    function get_IsSynchronized: Boolean;
    function get_Count: Int32;
    function get_SyncRoot: DDN.mscorlib.DNObject;
    function get_IsGroup: Boolean;
    function get_Item(name: string): DNWidgetAnnotation; overload;
    function get_Item(index: Int32): DNWidgetAnnotation; overload;
    function get_AnnotationIndex: Int32;
    procedure set_AnnotationIndex(value: Int32);
    function get_PageIndex: Int32;
    function get_Rect: DNPdf_Rectangle;
    procedure set_Rect(value: DNPdf_Rectangle);
    function get_IsSharedField: Boolean;
    procedure set_IsSharedField(value: Boolean);
    function get_TabOrder: Int32;
    procedure set_TabOrder(value: Int32);
    function get_OnActivated: DNPdfAction;
    procedure set_OnActivated(value: DNPdfAction);
    function get_Actions: DNAnnotationActionCollection;
    function get_Highlighting: DNHighlightingMode;
    procedure set_Highlighting(value: DNHighlightingMode);
    function get_Parent: DNField;
    function get_DefaultAppearance: DNDefaultAppearance;
    procedure set_DefaultAppearance(value: DNDefaultAppearance);
    function get_ReadOnly: Boolean;
    procedure set_ReadOnly(value: Boolean);
    function get_Required: Boolean;
    procedure set_Required(value: Boolean);
    function get_Exportable: Boolean;
    procedure set_Exportable(value: Boolean);
    function get_AnnotationType: DNAnnotationType;
    function get_Flags: DNAnnotationFlags;
    procedure set_Flags(value: DNAnnotationFlags);
    function get_Width: Double;
    procedure set_Width(value: Double);
    function get_Height: Double;
    procedure set_Height(value: Double);
    function get_Contents: string;
    procedure set_Contents(value: string);
    function get_Name: string;
    procedure set_Name(value: string);
    function get_Modified: DDN.mscorlib.DNDateTime;
    procedure set_Modified(value: DDN.mscorlib.DNDateTime);
    function get_Color: DNColor;
    procedure set_Color(value: DNColor);
    function get_Border: DNBorder;
    procedure set_Border(value: DNBorder);
    function get_ActiveState: string;
    procedure set_ActiveState(value: string);
    function get_Characteristics: DNCharacteristics;
    function get_States: DNAppearanceDictionary;
    function get_Alignment: DNTextAlignment;
    procedure set_Alignment(value: DNTextAlignment);
    function get_HorizontalAlignment: DNHorizontalAlignment;
    procedure set_HorizontalAlignment(value: DNHorizontalAlignment);
    function get_TextHorizontalAlignment: DNHorizontalAlignment;
    procedure set_TextHorizontalAlignment(value: DNHorizontalAlignment);
    function get_FullName: string;
    function get_Appearance: DNAppearanceDictionary;
    function get_VerticalAlignment: DNVerticalAlignment;
    procedure set_VerticalAlignment(value: DNVerticalAlignment);
    function get_Margin: DNMarginInfo;
    procedure set_Margin(value: DNMarginInfo);
    function get_IsFirstParagraphInColumn: Boolean;
    procedure set_IsFirstParagraphInColumn(value: Boolean);
    function get_IsKeptWithNext: Boolean;
    procedure set_IsKeptWithNext(value: Boolean);
    function get_IsInNewPage: Boolean;
    procedure set_IsInNewPage(value: Boolean);
    function get_IsInLineParagraph: Boolean;
    procedure set_IsInLineParagraph(value: Boolean);
    function get_Hyperlink: DNHyperlink;
    procedure set_Hyperlink(value: DNHyperlink);
    function get_ZIndex: Int32;
    procedure set_ZIndex(value: Int32);

  { methods } 

    procedure AddOption(optionName: string); overload;
    procedure AddOption(&export: string; name: string); overload;
    procedure DeleteOption(optionName: string);
    function Recalculate: Boolean;
    procedure CopyTo(&array: TArray<DNField>; index: Int32);
    function GetEnumerator: DDN.mscorlib.DNIEnumerator<DNWidgetAnnotation>;
    procedure Flatten;
    procedure SetPosition(point: DNPoint);
    procedure Accept(visitor: DNAnnotationSelector);
    function GetRectangle(considerRotation: Boolean): DNPdf_Rectangle;
    function Clone: DDN.mscorlib.DNObject;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property TopIndex: Int32 read get_TopIndex write set_TopIndex;
    property Selected: Int32 write set_Selected;
    property SelectedItems: TArray<Int32> write set_SelectedItems;
    property CommitImmediately: Boolean read get_CommitImmediately write set_CommitImmediately;
    property MultiSelect: Boolean read get_MultiSelect write set_MultiSelect;
    property Options: DNOptionCollection read get_Options;
    property Value: string read get_Value write set_Value;
    property PartialName: string read get_PartialName write set_PartialName;
    property AlternateName: string read get_AlternateName write set_AlternateName;
    property MappingName: string read get_MappingName write set_MappingName;
    property IsSynchronized: Boolean read get_IsSynchronized;
    property Count: Int32 read get_Count;
    property SyncRoot: DDN.mscorlib.DNObject read get_SyncRoot;
    property IsGroup: Boolean read get_IsGroup;
    property Item[name: string]: DNWidgetAnnotation read get_Item; default;
    property Item[index: Int32]: DNWidgetAnnotation read get_Item; default;
    property AnnotationIndex: Int32 read get_AnnotationIndex write set_AnnotationIndex;
    property PageIndex: Int32 read get_PageIndex;
    property Rect: DNPdf_Rectangle read get_Rect write set_Rect;
    property IsSharedField: Boolean read get_IsSharedField write set_IsSharedField;
    property TabOrder: Int32 read get_TabOrder write set_TabOrder;
    property OnActivated: DNPdfAction read get_OnActivated write set_OnActivated;
    property Actions: DNAnnotationActionCollection read get_Actions;
    property Highlighting: DNHighlightingMode read get_Highlighting write set_Highlighting;
    property Parent: DNField read get_Parent;
    property DefaultAppearance: DNDefaultAppearance read get_DefaultAppearance write set_DefaultAppearance;
    property ReadOnly: Boolean read get_ReadOnly write set_ReadOnly;
    property Required: Boolean read get_Required write set_Required;
    property Exportable: Boolean read get_Exportable write set_Exportable;
    property AnnotationType: DNAnnotationType read get_AnnotationType;
    property Flags: DNAnnotationFlags read get_Flags write set_Flags;
    property Width: Double read get_Width write set_Width;
    property Height: Double read get_Height write set_Height;
    property Contents: string read get_Contents write set_Contents;
    property Name: string read get_Name write set_Name;
    property Modified: DDN.mscorlib.DNDateTime read get_Modified write set_Modified;
    property Color: DNColor read get_Color write set_Color;
    property Border: DNBorder read get_Border write set_Border;
    property ActiveState: string read get_ActiveState write set_ActiveState;
    property Characteristics: DNCharacteristics read get_Characteristics;
    property States: DNAppearanceDictionary read get_States;
    property Alignment: DNTextAlignment read get_Alignment write set_Alignment;
    property HorizontalAlignment: DNHorizontalAlignment read get_HorizontalAlignment write set_HorizontalAlignment;
    property TextHorizontalAlignment: DNHorizontalAlignment read get_TextHorizontalAlignment write set_TextHorizontalAlignment;
    property FullName: string read get_FullName;
    property Appearance: DNAppearanceDictionary read get_Appearance;
    property VerticalAlignment: DNVerticalAlignment read get_VerticalAlignment write set_VerticalAlignment;
    property Margin: DNMarginInfo read get_Margin write set_Margin;
    property IsFirstParagraphInColumn: Boolean read get_IsFirstParagraphInColumn write set_IsFirstParagraphInColumn;
    property IsKeptWithNext: Boolean read get_IsKeptWithNext write set_IsKeptWithNext;
    property IsInNewPage: Boolean read get_IsInNewPage write set_IsInNewPage;
    property IsInLineParagraph: Boolean read get_IsInLineParagraph write set_IsInLineParagraph;
    property Hyperlink: DNHyperlink read get_Hyperlink write set_Hyperlink;
    property ZIndex: Int32 read get_ZIndex write set_ZIndex;
  end;

  TDNListBoxField = class(TDNGenericImport<DNListBoxFieldClass, DNListBoxField>) end;

  //-------------namespace: Aspose.Pdf.Forms----------------
  DNRadioButtonFieldClass = interface(DNChoiceFieldClass)
  ['{57D20B0B-5C20-519C-AA4D-138F074E4F70}']
  { constructors } 

    {class} function init(page: DNPage): DNRadioButtonField; overload;
    {class} function init(doc: DNDocument): DNRadioButtonField; overload;

  end;

  [DNTypeName('Aspose.Pdf.Forms.RadioButtonField')]
  DNRadioButtonField = interface(DNChoiceField)
  ['{B604ECC6-AF30-3CCF-AA1A-F950DE29E0B5}']
  { getters & setters } 

    function get_Style: DNBoxStyle;
    procedure set_Style(value: DNBoxStyle);
    function get_Selected: Int32;
    procedure set_Selected(value: Int32);
    function get_Options: DNOptionCollection;
    function get_PageIndex: Int32;
    function get_Value: string;
    procedure set_Value(value: string);
    function get_CommitImmediately: Boolean;
    procedure set_CommitImmediately(value: Boolean);
    function get_MultiSelect: Boolean;
    procedure set_MultiSelect(value: Boolean);
    function get_SelectedItems: TArray<Int32>;
    procedure set_SelectedItems(value: TArray<Int32>);
    function get_PartialName: string;
    procedure set_PartialName(value: string);
    function get_AlternateName: string;
    procedure set_AlternateName(value: string);
    function get_MappingName: string;
    procedure set_MappingName(value: string);
    function get_IsSynchronized: Boolean;
    function get_Count: Int32;
    function get_SyncRoot: DDN.mscorlib.DNObject;
    function get_IsGroup: Boolean;
    function get_Item(name: string): DNWidgetAnnotation; overload;
    function get_Item(index: Int32): DNWidgetAnnotation; overload;
    function get_AnnotationIndex: Int32;
    procedure set_AnnotationIndex(value: Int32);
    function get_Rect: DNPdf_Rectangle;
    procedure set_Rect(value: DNPdf_Rectangle);
    function get_IsSharedField: Boolean;
    procedure set_IsSharedField(value: Boolean);
    function get_TabOrder: Int32;
    procedure set_TabOrder(value: Int32);
    function get_OnActivated: DNPdfAction;
    procedure set_OnActivated(value: DNPdfAction);
    function get_Actions: DNAnnotationActionCollection;
    function get_Highlighting: DNHighlightingMode;
    procedure set_Highlighting(value: DNHighlightingMode);
    function get_Parent: DNField;
    function get_DefaultAppearance: DNDefaultAppearance;
    procedure set_DefaultAppearance(value: DNDefaultAppearance);
    function get_ReadOnly: Boolean;
    procedure set_ReadOnly(value: Boolean);
    function get_Required: Boolean;
    procedure set_Required(value: Boolean);
    function get_Exportable: Boolean;
    procedure set_Exportable(value: Boolean);
    function get_AnnotationType: DNAnnotationType;
    function get_Flags: DNAnnotationFlags;
    procedure set_Flags(value: DNAnnotationFlags);
    function get_Width: Double;
    procedure set_Width(value: Double);
    function get_Height: Double;
    procedure set_Height(value: Double);
    function get_Contents: string;
    procedure set_Contents(value: string);
    function get_Name: string;
    procedure set_Name(value: string);
    function get_Modified: DDN.mscorlib.DNDateTime;
    procedure set_Modified(value: DDN.mscorlib.DNDateTime);
    function get_Color: DNColor;
    procedure set_Color(value: DNColor);
    function get_Border: DNBorder;
    procedure set_Border(value: DNBorder);
    function get_ActiveState: string;
    procedure set_ActiveState(value: string);
    function get_Characteristics: DNCharacteristics;
    function get_States: DNAppearanceDictionary;
    function get_Alignment: DNTextAlignment;
    procedure set_Alignment(value: DNTextAlignment);
    function get_HorizontalAlignment: DNHorizontalAlignment;
    procedure set_HorizontalAlignment(value: DNHorizontalAlignment);
    function get_TextHorizontalAlignment: DNHorizontalAlignment;
    procedure set_TextHorizontalAlignment(value: DNHorizontalAlignment);
    function get_FullName: string;
    function get_Appearance: DNAppearanceDictionary;
    function get_VerticalAlignment: DNVerticalAlignment;
    procedure set_VerticalAlignment(value: DNVerticalAlignment);
    function get_Margin: DNMarginInfo;
    procedure set_Margin(value: DNMarginInfo);
    function get_IsFirstParagraphInColumn: Boolean;
    procedure set_IsFirstParagraphInColumn(value: Boolean);
    function get_IsKeptWithNext: Boolean;
    procedure set_IsKeptWithNext(value: Boolean);
    function get_IsInNewPage: Boolean;
    procedure set_IsInNewPage(value: Boolean);
    function get_IsInLineParagraph: Boolean;
    procedure set_IsInLineParagraph(value: Boolean);
    function get_Hyperlink: DNHyperlink;
    procedure set_Hyperlink(value: DNHyperlink);
    function get_ZIndex: Int32;
    procedure set_ZIndex(value: Int32);

  { methods } 

    procedure Add(newItem: DNRadioButtonOptionField);
    procedure AddOption(optionName: string; rect: DNPdf_Rectangle); overload;
    procedure AddOption(optionName: string); overload;
    procedure SetPosition(point: DNPoint);
    procedure AddOption(&export: string; name: string); overload;
    procedure DeleteOption(optionName: string);
    function Recalculate: Boolean;
    procedure CopyTo(&array: TArray<DNField>; index: Int32);
    function GetEnumerator: DDN.mscorlib.DNIEnumerator<DNWidgetAnnotation>;
    procedure Flatten;
    procedure Accept(visitor: DNAnnotationSelector);
    function GetRectangle(considerRotation: Boolean): DNPdf_Rectangle;
    function Clone: DDN.mscorlib.DNObject;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Style: DNBoxStyle read get_Style write set_Style;
    property Selected: Int32 read get_Selected write set_Selected;
    property Options: DNOptionCollection read get_Options;
    property PageIndex: Int32 read get_PageIndex;
    property Value: string read get_Value write set_Value;
    property CommitImmediately: Boolean read get_CommitImmediately write set_CommitImmediately;
    property MultiSelect: Boolean read get_MultiSelect write set_MultiSelect;
    property SelectedItems: TArray<Int32> read get_SelectedItems write set_SelectedItems;
    property PartialName: string read get_PartialName write set_PartialName;
    property AlternateName: string read get_AlternateName write set_AlternateName;
    property MappingName: string read get_MappingName write set_MappingName;
    property IsSynchronized: Boolean read get_IsSynchronized;
    property Count: Int32 read get_Count;
    property SyncRoot: DDN.mscorlib.DNObject read get_SyncRoot;
    property IsGroup: Boolean read get_IsGroup;
    property Item[name: string]: DNWidgetAnnotation read get_Item; default;
    property Item[index: Int32]: DNWidgetAnnotation read get_Item; default;
    property AnnotationIndex: Int32 read get_AnnotationIndex write set_AnnotationIndex;
    property Rect: DNPdf_Rectangle read get_Rect write set_Rect;
    property IsSharedField: Boolean read get_IsSharedField write set_IsSharedField;
    property TabOrder: Int32 read get_TabOrder write set_TabOrder;
    property OnActivated: DNPdfAction read get_OnActivated write set_OnActivated;
    property Actions: DNAnnotationActionCollection read get_Actions;
    property Highlighting: DNHighlightingMode read get_Highlighting write set_Highlighting;
    property Parent: DNField read get_Parent;
    property DefaultAppearance: DNDefaultAppearance read get_DefaultAppearance write set_DefaultAppearance;
    property ReadOnly: Boolean read get_ReadOnly write set_ReadOnly;
    property Required: Boolean read get_Required write set_Required;
    property Exportable: Boolean read get_Exportable write set_Exportable;
    property AnnotationType: DNAnnotationType read get_AnnotationType;
    property Flags: DNAnnotationFlags read get_Flags write set_Flags;
    property Width: Double read get_Width write set_Width;
    property Height: Double read get_Height write set_Height;
    property Contents: string read get_Contents write set_Contents;
    property Name: string read get_Name write set_Name;
    property Modified: DDN.mscorlib.DNDateTime read get_Modified write set_Modified;
    property Color: DNColor read get_Color write set_Color;
    property Border: DNBorder read get_Border write set_Border;
    property ActiveState: string read get_ActiveState write set_ActiveState;
    property Characteristics: DNCharacteristics read get_Characteristics;
    property States: DNAppearanceDictionary read get_States;
    property Alignment: DNTextAlignment read get_Alignment write set_Alignment;
    property HorizontalAlignment: DNHorizontalAlignment read get_HorizontalAlignment write set_HorizontalAlignment;
    property TextHorizontalAlignment: DNHorizontalAlignment read get_TextHorizontalAlignment write set_TextHorizontalAlignment;
    property FullName: string read get_FullName;
    property Appearance: DNAppearanceDictionary read get_Appearance;
    property VerticalAlignment: DNVerticalAlignment read get_VerticalAlignment write set_VerticalAlignment;
    property Margin: DNMarginInfo read get_Margin write set_Margin;
    property IsFirstParagraphInColumn: Boolean read get_IsFirstParagraphInColumn write set_IsFirstParagraphInColumn;
    property IsKeptWithNext: Boolean read get_IsKeptWithNext write set_IsKeptWithNext;
    property IsInNewPage: Boolean read get_IsInNewPage write set_IsInNewPage;
    property IsInLineParagraph: Boolean read get_IsInLineParagraph write set_IsInLineParagraph;
    property Hyperlink: DNHyperlink read get_Hyperlink write set_Hyperlink;
    property ZIndex: Int32 read get_ZIndex write set_ZIndex;
  end;

  TDNRadioButtonField = class(TDNGenericImport<DNRadioButtonFieldClass, DNRadioButtonField>) end;

  //-------------namespace: Aspose.Pdf.Forms----------------
  DNRadioButtonOptionFieldClass = interface(DNFieldClass)
  ['{A9D17CD2-E23A-57A1-9389-18D7DE4BE421}']
  { constructors } 

    {class} function init: DNRadioButtonOptionField; overload;
    {class} function init(page: DNPage; rect: DNPdf_Rectangle): DNRadioButtonOptionField; overload;

  end;

  [DNTypeName('Aspose.Pdf.Forms.RadioButtonOptionField')]
  DNRadioButtonOptionField = interface(DNField)
  ['{6D25AFD4-3C5F-38FE-BB68-E2F62D6FAF2B}']
  { getters & setters } 

    function get_OptionName: string;
    procedure set_OptionName(value: string);
    function get_Caption: DNTextFragment;
    procedure set_Caption(value: DNTextFragment);
    function get_Style: DNBoxStyle;
    procedure set_Style(value: DNBoxStyle);
    function get_PartialName: string;
    procedure set_PartialName(value: string);
    function get_AlternateName: string;
    procedure set_AlternateName(value: string);
    function get_MappingName: string;
    procedure set_MappingName(value: string);
    function get_Value: string;
    procedure set_Value(value: string);
    function get_IsSynchronized: Boolean;
    function get_Count: Int32;
    function get_SyncRoot: DDN.mscorlib.DNObject;
    function get_IsGroup: Boolean;
    function get_Item(name: string): DNWidgetAnnotation; overload;
    function get_Item(index: Int32): DNWidgetAnnotation; overload;
    function get_AnnotationIndex: Int32;
    procedure set_AnnotationIndex(value: Int32);
    function get_PageIndex: Int32;
    function get_Rect: DNPdf_Rectangle;
    procedure set_Rect(value: DNPdf_Rectangle);
    function get_IsSharedField: Boolean;
    procedure set_IsSharedField(value: Boolean);
    function get_TabOrder: Int32;
    procedure set_TabOrder(value: Int32);
    function get_OnActivated: DNPdfAction;
    procedure set_OnActivated(value: DNPdfAction);
    function get_Actions: DNAnnotationActionCollection;
    function get_Highlighting: DNHighlightingMode;
    procedure set_Highlighting(value: DNHighlightingMode);
    function get_Parent: DNField;
    function get_DefaultAppearance: DNDefaultAppearance;
    procedure set_DefaultAppearance(value: DNDefaultAppearance);
    function get_ReadOnly: Boolean;
    procedure set_ReadOnly(value: Boolean);
    function get_Required: Boolean;
    procedure set_Required(value: Boolean);
    function get_Exportable: Boolean;
    procedure set_Exportable(value: Boolean);
    function get_AnnotationType: DNAnnotationType;
    function get_Flags: DNAnnotationFlags;
    procedure set_Flags(value: DNAnnotationFlags);
    function get_Width: Double;
    procedure set_Width(value: Double);
    function get_Height: Double;
    procedure set_Height(value: Double);
    function get_Contents: string;
    procedure set_Contents(value: string);
    function get_Name: string;
    procedure set_Name(value: string);
    function get_Modified: DDN.mscorlib.DNDateTime;
    procedure set_Modified(value: DDN.mscorlib.DNDateTime);
    function get_Color: DNColor;
    procedure set_Color(value: DNColor);
    function get_Border: DNBorder;
    procedure set_Border(value: DNBorder);
    function get_ActiveState: string;
    procedure set_ActiveState(value: string);
    function get_Characteristics: DNCharacteristics;
    function get_States: DNAppearanceDictionary;
    function get_Alignment: DNTextAlignment;
    procedure set_Alignment(value: DNTextAlignment);
    function get_HorizontalAlignment: DNHorizontalAlignment;
    procedure set_HorizontalAlignment(value: DNHorizontalAlignment);
    function get_TextHorizontalAlignment: DNHorizontalAlignment;
    procedure set_TextHorizontalAlignment(value: DNHorizontalAlignment);
    function get_FullName: string;
    function get_Appearance: DNAppearanceDictionary;
    function get_VerticalAlignment: DNVerticalAlignment;
    procedure set_VerticalAlignment(value: DNVerticalAlignment);
    function get_Margin: DNMarginInfo;
    procedure set_Margin(value: DNMarginInfo);
    function get_IsFirstParagraphInColumn: Boolean;
    procedure set_IsFirstParagraphInColumn(value: Boolean);
    function get_IsKeptWithNext: Boolean;
    procedure set_IsKeptWithNext(value: Boolean);
    function get_IsInNewPage: Boolean;
    procedure set_IsInNewPage(value: Boolean);
    function get_IsInLineParagraph: Boolean;
    procedure set_IsInLineParagraph(value: Boolean);
    function get_Hyperlink: DNHyperlink;
    procedure set_Hyperlink(value: DNHyperlink);
    function get_ZIndex: Int32;
    procedure set_ZIndex(value: Int32);

  { methods } 

    function Recalculate: Boolean;
    procedure CopyTo(&array: TArray<DNField>; index: Int32);
    function GetEnumerator: DDN.mscorlib.DNIEnumerator<DNWidgetAnnotation>;
    procedure Flatten;
    procedure SetPosition(point: DNPoint);
    procedure Accept(visitor: DNAnnotationSelector);
    function GetRectangle(considerRotation: Boolean): DNPdf_Rectangle;
    function Clone: DDN.mscorlib.DNObject;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property OptionName: string read get_OptionName write set_OptionName;
    property Caption: DNTextFragment read get_Caption write set_Caption;
    property Style: DNBoxStyle read get_Style write set_Style;
    property PartialName: string read get_PartialName write set_PartialName;
    property AlternateName: string read get_AlternateName write set_AlternateName;
    property MappingName: string read get_MappingName write set_MappingName;
    property Value: string read get_Value write set_Value;
    property IsSynchronized: Boolean read get_IsSynchronized;
    property Count: Int32 read get_Count;
    property SyncRoot: DDN.mscorlib.DNObject read get_SyncRoot;
    property IsGroup: Boolean read get_IsGroup;
    property Item[name: string]: DNWidgetAnnotation read get_Item; default;
    property Item[index: Int32]: DNWidgetAnnotation read get_Item; default;
    property AnnotationIndex: Int32 read get_AnnotationIndex write set_AnnotationIndex;
    property PageIndex: Int32 read get_PageIndex;
    property Rect: DNPdf_Rectangle read get_Rect write set_Rect;
    property IsSharedField: Boolean read get_IsSharedField write set_IsSharedField;
    property TabOrder: Int32 read get_TabOrder write set_TabOrder;
    property OnActivated: DNPdfAction read get_OnActivated write set_OnActivated;
    property Actions: DNAnnotationActionCollection read get_Actions;
    property Highlighting: DNHighlightingMode read get_Highlighting write set_Highlighting;
    property Parent: DNField read get_Parent;
    property DefaultAppearance: DNDefaultAppearance read get_DefaultAppearance write set_DefaultAppearance;
    property ReadOnly: Boolean read get_ReadOnly write set_ReadOnly;
    property Required: Boolean read get_Required write set_Required;
    property Exportable: Boolean read get_Exportable write set_Exportable;
    property AnnotationType: DNAnnotationType read get_AnnotationType;
    property Flags: DNAnnotationFlags read get_Flags write set_Flags;
    property Width: Double read get_Width write set_Width;
    property Height: Double read get_Height write set_Height;
    property Contents: string read get_Contents write set_Contents;
    property Name: string read get_Name write set_Name;
    property Modified: DDN.mscorlib.DNDateTime read get_Modified write set_Modified;
    property Color: DNColor read get_Color write set_Color;
    property Border: DNBorder read get_Border write set_Border;
    property ActiveState: string read get_ActiveState write set_ActiveState;
    property Characteristics: DNCharacteristics read get_Characteristics;
    property States: DNAppearanceDictionary read get_States;
    property Alignment: DNTextAlignment read get_Alignment write set_Alignment;
    property HorizontalAlignment: DNHorizontalAlignment read get_HorizontalAlignment write set_HorizontalAlignment;
    property TextHorizontalAlignment: DNHorizontalAlignment read get_TextHorizontalAlignment write set_TextHorizontalAlignment;
    property FullName: string read get_FullName;
    property Appearance: DNAppearanceDictionary read get_Appearance;
    property VerticalAlignment: DNVerticalAlignment read get_VerticalAlignment write set_VerticalAlignment;
    property Margin: DNMarginInfo read get_Margin write set_Margin;
    property IsFirstParagraphInColumn: Boolean read get_IsFirstParagraphInColumn write set_IsFirstParagraphInColumn;
    property IsKeptWithNext: Boolean read get_IsKeptWithNext write set_IsKeptWithNext;
    property IsInNewPage: Boolean read get_IsInNewPage write set_IsInNewPage;
    property IsInLineParagraph: Boolean read get_IsInLineParagraph write set_IsInLineParagraph;
    property Hyperlink: DNHyperlink read get_Hyperlink write set_Hyperlink;
    property ZIndex: Int32 read get_ZIndex write set_ZIndex;
  end;

  TDNRadioButtonOptionField = class(TDNGenericImport<DNRadioButtonOptionFieldClass, DNRadioButtonOptionField>) end;

  //-------------namespace: Aspose.Pdf.Forms----------------
  DNSignatureFieldClass = interface(DNFieldClass)
  ['{36A227EE-6F73-5A49-BFA9-D1AF25D2C48A}']
  { constructors } 

    {class} function init(page: DNPage; rect: DNPdf_Rectangle): DNSignatureField; overload;
    {class} function init(doc: DNDocument; rect: DNPdf_Rectangle): DNSignatureField; overload;

  end;

  [DNTypeName('Aspose.Pdf.Forms.SignatureField')]
  DNSignatureField = interface(DNField)
  ['{60145731-AA6C-3A3E-8524-4817D35FCF80}']
  { getters & setters } 

    function get_Signature: DNSignature;
    function get_PartialName: string;
    procedure set_PartialName(value: string);
    function get_AlternateName: string;
    procedure set_AlternateName(value: string);
    function get_MappingName: string;
    procedure set_MappingName(value: string);
    function get_Value: string;
    procedure set_Value(value: string);
    function get_IsSynchronized: Boolean;
    function get_Count: Int32;
    function get_SyncRoot: DDN.mscorlib.DNObject;
    function get_IsGroup: Boolean;
    function get_Item(name: string): DNWidgetAnnotation; overload;
    function get_Item(index: Int32): DNWidgetAnnotation; overload;
    function get_AnnotationIndex: Int32;
    procedure set_AnnotationIndex(value: Int32);
    function get_PageIndex: Int32;
    function get_Rect: DNPdf_Rectangle;
    procedure set_Rect(value: DNPdf_Rectangle);
    function get_IsSharedField: Boolean;
    procedure set_IsSharedField(value: Boolean);
    function get_TabOrder: Int32;
    procedure set_TabOrder(value: Int32);
    function get_OnActivated: DNPdfAction;
    procedure set_OnActivated(value: DNPdfAction);
    function get_Actions: DNAnnotationActionCollection;
    function get_Highlighting: DNHighlightingMode;
    procedure set_Highlighting(value: DNHighlightingMode);
    function get_Parent: DNField;
    function get_DefaultAppearance: DNDefaultAppearance;
    procedure set_DefaultAppearance(value: DNDefaultAppearance);
    function get_ReadOnly: Boolean;
    procedure set_ReadOnly(value: Boolean);
    function get_Required: Boolean;
    procedure set_Required(value: Boolean);
    function get_Exportable: Boolean;
    procedure set_Exportable(value: Boolean);
    function get_AnnotationType: DNAnnotationType;
    function get_Flags: DNAnnotationFlags;
    procedure set_Flags(value: DNAnnotationFlags);
    function get_Width: Double;
    procedure set_Width(value: Double);
    function get_Height: Double;
    procedure set_Height(value: Double);
    function get_Contents: string;
    procedure set_Contents(value: string);
    function get_Name: string;
    procedure set_Name(value: string);
    function get_Modified: DDN.mscorlib.DNDateTime;
    procedure set_Modified(value: DDN.mscorlib.DNDateTime);
    function get_Color: DNColor;
    procedure set_Color(value: DNColor);
    function get_Border: DNBorder;
    procedure set_Border(value: DNBorder);
    function get_ActiveState: string;
    procedure set_ActiveState(value: string);
    function get_Characteristics: DNCharacteristics;
    function get_States: DNAppearanceDictionary;
    function get_Alignment: DNTextAlignment;
    procedure set_Alignment(value: DNTextAlignment);
    function get_HorizontalAlignment: DNHorizontalAlignment;
    procedure set_HorizontalAlignment(value: DNHorizontalAlignment);
    function get_TextHorizontalAlignment: DNHorizontalAlignment;
    procedure set_TextHorizontalAlignment(value: DNHorizontalAlignment);
    function get_FullName: string;
    function get_Appearance: DNAppearanceDictionary;
    function get_VerticalAlignment: DNVerticalAlignment;
    procedure set_VerticalAlignment(value: DNVerticalAlignment);
    function get_Margin: DNMarginInfo;
    procedure set_Margin(value: DNMarginInfo);
    function get_IsFirstParagraphInColumn: Boolean;
    procedure set_IsFirstParagraphInColumn(value: Boolean);
    function get_IsKeptWithNext: Boolean;
    procedure set_IsKeptWithNext(value: Boolean);
    function get_IsInNewPage: Boolean;
    procedure set_IsInNewPage(value: Boolean);
    function get_IsInLineParagraph: Boolean;
    procedure set_IsInLineParagraph(value: Boolean);
    function get_Hyperlink: DNHyperlink;
    procedure set_Hyperlink(value: DNHyperlink);
    function get_ZIndex: Int32;
    procedure set_ZIndex(value: Int32);

  { methods } 

    procedure Sign(signature: DNSignature; pfx: DDN.mscorlib.DNStream; pass: string); overload;
    procedure Sign(signature: DNSignature); overload;
    function ExtractImage: DDN.mscorlib.DNStream; overload;
    function ExtractImage(format: DDN.System.Drawing.DNImageFormat): DDN.mscorlib.DNStream; overload;
    function ExtractCertificate: DDN.mscorlib.DNStream;
    function Recalculate: Boolean;
    procedure CopyTo(&array: TArray<DNField>; index: Int32);
    function GetEnumerator: DDN.mscorlib.DNIEnumerator<DNWidgetAnnotation>;
    procedure Flatten;
    procedure SetPosition(point: DNPoint);
    procedure Accept(visitor: DNAnnotationSelector);
    function GetRectangle(considerRotation: Boolean): DNPdf_Rectangle;
    function Clone: DDN.mscorlib.DNObject;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Signature: DNSignature read get_Signature;
    property PartialName: string read get_PartialName write set_PartialName;
    property AlternateName: string read get_AlternateName write set_AlternateName;
    property MappingName: string read get_MappingName write set_MappingName;
    property Value: string read get_Value write set_Value;
    property IsSynchronized: Boolean read get_IsSynchronized;
    property Count: Int32 read get_Count;
    property SyncRoot: DDN.mscorlib.DNObject read get_SyncRoot;
    property IsGroup: Boolean read get_IsGroup;
    property Item[name: string]: DNWidgetAnnotation read get_Item; default;
    property Item[index: Int32]: DNWidgetAnnotation read get_Item; default;
    property AnnotationIndex: Int32 read get_AnnotationIndex write set_AnnotationIndex;
    property PageIndex: Int32 read get_PageIndex;
    property Rect: DNPdf_Rectangle read get_Rect write set_Rect;
    property IsSharedField: Boolean read get_IsSharedField write set_IsSharedField;
    property TabOrder: Int32 read get_TabOrder write set_TabOrder;
    property OnActivated: DNPdfAction read get_OnActivated write set_OnActivated;
    property Actions: DNAnnotationActionCollection read get_Actions;
    property Highlighting: DNHighlightingMode read get_Highlighting write set_Highlighting;
    property Parent: DNField read get_Parent;
    property DefaultAppearance: DNDefaultAppearance read get_DefaultAppearance write set_DefaultAppearance;
    property ReadOnly: Boolean read get_ReadOnly write set_ReadOnly;
    property Required: Boolean read get_Required write set_Required;
    property Exportable: Boolean read get_Exportable write set_Exportable;
    property AnnotationType: DNAnnotationType read get_AnnotationType;
    property Flags: DNAnnotationFlags read get_Flags write set_Flags;
    property Width: Double read get_Width write set_Width;
    property Height: Double read get_Height write set_Height;
    property Contents: string read get_Contents write set_Contents;
    property Name: string read get_Name write set_Name;
    property Modified: DDN.mscorlib.DNDateTime read get_Modified write set_Modified;
    property Color: DNColor read get_Color write set_Color;
    property Border: DNBorder read get_Border write set_Border;
    property ActiveState: string read get_ActiveState write set_ActiveState;
    property Characteristics: DNCharacteristics read get_Characteristics;
    property States: DNAppearanceDictionary read get_States;
    property Alignment: DNTextAlignment read get_Alignment write set_Alignment;
    property HorizontalAlignment: DNHorizontalAlignment read get_HorizontalAlignment write set_HorizontalAlignment;
    property TextHorizontalAlignment: DNHorizontalAlignment read get_TextHorizontalAlignment write set_TextHorizontalAlignment;
    property FullName: string read get_FullName;
    property Appearance: DNAppearanceDictionary read get_Appearance;
    property VerticalAlignment: DNVerticalAlignment read get_VerticalAlignment write set_VerticalAlignment;
    property Margin: DNMarginInfo read get_Margin write set_Margin;
    property IsFirstParagraphInColumn: Boolean read get_IsFirstParagraphInColumn write set_IsFirstParagraphInColumn;
    property IsKeptWithNext: Boolean read get_IsKeptWithNext write set_IsKeptWithNext;
    property IsInNewPage: Boolean read get_IsInNewPage write set_IsInNewPage;
    property IsInLineParagraph: Boolean read get_IsInLineParagraph write set_IsInLineParagraph;
    property Hyperlink: DNHyperlink read get_Hyperlink write set_Hyperlink;
    property ZIndex: Int32 read get_ZIndex write set_ZIndex;
  end;

  TDNSignatureField = class(TDNGenericImport<DNSignatureFieldClass, DNSignatureField>) end;

  //-------------namespace: Aspose.Pdf.Forms----------------
  DNTextBoxFieldClass = interface(DNFieldClass)
  ['{C6A9FF9A-E228-5A53-898A-638726F18288}']
  { constructors } 

    {class} function init(doc: DNDocument): DNTextBoxField; overload;
    {class} function init: DNTextBoxField; overload;
    {class} function init(page: DNPage; rect: DNPdf_Rectangle): DNTextBoxField; overload;
    {class} function init(doc: DNDocument; rect: DNPdf_Rectangle): DNTextBoxField; overload;

  end;

  [DNTypeName('Aspose.Pdf.Forms.TextBoxField')]
  DNTextBoxField = interface(DNField)
  ['{FE61B31F-80A5-3D4B-B4D7-7679A424A680}']
  { getters & setters } 

    function get_Multiline: Boolean;
    procedure set_Multiline(value: Boolean);
    function get_SpellCheck: Boolean;
    procedure set_SpellCheck(value: Boolean);
    function get_Scrollable: Boolean;
    procedure set_Scrollable(value: Boolean);
    function get_ForceCombs: Boolean;
    procedure set_ForceCombs(value: Boolean);
    function get_MaxLen: Int32;
    procedure set_MaxLen(value: Int32);
    function get_TextVerticalAlignment: DNVerticalAlignment;
    procedure set_TextVerticalAlignment(value: DNVerticalAlignment);
    function get_Value: string;
    procedure set_Value(value: string);
    function get_PartialName: string;
    procedure set_PartialName(value: string);
    function get_AlternateName: string;
    procedure set_AlternateName(value: string);
    function get_MappingName: string;
    procedure set_MappingName(value: string);
    function get_IsSynchronized: Boolean;
    function get_Count: Int32;
    function get_SyncRoot: DDN.mscorlib.DNObject;
    function get_IsGroup: Boolean;
    function get_Item(name: string): DNWidgetAnnotation; overload;
    function get_Item(index: Int32): DNWidgetAnnotation; overload;
    function get_AnnotationIndex: Int32;
    procedure set_AnnotationIndex(value: Int32);
    function get_PageIndex: Int32;
    function get_Rect: DNPdf_Rectangle;
    procedure set_Rect(value: DNPdf_Rectangle);
    function get_IsSharedField: Boolean;
    procedure set_IsSharedField(value: Boolean);
    function get_TabOrder: Int32;
    procedure set_TabOrder(value: Int32);
    function get_OnActivated: DNPdfAction;
    procedure set_OnActivated(value: DNPdfAction);
    function get_Actions: DNAnnotationActionCollection;
    function get_Highlighting: DNHighlightingMode;
    procedure set_Highlighting(value: DNHighlightingMode);
    function get_Parent: DNField;
    function get_DefaultAppearance: DNDefaultAppearance;
    procedure set_DefaultAppearance(value: DNDefaultAppearance);
    function get_ReadOnly: Boolean;
    procedure set_ReadOnly(value: Boolean);
    function get_Required: Boolean;
    procedure set_Required(value: Boolean);
    function get_Exportable: Boolean;
    procedure set_Exportable(value: Boolean);
    function get_AnnotationType: DNAnnotationType;
    function get_Flags: DNAnnotationFlags;
    procedure set_Flags(value: DNAnnotationFlags);
    function get_Width: Double;
    procedure set_Width(value: Double);
    function get_Height: Double;
    procedure set_Height(value: Double);
    function get_Contents: string;
    procedure set_Contents(value: string);
    function get_Name: string;
    procedure set_Name(value: string);
    function get_Modified: DDN.mscorlib.DNDateTime;
    procedure set_Modified(value: DDN.mscorlib.DNDateTime);
    function get_Color: DNColor;
    procedure set_Color(value: DNColor);
    function get_Border: DNBorder;
    procedure set_Border(value: DNBorder);
    function get_ActiveState: string;
    procedure set_ActiveState(value: string);
    function get_Characteristics: DNCharacteristics;
    function get_States: DNAppearanceDictionary;
    function get_Alignment: DNTextAlignment;
    procedure set_Alignment(value: DNTextAlignment);
    function get_HorizontalAlignment: DNHorizontalAlignment;
    procedure set_HorizontalAlignment(value: DNHorizontalAlignment);
    function get_TextHorizontalAlignment: DNHorizontalAlignment;
    procedure set_TextHorizontalAlignment(value: DNHorizontalAlignment);
    function get_FullName: string;
    function get_Appearance: DNAppearanceDictionary;
    function get_VerticalAlignment: DNVerticalAlignment;
    procedure set_VerticalAlignment(value: DNVerticalAlignment);
    function get_Margin: DNMarginInfo;
    procedure set_Margin(value: DNMarginInfo);
    function get_IsFirstParagraphInColumn: Boolean;
    procedure set_IsFirstParagraphInColumn(value: Boolean);
    function get_IsKeptWithNext: Boolean;
    procedure set_IsKeptWithNext(value: Boolean);
    function get_IsInNewPage: Boolean;
    procedure set_IsInNewPage(value: Boolean);
    function get_IsInLineParagraph: Boolean;
    procedure set_IsInLineParagraph(value: Boolean);
    function get_Hyperlink: DNHyperlink;
    procedure set_Hyperlink(value: DNHyperlink);
    function get_ZIndex: Int32;
    procedure set_ZIndex(value: Int32);

  { methods } 

    procedure AddImage(image: DDN.System.Drawing.DNImage);
    procedure AddBarcode(code: string);
    function Recalculate: Boolean;
    procedure CopyTo(&array: TArray<DNField>; index: Int32);
    function GetEnumerator: DDN.mscorlib.DNIEnumerator<DNWidgetAnnotation>;
    procedure Flatten;
    procedure SetPosition(point: DNPoint);
    procedure Accept(visitor: DNAnnotationSelector);
    function GetRectangle(considerRotation: Boolean): DNPdf_Rectangle;
    function Clone: DDN.mscorlib.DNObject;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Multiline: Boolean read get_Multiline write set_Multiline;
    property SpellCheck: Boolean read get_SpellCheck write set_SpellCheck;
    property Scrollable: Boolean read get_Scrollable write set_Scrollable;
    property ForceCombs: Boolean read get_ForceCombs write set_ForceCombs;
    property MaxLen: Int32 read get_MaxLen write set_MaxLen;
    property TextVerticalAlignment: DNVerticalAlignment read get_TextVerticalAlignment write set_TextVerticalAlignment;
    property Value: string read get_Value write set_Value;
    property PartialName: string read get_PartialName write set_PartialName;
    property AlternateName: string read get_AlternateName write set_AlternateName;
    property MappingName: string read get_MappingName write set_MappingName;
    property IsSynchronized: Boolean read get_IsSynchronized;
    property Count: Int32 read get_Count;
    property SyncRoot: DDN.mscorlib.DNObject read get_SyncRoot;
    property IsGroup: Boolean read get_IsGroup;
    property Item[name: string]: DNWidgetAnnotation read get_Item; default;
    property Item[index: Int32]: DNWidgetAnnotation read get_Item; default;
    property AnnotationIndex: Int32 read get_AnnotationIndex write set_AnnotationIndex;
    property PageIndex: Int32 read get_PageIndex;
    property Rect: DNPdf_Rectangle read get_Rect write set_Rect;
    property IsSharedField: Boolean read get_IsSharedField write set_IsSharedField;
    property TabOrder: Int32 read get_TabOrder write set_TabOrder;
    property OnActivated: DNPdfAction read get_OnActivated write set_OnActivated;
    property Actions: DNAnnotationActionCollection read get_Actions;
    property Highlighting: DNHighlightingMode read get_Highlighting write set_Highlighting;
    property Parent: DNField read get_Parent;
    property DefaultAppearance: DNDefaultAppearance read get_DefaultAppearance write set_DefaultAppearance;
    property ReadOnly: Boolean read get_ReadOnly write set_ReadOnly;
    property Required: Boolean read get_Required write set_Required;
    property Exportable: Boolean read get_Exportable write set_Exportable;
    property AnnotationType: DNAnnotationType read get_AnnotationType;
    property Flags: DNAnnotationFlags read get_Flags write set_Flags;
    property Width: Double read get_Width write set_Width;
    property Height: Double read get_Height write set_Height;
    property Contents: string read get_Contents write set_Contents;
    property Name: string read get_Name write set_Name;
    property Modified: DDN.mscorlib.DNDateTime read get_Modified write set_Modified;
    property Color: DNColor read get_Color write set_Color;
    property Border: DNBorder read get_Border write set_Border;
    property ActiveState: string read get_ActiveState write set_ActiveState;
    property Characteristics: DNCharacteristics read get_Characteristics;
    property States: DNAppearanceDictionary read get_States;
    property Alignment: DNTextAlignment read get_Alignment write set_Alignment;
    property HorizontalAlignment: DNHorizontalAlignment read get_HorizontalAlignment write set_HorizontalAlignment;
    property TextHorizontalAlignment: DNHorizontalAlignment read get_TextHorizontalAlignment write set_TextHorizontalAlignment;
    property FullName: string read get_FullName;
    property Appearance: DNAppearanceDictionary read get_Appearance;
    property VerticalAlignment: DNVerticalAlignment read get_VerticalAlignment write set_VerticalAlignment;
    property Margin: DNMarginInfo read get_Margin write set_Margin;
    property IsFirstParagraphInColumn: Boolean read get_IsFirstParagraphInColumn write set_IsFirstParagraphInColumn;
    property IsKeptWithNext: Boolean read get_IsKeptWithNext write set_IsKeptWithNext;
    property IsInNewPage: Boolean read get_IsInNewPage write set_IsInNewPage;
    property IsInLineParagraph: Boolean read get_IsInLineParagraph write set_IsInLineParagraph;
    property Hyperlink: DNHyperlink read get_Hyperlink write set_Hyperlink;
    property ZIndex: Int32 read get_ZIndex write set_ZIndex;
  end;

  TDNTextBoxField = class(TDNGenericImport<DNTextBoxFieldClass, DNTextBoxField>) end;

  //-------------namespace: Aspose.Pdf.Forms----------------
  DNBarcodeFieldClass = interface(DNTextBoxFieldClass)
  ['{32C6D130-5F94-5E11-AAAD-440E762956CB}']
  { constructors } 

    {class} function init(page: DNPage; rect: DNPdf_Rectangle): DNBarcodeField; overload;
    {class} function init(doc: DNDocument; rect: DNPdf_Rectangle): DNBarcodeField; overload;

  end;

  [DNTypeName('Aspose.Pdf.Forms.BarcodeField')]
  DNBarcodeField = interface(DNTextBoxField)
  ['{7921CDA0-BB00-3693-B834-B5F39AE14521}']
  { getters & setters } 

    function get_Resolution: Int32;
    function get_Caption: string;
    function get_Symbology: DNSymbology;
    function get_XSymWidth: Int32;
    function get_XSymHeight: Int32;
    function get_ECC: Int32;
    function get_Multiline: Boolean;
    procedure set_Multiline(value: Boolean);
    function get_SpellCheck: Boolean;
    procedure set_SpellCheck(value: Boolean);
    function get_Scrollable: Boolean;
    procedure set_Scrollable(value: Boolean);
    function get_ForceCombs: Boolean;
    procedure set_ForceCombs(value: Boolean);
    function get_MaxLen: Int32;
    procedure set_MaxLen(value: Int32);
    function get_TextVerticalAlignment: DNVerticalAlignment;
    procedure set_TextVerticalAlignment(value: DNVerticalAlignment);
    function get_Value: string;
    procedure set_Value(value: string);
    function get_PartialName: string;
    procedure set_PartialName(value: string);
    function get_AlternateName: string;
    procedure set_AlternateName(value: string);
    function get_MappingName: string;
    procedure set_MappingName(value: string);
    function get_IsSynchronized: Boolean;
    function get_Count: Int32;
    function get_SyncRoot: DDN.mscorlib.DNObject;
    function get_IsGroup: Boolean;
    function get_Item(name: string): DNWidgetAnnotation; overload;
    function get_Item(index: Int32): DNWidgetAnnotation; overload;
    function get_AnnotationIndex: Int32;
    procedure set_AnnotationIndex(value: Int32);
    function get_PageIndex: Int32;
    function get_Rect: DNPdf_Rectangle;
    procedure set_Rect(value: DNPdf_Rectangle);
    function get_IsSharedField: Boolean;
    procedure set_IsSharedField(value: Boolean);
    function get_TabOrder: Int32;
    procedure set_TabOrder(value: Int32);
    function get_OnActivated: DNPdfAction;
    procedure set_OnActivated(value: DNPdfAction);
    function get_Actions: DNAnnotationActionCollection;
    function get_Highlighting: DNHighlightingMode;
    procedure set_Highlighting(value: DNHighlightingMode);
    function get_Parent: DNField;
    function get_DefaultAppearance: DNDefaultAppearance;
    procedure set_DefaultAppearance(value: DNDefaultAppearance);
    function get_ReadOnly: Boolean;
    procedure set_ReadOnly(value: Boolean);
    function get_Required: Boolean;
    procedure set_Required(value: Boolean);
    function get_Exportable: Boolean;
    procedure set_Exportable(value: Boolean);
    function get_AnnotationType: DNAnnotationType;
    function get_Flags: DNAnnotationFlags;
    procedure set_Flags(value: DNAnnotationFlags);
    function get_Width: Double;
    procedure set_Width(value: Double);
    function get_Height: Double;
    procedure set_Height(value: Double);
    function get_Contents: string;
    procedure set_Contents(value: string);
    function get_Name: string;
    procedure set_Name(value: string);
    function get_Modified: DDN.mscorlib.DNDateTime;
    procedure set_Modified(value: DDN.mscorlib.DNDateTime);
    function get_Color: DNColor;
    procedure set_Color(value: DNColor);
    function get_Border: DNBorder;
    procedure set_Border(value: DNBorder);
    function get_ActiveState: string;
    procedure set_ActiveState(value: string);
    function get_Characteristics: DNCharacteristics;
    function get_States: DNAppearanceDictionary;
    function get_Alignment: DNTextAlignment;
    procedure set_Alignment(value: DNTextAlignment);
    function get_HorizontalAlignment: DNHorizontalAlignment;
    procedure set_HorizontalAlignment(value: DNHorizontalAlignment);
    function get_TextHorizontalAlignment: DNHorizontalAlignment;
    procedure set_TextHorizontalAlignment(value: DNHorizontalAlignment);
    function get_FullName: string;
    function get_Appearance: DNAppearanceDictionary;
    function get_VerticalAlignment: DNVerticalAlignment;
    procedure set_VerticalAlignment(value: DNVerticalAlignment);
    function get_Margin: DNMarginInfo;
    procedure set_Margin(value: DNMarginInfo);
    function get_IsFirstParagraphInColumn: Boolean;
    procedure set_IsFirstParagraphInColumn(value: Boolean);
    function get_IsKeptWithNext: Boolean;
    procedure set_IsKeptWithNext(value: Boolean);
    function get_IsInNewPage: Boolean;
    procedure set_IsInNewPage(value: Boolean);
    function get_IsInLineParagraph: Boolean;
    procedure set_IsInLineParagraph(value: Boolean);
    function get_Hyperlink: DNHyperlink;
    procedure set_Hyperlink(value: DNHyperlink);
    function get_ZIndex: Int32;
    procedure set_ZIndex(value: Int32);

  { methods } 

    procedure AddImage(image: DDN.System.Drawing.DNImage);
    procedure AddBarcode(code: string);
    function Recalculate: Boolean;
    procedure CopyTo(&array: TArray<DNField>; index: Int32);
    function GetEnumerator: DDN.mscorlib.DNIEnumerator<DNWidgetAnnotation>;
    procedure Flatten;
    procedure SetPosition(point: DNPoint);
    procedure Accept(visitor: DNAnnotationSelector);
    function GetRectangle(considerRotation: Boolean): DNPdf_Rectangle;
    function Clone: DDN.mscorlib.DNObject;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Resolution: Int32 read get_Resolution;
    property Caption: string read get_Caption;
    property Symbology: DNSymbology read get_Symbology;
    property XSymWidth: Int32 read get_XSymWidth;
    property XSymHeight: Int32 read get_XSymHeight;
    property ECC: Int32 read get_ECC;
    property Multiline: Boolean read get_Multiline write set_Multiline;
    property SpellCheck: Boolean read get_SpellCheck write set_SpellCheck;
    property Scrollable: Boolean read get_Scrollable write set_Scrollable;
    property ForceCombs: Boolean read get_ForceCombs write set_ForceCombs;
    property MaxLen: Int32 read get_MaxLen write set_MaxLen;
    property TextVerticalAlignment: DNVerticalAlignment read get_TextVerticalAlignment write set_TextVerticalAlignment;
    property Value: string read get_Value write set_Value;
    property PartialName: string read get_PartialName write set_PartialName;
    property AlternateName: string read get_AlternateName write set_AlternateName;
    property MappingName: string read get_MappingName write set_MappingName;
    property IsSynchronized: Boolean read get_IsSynchronized;
    property Count: Int32 read get_Count;
    property SyncRoot: DDN.mscorlib.DNObject read get_SyncRoot;
    property IsGroup: Boolean read get_IsGroup;
    property Item[name: string]: DNWidgetAnnotation read get_Item; default;
    property Item[index: Int32]: DNWidgetAnnotation read get_Item; default;
    property AnnotationIndex: Int32 read get_AnnotationIndex write set_AnnotationIndex;
    property PageIndex: Int32 read get_PageIndex;
    property Rect: DNPdf_Rectangle read get_Rect write set_Rect;
    property IsSharedField: Boolean read get_IsSharedField write set_IsSharedField;
    property TabOrder: Int32 read get_TabOrder write set_TabOrder;
    property OnActivated: DNPdfAction read get_OnActivated write set_OnActivated;
    property Actions: DNAnnotationActionCollection read get_Actions;
    property Highlighting: DNHighlightingMode read get_Highlighting write set_Highlighting;
    property Parent: DNField read get_Parent;
    property DefaultAppearance: DNDefaultAppearance read get_DefaultAppearance write set_DefaultAppearance;
    property ReadOnly: Boolean read get_ReadOnly write set_ReadOnly;
    property Required: Boolean read get_Required write set_Required;
    property Exportable: Boolean read get_Exportable write set_Exportable;
    property AnnotationType: DNAnnotationType read get_AnnotationType;
    property Flags: DNAnnotationFlags read get_Flags write set_Flags;
    property Width: Double read get_Width write set_Width;
    property Height: Double read get_Height write set_Height;
    property Contents: string read get_Contents write set_Contents;
    property Name: string read get_Name write set_Name;
    property Modified: DDN.mscorlib.DNDateTime read get_Modified write set_Modified;
    property Color: DNColor read get_Color write set_Color;
    property Border: DNBorder read get_Border write set_Border;
    property ActiveState: string read get_ActiveState write set_ActiveState;
    property Characteristics: DNCharacteristics read get_Characteristics;
    property States: DNAppearanceDictionary read get_States;
    property Alignment: DNTextAlignment read get_Alignment write set_Alignment;
    property HorizontalAlignment: DNHorizontalAlignment read get_HorizontalAlignment write set_HorizontalAlignment;
    property TextHorizontalAlignment: DNHorizontalAlignment read get_TextHorizontalAlignment write set_TextHorizontalAlignment;
    property FullName: string read get_FullName;
    property Appearance: DNAppearanceDictionary read get_Appearance;
    property VerticalAlignment: DNVerticalAlignment read get_VerticalAlignment write set_VerticalAlignment;
    property Margin: DNMarginInfo read get_Margin write set_Margin;
    property IsFirstParagraphInColumn: Boolean read get_IsFirstParagraphInColumn write set_IsFirstParagraphInColumn;
    property IsKeptWithNext: Boolean read get_IsKeptWithNext write set_IsKeptWithNext;
    property IsInNewPage: Boolean read get_IsInNewPage write set_IsInNewPage;
    property IsInLineParagraph: Boolean read get_IsInLineParagraph write set_IsInLineParagraph;
    property Hyperlink: DNHyperlink read get_Hyperlink write set_Hyperlink;
    property ZIndex: Int32 read get_ZIndex write set_ZIndex;
  end;

  TDNBarcodeField = class(TDNGenericImport<DNBarcodeFieldClass, DNBarcodeField>) end;

  //-------------namespace: Aspose.Pdf.Forms----------------
  DNFileSelectBoxFieldClass = interface(DNTextBoxFieldClass)
  ['{84D177F9-F983-51D4-A1A5-260EF5EEAE65}']
  end;

  [DNTypeName('Aspose.Pdf.Forms.FileSelectBoxField')]
  DNFileSelectBoxField = interface(DNTextBoxField)
  ['{9D96EABF-2CF5-3315-919E-9A248B53EBCE}']
  { getters & setters } 

    function get_Multiline: Boolean;
    procedure set_Multiline(value: Boolean);
    function get_SpellCheck: Boolean;
    procedure set_SpellCheck(value: Boolean);
    function get_Scrollable: Boolean;
    procedure set_Scrollable(value: Boolean);
    function get_ForceCombs: Boolean;
    procedure set_ForceCombs(value: Boolean);
    function get_MaxLen: Int32;
    procedure set_MaxLen(value: Int32);
    function get_TextVerticalAlignment: DNVerticalAlignment;
    procedure set_TextVerticalAlignment(value: DNVerticalAlignment);
    function get_Value: string;
    procedure set_Value(value: string);
    function get_PartialName: string;
    procedure set_PartialName(value: string);
    function get_AlternateName: string;
    procedure set_AlternateName(value: string);
    function get_MappingName: string;
    procedure set_MappingName(value: string);
    function get_IsSynchronized: Boolean;
    function get_Count: Int32;
    function get_SyncRoot: DDN.mscorlib.DNObject;
    function get_IsGroup: Boolean;
    function get_Item(name: string): DNWidgetAnnotation; overload;
    function get_Item(index: Int32): DNWidgetAnnotation; overload;
    function get_AnnotationIndex: Int32;
    procedure set_AnnotationIndex(value: Int32);
    function get_PageIndex: Int32;
    function get_Rect: DNPdf_Rectangle;
    procedure set_Rect(value: DNPdf_Rectangle);
    function get_IsSharedField: Boolean;
    procedure set_IsSharedField(value: Boolean);
    function get_TabOrder: Int32;
    procedure set_TabOrder(value: Int32);
    function get_OnActivated: DNPdfAction;
    procedure set_OnActivated(value: DNPdfAction);
    function get_Actions: DNAnnotationActionCollection;
    function get_Highlighting: DNHighlightingMode;
    procedure set_Highlighting(value: DNHighlightingMode);
    function get_Parent: DNField;
    function get_DefaultAppearance: DNDefaultAppearance;
    procedure set_DefaultAppearance(value: DNDefaultAppearance);
    function get_ReadOnly: Boolean;
    procedure set_ReadOnly(value: Boolean);
    function get_Required: Boolean;
    procedure set_Required(value: Boolean);
    function get_Exportable: Boolean;
    procedure set_Exportable(value: Boolean);
    function get_AnnotationType: DNAnnotationType;
    function get_Flags: DNAnnotationFlags;
    procedure set_Flags(value: DNAnnotationFlags);
    function get_Width: Double;
    procedure set_Width(value: Double);
    function get_Height: Double;
    procedure set_Height(value: Double);
    function get_Contents: string;
    procedure set_Contents(value: string);
    function get_Name: string;
    procedure set_Name(value: string);
    function get_Modified: DDN.mscorlib.DNDateTime;
    procedure set_Modified(value: DDN.mscorlib.DNDateTime);
    function get_Color: DNColor;
    procedure set_Color(value: DNColor);
    function get_Border: DNBorder;
    procedure set_Border(value: DNBorder);
    function get_ActiveState: string;
    procedure set_ActiveState(value: string);
    function get_Characteristics: DNCharacteristics;
    function get_States: DNAppearanceDictionary;
    function get_Alignment: DNTextAlignment;
    procedure set_Alignment(value: DNTextAlignment);
    function get_HorizontalAlignment: DNHorizontalAlignment;
    procedure set_HorizontalAlignment(value: DNHorizontalAlignment);
    function get_TextHorizontalAlignment: DNHorizontalAlignment;
    procedure set_TextHorizontalAlignment(value: DNHorizontalAlignment);
    function get_FullName: string;
    function get_Appearance: DNAppearanceDictionary;
    function get_VerticalAlignment: DNVerticalAlignment;
    procedure set_VerticalAlignment(value: DNVerticalAlignment);
    function get_Margin: DNMarginInfo;
    procedure set_Margin(value: DNMarginInfo);
    function get_IsFirstParagraphInColumn: Boolean;
    procedure set_IsFirstParagraphInColumn(value: Boolean);
    function get_IsKeptWithNext: Boolean;
    procedure set_IsKeptWithNext(value: Boolean);
    function get_IsInNewPage: Boolean;
    procedure set_IsInNewPage(value: Boolean);
    function get_IsInLineParagraph: Boolean;
    procedure set_IsInLineParagraph(value: Boolean);
    function get_Hyperlink: DNHyperlink;
    procedure set_Hyperlink(value: DNHyperlink);
    function get_ZIndex: Int32;
    procedure set_ZIndex(value: Int32);

  { methods } 

    procedure AddImage(image: DDN.System.Drawing.DNImage);
    procedure AddBarcode(code: string);
    function Recalculate: Boolean;
    procedure CopyTo(&array: TArray<DNField>; index: Int32);
    function GetEnumerator: DDN.mscorlib.DNIEnumerator<DNWidgetAnnotation>;
    procedure Flatten;
    procedure SetPosition(point: DNPoint);
    procedure Accept(visitor: DNAnnotationSelector);
    function GetRectangle(considerRotation: Boolean): DNPdf_Rectangle;
    function Clone: DDN.mscorlib.DNObject;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Multiline: Boolean read get_Multiline write set_Multiline;
    property SpellCheck: Boolean read get_SpellCheck write set_SpellCheck;
    property Scrollable: Boolean read get_Scrollable write set_Scrollable;
    property ForceCombs: Boolean read get_ForceCombs write set_ForceCombs;
    property MaxLen: Int32 read get_MaxLen write set_MaxLen;
    property TextVerticalAlignment: DNVerticalAlignment read get_TextVerticalAlignment write set_TextVerticalAlignment;
    property Value: string read get_Value write set_Value;
    property PartialName: string read get_PartialName write set_PartialName;
    property AlternateName: string read get_AlternateName write set_AlternateName;
    property MappingName: string read get_MappingName write set_MappingName;
    property IsSynchronized: Boolean read get_IsSynchronized;
    property Count: Int32 read get_Count;
    property SyncRoot: DDN.mscorlib.DNObject read get_SyncRoot;
    property IsGroup: Boolean read get_IsGroup;
    property Item[name: string]: DNWidgetAnnotation read get_Item; default;
    property Item[index: Int32]: DNWidgetAnnotation read get_Item; default;
    property AnnotationIndex: Int32 read get_AnnotationIndex write set_AnnotationIndex;
    property PageIndex: Int32 read get_PageIndex;
    property Rect: DNPdf_Rectangle read get_Rect write set_Rect;
    property IsSharedField: Boolean read get_IsSharedField write set_IsSharedField;
    property TabOrder: Int32 read get_TabOrder write set_TabOrder;
    property OnActivated: DNPdfAction read get_OnActivated write set_OnActivated;
    property Actions: DNAnnotationActionCollection read get_Actions;
    property Highlighting: DNHighlightingMode read get_Highlighting write set_Highlighting;
    property Parent: DNField read get_Parent;
    property DefaultAppearance: DNDefaultAppearance read get_DefaultAppearance write set_DefaultAppearance;
    property ReadOnly: Boolean read get_ReadOnly write set_ReadOnly;
    property Required: Boolean read get_Required write set_Required;
    property Exportable: Boolean read get_Exportable write set_Exportable;
    property AnnotationType: DNAnnotationType read get_AnnotationType;
    property Flags: DNAnnotationFlags read get_Flags write set_Flags;
    property Width: Double read get_Width write set_Width;
    property Height: Double read get_Height write set_Height;
    property Contents: string read get_Contents write set_Contents;
    property Name: string read get_Name write set_Name;
    property Modified: DDN.mscorlib.DNDateTime read get_Modified write set_Modified;
    property Color: DNColor read get_Color write set_Color;
    property Border: DNBorder read get_Border write set_Border;
    property ActiveState: string read get_ActiveState write set_ActiveState;
    property Characteristics: DNCharacteristics read get_Characteristics;
    property States: DNAppearanceDictionary read get_States;
    property Alignment: DNTextAlignment read get_Alignment write set_Alignment;
    property HorizontalAlignment: DNHorizontalAlignment read get_HorizontalAlignment write set_HorizontalAlignment;
    property TextHorizontalAlignment: DNHorizontalAlignment read get_TextHorizontalAlignment write set_TextHorizontalAlignment;
    property FullName: string read get_FullName;
    property Appearance: DNAppearanceDictionary read get_Appearance;
    property VerticalAlignment: DNVerticalAlignment read get_VerticalAlignment write set_VerticalAlignment;
    property Margin: DNMarginInfo read get_Margin write set_Margin;
    property IsFirstParagraphInColumn: Boolean read get_IsFirstParagraphInColumn write set_IsFirstParagraphInColumn;
    property IsKeptWithNext: Boolean read get_IsKeptWithNext write set_IsKeptWithNext;
    property IsInNewPage: Boolean read get_IsInNewPage write set_IsInNewPage;
    property IsInLineParagraph: Boolean read get_IsInLineParagraph write set_IsInLineParagraph;
    property Hyperlink: DNHyperlink read get_Hyperlink write set_Hyperlink;
    property ZIndex: Int32 read get_ZIndex write set_ZIndex;
  end;

  TDNFileSelectBoxField = class(TDNGenericImport<DNFileSelectBoxFieldClass, DNFileSelectBoxField>) end;

  //-------------namespace: Aspose.Pdf.Forms----------------
  DNPasswordBoxFieldClass = interface(DNTextBoxFieldClass)
  ['{7E223D52-1DF9-5B0E-8104-04B595903DF3}']
  end;

  [DNTypeName('Aspose.Pdf.Forms.PasswordBoxField')]
  DNPasswordBoxField = interface(DNTextBoxField)
  ['{EEC1A56F-27C3-3FAC-A361-4CEF33213D21}']
  { getters & setters } 

    function get_Multiline: Boolean;
    procedure set_Multiline(value: Boolean);
    function get_SpellCheck: Boolean;
    procedure set_SpellCheck(value: Boolean);
    function get_Scrollable: Boolean;
    procedure set_Scrollable(value: Boolean);
    function get_ForceCombs: Boolean;
    procedure set_ForceCombs(value: Boolean);
    function get_MaxLen: Int32;
    procedure set_MaxLen(value: Int32);
    function get_TextVerticalAlignment: DNVerticalAlignment;
    procedure set_TextVerticalAlignment(value: DNVerticalAlignment);
    function get_Value: string;
    procedure set_Value(value: string);
    function get_PartialName: string;
    procedure set_PartialName(value: string);
    function get_AlternateName: string;
    procedure set_AlternateName(value: string);
    function get_MappingName: string;
    procedure set_MappingName(value: string);
    function get_IsSynchronized: Boolean;
    function get_Count: Int32;
    function get_SyncRoot: DDN.mscorlib.DNObject;
    function get_IsGroup: Boolean;
    function get_Item(name: string): DNWidgetAnnotation; overload;
    function get_Item(index: Int32): DNWidgetAnnotation; overload;
    function get_AnnotationIndex: Int32;
    procedure set_AnnotationIndex(value: Int32);
    function get_PageIndex: Int32;
    function get_Rect: DNPdf_Rectangle;
    procedure set_Rect(value: DNPdf_Rectangle);
    function get_IsSharedField: Boolean;
    procedure set_IsSharedField(value: Boolean);
    function get_TabOrder: Int32;
    procedure set_TabOrder(value: Int32);
    function get_OnActivated: DNPdfAction;
    procedure set_OnActivated(value: DNPdfAction);
    function get_Actions: DNAnnotationActionCollection;
    function get_Highlighting: DNHighlightingMode;
    procedure set_Highlighting(value: DNHighlightingMode);
    function get_Parent: DNField;
    function get_DefaultAppearance: DNDefaultAppearance;
    procedure set_DefaultAppearance(value: DNDefaultAppearance);
    function get_ReadOnly: Boolean;
    procedure set_ReadOnly(value: Boolean);
    function get_Required: Boolean;
    procedure set_Required(value: Boolean);
    function get_Exportable: Boolean;
    procedure set_Exportable(value: Boolean);
    function get_AnnotationType: DNAnnotationType;
    function get_Flags: DNAnnotationFlags;
    procedure set_Flags(value: DNAnnotationFlags);
    function get_Width: Double;
    procedure set_Width(value: Double);
    function get_Height: Double;
    procedure set_Height(value: Double);
    function get_Contents: string;
    procedure set_Contents(value: string);
    function get_Name: string;
    procedure set_Name(value: string);
    function get_Modified: DDN.mscorlib.DNDateTime;
    procedure set_Modified(value: DDN.mscorlib.DNDateTime);
    function get_Color: DNColor;
    procedure set_Color(value: DNColor);
    function get_Border: DNBorder;
    procedure set_Border(value: DNBorder);
    function get_ActiveState: string;
    procedure set_ActiveState(value: string);
    function get_Characteristics: DNCharacteristics;
    function get_States: DNAppearanceDictionary;
    function get_Alignment: DNTextAlignment;
    procedure set_Alignment(value: DNTextAlignment);
    function get_HorizontalAlignment: DNHorizontalAlignment;
    procedure set_HorizontalAlignment(value: DNHorizontalAlignment);
    function get_TextHorizontalAlignment: DNHorizontalAlignment;
    procedure set_TextHorizontalAlignment(value: DNHorizontalAlignment);
    function get_FullName: string;
    function get_Appearance: DNAppearanceDictionary;
    function get_VerticalAlignment: DNVerticalAlignment;
    procedure set_VerticalAlignment(value: DNVerticalAlignment);
    function get_Margin: DNMarginInfo;
    procedure set_Margin(value: DNMarginInfo);
    function get_IsFirstParagraphInColumn: Boolean;
    procedure set_IsFirstParagraphInColumn(value: Boolean);
    function get_IsKeptWithNext: Boolean;
    procedure set_IsKeptWithNext(value: Boolean);
    function get_IsInNewPage: Boolean;
    procedure set_IsInNewPage(value: Boolean);
    function get_IsInLineParagraph: Boolean;
    procedure set_IsInLineParagraph(value: Boolean);
    function get_Hyperlink: DNHyperlink;
    procedure set_Hyperlink(value: DNHyperlink);
    function get_ZIndex: Int32;
    procedure set_ZIndex(value: Int32);

  { methods } 

    procedure AddImage(image: DDN.System.Drawing.DNImage);
    procedure AddBarcode(code: string);
    function Recalculate: Boolean;
    procedure CopyTo(&array: TArray<DNField>; index: Int32);
    function GetEnumerator: DDN.mscorlib.DNIEnumerator<DNWidgetAnnotation>;
    procedure Flatten;
    procedure SetPosition(point: DNPoint);
    procedure Accept(visitor: DNAnnotationSelector);
    function GetRectangle(considerRotation: Boolean): DNPdf_Rectangle;
    function Clone: DDN.mscorlib.DNObject;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Multiline: Boolean read get_Multiline write set_Multiline;
    property SpellCheck: Boolean read get_SpellCheck write set_SpellCheck;
    property Scrollable: Boolean read get_Scrollable write set_Scrollable;
    property ForceCombs: Boolean read get_ForceCombs write set_ForceCombs;
    property MaxLen: Int32 read get_MaxLen write set_MaxLen;
    property TextVerticalAlignment: DNVerticalAlignment read get_TextVerticalAlignment write set_TextVerticalAlignment;
    property Value: string read get_Value write set_Value;
    property PartialName: string read get_PartialName write set_PartialName;
    property AlternateName: string read get_AlternateName write set_AlternateName;
    property MappingName: string read get_MappingName write set_MappingName;
    property IsSynchronized: Boolean read get_IsSynchronized;
    property Count: Int32 read get_Count;
    property SyncRoot: DDN.mscorlib.DNObject read get_SyncRoot;
    property IsGroup: Boolean read get_IsGroup;
    property Item[name: string]: DNWidgetAnnotation read get_Item; default;
    property Item[index: Int32]: DNWidgetAnnotation read get_Item; default;
    property AnnotationIndex: Int32 read get_AnnotationIndex write set_AnnotationIndex;
    property PageIndex: Int32 read get_PageIndex;
    property Rect: DNPdf_Rectangle read get_Rect write set_Rect;
    property IsSharedField: Boolean read get_IsSharedField write set_IsSharedField;
    property TabOrder: Int32 read get_TabOrder write set_TabOrder;
    property OnActivated: DNPdfAction read get_OnActivated write set_OnActivated;
    property Actions: DNAnnotationActionCollection read get_Actions;
    property Highlighting: DNHighlightingMode read get_Highlighting write set_Highlighting;
    property Parent: DNField read get_Parent;
    property DefaultAppearance: DNDefaultAppearance read get_DefaultAppearance write set_DefaultAppearance;
    property ReadOnly: Boolean read get_ReadOnly write set_ReadOnly;
    property Required: Boolean read get_Required write set_Required;
    property Exportable: Boolean read get_Exportable write set_Exportable;
    property AnnotationType: DNAnnotationType read get_AnnotationType;
    property Flags: DNAnnotationFlags read get_Flags write set_Flags;
    property Width: Double read get_Width write set_Width;
    property Height: Double read get_Height write set_Height;
    property Contents: string read get_Contents write set_Contents;
    property Name: string read get_Name write set_Name;
    property Modified: DDN.mscorlib.DNDateTime read get_Modified write set_Modified;
    property Color: DNColor read get_Color write set_Color;
    property Border: DNBorder read get_Border write set_Border;
    property ActiveState: string read get_ActiveState write set_ActiveState;
    property Characteristics: DNCharacteristics read get_Characteristics;
    property States: DNAppearanceDictionary read get_States;
    property Alignment: DNTextAlignment read get_Alignment write set_Alignment;
    property HorizontalAlignment: DNHorizontalAlignment read get_HorizontalAlignment write set_HorizontalAlignment;
    property TextHorizontalAlignment: DNHorizontalAlignment read get_TextHorizontalAlignment write set_TextHorizontalAlignment;
    property FullName: string read get_FullName;
    property Appearance: DNAppearanceDictionary read get_Appearance;
    property VerticalAlignment: DNVerticalAlignment read get_VerticalAlignment write set_VerticalAlignment;
    property Margin: DNMarginInfo read get_Margin write set_Margin;
    property IsFirstParagraphInColumn: Boolean read get_IsFirstParagraphInColumn write set_IsFirstParagraphInColumn;
    property IsKeptWithNext: Boolean read get_IsKeptWithNext write set_IsKeptWithNext;
    property IsInNewPage: Boolean read get_IsInNewPage write set_IsInNewPage;
    property IsInLineParagraph: Boolean read get_IsInLineParagraph write set_IsInLineParagraph;
    property Hyperlink: DNHyperlink read get_Hyperlink write set_Hyperlink;
    property ZIndex: Int32 read get_ZIndex write set_ZIndex;
  end;

  TDNPasswordBoxField = class(TDNGenericImport<DNPasswordBoxFieldClass, DNPasswordBoxField>) end;

  //-------------namespace: Aspose.Pdf.Forms----------------
  DNRichTextBoxFieldClass = interface(DNTextBoxFieldClass)
  ['{7EF1F3B0-DFF2-5DD2-A553-993A6C44D51A}']
  { constructors } 

    {class} function init(page: DNPage; rect: DNPdf_Rectangle): DNRichTextBoxField;

  end;

  [DNTypeName('Aspose.Pdf.Forms.RichTextBoxField')]
  DNRichTextBoxField = interface(DNTextBoxField)
  ['{68380C33-11C3-3635-835E-0AA611EEAF64}']
  { getters & setters } 

    function get_Style: string;
    procedure set_Style(value: string);
    function get_RichTextValue: string;
    procedure set_RichTextValue(value: string);
    function get_FormattedValue: string;
    procedure set_FormattedValue(value: string);
    function get_Value: string;
    procedure set_Value(value: string);
    function get_Justify: DNJustification;
    procedure set_Justify(value: DNJustification);
    function get_Multiline: Boolean;
    procedure set_Multiline(value: Boolean);
    function get_SpellCheck: Boolean;
    procedure set_SpellCheck(value: Boolean);
    function get_Scrollable: Boolean;
    procedure set_Scrollable(value: Boolean);
    function get_ForceCombs: Boolean;
    procedure set_ForceCombs(value: Boolean);
    function get_MaxLen: Int32;
    procedure set_MaxLen(value: Int32);
    function get_TextVerticalAlignment: DNVerticalAlignment;
    procedure set_TextVerticalAlignment(value: DNVerticalAlignment);
    function get_PartialName: string;
    procedure set_PartialName(value: string);
    function get_AlternateName: string;
    procedure set_AlternateName(value: string);
    function get_MappingName: string;
    procedure set_MappingName(value: string);
    function get_IsSynchronized: Boolean;
    function get_Count: Int32;
    function get_SyncRoot: DDN.mscorlib.DNObject;
    function get_IsGroup: Boolean;
    function get_Item(name: string): DNWidgetAnnotation; overload;
    function get_Item(index: Int32): DNWidgetAnnotation; overload;
    function get_AnnotationIndex: Int32;
    procedure set_AnnotationIndex(value: Int32);
    function get_PageIndex: Int32;
    function get_Rect: DNPdf_Rectangle;
    procedure set_Rect(value: DNPdf_Rectangle);
    function get_IsSharedField: Boolean;
    procedure set_IsSharedField(value: Boolean);
    function get_TabOrder: Int32;
    procedure set_TabOrder(value: Int32);
    function get_OnActivated: DNPdfAction;
    procedure set_OnActivated(value: DNPdfAction);
    function get_Actions: DNAnnotationActionCollection;
    function get_Highlighting: DNHighlightingMode;
    procedure set_Highlighting(value: DNHighlightingMode);
    function get_Parent: DNField;
    function get_DefaultAppearance: DNDefaultAppearance;
    procedure set_DefaultAppearance(value: DNDefaultAppearance);
    function get_ReadOnly: Boolean;
    procedure set_ReadOnly(value: Boolean);
    function get_Required: Boolean;
    procedure set_Required(value: Boolean);
    function get_Exportable: Boolean;
    procedure set_Exportable(value: Boolean);
    function get_AnnotationType: DNAnnotationType;
    function get_Flags: DNAnnotationFlags;
    procedure set_Flags(value: DNAnnotationFlags);
    function get_Width: Double;
    procedure set_Width(value: Double);
    function get_Height: Double;
    procedure set_Height(value: Double);
    function get_Contents: string;
    procedure set_Contents(value: string);
    function get_Name: string;
    procedure set_Name(value: string);
    function get_Modified: DDN.mscorlib.DNDateTime;
    procedure set_Modified(value: DDN.mscorlib.DNDateTime);
    function get_Color: DNColor;
    procedure set_Color(value: DNColor);
    function get_Border: DNBorder;
    procedure set_Border(value: DNBorder);
    function get_ActiveState: string;
    procedure set_ActiveState(value: string);
    function get_Characteristics: DNCharacteristics;
    function get_States: DNAppearanceDictionary;
    function get_Alignment: DNTextAlignment;
    procedure set_Alignment(value: DNTextAlignment);
    function get_HorizontalAlignment: DNHorizontalAlignment;
    procedure set_HorizontalAlignment(value: DNHorizontalAlignment);
    function get_TextHorizontalAlignment: DNHorizontalAlignment;
    procedure set_TextHorizontalAlignment(value: DNHorizontalAlignment);
    function get_FullName: string;
    function get_Appearance: DNAppearanceDictionary;
    function get_VerticalAlignment: DNVerticalAlignment;
    procedure set_VerticalAlignment(value: DNVerticalAlignment);
    function get_Margin: DNMarginInfo;
    procedure set_Margin(value: DNMarginInfo);
    function get_IsFirstParagraphInColumn: Boolean;
    procedure set_IsFirstParagraphInColumn(value: Boolean);
    function get_IsKeptWithNext: Boolean;
    procedure set_IsKeptWithNext(value: Boolean);
    function get_IsInNewPage: Boolean;
    procedure set_IsInNewPage(value: Boolean);
    function get_IsInLineParagraph: Boolean;
    procedure set_IsInLineParagraph(value: Boolean);
    function get_Hyperlink: DNHyperlink;
    procedure set_Hyperlink(value: DNHyperlink);
    function get_ZIndex: Int32;
    procedure set_ZIndex(value: Int32);

  { methods } 

    procedure AddImage(image: DDN.System.Drawing.DNImage);
    procedure AddBarcode(code: string);
    function Recalculate: Boolean;
    procedure CopyTo(&array: TArray<DNField>; index: Int32);
    function GetEnumerator: DDN.mscorlib.DNIEnumerator<DNWidgetAnnotation>;
    procedure Flatten;
    procedure SetPosition(point: DNPoint);
    procedure Accept(visitor: DNAnnotationSelector);
    function GetRectangle(considerRotation: Boolean): DNPdf_Rectangle;
    function Clone: DDN.mscorlib.DNObject;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Style: string read get_Style write set_Style;
    property RichTextValue: string read get_RichTextValue write set_RichTextValue;
    property FormattedValue: string read get_FormattedValue write set_FormattedValue;
    property Value: string read get_Value write set_Value;
    property Justify: DNJustification read get_Justify write set_Justify;
    property Multiline: Boolean read get_Multiline write set_Multiline;
    property SpellCheck: Boolean read get_SpellCheck write set_SpellCheck;
    property Scrollable: Boolean read get_Scrollable write set_Scrollable;
    property ForceCombs: Boolean read get_ForceCombs write set_ForceCombs;
    property MaxLen: Int32 read get_MaxLen write set_MaxLen;
    property TextVerticalAlignment: DNVerticalAlignment read get_TextVerticalAlignment write set_TextVerticalAlignment;
    property PartialName: string read get_PartialName write set_PartialName;
    property AlternateName: string read get_AlternateName write set_AlternateName;
    property MappingName: string read get_MappingName write set_MappingName;
    property IsSynchronized: Boolean read get_IsSynchronized;
    property Count: Int32 read get_Count;
    property SyncRoot: DDN.mscorlib.DNObject read get_SyncRoot;
    property IsGroup: Boolean read get_IsGroup;
    property Item[name: string]: DNWidgetAnnotation read get_Item; default;
    property Item[index: Int32]: DNWidgetAnnotation read get_Item; default;
    property AnnotationIndex: Int32 read get_AnnotationIndex write set_AnnotationIndex;
    property PageIndex: Int32 read get_PageIndex;
    property Rect: DNPdf_Rectangle read get_Rect write set_Rect;
    property IsSharedField: Boolean read get_IsSharedField write set_IsSharedField;
    property TabOrder: Int32 read get_TabOrder write set_TabOrder;
    property OnActivated: DNPdfAction read get_OnActivated write set_OnActivated;
    property Actions: DNAnnotationActionCollection read get_Actions;
    property Highlighting: DNHighlightingMode read get_Highlighting write set_Highlighting;
    property Parent: DNField read get_Parent;
    property DefaultAppearance: DNDefaultAppearance read get_DefaultAppearance write set_DefaultAppearance;
    property ReadOnly: Boolean read get_ReadOnly write set_ReadOnly;
    property Required: Boolean read get_Required write set_Required;
    property Exportable: Boolean read get_Exportable write set_Exportable;
    property AnnotationType: DNAnnotationType read get_AnnotationType;
    property Flags: DNAnnotationFlags read get_Flags write set_Flags;
    property Width: Double read get_Width write set_Width;
    property Height: Double read get_Height write set_Height;
    property Contents: string read get_Contents write set_Contents;
    property Name: string read get_Name write set_Name;
    property Modified: DDN.mscorlib.DNDateTime read get_Modified write set_Modified;
    property Color: DNColor read get_Color write set_Color;
    property Border: DNBorder read get_Border write set_Border;
    property ActiveState: string read get_ActiveState write set_ActiveState;
    property Characteristics: DNCharacteristics read get_Characteristics;
    property States: DNAppearanceDictionary read get_States;
    property Alignment: DNTextAlignment read get_Alignment write set_Alignment;
    property HorizontalAlignment: DNHorizontalAlignment read get_HorizontalAlignment write set_HorizontalAlignment;
    property TextHorizontalAlignment: DNHorizontalAlignment read get_TextHorizontalAlignment write set_TextHorizontalAlignment;
    property FullName: string read get_FullName;
    property Appearance: DNAppearanceDictionary read get_Appearance;
    property VerticalAlignment: DNVerticalAlignment read get_VerticalAlignment write set_VerticalAlignment;
    property Margin: DNMarginInfo read get_Margin write set_Margin;
    property IsFirstParagraphInColumn: Boolean read get_IsFirstParagraphInColumn write set_IsFirstParagraphInColumn;
    property IsKeptWithNext: Boolean read get_IsKeptWithNext write set_IsKeptWithNext;
    property IsInNewPage: Boolean read get_IsInNewPage write set_IsInNewPage;
    property IsInLineParagraph: Boolean read get_IsInLineParagraph write set_IsInLineParagraph;
    property Hyperlink: DNHyperlink read get_Hyperlink write set_Hyperlink;
    property ZIndex: Int32 read get_ZIndex write set_ZIndex;
  end;

  TDNRichTextBoxField = class(TDNGenericImport<DNRichTextBoxFieldClass, DNRichTextBoxField>) end;

  //-------------namespace: Aspose.Pdf.Drawing----------------
  DNGraphClass = interface(DNBaseParagraphClass)
  ['{2075B09A-6BBE-501D-8815-E9C611B4DCE5}']
  { constructors } 

    {class} function init(width: Single; height: Single): DNGraph;

  end;

  [DNTypeName('Aspose.Pdf.Drawing.Graph')]
  DNGraph = interface(DNBaseParagraph)
  ['{AF3998C8-1C70-32BA-AA19-2C29CCE45668}']
  { getters & setters } 

    function get_GraphInfo: DNGraphInfo;
    procedure set_GraphInfo(value: DNGraphInfo);
    function get_Border: DNBorderInfo;
    procedure set_Border(value: DNBorderInfo);
    function get_IsChangePosition: Boolean;
    procedure set_IsChangePosition(value: Boolean);
    function get_Left: Double;
    procedure set_Left(value: Double);
    function get_Top: Double;
    procedure set_Top(value: Double);
    function get_Shapes: DDN.mscorlib.DNList<DNShape>;
    procedure set_Shapes(value: DDN.mscorlib.DNList<DNShape>);
    function get_Title: DNTextFragment;
    procedure set_Title(value: DNTextFragment);
    function get_Width: Double;
    procedure set_Width(value: Double);
    function get_Height: Double;
    procedure set_Height(value: Double);
    function get_VerticalAlignment: DNVerticalAlignment;
    procedure set_VerticalAlignment(value: DNVerticalAlignment);
    function get_HorizontalAlignment: DNHorizontalAlignment;
    procedure set_HorizontalAlignment(value: DNHorizontalAlignment);
    function get_Margin: DNMarginInfo;
    procedure set_Margin(value: DNMarginInfo);
    function get_IsFirstParagraphInColumn: Boolean;
    procedure set_IsFirstParagraphInColumn(value: Boolean);
    function get_IsKeptWithNext: Boolean;
    procedure set_IsKeptWithNext(value: Boolean);
    function get_IsInNewPage: Boolean;
    procedure set_IsInNewPage(value: Boolean);
    function get_IsInLineParagraph: Boolean;
    procedure set_IsInLineParagraph(value: Boolean);
    function get_Hyperlink: DNHyperlink;
    procedure set_Hyperlink(value: DNHyperlink);
    function get_ZIndex: Int32;
    procedure set_ZIndex(value: Int32);

  { methods } 

    function Clone: DDN.mscorlib.DNObject;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property GraphInfo: DNGraphInfo read get_GraphInfo write set_GraphInfo;
    property Border: DNBorderInfo read get_Border write set_Border;
    property IsChangePosition: Boolean read get_IsChangePosition write set_IsChangePosition;
    property Left: Double read get_Left write set_Left;
    property Top: Double read get_Top write set_Top;
    property Shapes: DDN.mscorlib.DNList<DNShape> read get_Shapes write set_Shapes;
    property Title: DNTextFragment read get_Title write set_Title;
    property Width: Double read get_Width write set_Width;
    property Height: Double read get_Height write set_Height;
    property VerticalAlignment: DNVerticalAlignment read get_VerticalAlignment write set_VerticalAlignment;
    property HorizontalAlignment: DNHorizontalAlignment read get_HorizontalAlignment write set_HorizontalAlignment;
    property Margin: DNMarginInfo read get_Margin write set_Margin;
    property IsFirstParagraphInColumn: Boolean read get_IsFirstParagraphInColumn write set_IsFirstParagraphInColumn;
    property IsKeptWithNext: Boolean read get_IsKeptWithNext write set_IsKeptWithNext;
    property IsInNewPage: Boolean read get_IsInNewPage write set_IsInNewPage;
    property IsInLineParagraph: Boolean read get_IsInLineParagraph write set_IsInLineParagraph;
    property Hyperlink: DNHyperlink read get_Hyperlink write set_Hyperlink;
    property ZIndex: Int32 read get_ZIndex write set_ZIndex;
  end;

  TDNGraph = class(TDNGenericImport<DNGraphClass, DNGraph>) end;

  //-------------namespace: Aspose.Pdf----------------
  DNFloatingBoxClass = interface(DNBaseParagraphClass)
  ['{690F9EDC-520C-581E-A703-A3D49A568FC3}']
  { constructors } 

    {class} function init(width: Single; height: Single): DNFloatingBox; overload;
    {class} function init: DNFloatingBox; overload;

  end;

  [DNTypeName('Aspose.Pdf.FloatingBox')]
  DNFloatingBox = interface(DNBaseParagraph)
  ['{3CF32F15-9346-3D33-B955-6CC04F216430}']
  { getters & setters } 

    function get_ColumnInfo: DNColumnInfo;
    procedure set_ColumnInfo(value: DNColumnInfo);
    function get_Width: Double;
    procedure set_Width(value: Double);
    function get_Height: Double;
    procedure set_Height(value: Double);
    function get_IsNeedRepeating: Boolean;
    procedure set_IsNeedRepeating(value: Boolean);
    function get_Paragraphs: DNParagraphs;
    procedure set_Paragraphs(value: DNParagraphs);
    function get_Border: DNBorderInfo;
    procedure set_Border(value: DNBorderInfo);
    function get_BackgroundColor: DNColor;
    procedure set_BackgroundColor(value: DNColor);
    function get_BackgroundImage: DNImage;
    procedure set_BackgroundImage(value: DNImage);
    function get_Padding: DNMarginInfo;
    procedure set_Padding(value: DNMarginInfo);
    function get_Left: Double;
    procedure set_Left(value: Double);
    function get_Top: Double;
    procedure set_Top(value: Double);
    function get_VerticalAlignment: DNVerticalAlignment;
    procedure set_VerticalAlignment(value: DNVerticalAlignment);
    function get_HorizontalAlignment: DNHorizontalAlignment;
    procedure set_HorizontalAlignment(value: DNHorizontalAlignment);
    function get_Margin: DNMarginInfo;
    procedure set_Margin(value: DNMarginInfo);
    function get_IsFirstParagraphInColumn: Boolean;
    procedure set_IsFirstParagraphInColumn(value: Boolean);
    function get_IsKeptWithNext: Boolean;
    procedure set_IsKeptWithNext(value: Boolean);
    function get_IsInNewPage: Boolean;
    procedure set_IsInNewPage(value: Boolean);
    function get_IsInLineParagraph: Boolean;
    procedure set_IsInLineParagraph(value: Boolean);
    function get_Hyperlink: DNHyperlink;
    procedure set_Hyperlink(value: DNHyperlink);
    function get_ZIndex: Int32;
    procedure set_ZIndex(value: Int32);

  { methods } 

    function Clone: DDN.mscorlib.DNObject;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property ColumnInfo: DNColumnInfo read get_ColumnInfo write set_ColumnInfo;
    property Width: Double read get_Width write set_Width;
    property Height: Double read get_Height write set_Height;
    property IsNeedRepeating: Boolean read get_IsNeedRepeating write set_IsNeedRepeating;
    property Paragraphs: DNParagraphs read get_Paragraphs write set_Paragraphs;
    property Border: DNBorderInfo read get_Border write set_Border;
    property BackgroundColor: DNColor read get_BackgroundColor write set_BackgroundColor;
    property BackgroundImage: DNImage read get_BackgroundImage write set_BackgroundImage;
    property Padding: DNMarginInfo read get_Padding write set_Padding;
    property Left: Double read get_Left write set_Left;
    property Top: Double read get_Top write set_Top;
    property VerticalAlignment: DNVerticalAlignment read get_VerticalAlignment write set_VerticalAlignment;
    property HorizontalAlignment: DNHorizontalAlignment read get_HorizontalAlignment write set_HorizontalAlignment;
    property Margin: DNMarginInfo read get_Margin write set_Margin;
    property IsFirstParagraphInColumn: Boolean read get_IsFirstParagraphInColumn write set_IsFirstParagraphInColumn;
    property IsKeptWithNext: Boolean read get_IsKeptWithNext write set_IsKeptWithNext;
    property IsInNewPage: Boolean read get_IsInNewPage write set_IsInNewPage;
    property IsInLineParagraph: Boolean read get_IsInLineParagraph write set_IsInLineParagraph;
    property Hyperlink: DNHyperlink read get_Hyperlink write set_Hyperlink;
    property ZIndex: Int32 read get_ZIndex write set_ZIndex;
  end;

  TDNFloatingBox = class(TDNGenericImport<DNFloatingBoxClass, DNFloatingBox>) end;

  //-------------namespace: Aspose.Pdf----------------
  DNFormattedFragmentClass = interface(DNBaseParagraphClass)
  ['{38D59D25-E234-59EB-8666-08342B250B08}']
  end;

  [DNTypeName('Aspose.Pdf.FormattedFragment')]
  DNFormattedFragment = interface(DNBaseParagraph)
  ['{C9C363B7-3C9F-3ADF-A776-5EB82B8BA43F}']
  { getters & setters } 

    function get_VerticalAlignment: DNVerticalAlignment;
    procedure set_VerticalAlignment(value: DNVerticalAlignment);
    function get_HorizontalAlignment: DNHorizontalAlignment;
    procedure set_HorizontalAlignment(value: DNHorizontalAlignment);
    function get_Margin: DNMarginInfo;
    procedure set_Margin(value: DNMarginInfo);
    function get_IsFirstParagraphInColumn: Boolean;
    procedure set_IsFirstParagraphInColumn(value: Boolean);
    function get_IsKeptWithNext: Boolean;
    procedure set_IsKeptWithNext(value: Boolean);
    function get_IsInNewPage: Boolean;
    procedure set_IsInNewPage(value: Boolean);
    function get_IsInLineParagraph: Boolean;
    procedure set_IsInLineParagraph(value: Boolean);
    function get_Hyperlink: DNHyperlink;
    procedure set_Hyperlink(value: DNHyperlink);
    function get_ZIndex: Int32;
    procedure set_ZIndex(value: Int32);

  { methods } 

    function Clone: DDN.mscorlib.DNObject;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property VerticalAlignment: DNVerticalAlignment read get_VerticalAlignment write set_VerticalAlignment;
    property HorizontalAlignment: DNHorizontalAlignment read get_HorizontalAlignment write set_HorizontalAlignment;
    property Margin: DNMarginInfo read get_Margin write set_Margin;
    property IsFirstParagraphInColumn: Boolean read get_IsFirstParagraphInColumn write set_IsFirstParagraphInColumn;
    property IsKeptWithNext: Boolean read get_IsKeptWithNext write set_IsKeptWithNext;
    property IsInNewPage: Boolean read get_IsInNewPage write set_IsInNewPage;
    property IsInLineParagraph: Boolean read get_IsInLineParagraph write set_IsInLineParagraph;
    property Hyperlink: DNHyperlink read get_Hyperlink write set_Hyperlink;
    property ZIndex: Int32 read get_ZIndex write set_ZIndex;
  end;

  TDNFormattedFragment = class(TDNGenericImport<DNFormattedFragmentClass, DNFormattedFragment>) end;

  //-------------namespace: Aspose.Pdf----------------
  DNHtmlFragmentClass = interface(DNFormattedFragmentClass)
  ['{021428F5-F440-586C-8893-DC94357E568C}']
  { constructors } 

    {class} function init(text: string): DNHtmlFragment;

  end;

  [DNTypeName('Aspose.Pdf.HtmlFragment')]
  DNHtmlFragment = interface(DNFormattedFragment)
  ['{24F23C7B-E9BB-3510-9AAB-1CFE8F66A144}']
  { getters & setters } 

    function get_Rectangle: DDN.System.Drawing.DNRectangleF;
    function get_IsBreakWords: Boolean;
    procedure set_IsBreakWords(value: Boolean);
    function get_TextState: DNTextState;
    procedure set_TextState(value: DNTextState);
    function get_HtmlLoadOptions: DNHtmlLoadOptions;
    procedure set_HtmlLoadOptions(value: DNHtmlLoadOptions);
    function get_VerticalAlignment: DNVerticalAlignment;
    procedure set_VerticalAlignment(value: DNVerticalAlignment);
    function get_HorizontalAlignment: DNHorizontalAlignment;
    procedure set_HorizontalAlignment(value: DNHorizontalAlignment);
    function get_Margin: DNMarginInfo;
    procedure set_Margin(value: DNMarginInfo);
    function get_IsFirstParagraphInColumn: Boolean;
    procedure set_IsFirstParagraphInColumn(value: Boolean);
    function get_IsKeptWithNext: Boolean;
    procedure set_IsKeptWithNext(value: Boolean);
    function get_IsInNewPage: Boolean;
    procedure set_IsInNewPage(value: Boolean);
    function get_IsInLineParagraph: Boolean;
    procedure set_IsInLineParagraph(value: Boolean);
    function get_Hyperlink: DNHyperlink;
    procedure set_Hyperlink(value: DNHyperlink);
    function get_ZIndex: Int32;
    procedure set_ZIndex(value: Int32);

  { methods } 

    function Clone: DDN.mscorlib.DNObject;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Rectangle: DDN.System.Drawing.DNRectangleF read get_Rectangle;
    property IsBreakWords: Boolean read get_IsBreakWords write set_IsBreakWords;
    property TextState: DNTextState read get_TextState write set_TextState;
    property HtmlLoadOptions: DNHtmlLoadOptions read get_HtmlLoadOptions write set_HtmlLoadOptions;
    property VerticalAlignment: DNVerticalAlignment read get_VerticalAlignment write set_VerticalAlignment;
    property HorizontalAlignment: DNHorizontalAlignment read get_HorizontalAlignment write set_HorizontalAlignment;
    property Margin: DNMarginInfo read get_Margin write set_Margin;
    property IsFirstParagraphInColumn: Boolean read get_IsFirstParagraphInColumn write set_IsFirstParagraphInColumn;
    property IsKeptWithNext: Boolean read get_IsKeptWithNext write set_IsKeptWithNext;
    property IsInNewPage: Boolean read get_IsInNewPage write set_IsInNewPage;
    property IsInLineParagraph: Boolean read get_IsInLineParagraph write set_IsInLineParagraph;
    property Hyperlink: DNHyperlink read get_Hyperlink write set_Hyperlink;
    property ZIndex: Int32 read get_ZIndex write set_ZIndex;
  end;

  TDNHtmlFragment = class(TDNGenericImport<DNHtmlFragmentClass, DNHtmlFragment>) end;

  //-------------namespace: Aspose.Pdf----------------
  DNTeXFragmentClass = interface(DNFormattedFragmentClass)
  ['{B2DB5712-83BB-571A-A9CD-5871A9D71C13}']
  { constructors } 

    {class} function init(text: string): DNTeXFragment; overload;
    {class} function init(text: string; removeIndents: Boolean): DNTeXFragment; overload;

  end;

  [DNTypeName('Aspose.Pdf.TeXFragment')]
  DNTeXFragment = interface(DNFormattedFragment)
  ['{D7050D3D-B7E7-3F84-9101-5784A410AFB4}']
  { getters & setters } 

    function get_TeXLoadOptionsOfInstance: DNTeXLoadOptions;
    procedure set_TeXLoadOptionsOfInstance(value: DNTeXLoadOptions);
    function get_LatexLoadOptionsOfInstance: DNTeXLoadOptions;
    procedure set_LatexLoadOptionsOfInstance(value: DNTeXLoadOptions);
    function get_VerticalAlignment: DNVerticalAlignment;
    procedure set_VerticalAlignment(value: DNVerticalAlignment);
    function get_HorizontalAlignment: DNHorizontalAlignment;
    procedure set_HorizontalAlignment(value: DNHorizontalAlignment);
    function get_Margin: DNMarginInfo;
    procedure set_Margin(value: DNMarginInfo);
    function get_IsFirstParagraphInColumn: Boolean;
    procedure set_IsFirstParagraphInColumn(value: Boolean);
    function get_IsKeptWithNext: Boolean;
    procedure set_IsKeptWithNext(value: Boolean);
    function get_IsInNewPage: Boolean;
    procedure set_IsInNewPage(value: Boolean);
    function get_IsInLineParagraph: Boolean;
    procedure set_IsInLineParagraph(value: Boolean);
    function get_Hyperlink: DNHyperlink;
    procedure set_Hyperlink(value: DNHyperlink);
    function get_ZIndex: Int32;
    procedure set_ZIndex(value: Int32);

  { methods } 

    function Clone: DDN.mscorlib.DNObject;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property TeXLoadOptionsOfInstance: DNTeXLoadOptions read get_TeXLoadOptionsOfInstance write set_TeXLoadOptionsOfInstance;
    property LatexLoadOptionsOfInstance: DNTeXLoadOptions read get_LatexLoadOptionsOfInstance write set_LatexLoadOptionsOfInstance;
    property VerticalAlignment: DNVerticalAlignment read get_VerticalAlignment write set_VerticalAlignment;
    property HorizontalAlignment: DNHorizontalAlignment read get_HorizontalAlignment write set_HorizontalAlignment;
    property Margin: DNMarginInfo read get_Margin write set_Margin;
    property IsFirstParagraphInColumn: Boolean read get_IsFirstParagraphInColumn write set_IsFirstParagraphInColumn;
    property IsKeptWithNext: Boolean read get_IsKeptWithNext write set_IsKeptWithNext;
    property IsInNewPage: Boolean read get_IsInNewPage write set_IsInNewPage;
    property IsInLineParagraph: Boolean read get_IsInLineParagraph write set_IsInLineParagraph;
    property Hyperlink: DNHyperlink read get_Hyperlink write set_Hyperlink;
    property ZIndex: Int32 read get_ZIndex write set_ZIndex;
  end;

  TDNTeXFragment = class(TDNGenericImport<DNTeXFragmentClass, DNTeXFragment>) end;

  //-------------namespace: Aspose.Pdf----------------
  DNLatexFragmentClass = interface(DNTeXFragmentClass)
  ['{48FA20BA-2A48-5FA3-BA6F-6E68C7025E1F}']
  { constructors } 

    {class} function init(text: string): DNLatexFragment; overload;
    {class} function init(text: string; removeIndents: Boolean): DNLatexFragment; overload;

  end;

  [DNTypeName('Aspose.Pdf.LatexFragment')]
  DNLatexFragment = interface(DNTeXFragment)
  ['{9FF9FF5D-F251-3960-A299-065B19666B00}']
  { getters & setters } 

    function get_TeXLoadOptionsOfInstance: DNTeXLoadOptions;
    procedure set_TeXLoadOptionsOfInstance(value: DNTeXLoadOptions);
    function get_LatexLoadOptionsOfInstance: DNTeXLoadOptions;
    procedure set_LatexLoadOptionsOfInstance(value: DNTeXLoadOptions);
    function get_VerticalAlignment: DNVerticalAlignment;
    procedure set_VerticalAlignment(value: DNVerticalAlignment);
    function get_HorizontalAlignment: DNHorizontalAlignment;
    procedure set_HorizontalAlignment(value: DNHorizontalAlignment);
    function get_Margin: DNMarginInfo;
    procedure set_Margin(value: DNMarginInfo);
    function get_IsFirstParagraphInColumn: Boolean;
    procedure set_IsFirstParagraphInColumn(value: Boolean);
    function get_IsKeptWithNext: Boolean;
    procedure set_IsKeptWithNext(value: Boolean);
    function get_IsInNewPage: Boolean;
    procedure set_IsInNewPage(value: Boolean);
    function get_IsInLineParagraph: Boolean;
    procedure set_IsInLineParagraph(value: Boolean);
    function get_Hyperlink: DNHyperlink;
    procedure set_Hyperlink(value: DNHyperlink);
    function get_ZIndex: Int32;
    procedure set_ZIndex(value: Int32);

  { methods } 

    function Clone: DDN.mscorlib.DNObject;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property TeXLoadOptionsOfInstance: DNTeXLoadOptions read get_TeXLoadOptionsOfInstance write set_TeXLoadOptionsOfInstance;
    property LatexLoadOptionsOfInstance: DNTeXLoadOptions read get_LatexLoadOptionsOfInstance write set_LatexLoadOptionsOfInstance;
    property VerticalAlignment: DNVerticalAlignment read get_VerticalAlignment write set_VerticalAlignment;
    property HorizontalAlignment: DNHorizontalAlignment read get_HorizontalAlignment write set_HorizontalAlignment;
    property Margin: DNMarginInfo read get_Margin write set_Margin;
    property IsFirstParagraphInColumn: Boolean read get_IsFirstParagraphInColumn write set_IsFirstParagraphInColumn;
    property IsKeptWithNext: Boolean read get_IsKeptWithNext write set_IsKeptWithNext;
    property IsInNewPage: Boolean read get_IsInNewPage write set_IsInNewPage;
    property IsInLineParagraph: Boolean read get_IsInLineParagraph write set_IsInLineParagraph;
    property Hyperlink: DNHyperlink read get_Hyperlink write set_Hyperlink;
    property ZIndex: Int32 read get_ZIndex write set_ZIndex;
  end;

  TDNLatexFragment = class(TDNGenericImport<DNLatexFragmentClass, DNLatexFragment>) end;

  //-------------namespace: Aspose.Pdf----------------
  DNImageClass = interface(DNBaseParagraphClass)
  ['{8B40B7EA-257E-51F0-90D1-FF2EF50B1D5C}']
  { constructors } 

    {class} function init: DNImage;

  { static methods } 

    {class} function GetMimeType(i: DDN.System.Drawing.DNImage): string;

  end;

  [DNTypeName('Aspose.Pdf.Image')]
  DNImage = interface(DNBaseParagraph)
  ['{88B5521F-2DA7-3430-A982-76624437F801}']
  { getters & setters } 

    function get_File: string;
    procedure set_File(value: string);
    function get_FixWidth: Double;
    procedure set_FixWidth(value: Double);
    function get_FixHeight: Double;
    procedure set_FixHeight(value: Double);
    function get_FileType: DNImageFileType;
    procedure set_FileType(value: DNImageFileType);
    function get_ImageScale: Double;
    procedure set_ImageScale(value: Double);
    function get_ImageStream: DDN.mscorlib.DNStream;
    procedure set_ImageStream(value: DDN.mscorlib.DNStream);
    function get_IsApplyResolution: Boolean;
    procedure set_IsApplyResolution(value: Boolean);
    function get_IsBlackWhite: Boolean;
    procedure set_IsBlackWhite(value: Boolean);
    function get_Title: DNTextFragment;
    procedure set_Title(value: DNTextFragment);
    function get_VerticalAlignment: DNVerticalAlignment;
    procedure set_VerticalAlignment(value: DNVerticalAlignment);
    function get_HorizontalAlignment: DNHorizontalAlignment;
    procedure set_HorizontalAlignment(value: DNHorizontalAlignment);
    function get_Margin: DNMarginInfo;
    procedure set_Margin(value: DNMarginInfo);
    function get_IsFirstParagraphInColumn: Boolean;
    procedure set_IsFirstParagraphInColumn(value: Boolean);
    function get_IsKeptWithNext: Boolean;
    procedure set_IsKeptWithNext(value: Boolean);
    function get_IsInNewPage: Boolean;
    procedure set_IsInNewPage(value: Boolean);
    function get_IsInLineParagraph: Boolean;
    procedure set_IsInLineParagraph(value: Boolean);
    function get_Hyperlink: DNHyperlink;
    procedure set_Hyperlink(value: DNHyperlink);
    function get_ZIndex: Int32;
    procedure set_ZIndex(value: Int32);

  { methods } 

    function Clone: DDN.mscorlib.DNObject;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property &File: string read get_File write set_File;
    property FixWidth: Double read get_FixWidth write set_FixWidth;
    property FixHeight: Double read get_FixHeight write set_FixHeight;
    property FileType: DNImageFileType read get_FileType write set_FileType;
    property ImageScale: Double read get_ImageScale write set_ImageScale;
    property ImageStream: DDN.mscorlib.DNStream read get_ImageStream write set_ImageStream;
    property IsApplyResolution: Boolean read get_IsApplyResolution write set_IsApplyResolution;
    property IsBlackWhite: Boolean read get_IsBlackWhite write set_IsBlackWhite;
    property Title: DNTextFragment read get_Title write set_Title;
    property VerticalAlignment: DNVerticalAlignment read get_VerticalAlignment write set_VerticalAlignment;
    property HorizontalAlignment: DNHorizontalAlignment read get_HorizontalAlignment write set_HorizontalAlignment;
    property Margin: DNMarginInfo read get_Margin write set_Margin;
    property IsFirstParagraphInColumn: Boolean read get_IsFirstParagraphInColumn write set_IsFirstParagraphInColumn;
    property IsKeptWithNext: Boolean read get_IsKeptWithNext write set_IsKeptWithNext;
    property IsInNewPage: Boolean read get_IsInNewPage write set_IsInNewPage;
    property IsInLineParagraph: Boolean read get_IsInLineParagraph write set_IsInLineParagraph;
    property Hyperlink: DNHyperlink read get_Hyperlink write set_Hyperlink;
    property ZIndex: Int32 read get_ZIndex write set_ZIndex;
  end;

  TDNImage = class(TDNGenericImport<DNImageClass, DNImage>) end;

  //-------------namespace: Aspose.Pdf----------------
  DNTableClass = interface(DNBaseParagraphClass)
  ['{A9563D97-3AB0-58F9-9D5F-4CEA126EE95D}']
  { constructors } 

    {class} function init: DNTable;

  end;

  [DNTypeName('Aspose.Pdf.Table')]
  DNTable = interface(DNBaseParagraph)
  ['{F0ACE9BA-A737-3BA9-B621-D6E862413415}']
  { getters & setters } 

    function get_BackgroundColor: DNColor;
    procedure set_BackgroundColor(value: DNColor);
    function get_BreakText: DNTextFragment;
    procedure set_BreakText(value: DNTextFragment);
    function get_CornerStyle: DNBorderCornerStyle;
    procedure set_CornerStyle(value: DNBorderCornerStyle);
    function get_RepeatingRowsStyle: DNTextState;
    procedure set_RepeatingRowsStyle(value: DNTextState);
    function get_RepeatingColumnsCount: Int32;
    procedure set_RepeatingColumnsCount(value: Int32);
    function get_RepeatingRowsCount: Int32;
    procedure set_RepeatingRowsCount(value: Int32);
    function get_ColumnWidths: string;
    procedure set_ColumnWidths(value: string);
    function get_Broken: DNTableBroken;
    procedure set_Broken(value: DNTableBroken);
    function get_DefaultCellBorder: DNBorderInfo;
    procedure set_DefaultCellBorder(value: DNBorderInfo);
    function get_DefaultColumnWidth: string;
    procedure set_DefaultColumnWidth(value: string);
    function get_Rows: DNRows;
    function get_Border: DNBorderInfo;
    procedure set_Border(value: DNBorderInfo);
    function get_DefaultCellPadding: DNMarginInfo;
    procedure set_DefaultCellPadding(value: DNMarginInfo);
    function get_DefaultCellTextState: DNTextState;
    procedure set_DefaultCellTextState(value: DNTextState);
    function get_Alignment: DNHorizontalAlignment;
    procedure set_Alignment(value: DNHorizontalAlignment);
    function get_Left: Single;
    procedure set_Left(value: Single);
    function get_Top: Single;
    procedure set_Top(value: Single);
    function get_IsBroken: Boolean;
    procedure set_IsBroken(value: Boolean);
    function get_IsBordersIncluded: Boolean;
    procedure set_IsBordersIncluded(value: Boolean);
    function get_ColumnAdjustment: DNColumnAdjustment;
    procedure set_ColumnAdjustment(value: DNColumnAdjustment);
    function get_VerticalAlignment: DNVerticalAlignment;
    procedure set_VerticalAlignment(value: DNVerticalAlignment);
    function get_HorizontalAlignment: DNHorizontalAlignment;
    procedure set_HorizontalAlignment(value: DNHorizontalAlignment);
    function get_Margin: DNMarginInfo;
    procedure set_Margin(value: DNMarginInfo);
    function get_IsFirstParagraphInColumn: Boolean;
    procedure set_IsFirstParagraphInColumn(value: Boolean);
    function get_IsKeptWithNext: Boolean;
    procedure set_IsKeptWithNext(value: Boolean);
    function get_IsInNewPage: Boolean;
    procedure set_IsInNewPage(value: Boolean);
    function get_IsInLineParagraph: Boolean;
    procedure set_IsInLineParagraph(value: Boolean);
    function get_Hyperlink: DNHyperlink;
    procedure set_Hyperlink(value: DNHyperlink);
    function get_ZIndex: Int32;
    procedure set_ZIndex(value: Int32);

  { methods } 

    function GetWidth: Double;
    function GetHeight: Double;
    procedure SetColumnTextState(colNumber: Int32; textState: DNTextState);
    procedure ImportArray(importedArray: TArray<DDN.mscorlib.DNObject>; firstFilledRow: Int32; firstFilledColumn: Int32; isLeftColumnsFilled: Boolean);
    procedure ImportDataTable(importedDataTable: DDN.System.Data.DNDataTable; isColumnNamesImported: Boolean; firstFilledRow: Int32; firstFilledColumn: Int32); overload;
    procedure ImportDataTable(importedDataTable: DDN.System.Data.DNDataTable; isColumnNamesShown: Boolean; firstFilledRow: Int32; firstFilledColumn: Byte; maxRows: Int32; maxColumns: Int32; isHtmlSupported: Boolean); overload;
    procedure ImportDataTable(importedDataTable: DDN.System.Data.DNDataTable; sourceRowList: TArray<Int32>; sourceColumnList: TArray<Int32>; firstFilledRow: Int32; firstFilledColumn: Int32; showColumnNamesAsFirstRow: Boolean; isHtmlSupported: Boolean); overload;
    procedure ImportDataGrid(webDataGrid: DDN.System.Web.DNDataGrid; firstFilledRow: Int32; firstFilledColumn: Byte); overload;
    procedure ImportDataGrid(webDataGrid: DDN.System.Web.DNDataGrid; firstFilledRow: Int32; firstFilledColumn: Byte; maxRows: Int32; maxColumns: Int32); overload;
    procedure ImportDataView(sourceDataView: DDN.System.Data.DNDataView; isColumnNamesImported: Boolean; firstFilledRow: Int32; firstFilledColumn: Int32; maxRows: Int32; maxColumns: Int32);
    function Clone: DDN.mscorlib.DNObject;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property BackgroundColor: DNColor read get_BackgroundColor write set_BackgroundColor;
    property BreakText: DNTextFragment read get_BreakText write set_BreakText;
    property CornerStyle: DNBorderCornerStyle read get_CornerStyle write set_CornerStyle;
    property RepeatingRowsStyle: DNTextState read get_RepeatingRowsStyle write set_RepeatingRowsStyle;
    property RepeatingColumnsCount: Int32 read get_RepeatingColumnsCount write set_RepeatingColumnsCount;
    property RepeatingRowsCount: Int32 read get_RepeatingRowsCount write set_RepeatingRowsCount;
    property ColumnWidths: string read get_ColumnWidths write set_ColumnWidths;
    property Broken: DNTableBroken read get_Broken write set_Broken;
    property DefaultCellBorder: DNBorderInfo read get_DefaultCellBorder write set_DefaultCellBorder;
    property DefaultColumnWidth: string read get_DefaultColumnWidth write set_DefaultColumnWidth;
    property Rows: DNRows read get_Rows;
    property Border: DNBorderInfo read get_Border write set_Border;
    property DefaultCellPadding: DNMarginInfo read get_DefaultCellPadding write set_DefaultCellPadding;
    property DefaultCellTextState: DNTextState read get_DefaultCellTextState write set_DefaultCellTextState;
    property Alignment: DNHorizontalAlignment read get_Alignment write set_Alignment;
    property Left: Single read get_Left write set_Left;
    property Top: Single read get_Top write set_Top;
    property IsBroken: Boolean read get_IsBroken write set_IsBroken;
    property IsBordersIncluded: Boolean read get_IsBordersIncluded write set_IsBordersIncluded;
    property ColumnAdjustment: DNColumnAdjustment read get_ColumnAdjustment write set_ColumnAdjustment;
    property VerticalAlignment: DNVerticalAlignment read get_VerticalAlignment write set_VerticalAlignment;
    property HorizontalAlignment: DNHorizontalAlignment read get_HorizontalAlignment write set_HorizontalAlignment;
    property Margin: DNMarginInfo read get_Margin write set_Margin;
    property IsFirstParagraphInColumn: Boolean read get_IsFirstParagraphInColumn write set_IsFirstParagraphInColumn;
    property IsKeptWithNext: Boolean read get_IsKeptWithNext write set_IsKeptWithNext;
    property IsInNewPage: Boolean read get_IsInNewPage write set_IsInNewPage;
    property IsInLineParagraph: Boolean read get_IsInLineParagraph write set_IsInLineParagraph;
    property Hyperlink: DNHyperlink read get_Hyperlink write set_Hyperlink;
    property ZIndex: Int32 read get_ZIndex write set_ZIndex;
  end;

  TDNTable = class(TDNGenericImport<DNTableClass, DNTable>) end;

  //-------------namespace: Aspose.Pdf.Text----------------
  DNTextFragmentClass = interface(DNBaseParagraphClass)
  ['{31B401A8-5143-5050-993E-E3E151B67956}']
  { static getter & setter } 

    procedure set_Hyperlink(value: DNHyperlink);

  { constructors } 

    {class} function init: DNTextFragment; overload;
    {class} function init(tabStops: DNTabStops): DNTextFragment; overload;
    {class} function init(text: string): DNTextFragment; overload;
    {class} function init(text: string; tabStops: DNTabStops): DNTextFragment; overload;

  { static propertys } 

    {class} property Hyperlink: DNHyperlink write set_Hyperlink;
  end;

  [DNTypeName('Aspose.Pdf.Text.TextFragment')]
  DNTextFragment = interface(DNBaseParagraph)
  ['{86BB5DED-D5A5-364C-AA4A-D4DDDB2AF822}']
  { getters & setters } 

    function get_ReplaceOptions: DNTextReplaceOptions;
    function get_Text: string;
    procedure set_Text(value: string);
    function get_VerticalAlignment: DNVerticalAlignment;
    procedure set_VerticalAlignment(value: DNVerticalAlignment);
    function get_HorizontalAlignment: DNHorizontalAlignment;
    procedure set_HorizontalAlignment(value: DNHorizontalAlignment);
    procedure set_Hyperlink(value: DNHyperlink);
    function get_TextState: DNTextFragmentState;
    function get_Segments: DNTextSegmentCollection;
    procedure set_Segments(value: DNTextSegmentCollection);
    function get_Position: DNPosition;
    procedure set_Position(value: DNPosition);
    function get_BaselinePosition: DNPosition;
    procedure set_BaselinePosition(value: DNPosition);
    function get_Rectangle: DNPdf_Rectangle;
    function get_Page: DNPage;
    function get_Form: DNXForm;
    function get_WrapLinesCount: Int32;
    procedure set_WrapLinesCount(value: Int32);
    function get_EndNote: DNNote;
    procedure set_EndNote(value: DNNote);
    function get_FootNote: DNNote;
    procedure set_FootNote(value: DNNote);
    function get_Margin: DNMarginInfo;
    procedure set_Margin(value: DNMarginInfo);
    function get_IsFirstParagraphInColumn: Boolean;
    procedure set_IsFirstParagraphInColumn(value: Boolean);
    function get_IsKeptWithNext: Boolean;
    procedure set_IsKeptWithNext(value: Boolean);
    function get_IsInNewPage: Boolean;
    procedure set_IsInNewPage(value: Boolean);
    function get_IsInLineParagraph: Boolean;
    procedure set_IsInLineParagraph(value: Boolean);
    function get_ZIndex: Int32;
    procedure set_ZIndex(value: Int32);

  { methods } 

    function IsolateTextSegments(startIndex: Int32; length: Int32): DNTextSegmentCollection;
    function Clone: DDN.mscorlib.DNObject;
    function CloneWithSegments: DDN.mscorlib.DNObject;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property ReplaceOptions: DNTextReplaceOptions read get_ReplaceOptions;
    property Text: string read get_Text write set_Text;
    property VerticalAlignment: DNVerticalAlignment read get_VerticalAlignment write set_VerticalAlignment;
    property HorizontalAlignment: DNHorizontalAlignment read get_HorizontalAlignment write set_HorizontalAlignment;
    property Hyperlink: DNHyperlink write set_Hyperlink;
    property TextState: DNTextFragmentState read get_TextState;
    property Segments: DNTextSegmentCollection read get_Segments write set_Segments;
    property Position: DNPosition read get_Position write set_Position;
    property BaselinePosition: DNPosition read get_BaselinePosition write set_BaselinePosition;
    property Rectangle: DNPdf_Rectangle read get_Rectangle;
    property Page: DNPage read get_Page;
    property Form: DNXForm read get_Form;
    property WrapLinesCount: Int32 read get_WrapLinesCount write set_WrapLinesCount;
    property EndNote: DNNote read get_EndNote write set_EndNote;
    property FootNote: DNNote read get_FootNote write set_FootNote;
    property Margin: DNMarginInfo read get_Margin write set_Margin;
    property IsFirstParagraphInColumn: Boolean read get_IsFirstParagraphInColumn write set_IsFirstParagraphInColumn;
    property IsKeptWithNext: Boolean read get_IsKeptWithNext write set_IsKeptWithNext;
    property IsInNewPage: Boolean read get_IsInNewPage write set_IsInNewPage;
    property IsInLineParagraph: Boolean read get_IsInLineParagraph write set_IsInLineParagraph;
    property ZIndex: Int32 read get_ZIndex write set_ZIndex;
  end;

  TDNTextFragment = class(TDNGenericImport<DNTextFragmentClass, DNTextFragment>) end;

  //-------------namespace: Aspose.Pdf----------------
  DNHeadingClass = interface(DNTextFragmentClass)
  ['{EBE550F8-35ED-59CA-9D29-256171324882}']
  { static getter & setter } 

    procedure set_Hyperlink(value: DNHyperlink);

  { constructors } 

    {class} function init(level: Int32): DNHeading;

  { static propertys } 

    {class} property Hyperlink: DNHyperlink write set_Hyperlink;
  end;

  [DNTypeName('Aspose.Pdf.Heading')]
  DNHeading = interface(DNTextFragment)
  ['{84DA0E02-A168-39B9-8234-9D85682F2607}']
  { getters & setters } 

    function get_TocPage: DNPage;
    procedure set_TocPage(value: DNPage);
    function get_Top: Double;
    procedure set_Top(value: Double);
    function get_StartNumber: Int32;
    procedure set_StartNumber(value: Int32);
    function get_IsAutoSequence: Boolean;
    procedure set_IsAutoSequence(value: Boolean);
    function get_IsInList: Boolean;
    procedure set_IsInList(value: Boolean);
    function get_DestinationPage: DNPage;
    procedure set_DestinationPage(value: DNPage);
    function get_Level: Int32;
    procedure set_Level(value: Int32);
    function get_Style: DNNumberingStyle;
    procedure set_Style(value: DNNumberingStyle);
    function get_UserLabel: DNTextSegment;
    procedure set_UserLabel(value: DNTextSegment);
    function get_ReplaceOptions: DNTextReplaceOptions;
    function get_Text: string;
    procedure set_Text(value: string);
    function get_VerticalAlignment: DNVerticalAlignment;
    procedure set_VerticalAlignment(value: DNVerticalAlignment);
    function get_HorizontalAlignment: DNHorizontalAlignment;
    procedure set_HorizontalAlignment(value: DNHorizontalAlignment);
    procedure set_Hyperlink(value: DNHyperlink);
    function get_TextState: DNTextFragmentState;
    function get_Segments: DNTextSegmentCollection;
    procedure set_Segments(value: DNTextSegmentCollection);
    function get_Position: DNPosition;
    procedure set_Position(value: DNPosition);
    function get_BaselinePosition: DNPosition;
    procedure set_BaselinePosition(value: DNPosition);
    function get_Rectangle: DNPdf_Rectangle;
    function get_Page: DNPage;
    function get_Form: DNXForm;
    function get_WrapLinesCount: Int32;
    procedure set_WrapLinesCount(value: Int32);
    function get_EndNote: DNNote;
    procedure set_EndNote(value: DNNote);
    function get_FootNote: DNNote;
    procedure set_FootNote(value: DNNote);
    function get_Margin: DNMarginInfo;
    procedure set_Margin(value: DNMarginInfo);
    function get_IsFirstParagraphInColumn: Boolean;
    procedure set_IsFirstParagraphInColumn(value: Boolean);
    function get_IsKeptWithNext: Boolean;
    procedure set_IsKeptWithNext(value: Boolean);
    function get_IsInNewPage: Boolean;
    procedure set_IsInNewPage(value: Boolean);
    function get_IsInLineParagraph: Boolean;
    procedure set_IsInLineParagraph(value: Boolean);
    function get_ZIndex: Int32;
    procedure set_ZIndex(value: Int32);

  { methods } 

    function Clone: DDN.mscorlib.DNObject;
    function CloneWithSegments: DDN.mscorlib.DNObject;
    function IsolateTextSegments(startIndex: Int32; length: Int32): DNTextSegmentCollection;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property TocPage: DNPage read get_TocPage write set_TocPage;
    property Top: Double read get_Top write set_Top;
    property StartNumber: Int32 read get_StartNumber write set_StartNumber;
    property IsAutoSequence: Boolean read get_IsAutoSequence write set_IsAutoSequence;
    property IsInList: Boolean read get_IsInList write set_IsInList;
    property DestinationPage: DNPage read get_DestinationPage write set_DestinationPage;
    property Level: Int32 read get_Level write set_Level;
    property Style: DNNumberingStyle read get_Style write set_Style;
    property UserLabel: DNTextSegment read get_UserLabel write set_UserLabel;
    property ReplaceOptions: DNTextReplaceOptions read get_ReplaceOptions;
    property Text: string read get_Text write set_Text;
    property VerticalAlignment: DNVerticalAlignment read get_VerticalAlignment write set_VerticalAlignment;
    property HorizontalAlignment: DNHorizontalAlignment read get_HorizontalAlignment write set_HorizontalAlignment;
    property Hyperlink: DNHyperlink write set_Hyperlink;
    property TextState: DNTextFragmentState read get_TextState;
    property Segments: DNTextSegmentCollection read get_Segments write set_Segments;
    property Position: DNPosition read get_Position write set_Position;
    property BaselinePosition: DNPosition read get_BaselinePosition write set_BaselinePosition;
    property Rectangle: DNPdf_Rectangle read get_Rectangle;
    property Page: DNPage read get_Page;
    property Form: DNXForm read get_Form;
    property WrapLinesCount: Int32 read get_WrapLinesCount write set_WrapLinesCount;
    property EndNote: DNNote read get_EndNote write set_EndNote;
    property FootNote: DNNote read get_FootNote write set_FootNote;
    property Margin: DNMarginInfo read get_Margin write set_Margin;
    property IsFirstParagraphInColumn: Boolean read get_IsFirstParagraphInColumn write set_IsFirstParagraphInColumn;
    property IsKeptWithNext: Boolean read get_IsKeptWithNext write set_IsKeptWithNext;
    property IsInNewPage: Boolean read get_IsInNewPage write set_IsInNewPage;
    property IsInLineParagraph: Boolean read get_IsInLineParagraph write set_IsInLineParagraph;
    property ZIndex: Int32 read get_ZIndex write set_ZIndex;
  end;

  TDNHeading = class(TDNGenericImport<DNHeadingClass, DNHeading>) end;

  //-------------namespace: Aspose.Pdf----------------
  DNBorderInfoClass = interface(DNObjectClass)
  ['{1D121445-A9B0-5585-B176-E33FA926D404}']
  { constructors } 

    {class} function init(borderSide: DNBorderSide; borderColor: DNColor): DNBorderInfo; overload;
    {class} function init: DNBorderInfo; overload;
    {class} function init(borderSide: DNBorderSide): DNBorderInfo; overload;
    {class} function init(borderSide: DNBorderSide; borderWidth: Single): DNBorderInfo; overload;
    {class} function init(borderSide: DNBorderSide; borderWidth: Single; borderColor: DNColor): DNBorderInfo; overload;
    {class} function init(borderSide: DNBorderSide; info: DNGraphInfo): DNBorderInfo; overload;

  end;

  [DNTypeName('Aspose.Pdf.BorderInfo')]
  DNBorderInfo = interface(DDN.mscorlib.DNICloneable)
  ['{80855217-2060-39ED-B7D3-CF7FBF5F584E}']
  { getters & setters } 

    function get_Left: DNGraphInfo;
    procedure set_Left(value: DNGraphInfo);
    function get_Right: DNGraphInfo;
    procedure set_Right(value: DNGraphInfo);
    function get_Top: DNGraphInfo;
    procedure set_Top(value: DNGraphInfo);
    function get_Bottom: DNGraphInfo;
    procedure set_Bottom(value: DNGraphInfo);
    function get_RoundedBorderRadius: Double;
    procedure set_RoundedBorderRadius(value: Double);

  { methods } 

    function Clone: DDN.mscorlib.DNObject;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Left: DNGraphInfo read get_Left write set_Left;
    property Right: DNGraphInfo read get_Right write set_Right;
    property Top: DNGraphInfo read get_Top write set_Top;
    property Bottom: DNGraphInfo read get_Bottom write set_Bottom;
    property RoundedBorderRadius: Double read get_RoundedBorderRadius write set_RoundedBorderRadius;
  end;

  TDNBorderInfo = class(TDNGenericImport<DNBorderInfoClass, DNBorderInfo>) end;

  //-------------namespace: Aspose.Pdf----------------
  DNBuildVersionInfoClass = interface(DDN.mscorlib.DNObjectClass)
  ['{002B0E9E-6757-5D8A-AC3A-502EAB2DB9E5}']
  { constructors } 

    {class} function init: DNBuildVersionInfo;

  { static fields getter & setter } 

   function __fakeFieldGet_AssemblyVersion: string;
   function __fakeFieldGet_Product: string;
   function __fakeFieldGet_FileVersion: string;

  { static fields } 

    {class} property AssemblyVersion: string read __fakeFieldGet_AssemblyVersion;
    {class} property Product: string read __fakeFieldGet_Product;
    {class} property FileVersion: string read __fakeFieldGet_FileVersion;

  end;

  [DNTypeName('Aspose.Pdf.BuildVersionInfo')]
  DNBuildVersionInfo = interface(DDN.mscorlib.DNObject)
  ['{FC992199-5C74-3647-8DC5-37A5EAD469D1}']
  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNBuildVersionInfo = class(TDNGenericImport<DNBuildVersionInfoClass, DNBuildVersionInfo>)
  public const
   AssemblyVersion = '21.6.0';
   Product = 'Aspose.PDF';
   FileVersion = '21.6.0';
  end;

  //-------------namespace: Aspose.Pdf----------------
  DNCellClass = interface(DNObjectClass)
  ['{932D4C03-4AF3-51E8-8788-5BFC4F96C80F}']
  { constructors } 

    {class} function init(rect: DNPdf_Rectangle): DNCell; overload;
    {class} function init: DNCell; overload;

  end;

  [DNTypeName('Aspose.Pdf.Cell')]
  DNCell = interface(DDN.mscorlib.DNICloneable)
  ['{DA409227-7E12-3D00-96BA-F639AEB9F6FF}']
  { getters & setters } 

    function get_IsNoBorder: Boolean;
    procedure set_IsNoBorder(value: Boolean);
    function get_Margin: DNMarginInfo;
    procedure set_Margin(value: DNMarginInfo);
    function get_Border: DNBorderInfo;
    procedure set_Border(value: DNBorderInfo);
    function get_BackgroundColor: DNColor;
    procedure set_BackgroundColor(value: DNColor);
    function get_BackgroundImageFile: string;
    procedure set_BackgroundImageFile(value: string);
    function get_BackgroundImage: DNImage;
    procedure set_BackgroundImage(value: DNImage);
    function get_Alignment: DNHorizontalAlignment;
    procedure set_Alignment(value: DNHorizontalAlignment);
    function get_DefaultCellTextState: DNTextState;
    procedure set_DefaultCellTextState(value: DNTextState);
    function get_Paragraphs: DNParagraphs;
    procedure set_Paragraphs(value: DNParagraphs);
    function get_IsWordWrapped: Boolean;
    procedure set_IsWordWrapped(value: Boolean);
    function get_VerticalAlignment: DNVerticalAlignment;
    procedure set_VerticalAlignment(value: DNVerticalAlignment);
    function get_ColSpan: Int32;
    procedure set_ColSpan(value: Int32);
    function get_RowSpan: Int32;
    procedure set_RowSpan(value: Int32);
    function get_Width: Double;

  { methods } 

    function Clone: DDN.mscorlib.DNObject;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property IsNoBorder: Boolean read get_IsNoBorder write set_IsNoBorder;
    property Margin: DNMarginInfo read get_Margin write set_Margin;
    property Border: DNBorderInfo read get_Border write set_Border;
    property BackgroundColor: DNColor read get_BackgroundColor write set_BackgroundColor;
    property BackgroundImageFile: string read get_BackgroundImageFile write set_BackgroundImageFile;
    property BackgroundImage: DNImage read get_BackgroundImage write set_BackgroundImage;
    property Alignment: DNHorizontalAlignment read get_Alignment write set_Alignment;
    property DefaultCellTextState: DNTextState read get_DefaultCellTextState write set_DefaultCellTextState;
    property Paragraphs: DNParagraphs read get_Paragraphs write set_Paragraphs;
    property IsWordWrapped: Boolean read get_IsWordWrapped write set_IsWordWrapped;
    property VerticalAlignment: DNVerticalAlignment read get_VerticalAlignment write set_VerticalAlignment;
    property ColSpan: Int32 read get_ColSpan write set_ColSpan;
    property RowSpan: Int32 read get_RowSpan write set_RowSpan;
    property Width: Double read get_Width;
  end;

  TDNCell = class(TDNGenericImport<DNCellClass, DNCell>) end;

  //-------------namespace: Aspose.Pdf----------------
  DNCellsClass = interface(DDN.mscorlib.DNObjectClass)
  ['{CD96C7BA-5C4C-525D-86D1-E5C60D605974}']
  { constructors } 

    {class} function init: DNCells;

  end;

  [DNTypeName('Aspose.Pdf.Cells')]
  DNCells = interface(DDN.mscorlib.DNObject)
  ['{36617020-1B9F-31BD-9D15-9D101377A573}']
  { getters & setters } 

    function get_Count: Int32;
    function get_Item(index: Int32): DNCell;
    procedure set_Item(index: Int32; value: DNCell);

  { methods } 

    function Add: DNCell; overload;
    function Add(text: string; ts: DNTextState): DNCell; overload;
    function Add(text: string): DNCell; overload;
    procedure Add(cell: DNCell); overload;
    procedure RemoveRange(index: Int32; count: Int32);
    procedure Remove(obj: DDN.mscorlib.DNObject); overload;
    procedure Remove(cell: DNCell); overload;
    procedure Insert(index: Int32; cell: DNCell);
    function GetEnumerator: DDN.mscorlib.DNIEnumerator<DNCell>;
    procedure Dispose;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Count: Int32 read get_Count;
    property Item[index: Int32]: DNCell read get_Item write set_Item; default;
  end;

  TDNCells = class(TDNGenericImport<DNCellsClass, DNCells>) end;

  //-------------namespace: Aspose.Pdf----------------
  DNColorClass = interface(DDN.mscorlib.DNObjectClass)
  ['{04CC1FFC-4E24-52D2-9B54-36B3627AB7AF}']
  { static getter & setter } 

    {class} function get_Transparent: DNColor;
    {class} function get_AliceBlue: DNColor;
    {class} function get_AntiqueWhite: DNColor;
    {class} function get_Aqua: DNColor;
    {class} function get_Aquamarine: DNColor;
    {class} function get_Azure: DNColor;
    {class} function get_Beige: DNColor;
    {class} function get_Bisque: DNColor;
    {class} function get_Black: DNColor;
    {class} function get_BlanchedAlmond: DNColor;
    {class} function get_Blue: DNColor;
    {class} function get_BlueViolet: DNColor;
    {class} function get_Brown: DNColor;
    {class} function get_BurlyWood: DNColor;
    {class} function get_CadetBlue: DNColor;
    {class} function get_Chartreuse: DNColor;
    {class} function get_Chocolate: DNColor;
    {class} function get_Coral: DNColor;
    {class} function get_CornflowerBlue: DNColor;
    {class} function get_Cornsilk: DNColor;
    {class} function get_Crimson: DNColor;
    {class} function get_Cyan: DNColor;
    {class} function get_DarkBlue: DNColor;
    {class} function get_DarkCyan: DNColor;
    {class} function get_DarkGoldenrod: DNColor;
    {class} function get_DarkGray: DNColor;
    {class} function get_DarkGreen: DNColor;
    {class} function get_DarkKhaki: DNColor;
    {class} function get_DarkMagenta: DNColor;
    {class} function get_DarkOliveGreen: DNColor;
    {class} function get_DarkOrange: DNColor;
    {class} function get_DarkOrchid: DNColor;
    {class} function get_DarkRed: DNColor;
    {class} function get_DarkSalmon: DNColor;
    {class} function get_DarkSeaGreen: DNColor;
    {class} function get_DarkSlateBlue: DNColor;
    {class} function get_DarkSlateGray: DNColor;
    {class} function get_DarkTurquoise: DNColor;
    {class} function get_DarkViolet: DNColor;
    {class} function get_DeepPink: DNColor;
    {class} function get_DeepSkyBlue: DNColor;
    {class} function get_DimGray: DNColor;
    {class} function get_DodgerBlue: DNColor;
    {class} function get_Firebrick: DNColor;
    {class} function get_FloralWhite: DNColor;
    {class} function get_ForestGreen: DNColor;
    {class} function get_Fuchsia: DNColor;
    {class} function get_Gainsboro: DNColor;
    {class} function get_GhostWhite: DNColor;
    {class} function get_Gold: DNColor;
    {class} function get_Goldenrod: DNColor;
    {class} function get_Gray: DNColor;
    {class} function get_Green: DNColor;
    {class} function get_GreenYellow: DNColor;
    {class} function get_Honeydew: DNColor;
    {class} function get_HotPink: DNColor;
    {class} function get_IndianRed: DNColor;
    {class} function get_Indigo: DNColor;
    {class} function get_Ivory: DNColor;
    {class} function get_Khaki: DNColor;
    {class} function get_Lavender: DNColor;
    {class} function get_LavenderBlush: DNColor;
    {class} function get_LawnGreen: DNColor;
    {class} function get_LemonChiffon: DNColor;
    {class} function get_LightBlue: DNColor;
    {class} function get_LightCoral: DNColor;
    {class} function get_LightCyan: DNColor;
    {class} function get_LightGoldenrodYellow: DNColor;
    {class} function get_LightGreen: DNColor;
    {class} function get_LightGray: DNColor;
    {class} function get_LightPink: DNColor;
    {class} function get_LightSalmon: DNColor;
    {class} function get_LightSeaGreen: DNColor;
    {class} function get_LightSkyBlue: DNColor;
    {class} function get_LightSlateGray: DNColor;
    {class} function get_LightSteelBlue: DNColor;
    {class} function get_LightYellow: DNColor;
    {class} function get_Lime: DNColor;
    {class} function get_LimeGreen: DNColor;
    {class} function get_Linen: DNColor;
    {class} function get_Magenta: DNColor;
    {class} function get_Maroon: DNColor;
    {class} function get_MediumAquamarine: DNColor;
    {class} function get_MediumBlue: DNColor;
    {class} function get_MediumOrchid: DNColor;
    {class} function get_MediumPurple: DNColor;
    {class} function get_MediumSeaGreen: DNColor;
    {class} function get_MediumSlateBlue: DNColor;
    {class} function get_MediumSpringGreen: DNColor;
    {class} function get_MediumTurquoise: DNColor;
    {class} function get_MediumVioletRed: DNColor;
    {class} function get_MidnightBlue: DNColor;
    {class} function get_MintCream: DNColor;
    {class} function get_MistyRose: DNColor;
    {class} function get_Moccasin: DNColor;
    {class} function get_NavajoWhite: DNColor;
    {class} function get_Navy: DNColor;
    {class} function get_OldLace: DNColor;
    {class} function get_Olive: DNColor;
    {class} function get_OliveDrab: DNColor;
    {class} function get_Orange: DNColor;
    {class} function get_OrangeRed: DNColor;
    {class} function get_Orchid: DNColor;
    {class} function get_PaleGoldenrod: DNColor;
    {class} function get_PaleGreen: DNColor;
    {class} function get_PaleTurquoise: DNColor;
    {class} function get_PaleVioletRed: DNColor;
    {class} function get_PapayaWhip: DNColor;
    {class} function get_PeachPuff: DNColor;
    {class} function get_Peru: DNColor;
    {class} function get_Pink: DNColor;
    {class} function get_Plum: DNColor;
    {class} function get_PowderBlue: DNColor;
    {class} function get_Purple: DNColor;
    {class} function get_Red: DNColor;
    {class} function get_RosyBrown: DNColor;
    {class} function get_RoyalBlue: DNColor;
    {class} function get_SaddleBrown: DNColor;
    {class} function get_Salmon: DNColor;
    {class} function get_SandyBrown: DNColor;
    {class} function get_SeaGreen: DNColor;
    {class} function get_SeaShell: DNColor;
    {class} function get_Sienna: DNColor;
    {class} function get_Silver: DNColor;
    {class} function get_SkyBlue: DNColor;
    {class} function get_SlateBlue: DNColor;
    {class} function get_SlateGray: DNColor;
    {class} function get_Snow: DNColor;
    {class} function get_SpringGreen: DNColor;
    {class} function get_SteelBlue: DNColor;
    {class} function get_Tan: DNColor;
    {class} function get_Teal: DNColor;
    {class} function get_Thistle: DNColor;
    {class} function get_Tomato: DNColor;
    {class} function get_Turquoise: DNColor;
    {class} function get_Violet: DNColor;
    {class} function get_Wheat: DNColor;
    {class} function get_White: DNColor;
    {class} function get_WhiteSmoke: DNColor;
    {class} function get_Yellow: DNColor;
    {class} function get_YellowGreen: DNColor;

  { constructors } 

    {class} function init: DNColor;

  { static fields getter & setter } 

   function __fakeFieldGet_Empty: DNColor;

  { static fields } 

    {class} property Empty: DNColor read __fakeFieldGet_Empty;

  { static methods } 

    {class} function Parse(value: string): DNColor;
    {class} function FromRgb(color: DDN.System.Drawing.DNColor): DNColor; overload;
    {class} function FromArgb(r: Int32; g: Int32; b: Int32): DNColor; overload;
    {class} function FromArgb(a: Int32; r: Int32; g: Int32; b: Int32): DNColor; overload;
    {class} function FromRgb(r: Double; g: Double; b: Double): DNColor; overload;
    {class} function FromGray(g: Double): DNColor;
    {class} function FromCmyk(c: Double; m: Double; y: Double; k: Double): DNColor;

  { static propertys } 

    {class} property Transparent: DNColor read get_Transparent;
    {class} property AliceBlue: DNColor read get_AliceBlue;
    {class} property AntiqueWhite: DNColor read get_AntiqueWhite;
    {class} property Aqua: DNColor read get_Aqua;
    {class} property Aquamarine: DNColor read get_Aquamarine;
    {class} property Azure: DNColor read get_Azure;
    {class} property Beige: DNColor read get_Beige;
    {class} property Bisque: DNColor read get_Bisque;
    {class} property Black: DNColor read get_Black;
    {class} property BlanchedAlmond: DNColor read get_BlanchedAlmond;
    {class} property Blue: DNColor read get_Blue;
    {class} property BlueViolet: DNColor read get_BlueViolet;
    {class} property Brown: DNColor read get_Brown;
    {class} property BurlyWood: DNColor read get_BurlyWood;
    {class} property CadetBlue: DNColor read get_CadetBlue;
    {class} property Chartreuse: DNColor read get_Chartreuse;
    {class} property Chocolate: DNColor read get_Chocolate;
    {class} property Coral: DNColor read get_Coral;
    {class} property CornflowerBlue: DNColor read get_CornflowerBlue;
    {class} property Cornsilk: DNColor read get_Cornsilk;
    {class} property Crimson: DNColor read get_Crimson;
    {class} property Cyan: DNColor read get_Cyan;
    {class} property DarkBlue: DNColor read get_DarkBlue;
    {class} property DarkCyan: DNColor read get_DarkCyan;
    {class} property DarkGoldenrod: DNColor read get_DarkGoldenrod;
    {class} property DarkGray: DNColor read get_DarkGray;
    {class} property DarkGreen: DNColor read get_DarkGreen;
    {class} property DarkKhaki: DNColor read get_DarkKhaki;
    {class} property DarkMagenta: DNColor read get_DarkMagenta;
    {class} property DarkOliveGreen: DNColor read get_DarkOliveGreen;
    {class} property DarkOrange: DNColor read get_DarkOrange;
    {class} property DarkOrchid: DNColor read get_DarkOrchid;
    {class} property DarkRed: DNColor read get_DarkRed;
    {class} property DarkSalmon: DNColor read get_DarkSalmon;
    {class} property DarkSeaGreen: DNColor read get_DarkSeaGreen;
    {class} property DarkSlateBlue: DNColor read get_DarkSlateBlue;
    {class} property DarkSlateGray: DNColor read get_DarkSlateGray;
    {class} property DarkTurquoise: DNColor read get_DarkTurquoise;
    {class} property DarkViolet: DNColor read get_DarkViolet;
    {class} property DeepPink: DNColor read get_DeepPink;
    {class} property DeepSkyBlue: DNColor read get_DeepSkyBlue;
    {class} property DimGray: DNColor read get_DimGray;
    {class} property DodgerBlue: DNColor read get_DodgerBlue;
    {class} property Firebrick: DNColor read get_Firebrick;
    {class} property FloralWhite: DNColor read get_FloralWhite;
    {class} property ForestGreen: DNColor read get_ForestGreen;
    {class} property Fuchsia: DNColor read get_Fuchsia;
    {class} property Gainsboro: DNColor read get_Gainsboro;
    {class} property GhostWhite: DNColor read get_GhostWhite;
    {class} property Gold: DNColor read get_Gold;
    {class} property Goldenrod: DNColor read get_Goldenrod;
    {class} property Gray: DNColor read get_Gray;
    {class} property Green: DNColor read get_Green;
    {class} property GreenYellow: DNColor read get_GreenYellow;
    {class} property Honeydew: DNColor read get_Honeydew;
    {class} property HotPink: DNColor read get_HotPink;
    {class} property IndianRed: DNColor read get_IndianRed;
    {class} property Indigo: DNColor read get_Indigo;
    {class} property Ivory: DNColor read get_Ivory;
    {class} property Khaki: DNColor read get_Khaki;
    {class} property Lavender: DNColor read get_Lavender;
    {class} property LavenderBlush: DNColor read get_LavenderBlush;
    {class} property LawnGreen: DNColor read get_LawnGreen;
    {class} property LemonChiffon: DNColor read get_LemonChiffon;
    {class} property LightBlue: DNColor read get_LightBlue;
    {class} property LightCoral: DNColor read get_LightCoral;
    {class} property LightCyan: DNColor read get_LightCyan;
    {class} property LightGoldenrodYellow: DNColor read get_LightGoldenrodYellow;
    {class} property LightGreen: DNColor read get_LightGreen;
    {class} property LightGray: DNColor read get_LightGray;
    {class} property LightPink: DNColor read get_LightPink;
    {class} property LightSalmon: DNColor read get_LightSalmon;
    {class} property LightSeaGreen: DNColor read get_LightSeaGreen;
    {class} property LightSkyBlue: DNColor read get_LightSkyBlue;
    {class} property LightSlateGray: DNColor read get_LightSlateGray;
    {class} property LightSteelBlue: DNColor read get_LightSteelBlue;
    {class} property LightYellow: DNColor read get_LightYellow;
    {class} property Lime: DNColor read get_Lime;
    {class} property LimeGreen: DNColor read get_LimeGreen;
    {class} property Linen: DNColor read get_Linen;
    {class} property Magenta: DNColor read get_Magenta;
    {class} property Maroon: DNColor read get_Maroon;
    {class} property MediumAquamarine: DNColor read get_MediumAquamarine;
    {class} property MediumBlue: DNColor read get_MediumBlue;
    {class} property MediumOrchid: DNColor read get_MediumOrchid;
    {class} property MediumPurple: DNColor read get_MediumPurple;
    {class} property MediumSeaGreen: DNColor read get_MediumSeaGreen;
    {class} property MediumSlateBlue: DNColor read get_MediumSlateBlue;
    {class} property MediumSpringGreen: DNColor read get_MediumSpringGreen;
    {class} property MediumTurquoise: DNColor read get_MediumTurquoise;
    {class} property MediumVioletRed: DNColor read get_MediumVioletRed;
    {class} property MidnightBlue: DNColor read get_MidnightBlue;
    {class} property MintCream: DNColor read get_MintCream;
    {class} property MistyRose: DNColor read get_MistyRose;
    {class} property Moccasin: DNColor read get_Moccasin;
    {class} property NavajoWhite: DNColor read get_NavajoWhite;
    {class} property Navy: DNColor read get_Navy;
    {class} property OldLace: DNColor read get_OldLace;
    {class} property Olive: DNColor read get_Olive;
    {class} property OliveDrab: DNColor read get_OliveDrab;
    {class} property Orange: DNColor read get_Orange;
    {class} property OrangeRed: DNColor read get_OrangeRed;
    {class} property Orchid: DNColor read get_Orchid;
    {class} property PaleGoldenrod: DNColor read get_PaleGoldenrod;
    {class} property PaleGreen: DNColor read get_PaleGreen;
    {class} property PaleTurquoise: DNColor read get_PaleTurquoise;
    {class} property PaleVioletRed: DNColor read get_PaleVioletRed;
    {class} property PapayaWhip: DNColor read get_PapayaWhip;
    {class} property PeachPuff: DNColor read get_PeachPuff;
    {class} property Peru: DNColor read get_Peru;
    {class} property Pink: DNColor read get_Pink;
    {class} property Plum: DNColor read get_Plum;
    {class} property PowderBlue: DNColor read get_PowderBlue;
    {class} property Purple: DNColor read get_Purple;
    {class} property Red: DNColor read get_Red;
    {class} property RosyBrown: DNColor read get_RosyBrown;
    {class} property RoyalBlue: DNColor read get_RoyalBlue;
    {class} property SaddleBrown: DNColor read get_SaddleBrown;
    {class} property Salmon: DNColor read get_Salmon;
    {class} property SandyBrown: DNColor read get_SandyBrown;
    {class} property SeaGreen: DNColor read get_SeaGreen;
    {class} property SeaShell: DNColor read get_SeaShell;
    {class} property Sienna: DNColor read get_Sienna;
    {class} property Silver: DNColor read get_Silver;
    {class} property SkyBlue: DNColor read get_SkyBlue;
    {class} property SlateBlue: DNColor read get_SlateBlue;
    {class} property SlateGray: DNColor read get_SlateGray;
    {class} property Snow: DNColor read get_Snow;
    {class} property SpringGreen: DNColor read get_SpringGreen;
    {class} property SteelBlue: DNColor read get_SteelBlue;
    {class} property Tan: DNColor read get_Tan;
    {class} property Teal: DNColor read get_Teal;
    {class} property Thistle: DNColor read get_Thistle;
    {class} property Tomato: DNColor read get_Tomato;
    {class} property Turquoise: DNColor read get_Turquoise;
    {class} property Violet: DNColor read get_Violet;
    {class} property Wheat: DNColor read get_Wheat;
    {class} property White: DNColor read get_White;
    {class} property WhiteSmoke: DNColor read get_WhiteSmoke;
    {class} property Yellow: DNColor read get_Yellow;
    {class} property YellowGreen: DNColor read get_YellowGreen;
  end;

  [DNTypeName('Aspose.Pdf.Color')]
  DNColor = interface(DDN.mscorlib.DNObject)
  ['{EFF396AC-1637-3FE8-9912-62AEB12A8827}']
  { getters & setters } 

    function get_A: Double;
    function get_Data: TArray<Double>;
    function get_ColorSpace: DNColorSpace;
    function get_PatternColorSpace: DNPatternColorSpace;
    procedure set_PatternColorSpace(value: DNPatternColorSpace);

  { methods } 

    function ToString: string;
    function ToRgb: DDN.System.Drawing.DNColor;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    property A: Double read get_A;
    property Data: TArray<Double> read get_Data;
    property ColorSpace: DNColorSpace read get_ColorSpace;
    property PatternColorSpace: DNPatternColorSpace read get_PatternColorSpace write set_PatternColorSpace;
  end;

  TDNColor = class(TDNGenericImport<DNColorClass, DNColor>) end;

  //-------------namespace: Aspose.Pdf----------------
  DNColumnInfoClass = interface(DDN.mscorlib.DNObjectClass)
  ['{75444421-B340-5470-8523-01CED145B1B5}']
  { constructors } 

    {class} function init: DNColumnInfo;

  end;

  [DNTypeName('Aspose.Pdf.ColumnInfo')]
  DNColumnInfo = interface(DDN.mscorlib.DNObject)
  ['{F6547A52-574E-3D92-ACFA-054BCA73AC6F}']
  { getters & setters } 

    function get_ColumnWidths: string;
    procedure set_ColumnWidths(value: string);
    function get_ColumnSpacing: string;
    procedure set_ColumnSpacing(value: string);
    function get_ColumnCount: Int32;
    procedure set_ColumnCount(value: Int32);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property ColumnWidths: string read get_ColumnWidths write set_ColumnWidths;
    property ColumnSpacing: string read get_ColumnSpacing write set_ColumnSpacing;
    property ColumnCount: Int32 read get_ColumnCount write set_ColumnCount;
  end;

  TDNColumnInfo = class(TDNGenericImport<DNColumnInfoClass, DNColumnInfo>) end;

  //-------------namespace: Aspose.Pdf----------------
  DNComHelperClass = interface(DDN.mscorlib.DNObjectClass)
  ['{28291306-6BD4-562F-BB27-9CA50066A741}']
  { constructors } 

    {class} function init: DNComHelper;

  end;

  [DNTypeName('Aspose.Pdf.ComHelper')]
  DNComHelper = interface(DDN.mscorlib.DNObject)
  ['{15B6B1FF-E9CC-357D-9BAF-D1591D62B04C}']
  { methods } 

    function OpenStream(input: DDN.mscorlib.DNStream): DNDocument; overload;
    function OpenStream(input: DDN.mscorlib.DNStream; password: string): DNDocument; overload;
    function OpenStream(input: DDN.mscorlib.DNStream; isManagedStream: Boolean): DNDocument; overload;
    function OpenStream(input: DDN.mscorlib.DNStream; password: string; isManagedStream: Boolean): DNDocument; overload;
    function OpenStream(input: DDN.mscorlib.DNStream; options: DNLoadOptions): DNDocument; overload;
    function OpenFile(filename: string): DNDocument; overload;
    function OpenFile(filename: string; password: string): DNDocument; overload;
    function OpenFile(filename: string; password: string; isManagedStream: Boolean): DNDocument; overload;
    function OpenFile(filename: string; options: DNLoadOptions): DNDocument; overload;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNComHelper = class(TDNGenericImport<DNComHelperClass, DNComHelper>) end;

  //-------------namespace: Aspose.Pdf----------------
  DNCompositingParametersClass = interface(DDN.mscorlib.DNObjectClass)
  ['{134551DE-FB0D-5B9F-AE21-1E2E6AA8EC5F}']
  { constructors } 

    {class} function init(blendMode: DNBlendMode): DNCompositingParameters; overload;
    {class} function init(blendMode: DNBlendMode; filterType: DNImageFilterType): DNCompositingParameters; overload;
    {class} function init(blendMode: DNBlendMode; filterType: DNImageFilterType; isMasked: Boolean): DNCompositingParameters; overload;

  end;

  [DNTypeName('Aspose.Pdf.CompositingParameters')]
  DNCompositingParameters = interface(DDN.mscorlib.DNObject)
  ['{CE7367F9-56AF-338B-957C-BC576CCE68D7}']
  { getters & setters } 

    function get_BlendMode: DNBlendMode;
    function get_FilterType: DNImageFilterType;
    function get_IsMasked: Boolean;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property BlendMode: DNBlendMode read get_BlendMode;
    property FilterType: DNImageFilterType read get_FilterType;
    property IsMasked: Boolean read get_IsMasked;
  end;

  TDNCompositingParameters = class(TDNGenericImport<DNCompositingParametersClass, DNCompositingParameters>) end;

  //-------------namespace: Aspose.Pdf----------------
  DNDestinationCollectionClass = interface(DDN.mscorlib.DNObjectClass)
  ['{AA9C4B8F-E9B5-53FD-81FA-A54CF71402B2}']
  end;

  [DNTypeName('Aspose.Pdf.DestinationCollection')]
  DNDestinationCollection = interface(DDN.mscorlib.DNObject)
  ['{A6E7EA81-C7A3-3E5A-9D12-B92F4489C4FC}']
  { getters & setters } 

    function get_Count: Int32;
    function get_IsReadOnly: Boolean;
    function get_Item(index: Int32): DDN.mscorlib.DNKeyValuePair<string, DDN.mscorlib.DNObject>;

  { methods } 

    function GetPageNumber(destinameName: string; useCache: Boolean): Int32;
    function GetExplicitDestination(destinameName: string; useCache: Boolean): DNExplicitDestination;
    function GetEnumerator: DDN.mscorlib.DNIEnumerator<DDN.mscorlib.DNKeyValuePair<string, DDN.mscorlib.DNObject>>;
    function IndexOf(value: DDN.mscorlib.DNKeyValuePair<string, DDN.mscorlib.DNObject>): Int32;
    function &Contains(value: DDN.mscorlib.DNKeyValuePair<string, DDN.mscorlib.DNObject>): Boolean;
    procedure CopyTo(&array: TArray<DDN.mscorlib.DNKeyValuePair<string, DDN.mscorlib.DNObject>>; arrayIndex: Int32);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Count: Int32 read get_Count;
    property IsReadOnly: Boolean read get_IsReadOnly;
    property Item[index: Int32]: DDN.mscorlib.DNKeyValuePair<string, DDN.mscorlib.DNObject> read get_Item; default;
  end;

  TDNDestinationCollection = class(TDNGenericImport<DNDestinationCollectionClass, DNDestinationCollection>) end;

  //-------------namespace: Aspose.Pdf.Devices----------------
  DNDeviceClass = interface(DDN.mscorlib.DNObjectClass)
  ['{89E18C8A-666A-5ACA-8F6D-4199439F19D3}']
  end;

  [DNTypeName('Aspose.Pdf.Devices.Device')]
  DNDevice = interface(DDN.mscorlib.DNObject)
  ['{77AE60FD-E4BA-3BA2-89AB-E1D975649270}']
  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNDevice = class(TDNGenericImport<DNDeviceClass, DNDevice>) end;

  //-------------namespace: Aspose.Pdf.Devices----------------
  DNDocumentDeviceClass = interface(DNDeviceClass)
  ['{FC95C843-C4C3-5C8D-9539-A50D8599404C}']
  end;

  [DNTypeName('Aspose.Pdf.Devices.DocumentDevice')]
  DNDocumentDevice = interface(DNDevice)
  ['{7D1A7E25-48B2-3281-8DAA-D73283E77E6E}']
  { methods } 

    procedure Process(document: DNDocument; fromPage: Int32; toPage: Int32; output: DDN.mscorlib.DNStream); overload;
    procedure Process(document: DNDocument; output: DDN.mscorlib.DNStream); overload;
    procedure Process(document: DNDocument; outputFileName: string); overload;
    procedure Process(document: DNDocument; fromPage: Int32; toPage: Int32; outputFileName: string); overload;
    procedure BinarizeBradley(inputImageStream: DDN.mscorlib.DNStream; outputImageStream: DDN.mscorlib.DNStream; threshold: Double);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNDocumentDevice = class(TDNGenericImport<DNDocumentDeviceClass, DNDocumentDevice>) end;

  //-------------namespace: Aspose.Pdf.Devices----------------
  DNTiffDeviceClass = interface(DNDocumentDeviceClass)
  ['{704AE74D-A457-5ADE-B4BF-DB5F37770C06}']
  { constructors } 

    {class} function init(resolution: DNResolution): DNTiffDevice; overload;
    {class} function init(resolution: DNResolution; settings: DNTiffSettings): DNTiffDevice; overload;
    {class} function init(resolution: DNResolution; settings: DNTiffSettings; converter: DNIIndexBitmapConverter): DNTiffDevice; overload;
    {class} function init(settings: DNTiffSettings): DNTiffDevice; overload;
    {class} function init(settings: DNTiffSettings; converter: DNIIndexBitmapConverter): DNTiffDevice; overload;
    {class} function init: DNTiffDevice; overload;
    {class} function init(width: Int32; height: Int32; resolution: DNResolution; settings: DNTiffSettings): DNTiffDevice; overload;
    {class} function init(width: Int32; height: Int32; resolution: DNResolution; settings: DNTiffSettings; converter: DNIIndexBitmapConverter): DNTiffDevice; overload;
    {class} function init(pageSize: DNPageSize; resolution: DNResolution; settings: DNTiffSettings): DNTiffDevice; overload;
    {class} function init(pageSize: DNPageSize; resolution: DNResolution; settings: DNTiffSettings; converter: DNIIndexBitmapConverter): DNTiffDevice; overload;
    {class} function init(width: Int32; height: Int32; resolution: DNResolution): DNTiffDevice; overload;
    {class} function init(pageSize: DNPageSize; resolution: DNResolution): DNTiffDevice; overload;
    {class} function init(width: Int32; height: Int32; settings: DNTiffSettings): DNTiffDevice; overload;
    {class} function init(width: Int32; height: Int32; settings: DNTiffSettings; converter: DNIIndexBitmapConverter): DNTiffDevice; overload;
    {class} function init(pageSize: DNPageSize; settings: DNTiffSettings; converter: DNIIndexBitmapConverter): DNTiffDevice; overload;
    {class} function init(pageSize: DNPageSize; settings: DNTiffSettings): DNTiffDevice; overload;
    {class} function init(width: Int32; height: Int32): DNTiffDevice; overload;
    {class} function init(pageSize: DNPageSize): DNTiffDevice; overload;

  end;

  [DNTypeName('Aspose.Pdf.Devices.TiffDevice')]
  DNTiffDevice = interface(DNDocumentDevice)
  ['{EE6270AD-2252-32B7-88E7-956EE2461ECA}']
  { getters & setters } 

    function get_RenderingOptions: DNRenderingOptions;
    procedure set_RenderingOptions(value: DNRenderingOptions);
    function get_FormPresentationMode: DNFormPresentationMode;
    procedure set_FormPresentationMode(value: DNFormPresentationMode);
    function get_Settings: DNTiffSettings;
    function get_Resolution: DNResolution;
    function get_Width: Int32;
    function get_Height: Int32;

  { methods } 

    procedure Process(document: DNDocument; fromPage: Int32; toPage: Int32; output: DDN.mscorlib.DNStream); overload;
    procedure Process(document: DNDocument; output: DDN.mscorlib.DNStream); overload;
    procedure Process(document: DNDocument; outputFileName: string); overload;
    procedure Process(document: DNDocument; fromPage: Int32; toPage: Int32; outputFileName: string); overload;
    procedure BinarizeBradley(inputImageStream: DDN.mscorlib.DNStream; outputImageStream: DDN.mscorlib.DNStream; threshold: Double);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property RenderingOptions: DNRenderingOptions read get_RenderingOptions write set_RenderingOptions;
    property FormPresentationMode: DNFormPresentationMode read get_FormPresentationMode write set_FormPresentationMode;
    property Settings: DNTiffSettings read get_Settings;
    property Resolution: DNResolution read get_Resolution;
    property Width: Int32 read get_Width;
    property Height: Int32 read get_Height;
  end;

  TDNTiffDevice = class(TDNGenericImport<DNTiffDeviceClass, DNTiffDevice>) end;

  //-------------namespace: Aspose.Pdf.Devices----------------
  DNPageDeviceClass = interface(DNDeviceClass)
  ['{698E3BCC-8D56-5FBE-A156-BC64EA0A17C2}']
  end;

  [DNTypeName('Aspose.Pdf.Devices.PageDevice')]
  DNPageDevice = interface(DNDevice)
  ['{8A106CFE-559E-3D7C-9A88-BD828BB83ACE}']
  { methods } 

    procedure Process(page: DNPage; output: DDN.mscorlib.DNStream); overload;
    procedure Process(page: DNPage; outputFileName: string); overload;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNPageDevice = class(TDNGenericImport<DNPageDeviceClass, DNPageDevice>) end;

  //-------------namespace: Aspose.Pdf.Devices----------------
  DNImageDeviceClass = interface(DNPageDeviceClass)
  ['{6EC75F06-6D13-58B0-B3C8-45705D0CEDCB}']
  { constructors } 

    {class} function init: DNImageDevice; overload;
    {class} function init(resolution: DNResolution): DNImageDevice; overload;
    {class} function init(width: Int32; height: Int32): DNImageDevice; overload;
    {class} function init(pageSize: DNPageSize): DNImageDevice; overload;
    {class} function init(width: Int32; height: Int32; resolution: DNResolution): DNImageDevice; overload;
    {class} function init(pageSize: DNPageSize; resolution: DNResolution): DNImageDevice; overload;

  end;

  [DNTypeName('Aspose.Pdf.Devices.ImageDevice')]
  DNImageDevice = interface(DNPageDevice)
  ['{DA2DF0DA-8469-392D-8F79-1D2AC92C090B}']
  { getters & setters } 

    function get_CoordinateType: DNPageCoordinateType;
    procedure set_CoordinateType(value: DNPageCoordinateType);
    function get_RenderingOptions: DNRenderingOptions;
    procedure set_RenderingOptions(value: DNRenderingOptions);
    function get_FormPresentationMode: DNFormPresentationMode;
    procedure set_FormPresentationMode(value: DNFormPresentationMode);
    function get_Resolution: DNResolution;
    function get_Width: Int32;
    function get_Height: Int32;

  { methods } 

    procedure Process(page: DNPage; output: DDN.mscorlib.DNStream); overload;
    procedure Process(page: DNPage; outputFileName: string); overload;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property CoordinateType: DNPageCoordinateType read get_CoordinateType write set_CoordinateType;
    property RenderingOptions: DNRenderingOptions read get_RenderingOptions write set_RenderingOptions;
    property FormPresentationMode: DNFormPresentationMode read get_FormPresentationMode write set_FormPresentationMode;
    property Resolution: DNResolution read get_Resolution;
    property Width: Int32 read get_Width;
    property Height: Int32 read get_Height;
  end;

  TDNImageDevice = class(TDNGenericImport<DNImageDeviceClass, DNImageDevice>) end;

  //-------------namespace: Aspose.Pdf.Devices----------------
  DNBmpDeviceClass = interface(DNImageDeviceClass)
  ['{8735CB80-9342-510A-A3AD-6D83195C8CC0}']
  { constructors } 

    {class} function init: DNBmpDevice; overload;
    {class} function init(resolution: DNResolution): DNBmpDevice; overload;
    {class} function init(width: Int32; height: Int32; resolution: DNResolution): DNBmpDevice; overload;
    {class} function init(pageSize: DNPageSize; resolution: DNResolution): DNBmpDevice; overload;
    {class} function init(width: Int32; height: Int32): DNBmpDevice; overload;
    {class} function init(pageSize: DNPageSize): DNBmpDevice; overload;

  end;

  [DNTypeName('Aspose.Pdf.Devices.BmpDevice')]
  DNBmpDevice = interface(DNImageDevice)
  ['{3E3172D6-E773-3C1D-9770-A13ECB7F506B}']
  { getters & setters } 

    function get_CoordinateType: DNPageCoordinateType;
    procedure set_CoordinateType(value: DNPageCoordinateType);
    function get_RenderingOptions: DNRenderingOptions;
    procedure set_RenderingOptions(value: DNRenderingOptions);
    function get_FormPresentationMode: DNFormPresentationMode;
    procedure set_FormPresentationMode(value: DNFormPresentationMode);
    function get_Resolution: DNResolution;
    function get_Width: Int32;
    function get_Height: Int32;

  { methods } 

    procedure Process(page: DNPage; output: DDN.mscorlib.DNStream); overload;
    procedure Process(page: DNPage; outputFileName: string); overload;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property CoordinateType: DNPageCoordinateType read get_CoordinateType write set_CoordinateType;
    property RenderingOptions: DNRenderingOptions read get_RenderingOptions write set_RenderingOptions;
    property FormPresentationMode: DNFormPresentationMode read get_FormPresentationMode write set_FormPresentationMode;
    property Resolution: DNResolution read get_Resolution;
    property Width: Int32 read get_Width;
    property Height: Int32 read get_Height;
  end;

  TDNBmpDevice = class(TDNGenericImport<DNBmpDeviceClass, DNBmpDevice>) end;

  //-------------namespace: Aspose.Pdf.Devices----------------
  DNEmfDeviceClass = interface(DNImageDeviceClass)
  ['{7A7546A2-23D6-5D8F-A11F-0B3A6C744876}']
  { constructors } 

    {class} function init: DNEmfDevice; overload;
    {class} function init(resolution: DNResolution): DNEmfDevice; overload;
    {class} function init(width: Int32; height: Int32): DNEmfDevice; overload;
    {class} function init(pageSize: DNPageSize): DNEmfDevice; overload;
    {class} function init(width: Int32; height: Int32; resolution: DNResolution): DNEmfDevice; overload;
    {class} function init(pageSize: DNPageSize; resolution: DNResolution): DNEmfDevice; overload;

  end;

  [DNTypeName('Aspose.Pdf.Devices.EmfDevice')]
  DNEmfDevice = interface(DNImageDevice)
  ['{5A081FA0-6225-3980-880B-5438D9B1992A}']
  { getters & setters } 

    function get_CoordinateType: DNPageCoordinateType;
    procedure set_CoordinateType(value: DNPageCoordinateType);
    function get_RenderingOptions: DNRenderingOptions;
    procedure set_RenderingOptions(value: DNRenderingOptions);
    function get_FormPresentationMode: DNFormPresentationMode;
    procedure set_FormPresentationMode(value: DNFormPresentationMode);
    function get_Resolution: DNResolution;
    function get_Width: Int32;
    function get_Height: Int32;

  { methods } 

    procedure Process(page: DNPage; output: DDN.mscorlib.DNStream); overload;
    procedure Process(page: DNPage; outputFileName: string); overload;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property CoordinateType: DNPageCoordinateType read get_CoordinateType write set_CoordinateType;
    property RenderingOptions: DNRenderingOptions read get_RenderingOptions write set_RenderingOptions;
    property FormPresentationMode: DNFormPresentationMode read get_FormPresentationMode write set_FormPresentationMode;
    property Resolution: DNResolution read get_Resolution;
    property Width: Int32 read get_Width;
    property Height: Int32 read get_Height;
  end;

  TDNEmfDevice = class(TDNGenericImport<DNEmfDeviceClass, DNEmfDevice>) end;

  //-------------namespace: Aspose.Pdf.Devices----------------
  DNGifDeviceClass = interface(DNImageDeviceClass)
  ['{7F69B686-9FEF-51C5-8C63-086D0EB187C4}']
  { constructors } 

    {class} function init: DNGifDevice; overload;
    {class} function init(resolution: DNResolution): DNGifDevice; overload;
    {class} function init(width: Int32; height: Int32; resolution: DNResolution): DNGifDevice; overload;
    {class} function init(pageSize: DNPageSize; resolution: DNResolution): DNGifDevice; overload;
    {class} function init(width: Int32; height: Int32): DNGifDevice; overload;
    {class} function init(pageSize: DNPageSize): DNGifDevice; overload;

  end;

  [DNTypeName('Aspose.Pdf.Devices.GifDevice')]
  DNGifDevice = interface(DNImageDevice)
  ['{6D4B4ED3-679E-3CBA-91E9-389A96D4AD42}']
  { getters & setters } 

    function get_CoordinateType: DNPageCoordinateType;
    procedure set_CoordinateType(value: DNPageCoordinateType);
    function get_RenderingOptions: DNRenderingOptions;
    procedure set_RenderingOptions(value: DNRenderingOptions);
    function get_FormPresentationMode: DNFormPresentationMode;
    procedure set_FormPresentationMode(value: DNFormPresentationMode);
    function get_Resolution: DNResolution;
    function get_Width: Int32;
    function get_Height: Int32;

  { methods } 

    procedure Process(page: DNPage; output: DDN.mscorlib.DNStream); overload;
    procedure Process(page: DNPage; outputFileName: string); overload;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property CoordinateType: DNPageCoordinateType read get_CoordinateType write set_CoordinateType;
    property RenderingOptions: DNRenderingOptions read get_RenderingOptions write set_RenderingOptions;
    property FormPresentationMode: DNFormPresentationMode read get_FormPresentationMode write set_FormPresentationMode;
    property Resolution: DNResolution read get_Resolution;
    property Width: Int32 read get_Width;
    property Height: Int32 read get_Height;
  end;

  TDNGifDevice = class(TDNGenericImport<DNGifDeviceClass, DNGifDevice>) end;

  //-------------namespace: Aspose.Pdf.Devices----------------
  DNJpegDeviceClass = interface(DNImageDeviceClass)
  ['{9600EF78-4476-5015-B372-9000D9DDB945}']
  { constructors } 

    {class} function init: DNJpegDevice; overload;
    {class} function init(resolution: DNResolution): DNJpegDevice; overload;
    {class} function init(quality: Int32): DNJpegDevice; overload;
    {class} function init(resolution: DNResolution; quality: Int32): DNJpegDevice; overload;
    {class} function init(width: Int32; height: Int32): DNJpegDevice; overload;
    {class} function init(pageSize: DNPageSize): DNJpegDevice; overload;
    {class} function init(width: Int32; height: Int32; resolution: DNResolution): DNJpegDevice; overload;
    {class} function init(pageSize: DNPageSize; resolution: DNResolution): DNJpegDevice; overload;
    {class} function init(width: Int32; height: Int32; resolution: DNResolution; quality: Int32): DNJpegDevice; overload;
    {class} function init(pageSize: DNPageSize; resolution: DNResolution; quality: Int32): DNJpegDevice; overload;

  end;

  [DNTypeName('Aspose.Pdf.Devices.JpegDevice')]
  DNJpegDevice = interface(DNImageDevice)
  ['{19BF1DDE-0E4A-3E70-BD19-DB7F8EEDB6FB}']
  { getters & setters } 

    function get_CoordinateType: DNPageCoordinateType;
    procedure set_CoordinateType(value: DNPageCoordinateType);
    function get_RenderingOptions: DNRenderingOptions;
    procedure set_RenderingOptions(value: DNRenderingOptions);
    function get_FormPresentationMode: DNFormPresentationMode;
    procedure set_FormPresentationMode(value: DNFormPresentationMode);
    function get_Resolution: DNResolution;
    function get_Width: Int32;
    function get_Height: Int32;

  { methods } 

    procedure Process(page: DNPage; output: DDN.mscorlib.DNStream); overload;
    procedure Process(page: DNPage; outputFileName: string); overload;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property CoordinateType: DNPageCoordinateType read get_CoordinateType write set_CoordinateType;
    property RenderingOptions: DNRenderingOptions read get_RenderingOptions write set_RenderingOptions;
    property FormPresentationMode: DNFormPresentationMode read get_FormPresentationMode write set_FormPresentationMode;
    property Resolution: DNResolution read get_Resolution;
    property Width: Int32 read get_Width;
    property Height: Int32 read get_Height;
  end;

  TDNJpegDevice = class(TDNGenericImport<DNJpegDeviceClass, DNJpegDevice>) end;

  //-------------namespace: Aspose.Pdf.Devices----------------
  DNPngDeviceClass = interface(DNImageDeviceClass)
  ['{CA7CFFAE-D592-51E9-8800-04724F165056}']
  { constructors } 

    {class} function init: DNPngDevice; overload;
    {class} function init(resolution: DNResolution): DNPngDevice; overload;
    {class} function init(width: Int32; height: Int32; resolution: DNResolution): DNPngDevice; overload;
    {class} function init(pageSize: DNPageSize; resolution: DNResolution): DNPngDevice; overload;
    {class} function init(width: Int32; height: Int32): DNPngDevice; overload;
    {class} function init(pageSize: DNPageSize): DNPngDevice; overload;

  end;

  [DNTypeName('Aspose.Pdf.Devices.PngDevice')]
  DNPngDevice = interface(DNImageDevice)
  ['{E9F0C46E-390E-3860-9967-28009E4CAF68}']
  { getters & setters } 

    function get_CoordinateType: DNPageCoordinateType;
    procedure set_CoordinateType(value: DNPageCoordinateType);
    function get_RenderingOptions: DNRenderingOptions;
    procedure set_RenderingOptions(value: DNRenderingOptions);
    function get_FormPresentationMode: DNFormPresentationMode;
    procedure set_FormPresentationMode(value: DNFormPresentationMode);
    function get_Resolution: DNResolution;
    function get_Width: Int32;
    function get_Height: Int32;

  { methods } 

    procedure Process(page: DNPage; output: DDN.mscorlib.DNStream); overload;
    procedure Process(page: DNPage; outputFileName: string); overload;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property CoordinateType: DNPageCoordinateType read get_CoordinateType write set_CoordinateType;
    property RenderingOptions: DNRenderingOptions read get_RenderingOptions write set_RenderingOptions;
    property FormPresentationMode: DNFormPresentationMode read get_FormPresentationMode write set_FormPresentationMode;
    property Resolution: DNResolution read get_Resolution;
    property Width: Int32 read get_Width;
    property Height: Int32 read get_Height;
  end;

  TDNPngDevice = class(TDNGenericImport<DNPngDeviceClass, DNPngDevice>) end;

  //-------------namespace: Aspose.Pdf.Devices----------------
  DNTextDeviceClass = interface(DNPageDeviceClass)
  ['{E6D06314-C3E5-5ACC-9279-253E263A48C2}']
  { constructors } 

    {class} function init(extractionOptions: DNTextExtractionOptions): DNTextDevice; overload;
    {class} function init: DNTextDevice; overload;
    {class} function init(encoding: DDN.mscorlib.DNEncoding): DNTextDevice; overload;
    {class} function init(extractionOptions: DNTextExtractionOptions; encoding: DDN.mscorlib.DNEncoding): DNTextDevice; overload;

  end;

  [DNTypeName('Aspose.Pdf.Devices.TextDevice')]
  DNTextDevice = interface(DNPageDevice)
  ['{2EDA726C-DC8E-30CC-B02B-76ED8376C5FB}']
  { getters & setters } 

    function get_ExtractionOptions: DNTextExtractionOptions;
    procedure set_ExtractionOptions(value: DNTextExtractionOptions);
    function get_Encoding: DDN.mscorlib.DNEncoding;
    procedure set_Encoding(value: DDN.mscorlib.DNEncoding);

  { methods } 

    procedure Process(page: DNPage; output: DDN.mscorlib.DNStream); overload;
    procedure Process(page: DNPage; outputFileName: string); overload;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property ExtractionOptions: DNTextExtractionOptions read get_ExtractionOptions write set_ExtractionOptions;
    property Encoding: DDN.mscorlib.DNEncoding read get_Encoding write set_Encoding;
  end;

  TDNTextDevice = class(TDNGenericImport<DNTextDeviceClass, DNTextDevice>) end;

  //-------------namespace: Aspose.Pdf.Devices----------------
  DNMarginsClass = interface(DDN.mscorlib.DNObjectClass)
  ['{3A4DC4D5-D196-565E-9E47-4F27982094C1}']
  { constructors } 

    {class} function init(left: Int32; right: Int32; top: Int32; bottom: Int32): DNMargins; overload;
    {class} function init: DNMargins; overload;

  end;

  [DNTypeName('Aspose.Pdf.Devices.Margins')]
  DNMargins = interface(DDN.mscorlib.DNObject)
  ['{9E8C7AC6-34FD-3A81-BDE5-3B83ED4ABBE2}']
  { getters & setters } 

    function get_Left: Int32;
    procedure set_Left(value: Int32);
    function get_Right: Int32;
    procedure set_Right(value: Int32);
    function get_Top: Int32;
    procedure set_Top(value: Int32);
    function get_Bottom: Int32;
    procedure set_Bottom(value: Int32);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Left: Int32 read get_Left write set_Left;
    property Right: Int32 read get_Right write set_Right;
    property Top: Int32 read get_Top write set_Top;
    property Bottom: Int32 read get_Bottom write set_Bottom;
  end;

  TDNMargins = class(TDNGenericImport<DNMarginsClass, DNMargins>) end;

  //-------------namespace: Aspose.Pdf.Devices----------------
  DNResolutionClass = interface(DDN.mscorlib.DNObjectClass)
  ['{B52B4056-7BD2-518E-A575-8F2CE5DFDF24}']
  { constructors } 

    {class} function init(value: Int32): DNResolution; overload;
    {class} function init(valueX: Int32; valueY: Int32): DNResolution; overload;

  end;

  [DNTypeName('Aspose.Pdf.Devices.Resolution')]
  DNResolution = interface(DDN.mscorlib.DNObject)
  ['{49B807E8-EE70-3A96-AF29-391EA80C70A8}']
  { getters & setters } 

    function get_X: Int32;
    procedure set_X(value: Int32);
    function get_Y: Int32;
    procedure set_Y(value: Int32);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property X: Int32 read get_X write set_X;
    property Y: Int32 read get_Y write set_Y;
  end;

  TDNResolution = class(TDNGenericImport<DNResolutionClass, DNResolution>) end;

  //-------------namespace: Aspose.Pdf.Devices----------------
  DNTiffSettingsClass = interface(DDN.mscorlib.DNObjectClass)
  ['{1C02E912-6128-547B-B596-650321A50B87}']
  { constructors } 

    {class} function init: DNTiffSettings; overload;
    {class} function init(shapeType: DNShapeType): DNTiffSettings; overload;
    {class} function init(compressionType: DNCompressionType): DNTiffSettings; overload;
    {class} function init(colorDepth: DNColorDepth): DNTiffSettings; overload;
    {class} function init(margins: DNMargins): DNTiffSettings; overload;
    {class} function init(compressionType: DNCompressionType; colorDepth: DNColorDepth; margins: DNMargins): DNTiffSettings; overload;
    {class} function init(compressionType: DNCompressionType; colorDepth: DNColorDepth; margins: DNMargins; skipBlankPages: Boolean): DNTiffSettings; overload;
    {class} function init(compressionType: DNCompressionType; colorDepth: DNColorDepth; margins: DNMargins; skipBlankPages: Boolean; shapeType: DNShapeType): DNTiffSettings; overload;
    {class} function init(skipBlankPages: Boolean): DNTiffSettings; overload;

  end;

  [DNTypeName('Aspose.Pdf.Devices.TiffSettings')]
  DNTiffSettings = interface(DDN.mscorlib.DNObject)
  ['{5294A85A-26D6-3DEF-90C5-52EF8E88E941}']
  { getters & setters } 

    function get_Margins: DNMargins;
    function get_SkipBlankPages: Boolean;
    procedure set_SkipBlankPages(value: Boolean);
    function get_Compression: DNCompressionType;
    procedure set_Compression(value: DNCompressionType);
    function get_Depth: DNColorDepth;
    procedure set_Depth(value: DNColorDepth);
    function get_Shape: DNShapeType;
    procedure set_Shape(value: DNShapeType);
    function get_Brightness: Single;
    procedure set_Brightness(value: Single);
    function get_CoordinateType: DNPageCoordinateType;
    procedure set_CoordinateType(value: DNPageCoordinateType);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Margins: DNMargins read get_Margins;
    property SkipBlankPages: Boolean read get_SkipBlankPages write set_SkipBlankPages;
    property Compression: DNCompressionType read get_Compression write set_Compression;
    property Depth: DNColorDepth read get_Depth write set_Depth;
    property Shape: DNShapeType read get_Shape write set_Shape;
    property Brightness: Single read get_Brightness write set_Brightness;
    property CoordinateType: DNPageCoordinateType read get_CoordinateType write set_CoordinateType;
  end;

  TDNTiffSettings = class(TDNGenericImport<DNTiffSettingsClass, DNTiffSettings>) end;

  //-------------namespace: Aspose.Pdf----------------
  DNDocumentClass = interface(DNObjectClass)
  ['{CE26CD5D-24AF-552A-8158-1A06DB667D46}']
  { static getter & setter } 

    {class} function get_IsLicensed: Boolean;

  { constructors } 

    {class} function init(input: DDN.mscorlib.DNStream): DNDocument; overload;
    {class} function init(input: DDN.mscorlib.DNStream; password: string; isManagedStream: Boolean): DNDocument; overload;
    {class} function init(input: DDN.mscorlib.DNStream; isManagedStream: Boolean): DNDocument; overload;
    {class} function init(filename: string): DNDocument; overload;
    {class} function init(input: DDN.mscorlib.DNStream; password: string): DNDocument; overload;
    {class} function init: DNDocument; overload;
    {class} function init(filename: string; options: DNLoadOptions): DNDocument; overload;
    {class} function init(input: DDN.mscorlib.DNStream; options: DNLoadOptions): DNDocument; overload;
    {class} function init(filename: string; password: string): DNDocument; overload;
    {class} function init(filename: string; password: string; isManagedStream: Boolean): DNDocument; overload;

  { static methods } 

    {class} procedure Convert(srcFileName: string; loadOptions: DNLoadOptions; dstFileName: string; saveOptions: DNSaveOptions); overload;
    {class} procedure Convert(srcStream: DDN.mscorlib.DNStream; loadOptions: DNLoadOptions; dstFileName: string; saveOptions: DNSaveOptions); overload;
    {class} procedure Convert(srcFileName: string; loadOptions: DNLoadOptions; dstStream: DDN.mscorlib.DNStream; saveOptions: DNSaveOptions); overload;
    {class} procedure Convert(srcStream: DDN.mscorlib.DNStream; loadOptions: DNLoadOptions; dstStream: DDN.mscorlib.DNStream; saveOptions: DNSaveOptions); overload;

  { static propertys } 

    {class} property IsLicensed: Boolean read get_IsLicensed;
  end;

  [DNTypeName('Aspose.Pdf.Document')]
  DNDocument = interface(DDN.mscorlib.DNIDisposable)
  ['{BD40B53E-FD87-36AF-8C59-B05FB86C29EC}']
  { getters & setters } 

    function get_JavaScript: DNJavaScriptCollection;
    function get_PageInfo: DNPageInfo;
    procedure set_PageInfo(value: DNPageInfo);
    function get_EnableSignatureSanitization: Boolean;
    procedure set_EnableSignatureSanitization(value: Boolean);
    function get_IsPdfaCompliant: Boolean;
    function get_IsPdfUaCompliant: Boolean;
    function get_IsXrefGapsAllowed: Boolean;
    procedure set_IsXrefGapsAllowed(value: Boolean);
    function get_NamedDestinations: DNNamedDestinationCollection;
    function get_Destinations: DNDestinationCollection;
    function get_PdfFormat: DNPdfFormat;
    function get_EmbedStandardFonts: Boolean;
    procedure set_EmbedStandardFonts(value: Boolean);
    function get_DisableFontLicenseVerifications: Boolean;
    procedure set_DisableFontLicenseVerifications(value: Boolean);
    function get_FontUtilities: DNDocument_IDocumentFontUtilities;
    function get_Collection: DNCollection;
    procedure set_Collection(value: DNCollection);
    function get_Version: string;
    function get_OpenAction: DNIAppointment;
    procedure set_OpenAction(value: DNIAppointment);
    function get_HideToolBar: Boolean;
    procedure set_HideToolBar(value: Boolean);
    function get_HideMenubar: Boolean;
    procedure set_HideMenubar(value: Boolean);
    function get_HideWindowUI: Boolean;
    procedure set_HideWindowUI(value: Boolean);
    function get_FitWindow: Boolean;
    procedure set_FitWindow(value: Boolean);
    function get_CenterWindow: Boolean;
    procedure set_CenterWindow(value: Boolean);
    function get_DisplayDocTitle: Boolean;
    procedure set_DisplayDocTitle(value: Boolean);
    function get_Pages: DNPageCollection;
    function get_Outlines: DNOutlineCollection;
    function get_Actions: DNDocumentActionCollection;
    function get_Form: DNForms_Form;
    function get_EmbeddedFiles: DNEmbeddedFileCollection;
    function get_Direction: DNDirection;
    procedure set_Direction(value: DNDirection);
    function get_PageMode: DNPageMode;
    procedure set_PageMode(value: DNPageMode);
    function get_NonFullScreenPageMode: DNPageMode;
    procedure set_NonFullScreenPageMode(value: DNPageMode);
    function get_PageLayout: DNPageLayout;
    procedure set_PageLayout(value: DNPageLayout);
    function get_Duplex: DNPrintDuplex;
    procedure set_Duplex(value: DNPrintDuplex);
    function get_FileName: string;
    function get_Info: DNDocumentInfo;
    function get_Metadata: DNMetadata;
    function get_LogicalStructure: DNRootElement;
    function get_CryptoAlgorithm: DDN.mscorlib.DNNullable<DNCryptoAlgorithm>;
    function get_IsLinearized: Boolean;
    procedure set_IsLinearized(value: Boolean);
    function get_Permissions: Int32;
    function get_IsEncrypted: Boolean;
    function get_Id: DNPdf_Id;
    function get_Background: DNColor;
    procedure set_Background(value: DNColor);
    function get_OptimizeSize: Boolean;
    procedure set_OptimizeSize(value: Boolean);
    function get_AllowReusePageContent: Boolean;
    procedure set_AllowReusePageContent(value: Boolean);
    function get_IgnoreCorruptedObjects: Boolean;
    procedure set_IgnoreCorruptedObjects(value: Boolean);
    function get_PageLabels: DNPageLabelCollection;
    function get_EnableObjectUnload: Boolean;
    procedure set_EnableObjectUnload(value: Boolean);
    function get_TaggedContent: DNITaggedContent;

  { events } 

    procedure add_FontSubstitution(value: DNDocument_FontSubstitutionHandler);
    procedure remove_FontSubstitution(value: DNDocument_FontSubstitutionHandler);

  { methods } 

    procedure ExportAnnotationsToXfdf(stream: DDN.mscorlib.DNStream); overload;
    procedure SendTo(device: DNDocumentDevice; output: DDN.mscorlib.DNStream); overload;
    procedure SendTo(device: DNDocumentDevice; fromPage: Int32; toPage: Int32; output: DDN.mscorlib.DNStream); overload;
    procedure SendTo(device: DNDocumentDevice; outputFileName: string); overload;
    procedure SendTo(device: DNDocumentDevice; fromPage: Int32; toPage: Int32; outputFileName: string); overload;
    procedure RemoveMetadata;
    procedure ImportAnnotationsFromXfdf(fileName: string); overload;
    procedure ImportAnnotationsFromXfdf(stream: DDN.mscorlib.DNStream); overload;
    function Validate(outputLogFileName: string; format: DNPdfFormat): Boolean; overload;
    function Convert(outputLogFileName: string; format: DNPdfFormat; action: DNConvertErrorAction; transparencyAction: DNConvertTransparencyAction): Boolean; overload;
    function Convert(outputLogStream: DDN.mscorlib.DNStream; format: DNPdfFormat; action: DNConvertErrorAction; transparencyAction: DNConvertTransparencyAction): Boolean; overload;
    function Convert(outputLogFileName: string; format: DNPdfFormat; action: DNConvertErrorAction): Boolean; overload;
    function Convert(options: DNPdfFormatConversionOptions): Boolean; overload;
    function ConvertPageToPNGMemoryStream(page: DNPage): DDN.mscorlib.DNMemoryStream;
    function Validate(outputLogStream: DDN.mscorlib.DNStream; format: DNPdfFormat): Boolean; overload;
    function Validate(options: DNPdfFormatConversionOptions): Boolean; overload;
    function Convert(callback: DNDocument_CallBackGetHocr): Boolean; overload;
    function Convert(outputLogStream: DDN.mscorlib.DNStream; format: DNPdfFormat; action: DNConvertErrorAction): Boolean; overload;
    procedure Flatten; overload;
    procedure Flatten(flattenSettings: DNForm_FlattenSettings); overload;
    procedure Encrypt(userPassword: string; ownerPassword: string; privileges: DNDocumentPrivilege; cryptoAlgorithm: DNCryptoAlgorithm; usePdf20: Boolean); overload;
    procedure Encrypt(userPassword: string; ownerPassword: string; permissions: DNPermissions; cryptoAlgorithm: DNCryptoAlgorithm); overload;
    procedure Encrypt(userPassword: string; ownerPassword: string; permissions: DNPermissions; cryptoAlgorithm: DNCryptoAlgorithm; usePdf20: Boolean); overload;
    procedure ChangePasswords(ownerPassword: string; newUserPassword: string; newOwnerPassword: string);
    procedure Decrypt;
    procedure Optimize;
    procedure Save; overload;
    procedure Save(outputFileName: string; format: DNSaveFormat); overload;
    procedure Save(outputStream: DDN.mscorlib.DNStream; format: DNSaveFormat); overload;
    procedure Save(outputFileName: string; options: DNSaveOptions); overload;
    procedure Save(outputStream: DDN.mscorlib.DNStream; options: DNSaveOptions); overload;
    procedure Save(response: DDN.System.Web.DNHttpResponse; outputFileName: string; disposition: DNContentDisposition; options: DNSaveOptions); overload;
    procedure Dispose;
    procedure OptimizeResources; overload;
    procedure OptimizeResources(strategy: DNOptimizationOptions); overload;
    function GetCatalogValue(key: string): DDN.mscorlib.DNObject;
    procedure FreeMemory;
    procedure SaveXml(&file: string);
    function GetObjectById(id: string): DDN.mscorlib.DNObject;
    procedure BindXml(&file: string); overload;
    procedure Repair;
    procedure BindXml(xmlFile: string; xslFile: string); overload;
    procedure BindXml(xmlStream: DDN.mscorlib.DNStream; xslStream: DDN.mscorlib.DNStream); overload;
    procedure BindXml(xmlStream: DDN.mscorlib.DNStream; xslStream: DDN.mscorlib.DNStream; settings: DDN.System.Xml.DNXmlReaderSettings); overload;
    procedure BindXml(stream: DDN.mscorlib.DNStream); overload;
    procedure GetXmpMetadata(stream: DDN.mscorlib.DNStream);
    procedure SetXmpMetadata(stream: DDN.mscorlib.DNStream);
    function Check(doRepair: Boolean): Boolean;
    procedure RemovePdfaCompliance;
    procedure RemovePdfUaCompliance;
    procedure SetTitle(title: string);
    procedure ProcessParagraphs;
    procedure Save(output: DDN.mscorlib.DNStream); overload;
    procedure Save(outputFileName: string); overload;
    procedure ExportAnnotationsToXfdf(fileName: string); overload;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property JavaScript: DNJavaScriptCollection read get_JavaScript;
    property PageInfo: DNPageInfo read get_PageInfo write set_PageInfo;
    property EnableSignatureSanitization: Boolean read get_EnableSignatureSanitization write set_EnableSignatureSanitization;
    property IsPdfaCompliant: Boolean read get_IsPdfaCompliant;
    property IsPdfUaCompliant: Boolean read get_IsPdfUaCompliant;
    property IsXrefGapsAllowed: Boolean read get_IsXrefGapsAllowed write set_IsXrefGapsAllowed;
    property NamedDestinations: DNNamedDestinationCollection read get_NamedDestinations;
    property Destinations: DNDestinationCollection read get_Destinations;
    property PdfFormat: DNPdfFormat read get_PdfFormat;
    property EmbedStandardFonts: Boolean read get_EmbedStandardFonts write set_EmbedStandardFonts;
    property DisableFontLicenseVerifications: Boolean read get_DisableFontLicenseVerifications write set_DisableFontLicenseVerifications;
    property FontUtilities: DNDocument_IDocumentFontUtilities read get_FontUtilities;
    property Collection: DNCollection read get_Collection write set_Collection;
    property Version: string read get_Version;
    property OpenAction: DNIAppointment read get_OpenAction write set_OpenAction;
    property HideToolBar: Boolean read get_HideToolBar write set_HideToolBar;
    property HideMenubar: Boolean read get_HideMenubar write set_HideMenubar;
    property HideWindowUI: Boolean read get_HideWindowUI write set_HideWindowUI;
    property FitWindow: Boolean read get_FitWindow write set_FitWindow;
    property CenterWindow: Boolean read get_CenterWindow write set_CenterWindow;
    property DisplayDocTitle: Boolean read get_DisplayDocTitle write set_DisplayDocTitle;
    property Pages: DNPageCollection read get_Pages;
    property Outlines: DNOutlineCollection read get_Outlines;
    property Actions: DNDocumentActionCollection read get_Actions;
    property Form: DNForms_Form read get_Form;
    property EmbeddedFiles: DNEmbeddedFileCollection read get_EmbeddedFiles;
    property Direction: DNDirection read get_Direction write set_Direction;
    property PageMode: DNPageMode read get_PageMode write set_PageMode;
    property NonFullScreenPageMode: DNPageMode read get_NonFullScreenPageMode write set_NonFullScreenPageMode;
    property PageLayout: DNPageLayout read get_PageLayout write set_PageLayout;
    property Duplex: DNPrintDuplex read get_Duplex write set_Duplex;
    property FileName: string read get_FileName;
    property Info: DNDocumentInfo read get_Info;
    property Metadata: DNMetadata read get_Metadata;
    property LogicalStructure: DNRootElement read get_LogicalStructure;
    property CryptoAlgorithm: DDN.mscorlib.DNNullable<DNCryptoAlgorithm> read get_CryptoAlgorithm;
    property IsLinearized: Boolean read get_IsLinearized write set_IsLinearized;
    property Permissions: Int32 read get_Permissions;
    property IsEncrypted: Boolean read get_IsEncrypted;
    property Id: DNPdf_Id read get_Id;
    property Background: DNColor read get_Background write set_Background;
    property OptimizeSize: Boolean read get_OptimizeSize write set_OptimizeSize;
    property AllowReusePageContent: Boolean read get_AllowReusePageContent write set_AllowReusePageContent;
    property IgnoreCorruptedObjects: Boolean read get_IgnoreCorruptedObjects write set_IgnoreCorruptedObjects;
    property PageLabels: DNPageLabelCollection read get_PageLabels;
    property EnableObjectUnload: Boolean read get_EnableObjectUnload write set_EnableObjectUnload;
    property TaggedContent: DNITaggedContent read get_TaggedContent;
  end;

  TDNDocument = class(TDNGenericImport<DNDocumentClass, DNDocument>) end;

  //-------------namespace: Aspose.Pdf----------------
  DNDocumentFactoryClass = interface(DDN.mscorlib.DNObjectClass)
  ['{E8ED9390-0ED9-5E39-8DBE-261FB29C2722}']
  { constructors } 

    {class} function init: DNDocumentFactory;

  end;

  [DNTypeName('Aspose.Pdf.DocumentFactory')]
  DNDocumentFactory = interface(DDN.mscorlib.DNObject)
  ['{9E99C074-B10C-3D15-9F62-7F58C9765205}']
  { methods } 

    function CreateDocument(input: DDN.mscorlib.DNStream; options: DNLoadOptions): DNDocument; overload;
    function CreateDocument: DNDocument; overload;
    function CreateDocument(input: DDN.mscorlib.DNStream): DNDocument; overload;
    function CreateDocument(input: DDN.mscorlib.DNStream; password: string): DNDocument; overload;
    function CreateDocument(fileName: string): DNDocument; overload;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNDocumentFactory = class(TDNGenericImport<DNDocumentFactoryClass, DNDocumentFactory>) end;

  //-------------namespace: Aspose.Pdf.Drawing----------------
  DNPatternColorSpaceClass = interface(DDN.mscorlib.DNObjectClass)
  ['{2C6D2F31-7936-53E7-A32E-897A2573094B}']
  end;

  [DNTypeName('Aspose.Pdf.Drawing.PatternColorSpace')]
  DNPatternColorSpace = interface(DDN.mscorlib.DNObject)
  ['{6ADC5768-0A7F-3584-AA30-E796BF3B0CD6}']
  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNPatternColorSpace = class(TDNGenericImport<DNPatternColorSpaceClass, DNPatternColorSpace>) end;

  //-------------namespace: Aspose.Pdf.Drawing----------------
  DNGradientAxialShadingClass = interface(DNPatternColorSpaceClass)
  ['{13712DB7-D7A4-572F-B0E1-2C4E66B5AA27}']
  { constructors } 

    {class} function init: DNGradientAxialShading; overload;
    {class} function init(startColor: DNColor; endColor: DNColor): DNGradientAxialShading; overload;

  end;

  [DNTypeName('Aspose.Pdf.Drawing.GradientAxialShading')]
  DNGradientAxialShading = interface(DNPatternColorSpace)
  ['{3003E101-0553-3334-9A1A-8D6793ACCAA2}']
  { getters & setters } 

    function get_Start: DNPoint;
    procedure set_Start(value: DNPoint);
    function get_End: DNPoint;
    procedure set_End(value: DNPoint);
    function get_StartColor: DNColor;
    procedure set_StartColor(value: DNColor);
    function get_EndColor: DNColor;
    procedure set_EndColor(value: DNColor);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Start: DNPoint read get_Start write set_Start;
    property &End: DNPoint read get_End write set_End;
    property StartColor: DNColor read get_StartColor write set_StartColor;
    property EndColor: DNColor read get_EndColor write set_EndColor;
  end;

  TDNGradientAxialShading = class(TDNGenericImport<DNGradientAxialShadingClass, DNGradientAxialShading>) end;

  //-------------namespace: Aspose.Pdf.Drawing----------------
  DNGradientRadialShadingClass = interface(DNPatternColorSpaceClass)
  ['{F2FC4373-9CF4-54A3-8126-EA8B8CE513F2}']
  { constructors } 

    {class} function init: DNGradientRadialShading; overload;
    {class} function init(startColor: DNColor; endColor: DNColor): DNGradientRadialShading; overload;

  end;

  [DNTypeName('Aspose.Pdf.Drawing.GradientRadialShading')]
  DNGradientRadialShading = interface(DNPatternColorSpace)
  ['{C6304ECC-1CDA-3454-AC3B-60125C87C5EE}']
  { getters & setters } 

    function get_Start: DNPoint;
    procedure set_Start(value: DNPoint);
    function get_End: DNPoint;
    procedure set_End(value: DNPoint);
    function get_StartingRadius: Double;
    procedure set_StartingRadius(value: Double);
    function get_EndingRadius: Double;
    procedure set_EndingRadius(value: Double);
    function get_StartColor: DNColor;
    procedure set_StartColor(value: DNColor);
    function get_EndColor: DNColor;
    procedure set_EndColor(value: DNColor);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Start: DNPoint read get_Start write set_Start;
    property &End: DNPoint read get_End write set_End;
    property StartingRadius: Double read get_StartingRadius write set_StartingRadius;
    property EndingRadius: Double read get_EndingRadius write set_EndingRadius;
    property StartColor: DNColor read get_StartColor write set_StartColor;
    property EndColor: DNColor read get_EndColor write set_EndColor;
  end;

  TDNGradientRadialShading = class(TDNGenericImport<DNGradientRadialShadingClass, DNGradientRadialShading>) end;

  //-------------namespace: Aspose.Pdf.Drawing----------------
  DNShapeClass = interface(DDN.mscorlib.DNObjectClass)
  ['{F158A0C6-33AF-5364-9C08-0D72C19EEE65}']
  end;

  [DNTypeName('Aspose.Pdf.Drawing.Shape')]
  DNShape = interface(DDN.mscorlib.DNObject)
  ['{0C05BC1D-92C8-38BF-8E7D-97D4DE422985}']
  { getters & setters } 

    function get_GraphInfo: DNGraphInfo;
    procedure set_GraphInfo(value: DNGraphInfo);
    function get_Text: DNTextFragment;
    procedure set_Text(value: DNTextFragment);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property GraphInfo: DNGraphInfo read get_GraphInfo write set_GraphInfo;
    property Text: DNTextFragment read get_Text write set_Text;
  end;

  TDNShape = class(TDNGenericImport<DNShapeClass, DNShape>) end;

  //-------------namespace: Aspose.Pdf.Drawing----------------
  DNArcClass = interface(DNShapeClass)
  ['{537C736E-5A7D-5066-BA9C-F742F8AAE88F}']
  { constructors } 

    {class} function init(posX: Single; posY: Single; radius: Single; alpha: Single; beta: Single): DNArc;

  end;

  [DNTypeName('Aspose.Pdf.Drawing.Arc')]
  DNArc = interface(DNShape)
  ['{E82A294B-4639-30B4-9E27-C1F37E709D55}']
  { getters & setters } 

    function get_PosX: Double;
    procedure set_PosX(value: Double);
    function get_PosY: Double;
    procedure set_PosY(value: Double);
    function get_Radius: Double;
    procedure set_Radius(value: Double);
    function get_Alpha: Double;
    procedure set_Alpha(value: Double);
    function get_Beta: Double;
    procedure set_Beta(value: Double);
    function get_GraphInfo: DNGraphInfo;
    procedure set_GraphInfo(value: DNGraphInfo);
    function get_Text: DNTextFragment;
    procedure set_Text(value: DNTextFragment);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property PosX: Double read get_PosX write set_PosX;
    property PosY: Double read get_PosY write set_PosY;
    property Radius: Double read get_Radius write set_Radius;
    property Alpha: Double read get_Alpha write set_Alpha;
    property Beta: Double read get_Beta write set_Beta;
    property GraphInfo: DNGraphInfo read get_GraphInfo write set_GraphInfo;
    property Text: DNTextFragment read get_Text write set_Text;
  end;

  TDNArc = class(TDNGenericImport<DNArcClass, DNArc>) end;

  //-------------namespace: Aspose.Pdf.Drawing----------------
  DNCircleClass = interface(DNShapeClass)
  ['{9008CD92-8386-5B9C-B5FD-E80098EA90DB}']
  { constructors } 

    {class} function init(posX: Single; posY: Single; radius: Single): DNCircle;

  end;

  [DNTypeName('Aspose.Pdf.Drawing.Circle')]
  DNCircle = interface(DNShape)
  ['{2CF62AF5-9D8B-30B7-9709-D35D67C72FDC}']
  { getters & setters } 

    function get_PosX: Double;
    procedure set_PosX(value: Double);
    function get_PosY: Double;
    procedure set_PosY(value: Double);
    function get_Radius: Double;
    procedure set_Radius(value: Double);
    function get_GraphInfo: DNGraphInfo;
    procedure set_GraphInfo(value: DNGraphInfo);
    function get_Text: DNTextFragment;
    procedure set_Text(value: DNTextFragment);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property PosX: Double read get_PosX write set_PosX;
    property PosY: Double read get_PosY write set_PosY;
    property Radius: Double read get_Radius write set_Radius;
    property GraphInfo: DNGraphInfo read get_GraphInfo write set_GraphInfo;
    property Text: DNTextFragment read get_Text write set_Text;
  end;

  TDNCircle = class(TDNGenericImport<DNCircleClass, DNCircle>) end;

  //-------------namespace: Aspose.Pdf.Drawing----------------
  DNCurveClass = interface(DNShapeClass)
  ['{FDE97960-5B2F-5DBC-8A59-57CCAF6A1882}']
  { constructors } 

    {class} function init(positionArray: TArray<Single>): DNCurve;

  end;

  [DNTypeName('Aspose.Pdf.Drawing.Curve')]
  DNCurve = interface(DNShape)
  ['{68708DC5-DDCA-3EE7-95E7-0050D1DBCADD}']
  { getters & setters } 

    function get_PositionArray: TArray<Single>;
    procedure set_PositionArray(value: TArray<Single>);
    function get_GraphInfo: DNGraphInfo;
    procedure set_GraphInfo(value: DNGraphInfo);
    function get_Text: DNTextFragment;
    procedure set_Text(value: DNTextFragment);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property PositionArray: TArray<Single> read get_PositionArray write set_PositionArray;
    property GraphInfo: DNGraphInfo read get_GraphInfo write set_GraphInfo;
    property Text: DNTextFragment read get_Text write set_Text;
  end;

  TDNCurve = class(TDNGenericImport<DNCurveClass, DNCurve>) end;

  //-------------namespace: Aspose.Pdf.Drawing----------------
  DNEllipseClass = interface(DNShapeClass)
  ['{C85DDBBE-A37C-5210-962C-6BE2455CA471}']
  { constructors } 

    {class} function init(left: Double; bottom: Double; width: Double; height: Double): DNEllipse;

  end;

  [DNTypeName('Aspose.Pdf.Drawing.Ellipse')]
  DNEllipse = interface(DNShape)
  ['{DD4F3A4C-B378-39C4-9C34-3789E835CA4B}']
  { getters & setters } 

    function get_Left: Double;
    procedure set_Left(value: Double);
    function get_Bottom: Double;
    procedure set_Bottom(value: Double);
    function get_Width: Double;
    procedure set_Width(value: Double);
    function get_Height: Double;
    procedure set_Height(value: Double);
    function get_GraphInfo: DNGraphInfo;
    procedure set_GraphInfo(value: DNGraphInfo);
    function get_Text: DNTextFragment;
    procedure set_Text(value: DNTextFragment);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Left: Double read get_Left write set_Left;
    property Bottom: Double read get_Bottom write set_Bottom;
    property Width: Double read get_Width write set_Width;
    property Height: Double read get_Height write set_Height;
    property GraphInfo: DNGraphInfo read get_GraphInfo write set_GraphInfo;
    property Text: DNTextFragment read get_Text write set_Text;
  end;

  TDNEllipse = class(TDNGenericImport<DNEllipseClass, DNEllipse>) end;

  //-------------namespace: Aspose.Pdf.Drawing----------------
  DNLineClass = interface(DNShapeClass)
  ['{C75AC53F-E10C-5861-B605-28B06BE6ED7D}']
  { constructors } 

    {class} function init(positionArray: TArray<Single>): DNLine;

  end;

  [DNTypeName('Aspose.Pdf.Drawing.Line')]
  DNLine = interface(DNShape)
  ['{FC728550-07D1-35DC-BBF9-D45E316CDB49}']
  { getters & setters } 

    function get_PositionArray: TArray<Single>;
    procedure set_PositionArray(value: TArray<Single>);
    function get_GraphInfo: DNGraphInfo;
    procedure set_GraphInfo(value: DNGraphInfo);
    function get_Text: DNTextFragment;
    procedure set_Text(value: DNTextFragment);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property PositionArray: TArray<Single> read get_PositionArray write set_PositionArray;
    property GraphInfo: DNGraphInfo read get_GraphInfo write set_GraphInfo;
    property Text: DNTextFragment read get_Text write set_Text;
  end;

  TDNLine = class(TDNGenericImport<DNLineClass, DNLine>) end;

  //-------------namespace: Aspose.Pdf.Drawing----------------
  DNPathClass = interface(DNShapeClass)
  ['{8772845B-750E-538D-B0F4-5B39AEB54B2C}']
  { constructors } 

    {class} function init(shapes: TArray<DNShape>): DNPath; overload;
    {class} function init: DNPath; overload;

  end;

  [DNTypeName('Aspose.Pdf.Drawing.Path')]
  DNPath = interface(DNShape)
  ['{A2F7C03A-7F5F-3C3B-A2B2-65FF47205B7B}']
  { getters & setters } 

    function get_Shapes: DDN.mscorlib.DNList<DNShape>;
    function get_GraphInfo: DNGraphInfo;
    procedure set_GraphInfo(value: DNGraphInfo);
    function get_Text: DNTextFragment;
    procedure set_Text(value: DNTextFragment);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Shapes: DDN.mscorlib.DNList<DNShape> read get_Shapes;
    property GraphInfo: DNGraphInfo read get_GraphInfo write set_GraphInfo;
    property Text: DNTextFragment read get_Text write set_Text;
  end;

  TDNPath = class(TDNGenericImport<DNPathClass, DNPath>) end;

  //-------------namespace: Aspose.Pdf.Drawing----------------
  DNDrawing_RectangleClass = interface(DNShapeClass)
  ['{CE0F589D-80CC-5810-BA37-EBB7D80DC9EA}']
  { constructors } 

    {class} function init(left: Single; bottom: Single; width: Single; height: Single): DNDrawing_Rectangle;

  end;

  [DNTypeName('Aspose.Pdf.Drawing.Rectangle')]
  DNDrawing_Rectangle = interface(DNShape)
  ['{C4D399FA-DA61-3787-978E-A3916B6B0569}']
  { getters & setters } 

    function get_RoundedCornerRadius: Double;
    procedure set_RoundedCornerRadius(value: Double);
    function get_Left: Double;
    procedure set_Left(value: Double);
    function get_Bottom: Double;
    procedure set_Bottom(value: Double);
    function get_Width: Double;
    procedure set_Width(value: Double);
    function get_Height: Double;
    procedure set_Height(value: Double);
    function get_GraphInfo: DNGraphInfo;
    procedure set_GraphInfo(value: DNGraphInfo);
    function get_Text: DNTextFragment;
    procedure set_Text(value: DNTextFragment);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property RoundedCornerRadius: Double read get_RoundedCornerRadius write set_RoundedCornerRadius;
    property Left: Double read get_Left write set_Left;
    property Bottom: Double read get_Bottom write set_Bottom;
    property Width: Double read get_Width write set_Width;
    property Height: Double read get_Height write set_Height;
    property GraphInfo: DNGraphInfo read get_GraphInfo write set_GraphInfo;
    property Text: DNTextFragment read get_Text write set_Text;
  end;

  TDNDrawing_Rectangle = class(TDNGenericImport<DNDrawing_RectangleClass, DNDrawing_Rectangle>) end;

  //-------------namespace: Aspose.Pdf----------------
  DNEmbeddedFileCollectionClass = interface(DDN.mscorlib.DNObjectClass)
  ['{387F70DE-8E41-5F81-B03B-43F65289ACC0}']
  end;

  [DNTypeName('Aspose.Pdf.EmbeddedFileCollection')]
  DNEmbeddedFileCollection = interface(DDN.mscorlib.DNObject)
  ['{DA70962C-8242-39CB-BD8A-2D95A2BDE2DA}']
  { getters & setters } 

    function get_IsSynchronized: Boolean;
    function get_SyncRoot: DDN.mscorlib.DNObject;
    function get_Count: Int32;
    function get_Keys: DDN.mscorlib.DNList<string>;
    function get_Item(index: Int32): DNFileSpecification; overload;
    function get_Item(name: string): DNFileSpecification; overload;

  { methods } 

    procedure CopyTo(&array: TArray<DNFileSpecification>; index: Int32);
    function GetEnumerator: DDN.mscorlib.DNIEnumerator<DNFileSpecification>;
    procedure Add(key: string; &file: DNFileSpecification);
    procedure DeleteByKey(key: string);
    function FindByName(name: string): DNFileSpecification;
    procedure Delete(name: string); overload;
    procedure Delete; overload;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property IsSynchronized: Boolean read get_IsSynchronized;
    property SyncRoot: DDN.mscorlib.DNObject read get_SyncRoot;
    property Count: Int32 read get_Count;
    property Keys: DDN.mscorlib.DNList<string> read get_Keys;
    property Item[index: Int32]: DNFileSpecification read get_Item; default;
    property Item[name: string]: DNFileSpecification read get_Item; default;
  end;

  TDNEmbeddedFileCollection = class(TDNGenericImport<DNEmbeddedFileCollectionClass, DNEmbeddedFileCollection>) end;

  //-------------namespace: Aspose.Pdf----------------
  DNCollectionClass = interface(DNEmbeddedFileCollectionClass)
  ['{581C2CA2-E4DB-511A-A0B1-6E563F424C8B}']
  { constructors } 

    {class} function init: DNCollection;

  end;

  [DNTypeName('Aspose.Pdf.Collection')]
  DNCollection = interface(DNEmbeddedFileCollection)
  ['{3C61CB24-BB5D-38B6-A03D-AAD8A2EC1873}']
  { getters & setters } 

    function get_DefaultEntry: string;
    function get_IsSynchronized: Boolean;
    function get_SyncRoot: DDN.mscorlib.DNObject;
    function get_Count: Int32;
    function get_Keys: DDN.mscorlib.DNList<string>;
    function get_Item(index: Int32): DNFileSpecification; overload;
    function get_Item(name: string): DNFileSpecification; overload;

  { methods } 

    procedure CopyTo(&array: TArray<DNFileSpecification>; index: Int32);
    function GetEnumerator: DDN.mscorlib.DNIEnumerator<DNFileSpecification>;
    procedure Add(key: string; &file: DNFileSpecification);
    procedure DeleteByKey(key: string);
    function FindByName(name: string): DNFileSpecification;
    procedure Delete(name: string); overload;
    procedure Delete; overload;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property DefaultEntry: string read get_DefaultEntry;
    property IsSynchronized: Boolean read get_IsSynchronized;
    property SyncRoot: DDN.mscorlib.DNObject read get_SyncRoot;
    property Count: Int32 read get_Count;
    property Keys: DDN.mscorlib.DNList<string> read get_Keys;
    property Item[index: Int32]: DNFileSpecification read get_Item; default;
    property Item[name: string]: DNFileSpecification read get_Item; default;
  end;

  TDNCollection = class(TDNGenericImport<DNCollectionClass, DNCollection>) end;

  //-------------namespace: Aspose.Pdf----------------
  DNEncryptedPayloadClass = interface(DDN.mscorlib.DNObjectClass)
  ['{4463D76B-6B5F-52BB-B6BA-E2C52D49B1CB}']
  { constructors } 

    {class} function init(fileSpecification: DNFileSpecification): DNEncryptedPayload;

  end;

  [DNTypeName('Aspose.Pdf.EncryptedPayload')]
  DNEncryptedPayload = interface(DDN.mscorlib.DNObject)
  ['{9554FD41-07FD-3A16-AE0B-2E7AD7236F2E}']
  { getters & setters } 

    function get_Type: string;
    function get_Subtype: string;
    function get_Version: string;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property &Type: string read get_Type;
    property Subtype: string read get_Subtype;
    property Version: string read get_Version;
  end;

  TDNEncryptedPayload = class(TDNGenericImport<DNEncryptedPayloadClass, DNEncryptedPayload>) end;

  //-------------namespace: Aspose.Pdf.Facades----------------
  DNAlignmentTypeClass = interface(DDN.mscorlib.DNObjectClass)
  ['{A972F43B-85BA-5C76-AB2A-118FADE27A10}']
  { constructors } 

    {class} function init(name: string): DNAlignmentType;

  { static fields getter & setter } 

   function __fakeFieldGet_Center: DNAlignmentType;
   function __fakeFieldGet_Left: DNAlignmentType;
   function __fakeFieldGet_Right: DNAlignmentType;

  { static fields } 

    {class} property Center: DNAlignmentType read __fakeFieldGet_Center;
    {class} property Left: DNAlignmentType read __fakeFieldGet_Left;
    {class} property Right: DNAlignmentType read __fakeFieldGet_Right;

  end;

  [DNTypeName('Aspose.Pdf.Facades.AlignmentType')]
  DNAlignmentType = interface(DDN.mscorlib.DNObject)
  ['{065D9E48-DD67-335C-ABB7-28255AB85FF3}']
  { methods } 

    function ToString: string;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  end;

  TDNAlignmentType = class(TDNGenericImport<DNAlignmentTypeClass, DNAlignmentType>) end;

  //-------------namespace: Aspose.Pdf.Facades----------------
  DNAutoFillerClass = interface(DNObjectClass)
  ['{CA356048-4117-5F73-809E-0D8FFAAA4636}']
  { static getter & setter } 

    procedure set_UnFlattenFields(value: TArray<string>);

  { constructors } 

    {class} function init: DNAutoFiller;

  { static propertys } 

    {class} property UnFlattenFields: TArray<string> write set_UnFlattenFields;
  end;

  [DNTypeName('Aspose.Pdf.Facades.AutoFiller')]
  DNAutoFiller = interface(DNISaveableFacade)
  ['{2ED27758-B412-38AD-AC76-FD0AF7F02E7E}']
  { getters & setters } 

    procedure set_UnFlattenFields(value: TArray<string>);
    function get_OutputStream: DDN.mscorlib.DNStream;
    procedure set_OutputStream(value: DDN.mscorlib.DNStream);
    function get_OutputStreams: TArray<DDN.mscorlib.DNStream>;
    procedure set_OutputStreams(value: TArray<DDN.mscorlib.DNStream>);
    function get_InputStream: DDN.mscorlib.DNStream;
    procedure set_InputStream(value: DDN.mscorlib.DNStream);
    function get_InputFileName: string;
    procedure set_InputFileName(value: string);
    function get_OutputFileName: string;
    procedure set_OutputFileName(value: string);
    function get_GeneratingPath: string;
    procedure set_GeneratingPath(value: string);
    function get_BasicFileName: string;
    procedure set_BasicFileName(value: string);

  { methods } 

    procedure Save; overload;
    procedure ImportDataTable(dataTable: DDN.System.Data.DNDataTable);
    procedure Save(destFile: string); overload;
    procedure Save(destStream: DDN.mscorlib.DNStream); overload;
    procedure BindPdf(srcFile: string); overload;
    procedure BindPdf(srcStream: DDN.mscorlib.DNStream); overload;
    procedure BindPdf(srcDoc: DNDocument); overload;
    procedure Close;
    procedure Dispose;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property UnFlattenFields: TArray<string> write set_UnFlattenFields;
    property OutputStream: DDN.mscorlib.DNStream read get_OutputStream write set_OutputStream;
    property OutputStreams: TArray<DDN.mscorlib.DNStream> read get_OutputStreams write set_OutputStreams;
    property InputStream: DDN.mscorlib.DNStream read get_InputStream write set_InputStream;
    property InputFileName: string read get_InputFileName write set_InputFileName;
    property OutputFileName: string read get_OutputFileName write set_OutputFileName;
    property GeneratingPath: string read get_GeneratingPath write set_GeneratingPath;
    property BasicFileName: string read get_BasicFileName write set_BasicFileName;
  end;

  TDNAutoFiller = class(TDNGenericImport<DNAutoFillerClass, DNAutoFiller>) end;

  //-------------namespace: Aspose.Pdf.Facades----------------
  DNBookmarkClass = interface(DDN.mscorlib.DNObjectClass)
  ['{97D3CB56-3B3B-5854-964B-E5E8088E2870}']
  { constructors } 

    {class} function init: DNBookmark;

  end;

  [DNTypeName('Aspose.Pdf.Facades.Bookmark')]
  DNBookmark = interface(DDN.mscorlib.DNObject)
  ['{24A50779-26B2-35EA-A042-C1905425B20D}']
  { getters & setters } 

    function get_Action: string;
    procedure set_Action(value: string);
    function get_BoldFlag: Boolean;
    procedure set_BoldFlag(value: Boolean);
    function get_ChildItem: DNBookmarks;
    procedure set_ChildItem(value: DNBookmarks);
    function get_ChildItems: DNBookmarks;
    procedure set_ChildItems(value: DNBookmarks);
    function get_CustomAcorbatViewerMenuActionName: TArray<DDN.mscorlib.DNEnum>;
    procedure set_CustomAcorbatViewerMenuActionName(value: TArray<DDN.mscorlib.DNEnum>);
    function get_Destination: string;
    procedure set_Destination(value: string);
    function get_ItalicFlag: Boolean;
    procedure set_ItalicFlag(value: Boolean);
    function get_Level: Int32;
    procedure set_Level(value: Int32);
    function get_PageDisplay: string;
    procedure set_PageDisplay(value: string);
    function get_PageDisplay_Bottom: Int32;
    procedure set_PageDisplay_Bottom(value: Int32);
    function get_PageDisplay_Left: Int32;
    procedure set_PageDisplay_Left(value: Int32);
    function get_PageDisplay_Right: Int32;
    procedure set_PageDisplay_Right(value: Int32);
    function get_PageDisplay_Top: Int32;
    procedure set_PageDisplay_Top(value: Int32);
    function get_PageDisplay_Zoom: Int32;
    procedure set_PageDisplay_Zoom(value: Int32);
    function get_PageNumber: Int32;
    procedure set_PageNumber(value: Int32);
    function get_RemoteFile: string;
    procedure set_RemoteFile(value: string);
    function get_Title: string;
    procedure set_Title(value: string);
    function get_TitleColor: DDN.System.Drawing.DNColor;
    procedure set_TitleColor(value: DDN.System.Drawing.DNColor);
    function get_Open: Boolean;
    procedure set_Open(value: Boolean);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Action: string read get_Action write set_Action;
    property BoldFlag: Boolean read get_BoldFlag write set_BoldFlag;
    property ChildItem: DNBookmarks read get_ChildItem write set_ChildItem;
    property ChildItems: DNBookmarks read get_ChildItems write set_ChildItems;
    property CustomAcorbatViewerMenuActionName: TArray<DDN.mscorlib.DNEnum> read get_CustomAcorbatViewerMenuActionName write set_CustomAcorbatViewerMenuActionName;
    property Destination: string read get_Destination write set_Destination;
    property ItalicFlag: Boolean read get_ItalicFlag write set_ItalicFlag;
    property Level: Int32 read get_Level write set_Level;
    property PageDisplay: string read get_PageDisplay write set_PageDisplay;
    property PageDisplay_Bottom: Int32 read get_PageDisplay_Bottom write set_PageDisplay_Bottom;
    property PageDisplay_Left: Int32 read get_PageDisplay_Left write set_PageDisplay_Left;
    property PageDisplay_Right: Int32 read get_PageDisplay_Right write set_PageDisplay_Right;
    property PageDisplay_Top: Int32 read get_PageDisplay_Top write set_PageDisplay_Top;
    property PageDisplay_Zoom: Int32 read get_PageDisplay_Zoom write set_PageDisplay_Zoom;
    property PageNumber: Int32 read get_PageNumber write set_PageNumber;
    property RemoteFile: string read get_RemoteFile write set_RemoteFile;
    property Title: string read get_Title write set_Title;
    property TitleColor: DDN.System.Drawing.DNColor read get_TitleColor write set_TitleColor;
    property Open: Boolean read get_Open write set_Open;
  end;

  TDNBookmark = class(TDNGenericImport<DNBookmarkClass, DNBookmark>) end;

  //-------------namespace: Aspose.Pdf.Facades----------------
  DNDocumentPrivilegeClass = interface(DDN.mscorlib.DNObjectClass)
  ['{A4969E1F-EC29-5F83-A257-0737485A2E95}']
  { static getter & setter } 

    procedure set_PrintAllowLevel(value: Int32);
    procedure set_ChangeAllowLevel(value: Int32);
    procedure set_CopyAllowLevel(value: Int32);
    {class} function get_DegradedPrinting: DNDocumentPrivilege;
    {class} function get_Print: DNDocumentPrivilege;
    {class} function get_ModifyContents: DNDocumentPrivilege;
    {class} function get_Copy: DNDocumentPrivilege;
    {class} function get_ModifyAnnotations: DNDocumentPrivilege;
    {class} function get_FillIn: DNDocumentPrivilege;
    {class} function get_ScreenReaders: DNDocumentPrivilege;
    {class} function get_Assembly: DNDocumentPrivilege;
    {class} function get_AllowAll: DNDocumentPrivilege;
    {class} function get_ForbidAll: DNDocumentPrivilege;

  { static propertys } 

    {class} property PrintAllowLevel: Int32 write set_PrintAllowLevel;
    {class} property ChangeAllowLevel: Int32 write set_ChangeAllowLevel;
    {class} property CopyAllowLevel: Int32 write set_CopyAllowLevel;
    {class} property DegradedPrinting: DNDocumentPrivilege read get_DegradedPrinting;
    {class} property Print: DNDocumentPrivilege read get_Print;
    {class} property ModifyContents: DNDocumentPrivilege read get_ModifyContents;
    {class} property Copy: DNDocumentPrivilege read get_Copy;
    {class} property ModifyAnnotations: DNDocumentPrivilege read get_ModifyAnnotations;
    {class} property FillIn: DNDocumentPrivilege read get_FillIn;
    {class} property ScreenReaders: DNDocumentPrivilege read get_ScreenReaders;
    {class} property Assembly: DNDocumentPrivilege read get_Assembly;
    {class} property AllowAll: DNDocumentPrivilege read get_AllowAll;
    {class} property ForbidAll: DNDocumentPrivilege read get_ForbidAll;
  end;

  [DNTypeName('Aspose.Pdf.Facades.DocumentPrivilege')]
  DNDocumentPrivilege = interface(DDN.mscorlib.DNObject)
  ['{069A67D6-775C-34A0-8E9B-37BCE92A438E}']
  { getters & setters } 

    function get_AllowPrint: Boolean;
    procedure set_AllowPrint(value: Boolean);
    function get_AllowDegradedPrinting: Boolean;
    procedure set_AllowDegradedPrinting(value: Boolean);
    function get_AllowModifyContents: Boolean;
    procedure set_AllowModifyContents(value: Boolean);
    function get_AllowCopy: Boolean;
    procedure set_AllowCopy(value: Boolean);
    function get_AllowModifyAnnotations: Boolean;
    procedure set_AllowModifyAnnotations(value: Boolean);
    function get_AllowFillIn: Boolean;
    procedure set_AllowFillIn(value: Boolean);
    function get_AllowScreenReaders: Boolean;
    procedure set_AllowScreenReaders(value: Boolean);
    function get_AllowAssembly: Boolean;
    procedure set_AllowAssembly(value: Boolean);
    procedure set_PrintAllowLevel(value: Int32);
    procedure set_ChangeAllowLevel(value: Int32);
    procedure set_CopyAllowLevel(value: Int32);

  { methods } 

    function CompareTo(obj: DDN.mscorlib.DNObject): Int32;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property AllowPrint: Boolean read get_AllowPrint write set_AllowPrint;
    property AllowDegradedPrinting: Boolean read get_AllowDegradedPrinting write set_AllowDegradedPrinting;
    property AllowModifyContents: Boolean read get_AllowModifyContents write set_AllowModifyContents;
    property AllowCopy: Boolean read get_AllowCopy write set_AllowCopy;
    property AllowModifyAnnotations: Boolean read get_AllowModifyAnnotations write set_AllowModifyAnnotations;
    property AllowFillIn: Boolean read get_AllowFillIn write set_AllowFillIn;
    property AllowScreenReaders: Boolean read get_AllowScreenReaders write set_AllowScreenReaders;
    property AllowAssembly: Boolean read get_AllowAssembly write set_AllowAssembly;
    property PrintAllowLevel: Int32 write set_PrintAllowLevel;
    property ChangeAllowLevel: Int32 write set_ChangeAllowLevel;
    property CopyAllowLevel: Int32 write set_CopyAllowLevel;
  end;

  TDNDocumentPrivilege = class(TDNGenericImport<DNDocumentPrivilegeClass, DNDocumentPrivilege>) end;

  //-------------namespace: Aspose.Pdf.Facades----------------
  DNFacadeClass = interface(DNObjectClass)
  ['{D6FD52F8-D337-5705-B394-2A04EA996F3A}']
  end;

  [DNTypeName('Aspose.Pdf.Facades.Facade')]
  DNFacade = interface(DNIFacade)
  ['{E773FC40-8366-3496-90A3-EDBA1AA42CD7}']
  { getters & setters } 

    function get_Document: DNDocument;

  { methods } 

    procedure BindPdf(srcFile: string); overload;
    procedure BindPdf(srcStream: DDN.mscorlib.DNStream); overload;
    procedure BindPdf(srcDoc: DNDocument); overload;
    procedure Close;
    procedure Dispose;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Document: DNDocument read get_Document;
  end;

  TDNFacade = class(TDNGenericImport<DNFacadeClass, DNFacade>) end;

  //-------------namespace: Aspose.Pdf.Facades----------------
  DNPdfConverterClass = interface(DNFacadeClass)
  ['{6F0113EE-DFD1-58DF-9A89-9C800B00AB8A}']
  { constructors } 

    {class} function init: DNPdfConverter; overload;
    {class} function init(document: DNDocument): DNPdfConverter; overload;

  { static methods } 

    {class} function MergeImages(inputImagesStreams: DDN.mscorlib.DNList<DDN.mscorlib.DNStream>; outputImageFormat: DNImageFormat; mergeMode: DNImageMergeMode; horizontal: DDN.mscorlib.DNNullable<Int32>; vertical: DDN.mscorlib.DNNullable<Int32>): DDN.mscorlib.DNStream;
    {class} function MergeImagesAsTiff(inputImagesStreams: DDN.mscorlib.DNList<DDN.mscorlib.DNStream>): DDN.mscorlib.DNStream;

  end;

  [DNTypeName('Aspose.Pdf.Facades.PdfConverter')]
  DNPdfConverter = interface(DNFacade)
  ['{561BD0A9-093A-3F2A-A1B4-A311E8D27407}']
  { getters & setters } 

    function get_CoordinateType: DNPageCoordinateType;
    procedure set_CoordinateType(value: DNPageCoordinateType);
    function get_ShowHiddenAreas: Boolean;
    procedure set_ShowHiddenAreas(value: Boolean);
    function get_RenderingOptions: DNRenderingOptions;
    procedure set_RenderingOptions(value: DNRenderingOptions);
    function get_FormPresentationMode: DNFormPresentationMode;
    procedure set_FormPresentationMode(value: DNFormPresentationMode);
    function get_Resolution: DNResolution;
    procedure set_Resolution(value: DNResolution);
    function get_StartPage: Int32;
    procedure set_StartPage(value: Int32);
    function get_EndPage: Int32;
    procedure set_EndPage(value: Int32);
    function get_Password: string;
    procedure set_Password(value: string);
    function get_UserPassword: string;
    procedure set_UserPassword(value: string);
    function get_PageCount: Int32;
    function get_Document: DNDocument;

  { methods } 

    procedure DoConvert;
    procedure SaveAsTIFF(outputFile: string); overload;
    procedure SaveAsTIFF(outputFile: string; compressionType: DNCompressionType); overload;
    procedure SaveAsTIFF(outputFile: string; imageWidth: Int32; imageHeight: Int32); overload;
    procedure SaveAsTIFF(outputFile: string; pageSize: DNPageSize); overload;
    procedure SaveAsTIFF(outputFile: string; pageSize: DNPageSize; settings: DNTiffSettings); overload;
    procedure SaveAsTIFF(outputFile: string; imageWidth: Int32; imageHeight: Int32; compressionType: DNCompressionType); overload;
    procedure SaveAsTIFF(outputFile: string; imageWidth: Int32; imageHeight: Int32; settings: DNTiffSettings); overload;
    procedure SaveAsTIFF(outputFile: string; imageWidth: Int32; imageHeight: Int32; settings: DNTiffSettings; converter: DNIIndexBitmapConverter); overload;
    procedure SaveAsTIFFClassF(outputFile: string; imageWidth: Int32; imageHeight: Int32); overload;
    procedure SaveAsTIFFClassF(outputFile: string; pageSize: DNPageSize); overload;
    procedure SaveAsTIFFClassF(outputStream: DDN.mscorlib.DNStream; imageWidth: Int32; imageHeight: Int32); overload;
    procedure SaveAsTIFFClassF(outputStream: DDN.mscorlib.DNStream; pageSize: DNPageSize); overload;
    procedure SaveAsTIFF(outputStream: DDN.mscorlib.DNStream); overload;
    procedure SaveAsTIFF(outputStream: DDN.mscorlib.DNStream; compressionType: DNCompressionType); overload;
    procedure SaveAsTIFF(outputStream: DDN.mscorlib.DNStream; pageSize: DNPageSize); overload;
    procedure SaveAsTIFF(outputStream: DDN.mscorlib.DNStream; pageSize: DNPageSize; settings: DNTiffSettings); overload;
    procedure SaveAsTIFF(outputStream: DDN.mscorlib.DNStream; imageWidth: Int32; imageHeight: Int32); overload;
    procedure SaveAsTIFF(outputStream: DDN.mscorlib.DNStream; imageWidth: Int32; imageHeight: Int32; compressionType: DNCompressionType); overload;
    procedure SaveAsTIFF(outputStream: DDN.mscorlib.DNStream; imageWidth: Int32; imageHeight: Int32; settings: DNTiffSettings); overload;
    procedure SaveAsTIFF(outputStream: DDN.mscorlib.DNStream; imageWidth: Int32; imageHeight: Int32; settings: DNTiffSettings; converter: DNIIndexBitmapConverter); overload;
    function HasNextImage: Boolean;
    procedure GetNextImage(outputFile: string); overload;
    procedure GetNextImage(outputFile: string; pageSize: DNPageSize); overload;
    procedure GetNextImage(outputFile: string; format: DDN.System.Drawing.DNImageFormat); overload;
    procedure GetNextImage(outputFile: string; pageSize: DNPageSize; format: DDN.System.Drawing.DNImageFormat); overload;
    procedure GetNextImage(outputStream: DDN.mscorlib.DNStream); overload;
    procedure GetNextImage(outputStream: DDN.mscorlib.DNStream; pageSize: DNPageSize); overload;
    procedure GetNextImage(outputStream: DDN.mscorlib.DNStream; format: DDN.System.Drawing.DNImageFormat); overload;
    procedure GetNextImage(outputStream: DDN.mscorlib.DNStream; pageSize: DNPageSize; format: DDN.System.Drawing.DNImageFormat); overload;
    procedure GetNextImage(outputFile: string; format: DDN.System.Drawing.DNImageFormat; imageWidth: Int32; imageHeight: Int32; quality: Int32); overload;
    procedure GetNextImage(outputStream: DDN.mscorlib.DNStream; format: DDN.System.Drawing.DNImageFormat; imageWidth: Int32; imageHeight: Int32; quality: Int32); overload;
    procedure GetNextImage(outputFile: string; format: DDN.System.Drawing.DNImageFormat; imageWidth: Double; imageHeight: Double; quality: Int32); overload;
    procedure GetNextImage(outputStream: DDN.mscorlib.DNStream; format: DDN.System.Drawing.DNImageFormat; imageWidth: Double; imageHeight: Double; quality: Int32); overload;
    procedure BindPdf(inputFile: string); overload;
    procedure BindPdf(inputStream: DDN.mscorlib.DNStream); overload;
    procedure Close;
    procedure SaveAsTIFFClassF(outputFile: string); overload;
    procedure SaveAsTIFFClassF(outputStream: DDN.mscorlib.DNStream); overload;
    procedure SaveAsTIFF(outputFile: string; settings: DNTiffSettings); overload;
    procedure SaveAsTIFF(outputFile: string; settings: DNTiffSettings; converter: DNIIndexBitmapConverter); overload;
    procedure SaveAsTIFF(outputStream: DDN.mscorlib.DNStream; settings: DNTiffSettings); overload;
    procedure SaveAsTIFF(outputStream: DDN.mscorlib.DNStream; settings: DNTiffSettings; converter: DNIIndexBitmapConverter); overload;
    procedure GetNextImage(outputFile: string; format: DDN.System.Drawing.DNImageFormat; imageWidth: Int32; imageHeight: Int32); overload;
    procedure GetNextImage(outputStream: DDN.mscorlib.DNStream; format: DDN.System.Drawing.DNImageFormat; imageWidth: Int32; imageHeight: Int32); overload;
    procedure GetNextImage(outputStream: DDN.mscorlib.DNStream; format: DDN.System.Drawing.DNImageFormat; quality: Int32); overload;
    procedure GetNextImage(outputStream: DDN.mscorlib.DNStream; pageSize: DNPageSize; format: DDN.System.Drawing.DNImageFormat; quality: Int32); overload;
    procedure GetNextImage(outputFile: string; format: DDN.System.Drawing.DNImageFormat; quality: Int32); overload;
    procedure GetNextImage(outputFile: string; pageSize: DNPageSize; format: DDN.System.Drawing.DNImageFormat; quality: Int32); overload;
    procedure BindPdf(srcDoc: DNDocument); overload;
    procedure Dispose;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property CoordinateType: DNPageCoordinateType read get_CoordinateType write set_CoordinateType;
    property ShowHiddenAreas: Boolean read get_ShowHiddenAreas write set_ShowHiddenAreas;
    property RenderingOptions: DNRenderingOptions read get_RenderingOptions write set_RenderingOptions;
    property FormPresentationMode: DNFormPresentationMode read get_FormPresentationMode write set_FormPresentationMode;
    property Resolution: DNResolution read get_Resolution write set_Resolution;
    property StartPage: Int32 read get_StartPage write set_StartPage;
    property EndPage: Int32 read get_EndPage write set_EndPage;
    property Password: string read get_Password write set_Password;
    property UserPassword: string read get_UserPassword write set_UserPassword;
    property PageCount: Int32 read get_PageCount;
    property Document: DNDocument read get_Document;
  end;

  TDNPdfConverter = class(TDNGenericImport<DNPdfConverterClass, DNPdfConverter>) end;

  //-------------namespace: Aspose.Pdf.Facades----------------
  DNPdfExtractorClass = interface(DNFacadeClass)
  ['{D8CB352E-E16C-5975-9D78-61CD7943FB85}']
  { constructors } 

    {class} function init: DNPdfExtractor; overload;
    {class} function init(document: DNDocument): DNPdfExtractor; overload;

  end;

  [DNTypeName('Aspose.Pdf.Facades.PdfExtractor')]
  DNPdfExtractor = interface(DNFacade)
  ['{268C1DE4-8F4E-35EC-95E8-C7651F0E4127}']
  { getters & setters } 

    function get_StartPage: Int32;
    procedure set_StartPage(value: Int32);
    function get_EndPage: Int32;
    procedure set_EndPage(value: Int32);
    function get_ExtractTextMode: Int32;
    procedure set_ExtractTextMode(value: Int32);
    function get_TextSearchOptions: DNTextSearchOptions;
    procedure set_TextSearchOptions(value: DNTextSearchOptions);
    function get_ExtractImageMode: DNExtractImageMode;
    procedure set_ExtractImageMode(value: DNExtractImageMode);
    function get_IsBidi: Boolean;
    function get_Resolution: Int32;
    procedure set_Resolution(value: Int32);
    function get_Password: string;
    procedure set_Password(value: string);
    function get_Document: DNDocument;

  { methods } 

    procedure ExtractText; overload;
    procedure ExtractText(encoding: DDN.mscorlib.DNEncoding); overload;
    procedure GetText(outputFile: string); overload;
    procedure GetText(outputStream: DDN.mscorlib.DNStream); overload;
    procedure BindPdf(inputFile: string); overload;
    procedure BindPdf(inputStream: DDN.mscorlib.DNStream); overload;
    procedure ExtractImage;
    function HasNextImage: Boolean;
    function GetNextImage(outputFile: string): Boolean; overload;
    function GetNextImage(outputFile: string; format: DDN.System.Drawing.DNImageFormat): Boolean; overload;
    function GetNextImage(outputStream: DDN.mscorlib.DNStream; format: DDN.System.Drawing.DNImageFormat): Boolean; overload;
    function GetNextImage(outputStream: DDN.mscorlib.DNStream): Boolean; overload;
    function GetAttachNames: DDN.mscorlib.DNIList<string>;
    procedure ExtractAttachment; overload;
    procedure ExtractAttachment(attachmentFileName: string); overload;
    procedure GetAttachment(outputPath: string); overload;
    function HasNextPageText: Boolean;
    procedure GetNextPageText(outputFile: string); overload;
    procedure GetNextPageText(outputStream: DDN.mscorlib.DNStream); overload;
    procedure GetText(outputStream: DDN.mscorlib.DNStream; filterNotAscii: Boolean); overload;
    function GetAttachment: TArray<DDN.mscorlib.DNMemoryStream>; overload;
    function GetAttachmentInfo: DDN.mscorlib.DNList<DNFileSpecification>;
    procedure BindPdf(srcDoc: DNDocument); overload;
    procedure Close;
    procedure Dispose;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property StartPage: Int32 read get_StartPage write set_StartPage;
    property EndPage: Int32 read get_EndPage write set_EndPage;
    property ExtractTextMode: Int32 read get_ExtractTextMode write set_ExtractTextMode;
    property TextSearchOptions: DNTextSearchOptions read get_TextSearchOptions write set_TextSearchOptions;
    property ExtractImageMode: DNExtractImageMode read get_ExtractImageMode write set_ExtractImageMode;
    property IsBidi: Boolean read get_IsBidi;
    property Resolution: Int32 read get_Resolution write set_Resolution;
    property Password: string read get_Password write set_Password;
    property Document: DNDocument read get_Document;
  end;

  TDNPdfExtractor = class(TDNGenericImport<DNPdfExtractorClass, DNPdfExtractor>) end;

  //-------------namespace: Aspose.Pdf.Facades----------------
  DNSaveableFacadeClass = interface(DNFacadeClass)
  ['{8C234CDD-8236-5B49-9BC7-429424235CD2}']
  end;

  [DNTypeName('Aspose.Pdf.Facades.SaveableFacade')]
  DNSaveableFacade = interface(DNFacade)
  ['{69908784-F007-31CB-8B1C-27AE9E2F3B08}']
  { getters & setters } 

    function get_Document: DNDocument;

  { methods } 

    procedure Save(destFile: string); overload;
    procedure Save(destStream: DDN.mscorlib.DNStream); overload;
    procedure BindPdf(srcFile: string); overload;
    procedure BindPdf(srcStream: DDN.mscorlib.DNStream); overload;
    procedure BindPdf(srcDoc: DNDocument); overload;
    procedure Close;
    procedure Dispose;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Document: DNDocument read get_Document;
  end;

  TDNSaveableFacade = class(TDNGenericImport<DNSaveableFacadeClass, DNSaveableFacade>) end;

  //-------------namespace: Aspose.Pdf.Facades----------------
  DNFacades_FormClass = interface(DNSaveableFacadeClass)
  ['{6255B13E-976D-5F8A-81ED-CCF6248328B0}']
  { static getter & setter } 

    procedure set_ConvertTo(value: DNPdfFormat);

  { constructors } 

    {class} function init(srcStream: DDN.mscorlib.DNStream; destStream: DDN.mscorlib.DNStream): DNFacades_Form; overload;
    {class} function init: DNFacades_Form; overload;
    {class} function init(srcFileName: string): DNFacades_Form; overload;
    {class} function init(srcStream: DDN.mscorlib.DNStream): DNFacades_Form; overload;
    {class} function init(srcFileName: string; destFileName: string): DNFacades_Form; overload;
    {class} function init(srcFileName: string; destStream: DDN.mscorlib.DNStream): DNFacades_Form; overload;
    {class} function init(srcStream: DDN.mscorlib.DNStream; destFileName: string): DNFacades_Form; overload;
    {class} function init(document: DNDocument): DNFacades_Form; overload;
    {class} function init(document: DNDocument; destFileName: string): DNFacades_Form; overload;
    {class} function init(document: DNDocument; destStream: DDN.mscorlib.DNStream): DNFacades_Form; overload;
    {class} function init(inputStream: DDN.mscorlib.DNStream; response: DDN.System.Web.DNHttpResponse): DNFacades_Form; overload;
    {class} function init(inputFile: string; response: DDN.System.Web.DNHttpResponse): DNFacades_Form; overload;

  { static propertys } 

    {class} property ConvertTo: DNPdfFormat write set_ConvertTo;
  end;

  [DNTypeName('Aspose.Pdf.Facades.Form')]
  DNFacades_Form = interface(DNSaveableFacade)
  ['{83559992-CC72-3B38-891F-5D954EC5AD69}']
  { getters & setters } 

    function get_ImportResult: TArray<DNForm_FormImportResult>;
    function get_SrcFileName: string;
    procedure set_SrcFileName(value: string);
    procedure set_ConvertTo(value: DNPdfFormat);
    function get_DestFileName: string;
    procedure set_DestFileName(value: string);
    function get_SrcStream: DDN.mscorlib.DNStream;
    procedure set_SrcStream(value: DDN.mscorlib.DNStream);
    function get_DestStream: DDN.mscorlib.DNStream;
    procedure set_DestStream(value: DDN.mscorlib.DNStream);
    function get_FieldNames: TArray<string>;
    function get_FormSubmitButtonNames: TArray<string>;
    function get_ContentDisposition: DNContentDisposition;
    procedure set_ContentDisposition(value: DNContentDisposition);
    function get_Response: DDN.System.Web.DNHttpResponse;
    procedure set_Response(value: DDN.System.Web.DNHttpResponse);
    function get_SaveOptions: DNSaveOptions;
    procedure set_SaveOptions(value: DNSaveOptions);
    function get_AttachmentName: string;
    procedure set_AttachmentName(value: string);
    function get_Document: DNDocument;

  { methods } 

    function GetFieldFacade(fieldName: string): DNFormFieldFacade;
    function FillField(fieldName: string; fieldValue: string): Boolean; overload;
    function FillField(fieldName: string; index: Int32): Boolean; overload;
    function FillField(fieldName: string; beChecked: Boolean): Boolean; overload;
    function GetButtonOptionCurrentValue(fieldName: string): string;
    function GetButtonOptionValues(fieldName: string): DDN.mscorlib.DNDictionary<string, string>;
    function GetField(fieldName: string): string;
    function GetFullFieldName(fieldName: string): string;
    function GetFieldLimit(fieldName: string): Int32;
    procedure Save; overload;
    procedure Save(destFile: string); overload;
    procedure Save(destStream: DDN.mscorlib.DNStream); overload;
    procedure Close;
    procedure FlattenAllFields;
    procedure FlattenField(fieldName: string);
    function FillBarcodeField(fieldName: string; data: string): Boolean;
    procedure ImportFdf(inputFdfStream: DDN.mscorlib.DNStream);
    procedure ExportFdf(outputFdfStream: DDN.mscorlib.DNStream);
    procedure ImportXml(inputXmlStream: DDN.mscorlib.DNStream); overload;
    procedure ExportXml(outputXmlStream: DDN.mscorlib.DNStream);
    procedure ExtractXfaData(outputXmlStream: DDN.mscorlib.DNStream);
    procedure SetXfaData(inputXmlStream: DDN.mscorlib.DNStream);
    procedure ImportXfdf(inputXfdfStream: DDN.mscorlib.DNStream);
    procedure ExportXfdf(outputXfdfStream: DDN.mscorlib.DNStream);
    procedure FillField(fieldName: string; fieldValues: TArray<string>); overload;
    procedure RenameField(fieldName: string; newFieldName: string);
    function GetRichText(fieldName: string): string;
    function GetSubmitFlags(fieldName: string): DNSubmitFormFlag;
    function GetFieldType(fieldName: string): DNFieldType;
    function IsRequiredField(fieldName: string): Boolean;
    function GetFieldFlag(fieldName: string): DNPropertyFlag;
    procedure FillImageField(fieldName: string; imageFileName: string); overload;
    procedure FillImageField(fieldName: string; imageStream: DDN.mscorlib.DNStream); overload;
    procedure ImportXml(inputXmlStream: DDN.mscorlib.DNStream; IgnoreFormTemplateChanges: Boolean); overload;
    function FillField(fieldName: string; value: string; fitFontSize: Boolean): Boolean; overload;
    procedure BindPdf(srcFile: string); overload;
    procedure BindPdf(srcStream: DDN.mscorlib.DNStream); overload;
    procedure BindPdf(srcDoc: DNDocument); overload;
    procedure Dispose;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property ImportResult: TArray<DNForm_FormImportResult> read get_ImportResult;
    property SrcFileName: string read get_SrcFileName write set_SrcFileName;
    property ConvertTo: DNPdfFormat write set_ConvertTo;
    property DestFileName: string read get_DestFileName write set_DestFileName;
    property SrcStream: DDN.mscorlib.DNStream read get_SrcStream write set_SrcStream;
    property DestStream: DDN.mscorlib.DNStream read get_DestStream write set_DestStream;
    property FieldNames: TArray<string> read get_FieldNames;
    property FormSubmitButtonNames: TArray<string> read get_FormSubmitButtonNames;
    property ContentDisposition: DNContentDisposition read get_ContentDisposition write set_ContentDisposition;
    property Response: DDN.System.Web.DNHttpResponse read get_Response write set_Response;
    property SaveOptions: DNSaveOptions read get_SaveOptions write set_SaveOptions;
    property AttachmentName: string read get_AttachmentName write set_AttachmentName;
    property Document: DNDocument read get_Document;
  end;

  TDNFacades_Form = class(TDNGenericImport<DNFacades_FormClass, DNFacades_Form>) end;

  //-------------namespace: Aspose.Pdf.Facades----------------
  DNFormEditorClass = interface(DNSaveableFacadeClass)
  ['{93B6B997-58BA-5ECC-9489-EFA8F2FB6ACA}']
  { static getter & setter } 

    procedure set_ConvertTo(value: DNPdfFormat);

  { constructors } 

    {class} function init(srcStream: DDN.mscorlib.DNStream; destStream: DDN.mscorlib.DNStream): DNFormEditor; overload;
    {class} function init(srcFileName: string; destFileName: string): DNFormEditor; overload;
    {class} function init: DNFormEditor; overload;
    {class} function init(document: DNDocument): DNFormEditor; overload;
    {class} function init(document: DNDocument; destFileName: string): DNFormEditor; overload;
    {class} function init(document: DNDocument; destStream: DDN.mscorlib.DNStream): DNFormEditor; overload;
    {class} function init(inputStream: DDN.mscorlib.DNStream; response: DDN.System.Web.DNHttpResponse): DNFormEditor; overload;
    {class} function init(inputFile: string; response: DDN.System.Web.DNHttpResponse): DNFormEditor; overload;

  { static propertys } 

    {class} property ConvertTo: DNPdfFormat write set_ConvertTo;
  end;

  [DNTypeName('Aspose.Pdf.Facades.FormEditor')]
  DNFormEditor = interface(DNSaveableFacade)
  ['{D207B362-E3FC-3497-BD08-BA6D50B0D0E7}']
  { getters & setters } 

    function get_SrcFileName: string;
    procedure set_SrcFileName(value: string);
    function get_DestFileName: string;
    procedure set_DestFileName(value: string);
    function get_SrcStream: DDN.mscorlib.DNStream;
    procedure set_SrcStream(value: DDN.mscorlib.DNStream);
    procedure set_ConvertTo(value: DNPdfFormat);
    function get_DestStream: DDN.mscorlib.DNStream;
    procedure set_DestStream(value: DDN.mscorlib.DNStream);
    function get_Items: TArray<string>;
    procedure set_Items(value: TArray<string>);
    function get_ExportItems: TArray<TArray<string>>;
    procedure set_ExportItems(value: TArray<TArray<string>>);
    function get_Facade: DNFormFieldFacade;
    procedure set_Facade(value: DNFormFieldFacade);
    function get_RadioGap: Single;
    procedure set_RadioGap(value: Single);
    function get_RadioHoriz: Boolean;
    procedure set_RadioHoriz(value: Boolean);
    function get_RadioButtonItemSize: Double;
    procedure set_RadioButtonItemSize(value: Double);
    function get_SubmitFlag: DNSubmitFormFlag;
    procedure set_SubmitFlag(value: DNSubmitFormFlag);
    function get_ContentDisposition: DNContentDisposition;
    procedure set_ContentDisposition(value: DNContentDisposition);
    function get_Response: DDN.System.Web.DNHttpResponse;
    procedure set_Response(value: DDN.System.Web.DNHttpResponse);
    function get_SaveOptions: DNSaveOptions;
    procedure set_SaveOptions(value: DNSaveOptions);
    function get_AttachmentName: string;
    procedure set_AttachmentName(value: string);
    function get_Document: DNDocument;

  { methods } 

    procedure Save; overload;
    function SetFieldAttribute(fieldName: string; flag: DNPropertyFlag): Boolean;
    function SetFieldAppearance(fieldName: string; flags: DNAnnotationFlags): Boolean;
    function GetFieldAppearance(fieldName: string): DNAnnotationFlags;
    function SetSubmitFlag(fieldName: string; submitFormFlag: DNSubmitFormFlag): Boolean;
    function SetSubmitUrl(fieldName: string; url: string): Boolean;
    function SetFieldLimit(fieldName: string; fieldLimit: Int32): Boolean;
    function SetFieldCombNumber(fieldName: string; combNumber: Int32): Boolean;
    function MoveField(fieldName: string; llx: Single; lly: Single; urx: Single; ury: Single): Boolean;
    function AddField(fieldType: DNFieldType; fieldName: string; pageNum: Int32; llx: Single; lly: Single; urx: Single; ury: Single): Boolean; overload;
    function AddField(fieldType: DNFieldType; fieldName: string; initValue: string; pageNum: Int32; llx: Single; lly: Single; urx: Single; ury: Single): Boolean; overload;
    procedure RemoveField(fieldName: string);
    procedure ResetFacade;
    procedure ResetInnerFacade;
    procedure CopyInnerField(fieldName: string; newFieldName: string; pageNum: Int32); overload;
    procedure CopyInnerField(fieldName: string; newFieldName: string; pageNum: Int32; abscissa: Single; ordinate: Single); overload;
    procedure CopyOuterField(srcFileName: string; fieldName: string); overload;
    procedure CopyOuterField(srcFileName: string; fieldName: string; pageNum: Int32); overload;
    procedure CopyOuterField(srcFileName: string; fieldName: string; pageNum: Int32; abscissa: Single; ordinate: Single); overload;
    procedure DecorateField(fieldName: string); overload;
    procedure DecorateField(fieldType: DNFieldType); overload;
    procedure DecorateField; overload;
    procedure RenameField(fieldName: string; newFieldName: string);
    procedure RemoveFieldAction(fieldName: string);
    procedure AddSubmitBtn(fieldName: string; page: Int32; &label: string; url: string; llx: Single; lly: Single; urx: Single; ury: Single);
    procedure AddListItem(fieldName: string; itemName: string); overload;
    procedure AddListItem(fieldName: string; exportName: TArray<string>); overload;
    procedure DelListItem(fieldName: string; itemName: string);
    function SetFieldScript(fieldName: string; script: string): Boolean;
    function AddFieldScript(fieldName: string; script: string): Boolean;
    function Single2Multiple(fieldName: string): Boolean;
    function SetFieldAlignment(fieldName: string; alignment: Int32): Boolean;
    function SetFieldAlignmentV(fieldName: string; alignment: Int32): Boolean;
    procedure Close;
    procedure Save(destFile: string); overload;
    procedure Save(destStream: DDN.mscorlib.DNStream); overload;
    procedure BindPdf(srcFile: string); overload;
    procedure BindPdf(srcStream: DDN.mscorlib.DNStream); overload;
    procedure BindPdf(srcDoc: DNDocument); overload;
    procedure Dispose;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property SrcFileName: string read get_SrcFileName write set_SrcFileName;
    property DestFileName: string read get_DestFileName write set_DestFileName;
    property SrcStream: DDN.mscorlib.DNStream read get_SrcStream write set_SrcStream;
    property ConvertTo: DNPdfFormat write set_ConvertTo;
    property DestStream: DDN.mscorlib.DNStream read get_DestStream write set_DestStream;
    property Items: TArray<string> read get_Items write set_Items;
    property ExportItems: TArray<TArray<string>> read get_ExportItems write set_ExportItems;
    property Facade: DNFormFieldFacade read get_Facade write set_Facade;
    property RadioGap: Single read get_RadioGap write set_RadioGap;
    property RadioHoriz: Boolean read get_RadioHoriz write set_RadioHoriz;
    property RadioButtonItemSize: Double read get_RadioButtonItemSize write set_RadioButtonItemSize;
    property SubmitFlag: DNSubmitFormFlag read get_SubmitFlag write set_SubmitFlag;
    property ContentDisposition: DNContentDisposition read get_ContentDisposition write set_ContentDisposition;
    property Response: DDN.System.Web.DNHttpResponse read get_Response write set_Response;
    property SaveOptions: DNSaveOptions read get_SaveOptions write set_SaveOptions;
    property AttachmentName: string read get_AttachmentName write set_AttachmentName;
    property Document: DNDocument read get_Document;
  end;

  TDNFormEditor = class(TDNGenericImport<DNFormEditorClass, DNFormEditor>) end;

  //-------------namespace: Aspose.Pdf.Facades----------------
  DNPdfAnnotationEditorClass = interface(DNSaveableFacadeClass)
  ['{50FB11EF-3847-522A-B742-9F6830C147B4}']
  { constructors } 

    {class} function init: DNPdfAnnotationEditor; overload;
    {class} function init(document: DNDocument): DNPdfAnnotationEditor; overload;

  end;

  [DNTypeName('Aspose.Pdf.Facades.PdfAnnotationEditor')]
  DNPdfAnnotationEditor = interface(DNSaveableFacade)
  ['{71B87981-B880-31C1-BBD4-704B2F9A2334}']
  { getters & setters } 

    function get_Document: DNDocument;

  { methods } 

    procedure ImportAnnotationsFromXfdf(xfdfFile: string); overload;
    procedure ImportAnnotationFromXfdf(xfdfFile: string); overload;
    procedure ImportAnnotationFromXfdf(xfdfFile: string; annotType: TArray<DNAnnotationType>); overload;
    procedure ImportAnnotationFromXfdf(xfdfStream: DDN.mscorlib.DNStream; annotType: TArray<DNAnnotationType>); overload;
    procedure ImportAnnotationsFromXfdf(xfdfStream: DDN.mscorlib.DNStream); overload;
    procedure ImportAnnotationFromXfdf(xfdfStream: DDN.mscorlib.DNStream); overload;
    procedure ImportAnnotations(annotFile: TArray<string>; annotType: TArray<DNAnnotationType>); overload;
    procedure ImportAnnotations(annotFile: TArray<string>); overload;
    procedure ImportAnnotations(annotFileStream: TArray<DDN.mscorlib.DNStream>; annotType: TArray<DNAnnotationType>); overload;
    procedure ImportAnnotations(annotFileStream: TArray<DDN.mscorlib.DNStream>); overload;
    procedure ModifyAnnotations(start: Int32; &end: Int32; annotType: DDN.mscorlib.DNEnum; annotation: DNAnnotation); overload;
    procedure ModifyAnnotationsAuthor(start: Int32; &end: Int32; srcAuthor: string; desAuthor: string);
    procedure FlatteningAnnotations; overload;
    procedure FlatteningAnnotations(flattenSettings: DNForm_FlattenSettings); overload;
    procedure FlatteningAnnotations(start: Int32; &end: Int32; annotType: TArray<DNAnnotationType>); overload;
    procedure DeleteAnnotations; overload;
    procedure DeleteAnnotations(annotType: string); overload;
    procedure DeleteAnnotation(annotName: string);
    procedure ExportAnnotationsXfdf(xmlOutputStream: DDN.mscorlib.DNStream; start: Int32; &end: Int32; annotTypes: TArray<string>); overload;
    procedure ExportAnnotationsXfdf(xmlOutputStream: DDN.mscorlib.DNStream; start: Int32; &end: Int32; annotTypes: TArray<DNAnnotationType>); overload;
    procedure ExportAnnotationsToXfdf(xmlOutputStream: DDN.mscorlib.DNStream);
    function ExtractAnnotations(start: Int32; &end: Int32; annotTypes: TArray<string>): DDN.mscorlib.DNIList<DNAnnotation>; overload;
    function ExtractAnnotations(start: Int32; &end: Int32; annotTypes: TArray<DNAnnotationType>): DDN.mscorlib.DNIList<DNAnnotation>; overload;
    procedure ModifyAnnotations(start: Int32; &end: Int32; annotation: DNAnnotation); overload;
    procedure RedactArea(pageIndex: Int32; rect: DNPdf_Rectangle; color: DDN.System.Drawing.DNColor);
    procedure Save(destFile: string); overload;
    procedure Save(destStream: DDN.mscorlib.DNStream); overload;
    procedure BindPdf(srcFile: string); overload;
    procedure BindPdf(srcStream: DDN.mscorlib.DNStream); overload;
    procedure BindPdf(srcDoc: DNDocument); overload;
    procedure Close;
    procedure Dispose;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Document: DNDocument read get_Document;
  end;

  TDNPdfAnnotationEditor = class(TDNGenericImport<DNPdfAnnotationEditorClass, DNPdfAnnotationEditor>) end;

  //-------------namespace: Aspose.Pdf.Facades----------------
  DNPdfBookmarkEditorClass = interface(DNSaveableFacadeClass)
  ['{59947EDF-B937-57FC-A2E0-89183CFBCB6F}']
  { constructors } 

    {class} function init: DNPdfBookmarkEditor; overload;
    {class} function init(document: DNDocument): DNPdfBookmarkEditor; overload;

  { static methods } 

    {class} procedure ExportBookmarksToHtml(inPdfFile: string; outHtmlFile: string);

  end;

  [DNTypeName('Aspose.Pdf.Facades.PdfBookmarkEditor')]
  DNPdfBookmarkEditor = interface(DNSaveableFacade)
  ['{708EC4CD-0BBA-3B62-93D9-291E2F4775A2}']
  { getters & setters } 

    function get_Document: DNDocument;

  { methods } 

    procedure CreateBookmarks; overload;
    procedure CreateBookmarkOfPage(bookmarkName: string; pageNumber: Int32); overload;
    procedure CreateBookmarks(bookmark: DNBookmark); overload;
    procedure CreateBookmarks(color: DDN.System.Drawing.DNColor; boldFlag: Boolean; italicFlag: Boolean); overload;
    procedure CreateBookmarkOfPage(bookmarkName: TArray<string>; pageNumber: TArray<Int32>); overload;
    procedure DeleteBookmarks; overload;
    procedure DeleteBookmarks(title: string); overload;
    procedure ModifyBookmarks(sTitle: string; dTitle: string);
    function ExtractBookmarks: DNBookmarks; overload;
    function ExtractBookmarks(upperLevel: Boolean): DNBookmarks; overload;
    function ExtractBookmarks(title: string): DNBookmarks; overload;
    function ExtractBookmarks(bookmark: DNBookmark): DNBookmarks; overload;
    procedure ExtractBookmarksToHTML(pdfFile: string; cssFile: string);
    procedure ExportBookmarksToXML(xmlFile: string); overload;
    procedure ExportBookmarksToXML(stream: DDN.mscorlib.DNStream); overload;
    procedure ImportBookmarksWithXML(xmlFile: string); overload;
    procedure ImportBookmarksWithXML(stream: DDN.mscorlib.DNStream); overload;
    procedure Save(destFile: string); overload;
    procedure Save(destStream: DDN.mscorlib.DNStream); overload;
    procedure BindPdf(srcFile: string); overload;
    procedure BindPdf(srcStream: DDN.mscorlib.DNStream); overload;
    procedure BindPdf(srcDoc: DNDocument); overload;
    procedure Close;
    procedure Dispose;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Document: DNDocument read get_Document;
  end;

  TDNPdfBookmarkEditor = class(TDNGenericImport<DNPdfBookmarkEditorClass, DNPdfBookmarkEditor>) end;

  //-------------namespace: Aspose.Pdf.Facades----------------
  DNPdfContentEditorClass = interface(DNSaveableFacadeClass)
  ['{2AF053D4-784B-5BF9-8084-7A8C9A14A36D}']
  { constructors } 

    {class} function init: DNPdfContentEditor; overload;
    {class} function init(document: DNDocument): DNPdfContentEditor; overload;

  { static fields getter & setter } 

   function __fakeFieldGet_DocumentOpen: string;
   function __fakeFieldGet_DocumentClose: string;
   function __fakeFieldGet_DocumentWillSave: string;
   function __fakeFieldGet_DocumentSaved: string;
   function __fakeFieldGet_DocumentWillPrint: string;
   function __fakeFieldGet_DocumentPrinted: string;

  { static fields } 

    {class} property DocumentOpen: string read __fakeFieldGet_DocumentOpen;
    {class} property DocumentClose: string read __fakeFieldGet_DocumentClose;
    {class} property DocumentWillSave: string read __fakeFieldGet_DocumentWillSave;
    {class} property DocumentSaved: string read __fakeFieldGet_DocumentSaved;
    {class} property DocumentWillPrint: string read __fakeFieldGet_DocumentWillPrint;
    {class} property DocumentPrinted: string read __fakeFieldGet_DocumentPrinted;

  end;

  [DNTypeName('Aspose.Pdf.Facades.PdfContentEditor')]
  DNPdfContentEditor = interface(DNSaveableFacade)
  ['{551705CC-0B37-3140-8108-60BE1BFD8DAB}']
  { getters & setters } 

    function get_TextSearchOptions: DNTextSearchOptions;
    procedure set_TextSearchOptions(value: DNTextSearchOptions);
    function get_TextEditOptions: DNTextEditOptions;
    procedure set_TextEditOptions(value: DNTextEditOptions);
    function get_TextReplaceOptions: DNTextReplaceOptions;
    procedure set_TextReplaceOptions(value: DNTextReplaceOptions);
    function get_ReplaceTextStrategy: DNReplaceTextStrategy;
    procedure set_ReplaceTextStrategy(value: DNReplaceTextStrategy);
    function get_Document: DNDocument;

  { methods } 

    procedure BindPdf(inputFile: string); overload;
    procedure BindPdf(inputStream: DDN.mscorlib.DNStream); overload;
    function ExtractLink: DDN.mscorlib.DNIList<DNAnnotation>;
    procedure CreateWebLink(rect: DDN.System.Drawing.DNRectangle; url: string; originalPage: Int32; clr: DDN.System.Drawing.DNColor; actionName: TArray<DDN.mscorlib.DNEnum>); overload;
    procedure CreateWebLink(rect: DDN.System.Drawing.DNRectangle; url: string; originalPage: Int32; clr: DDN.System.Drawing.DNColor); overload;
    procedure CreateWebLink(rect: DDN.System.Drawing.DNRectangle; url: string; originalPage: Int32); overload;
    procedure CreateLocalLink(rect: DDN.System.Drawing.DNRectangle; desPage: Int32; originalPage: Int32; clr: DDN.System.Drawing.DNColor; actionName: TArray<DDN.mscorlib.DNEnum>); overload;
    procedure CreateLocalLink(rect: DDN.System.Drawing.DNRectangle; desPage: Int32; originalPage: Int32; clr: DDN.System.Drawing.DNColor); overload;
    procedure CreatePdfDocumentLink(rect: DDN.System.Drawing.DNRectangle; remotePdf: string; originalPage: Int32; destinationPage: Int32; clr: DDN.System.Drawing.DNColor; actionName: TArray<DDN.mscorlib.DNEnum>); overload;
    procedure CreatePdfDocumentLink(rect: DDN.System.Drawing.DNRectangle; remotePdf: string; originalPage: Int32; destinationPage: Int32; clr: DDN.System.Drawing.DNColor); overload;
    procedure CreatePdfDocumentLink(rect: DDN.System.Drawing.DNRectangle; remotePdf: string; originalPage: Int32; destinationPage: Int32); overload;
    procedure CreateCustomActionLink(rect: DDN.System.Drawing.DNRectangle; originalPage: Int32; color: DDN.System.Drawing.DNColor; actionName: TArray<DDN.mscorlib.DNEnum>);
    procedure CreateApplicationLink(rect: DDN.System.Drawing.DNRectangle; application: string; page: Int32; clr: DDN.System.Drawing.DNColor; actionName: TArray<DDN.mscorlib.DNEnum>); overload;
    procedure CreateApplicationLink(rect: DDN.System.Drawing.DNRectangle; application: string; page: Int32; clr: DDN.System.Drawing.DNColor); overload;
    procedure CreateApplicationLink(rect: DDN.System.Drawing.DNRectangle; application: string; page: Int32); overload;
    procedure CreateJavaScriptLink(code: string; rect: DDN.System.Drawing.DNRectangle; originalPage: Int32; color: DDN.System.Drawing.DNColor);
    procedure CreateText(rect: DDN.System.Drawing.DNRectangle; title: string; contents: string; open: Boolean; icon: string; page: Int32);
    procedure CreateFreeText(rect: DDN.System.Drawing.DNRectangle; contents: string; page: Int32);
    procedure CreateMarkup(rect: DDN.System.Drawing.DNRectangle; contents: string; &type: Int32; page: Int32; clr: DDN.System.Drawing.DNColor);
    procedure CreatePopup(rect: DDN.System.Drawing.DNRectangle; contents: string; open: Boolean; page: Int32);
    procedure CreateFileAttachment(rect: DDN.System.Drawing.DNRectangle; contents: string; filePath: string; page: Int32; name: string); overload;
    procedure CreateFileAttachment(rect: DDN.System.Drawing.DNRectangle; contents: string; filePath: string; page: Int32; name: string; opacity: Double); overload;
    procedure CreateFileAttachment(rect: DDN.System.Drawing.DNRectangle; contents: string; attachmentStream: DDN.mscorlib.DNStream; attachmentName: string; page: Int32; name: string); overload;
    procedure CreateFileAttachment(rect: DDN.System.Drawing.DNRectangle; contents: string; attachmentStream: DDN.mscorlib.DNStream; attachmentName: string; page: Int32; name: string; opacity: Double); overload;
    procedure AddDocumentAttachment(fileAttachmentPath: string; description: string); overload;
    procedure AddDocumentAttachment(fileAttachmentStream: DDN.mscorlib.DNStream; fileAttachmentName: string; description: string); overload;
    procedure DeleteAttachments;
    procedure CreateLine(rect: DDN.System.Drawing.DNRectangle; contents: string; x1: Single; y1: Single; x2: Single; y2: Single; page: Int32; border: Int32; clr: DDN.System.Drawing.DNColor; borderStyle: string; dashArray: TArray<Int32>; LEArray: TArray<string>);
    procedure CreateSquareCircle(rect: DDN.System.Drawing.DNRectangle; contents: string; clr: DDN.System.Drawing.DNColor; square: Boolean; page: Int32; borderWidth: Int32);
    procedure DrawCurve(lineInfo: DNLineInfo; page: Int32; annotRect: DDN.System.Drawing.DNRectangle; annotContents: string);
    procedure CreatePolygon(lineInfo: DNLineInfo; page: Int32; annotRect: DDN.System.Drawing.DNRectangle; annotContents: string);
    procedure CreatePolyLine(lineInfo: DNLineInfo; page: Int32; annotRect: DDN.System.Drawing.DNRectangle; annotContents: string);
    procedure CreateCaret(page: Int32; annotRect: DDN.System.Drawing.DNRectangle; caretRect: DDN.System.Drawing.DNRectangle; symbol: string; annotContents: string; color: DDN.System.Drawing.DNColor);
    procedure CreateRubberStamp(page: Int32; annotRect: DDN.System.Drawing.DNRectangle; icon: string; annotContents: string; color: DDN.System.Drawing.DNColor); overload;
    procedure CreateRubberStamp(page: Int32; annotRect: DDN.System.Drawing.DNRectangle; annotContents: string; color: DDN.System.Drawing.DNColor; appearanceFile: string); overload;
    procedure CreateRubberStamp(page: Int32; annotRect: DDN.System.Drawing.DNRectangle; annotContents: string; color: DDN.System.Drawing.DNColor; appearanceStream: DDN.mscorlib.DNStream); overload;
    procedure CreateBookmarksAction(title: string; color: DDN.System.Drawing.DNColor; boldFlag: Boolean; italicFlag: Boolean; &file: string; actionType: string; destination: string);
    procedure AddDocumentAdditionalAction(eventType: string; code: string);
    procedure RemoveDocumentOpenAction;
    procedure ChangeViewerPreference(viewerAttribution: Int32);
    function GetViewerPreference: Int32;
    procedure ReplaceImage(pageNumber: Int32; index: Int32; imageFile: string);
    procedure DeleteImage(pageNumber: Int32; index: TArray<Int32>); overload;
    procedure DeleteImage; overload;
    function ReplaceText(srcString: string; thePage: Int32; destString: string; textState: DNTextState): Boolean; overload;
    function ReplaceText(srcString: string; destString: string): Boolean; overload;
    function ReplaceText(srcString: string; thePage: Int32; destString: string): Boolean; overload;
    function ReplaceText(srcString: string; destString: string; textState: DNTextState): Boolean; overload;
    procedure CreateMovie(rect: DDN.System.Drawing.DNRectangle; filePath: string; page: Int32);
    procedure CreateSound(rect: DDN.System.Drawing.DNRectangle; filePath: string; name: string; page: Int32; rate: string);
    procedure DeleteStamp(pageNumber: Int32; index: TArray<Int32>);
    procedure DeleteStampByIds(stampIds: TArray<Int32>); overload;
    procedure DeleteStampByIds(pageNumber: Int32; stampIds: TArray<Int32>); overload;
    procedure DeleteStampById(pageNumber: Int32; stampId: Int32); overload;
    procedure HideStampById(pageNumber: Int32; stampId: Int32);
    procedure ShowStampById(pageNumber: Int32; stampId: Int32);
    procedure MoveStampById(pageNumber: Int32; stampId: Int32; x: Double; y: Double);
    procedure MoveStamp(pageNumber: Int32; stampIndex: Int32; x: Double; y: Double);
    procedure DeleteStampById(stampId: Int32); overload;
    procedure CreateLocalLink(rect: DDN.System.Drawing.DNRectangle; desPage: Int32; originalPage: Int32); overload;
    function ReplaceText(srcString: string; destString: string; fontSize: Int32): Boolean; overload;
    function GetStamps(pageNumber: Int32): TArray<DNStampInfo>;
    procedure Close;
    procedure Save(destFile: string); overload;
    procedure Save(destStream: DDN.mscorlib.DNStream); overload;
    procedure BindPdf(srcDoc: DNDocument); overload;
    procedure Dispose;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property TextSearchOptions: DNTextSearchOptions read get_TextSearchOptions write set_TextSearchOptions;
    property TextEditOptions: DNTextEditOptions read get_TextEditOptions write set_TextEditOptions;
    property TextReplaceOptions: DNTextReplaceOptions read get_TextReplaceOptions write set_TextReplaceOptions;
    property ReplaceTextStrategy: DNReplaceTextStrategy read get_ReplaceTextStrategy write set_ReplaceTextStrategy;
    property Document: DNDocument read get_Document;
  end;

  TDNPdfContentEditor = class(TDNGenericImport<DNPdfContentEditorClass, DNPdfContentEditor>)
  public const
   DocumentOpen = 'DO';
   DocumentClose = 'WC';
   DocumentWillSave = 'WS';
   DocumentSaved = 'DS';
   DocumentWillPrint = 'WP';
   DocumentPrinted = 'DP';
  end;

  //-------------namespace: Aspose.Pdf.Facades----------------
  DNPdfFileInfoClass = interface(DNSaveableFacadeClass)
  ['{36C53ABB-0CC6-5651-A7ED-01C0703AA8A5}']
  { constructors } 

    {class} function init: DNPdfFileInfo; overload;
    {class} function init(inputStream: DDN.mscorlib.DNStream): DNPdfFileInfo; overload;
    {class} function init(inputStream: DDN.mscorlib.DNStream; password: string): DNPdfFileInfo; overload;
    {class} function init(inputFile: string): DNPdfFileInfo; overload;
    {class} function init(inputFile: string; password: string): DNPdfFileInfo; overload;
    {class} function init(document: DNDocument): DNPdfFileInfo; overload;

  end;

  [DNTypeName('Aspose.Pdf.Facades.PdfFileInfo')]
  DNPdfFileInfo = interface(DNSaveableFacade)
  ['{A14BAF72-404E-3C07-8FCD-A6D9EC6066A3}']
  { getters & setters } 

    function get_Author: string;
    procedure set_Author(value: string);
    function get_IsEncrypted: Boolean;
    function get_IsPdfFile: Boolean;
    function get_CreationDate: string;
    procedure set_CreationDate(value: string);
    function get_Creator: string;
    procedure set_Creator(value: string);
    function get_HasCollection: Boolean;
    function get_Header: DDN.mscorlib.DNDictionary<string, string>;
    procedure set_Header(value: DDN.mscorlib.DNDictionary<string, string>);
    function get_InputFile: string;
    procedure set_InputFile(value: string);
    function get_InputStream: DDN.mscorlib.DNStream;
    procedure set_InputStream(value: DDN.mscorlib.DNStream);
    function get_Keywords: string;
    procedure set_Keywords(value: string);
    function get_ModDate: string;
    procedure set_ModDate(value: string);
    function get_NumberOfPages: Int32;
    function get_Producer: string;
    function get_Subject: string;
    procedure set_Subject(value: string);
    function get_Title: string;
    procedure set_Title(value: string);
    function get_PasswordType: DNPasswordType;
    function get_HasOpenPassword: Boolean;
    function get_HasEditPassword: Boolean;
    function get_Document: DNDocument;

  { methods } 

    procedure BindPdf(srcDoc: DNDocument); overload;
    procedure ClearInfo;
    function GetDocumentPrivilege: DNDocumentPrivilege;
    function GetMetaInfo(name: string): string;
    function GetPageHeight(pageNum: Int32): Single;
    function GetPageRotation(pageNum: Int32): Int32;
    function GetPageWidth(pageNum: Int32): Single;
    function GetPageXOffset(pageNum: Int32): Single;
    function GetPageYOffset(pageNum: Int32): Single;
    function GetPdfVersion: string;
    function SaveNewInfo(outputStream: DDN.mscorlib.DNStream): Boolean; overload;
    function SaveNewInfo(outputFile: string): Boolean; overload;
    procedure Save(destStream: DDN.mscorlib.DNStream); overload;
    procedure Save(destFile: string); overload;
    procedure SetMetaInfo(name: string; value: string);
    function SaveNewInfoWithXmp(outputFileName: string): Boolean;
    procedure Close;
    procedure BindPdf(srcFile: string); overload;
    procedure BindPdf(srcStream: DDN.mscorlib.DNStream); overload;
    procedure Dispose;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Author: string read get_Author write set_Author;
    property IsEncrypted: Boolean read get_IsEncrypted;
    property IsPdfFile: Boolean read get_IsPdfFile;
    property CreationDate: string read get_CreationDate write set_CreationDate;
    property Creator: string read get_Creator write set_Creator;
    property HasCollection: Boolean read get_HasCollection;
    property Header: DDN.mscorlib.DNDictionary<string, string> read get_Header write set_Header;
    property InputFile: string read get_InputFile write set_InputFile;
    property InputStream: DDN.mscorlib.DNStream read get_InputStream write set_InputStream;
    property Keywords: string read get_Keywords write set_Keywords;
    property ModDate: string read get_ModDate write set_ModDate;
    property NumberOfPages: Int32 read get_NumberOfPages;
    property Producer: string read get_Producer;
    property Subject: string read get_Subject write set_Subject;
    property Title: string read get_Title write set_Title;
    property PasswordType: DNPasswordType read get_PasswordType;
    property HasOpenPassword: Boolean read get_HasOpenPassword;
    property HasEditPassword: Boolean read get_HasEditPassword;
    property Document: DNDocument read get_Document;
  end;

  TDNPdfFileInfo = class(TDNGenericImport<DNPdfFileInfoClass, DNPdfFileInfo>) end;

  //-------------namespace: Aspose.Pdf.Facades----------------
  DNPdfFileMendClass = interface(DNSaveableFacadeClass)
  ['{8F15AF88-A2C3-5794-8023-6D80E2C7A01B}']
  { static getter & setter } 

    procedure set_IsWordWrap(value: Boolean);

  { constructors } 

    {class} function init: DNPdfFileMend; overload;
    {class} function init(inputFileName: string; outputFileName: string): DNPdfFileMend; overload;
    {class} function init(inputStream: DDN.mscorlib.DNStream; outputStream: DDN.mscorlib.DNStream): DNPdfFileMend; overload;
    {class} function init(document: DNDocument): DNPdfFileMend; overload;
    {class} function init(document: DNDocument; outputFileName: string): DNPdfFileMend; overload;
    {class} function init(document: DNDocument; destStream: DDN.mscorlib.DNStream): DNPdfFileMend; overload;

  { static propertys } 

    {class} property IsWordWrap: Boolean write set_IsWordWrap;
  end;

  [DNTypeName('Aspose.Pdf.Facades.PdfFileMend')]
  DNPdfFileMend = interface(DNSaveableFacade)
  ['{6F560993-73BC-3A8A-B77F-5355D020282A}']
  { getters & setters } 

    function get_InputStream: DDN.mscorlib.DNStream;
    procedure set_InputStream(value: DDN.mscorlib.DNStream);
    function get_OutputStream: DDN.mscorlib.DNStream;
    procedure set_OutputStream(value: DDN.mscorlib.DNStream);
    function get_InputFile: string;
    procedure set_InputFile(value: string);
    function get_OutputFile: string;
    procedure set_OutputFile(value: string);
    procedure set_IsWordWrap(value: Boolean);
    function get_WrapMode: DNWordWrapMode;
    procedure set_WrapMode(value: DNWordWrapMode);
    function get_TextPositioningMode: DNPositioningMode;
    procedure set_TextPositioningMode(value: DNPositioningMode);
    function get_Document: DNDocument;

  { methods } 

    function AddImage(imageStream: DDN.mscorlib.DNStream; pageNum: Int32; lowerLeftX: Single; lowerLeftY: Single; upperRightX: Single; upperRightY: Single): Boolean; overload;
    function AddImage(imageStream: DDN.mscorlib.DNStream; pageNum: Int32; lowerLeftX: Single; lowerLeftY: Single; upperRightX: Single; upperRightY: Single; compositingParameters: DNCompositingParameters): Boolean; overload;
    function AddImage(imageStream: DDN.mscorlib.DNStream; pageNums: TArray<Int32>; lowerLeftX: Single; lowerLeftY: Single; upperRightX: Single; upperRightY: Single): Boolean; overload;
    function AddImage(imageStream: DDN.mscorlib.DNStream; pageNums: TArray<Int32>; lowerLeftX: Single; lowerLeftY: Single; upperRightX: Single; upperRightY: Single; compositingParameters: DNCompositingParameters): Boolean; overload;
    function AddImage(imageName: string; pageNum: Int32; lowerLeftX: Single; lowerLeftY: Single; upperRightX: Single; upperRightY: Single): Boolean; overload;
    function AddImage(imageName: string; pageNum: Int32; lowerLeftX: Single; lowerLeftY: Single; upperRightX: Single; upperRightY: Single; compositingParameters: DNCompositingParameters): Boolean; overload;
    function AddImage(imageName: string; pageNums: TArray<Int32>; lowerLeftX: Single; lowerLeftY: Single; upperRightX: Single; upperRightY: Single): Boolean; overload;
    function AddImage(imageName: string; pageNums: TArray<Int32>; lowerLeftX: Single; lowerLeftY: Single; upperRightX: Single; upperRightY: Single; compositingParameters: DNCompositingParameters): Boolean; overload;
    function AddText(text: DNFormattedText; pageNum: Int32; lowerLeftX: Single; lowerLeftY: Single): Boolean; overload;
    function AddText(text: DNFormattedText; pageNum: Int32; lowerLeftX: Single; lowerLeftY: Single; upperRightX: Single; upperRightY: Single): Boolean; overload;
    function AddText(text: DNFormattedText; pageNums: TArray<Int32>; lowerLeftX: Single; lowerLeftY: Single; upperRightX: Single; upperRightY: Single): Boolean; overload;
    procedure Close;
    procedure Save(destFile: string); overload;
    procedure Save(destStream: DDN.mscorlib.DNStream); overload;
    procedure BindPdf(srcFile: string); overload;
    procedure BindPdf(srcStream: DDN.mscorlib.DNStream); overload;
    procedure BindPdf(srcDoc: DNDocument); overload;
    procedure Dispose;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property InputStream: DDN.mscorlib.DNStream read get_InputStream write set_InputStream;
    property OutputStream: DDN.mscorlib.DNStream read get_OutputStream write set_OutputStream;
    property InputFile: string read get_InputFile write set_InputFile;
    property OutputFile: string read get_OutputFile write set_OutputFile;
    property IsWordWrap: Boolean write set_IsWordWrap;
    property WrapMode: DNWordWrapMode read get_WrapMode write set_WrapMode;
    property TextPositioningMode: DNPositioningMode read get_TextPositioningMode write set_TextPositioningMode;
    property Document: DNDocument read get_Document;
  end;

  TDNPdfFileMend = class(TDNGenericImport<DNPdfFileMendClass, DNPdfFileMend>) end;

  //-------------namespace: Aspose.Pdf.Facades----------------
  DNPdfFileSecurityClass = interface(DNSaveableFacadeClass)
  ['{046C0955-74C1-5B91-BE4E-1F12ADE8DB7F}']
  { static getter & setter } 

    procedure set_InputFile(value: string);
    procedure set_InputStream(value: DDN.mscorlib.DNStream);
    procedure set_OutputFile(value: string);
    procedure set_OutputStream(value: DDN.mscorlib.DNStream);

  { constructors } 

    {class} function init(inputStream: DDN.mscorlib.DNStream; outputStream: DDN.mscorlib.DNStream): DNPdfFileSecurity; overload;
    {class} function init(inputFile: string; outputFile: string): DNPdfFileSecurity; overload;
    {class} function init: DNPdfFileSecurity; overload;
    {class} function init(document: DNDocument): DNPdfFileSecurity; overload;
    {class} function init(document: DNDocument; outputFile: string): DNPdfFileSecurity; overload;
    {class} function init(document: DNDocument; outputStream: DDN.mscorlib.DNStream): DNPdfFileSecurity; overload;

  { static propertys } 

    {class} property InputFile: string write set_InputFile;
    {class} property InputStream: DDN.mscorlib.DNStream write set_InputStream;
    {class} property OutputFile: string write set_OutputFile;
    {class} property OutputStream: DDN.mscorlib.DNStream write set_OutputStream;
  end;

  [DNTypeName('Aspose.Pdf.Facades.PdfFileSecurity')]
  DNPdfFileSecurity = interface(DNSaveableFacade)
  ['{F4FA9502-5DE7-30A2-99A7-FC419352617C}']
  { getters & setters } 

    procedure set_InputFile(value: string);
    procedure set_InputStream(value: DDN.mscorlib.DNStream);
    procedure set_OutputFile(value: string);
    procedure set_OutputStream(value: DDN.mscorlib.DNStream);
    function get_AllowExceptions: Boolean;
    procedure set_AllowExceptions(value: Boolean);
    function get_LastException: DDN.mscorlib.DNException;
    function get_Document: DNDocument;

  { methods } 

    function EncryptFile(userPassword: string; ownerPassword: string; privilege: DNDocumentPrivilege; keySize: DNKeySize): Boolean; overload;
    function EncryptFile(userPassword: string; ownerPassword: string; privilege: DNDocumentPrivilege; keySize: DNKeySize; cipher: DNAlgorithm): Boolean; overload;
    function DecryptFile(ownerPassword: string): Boolean;
    function SetPrivilege(privilege: DNDocumentPrivilege): Boolean; overload;
    function SetPrivilege(userPassword: string; ownerPassword: string; privilege: DNDocumentPrivilege): Boolean; overload;
    function ChangePassword(ownerPassword: string; newUserPassword: string; newOwnerPassword: string): Boolean; overload;
    function ChangePassword(ownerPassword: string; newUserPassword: string; newOwnerPassword: string; privilege: DNDocumentPrivilege; keySize: DNKeySize): Boolean; overload;
    function ChangePassword(ownerPassword: string; newUserPassword: string; newOwnerPassword: string; privilege: DNDocumentPrivilege; keySize: DNKeySize; cipher: DNAlgorithm): Boolean; overload;
    procedure BindPdf(srcFile: string); overload;
    procedure BindPdf(srcStream: DDN.mscorlib.DNStream); overload;
    procedure Close;
    procedure Save(destFile: string); overload;
    procedure Save(destStream: DDN.mscorlib.DNStream); overload;
    procedure BindPdf(srcDoc: DNDocument); overload;
    procedure Dispose;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property InputFile: string write set_InputFile;
    property InputStream: DDN.mscorlib.DNStream write set_InputStream;
    property OutputFile: string write set_OutputFile;
    property OutputStream: DDN.mscorlib.DNStream write set_OutputStream;
    property AllowExceptions: Boolean read get_AllowExceptions write set_AllowExceptions;
    property LastException: DDN.mscorlib.DNException read get_LastException;
    property Document: DNDocument read get_Document;
  end;

  TDNPdfFileSecurity = class(TDNGenericImport<DNPdfFileSecurityClass, DNPdfFileSecurity>) end;

  //-------------namespace: Aspose.Pdf.Facades----------------
  DNPdfFileSignatureClass = interface(DNSaveableFacadeClass)
  ['{C3DD9D20-32B9-508E-B08D-60DA19A0C285}']
  { constructors } 

    {class} function init: DNPdfFileSignature; overload;
    {class} function init(inputFile: string): DNPdfFileSignature; overload;
    {class} function init(inputFile: string; outputFile: string): DNPdfFileSignature; overload;
    {class} function init(document: DNDocument): DNPdfFileSignature; overload;
    {class} function init(document: DNDocument; outputFile: string): DNPdfFileSignature; overload;

  end;

  [DNTypeName('Aspose.Pdf.Facades.PdfFileSignature')]
  DNPdfFileSignature = interface(DNSaveableFacade)
  ['{7DFA82B6-799C-3252-A15D-488C525BBFD4}']
  { getters & setters } 

    function get_SignatureAppearance: string;
    procedure set_SignatureAppearance(value: string);
    function get_IsLtvEnabled: Boolean;
    function get_IsCertified: Boolean;
    function get_SignatureAppearanceStream: DDN.mscorlib.DNStream;
    procedure set_SignatureAppearanceStream(value: DDN.mscorlib.DNStream);
    function get_Document: DNDocument;

  { methods } 

    procedure BindPdf(inputFile: string); overload;
    procedure BindPdf(inputStream: DDN.mscorlib.DNStream); overload;
    procedure Save(outputFile: string); overload;
    procedure Save(outputStream: DDN.mscorlib.DNStream); overload;
    procedure Sign(page: Int32; SigReason: string; SigContact: string; SigLocation: string; visible: Boolean; annotRect: DDN.System.Drawing.DNRectangle); overload;
    procedure Sign(page: Int32; SigReason: string; SigContact: string; SigLocation: string; visible: Boolean; annotRect: DDN.System.Drawing.DNRectangle; sig: DNSignature); overload;
    procedure Sign(page: Int32; visible: Boolean; annotRect: DDN.System.Drawing.DNRectangle; sig: DNSignature); overload;
    procedure Sign(SigName: string; SigReason: string; SigContact: string; SigLocation: string; sig: DNSignature); overload;
    procedure Sign(page: Int32; SigName: string; SigReason: string; SigContact: string; SigLocation: string; visible: Boolean; annotRect: DDN.System.Drawing.DNRectangle; sig: DNSignature); overload;
    procedure Sign(SigName: string; sig: DNSignature); overload;
    function GetAccessPermissions: DNDocMDPAccessPermissions;
    procedure Certify(page: Int32; SigReason: string; SigContact: string; SigLocation: string; visible: Boolean; annotRect: DDN.System.Drawing.DNRectangle; docMdpSignature: DNDocMDPSignature);
    function GetSignNames: DDN.mscorlib.DNIList<string>;
    function GetBlankSignNames: DDN.mscorlib.DNIList<string>;
    function IsContainSignature: Boolean;
    function ContainsSignature: Boolean;
    function ContainsUsageRights: Boolean;
    function IsCoversWholeDocument(signName: string): Boolean;
    function CoversWholeDocument(signName: string): Boolean;
    function GetRevision(signName: string): Int32;
    function GetTotalRevision: Int32;
    procedure RemoveUsageRights;
    procedure RemoveSignature(signName: string); overload;
    procedure RemoveSignature(signName: string; removeField: Boolean); overload;
    function VerifySigned(signName: string): Boolean;
    function GetSignerName(signName: string): string;
    function GetDateTime(signName: string): DDN.mscorlib.DNDateTime;
    function GetReason(signName: string): string;
    function GetLocation(signName: string): string;
    function GetContactInfo(signName: string): string;
    function VerifySignature(signName: string): Boolean;
    function ExtractImage(signName: string): DDN.mscorlib.DNStream;
    function ExtractCertificate(signName: string): DDN.mscorlib.DNStream;
    procedure Save; overload;
    procedure SetCertificate(pfx: string; pass: string);
    procedure Close;
    procedure BindPdf(srcDoc: DNDocument); overload;
    procedure Dispose;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property SignatureAppearance: string read get_SignatureAppearance write set_SignatureAppearance;
    property IsLtvEnabled: Boolean read get_IsLtvEnabled;
    property IsCertified: Boolean read get_IsCertified;
    property SignatureAppearanceStream: DDN.mscorlib.DNStream read get_SignatureAppearanceStream write set_SignatureAppearanceStream;
    property Document: DNDocument read get_Document;
  end;

  TDNPdfFileSignature = class(TDNGenericImport<DNPdfFileSignatureClass, DNPdfFileSignature>) end;

  //-------------namespace: Aspose.Pdf.Facades----------------
  DNPdfFileStampClass = interface(DNSaveableFacadeClass)
  ['{830C517E-1299-5F16-83CA-45D578945188}']
  { static getter & setter } 

    procedure set_ConvertTo(value: DNPdfFormat);

  { constructors } 

    {class} function init(inputFile: string; outputFile: string): DNPdfFileStamp; overload;
    {class} function init(inputStream: DDN.mscorlib.DNStream; outputStream: DDN.mscorlib.DNStream): DNPdfFileStamp; overload;
    {class} function init(inputFile: string; outputFile: string; keepSecurity: Boolean): DNPdfFileStamp; overload;
    {class} function init(inputStream: DDN.mscorlib.DNStream; outputStream: DDN.mscorlib.DNStream; keepSecurity: Boolean): DNPdfFileStamp; overload;
    {class} function init: DNPdfFileStamp; overload;
    {class} function init(document: DNDocument): DNPdfFileStamp; overload;
    {class} function init(document: DNDocument; outputFile: string): DNPdfFileStamp; overload;
    {class} function init(document: DNDocument; outputStream: DDN.mscorlib.DNStream): DNPdfFileStamp; overload;
    {class} function init(inputStream: DDN.mscorlib.DNStream; response: DDN.System.Web.DNHttpResponse): DNPdfFileStamp; overload;
    {class} function init(inputFile: string; response: DDN.System.Web.DNHttpResponse): DNPdfFileStamp; overload;

  { static fields getter & setter } 

   function __fakeFieldGet_PosBottomMiddle: Int32;
   function __fakeFieldGet_PosBottomRight: Int32;
   function __fakeFieldGet_PosUpperRight: Int32;
   function __fakeFieldGet_PosSidesRight: Int32;
   function __fakeFieldGet_PosUpperMiddle: Int32;
   function __fakeFieldGet_PosBottomLeft: Int32;
   function __fakeFieldGet_PosSidesLeft: Int32;
   function __fakeFieldGet_PosUpperLeft: Int32;

  { static fields } 

    {class} property PosBottomMiddle: Int32 read __fakeFieldGet_PosBottomMiddle;
    {class} property PosBottomRight: Int32 read __fakeFieldGet_PosBottomRight;
    {class} property PosUpperRight: Int32 read __fakeFieldGet_PosUpperRight;
    {class} property PosSidesRight: Int32 read __fakeFieldGet_PosSidesRight;
    {class} property PosUpperMiddle: Int32 read __fakeFieldGet_PosUpperMiddle;
    {class} property PosBottomLeft: Int32 read __fakeFieldGet_PosBottomLeft;
    {class} property PosSidesLeft: Int32 read __fakeFieldGet_PosSidesLeft;
    {class} property PosUpperLeft: Int32 read __fakeFieldGet_PosUpperLeft;

  { static propertys } 

    {class} property ConvertTo: DNPdfFormat write set_ConvertTo;
  end;

  [DNTypeName('Aspose.Pdf.Facades.PdfFileStamp')]
  DNPdfFileStamp = interface(DNSaveableFacade)
  ['{B4B5053A-CF08-3FD3-AE1F-93221A040863}']
  { getters & setters } 

    function get_OptimizeSize: Boolean;
    procedure set_OptimizeSize(value: Boolean);
    function get_KeepSecurity: Boolean;
    procedure set_KeepSecurity(value: Boolean);
    function get_InputFile: string;
    procedure set_InputFile(value: string);
    function get_InputStream: DDN.mscorlib.DNStream;
    procedure set_InputStream(value: DDN.mscorlib.DNStream);
    function get_OutputFile: string;
    procedure set_OutputFile(value: string);
    function get_OutputStream: DDN.mscorlib.DNStream;
    procedure set_OutputStream(value: DDN.mscorlib.DNStream);
    function get_PageNumberRotation: Single;
    procedure set_PageNumberRotation(value: Single);
    procedure set_ConvertTo(value: DNPdfFormat);
    function get_PageHeight: Single;
    function get_PageWidth: Single;
    function get_StartingNumber: Int32;
    procedure set_StartingNumber(value: Int32);
    function get_NumberingStyle: DNNumberingStyle;
    procedure set_NumberingStyle(value: DNNumberingStyle);
    function get_StampId: Int32;
    procedure set_StampId(value: Int32);
    function get_ContentDisposition: DNContentDisposition;
    procedure set_ContentDisposition(value: DNContentDisposition);
    function get_Response: DDN.System.Web.DNHttpResponse;
    procedure set_Response(value: DDN.System.Web.DNHttpResponse);
    function get_SaveOptions: DNSaveOptions;
    procedure set_SaveOptions(value: DNSaveOptions);
    function get_AttachmentName: string;
    procedure set_AttachmentName(value: string);
    function get_Document: DNDocument;

  { methods } 

    procedure Close;
    procedure Save(destFile: string); overload;
    procedure Save(destStream: DDN.mscorlib.DNStream); overload;
    procedure AddStamp(stamp: DNFacades_Stamp);
    procedure AddPageNumber(formatString: string); overload;
    procedure AddPageNumber(formattedText: DNFormattedText); overload;
    procedure AddPageNumber(formatString: string; position: Int32; leftMargin: Single; rightMargin: Single; topMargin: Single; bottomMargin: Single); overload;
    procedure AddPageNumber(formatString: string; x: Single; y: Single); overload;
    procedure AddPageNumber(formattedText: DNFormattedText; position: Int32; leftMargin: Single; rightMargin: Single; topMargin: Single; bottomMargin: Single); overload;
    procedure AddPageNumber(formattedText: DNFormattedText; x: Single; y: Single); overload;
    procedure AddHeader(formattedText: DNFormattedText; topMargin: Single); overload;
    procedure AddHeader(formattedText: DNFormattedText; topMargin: Single; leftMargin: Single; rightMargin: Single); overload;
    procedure AddHeader(imageFile: string; topMargin: Single); overload;
    procedure AddHeader(imageFile: string; topMargin: Single; leftMargin: Single; rightMargin: Single); overload;
    procedure AddHeader(imageStream: DDN.mscorlib.DNStream; topMargin: Single); overload;
    procedure AddHeader(inputStream: DDN.mscorlib.DNStream; topMargin: Single; leftMargin: Single; rightMargin: Single); overload;
    procedure AddFooter(formattedText: DNFormattedText; bottomMargin: Single); overload;
    procedure AddFooter(formattedText: DNFormattedText; bottomMargin: Single; leftMargin: Single; rightMargin: Single); overload;
    procedure AddFooter(imageFile: string; bottomMargin: Single); overload;
    procedure AddFooter(imageFile: string; bottomMargin: Single; leftMargin: Single; rightMargin: Single); overload;
    procedure AddFooter(imageStream: DDN.mscorlib.DNStream; bottomMargin: Single); overload;
    procedure AddFooter(imageStream: DDN.mscorlib.DNStream; bottomMargin: Single; leftMargin: Single; rightMargin: Single); overload;
    procedure AddPageNumber(formatString: string; position: Int32); overload;
    procedure AddPageNumber(formattedText: DNFormattedText; position: Int32); overload;
    procedure BindPdf(srcFile: string); overload;
    procedure BindPdf(srcStream: DDN.mscorlib.DNStream); overload;
    procedure BindPdf(srcDoc: DNDocument); overload;
    procedure Dispose;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property OptimizeSize: Boolean read get_OptimizeSize write set_OptimizeSize;
    property KeepSecurity: Boolean read get_KeepSecurity write set_KeepSecurity;
    property InputFile: string read get_InputFile write set_InputFile;
    property InputStream: DDN.mscorlib.DNStream read get_InputStream write set_InputStream;
    property OutputFile: string read get_OutputFile write set_OutputFile;
    property OutputStream: DDN.mscorlib.DNStream read get_OutputStream write set_OutputStream;
    property PageNumberRotation: Single read get_PageNumberRotation write set_PageNumberRotation;
    property ConvertTo: DNPdfFormat write set_ConvertTo;
    property PageHeight: Single read get_PageHeight;
    property PageWidth: Single read get_PageWidth;
    property StartingNumber: Int32 read get_StartingNumber write set_StartingNumber;
    property NumberingStyle: DNNumberingStyle read get_NumberingStyle write set_NumberingStyle;
    property StampId: Int32 read get_StampId write set_StampId;
    property ContentDisposition: DNContentDisposition read get_ContentDisposition write set_ContentDisposition;
    property Response: DDN.System.Web.DNHttpResponse read get_Response write set_Response;
    property SaveOptions: DNSaveOptions read get_SaveOptions write set_SaveOptions;
    property AttachmentName: string read get_AttachmentName write set_AttachmentName;
    property Document: DNDocument read get_Document;
  end;

  TDNPdfFileStamp = class(TDNGenericImport<DNPdfFileStampClass, DNPdfFileStamp>)
  public const
   PosBottomMiddle = 0;
   PosBottomRight = 1;
   PosUpperRight = 2;
   PosSidesRight = 3;
   PosUpperMiddle = 4;
   PosBottomLeft = 5;
   PosSidesLeft = 6;
   PosUpperLeft = 7;
  end;

  //-------------namespace: Aspose.Pdf.Facades----------------
  DNPdfPageEditorClass = interface(DNSaveableFacadeClass)
  ['{CF0A3774-31A0-525C-8638-ABB3DA0750E1}']
  { constructors } 

    {class} function init: DNPdfPageEditor; overload;
    {class} function init(document: DNDocument): DNPdfPageEditor; overload;

  { static fields getter & setter } 

   function __fakeFieldGet_SPLITVOUT: Int32;
   function __fakeFieldGet_SPLITHOUT: Int32;
   function __fakeFieldGet_SPLITVIN: Int32;
   function __fakeFieldGet_SPLITHIN: Int32;
   function __fakeFieldGet_BLINDV: Int32;
   function __fakeFieldGet_BLINDH: Int32;
   function __fakeFieldGet_INBOX: Int32;
   function __fakeFieldGet_OUTBOX: Int32;
   function __fakeFieldGet_LRWIPE: Int32;
   function __fakeFieldGet_RLWIPE: Int32;
   function __fakeFieldGet_BTWIPE: Int32;
   function __fakeFieldGet_TBWIPE: Int32;
   function __fakeFieldGet_DISSOLVE: Int32;
   function __fakeFieldGet_LRGLITTER: Int32;
   function __fakeFieldGet_TBGLITTER: Int32;
   function __fakeFieldGet_DGLITTER: Int32;

  { static fields } 

    {class} property SPLITVOUT: Int32 read __fakeFieldGet_SPLITVOUT;
    {class} property SPLITHOUT: Int32 read __fakeFieldGet_SPLITHOUT;
    {class} property SPLITVIN: Int32 read __fakeFieldGet_SPLITVIN;
    {class} property SPLITHIN: Int32 read __fakeFieldGet_SPLITHIN;
    {class} property BLINDV: Int32 read __fakeFieldGet_BLINDV;
    {class} property BLINDH: Int32 read __fakeFieldGet_BLINDH;
    {class} property INBOX: Int32 read __fakeFieldGet_INBOX;
    {class} property OUTBOX: Int32 read __fakeFieldGet_OUTBOX;
    {class} property LRWIPE: Int32 read __fakeFieldGet_LRWIPE;
    {class} property RLWIPE: Int32 read __fakeFieldGet_RLWIPE;
    {class} property BTWIPE: Int32 read __fakeFieldGet_BTWIPE;
    {class} property TBWIPE: Int32 read __fakeFieldGet_TBWIPE;
    {class} property DISSOLVE: Int32 read __fakeFieldGet_DISSOLVE;
    {class} property LRGLITTER: Int32 read __fakeFieldGet_LRGLITTER;
    {class} property TBGLITTER: Int32 read __fakeFieldGet_TBGLITTER;
    {class} property DGLITTER: Int32 read __fakeFieldGet_DGLITTER;

  end;

  [DNTypeName('Aspose.Pdf.Facades.PdfPageEditor')]
  DNPdfPageEditor = interface(DNSaveableFacade)
  ['{DC7C9C0F-F067-3C17-A062-310A5336A491}']
  { getters & setters } 

    function get_TransitionDuration: Int32;
    procedure set_TransitionDuration(value: Int32);
    function get_TransitionType: Int32;
    procedure set_TransitionType(value: Int32);
    function get_DisplayDuration: Int32;
    procedure set_DisplayDuration(value: Int32);
    function get_ProcessPages: TArray<Int32>;
    procedure set_ProcessPages(value: TArray<Int32>);
    function get_Rotation: Int32;
    procedure set_Rotation(value: Int32);
    function get_PageRotations: DDN.mscorlib.DNDictionary<Int32, Int32>;
    procedure set_PageRotations(value: DDN.mscorlib.DNDictionary<Int32, Int32>);
    function get_Zoom: Single;
    procedure set_Zoom(value: Single);
    function get_PageSize: DNPageSize;
    procedure set_PageSize(value: DNPageSize);
    function get_Alignment: DNAlignmentType;
    procedure set_Alignment(value: DNAlignmentType);
    function get_HorizontalAlignment: DNHorizontalAlignment;
    procedure set_HorizontalAlignment(value: DNHorizontalAlignment);
    function get_VerticalAlignment: DNVerticalAlignmentType;
    procedure set_VerticalAlignment(value: DNVerticalAlignmentType);
    function get_VerticalAlignmentType: DNVerticalAlignment;
    procedure set_VerticalAlignmentType(value: DNVerticalAlignment);
    function get_Document: DNDocument;

  { methods } 

    procedure MovePosition(moveX: Single; moveY: Single);
    function GetPages: Int32;
    function GetPageSize(page: Int32): DNPageSize;
    function GetPageRotation(page: Int32): Int32;
    function GetPageBoxSize(page: Int32; pageBoxName: string): DDN.System.Drawing.DNRectangle;
    procedure Save(outputFile: string); overload;
    procedure Save(outputStream: DDN.mscorlib.DNStream); overload;
    procedure ApplyChanges;
    procedure BindPdf(srcFile: string); overload;
    procedure BindPdf(srcStream: DDN.mscorlib.DNStream); overload;
    procedure BindPdf(srcDoc: DNDocument); overload;
    procedure Close;
    procedure Dispose;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property TransitionDuration: Int32 read get_TransitionDuration write set_TransitionDuration;
    property TransitionType: Int32 read get_TransitionType write set_TransitionType;
    property DisplayDuration: Int32 read get_DisplayDuration write set_DisplayDuration;
    property ProcessPages: TArray<Int32> read get_ProcessPages write set_ProcessPages;
    property Rotation: Int32 read get_Rotation write set_Rotation;
    property PageRotations: DDN.mscorlib.DNDictionary<Int32, Int32> read get_PageRotations write set_PageRotations;
    property Zoom: Single read get_Zoom write set_Zoom;
    property PageSize: DNPageSize read get_PageSize write set_PageSize;
    property Alignment: DNAlignmentType read get_Alignment write set_Alignment;
    property HorizontalAlignment: DNHorizontalAlignment read get_HorizontalAlignment write set_HorizontalAlignment;
    property VerticalAlignment: DNVerticalAlignmentType read get_VerticalAlignment write set_VerticalAlignment;
    property VerticalAlignmentType: DNVerticalAlignment read get_VerticalAlignmentType write set_VerticalAlignmentType;
    property Document: DNDocument read get_Document;
  end;

  TDNPdfPageEditor = class(TDNGenericImport<DNPdfPageEditorClass, DNPdfPageEditor>)
  public const
   SPLITVOUT = 1;
   SPLITHOUT = 2;
   SPLITVIN = 3;
   SPLITHIN = 4;
   BLINDV = 5;
   BLINDH = 6;
   INBOX = 7;
   OUTBOX = 8;
   LRWIPE = 9;
   RLWIPE = 10;
   BTWIPE = 11;
   TBWIPE = 12;
   DISSOLVE = 13;
   LRGLITTER = 14;
   TBGLITTER = 15;
   DGLITTER = 16;
  end;

  //-------------namespace: Aspose.Pdf.Facades----------------
  DNPdfXmpMetadataClass = interface(DNSaveableFacadeClass)
  ['{A5E3A368-8E8A-5B1B-9794-0336395F6131}']
  { constructors } 

    {class} function init: DNPdfXmpMetadata; overload;
    {class} function init(document: DNDocument): DNPdfXmpMetadata; overload;

  end;

  [DNTypeName('Aspose.Pdf.Facades.PdfXmpMetadata')]
  DNPdfXmpMetadata = interface(DNSaveableFacade)
  ['{A36887BB-9BD8-30AE-A0FF-C78EC9F98B27}']
  { getters & setters } 

    function get_Keys: DDN.mscorlib.DNICollection<string>;
    function get_ExtensionFields: DDN.mscorlib.DNIDictionary<string, DNXmpPdfAExtensionSchema>;
    function get_Values: DDN.mscorlib.DNICollection<DNXmpValue>;
    function get_IsFixedSize: Boolean;
    function get_IsReadOnly: Boolean;
    function get_Count: Int32;
    function get_IsSynchronized: Boolean;
    function get_SyncRoot: DDN.mscorlib.DNObject;
    function get_Item(key: DNDefaultMetadataProperties): DNXmpValue;
    procedure set_Item(key: DNDefaultMetadataProperties; value: DNXmpValue);
    function get_Document: DNDocument;

  { methods } 

    procedure RegisterNamespaceURI(prefix: string; namespaceURI: string);
    function GetNamespaceURIByPrefix(prefix: string): string;
    function GetPrefixByNamespaceURI(namespaceURI: string): string;
    procedure Add(key: DNDefaultMetadataProperties; value: DNXmpValue); overload;
    procedure Add(xmpPdfAExtensionObject: DNXmpPdfAExtensionObject; namespacePrefix: string; namespaceUri: string; schemaDescription: string); overload;
    procedure Remove(key: DNDefaultMetadataProperties);
    procedure Add(key: string; value: DDN.mscorlib.DNObject); overload;
    function &Contains(key: string): Boolean; overload;
    function &Contains(&property: DNDefaultMetadataProperties): Boolean; overload;
    function GetEnumerator: DDN.mscorlib.DNIEnumerator<DDN.mscorlib.DNKeyValuePair<string, DNXmpValue>>;
    procedure CopyTo(&array: TArray<DDN.mscorlib.DNKeyValuePair<string, DNXmpValue>>; index: Int32);
    function GetXmpMetadata: TArray<Byte>; overload;
    function GetXmpMetadata(name: string): TArray<Byte>; overload;
    function ContainsKey(key: string): Boolean;
    function TryGetValue(key: string; out value: DNXmpValue): Boolean;
    function &Contains(item: DDN.mscorlib.DNKeyValuePair<string, DNXmpValue>): Boolean; overload;
    procedure Save(destFile: string); overload;
    procedure Save(destStream: DDN.mscorlib.DNStream); overload;
    procedure BindPdf(srcFile: string); overload;
    procedure BindPdf(srcStream: DDN.mscorlib.DNStream); overload;
    procedure BindPdf(srcDoc: DNDocument); overload;
    procedure Close;
    procedure Dispose;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Keys: DDN.mscorlib.DNICollection<string> read get_Keys;
    property ExtensionFields: DDN.mscorlib.DNIDictionary<string, DNXmpPdfAExtensionSchema> read get_ExtensionFields;
    property Values: DDN.mscorlib.DNICollection<DNXmpValue> read get_Values;
    property IsFixedSize: Boolean read get_IsFixedSize;
    property IsReadOnly: Boolean read get_IsReadOnly;
    property Count: Int32 read get_Count;
    property IsSynchronized: Boolean read get_IsSynchronized;
    property SyncRoot: DDN.mscorlib.DNObject read get_SyncRoot;
    property Item[key: DNDefaultMetadataProperties]: DNXmpValue read get_Item write set_Item; default;
    property Document: DNDocument read get_Document;
  end;

  TDNPdfXmpMetadata = class(TDNGenericImport<DNPdfXmpMetadataClass, DNPdfXmpMetadata>) end;

  //-------------namespace: Aspose.Pdf.Facades----------------
  DNFontColorClass = interface(DDN.mscorlib.DNObjectClass)
  ['{FDBFE84B-4934-590E-A6C8-2276CFF5A680}']
  { constructors } 

    {class} function init(r: Int32; g: Int32; b: Int32): DNFontColor; overload;
    {class} function init: DNFontColor; overload;

  end;

  [DNTypeName('Aspose.Pdf.Facades.FontColor')]
  DNFontColor = interface(DDN.mscorlib.DNObject)
  ['{1DEF4FDB-F667-3205-A17B-9223DD34555A}']
  { getters & setters } 

    function get_Green: Int32;
    procedure set_Green(value: Int32);
    function get_Red: Int32;
    procedure set_Red(value: Int32);
    function get_Blue: Int32;
    procedure set_Blue(value: Int32);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Green: Int32 read get_Green write set_Green;
    property Red: Int32 read get_Red write set_Red;
    property Blue: Int32 read get_Blue write set_Blue;
  end;

  TDNFontColor = class(TDNGenericImport<DNFontColorClass, DNFontColor>) end;

  //-------------namespace: Aspose.Pdf.Facades----------------
  DNForm_FormImportResultClass = interface(DDN.mscorlib.DNObjectClass)
  ['{4D7DF577-4F2C-5DB6-B80E-D0E6FA8E7DEA}']
  end;

  [DNTypeName('Aspose.Pdf.Facades.Form+FormImportResult')]
  DNForm_FormImportResult = interface(DDN.mscorlib.DNObject)
  ['{4320D2E7-E8EA-3061-A7C3-91FAF3B997EC}']
  { getters & setters } 

    function get_Status: DNForm_ImportStatus;
    function get_FieldName: string;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Status: DNForm_ImportStatus read get_Status;
    property FieldName: string read get_FieldName;
  end;

  TDNForm_FormImportResult = class(TDNGenericImport<DNForm_FormImportResultClass, DNForm_FormImportResult>) end;

  //-------------namespace: Aspose.Pdf.Facades----------------
  DNFormattedTextClass = interface(DDN.mscorlib.DNObjectClass)
  ['{2E2D6EFD-0E1D-5C3E-BD7E-955E832BA9F4}']
  { constructors } 

    {class} function init: DNFormattedText; overload;
    {class} function init(text: string): DNFormattedText; overload;
    {class} function init(text: string; fontColor: DNFontColor; fontStyle: DNFontStyle; encodingType: DNEncodingType; embedded: Boolean; textSize: Single): DNFormattedText; overload;
    {class} function init(text: string; fontColor: DNFontColor; textFont: DNFontStyle; textEncoding: DNEncodingType; embedded: Boolean; textSize: Single; lineSpacing: Single): DNFormattedText; overload;
    {class} function init(text: string; color: DDN.System.Drawing.DNColor; textFont: DNFontStyle; textEncoding: DNEncodingType; embedded: Boolean; textSize: Single): DNFormattedText; overload;
    {class} function init(text: string; textColor: DDN.System.Drawing.DNColor; textFont: DNFontStyle; textEncoding: DNEncodingType; embedded: Boolean; textSize: Single; lineSpacing: Single): DNFormattedText; overload;
    {class} function init(text: string; textColor: DNFontColor; backColor: DNFontColor; textFont: DNFontStyle; textEncoding: DNEncodingType; embedded: Boolean; textSize: Single): DNFormattedText; overload;
    {class} function init(text: string; textColor: DNFontColor; backColor: DNFontColor; textFont: DNFontStyle; textEncoding: DNEncodingType; embedded: Boolean; textSize: Single; lineSpacing: Single): DNFormattedText; overload;
    {class} function init(text: string; textColor: DDN.System.Drawing.DNColor; backColor: DDN.System.Drawing.DNColor; textFont: DNFontStyle; encoding: DNEncodingType; embedded: Boolean; textSize: Single): DNFormattedText; overload;
    {class} function init(text: string; textColor: DDN.System.Drawing.DNColor; backColor: DDN.System.Drawing.DNColor; textFont: DNFontStyle; textEncoding: DNEncodingType; embedded: Boolean; textSize: Single; lineSpacing: Single): DNFormattedText; overload;
    {class} function init(text: string; textColor: DDN.System.Drawing.DNColor; backColor: DDN.System.Drawing.DNColor; fontName: string; textEncoding: DNEncodingType; embedded: Boolean; fontSize: Single): DNFormattedText; overload;
    {class} function init(text: string; textColor: DDN.System.Drawing.DNColor; backColor: DDN.System.Drawing.DNColor): DNFormattedText; overload;
    {class} function init(text: string; textColor: DDN.System.Drawing.DNColor; fontName: string; textEncoding: DNEncodingType; embedded: Boolean; fontSize: Single): DNFormattedText; overload;

  end;

  [DNTypeName('Aspose.Pdf.Facades.FormattedText')]
  DNFormattedText = interface(DDN.mscorlib.DNObject)
  ['{27AC49C4-A8D3-3F42-B92B-777333C911DA}']
  { getters & setters } 

    function get_TextHeight: Single;
    function get_TextWidth: Single;

  { methods } 

    procedure AddNewLineText(newLineText: string); overload;
    procedure AddNewLineText(newLineText: string; lineSpacing: Single); overload;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property TextHeight: Single read get_TextHeight;
    property TextWidth: Single read get_TextWidth;
  end;

  TDNFormattedText = class(TDNGenericImport<DNFormattedTextClass, DNFormattedText>) end;

  //-------------namespace: Aspose.Pdf.Facades----------------
  DNFormDataConverterClass = interface(DDN.mscorlib.DNObjectClass)
  ['{A49078EA-5CE4-569C-91B2-4BC38607923A}']
  { constructors } 

    {class} function init: DNFormDataConverter;

  { static methods } 

    {class} procedure ConvertXmlToFdf(sourceXml: DDN.mscorlib.DNStream; destFdf: DDN.mscorlib.DNStream);
    {class} procedure ConvertFdfToXml(sourceFdf: DDN.mscorlib.DNStream; destXml: DDN.mscorlib.DNStream);

  end;

  [DNTypeName('Aspose.Pdf.Facades.FormDataConverter')]
  DNFormDataConverter = interface(DDN.mscorlib.DNObject)
  ['{423DE73D-DA9B-3F69-A12A-DDD64C04C518}']
  { getters & setters } 

    function get_Table: DDN.System.Data.DNDataTable;
    procedure set_Table(value: DDN.System.Data.DNDataTable);
    function get_CreateMissingField: Boolean;
    procedure set_CreateMissingField(value: Boolean);
    function get_ReplaceExistingTable: Boolean;
    procedure set_ReplaceExistingTable(value: Boolean);
    function get_ClearTableBeforeExport: Boolean;
    procedure set_ClearTableBeforeExport(value: Boolean);
    function get_CreateMissingTable: Boolean;
    procedure set_CreateMissingTable(value: Boolean);

  { methods } 

    procedure ConvertToDataTable(sourceStreams: TArray<DDN.mscorlib.DNStream>; sourceType: DNDataType);
    procedure ImportIntoDataBase(connectString: string; dbType: DNDataType);
    procedure ExportFromDataBase(connectString: string; dbType: DNDataType);
    procedure ConvertToStreams(destStream: TArray<DDN.mscorlib.DNStream>; destType: DNDataType);
    procedure ConverToStreams(destStream: TArray<DDN.mscorlib.DNStream>; destType: DNDataType);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Table: DDN.System.Data.DNDataTable read get_Table write set_Table;
    property CreateMissingField: Boolean read get_CreateMissingField write set_CreateMissingField;
    property ReplaceExistingTable: Boolean read get_ReplaceExistingTable write set_ReplaceExistingTable;
    property ClearTableBeforeExport: Boolean read get_ClearTableBeforeExport write set_ClearTableBeforeExport;
    property CreateMissingTable: Boolean read get_CreateMissingTable write set_CreateMissingTable;
  end;

  TDNFormDataConverter = class(TDNGenericImport<DNFormDataConverterClass, DNFormDataConverter>) end;

  //-------------namespace: Aspose.Pdf.Facades----------------
  DNFormFieldFacadeClass = interface(DDN.mscorlib.DNObjectClass)
  ['{0952CB34-C684-5B4E-8A54-1AF3CD27F81B}']
  { constructors } 

    {class} function init: DNFormFieldFacade;

  { static fields getter & setter } 

   function __fakeFieldGet_BorderWidthUndified: Single;
   function __fakeFieldGet_BorderWidthUndefined: Single;
   function __fakeFieldGet_BorderWidthThin: Single;
   function __fakeFieldGet_BorderWidthMedium: Single;
   function __fakeFieldGet_BorderWidthThick: Single;
   function __fakeFieldGet_BorderStyleSolid: Int32;
   function __fakeFieldGet_BorderStyleDashed: Int32;
   function __fakeFieldGet_BorderStyleBeveled: Int32;
   function __fakeFieldGet_BorderStyleInset: Int32;
   function __fakeFieldGet_BorderStyleUnderline: Int32;
   function __fakeFieldGet_BorderStyleUndefined: Int32;
   function __fakeFieldGet_AlignLeft: Int32;
   function __fakeFieldGet_AlignCenter: Int32;
   function __fakeFieldGet_AlignRight: Int32;
   function __fakeFieldGet_AlignUndefined: Int32;
   function __fakeFieldGet_AlignJustified: Int32;
   function __fakeFieldGet_AlignTop: Int32;
   function __fakeFieldGet_AlignMiddle: Int32;
   function __fakeFieldGet_AlignBottom: Int32;
   function __fakeFieldGet_CheckBoxStyleCircle: Int32;
   function __fakeFieldGet_CheckBoxStyleCheck: Int32;
   function __fakeFieldGet_CheckBoxStyleCross: Int32;
   function __fakeFieldGet_CheckBoxStyleDiamond: Int32;
   function __fakeFieldGet_CheckBoxStyleStar: Int32;
   function __fakeFieldGet_CheckBoxStyleSquare: Int32;
   function __fakeFieldGet_CheckBoxStyleUndefined: Int32;

  { static fields } 

    {class} property BorderWidthUndified: Single read __fakeFieldGet_BorderWidthUndified;
    {class} property BorderWidthUndefined: Single read __fakeFieldGet_BorderWidthUndefined;
    {class} property BorderWidthThin: Single read __fakeFieldGet_BorderWidthThin;
    {class} property BorderWidthMedium: Single read __fakeFieldGet_BorderWidthMedium;
    {class} property BorderWidthThick: Single read __fakeFieldGet_BorderWidthThick;
    {class} property BorderStyleSolid: Int32 read __fakeFieldGet_BorderStyleSolid;
    {class} property BorderStyleDashed: Int32 read __fakeFieldGet_BorderStyleDashed;
    {class} property BorderStyleBeveled: Int32 read __fakeFieldGet_BorderStyleBeveled;
    {class} property BorderStyleInset: Int32 read __fakeFieldGet_BorderStyleInset;
    {class} property BorderStyleUnderline: Int32 read __fakeFieldGet_BorderStyleUnderline;
    {class} property BorderStyleUndefined: Int32 read __fakeFieldGet_BorderStyleUndefined;
    {class} property AlignLeft: Int32 read __fakeFieldGet_AlignLeft;
    {class} property AlignCenter: Int32 read __fakeFieldGet_AlignCenter;
    {class} property AlignRight: Int32 read __fakeFieldGet_AlignRight;
    {class} property AlignUndefined: Int32 read __fakeFieldGet_AlignUndefined;
    {class} property AlignJustified: Int32 read __fakeFieldGet_AlignJustified;
    {class} property AlignTop: Int32 read __fakeFieldGet_AlignTop;
    {class} property AlignMiddle: Int32 read __fakeFieldGet_AlignMiddle;
    {class} property AlignBottom: Int32 read __fakeFieldGet_AlignBottom;
    {class} property CheckBoxStyleCircle: Int32 read __fakeFieldGet_CheckBoxStyleCircle;
    {class} property CheckBoxStyleCheck: Int32 read __fakeFieldGet_CheckBoxStyleCheck;
    {class} property CheckBoxStyleCross: Int32 read __fakeFieldGet_CheckBoxStyleCross;
    {class} property CheckBoxStyleDiamond: Int32 read __fakeFieldGet_CheckBoxStyleDiamond;
    {class} property CheckBoxStyleStar: Int32 read __fakeFieldGet_CheckBoxStyleStar;
    {class} property CheckBoxStyleSquare: Int32 read __fakeFieldGet_CheckBoxStyleSquare;
    {class} property CheckBoxStyleUndefined: Int32 read __fakeFieldGet_CheckBoxStyleUndefined;

  end;

  [DNTypeName('Aspose.Pdf.Facades.FormFieldFacade')]
  DNFormFieldFacade = interface(DDN.mscorlib.DNObject)
  ['{F5A93D5F-DB4F-3335-A9B3-5F0D268FC1F5}']
  { getters & setters } 

    function get_BorderColor: DDN.System.Drawing.DNColor;
    procedure set_BorderColor(value: DDN.System.Drawing.DNColor);
    function get_BorderStyle: Int32;
    procedure set_BorderStyle(value: Int32);
    function get_BorderWidth: Single;
    procedure set_BorderWidth(value: Single);
    function get_Font: DNFontStyle;
    procedure set_Font(value: DNFontStyle);
    function get_CustomFont: string;
    procedure set_CustomFont(value: string);
    function get_FontSize: Single;
    procedure set_FontSize(value: Single);
    function get_TextColor: DDN.System.Drawing.DNColor;
    procedure set_TextColor(value: DDN.System.Drawing.DNColor);
    function get_TextEncoding: DNEncodingType;
    procedure set_TextEncoding(value: DNEncodingType);
    function get_Alignment: Int32;
    procedure set_Alignment(value: Int32);
    function get_Rotation: Int32;
    procedure set_Rotation(value: Int32);
    function get_Caption: string;
    procedure set_Caption(value: string);
    function get_ButtonStyle: Int32;
    procedure set_ButtonStyle(value: Int32);
    function get_Box: DDN.System.Drawing.DNRectangle;
    procedure set_Box(value: DDN.System.Drawing.DNRectangle);
    function get_Position: TArray<Single>;
    procedure set_Position(value: TArray<Single>);
    function get_PageNumber: Int32;
    procedure set_PageNumber(value: Int32);
    function get_Items: TArray<string>;
    procedure set_Items(value: TArray<string>);
    function get_ExportItems: TArray<TArray<string>>;
    procedure set_ExportItems(value: TArray<TArray<string>>);
    function get_BackgroundColor: DDN.System.Drawing.DNColor;
    procedure set_BackgroundColor(value: DDN.System.Drawing.DNColor);
    function get_BackgroudColor: DDN.System.Drawing.DNColor;
    procedure set_BackgroudColor(value: DDN.System.Drawing.DNColor);

  { methods } 

    procedure Reset;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property BorderColor: DDN.System.Drawing.DNColor read get_BorderColor write set_BorderColor;
    property BorderStyle: Int32 read get_BorderStyle write set_BorderStyle;
    property BorderWidth: Single read get_BorderWidth write set_BorderWidth;
    property Font: DNFontStyle read get_Font write set_Font;
    property CustomFont: string read get_CustomFont write set_CustomFont;
    property FontSize: Single read get_FontSize write set_FontSize;
    property TextColor: DDN.System.Drawing.DNColor read get_TextColor write set_TextColor;
    property TextEncoding: DNEncodingType read get_TextEncoding write set_TextEncoding;
    property Alignment: Int32 read get_Alignment write set_Alignment;
    property Rotation: Int32 read get_Rotation write set_Rotation;
    property Caption: string read get_Caption write set_Caption;
    property ButtonStyle: Int32 read get_ButtonStyle write set_ButtonStyle;
    property Box: DDN.System.Drawing.DNRectangle read get_Box write set_Box;
    property Position: TArray<Single> read get_Position write set_Position;
    property PageNumber: Int32 read get_PageNumber write set_PageNumber;
    property Items: TArray<string> read get_Items write set_Items;
    property ExportItems: TArray<TArray<string>> read get_ExportItems write set_ExportItems;
    property BackgroundColor: DDN.System.Drawing.DNColor read get_BackgroundColor write set_BackgroundColor;
    property BackgroudColor: DDN.System.Drawing.DNColor read get_BackgroudColor write set_BackgroudColor;
  end;

  TDNFormFieldFacade = class(TDNGenericImport<DNFormFieldFacadeClass, DNFormFieldFacade>)
  public const
   BorderWidthUndified = -1;
   BorderWidthUndefined = -1;
   BorderWidthThin = 1;
   BorderWidthMedium = 2;
   BorderWidthThick = 3;
   BorderStyleSolid = 0;
   BorderStyleDashed = 1;
   BorderStyleBeveled = 2;
   BorderStyleInset = 3;
   BorderStyleUnderline = 4;
   BorderStyleUndefined = 5;
   AlignLeft = 0;
   AlignCenter = 1;
   AlignRight = 2;
   AlignUndefined = 3;
   AlignJustified = 4;
   AlignTop = 0;
   AlignMiddle = 1;
   AlignBottom = 2;
   CheckBoxStyleCircle = 108;
   CheckBoxStyleCheck = 52;
   CheckBoxStyleCross = 56;
   CheckBoxStyleDiamond = 117;
   CheckBoxStyleStar = 72;
   CheckBoxStyleSquare = 110;
   CheckBoxStyleUndefined = 32;
  end;

  //-------------namespace: Aspose.Pdf.Facades----------------
  DNLineInfoClass = interface(DDN.mscorlib.DNObjectClass)
  ['{C1A5620B-931C-5665-8130-E8D4538E7204}']
  { constructors } 

    {class} function init: DNLineInfo;

  end;

  [DNTypeName('Aspose.Pdf.Facades.LineInfo')]
  DNLineInfo = interface(DDN.mscorlib.DNObject)
  ['{36635532-6EDA-3C2C-A5EA-FC03CF15FB72}']
  { getters & setters } 

    function get_VerticeCoordinate: TArray<Single>;
    procedure set_VerticeCoordinate(value: TArray<Single>);
    function get_LineColor: DDN.System.Drawing.DNColor;
    procedure set_LineColor(value: DDN.System.Drawing.DNColor);
    function get_LineWidth: Int32;
    procedure set_LineWidth(value: Int32);
    function get_Visibility: Boolean;
    procedure set_Visibility(value: Boolean);
    function get_LineDashPattern: TArray<Int32>;
    procedure set_LineDashPattern(value: TArray<Int32>);
    function get_BorderStyle: Int32;
    procedure set_BorderStyle(value: Int32);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property VerticeCoordinate: TArray<Single> read get_VerticeCoordinate write set_VerticeCoordinate;
    property LineColor: DDN.System.Drawing.DNColor read get_LineColor write set_LineColor;
    property LineWidth: Int32 read get_LineWidth write set_LineWidth;
    property Visibility: Boolean read get_Visibility write set_Visibility;
    property LineDashPattern: TArray<Int32> read get_LineDashPattern write set_LineDashPattern;
    property BorderStyle: Int32 read get_BorderStyle write set_BorderStyle;
  end;

  TDNLineInfo = class(TDNGenericImport<DNLineInfoClass, DNLineInfo>) end;

  //-------------namespace: Aspose.Pdf.Facades----------------
  DNPdfFileEditorClass = interface(DDN.mscorlib.DNObjectClass)
  ['{9957C633-3E42-51B2-AD26-529C3E84A106}']
  { static getter & setter } 

    procedure set_ConvertTo(value: DNPdfFormat);

  { constructors } 

    {class} function init: DNPdfFileEditor;

  { static propertys } 

    {class} property ConvertTo: DNPdfFormat write set_ConvertTo;
  end;

  [DNTypeName('Aspose.Pdf.Facades.PdfFileEditor')]
  DNPdfFileEditor = interface(DDN.mscorlib.DNObject)
  ['{45BEB9CB-EE6E-302B-9151-CA60A56756EA}']
  { getters & setters } 

    function get_ConversionLog: string;
    function get_MergeDuplicateLayers: Boolean;
    procedure set_MergeDuplicateLayers(value: Boolean);
    function get_CopyOutlines: Boolean;
    procedure set_CopyOutlines(value: Boolean);
    function get_CopyLogicalStructure: Boolean;
    procedure set_CopyLogicalStructure(value: Boolean);
    function get_MergeDuplicateOutlines: Boolean;
    procedure set_MergeDuplicateOutlines(value: Boolean);
    function get_PreserveUserRights: Boolean;
    procedure set_PreserveUserRights(value: Boolean);
    function get_IncrementalUpdates: Boolean;
    procedure set_IncrementalUpdates(value: Boolean);
    function get_OptimizeSize: Boolean;
    procedure set_OptimizeSize(value: Boolean);
    function get_CorruptedItems: TArray<DNPdfFileEditor_CorruptedItem>;
    function get_CorruptedFileAction: DNPdfFileEditor_ConcatenateCorruptedFileAction;
    procedure set_CorruptedFileAction(value: DNPdfFileEditor_ConcatenateCorruptedFileAction);
    function get_OwnerPassword: string;
    procedure set_OwnerPassword(value: string);
    function get_AllowConcatenateExceptions: Boolean;
    procedure set_AllowConcatenateExceptions(value: Boolean);
    procedure set_ConvertTo(value: DNPdfFormat);
    function get_CloseConcatenatedStreams: Boolean;
    procedure set_CloseConcatenatedStreams(value: Boolean);
    function get_UniqueSuffix: string;
    procedure set_UniqueSuffix(value: string);
    function get_KeepActions: Boolean;
    procedure set_KeepActions(value: Boolean);
    function get_KeepFieldsUnique: Boolean;
    procedure set_KeepFieldsUnique(value: Boolean);
    function get_UseDiskBuffer: Boolean;
    procedure set_UseDiskBuffer(value: Boolean);
    function get_ConcatenationPacketSize: Int32;
    procedure set_ConcatenationPacketSize(value: Int32);
    function get_LastException: DDN.mscorlib.DNException;
    function get_ContentDisposition: DNContentDisposition;
    procedure set_ContentDisposition(value: DNContentDisposition);
    function get_SaveOptions: DNSaveOptions;
    procedure set_SaveOptions(value: DNSaveOptions);
    function get_AttachmentName: string;
    procedure set_AttachmentName(value: string);

  { methods } 

    function ResizeContents(source: DDN.mscorlib.DNStream; destination: DDN.mscorlib.DNStream; pages: TArray<Int32>; parameters: DNPdfFileEditor_ContentsResizeParameters): Boolean; overload;
    function ResizeContents(source: DDN.mscorlib.DNStream; destination: DDN.mscorlib.DNStream; pages: TArray<Int32>; newWidth: Double; newHeight: Double): Boolean; overload;
    function ResizeContentsPct(source: DDN.mscorlib.DNStream; destination: DDN.mscorlib.DNStream; pages: TArray<Int32>; newWidth: Double; newHeight: Double): Boolean; overload;
    function AddMargins(source: DDN.mscorlib.DNStream; destination: DDN.mscorlib.DNStream; pages: TArray<Int32>; leftMargin: Double; rightMargin: Double; topMargin: Double; bottomMargin: Double): Boolean; overload;
    function AddMarginsPct(source: DDN.mscorlib.DNStream; destination: DDN.mscorlib.DNStream; pages: TArray<Int32>; leftMargin: Double; rightMargin: Double; topMargin: Double; bottomMargin: Double): Boolean; overload;
    function ResizeContents(source: string; destination: string; pages: TArray<Int32>; newWidth: Double; newHeight: Double): Boolean; overload;
    function ResizeContentsPct(source: string; destination: string; pages: TArray<Int32>; newWidth: Double; newHeight: Double): Boolean; overload;
    function AddMargins(source: string; destination: string; pages: TArray<Int32>; leftMargin: Double; rightMargin: Double; topMargin: Double; bottomMargin: Double): Boolean; overload;
    function AddMarginsPct(source: string; destination: string; pages: TArray<Int32>; leftMargin: Double; rightMargin: Double; topMargin: Double; bottomMargin: Double): Boolean; overload;
    function ResizeContents(source: string; destination: string; pages: TArray<Int32>; parameters: DNPdfFileEditor_ContentsResizeParameters): Boolean; overload;
    procedure ResizeContents(source: DNDocument; pages: TArray<Int32>; parameters: DNPdfFileEditor_ContentsResizeParameters); overload;
    procedure ResizeContents(source: DNDocument; parameters: DNPdfFileEditor_ContentsResizeParameters); overload;
    function Concatenate(inputFiles: TArray<string>; response: DDN.System.Web.DNHttpResponse): Boolean; overload;
    function Concatenate(inputStream: TArray<DDN.mscorlib.DNStream>; response: DDN.System.Web.DNHttpResponse): Boolean; overload;
    function Append(inputStream: DDN.mscorlib.DNStream; portStreams: TArray<DDN.mscorlib.DNStream>; startPage: Int32; endPage: Int32; response: DDN.System.Web.DNHttpResponse): Boolean; overload;
    function Append(inputFile: string; portFiles: TArray<string>; startPage: Int32; endPage: Int32; response: DDN.System.Web.DNHttpResponse): Boolean; overload;
    function Insert(inputFile: string; insertLocation: Int32; portFile: string; pageNumber: TArray<Int32>; response: DDN.System.Web.DNHttpResponse): Boolean; overload;
    function Insert(inputStream: DDN.mscorlib.DNStream; insertLocation: Int32; portStream: DDN.mscorlib.DNStream; pageNumber: TArray<Int32>; response: DDN.System.Web.DNHttpResponse): Boolean; overload;
    function Delete(inputFile: string; pageNumber: TArray<Int32>; response: DDN.System.Web.DNHttpResponse): Boolean; overload;
    function Delete(inputStream: DDN.mscorlib.DNStream; pageNumber: TArray<Int32>; response: DDN.System.Web.DNHttpResponse): Boolean; overload;
    function Extract(inputStream: DDN.mscorlib.DNStream; pageNumber: TArray<Int32>; response: DDN.System.Web.DNHttpResponse): Boolean; overload;
    function Extract(inputFile: string; pageNumber: TArray<Int32>; response: DDN.System.Web.DNHttpResponse): Boolean; overload;
    function SplitFromFirst(inputFile: string; location: Int32; response: DDN.System.Web.DNHttpResponse): Boolean; overload;
    function SplitFromFirst(inputStream: DDN.mscorlib.DNStream; location: Int32; response: DDN.System.Web.DNHttpResponse): Boolean; overload;
    function SplitToEnd(inputStream: DDN.mscorlib.DNStream; location: Int32; response: DDN.System.Web.DNHttpResponse): Boolean; overload;
    function SplitToEnd(inputFile: string; location: Int32; response: DDN.System.Web.DNHttpResponse): Boolean; overload;
    function MakeBooklet(inputFile: string; pageSize: DNPageSize; leftPages: TArray<Int32>; rightPages: TArray<Int32>; response: DDN.System.Web.DNHttpResponse): Boolean; overload;
    function MakeBooklet(inputStream: DDN.mscorlib.DNStream; pageSize: DNPageSize; leftPages: TArray<Int32>; rightPages: TArray<Int32>; response: DDN.System.Web.DNHttpResponse): Boolean; overload;
    function MakeBooklet(inputFile: string; pageSize: DNPageSize; response: DDN.System.Web.DNHttpResponse): Boolean; overload;
    function MakeBooklet(inputStream: DDN.mscorlib.DNStream; pageSize: DNPageSize; response: DDN.System.Web.DNHttpResponse): Boolean; overload;
    function MakeNUp(inputStream: DDN.mscorlib.DNStream; x: Int32; y: Int32; pageSize: DNPageSize; response: DDN.System.Web.DNHttpResponse): Boolean; overload;
    function MakeNUp(inputFile: string; x: Int32; y: Int32; pageSize: DNPageSize; response: DDN.System.Web.DNHttpResponse): Boolean; overload;
    function MakeNUp(inputFile: string; x: Int32; y: Int32; response: DDN.System.Web.DNHttpResponse): Boolean; overload;
    function MakeNUp(inputStream: DDN.mscorlib.DNStream; x: Int32; y: Int32; response: DDN.System.Web.DNHttpResponse): Boolean; overload;
    function ResizeContents(source: string; pages: TArray<Int32>; parameters: DNPdfFileEditor_ContentsResizeParameters; response: DDN.System.Web.DNHttpResponse): Boolean; overload;
    function ResizeContents(source: DDN.mscorlib.DNStream; pages: TArray<Int32>; parameters: DNPdfFileEditor_ContentsResizeParameters; response: DDN.System.Web.DNHttpResponse): Boolean; overload;
    procedure AddPageBreak(src: DNDocument; dest: DNDocument; pageBreaks: TArray<DNPdfFileEditor_PageBreak>); overload;
    procedure AddPageBreak(src: string; dest: string; pageBreaks: TArray<DNPdfFileEditor_PageBreak>); overload;
    procedure AddPageBreak(src: DDN.mscorlib.DNStream; dest: DDN.mscorlib.DNStream; pageBreaks: TArray<DNPdfFileEditor_PageBreak>); overload;
    function Concatenate(firstInputFile: string; secInputFile: string; outputFile: string): Boolean; overload;
    function Concatenate(firstInputStream: DDN.mscorlib.DNStream; secInputStream: DDN.mscorlib.DNStream; outputStream: DDN.mscorlib.DNStream): Boolean; overload;
    function Concatenate(src: TArray<DNDocument>; dest: DNDocument): Boolean; overload;
    function Concatenate(inputFiles: TArray<string>; outputFile: string): Boolean; overload;
    function Concatenate(inputStream: TArray<DDN.mscorlib.DNStream>; outputStream: DDN.mscorlib.DNStream): Boolean; overload;
    function Concatenate(firstInputFile: string; secInputFile: string; blankPageFile: string; outputFile: string): Boolean; overload;
    function Concatenate(firstInputStream: DDN.mscorlib.DNStream; secInputStream: DDN.mscorlib.DNStream; blankPageStream: DDN.mscorlib.DNStream; outputStream: DDN.mscorlib.DNStream): Boolean; overload;
    function Append(inputStream: DDN.mscorlib.DNStream; portStreams: TArray<DDN.mscorlib.DNStream>; startPage: Int32; endPage: Int32; outputStream: DDN.mscorlib.DNStream): Boolean; overload;
    function Append(inputFile: string; portFiles: TArray<string>; startPage: Int32; endPage: Int32; outputFile: string): Boolean; overload;
    function Append(inputFile: string; portFile: string; startPage: Int32; endPage: Int32; outputFile: string): Boolean; overload;
    function Append(inputStream: DDN.mscorlib.DNStream; portStream: DDN.mscorlib.DNStream; startPage: Int32; endPage: Int32; outputStream: DDN.mscorlib.DNStream): Boolean; overload;
    function Insert(inputFile: string; insertLocation: Int32; portFile: string; startPage: Int32; endPage: Int32; outputFile: string): Boolean; overload;
    function Insert(inputStream: DDN.mscorlib.DNStream; insertLocation: Int32; portStream: DDN.mscorlib.DNStream; startPage: Int32; endPage: Int32; outputStream: DDN.mscorlib.DNStream): Boolean; overload;
    function Insert(inputFile: string; insertLocation: Int32; portFile: string; pageNumber: TArray<Int32>; outputFile: string): Boolean; overload;
    function Insert(inputStream: DDN.mscorlib.DNStream; insertLocation: Int32; portStream: DDN.mscorlib.DNStream; pageNumber: TArray<Int32>; outputStream: DDN.mscorlib.DNStream): Boolean; overload;
    function Delete(inputFile: string; pageNumber: TArray<Int32>; outputFile: string): Boolean; overload;
    function Delete(inputStream: DDN.mscorlib.DNStream; pageNumber: TArray<Int32>; outputStream: DDN.mscorlib.DNStream): Boolean; overload;
    function Extract(inputFile: string; startPage: Int32; endPage: Int32; outputFile: string): Boolean; overload;
    function Extract(inputFile: string; pageNumber: TArray<Int32>; outputFile: string): Boolean; overload;
    function Extract(inputStream: DDN.mscorlib.DNStream; startPage: Int32; endPage: Int32; outputStream: DDN.mscorlib.DNStream): Boolean; overload;
    function Extract(inputStream: DDN.mscorlib.DNStream; pageNumber: TArray<Int32>; outputStream: DDN.mscorlib.DNStream): Boolean; overload;
    function SplitFromFirst(inputFile: string; location: Int32; outputFile: string): Boolean; overload;
    function SplitFromFirst(inputStream: DDN.mscorlib.DNStream; location: Int32; outputStream: DDN.mscorlib.DNStream): Boolean; overload;
    function SplitToEnd(inputFile: string; location: Int32; outputFile: string): Boolean; overload;
    function SplitToEnd(inputStream: DDN.mscorlib.DNStream; location: Int32; outputStream: DDN.mscorlib.DNStream): Boolean; overload;
    function MakeBooklet(inputFile: string; outputFile: string): Boolean; overload;
    function MakeBooklet(inputStream: DDN.mscorlib.DNStream; outputStream: DDN.mscorlib.DNStream): Boolean; overload;
    function MakeBooklet(inputFile: string; outputFile: string; pageSize: DNPageSize): Boolean; overload;
    function MakeBooklet(inputStream: DDN.mscorlib.DNStream; outputStream: DDN.mscorlib.DNStream; pageSize: DNPageSize): Boolean; overload;
    function MakeBooklet(inputFile: string; outputFile: string; leftPages: TArray<Int32>; rightPages: TArray<Int32>): Boolean; overload;
    function MakeBooklet(inputStream: DDN.mscorlib.DNStream; outputStream: DDN.mscorlib.DNStream; leftPages: TArray<Int32>; rightPages: TArray<Int32>): Boolean; overload;
    function MakeBooklet(inputFile: string; outputFile: string; pageSize: DNPageSize; leftPages: TArray<Int32>; rightPages: TArray<Int32>): Boolean; overload;
    function MakeBooklet(inputStream: DDN.mscorlib.DNStream; outputStream: DDN.mscorlib.DNStream; pageSize: DNPageSize; leftPages: TArray<Int32>; rightPages: TArray<Int32>): Boolean; overload;
    function MakeNUp(inputFile: string; outputFile: string; x: Int32; y: Int32): Boolean; overload;
    function MakeNUp(inputStream: DDN.mscorlib.DNStream; outputStream: DDN.mscorlib.DNStream; x: Int32; y: Int32): Boolean; overload;
    function MakeNUp(inputStream: DDN.mscorlib.DNStream; outputStream: DDN.mscorlib.DNStream; x: Int32; y: Int32; pageSize: DNPageSize): Boolean; overload;
    function MakeNUp(firstInputFile: string; secondInputFile: string; outputFile: string): Boolean; overload;
    function MakeNUp(firstInputStream: DDN.mscorlib.DNStream; secondInputStream: DDN.mscorlib.DNStream; outputStream: DDN.mscorlib.DNStream): Boolean; overload;
    function MakeNUp(inputFiles: TArray<string>; outputFile: string; isSidewise: Boolean): Boolean; overload;
    function MakeNUp(inputStreams: TArray<DDN.mscorlib.DNStream>; outputStream: DDN.mscorlib.DNStream; isSidewise: Boolean): Boolean; overload;
    function MakeNUp(inputFile: string; outputFile: string; x: Int32; y: Int32; pageSize: DNPageSize): Boolean; overload;
    function SplitToPages(inputFile: string): TArray<DDN.mscorlib.DNMemoryStream>; overload;
    function SplitToPages(inputStream: DDN.mscorlib.DNStream): TArray<DDN.mscorlib.DNMemoryStream>; overload;
    procedure SplitToPages(inputFile: string; fileNameTemplate: string); overload;
    procedure SplitToPages(inputStream: DDN.mscorlib.DNStream; fileNameTemplate: string); overload;
    function SplitToBulks(inputFile: string; numberOfPage: TArray<TArray<Int32>>): TArray<DDN.mscorlib.DNMemoryStream>; overload;
    function SplitToBulks(inputStream: DDN.mscorlib.DNStream; numberOfPage: TArray<TArray<Int32>>): TArray<DDN.mscorlib.DNMemoryStream>; overload;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property ConversionLog: string read get_ConversionLog;
    property MergeDuplicateLayers: Boolean read get_MergeDuplicateLayers write set_MergeDuplicateLayers;
    property CopyOutlines: Boolean read get_CopyOutlines write set_CopyOutlines;
    property CopyLogicalStructure: Boolean read get_CopyLogicalStructure write set_CopyLogicalStructure;
    property MergeDuplicateOutlines: Boolean read get_MergeDuplicateOutlines write set_MergeDuplicateOutlines;
    property PreserveUserRights: Boolean read get_PreserveUserRights write set_PreserveUserRights;
    property IncrementalUpdates: Boolean read get_IncrementalUpdates write set_IncrementalUpdates;
    property OptimizeSize: Boolean read get_OptimizeSize write set_OptimizeSize;
    property CorruptedItems: TArray<DNPdfFileEditor_CorruptedItem> read get_CorruptedItems;
    property CorruptedFileAction: DNPdfFileEditor_ConcatenateCorruptedFileAction read get_CorruptedFileAction write set_CorruptedFileAction;
    property OwnerPassword: string read get_OwnerPassword write set_OwnerPassword;
    property AllowConcatenateExceptions: Boolean read get_AllowConcatenateExceptions write set_AllowConcatenateExceptions;
    property ConvertTo: DNPdfFormat write set_ConvertTo;
    property CloseConcatenatedStreams: Boolean read get_CloseConcatenatedStreams write set_CloseConcatenatedStreams;
    property UniqueSuffix: string read get_UniqueSuffix write set_UniqueSuffix;
    property KeepActions: Boolean read get_KeepActions write set_KeepActions;
    property KeepFieldsUnique: Boolean read get_KeepFieldsUnique write set_KeepFieldsUnique;
    property UseDiskBuffer: Boolean read get_UseDiskBuffer write set_UseDiskBuffer;
    property ConcatenationPacketSize: Int32 read get_ConcatenationPacketSize write set_ConcatenationPacketSize;
    property LastException: DDN.mscorlib.DNException read get_LastException;
    property ContentDisposition: DNContentDisposition read get_ContentDisposition write set_ContentDisposition;
    property SaveOptions: DNSaveOptions read get_SaveOptions write set_SaveOptions;
    property AttachmentName: string read get_AttachmentName write set_AttachmentName;
  end;

  TDNPdfFileEditor = class(TDNGenericImport<DNPdfFileEditorClass, DNPdfFileEditor>) end;

  //-------------namespace: Aspose.Pdf.Facades----------------
  DNPdfFileEditor_ContentsResizeParametersClass = interface(DDN.mscorlib.DNObjectClass)
  ['{65BD5328-5F21-5DFC-A927-15FD7EEACB0A}']
  { constructors } 

    {class} function init: DNPdfFileEditor_ContentsResizeParameters; overload;
    {class} function init(leftMargin: DNPdfFileEditor_ContentsResizeValue; contentsWidth: DNPdfFileEditor_ContentsResizeValue; rightMargin: DNPdfFileEditor_ContentsResizeValue; topMargin: DNPdfFileEditor_ContentsResizeValue; contentsHeight: DNPdfFileEditor_ContentsResizeValue; bottomMargin: DNPdfFileEditor_ContentsResizeValue): DNPdfFileEditor_ContentsResizeParameters; overload;

  { static methods } 

    {class} function Margins(left: Double; right: Double; top: Double; bottom: Double): DNPdfFileEditor_ContentsResizeParameters;
    {class} function MarginsPercent(left: Double; right: Double; top: Double; bottom: Double): DNPdfFileEditor_ContentsResizeParameters;
    {class} function ContentSize(width: Double; height: Double): DNPdfFileEditor_ContentsResizeParameters;
    {class} function ContentSizePercent(width: Double; height: Double): DNPdfFileEditor_ContentsResizeParameters;
    {class} function PageResize(width: Double; height: Double): DNPdfFileEditor_ContentsResizeParameters;
    {class} function PageResizePct(widthPct: Double; heightPct: Double): DNPdfFileEditor_ContentsResizeParameters;

  end;

  [DNTypeName('Aspose.Pdf.Facades.PdfFileEditor+ContentsResizeParameters')]
  DNPdfFileEditor_ContentsResizeParameters = interface(DDN.mscorlib.DNObject)
  ['{B0DDE561-29DE-3BC4-8768-6E4DA8A743AA}']
  { getters & setters } 

    function get_LeftMargin: DNPdfFileEditor_ContentsResizeValue;
    procedure set_LeftMargin(value: DNPdfFileEditor_ContentsResizeValue);
    function get_RightMargin: DNPdfFileEditor_ContentsResizeValue;
    procedure set_RightMargin(value: DNPdfFileEditor_ContentsResizeValue);
    function get_TopMargin: DNPdfFileEditor_ContentsResizeValue;
    procedure set_TopMargin(value: DNPdfFileEditor_ContentsResizeValue);
    function get_BottomMargin: DNPdfFileEditor_ContentsResizeValue;
    procedure set_BottomMargin(value: DNPdfFileEditor_ContentsResizeValue);
    function get_ContentsWidth: DNPdfFileEditor_ContentsResizeValue;
    procedure set_ContentsWidth(value: DNPdfFileEditor_ContentsResizeValue);
    function get_ContentsHeight: DNPdfFileEditor_ContentsResizeValue;
    procedure set_ContentsHeight(value: DNPdfFileEditor_ContentsResizeValue);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property LeftMargin: DNPdfFileEditor_ContentsResizeValue read get_LeftMargin write set_LeftMargin;
    property RightMargin: DNPdfFileEditor_ContentsResizeValue read get_RightMargin write set_RightMargin;
    property TopMargin: DNPdfFileEditor_ContentsResizeValue read get_TopMargin write set_TopMargin;
    property BottomMargin: DNPdfFileEditor_ContentsResizeValue read get_BottomMargin write set_BottomMargin;
    property ContentsWidth: DNPdfFileEditor_ContentsResizeValue read get_ContentsWidth write set_ContentsWidth;
    property ContentsHeight: DNPdfFileEditor_ContentsResizeValue read get_ContentsHeight write set_ContentsHeight;
  end;

  TDNPdfFileEditor_ContentsResizeParameters = class(TDNGenericImport<DNPdfFileEditor_ContentsResizeParametersClass, DNPdfFileEditor_ContentsResizeParameters>) end;

  //-------------namespace: Aspose.Pdf.Facades----------------
  DNPdfFileEditor_ContentsResizeValueClass = interface(DDN.mscorlib.DNObjectClass)
  ['{6FEFC78E-9E75-5E63-B480-00D7B043BFB2}']
  { static getter & setter } 

    procedure set_PercentValue(value: Double);
    procedure set_UnitValue(value: Double);

  { static methods } 

    {class} function Percents(value: Double): DNPdfFileEditor_ContentsResizeValue;
    {class} function Units(value: Double): DNPdfFileEditor_ContentsResizeValue;
    {class} function Auto: DNPdfFileEditor_ContentsResizeValue;

  { static propertys } 

    {class} property PercentValue: Double write set_PercentValue;
    {class} property UnitValue: Double write set_UnitValue;
  end;

  [DNTypeName('Aspose.Pdf.Facades.PdfFileEditor+ContentsResizeValue')]
  DNPdfFileEditor_ContentsResizeValue = interface(DDN.mscorlib.DNObject)
  ['{98AF03F6-9B41-3313-A23D-1580815925FC}']
  { getters & setters } 

    procedure set_PercentValue(value: Double);
    procedure set_UnitValue(value: Double);
    function get_Value: Double;
    function get_IsPercent: Boolean;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property PercentValue: Double write set_PercentValue;
    property UnitValue: Double write set_UnitValue;
    property Value: Double read get_Value;
    property IsPercent: Boolean read get_IsPercent;
  end;

  TDNPdfFileEditor_ContentsResizeValue = class(TDNGenericImport<DNPdfFileEditor_ContentsResizeValueClass, DNPdfFileEditor_ContentsResizeValue>) end;

  //-------------namespace: Aspose.Pdf.Facades----------------
  DNPdfFileEditor_CorruptedItemClass = interface(DDN.mscorlib.DNObjectClass)
  ['{2C353746-3E9E-5D3E-B2F5-2234AD2BABAF}']
  end;

  [DNTypeName('Aspose.Pdf.Facades.PdfFileEditor+CorruptedItem')]
  DNPdfFileEditor_CorruptedItem = interface(DDN.mscorlib.DNObject)
  ['{B6FE0E8D-A0EF-36DC-AD26-490FF5FBC71F}']
  { getters & setters } 

    function get_Index: Int32;
    function get_Exception: DDN.mscorlib.DNException;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Index: Int32 read get_Index;
    property Exception: DDN.mscorlib.DNException read get_Exception;
  end;

  TDNPdfFileEditor_CorruptedItem = class(TDNGenericImport<DNPdfFileEditor_CorruptedItemClass, DNPdfFileEditor_CorruptedItem>) end;

  //-------------namespace: Aspose.Pdf.Facades----------------
  DNPdfFileEditor_PageBreakClass = interface(DDN.mscorlib.DNObjectClass)
  ['{58B6EAC8-6A47-5D42-983A-77746E1B1AD3}']
  { constructors } 

    {class} function init(pageNumber: Int32; position: Double): DNPdfFileEditor_PageBreak;

  end;

  [DNTypeName('Aspose.Pdf.Facades.PdfFileEditor+PageBreak')]
  DNPdfFileEditor_PageBreak = interface(DDN.mscorlib.DNObject)
  ['{F5806E9F-D33D-37D1-A88D-C840ADA35F98}']
  { getters & setters } 

    function get_PageNumber: Int32;
    procedure set_PageNumber(value: Int32);
    function get_Position: Double;
    procedure set_Position(value: Double);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property PageNumber: Int32 read get_PageNumber write set_PageNumber;
    property Position: Double read get_Position write set_Position;
  end;

  TDNPdfFileEditor_PageBreak = class(TDNGenericImport<DNPdfFileEditor_PageBreakClass, DNPdfFileEditor_PageBreak>) end;

  //-------------namespace: Aspose.Pdf.Facades----------------
  DNPdfJavaScriptStripperClass = interface(DDN.mscorlib.DNObjectClass)
  ['{EEE9C744-8873-5DB4-95F3-D0518F62593D}']
  { constructors } 

    {class} function init: DNPdfJavaScriptStripper;

  end;

  [DNTypeName('Aspose.Pdf.Facades.PdfJavaScriptStripper')]
  DNPdfJavaScriptStripper = interface(DDN.mscorlib.DNObject)
  ['{46908293-D7E9-34B4-A139-A5DA8FA776C1}']
  { methods } 

    function Strip(inputFile: string; outputFile: string): Boolean; overload;
    function Strip(inStream: DDN.mscorlib.DNStream; outStream: DDN.mscorlib.DNStream): Boolean; overload;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNPdfJavaScriptStripper = class(TDNGenericImport<DNPdfJavaScriptStripperClass, DNPdfJavaScriptStripper>) end;

  //-------------namespace: Aspose.Pdf.Facades----------------
  DNPdfPrintPageInfoClass = interface(DDN.mscorlib.DNObjectClass)
  ['{AEE3D6F6-139D-5843-BD45-D3D5109EE46A}']
  end;

  [DNTypeName('Aspose.Pdf.Facades.PdfPrintPageInfo')]
  DNPdfPrintPageInfo = interface(DDN.mscorlib.DNObject)
  ['{22D271A6-C711-3C0E-B658-481D997C1E24}']
  { getters & setters } 

    function get_PageNumber: Int32;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property PageNumber: Int32 read get_PageNumber;
  end;

  TDNPdfPrintPageInfo = class(TDNGenericImport<DNPdfPrintPageInfoClass, DNPdfPrintPageInfo>) end;

  //-------------namespace: Aspose.Pdf.Facades----------------
  DNPdfProducerClass = interface(DDN.mscorlib.DNObjectClass)
  ['{660AF50B-7944-5480-9DEB-E2F6FE00B32C}']
  { static methods } 

    {class} procedure Produce(inputStream: DDN.mscorlib.DNStream; format: DNImportFormat; outputStream: DDN.mscorlib.DNStream); overload;
    {class} procedure Produce(inputFileName: string; format: DNImportFormat; outputStream: DDN.mscorlib.DNStream); overload;
    {class} procedure Produce(inputStream: DDN.mscorlib.DNStream; format: DNImportFormat; outputFileName: string); overload;
    {class} procedure Produce(inputFileName: string; format: DNImportFormat; outputFileName: string); overload;
    {class} procedure Produce(inputFileName: string; options: DNImportOptions; outputStream: DDN.mscorlib.DNStream); overload;
    {class} procedure Produce(inputStream: DDN.mscorlib.DNStream; options: DNImportOptions; outputFileName: string); overload;
    {class} procedure Produce(inputFileName: string; options: DNImportOptions; outputFileName: string); overload;
    {class} procedure Produce(inputStream: DDN.mscorlib.DNStream; options: DNImportOptions; outputStream: DDN.mscorlib.DNStream); overload;

  end;

  [DNTypeName('Aspose.Pdf.Facades.PdfProducer')]
  DNPdfProducer = interface(DDN.mscorlib.DNObject)
  ['{C3D24BD5-C282-3E64-9EFB-9F02AF447918}']
  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNPdfProducer = class(TDNGenericImport<DNPdfProducerClass, DNPdfProducer>) end;

  //-------------namespace: Aspose.Pdf.Facades----------------
  DNPdfViewerClass = interface(DNObjectClass)
  ['{872AD085-F9CA-5835-8AB1-73C7739FA002}']
  { constructors } 

    {class} function init: DNPdfViewer; overload;
    {class} function init(document: DNDocument): DNPdfViewer; overload;

  end;

  [DNTypeName('Aspose.Pdf.Facades.PdfViewer')]
  DNPdfViewer = interface(DNIFacade)
  ['{9CA23748-F550-322D-A3BE-E1CD34EB3236}']
  { getters & setters } 

    function get_ShowHiddenAreas: Boolean;
    procedure set_ShowHiddenAreas(value: Boolean);
    function get_PrintStatus: DDN.mscorlib.DNObject;
    function get_UseIntermidiateImage: Boolean;
    procedure set_UseIntermidiateImage(value: Boolean);
    function get_CoordinateType: DNPageCoordinateType;
    procedure set_CoordinateType(value: DNPageCoordinateType);
    function get_PrintAsImage: Boolean;
    procedure set_PrintAsImage(value: Boolean);
    function get_PageCount: Int32;
    function get_Password: string;
    procedure set_Password(value: string);
    function get_PrintPageDialog: Boolean;
    procedure set_PrintPageDialog(value: Boolean);
    function get_PrintAsGrayscale: Boolean;
    procedure set_PrintAsGrayscale(value: Boolean);
    function get_PrinterJobName: string;
    procedure set_PrinterJobName(value: string);
    function get_FormPresentationMode: DNFormPresentationMode;
    procedure set_FormPresentationMode(value: DNFormPresentationMode);
    function get_RenderingOptions: DNRenderingOptions;
    procedure set_RenderingOptions(value: DNRenderingOptions);
    function get_VerticalAlignment: DNVerticalAlignment;
    procedure set_VerticalAlignment(value: DNVerticalAlignment);
    function get_HorizontalAlignment: DNHorizontalAlignment;
    procedure set_HorizontalAlignment(value: DNHorizontalAlignment);
    function get_AutoResize: Boolean;
    procedure set_AutoResize(value: Boolean);
    function get_AutoRotate: Boolean;
    procedure set_AutoRotate(value: Boolean);
    function get_AutoRotateMode: DNAutoRotateMode;
    procedure set_AutoRotateMode(value: DNAutoRotateMode);
    function get_Resolution: Int32;
    procedure set_Resolution(value: Int32);
    function get_ScaleFactor: Single;
    procedure set_ScaleFactor(value: Single);

  { events } 

    procedure add_PdfQueryPageSettings(value: DNPdfQueryPageSettingsEventHandler);
    procedure remove_PdfQueryPageSettings(value: DNPdfQueryPageSettingsEventHandler);
    procedure add_EndPrint(value: DDN.System.Drawing.DNPrintEventHandler);
    procedure remove_EndPrint(value: DDN.System.Drawing.DNPrintEventHandler);

  { methods } 

    procedure PrintLargePdf(filePath: string); overload;
    procedure PrintLargePdf(inputStream: DDN.mscorlib.DNStream); overload;
    procedure PrintLargePdf(filePath: string; printerSettings: DDN.System.Drawing.DNPrinterSettings); overload;
    procedure PrintLargePdf(inputStream: DDN.mscorlib.DNStream; printerSettings: DDN.System.Drawing.DNPrinterSettings); overload;
    procedure PrintLargePdf(filePath: string; pageSettings: DDN.System.Drawing.DNPageSettings; printerSettings: DDN.System.Drawing.DNPrinterSettings); overload;
    procedure PrintLargePdf(inputStream: DDN.mscorlib.DNStream; pageSettings: DDN.System.Drawing.DNPageSettings; printerSettings: DDN.System.Drawing.DNPrinterSettings); overload;
    function DecodeAllPages: TArray<DDN.System.Drawing.DNBitmap>;
    function DecodePage(pageNumber: Int32): DDN.System.Drawing.DNBitmap;
    procedure PrintDocumentWithSetup;
    procedure PrintDocumentWithSettings(pageSettings: DDN.System.Drawing.DNPageSettings; printerSettings: DDN.System.Drawing.DNPrinterSettings); overload;
    procedure PrintDocumentWithSettings(printerSettings: DDN.System.Drawing.DNPrinterSettings); overload;
    procedure PrintDocument;
    function GetDefaultPageSettings: DDN.System.Drawing.DNPageSettings;
    function GetDefaultPrinterSettings: DDN.System.Drawing.DNPrinterSettings;
    procedure OpenPdfFile(filePath: string); overload;
    procedure OpenPdfFile(inputStream: DDN.mscorlib.DNStream); overload;
    procedure ClosePdfFile;
    procedure BindPdf(srcFile: string); overload;
    procedure BindPdf(srcStream: DDN.mscorlib.DNStream); overload;
    procedure BindPdf(srcDoc: DNDocument); overload;
    procedure Save(destFile: string); overload;
    procedure Save(destStream: DDN.mscorlib.DNStream); overload;
    procedure Close;
    procedure Dispose;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property ShowHiddenAreas: Boolean read get_ShowHiddenAreas write set_ShowHiddenAreas;
    property PrintStatus: DDN.mscorlib.DNObject read get_PrintStatus;
    property UseIntermidiateImage: Boolean read get_UseIntermidiateImage write set_UseIntermidiateImage;
    property CoordinateType: DNPageCoordinateType read get_CoordinateType write set_CoordinateType;
    property PrintAsImage: Boolean read get_PrintAsImage write set_PrintAsImage;
    property PageCount: Int32 read get_PageCount;
    property Password: string read get_Password write set_Password;
    property PrintPageDialog: Boolean read get_PrintPageDialog write set_PrintPageDialog;
    property PrintAsGrayscale: Boolean read get_PrintAsGrayscale write set_PrintAsGrayscale;
    property PrinterJobName: string read get_PrinterJobName write set_PrinterJobName;
    property FormPresentationMode: DNFormPresentationMode read get_FormPresentationMode write set_FormPresentationMode;
    property RenderingOptions: DNRenderingOptions read get_RenderingOptions write set_RenderingOptions;
    property VerticalAlignment: DNVerticalAlignment read get_VerticalAlignment write set_VerticalAlignment;
    property HorizontalAlignment: DNHorizontalAlignment read get_HorizontalAlignment write set_HorizontalAlignment;
    property AutoResize: Boolean read get_AutoResize write set_AutoResize;
    property AutoRotate: Boolean read get_AutoRotate write set_AutoRotate;
    property AutoRotateMode: DNAutoRotateMode read get_AutoRotateMode write set_AutoRotateMode;
    property Resolution: Int32 read get_Resolution write set_Resolution;
    property ScaleFactor: Single read get_ScaleFactor write set_ScaleFactor;
  end;

  TDNPdfViewer = class(TDNGenericImport<DNPdfViewerClass, DNPdfViewer>) end;

  //-------------namespace: Aspose.Pdf.Facades----------------
  DNReplaceTextStrategyClass = interface(DDN.mscorlib.DNObjectClass)
  ['{7F390895-2B33-5276-84F0-B4D68CC1A6EB}']
  { constructors } 

    {class} function init: DNReplaceTextStrategy;

  end;

  [DNTypeName('Aspose.Pdf.Facades.ReplaceTextStrategy')]
  DNReplaceTextStrategy = interface(DDN.mscorlib.DNObject)
  ['{03DCB8BF-251C-3EBD-91ED-D7F0FDC89DCE}']
  { getters & setters } 

    function get_IsRegularExpressionUsed: Boolean;
    procedure set_IsRegularExpressionUsed(value: Boolean);
    function get_NoCharacterBehavior: DNReplaceTextStrategy_NoCharacterAction;
    procedure set_NoCharacterBehavior(value: DNReplaceTextStrategy_NoCharacterAction);
    function get_ReplaceScope: DNReplaceTextStrategy_Scope;
    procedure set_ReplaceScope(value: DNReplaceTextStrategy_Scope);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property IsRegularExpressionUsed: Boolean read get_IsRegularExpressionUsed write set_IsRegularExpressionUsed;
    property NoCharacterBehavior: DNReplaceTextStrategy_NoCharacterAction read get_NoCharacterBehavior write set_NoCharacterBehavior;
    property ReplaceScope: DNReplaceTextStrategy_Scope read get_ReplaceScope write set_ReplaceScope;
  end;

  TDNReplaceTextStrategy = class(TDNGenericImport<DNReplaceTextStrategyClass, DNReplaceTextStrategy>) end;

  //-------------namespace: Aspose.Pdf.Facades----------------
  DNFacades_StampClass = interface(DDN.mscorlib.DNObjectClass)
  ['{B36CFC7B-A00D-528B-9D59-D21916F79B84}']
  { constructors } 

    {class} function init: DNFacades_Stamp;

  end;

  [DNTypeName('Aspose.Pdf.Facades.Stamp')]
  DNFacades_Stamp = interface(DDN.mscorlib.DNObject)
  ['{556EE03D-DC59-3A6C-B0E9-4AACED5A89AB}']
  { getters & setters } 

    function get_StampId: Int32;
    procedure set_StampId(value: Int32);
    function get_Quality: Int32;
    procedure set_Quality(value: Int32);
    function get_Opacity: Single;
    procedure set_Opacity(value: Single);
    function get_PageNumber: Int32;
    procedure set_PageNumber(value: Int32);
    function get_Pages: TArray<Int32>;
    procedure set_Pages(value: TArray<Int32>);
    function get_Rotation: Single;
    procedure set_Rotation(value: Single);
    function get_IsBackground: Boolean;
    procedure set_IsBackground(value: Boolean);
    function get_BlendingSpace: DNBlendingColorSpace;
    procedure set_BlendingSpace(value: DNBlendingColorSpace);

  { methods } 

    procedure BindPdf(pdfFile: string; pageNumber: Int32); overload;
    procedure BindPdf(pdfStream: DDN.mscorlib.DNStream; pageNumber: Int32); overload;
    procedure BindImage(imageFile: string); overload;
    procedure BindLogo(formattedText: DNFormattedText);
    procedure BindTextState(textState: DNTextState);
    procedure SetOrigin(originX: Single; originY: Single);
    procedure SetImageSize(width: Single; height: Single);
    procedure BindImage(image: DDN.mscorlib.DNStream); overload;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property StampId: Int32 read get_StampId write set_StampId;
    property Quality: Int32 read get_Quality write set_Quality;
    property Opacity: Single read get_Opacity write set_Opacity;
    property PageNumber: Int32 read get_PageNumber write set_PageNumber;
    property Pages: TArray<Int32> read get_Pages write set_Pages;
    property Rotation: Single read get_Rotation write set_Rotation;
    property IsBackground: Boolean read get_IsBackground write set_IsBackground;
    property BlendingSpace: DNBlendingColorSpace read get_BlendingSpace write set_BlendingSpace;
  end;

  TDNFacades_Stamp = class(TDNGenericImport<DNFacades_StampClass, DNFacades_Stamp>) end;

  //-------------namespace: Aspose.Pdf.Facades----------------
  DNStampInfoClass = interface(DDN.mscorlib.DNObjectClass)
  ['{1DD904CA-ACD0-5D83-A1E8-A4B96A23D7A3}']
  end;

  [DNTypeName('Aspose.Pdf.Facades.StampInfo')]
  DNStampInfo = interface(DDN.mscorlib.DNObject)
  ['{E07B8DBA-2E4C-3095-A6FD-C6444D3CAD48}']
  { getters & setters } 

    function get_StampId: Int32;
    function get_IndexOnPage: Int32;
    function get_StampType: DNStampType;
    function get_Rectangle: DNPdf_Rectangle;
    function get_Image: DDN.System.Drawing.DNImage;
    function get_Form: DNXForm;
    function get_Text: string;
    function get_Visible: Boolean;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property StampId: Int32 read get_StampId;
    property IndexOnPage: Int32 read get_IndexOnPage;
    property StampType: DNStampType read get_StampType;
    property Rectangle: DNPdf_Rectangle read get_Rectangle;
    property Image: DDN.System.Drawing.DNImage read get_Image;
    property Form: DNXForm read get_Form;
    property Text: string read get_Text;
    property Visible: Boolean read get_Visible;
  end;

  TDNStampInfo = class(TDNGenericImport<DNStampInfoClass, DNStampInfo>) end;

  //-------------namespace: Aspose.Pdf.Facades----------------
  DNTextPropertiesClass = interface(DDN.mscorlib.DNObjectClass)
  ['{14CEF176-F67C-544B-AF50-09173D59BC8A}']
  { constructors } 

    {class} function init(textSize: Double): DNTextProperties;

  end;

  [DNTypeName('Aspose.Pdf.Facades.TextProperties')]
  DNTextProperties = interface(DDN.mscorlib.DNObject)
  ['{974DD8FE-9BCE-323A-AEB7-30479FE03853}']
  { getters & setters } 

    function get_Color: DDN.System.Drawing.DNColor;
    procedure set_Color(value: DDN.System.Drawing.DNColor);
    function get_IsColorSpecified: Boolean;
    function get_TextSize: Double;
    procedure set_TextSize(value: Double);
    function get_IsTextSizeSpecified: Boolean;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Color: DDN.System.Drawing.DNColor read get_Color write set_Color;
    property IsColorSpecified: Boolean read get_IsColorSpecified;
    property TextSize: Double read get_TextSize write set_TextSize;
    property IsTextSizeSpecified: Boolean read get_IsTextSizeSpecified;
  end;

  TDNTextProperties = class(TDNGenericImport<DNTextPropertiesClass, DNTextProperties>) end;

  //-------------namespace: Aspose.Pdf.Facades----------------
  DNVerticalAlignmentTypeClass = interface(DDN.mscorlib.DNObjectClass)
  ['{7E35FDBB-5070-57A5-A43A-11C6E1CAF928}']
  { constructors } 

    {class} function init(name: string): DNVerticalAlignmentType;

  { static fields getter & setter } 

   function __fakeFieldGet_Top: DNVerticalAlignmentType;
   function __fakeFieldGet_Center: DNVerticalAlignmentType;
   function __fakeFieldGet_Bottom: DNVerticalAlignmentType;

  { static fields } 

    {class} property Top: DNVerticalAlignmentType read __fakeFieldGet_Top;
    {class} property Center: DNVerticalAlignmentType read __fakeFieldGet_Center;
    {class} property Bottom: DNVerticalAlignmentType read __fakeFieldGet_Bottom;

  end;

  [DNTypeName('Aspose.Pdf.Facades.VerticalAlignmentType')]
  DNVerticalAlignmentType = interface(DDN.mscorlib.DNObject)
  ['{42D220C2-E0E4-35F5-8C06-069039B91D1E}']
  { methods } 

    function ToString: string;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  end;

  TDNVerticalAlignmentType = class(TDNGenericImport<DNVerticalAlignmentTypeClass, DNVerticalAlignmentType>) end;

  //-------------namespace: Aspose.Pdf.Facades----------------
  DNViewerPreferenceClass = interface(DDN.mscorlib.DNObjectClass)
  ['{567B43D0-B2F0-51E9-AFAF-CE4810D8FF5E}']
  { constructors } 

    {class} function init: DNViewerPreference;

  { static fields getter & setter } 

   function __fakeFieldGet_PageModeUseOC: Int32;
   function __fakeFieldGet_DisplayDocTitle: Int32;
   function __fakeFieldGet_NonFullScreenPageModeUseOC: Int32;
   function __fakeFieldGet_PageLayoutSinglePage: Int32;
   function __fakeFieldGet_PageLayoutOneColumn: Int32;
   function __fakeFieldGet_PageLayoutTwoColumnLeft: Int32;
   function __fakeFieldGet_PageLayoutTwoColumnRight: Int32;
   function __fakeFieldGet_PageModeUseNone: Int32;
   function __fakeFieldGet_PageModeUseOutlines: Int32;
   function __fakeFieldGet_PageModeUseThumbs: Int32;
   function __fakeFieldGet_PageModeFullScreen: Int32;
   function __fakeFieldGet_PageModeUseAttachment: Int32;
   function __fakeFieldGet_HideToolbar: Int32;
   function __fakeFieldGet_HideMenubar: Int32;
   function __fakeFieldGet_HideWindowUI: Int32;
   function __fakeFieldGet_FitWindow: Int32;
   function __fakeFieldGet_CenterWindow: Int32;
   function __fakeFieldGet_NonFullScreenPageModeUseNone: Int32;
   function __fakeFieldGet_NonFullScreenPageModeUseOutlines: Int32;
   function __fakeFieldGet_NonFullScreenPageModeUseThumbs: Int32;
   function __fakeFieldGet_DirectionL2R: Int32;
   function __fakeFieldGet_DirectionR2L: Int32;
   function __fakeFieldGet_Simplex: Int32;
   function __fakeFieldGet_DuplexFlipShortEdge: Int32;
   function __fakeFieldGet_DuplexFlipLongEdge: Int32;

  { static fields } 

    {class} property PageModeUseOC: Int32 read __fakeFieldGet_PageModeUseOC;
    {class} property DisplayDocTitle: Int32 read __fakeFieldGet_DisplayDocTitle;
    {class} property NonFullScreenPageModeUseOC: Int32 read __fakeFieldGet_NonFullScreenPageModeUseOC;
    {class} property PageLayoutSinglePage: Int32 read __fakeFieldGet_PageLayoutSinglePage;
    {class} property PageLayoutOneColumn: Int32 read __fakeFieldGet_PageLayoutOneColumn;
    {class} property PageLayoutTwoColumnLeft: Int32 read __fakeFieldGet_PageLayoutTwoColumnLeft;
    {class} property PageLayoutTwoColumnRight: Int32 read __fakeFieldGet_PageLayoutTwoColumnRight;
    {class} property PageModeUseNone: Int32 read __fakeFieldGet_PageModeUseNone;
    {class} property PageModeUseOutlines: Int32 read __fakeFieldGet_PageModeUseOutlines;
    {class} property PageModeUseThumbs: Int32 read __fakeFieldGet_PageModeUseThumbs;
    {class} property PageModeFullScreen: Int32 read __fakeFieldGet_PageModeFullScreen;
    {class} property PageModeUseAttachment: Int32 read __fakeFieldGet_PageModeUseAttachment;
    {class} property HideToolbar: Int32 read __fakeFieldGet_HideToolbar;
    {class} property HideMenubar: Int32 read __fakeFieldGet_HideMenubar;
    {class} property HideWindowUI: Int32 read __fakeFieldGet_HideWindowUI;
    {class} property FitWindow: Int32 read __fakeFieldGet_FitWindow;
    {class} property CenterWindow: Int32 read __fakeFieldGet_CenterWindow;
    {class} property NonFullScreenPageModeUseNone: Int32 read __fakeFieldGet_NonFullScreenPageModeUseNone;
    {class} property NonFullScreenPageModeUseOutlines: Int32 read __fakeFieldGet_NonFullScreenPageModeUseOutlines;
    {class} property NonFullScreenPageModeUseThumbs: Int32 read __fakeFieldGet_NonFullScreenPageModeUseThumbs;
    {class} property DirectionL2R: Int32 read __fakeFieldGet_DirectionL2R;
    {class} property DirectionR2L: Int32 read __fakeFieldGet_DirectionR2L;
    {class} property Simplex: Int32 read __fakeFieldGet_Simplex;
    {class} property DuplexFlipShortEdge: Int32 read __fakeFieldGet_DuplexFlipShortEdge;
    {class} property DuplexFlipLongEdge: Int32 read __fakeFieldGet_DuplexFlipLongEdge;

  end;

  [DNTypeName('Aspose.Pdf.Facades.ViewerPreference')]
  DNViewerPreference = interface(DDN.mscorlib.DNObject)
  ['{56FF072F-BFDF-32C6-A414-19C2FA4CD64F}']
  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNViewerPreference = class(TDNGenericImport<DNViewerPreferenceClass, DNViewerPreference>)
  public const
   PageModeUseOC = 1048576;
   DisplayDocTitle = 262144;
   NonFullScreenPageModeUseOC = 524288;
   PageLayoutSinglePage = 1;
   PageLayoutOneColumn = 2;
   PageLayoutTwoColumnLeft = 4;
   PageLayoutTwoColumnRight = 8;
   PageModeUseNone = 16;
   PageModeUseOutlines = 32;
   PageModeUseThumbs = 64;
   PageModeFullScreen = 128;
   PageModeUseAttachment = 2097152;
   HideToolbar = 256;
   HideMenubar = 512;
   HideWindowUI = 1024;
   FitWindow = 2048;
   CenterWindow = 4096;
   NonFullScreenPageModeUseNone = 8192;
   NonFullScreenPageModeUseOutlines = 16384;
   NonFullScreenPageModeUseThumbs = 32768;
   DirectionL2R = 65536;
   DirectionR2L = 131072;
   Simplex = 4194304;
   DuplexFlipShortEdge = 8388608;
   DuplexFlipLongEdge = 16777216;
  end;

  //-------------namespace: Aspose.Pdf----------------
  DNFileParamsClass = interface(DDN.mscorlib.DNObjectClass)
  ['{1E4A707E-5166-5D58-943A-6094850857A2}']
  { constructors } 

    {class} function init(spec: DNFileSpecification): DNFileParams;

  end;

  [DNTypeName('Aspose.Pdf.FileParams')]
  DNFileParams = interface(DDN.mscorlib.DNObject)
  ['{3F375712-09D4-373A-85FC-FF56918AE402}']
  { getters & setters } 

    function get_Size: Int32;
    function get_CreationDate: DDN.mscorlib.DNDateTime;
    procedure set_CreationDate(value: DDN.mscorlib.DNDateTime);
    function get_ModDate: DDN.mscorlib.DNDateTime;
    procedure set_ModDate(value: DDN.mscorlib.DNDateTime);
    function get_CheckSum: string;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Size: Int32 read get_Size;
    property CreationDate: DDN.mscorlib.DNDateTime read get_CreationDate write set_CreationDate;
    property ModDate: DDN.mscorlib.DNDateTime read get_ModDate write set_ModDate;
    property CheckSum: string read get_CheckSum;
  end;

  TDNFileParams = class(TDNGenericImport<DNFileParamsClass, DNFileParams>) end;

  //-------------namespace: Aspose.Pdf----------------
  DNFileSpecificationClass = interface(DNObjectClass)
  ['{4308C8BA-B82A-5D90-9AC3-029648100FEC}']
  { constructors } 

    {class} function init(&file: string): DNFileSpecification; overload;
    {class} function init(stream: DDN.mscorlib.DNStream; name: string): DNFileSpecification; overload;
    {class} function init(&file: string; description: string): DNFileSpecification; overload;
    {class} function init(stream: DDN.mscorlib.DNStream; name: string; description: string): DNFileSpecification; overload;
    {class} function init(fileName: string; annot: DNAnnotation): DNFileSpecification; overload;
    {class} function init: DNFileSpecification; overload;

  end;

  [DNTypeName('Aspose.Pdf.FileSpecification')]
  DNFileSpecification = interface(DDN.mscorlib.DNIDisposable)
  ['{4F0EF4DB-4AAA-30AC-961D-3D28B9493BE0}']
  { getters & setters } 

    function get_Encoding: DNFileEncoding;
    procedure set_Encoding(value: DNFileEncoding);
    function get_IncludeContents: Boolean;
    procedure set_IncludeContents(value: Boolean);
    function get_EncryptedPayload: DNEncryptedPayload;
    function get_Description: string;
    procedure set_Description(value: string);
    function get_AFRelationship: DNAFRelationship;
    procedure set_AFRelationship(value: DNAFRelationship);
    function get_StreamContents: DDN.mscorlib.DNStream;
    function get_Contents: DDN.mscorlib.DNStream;
    procedure set_Contents(value: DDN.mscorlib.DNStream);
    function get_Params: DNFileParams;
    procedure set_Params(value: DNFileParams);
    function get_MIMEType: string;
    procedure set_MIMEType(value: string);
    function get_Name: string;
    procedure set_Name(value: string);
    function get_UnicodeName: string;
    procedure set_UnicodeName(value: string);
    function get_FileSystem: string;
    procedure set_FileSystem(value: string);

  { methods } 

    function GetValue(key: string): string;
    procedure SetValue(key: string; value: string);
    procedure Dispose;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Encoding: DNFileEncoding read get_Encoding write set_Encoding;
    property IncludeContents: Boolean read get_IncludeContents write set_IncludeContents;
    property EncryptedPayload: DNEncryptedPayload read get_EncryptedPayload;
    property Description: string read get_Description write set_Description;
    property AFRelationship: DNAFRelationship read get_AFRelationship write set_AFRelationship;
    property StreamContents: DDN.mscorlib.DNStream read get_StreamContents;
    property Contents: DDN.mscorlib.DNStream read get_Contents write set_Contents;
    property Params: DNFileParams read get_Params write set_Params;
    property MIMEType: string read get_MIMEType write set_MIMEType;
    property Name: string read get_Name write set_Name;
    property UnicodeName: string read get_UnicodeName write set_UnicodeName;
    property FileSystem: string read get_FileSystem write set_FileSystem;
  end;

  TDNFileSpecification = class(TDNGenericImport<DNFileSpecificationClass, DNFileSpecification>) end;

  //-------------namespace: Aspose.Pdf.Forms----------------
  DNDocMDPSignatureClass = interface(DDN.mscorlib.DNObjectClass)
  ['{A95B73D5-6183-5C5E-8BC0-0978E479B26D}']
  { constructors } 

    {class} function init(signature: DNSignature; accessPermissions: DNDocMDPAccessPermissions): DNDocMDPSignature;

  end;

  [DNTypeName('Aspose.Pdf.Forms.DocMDPSignature')]
  DNDocMDPSignature = interface(DDN.mscorlib.DNObject)
  ['{891D7207-70CF-3D06-94B5-E4F1EDD5B050}']
  { getters & setters } 

    function get_AccessPermissions: DNDocMDPAccessPermissions;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property AccessPermissions: DNDocMDPAccessPermissions read get_AccessPermissions;
  end;

  TDNDocMDPSignature = class(TDNGenericImport<DNDocMDPSignatureClass, DNDocMDPSignature>) end;

  //-------------namespace: Aspose.Pdf.Forms----------------
  DNForms_FormClass = interface(DDN.mscorlib.DNObjectClass)
  ['{F0BECC13-DE68-5D26-94FA-5A37360382E7}']
  { static getter & setter } 

    procedure set_CalculatedFields(value: DDN.mscorlib.DNIEnumerable<DNField>);

  { static propertys } 

    {class} property CalculatedFields: DDN.mscorlib.DNIEnumerable<DNField> write set_CalculatedFields;
  end;

  [DNTypeName('Aspose.Pdf.Forms.Form')]
  DNForms_Form = interface(DDN.mscorlib.DNObject)
  ['{EDF53F16-AA0D-3736-AC32-AE4F7F2B4917}']
  { getters & setters } 

    function get_IsSynchronized: Boolean;
    function get_SyncRoot: DDN.mscorlib.DNObject;
    function get_AutoRecalculate: Boolean;
    procedure set_AutoRecalculate(value: Boolean);
    function get_Count: Int32;
    function get_DefaultResources: DNResources;
    function get_DefaultAppearance: DNDefaultAppearance;
    procedure set_DefaultAppearance(value: DNDefaultAppearance);
    function get_XFA: DNXFA;
    function get_IgnoreNeedsRendering: Boolean;
    procedure set_IgnoreNeedsRendering(value: Boolean);
    function get_RemovePermission: Boolean;
    procedure set_RemovePermission(value: Boolean);
    function get_EmulateRequierdGroups: Boolean;
    procedure set_EmulateRequierdGroups(value: Boolean);
    function get_Type: DNFormType;
    procedure set_Type(value: DNFormType);
    function get_Item(name: string): DNWidgetAnnotation; overload;
    function get_Item(index: Int32): DNWidgetAnnotation; overload;
    function get_Fields: TArray<DNField>;
    procedure set_CalculatedFields(value: DDN.mscorlib.DNIEnumerable<DNField>);
    function get_SignaturesExist: Boolean;
    procedure set_SignaturesExist(value: Boolean);
    function get_SignaturesAppendOnly: Boolean;
    procedure set_SignaturesAppendOnly(value: Boolean);

  { fields getter & setter } 

   function __fakeFieldGet_SignDependentElementsRenderingModeWhenConverted: DNForm_SignDependentElementsRenderingModes;
   procedure __fakeFieldSet_SignDependentElementsRenderingModeWhenConverted(value: DNForm_SignDependentElementsRenderingModes);

  { fields } 

   property SignDependentElementsRenderingModeWhenConverted: DNForm_SignDependentElementsRenderingModes read __fakeFieldGet_SignDependentElementsRenderingModeWhenConverted write __fakeFieldSet_SignDependentElementsRenderingModeWhenConverted;

  { methods } 

    procedure CopyTo(&array: TArray<DNField>; index: Int32);
    function GetEnumerator: DDN.mscorlib.DNIEnumerator<DNWidgetAnnotation>;
    procedure Add(field: DNField; pageNumber: Int32); overload;
    procedure Add(field: DNField); overload;
    procedure Delete(field: DNField); overload;
    procedure Delete(fieldName: string); overload;
    procedure Flatten;
    function Add(field: DNField; partialName: string; pageNumber: Int32): DNField; overload;
    procedure AddFieldAppearance(field: DNField; pageNumber: Int32; rect: DNPdf_Rectangle);
    procedure AssignXfa(xml: DDN.System.Xml.DNXmlDocument);
    function GetFieldsInRect(rect: DNPdf_Rectangle): TArray<DNField>;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property IsSynchronized: Boolean read get_IsSynchronized;
    property SyncRoot: DDN.mscorlib.DNObject read get_SyncRoot;
    property AutoRecalculate: Boolean read get_AutoRecalculate write set_AutoRecalculate;
    property Count: Int32 read get_Count;
    property DefaultResources: DNResources read get_DefaultResources;
    property DefaultAppearance: DNDefaultAppearance read get_DefaultAppearance write set_DefaultAppearance;
    property XFA: DNXFA read get_XFA;
    property IgnoreNeedsRendering: Boolean read get_IgnoreNeedsRendering write set_IgnoreNeedsRendering;
    property RemovePermission: Boolean read get_RemovePermission write set_RemovePermission;
    property EmulateRequierdGroups: Boolean read get_EmulateRequierdGroups write set_EmulateRequierdGroups;
    property &Type: DNFormType read get_Type write set_Type;
    property Item[name: string]: DNWidgetAnnotation read get_Item; default;
    property Item[index: Int32]: DNWidgetAnnotation read get_Item; default;
    property Fields: TArray<DNField> read get_Fields;
    property CalculatedFields: DDN.mscorlib.DNIEnumerable<DNField> write set_CalculatedFields;
    property SignaturesExist: Boolean read get_SignaturesExist write set_SignaturesExist;
    property SignaturesAppendOnly: Boolean read get_SignaturesAppendOnly write set_SignaturesAppendOnly;
  end;

  TDNForms_Form = class(TDNGenericImport<DNForms_FormClass, DNForms_Form>) end;

  //-------------namespace: Aspose.Pdf.Forms----------------
  DNForm_FlattenSettingsClass = interface(DDN.mscorlib.DNObjectClass)
  ['{D9A03C33-E58D-53B6-AFE0-A9DB72B4115F}']
  { constructors } 

    {class} function init: DNForm_FlattenSettings;

  end;

  [DNTypeName('Aspose.Pdf.Forms.Form+FlattenSettings')]
  DNForm_FlattenSettings = interface(DDN.mscorlib.DNObject)
  ['{E2821FF2-4C39-35DC-BB43-D3C09024C38F}']
  { getters & setters } 

    function get_UpdateAppearances: Boolean;
    procedure set_UpdateAppearances(value: Boolean);
    function get_CallEvents: Boolean;
    procedure set_CallEvents(value: Boolean);
    function get_HideButtons: Boolean;
    procedure set_HideButtons(value: Boolean);
    function get_ApplyRedactions: Boolean;
    procedure set_ApplyRedactions(value: Boolean);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property UpdateAppearances: Boolean read get_UpdateAppearances write set_UpdateAppearances;
    property CallEvents: Boolean read get_CallEvents write set_CallEvents;
    property HideButtons: Boolean read get_HideButtons write set_HideButtons;
    property ApplyRedactions: Boolean read get_ApplyRedactions write set_ApplyRedactions;
  end;

  TDNForm_FlattenSettings = class(TDNGenericImport<DNForm_FlattenSettingsClass, DNForm_FlattenSettings>) end;

  //-------------namespace: Aspose.Pdf.Forms----------------
  DNIconFitClass = interface(DDN.mscorlib.DNObjectClass)
  ['{FA66ECD8-C5A9-5ADB-A921-6EC74227DF47}']
  { static methods } 

    {class} function NameToScalingReason(reason: string): DNScalingReason;
    {class} function ScalingReasonToName(reason: DNScalingReason): string;
    {class} function NameToScalingMode(mode: string): DNScalingMode;
    {class} function ScalingModeToName(mode: DNScalingMode): string;

  end;

  [DNTypeName('Aspose.Pdf.Forms.IconFit')]
  DNIconFit = interface(DDN.mscorlib.DNObject)
  ['{5906D387-60E9-3E91-9BA7-094DF0897FD8}']
  { getters & setters } 

    function get_ScalingReason: DNScalingReason;
    procedure set_ScalingReason(value: DNScalingReason);
    function get_ScalingMode: DNScalingMode;
    procedure set_ScalingMode(value: DNScalingMode);
    function get_LeftoverLeft: Double;
    procedure set_LeftoverLeft(value: Double);
    function get_LeftoverBottom: Double;
    procedure set_LeftoverBottom(value: Double);
    function get_SpreadOnBorder: Boolean;
    procedure set_SpreadOnBorder(value: Boolean);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property ScalingReason: DNScalingReason read get_ScalingReason write set_ScalingReason;
    property ScalingMode: DNScalingMode read get_ScalingMode write set_ScalingMode;
    property LeftoverLeft: Double read get_LeftoverLeft write set_LeftoverLeft;
    property LeftoverBottom: Double read get_LeftoverBottom write set_LeftoverBottom;
    property SpreadOnBorder: Boolean read get_SpreadOnBorder write set_SpreadOnBorder;
  end;

  TDNIconFit = class(TDNGenericImport<DNIconFitClass, DNIconFit>) end;

  //-------------namespace: Aspose.Pdf.Forms----------------
  DNOptionClass = interface(DDN.mscorlib.DNObjectClass)
  ['{8EEEC70F-0B95-5868-85E6-5B7ABE6B0F9E}']
  end;

  [DNTypeName('Aspose.Pdf.Forms.Option')]
  DNOption = interface(DDN.mscorlib.DNObject)
  ['{918F9843-5C29-317B-B9B7-99F08FD734B3}']
  { getters & setters } 

    function get_Value: string;
    procedure set_Value(value: string);
    function get_Name: string;
    procedure set_Name(value: string);
    function get_Selected: Boolean;
    procedure set_Selected(value: Boolean);
    function get_Index: Int32;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Value: string read get_Value write set_Value;
    property Name: string read get_Name write set_Name;
    property Selected: Boolean read get_Selected write set_Selected;
    property Index: Int32 read get_Index;
  end;

  TDNOption = class(TDNGenericImport<DNOptionClass, DNOption>) end;

  //-------------namespace: Aspose.Pdf.Forms----------------
  DNOptionCollectionClass = interface(DDN.mscorlib.DNObjectClass)
  ['{85EA307A-45F5-567F-A13E-10F0F7FC8F55}']
  end;

  [DNTypeName('Aspose.Pdf.Forms.OptionCollection')]
  DNOptionCollection = interface(DDN.mscorlib.DNObject)
  ['{38B06178-74EC-38A6-BB11-9665021AE982}']
  { getters & setters } 

    function get_IsSynchronized: Boolean;
    function get_IsReadOnly: Boolean;
    function get_SyncRoot: DDN.mscorlib.DNObject;
    function get_Count: Int32;
    function get_Item(index: Int32): DNOption; overload;
    function get_Item(name: string): DNOption; overload;

  { methods } 

    procedure CopyTo(&array: TArray<DNOption>; index: Int32);
    function GetEnumerator: DDN.mscorlib.DNIEnumerator<DNOption>;
    function get(index: Int32): DNOption; overload;
    function get(name: string): DNOption; overload;
    function &Contains(item: DNOption): Boolean;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property IsSynchronized: Boolean read get_IsSynchronized;
    property IsReadOnly: Boolean read get_IsReadOnly;
    property SyncRoot: DDN.mscorlib.DNObject read get_SyncRoot;
    property Count: Int32 read get_Count;
    property Item[index: Int32]: DNOption read get_Item; default;
    property Item[name: string]: DNOption read get_Item; default;
  end;

  TDNOptionCollection = class(TDNGenericImport<DNOptionCollectionClass, DNOptionCollection>) end;

  //-------------namespace: Aspose.Pdf.Forms----------------
  DNSignatureClass = interface(DDN.mscorlib.DNObjectClass)
  ['{DE388A9B-4C30-590B-A540-A057060119A0}']
  { constructors } 

    {class} function init: DNSignature; overload;
    {class} function init(pfx: string; password: string): DNSignature; overload;
    {class} function init(pfx: DDN.mscorlib.DNStream; password: string): DNSignature; overload;

  end;

  [DNTypeName('Aspose.Pdf.Forms.Signature')]
  DNSignature = interface(DDN.mscorlib.DNObject)
  ['{A5BD023F-5A24-3C37-A6D6-1936BBB466CC}']
  { getters & setters } 

    function get_CustomAppearance: DNSignatureCustomAppearance;
    procedure set_CustomAppearance(value: DNSignatureCustomAppearance);
    function get_Authority: string;
    procedure set_Authority(value: string);
    function get_Date: DDN.mscorlib.DNDateTime;
    procedure set_Date(value: DDN.mscorlib.DNDateTime);
    function get_Location: string;
    procedure set_Location(value: string);
    function get_Reason: string;
    procedure set_Reason(value: string);
    function get_ContactInfo: string;
    procedure set_ContactInfo(value: string);
    function get_ByteRange: TArray<Int32>;
    function get_TimestampSettings: DNTimestampSettings;
    procedure set_TimestampSettings(value: DNTimestampSettings);
    function get_OcspSettings: DNOcspSettings;
    procedure set_OcspSettings(value: DNOcspSettings);
    function get_UseLtv: Boolean;
    procedure set_UseLtv(value: Boolean);
    function get_ShowProperties: Boolean;
    procedure set_ShowProperties(value: Boolean);

  { methods } 

    function Verify: Boolean;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property CustomAppearance: DNSignatureCustomAppearance read get_CustomAppearance write set_CustomAppearance;
    property Authority: string read get_Authority write set_Authority;
    property Date: DDN.mscorlib.DNDateTime read get_Date write set_Date;
    property Location: string read get_Location write set_Location;
    property Reason: string read get_Reason write set_Reason;
    property ContactInfo: string read get_ContactInfo write set_ContactInfo;
    property ByteRange: TArray<Int32> read get_ByteRange;
    property TimestampSettings: DNTimestampSettings read get_TimestampSettings write set_TimestampSettings;
    property OcspSettings: DNOcspSettings read get_OcspSettings write set_OcspSettings;
    property UseLtv: Boolean read get_UseLtv write set_UseLtv;
    property ShowProperties: Boolean read get_ShowProperties write set_ShowProperties;
  end;

  TDNSignature = class(TDNGenericImport<DNSignatureClass, DNSignature>) end;

  //-------------namespace: Aspose.Pdf.Forms----------------
  DNExternalSignatureClass = interface(DNSignatureClass)
  ['{0C93614F-9A17-53F6-85A0-459F4FEAF4C8}']
  { constructors } 

    {class} function init(certificate: DDN.System.DNX509Certificate2): DNExternalSignature;

  end;

  [DNTypeName('Aspose.Pdf.Forms.ExternalSignature')]
  DNExternalSignature = interface(DNSignature)
  ['{C530770D-EBB6-31EA-A4C4-88C5EA70BCCA}']
  { getters & setters } 

    function get_Certificate: DDN.System.DNX509Certificate2;
    function get_CustomAppearance: DNSignatureCustomAppearance;
    procedure set_CustomAppearance(value: DNSignatureCustomAppearance);
    function get_Authority: string;
    procedure set_Authority(value: string);
    function get_Date: DDN.mscorlib.DNDateTime;
    procedure set_Date(value: DDN.mscorlib.DNDateTime);
    function get_Location: string;
    procedure set_Location(value: string);
    function get_Reason: string;
    procedure set_Reason(value: string);
    function get_ContactInfo: string;
    procedure set_ContactInfo(value: string);
    function get_ByteRange: TArray<Int32>;
    function get_TimestampSettings: DNTimestampSettings;
    procedure set_TimestampSettings(value: DNTimestampSettings);
    function get_OcspSettings: DNOcspSettings;
    procedure set_OcspSettings(value: DNOcspSettings);
    function get_UseLtv: Boolean;
    procedure set_UseLtv(value: Boolean);
    function get_ShowProperties: Boolean;
    procedure set_ShowProperties(value: Boolean);

  { methods } 

    function Verify: Boolean;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Certificate: DDN.System.DNX509Certificate2 read get_Certificate;
    property CustomAppearance: DNSignatureCustomAppearance read get_CustomAppearance write set_CustomAppearance;
    property Authority: string read get_Authority write set_Authority;
    property Date: DDN.mscorlib.DNDateTime read get_Date write set_Date;
    property Location: string read get_Location write set_Location;
    property Reason: string read get_Reason write set_Reason;
    property ContactInfo: string read get_ContactInfo write set_ContactInfo;
    property ByteRange: TArray<Int32> read get_ByteRange;
    property TimestampSettings: DNTimestampSettings read get_TimestampSettings write set_TimestampSettings;
    property OcspSettings: DNOcspSettings read get_OcspSettings write set_OcspSettings;
    property UseLtv: Boolean read get_UseLtv write set_UseLtv;
    property ShowProperties: Boolean read get_ShowProperties write set_ShowProperties;
  end;

  TDNExternalSignature = class(TDNGenericImport<DNExternalSignatureClass, DNExternalSignature>) end;

  //-------------namespace: Aspose.Pdf.Forms----------------
  DNPKCS1Class = interface(DNSignatureClass)
  ['{947EA730-B2EA-5B5C-9657-8ECC2AEB5BBD}']
  { constructors } 

    {class} function init(image: DDN.mscorlib.DNStream): DNPKCS1; overload;
    {class} function init: DNPKCS1; overload;
    {class} function init(pfx: string; password: string): DNPKCS1; overload;
    {class} function init(pfx: DDN.mscorlib.DNStream; password: string): DNPKCS1; overload;

  end;

  [DNTypeName('Aspose.Pdf.Forms.PKCS1')]
  DNPKCS1 = interface(DNSignature)
  ['{01BABA07-967F-360F-9D5F-5E7004451436}']
  { getters & setters } 

    function get_CustomAppearance: DNSignatureCustomAppearance;
    procedure set_CustomAppearance(value: DNSignatureCustomAppearance);
    function get_Authority: string;
    procedure set_Authority(value: string);
    function get_Date: DDN.mscorlib.DNDateTime;
    procedure set_Date(value: DDN.mscorlib.DNDateTime);
    function get_Location: string;
    procedure set_Location(value: string);
    function get_Reason: string;
    procedure set_Reason(value: string);
    function get_ContactInfo: string;
    procedure set_ContactInfo(value: string);
    function get_ByteRange: TArray<Int32>;
    function get_TimestampSettings: DNTimestampSettings;
    procedure set_TimestampSettings(value: DNTimestampSettings);
    function get_OcspSettings: DNOcspSettings;
    procedure set_OcspSettings(value: DNOcspSettings);
    function get_UseLtv: Boolean;
    procedure set_UseLtv(value: Boolean);
    function get_ShowProperties: Boolean;
    procedure set_ShowProperties(value: Boolean);

  { methods } 

    function Verify: Boolean;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property CustomAppearance: DNSignatureCustomAppearance read get_CustomAppearance write set_CustomAppearance;
    property Authority: string read get_Authority write set_Authority;
    property Date: DDN.mscorlib.DNDateTime read get_Date write set_Date;
    property Location: string read get_Location write set_Location;
    property Reason: string read get_Reason write set_Reason;
    property ContactInfo: string read get_ContactInfo write set_ContactInfo;
    property ByteRange: TArray<Int32> read get_ByteRange;
    property TimestampSettings: DNTimestampSettings read get_TimestampSettings write set_TimestampSettings;
    property OcspSettings: DNOcspSettings read get_OcspSettings write set_OcspSettings;
    property UseLtv: Boolean read get_UseLtv write set_UseLtv;
    property ShowProperties: Boolean read get_ShowProperties write set_ShowProperties;
  end;

  TDNPKCS1 = class(TDNGenericImport<DNPKCS1Class, DNPKCS1>) end;

  //-------------namespace: Aspose.Pdf.Forms----------------
  DNPKCS7Class = interface(DNSignatureClass)
  ['{69AB5E37-9B58-539A-9BFA-AB528791FBCC}']
  { constructors } 

    {class} function init: DNPKCS7; overload;
    {class} function init(pfx: string; password: string): DNPKCS7; overload;
    {class} function init(pfx: DDN.mscorlib.DNStream; password: string): DNPKCS7; overload;

  end;

  [DNTypeName('Aspose.Pdf.Forms.PKCS7')]
  DNPKCS7 = interface(DNSignature)
  ['{E350C33A-45F5-388E-96A0-C1185574C26A}']
  { getters & setters } 

    function get_CustomAppearance: DNSignatureCustomAppearance;
    procedure set_CustomAppearance(value: DNSignatureCustomAppearance);
    function get_Authority: string;
    procedure set_Authority(value: string);
    function get_Date: DDN.mscorlib.DNDateTime;
    procedure set_Date(value: DDN.mscorlib.DNDateTime);
    function get_Location: string;
    procedure set_Location(value: string);
    function get_Reason: string;
    procedure set_Reason(value: string);
    function get_ContactInfo: string;
    procedure set_ContactInfo(value: string);
    function get_ByteRange: TArray<Int32>;
    function get_TimestampSettings: DNTimestampSettings;
    procedure set_TimestampSettings(value: DNTimestampSettings);
    function get_OcspSettings: DNOcspSettings;
    procedure set_OcspSettings(value: DNOcspSettings);
    function get_UseLtv: Boolean;
    procedure set_UseLtv(value: Boolean);
    function get_ShowProperties: Boolean;
    procedure set_ShowProperties(value: Boolean);

  { methods } 

    function Verify: Boolean;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property CustomAppearance: DNSignatureCustomAppearance read get_CustomAppearance write set_CustomAppearance;
    property Authority: string read get_Authority write set_Authority;
    property Date: DDN.mscorlib.DNDateTime read get_Date write set_Date;
    property Location: string read get_Location write set_Location;
    property Reason: string read get_Reason write set_Reason;
    property ContactInfo: string read get_ContactInfo write set_ContactInfo;
    property ByteRange: TArray<Int32> read get_ByteRange;
    property TimestampSettings: DNTimestampSettings read get_TimestampSettings write set_TimestampSettings;
    property OcspSettings: DNOcspSettings read get_OcspSettings write set_OcspSettings;
    property UseLtv: Boolean read get_UseLtv write set_UseLtv;
    property ShowProperties: Boolean read get_ShowProperties write set_ShowProperties;
  end;

  TDNPKCS7 = class(TDNGenericImport<DNPKCS7Class, DNPKCS7>) end;

  //-------------namespace: Aspose.Pdf.Forms----------------
  DNPKCS7DetachedClass = interface(DNSignatureClass)
  ['{4940D1A7-E799-5F35-A09F-387F3005FEC3}']
  { constructors } 

    {class} function init(image: DDN.mscorlib.DNStream): DNPKCS7Detached; overload;
    {class} function init: DNPKCS7Detached; overload;
    {class} function init(pfx: string; password: string): DNPKCS7Detached; overload;
    {class} function init(pfx: DDN.mscorlib.DNStream; password: string): DNPKCS7Detached; overload;

  end;

  [DNTypeName('Aspose.Pdf.Forms.PKCS7Detached')]
  DNPKCS7Detached = interface(DNSignature)
  ['{EE0BF3CB-8DB4-324E-B9CD-E623637E22FE}']
  { getters & setters } 

    function get_CustomAppearance: DNSignatureCustomAppearance;
    procedure set_CustomAppearance(value: DNSignatureCustomAppearance);
    function get_Authority: string;
    procedure set_Authority(value: string);
    function get_Date: DDN.mscorlib.DNDateTime;
    procedure set_Date(value: DDN.mscorlib.DNDateTime);
    function get_Location: string;
    procedure set_Location(value: string);
    function get_Reason: string;
    procedure set_Reason(value: string);
    function get_ContactInfo: string;
    procedure set_ContactInfo(value: string);
    function get_ByteRange: TArray<Int32>;
    function get_TimestampSettings: DNTimestampSettings;
    procedure set_TimestampSettings(value: DNTimestampSettings);
    function get_OcspSettings: DNOcspSettings;
    procedure set_OcspSettings(value: DNOcspSettings);
    function get_UseLtv: Boolean;
    procedure set_UseLtv(value: Boolean);
    function get_ShowProperties: Boolean;
    procedure set_ShowProperties(value: Boolean);

  { methods } 

    function Verify: Boolean;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property CustomAppearance: DNSignatureCustomAppearance read get_CustomAppearance write set_CustomAppearance;
    property Authority: string read get_Authority write set_Authority;
    property Date: DDN.mscorlib.DNDateTime read get_Date write set_Date;
    property Location: string read get_Location write set_Location;
    property Reason: string read get_Reason write set_Reason;
    property ContactInfo: string read get_ContactInfo write set_ContactInfo;
    property ByteRange: TArray<Int32> read get_ByteRange;
    property TimestampSettings: DNTimestampSettings read get_TimestampSettings write set_TimestampSettings;
    property OcspSettings: DNOcspSettings read get_OcspSettings write set_OcspSettings;
    property UseLtv: Boolean read get_UseLtv write set_UseLtv;
    property ShowProperties: Boolean read get_ShowProperties write set_ShowProperties;
  end;

  TDNPKCS7Detached = class(TDNGenericImport<DNPKCS7DetachedClass, DNPKCS7Detached>) end;

  //-------------namespace: Aspose.Pdf.Forms----------------
  DNSignatureCustomAppearanceClass = interface(DDN.mscorlib.DNObjectClass)
  ['{E6CD01CC-CB0E-5CBC-8FFF-8F5ACB4F19E5}']
  { constructors } 

    {class} function init: DNSignatureCustomAppearance;

  end;

  [DNTypeName('Aspose.Pdf.Forms.SignatureCustomAppearance')]
  DNSignatureCustomAppearance = interface(DDN.mscorlib.DNObject)
  ['{37C7EE2D-5B8C-32DF-B135-485A0CE1F704}']
  { getters & setters } 

    function get_FontFamilyName: string;
    procedure set_FontFamilyName(value: string);
    function get_FontSize: Double;
    procedure set_FontSize(value: Double);
    function get_ShowContactInfo: Boolean;
    procedure set_ShowContactInfo(value: Boolean);
    function get_ShowReason: Boolean;
    procedure set_ShowReason(value: Boolean);
    function get_ShowLocation: Boolean;
    procedure set_ShowLocation(value: Boolean);
    function get_ContactInfoLabel: string;
    procedure set_ContactInfoLabel(value: string);
    function get_ReasonLabel: string;
    procedure set_ReasonLabel(value: string);
    function get_LocationLabel: string;
    procedure set_LocationLabel(value: string);
    function get_DigitalSignedLabel: string;
    procedure set_DigitalSignedLabel(value: string);
    function get_DateSignedAtLabel: string;
    procedure set_DateSignedAtLabel(value: string);
    function get_DateTimeLocalFormat: string;
    procedure set_DateTimeLocalFormat(value: string);
    function get_DateTimeFormat: string;
    procedure set_DateTimeFormat(value: string);
    function get_Culture: DDN.mscorlib.DNCultureInfo;
    procedure set_Culture(value: DDN.mscorlib.DNCultureInfo);
    function get_Rotation: DNRotation;
    procedure set_Rotation(value: DNRotation);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property FontFamilyName: string read get_FontFamilyName write set_FontFamilyName;
    property FontSize: Double read get_FontSize write set_FontSize;
    property ShowContactInfo: Boolean read get_ShowContactInfo write set_ShowContactInfo;
    property ShowReason: Boolean read get_ShowReason write set_ShowReason;
    property ShowLocation: Boolean read get_ShowLocation write set_ShowLocation;
    property ContactInfoLabel: string read get_ContactInfoLabel write set_ContactInfoLabel;
    property ReasonLabel: string read get_ReasonLabel write set_ReasonLabel;
    property LocationLabel: string read get_LocationLabel write set_LocationLabel;
    property DigitalSignedLabel: string read get_DigitalSignedLabel write set_DigitalSignedLabel;
    property DateSignedAtLabel: string read get_DateSignedAtLabel write set_DateSignedAtLabel;
    property DateTimeLocalFormat: string read get_DateTimeLocalFormat write set_DateTimeLocalFormat;
    property DateTimeFormat: string read get_DateTimeFormat write set_DateTimeFormat;
    property Culture: DDN.mscorlib.DNCultureInfo read get_Culture write set_Culture;
    property Rotation: DNRotation read get_Rotation write set_Rotation;
  end;

  TDNSignatureCustomAppearance = class(TDNGenericImport<DNSignatureCustomAppearanceClass, DNSignatureCustomAppearance>) end;

  //-------------namespace: Aspose.Pdf.Forms----------------
  DNXFAClass = interface(DDN.mscorlib.DNObjectClass)
  ['{AFC3B32F-19A3-5368-803A-7FB1130DD8FD}']
  end;

  [DNTypeName('Aspose.Pdf.Forms.XFA')]
  DNXFA = interface(DDN.mscorlib.DNObject)
  ['{B970AD9C-173F-3296-B1EF-1D69DD4C1B76}']
  { getters & setters } 

    function get_Template: DDN.System.Xml.DNXmlNode;
    function get_Form: DDN.System.Xml.DNXmlNode;
    function get_Datasets: DDN.System.Xml.DNXmlNode;
    function get_Config: DDN.System.Xml.DNXmlNode;
    function get_XDP: DDN.System.Xml.DNXmlDocument;
    function get_Item(path: string): string;
    procedure set_Item(path: string; value: string);
    function get_FieldNames: TArray<string>;
    function get_NamespaceManager: DDN.System.Xml.DNXmlNamespaceManager;

  { methods } 

    function GetFieldTemplate(fieldName: string): DDN.System.Xml.DNXmlNode;
    function GetFieldTemplates: DDN.System.Xml.DNXmlNodeList;
    procedure SetFieldImage(fieldName: string; image: DDN.mscorlib.DNStream);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Template: DDN.System.Xml.DNXmlNode read get_Template;
    property Form: DDN.System.Xml.DNXmlNode read get_Form;
    property Datasets: DDN.System.Xml.DNXmlNode read get_Datasets;
    property Config: DDN.System.Xml.DNXmlNode read get_Config;
    property XDP: DDN.System.Xml.DNXmlDocument read get_XDP;
    property Item[path: string]: string read get_Item write set_Item; default;
    property FieldNames: TArray<string> read get_FieldNames;
    property NamespaceManager: DDN.System.Xml.DNXmlNamespaceManager read get_NamespaceManager;
  end;

  TDNXFA = class(TDNGenericImport<DNXFAClass, DNXFA>) end;

  //-------------namespace: Aspose.Pdf----------------
  DNGraphInfoClass = interface(DNObjectClass)
  ['{5521ADE5-8E02-5DE2-A472-0563BF9300CC}']
  { constructors } 

    {class} function init: DNGraphInfo;

  end;

  [DNTypeName('Aspose.Pdf.GraphInfo')]
  DNGraphInfo = interface(DDN.mscorlib.DNICloneable)
  ['{18EE8A02-CBEA-370A-9FA9-F2AE4A826032}']
  { getters & setters } 

    function get_LineWidth: Single;
    procedure set_LineWidth(value: Single);
    function get_Color: DNColor;
    procedure set_Color(value: DNColor);
    function get_DashArray: TArray<Int32>;
    procedure set_DashArray(value: TArray<Int32>);
    function get_DashPhase: Int32;
    procedure set_DashPhase(value: Int32);
    function get_FillColor: DNColor;
    procedure set_FillColor(value: DNColor);
    function get_IsDoubled: Boolean;
    procedure set_IsDoubled(value: Boolean);
    function get_SkewAngleX: Double;
    procedure set_SkewAngleX(value: Double);
    function get_SkewAngleY: Double;
    procedure set_SkewAngleY(value: Double);
    function get_ScalingRateX: Double;
    procedure set_ScalingRateX(value: Double);
    function get_ScalingRateY: Double;
    procedure set_ScalingRateY(value: Double);
    function get_RotationAngle: Double;
    procedure set_RotationAngle(value: Double);

  { methods } 

    function Clone: DDN.mscorlib.DNObject;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property LineWidth: Single read get_LineWidth write set_LineWidth;
    property Color: DNColor read get_Color write set_Color;
    property DashArray: TArray<Int32> read get_DashArray write set_DashArray;
    property DashPhase: Int32 read get_DashPhase write set_DashPhase;
    property FillColor: DNColor read get_FillColor write set_FillColor;
    property IsDoubled: Boolean read get_IsDoubled write set_IsDoubled;
    property SkewAngleX: Double read get_SkewAngleX write set_SkewAngleX;
    property SkewAngleY: Double read get_SkewAngleY write set_SkewAngleY;
    property ScalingRateX: Double read get_ScalingRateX write set_ScalingRateX;
    property ScalingRateY: Double read get_ScalingRateY write set_ScalingRateY;
    property RotationAngle: Double read get_RotationAngle write set_RotationAngle;
  end;

  TDNGraphInfo = class(TDNGenericImport<DNGraphInfoClass, DNGraphInfo>) end;

  //-------------namespace: Aspose.Pdf----------------
  DNGroupClass = interface(DDN.mscorlib.DNObjectClass)
  ['{03C67147-74FE-5097-844E-0A7590D9ADF2}']
  { constructors } 

    {class} function init(page: DNPage): DNGroup;

  end;

  [DNTypeName('Aspose.Pdf.Group')]
  DNGroup = interface(DDN.mscorlib.DNObject)
  ['{6948A1E2-7995-3C9A-B90A-19EE916C0CF2}']
  { getters & setters } 

    function get_ColorSpace: DNColorSpace;
    procedure set_ColorSpace(value: DNColorSpace);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property ColorSpace: DNColorSpace read get_ColorSpace write set_ColorSpace;
  end;

  TDNGroup = class(TDNGenericImport<DNGroupClass, DNGroup>) end;

  //-------------namespace: Aspose.Pdf.GroupProcessor.Creators----------------
  DNPdfTypeObjectCreatorClass = interface(DDN.mscorlib.DNObjectClass)
  ['{B1F66B73-08EC-5CFA-BC80-E2A4BB317064}']
  { constructors } 

    {class} function init: DNPdfTypeObjectCreator;

  end;

  [DNTypeName('Aspose.Pdf.GroupProcessor.Creators.PdfTypeObjectCreator')]
  DNPdfTypeObjectCreator = interface(DDN.mscorlib.DNObject)
  ['{91935953-8B68-3D49-84F5-A66E68FA7499}']
  { methods } 

    function CreateExtractor(pdfDocumentPath: string; bufferSize: Int32; allowAsyncInitialization: Boolean): DNIPdfTypeExtractor; overload;
    function CreateExtractor(pdfDocumentStream: DDN.mscorlib.DNStream; bufferSize: Int32; allowAsyncInitialization: Boolean): DNIPdfTypeExtractor; overload;
    function CreateExtractor(pdfDocumentPath: string; password: string; bufferSize: Int32; allowAsyncInitialization: Boolean): DNIPdfTypeExtractor; overload;
    function CreateExtractor(pdfDocumentStream: DDN.mscorlib.DNStream; password: string; bufferSize: Int32; allowAsyncInitialization: Boolean): DNIPdfTypeExtractor; overload;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNPdfTypeObjectCreator = class(TDNGenericImport<DNPdfTypeObjectCreatorClass, DNPdfTypeObjectCreator>) end;

  //-------------namespace: Aspose.Pdf.GroupProcessor----------------
  DNExtractorFactoryClass = interface(DDN.mscorlib.DNObjectClass)
  ['{3345DA14-D0C8-5F6E-B959-06544216479B}']
  { static fields getter & setter } 

   function __fakeFieldGet_Pdf: DNPdfTypeObjectCreator;

  { static fields } 

    {class} property Pdf: DNPdfTypeObjectCreator read __fakeFieldGet_Pdf;

  end;

  [DNTypeName('Aspose.Pdf.GroupProcessor.ExtractorFactory')]
  DNExtractorFactory = interface(DDN.mscorlib.DNObject)
  ['{3C88B792-A17B-3983-8028-52BB0C1BAEBC}']
  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNExtractorFactory = class(TDNGenericImport<DNExtractorFactoryClass, DNExtractorFactory>) end;

  //-------------namespace: Aspose.Pdf----------------
  DNHeaderFooterClass = interface(DNObjectClass)
  ['{3921EA80-FDA0-531A-ADEC-0DFB1A10AFE4}']
  { constructors } 

    {class} function init: DNHeaderFooter;

  end;

  [DNTypeName('Aspose.Pdf.HeaderFooter')]
  DNHeaderFooter = interface(DDN.mscorlib.DNICloneable)
  ['{ABEFA196-6483-326D-9288-4906CA76886A}']
  { getters & setters } 

    function get_Paragraphs: DNParagraphs;
    procedure set_Paragraphs(value: DNParagraphs);
    function get_Margin: DNMarginInfo;
    procedure set_Margin(value: DNMarginInfo);

  { methods } 

    function Clone: DDN.mscorlib.DNObject;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Paragraphs: DNParagraphs read get_Paragraphs write set_Paragraphs;
    property Margin: DNMarginInfo read get_Margin write set_Margin;
  end;

  TDNHeaderFooter = class(TDNGenericImport<DNHeaderFooterClass, DNHeaderFooter>) end;

  //-------------namespace: Aspose.Pdf----------------
  DNHtmlSaveOptions_CssSavingInfoClass = interface(DDN.mscorlib.DNObjectClass)
  ['{72DC24B1-B523-5E14-B672-B19EE4BB20CB}']
  end;

  [DNTypeName('Aspose.Pdf.HtmlSaveOptions+CssSavingInfo')]
  DNHtmlSaveOptions_CssSavingInfo = interface(DDN.mscorlib.DNObject)
  ['{5E4F6452-8317-34F8-89E0-6F1D8F7F5993}']
  { fields getter & setter } 

   function __fakeFieldGet_CssNumber: Int32;
   procedure __fakeFieldSet_CssNumber(value: Int32);
   function __fakeFieldGet_SupposedURL: string;
   procedure __fakeFieldSet_SupposedURL(value: string);
   function __fakeFieldGet_ContentStream: DDN.mscorlib.DNStream;
   procedure __fakeFieldSet_ContentStream(value: DDN.mscorlib.DNStream);

  { fields } 

   property CssNumber: Int32 read __fakeFieldGet_CssNumber write __fakeFieldSet_CssNumber;
   property SupposedURL: string read __fakeFieldGet_SupposedURL write __fakeFieldSet_SupposedURL;
   property ContentStream: DDN.mscorlib.DNStream read __fakeFieldGet_ContentStream write __fakeFieldSet_ContentStream;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNHtmlSaveOptions_CssSavingInfo = class(TDNGenericImport<DNHtmlSaveOptions_CssSavingInfoClass, DNHtmlSaveOptions_CssSavingInfo>) end;

  //-------------namespace: Aspose.Pdf----------------
  DNHtmlSaveOptions_CssUrlRequestInfoClass = interface(DDN.mscorlib.DNObjectClass)
  ['{5118CDF4-3A3D-57B0-9DEF-0BD583FCC075}']
  { constructors } 

    {class} function init: DNHtmlSaveOptions_CssUrlRequestInfo;

  end;

  [DNTypeName('Aspose.Pdf.HtmlSaveOptions+CssUrlRequestInfo')]
  DNHtmlSaveOptions_CssUrlRequestInfo = interface(DDN.mscorlib.DNObject)
  ['{214C94A4-346A-38E1-B9E5-5EFDCE5D19DB}']
  { fields getter & setter } 

   function __fakeFieldGet_CustomProcessingCancelled: Boolean;
   procedure __fakeFieldSet_CustomProcessingCancelled(value: Boolean);

  { fields } 

   property CustomProcessingCancelled: Boolean read __fakeFieldGet_CustomProcessingCancelled write __fakeFieldSet_CustomProcessingCancelled;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNHtmlSaveOptions_CssUrlRequestInfo = class(TDNGenericImport<DNHtmlSaveOptions_CssUrlRequestInfoClass, DNHtmlSaveOptions_CssUrlRequestInfo>) end;

  //-------------namespace: Aspose.Pdf----------------
  DNHtmlSaveOptions_HtmlPageMarkupSavingInfoClass = interface(DDN.mscorlib.DNObjectClass)
  ['{5C770B00-7317-5090-B881-2A640FC74B7E}']
  end;

  [DNTypeName('Aspose.Pdf.HtmlSaveOptions+HtmlPageMarkupSavingInfo')]
  DNHtmlSaveOptions_HtmlPageMarkupSavingInfo = interface(DDN.mscorlib.DNObject)
  ['{8C596EA6-637E-34D9-8B2B-C951B269D6EE}']
  { fields getter & setter } 

   function __fakeFieldGet_SupposedFileName: string;
   procedure __fakeFieldSet_SupposedFileName(value: string);
   function __fakeFieldGet_ContentStream: DDN.mscorlib.DNStream;
   procedure __fakeFieldSet_ContentStream(value: DDN.mscorlib.DNStream);
   function __fakeFieldGet_PdfHostPageNumber: Int32;
   procedure __fakeFieldSet_PdfHostPageNumber(value: Int32);
   function __fakeFieldGet_HtmlHostPageNumber: Int32;
   procedure __fakeFieldSet_HtmlHostPageNumber(value: Int32);
   function __fakeFieldGet_CustomProcessingCancelled: Boolean;
   procedure __fakeFieldSet_CustomProcessingCancelled(value: Boolean);

  { fields } 

   property SupposedFileName: string read __fakeFieldGet_SupposedFileName write __fakeFieldSet_SupposedFileName;
   property ContentStream: DDN.mscorlib.DNStream read __fakeFieldGet_ContentStream write __fakeFieldSet_ContentStream;
   property PdfHostPageNumber: Int32 read __fakeFieldGet_PdfHostPageNumber write __fakeFieldSet_PdfHostPageNumber;
   property HtmlHostPageNumber: Int32 read __fakeFieldGet_HtmlHostPageNumber write __fakeFieldSet_HtmlHostPageNumber;
   property CustomProcessingCancelled: Boolean read __fakeFieldGet_CustomProcessingCancelled write __fakeFieldSet_CustomProcessingCancelled;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNHtmlSaveOptions_HtmlPageMarkupSavingInfo = class(TDNGenericImport<DNHtmlSaveOptions_HtmlPageMarkupSavingInfoClass, DNHtmlSaveOptions_HtmlPageMarkupSavingInfo>) end;

  //-------------namespace: Aspose.Pdf----------------
  DNHyperlinkClass = interface(DDN.mscorlib.DNObjectClass)
  ['{EB54F11F-9E3D-5DD0-AEC4-9D7E011969CC}']
  end;

  [DNTypeName('Aspose.Pdf.Hyperlink')]
  DNHyperlink = interface(DDN.mscorlib.DNObject)
  ['{3489BCAB-E9E4-30D6-9EF0-7D812B4845F7}']
  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNHyperlink = class(TDNGenericImport<DNHyperlinkClass, DNHyperlink>) end;

  //-------------namespace: Aspose.Pdf----------------
  DNFileHyperlinkClass = interface(DNHyperlinkClass)
  ['{AFC78057-AD3D-563A-983D-EF7AA7015846}']
  { constructors } 

    {class} function init: DNFileHyperlink; overload;
    {class} function init(path: string): DNFileHyperlink; overload;

  end;

  [DNTypeName('Aspose.Pdf.FileHyperlink')]
  DNFileHyperlink = interface(DNHyperlink)
  ['{F84192DC-8811-33A1-9469-574E06FF26EE}']
  { getters & setters } 

    function get_Path: string;
    procedure set_Path(value: string);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Path: string read get_Path write set_Path;
  end;

  TDNFileHyperlink = class(TDNGenericImport<DNFileHyperlinkClass, DNFileHyperlink>) end;

  //-------------namespace: Aspose.Pdf----------------
  DNLocalHyperlinkClass = interface(DNHyperlinkClass)
  ['{C9C05C14-7334-5D01-A545-0A981E0F7490}']
  { constructors } 

    {class} function init: DNLocalHyperlink; overload;
    {class} function init(target: DNBaseParagraph): DNLocalHyperlink; overload;

  end;

  [DNTypeName('Aspose.Pdf.LocalHyperlink')]
  DNLocalHyperlink = interface(DNHyperlink)
  ['{C1B5BADB-05B5-38C1-A7F8-8CB00ED47C70}']
  { getters & setters } 

    function get_Target: DNBaseParagraph;
    procedure set_Target(value: DNBaseParagraph);
    function get_TargetPageNumber: Int32;
    procedure set_TargetPageNumber(value: Int32);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Target: DNBaseParagraph read get_Target write set_Target;
    property TargetPageNumber: Int32 read get_TargetPageNumber write set_TargetPageNumber;
  end;

  TDNLocalHyperlink = class(TDNGenericImport<DNLocalHyperlinkClass, DNLocalHyperlink>) end;

  //-------------namespace: Aspose.Pdf----------------
  DNWebHyperlinkClass = interface(DNHyperlinkClass)
  ['{F70680F0-56AA-5B04-8EFB-595159A74FEC}']
  { constructors } 

    {class} function init: DNWebHyperlink; overload;
    {class} function init(url: string): DNWebHyperlink; overload;

  end;

  [DNTypeName('Aspose.Pdf.WebHyperlink')]
  DNWebHyperlink = interface(DNHyperlink)
  ['{A807DE09-3818-3B7B-A409-B2DF1AA8E93C}']
  { getters & setters } 

    function get_Url: string;
    procedure set_Url(value: string);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Url: string read get_Url write set_Url;
  end;

  TDNWebHyperlink = class(TDNGenericImport<DNWebHyperlinkClass, DNWebHyperlink>) end;

  //-------------namespace: Aspose.Pdf----------------
  DNPdf_IdClass = interface(DDN.mscorlib.DNObjectClass)
  ['{C7F0B337-F146-59BE-95E9-33A08058118B}']
  end;

  [DNTypeName('Aspose.Pdf.Id')]
  DNPdf_Id = interface(DDN.mscorlib.DNObject)
  ['{E3E1F23B-9E80-37D2-A984-17F68DDF507F}']
  { getters & setters } 

    function get_Original: string;
    function get_Modified: string;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Original: string read get_Original;
    property Modified: string read get_Modified;
  end;

  TDNPdf_Id = class(TDNGenericImport<DNPdf_IdClass, DNPdf_Id>) end;

  //-------------namespace: Aspose.Pdf----------------
  DNImagePlacementClass = interface(DDN.mscorlib.DNObjectClass)
  ['{EDCC213F-B58B-57CA-855C-16F137E39968}']
  end;

  [DNTypeName('Aspose.Pdf.ImagePlacement')]
  DNImagePlacement = interface(DDN.mscorlib.DNObject)
  ['{3722B15A-CA58-3351-A5DE-E30B5FC29063}']
  { getters & setters } 

    function get_Matrix: DNMatrix;
    function get_Rectangle: DNPdf_Rectangle;
    function get_Operator: DNOperator;
    function get_Rotation: Single;
    function get_Resolution: DNResolution;
    function get_Image: DNXImage;
    function get_Page: DNPage;
    function get_CompositingParameters: DNCompositingParameters;

  { methods } 

    procedure Hide;
    procedure Replace(image: DDN.mscorlib.DNStream);
    procedure Save(stream: DDN.mscorlib.DNStream); overload;
    procedure Save(stream: DDN.mscorlib.DNStream; format: DDN.System.Drawing.DNImageFormat); overload;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Matrix: DNMatrix read get_Matrix;
    property Rectangle: DNPdf_Rectangle read get_Rectangle;
    property Operator: DNOperator read get_Operator;
    property Rotation: Single read get_Rotation;
    property Resolution: DNResolution read get_Resolution;
    property Image: DNXImage read get_Image;
    property Page: DNPage read get_Page;
    property CompositingParameters: DNCompositingParameters read get_CompositingParameters;
  end;

  TDNImagePlacement = class(TDNGenericImport<DNImagePlacementClass, DNImagePlacement>) end;

  //-------------namespace: Aspose.Pdf----------------
  DNImagePlacementAbsorberClass = interface(DDN.mscorlib.DNObjectClass)
  ['{4E64AD0E-F4F7-5F6E-802F-24D49E276CB3}']
  { constructors } 

    {class} function init: DNImagePlacementAbsorber;

  end;

  [DNTypeName('Aspose.Pdf.ImagePlacementAbsorber')]
  DNImagePlacementAbsorber = interface(DDN.mscorlib.DNObject)
  ['{1B9F9D54-F094-3377-A9FB-606EF7520C1E}']
  { getters & setters } 

    function get_IsReadOnlyMode: Boolean;
    procedure set_IsReadOnlyMode(value: Boolean);
    function get_ImagePlacements: DNImagePlacementCollection;

  { methods } 

    procedure Visit(page: DNPage); overload;
    procedure Visit(pdf: DNDocument); overload;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property IsReadOnlyMode: Boolean read get_IsReadOnlyMode write set_IsReadOnlyMode;
    property ImagePlacements: DNImagePlacementCollection read get_ImagePlacements;
  end;

  TDNImagePlacementAbsorber = class(TDNGenericImport<DNImagePlacementAbsorberClass, DNImagePlacementAbsorber>) end;

  //-------------namespace: Aspose.Pdf----------------
  DNImagePlacementCollectionClass = interface(DDN.mscorlib.DNObjectClass)
  ['{8A42C69A-A938-5A3D-9123-B6AC8B8B127B}']
  end;

  [DNTypeName('Aspose.Pdf.ImagePlacementCollection')]
  DNImagePlacementCollection = interface(DDN.mscorlib.DNObject)
  ['{BAD61262-98EB-3957-ABAC-86171A3B8B83}']
  { getters & setters } 

    function get_Count: Int32;
    function get_SyncRoot: DDN.mscorlib.DNObject;
    function get_IsSynchronized: Boolean;
    function get_IsReadOnly: Boolean;
    function get_Item(index: Int32): DNImagePlacement;

  { methods } 

    function GetEnumerator: DDN.mscorlib.DNIEnumerator<DNImagePlacement>;
    procedure CopyTo(&array: TArray<DNImagePlacement>; index: Int32);
    function &Contains(item: DNImagePlacement): Boolean;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Count: Int32 read get_Count;
    property SyncRoot: DDN.mscorlib.DNObject read get_SyncRoot;
    property IsSynchronized: Boolean read get_IsSynchronized;
    property IsReadOnly: Boolean read get_IsReadOnly;
    property Item[index: Int32]: DNImagePlacement read get_Item; default;
  end;

  TDNImagePlacementCollection = class(TDNGenericImport<DNImagePlacementCollectionClass, DNImagePlacementCollection>) end;

  //-------------namespace: Aspose.Pdf----------------
  DNImportOptionsClass = interface(DDN.mscorlib.DNObjectClass)
  ['{CDCF122F-90BF-5EF2-86BF-D126FB4257B9}']
  end;

  [DNTypeName('Aspose.Pdf.ImportOptions')]
  DNImportOptions = interface(DDN.mscorlib.DNObject)
  ['{DDBDB031-AA31-30CE-ABE9-DACD79FC48FD}']
  { getters & setters } 

    function get_ImportFormat: DNImportFormat;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property ImportFormat: DNImportFormat read get_ImportFormat;
  end;

  TDNImportOptions = class(TDNGenericImport<DNImportOptionsClass, DNImportOptions>) end;

  //-------------namespace: Aspose.Pdf----------------
  DNCgmImportOptionsClass = interface(DNImportOptionsClass)
  ['{9B4ED48B-D671-588B-B63E-C43D3BE7B032}']
  { constructors } 

    {class} function init: DNCgmImportOptions;

  end;

  [DNTypeName('Aspose.Pdf.CgmImportOptions')]
  DNCgmImportOptions = interface(DNImportOptions)
  ['{1BF5023C-F574-3987-93E1-40136AF711A9}']
  { getters & setters } 

    function get_PageSize: DDN.System.Drawing.DNSizeF;
    procedure set_PageSize(value: DDN.System.Drawing.DNSizeF);
    function get_ImportFormat: DNImportFormat;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property PageSize: DDN.System.Drawing.DNSizeF read get_PageSize write set_PageSize;
    property ImportFormat: DNImportFormat read get_ImportFormat;
  end;

  TDNCgmImportOptions = class(TDNGenericImport<DNCgmImportOptionsClass, DNCgmImportOptions>) end;

  //-------------namespace: Aspose.Pdf----------------
  DNJavaScriptCollectionClass = interface(DDN.mscorlib.DNObjectClass)
  ['{67E26453-BB0F-5F1A-BDF8-DF4A26552FC3}']
  end;

  [DNTypeName('Aspose.Pdf.JavaScriptCollection')]
  DNJavaScriptCollection = interface(DDN.mscorlib.DNObject)
  ['{01FB5D50-E71F-3877-8F6D-2C4255E66234}']
  { getters & setters } 

    function get_Keys: DDN.mscorlib.DNIList<string>;
    function get_Item(key: string): string;
    procedure set_Item(key: string; value: string);

  { methods } 

    function Remove(key: string): Boolean;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Keys: DDN.mscorlib.DNIList<string> read get_Keys;
    property Item[key: string]: string read get_Item write set_Item; default;
  end;

  TDNJavaScriptCollection = class(TDNGenericImport<DNJavaScriptCollectionClass, DNJavaScriptCollection>) end;

  //-------------namespace: Aspose.Pdf----------------
  DNLayerClass = interface(DDN.mscorlib.DNObjectClass)
  ['{B376310D-C04B-5C04-BF61-96F6773A5CD0}']
  { constructors } 

    {class} function init(id: string; name: string): DNLayer;

  end;

  [DNTypeName('Aspose.Pdf.Layer')]
  DNLayer = interface(DDN.mscorlib.DNObject)
  ['{D0BA5031-552E-3D73-949B-39A54690C9A1}']
  { getters & setters } 

    function get_Name: string;
    function get_Id: string;
    function get_Contents: DDN.mscorlib.DNList<DNOperator>;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Name: string read get_Name;
    property Id: string read get_Id;
    property Contents: DDN.mscorlib.DNList<DNOperator> read get_Contents;
  end;

  TDNLayer = class(TDNGenericImport<DNLayerClass, DNLayer>) end;

  //-------------namespace: Aspose.Pdf----------------
  DNLevelFormatClass = interface(DDN.mscorlib.DNObjectClass)
  ['{27AACD25-8898-5661-843C-1AB43DE9AB56}']
  { constructors } 

    {class} function init: DNLevelFormat;

  end;

  [DNTypeName('Aspose.Pdf.LevelFormat')]
  DNLevelFormat = interface(DDN.mscorlib.DNObject)
  ['{01FB895F-F382-3180-9943-64583AB3E335}']
  { getters & setters } 

    function get_LineDash: DNTabLeaderType;
    procedure set_LineDash(value: DNTabLeaderType);
    function get_Margin: DNMarginInfo;
    procedure set_Margin(value: DNMarginInfo);
    function get_SubsequentLinesIndent: Single;
    procedure set_SubsequentLinesIndent(value: Single);
    function get_TextState: DNTextState;
    procedure set_TextState(value: DNTextState);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property LineDash: DNTabLeaderType read get_LineDash write set_LineDash;
    property Margin: DNMarginInfo read get_Margin write set_Margin;
    property SubsequentLinesIndent: Single read get_SubsequentLinesIndent write set_SubsequentLinesIndent;
    property TextState: DNTextState read get_TextState write set_TextState;
  end;

  TDNLevelFormat = class(TDNGenericImport<DNLevelFormatClass, DNLevelFormat>) end;

  //-------------namespace: Aspose.Pdf----------------
  DNLicenseClass = interface(DDN.mscorlib.DNObjectClass)
  ['{71F0AFC9-2067-5981-8039-2F7055DC37AE}']
  { constructors } 

    {class} function init: DNLicense;

  end;

  [DNTypeName('Aspose.Pdf.License')]
  DNLicense = interface(DDN.mscorlib.DNObject)
  ['{F06307FC-3DFF-3D9B-864E-DFA83169187E}']
  { getters & setters } 

    function get_Embedded: Boolean;
    procedure set_Embedded(value: Boolean);

  { methods } 

    procedure SetLicense(licenseName: string); overload;
    procedure SetLicense(stream: DDN.mscorlib.DNStream); overload;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Embedded: Boolean read get_Embedded write set_Embedded;
  end;

  TDNLicense = class(TDNGenericImport<DNLicenseClass, DNLicense>) end;

  //-------------namespace: Aspose.Pdf----------------
  DNLoadOptionsClass = interface(DDN.mscorlib.DNObjectClass)
  ['{A58114AF-CEED-5F4A-B1DA-8882A4BB2B14}']
  end;

  [DNTypeName('Aspose.Pdf.LoadOptions')]
  DNLoadOptions = interface(DDN.mscorlib.DNObject)
  ['{2D8E3243-F106-31B2-9A87-352B97A99BF3}']
  { getters & setters } 

    function get_WarningHandler: DNIWarningCallback;
    procedure set_WarningHandler(value: DNIWarningCallback);
    function get_LoadFormat: DNLoadFormat;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property WarningHandler: DNIWarningCallback read get_WarningHandler write set_WarningHandler;
    property LoadFormat: DNLoadFormat read get_LoadFormat;
  end;

  TDNLoadOptions = class(TDNGenericImport<DNLoadOptionsClass, DNLoadOptions>) end;

  //-------------namespace: Aspose.Pdf----------------
  DNApsLoadOptionsClass = interface(DNLoadOptionsClass)
  ['{C62515F1-41B7-5898-95D2-213B7C340656}']
  { constructors } 

    {class} function init: DNApsLoadOptions;

  end;

  [DNTypeName('Aspose.Pdf.ApsLoadOptions')]
  DNApsLoadOptions = interface(DNLoadOptions)
  ['{8C6E5D8E-9CB3-347C-ADB5-DB2AA1E98C5F}']
  { getters & setters } 

    function get_WarningHandler: DNIWarningCallback;
    procedure set_WarningHandler(value: DNIWarningCallback);
    function get_LoadFormat: DNLoadFormat;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property WarningHandler: DNIWarningCallback read get_WarningHandler write set_WarningHandler;
    property LoadFormat: DNLoadFormat read get_LoadFormat;
  end;

  TDNApsLoadOptions = class(TDNGenericImport<DNApsLoadOptionsClass, DNApsLoadOptions>) end;

  //-------------namespace: Aspose.Pdf----------------
  DNCgmLoadOptionsClass = interface(DNLoadOptionsClass)
  ['{5EF86121-9187-5F28-B968-63D0811F971F}']
  { constructors } 

    {class} function init: DNCgmLoadOptions; overload;
    {class} function init(pageSize: DDN.System.Drawing.DNSizeF): DNCgmLoadOptions; overload;

  end;

  [DNTypeName('Aspose.Pdf.CgmLoadOptions')]
  DNCgmLoadOptions = interface(DNLoadOptions)
  ['{290B5E9B-D30E-3C40-A733-1663E5245E90}']
  { getters & setters } 

    function get_PageSize: DDN.System.Drawing.DNSizeF;
    function get_WarningHandler: DNIWarningCallback;
    procedure set_WarningHandler(value: DNIWarningCallback);
    function get_LoadFormat: DNLoadFormat;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property PageSize: DDN.System.Drawing.DNSizeF read get_PageSize;
    property WarningHandler: DNIWarningCallback read get_WarningHandler write set_WarningHandler;
    property LoadFormat: DNLoadFormat read get_LoadFormat;
  end;

  TDNCgmLoadOptions = class(TDNGenericImport<DNCgmLoadOptionsClass, DNCgmLoadOptions>) end;

  //-------------namespace: Aspose.Pdf----------------
  DNEpubLoadOptionsClass = interface(DNLoadOptionsClass)
  ['{8878B506-8AA2-53F6-9EFE-340766A92CD1}']
  { constructors } 

    {class} function init: DNEpubLoadOptions; overload;
    {class} function init(pageSize: DDN.System.Drawing.DNSizeF): DNEpubLoadOptions; overload;

  end;

  [DNTypeName('Aspose.Pdf.EpubLoadOptions')]
  DNEpubLoadOptions = interface(DNLoadOptions)
  ['{1FBDBF5A-CBC9-36A5-A8C1-49EF4317192E}']
  { getters & setters } 

    function get_PageSize: DDN.System.Drawing.DNSizeF;
    function get_Margin: DNMarginInfo;
    procedure set_Margin(value: DNMarginInfo);
    function get_WarningHandler: DNIWarningCallback;
    procedure set_WarningHandler(value: DNIWarningCallback);
    function get_LoadFormat: DNLoadFormat;

  { fields getter & setter } 

   function __fakeFieldGet_MarginsAreaUsageMode: DNLoadOptions_MarginsAreaUsageModes;
   procedure __fakeFieldSet_MarginsAreaUsageMode(value: DNLoadOptions_MarginsAreaUsageModes);
   function __fakeFieldGet_PageSizeAdjustmentMode: DNLoadOptions_PageSizeAdjustmentModes;
   procedure __fakeFieldSet_PageSizeAdjustmentMode(value: DNLoadOptions_PageSizeAdjustmentModes);

  { fields } 

   property MarginsAreaUsageMode: DNLoadOptions_MarginsAreaUsageModes read __fakeFieldGet_MarginsAreaUsageMode write __fakeFieldSet_MarginsAreaUsageMode;
   property PageSizeAdjustmentMode: DNLoadOptions_PageSizeAdjustmentModes read __fakeFieldGet_PageSizeAdjustmentMode write __fakeFieldSet_PageSizeAdjustmentMode;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property PageSize: DDN.System.Drawing.DNSizeF read get_PageSize;
    property Margin: DNMarginInfo read get_Margin write set_Margin;
    property WarningHandler: DNIWarningCallback read get_WarningHandler write set_WarningHandler;
    property LoadFormat: DNLoadFormat read get_LoadFormat;
  end;

  TDNEpubLoadOptions = class(TDNGenericImport<DNEpubLoadOptionsClass, DNEpubLoadOptions>) end;

  //-------------namespace: Aspose.Pdf----------------
  DNHtmlLoadOptionsClass = interface(DNLoadOptionsClass)
  ['{AF9BCB17-B902-5693-8A36-563159F17471}']
  { constructors } 

    {class} function init: DNHtmlLoadOptions; overload;
    {class} function init(basePath: string): DNHtmlLoadOptions; overload;

  end;

  [DNTypeName('Aspose.Pdf.HtmlLoadOptions')]
  DNHtmlLoadOptions = interface(DNLoadOptions)
  ['{E41B39B8-C880-3A0B-8169-F3D49E9ECDE3}']
  { getters & setters } 

    function get_IsRenderToSinglePage: Boolean;
    procedure set_IsRenderToSinglePage(value: Boolean);
    function get_IsEmbedFonts: Boolean;
    procedure set_IsEmbedFonts(value: Boolean);
    function get_HtmlMediaType: DNHtmlMediaType;
    procedure set_HtmlMediaType(value: DNHtmlMediaType);
    function get_InputEncoding: string;
    procedure set_InputEncoding(value: string);
    function get_BasePath: string;
    function get_PageInfo: DNPageInfo;
    procedure set_PageInfo(value: DNPageInfo);
    function get_WarningHandler: DNIWarningCallback;
    procedure set_WarningHandler(value: DNIWarningCallback);
    function get_LoadFormat: DNLoadFormat;

  { fields getter & setter } 

   function __fakeFieldGet_ExternalResourcesCredentials: DDN.System.DNICredentials;
   procedure __fakeFieldSet_ExternalResourcesCredentials(value: DDN.System.DNICredentials);
   function __fakeFieldGet_CustomLoaderOfExternalResources: DNLoadOptions_ResourceLoadingStrategy;
   procedure __fakeFieldSet_CustomLoaderOfExternalResources(value: DNLoadOptions_ResourceLoadingStrategy);

  { fields } 

   property ExternalResourcesCredentials: DDN.System.DNICredentials read __fakeFieldGet_ExternalResourcesCredentials write __fakeFieldSet_ExternalResourcesCredentials;
   property CustomLoaderOfExternalResources: DNLoadOptions_ResourceLoadingStrategy read __fakeFieldGet_CustomLoaderOfExternalResources write __fakeFieldSet_CustomLoaderOfExternalResources;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property IsRenderToSinglePage: Boolean read get_IsRenderToSinglePage write set_IsRenderToSinglePage;
    property IsEmbedFonts: Boolean read get_IsEmbedFonts write set_IsEmbedFonts;
    property HtmlMediaType: DNHtmlMediaType read get_HtmlMediaType write set_HtmlMediaType;
    property InputEncoding: string read get_InputEncoding write set_InputEncoding;
    property BasePath: string read get_BasePath;
    property PageInfo: DNPageInfo read get_PageInfo write set_PageInfo;
    property WarningHandler: DNIWarningCallback read get_WarningHandler write set_WarningHandler;
    property LoadFormat: DNLoadFormat read get_LoadFormat;
  end;

  TDNHtmlLoadOptions = class(TDNGenericImport<DNHtmlLoadOptionsClass, DNHtmlLoadOptions>) end;

  //-------------namespace: Aspose.Pdf----------------
  DNMdLoadOptionsClass = interface(DNLoadOptionsClass)
  ['{2B80C303-5B80-5E23-B05A-78EFF710C08E}']
  { constructors } 

    {class} function init: DNMdLoadOptions;

  end;

  [DNTypeName('Aspose.Pdf.MdLoadOptions')]
  DNMdLoadOptions = interface(DNLoadOptions)
  ['{4E7142EE-49BB-350C-BF04-138F3490A26B}']
  { getters & setters } 

    function get_WarningHandler: DNIWarningCallback;
    procedure set_WarningHandler(value: DNIWarningCallback);
    function get_LoadFormat: DNLoadFormat;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property WarningHandler: DNIWarningCallback read get_WarningHandler write set_WarningHandler;
    property LoadFormat: DNLoadFormat read get_LoadFormat;
  end;

  TDNMdLoadOptions = class(TDNGenericImport<DNMdLoadOptionsClass, DNMdLoadOptions>) end;

  //-------------namespace: Aspose.Pdf----------------
  DNMhtLoadOptionsClass = interface(DNLoadOptionsClass)
  ['{1E5B292D-DF29-5BC9-9BC9-F9F1329D6AA6}']
  { constructors } 

    {class} function init: DNMhtLoadOptions;

  end;

  [DNTypeName('Aspose.Pdf.MhtLoadOptions')]
  DNMhtLoadOptions = interface(DNLoadOptions)
  ['{D6C11438-321E-3E5E-A4B7-5D6B08D36705}']
  { getters & setters } 

    function get_PageInfo: DNPageInfo;
    function get_WarningHandler: DNIWarningCallback;
    procedure set_WarningHandler(value: DNIWarningCallback);
    function get_LoadFormat: DNLoadFormat;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property PageInfo: DNPageInfo read get_PageInfo;
    property WarningHandler: DNIWarningCallback read get_WarningHandler write set_WarningHandler;
    property LoadFormat: DNLoadFormat read get_LoadFormat;
  end;

  TDNMhtLoadOptions = class(TDNGenericImport<DNMhtLoadOptionsClass, DNMhtLoadOptions>) end;

  //-------------namespace: Aspose.Pdf----------------
  DNPclLoadOptionsClass = interface(DNLoadOptionsClass)
  ['{360D5812-BC00-5344-8244-D1A898CE5801}']
  { constructors } 

    {class} function init: DNPclLoadOptions;

  end;

  [DNTypeName('Aspose.Pdf.PclLoadOptions')]
  DNPclLoadOptions = interface(DNLoadOptions)
  ['{1C17EA84-4C9D-3C22-BC44-00EA6123B3C4}']
  { getters & setters } 

    function get_BatchSize: Int32;
    procedure set_BatchSize(value: Int32);
    function get_WarningHandler: DNIWarningCallback;
    procedure set_WarningHandler(value: DNIWarningCallback);
    function get_LoadFormat: DNLoadFormat;

  { fields getter & setter } 

   function __fakeFieldGet_ConversionEngine: DNPclLoadOptions_ConversionEngines;
   procedure __fakeFieldSet_ConversionEngine(value: DNPclLoadOptions_ConversionEngines);
   function __fakeFieldGet_SupressErrors: Boolean;
   procedure __fakeFieldSet_SupressErrors(value: Boolean);
   function __fakeFieldGet_Exceptions: DDN.mscorlib.DNIList<DDN.mscorlib.DNException>;
   procedure __fakeFieldSet_Exceptions(value: DDN.mscorlib.DNIList<DDN.mscorlib.DNException>);

  { fields } 

   property ConversionEngine: DNPclLoadOptions_ConversionEngines read __fakeFieldGet_ConversionEngine write __fakeFieldSet_ConversionEngine;
   property SupressErrors: Boolean read __fakeFieldGet_SupressErrors write __fakeFieldSet_SupressErrors;
   property Exceptions: DDN.mscorlib.DNIList<DDN.mscorlib.DNException> read __fakeFieldGet_Exceptions write __fakeFieldSet_Exceptions;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property BatchSize: Int32 read get_BatchSize write set_BatchSize;
    property WarningHandler: DNIWarningCallback read get_WarningHandler write set_WarningHandler;
    property LoadFormat: DNLoadFormat read get_LoadFormat;
  end;

  TDNPclLoadOptions = class(TDNGenericImport<DNPclLoadOptionsClass, DNPclLoadOptions>) end;

  //-------------namespace: Aspose.Pdf----------------
  DNPdfXmlLoadOptionsClass = interface(DNLoadOptionsClass)
  ['{90C8FBE3-9E05-5D30-B933-CE52CF69090C}']
  { constructors } 

    {class} function init: DNPdfXmlLoadOptions;

  end;

  [DNTypeName('Aspose.Pdf.PdfXmlLoadOptions')]
  DNPdfXmlLoadOptions = interface(DNLoadOptions)
  ['{4455C715-A3C3-3640-9ACB-330CC0A4F245}']
  { getters & setters } 

    function get_WarningHandler: DNIWarningCallback;
    procedure set_WarningHandler(value: DNIWarningCallback);
    function get_LoadFormat: DNLoadFormat;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property WarningHandler: DNIWarningCallback read get_WarningHandler write set_WarningHandler;
    property LoadFormat: DNLoadFormat read get_LoadFormat;
  end;

  TDNPdfXmlLoadOptions = class(TDNGenericImport<DNPdfXmlLoadOptionsClass, DNPdfXmlLoadOptions>) end;

  //-------------namespace: Aspose.Pdf----------------
  DNPsLoadOptionsClass = interface(DNLoadOptionsClass)
  ['{1EB8D6E9-14F4-50C3-814F-C081C5E138F5}']
  { constructors } 

    {class} function init: DNPsLoadOptions;

  end;

  [DNTypeName('Aspose.Pdf.PsLoadOptions')]
  DNPsLoadOptions = interface(DNLoadOptions)
  ['{6BB61908-C8C8-3F68-AFFA-EBACEDF30AC8}']
  { getters & setters } 

    function get_FontsFolders: TArray<string>;
    procedure set_FontsFolders(value: TArray<string>);
    function get_WarningHandler: DNIWarningCallback;
    procedure set_WarningHandler(value: DNIWarningCallback);
    function get_LoadFormat: DNLoadFormat;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property FontsFolders: TArray<string> read get_FontsFolders write set_FontsFolders;
    property WarningHandler: DNIWarningCallback read get_WarningHandler write set_WarningHandler;
    property LoadFormat: DNLoadFormat read get_LoadFormat;
  end;

  TDNPsLoadOptions = class(TDNGenericImport<DNPsLoadOptionsClass, DNPsLoadOptions>) end;

  //-------------namespace: Aspose.Pdf----------------
  DNSvgLoadOptionsClass = interface(DNLoadOptionsClass)
  ['{8E8266E1-BC84-5A06-A067-84EDCEAA50A7}']
  { constructors } 

    {class} function init: DNSvgLoadOptions;

  end;

  [DNTypeName('Aspose.Pdf.SvgLoadOptions')]
  DNSvgLoadOptions = interface(DNLoadOptions)
  ['{FB7FBB46-016F-31A6-9400-36A088486D7C}']
  { getters & setters } 

    function get_PageInfo: DNPageInfo;
    procedure set_PageInfo(value: DNPageInfo);
    function get_AdjustPageSize: Boolean;
    procedure set_AdjustPageSize(value: Boolean);
    function get_WarningHandler: DNIWarningCallback;
    procedure set_WarningHandler(value: DNIWarningCallback);
    function get_LoadFormat: DNLoadFormat;

  { fields getter & setter } 

   function __fakeFieldGet_ConversionEngine: DNSvgLoadOptions_ConversionEngines;
   procedure __fakeFieldSet_ConversionEngine(value: DNSvgLoadOptions_ConversionEngines);

  { fields } 

   property ConversionEngine: DNSvgLoadOptions_ConversionEngines read __fakeFieldGet_ConversionEngine write __fakeFieldSet_ConversionEngine;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property PageInfo: DNPageInfo read get_PageInfo write set_PageInfo;
    property AdjustPageSize: Boolean read get_AdjustPageSize write set_AdjustPageSize;
    property WarningHandler: DNIWarningCallback read get_WarningHandler write set_WarningHandler;
    property LoadFormat: DNLoadFormat read get_LoadFormat;
  end;

  TDNSvgLoadOptions = class(TDNGenericImport<DNSvgLoadOptionsClass, DNSvgLoadOptions>) end;

  //-------------namespace: Aspose.Pdf----------------
  DNTeXLoadOptionsClass = interface(DNLoadOptionsClass)
  ['{8017A97C-607F-5115-A9A4-83496EED73DA}']
  { constructors } 

    {class} function init: DNTeXLoadOptions;

  end;

  [DNTypeName('Aspose.Pdf.TeXLoadOptions')]
  DNTeXLoadOptions = interface(DNLoadOptions)
  ['{93B981BB-6914-3EF7-80F6-4744F084C8C2}']
  { getters & setters } 

    function get_TextFontName: string;
    procedure set_TextFontName(value: string);
    function get_ResourceLoadingCallback: DNIResourceLoadingCallback;
    procedure set_ResourceLoadingCallback(value: DNIResourceLoadingCallback);
    function get_WarningCallback: DNIWarningCallback;
    procedure set_WarningCallback(value: DNIWarningCallback);
    function get_MathFontName: string;
    procedure set_MathFontName(value: string);
    function get_SpecSymbolsFontName: string;
    procedure set_SpecSymbolsFontName(value: string);
    function get_UseTempFile: Boolean;
    procedure set_UseTempFile(value: Boolean);
    function get_WarningHandler: DNIWarningCallback;
    procedure set_WarningHandler(value: DNIWarningCallback);
    function get_LoadFormat: DNLoadFormat;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property TextFontName: string read get_TextFontName write set_TextFontName;
    property ResourceLoadingCallback: DNIResourceLoadingCallback read get_ResourceLoadingCallback write set_ResourceLoadingCallback;
    property WarningCallback: DNIWarningCallback read get_WarningCallback write set_WarningCallback;
    property MathFontName: string read get_MathFontName write set_MathFontName;
    property SpecSymbolsFontName: string read get_SpecSymbolsFontName write set_SpecSymbolsFontName;
    property UseTempFile: Boolean read get_UseTempFile write set_UseTempFile;
    property WarningHandler: DNIWarningCallback read get_WarningHandler write set_WarningHandler;
    property LoadFormat: DNLoadFormat read get_LoadFormat;
  end;

  TDNTeXLoadOptions = class(TDNGenericImport<DNTeXLoadOptionsClass, DNTeXLoadOptions>) end;

  //-------------namespace: Aspose.Pdf----------------
  DNLatexLoadOptionsClass = interface(DNTeXLoadOptionsClass)
  ['{182D45B5-9FCD-5446-9013-FA4AAF3AA3BB}']
  { constructors } 

    {class} function init: DNLatexLoadOptions;

  end;

  [DNTypeName('Aspose.Pdf.LatexLoadOptions')]
  DNLatexLoadOptions = interface(DNTeXLoadOptions)
  ['{66B43D44-F7FE-3D14-BE69-DF6D35D0925C}']
  { getters & setters } 

    function get_TextFontName: string;
    procedure set_TextFontName(value: string);
    function get_ResourceLoadingCallback: DNIResourceLoadingCallback;
    procedure set_ResourceLoadingCallback(value: DNIResourceLoadingCallback);
    function get_WarningCallback: DNIWarningCallback;
    procedure set_WarningCallback(value: DNIWarningCallback);
    function get_MathFontName: string;
    procedure set_MathFontName(value: string);
    function get_SpecSymbolsFontName: string;
    procedure set_SpecSymbolsFontName(value: string);
    function get_UseTempFile: Boolean;
    procedure set_UseTempFile(value: Boolean);
    function get_WarningHandler: DNIWarningCallback;
    procedure set_WarningHandler(value: DNIWarningCallback);
    function get_LoadFormat: DNLoadFormat;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property TextFontName: string read get_TextFontName write set_TextFontName;
    property ResourceLoadingCallback: DNIResourceLoadingCallback read get_ResourceLoadingCallback write set_ResourceLoadingCallback;
    property WarningCallback: DNIWarningCallback read get_WarningCallback write set_WarningCallback;
    property MathFontName: string read get_MathFontName write set_MathFontName;
    property SpecSymbolsFontName: string read get_SpecSymbolsFontName write set_SpecSymbolsFontName;
    property UseTempFile: Boolean read get_UseTempFile write set_UseTempFile;
    property WarningHandler: DNIWarningCallback read get_WarningHandler write set_WarningHandler;
    property LoadFormat: DNLoadFormat read get_LoadFormat;
  end;

  TDNLatexLoadOptions = class(TDNGenericImport<DNLatexLoadOptionsClass, DNLatexLoadOptions>) end;

  //-------------namespace: Aspose.Pdf----------------
  DNTxtLoadOptionsClass = interface(DNLoadOptionsClass)
  ['{950DAFA4-3D27-5A0E-87B4-EB9FFB8906CC}']
  { constructors } 

    {class} function init: DNTxtLoadOptions;

  end;

  [DNTypeName('Aspose.Pdf.TxtLoadOptions')]
  DNTxtLoadOptions = interface(DNLoadOptions)
  ['{191558D2-2FDD-30ED-8E4D-ACE2A7E4A293}']
  { getters & setters } 

    function get_WarningHandler: DNIWarningCallback;
    procedure set_WarningHandler(value: DNIWarningCallback);
    function get_LoadFormat: DNLoadFormat;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property WarningHandler: DNIWarningCallback read get_WarningHandler write set_WarningHandler;
    property LoadFormat: DNLoadFormat read get_LoadFormat;
  end;

  TDNTxtLoadOptions = class(TDNGenericImport<DNTxtLoadOptionsClass, DNTxtLoadOptions>) end;

  //-------------namespace: Aspose.Pdf----------------
  DNXmlLoadOptionsClass = interface(DNLoadOptionsClass)
  ['{614C0970-C105-51B2-B2E9-B541924DBA09}']
  { constructors } 

    {class} function init: DNXmlLoadOptions; overload;
    {class} function init(xslFile: string): DNXmlLoadOptions; overload;
    {class} function init(xslStream: DDN.mscorlib.DNStream): DNXmlLoadOptions; overload;

  end;

  [DNTypeName('Aspose.Pdf.XmlLoadOptions')]
  DNXmlLoadOptions = interface(DNLoadOptions)
  ['{97E3986A-BFF4-3833-8ADA-A72AFC18A14C}']
  { getters & setters } 

    function get_XslStream: DDN.mscorlib.DNStream;
    function get_WarningHandler: DNIWarningCallback;
    procedure set_WarningHandler(value: DNIWarningCallback);
    function get_LoadFormat: DNLoadFormat;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property XslStream: DDN.mscorlib.DNStream read get_XslStream;
    property WarningHandler: DNIWarningCallback read get_WarningHandler write set_WarningHandler;
    property LoadFormat: DNLoadFormat read get_LoadFormat;
  end;

  TDNXmlLoadOptions = class(TDNGenericImport<DNXmlLoadOptionsClass, DNXmlLoadOptions>) end;

  //-------------namespace: Aspose.Pdf----------------
  DNXslFoLoadOptionsClass = interface(DNXmlLoadOptionsClass)
  ['{6C842E81-296A-532E-B3B4-53D19DC4185E}']
  { constructors } 

    {class} function init: DNXslFoLoadOptions; overload;
    {class} function init(xslFile: string): DNXslFoLoadOptions; overload;
    {class} function init(xslStream: DDN.mscorlib.DNStream): DNXslFoLoadOptions; overload;

  end;

  [DNTypeName('Aspose.Pdf.XslFoLoadOptions')]
  DNXslFoLoadOptions = interface(DNXmlLoadOptions)
  ['{E1AA36C7-FC25-3691-A95F-0ED4CFF7EB47}']
  { getters & setters } 

    function get_BasePath: string;
    procedure set_BasePath(value: string);
    function get_XslStream: DDN.mscorlib.DNStream;
    function get_WarningHandler: DNIWarningCallback;
    procedure set_WarningHandler(value: DNIWarningCallback);
    function get_LoadFormat: DNLoadFormat;

  { fields getter & setter } 

   function __fakeFieldGet_ParsingErrorsHandlingType: DNXslFoLoadOptions_ParsingErrorsHandlingTypes;
   procedure __fakeFieldSet_ParsingErrorsHandlingType(value: DNXslFoLoadOptions_ParsingErrorsHandlingTypes);

  { fields } 

   property ParsingErrorsHandlingType: DNXslFoLoadOptions_ParsingErrorsHandlingTypes read __fakeFieldGet_ParsingErrorsHandlingType write __fakeFieldSet_ParsingErrorsHandlingType;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property BasePath: string read get_BasePath write set_BasePath;
    property XslStream: DDN.mscorlib.DNStream read get_XslStream;
    property WarningHandler: DNIWarningCallback read get_WarningHandler write set_WarningHandler;
    property LoadFormat: DNLoadFormat read get_LoadFormat;
  end;

  TDNXslFoLoadOptions = class(TDNGenericImport<DNXslFoLoadOptionsClass, DNXslFoLoadOptions>) end;

  //-------------namespace: Aspose.Pdf----------------
  DNXpsLoadOptionsClass = interface(DNLoadOptionsClass)
  ['{1246D3C0-4305-50F7-8437-5FF491CEE5B6}']
  { constructors } 

    {class} function init: DNXpsLoadOptions;

  end;

  [DNTypeName('Aspose.Pdf.XpsLoadOptions')]
  DNXpsLoadOptions = interface(DNLoadOptions)
  ['{98888D41-A779-3241-9466-E17057B99D63}']
  { getters & setters } 

    function get_BatchSize: Int32;
    procedure set_BatchSize(value: Int32);
    function get_WarningHandler: DNIWarningCallback;
    procedure set_WarningHandler(value: DNIWarningCallback);
    function get_LoadFormat: DNLoadFormat;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property BatchSize: Int32 read get_BatchSize write set_BatchSize;
    property WarningHandler: DNIWarningCallback read get_WarningHandler write set_WarningHandler;
    property LoadFormat: DNLoadFormat read get_LoadFormat;
  end;

  TDNXpsLoadOptions = class(TDNGenericImport<DNXpsLoadOptionsClass, DNXpsLoadOptions>) end;

  //-------------namespace: Aspose.Pdf----------------
  DNLoadOptions_ResourceLoadingResultClass = interface(DDN.mscorlib.DNObjectClass)
  ['{5FB4E4F9-0097-5A36-B000-96F2E8F4FFB9}']
  { constructors } 

    {class} function init(data: TArray<Byte>): DNLoadOptions_ResourceLoadingResult;

  end;

  [DNTypeName('Aspose.Pdf.LoadOptions+ResourceLoadingResult')]
  DNLoadOptions_ResourceLoadingResult = interface(DDN.mscorlib.DNObject)
  ['{7F768365-7DE9-3004-8F9B-AB34F885F193}']
  { getters & setters } 

    function get_Data: TArray<Byte>;

  { fields getter & setter } 

   function __fakeFieldGet_EncodingIfKnown: DDN.mscorlib.DNEncoding;
   procedure __fakeFieldSet_EncodingIfKnown(value: DDN.mscorlib.DNEncoding);
   function __fakeFieldGet_ExceptionOfLoadingIfAny: DDN.mscorlib.DNException;
   procedure __fakeFieldSet_ExceptionOfLoadingIfAny(value: DDN.mscorlib.DNException);
   function __fakeFieldGet_MIMETypeIfKnown: string;
   procedure __fakeFieldSet_MIMETypeIfKnown(value: string);
   function __fakeFieldGet_LoadingCancelled: Boolean;
   procedure __fakeFieldSet_LoadingCancelled(value: Boolean);

  { fields } 

   property EncodingIfKnown: DDN.mscorlib.DNEncoding read __fakeFieldGet_EncodingIfKnown write __fakeFieldSet_EncodingIfKnown;
   property ExceptionOfLoadingIfAny: DDN.mscorlib.DNException read __fakeFieldGet_ExceptionOfLoadingIfAny write __fakeFieldSet_ExceptionOfLoadingIfAny;
   property MIMETypeIfKnown: string read __fakeFieldGet_MIMETypeIfKnown write __fakeFieldSet_MIMETypeIfKnown;
   property LoadingCancelled: Boolean read __fakeFieldGet_LoadingCancelled write __fakeFieldSet_LoadingCancelled;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Data: TArray<Byte> read get_Data;
  end;

  TDNLoadOptions_ResourceLoadingResult = class(TDNGenericImport<DNLoadOptions_ResourceLoadingResultClass, DNLoadOptions_ResourceLoadingResult>) end;

  //-------------namespace: Aspose.Pdf.LogicalStructure----------------
  DNAttributeKeyClass = interface(DDN.mscorlib.DNObjectClass)
  ['{4B3510AC-2B45-5481-9D83-B315E727E2AD}']
  { static fields getter & setter } 

   function __fakeFieldGet_Placement: DNAttributeKey;
   function __fakeFieldGet_WritingMode: DNAttributeKey;
   function __fakeFieldGet_BackgroundColor: DNAttributeKey;
   function __fakeFieldGet_BorderColor: DNAttributeKey;
   function __fakeFieldGet_BorderStyle: DNAttributeKey;
   function __fakeFieldGet_BorderThickness: DNAttributeKey;
   function __fakeFieldGet_Padding: DNAttributeKey;
   function __fakeFieldGet_Color: DNAttributeKey;
   function __fakeFieldGet_SpaceBefore: DNAttributeKey;
   function __fakeFieldGet_SpaceAfter: DNAttributeKey;
   function __fakeFieldGet_StartIndent: DNAttributeKey;
   function __fakeFieldGet_EndIndent: DNAttributeKey;
   function __fakeFieldGet_TextIndent: DNAttributeKey;
   function __fakeFieldGet_TextAlign: DNAttributeKey;
   function __fakeFieldGet_BBox: DNAttributeKey;
   function __fakeFieldGet_Width: DNAttributeKey;
   function __fakeFieldGet_Height: DNAttributeKey;
   function __fakeFieldGet_BlockAlign: DNAttributeKey;
   function __fakeFieldGet_InlineAlign: DNAttributeKey;
   function __fakeFieldGet_TBorderStyle: DNAttributeKey;
   function __fakeFieldGet_TPadding: DNAttributeKey;
   function __fakeFieldGet_BaselineShift: DNAttributeKey;
   function __fakeFieldGet_LineHeight: DNAttributeKey;
   function __fakeFieldGet_TextDecorationColor: DNAttributeKey;
   function __fakeFieldGet_TextDecorationThickness: DNAttributeKey;
   function __fakeFieldGet_TextDecorationType: DNAttributeKey;
   function __fakeFieldGet_RubyAlign: DNAttributeKey;
   function __fakeFieldGet_RubyPosition: DNAttributeKey;
   function __fakeFieldGet_GlyphOrientationVertical: DNAttributeKey;
   function __fakeFieldGet_ColumnCount: DNAttributeKey;
   function __fakeFieldGet_ColumnGap: DNAttributeKey;
   function __fakeFieldGet_ColumnWidths: DNAttributeKey;
   function __fakeFieldGet_ListNumbering: DNAttributeKey;
   function __fakeFieldGet_Role: DNAttributeKey;
   function __fakeFieldGet_Checked: DNAttributeKey;
   function __fakeFieldGet_Desc: DNAttributeKey;
   function __fakeFieldGet_RowSpan: DNAttributeKey;
   function __fakeFieldGet_ColSpan: DNAttributeKey;
   function __fakeFieldGet_Headers: DNAttributeKey;
   function __fakeFieldGet_Scope: DNAttributeKey;
   function __fakeFieldGet_Summary: DNAttributeKey;

  { static fields } 

    {class} property Placement: DNAttributeKey read __fakeFieldGet_Placement;
    {class} property WritingMode: DNAttributeKey read __fakeFieldGet_WritingMode;
    {class} property BackgroundColor: DNAttributeKey read __fakeFieldGet_BackgroundColor;
    {class} property BorderColor: DNAttributeKey read __fakeFieldGet_BorderColor;
    {class} property BorderStyle: DNAttributeKey read __fakeFieldGet_BorderStyle;
    {class} property BorderThickness: DNAttributeKey read __fakeFieldGet_BorderThickness;
    {class} property Padding: DNAttributeKey read __fakeFieldGet_Padding;
    {class} property Color: DNAttributeKey read __fakeFieldGet_Color;
    {class} property SpaceBefore: DNAttributeKey read __fakeFieldGet_SpaceBefore;
    {class} property SpaceAfter: DNAttributeKey read __fakeFieldGet_SpaceAfter;
    {class} property StartIndent: DNAttributeKey read __fakeFieldGet_StartIndent;
    {class} property EndIndent: DNAttributeKey read __fakeFieldGet_EndIndent;
    {class} property TextIndent: DNAttributeKey read __fakeFieldGet_TextIndent;
    {class} property TextAlign: DNAttributeKey read __fakeFieldGet_TextAlign;
    {class} property BBox: DNAttributeKey read __fakeFieldGet_BBox;
    {class} property Width: DNAttributeKey read __fakeFieldGet_Width;
    {class} property Height: DNAttributeKey read __fakeFieldGet_Height;
    {class} property BlockAlign: DNAttributeKey read __fakeFieldGet_BlockAlign;
    {class} property InlineAlign: DNAttributeKey read __fakeFieldGet_InlineAlign;
    {class} property TBorderStyle: DNAttributeKey read __fakeFieldGet_TBorderStyle;
    {class} property TPadding: DNAttributeKey read __fakeFieldGet_TPadding;
    {class} property BaselineShift: DNAttributeKey read __fakeFieldGet_BaselineShift;
    {class} property LineHeight: DNAttributeKey read __fakeFieldGet_LineHeight;
    {class} property TextDecorationColor: DNAttributeKey read __fakeFieldGet_TextDecorationColor;
    {class} property TextDecorationThickness: DNAttributeKey read __fakeFieldGet_TextDecorationThickness;
    {class} property TextDecorationType: DNAttributeKey read __fakeFieldGet_TextDecorationType;
    {class} property RubyAlign: DNAttributeKey read __fakeFieldGet_RubyAlign;
    {class} property RubyPosition: DNAttributeKey read __fakeFieldGet_RubyPosition;
    {class} property GlyphOrientationVertical: DNAttributeKey read __fakeFieldGet_GlyphOrientationVertical;
    {class} property ColumnCount: DNAttributeKey read __fakeFieldGet_ColumnCount;
    {class} property ColumnGap: DNAttributeKey read __fakeFieldGet_ColumnGap;
    {class} property ColumnWidths: DNAttributeKey read __fakeFieldGet_ColumnWidths;
    {class} property ListNumbering: DNAttributeKey read __fakeFieldGet_ListNumbering;
    {class} property Role: DNAttributeKey read __fakeFieldGet_Role;
    {class} property Checked: DNAttributeKey read __fakeFieldGet_Checked;
    {class} property Desc: DNAttributeKey read __fakeFieldGet_Desc;
    {class} property RowSpan: DNAttributeKey read __fakeFieldGet_RowSpan;
    {class} property ColSpan: DNAttributeKey read __fakeFieldGet_ColSpan;
    {class} property Headers: DNAttributeKey read __fakeFieldGet_Headers;
    {class} property Scope: DNAttributeKey read __fakeFieldGet_Scope;
    {class} property Summary: DNAttributeKey read __fakeFieldGet_Summary;

  end;

  [DNTypeName('Aspose.Pdf.LogicalStructure.AttributeKey')]
  DNAttributeKey = interface(DDN.mscorlib.DNObject)
  ['{EA85FD7B-94BC-34E3-8858-D0C968D5A8A7}']
  { getters & setters } 

    function get_Key: string;
    function get_Owner: DNAttributeOwnerStandard;

  { methods } 

    function ToString: string;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    property Key: string read get_Key;
    property Owner: DNAttributeOwnerStandard read get_Owner;
  end;

  TDNAttributeKey = class(TDNGenericImport<DNAttributeKeyClass, DNAttributeKey>) end;

  //-------------namespace: Aspose.Pdf.LogicalStructure----------------
  DNAttributeNameClass = interface(DDN.mscorlib.DNObjectClass)
  ['{71AE72FC-2B25-5278-955B-E42BF618380B}']
  { static fields getter & setter } 

   function __fakeFieldGet_Placement_Block: DNAttributeName;
   function __fakeFieldGet_Placement_Inline: DNAttributeName;
   function __fakeFieldGet_Placement_Before: DNAttributeName;
   function __fakeFieldGet_Placement_Start: DNAttributeName;
   function __fakeFieldGet_Placement_End: DNAttributeName;
   function __fakeFieldGet_WritingMode_LrTb: DNAttributeName;
   function __fakeFieldGet_WritingMode_RlTb: DNAttributeName;
   function __fakeFieldGet_WritingMode_TbRl: DNAttributeName;
   function __fakeFieldGet_BorderStyle_None: DNAttributeName;
   function __fakeFieldGet_BorderStyle_Hidden: DNAttributeName;
   function __fakeFieldGet_BorderStyle_Dotted: DNAttributeName;
   function __fakeFieldGet_BorderStyle_Dashed: DNAttributeName;
   function __fakeFieldGet_BorderStyle_Solid: DNAttributeName;
   function __fakeFieldGet_BorderStyle_Double: DNAttributeName;
   function __fakeFieldGet_BorderStyle_Groove: DNAttributeName;
   function __fakeFieldGet_BorderStyle_Ridge: DNAttributeName;
   function __fakeFieldGet_BorderStyle_Inset: DNAttributeName;
   function __fakeFieldGet_BorderStyle_Outset: DNAttributeName;
   function __fakeFieldGet_TextAlign_Start: DNAttributeName;
   function __fakeFieldGet_TextAlign_Center: DNAttributeName;
   function __fakeFieldGet_TextAlign_End: DNAttributeName;
   function __fakeFieldGet_TextAlign_Justify: DNAttributeName;
   function __fakeFieldGet_Width_Auto: DNAttributeName;
   function __fakeFieldGet_Height_Auto: DNAttributeName;
   function __fakeFieldGet_BlockAlign_Before: DNAttributeName;
   function __fakeFieldGet_BlockAlign_Middle: DNAttributeName;
   function __fakeFieldGet_BlockAlign_After: DNAttributeName;
   function __fakeFieldGet_BlockAlign_Justify: DNAttributeName;
   function __fakeFieldGet_InlineAlign_Start: DNAttributeName;
   function __fakeFieldGet_InlineAlign_Center: DNAttributeName;
   function __fakeFieldGet_InlineAlign_End: DNAttributeName;
   function __fakeFieldGet_LineHeight_Normal: DNAttributeName;
   function __fakeFieldGet_LineHeight_Auto: DNAttributeName;
   function __fakeFieldGet_TextDecorationType_None: DNAttributeName;
   function __fakeFieldGet_TextDecorationType_Underline: DNAttributeName;
   function __fakeFieldGet_TextDecorationType_Overline: DNAttributeName;
   function __fakeFieldGet_TextDecorationType_LineThrough: DNAttributeName;
   function __fakeFieldGet_RubyAlign_Start: DNAttributeName;
   function __fakeFieldGet_RubyAlign_Center: DNAttributeName;
   function __fakeFieldGet_RubyAlign_End: DNAttributeName;
   function __fakeFieldGet_RubyAlign_Justify: DNAttributeName;
   function __fakeFieldGet_RubyAlign_Distribute: DNAttributeName;
   function __fakeFieldGet_RubyPosition_Before: DNAttributeName;
   function __fakeFieldGet_RubyPosition_After: DNAttributeName;
   function __fakeFieldGet_RubyPosition_Warichu: DNAttributeName;
   function __fakeFieldGet_RubyPosition_Inline: DNAttributeName;
   function __fakeFieldGet_GlyphOrientationVertical_Auto: DNAttributeName;
   function __fakeFieldGet_ListNumbering_None: DNAttributeName;
   function __fakeFieldGet_ListNumbering_Disc: DNAttributeName;
   function __fakeFieldGet_ListNumbering_Circle: DNAttributeName;
   function __fakeFieldGet_ListNumbering_Square: DNAttributeName;
   function __fakeFieldGet_ListNumbering_Decimal: DNAttributeName;
   function __fakeFieldGet_ListNumbering_UpperRoman: DNAttributeName;
   function __fakeFieldGet_ListNumbering_LowerRoman: DNAttributeName;
   function __fakeFieldGet_ListNumbering_UpperAlpha: DNAttributeName;
   function __fakeFieldGet_ListNumbering_LowerAlpha: DNAttributeName;
   function __fakeFieldGet_Role_rb: DNAttributeName;
   function __fakeFieldGet_Role_cb: DNAttributeName;
   function __fakeFieldGet_Role_pb: DNAttributeName;
   function __fakeFieldGet_Role_tv: DNAttributeName;
   function __fakeFieldGet_Checked_on: DNAttributeName;
   function __fakeFieldGet_Checked_off: DNAttributeName;
   function __fakeFieldGet_Checked_neutral: DNAttributeName;
   function __fakeFieldGet_Scope_Row: DNAttributeName;
   function __fakeFieldGet_Scope_Column: DNAttributeName;
   function __fakeFieldGet_Scope_Both: DNAttributeName;

  { static fields } 

    {class} property Placement_Block: DNAttributeName read __fakeFieldGet_Placement_Block;
    {class} property Placement_Inline: DNAttributeName read __fakeFieldGet_Placement_Inline;
    {class} property Placement_Before: DNAttributeName read __fakeFieldGet_Placement_Before;
    {class} property Placement_Start: DNAttributeName read __fakeFieldGet_Placement_Start;
    {class} property Placement_End: DNAttributeName read __fakeFieldGet_Placement_End;
    {class} property WritingMode_LrTb: DNAttributeName read __fakeFieldGet_WritingMode_LrTb;
    {class} property WritingMode_RlTb: DNAttributeName read __fakeFieldGet_WritingMode_RlTb;
    {class} property WritingMode_TbRl: DNAttributeName read __fakeFieldGet_WritingMode_TbRl;
    {class} property BorderStyle_None: DNAttributeName read __fakeFieldGet_BorderStyle_None;
    {class} property BorderStyle_Hidden: DNAttributeName read __fakeFieldGet_BorderStyle_Hidden;
    {class} property BorderStyle_Dotted: DNAttributeName read __fakeFieldGet_BorderStyle_Dotted;
    {class} property BorderStyle_Dashed: DNAttributeName read __fakeFieldGet_BorderStyle_Dashed;
    {class} property BorderStyle_Solid: DNAttributeName read __fakeFieldGet_BorderStyle_Solid;
    {class} property BorderStyle_Double: DNAttributeName read __fakeFieldGet_BorderStyle_Double;
    {class} property BorderStyle_Groove: DNAttributeName read __fakeFieldGet_BorderStyle_Groove;
    {class} property BorderStyle_Ridge: DNAttributeName read __fakeFieldGet_BorderStyle_Ridge;
    {class} property BorderStyle_Inset: DNAttributeName read __fakeFieldGet_BorderStyle_Inset;
    {class} property BorderStyle_Outset: DNAttributeName read __fakeFieldGet_BorderStyle_Outset;
    {class} property TextAlign_Start: DNAttributeName read __fakeFieldGet_TextAlign_Start;
    {class} property TextAlign_Center: DNAttributeName read __fakeFieldGet_TextAlign_Center;
    {class} property TextAlign_End: DNAttributeName read __fakeFieldGet_TextAlign_End;
    {class} property TextAlign_Justify: DNAttributeName read __fakeFieldGet_TextAlign_Justify;
    {class} property Width_Auto: DNAttributeName read __fakeFieldGet_Width_Auto;
    {class} property Height_Auto: DNAttributeName read __fakeFieldGet_Height_Auto;
    {class} property BlockAlign_Before: DNAttributeName read __fakeFieldGet_BlockAlign_Before;
    {class} property BlockAlign_Middle: DNAttributeName read __fakeFieldGet_BlockAlign_Middle;
    {class} property BlockAlign_After: DNAttributeName read __fakeFieldGet_BlockAlign_After;
    {class} property BlockAlign_Justify: DNAttributeName read __fakeFieldGet_BlockAlign_Justify;
    {class} property InlineAlign_Start: DNAttributeName read __fakeFieldGet_InlineAlign_Start;
    {class} property InlineAlign_Center: DNAttributeName read __fakeFieldGet_InlineAlign_Center;
    {class} property InlineAlign_End: DNAttributeName read __fakeFieldGet_InlineAlign_End;
    {class} property LineHeight_Normal: DNAttributeName read __fakeFieldGet_LineHeight_Normal;
    {class} property LineHeight_Auto: DNAttributeName read __fakeFieldGet_LineHeight_Auto;
    {class} property TextDecorationType_None: DNAttributeName read __fakeFieldGet_TextDecorationType_None;
    {class} property TextDecorationType_Underline: DNAttributeName read __fakeFieldGet_TextDecorationType_Underline;
    {class} property TextDecorationType_Overline: DNAttributeName read __fakeFieldGet_TextDecorationType_Overline;
    {class} property TextDecorationType_LineThrough: DNAttributeName read __fakeFieldGet_TextDecorationType_LineThrough;
    {class} property RubyAlign_Start: DNAttributeName read __fakeFieldGet_RubyAlign_Start;
    {class} property RubyAlign_Center: DNAttributeName read __fakeFieldGet_RubyAlign_Center;
    {class} property RubyAlign_End: DNAttributeName read __fakeFieldGet_RubyAlign_End;
    {class} property RubyAlign_Justify: DNAttributeName read __fakeFieldGet_RubyAlign_Justify;
    {class} property RubyAlign_Distribute: DNAttributeName read __fakeFieldGet_RubyAlign_Distribute;
    {class} property RubyPosition_Before: DNAttributeName read __fakeFieldGet_RubyPosition_Before;
    {class} property RubyPosition_After: DNAttributeName read __fakeFieldGet_RubyPosition_After;
    {class} property RubyPosition_Warichu: DNAttributeName read __fakeFieldGet_RubyPosition_Warichu;
    {class} property RubyPosition_Inline: DNAttributeName read __fakeFieldGet_RubyPosition_Inline;
    {class} property GlyphOrientationVertical_Auto: DNAttributeName read __fakeFieldGet_GlyphOrientationVertical_Auto;
    {class} property ListNumbering_None: DNAttributeName read __fakeFieldGet_ListNumbering_None;
    {class} property ListNumbering_Disc: DNAttributeName read __fakeFieldGet_ListNumbering_Disc;
    {class} property ListNumbering_Circle: DNAttributeName read __fakeFieldGet_ListNumbering_Circle;
    {class} property ListNumbering_Square: DNAttributeName read __fakeFieldGet_ListNumbering_Square;
    {class} property ListNumbering_Decimal: DNAttributeName read __fakeFieldGet_ListNumbering_Decimal;
    {class} property ListNumbering_UpperRoman: DNAttributeName read __fakeFieldGet_ListNumbering_UpperRoman;
    {class} property ListNumbering_LowerRoman: DNAttributeName read __fakeFieldGet_ListNumbering_LowerRoman;
    {class} property ListNumbering_UpperAlpha: DNAttributeName read __fakeFieldGet_ListNumbering_UpperAlpha;
    {class} property ListNumbering_LowerAlpha: DNAttributeName read __fakeFieldGet_ListNumbering_LowerAlpha;
    {class} property Role_rb: DNAttributeName read __fakeFieldGet_Role_rb;
    {class} property Role_cb: DNAttributeName read __fakeFieldGet_Role_cb;
    {class} property Role_pb: DNAttributeName read __fakeFieldGet_Role_pb;
    {class} property Role_tv: DNAttributeName read __fakeFieldGet_Role_tv;
    {class} property Checked_on: DNAttributeName read __fakeFieldGet_Checked_on;
    {class} property Checked_off: DNAttributeName read __fakeFieldGet_Checked_off;
    {class} property Checked_neutral: DNAttributeName read __fakeFieldGet_Checked_neutral;
    {class} property Scope_Row: DNAttributeName read __fakeFieldGet_Scope_Row;
    {class} property Scope_Column: DNAttributeName read __fakeFieldGet_Scope_Column;
    {class} property Scope_Both: DNAttributeName read __fakeFieldGet_Scope_Both;

  { static methods } 

    {class} function FromNameAttributeKey(name: string; attributeKey: DNAttributeKey): DNAttributeName;

  end;

  [DNTypeName('Aspose.Pdf.LogicalStructure.AttributeName')]
  DNAttributeName = interface(DDN.mscorlib.DNObject)
  ['{ADB3F565-B365-3862-9D46-7785DA2D0138}']
  { getters & setters } 

    function get_Name: string;
    function get_AttributeKey: DNAttributeKey;

  { methods } 

    function ToString: string;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    property Name: string read get_Name;
    property AttributeKey: DNAttributeKey read get_AttributeKey;
  end;

  TDNAttributeName = class(TDNGenericImport<DNAttributeNameClass, DNAttributeName>) end;

  //-------------namespace: Aspose.Pdf.LogicalStructure----------------
  DNAttributeOwnerStandardClass = interface(DDN.mscorlib.DNObjectClass)
  ['{0FF83AEC-C82C-57FE-B16A-AB93EE0EE1CA}']
  { static fields getter & setter } 

   function __fakeFieldGet_Layout: DNAttributeOwnerStandard;
   function __fakeFieldGet_List: DNAttributeOwnerStandard;
   function __fakeFieldGet_PrintField: DNAttributeOwnerStandard;
   function __fakeFieldGet_Table: DNAttributeOwnerStandard;
   function __fakeFieldGet_Xml_100: DNAttributeOwnerStandard;
   function __fakeFieldGet_Html_320: DNAttributeOwnerStandard;
   function __fakeFieldGet_Html_401: DNAttributeOwnerStandard;
   function __fakeFieldGet_Oeb_100: DNAttributeOwnerStandard;
   function __fakeFieldGet_Rtf_105: DNAttributeOwnerStandard;
   function __fakeFieldGet_Css_100: DNAttributeOwnerStandard;
   function __fakeFieldGet_Css_200: DNAttributeOwnerStandard;

  { static fields } 

    {class} property Layout: DNAttributeOwnerStandard read __fakeFieldGet_Layout;
    {class} property List: DNAttributeOwnerStandard read __fakeFieldGet_List;
    {class} property PrintField: DNAttributeOwnerStandard read __fakeFieldGet_PrintField;
    {class} property Table: DNAttributeOwnerStandard read __fakeFieldGet_Table;
    {class} property Xml_100: DNAttributeOwnerStandard read __fakeFieldGet_Xml_100;
    {class} property Html_320: DNAttributeOwnerStandard read __fakeFieldGet_Html_320;
    {class} property Html_401: DNAttributeOwnerStandard read __fakeFieldGet_Html_401;
    {class} property Oeb_100: DNAttributeOwnerStandard read __fakeFieldGet_Oeb_100;
    {class} property Rtf_105: DNAttributeOwnerStandard read __fakeFieldGet_Rtf_105;
    {class} property Css_100: DNAttributeOwnerStandard read __fakeFieldGet_Css_100;
    {class} property Css_200: DNAttributeOwnerStandard read __fakeFieldGet_Css_200;

  end;

  [DNTypeName('Aspose.Pdf.LogicalStructure.AttributeOwnerStandard')]
  DNAttributeOwnerStandard = interface(DDN.mscorlib.DNObject)
  ['{0693332B-0987-36A0-A03D-44AC5F457FD6}']
  { getters & setters } 

    function get_Owner: string;

  { methods } 

    function ToString: string;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    property Owner: string read get_Owner;
  end;

  TDNAttributeOwnerStandard = class(TDNGenericImport<DNAttributeOwnerStandardClass, DNAttributeOwnerStandard>) end;

  //-------------namespace: Aspose.Pdf.LogicalStructure----------------
  DNLogicalStructure_ElementClass = interface(DDN.mscorlib.DNObjectClass)
  ['{27EF8C3D-8B4E-55B4-AE30-2E45C194AF2D}']
  end;

  [DNTypeName('Aspose.Pdf.LogicalStructure.Element')]
  DNLogicalStructure_Element = interface(DDN.mscorlib.DNObject)
  ['{99590165-E87F-3BFA-BD6E-35F6430D01C5}']
  { getters & setters } 

    function get_ParentElement: DNLogicalStructure_Element;
    function get_ChildElements: DNElementList;

  { methods } 

    function AppendChild(element: DNLogicalStructure_Element): DNLogicalStructure_Element;
    function ToString: string;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    property ParentElement: DNLogicalStructure_Element read get_ParentElement;
    property ChildElements: DNElementList read get_ChildElements;
  end;

  TDNLogicalStructure_Element = class(TDNGenericImport<DNLogicalStructure_ElementClass, DNLogicalStructure_Element>) end;

  //-------------namespace: Aspose.Pdf.LogicalStructure----------------
  DNMCRElementClass = interface(DNLogicalStructure_ElementClass)
  ['{AC9F8762-EC87-58E8-9564-23762726AAF4}']
  end;

  [DNTypeName('Aspose.Pdf.LogicalStructure.MCRElement')]
  DNMCRElement = interface(DNLogicalStructure_Element)
  ['{FBACD332-6F83-3FA1-A4DA-7BB5B0BC354D}']
  { getters & setters } 

    function get_ImageSrc: string;
    function get_Content: string;
    function get_MCID: Int32;
    function get_ParentElement: DNLogicalStructure_Element;
    function get_ChildElements: DNElementList;

  { methods } 

    function ToString: string;
    function AppendChild(element: DNLogicalStructure_Element): DNLogicalStructure_Element;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    property ImageSrc: string read get_ImageSrc;
    property Content: string read get_Content;
    property MCID: Int32 read get_MCID;
    property ParentElement: DNLogicalStructure_Element read get_ParentElement;
    property ChildElements: DNElementList read get_ChildElements;
  end;

  TDNMCRElement = class(TDNGenericImport<DNMCRElementClass, DNMCRElement>) end;

  //-------------namespace: Aspose.Pdf.LogicalStructure----------------
  DNOBJRElementClass = interface(DNLogicalStructure_ElementClass)
  ['{E436FC7C-904D-5603-B71D-535E1FA542D9}']
  end;

  [DNTypeName('Aspose.Pdf.LogicalStructure.OBJRElement')]
  DNOBJRElement = interface(DNLogicalStructure_Element)
  ['{F48A8E3A-914C-347F-9EB7-86EA654A792E}']
  { getters & setters } 

    function get_ParentElement: DNLogicalStructure_Element;
    function get_ChildElements: DNElementList;

  { methods } 

    function ToString: string;
    function AppendChild(element: DNLogicalStructure_Element): DNLogicalStructure_Element;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    property ParentElement: DNLogicalStructure_Element read get_ParentElement;
    property ChildElements: DNElementList read get_ChildElements;
  end;

  TDNOBJRElement = class(TDNGenericImport<DNOBJRElementClass, DNOBJRElement>) end;

  //-------------namespace: Aspose.Pdf.LogicalStructure----------------
  DNStructTreeRootElementClass = interface(DNLogicalStructure_ElementClass)
  ['{8CDAFDCC-FBE0-55FC-A3B8-93B17F297167}']
  end;

  [DNTypeName('Aspose.Pdf.LogicalStructure.StructTreeRootElement')]
  DNStructTreeRootElement = interface(DNLogicalStructure_Element)
  ['{291E1B56-49DA-34B8-A907-C183E9CB1829}']
  { getters & setters } 

    function get_ParentElement: DNLogicalStructure_Element;
    function get_ChildElements: DNElementList;

  { methods } 

    function AppendChild(element: DNLogicalStructure_Element): DNLogicalStructure_Element;
    function ToString: string;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    property ParentElement: DNLogicalStructure_Element read get_ParentElement;
    property ChildElements: DNElementList read get_ChildElements;
  end;

  TDNStructTreeRootElement = class(TDNGenericImport<DNStructTreeRootElementClass, DNStructTreeRootElement>) end;

  //-------------namespace: Aspose.Pdf.LogicalStructure----------------
  DNStructureElementClass = interface(DNLogicalStructure_ElementClass)
  ['{8F89FAC1-8BB3-5E58-A44C-2E501C51D4E5}']
  end;

  [DNTypeName('Aspose.Pdf.LogicalStructure.StructureElement')]
  DNStructureElement = interface(DNLogicalStructure_Element)
  ['{86DA5084-3594-3806-B49E-1ADB30F96A68}']
  { getters & setters } 

    function get_DefaultAttributeOwner: DNAttributeOwnerStandard;
    function get_Attributes: DNStructureAttributeCollection;
    function get_StructureType: DNStructureTypeStandard;
    function get_ID: string;
    function get_Title: string;
    procedure set_Title(value: string);
    function get_Language: string;
    procedure set_Language(value: string);
    function get_AlternativeText: string;
    procedure set_AlternativeText(value: string);
    function get_ExpansionText: string;
    procedure set_ExpansionText(value: string);
    function get_ActualText: string;
    procedure set_ActualText(value: string);
    function get_ParentElement: DNLogicalStructure_Element;
    function get_ChildElements: DNElementList;

  { methods } 

    procedure ChangeParentElement(newParentElement: DNStructureElement);
    procedure GenerateId;
    procedure SetId(id: string);
    procedure ClearId;
    procedure SetTag(newTag: string);
    function ToString: string;
    function AppendChild(element: DNLogicalStructure_Element): DNLogicalStructure_Element;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    property DefaultAttributeOwner: DNAttributeOwnerStandard read get_DefaultAttributeOwner;
    property Attributes: DNStructureAttributeCollection read get_Attributes;
    property StructureType: DNStructureTypeStandard read get_StructureType;
    property ID: string read get_ID;
    property Title: string read get_Title write set_Title;
    property Language: string read get_Language write set_Language;
    property AlternativeText: string read get_AlternativeText write set_AlternativeText;
    property ExpansionText: string read get_ExpansionText write set_ExpansionText;
    property ActualText: string read get_ActualText write set_ActualText;
    property ParentElement: DNLogicalStructure_Element read get_ParentElement;
    property ChildElements: DNElementList read get_ChildElements;
  end;

  TDNStructureElement = class(TDNGenericImport<DNStructureElementClass, DNStructureElement>) end;

  //-------------namespace: Aspose.Pdf.LogicalStructure----------------
  DNBLSElementClass = interface(DNStructureElementClass)
  ['{495C0793-9756-5472-9D40-810E7447C5F6}']
  end;

  [DNTypeName('Aspose.Pdf.LogicalStructure.BLSElement')]
  DNBLSElement = interface(DNStructureElement)
  ['{5BB2FB91-2A03-3AD5-9ADE-ECBD07E55D3E}']
  { getters & setters } 

    function get_DefaultAttributeOwner: DNAttributeOwnerStandard;
    function get_Attributes: DNStructureAttributeCollection;
    function get_StructureType: DNStructureTypeStandard;
    function get_ID: string;
    function get_Title: string;
    procedure set_Title(value: string);
    function get_Language: string;
    procedure set_Language(value: string);
    function get_AlternativeText: string;
    procedure set_AlternativeText(value: string);
    function get_ExpansionText: string;
    procedure set_ExpansionText(value: string);
    function get_ActualText: string;
    procedure set_ActualText(value: string);
    function get_ParentElement: DNLogicalStructure_Element;
    function get_ChildElements: DNElementList;

  { methods } 

    procedure ChangeParentElement(newParentElement: DNStructureElement);
    procedure GenerateId;
    procedure SetId(id: string);
    procedure ClearId;
    procedure SetTag(newTag: string);
    function ToString: string;
    function AppendChild(element: DNLogicalStructure_Element): DNLogicalStructure_Element;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    property DefaultAttributeOwner: DNAttributeOwnerStandard read get_DefaultAttributeOwner;
    property Attributes: DNStructureAttributeCollection read get_Attributes;
    property StructureType: DNStructureTypeStandard read get_StructureType;
    property ID: string read get_ID;
    property Title: string read get_Title write set_Title;
    property Language: string read get_Language write set_Language;
    property AlternativeText: string read get_AlternativeText write set_AlternativeText;
    property ExpansionText: string read get_ExpansionText write set_ExpansionText;
    property ActualText: string read get_ActualText write set_ActualText;
    property ParentElement: DNLogicalStructure_Element read get_ParentElement;
    property ChildElements: DNElementList read get_ChildElements;
  end;

  TDNBLSElement = class(TDNGenericImport<DNBLSElementClass, DNBLSElement>) end;

  //-------------namespace: Aspose.Pdf.LogicalStructure----------------
  DNBLSTextElementClass = interface(DNBLSElementClass)
  ['{37B1ABB5-ADE1-5592-B480-E87617E543DE}']
  end;

  [DNTypeName('Aspose.Pdf.LogicalStructure.BLSTextElement')]
  DNBLSTextElement = interface(DNBLSElement)
  ['{7E07C6C8-20D8-3C7C-9DA9-B15345463BC6}']
  { getters & setters } 

    function get_StructureTextState: DNStructureTextState;
    function get_DefaultAttributeOwner: DNAttributeOwnerStandard;
    function get_Attributes: DNStructureAttributeCollection;
    function get_StructureType: DNStructureTypeStandard;
    function get_ID: string;
    function get_Title: string;
    procedure set_Title(value: string);
    function get_Language: string;
    procedure set_Language(value: string);
    function get_AlternativeText: string;
    procedure set_AlternativeText(value: string);
    function get_ExpansionText: string;
    procedure set_ExpansionText(value: string);
    function get_ActualText: string;
    procedure set_ActualText(value: string);
    function get_ParentElement: DNLogicalStructure_Element;
    function get_ChildElements: DNElementList;

  { methods } 

    procedure SetText(text: string);
    procedure ChangeParentElement(newParentElement: DNStructureElement);
    procedure GenerateId;
    procedure SetId(id: string);
    procedure ClearId;
    procedure SetTag(newTag: string);
    function ToString: string;
    function AppendChild(element: DNLogicalStructure_Element): DNLogicalStructure_Element;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    property StructureTextState: DNStructureTextState read get_StructureTextState;
    property DefaultAttributeOwner: DNAttributeOwnerStandard read get_DefaultAttributeOwner;
    property Attributes: DNStructureAttributeCollection read get_Attributes;
    property StructureType: DNStructureTypeStandard read get_StructureType;
    property ID: string read get_ID;
    property Title: string read get_Title write set_Title;
    property Language: string read get_Language write set_Language;
    property AlternativeText: string read get_AlternativeText write set_AlternativeText;
    property ExpansionText: string read get_ExpansionText write set_ExpansionText;
    property ActualText: string read get_ActualText write set_ActualText;
    property ParentElement: DNLogicalStructure_Element read get_ParentElement;
    property ChildElements: DNElementList read get_ChildElements;
  end;

  TDNBLSTextElement = class(TDNGenericImport<DNBLSTextElementClass, DNBLSTextElement>) end;

  //-------------namespace: Aspose.Pdf.LogicalStructure----------------
  DNHeaderElementClass = interface(DNBLSTextElementClass)
  ['{619F8C69-1E43-5461-BE36-EFD6699C94B1}']
  end;

  [DNTypeName('Aspose.Pdf.LogicalStructure.HeaderElement')]
  DNHeaderElement = interface(DNBLSTextElement)
  ['{9DAAA378-CA84-3977-BB71-ED3081A09048}']
  { getters & setters } 

    function get_StructureTextState: DNStructureTextState;
    function get_DefaultAttributeOwner: DNAttributeOwnerStandard;
    function get_Attributes: DNStructureAttributeCollection;
    function get_StructureType: DNStructureTypeStandard;
    function get_ID: string;
    function get_Title: string;
    procedure set_Title(value: string);
    function get_Language: string;
    procedure set_Language(value: string);
    function get_AlternativeText: string;
    procedure set_AlternativeText(value: string);
    function get_ExpansionText: string;
    procedure set_ExpansionText(value: string);
    function get_ActualText: string;
    procedure set_ActualText(value: string);
    function get_ParentElement: DNLogicalStructure_Element;
    function get_ChildElements: DNElementList;

  { methods } 

    procedure SetText(text: string);
    procedure ChangeParentElement(newParentElement: DNStructureElement);
    procedure GenerateId;
    procedure SetId(id: string);
    procedure ClearId;
    procedure SetTag(newTag: string);
    function ToString: string;
    function AppendChild(element: DNLogicalStructure_Element): DNLogicalStructure_Element;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    property StructureTextState: DNStructureTextState read get_StructureTextState;
    property DefaultAttributeOwner: DNAttributeOwnerStandard read get_DefaultAttributeOwner;
    property Attributes: DNStructureAttributeCollection read get_Attributes;
    property StructureType: DNStructureTypeStandard read get_StructureType;
    property ID: string read get_ID;
    property Title: string read get_Title write set_Title;
    property Language: string read get_Language write set_Language;
    property AlternativeText: string read get_AlternativeText write set_AlternativeText;
    property ExpansionText: string read get_ExpansionText write set_ExpansionText;
    property ActualText: string read get_ActualText write set_ActualText;
    property ParentElement: DNLogicalStructure_Element read get_ParentElement;
    property ChildElements: DNElementList read get_ChildElements;
  end;

  TDNHeaderElement = class(TDNGenericImport<DNHeaderElementClass, DNHeaderElement>) end;

  //-------------namespace: Aspose.Pdf.LogicalStructure----------------
  DNParagraphElementClass = interface(DNBLSTextElementClass)
  ['{AFF2BE26-6E20-5A3D-99C5-092FE3855CB0}']
  end;

  [DNTypeName('Aspose.Pdf.LogicalStructure.ParagraphElement')]
  DNParagraphElement = interface(DNBLSTextElement)
  ['{5CEF318F-29DC-3CCC-9C89-DC9AF56176FF}']
  { getters & setters } 

    function get_StructureTextState: DNStructureTextState;
    function get_DefaultAttributeOwner: DNAttributeOwnerStandard;
    function get_Attributes: DNStructureAttributeCollection;
    function get_StructureType: DNStructureTypeStandard;
    function get_ID: string;
    function get_Title: string;
    procedure set_Title(value: string);
    function get_Language: string;
    procedure set_Language(value: string);
    function get_AlternativeText: string;
    procedure set_AlternativeText(value: string);
    function get_ExpansionText: string;
    procedure set_ExpansionText(value: string);
    function get_ActualText: string;
    procedure set_ActualText(value: string);
    function get_ParentElement: DNLogicalStructure_Element;
    function get_ChildElements: DNElementList;

  { methods } 

    procedure SetText(text: string);
    procedure ChangeParentElement(newParentElement: DNStructureElement);
    procedure GenerateId;
    procedure SetId(id: string);
    procedure ClearId;
    procedure SetTag(newTag: string);
    function ToString: string;
    function AppendChild(element: DNLogicalStructure_Element): DNLogicalStructure_Element;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    property StructureTextState: DNStructureTextState read get_StructureTextState;
    property DefaultAttributeOwner: DNAttributeOwnerStandard read get_DefaultAttributeOwner;
    property Attributes: DNStructureAttributeCollection read get_Attributes;
    property StructureType: DNStructureTypeStandard read get_StructureType;
    property ID: string read get_ID;
    property Title: string read get_Title write set_Title;
    property Language: string read get_Language write set_Language;
    property AlternativeText: string read get_AlternativeText write set_AlternativeText;
    property ExpansionText: string read get_ExpansionText write set_ExpansionText;
    property ActualText: string read get_ActualText write set_ActualText;
    property ParentElement: DNLogicalStructure_Element read get_ParentElement;
    property ChildElements: DNElementList read get_ChildElements;
  end;

  TDNParagraphElement = class(TDNGenericImport<DNParagraphElementClass, DNParagraphElement>) end;

  //-------------namespace: Aspose.Pdf.LogicalStructure----------------
  DNListElementClass = interface(DNBLSElementClass)
  ['{E3213F8D-5650-5185-9FD3-0CF526C1918B}']
  end;

  [DNTypeName('Aspose.Pdf.LogicalStructure.ListElement')]
  DNListElement = interface(DNBLSElement)
  ['{350FADC8-49A2-313E-9DB8-D8A9BB069C62}']
  { getters & setters } 

    function get_DefaultAttributeOwner: DNAttributeOwnerStandard;
    function get_Attributes: DNStructureAttributeCollection;
    function get_StructureType: DNStructureTypeStandard;
    function get_ID: string;
    function get_Title: string;
    procedure set_Title(value: string);
    function get_Language: string;
    procedure set_Language(value: string);
    function get_AlternativeText: string;
    procedure set_AlternativeText(value: string);
    function get_ExpansionText: string;
    procedure set_ExpansionText(value: string);
    function get_ActualText: string;
    procedure set_ActualText(value: string);
    function get_ParentElement: DNLogicalStructure_Element;
    function get_ChildElements: DNElementList;

  { methods } 

    procedure ChangeParentElement(newParentElement: DNStructureElement);
    procedure GenerateId;
    procedure SetId(id: string);
    procedure ClearId;
    procedure SetTag(newTag: string);
    function ToString: string;
    function AppendChild(element: DNLogicalStructure_Element): DNLogicalStructure_Element;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    property DefaultAttributeOwner: DNAttributeOwnerStandard read get_DefaultAttributeOwner;
    property Attributes: DNStructureAttributeCollection read get_Attributes;
    property StructureType: DNStructureTypeStandard read get_StructureType;
    property ID: string read get_ID;
    property Title: string read get_Title write set_Title;
    property Language: string read get_Language write set_Language;
    property AlternativeText: string read get_AlternativeText write set_AlternativeText;
    property ExpansionText: string read get_ExpansionText write set_ExpansionText;
    property ActualText: string read get_ActualText write set_ActualText;
    property ParentElement: DNLogicalStructure_Element read get_ParentElement;
    property ChildElements: DNElementList read get_ChildElements;
  end;

  TDNListElement = class(TDNGenericImport<DNListElementClass, DNListElement>) end;

  //-------------namespace: Aspose.Pdf.LogicalStructure----------------
  DNTableElementClass = interface(DNBLSElementClass)
  ['{A27C5318-60BD-5191-B1B0-3A4375803672}']
  end;

  [DNTypeName('Aspose.Pdf.LogicalStructure.TableElement')]
  DNTableElement = interface(DNBLSElement)
  ['{2B51B919-4C91-3390-8999-3060175F8C2C}']
  { getters & setters } 

    function get_BackgroundColor: DNColor;
    procedure set_BackgroundColor(value: DNColor);
    function get_Border: DNBorderInfo;
    procedure set_Border(value: DNBorderInfo);
    function get_Alignment: DNHorizontalAlignment;
    procedure set_Alignment(value: DNHorizontalAlignment);
    function get_CornerStyle: DNBorderCornerStyle;
    procedure set_CornerStyle(value: DNBorderCornerStyle);
    function get_Broken: DNTableBroken;
    procedure set_Broken(value: DNTableBroken);
    function get_ColumnAdjustment: DNColumnAdjustment;
    procedure set_ColumnAdjustment(value: DNColumnAdjustment);
    function get_ColumnWidths: string;
    procedure set_ColumnWidths(value: string);
    function get_DefaultCellBorder: DNBorderInfo;
    procedure set_DefaultCellBorder(value: DNBorderInfo);
    function get_DefaultCellPadding: DNMarginInfo;
    procedure set_DefaultCellPadding(value: DNMarginInfo);
    function get_DefaultCellTextState: DNTextState;
    procedure set_DefaultCellTextState(value: DNTextState);
    function get_DefaultColumnWidth: string;
    procedure set_DefaultColumnWidth(value: string);
    function get_IsBroken: Boolean;
    procedure set_IsBroken(value: Boolean);
    function get_IsBordersIncluded: Boolean;
    procedure set_IsBordersIncluded(value: Boolean);
    function get_Left: Single;
    procedure set_Left(value: Single);
    function get_Top: Single;
    procedure set_Top(value: Single);
    function get_RepeatingColumnsCount: Int32;
    procedure set_RepeatingColumnsCount(value: Int32);
    function get_RepeatingRowsCount: Int32;
    procedure set_RepeatingRowsCount(value: Int32);
    function get_RepeatingRowsStyle: DNTextState;
    procedure set_RepeatingRowsStyle(value: DNTextState);
    function get_DefaultAttributeOwner: DNAttributeOwnerStandard;
    function get_Attributes: DNStructureAttributeCollection;
    function get_StructureType: DNStructureTypeStandard;
    function get_ID: string;
    function get_Title: string;
    procedure set_Title(value: string);
    function get_Language: string;
    procedure set_Language(value: string);
    function get_AlternativeText: string;
    procedure set_AlternativeText(value: string);
    function get_ExpansionText: string;
    procedure set_ExpansionText(value: string);
    function get_ActualText: string;
    procedure set_ActualText(value: string);
    function get_ParentElement: DNLogicalStructure_Element;
    function get_ChildElements: DNElementList;

  { methods } 

    function CreateTHead: DNTableTHeadElement;
    function CreateTBody: DNTableTBodyElement;
    function CreateTFoot: DNTableTFootElement;
    procedure ChangeParentElement(newParentElement: DNStructureElement);
    procedure GenerateId;
    procedure SetId(id: string);
    procedure ClearId;
    procedure SetTag(newTag: string);
    function ToString: string;
    function AppendChild(element: DNLogicalStructure_Element): DNLogicalStructure_Element;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    property BackgroundColor: DNColor read get_BackgroundColor write set_BackgroundColor;
    property Border: DNBorderInfo read get_Border write set_Border;
    property Alignment: DNHorizontalAlignment read get_Alignment write set_Alignment;
    property CornerStyle: DNBorderCornerStyle read get_CornerStyle write set_CornerStyle;
    property Broken: DNTableBroken read get_Broken write set_Broken;
    property ColumnAdjustment: DNColumnAdjustment read get_ColumnAdjustment write set_ColumnAdjustment;
    property ColumnWidths: string read get_ColumnWidths write set_ColumnWidths;
    property DefaultCellBorder: DNBorderInfo read get_DefaultCellBorder write set_DefaultCellBorder;
    property DefaultCellPadding: DNMarginInfo read get_DefaultCellPadding write set_DefaultCellPadding;
    property DefaultCellTextState: DNTextState read get_DefaultCellTextState write set_DefaultCellTextState;
    property DefaultColumnWidth: string read get_DefaultColumnWidth write set_DefaultColumnWidth;
    property IsBroken: Boolean read get_IsBroken write set_IsBroken;
    property IsBordersIncluded: Boolean read get_IsBordersIncluded write set_IsBordersIncluded;
    property Left: Single read get_Left write set_Left;
    property Top: Single read get_Top write set_Top;
    property RepeatingColumnsCount: Int32 read get_RepeatingColumnsCount write set_RepeatingColumnsCount;
    property RepeatingRowsCount: Int32 read get_RepeatingRowsCount write set_RepeatingRowsCount;
    property RepeatingRowsStyle: DNTextState read get_RepeatingRowsStyle write set_RepeatingRowsStyle;
    property DefaultAttributeOwner: DNAttributeOwnerStandard read get_DefaultAttributeOwner;
    property Attributes: DNStructureAttributeCollection read get_Attributes;
    property StructureType: DNStructureTypeStandard read get_StructureType;
    property ID: string read get_ID;
    property Title: string read get_Title write set_Title;
    property Language: string read get_Language write set_Language;
    property AlternativeText: string read get_AlternativeText write set_AlternativeText;
    property ExpansionText: string read get_ExpansionText write set_ExpansionText;
    property ActualText: string read get_ActualText write set_ActualText;
    property ParentElement: DNLogicalStructure_Element read get_ParentElement;
    property ChildElements: DNElementList read get_ChildElements;
  end;

  TDNTableElement = class(TDNGenericImport<DNTableElementClass, DNTableElement>) end;

  //-------------namespace: Aspose.Pdf.LogicalStructure----------------
  DNGroupingElementClass = interface(DNStructureElementClass)
  ['{C469EC41-8CAF-50FC-989F-A03BF117AA2F}']
  end;

  [DNTypeName('Aspose.Pdf.LogicalStructure.GroupingElement')]
  DNGroupingElement = interface(DNStructureElement)
  ['{C7721B2A-D294-38DC-B14D-DAAF637B656E}']
  { getters & setters } 

    function get_DefaultAttributeOwner: DNAttributeOwnerStandard;
    function get_Attributes: DNStructureAttributeCollection;
    function get_StructureType: DNStructureTypeStandard;
    function get_ID: string;
    function get_Title: string;
    procedure set_Title(value: string);
    function get_Language: string;
    procedure set_Language(value: string);
    function get_AlternativeText: string;
    procedure set_AlternativeText(value: string);
    function get_ExpansionText: string;
    procedure set_ExpansionText(value: string);
    function get_ActualText: string;
    procedure set_ActualText(value: string);
    function get_ParentElement: DNLogicalStructure_Element;
    function get_ChildElements: DNElementList;

  { methods } 

    procedure ChangeParentElement(newParentElement: DNStructureElement);
    procedure GenerateId;
    procedure SetId(id: string);
    procedure ClearId;
    procedure SetTag(newTag: string);
    function ToString: string;
    function AppendChild(element: DNLogicalStructure_Element): DNLogicalStructure_Element;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    property DefaultAttributeOwner: DNAttributeOwnerStandard read get_DefaultAttributeOwner;
    property Attributes: DNStructureAttributeCollection read get_Attributes;
    property StructureType: DNStructureTypeStandard read get_StructureType;
    property ID: string read get_ID;
    property Title: string read get_Title write set_Title;
    property Language: string read get_Language write set_Language;
    property AlternativeText: string read get_AlternativeText write set_AlternativeText;
    property ExpansionText: string read get_ExpansionText write set_ExpansionText;
    property ActualText: string read get_ActualText write set_ActualText;
    property ParentElement: DNLogicalStructure_Element read get_ParentElement;
    property ChildElements: DNElementList read get_ChildElements;
  end;

  TDNGroupingElement = class(TDNGenericImport<DNGroupingElementClass, DNGroupingElement>) end;

  //-------------namespace: Aspose.Pdf.LogicalStructure----------------
  DNArtElementClass = interface(DNGroupingElementClass)
  ['{79007DC0-D1C7-51DD-840A-3E2F8CE44C91}']
  end;

  [DNTypeName('Aspose.Pdf.LogicalStructure.ArtElement')]
  DNArtElement = interface(DNGroupingElement)
  ['{E4AF1CC3-4E09-3F27-8E33-961BB297DAEB}']
  { getters & setters } 

    function get_DefaultAttributeOwner: DNAttributeOwnerStandard;
    function get_Attributes: DNStructureAttributeCollection;
    function get_StructureType: DNStructureTypeStandard;
    function get_ID: string;
    function get_Title: string;
    procedure set_Title(value: string);
    function get_Language: string;
    procedure set_Language(value: string);
    function get_AlternativeText: string;
    procedure set_AlternativeText(value: string);
    function get_ExpansionText: string;
    procedure set_ExpansionText(value: string);
    function get_ActualText: string;
    procedure set_ActualText(value: string);
    function get_ParentElement: DNLogicalStructure_Element;
    function get_ChildElements: DNElementList;

  { methods } 

    procedure ChangeParentElement(newParentElement: DNStructureElement);
    procedure GenerateId;
    procedure SetId(id: string);
    procedure ClearId;
    procedure SetTag(newTag: string);
    function ToString: string;
    function AppendChild(element: DNLogicalStructure_Element): DNLogicalStructure_Element;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    property DefaultAttributeOwner: DNAttributeOwnerStandard read get_DefaultAttributeOwner;
    property Attributes: DNStructureAttributeCollection read get_Attributes;
    property StructureType: DNStructureTypeStandard read get_StructureType;
    property ID: string read get_ID;
    property Title: string read get_Title write set_Title;
    property Language: string read get_Language write set_Language;
    property AlternativeText: string read get_AlternativeText write set_AlternativeText;
    property ExpansionText: string read get_ExpansionText write set_ExpansionText;
    property ActualText: string read get_ActualText write set_ActualText;
    property ParentElement: DNLogicalStructure_Element read get_ParentElement;
    property ChildElements: DNElementList read get_ChildElements;
  end;

  TDNArtElement = class(TDNGenericImport<DNArtElementClass, DNArtElement>) end;

  //-------------namespace: Aspose.Pdf.LogicalStructure----------------
  DNBlockQuoteElementClass = interface(DNGroupingElementClass)
  ['{573A15C8-ABC1-5FA7-B79A-0A9162D62623}']
  end;

  [DNTypeName('Aspose.Pdf.LogicalStructure.BlockQuoteElement')]
  DNBlockQuoteElement = interface(DNGroupingElement)
  ['{841DE821-F769-3294-BC13-72F2C518FE77}']
  { getters & setters } 

    function get_DefaultAttributeOwner: DNAttributeOwnerStandard;
    function get_Attributes: DNStructureAttributeCollection;
    function get_StructureType: DNStructureTypeStandard;
    function get_ID: string;
    function get_Title: string;
    procedure set_Title(value: string);
    function get_Language: string;
    procedure set_Language(value: string);
    function get_AlternativeText: string;
    procedure set_AlternativeText(value: string);
    function get_ExpansionText: string;
    procedure set_ExpansionText(value: string);
    function get_ActualText: string;
    procedure set_ActualText(value: string);
    function get_ParentElement: DNLogicalStructure_Element;
    function get_ChildElements: DNElementList;

  { methods } 

    procedure ChangeParentElement(newParentElement: DNStructureElement);
    procedure GenerateId;
    procedure SetId(id: string);
    procedure ClearId;
    procedure SetTag(newTag: string);
    function ToString: string;
    function AppendChild(element: DNLogicalStructure_Element): DNLogicalStructure_Element;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    property DefaultAttributeOwner: DNAttributeOwnerStandard read get_DefaultAttributeOwner;
    property Attributes: DNStructureAttributeCollection read get_Attributes;
    property StructureType: DNStructureTypeStandard read get_StructureType;
    property ID: string read get_ID;
    property Title: string read get_Title write set_Title;
    property Language: string read get_Language write set_Language;
    property AlternativeText: string read get_AlternativeText write set_AlternativeText;
    property ExpansionText: string read get_ExpansionText write set_ExpansionText;
    property ActualText: string read get_ActualText write set_ActualText;
    property ParentElement: DNLogicalStructure_Element read get_ParentElement;
    property ChildElements: DNElementList read get_ChildElements;
  end;

  TDNBlockQuoteElement = class(TDNGenericImport<DNBlockQuoteElementClass, DNBlockQuoteElement>) end;

  //-------------namespace: Aspose.Pdf.LogicalStructure----------------
  DNCaptionElementClass = interface(DNGroupingElementClass)
  ['{37105479-91FA-5039-842D-4B70FD29BD99}']
  end;

  [DNTypeName('Aspose.Pdf.LogicalStructure.CaptionElement')]
  DNCaptionElement = interface(DNGroupingElement)
  ['{9A94534E-AB2E-3C0E-B486-52D83450AF84}']
  { getters & setters } 

    function get_DefaultAttributeOwner: DNAttributeOwnerStandard;
    function get_Attributes: DNStructureAttributeCollection;
    function get_StructureType: DNStructureTypeStandard;
    function get_ID: string;
    function get_Title: string;
    procedure set_Title(value: string);
    function get_Language: string;
    procedure set_Language(value: string);
    function get_AlternativeText: string;
    procedure set_AlternativeText(value: string);
    function get_ExpansionText: string;
    procedure set_ExpansionText(value: string);
    function get_ActualText: string;
    procedure set_ActualText(value: string);
    function get_ParentElement: DNLogicalStructure_Element;
    function get_ChildElements: DNElementList;

  { methods } 

    procedure ChangeParentElement(newParentElement: DNStructureElement);
    procedure GenerateId;
    procedure SetId(id: string);
    procedure ClearId;
    procedure SetTag(newTag: string);
    function ToString: string;
    function AppendChild(element: DNLogicalStructure_Element): DNLogicalStructure_Element;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    property DefaultAttributeOwner: DNAttributeOwnerStandard read get_DefaultAttributeOwner;
    property Attributes: DNStructureAttributeCollection read get_Attributes;
    property StructureType: DNStructureTypeStandard read get_StructureType;
    property ID: string read get_ID;
    property Title: string read get_Title write set_Title;
    property Language: string read get_Language write set_Language;
    property AlternativeText: string read get_AlternativeText write set_AlternativeText;
    property ExpansionText: string read get_ExpansionText write set_ExpansionText;
    property ActualText: string read get_ActualText write set_ActualText;
    property ParentElement: DNLogicalStructure_Element read get_ParentElement;
    property ChildElements: DNElementList read get_ChildElements;
  end;

  TDNCaptionElement = class(TDNGenericImport<DNCaptionElementClass, DNCaptionElement>) end;

  //-------------namespace: Aspose.Pdf.LogicalStructure----------------
  DNDivElementClass = interface(DNGroupingElementClass)
  ['{90BD43DE-5E81-52C4-9AF0-808AF0076ACD}']
  end;

  [DNTypeName('Aspose.Pdf.LogicalStructure.DivElement')]
  DNDivElement = interface(DNGroupingElement)
  ['{CAAA30F7-B7F0-394D-976F-5B706F14A04A}']
  { getters & setters } 

    function get_DefaultAttributeOwner: DNAttributeOwnerStandard;
    function get_Attributes: DNStructureAttributeCollection;
    function get_StructureType: DNStructureTypeStandard;
    function get_ID: string;
    function get_Title: string;
    procedure set_Title(value: string);
    function get_Language: string;
    procedure set_Language(value: string);
    function get_AlternativeText: string;
    procedure set_AlternativeText(value: string);
    function get_ExpansionText: string;
    procedure set_ExpansionText(value: string);
    function get_ActualText: string;
    procedure set_ActualText(value: string);
    function get_ParentElement: DNLogicalStructure_Element;
    function get_ChildElements: DNElementList;

  { methods } 

    procedure ChangeParentElement(newParentElement: DNStructureElement);
    procedure GenerateId;
    procedure SetId(id: string);
    procedure ClearId;
    procedure SetTag(newTag: string);
    function ToString: string;
    function AppendChild(element: DNLogicalStructure_Element): DNLogicalStructure_Element;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    property DefaultAttributeOwner: DNAttributeOwnerStandard read get_DefaultAttributeOwner;
    property Attributes: DNStructureAttributeCollection read get_Attributes;
    property StructureType: DNStructureTypeStandard read get_StructureType;
    property ID: string read get_ID;
    property Title: string read get_Title write set_Title;
    property Language: string read get_Language write set_Language;
    property AlternativeText: string read get_AlternativeText write set_AlternativeText;
    property ExpansionText: string read get_ExpansionText write set_ExpansionText;
    property ActualText: string read get_ActualText write set_ActualText;
    property ParentElement: DNLogicalStructure_Element read get_ParentElement;
    property ChildElements: DNElementList read get_ChildElements;
  end;

  TDNDivElement = class(TDNGenericImport<DNDivElementClass, DNDivElement>) end;

  //-------------namespace: Aspose.Pdf.LogicalStructure----------------
  DNDocumentElementClass = interface(DNGroupingElementClass)
  ['{9349B2D7-10BC-5EA0-A65B-93925AEC447F}']
  end;

  [DNTypeName('Aspose.Pdf.LogicalStructure.DocumentElement')]
  DNDocumentElement = interface(DNGroupingElement)
  ['{39B8A77B-40B5-3622-93FB-FC8B53571123}']
  { getters & setters } 

    function get_DefaultAttributeOwner: DNAttributeOwnerStandard;
    function get_Attributes: DNStructureAttributeCollection;
    function get_StructureType: DNStructureTypeStandard;
    function get_ID: string;
    function get_Title: string;
    procedure set_Title(value: string);
    function get_Language: string;
    procedure set_Language(value: string);
    function get_AlternativeText: string;
    procedure set_AlternativeText(value: string);
    function get_ExpansionText: string;
    procedure set_ExpansionText(value: string);
    function get_ActualText: string;
    procedure set_ActualText(value: string);
    function get_ParentElement: DNLogicalStructure_Element;
    function get_ChildElements: DNElementList;

  { methods } 

    procedure ChangeParentElement(newParentElement: DNStructureElement);
    procedure GenerateId;
    procedure SetId(id: string);
    procedure ClearId;
    procedure SetTag(newTag: string);
    function ToString: string;
    function AppendChild(element: DNLogicalStructure_Element): DNLogicalStructure_Element;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    property DefaultAttributeOwner: DNAttributeOwnerStandard read get_DefaultAttributeOwner;
    property Attributes: DNStructureAttributeCollection read get_Attributes;
    property StructureType: DNStructureTypeStandard read get_StructureType;
    property ID: string read get_ID;
    property Title: string read get_Title write set_Title;
    property Language: string read get_Language write set_Language;
    property AlternativeText: string read get_AlternativeText write set_AlternativeText;
    property ExpansionText: string read get_ExpansionText write set_ExpansionText;
    property ActualText: string read get_ActualText write set_ActualText;
    property ParentElement: DNLogicalStructure_Element read get_ParentElement;
    property ChildElements: DNElementList read get_ChildElements;
  end;

  TDNDocumentElement = class(TDNGenericImport<DNDocumentElementClass, DNDocumentElement>) end;

  //-------------namespace: Aspose.Pdf.LogicalStructure----------------
  DNIndexElementClass = interface(DNGroupingElementClass)
  ['{CB7FA626-D54B-5D90-8BD2-06B4D11603EF}']
  end;

  [DNTypeName('Aspose.Pdf.LogicalStructure.IndexElement')]
  DNIndexElement = interface(DNGroupingElement)
  ['{C7538CE4-2AA1-35DE-97B0-96651BBD424B}']
  { getters & setters } 

    function get_DefaultAttributeOwner: DNAttributeOwnerStandard;
    function get_Attributes: DNStructureAttributeCollection;
    function get_StructureType: DNStructureTypeStandard;
    function get_ID: string;
    function get_Title: string;
    procedure set_Title(value: string);
    function get_Language: string;
    procedure set_Language(value: string);
    function get_AlternativeText: string;
    procedure set_AlternativeText(value: string);
    function get_ExpansionText: string;
    procedure set_ExpansionText(value: string);
    function get_ActualText: string;
    procedure set_ActualText(value: string);
    function get_ParentElement: DNLogicalStructure_Element;
    function get_ChildElements: DNElementList;

  { methods } 

    procedure ChangeParentElement(newParentElement: DNStructureElement);
    procedure GenerateId;
    procedure SetId(id: string);
    procedure ClearId;
    procedure SetTag(newTag: string);
    function ToString: string;
    function AppendChild(element: DNLogicalStructure_Element): DNLogicalStructure_Element;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    property DefaultAttributeOwner: DNAttributeOwnerStandard read get_DefaultAttributeOwner;
    property Attributes: DNStructureAttributeCollection read get_Attributes;
    property StructureType: DNStructureTypeStandard read get_StructureType;
    property ID: string read get_ID;
    property Title: string read get_Title write set_Title;
    property Language: string read get_Language write set_Language;
    property AlternativeText: string read get_AlternativeText write set_AlternativeText;
    property ExpansionText: string read get_ExpansionText write set_ExpansionText;
    property ActualText: string read get_ActualText write set_ActualText;
    property ParentElement: DNLogicalStructure_Element read get_ParentElement;
    property ChildElements: DNElementList read get_ChildElements;
  end;

  TDNIndexElement = class(TDNGenericImport<DNIndexElementClass, DNIndexElement>) end;

  //-------------namespace: Aspose.Pdf.LogicalStructure----------------
  DNNonStructElementClass = interface(DNGroupingElementClass)
  ['{2749AEDC-5DA5-5D0D-ABA5-16F892E3B135}']
  end;

  [DNTypeName('Aspose.Pdf.LogicalStructure.NonStructElement')]
  DNNonStructElement = interface(DNGroupingElement)
  ['{13E89876-8A4B-32C3-A7F3-623BDC028526}']
  { getters & setters } 

    function get_DefaultAttributeOwner: DNAttributeOwnerStandard;
    function get_Attributes: DNStructureAttributeCollection;
    function get_StructureType: DNStructureTypeStandard;
    function get_ID: string;
    function get_Title: string;
    procedure set_Title(value: string);
    function get_Language: string;
    procedure set_Language(value: string);
    function get_AlternativeText: string;
    procedure set_AlternativeText(value: string);
    function get_ExpansionText: string;
    procedure set_ExpansionText(value: string);
    function get_ActualText: string;
    procedure set_ActualText(value: string);
    function get_ParentElement: DNLogicalStructure_Element;
    function get_ChildElements: DNElementList;

  { methods } 

    procedure ChangeParentElement(newParentElement: DNStructureElement);
    procedure GenerateId;
    procedure SetId(id: string);
    procedure ClearId;
    procedure SetTag(newTag: string);
    function ToString: string;
    function AppendChild(element: DNLogicalStructure_Element): DNLogicalStructure_Element;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    property DefaultAttributeOwner: DNAttributeOwnerStandard read get_DefaultAttributeOwner;
    property Attributes: DNStructureAttributeCollection read get_Attributes;
    property StructureType: DNStructureTypeStandard read get_StructureType;
    property ID: string read get_ID;
    property Title: string read get_Title write set_Title;
    property Language: string read get_Language write set_Language;
    property AlternativeText: string read get_AlternativeText write set_AlternativeText;
    property ExpansionText: string read get_ExpansionText write set_ExpansionText;
    property ActualText: string read get_ActualText write set_ActualText;
    property ParentElement: DNLogicalStructure_Element read get_ParentElement;
    property ChildElements: DNElementList read get_ChildElements;
  end;

  TDNNonStructElement = class(TDNGenericImport<DNNonStructElementClass, DNNonStructElement>) end;

  //-------------namespace: Aspose.Pdf.LogicalStructure----------------
  DNPartElementClass = interface(DNGroupingElementClass)
  ['{33BF5066-0B78-5E7B-96EF-3BD195812CBC}']
  end;

  [DNTypeName('Aspose.Pdf.LogicalStructure.PartElement')]
  DNPartElement = interface(DNGroupingElement)
  ['{44972E25-C88D-32E6-A580-5E5592DD1B35}']
  { getters & setters } 

    function get_DefaultAttributeOwner: DNAttributeOwnerStandard;
    function get_Attributes: DNStructureAttributeCollection;
    function get_StructureType: DNStructureTypeStandard;
    function get_ID: string;
    function get_Title: string;
    procedure set_Title(value: string);
    function get_Language: string;
    procedure set_Language(value: string);
    function get_AlternativeText: string;
    procedure set_AlternativeText(value: string);
    function get_ExpansionText: string;
    procedure set_ExpansionText(value: string);
    function get_ActualText: string;
    procedure set_ActualText(value: string);
    function get_ParentElement: DNLogicalStructure_Element;
    function get_ChildElements: DNElementList;

  { methods } 

    procedure ChangeParentElement(newParentElement: DNStructureElement);
    procedure GenerateId;
    procedure SetId(id: string);
    procedure ClearId;
    procedure SetTag(newTag: string);
    function ToString: string;
    function AppendChild(element: DNLogicalStructure_Element): DNLogicalStructure_Element;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    property DefaultAttributeOwner: DNAttributeOwnerStandard read get_DefaultAttributeOwner;
    property Attributes: DNStructureAttributeCollection read get_Attributes;
    property StructureType: DNStructureTypeStandard read get_StructureType;
    property ID: string read get_ID;
    property Title: string read get_Title write set_Title;
    property Language: string read get_Language write set_Language;
    property AlternativeText: string read get_AlternativeText write set_AlternativeText;
    property ExpansionText: string read get_ExpansionText write set_ExpansionText;
    property ActualText: string read get_ActualText write set_ActualText;
    property ParentElement: DNLogicalStructure_Element read get_ParentElement;
    property ChildElements: DNElementList read get_ChildElements;
  end;

  TDNPartElement = class(TDNGenericImport<DNPartElementClass, DNPartElement>) end;

  //-------------namespace: Aspose.Pdf.LogicalStructure----------------
  DNPrivateElementClass = interface(DNGroupingElementClass)
  ['{BBB1C08D-0A48-50C6-B79C-5C4169F75E8D}']
  end;

  [DNTypeName('Aspose.Pdf.LogicalStructure.PrivateElement')]
  DNPrivateElement = interface(DNGroupingElement)
  ['{89A5CD11-8DC7-3689-A55F-31A7563E6560}']
  { getters & setters } 

    function get_DefaultAttributeOwner: DNAttributeOwnerStandard;
    function get_Attributes: DNStructureAttributeCollection;
    function get_StructureType: DNStructureTypeStandard;
    function get_ID: string;
    function get_Title: string;
    procedure set_Title(value: string);
    function get_Language: string;
    procedure set_Language(value: string);
    function get_AlternativeText: string;
    procedure set_AlternativeText(value: string);
    function get_ExpansionText: string;
    procedure set_ExpansionText(value: string);
    function get_ActualText: string;
    procedure set_ActualText(value: string);
    function get_ParentElement: DNLogicalStructure_Element;
    function get_ChildElements: DNElementList;

  { methods } 

    procedure ChangeParentElement(newParentElement: DNStructureElement);
    procedure GenerateId;
    procedure SetId(id: string);
    procedure ClearId;
    procedure SetTag(newTag: string);
    function ToString: string;
    function AppendChild(element: DNLogicalStructure_Element): DNLogicalStructure_Element;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    property DefaultAttributeOwner: DNAttributeOwnerStandard read get_DefaultAttributeOwner;
    property Attributes: DNStructureAttributeCollection read get_Attributes;
    property StructureType: DNStructureTypeStandard read get_StructureType;
    property ID: string read get_ID;
    property Title: string read get_Title write set_Title;
    property Language: string read get_Language write set_Language;
    property AlternativeText: string read get_AlternativeText write set_AlternativeText;
    property ExpansionText: string read get_ExpansionText write set_ExpansionText;
    property ActualText: string read get_ActualText write set_ActualText;
    property ParentElement: DNLogicalStructure_Element read get_ParentElement;
    property ChildElements: DNElementList read get_ChildElements;
  end;

  TDNPrivateElement = class(TDNGenericImport<DNPrivateElementClass, DNPrivateElement>) end;

  //-------------namespace: Aspose.Pdf.LogicalStructure----------------
  DNSectElementClass = interface(DNGroupingElementClass)
  ['{DDE16308-7346-5DD6-BF56-87EC5B55E16A}']
  end;

  [DNTypeName('Aspose.Pdf.LogicalStructure.SectElement')]
  DNSectElement = interface(DNGroupingElement)
  ['{86F96621-629C-3A08-B7E4-C2574EAC01FA}']
  { getters & setters } 

    function get_DefaultAttributeOwner: DNAttributeOwnerStandard;
    function get_Attributes: DNStructureAttributeCollection;
    function get_StructureType: DNStructureTypeStandard;
    function get_ID: string;
    function get_Title: string;
    procedure set_Title(value: string);
    function get_Language: string;
    procedure set_Language(value: string);
    function get_AlternativeText: string;
    procedure set_AlternativeText(value: string);
    function get_ExpansionText: string;
    procedure set_ExpansionText(value: string);
    function get_ActualText: string;
    procedure set_ActualText(value: string);
    function get_ParentElement: DNLogicalStructure_Element;
    function get_ChildElements: DNElementList;

  { methods } 

    procedure ChangeParentElement(newParentElement: DNStructureElement);
    procedure GenerateId;
    procedure SetId(id: string);
    procedure ClearId;
    procedure SetTag(newTag: string);
    function ToString: string;
    function AppendChild(element: DNLogicalStructure_Element): DNLogicalStructure_Element;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    property DefaultAttributeOwner: DNAttributeOwnerStandard read get_DefaultAttributeOwner;
    property Attributes: DNStructureAttributeCollection read get_Attributes;
    property StructureType: DNStructureTypeStandard read get_StructureType;
    property ID: string read get_ID;
    property Title: string read get_Title write set_Title;
    property Language: string read get_Language write set_Language;
    property AlternativeText: string read get_AlternativeText write set_AlternativeText;
    property ExpansionText: string read get_ExpansionText write set_ExpansionText;
    property ActualText: string read get_ActualText write set_ActualText;
    property ParentElement: DNLogicalStructure_Element read get_ParentElement;
    property ChildElements: DNElementList read get_ChildElements;
  end;

  TDNSectElement = class(TDNGenericImport<DNSectElementClass, DNSectElement>) end;

  //-------------namespace: Aspose.Pdf.LogicalStructure----------------
  DNTOCElementClass = interface(DNGroupingElementClass)
  ['{73E838D8-39EA-5D4E-87B0-FE4B3680E436}']
  end;

  [DNTypeName('Aspose.Pdf.LogicalStructure.TOCElement')]
  DNTOCElement = interface(DNGroupingElement)
  ['{8CE14200-A335-3BFC-BE0D-C33F0418C659}']
  { getters & setters } 

    function get_DefaultAttributeOwner: DNAttributeOwnerStandard;
    function get_Attributes: DNStructureAttributeCollection;
    function get_StructureType: DNStructureTypeStandard;
    function get_ID: string;
    function get_Title: string;
    procedure set_Title(value: string);
    function get_Language: string;
    procedure set_Language(value: string);
    function get_AlternativeText: string;
    procedure set_AlternativeText(value: string);
    function get_ExpansionText: string;
    procedure set_ExpansionText(value: string);
    function get_ActualText: string;
    procedure set_ActualText(value: string);
    function get_ParentElement: DNLogicalStructure_Element;
    function get_ChildElements: DNElementList;

  { methods } 

    procedure ChangeParentElement(newParentElement: DNStructureElement);
    procedure GenerateId;
    procedure SetId(id: string);
    procedure ClearId;
    procedure SetTag(newTag: string);
    function ToString: string;
    function AppendChild(element: DNLogicalStructure_Element): DNLogicalStructure_Element;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    property DefaultAttributeOwner: DNAttributeOwnerStandard read get_DefaultAttributeOwner;
    property Attributes: DNStructureAttributeCollection read get_Attributes;
    property StructureType: DNStructureTypeStandard read get_StructureType;
    property ID: string read get_ID;
    property Title: string read get_Title write set_Title;
    property Language: string read get_Language write set_Language;
    property AlternativeText: string read get_AlternativeText write set_AlternativeText;
    property ExpansionText: string read get_ExpansionText write set_ExpansionText;
    property ActualText: string read get_ActualText write set_ActualText;
    property ParentElement: DNLogicalStructure_Element read get_ParentElement;
    property ChildElements: DNElementList read get_ChildElements;
  end;

  TDNTOCElement = class(TDNGenericImport<DNTOCElementClass, DNTOCElement>) end;

  //-------------namespace: Aspose.Pdf.LogicalStructure----------------
  DNTOCIElementClass = interface(DNGroupingElementClass)
  ['{15E0F9E7-BB89-5C7C-871D-7A9818AFBC9A}']
  end;

  [DNTypeName('Aspose.Pdf.LogicalStructure.TOCIElement')]
  DNTOCIElement = interface(DNGroupingElement)
  ['{629A5EDA-8B82-3194-A9BA-2A8F68659A73}']
  { getters & setters } 

    function get_DefaultAttributeOwner: DNAttributeOwnerStandard;
    function get_Attributes: DNStructureAttributeCollection;
    function get_StructureType: DNStructureTypeStandard;
    function get_ID: string;
    function get_Title: string;
    procedure set_Title(value: string);
    function get_Language: string;
    procedure set_Language(value: string);
    function get_AlternativeText: string;
    procedure set_AlternativeText(value: string);
    function get_ExpansionText: string;
    procedure set_ExpansionText(value: string);
    function get_ActualText: string;
    procedure set_ActualText(value: string);
    function get_ParentElement: DNLogicalStructure_Element;
    function get_ChildElements: DNElementList;

  { methods } 

    procedure ChangeParentElement(newParentElement: DNStructureElement);
    procedure GenerateId;
    procedure SetId(id: string);
    procedure ClearId;
    procedure SetTag(newTag: string);
    function ToString: string;
    function AppendChild(element: DNLogicalStructure_Element): DNLogicalStructure_Element;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    property DefaultAttributeOwner: DNAttributeOwnerStandard read get_DefaultAttributeOwner;
    property Attributes: DNStructureAttributeCollection read get_Attributes;
    property StructureType: DNStructureTypeStandard read get_StructureType;
    property ID: string read get_ID;
    property Title: string read get_Title write set_Title;
    property Language: string read get_Language write set_Language;
    property AlternativeText: string read get_AlternativeText write set_AlternativeText;
    property ExpansionText: string read get_ExpansionText write set_ExpansionText;
    property ActualText: string read get_ActualText write set_ActualText;
    property ParentElement: DNLogicalStructure_Element read get_ParentElement;
    property ChildElements: DNElementList read get_ChildElements;
  end;

  TDNTOCIElement = class(TDNGenericImport<DNTOCIElementClass, DNTOCIElement>) end;

  //-------------namespace: Aspose.Pdf.LogicalStructure----------------
  DNIllustrationElementClass = interface(DNStructureElementClass)
  ['{522CD933-ABE6-50FF-A6AD-F6CC20D54F8F}']
  end;

  [DNTypeName('Aspose.Pdf.LogicalStructure.IllustrationElement')]
  DNIllustrationElement = interface(DNStructureElement)
  ['{2805F646-8AAB-3142-8ADE-6B57C60477B2}']
  { getters & setters } 

    function get_DefaultAttributeOwner: DNAttributeOwnerStandard;
    function get_Attributes: DNStructureAttributeCollection;
    function get_StructureType: DNStructureTypeStandard;
    function get_ID: string;
    function get_Title: string;
    procedure set_Title(value: string);
    function get_Language: string;
    procedure set_Language(value: string);
    function get_AlternativeText: string;
    procedure set_AlternativeText(value: string);
    function get_ExpansionText: string;
    procedure set_ExpansionText(value: string);
    function get_ActualText: string;
    procedure set_ActualText(value: string);
    function get_ParentElement: DNLogicalStructure_Element;
    function get_ChildElements: DNElementList;

  { methods } 

    procedure SetImage(imageSrc: string; imageResolution: Double); overload;
    procedure SetImage(imageSrc: string; imageWidth: Double; imageHeight: Double); overload;
    procedure ChangeParentElement(newParentElement: DNStructureElement);
    procedure GenerateId;
    procedure SetId(id: string);
    procedure ClearId;
    procedure SetTag(newTag: string);
    function ToString: string;
    function AppendChild(element: DNLogicalStructure_Element): DNLogicalStructure_Element;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    property DefaultAttributeOwner: DNAttributeOwnerStandard read get_DefaultAttributeOwner;
    property Attributes: DNStructureAttributeCollection read get_Attributes;
    property StructureType: DNStructureTypeStandard read get_StructureType;
    property ID: string read get_ID;
    property Title: string read get_Title write set_Title;
    property Language: string read get_Language write set_Language;
    property AlternativeText: string read get_AlternativeText write set_AlternativeText;
    property ExpansionText: string read get_ExpansionText write set_ExpansionText;
    property ActualText: string read get_ActualText write set_ActualText;
    property ParentElement: DNLogicalStructure_Element read get_ParentElement;
    property ChildElements: DNElementList read get_ChildElements;
  end;

  TDNIllustrationElement = class(TDNGenericImport<DNIllustrationElementClass, DNIllustrationElement>) end;

  //-------------namespace: Aspose.Pdf.LogicalStructure----------------
  DNLogicalStructure_FigureElementClass = interface(DNIllustrationElementClass)
  ['{0819003A-5DE4-5675-92F1-FBC793CCFA47}']
  end;

  [DNTypeName('Aspose.Pdf.LogicalStructure.FigureElement')]
  DNLogicalStructure_FigureElement = interface(DNIllustrationElement)
  ['{47374206-2790-33B6-B7C6-B9D4AED8BB09}']
  { getters & setters } 

    function get_DefaultAttributeOwner: DNAttributeOwnerStandard;
    function get_Attributes: DNStructureAttributeCollection;
    function get_StructureType: DNStructureTypeStandard;
    function get_ID: string;
    function get_Title: string;
    procedure set_Title(value: string);
    function get_Language: string;
    procedure set_Language(value: string);
    function get_AlternativeText: string;
    procedure set_AlternativeText(value: string);
    function get_ExpansionText: string;
    procedure set_ExpansionText(value: string);
    function get_ActualText: string;
    procedure set_ActualText(value: string);
    function get_ParentElement: DNLogicalStructure_Element;
    function get_ChildElements: DNElementList;

  { methods } 

    procedure SetImage(imageSrc: string; imageResolution: Double); overload;
    procedure SetImage(imageSrc: string; imageWidth: Double; imageHeight: Double); overload;
    procedure ChangeParentElement(newParentElement: DNStructureElement);
    procedure GenerateId;
    procedure SetId(id: string);
    procedure ClearId;
    procedure SetTag(newTag: string);
    function ToString: string;
    function AppendChild(element: DNLogicalStructure_Element): DNLogicalStructure_Element;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    property DefaultAttributeOwner: DNAttributeOwnerStandard read get_DefaultAttributeOwner;
    property Attributes: DNStructureAttributeCollection read get_Attributes;
    property StructureType: DNStructureTypeStandard read get_StructureType;
    property ID: string read get_ID;
    property Title: string read get_Title write set_Title;
    property Language: string read get_Language write set_Language;
    property AlternativeText: string read get_AlternativeText write set_AlternativeText;
    property ExpansionText: string read get_ExpansionText write set_ExpansionText;
    property ActualText: string read get_ActualText write set_ActualText;
    property ParentElement: DNLogicalStructure_Element read get_ParentElement;
    property ChildElements: DNElementList read get_ChildElements;
  end;

  TDNLogicalStructure_FigureElement = class(TDNGenericImport<DNLogicalStructure_FigureElementClass, DNLogicalStructure_FigureElement>) end;

  //-------------namespace: Aspose.Pdf.LogicalStructure----------------
  DNFormElementClass = interface(DNIllustrationElementClass)
  ['{D933D999-AF6F-5CCA-9B4D-A3FFFC79E687}']
  end;

  [DNTypeName('Aspose.Pdf.LogicalStructure.FormElement')]
  DNFormElement = interface(DNIllustrationElement)
  ['{0AD16680-A7F8-3007-8D08-46CB75D2F13B}']
  { getters & setters } 

    function get_DefaultAttributeOwner: DNAttributeOwnerStandard;
    function get_Attributes: DNStructureAttributeCollection;
    function get_StructureType: DNStructureTypeStandard;
    function get_ID: string;
    function get_Title: string;
    procedure set_Title(value: string);
    function get_Language: string;
    procedure set_Language(value: string);
    function get_AlternativeText: string;
    procedure set_AlternativeText(value: string);
    function get_ExpansionText: string;
    procedure set_ExpansionText(value: string);
    function get_ActualText: string;
    procedure set_ActualText(value: string);
    function get_ParentElement: DNLogicalStructure_Element;
    function get_ChildElements: DNElementList;

  { methods } 

    procedure SetImage(imageSrc: string; imageResolution: Double); overload;
    procedure SetImage(imageSrc: string; imageWidth: Double; imageHeight: Double); overload;
    procedure ChangeParentElement(newParentElement: DNStructureElement);
    procedure GenerateId;
    procedure SetId(id: string);
    procedure ClearId;
    procedure SetTag(newTag: string);
    function ToString: string;
    function AppendChild(element: DNLogicalStructure_Element): DNLogicalStructure_Element;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    property DefaultAttributeOwner: DNAttributeOwnerStandard read get_DefaultAttributeOwner;
    property Attributes: DNStructureAttributeCollection read get_Attributes;
    property StructureType: DNStructureTypeStandard read get_StructureType;
    property ID: string read get_ID;
    property Title: string read get_Title write set_Title;
    property Language: string read get_Language write set_Language;
    property AlternativeText: string read get_AlternativeText write set_AlternativeText;
    property ExpansionText: string read get_ExpansionText write set_ExpansionText;
    property ActualText: string read get_ActualText write set_ActualText;
    property ParentElement: DNLogicalStructure_Element read get_ParentElement;
    property ChildElements: DNElementList read get_ChildElements;
  end;

  TDNFormElement = class(TDNGenericImport<DNFormElementClass, DNFormElement>) end;

  //-------------namespace: Aspose.Pdf.LogicalStructure----------------
  DNFormulaElementClass = interface(DNIllustrationElementClass)
  ['{637C8B61-AF83-5FE8-B8B6-39E3CF7AA478}']
  end;

  [DNTypeName('Aspose.Pdf.LogicalStructure.FormulaElement')]
  DNFormulaElement = interface(DNIllustrationElement)
  ['{92D910AE-F17A-3D79-BFCF-C560440ECD6B}']
  { getters & setters } 

    function get_DefaultAttributeOwner: DNAttributeOwnerStandard;
    function get_Attributes: DNStructureAttributeCollection;
    function get_StructureType: DNStructureTypeStandard;
    function get_ID: string;
    function get_Title: string;
    procedure set_Title(value: string);
    function get_Language: string;
    procedure set_Language(value: string);
    function get_AlternativeText: string;
    procedure set_AlternativeText(value: string);
    function get_ExpansionText: string;
    procedure set_ExpansionText(value: string);
    function get_ActualText: string;
    procedure set_ActualText(value: string);
    function get_ParentElement: DNLogicalStructure_Element;
    function get_ChildElements: DNElementList;

  { methods } 

    procedure SetImage(imageSrc: string; imageResolution: Double); overload;
    procedure SetImage(imageSrc: string; imageWidth: Double; imageHeight: Double); overload;
    procedure ChangeParentElement(newParentElement: DNStructureElement);
    procedure GenerateId;
    procedure SetId(id: string);
    procedure ClearId;
    procedure SetTag(newTag: string);
    function ToString: string;
    function AppendChild(element: DNLogicalStructure_Element): DNLogicalStructure_Element;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    property DefaultAttributeOwner: DNAttributeOwnerStandard read get_DefaultAttributeOwner;
    property Attributes: DNStructureAttributeCollection read get_Attributes;
    property StructureType: DNStructureTypeStandard read get_StructureType;
    property ID: string read get_ID;
    property Title: string read get_Title write set_Title;
    property Language: string read get_Language write set_Language;
    property AlternativeText: string read get_AlternativeText write set_AlternativeText;
    property ExpansionText: string read get_ExpansionText write set_ExpansionText;
    property ActualText: string read get_ActualText write set_ActualText;
    property ParentElement: DNLogicalStructure_Element read get_ParentElement;
    property ChildElements: DNElementList read get_ChildElements;
  end;

  TDNFormulaElement = class(TDNGenericImport<DNFormulaElementClass, DNFormulaElement>) end;

  //-------------namespace: Aspose.Pdf.LogicalStructure----------------
  DNILSElementClass = interface(DNStructureElementClass)
  ['{C7B09BE1-33A5-5554-9286-8636BCBCBA66}']
  end;

  [DNTypeName('Aspose.Pdf.LogicalStructure.ILSElement')]
  DNILSElement = interface(DNStructureElement)
  ['{BE0429C2-2EBB-330F-9CBB-D5DBF057E639}']
  { getters & setters } 

    function get_DefaultAttributeOwner: DNAttributeOwnerStandard;
    function get_Attributes: DNStructureAttributeCollection;
    function get_StructureType: DNStructureTypeStandard;
    function get_ID: string;
    function get_Title: string;
    procedure set_Title(value: string);
    function get_Language: string;
    procedure set_Language(value: string);
    function get_AlternativeText: string;
    procedure set_AlternativeText(value: string);
    function get_ExpansionText: string;
    procedure set_ExpansionText(value: string);
    function get_ActualText: string;
    procedure set_ActualText(value: string);
    function get_ParentElement: DNLogicalStructure_Element;
    function get_ChildElements: DNElementList;

  { methods } 

    procedure ChangeParentElement(newParentElement: DNStructureElement);
    procedure GenerateId;
    procedure SetId(id: string);
    procedure ClearId;
    procedure SetTag(newTag: string);
    function ToString: string;
    function AppendChild(element: DNLogicalStructure_Element): DNLogicalStructure_Element;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    property DefaultAttributeOwner: DNAttributeOwnerStandard read get_DefaultAttributeOwner;
    property Attributes: DNStructureAttributeCollection read get_Attributes;
    property StructureType: DNStructureTypeStandard read get_StructureType;
    property ID: string read get_ID;
    property Title: string read get_Title write set_Title;
    property Language: string read get_Language write set_Language;
    property AlternativeText: string read get_AlternativeText write set_AlternativeText;
    property ExpansionText: string read get_ExpansionText write set_ExpansionText;
    property ActualText: string read get_ActualText write set_ActualText;
    property ParentElement: DNLogicalStructure_Element read get_ParentElement;
    property ChildElements: DNElementList read get_ChildElements;
  end;

  TDNILSElement = class(TDNGenericImport<DNILSElementClass, DNILSElement>) end;

  //-------------namespace: Aspose.Pdf.LogicalStructure----------------
  DNAnnotationElementClass = interface(DNILSElementClass)
  ['{0E037239-45A4-5597-99EB-BBC5D92959EE}']
  end;

  [DNTypeName('Aspose.Pdf.LogicalStructure.AnnotationElement')]
  DNAnnotationElement = interface(DNILSElement)
  ['{A7CA795F-653E-3EF4-A014-EB427CD614E4}']
  { getters & setters } 

    function get_AlternateDescriptions: string;
    procedure set_AlternateDescriptions(value: string);
    function get_DefaultAttributeOwner: DNAttributeOwnerStandard;
    function get_Attributes: DNStructureAttributeCollection;
    function get_StructureType: DNStructureTypeStandard;
    function get_ID: string;
    function get_Title: string;
    procedure set_Title(value: string);
    function get_Language: string;
    procedure set_Language(value: string);
    function get_AlternativeText: string;
    procedure set_AlternativeText(value: string);
    function get_ExpansionText: string;
    procedure set_ExpansionText(value: string);
    function get_ActualText: string;
    procedure set_ActualText(value: string);
    function get_ParentElement: DNLogicalStructure_Element;
    function get_ChildElements: DNElementList;

  { methods } 

    procedure ChangeParentElement(newParentElement: DNStructureElement);
    procedure GenerateId;
    procedure SetId(id: string);
    procedure ClearId;
    procedure SetTag(newTag: string);
    function ToString: string;
    function AppendChild(element: DNLogicalStructure_Element): DNLogicalStructure_Element;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    property AlternateDescriptions: string read get_AlternateDescriptions write set_AlternateDescriptions;
    property DefaultAttributeOwner: DNAttributeOwnerStandard read get_DefaultAttributeOwner;
    property Attributes: DNStructureAttributeCollection read get_Attributes;
    property StructureType: DNStructureTypeStandard read get_StructureType;
    property ID: string read get_ID;
    property Title: string read get_Title write set_Title;
    property Language: string read get_Language write set_Language;
    property AlternativeText: string read get_AlternativeText write set_AlternativeText;
    property ExpansionText: string read get_ExpansionText write set_ExpansionText;
    property ActualText: string read get_ActualText write set_ActualText;
    property ParentElement: DNLogicalStructure_Element read get_ParentElement;
    property ChildElements: DNElementList read get_ChildElements;
  end;

  TDNAnnotationElement = class(TDNGenericImport<DNAnnotationElementClass, DNAnnotationElement>) end;

  //-------------namespace: Aspose.Pdf.LogicalStructure----------------
  DNAnnotElementClass = interface(DNAnnotationElementClass)
  ['{AAA54FC4-4D1D-55E0-ACB1-FD3CFDEE5A3C}']
  end;

  [DNTypeName('Aspose.Pdf.LogicalStructure.AnnotElement')]
  DNAnnotElement = interface(DNAnnotationElement)
  ['{40804EBF-624D-331F-83C9-7EF6A2857C85}']
  { getters & setters } 

    function get_AlternateDescriptions: string;
    procedure set_AlternateDescriptions(value: string);
    function get_DefaultAttributeOwner: DNAttributeOwnerStandard;
    function get_Attributes: DNStructureAttributeCollection;
    function get_StructureType: DNStructureTypeStandard;
    function get_ID: string;
    function get_Title: string;
    procedure set_Title(value: string);
    function get_Language: string;
    procedure set_Language(value: string);
    function get_AlternativeText: string;
    procedure set_AlternativeText(value: string);
    function get_ExpansionText: string;
    procedure set_ExpansionText(value: string);
    function get_ActualText: string;
    procedure set_ActualText(value: string);
    function get_ParentElement: DNLogicalStructure_Element;
    function get_ChildElements: DNElementList;

  { methods } 

    procedure ChangeParentElement(newParentElement: DNStructureElement);
    procedure GenerateId;
    procedure SetId(id: string);
    procedure ClearId;
    procedure SetTag(newTag: string);
    function ToString: string;
    function AppendChild(element: DNLogicalStructure_Element): DNLogicalStructure_Element;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    property AlternateDescriptions: string read get_AlternateDescriptions write set_AlternateDescriptions;
    property DefaultAttributeOwner: DNAttributeOwnerStandard read get_DefaultAttributeOwner;
    property Attributes: DNStructureAttributeCollection read get_Attributes;
    property StructureType: DNStructureTypeStandard read get_StructureType;
    property ID: string read get_ID;
    property Title: string read get_Title write set_Title;
    property Language: string read get_Language write set_Language;
    property AlternativeText: string read get_AlternativeText write set_AlternativeText;
    property ExpansionText: string read get_ExpansionText write set_ExpansionText;
    property ActualText: string read get_ActualText write set_ActualText;
    property ParentElement: DNLogicalStructure_Element read get_ParentElement;
    property ChildElements: DNElementList read get_ChildElements;
  end;

  TDNAnnotElement = class(TDNGenericImport<DNAnnotElementClass, DNAnnotElement>) end;

  //-------------namespace: Aspose.Pdf.LogicalStructure----------------
  DNLinkElementClass = interface(DNAnnotationElementClass)
  ['{B0126769-0104-5852-BCAE-C5520BBE7663}']
  end;

  [DNTypeName('Aspose.Pdf.LogicalStructure.LinkElement')]
  DNLinkElement = interface(DNAnnotationElement)
  ['{9E82ADCE-AD66-39D1-B31D-D15F6389037F}']
  { getters & setters } 

    function get_Hyperlink: DNHyperlink;
    procedure set_Hyperlink(value: DNHyperlink);
    function get_StructureTextState: DNStructureTextState;
    function get_AlternateDescriptions: string;
    procedure set_AlternateDescriptions(value: string);
    function get_DefaultAttributeOwner: DNAttributeOwnerStandard;
    function get_Attributes: DNStructureAttributeCollection;
    function get_StructureType: DNStructureTypeStandard;
    function get_ID: string;
    function get_Title: string;
    procedure set_Title(value: string);
    function get_Language: string;
    procedure set_Language(value: string);
    function get_AlternativeText: string;
    procedure set_AlternativeText(value: string);
    function get_ExpansionText: string;
    procedure set_ExpansionText(value: string);
    function get_ActualText: string;
    procedure set_ActualText(value: string);
    function get_ParentElement: DNLogicalStructure_Element;
    function get_ChildElements: DNElementList;

  { methods } 

    procedure SetText(text: string);
    procedure ChangeParentElement(newParentElement: DNStructureElement);
    procedure GenerateId;
    procedure SetId(id: string);
    procedure ClearId;
    procedure SetTag(newTag: string);
    function ToString: string;
    function AppendChild(element: DNLogicalStructure_Element): DNLogicalStructure_Element;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    property Hyperlink: DNHyperlink read get_Hyperlink write set_Hyperlink;
    property StructureTextState: DNStructureTextState read get_StructureTextState;
    property AlternateDescriptions: string read get_AlternateDescriptions write set_AlternateDescriptions;
    property DefaultAttributeOwner: DNAttributeOwnerStandard read get_DefaultAttributeOwner;
    property Attributes: DNStructureAttributeCollection read get_Attributes;
    property StructureType: DNStructureTypeStandard read get_StructureType;
    property ID: string read get_ID;
    property Title: string read get_Title write set_Title;
    property Language: string read get_Language write set_Language;
    property AlternativeText: string read get_AlternativeText write set_AlternativeText;
    property ExpansionText: string read get_ExpansionText write set_ExpansionText;
    property ActualText: string read get_ActualText write set_ActualText;
    property ParentElement: DNLogicalStructure_Element read get_ParentElement;
    property ChildElements: DNElementList read get_ChildElements;
  end;

  TDNLinkElement = class(TDNGenericImport<DNLinkElementClass, DNLinkElement>) end;

  //-------------namespace: Aspose.Pdf.LogicalStructure----------------
  DNBibEntryElementClass = interface(DNILSElementClass)
  ['{2CA9CC43-A7B9-5E16-92D2-F7DFE9BC8E55}']
  end;

  [DNTypeName('Aspose.Pdf.LogicalStructure.BibEntryElement')]
  DNBibEntryElement = interface(DNILSElement)
  ['{208083AE-4494-3EC8-AB69-1836A2238322}']
  { getters & setters } 

    function get_DefaultAttributeOwner: DNAttributeOwnerStandard;
    function get_Attributes: DNStructureAttributeCollection;
    function get_StructureType: DNStructureTypeStandard;
    function get_ID: string;
    function get_Title: string;
    procedure set_Title(value: string);
    function get_Language: string;
    procedure set_Language(value: string);
    function get_AlternativeText: string;
    procedure set_AlternativeText(value: string);
    function get_ExpansionText: string;
    procedure set_ExpansionText(value: string);
    function get_ActualText: string;
    procedure set_ActualText(value: string);
    function get_ParentElement: DNLogicalStructure_Element;
    function get_ChildElements: DNElementList;

  { methods } 

    procedure ChangeParentElement(newParentElement: DNStructureElement);
    procedure GenerateId;
    procedure SetId(id: string);
    procedure ClearId;
    procedure SetTag(newTag: string);
    function ToString: string;
    function AppendChild(element: DNLogicalStructure_Element): DNLogicalStructure_Element;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    property DefaultAttributeOwner: DNAttributeOwnerStandard read get_DefaultAttributeOwner;
    property Attributes: DNStructureAttributeCollection read get_Attributes;
    property StructureType: DNStructureTypeStandard read get_StructureType;
    property ID: string read get_ID;
    property Title: string read get_Title write set_Title;
    property Language: string read get_Language write set_Language;
    property AlternativeText: string read get_AlternativeText write set_AlternativeText;
    property ExpansionText: string read get_ExpansionText write set_ExpansionText;
    property ActualText: string read get_ActualText write set_ActualText;
    property ParentElement: DNLogicalStructure_Element read get_ParentElement;
    property ChildElements: DNElementList read get_ChildElements;
  end;

  TDNBibEntryElement = class(TDNGenericImport<DNBibEntryElementClass, DNBibEntryElement>) end;

  //-------------namespace: Aspose.Pdf.LogicalStructure----------------
  DNILSTextElementClass = interface(DNILSElementClass)
  ['{8495292D-E17F-52FB-B1F4-733D5360909F}']
  end;

  [DNTypeName('Aspose.Pdf.LogicalStructure.ILSTextElement')]
  DNILSTextElement = interface(DNILSElement)
  ['{B34BB10A-F30E-3ACB-B3AE-6E2A6ACCA571}']
  { getters & setters } 

    function get_StructureTextState: DNStructureTextState;
    function get_DefaultAttributeOwner: DNAttributeOwnerStandard;
    function get_Attributes: DNStructureAttributeCollection;
    function get_StructureType: DNStructureTypeStandard;
    function get_ID: string;
    function get_Title: string;
    procedure set_Title(value: string);
    function get_Language: string;
    procedure set_Language(value: string);
    function get_AlternativeText: string;
    procedure set_AlternativeText(value: string);
    function get_ExpansionText: string;
    procedure set_ExpansionText(value: string);
    function get_ActualText: string;
    procedure set_ActualText(value: string);
    function get_ParentElement: DNLogicalStructure_Element;
    function get_ChildElements: DNElementList;

  { methods } 

    procedure SetText(text: string);
    procedure ChangeParentElement(newParentElement: DNStructureElement);
    procedure GenerateId;
    procedure SetId(id: string);
    procedure ClearId;
    procedure SetTag(newTag: string);
    function ToString: string;
    function AppendChild(element: DNLogicalStructure_Element): DNLogicalStructure_Element;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    property StructureTextState: DNStructureTextState read get_StructureTextState;
    property DefaultAttributeOwner: DNAttributeOwnerStandard read get_DefaultAttributeOwner;
    property Attributes: DNStructureAttributeCollection read get_Attributes;
    property StructureType: DNStructureTypeStandard read get_StructureType;
    property ID: string read get_ID;
    property Title: string read get_Title write set_Title;
    property Language: string read get_Language write set_Language;
    property AlternativeText: string read get_AlternativeText write set_AlternativeText;
    property ExpansionText: string read get_ExpansionText write set_ExpansionText;
    property ActualText: string read get_ActualText write set_ActualText;
    property ParentElement: DNLogicalStructure_Element read get_ParentElement;
    property ChildElements: DNElementList read get_ChildElements;
  end;

  TDNILSTextElement = class(TDNGenericImport<DNILSTextElementClass, DNILSTextElement>) end;

  //-------------namespace: Aspose.Pdf.LogicalStructure----------------
  DNCodeElementClass = interface(DNILSTextElementClass)
  ['{D9ECB303-8F5A-5100-81E9-6434A10E8F06}']
  end;

  [DNTypeName('Aspose.Pdf.LogicalStructure.CodeElement')]
  DNCodeElement = interface(DNILSTextElement)
  ['{4B046FAA-2B1E-3EDD-A5ED-659CA72A4793}']
  { getters & setters } 

    function get_StructureTextState: DNStructureTextState;
    function get_DefaultAttributeOwner: DNAttributeOwnerStandard;
    function get_Attributes: DNStructureAttributeCollection;
    function get_StructureType: DNStructureTypeStandard;
    function get_ID: string;
    function get_Title: string;
    procedure set_Title(value: string);
    function get_Language: string;
    procedure set_Language(value: string);
    function get_AlternativeText: string;
    procedure set_AlternativeText(value: string);
    function get_ExpansionText: string;
    procedure set_ExpansionText(value: string);
    function get_ActualText: string;
    procedure set_ActualText(value: string);
    function get_ParentElement: DNLogicalStructure_Element;
    function get_ChildElements: DNElementList;

  { methods } 

    procedure SetText(text: string);
    procedure ChangeParentElement(newParentElement: DNStructureElement);
    procedure GenerateId;
    procedure SetId(id: string);
    procedure ClearId;
    procedure SetTag(newTag: string);
    function ToString: string;
    function AppendChild(element: DNLogicalStructure_Element): DNLogicalStructure_Element;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    property StructureTextState: DNStructureTextState read get_StructureTextState;
    property DefaultAttributeOwner: DNAttributeOwnerStandard read get_DefaultAttributeOwner;
    property Attributes: DNStructureAttributeCollection read get_Attributes;
    property StructureType: DNStructureTypeStandard read get_StructureType;
    property ID: string read get_ID;
    property Title: string read get_Title write set_Title;
    property Language: string read get_Language write set_Language;
    property AlternativeText: string read get_AlternativeText write set_AlternativeText;
    property ExpansionText: string read get_ExpansionText write set_ExpansionText;
    property ActualText: string read get_ActualText write set_ActualText;
    property ParentElement: DNLogicalStructure_Element read get_ParentElement;
    property ChildElements: DNElementList read get_ChildElements;
  end;

  TDNCodeElement = class(TDNGenericImport<DNCodeElementClass, DNCodeElement>) end;

  //-------------namespace: Aspose.Pdf.LogicalStructure----------------
  DNNoteElementClass = interface(DNILSTextElementClass)
  ['{59DC39FE-2E58-5B92-B663-7B744135FB90}']
  end;

  [DNTypeName('Aspose.Pdf.LogicalStructure.NoteElement')]
  DNNoteElement = interface(DNILSTextElement)
  ['{69E39160-09C1-373A-B760-283323835612}']
  { getters & setters } 

    function get_StructureTextState: DNStructureTextState;
    function get_DefaultAttributeOwner: DNAttributeOwnerStandard;
    function get_Attributes: DNStructureAttributeCollection;
    function get_StructureType: DNStructureTypeStandard;
    function get_ID: string;
    function get_Title: string;
    procedure set_Title(value: string);
    function get_Language: string;
    procedure set_Language(value: string);
    function get_AlternativeText: string;
    procedure set_AlternativeText(value: string);
    function get_ExpansionText: string;
    procedure set_ExpansionText(value: string);
    function get_ActualText: string;
    procedure set_ActualText(value: string);
    function get_ParentElement: DNLogicalStructure_Element;
    function get_ChildElements: DNElementList;

  { methods } 

    procedure SetText(text: string);
    procedure ChangeParentElement(newParentElement: DNStructureElement);
    procedure GenerateId;
    procedure SetId(id: string);
    procedure ClearId;
    procedure SetTag(newTag: string);
    function ToString: string;
    function AppendChild(element: DNLogicalStructure_Element): DNLogicalStructure_Element;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    property StructureTextState: DNStructureTextState read get_StructureTextState;
    property DefaultAttributeOwner: DNAttributeOwnerStandard read get_DefaultAttributeOwner;
    property Attributes: DNStructureAttributeCollection read get_Attributes;
    property StructureType: DNStructureTypeStandard read get_StructureType;
    property ID: string read get_ID;
    property Title: string read get_Title write set_Title;
    property Language: string read get_Language write set_Language;
    property AlternativeText: string read get_AlternativeText write set_AlternativeText;
    property ExpansionText: string read get_ExpansionText write set_ExpansionText;
    property ActualText: string read get_ActualText write set_ActualText;
    property ParentElement: DNLogicalStructure_Element read get_ParentElement;
    property ChildElements: DNElementList read get_ChildElements;
  end;

  TDNNoteElement = class(TDNGenericImport<DNNoteElementClass, DNNoteElement>) end;

  //-------------namespace: Aspose.Pdf.LogicalStructure----------------
  DNQuoteElementClass = interface(DNILSTextElementClass)
  ['{B6AB40A0-E05F-5D3D-B9C2-16B05360E945}']
  end;

  [DNTypeName('Aspose.Pdf.LogicalStructure.QuoteElement')]
  DNQuoteElement = interface(DNILSTextElement)
  ['{3BA026A6-143C-3911-AF21-E231CAEC5873}']
  { getters & setters } 

    function get_StructureTextState: DNStructureTextState;
    function get_DefaultAttributeOwner: DNAttributeOwnerStandard;
    function get_Attributes: DNStructureAttributeCollection;
    function get_StructureType: DNStructureTypeStandard;
    function get_ID: string;
    function get_Title: string;
    procedure set_Title(value: string);
    function get_Language: string;
    procedure set_Language(value: string);
    function get_AlternativeText: string;
    procedure set_AlternativeText(value: string);
    function get_ExpansionText: string;
    procedure set_ExpansionText(value: string);
    function get_ActualText: string;
    procedure set_ActualText(value: string);
    function get_ParentElement: DNLogicalStructure_Element;
    function get_ChildElements: DNElementList;

  { methods } 

    procedure SetText(text: string);
    procedure ChangeParentElement(newParentElement: DNStructureElement);
    procedure GenerateId;
    procedure SetId(id: string);
    procedure ClearId;
    procedure SetTag(newTag: string);
    function ToString: string;
    function AppendChild(element: DNLogicalStructure_Element): DNLogicalStructure_Element;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    property StructureTextState: DNStructureTextState read get_StructureTextState;
    property DefaultAttributeOwner: DNAttributeOwnerStandard read get_DefaultAttributeOwner;
    property Attributes: DNStructureAttributeCollection read get_Attributes;
    property StructureType: DNStructureTypeStandard read get_StructureType;
    property ID: string read get_ID;
    property Title: string read get_Title write set_Title;
    property Language: string read get_Language write set_Language;
    property AlternativeText: string read get_AlternativeText write set_AlternativeText;
    property ExpansionText: string read get_ExpansionText write set_ExpansionText;
    property ActualText: string read get_ActualText write set_ActualText;
    property ParentElement: DNLogicalStructure_Element read get_ParentElement;
    property ChildElements: DNElementList read get_ChildElements;
  end;

  TDNQuoteElement = class(TDNGenericImport<DNQuoteElementClass, DNQuoteElement>) end;

  //-------------namespace: Aspose.Pdf.LogicalStructure----------------
  DNSpanElementClass = interface(DNILSTextElementClass)
  ['{932D62F7-6365-5B13-B21B-1C9FAD5AE455}']
  end;

  [DNTypeName('Aspose.Pdf.LogicalStructure.SpanElement')]
  DNSpanElement = interface(DNILSTextElement)
  ['{6BA0A497-DB22-3C25-B6CB-2E120D40081D}']
  { getters & setters } 

    function get_StructureTextState: DNStructureTextState;
    function get_DefaultAttributeOwner: DNAttributeOwnerStandard;
    function get_Attributes: DNStructureAttributeCollection;
    function get_StructureType: DNStructureTypeStandard;
    function get_ID: string;
    function get_Title: string;
    procedure set_Title(value: string);
    function get_Language: string;
    procedure set_Language(value: string);
    function get_AlternativeText: string;
    procedure set_AlternativeText(value: string);
    function get_ExpansionText: string;
    procedure set_ExpansionText(value: string);
    function get_ActualText: string;
    procedure set_ActualText(value: string);
    function get_ParentElement: DNLogicalStructure_Element;
    function get_ChildElements: DNElementList;

  { methods } 

    procedure SetText(text: string);
    procedure ChangeParentElement(newParentElement: DNStructureElement);
    procedure GenerateId;
    procedure SetId(id: string);
    procedure ClearId;
    procedure SetTag(newTag: string);
    function ToString: string;
    function AppendChild(element: DNLogicalStructure_Element): DNLogicalStructure_Element;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    property StructureTextState: DNStructureTextState read get_StructureTextState;
    property DefaultAttributeOwner: DNAttributeOwnerStandard read get_DefaultAttributeOwner;
    property Attributes: DNStructureAttributeCollection read get_Attributes;
    property StructureType: DNStructureTypeStandard read get_StructureType;
    property ID: string read get_ID;
    property Title: string read get_Title write set_Title;
    property Language: string read get_Language write set_Language;
    property AlternativeText: string read get_AlternativeText write set_AlternativeText;
    property ExpansionText: string read get_ExpansionText write set_ExpansionText;
    property ActualText: string read get_ActualText write set_ActualText;
    property ParentElement: DNLogicalStructure_Element read get_ParentElement;
    property ChildElements: DNElementList read get_ChildElements;
  end;

  TDNSpanElement = class(TDNGenericImport<DNSpanElementClass, DNSpanElement>) end;

  //-------------namespace: Aspose.Pdf.LogicalStructure----------------
  DNReferenceElementClass = interface(DNILSElementClass)
  ['{5A69980D-B6B4-5366-AA7F-00E1EBEAD6C4}']
  end;

  [DNTypeName('Aspose.Pdf.LogicalStructure.ReferenceElement')]
  DNReferenceElement = interface(DNILSElement)
  ['{94842B5C-1FB0-3770-91F4-FC9C8E1166F8}']
  { getters & setters } 

    function get_DefaultAttributeOwner: DNAttributeOwnerStandard;
    function get_Attributes: DNStructureAttributeCollection;
    function get_StructureType: DNStructureTypeStandard;
    function get_ID: string;
    function get_Title: string;
    procedure set_Title(value: string);
    function get_Language: string;
    procedure set_Language(value: string);
    function get_AlternativeText: string;
    procedure set_AlternativeText(value: string);
    function get_ExpansionText: string;
    procedure set_ExpansionText(value: string);
    function get_ActualText: string;
    procedure set_ActualText(value: string);
    function get_ParentElement: DNLogicalStructure_Element;
    function get_ChildElements: DNElementList;

  { methods } 

    procedure ChangeParentElement(newParentElement: DNStructureElement);
    procedure GenerateId;
    procedure SetId(id: string);
    procedure ClearId;
    procedure SetTag(newTag: string);
    function ToString: string;
    function AppendChild(element: DNLogicalStructure_Element): DNLogicalStructure_Element;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    property DefaultAttributeOwner: DNAttributeOwnerStandard read get_DefaultAttributeOwner;
    property Attributes: DNStructureAttributeCollection read get_Attributes;
    property StructureType: DNStructureTypeStandard read get_StructureType;
    property ID: string read get_ID;
    property Title: string read get_Title write set_Title;
    property Language: string read get_Language write set_Language;
    property AlternativeText: string read get_AlternativeText write set_AlternativeText;
    property ExpansionText: string read get_ExpansionText write set_ExpansionText;
    property ActualText: string read get_ActualText write set_ActualText;
    property ParentElement: DNLogicalStructure_Element read get_ParentElement;
    property ChildElements: DNElementList read get_ChildElements;
  end;

  TDNReferenceElement = class(TDNGenericImport<DNReferenceElementClass, DNReferenceElement>) end;

  //-------------namespace: Aspose.Pdf.LogicalStructure----------------
  DNRubyElementClass = interface(DNILSElementClass)
  ['{2F9B898C-F367-56A7-9D9D-04086259BD2F}']
  end;

  [DNTypeName('Aspose.Pdf.LogicalStructure.RubyElement')]
  DNRubyElement = interface(DNILSElement)
  ['{CCA35861-C3B6-3085-A541-F065017012D2}']
  { getters & setters } 

    function get_DefaultAttributeOwner: DNAttributeOwnerStandard;
    function get_Attributes: DNStructureAttributeCollection;
    function get_StructureType: DNStructureTypeStandard;
    function get_ID: string;
    function get_Title: string;
    procedure set_Title(value: string);
    function get_Language: string;
    procedure set_Language(value: string);
    function get_AlternativeText: string;
    procedure set_AlternativeText(value: string);
    function get_ExpansionText: string;
    procedure set_ExpansionText(value: string);
    function get_ActualText: string;
    procedure set_ActualText(value: string);
    function get_ParentElement: DNLogicalStructure_Element;
    function get_ChildElements: DNElementList;

  { methods } 

    procedure ChangeParentElement(newParentElement: DNStructureElement);
    procedure GenerateId;
    procedure SetId(id: string);
    procedure ClearId;
    procedure SetTag(newTag: string);
    function ToString: string;
    function AppendChild(element: DNLogicalStructure_Element): DNLogicalStructure_Element;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    property DefaultAttributeOwner: DNAttributeOwnerStandard read get_DefaultAttributeOwner;
    property Attributes: DNStructureAttributeCollection read get_Attributes;
    property StructureType: DNStructureTypeStandard read get_StructureType;
    property ID: string read get_ID;
    property Title: string read get_Title write set_Title;
    property Language: string read get_Language write set_Language;
    property AlternativeText: string read get_AlternativeText write set_AlternativeText;
    property ExpansionText: string read get_ExpansionText write set_ExpansionText;
    property ActualText: string read get_ActualText write set_ActualText;
    property ParentElement: DNLogicalStructure_Element read get_ParentElement;
    property ChildElements: DNElementList read get_ChildElements;
  end;

  TDNRubyElement = class(TDNGenericImport<DNRubyElementClass, DNRubyElement>) end;

  //-------------namespace: Aspose.Pdf.LogicalStructure----------------
  DNWarichuElementClass = interface(DNILSElementClass)
  ['{5A0CDF46-AB8B-568D-8DE9-994DA1F69779}']
  end;

  [DNTypeName('Aspose.Pdf.LogicalStructure.WarichuElement')]
  DNWarichuElement = interface(DNILSElement)
  ['{196A48F7-CB36-3870-B072-AD1ECF6697DA}']
  { getters & setters } 

    function get_DefaultAttributeOwner: DNAttributeOwnerStandard;
    function get_Attributes: DNStructureAttributeCollection;
    function get_StructureType: DNStructureTypeStandard;
    function get_ID: string;
    function get_Title: string;
    procedure set_Title(value: string);
    function get_Language: string;
    procedure set_Language(value: string);
    function get_AlternativeText: string;
    procedure set_AlternativeText(value: string);
    function get_ExpansionText: string;
    procedure set_ExpansionText(value: string);
    function get_ActualText: string;
    procedure set_ActualText(value: string);
    function get_ParentElement: DNLogicalStructure_Element;
    function get_ChildElements: DNElementList;

  { methods } 

    procedure ChangeParentElement(newParentElement: DNStructureElement);
    procedure GenerateId;
    procedure SetId(id: string);
    procedure ClearId;
    procedure SetTag(newTag: string);
    function ToString: string;
    function AppendChild(element: DNLogicalStructure_Element): DNLogicalStructure_Element;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    property DefaultAttributeOwner: DNAttributeOwnerStandard read get_DefaultAttributeOwner;
    property Attributes: DNStructureAttributeCollection read get_Attributes;
    property StructureType: DNStructureTypeStandard read get_StructureType;
    property ID: string read get_ID;
    property Title: string read get_Title write set_Title;
    property Language: string read get_Language write set_Language;
    property AlternativeText: string read get_AlternativeText write set_AlternativeText;
    property ExpansionText: string read get_ExpansionText write set_ExpansionText;
    property ActualText: string read get_ActualText write set_ActualText;
    property ParentElement: DNLogicalStructure_Element read get_ParentElement;
    property ChildElements: DNElementList read get_ChildElements;
  end;

  TDNWarichuElement = class(TDNGenericImport<DNWarichuElementClass, DNWarichuElement>) end;

  //-------------namespace: Aspose.Pdf.LogicalStructure----------------
  DNListChildElementClass = interface(DNStructureElementClass)
  ['{BB66A8AB-AF2B-57B8-B6DA-F37DAC81504D}']
  end;

  [DNTypeName('Aspose.Pdf.LogicalStructure.ListChildElement')]
  DNListChildElement = interface(DNStructureElement)
  ['{B6D4388E-A694-3C67-B883-6F02CB39256E}']
  { getters & setters } 

    function get_DefaultAttributeOwner: DNAttributeOwnerStandard;
    function get_Attributes: DNStructureAttributeCollection;
    function get_StructureType: DNStructureTypeStandard;
    function get_ID: string;
    function get_Title: string;
    procedure set_Title(value: string);
    function get_Language: string;
    procedure set_Language(value: string);
    function get_AlternativeText: string;
    procedure set_AlternativeText(value: string);
    function get_ExpansionText: string;
    procedure set_ExpansionText(value: string);
    function get_ActualText: string;
    procedure set_ActualText(value: string);
    function get_ParentElement: DNLogicalStructure_Element;
    function get_ChildElements: DNElementList;

  { methods } 

    procedure ChangeParentElement(newParentElement: DNStructureElement);
    procedure GenerateId;
    procedure SetId(id: string);
    procedure ClearId;
    procedure SetTag(newTag: string);
    function ToString: string;
    function AppendChild(element: DNLogicalStructure_Element): DNLogicalStructure_Element;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    property DefaultAttributeOwner: DNAttributeOwnerStandard read get_DefaultAttributeOwner;
    property Attributes: DNStructureAttributeCollection read get_Attributes;
    property StructureType: DNStructureTypeStandard read get_StructureType;
    property ID: string read get_ID;
    property Title: string read get_Title write set_Title;
    property Language: string read get_Language write set_Language;
    property AlternativeText: string read get_AlternativeText write set_AlternativeText;
    property ExpansionText: string read get_ExpansionText write set_ExpansionText;
    property ActualText: string read get_ActualText write set_ActualText;
    property ParentElement: DNLogicalStructure_Element read get_ParentElement;
    property ChildElements: DNElementList read get_ChildElements;
  end;

  TDNListChildElement = class(TDNGenericImport<DNListChildElementClass, DNListChildElement>) end;

  //-------------namespace: Aspose.Pdf.LogicalStructure----------------
  DNListLblElementClass = interface(DNListChildElementClass)
  ['{D141DEBA-F66C-579F-A1A6-9CA29F2BE103}']
  end;

  [DNTypeName('Aspose.Pdf.LogicalStructure.ListLblElement')]
  DNListLblElement = interface(DNListChildElement)
  ['{B7F2632C-3BE7-399B-83BB-B7BE1B0A4236}']
  { getters & setters } 

    function get_DefaultAttributeOwner: DNAttributeOwnerStandard;
    function get_Attributes: DNStructureAttributeCollection;
    function get_StructureType: DNStructureTypeStandard;
    function get_ID: string;
    function get_Title: string;
    procedure set_Title(value: string);
    function get_Language: string;
    procedure set_Language(value: string);
    function get_AlternativeText: string;
    procedure set_AlternativeText(value: string);
    function get_ExpansionText: string;
    procedure set_ExpansionText(value: string);
    function get_ActualText: string;
    procedure set_ActualText(value: string);
    function get_ParentElement: DNLogicalStructure_Element;
    function get_ChildElements: DNElementList;

  { methods } 

    procedure ChangeParentElement(newParentElement: DNStructureElement);
    procedure GenerateId;
    procedure SetId(id: string);
    procedure ClearId;
    procedure SetTag(newTag: string);
    function ToString: string;
    function AppendChild(element: DNLogicalStructure_Element): DNLogicalStructure_Element;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    property DefaultAttributeOwner: DNAttributeOwnerStandard read get_DefaultAttributeOwner;
    property Attributes: DNStructureAttributeCollection read get_Attributes;
    property StructureType: DNStructureTypeStandard read get_StructureType;
    property ID: string read get_ID;
    property Title: string read get_Title write set_Title;
    property Language: string read get_Language write set_Language;
    property AlternativeText: string read get_AlternativeText write set_AlternativeText;
    property ExpansionText: string read get_ExpansionText write set_ExpansionText;
    property ActualText: string read get_ActualText write set_ActualText;
    property ParentElement: DNLogicalStructure_Element read get_ParentElement;
    property ChildElements: DNElementList read get_ChildElements;
  end;

  TDNListLblElement = class(TDNGenericImport<DNListLblElementClass, DNListLblElement>) end;

  //-------------namespace: Aspose.Pdf.LogicalStructure----------------
  DNListLBodyElementClass = interface(DNListChildElementClass)
  ['{5DE32CD2-2594-55F8-BC1B-93A7E9E71C01}']
  end;

  [DNTypeName('Aspose.Pdf.LogicalStructure.ListLBodyElement')]
  DNListLBodyElement = interface(DNListChildElement)
  ['{9C0B7FD4-4B68-3D6A-AFAF-29D39646A303}']
  { getters & setters } 

    function get_DefaultAttributeOwner: DNAttributeOwnerStandard;
    function get_Attributes: DNStructureAttributeCollection;
    function get_StructureType: DNStructureTypeStandard;
    function get_ID: string;
    function get_Title: string;
    procedure set_Title(value: string);
    function get_Language: string;
    procedure set_Language(value: string);
    function get_AlternativeText: string;
    procedure set_AlternativeText(value: string);
    function get_ExpansionText: string;
    procedure set_ExpansionText(value: string);
    function get_ActualText: string;
    procedure set_ActualText(value: string);
    function get_ParentElement: DNLogicalStructure_Element;
    function get_ChildElements: DNElementList;

  { methods } 

    procedure ChangeParentElement(newParentElement: DNStructureElement);
    procedure GenerateId;
    procedure SetId(id: string);
    procedure ClearId;
    procedure SetTag(newTag: string);
    function ToString: string;
    function AppendChild(element: DNLogicalStructure_Element): DNLogicalStructure_Element;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    property DefaultAttributeOwner: DNAttributeOwnerStandard read get_DefaultAttributeOwner;
    property Attributes: DNStructureAttributeCollection read get_Attributes;
    property StructureType: DNStructureTypeStandard read get_StructureType;
    property ID: string read get_ID;
    property Title: string read get_Title write set_Title;
    property Language: string read get_Language write set_Language;
    property AlternativeText: string read get_AlternativeText write set_AlternativeText;
    property ExpansionText: string read get_ExpansionText write set_ExpansionText;
    property ActualText: string read get_ActualText write set_ActualText;
    property ParentElement: DNLogicalStructure_Element read get_ParentElement;
    property ChildElements: DNElementList read get_ChildElements;
  end;

  TDNListLBodyElement = class(TDNGenericImport<DNListLBodyElementClass, DNListLBodyElement>) end;

  //-------------namespace: Aspose.Pdf.LogicalStructure----------------
  DNListLIElementClass = interface(DNListChildElementClass)
  ['{CB7A950F-CB1F-5F59-8A2C-2D054758144B}']
  end;

  [DNTypeName('Aspose.Pdf.LogicalStructure.ListLIElement')]
  DNListLIElement = interface(DNListChildElement)
  ['{C4E78C5C-D283-39F5-81F6-8EFF35803A27}']
  { getters & setters } 

    function get_DefaultAttributeOwner: DNAttributeOwnerStandard;
    function get_Attributes: DNStructureAttributeCollection;
    function get_StructureType: DNStructureTypeStandard;
    function get_ID: string;
    function get_Title: string;
    procedure set_Title(value: string);
    function get_Language: string;
    procedure set_Language(value: string);
    function get_AlternativeText: string;
    procedure set_AlternativeText(value: string);
    function get_ExpansionText: string;
    procedure set_ExpansionText(value: string);
    function get_ActualText: string;
    procedure set_ActualText(value: string);
    function get_ParentElement: DNLogicalStructure_Element;
    function get_ChildElements: DNElementList;

  { methods } 

    procedure ChangeParentElement(newParentElement: DNStructureElement);
    procedure GenerateId;
    procedure SetId(id: string);
    procedure ClearId;
    procedure SetTag(newTag: string);
    function ToString: string;
    function AppendChild(element: DNLogicalStructure_Element): DNLogicalStructure_Element;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    property DefaultAttributeOwner: DNAttributeOwnerStandard read get_DefaultAttributeOwner;
    property Attributes: DNStructureAttributeCollection read get_Attributes;
    property StructureType: DNStructureTypeStandard read get_StructureType;
    property ID: string read get_ID;
    property Title: string read get_Title write set_Title;
    property Language: string read get_Language write set_Language;
    property AlternativeText: string read get_AlternativeText write set_AlternativeText;
    property ExpansionText: string read get_ExpansionText write set_ExpansionText;
    property ActualText: string read get_ActualText write set_ActualText;
    property ParentElement: DNLogicalStructure_Element read get_ParentElement;
    property ChildElements: DNElementList read get_ChildElements;
  end;

  TDNListLIElement = class(TDNGenericImport<DNListLIElementClass, DNListLIElement>) end;

  //-------------namespace: Aspose.Pdf.LogicalStructure----------------
  DNRubyChildElementClass = interface(DNStructureElementClass)
  ['{2A615454-DD30-5FEF-B97A-3D9C7331CC69}']
  end;

  [DNTypeName('Aspose.Pdf.LogicalStructure.RubyChildElement')]
  DNRubyChildElement = interface(DNStructureElement)
  ['{F74E6875-07FA-34B8-9DCF-DCEC7061C704}']
  { getters & setters } 

    function get_DefaultAttributeOwner: DNAttributeOwnerStandard;
    function get_Attributes: DNStructureAttributeCollection;
    function get_StructureType: DNStructureTypeStandard;
    function get_ID: string;
    function get_Title: string;
    procedure set_Title(value: string);
    function get_Language: string;
    procedure set_Language(value: string);
    function get_AlternativeText: string;
    procedure set_AlternativeText(value: string);
    function get_ExpansionText: string;
    procedure set_ExpansionText(value: string);
    function get_ActualText: string;
    procedure set_ActualText(value: string);
    function get_ParentElement: DNLogicalStructure_Element;
    function get_ChildElements: DNElementList;

  { methods } 

    procedure ChangeParentElement(newParentElement: DNStructureElement);
    procedure GenerateId;
    procedure SetId(id: string);
    procedure ClearId;
    procedure SetTag(newTag: string);
    function ToString: string;
    function AppendChild(element: DNLogicalStructure_Element): DNLogicalStructure_Element;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    property DefaultAttributeOwner: DNAttributeOwnerStandard read get_DefaultAttributeOwner;
    property Attributes: DNStructureAttributeCollection read get_Attributes;
    property StructureType: DNStructureTypeStandard read get_StructureType;
    property ID: string read get_ID;
    property Title: string read get_Title write set_Title;
    property Language: string read get_Language write set_Language;
    property AlternativeText: string read get_AlternativeText write set_AlternativeText;
    property ExpansionText: string read get_ExpansionText write set_ExpansionText;
    property ActualText: string read get_ActualText write set_ActualText;
    property ParentElement: DNLogicalStructure_Element read get_ParentElement;
    property ChildElements: DNElementList read get_ChildElements;
  end;

  TDNRubyChildElement = class(TDNGenericImport<DNRubyChildElementClass, DNRubyChildElement>) end;

  //-------------namespace: Aspose.Pdf.LogicalStructure----------------
  DNRubyRBElementClass = interface(DNRubyChildElementClass)
  ['{0B37C0E1-1F75-5150-B506-268C0B6AF94F}']
  end;

  [DNTypeName('Aspose.Pdf.LogicalStructure.RubyRBElement')]
  DNRubyRBElement = interface(DNRubyChildElement)
  ['{BD984455-372E-33CD-BC17-15E69865A4B1}']
  { getters & setters } 

    function get_DefaultAttributeOwner: DNAttributeOwnerStandard;
    function get_Attributes: DNStructureAttributeCollection;
    function get_StructureType: DNStructureTypeStandard;
    function get_ID: string;
    function get_Title: string;
    procedure set_Title(value: string);
    function get_Language: string;
    procedure set_Language(value: string);
    function get_AlternativeText: string;
    procedure set_AlternativeText(value: string);
    function get_ExpansionText: string;
    procedure set_ExpansionText(value: string);
    function get_ActualText: string;
    procedure set_ActualText(value: string);
    function get_ParentElement: DNLogicalStructure_Element;
    function get_ChildElements: DNElementList;

  { methods } 

    procedure ChangeParentElement(newParentElement: DNStructureElement);
    procedure GenerateId;
    procedure SetId(id: string);
    procedure ClearId;
    procedure SetTag(newTag: string);
    function ToString: string;
    function AppendChild(element: DNLogicalStructure_Element): DNLogicalStructure_Element;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    property DefaultAttributeOwner: DNAttributeOwnerStandard read get_DefaultAttributeOwner;
    property Attributes: DNStructureAttributeCollection read get_Attributes;
    property StructureType: DNStructureTypeStandard read get_StructureType;
    property ID: string read get_ID;
    property Title: string read get_Title write set_Title;
    property Language: string read get_Language write set_Language;
    property AlternativeText: string read get_AlternativeText write set_AlternativeText;
    property ExpansionText: string read get_ExpansionText write set_ExpansionText;
    property ActualText: string read get_ActualText write set_ActualText;
    property ParentElement: DNLogicalStructure_Element read get_ParentElement;
    property ChildElements: DNElementList read get_ChildElements;
  end;

  TDNRubyRBElement = class(TDNGenericImport<DNRubyRBElementClass, DNRubyRBElement>) end;

  //-------------namespace: Aspose.Pdf.LogicalStructure----------------
  DNRubyRPElementClass = interface(DNRubyChildElementClass)
  ['{A6FE9FA8-BD30-5716-AAB0-25938D8AEE4E}']
  end;

  [DNTypeName('Aspose.Pdf.LogicalStructure.RubyRPElement')]
  DNRubyRPElement = interface(DNRubyChildElement)
  ['{C64EC370-B4C3-3C67-8997-721B4C588D95}']
  { getters & setters } 

    function get_DefaultAttributeOwner: DNAttributeOwnerStandard;
    function get_Attributes: DNStructureAttributeCollection;
    function get_StructureType: DNStructureTypeStandard;
    function get_ID: string;
    function get_Title: string;
    procedure set_Title(value: string);
    function get_Language: string;
    procedure set_Language(value: string);
    function get_AlternativeText: string;
    procedure set_AlternativeText(value: string);
    function get_ExpansionText: string;
    procedure set_ExpansionText(value: string);
    function get_ActualText: string;
    procedure set_ActualText(value: string);
    function get_ParentElement: DNLogicalStructure_Element;
    function get_ChildElements: DNElementList;

  { methods } 

    procedure ChangeParentElement(newParentElement: DNStructureElement);
    procedure GenerateId;
    procedure SetId(id: string);
    procedure ClearId;
    procedure SetTag(newTag: string);
    function ToString: string;
    function AppendChild(element: DNLogicalStructure_Element): DNLogicalStructure_Element;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    property DefaultAttributeOwner: DNAttributeOwnerStandard read get_DefaultAttributeOwner;
    property Attributes: DNStructureAttributeCollection read get_Attributes;
    property StructureType: DNStructureTypeStandard read get_StructureType;
    property ID: string read get_ID;
    property Title: string read get_Title write set_Title;
    property Language: string read get_Language write set_Language;
    property AlternativeText: string read get_AlternativeText write set_AlternativeText;
    property ExpansionText: string read get_ExpansionText write set_ExpansionText;
    property ActualText: string read get_ActualText write set_ActualText;
    property ParentElement: DNLogicalStructure_Element read get_ParentElement;
    property ChildElements: DNElementList read get_ChildElements;
  end;

  TDNRubyRPElement = class(TDNGenericImport<DNRubyRPElementClass, DNRubyRPElement>) end;

  //-------------namespace: Aspose.Pdf.LogicalStructure----------------
  DNRubyRTElementClass = interface(DNRubyChildElementClass)
  ['{D660FFBB-1F6E-5B39-A27B-F77828BF90A9}']
  end;

  [DNTypeName('Aspose.Pdf.LogicalStructure.RubyRTElement')]
  DNRubyRTElement = interface(DNRubyChildElement)
  ['{F7772D2D-C6FA-3BE9-9C18-166886AFFEAE}']
  { getters & setters } 

    function get_DefaultAttributeOwner: DNAttributeOwnerStandard;
    function get_Attributes: DNStructureAttributeCollection;
    function get_StructureType: DNStructureTypeStandard;
    function get_ID: string;
    function get_Title: string;
    procedure set_Title(value: string);
    function get_Language: string;
    procedure set_Language(value: string);
    function get_AlternativeText: string;
    procedure set_AlternativeText(value: string);
    function get_ExpansionText: string;
    procedure set_ExpansionText(value: string);
    function get_ActualText: string;
    procedure set_ActualText(value: string);
    function get_ParentElement: DNLogicalStructure_Element;
    function get_ChildElements: DNElementList;

  { methods } 

    procedure ChangeParentElement(newParentElement: DNStructureElement);
    procedure GenerateId;
    procedure SetId(id: string);
    procedure ClearId;
    procedure SetTag(newTag: string);
    function ToString: string;
    function AppendChild(element: DNLogicalStructure_Element): DNLogicalStructure_Element;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    property DefaultAttributeOwner: DNAttributeOwnerStandard read get_DefaultAttributeOwner;
    property Attributes: DNStructureAttributeCollection read get_Attributes;
    property StructureType: DNStructureTypeStandard read get_StructureType;
    property ID: string read get_ID;
    property Title: string read get_Title write set_Title;
    property Language: string read get_Language write set_Language;
    property AlternativeText: string read get_AlternativeText write set_AlternativeText;
    property ExpansionText: string read get_ExpansionText write set_ExpansionText;
    property ActualText: string read get_ActualText write set_ActualText;
    property ParentElement: DNLogicalStructure_Element read get_ParentElement;
    property ChildElements: DNElementList read get_ChildElements;
  end;

  TDNRubyRTElement = class(TDNGenericImport<DNRubyRTElementClass, DNRubyRTElement>) end;

  //-------------namespace: Aspose.Pdf.LogicalStructure----------------
  DNTableChildElementClass = interface(DNStructureElementClass)
  ['{3C077B51-9B74-55D1-9C35-1A36E0F5E525}']
  end;

  [DNTypeName('Aspose.Pdf.LogicalStructure.TableChildElement')]
  DNTableChildElement = interface(DNStructureElement)
  ['{CEC78EDF-EC98-355E-BBAF-9C71209BCC78}']
  { getters & setters } 

    function get_DefaultAttributeOwner: DNAttributeOwnerStandard;
    function get_Attributes: DNStructureAttributeCollection;
    function get_StructureType: DNStructureTypeStandard;
    function get_ID: string;
    function get_Title: string;
    procedure set_Title(value: string);
    function get_Language: string;
    procedure set_Language(value: string);
    function get_AlternativeText: string;
    procedure set_AlternativeText(value: string);
    function get_ExpansionText: string;
    procedure set_ExpansionText(value: string);
    function get_ActualText: string;
    procedure set_ActualText(value: string);
    function get_ParentElement: DNLogicalStructure_Element;
    function get_ChildElements: DNElementList;

  { methods } 

    procedure ChangeParentElement(newParentElement: DNStructureElement);
    procedure GenerateId;
    procedure SetId(id: string);
    procedure ClearId;
    procedure SetTag(newTag: string);
    function ToString: string;
    function AppendChild(element: DNLogicalStructure_Element): DNLogicalStructure_Element;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    property DefaultAttributeOwner: DNAttributeOwnerStandard read get_DefaultAttributeOwner;
    property Attributes: DNStructureAttributeCollection read get_Attributes;
    property StructureType: DNStructureTypeStandard read get_StructureType;
    property ID: string read get_ID;
    property Title: string read get_Title write set_Title;
    property Language: string read get_Language write set_Language;
    property AlternativeText: string read get_AlternativeText write set_AlternativeText;
    property ExpansionText: string read get_ExpansionText write set_ExpansionText;
    property ActualText: string read get_ActualText write set_ActualText;
    property ParentElement: DNLogicalStructure_Element read get_ParentElement;
    property ChildElements: DNElementList read get_ChildElements;
  end;

  TDNTableChildElement = class(TDNGenericImport<DNTableChildElementClass, DNTableChildElement>) end;

  //-------------namespace: Aspose.Pdf.LogicalStructure----------------
  DNTableCellElementClass = interface(DNTableChildElementClass)
  ['{73625AA5-61B1-5DB3-9C8C-6249EEAC0921}']
  end;

  [DNTypeName('Aspose.Pdf.LogicalStructure.TableCellElement')]
  DNTableCellElement = interface(DNTableChildElement)
  ['{0E3A3644-1C76-3515-A1DC-199FAD2D68F3}']
  { getters & setters } 

    function get_BackgroundColor: DNColor;
    procedure set_BackgroundColor(value: DNColor);
    function get_Border: DNBorderInfo;
    procedure set_Border(value: DNBorderInfo);
    function get_IsNoBorder: Boolean;
    procedure set_IsNoBorder(value: Boolean);
    function get_Margin: DNMarginInfo;
    procedure set_Margin(value: DNMarginInfo);
    function get_Alignment: DNHorizontalAlignment;
    procedure set_Alignment(value: DNHorizontalAlignment);
    function get_DefaultCellTextState: DNTextState;
    procedure set_DefaultCellTextState(value: DNTextState);
    function get_IsWordWrapped: Boolean;
    procedure set_IsWordWrapped(value: Boolean);
    function get_VerticalAlignment: DNVerticalAlignment;
    procedure set_VerticalAlignment(value: DNVerticalAlignment);
    function get_ColSpan: Int32;
    procedure set_ColSpan(value: Int32);
    function get_RowSpan: Int32;
    procedure set_RowSpan(value: Int32);
    function get_StructureTextState: DNStructureTextState;
    function get_DefaultAttributeOwner: DNAttributeOwnerStandard;
    function get_Attributes: DNStructureAttributeCollection;
    function get_StructureType: DNStructureTypeStandard;
    function get_ID: string;
    function get_Title: string;
    procedure set_Title(value: string);
    function get_Language: string;
    procedure set_Language(value: string);
    function get_AlternativeText: string;
    procedure set_AlternativeText(value: string);
    function get_ExpansionText: string;
    procedure set_ExpansionText(value: string);
    function get_ActualText: string;
    procedure set_ActualText(value: string);
    function get_ParentElement: DNLogicalStructure_Element;
    function get_ChildElements: DNElementList;

  { methods } 

    procedure SetText(text: string);
    procedure ChangeParentElement(newParentElement: DNStructureElement);
    procedure GenerateId;
    procedure SetId(id: string);
    procedure ClearId;
    procedure SetTag(newTag: string);
    function ToString: string;
    function AppendChild(element: DNLogicalStructure_Element): DNLogicalStructure_Element;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    property BackgroundColor: DNColor read get_BackgroundColor write set_BackgroundColor;
    property Border: DNBorderInfo read get_Border write set_Border;
    property IsNoBorder: Boolean read get_IsNoBorder write set_IsNoBorder;
    property Margin: DNMarginInfo read get_Margin write set_Margin;
    property Alignment: DNHorizontalAlignment read get_Alignment write set_Alignment;
    property DefaultCellTextState: DNTextState read get_DefaultCellTextState write set_DefaultCellTextState;
    property IsWordWrapped: Boolean read get_IsWordWrapped write set_IsWordWrapped;
    property VerticalAlignment: DNVerticalAlignment read get_VerticalAlignment write set_VerticalAlignment;
    property ColSpan: Int32 read get_ColSpan write set_ColSpan;
    property RowSpan: Int32 read get_RowSpan write set_RowSpan;
    property StructureTextState: DNStructureTextState read get_StructureTextState;
    property DefaultAttributeOwner: DNAttributeOwnerStandard read get_DefaultAttributeOwner;
    property Attributes: DNStructureAttributeCollection read get_Attributes;
    property StructureType: DNStructureTypeStandard read get_StructureType;
    property ID: string read get_ID;
    property Title: string read get_Title write set_Title;
    property Language: string read get_Language write set_Language;
    property AlternativeText: string read get_AlternativeText write set_AlternativeText;
    property ExpansionText: string read get_ExpansionText write set_ExpansionText;
    property ActualText: string read get_ActualText write set_ActualText;
    property ParentElement: DNLogicalStructure_Element read get_ParentElement;
    property ChildElements: DNElementList read get_ChildElements;
  end;

  TDNTableCellElement = class(TDNGenericImport<DNTableCellElementClass, DNTableCellElement>) end;

  //-------------namespace: Aspose.Pdf.LogicalStructure----------------
  DNTableTDElementClass = interface(DNTableCellElementClass)
  ['{3E204500-F08D-59BC-BD2B-61A73FE56ED5}']
  end;

  [DNTypeName('Aspose.Pdf.LogicalStructure.TableTDElement')]
  DNTableTDElement = interface(DNTableCellElement)
  ['{3FD997F3-F083-3B3E-A5A1-FC3AE86C70DF}']
  { getters & setters } 

    function get_BackgroundColor: DNColor;
    procedure set_BackgroundColor(value: DNColor);
    function get_Border: DNBorderInfo;
    procedure set_Border(value: DNBorderInfo);
    function get_IsNoBorder: Boolean;
    procedure set_IsNoBorder(value: Boolean);
    function get_Margin: DNMarginInfo;
    procedure set_Margin(value: DNMarginInfo);
    function get_Alignment: DNHorizontalAlignment;
    procedure set_Alignment(value: DNHorizontalAlignment);
    function get_DefaultCellTextState: DNTextState;
    procedure set_DefaultCellTextState(value: DNTextState);
    function get_IsWordWrapped: Boolean;
    procedure set_IsWordWrapped(value: Boolean);
    function get_VerticalAlignment: DNVerticalAlignment;
    procedure set_VerticalAlignment(value: DNVerticalAlignment);
    function get_ColSpan: Int32;
    procedure set_ColSpan(value: Int32);
    function get_RowSpan: Int32;
    procedure set_RowSpan(value: Int32);
    function get_StructureTextState: DNStructureTextState;
    function get_DefaultAttributeOwner: DNAttributeOwnerStandard;
    function get_Attributes: DNStructureAttributeCollection;
    function get_StructureType: DNStructureTypeStandard;
    function get_ID: string;
    function get_Title: string;
    procedure set_Title(value: string);
    function get_Language: string;
    procedure set_Language(value: string);
    function get_AlternativeText: string;
    procedure set_AlternativeText(value: string);
    function get_ExpansionText: string;
    procedure set_ExpansionText(value: string);
    function get_ActualText: string;
    procedure set_ActualText(value: string);
    function get_ParentElement: DNLogicalStructure_Element;
    function get_ChildElements: DNElementList;

  { methods } 

    procedure SetText(text: string);
    procedure ChangeParentElement(newParentElement: DNStructureElement);
    procedure GenerateId;
    procedure SetId(id: string);
    procedure ClearId;
    procedure SetTag(newTag: string);
    function ToString: string;
    function AppendChild(element: DNLogicalStructure_Element): DNLogicalStructure_Element;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    property BackgroundColor: DNColor read get_BackgroundColor write set_BackgroundColor;
    property Border: DNBorderInfo read get_Border write set_Border;
    property IsNoBorder: Boolean read get_IsNoBorder write set_IsNoBorder;
    property Margin: DNMarginInfo read get_Margin write set_Margin;
    property Alignment: DNHorizontalAlignment read get_Alignment write set_Alignment;
    property DefaultCellTextState: DNTextState read get_DefaultCellTextState write set_DefaultCellTextState;
    property IsWordWrapped: Boolean read get_IsWordWrapped write set_IsWordWrapped;
    property VerticalAlignment: DNVerticalAlignment read get_VerticalAlignment write set_VerticalAlignment;
    property ColSpan: Int32 read get_ColSpan write set_ColSpan;
    property RowSpan: Int32 read get_RowSpan write set_RowSpan;
    property StructureTextState: DNStructureTextState read get_StructureTextState;
    property DefaultAttributeOwner: DNAttributeOwnerStandard read get_DefaultAttributeOwner;
    property Attributes: DNStructureAttributeCollection read get_Attributes;
    property StructureType: DNStructureTypeStandard read get_StructureType;
    property ID: string read get_ID;
    property Title: string read get_Title write set_Title;
    property Language: string read get_Language write set_Language;
    property AlternativeText: string read get_AlternativeText write set_AlternativeText;
    property ExpansionText: string read get_ExpansionText write set_ExpansionText;
    property ActualText: string read get_ActualText write set_ActualText;
    property ParentElement: DNLogicalStructure_Element read get_ParentElement;
    property ChildElements: DNElementList read get_ChildElements;
  end;

  TDNTableTDElement = class(TDNGenericImport<DNTableTDElementClass, DNTableTDElement>) end;

  //-------------namespace: Aspose.Pdf.LogicalStructure----------------
  DNTableTHElementClass = interface(DNTableCellElementClass)
  ['{C0ED83C7-30F2-54E7-89A1-BED24E799B5F}']
  end;

  [DNTypeName('Aspose.Pdf.LogicalStructure.TableTHElement')]
  DNTableTHElement = interface(DNTableCellElement)
  ['{27404CD2-EFC1-39D9-94B5-09C1E5DB8810}']
  { getters & setters } 

    function get_BackgroundColor: DNColor;
    procedure set_BackgroundColor(value: DNColor);
    function get_Border: DNBorderInfo;
    procedure set_Border(value: DNBorderInfo);
    function get_IsNoBorder: Boolean;
    procedure set_IsNoBorder(value: Boolean);
    function get_Margin: DNMarginInfo;
    procedure set_Margin(value: DNMarginInfo);
    function get_Alignment: DNHorizontalAlignment;
    procedure set_Alignment(value: DNHorizontalAlignment);
    function get_DefaultCellTextState: DNTextState;
    procedure set_DefaultCellTextState(value: DNTextState);
    function get_IsWordWrapped: Boolean;
    procedure set_IsWordWrapped(value: Boolean);
    function get_VerticalAlignment: DNVerticalAlignment;
    procedure set_VerticalAlignment(value: DNVerticalAlignment);
    function get_ColSpan: Int32;
    procedure set_ColSpan(value: Int32);
    function get_RowSpan: Int32;
    procedure set_RowSpan(value: Int32);
    function get_StructureTextState: DNStructureTextState;
    function get_DefaultAttributeOwner: DNAttributeOwnerStandard;
    function get_Attributes: DNStructureAttributeCollection;
    function get_StructureType: DNStructureTypeStandard;
    function get_ID: string;
    function get_Title: string;
    procedure set_Title(value: string);
    function get_Language: string;
    procedure set_Language(value: string);
    function get_AlternativeText: string;
    procedure set_AlternativeText(value: string);
    function get_ExpansionText: string;
    procedure set_ExpansionText(value: string);
    function get_ActualText: string;
    procedure set_ActualText(value: string);
    function get_ParentElement: DNLogicalStructure_Element;
    function get_ChildElements: DNElementList;

  { methods } 

    procedure SetText(text: string);
    procedure ChangeParentElement(newParentElement: DNStructureElement);
    procedure GenerateId;
    procedure SetId(id: string);
    procedure ClearId;
    procedure SetTag(newTag: string);
    function ToString: string;
    function AppendChild(element: DNLogicalStructure_Element): DNLogicalStructure_Element;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    property BackgroundColor: DNColor read get_BackgroundColor write set_BackgroundColor;
    property Border: DNBorderInfo read get_Border write set_Border;
    property IsNoBorder: Boolean read get_IsNoBorder write set_IsNoBorder;
    property Margin: DNMarginInfo read get_Margin write set_Margin;
    property Alignment: DNHorizontalAlignment read get_Alignment write set_Alignment;
    property DefaultCellTextState: DNTextState read get_DefaultCellTextState write set_DefaultCellTextState;
    property IsWordWrapped: Boolean read get_IsWordWrapped write set_IsWordWrapped;
    property VerticalAlignment: DNVerticalAlignment read get_VerticalAlignment write set_VerticalAlignment;
    property ColSpan: Int32 read get_ColSpan write set_ColSpan;
    property RowSpan: Int32 read get_RowSpan write set_RowSpan;
    property StructureTextState: DNStructureTextState read get_StructureTextState;
    property DefaultAttributeOwner: DNAttributeOwnerStandard read get_DefaultAttributeOwner;
    property Attributes: DNStructureAttributeCollection read get_Attributes;
    property StructureType: DNStructureTypeStandard read get_StructureType;
    property ID: string read get_ID;
    property Title: string read get_Title write set_Title;
    property Language: string read get_Language write set_Language;
    property AlternativeText: string read get_AlternativeText write set_AlternativeText;
    property ExpansionText: string read get_ExpansionText write set_ExpansionText;
    property ActualText: string read get_ActualText write set_ActualText;
    property ParentElement: DNLogicalStructure_Element read get_ParentElement;
    property ChildElements: DNElementList read get_ChildElements;
  end;

  TDNTableTHElement = class(TDNGenericImport<DNTableTHElementClass, DNTableTHElement>) end;

  //-------------namespace: Aspose.Pdf.LogicalStructure----------------
  DNTableRowCollectionElementClass = interface(DNTableChildElementClass)
  ['{D96C7642-4682-511B-ADB5-9777E192266D}']
  end;

  [DNTypeName('Aspose.Pdf.LogicalStructure.TableRowCollectionElement')]
  DNTableRowCollectionElement = interface(DNTableChildElement)
  ['{E0D5B47C-23CF-3C03-8C8F-141CF2C2A461}']
  { getters & setters } 

    function get_DefaultAttributeOwner: DNAttributeOwnerStandard;
    function get_Attributes: DNStructureAttributeCollection;
    function get_StructureType: DNStructureTypeStandard;
    function get_ID: string;
    function get_Title: string;
    procedure set_Title(value: string);
    function get_Language: string;
    procedure set_Language(value: string);
    function get_AlternativeText: string;
    procedure set_AlternativeText(value: string);
    function get_ExpansionText: string;
    procedure set_ExpansionText(value: string);
    function get_ActualText: string;
    procedure set_ActualText(value: string);
    function get_ParentElement: DNLogicalStructure_Element;
    function get_ChildElements: DNElementList;

  { methods } 

    function CreateTR: DNTableTRElement;
    procedure ChangeParentElement(newParentElement: DNStructureElement);
    procedure GenerateId;
    procedure SetId(id: string);
    procedure ClearId;
    procedure SetTag(newTag: string);
    function ToString: string;
    function AppendChild(element: DNLogicalStructure_Element): DNLogicalStructure_Element;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    property DefaultAttributeOwner: DNAttributeOwnerStandard read get_DefaultAttributeOwner;
    property Attributes: DNStructureAttributeCollection read get_Attributes;
    property StructureType: DNStructureTypeStandard read get_StructureType;
    property ID: string read get_ID;
    property Title: string read get_Title write set_Title;
    property Language: string read get_Language write set_Language;
    property AlternativeText: string read get_AlternativeText write set_AlternativeText;
    property ExpansionText: string read get_ExpansionText write set_ExpansionText;
    property ActualText: string read get_ActualText write set_ActualText;
    property ParentElement: DNLogicalStructure_Element read get_ParentElement;
    property ChildElements: DNElementList read get_ChildElements;
  end;

  TDNTableRowCollectionElement = class(TDNGenericImport<DNTableRowCollectionElementClass, DNTableRowCollectionElement>) end;

  //-------------namespace: Aspose.Pdf.LogicalStructure----------------
  DNTableTBodyElementClass = interface(DNTableRowCollectionElementClass)
  ['{CF917C44-04AB-589D-9B06-8D6B46F06448}']
  end;

  [DNTypeName('Aspose.Pdf.LogicalStructure.TableTBodyElement')]
  DNTableTBodyElement = interface(DNTableRowCollectionElement)
  ['{96F142C5-8D3F-34FD-B154-705406F8EC28}']
  { getters & setters } 

    function get_DefaultAttributeOwner: DNAttributeOwnerStandard;
    function get_Attributes: DNStructureAttributeCollection;
    function get_StructureType: DNStructureTypeStandard;
    function get_ID: string;
    function get_Title: string;
    procedure set_Title(value: string);
    function get_Language: string;
    procedure set_Language(value: string);
    function get_AlternativeText: string;
    procedure set_AlternativeText(value: string);
    function get_ExpansionText: string;
    procedure set_ExpansionText(value: string);
    function get_ActualText: string;
    procedure set_ActualText(value: string);
    function get_ParentElement: DNLogicalStructure_Element;
    function get_ChildElements: DNElementList;

  { methods } 

    function CreateTR: DNTableTRElement;
    procedure ChangeParentElement(newParentElement: DNStructureElement);
    procedure GenerateId;
    procedure SetId(id: string);
    procedure ClearId;
    procedure SetTag(newTag: string);
    function ToString: string;
    function AppendChild(element: DNLogicalStructure_Element): DNLogicalStructure_Element;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    property DefaultAttributeOwner: DNAttributeOwnerStandard read get_DefaultAttributeOwner;
    property Attributes: DNStructureAttributeCollection read get_Attributes;
    property StructureType: DNStructureTypeStandard read get_StructureType;
    property ID: string read get_ID;
    property Title: string read get_Title write set_Title;
    property Language: string read get_Language write set_Language;
    property AlternativeText: string read get_AlternativeText write set_AlternativeText;
    property ExpansionText: string read get_ExpansionText write set_ExpansionText;
    property ActualText: string read get_ActualText write set_ActualText;
    property ParentElement: DNLogicalStructure_Element read get_ParentElement;
    property ChildElements: DNElementList read get_ChildElements;
  end;

  TDNTableTBodyElement = class(TDNGenericImport<DNTableTBodyElementClass, DNTableTBodyElement>) end;

  //-------------namespace: Aspose.Pdf.LogicalStructure----------------
  DNTableTFootElementClass = interface(DNTableRowCollectionElementClass)
  ['{A22C8F56-3EA2-59E2-AE0B-FA550ABAAFC5}']
  end;

  [DNTypeName('Aspose.Pdf.LogicalStructure.TableTFootElement')]
  DNTableTFootElement = interface(DNTableRowCollectionElement)
  ['{4B12946C-0C5B-3BBB-9802-D918A1EF6744}']
  { getters & setters } 

    function get_DefaultAttributeOwner: DNAttributeOwnerStandard;
    function get_Attributes: DNStructureAttributeCollection;
    function get_StructureType: DNStructureTypeStandard;
    function get_ID: string;
    function get_Title: string;
    procedure set_Title(value: string);
    function get_Language: string;
    procedure set_Language(value: string);
    function get_AlternativeText: string;
    procedure set_AlternativeText(value: string);
    function get_ExpansionText: string;
    procedure set_ExpansionText(value: string);
    function get_ActualText: string;
    procedure set_ActualText(value: string);
    function get_ParentElement: DNLogicalStructure_Element;
    function get_ChildElements: DNElementList;

  { methods } 

    function CreateTR: DNTableTRElement;
    procedure ChangeParentElement(newParentElement: DNStructureElement);
    procedure GenerateId;
    procedure SetId(id: string);
    procedure ClearId;
    procedure SetTag(newTag: string);
    function ToString: string;
    function AppendChild(element: DNLogicalStructure_Element): DNLogicalStructure_Element;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    property DefaultAttributeOwner: DNAttributeOwnerStandard read get_DefaultAttributeOwner;
    property Attributes: DNStructureAttributeCollection read get_Attributes;
    property StructureType: DNStructureTypeStandard read get_StructureType;
    property ID: string read get_ID;
    property Title: string read get_Title write set_Title;
    property Language: string read get_Language write set_Language;
    property AlternativeText: string read get_AlternativeText write set_AlternativeText;
    property ExpansionText: string read get_ExpansionText write set_ExpansionText;
    property ActualText: string read get_ActualText write set_ActualText;
    property ParentElement: DNLogicalStructure_Element read get_ParentElement;
    property ChildElements: DNElementList read get_ChildElements;
  end;

  TDNTableTFootElement = class(TDNGenericImport<DNTableTFootElementClass, DNTableTFootElement>) end;

  //-------------namespace: Aspose.Pdf.LogicalStructure----------------
  DNTableTHeadElementClass = interface(DNTableRowCollectionElementClass)
  ['{2A94808D-7DC6-553B-8D26-7A00F1627FE9}']
  end;

  [DNTypeName('Aspose.Pdf.LogicalStructure.TableTHeadElement')]
  DNTableTHeadElement = interface(DNTableRowCollectionElement)
  ['{CEDD93F6-9B06-3C6C-944F-5CCDE4433B00}']
  { getters & setters } 

    function get_DefaultAttributeOwner: DNAttributeOwnerStandard;
    function get_Attributes: DNStructureAttributeCollection;
    function get_StructureType: DNStructureTypeStandard;
    function get_ID: string;
    function get_Title: string;
    procedure set_Title(value: string);
    function get_Language: string;
    procedure set_Language(value: string);
    function get_AlternativeText: string;
    procedure set_AlternativeText(value: string);
    function get_ExpansionText: string;
    procedure set_ExpansionText(value: string);
    function get_ActualText: string;
    procedure set_ActualText(value: string);
    function get_ParentElement: DNLogicalStructure_Element;
    function get_ChildElements: DNElementList;

  { methods } 

    function CreateTR: DNTableTRElement;
    procedure ChangeParentElement(newParentElement: DNStructureElement);
    procedure GenerateId;
    procedure SetId(id: string);
    procedure ClearId;
    procedure SetTag(newTag: string);
    function ToString: string;
    function AppendChild(element: DNLogicalStructure_Element): DNLogicalStructure_Element;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    property DefaultAttributeOwner: DNAttributeOwnerStandard read get_DefaultAttributeOwner;
    property Attributes: DNStructureAttributeCollection read get_Attributes;
    property StructureType: DNStructureTypeStandard read get_StructureType;
    property ID: string read get_ID;
    property Title: string read get_Title write set_Title;
    property Language: string read get_Language write set_Language;
    property AlternativeText: string read get_AlternativeText write set_AlternativeText;
    property ExpansionText: string read get_ExpansionText write set_ExpansionText;
    property ActualText: string read get_ActualText write set_ActualText;
    property ParentElement: DNLogicalStructure_Element read get_ParentElement;
    property ChildElements: DNElementList read get_ChildElements;
  end;

  TDNTableTHeadElement = class(TDNGenericImport<DNTableTHeadElementClass, DNTableTHeadElement>) end;

  //-------------namespace: Aspose.Pdf.LogicalStructure----------------
  DNTableTRElementClass = interface(DNTableChildElementClass)
  ['{E5E7907F-9E2A-5629-B86D-397EF84F29D4}']
  end;

  [DNTypeName('Aspose.Pdf.LogicalStructure.TableTRElement')]
  DNTableTRElement = interface(DNTableChildElement)
  ['{233DD425-D593-38DB-8D78-DD925489B47B}']
  { getters & setters } 

    function get_BackgroundColor: DNColor;
    procedure set_BackgroundColor(value: DNColor);
    function get_Border: DNBorderInfo;
    procedure set_Border(value: DNBorderInfo);
    function get_DefaultCellBorder: DNBorderInfo;
    procedure set_DefaultCellBorder(value: DNBorderInfo);
    function get_MinRowHeight: Double;
    procedure set_MinRowHeight(value: Double);
    function get_FixedRowHeight: Double;
    procedure set_FixedRowHeight(value: Double);
    function get_IsInNewPage: Boolean;
    procedure set_IsInNewPage(value: Boolean);
    function get_IsRowBroken: Boolean;
    procedure set_IsRowBroken(value: Boolean);
    function get_DefaultCellTextState: DNTextState;
    procedure set_DefaultCellTextState(value: DNTextState);
    function get_DefaultCellPadding: DNMarginInfo;
    procedure set_DefaultCellPadding(value: DNMarginInfo);
    function get_VerticalAlignment: DNVerticalAlignment;
    procedure set_VerticalAlignment(value: DNVerticalAlignment);
    function get_DefaultAttributeOwner: DNAttributeOwnerStandard;
    function get_Attributes: DNStructureAttributeCollection;
    function get_StructureType: DNStructureTypeStandard;
    function get_ID: string;
    function get_Title: string;
    procedure set_Title(value: string);
    function get_Language: string;
    procedure set_Language(value: string);
    function get_AlternativeText: string;
    procedure set_AlternativeText(value: string);
    function get_ExpansionText: string;
    procedure set_ExpansionText(value: string);
    function get_ActualText: string;
    procedure set_ActualText(value: string);
    function get_ParentElement: DNLogicalStructure_Element;
    function get_ChildElements: DNElementList;

  { methods } 

    function CreateTH: DNTableTHElement;
    function CreateTD: DNTableTDElement;
    procedure ChangeParentElement(newParentElement: DNStructureElement);
    procedure GenerateId;
    procedure SetId(id: string);
    procedure ClearId;
    procedure SetTag(newTag: string);
    function ToString: string;
    function AppendChild(element: DNLogicalStructure_Element): DNLogicalStructure_Element;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    property BackgroundColor: DNColor read get_BackgroundColor write set_BackgroundColor;
    property Border: DNBorderInfo read get_Border write set_Border;
    property DefaultCellBorder: DNBorderInfo read get_DefaultCellBorder write set_DefaultCellBorder;
    property MinRowHeight: Double read get_MinRowHeight write set_MinRowHeight;
    property FixedRowHeight: Double read get_FixedRowHeight write set_FixedRowHeight;
    property IsInNewPage: Boolean read get_IsInNewPage write set_IsInNewPage;
    property IsRowBroken: Boolean read get_IsRowBroken write set_IsRowBroken;
    property DefaultCellTextState: DNTextState read get_DefaultCellTextState write set_DefaultCellTextState;
    property DefaultCellPadding: DNMarginInfo read get_DefaultCellPadding write set_DefaultCellPadding;
    property VerticalAlignment: DNVerticalAlignment read get_VerticalAlignment write set_VerticalAlignment;
    property DefaultAttributeOwner: DNAttributeOwnerStandard read get_DefaultAttributeOwner;
    property Attributes: DNStructureAttributeCollection read get_Attributes;
    property StructureType: DNStructureTypeStandard read get_StructureType;
    property ID: string read get_ID;
    property Title: string read get_Title write set_Title;
    property Language: string read get_Language write set_Language;
    property AlternativeText: string read get_AlternativeText write set_AlternativeText;
    property ExpansionText: string read get_ExpansionText write set_ExpansionText;
    property ActualText: string read get_ActualText write set_ActualText;
    property ParentElement: DNLogicalStructure_Element read get_ParentElement;
    property ChildElements: DNElementList read get_ChildElements;
  end;

  TDNTableTRElement = class(TDNGenericImport<DNTableTRElementClass, DNTableTRElement>) end;

  //-------------namespace: Aspose.Pdf.LogicalStructure----------------
  DNWarichuChildElementClass = interface(DNStructureElementClass)
  ['{3AEB8FD9-ABF6-54B1-A6BF-37E0A6294C16}']
  end;

  [DNTypeName('Aspose.Pdf.LogicalStructure.WarichuChildElement')]
  DNWarichuChildElement = interface(DNStructureElement)
  ['{43FBA080-6E59-394E-8A6D-95C97D2E0FF9}']
  { getters & setters } 

    function get_DefaultAttributeOwner: DNAttributeOwnerStandard;
    function get_Attributes: DNStructureAttributeCollection;
    function get_StructureType: DNStructureTypeStandard;
    function get_ID: string;
    function get_Title: string;
    procedure set_Title(value: string);
    function get_Language: string;
    procedure set_Language(value: string);
    function get_AlternativeText: string;
    procedure set_AlternativeText(value: string);
    function get_ExpansionText: string;
    procedure set_ExpansionText(value: string);
    function get_ActualText: string;
    procedure set_ActualText(value: string);
    function get_ParentElement: DNLogicalStructure_Element;
    function get_ChildElements: DNElementList;

  { methods } 

    procedure ChangeParentElement(newParentElement: DNStructureElement);
    procedure GenerateId;
    procedure SetId(id: string);
    procedure ClearId;
    procedure SetTag(newTag: string);
    function ToString: string;
    function AppendChild(element: DNLogicalStructure_Element): DNLogicalStructure_Element;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    property DefaultAttributeOwner: DNAttributeOwnerStandard read get_DefaultAttributeOwner;
    property Attributes: DNStructureAttributeCollection read get_Attributes;
    property StructureType: DNStructureTypeStandard read get_StructureType;
    property ID: string read get_ID;
    property Title: string read get_Title write set_Title;
    property Language: string read get_Language write set_Language;
    property AlternativeText: string read get_AlternativeText write set_AlternativeText;
    property ExpansionText: string read get_ExpansionText write set_ExpansionText;
    property ActualText: string read get_ActualText write set_ActualText;
    property ParentElement: DNLogicalStructure_Element read get_ParentElement;
    property ChildElements: DNElementList read get_ChildElements;
  end;

  TDNWarichuChildElement = class(TDNGenericImport<DNWarichuChildElementClass, DNWarichuChildElement>) end;

  //-------------namespace: Aspose.Pdf.LogicalStructure----------------
  DNWarichuWPElementClass = interface(DNWarichuChildElementClass)
  ['{6FE2D54D-0CA5-5297-B964-DF382007636D}']
  end;

  [DNTypeName('Aspose.Pdf.LogicalStructure.WarichuWPElement')]
  DNWarichuWPElement = interface(DNWarichuChildElement)
  ['{11B1B879-E438-38D6-B965-E55E0FF42A27}']
  { getters & setters } 

    function get_DefaultAttributeOwner: DNAttributeOwnerStandard;
    function get_Attributes: DNStructureAttributeCollection;
    function get_StructureType: DNStructureTypeStandard;
    function get_ID: string;
    function get_Title: string;
    procedure set_Title(value: string);
    function get_Language: string;
    procedure set_Language(value: string);
    function get_AlternativeText: string;
    procedure set_AlternativeText(value: string);
    function get_ExpansionText: string;
    procedure set_ExpansionText(value: string);
    function get_ActualText: string;
    procedure set_ActualText(value: string);
    function get_ParentElement: DNLogicalStructure_Element;
    function get_ChildElements: DNElementList;

  { methods } 

    procedure ChangeParentElement(newParentElement: DNStructureElement);
    procedure GenerateId;
    procedure SetId(id: string);
    procedure ClearId;
    procedure SetTag(newTag: string);
    function ToString: string;
    function AppendChild(element: DNLogicalStructure_Element): DNLogicalStructure_Element;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    property DefaultAttributeOwner: DNAttributeOwnerStandard read get_DefaultAttributeOwner;
    property Attributes: DNStructureAttributeCollection read get_Attributes;
    property StructureType: DNStructureTypeStandard read get_StructureType;
    property ID: string read get_ID;
    property Title: string read get_Title write set_Title;
    property Language: string read get_Language write set_Language;
    property AlternativeText: string read get_AlternativeText write set_AlternativeText;
    property ExpansionText: string read get_ExpansionText write set_ExpansionText;
    property ActualText: string read get_ActualText write set_ActualText;
    property ParentElement: DNLogicalStructure_Element read get_ParentElement;
    property ChildElements: DNElementList read get_ChildElements;
  end;

  TDNWarichuWPElement = class(TDNGenericImport<DNWarichuWPElementClass, DNWarichuWPElement>) end;

  //-------------namespace: Aspose.Pdf.LogicalStructure----------------
  DNWarichuWTElementClass = interface(DNWarichuChildElementClass)
  ['{91947A80-7200-5569-BD6A-9A9CB935236E}']
  end;

  [DNTypeName('Aspose.Pdf.LogicalStructure.WarichuWTElement')]
  DNWarichuWTElement = interface(DNWarichuChildElement)
  ['{F5250DF3-98C2-3731-BC64-0A83EBF7E9E0}']
  { getters & setters } 

    function get_DefaultAttributeOwner: DNAttributeOwnerStandard;
    function get_Attributes: DNStructureAttributeCollection;
    function get_StructureType: DNStructureTypeStandard;
    function get_ID: string;
    function get_Title: string;
    procedure set_Title(value: string);
    function get_Language: string;
    procedure set_Language(value: string);
    function get_AlternativeText: string;
    procedure set_AlternativeText(value: string);
    function get_ExpansionText: string;
    procedure set_ExpansionText(value: string);
    function get_ActualText: string;
    procedure set_ActualText(value: string);
    function get_ParentElement: DNLogicalStructure_Element;
    function get_ChildElements: DNElementList;

  { methods } 

    procedure ChangeParentElement(newParentElement: DNStructureElement);
    procedure GenerateId;
    procedure SetId(id: string);
    procedure ClearId;
    procedure SetTag(newTag: string);
    function ToString: string;
    function AppendChild(element: DNLogicalStructure_Element): DNLogicalStructure_Element;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    property DefaultAttributeOwner: DNAttributeOwnerStandard read get_DefaultAttributeOwner;
    property Attributes: DNStructureAttributeCollection read get_Attributes;
    property StructureType: DNStructureTypeStandard read get_StructureType;
    property ID: string read get_ID;
    property Title: string read get_Title write set_Title;
    property Language: string read get_Language write set_Language;
    property AlternativeText: string read get_AlternativeText write set_AlternativeText;
    property ExpansionText: string read get_ExpansionText write set_ExpansionText;
    property ActualText: string read get_ActualText write set_ActualText;
    property ParentElement: DNLogicalStructure_Element read get_ParentElement;
    property ChildElements: DNElementList read get_ChildElements;
  end;

  TDNWarichuWTElement = class(TDNGenericImport<DNWarichuWTElementClass, DNWarichuWTElement>) end;

  //-------------namespace: Aspose.Pdf.LogicalStructure----------------
  DNElementListClass = interface(DDN.mscorlib.DNObjectClass)
  ['{578F0DAA-7496-5B75-B53E-F083242C1AEE}']
  end;

  [DNTypeName('Aspose.Pdf.LogicalStructure.ElementList')]
  DNElementList = interface(DDN.mscorlib.DNObject)
  ['{262A7C40-E4D5-39C2-9109-648B6A83AF74}']
  { getters & setters } 

    function get_Count: Int32;
    function get_ElementOf(index: Int32): DNLogicalStructure_Element;

  { methods } 

    function Item(index: Int32): DNLogicalStructure_Element;
    function GetEnumerator: DDN.mscorlib.DNIEnumerator<DNLogicalStructure_Element>;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Count: Int32 read get_Count;
    property ElementOf[index: Int32]: DNLogicalStructure_Element read get_ElementOf; default;
  end;

  TDNElementList = class(TDNGenericImport<DNElementListClass, DNElementList>) end;

  //-------------namespace: Aspose.Pdf.LogicalStructure----------------
  DNStructureAttributeClass = interface(DDN.mscorlib.DNObjectClass)
  ['{CC902FF3-26C6-5311-AF92-9D989AC872DD}']
  { constructors } 

    {class} function init(attributeKey: DNAttributeKey): DNStructureAttribute;

  end;

  [DNTypeName('Aspose.Pdf.LogicalStructure.StructureAttribute')]
  DNStructureAttribute = interface(DDN.mscorlib.DNObject)
  ['{B9F8ACDE-481F-375B-9E76-5553019377B4}']
  { getters & setters } 

    function get_Key: DNAttributeKey;
    function get_IsInitializedValue: Boolean;

  { methods } 

    function GetNameValue: DNAttributeName;
    function GetStringValue: string;
    function GetNumberValue: DDN.mscorlib.DNNullable<Double>;
    function GetArrayValue: TArray<DNAttributeName>;
    function GetArrayNumberValue: TArray<DDN.mscorlib.DNNullable<Double>>;
    procedure SetNameValue(name: DNAttributeName);
    procedure SetStringValue(value: string);
    procedure SetNumberValue(number: Double);
    procedure SetArrayValue(&array: TArray<DNAttributeName>);
    procedure SetArrayNumberValue(arrayNumber: TArray<DDN.mscorlib.DNNullable<Double>>);
    procedure SetColorValue(color: DNColor);
    procedure SetRectangleValue(rectangle: DNPdf_Rectangle);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Key: DNAttributeKey read get_Key;
    property IsInitializedValue: Boolean read get_IsInitializedValue;
  end;

  TDNStructureAttribute = class(TDNGenericImport<DNStructureAttributeClass, DNStructureAttribute>) end;

  //-------------namespace: Aspose.Pdf.LogicalStructure----------------
  DNStructureAttributeCollectionClass = interface(DDN.mscorlib.DNObjectClass)
  ['{1C9EEAF1-F4BF-570F-BA88-5CD170B70F0C}']
  end;

  [DNTypeName('Aspose.Pdf.LogicalStructure.StructureAttributeCollection')]
  DNStructureAttributeCollection = interface(DDN.mscorlib.DNObject)
  ['{97DFE618-CE78-39F2-BCA6-21465A99031E}']
  { methods } 

    function GetAttributes(ownerStandard: DNAttributeOwnerStandard): DNStructureAttributes;
    function CreateAttributes(ownerStandard: DNAttributeOwnerStandard): DNStructureAttributes;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNStructureAttributeCollection = class(TDNGenericImport<DNStructureAttributeCollectionClass, DNStructureAttributeCollection>) end;

  //-------------namespace: Aspose.Pdf.LogicalStructure----------------
  DNStructureAttributesClass = interface(DDN.mscorlib.DNObjectClass)
  ['{A3261869-EE59-5269-9F88-7CE8BE763A13}']
  end;

  [DNTypeName('Aspose.Pdf.LogicalStructure.StructureAttributes')]
  DNStructureAttributes = interface(DDN.mscorlib.DNObject)
  ['{427150C6-8E6C-394B-98B1-5D604696629A}']
  { getters & setters } 

    function get_Owner: DNAttributeOwnerStandard;

  { methods } 

    function GetAttribute(key: DNAttributeKey): DNStructureAttribute;
    procedure SetAttribute(attribute: DNStructureAttribute);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Owner: DNAttributeOwnerStandard read get_Owner;
  end;

  TDNStructureAttributes = class(TDNGenericImport<DNStructureAttributesClass, DNStructureAttributes>) end;

  //-------------namespace: Aspose.Pdf.LogicalStructure----------------
  DNStructureTextStateClass = interface(DDN.mscorlib.DNObjectClass)
  ['{3B784D0E-432F-5025-BCCB-9EBC07366806}']
  end;

  [DNTypeName('Aspose.Pdf.LogicalStructure.StructureTextState')]
  DNStructureTextState = interface(DDN.mscorlib.DNObject)
  ['{C6D95725-B97B-3E0A-B30B-0762F7E52485}']
  { getters & setters } 

    function get_Font: DNFont;
    procedure set_Font(value: DNFont);
    function get_FontSize: DDN.mscorlib.DNNullable<Single>;
    procedure set_FontSize(value: DDN.mscorlib.DNNullable<Single>);
    function get_FontStyle: DDN.mscorlib.DNNullable<DNFontStyles>;
    procedure set_FontStyle(value: DDN.mscorlib.DNNullable<DNFontStyles>);
    function get_ForegroundColor: DNColor;
    procedure set_ForegroundColor(value: DNColor);
    function get_BackgroundColor: DNColor;
    procedure set_BackgroundColor(value: DNColor);
    function get_Underline: DDN.mscorlib.DNNullable<Boolean>;
    procedure set_Underline(value: DDN.mscorlib.DNNullable<Boolean>);
    function get_StrikeOut: DDN.mscorlib.DNNullable<Boolean>;
    procedure set_StrikeOut(value: DDN.mscorlib.DNNullable<Boolean>);
    function get_Superscript: DDN.mscorlib.DNNullable<Boolean>;
    procedure set_Superscript(value: DDN.mscorlib.DNNullable<Boolean>);
    function get_Subscript: DDN.mscorlib.DNNullable<Boolean>;
    procedure set_Subscript(value: DDN.mscorlib.DNNullable<Boolean>);
    function get_HorizontalScaling: DDN.mscorlib.DNNullable<Single>;
    procedure set_HorizontalScaling(value: DDN.mscorlib.DNNullable<Single>);
    function get_LineSpacing: DDN.mscorlib.DNNullable<Single>;
    procedure set_LineSpacing(value: DDN.mscorlib.DNNullable<Single>);
    function get_CharacterSpacing: DDN.mscorlib.DNNullable<Single>;
    procedure set_CharacterSpacing(value: DDN.mscorlib.DNNullable<Single>);
    function get_WordSpacing: DDN.mscorlib.DNNullable<Single>;
    procedure set_WordSpacing(value: DDN.mscorlib.DNNullable<Single>);
    function get_MarginInfo: DNMarginInfo;
    procedure set_MarginInfo(value: DNMarginInfo);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Font: DNFont read get_Font write set_Font;
    property FontSize: DDN.mscorlib.DNNullable<Single> read get_FontSize write set_FontSize;
    property FontStyle: DDN.mscorlib.DNNullable<DNFontStyles> read get_FontStyle write set_FontStyle;
    property ForegroundColor: DNColor read get_ForegroundColor write set_ForegroundColor;
    property BackgroundColor: DNColor read get_BackgroundColor write set_BackgroundColor;
    property Underline: DDN.mscorlib.DNNullable<Boolean> read get_Underline write set_Underline;
    property StrikeOut: DDN.mscorlib.DNNullable<Boolean> read get_StrikeOut write set_StrikeOut;
    property Superscript: DDN.mscorlib.DNNullable<Boolean> read get_Superscript write set_Superscript;
    property Subscript: DDN.mscorlib.DNNullable<Boolean> read get_Subscript write set_Subscript;
    property HorizontalScaling: DDN.mscorlib.DNNullable<Single> read get_HorizontalScaling write set_HorizontalScaling;
    property LineSpacing: DDN.mscorlib.DNNullable<Single> read get_LineSpacing write set_LineSpacing;
    property CharacterSpacing: DDN.mscorlib.DNNullable<Single> read get_CharacterSpacing write set_CharacterSpacing;
    property WordSpacing: DDN.mscorlib.DNNullable<Single> read get_WordSpacing write set_WordSpacing;
    property MarginInfo: DNMarginInfo read get_MarginInfo write set_MarginInfo;
  end;

  TDNStructureTextState = class(TDNGenericImport<DNStructureTextStateClass, DNStructureTextState>) end;

  //-------------namespace: Aspose.Pdf.LogicalStructure----------------
  DNStructureTypeCategoryClass = interface(DDN.mscorlib.DNObjectClass)
  ['{F90394F2-1DBA-56D4-A18A-426BE61F2889}']
  { static fields getter & setter } 

   function __fakeFieldGet_GroupingElements: DNStructureTypeCategory;
   function __fakeFieldGet_BLSEs: DNStructureTypeCategory;
   function __fakeFieldGet_ILSEs: DNStructureTypeCategory;
   function __fakeFieldGet_IllustrationElements: DNStructureTypeCategory;

  { static fields } 

    {class} property GroupingElements: DNStructureTypeCategory read __fakeFieldGet_GroupingElements;
    {class} property BLSEs: DNStructureTypeCategory read __fakeFieldGet_BLSEs;
    {class} property ILSEs: DNStructureTypeCategory read __fakeFieldGet_ILSEs;
    {class} property IllustrationElements: DNStructureTypeCategory read __fakeFieldGet_IllustrationElements;

  end;

  [DNTypeName('Aspose.Pdf.LogicalStructure.StructureTypeCategory')]
  DNStructureTypeCategory = interface(DDN.mscorlib.DNObject)
  ['{657D5C51-4066-3F88-BE8D-993023CF82C6}']
  { methods } 

    function ToString: string;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  end;

  TDNStructureTypeCategory = class(TDNGenericImport<DNStructureTypeCategoryClass, DNStructureTypeCategory>) end;

  //-------------namespace: Aspose.Pdf.LogicalStructure----------------
  DNStructureTypeStandardClass = interface(DDN.mscorlib.DNObjectClass)
  ['{E9C57CAE-4BAE-5289-9C75-730FB174DED4}']
  { static fields getter & setter } 

   function __fakeFieldGet_Document: DNStructureTypeStandard;
   function __fakeFieldGet_Part: DNStructureTypeStandard;
   function __fakeFieldGet_Art: DNStructureTypeStandard;
   function __fakeFieldGet_Sect: DNStructureTypeStandard;
   function __fakeFieldGet_Div: DNStructureTypeStandard;
   function __fakeFieldGet_BlockQuote: DNStructureTypeStandard;
   function __fakeFieldGet_Caption: DNStructureTypeStandard;
   function __fakeFieldGet_TOC: DNStructureTypeStandard;
   function __fakeFieldGet_TOCI: DNStructureTypeStandard;
   function __fakeFieldGet_Index: DNStructureTypeStandard;
   function __fakeFieldGet_NonStruct: DNStructureTypeStandard;
   function __fakeFieldGet_Private: DNStructureTypeStandard;
   function __fakeFieldGet_P: DNStructureTypeStandard;
   function __fakeFieldGet_H: DNStructureTypeStandard;
   function __fakeFieldGet_H1: DNStructureTypeStandard;
   function __fakeFieldGet_H2: DNStructureTypeStandard;
   function __fakeFieldGet_H3: DNStructureTypeStandard;
   function __fakeFieldGet_H4: DNStructureTypeStandard;
   function __fakeFieldGet_H5: DNStructureTypeStandard;
   function __fakeFieldGet_H6: DNStructureTypeStandard;
   function __fakeFieldGet_L: DNStructureTypeStandard;
   function __fakeFieldGet_LI: DNStructureTypeStandard;
   function __fakeFieldGet_Lbl: DNStructureTypeStandard;
   function __fakeFieldGet_LBody: DNStructureTypeStandard;
   function __fakeFieldGet_Table: DNStructureTypeStandard;
   function __fakeFieldGet_THead: DNStructureTypeStandard;
   function __fakeFieldGet_TBody: DNStructureTypeStandard;
   function __fakeFieldGet_TFoot: DNStructureTypeStandard;
   function __fakeFieldGet_TR: DNStructureTypeStandard;
   function __fakeFieldGet_TH: DNStructureTypeStandard;
   function __fakeFieldGet_TD: DNStructureTypeStandard;
   function __fakeFieldGet_Span: DNStructureTypeStandard;
   function __fakeFieldGet_Quote: DNStructureTypeStandard;
   function __fakeFieldGet_Note: DNStructureTypeStandard;
   function __fakeFieldGet_Reference: DNStructureTypeStandard;
   function __fakeFieldGet_BibEntry: DNStructureTypeStandard;
   function __fakeFieldGet_Code: DNStructureTypeStandard;
   function __fakeFieldGet_Link: DNStructureTypeStandard;
   function __fakeFieldGet_Annot: DNStructureTypeStandard;
   function __fakeFieldGet_Ruby: DNStructureTypeStandard;
   function __fakeFieldGet_RB: DNStructureTypeStandard;
   function __fakeFieldGet_RT: DNStructureTypeStandard;
   function __fakeFieldGet_RP: DNStructureTypeStandard;
   function __fakeFieldGet_Warichu: DNStructureTypeStandard;
   function __fakeFieldGet_WT: DNStructureTypeStandard;
   function __fakeFieldGet_WP: DNStructureTypeStandard;
   function __fakeFieldGet_Figure: DNStructureTypeStandard;
   function __fakeFieldGet_Formula: DNStructureTypeStandard;
   function __fakeFieldGet_Form: DNStructureTypeStandard;

  { static fields } 

    {class} property Document: DNStructureTypeStandard read __fakeFieldGet_Document;
    {class} property Part: DNStructureTypeStandard read __fakeFieldGet_Part;
    {class} property Art: DNStructureTypeStandard read __fakeFieldGet_Art;
    {class} property Sect: DNStructureTypeStandard read __fakeFieldGet_Sect;
    {class} property &Div: DNStructureTypeStandard read __fakeFieldGet_Div;
    {class} property BlockQuote: DNStructureTypeStandard read __fakeFieldGet_BlockQuote;
    {class} property Caption: DNStructureTypeStandard read __fakeFieldGet_Caption;
    {class} property TOC: DNStructureTypeStandard read __fakeFieldGet_TOC;
    {class} property TOCI: DNStructureTypeStandard read __fakeFieldGet_TOCI;
    {class} property Index: DNStructureTypeStandard read __fakeFieldGet_Index;
    {class} property NonStruct: DNStructureTypeStandard read __fakeFieldGet_NonStruct;
    {class} property &Private: DNStructureTypeStandard read __fakeFieldGet_Private;
    {class} property P: DNStructureTypeStandard read __fakeFieldGet_P;
    {class} property H: DNStructureTypeStandard read __fakeFieldGet_H;
    {class} property H1: DNStructureTypeStandard read __fakeFieldGet_H1;
    {class} property H2: DNStructureTypeStandard read __fakeFieldGet_H2;
    {class} property H3: DNStructureTypeStandard read __fakeFieldGet_H3;
    {class} property H4: DNStructureTypeStandard read __fakeFieldGet_H4;
    {class} property H5: DNStructureTypeStandard read __fakeFieldGet_H5;
    {class} property H6: DNStructureTypeStandard read __fakeFieldGet_H6;
    {class} property L: DNStructureTypeStandard read __fakeFieldGet_L;
    {class} property LI: DNStructureTypeStandard read __fakeFieldGet_LI;
    {class} property Lbl: DNStructureTypeStandard read __fakeFieldGet_Lbl;
    {class} property LBody: DNStructureTypeStandard read __fakeFieldGet_LBody;
    {class} property Table: DNStructureTypeStandard read __fakeFieldGet_Table;
    {class} property THead: DNStructureTypeStandard read __fakeFieldGet_THead;
    {class} property TBody: DNStructureTypeStandard read __fakeFieldGet_TBody;
    {class} property TFoot: DNStructureTypeStandard read __fakeFieldGet_TFoot;
    {class} property TR: DNStructureTypeStandard read __fakeFieldGet_TR;
    {class} property TH: DNStructureTypeStandard read __fakeFieldGet_TH;
    {class} property TD: DNStructureTypeStandard read __fakeFieldGet_TD;
    {class} property Span: DNStructureTypeStandard read __fakeFieldGet_Span;
    {class} property Quote: DNStructureTypeStandard read __fakeFieldGet_Quote;
    {class} property Note: DNStructureTypeStandard read __fakeFieldGet_Note;
    {class} property Reference: DNStructureTypeStandard read __fakeFieldGet_Reference;
    {class} property BibEntry: DNStructureTypeStandard read __fakeFieldGet_BibEntry;
    {class} property Code: DNStructureTypeStandard read __fakeFieldGet_Code;
    {class} property Link: DNStructureTypeStandard read __fakeFieldGet_Link;
    {class} property Annot: DNStructureTypeStandard read __fakeFieldGet_Annot;
    {class} property Ruby: DNStructureTypeStandard read __fakeFieldGet_Ruby;
    {class} property RB: DNStructureTypeStandard read __fakeFieldGet_RB;
    {class} property RT: DNStructureTypeStandard read __fakeFieldGet_RT;
    {class} property RP: DNStructureTypeStandard read __fakeFieldGet_RP;
    {class} property Warichu: DNStructureTypeStandard read __fakeFieldGet_Warichu;
    {class} property WT: DNStructureTypeStandard read __fakeFieldGet_WT;
    {class} property WP: DNStructureTypeStandard read __fakeFieldGet_WP;
    {class} property Figure: DNStructureTypeStandard read __fakeFieldGet_Figure;
    {class} property Formula: DNStructureTypeStandard read __fakeFieldGet_Formula;
    {class} property Form: DNStructureTypeStandard read __fakeFieldGet_Form;

  end;

  [DNTypeName('Aspose.Pdf.LogicalStructure.StructureTypeStandard')]
  DNStructureTypeStandard = interface(DDN.mscorlib.DNObject)
  ['{C8B0CA4B-51BB-3C3F-8829-B6B946DE854A}']
  { getters & setters } 

    function get_Tag: string;
    function get_Category: DNStructureTypeCategory;

  { methods } 

    function ToString: string;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    property Tag: string read get_Tag;
    property Category: DNStructureTypeCategory read get_Category;
  end;

  TDNStructureTypeStandard = class(TDNGenericImport<DNStructureTypeStandardClass, DNStructureTypeStandard>) end;

  //-------------namespace: Aspose.Pdf----------------
  DNMarginInfoClass = interface(DNObjectClass)
  ['{4C1DBED4-212F-50D2-8EDD-23C8894BBB97}']
  { constructors } 

    {class} function init: DNMarginInfo; overload;
    {class} function init(left: Double; bottom: Double; right: Double; top: Double): DNMarginInfo; overload;

  end;

  [DNTypeName('Aspose.Pdf.MarginInfo')]
  DNMarginInfo = interface(DDN.mscorlib.DNICloneable)
  ['{84A149AE-941B-378B-9396-861AF1CA723C}']
  { getters & setters } 

    function get_Left: Double;
    procedure set_Left(value: Double);
    function get_Right: Double;
    procedure set_Right(value: Double);
    function get_Top: Double;
    procedure set_Top(value: Double);
    function get_Bottom: Double;
    procedure set_Bottom(value: Double);

  { methods } 

    function Clone: DDN.mscorlib.DNObject;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Left: Double read get_Left write set_Left;
    property Right: Double read get_Right write set_Right;
    property Top: Double read get_Top write set_Top;
    property Bottom: Double read get_Bottom write set_Bottom;
  end;

  TDNMarginInfo = class(TDNGenericImport<DNMarginInfoClass, DNMarginInfo>) end;

  //-------------namespace: Aspose.Pdf----------------
  DNMatrixClass = interface(DDN.mscorlib.DNObjectClass)
  ['{CE879C33-1750-5E6A-9922-14D60D428F96}']
  { constructors } 

    {class} function init: DNMatrix; overload;
    {class} function init(matrixArray: TArray<Double>): DNMatrix; overload;
    {class} function init(matrixArray: TArray<Single>): DNMatrix; overload;
    {class} function init(matrix: DNMatrix): DNMatrix; overload;
    {class} function init(a: Double; b: Double; c: Double; d: Double; e: Double; f: Double): DNMatrix; overload;

  { static methods } 

    {class} function Rotation(alpha: Double): DNMatrix; overload;
    {class} function Rotation(rotation: DNRotation): DNMatrix; overload;
    {class} function Skew(alpha: Double; beta: Double): DNMatrix;
    {class} function GetAngle(rotation: DNRotation): Double;

  end;

  [DNTypeName('Aspose.Pdf.Matrix')]
  DNMatrix = interface(DDN.mscorlib.DNObject)
  ['{CE657A3B-4580-32DE-A525-664C4781DE6E}']
  { getters & setters } 

    function get_Data: TArray<Double>;
    function get_A: Double;
    procedure set_A(value: Double);
    function get_B: Double;
    procedure set_B(value: Double);
    function get_C: Double;
    procedure set_C(value: Double);
    function get_D: Double;
    procedure set_D(value: Double);
    function get_E: Double;
    procedure set_E(value: Double);
    function get_F: Double;
    procedure set_F(value: Double);
    function get_Elements: TArray<Single>;

  { methods } 

    function ToString: string;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function Multiply(other: DNMatrix): DNMatrix;
    function Add(other: DNMatrix): DNMatrix;
    function Transform(p: DNPoint): DNPoint; overload;
    function Transform(rect: DNPdf_Rectangle): DNPdf_Rectangle; overload;
    function Reverse: DNMatrix;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    property Data: TArray<Double> read get_Data;
    property A: Double read get_A write set_A;
    property B: Double read get_B write set_B;
    property C: Double read get_C write set_C;
    property D: Double read get_D write set_D;
    property E: Double read get_E write set_E;
    property F: Double read get_F write set_F;
    property Elements: TArray<Single> read get_Elements;
  end;

  TDNMatrix = class(TDNGenericImport<DNMatrixClass, DNMatrix>) end;

  //-------------namespace: Aspose.Pdf----------------
  DNMatrix3DClass = interface(DDN.mscorlib.DNObjectClass)
  ['{2DF940DB-21A1-52A6-AB6B-0A159141F00E}']
  { constructors } 

    {class} function init: DNMatrix3D; overload;
    {class} function init(matrix3DArray: TArray<Double>): DNMatrix3D; overload;
    {class} function init(matrix: DNMatrix3D): DNMatrix3D; overload;
    {class} function init(a: Double; b: Double; c: Double; d: Double; e: Double; f: Double; g: Double; h: Double; i: Double; tx: Double; ty: Double; tz: Double): DNMatrix3D; overload;

  { static methods } 

    {class} function GetAngle(rotation: DNRotation): Double;

  end;

  [DNTypeName('Aspose.Pdf.Matrix3D')]
  DNMatrix3D = interface(DDN.mscorlib.DNObject)
  ['{E3982926-BA15-3D6E-927F-0163B62B5DF2}']
  { getters & setters } 

    function get_A: Double;
    procedure set_A(value: Double);
    function get_B: Double;
    procedure set_B(value: Double);
    function get_C: Double;
    procedure set_C(value: Double);
    function get_D: Double;
    procedure set_D(value: Double);
    function get_E: Double;
    procedure set_E(value: Double);
    function get_F: Double;
    procedure set_F(value: Double);
    function get_G: Double;
    procedure set_G(value: Double);
    function get_H: Double;
    procedure set_H(value: Double);
    function get_I: Double;
    procedure set_I(value: Double);
    function get_Tx: Double;
    procedure set_Tx(value: Double);
    function get_Ty: Double;
    procedure set_Ty(value: Double);
    function get_Tz: Double;
    procedure set_Tz(value: Double);

  { methods } 

    function ToString: string;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function Add(other: DNMatrix3D): DNMatrix3D;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    property A: Double read get_A write set_A;
    property B: Double read get_B write set_B;
    property C: Double read get_C write set_C;
    property D: Double read get_D write set_D;
    property E: Double read get_E write set_E;
    property F: Double read get_F write set_F;
    property G: Double read get_G write set_G;
    property H: Double read get_H write set_H;
    property I: Double read get_I write set_I;
    property Tx: Double read get_Tx write set_Tx;
    property Ty: Double read get_Ty write set_Ty;
    property Tz: Double read get_Tz write set_Tz;
  end;

  TDNMatrix3D = class(TDNGenericImport<DNMatrix3DClass, DNMatrix3D>) end;

  //-------------namespace: Aspose.Pdf----------------
  DNMetadataClass = interface(DDN.mscorlib.DNObjectClass)
  ['{7F6006E1-09BC-588B-B465-C564E209F198}']
  end;

  [DNTypeName('Aspose.Pdf.Metadata')]
  DNMetadata = interface(DDN.mscorlib.DNObject)
  ['{D5F49FF3-A174-3ACD-8CD0-16BB81438228}']
  { getters & setters } 

    function get_IsFixedSize: Boolean;
    function get_IsReadOnly: Boolean;
    function get_Keys: DDN.mscorlib.DNICollection<string>;
    function get_Values: DDN.mscorlib.DNICollection<DNXmpValue>;
    function get_ExtensionFields: DDN.mscorlib.DNIDictionary<string, DNXmpPdfAExtensionSchema>;
    function get_Count: Int32;
    function get_IsSynchronized: Boolean;
    function get_SyncRoot: DDN.mscorlib.DNObject;

  { methods } 

    procedure RegisterNamespaceUri(prefix: string; namespaceUri: string); overload;
    procedure RegisterNamespaceUri(prefix: string; namespaceUri: string; schemaDescription: string); overload;
    function GetNamespaceUriByPrefix(prefix: string): string;
    function GetPrefixByNamespaceUri(namespaceUri: string): string;
    procedure Add(key: string; value: DDN.mscorlib.DNObject); overload;
    procedure Add(prefix: string; value: DNXmpPdfAExtensionObject); overload;
    function &Contains(key: string): Boolean; overload;
    function GetEnumerator: DDN.mscorlib.DNIEnumerator<DDN.mscorlib.DNKeyValuePair<string, DNXmpValue>>;
    procedure CopyTo(&array: TArray<DDN.mscorlib.DNKeyValuePair<string, DNXmpValue>>; index: Int32);
    function ContainsKey(key: string): Boolean;
    function TryGetValue(key: string; out value: DNXmpValue): Boolean;
    function &Contains(item: DDN.mscorlib.DNKeyValuePair<string, DNXmpValue>): Boolean; overload;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property IsFixedSize: Boolean read get_IsFixedSize;
    property IsReadOnly: Boolean read get_IsReadOnly;
    property Keys: DDN.mscorlib.DNICollection<string> read get_Keys;
    property Values: DDN.mscorlib.DNICollection<DNXmpValue> read get_Values;
    property ExtensionFields: DDN.mscorlib.DNIDictionary<string, DNXmpPdfAExtensionSchema> read get_ExtensionFields;
    property Count: Int32 read get_Count;
    property IsSynchronized: Boolean read get_IsSynchronized;
    property SyncRoot: DDN.mscorlib.DNObject read get_SyncRoot;
  end;

  TDNMetadata = class(TDNGenericImport<DNMetadataClass, DNMetadata>) end;

  //-------------namespace: Aspose.Pdf----------------
  DNMeteredClass = interface(DDN.mscorlib.DNObjectClass)
  ['{4D129928-6F02-5EA5-952E-716C3C1F36D2}']
  { constructors } 

    {class} function init: DNMetered;

  { static methods } 

    {class} function GetConsumptionQuantity: DDN.mscorlib.DNDecimal;
    {class} function GetConsumptionCredit: DDN.mscorlib.DNDecimal;

  end;

  [DNTypeName('Aspose.Pdf.Metered')]
  DNMetered = interface(DDN.mscorlib.DNObject)
  ['{0B41C7A9-485F-3BCF-89A5-34903EB6CF54}']
  { methods } 

    procedure SetMeteredKey(publicKey: string; privateKey: string);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNMetered = class(TDNGenericImport<DNMeteredClass, DNMetered>) end;

  //-------------namespace: Aspose.Pdf----------------
  DNNamedDestinationCollectionClass = interface(DNObjectClass)
  ['{56604223-E71D-55E8-AD90-FA539120499D}']
  end;

  [DNTypeName('Aspose.Pdf.NamedDestinationCollection')]
  DNNamedDestinationCollection = interface(DNINamedDestinationCollection)
  ['{84150FD1-E693-338C-9A37-05E3D29BCACE}']
  { getters & setters } 

    function get_Count: Int32;
    function get_Names: TArray<string>;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Count: Int32 read get_Count;
    property Names: TArray<string> read get_Names;
  end;

  TDNNamedDestinationCollection = class(TDNGenericImport<DNNamedDestinationCollectionClass, DNNamedDestinationCollection>) end;

  //-------------namespace: Aspose.Pdf----------------
  DNNoteClass = interface(DDN.mscorlib.DNObjectClass)
  ['{A2555217-7475-5DF9-B019-12145E15C791}']
  { constructors } 

    {class} function init: DNNote; overload;
    {class} function init(content: string): DNNote; overload;

  end;

  [DNTypeName('Aspose.Pdf.Note')]
  DNNote = interface(DDN.mscorlib.DNObject)
  ['{50E0ED66-E825-3EC2-BB19-B1FBC50239BE}']
  { getters & setters } 

    function get_Paragraphs: DNParagraphs;
    procedure set_Paragraphs(value: DNParagraphs);
    function get_Text: string;
    procedure set_Text(value: string);
    function get_TextState: DNTextState;
    procedure set_TextState(value: DNTextState);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Paragraphs: DNParagraphs read get_Paragraphs write set_Paragraphs;
    property Text: string read get_Text write set_Text;
    property TextState: DNTextState read get_TextState write set_TextState;
  end;

  TDNNote = class(TDNGenericImport<DNNoteClass, DNNote>) end;

  //-------------namespace: Aspose.Pdf----------------
  DNOcspSettingsClass = interface(DDN.mscorlib.DNObjectClass)
  ['{3D321126-B469-5764-A453-95B6B4258120}']
  { constructors } 

    {class} function init(serverUrl: string): DNOcspSettings;

  end;

  [DNTypeName('Aspose.Pdf.OcspSettings')]
  DNOcspSettings = interface(DDN.mscorlib.DNObject)
  ['{67E013D5-EA33-30F6-BA8C-6AACFAA1D3CB}']
  { getters & setters } 

    function get_ServerUrl: string;
    procedure set_ServerUrl(value: string);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property ServerUrl: string read get_ServerUrl write set_ServerUrl;
  end;

  TDNOcspSettings = class(TDNGenericImport<DNOcspSettingsClass, DNOcspSettings>) end;

  //-------------namespace: Aspose.Pdf----------------
  DNOperatorClass = interface(DDN.mscorlib.DNObjectClass)
  ['{7BE9D8D7-DDA0-5486-BA8A-F7BA7B125A03}']
  { static methods } 

    {class} function IsTextShowOperator(op: DNOperator): Boolean;

  end;

  [DNTypeName('Aspose.Pdf.Operator')]
  DNOperator = interface(DDN.mscorlib.DNObject)
  ['{107D2BE9-4543-3160-8F1E-6B2747920DCA}']
  { getters & setters } 

    function get_Index: Int32;
    procedure set_Index(value: Int32);

  { methods } 

    procedure Accept(visitor: DNIOperatorSelector);
    function ToString: string;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    property Index: Int32 read get_Index write set_Index;
  end;

  TDNOperator = class(TDNGenericImport<DNOperatorClass, DNOperator>) end;

  //-------------namespace: Aspose.Pdf.Operators----------------
  DNBDCClass = interface(DNOperatorClass)
  ['{AC008873-F58C-5A97-A390-D032A0B2FF06}']
  { constructors } 

    {class} function init(tag: string): DNBDC;

  end;

  [DNTypeName('Aspose.Pdf.Operators.BDC')]
  DNBDC = interface(DNOperator)
  ['{8FD90A8A-624A-3B7E-A09A-745666F4391C}']
  { getters & setters } 

    function get_Tag: string;
    procedure set_Tag(value: string);
    function get_Index: Int32;
    procedure set_Index(value: Int32);

  { methods } 

    procedure Accept(visitor: DNIOperatorSelector);
    function ToString: string;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    property Tag: string read get_Tag write set_Tag;
    property Index: Int32 read get_Index write set_Index;
  end;

  TDNBDC = class(TDNGenericImport<DNBDCClass, DNBDC>) end;

  //-------------namespace: Aspose.Pdf.Operators----------------
  DNBIClass = interface(DNOperatorClass)
  ['{EBAFA8A1-A7D9-5E59-8824-5A099124596A}']
  { constructors } 

    {class} function init: DNBI;

  end;

  [DNTypeName('Aspose.Pdf.Operators.BI')]
  DNBI = interface(DNOperator)
  ['{CD8034DA-B8A7-35F3-A545-951F4ED1EAAD}']
  { getters & setters } 

    function get_Index: Int32;
    procedure set_Index(value: Int32);

  { methods } 

    procedure Accept(visitor: DNIOperatorSelector);
    function ToString: string;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    property Index: Int32 read get_Index write set_Index;
  end;

  TDNBI = class(TDNGenericImport<DNBIClass, DNBI>) end;

  //-------------namespace: Aspose.Pdf.Operators----------------
  DNBMCClass = interface(DNOperatorClass)
  ['{D5D6CA3D-1770-5927-8831-5FAF55261785}']
  { constructors } 

    {class} function init(tag: string): DNBMC;

  end;

  [DNTypeName('Aspose.Pdf.Operators.BMC')]
  DNBMC = interface(DNOperator)
  ['{AD490576-B3CF-390A-81F2-CA02859BC887}']
  { getters & setters } 

    function get_Tag: string;
    procedure set_Tag(value: string);
    function get_Index: Int32;
    procedure set_Index(value: Int32);

  { methods } 

    procedure Accept(visitor: DNIOperatorSelector);
    function ToString: string;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    property Tag: string read get_Tag write set_Tag;
    property Index: Int32 read get_Index write set_Index;
  end;

  TDNBMC = class(TDNGenericImport<DNBMCClass, DNBMC>) end;

  //-------------namespace: Aspose.Pdf.Operators----------------
  DNBXClass = interface(DNOperatorClass)
  ['{A6E38F20-8AE5-5AD0-982D-D95D5BAF7409}']
  { constructors } 

    {class} function init: DNBX;

  end;

  [DNTypeName('Aspose.Pdf.Operators.BX')]
  DNBX = interface(DNOperator)
  ['{B7B9E1A4-E158-3430-912B-898C105B0162}']
  { getters & setters } 

    function get_Index: Int32;
    procedure set_Index(value: Int32);

  { methods } 

    procedure Accept(visitor: DNIOperatorSelector);
    function ToString: string;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    property Index: Int32 read get_Index write set_Index;
  end;

  TDNBX = class(TDNGenericImport<DNBXClass, DNBX>) end;

  //-------------namespace: Aspose.Pdf.Operators----------------
  DNClipClass = interface(DNOperatorClass)
  ['{04112210-E96C-55E0-B2C4-7EB6E8F2586B}']
  { constructors } 

    {class} function init: DNClip;

  end;

  [DNTypeName('Aspose.Pdf.Operators.Clip')]
  DNClip = interface(DNOperator)
  ['{E867D702-957D-3580-8CBE-16998B34737D}']
  { getters & setters } 

    function get_Index: Int32;
    procedure set_Index(value: Int32);

  { methods } 

    procedure Accept(visitor: DNIOperatorSelector);
    function ToString: string;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    property Index: Int32 read get_Index write set_Index;
  end;

  TDNClip = class(TDNGenericImport<DNClipClass, DNClip>) end;

  //-------------namespace: Aspose.Pdf.Operators----------------
  DNClosePathClass = interface(DNOperatorClass)
  ['{6D529708-96C7-5709-A398-ED44780C5791}']
  { constructors } 

    {class} function init: DNClosePath;

  end;

  [DNTypeName('Aspose.Pdf.Operators.ClosePath')]
  DNClosePath = interface(DNOperator)
  ['{14E4E54D-501A-3426-B88A-0670EB471D90}']
  { getters & setters } 

    function get_Index: Int32;
    procedure set_Index(value: Int32);

  { methods } 

    procedure Accept(visitor: DNIOperatorSelector);
    function ToString: string;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    property Index: Int32 read get_Index write set_Index;
  end;

  TDNClosePath = class(TDNGenericImport<DNClosePathClass, DNClosePath>) end;

  //-------------namespace: Aspose.Pdf.Operators----------------
  DNClosePathEOFillStrokeClass = interface(DNOperatorClass)
  ['{ABA32130-FE56-52E6-BE5B-CDDBCBFE1FCC}']
  { constructors } 

    {class} function init: DNClosePathEOFillStroke;

  end;

  [DNTypeName('Aspose.Pdf.Operators.ClosePathEOFillStroke')]
  DNClosePathEOFillStroke = interface(DNOperator)
  ['{DEB58BB7-90CC-3CDC-B8F3-9660879E5B53}']
  { getters & setters } 

    function get_Index: Int32;
    procedure set_Index(value: Int32);

  { methods } 

    procedure Accept(visitor: DNIOperatorSelector);
    function ToString: string;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    property Index: Int32 read get_Index write set_Index;
  end;

  TDNClosePathEOFillStroke = class(TDNGenericImport<DNClosePathEOFillStrokeClass, DNClosePathEOFillStroke>) end;

  //-------------namespace: Aspose.Pdf.Operators----------------
  DNClosePathFillStrokeClass = interface(DNOperatorClass)
  ['{E452A2B9-E24E-53FF-8B99-AFD69E06E110}']
  { constructors } 

    {class} function init: DNClosePathFillStroke;

  end;

  [DNTypeName('Aspose.Pdf.Operators.ClosePathFillStroke')]
  DNClosePathFillStroke = interface(DNOperator)
  ['{F5861C97-5115-3BEE-A99E-CA0C2922E6CD}']
  { getters & setters } 

    function get_Index: Int32;
    procedure set_Index(value: Int32);

  { methods } 

    procedure Accept(visitor: DNIOperatorSelector);
    function ToString: string;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    property Index: Int32 read get_Index write set_Index;
  end;

  TDNClosePathFillStroke = class(TDNGenericImport<DNClosePathFillStrokeClass, DNClosePathFillStroke>) end;

  //-------------namespace: Aspose.Pdf.Operators----------------
  DNClosePathStrokeClass = interface(DNOperatorClass)
  ['{FEAC071E-1591-5D4E-A6D0-83AD928A5F79}']
  { constructors } 

    {class} function init: DNClosePathStroke;

  end;

  [DNTypeName('Aspose.Pdf.Operators.ClosePathStroke')]
  DNClosePathStroke = interface(DNOperator)
  ['{9D7C05F3-8C78-35BA-968C-1B31E32C605B}']
  { getters & setters } 

    function get_Index: Int32;
    procedure set_Index(value: Int32);

  { methods } 

    procedure Accept(visitor: DNIOperatorSelector);
    function ToString: string;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    property Index: Int32 read get_Index write set_Index;
  end;

  TDNClosePathStroke = class(TDNGenericImport<DNClosePathStrokeClass, DNClosePathStroke>) end;

  //-------------namespace: Aspose.Pdf.Operators----------------
  DNConcatenateMatrixClass = interface(DNOperatorClass)
  ['{769ADD95-E823-57DD-9852-198923A17AAB}']
  { constructors } 

    {class} function init(a: Double; b: Double; c: Double; d: Double; e: Double; f: Double): DNConcatenateMatrix; overload;
    {class} function init(m: DNMatrix): DNConcatenateMatrix; overload;

  end;

  [DNTypeName('Aspose.Pdf.Operators.ConcatenateMatrix')]
  DNConcatenateMatrix = interface(DNOperator)
  ['{E67365DB-B095-363C-B2BF-73FA66A499A8}']
  { getters & setters } 

    function get_Matrix: DNMatrix;
    procedure set_Matrix(value: DNMatrix);
    function get_Index: Int32;
    procedure set_Index(value: Int32);

  { methods } 

    procedure Accept(visitor: DNIOperatorSelector);
    function ToString: string;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    property Matrix: DNMatrix read get_Matrix write set_Matrix;
    property Index: Int32 read get_Index write set_Index;
  end;

  TDNConcatenateMatrix = class(TDNGenericImport<DNConcatenateMatrixClass, DNConcatenateMatrix>) end;

  //-------------namespace: Aspose.Pdf.Operators----------------
  DNCurveToClass = interface(DNOperatorClass)
  ['{6AE08D5D-C1CD-5E3E-B140-F195DDFCC7D5}']
  { constructors } 

    {class} function init(x1: Double; y1: Double; x2: Double; y2: Double; x3: Double; y3: Double): DNCurveTo;

  end;

  [DNTypeName('Aspose.Pdf.Operators.CurveTo')]
  DNCurveTo = interface(DNOperator)
  ['{B7E971A9-7E27-3492-8745-402C8C9586D0}']
  { getters & setters } 

    function get_Points: TArray<DNPoint>;
    function get_Index: Int32;
    procedure set_Index(value: Int32);

  { methods } 

    procedure Accept(visitor: DNIOperatorSelector);
    function ToString: string;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    property Points: TArray<DNPoint> read get_Points;
    property Index: Int32 read get_Index write set_Index;
  end;

  TDNCurveTo = class(TDNGenericImport<DNCurveToClass, DNCurveTo>) end;

  //-------------namespace: Aspose.Pdf.Operators----------------
  DNCurveTo1Class = interface(DNOperatorClass)
  ['{789750E7-88FD-5669-88E7-0E4C19232F52}']
  { constructors } 

    {class} function init(x2: Double; y2: Double; x3: Double; y3: Double): DNCurveTo1;

  end;

  [DNTypeName('Aspose.Pdf.Operators.CurveTo1')]
  DNCurveTo1 = interface(DNOperator)
  ['{120C5845-A140-3066-BB8D-B5376E577659}']
  { getters & setters } 

    function get_Points: TArray<DNPoint>;
    function get_Index: Int32;
    procedure set_Index(value: Int32);

  { methods } 

    procedure Accept(visitor: DNIOperatorSelector);
    function ToString: string;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    property Points: TArray<DNPoint> read get_Points;
    property Index: Int32 read get_Index write set_Index;
  end;

  TDNCurveTo1 = class(TDNGenericImport<DNCurveTo1Class, DNCurveTo1>) end;

  //-------------namespace: Aspose.Pdf.Operators----------------
  DNCurveTo2Class = interface(DNOperatorClass)
  ['{E43D927B-D1A1-50FA-BE88-950795BFFBC7}']
  { constructors } 

    {class} function init(x1: Double; y1: Double; x3: Double; y3: Double): DNCurveTo2;

  end;

  [DNTypeName('Aspose.Pdf.Operators.CurveTo2')]
  DNCurveTo2 = interface(DNOperator)
  ['{89B74E36-523E-356C-A9A8-420F9957643F}']
  { getters & setters } 

    function get_Points: TArray<DNPoint>;
    function get_Index: Int32;
    procedure set_Index(value: Int32);

  { methods } 

    procedure Accept(visitor: DNIOperatorSelector);
    function ToString: string;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    property Points: TArray<DNPoint> read get_Points;
    property Index: Int32 read get_Index write set_Index;
  end;

  TDNCurveTo2 = class(TDNGenericImport<DNCurveTo2Class, DNCurveTo2>) end;

  //-------------namespace: Aspose.Pdf.Operators----------------
  DNDoClass = interface(DNOperatorClass)
  ['{C2DF9A1E-E39A-5E3A-AABB-440C7C283FD2}']
  { constructors } 

    {class} function init(name: string): DNDo; overload;
    {class} function init: DNDo; overload;

  end;

  [DNTypeName('Aspose.Pdf.Operators.Do')]
  DNDo = interface(DNOperator)
  ['{1F83B487-B3B7-3557-8AA9-F89C35359D85}']
  { getters & setters } 

    function get_Name: string;
    procedure set_Name(value: string);
    function get_Index: Int32;
    procedure set_Index(value: Int32);

  { methods } 

    procedure Accept(visitor: DNIOperatorSelector);
    function ToString: string;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    property Name: string read get_Name write set_Name;
    property Index: Int32 read get_Index write set_Index;
  end;

  TDNDo = class(TDNGenericImport<DNDoClass, DNDo>) end;

  //-------------namespace: Aspose.Pdf.Operators----------------
  DNDPClass = interface(DNOperatorClass)
  ['{2BD6C550-EB3E-5EAD-A4DB-193A52C56447}']
  { constructors } 

    {class} function init(tag: string): DNDP;

  end;

  [DNTypeName('Aspose.Pdf.Operators.DP')]
  DNDP = interface(DNOperator)
  ['{8B5CBCEA-AA15-3A32-9C14-0F55232E0D3C}']
  { getters & setters } 

    function get_Tag: string;
    procedure set_Tag(value: string);
    function get_Index: Int32;
    procedure set_Index(value: Int32);

  { methods } 

    procedure Accept(visitor: DNIOperatorSelector);
    function ToString: string;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    property Tag: string read get_Tag write set_Tag;
    property Index: Int32 read get_Index write set_Index;
  end;

  TDNDP = class(TDNGenericImport<DNDPClass, DNDP>) end;

  //-------------namespace: Aspose.Pdf.Operators----------------
  DNEIClass = interface(DNOperatorClass)
  ['{5DAB9EFC-35AB-5D90-96CC-8F815AD30209}']
  { constructors } 

    {class} function init: DNEI;

  end;

  [DNTypeName('Aspose.Pdf.Operators.EI')]
  DNEI = interface(DNOperator)
  ['{36CF7CAC-646D-3D6A-B202-5C44BD25C077}']
  { getters & setters } 

    function get_Index: Int32;
    procedure set_Index(value: Int32);

  { methods } 

    procedure Accept(visitor: DNIOperatorSelector);
    function ToString: string;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    property Index: Int32 read get_Index write set_Index;
  end;

  TDNEI = class(TDNGenericImport<DNEIClass, DNEI>) end;

  //-------------namespace: Aspose.Pdf.Operators----------------
  DNEMCClass = interface(DNOperatorClass)
  ['{FAEAB735-5CF1-58FC-A4C4-CB6C5151AA15}']
  { constructors } 

    {class} function init: DNEMC;

  end;

  [DNTypeName('Aspose.Pdf.Operators.EMC')]
  DNEMC = interface(DNOperator)
  ['{95FAA3D7-BA91-3880-885E-C9C7A94E75DE}']
  { getters & setters } 

    function get_Index: Int32;
    procedure set_Index(value: Int32);

  { methods } 

    procedure Accept(visitor: DNIOperatorSelector);
    function ToString: string;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    property Index: Int32 read get_Index write set_Index;
  end;

  TDNEMC = class(TDNGenericImport<DNEMCClass, DNEMC>) end;

  //-------------namespace: Aspose.Pdf.Operators----------------
  DNEndPathClass = interface(DNOperatorClass)
  ['{6DEBF336-06B5-55AF-AC05-480D5C08FEB7}']
  { constructors } 

    {class} function init: DNEndPath;

  end;

  [DNTypeName('Aspose.Pdf.Operators.EndPath')]
  DNEndPath = interface(DNOperator)
  ['{AC9B54A6-D578-3577-8AB1-468DC076C706}']
  { getters & setters } 

    function get_Index: Int32;
    procedure set_Index(value: Int32);

  { methods } 

    procedure Accept(visitor: DNIOperatorSelector);
    function ToString: string;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    property Index: Int32 read get_Index write set_Index;
  end;

  TDNEndPath = class(TDNGenericImport<DNEndPathClass, DNEndPath>) end;

  //-------------namespace: Aspose.Pdf.Operators----------------
  DNEOClipClass = interface(DNOperatorClass)
  ['{E56D17AD-A47D-53D4-A2B3-CB067451C85C}']
  end;

  [DNTypeName('Aspose.Pdf.Operators.EOClip')]
  DNEOClip = interface(DNOperator)
  ['{CF0ABD69-0363-3D8A-AD56-167E6ACA73B8}']
  { getters & setters } 

    function get_Index: Int32;
    procedure set_Index(value: Int32);

  { methods } 

    procedure Accept(visitor: DNIOperatorSelector);
    function ToString: string;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    property Index: Int32 read get_Index write set_Index;
  end;

  TDNEOClip = class(TDNGenericImport<DNEOClipClass, DNEOClip>) end;

  //-------------namespace: Aspose.Pdf.Operators----------------
  DNEOFillClass = interface(DNOperatorClass)
  ['{884E3615-3812-5541-BE87-1854AEA7DD20}']
  { constructors } 

    {class} function init: DNEOFill;

  end;

  [DNTypeName('Aspose.Pdf.Operators.EOFill')]
  DNEOFill = interface(DNOperator)
  ['{0760EC2B-DD82-31B9-A046-FEF0A4A1B894}']
  { getters & setters } 

    function get_Index: Int32;
    procedure set_Index(value: Int32);

  { methods } 

    procedure Accept(visitor: DNIOperatorSelector);
    function ToString: string;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    property Index: Int32 read get_Index write set_Index;
  end;

  TDNEOFill = class(TDNGenericImport<DNEOFillClass, DNEOFill>) end;

  //-------------namespace: Aspose.Pdf.Operators----------------
  DNEOFillStrokeClass = interface(DNOperatorClass)
  ['{128FE716-261D-5208-8F43-2681B5CE6860}']
  end;

  [DNTypeName('Aspose.Pdf.Operators.EOFillStroke')]
  DNEOFillStroke = interface(DNOperator)
  ['{1413B4D8-6E02-3461-A35B-648000A1E8CD}']
  { getters & setters } 

    function get_Index: Int32;
    procedure set_Index(value: Int32);

  { methods } 

    procedure Accept(visitor: DNIOperatorSelector);
    function ToString: string;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    property Index: Int32 read get_Index write set_Index;
  end;

  TDNEOFillStroke = class(TDNGenericImport<DNEOFillStrokeClass, DNEOFillStroke>) end;

  //-------------namespace: Aspose.Pdf.Operators----------------
  DNEXClass = interface(DNOperatorClass)
  ['{C6ED8123-88B7-5743-AAED-C26BE8DFCC37}']
  { constructors } 

    {class} function init: DNEX;

  end;

  [DNTypeName('Aspose.Pdf.Operators.EX')]
  DNEX = interface(DNOperator)
  ['{58561D97-BAD6-323D-B34E-8CC59FB8B80E}']
  { getters & setters } 

    function get_Index: Int32;
    procedure set_Index(value: Int32);

  { methods } 

    procedure Accept(visitor: DNIOperatorSelector);
    function ToString: string;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    property Index: Int32 read get_Index write set_Index;
  end;

  TDNEX = class(TDNGenericImport<DNEXClass, DNEX>) end;

  //-------------namespace: Aspose.Pdf.Operators----------------
  DNFillClass = interface(DNOperatorClass)
  ['{3173BD0C-FFF4-5D28-96F7-414675E9D79E}']
  { constructors } 

    {class} function init: DNFill;

  end;

  [DNTypeName('Aspose.Pdf.Operators.Fill')]
  DNFill = interface(DNOperator)
  ['{8CE35D4A-CD1A-34E8-9E5E-93AA2A97D53A}']
  { getters & setters } 

    function get_Index: Int32;
    procedure set_Index(value: Int32);

  { methods } 

    procedure Accept(visitor: DNIOperatorSelector);
    function ToString: string;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    property Index: Int32 read get_Index write set_Index;
  end;

  TDNFill = class(TDNGenericImport<DNFillClass, DNFill>) end;

  //-------------namespace: Aspose.Pdf.Operators----------------
  DNFillStrokeClass = interface(DNOperatorClass)
  ['{1EB44330-60A3-535C-B3EC-C03AE6A5FE25}']
  { constructors } 

    {class} function init: DNFillStroke;

  end;

  [DNTypeName('Aspose.Pdf.Operators.FillStroke')]
  DNFillStroke = interface(DNOperator)
  ['{84059945-8A78-31FC-A08E-01487F69F1A2}']
  { getters & setters } 

    function get_Index: Int32;
    procedure set_Index(value: Int32);

  { methods } 

    procedure Accept(visitor: DNIOperatorSelector);
    function ToString: string;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    property Index: Int32 read get_Index write set_Index;
  end;

  TDNFillStroke = class(TDNGenericImport<DNFillStrokeClass, DNFillStroke>) end;

  //-------------namespace: Aspose.Pdf.Operators----------------
  DNGRestoreClass = interface(DNOperatorClass)
  ['{02B4D358-7AEC-5D44-94C7-23E2D509733C}']
  { constructors } 

    {class} function init: DNGRestore;

  end;

  [DNTypeName('Aspose.Pdf.Operators.GRestore')]
  DNGRestore = interface(DNOperator)
  ['{6B94F9B9-D78F-3AB5-94F0-FBE98A49BCB6}']
  { getters & setters } 

    function get_Index: Int32;
    procedure set_Index(value: Int32);

  { methods } 

    function ToString: string;
    procedure Accept(visitor: DNIOperatorSelector);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    property Index: Int32 read get_Index write set_Index;
  end;

  TDNGRestore = class(TDNGenericImport<DNGRestoreClass, DNGRestore>) end;

  //-------------namespace: Aspose.Pdf.Operators----------------
  DNGSClass = interface(DNOperatorClass)
  ['{B7804DF5-F9C8-57B8-BE9F-7E0D75967370}']
  { constructors } 

    {class} function init(name: string): DNGS;

  end;

  [DNTypeName('Aspose.Pdf.Operators.GS')]
  DNGS = interface(DNOperator)
  ['{CCF7055D-EAA1-322F-A2D0-B9C3D3E6810B}']
  { getters & setters } 

    function get_Name: string;
    procedure set_Name(value: string);
    function get_Index: Int32;
    procedure set_Index(value: Int32);

  { methods } 

    function ToString: string;
    procedure Accept(visitor: DNIOperatorSelector);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    property Name: string read get_Name write set_Name;
    property Index: Int32 read get_Index write set_Index;
  end;

  TDNGS = class(TDNGenericImport<DNGSClass, DNGS>) end;

  //-------------namespace: Aspose.Pdf.Operators----------------
  DNGSaveClass = interface(DNOperatorClass)
  ['{670D3B89-365B-5577-8CFA-20878DBAA5BE}']
  { constructors } 

    {class} function init: DNGSave;

  end;

  [DNTypeName('Aspose.Pdf.Operators.GSave')]
  DNGSave = interface(DNOperator)
  ['{E6DAEF9F-F7A5-36A2-9391-16261D1F2A12}']
  { getters & setters } 

    function get_Index: Int32;
    procedure set_Index(value: Int32);

  { methods } 

    function ToString: string;
    procedure Accept(visitor: DNIOperatorSelector);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    property Index: Int32 read get_Index write set_Index;
  end;

  TDNGSave = class(TDNGenericImport<DNGSaveClass, DNGSave>) end;

  //-------------namespace: Aspose.Pdf.Operators----------------
  DNOperators_IDClass = interface(DNOperatorClass)
  ['{B1875468-35A7-59CD-9AE9-F2250239B272}']
  end;

  [DNTypeName('Aspose.Pdf.Operators.ID')]
  DNOperators_ID = interface(DNOperator)
  ['{9CCFC46F-BD34-30BA-AEB5-B346B37B5DCC}']
  { getters & setters } 

    function get_Index: Int32;
    procedure set_Index(value: Int32);

  { methods } 

    procedure Accept(visitor: DNIOperatorSelector);
    function ToString: string;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    property Index: Int32 read get_Index write set_Index;
  end;

  TDNOperators_ID = class(TDNGenericImport<DNOperators_IDClass, DNOperators_ID>) end;

  //-------------namespace: Aspose.Pdf.Operators----------------
  DNLineToClass = interface(DNOperatorClass)
  ['{9D57D9E0-00C9-53BD-A005-CA1D4154719E}']
  { constructors } 

    {class} function init(x: Double; y: Double): DNLineTo;

  end;

  [DNTypeName('Aspose.Pdf.Operators.LineTo')]
  DNLineTo = interface(DNOperator)
  ['{7CE22EB5-8BB9-3F91-B684-31418238AE17}']
  { getters & setters } 

    function get_X: Double;
    procedure set_X(value: Double);
    function get_Y: Double;
    procedure set_Y(value: Double);
    function get_Index: Int32;
    procedure set_Index(value: Int32);

  { methods } 

    procedure Accept(visitor: DNIOperatorSelector);
    function ToString: string;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    property X: Double read get_X write set_X;
    property Y: Double read get_Y write set_Y;
    property Index: Int32 read get_Index write set_Index;
  end;

  TDNLineTo = class(TDNGenericImport<DNLineToClass, DNLineTo>) end;

  //-------------namespace: Aspose.Pdf.Operators----------------
  DNMoveToClass = interface(DNOperatorClass)
  ['{BA867791-FD8A-537B-9F22-7623106B6A47}']
  { constructors } 

    {class} function init(x: Double; y: Double): DNMoveTo;

  end;

  [DNTypeName('Aspose.Pdf.Operators.MoveTo')]
  DNMoveTo = interface(DNOperator)
  ['{DF90B3CF-DC68-3470-A03C-C665A435F410}']
  { getters & setters } 

    function get_X: Double;
    procedure set_X(value: Double);
    function get_Y: Double;
    procedure set_Y(value: Double);
    function get_Index: Int32;
    procedure set_Index(value: Int32);

  { methods } 

    procedure Accept(visitor: DNIOperatorSelector);
    function ToString: string;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    property X: Double read get_X write set_X;
    property Y: Double read get_Y write set_Y;
    property Index: Int32 read get_Index write set_Index;
  end;

  TDNMoveTo = class(TDNGenericImport<DNMoveToClass, DNMoveTo>) end;

  //-------------namespace: Aspose.Pdf.Operators----------------
  DNMPClass = interface(DNOperatorClass)
  ['{FC13B661-7CD8-5D5C-8AA1-213504A3218B}']
  { constructors } 

    {class} function init(tag: string): DNMP;

  end;

  [DNTypeName('Aspose.Pdf.Operators.MP')]
  DNMP = interface(DNOperator)
  ['{E75AEDE3-24E2-3719-90D2-4305B788C557}']
  { getters & setters } 

    function get_Tag: string;
    procedure set_Tag(value: string);
    function get_Index: Int32;
    procedure set_Index(value: Int32);

  { methods } 

    procedure Accept(visitor: DNIOperatorSelector);
    function ToString: string;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    property Tag: string read get_Tag write set_Tag;
    property Index: Int32 read get_Index write set_Index;
  end;

  TDNMP = class(TDNGenericImport<DNMPClass, DNMP>) end;

  //-------------namespace: Aspose.Pdf.Operators----------------
  DNObsoleteFillClass = interface(DNOperatorClass)
  ['{19A2279A-947F-50C7-B89C-5BC194E2400D}']
  { constructors } 

    {class} function init: DNObsoleteFill;

  end;

  [DNTypeName('Aspose.Pdf.Operators.ObsoleteFill')]
  DNObsoleteFill = interface(DNOperator)
  ['{B88C4B8D-90CF-30AD-B918-A8F1D2B09E3A}']
  { getters & setters } 

    function get_Index: Int32;
    procedure set_Index(value: Int32);

  { methods } 

    procedure Accept(visitor: DNIOperatorSelector);
    function ToString: string;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    property Index: Int32 read get_Index write set_Index;
  end;

  TDNObsoleteFill = class(TDNGenericImport<DNObsoleteFillClass, DNObsoleteFill>) end;

  //-------------namespace: Aspose.Pdf.Operators----------------
  DNReClass = interface(DNOperatorClass)
  ['{ABB84FD5-A0DA-599C-82B0-BF941731F395}']
  { constructors } 

    {class} function init: DNRe; overload;
    {class} function init(x: Double; y: Double; width: Double; height: Double): DNRe; overload;

  end;

  [DNTypeName('Aspose.Pdf.Operators.Re')]
  DNRe = interface(DNOperator)
  ['{71820200-CF36-3529-9A67-C2B1471039BB}']
  { getters & setters } 

    function get_X: Double;
    procedure set_X(value: Double);
    function get_Y: Double;
    procedure set_Y(value: Double);
    function get_Width: Double;
    procedure set_Width(value: Double);
    function get_Height: Double;
    procedure set_Height(value: Double);
    function get_Index: Int32;
    procedure set_Index(value: Int32);

  { methods } 

    procedure Accept(visitor: DNIOperatorSelector);
    function ToString: string;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    property X: Double read get_X write set_X;
    property Y: Double read get_Y write set_Y;
    property Width: Double read get_Width write set_Width;
    property Height: Double read get_Height write set_Height;
    property Index: Int32 read get_Index write set_Index;
  end;

  TDNRe = class(TDNGenericImport<DNReClass, DNRe>) end;

  //-------------namespace: Aspose.Pdf.Operators----------------
  DNSetCharWidthClass = interface(DNOperatorClass)
  ['{02E3EF4E-1913-5491-B4B9-28477E9428AB}']
  end;

  [DNTypeName('Aspose.Pdf.Operators.SetCharWidth')]
  DNSetCharWidth = interface(DNOperator)
  ['{AE92207E-4DD1-3507-8C9C-B5F14040A01A}']
  { getters & setters } 

    function get_Wx: Double;
    function get_Wy: Double;
    function get_Index: Int32;
    procedure set_Index(value: Int32);

  { methods } 

    procedure Accept(visitor: DNIOperatorSelector);
    function ToString: string;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    property Wx: Double read get_Wx;
    property Wy: Double read get_Wy;
    property Index: Int32 read get_Index write set_Index;
  end;

  TDNSetCharWidth = class(TDNGenericImport<DNSetCharWidthClass, DNSetCharWidth>) end;

  //-------------namespace: Aspose.Pdf.Operators----------------
  DNSetCharWidthBoundingBoxClass = interface(DNOperatorClass)
  ['{546E6E4F-F4E3-5265-8745-6A77DCA3F288}']
  end;

  [DNTypeName('Aspose.Pdf.Operators.SetCharWidthBoundingBox')]
  DNSetCharWidthBoundingBox = interface(DNOperator)
  ['{8A13279F-C032-3534-91E0-A6923D0A4C12}']
  { getters & setters } 

    function get_Wx: Double;
    function get_Wy: Double;
    function get_Llx: Double;
    function get_Lly: Double;
    function get_Urx: Double;
    function get_Ury: Double;
    function get_Index: Int32;
    procedure set_Index(value: Int32);

  { methods } 

    procedure Accept(visitor: DNIOperatorSelector);
    function ToString: string;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    property Wx: Double read get_Wx;
    property Wy: Double read get_Wy;
    property Llx: Double read get_Llx;
    property Lly: Double read get_Lly;
    property Urx: Double read get_Urx;
    property Ury: Double read get_Ury;
    property Index: Int32 read get_Index write set_Index;
  end;

  TDNSetCharWidthBoundingBox = class(TDNGenericImport<DNSetCharWidthBoundingBoxClass, DNSetCharWidthBoundingBox>) end;

  //-------------namespace: Aspose.Pdf.Operators----------------
  DNSetColorOperatorClass = interface(DNOperatorClass)
  ['{45DAC615-27A0-5C3C-A64D-66CDB6408D30}']
  end;

  [DNTypeName('Aspose.Pdf.Operators.SetColorOperator')]
  DNSetColorOperator = interface(DNOperator)
  ['{DB8744F2-2A58-38C0-B957-4BFEE5AAA647}']
  { getters & setters } 

    function get_Index: Int32;
    procedure set_Index(value: Int32);

  { methods } 

    function getColor: DDN.System.Drawing.DNColor;
    procedure Accept(visitor: DNIOperatorSelector);
    function ToString: string;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    property Index: Int32 read get_Index write set_Index;
  end;

  TDNSetColorOperator = class(TDNGenericImport<DNSetColorOperatorClass, DNSetColorOperator>) end;

  //-------------namespace: Aspose.Pdf.Operators----------------
  DNBasicSetColorOperatorClass = interface(DNSetColorOperatorClass)
  ['{EBE62ABB-0CD3-5ED7-ACC8-A8F8E95C9B9B}']
  end;

  [DNTypeName('Aspose.Pdf.Operators.BasicSetColorOperator')]
  DNBasicSetColorOperator = interface(DNSetColorOperator)
  ['{F7BB0D73-6937-3861-8905-ADA136171FC6}']
  { getters & setters } 

    function get_R: Double;
    function get_G: Double;
    function get_B: Double;
    function get_C: Double;
    function get_M: Double;
    function get_Y: Double;
    function get_K: Double;
    function get_Grey: Double;
    function get_Color: TArray<Double>;
    function get_Index: Int32;
    procedure set_Index(value: Int32);

  { methods } 

    function getColor: DDN.System.Drawing.DNColor;
    procedure Accept(visitor: DNIOperatorSelector);
    function ToString: string;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    property R: Double read get_R;
    property G: Double read get_G;
    property B: Double read get_B;
    property C: Double read get_C;
    property M: Double read get_M;
    property Y: Double read get_Y;
    property K: Double read get_K;
    property Grey: Double read get_Grey;
    property Color: TArray<Double> read get_Color;
    property Index: Int32 read get_Index write set_Index;
  end;

  TDNBasicSetColorOperator = class(TDNGenericImport<DNBasicSetColorOperatorClass, DNBasicSetColorOperator>) end;

  //-------------namespace: Aspose.Pdf.Operators----------------
  DNBasicSetColorAndPatternOperatorClass = interface(DNBasicSetColorOperatorClass)
  ['{07F1B464-EA32-50DE-8747-440B187A3F10}']
  end;

  [DNTypeName('Aspose.Pdf.Operators.BasicSetColorAndPatternOperator')]
  DNBasicSetColorAndPatternOperator = interface(DNBasicSetColorOperator)
  ['{B4F08C6E-3C4C-3364-905B-5F5833718C6B}']
  { getters & setters } 

    function get_PatternName: string;
    function get_R: Double;
    function get_G: Double;
    function get_B: Double;
    function get_C: Double;
    function get_M: Double;
    function get_Y: Double;
    function get_K: Double;
    function get_Grey: Double;
    function get_Color: TArray<Double>;
    function get_Index: Int32;
    procedure set_Index(value: Int32);

  { methods } 

    function getColor: DDN.System.Drawing.DNColor;
    procedure Accept(visitor: DNIOperatorSelector);
    function ToString: string;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    property PatternName: string read get_PatternName;
    property R: Double read get_R;
    property G: Double read get_G;
    property B: Double read get_B;
    property C: Double read get_C;
    property M: Double read get_M;
    property Y: Double read get_Y;
    property K: Double read get_K;
    property Grey: Double read get_Grey;
    property Color: TArray<Double> read get_Color;
    property Index: Int32 read get_Index write set_Index;
  end;

  TDNBasicSetColorAndPatternOperator = class(TDNGenericImport<DNBasicSetColorAndPatternOperatorClass, DNBasicSetColorAndPatternOperator>) end;

  //-------------namespace: Aspose.Pdf.Operators----------------
  DNSetAdvancedColorClass = interface(DNBasicSetColorAndPatternOperatorClass)
  ['{1512AA51-D156-5ACA-AF65-DF2215D4447E}']
  { constructors } 

    {class} function init: DNSetAdvancedColor; overload;
    {class} function init(g: Double; patternName: string): DNSetAdvancedColor; overload;
    {class} function init(g: Double): DNSetAdvancedColor; overload;
    {class} function init(r: Double; g: Double; b: Double; patterName: string): DNSetAdvancedColor; overload;
    {class} function init(c: Double; m: Double; y: Double; k: Double; patternName: string): DNSetAdvancedColor; overload;

  end;

  [DNTypeName('Aspose.Pdf.Operators.SetAdvancedColor')]
  DNSetAdvancedColor = interface(DNBasicSetColorAndPatternOperator)
  ['{01421C20-C222-38B3-9E6A-A2E4F28BBD2C}']
  { getters & setters } 

    function get_PatternName: string;
    function get_R: Double;
    function get_G: Double;
    function get_B: Double;
    function get_C: Double;
    function get_M: Double;
    function get_Y: Double;
    function get_K: Double;
    function get_Grey: Double;
    function get_Color: TArray<Double>;
    function get_Index: Int32;
    procedure set_Index(value: Int32);

  { methods } 

    function getColor: DDN.System.Drawing.DNColor;
    procedure Accept(visitor: DNIOperatorSelector);
    function ToString: string;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    property PatternName: string read get_PatternName;
    property R: Double read get_R;
    property G: Double read get_G;
    property B: Double read get_B;
    property C: Double read get_C;
    property M: Double read get_M;
    property Y: Double read get_Y;
    property K: Double read get_K;
    property Grey: Double read get_Grey;
    property Color: TArray<Double> read get_Color;
    property Index: Int32 read get_Index write set_Index;
  end;

  TDNSetAdvancedColor = class(TDNGenericImport<DNSetAdvancedColorClass, DNSetAdvancedColor>) end;

  //-------------namespace: Aspose.Pdf.Operators----------------
  DNSetAdvancedColorStrokeClass = interface(DNBasicSetColorAndPatternOperatorClass)
  ['{220A7D15-4432-5055-9B73-9E567A4483EF}']
  { constructors } 

    {class} function init: DNSetAdvancedColorStroke; overload;
    {class} function init(g: Double): DNSetAdvancedColorStroke; overload;
    {class} function init(g: Double; patternName: string): DNSetAdvancedColorStroke; overload;
    {class} function init(r: Double; g: Double; b: Double; patternName: string): DNSetAdvancedColorStroke; overload;
    {class} function init(c: Double; m: Double; y: Double; k: Double; patternName: string): DNSetAdvancedColorStroke; overload;

  end;

  [DNTypeName('Aspose.Pdf.Operators.SetAdvancedColorStroke')]
  DNSetAdvancedColorStroke = interface(DNBasicSetColorAndPatternOperator)
  ['{7D897B68-0748-34BD-BD77-3872D61B387B}']
  { getters & setters } 

    function get_PatternName: string;
    function get_R: Double;
    function get_G: Double;
    function get_B: Double;
    function get_C: Double;
    function get_M: Double;
    function get_Y: Double;
    function get_K: Double;
    function get_Grey: Double;
    function get_Color: TArray<Double>;
    function get_Index: Int32;
    procedure set_Index(value: Int32);

  { methods } 

    function getColor: DDN.System.Drawing.DNColor;
    procedure Accept(visitor: DNIOperatorSelector);
    function ToString: string;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    property PatternName: string read get_PatternName;
    property R: Double read get_R;
    property G: Double read get_G;
    property B: Double read get_B;
    property C: Double read get_C;
    property M: Double read get_M;
    property Y: Double read get_Y;
    property K: Double read get_K;
    property Grey: Double read get_Grey;
    property Color: TArray<Double> read get_Color;
    property Index: Int32 read get_Index write set_Index;
  end;

  TDNSetAdvancedColorStroke = class(TDNGenericImport<DNSetAdvancedColorStrokeClass, DNSetAdvancedColorStroke>) end;

  //-------------namespace: Aspose.Pdf.Operators----------------
  DNSetColorClass = interface(DNBasicSetColorOperatorClass)
  ['{8FE4C9E1-7941-5061-B3AF-C6E2181A98E4}']
  { constructors } 

    {class} function init: DNSetColor; overload;
    {class} function init(g: Double): DNSetColor; overload;
    {class} function init(r: Double; g: Double; b: Double): DNSetColor; overload;
    {class} function init(c: Double; m: Double; y: Double; k: Double): DNSetColor; overload;
    {class} function init(color: TArray<Double>): DNSetColor; overload;

  end;

  [DNTypeName('Aspose.Pdf.Operators.SetColor')]
  DNSetColor = interface(DNBasicSetColorOperator)
  ['{1D3F5ED7-2EB7-3C8F-A9E2-8E559FE4418B}']
  { getters & setters } 

    function get_R: Double;
    function get_G: Double;
    function get_B: Double;
    function get_C: Double;
    function get_M: Double;
    function get_Y: Double;
    function get_K: Double;
    function get_Grey: Double;
    function get_Color: TArray<Double>;
    function get_Index: Int32;
    procedure set_Index(value: Int32);

  { methods } 

    function getColor: DDN.System.Drawing.DNColor;
    procedure Accept(visitor: DNIOperatorSelector);
    function ToString: string;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    property R: Double read get_R;
    property G: Double read get_G;
    property B: Double read get_B;
    property C: Double read get_C;
    property M: Double read get_M;
    property Y: Double read get_Y;
    property K: Double read get_K;
    property Grey: Double read get_Grey;
    property Color: TArray<Double> read get_Color;
    property Index: Int32 read get_Index write set_Index;
  end;

  TDNSetColor = class(TDNGenericImport<DNSetColorClass, DNSetColor>) end;

  //-------------namespace: Aspose.Pdf.Operators----------------
  DNSetColorStrokeClass = interface(DNBasicSetColorOperatorClass)
  ['{FC3AFFF5-0BF2-51ED-8F65-9ECF60966F67}']
  { constructors } 

    {class} function init: DNSetColorStroke; overload;
    {class} function init(g: Double): DNSetColorStroke; overload;
    {class} function init(r: Double; g: Double; b: Double): DNSetColorStroke; overload;
    {class} function init(color: TArray<Double>): DNSetColorStroke; overload;
    {class} function init(c: Double; m: Double; y: Double; k: Double): DNSetColorStroke; overload;

  end;

  [DNTypeName('Aspose.Pdf.Operators.SetColorStroke')]
  DNSetColorStroke = interface(DNBasicSetColorOperator)
  ['{81B5F507-AAF1-3B77-8CED-B1FA7675B215}']
  { getters & setters } 

    function get_R: Double;
    function get_G: Double;
    function get_B: Double;
    function get_C: Double;
    function get_M: Double;
    function get_Y: Double;
    function get_K: Double;
    function get_Grey: Double;
    function get_Color: TArray<Double>;
    function get_Index: Int32;
    procedure set_Index(value: Int32);

  { methods } 

    function getColor: DDN.System.Drawing.DNColor;
    procedure Accept(visitor: DNIOperatorSelector);
    function ToString: string;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    property R: Double read get_R;
    property G: Double read get_G;
    property B: Double read get_B;
    property C: Double read get_C;
    property M: Double read get_M;
    property Y: Double read get_Y;
    property K: Double read get_K;
    property Grey: Double read get_Grey;
    property Color: TArray<Double> read get_Color;
    property Index: Int32 read get_Index write set_Index;
  end;

  TDNSetColorStroke = class(TDNGenericImport<DNSetColorStrokeClass, DNSetColorStroke>) end;

  //-------------namespace: Aspose.Pdf.Operators----------------
  DNSetCMYKColorClass = interface(DNSetColorOperatorClass)
  ['{197DE1A4-16A5-5BA1-A3BD-4962CAB05133}']
  { constructors } 

    {class} function init(c: Double; m: Double; y: Double; k: Double): DNSetCMYKColor;

  end;

  [DNTypeName('Aspose.Pdf.Operators.SetCMYKColor')]
  DNSetCMYKColor = interface(DNSetColorOperator)
  ['{28912756-F0EE-3304-B2CD-AA22AB93559A}']
  { getters & setters } 

    function get_Index: Int32;
    procedure set_Index(value: Int32);

  { methods } 

    function getColor: DDN.System.Drawing.DNColor;
    procedure Accept(visitor: DNIOperatorSelector);
    function ToString: string;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    property Index: Int32 read get_Index write set_Index;
  end;

  TDNSetCMYKColor = class(TDNGenericImport<DNSetCMYKColorClass, DNSetCMYKColor>) end;

  //-------------namespace: Aspose.Pdf.Operators----------------
  DNSetCMYKColorStrokeClass = interface(DNSetColorOperatorClass)
  ['{9BF925F0-D8E6-582B-886D-F76F28CD231F}']
  { constructors } 

    {class} function init(c: Double; m: Double; y: Double; k: Double): DNSetCMYKColorStroke;

  end;

  [DNTypeName('Aspose.Pdf.Operators.SetCMYKColorStroke')]
  DNSetCMYKColorStroke = interface(DNSetColorOperator)
  ['{909E64ED-6514-3B06-8693-6F8D241E9A43}']
  { getters & setters } 

    function get_Index: Int32;
    procedure set_Index(value: Int32);

  { methods } 

    function getColor: DDN.System.Drawing.DNColor;
    procedure Accept(visitor: DNIOperatorSelector);
    function ToString: string;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    property Index: Int32 read get_Index write set_Index;
  end;

  TDNSetCMYKColorStroke = class(TDNGenericImport<DNSetCMYKColorStrokeClass, DNSetCMYKColorStroke>) end;

  //-------------namespace: Aspose.Pdf.Operators----------------
  DNSetGrayClass = interface(DNSetColorOperatorClass)
  ['{AD543502-B03C-5626-96DF-9C3A2D5744C8}']
  { constructors } 

    {class} function init(gray: Double): DNSetGray;

  end;

  [DNTypeName('Aspose.Pdf.Operators.SetGray')]
  DNSetGray = interface(DNSetColorOperator)
  ['{F634F223-CE52-30F7-BDD8-628829C817F3}']
  { getters & setters } 

    function get_Index: Int32;
    procedure set_Index(value: Int32);

  { methods } 

    function getColor: DDN.System.Drawing.DNColor;
    procedure Accept(visitor: DNIOperatorSelector);
    function ToString: string;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    property Index: Int32 read get_Index write set_Index;
  end;

  TDNSetGray = class(TDNGenericImport<DNSetGrayClass, DNSetGray>) end;

  //-------------namespace: Aspose.Pdf.Operators----------------
  DNSetGrayStrokeClass = interface(DNSetColorOperatorClass)
  ['{4BD07CA8-E554-594C-A37E-8E53CA42493C}']
  { constructors } 

    {class} function init(gray: Double): DNSetGrayStroke;

  end;

  [DNTypeName('Aspose.Pdf.Operators.SetGrayStroke')]
  DNSetGrayStroke = interface(DNSetColorOperator)
  ['{B10C37A5-6897-3A27-AB29-A74812EE68A6}']
  { getters & setters } 

    function get_Index: Int32;
    procedure set_Index(value: Int32);

  { methods } 

    function getColor: DDN.System.Drawing.DNColor;
    procedure Accept(visitor: DNIOperatorSelector);
    function ToString: string;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    property Index: Int32 read get_Index write set_Index;
  end;

  TDNSetGrayStroke = class(TDNGenericImport<DNSetGrayStrokeClass, DNSetGrayStroke>) end;

  //-------------namespace: Aspose.Pdf.Operators----------------
  DNSetRGBColorClass = interface(DNSetColorOperatorClass)
  ['{DDC399DD-845C-545F-88A9-CA6CB159E4D1}']
  { constructors } 

    {class} function init(r: Double; g: Double; b: Double): DNSetRGBColor; overload;
    {class} function init(color: DDN.System.Drawing.DNColor): DNSetRGBColor; overload;

  end;

  [DNTypeName('Aspose.Pdf.Operators.SetRGBColor')]
  DNSetRGBColor = interface(DNSetColorOperator)
  ['{F6A350A0-9EA3-3C36-A86D-61CB39D0ABDF}']
  { getters & setters } 

    function get_Index: Int32;
    procedure set_Index(value: Int32);

  { methods } 

    function getColor: DDN.System.Drawing.DNColor;
    procedure Accept(visitor: DNIOperatorSelector);
    function ToString: string;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    property Index: Int32 read get_Index write set_Index;
  end;

  TDNSetRGBColor = class(TDNGenericImport<DNSetRGBColorClass, DNSetRGBColor>) end;

  //-------------namespace: Aspose.Pdf.Operators----------------
  DNSetRGBColorStrokeClass = interface(DNSetColorOperatorClass)
  ['{4443B5F5-229B-5DEA-9B88-29D5A360D5B2}']
  { constructors } 

    {class} function init(r: Double; g: Double; b: Double): DNSetRGBColorStroke; overload;
    {class} function init(color: DDN.System.Drawing.DNColor): DNSetRGBColorStroke; overload;

  end;

  [DNTypeName('Aspose.Pdf.Operators.SetRGBColorStroke')]
  DNSetRGBColorStroke = interface(DNSetColorOperator)
  ['{781251F8-0686-3600-883A-4B3461E4745A}']
  { getters & setters } 

    function get_Index: Int32;
    procedure set_Index(value: Int32);

  { methods } 

    function getColor: DDN.System.Drawing.DNColor;
    procedure Accept(visitor: DNIOperatorSelector);
    function ToString: string;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    property Index: Int32 read get_Index write set_Index;
  end;

  TDNSetRGBColorStroke = class(TDNGenericImport<DNSetRGBColorStrokeClass, DNSetRGBColorStroke>) end;

  //-------------namespace: Aspose.Pdf.Operators----------------
  DNSetColorRenderingIntentClass = interface(DNOperatorClass)
  ['{0782A8B6-D9EF-546B-9132-E9CC365A198F}']
  { constructors } 

    {class} function init(intentName: string): DNSetColorRenderingIntent;

  end;

  [DNTypeName('Aspose.Pdf.Operators.SetColorRenderingIntent')]
  DNSetColorRenderingIntent = interface(DNOperator)
  ['{5B5429EF-19E0-3415-BBBD-C6A8198BD486}']
  { getters & setters } 

    function get_IntentName: string;
    procedure set_IntentName(value: string);
    function get_Index: Int32;
    procedure set_Index(value: Int32);

  { methods } 

    procedure Accept(visitor: DNIOperatorSelector);
    function ToString: string;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    property IntentName: string read get_IntentName write set_IntentName;
    property Index: Int32 read get_Index write set_Index;
  end;

  TDNSetColorRenderingIntent = class(TDNGenericImport<DNSetColorRenderingIntentClass, DNSetColorRenderingIntent>) end;

  //-------------namespace: Aspose.Pdf.Operators----------------
  DNSetColorSpaceClass = interface(DNOperatorClass)
  ['{E31AEE9D-0218-547F-BD43-1FB733CF86EB}']
  { constructors } 

    {class} function init(name: string): DNSetColorSpace;

  end;

  [DNTypeName('Aspose.Pdf.Operators.SetColorSpace')]
  DNSetColorSpace = interface(DNOperator)
  ['{E6168F5A-2A7E-34C0-8EE7-A3DA5C78C8E5}']
  { getters & setters } 

    function get_Name: string;
    procedure set_Name(value: string);
    function get_Index: Int32;
    procedure set_Index(value: Int32);

  { methods } 

    procedure Accept(visitor: DNIOperatorSelector);
    function ToString: string;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    property Name: string read get_Name write set_Name;
    property Index: Int32 read get_Index write set_Index;
  end;

  TDNSetColorSpace = class(TDNGenericImport<DNSetColorSpaceClass, DNSetColorSpace>) end;

  //-------------namespace: Aspose.Pdf.Operators----------------
  DNSetColorSpaceStrokeClass = interface(DNOperatorClass)
  ['{783AD5FD-311B-50AB-A8BA-12FD157170CB}']
  { constructors } 

    {class} function init(name: string): DNSetColorSpaceStroke;

  end;

  [DNTypeName('Aspose.Pdf.Operators.SetColorSpaceStroke')]
  DNSetColorSpaceStroke = interface(DNOperator)
  ['{D9BDB7C8-1A77-378A-B1D3-100989C3C905}']
  { getters & setters } 

    function get_Name: string;
    procedure set_Name(value: string);
    function get_Index: Int32;
    procedure set_Index(value: Int32);

  { methods } 

    procedure Accept(visitor: DNIOperatorSelector);
    function ToString: string;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    property Name: string read get_Name write set_Name;
    property Index: Int32 read get_Index write set_Index;
  end;

  TDNSetColorSpaceStroke = class(TDNGenericImport<DNSetColorSpaceStrokeClass, DNSetColorSpaceStroke>) end;

  //-------------namespace: Aspose.Pdf.Operators----------------
  DNSetDashClass = interface(DNOperatorClass)
  ['{D47C2ADA-8A57-5E74-9FC8-9FE70A802B9E}']
  { constructors } 

    {class} function init(pattern: TArray<Int32>; phase: Int32): DNSetDash;

  end;

  [DNTypeName('Aspose.Pdf.Operators.SetDash')]
  DNSetDash = interface(DNOperator)
  ['{E2DF8815-33A0-350E-87AB-0E72FEB834B6}']
  { getters & setters } 

    function get_Pattern: TArray<Int32>;
    procedure set_Pattern(value: TArray<Int32>);
    function get_Phase: Int32;
    procedure set_Phase(value: Int32);
    function get_Index: Int32;
    procedure set_Index(value: Int32);

  { methods } 

    procedure Accept(visitor: DNIOperatorSelector);
    function ToString: string;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    property Pattern: TArray<Int32> read get_Pattern write set_Pattern;
    property Phase: Int32 read get_Phase write set_Phase;
    property Index: Int32 read get_Index write set_Index;
  end;

  TDNSetDash = class(TDNGenericImport<DNSetDashClass, DNSetDash>) end;

  //-------------namespace: Aspose.Pdf.Operators----------------
  DNSetFlatClass = interface(DNOperatorClass)
  ['{764EB9AB-1C48-5F3A-BE87-7D23CA04FD57}']
  { constructors } 

    {class} function init(flatness: Double): DNSetFlat;

  end;

  [DNTypeName('Aspose.Pdf.Operators.SetFlat')]
  DNSetFlat = interface(DNOperator)
  ['{BA494B02-AEF3-3616-8D91-45204376DB9A}']
  { getters & setters } 

    function get_Flatness: Double;
    procedure set_Flatness(value: Double);
    function get_Index: Int32;
    procedure set_Index(value: Int32);

  { methods } 

    procedure Accept(visitor: DNIOperatorSelector);
    function ToString: string;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    property Flatness: Double read get_Flatness write set_Flatness;
    property Index: Int32 read get_Index write set_Index;
  end;

  TDNSetFlat = class(TDNGenericImport<DNSetFlatClass, DNSetFlat>) end;

  //-------------namespace: Aspose.Pdf.Operators----------------
  DNSetLineCapClass = interface(DNOperatorClass)
  ['{259114CB-C081-54B7-A18B-E5A8A367CC51}']
  end;

  [DNTypeName('Aspose.Pdf.Operators.SetLineCap')]
  DNSetLineCap = interface(DNOperator)
  ['{6EC324DB-950A-32FE-8E4D-32A90099C7E4}']
  { getters & setters } 

    function get_Index: Int32;
    procedure set_Index(value: Int32);

  { methods } 

    procedure Accept(visitor: DNIOperatorSelector);
    function ToString: string;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    property Index: Int32 read get_Index write set_Index;
  end;

  TDNSetLineCap = class(TDNGenericImport<DNSetLineCapClass, DNSetLineCap>) end;

  //-------------namespace: Aspose.Pdf.Operators----------------
  DNSetLineJoinClass = interface(DNOperatorClass)
  ['{85A0F849-F331-5C14-A2D6-076B5C88405A}']
  end;

  [DNTypeName('Aspose.Pdf.Operators.SetLineJoin')]
  DNSetLineJoin = interface(DNOperator)
  ['{587511CA-768B-33DF-8CC6-4506F63B98CB}']
  { getters & setters } 

    function get_Index: Int32;
    procedure set_Index(value: Int32);

  { methods } 

    procedure Accept(visitor: DNIOperatorSelector);
    function ToString: string;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    property Index: Int32 read get_Index write set_Index;
  end;

  TDNSetLineJoin = class(TDNGenericImport<DNSetLineJoinClass, DNSetLineJoin>) end;

  //-------------namespace: Aspose.Pdf.Operators----------------
  DNSetLineWidthClass = interface(DNOperatorClass)
  ['{EAC10B5F-B2AC-57FF-8CA5-51E45B4EC8BF}']
  { constructors } 

    {class} function init(width: Double): DNSetLineWidth;

  end;

  [DNTypeName('Aspose.Pdf.Operators.SetLineWidth')]
  DNSetLineWidth = interface(DNOperator)
  ['{A8CF12E3-4E1A-3CAD-BB4C-D3DB75BD890A}']
  { getters & setters } 

    function get_Width: Double;
    procedure set_Width(value: Double);
    function get_Index: Int32;
    procedure set_Index(value: Int32);

  { methods } 

    procedure Accept(visitor: DNIOperatorSelector);
    function ToString: string;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    property Width: Double read get_Width write set_Width;
    property Index: Int32 read get_Index write set_Index;
  end;

  TDNSetLineWidth = class(TDNGenericImport<DNSetLineWidthClass, DNSetLineWidth>) end;

  //-------------namespace: Aspose.Pdf.Operators----------------
  DNSetMiterLimitClass = interface(DNOperatorClass)
  ['{6241EF3C-485E-5EC1-8A04-553EED1C2C63}']
  { constructors } 

    {class} function init(miterLimit: Double): DNSetMiterLimit;

  end;

  [DNTypeName('Aspose.Pdf.Operators.SetMiterLimit')]
  DNSetMiterLimit = interface(DNOperator)
  ['{94FE32BE-27B3-3CCB-8C03-4319FB89EBDE}']
  { getters & setters } 

    function get_MiterLimit: Double;
    procedure set_MiterLimit(value: Double);
    function get_Index: Int32;
    procedure set_Index(value: Int32);

  { methods } 

    procedure Accept(visitor: DNIOperatorSelector);
    function ToString: string;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    property MiterLimit: Double read get_MiterLimit write set_MiterLimit;
    property Index: Int32 read get_Index write set_Index;
  end;

  TDNSetMiterLimit = class(TDNGenericImport<DNSetMiterLimitClass, DNSetMiterLimit>) end;

  //-------------namespace: Aspose.Pdf.Operators----------------
  DNShFillClass = interface(DNOperatorClass)
  ['{AAAFE5A0-E351-5DD8-A544-3888494FF277}']
  { constructors } 

    {class} function init(shadingName: string): DNShFill;

  end;

  [DNTypeName('Aspose.Pdf.Operators.ShFill')]
  DNShFill = interface(DNOperator)
  ['{B7A6D13D-9650-36CF-BD5E-B0455CA185CB}']
  { getters & setters } 

    function get_Name: string;
    procedure set_Name(value: string);
    function get_Index: Int32;
    procedure set_Index(value: Int32);

  { methods } 

    procedure Accept(visitor: DNIOperatorSelector);
    function ToString: string;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    property Name: string read get_Name write set_Name;
    property Index: Int32 read get_Index write set_Index;
  end;

  TDNShFill = class(TDNGenericImport<DNShFillClass, DNShFill>) end;

  //-------------namespace: Aspose.Pdf.Operators----------------
  DNStrokeClass = interface(DNOperatorClass)
  ['{D43FC8EE-0D1A-5A3B-8564-4C10CC790EF1}']
  { constructors } 

    {class} function init: DNStroke;

  end;

  [DNTypeName('Aspose.Pdf.Operators.Stroke')]
  DNStroke = interface(DNOperator)
  ['{A1191D97-7D99-3462-BA51-0BDA6692281F}']
  { getters & setters } 

    function get_Index: Int32;
    procedure set_Index(value: Int32);

  { methods } 

    procedure Accept(visitor: DNIOperatorSelector);
    function ToString: string;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    property Index: Int32 read get_Index write set_Index;
  end;

  TDNStroke = class(TDNGenericImport<DNStrokeClass, DNStroke>) end;

  //-------------namespace: Aspose.Pdf.Operators----------------
  DNTextOperatorClass = interface(DNOperatorClass)
  ['{BF4027B4-E543-559A-AD43-A0F63C459F40}']
  { constructors } 

    {class} function init: DNTextOperator; overload;
    {class} function init(textProperties: DNTextProperties): DNTextOperator; overload;

  end;

  [DNTypeName('Aspose.Pdf.Operators.TextOperator')]
  DNTextOperator = interface(DNOperator)
  ['{8B56811C-47C1-3603-8694-46D3EB7D0284}']
  { getters & setters } 

    function get_Index: Int32;
    procedure set_Index(value: Int32);

  { methods } 

    procedure Accept(visitor: DNIOperatorSelector);
    function ToString: string;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    property Index: Int32 read get_Index write set_Index;
  end;

  TDNTextOperator = class(TDNGenericImport<DNTextOperatorClass, DNTextOperator>) end;

  //-------------namespace: Aspose.Pdf.Operators----------------
  DNBlockTextOperatorClass = interface(DNTextOperatorClass)
  ['{0A7663FA-6D2A-5C7C-B0B1-2931643D33EB}']
  { constructors } 

    {class} function init: DNBlockTextOperator; overload;
    {class} function init(textProperties: DNTextProperties): DNBlockTextOperator; overload;

  end;

  [DNTypeName('Aspose.Pdf.Operators.BlockTextOperator')]
  DNBlockTextOperator = interface(DNTextOperator)
  ['{ACDC1DB5-037C-3D30-AD78-C471718DC9E2}']
  { getters & setters } 

    function get_Index: Int32;
    procedure set_Index(value: Int32);

  { methods } 

    procedure Accept(visitor: DNIOperatorSelector);
    function ToString: string;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    property Index: Int32 read get_Index write set_Index;
  end;

  TDNBlockTextOperator = class(TDNGenericImport<DNBlockTextOperatorClass, DNBlockTextOperator>) end;

  //-------------namespace: Aspose.Pdf.Operators----------------
  DNBTClass = interface(DNBlockTextOperatorClass)
  ['{7B81A893-F409-500A-9D52-E06C3601BF41}']
  { constructors } 

    {class} function init: DNBT;

  end;

  [DNTypeName('Aspose.Pdf.Operators.BT')]
  DNBT = interface(DNBlockTextOperator)
  ['{8E71B5CD-E073-3297-8870-2ED4C571FEED}']
  { getters & setters } 

    function get_Index: Int32;
    procedure set_Index(value: Int32);

  { methods } 

    procedure Accept(visitor: DNIOperatorSelector);
    function ToString: string;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    property Index: Int32 read get_Index write set_Index;
  end;

  TDNBT = class(TDNGenericImport<DNBTClass, DNBT>) end;

  //-------------namespace: Aspose.Pdf.Operators----------------
  DNETClass = interface(DNBlockTextOperatorClass)
  ['{E28D7442-1C42-5BB1-ACE0-2BF8292EC818}']
  { constructors } 

    {class} function init: DNET;

  end;

  [DNTypeName('Aspose.Pdf.Operators.ET')]
  DNET = interface(DNBlockTextOperator)
  ['{8F66FFA5-E6DD-38E9-B8DB-1FA7A5F610A3}']
  { getters & setters } 

    function get_Index: Int32;
    procedure set_Index(value: Int32);

  { methods } 

    procedure Accept(visitor: DNIOperatorSelector);
    function ToString: string;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    property Index: Int32 read get_Index write set_Index;
  end;

  TDNET = class(TDNGenericImport<DNETClass, DNET>) end;

  //-------------namespace: Aspose.Pdf.Operators----------------
  DNTextPlaceOperatorClass = interface(DNTextOperatorClass)
  ['{5E949D87-26FD-596F-9A45-2D71C56E9C59}']
  { constructors } 

    {class} function init: DNTextPlaceOperator; overload;
    {class} function init(textProperties: DNTextProperties): DNTextPlaceOperator; overload;

  end;

  [DNTypeName('Aspose.Pdf.Operators.TextPlaceOperator')]
  DNTextPlaceOperator = interface(DNTextOperator)
  ['{2E9A5B2F-FC72-3857-AE63-8C47453D2403}']
  { getters & setters } 

    function get_Index: Int32;
    procedure set_Index(value: Int32);

  { methods } 

    procedure Accept(visitor: DNIOperatorSelector);
    function ToString: string;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    property Index: Int32 read get_Index write set_Index;
  end;

  TDNTextPlaceOperator = class(TDNGenericImport<DNTextPlaceOperatorClass, DNTextPlaceOperator>) end;

  //-------------namespace: Aspose.Pdf.Operators----------------
  DNMoveTextPositionClass = interface(DNTextPlaceOperatorClass)
  ['{64B9652B-0583-59FA-884F-0FD7B1B48694}']
  { constructors } 

    {class} function init(x: Double; y: Double): DNMoveTextPosition;

  end;

  [DNTypeName('Aspose.Pdf.Operators.MoveTextPosition')]
  DNMoveTextPosition = interface(DNTextPlaceOperator)
  ['{1D267BF5-D614-34CA-B829-FD771E7A1B00}']
  { getters & setters } 

    function get_X: Double;
    procedure set_X(value: Double);
    function get_Y: Double;
    procedure set_Y(value: Double);
    function get_Index: Int32;
    procedure set_Index(value: Int32);

  { methods } 

    procedure Accept(visitor: DNIOperatorSelector);
    function ToString: string;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    property X: Double read get_X write set_X;
    property Y: Double read get_Y write set_Y;
    property Index: Int32 read get_Index write set_Index;
  end;

  TDNMoveTextPosition = class(TDNGenericImport<DNMoveTextPositionClass, DNMoveTextPosition>) end;

  //-------------namespace: Aspose.Pdf.Operators----------------
  DNMoveTextPositionSetLeadingClass = interface(DNTextPlaceOperatorClass)
  ['{55DB57D2-F56B-5B89-A7C5-32892B074242}']
  { constructors } 

    {class} function init(x: Double; y: Double): DNMoveTextPositionSetLeading;

  end;

  [DNTypeName('Aspose.Pdf.Operators.MoveTextPositionSetLeading')]
  DNMoveTextPositionSetLeading = interface(DNTextPlaceOperator)
  ['{4FF69E03-182A-3D11-807C-6084C299C510}']
  { getters & setters } 

    function get_X: Double;
    procedure set_X(value: Double);
    function get_Y: Double;
    procedure set_Y(value: Double);
    function get_Index: Int32;
    procedure set_Index(value: Int32);

  { methods } 

    procedure Accept(visitor: DNIOperatorSelector);
    function ToString: string;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    property X: Double read get_X write set_X;
    property Y: Double read get_Y write set_Y;
    property Index: Int32 read get_Index write set_Index;
  end;

  TDNMoveTextPositionSetLeading = class(TDNGenericImport<DNMoveTextPositionSetLeadingClass, DNMoveTextPositionSetLeading>) end;

  //-------------namespace: Aspose.Pdf.Operators----------------
  DNMoveToNextLineClass = interface(DNTextPlaceOperatorClass)
  ['{B437CD11-739C-540E-931B-4A6B494C515D}']
  { constructors } 

    {class} function init: DNMoveToNextLine;

  end;

  [DNTypeName('Aspose.Pdf.Operators.MoveToNextLine')]
  DNMoveToNextLine = interface(DNTextPlaceOperator)
  ['{86F8016D-638F-384B-82E7-55682880BCF7}']
  { getters & setters } 

    function get_Index: Int32;
    procedure set_Index(value: Int32);

  { methods } 

    procedure Accept(visitor: DNIOperatorSelector);
    function ToString: string;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    property Index: Int32 read get_Index write set_Index;
  end;

  TDNMoveToNextLine = class(TDNGenericImport<DNMoveToNextLineClass, DNMoveToNextLine>) end;

  //-------------namespace: Aspose.Pdf.Operators----------------
  DNSetTextMatrixClass = interface(DNTextPlaceOperatorClass)
  ['{EC8D8D32-ADDB-5D7C-9264-8E643105458A}']
  { constructors } 

    {class} function init(a: Double; b: Double; c: Double; d: Double; e: Double; f: Double): DNSetTextMatrix; overload;
    {class} function init(m: DNMatrix): DNSetTextMatrix; overload;

  end;

  [DNTypeName('Aspose.Pdf.Operators.SetTextMatrix')]
  DNSetTextMatrix = interface(DNTextPlaceOperator)
  ['{BBD8C509-D184-3E16-B782-621CAD701D89}']
  { getters & setters } 

    function get_Matrix: DNMatrix;
    procedure set_Matrix(value: DNMatrix);
    function get_Index: Int32;
    procedure set_Index(value: Int32);

  { methods } 

    procedure Accept(visitor: DNIOperatorSelector);
    function ToString: string;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    property Matrix: DNMatrix read get_Matrix write set_Matrix;
    property Index: Int32 read get_Index write set_Index;
  end;

  TDNSetTextMatrix = class(TDNGenericImport<DNSetTextMatrixClass, DNSetTextMatrix>) end;

  //-------------namespace: Aspose.Pdf.Operators----------------
  DNTextShowOperatorClass = interface(DNTextOperatorClass)
  ['{3F664B78-17A5-591B-A03F-4F594FD634E7}']
  { constructors } 

    {class} function init: DNTextShowOperator; overload;
    {class} function init(textProperties: DNTextProperties): DNTextShowOperator; overload;

  end;

  [DNTypeName('Aspose.Pdf.Operators.TextShowOperator')]
  DNTextShowOperator = interface(DNTextOperator)
  ['{0458FA6C-7945-3417-83E6-A8372E6C9C0E}']
  { getters & setters } 

    function get_Text: string;
    procedure set_Text(value: string);
    function get_Index: Int32;
    procedure set_Index(value: Int32);

  { methods } 

    procedure Accept(visitor: DNIOperatorSelector);
    function ToString: string;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    property Text: string read get_Text write set_Text;
    property Index: Int32 read get_Index write set_Index;
  end;

  TDNTextShowOperator = class(TDNGenericImport<DNTextShowOperatorClass, DNTextShowOperator>) end;

  //-------------namespace: Aspose.Pdf.Operators----------------
  DNMoveToNextLineShowTextClass = interface(DNTextShowOperatorClass)
  ['{237B8E71-1123-5981-A075-E90ADC37934B}']
  { constructors } 

    {class} function init: DNMoveToNextLineShowText;

  end;

  [DNTypeName('Aspose.Pdf.Operators.MoveToNextLineShowText')]
  DNMoveToNextLineShowText = interface(DNTextShowOperator)
  ['{23BB7E49-E25C-357E-9F8E-F20D28007D43}']
  { getters & setters } 

    function get_Text: string;
    function get_Index: Int32;
    procedure set_Index(value: Int32);

  { methods } 

    procedure Accept(visitor: DNIOperatorSelector);
    function ToString: string;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    property Text: string read get_Text;
    property Index: Int32 read get_Index write set_Index;
  end;

  TDNMoveToNextLineShowText = class(TDNGenericImport<DNMoveToNextLineShowTextClass, DNMoveToNextLineShowText>) end;

  //-------------namespace: Aspose.Pdf.Operators----------------
  DNSetGlyphsPositionShowTextClass = interface(DNTextShowOperatorClass)
  ['{603C1DC4-CCAD-540C-B5E4-AF1486FE819A}']
  { constructors } 

    {class} function init(glyphPositions: DDN.mscorlib.DNIEnumerable<DNGlyphPosition>): DNSetGlyphsPositionShowText;

  end;

  [DNTypeName('Aspose.Pdf.Operators.SetGlyphsPositionShowText')]
  DNSetGlyphsPositionShowText = interface(DNTextShowOperator)
  ['{A50B68AB-B753-3FD7-BA15-A98ED88B9735}']
  { getters & setters } 

    function get_GlyphPositions: DDN.mscorlib.DNIEnumerable<DNGlyphPosition>;
    function get_Text: string;
    function get_Index: Int32;
    procedure set_Index(value: Int32);

  { methods } 

    procedure Accept(visitor: DNIOperatorSelector);
    function ToString: string;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    property GlyphPositions: DDN.mscorlib.DNIEnumerable<DNGlyphPosition> read get_GlyphPositions;
    property Text: string read get_Text;
    property Index: Int32 read get_Index write set_Index;
  end;

  TDNSetGlyphsPositionShowText = class(TDNGenericImport<DNSetGlyphsPositionShowTextClass, DNSetGlyphsPositionShowText>) end;

  //-------------namespace: Aspose.Pdf.Operators----------------
  DNSetSpacingMoveToNextLineShowTextClass = interface(DNTextShowOperatorClass)
  ['{7F9B36D3-EEAF-57FA-A312-B4EA8B2CC6E1}']
  { constructors } 

    {class} function init(aw: Double; ac: Double; text: string): DNSetSpacingMoveToNextLineShowText;

  end;

  [DNTypeName('Aspose.Pdf.Operators.SetSpacingMoveToNextLineShowText')]
  DNSetSpacingMoveToNextLineShowText = interface(DNTextShowOperator)
  ['{91FB6240-B220-3D37-A9B2-DB74A003F73C}']
  { getters & setters } 

    function get_Aw: Double;
    function get_Ac: Double;
    function get_Text: string;
    function get_Index: Int32;
    procedure set_Index(value: Int32);

  { methods } 

    procedure Accept(visitor: DNIOperatorSelector);
    function ToString: string;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    property Aw: Double read get_Aw;
    property Ac: Double read get_Ac;
    property Text: string read get_Text;
    property Index: Int32 read get_Index write set_Index;
  end;

  TDNSetSpacingMoveToNextLineShowText = class(TDNGenericImport<DNSetSpacingMoveToNextLineShowTextClass, DNSetSpacingMoveToNextLineShowText>) end;

  //-------------namespace: Aspose.Pdf.Operators----------------
  DNShowTextClass = interface(DNTextShowOperatorClass)
  ['{FC8B1FCC-2005-5618-AFC5-4E5BE1041235}']
  { constructors } 

    {class} function init(index: Int32; text: string): DNShowText; overload;
    {class} function init(text: string): DNShowText; overload;
    {class} function init(text: string; font: DNFont): DNShowText; overload;
    {class} function init: DNShowText; overload;

  end;

  [DNTypeName('Aspose.Pdf.Operators.ShowText')]
  DNShowText = interface(DNTextShowOperator)
  ['{F904A218-F87B-3E94-9540-A532C8CF7E58}']
  { getters & setters } 

    function get_Text: string;
    procedure set_Text(value: string);
    function get_Index: Int32;
    procedure set_Index(value: Int32);

  { methods } 

    procedure Accept(visitor: DNIOperatorSelector);
    function ToString: string;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    property Text: string read get_Text write set_Text;
    property Index: Int32 read get_Index write set_Index;
  end;

  TDNShowText = class(TDNGenericImport<DNShowTextClass, DNShowText>) end;

  //-------------namespace: Aspose.Pdf.Operators----------------
  DNTextStateOperatorClass = interface(DNTextOperatorClass)
  ['{1F944C21-FDAA-5CF8-B62C-9F78194CFC9B}']
  { constructors } 

    {class} function init: DNTextStateOperator; overload;
    {class} function init(textProperties: DNTextProperties): DNTextStateOperator; overload;

  end;

  [DNTypeName('Aspose.Pdf.Operators.TextStateOperator')]
  DNTextStateOperator = interface(DNTextOperator)
  ['{D9D54605-E68E-383F-8485-B9D264348F3C}']
  { getters & setters } 

    function get_Index: Int32;
    procedure set_Index(value: Int32);

  { methods } 

    procedure Accept(visitor: DNIOperatorSelector);
    function ToString: string;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    property Index: Int32 read get_Index write set_Index;
  end;

  TDNTextStateOperator = class(TDNGenericImport<DNTextStateOperatorClass, DNTextStateOperator>) end;

  //-------------namespace: Aspose.Pdf.Operators----------------
  DNSelectFontClass = interface(DNTextStateOperatorClass)
  ['{F1B95E33-7A4A-5C32-A570-5DCE05A6BA55}']
  { constructors } 

    {class} function init(resName: string; size: Double): DNSelectFont;

  end;

  [DNTypeName('Aspose.Pdf.Operators.SelectFont')]
  DNSelectFont = interface(DNTextStateOperator)
  ['{372CEB09-A449-34E4-8C11-C25CA3BACA13}']
  { getters & setters } 

    function get_Name: string;
    function get_Size: Double;
    function get_Index: Int32;
    procedure set_Index(value: Int32);

  { methods } 

    procedure Accept(visitor: DNIOperatorSelector);
    function ToString: string;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    property Name: string read get_Name;
    property Size: Double read get_Size;
    property Index: Int32 read get_Index write set_Index;
  end;

  TDNSelectFont = class(TDNGenericImport<DNSelectFontClass, DNSelectFont>) end;

  //-------------namespace: Aspose.Pdf.Operators----------------
  DNSetCharacterSpacingClass = interface(DNTextStateOperatorClass)
  ['{433EF992-BBB1-5AFC-AF3C-3A03BB6DFD25}']
  { constructors } 

    {class} function init(charSpacing: Double): DNSetCharacterSpacing;

  end;

  [DNTypeName('Aspose.Pdf.Operators.SetCharacterSpacing')]
  DNSetCharacterSpacing = interface(DNTextStateOperator)
  ['{2C5F6719-82E0-3502-81A1-ECED1470AB01}']
  { getters & setters } 

    function get_CharSpacing: Double;
    procedure set_CharSpacing(value: Double);
    function get_Index: Int32;
    procedure set_Index(value: Int32);

  { methods } 

    procedure Accept(visitor: DNIOperatorSelector);
    function ToString: string;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    property CharSpacing: Double read get_CharSpacing write set_CharSpacing;
    property Index: Int32 read get_Index write set_Index;
  end;

  TDNSetCharacterSpacing = class(TDNGenericImport<DNSetCharacterSpacingClass, DNSetCharacterSpacing>) end;

  //-------------namespace: Aspose.Pdf.Operators----------------
  DNSetHorizontalTextScalingClass = interface(DNTextStateOperatorClass)
  ['{86A90924-D418-503C-B0A9-1844FE6BD0A6}']
  { constructors } 

    {class} function init(horizintalScaling: Double): DNSetHorizontalTextScaling;

  end;

  [DNTypeName('Aspose.Pdf.Operators.SetHorizontalTextScaling')]
  DNSetHorizontalTextScaling = interface(DNTextStateOperator)
  ['{3CA93A7B-5612-361F-B703-0B931A7E3BDB}']
  { getters & setters } 

    function get_HorizontalScaling: Double;
    procedure set_HorizontalScaling(value: Double);
    function get_Index: Int32;
    procedure set_Index(value: Int32);

  { methods } 

    procedure Accept(visitor: DNIOperatorSelector);
    function ToString: string;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    property HorizontalScaling: Double read get_HorizontalScaling write set_HorizontalScaling;
    property Index: Int32 read get_Index write set_Index;
  end;

  TDNSetHorizontalTextScaling = class(TDNGenericImport<DNSetHorizontalTextScalingClass, DNSetHorizontalTextScaling>) end;

  //-------------namespace: Aspose.Pdf.Operators----------------
  DNSetTextLeadingClass = interface(DNTextStateOperatorClass)
  ['{6E615E03-E3FB-5942-854D-EB02F5176724}']
  { constructors } 

    {class} function init(leading: Double): DNSetTextLeading;

  end;

  [DNTypeName('Aspose.Pdf.Operators.SetTextLeading')]
  DNSetTextLeading = interface(DNTextStateOperator)
  ['{D34460C0-0CF1-3C15-8D89-FFF6C2401457}']
  { getters & setters } 

    function get_Leading: Double;
    procedure set_Leading(value: Double);
    function get_Index: Int32;
    procedure set_Index(value: Int32);

  { methods } 

    procedure Accept(visitor: DNIOperatorSelector);
    function ToString: string;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    property Leading: Double read get_Leading write set_Leading;
    property Index: Int32 read get_Index write set_Index;
  end;

  TDNSetTextLeading = class(TDNGenericImport<DNSetTextLeadingClass, DNSetTextLeading>) end;

  //-------------namespace: Aspose.Pdf.Operators----------------
  DNSetTextRenderingModeClass = interface(DNTextStateOperatorClass)
  ['{BDE06DF1-C4F1-5704-B5EF-73C7FB1266D9}']
  end;

  [DNTypeName('Aspose.Pdf.Operators.SetTextRenderingMode')]
  DNSetTextRenderingMode = interface(DNTextStateOperator)
  ['{756D4069-C2FE-3D39-B7CD-4813F7315AA8}']
  { getters & setters } 

    function get_Index: Int32;
    procedure set_Index(value: Int32);

  { methods } 

    procedure Accept(visitor: DNIOperatorSelector);
    function ToString: string;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    property Index: Int32 read get_Index write set_Index;
  end;

  TDNSetTextRenderingMode = class(TDNGenericImport<DNSetTextRenderingModeClass, DNSetTextRenderingMode>) end;

  //-------------namespace: Aspose.Pdf.Operators----------------
  DNSetTextRiseClass = interface(DNTextStateOperatorClass)
  ['{405D82F3-1AB9-5A25-A74B-B0BA11B75446}']
  { constructors } 

    {class} function init(textRise: Double): DNSetTextRise;

  end;

  [DNTypeName('Aspose.Pdf.Operators.SetTextRise')]
  DNSetTextRise = interface(DNTextStateOperator)
  ['{87CE51E0-02B6-392E-8305-C0384572947E}']
  { getters & setters } 

    function get_TextRise: Double;
    procedure set_TextRise(value: Double);
    function get_Index: Int32;
    procedure set_Index(value: Int32);

  { methods } 

    procedure Accept(visitor: DNIOperatorSelector);
    function ToString: string;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    property TextRise: Double read get_TextRise write set_TextRise;
    property Index: Int32 read get_Index write set_Index;
  end;

  TDNSetTextRise = class(TDNGenericImport<DNSetTextRiseClass, DNSetTextRise>) end;

  //-------------namespace: Aspose.Pdf.Operators----------------
  DNSetWordSpacingClass = interface(DNTextStateOperatorClass)
  ['{2B35EF97-2A6F-5492-8F67-C910299A9414}']
  { constructors } 

    {class} function init(wordSpacing: Double): DNSetWordSpacing;

  end;

  [DNTypeName('Aspose.Pdf.Operators.SetWordSpacing')]
  DNSetWordSpacing = interface(DNTextStateOperator)
  ['{C4E85D07-337E-3338-AB24-3FB482C8700C}']
  { getters & setters } 

    function get_WordSpacing: Double;
    procedure set_WordSpacing(value: Double);
    function get_Index: Int32;
    procedure set_Index(value: Int32);

  { methods } 

    procedure Accept(visitor: DNIOperatorSelector);
    function ToString: string;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    property WordSpacing: Double read get_WordSpacing write set_WordSpacing;
    property Index: Int32 read get_Index write set_Index;
  end;

  TDNSetWordSpacing = class(TDNGenericImport<DNSetWordSpacingClass, DNSetWordSpacing>) end;

  //-------------namespace: Aspose.Pdf.Operators----------------
  DNGlyphPositionClass = interface(DDN.mscorlib.DNObjectClass)
  ['{853CCC6E-4967-537D-8E2F-93852035182F}']
  { constructors } 

    {class} function init(text: string; position: Double): DNGlyphPosition; overload;
    {class} function init(text: string): DNGlyphPosition; overload;

  end;

  [DNTypeName('Aspose.Pdf.Operators.GlyphPosition')]
  DNGlyphPosition = interface(DDN.mscorlib.DNObject)
  ['{94F54B0E-FB48-3CD7-A965-7EF8725C3C12}']
  { getters & setters } 

    function get_Text: string;
    function get_Position: Double;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Text: string read get_Text;
    property Position: Double read get_Position;
  end;

  TDNGlyphPosition = class(TDNGenericImport<DNGlyphPositionClass, DNGlyphPosition>) end;

  //-------------namespace: Aspose.Pdf----------------
  DNOperatorSelectorClass = interface(DNObjectClass)
  ['{08E92F15-D5E3-5EE4-B790-405283F92A34}']
  { constructors } 

    {class} function init: DNOperatorSelector; overload;
    {class} function init(op: DNOperator): DNOperatorSelector; overload;

  end;

  [DNTypeName('Aspose.Pdf.OperatorSelector')]
  DNOperatorSelector = interface(DNIOperatorSelector)
  ['{9B45C498-8A5E-38EB-8AEC-4CD07BF66D99}']
  { getters & setters } 

    function get_Selected: DDN.mscorlib.DNIList<DNOperator>;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Selected: DDN.mscorlib.DNIList<DNOperator> read get_Selected;
  end;

  TDNOperatorSelector = class(TDNGenericImport<DNOperatorSelectorClass, DNOperatorSelector>) end;

  //-------------namespace: Aspose.Pdf----------------
  DNOpiClass = interface(DDN.mscorlib.DNObjectClass)
  ['{6FAC50AF-39E1-5A78-A933-2DD3D4515E5F}']
  { constructors } 

    {class} function init(xform: DNXForm): DNOpi;

  end;

  [DNTypeName('Aspose.Pdf.Opi')]
  DNOpi = interface(DDN.mscorlib.DNObject)
  ['{B65B9D4C-1B7D-3C14-AB2E-F8720A8721E8}']
  { getters & setters } 

    function get_Version: string;
    function get_FileSpecification: string;
    function get_Position: TArray<Double>;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Version: string read get_Version;
    property FileSpecification: string read get_FileSpecification;
    property Position: TArray<Double> read get_Position;
  end;

  TDNOpi = class(TDNGenericImport<DNOpiClass, DNOpi>) end;

  //-------------namespace: Aspose.Pdf.Optimization----------------
  DNImageCompressionOptionsClass = interface(DDN.mscorlib.DNObjectClass)
  ['{7A1F1A9C-92EE-56E9-BD02-D2B544E33277}']
  { constructors } 

    {class} function init: DNImageCompressionOptions;

  end;

  [DNTypeName('Aspose.Pdf.Optimization.ImageCompressionOptions')]
  DNImageCompressionOptions = interface(DDN.mscorlib.DNObject)
  ['{3D54F7B6-9DF7-375C-B25A-15598B8444DB}']
  { getters & setters } 

    function get_CompressImages: Boolean;
    procedure set_CompressImages(value: Boolean);
    function get_ResizeImages: Boolean;
    procedure set_ResizeImages(value: Boolean);
    function get_ImageQuality: Int32;
    procedure set_ImageQuality(value: Int32);
    function get_MaxResolution: Int32;
    procedure set_MaxResolution(value: Int32);
    function get_Version: DNImageCompressionVersion;
    procedure set_Version(value: DNImageCompressionVersion);
    function get_Encoding: DNImageEncoding;
    procedure set_Encoding(value: DNImageEncoding);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property CompressImages: Boolean read get_CompressImages write set_CompressImages;
    property ResizeImages: Boolean read get_ResizeImages write set_ResizeImages;
    property ImageQuality: Int32 read get_ImageQuality write set_ImageQuality;
    property MaxResolution: Int32 read get_MaxResolution write set_MaxResolution;
    property Version: DNImageCompressionVersion read get_Version write set_Version;
    property Encoding: DNImageEncoding read get_Encoding write set_Encoding;
  end;

  TDNImageCompressionOptions = class(TDNGenericImport<DNImageCompressionOptionsClass, DNImageCompressionOptions>) end;

  //-------------namespace: Aspose.Pdf.Optimization----------------
  DNOptimizationOptionsClass = interface(DDN.mscorlib.DNObjectClass)
  ['{0D271EA9-5702-5FEA-B1DE-5E7A1AAE9FA3}']
  { constructors } 

    {class} function init: DNOptimizationOptions;

  { static methods } 

    {class} function All: DNOptimizationOptions;

  end;

  [DNTypeName('Aspose.Pdf.Optimization.OptimizationOptions')]
  DNOptimizationOptions = interface(DDN.mscorlib.DNObject)
  ['{BED8548E-6253-3C03-878A-6610DD85FBC0}']
  { getters & setters } 

    function get_LinkDuplcateStreams: Boolean;
    procedure set_LinkDuplcateStreams(value: Boolean);
    function get_AllowReusePageContent: Boolean;
    procedure set_AllowReusePageContent(value: Boolean);
    function get_RemoveUnusedStreams: Boolean;
    procedure set_RemoveUnusedStreams(value: Boolean);
    function get_RemoveUnusedObjects: Boolean;
    procedure set_RemoveUnusedObjects(value: Boolean);
    function get_ImageCompressionOptions: DNImageCompressionOptions;
    function get_CompressImages: Boolean;
    procedure set_CompressImages(value: Boolean);
    function get_ResizeImages: Boolean;
    procedure set_ResizeImages(value: Boolean);
    function get_ImageQuality: Int32;
    procedure set_ImageQuality(value: Int32);
    function get_MaxResoultion: Int32;
    procedure set_MaxResoultion(value: Int32);
    function get_UnembedFonts: Boolean;
    procedure set_UnembedFonts(value: Boolean);
    function get_SubsetFonts: Boolean;
    procedure set_SubsetFonts(value: Boolean);
    function get_RemovePrivateInfo: Boolean;
    procedure set_RemovePrivateInfo(value: Boolean);
    function get_ImageEncoding: DNImageEncoding;
    procedure set_ImageEncoding(value: DNImageEncoding);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property LinkDuplcateStreams: Boolean read get_LinkDuplcateStreams write set_LinkDuplcateStreams;
    property AllowReusePageContent: Boolean read get_AllowReusePageContent write set_AllowReusePageContent;
    property RemoveUnusedStreams: Boolean read get_RemoveUnusedStreams write set_RemoveUnusedStreams;
    property RemoveUnusedObjects: Boolean read get_RemoveUnusedObjects write set_RemoveUnusedObjects;
    property ImageCompressionOptions: DNImageCompressionOptions read get_ImageCompressionOptions;
    property CompressImages: Boolean read get_CompressImages write set_CompressImages;
    property ResizeImages: Boolean read get_ResizeImages write set_ResizeImages;
    property ImageQuality: Int32 read get_ImageQuality write set_ImageQuality;
    property MaxResoultion: Int32 read get_MaxResoultion write set_MaxResoultion;
    property UnembedFonts: Boolean read get_UnembedFonts write set_UnembedFonts;
    property SubsetFonts: Boolean read get_SubsetFonts write set_SubsetFonts;
    property RemovePrivateInfo: Boolean read get_RemovePrivateInfo write set_RemovePrivateInfo;
    property ImageEncoding: DNImageEncoding read get_ImageEncoding write set_ImageEncoding;
  end;

  TDNOptimizationOptions = class(TDNGenericImport<DNOptimizationOptionsClass, DNOptimizationOptions>) end;

  //-------------namespace: Aspose.Pdf----------------
  DNDocument_OptimizationOptionsClass = interface(DNOptimizationOptionsClass)
  ['{BB1CB811-3AAB-538E-9088-620CCEE430A8}']
  { constructors } 

    {class} function init: DNDocument_OptimizationOptions;

  { static methods } 

    {class} function All: DNDocument_OptimizationOptions;

  end;

  [DNTypeName('Aspose.Pdf.Document+OptimizationOptions')]
  DNDocument_OptimizationOptions = interface(DNOptimizationOptions)
  ['{2F8D6DE6-7E96-39E7-9C87-D22680046961}']
  { getters & setters } 

    function get_LinkDuplcateStreams: Boolean;
    procedure set_LinkDuplcateStreams(value: Boolean);
    function get_AllowReusePageContent: Boolean;
    procedure set_AllowReusePageContent(value: Boolean);
    function get_RemoveUnusedStreams: Boolean;
    procedure set_RemoveUnusedStreams(value: Boolean);
    function get_RemoveUnusedObjects: Boolean;
    procedure set_RemoveUnusedObjects(value: Boolean);
    function get_ImageCompressionOptions: DNImageCompressionOptions;
    function get_CompressImages: Boolean;
    procedure set_CompressImages(value: Boolean);
    function get_ResizeImages: Boolean;
    procedure set_ResizeImages(value: Boolean);
    function get_ImageQuality: Int32;
    procedure set_ImageQuality(value: Int32);
    function get_MaxResoultion: Int32;
    procedure set_MaxResoultion(value: Int32);
    function get_UnembedFonts: Boolean;
    procedure set_UnembedFonts(value: Boolean);
    function get_SubsetFonts: Boolean;
    procedure set_SubsetFonts(value: Boolean);
    function get_RemovePrivateInfo: Boolean;
    procedure set_RemovePrivateInfo(value: Boolean);
    function get_ImageEncoding: DNImageEncoding;
    procedure set_ImageEncoding(value: DNImageEncoding);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property LinkDuplcateStreams: Boolean read get_LinkDuplcateStreams write set_LinkDuplcateStreams;
    property AllowReusePageContent: Boolean read get_AllowReusePageContent write set_AllowReusePageContent;
    property RemoveUnusedStreams: Boolean read get_RemoveUnusedStreams write set_RemoveUnusedStreams;
    property RemoveUnusedObjects: Boolean read get_RemoveUnusedObjects write set_RemoveUnusedObjects;
    property ImageCompressionOptions: DNImageCompressionOptions read get_ImageCompressionOptions;
    property CompressImages: Boolean read get_CompressImages write set_CompressImages;
    property ResizeImages: Boolean read get_ResizeImages write set_ResizeImages;
    property ImageQuality: Int32 read get_ImageQuality write set_ImageQuality;
    property MaxResoultion: Int32 read get_MaxResoultion write set_MaxResoultion;
    property UnembedFonts: Boolean read get_UnembedFonts write set_UnembedFonts;
    property SubsetFonts: Boolean read get_SubsetFonts write set_SubsetFonts;
    property RemovePrivateInfo: Boolean read get_RemovePrivateInfo write set_RemovePrivateInfo;
    property ImageEncoding: DNImageEncoding read get_ImageEncoding write set_ImageEncoding;
  end;

  TDNDocument_OptimizationOptions = class(TDNGenericImport<DNDocument_OptimizationOptionsClass, DNDocument_OptimizationOptions>) end;

  //-------------namespace: Aspose.Pdf----------------
  DNOutlinesClass = interface(DDN.mscorlib.DNObjectClass)
  ['{879034D1-35B6-5B81-9562-23FC093B96C1}']
  end;

  [DNTypeName('Aspose.Pdf.Outlines')]
  DNOutlines = interface(DDN.mscorlib.DNObject)
  ['{81A5CD9E-B686-3231-8741-CEA57B4F076D}']
  { getters & setters } 

    function get_Count: Int32;
    function get_IsReadOnly: Boolean;
    function get_VisibleCount: Int32;

  { methods } 

    procedure Add(item: DNOutlineItemCollection);
    procedure Clear;
    function &Contains(item: DNOutlineItemCollection): Boolean;
    procedure CopyTo(&array: TArray<DNOutlineItemCollection>; arrayIndex: Int32);
    function GetEnumerator: DDN.mscorlib.DNIEnumerator<DNOutlineItemCollection>;
    function Remove(item: DNOutlineItemCollection): Boolean;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Count: Int32 read get_Count;
    property IsReadOnly: Boolean read get_IsReadOnly;
    property VisibleCount: Int32 read get_VisibleCount;
  end;

  TDNOutlines = class(TDNGenericImport<DNOutlinesClass, DNOutlines>) end;

  //-------------namespace: Aspose.Pdf----------------
  DNOutlineCollectionClass = interface(DNOutlinesClass)
  ['{6C3CCFAB-1EA2-5268-9757-31C6DAE6EFB1}']
  end;

  [DNTypeName('Aspose.Pdf.OutlineCollection')]
  DNOutlineCollection = interface(DNOutlines)
  ['{E8C9D0C2-E81D-30C6-821F-5226AAFE2E79}']
  { getters & setters } 

    function get_VisibleCount: Int32;
    function get_Count: Int32;
    function get_First: DNOutlineItemCollection;
    function get_Last: DNOutlineItemCollection;
    function get_IsSynchronized: Boolean;
    function get_SyncRoot: DDN.mscorlib.DNObject;
    function get_IsReadOnly: Boolean;
    function get_Item(index: Int32): DNOutlineItemCollection;

  { methods } 

    procedure Add(outline: DNOutlineItemCollection);
    procedure Delete; overload;
    procedure Delete(name: string); overload;
    procedure CopyTo(&array: TArray<DNOutlineItemCollection>; index: Int32);
    function GetEnumerator: DDN.mscorlib.DNIEnumerator<DNOutlineItemCollection>;
    procedure Clear;
    function &Contains(item: DNOutlineItemCollection): Boolean;
    function Remove(item: DNOutlineItemCollection): Boolean; overload;
    procedure Remove(index: Int32); overload;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property VisibleCount: Int32 read get_VisibleCount;
    property Count: Int32 read get_Count;
    property First: DNOutlineItemCollection read get_First;
    property Last: DNOutlineItemCollection read get_Last;
    property IsSynchronized: Boolean read get_IsSynchronized;
    property SyncRoot: DDN.mscorlib.DNObject read get_SyncRoot;
    property IsReadOnly: Boolean read get_IsReadOnly;
    property Item[index: Int32]: DNOutlineItemCollection read get_Item; default;
  end;

  TDNOutlineCollection = class(TDNGenericImport<DNOutlineCollectionClass, DNOutlineCollection>) end;

  //-------------namespace: Aspose.Pdf----------------
  DNOutlineItemCollectionClass = interface(DNOutlinesClass)
  ['{67E650CA-D4E9-5371-BEEB-107122375656}']
  { constructors } 

    {class} function init(outlines: DNOutlineCollection): DNOutlineItemCollection;

  end;

  [DNTypeName('Aspose.Pdf.OutlineItemCollection')]
  DNOutlineItemCollection = interface(DNOutlines)
  ['{A5993C5D-5881-394E-8C5B-53AAF929C18F}']
  { getters & setters } 

    function get_Title: string;
    procedure set_Title(value: string);
    function get_Destination: DNIAppointment;
    procedure set_Destination(value: DNIAppointment);
    function get_Action: DNPdfAction;
    procedure set_Action(value: DNPdfAction);
    function get_Color: DDN.System.Drawing.DNColor;
    procedure set_Color(value: DDN.System.Drawing.DNColor);
    function get_Italic: Boolean;
    procedure set_Italic(value: Boolean);
    function get_Bold: Boolean;
    procedure set_Bold(value: Boolean);
    function get_First: DNOutlineItemCollection;
    function get_Last: DNOutlineItemCollection;
    function get_Prev: DNOutlineItemCollection;
    function get_Next: DNOutlineItemCollection;
    function get_HasNext: Boolean;
    function get_Parent: DNOutlines;
    function get_VisibleCount: Int32;
    function get_IsSynchronized: Boolean;
    function get_SyncRoot: DDN.mscorlib.DNObject;
    function get_IsReadOnly: Boolean;
    function get_Open: Boolean;
    procedure set_Open(value: Boolean);
    function get_Count: Int32;
    function get_Item(index: Int32): DNOutlineItemCollection;
    function get_Level: Int32;

  { methods } 

    procedure Delete; overload;
    procedure Delete(name: string); overload;
    procedure CopyTo(&array: TArray<DNOutlineItemCollection>; index: Int32);
    function GetEnumerator: DDN.mscorlib.DNIEnumerator<DNOutlineItemCollection>;
    procedure Add(outline: DNOutlineItemCollection);
    procedure Insert(index: Int32; outline: DNOutlineItemCollection);
    procedure Clear;
    function &Contains(item: DNOutlineItemCollection): Boolean;
    function Remove(item: DNOutlineItemCollection): Boolean; overload;
    procedure Remove(index: Int32); overload;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Title: string read get_Title write set_Title;
    property Destination: DNIAppointment read get_Destination write set_Destination;
    property Action: DNPdfAction read get_Action write set_Action;
    property Color: DDN.System.Drawing.DNColor read get_Color write set_Color;
    property Italic: Boolean read get_Italic write set_Italic;
    property Bold: Boolean read get_Bold write set_Bold;
    property First: DNOutlineItemCollection read get_First;
    property Last: DNOutlineItemCollection read get_Last;
    property Prev: DNOutlineItemCollection read get_Prev;
    property Next: DNOutlineItemCollection read get_Next;
    property HasNext: Boolean read get_HasNext;
    property Parent: DNOutlines read get_Parent;
    property VisibleCount: Int32 read get_VisibleCount;
    property IsSynchronized: Boolean read get_IsSynchronized;
    property SyncRoot: DDN.mscorlib.DNObject read get_SyncRoot;
    property IsReadOnly: Boolean read get_IsReadOnly;
    property Open: Boolean read get_Open write set_Open;
    property Count: Int32 read get_Count;
    property Item[index: Int32]: DNOutlineItemCollection read get_Item; default;
    property Level: Int32 read get_Level;
  end;

  TDNOutlineItemCollection = class(TDNGenericImport<DNOutlineItemCollectionClass, DNOutlineItemCollection>) end;

  //-------------namespace: Aspose.Pdf----------------
  DNPageClass = interface(DNObjectClass)
  ['{638AD88D-53F7-58D2-9F03-B13AC1F0F9A0}']
  { static methods } 

    {class} function RotationToInt(rotation: DNRotation): Int32;
    {class} function IntToRotation(rotation: Int32): DNRotation;

  end;

  [DNTypeName('Aspose.Pdf.Page')]
  DNPage = interface(DDN.mscorlib.DNIDisposable)
  ['{D6480862-ADD7-3CFB-91E5-82F330A3B8DE}']
  { getters & setters } 

    function get_BackgroundImage: DNImage;
    procedure set_BackgroundImage(value: DNImage);
    function get_TocInfo: DNTocInfo;
    procedure set_TocInfo(value: DNTocInfo);
    function get_Header: DNHeaderFooter;
    procedure set_Header(value: DNHeaderFooter);
    function get_Layers: DDN.mscorlib.DNList<DNLayer>;
    procedure set_Layers(value: DDN.mscorlib.DNList<DNLayer>);
    function get_Footer: DNHeaderFooter;
    procedure set_Footer(value: DNHeaderFooter);
    function get_Paragraphs: DNParagraphs;
    procedure set_Paragraphs(value: DNParagraphs);
    function get_PageInfo: DNPageInfo;
    procedure set_PageInfo(value: DNPageInfo);
    function get_Rect: DNPdf_Rectangle;
    procedure set_Rect(value: DNPdf_Rectangle);
    function get_ColorType: DNColorType;
    function get_NoteLineStyle: DNGraphInfo;
    procedure set_NoteLineStyle(value: DNGraphInfo);
    function get_TabOrder: DNTabOrder;
    procedure set_TabOrder(value: DNTabOrder);
    function get_Duration: Double;
    procedure set_Duration(value: Double);
    function get_Contents: DNOperatorCollection;
    function get_Group: DNGroup;
    procedure set_Group(value: DNGroup);
    function get_Annotations: DNAnnotationCollection;
    function get_Resources: DNResources;
    function get_Rotate: DNRotation;
    procedure set_Rotate(value: DNRotation);
    function get_TrimBox: DNPdf_Rectangle;
    procedure set_TrimBox(value: DNPdf_Rectangle);
    function get_ArtBox: DNPdf_Rectangle;
    procedure set_ArtBox(value: DNPdf_Rectangle);
    function get_BleedBox: DNPdf_Rectangle;
    procedure set_BleedBox(value: DNPdf_Rectangle);
    function get_CropBox: DNPdf_Rectangle;
    procedure set_CropBox(value: DNPdf_Rectangle);
    function get_MediaBox: DNPdf_Rectangle;
    procedure set_MediaBox(value: DNPdf_Rectangle);
    function get_Number: Int32;
    function get_RotationMatrix: DNMatrix;
    function get_Background: DNColor;
    procedure set_Background(value: DNColor);
    function get_Watermark: DNWatermark;
    procedure set_Watermark(value: DNWatermark);
    function get_Artifacts: DNArtifactCollection;
    function get_Actions: DNPageActionCollection;
    function get_FieldsInTabOrder: DDN.mscorlib.DNIList<DNField>;

  { events } 

    procedure add_OnBeforePageGenerate(value: DNPage_BeforePageGenerate);
    procedure remove_OnBeforePageGenerate(value: DNPage_BeforePageGenerate);

  { methods } 

    procedure Dispose;
    procedure MakeGrayscale;
    procedure FreeMemory;
    function GetNotifications: string;
    function AsByteArray(resolution: DNResolution): TArray<Byte>;
    function AsXml: string;
    function ConvertToPNGMemoryStream: DDN.mscorlib.DNMemoryStream;
    function IsBlank(fillThresholdFactor: Double): Boolean;
    function GetPageRect(considerRotation: Boolean): DNPdf_Rectangle;
    function CalculateContentBBox: DNPdf_Rectangle;
    procedure SendTo(device: DNPageDevice; output: DDN.mscorlib.DNStream); overload;
    procedure Accept(visitor: DNAnnotationSelector); overload;
    procedure AddStamp(stamp: DNPdf_Stamp);
    procedure AddImage(imageStream: DDN.mscorlib.DNStream; imageRect: DNPdf_Rectangle); overload;
    procedure AddImage(hocr: string; imageStream: DDN.mscorlib.DNStream; imageRect: DNPdf_Rectangle); overload;
    procedure AddImage(imageStream: DDN.mscorlib.DNStream; imageRect: DNPdf_Rectangle; imageWidth: Int32; imageHeight: Int32; saveImageProportions: Boolean); overload;
    procedure AddImage(imagePath: string; rectangle: DNPdf_Rectangle); overload;
    procedure SendTo(device: DNPageDevice; outputFileName: string); overload;
    procedure Flatten;
    procedure Accept(visitor: DNTextFragmentAbsorber); overload;
    procedure Accept(visitor: DNImagePlacementAbsorber); overload;
    procedure Accept(visitor: DNTextAbsorber); overload;
    procedure SetPageSize(width: Double; height: Double);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property BackgroundImage: DNImage read get_BackgroundImage write set_BackgroundImage;
    property TocInfo: DNTocInfo read get_TocInfo write set_TocInfo;
    property Header: DNHeaderFooter read get_Header write set_Header;
    property Layers: DDN.mscorlib.DNList<DNLayer> read get_Layers write set_Layers;
    property Footer: DNHeaderFooter read get_Footer write set_Footer;
    property Paragraphs: DNParagraphs read get_Paragraphs write set_Paragraphs;
    property PageInfo: DNPageInfo read get_PageInfo write set_PageInfo;
    property Rect: DNPdf_Rectangle read get_Rect write set_Rect;
    property ColorType: DNColorType read get_ColorType;
    property NoteLineStyle: DNGraphInfo read get_NoteLineStyle write set_NoteLineStyle;
    property TabOrder: DNTabOrder read get_TabOrder write set_TabOrder;
    property Duration: Double read get_Duration write set_Duration;
    property Contents: DNOperatorCollection read get_Contents;
    property Group: DNGroup read get_Group write set_Group;
    property Annotations: DNAnnotationCollection read get_Annotations;
    property Resources: DNResources read get_Resources;
    property Rotate: DNRotation read get_Rotate write set_Rotate;
    property TrimBox: DNPdf_Rectangle read get_TrimBox write set_TrimBox;
    property ArtBox: DNPdf_Rectangle read get_ArtBox write set_ArtBox;
    property BleedBox: DNPdf_Rectangle read get_BleedBox write set_BleedBox;
    property CropBox: DNPdf_Rectangle read get_CropBox write set_CropBox;
    property MediaBox: DNPdf_Rectangle read get_MediaBox write set_MediaBox;
    property Number: Int32 read get_Number;
    property RotationMatrix: DNMatrix read get_RotationMatrix;
    property Background: DNColor read get_Background write set_Background;
    property Watermark: DNWatermark read get_Watermark write set_Watermark;
    property Artifacts: DNArtifactCollection read get_Artifacts;
    property Actions: DNPageActionCollection read get_Actions;
    property FieldsInTabOrder: DDN.mscorlib.DNIList<DNField> read get_FieldsInTabOrder;
  end;

  TDNPage = class(TDNGenericImport<DNPageClass, DNPage>) end;

  //-------------namespace: Aspose.Pdf----------------
  DNPageCollectionClass = interface(DDN.mscorlib.DNObjectClass)
  ['{7D744C21-C80B-5295-91FB-678D648A0655}']
  end;

  [DNTypeName('Aspose.Pdf.PageCollection')]
  DNPageCollection = interface(DDN.mscorlib.DNObject)
  ['{68CF7B1E-2910-3215-BEF0-FBF39636FED0}']
  { getters & setters } 

    function get_Count: Int32;
    function get_IsSynchronized: Boolean;
    function get_SyncRoot: DDN.mscorlib.DNObject;
    function get_IsReadOnly: Boolean;
    function get_Item(index: Int32): DNPage;

  { methods } 

    function Add(entity: DNPage): DNPage; overload;
    procedure Delete(index: Int32); overload;
    procedure Delete; overload;
    function IndexOf(entity: DNPage): Int32;
    procedure CopyTo(&array: TArray<DNPage>; index: Int32);
    function GetEnumerator: DDN.mscorlib.DNIEnumerator<DNPage>;
    procedure Accept(visitor: DNAnnotationSelector); overload;
    procedure Delete(pages: TArray<Int32>); overload;
    function Insert(pageNumber: Int32): DNPage; overload;
    function Add: DNPage; overload;
    procedure Add(pages: DDN.mscorlib.DNICollection<DNPage>); overload;
    function Insert(pageNumber: Int32; entity: DNPage): DNPage; overload;
    procedure Accept(visitor: DNImagePlacementAbsorber); overload;
    procedure Accept(visitor: DNTextFragmentAbsorber); overload;
    procedure Accept(visitor: DNTextAbsorber); overload;
    procedure Add(pages: TArray<DNPage>); overload;
    procedure Insert(pageNumber: Int32; pages: DDN.mscorlib.DNICollection<DNPage>); overload;
    procedure Insert(pageNumber: Int32; pages: TArray<DNPage>); overload;
    procedure Flatten;
    procedure FreeMemory;
    function &Contains(item: DNPage): Boolean;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Count: Int32 read get_Count;
    property IsSynchronized: Boolean read get_IsSynchronized;
    property SyncRoot: DDN.mscorlib.DNObject read get_SyncRoot;
    property IsReadOnly: Boolean read get_IsReadOnly;
    property Item[index: Int32]: DNPage read get_Item; default;
  end;

  TDNPageCollection = class(TDNGenericImport<DNPageCollectionClass, DNPageCollection>) end;

  //-------------namespace: Aspose.Pdf----------------
  DNPageInfoClass = interface(DNObjectClass)
  ['{6A7152F1-F317-5E62-97CE-6662F484D0D1}']
  { constructors } 

    {class} function init: DNPageInfo;

  end;

  [DNTypeName('Aspose.Pdf.PageInfo')]
  DNPageInfo = interface(DDN.mscorlib.DNICloneable)
  ['{AD5CC27F-865C-364B-9DB2-B2CD7B4B9849}']
  { getters & setters } 

    function get_AnyMargin: DNMarginInfo;
    procedure set_AnyMargin(value: DNMarginInfo);
    function get_DefaultTextState: DNTextState;
    procedure set_DefaultTextState(value: DNTextState);
    function get_Height: Double;
    procedure set_Height(value: Double);
    function get_PureHeight: Double;
    function get_IsLandscape: Boolean;
    procedure set_IsLandscape(value: Boolean);
    function get_Margin: DNMarginInfo;
    procedure set_Margin(value: DNMarginInfo);
    function get_Width: Double;
    procedure set_Width(value: Double);

  { methods } 

    function Clone: DDN.mscorlib.DNObject;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property AnyMargin: DNMarginInfo read get_AnyMargin write set_AnyMargin;
    property DefaultTextState: DNTextState read get_DefaultTextState write set_DefaultTextState;
    property Height: Double read get_Height write set_Height;
    property PureHeight: Double read get_PureHeight;
    property IsLandscape: Boolean read get_IsLandscape write set_IsLandscape;
    property Margin: DNMarginInfo read get_Margin write set_Margin;
    property Width: Double read get_Width write set_Width;
  end;

  TDNPageInfo = class(TDNGenericImport<DNPageInfoClass, DNPageInfo>) end;

  //-------------namespace: Aspose.Pdf----------------
  DNPageLabelClass = interface(DDN.mscorlib.DNObjectClass)
  ['{05B35F13-E28E-5736-9A74-2CD6BB970803}']
  { constructors } 

    {class} function init: DNPageLabel;

  end;

  [DNTypeName('Aspose.Pdf.PageLabel')]
  DNPageLabel = interface(DDN.mscorlib.DNObject)
  ['{A7BF32B9-2CFC-3B82-926A-C0BD3E1C6F41}']
  { getters & setters } 

    function get_StartingValue: Int32;
    procedure set_StartingValue(value: Int32);
    function get_NumberingStyle: DNNumberingStyle;
    procedure set_NumberingStyle(value: DNNumberingStyle);
    function get_Prefix: string;
    procedure set_Prefix(value: string);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property StartingValue: Int32 read get_StartingValue write set_StartingValue;
    property NumberingStyle: DNNumberingStyle read get_NumberingStyle write set_NumberingStyle;
    property Prefix: string read get_Prefix write set_Prefix;
  end;

  TDNPageLabel = class(TDNGenericImport<DNPageLabelClass, DNPageLabel>) end;

  //-------------namespace: Aspose.Pdf----------------
  DNPageLabelCollectionClass = interface(DDN.mscorlib.DNObjectClass)
  ['{C96EB941-3A2A-5F33-A4CB-9FFAACC02462}']
  end;

  [DNTypeName('Aspose.Pdf.PageLabelCollection')]
  DNPageLabelCollection = interface(DDN.mscorlib.DNObject)
  ['{46E8BEA2-5D04-3A3F-8837-0C9852EE52EC}']
  { methods } 

    function GetLabel(pageIndex: Int32): DNPageLabel;
    procedure UpdateLabel(pageIndex: Int32; pageLabel: DNPageLabel);
    function RemoveLabel(pageIndex: Int32): Boolean;
    function GetPages: TArray<Int32>;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNPageLabelCollection = class(TDNGenericImport<DNPageLabelCollectionClass, DNPageLabelCollection>) end;

  //-------------namespace: Aspose.Pdf----------------
  DNPageSizeClass = interface(DDN.mscorlib.DNObjectClass)
  ['{E005BE94-C6B1-5760-87DD-91AA121724D5}']
  { static getter & setter } 

    {class} function get_A0: DNPageSize;
    {class} function get_A1: DNPageSize;
    {class} function get_A2: DNPageSize;
    {class} function get_A3: DNPageSize;
    {class} function get_A4: DNPageSize;
    {class} function get_A5: DNPageSize;
    {class} function get_A6: DNPageSize;
    {class} function get_B5: DNPageSize;
    {class} function get_PageLetter: DNPageSize;
    {class} function get_PageLegal: DNPageSize;
    {class} function get_PageLedger: DNPageSize;
    {class} function get_P11x17: DNPageSize;

  { constructors } 

    {class} function init(x: Single; y: Single): DNPageSize;

  { static propertys } 

    {class} property A0: DNPageSize read get_A0;
    {class} property A1: DNPageSize read get_A1;
    {class} property A2: DNPageSize read get_A2;
    {class} property A3: DNPageSize read get_A3;
    {class} property A4: DNPageSize read get_A4;
    {class} property A5: DNPageSize read get_A5;
    {class} property A6: DNPageSize read get_A6;
    {class} property B5: DNPageSize read get_B5;
    {class} property PageLetter: DNPageSize read get_PageLetter;
    {class} property PageLegal: DNPageSize read get_PageLegal;
    {class} property PageLedger: DNPageSize read get_PageLedger;
    {class} property P11x17: DNPageSize read get_P11x17;
  end;

  [DNTypeName('Aspose.Pdf.PageSize')]
  DNPageSize = interface(DDN.mscorlib.DNObject)
  ['{4FCCDFCF-49A0-3323-9140-6A8EF9427CA1}']
  { getters & setters } 

    function get_Width: Single;
    procedure set_Width(value: Single);
    function get_Height: Single;
    procedure set_Height(value: Single);
    function get_IsLandscape: Boolean;
    procedure set_IsLandscape(value: Boolean);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Width: Single read get_Width write set_Width;
    property Height: Single read get_Height write set_Height;
    property IsLandscape: Boolean read get_IsLandscape write set_IsLandscape;
  end;

  TDNPageSize = class(TDNGenericImport<DNPageSizeClass, DNPageSize>) end;

  //-------------namespace: Aspose.Pdf----------------
  DNParagraphsClass = interface(DDN.mscorlib.DNObjectClass)
  ['{F706D6C6-5264-5705-A00A-076A66CA667B}']
  { constructors } 

    {class} function init: DNParagraphs;

  end;

  [DNTypeName('Aspose.Pdf.Paragraphs')]
  DNParagraphs = interface(DDN.mscorlib.DNObject)
  ['{C5B75988-47F6-3315-8929-4AFEDB83B999}']
  { getters & setters } 

    function get_Count: Int32;
    function get_Item(index: Int32): DNBaseParagraph;
    procedure set_Item(index: Int32; value: DNBaseParagraph);

  { methods } 

    procedure Add(paragraph: DNBaseParagraph);
    function GetRange(index: Int32; count: Int32): DNParagraphs;
    procedure RemoveRange(index: Int32; count: Int32);
    procedure Remove(paragraph: DNBaseParagraph);
    procedure Insert(index: Int32; paragraph: DNBaseParagraph);
    procedure Clear;
    procedure InsertRange(index: Int32; collection: DDN.mscorlib.DNIEnumerable<DNBaseParagraph>);
    function GetEnumerator: DDN.mscorlib.DNIEnumerator<DNBaseParagraph>;
    function Clone: DDN.mscorlib.DNObject;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Count: Int32 read get_Count;
    property Item[index: Int32]: DNBaseParagraph read get_Item write set_Item; default;
  end;

  TDNParagraphs = class(TDNGenericImport<DNParagraphsClass, DNParagraphs>) end;

  //-------------namespace: Aspose.Pdf----------------
  DNPdfANonSpecificationFlagsClass = interface(DDN.mscorlib.DNObjectClass)
  ['{5AC89A42-EC31-5E8A-8DAE-B7772E93C05E}']
  { constructors } 

    {class} function init: DNPdfANonSpecificationFlags;

  end;

  [DNTypeName('Aspose.Pdf.PdfANonSpecificationFlags')]
  DNPdfANonSpecificationFlags = interface(DDN.mscorlib.DNObject)
  ['{3BBEAECD-A046-3FD2-8CFF-D0E2A678C92D}']
  { getters & setters } 

    function get_CheckDifferentNamesInFontDictionaries: Boolean;
    procedure set_CheckDifferentNamesInFontDictionaries(value: Boolean);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property CheckDifferentNamesInFontDictionaries: Boolean read get_CheckDifferentNamesInFontDictionaries write set_CheckDifferentNamesInFontDictionaries;
  end;

  TDNPdfANonSpecificationFlags = class(TDNGenericImport<DNPdfANonSpecificationFlagsClass, DNPdfANonSpecificationFlags>) end;

  //-------------namespace: Aspose.Pdf.PdfAOptionClasses----------------
  DNFontEmbeddingOptionsClass = interface(DDN.mscorlib.DNObjectClass)
  ['{2C99BC1D-851D-59BC-906C-7A484B55EA8C}']
  { constructors } 

    {class} function init: DNFontEmbeddingOptions;

  end;

  [DNTypeName('Aspose.Pdf.PdfAOptionClasses.FontEmbeddingOptions')]
  DNFontEmbeddingOptions = interface(DDN.mscorlib.DNObject)
  ['{6F2D3437-E531-3F50-B847-BFBCE508E6CB}']
  { getters & setters } 

    function get_UseDefaultSubstitution: Boolean;
    procedure set_UseDefaultSubstitution(value: Boolean);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property UseDefaultSubstitution: Boolean read get_UseDefaultSubstitution write set_UseDefaultSubstitution;
  end;

  TDNFontEmbeddingOptions = class(TDNGenericImport<DNFontEmbeddingOptionsClass, DNFontEmbeddingOptions>) end;

  //-------------namespace: Aspose.Pdf.PdfAOptionClasses----------------
  DNToUnicodeProcessingRulesClass = interface(DDN.mscorlib.DNObjectClass)
  ['{6CD08EE3-EB3D-511B-866A-8CF35DB185AB}']
  { constructors } 

    {class} function init: DNToUnicodeProcessingRules; overload;
    {class} function init(removeSpaces: Boolean): DNToUnicodeProcessingRules; overload;
    {class} function init(removeSpaces: Boolean; mapNonLinkedUnicodesOnSpace: Boolean): DNToUnicodeProcessingRules; overload;

  end;

  [DNTypeName('Aspose.Pdf.PdfAOptionClasses.ToUnicodeProcessingRules')]
  DNToUnicodeProcessingRules = interface(DDN.mscorlib.DNObject)
  ['{48CAD510-7538-3BC4-A029-DA7C5BA8A8E1}']
  { getters & setters } 

    function get_RemoveSpacesFromCMapNames: Boolean;
    procedure set_RemoveSpacesFromCMapNames(value: Boolean);
    function get_MapNonLinkedSymbolsOnSpace: Boolean;
    procedure set_MapNonLinkedSymbolsOnSpace(value: Boolean);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property RemoveSpacesFromCMapNames: Boolean read get_RemoveSpacesFromCMapNames write set_RemoveSpacesFromCMapNames;
    property MapNonLinkedSymbolsOnSpace: Boolean read get_MapNonLinkedSymbolsOnSpace write set_MapNonLinkedSymbolsOnSpace;
  end;

  TDNToUnicodeProcessingRules = class(TDNGenericImport<DNToUnicodeProcessingRulesClass, DNToUnicodeProcessingRules>) end;

  //-------------namespace: Aspose.Pdf----------------
  DNPdfASymbolicFontEncodingStrategyClass = interface(DDN.mscorlib.DNObjectClass)
  ['{6C25B6EF-AAEB-54FA-8C82-0AA3AEF2C998}']
  { constructors } 

    {class} function init: DNPdfASymbolicFontEncodingStrategy; overload;
    {class} function init(priorityQueue: DDN.System.DNQueue<DNPdfASymbolicFontEncodingStrategy_QueueItem>): DNPdfASymbolicFontEncodingStrategy; overload;
    {class} function init(preferredEncodingTable: DNPdfASymbolicFontEncodingStrategy_QueueItem_CMapEncodingTableType): DNPdfASymbolicFontEncodingStrategy; overload;

  end;

  [DNTypeName('Aspose.Pdf.PdfASymbolicFontEncodingStrategy')]
  DNPdfASymbolicFontEncodingStrategy = interface(DDN.mscorlib.DNObject)
  ['{D1A327FE-6AEC-3BC0-9D49-F0BF55EE02A4}']
  { getters & setters } 

    function get_PreferredCmapEncodingTable: DNPdfASymbolicFontEncodingStrategy_QueueItem_CMapEncodingTableType;
    procedure set_PreferredCmapEncodingTable(value: DNPdfASymbolicFontEncodingStrategy_QueueItem_CMapEncodingTableType);
    function get_CmapEncodingTablesPriorityQueue: DDN.System.DNQueue<DNPdfASymbolicFontEncodingStrategy_QueueItem>;
    procedure set_CmapEncodingTablesPriorityQueue(value: DDN.System.DNQueue<DNPdfASymbolicFontEncodingStrategy_QueueItem>);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property PreferredCmapEncodingTable: DNPdfASymbolicFontEncodingStrategy_QueueItem_CMapEncodingTableType read get_PreferredCmapEncodingTable write set_PreferredCmapEncodingTable;
    property CmapEncodingTablesPriorityQueue: DDN.System.DNQueue<DNPdfASymbolicFontEncodingStrategy_QueueItem> read get_CmapEncodingTablesPriorityQueue write set_CmapEncodingTablesPriorityQueue;
  end;

  TDNPdfASymbolicFontEncodingStrategy = class(TDNGenericImport<DNPdfASymbolicFontEncodingStrategyClass, DNPdfASymbolicFontEncodingStrategy>) end;

  //-------------namespace: Aspose.Pdf----------------
  DNPdfASymbolicFontEncodingStrategy_QueueItemClass = interface(DDN.mscorlib.DNObjectClass)
  ['{72DB0F83-4513-5E0A-BAA5-C6357C0607B6}']
  { constructors } 

    {class} function init: DNPdfASymbolicFontEncodingStrategy_QueueItem; overload;
    {class} function init(platformID: UInt16; platformSpecificID: UInt16): DNPdfASymbolicFontEncodingStrategy_QueueItem; overload;
    {class} function init(cmapTable: DNPdfASymbolicFontEncodingStrategy_QueueItem_CMapEncodingTableType): DNPdfASymbolicFontEncodingStrategy_QueueItem; overload;

  end;

  [DNTypeName('Aspose.Pdf.PdfASymbolicFontEncodingStrategy+QueueItem')]
  DNPdfASymbolicFontEncodingStrategy_QueueItem = interface(DDN.mscorlib.DNObject)
  ['{5CA09214-EEC2-3C9C-B94B-C6CAC6875D5B}']
  { getters & setters } 

    function get_CMapEncodingTable: DNPdfASymbolicFontEncodingStrategy_QueueItem_CMapEncodingTableType;
    procedure set_CMapEncodingTable(value: DNPdfASymbolicFontEncodingStrategy_QueueItem_CMapEncodingTableType);
    function get_PlatformId: UInt16;
    procedure set_PlatformId(value: UInt16);
    function get_PlatformSpecificId: UInt16;
    procedure set_PlatformSpecificId(value: UInt16);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property CMapEncodingTable: DNPdfASymbolicFontEncodingStrategy_QueueItem_CMapEncodingTableType read get_CMapEncodingTable write set_CMapEncodingTable;
    property PlatformId: UInt16 read get_PlatformId write set_PlatformId;
    property PlatformSpecificId: UInt16 read get_PlatformSpecificId write set_PlatformSpecificId;
  end;

  TDNPdfASymbolicFontEncodingStrategy_QueueItem = class(TDNGenericImport<DNPdfASymbolicFontEncodingStrategy_QueueItemClass, DNPdfASymbolicFontEncodingStrategy_QueueItem>) end;

  //-------------namespace: Aspose.Pdf----------------
  DNPdfFormatConversionOptionsClass = interface(DDN.mscorlib.DNObjectClass)
  ['{4B3006E1-0F66-59BE-B55E-4B4E123B9EDF}']
  { static getter & setter } 

    {class} function get_Default: DNPdfFormatConversionOptions;

  { constructors } 

    {class} function init(outputLogFileName: string; format: DNPdfFormat; action: DNConvertErrorAction): DNPdfFormatConversionOptions; overload;
    {class} function init(outputLogFileName: string; format: DNPdfFormat): DNPdfFormatConversionOptions; overload;
    {class} function init(format: DNPdfFormat): DNPdfFormatConversionOptions; overload;
    {class} function init(format: DNPdfFormat; action: DNConvertErrorAction): DNPdfFormatConversionOptions; overload;
    {class} function init(outputLogFileName: string; format: DNPdfFormat; action: DNConvertErrorAction; transparencyAction: DNConvertTransparencyAction): DNPdfFormatConversionOptions; overload;
    {class} function init(outputLogStream: DDN.mscorlib.DNStream; format: DNPdfFormat; action: DNConvertErrorAction): DNPdfFormatConversionOptions; overload;

  { static propertys } 

    {class} property &Default: DNPdfFormatConversionOptions read get_Default;
  end;

  [DNTypeName('Aspose.Pdf.PdfFormatConversionOptions')]
  DNPdfFormatConversionOptions = interface(DDN.mscorlib.DNObject)
  ['{253435DC-1FF0-3C07-979C-3454EBD47E16}']
  { getters & setters } 

    function get_IsAsyncImageStreamsConversionMode: Boolean;
    procedure set_IsAsyncImageStreamsConversionMode(value: Boolean);
    function get_IsLowMemoryMode: Boolean;
    procedure set_IsLowMemoryMode(value: Boolean);
    function get_Format: DNPdfFormat;
    procedure set_Format(value: DNPdfFormat);
    function get_LogFileName: string;
    procedure set_LogFileName(value: string);
    function get_LogStream: DDN.mscorlib.DNStream;
    procedure set_LogStream(value: DDN.mscorlib.DNStream);
    function get_ErrorAction: DNConvertErrorAction;
    procedure set_ErrorAction(value: DNConvertErrorAction);
    function get_TransparencyAction: DNConvertTransparencyAction;
    procedure set_TransparencyAction(value: DNConvertTransparencyAction);
    function get_ConvertSoftMaskAction: DNConvertSoftMaskAction;
    procedure set_ConvertSoftMaskAction(value: DNConvertSoftMaskAction);
    function get_NonSpecificationCases: DNPdfANonSpecificationFlags;
    function get_SymbolicFontEncodingStrategy: DNPdfASymbolicFontEncodingStrategy;
    procedure set_SymbolicFontEncodingStrategy(value: DNPdfASymbolicFontEncodingStrategy);
    function get_AlignText: Boolean;
    procedure set_AlignText(value: Boolean);
    function get_PuaTextProcessingStrategy: DNPdfFormatConversionOptions_PuaProcessingStrategy;
    procedure set_PuaTextProcessingStrategy(value: DNPdfFormatConversionOptions_PuaProcessingStrategy);
    function get_OptimizeFileSize: Boolean;
    procedure set_OptimizeFileSize(value: Boolean);
    function get_ExcludeFontsStrategy: DNPdfFormatConversionOptions_RemoveFontsStrategy;
    procedure set_ExcludeFontsStrategy(value: DNPdfFormatConversionOptions_RemoveFontsStrategy);
    function get_FontEmbeddingOptions: DNFontEmbeddingOptions;
    function get_UnicodeProcessingRules: DNToUnicodeProcessingRules;
    procedure set_UnicodeProcessingRules(value: DNToUnicodeProcessingRules);
    function get_IccProfileFileName: string;
    procedure set_IccProfileFileName(value: string);
    function get_NotAccessibleFonts: TArray<string>;

  { fields getter & setter } 

   function __fakeFieldGet_AlignStrategy: DNPdfFormatConversionOptions_SegmentAlignStrategy;
   procedure __fakeFieldSet_AlignStrategy(value: DNPdfFormatConversionOptions_SegmentAlignStrategy);

  { fields } 

   property AlignStrategy: DNPdfFormatConversionOptions_SegmentAlignStrategy read __fakeFieldGet_AlignStrategy write __fakeFieldSet_AlignStrategy;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property IsAsyncImageStreamsConversionMode: Boolean read get_IsAsyncImageStreamsConversionMode write set_IsAsyncImageStreamsConversionMode;
    property IsLowMemoryMode: Boolean read get_IsLowMemoryMode write set_IsLowMemoryMode;
    property Format: DNPdfFormat read get_Format write set_Format;
    property LogFileName: string read get_LogFileName write set_LogFileName;
    property LogStream: DDN.mscorlib.DNStream read get_LogStream write set_LogStream;
    property ErrorAction: DNConvertErrorAction read get_ErrorAction write set_ErrorAction;
    property TransparencyAction: DNConvertTransparencyAction read get_TransparencyAction write set_TransparencyAction;
    property ConvertSoftMaskAction: DNConvertSoftMaskAction read get_ConvertSoftMaskAction write set_ConvertSoftMaskAction;
    property NonSpecificationCases: DNPdfANonSpecificationFlags read get_NonSpecificationCases;
    property SymbolicFontEncodingStrategy: DNPdfASymbolicFontEncodingStrategy read get_SymbolicFontEncodingStrategy write set_SymbolicFontEncodingStrategy;
    property AlignText: Boolean read get_AlignText write set_AlignText;
    property PuaTextProcessingStrategy: DNPdfFormatConversionOptions_PuaProcessingStrategy read get_PuaTextProcessingStrategy write set_PuaTextProcessingStrategy;
    property OptimizeFileSize: Boolean read get_OptimizeFileSize write set_OptimizeFileSize;
    property ExcludeFontsStrategy: DNPdfFormatConversionOptions_RemoveFontsStrategy read get_ExcludeFontsStrategy write set_ExcludeFontsStrategy;
    property FontEmbeddingOptions: DNFontEmbeddingOptions read get_FontEmbeddingOptions;
    property UnicodeProcessingRules: DNToUnicodeProcessingRules read get_UnicodeProcessingRules write set_UnicodeProcessingRules;
    property IccProfileFileName: string read get_IccProfileFileName write set_IccProfileFileName;
    property NotAccessibleFonts: TArray<string> read get_NotAccessibleFonts;
  end;

  TDNPdfFormatConversionOptions = class(TDNGenericImport<DNPdfFormatConversionOptionsClass, DNPdfFormatConversionOptions>) end;

  //-------------namespace: Aspose.Pdf----------------
  DNPointClass = interface(DDN.mscorlib.DNObjectClass)
  ['{7A74C188-A8E0-54DE-B5C9-676FED73E26B}']
  { static getter & setter } 

    {class} function get_Trivial: DNPoint;

  { constructors } 

    {class} function init(x: Double; y: Double): DNPoint;

  { static propertys } 

    {class} property Trivial: DNPoint read get_Trivial;
  end;

  [DNTypeName('Aspose.Pdf.Point')]
  DNPoint = interface(DDN.mscorlib.DNObject)
  ['{191D7218-81E8-3B2A-82D5-C91E4282BC71}']
  { getters & setters } 

    function get_X: Double;
    procedure set_X(value: Double);
    function get_Y: Double;
    procedure set_Y(value: Double);

  { methods } 

    function ToPoint: DDN.System.Drawing.DNPointF;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property X: Double read get_X write set_X;
    property Y: Double read get_Y write set_Y;
  end;

  TDNPoint = class(TDNGenericImport<DNPointClass, DNPoint>) end;

  //-------------namespace: Aspose.Pdf----------------
  DNPoint3DClass = interface(DDN.mscorlib.DNObjectClass)
  ['{1BF7C994-7448-528F-9C0A-E6964AB6644E}']
  { static getter & setter } 

    {class} function get_Trivial: DNPoint3D;

  { constructors } 

    {class} function init(x: Double; y: Double; z: Double): DNPoint3D;

  { static propertys } 

    {class} property Trivial: DNPoint3D read get_Trivial;
  end;

  [DNTypeName('Aspose.Pdf.Point3D')]
  DNPoint3D = interface(DDN.mscorlib.DNObject)
  ['{5031AEC6-348E-343A-A754-5B16259CBB17}']
  { getters & setters } 

    function get_X: Double;
    procedure set_X(value: Double);
    function get_Y: Double;
    procedure set_Y(value: Double);
    function get_Z: Double;
    procedure set_Z(value: Double);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property X: Double read get_X write set_X;
    property Y: Double read get_Y write set_Y;
    property Z: Double read get_Z write set_Z;
  end;

  TDNPoint3D = class(TDNGenericImport<DNPoint3DClass, DNPoint3D>) end;

  //-------------namespace: Aspose.Pdf----------------
  DNPdf_RectangleClass = interface(DNObjectClass)
  ['{7826945C-C019-5D0F-94AD-320CA8E34324}']
  { static getter & setter } 

    {class} function get_Trivial: DNPdf_Rectangle;

  { constructors } 

    {class} function init(llx: Double; lly: Double; urx: Double; ury: Double): DNPdf_Rectangle;

  { static fields getter & setter } 

   function __fakeFieldGet_Empty: DNPdf_Rectangle;

  { static fields } 

    {class} property Empty: DNPdf_Rectangle read __fakeFieldGet_Empty;

  { static methods } 

    {class} function FromRect(src: DDN.System.Drawing.DNRectangle): DNPdf_Rectangle;
    {class} function Parse(value: string): DNPdf_Rectangle;

  { static propertys } 

    {class} property Trivial: DNPdf_Rectangle read get_Trivial;
  end;

  [DNTypeName('Aspose.Pdf.Rectangle')]
  DNPdf_Rectangle = interface(DDN.mscorlib.DNICloneable)
  ['{64BD6E47-7053-3088-B952-387AA3788B2D}']
  { getters & setters } 

    function get_Width: Double;
    function get_Height: Double;
    function get_LLX: Double;
    procedure set_LLX(value: Double);
    function get_LLY: Double;
    procedure set_LLY(value: Double);
    function get_URX: Double;
    procedure set_URX(value: Double);
    function get_URY: Double;
    procedure set_URY(value: Double);
    function get_IsTrivial: Boolean;
    function get_IsEmpty: Boolean;
    function get_IsPoint: Boolean;

  { methods } 

    function ToRect: DDN.System.Drawing.DNRectangle;
    function ToString: string;
    function Equals(other: DNPdf_Rectangle): Boolean; overload;
    function NearEquals(other: DNPdf_Rectangle; delta: Double): Boolean;
    function Intersect(otherRect: DNPdf_Rectangle): DNPdf_Rectangle;
    function Join(otherRect: DNPdf_Rectangle): DNPdf_Rectangle;
    function IsIntersect(otherRect: DNPdf_Rectangle): Boolean;
    function &Contains(point: DNPoint): Boolean;
    function Center: DNPoint;
    procedure Rotate(angle: DNRotation); overload;
    procedure Rotate(angle: Int32); overload;
    function Clone: DDN.mscorlib.DNObject;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean; overload;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    property Width: Double read get_Width;
    property Height: Double read get_Height;
    property LLX: Double read get_LLX write set_LLX;
    property LLY: Double read get_LLY write set_LLY;
    property URX: Double read get_URX write set_URX;
    property URY: Double read get_URY write set_URY;
    property IsTrivial: Boolean read get_IsTrivial;
    property IsEmpty: Boolean read get_IsEmpty;
    property IsPoint: Boolean read get_IsPoint;
  end;

  TDNPdf_Rectangle = class(TDNGenericImport<DNPdf_RectangleClass, DNPdf_Rectangle>) end;

  //-------------namespace: Aspose.Pdf----------------
  DNRenderingOptionsClass = interface(DDN.mscorlib.DNObjectClass)
  ['{597ABFC1-9D47-5C46-B672-16C57282C6DB}']
  { constructors } 

    {class} function init: DNRenderingOptions;

  end;

  [DNTypeName('Aspose.Pdf.RenderingOptions')]
  DNRenderingOptions = interface(DDN.mscorlib.DNObject)
  ['{CC9CA469-2E05-3404-8885-95286F90C7F1}']
  { getters & setters } 

    function get_BarcodeOptimization: Boolean;
    procedure set_BarcodeOptimization(value: Boolean);
    function get_OptimizeDimensions: Boolean;
    procedure set_OptimizeDimensions(value: Boolean);
    function get_SystemFontsNativeRendering: Boolean;
    procedure set_SystemFontsNativeRendering(value: Boolean);
    function get_UseNewImagingEngine: Boolean;
    procedure set_UseNewImagingEngine(value: Boolean);
    function get_WidthExtraUnits: Single;
    procedure set_WidthExtraUnits(value: Single);
    function get_ConvertFontsToUnicodeTTF: Boolean;
    procedure set_ConvertFontsToUnicodeTTF(value: Boolean);
    function get_UseFontHinting: Boolean;
    procedure set_UseFontHinting(value: Boolean);
    function get_ScaleImagesToFitPageWidth: Boolean;
    procedure set_ScaleImagesToFitPageWidth(value: Boolean);
    function get_InterpolationHighQuality: Boolean;
    procedure set_InterpolationHighQuality(value: Boolean);
    function get_MaxFontsCacheSize: Int32;
    procedure set_MaxFontsCacheSize(value: Int32);
    function get_MaxSymbolsCacheSize: Int32;
    procedure set_MaxSymbolsCacheSize(value: Int32);
    function get_DefaultFontName: string;
    procedure set_DefaultFontName(value: string);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property BarcodeOptimization: Boolean read get_BarcodeOptimization write set_BarcodeOptimization;
    property OptimizeDimensions: Boolean read get_OptimizeDimensions write set_OptimizeDimensions;
    property SystemFontsNativeRendering: Boolean read get_SystemFontsNativeRendering write set_SystemFontsNativeRendering;
    property UseNewImagingEngine: Boolean read get_UseNewImagingEngine write set_UseNewImagingEngine;
    property WidthExtraUnits: Single read get_WidthExtraUnits write set_WidthExtraUnits;
    property ConvertFontsToUnicodeTTF: Boolean read get_ConvertFontsToUnicodeTTF write set_ConvertFontsToUnicodeTTF;
    property UseFontHinting: Boolean read get_UseFontHinting write set_UseFontHinting;
    property ScaleImagesToFitPageWidth: Boolean read get_ScaleImagesToFitPageWidth write set_ScaleImagesToFitPageWidth;
    property InterpolationHighQuality: Boolean read get_InterpolationHighQuality write set_InterpolationHighQuality;
    property MaxFontsCacheSize: Int32 read get_MaxFontsCacheSize write set_MaxFontsCacheSize;
    property MaxSymbolsCacheSize: Int32 read get_MaxSymbolsCacheSize write set_MaxSymbolsCacheSize;
    property DefaultFontName: string read get_DefaultFontName write set_DefaultFontName;
  end;

  TDNRenderingOptions = class(TDNGenericImport<DNRenderingOptionsClass, DNRenderingOptions>) end;

  //-------------namespace: Aspose.Pdf----------------
  DNResourceLoadingResultClass = interface(DDN.mscorlib.DNObjectClass)
  ['{DF90D466-96BC-5EBC-A3DA-D01DFC855E15}']
  { constructors } 

    {class} function init(data: TArray<Byte>): DNResourceLoadingResult; overload;
    {class} function init(data: TArray<Byte>; encoding: DDN.mscorlib.DNEncoding): DNResourceLoadingResult; overload;

  end;

  [DNTypeName('Aspose.Pdf.ResourceLoadingResult')]
  DNResourceLoadingResult = interface(DDN.mscorlib.DNObject)
  ['{03A045DB-42EE-3E86-AE69-F48351632752}']
  { getters & setters } 

    function get_Data: TArray<Byte>;
    function get_Encoding: DDN.mscorlib.DNEncoding;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Data: TArray<Byte> read get_Data;
    property Encoding: DDN.mscorlib.DNEncoding read get_Encoding;
  end;

  TDNResourceLoadingResult = class(TDNGenericImport<DNResourceLoadingResultClass, DNResourceLoadingResult>) end;

  //-------------namespace: Aspose.Pdf----------------
  DNResourcesClass = interface(DDN.mscorlib.DNObjectClass)
  ['{65FEBA1B-27E6-5904-AE05-B717D437009C}']
  end;

  [DNTypeName('Aspose.Pdf.Resources')]
  DNResources = interface(DDN.mscorlib.DNObject)
  ['{88324D52-5F22-3C44-8852-2FEFE3B962B9}']
  { getters & setters } 

    function get_Forms: DNXFormCollection;
    function get_Images: DNXImageCollection;
    function get_Fonts: DNFontCollection;

  { methods } 

    function GetFonts(CreateIfAbsent: Boolean): DNFontCollection;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Forms: DNXFormCollection read get_Forms;
    property Images: DNXImageCollection read get_Images;
    property Fonts: DNFontCollection read get_Fonts;
  end;

  TDNResources = class(TDNGenericImport<DNResourcesClass, DNResources>) end;

  //-------------namespace: Aspose.Pdf----------------
  DNRgbToDeviceGrayConversionStrategyClass = interface(DNObjectClass)
  ['{6B90E9F4-FE4B-5DB0-80C5-B951EEB6FC99}']
  { constructors } 

    {class} function init: DNRgbToDeviceGrayConversionStrategy;

  end;

  [DNTypeName('Aspose.Pdf.RgbToDeviceGrayConversionStrategy')]
  DNRgbToDeviceGrayConversionStrategy = interface(DNIColorSpaceConversionStrategy)
  ['{E2882F86-3C9E-370D-B100-F360BC7E3BE4}']
  { methods } 

    procedure Convert(page: DNPage);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNRgbToDeviceGrayConversionStrategy = class(TDNGenericImport<DNRgbToDeviceGrayConversionStrategyClass, DNRgbToDeviceGrayConversionStrategy>) end;

  //-------------namespace: Aspose.Pdf----------------
  DNRowClass = interface(DNObjectClass)
  ['{017EBB28-5240-5036-A4F7-E34B98557AB1}']
  { constructors } 

    {class} function init: DNRow;

  end;

  [DNTypeName('Aspose.Pdf.Row')]
  DNRow = interface(DDN.mscorlib.DNICloneable)
  ['{FBC67D01-77E9-3160-A50F-1567DF600998}']
  { getters & setters } 

    function get_BackgroundColor: DNColor;
    procedure set_BackgroundColor(value: DNColor);
    function get_Border: DNBorderInfo;
    procedure set_Border(value: DNBorderInfo);
    function get_Cells: DNCells;
    procedure set_Cells(value: DNCells);
    function get_DefaultCellBorder: DNBorderInfo;
    procedure set_DefaultCellBorder(value: DNBorderInfo);
    function get_MinRowHeight: Double;
    procedure set_MinRowHeight(value: Double);
    function get_FixedRowHeight: Double;
    procedure set_FixedRowHeight(value: Double);
    function get_IsInNewPage: Boolean;
    procedure set_IsInNewPage(value: Boolean);
    function get_IsRowBroken: Boolean;
    procedure set_IsRowBroken(value: Boolean);
    function get_DefaultCellTextState: DNTextState;
    procedure set_DefaultCellTextState(value: DNTextState);
    function get_DefaultCellPadding: DNMarginInfo;
    procedure set_DefaultCellPadding(value: DNMarginInfo);
    function get_VerticalAlignment: DNVerticalAlignment;
    procedure set_VerticalAlignment(value: DNVerticalAlignment);

  { methods } 

    function Clone: DDN.mscorlib.DNObject;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property BackgroundColor: DNColor read get_BackgroundColor write set_BackgroundColor;
    property Border: DNBorderInfo read get_Border write set_Border;
    property Cells: DNCells read get_Cells write set_Cells;
    property DefaultCellBorder: DNBorderInfo read get_DefaultCellBorder write set_DefaultCellBorder;
    property MinRowHeight: Double read get_MinRowHeight write set_MinRowHeight;
    property FixedRowHeight: Double read get_FixedRowHeight write set_FixedRowHeight;
    property IsInNewPage: Boolean read get_IsInNewPage write set_IsInNewPage;
    property IsRowBroken: Boolean read get_IsRowBroken write set_IsRowBroken;
    property DefaultCellTextState: DNTextState read get_DefaultCellTextState write set_DefaultCellTextState;
    property DefaultCellPadding: DNMarginInfo read get_DefaultCellPadding write set_DefaultCellPadding;
    property VerticalAlignment: DNVerticalAlignment read get_VerticalAlignment write set_VerticalAlignment;
  end;

  TDNRow = class(TDNGenericImport<DNRowClass, DNRow>) end;

  //-------------namespace: Aspose.Pdf----------------
  DNRowsClass = interface(DDN.mscorlib.DNObjectClass)
  ['{0431CB95-DFB8-5EE6-B8DC-73F01F3596A7}']
  { constructors } 

    {class} function init: DNRows;

  end;

  [DNTypeName('Aspose.Pdf.Rows')]
  DNRows = interface(DDN.mscorlib.DNObject)
  ['{35CBA590-86E2-3A34-98B2-01C2B7025158}']
  { getters & setters } 

    function get_Count: Int32;
    function get_Item(index: Int32): DNRow;
    procedure set_Item(index: Int32; value: DNRow);

  { methods } 

    function Add: DNRow; overload;
    procedure Add(row: DNRow); overload;
    function IndexOf(row: DNRow): Int32;
    procedure Remove(row: DNRow);
    procedure RemoveAt(index: Int32);
    procedure RemoveRange(index: Int32; count: Int32);
    function GetEnumerator: DDN.mscorlib.DNIEnumerator<DNRow>;
    procedure Dispose;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Count: Int32 read get_Count;
    property Item[index: Int32]: DNRow read get_Item write set_Item; default;
  end;

  TDNRows = class(TDNGenericImport<DNRowsClass, DNRows>) end;

  //-------------namespace: Aspose.Pdf----------------
  DNSaveOptionsClass = interface(DDN.mscorlib.DNObjectClass)
  ['{7EF90BC5-8CAD-53A0-AC76-241507941738}']
  end;

  [DNTypeName('Aspose.Pdf.SaveOptions')]
  DNSaveOptions = interface(DDN.mscorlib.DNObject)
  ['{30E7AA95-357A-3F58-9D05-9B6A890988DA}']
  { getters & setters } 

    function get_WarningHandler: DNIWarningCallback;
    procedure set_WarningHandler(value: DNIWarningCallback);
    function get_SaveFormat: DNSaveFormat;
    function get_CloseResponse: Boolean;
    procedure set_CloseResponse(value: Boolean);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property WarningHandler: DNIWarningCallback read get_WarningHandler write set_WarningHandler;
    property SaveFormat: DNSaveFormat read get_SaveFormat;
    property CloseResponse: Boolean read get_CloseResponse write set_CloseResponse;
  end;

  TDNSaveOptions = class(TDNGenericImport<DNSaveOptionsClass, DNSaveOptions>) end;

  //-------------namespace: Aspose.Pdf----------------
  DNPdfSaveOptionsClass = interface(DNSaveOptionsClass)
  ['{3752905E-CF9E-5DF1-B1EA-861D76B6F783}']
  { constructors } 

    {class} function init: DNPdfSaveOptions;

  end;

  [DNTypeName('Aspose.Pdf.PdfSaveOptions')]
  DNPdfSaveOptions = interface(DNSaveOptions)
  ['{C7E3960E-1A9E-3396-A929-1D93594AD77A}']
  { getters & setters } 

    function get_DefaultFontName: string;
    procedure set_DefaultFontName(value: string);
    function get_WarningHandler: DNIWarningCallback;
    procedure set_WarningHandler(value: DNIWarningCallback);
    function get_SaveFormat: DNSaveFormat;
    function get_CloseResponse: Boolean;
    procedure set_CloseResponse(value: Boolean);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property DefaultFontName: string read get_DefaultFontName write set_DefaultFontName;
    property WarningHandler: DNIWarningCallback read get_WarningHandler write set_WarningHandler;
    property SaveFormat: DNSaveFormat read get_SaveFormat;
    property CloseResponse: Boolean read get_CloseResponse write set_CloseResponse;
  end;

  TDNPdfSaveOptions = class(TDNGenericImport<DNPdfSaveOptionsClass, DNPdfSaveOptions>) end;

  //-------------namespace: Aspose.Pdf----------------
  DNUnifiedSaveOptionsClass = interface(DNSaveOptionsClass)
  ['{CEA6FA14-56F9-5364-9AC3-BFAA63227BFB}']
  { constructors } 

    {class} function init: DNUnifiedSaveOptions;

  end;

  [DNTypeName('Aspose.Pdf.UnifiedSaveOptions')]
  DNUnifiedSaveOptions = interface(DNSaveOptions)
  ['{3B143D8D-67A2-3AF8-9367-266A8E18849D}']
  { getters & setters } 

    function get_ExtractOcrSublayerOnly: Boolean;
    procedure set_ExtractOcrSublayerOnly(value: Boolean);
    function get_WarningHandler: DNIWarningCallback;
    procedure set_WarningHandler(value: DNIWarningCallback);
    function get_SaveFormat: DNSaveFormat;
    function get_CloseResponse: Boolean;
    procedure set_CloseResponse(value: Boolean);

  { fields getter & setter } 

   function __fakeFieldGet_TryMergeAdjacentSameBackgroundImages: Boolean;
   procedure __fakeFieldSet_TryMergeAdjacentSameBackgroundImages(value: Boolean);

  { fields } 

   property TryMergeAdjacentSameBackgroundImages: Boolean read __fakeFieldGet_TryMergeAdjacentSameBackgroundImages write __fakeFieldSet_TryMergeAdjacentSameBackgroundImages;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property ExtractOcrSublayerOnly: Boolean read get_ExtractOcrSublayerOnly write set_ExtractOcrSublayerOnly;
    property WarningHandler: DNIWarningCallback read get_WarningHandler write set_WarningHandler;
    property SaveFormat: DNSaveFormat read get_SaveFormat;
    property CloseResponse: Boolean read get_CloseResponse write set_CloseResponse;
  end;

  TDNUnifiedSaveOptions = class(TDNGenericImport<DNUnifiedSaveOptionsClass, DNUnifiedSaveOptions>) end;

  //-------------namespace: Aspose.Pdf----------------
  DNApsSaveOptionsClass = interface(DNUnifiedSaveOptionsClass)
  ['{49F311EB-8D71-5833-82B8-33BD500F3679}']
  { constructors } 

    {class} function init: DNApsSaveOptions;

  end;

  [DNTypeName('Aspose.Pdf.ApsSaveOptions')]
  DNApsSaveOptions = interface(DNUnifiedSaveOptions)
  ['{AF261FAE-9AB1-3DAE-85BD-7C0E26EBA388}']
  { getters & setters } 

    function get_ExtractOcrSublayerOnly: Boolean;
    procedure set_ExtractOcrSublayerOnly(value: Boolean);
    function get_WarningHandler: DNIWarningCallback;
    procedure set_WarningHandler(value: DNIWarningCallback);
    function get_SaveFormat: DNSaveFormat;
    function get_CloseResponse: Boolean;
    procedure set_CloseResponse(value: Boolean);

  { fields getter & setter } 

   function __fakeFieldGet_TryMergeAdjacentSameBackgroundImages: Boolean;
   procedure __fakeFieldSet_TryMergeAdjacentSameBackgroundImages(value: Boolean);

  { fields } 

   property TryMergeAdjacentSameBackgroundImages: Boolean read __fakeFieldGet_TryMergeAdjacentSameBackgroundImages write __fakeFieldSet_TryMergeAdjacentSameBackgroundImages;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property ExtractOcrSublayerOnly: Boolean read get_ExtractOcrSublayerOnly write set_ExtractOcrSublayerOnly;
    property WarningHandler: DNIWarningCallback read get_WarningHandler write set_WarningHandler;
    property SaveFormat: DNSaveFormat read get_SaveFormat;
    property CloseResponse: Boolean read get_CloseResponse write set_CloseResponse;
  end;

  TDNApsSaveOptions = class(TDNGenericImport<DNApsSaveOptionsClass, DNApsSaveOptions>) end;

  //-------------namespace: Aspose.Pdf----------------
  DNDocSaveOptionsClass = interface(DNUnifiedSaveOptionsClass)
  ['{11C47853-33D7-553B-B9BB-EB0C727229ED}']
  { constructors } 

    {class} function init: DNDocSaveOptions;

  end;

  [DNTypeName('Aspose.Pdf.DocSaveOptions')]
  DNDocSaveOptions = interface(DNUnifiedSaveOptions)
  ['{5ECED693-9985-3EF9-8C75-FF94894B45DE}']
  { getters & setters } 

    function get_Mode: DNDocSaveOptions_RecognitionMode;
    procedure set_Mode(value: DNDocSaveOptions_RecognitionMode);
    function get_RelativeHorizontalProximity: Single;
    procedure set_RelativeHorizontalProximity(value: Single);
    function get_MaxDistanceBetweenTextLines: Single;
    procedure set_MaxDistanceBetweenTextLines(value: Single);
    function get_RecognizeBullets: Boolean;
    procedure set_RecognizeBullets(value: Boolean);
    function get_AddReturnToLineEnd: Boolean;
    procedure set_AddReturnToLineEnd(value: Boolean);
    function get_ImageResolutionX: Int32;
    procedure set_ImageResolutionX(value: Int32);
    function get_ImageResolutionY: Int32;
    procedure set_ImageResolutionY(value: Int32);
    function get_Format: DNDocSaveOptions_DocFormat;
    procedure set_Format(value: DNDocSaveOptions_DocFormat);
    function get_BatchSize: Int32;
    procedure set_BatchSize(value: Int32);
    function get_MemorySaveModePath: string;
    procedure set_MemorySaveModePath(value: string);
    function get_ExtractOcrSublayerOnly: Boolean;
    procedure set_ExtractOcrSublayerOnly(value: Boolean);
    function get_WarningHandler: DNIWarningCallback;
    procedure set_WarningHandler(value: DNIWarningCallback);
    function get_SaveFormat: DNSaveFormat;
    function get_CloseResponse: Boolean;
    procedure set_CloseResponse(value: Boolean);

  { fields getter & setter } 

   function __fakeFieldGet_CustomProgressHandler: DNUnifiedSaveOptions_ConversionProgressEventHandler;
   procedure __fakeFieldSet_CustomProgressHandler(value: DNUnifiedSaveOptions_ConversionProgressEventHandler);
   function __fakeFieldGet_TryMergeAdjacentSameBackgroundImages: Boolean;
   procedure __fakeFieldSet_TryMergeAdjacentSameBackgroundImages(value: Boolean);

  { fields } 

   property CustomProgressHandler: DNUnifiedSaveOptions_ConversionProgressEventHandler read __fakeFieldGet_CustomProgressHandler write __fakeFieldSet_CustomProgressHandler;
   property TryMergeAdjacentSameBackgroundImages: Boolean read __fakeFieldGet_TryMergeAdjacentSameBackgroundImages write __fakeFieldSet_TryMergeAdjacentSameBackgroundImages;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Mode: DNDocSaveOptions_RecognitionMode read get_Mode write set_Mode;
    property RelativeHorizontalProximity: Single read get_RelativeHorizontalProximity write set_RelativeHorizontalProximity;
    property MaxDistanceBetweenTextLines: Single read get_MaxDistanceBetweenTextLines write set_MaxDistanceBetweenTextLines;
    property RecognizeBullets: Boolean read get_RecognizeBullets write set_RecognizeBullets;
    property AddReturnToLineEnd: Boolean read get_AddReturnToLineEnd write set_AddReturnToLineEnd;
    property ImageResolutionX: Int32 read get_ImageResolutionX write set_ImageResolutionX;
    property ImageResolutionY: Int32 read get_ImageResolutionY write set_ImageResolutionY;
    property Format: DNDocSaveOptions_DocFormat read get_Format write set_Format;
    property BatchSize: Int32 read get_BatchSize write set_BatchSize;
    property MemorySaveModePath: string read get_MemorySaveModePath write set_MemorySaveModePath;
    property ExtractOcrSublayerOnly: Boolean read get_ExtractOcrSublayerOnly write set_ExtractOcrSublayerOnly;
    property WarningHandler: DNIWarningCallback read get_WarningHandler write set_WarningHandler;
    property SaveFormat: DNSaveFormat read get_SaveFormat;
    property CloseResponse: Boolean read get_CloseResponse write set_CloseResponse;
  end;

  TDNDocSaveOptions = class(TDNGenericImport<DNDocSaveOptionsClass, DNDocSaveOptions>) end;

  //-------------namespace: Aspose.Pdf----------------
  DNEpubSaveOptionsClass = interface(DNUnifiedSaveOptionsClass)
  ['{3D63128D-6F79-5656-A254-78B2521D7DCA}']
  { constructors } 

    {class} function init: DNEpubSaveOptions;

  end;

  [DNTypeName('Aspose.Pdf.EpubSaveOptions')]
  DNEpubSaveOptions = interface(DNUnifiedSaveOptions)
  ['{3DFE0F97-1120-3080-A369-A6C02F87A826}']
  { getters & setters } 

    function get_ExtractOcrSublayerOnly: Boolean;
    procedure set_ExtractOcrSublayerOnly(value: Boolean);
    function get_WarningHandler: DNIWarningCallback;
    procedure set_WarningHandler(value: DNIWarningCallback);
    function get_SaveFormat: DNSaveFormat;
    function get_CloseResponse: Boolean;
    procedure set_CloseResponse(value: Boolean);

  { fields getter & setter } 

   function __fakeFieldGet_ContentRecognitionMode: DNEpubSaveOptions_RecognitionMode;
   procedure __fakeFieldSet_ContentRecognitionMode(value: DNEpubSaveOptions_RecognitionMode);
   function __fakeFieldGet_TryMergeAdjacentSameBackgroundImages: Boolean;
   procedure __fakeFieldSet_TryMergeAdjacentSameBackgroundImages(value: Boolean);

  { fields } 

   property ContentRecognitionMode: DNEpubSaveOptions_RecognitionMode read __fakeFieldGet_ContentRecognitionMode write __fakeFieldSet_ContentRecognitionMode;
   property TryMergeAdjacentSameBackgroundImages: Boolean read __fakeFieldGet_TryMergeAdjacentSameBackgroundImages write __fakeFieldSet_TryMergeAdjacentSameBackgroundImages;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property ExtractOcrSublayerOnly: Boolean read get_ExtractOcrSublayerOnly write set_ExtractOcrSublayerOnly;
    property WarningHandler: DNIWarningCallback read get_WarningHandler write set_WarningHandler;
    property SaveFormat: DNSaveFormat read get_SaveFormat;
    property CloseResponse: Boolean read get_CloseResponse write set_CloseResponse;
  end;

  TDNEpubSaveOptions = class(TDNGenericImport<DNEpubSaveOptionsClass, DNEpubSaveOptions>) end;

  //-------------namespace: Aspose.Pdf----------------
  DNExcelSaveOptionsClass = interface(DNUnifiedSaveOptionsClass)
  ['{6B09995B-EF6B-50B1-B1E2-88F17B841AAB}']
  { constructors } 

    {class} function init: DNExcelSaveOptions;

  end;

  [DNTypeName('Aspose.Pdf.ExcelSaveOptions')]
  DNExcelSaveOptions = interface(DNUnifiedSaveOptions)
  ['{52B69E3C-6AA9-3191-A907-A1684EE56A9B}']
  { getters & setters } 

    function get_MinimizeTheNumberOfWorksheets: Boolean;
    procedure set_MinimizeTheNumberOfWorksheets(value: Boolean);
    function get_InsertBlankColumnAtFirst: Boolean;
    procedure set_InsertBlankColumnAtFirst(value: Boolean);
    function get_UniformWorksheets: Boolean;
    procedure set_UniformWorksheets(value: Boolean);
    function get_ScaleFactor: Double;
    procedure set_ScaleFactor(value: Double);
    function get_Format: DNExcelSaveOptions_ExcelFormat;
    procedure set_Format(value: DNExcelSaveOptions_ExcelFormat);
    function get_ExtractOcrSublayerOnly: Boolean;
    procedure set_ExtractOcrSublayerOnly(value: Boolean);
    function get_WarningHandler: DNIWarningCallback;
    procedure set_WarningHandler(value: DNIWarningCallback);
    function get_SaveFormat: DNSaveFormat;
    function get_CloseResponse: Boolean;
    procedure set_CloseResponse(value: Boolean);

  { fields getter & setter } 

   function __fakeFieldGet_ConversionEngine: DNExcelSaveOptions_ConversionEngines;
   procedure __fakeFieldSet_ConversionEngine(value: DNExcelSaveOptions_ConversionEngines);
   function __fakeFieldGet_TryMergeAdjacentSameBackgroundImages: Boolean;
   procedure __fakeFieldSet_TryMergeAdjacentSameBackgroundImages(value: Boolean);

  { fields } 

   property ConversionEngine: DNExcelSaveOptions_ConversionEngines read __fakeFieldGet_ConversionEngine write __fakeFieldSet_ConversionEngine;
   property TryMergeAdjacentSameBackgroundImages: Boolean read __fakeFieldGet_TryMergeAdjacentSameBackgroundImages write __fakeFieldSet_TryMergeAdjacentSameBackgroundImages;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property MinimizeTheNumberOfWorksheets: Boolean read get_MinimizeTheNumberOfWorksheets write set_MinimizeTheNumberOfWorksheets;
    property InsertBlankColumnAtFirst: Boolean read get_InsertBlankColumnAtFirst write set_InsertBlankColumnAtFirst;
    property UniformWorksheets: Boolean read get_UniformWorksheets write set_UniformWorksheets;
    property ScaleFactor: Double read get_ScaleFactor write set_ScaleFactor;
    property Format: DNExcelSaveOptions_ExcelFormat read get_Format write set_Format;
    property ExtractOcrSublayerOnly: Boolean read get_ExtractOcrSublayerOnly write set_ExtractOcrSublayerOnly;
    property WarningHandler: DNIWarningCallback read get_WarningHandler write set_WarningHandler;
    property SaveFormat: DNSaveFormat read get_SaveFormat;
    property CloseResponse: Boolean read get_CloseResponse write set_CloseResponse;
  end;

  TDNExcelSaveOptions = class(TDNGenericImport<DNExcelSaveOptionsClass, DNExcelSaveOptions>) end;

  //-------------namespace: Aspose.Pdf----------------
  DNHtmlSaveOptionsClass = interface(DNUnifiedSaveOptionsClass)
  ['{EA6CA771-E7DC-5981-9885-931B95E3589B}']
  { constructors } 

    {class} function init: DNHtmlSaveOptions; overload;
    {class} function init(documentType: DNHtmlDocumentType): DNHtmlSaveOptions; overload;
    {class} function init(fixedLayout: Boolean): DNHtmlSaveOptions; overload;
    {class} function init(documentType: DNHtmlDocumentType; fixedLayout: Boolean): DNHtmlSaveOptions; overload;

  end;

  [DNTypeName('Aspose.Pdf.HtmlSaveOptions')]
  DNHtmlSaveOptions = interface(DNUnifiedSaveOptions)
  ['{81ADAB87-1EA6-3DC8-9BA8-7A7FDC50FE46}']
  { getters & setters } 

    function get_DocumentType: DNHtmlDocumentType;
    procedure set_DocumentType(value: DNHtmlDocumentType);
    function get_CompressSvgGraphicsIfAny: Boolean;
    procedure set_CompressSvgGraphicsIfAny(value: Boolean);
    function get_SplitCssIntoPages: Boolean;
    procedure set_SplitCssIntoPages(value: Boolean);
    function get_SplitIntoPages: Boolean;
    procedure set_SplitIntoPages(value: Boolean);
    function get_ExplicitListOfSavedPages: TArray<Int32>;
    procedure set_ExplicitListOfSavedPages(value: TArray<Int32>);
    function get_FixedLayout: Boolean;
    procedure set_FixedLayout(value: Boolean);
    function get_ImageResolution: Int32;
    procedure set_ImageResolution(value: Int32);
    function get_DefaultFontName: string;
    procedure set_DefaultFontName(value: string);
    function get_BatchSize: Int32;
    procedure set_BatchSize(value: Int32);
    function get_FontSources: DNFontSourceCollection;
    function get_AdditionalMarginWidthInPoints: Int32;
    procedure set_AdditionalMarginWidthInPoints(value: Int32);
    function get_UseZOrder: Boolean;
    procedure set_UseZOrder(value: Boolean);
    function get_ConvertMarkedContentToLayers: Boolean;
    procedure set_ConvertMarkedContentToLayers(value: Boolean);
    function get_MinimalLineWidth: Single;
    procedure set_MinimalLineWidth(value: Single);
    function get_PreventGlyphsGrouping: Boolean;
    procedure set_PreventGlyphsGrouping(value: Boolean);
    function get_SimpleTextboxModeGrouping: Boolean;
    procedure set_SimpleTextboxModeGrouping(value: Boolean);
    function get_FlowLayoutParagraphFullWidth: Boolean;
    procedure set_FlowLayoutParagraphFullWidth(value: Boolean);
    function get_RenderTextAsImage: Boolean;
    procedure set_RenderTextAsImage(value: Boolean);
    function get_ExtractOcrSublayerOnly: Boolean;
    procedure set_ExtractOcrSublayerOnly(value: Boolean);
    function get_WarningHandler: DNIWarningCallback;
    procedure set_WarningHandler(value: DNIWarningCallback);
    function get_SaveFormat: DNSaveFormat;
    function get_CloseResponse: Boolean;
    procedure set_CloseResponse(value: Boolean);

  { fields getter & setter } 

   function __fakeFieldGet_CustomProgressHandler: DNUnifiedSaveOptions_ConversionProgressEventHandler;
   procedure __fakeFieldSet_CustomProgressHandler(value: DNUnifiedSaveOptions_ConversionProgressEventHandler);
   function __fakeFieldGet_SaveFullFont: Boolean;
   procedure __fakeFieldSet_SaveFullFont(value: Boolean);
   function __fakeFieldGet_AntialiasingProcessing: DNHtmlSaveOptions_AntialiasingProcessingType;
   procedure __fakeFieldSet_AntialiasingProcessing(value: DNHtmlSaveOptions_AntialiasingProcessingType);
   function __fakeFieldGet_SaveTransparentTexts: Boolean;
   procedure __fakeFieldSet_SaveTransparentTexts(value: Boolean);
   function __fakeFieldGet_SaveShadowedTextsAsTransparentTexts: Boolean;
   procedure __fakeFieldSet_SaveShadowedTextsAsTransparentTexts(value: Boolean);
   function __fakeFieldGet_FontSavingMode: DNHtmlSaveOptions_FontSavingModes;
   procedure __fakeFieldSet_FontSavingMode(value: DNHtmlSaveOptions_FontSavingModes);
   function __fakeFieldGet_PageBorderIfAny: DNSaveOptions_BorderInfo;
   procedure __fakeFieldSet_PageBorderIfAny(value: DNSaveOptions_BorderInfo);
   function __fakeFieldGet_PageMarginIfAny: DNSaveOptions_MarginInfo;
   procedure __fakeFieldSet_PageMarginIfAny(value: DNSaveOptions_MarginInfo);
   function __fakeFieldGet_LettersPositioningMethod: DNHtmlSaveOptions_LettersPositioningMethods;
   procedure __fakeFieldSet_LettersPositioningMethod(value: DNHtmlSaveOptions_LettersPositioningMethods);
   function __fakeFieldGet_ExcludeFontNameList: TArray<string>;
   procedure __fakeFieldSet_ExcludeFontNameList(value: TArray<string>);
   function __fakeFieldGet_CustomResourceSavingStrategy: DNHtmlSaveOptions_ResourceSavingStrategy;
   procedure __fakeFieldSet_CustomResourceSavingStrategy(value: DNHtmlSaveOptions_ResourceSavingStrategy);
   function __fakeFieldGet_CustomCssSavingStrategy: DNHtmlSaveOptions_CssSavingStrategy;
   procedure __fakeFieldSet_CustomCssSavingStrategy(value: DNHtmlSaveOptions_CssSavingStrategy);
   function __fakeFieldGet_CustomHtmlSavingStrategy: DNHtmlSaveOptions_HtmlPageMarkupSavingStrategy;
   procedure __fakeFieldSet_CustomHtmlSavingStrategy(value: DNHtmlSaveOptions_HtmlPageMarkupSavingStrategy);
   function __fakeFieldGet_CustomStrategyOfCssUrlCreation: DNHtmlSaveOptions_CssUrlMakingStrategy;
   procedure __fakeFieldSet_CustomStrategyOfCssUrlCreation(value: DNHtmlSaveOptions_CssUrlMakingStrategy);
   function __fakeFieldGet_SpecialFolderForSvgImages: string;
   procedure __fakeFieldSet_SpecialFolderForSvgImages(value: string);
   function __fakeFieldGet_SpecialFolderForAllImages: string;
   procedure __fakeFieldSet_SpecialFolderForAllImages(value: string);
   function __fakeFieldGet_CssClassNamesPrefix: string;
   procedure __fakeFieldSet_CssClassNamesPrefix(value: string);
   function __fakeFieldGet_PartsEmbeddingMode: DNHtmlSaveOptions_PartsEmbeddingModes;
   procedure __fakeFieldSet_PartsEmbeddingMode(value: DNHtmlSaveOptions_PartsEmbeddingModes);
   function __fakeFieldGet_HtmlMarkupGenerationMode: DNHtmlSaveOptions_HtmlMarkupGenerationModes;
   procedure __fakeFieldSet_HtmlMarkupGenerationMode(value: DNHtmlSaveOptions_HtmlMarkupGenerationModes);
   function __fakeFieldGet_RasterImagesSavingMode: DNHtmlSaveOptions_RasterImagesSavingModes;
   procedure __fakeFieldSet_RasterImagesSavingMode(value: DNHtmlSaveOptions_RasterImagesSavingModes);
   function __fakeFieldGet_RemoveEmptyAreasOnTopAndBottom: Boolean;
   procedure __fakeFieldSet_RemoveEmptyAreasOnTopAndBottom(value: Boolean);
   function __fakeFieldGet_FontEncodingStrategy: DNHtmlSaveOptions_FontEncodingRules;
   procedure __fakeFieldSet_FontEncodingStrategy(value: DNHtmlSaveOptions_FontEncodingRules);
   function __fakeFieldGet_PagesFlowTypeDependsOnViewersScreenSize: Boolean;
   procedure __fakeFieldSet_PagesFlowTypeDependsOnViewersScreenSize(value: Boolean);
   function __fakeFieldGet_TrySaveTextUnderliningAndStrikeoutingInCss: Boolean;
   procedure __fakeFieldSet_TrySaveTextUnderliningAndStrikeoutingInCss(value: Boolean);
   function __fakeFieldGet_TryMergeAdjacentSameBackgroundImages: Boolean;
   procedure __fakeFieldSet_TryMergeAdjacentSameBackgroundImages(value: Boolean);

  { fields } 

   property CustomProgressHandler: DNUnifiedSaveOptions_ConversionProgressEventHandler read __fakeFieldGet_CustomProgressHandler write __fakeFieldSet_CustomProgressHandler;
   property SaveFullFont: Boolean read __fakeFieldGet_SaveFullFont write __fakeFieldSet_SaveFullFont;
   property AntialiasingProcessing: DNHtmlSaveOptions_AntialiasingProcessingType read __fakeFieldGet_AntialiasingProcessing write __fakeFieldSet_AntialiasingProcessing;
   property SaveTransparentTexts: Boolean read __fakeFieldGet_SaveTransparentTexts write __fakeFieldSet_SaveTransparentTexts;
   property SaveShadowedTextsAsTransparentTexts: Boolean read __fakeFieldGet_SaveShadowedTextsAsTransparentTexts write __fakeFieldSet_SaveShadowedTextsAsTransparentTexts;
   property FontSavingMode: DNHtmlSaveOptions_FontSavingModes read __fakeFieldGet_FontSavingMode write __fakeFieldSet_FontSavingMode;
   property PageBorderIfAny: DNSaveOptions_BorderInfo read __fakeFieldGet_PageBorderIfAny write __fakeFieldSet_PageBorderIfAny;
   property PageMarginIfAny: DNSaveOptions_MarginInfo read __fakeFieldGet_PageMarginIfAny write __fakeFieldSet_PageMarginIfAny;
   property LettersPositioningMethod: DNHtmlSaveOptions_LettersPositioningMethods read __fakeFieldGet_LettersPositioningMethod write __fakeFieldSet_LettersPositioningMethod;
   property ExcludeFontNameList: TArray<string> read __fakeFieldGet_ExcludeFontNameList write __fakeFieldSet_ExcludeFontNameList;
   property CustomResourceSavingStrategy: DNHtmlSaveOptions_ResourceSavingStrategy read __fakeFieldGet_CustomResourceSavingStrategy write __fakeFieldSet_CustomResourceSavingStrategy;
   property CustomCssSavingStrategy: DNHtmlSaveOptions_CssSavingStrategy read __fakeFieldGet_CustomCssSavingStrategy write __fakeFieldSet_CustomCssSavingStrategy;
   property CustomHtmlSavingStrategy: DNHtmlSaveOptions_HtmlPageMarkupSavingStrategy read __fakeFieldGet_CustomHtmlSavingStrategy write __fakeFieldSet_CustomHtmlSavingStrategy;
   property CustomStrategyOfCssUrlCreation: DNHtmlSaveOptions_CssUrlMakingStrategy read __fakeFieldGet_CustomStrategyOfCssUrlCreation write __fakeFieldSet_CustomStrategyOfCssUrlCreation;
   property SpecialFolderForSvgImages: string read __fakeFieldGet_SpecialFolderForSvgImages write __fakeFieldSet_SpecialFolderForSvgImages;
   property SpecialFolderForAllImages: string read __fakeFieldGet_SpecialFolderForAllImages write __fakeFieldSet_SpecialFolderForAllImages;
   property CssClassNamesPrefix: string read __fakeFieldGet_CssClassNamesPrefix write __fakeFieldSet_CssClassNamesPrefix;
   property PartsEmbeddingMode: DNHtmlSaveOptions_PartsEmbeddingModes read __fakeFieldGet_PartsEmbeddingMode write __fakeFieldSet_PartsEmbeddingMode;
   property HtmlMarkupGenerationMode: DNHtmlSaveOptions_HtmlMarkupGenerationModes read __fakeFieldGet_HtmlMarkupGenerationMode write __fakeFieldSet_HtmlMarkupGenerationMode;
   property RasterImagesSavingMode: DNHtmlSaveOptions_RasterImagesSavingModes read __fakeFieldGet_RasterImagesSavingMode write __fakeFieldSet_RasterImagesSavingMode;
   property RemoveEmptyAreasOnTopAndBottom: Boolean read __fakeFieldGet_RemoveEmptyAreasOnTopAndBottom write __fakeFieldSet_RemoveEmptyAreasOnTopAndBottom;
   property FontEncodingStrategy: DNHtmlSaveOptions_FontEncodingRules read __fakeFieldGet_FontEncodingStrategy write __fakeFieldSet_FontEncodingStrategy;
   property PagesFlowTypeDependsOnViewersScreenSize: Boolean read __fakeFieldGet_PagesFlowTypeDependsOnViewersScreenSize write __fakeFieldSet_PagesFlowTypeDependsOnViewersScreenSize;
   property TrySaveTextUnderliningAndStrikeoutingInCss: Boolean read __fakeFieldGet_TrySaveTextUnderliningAndStrikeoutingInCss write __fakeFieldSet_TrySaveTextUnderliningAndStrikeoutingInCss;
   property TryMergeAdjacentSameBackgroundImages: Boolean read __fakeFieldGet_TryMergeAdjacentSameBackgroundImages write __fakeFieldSet_TryMergeAdjacentSameBackgroundImages;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property DocumentType: DNHtmlDocumentType read get_DocumentType write set_DocumentType;
    property CompressSvgGraphicsIfAny: Boolean read get_CompressSvgGraphicsIfAny write set_CompressSvgGraphicsIfAny;
    property SplitCssIntoPages: Boolean read get_SplitCssIntoPages write set_SplitCssIntoPages;
    property SplitIntoPages: Boolean read get_SplitIntoPages write set_SplitIntoPages;
    property ExplicitListOfSavedPages: TArray<Int32> read get_ExplicitListOfSavedPages write set_ExplicitListOfSavedPages;
    property FixedLayout: Boolean read get_FixedLayout write set_FixedLayout;
    property ImageResolution: Int32 read get_ImageResolution write set_ImageResolution;
    property DefaultFontName: string read get_DefaultFontName write set_DefaultFontName;
    property BatchSize: Int32 read get_BatchSize write set_BatchSize;
    property FontSources: DNFontSourceCollection read get_FontSources;
    property AdditionalMarginWidthInPoints: Int32 read get_AdditionalMarginWidthInPoints write set_AdditionalMarginWidthInPoints;
    property UseZOrder: Boolean read get_UseZOrder write set_UseZOrder;
    property ConvertMarkedContentToLayers: Boolean read get_ConvertMarkedContentToLayers write set_ConvertMarkedContentToLayers;
    property MinimalLineWidth: Single read get_MinimalLineWidth write set_MinimalLineWidth;
    property PreventGlyphsGrouping: Boolean read get_PreventGlyphsGrouping write set_PreventGlyphsGrouping;
    property SimpleTextboxModeGrouping: Boolean read get_SimpleTextboxModeGrouping write set_SimpleTextboxModeGrouping;
    property FlowLayoutParagraphFullWidth: Boolean read get_FlowLayoutParagraphFullWidth write set_FlowLayoutParagraphFullWidth;
    property RenderTextAsImage: Boolean read get_RenderTextAsImage write set_RenderTextAsImage;
    property ExtractOcrSublayerOnly: Boolean read get_ExtractOcrSublayerOnly write set_ExtractOcrSublayerOnly;
    property WarningHandler: DNIWarningCallback read get_WarningHandler write set_WarningHandler;
    property SaveFormat: DNSaveFormat read get_SaveFormat;
    property CloseResponse: Boolean read get_CloseResponse write set_CloseResponse;
  end;

  TDNHtmlSaveOptions = class(TDNGenericImport<DNHtmlSaveOptionsClass, DNHtmlSaveOptions>) end;

  //-------------namespace: Aspose.Pdf----------------
  DNMobiXmlSaveOptionsClass = interface(DNUnifiedSaveOptionsClass)
  ['{72C8F6EE-383E-5B88-8C71-D30B4AE6CA2C}']
  { constructors } 

    {class} function init: DNMobiXmlSaveOptions;

  end;

  [DNTypeName('Aspose.Pdf.MobiXmlSaveOptions')]
  DNMobiXmlSaveOptions = interface(DNUnifiedSaveOptions)
  ['{AFA1185A-47CA-32E2-8413-9EAB3F1AEDAD}']
  { getters & setters } 

    function get_ExtractOcrSublayerOnly: Boolean;
    procedure set_ExtractOcrSublayerOnly(value: Boolean);
    function get_WarningHandler: DNIWarningCallback;
    procedure set_WarningHandler(value: DNIWarningCallback);
    function get_SaveFormat: DNSaveFormat;
    function get_CloseResponse: Boolean;
    procedure set_CloseResponse(value: Boolean);

  { fields getter & setter } 

   function __fakeFieldGet_TryMergeAdjacentSameBackgroundImages: Boolean;
   procedure __fakeFieldSet_TryMergeAdjacentSameBackgroundImages(value: Boolean);

  { fields } 

   property TryMergeAdjacentSameBackgroundImages: Boolean read __fakeFieldGet_TryMergeAdjacentSameBackgroundImages write __fakeFieldSet_TryMergeAdjacentSameBackgroundImages;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property ExtractOcrSublayerOnly: Boolean read get_ExtractOcrSublayerOnly write set_ExtractOcrSublayerOnly;
    property WarningHandler: DNIWarningCallback read get_WarningHandler write set_WarningHandler;
    property SaveFormat: DNSaveFormat read get_SaveFormat;
    property CloseResponse: Boolean read get_CloseResponse write set_CloseResponse;
  end;

  TDNMobiXmlSaveOptions = class(TDNGenericImport<DNMobiXmlSaveOptionsClass, DNMobiXmlSaveOptions>) end;

  //-------------namespace: Aspose.Pdf----------------
  DNPdfXmlSaveOptionsClass = interface(DNUnifiedSaveOptionsClass)
  ['{8162CED9-F98D-52A3-BCAC-26AA40EF347E}']
  { constructors } 

    {class} function init: DNPdfXmlSaveOptions;

  end;

  [DNTypeName('Aspose.Pdf.PdfXmlSaveOptions')]
  DNPdfXmlSaveOptions = interface(DNUnifiedSaveOptions)
  ['{B7F1C13A-BA28-3114-A788-AD65AC9E839F}']
  { getters & setters } 

    function get_ExtractOcrSublayerOnly: Boolean;
    procedure set_ExtractOcrSublayerOnly(value: Boolean);
    function get_WarningHandler: DNIWarningCallback;
    procedure set_WarningHandler(value: DNIWarningCallback);
    function get_SaveFormat: DNSaveFormat;
    function get_CloseResponse: Boolean;
    procedure set_CloseResponse(value: Boolean);

  { fields getter & setter } 

   function __fakeFieldGet_TryMergeAdjacentSameBackgroundImages: Boolean;
   procedure __fakeFieldSet_TryMergeAdjacentSameBackgroundImages(value: Boolean);

  { fields } 

   property TryMergeAdjacentSameBackgroundImages: Boolean read __fakeFieldGet_TryMergeAdjacentSameBackgroundImages write __fakeFieldSet_TryMergeAdjacentSameBackgroundImages;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property ExtractOcrSublayerOnly: Boolean read get_ExtractOcrSublayerOnly write set_ExtractOcrSublayerOnly;
    property WarningHandler: DNIWarningCallback read get_WarningHandler write set_WarningHandler;
    property SaveFormat: DNSaveFormat read get_SaveFormat;
    property CloseResponse: Boolean read get_CloseResponse write set_CloseResponse;
  end;

  TDNPdfXmlSaveOptions = class(TDNGenericImport<DNPdfXmlSaveOptionsClass, DNPdfXmlSaveOptions>) end;

  //-------------namespace: Aspose.Pdf----------------
  DNPptxSaveOptionsClass = interface(DNUnifiedSaveOptionsClass)
  ['{7B3EAC50-FFD1-553B-92FD-B8AD0FD3E057}']
  { constructors } 

    {class} function init: DNPptxSaveOptions;

  end;

  [DNTypeName('Aspose.Pdf.PptxSaveOptions')]
  DNPptxSaveOptions = interface(DNUnifiedSaveOptions)
  ['{4E50C777-D254-32CF-84CD-744BDA741CDF}']
  { getters & setters } 

    function get_SlidesAsImages: Boolean;
    procedure set_SlidesAsImages(value: Boolean);
    function get_ImageResolution: Int32;
    procedure set_ImageResolution(value: Int32);
    function get_SeparateImages: Boolean;
    procedure set_SeparateImages(value: Boolean);
    function get_OptimizeTextBoxes: Boolean;
    procedure set_OptimizeTextBoxes(value: Boolean);
    function get_CustomProgressHandler: DNUnifiedSaveOptions_ConversionProgressEventHandler;
    procedure set_CustomProgressHandler(value: DNUnifiedSaveOptions_ConversionProgressEventHandler);
    function get_ExtractOcrSublayerOnly: Boolean;
    procedure set_ExtractOcrSublayerOnly(value: Boolean);
    function get_WarningHandler: DNIWarningCallback;
    procedure set_WarningHandler(value: DNIWarningCallback);
    function get_SaveFormat: DNSaveFormat;
    function get_CloseResponse: Boolean;
    procedure set_CloseResponse(value: Boolean);

  { fields getter & setter } 

   function __fakeFieldGet_TryMergeAdjacentSameBackgroundImages: Boolean;
   procedure __fakeFieldSet_TryMergeAdjacentSameBackgroundImages(value: Boolean);

  { fields } 

   property TryMergeAdjacentSameBackgroundImages: Boolean read __fakeFieldGet_TryMergeAdjacentSameBackgroundImages write __fakeFieldSet_TryMergeAdjacentSameBackgroundImages;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property SlidesAsImages: Boolean read get_SlidesAsImages write set_SlidesAsImages;
    property ImageResolution: Int32 read get_ImageResolution write set_ImageResolution;
    property SeparateImages: Boolean read get_SeparateImages write set_SeparateImages;
    property OptimizeTextBoxes: Boolean read get_OptimizeTextBoxes write set_OptimizeTextBoxes;
    property CustomProgressHandler: DNUnifiedSaveOptions_ConversionProgressEventHandler read get_CustomProgressHandler write set_CustomProgressHandler;
    property ExtractOcrSublayerOnly: Boolean read get_ExtractOcrSublayerOnly write set_ExtractOcrSublayerOnly;
    property WarningHandler: DNIWarningCallback read get_WarningHandler write set_WarningHandler;
    property SaveFormat: DNSaveFormat read get_SaveFormat;
    property CloseResponse: Boolean read get_CloseResponse write set_CloseResponse;
  end;

  TDNPptxSaveOptions = class(TDNGenericImport<DNPptxSaveOptionsClass, DNPptxSaveOptions>) end;

  //-------------namespace: Aspose.Pdf----------------
  DNSvgSaveOptionsClass = interface(DNUnifiedSaveOptionsClass)
  ['{E2F086C0-F4F3-5F4F-8549-0A55EA277854}']
  { constructors } 

    {class} function init: DNSvgSaveOptions;

  end;

  [DNTypeName('Aspose.Pdf.SvgSaveOptions')]
  DNSvgSaveOptions = interface(DNUnifiedSaveOptions)
  ['{25AC15DC-08BB-3CE1-B3E5-417B1BCE37DB}']
  { getters & setters } 

    function get_ExtractOcrSublayerOnly: Boolean;
    procedure set_ExtractOcrSublayerOnly(value: Boolean);
    function get_WarningHandler: DNIWarningCallback;
    procedure set_WarningHandler(value: DNIWarningCallback);
    function get_SaveFormat: DNSaveFormat;
    function get_CloseResponse: Boolean;
    procedure set_CloseResponse(value: Boolean);

  { fields getter & setter } 

   function __fakeFieldGet_CustomStrategyOfEmbeddedImagesSaving: DNSvgSaveOptions_EmbeddedImagesSavingStrategy;
   procedure __fakeFieldSet_CustomStrategyOfEmbeddedImagesSaving(value: DNSvgSaveOptions_EmbeddedImagesSavingStrategy);
   function __fakeFieldGet_TreatTargetFileNameAsDirectory: Boolean;
   procedure __fakeFieldSet_TreatTargetFileNameAsDirectory(value: Boolean);
   function __fakeFieldGet_CompressOutputToZipArchive: Boolean;
   procedure __fakeFieldSet_CompressOutputToZipArchive(value: Boolean);
   function __fakeFieldGet_ScaleToPixels: Boolean;
   procedure __fakeFieldSet_ScaleToPixels(value: Boolean);
   function __fakeFieldGet_TryMergeAdjacentSameBackgroundImages: Boolean;
   procedure __fakeFieldSet_TryMergeAdjacentSameBackgroundImages(value: Boolean);

  { fields } 

   property CustomStrategyOfEmbeddedImagesSaving: DNSvgSaveOptions_EmbeddedImagesSavingStrategy read __fakeFieldGet_CustomStrategyOfEmbeddedImagesSaving write __fakeFieldSet_CustomStrategyOfEmbeddedImagesSaving;
   property TreatTargetFileNameAsDirectory: Boolean read __fakeFieldGet_TreatTargetFileNameAsDirectory write __fakeFieldSet_TreatTargetFileNameAsDirectory;
   property CompressOutputToZipArchive: Boolean read __fakeFieldGet_CompressOutputToZipArchive write __fakeFieldSet_CompressOutputToZipArchive;
   property ScaleToPixels: Boolean read __fakeFieldGet_ScaleToPixels write __fakeFieldSet_ScaleToPixels;
   property TryMergeAdjacentSameBackgroundImages: Boolean read __fakeFieldGet_TryMergeAdjacentSameBackgroundImages write __fakeFieldSet_TryMergeAdjacentSameBackgroundImages;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property ExtractOcrSublayerOnly: Boolean read get_ExtractOcrSublayerOnly write set_ExtractOcrSublayerOnly;
    property WarningHandler: DNIWarningCallback read get_WarningHandler write set_WarningHandler;
    property SaveFormat: DNSaveFormat read get_SaveFormat;
    property CloseResponse: Boolean read get_CloseResponse write set_CloseResponse;
  end;

  TDNSvgSaveOptions = class(TDNGenericImport<DNSvgSaveOptionsClass, DNSvgSaveOptions>) end;

  //-------------namespace: Aspose.Pdf----------------
  DNTeXSaveOptionsClass = interface(DNUnifiedSaveOptionsClass)
  ['{EDD66FE7-8C0D-5DFF-9788-B9A487D8D3B2}']
  { constructors } 

    {class} function init: DNTeXSaveOptions;

  end;

  [DNTypeName('Aspose.Pdf.TeXSaveOptions')]
  DNTeXSaveOptions = interface(DNUnifiedSaveOptions)
  ['{377820C2-A7AB-3418-BCE1-C1669574C133}']
  { getters & setters } 

    function get_OutDirectoryPath: string;
    procedure set_OutDirectoryPath(value: string);
    function get_PagesCount: Int32;
    function get_ExtractOcrSublayerOnly: Boolean;
    procedure set_ExtractOcrSublayerOnly(value: Boolean);
    function get_WarningHandler: DNIWarningCallback;
    procedure set_WarningHandler(value: DNIWarningCallback);
    function get_SaveFormat: DNSaveFormat;
    function get_CloseResponse: Boolean;
    procedure set_CloseResponse(value: Boolean);

  { fields getter & setter } 

   function __fakeFieldGet_TryMergeAdjacentSameBackgroundImages: Boolean;
   procedure __fakeFieldSet_TryMergeAdjacentSameBackgroundImages(value: Boolean);

  { fields } 

   property TryMergeAdjacentSameBackgroundImages: Boolean read __fakeFieldGet_TryMergeAdjacentSameBackgroundImages write __fakeFieldSet_TryMergeAdjacentSameBackgroundImages;

  { methods } 

    procedure AddFontEncs(fontEncs: TArray<string>);
    procedure ClearFontEncs;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property OutDirectoryPath: string read get_OutDirectoryPath write set_OutDirectoryPath;
    property PagesCount: Int32 read get_PagesCount;
    property ExtractOcrSublayerOnly: Boolean read get_ExtractOcrSublayerOnly write set_ExtractOcrSublayerOnly;
    property WarningHandler: DNIWarningCallback read get_WarningHandler write set_WarningHandler;
    property SaveFormat: DNSaveFormat read get_SaveFormat;
    property CloseResponse: Boolean read get_CloseResponse write set_CloseResponse;
  end;

  TDNTeXSaveOptions = class(TDNGenericImport<DNTeXSaveOptionsClass, DNTeXSaveOptions>) end;

  //-------------namespace: Aspose.Pdf----------------
  DNLaTeXSaveOptionsClass = interface(DNTeXSaveOptionsClass)
  ['{9814A852-1470-5980-A746-4F1F75C07B88}']
  { constructors } 

    {class} function init: DNLaTeXSaveOptions;

  end;

  [DNTypeName('Aspose.Pdf.LaTeXSaveOptions')]
  DNLaTeXSaveOptions = interface(DNTeXSaveOptions)
  ['{4B18C2AB-5410-371E-9C50-0081D19C5795}']
  { getters & setters } 

    function get_OutDirectoryPath: string;
    procedure set_OutDirectoryPath(value: string);
    function get_PagesCount: Int32;
    function get_ExtractOcrSublayerOnly: Boolean;
    procedure set_ExtractOcrSublayerOnly(value: Boolean);
    function get_WarningHandler: DNIWarningCallback;
    procedure set_WarningHandler(value: DNIWarningCallback);
    function get_SaveFormat: DNSaveFormat;
    function get_CloseResponse: Boolean;
    procedure set_CloseResponse(value: Boolean);

  { fields getter & setter } 

   function __fakeFieldGet_TryMergeAdjacentSameBackgroundImages: Boolean;
   procedure __fakeFieldSet_TryMergeAdjacentSameBackgroundImages(value: Boolean);

  { fields } 

   property TryMergeAdjacentSameBackgroundImages: Boolean read __fakeFieldGet_TryMergeAdjacentSameBackgroundImages write __fakeFieldSet_TryMergeAdjacentSameBackgroundImages;

  { methods } 

    procedure AddFontEncs(fontEncs: TArray<string>);
    procedure ClearFontEncs;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property OutDirectoryPath: string read get_OutDirectoryPath write set_OutDirectoryPath;
    property PagesCount: Int32 read get_PagesCount;
    property ExtractOcrSublayerOnly: Boolean read get_ExtractOcrSublayerOnly write set_ExtractOcrSublayerOnly;
    property WarningHandler: DNIWarningCallback read get_WarningHandler write set_WarningHandler;
    property SaveFormat: DNSaveFormat read get_SaveFormat;
    property CloseResponse: Boolean read get_CloseResponse write set_CloseResponse;
  end;

  TDNLaTeXSaveOptions = class(TDNGenericImport<DNLaTeXSaveOptionsClass, DNLaTeXSaveOptions>) end;

  //-------------namespace: Aspose.Pdf----------------
  DNXpsSaveOptionsClass = interface(DNUnifiedSaveOptionsClass)
  ['{75D63AEE-3421-5B83-AED7-61E8E052E8B6}']
  { constructors } 

    {class} function init: DNXpsSaveOptions;

  end;

  [DNTypeName('Aspose.Pdf.XpsSaveOptions')]
  DNXpsSaveOptions = interface(DNUnifiedSaveOptions)
  ['{B04AAE83-C46B-3FF3-ABBF-D7EFA493AAAA}']
  { getters & setters } 

    function get_SaveTransparentTexts: Boolean;
    procedure set_SaveTransparentTexts(value: Boolean);
    function get_BatchSize: Int32;
    procedure set_BatchSize(value: Int32);
    function get_ExtractOcrSublayerOnly: Boolean;
    procedure set_ExtractOcrSublayerOnly(value: Boolean);
    function get_WarningHandler: DNIWarningCallback;
    procedure set_WarningHandler(value: DNIWarningCallback);
    function get_SaveFormat: DNSaveFormat;
    function get_CloseResponse: Boolean;
    procedure set_CloseResponse(value: Boolean);

  { fields getter & setter } 

   function __fakeFieldGet_TryMergeAdjacentSameBackgroundImages: Boolean;
   procedure __fakeFieldSet_TryMergeAdjacentSameBackgroundImages(value: Boolean);

  { fields } 

   property TryMergeAdjacentSameBackgroundImages: Boolean read __fakeFieldGet_TryMergeAdjacentSameBackgroundImages write __fakeFieldSet_TryMergeAdjacentSameBackgroundImages;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property SaveTransparentTexts: Boolean read get_SaveTransparentTexts write set_SaveTransparentTexts;
    property BatchSize: Int32 read get_BatchSize write set_BatchSize;
    property ExtractOcrSublayerOnly: Boolean read get_ExtractOcrSublayerOnly write set_ExtractOcrSublayerOnly;
    property WarningHandler: DNIWarningCallback read get_WarningHandler write set_WarningHandler;
    property SaveFormat: DNSaveFormat read get_SaveFormat;
    property CloseResponse: Boolean read get_CloseResponse write set_CloseResponse;
  end;

  TDNXpsSaveOptions = class(TDNGenericImport<DNXpsSaveOptionsClass, DNXpsSaveOptions>) end;

  //-------------namespace: Aspose.Pdf----------------
  DNXmlSaveOptionsClass = interface(DNSaveOptionsClass)
  ['{AE919085-E781-56DF-B22D-BB899E714A80}']
  { constructors } 

    {class} function init: DNXmlSaveOptions;

  end;

  [DNTypeName('Aspose.Pdf.XmlSaveOptions')]
  DNXmlSaveOptions = interface(DNSaveOptions)
  ['{893C14B6-3EB3-3648-93E1-78751C802DA8}']
  { getters & setters } 

    function get_WarningHandler: DNIWarningCallback;
    procedure set_WarningHandler(value: DNIWarningCallback);
    function get_SaveFormat: DNSaveFormat;
    function get_CloseResponse: Boolean;
    procedure set_CloseResponse(value: Boolean);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property WarningHandler: DNIWarningCallback read get_WarningHandler write set_WarningHandler;
    property SaveFormat: DNSaveFormat read get_SaveFormat;
    property CloseResponse: Boolean read get_CloseResponse write set_CloseResponse;
  end;

  TDNXmlSaveOptions = class(TDNGenericImport<DNXmlSaveOptionsClass, DNXmlSaveOptions>) end;

  //-------------namespace: Aspose.Pdf----------------
  DNSaveOptions_BorderInfoClass = interface(DDN.mscorlib.DNObjectClass)
  ['{C49BA776-5E6D-5B2B-96B2-80D9BC6753FE}']
  { constructors } 

    {class} function init: DNSaveOptions_BorderInfo; overload;
    {class} function init(commonStyle: DNSaveOptions_BorderPartStyle): DNSaveOptions_BorderInfo; overload;

  end;

  [DNTypeName('Aspose.Pdf.SaveOptions+BorderInfo')]
  DNSaveOptions_BorderInfo = interface(DDN.mscorlib.DNObject)
  ['{07E96F37-A010-3C5B-BBC4-B194784BCD88}']
  { fields getter & setter } 

   function __fakeFieldGet_TopStyleIfAny: DNSaveOptions_BorderPartStyle;
   procedure __fakeFieldSet_TopStyleIfAny(value: DNSaveOptions_BorderPartStyle);
   function __fakeFieldGet_LeftStyleIfAny: DNSaveOptions_BorderPartStyle;
   procedure __fakeFieldSet_LeftStyleIfAny(value: DNSaveOptions_BorderPartStyle);
   function __fakeFieldGet_RightStyleIfAny: DNSaveOptions_BorderPartStyle;
   procedure __fakeFieldSet_RightStyleIfAny(value: DNSaveOptions_BorderPartStyle);
   function __fakeFieldGet_BottomStyleIfAny: DNSaveOptions_BorderPartStyle;
   procedure __fakeFieldSet_BottomStyleIfAny(value: DNSaveOptions_BorderPartStyle);

  { fields } 

   property TopStyleIfAny: DNSaveOptions_BorderPartStyle read __fakeFieldGet_TopStyleIfAny write __fakeFieldSet_TopStyleIfAny;
   property LeftStyleIfAny: DNSaveOptions_BorderPartStyle read __fakeFieldGet_LeftStyleIfAny write __fakeFieldSet_LeftStyleIfAny;
   property RightStyleIfAny: DNSaveOptions_BorderPartStyle read __fakeFieldGet_RightStyleIfAny write __fakeFieldSet_RightStyleIfAny;
   property BottomStyleIfAny: DNSaveOptions_BorderPartStyle read __fakeFieldGet_BottomStyleIfAny write __fakeFieldSet_BottomStyleIfAny;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNSaveOptions_BorderInfo = class(TDNGenericImport<DNSaveOptions_BorderInfoClass, DNSaveOptions_BorderInfo>) end;

  //-------------namespace: Aspose.Pdf----------------
  DNSaveOptions_BorderPartStyleClass = interface(DDN.mscorlib.DNObjectClass)
  ['{1E864A11-290B-5B38-9D68-3605A9D9051A}']
  { constructors } 

    {class} function init: DNSaveOptions_BorderPartStyle;

  end;

  [DNTypeName('Aspose.Pdf.SaveOptions+BorderPartStyle')]
  DNSaveOptions_BorderPartStyle = interface(DDN.mscorlib.DNObject)
  ['{5A788295-3928-3E8D-BDC1-D0083619F453}']
  { getters & setters } 

    function get_WidthInPoints: Int32;
    procedure set_WidthInPoints(value: Int32);

  { fields getter & setter } 

   function __fakeFieldGet_Color: DDN.System.Drawing.DNColor;
   procedure __fakeFieldSet_Color(value: DDN.System.Drawing.DNColor);
   function __fakeFieldGet_LineType: DNSaveOptions_HtmlBorderLineType;
   procedure __fakeFieldSet_LineType(value: DNSaveOptions_HtmlBorderLineType);

  { fields } 

   property Color: DDN.System.Drawing.DNColor read __fakeFieldGet_Color write __fakeFieldSet_Color;
   property LineType: DNSaveOptions_HtmlBorderLineType read __fakeFieldGet_LineType write __fakeFieldSet_LineType;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property WidthInPoints: Int32 read get_WidthInPoints write set_WidthInPoints;
  end;

  TDNSaveOptions_BorderPartStyle = class(TDNGenericImport<DNSaveOptions_BorderPartStyleClass, DNSaveOptions_BorderPartStyle>) end;

  //-------------namespace: Aspose.Pdf----------------
  DNSaveOptions_MarginInfoClass = interface(DDN.mscorlib.DNObjectClass)
  ['{73F45437-C586-562C-A568-4215F5397DE8}']
  { constructors } 

    {class} function init: DNSaveOptions_MarginInfo; overload;
    {class} function init(commonMargin: DNSaveOptions_MarginPartStyle): DNSaveOptions_MarginInfo; overload;

  end;

  [DNTypeName('Aspose.Pdf.SaveOptions+MarginInfo')]
  DNSaveOptions_MarginInfo = interface(DDN.mscorlib.DNObject)
  ['{0AA4FDAF-5B17-3E66-8665-57CF90ECFB62}']
  { fields getter & setter } 

   function __fakeFieldGet_TopMarginIfAny: DNSaveOptions_MarginPartStyle;
   procedure __fakeFieldSet_TopMarginIfAny(value: DNSaveOptions_MarginPartStyle);
   function __fakeFieldGet_RightMarginIfAny: DNSaveOptions_MarginPartStyle;
   procedure __fakeFieldSet_RightMarginIfAny(value: DNSaveOptions_MarginPartStyle);
   function __fakeFieldGet_BottomMarginIfAny: DNSaveOptions_MarginPartStyle;
   procedure __fakeFieldSet_BottomMarginIfAny(value: DNSaveOptions_MarginPartStyle);
   function __fakeFieldGet_LeftMarginIfAny: DNSaveOptions_MarginPartStyle;
   procedure __fakeFieldSet_LeftMarginIfAny(value: DNSaveOptions_MarginPartStyle);

  { fields } 

   property TopMarginIfAny: DNSaveOptions_MarginPartStyle read __fakeFieldGet_TopMarginIfAny write __fakeFieldSet_TopMarginIfAny;
   property RightMarginIfAny: DNSaveOptions_MarginPartStyle read __fakeFieldGet_RightMarginIfAny write __fakeFieldSet_RightMarginIfAny;
   property BottomMarginIfAny: DNSaveOptions_MarginPartStyle read __fakeFieldGet_BottomMarginIfAny write __fakeFieldSet_BottomMarginIfAny;
   property LeftMarginIfAny: DNSaveOptions_MarginPartStyle read __fakeFieldGet_LeftMarginIfAny write __fakeFieldSet_LeftMarginIfAny;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNSaveOptions_MarginInfo = class(TDNGenericImport<DNSaveOptions_MarginInfoClass, DNSaveOptions_MarginInfo>) end;

  //-------------namespace: Aspose.Pdf----------------
  DNSaveOptions_MarginPartStyleClass = interface(DDN.mscorlib.DNObjectClass)
  ['{C535C2EB-4C8B-5D05-BB7F-D61C7D4283BD}']
  { constructors } 

    {class} function init(valueInPoints: Int32): DNSaveOptions_MarginPartStyle; overload;
    {class} function init(isAuto: Boolean): DNSaveOptions_MarginPartStyle; overload;

  end;

  [DNTypeName('Aspose.Pdf.SaveOptions+MarginPartStyle')]
  DNSaveOptions_MarginPartStyle = interface(DDN.mscorlib.DNObject)
  ['{31A563E5-10D6-325F-A223-7E76C6247F83}']
  { getters & setters } 

    function get_IsAuto: Boolean;
    procedure set_IsAuto(value: Boolean);
    function get_ValueInPoints: Int32;
    procedure set_ValueInPoints(value: Int32);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property IsAuto: Boolean read get_IsAuto write set_IsAuto;
    property ValueInPoints: Int32 read get_ValueInPoints write set_ValueInPoints;
  end;

  TDNSaveOptions_MarginPartStyle = class(TDNGenericImport<DNSaveOptions_MarginPartStyleClass, DNSaveOptions_MarginPartStyle>) end;

  //-------------namespace: Aspose.Pdf----------------
  DNSaveOptions_ResourceSavingInfoClass = interface(DDN.mscorlib.DNObjectClass)
  ['{C210582C-5350-559A-BD51-4A475D3570D9}']
  end;

  [DNTypeName('Aspose.Pdf.SaveOptions+ResourceSavingInfo')]
  DNSaveOptions_ResourceSavingInfo = interface(DDN.mscorlib.DNObject)
  ['{273963CB-4858-3D72-A020-46AAF0A10255}']
  { getters & setters } 

    function get_ResourceType: DNSaveOptions_NodeLevelResourceType;

  { fields getter & setter } 

   function __fakeFieldGet_SupposedFileName: string;
   procedure __fakeFieldSet_SupposedFileName(value: string);
   function __fakeFieldGet_ContentStream: DDN.mscorlib.DNStream;
   procedure __fakeFieldSet_ContentStream(value: DDN.mscorlib.DNStream);
   function __fakeFieldGet_CustomProcessingCancelled: Boolean;
   procedure __fakeFieldSet_CustomProcessingCancelled(value: Boolean);

  { fields } 

   property SupposedFileName: string read __fakeFieldGet_SupposedFileName write __fakeFieldSet_SupposedFileName;
   property ContentStream: DDN.mscorlib.DNStream read __fakeFieldGet_ContentStream write __fakeFieldSet_ContentStream;
   property CustomProcessingCancelled: Boolean read __fakeFieldGet_CustomProcessingCancelled write __fakeFieldSet_CustomProcessingCancelled;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property ResourceType: DNSaveOptions_NodeLevelResourceType read get_ResourceType;
  end;

  TDNSaveOptions_ResourceSavingInfo = class(TDNGenericImport<DNSaveOptions_ResourceSavingInfoClass, DNSaveOptions_ResourceSavingInfo>) end;

  //-------------namespace: Aspose.Pdf----------------
  DNHtmlSaveOptions_HtmlImageSavingInfoClass = interface(DDN.mscorlib.DNObjectClass)
  ['{3007F2C1-342C-578A-9396-7CD59E5C496E}']
  { constructors } 

    {class} function init: DNHtmlSaveOptions_HtmlImageSavingInfo;

  end;

  [DNTypeName('Aspose.Pdf.HtmlSaveOptions+HtmlImageSavingInfo')]
  DNHtmlSaveOptions_HtmlImageSavingInfo = interface(DDN.mscorlib.DNObject)
  ['{6C8C529F-1788-3B3D-A61D-AEED029A0930}']
  { getters & setters } 

    function get_ResourceType: DNSaveOptions_NodeLevelResourceType;

  { fields getter & setter } 

   function __fakeFieldGet_ImageType: DNHtmlSaveOptions_HtmlImageType;
   procedure __fakeFieldSet_ImageType(value: DNHtmlSaveOptions_HtmlImageType);
   function __fakeFieldGet_ParentType: DNHtmlSaveOptions_ImageParentTypes;
   procedure __fakeFieldSet_ParentType(value: DNHtmlSaveOptions_ImageParentTypes);
   function __fakeFieldGet_PdfHostPageNumber: Int32;
   procedure __fakeFieldSet_PdfHostPageNumber(value: Int32);
   function __fakeFieldGet_HtmlHostPageNumber: Int32;
   procedure __fakeFieldSet_HtmlHostPageNumber(value: Int32);
   function __fakeFieldGet_SupposedFileName: string;
   procedure __fakeFieldSet_SupposedFileName(value: string);
   function __fakeFieldGet_ContentStream: DDN.mscorlib.DNStream;
   procedure __fakeFieldSet_ContentStream(value: DDN.mscorlib.DNStream);
   function __fakeFieldGet_CustomProcessingCancelled: Boolean;
   procedure __fakeFieldSet_CustomProcessingCancelled(value: Boolean);

  { fields } 

   property ImageType: DNHtmlSaveOptions_HtmlImageType read __fakeFieldGet_ImageType write __fakeFieldSet_ImageType;
   property ParentType: DNHtmlSaveOptions_ImageParentTypes read __fakeFieldGet_ParentType write __fakeFieldSet_ParentType;
   property PdfHostPageNumber: Int32 read __fakeFieldGet_PdfHostPageNumber write __fakeFieldSet_PdfHostPageNumber;
   property HtmlHostPageNumber: Int32 read __fakeFieldGet_HtmlHostPageNumber write __fakeFieldSet_HtmlHostPageNumber;
   property SupposedFileName: string read __fakeFieldGet_SupposedFileName write __fakeFieldSet_SupposedFileName;
   property ContentStream: DDN.mscorlib.DNStream read __fakeFieldGet_ContentStream write __fakeFieldSet_ContentStream;
   property CustomProcessingCancelled: Boolean read __fakeFieldGet_CustomProcessingCancelled write __fakeFieldSet_CustomProcessingCancelled;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property ResourceType: DNSaveOptions_NodeLevelResourceType read get_ResourceType;
  end;

  TDNHtmlSaveOptions_HtmlImageSavingInfo = class(TDNGenericImport<DNHtmlSaveOptions_HtmlImageSavingInfoClass, DNHtmlSaveOptions_HtmlImageSavingInfo>) end;

  //-------------namespace: Aspose.Pdf----------------
  DNSvgSaveOptions_SvgImageSavingInfoClass = interface(DDN.mscorlib.DNObjectClass)
  ['{5C837BD2-17C5-5E99-A945-7D50C09BC17A}']
  { constructors } 

    {class} function init: DNSvgSaveOptions_SvgImageSavingInfo;

  end;

  [DNTypeName('Aspose.Pdf.SvgSaveOptions+SvgImageSavingInfo')]
  DNSvgSaveOptions_SvgImageSavingInfo = interface(DDN.mscorlib.DNObject)
  ['{B83E961E-BF08-3E4A-A705-3312392B80F2}']
  { getters & setters } 

    function get_ResourceType: DNSaveOptions_NodeLevelResourceType;

  { fields getter & setter } 

   function __fakeFieldGet_ImageType: DNSvgSaveOptions_SvgExternalImageType;
   procedure __fakeFieldSet_ImageType(value: DNSvgSaveOptions_SvgExternalImageType);
   function __fakeFieldGet_SupposedFileName: string;
   procedure __fakeFieldSet_SupposedFileName(value: string);
   function __fakeFieldGet_ContentStream: DDN.mscorlib.DNStream;
   procedure __fakeFieldSet_ContentStream(value: DDN.mscorlib.DNStream);
   function __fakeFieldGet_CustomProcessingCancelled: Boolean;
   procedure __fakeFieldSet_CustomProcessingCancelled(value: Boolean);

  { fields } 

   property ImageType: DNSvgSaveOptions_SvgExternalImageType read __fakeFieldGet_ImageType write __fakeFieldSet_ImageType;
   property SupposedFileName: string read __fakeFieldGet_SupposedFileName write __fakeFieldSet_SupposedFileName;
   property ContentStream: DDN.mscorlib.DNStream read __fakeFieldGet_ContentStream write __fakeFieldSet_ContentStream;
   property CustomProcessingCancelled: Boolean read __fakeFieldGet_CustomProcessingCancelled write __fakeFieldSet_CustomProcessingCancelled;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property ResourceType: DNSaveOptions_NodeLevelResourceType read get_ResourceType;
  end;

  TDNSvgSaveOptions_SvgImageSavingInfo = class(TDNGenericImport<DNSvgSaveOptions_SvgImageSavingInfoClass, DNSvgSaveOptions_SvgImageSavingInfo>) end;

  //-------------namespace: Aspose.Pdf----------------
  DNPdf_StampClass = interface(DDN.mscorlib.DNObjectClass)
  ['{C3E2F329-BCD8-5B77-BB91-9624B5E8C450}']
  end;

  [DNTypeName('Aspose.Pdf.Stamp')]
  DNPdf_Stamp = interface(DDN.mscorlib.DNObject)
  ['{CCDD2242-2AD1-395A-B5C4-187D8DD384AB}']
  { getters & setters } 

    function get_Background: Boolean;
    procedure set_Background(value: Boolean);
    function get_Opacity: Double;
    procedure set_Opacity(value: Double);
    function get_OutlineOpacity: Double;
    procedure set_OutlineOpacity(value: Double);
    function get_OutlineWidth: Double;
    procedure set_OutlineWidth(value: Double);
    function get_Rotate: DNRotation;
    procedure set_Rotate(value: DNRotation);
    function get_XIndent: Double;
    procedure set_XIndent(value: Double);
    function get_YIndent: Double;
    procedure set_YIndent(value: Double);
    function get_HorizontalAlignment: DNHorizontalAlignment;
    procedure set_HorizontalAlignment(value: DNHorizontalAlignment);
    function get_VerticalAlignment: DNVerticalAlignment;
    procedure set_VerticalAlignment(value: DNVerticalAlignment);
    function get_LeftMargin: Double;
    procedure set_LeftMargin(value: Double);
    function get_RightMargin: Double;
    procedure set_RightMargin(value: Double);
    function get_BottomMargin: Double;
    procedure set_BottomMargin(value: Double);
    function get_TopMargin: Double;
    procedure set_TopMargin(value: Double);
    function get_ZoomX: Double;
    procedure set_ZoomX(value: Double);
    function get_Width: Double;
    procedure set_Width(value: Double);
    function get_Height: Double;
    procedure set_Height(value: Double);
    function get_ZoomY: Double;
    procedure set_ZoomY(value: Double);
    function get_Zoom: Double;
    procedure set_Zoom(value: Double);
    function get_RotateAngle: Double;
    procedure set_RotateAngle(value: Double);

  { methods } 

    procedure Put(page: DNPage);
    procedure setStampId(value: Int32);
    function getStampId: Int32;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Background: Boolean read get_Background write set_Background;
    property Opacity: Double read get_Opacity write set_Opacity;
    property OutlineOpacity: Double read get_OutlineOpacity write set_OutlineOpacity;
    property OutlineWidth: Double read get_OutlineWidth write set_OutlineWidth;
    property Rotate: DNRotation read get_Rotate write set_Rotate;
    property XIndent: Double read get_XIndent write set_XIndent;
    property YIndent: Double read get_YIndent write set_YIndent;
    property HorizontalAlignment: DNHorizontalAlignment read get_HorizontalAlignment write set_HorizontalAlignment;
    property VerticalAlignment: DNVerticalAlignment read get_VerticalAlignment write set_VerticalAlignment;
    property LeftMargin: Double read get_LeftMargin write set_LeftMargin;
    property RightMargin: Double read get_RightMargin write set_RightMargin;
    property BottomMargin: Double read get_BottomMargin write set_BottomMargin;
    property TopMargin: Double read get_TopMargin write set_TopMargin;
    property ZoomX: Double read get_ZoomX write set_ZoomX;
    property Width: Double read get_Width write set_Width;
    property Height: Double read get_Height write set_Height;
    property ZoomY: Double read get_ZoomY write set_ZoomY;
    property Zoom: Double read get_Zoom write set_Zoom;
    property RotateAngle: Double read get_RotateAngle write set_RotateAngle;
  end;

  TDNPdf_Stamp = class(TDNGenericImport<DNPdf_StampClass, DNPdf_Stamp>) end;

  //-------------namespace: Aspose.Pdf----------------
  DNImageStampClass = interface(DNPdf_StampClass)
  ['{4926B6B6-654F-5FAA-9036-BED8B4E2F7EB}']
  { constructors } 

    {class} function init(image: DDN.mscorlib.DNStream): DNImageStamp; overload;
    {class} function init(fileName: string): DNImageStamp; overload;

  end;

  [DNTypeName('Aspose.Pdf.ImageStamp')]
  DNImageStamp = interface(DNPdf_Stamp)
  ['{4E859646-0050-3445-B33F-E536F9F80BA0}']
  { getters & setters } 

    function get_Image: DDN.mscorlib.DNStream;
    function get_Width: Double;
    procedure set_Width(value: Double);
    function get_Height: Double;
    procedure set_Height(value: Double);
    function get_Quality: Int32;
    procedure set_Quality(value: Int32);
    function get_Background: Boolean;
    procedure set_Background(value: Boolean);
    function get_Opacity: Double;
    procedure set_Opacity(value: Double);
    function get_OutlineOpacity: Double;
    procedure set_OutlineOpacity(value: Double);
    function get_OutlineWidth: Double;
    procedure set_OutlineWidth(value: Double);
    function get_Rotate: DNRotation;
    procedure set_Rotate(value: DNRotation);
    function get_XIndent: Double;
    procedure set_XIndent(value: Double);
    function get_YIndent: Double;
    procedure set_YIndent(value: Double);
    function get_HorizontalAlignment: DNHorizontalAlignment;
    procedure set_HorizontalAlignment(value: DNHorizontalAlignment);
    function get_VerticalAlignment: DNVerticalAlignment;
    procedure set_VerticalAlignment(value: DNVerticalAlignment);
    function get_LeftMargin: Double;
    procedure set_LeftMargin(value: Double);
    function get_RightMargin: Double;
    procedure set_RightMargin(value: Double);
    function get_BottomMargin: Double;
    procedure set_BottomMargin(value: Double);
    function get_TopMargin: Double;
    procedure set_TopMargin(value: Double);
    function get_ZoomX: Double;
    procedure set_ZoomX(value: Double);
    function get_ZoomY: Double;
    procedure set_ZoomY(value: Double);
    function get_Zoom: Double;
    procedure set_Zoom(value: Double);
    function get_RotateAngle: Double;
    procedure set_RotateAngle(value: Double);

  { methods } 

    procedure Put(page: DNPage);
    procedure setStampId(value: Int32);
    function getStampId: Int32;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Image: DDN.mscorlib.DNStream read get_Image;
    property Width: Double read get_Width write set_Width;
    property Height: Double read get_Height write set_Height;
    property Quality: Int32 read get_Quality write set_Quality;
    property Background: Boolean read get_Background write set_Background;
    property Opacity: Double read get_Opacity write set_Opacity;
    property OutlineOpacity: Double read get_OutlineOpacity write set_OutlineOpacity;
    property OutlineWidth: Double read get_OutlineWidth write set_OutlineWidth;
    property Rotate: DNRotation read get_Rotate write set_Rotate;
    property XIndent: Double read get_XIndent write set_XIndent;
    property YIndent: Double read get_YIndent write set_YIndent;
    property HorizontalAlignment: DNHorizontalAlignment read get_HorizontalAlignment write set_HorizontalAlignment;
    property VerticalAlignment: DNVerticalAlignment read get_VerticalAlignment write set_VerticalAlignment;
    property LeftMargin: Double read get_LeftMargin write set_LeftMargin;
    property RightMargin: Double read get_RightMargin write set_RightMargin;
    property BottomMargin: Double read get_BottomMargin write set_BottomMargin;
    property TopMargin: Double read get_TopMargin write set_TopMargin;
    property ZoomX: Double read get_ZoomX write set_ZoomX;
    property ZoomY: Double read get_ZoomY write set_ZoomY;
    property Zoom: Double read get_Zoom write set_Zoom;
    property RotateAngle: Double read get_RotateAngle write set_RotateAngle;
  end;

  TDNImageStamp = class(TDNGenericImport<DNImageStampClass, DNImageStamp>) end;

  //-------------namespace: Aspose.Pdf----------------
  DNPdfPageStampClass = interface(DNPdf_StampClass)
  ['{5DCE56F9-3C84-511A-BC32-C36FFEC3C41A}']
  { constructors } 

    {class} function init(pdfPage: DNPage): DNPdfPageStamp; overload;
    {class} function init(fileName: string; pageIndex: Int32): DNPdfPageStamp; overload;
    {class} function init(stream: DDN.mscorlib.DNStream; pageIndex: Int32): DNPdfPageStamp; overload;

  end;

  [DNTypeName('Aspose.Pdf.PdfPageStamp')]
  DNPdfPageStamp = interface(DNPdf_Stamp)
  ['{2DBF50F8-3D91-3A7E-92FE-8ADF68E848F8}']
  { getters & setters } 

    function get_PdfPage: DNPage;
    procedure set_PdfPage(value: DNPage);
    function get_Background: Boolean;
    procedure set_Background(value: Boolean);
    function get_Opacity: Double;
    procedure set_Opacity(value: Double);
    function get_OutlineOpacity: Double;
    procedure set_OutlineOpacity(value: Double);
    function get_OutlineWidth: Double;
    procedure set_OutlineWidth(value: Double);
    function get_Rotate: DNRotation;
    procedure set_Rotate(value: DNRotation);
    function get_XIndent: Double;
    procedure set_XIndent(value: Double);
    function get_YIndent: Double;
    procedure set_YIndent(value: Double);
    function get_HorizontalAlignment: DNHorizontalAlignment;
    procedure set_HorizontalAlignment(value: DNHorizontalAlignment);
    function get_VerticalAlignment: DNVerticalAlignment;
    procedure set_VerticalAlignment(value: DNVerticalAlignment);
    function get_LeftMargin: Double;
    procedure set_LeftMargin(value: Double);
    function get_RightMargin: Double;
    procedure set_RightMargin(value: Double);
    function get_BottomMargin: Double;
    procedure set_BottomMargin(value: Double);
    function get_TopMargin: Double;
    procedure set_TopMargin(value: Double);
    function get_ZoomX: Double;
    procedure set_ZoomX(value: Double);
    function get_Width: Double;
    procedure set_Width(value: Double);
    function get_Height: Double;
    procedure set_Height(value: Double);
    function get_ZoomY: Double;
    procedure set_ZoomY(value: Double);
    function get_Zoom: Double;
    procedure set_Zoom(value: Double);
    function get_RotateAngle: Double;
    procedure set_RotateAngle(value: Double);

  { methods } 

    procedure Put(page: DNPage);
    procedure setStampId(value: Int32);
    function getStampId: Int32;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property PdfPage: DNPage read get_PdfPage write set_PdfPage;
    property Background: Boolean read get_Background write set_Background;
    property Opacity: Double read get_Opacity write set_Opacity;
    property OutlineOpacity: Double read get_OutlineOpacity write set_OutlineOpacity;
    property OutlineWidth: Double read get_OutlineWidth write set_OutlineWidth;
    property Rotate: DNRotation read get_Rotate write set_Rotate;
    property XIndent: Double read get_XIndent write set_XIndent;
    property YIndent: Double read get_YIndent write set_YIndent;
    property HorizontalAlignment: DNHorizontalAlignment read get_HorizontalAlignment write set_HorizontalAlignment;
    property VerticalAlignment: DNVerticalAlignment read get_VerticalAlignment write set_VerticalAlignment;
    property LeftMargin: Double read get_LeftMargin write set_LeftMargin;
    property RightMargin: Double read get_RightMargin write set_RightMargin;
    property BottomMargin: Double read get_BottomMargin write set_BottomMargin;
    property TopMargin: Double read get_TopMargin write set_TopMargin;
    property ZoomX: Double read get_ZoomX write set_ZoomX;
    property Width: Double read get_Width write set_Width;
    property Height: Double read get_Height write set_Height;
    property ZoomY: Double read get_ZoomY write set_ZoomY;
    property Zoom: Double read get_Zoom write set_Zoom;
    property RotateAngle: Double read get_RotateAngle write set_RotateAngle;
  end;

  TDNPdfPageStamp = class(TDNGenericImport<DNPdfPageStampClass, DNPdfPageStamp>) end;

  //-------------namespace: Aspose.Pdf----------------
  DNTextStampClass = interface(DNPdf_StampClass)
  ['{28AE69B6-0470-5422-8B47-452848400280}']
  { constructors } 

    {class} function init(value: string): DNTextStamp; overload;
    {class} function init(value: string; textState: DNTextState): DNTextStamp; overload;
    {class} function init(formattedText: DNFormattedText): DNTextStamp; overload;

  end;

  [DNTypeName('Aspose.Pdf.TextStamp')]
  DNTextStamp = interface(DNPdf_Stamp)
  ['{E4285B11-439C-37B4-ACD1-BC3DAC94B0B1}']
  { getters & setters } 

    function get_Draw: Boolean;
    procedure set_Draw(value: Boolean);
    function get_TreatYIndentAsBaseLine: Boolean;
    procedure set_TreatYIndentAsBaseLine(value: Boolean);
    function get_WordWrap: Boolean;
    procedure set_WordWrap(value: Boolean);
    function get_Justify: Boolean;
    procedure set_Justify(value: Boolean);
    function get_Scale: Boolean;
    procedure set_Scale(value: Boolean);
    function get_Value: string;
    procedure set_Value(value: string);
    function get_TextState: DNTextState;
    function get_TextAlignment: DNHorizontalAlignment;
    procedure set_TextAlignment(value: DNHorizontalAlignment);
    function get_Width: Double;
    procedure set_Width(value: Double);
    function get_Height: Double;
    procedure set_Height(value: Double);
    function get_MaxRowWidth: Double;
    procedure set_MaxRowWidth(value: Double);
    function get_Background: Boolean;
    procedure set_Background(value: Boolean);
    function get_Opacity: Double;
    procedure set_Opacity(value: Double);
    function get_OutlineOpacity: Double;
    procedure set_OutlineOpacity(value: Double);
    function get_OutlineWidth: Double;
    procedure set_OutlineWidth(value: Double);
    function get_Rotate: DNRotation;
    procedure set_Rotate(value: DNRotation);
    function get_XIndent: Double;
    procedure set_XIndent(value: Double);
    function get_YIndent: Double;
    procedure set_YIndent(value: Double);
    function get_HorizontalAlignment: DNHorizontalAlignment;
    procedure set_HorizontalAlignment(value: DNHorizontalAlignment);
    function get_VerticalAlignment: DNVerticalAlignment;
    procedure set_VerticalAlignment(value: DNVerticalAlignment);
    function get_LeftMargin: Double;
    procedure set_LeftMargin(value: Double);
    function get_RightMargin: Double;
    procedure set_RightMargin(value: Double);
    function get_BottomMargin: Double;
    procedure set_BottomMargin(value: Double);
    function get_TopMargin: Double;
    procedure set_TopMargin(value: Double);
    function get_ZoomX: Double;
    procedure set_ZoomX(value: Double);
    function get_ZoomY: Double;
    procedure set_ZoomY(value: Double);
    function get_Zoom: Double;
    procedure set_Zoom(value: Double);
    function get_RotateAngle: Double;
    procedure set_RotateAngle(value: Double);

  { methods } 

    procedure Put(page: DNPage);
    procedure setStampId(value: Int32);
    function getStampId: Int32;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Draw: Boolean read get_Draw write set_Draw;
    property TreatYIndentAsBaseLine: Boolean read get_TreatYIndentAsBaseLine write set_TreatYIndentAsBaseLine;
    property WordWrap: Boolean read get_WordWrap write set_WordWrap;
    property Justify: Boolean read get_Justify write set_Justify;
    property Scale: Boolean read get_Scale write set_Scale;
    property Value: string read get_Value write set_Value;
    property TextState: DNTextState read get_TextState;
    property TextAlignment: DNHorizontalAlignment read get_TextAlignment write set_TextAlignment;
    property Width: Double read get_Width write set_Width;
    property Height: Double read get_Height write set_Height;
    property MaxRowWidth: Double read get_MaxRowWidth write set_MaxRowWidth;
    property Background: Boolean read get_Background write set_Background;
    property Opacity: Double read get_Opacity write set_Opacity;
    property OutlineOpacity: Double read get_OutlineOpacity write set_OutlineOpacity;
    property OutlineWidth: Double read get_OutlineWidth write set_OutlineWidth;
    property Rotate: DNRotation read get_Rotate write set_Rotate;
    property XIndent: Double read get_XIndent write set_XIndent;
    property YIndent: Double read get_YIndent write set_YIndent;
    property HorizontalAlignment: DNHorizontalAlignment read get_HorizontalAlignment write set_HorizontalAlignment;
    property VerticalAlignment: DNVerticalAlignment read get_VerticalAlignment write set_VerticalAlignment;
    property LeftMargin: Double read get_LeftMargin write set_LeftMargin;
    property RightMargin: Double read get_RightMargin write set_RightMargin;
    property BottomMargin: Double read get_BottomMargin write set_BottomMargin;
    property TopMargin: Double read get_TopMargin write set_TopMargin;
    property ZoomX: Double read get_ZoomX write set_ZoomX;
    property ZoomY: Double read get_ZoomY write set_ZoomY;
    property Zoom: Double read get_Zoom write set_Zoom;
    property RotateAngle: Double read get_RotateAngle write set_RotateAngle;
  end;

  TDNTextStamp = class(TDNGenericImport<DNTextStampClass, DNTextStamp>) end;

  //-------------namespace: Aspose.Pdf----------------
  DNPageNumberStampClass = interface(DNTextStampClass)
  ['{FD0EDAC1-BBD1-5CEC-8C45-1825871B1FBB}']
  { constructors } 

    {class} function init(format: string): DNPageNumberStamp; overload;
    {class} function init: DNPageNumberStamp; overload;
    {class} function init(formattedText: DNFormattedText): DNPageNumberStamp; overload;

  end;

  [DNTypeName('Aspose.Pdf.PageNumberStamp')]
  DNPageNumberStamp = interface(DNTextStamp)
  ['{92B7B35A-7DEB-3008-BE1A-E8652124CC9C}']
  { getters & setters } 

    function get_Format: string;
    procedure set_Format(value: string);
    function get_StartingNumber: Int32;
    procedure set_StartingNumber(value: Int32);
    function get_NumberingStyle: DNNumberingStyle;
    procedure set_NumberingStyle(value: DNNumberingStyle);
    function get_Draw: Boolean;
    procedure set_Draw(value: Boolean);
    function get_TreatYIndentAsBaseLine: Boolean;
    procedure set_TreatYIndentAsBaseLine(value: Boolean);
    function get_WordWrap: Boolean;
    procedure set_WordWrap(value: Boolean);
    function get_Justify: Boolean;
    procedure set_Justify(value: Boolean);
    function get_Scale: Boolean;
    procedure set_Scale(value: Boolean);
    function get_Value: string;
    procedure set_Value(value: string);
    function get_TextState: DNTextState;
    function get_TextAlignment: DNHorizontalAlignment;
    procedure set_TextAlignment(value: DNHorizontalAlignment);
    function get_Width: Double;
    procedure set_Width(value: Double);
    function get_Height: Double;
    procedure set_Height(value: Double);
    function get_MaxRowWidth: Double;
    procedure set_MaxRowWidth(value: Double);
    function get_Background: Boolean;
    procedure set_Background(value: Boolean);
    function get_Opacity: Double;
    procedure set_Opacity(value: Double);
    function get_OutlineOpacity: Double;
    procedure set_OutlineOpacity(value: Double);
    function get_OutlineWidth: Double;
    procedure set_OutlineWidth(value: Double);
    function get_Rotate: DNRotation;
    procedure set_Rotate(value: DNRotation);
    function get_XIndent: Double;
    procedure set_XIndent(value: Double);
    function get_YIndent: Double;
    procedure set_YIndent(value: Double);
    function get_HorizontalAlignment: DNHorizontalAlignment;
    procedure set_HorizontalAlignment(value: DNHorizontalAlignment);
    function get_VerticalAlignment: DNVerticalAlignment;
    procedure set_VerticalAlignment(value: DNVerticalAlignment);
    function get_LeftMargin: Double;
    procedure set_LeftMargin(value: Double);
    function get_RightMargin: Double;
    procedure set_RightMargin(value: Double);
    function get_BottomMargin: Double;
    procedure set_BottomMargin(value: Double);
    function get_TopMargin: Double;
    procedure set_TopMargin(value: Double);
    function get_ZoomX: Double;
    procedure set_ZoomX(value: Double);
    function get_ZoomY: Double;
    procedure set_ZoomY(value: Double);
    function get_Zoom: Double;
    procedure set_Zoom(value: Double);
    function get_RotateAngle: Double;
    procedure set_RotateAngle(value: Double);

  { methods } 

    procedure Put(page: DNPage);
    procedure setStampId(value: Int32);
    function getStampId: Int32;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Format: string read get_Format write set_Format;
    property StartingNumber: Int32 read get_StartingNumber write set_StartingNumber;
    property NumberingStyle: DNNumberingStyle read get_NumberingStyle write set_NumberingStyle;
    property Draw: Boolean read get_Draw write set_Draw;
    property TreatYIndentAsBaseLine: Boolean read get_TreatYIndentAsBaseLine write set_TreatYIndentAsBaseLine;
    property WordWrap: Boolean read get_WordWrap write set_WordWrap;
    property Justify: Boolean read get_Justify write set_Justify;
    property Scale: Boolean read get_Scale write set_Scale;
    property Value: string read get_Value write set_Value;
    property TextState: DNTextState read get_TextState;
    property TextAlignment: DNHorizontalAlignment read get_TextAlignment write set_TextAlignment;
    property Width: Double read get_Width write set_Width;
    property Height: Double read get_Height write set_Height;
    property MaxRowWidth: Double read get_MaxRowWidth write set_MaxRowWidth;
    property Background: Boolean read get_Background write set_Background;
    property Opacity: Double read get_Opacity write set_Opacity;
    property OutlineOpacity: Double read get_OutlineOpacity write set_OutlineOpacity;
    property OutlineWidth: Double read get_OutlineWidth write set_OutlineWidth;
    property Rotate: DNRotation read get_Rotate write set_Rotate;
    property XIndent: Double read get_XIndent write set_XIndent;
    property YIndent: Double read get_YIndent write set_YIndent;
    property HorizontalAlignment: DNHorizontalAlignment read get_HorizontalAlignment write set_HorizontalAlignment;
    property VerticalAlignment: DNVerticalAlignment read get_VerticalAlignment write set_VerticalAlignment;
    property LeftMargin: Double read get_LeftMargin write set_LeftMargin;
    property RightMargin: Double read get_RightMargin write set_RightMargin;
    property BottomMargin: Double read get_BottomMargin write set_BottomMargin;
    property TopMargin: Double read get_TopMargin write set_TopMargin;
    property ZoomX: Double read get_ZoomX write set_ZoomX;
    property ZoomY: Double read get_ZoomY write set_ZoomY;
    property Zoom: Double read get_Zoom write set_Zoom;
    property RotateAngle: Double read get_RotateAngle write set_RotateAngle;
  end;

  TDNPageNumberStamp = class(TDNGenericImport<DNPageNumberStampClass, DNPageNumberStamp>) end;

  //-------------namespace: Aspose.Pdf.Structure----------------
  DNStructure_ElementClass = interface(DDN.mscorlib.DNObjectClass)
  ['{61B1CCC2-D1B1-5929-88AA-FF9046B475E6}']
  end;

  [DNTypeName('Aspose.Pdf.Structure.Element')]
  DNStructure_Element = interface(DDN.mscorlib.DNObject)
  ['{B5BE5ACE-0972-3925-BEE9-EE2F4C1FC360}']
  { getters & setters } 

    function get_Children: DDN.mscorlib.DNList<DNStructure_Element>;
    function get_Lang: string;
    procedure set_Lang(value: string);
    function get_ActualText: string;
    procedure set_ActualText(value: string);
    function get_Alt: string;
    procedure set_Alt(value: string);
    function get_E: string;
    procedure set_E(value: string);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Children: DDN.mscorlib.DNList<DNStructure_Element> read get_Children;
    property Lang: string read get_Lang write set_Lang;
    property ActualText: string read get_ActualText write set_ActualText;
    property Alt: string read get_Alt write set_Alt;
    property E: string read get_E write set_E;
  end;

  TDNStructure_Element = class(TDNGenericImport<DNStructure_ElementClass, DNStructure_Element>) end;

  //-------------namespace: Aspose.Pdf.Structure----------------
  DNStructure_FigureElementClass = interface(DNStructure_ElementClass)
  ['{EE93F5E2-02C8-5F07-AFCB-FD9383E69C02}']
  end;

  [DNTypeName('Aspose.Pdf.Structure.FigureElement')]
  DNStructure_FigureElement = interface(DNStructure_Element)
  ['{6837ABE7-D516-3431-88EE-CB6DA8CA9134}']
  { getters & setters } 

    function get_Image: DDN.System.Drawing.DNImage;
    function get_Children: DDN.mscorlib.DNList<DNStructure_Element>;
    function get_Lang: string;
    procedure set_Lang(value: string);
    function get_ActualText: string;
    procedure set_ActualText(value: string);
    function get_Alt: string;
    procedure set_Alt(value: string);
    function get_E: string;
    procedure set_E(value: string);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Image: DDN.System.Drawing.DNImage read get_Image;
    property Children: DDN.mscorlib.DNList<DNStructure_Element> read get_Children;
    property Lang: string read get_Lang write set_Lang;
    property ActualText: string read get_ActualText write set_ActualText;
    property Alt: string read get_Alt write set_Alt;
    property E: string read get_E write set_E;
  end;

  TDNStructure_FigureElement = class(TDNGenericImport<DNStructure_FigureElementClass, DNStructure_FigureElement>) end;

  //-------------namespace: Aspose.Pdf.Structure----------------
  DNRootElementClass = interface(DNStructure_ElementClass)
  ['{4E72783D-F270-546B-8E4F-865EE70CAF5B}']
  end;

  [DNTypeName('Aspose.Pdf.Structure.RootElement')]
  DNRootElement = interface(DNStructure_Element)
  ['{F7B66FCD-E6E5-3ACB-9422-ACF1F5D1A6F5}']
  { getters & setters } 

    function get_Children: DDN.mscorlib.DNList<DNStructure_Element>;
    function get_Lang: string;
    procedure set_Lang(value: string);
    function get_ActualText: string;
    procedure set_ActualText(value: string);
    function get_Alt: string;
    procedure set_Alt(value: string);
    function get_E: string;
    procedure set_E(value: string);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Children: DDN.mscorlib.DNList<DNStructure_Element> read get_Children;
    property Lang: string read get_Lang write set_Lang;
    property ActualText: string read get_ActualText write set_ActualText;
    property Alt: string read get_Alt write set_Alt;
    property E: string read get_E write set_E;
  end;

  TDNRootElement = class(TDNGenericImport<DNRootElementClass, DNRootElement>) end;

  //-------------namespace: Aspose.Pdf.Structure----------------
  DNStructElementClass = interface(DNStructure_ElementClass)
  ['{E8F4F080-3C1A-576F-8CF5-B3727D63C49E}']
  end;

  [DNTypeName('Aspose.Pdf.Structure.StructElement')]
  DNStructElement = interface(DNStructure_Element)
  ['{1EE5D457-4B92-3E30-B467-1565FED123AD}']
  { getters & setters } 

    function get_Children: DDN.mscorlib.DNList<DNStructure_Element>;
    function get_Lang: string;
    procedure set_Lang(value: string);
    function get_ActualText: string;
    procedure set_ActualText(value: string);
    function get_Alt: string;
    procedure set_Alt(value: string);
    function get_E: string;
    procedure set_E(value: string);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Children: DDN.mscorlib.DNList<DNStructure_Element> read get_Children;
    property Lang: string read get_Lang write set_Lang;
    property ActualText: string read get_ActualText write set_ActualText;
    property Alt: string read get_Alt write set_Alt;
    property E: string read get_E write set_E;
  end;

  TDNStructElement = class(TDNGenericImport<DNStructElementClass, DNStructElement>) end;

  //-------------namespace: Aspose.Pdf.Structure----------------
  DNTextElementClass = interface(DNStructure_ElementClass)
  ['{881FB2D7-B8DA-5E77-BCEF-BC4489B7FC2B}']
  end;

  [DNTypeName('Aspose.Pdf.Structure.TextElement')]
  DNTextElement = interface(DNStructure_Element)
  ['{87F4E1E5-E949-36FF-8596-CB352478EEAF}']
  { getters & setters } 

    function get_Text: string;
    function get_Children: DDN.mscorlib.DNList<DNStructure_Element>;
    function get_Lang: string;
    procedure set_Lang(value: string);
    function get_ActualText: string;
    procedure set_ActualText(value: string);
    function get_Alt: string;
    procedure set_Alt(value: string);
    function get_E: string;
    procedure set_E(value: string);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Text: string read get_Text;
    property Children: DDN.mscorlib.DNList<DNStructure_Element> read get_Children;
    property Lang: string read get_Lang write set_Lang;
    property ActualText: string read get_ActualText write set_ActualText;
    property Alt: string read get_Alt write set_Alt;
    property E: string read get_E write set_E;
  end;

  TDNTextElement = class(TDNGenericImport<DNTextElementClass, DNTextElement>) end;

  //-------------namespace: Aspose.Pdf.Text----------------
  DNAbsorbedCellClass = interface(DNObjectClass)
  ['{8472AB7B-1E68-5C37-A939-80B6CE74EFA3}']
  end;

  [DNTypeName('Aspose.Pdf.Text.AbsorbedCell')]
  DNAbsorbedCell = interface(DNITableElement)
  ['{0BBCE514-E6E9-36CA-905E-B765B5F25314}']
  { getters & setters } 

    function get_TextFragments: DNTextFragmentCollection;
    function get_Rectangle: DNPdf_Rectangle;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property TextFragments: DNTextFragmentCollection read get_TextFragments;
    property Rectangle: DNPdf_Rectangle read get_Rectangle;
  end;

  TDNAbsorbedCell = class(TDNGenericImport<DNAbsorbedCellClass, DNAbsorbedCell>) end;

  //-------------namespace: Aspose.Pdf.Text----------------
  DNAbsorbedRowClass = interface(DNObjectClass)
  ['{7CE8435B-C147-5F56-8CCA-3298D1526082}']
  end;

  [DNTypeName('Aspose.Pdf.Text.AbsorbedRow')]
  DNAbsorbedRow = interface(DNITableElement)
  ['{4E1963D2-6EDE-3734-9E05-0222E04C45B3}']
  { getters & setters } 

    function get_CellList: DDN.mscorlib.DNIList<DNAbsorbedCell>;
    function get_Rectangle: DNPdf_Rectangle;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property CellList: DDN.mscorlib.DNIList<DNAbsorbedCell> read get_CellList;
    property Rectangle: DNPdf_Rectangle read get_Rectangle;
  end;

  TDNAbsorbedRow = class(TDNGenericImport<DNAbsorbedRowClass, DNAbsorbedRow>) end;

  //-------------namespace: Aspose.Pdf.Text----------------
  DNAbsorbedTableClass = interface(DNObjectClass)
  ['{6D69585D-54D6-5C00-A237-6F4493558FD2}']
  end;

  [DNTypeName('Aspose.Pdf.Text.AbsorbedTable')]
  DNAbsorbedTable = interface(DNITableElement)
  ['{EF663D82-8170-38D7-9613-4049492B85AC}']
  { getters & setters } 

    function get_RowList: DDN.mscorlib.DNIList<DNAbsorbedRow>;
    function get_Rectangle: DNPdf_Rectangle;
    function get_PageNum: Int32;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property RowList: DDN.mscorlib.DNIList<DNAbsorbedRow> read get_RowList;
    property Rectangle: DNPdf_Rectangle read get_Rectangle;
    property PageNum: Int32 read get_PageNum;
  end;

  TDNAbsorbedTable = class(TDNGenericImport<DNAbsorbedTableClass, DNAbsorbedTable>) end;

  //-------------namespace: Aspose.Pdf.Text----------------
  DNCharInfoClass = interface(DDN.mscorlib.DNObjectClass)
  ['{D7FAA772-F0E0-5B4E-9AF7-B6F2F07F0A5D}']
  end;

  [DNTypeName('Aspose.Pdf.Text.CharInfo')]
  DNCharInfo = interface(DDN.mscorlib.DNObject)
  ['{9D20AB67-8B0C-38EA-A63B-2F749A457366}']
  { getters & setters } 

    function get_Position: DNPosition;
    function get_Rectangle: DNPdf_Rectangle;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Position: DNPosition read get_Position;
    property Rectangle: DNPdf_Rectangle read get_Rectangle;
  end;

  TDNCharInfo = class(TDNGenericImport<DNCharInfoClass, DNCharInfo>) end;

  //-------------namespace: Aspose.Pdf.Text----------------
  DNCharInfoCollectionClass = interface(DDN.mscorlib.DNObjectClass)
  ['{FE8D7F97-A861-5822-8C17-BFBEC8014D54}']
  end;

  [DNTypeName('Aspose.Pdf.Text.CharInfoCollection')]
  DNCharInfoCollection = interface(DDN.mscorlib.DNObject)
  ['{E1721B7C-5443-360D-A189-A59430AC7F11}']
  { getters & setters } 

    function get_Count: Int32;
    function get_SyncRoot: DDN.mscorlib.DNObject;
    function get_IsSynchronized: Boolean;
    function get_IsReadOnly: Boolean;
    function get_Item(index: Int32): DNCharInfo;

  { methods } 

    function GetEnumerator: DDN.mscorlib.DNIEnumerator<DNCharInfo>;
    procedure CopyTo(&array: TArray<DNCharInfo>; index: Int32);
    function &Contains(item: DNCharInfo): Boolean;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Count: Int32 read get_Count;
    property SyncRoot: DDN.mscorlib.DNObject read get_SyncRoot;
    property IsSynchronized: Boolean read get_IsSynchronized;
    property IsReadOnly: Boolean read get_IsReadOnly;
    property Item[index: Int32]: DNCharInfo read get_Item; default;
  end;

  TDNCharInfoCollection = class(TDNGenericImport<DNCharInfoCollectionClass, DNCharInfoCollection>) end;

  //-------------namespace: Aspose.Pdf.Text----------------
  DNCustomFontSubstitutionBase_OriginalFontSpecificationClass = interface(DDN.mscorlib.DNObjectClass)
  ['{C11ECA1E-4011-57FE-BD67-110B46E824EB}']
  end;

  [DNTypeName('Aspose.Pdf.Text.CustomFontSubstitutionBase+OriginalFontSpecification')]
  DNCustomFontSubstitutionBase_OriginalFontSpecification = interface(DDN.mscorlib.DNObject)
  ['{68370092-BD9F-3A2E-A24E-875FA50B618E}']
  { getters & setters } 

    function get_OriginalFontName: string;
    function get_IsEmbedded: Boolean;
    function get_IsSubstitutionUnavoidable: Boolean;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property OriginalFontName: string read get_OriginalFontName;
    property IsEmbedded: Boolean read get_IsEmbedded;
    property IsSubstitutionUnavoidable: Boolean read get_IsSubstitutionUnavoidable;
  end;

  TDNCustomFontSubstitutionBase_OriginalFontSpecification = class(TDNGenericImport<DNCustomFontSubstitutionBase_OriginalFontSpecificationClass, DNCustomFontSubstitutionBase_OriginalFontSpecification>) end;

  //-------------namespace: Aspose.Pdf.Text----------------
  DNFontClass = interface(DDN.mscorlib.DNObjectClass)
  ['{6CEB7DD4-2AEC-591E-B64A-AC1B61271DD4}']
  end;

  [DNTypeName('Aspose.Pdf.Text.Font')]
  DNFont = interface(DDN.mscorlib.DNObject)
  ['{030DD184-5EE9-35D9-89AC-7B12FA549A8F}']
  { getters & setters } 

    function get_FontName: string;
    function get_DecodedFontName: string;
    function get_BaseFont: string;
    function get_IsEmbedded: Boolean;
    procedure set_IsEmbedded(value: Boolean);
    function get_IsSubset: Boolean;
    procedure set_IsSubset(value: Boolean);
    function get_IsAccessible: Boolean;
    function get_FontOptions: DNIFontOptions;

  { methods } 

    function GetLastFontEmbeddingError: string;
    procedure Save(stream: DDN.mscorlib.DNStream);
    function MeasureString(str: string; fontSize: Single): Double;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property FontName: string read get_FontName;
    property DecodedFontName: string read get_DecodedFontName;
    property BaseFont: string read get_BaseFont;
    property IsEmbedded: Boolean read get_IsEmbedded write set_IsEmbedded;
    property IsSubset: Boolean read get_IsSubset write set_IsSubset;
    property IsAccessible: Boolean read get_IsAccessible;
    property FontOptions: DNIFontOptions read get_FontOptions;
  end;

  TDNFont = class(TDNGenericImport<DNFontClass, DNFont>) end;

  //-------------namespace: Aspose.Pdf.Text----------------
  DNFontAbsorberClass = interface(DDN.mscorlib.DNObjectClass)
  ['{291F11A4-DC9F-5533-AED5-F979895BEE85}']
  { constructors } 

    {class} function init: DNFontAbsorber;

  end;

  [DNTypeName('Aspose.Pdf.Text.FontAbsorber')]
  DNFontAbsorber = interface(DDN.mscorlib.DNObject)
  ['{458D059C-B912-3D93-B822-991B8BCEB5B9}']
  { getters & setters } 

    function get_Fonts: DNFontCollection;

  { methods } 

    procedure Visit(pdf: DNDocument; startPage: Int32; pageCount: Int32); overload;
    procedure Visit(pdf: DNDocument); overload;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Fonts: DNFontCollection read get_Fonts;
  end;

  TDNFontAbsorber = class(TDNGenericImport<DNFontAbsorberClass, DNFontAbsorber>) end;

  //-------------namespace: Aspose.Pdf.Text----------------
  DNFontCollectionClass = interface(DDN.mscorlib.DNObjectClass)
  ['{B6CAB9FC-E848-59EE-9D1B-AD95368E19B7}']
  end;

  [DNTypeName('Aspose.Pdf.Text.FontCollection')]
  DNFontCollection = interface(DDN.mscorlib.DNObject)
  ['{250B2CBF-6B6B-3648-8B19-5E3CC5A945B8}']
  { getters & setters } 

    function get_Count: Int32;
    function get_SyncRoot: DDN.mscorlib.DNObject;
    function get_IsSynchronized: Boolean;
    function get_IsReadOnly: Boolean;
    function get_Item(index: Int32): DNFont; overload;
    function get_Item(name: string): DNFont; overload;

  { methods } 

    function GetEnumerator: DDN.mscorlib.DNIEnumerator<DNFont>;
    procedure CopyTo(&array: TArray<DNFont>; index: Int32);
    procedure Add(newFont: DNFont; out resName: string);
    function &Contains(name: string): Boolean; overload;
    function &Contains(item: DNFont): Boolean; overload;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Count: Int32 read get_Count;
    property SyncRoot: DDN.mscorlib.DNObject read get_SyncRoot;
    property IsSynchronized: Boolean read get_IsSynchronized;
    property IsReadOnly: Boolean read get_IsReadOnly;
    property Item[index: Int32]: DNFont read get_Item; default;
    property Item[name: string]: DNFont read get_Item; default;
  end;

  TDNFontCollection = class(TDNGenericImport<DNFontCollectionClass, DNFontCollection>) end;

  //-------------namespace: Aspose.Pdf.Text----------------
  DNFontRepositoryClass = interface(DDN.mscorlib.DNObjectClass)
  ['{4B6462A9-5FE3-5DD4-A907-7A2361607B93}']
  { static getter & setter } 

    {class} function get_Substitutions: DNFontSubstitutionCollection;
    {class} function get_Sources: DNFontSourceCollection;

  { constructors } 

    {class} function init: DNFontRepository;

  { static methods } 

    {class} function FindFont(fontName: string): DNFont; overload;
    {class} function FindFont(fontName: string; ignoreCase: Boolean): DNFont; overload;
    {class} function FindFont(fontFamilyName: string; stl: DNFontStyles): DNFont; overload;
    {class} function FindFont(fontFamilyName: string; stl: DNFontStyles; ignoreCase: Boolean): DNFont; overload;
    {class} function OpenFont(fontStream: DDN.mscorlib.DNStream; fontType: DNFontTypes): DNFont; overload;
    {class} function OpenFont(fontFilePath: string): DNFont; overload;
    {class} function OpenFont(fontFilePath: string; metricsFilePath: string): DNFont; overload;
    {class} procedure LoadFonts;
    {class} procedure ReloadFonts;

  { static propertys } 

    {class} property Substitutions: DNFontSubstitutionCollection read get_Substitutions;
    {class} property Sources: DNFontSourceCollection read get_Sources;
  end;

  [DNTypeName('Aspose.Pdf.Text.FontRepository')]
  DNFontRepository = interface(DDN.mscorlib.DNObject)
  ['{45337CF7-F0C8-386C-ACCC-6B78DCCB4BEC}']
  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNFontRepository = class(TDNGenericImport<DNFontRepositoryClass, DNFontRepository>) end;

  //-------------namespace: Aspose.Pdf.Text----------------
  DNFontSourceClass = interface(DDN.mscorlib.DNObjectClass)
  ['{BAF908C1-E573-54A4-A76A-56925AB8039F}']
  end;

  [DNTypeName('Aspose.Pdf.Text.FontSource')]
  DNFontSource = interface(DDN.mscorlib.DNObject)
  ['{7D93AFB5-33AD-39A8-90CC-941921AA1F29}']
  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNFontSource = class(TDNGenericImport<DNFontSourceClass, DNFontSource>) end;

  //-------------namespace: Aspose.Pdf.Text----------------
  DNFileFontSourceClass = interface(DNFontSourceClass)
  ['{C8F76937-7FB6-588C-8A41-FA05AE525DC9}']
  { constructors } 

    {class} function init(filePath: string): DNFileFontSource;

  end;

  [DNTypeName('Aspose.Pdf.Text.FileFontSource')]
  DNFileFontSource = interface(DNFontSource)
  ['{9922D560-22B6-3692-B430-BA19634C0577}']
  { getters & setters } 

    function get_FilePath: string;
    procedure set_FilePath(value: string);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property FilePath: string read get_FilePath write set_FilePath;
  end;

  TDNFileFontSource = class(TDNGenericImport<DNFileFontSourceClass, DNFileFontSource>) end;

  //-------------namespace: Aspose.Pdf.Text----------------
  DNFolderFontSourceClass = interface(DNFontSourceClass)
  ['{3774711F-8CF8-5A5F-AD13-9CA984A5CC6D}']
  { constructors } 

    {class} function init(folderPath: string): DNFolderFontSource;

  end;

  [DNTypeName('Aspose.Pdf.Text.FolderFontSource')]
  DNFolderFontSource = interface(DNFontSource)
  ['{439AF7CE-357C-3EA4-8D79-E9A05F32198B}']
  { getters & setters } 

    function get_FolderPath: string;
    procedure set_FolderPath(value: string);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property FolderPath: string read get_FolderPath write set_FolderPath;
  end;

  TDNFolderFontSource = class(TDNGenericImport<DNFolderFontSourceClass, DNFolderFontSource>) end;

  //-------------namespace: Aspose.Pdf.Text----------------
  DNMemoryFontSourceClass = interface(DNFontSourceClass)
  ['{DD63D585-10AB-5578-947B-23AF6276414A}']
  { constructors } 

    {class} function init(fontBytes: TArray<Byte>): DNMemoryFontSource;

  end;

  [DNTypeName('Aspose.Pdf.Text.MemoryFontSource')]
  DNMemoryFontSource = interface(DNFontSource)
  ['{F984D74F-C6DD-3262-9614-3999123EECDB}']
  { getters & setters } 

    function get_FontBytes: TArray<Byte>;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    procedure Dispose;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property FontBytes: TArray<Byte> read get_FontBytes;
  end;

  TDNMemoryFontSource = class(TDNGenericImport<DNMemoryFontSourceClass, DNMemoryFontSource>) end;

  //-------------namespace: Aspose.Pdf.Text----------------
  DNSystemFontSourceClass = interface(DNFontSourceClass)
  ['{8C39868D-73E2-5869-BFE4-87AD651DCA54}']
  { constructors } 

    {class} function init: DNSystemFontSource;

  end;

  [DNTypeName('Aspose.Pdf.Text.SystemFontSource')]
  DNSystemFontSource = interface(DNFontSource)
  ['{BF3B3AE0-7D41-3752-912D-BA0BA334F42B}']
  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNSystemFontSource = class(TDNGenericImport<DNSystemFontSourceClass, DNSystemFontSource>) end;

  //-------------namespace: Aspose.Pdf.Text----------------
  DNFontSourceCollectionClass = interface(DDN.mscorlib.DNObjectClass)
  ['{A4FCC554-09AA-5E93-9E3B-63D0CBA9C481}']
  end;

  [DNTypeName('Aspose.Pdf.Text.FontSourceCollection')]
  DNFontSourceCollection = interface(DDN.mscorlib.DNObject)
  ['{2D347C4F-34E7-38DB-A0CC-B09E0B9CFF7C}']
  { getters & setters } 

    function get_Count: Int32;
    function get_SyncRoot: DDN.mscorlib.DNObject;
    function get_IsSynchronized: Boolean;
    function get_Item(index: Int32): DNFontSource;

  { methods } 

    function GetEnumerator: DDN.mscorlib.DNIEnumerator<DNFontSource>;
    procedure CopyTo(&array: TArray<DNFontSource>; index: Int32);
    procedure Delete(fontSource: DNFontSource);
    function &Contains(item: DNFontSource): Boolean;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Count: Int32 read get_Count;
    property SyncRoot: DDN.mscorlib.DNObject read get_SyncRoot;
    property IsSynchronized: Boolean read get_IsSynchronized;
    property Item[index: Int32]: DNFontSource read get_Item; default;
  end;

  TDNFontSourceCollection = class(TDNGenericImport<DNFontSourceCollectionClass, DNFontSourceCollection>) end;

  //-------------namespace: Aspose.Pdf.Text----------------
  DNFontSubstitutionClass = interface(DDN.mscorlib.DNObjectClass)
  ['{03519108-CDC1-5640-B4AD-82ACC8FAFF22}']
  end;

  [DNTypeName('Aspose.Pdf.Text.FontSubstitution')]
  DNFontSubstitution = interface(DDN.mscorlib.DNObject)
  ['{65FDB15A-49DC-3CA5-943C-FE476A4E3BDE}']
  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNFontSubstitution = class(TDNGenericImport<DNFontSubstitutionClass, DNFontSubstitution>) end;

  //-------------namespace: Aspose.Pdf.Text----------------
  DNCustomFontSubstitutionBaseClass = interface(DNFontSubstitutionClass)
  ['{5FE06D71-BCD5-52F6-A716-61BF1DB92D1C}']
  { constructors } 

    {class} function init: DNCustomFontSubstitutionBase;

  end;

  [DNTypeName('Aspose.Pdf.Text.CustomFontSubstitutionBase')]
  DNCustomFontSubstitutionBase = interface(DNFontSubstitution)
  ['{AC6DA9B4-FD5F-360A-B9D1-430BACB2DFD9}']
  { methods } 

    function TrySubstitute(originalFontSpecification: DNCustomFontSubstitutionBase_OriginalFontSpecification; out substitutionFont: DNFont): Boolean;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNCustomFontSubstitutionBase = class(TDNGenericImport<DNCustomFontSubstitutionBaseClass, DNCustomFontSubstitutionBase>) end;

  //-------------namespace: Aspose.Pdf.Text----------------
  DNSimpleFontSubstitutionClass = interface(DNFontSubstitutionClass)
  ['{EFFA0182-EC59-51F8-B5F6-E73BF5AC90B2}']
  { constructors } 

    {class} function init(originalFontName: string; substitutionFontName: string; isForcedBySaveOption: Boolean): DNSimpleFontSubstitution;

  end;

  [DNTypeName('Aspose.Pdf.Text.SimpleFontSubstitution')]
  DNSimpleFontSubstitution = interface(DNFontSubstitution)
  ['{EDF74800-496A-3870-9030-CAB085E41003}']
  { getters & setters } 

    function get_OriginalFontName: string;
    function get_SubstitutionFontName: string;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property OriginalFontName: string read get_OriginalFontName;
    property SubstitutionFontName: string read get_SubstitutionFontName;
  end;

  TDNSimpleFontSubstitution = class(TDNGenericImport<DNSimpleFontSubstitutionClass, DNSimpleFontSubstitution>) end;

  //-------------namespace: Aspose.Pdf.Text----------------
  DNSystemFontsSubstitutionClass = interface(DNFontSubstitutionClass)
  ['{6120DB48-B6DF-5269-ACB8-467F90DAC799}']
  { constructors } 

    {class} function init(fontCategories: DNSubstitutionFontCategories): DNSystemFontsSubstitution;

  end;

  [DNTypeName('Aspose.Pdf.Text.SystemFontsSubstitution')]
  DNSystemFontsSubstitution = interface(DNFontSubstitution)
  ['{288E3831-34F4-3254-8065-28D8E718B865}']
  { getters & setters } 

    function get_FontCategories: DNSubstitutionFontCategories;
    procedure set_FontCategories(value: DNSubstitutionFontCategories);
    function get_DefaultFont: DNFont;
    procedure set_DefaultFont(value: DNFont);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property FontCategories: DNSubstitutionFontCategories read get_FontCategories write set_FontCategories;
    property DefaultFont: DNFont read get_DefaultFont write set_DefaultFont;
  end;

  TDNSystemFontsSubstitution = class(TDNGenericImport<DNSystemFontsSubstitutionClass, DNSystemFontsSubstitution>) end;

  //-------------namespace: Aspose.Pdf.Text----------------
  DNFontSubstitutionCollectionClass = interface(DDN.mscorlib.DNObjectClass)
  ['{FE650AE3-95BD-5B4E-A565-CCD64B6EDE05}']
  end;

  [DNTypeName('Aspose.Pdf.Text.FontSubstitutionCollection')]
  DNFontSubstitutionCollection = interface(DDN.mscorlib.DNObject)
  ['{B4D9C0FE-2AC3-3DEA-B10A-5261095AC7DF}']
  { getters & setters } 

    function get_Count: Int32;
    function get_SyncRoot: DDN.mscorlib.DNObject;
    function get_IsSynchronized: Boolean;
    function get_Item(index: Int32): DNFontSubstitution;

  { methods } 

    function GetEnumerator: DDN.mscorlib.DNIEnumerator<DNFontSubstitution>;
    procedure CopyTo(&array: TArray<DNFontSubstitution>; index: Int32);
    function &Contains(item: DNFontSubstitution): Boolean;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Count: Int32 read get_Count;
    property SyncRoot: DDN.mscorlib.DNObject read get_SyncRoot;
    property IsSynchronized: Boolean read get_IsSynchronized;
    property Item[index: Int32]: DNFontSubstitution read get_Item; default;
  end;

  TDNFontSubstitutionCollection = class(TDNGenericImport<DNFontSubstitutionCollectionClass, DNFontSubstitutionCollection>) end;

  //-------------namespace: Aspose.Pdf.Text----------------
  DNMarkupParagraphClass = interface(DDN.mscorlib.DNObjectClass)
  ['{4483EDA9-48F8-5E3C-A103-E7A31B036F2A}']
  end;

  [DNTypeName('Aspose.Pdf.Text.MarkupParagraph')]
  DNMarkupParagraph = interface(DDN.mscorlib.DNObject)
  ['{63E8E8C3-BE69-3DAC-BCD6-8B33BD7A9ECF}']
  { getters & setters } 

    function get_Points: TArray<DNPoint>;
    function get_SecondaryPoints: DDN.mscorlib.DNList<TArray<DNPoint>>;
    function get_ContinuationPageNumbers: DDN.mscorlib.DNList<Int32>;
    function get_Fragments: DDN.mscorlib.DNList<DNTextFragment>;
    function get_Lines: DDN.mscorlib.DNList<DDN.mscorlib.DNList<DNTextFragment>>;
    function get_Text: string;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Points: TArray<DNPoint> read get_Points;
    property SecondaryPoints: DDN.mscorlib.DNList<TArray<DNPoint>> read get_SecondaryPoints;
    property ContinuationPageNumbers: DDN.mscorlib.DNList<Int32> read get_ContinuationPageNumbers;
    property Fragments: DDN.mscorlib.DNList<DNTextFragment> read get_Fragments;
    property Lines: DDN.mscorlib.DNList<DDN.mscorlib.DNList<DNTextFragment>> read get_Lines;
    property Text: string read get_Text;
  end;

  TDNMarkupParagraph = class(TDNGenericImport<DNMarkupParagraphClass, DNMarkupParagraph>) end;

  //-------------namespace: Aspose.Pdf.Text----------------
  DNMarkupSectionClass = interface(DDN.mscorlib.DNObjectClass)
  ['{7DFD5BBA-9766-5C8C-9862-7203716DC0D2}']
  end;

  [DNTypeName('Aspose.Pdf.Text.MarkupSection')]
  DNMarkupSection = interface(DDN.mscorlib.DNObject)
  ['{E1EF322D-A204-3EB3-A2AE-8C058EB11B94}']
  { getters & setters } 

    function get_Rectangle: DNPdf_Rectangle;
    function get_Fragments: DDN.mscorlib.DNList<DNTextFragment>;
    function get_Paragraphs: DDN.mscorlib.DNList<DNMarkupParagraph>;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Rectangle: DNPdf_Rectangle read get_Rectangle;
    property Fragments: DDN.mscorlib.DNList<DNTextFragment> read get_Fragments;
    property Paragraphs: DDN.mscorlib.DNList<DNMarkupParagraph> read get_Paragraphs;
  end;

  TDNMarkupSection = class(TDNGenericImport<DNMarkupSectionClass, DNMarkupSection>) end;

  //-------------namespace: Aspose.Pdf.Text----------------
  DNPageMarkupClass = interface(DDN.mscorlib.DNObjectClass)
  ['{37D9F0CC-453F-526A-8A3F-C0A973BDEB27}']
  end;

  [DNTypeName('Aspose.Pdf.Text.PageMarkup')]
  DNPageMarkup = interface(DDN.mscorlib.DNObject)
  ['{53A55FA5-EB5B-33F7-BF4E-BB1CC0947891}']
  { getters & setters } 

    function get_Number: Int32;
    function get_Rectangle: DNPdf_Rectangle;
    function get_Sections: DDN.mscorlib.DNList<DNMarkupSection>;
    function get_Paragraphs: DDN.mscorlib.DNList<DNMarkupParagraph>;
    function get_TextFragments: DDN.mscorlib.DNList<DNTextFragment>;
    function get_IsMulticolumnParagraphsAllowed: Boolean;
    procedure set_IsMulticolumnParagraphsAllowed(value: Boolean);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Number: Int32 read get_Number;
    property Rectangle: DNPdf_Rectangle read get_Rectangle;
    property Sections: DDN.mscorlib.DNList<DNMarkupSection> read get_Sections;
    property Paragraphs: DDN.mscorlib.DNList<DNMarkupParagraph> read get_Paragraphs;
    property TextFragments: DDN.mscorlib.DNList<DNTextFragment> read get_TextFragments;
    property IsMulticolumnParagraphsAllowed: Boolean read get_IsMulticolumnParagraphsAllowed write set_IsMulticolumnParagraphsAllowed;
  end;

  TDNPageMarkup = class(TDNGenericImport<DNPageMarkupClass, DNPageMarkup>) end;

  //-------------namespace: Aspose.Pdf.Text----------------
  DNParagraphAbsorberClass = interface(DDN.mscorlib.DNObjectClass)
  ['{EDED4352-83F1-5A09-B015-E250FD29044A}']
  { constructors } 

    {class} function init: DNParagraphAbsorber; overload;
    {class} function init(sectionsSearchDepth: Int32): DNParagraphAbsorber; overload;

  end;

  [DNTypeName('Aspose.Pdf.Text.ParagraphAbsorber')]
  DNParagraphAbsorber = interface(DDN.mscorlib.DNObject)
  ['{D54202A6-C7A6-3B0F-9F1A-EA71876ED549}']
  { getters & setters } 

    function get_PageMarkups: DDN.mscorlib.DNList<DNPageMarkup>;
    function get_SectionsSearchDepth: Int32;
    procedure set_SectionsSearchDepth(value: Int32);
    function get_IsMulticolumnParagraphsAllowed: Boolean;
    procedure set_IsMulticolumnParagraphsAllowed(value: Boolean);

  { methods } 

    procedure Visit(doc: DNDocument); overload;
    procedure Visit(page: DNPage); overload;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property PageMarkups: DDN.mscorlib.DNList<DNPageMarkup> read get_PageMarkups;
    property SectionsSearchDepth: Int32 read get_SectionsSearchDepth write set_SectionsSearchDepth;
    property IsMulticolumnParagraphsAllowed: Boolean read get_IsMulticolumnParagraphsAllowed write set_IsMulticolumnParagraphsAllowed;
  end;

  TDNParagraphAbsorber = class(TDNGenericImport<DNParagraphAbsorberClass, DNParagraphAbsorber>) end;

  //-------------namespace: Aspose.Pdf.Text----------------
  DNPositionClass = interface(DDN.mscorlib.DNObjectClass)
  ['{E5F90BEC-E52E-5370-AD6E-43B87D3B52DF}']
  { constructors } 

    {class} function init(xIndent: Double; yIndent: Double): DNPosition;

  end;

  [DNTypeName('Aspose.Pdf.Text.Position')]
  DNPosition = interface(DDN.mscorlib.DNObject)
  ['{367B214A-3BAF-3DEC-BC85-9E4F9860A91D}']
  { getters & setters } 

    function get_XIndent: Double;
    procedure set_XIndent(value: Double);
    function get_YIndent: Double;
    procedure set_YIndent(value: Double);

  { methods } 

    function ToString: string;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    property XIndent: Double read get_XIndent write set_XIndent;
    property YIndent: Double read get_YIndent write set_YIndent;
  end;

  TDNPosition = class(TDNGenericImport<DNPositionClass, DNPosition>) end;

  //-------------namespace: Aspose.Pdf.Text----------------
  DNTableAbsorberClass = interface(DDN.mscorlib.DNObjectClass)
  ['{163099E5-146F-5DD6-957C-38EE3EF9A7EB}']
  { constructors } 

    {class} function init(textSearchOptions: DNTextSearchOptions): DNTableAbsorber; overload;
    {class} function init: DNTableAbsorber; overload;

  end;

  [DNTypeName('Aspose.Pdf.Text.TableAbsorber')]
  DNTableAbsorber = interface(DDN.mscorlib.DNObject)
  ['{ED143C28-62FE-34D7-945C-9465481ABA77}']
  { getters & setters } 

    function get_TextSearchOptions: DNTextSearchOptions;
    procedure set_TextSearchOptions(value: DNTextSearchOptions);
    function get_TableList: DDN.mscorlib.DNIList<DNAbsorbedTable>;

  { methods } 

    procedure Visit(page: DNPage);
    procedure Remove(table: DNAbsorbedTable);
    procedure Replace(page: DNPage; oldTable: DNAbsorbedTable; newTable: DNTable);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property TextSearchOptions: DNTextSearchOptions read get_TextSearchOptions write set_TextSearchOptions;
    property TableList: DDN.mscorlib.DNIList<DNAbsorbedTable> read get_TableList;
  end;

  TDNTableAbsorber = class(TDNGenericImport<DNTableAbsorberClass, DNTableAbsorber>) end;

  //-------------namespace: Aspose.Pdf.Text----------------
  DNTabStopClass = interface(DDN.mscorlib.DNObjectClass)
  ['{583D94B5-54DF-5AC0-BBD8-8A3BAB6A864F}']
  { constructors } 

    {class} function init: DNTabStop; overload;
    {class} function init(position: Single): DNTabStop; overload;

  end;

  [DNTypeName('Aspose.Pdf.Text.TabStop')]
  DNTabStop = interface(DDN.mscorlib.DNObject)
  ['{B03B19D6-B6C2-31A3-9371-00CA3D5652AE}']
  { getters & setters } 

    function get_Position: Single;
    procedure set_Position(value: Single);
    function get_LeaderType: DNTabLeaderType;
    procedure set_LeaderType(value: DNTabLeaderType);
    function get_AlignmentType: DNTabAlignmentType;
    procedure set_AlignmentType(value: DNTabAlignmentType);
    function get_IsReadOnly: Boolean;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Position: Single read get_Position write set_Position;
    property LeaderType: DNTabLeaderType read get_LeaderType write set_LeaderType;
    property AlignmentType: DNTabAlignmentType read get_AlignmentType write set_AlignmentType;
    property IsReadOnly: Boolean read get_IsReadOnly;
  end;

  TDNTabStop = class(TDNGenericImport<DNTabStopClass, DNTabStop>) end;

  //-------------namespace: Aspose.Pdf.Text----------------
  DNTabStopsClass = interface(DNObjectClass)
  ['{4B9F47F3-B741-5381-BF58-4565CC971CA6}']
  { constructors } 

    {class} function init: DNTabStops;

  end;

  [DNTypeName('Aspose.Pdf.Text.TabStops')]
  DNTabStops = interface(DDN.mscorlib.DNICloneable)
  ['{E85C925E-49B4-3253-B364-B47FD36E058E}']
  { getters & setters } 

    function get_IsReadOnly: Boolean;
    function get_Count: Int32;
    function get_Item(index: Int32): DNTabStop;
    procedure set_Item(index: Int32; value: DNTabStop);

  { methods } 

    function Add: DNTabStop; overload;
    function Add(position: Single): DNTabStop; overload;
    procedure Add(tabStop: DNTabStop); overload;
    function Add(position: Single; leaderType: DNTabLeaderType): DNTabStop; overload;
    function Clone: DDN.mscorlib.DNObject;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property IsReadOnly: Boolean read get_IsReadOnly;
    property Count: Int32 read get_Count;
    property Item[index: Int32]: DNTabStop read get_Item write set_Item; default;
  end;

  TDNTabStops = class(TDNGenericImport<DNTabStopsClass, DNTabStops>) end;

  //-------------namespace: Aspose.Pdf.Text----------------
  DNTextAbsorberClass = interface(DDN.mscorlib.DNObjectClass)
  ['{590A9F94-7517-5D4F-BCE1-94D3B97B9390}']
  { constructors } 

    {class} function init: DNTextAbsorber; overload;
    {class} function init(extractionOptions: DNTextExtractionOptions): DNTextAbsorber; overload;
    {class} function init(extractionOptions: DNTextExtractionOptions; textSearchOptions: DNTextSearchOptions): DNTextAbsorber; overload;
    {class} function init(textSearchOptions: DNTextSearchOptions): DNTextAbsorber; overload;

  end;

  [DNTypeName('Aspose.Pdf.Text.TextAbsorber')]
  DNTextAbsorber = interface(DDN.mscorlib.DNObject)
  ['{11F8DD06-D777-3A46-8314-4B6969FA7D11}']
  { getters & setters } 

    function get_Text: string;
    function get_HasErrors: Boolean;
    function get_Errors: DDN.mscorlib.DNList<DNTextExtractionError>;
    function get_ExtractionOptions: DNTextExtractionOptions;
    procedure set_ExtractionOptions(value: DNTextExtractionOptions);
    function get_TextSearchOptions: DNTextSearchOptions;
    procedure set_TextSearchOptions(value: DNTextSearchOptions);

  { methods } 

    procedure Visit(page: DNPage); overload;
    procedure Visit(form: DNXForm); overload;
    procedure Visit(pdf: DNDocument); overload;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Text: string read get_Text;
    property HasErrors: Boolean read get_HasErrors;
    property Errors: DDN.mscorlib.DNList<DNTextExtractionError> read get_Errors;
    property ExtractionOptions: DNTextExtractionOptions read get_ExtractionOptions write set_ExtractionOptions;
    property TextSearchOptions: DNTextSearchOptions read get_TextSearchOptions write set_TextSearchOptions;
  end;

  TDNTextAbsorber = class(TDNGenericImport<DNTextAbsorberClass, DNTextAbsorber>) end;

  //-------------namespace: Aspose.Pdf.Text----------------
  DNTextFragmentAbsorberClass = interface(DNTextAbsorberClass)
  ['{D2219F4F-D581-58D1-8FEB-D14663215E43}']
  { constructors } 

    {class} function init: DNTextFragmentAbsorber; overload;
    {class} function init(textEditOptions: DNTextEditOptions): DNTextFragmentAbsorber; overload;
    {class} function init(phrase: string): DNTextFragmentAbsorber; overload;
    {class} function init(regex: DDN.System.DNRegex): DNTextFragmentAbsorber; overload;
    {class} function init(phrase: string; textSearchOptions: DNTextSearchOptions): DNTextFragmentAbsorber; overload;
    {class} function init(regex: DDN.System.DNRegex; textSearchOptions: DNTextSearchOptions): DNTextFragmentAbsorber; overload;
    {class} function init(phrase: string; textSearchOptions: DNTextSearchOptions; textEditOptions: DNTextEditOptions): DNTextFragmentAbsorber; overload;
    {class} function init(phrase: string; textEditOptions: DNTextEditOptions): DNTextFragmentAbsorber; overload;
    {class} function init(regex: DDN.System.DNRegex; textEditOptions: DNTextEditOptions): DNTextFragmentAbsorber; overload;

  end;

  [DNTypeName('Aspose.Pdf.Text.TextFragmentAbsorber')]
  DNTextFragmentAbsorber = interface(DNTextAbsorber)
  ['{53FDB065-4A96-3A68-82AE-8B40BF6AFBD3}']
  { getters & setters } 

    function get_TextFragments: DNTextFragmentCollection;
    procedure set_TextFragments(value: DNTextFragmentCollection);
    function get_Phrase: string;
    procedure set_Phrase(value: string);
    function get_TextSearchOptions: DNTextSearchOptions;
    procedure set_TextSearchOptions(value: DNTextSearchOptions);
    function get_TextEditOptions: DNTextEditOptions;
    procedure set_TextEditOptions(value: DNTextEditOptions);
    function get_TextReplaceOptions: DNTextReplaceOptions;
    procedure set_TextReplaceOptions(value: DNTextReplaceOptions);
    function get_HasErrors: Boolean;
    function get_Errors: DDN.mscorlib.DNList<DNTextExtractionError>;
    function get_Text: string;
    function get_ExtractionOptions: DNTextExtractionOptions;
    procedure set_ExtractionOptions(value: DNTextExtractionOptions);

  { methods } 

    procedure Visit(page: DNPage); overload;
    procedure Visit(pdf: DNDocument); overload;
    procedure ApplyForAllFragments(font: DNFont); overload;
    procedure ApplyForAllFragments(fontSize: Single); overload;
    procedure ApplyForAllFragments(font: DNFont; fontSize: Single); overload;
    procedure Reset;
    procedure RemoveAllText(page: DNPage); overload;
    procedure RemoveAllText(page: DNPage; rect: DNPdf_Rectangle); overload;
    procedure RemoveAllText(document: DNDocument); overload;
    procedure Visit(xForm: DNXForm); overload;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property TextFragments: DNTextFragmentCollection read get_TextFragments write set_TextFragments;
    property Phrase: string read get_Phrase write set_Phrase;
    property TextSearchOptions: DNTextSearchOptions read get_TextSearchOptions write set_TextSearchOptions;
    property TextEditOptions: DNTextEditOptions read get_TextEditOptions write set_TextEditOptions;
    property TextReplaceOptions: DNTextReplaceOptions read get_TextReplaceOptions write set_TextReplaceOptions;
    property HasErrors: Boolean read get_HasErrors;
    property Errors: DDN.mscorlib.DNList<DNTextExtractionError> read get_Errors;
    property Text: string read get_Text;
    property ExtractionOptions: DNTextExtractionOptions read get_ExtractionOptions write set_ExtractionOptions;
  end;

  TDNTextFragmentAbsorber = class(TDNGenericImport<DNTextFragmentAbsorberClass, DNTextFragmentAbsorber>) end;

  //-------------namespace: Aspose.Pdf.Text----------------
  DNTextBuilderClass = interface(DDN.mscorlib.DNObjectClass)
  ['{B32784D8-6258-5CF8-9D69-3DC6FD52DC7D}']
  { constructors } 

    {class} function init(page: DNPage): DNTextBuilder; overload;
    {class} function init(page: DNPage; operatorCollection: DNBaseOperatorCollection): DNTextBuilder; overload;

  end;

  [DNTypeName('Aspose.Pdf.Text.TextBuilder')]
  DNTextBuilder = interface(DDN.mscorlib.DNObject)
  ['{602FCC4C-0B17-371E-B6A7-016735320835}']
  { methods } 

    procedure AppendParagraph(textParagraph: DNTextParagraph);
    procedure AppendText(textFragment: DNTextFragment);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNTextBuilder = class(TDNGenericImport<DNTextBuilderClass, DNTextBuilder>) end;

  //-------------namespace: Aspose.Pdf.Text----------------
  DNTextExtractionErrorClass = interface(DDN.mscorlib.DNObjectClass)
  ['{9C10E0D1-E344-5213-B044-62E23160FF44}']
  end;

  [DNTypeName('Aspose.Pdf.Text.TextExtractionError')]
  DNTextExtractionError = interface(DDN.mscorlib.DNObject)
  ['{8DF6140B-59CF-3BC9-BFF0-9A35757570D7}']
  { getters & setters } 

    function get_Summary: string;
    function get_Description: string;
    function get_Location: DNTextExtractionErrorLocation;
    function get_FontKey: string;
    function get_FontName: string;
    function get_ExtractedText: string;

  { methods } 

    function ToString: string;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    property Summary: string read get_Summary;
    property Description: string read get_Description;
    property Location: DNTextExtractionErrorLocation read get_Location;
    property FontKey: string read get_FontKey;
    property FontName: string read get_FontName;
    property ExtractedText: string read get_ExtractedText;
  end;

  TDNTextExtractionError = class(TDNGenericImport<DNTextExtractionErrorClass, DNTextExtractionError>) end;

  //-------------namespace: Aspose.Pdf.Text----------------
  DNTextExtractionErrorLocationClass = interface(DDN.mscorlib.DNObjectClass)
  ['{35B1B902-AB6A-5284-9C91-39BA239824BA}']
  end;

  [DNTypeName('Aspose.Pdf.Text.TextExtractionErrorLocation')]
  DNTextExtractionErrorLocation = interface(DDN.mscorlib.DNObject)
  ['{D754B343-BA55-35C6-A0EF-F45FA1797F1F}']
  { getters & setters } 

    function get_Path: string;
    function get_PageNumber: Int32;
    function get_ObjectType: string;
    function get_FormKey: string;
    function get_OperatorIndex: Int32;
    function get_OperatorString: string;
    function get_FontUsedKey: string;
    function get_TextStartPoint: DNPoint;

  { methods } 

    function ToString: string;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    property Path: string read get_Path;
    property PageNumber: Int32 read get_PageNumber;
    property ObjectType: string read get_ObjectType;
    property FormKey: string read get_FormKey;
    property OperatorIndex: Int32 read get_OperatorIndex;
    property OperatorString: string read get_OperatorString;
    property FontUsedKey: string read get_FontUsedKey;
    property TextStartPoint: DNPoint read get_TextStartPoint;
  end;

  TDNTextExtractionErrorLocation = class(TDNGenericImport<DNTextExtractionErrorLocationClass, DNTextExtractionErrorLocation>) end;

  //-------------namespace: Aspose.Pdf.Text----------------
  DNTextFragmentCollectionClass = interface(DDN.mscorlib.DNObjectClass)
  ['{24C4473B-5A90-58C4-AF0F-A45D8982F5E9}']
  end;

  [DNTypeName('Aspose.Pdf.Text.TextFragmentCollection')]
  DNTextFragmentCollection = interface(DDN.mscorlib.DNObject)
  ['{8F6908D8-9849-3A4F-AD4C-CEB7BD2C94F0}']
  { getters & setters } 

    function get_Count: Int32;
    function get_SyncRoot: DDN.mscorlib.DNObject;
    function get_IsSynchronized: Boolean;
    function get_IsReadOnly: Boolean;
    function get_Item(index: Int32): DNTextFragment;

  { methods } 

    function GetEnumerator: DDN.mscorlib.DNIEnumerator<DNTextFragment>;
    procedure CopyTo(&array: TArray<DNTextFragment>; index: Int32);
    function &Contains(item: DNTextFragment): Boolean;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Count: Int32 read get_Count;
    property SyncRoot: DDN.mscorlib.DNObject read get_SyncRoot;
    property IsSynchronized: Boolean read get_IsSynchronized;
    property IsReadOnly: Boolean read get_IsReadOnly;
    property Item[index: Int32]: DNTextFragment read get_Item; default;
  end;

  TDNTextFragmentCollection = class(TDNGenericImport<DNTextFragmentCollectionClass, DNTextFragmentCollection>) end;

  //-------------namespace: Aspose.Pdf.Text----------------
  DNTextOptionsClass = interface(DDN.mscorlib.DNObjectClass)
  ['{F7598FA7-6226-5BEF-A7AC-FDF879A58454}']
  end;

  [DNTypeName('Aspose.Pdf.Text.TextOptions')]
  DNTextOptions = interface(DDN.mscorlib.DNObject)
  ['{E5BC9FF0-B358-3FD8-A6A9-7514C36FD77A}']
  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNTextOptions = class(TDNGenericImport<DNTextOptionsClass, DNTextOptions>) end;

  //-------------namespace: Aspose.Pdf.Text----------------
  DNTextEditOptionsClass = interface(DNTextOptionsClass)
  ['{351B11E2-74B9-5D90-B0A1-F26FBB370D32}']
  { constructors } 

    {class} function init(noCharacterBehavior: DNTextEditOptions_NoCharacterAction): DNTextEditOptions; overload;
    {class} function init(fontReplaceBehavior: DNTextEditOptions_FontReplace): DNTextEditOptions; overload;
    {class} function init(allowLanguageTransformation: Boolean): DNTextEditOptions; overload;
    {class} function init(languageTransformationBehavior: DNTextEditOptions_LanguageTransformation): DNTextEditOptions; overload;

  end;

  [DNTypeName('Aspose.Pdf.Text.TextEditOptions')]
  DNTextEditOptions = interface(DNTextOptions)
  ['{0F6F2406-9E5E-33F6-B512-1CDBF5817EF7}']
  { getters & setters } 

    function get_ReplacementFont: DNFont;
    procedure set_ReplacementFont(value: DNFont);
    function get_NoCharacterBehavior: DNTextEditOptions_NoCharacterAction;
    procedure set_NoCharacterBehavior(value: DNTextEditOptions_NoCharacterAction);
    function get_FontReplaceBehavior: DNTextEditOptions_FontReplace;
    procedure set_FontReplaceBehavior(value: DNTextEditOptions_FontReplace);
    function get_AllowLanguageTransformation: Boolean;
    procedure set_AllowLanguageTransformation(value: Boolean);
    function get_LanguageTransformationBehavior: DNTextEditOptions_LanguageTransformation;
    procedure set_LanguageTransformationBehavior(value: DNTextEditOptions_LanguageTransformation);
    function get_ClippingPathsProcessing: DNTextEditOptions_ClippingPathsProcessingMode;
    procedure set_ClippingPathsProcessing(value: DNTextEditOptions_ClippingPathsProcessingMode);
    function get_ToAttemptGetUnderlineFromSource: Boolean;
    procedure set_ToAttemptGetUnderlineFromSource(value: Boolean);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property ReplacementFont: DNFont read get_ReplacementFont write set_ReplacementFont;
    property NoCharacterBehavior: DNTextEditOptions_NoCharacterAction read get_NoCharacterBehavior write set_NoCharacterBehavior;
    property FontReplaceBehavior: DNTextEditOptions_FontReplace read get_FontReplaceBehavior write set_FontReplaceBehavior;
    property AllowLanguageTransformation: Boolean read get_AllowLanguageTransformation write set_AllowLanguageTransformation;
    property LanguageTransformationBehavior: DNTextEditOptions_LanguageTransformation read get_LanguageTransformationBehavior write set_LanguageTransformationBehavior;
    property ClippingPathsProcessing: DNTextEditOptions_ClippingPathsProcessingMode read get_ClippingPathsProcessing write set_ClippingPathsProcessing;
    property ToAttemptGetUnderlineFromSource: Boolean read get_ToAttemptGetUnderlineFromSource write set_ToAttemptGetUnderlineFromSource;
  end;

  TDNTextEditOptions = class(TDNGenericImport<DNTextEditOptionsClass, DNTextEditOptions>) end;

  //-------------namespace: Aspose.Pdf.Text----------------
  DNTextExtractionOptionsClass = interface(DNTextOptionsClass)
  ['{DD79A053-A4D1-514E-8AB4-6E61FD0C5330}']
  { constructors } 

    {class} function init(formattingMode: DNTextExtractionOptions_TextFormattingMode): DNTextExtractionOptions;

  end;

  [DNTypeName('Aspose.Pdf.Text.TextExtractionOptions')]
  DNTextExtractionOptions = interface(DNTextOptions)
  ['{1B9D64F6-EBEA-3268-92A6-1E3B2E1F1CE2}']
  { getters & setters } 

    function get_FormattingMode: DNTextExtractionOptions_TextFormattingMode;
    procedure set_FormattingMode(value: DNTextExtractionOptions_TextFormattingMode);
    function get_ScaleFactor: Double;
    procedure set_ScaleFactor(value: Double);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property FormattingMode: DNTextExtractionOptions_TextFormattingMode read get_FormattingMode write set_FormattingMode;
    property ScaleFactor: Double read get_ScaleFactor write set_ScaleFactor;
  end;

  TDNTextExtractionOptions = class(TDNGenericImport<DNTextExtractionOptionsClass, DNTextExtractionOptions>) end;

  //-------------namespace: Aspose.Pdf.Text----------------
  DNTextFormattingOptionsClass = interface(DNTextOptionsClass)
  ['{ECE4CF83-FC7B-5FCC-BC64-365C07838867}']
  { constructors } 

    {class} function init(wrapMode: DNTextFormattingOptions_WordWrapMode): DNTextFormattingOptions; overload;
    {class} function init: DNTextFormattingOptions; overload;

  end;

  [DNTypeName('Aspose.Pdf.Text.TextFormattingOptions')]
  DNTextFormattingOptions = interface(DNTextOptions)
  ['{AED621F0-F7F7-3C94-B44C-AA4A6D30A456}']
  { getters & setters } 

    function get_WrapMode: DNTextFormattingOptions_WordWrapMode;
    procedure set_WrapMode(value: DNTextFormattingOptions_WordWrapMode);
    function get_LineSpacing: DNTextFormattingOptions_LineSpacingMode;
    procedure set_LineSpacing(value: DNTextFormattingOptions_LineSpacingMode);
    function get_SubsequentLinesIndent: Single;
    procedure set_SubsequentLinesIndent(value: Single);
    function get_FirstLineIndent: Single;
    procedure set_FirstLineIndent(value: Single);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property WrapMode: DNTextFormattingOptions_WordWrapMode read get_WrapMode write set_WrapMode;
    property LineSpacing: DNTextFormattingOptions_LineSpacingMode read get_LineSpacing write set_LineSpacing;
    property SubsequentLinesIndent: Single read get_SubsequentLinesIndent write set_SubsequentLinesIndent;
    property FirstLineIndent: Single read get_FirstLineIndent write set_FirstLineIndent;
  end;

  TDNTextFormattingOptions = class(TDNGenericImport<DNTextFormattingOptionsClass, DNTextFormattingOptions>) end;

  //-------------namespace: Aspose.Pdf.Text----------------
  DNTextReplaceOptionsClass = interface(DNTextOptionsClass)
  ['{955CEFEC-5832-56E6-9CF6-12A42B8ED740}']
  { constructors } 

    {class} function init(scope: DNTextReplaceOptions_Scope): DNTextReplaceOptions; overload;
    {class} function init(adjustment: DNTextReplaceOptions_ReplaceAdjustment): DNTextReplaceOptions; overload;

  end;

  [DNTypeName('Aspose.Pdf.Text.TextReplaceOptions')]
  DNTextReplaceOptions = interface(DNTextOptions)
  ['{78174F1C-6A20-3242-A760-C31AA9B82B84}']
  { getters & setters } 

    function get_ReplaceScope: DNTextReplaceOptions_Scope;
    procedure set_ReplaceScope(value: DNTextReplaceOptions_Scope);
    function get_ReplaceAdjustmentAction: DNTextReplaceOptions_ReplaceAdjustment;
    procedure set_ReplaceAdjustmentAction(value: DNTextReplaceOptions_ReplaceAdjustment);
    function get_AdjustmentNewLineSpacing: Double;
    procedure set_AdjustmentNewLineSpacing(value: Double);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property ReplaceScope: DNTextReplaceOptions_Scope read get_ReplaceScope write set_ReplaceScope;
    property ReplaceAdjustmentAction: DNTextReplaceOptions_ReplaceAdjustment read get_ReplaceAdjustmentAction write set_ReplaceAdjustmentAction;
    property AdjustmentNewLineSpacing: Double read get_AdjustmentNewLineSpacing write set_AdjustmentNewLineSpacing;
  end;

  TDNTextReplaceOptions = class(TDNGenericImport<DNTextReplaceOptionsClass, DNTextReplaceOptions>) end;

  //-------------namespace: Aspose.Pdf.Text----------------
  DNTextSearchOptionsClass = interface(DNTextOptionsClass)
  ['{D681B1EF-4C99-5660-8D28-5021BE1B1EBC}']
  { constructors } 

    {class} function init(isRegularExpressionUsed: Boolean): DNTextSearchOptions; overload;
    {class} function init(rectangle: DNPdf_Rectangle): DNTextSearchOptions; overload;
    {class} function init(rectangle: DNPdf_Rectangle; isRegularExpressionUsed: Boolean): DNTextSearchOptions; overload;

  end;

  [DNTypeName('Aspose.Pdf.Text.TextSearchOptions')]
  DNTextSearchOptions = interface(DNTextOptions)
  ['{86A9CBD3-B045-39AF-BB4C-7208D1A9AE57}']
  { getters & setters } 

    function get_IsRegularExpressionUsed: Boolean;
    procedure set_IsRegularExpressionUsed(value: Boolean);
    function get_LimitToPageBounds: Boolean;
    procedure set_LimitToPageBounds(value: Boolean);
    function get_Rectangle: DNPdf_Rectangle;
    procedure set_Rectangle(value: DNPdf_Rectangle);
    function get_UseFontEngineEncoding: Boolean;
    procedure set_UseFontEngineEncoding(value: Boolean);
    function get_IgnoreShadowText: Boolean;
    procedure set_IgnoreShadowText(value: Boolean);
    function get_LogTextExtractionErrors: Boolean;
    procedure set_LogTextExtractionErrors(value: Boolean);
    function get_IgnoreResourceFontErrors: Boolean;
    procedure set_IgnoreResourceFontErrors(value: Boolean);
    function get_SearchForTextRelatedGraphics: Boolean;
    procedure set_SearchForTextRelatedGraphics(value: Boolean);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property IsRegularExpressionUsed: Boolean read get_IsRegularExpressionUsed write set_IsRegularExpressionUsed;
    property LimitToPageBounds: Boolean read get_LimitToPageBounds write set_LimitToPageBounds;
    property Rectangle: DNPdf_Rectangle read get_Rectangle write set_Rectangle;
    property UseFontEngineEncoding: Boolean read get_UseFontEngineEncoding write set_UseFontEngineEncoding;
    property IgnoreShadowText: Boolean read get_IgnoreShadowText write set_IgnoreShadowText;
    property LogTextExtractionErrors: Boolean read get_LogTextExtractionErrors write set_LogTextExtractionErrors;
    property IgnoreResourceFontErrors: Boolean read get_IgnoreResourceFontErrors write set_IgnoreResourceFontErrors;
    property SearchForTextRelatedGraphics: Boolean read get_SearchForTextRelatedGraphics write set_SearchForTextRelatedGraphics;
  end;

  TDNTextSearchOptions = class(TDNGenericImport<DNTextSearchOptionsClass, DNTextSearchOptions>) end;

  //-------------namespace: Aspose.Pdf.Text----------------
  DNTextParagraphClass = interface(DDN.mscorlib.DNObjectClass)
  ['{4647EBF5-6542-596F-81CC-67022970AE32}']
  { constructors } 

    {class} function init: DNTextParagraph;

  end;

  [DNTypeName('Aspose.Pdf.Text.TextParagraph')]
  DNTextParagraph = interface(DDN.mscorlib.DNObject)
  ['{4A717D65-C382-3A3F-81AC-B7D0F37CCDA3}']
  { getters & setters } 

    function get_VerticalAlignment: DNVerticalAlignment;
    procedure set_VerticalAlignment(value: DNVerticalAlignment);
    function get_SubsequentLinesIndent: Single;
    procedure set_SubsequentLinesIndent(value: Single);
    function get_FirstLineIndent: Single;
    procedure set_FirstLineIndent(value: Single);
    function get_Justify: Boolean;
    procedure set_Justify(value: Boolean);
    function get_HorizontalAlignment: DNHorizontalAlignment;
    procedure set_HorizontalAlignment(value: DNHorizontalAlignment);
    function get_FormattingOptions: DNTextFormattingOptions;
    procedure set_FormattingOptions(value: DNTextFormattingOptions);
    function get_Position: DNPosition;
    procedure set_Position(value: DNPosition);
    function get_TextRectangle: DNPdf_Rectangle;
    function get_Rectangle: DNPdf_Rectangle;
    procedure set_Rectangle(value: DNPdf_Rectangle);
    function get_Margin: DNMarginInfo;
    procedure set_Margin(value: DNMarginInfo);
    function get_Rotation: Double;
    procedure set_Rotation(value: Double);

  { methods } 

    procedure BeginEdit;
    procedure EndEdit;
    procedure AppendLine(line: string); overload;
    procedure AppendLine(line: string; lineSpacing: Single); overload;
    procedure AppendLine(line: string; textState: DNTextState); overload;
    procedure AppendLine(line: string; textState: DNTextState; lineSpacing: Single); overload;
    procedure AppendLine(line: DNTextFragment); overload;
    procedure AppendLine(line: DNTextFragment; textState: DNTextState); overload;
    procedure AppendLine(line: DNTextFragment; textState: DNTextState; lineSpacing: Single); overload;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property VerticalAlignment: DNVerticalAlignment read get_VerticalAlignment write set_VerticalAlignment;
    property SubsequentLinesIndent: Single read get_SubsequentLinesIndent write set_SubsequentLinesIndent;
    property FirstLineIndent: Single read get_FirstLineIndent write set_FirstLineIndent;
    property Justify: Boolean read get_Justify write set_Justify;
    property HorizontalAlignment: DNHorizontalAlignment read get_HorizontalAlignment write set_HorizontalAlignment;
    property FormattingOptions: DNTextFormattingOptions read get_FormattingOptions write set_FormattingOptions;
    property Position: DNPosition read get_Position write set_Position;
    property TextRectangle: DNPdf_Rectangle read get_TextRectangle;
    property Rectangle: DNPdf_Rectangle read get_Rectangle write set_Rectangle;
    property Margin: DNMarginInfo read get_Margin write set_Margin;
    property Rotation: Double read get_Rotation write set_Rotation;
  end;

  TDNTextParagraph = class(TDNGenericImport<DNTextParagraphClass, DNTextParagraph>) end;

  //-------------namespace: Aspose.Pdf.Text----------------
  DNTextSegmentClass = interface(DDN.mscorlib.DNObjectClass)
  ['{4D0DE35D-4CE8-5BF0-9389-1A09D4F4DDF3}']
  { constructors } 

    {class} function init: DNTextSegment; overload;
    {class} function init(text: string): DNTextSegment; overload;

  { static methods } 

    {class} function MyHtmlEncode(value: string): string;

  end;

  [DNTypeName('Aspose.Pdf.Text.TextSegment')]
  DNTextSegment = interface(DDN.mscorlib.DNObject)
  ['{57844BAC-143C-3DB5-A520-BA2796113317}']
  { getters & setters } 

    function get_StartCharIndex: Int32;
    function get_EndCharIndex: Int32;
    function get_Text: string;
    procedure set_Text(value: string);
    function get_TextState: DNTextState;
    procedure set_TextState(value: DNTextState);
    function get_Position: DNPosition;
    procedure set_Position(value: DNPosition);
    function get_Rectangle: DNPdf_Rectangle;
    function get_BaselinePosition: DNPosition;
    procedure set_BaselinePosition(value: DNPosition);
    function get_TextEditOptions: DNTextEditOptions;
    procedure set_TextEditOptions(value: DNTextEditOptions);
    function get_Characters: DNCharInfoCollection;
    function get_Hyperlink: DNHyperlink;
    procedure set_Hyperlink(value: DNHyperlink);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property StartCharIndex: Int32 read get_StartCharIndex;
    property EndCharIndex: Int32 read get_EndCharIndex;
    property Text: string read get_Text write set_Text;
    property TextState: DNTextState read get_TextState write set_TextState;
    property Position: DNPosition read get_Position write set_Position;
    property Rectangle: DNPdf_Rectangle read get_Rectangle;
    property BaselinePosition: DNPosition read get_BaselinePosition write set_BaselinePosition;
    property TextEditOptions: DNTextEditOptions read get_TextEditOptions write set_TextEditOptions;
    property Characters: DNCharInfoCollection read get_Characters;
    property Hyperlink: DNHyperlink read get_Hyperlink write set_Hyperlink;
  end;

  TDNTextSegment = class(TDNGenericImport<DNTextSegmentClass, DNTextSegment>) end;

  //-------------namespace: Aspose.Pdf.Text----------------
  DNTextSegmentCollectionClass = interface(DDN.mscorlib.DNObjectClass)
  ['{D6A69712-95AF-529A-B970-5B5406E5827E}']
  end;

  [DNTypeName('Aspose.Pdf.Text.TextSegmentCollection')]
  DNTextSegmentCollection = interface(DDN.mscorlib.DNObject)
  ['{53ADABA6-E38C-3BEB-A6E9-99339BECA936}']
  { getters & setters } 

    function get_Count: Int32;
    function get_SyncRoot: DDN.mscorlib.DNObject;
    function get_IsSynchronized: Boolean;
    function get_IsReadOnly: Boolean;
    function get_Item(index: Int32): DNTextSegment;

  { methods } 

    function GetEnumerator: DDN.mscorlib.DNIEnumerator<DNTextSegment>;
    procedure CopyTo(&array: TArray<DNTextSegment>; index: Int32);
    function &Contains(item: DNTextSegment): Boolean;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Count: Int32 read get_Count;
    property SyncRoot: DDN.mscorlib.DNObject read get_SyncRoot;
    property IsSynchronized: Boolean read get_IsSynchronized;
    property IsReadOnly: Boolean read get_IsReadOnly;
    property Item[index: Int32]: DNTextSegment read get_Item; default;
  end;

  TDNTextSegmentCollection = class(TDNGenericImport<DNTextSegmentCollectionClass, DNTextSegmentCollection>) end;

  //-------------namespace: Aspose.Pdf.Text----------------
  DNTextStateClass = interface(DDN.mscorlib.DNObjectClass)
  ['{0A65AB67-FEE5-5ACD-B1A9-FC34E74A0B04}']
  { constructors } 

    {class} function init: DNTextState; overload;
    {class} function init(fontSize: Double): DNTextState; overload;
    {class} function init(foregroundColor: DDN.System.Drawing.DNColor): DNTextState; overload;
    {class} function init(foregroundColor: DDN.System.Drawing.DNColor; fontSize: Double): DNTextState; overload;
    {class} function init(fontFamily: string): DNTextState; overload;
    {class} function init(fontFamily: string; bold: Boolean; italic: Boolean): DNTextState; overload;
    {class} function init(fontFamily: string; fontSize: Double): DNTextState; overload;

  { static fields getter & setter } 

   function __fakeFieldGet_TabTag: string;
   function __fakeFieldGet_TabstopDefaultValue: Single;

  { static fields } 

    {class} property TabTag: string read __fakeFieldGet_TabTag;
    {class} property TabstopDefaultValue: Single read __fakeFieldGet_TabstopDefaultValue;

  end;

  [DNTypeName('Aspose.Pdf.Text.TextState')]
  DNTextState = interface(DDN.mscorlib.DNObject)
  ['{2226E10B-65B6-3C1B-8E39-6D330E7A6C48}']
  { getters & setters } 

    function get_CharacterSpacing: Single;
    procedure set_CharacterSpacing(value: Single);
    function get_LineSpacing: Single;
    procedure set_LineSpacing(value: Single);
    function get_HorizontalScaling: Single;
    procedure set_HorizontalScaling(value: Single);
    function get_Subscript: Boolean;
    procedure set_Subscript(value: Boolean);
    function get_Superscript: Boolean;
    procedure set_Superscript(value: Boolean);
    function get_WordSpacing: Single;
    procedure set_WordSpacing(value: Single);
    function get_Invisible: Boolean;
    procedure set_Invisible(value: Boolean);
    function get_RenderingMode: DNTextRenderingMode;
    procedure set_RenderingMode(value: DNTextRenderingMode);
    function get_FontSize: Single;
    procedure set_FontSize(value: Single);
    function get_Font: DNFont;
    procedure set_Font(value: DNFont);
    function get_ForegroundColor: DNColor;
    procedure set_ForegroundColor(value: DNColor);
    function get_StrokingColor: DNColor;
    procedure set_StrokingColor(value: DNColor);
    function get_Underline: Boolean;
    procedure set_Underline(value: Boolean);
    function get_StrikeOut: Boolean;
    procedure set_StrikeOut(value: Boolean);
    function get_BackgroundColor: DNColor;
    procedure set_BackgroundColor(value: DNColor);
    function get_FontStyle: DNFontStyles;
    procedure set_FontStyle(value: DNFontStyles);
    function get_HorizontalAlignment: DNHorizontalAlignment;
    procedure set_HorizontalAlignment(value: DNHorizontalAlignment);

  { fields getter & setter } 

   function __fakeFieldGet_TabTag: string;
   function __fakeFieldGet_TabstopDefaultValue: Single;

  { fields } 

   property TabTag: string read __fakeFieldGet_TabTag;
   property TabstopDefaultValue: Single read __fakeFieldGet_TabstopDefaultValue;

  { methods } 

    function MeasureString(str: string): Double;
    procedure ApplyChangesFrom(textState: DNTextState);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property CharacterSpacing: Single read get_CharacterSpacing write set_CharacterSpacing;
    property LineSpacing: Single read get_LineSpacing write set_LineSpacing;
    property HorizontalScaling: Single read get_HorizontalScaling write set_HorizontalScaling;
    property Subscript: Boolean read get_Subscript write set_Subscript;
    property Superscript: Boolean read get_Superscript write set_Superscript;
    property WordSpacing: Single read get_WordSpacing write set_WordSpacing;
    property Invisible: Boolean read get_Invisible write set_Invisible;
    property RenderingMode: DNTextRenderingMode read get_RenderingMode write set_RenderingMode;
    property FontSize: Single read get_FontSize write set_FontSize;
    property Font: DNFont read get_Font write set_Font;
    property ForegroundColor: DNColor read get_ForegroundColor write set_ForegroundColor;
    property StrokingColor: DNColor read get_StrokingColor write set_StrokingColor;
    property Underline: Boolean read get_Underline write set_Underline;
    property StrikeOut: Boolean read get_StrikeOut write set_StrikeOut;
    property BackgroundColor: DNColor read get_BackgroundColor write set_BackgroundColor;
    property FontStyle: DNFontStyles read get_FontStyle write set_FontStyle;
    property HorizontalAlignment: DNHorizontalAlignment read get_HorizontalAlignment write set_HorizontalAlignment;
  end;

  TDNTextState = class(TDNGenericImport<DNTextStateClass, DNTextState>) end;

  //-------------namespace: Aspose.Pdf.Text----------------
  DNTextFragmentStateClass = interface(DNTextStateClass)
  ['{2C25C51B-3D4D-5C56-A8C6-72F1D9531C33}']
  { static getter & setter } 

    procedure set_StrikeOut(value: Boolean);

  { constructors } 

    {class} function init(fragment: DNTextFragment): DNTextFragmentState;

  { static fields getter & setter } 

   function __fakeFieldGet_TabTag: string;
   function __fakeFieldGet_TabstopDefaultValue: Single;

  { static fields } 

    {class} property TabTag: string read __fakeFieldGet_TabTag;
    {class} property TabstopDefaultValue: Single read __fakeFieldGet_TabstopDefaultValue;

  { static propertys } 

    {class} property StrikeOut: Boolean write set_StrikeOut;
  end;

  [DNTypeName('Aspose.Pdf.Text.TextFragmentState')]
  DNTextFragmentState = interface(DNTextState)
  ['{62205DBB-B021-3B35-B223-8B61A0CF1652}']
  { getters & setters } 

    function get_CharacterSpacing: Single;
    procedure set_CharacterSpacing(value: Single);
    function get_HorizontalScaling: Single;
    procedure set_HorizontalScaling(value: Single);
    function get_WordSpacing: Single;
    procedure set_WordSpacing(value: Single);
    function get_Invisible: Boolean;
    procedure set_Invisible(value: Boolean);
    function get_RenderingMode: DNTextRenderingMode;
    procedure set_RenderingMode(value: DNTextRenderingMode);
    function get_Subscript: Boolean;
    procedure set_Subscript(value: Boolean);
    function get_Superscript: Boolean;
    procedure set_Superscript(value: Boolean);
    function get_TabStops: DNTabStops;
    function get_LineSpacing: Single;
    procedure set_LineSpacing(value: Single);
    function get_ForegroundColor: DNColor;
    procedure set_ForegroundColor(value: DNColor);
    function get_StrokingColor: DNColor;
    procedure set_StrokingColor(value: DNColor);
    function get_BackgroundColor: DNColor;
    procedure set_BackgroundColor(value: DNColor);
    function get_Underline: Boolean;
    procedure set_Underline(value: Boolean);
    procedure set_StrikeOut(value: Boolean);
    function get_FontStyle: DNFontStyles;
    procedure set_FontStyle(value: DNFontStyles);
    function get_Font: DNFont;
    procedure set_Font(value: DNFont);
    function get_FontSize: Single;
    procedure set_FontSize(value: Single);
    function get_HorizontalAlignment: DNHorizontalAlignment;
    procedure set_HorizontalAlignment(value: DNHorizontalAlignment);
    function get_FormattingOptions: DNTextFormattingOptions;
    procedure set_FormattingOptions(value: DNTextFormattingOptions);
    function get_Rotation: Double;
    procedure set_Rotation(value: Double);
    function get_DrawTextRectangleBorder: Boolean;
    procedure set_DrawTextRectangleBorder(value: Boolean);

  { fields getter & setter } 

   function __fakeFieldGet_TabTag: string;
   function __fakeFieldGet_TabstopDefaultValue: Single;

  { fields } 

   property TabTag: string read __fakeFieldGet_TabTag;
   property TabstopDefaultValue: Single read __fakeFieldGet_TabstopDefaultValue;

  { methods } 

    function MeasureString(str: string): Double;
    procedure ApplyChangesFrom(textState: DNTextState);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property CharacterSpacing: Single read get_CharacterSpacing write set_CharacterSpacing;
    property HorizontalScaling: Single read get_HorizontalScaling write set_HorizontalScaling;
    property WordSpacing: Single read get_WordSpacing write set_WordSpacing;
    property Invisible: Boolean read get_Invisible write set_Invisible;
    property RenderingMode: DNTextRenderingMode read get_RenderingMode write set_RenderingMode;
    property Subscript: Boolean read get_Subscript write set_Subscript;
    property Superscript: Boolean read get_Superscript write set_Superscript;
    property TabStops: DNTabStops read get_TabStops;
    property LineSpacing: Single read get_LineSpacing write set_LineSpacing;
    property ForegroundColor: DNColor read get_ForegroundColor write set_ForegroundColor;
    property StrokingColor: DNColor read get_StrokingColor write set_StrokingColor;
    property BackgroundColor: DNColor read get_BackgroundColor write set_BackgroundColor;
    property Underline: Boolean read get_Underline write set_Underline;
    property StrikeOut: Boolean write set_StrikeOut;
    property FontStyle: DNFontStyles read get_FontStyle write set_FontStyle;
    property Font: DNFont read get_Font write set_Font;
    property FontSize: Single read get_FontSize write set_FontSize;
    property HorizontalAlignment: DNHorizontalAlignment read get_HorizontalAlignment write set_HorizontalAlignment;
    property FormattingOptions: DNTextFormattingOptions read get_FormattingOptions write set_FormattingOptions;
    property Rotation: Double read get_Rotation write set_Rotation;
    property DrawTextRectangleBorder: Boolean read get_DrawTextRectangleBorder write set_DrawTextRectangleBorder;
  end;

  TDNTextFragmentState = class(TDNGenericImport<DNTextFragmentStateClass, DNTextFragmentState>) end;

  //-------------namespace: Aspose.Pdf----------------
  DNTimestampSettingsClass = interface(DDN.mscorlib.DNObjectClass)
  ['{87545BD2-5231-556E-A329-0D33C03FC941}']
  { constructors } 

    {class} function init(serverUrl: string; basicAuthCredentials: string): DNTimestampSettings;

  end;

  [DNTypeName('Aspose.Pdf.TimestampSettings')]
  DNTimestampSettings = interface(DDN.mscorlib.DNObject)
  ['{83DB3DD9-0A7F-3E23-9B49-ECE41F8F0A93}']
  { getters & setters } 

    function get_ServerUrl: string;
    procedure set_ServerUrl(value: string);
    function get_BasicAuthCredentials: string;
    procedure set_BasicAuthCredentials(value: string);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property ServerUrl: string read get_ServerUrl write set_ServerUrl;
    property BasicAuthCredentials: string read get_BasicAuthCredentials write set_BasicAuthCredentials;
  end;

  TDNTimestampSettings = class(TDNGenericImport<DNTimestampSettingsClass, DNTimestampSettings>) end;

  //-------------namespace: Aspose.Pdf----------------
  DNTocInfoClass = interface(DDN.mscorlib.DNObjectClass)
  ['{8BF14456-B93F-5399-B28A-6D247296F8FB}']
  { constructors } 

    {class} function init: DNTocInfo;

  end;

  [DNTypeName('Aspose.Pdf.TocInfo')]
  DNTocInfo = interface(DDN.mscorlib.DNObject)
  ['{B8A1F86F-041E-3D24-AC33-139272924F49}']
  { getters & setters } 

    function get_ColumnInfo: DNColumnInfo;
    procedure set_ColumnInfo(value: DNColumnInfo);
    function get_FormatArray: TArray<DNLevelFormat>;
    procedure set_FormatArray(value: TArray<DNLevelFormat>);
    function get_FormatArrayLength: Int32;
    procedure set_FormatArrayLength(value: Int32);
    function get_Title: DNTextFragment;
    procedure set_Title(value: DNTextFragment);
    function get_IsCountTocPages: Boolean;
    procedure set_IsCountTocPages(value: Boolean);
    function get_PageNumbersPrefix: string;
    procedure set_PageNumbersPrefix(value: string);
    function get_IsShowPageNumbers: Boolean;
    procedure set_IsShowPageNumbers(value: Boolean);
    function get_LineDash: DNTabLeaderType;
    procedure set_LineDash(value: DNTabLeaderType);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property ColumnInfo: DNColumnInfo read get_ColumnInfo write set_ColumnInfo;
    property FormatArray: TArray<DNLevelFormat> read get_FormatArray write set_FormatArray;
    property FormatArrayLength: Int32 read get_FormatArrayLength write set_FormatArrayLength;
    property Title: DNTextFragment read get_Title write set_Title;
    property IsCountTocPages: Boolean read get_IsCountTocPages write set_IsCountTocPages;
    property PageNumbersPrefix: string read get_PageNumbersPrefix write set_PageNumbersPrefix;
    property IsShowPageNumbers: Boolean read get_IsShowPageNumbers write set_IsShowPageNumbers;
    property LineDash: DNTabLeaderType read get_LineDash write set_LineDash;
  end;

  TDNTocInfo = class(TDNGenericImport<DNTocInfoClass, DNTocInfo>) end;

  //-------------namespace: Aspose.Pdf----------------
  DNUnifiedSaveOptions_ProgressEventHandlerInfoClass = interface(DDN.mscorlib.DNObjectClass)
  ['{C607C129-BD83-5FDF-AFF3-CE6228874AC7}']
  end;

  [DNTypeName('Aspose.Pdf.UnifiedSaveOptions+ProgressEventHandlerInfo')]
  DNUnifiedSaveOptions_ProgressEventHandlerInfo = interface(DDN.mscorlib.DNObject)
  ['{C4F9D72D-7E1B-3261-B70B-765FE66F6F1A}']
  { fields getter & setter } 

   function __fakeFieldGet_EventType: DNProgressEventType;
   procedure __fakeFieldSet_EventType(value: DNProgressEventType);
   function __fakeFieldGet_Value: Int32;
   procedure __fakeFieldSet_Value(value: Int32);
   function __fakeFieldGet_MaxValue: Int32;
   procedure __fakeFieldSet_MaxValue(value: Int32);

  { fields } 

   property EventType: DNProgressEventType read __fakeFieldGet_EventType write __fakeFieldSet_EventType;
   property Value: Int32 read __fakeFieldGet_Value write __fakeFieldSet_Value;
   property MaxValue: Int32 read __fakeFieldGet_MaxValue write __fakeFieldSet_MaxValue;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNUnifiedSaveOptions_ProgressEventHandlerInfo = class(TDNGenericImport<DNUnifiedSaveOptions_ProgressEventHandlerInfoClass, DNUnifiedSaveOptions_ProgressEventHandlerInfo>) end;

  //-------------namespace: Aspose.Pdf----------------
  DNWarningInfoClass = interface(DDN.mscorlib.DNObjectClass)
  ['{ECB4DD55-F407-54CD-9679-C6F84C5D1C70}']
  { constructors } 

    {class} function init(&type: DNWarningType; message: string): DNWarningInfo;

  end;

  [DNTypeName('Aspose.Pdf.WarningInfo')]
  DNWarningInfo = interface(DDN.mscorlib.DNObject)
  ['{A2A770FC-6A0A-30E2-BB04-05BCA86B6A6D}']
  { getters & setters } 

    function get_WarningMessage: string;
    function get_WarningTypeProperty: DNWarningType;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property WarningMessage: string read get_WarningMessage;
    property WarningTypeProperty: DNWarningType read get_WarningTypeProperty;
  end;

  TDNWarningInfo = class(TDNGenericImport<DNWarningInfoClass, DNWarningInfo>) end;

  //-------------namespace: Aspose.Pdf----------------
  DNWatermarkClass = interface(DDN.mscorlib.DNObjectClass)
  ['{AD956318-A1BB-538B-B01E-4334A649F6CF}']
  { constructors } 

    {class} function init(image: DDN.System.Drawing.DNImage; rect: DNPdf_Rectangle): DNWatermark; overload;
    {class} function init(image: DDN.System.Drawing.DNImage): DNWatermark; overload;

  end;

  [DNTypeName('Aspose.Pdf.Watermark')]
  DNWatermark = interface(DDN.mscorlib.DNObject)
  ['{6E0DF3EA-FED0-3EEF-ACD3-40453E346B54}']
  { getters & setters } 

    function get_Image: DDN.System.Drawing.DNImage;
    function get_Position: DNPdf_Rectangle;
    function get_Available: Boolean;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Image: DDN.System.Drawing.DNImage read get_Image;
    property Position: DNPdf_Rectangle read get_Position;
    property Available: Boolean read get_Available;
  end;

  TDNWatermark = class(TDNGenericImport<DNWatermarkClass, DNWatermark>) end;

  //-------------namespace: Aspose.Pdf.XfaConverter----------------
  DNXfaParserOptionsClass = interface(DDN.mscorlib.DNObjectClass)
  ['{C22ADC94-02F6-5948-B1EF-13AB41CE0DA4}']
  { constructors } 

    {class} function init(pageSize: DDN.System.Drawing.DNSizeF): DNXfaParserOptions;

  end;

  [DNTypeName('Aspose.Pdf.XfaConverter.XfaParserOptions')]
  DNXfaParserOptions = interface(DDN.mscorlib.DNObject)
  ['{44B11397-C3AD-3C92-8AEE-FB7807C7D5FA}']
  { getters & setters } 

    function get_PageSize: DDN.System.Drawing.DNSizeF;
    procedure set_PageSize(value: DDN.System.Drawing.DNSizeF);
    function get_Signed: Boolean;
    procedure set_Signed(value: Boolean);
    function get_EmulateRequierdGroups: Boolean;
    procedure set_EmulateRequierdGroups(value: Boolean);
    function get_BasePath: DDN.System.DNUri;
    procedure set_BasePath(value: DDN.System.DNUri);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property PageSize: DDN.System.Drawing.DNSizeF read get_PageSize write set_PageSize;
    property Signed: Boolean read get_Signed write set_Signed;
    property EmulateRequierdGroups: Boolean read get_EmulateRequierdGroups write set_EmulateRequierdGroups;
    property BasePath: DDN.System.DNUri read get_BasePath write set_BasePath;
  end;

  TDNXfaParserOptions = class(TDNGenericImport<DNXfaParserOptionsClass, DNXfaParserOptions>) end;

  //-------------namespace: Aspose.Pdf----------------
  DNXFormClass = interface(DDN.mscorlib.DNObjectClass)
  ['{4884EB9D-CD54-5805-8A13-F7896821E8B2}']
  { static methods } 

    {class} function CreateNewForm(source: DNPage; document: DNDocument): DNXForm;

  end;

  [DNTypeName('Aspose.Pdf.XForm')]
  DNXForm = interface(DDN.mscorlib.DNObject)
  ['{B60B3507-ECAE-385D-A8B5-2DE21FCCF5F8}']
  { getters & setters } 

    function get_BBox: DNPdf_Rectangle;
    procedure set_BBox(value: DNPdf_Rectangle);
    function get_Name: string;
    procedure set_Name(value: string);
    function get_Contents: DNOperatorCollection;
    function get_Opi: DNOpi;
    function get_Matrix: DNMatrix;
    procedure set_Matrix(value: DNMatrix);
    function get_Resources: DNResources;
    function get_Rectangle: DNPdf_Rectangle;

  { methods } 

    function GetResources(allowCreate: Boolean): DNResources; overload;
    function GetResources: DNResources; overload;
    procedure FreeMemory;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property BBox: DNPdf_Rectangle read get_BBox write set_BBox;
    property Name: string read get_Name write set_Name;
    property Contents: DNOperatorCollection read get_Contents;
    property Opi: DNOpi read get_Opi;
    property Matrix: DNMatrix read get_Matrix write set_Matrix;
    property Resources: DNResources read get_Resources;
    property Rectangle: DNPdf_Rectangle read get_Rectangle;
  end;

  TDNXForm = class(TDNGenericImport<DNXFormClass, DNXForm>) end;

  //-------------namespace: Aspose.Pdf----------------
  DNXFormCollectionClass = interface(DDN.mscorlib.DNObjectClass)
  ['{E82B73CF-C08F-5D9F-A3E8-6868BA6D123F}']
  end;

  [DNTypeName('Aspose.Pdf.XFormCollection')]
  DNXFormCollection = interface(DDN.mscorlib.DNObject)
  ['{D11B006C-FA64-3C89-8218-BAFA1B11BE2D}']
  { getters & setters } 

    function get_Count: Int32;
    function get_IsSynchronized: Boolean;
    function get_SyncRoot: DDN.mscorlib.DNObject;
    function get_IsReadOnly: Boolean;
    function get_Item(index: Int32): DNXForm; overload;
    function get_Item(name: string): DNXForm; overload;

  { methods } 

    procedure Delete(index: Int32); overload;
    procedure Delete; overload;
    procedure CopyTo(&array: TArray<DNXForm>; index: Int32);
    function GetEnumerator: DDN.mscorlib.DNIEnumerator<DNXForm>;
    procedure Delete(name: string); overload;
    function &Contains(item: DNXForm): Boolean;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Count: Int32 read get_Count;
    property IsSynchronized: Boolean read get_IsSynchronized;
    property SyncRoot: DDN.mscorlib.DNObject read get_SyncRoot;
    property IsReadOnly: Boolean read get_IsReadOnly;
    property Item[index: Int32]: DNXForm read get_Item; default;
    property Item[name: string]: DNXForm read get_Item; default;
  end;

  TDNXFormCollection = class(TDNGenericImport<DNXFormCollectionClass, DNXFormCollection>) end;

  //-------------namespace: Aspose.Pdf----------------
  DNXImageClass = interface(DDN.mscorlib.DNObjectClass)
  ['{01F15CF1-E316-5260-9385-122010B187BC}']
  { static methods } 

    {class} function DetectColorType(bmp: DDN.System.Drawing.DNBitmap): DNColorType;

  end;

  [DNTypeName('Aspose.Pdf.XImage')]
  DNXImage = interface(DDN.mscorlib.DNObject)
  ['{C7212F00-37E2-3FE0-9D8D-55A37014D281}']
  { getters & setters } 

    function get_ContainsTransparency: Boolean;
    function get_Grayscaled: DDN.System.Drawing.DNImage;
    function get_FilterType: DNImageFilterType;
    function get_Width: Int32;
    function get_Height: Int32;
    function get_Name: string;
    procedure set_Name(value: string);
    function get_Metadata: DNMetadata;

  { methods } 

    procedure Rename(name: string);
    procedure Save(stream: DDN.mscorlib.DNStream); overload;
    procedure Save(stream: DDN.mscorlib.DNStream; format: DDN.System.Drawing.DNImageFormat); overload;
    procedure Save(stream: DDN.mscorlib.DNStream; resolution: Int32); overload;
    procedure Save(stream: DDN.mscorlib.DNStream; format: DDN.System.Drawing.DNImageFormat; resolution: Int32); overload;
    function GetColorType: DNColorType;
    function IsTheSameObject(image: DNXImage): Boolean;
    function GetNameInCollection: string;
    function ToStream: DDN.mscorlib.DNStream;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property ContainsTransparency: Boolean read get_ContainsTransparency;
    property Grayscaled: DDN.System.Drawing.DNImage read get_Grayscaled;
    property FilterType: DNImageFilterType read get_FilterType;
    property Width: Int32 read get_Width;
    property Height: Int32 read get_Height;
    property Name: string read get_Name write set_Name;
    property Metadata: DNMetadata read get_Metadata;
  end;

  TDNXImage = class(TDNGenericImport<DNXImageClass, DNXImage>) end;

  //-------------namespace: Aspose.Pdf----------------
  DNXImageCollectionClass = interface(DDN.mscorlib.DNObjectClass)
  ['{3911A4EF-77F6-515F-8B08-68A607F26235}']
  end;

  [DNTypeName('Aspose.Pdf.XImageCollection')]
  DNXImageCollection = interface(DDN.mscorlib.DNObject)
  ['{58CEB66A-780F-3CD0-9C27-1161D25FD6E5}']
  { getters & setters } 

    function get_Count: Int32;
    function get_IsSynchronized: Boolean;
    function get_SyncRoot: DDN.mscorlib.DNObject;
    function get_Names: TArray<string>;
    function get_IsReadOnly: Boolean;
    function get_Item(index: Int32): DNXImage; overload;
    function get_Item(name: string): DNXImage; overload;

  { methods } 

    function Add(image: DNXImage): string; overload;
    function Add(image: DDN.mscorlib.DNStream): string; overload;
    procedure Add(image: DDN.mscorlib.DNStream; filterType: DNImageFilterType); overload;
    procedure Add(image: DDN.mscorlib.DNStream; quality: Int32); overload;
    procedure Delete(index: Int32); overload;
    procedure Delete(index: Int32; action: DNImageDeleteAction); overload;
    procedure Delete(name: string); overload;
    procedure Delete(name: string; action: DNImageDeleteAction); overload;
    procedure Delete; overload;
    function GetEnumerator: DDN.mscorlib.DNIEnumerator<DNXImage>;
    procedure CopyTo(&array: TArray<DNXImage>; index: Int32);
    procedure Replace(index: Int32; stream: DDN.mscorlib.DNStream); overload;
    procedure Replace(index: Int32; stream: DDN.mscorlib.DNStream; quality: Int32; isBlackAndWhite: Boolean); overload;
    procedure Replace(index: Int32; stream: DDN.mscorlib.DNStream; quality: Int32); overload;
    function GetImageName(image: DNXImage): string;
    function &Contains(item: DNXImage): Boolean;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Count: Int32 read get_Count;
    property IsSynchronized: Boolean read get_IsSynchronized;
    property SyncRoot: DDN.mscorlib.DNObject read get_SyncRoot;
    property Names: TArray<string> read get_Names;
    property IsReadOnly: Boolean read get_IsReadOnly;
    property Item[index: Int32]: DNXImage read get_Item; default;
    property Item[name: string]: DNXImage read get_Item; default;
  end;

  TDNXImageCollection = class(TDNGenericImport<DNXImageCollectionClass, DNXImageCollection>) end;

  //-------------namespace: Aspose.Pdf----------------
  DNXmpFieldClass = interface(DDN.mscorlib.DNObjectClass)
  ['{81CDB915-AC81-53C8-AE20-4AB20EEA68CE}']
  { static getter & setter } 

    {class} function get_Empty: DNXmpField;
    {class} function get_Lang: DNXmpField;

  { static propertys } 

    {class} property Empty: DNXmpField read get_Empty;
    {class} property Lang: DNXmpField read get_Lang;
  end;

  [DNTypeName('Aspose.Pdf.XmpField')]
  DNXmpField = interface(DDN.mscorlib.DNObject)
  ['{7A4329B5-D4F7-3965-B211-9986AE27A5BF}']
  { getters & setters } 

    function get_Prefix: string;
    procedure set_Prefix(value: string);
    function get_NamespaceUri: string;
    procedure set_NamespaceUri(value: string);
    function get_LocalName: string;
    procedure set_LocalName(value: string);
    function get_Name: string;
    function get_Value: DNXmpValue;
    function get_FieldType: DNXmpFieldType;
    function get_IsEmpty: Boolean;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function ToStructure: TArray<DNXmpField>;
    function ToArray: TArray<DNXmpValue>;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Prefix: string read get_Prefix write set_Prefix;
    property NamespaceUri: string read get_NamespaceUri write set_NamespaceUri;
    property LocalName: string read get_LocalName write set_LocalName;
    property Name: string read get_Name;
    property Value: DNXmpValue read get_Value;
    property FieldType: DNXmpFieldType read get_FieldType;
    property IsEmpty: Boolean read get_IsEmpty;
  end;

  TDNXmpField = class(TDNGenericImport<DNXmpFieldClass, DNXmpField>) end;

  //-------------namespace: Aspose.Pdf----------------
  DNXmpPdfAExtensionObjectClass = interface(DDN.mscorlib.DNObjectClass)
  ['{01DE5DC7-C6D5-5690-A0FA-CD58A168F91B}']
  end;

  [DNTypeName('Aspose.Pdf.XmpPdfAExtensionObject')]
  DNXmpPdfAExtensionObject = interface(DDN.mscorlib.DNObject)
  ['{DA6429F5-D8BB-3DCE-B491-F53BC40AE033}']
  { getters & setters } 

    function get_Description: string;
    function get_Value: string;
    procedure set_Value(value: string);

  { methods } 

    function GetXml(xmlDocument: DDN.System.Xml.DNXmlDocument): DDN.mscorlib.DNList<DDN.System.Xml.DNXmlElement>;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Description: string read get_Description;
    property Value: string read get_Value write set_Value;
  end;

  TDNXmpPdfAExtensionObject = class(TDNGenericImport<DNXmpPdfAExtensionObjectClass, DNXmpPdfAExtensionObject>) end;

  //-------------namespace: Aspose.Pdf----------------
  DNXmpPdfAExtensionFieldClass = interface(DNXmpPdfAExtensionObjectClass)
  ['{A5C04197-E988-5DCE-81D9-A9A7273A90BC}']
  { constructors } 

    {class} function init(name: string; value: string; valueType: string; description: string): DNXmpPdfAExtensionField;

  end;

  [DNTypeName('Aspose.Pdf.XmpPdfAExtensionField')]
  DNXmpPdfAExtensionField = interface(DNXmpPdfAExtensionObject)
  ['{BF196ACC-739D-3880-A6EF-D2B4EAD8C590}']
  { getters & setters } 

    function get_Name: string;
    function get_ValueType: string;
    function get_Description: string;
    function get_Value: string;
    procedure set_Value(value: string);

  { methods } 

    function GetXml(xmlDocument: DDN.System.Xml.DNXmlDocument): DDN.mscorlib.DNList<DDN.System.Xml.DNXmlElement>;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Name: string read get_Name;
    property ValueType: string read get_ValueType;
    property Description: string read get_Description;
    property Value: string read get_Value write set_Value;
  end;

  TDNXmpPdfAExtensionField = class(TDNGenericImport<DNXmpPdfAExtensionFieldClass, DNXmpPdfAExtensionField>) end;

  //-------------namespace: Aspose.Pdf----------------
  DNXmpPdfAExtensionPropertyClass = interface(DNXmpPdfAExtensionFieldClass)
  ['{1A30C86D-9988-5E35-A645-9DC8AC35D79B}']
  { constructors } 

    {class} function init(name: string; value: string; valueType: string; category: DNXmpPdfAExtensionCategoryType; description: string): DNXmpPdfAExtensionProperty;

  end;

  [DNTypeName('Aspose.Pdf.XmpPdfAExtensionProperty')]
  DNXmpPdfAExtensionProperty = interface(DNXmpPdfAExtensionField)
  ['{DE1A9211-F799-3EFD-A300-0C96E6A5D692}']
  { getters & setters } 

    function get_Category: DNXmpPdfAExtensionCategoryType;
    function get_Name: string;
    function get_ValueType: string;
    function get_Description: string;
    function get_Value: string;
    procedure set_Value(value: string);

  { methods } 

    function GetXml(xmlDocument: DDN.System.Xml.DNXmlDocument): DDN.mscorlib.DNList<DDN.System.Xml.DNXmlElement>;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Category: DNXmpPdfAExtensionCategoryType read get_Category;
    property Name: string read get_Name;
    property ValueType: string read get_ValueType;
    property Description: string read get_Description;
    property Value: string read get_Value write set_Value;
  end;

  TDNXmpPdfAExtensionProperty = class(TDNGenericImport<DNXmpPdfAExtensionPropertyClass, DNXmpPdfAExtensionProperty>) end;

  //-------------namespace: Aspose.Pdf----------------
  DNXmpPdfAExtensionValueTypeClass = interface(DNXmpPdfAExtensionObjectClass)
  ['{953376F1-680A-5F0B-AF09-8233E127FEAE}']
  { constructors } 

    {class} function init(&type: string; namespaceUri: string; prefix: string; description: string): DNXmpPdfAExtensionValueType;

  end;

  [DNTypeName('Aspose.Pdf.XmpPdfAExtensionValueType')]
  DNXmpPdfAExtensionValueType = interface(DNXmpPdfAExtensionObject)
  ['{39F9126D-2F78-3DD7-B909-67BB88AD30C1}']
  { getters & setters } 

    function get_Type: string;
    function get_NamespaceUri: string;
    function get_Prefix: string;
    function get_Fields: DDN.mscorlib.DNIList<DNXmpPdfAExtensionField>;
    function get_Description: string;
    function get_Value: string;
    procedure set_Value(value: string);

  { methods } 

    procedure Add(field: DNXmpPdfAExtensionField);
    procedure AddRange(fields: TArray<DNXmpPdfAExtensionField>);
    procedure Remove(field: DNXmpPdfAExtensionField);
    procedure Clear;
    function GetXml(xmlDocument: DDN.System.Xml.DNXmlDocument): DDN.mscorlib.DNList<DDN.System.Xml.DNXmlElement>;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property &Type: string read get_Type;
    property NamespaceUri: string read get_NamespaceUri;
    property Prefix: string read get_Prefix;
    property Fields: DDN.mscorlib.DNIList<DNXmpPdfAExtensionField> read get_Fields;
    property Description: string read get_Description;
    property Value: string read get_Value write set_Value;
  end;

  TDNXmpPdfAExtensionValueType = class(TDNGenericImport<DNXmpPdfAExtensionValueTypeClass, DNXmpPdfAExtensionValueType>) end;

  //-------------namespace: Aspose.Pdf----------------
  DNXmpPdfAExtensionSchemaClass = interface(DDN.mscorlib.DNObjectClass)
  ['{02D924C3-8612-53BA-89A9-C74719BD2034}']
  { constructors } 

    {class} function init(description: DNXmpPdfAExtensionSchemaDescription): DNXmpPdfAExtensionSchema;

  { static fields getter & setter } 

   function __fakeFieldGet_DefaultExtensionNamespacePrefix: string;
   function __fakeFieldGet_DefaultExtensionNamespaceUri: string;
   function __fakeFieldGet_DefaultSchemaNamespacePrefix: string;
   function __fakeFieldGet_DefaultSchemaNamespaceUri: string;
   function __fakeFieldGet_DefaultPropertyNamespacePrefix: string;
   function __fakeFieldGet_DefaultPropertyNamespaceUri: string;
   function __fakeFieldGet_DefaultValueTypeNamespacePrefix: string;
   function __fakeFieldGet_DefaultValueNamespaceUri: string;
   function __fakeFieldGet_DefaultFieldNamespacePrefix: string;
   function __fakeFieldGet_DefaultFieldNamespaceUri: string;
   function __fakeFieldGet_RdfPrefix: string;
   function __fakeFieldGet_RdfNamespaceURI: string;

  { static fields } 

    {class} property DefaultExtensionNamespacePrefix: string read __fakeFieldGet_DefaultExtensionNamespacePrefix;
    {class} property DefaultExtensionNamespaceUri: string read __fakeFieldGet_DefaultExtensionNamespaceUri;
    {class} property DefaultSchemaNamespacePrefix: string read __fakeFieldGet_DefaultSchemaNamespacePrefix;
    {class} property DefaultSchemaNamespaceUri: string read __fakeFieldGet_DefaultSchemaNamespaceUri;
    {class} property DefaultPropertyNamespacePrefix: string read __fakeFieldGet_DefaultPropertyNamespacePrefix;
    {class} property DefaultPropertyNamespaceUri: string read __fakeFieldGet_DefaultPropertyNamespaceUri;
    {class} property DefaultValueTypeNamespacePrefix: string read __fakeFieldGet_DefaultValueTypeNamespacePrefix;
    {class} property DefaultValueNamespaceUri: string read __fakeFieldGet_DefaultValueNamespaceUri;
    {class} property DefaultFieldNamespacePrefix: string read __fakeFieldGet_DefaultFieldNamespacePrefix;
    {class} property DefaultFieldNamespaceUri: string read __fakeFieldGet_DefaultFieldNamespaceUri;
    {class} property RdfPrefix: string read __fakeFieldGet_RdfPrefix;
    {class} property RdfNamespaceURI: string read __fakeFieldGet_RdfNamespaceURI;

  end;

  [DNTypeName('Aspose.Pdf.XmpPdfAExtensionSchema')]
  DNXmpPdfAExtensionSchema = interface(DDN.mscorlib.DNObject)
  ['{492BD78B-7D73-31D6-BAF6-82EB6CC6F45B}']
  { getters & setters } 

    function get_Description: DNXmpPdfAExtensionSchemaDescription;
    function get_Objects: DDN.mscorlib.DNList<DNXmpPdfAExtensionObject>;

  { methods } 

    procedure Add(obj: DNXmpPdfAExtensionObject);
    function &Contains(obj: DNXmpPdfAExtensionObject): Boolean;
    procedure Remove(obj: DNXmpPdfAExtensionObject);
    function GetSchemaXml(xmlDocument: DDN.System.Xml.DNXmlDocument): DDN.System.Xml.DNXmlElement;
    procedure GetValuesXml(xmlDocument: DDN.System.Xml.DNXmlDocument; rootElement: DDN.System.Xml.DNXmlElement);
    function GetProperty(name: string): DNXmpPdfAExtensionProperty;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Description: DNXmpPdfAExtensionSchemaDescription read get_Description;
    property Objects: DDN.mscorlib.DNList<DNXmpPdfAExtensionObject> read get_Objects;
  end;

  TDNXmpPdfAExtensionSchema = class(TDNGenericImport<DNXmpPdfAExtensionSchemaClass, DNXmpPdfAExtensionSchema>)
  public const
   DefaultExtensionNamespacePrefix = 'pdfaExtension';
   DefaultExtensionNamespaceUri = 'http://www.aiim.org/pdfa/ns/extension/';
   DefaultSchemaNamespacePrefix = 'pdfaSchema';
   DefaultSchemaNamespaceUri = 'http://www.aiim.org/pdfa/ns/schema#';
   DefaultPropertyNamespacePrefix = 'pdfaProperty';
   DefaultPropertyNamespaceUri = 'http://www.aiim.org/pdfa/ns/property#';
   DefaultValueTypeNamespacePrefix = 'pdfaType';
   DefaultValueNamespaceUri = 'http://www.aiim.org/pdfa/ns/type#';
   DefaultFieldNamespacePrefix = 'pdfaField';
   DefaultFieldNamespaceUri = 'http://www.aiim.org/pdfa/ns/field#';
   RdfPrefix = 'rdf';
   RdfNamespaceURI = 'http://www.w3.org/1999/02/22-rdf-syntax-ns#';
  end;

  //-------------namespace: Aspose.Pdf----------------
  DNXmpPdfAExtensionSchemaDescriptionClass = interface(DDN.mscorlib.DNObjectClass)
  ['{354525BF-BCF6-55D5-8819-6A7556785D88}']
  { constructors } 

    {class} function init(prefix: string; namespaceURI: string; description: string): DNXmpPdfAExtensionSchemaDescription;

  end;

  [DNTypeName('Aspose.Pdf.XmpPdfAExtensionSchemaDescription')]
  DNXmpPdfAExtensionSchemaDescription = interface(DDN.mscorlib.DNObject)
  ['{AC447CE0-0B1B-3945-9A63-A3ADD8509071}']
  { getters & setters } 

    function get_Prefix: string;
    function get_NamespaceURI: string;
    function get_Description: string;

  { methods } 

    function GetXml(xmlDocument: DDN.System.Xml.DNXmlDocument): DDN.mscorlib.DNList<DDN.System.Xml.DNXmlElement>;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Prefix: string read get_Prefix;
    property NamespaceURI: string read get_NamespaceURI;
    property Description: string read get_Description;
  end;

  TDNXmpPdfAExtensionSchemaDescription = class(TDNGenericImport<DNXmpPdfAExtensionSchemaDescriptionClass, DNXmpPdfAExtensionSchemaDescription>) end;

  //-------------namespace: Aspose.Pdf----------------
  DNXmpValueClass = interface(DDN.mscorlib.DNObjectClass)
  ['{EB1B1870-5B54-5B5B-9491-40380ECF9784}']
  { constructors } 

    {class} function init(value: string): DNXmpValue; overload;
    {class} function init(value: Int32): DNXmpValue; overload;
    {class} function init(value: Double): DNXmpValue; overload;
    {class} function init(value: DDN.mscorlib.DNDateTime): DNXmpValue; overload;
    {class} function init(&array: TArray<DNXmpValue>): DNXmpValue; overload;

  end;

  [DNTypeName('Aspose.Pdf.XmpValue')]
  DNXmpValue = interface(DDN.mscorlib.DNObject)
  ['{AF69B09B-E829-3113-942E-7F064F4FBD38}']
  { getters & setters } 

    function get_IsString: Boolean;
    function get_IsInteger: Boolean;
    function get_IsDouble: Boolean;
    function get_IsDateTime: Boolean;
    function get_IsField: Boolean;
    function get_IsNamedValue: Boolean;
    function get_IsNamedValues: Boolean;
    function get_IsStructure: Boolean;
    function get_IsArray: Boolean;

  { methods } 

    function ToStringValue: string;
    function ToInteger: Int32;
    function ToDouble: Double;
    function ToDateTime: DDN.mscorlib.DNDateTime;
    function ToArray: TArray<DNXmpValue>;
    function ToStructure: TArray<DNXmpField>;
    function ToField: DNXmpField;
    function ToNamedValue: DDN.mscorlib.DNKeyValuePair<string, DNXmpValue>;
    function ToNamedValues: TArray<DDN.mscorlib.DNKeyValuePair<string, DNXmpValue>>;
    function ToString: string; overload;
    function ToString(formatProvider: DDN.mscorlib.DNIFormatProvider): string; overload;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    property IsString: Boolean read get_IsString;
    property IsInteger: Boolean read get_IsInteger;
    property IsDouble: Boolean read get_IsDouble;
    property IsDateTime: Boolean read get_IsDateTime;
    property IsField: Boolean read get_IsField;
    property IsNamedValue: Boolean read get_IsNamedValue;
    property IsNamedValues: Boolean read get_IsNamedValues;
    property IsStructure: Boolean read get_IsStructure;
    property IsArray: Boolean read get_IsArray;
  end;

  TDNXmpValue = class(TDNGenericImport<DNXmpValueClass, DNXmpValue>) end;

  //-------------namespace: Aspose.Pdf----------------
  DNDocumentInfoClass = interface(DDN.mscorlib.DNDictionaryClass<string, string>)
  ['{57EC4FC6-07C8-5A84-BB39-1BCB2ADC24C6}']
  { constructors } 

    {class} function init(document: DNDocument): DNDocumentInfo;

  { static methods } 

    {class} function IsPredefinedKey(key: string): Boolean;

  end;

  [DNTypeName('Aspose.Pdf.DocumentInfo')]
  DNDocumentInfo = interface(DDN.mscorlib.DNDictionary<string, string>)
  ['{32E3518C-D2BA-346D-A891-823C271DF56F}']
  { getters & setters } 

    function get_Title: string;
    procedure set_Title(value: string);
    function get_Creator: string;
    procedure set_Creator(value: string);
    function get_Author: string;
    procedure set_Author(value: string);
    function get_Subject: string;
    procedure set_Subject(value: string);
    function get_Keywords: string;
    procedure set_Keywords(value: string);
    function get_Producer: string;
    procedure set_Producer(value: string);
    function get_CreationDate: DDN.mscorlib.DNDateTime;
    procedure set_CreationDate(value: DDN.mscorlib.DNDateTime);
    function get_CreationTimeZone: DDN.mscorlib.DNTimeSpan;
    procedure set_CreationTimeZone(value: DDN.mscorlib.DNTimeSpan);
    function get_ModTimeZone: DDN.mscorlib.DNTimeSpan;
    procedure set_ModTimeZone(value: DDN.mscorlib.DNTimeSpan);
    function get_ModDate: DDN.mscorlib.DNDateTime;
    procedure set_ModDate(value: DDN.mscorlib.DNDateTime);
    function get_Trapped: string;
    procedure set_Trapped(value: string);
    function get_Item(key: string): string;
    procedure set_Item(key: string; value: string);
    function get_Comparer: DDN.mscorlib.DNIEqualityComparer<string>;
    function get_Count: Int32;
    function get_Keys: DDN.mscorlib.DNDictionary_KeyCollection<string, string>;
    function get_Values: DDN.mscorlib.DNDictionary_ValueCollection<string, string>;

  { methods } 

    procedure Clear;
    procedure Add(key: string; value: string);
    procedure Remove(key: string);
    procedure ClearCustomData;
    function ContainsKey(key: string): Boolean;
    function ContainsValue(value: string): Boolean;
    function GetEnumerator: DDN.mscorlib.DNDictionary_Enumerator<string, string>;
    function TryGetValue(key: string; out value: string): Boolean;
    procedure GetObjectData(info: DDN.mscorlib.DNSerializationInfo; context: DDN.mscorlib.DNStreamingContext);
    procedure OnDeserialization(sender: DDN.mscorlib.DNObject);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Title: string read get_Title write set_Title;
    property Creator: string read get_Creator write set_Creator;
    property Author: string read get_Author write set_Author;
    property Subject: string read get_Subject write set_Subject;
    property Keywords: string read get_Keywords write set_Keywords;
    property Producer: string read get_Producer write set_Producer;
    property CreationDate: DDN.mscorlib.DNDateTime read get_CreationDate write set_CreationDate;
    property CreationTimeZone: DDN.mscorlib.DNTimeSpan read get_CreationTimeZone write set_CreationTimeZone;
    property ModTimeZone: DDN.mscorlib.DNTimeSpan read get_ModTimeZone write set_ModTimeZone;
    property ModDate: DDN.mscorlib.DNDateTime read get_ModDate write set_ModDate;
    property Trapped: string read get_Trapped write set_Trapped;
    property Item[key: string]: string read get_Item write set_Item; default;
    property Comparer: DDN.mscorlib.DNIEqualityComparer<string> read get_Comparer;
    property Count: Int32 read get_Count;
    property Keys: DDN.mscorlib.DNDictionary_KeyCollection<string, string> read get_Keys;
    property Values: DDN.mscorlib.DNDictionary_ValueCollection<string, string> read get_Values;
  end;

  TDNDocumentInfo = class(TDNGenericImport<DNDocumentInfoClass, DNDocumentInfo>) end;

  //-------------namespace: Aspose.Pdf.Facades----------------
  DNBookmarksClass = interface(DNObjectClass)
  ['{A51ABA36-5972-55DD-B76D-EA59414C1607}']
  { constructors } 

    {class} function init: DNBookmarks;

  end;

  [DNTypeName('Aspose.Pdf.Facades.Bookmarks')]
  DNBookmarks = interface(DNObject)
  ['{FA064CF6-4FF2-33E5-B73A-C4AC49491D4F}']
  { getters & setters } 

    function get_Capacity: Int32;
    procedure set_Capacity(value: Int32);
    function get_Count: Int32;

  { methods } 

    procedure AddRange(collection: DDN.mscorlib.DNIEnumerable<DNBookmark>);
    function AsReadOnly: DDN.mscorlib.DNReadOnlyCollection<DNBookmark>;
    function BinarySearch(index: Int32; count: Int32; item: DNBookmark; comparer: DDN.mscorlib.DNIComparer<DNBookmark>): Int32; overload;
    function BinarySearch(item: DNBookmark): Int32; overload;
    function BinarySearch(item: DNBookmark; comparer: DDN.mscorlib.DNIComparer<DNBookmark>): Int32; overload;
    function &Contains(item: DNBookmark): Boolean;
    procedure CopyTo(&array: TArray<DNBookmark>); overload;
    procedure CopyTo(index: Int32; &array: TArray<DNBookmark>; arrayIndex: Int32; count: Int32); overload;
    procedure CopyTo(&array: TArray<DNBookmark>; arrayIndex: Int32); overload;
    function Exists(match: DDN.mscorlib.DNPredicate<DNBookmark>): Boolean;
    function Find(match: DDN.mscorlib.DNPredicate<DNBookmark>): DNBookmark;
    function FindAll(match: DDN.mscorlib.DNPredicate<DNBookmark>): DDN.mscorlib.DNList<DNBookmark>;
    function FindIndex(match: DDN.mscorlib.DNPredicate<DNBookmark>): Int32; overload;
    function FindIndex(startIndex: Int32; match: DDN.mscorlib.DNPredicate<DNBookmark>): Int32; overload;
    function FindIndex(startIndex: Int32; count: Int32; match: DDN.mscorlib.DNPredicate<DNBookmark>): Int32; overload;
    function FindLast(match: DDN.mscorlib.DNPredicate<DNBookmark>): DNBookmark;
    function FindLastIndex(match: DDN.mscorlib.DNPredicate<DNBookmark>): Int32; overload;
    function FindLastIndex(startIndex: Int32; match: DDN.mscorlib.DNPredicate<DNBookmark>): Int32; overload;
    function FindLastIndex(startIndex: Int32; count: Int32; match: DDN.mscorlib.DNPredicate<DNBookmark>): Int32; overload;
    procedure ForEach(action: DDN.mscorlib.DNAction<DNBookmark>);
    function GetEnumerator: DDN.mscorlib.DNList_Enumerator<DNBookmark>;
    function GetRange(index: Int32; count: Int32): DDN.mscorlib.DNList<DNBookmark>;
    function IndexOf(item: DNBookmark): Int32; overload;
    function IndexOf(item: DNBookmark; index: Int32): Int32; overload;
    function IndexOf(item: DNBookmark; index: Int32; count: Int32): Int32; overload;
    procedure Insert(index: Int32; item: DNBookmark);
    procedure InsertRange(index: Int32; collection: DDN.mscorlib.DNIEnumerable<DNBookmark>);
    function LastIndexOf(item: DNBookmark): Int32; overload;
    function LastIndexOf(item: DNBookmark; index: Int32): Int32; overload;
    function LastIndexOf(item: DNBookmark; index: Int32; count: Int32): Int32; overload;
    function RemoveAll(match: DDN.mscorlib.DNPredicate<DNBookmark>): Int32;
    procedure RemoveAt(index: Int32);
    procedure RemoveRange(index: Int32; count: Int32);
    procedure Reverse; overload;
    procedure Reverse(index: Int32; count: Int32); overload;
    procedure Sort; overload;
    procedure Sort(comparer: DDN.mscorlib.DNIComparer<DNBookmark>); overload;
    procedure Sort(index: Int32; count: Int32; comparer: DDN.mscorlib.DNIComparer<DNBookmark>); overload;
    procedure Sort(comparison: DDN.mscorlib.DNComparison<DNBookmark>); overload;
    function ToArray: TArray<DNBookmark>;
    procedure TrimExcess;
    function TrueForAll(match: DDN.mscorlib.DNPredicate<DNBookmark>): Boolean;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Capacity: Int32 read get_Capacity write set_Capacity;
    property Count: Int32 read get_Count;
  end;

  TDNBookmarks = class(TDNGenericImport<DNBookmarksClass, DNBookmarks>) end;

  //-------------namespace: Aspose.Pdf----------------
  DNPrintControllerClass = interface(DNObjectClass)
  ['{A1585971-3254-5D9E-97EE-73F374CF4E6D}']
  { constructors } 

    {class} function init: DNPrintController;

  end;

  [DNTypeName('Aspose.Pdf.PrintController')]
  DNPrintController = interface(DNObject)
  ['{13399E81-D366-35F8-847C-1FD9D404A7E5}']
  { getters & setters } 

    function get_FileName: string;
    procedure set_FileName(value: string);
    function get_IsPreview: Boolean;

  { methods } 

    function OnStartPage(document: DDN.System.Drawing.DNPrintDocument; e: DDN.System.Drawing.DNPrintPageEventArgs): DDN.System.Drawing.DNGraphics;
    procedure OnStartPrint(document: DDN.System.Drawing.DNPrintDocument; e: DDN.System.Drawing.DNPrintEventArgs);
    procedure OnEndPage(document: DDN.System.Drawing.DNPrintDocument; e: DDN.System.Drawing.DNPrintPageEventArgs);
    procedure OnEndPrint(document: DDN.System.Drawing.DNPrintDocument; e: DDN.System.Drawing.DNPrintEventArgs);
    procedure Dispose;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property FileName: string read get_FileName write set_FileName;
    property IsPreview: Boolean read get_IsPreview;
  end;

  TDNPrintController = class(TDNGenericImport<DNPrintControllerClass, DNPrintController>) end;

  //-------------namespace: Aspose.Pdf----------------
  DNResourceLoadingEventArgsClass = interface(DDN.mscorlib.DNEventArgsClass)
  ['{ACEA708E-CBB9-5F04-92D8-1D6B069960DE}']
  { constructors } 

    {class} function init(uri: string): DNResourceLoadingEventArgs;

  end;

  [DNTypeName('Aspose.Pdf.ResourceLoadingEventArgs')]
  DNResourceLoadingEventArgs = interface(DDN.mscorlib.DNEventArgs)
  ['{46E3DF16-511D-3ABE-8A0D-E5589E677AEF}']
  { getters & setters } 

    function get_Uri: string;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Uri: string read get_Uri;
  end;

  TDNResourceLoadingEventArgs = class(TDNGenericImport<DNResourceLoadingEventArgsClass, DNResourceLoadingEventArgs>) end;

  //-------------namespace: Aspose.Pdf----------------
  DNIncorrectCMapUsageExceptionClass = interface(DDN.mscorlib.DNExceptionClass)
  ['{B9155AC0-9652-5B4A-8B2E-E0ACA6E46693}']
  { constructors } 

    {class} function init(message: string): DNIncorrectCMapUsageException;

  end;

  [DNTypeName('Aspose.Pdf.IncorrectCMapUsageException')]
  DNIncorrectCMapUsageException = interface(DDN.mscorlib.DNException)
  ['{294E3F20-9035-33C1-8B93-E049A02D50BC}']
  { getters & setters } 

    function get_Message: string;
    function get_Data: DDN.mscorlib.DNIDictionary;
    function get_InnerException: DDN.mscorlib.DNException;
    function get_TargetSite: DDN.mscorlib.DNMethodBase;
    function get_StackTrace: string;
    function get_HelpLink: string;
    procedure set_HelpLink(value: string);
    function get_Source: string;
    procedure set_Source(value: string);
    function get_HResult: Int32;

  { methods } 

    function GetBaseException: DDN.mscorlib.DNException;
    function ToString: string;
    procedure GetObjectData(info: DDN.mscorlib.DNSerializationInfo; context: DDN.mscorlib.DNStreamingContext);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    property Message: string read get_Message;
    property Data: DDN.mscorlib.DNIDictionary read get_Data;
    property InnerException: DDN.mscorlib.DNException read get_InnerException;
    property TargetSite: DDN.mscorlib.DNMethodBase read get_TargetSite;
    property StackTrace: string read get_StackTrace;
    property HelpLink: string read get_HelpLink write set_HelpLink;
    property Source: string read get_Source write set_Source;
    property HResult: Int32 read get_HResult;
  end;

  TDNIncorrectCMapUsageException = class(TDNGenericImport<DNIncorrectCMapUsageExceptionClass, DNIncorrectCMapUsageException>) end;

  //-------------namespace: Aspose.Pdf----------------
  DNPdfExceptionClass = interface(DDN.mscorlib.DNExceptionClass)
  ['{DFF6E7A0-A869-57F2-A745-84D08A101358}']
  { constructors } 

    {class} function init: DNPdfException; overload;
    {class} function init(message: string): DNPdfException; overload;
    {class} function init(message: string; innerException: DDN.mscorlib.DNException): DNPdfException; overload;
    {class} function init(innerException: DDN.mscorlib.DNException): DNPdfException; overload;

  end;

  [DNTypeName('Aspose.Pdf.PdfException')]
  DNPdfException = interface(DDN.mscorlib.DNException)
  ['{3955B80E-8CC4-349F-8340-E87F1789C7C6}']
  { getters & setters } 

    function get_Message: string;
    function get_Data: DDN.mscorlib.DNIDictionary;
    function get_InnerException: DDN.mscorlib.DNException;
    function get_TargetSite: DDN.mscorlib.DNMethodBase;
    function get_StackTrace: string;
    function get_HelpLink: string;
    procedure set_HelpLink(value: string);
    function get_Source: string;
    procedure set_Source(value: string);
    function get_HResult: Int32;

  { methods } 

    function GetBaseException: DDN.mscorlib.DNException;
    function ToString: string;
    procedure GetObjectData(info: DDN.mscorlib.DNSerializationInfo; context: DDN.mscorlib.DNStreamingContext);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    property Message: string read get_Message;
    property Data: DDN.mscorlib.DNIDictionary read get_Data;
    property InnerException: DDN.mscorlib.DNException read get_InnerException;
    property TargetSite: DDN.mscorlib.DNMethodBase read get_TargetSite;
    property StackTrace: string read get_StackTrace;
    property HelpLink: string read get_HelpLink write set_HelpLink;
    property Source: string read get_Source write set_Source;
    property HResult: Int32 read get_HResult;
  end;

  TDNPdfException = class(TDNGenericImport<DNPdfExceptionClass, DNPdfException>) end;

  //-------------namespace: Aspose.Pdf----------------
  DNEmptyValueExceptionClass = interface(DNPdfExceptionClass)
  ['{8F03EB80-C24E-59C3-8CDA-9CB4C407DC93}']
  { constructors } 

    {class} function init: DNEmptyValueException; overload;
    {class} function init(message: string): DNEmptyValueException; overload;

  end;

  [DNTypeName('Aspose.Pdf.EmptyValueException')]
  DNEmptyValueException = interface(DNPdfException)
  ['{7F27A0FA-CF89-3C40-92D4-99052C9759F8}']
  { getters & setters } 

    function get_Message: string;
    function get_Data: DDN.mscorlib.DNIDictionary;
    function get_InnerException: DDN.mscorlib.DNException;
    function get_TargetSite: DDN.mscorlib.DNMethodBase;
    function get_StackTrace: string;
    function get_HelpLink: string;
    procedure set_HelpLink(value: string);
    function get_Source: string;
    procedure set_Source(value: string);
    function get_HResult: Int32;

  { methods } 

    function GetBaseException: DDN.mscorlib.DNException;
    function ToString: string;
    procedure GetObjectData(info: DDN.mscorlib.DNSerializationInfo; context: DDN.mscorlib.DNStreamingContext);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    property Message: string read get_Message;
    property Data: DDN.mscorlib.DNIDictionary read get_Data;
    property InnerException: DDN.mscorlib.DNException read get_InnerException;
    property TargetSite: DDN.mscorlib.DNMethodBase read get_TargetSite;
    property StackTrace: string read get_StackTrace;
    property HelpLink: string read get_HelpLink write set_HelpLink;
    property Source: string read get_Source write set_Source;
    property HResult: Int32 read get_HResult;
  end;

  TDNEmptyValueException = class(TDNGenericImport<DNEmptyValueExceptionClass, DNEmptyValueException>) end;

  //-------------namespace: Aspose.Pdf----------------
  DNInvalidFileFormatExceptionClass = interface(DNPdfExceptionClass)
  ['{4D1F01FB-3C37-5C00-9876-87216FEC4EB9}']
  { constructors } 

    {class} function init: DNInvalidFileFormatException; overload;
    {class} function init(message: string): DNInvalidFileFormatException; overload;
    {class} function init(message: string; innerException: DDN.mscorlib.DNException): DNInvalidFileFormatException; overload;
    {class} function init(innerException: DDN.mscorlib.DNException): DNInvalidFileFormatException; overload;

  end;

  [DNTypeName('Aspose.Pdf.InvalidFileFormatException')]
  DNInvalidFileFormatException = interface(DNPdfException)
  ['{A2A4CCCB-BE57-3AD6-8E4B-0CC3180DCCD4}']
  { getters & setters } 

    function get_Message: string;
    function get_Data: DDN.mscorlib.DNIDictionary;
    function get_InnerException: DDN.mscorlib.DNException;
    function get_TargetSite: DDN.mscorlib.DNMethodBase;
    function get_StackTrace: string;
    function get_HelpLink: string;
    procedure set_HelpLink(value: string);
    function get_Source: string;
    procedure set_Source(value: string);
    function get_HResult: Int32;

  { methods } 

    function GetBaseException: DDN.mscorlib.DNException;
    function ToString: string;
    procedure GetObjectData(info: DDN.mscorlib.DNSerializationInfo; context: DDN.mscorlib.DNStreamingContext);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    property Message: string read get_Message;
    property Data: DDN.mscorlib.DNIDictionary read get_Data;
    property InnerException: DDN.mscorlib.DNException read get_InnerException;
    property TargetSite: DDN.mscorlib.DNMethodBase read get_TargetSite;
    property StackTrace: string read get_StackTrace;
    property HelpLink: string read get_HelpLink write set_HelpLink;
    property Source: string read get_Source write set_Source;
    property HResult: Int32 read get_HResult;
  end;

  TDNInvalidFileFormatException = class(TDNGenericImport<DNInvalidFileFormatExceptionClass, DNInvalidFileFormatException>) end;

  //-------------namespace: Aspose.Pdf----------------
  DNIncorrectFontUsageExceptionClass = interface(DNInvalidFileFormatExceptionClass)
  ['{92727253-2CEB-5137-BA4F-2F2914D515F8}']
  { constructors } 

    {class} function init(message: string): DNIncorrectFontUsageException; overload;
    {class} function init(message: string; innerException: DDN.mscorlib.DNException): DNIncorrectFontUsageException; overload;
    {class} function init(innerException: DDN.mscorlib.DNException): DNIncorrectFontUsageException; overload;

  end;

  [DNTypeName('Aspose.Pdf.IncorrectFontUsageException')]
  DNIncorrectFontUsageException = interface(DNInvalidFileFormatException)
  ['{A369FA16-BCE2-33F3-9556-5866B244DAC6}']
  { getters & setters } 

    function get_Message: string;
    function get_Data: DDN.mscorlib.DNIDictionary;
    function get_InnerException: DDN.mscorlib.DNException;
    function get_TargetSite: DDN.mscorlib.DNMethodBase;
    function get_StackTrace: string;
    function get_HelpLink: string;
    procedure set_HelpLink(value: string);
    function get_Source: string;
    procedure set_Source(value: string);
    function get_HResult: Int32;

  { methods } 

    function GetBaseException: DDN.mscorlib.DNException;
    function ToString: string;
    procedure GetObjectData(info: DDN.mscorlib.DNSerializationInfo; context: DDN.mscorlib.DNStreamingContext);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    property Message: string read get_Message;
    property Data: DDN.mscorlib.DNIDictionary read get_Data;
    property InnerException: DDN.mscorlib.DNException read get_InnerException;
    property TargetSite: DDN.mscorlib.DNMethodBase read get_TargetSite;
    property StackTrace: string read get_StackTrace;
    property HelpLink: string read get_HelpLink write set_HelpLink;
    property Source: string read get_Source write set_Source;
    property HResult: Int32 read get_HResult;
  end;

  TDNIncorrectFontUsageException = class(TDNGenericImport<DNIncorrectFontUsageExceptionClass, DNIncorrectFontUsageException>) end;

  //-------------namespace: Aspose.Pdf----------------
  DNInvalidCgmFileFormatExceptionClass = interface(DNInvalidFileFormatExceptionClass)
  ['{6B0614C9-3CC7-5DF1-A0AB-62DC8F154197}']
  { constructors } 

    {class} function init: DNInvalidCgmFileFormatException; overload;
    {class} function init(message: string): DNInvalidCgmFileFormatException; overload;
    {class} function init(message: string; innerException: DDN.mscorlib.DNException): DNInvalidCgmFileFormatException; overload;
    {class} function init(innerException: DDN.mscorlib.DNException): DNInvalidCgmFileFormatException; overload;

  end;

  [DNTypeName('Aspose.Pdf.InvalidCgmFileFormatException')]
  DNInvalidCgmFileFormatException = interface(DNInvalidFileFormatException)
  ['{0F4EBBB3-8991-3D00-B221-9F570C060F1F}']
  { getters & setters } 

    function get_Message: string;
    function get_Data: DDN.mscorlib.DNIDictionary;
    function get_InnerException: DDN.mscorlib.DNException;
    function get_TargetSite: DDN.mscorlib.DNMethodBase;
    function get_StackTrace: string;
    function get_HelpLink: string;
    procedure set_HelpLink(value: string);
    function get_Source: string;
    procedure set_Source(value: string);
    function get_HResult: Int32;

  { methods } 

    function GetBaseException: DDN.mscorlib.DNException;
    function ToString: string;
    procedure GetObjectData(info: DDN.mscorlib.DNSerializationInfo; context: DDN.mscorlib.DNStreamingContext);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    property Message: string read get_Message;
    property Data: DDN.mscorlib.DNIDictionary read get_Data;
    property InnerException: DDN.mscorlib.DNException read get_InnerException;
    property TargetSite: DDN.mscorlib.DNMethodBase read get_TargetSite;
    property StackTrace: string read get_StackTrace;
    property HelpLink: string read get_HelpLink write set_HelpLink;
    property Source: string read get_Source write set_Source;
    property HResult: Int32 read get_HResult;
  end;

  TDNInvalidCgmFileFormatException = class(TDNGenericImport<DNInvalidCgmFileFormatExceptionClass, DNInvalidCgmFileFormatException>) end;

  //-------------namespace: Aspose.Pdf----------------
  DNInvalidPdfFileFormatExceptionClass = interface(DNInvalidFileFormatExceptionClass)
  ['{38DF2511-B55D-59FF-AE70-A62466290BBD}']
  { constructors } 

    {class} function init(message: string): DNInvalidPdfFileFormatException; overload;
    {class} function init(message: string; innerException: DDN.mscorlib.DNException): DNInvalidPdfFileFormatException; overload;
    {class} function init(innerException: DDN.mscorlib.DNException): DNInvalidPdfFileFormatException; overload;

  end;

  [DNTypeName('Aspose.Pdf.InvalidPdfFileFormatException')]
  DNInvalidPdfFileFormatException = interface(DNInvalidFileFormatException)
  ['{CA9E7BB8-5E19-327F-BFFF-AFF1D74639F6}']
  { getters & setters } 

    function get_Message: string;
    function get_Data: DDN.mscorlib.DNIDictionary;
    function get_InnerException: DDN.mscorlib.DNException;
    function get_TargetSite: DDN.mscorlib.DNMethodBase;
    function get_StackTrace: string;
    function get_HelpLink: string;
    procedure set_HelpLink(value: string);
    function get_Source: string;
    procedure set_Source(value: string);
    function get_HResult: Int32;

  { methods } 

    function GetBaseException: DDN.mscorlib.DNException;
    function ToString: string;
    procedure GetObjectData(info: DDN.mscorlib.DNSerializationInfo; context: DDN.mscorlib.DNStreamingContext);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    property Message: string read get_Message;
    property Data: DDN.mscorlib.DNIDictionary read get_Data;
    property InnerException: DDN.mscorlib.DNException read get_InnerException;
    property TargetSite: DDN.mscorlib.DNMethodBase read get_TargetSite;
    property StackTrace: string read get_StackTrace;
    property HelpLink: string read get_HelpLink write set_HelpLink;
    property Source: string read get_Source write set_Source;
    property HResult: Int32 read get_HResult;
  end;

  TDNInvalidPdfFileFormatException = class(TDNGenericImport<DNInvalidPdfFileFormatExceptionClass, DNInvalidPdfFileFormatException>) end;

  //-------------namespace: Aspose.Pdf----------------
  DNInvalidPasswordExceptionClass = interface(DNPdfExceptionClass)
  ['{73163FA5-1C67-52F6-A819-45595CD19ADD}']
  { constructors } 

    {class} function init(message: string): DNInvalidPasswordException; overload;
    {class} function init(message: string; innerException: DDN.mscorlib.DNException): DNInvalidPasswordException; overload;
    {class} function init(innerException: DDN.mscorlib.DNException): DNInvalidPasswordException; overload;

  end;

  [DNTypeName('Aspose.Pdf.InvalidPasswordException')]
  DNInvalidPasswordException = interface(DNPdfException)
  ['{22CEC0AD-3F9A-3EFF-9A91-027CC5D486D3}']
  { getters & setters } 

    function get_Message: string;
    function get_Data: DDN.mscorlib.DNIDictionary;
    function get_InnerException: DDN.mscorlib.DNException;
    function get_TargetSite: DDN.mscorlib.DNMethodBase;
    function get_StackTrace: string;
    function get_HelpLink: string;
    procedure set_HelpLink(value: string);
    function get_Source: string;
    procedure set_Source(value: string);
    function get_HResult: Int32;

  { methods } 

    function GetBaseException: DDN.mscorlib.DNException;
    function ToString: string;
    procedure GetObjectData(info: DDN.mscorlib.DNSerializationInfo; context: DDN.mscorlib.DNStreamingContext);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    property Message: string read get_Message;
    property Data: DDN.mscorlib.DNIDictionary read get_Data;
    property InnerException: DDN.mscorlib.DNException read get_InnerException;
    property TargetSite: DDN.mscorlib.DNMethodBase read get_TargetSite;
    property StackTrace: string read get_StackTrace;
    property HelpLink: string read get_HelpLink write set_HelpLink;
    property Source: string read get_Source write set_Source;
    property HResult: Int32 read get_HResult;
  end;

  TDNInvalidPasswordException = class(TDNGenericImport<DNInvalidPasswordExceptionClass, DNInvalidPasswordException>) end;

  //-------------namespace: Aspose.Pdf----------------
  DNInvalidValueFormatExceptionClass = interface(DNPdfExceptionClass)
  ['{5DD1E803-10F9-5FF6-9920-E3B1BA20360E}']
  { constructors } 

    {class} function init: DNInvalidValueFormatException; overload;
    {class} function init(message: string): DNInvalidValueFormatException; overload;

  end;

  [DNTypeName('Aspose.Pdf.InvalidValueFormatException')]
  DNInvalidValueFormatException = interface(DNPdfException)
  ['{539B8128-1DF8-37A6-8BCE-1D9A2118F0DE}']
  { getters & setters } 

    function get_Message: string;
    function get_Data: DDN.mscorlib.DNIDictionary;
    function get_InnerException: DDN.mscorlib.DNException;
    function get_TargetSite: DDN.mscorlib.DNMethodBase;
    function get_StackTrace: string;
    function get_HelpLink: string;
    procedure set_HelpLink(value: string);
    function get_Source: string;
    procedure set_Source(value: string);
    function get_HResult: Int32;

  { methods } 

    function GetBaseException: DDN.mscorlib.DNException;
    function ToString: string;
    procedure GetObjectData(info: DDN.mscorlib.DNSerializationInfo; context: DDN.mscorlib.DNStreamingContext);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    property Message: string read get_Message;
    property Data: DDN.mscorlib.DNIDictionary read get_Data;
    property InnerException: DDN.mscorlib.DNException read get_InnerException;
    property TargetSite: DDN.mscorlib.DNMethodBase read get_TargetSite;
    property StackTrace: string read get_StackTrace;
    property HelpLink: string read get_HelpLink write set_HelpLink;
    property Source: string read get_Source write set_Source;
    property HResult: Int32 read get_HResult;
  end;

  TDNInvalidValueFormatException = class(TDNGenericImport<DNInvalidValueFormatExceptionClass, DNInvalidValueFormatException>) end;

  //-------------namespace: Aspose.Pdf.Tagged----------------
  DNTaggedExceptionClass = interface(DNPdfExceptionClass)
  ['{65097AD1-5E71-575C-B49E-6D3644EFF8B8}']
  { constructors } 

    {class} function init: DNTaggedException;

  end;

  [DNTypeName('Aspose.Pdf.Tagged.TaggedException')]
  DNTaggedException = interface(DNPdfException)
  ['{42CFE2D5-C628-3B19-8465-2DFDDAE2147A}']
  { getters & setters } 

    function get_Message: string;
    function get_Data: DDN.mscorlib.DNIDictionary;
    function get_InnerException: DDN.mscorlib.DNException;
    function get_TargetSite: DDN.mscorlib.DNMethodBase;
    function get_StackTrace: string;
    function get_HelpLink: string;
    procedure set_HelpLink(value: string);
    function get_Source: string;
    procedure set_Source(value: string);
    function get_HResult: Int32;

  { methods } 

    function GetBaseException: DDN.mscorlib.DNException;
    function ToString: string;
    procedure GetObjectData(info: DDN.mscorlib.DNSerializationInfo; context: DDN.mscorlib.DNStreamingContext);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    property Message: string read get_Message;
    property Data: DDN.mscorlib.DNIDictionary read get_Data;
    property InnerException: DDN.mscorlib.DNException read get_InnerException;
    property TargetSite: DDN.mscorlib.DNMethodBase read get_TargetSite;
    property StackTrace: string read get_StackTrace;
    property HelpLink: string read get_HelpLink write set_HelpLink;
    property Source: string read get_Source write set_Source;
    property HResult: Int32 read get_HResult;
  end;

  TDNTaggedException = class(TDNGenericImport<DNTaggedExceptionClass, DNTaggedException>) end;

  //-------------namespace: Aspose.Pdf.Sanitization----------------
  DNSanitizationExceptionClass = interface(DDN.mscorlib.DNExceptionClass)
  ['{74AE72B9-F071-575E-AAE6-D6BE8A9F1F85}']
  { constructors } 

    {class} function init: DNSanitizationException; overload;
    {class} function init(message: string): DNSanitizationException; overload;
    {class} function init(message: string; innerException: DDN.mscorlib.DNException): DNSanitizationException; overload;
    {class} function init(innerException: DDN.mscorlib.DNException): DNSanitizationException; overload;

  end;

  [DNTypeName('Aspose.Pdf.Sanitization.SanitizationException')]
  DNSanitizationException = interface(DDN.mscorlib.DNException)
  ['{7690483D-5CD7-31A3-89D9-1671A10DD3AF}']
  { getters & setters } 

    function get_Message: string;
    function get_Data: DDN.mscorlib.DNIDictionary;
    function get_InnerException: DDN.mscorlib.DNException;
    function get_TargetSite: DDN.mscorlib.DNMethodBase;
    function get_StackTrace: string;
    function get_HelpLink: string;
    procedure set_HelpLink(value: string);
    function get_Source: string;
    procedure set_Source(value: string);
    function get_HResult: Int32;

  { methods } 

    function GetBaseException: DDN.mscorlib.DNException;
    function ToString: string;
    procedure GetObjectData(info: DDN.mscorlib.DNSerializationInfo; context: DDN.mscorlib.DNStreamingContext);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    property Message: string read get_Message;
    property Data: DDN.mscorlib.DNIDictionary read get_Data;
    property InnerException: DDN.mscorlib.DNException read get_InnerException;
    property TargetSite: DDN.mscorlib.DNMethodBase read get_TargetSite;
    property StackTrace: string read get_StackTrace;
    property HelpLink: string read get_HelpLink write set_HelpLink;
    property Source: string read get_Source write set_Source;
    property HResult: Int32 read get_HResult;
  end;

  TDNSanitizationException = class(TDNGenericImport<DNSanitizationExceptionClass, DNSanitizationException>) end;

  //-------------namespace: Aspose.Pdf----------------
  DNFontEmbeddingExceptionClass = interface(DDN.mscorlib.DNApplicationExceptionClass)
  ['{3B90FBBB-F79A-565B-8DDD-0CC4F37431F8}']
  { constructors } 

    {class} function init(message: string): DNFontEmbeddingException; overload;
    {class} function init(message: string; innerException: DDN.mscorlib.DNException): DNFontEmbeddingException; overload;
    {class} function init(innerException: DDN.mscorlib.DNException): DNFontEmbeddingException; overload;

  end;

  [DNTypeName('Aspose.Pdf.FontEmbeddingException')]
  DNFontEmbeddingException = interface(DDN.mscorlib.DNApplicationException)
  ['{8F1AEE10-16AE-35C2-B505-A7A09DFEB687}']
  { getters & setters } 

    function get_Message: string;
    function get_Data: DDN.mscorlib.DNIDictionary;
    function get_InnerException: DDN.mscorlib.DNException;
    function get_TargetSite: DDN.mscorlib.DNMethodBase;
    function get_StackTrace: string;
    function get_HelpLink: string;
    procedure set_HelpLink(value: string);
    function get_Source: string;
    procedure set_Source(value: string);
    function get_HResult: Int32;

  { methods } 

    function GetBaseException: DDN.mscorlib.DNException;
    function ToString: string;
    procedure GetObjectData(info: DDN.mscorlib.DNSerializationInfo; context: DDN.mscorlib.DNStreamingContext);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    property Message: string read get_Message;
    property Data: DDN.mscorlib.DNIDictionary read get_Data;
    property InnerException: DDN.mscorlib.DNException read get_InnerException;
    property TargetSite: DDN.mscorlib.DNMethodBase read get_TargetSite;
    property StackTrace: string read get_StackTrace;
    property HelpLink: string read get_HelpLink write set_HelpLink;
    property Source: string read get_Source write set_Source;
    property HResult: Int32 read get_HResult;
  end;

  TDNFontEmbeddingException = class(TDNGenericImport<DNFontEmbeddingExceptionClass, DNFontEmbeddingException>) end;

  //-------------namespace: Aspose.Pdf----------------
  DNFontNotFoundExceptionClass = interface(DDN.mscorlib.DNApplicationExceptionClass)
  ['{C5F16BAB-B27E-590D-A565-923AD363018F}']
  { constructors } 

    {class} function init(message: string): DNFontNotFoundException; overload;
    {class} function init(message: string; innerException: DDN.mscorlib.DNException): DNFontNotFoundException; overload;
    {class} function init(innerException: DDN.mscorlib.DNException): DNFontNotFoundException; overload;

  end;

  [DNTypeName('Aspose.Pdf.FontNotFoundException')]
  DNFontNotFoundException = interface(DDN.mscorlib.DNApplicationException)
  ['{EDCF92F2-5B20-3C58-B6CE-B570C636D771}']
  { getters & setters } 

    function get_Message: string;
    function get_Data: DDN.mscorlib.DNIDictionary;
    function get_InnerException: DDN.mscorlib.DNException;
    function get_TargetSite: DDN.mscorlib.DNMethodBase;
    function get_StackTrace: string;
    function get_HelpLink: string;
    procedure set_HelpLink(value: string);
    function get_Source: string;
    procedure set_Source(value: string);
    function get_HResult: Int32;

  { methods } 

    function GetBaseException: DDN.mscorlib.DNException;
    function ToString: string;
    procedure GetObjectData(info: DDN.mscorlib.DNSerializationInfo; context: DDN.mscorlib.DNStreamingContext);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    property Message: string read get_Message;
    property Data: DDN.mscorlib.DNIDictionary read get_Data;
    property InnerException: DDN.mscorlib.DNException read get_InnerException;
    property TargetSite: DDN.mscorlib.DNMethodBase read get_TargetSite;
    property StackTrace: string read get_StackTrace;
    property HelpLink: string read get_HelpLink write set_HelpLink;
    property Source: string read get_Source write set_Source;
    property HResult: Int32 read get_HResult;
  end;

  TDNFontNotFoundException = class(TDNGenericImport<DNFontNotFoundExceptionClass, DNFontNotFoundException>) end;

  //-------------namespace: Aspose.Pdf----------------
  DNUnsupportedFontTypeExceptionClass = interface(DDN.mscorlib.DNApplicationExceptionClass)
  ['{215172CD-3D76-5B07-A7D7-64A0B0B5DC13}']
  { constructors } 

    {class} function init(message: string): DNUnsupportedFontTypeException; overload;
    {class} function init(message: string; innerException: DDN.mscorlib.DNException): DNUnsupportedFontTypeException; overload;
    {class} function init(innerException: DDN.mscorlib.DNException): DNUnsupportedFontTypeException; overload;

  end;

  [DNTypeName('Aspose.Pdf.UnsupportedFontTypeException')]
  DNUnsupportedFontTypeException = interface(DDN.mscorlib.DNApplicationException)
  ['{68B6DF46-D168-3CA8-93C0-C11B3DF4AA87}']
  { getters & setters } 

    function get_Message: string;
    function get_Data: DDN.mscorlib.DNIDictionary;
    function get_InnerException: DDN.mscorlib.DNException;
    function get_TargetSite: DDN.mscorlib.DNMethodBase;
    function get_StackTrace: string;
    function get_HelpLink: string;
    procedure set_HelpLink(value: string);
    function get_Source: string;
    procedure set_Source(value: string);
    function get_HResult: Int32;

  { methods } 

    function GetBaseException: DDN.mscorlib.DNException;
    function ToString: string;
    procedure GetObjectData(info: DDN.mscorlib.DNSerializationInfo; context: DDN.mscorlib.DNStreamingContext);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    property Message: string read get_Message;
    property Data: DDN.mscorlib.DNIDictionary read get_Data;
    property InnerException: DDN.mscorlib.DNException read get_InnerException;
    property TargetSite: DDN.mscorlib.DNMethodBase read get_TargetSite;
    property StackTrace: string read get_StackTrace;
    property HelpLink: string read get_HelpLink write set_HelpLink;
    property Source: string read get_Source write set_Source;
    property HResult: Int32 read get_HResult;
  end;

  TDNUnsupportedFontTypeException = class(TDNGenericImport<DNUnsupportedFontTypeExceptionClass, DNUnsupportedFontTypeException>) end;

  //-------------namespace: Aspose.Pdf----------------
  DNInvalidFormTypeOperationExceptionClass = interface(DDN.mscorlib.DNInvalidOperationExceptionClass)
  ['{0E557BEF-EBC2-55B4-8A9A-F630A87E5761}']
  { constructors } 

    {class} function init: DNInvalidFormTypeOperationException; overload;
    {class} function init(message: string): DNInvalidFormTypeOperationException; overload;
    {class} function init(message: string; innerException: DDN.mscorlib.DNException): DNInvalidFormTypeOperationException; overload;
    {class} function init(innerException: DDN.mscorlib.DNException): DNInvalidFormTypeOperationException; overload;

  end;

  [DNTypeName('Aspose.Pdf.InvalidFormTypeOperationException')]
  DNInvalidFormTypeOperationException = interface(DDN.mscorlib.DNInvalidOperationException)
  ['{036BB5DC-4218-3005-8A27-CFD5CB6F88FF}']
  { getters & setters } 

    function get_Message: string;
    function get_Data: DDN.mscorlib.DNIDictionary;
    function get_InnerException: DDN.mscorlib.DNException;
    function get_TargetSite: DDN.mscorlib.DNMethodBase;
    function get_StackTrace: string;
    function get_HelpLink: string;
    procedure set_HelpLink(value: string);
    function get_Source: string;
    procedure set_Source(value: string);
    function get_HResult: Int32;

  { methods } 

    function GetBaseException: DDN.mscorlib.DNException;
    function ToString: string;
    procedure GetObjectData(info: DDN.mscorlib.DNSerializationInfo; context: DDN.mscorlib.DNStreamingContext);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    property Message: string read get_Message;
    property Data: DDN.mscorlib.DNIDictionary read get_Data;
    property InnerException: DDN.mscorlib.DNException read get_InnerException;
    property TargetSite: DDN.mscorlib.DNMethodBase read get_TargetSite;
    property StackTrace: string read get_StackTrace;
    property HelpLink: string read get_HelpLink write set_HelpLink;
    property Source: string read get_Source write set_Source;
    property HResult: Int32 read get_HResult;
  end;

  TDNInvalidFormTypeOperationException = class(TDNGenericImport<DNInvalidFormTypeOperationExceptionClass, DNInvalidFormTypeOperationException>) end;


implementation

end.
