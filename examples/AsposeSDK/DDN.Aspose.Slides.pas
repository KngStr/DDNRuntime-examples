//----------------------------------------------------------------------------
//  Aspose.Slides.dll: Aspose.Slides, Version=21.6.0.0, Culture=neutral, PublicKeyToken=716fcc553a201e56
//----------------------------------------------------------------------------
//  The code is automatically generated by the GenCodeNET tool.
//----------------------------------------------------------------------------
//  .NET Framework: 4.0
//----------------------------------------------------------------------------
//  UnitName: DDN.Aspose.Slides
//  Author: ying32
//----------------------------------------------------------------------------

unit DDN.Aspose.Slides;

{$IFDEF FPC}
  {$mode delphi}//{$H+}
  {$modeswitch advancedrecords}
  {$modeswitch prefixedattributes} // Custom attributes featureï¼Œfpc3.2.2+
{$ENDIF}

interface

uses
  DDN.Runtime,
  DDN.mscorlib,
  DDN.System.Drawing,
  DDN.System;

type

{ enums }

  //-------------namespace: Aspose.Slides.Animation----------------
  [DNTypeName('Aspose.Slides.Animation.BehaviorAccumulateType')]
  DNBehaviorAccumulateType = type Integer;
  DNBehaviorAccumulateTypeHelper = record helper for DNBehaviorAccumulateType
  public const
    Always = 0;
    None = 1;
    NotDefined = -1;
  end;


  //-------------namespace: Aspose.Slides.Animation----------------
  [DNTypeName('Aspose.Slides.Animation.BehaviorAdditiveType')]
  DNBehaviorAdditiveType = type Integer;
  DNBehaviorAdditiveTypeHelper = record helper for DNBehaviorAdditiveType
  public const
    None = 0;
    Base = 1;
    Sum = 2;
    Replace = 3;
    Multiply = 4;
    NotDefined = -1;
  end;


  //-------------namespace: Aspose.Slides.Animation----------------
  [DNTypeName('Aspose.Slides.Animation.BuildType')]
  DNBuildType = type Integer;
  DNBuildTypeHelper = record helper for DNBuildType
  public const
    AsOneObject = 0;
    AllParagraphsAtOnce = 1;
    ByLevelParagraphs1 = 2;
    ByLevelParagraphs2 = 3;
    ByLevelParagraphs3 = 4;
    ByLevelParagraphs4 = 5;
    ByLevelParagraphs5 = 6;
  end;


  //-------------namespace: Aspose.Slides.Animation----------------
  [DNTypeName('Aspose.Slides.Animation.ColorDirection')]
  DNColorDirection = type Integer;
  DNColorDirectionHelper = record helper for DNColorDirection
  public const
    Clockwise = 0;
    CounterClockwise = 1;
    NotDefined = -1;
  end;


  //-------------namespace: Aspose.Slides.Animation----------------
  [DNTypeName('Aspose.Slides.Animation.ColorSpace')]
  DNColorSpace = type Integer;
  DNColorSpaceHelper = record helper for DNColorSpace
  public const
    RGB = 0;
    HSL = 1;
    NotDefined = -1;
  end;


  //-------------namespace: Aspose.Slides.Animation----------------
  [DNTypeName('Aspose.Slides.Animation.CommandEffectType')]
  DNCommandEffectType = type Integer;
  DNCommandEffectTypeHelper = record helper for DNCommandEffectType
  public const
    Event = 0;
    Call = 1;
    Verb = 2;
    NotDefined = -1;
  end;


  //-------------namespace: Aspose.Slides.Animation----------------
  [DNTypeName('Aspose.Slides.Animation.EffectChartMajorGroupingType')]
  DNEffectChartMajorGroupingType = type Integer;
  DNEffectChartMajorGroupingTypeHelper = record helper for DNEffectChartMajorGroupingType
  public const
    BySeries = 0;
    ByCategory = 1;
  end;


  //-------------namespace: Aspose.Slides.Animation----------------
  [DNTypeName('Aspose.Slides.Animation.EffectChartMinorGroupingType')]
  DNEffectChartMinorGroupingType = type Integer;
  DNEffectChartMinorGroupingTypeHelper = record helper for DNEffectChartMinorGroupingType
  public const
    ByElementInSeries = 0;
    ByElementInCategory = 1;
  end;


  //-------------namespace: Aspose.Slides.Animation----------------
  [DNTypeName('Aspose.Slides.Animation.EffectFillType')]
  DNEffectFillType = type Integer;
  DNEffectFillTypeHelper = record helper for DNEffectFillType
  public const
    Remove = 0;
    Freeze = 1;
    Hold = 2;
    Transition = 3;
    NotDefined = -1;
  end;


  //-------------namespace: Aspose.Slides.Animation----------------
  [DNTypeName('Aspose.Slides.Animation.EffectPresetClassType')]
  DNEffectPresetClassType = type Integer;
  DNEffectPresetClassTypeHelper = record helper for DNEffectPresetClassType
  public const
    Entrance = 0;
    Exit_ = 1;
    Emphasis = 2;
    Path = 3;
    MediaCall = 4;
    OLEActionVerbs = 5;
  end;


  //-------------namespace: Aspose.Slides.Animation----------------
  [DNTypeName('Aspose.Slides.Animation.EffectRestartType')]
  DNEffectRestartType = type Integer;
  DNEffectRestartTypeHelper = record helper for DNEffectRestartType
  public const
    Always = 0;
    WhenNotActive = 1;
    Never = 2;
    NotDefined = -1;
  end;


  //-------------namespace: Aspose.Slides.Animation----------------
  [DNTypeName('Aspose.Slides.Animation.EffectSubtype')]
  DNEffectSubtype = type Integer;
  DNEffectSubtypeHelper = record helper for DNEffectSubtype
  public const
    None = 0;
    Across = 1;
    Bottom = 2;
    BottomLeft = 3;
    BottomRight = 4;
    Center = 5;
    Clockwise = 6;
    CounterClockwise = 7;
    GradualAndCycleClockwise = 8;
    GradualAndCycleCounterClockwise = 9;
    Down = 10;
    DownLeft = 11;
    DownRight = 12;
    FontAllCaps = 13;
    FontBold = 14;
    FontItalic = 15;
    FontShadow = 16;
    FontStrikethrough = 17;
    FontUnderline = 18;
    Gradual = 19;
    Horizontal = 20;
    HorizontalIn = 21;
    HorizontalOut = 22;
    In_ = 23;
    InBottom = 24;
    InCenter = 25;
    InSlightly = 26;
    Instant = 27;
    Left = 28;
    OrdinalMask = 29;
    Out_ = 30;
    OutBottom = 31;
    OutCenter = 32;
    OutSlightly = 33;
    Right = 34;
    Slightly = 35;
    Top = 36;
    TopLeft = 37;
    TopRight = 38;
    Up = 39;
    UpLeft = 40;
    UpRight = 41;
    Vertical = 42;
    VerticalIn = 43;
    VerticalOut = 44;
    Wheel1 = 45;
    Wheel2 = 46;
    Wheel3 = 47;
    Wheel4 = 48;
    Wheel8 = 49;
  end;


  //-------------namespace: Aspose.Slides.Animation----------------
  [DNTypeName('Aspose.Slides.Animation.EffectTriggerType')]
  DNEffectTriggerType = type Integer;
  DNEffectTriggerTypeHelper = record helper for DNEffectTriggerType
  public const
    AfterPrevious = 0;
    OnClick = 1;
    WithPrevious = 2;
  end;


  //-------------namespace: Aspose.Slides.Animation----------------
  [DNTypeName('Aspose.Slides.Animation.EffectType')]
  DNEffectType = type Integer;
  DNEffectTypeHelper = record helper for DNEffectType
  public const
    Appear = 0;
    CurveUpDown = 1;
    Ascend = 2;
    Blast = 3;
    Blinds = 4;
    Blink = 5;
    BoldFlash = 6;
    BoldReveal = 7;
    Boomerang = 8;
    Bounce = 9;
    Box = 10;
    BrushOnColor = 11;
    BrushOnUnderline = 12;
    CenterRevolve = 13;
    ChangeFillColor = 14;
    ChangeFont = 15;
    ChangeFontColor = 16;
    ChangeFontSize = 17;
    ChangeFontStyle = 18;
    ChangeLineColor = 19;
    Checkerboard = 20;
    Circle = 21;
    ColorBlend = 22;
    ColorTypewriter = 23;
    ColorWave = 24;
    ComplementaryColor = 25;
    ComplementaryColor2 = 26;
    Compress = 27;
    ContrastingColor = 28;
    Crawl = 29;
    Credits = 30;
    Custom = 31;
    Darken = 32;
    Desaturate = 33;
    Descend = 34;
    Diamond = 35;
    Dissolve = 36;
    EaseInOut = 37;
    Expand = 38;
    Fade = 39;
    FadedSwivel = 40;
    FadedZoom = 41;
    FlashBulb = 42;
    FlashOnce = 43;
    Flicker = 44;
    Flip = 45;
    Float = 46;
    Fly = 47;
    Fold = 48;
    Glide = 49;
    GrowAndTurn = 50;
    GrowShrink = 51;
    GrowWithColor = 52;
    Lighten = 53;
    LightSpeed = 54;
    MediaPause = 55;
    MediaPlay = 56;
    MediaStop = 57;
    Path4PointStar = 58;
    Path5PointStar = 59;
    Path6PointStar = 60;
    Path8PointStar = 61;
    PathArcDown = 62;
    PathArcLeft = 63;
    PathArcRight = 64;
    PathArcUp = 65;
    PathBean = 66;
    PathBounceLeft = 67;
    PathBounceRight = 68;
    PathBuzzsaw = 69;
    PathCircle = 70;
    PathCrescentMoon = 71;
    PathCurvedSquare = 72;
    PathCurvedX = 73;
    PathCurvyLeft = 74;
    PathCurvyRight = 75;
    PathCurvyStar = 76;
    PathDecayingWave = 77;
    PathDiagonalDownRight = 78;
    PathDiagonalUpRight = 79;
    PathDiamond = 80;
    PathDown = 81;
    PathEqualTriangle = 82;
    PathFigure8Four = 83;
    PathFootball = 84;
    PathFunnel = 85;
    PathHeart = 86;
    PathHeartbeat = 87;
    PathHexagon = 88;
    PathHorizontalFigure8 = 89;
    PathInvertedSquare = 90;
    PathInvertedTriangle = 91;
    PathLeft = 92;
    PathLoopdeLoop = 93;
    PathNeutron = 94;
    PathOctagon = 95;
    PathParallelogram = 96;
    PathPeanut = 97;
    PathPentagon = 98;
    PathPlus = 99;
    PathPointyStar = 100;
    PathRight = 101;
    PathRightTriangle = 102;
    PathSCurve1 = 103;
    PathSCurve2 = 104;
    PathSineWave = 105;
    PathSpiralLeft = 106;
    PathSpiralRight = 107;
    PathSpring = 108;
    PathSquare = 109;
    PathStairsDown = 110;
    PathSwoosh = 111;
    PathTeardrop = 112;
    PathTrapezoid = 113;
    PathTurnDown = 114;
    PathTurnRight = 115;
    PathTurnUp = 116;
    PathTurnUpRight = 117;
    PathUp = 118;
    PathUser = 119;
    PathVerticalFigure8 = 120;
    PathWave = 121;
    PathZigzag = 122;
    Peek = 123;
    Pinwheel = 124;
    Plus = 125;
    RandomBars = 126;
    RandomEffects = 127;
    RiseUp = 128;
    Shimmer = 129;
    Sling = 130;
    Spin = 131;
    Spinner = 132;
    Spiral = 133;
    Split = 134;
    Stretch = 135;
    Strips = 136;
    StyleEmphasis = 137;
    Swish = 138;
    Swivel = 139;
    Teeter = 140;
    Thread = 141;
    Transparency = 142;
    Unfold = 143;
    VerticalGrow = 144;
    Wave = 145;
    Wedge = 146;
    Wheel = 147;
    Whip = 148;
    Wipe = 149;
    Magnify = 150;
    Zoom = 151;
    OLEObjectShow = 152;
    OLEObjectEdit = 153;
    OLEObjectOpen = 154;
  end;


  //-------------namespace: Aspose.Slides.Animation----------------
  [DNTypeName('Aspose.Slides.Animation.FilterEffectRevealType')]
  DNFilterEffectRevealType = type Integer;
  DNFilterEffectRevealTypeHelper = record helper for DNFilterEffectRevealType
  public const
    None = 0;
    In_ = 1;
    Out_ = 2;
    NotDefined = -1;
  end;


  //-------------namespace: Aspose.Slides.Animation----------------
  [DNTypeName('Aspose.Slides.Animation.FilterEffectSubtype')]
  DNFilterEffectSubtype = type Integer;
  DNFilterEffectSubtypeHelper = record helper for DNFilterEffectSubtype
  public const
    None = 0;
    Across = 1;
    Down = 2;
    DownLeft = 3;
    DownRight = 4;
    FromBottom = 5;
    FromLeft = 6;
    FromRight = 7;
    FromTop = 8;
    Horizontal = 9;
    In_ = 10;
    InHorizontal = 11;
    InVertical = 12;
    Left = 13;
    Out_ = 14;
    OutHorizontal = 15;
    OutVertical = 16;
    Right = 17;
    Spokes1 = 18;
    Spokes2 = 19;
    Spokes3 = 20;
    Spokes4 = 21;
    Spokes8 = 22;
    Up = 23;
    UpLeft = 24;
    UpRight = 25;
    Vertical = 26;
  end;


  //-------------namespace: Aspose.Slides.Animation----------------
  [DNTypeName('Aspose.Slides.Animation.FilterEffectType')]
  DNFilterEffectType = type Integer;
  DNFilterEffectTypeHelper = record helper for DNFilterEffectType
  public const
    None = 0;
    Barn = 1;
    Blinds = 2;
    Box = 3;
    Checkerboard = 4;
    Circle = 5;
    Diamond = 6;
    Dissolve = 7;
    Fade = 8;
    Image = 9;
    Pixelate = 10;
    Plus = 11;
    RandomBar = 12;
    Slide = 13;
    Stretch = 14;
    Strips = 15;
    Wedge = 16;
    Wheel = 17;
    Wipe = 18;
  end;


  //-------------namespace: Aspose.Slides.Animation----------------
  [DNTypeName('Aspose.Slides.Animation.MotionCommandPathType')]
  DNMotionCommandPathType = type Integer;
  DNMotionCommandPathTypeHelper = record helper for DNMotionCommandPathType
  public const
    MoveTo = 0;
    LineTo = 1;
    CurveTo = 2;
    CloseLoop = 3;
    End_ = 4;
  end;


  //-------------namespace: Aspose.Slides.Animation----------------
  [DNTypeName('Aspose.Slides.Animation.MotionOriginType')]
  DNMotionOriginType = type Integer;
  DNMotionOriginTypeHelper = record helper for DNMotionOriginType
  public const
    Parent = 0;
    Layout = 1;
    NotDefined = -1;
  end;


  //-------------namespace: Aspose.Slides.Animation----------------
  [DNTypeName('Aspose.Slides.Animation.MotionPathEditMode')]
  DNMotionPathEditMode = type Integer;
  DNMotionPathEditModeHelper = record helper for DNMotionPathEditMode
  public const
    Relative = 0;
    Fixed = 1;
    NotDefined = -1;
  end;


  //-------------namespace: Aspose.Slides.Animation----------------
  [DNTypeName('Aspose.Slides.Animation.MotionPathPointsType')]
  DNMotionPathPointsType = type Integer;
  DNMotionPathPointsTypeHelper = record helper for DNMotionPathPointsType
  public const
    None = 0;
    Auto = 1;
    Corner = 2;
    Straight = 3;
    Smooth = 4;
    CurveAuto = 5;
    CurveCorner = 6;
    CurveStraight = 7;
    CurveSmooth = 8;
  end;


  //-------------namespace: Aspose.Slides.Animation----------------
  [DNTypeName('Aspose.Slides.Animation.PropertyCalcModeType')]
  DNPropertyCalcModeType = type Integer;
  DNPropertyCalcModeTypeHelper = record helper for DNPropertyCalcModeType
  public const
    Discrete = 0;
    Linear = 1;
    Formula = 2;
    NotDefined = -1;
  end;


  //-------------namespace: Aspose.Slides.Animation----------------
  [DNTypeName('Aspose.Slides.Animation.PropertyValueType')]
  DNPropertyValueType = type Integer;
  DNPropertyValueTypeHelper = record helper for DNPropertyValueType
  public const
    String_ = 0;
    Number = 1;
    Color = 2;
    NotDefined = -1;
  end;


  //-------------namespace: Aspose.Slides----------------
  [DNTypeName('Aspose.Slides.AudioPlayModePreset')]
  DNAudioPlayModePreset = type Integer;
  DNAudioPlayModePresetHelper = record helper for DNAudioPlayModePreset
  public const
    Auto = 0;
    OnClick = 1;
    AllSlides = 2;
    InClickSequence = 3;
    Mixed = -1;
  end;


  //-------------namespace: Aspose.Slides----------------
  [DNTypeName('Aspose.Slides.AudioVolumeMode')]
  DNAudioVolumeMode = type Integer;
  DNAudioVolumeModeHelper = record helper for DNAudioVolumeMode
  public const
    Mute = 0;
    Low = 1;
    Medium = 2;
    Loud = 3;
    Mixed = -1;
  end;


  //-------------namespace: Aspose.Slides----------------
  [DNTypeName('Aspose.Slides.BackgroundType')]
  DNBackgroundType = type Integer;
  DNBackgroundTypeHelper = record helper for DNBackgroundType
  public const
    Themed = 0;
    OwnBackground = 1;
    NotDefined = -1;
  end;


  //-------------namespace: Aspose.Slides----------------
  [DNTypeName('Aspose.Slides.BevelPresetType')]
  DNBevelPresetType = type Integer;
  DNBevelPresetTypeHelper = record helper for DNBevelPresetType
  public const
    Angle = 0;
    ArtDeco = 1;
    Circle = 2;
    Convex = 3;
    CoolSlant = 4;
    Cross = 5;
    Divot = 6;
    HardEdge = 7;
    RelaxedInset = 8;
    Riblet = 9;
    Slope = 10;
    SoftRound = 11;
    NotDefined = -1;
  end;


  //-------------namespace: Aspose.Slides----------------
  [DNTypeName('Aspose.Slides.BlackWhiteMode')]
  DNBlackWhiteMode = type Integer;
  DNBlackWhiteModeHelper = record helper for DNBlackWhiteMode
  public const
    Color = 0;
    Automatic = 1;
    Gray = 2;
    LightGray = 3;
    InverseGray = 4;
    GrayWhite = 5;
    BlackGray = 6;
    BlackWhite = 7;
    Black = 8;
    White = 9;
    Hidden = 10;
    NotDefined = -1;
  end;


  //-------------namespace: Aspose.Slides----------------
  [DNTypeName('Aspose.Slides.BulletType')]
  DNBulletType = type Integer;
  DNBulletTypeHelper = record helper for DNBulletType
  public const
    None = 0;
    Symbol = 1;
    Numbered = 2;
    Picture = 3;
    NotDefined = -1;
  end;


  //-------------namespace: Aspose.Slides----------------
  [DNTypeName('Aspose.Slides.CameraPresetType')]
  DNCameraPresetType = type Integer;
  DNCameraPresetTypeHelper = record helper for DNCameraPresetType
  public const
    IsometricBottomDown = 0;
    IsometricBottomUp = 1;
    IsometricLeftDown = 2;
    IsometricLeftUp = 3;
    IsometricOffAxis1Left = 4;
    IsometricOffAxis1Right = 5;
    IsometricOffAxis1Top = 6;
    IsometricOffAxis2Left = 7;
    IsometricOffAxis2Right = 8;
    IsometricOffAxis2Top = 9;
    IsometricOffAxis3Bottom = 10;
    IsometricOffAxis3Left = 11;
    IsometricOffAxis3Right = 12;
    IsometricOffAxis4Bottom = 13;
    IsometricOffAxis4Left = 14;
    IsometricOffAxis4Right = 15;
    IsometricRightDown = 16;
    IsometricRightUp = 17;
    IsometricTopDown = 18;
    IsometricTopUp = 19;
    LegacyObliqueBottom = 20;
    LegacyObliqueBottomLeft = 21;
    LegacyObliqueBottomRight = 22;
    LegacyObliqueFront = 23;
    LegacyObliqueLeft = 24;
    LegacyObliqueRight = 25;
    LegacyObliqueTop = 26;
    LegacyObliqueTopLeft = 27;
    LegacyObliqueTopRight = 28;
    LegacyPerspectiveBottom = 29;
    LegacyPerspectiveBottomLeft = 30;
    LegacyPerspectiveBottomRight = 31;
    LegacyPerspectiveFront = 32;
    LegacyPerspectiveLeft = 33;
    LegacyPerspectiveRight = 34;
    LegacyPerspectiveTop = 35;
    LegacyPerspectiveTopLeft = 36;
    LegacyPerspectiveTopRight = 37;
    ObliqueBottom = 38;
    ObliqueBottomLeft = 39;
    ObliqueBottomRight = 40;
    ObliqueLeft = 41;
    ObliqueRight = 42;
    ObliqueTop = 43;
    ObliqueTopLeft = 44;
    ObliqueTopRight = 45;
    OrthographicFront = 46;
    PerspectiveAbove = 47;
    PerspectiveAboveLeftFacing = 48;
    PerspectiveAboveRightFacing = 49;
    PerspectiveBelow = 50;
    PerspectiveContrastingLeftFacing = 51;
    PerspectiveContrastingRightFacing = 52;
    PerspectiveFront = 53;
    PerspectiveHeroicExtremeLeftFacing = 54;
    PerspectiveHeroicExtremeRightFacing = 55;
    PerspectiveHeroicLeftFacing = 56;
    PerspectiveHeroicRightFacing = 57;
    PerspectiveLeft = 58;
    PerspectiveRelaxed = 59;
    PerspectiveRelaxedModerately = 60;
    PerspectiveRight = 61;
    NotDefined = -1;
  end;


  //-------------namespace: Aspose.Slides.Charts----------------
  [DNTypeName('Aspose.Slides.Charts.AxisAggregationType')]
  DNAxisAggregationType = type Integer;
  DNAxisAggregationTypeHelper = record helper for DNAxisAggregationType
  public const
    ByCategory = 0;
    Automatic = 1;
    ByBinWidth = 2;
    ByNumberOfBins = 3;
  end;


  //-------------namespace: Aspose.Slides.Charts----------------
  [DNTypeName('Aspose.Slides.Charts.AxisPositionType')]
  DNAxisPositionType = type Integer;
  DNAxisPositionTypeHelper = record helper for DNAxisPositionType
  public const
    Bottom = 0;
    Left = 1;
    Right = 2;
    Top = 3;
  end;


  //-------------namespace: Aspose.Slides.Charts----------------
  [DNTypeName('Aspose.Slides.Charts.BubbleSizeRepresentationType')]
  DNBubbleSizeRepresentationType = type Integer;
  DNBubbleSizeRepresentationTypeHelper = record helper for DNBubbleSizeRepresentationType
  public const
    Area = 0;
    Width = 1;
  end;


  //-------------namespace: Aspose.Slides.Charts----------------
  [DNTypeName('Aspose.Slides.Charts.CategoryAxisType')]
  DNCategoryAxisType = type Integer;
  DNCategoryAxisTypeHelper = record helper for DNCategoryAxisType
  public const
    Text = 0;
    Date = 1;
  end;


  //-------------namespace: Aspose.Slides.Charts----------------
  [DNTypeName('Aspose.Slides.Charts.ChartDataSourceType')]
  DNChartDataSourceType = type Integer;
  DNChartDataSourceTypeHelper = record helper for DNChartDataSourceType
  public const
    InternalWorkbook = 0;
    ExternalWorkbook = 1;
  end;


  //-------------namespace: Aspose.Slides.Charts----------------
  [DNTypeName('Aspose.Slides.Charts.ChartShapeType')]
  DNChartShapeType = type Integer;
  DNChartShapeTypeHelper = record helper for DNChartShapeType
  public const
    Box = 0;
    Cone = 1;
    ConeToMax = 2;
    Cylinder = 3;
    Pyramid = 4;
    PyramidToMaximum = 5;
    NotDefined = -1;
  end;


  //-------------namespace: Aspose.Slides.Charts----------------
  [DNTypeName('Aspose.Slides.Charts.ChartType')]
  DNChartType = type Integer;
  DNChartTypeHelper = record helper for DNChartType
  public const
    ClusteredColumn = 0;
    StackedColumn = 1;
    PercentsStackedColumn = 2;
    ClusteredColumn3D = 3;
    StackedColumn3D = 4;
    PercentsStackedColumn3D = 5;
    Column3D = 6;
    ClusteredCylinder = 7;
    StackedCylinder = 8;
    PercentsStackedCylinder = 9;
    Cylinder3D = 10;
    ClusteredCone = 11;
    StackedCone = 12;
    PercentsStackedCone = 13;
    Cone3D = 14;
    ClusteredPyramid = 15;
    StackedPyramid = 16;
    PercentsStackedPyramid = 17;
    Pyramid3D = 18;
    Line = 19;
    StackedLine = 20;
    PercentsStackedLine = 21;
    LineWithMarkers = 22;
    StackedLineWithMarkers = 23;
    PercentsStackedLineWithMarkers = 24;
    Line3D = 25;
    Pie = 26;
    Pie3D = 27;
    PieOfPie = 28;
    ExplodedPie = 29;
    ExplodedPie3D = 30;
    BarOfPie = 31;
    PercentsStackedBar = 32;
    ClusteredBar3D = 33;
    ClusteredBar = 34;
    StackedBar = 35;
    StackedBar3D = 36;
    PercentsStackedBar3D = 37;
    ClusteredHorizontalCylinder = 38;
    StackedHorizontalCylinder = 39;
    PercentsStackedHorizontalCylinder = 40;
    ClusteredHorizontalCone = 41;
    StackedHorizontalCone = 42;
    PercentsStackedHorizontalCone = 43;
    ClusteredHorizontalPyramid = 44;
    StackedHorizontalPyramid = 45;
    PercentsStackedHorizontalPyramid = 46;
    Area = 47;
    StackedArea = 48;
    PercentsStackedArea = 49;
    Area3D = 50;
    StackedArea3D = 51;
    PercentsStackedArea3D = 52;
    ScatterWithMarkers = 53;
    ScatterWithSmoothLinesAndMarkers = 54;
    ScatterWithSmoothLines = 55;
    ScatterWithStraightLinesAndMarkers = 56;
    ScatterWithStraightLines = 57;
    HighLowClose = 58;
    OpenHighLowClose = 59;
    VolumeHighLowClose = 60;
    VolumeOpenHighLowClose = 61;
    Surface3D = 62;
    WireframeSurface3D = 63;
    Contour = 64;
    WireframeContour = 65;
    Doughnut = 66;
    ExplodedDoughnut = 67;
    Bubble = 68;
    BubbleWith3D = 69;
    Radar = 70;
    RadarWithMarkers = 71;
    FilledRadar = 72;
    SeriesOfMixedTypes = 73;
    Treemap = 74;
    Sunburst = 75;
    Histogram = 76;
    ParetoLine = 77;
    BoxAndWhisker = 78;
    Waterfall = 79;
    Funnel = 80;
    Map = 81;
  end;


  //-------------namespace: Aspose.Slides.Charts----------------
  [DNTypeName('Aspose.Slides.Charts.CombinableSeriesTypesGroup')]
  DNCombinableSeriesTypesGroup = type Integer;
  DNCombinableSeriesTypesGroupHelper = record helper for DNCombinableSeriesTypesGroup
  public const
    BarOfPieChart = 0;
    PieOfPieChart = 1;
    DoughnutChart = 2;
    PieChart = 3;
    AreaChart_Area = 4;
    AreaChart_PercentsStackedArea = 5;
    AreaChart_StackedArea = 6;
    BarChart_HorizClustered = 7;
    BarChart_HorizStacked = 8;
    BarChart_HorizPercentsStacked = 9;
    BarChart_VertClustered = 10;
    BarChart_VertStacked = 11;
    BarChart_VertPercentsStacked = 12;
    LineChart_Line = 13;
    LineChart_StackedLine = 14;
    LineChart_PercentsStackedLine = 15;
    RadarChart = 16;
    FilledRadarChart = 17;
    StockHighLowClose = 18;
    StockOpenHighLowClose = 19;
    StockVolumeHighLowClose = 20;
    StockVolumeOpenHighLowClose = 21;
    ScatterStraightMarker = 22;
    ScatterSmoothMarker = 23;
    AreaChart_Area3D = 24;
    AreaChart_StackedArea3D = 25;
    AreaChart_PercentsStackedArea3D = 26;
    Line3DChart = 27;
    Pie3DChart = 28;
    Bar3DChart_Vert = 29;
    Bar3DChart_VertClustered = 30;
    Bar3DChart_VertPercentsStackedColumn3D = 31;
    Bar3DChart_VertPercentsStackedCone = 32;
    Bar3DChart_VertPercentsStackedCylinder = 33;
    Bar3DChart_VertPercentsStackedPyramid = 34;
    Bar3DChart_VertStackedColumn3D = 35;
    Bar3DChart_VertStackedCone = 36;
    Bar3DChart_VertStackedCylinder = 37;
    Bar3DChart_VertStackedPyramid = 38;
    Bar3DChart_HorizClustered = 39;
    Bar3DChart_HorizStackedBar3D = 40;
    Bar3DChart_HorizStackedCone = 41;
    Bar3DChart_HorizStackedCylinder = 42;
    Bar3DChart_HorizStackedPyramid = 43;
    Bar3DChart_HorizPercentsStackedBar3D = 44;
    Bar3DChart_HorizPercentsStackedCone = 45;
    Bar3DChart_HorizPercentsStackedCylinder = 46;
    Bar3DChart_HorizPercentsStackedPyramid = 47;
    SurfaceChart_Contour = 48;
    SurfaceChart_WireframeContour = 49;
    SurfaceChart_Surface3D = 50;
    SurfaceChart_WireframeSurface3D = 51;
    BubbleChart = 52;
    HistogramChart = 53;
    ParetoLineChart = 54;
    BoxAndWhiskerChart = 55;
    WaterfallChart = 56;
    FunnelChart = 57;
    TreemapChart = 58;
    MapChart = 59;
    SunburstChart = 60;
  end;


  //-------------namespace: Aspose.Slides.Charts----------------
  [DNTypeName('Aspose.Slides.Charts.CrossesType')]
  DNCrossesType = type Integer;
  DNCrossesTypeHelper = record helper for DNCrossesType
  public const
    AxisCrossesAtZero = 0;
    Maximum = 1;
    Custom = 2;
  end;


  //-------------namespace: Aspose.Slides.Charts----------------
  [DNTypeName('Aspose.Slides.Charts.DataSourceType')]
  DNDataSourceType = type Integer;
  DNDataSourceTypeHelper = record helper for DNDataSourceType
  public const
    Worksheet = 0;
    StringLiterals = 1;
    DoubleLiterals = 2;
  end;


  //-------------namespace: Aspose.Slides.Charts----------------
  [DNTypeName('Aspose.Slides.Charts.DisplayBlanksAsType')]
  DNDisplayBlanksAsType = type Integer;
  DNDisplayBlanksAsTypeHelper = record helper for DNDisplayBlanksAsType
  public const
    Gap = 0;
    Span = 1;
    Zero = 2;
  end;


  //-------------namespace: Aspose.Slides.Charts----------------
  [DNTypeName('Aspose.Slides.Charts.DisplayUnitType')]
  DNDisplayUnitType = type Integer;
  DNDisplayUnitTypeHelper = record helper for DNDisplayUnitType
  public const
    None = 0;
    Hundreds = 1;
    Thousands = 2;
    TenThousands = 3;
    HundredThousands = 4;
    Millions = 5;
    TenMillions = 6;
    HundredMillions = 7;
    Billions = 8;
    Trillions = 9;
    CustomValue = 10;
  end;


  //-------------namespace: Aspose.Slides.Charts----------------
  [DNTypeName('Aspose.Slides.Charts.ErrorBarType')]
  DNErrorBarType = type Integer;
  DNErrorBarTypeHelper = record helper for DNErrorBarType
  public const
    Both = 0;
    Minus = 1;
    Plus = 2;
  end;


  //-------------namespace: Aspose.Slides.Charts----------------
  [DNTypeName('Aspose.Slides.Charts.ErrorBarValueType')]
  DNErrorBarValueType = type Integer;
  DNErrorBarValueTypeHelper = record helper for DNErrorBarValueType
  public const
    Custom = 0;
    Fixed = 1;
    Percentage = 2;
    StandardDeviation = 3;
    StandardError = 4;
  end;


  //-------------namespace: Aspose.Slides.Charts----------------
  [DNTypeName('Aspose.Slides.Charts.LayoutTargetType')]
  DNLayoutTargetType = type Integer;
  DNLayoutTargetTypeHelper = record helper for DNLayoutTargetType
  public const
    Inner = 0;
    Outer = 1;
  end;


  //-------------namespace: Aspose.Slides.Charts----------------
  [DNTypeName('Aspose.Slides.Charts.LegendDataLabelPosition')]
  DNLegendDataLabelPosition = type Integer;
  DNLegendDataLabelPositionHelper = record helper for DNLegendDataLabelPosition
  public const
    Bottom = 0;
    BestFit = 1;
    Center = 2;
    InsideBase = 3;
    InsideEnd = 4;
    Left = 5;
    OutsideEnd = 6;
    Right = 7;
    Top = 8;
    NotDefined = -1;
  end;


  //-------------namespace: Aspose.Slides.Charts----------------
  [DNTypeName('Aspose.Slides.Charts.LegendPositionType')]
  DNLegendPositionType = type Integer;
  DNLegendPositionTypeHelper = record helper for DNLegendPositionType
  public const
    Bottom = 0;
    Left = 1;
    Right = 2;
    Top = 3;
    TopRight = 4;
  end;


  //-------------namespace: Aspose.Slides.Charts----------------
  [DNTypeName('Aspose.Slides.Charts.MarkerStyleType')]
  DNMarkerStyleType = type Integer;
  DNMarkerStyleTypeHelper = record helper for DNMarkerStyleType
  public const
    Circle = 0;
    Dash = 1;
    Diamond = 2;
    Dot = 3;
    None = 4;
    Picture = 5;
    Plus = 6;
    Square = 7;
    Star = 8;
    Triangle = 9;
    X = 10;
    NotDefined = -1;
  end;


  //-------------namespace: Aspose.Slides.Charts----------------
  [DNTypeName('Aspose.Slides.Charts.ParentLabelLayoutType')]
  DNParentLabelLayoutType = type Integer;
  DNParentLabelLayoutTypeHelper = record helper for DNParentLabelLayoutType
  public const
    Banner = 0;
    None = 1;
    Overlapping = 2;
  end;


  //-------------namespace: Aspose.Slides.Charts----------------
  [DNTypeName('Aspose.Slides.Charts.PictureType')]
  DNPictureType = type Integer;
  DNPictureTypeHelper = record helper for DNPictureType
  public const
    Stack = 0;
    StackScale = 1;
    Stretch = 2;
    NotDefined = -1;
  end;


  //-------------namespace: Aspose.Slides.Charts----------------
  [DNTypeName('Aspose.Slides.Charts.PieSplitType')]
  DNPieSplitType = type Integer;
  DNPieSplitTypeHelper = record helper for DNPieSplitType
  public const
    Default_ = 0;
    Custom = 1;
    ByPercentage = 2;
    ByPos = 3;
    ByValue = 4;
  end;


  //-------------namespace: Aspose.Slides.Charts----------------
  [DNTypeName('Aspose.Slides.Charts.QuartileMethodType')]
  DNQuartileMethodType = type Integer;
  DNQuartileMethodTypeHelper = record helper for DNQuartileMethodType
  public const
    Exclusive = 0;
    Inclusive = 1;
  end;


  //-------------namespace: Aspose.Slides.Charts----------------
  [DNTypeName('Aspose.Slides.Charts.StyleType')]
  DNStyleType = type Integer;
  DNStyleTypeHelper = record helper for DNStyleType
  public const
    Style1 = 0;
    Style2 = 1;
    Style3 = 2;
    Style4 = 3;
    Style5 = 4;
    Style6 = 5;
    Style7 = 6;
    Style8 = 7;
    Style9 = 8;
    Style10 = 9;
    Style11 = 10;
    Style12 = 11;
    Style13 = 12;
    Style14 = 13;
    Style15 = 14;
    Style16 = 15;
    Style17 = 16;
    Style18 = 17;
    Style19 = 18;
    Style20 = 19;
    Style21 = 20;
    Style22 = 21;
    Style23 = 22;
    Style24 = 23;
    Style25 = 24;
    Style26 = 25;
    Style27 = 26;
    Style28 = 27;
    Style29 = 28;
    Style30 = 29;
    Style31 = 30;
    Style32 = 31;
    Style33 = 32;
    Style34 = 33;
    Style35 = 34;
    Style36 = 35;
    Style37 = 36;
    Style38 = 37;
    Style39 = 38;
    Style40 = 39;
    Style41 = 40;
    Style42 = 41;
    Style43 = 42;
    Style44 = 43;
    Style45 = 44;
    Style46 = 45;
    Style47 = 46;
    Style48 = 47;
  end;


  //-------------namespace: Aspose.Slides.Charts----------------
  [DNTypeName('Aspose.Slides.Charts.TickLabelPositionType')]
  DNTickLabelPositionType = type Integer;
  DNTickLabelPositionTypeHelper = record helper for DNTickLabelPositionType
  public const
    High = 0;
    Low = 1;
    NextTo = 2;
    None = 3;
  end;


  //-------------namespace: Aspose.Slides.Charts----------------
  [DNTypeName('Aspose.Slides.Charts.TickMarkType')]
  DNTickMarkType = type Integer;
  DNTickMarkTypeHelper = record helper for DNTickMarkType
  public const
    Cross = 0;
    Inside = 1;
    None = 2;
    Outside = 3;
  end;


  //-------------namespace: Aspose.Slides.Charts----------------
  [DNTypeName('Aspose.Slides.Charts.TimeUnitType')]
  DNTimeUnitType = type Integer;
  DNTimeUnitTypeHelper = record helper for DNTimeUnitType
  public const
    Days = 0;
    Months = 1;
    Years = 2;
  end;


  //-------------namespace: Aspose.Slides.Charts----------------
  [DNTypeName('Aspose.Slides.Charts.TrendlineType')]
  DNTrendlineType = type Integer;
  DNTrendlineTypeHelper = record helper for DNTrendlineType
  public const
    Exponential = 0;
    Linear = 1;
    Logarithmic = 2;
    MovingAverage = 3;
    Polynomial = 4;
    Power = 5;
  end;


  //-------------namespace: Aspose.Slides----------------
  [DNTypeName('Aspose.Slides.ColorSchemeIndex')]
  DNColorSchemeIndex = type Integer;
  DNColorSchemeIndexHelper = record helper for DNColorSchemeIndex
  public const
    Dark1 = 0;
    Light1 = 1;
    Dark2 = 2;
    Light2 = 3;
    Accent1 = 4;
    Accent2 = 5;
    Accent3 = 6;
    Accent4 = 7;
    Accent5 = 8;
    Accent6 = 9;
    Hyperlink = 10;
    FollowedHyperlink = 11;
  end;


  //-------------namespace: Aspose.Slides----------------
  [DNTypeName('Aspose.Slides.ColorStringFormat')]
  DNColorStringFormat = type Integer;
  DNColorStringFormatHelper = record helper for DNColorStringFormat
  public const
    Vml = 0;
  end;


  //-------------namespace: Aspose.Slides----------------
  [DNTypeName('Aspose.Slides.ColorTransformOperation')]
  DNColorTransformOperation = type Integer;
  DNColorTransformOperationHelper = record helper for DNColorTransformOperation
  public const
    Tint = 0;
    Shade = 1;
    Complement = 2;
    Inverse = 3;
    Grayscale = 4;
    SetAlpha = 5;
    AddAlpha = 6;
    MultiplyAlpha = 7;
    SetHue = 8;
    AddHue = 9;
    MultiplyHue = 10;
    SetSaturation = 11;
    AddSaturation = 12;
    MultiplySaturation = 13;
    SetLuminance = 14;
    AddLuminance = 15;
    MultiplyLuminance = 16;
    SetRed = 17;
    AddRed = 18;
    MultiplyRed = 19;
    SetGreen = 20;
    AddGreen = 21;
    MultiplyGreen = 22;
    SetBlue = 23;
    AddBlue = 24;
    MultiplyBlue = 25;
    Gamma = 26;
    InverseGamma = 27;
  end;


  //-------------namespace: Aspose.Slides----------------
  [DNTypeName('Aspose.Slides.ColorType')]
  DNColorType = type Integer;
  DNColorTypeHelper = record helper for DNColorType
  public const
    RGB = 0;
    RGBPercentage = 1;
    HSL = 2;
    Scheme = 3;
    System = 4;
    Preset = 5;
    NotDefined = -1;
  end;


  //-------------namespace: Aspose.Slides----------------
  [DNTypeName('Aspose.Slides.ControlType')]
  DNControlType = type Integer;
  DNControlTypeHelper = record helper for DNControlType
  public const
    WindowsMediaPlayer = 0;
  end;


  //-------------namespace: Aspose.Slides.Export----------------
  [DNTypeName('Aspose.Slides.Export.CommentsPositions')]
  DNCommentsPositions = type Integer;
  DNCommentsPositionsHelper = record helper for DNCommentsPositions
  public const
    None = 0;
    Bottom = 1;
    Right = 2;
  end;


  //-------------namespace: Aspose.Slides.Export----------------
  [DNTypeName('Aspose.Slides.Export.Conformance')]
  DNConformance = type Integer;
  DNConformanceHelper = record helper for DNConformance
  public const
    Ecma376_2006 = 0;
    Iso29500_2008_Transitional = 1;
    Iso29500_2008_Strict = 2;
  end;


  //-------------namespace: Aspose.Slides.Export----------------
  [DNTypeName('Aspose.Slides.Export.EmbedFontCharacters')]
  DNEmbedFontCharacters = type Integer;
  DNEmbedFontCharactersHelper = record helper for DNEmbedFontCharacters
  public const
    OnlyUsed = 0;
    All = 1;
  end;


  //-------------namespace: Aspose.Slides.Export----------------
  [DNTypeName('Aspose.Slides.Export.ImagePixelFormat')]
  DNImagePixelFormat = type Integer;
  DNImagePixelFormatHelper = record helper for DNImagePixelFormat
  public const
    Format1bppIndexed = 1;
    Format4bppIndexed = 4;
    Format8bppIndexed = 8;
    Format24bppRgb = 24;
    Format32bppArgb = 32;
  end;


  //-------------namespace: Aspose.Slides.Export----------------
  [DNTypeName('Aspose.Slides.Export.LinkEmbedDecision')]
  DNLinkEmbedDecision = type Integer;
  DNLinkEmbedDecisionHelper = record helper for DNLinkEmbedDecision
  public const
    Link = 0;
    Embed = 1;
    Ignore = 2;
  end;


  //-------------namespace: Aspose.Slides.Export----------------
  [DNTypeName('Aspose.Slides.Export.NotesPositions')]
  DNNotesPositions = type Integer;
  DNNotesPositionsHelper = record helper for DNNotesPositions
  public const
    None = 0;
    BottomFull = 1;
    BottomTruncated = 2;
  end;


  //-------------namespace: Aspose.Slides.Export----------------
  [DNTypeName('Aspose.Slides.Export.PdfAccessPermissions')]
  DNPdfAccessPermissions = type Integer;
  DNPdfAccessPermissionsHelper = record helper for DNPdfAccessPermissions
  public const
    None = 0;
    PrintDocument = 4;
    ModifyContent = 8;
    CopyTextAndGraphics = 16;
    AddOrModifyFields = 32;
    FillExistingFields = 256;
    ExtractTextAndGraphics = 512;
    AssembleDocument = 1024;
    HighQualityPrint = 2048;
  end;


  //-------------namespace: Aspose.Slides.Export----------------
  [DNTypeName('Aspose.Slides.Export.PdfCompliance')]
  DNPdfCompliance = type Integer;
  DNPdfComplianceHelper = record helper for DNPdfCompliance
  public const
    Pdf15 = 0;
    PdfA1b = 1;
    PdfA1a = 2;
    PdfUa = 3;
  end;


  //-------------namespace: Aspose.Slides.Export----------------
  [DNTypeName('Aspose.Slides.Export.PdfTextCompression')]
  DNPdfTextCompression = type Integer;
  DNPdfTextCompressionHelper = record helper for DNPdfTextCompression
  public const
    None = 0;
    Flate = 1;
  end;


  //-------------namespace: Aspose.Slides.Export----------------
  [DNTypeName('Aspose.Slides.Export.PicturesCompression')]
  DNPicturesCompression = type Integer;
  DNPicturesCompressionHelper = record helper for DNPicturesCompression
  public const
    Dpi330 = 0;
    Dpi220 = 1;
    Dpi150 = 2;
    Dpi96 = 3;
    Dpi72 = 4;
    DocumentResolution = 5;
  end;


  //-------------namespace: Aspose.Slides.Export----------------
  [DNTypeName('Aspose.Slides.Export.SaveFormat')]
  DNSaveFormat = type Integer;
  DNSaveFormatHelper = record helper for DNSaveFormat
  public const
    Ppt = 0;
    Pdf = 1;
    Xps = 2;
    Pptx = 3;
    Ppsx = 4;
    Tiff = 5;
    Odp = 6;
    Pptm = 7;
    Ppsm = 9;
    Potx = 10;
    Potm = 11;
    Html = 13;
    Swf = 15;
    Otp = 17;
    Pps = 19;
    Pot = 20;
    Fodp = 21;
  end;


  //-------------namespace: Aspose.Slides.Export----------------
  [DNTypeName('Aspose.Slides.Export.SvgCoordinateUnit')]
  DNSvgCoordinateUnit = type Integer;
  DNSvgCoordinateUnitHelper = record helper for DNSvgCoordinateUnit
  public const
    Inch = 0;
    Centimeter = 1;
    Millimeter = 2;
    Point = 3;
    Pica = 4;
    Em = 5;
    Ex = 6;
    Pixel = 7;
    Percent = 8;
  end;


  //-------------namespace: Aspose.Slides.Export----------------
  [DNTypeName('Aspose.Slides.Export.SvgEvent')]
  DNSvgEvent = type Integer;
  DNSvgEventHelper = record helper for DNSvgEvent
  public const
    OnFocusIn = 0;
    OnFocusOut = 1;
    OnActivate = 2;
    OnClick = 3;
    OnMouseDown = 4;
    OnMouseUp = 5;
    OnMouseOver = 6;
    OnMouseMove = 7;
    OnMouseOut = 8;
    OnLoad = 9;
    OnUnload = 10;
    OnAbort = 11;
    OnError = 12;
    OnResize = 13;
    OnScroll = 14;
    OnZoom = 15;
    OnBegin = 16;
    OnEnd = 17;
    OnRepeat = 18;
  end;


  //-------------namespace: Aspose.Slides.Export----------------
  [DNTypeName('Aspose.Slides.Export.SvgExternalFontsHandling')]
  DNSvgExternalFontsHandling = type Integer;
  DNSvgExternalFontsHandlingHelper = record helper for DNSvgExternalFontsHandling
  public const
    AddLinksToFontFiles = 0;
    Embed = 1;
    Vectorize = 2;
  end;


  //-------------namespace: Aspose.Slides.Export----------------
  [DNTypeName('Aspose.Slides.Export.TextInheritanceLimit')]
  DNTextInheritanceLimit = type Integer;
  DNTextInheritanceLimitHelper = record helper for DNTextInheritanceLimit
  public const
    All = 0;
    TextBox = 1;
    ParagraphOnly = 2;
  end;


  //-------------namespace: Aspose.Slides.Export----------------
  [DNTypeName('Aspose.Slides.Export.TiffCompressionTypes')]
  DNTiffCompressionTypes = type Integer;
  DNTiffCompressionTypesHelper = record helper for DNTiffCompressionTypes
  public const
    Default_ = 0;
    None = 1;
    CCITT3 = 2;
    CCITT4 = 3;
    LZW = 4;
    RLE = 5;
  end;


  //-------------namespace: Aspose.Slides----------------
  [DNTypeName('Aspose.Slides.FillBlendMode')]
  DNFillBlendMode = type Integer;
  DNFillBlendModeHelper = record helper for DNFillBlendMode
  public const
    Darken = 0;
    Lighten = 1;
    Multiply = 2;
    Overlay = 3;
    Screen = 4;
  end;


  //-------------namespace: Aspose.Slides----------------
  [DNTypeName('Aspose.Slides.FillType')]
  DNFillType = type Integer;
  DNFillTypeHelper = record helper for DNFillType
  public const
    NoFill = 0;
    Solid = 1;
    Gradient = 2;
    Pattern = 3;
    Picture = 4;
    Group = 5;
    NotDefined = -1;
  end;


  //-------------namespace: Aspose.Slides----------------
  [DNTypeName('Aspose.Slides.FontAlignment')]
  DNFontAlignment = type Integer;
  DNFontAlignmentHelper = record helper for DNFontAlignment
  public const
    Automatic = 0;
    Top = 1;
    Center = 2;
    Bottom = 3;
    Baseline = 4;
    Default_ = -1;
  end;


  //-------------namespace: Aspose.Slides----------------
  [DNTypeName('Aspose.Slides.FontCollectionIndex')]
  DNFontCollectionIndex = type Integer;
  DNFontCollectionIndexHelper = record helper for DNFontCollectionIndex
  public const
    None = 0;
    Minor = 1;
    Major = 2;
  end;


  //-------------namespace: Aspose.Slides----------------
  [DNTypeName('Aspose.Slides.FontSubstCondition')]
  DNFontSubstCondition = type Integer;
  DNFontSubstConditionHelper = record helper for DNFontSubstCondition
  public const
    WhenInaccessible = 0;
    Always = 1;
  end;


  //-------------namespace: Aspose.Slides----------------
  [DNTypeName('Aspose.Slides.GradientDirection')]
  DNGradientDirection = type Integer;
  DNGradientDirectionHelper = record helper for DNGradientDirection
  public const
    FromCorner1 = 0;
    FromCorner2 = 1;
    FromCorner3 = 2;
    FromCorner4 = 3;
    FromCenter = 4;
    NotDefined = -1;
  end;


  //-------------namespace: Aspose.Slides----------------
  [DNTypeName('Aspose.Slides.GradientShape')]
  DNGradientShape = type Integer;
  DNGradientShapeHelper = record helper for DNGradientShape
  public const
    Linear = 0;
    Rectangle = 1;
    Radial = 2;
    Path = 3;
    NotDefined = -1;
  end;


  //-------------namespace: Aspose.Slides----------------
  [DNTypeName('Aspose.Slides.HyperlinkActionType')]
  DNHyperlinkActionType = type Integer;
  DNHyperlinkActionTypeHelper = record helper for DNHyperlinkActionType
  public const
    NoAction = 0;
    Hyperlink = 1;
    JumpFirstSlide = 2;
    JumpPreviousSlide = 3;
    JumpNextSlide = 4;
    JumpLastSlide = 5;
    JumpEndShow = 6;
    JumpLastViewedSlide = 7;
    JumpSpecificSlide = 8;
    StartCustomSlideShow = 9;
    OpenFile = 10;
    OpenPresentation = 11;
    StartStopMedia = 12;
    StartMacro = 13;
    StartProgram = 14;
    Unknown = -1;
  end;


  //-------------namespace: Aspose.Slides----------------
  [DNTypeName('Aspose.Slides.HyperlinkColorSource')]
  DNHyperlinkColorSource = type Integer;
  DNHyperlinkColorSourceHelper = record helper for DNHyperlinkColorSource
  public const
    Styles = 0;
    PortionFormat = 1;
  end;


  //-------------namespace: Aspose.Slides----------------
  [DNTypeName('Aspose.Slides.LightingDirection')]
  DNLightingDirection = type Integer;
  DNLightingDirectionHelper = record helper for DNLightingDirection
  public const
    TopLeft = 0;
    Top = 1;
    TopRight = 2;
    Right = 3;
    BottomRight = 4;
    Bottom = 5;
    BottomLeft = 6;
    Left = 7;
    NotDefined = -1;
  end;


  //-------------namespace: Aspose.Slides----------------
  [DNTypeName('Aspose.Slides.LightRigPresetType')]
  DNLightRigPresetType = type Integer;
  DNLightRigPresetTypeHelper = record helper for DNLightRigPresetType
  public const
    Balanced = 0;
    BrightRoom = 1;
    Chilly = 2;
    Contrasting = 3;
    Flat = 4;
    Flood = 5;
    Freezing = 6;
    Glow = 7;
    Harsh = 8;
    LegacyFlat1 = 9;
    LegacyFlat2 = 10;
    LegacyFlat3 = 11;
    LegacyFlat4 = 12;
    LegacyHarsh1 = 13;
    LegacyHarsh2 = 14;
    LegacyHarsh3 = 15;
    LegacyHarsh4 = 16;
    LegacyNormal1 = 17;
    LegacyNormal2 = 18;
    LegacyNormal3 = 19;
    LegacyNormal4 = 20;
    Morning = 21;
    Soft = 22;
    Sunrise = 23;
    Sunset = 24;
    ThreePt = 25;
    TwoPt = 26;
    NotDefined = -1;
  end;


  //-------------namespace: Aspose.Slides----------------
  [DNTypeName('Aspose.Slides.LineAlignment')]
  DNLineAlignment = type Integer;
  DNLineAlignmentHelper = record helper for DNLineAlignment
  public const
    Center = 0;
    Inset = 1;
    NotDefined = -1;
  end;


  //-------------namespace: Aspose.Slides----------------
  [DNTypeName('Aspose.Slides.LineArrowheadLength')]
  DNLineArrowheadLength = type Integer;
  DNLineArrowheadLengthHelper = record helper for DNLineArrowheadLength
  public const
    Short = 0;
    Medium = 1;
    Long = 2;
    NotDefined = -1;
  end;


  //-------------namespace: Aspose.Slides----------------
  [DNTypeName('Aspose.Slides.LineArrowheadStyle')]
  DNLineArrowheadStyle = type Integer;
  DNLineArrowheadStyleHelper = record helper for DNLineArrowheadStyle
  public const
    None = 0;
    Triangle = 1;
    Stealth = 2;
    Diamond = 3;
    Oval = 4;
    Open = 5;
    NotDefined = -1;
  end;


  //-------------namespace: Aspose.Slides----------------
  [DNTypeName('Aspose.Slides.LineArrowheadWidth')]
  DNLineArrowheadWidth = type Integer;
  DNLineArrowheadWidthHelper = record helper for DNLineArrowheadWidth
  public const
    Narrow = 0;
    Medium = 1;
    Wide = 2;
    NotDefined = -1;
  end;


  //-------------namespace: Aspose.Slides----------------
  [DNTypeName('Aspose.Slides.LineCapStyle')]
  DNLineCapStyle = type Integer;
  DNLineCapStyleHelper = record helper for DNLineCapStyle
  public const
    Round = 0;
    Square = 1;
    Flat = 2;
    NotDefined = -1;
  end;


  //-------------namespace: Aspose.Slides----------------
  [DNTypeName('Aspose.Slides.LineDashStyle')]
  DNLineDashStyle = type Integer;
  DNLineDashStyleHelper = record helper for DNLineDashStyle
  public const
    Solid = 0;
    Dot = 1;
    Dash = 2;
    LargeDash = 3;
    DashDot = 4;
    LargeDashDot = 5;
    LargeDashDotDot = 6;
    SystemDash = 7;
    SystemDot = 8;
    SystemDashDot = 9;
    SystemDashDotDot = 10;
    Custom = 11;
    NotDefined = -1;
  end;


  //-------------namespace: Aspose.Slides----------------
  [DNTypeName('Aspose.Slides.LineJoinStyle')]
  DNLineJoinStyle = type Integer;
  DNLineJoinStyleHelper = record helper for DNLineJoinStyle
  public const
    Round = 0;
    Bevel = 1;
    Miter = 2;
    NotDefined = -1;
  end;


  //-------------namespace: Aspose.Slides----------------
  [DNTypeName('Aspose.Slides.LineSketchType')]
  DNLineSketchType = type Integer;
  DNLineSketchTypeHelper = record helper for DNLineSketchType
  public const
    None = 0;
    Curved = 1;
    Freehand = 2;
    Scribble = 3;
    NotDefined = -1;
  end;


  //-------------namespace: Aspose.Slides----------------
  [DNTypeName('Aspose.Slides.LineStyle')]
  DNLineStyle = type Integer;
  DNLineStyleHelper = record helper for DNLineStyle
  public const
    Single = 0;
    ThinThin = 1;
    ThickThin = 2;
    ThinThick = 3;
    ThickBetweenThin = 4;
    NotDefined = -1;
  end;


  //-------------namespace: Aspose.Slides----------------
  [DNTypeName('Aspose.Slides.LoadFormat')]
  DNLoadFormat = type Integer;
  DNLoadFormatHelper = record helper for DNLoadFormat
  public const
    Auto = 0;
    Ppt = 1;
    Pps = 2;
    Pptx = 3;
    Ppsx = 4;
    Odp = 5;
    Potx = 6;
    Pptm = 7;
    Ppsm = 8;
    Potm = 9;
    Otp = 10;
    Ppt95 = 11;
    Pot = 12;
    Fodp = 13;
    Unknown = 255;
  end;


  //-------------namespace: Aspose.Slides----------------
  [DNTypeName('Aspose.Slides.LoadingStreamBehavior')]
  DNLoadingStreamBehavior = type Integer;
  DNLoadingStreamBehaviorHelper = record helper for DNLoadingStreamBehavior
  public const
    ReadStreamAndRelease = 0;
    KeepLocked = 1;
  end;


  //-------------namespace: Aspose.Slides----------------
  [DNTypeName('Aspose.Slides.MaterialPresetType')]
  DNMaterialPresetType = type Integer;
  DNMaterialPresetTypeHelper = record helper for DNMaterialPresetType
  public const
    Clear = 0;
    DkEdge = 1;
    Flat = 2;
    LegacyMatte = 3;
    LegacyMetal = 4;
    LegacyPlastic = 5;
    LegacyWireframe = 6;
    Matte = 7;
    Metal = 8;
    Plastic = 9;
    Powder = 10;
    SoftEdge = 11;
    Softmetal = 12;
    TranslucentPowder = 13;
    WarmMatte = 14;
    NotDefined = -1;
  end;


  //-------------namespace: Aspose.Slides.MathText----------------
  [DNTypeName('Aspose.Slides.MathText.MathDelimiterShape')]
  DNMathDelimiterShape = type Integer;
  DNMathDelimiterShapeHelper = record helper for DNMathDelimiterShape
  public const
    Centered = 0;
    Match = 1;
  end;


  //-------------namespace: Aspose.Slides.MathText----------------
  [DNTypeName('Aspose.Slides.MathText.MathFractionTypes')]
  DNMathFractionTypes = type Integer;
  DNMathFractionTypesHelper = record helper for DNMathFractionTypes
  public const
    Bar = 1;
    Skewed = 2;
    Linear = 3;
    NoBar = 4;
  end;


  //-------------namespace: Aspose.Slides.MathText----------------
  [DNTypeName('Aspose.Slides.MathText.MathFunctionsOfOneArgument')]
  DNMathFunctionsOfOneArgument = type Integer;
  DNMathFunctionsOfOneArgumentHelper = record helper for DNMathFunctionsOfOneArgument
  public const
    Sin = 0;
    Cos = 1;
    Tan = 2;
    Csc = 3;
    Sec = 4;
    Cot = 5;
    HyperbolicSin = 6;
    HyperbolicCos = 7;
    HyperbolicTan = 8;
    HyperbolicCsc = 9;
    HyperbolicSec = 10;
    HyperbolicCot = 11;
    Lg = 12;
    Ln = 13;
    ArcSin = 14;
    ArcCos = 15;
    ArcTan = 16;
    ArcCsc = 17;
    ArcSec = 18;
    ArcCot = 19;
    HyperbolicArcSin = 20;
    HyperbolicArcCos = 21;
    HyperbolicArcTan = 22;
    HyperbolicArcCsc = 23;
    HyperbolicArcSec = 24;
    HyperbolicArcCot = 25;
  end;


  //-------------namespace: Aspose.Slides.MathText----------------
  [DNTypeName('Aspose.Slides.MathText.MathFunctionsOfTwoArguments')]
  DNMathFunctionsOfTwoArguments = type Integer;
  DNMathFunctionsOfTwoArgumentsHelper = record helper for DNMathFunctionsOfTwoArguments
  public const
    Log = 0;
    Lim = 1;
    Min = 2;
    Max = 3;
  end;


  //-------------namespace: Aspose.Slides.MathText----------------
  [DNTypeName('Aspose.Slides.MathText.MathHorizontalAlignment')]
  DNMathHorizontalAlignment = type Integer;
  DNMathHorizontalAlignmentHelper = record helper for DNMathHorizontalAlignment
  public const
    NotDefined = 0;
    Left = 1;
    Center = 2;
    Right = 3;
  end;


  //-------------namespace: Aspose.Slides.MathText----------------
  [DNTypeName('Aspose.Slides.MathText.MathIntegralTypes')]
  DNMathIntegralTypes = type Integer;
  DNMathIntegralTypesHelper = record helper for DNMathIntegralTypes
  public const
    Simple = 0;
    Double = 1;
    Triple = 2;
    Contour = 3;
    Surface = 4;
    Volume = 5;
  end;


  //-------------namespace: Aspose.Slides.MathText----------------
  [DNTypeName('Aspose.Slides.MathText.MathJustification')]
  DNMathJustification = type Integer;
  DNMathJustificationHelper = record helper for DNMathJustification
  public const
    LeftJustified = 1;
    RightJustified = 2;
    Centered = 3;
    CenteredAsGroup = 4;
  end;


  //-------------namespace: Aspose.Slides.MathText----------------
  [DNTypeName('Aspose.Slides.MathText.MathLimitLocations')]
  DNMathLimitLocations = type Integer;
  DNMathLimitLocationsHelper = record helper for DNMathLimitLocations
  public const
    NotDefined = 0;
    UnderOver = 1;
    SubscriptSuperscript = 2;
  end;


  //-------------namespace: Aspose.Slides.MathText----------------
  [DNTypeName('Aspose.Slides.MathText.MathNaryOperatorTypes')]
  DNMathNaryOperatorTypes = type Integer;
  DNMathNaryOperatorTypesHelper = record helper for DNMathNaryOperatorTypes
  public const
    Summation = 0;
    Product = 1;
    CoProduct = 2;
    Intersection = 3;
    Union = 4;
    LogicalAnd = 5;
    LogicalOr = 6;
  end;


  //-------------namespace: Aspose.Slides.MathText----------------
  [DNTypeName('Aspose.Slides.MathText.MathRowSpacingRule')]
  DNMathRowSpacingRule = type Integer;
  DNMathRowSpacingRuleHelper = record helper for DNMathRowSpacingRule
  public const
    SingleLineGap = 0;
    OneAndAHalfLineGap = 1;
    TwoLineGap = 2;
    Exactly = 3;
    Multiple = 4;
  end;


  //-------------namespace: Aspose.Slides.MathText----------------
  [DNTypeName('Aspose.Slides.MathText.MathSpacingRules')]
  DNMathSpacingRules = type Integer;
  DNMathSpacingRulesHelper = record helper for DNMathSpacingRules
  public const
    SingleSpacingGap = 0;
    OneAndHalfSpacingGap = 1;
    DoubleSpacingGap = 2;
    Exactly = 3;
    Multiple = 4;
  end;


  //-------------namespace: Aspose.Slides.MathText----------------
  [DNTypeName('Aspose.Slides.MathText.MathTopBotPositions')]
  DNMathTopBotPositions = type Integer;
  DNMathTopBotPositionsHelper = record helper for DNMathTopBotPositions
  public const
    NotDefined = 0;
    Top = 1;
    Bottom = 2;
  end;


  //-------------namespace: Aspose.Slides.MathText----------------
  [DNTypeName('Aspose.Slides.MathText.MathVerticalAlignment')]
  DNMathVerticalAlignment = type Integer;
  DNMathVerticalAlignmentHelper = record helper for DNMathVerticalAlignment
  public const
    NotDefined = 0;
    Top = 1;
    Center = 2;
    Bottom = 3;
  end;


  //-------------namespace: Aspose.Slides----------------
  [DNTypeName('Aspose.Slides.NullableBool')]
  DNNullableBool = type Integer;
  DNNullableBoolHelper = record helper for DNNullableBool
  public const
    False = 0;
    True = 1;
    NotDefined = -1;
  end;


  //-------------namespace: Aspose.Slides----------------
  [DNTypeName('Aspose.Slides.NumberedBulletStyle')]
  DNNumberedBulletStyle = type Integer;
  DNNumberedBulletStyleHelper = record helper for DNNumberedBulletStyle
  public const
    BulletAlphaLCPeriod = 0;
    BulletAlphaUCPeriod = 1;
    BulletArabicParenRight = 2;
    BulletArabicPeriod = 3;
    BulletRomanLCParenBoth = 4;
    BulletRomanLCParenRight = 5;
    BulletRomanLCPeriod = 6;
    BulletRomanUCPeriod = 7;
    BulletAlphaLCParenBoth = 8;
    BulletAlphaLCParenRight = 9;
    BulletAlphaUCParenBoth = 10;
    BulletAlphaUCParenRight = 11;
    BulletArabicParenBoth = 12;
    BulletArabicPlain = 13;
    BulletRomanUCParenBoth = 14;
    BulletRomanUCParenRight = 15;
    BulletSimpChinPlain = 16;
    BulletSimpChinPeriod = 17;
    BulletCircleNumDBPlain = 18;
    BulletCircleNumWDWhitePlain = 19;
    BulletCircleNumWDBlackPlain = 20;
    BulletTradChinPlain = 21;
    BulletTradChinPeriod = 22;
    BulletArabicAlphaDash = 23;
    BulletArabicAbjadDash = 24;
    BulletHebrewAlphaDash = 25;
    BulletKanjiKoreanPlain = 26;
    BulletKanjiKoreanPeriod = 27;
    BulletArabicDBPlain = 28;
    BulletArabicDBPeriod = 29;
    BulletThaiAlphaPeriod = 30;
    BulletThaiAlphaParenRight = 31;
    BulletThaiAlphaParenBoth = 32;
    BulletThaiNumPeriod = 33;
    BulletThaiNumParenRight = 34;
    BulletThaiNumParenBoth = 35;
    BulletHindiAlphaPeriod = 36;
    BulletHindiNumPeriod = 37;
    BulletKanjiSimpChinDBPeriod = 38;
    BulletHindiNumParenRight = 39;
    BulletHindiAlpha1Period = 40;
    NotDefined = -1;
  end;


  //-------------namespace: Aspose.Slides----------------
  [DNTypeName('Aspose.Slides.Orientation')]
  DNOrientation = type Integer;
  DNOrientationHelper = record helper for DNOrientation
  public const
    Horizontal = 0;
    Vertical = 1;
  end;


  //-------------namespace: Aspose.Slides----------------
  [DNTypeName('Aspose.Slides.PathCommandType')]
  DNPathCommandType = type Integer;
  DNPathCommandTypeHelper = record helper for DNPathCommandType
  public const
    Close = 0;
    MoveTo = 1;
    LineTo = 2;
    ArcTo = 3;
    QuadBezierTo = 4;
    CubicBezierTo = 5;
  end;


  //-------------namespace: Aspose.Slides----------------
  [DNTypeName('Aspose.Slides.PathFillModeType')]
  DNPathFillModeType = type Integer;
  DNPathFillModeTypeHelper = record helper for DNPathFillModeType
  public const
    None = 0;
    Normal = 1;
    Lighten = 2;
    LightenLess = 3;
    Darken = 4;
    DarkenLess = 5;
  end;


  //-------------namespace: Aspose.Slides----------------
  [DNTypeName('Aspose.Slides.PatternStyle')]
  DNPatternStyle = type Integer;
  DNPatternStyleHelper = record helper for DNPatternStyle
  public const
    Unknown = 0;
    Percent05 = 1;
    Percent10 = 2;
    Percent20 = 3;
    Percent25 = 4;
    Percent30 = 5;
    Percent40 = 6;
    Percent50 = 7;
    Percent60 = 8;
    Percent70 = 9;
    Percent75 = 10;
    Percent80 = 11;
    Percent90 = 12;
    DarkHorizontal = 13;
    DarkVertical = 14;
    DarkDownwardDiagonal = 15;
    DarkUpwardDiagonal = 16;
    SmallCheckerBoard = 17;
    Trellis = 18;
    LightHorizontal = 19;
    LightVertical = 20;
    LightDownwardDiagonal = 21;
    LightUpwardDiagonal = 22;
    SmallGrid = 23;
    DottedDiamond = 24;
    WideDownwardDiagonal = 25;
    WideUpwardDiagonal = 26;
    DashedDownwardDiagonal = 27;
    DashedUpwardDiagonal = 28;
    NarrowVertical = 29;
    NarrowHorizontal = 30;
    DashedVertical = 31;
    DashedHorizontal = 32;
    LargeConfetti = 33;
    LargeGrid = 34;
    HorizontalBrick = 35;
    LargeCheckerBoard = 36;
    SmallConfetti = 37;
    Zigzag = 38;
    SolidDiamond = 39;
    DiagonalBrick = 40;
    OutlinedDiamond = 41;
    Plaid = 42;
    Sphere = 43;
    Weave = 44;
    DottedGrid = 45;
    Divot = 46;
    Shingle = 47;
    Wave = 48;
    Horizontal = 49;
    Vertical = 50;
    Cross = 51;
    DownwardDiagonal = 52;
    UpwardDiagonal = 53;
    DiagonalCross = 54;
    NotDefined = -1;
  end;


  //-------------namespace: Aspose.Slides----------------
  [DNTypeName('Aspose.Slides.PersistenceType')]
  DNPersistenceType = type Integer;
  DNPersistenceTypeHelper = record helper for DNPersistenceType
  public const
    PersistPropertyBag = 0;
    PersistStream = 1;
    PersistStreamInit = 2;
    PersistStorage = 3;
    NotDefined = -1;
  end;


  //-------------namespace: Aspose.Slides----------------
  [DNTypeName('Aspose.Slides.PictureFillMode')]
  DNPictureFillMode = type Integer;
  DNPictureFillModeHelper = record helper for DNPictureFillMode
  public const
    Tile = 0;
    Stretch = 1;
  end;


  //-------------namespace: Aspose.Slides----------------
  [DNTypeName('Aspose.Slides.PlaceholderSize')]
  DNPlaceholderSize = type Integer;
  DNPlaceholderSizeHelper = record helper for DNPlaceholderSize
  public const
    Full = 0;
    Half = 1;
    Quarter = 2;
  end;


  //-------------namespace: Aspose.Slides----------------
  [DNTypeName('Aspose.Slides.PlaceholderType')]
  DNPlaceholderType = type Integer;
  DNPlaceholderTypeHelper = record helper for DNPlaceholderType
  public const
    Title = 0;
    Body = 1;
    CenteredTitle = 2;
    Subtitle = 3;
    DateAndTime = 4;
    SlideNumber = 5;
    Footer = 6;
    Header = 7;
    Object_ = 8;
    Chart = 9;
    Table = 10;
    ClipArt = 11;
    Diagram = 12;
    Media = 13;
    SlideImage = 14;
    Picture = 15;
  end;


  //-------------namespace: Aspose.Slides----------------
  [DNTypeName('Aspose.Slides.PPImageFormat')]
  DNPPImageFormat = type Integer;
  DNPPImageFormatHelper = record helper for DNPPImageFormat
  public const
    Bmp = 0;
    Emf = 1;
    Exif = 2;
    Gif = 3;
    Icon = 4;
    Jpeg = 5;
    MemoryBmp = 6;
    Png = 7;
    Tiff = 8;
    Wmf = 9;
  end;


  //-------------namespace: Aspose.Slides----------------
  [DNTypeName('Aspose.Slides.PresentationLockingBehavior')]
  DNPresentationLockingBehavior = type Integer;
  DNPresentationLockingBehaviorHelper = record helper for DNPresentationLockingBehavior
  public const
    LoadAndRelease = 0;
    KeepLocked = 1;
    LoadAndRelease_Legacy_TemporaryDefault = 255;
  end;


  //-------------namespace: Aspose.Slides----------------
  [DNTypeName('Aspose.Slides.PresetColor')]
  DNPresetColor = type Integer;
  DNPresetColorHelper = record helper for DNPresetColor
  public const
    AliceBlue = 0;
    AntiqueWhite = 1;
    Aqua = 2;
    Aquamarine = 3;
    Azure = 4;
    Beige = 5;
    Bisque = 6;
    Black = 7;
    BlanchedAlmond = 8;
    Blue = 9;
    BlueViolet = 10;
    Brown = 11;
    BurlyWood = 12;
    CadetBlue = 13;
    Chartreuse = 14;
    Chocolate = 15;
    Coral = 16;
    CornflowerBlue = 17;
    Cornsilk = 18;
    Crimson = 19;
    Cyan = 20;
    DarkBlue = 21;
    DarkCyan = 22;
    DarkGoldenrod = 23;
    DarkGray = 24;
    DarkGreen = 25;
    DarkKhaki = 26;
    DarkMagenta = 27;
    DarkOliveGreen = 28;
    DarkOrange = 29;
    DarkOrchid = 30;
    DarkRed = 31;
    DarkSalmon = 32;
    DarkSeaGreen = 33;
    DarkSlateBlue = 34;
    DarkSlateGray = 35;
    DarkTurquoise = 36;
    DarkViolet = 37;
    DeepPink = 38;
    DeepSkyBlue = 39;
    DimGray = 40;
    DodgerBlue = 41;
    Firebrick = 42;
    FloralWhite = 43;
    ForestGreen = 44;
    Fuchsia = 45;
    Gainsboro = 46;
    GhostWhite = 47;
    Gold = 48;
    Goldenrod = 49;
    Gray = 50;
    Green = 51;
    GreenYellow = 52;
    Honeydew = 53;
    HotPink = 54;
    IndianRed = 55;
    Indigo = 56;
    Ivory = 57;
    Khaki = 58;
    Lavender = 59;
    LavenderBlush = 60;
    LawnGreen = 61;
    LemonChiffon = 62;
    LightBlue = 63;
    LightCoral = 64;
    LightCyan = 65;
    LightGoldenrodYellow = 66;
    LightGray = 67;
    LightGreen = 68;
    LightPink = 69;
    LightSalmon = 70;
    LightSeaGreen = 71;
    LightSkyBlue = 72;
    LightSlateGray = 73;
    LightSteelBlue = 74;
    LightYellow = 75;
    Lime = 76;
    LimeGreen = 77;
    Linen = 78;
    Magenta = 79;
    Maroon = 80;
    MediumAquamarine = 81;
    MediumBlue = 82;
    MediumOrchid = 83;
    MediumPurple = 84;
    MediumSeaGreen = 85;
    MediumSlateBlue = 86;
    MediumSpringGreen = 87;
    MediumTurquoise = 88;
    MediumVioletRed = 89;
    MidnightBlue = 90;
    MintCream = 91;
    MistyRose = 92;
    Moccasin = 93;
    NavajoWhite = 94;
    Navy = 95;
    OldLace = 96;
    Olive = 97;
    OliveDrab = 98;
    Orange = 99;
    OrangeRed = 100;
    Orchid = 101;
    PaleGoldenrod = 102;
    PaleGreen = 103;
    PaleTurquoise = 104;
    PaleVioletRed = 105;
    PapayaWhip = 106;
    PeachPuff = 107;
    Peru = 108;
    Pink = 109;
    Plum = 110;
    PowderBlue = 111;
    Purple = 112;
    Red = 113;
    RosyBrown = 114;
    RoyalBlue = 115;
    SaddleBrown = 116;
    Salmon = 117;
    SandyBrown = 118;
    SeaGreen = 119;
    SeaShell = 120;
    Sienna = 121;
    Silver = 122;
    SkyBlue = 123;
    SlateBlue = 124;
    SlateGray = 125;
    Snow = 126;
    SpringGreen = 127;
    SteelBlue = 128;
    Tan = 129;
    Teal = 130;
    Thistle = 131;
    Tomato = 132;
    Turquoise = 133;
    Violet = 134;
    Wheat = 135;
    White = 136;
    WhiteSmoke = 137;
    Yellow = 138;
    YellowGreen = 139;
    NotDefined = -1;
  end;


  //-------------namespace: Aspose.Slides----------------
  [DNTypeName('Aspose.Slides.PresetShadowType')]
  DNPresetShadowType = type Integer;
  DNPresetShadowTypeHelper = record helper for DNPresetShadowType
  public const
    TopLeftDropShadow = 0;
    TopLeftLargeDropShadow = 1;
    BackLeftLongPerspectiveShadow = 2;
    BackRightLongPerspectiveShadow = 3;
    TopLeftDoubleDropShadow = 4;
    BottomRightSmallDropShadow = 5;
    FrontLeftLongPerspectiveShadow = 6;
    FrontRightLongPerspectiveShadow = 7;
    OuterBoxShadow3D = 8;
    InnerBoxShadow3D = 9;
    BackCenterPerspectiveShadow = 10;
    TopRightDropShadow = 11;
    FrontBottomShadow = 12;
    BackLeftPerspectiveShadow = 13;
    BackRightPerspectiveShadow = 14;
    BottomLeftDropShadow = 15;
    BottomRightDropShadow = 16;
    FrontLeftPerspectiveShadow = 17;
    FrontRightPerspectiveShadow = 18;
    TopLeftSmallDropShadow = 19;
  end;


  //-------------namespace: Aspose.Slides----------------
  [DNTypeName('Aspose.Slides.RectangleAlignment')]
  DNRectangleAlignment = type Integer;
  DNRectangleAlignmentHelper = record helper for DNRectangleAlignment
  public const
    TopLeft = 0;
    Top = 1;
    TopRight = 2;
    Left = 3;
    Center = 4;
    Right = 5;
    BottomLeft = 6;
    Bottom = 7;
    BottomRight = 8;
    NotDefined = -1;
  end;


  //-------------namespace: Aspose.Slides----------------
  [DNTypeName('Aspose.Slides.ResourceLoadingAction')]
  DNResourceLoadingAction = type Integer;
  DNResourceLoadingActionHelper = record helper for DNResourceLoadingAction
  public const
    Default_ = 0;
    Skip = 1;
    UserProvided = 2;
  end;


  //-------------namespace: Aspose.Slides----------------
  [DNTypeName('Aspose.Slides.SchemeColor')]
  DNSchemeColor = type Integer;
  DNSchemeColorHelper = record helper for DNSchemeColor
  public const
    Background1 = 0;
    Text1 = 1;
    Background2 = 2;
    Text2 = 3;
    Accent1 = 4;
    Accent2 = 5;
    Accent3 = 6;
    Accent4 = 7;
    Accent5 = 8;
    Accent6 = 9;
    Hyperlink = 10;
    FollowedHyperlink = 11;
    StyleColor = 12;
    Dark1 = 13;
    Light1 = 14;
    Dark2 = 15;
    Light2 = 16;
    NotDefined = -1;
  end;


  //-------------namespace: Aspose.Slides----------------
  [DNTypeName('Aspose.Slides.ShapeElementFillSource')]
  DNShapeElementFillSource = type Integer;
  DNShapeElementFillSourceHelper = record helper for DNShapeElementFillSource
  public const
    NoFill = 0;
    Shape = 1;
    Lighten = 2;
    LightenLess = 3;
    Darken = 4;
    DarkenLess = 5;
  end;


  //-------------namespace: Aspose.Slides----------------
  [DNTypeName('Aspose.Slides.ShapeElementStrokeSource')]
  DNShapeElementStrokeSource = type Integer;
  DNShapeElementStrokeSourceHelper = record helper for DNShapeElementStrokeSource
  public const
    NoStroke = 0;
    Shape = 1;
    OwnStroke = 2;
  end;


  //-------------namespace: Aspose.Slides----------------
  [DNTypeName('Aspose.Slides.ShapesAlignmentType')]
  DNShapesAlignmentType = type Integer;
  DNShapesAlignmentTypeHelper = record helper for DNShapesAlignmentType
  public const
    AlignLeft = 0;
    AlignRight = 1;
    AlignCenter = 2;
    AlignTop = 3;
    AlignMiddle = 4;
    AlignBottom = 5;
    DistributeHorizontally = 6;
    DistributeVertically = 7;
  end;


  //-------------namespace: Aspose.Slides----------------
  [DNTypeName('Aspose.Slides.ShapeThumbnailBounds')]
  DNShapeThumbnailBounds = type Integer;
  DNShapeThumbnailBoundsHelper = record helper for DNShapeThumbnailBounds
  public const
    Slide = 0;
    Shape = 1;
    Appearance = 2;
  end;


  //-------------namespace: Aspose.Slides----------------
  [DNTypeName('Aspose.Slides.ShapeType')]
  DNShapeType = type Integer;
  DNShapeTypeHelper = record helper for DNShapeType
  public const
    Custom = 0;
    Line = 1;
    LineInverse = 2;
    Triangle = 3;
    RightTriangle = 4;
    Rectangle = 5;
    Diamond = 6;
    Parallelogram = 7;
    Trapezoid = 8;
    NonIsoscelesTrapezoid = 9;
    Pentagon = 10;
    Hexagon = 11;
    Heptagon = 12;
    Octagon = 13;
    Decagon = 14;
    Dodecagon = 15;
    FourPointedStar = 16;
    FivePointedStar = 17;
    SixPointedStar = 18;
    SevenPointedStar = 19;
    EightPointedStar = 20;
    TenPointedStar = 21;
    TwelvePointedStar = 22;
    SixteenPointedStar = 23;
    TwentyFourPointedStar = 24;
    ThirtyTwoPointedStar = 25;
    RoundCornerRectangle = 26;
    OneRoundCornerRectangle = 27;
    TwoSamesideRoundCornerRectangle = 28;
    TwoDiagonalRoundCornerRectangle = 29;
    OneSnipOneRoundCornerRectangle = 30;
    OneSnipCornerRectangle = 31;
    TwoSamesideSnipCornerRectangle = 32;
    TwoDiagonalSnipCornerRectangle = 33;
    Plaque = 34;
    Ellipse = 35;
    Teardrop = 36;
    HomePlate = 37;
    Chevron = 38;
    PieWedge = 39;
    Pie = 40;
    BlockArc = 41;
    Donut = 42;
    NoSmoking = 43;
    RightArrow = 44;
    LeftArrow = 45;
    UpArrow = 46;
    DownArrow = 47;
    StripedRightArrow = 48;
    NotchedRightArrow = 49;
    BentUpArrow = 50;
    LeftRightArrow = 51;
    UpDownArrow = 52;
    LeftUpArrow = 53;
    LeftRightUpArrow = 54;
    QuadArrow = 55;
    CalloutLeftArrow = 56;
    CalloutRightArrow = 57;
    CalloutUpArrow = 58;
    CalloutDownArrow = 59;
    CalloutLeftRightArrow = 60;
    CalloutUpDownArrow = 61;
    CalloutQuadArrow = 62;
    BentArrow = 63;
    UTurnArrow = 64;
    CircularArrow = 65;
    LeftCircularArrow = 66;
    LeftRightCircularArrow = 67;
    CurvedRightArrow = 68;
    CurvedLeftArrow = 69;
    CurvedUpArrow = 70;
    CurvedDownArrow = 71;
    SwooshArrow = 72;
    Cube = 73;
    Can = 74;
    LightningBolt = 75;
    Heart = 76;
    Sun = 77;
    Moon = 78;
    SmileyFace = 79;
    IrregularSeal1 = 80;
    IrregularSeal2 = 81;
    FoldedCorner = 82;
    Bevel = 83;
    Frame = 84;
    HalfFrame = 85;
    Corner = 86;
    DiagonalStripe = 87;
    Chord = 88;
    CurvedArc = 89;
    LeftBracket = 90;
    RightBracket = 91;
    LeftBrace = 92;
    RightBrace = 93;
    BracketPair = 94;
    BracePair = 95;
    StraightConnector1 = 96;
    BentConnector2 = 97;
    BentConnector3 = 98;
    BentConnector4 = 99;
    BentConnector5 = 100;
    CurvedConnector2 = 101;
    CurvedConnector3 = 102;
    CurvedConnector4 = 103;
    CurvedConnector5 = 104;
    Callout1 = 105;
    Callout2 = 106;
    Callout3 = 107;
    Callout1WithAccent = 108;
    Callout2WithAccent = 109;
    Callout3WithAccent = 110;
    Callout1WithBorder = 111;
    Callout2WithBorder = 112;
    Callout3WithBorder = 113;
    Callout1WithBorderAndAccent = 114;
    Callout2WithBorderAndAccent = 115;
    Callout3WithBorderAndAccent = 116;
    CalloutWedgeRectangle = 117;
    CalloutWedgeRoundRectangle = 118;
    CalloutWedgeEllipse = 119;
    CalloutCloud = 120;
    Cloud = 121;
    Ribbon = 122;
    Ribbon2 = 123;
    EllipseRibbon = 124;
    EllipseRibbon2 = 125;
    LeftRightRibbon = 126;
    VerticalScroll = 127;
    HorizontalScroll = 128;
    Wave = 129;
    DoubleWave = 130;
    Plus = 131;
    ProcessFlow = 132;
    DecisionFlow = 133;
    InputOutputFlow = 134;
    PredefinedProcessFlow = 135;
    InternalStorageFlow = 136;
    DocumentFlow = 137;
    MultiDocumentFlow = 138;
    TerminatorFlow = 139;
    PreparationFlow = 140;
    ManualInputFlow = 141;
    ManualOperationFlow = 142;
    ConnectorFlow = 143;
    PunchedCardFlow = 144;
    PunchedTapeFlow = 145;
    SummingJunctionFlow = 146;
    OrFlow = 147;
    CollateFlow = 148;
    SortFlow = 149;
    ExtractFlow = 150;
    MergeFlow = 151;
    OfflineStorageFlow = 152;
    OnlineStorageFlow = 153;
    MagneticTapeFlow = 154;
    MagneticDiskFlow = 155;
    MagneticDrumFlow = 156;
    DisplayFlow = 157;
    DelayFlow = 158;
    AlternateProcessFlow = 159;
    OffPageConnectorFlow = 160;
    BlankButton = 161;
    HomeButton = 162;
    HelpButton = 163;
    InformationButton = 164;
    ForwardOrNextButton = 165;
    BackOrPreviousButton = 166;
    EndButton = 167;
    BeginningButton = 168;
    ReturnButton = 169;
    DocumentButton = 170;
    SoundButton = 171;
    MovieButton = 172;
    Gear6 = 173;
    Gear9 = 174;
    Funnel = 175;
    PlusMath = 176;
    MinusMath = 177;
    MultiplyMath = 178;
    DivideMath = 179;
    EqualMath = 180;
    NotEqualMath = 181;
    CornerTabs = 182;
    SquareTabs = 183;
    PlaqueTabs = 184;
    ChartX = 185;
    ChartStar = 186;
    ChartPlus = 187;
    NotDefined = -1;
  end;


  //-------------namespace: Aspose.Slides----------------
  [DNTypeName('Aspose.Slides.SlideLayoutType')]
  DNSlideLayoutType = type Integer;
  DNSlideLayoutTypeHelper = record helper for DNSlideLayoutType
  public const
    Title = 0;
    Text = 1;
    TwoColumnText = 2;
    Table = 3;
    TextAndChart = 4;
    ChartAndText = 5;
    Diagram = 6;
    Chart = 7;
    TextAndClipArt = 8;
    ClipArtAndText = 9;
    TitleOnly = 10;
    Blank = 11;
    TextAndObject = 12;
    ObjectAndText = 13;
    Object_ = 14;
    TitleAndObject = 15;
    TextAndMedia = 16;
    MediaAndText = 17;
    ObjectOverText = 18;
    TextOverObject = 19;
    TextAndTwoObjects = 20;
    TwoObjectsAndText = 21;
    TwoObjectsOverText = 22;
    FourObjects = 23;
    VerticalText = 24;
    ClipArtAndVerticalText = 25;
    VerticalTitleAndText = 26;
    VerticalTitleAndTextOverChart = 27;
    TwoObjects = 28;
    ObjectAndTwoObject = 29;
    TwoObjectsAndObject = 30;
    SectionHeader = 31;
    TwoTextAndTwoObjects = 32;
    TitleObjectAndCaption = 33;
    PictureAndCaption = 34;
    Custom = -1;
  end;


  //-------------namespace: Aspose.Slides----------------
  [DNTypeName('Aspose.Slides.SlideOrienation')]
  DNSlideOrienation = type Integer;
  DNSlideOrienationHelper = record helper for DNSlideOrienation
  public const
    Landscape = 0;
    Portrait = 1;
  end;


  //-------------namespace: Aspose.Slides.SlideShow----------------
  [DNTypeName('Aspose.Slides.SlideShow.TransitionCornerAndCenterDirectionType')]
  DNTransitionCornerAndCenterDirectionType = type Integer;
  DNTransitionCornerAndCenterDirectionTypeHelper = record helper for DNTransitionCornerAndCenterDirectionType
  public const
    LeftDown = 0;
    LeftUp = 1;
    RightDown = 2;
    RightUp = 3;
    Center = 4;
  end;


  //-------------namespace: Aspose.Slides.SlideShow----------------
  [DNTypeName('Aspose.Slides.SlideShow.TransitionCornerDirectionType')]
  DNTransitionCornerDirectionType = type Integer;
  DNTransitionCornerDirectionTypeHelper = record helper for DNTransitionCornerDirectionType
  public const
    LeftDown = 0;
    LeftUp = 1;
    RightDown = 2;
    RightUp = 3;
  end;


  //-------------namespace: Aspose.Slides.SlideShow----------------
  [DNTypeName('Aspose.Slides.SlideShow.TransitionEightDirectionType')]
  DNTransitionEightDirectionType = type Integer;
  DNTransitionEightDirectionTypeHelper = record helper for DNTransitionEightDirectionType
  public const
    LeftDown = 0;
    LeftUp = 1;
    RightDown = 2;
    RightUp = 3;
    Left = 4;
    Up = 5;
    Down = 6;
    Right = 7;
  end;


  //-------------namespace: Aspose.Slides.SlideShow----------------
  [DNTypeName('Aspose.Slides.SlideShow.TransitionInOutDirectionType')]
  DNTransitionInOutDirectionType = type Integer;
  DNTransitionInOutDirectionTypeHelper = record helper for DNTransitionInOutDirectionType
  public const
    In_ = 0;
    Out_ = 1;
  end;


  //-------------namespace: Aspose.Slides.SlideShow----------------
  [DNTypeName('Aspose.Slides.SlideShow.TransitionLeftRightDirectionType')]
  DNTransitionLeftRightDirectionType = type Integer;
  DNTransitionLeftRightDirectionTypeHelper = record helper for DNTransitionLeftRightDirectionType
  public const
    Left = 0;
    Right = 1;
  end;


  //-------------namespace: Aspose.Slides.SlideShow----------------
  [DNTypeName('Aspose.Slides.SlideShow.TransitionMorphType')]
  DNTransitionMorphType = type Integer;
  DNTransitionMorphTypeHelper = record helper for DNTransitionMorphType
  public const
    ByObject = 0;
    ByWord = 1;
    ByChar = 2;
  end;


  //-------------namespace: Aspose.Slides.SlideShow----------------
  [DNTypeName('Aspose.Slides.SlideShow.TransitionPattern')]
  DNTransitionPattern = type Integer;
  DNTransitionPatternHelper = record helper for DNTransitionPattern
  public const
    Diamond = 0;
    Hexagon = 1;
  end;


  //-------------namespace: Aspose.Slides.SlideShow----------------
  [DNTypeName('Aspose.Slides.SlideShow.TransitionShredPattern')]
  DNTransitionShredPattern = type Integer;
  DNTransitionShredPatternHelper = record helper for DNTransitionShredPattern
  public const
    Strip = 0;
    Rectangle = 1;
  end;


  //-------------namespace: Aspose.Slides.SlideShow----------------
  [DNTypeName('Aspose.Slides.SlideShow.TransitionSideDirectionType')]
  DNTransitionSideDirectionType = type Integer;
  DNTransitionSideDirectionTypeHelper = record helper for DNTransitionSideDirectionType
  public const
    Left = 0;
    Up = 1;
    Down = 2;
    Right = 3;
  end;


  //-------------namespace: Aspose.Slides.SlideShow----------------
  [DNTypeName('Aspose.Slides.SlideShow.TransitionSoundMode')]
  DNTransitionSoundMode = type Integer;
  DNTransitionSoundModeHelper = record helper for DNTransitionSoundMode
  public const
    StartSound = 0;
    StopPrevoiusSound = 1;
    NotDefined = -1;
  end;


  //-------------namespace: Aspose.Slides.SlideShow----------------
  [DNTypeName('Aspose.Slides.SlideShow.TransitionSpeed')]
  DNTransitionSpeed = type Integer;
  DNTransitionSpeedHelper = record helper for DNTransitionSpeed
  public const
    Fast = 0;
    Medium = 1;
    Slow = 2;
  end;


  //-------------namespace: Aspose.Slides.SlideShow----------------
  [DNTypeName('Aspose.Slides.SlideShow.TransitionType')]
  DNTransitionType = type Integer;
  DNTransitionTypeHelper = record helper for DNTransitionType
  public const
    None = 0;
    Blinds = 1;
    Checker = 2;
    Circle = 3;
    Comb = 4;
    Cover = 5;
    Cut = 6;
    Diamond = 7;
    Dissolve = 8;
    Fade = 9;
    Newsflash = 10;
    Plus = 11;
    Pull = 12;
    Push = 13;
    Random = 14;
    RandomBar = 15;
    Split = 16;
    Strips = 17;
    Wedge = 18;
    Wheel = 19;
    Wipe = 20;
    Zoom = 21;
    Vortex = 22;
    Switch = 23;
    Flip = 24;
    Ripple = 25;
    Honeycomb = 26;
    Cube = 27;
    Box = 28;
    Rotate = 29;
    Orbit = 30;
    Doors = 31;
    Window = 32;
    Ferris = 33;
    Gallery = 34;
    Conveyor = 35;
    Pan = 36;
    Glitter = 37;
    Warp = 38;
    Flythrough = 39;
    Flash = 40;
    Shred = 41;
    Reveal = 42;
    WheelReverse = 43;
    FallOver = 44;
    Drape = 45;
    Curtains = 46;
    Wind = 47;
    Prestige = 48;
    Fracture = 49;
    Crush = 50;
    PeelOff = 51;
    PageCurlDouble = 52;
    PageCurlSingle = 53;
    Airplane = 54;
    Origami = 55;
    Morph = 56;
  end;


  //-------------namespace: Aspose.Slides----------------
  [DNTypeName('Aspose.Slides.SlideSizeScaleType')]
  DNSlideSizeScaleType = type Integer;
  DNSlideSizeScaleTypeHelper = record helper for DNSlideSizeScaleType
  public const
    DoNotScale = 0;
    EnsureFit = 1;
    Maximize = 2;
  end;


  //-------------namespace: Aspose.Slides----------------
  [DNTypeName('Aspose.Slides.SlideSizeType')]
  DNSlideSizeType = type Integer;
  DNSlideSizeTypeHelper = record helper for DNSlideSizeType
  public const
    OnScreen = 0;
    LetterPaper = 1;
    A4Paper = 2;
    Slide35mm = 3;
    Overhead = 4;
    Banner = 5;
    Custom = 6;
    Ledger = 7;
    A3Paper = 8;
    B4IsoPaper = 9;
    B5IsoPaper = 10;
    B4JisPaper = 11;
    B5JisPaper = 12;
    HagakiCard = 13;
    OnScreen16x9 = 14;
    OnScreen16x10 = 15;
    Widescreen = 16;
  end;


  //-------------namespace: Aspose.Slides.SmartArt----------------
  [DNTypeName('Aspose.Slides.SmartArt.OrganizationChartLayoutType')]
  DNOrganizationChartLayoutType = type Integer;
  DNOrganizationChartLayoutTypeHelper = record helper for DNOrganizationChartLayoutType
  public const
    Initial = 0;
    Standart = 1;
    BothHanging = 2;
    LeftHanging = 3;
    RightHanging = 4;
  end;


  //-------------namespace: Aspose.Slides.SmartArt----------------
  [DNTypeName('Aspose.Slides.SmartArt.SmartArtColorType')]
  DNSmartArtColorType = type Integer;
  DNSmartArtColorTypeHelper = record helper for DNSmartArtColorType
  public const
    Dark1Outline = 0;
    Dark2Outline = 1;
    DarkFill = 2;
    ColorfulAccentColors = 3;
    ColorfulAccentColors2to3 = 4;
    ColorfulAccentColors3to4 = 5;
    ColorfulAccentColors4to5 = 6;
    ColorfulAccentColors5to6 = 7;
    ColoredOutlineAccent1 = 8;
    ColoredFillAccent1 = 9;
    GradientRangeAccent1 = 10;
    GradientLoopAccent1 = 11;
    TransparentGradientRangeAccent1 = 12;
    ColoredOutlineAccent2 = 13;
    ColoredFillAccent2 = 14;
    GradientRangeAccent2 = 15;
    GradientLoopAccent2 = 16;
    TransparentGradientRangeAccent2 = 17;
    ColoredOutlineAccent3 = 18;
    ColoredFillAccent3 = 19;
    GradientRangeAccent3 = 20;
    GradientLoopAccent3 = 21;
    TransparentGradientRangeAccent3 = 22;
    ColoredOutlineAccent4 = 23;
    ColoredFillAccent4 = 24;
    GradientRangeAccent4 = 25;
    GradientLoopAccent4 = 26;
    TransparentGradientRangeAccent4 = 27;
    ColoredOutlineAccent5 = 28;
    ColoredFillAccent5 = 29;
    GradientRangeAccent5 = 30;
    GradientLoopAccent5 = 31;
    TransparentGradientRangeAccent5 = 32;
    ColoredOutlineAccent6 = 33;
    ColoredFillAccent6 = 34;
    GradientRangeAccent6 = 35;
    GradientLoopAccent6 = 36;
    TransparentGradientRangeAccent6 = 37;
  end;


  //-------------namespace: Aspose.Slides.SmartArt----------------
  [DNTypeName('Aspose.Slides.SmartArt.SmartArtLayoutType')]
  DNSmartArtLayoutType = type Integer;
  DNSmartArtLayoutTypeHelper = record helper for DNSmartArtLayoutType
  public const
    AccentProcess = 0;
    AccentedPicture = 1;
    AlternatingFlow = 2;
    AlternatingHexagons = 3;
    AlternatingPictureBlocks = 4;
    AlternatingPictureCircles = 5;
    ArrowRibbon = 6;
    AscendingPictureAccentProcess = 7;
    Balance = 8;
    BasicBendingProcess = 9;
    BasicBlockList = 10;
    BasicChevronProcess = 11;
    BasicCycle = 12;
    BasicMatrix = 13;
    BasicPie = 14;
    BasicProcess = 15;
    BasicPyramid = 16;
    BasicRadial = 17;
    BasicTarget = 18;
    BasicTimeline = 19;
    BasicVenn = 20;
    BendingPictureAccentList = 21;
    BendingPictureBlocks = 22;
    BendingPictureCaption = 23;
    BendingPictureCaptionList = 24;
    BendingPictureSemiTransparentText = 25;
    BlockCycle = 26;
    BubblePictureList = 27;
    CaptionedPictures = 28;
    ChevronList = 29;
    CircleAccentTimeline = 30;
    CircleArrowProcess = 31;
    CirclePictureHierarchy = 32;
    CircleRelationship = 33;
    CircularBendingProcess = 34;
    CircularPictureCallout = 35;
    ClosedChevronProcess = 36;
    ContinuousArrowProcess = 37;
    ContinuousBlockProcess = 38;
    ContinuousCycle = 39;
    ContinuousPictureList = 40;
    ConvergingArrows = 41;
    ConvergingRadial = 42;
    CounterbalanceArrows = 43;
    CycleMatrix = 44;
    DescendingBlockList = 45;
    DescendingProcess = 46;
    DetailedProcess = 47;
    DivergingArrows = 48;
    DivergingRadial = 49;
    Equation = 50;
    FramedTextPicture = 51;
    Funnel = 52;
    Gear = 53;
    GridMatrix = 54;
    GroupedList = 55;
    HalfCircleOrganizationChart = 56;
    HexagonCluster = 57;
    Hierarchy = 58;
    HierarchyList = 59;
    HorizontalBulletList = 60;
    HorizontalHierarchy = 61;
    HorizontalLabeledHierarchy = 62;
    HorizontalMultiLevelHierarchy = 63;
    HorizontalOrganizationChart = 64;
    HorizontalPictureList = 65;
    IncreasingArrowsProcess = 66;
    IncreasingCircleProcess = 67;
    InvertedPyramid = 68;
    LabeledHierarchy = 69;
    LinearVenn = 70;
    LinedList = 71;
    MultidirectionalCycle = 72;
    NameandTitleOrganizationChart = 73;
    NestedTarget = 74;
    NondirectionalCycle = 75;
    OpposingArrows = 76;
    OpposingIdeas = 77;
    OrganizationChart = 78;
    PhasedProcess = 79;
    PictureAccentBlocks = 80;
    PictureAccentList = 81;
    PictureAccentProcess = 82;
    PictureCaptionList = 83;
    PictureGrid = 84;
    PictureLineup = 85;
    PictureStrips = 86;
    PieProcess = 87;
    PlusandMinus = 88;
    ProcessArrows = 89;
    ProcessList = 90;
    PyramidList = 91;
    RadialCluster = 92;
    RadialCycle = 93;
    RadialList = 94;
    RadialVenn = 95;
    RandomToResultProcess = 96;
    RepeatingBendingProcess = 97;
    ReverseList = 98;
    SegmentedCycle = 99;
    SegmentedProcess = 100;
    SegmentedPyramid = 101;
    SnapshotPictureList = 102;
    SpiralPicture = 103;
    SquareAccentList = 104;
    StackedList = 105;
    StackedVenn = 106;
    StaggeredProcess = 107;
    StepDownProcess = 108;
    StepUpProcess = 109;
    SubStepProcess = 110;
    TableHierarchy = 111;
    TableList = 112;
    TargetList = 113;
    TextCycle = 114;
    TitlePictureLineup = 115;
    TitledMatrix = 116;
    TitledPictureAccentList = 117;
    TitledPictureBlocks = 118;
    TrapezoidList = 119;
    UpwardArrow = 120;
    VerticalAccentList = 121;
    VerticalArrowList = 122;
    VerticalBendingProcess = 123;
    VerticalBlockList = 124;
    VerticalBoxList = 125;
    VerticalBulletList = 126;
    VerticalChevronList = 127;
    VerticalCircleList = 128;
    VerticalCurvedList = 129;
    VerticalEquation = 130;
    VerticalPictureAccentList = 131;
    VerticalPictureList = 132;
    VerticalProcess = 133;
    Custom = 134;
    PictureOrganizationChart = 135;
  end;


  //-------------namespace: Aspose.Slides.SmartArt----------------
  [DNTypeName('Aspose.Slides.SmartArt.SmartArtQuickStyleType')]
  DNSmartArtQuickStyleType = type Integer;
  DNSmartArtQuickStyleTypeHelper = record helper for DNSmartArtQuickStyleType
  public const
    SimpleFill = 0;
    WhiteOutline = 1;
    SubtleEffect = 2;
    ModerateEffect = 3;
    IntenceEffect = 4;
    Polished = 5;
    Inset = 6;
    Cartoon = 7;
    Powder = 8;
    BrickScene = 9;
    FlatScene = 10;
    MetallicScene = 11;
    SunsetScene = 12;
    BirdsEyeScene = 13;
  end;


  //-------------namespace: Aspose.Slides----------------
  [DNTypeName('Aspose.Slides.SourceFormat')]
  DNSourceFormat = type Integer;
  DNSourceFormatHelper = record helper for DNSourceFormat
  public const
    Ppt = 0;
    Pptx = 1;
    Odp = 2;
  end;


  //-------------namespace: Aspose.Slides----------------
  [DNTypeName('Aspose.Slides.SplitterBarStateType')]
  DNSplitterBarStateType = type Integer;
  DNSplitterBarStateTypeHelper = record helper for DNSplitterBarStateType
  public const
    Minimized = 0;
    Restored = 1;
    Maximized = 2;
  end;


  //-------------namespace: Aspose.Slides----------------
  [DNTypeName('Aspose.Slides.SystemColor')]
  DNSystemColor = type Integer;
  DNSystemColorHelper = record helper for DNSystemColor
  public const
    ScrollBar = 0;
    Background = 1;
    ActiveCaption = 2;
    InactiveCaption = 3;
    Menu = 4;
    Window = 5;
    WindowFrame = 6;
    MenuText = 7;
    WindowText = 8;
    CaptionText = 9;
    ActiveBorder = 10;
    InactiveBorder = 11;
    AppWorkspace = 12;
    Highlight = 13;
    HighlightText = 14;
    BtnFace = 15;
    BtnShadow = 16;
    GrayText = 17;
    BtnText = 18;
    InactiveCaptionText = 19;
    BtnHighlight = 20;
    ThreeDDkShadow = 21;
    ThreeDLight = 22;
    InfoText = 23;
    InfoBk = 24;
    HotLight = 26;
    GradientActiveCaption = 27;
    GradientInactiveCaption = 28;
    MenuHighlight = 29;
    MenuBar = 30;
    NotDefined = -1;
  end;


  //-------------namespace: Aspose.Slides----------------
  [DNTypeName('Aspose.Slides.TabAlignment')]
  DNTabAlignment = type Integer;
  DNTabAlignmentHelper = record helper for DNTabAlignment
  public const
    Left = 0;
    Center = 1;
    Right = 2;
    Decimal = 3;
  end;


  //-------------namespace: Aspose.Slides----------------
  [DNTypeName('Aspose.Slides.TableStylePreset')]
  DNTableStylePreset = type Integer;
  DNTableStylePresetHelper = record helper for DNTableStylePreset
  public const
    None = 0;
    MediumStyle2Accent1 = 1;
    MediumStyle2 = 2;
    NoStyleNoGrid = 3;
    ThemedStyle1Accent1 = 4;
    ThemedStyle1Accent2 = 5;
    ThemedStyle1Accent3 = 6;
    ThemedStyle1Accent4 = 7;
    ThemedStyle1Accent5 = 8;
    ThemedStyle1Accent6 = 9;
    NoStyleTableGrid = 10;
    ThemedStyle2Accent1 = 11;
    ThemedStyle2Accent2 = 12;
    ThemedStyle2Accent3 = 13;
    ThemedStyle2Accent4 = 14;
    ThemedStyle2Accent5 = 15;
    ThemedStyle2Accent6 = 16;
    LightStyle1 = 17;
    LightStyle1Accent1 = 18;
    LightStyle1Accent2 = 19;
    LightStyle1Accent3 = 20;
    LightStyle1Accent4 = 21;
    LightStyle2Accent5 = 22;
    LightStyle1Accent6 = 23;
    LightStyle2 = 24;
    LightStyle2Accent1 = 25;
    LightStyle2Accent2 = 26;
    LightStyle2Accent3 = 27;
    MediumStyle2Accent3 = 28;
    MediumStyle2Accent4 = 29;
    MediumStyle2Accent5 = 30;
    LightStyle2Accent6 = 31;
    LightStyle2Accent4 = 32;
    LightStyle3 = 33;
    LightStyle3Accent1 = 34;
    MediumStyle2Accent2 = 35;
    LightStyle3Accent2 = 36;
    LightStyle3Accent3 = 37;
    LightStyle3Accent4 = 38;
    LightStyle3Accent5 = 39;
    LightStyle3Accent6 = 40;
    MediumStyle1 = 41;
    MediumStyle1Accent1 = 42;
    MediumStyle1Accent2 = 43;
    MediumStyle1Accent3 = 44;
    MediumStyle1Accent4 = 45;
    MediumStyle1Accent5 = 46;
    MediumStyle1Accent6 = 47;
    MediumStyle2Accent6 = 48;
    MediumStyle3 = 49;
    MediumStyle3Accent1 = 50;
    MediumStyle3Accent2 = 51;
    MediumStyle3Accent3 = 52;
    MediumStyle3Accent4 = 53;
    MediumStyle3Accent5 = 54;
    MediumStyle3Accent6 = 55;
    MediumStyle4 = 56;
    MediumStyle4Accent1 = 57;
    MediumStyle4Accent2 = 58;
    MediumStyle4Accent3 = 59;
    MediumStyle4Accent4 = 60;
    MediumStyle4Accent5 = 61;
    MediumStyle4Accent6 = 62;
    DarkStyle1 = 63;
    DarkStyle1Accent1 = 64;
    DarkStyle1Accent2 = 65;
    DarkStyle1Accent3 = 66;
    DarkStyle1Accent4 = 67;
    DarkStyle1Accent5 = 68;
    DarkStyle1Accent6 = 69;
    DarkStyle2 = 70;
    DarkStyle2Accent1Accent2 = 71;
    DarkStyle2Accent3Accent4 = 72;
    DarkStyle2Accent5Accent6 = 73;
    LightStyle1Accent5 = 74;
    Custom = -1;
  end;


  //-------------namespace: Aspose.Slides----------------
  [DNTypeName('Aspose.Slides.TextAlignment')]
  DNTextAlignment = type Integer;
  DNTextAlignmentHelper = record helper for DNTextAlignment
  public const
    Left = 0;
    Center = 1;
    Right = 2;
    Justify = 3;
    JustifyLow = 4;
    Distributed = 5;
    NotDefined = -1;
  end;


  //-------------namespace: Aspose.Slides----------------
  [DNTypeName('Aspose.Slides.TextAnchorType')]
  DNTextAnchorType = type Integer;
  DNTextAnchorTypeHelper = record helper for DNTextAnchorType
  public const
    Top = 0;
    Center = 1;
    Bottom = 2;
    Justified = 3;
    Distributed = 4;
    NotDefined = -1;
  end;


  //-------------namespace: Aspose.Slides----------------
  [DNTypeName('Aspose.Slides.TextAutofitType')]
  DNTextAutofitType = type Integer;
  DNTextAutofitTypeHelper = record helper for DNTextAutofitType
  public const
    None = 0;
    Normal = 1;
    Shape = 2;
    NotDefined = -1;
  end;


  //-------------namespace: Aspose.Slides----------------
  [DNTypeName('Aspose.Slides.TextCapType')]
  DNTextCapType = type Integer;
  DNTextCapTypeHelper = record helper for DNTextCapType
  public const
    None = 0;
    Small = 1;
    All = 2;
    NotDefined = -1;
  end;


  //-------------namespace: Aspose.Slides----------------
  [DNTypeName('Aspose.Slides.TextExtractionArrangingMode')]
  DNTextExtractionArrangingMode = type Integer;
  DNTextExtractionArrangingModeHelper = record helper for DNTextExtractionArrangingMode
  public const
    Unarranged = 0;
    Arranged = 1;
  end;


  //-------------namespace: Aspose.Slides----------------
  [DNTypeName('Aspose.Slides.TextShapeType')]
  DNTextShapeType = type Integer;
  DNTextShapeTypeHelper = record helper for DNTextShapeType
  public const
    None = 0;
    Plain = 1;
    Stop = 2;
    Triangle = 3;
    TriangleInverted = 4;
    Chevron = 5;
    ChevronInverted = 6;
    RingInside = 7;
    RingOutside = 8;
    ArchUp = 9;
    ArchDown = 10;
    Circle = 11;
    Button = 12;
    ArchUpPour = 13;
    ArchDownPour = 14;
    CirclePour = 15;
    ButtonPour = 16;
    CurveUp = 17;
    CurveDown = 18;
    CanUp = 19;
    CanDown = 20;
    Wave1 = 21;
    Wave2 = 22;
    DoubleWave1 = 23;
    Wave4 = 24;
    Inflate = 25;
    Deflate = 26;
    InflateBottom = 27;
    DeflateBottom = 28;
    InflateTop = 29;
    DeflateTop = 30;
    DeflateInflate = 31;
    DeflateInflateDeflate = 32;
    FadeRight = 33;
    FadeLeft = 34;
    FadeUp = 35;
    FadeDown = 36;
    SlantUp = 37;
    SlantDown = 38;
    CascadeUp = 39;
    CascadeDown = 40;
    Custom = 41;
    NotDefined = -1;
  end;


  //-------------namespace: Aspose.Slides----------------
  [DNTypeName('Aspose.Slides.TextStrikethroughType')]
  DNTextStrikethroughType = type Integer;
  DNTextStrikethroughTypeHelper = record helper for DNTextStrikethroughType
  public const
    None = 0;
    Single = 1;
    Double = 2;
    NotDefined = -1;
  end;


  //-------------namespace: Aspose.Slides----------------
  [DNTypeName('Aspose.Slides.TextUnderlineType')]
  DNTextUnderlineType = type Integer;
  DNTextUnderlineTypeHelper = record helper for DNTextUnderlineType
  public const
    None = 0;
    Words = 1;
    Single = 2;
    Double = 3;
    Heavy = 4;
    Dotted = 5;
    HeavyDotted = 6;
    Dashed = 7;
    HeavyDashed = 8;
    LongDashed = 9;
    HeavyLongDashed = 10;
    DotDash = 11;
    HeavyDotDash = 12;
    DotDotDash = 13;
    HeavyDotDotDash = 14;
    Wavy = 15;
    HeavyWavy = 16;
    DoubleWavy = 17;
    NotDefined = -1;
  end;


  //-------------namespace: Aspose.Slides----------------
  [DNTypeName('Aspose.Slides.TextVerticalOverflowType')]
  DNTextVerticalOverflowType = type Integer;
  DNTextVerticalOverflowTypeHelper = record helper for DNTextVerticalOverflowType
  public const
    Overflow = 0;
    Ellipsis = 1;
    Clip = 2;
    NotDefined = -1;
  end;


  //-------------namespace: Aspose.Slides----------------
  [DNTypeName('Aspose.Slides.TextVerticalType')]
  DNTextVerticalType = type Integer;
  DNTextVerticalTypeHelper = record helper for DNTextVerticalType
  public const
    Horizontal = 0;
    Vertical = 1;
    Vertical270 = 2;
    WordArtVertical = 3;
    EastAsianVertical = 4;
    MongolianVertical = 5;
    WordArtVerticalRightToLeft = 6;
    NotDefined = -1;
  end;


  //-------------namespace: Aspose.Slides----------------
  [DNTypeName('Aspose.Slides.TileFlip')]
  DNTileFlip = type Integer;
  DNTileFlipHelper = record helper for DNTileFlip
  public const
    NoFlip = 0;
    FlipX = 1;
    FlipY = 2;
    FlipBoth = 3;
    NotDefined = -1;
  end;


  //-------------namespace: Aspose.Slides----------------
  [DNTypeName('Aspose.Slides.VideoPlayModePreset')]
  DNVideoPlayModePreset = type Integer;
  DNVideoPlayModePresetHelper = record helper for DNVideoPlayModePreset
  public const
    Auto = 0;
    OnClick = 1;
    AllSlides = 2;
    InClickSequence = 3;
    Mixed = -1;
  end;


  //-------------namespace: Aspose.Slides----------------
  [DNTypeName('Aspose.Slides.ViewType')]
  DNViewType = type Integer;
  DNViewTypeHelper = record helper for DNViewType
  public const
    NotDefined = 0;
    SlideView = 1;
    SlideMasterView = 2;
    NotesView = 3;
    HandoutView = 4;
    NotesMasterView = 5;
    OutlineView = 6;
    SlideSorterView = 7;
    SlideThumbnailView = 8;
  end;


  //-------------namespace: Aspose.Slides.Warnings----------------
  [DNTypeName('Aspose.Slides.Warnings.ReturnAction')]
  DNReturnAction = type Integer;
  DNReturnActionHelper = record helper for DNReturnAction
  public const
    Continue_ = 0;
    Abort_ = 1;
  end;


  //-------------namespace: Aspose.Slides.Warnings----------------
  [DNTypeName('Aspose.Slides.Warnings.WarningType')]
  DNWarningType = type Integer;
  DNWarningTypeHelper = record helper for DNWarningType
  public const
    SourceFileCorruption = 0;
    DataLoss = 1;
    MajorFormattingLoss = 2;
    MinorFormattingLoss = 3;
    CompatibilityIssue = 4;
    UnexpectedContent = 99;
  end;


  //-------------namespace: Aspose.Slides----------------
  [DNTypeName('Aspose.Slides.ZoomImageType')]
  DNZoomImageType = type Integer;
  DNZoomImageTypeHelper = record helper for DNZoomImageType
  public const
    Preview = 1;
    Cover = 2;
  end;




type


{ declares }

  DNIBehavior = interface; // type: Aspose.Slides.Animation.IBehavior, namespace: Aspose.Slides.Animation
  DNIColorEffect = interface; // type: Aspose.Slides.Animation.IColorEffect, namespace: Aspose.Slides.Animation
  DNICommandEffect = interface; // type: Aspose.Slides.Animation.ICommandEffect, namespace: Aspose.Slides.Animation
  DNIFilterEffect = interface; // type: Aspose.Slides.Animation.IFilterEffect, namespace: Aspose.Slides.Animation
  DNIMotionEffect = interface; // type: Aspose.Slides.Animation.IMotionEffect, namespace: Aspose.Slides.Animation
  DNIPropertyEffect = interface; // type: Aspose.Slides.Animation.IPropertyEffect, namespace: Aspose.Slides.Animation
  DNIRotationEffect = interface; // type: Aspose.Slides.Animation.IRotationEffect, namespace: Aspose.Slides.Animation
  DNIScaleEffect = interface; // type: Aspose.Slides.Animation.IScaleEffect, namespace: Aspose.Slides.Animation
  DNISetEffect = interface; // type: Aspose.Slides.Animation.ISetEffect, namespace: Aspose.Slides.Animation
  DNIBehaviorFactory = interface; // type: Aspose.Slides.Animation.IBehaviorFactory, namespace: Aspose.Slides.Animation
  DNIBehaviorProperty = interface; // type: Aspose.Slides.Animation.IBehaviorProperty, namespace: Aspose.Slides.Animation
  DNIColorOffset = interface; // type: Aspose.Slides.Animation.IColorOffset, namespace: Aspose.Slides.Animation
  DNIEffect = interface; // type: Aspose.Slides.Animation.IEffect, namespace: Aspose.Slides.Animation
  DNIMotionCmdPath = interface; // type: Aspose.Slides.Animation.IMotionCmdPath, namespace: Aspose.Slides.Animation
  DNIPoint = interface; // type: Aspose.Slides.Animation.IPoint, namespace: Aspose.Slides.Animation
  DNITextAnimation = interface; // type: Aspose.Slides.Animation.ITextAnimation, namespace: Aspose.Slides.Animation
  DNITiming = interface; // type: Aspose.Slides.Animation.ITiming, namespace: Aspose.Slides.Animation
  DNIActualLayout = interface; // type: Aspose.Slides.Charts.IActualLayout, namespace: Aspose.Slides.Charts
  DNIChartDataPoint = interface; // type: Aspose.Slides.Charts.IChartDataPoint, namespace: Aspose.Slides.Charts
  DNIAxesManager = interface; // type: Aspose.Slides.Charts.IAxesManager, namespace: Aspose.Slides.Charts
  DNIAxisFormat = interface; // type: Aspose.Slides.Charts.IAxisFormat, namespace: Aspose.Slides.Charts
  DNIBaseChartValue = interface; // type: Aspose.Slides.Charts.IBaseChartValue, namespace: Aspose.Slides.Charts
  DNIDoubleChartValue = interface; // type: Aspose.Slides.Charts.IDoubleChartValue, namespace: Aspose.Slides.Charts
  DNIMultipleCellChartValue = interface; // type: Aspose.Slides.Charts.IMultipleCellChartValue, namespace: Aspose.Slides.Charts
  DNISingleCellChartValue = interface; // type: Aspose.Slides.Charts.ISingleCellChartValue, namespace: Aspose.Slides.Charts
  DNIStringChartValue = interface; // type: Aspose.Slides.Charts.IStringChartValue, namespace: Aspose.Slides.Charts
  DNIStringOrDoubleChartValue = interface; // type: Aspose.Slides.Charts.IStringOrDoubleChartValue, namespace: Aspose.Slides.Charts
  DNIChartCategory = interface; // type: Aspose.Slides.Charts.IChartCategory, namespace: Aspose.Slides.Charts
  DNIChartCategoryLevelsManager = interface; // type: Aspose.Slides.Charts.IChartCategoryLevelsManager, namespace: Aspose.Slides.Charts
  DNIChartData = interface; // type: Aspose.Slides.Charts.IChartData, namespace: Aspose.Slides.Charts
  DNIChartDataCell = interface; // type: Aspose.Slides.Charts.IChartDataCell, namespace: Aspose.Slides.Charts
  DNIChartDataPointLevel = interface; // type: Aspose.Slides.Charts.IChartDataPointLevel, namespace: Aspose.Slides.Charts
  DNIChartDataPointLevelsManager = interface; // type: Aspose.Slides.Charts.IChartDataPointLevelsManager, namespace: Aspose.Slides.Charts
  DNIChartDataWorkbook = interface; // type: Aspose.Slides.Charts.IChartDataWorkbook, namespace: Aspose.Slides.Charts
  DNIChartDataWorksheet = interface; // type: Aspose.Slides.Charts.IChartDataWorksheet, namespace: Aspose.Slides.Charts
  DNIChartLinesFormat = interface; // type: Aspose.Slides.Charts.IChartLinesFormat, namespace: Aspose.Slides.Charts
  DNIChartParagraphFormat = interface; // type: Aspose.Slides.Charts.IChartParagraphFormat, namespace: Aspose.Slides.Charts
  DNIChartTextBlockFormat = interface; // type: Aspose.Slides.Charts.IChartTextBlockFormat, namespace: Aspose.Slides.Charts
  DNIChartTextFormat = interface; // type: Aspose.Slides.Charts.IChartTextFormat, namespace: Aspose.Slides.Charts
  DNIChartWall = interface; // type: Aspose.Slides.Charts.IChartWall, namespace: Aspose.Slides.Charts
  DNIDataSourceTypeForErrorBarsCustomValues = interface; // type: Aspose.Slides.Charts.IDataSourceTypeForErrorBarsCustomValues, namespace: Aspose.Slides.Charts
  DNIErrorBarsCustomValues = interface; // type: Aspose.Slides.Charts.IErrorBarsCustomValues, namespace: Aspose.Slides.Charts
  DNIFormat = interface; // type: Aspose.Slides.Charts.IFormat, namespace: Aspose.Slides.Charts
  DNILegendEntryCollection = interface; // type: Aspose.Slides.Charts.ILegendEntryCollection, namespace: Aspose.Slides.Charts
  DNIMarker = interface; // type: Aspose.Slides.Charts.IMarker, namespace: Aspose.Slides.Charts
  DNIRotation3D = interface; // type: Aspose.Slides.Charts.IRotation3D, namespace: Aspose.Slides.Charts
  DNIUpDownBarsManager = interface; // type: Aspose.Slides.Charts.IUpDownBarsManager, namespace: Aspose.Slides.Charts
  DNIAlphaBiLevelEffectiveData = interface; // type: Aspose.Slides.Effects.IAlphaBiLevelEffectiveData, namespace: Aspose.Slides.Effects
  DNIAlphaCeilingEffectiveData = interface; // type: Aspose.Slides.Effects.IAlphaCeilingEffectiveData, namespace: Aspose.Slides.Effects
  DNIAlphaFloorEffectiveData = interface; // type: Aspose.Slides.Effects.IAlphaFloorEffectiveData, namespace: Aspose.Slides.Effects
  DNIAlphaInverseEffectiveData = interface; // type: Aspose.Slides.Effects.IAlphaInverseEffectiveData, namespace: Aspose.Slides.Effects
  DNIAlphaModulateEffectiveData = interface; // type: Aspose.Slides.Effects.IAlphaModulateEffectiveData, namespace: Aspose.Slides.Effects
  DNIAlphaModulateFixedEffectiveData = interface; // type: Aspose.Slides.Effects.IAlphaModulateFixedEffectiveData, namespace: Aspose.Slides.Effects
  DNIAlphaReplaceEffectiveData = interface; // type: Aspose.Slides.Effects.IAlphaReplaceEffectiveData, namespace: Aspose.Slides.Effects
  DNIBiLevelEffectiveData = interface; // type: Aspose.Slides.Effects.IBiLevelEffectiveData, namespace: Aspose.Slides.Effects
  DNIBlurEffectiveData = interface; // type: Aspose.Slides.Effects.IBlurEffectiveData, namespace: Aspose.Slides.Effects
  DNIColorChangeEffectiveData = interface; // type: Aspose.Slides.Effects.IColorChangeEffectiveData, namespace: Aspose.Slides.Effects
  DNIColorReplaceEffectiveData = interface; // type: Aspose.Slides.Effects.IColorReplaceEffectiveData, namespace: Aspose.Slides.Effects
  DNIDuotoneEffectiveData = interface; // type: Aspose.Slides.Effects.IDuotoneEffectiveData, namespace: Aspose.Slides.Effects
  DNIEffectEffectiveData = interface; // type: Aspose.Slides.Effects.IEffectEffectiveData, namespace: Aspose.Slides.Effects
  DNIEffectFactory = interface; // type: Aspose.Slides.Effects.IEffectFactory, namespace: Aspose.Slides.Effects
  DNIFillOverlayEffectiveData = interface; // type: Aspose.Slides.Effects.IFillOverlayEffectiveData, namespace: Aspose.Slides.Effects
  DNIGlow = interface; // type: Aspose.Slides.Effects.IGlow, namespace: Aspose.Slides.Effects
  DNIGlowEffectiveData = interface; // type: Aspose.Slides.Effects.IGlowEffectiveData, namespace: Aspose.Slides.Effects
  DNIGrayScaleEffectiveData = interface; // type: Aspose.Slides.Effects.IGrayScaleEffectiveData, namespace: Aspose.Slides.Effects
  DNIHSLEffectiveData = interface; // type: Aspose.Slides.Effects.IHSLEffectiveData, namespace: Aspose.Slides.Effects
  DNIImageTransformOperation = interface; // type: Aspose.Slides.Effects.IImageTransformOperation, namespace: Aspose.Slides.Effects
  DNIAlphaBiLevel = interface; // type: Aspose.Slides.Effects.IAlphaBiLevel, namespace: Aspose.Slides.Effects
  DNIAlphaCeiling = interface; // type: Aspose.Slides.Effects.IAlphaCeiling, namespace: Aspose.Slides.Effects
  DNIAlphaFloor = interface; // type: Aspose.Slides.Effects.IAlphaFloor, namespace: Aspose.Slides.Effects
  DNIAlphaInverse = interface; // type: Aspose.Slides.Effects.IAlphaInverse, namespace: Aspose.Slides.Effects
  DNIAlphaModulate = interface; // type: Aspose.Slides.Effects.IAlphaModulate, namespace: Aspose.Slides.Effects
  DNIAlphaModulateFixed = interface; // type: Aspose.Slides.Effects.IAlphaModulateFixed, namespace: Aspose.Slides.Effects
  DNIAlphaReplace = interface; // type: Aspose.Slides.Effects.IAlphaReplace, namespace: Aspose.Slides.Effects
  DNIBiLevel = interface; // type: Aspose.Slides.Effects.IBiLevel, namespace: Aspose.Slides.Effects
  DNIBlur = interface; // type: Aspose.Slides.Effects.IBlur, namespace: Aspose.Slides.Effects
  DNIColorChange = interface; // type: Aspose.Slides.Effects.IColorChange, namespace: Aspose.Slides.Effects
  DNIColorReplace = interface; // type: Aspose.Slides.Effects.IColorReplace, namespace: Aspose.Slides.Effects
  DNIDuotone = interface; // type: Aspose.Slides.Effects.IDuotone, namespace: Aspose.Slides.Effects
  DNIFillOverlay = interface; // type: Aspose.Slides.Effects.IFillOverlay, namespace: Aspose.Slides.Effects
  DNIGrayScale = interface; // type: Aspose.Slides.Effects.IGrayScale, namespace: Aspose.Slides.Effects
  DNIHSL = interface; // type: Aspose.Slides.Effects.IHSL, namespace: Aspose.Slides.Effects
  DNILuminance = interface; // type: Aspose.Slides.Effects.ILuminance, namespace: Aspose.Slides.Effects
  DNITint = interface; // type: Aspose.Slides.Effects.ITint, namespace: Aspose.Slides.Effects
  DNIImageTransformOperationFactory = interface; // type: Aspose.Slides.Effects.IImageTransformOperationFactory, namespace: Aspose.Slides.Effects
  DNIInnerShadow = interface; // type: Aspose.Slides.Effects.IInnerShadow, namespace: Aspose.Slides.Effects
  DNIInnerShadowEffectiveData = interface; // type: Aspose.Slides.Effects.IInnerShadowEffectiveData, namespace: Aspose.Slides.Effects
  DNILuminanceEffectiveData = interface; // type: Aspose.Slides.Effects.ILuminanceEffectiveData, namespace: Aspose.Slides.Effects
  DNIOuterShadow = interface; // type: Aspose.Slides.Effects.IOuterShadow, namespace: Aspose.Slides.Effects
  DNIOuterShadowEffectiveData = interface; // type: Aspose.Slides.Effects.IOuterShadowEffectiveData, namespace: Aspose.Slides.Effects
  DNIPresetShadow = interface; // type: Aspose.Slides.Effects.IPresetShadow, namespace: Aspose.Slides.Effects
  DNIPresetShadowEffectiveData = interface; // type: Aspose.Slides.Effects.IPresetShadowEffectiveData, namespace: Aspose.Slides.Effects
  DNIReflection = interface; // type: Aspose.Slides.Effects.IReflection, namespace: Aspose.Slides.Effects
  DNIReflectionEffectiveData = interface; // type: Aspose.Slides.Effects.IReflectionEffectiveData, namespace: Aspose.Slides.Effects
  DNISoftEdge = interface; // type: Aspose.Slides.Effects.ISoftEdge, namespace: Aspose.Slides.Effects
  DNISoftEdgeEffectiveData = interface; // type: Aspose.Slides.Effects.ISoftEdgeEffectiveData, namespace: Aspose.Slides.Effects
  DNITintEffectiveData = interface; // type: Aspose.Slides.Effects.ITintEffectiveData, namespace: Aspose.Slides.Effects
  DNIHtmlFormatter = interface; // type: Aspose.Slides.Export.IHtmlFormatter, namespace: Aspose.Slides.Export
  DNIHtmlFormattingController = interface; // type: Aspose.Slides.Export.IHtmlFormattingController, namespace: Aspose.Slides.Export
  DNIEmbeddedEotFontsHtmlController = interface; // type: Aspose.Slides.Export.IEmbeddedEotFontsHtmlController, namespace: Aspose.Slides.Export
  DNIEmbeddedWoffFontsHtmlController = interface; // type: Aspose.Slides.Export.IEmbeddedWoffFontsHtmlController, namespace: Aspose.Slides.Export
  DNIResponsiveHtmlController = interface; // type: Aspose.Slides.Export.IResponsiveHtmlController, namespace: Aspose.Slides.Export
  DNIHtmlGenerator = interface; // type: Aspose.Slides.Export.IHtmlGenerator, namespace: Aspose.Slides.Export
  DNILinkEmbedController = interface; // type: Aspose.Slides.Export.ILinkEmbedController, namespace: Aspose.Slides.Export
  DNIVideoPlayerHtmlController = interface; // type: Aspose.Slides.Export.IVideoPlayerHtmlController, namespace: Aspose.Slides.Export
  DNINotesCommentsLayoutingOptions = interface; // type: Aspose.Slides.Export.INotesCommentsLayoutingOptions, namespace: Aspose.Slides.Export
  DNISaveOptions = interface; // type: Aspose.Slides.Export.ISaveOptions, namespace: Aspose.Slides.Export
  DNIHtmlOptions = interface; // type: Aspose.Slides.Export.IHtmlOptions, namespace: Aspose.Slides.Export
  DNIPdfOptions = interface; // type: Aspose.Slides.Export.IPdfOptions, namespace: Aspose.Slides.Export
  DNIPptOptions = interface; // type: Aspose.Slides.Export.IPptOptions, namespace: Aspose.Slides.Export
  DNIPptxOptions = interface; // type: Aspose.Slides.Export.IPptxOptions, namespace: Aspose.Slides.Export
  DNIRenderingOptions = interface; // type: Aspose.Slides.Export.IRenderingOptions, namespace: Aspose.Slides.Export
  DNISVGOptions = interface; // type: Aspose.Slides.Export.ISVGOptions, namespace: Aspose.Slides.Export
  DNISwfOptions = interface; // type: Aspose.Slides.Export.ISwfOptions, namespace: Aspose.Slides.Export
  DNITiffOptions = interface; // type: Aspose.Slides.Export.ITiffOptions, namespace: Aspose.Slides.Export
  DNIXpsOptions = interface; // type: Aspose.Slides.Export.IXpsOptions, namespace: Aspose.Slides.Export
  DNIXamlOptions = interface; // type: Aspose.Slides.Export.Xaml.IXamlOptions, namespace: Aspose.Slides.Export.Xaml
  DNISaveOptionsFactory = interface; // type: Aspose.Slides.Export.ISaveOptionsFactory, namespace: Aspose.Slides.Export
  DNISlideImageFormat = interface; // type: Aspose.Slides.Export.ISlideImageFormat, namespace: Aspose.Slides.Export
  DNISvgShape = interface; // type: Aspose.Slides.Export.ISvgShape, namespace: Aspose.Slides.Export
  DNISvgShapeFormattingController = interface; // type: Aspose.Slides.Export.ISvgShapeFormattingController, namespace: Aspose.Slides.Export
  DNISvgShapeAndTextFormattingController = interface; // type: Aspose.Slides.Export.ISvgShapeAndTextFormattingController, namespace: Aspose.Slides.Export
  DNISvgTSpan = interface; // type: Aspose.Slides.Export.ISvgTSpan, namespace: Aspose.Slides.Export
  DNITextToHtmlConversionOptions = interface; // type: Aspose.Slides.Export.ITextToHtmlConversionOptions, namespace: Aspose.Slides.Export
  DNIVideoPlayerHtmlControllerFactory = interface; // type: Aspose.Slides.Export.IVideoPlayerHtmlControllerFactory, namespace: Aspose.Slides.Export
  DNIOutputFile = interface; // type: Aspose.Slides.Export.Web.IOutputFile, namespace: Aspose.Slides.Export.Web
  DNIOutputSaver = interface; // type: Aspose.Slides.Export.Web.IOutputSaver, namespace: Aspose.Slides.Export.Web
  DNITemplateEngine = interface; // type: Aspose.Slides.Export.Web.ITemplateEngine, namespace: Aspose.Slides.Export.Web
  DNIXamlOutputSaver = interface; // type: Aspose.Slides.Export.Xaml.IXamlOutputSaver, namespace: Aspose.Slides.Export.Xaml
  DNIAdjustValue = interface; // type: Aspose.Slides.IAdjustValue, namespace: Aspose.Slides
  DNIAnimationTimeLine = interface; // type: Aspose.Slides.IAnimationTimeLine, namespace: Aspose.Slides
  DNIAudio = interface; // type: Aspose.Slides.IAudio, namespace: Aspose.Slides
  DNIBackdrop3DScene = interface; // type: Aspose.Slides.IBackdrop3DScene, namespace: Aspose.Slides
  DNIBaseHeaderFooterManager = interface; // type: Aspose.Slides.IBaseHeaderFooterManager, namespace: Aspose.Slides
  DNIBaseSlideHeaderFooterManager = interface; // type: Aspose.Slides.IBaseSlideHeaderFooterManager, namespace: Aspose.Slides
  DNIBaseHandoutNotesSlideHeaderFooterManag = interface; // type: Aspose.Slides.IBaseHandoutNotesSlideHeaderFooterManag, namespace: Aspose.Slides
  DNIMasterHandoutSlideHeaderFooterManager = interface; // type: Aspose.Slides.IMasterHandoutSlideHeaderFooterManager, namespace: Aspose.Slides
  DNIMasterNotesSlideHeaderFooterManager = interface; // type: Aspose.Slides.IMasterNotesSlideHeaderFooterManager, namespace: Aspose.Slides
  DNINotesSlideHeaderFooterManager = interface; // type: Aspose.Slides.INotesSlideHeaderFooterManager, namespace: Aspose.Slides
  DNILayoutSlideHeaderFooterManager = interface; // type: Aspose.Slides.ILayoutSlideHeaderFooterManager, namespace: Aspose.Slides
  DNIMasterSlideHeaderFooterManager = interface; // type: Aspose.Slides.IMasterSlideHeaderFooterManager, namespace: Aspose.Slides
  DNISlideHeaderFooterManager = interface; // type: Aspose.Slides.ISlideHeaderFooterManager, namespace: Aspose.Slides
  DNIPresentationHeaderFooterManager = interface; // type: Aspose.Slides.IPresentationHeaderFooterManager, namespace: Aspose.Slides
  DNIBasePortionFormat = interface; // type: Aspose.Slides.IBasePortionFormat, namespace: Aspose.Slides
  DNIChartPortionFormat = interface; // type: Aspose.Slides.Charts.IChartPortionFormat, namespace: Aspose.Slides.Charts
  DNIPortionFormat = interface; // type: Aspose.Slides.IPortionFormat, namespace: Aspose.Slides
  DNIBasePortionFormatEffectiveData = interface; // type: Aspose.Slides.IBasePortionFormatEffectiveData, namespace: Aspose.Slides
  DNIPortionFormatEffectiveData = interface; // type: Aspose.Slides.IPortionFormatEffectiveData, namespace: Aspose.Slides
  DNIBaseShapeLock = interface; // type: Aspose.Slides.IBaseShapeLock, namespace: Aspose.Slides
  DNIAutoShapeLock = interface; // type: Aspose.Slides.IAutoShapeLock, namespace: Aspose.Slides
  DNIConnectorLock = interface; // type: Aspose.Slides.IConnectorLock, namespace: Aspose.Slides
  DNIGraphicalObjectLock = interface; // type: Aspose.Slides.IGraphicalObjectLock, namespace: Aspose.Slides
  DNIGroupShapeLock = interface; // type: Aspose.Slides.IGroupShapeLock, namespace: Aspose.Slides
  DNIPictureFrameLock = interface; // type: Aspose.Slides.IPictureFrameLock, namespace: Aspose.Slides
  DNIBaseTableFormatEffectiveData = interface; // type: Aspose.Slides.IBaseTableFormatEffectiveData, namespace: Aspose.Slides
  DNICellFormatEffectiveData = interface; // type: Aspose.Slides.ICellFormatEffectiveData, namespace: Aspose.Slides
  DNIColumnFormatEffectiveData = interface; // type: Aspose.Slides.IColumnFormatEffectiveData, namespace: Aspose.Slides
  DNIRowFormatEffectiveData = interface; // type: Aspose.Slides.IRowFormatEffectiveData, namespace: Aspose.Slides
  DNITableFormatEffectiveData = interface; // type: Aspose.Slides.ITableFormatEffectiveData, namespace: Aspose.Slides
  DNIBlobManagementOptions = interface; // type: Aspose.Slides.IBlobManagementOptions, namespace: Aspose.Slides
  DNIBulkTextFormattable = interface; // type: Aspose.Slides.IBulkTextFormattable, namespace: Aspose.Slides
  DNIBulletFormat = interface; // type: Aspose.Slides.IBulletFormat, namespace: Aspose.Slides
  DNIBulletFormatEffectiveData = interface; // type: Aspose.Slides.IBulletFormatEffectiveData, namespace: Aspose.Slides
  DNICamera = interface; // type: Aspose.Slides.ICamera, namespace: Aspose.Slides
  DNICameraEffectiveData = interface; // type: Aspose.Slides.ICameraEffectiveData, namespace: Aspose.Slides
  DNICellFormat = interface; // type: Aspose.Slides.ICellFormat, namespace: Aspose.Slides
  DNIColorOperation = interface; // type: Aspose.Slides.IColorOperation, namespace: Aspose.Slides
  DNIColumnFormat = interface; // type: Aspose.Slides.IColumnFormat, namespace: Aspose.Slides
  DNIComment = interface; // type: Aspose.Slides.IComment, namespace: Aspose.Slides
  DNICommentAuthor = interface; // type: Aspose.Slides.ICommentAuthor, namespace: Aspose.Slides
  DNICommonSlideViewProperties = interface; // type: Aspose.Slides.ICommonSlideViewProperties, namespace: Aspose.Slides
  DNICustomData = interface; // type: Aspose.Slides.ICustomData, namespace: Aspose.Slides
  DNICustomXmlPart = interface; // type: Aspose.Slides.ICustomXmlPart, namespace: Aspose.Slides
  DNIDigitalSignature = interface; // type: Aspose.Slides.IDigitalSignature, namespace: Aspose.Slides
  DNIDocumentProperties = interface; // type: Aspose.Slides.IDocumentProperties, namespace: Aspose.Slides
  DNIEffectParamSource = interface; // type: Aspose.Slides.IEffectParamSource, namespace: Aspose.Slides
  DNIEffectFormat = interface; // type: Aspose.Slides.IEffectFormat, namespace: Aspose.Slides
  DNIEffectFormatEffectiveData = interface; // type: Aspose.Slides.IEffectFormatEffectiveData, namespace: Aspose.Slides
  DNIFieldType = interface; // type: Aspose.Slides.IFieldType, namespace: Aspose.Slides
  DNIFillParamSource = interface; // type: Aspose.Slides.IFillParamSource, namespace: Aspose.Slides
  DNIBackgroundEffectiveData = interface; // type: Aspose.Slides.IBackgroundEffectiveData, namespace: Aspose.Slides
  DNIColorFormat = interface; // type: Aspose.Slides.IColorFormat, namespace: Aspose.Slides
  DNIFillFormat = interface; // type: Aspose.Slides.IFillFormat, namespace: Aspose.Slides
  DNIFillFormatEffectiveData = interface; // type: Aspose.Slides.IFillFormatEffectiveData, namespace: Aspose.Slides
  DNIGradientFormat = interface; // type: Aspose.Slides.IGradientFormat, namespace: Aspose.Slides
  DNIGradientFormatEffectiveData = interface; // type: Aspose.Slides.IGradientFormatEffectiveData, namespace: Aspose.Slides
  DNILineFillFormat = interface; // type: Aspose.Slides.ILineFillFormat, namespace: Aspose.Slides
  DNILineFillFormatEffectiveData = interface; // type: Aspose.Slides.ILineFillFormatEffectiveData, namespace: Aspose.Slides
  DNIPictureFillFormat = interface; // type: Aspose.Slides.IPictureFillFormat, namespace: Aspose.Slides
  DNIPictureFillFormatEffectiveData = interface; // type: Aspose.Slides.IPictureFillFormatEffectiveData, namespace: Aspose.Slides
  DNIFontData = interface; // type: Aspose.Slides.IFontData, namespace: Aspose.Slides
  DNIFontDataFactory = interface; // type: Aspose.Slides.IFontDataFactory, namespace: Aspose.Slides
  DNIFontFallBackRule = interface; // type: Aspose.Slides.IFontFallBackRule, namespace: Aspose.Slides
  DNIFonts = interface; // type: Aspose.Slides.IFonts, namespace: Aspose.Slides
  DNIFontsEffectiveData = interface; // type: Aspose.Slides.IFontsEffectiveData, namespace: Aspose.Slides
  DNIFontsLoader = interface; // type: Aspose.Slides.IFontsLoader, namespace: Aspose.Slides
  DNIFontsManager = interface; // type: Aspose.Slides.IFontsManager, namespace: Aspose.Slides
  DNIFontSources = interface; // type: Aspose.Slides.IFontSources, namespace: Aspose.Slides
  DNIFontSubstRule = interface; // type: Aspose.Slides.IFontSubstRule, namespace: Aspose.Slides
  DNIFormatFactory = interface; // type: Aspose.Slides.IFormatFactory, namespace: Aspose.Slides
  DNIGeometryPath = interface; // type: Aspose.Slides.IGeometryPath, namespace: Aspose.Slides
  DNIGradientStop = interface; // type: Aspose.Slides.IGradientStop, namespace: Aspose.Slides
  DNIGradientStopEffectiveData = interface; // type: Aspose.Slides.IGradientStopEffectiveData, namespace: Aspose.Slides
  DNIHyperlink = interface; // type: Aspose.Slides.IHyperlink, namespace: Aspose.Slides
  DNIHyperlinkContainer = interface; // type: Aspose.Slides.IHyperlinkContainer, namespace: Aspose.Slides
  DNIHyperlinkManager = interface; // type: Aspose.Slides.IHyperlinkManager, namespace: Aspose.Slides
  DNIHyperlinkQueries = interface; // type: Aspose.Slides.IHyperlinkQueries, namespace: Aspose.Slides
  DNIImageWrapperFactory = interface; // type: Aspose.Slides.IImageWrapperFactory, namespace: Aspose.Slides
  DNIInterruptionToken = interface; // type: Aspose.Slides.IInterruptionToken, namespace: Aspose.Slides
  DNIInterruptionTokenSource = interface; // type: Aspose.Slides.IInterruptionTokenSource, namespace: Aspose.Slides
  DNILicense = interface; // type: Aspose.Slides.ILicense, namespace: Aspose.Slides
  DNILightRig = interface; // type: Aspose.Slides.ILightRig, namespace: Aspose.Slides
  DNILightRigEffectiveData = interface; // type: Aspose.Slides.ILightRigEffectiveData, namespace: Aspose.Slides
  DNILineParamSource = interface; // type: Aspose.Slides.ILineParamSource, namespace: Aspose.Slides
  DNILineFormat = interface; // type: Aspose.Slides.ILineFormat, namespace: Aspose.Slides
  DNILineFormatEffectiveData = interface; // type: Aspose.Slides.ILineFormatEffectiveData, namespace: Aspose.Slides
  DNILoadOptions = interface; // type: Aspose.Slides.ILoadOptions, namespace: Aspose.Slides
  DNIMasterHandoutSlideManager = interface; // type: Aspose.Slides.IMasterHandoutSlideManager, namespace: Aspose.Slides
  DNIMasterNotesSlideManager = interface; // type: Aspose.Slides.IMasterNotesSlideManager, namespace: Aspose.Slides
  DNIMetered = interface; // type: Aspose.Slides.IMetered, namespace: Aspose.Slides
  DNIExternalResourceResolver = interface; // type: Aspose.Slides.Import.IExternalResourceResolver, namespace: Aspose.Slides.Import
  DNIHtmlExternalResolver = interface; // type: Aspose.Slides.Import.IHtmlExternalResolver, namespace: Aspose.Slides.Import
  DNINormalViewProperties = interface; // type: Aspose.Slides.INormalViewProperties, namespace: Aspose.Slides
  DNINormalViewRestoredProperties = interface; // type: Aspose.Slides.INormalViewRestoredProperties, namespace: Aspose.Slides
  DNINotesSize = interface; // type: Aspose.Slides.INotesSize, namespace: Aspose.Slides
  DNINotesSlideManager = interface; // type: Aspose.Slides.INotesSlideManager, namespace: Aspose.Slides
  DNIOleEmbeddedDataInfo = interface; // type: Aspose.Slides.IOleEmbeddedDataInfo, namespace: Aspose.Slides
  DNIParagraphFactory = interface; // type: Aspose.Slides.IParagraphFactory, namespace: Aspose.Slides
  DNIParagraphFormat = interface; // type: Aspose.Slides.IParagraphFormat, namespace: Aspose.Slides
  DNIParagraphFormatEffectiveData = interface; // type: Aspose.Slides.IParagraphFormatEffectiveData, namespace: Aspose.Slides
  DNIPathSegment = interface; // type: Aspose.Slides.IPathSegment, namespace: Aspose.Slides
  DNIPatternFormat = interface; // type: Aspose.Slides.IPatternFormat, namespace: Aspose.Slides
  DNIPatternFormatEffectiveData = interface; // type: Aspose.Slides.IPatternFormatEffectiveData, namespace: Aspose.Slides
  DNIPictureEffectiveData = interface; // type: Aspose.Slides.IPictureEffectiveData, namespace: Aspose.Slides
  DNIPlaceholder = interface; // type: Aspose.Slides.IPlaceholder, namespace: Aspose.Slides
  DNIPortionFactory = interface; // type: Aspose.Slides.IPortionFactory, namespace: Aspose.Slides
  DNIPPImage = interface; // type: Aspose.Slides.IPPImage, namespace: Aspose.Slides
  DNIPresentationComponent = interface; // type: Aspose.Slides.IPresentationComponent, namespace: Aspose.Slides
  DNISlideComponent = interface; // type: Aspose.Slides.ISlideComponent, namespace: Aspose.Slides
  DNIAxis = interface; // type: Aspose.Slides.Charts.IAxis, namespace: Aspose.Slides.Charts
  DNIChart = interface; // type: Aspose.Slides.Charts.IChart, namespace: Aspose.Slides.Charts
  DNIChartComponent = interface; // type: Aspose.Slides.Charts.IChartComponent, namespace: Aspose.Slides.Charts
  DNIChartSeries = interface; // type: Aspose.Slides.Charts.IChartSeries, namespace: Aspose.Slides.Charts
  DNIChartSeriesGroup = interface; // type: Aspose.Slides.Charts.IChartSeriesGroup, namespace: Aspose.Slides.Charts
  DNIDataLabelFormat = interface; // type: Aspose.Slides.Charts.IDataLabelFormat, namespace: Aspose.Slides.Charts
  DNIDataTable = interface; // type: Aspose.Slides.Charts.IDataTable, namespace: Aspose.Slides.Charts
  DNIErrorBarsFormat = interface; // type: Aspose.Slides.Charts.IErrorBarsFormat, namespace: Aspose.Slides.Charts
  DNIFormattedTextContainer = interface; // type: Aspose.Slides.Charts.IFormattedTextContainer, namespace: Aspose.Slides.Charts
  DNILayoutable = interface; // type: Aspose.Slides.Charts.ILayoutable, namespace: Aspose.Slides.Charts
  DNIChartPlotArea = interface; // type: Aspose.Slides.Charts.IChartPlotArea, namespace: Aspose.Slides.Charts
  DNIChartTitle = interface; // type: Aspose.Slides.Charts.IChartTitle, namespace: Aspose.Slides.Charts
  DNIDataLabel = interface; // type: Aspose.Slides.Charts.IDataLabel, namespace: Aspose.Slides.Charts
  DNILegend = interface; // type: Aspose.Slides.Charts.ILegend, namespace: Aspose.Slides.Charts
  DNILegendEntryProperties = interface; // type: Aspose.Slides.Charts.ILegendEntryProperties, namespace: Aspose.Slides.Charts
  DNIOverridableText = interface; // type: Aspose.Slides.Charts.IOverridableText, namespace: Aspose.Slides.Charts
  DNITrendline = interface; // type: Aspose.Slides.Charts.ITrendline, namespace: Aspose.Slides.Charts
  DNIAudioFrame = interface; // type: Aspose.Slides.IAudioFrame, namespace: Aspose.Slides
  DNIAutoShape = interface; // type: Aspose.Slides.IAutoShape, namespace: Aspose.Slides
  DNIBackground = interface; // type: Aspose.Slides.IBackground, namespace: Aspose.Slides
  DNIBaseSlide = interface; // type: Aspose.Slides.IBaseSlide, namespace: Aspose.Slides
  DNILayoutSlide = interface; // type: Aspose.Slides.ILayoutSlide, namespace: Aspose.Slides
  DNIMasterHandoutSlide = interface; // type: Aspose.Slides.IMasterHandoutSlide, namespace: Aspose.Slides
  DNIMasterNotesSlide = interface; // type: Aspose.Slides.IMasterNotesSlide, namespace: Aspose.Slides
  DNIMasterSlide = interface; // type: Aspose.Slides.IMasterSlide, namespace: Aspose.Slides
  DNINotesSlide = interface; // type: Aspose.Slides.INotesSlide, namespace: Aspose.Slides
  DNISlide = interface; // type: Aspose.Slides.ISlide, namespace: Aspose.Slides
  DNICell = interface; // type: Aspose.Slides.ICell, namespace: Aspose.Slides
  DNIConnector = interface; // type: Aspose.Slides.IConnector, namespace: Aspose.Slides
  DNIControl = interface; // type: Aspose.Slides.IControl, namespace: Aspose.Slides
  DNIField = interface; // type: Aspose.Slides.IField, namespace: Aspose.Slides
  DNIGeometryShape = interface; // type: Aspose.Slides.IGeometryShape, namespace: Aspose.Slides
  DNIGraphicalObject = interface; // type: Aspose.Slides.IGraphicalObject, namespace: Aspose.Slides
  DNIGroupShape = interface; // type: Aspose.Slides.IGroupShape, namespace: Aspose.Slides
  DNILegacyDiagram = interface; // type: Aspose.Slides.ILegacyDiagram, namespace: Aspose.Slides
  DNIInk = interface; // type: Aspose.Slides.Ink.IInk, namespace: Aspose.Slides.Ink
  DNIOleObjectFrame = interface; // type: Aspose.Slides.IOleObjectFrame, namespace: Aspose.Slides
  DNIParagraph = interface; // type: Aspose.Slides.IParagraph, namespace: Aspose.Slides
  DNIPictureFrame = interface; // type: Aspose.Slides.IPictureFrame, namespace: Aspose.Slides
  DNIPortion = interface; // type: Aspose.Slides.IPortion, namespace: Aspose.Slides
  DNIShape = interface; // type: Aspose.Slides.IShape, namespace: Aspose.Slides
  DNITable = interface; // type: Aspose.Slides.ITable, namespace: Aspose.Slides
  DNITextFrame = interface; // type: Aspose.Slides.ITextFrame, namespace: Aspose.Slides
  DNIVideoFrame = interface; // type: Aspose.Slides.IVideoFrame, namespace: Aspose.Slides
  DNIZoomFrame = interface; // type: Aspose.Slides.IZoomFrame, namespace: Aspose.Slides
  DNISmartArt = interface; // type: Aspose.Slides.SmartArt.ISmartArt, namespace: Aspose.Slides.SmartArt
  DNISmartArtShape = interface; // type: Aspose.Slides.SmartArt.ISmartArtShape, namespace: Aspose.Slides.SmartArt
  DNIColorScheme = interface; // type: Aspose.Slides.Theme.IColorScheme, namespace: Aspose.Slides.Theme
  DNIFormatScheme = interface; // type: Aspose.Slides.Theme.IFormatScheme, namespace: Aspose.Slides.Theme
  DNIMasterThemeable = interface; // type: Aspose.Slides.Theme.IMasterThemeable, namespace: Aspose.Slides.Theme
  DNIOverrideThemeable = interface; // type: Aspose.Slides.Theme.IOverrideThemeable, namespace: Aspose.Slides.Theme
  DNIThemeable = interface; // type: Aspose.Slides.Theme.IThemeable, namespace: Aspose.Slides.Theme
  DNISlidesPicture = interface; // type: Aspose.Slides.ISlidesPicture, namespace: Aspose.Slides
  DNIMasterTheme = interface; // type: Aspose.Slides.Theme.IMasterTheme, namespace: Aspose.Slides.Theme
  DNIOverrideTheme = interface; // type: Aspose.Slides.Theme.IOverrideTheme, namespace: Aspose.Slides.Theme
  DNITheme = interface; // type: Aspose.Slides.Theme.ITheme, namespace: Aspose.Slides.Theme
  DNIPresentationFactory = interface; // type: Aspose.Slides.IPresentationFactory, namespace: Aspose.Slides
  DNIPresentationInfo = interface; // type: Aspose.Slides.IPresentationInfo, namespace: Aspose.Slides
  DNIPresentationText = interface; // type: Aspose.Slides.IPresentationText, namespace: Aspose.Slides
  DNIProgressCallback = interface; // type: Aspose.Slides.IProgressCallback, namespace: Aspose.Slides
  DNIProtectionManager = interface; // type: Aspose.Slides.IProtectionManager, namespace: Aspose.Slides
  DNIResourceLoadingArgs = interface; // type: Aspose.Slides.IResourceLoadingArgs, namespace: Aspose.Slides
  DNIResourceLoadingCallback = interface; // type: Aspose.Slides.IResourceLoadingCallback, namespace: Aspose.Slides
  DNIRowFormat = interface; // type: Aspose.Slides.IRowFormat, namespace: Aspose.Slides
  DNISection = interface; // type: Aspose.Slides.ISection, namespace: Aspose.Slides
  DNIShapeBevel = interface; // type: Aspose.Slides.IShapeBevel, namespace: Aspose.Slides
  DNIShapeBevelEffectiveData = interface; // type: Aspose.Slides.IShapeBevelEffectiveData, namespace: Aspose.Slides
  DNIShapeElement = interface; // type: Aspose.Slides.IShapeElement, namespace: Aspose.Slides
  DNIShapeStyle = interface; // type: Aspose.Slides.IShapeStyle, namespace: Aspose.Slides
  DNISketchFormat = interface; // type: Aspose.Slides.ISketchFormat, namespace: Aspose.Slides
  DNISketchFormatEffectiveData = interface; // type: Aspose.Slides.ISketchFormatEffectiveData, namespace: Aspose.Slides
  DNISlideShowTransition = interface; // type: Aspose.Slides.ISlideShowTransition, namespace: Aspose.Slides
  DNISlideSize = interface; // type: Aspose.Slides.ISlideSize, namespace: Aspose.Slides
  DNISlideText = interface; // type: Aspose.Slides.ISlideText, namespace: Aspose.Slides
  DNISpreadsheetOptions = interface; // type: Aspose.Slides.ISpreadsheetOptions, namespace: Aspose.Slides
  DNIStreamWrapperFactory = interface; // type: Aspose.Slides.IStreamWrapperFactory, namespace: Aspose.Slides
  DNISvgImage = interface; // type: Aspose.Slides.ISvgImage, namespace: Aspose.Slides
  DNITabFactory = interface; // type: Aspose.Slides.ITabFactory, namespace: Aspose.Slides
  DNITableFormat = interface; // type: Aspose.Slides.ITableFormat, namespace: Aspose.Slides
  DNITextFrameFormat = interface; // type: Aspose.Slides.ITextFrameFormat, namespace: Aspose.Slides
  DNITextFrameFormatEffectiveData = interface; // type: Aspose.Slides.ITextFrameFormatEffectiveData, namespace: Aspose.Slides
  DNITextHighlightingOptions = interface; // type: Aspose.Slides.ITextHighlightingOptions, namespace: Aspose.Slides
  DNITextStyle = interface; // type: Aspose.Slides.ITextStyle, namespace: Aspose.Slides
  DNITextStyleEffectiveData = interface; // type: Aspose.Slides.ITextStyleEffectiveData, namespace: Aspose.Slides
  DNIThreeDParamSource = interface; // type: Aspose.Slides.IThreeDParamSource, namespace: Aspose.Slides
  DNIThreeDFormat = interface; // type: Aspose.Slides.IThreeDFormat, namespace: Aspose.Slides
  DNIThreeDFormatEffectiveData = interface; // type: Aspose.Slides.IThreeDFormatEffectiveData, namespace: Aspose.Slides
  DNIVideo = interface; // type: Aspose.Slides.IVideo, namespace: Aspose.Slides
  DNIViewProperties = interface; // type: Aspose.Slides.IViewProperties, namespace: Aspose.Slides
  DNIMathAccentFactory = interface; // type: Aspose.Slides.MathText.IMathAccentFactory, namespace: Aspose.Slides.MathText
  DNIMathArrayFactory = interface; // type: Aspose.Slides.MathText.IMathArrayFactory, namespace: Aspose.Slides.MathText
  DNIMathBarFactory = interface; // type: Aspose.Slides.MathText.IMathBarFactory, namespace: Aspose.Slides.MathText
  DNIMathBlockFactory = interface; // type: Aspose.Slides.MathText.IMathBlockFactory, namespace: Aspose.Slides.MathText
  DNIMathBorderBoxFactory = interface; // type: Aspose.Slides.MathText.IMathBorderBoxFactory, namespace: Aspose.Slides.MathText
  DNIMathBoxFactory = interface; // type: Aspose.Slides.MathText.IMathBoxFactory, namespace: Aspose.Slides.MathText
  DNIMathDelimiterFactory = interface; // type: Aspose.Slides.MathText.IMathDelimiterFactory, namespace: Aspose.Slides.MathText
  DNIMathElement = interface; // type: Aspose.Slides.MathText.IMathElement, namespace: Aspose.Slides.MathText
  DNIMathAccent = interface; // type: Aspose.Slides.MathText.IMathAccent, namespace: Aspose.Slides.MathText
  DNIMathArray = interface; // type: Aspose.Slides.MathText.IMathArray, namespace: Aspose.Slides.MathText
  DNIMathBar = interface; // type: Aspose.Slides.MathText.IMathBar, namespace: Aspose.Slides.MathText
  DNIMathBorderBox = interface; // type: Aspose.Slides.MathText.IMathBorderBox, namespace: Aspose.Slides.MathText
  DNIMathBox = interface; // type: Aspose.Slides.MathText.IMathBox, namespace: Aspose.Slides.MathText
  DNIMathDelimiter = interface; // type: Aspose.Slides.MathText.IMathDelimiter, namespace: Aspose.Slides.MathText
  DNIMathematicalText = interface; // type: Aspose.Slides.MathText.IMathematicalText, namespace: Aspose.Slides.MathText
  DNIMathFraction = interface; // type: Aspose.Slides.MathText.IMathFraction, namespace: Aspose.Slides.MathText
  DNIMathFunction = interface; // type: Aspose.Slides.MathText.IMathFunction, namespace: Aspose.Slides.MathText
  DNIMathGroupingCharacter = interface; // type: Aspose.Slides.MathText.IMathGroupingCharacter, namespace: Aspose.Slides.MathText
  DNIMathLeftSubSuperscriptElement = interface; // type: Aspose.Slides.MathText.IMathLeftSubSuperscriptElement, namespace: Aspose.Slides.MathText
  DNIMathLimit = interface; // type: Aspose.Slides.MathText.IMathLimit, namespace: Aspose.Slides.MathText
  DNIMathMatrix = interface; // type: Aspose.Slides.MathText.IMathMatrix, namespace: Aspose.Slides.MathText
  DNIMathNaryOperator = interface; // type: Aspose.Slides.MathText.IMathNaryOperator, namespace: Aspose.Slides.MathText
  DNIMathRadical = interface; // type: Aspose.Slides.MathText.IMathRadical, namespace: Aspose.Slides.MathText
  DNIMathRightSubSuperscriptElement = interface; // type: Aspose.Slides.MathText.IMathRightSubSuperscriptElement, namespace: Aspose.Slides.MathText
  DNIMathSubscriptElement = interface; // type: Aspose.Slides.MathText.IMathSubscriptElement, namespace: Aspose.Slides.MathText
  DNIMathSuperscriptElement = interface; // type: Aspose.Slides.MathText.IMathSuperscriptElement, namespace: Aspose.Slides.MathText
  DNIMathematicalTextFactory = interface; // type: Aspose.Slides.MathText.IMathematicalTextFactory, namespace: Aspose.Slides.MathText
  DNIMathFractionFactory = interface; // type: Aspose.Slides.MathText.IMathFractionFactory, namespace: Aspose.Slides.MathText
  DNIMathFunctionFactory = interface; // type: Aspose.Slides.MathText.IMathFunctionFactory, namespace: Aspose.Slides.MathText
  DNIMathGroupingCharacterFactory = interface; // type: Aspose.Slides.MathText.IMathGroupingCharacterFactory, namespace: Aspose.Slides.MathText
  DNIMathLeftSubSuperscriptElementFactory = interface; // type: Aspose.Slides.MathText.IMathLeftSubSuperscriptElementFactory, namespace: Aspose.Slides.MathText
  DNIMathLimitFactory = interface; // type: Aspose.Slides.MathText.IMathLimitFactory, namespace: Aspose.Slides.MathText
  DNIMathMatrixFactory = interface; // type: Aspose.Slides.MathText.IMathMatrixFactory, namespace: Aspose.Slides.MathText
  DNIMathNaryOperatorFactory = interface; // type: Aspose.Slides.MathText.IMathNaryOperatorFactory, namespace: Aspose.Slides.MathText
  DNIMathNaryOperatorProperties = interface; // type: Aspose.Slides.MathText.IMathNaryOperatorProperties, namespace: Aspose.Slides.MathText
  DNIMathParagraphFactory = interface; // type: Aspose.Slides.MathText.IMathParagraphFactory, namespace: Aspose.Slides.MathText
  DNIMathPortion = interface; // type: Aspose.Slides.MathText.IMathPortion, namespace: Aspose.Slides.MathText
  DNIMathRadicalFactory = interface; // type: Aspose.Slides.MathText.IMathRadicalFactory, namespace: Aspose.Slides.MathText
  DNIMathRightSubSuperscriptElementFactory = interface; // type: Aspose.Slides.MathText.IMathRightSubSuperscriptElementFactory, namespace: Aspose.Slides.MathText
  DNIMathSubscriptElementFactory = interface; // type: Aspose.Slides.MathText.IMathSubscriptElementFactory, namespace: Aspose.Slides.MathText
  DNIMathSuperscriptElementFactory = interface; // type: Aspose.Slides.MathText.IMathSuperscriptElementFactory, namespace: Aspose.Slides.MathText
  DNITransitionValueBase = interface; // type: Aspose.Slides.SlideShow.ITransitionValueBase, namespace: Aspose.Slides.SlideShow
  DNICornerDirectionTransition = interface; // type: Aspose.Slides.SlideShow.ICornerDirectionTransition, namespace: Aspose.Slides.SlideShow
  DNIEightDirectionTransition = interface; // type: Aspose.Slides.SlideShow.IEightDirectionTransition, namespace: Aspose.Slides.SlideShow
  DNIEmptyTransition = interface; // type: Aspose.Slides.SlideShow.IEmptyTransition, namespace: Aspose.Slides.SlideShow
  DNIFlyThroughTransition = interface; // type: Aspose.Slides.SlideShow.IFlyThroughTransition, namespace: Aspose.Slides.SlideShow
  DNIGlitterTransition = interface; // type: Aspose.Slides.SlideShow.IGlitterTransition, namespace: Aspose.Slides.SlideShow
  DNIInOutTransition = interface; // type: Aspose.Slides.SlideShow.IInOutTransition, namespace: Aspose.Slides.SlideShow
  DNILeftRightDirectionTransition = interface; // type: Aspose.Slides.SlideShow.ILeftRightDirectionTransition, namespace: Aspose.Slides.SlideShow
  DNIMorphTransition = interface; // type: Aspose.Slides.SlideShow.IMorphTransition, namespace: Aspose.Slides.SlideShow
  DNIOptionalBlackTransition = interface; // type: Aspose.Slides.SlideShow.IOptionalBlackTransition, namespace: Aspose.Slides.SlideShow
  DNIOrientationTransition = interface; // type: Aspose.Slides.SlideShow.IOrientationTransition, namespace: Aspose.Slides.SlideShow
  DNIRevealTransition = interface; // type: Aspose.Slides.SlideShow.IRevealTransition, namespace: Aspose.Slides.SlideShow
  DNIRippleTransition = interface; // type: Aspose.Slides.SlideShow.IRippleTransition, namespace: Aspose.Slides.SlideShow
  DNIShredTransition = interface; // type: Aspose.Slides.SlideShow.IShredTransition, namespace: Aspose.Slides.SlideShow
  DNISideDirectionTransition = interface; // type: Aspose.Slides.SlideShow.ISideDirectionTransition, namespace: Aspose.Slides.SlideShow
  DNISplitTransition = interface; // type: Aspose.Slides.SlideShow.ISplitTransition, namespace: Aspose.Slides.SlideShow
  DNIWheelTransition = interface; // type: Aspose.Slides.SlideShow.IWheelTransition, namespace: Aspose.Slides.SlideShow
  DNISmartArtNode = interface; // type: Aspose.Slides.SmartArt.ISmartArtNode, namespace: Aspose.Slides.SmartArt
  DNIColorSchemeEffectiveData = interface; // type: Aspose.Slides.Theme.IColorSchemeEffectiveData, namespace: Aspose.Slides.Theme
  DNIEffectStyle = interface; // type: Aspose.Slides.Theme.IEffectStyle, namespace: Aspose.Slides.Theme
  DNIEffectStyleEffectiveData = interface; // type: Aspose.Slides.Theme.IEffectStyleEffectiveData, namespace: Aspose.Slides.Theme
  DNIExtraColorScheme = interface; // type: Aspose.Slides.Theme.IExtraColorScheme, namespace: Aspose.Slides.Theme
  DNIFontScheme = interface; // type: Aspose.Slides.Theme.IFontScheme, namespace: Aspose.Slides.Theme
  DNIFontSchemeEffectiveData = interface; // type: Aspose.Slides.Theme.IFontSchemeEffectiveData, namespace: Aspose.Slides.Theme
  DNIFormatSchemeEffectiveData = interface; // type: Aspose.Slides.Theme.IFormatSchemeEffectiveData, namespace: Aspose.Slides.Theme
  DNIThemeEffectiveData = interface; // type: Aspose.Slides.Theme.IThemeEffectiveData, namespace: Aspose.Slides.Theme
  DNIThemeManager = interface; // type: Aspose.Slides.Theme.IThemeManager, namespace: Aspose.Slides.Theme
  DNIMasterThemeManager = interface; // type: Aspose.Slides.Theme.IMasterThemeManager, namespace: Aspose.Slides.Theme
  DNIOverrideThemeManager = interface; // type: Aspose.Slides.Theme.IOverrideThemeManager, namespace: Aspose.Slides.Theme
  DNIVbaModule = interface; // type: Aspose.Slides.Vba.IVbaModule, namespace: Aspose.Slides.Vba
  DNIVbaProject = interface; // type: Aspose.Slides.Vba.IVbaProject, namespace: Aspose.Slides.Vba
  DNIVbaProjectFactory = interface; // type: Aspose.Slides.Vba.IVbaProjectFactory, namespace: Aspose.Slides.Vba
  DNIVbaReference = interface; // type: Aspose.Slides.Vba.IVbaReference, namespace: Aspose.Slides.Vba
  DNIVbaReferenceOleTwiddledTypeLib = interface; // type: Aspose.Slides.Vba.IVbaReferenceOleTwiddledTypeLib, namespace: Aspose.Slides.Vba
  DNIVbaReferenceOleTypeLib = interface; // type: Aspose.Slides.Vba.IVbaReferenceOleTypeLib, namespace: Aspose.Slides.Vba
  DNIVbaReferenceProject = interface; // type: Aspose.Slides.Vba.IVbaReferenceProject, namespace: Aspose.Slides.Vba
  DNIVbaReferenceFactory = interface; // type: Aspose.Slides.Vba.IVbaReferenceFactory, namespace: Aspose.Slides.Vba
  DNIWarningCallback = interface; // type: Aspose.Slides.Warnings.IWarningCallback, namespace: Aspose.Slides.Warnings
  DNIWarningInfo = interface; // type: Aspose.Slides.Warnings.IWarningInfo, namespace: Aspose.Slides.Warnings
  DNIKnownIssueWarningInfo = interface; // type: Aspose.Slides.Warnings.IKnownIssueWarningInfo, namespace: Aspose.Slides.Warnings
  DNINotImplementedWarningInfo = interface; // type: Aspose.Slides.Warnings.INotImplementedWarningInfo, namespace: Aspose.Slides.Warnings
  DNIObsoletePresLockingBehaviorWarningInfo = interface; // type: Aspose.Slides.Warnings.IObsoletePresLockingBehaviorWarningInfo, namespace: Aspose.Slides.Warnings
  DNIPresentationSignedWarningInfo = interface; // type: Aspose.Slides.Warnings.IPresentationSignedWarningInfo, namespace: Aspose.Slides.Warnings
  DNIBehaviorCollection = interface; // type: Aspose.Slides.Animation.IBehaviorCollection, namespace: Aspose.Slides.Animation
  DNIBehaviorPropertyCollection = interface; // type: Aspose.Slides.Animation.IBehaviorPropertyCollection, namespace: Aspose.Slides.Animation
  DNIMotionPath = interface; // type: Aspose.Slides.Animation.IMotionPath, namespace: Aspose.Slides.Animation
  DNIPointCollection = interface; // type: Aspose.Slides.Animation.IPointCollection, namespace: Aspose.Slides.Animation
  DNISequence = interface; // type: Aspose.Slides.Animation.ISequence, namespace: Aspose.Slides.Animation
  DNISequenceCollection = interface; // type: Aspose.Slides.Animation.ISequenceCollection, namespace: Aspose.Slides.Animation
  DNIChartCellCollection = interface; // type: Aspose.Slides.Charts.IChartCellCollection, namespace: Aspose.Slides.Charts
  DNIDataLabelCollection = interface; // type: Aspose.Slides.Charts.IDataLabelCollection, namespace: Aspose.Slides.Charts
  DNIPieSplitCustomPointCollection = interface; // type: Aspose.Slides.Charts.IPieSplitCustomPointCollection, namespace: Aspose.Slides.Charts
  DNITrendlineCollection = interface; // type: Aspose.Slides.Charts.ITrendlineCollection, namespace: Aspose.Slides.Charts
  DNIImageTransformOperationCollection = interface; // type: Aspose.Slides.Effects.IImageTransformOperationCollection, namespace: Aspose.Slides.Effects
  DNIControlPropertiesCollection = interface; // type: Aspose.Slides.IControlPropertiesCollection, namespace: Aspose.Slides
  DNIPortionCollection = interface; // type: Aspose.Slides.IPortionCollection, namespace: Aspose.Slides
  DNIMathBlock = interface; // type: Aspose.Slides.MathText.IMathBlock, namespace: Aspose.Slides.MathText
  DNIMathBlockCollection = interface; // type: Aspose.Slides.MathText.IMathBlockCollection, namespace: Aspose.Slides.MathText
  DNIMathElementCollection = interface; // type: Aspose.Slides.MathText.IMathElementCollection, namespace: Aspose.Slides.MathText
  DNIMathParagraph = interface; // type: Aspose.Slides.MathText.IMathParagraph, namespace: Aspose.Slides.MathText
  DNIChartSeriesCollection = interface; // type: Aspose.Slides.Charts.IChartSeriesCollection, namespace: Aspose.Slides.Charts
  DNIChartSeriesReadonlyCollection = interface; // type: Aspose.Slides.Charts.IChartSeriesReadonlyCollection, namespace: Aspose.Slides.Charts
  DNIParagraphCollection = interface; // type: Aspose.Slides.IParagraphCollection, namespace: Aspose.Slides
  DNITextAnimationCollection = interface; // type: Aspose.Slides.Animation.ITextAnimationCollection, namespace: Aspose.Slides.Animation
  DNIChartCategoryCollection = interface; // type: Aspose.Slides.Charts.IChartCategoryCollection, namespace: Aspose.Slides.Charts
  DNIChartDataPointCollection = interface; // type: Aspose.Slides.Charts.IChartDataPointCollection, namespace: Aspose.Slides.Charts
  DNIChartSeriesGroupCollection = interface; // type: Aspose.Slides.Charts.IChartSeriesGroupCollection, namespace: Aspose.Slides.Charts
  DNIImageTransformOCollectionEffectiveData = interface; // type: Aspose.Slides.Effects.IImageTransformOCollectionEffectiveData, namespace: Aspose.Slides.Effects
  DNIAdjustValueCollection = interface; // type: Aspose.Slides.IAdjustValueCollection, namespace: Aspose.Slides
  DNIAudioCollection = interface; // type: Aspose.Slides.IAudioCollection, namespace: Aspose.Slides
  DNICellCollection = interface; // type: Aspose.Slides.ICellCollection, namespace: Aspose.Slides
  DNIColorOperationCollection = interface; // type: Aspose.Slides.IColorOperationCollection, namespace: Aspose.Slides
  DNIColumn = interface; // type: Aspose.Slides.IColumn, namespace: Aspose.Slides
  DNIColumnCollection = interface; // type: Aspose.Slides.IColumnCollection, namespace: Aspose.Slides
  DNICommentAuthorCollection = interface; // type: Aspose.Slides.ICommentAuthorCollection, namespace: Aspose.Slides
  DNICommentCollection = interface; // type: Aspose.Slides.ICommentCollection, namespace: Aspose.Slides
  DNIControlCollection = interface; // type: Aspose.Slides.IControlCollection, namespace: Aspose.Slides
  DNICustomXmlPartCollection = interface; // type: Aspose.Slides.ICustomXmlPartCollection, namespace: Aspose.Slides
  DNIDigitalSignatureCollection = interface; // type: Aspose.Slides.IDigitalSignatureCollection, namespace: Aspose.Slides
  DNIFontFallBackRulesCollection = interface; // type: Aspose.Slides.IFontFallBackRulesCollection, namespace: Aspose.Slides
  DNIFontSubstRuleCollection = interface; // type: Aspose.Slides.IFontSubstRuleCollection, namespace: Aspose.Slides
  DNIGenericCollection<T> = interface; // type: Aspose.Slides.IGenericCollection`1, namespace: Aspose.Slides
  DNIGlobalLayoutSlideCollection = interface; // type: Aspose.Slides.IGlobalLayoutSlideCollection, namespace: Aspose.Slides
  DNIGradientStopCollection = interface; // type: Aspose.Slides.IGradientStopCollection, namespace: Aspose.Slides
  DNIGradientStopCollectionEffectiveData = interface; // type: Aspose.Slides.IGradientStopCollectionEffectiveData, namespace: Aspose.Slides
  DNIImageCollection = interface; // type: Aspose.Slides.IImageCollection, namespace: Aspose.Slides
  DNILayoutSlideCollection = interface; // type: Aspose.Slides.ILayoutSlideCollection, namespace: Aspose.Slides
  DNIMasterLayoutSlideCollection = interface; // type: Aspose.Slides.IMasterLayoutSlideCollection, namespace: Aspose.Slides
  DNIMasterSlideCollection = interface; // type: Aspose.Slides.IMasterSlideCollection, namespace: Aspose.Slides
  DNIRow = interface; // type: Aspose.Slides.IRow, namespace: Aspose.Slides
  DNIRowCollection = interface; // type: Aspose.Slides.IRowCollection, namespace: Aspose.Slides
  DNISectionCollection = interface; // type: Aspose.Slides.ISectionCollection, namespace: Aspose.Slides
  DNISectionSlideCollection = interface; // type: Aspose.Slides.ISectionSlideCollection, namespace: Aspose.Slides
  DNIShapeCollection = interface; // type: Aspose.Slides.IShapeCollection, namespace: Aspose.Slides
  DNISlideCollection = interface; // type: Aspose.Slides.ISlideCollection, namespace: Aspose.Slides
  DNITabCollection = interface; // type: Aspose.Slides.ITabCollection, namespace: Aspose.Slides
  DNITagCollection = interface; // type: Aspose.Slides.ITagCollection, namespace: Aspose.Slides
  DNIVideoCollection = interface; // type: Aspose.Slides.IVideoCollection, namespace: Aspose.Slides
  DNISmartArtNodeCollection = interface; // type: Aspose.Slides.SmartArt.ISmartArtNodeCollection, namespace: Aspose.Slides.SmartArt
  DNISmartArtShapeCollection = interface; // type: Aspose.Slides.SmartArt.ISmartArtShapeCollection, namespace: Aspose.Slides.SmartArt
  DNIEffectStyleCollection = interface; // type: Aspose.Slides.Theme.IEffectStyleCollection, namespace: Aspose.Slides.Theme
  DNIEffectStyleCollectionEffectiveData = interface; // type: Aspose.Slides.Theme.IEffectStyleCollectionEffectiveData, namespace: Aspose.Slides.Theme
  DNIExtraColorSchemeCollection = interface; // type: Aspose.Slides.Theme.IExtraColorSchemeCollection, namespace: Aspose.Slides.Theme
  DNIFillFormatCollection = interface; // type: Aspose.Slides.Theme.IFillFormatCollection, namespace: Aspose.Slides.Theme
  DNIFillFormatCollectionEffectiveData = interface; // type: Aspose.Slides.Theme.IFillFormatCollectionEffectiveData, namespace: Aspose.Slides.Theme
  DNILineFormatCollection = interface; // type: Aspose.Slides.Theme.ILineFormatCollection, namespace: Aspose.Slides.Theme
  DNILineFormatCollectionEffectiveData = interface; // type: Aspose.Slides.Theme.ILineFormatCollectionEffectiveData, namespace: Aspose.Slides.Theme
  DNIVbaModuleCollection = interface; // type: Aspose.Slides.Vba.IVbaModuleCollection, namespace: Aspose.Slides.Vba
  DNIVbaReferenceCollection = interface; // type: Aspose.Slides.Vba.IVbaReferenceCollection, namespace: Aspose.Slides.Vba
  DNIGenericCloneable<T> = interface; // type: Aspose.Slides.IGenericCloneable`1, namespace: Aspose.Slides
  DNIShapeFrame = interface; // type: Aspose.Slides.IShapeFrame, namespace: Aspose.Slides
  DNITab = interface; // type: Aspose.Slides.ITab, namespace: Aspose.Slides
  DNITabEffectiveData = interface; // type: Aspose.Slides.ITabEffectiveData, namespace: Aspose.Slides
  DNIImageWrapper = interface; // type: Aspose.Slides.IImageWrapper, namespace: Aspose.Slides
  DNIPresentation = interface; // type: Aspose.Slides.IPresentation, namespace: Aspose.Slides
  DNIStreamWrapper = interface; // type: Aspose.Slides.IStreamWrapper, namespace: Aspose.Slides
  DNAdjustValue = interface; // type: Aspose.Slides.AdjustValue, namespace: Aspose.Slides
  DNAdjustValueCollection = interface; // type: Aspose.Slides.AdjustValueCollection, namespace: Aspose.Slides
  DNAnimationTimeLine = interface; // type: Aspose.Slides.Animation.AnimationTimeLine, namespace: Aspose.Slides.Animation
  DNBehavior = interface; // type: Aspose.Slides.Animation.Behavior, namespace: Aspose.Slides.Animation
  DNColorEffect = interface; // type: Aspose.Slides.Animation.ColorEffect, namespace: Aspose.Slides.Animation
  DNCommandEffect = interface; // type: Aspose.Slides.Animation.CommandEffect, namespace: Aspose.Slides.Animation
  DNFilterEffect = interface; // type: Aspose.Slides.Animation.FilterEffect, namespace: Aspose.Slides.Animation
  DNMotionEffect = interface; // type: Aspose.Slides.Animation.MotionEffect, namespace: Aspose.Slides.Animation
  DNPropertyEffect = interface; // type: Aspose.Slides.Animation.PropertyEffect, namespace: Aspose.Slides.Animation
  DNRotationEffect = interface; // type: Aspose.Slides.Animation.RotationEffect, namespace: Aspose.Slides.Animation
  DNScaleEffect = interface; // type: Aspose.Slides.Animation.ScaleEffect, namespace: Aspose.Slides.Animation
  DNSetEffect = interface; // type: Aspose.Slides.Animation.SetEffect, namespace: Aspose.Slides.Animation
  DNBehaviorCollection = interface; // type: Aspose.Slides.Animation.BehaviorCollection, namespace: Aspose.Slides.Animation
  DNBehaviorFactory = interface; // type: Aspose.Slides.Animation.BehaviorFactory, namespace: Aspose.Slides.Animation
  DNBehaviorProperty = interface; // type: Aspose.Slides.Animation.BehaviorProperty, namespace: Aspose.Slides.Animation
  DNBehaviorPropertyCollection = interface; // type: Aspose.Slides.Animation.BehaviorPropertyCollection, namespace: Aspose.Slides.Animation
  DNColorOffset = interface; // type: Aspose.Slides.Animation.ColorOffset, namespace: Aspose.Slides.Animation
  DNEffect = interface; // type: Aspose.Slides.Animation.Effect, namespace: Aspose.Slides.Animation
  DNMotionCmdPath = interface; // type: Aspose.Slides.Animation.MotionCmdPath, namespace: Aspose.Slides.Animation
  DNMotionPath = interface; // type: Aspose.Slides.Animation.MotionPath, namespace: Aspose.Slides.Animation
  DNPoint = interface; // type: Aspose.Slides.Animation.Point, namespace: Aspose.Slides.Animation
  DNPointCollection = interface; // type: Aspose.Slides.Animation.PointCollection, namespace: Aspose.Slides.Animation
  DNSequence = interface; // type: Aspose.Slides.Animation.Sequence, namespace: Aspose.Slides.Animation
  DNSequenceCollection = interface; // type: Aspose.Slides.Animation.SequenceCollection, namespace: Aspose.Slides.Animation
  DNTextAnimation = interface; // type: Aspose.Slides.Animation.TextAnimation, namespace: Aspose.Slides.Animation
  DNTextAnimationCollection = interface; // type: Aspose.Slides.Animation.TextAnimationCollection, namespace: Aspose.Slides.Animation
  DNTiming = interface; // type: Aspose.Slides.Animation.Timing, namespace: Aspose.Slides.Animation
  DNAudio = interface; // type: Aspose.Slides.Audio, namespace: Aspose.Slides
  DNAudioCollection = interface; // type: Aspose.Slides.AudioCollection, namespace: Aspose.Slides
  DNBaseHeaderFooterManager = interface; // type: Aspose.Slides.BaseHeaderFooterManager, namespace: Aspose.Slides
  DNBaseSlideHeaderFooterManager = interface; // type: Aspose.Slides.BaseSlideHeaderFooterManager, namespace: Aspose.Slides
  DNBaseHandoutNotesSlideHeaderFooterManager = interface; // type: Aspose.Slides.BaseHandoutNotesSlideHeaderFooterManager, namespace: Aspose.Slides
  DNMasterHandoutSlideHeaderFooterManager = interface; // type: Aspose.Slides.MasterHandoutSlideHeaderFooterManager, namespace: Aspose.Slides
  DNMasterNotesSlideHeaderFooterManager = interface; // type: Aspose.Slides.MasterNotesSlideHeaderFooterManager, namespace: Aspose.Slides
  DNNotesSlideHeaderFooterManager = interface; // type: Aspose.Slides.NotesSlideHeaderFooterManager, namespace: Aspose.Slides
  DNLayoutSlideHeaderFooterManager = interface; // type: Aspose.Slides.LayoutSlideHeaderFooterManager, namespace: Aspose.Slides
  DNMasterSlideHeaderFooterManager = interface; // type: Aspose.Slides.MasterSlideHeaderFooterManager, namespace: Aspose.Slides
  DNSlideHeaderFooterManager = interface; // type: Aspose.Slides.SlideHeaderFooterManager, namespace: Aspose.Slides
  DNPresentationHeaderFooterManager = interface; // type: Aspose.Slides.PresentationHeaderFooterManager, namespace: Aspose.Slides
  DNBaseShapeLock = interface; // type: Aspose.Slides.BaseShapeLock, namespace: Aspose.Slides
  DNAutoShapeLock = interface; // type: Aspose.Slides.AutoShapeLock, namespace: Aspose.Slides
  DNConnectorLock = interface; // type: Aspose.Slides.ConnectorLock, namespace: Aspose.Slides
  DNGraphicalObjectLock = interface; // type: Aspose.Slides.GraphicalObjectLock, namespace: Aspose.Slides
  DNGroupShapeLock = interface; // type: Aspose.Slides.GroupShapeLock, namespace: Aspose.Slides
  DNPictureFrameLock = interface; // type: Aspose.Slides.PictureFrameLock, namespace: Aspose.Slides
  DNBaseSlide = interface; // type: Aspose.Slides.BaseSlide, namespace: Aspose.Slides
  DNLayoutSlide = interface; // type: Aspose.Slides.LayoutSlide, namespace: Aspose.Slides
  DNMasterHandoutSlide = interface; // type: Aspose.Slides.MasterHandoutSlide, namespace: Aspose.Slides
  DNMasterNotesSlide = interface; // type: Aspose.Slides.MasterNotesSlide, namespace: Aspose.Slides
  DNMasterSlide = interface; // type: Aspose.Slides.MasterSlide, namespace: Aspose.Slides
  DNNotesSlide = interface; // type: Aspose.Slides.NotesSlide, namespace: Aspose.Slides
  DNSlide = interface; // type: Aspose.Slides.Slide, namespace: Aspose.Slides
  DNBlobManagementOptions = interface; // type: Aspose.Slides.BlobManagementOptions, namespace: Aspose.Slides
  DNBuildVersionInfo = interface; // type: Aspose.Slides.BuildVersionInfo, namespace: Aspose.Slides
  DNCell = interface; // type: Aspose.Slides.Cell, namespace: Aspose.Slides
  DNCellCollection = interface; // type: Aspose.Slides.CellCollection, namespace: Aspose.Slides
  DNColumn = interface; // type: Aspose.Slides.Column, namespace: Aspose.Slides
  DNRow = interface; // type: Aspose.Slides.Row, namespace: Aspose.Slides
  DNAxesManager = interface; // type: Aspose.Slides.Charts.AxesManager, namespace: Aspose.Slides.Charts
  DNAxis = interface; // type: Aspose.Slides.Charts.Axis, namespace: Aspose.Slides.Charts
  DNAxisFormat = interface; // type: Aspose.Slides.Charts.AxisFormat, namespace: Aspose.Slides.Charts
  DNBaseChartValue = interface; // type: Aspose.Slides.Charts.BaseChartValue, namespace: Aspose.Slides.Charts
  DNDoubleChartValue = interface; // type: Aspose.Slides.Charts.DoubleChartValue, namespace: Aspose.Slides.Charts
  DNStringChartValue = interface; // type: Aspose.Slides.Charts.StringChartValue, namespace: Aspose.Slides.Charts
  DNStringOrDoubleChartValue = interface; // type: Aspose.Slides.Charts.StringOrDoubleChartValue, namespace: Aspose.Slides.Charts
  DNChartCategory = interface; // type: Aspose.Slides.Charts.ChartCategory, namespace: Aspose.Slides.Charts
  DNChartCategoryCollection = interface; // type: Aspose.Slides.Charts.ChartCategoryCollection, namespace: Aspose.Slides.Charts
  DNChartCategoryLevelsManager = interface; // type: Aspose.Slides.Charts.ChartCategoryLevelsManager, namespace: Aspose.Slides.Charts
  DNChartCellCollection = interface; // type: Aspose.Slides.Charts.ChartCellCollection, namespace: Aspose.Slides.Charts
  DNChartData = interface; // type: Aspose.Slides.Charts.ChartData, namespace: Aspose.Slides.Charts
  DNChartDataCell = interface; // type: Aspose.Slides.Charts.ChartDataCell, namespace: Aspose.Slides.Charts
  DNChartDataPoint = interface; // type: Aspose.Slides.Charts.ChartDataPoint, namespace: Aspose.Slides.Charts
  DNChartDataPointCollection = interface; // type: Aspose.Slides.Charts.ChartDataPointCollection, namespace: Aspose.Slides.Charts
  DNChartDataPointLevel = interface; // type: Aspose.Slides.Charts.ChartDataPointLevel, namespace: Aspose.Slides.Charts
  DNChartDataPointLevelsManager = interface; // type: Aspose.Slides.Charts.ChartDataPointLevelsManager, namespace: Aspose.Slides.Charts
  DNChartDataWorkbook = interface; // type: Aspose.Slides.Charts.ChartDataWorkbook, namespace: Aspose.Slides.Charts
  DNChartDataWorksheet = interface; // type: Aspose.Slides.Charts.ChartDataWorksheet, namespace: Aspose.Slides.Charts
  DNChartLinesFormat = interface; // type: Aspose.Slides.Charts.ChartLinesFormat, namespace: Aspose.Slides.Charts
  DNChartPlotArea = interface; // type: Aspose.Slides.Charts.ChartPlotArea, namespace: Aspose.Slides.Charts
  DNChartSeries = interface; // type: Aspose.Slides.Charts.ChartSeries, namespace: Aspose.Slides.Charts
  DNChartSeriesCollection = interface; // type: Aspose.Slides.Charts.ChartSeriesCollection, namespace: Aspose.Slides.Charts
  DNChartSeriesGroup = interface; // type: Aspose.Slides.Charts.ChartSeriesGroup, namespace: Aspose.Slides.Charts
  DNChartTextFormat = interface; // type: Aspose.Slides.Charts.ChartTextFormat, namespace: Aspose.Slides.Charts
  DNChartTitle = interface; // type: Aspose.Slides.Charts.ChartTitle, namespace: Aspose.Slides.Charts
  DNChartTypeCharacterizer = interface; // type: Aspose.Slides.Charts.ChartTypeCharacterizer, namespace: Aspose.Slides.Charts
  DNChartWall = interface; // type: Aspose.Slides.Charts.ChartWall, namespace: Aspose.Slides.Charts
  DNDataLabel = interface; // type: Aspose.Slides.Charts.DataLabel, namespace: Aspose.Slides.Charts
  DNDataLabelCollection = interface; // type: Aspose.Slides.Charts.DataLabelCollection, namespace: Aspose.Slides.Charts
  DNDataSourceTypeForErrorBarsCustomValues = interface; // type: Aspose.Slides.Charts.DataSourceTypeForErrorBarsCustomValues, namespace: Aspose.Slides.Charts
  DNDataTable = interface; // type: Aspose.Slides.Charts.DataTable, namespace: Aspose.Slides.Charts
  DNErrorBarsCustomValues = interface; // type: Aspose.Slides.Charts.ErrorBarsCustomValues, namespace: Aspose.Slides.Charts
  DNErrorBarsFormat = interface; // type: Aspose.Slides.Charts.ErrorBarsFormat, namespace: Aspose.Slides.Charts
  DNLegend = interface; // type: Aspose.Slides.Charts.Legend, namespace: Aspose.Slides.Charts
  DNLegendEntryCollection = interface; // type: Aspose.Slides.Charts.LegendEntryCollection, namespace: Aspose.Slides.Charts
  DNLegendEntryProperties = interface; // type: Aspose.Slides.Charts.LegendEntryProperties, namespace: Aspose.Slides.Charts
  DNMarker = interface; // type: Aspose.Slides.Charts.Marker, namespace: Aspose.Slides.Charts
  DNPieSplitCustomPointCollection = interface; // type: Aspose.Slides.Charts.PieSplitCustomPointCollection, namespace: Aspose.Slides.Charts
  DNRotation3D = interface; // type: Aspose.Slides.Charts.Rotation3D, namespace: Aspose.Slides.Charts
  DNTrendline = interface; // type: Aspose.Slides.Charts.Trendline, namespace: Aspose.Slides.Charts
  DNTrendlineCollection = interface; // type: Aspose.Slides.Charts.TrendlineCollection, namespace: Aspose.Slides.Charts
  DNUpDownBarsManager = interface; // type: Aspose.Slides.Charts.UpDownBarsManager, namespace: Aspose.Slides.Charts
  DNColorOperation = interface; // type: Aspose.Slides.ColorOperation, namespace: Aspose.Slides
  DNColorOperationCollection = interface; // type: Aspose.Slides.ColorOperationCollection, namespace: Aspose.Slides
  DNColumnCollection = interface; // type: Aspose.Slides.ColumnCollection, namespace: Aspose.Slides
  DNColumnFormat = interface; // type: Aspose.Slides.ColumnFormat, namespace: Aspose.Slides
  DNComment = interface; // type: Aspose.Slides.Comment, namespace: Aspose.Slides
  DNCommentAuthor = interface; // type: Aspose.Slides.CommentAuthor, namespace: Aspose.Slides
  DNCommentAuthorCollection = interface; // type: Aspose.Slides.CommentAuthorCollection, namespace: Aspose.Slides
  DNCommentCollection = interface; // type: Aspose.Slides.CommentCollection, namespace: Aspose.Slides
  DNCommonSlideViewProperties = interface; // type: Aspose.Slides.CommonSlideViewProperties, namespace: Aspose.Slides
  DNControl = interface; // type: Aspose.Slides.Control, namespace: Aspose.Slides
  DNControlCollection = interface; // type: Aspose.Slides.ControlCollection, namespace: Aspose.Slides
  DNControlPropertiesCollection = interface; // type: Aspose.Slides.ControlPropertiesCollection, namespace: Aspose.Slides
  DNCustomData = interface; // type: Aspose.Slides.CustomData, namespace: Aspose.Slides
  DNCustomXmlPart = interface; // type: Aspose.Slides.CustomXmlPart, namespace: Aspose.Slides
  DNCustomXmlPartCollection = interface; // type: Aspose.Slides.CustomXmlPartCollection, namespace: Aspose.Slides
  DNDigitalSignature = interface; // type: Aspose.Slides.DigitalSignature, namespace: Aspose.Slides
  DNDigitalSignatureCollection = interface; // type: Aspose.Slides.DigitalSignatureCollection, namespace: Aspose.Slides
  DNDocumentProperties = interface; // type: Aspose.Slides.DocumentProperties, namespace: Aspose.Slides
  DNOleEmbeddedDataInfo = interface; // type: Aspose.Slides.DOM.Ole.OleEmbeddedDataInfo, namespace: Aspose.Slides.DOM.Ole
  DNEffectEffectiveData = interface; // type: Aspose.Slides.Effects.EffectEffectiveData, namespace: Aspose.Slides.Effects
  DNAlphaBiLevelEffectiveData = interface; // type: Aspose.Slides.Effects.AlphaBiLevelEffectiveData, namespace: Aspose.Slides.Effects
  DNAlphaCeilingEffectiveData = interface; // type: Aspose.Slides.Effects.AlphaCeilingEffectiveData, namespace: Aspose.Slides.Effects
  DNAlphaFloorEffectiveData = interface; // type: Aspose.Slides.Effects.AlphaFloorEffectiveData, namespace: Aspose.Slides.Effects
  DNAlphaInverseEffectiveData = interface; // type: Aspose.Slides.Effects.AlphaInverseEffectiveData, namespace: Aspose.Slides.Effects
  DNAlphaModulateEffectiveData = interface; // type: Aspose.Slides.Effects.AlphaModulateEffectiveData, namespace: Aspose.Slides.Effects
  DNAlphaModulateFixedEffectiveData = interface; // type: Aspose.Slides.Effects.AlphaModulateFixedEffectiveData, namespace: Aspose.Slides.Effects
  DNAlphaReplaceEffectiveData = interface; // type: Aspose.Slides.Effects.AlphaReplaceEffectiveData, namespace: Aspose.Slides.Effects
  DNBiLevelEffectiveData = interface; // type: Aspose.Slides.Effects.BiLevelEffectiveData, namespace: Aspose.Slides.Effects
  DNBlurEffectiveData = interface; // type: Aspose.Slides.Effects.BlurEffectiveData, namespace: Aspose.Slides.Effects
  DNColorChangeEffectiveData = interface; // type: Aspose.Slides.Effects.ColorChangeEffectiveData, namespace: Aspose.Slides.Effects
  DNColorReplaceEffectiveData = interface; // type: Aspose.Slides.Effects.ColorReplaceEffectiveData, namespace: Aspose.Slides.Effects
  DNDuotoneEffectiveData = interface; // type: Aspose.Slides.Effects.DuotoneEffectiveData, namespace: Aspose.Slides.Effects
  DNFillOverlayEffectiveData = interface; // type: Aspose.Slides.Effects.FillOverlayEffectiveData, namespace: Aspose.Slides.Effects
  DNGlowEffectiveData = interface; // type: Aspose.Slides.Effects.GlowEffectiveData, namespace: Aspose.Slides.Effects
  DNGrayScaleEffectiveData = interface; // type: Aspose.Slides.Effects.GrayScaleEffectiveData, namespace: Aspose.Slides.Effects
  DNHSLEffectiveData = interface; // type: Aspose.Slides.Effects.HSLEffectiveData, namespace: Aspose.Slides.Effects
  DNInnerShadowEffectiveData = interface; // type: Aspose.Slides.Effects.InnerShadowEffectiveData, namespace: Aspose.Slides.Effects
  DNLuminanceEffectiveData = interface; // type: Aspose.Slides.Effects.LuminanceEffectiveData, namespace: Aspose.Slides.Effects
  DNOuterShadowEffectiveData = interface; // type: Aspose.Slides.Effects.OuterShadowEffectiveData, namespace: Aspose.Slides.Effects
  DNPresetShadowEffectiveData = interface; // type: Aspose.Slides.Effects.PresetShadowEffectiveData, namespace: Aspose.Slides.Effects
  DNReflectionEffectiveData = interface; // type: Aspose.Slides.Effects.ReflectionEffectiveData, namespace: Aspose.Slides.Effects
  DNSoftEdgeEffectiveData = interface; // type: Aspose.Slides.Effects.SoftEdgeEffectiveData, namespace: Aspose.Slides.Effects
  DNTintEffectiveData = interface; // type: Aspose.Slides.Effects.TintEffectiveData, namespace: Aspose.Slides.Effects
  DNEffectFactory = interface; // type: Aspose.Slides.Effects.EffectFactory, namespace: Aspose.Slides.Effects
  DNGlow = interface; // type: Aspose.Slides.Effects.Glow, namespace: Aspose.Slides.Effects
  DNImageTransformOCollectionEffectiveData = interface; // type: Aspose.Slides.Effects.ImageTransformOCollectionEffectiveData, namespace: Aspose.Slides.Effects
  DNImageTransformOperationFactory = interface; // type: Aspose.Slides.Effects.ImageTransformOperationFactory, namespace: Aspose.Slides.Effects
  DNInnerShadow = interface; // type: Aspose.Slides.Effects.InnerShadow, namespace: Aspose.Slides.Effects
  DNOuterShadow = interface; // type: Aspose.Slides.Effects.OuterShadow, namespace: Aspose.Slides.Effects
  DNPresetShadow = interface; // type: Aspose.Slides.Effects.PresetShadow, namespace: Aspose.Slides.Effects
  DNReflection = interface; // type: Aspose.Slides.Effects.Reflection, namespace: Aspose.Slides.Effects
  DNSoftEdge = interface; // type: Aspose.Slides.Effects.SoftEdge, namespace: Aspose.Slides.Effects
  DNEmbedAllFontsHtmlController = interface; // type: Aspose.Slides.Export.EmbedAllFontsHtmlController, namespace: Aspose.Slides.Export
  DNEmbeddedEotFontsHtmlController = interface; // type: Aspose.Slides.Export.EmbeddedEotFontsHtmlController, namespace: Aspose.Slides.Export
  DNEmbeddedWoffFontsHtmlController = interface; // type: Aspose.Slides.Export.EmbeddedWoffFontsHtmlController, namespace: Aspose.Slides.Export
  DNHtmlFormatter = interface; // type: Aspose.Slides.Export.HtmlFormatter, namespace: Aspose.Slides.Export
  DNHtmlGenerator = interface; // type: Aspose.Slides.Export.HtmlGenerator, namespace: Aspose.Slides.Export
  DNNotesCommentsLayoutingOptions = interface; // type: Aspose.Slides.Export.NotesCommentsLayoutingOptions, namespace: Aspose.Slides.Export
  DNResponsiveHtmlController = interface; // type: Aspose.Slides.Export.ResponsiveHtmlController, namespace: Aspose.Slides.Export
  DNSaveOptions = interface; // type: Aspose.Slides.Export.SaveOptions, namespace: Aspose.Slides.Export
  DNHtmlOptions = interface; // type: Aspose.Slides.Export.HtmlOptions, namespace: Aspose.Slides.Export
  DNPdfOptions = interface; // type: Aspose.Slides.Export.PdfOptions, namespace: Aspose.Slides.Export
  DNPptOptions = interface; // type: Aspose.Slides.Export.PptOptions, namespace: Aspose.Slides.Export
  DNPptxOptions = interface; // type: Aspose.Slides.Export.PptxOptions, namespace: Aspose.Slides.Export
  DNRenderingOptions = interface; // type: Aspose.Slides.Export.RenderingOptions, namespace: Aspose.Slides.Export
  DNSVGOptions = interface; // type: Aspose.Slides.Export.SVGOptions, namespace: Aspose.Slides.Export
  DNSwfOptions = interface; // type: Aspose.Slides.Export.SwfOptions, namespace: Aspose.Slides.Export
  DNTiffOptions = interface; // type: Aspose.Slides.Export.TiffOptions, namespace: Aspose.Slides.Export
  DNXamlOptions = interface; // type: Aspose.Slides.Export.Xaml.XamlOptions, namespace: Aspose.Slides.Export.Xaml
  DNXpsOptions = interface; // type: Aspose.Slides.Export.XpsOptions, namespace: Aspose.Slides.Export
  DNSaveOptionsFactory = interface; // type: Aspose.Slides.Export.SaveOptionsFactory, namespace: Aspose.Slides.Export
  DNSlideImageFormat = interface; // type: Aspose.Slides.Export.SlideImageFormat, namespace: Aspose.Slides.Export
  DNSvgShape = interface; // type: Aspose.Slides.Export.SvgShape, namespace: Aspose.Slides.Export
  DNSvgTSpan = interface; // type: Aspose.Slides.Export.SvgTSpan, namespace: Aspose.Slides.Export
  DNTextToHtmlConversionOptions = interface; // type: Aspose.Slides.Export.TextToHtmlConversionOptions, namespace: Aspose.Slides.Export
  DNVideoPlayerHtmlController = interface; // type: Aspose.Slides.Export.VideoPlayerHtmlController, namespace: Aspose.Slides.Export
  DNVideoPlayerHtmlControllerFactory = interface; // type: Aspose.Slides.Export.VideoPlayerHtmlControllerFactory, namespace: Aspose.Slides.Export
  DNInput = interface; // type: Aspose.Slides.Export.Web.Input, namespace: Aspose.Slides.Export.Web
  DNOutput = interface; // type: Aspose.Slides.Export.Web.Output, namespace: Aspose.Slides.Export.Web
  DNOutputFile = interface; // type: Aspose.Slides.Export.Web.OutputFile, namespace: Aspose.Slides.Export.Web
  DNStorage = interface; // type: Aspose.Slides.Export.Web.Storage, namespace: Aspose.Slides.Export.Web
  DNTemplateContext<TObject> = interface; // type: Aspose.Slides.Export.Web.TemplateContext`1, namespace: Aspose.Slides.Export.Web
  DNWebDocument = interface; // type: Aspose.Slides.Export.Web.WebDocument, namespace: Aspose.Slides.Export.Web
  DNWebDocumentOptions = interface; // type: Aspose.Slides.Export.Web.WebDocumentOptions, namespace: Aspose.Slides.Export.Web
  DNField = interface; // type: Aspose.Slides.Field, namespace: Aspose.Slides
  DNFieldType = interface; // type: Aspose.Slides.FieldType, namespace: Aspose.Slides
  DNFontData = interface; // type: Aspose.Slides.FontData, namespace: Aspose.Slides
  DNFontDataFactory = interface; // type: Aspose.Slides.FontDataFactory, namespace: Aspose.Slides
  DNFontFallBackRule = interface; // type: Aspose.Slides.FontFallBackRule, namespace: Aspose.Slides
  DNFontFallBackRulesCollection = interface; // type: Aspose.Slides.FontFallBackRulesCollection, namespace: Aspose.Slides
  DNFonts = interface; // type: Aspose.Slides.Fonts, namespace: Aspose.Slides
  DNFontsLoader = interface; // type: Aspose.Slides.FontsLoader, namespace: Aspose.Slides
  DNFontsManager = interface; // type: Aspose.Slides.FontsManager, namespace: Aspose.Slides
  DNFontSources = interface; // type: Aspose.Slides.FontSources, namespace: Aspose.Slides
  DNFontSubstRule = interface; // type: Aspose.Slides.FontSubstRule, namespace: Aspose.Slides
  DNFontSubstRuleCollection = interface; // type: Aspose.Slides.FontSubstRuleCollection, namespace: Aspose.Slides
  DNFormatFactory = interface; // type: Aspose.Slides.FormatFactory, namespace: Aspose.Slides
  DNGeometryPath = interface; // type: Aspose.Slides.GeometryPath, namespace: Aspose.Slides
  DNGradientStopCollectionEffectiveData = interface; // type: Aspose.Slides.GradientStopCollectionEffectiveData, namespace: Aspose.Slides
  DNGradientStopEffectiveData = interface; // type: Aspose.Slides.GradientStopEffectiveData, namespace: Aspose.Slides
  DNHyperlinkManager = interface; // type: Aspose.Slides.HyperlinkManager, namespace: Aspose.Slides
  DNHyperlinkQueries = interface; // type: Aspose.Slides.HyperlinkQueries, namespace: Aspose.Slides
  DNImageCollection = interface; // type: Aspose.Slides.ImageCollection, namespace: Aspose.Slides
  DNImageWrapper = interface; // type: Aspose.Slides.ImageWrapper, namespace: Aspose.Slides
  DNImageWrapperFactory = interface; // type: Aspose.Slides.ImageWrapperFactory, namespace: Aspose.Slides
  DNExternalResourceResolver = interface; // type: Aspose.Slides.Import.ExternalResourceResolver, namespace: Aspose.Slides.Import
  DNHtmlExternalResolver = interface; // type: Aspose.Slides.Import.HtmlExternalResolver, namespace: Aspose.Slides.Import
  DNInterruptionToken = interface; // type: Aspose.Slides.InterruptionToken, namespace: Aspose.Slides
  DNInterruptionTokenSource = interface; // type: Aspose.Slides.InterruptionTokenSource, namespace: Aspose.Slides
  DNLayoutSlideCollection = interface; // type: Aspose.Slides.LayoutSlideCollection, namespace: Aspose.Slides
  DNGlobalLayoutSlideCollection = interface; // type: Aspose.Slides.GlobalLayoutSlideCollection, namespace: Aspose.Slides
  DNMasterLayoutSlideCollection = interface; // type: Aspose.Slides.MasterLayoutSlideCollection, namespace: Aspose.Slides
  DNLicense = interface; // type: Aspose.Slides.License, namespace: Aspose.Slides
  DNLoadOptions = interface; // type: Aspose.Slides.LoadOptions, namespace: Aspose.Slides
  DNMasterSlideCollection = interface; // type: Aspose.Slides.MasterSlideCollection, namespace: Aspose.Slides
  DNMathAccentFactory = interface; // type: Aspose.Slides.MathText.MathAccentFactory, namespace: Aspose.Slides.MathText
  DNMathArrayFactory = interface; // type: Aspose.Slides.MathText.MathArrayFactory, namespace: Aspose.Slides.MathText
  DNMathBarFactory = interface; // type: Aspose.Slides.MathText.MathBarFactory, namespace: Aspose.Slides.MathText
  DNMathBlockFactory = interface; // type: Aspose.Slides.MathText.MathBlockFactory, namespace: Aspose.Slides.MathText
  DNMathBorderBoxFactory = interface; // type: Aspose.Slides.MathText.MathBorderBoxFactory, namespace: Aspose.Slides.MathText
  DNMathBoxFactory = interface; // type: Aspose.Slides.MathText.MathBoxFactory, namespace: Aspose.Slides.MathText
  DNMathDelimiterFactory = interface; // type: Aspose.Slides.MathText.MathDelimiterFactory, namespace: Aspose.Slides.MathText
  DNMathElementBase = interface; // type: Aspose.Slides.MathText.MathElementBase, namespace: Aspose.Slides.MathText
  DNBaseScript = interface; // type: Aspose.Slides.MathText.BaseScript, namespace: Aspose.Slides.MathText
  DNMathLeftSubSuperscriptElement = interface; // type: Aspose.Slides.MathText.MathLeftSubSuperscriptElement, namespace: Aspose.Slides.MathText
  DNMathRightSubSuperscriptElement = interface; // type: Aspose.Slides.MathText.MathRightSubSuperscriptElement, namespace: Aspose.Slides.MathText
  DNMathSubscriptElement = interface; // type: Aspose.Slides.MathText.MathSubscriptElement, namespace: Aspose.Slides.MathText
  DNMathSuperscriptElement = interface; // type: Aspose.Slides.MathText.MathSuperscriptElement, namespace: Aspose.Slides.MathText
  DNMathAccent = interface; // type: Aspose.Slides.MathText.MathAccent, namespace: Aspose.Slides.MathText
  DNMathArray = interface; // type: Aspose.Slides.MathText.MathArray, namespace: Aspose.Slides.MathText
  DNMathBar = interface; // type: Aspose.Slides.MathText.MathBar, namespace: Aspose.Slides.MathText
  DNMathBlock = interface; // type: Aspose.Slides.MathText.MathBlock, namespace: Aspose.Slides.MathText
  DNMathBorderBox = interface; // type: Aspose.Slides.MathText.MathBorderBox, namespace: Aspose.Slides.MathText
  DNMathBox = interface; // type: Aspose.Slides.MathText.MathBox, namespace: Aspose.Slides.MathText
  DNMathDelimiter = interface; // type: Aspose.Slides.MathText.MathDelimiter, namespace: Aspose.Slides.MathText
  DNMathematicalText = interface; // type: Aspose.Slides.MathText.MathematicalText, namespace: Aspose.Slides.MathText
  DNMathFraction = interface; // type: Aspose.Slides.MathText.MathFraction, namespace: Aspose.Slides.MathText
  DNMathFunction = interface; // type: Aspose.Slides.MathText.MathFunction, namespace: Aspose.Slides.MathText
  DNMathGroupingCharacter = interface; // type: Aspose.Slides.MathText.MathGroupingCharacter, namespace: Aspose.Slides.MathText
  DNMathLimit = interface; // type: Aspose.Slides.MathText.MathLimit, namespace: Aspose.Slides.MathText
  DNMathMatrix = interface; // type: Aspose.Slides.MathText.MathMatrix, namespace: Aspose.Slides.MathText
  DNMathNaryOperator = interface; // type: Aspose.Slides.MathText.MathNaryOperator, namespace: Aspose.Slides.MathText
  DNMathRadical = interface; // type: Aspose.Slides.MathText.MathRadical, namespace: Aspose.Slides.MathText
  DNMathematicalTextFactory = interface; // type: Aspose.Slides.MathText.MathematicalTextFactory, namespace: Aspose.Slides.MathText
  DNMathFractionFactory = interface; // type: Aspose.Slides.MathText.MathFractionFactory, namespace: Aspose.Slides.MathText
  DNMathFunctionFactory = interface; // type: Aspose.Slides.MathText.MathFunctionFactory, namespace: Aspose.Slides.MathText
  DNMathGroupingCharacterFactory = interface; // type: Aspose.Slides.MathText.MathGroupingCharacterFactory, namespace: Aspose.Slides.MathText
  DNMathLeftSubSuperscriptElementFactory = interface; // type: Aspose.Slides.MathText.MathLeftSubSuperscriptElementFactory, namespace: Aspose.Slides.MathText
  DNMathLimitFactory = interface; // type: Aspose.Slides.MathText.MathLimitFactory, namespace: Aspose.Slides.MathText
  DNMathMatrixFactory = interface; // type: Aspose.Slides.MathText.MathMatrixFactory, namespace: Aspose.Slides.MathText
  DNMathNaryOperatorFactory = interface; // type: Aspose.Slides.MathText.MathNaryOperatorFactory, namespace: Aspose.Slides.MathText
  DNMathParagraph = interface; // type: Aspose.Slides.MathText.MathParagraph, namespace: Aspose.Slides.MathText
  DNMathParagraphFactory = interface; // type: Aspose.Slides.MathText.MathParagraphFactory, namespace: Aspose.Slides.MathText
  DNMathRadicalFactory = interface; // type: Aspose.Slides.MathText.MathRadicalFactory, namespace: Aspose.Slides.MathText
  DNMathRightSubSuperscriptElementFactory = interface; // type: Aspose.Slides.MathText.MathRightSubSuperscriptElementFactory, namespace: Aspose.Slides.MathText
  DNMathSubscriptElementFactory = interface; // type: Aspose.Slides.MathText.MathSubscriptElementFactory, namespace: Aspose.Slides.MathText
  DNMathSuperscriptElementFactory = interface; // type: Aspose.Slides.MathText.MathSuperscriptElementFactory, namespace: Aspose.Slides.MathText
  DNMetered = interface; // type: Aspose.Slides.Metered, namespace: Aspose.Slides
  DNNormalViewProperties = interface; // type: Aspose.Slides.NormalViewProperties, namespace: Aspose.Slides
  DNNormalViewRestoredProperties = interface; // type: Aspose.Slides.NormalViewRestoredProperties, namespace: Aspose.Slides
  DNNotesSize = interface; // type: Aspose.Slides.NotesSize, namespace: Aspose.Slides
  DNNotesSlideManager = interface; // type: Aspose.Slides.NotesSlideManager, namespace: Aspose.Slides
  DNParagraph = interface; // type: Aspose.Slides.Paragraph, namespace: Aspose.Slides
  DNParagraphCollection = interface; // type: Aspose.Slides.ParagraphCollection, namespace: Aspose.Slides
  DNParagraphFactory = interface; // type: Aspose.Slides.ParagraphFactory, namespace: Aspose.Slides
  DNPathSegment = interface; // type: Aspose.Slides.PathSegment, namespace: Aspose.Slides
  DNPlaceholder = interface; // type: Aspose.Slides.Placeholder, namespace: Aspose.Slides
  DNPortion = interface; // type: Aspose.Slides.Portion, namespace: Aspose.Slides
  DNMathPortion = interface; // type: Aspose.Slides.MathText.MathPortion, namespace: Aspose.Slides.MathText
  DNPortionCollection = interface; // type: Aspose.Slides.PortionCollection, namespace: Aspose.Slides
  DNPortionFactory = interface; // type: Aspose.Slides.PortionFactory, namespace: Aspose.Slides
  DNPPImage = interface; // type: Aspose.Slides.PPImage, namespace: Aspose.Slides
  DNPresentation = interface; // type: Aspose.Slides.Presentation, namespace: Aspose.Slides
  DNPresentationFactory = interface; // type: Aspose.Slides.PresentationFactory, namespace: Aspose.Slides
  DNPresentationInfo = interface; // type: Aspose.Slides.PresentationInfo, namespace: Aspose.Slides
  DNPresentationText = interface; // type: Aspose.Slides.PresentationText, namespace: Aspose.Slides
  DNProtectionManager = interface; // type: Aspose.Slides.ProtectionManager, namespace: Aspose.Slides
  DNPVIObject = interface; // type: Aspose.Slides.PVIObject, namespace: Aspose.Slides
  DNBackdrop3DScene = interface; // type: Aspose.Slides.Backdrop3DScene, namespace: Aspose.Slides
  DNBackground = interface; // type: Aspose.Slides.Background, namespace: Aspose.Slides
  DNBasePortionFormat = interface; // type: Aspose.Slides.BasePortionFormat, namespace: Aspose.Slides
  DNChartPortionFormat = interface; // type: Aspose.Slides.Charts.ChartPortionFormat, namespace: Aspose.Slides.Charts
  DNPortionFormat = interface; // type: Aspose.Slides.PortionFormat, namespace: Aspose.Slides
  DNBulletFormat = interface; // type: Aspose.Slides.BulletFormat, namespace: Aspose.Slides
  DNCamera = interface; // type: Aspose.Slides.Camera, namespace: Aspose.Slides
  DNCellFormat = interface; // type: Aspose.Slides.CellFormat, namespace: Aspose.Slides
  DNDataLabelFormat = interface; // type: Aspose.Slides.Charts.DataLabelFormat, namespace: Aspose.Slides.Charts
  DNFormat = interface; // type: Aspose.Slides.Charts.Format, namespace: Aspose.Slides.Charts
  DNColorFormat = interface; // type: Aspose.Slides.ColorFormat, namespace: Aspose.Slides
  DNEffectFormat = interface; // type: Aspose.Slides.EffectFormat, namespace: Aspose.Slides
  DNImageTransformOperation = interface; // type: Aspose.Slides.Effects.ImageTransformOperation, namespace: Aspose.Slides.Effects
  DNAlphaBiLevel = interface; // type: Aspose.Slides.Effects.AlphaBiLevel, namespace: Aspose.Slides.Effects
  DNAlphaCeiling = interface; // type: Aspose.Slides.Effects.AlphaCeiling, namespace: Aspose.Slides.Effects
  DNAlphaFloor = interface; // type: Aspose.Slides.Effects.AlphaFloor, namespace: Aspose.Slides.Effects
  DNAlphaInverse = interface; // type: Aspose.Slides.Effects.AlphaInverse, namespace: Aspose.Slides.Effects
  DNAlphaModulate = interface; // type: Aspose.Slides.Effects.AlphaModulate, namespace: Aspose.Slides.Effects
  DNAlphaModulateFixed = interface; // type: Aspose.Slides.Effects.AlphaModulateFixed, namespace: Aspose.Slides.Effects
  DNAlphaReplace = interface; // type: Aspose.Slides.Effects.AlphaReplace, namespace: Aspose.Slides.Effects
  DNBiLevel = interface; // type: Aspose.Slides.Effects.BiLevel, namespace: Aspose.Slides.Effects
  DNBlur = interface; // type: Aspose.Slides.Effects.Blur, namespace: Aspose.Slides.Effects
  DNColorChange = interface; // type: Aspose.Slides.Effects.ColorChange, namespace: Aspose.Slides.Effects
  DNColorReplace = interface; // type: Aspose.Slides.Effects.ColorReplace, namespace: Aspose.Slides.Effects
  DNDuotone = interface; // type: Aspose.Slides.Effects.Duotone, namespace: Aspose.Slides.Effects
  DNFillOverlay = interface; // type: Aspose.Slides.Effects.FillOverlay, namespace: Aspose.Slides.Effects
  DNGrayScale = interface; // type: Aspose.Slides.Effects.GrayScale, namespace: Aspose.Slides.Effects
  DNHSL = interface; // type: Aspose.Slides.Effects.HSL, namespace: Aspose.Slides.Effects
  DNLuminance = interface; // type: Aspose.Slides.Effects.Luminance, namespace: Aspose.Slides.Effects
  DNTint = interface; // type: Aspose.Slides.Effects.Tint, namespace: Aspose.Slides.Effects
  DNImageTransformOperationCollection = interface; // type: Aspose.Slides.Effects.ImageTransformOperationCollection, namespace: Aspose.Slides.Effects
  DNFillFormat = interface; // type: Aspose.Slides.FillFormat, namespace: Aspose.Slides
  DNGradientFormat = interface; // type: Aspose.Slides.GradientFormat, namespace: Aspose.Slides
  DNGradientStop = interface; // type: Aspose.Slides.GradientStop, namespace: Aspose.Slides
  DNGradientStopCollection = interface; // type: Aspose.Slides.GradientStopCollection, namespace: Aspose.Slides
  DNHyperlink = interface; // type: Aspose.Slides.Hyperlink, namespace: Aspose.Slides
  DNLightRig = interface; // type: Aspose.Slides.LightRig, namespace: Aspose.Slides
  DNLineFillFormat = interface; // type: Aspose.Slides.LineFillFormat, namespace: Aspose.Slides
  DNLineFormat = interface; // type: Aspose.Slides.LineFormat, namespace: Aspose.Slides
  DNParagraphFormat = interface; // type: Aspose.Slides.ParagraphFormat, namespace: Aspose.Slides
  DNPatternFormat = interface; // type: Aspose.Slides.PatternFormat, namespace: Aspose.Slides
  DNPicture = interface; // type: Aspose.Slides.Picture, namespace: Aspose.Slides
  DNPictureFillFormat = interface; // type: Aspose.Slides.PictureFillFormat, namespace: Aspose.Slides
  DNShapeBevel = interface; // type: Aspose.Slides.ShapeBevel, namespace: Aspose.Slides
  DNSketchFormat = interface; // type: Aspose.Slides.SketchFormat, namespace: Aspose.Slides
  DNTab = interface; // type: Aspose.Slides.Tab, namespace: Aspose.Slides
  DNTextFrameFormat = interface; // type: Aspose.Slides.TextFrameFormat, namespace: Aspose.Slides
  DNTextStyle = interface; // type: Aspose.Slides.TextStyle, namespace: Aspose.Slides
  DNThreeDFormat = interface; // type: Aspose.Slides.ThreeDFormat, namespace: Aspose.Slides
  DNRowCollection = interface; // type: Aspose.Slides.RowCollection, namespace: Aspose.Slides
  DNRowFormat = interface; // type: Aspose.Slides.RowFormat, namespace: Aspose.Slides
  DNSection = interface; // type: Aspose.Slides.Section, namespace: Aspose.Slides
  DNSectionCollection = interface; // type: Aspose.Slides.SectionCollection, namespace: Aspose.Slides
  DNSectionSlideCollection = interface; // type: Aspose.Slides.SectionSlideCollection, namespace: Aspose.Slides
  DNShape = interface; // type: Aspose.Slides.Shape, namespace: Aspose.Slides
  DNGeometryShape = interface; // type: Aspose.Slides.GeometryShape, namespace: Aspose.Slides
  DNAutoShape = interface; // type: Aspose.Slides.AutoShape, namespace: Aspose.Slides
  DNConnector = interface; // type: Aspose.Slides.Connector, namespace: Aspose.Slides
  DNPictureFrame = interface; // type: Aspose.Slides.PictureFrame, namespace: Aspose.Slides
  DNAudioFrame = interface; // type: Aspose.Slides.AudioFrame, namespace: Aspose.Slides
  DNVideoFrame = interface; // type: Aspose.Slides.VideoFrame, namespace: Aspose.Slides
  DNSmartArtShape = interface; // type: Aspose.Slides.SmartArt.SmartArtShape, namespace: Aspose.Slides.SmartArt
  DNGraphicalObject = interface; // type: Aspose.Slides.GraphicalObject, namespace: Aspose.Slides
  DNChart = interface; // type: Aspose.Slides.Charts.Chart, namespace: Aspose.Slides.Charts
  DNInk = interface; // type: Aspose.Slides.Ink.Ink, namespace: Aspose.Slides.Ink
  DNLegacyDiagram = interface; // type: Aspose.Slides.LegacyDiagram, namespace: Aspose.Slides
  DNOleObjectFrame = interface; // type: Aspose.Slides.OleObjectFrame, namespace: Aspose.Slides
  DNSmartArt = interface; // type: Aspose.Slides.SmartArt.SmartArt, namespace: Aspose.Slides.SmartArt
  DNTable = interface; // type: Aspose.Slides.Table, namespace: Aspose.Slides
  DNZoomFrame = interface; // type: Aspose.Slides.ZoomFrame, namespace: Aspose.Slides
  DNGroupShape = interface; // type: Aspose.Slides.GroupShape, namespace: Aspose.Slides
  DNShapeCollection = interface; // type: Aspose.Slides.ShapeCollection, namespace: Aspose.Slides
  DNShapeElement = interface; // type: Aspose.Slides.ShapeElement, namespace: Aspose.Slides
  DNShapeFrame = interface; // type: Aspose.Slides.ShapeFrame, namespace: Aspose.Slides
  DNShapeStyle = interface; // type: Aspose.Slides.ShapeStyle, namespace: Aspose.Slides
  DNSlideCollection = interface; // type: Aspose.Slides.SlideCollection, namespace: Aspose.Slides
  DNSlideShowTransition = interface; // type: Aspose.Slides.SlideShow.SlideShowTransition, namespace: Aspose.Slides.SlideShow
  DNTransitionValueBase = interface; // type: Aspose.Slides.SlideShow.TransitionValueBase, namespace: Aspose.Slides.SlideShow
  DNCornerDirectionTransition = interface; // type: Aspose.Slides.SlideShow.CornerDirectionTransition, namespace: Aspose.Slides.SlideShow
  DNEightDirectionTransition = interface; // type: Aspose.Slides.SlideShow.EightDirectionTransition, namespace: Aspose.Slides.SlideShow
  DNEmptyTransition = interface; // type: Aspose.Slides.SlideShow.EmptyTransition, namespace: Aspose.Slides.SlideShow
  DNFlyThroughTransition = interface; // type: Aspose.Slides.SlideShow.FlyThroughTransition, namespace: Aspose.Slides.SlideShow
  DNGlitterTransition = interface; // type: Aspose.Slides.SlideShow.GlitterTransition, namespace: Aspose.Slides.SlideShow
  DNInOutTransition = interface; // type: Aspose.Slides.SlideShow.InOutTransition, namespace: Aspose.Slides.SlideShow
  DNLeftRightDirectionTransition = interface; // type: Aspose.Slides.SlideShow.LeftRightDirectionTransition, namespace: Aspose.Slides.SlideShow
  DNMorphTransition = interface; // type: Aspose.Slides.SlideShow.MorphTransition, namespace: Aspose.Slides.SlideShow
  DNOptionalBlackTransition = interface; // type: Aspose.Slides.SlideShow.OptionalBlackTransition, namespace: Aspose.Slides.SlideShow
  DNOrientationTransition = interface; // type: Aspose.Slides.SlideShow.OrientationTransition, namespace: Aspose.Slides.SlideShow
  DNRevealTransition = interface; // type: Aspose.Slides.SlideShow.RevealTransition, namespace: Aspose.Slides.SlideShow
  DNRippleTransition = interface; // type: Aspose.Slides.SlideShow.RippleTransition, namespace: Aspose.Slides.SlideShow
  DNShredTransition = interface; // type: Aspose.Slides.SlideShow.ShredTransition, namespace: Aspose.Slides.SlideShow
  DNSideDirectionTransition = interface; // type: Aspose.Slides.SlideShow.SideDirectionTransition, namespace: Aspose.Slides.SlideShow
  DNSplitTransition = interface; // type: Aspose.Slides.SlideShow.SplitTransition, namespace: Aspose.Slides.SlideShow
  DNWheelTransition = interface; // type: Aspose.Slides.SlideShow.WheelTransition, namespace: Aspose.Slides.SlideShow
  DNSlideSize = interface; // type: Aspose.Slides.SlideSize, namespace: Aspose.Slides
  DNSmartArtNode = interface; // type: Aspose.Slides.SmartArt.SmartArtNode, namespace: Aspose.Slides.SmartArt
  DNSmartArtNodeCollection = interface; // type: Aspose.Slides.SmartArt.SmartArtNodeCollection, namespace: Aspose.Slides.SmartArt
  DNSmartArtShapeCollection = interface; // type: Aspose.Slides.SmartArt.SmartArtShapeCollection, namespace: Aspose.Slides.SmartArt
  DNSpreadsheetOptions = interface; // type: Aspose.Slides.SpreadsheetOptions, namespace: Aspose.Slides
  DNStreamWrapper = interface; // type: Aspose.Slides.StreamWrapper, namespace: Aspose.Slides
  DNStreamWrapperFactory = interface; // type: Aspose.Slides.StreamWrapperFactory, namespace: Aspose.Slides
  DNSvgImage = interface; // type: Aspose.Slides.SvgImage, namespace: Aspose.Slides
  DNTabCollection = interface; // type: Aspose.Slides.TabCollection, namespace: Aspose.Slides
  DNTabFactory = interface; // type: Aspose.Slides.TabFactory, namespace: Aspose.Slides
  DNTableFormat = interface; // type: Aspose.Slides.TableFormat, namespace: Aspose.Slides
  DNTagCollection = interface; // type: Aspose.Slides.TagCollection, namespace: Aspose.Slides
  DNTextFrame = interface; // type: Aspose.Slides.TextFrame, namespace: Aspose.Slides
  DNTextHighlightingOptions = interface; // type: Aspose.Slides.TextHighlightingOptions, namespace: Aspose.Slides
  DNBaseThemeManager = interface; // type: Aspose.Slides.Theme.BaseThemeManager, namespace: Aspose.Slides.Theme
  DNBaseOverrideThemeManager = interface; // type: Aspose.Slides.Theme.BaseOverrideThemeManager, namespace: Aspose.Slides.Theme
  DNChartThemeManager = interface; // type: Aspose.Slides.Theme.ChartThemeManager, namespace: Aspose.Slides.Theme
  DNLayoutSlideThemeManager = interface; // type: Aspose.Slides.Theme.LayoutSlideThemeManager, namespace: Aspose.Slides.Theme
  DNNotesSlideThemeManager = interface; // type: Aspose.Slides.Theme.NotesSlideThemeManager, namespace: Aspose.Slides.Theme
  DNSlideThemeManager = interface; // type: Aspose.Slides.Theme.SlideThemeManager, namespace: Aspose.Slides.Theme
  DNMasterThemeManager = interface; // type: Aspose.Slides.Theme.MasterThemeManager, namespace: Aspose.Slides.Theme
  DNColorScheme = interface; // type: Aspose.Slides.Theme.ColorScheme, namespace: Aspose.Slides.Theme
  DNEffectStyle = interface; // type: Aspose.Slides.Theme.EffectStyle, namespace: Aspose.Slides.Theme
  DNEffectStyleCollection = interface; // type: Aspose.Slides.Theme.EffectStyleCollection, namespace: Aspose.Slides.Theme
  DNExtraColorScheme = interface; // type: Aspose.Slides.Theme.ExtraColorScheme, namespace: Aspose.Slides.Theme
  DNExtraColorSchemeCollection = interface; // type: Aspose.Slides.Theme.ExtraColorSchemeCollection, namespace: Aspose.Slides.Theme
  DNFillFormatCollection = interface; // type: Aspose.Slides.Theme.FillFormatCollection, namespace: Aspose.Slides.Theme
  DNFontScheme = interface; // type: Aspose.Slides.Theme.FontScheme, namespace: Aspose.Slides.Theme
  DNFormatScheme = interface; // type: Aspose.Slides.Theme.FormatScheme, namespace: Aspose.Slides.Theme
  DNLineFormatCollection = interface; // type: Aspose.Slides.Theme.LineFormatCollection, namespace: Aspose.Slides.Theme
  DNTheme = interface; // type: Aspose.Slides.Theme.Theme, namespace: Aspose.Slides.Theme
  DNMasterTheme = interface; // type: Aspose.Slides.Theme.MasterTheme, namespace: Aspose.Slides.Theme
  DNOverrideTheme = interface; // type: Aspose.Slides.Theme.OverrideTheme, namespace: Aspose.Slides.Theme
  DNShapeUtil = interface; // type: Aspose.Slides.Util.ShapeUtil, namespace: Aspose.Slides.Util
  DNSlideUtil = interface; // type: Aspose.Slides.Util.SlideUtil, namespace: Aspose.Slides.Util
  DNVbaModule = interface; // type: Aspose.Slides.Vba.VbaModule, namespace: Aspose.Slides.Vba
  DNVbaModuleCollection = interface; // type: Aspose.Slides.Vba.VbaModuleCollection, namespace: Aspose.Slides.Vba
  DNVbaProject = interface; // type: Aspose.Slides.Vba.VbaProject, namespace: Aspose.Slides.Vba
  DNVbaProjectFactory = interface; // type: Aspose.Slides.Vba.VbaProjectFactory, namespace: Aspose.Slides.Vba
  DNVbaReferenceCollection = interface; // type: Aspose.Slides.Vba.VbaReferenceCollection, namespace: Aspose.Slides.Vba
  DNVbaReferenceFactory = interface; // type: Aspose.Slides.Vba.VbaReferenceFactory, namespace: Aspose.Slides.Vba
  DNVbaReferenceOleTypeLib = interface; // type: Aspose.Slides.Vba.VbaReferenceOleTypeLib, namespace: Aspose.Slides.Vba
  DNVideo = interface; // type: Aspose.Slides.Video, namespace: Aspose.Slides
  DNVideoCollection = interface; // type: Aspose.Slides.VideoCollection, namespace: Aspose.Slides
  DNViewProperties = interface; // type: Aspose.Slides.ViewProperties, namespace: Aspose.Slides
  DNInvalidPasswordException = interface; // type: Aspose.Slides.InvalidPasswordException, namespace: Aspose.Slides
  DNOdpException = interface; // type: Aspose.Slides.OdpException, namespace: Aspose.Slides
  DNOdpReadException = interface; // type: Aspose.Slides.OdpReadException, namespace: Aspose.Slides
  DNOOXMLException = interface; // type: Aspose.Slides.OOXMLException, namespace: Aspose.Slides
  DNOOXMLCorruptFileException = interface; // type: Aspose.Slides.OOXMLCorruptFileException, namespace: Aspose.Slides
  DNPptxException = interface; // type: Aspose.Slides.PptxException, namespace: Aspose.Slides
  DNPptxEditException = interface; // type: Aspose.Slides.PptxEditException, namespace: Aspose.Slides
  DNCellCircularReferenceException = interface; // type: Aspose.Slides.Spreadsheet.CellCircularReferenceException, namespace: Aspose.Slides.Spreadsheet
  DNCellInvalidFormulaException = interface; // type: Aspose.Slides.Spreadsheet.CellInvalidFormulaException, namespace: Aspose.Slides.Spreadsheet
  DNCellInvalidReferenceException = interface; // type: Aspose.Slides.Spreadsheet.CellInvalidReferenceException, namespace: Aspose.Slides.Spreadsheet
  DNCellUnsupportedDataException = interface; // type: Aspose.Slides.Spreadsheet.CellUnsupportedDataException, namespace: Aspose.Slides.Spreadsheet
  DNPptxReadException = interface; // type: Aspose.Slides.PptxReadException, namespace: Aspose.Slides
  DNPptxCorruptFileException = interface; // type: Aspose.Slides.PptxCorruptFileException, namespace: Aspose.Slides
  DNPptxUnsupportedFormatException = interface; // type: Aspose.Slides.PptxUnsupportedFormatException, namespace: Aspose.Slides
  DNPptException = interface; // type: Aspose.Slides.PptException, namespace: Aspose.Slides
  DNPptEditException = interface; // type: Aspose.Slides.PptEditException, namespace: Aspose.Slides
  DNPptReadException = interface; // type: Aspose.Slides.PptReadException, namespace: Aspose.Slides
  DNPptCorruptFileException = interface; // type: Aspose.Slides.PptCorruptFileException, namespace: Aspose.Slides
  DNPptUnsupportedFormatException = interface; // type: Aspose.Slides.PptUnsupportedFormatException, namespace: Aspose.Slides
  DNAxesCompositionNotCombinableException = interface; // type: Aspose.Slides.Charts.AxesCompositionNotCombinableException, namespace: Aspose.Slides.Charts
  DNCannotCombine2DAnd3DChartsException = interface; // type: Aspose.Slides.Charts.CannotCombine2DAnd3DChartsException, namespace: Aspose.Slides.Charts


{ objects }

  //-------------namespace: Aspose.Slides.Animation----------------
  [DNTypeName('Aspose.Slides.Animation.IBehavior')]
  DNIBehavior = interface(DDN.mscorlib.DNObject)
  ['{CF485DFA-7880-4D6F-A9FF-03971721BDBC}']
  { getters & setters } 

    function get_Accumulate: DNNullableBool;
    procedure set_Accumulate(value: DNNullableBool);
    function get_Additive: DNBehaviorAdditiveType;
    procedure set_Additive(value: DNBehaviorAdditiveType);
    function get_Properties: DNIBehaviorPropertyCollection;
    function get_Timing: DNITiming;
    procedure set_Timing(value: DNITiming);

  { propertys } 

    property Accumulate: DNNullableBool read get_Accumulate write set_Accumulate;
    property Additive: DNBehaviorAdditiveType read get_Additive write set_Additive;
    property Properties: DNIBehaviorPropertyCollection read get_Properties;
    property Timing: DNITiming read get_Timing write set_Timing;
  end;

  //-------------namespace: Aspose.Slides.Animation----------------
  [DNTypeName('Aspose.Slides.Animation.IColorEffect')]
  DNIColorEffect = interface(DNIBehavior)
  ['{FA35FF58-EE77-445A-B74B-26935CB87652}']
  { getters & setters } 

    function get_From: DNIColorFormat;
    procedure set_From(value: DNIColorFormat);
    function get_To: DNIColorFormat;
    procedure set_To(value: DNIColorFormat);
    function get_By: DNIColorOffset;
    procedure set_By(value: DNIColorOffset);
    function get_ColorSpace: DNColorSpace;
    procedure set_ColorSpace(value: DNColorSpace);
    function get_Direction: DNColorDirection;
    procedure set_Direction(value: DNColorDirection);
    function get_AsIBehavior: DNIBehavior;

  { propertys } 

    property From: DNIColorFormat read get_From write set_From;
    property &To: DNIColorFormat read get_To write set_To;
    property By: DNIColorOffset read get_By write set_By;
    property ColorSpace: DNColorSpace read get_ColorSpace write set_ColorSpace;
    property Direction: DNColorDirection read get_Direction write set_Direction;
    property AsIBehavior: DNIBehavior read get_AsIBehavior;
  end;

  //-------------namespace: Aspose.Slides.Animation----------------
  [DNTypeName('Aspose.Slides.Animation.ICommandEffect')]
  DNICommandEffect = interface(DNIBehavior)
  ['{9123DB43-ECB8-4B40-8227-751BB0D2BA83}']
  { getters & setters } 

    function get_Type: DNCommandEffectType;
    procedure set_Type(value: DNCommandEffectType);
    function get_CommandString: string;
    procedure set_CommandString(value: string);
    function get_ShapeTarget: DNIShape;
    procedure set_ShapeTarget(value: DNIShape);
    function get_AsIBehavior: DNIBehavior;

  { propertys } 

    property &Type: DNCommandEffectType read get_Type write set_Type;
    property CommandString: string read get_CommandString write set_CommandString;
    property ShapeTarget: DNIShape read get_ShapeTarget write set_ShapeTarget;
    property AsIBehavior: DNIBehavior read get_AsIBehavior;
  end;

  //-------------namespace: Aspose.Slides.Animation----------------
  [DNTypeName('Aspose.Slides.Animation.IFilterEffect')]
  DNIFilterEffect = interface(DNIBehavior)
  ['{A3C08970-949B-41C1-AE5A-97F6189A3E10}']
  { getters & setters } 

    function get_Reveal: DNFilterEffectRevealType;
    procedure set_Reveal(value: DNFilterEffectRevealType);
    function get_Type: DNFilterEffectType;
    procedure set_Type(value: DNFilterEffectType);
    function get_Subtype: DNFilterEffectSubtype;
    procedure set_Subtype(value: DNFilterEffectSubtype);
    function get_AsIBehavior: DNIBehavior;

  { propertys } 

    property Reveal: DNFilterEffectRevealType read get_Reveal write set_Reveal;
    property &Type: DNFilterEffectType read get_Type write set_Type;
    property Subtype: DNFilterEffectSubtype read get_Subtype write set_Subtype;
    property AsIBehavior: DNIBehavior read get_AsIBehavior;
  end;

  //-------------namespace: Aspose.Slides.Animation----------------
  [DNTypeName('Aspose.Slides.Animation.IMotionEffect')]
  DNIMotionEffect = interface(DNIBehavior)
  ['{9D9FF911-CCB2-40E7-81D8-35EF9FE3DB57}']
  { getters & setters } 

    function get_From: DDN.System.Drawing.DNPointF;
    procedure set_From(value: DDN.System.Drawing.DNPointF);
    function get_To: DDN.System.Drawing.DNPointF;
    procedure set_To(value: DDN.System.Drawing.DNPointF);
    function get_By: DDN.System.Drawing.DNPointF;
    procedure set_By(value: DDN.System.Drawing.DNPointF);
    function get_RotationCenter: DDN.System.Drawing.DNPointF;
    procedure set_RotationCenter(value: DDN.System.Drawing.DNPointF);
    function get_Origin: DNMotionOriginType;
    procedure set_Origin(value: DNMotionOriginType);
    function get_Path: DNIMotionPath;
    procedure set_Path(value: DNIMotionPath);
    function get_PathEditMode: DNMotionPathEditMode;
    procedure set_PathEditMode(value: DNMotionPathEditMode);
    function get_Angle: Single;
    procedure set_Angle(value: Single);
    function get_AsIBehavior: DNIBehavior;

  { propertys } 

    property From: DDN.System.Drawing.DNPointF read get_From write set_From;
    property &To: DDN.System.Drawing.DNPointF read get_To write set_To;
    property By: DDN.System.Drawing.DNPointF read get_By write set_By;
    property RotationCenter: DDN.System.Drawing.DNPointF read get_RotationCenter write set_RotationCenter;
    property Origin: DNMotionOriginType read get_Origin write set_Origin;
    property Path: DNIMotionPath read get_Path write set_Path;
    property PathEditMode: DNMotionPathEditMode read get_PathEditMode write set_PathEditMode;
    property Angle: Single read get_Angle write set_Angle;
    property AsIBehavior: DNIBehavior read get_AsIBehavior;
  end;

  //-------------namespace: Aspose.Slides.Animation----------------
  [DNTypeName('Aspose.Slides.Animation.IPropertyEffect')]
  DNIPropertyEffect = interface(DNIBehavior)
  ['{B960E21D-82F9-4B23-8C4B-280D913D39E2}']
  { getters & setters } 

    function get_From: string;
    procedure set_From(value: string);
    function get_To: string;
    procedure set_To(value: string);
    function get_By: string;
    procedure set_By(value: string);
    function get_ValueType: DNPropertyValueType;
    procedure set_ValueType(value: DNPropertyValueType);
    function get_CalcMode: DNPropertyCalcModeType;
    procedure set_CalcMode(value: DNPropertyCalcModeType);
    function get_Points: DNIPointCollection;
    procedure set_Points(value: DNIPointCollection);
    function get_AsIBehavior: DNIBehavior;

  { propertys } 

    property From: string read get_From write set_From;
    property &To: string read get_To write set_To;
    property By: string read get_By write set_By;
    property ValueType: DNPropertyValueType read get_ValueType write set_ValueType;
    property CalcMode: DNPropertyCalcModeType read get_CalcMode write set_CalcMode;
    property Points: DNIPointCollection read get_Points write set_Points;
    property AsIBehavior: DNIBehavior read get_AsIBehavior;
  end;

  //-------------namespace: Aspose.Slides.Animation----------------
  [DNTypeName('Aspose.Slides.Animation.IRotationEffect')]
  DNIRotationEffect = interface(DNIBehavior)
  ['{1E3B9AAF-7AD4-4A74-A4CA-5DC36B36FC86}']
  { getters & setters } 

    function get_From: Single;
    procedure set_From(value: Single);
    function get_To: Single;
    procedure set_To(value: Single);
    function get_By: Single;
    procedure set_By(value: Single);
    function get_AsIBehavior: DNIBehavior;

  { propertys } 

    property From: Single read get_From write set_From;
    property &To: Single read get_To write set_To;
    property By: Single read get_By write set_By;
    property AsIBehavior: DNIBehavior read get_AsIBehavior;
  end;

  //-------------namespace: Aspose.Slides.Animation----------------
  [DNTypeName('Aspose.Slides.Animation.IScaleEffect')]
  DNIScaleEffect = interface(DNIBehavior)
  ['{F798C9F2-A45F-4560-8AF0-69374680EA9C}']
  { getters & setters } 

    function get_ZoomContent: DNNullableBool;
    procedure set_ZoomContent(value: DNNullableBool);
    function get_From: DDN.System.Drawing.DNPointF;
    procedure set_From(value: DDN.System.Drawing.DNPointF);
    function get_To: DDN.System.Drawing.DNPointF;
    procedure set_To(value: DDN.System.Drawing.DNPointF);
    function get_By: DDN.System.Drawing.DNPointF;
    procedure set_By(value: DDN.System.Drawing.DNPointF);
    function get_AsIBehavior: DNIBehavior;

  { propertys } 

    property ZoomContent: DNNullableBool read get_ZoomContent write set_ZoomContent;
    property From: DDN.System.Drawing.DNPointF read get_From write set_From;
    property &To: DDN.System.Drawing.DNPointF read get_To write set_To;
    property By: DDN.System.Drawing.DNPointF read get_By write set_By;
    property AsIBehavior: DNIBehavior read get_AsIBehavior;
  end;

  //-------------namespace: Aspose.Slides.Animation----------------
  [DNTypeName('Aspose.Slides.Animation.ISetEffect')]
  DNISetEffect = interface(DNIBehavior)
  ['{CC1A4D7F-0860-4B66-9F75-2537896277DF}']
  { getters & setters } 

    function get_To: DDN.mscorlib.DNObject;
    procedure set_To(value: DDN.mscorlib.DNObject);
    function get_AsIBehavior: DNIBehavior;

  { propertys } 

    property &To: DDN.mscorlib.DNObject read get_To write set_To;
    property AsIBehavior: DNIBehavior read get_AsIBehavior;
  end;

  //-------------namespace: Aspose.Slides.Animation----------------
  [DNTypeName('Aspose.Slides.Animation.IBehaviorFactory')]
  DNIBehaviorFactory = interface(DDN.mscorlib.DNObject)
  ['{D4C36C85-F519-40A1-99B7-07A15FFBB22E}']
  { methods } 

    function CreateColorEffect: DNIColorEffect;
    function CreateCommandEffect: DNICommandEffect;
    function CreateFilterEffect: DNIFilterEffect;
    function CreateMotionEffect: DNIMotionEffect;
    function CreatePropertyEffect: DNIPropertyEffect;
    function CreateRotationEffect: DNIRotationEffect;
    function CreateScaleEffect: DNIScaleEffect;
    function CreateSetEffect: DNISetEffect;

  end;

  //-------------namespace: Aspose.Slides.Animation----------------
  [DNTypeName('Aspose.Slides.Animation.IBehaviorProperty')]
  DNIBehaviorProperty = interface(DDN.mscorlib.DNObject)
  ['{9897A30A-1056-40D9-A3AD-6B01DAAA8135}']
  { getters & setters } 

    function get_Value: string;
    function get_IsCustom: Boolean;

  { propertys } 

    property Value: string read get_Value;
    property IsCustom: Boolean read get_IsCustom;
  end;

  //-------------namespace: Aspose.Slides.Animation----------------
  [DNTypeName('Aspose.Slides.Animation.IColorOffset')]
  DNIColorOffset = interface(DDN.mscorlib.DNObject)
  ['{DF2681E2-F6B3-4ABC-A6EB-3E76D44BB0AA}']
  { getters & setters } 

    function get_Value0: Single;
    procedure set_Value0(value: Single);
    function get_Value1: Single;
    procedure set_Value1(value: Single);
    function get_Value2: Single;
    procedure set_Value2(value: Single);

  { propertys } 

    property Value0: Single read get_Value0 write set_Value0;
    property Value1: Single read get_Value1 write set_Value1;
    property Value2: Single read get_Value2 write set_Value2;
  end;

  //-------------namespace: Aspose.Slides.Animation----------------
  [DNTypeName('Aspose.Slides.Animation.IEffect')]
  DNIEffect = interface(DDN.mscorlib.DNObject)
  ['{26A4550E-EDF0-413C-9770-2DD7CF36222A}']
  { getters & setters } 

    function get_Sequence: DNISequence;
    function get_TextAnimation: DNITextAnimation;
    function get_PresetClassType: DNEffectPresetClassType;
    procedure set_PresetClassType(value: DNEffectPresetClassType);
    function get_Type: DNEffectType;
    procedure set_Type(value: DNEffectType);
    function get_Subtype: DNEffectSubtype;
    procedure set_Subtype(value: DNEffectSubtype);
    function get_Behaviors: DNIBehaviorCollection;
    procedure set_Behaviors(value: DNIBehaviorCollection);
    function get_Timing: DNITiming;
    procedure set_Timing(value: DNITiming);
    function get_TargetShape: DNIShape;

  { propertys } 

    property Sequence: DNISequence read get_Sequence;
    property TextAnimation: DNITextAnimation read get_TextAnimation;
    property PresetClassType: DNEffectPresetClassType read get_PresetClassType write set_PresetClassType;
    property &Type: DNEffectType read get_Type write set_Type;
    property Subtype: DNEffectSubtype read get_Subtype write set_Subtype;
    property Behaviors: DNIBehaviorCollection read get_Behaviors write set_Behaviors;
    property Timing: DNITiming read get_Timing write set_Timing;
    property TargetShape: DNIShape read get_TargetShape;
  end;

  //-------------namespace: Aspose.Slides.Animation----------------
  [DNTypeName('Aspose.Slides.Animation.IMotionCmdPath')]
  DNIMotionCmdPath = interface(DDN.mscorlib.DNObject)
  ['{8D35EC46-596F-4D71-BBD3-94C322355EBF}']
  { getters & setters } 

    function get_Points: TArray<DDN.System.Drawing.DNPointF>;
    procedure set_Points(value: TArray<DDN.System.Drawing.DNPointF>);
    function get_CommandType: DNMotionCommandPathType;
    procedure set_CommandType(value: DNMotionCommandPathType);
    function get_IsRelative: Boolean;
    procedure set_IsRelative(value: Boolean);
    function get_PointsType: DNMotionPathPointsType;
    procedure set_PointsType(value: DNMotionPathPointsType);

  { propertys } 

    property Points: TArray<DDN.System.Drawing.DNPointF> read get_Points write set_Points;
    property CommandType: DNMotionCommandPathType read get_CommandType write set_CommandType;
    property IsRelative: Boolean read get_IsRelative write set_IsRelative;
    property PointsType: DNMotionPathPointsType read get_PointsType write set_PointsType;
  end;

  //-------------namespace: Aspose.Slides.Animation----------------
  [DNTypeName('Aspose.Slides.Animation.IPoint')]
  DNIPoint = interface(DDN.mscorlib.DNObject)
  ['{910B8ADB-70C6-4115-B901-727EA03819CA}']
  { getters & setters } 

    function get_Time: Single;
    procedure set_Time(value: Single);
    function get_Value: DDN.mscorlib.DNObject;
    procedure set_Value(value: DDN.mscorlib.DNObject);
    function get_Formula: string;
    procedure set_Formula(value: string);

  { propertys } 

    property Time: Single read get_Time write set_Time;
    property Value: DDN.mscorlib.DNObject read get_Value write set_Value;
    property Formula: string read get_Formula write set_Formula;
  end;

  //-------------namespace: Aspose.Slides.Animation----------------
  [DNTypeName('Aspose.Slides.Animation.ITextAnimation')]
  DNITextAnimation = interface(DDN.mscorlib.DNObject)
  ['{34998711-9FE7-496C-85E8-8B0F1CB64993}']
  { getters & setters } 

    function get_BuildType: DNBuildType;
    procedure set_BuildType(value: DNBuildType);
    function get_EffectAnimateBackgroundShape: DNIEffect;
    procedure set_EffectAnimateBackgroundShape(value: DNIEffect);

  { methods } 

    function AddEffect(effectType: DNEffectType; subtype: DNEffectSubtype; triggerType: DNEffectTriggerType): DNIEffect;

  { propertys } 

    property BuildType: DNBuildType read get_BuildType write set_BuildType;
    property EffectAnimateBackgroundShape: DNIEffect read get_EffectAnimateBackgroundShape write set_EffectAnimateBackgroundShape;
  end;

  //-------------namespace: Aspose.Slides.Animation----------------
  [DNTypeName('Aspose.Slides.Animation.ITiming')]
  DNITiming = interface(DDN.mscorlib.DNObject)
  ['{2DF4DBC3-F981-4E75-8608-F014384110F7}']
  { getters & setters } 

    function get_Accelerate: Single;
    procedure set_Accelerate(value: Single);
    function get_Decelerate: Single;
    procedure set_Decelerate(value: Single);
    function get_AutoReverse: Boolean;
    procedure set_AutoReverse(value: Boolean);
    function get_Duration: Single;
    procedure set_Duration(value: Single);
    function get_RepeatCount: Single;
    procedure set_RepeatCount(value: Single);
    function get_RepeatDuration: Single;
    procedure set_RepeatDuration(value: Single);
    function get_Restart: DNEffectRestartType;
    procedure set_Restart(value: DNEffectRestartType);
    function get_Speed: Single;
    procedure set_Speed(value: Single);
    function get_TriggerDelayTime: Single;
    procedure set_TriggerDelayTime(value: Single);
    function get_TriggerType: DNEffectTriggerType;
    procedure set_TriggerType(value: DNEffectTriggerType);

  { propertys } 

    property Accelerate: Single read get_Accelerate write set_Accelerate;
    property Decelerate: Single read get_Decelerate write set_Decelerate;
    property AutoReverse: Boolean read get_AutoReverse write set_AutoReverse;
    property Duration: Single read get_Duration write set_Duration;
    property RepeatCount: Single read get_RepeatCount write set_RepeatCount;
    property RepeatDuration: Single read get_RepeatDuration write set_RepeatDuration;
    property Restart: DNEffectRestartType read get_Restart write set_Restart;
    property Speed: Single read get_Speed write set_Speed;
    property TriggerDelayTime: Single read get_TriggerDelayTime write set_TriggerDelayTime;
    property TriggerType: DNEffectTriggerType read get_TriggerType write set_TriggerType;
  end;

  //-------------namespace: Aspose.Slides.Charts----------------
  [DNTypeName('Aspose.Slides.Charts.IActualLayout')]
  DNIActualLayout = interface(DDN.mscorlib.DNObject)
  ['{4590DDA1-26F7-4CF9-BEB6-9CE4DA7C2444}']
  { getters & setters } 

    function get_ActualX: Single;
    function get_ActualY: Single;
    function get_ActualWidth: Single;
    function get_ActualHeight: Single;

  { propertys } 

    property ActualX: Single read get_ActualX;
    property ActualY: Single read get_ActualY;
    property ActualWidth: Single read get_ActualWidth;
    property ActualHeight: Single read get_ActualHeight;
  end;

  //-------------namespace: Aspose.Slides.Charts----------------
  [DNTypeName('Aspose.Slides.Charts.IChartDataPoint')]
  DNIChartDataPoint = interface(DNIActualLayout)
  ['{B8CCB139-BD58-4FB4-9233-5DADA7E9C38E}']
  { getters & setters } 

    function get_XValue: DNIStringOrDoubleChartValue;
    function get_YValue: DNIDoubleChartValue;
    function get_BubbleSize: DNIDoubleChartValue;
    function get_Value: DNIDoubleChartValue;
    function get_SizeValue: DNIDoubleChartValue;
    function get_ColorValue: DNIDoubleChartValue;
    function get_ErrorBarsCustomValues: DNIErrorBarsCustomValues;
    function get_Label: DNIDataLabel;
    function get_IsBubble3D: Boolean;
    procedure set_IsBubble3D(value: Boolean);
    function get_Explosion: Int32;
    procedure set_Explosion(value: Int32);
    function get_Format: DNIFormat;
    procedure set_Format(value: DNIFormat);
    function get_Marker: DNIMarker;
    function get_RelatedLegendEntry: DNILegendEntryProperties;
    function get_SetAsTotal: Boolean;
    procedure set_SetAsTotal(value: Boolean);
    function get_InvertIfNegative: Boolean;
    procedure set_InvertIfNegative(value: Boolean);
    function get_DataPointLevels: DNIChartDataPointLevelsManager;
    function get_AsIActualLayout: DNIActualLayout;

  { methods } 

    procedure Remove;
    function GetAutomaticDataPointColor: DDN.System.Drawing.DNColor;

  { propertys } 

    property XValue: DNIStringOrDoubleChartValue read get_XValue;
    property YValue: DNIDoubleChartValue read get_YValue;
    property BubbleSize: DNIDoubleChartValue read get_BubbleSize;
    property Value: DNIDoubleChartValue read get_Value;
    property SizeValue: DNIDoubleChartValue read get_SizeValue;
    property ColorValue: DNIDoubleChartValue read get_ColorValue;
    property ErrorBarsCustomValues: DNIErrorBarsCustomValues read get_ErrorBarsCustomValues;
    property &Label: DNIDataLabel read get_Label;
    property IsBubble3D: Boolean read get_IsBubble3D write set_IsBubble3D;
    property Explosion: Int32 read get_Explosion write set_Explosion;
    property Format: DNIFormat read get_Format write set_Format;
    property Marker: DNIMarker read get_Marker;
    property RelatedLegendEntry: DNILegendEntryProperties read get_RelatedLegendEntry;
    property SetAsTotal: Boolean read get_SetAsTotal write set_SetAsTotal;
    property InvertIfNegative: Boolean read get_InvertIfNegative write set_InvertIfNegative;
    property DataPointLevels: DNIChartDataPointLevelsManager read get_DataPointLevels;
    property AsIActualLayout: DNIActualLayout read get_AsIActualLayout;
  end;

  //-------------namespace: Aspose.Slides.Charts----------------
  [DNTypeName('Aspose.Slides.Charts.IAxesManager')]
  DNIAxesManager = interface(DDN.mscorlib.DNObject)
  ['{CEFBE09F-A7EB-4312-ADB2-7CD1211A91AA}']
  { getters & setters } 

    function get_HorizontalAxis: DNIAxis;
    function get_SecondaryHorizontalAxis: DNIAxis;
    function get_VerticalAxis: DNIAxis;
    function get_SecondaryVerticalAxis: DNIAxis;
    function get_SeriesAxis: DNIAxis;

  { propertys } 

    property HorizontalAxis: DNIAxis read get_HorizontalAxis;
    property SecondaryHorizontalAxis: DNIAxis read get_SecondaryHorizontalAxis;
    property VerticalAxis: DNIAxis read get_VerticalAxis;
    property SecondaryVerticalAxis: DNIAxis read get_SecondaryVerticalAxis;
    property SeriesAxis: DNIAxis read get_SeriesAxis;
  end;

  //-------------namespace: Aspose.Slides.Charts----------------
  [DNTypeName('Aspose.Slides.Charts.IAxisFormat')]
  DNIAxisFormat = interface(DDN.mscorlib.DNObject)
  ['{478AFA99-DC97-4F7A-814B-5B33FAD89EA8}']
  { getters & setters } 

    function get_Fill: DNIFillFormat;
    function get_Line: DNILineFormat;
    function get_Effect: DNIEffectFormat;

  { propertys } 

    property Fill: DNIFillFormat read get_Fill;
    property Line: DNILineFormat read get_Line;
    property Effect: DNIEffectFormat read get_Effect;
  end;

  //-------------namespace: Aspose.Slides.Charts----------------
  [DNTypeName('Aspose.Slides.Charts.IBaseChartValue')]
  DNIBaseChartValue = interface(DDN.mscorlib.DNObject)
  ['{0ABF141A-1C14-4DCD-A0EE-F1C9218BA8CC}']
  { getters & setters } 

    function get_DataSourceType: DNDataSourceType;
    procedure set_DataSourceType(value: DNDataSourceType);
    function get_Data: DDN.mscorlib.DNObject;
    procedure set_Data(value: DDN.mscorlib.DNObject);

  { propertys } 

    property DataSourceType: DNDataSourceType read get_DataSourceType write set_DataSourceType;
    property Data: DDN.mscorlib.DNObject read get_Data write set_Data;
  end;

  //-------------namespace: Aspose.Slides.Charts----------------
  [DNTypeName('Aspose.Slides.Charts.IDoubleChartValue')]
  DNIDoubleChartValue = interface(DNIBaseChartValue)
  ['{50E9FE2C-6479-4819-BCD8-C84163955676}']
  { getters & setters } 

    function get_AsLiteralDouble: Double;
    procedure set_AsLiteralDouble(value: Double);
    function get_AsISingleCellChartValue: DNISingleCellChartValue;

  { methods } 

    function ToDouble: Double;

  { propertys } 

    property AsLiteralDouble: Double read get_AsLiteralDouble write set_AsLiteralDouble;
    property AsISingleCellChartValue: DNISingleCellChartValue read get_AsISingleCellChartValue;
  end;

  //-------------namespace: Aspose.Slides.Charts----------------
  [DNTypeName('Aspose.Slides.Charts.IMultipleCellChartValue')]
  DNIMultipleCellChartValue = interface(DNIBaseChartValue)
  ['{4AFF0A9E-65FC-4E23-BA4F-6DC984AE92AB}']
  { getters & setters } 

    function get_AsCells: DNIChartCellCollection;
    procedure set_AsCells(value: DNIChartCellCollection);
    function get_AsIBaseChartValue: DNIBaseChartValue;

  { propertys } 

    property AsCells: DNIChartCellCollection read get_AsCells write set_AsCells;
    property AsIBaseChartValue: DNIBaseChartValue read get_AsIBaseChartValue;
  end;

  //-------------namespace: Aspose.Slides.Charts----------------
  [DNTypeName('Aspose.Slides.Charts.ISingleCellChartValue')]
  DNISingleCellChartValue = interface(DNIBaseChartValue)
  ['{5ED9E8CE-3F2B-4EFD-BD68-511D1D13C3F5}']
  { getters & setters } 

    function get_AsCell: DNIChartDataCell;
    procedure set_AsCell(value: DNIChartDataCell);
    function get_AsIBaseChartValue: DNIBaseChartValue;

  { propertys } 

    property AsCell: DNIChartDataCell read get_AsCell write set_AsCell;
    property AsIBaseChartValue: DNIBaseChartValue read get_AsIBaseChartValue;
  end;

  //-------------namespace: Aspose.Slides.Charts----------------
  [DNTypeName('Aspose.Slides.Charts.IStringChartValue')]
  DNIStringChartValue = interface(DNIBaseChartValue)
  ['{1397ED5A-DD10-473E-80E1-6FE51414A142}']
  { getters & setters } 

    function get_AsLiteralString: string;
    procedure set_AsLiteralString(value: string);
    function get_AsIMultipleCellChartValue: DNIMultipleCellChartValue;

  { methods } 

    function ToString: string;
    procedure SetFromOneCell(cell: DNIChartDataCell);
    function GetCellsAddressInWorkbook: string;

  { propertys } 

    property AsLiteralString: string read get_AsLiteralString write set_AsLiteralString;
    property AsIMultipleCellChartValue: DNIMultipleCellChartValue read get_AsIMultipleCellChartValue;
  end;

  //-------------namespace: Aspose.Slides.Charts----------------
  [DNTypeName('Aspose.Slides.Charts.IStringOrDoubleChartValue')]
  DNIStringOrDoubleChartValue = interface(DNIBaseChartValue)
  ['{7AA08B6D-0C79-4A5F-86D1-3F8D18088CE8}']
  { getters & setters } 

    function get_AsLiteralString: string;
    procedure set_AsLiteralString(value: string);
    function get_AsLiteralDouble: Double;
    procedure set_AsLiteralDouble(value: Double);
    function get_AsISingleCellChartValue: DNISingleCellChartValue;

  { methods } 

    function ToDouble: Double;

  { propertys } 

    property AsLiteralString: string read get_AsLiteralString write set_AsLiteralString;
    property AsLiteralDouble: Double read get_AsLiteralDouble write set_AsLiteralDouble;
    property AsISingleCellChartValue: DNISingleCellChartValue read get_AsISingleCellChartValue;
  end;

  //-------------namespace: Aspose.Slides.Charts----------------
  [DNTypeName('Aspose.Slides.Charts.IChartCategory')]
  DNIChartCategory = interface(DDN.mscorlib.DNObject)
  ['{F0725F99-05FA-4904-AEBD-36F0368944BE}']
  { getters & setters } 

    function get_UseCell: Boolean;
    function get_AsCell: DNIChartDataCell;
    procedure set_AsCell(value: DNIChartDataCell);
    function get_AsLiteral: DDN.mscorlib.DNObject;
    procedure set_AsLiteral(value: DDN.mscorlib.DNObject);
    function get_Value: DDN.mscorlib.DNObject;
    procedure set_Value(value: DDN.mscorlib.DNObject);
    function get_GroupingLevels: DNIChartCategoryLevelsManager;

  { methods } 

    procedure Remove;

  { propertys } 

    property UseCell: Boolean read get_UseCell;
    property AsCell: DNIChartDataCell read get_AsCell write set_AsCell;
    property AsLiteral: DDN.mscorlib.DNObject read get_AsLiteral write set_AsLiteral;
    property Value: DDN.mscorlib.DNObject read get_Value write set_Value;
    property GroupingLevels: DNIChartCategoryLevelsManager read get_GroupingLevels;
  end;

  //-------------namespace: Aspose.Slides.Charts----------------
  [DNTypeName('Aspose.Slides.Charts.IChartCategoryLevelsManager')]
  DNIChartCategoryLevelsManager = interface(DDN.mscorlib.DNObject)
  ['{B0EA8451-E11A-4483-A153-5D8D32EB5F4F}']
  { getters & setters } 

    function get_Item(level: Int32): DNIChartDataCell;

  { methods } 

    procedure SetGroupingItem(level: Int32; value: DDN.mscorlib.DNObject);
    procedure DeleteGroupingItem(level: Int32);

  { propertys } 

    property Item[level: Int32]: DNIChartDataCell read get_Item; default;
  end;

  //-------------namespace: Aspose.Slides.Charts----------------
  [DNTypeName('Aspose.Slides.Charts.IChartData')]
  DNIChartData = interface(DDN.mscorlib.DNObject)
  ['{912B4DF7-7AA8-4C62-A637-4CFA35DB1BC4}']
  { getters & setters } 

    function get_ChartDataWorkbook: DNIChartDataWorkbook;
    function get_Series: DNIChartSeriesCollection;
    function get_SeriesGroups: DNIChartSeriesGroupCollection;
    function get_Categories: DNIChartCategoryCollection;
    function get_UseSecondaryCategories: Boolean;
    procedure set_UseSecondaryCategories(value: Boolean);
    function get_SecondaryCategories: DNIChartCategoryCollection;
    function get_DataSourceType: DNChartDataSourceType;
    function get_ExternalWorkbookPath: string;

  { methods } 

    function ReadWorkbookStream: DDN.mscorlib.DNMemoryStream;
    procedure WriteWorkbookStream(ms: DDN.mscorlib.DNMemoryStream);
    procedure SetRange(formula: string);
    function GetRange: string;
    procedure SwitchRowColumn;
    procedure SetExternalWorkbook(workbookPath: string); overload;
    procedure SetExternalWorkbook(workbookPath: string; updateChartData: Boolean); overload;

  { propertys } 

    property ChartDataWorkbook: DNIChartDataWorkbook read get_ChartDataWorkbook;
    property Series: DNIChartSeriesCollection read get_Series;
    property SeriesGroups: DNIChartSeriesGroupCollection read get_SeriesGroups;
    property Categories: DNIChartCategoryCollection read get_Categories;
    property UseSecondaryCategories: Boolean read get_UseSecondaryCategories write set_UseSecondaryCategories;
    property SecondaryCategories: DNIChartCategoryCollection read get_SecondaryCategories;
    property DataSourceType: DNChartDataSourceType read get_DataSourceType;
    property ExternalWorkbookPath: string read get_ExternalWorkbookPath;
  end;

  //-------------namespace: Aspose.Slides.Charts----------------
  [DNTypeName('Aspose.Slides.Charts.IChartDataCell')]
  DNIChartDataCell = interface(DDN.mscorlib.DNObject)
  ['{96D8A4B7-179B-4313-A946-C0592D7E1C43}']
  { getters & setters } 

    function get_Row: Int32;
    function get_Column: Int32;
    function get_Value: DDN.mscorlib.DNObject;
    procedure set_Value(value: DDN.mscorlib.DNObject);
    function get_Formula: string;
    procedure set_Formula(value: string);
    function get_R1C1Formula: string;
    procedure set_R1C1Formula(value: string);
    function get_ChartDataWorksheet: DNIChartDataWorksheet;
    function get_IsHidden: Boolean;
    function get_CustomNumberFormat: string;
    procedure set_CustomNumberFormat(value: string);
    function get_PresetNumberFormat: Byte;
    procedure set_PresetNumberFormat(value: Byte);

  { propertys } 

    property Row: Int32 read get_Row;
    property Column: Int32 read get_Column;
    property Value: DDN.mscorlib.DNObject read get_Value write set_Value;
    property Formula: string read get_Formula write set_Formula;
    property R1C1Formula: string read get_R1C1Formula write set_R1C1Formula;
    property ChartDataWorksheet: DNIChartDataWorksheet read get_ChartDataWorksheet;
    property IsHidden: Boolean read get_IsHidden;
    property CustomNumberFormat: string read get_CustomNumberFormat write set_CustomNumberFormat;
    property PresetNumberFormat: Byte read get_PresetNumberFormat write set_PresetNumberFormat;
  end;

  //-------------namespace: Aspose.Slides.Charts----------------
  [DNTypeName('Aspose.Slides.Charts.IChartDataPointLevel')]
  DNIChartDataPointLevel = interface(DDN.mscorlib.DNObject)
  ['{73963FA9-79E6-4084-88BD-13D2AC38D991}']
  { getters & setters } 

    function get_Format: DNIFormat;
    function get_Label: DNIDataLabel;

  { propertys } 

    property Format: DNIFormat read get_Format;
    property &Label: DNIDataLabel read get_Label;
  end;

  //-------------namespace: Aspose.Slides.Charts----------------
  [DNTypeName('Aspose.Slides.Charts.IChartDataPointLevelsManager')]
  DNIChartDataPointLevelsManager = interface(DDN.mscorlib.DNObject)
  ['{A6060943-A514-4BDC-81DF-F94368B6A6E5}']
  { getters & setters } 

    function get_Item(level: Int32): DNIChartDataPointLevel;
    function get_Count: Int32;

  { propertys } 

    property Item[level: Int32]: DNIChartDataPointLevel read get_Item; default;
    property Count: Int32 read get_Count;
  end;

  //-------------namespace: Aspose.Slides.Charts----------------
  [DNTypeName('Aspose.Slides.Charts.IChartDataWorkbook')]
  DNIChartDataWorkbook = interface(DDN.mscorlib.DNObject)
  ['{2621C20A-7A7C-4A32-BF76-EF4EF5AEFF2F}']
  { methods } 

    function GetCellCollection(formula: string; skipHiddenCells: Boolean): DNIChartCellCollection;
    function GetCell(worksheetName: string; row: Int32; column: Int32): DNIChartDataCell; overload;
    function GetCell(worksheetIndex: Int32; row: Int32; column: Int32): DNIChartDataCell; overload;
    function GetCell(worksheetIndex: Int32; cellName: string): DNIChartDataCell; overload;
    function GetCell(worksheetIndex: Int32; cellName: string; value: DDN.mscorlib.DNObject): DNIChartDataCell; overload;
    function GetCell(worksheetIndex: Int32; row: Int32; column: Int32; value: DDN.mscorlib.DNObject): DNIChartDataCell; overload;
    procedure Clear(sheetIndex: Int32);

  end;

  //-------------namespace: Aspose.Slides.Charts----------------
  [DNTypeName('Aspose.Slides.Charts.IChartDataWorksheet')]
  DNIChartDataWorksheet = interface(DDN.mscorlib.DNObject)
  ['{AE9C09FA-B6D1-4A7E-A2EB-7D4C1EAD8F91}']
  { getters & setters } 

    function get_Name: string;
    function get_Index: Int32;

  { propertys } 

    property Name: string read get_Name;
    property Index: Int32 read get_Index;
  end;

  //-------------namespace: Aspose.Slides.Charts----------------
  [DNTypeName('Aspose.Slides.Charts.IChartLinesFormat')]
  DNIChartLinesFormat = interface(DDN.mscorlib.DNObject)
  ['{9C749DAC-B520-4D7E-8290-384F04A1BB63}']
  { getters & setters } 

    function get_Line: DNILineFormat;
    function get_Effect: DNIEffectFormat;

  { propertys } 

    property Line: DNILineFormat read get_Line;
    property Effect: DNIEffectFormat read get_Effect;
  end;

  //-------------namespace: Aspose.Slides.Charts----------------
  [DNTypeName('Aspose.Slides.Charts.IChartParagraphFormat')]
  DNIChartParagraphFormat = interface(DDN.mscorlib.DNObject)
  ['{64CD6F0F-1845-44A3-BF74-28D3C78BA4A4}']
  { getters & setters } 

    function get_Alignment: DNTextAlignment;
    procedure set_Alignment(value: DNTextAlignment);
    function get_SpaceWithin: Single;
    procedure set_SpaceWithin(value: Single);
    function get_SpaceBefore: Single;
    procedure set_SpaceBefore(value: Single);
    function get_SpaceAfter: Single;
    procedure set_SpaceAfter(value: Single);
    function get_EastAsianLineBreak: DNNullableBool;
    procedure set_EastAsianLineBreak(value: DNNullableBool);
    function get_RightToLeft: DNNullableBool;
    procedure set_RightToLeft(value: DNNullableBool);
    function get_LatinLineBreak: DNNullableBool;
    procedure set_LatinLineBreak(value: DNNullableBool);
    function get_HangingPunctuation: DNNullableBool;
    procedure set_HangingPunctuation(value: DNNullableBool);
    function get_MarginLeft: Single;
    procedure set_MarginLeft(value: Single);
    function get_MarginRight: Single;
    procedure set_MarginRight(value: Single);
    function get_Indent: Single;
    procedure set_Indent(value: Single);
    function get_DefaultTabSize: Single;
    procedure set_DefaultTabSize(value: Single);
    function get_Tabs: DNITabCollection;
    function get_FontAlignment: DNFontAlignment;
    procedure set_FontAlignment(value: DNFontAlignment);

  { propertys } 

    property Alignment: DNTextAlignment read get_Alignment write set_Alignment;
    property SpaceWithin: Single read get_SpaceWithin write set_SpaceWithin;
    property SpaceBefore: Single read get_SpaceBefore write set_SpaceBefore;
    property SpaceAfter: Single read get_SpaceAfter write set_SpaceAfter;
    property EastAsianLineBreak: DNNullableBool read get_EastAsianLineBreak write set_EastAsianLineBreak;
    property RightToLeft: DNNullableBool read get_RightToLeft write set_RightToLeft;
    property LatinLineBreak: DNNullableBool read get_LatinLineBreak write set_LatinLineBreak;
    property HangingPunctuation: DNNullableBool read get_HangingPunctuation write set_HangingPunctuation;
    property MarginLeft: Single read get_MarginLeft write set_MarginLeft;
    property MarginRight: Single read get_MarginRight write set_MarginRight;
    property Indent: Single read get_Indent write set_Indent;
    property DefaultTabSize: Single read get_DefaultTabSize write set_DefaultTabSize;
    property Tabs: DNITabCollection read get_Tabs;
    property FontAlignment: DNFontAlignment read get_FontAlignment write set_FontAlignment;
  end;

  //-------------namespace: Aspose.Slides.Charts----------------
  [DNTypeName('Aspose.Slides.Charts.IChartTextBlockFormat')]
  DNIChartTextBlockFormat = interface(DDN.mscorlib.DNObject)
  ['{5146F28B-F8E9-4FC1-93C0-5D1A0434B2B0}']
  { getters & setters } 

    function get_AnchoringType: DNTextAnchorType;
    procedure set_AnchoringType(value: DNTextAnchorType);
    function get_CenterText: DNNullableBool;
    procedure set_CenterText(value: DNNullableBool);
    function get_TextVerticalType: DNTextVerticalType;
    procedure set_TextVerticalType(value: DNTextVerticalType);
    function get_MarginLeft: Double;
    procedure set_MarginLeft(value: Double);
    function get_MarginRight: Double;
    procedure set_MarginRight(value: Double);
    function get_MarginTop: Double;
    procedure set_MarginTop(value: Double);
    function get_MarginBottom: Double;
    procedure set_MarginBottom(value: Double);
    function get_WrapText: DNNullableBool;
    procedure set_WrapText(value: DNNullableBool);
    function get_AutofitType: DNTextAutofitType;
    procedure set_AutofitType(value: DNTextAutofitType);
    function get_RotationAngle: Single;
    procedure set_RotationAngle(value: Single);

  { propertys } 

    property AnchoringType: DNTextAnchorType read get_AnchoringType write set_AnchoringType;
    property CenterText: DNNullableBool read get_CenterText write set_CenterText;
    property TextVerticalType: DNTextVerticalType read get_TextVerticalType write set_TextVerticalType;
    property MarginLeft: Double read get_MarginLeft write set_MarginLeft;
    property MarginRight: Double read get_MarginRight write set_MarginRight;
    property MarginTop: Double read get_MarginTop write set_MarginTop;
    property MarginBottom: Double read get_MarginBottom write set_MarginBottom;
    property WrapText: DNNullableBool read get_WrapText write set_WrapText;
    property AutofitType: DNTextAutofitType read get_AutofitType write set_AutofitType;
    property RotationAngle: Single read get_RotationAngle write set_RotationAngle;
  end;

  //-------------namespace: Aspose.Slides.Charts----------------
  [DNTypeName('Aspose.Slides.Charts.IChartTextFormat')]
  DNIChartTextFormat = interface(DDN.mscorlib.DNObject)
  ['{6A75CC1B-92A5-4650-9496-335C89C41170}']
  { getters & setters } 

    function get_TextBlockFormat: DNIChartTextBlockFormat;
    function get_ParagraphFormat: DNIChartParagraphFormat;
    function get_PortionFormat: DNIChartPortionFormat;

  { methods } 

    procedure CopyTo(destTextFrame: DNITextFrame);
    procedure CopyFrom(sourceTextFrame: DNITextFrame);

  { propertys } 

    property TextBlockFormat: DNIChartTextBlockFormat read get_TextBlockFormat;
    property ParagraphFormat: DNIChartParagraphFormat read get_ParagraphFormat;
    property PortionFormat: DNIChartPortionFormat read get_PortionFormat;
  end;

  //-------------namespace: Aspose.Slides.Charts----------------
  [DNTypeName('Aspose.Slides.Charts.IChartWall')]
  DNIChartWall = interface(DDN.mscorlib.DNObject)
  ['{3D540DD2-CD2B-4407-BABA-FDC2FE0E8910}']
  { getters & setters } 

    function get_Thickness: Int32;
    procedure set_Thickness(value: Int32);
    function get_Format: DNIFormat;
    function get_PictureType: DNPictureType;
    procedure set_PictureType(value: DNPictureType);

  { propertys } 

    property Thickness: Int32 read get_Thickness write set_Thickness;
    property Format: DNIFormat read get_Format;
    property PictureType: DNPictureType read get_PictureType write set_PictureType;
  end;

  //-------------namespace: Aspose.Slides.Charts----------------
  [DNTypeName('Aspose.Slides.Charts.IDataSourceTypeForErrorBarsCustomValues')]
  DNIDataSourceTypeForErrorBarsCustomValues = interface(DDN.mscorlib.DNObject)
  ['{7C9FFAE1-A154-4E21-834F-CBD3FD3510C9}']
  { getters & setters } 

    function get_DataSourceTypeForXMinusValues: DNDataSourceType;
    procedure set_DataSourceTypeForXMinusValues(value: DNDataSourceType);
    function get_DataSourceTypeForXPlusValues: DNDataSourceType;
    procedure set_DataSourceTypeForXPlusValues(value: DNDataSourceType);
    function get_DataSourceTypeForYMinusValues: DNDataSourceType;
    procedure set_DataSourceTypeForYMinusValues(value: DNDataSourceType);
    function get_DataSourceTypeForYPlusValues: DNDataSourceType;
    procedure set_DataSourceTypeForYPlusValues(value: DNDataSourceType);

  { propertys } 

    property DataSourceTypeForXMinusValues: DNDataSourceType read get_DataSourceTypeForXMinusValues write set_DataSourceTypeForXMinusValues;
    property DataSourceTypeForXPlusValues: DNDataSourceType read get_DataSourceTypeForXPlusValues write set_DataSourceTypeForXPlusValues;
    property DataSourceTypeForYMinusValues: DNDataSourceType read get_DataSourceTypeForYMinusValues write set_DataSourceTypeForYMinusValues;
    property DataSourceTypeForYPlusValues: DNDataSourceType read get_DataSourceTypeForYPlusValues write set_DataSourceTypeForYPlusValues;
  end;

  //-------------namespace: Aspose.Slides.Charts----------------
  [DNTypeName('Aspose.Slides.Charts.IErrorBarsCustomValues')]
  DNIErrorBarsCustomValues = interface(DDN.mscorlib.DNObject)
  ['{F0F17329-B68E-421D-AD1E-FFEAE3DA87F5}']
  { getters & setters } 

    function get_XMinus: DNIDoubleChartValue;
    function get_YMinus: DNIDoubleChartValue;
    function get_XPlus: DNIDoubleChartValue;
    function get_YPlus: DNIDoubleChartValue;

  { propertys } 

    property XMinus: DNIDoubleChartValue read get_XMinus;
    property YMinus: DNIDoubleChartValue read get_YMinus;
    property XPlus: DNIDoubleChartValue read get_XPlus;
    property YPlus: DNIDoubleChartValue read get_YPlus;
  end;

  //-------------namespace: Aspose.Slides.Charts----------------
  [DNTypeName('Aspose.Slides.Charts.IFormat')]
  DNIFormat = interface(DDN.mscorlib.DNObject)
  ['{DDEF617C-DC28-4582-9ED6-86E276634E50}']
  { getters & setters } 

    function get_Fill: DNIFillFormat;
    function get_Line: DNILineFormat;
    function get_Effect: DNIEffectFormat;
    function get_Effect3D: DNIThreeDFormat;

  { propertys } 

    property Fill: DNIFillFormat read get_Fill;
    property Line: DNILineFormat read get_Line;
    property Effect: DNIEffectFormat read get_Effect;
    property Effect3D: DNIThreeDFormat read get_Effect3D;
  end;

  //-------------namespace: Aspose.Slides.Charts----------------
  [DNTypeName('Aspose.Slides.Charts.ILegendEntryCollection')]
  DNILegendEntryCollection = interface(DDN.mscorlib.DNObject)
  ['{20ECDCD7-92B4-4BC7-B5BA-5296633A96AC}']
  { getters & setters } 

    function get_Item(index: Int32): DNILegendEntryProperties;
    function get_Count: Int32;

  { propertys } 

    property Item[index: Int32]: DNILegendEntryProperties read get_Item; default;
    property Count: Int32 read get_Count;
  end;

  //-------------namespace: Aspose.Slides.Charts----------------
  [DNTypeName('Aspose.Slides.Charts.IMarker')]
  DNIMarker = interface(DDN.mscorlib.DNObject)
  ['{E2FDEDB5-D1F3-4030-B134-BB24B2594849}']
  { getters & setters } 

    function get_Symbol: DNMarkerStyleType;
    procedure set_Symbol(value: DNMarkerStyleType);
    function get_Format: DNIFormat;
    function get_Size: Int32;
    procedure set_Size(value: Int32);

  { propertys } 

    property Symbol: DNMarkerStyleType read get_Symbol write set_Symbol;
    property Format: DNIFormat read get_Format;
    property Size: Int32 read get_Size write set_Size;
  end;

  //-------------namespace: Aspose.Slides.Charts----------------
  [DNTypeName('Aspose.Slides.Charts.IRotation3D')]
  DNIRotation3D = interface(DDN.mscorlib.DNObject)
  ['{DF6070EF-BF47-40BD-8910-5A19DC1FAD02}']
  { getters & setters } 

    function get_RotationX: SByte;
    procedure set_RotationX(value: SByte);
    function get_RotationY: UInt16;
    procedure set_RotationY(value: UInt16);
    function get_Perspective: Byte;
    procedure set_Perspective(value: Byte);
    function get_RightAngleAxes: Boolean;
    procedure set_RightAngleAxes(value: Boolean);
    function get_DepthPercents: UInt16;
    procedure set_DepthPercents(value: UInt16);
    function get_HeightPercents: UInt16;
    procedure set_HeightPercents(value: UInt16);

  { propertys } 

    property RotationX: SByte read get_RotationX write set_RotationX;
    property RotationY: UInt16 read get_RotationY write set_RotationY;
    property Perspective: Byte read get_Perspective write set_Perspective;
    property RightAngleAxes: Boolean read get_RightAngleAxes write set_RightAngleAxes;
    property DepthPercents: UInt16 read get_DepthPercents write set_DepthPercents;
    property HeightPercents: UInt16 read get_HeightPercents write set_HeightPercents;
  end;

  //-------------namespace: Aspose.Slides.Charts----------------
  [DNTypeName('Aspose.Slides.Charts.IUpDownBarsManager')]
  DNIUpDownBarsManager = interface(DDN.mscorlib.DNObject)
  ['{1585BF4B-6504-4CE5-A9A7-984F8EE85684}']
  { getters & setters } 

    function get_UpBarsFormat: DNIFormat;
    function get_DownBarsFormat: DNIFormat;
    function get_HasUpDownBars: Boolean;
    procedure set_HasUpDownBars(value: Boolean);
    function get_GapWidth: Int32;
    procedure set_GapWidth(value: Int32);

  { propertys } 

    property UpBarsFormat: DNIFormat read get_UpBarsFormat;
    property DownBarsFormat: DNIFormat read get_DownBarsFormat;
    property HasUpDownBars: Boolean read get_HasUpDownBars write set_HasUpDownBars;
    property GapWidth: Int32 read get_GapWidth write set_GapWidth;
  end;

  //-------------namespace: Aspose.Slides.Effects----------------
  [DNTypeName('Aspose.Slides.Effects.IAlphaBiLevelEffectiveData')]
  DNIAlphaBiLevelEffectiveData = interface(DDN.mscorlib.DNObject)
  ['{F8238190-E0AB-4375-BE37-B52F802D8DF2}']
  { getters & setters } 

    function get_Threshold: Single;

  { propertys } 

    property Threshold: Single read get_Threshold;
  end;

  //-------------namespace: Aspose.Slides.Effects----------------
  [DNTypeName('Aspose.Slides.Effects.IAlphaCeilingEffectiveData')]
  DNIAlphaCeilingEffectiveData = interface(DDN.mscorlib.DNObject)
  ['{4B6F4FE8-5373-47CE-A65B-437BD6820D12}']
  end;

  //-------------namespace: Aspose.Slides.Effects----------------
  [DNTypeName('Aspose.Slides.Effects.IAlphaFloorEffectiveData')]
  DNIAlphaFloorEffectiveData = interface(DDN.mscorlib.DNObject)
  ['{4B1C74F9-9736-45FE-B84A-EDB1D1CDB407}']
  end;

  //-------------namespace: Aspose.Slides.Effects----------------
  [DNTypeName('Aspose.Slides.Effects.IAlphaInverseEffectiveData')]
  DNIAlphaInverseEffectiveData = interface(DDN.mscorlib.DNObject)
  ['{0349AE73-8DC5-4E9A-A4FD-E3DE23FC2754}']
  end;

  //-------------namespace: Aspose.Slides.Effects----------------
  [DNTypeName('Aspose.Slides.Effects.IAlphaModulateEffectiveData')]
  DNIAlphaModulateEffectiveData = interface(DDN.mscorlib.DNObject)
  ['{BA7768F6-747D-445E-A9B6-0D605D33DA50}']
  end;

  //-------------namespace: Aspose.Slides.Effects----------------
  [DNTypeName('Aspose.Slides.Effects.IAlphaModulateFixedEffectiveData')]
  DNIAlphaModulateFixedEffectiveData = interface(DDN.mscorlib.DNObject)
  ['{AF0C8551-715F-40E5-A168-9E0B88C8E87F}']
  { getters & setters } 

    function get_Amount: Single;

  { propertys } 

    property Amount: Single read get_Amount;
  end;

  //-------------namespace: Aspose.Slides.Effects----------------
  [DNTypeName('Aspose.Slides.Effects.IAlphaReplaceEffectiveData')]
  DNIAlphaReplaceEffectiveData = interface(DDN.mscorlib.DNObject)
  ['{09BA7E8D-733C-42F8-B3B1-0E9F4755294B}']
  { getters & setters } 

    function get_Alpha: Single;

  { propertys } 

    property Alpha: Single read get_Alpha;
  end;

  //-------------namespace: Aspose.Slides.Effects----------------
  [DNTypeName('Aspose.Slides.Effects.IBiLevelEffectiveData')]
  DNIBiLevelEffectiveData = interface(DDN.mscorlib.DNObject)
  ['{BF8E327C-1523-47FA-A3EF-65972141E758}']
  { getters & setters } 

    function get_Threshold: Single;

  { propertys } 

    property Threshold: Single read get_Threshold;
  end;

  //-------------namespace: Aspose.Slides.Effects----------------
  [DNTypeName('Aspose.Slides.Effects.IBlurEffectiveData')]
  DNIBlurEffectiveData = interface(DDN.mscorlib.DNObject)
  ['{87720690-EC52-4EB4-94D2-B8ADB77924D8}']
  { getters & setters } 

    function get_Radius: Double;
    function get_Grow: Boolean;

  { propertys } 

    property Radius: Double read get_Radius;
    property Grow: Boolean read get_Grow;
  end;

  //-------------namespace: Aspose.Slides.Effects----------------
  [DNTypeName('Aspose.Slides.Effects.IColorChangeEffectiveData')]
  DNIColorChangeEffectiveData = interface(DDN.mscorlib.DNObject)
  ['{1204CB16-8736-41CC-8CB0-DFF268CCBE39}']
  { getters & setters } 

    function get_FromColor: DDN.System.Drawing.DNColor;
    function get_ToColor: DDN.System.Drawing.DNColor;
    function get_UseAlpha: Boolean;

  { propertys } 

    property FromColor: DDN.System.Drawing.DNColor read get_FromColor;
    property ToColor: DDN.System.Drawing.DNColor read get_ToColor;
    property UseAlpha: Boolean read get_UseAlpha;
  end;

  //-------------namespace: Aspose.Slides.Effects----------------
  [DNTypeName('Aspose.Slides.Effects.IColorReplaceEffectiveData')]
  DNIColorReplaceEffectiveData = interface(DDN.mscorlib.DNObject)
  ['{2817D109-2D90-427F-930E-183F044B3820}']
  { getters & setters } 

    function get_Color: DDN.System.Drawing.DNColor;

  { propertys } 

    property Color: DDN.System.Drawing.DNColor read get_Color;
  end;

  //-------------namespace: Aspose.Slides.Effects----------------
  [DNTypeName('Aspose.Slides.Effects.IDuotoneEffectiveData')]
  DNIDuotoneEffectiveData = interface(DDN.mscorlib.DNObject)
  ['{A9D6A1B8-C516-4EE9-AB32-48BD5D1E11AD}']
  { getters & setters } 

    function get_Color1: DDN.System.Drawing.DNColor;
    function get_Color2: DDN.System.Drawing.DNColor;

  { propertys } 

    property Color1: DDN.System.Drawing.DNColor read get_Color1;
    property Color2: DDN.System.Drawing.DNColor read get_Color2;
  end;

  //-------------namespace: Aspose.Slides.Effects----------------
  [DNTypeName('Aspose.Slides.Effects.IEffectEffectiveData')]
  DNIEffectEffectiveData = interface(DDN.mscorlib.DNObject)
  ['{FB0C1FF6-BD05-472D-8B1D-D324C59DF8DF}']
  end;

  //-------------namespace: Aspose.Slides.Effects----------------
  [DNTypeName('Aspose.Slides.Effects.IEffectFactory')]
  DNIEffectFactory = interface(DDN.mscorlib.DNObject)
  ['{369E1F6C-8544-482A-9C18-003A8A818966}']
  { getters & setters } 

    function get_ImageTransformOperationFactory: DNIImageTransformOperationFactory;

  { methods } 

    function CreateGlow: DNIGlow;
    function CreateInnerShadow: DNIInnerShadow;
    function CreateOuterShadow: DNIOuterShadow;
    function CreatePresetShadow: DNIPresetShadow;
    function CreateReflection: DNIReflection;
    function CreateSoftEdge: DNISoftEdge;

  { propertys } 

    property ImageTransformOperationFactory: DNIImageTransformOperationFactory read get_ImageTransformOperationFactory;
  end;

  //-------------namespace: Aspose.Slides.Effects----------------
  [DNTypeName('Aspose.Slides.Effects.IFillOverlayEffectiveData')]
  DNIFillOverlayEffectiveData = interface(DDN.mscorlib.DNObject)
  ['{EC3A89F7-32F2-46D9-8709-02CA7584C96A}']
  { getters & setters } 

    function get_Blend: DNFillBlendMode;
    function get_FillFormat: DNIFillFormatEffectiveData;

  { propertys } 

    property Blend: DNFillBlendMode read get_Blend;
    property FillFormat: DNIFillFormatEffectiveData read get_FillFormat;
  end;

  //-------------namespace: Aspose.Slides.Effects----------------
  [DNTypeName('Aspose.Slides.Effects.IGlow')]
  DNIGlow = interface(DDN.mscorlib.DNObject)
  ['{3680A168-855E-42D7-83DD-E8CD707E1DCF}']
  { getters & setters } 

    function get_Radius: Double;
    procedure set_Radius(value: Double);
    function get_Color: DNIColorFormat;

  { propertys } 

    property Radius: Double read get_Radius write set_Radius;
    property Color: DNIColorFormat read get_Color;
  end;

  //-------------namespace: Aspose.Slides.Effects----------------
  [DNTypeName('Aspose.Slides.Effects.IGlowEffectiveData')]
  DNIGlowEffectiveData = interface(DDN.mscorlib.DNObject)
  ['{E09B8594-8E6D-4112-84D6-A8CE46743DB8}']
  { getters & setters } 

    function get_Radius: Double;
    function get_Color: DDN.System.Drawing.DNColor;

  { propertys } 

    property Radius: Double read get_Radius;
    property Color: DDN.System.Drawing.DNColor read get_Color;
  end;

  //-------------namespace: Aspose.Slides.Effects----------------
  [DNTypeName('Aspose.Slides.Effects.IGrayScaleEffectiveData')]
  DNIGrayScaleEffectiveData = interface(DDN.mscorlib.DNObject)
  ['{D14DAA12-3F85-4D79-8550-A57EE41C6647}']
  end;

  //-------------namespace: Aspose.Slides.Effects----------------
  [DNTypeName('Aspose.Slides.Effects.IHSLEffectiveData')]
  DNIHSLEffectiveData = interface(DDN.mscorlib.DNObject)
  ['{67CE5204-5AD0-4BF9-B7C4-67C6CBDB93B0}']
  { getters & setters } 

    function get_Hue: Single;
    function get_Saturation: Single;
    function get_Luminance: Single;

  { propertys } 

    property Hue: Single read get_Hue;
    property Saturation: Single read get_Saturation;
    property Luminance: Single read get_Luminance;
  end;

  //-------------namespace: Aspose.Slides.Effects----------------
  [DNTypeName('Aspose.Slides.Effects.IImageTransformOperation')]
  DNIImageTransformOperation = interface(DDN.mscorlib.DNObject)
  ['{D9226D65-1A37-4664-9C5F-FFF2517C40CD}']
  end;

  //-------------namespace: Aspose.Slides.Effects----------------
  [DNTypeName('Aspose.Slides.Effects.IAlphaBiLevel')]
  DNIAlphaBiLevel = interface(DNIImageTransformOperation)
  ['{E49CC5E8-F8A9-4521-83FC-3D33D36B1C80}']
  { getters & setters } 

    function get_Threshold: Single;
    procedure set_Threshold(value: Single);
    function get_AsIImageTransformOperation: DNIImageTransformOperation;

  { propertys } 

    property Threshold: Single read get_Threshold write set_Threshold;
    property AsIImageTransformOperation: DNIImageTransformOperation read get_AsIImageTransformOperation;
  end;

  //-------------namespace: Aspose.Slides.Effects----------------
  [DNTypeName('Aspose.Slides.Effects.IAlphaCeiling')]
  DNIAlphaCeiling = interface(DNIImageTransformOperation)
  ['{C808DA2C-1718-44F4-B4CD-5D0F1F556D20}']
  { getters & setters } 

    function get_AsIImageTransformOperation: DNIImageTransformOperation;

  { propertys } 

    property AsIImageTransformOperation: DNIImageTransformOperation read get_AsIImageTransformOperation;
  end;

  //-------------namespace: Aspose.Slides.Effects----------------
  [DNTypeName('Aspose.Slides.Effects.IAlphaFloor')]
  DNIAlphaFloor = interface(DNIImageTransformOperation)
  ['{C9999493-8A3E-47A2-AABC-4EDFF1CB6E2E}']
  { getters & setters } 

    function get_AsIImageTransformOperation: DNIImageTransformOperation;

  { propertys } 

    property AsIImageTransformOperation: DNIImageTransformOperation read get_AsIImageTransformOperation;
  end;

  //-------------namespace: Aspose.Slides.Effects----------------
  [DNTypeName('Aspose.Slides.Effects.IAlphaInverse')]
  DNIAlphaInverse = interface(DNIImageTransformOperation)
  ['{992EAD46-6F4E-44FD-A344-1EF476C2CE1D}']
  { getters & setters } 

    function get_AsIImageTransformOperation: DNIImageTransformOperation;

  { propertys } 

    property AsIImageTransformOperation: DNIImageTransformOperation read get_AsIImageTransformOperation;
  end;

  //-------------namespace: Aspose.Slides.Effects----------------
  [DNTypeName('Aspose.Slides.Effects.IAlphaModulate')]
  DNIAlphaModulate = interface(DNIImageTransformOperation)
  ['{792371FD-99AD-4F23-9DC2-3127B9D562B2}']
  { getters & setters } 

    function get_AsIImageTransformOperation: DNIImageTransformOperation;

  { propertys } 

    property AsIImageTransformOperation: DNIImageTransformOperation read get_AsIImageTransformOperation;
  end;

  //-------------namespace: Aspose.Slides.Effects----------------
  [DNTypeName('Aspose.Slides.Effects.IAlphaModulateFixed')]
  DNIAlphaModulateFixed = interface(DNIImageTransformOperation)
  ['{107B41B0-7080-45FC-9B68-857E9A75A5C4}']
  { getters & setters } 

    function get_Amount: Single;
    procedure set_Amount(value: Single);
    function get_AsIImageTransformOperation: DNIImageTransformOperation;

  { propertys } 

    property Amount: Single read get_Amount write set_Amount;
    property AsIImageTransformOperation: DNIImageTransformOperation read get_AsIImageTransformOperation;
  end;

  //-------------namespace: Aspose.Slides.Effects----------------
  [DNTypeName('Aspose.Slides.Effects.IAlphaReplace')]
  DNIAlphaReplace = interface(DNIImageTransformOperation)
  ['{5DCC73EC-1433-418F-BE06-316BA0A5E6E5}']
  { getters & setters } 

    function get_AsIImageTransformOperation: DNIImageTransformOperation;

  { propertys } 

    property AsIImageTransformOperation: DNIImageTransformOperation read get_AsIImageTransformOperation;
  end;

  //-------------namespace: Aspose.Slides.Effects----------------
  [DNTypeName('Aspose.Slides.Effects.IBiLevel')]
  DNIBiLevel = interface(DNIImageTransformOperation)
  ['{9967FBFC-2691-49D1-B3B2-282ABD451981}']
  { getters & setters } 

    function get_AsIImageTransformOperation: DNIImageTransformOperation;

  { propertys } 

    property AsIImageTransformOperation: DNIImageTransformOperation read get_AsIImageTransformOperation;
  end;

  //-------------namespace: Aspose.Slides.Effects----------------
  [DNTypeName('Aspose.Slides.Effects.IBlur')]
  DNIBlur = interface(DNIImageTransformOperation)
  ['{BF607FD0-FAC8-434B-916A-CF38A6F7E66C}']
  { getters & setters } 

    function get_Radius: Double;
    procedure set_Radius(value: Double);
    function get_Grow: Boolean;
    procedure set_Grow(value: Boolean);
    function get_AsIImageTransformOperation: DNIImageTransformOperation;

  { propertys } 

    property Radius: Double read get_Radius write set_Radius;
    property Grow: Boolean read get_Grow write set_Grow;
    property AsIImageTransformOperation: DNIImageTransformOperation read get_AsIImageTransformOperation;
  end;

  //-------------namespace: Aspose.Slides.Effects----------------
  [DNTypeName('Aspose.Slides.Effects.IColorChange')]
  DNIColorChange = interface(DNIImageTransformOperation)
  ['{2AA4E726-A9C6-4A56-8626-E9BC26C182D3}']
  { getters & setters } 

    function get_FromColor: DNIColorFormat;
    function get_ToColor: DNIColorFormat;
    function get_AsIImageTransformOperation: DNIImageTransformOperation;

  { propertys } 

    property FromColor: DNIColorFormat read get_FromColor;
    property ToColor: DNIColorFormat read get_ToColor;
    property AsIImageTransformOperation: DNIImageTransformOperation read get_AsIImageTransformOperation;
  end;

  //-------------namespace: Aspose.Slides.Effects----------------
  [DNTypeName('Aspose.Slides.Effects.IColorReplace')]
  DNIColorReplace = interface(DNIImageTransformOperation)
  ['{774A5364-3DED-489A-90D2-7AD01222A6BF}']
  { getters & setters } 

    function get_Color: DNIColorFormat;
    function get_AsIImageTransformOperation: DNIImageTransformOperation;

  { propertys } 

    property Color: DNIColorFormat read get_Color;
    property AsIImageTransformOperation: DNIImageTransformOperation read get_AsIImageTransformOperation;
  end;

  //-------------namespace: Aspose.Slides.Effects----------------
  [DNTypeName('Aspose.Slides.Effects.IDuotone')]
  DNIDuotone = interface(DNIImageTransformOperation)
  ['{7DAD542F-3669-4292-8365-091A3B2976F2}']
  { getters & setters } 

    function get_Color1: DNIColorFormat;
    function get_Color2: DNIColorFormat;
    function get_AsIImageTransformOperation: DNIImageTransformOperation;

  { propertys } 

    property Color1: DNIColorFormat read get_Color1;
    property Color2: DNIColorFormat read get_Color2;
    property AsIImageTransformOperation: DNIImageTransformOperation read get_AsIImageTransformOperation;
  end;

  //-------------namespace: Aspose.Slides.Effects----------------
  [DNTypeName('Aspose.Slides.Effects.IFillOverlay')]
  DNIFillOverlay = interface(DNIImageTransformOperation)
  ['{9BA05E52-FE0E-4145-8CF4-1B77B1C115A9}']
  { getters & setters } 

    function get_Blend: DNFillBlendMode;
    procedure set_Blend(value: DNFillBlendMode);
    function get_FillFormat: DNIFillFormat;
    function get_AsIImageTransformOperation: DNIImageTransformOperation;

  { propertys } 

    property Blend: DNFillBlendMode read get_Blend write set_Blend;
    property FillFormat: DNIFillFormat read get_FillFormat;
    property AsIImageTransformOperation: DNIImageTransformOperation read get_AsIImageTransformOperation;
  end;

  //-------------namespace: Aspose.Slides.Effects----------------
  [DNTypeName('Aspose.Slides.Effects.IGrayScale')]
  DNIGrayScale = interface(DNIImageTransformOperation)
  ['{5257BC2D-54F9-4DD9-BA76-F82B2DA2EC27}']
  { getters & setters } 

    function get_AsIImageTransformOperation: DNIImageTransformOperation;

  { propertys } 

    property AsIImageTransformOperation: DNIImageTransformOperation read get_AsIImageTransformOperation;
  end;

  //-------------namespace: Aspose.Slides.Effects----------------
  [DNTypeName('Aspose.Slides.Effects.IHSL')]
  DNIHSL = interface(DNIImageTransformOperation)
  ['{EC37F2CD-BFBE-498F-8655-5FD51E5A9369}']
  { getters & setters } 

    function get_AsIImageTransformOperation: DNIImageTransformOperation;

  { propertys } 

    property AsIImageTransformOperation: DNIImageTransformOperation read get_AsIImageTransformOperation;
  end;

  //-------------namespace: Aspose.Slides.Effects----------------
  [DNTypeName('Aspose.Slides.Effects.ILuminance')]
  DNILuminance = interface(DNIImageTransformOperation)
  ['{D587B04F-35B5-42AB-A3AB-F4D1BB13A503}']
  { getters & setters } 

    function get_AsIImageTransformOperation: DNIImageTransformOperation;

  { propertys } 

    property AsIImageTransformOperation: DNIImageTransformOperation read get_AsIImageTransformOperation;
  end;

  //-------------namespace: Aspose.Slides.Effects----------------
  [DNTypeName('Aspose.Slides.Effects.ITint')]
  DNITint = interface(DNIImageTransformOperation)
  ['{9C7F9B3C-91C6-4174-B095-A9CBB0CC01CC}']
  { getters & setters } 

    function get_AsIImageTransformOperation: DNIImageTransformOperation;

  { propertys } 

    property AsIImageTransformOperation: DNIImageTransformOperation read get_AsIImageTransformOperation;
  end;

  //-------------namespace: Aspose.Slides.Effects----------------
  [DNTypeName('Aspose.Slides.Effects.IImageTransformOperationFactory')]
  DNIImageTransformOperationFactory = interface(DDN.mscorlib.DNObject)
  ['{C48A4D66-14D5-4145-85A7-458EC2766E6A}']
  { methods } 

    function CreateAlphaBiLevel(threshold: Single): DNIAlphaBiLevel;
    function CreateAlphCeiling: DNIAlphaCeiling;
    function CreateAlphaFloor: DNIAlphaFloor;
    function CreateAlphaInverse: DNIAlphaInverse;
    function CreateAlphaModulate: DNIAlphaModulate;
    function CreateAlphaModulateFixed(amount: Single): DNIAlphaModulateFixed;
    function CreateAlphaReplace(alpha: Single): DNIAlphaReplace;
    function CreateBiLevel(threshold: Single): DNIBiLevel;
    function CreateBlur(radius: Double; grow: Boolean): DNIBlur;
    function CreateColorChange: DNIColorChange;
    function CreateColorReplace: DNIColorReplace;
    function CreateDuotone: DNIDuotone;
    function CreateFillOverlay: DNIFillOverlay;
    function CreateGrayScale: DNIGrayScale;
    function CreateHSL(hue: Single; saturation: Single; luminance: Single): DNIHSL;
    function CreateLuminance(brightness: Single; contrast: Single): DNILuminance;
    function CreateTint(hue: Single; amount: Single): DNITint;

  end;

  //-------------namespace: Aspose.Slides.Effects----------------
  [DNTypeName('Aspose.Slides.Effects.IInnerShadow')]
  DNIInnerShadow = interface(DDN.mscorlib.DNObject)
  ['{682BE3B9-4E7A-441D-B87F-A3B31EECA08D}']
  { getters & setters } 

    function get_BlurRadius: Double;
    procedure set_BlurRadius(value: Double);
    function get_Direction: Single;
    procedure set_Direction(value: Single);
    function get_Distance: Double;
    procedure set_Distance(value: Double);
    function get_ShadowColor: DNIColorFormat;

  { propertys } 

    property BlurRadius: Double read get_BlurRadius write set_BlurRadius;
    property Direction: Single read get_Direction write set_Direction;
    property Distance: Double read get_Distance write set_Distance;
    property ShadowColor: DNIColorFormat read get_ShadowColor;
  end;

  //-------------namespace: Aspose.Slides.Effects----------------
  [DNTypeName('Aspose.Slides.Effects.IInnerShadowEffectiveData')]
  DNIInnerShadowEffectiveData = interface(DDN.mscorlib.DNObject)
  ['{A80A7E48-4389-4655-9C92-63401A571662}']
  { getters & setters } 

    function get_BlurRadius: Double;
    function get_Direction: Single;
    function get_Distance: Double;
    function get_ShadowColor: DDN.System.Drawing.DNColor;

  { propertys } 

    property BlurRadius: Double read get_BlurRadius;
    property Direction: Single read get_Direction;
    property Distance: Double read get_Distance;
    property ShadowColor: DDN.System.Drawing.DNColor read get_ShadowColor;
  end;

  //-------------namespace: Aspose.Slides.Effects----------------
  [DNTypeName('Aspose.Slides.Effects.ILuminanceEffectiveData')]
  DNILuminanceEffectiveData = interface(DDN.mscorlib.DNObject)
  ['{2D49790A-603B-4C54-8352-2FE2E1FBD492}']
  { getters & setters } 

    function get_Brightness: Single;
    function get_Contrast: Single;

  { propertys } 

    property Brightness: Single read get_Brightness;
    property Contrast: Single read get_Contrast;
  end;

  //-------------namespace: Aspose.Slides.Effects----------------
  [DNTypeName('Aspose.Slides.Effects.IOuterShadow')]
  DNIOuterShadow = interface(DDN.mscorlib.DNObject)
  ['{6AEBDCA4-EC10-4849-A7CA-8C29143A5664}']
  { getters & setters } 

    function get_BlurRadius: Double;
    procedure set_BlurRadius(value: Double);
    function get_Direction: Single;
    procedure set_Direction(value: Single);
    function get_Distance: Double;
    procedure set_Distance(value: Double);
    function get_ShadowColor: DNIColorFormat;
    function get_RectangleAlign: DNRectangleAlignment;
    procedure set_RectangleAlign(value: DNRectangleAlignment);
    function get_SkewHorizontal: Double;
    procedure set_SkewHorizontal(value: Double);
    function get_SkewVertical: Double;
    procedure set_SkewVertical(value: Double);
    function get_RotateShadowWithShape: Boolean;
    procedure set_RotateShadowWithShape(value: Boolean);
    function get_ScaleHorizontal: Double;
    procedure set_ScaleHorizontal(value: Double);
    function get_ScaleVertical: Double;
    procedure set_ScaleVertical(value: Double);

  { propertys } 

    property BlurRadius: Double read get_BlurRadius write set_BlurRadius;
    property Direction: Single read get_Direction write set_Direction;
    property Distance: Double read get_Distance write set_Distance;
    property ShadowColor: DNIColorFormat read get_ShadowColor;
    property RectangleAlign: DNRectangleAlignment read get_RectangleAlign write set_RectangleAlign;
    property SkewHorizontal: Double read get_SkewHorizontal write set_SkewHorizontal;
    property SkewVertical: Double read get_SkewVertical write set_SkewVertical;
    property RotateShadowWithShape: Boolean read get_RotateShadowWithShape write set_RotateShadowWithShape;
    property ScaleHorizontal: Double read get_ScaleHorizontal write set_ScaleHorizontal;
    property ScaleVertical: Double read get_ScaleVertical write set_ScaleVertical;
  end;

  //-------------namespace: Aspose.Slides.Effects----------------
  [DNTypeName('Aspose.Slides.Effects.IOuterShadowEffectiveData')]
  DNIOuterShadowEffectiveData = interface(DDN.mscorlib.DNObject)
  ['{72C427CE-7D32-4FBE-81B4-E6D97678C778}']
  { getters & setters } 

    function get_BlurRadius: Double;
    function get_Direction: Single;
    function get_Distance: Double;
    function get_ShadowColor: DDN.System.Drawing.DNColor;
    function get_RectangleAlign: DNRectangleAlignment;
    function get_SkewHorizontal: Double;
    function get_SkewVertical: Double;
    function get_RotateShadowWithShape: Boolean;
    function get_ScaleHorizontal: Double;
    function get_ScaleVertical: Double;

  { propertys } 

    property BlurRadius: Double read get_BlurRadius;
    property Direction: Single read get_Direction;
    property Distance: Double read get_Distance;
    property ShadowColor: DDN.System.Drawing.DNColor read get_ShadowColor;
    property RectangleAlign: DNRectangleAlignment read get_RectangleAlign;
    property SkewHorizontal: Double read get_SkewHorizontal;
    property SkewVertical: Double read get_SkewVertical;
    property RotateShadowWithShape: Boolean read get_RotateShadowWithShape;
    property ScaleHorizontal: Double read get_ScaleHorizontal;
    property ScaleVertical: Double read get_ScaleVertical;
  end;

  //-------------namespace: Aspose.Slides.Effects----------------
  [DNTypeName('Aspose.Slides.Effects.IPresetShadow')]
  DNIPresetShadow = interface(DDN.mscorlib.DNObject)
  ['{55C32F94-1D92-4A4D-AD2F-02E69290C382}']
  { getters & setters } 

    function get_Direction: Single;
    procedure set_Direction(value: Single);
    function get_Distance: Double;
    procedure set_Distance(value: Double);
    function get_ShadowColor: DNIColorFormat;
    function get_Preset: DNPresetShadowType;
    procedure set_Preset(value: DNPresetShadowType);

  { propertys } 

    property Direction: Single read get_Direction write set_Direction;
    property Distance: Double read get_Distance write set_Distance;
    property ShadowColor: DNIColorFormat read get_ShadowColor;
    property Preset: DNPresetShadowType read get_Preset write set_Preset;
  end;

  //-------------namespace: Aspose.Slides.Effects----------------
  [DNTypeName('Aspose.Slides.Effects.IPresetShadowEffectiveData')]
  DNIPresetShadowEffectiveData = interface(DDN.mscorlib.DNObject)
  ['{47ABCF33-44CA-4F33-BA41-E394B1C0B583}']
  { getters & setters } 

    function get_Direction: Single;
    function get_Distance: Double;
    function get_ShadowColor: DDN.System.Drawing.DNColor;
    function get_Preset: DNPresetShadowType;

  { propertys } 

    property Direction: Single read get_Direction;
    property Distance: Double read get_Distance;
    property ShadowColor: DDN.System.Drawing.DNColor read get_ShadowColor;
    property Preset: DNPresetShadowType read get_Preset;
  end;

  //-------------namespace: Aspose.Slides.Effects----------------
  [DNTypeName('Aspose.Slides.Effects.IReflection')]
  DNIReflection = interface(DDN.mscorlib.DNObject)
  ['{F48BB311-1DD5-4849-8118-9D876338F3F4}']
  { getters & setters } 

    function get_StartPosAlpha: Single;
    procedure set_StartPosAlpha(value: Single);
    function get_EndPosAlpha: Single;
    procedure set_EndPosAlpha(value: Single);
    function get_FadeDirection: Single;
    procedure set_FadeDirection(value: Single);
    function get_StartReflectionOpacity: Single;
    procedure set_StartReflectionOpacity(value: Single);
    function get_EndReflectionOpacity: Single;
    procedure set_EndReflectionOpacity(value: Single);
    function get_BlurRadius: Double;
    procedure set_BlurRadius(value: Double);
    function get_Direction: Single;
    procedure set_Direction(value: Single);
    function get_Distance: Double;
    procedure set_Distance(value: Double);
    function get_RectangleAlign: DNRectangleAlignment;
    procedure set_RectangleAlign(value: DNRectangleAlignment);
    function get_SkewHorizontal: Double;
    procedure set_SkewHorizontal(value: Double);
    function get_SkewVertical: Double;
    procedure set_SkewVertical(value: Double);
    function get_RotateShadowWithShape: Boolean;
    procedure set_RotateShadowWithShape(value: Boolean);
    function get_ScaleHorizontal: Double;
    procedure set_ScaleHorizontal(value: Double);
    function get_ScaleVertical: Double;
    procedure set_ScaleVertical(value: Double);

  { propertys } 

    property StartPosAlpha: Single read get_StartPosAlpha write set_StartPosAlpha;
    property EndPosAlpha: Single read get_EndPosAlpha write set_EndPosAlpha;
    property FadeDirection: Single read get_FadeDirection write set_FadeDirection;
    property StartReflectionOpacity: Single read get_StartReflectionOpacity write set_StartReflectionOpacity;
    property EndReflectionOpacity: Single read get_EndReflectionOpacity write set_EndReflectionOpacity;
    property BlurRadius: Double read get_BlurRadius write set_BlurRadius;
    property Direction: Single read get_Direction write set_Direction;
    property Distance: Double read get_Distance write set_Distance;
    property RectangleAlign: DNRectangleAlignment read get_RectangleAlign write set_RectangleAlign;
    property SkewHorizontal: Double read get_SkewHorizontal write set_SkewHorizontal;
    property SkewVertical: Double read get_SkewVertical write set_SkewVertical;
    property RotateShadowWithShape: Boolean read get_RotateShadowWithShape write set_RotateShadowWithShape;
    property ScaleHorizontal: Double read get_ScaleHorizontal write set_ScaleHorizontal;
    property ScaleVertical: Double read get_ScaleVertical write set_ScaleVertical;
  end;

  //-------------namespace: Aspose.Slides.Effects----------------
  [DNTypeName('Aspose.Slides.Effects.IReflectionEffectiveData')]
  DNIReflectionEffectiveData = interface(DDN.mscorlib.DNObject)
  ['{1A8B3FC0-D594-4627-8035-962A494D520D}']
  { getters & setters } 

    function get_StartPosAlpha: Single;
    function get_EndPosAlpha: Single;
    function get_FadeDirection: Single;
    function get_StartReflectionOpacity: Single;
    function get_EndReflectionOpacity: Single;
    function get_BlurRadius: Double;
    function get_Direction: Single;
    function get_Distance: Double;
    function get_RectangleAlign: DNRectangleAlignment;
    function get_SkewHorizontal: Double;
    function get_SkewVertical: Double;
    function get_RotateShadowWithShape: Boolean;
    function get_ScaleHorizontal: Double;
    function get_ScaleVertical: Double;

  { propertys } 

    property StartPosAlpha: Single read get_StartPosAlpha;
    property EndPosAlpha: Single read get_EndPosAlpha;
    property FadeDirection: Single read get_FadeDirection;
    property StartReflectionOpacity: Single read get_StartReflectionOpacity;
    property EndReflectionOpacity: Single read get_EndReflectionOpacity;
    property BlurRadius: Double read get_BlurRadius;
    property Direction: Single read get_Direction;
    property Distance: Double read get_Distance;
    property RectangleAlign: DNRectangleAlignment read get_RectangleAlign;
    property SkewHorizontal: Double read get_SkewHorizontal;
    property SkewVertical: Double read get_SkewVertical;
    property RotateShadowWithShape: Boolean read get_RotateShadowWithShape;
    property ScaleHorizontal: Double read get_ScaleHorizontal;
    property ScaleVertical: Double read get_ScaleVertical;
  end;

  //-------------namespace: Aspose.Slides.Effects----------------
  [DNTypeName('Aspose.Slides.Effects.ISoftEdge')]
  DNISoftEdge = interface(DDN.mscorlib.DNObject)
  ['{C29DD6AB-3BBF-41AE-BEAC-08D2810A0B0A}']
  { getters & setters } 

    function get_Radius: Double;
    procedure set_Radius(value: Double);

  { propertys } 

    property Radius: Double read get_Radius write set_Radius;
  end;

  //-------------namespace: Aspose.Slides.Effects----------------
  [DNTypeName('Aspose.Slides.Effects.ISoftEdgeEffectiveData')]
  DNISoftEdgeEffectiveData = interface(DDN.mscorlib.DNObject)
  ['{9D617E42-A199-4B99-889D-D7D8AF9BD92F}']
  { getters & setters } 

    function get_Radius: Double;

  { propertys } 

    property Radius: Double read get_Radius;
  end;

  //-------------namespace: Aspose.Slides.Effects----------------
  [DNTypeName('Aspose.Slides.Effects.ITintEffectiveData')]
  DNITintEffectiveData = interface(DDN.mscorlib.DNObject)
  ['{59E6901C-5BD8-4548-A747-B702B6F2C729}']
  { getters & setters } 

    function get_Hue: Single;
    function get_Amount: Single;

  { propertys } 

    property Hue: Single read get_Hue;
    property Amount: Single read get_Amount;
  end;

  //-------------namespace: Aspose.Slides.Export----------------
  [DNTypeName('Aspose.Slides.Export.IHtmlFormatter')]
  DNIHtmlFormatter = interface(DDN.mscorlib.DNObject)
  ['{31ED65BE-DA92-4987-A234-283A1EDAB99B}']
  end;

  //-------------namespace: Aspose.Slides.Export----------------
  [DNTypeName('Aspose.Slides.Export.IHtmlFormattingController')]
  DNIHtmlFormattingController = interface(DDN.mscorlib.DNObject)
  ['{C995885E-5346-4DA0-9272-12A34598D1B8}']
  { methods } 

    procedure WriteDocumentStart(generator: DNIHtmlGenerator; presentation: DNIPresentation);
    procedure WriteDocumentEnd(generator: DNIHtmlGenerator; presentation: DNIPresentation);
    procedure WriteSlideStart(generator: DNIHtmlGenerator; slide: DNISlide);
    procedure WriteSlideEnd(generator: DNIHtmlGenerator; slide: DNISlide);
    procedure WriteShapeStart(generator: DNIHtmlGenerator; shape: DNIShape);
    procedure WriteShapeEnd(generator: DNIHtmlGenerator; shape: DNIShape);

  end;

  //-------------namespace: Aspose.Slides.Export----------------
  [DNTypeName('Aspose.Slides.Export.IEmbeddedEotFontsHtmlController')]
  DNIEmbeddedEotFontsHtmlController = interface(DNIHtmlFormattingController)
  ['{E4096888-EBEC-4026-96F1-AC46B3E4D922}']
  { getters & setters } 

    function get_AsIHtmlFormattingController: DNIHtmlFormattingController;

  { propertys } 

    property AsIHtmlFormattingController: DNIHtmlFormattingController read get_AsIHtmlFormattingController;
  end;

  //-------------namespace: Aspose.Slides.Export----------------
  [DNTypeName('Aspose.Slides.Export.IEmbeddedWoffFontsHtmlController')]
  DNIEmbeddedWoffFontsHtmlController = interface(DNIHtmlFormattingController)
  ['{A4B07473-271D-440E-B061-7A33C36BB572}']
  { getters & setters } 

    function get_AsIHtmlFormattingController: DNIHtmlFormattingController;

  { propertys } 

    property AsIHtmlFormattingController: DNIHtmlFormattingController read get_AsIHtmlFormattingController;
  end;

  //-------------namespace: Aspose.Slides.Export----------------
  [DNTypeName('Aspose.Slides.Export.IResponsiveHtmlController')]
  DNIResponsiveHtmlController = interface(DNIHtmlFormattingController)
  ['{B3326ECA-210F-4060-8EC0-40032B18A73C}']
  { getters & setters } 

    function get_AsIHtmlFormattingController: DNIHtmlFormattingController;

  { propertys } 

    property AsIHtmlFormattingController: DNIHtmlFormattingController read get_AsIHtmlFormattingController;
  end;

  //-------------namespace: Aspose.Slides.Export----------------
  [DNTypeName('Aspose.Slides.Export.IHtmlGenerator')]
  DNIHtmlGenerator = interface(DDN.mscorlib.DNObject)
  ['{A5A958C2-DF4C-4C0A-A56F-64C2B8E18158}']
  { getters & setters } 

    function get_SlideImageSize: DDN.System.Drawing.DNSizeF;
    function get_SlideImageSizeUnit: DNSvgCoordinateUnit;
    function get_SlideImageSizeUnitCode: string;
    function get_PreviousSlideIndex: Int32;
    function get_SlideIndex: Int32;
    function get_NextSlideIndex: Int32;

  { methods } 

    procedure AddHtml(html: string); overload;
    procedure AddHtml(html: TArray<Char>); overload;
    procedure AddHtml(html: TArray<Char>; startIndex: Int32; length: Int32); overload;
    procedure AddText(text: string); overload;
    procedure AddText(text: TArray<Char>); overload;
    procedure AddText(text: TArray<Char>; startIndex: Int32; length: Int32); overload;
    procedure AddAttributeValue(value: string); overload;
    procedure AddAttributeValue(value: TArray<Char>); overload;
    procedure AddAttributeValue(value: TArray<Char>; startIndex: Int32; length: Int32); overload;

  { propertys } 

    property SlideImageSize: DDN.System.Drawing.DNSizeF read get_SlideImageSize;
    property SlideImageSizeUnit: DNSvgCoordinateUnit read get_SlideImageSizeUnit;
    property SlideImageSizeUnitCode: string read get_SlideImageSizeUnitCode;
    property PreviousSlideIndex: Int32 read get_PreviousSlideIndex;
    property SlideIndex: Int32 read get_SlideIndex;
    property NextSlideIndex: Int32 read get_NextSlideIndex;
  end;

  //-------------namespace: Aspose.Slides.Export----------------
  [DNTypeName('Aspose.Slides.Export.ILinkEmbedController')]
  DNILinkEmbedController = interface(DDN.mscorlib.DNObject)
  ['{3236C359-1198-404A-83DA-4702DDCE7EB8}']
  { methods } 

    function GetObjectStoringLocation(id: Int32; entityData: TArray<Byte>; semanticName: string; contentType: string; recomendedExtension: string): DNLinkEmbedDecision;
    function GetUrl(id: Int32; referrer: Int32): string;
    procedure SaveExternal(id: Int32; entityData: TArray<Byte>);

  end;

  //-------------namespace: Aspose.Slides.Export----------------
  [DNTypeName('Aspose.Slides.Export.IVideoPlayerHtmlController')]
  DNIVideoPlayerHtmlController = interface(DNILinkEmbedController)
  ['{A208210E-68F0-4958-BE48-F7324ADA89C8}']
  { getters & setters } 

    function get_AsIHtmlFormattingController: DNIHtmlFormattingController;
    function get_AsISvgShapeFormattingController: DNISvgShapeFormattingController;
    function get_AsILinkEmbedController: DNILinkEmbedController;

  { propertys } 

    property AsIHtmlFormattingController: DNIHtmlFormattingController read get_AsIHtmlFormattingController;
    property AsISvgShapeFormattingController: DNISvgShapeFormattingController read get_AsISvgShapeFormattingController;
    property AsILinkEmbedController: DNILinkEmbedController read get_AsILinkEmbedController;
  end;

  //-------------namespace: Aspose.Slides.Export----------------
  [DNTypeName('Aspose.Slides.Export.INotesCommentsLayoutingOptions')]
  DNINotesCommentsLayoutingOptions = interface(DDN.mscorlib.DNObject)
  ['{F84FA33C-38D3-41A3-A623-68325DF33DCE}']
  { getters & setters } 

    function get_NotesPosition: DNNotesPositions;
    procedure set_NotesPosition(value: DNNotesPositions);
    function get_CommentsPosition: DNCommentsPositions;
    procedure set_CommentsPosition(value: DNCommentsPositions);
    function get_CommentsAreaColor: DDN.System.Drawing.DNColor;
    procedure set_CommentsAreaColor(value: DDN.System.Drawing.DNColor);
    function get_CommentsAreaWidth: Int32;
    procedure set_CommentsAreaWidth(value: Int32);
    function get_ShowCommentsByNoAuthor: Boolean;
    procedure set_ShowCommentsByNoAuthor(value: Boolean);

  { propertys } 

    property NotesPosition: DNNotesPositions read get_NotesPosition write set_NotesPosition;
    property CommentsPosition: DNCommentsPositions read get_CommentsPosition write set_CommentsPosition;
    property CommentsAreaColor: DDN.System.Drawing.DNColor read get_CommentsAreaColor write set_CommentsAreaColor;
    property CommentsAreaWidth: Int32 read get_CommentsAreaWidth write set_CommentsAreaWidth;
    property ShowCommentsByNoAuthor: Boolean read get_ShowCommentsByNoAuthor write set_ShowCommentsByNoAuthor;
  end;

  //-------------namespace: Aspose.Slides.Export----------------
  [DNTypeName('Aspose.Slides.Export.ISaveOptions')]
  DNISaveOptions = interface(DDN.mscorlib.DNObject)
  ['{DCC148B8-FAF1-4CDF-9515-F0BD457FD456}']
  { getters & setters } 

    function get_WarningCallback: DNIWarningCallback;
    procedure set_WarningCallback(value: DNIWarningCallback);
    function get_ProgressCallback: DNIProgressCallback;
    procedure set_ProgressCallback(value: DNIProgressCallback);
    function get_DefaultRegularFont: string;
    procedure set_DefaultRegularFont(value: string);

  { propertys } 

    property WarningCallback: DNIWarningCallback read get_WarningCallback write set_WarningCallback;
    property ProgressCallback: DNIProgressCallback read get_ProgressCallback write set_ProgressCallback;
    property DefaultRegularFont: string read get_DefaultRegularFont write set_DefaultRegularFont;
  end;

  //-------------namespace: Aspose.Slides.Export----------------
  [DNTypeName('Aspose.Slides.Export.IHtmlOptions')]
  DNIHtmlOptions = interface(DNISaveOptions)
  ['{25F44504-EEA1-4FC5-B20E-EBC8BECB635D}']
  { getters & setters } 

    function get_HtmlFormatter: DNIHtmlFormatter;
    procedure set_HtmlFormatter(value: DNIHtmlFormatter);
    function get_SlideImageFormat: DNISlideImageFormat;
    procedure set_SlideImageFormat(value: DNISlideImageFormat);
    function get_ShowHiddenSlides: Boolean;
    procedure set_ShowHiddenSlides(value: Boolean);
    function get_JpegQuality: Byte;
    procedure set_JpegQuality(value: Byte);
    function get_PicturesCompression: DNPicturesCompression;
    procedure set_PicturesCompression(value: DNPicturesCompression);
    function get_DeletePicturesCroppedAreas: Boolean;
    procedure set_DeletePicturesCroppedAreas(value: Boolean);
    function get_SvgResponsiveLayout: Boolean;
    procedure set_SvgResponsiveLayout(value: Boolean);
    function get_NotesCommentsLayouting: DNINotesCommentsLayoutingOptions;
    function get_AsISaveOptions: DNISaveOptions;

  { propertys } 

    property HtmlFormatter: DNIHtmlFormatter read get_HtmlFormatter write set_HtmlFormatter;
    property SlideImageFormat: DNISlideImageFormat read get_SlideImageFormat write set_SlideImageFormat;
    property ShowHiddenSlides: Boolean read get_ShowHiddenSlides write set_ShowHiddenSlides;
    property JpegQuality: Byte read get_JpegQuality write set_JpegQuality;
    property PicturesCompression: DNPicturesCompression read get_PicturesCompression write set_PicturesCompression;
    property DeletePicturesCroppedAreas: Boolean read get_DeletePicturesCroppedAreas write set_DeletePicturesCroppedAreas;
    property SvgResponsiveLayout: Boolean read get_SvgResponsiveLayout write set_SvgResponsiveLayout;
    property NotesCommentsLayouting: DNINotesCommentsLayoutingOptions read get_NotesCommentsLayouting;
    property AsISaveOptions: DNISaveOptions read get_AsISaveOptions;
  end;

  //-------------namespace: Aspose.Slides.Export----------------
  [DNTypeName('Aspose.Slides.Export.IPdfOptions')]
  DNIPdfOptions = interface(DNISaveOptions)
  ['{42C93C3E-8E38-43D0-AF5E-72AF1701D0E3}']
  { getters & setters } 

    function get_TextCompression: DNPdfTextCompression;
    procedure set_TextCompression(value: DNPdfTextCompression);
    function get_BestImagesCompressionRatio: Boolean;
    procedure set_BestImagesCompressionRatio(value: Boolean);
    function get_EmbedTrueTypeFontsForASCII: Boolean;
    procedure set_EmbedTrueTypeFontsForASCII(value: Boolean);
    function get_ShowHiddenSlides: Boolean;
    procedure set_ShowHiddenSlides(value: Boolean);
    function get_AdditionalCommonFontFamilies: TArray<string>;
    procedure set_AdditionalCommonFontFamilies(value: TArray<string>);
    function get_EmbedFullFonts: Boolean;
    procedure set_EmbedFullFonts(value: Boolean);
    function get_JpegQuality: Byte;
    procedure set_JpegQuality(value: Byte);
    function get_Compliance: DNPdfCompliance;
    procedure set_Compliance(value: DNPdfCompliance);
    function get_Password: string;
    procedure set_Password(value: string);
    function get_AccessPermissions: DNPdfAccessPermissions;
    procedure set_AccessPermissions(value: DNPdfAccessPermissions);
    function get_SaveMetafilesAsPng: Boolean;
    procedure set_SaveMetafilesAsPng(value: Boolean);
    function get_SufficientResolution: Single;
    procedure set_SufficientResolution(value: Single);
    function get_DrawSlidesFrame: Boolean;
    procedure set_DrawSlidesFrame(value: Boolean);
    function get_NotesCommentsLayouting: DNINotesCommentsLayoutingOptions;
    function get_ImageTransparentColor: DDN.System.Drawing.DNColor;
    procedure set_ImageTransparentColor(value: DDN.System.Drawing.DNColor);
    function get_ApplyImageTransparent: Boolean;
    procedure set_ApplyImageTransparent(value: Boolean);
    function get_AsISaveOptions: DNISaveOptions;

  { propertys } 

    property TextCompression: DNPdfTextCompression read get_TextCompression write set_TextCompression;
    property BestImagesCompressionRatio: Boolean read get_BestImagesCompressionRatio write set_BestImagesCompressionRatio;
    property EmbedTrueTypeFontsForASCII: Boolean read get_EmbedTrueTypeFontsForASCII write set_EmbedTrueTypeFontsForASCII;
    property ShowHiddenSlides: Boolean read get_ShowHiddenSlides write set_ShowHiddenSlides;
    property AdditionalCommonFontFamilies: TArray<string> read get_AdditionalCommonFontFamilies write set_AdditionalCommonFontFamilies;
    property EmbedFullFonts: Boolean read get_EmbedFullFonts write set_EmbedFullFonts;
    property JpegQuality: Byte read get_JpegQuality write set_JpegQuality;
    property Compliance: DNPdfCompliance read get_Compliance write set_Compliance;
    property Password: string read get_Password write set_Password;
    property AccessPermissions: DNPdfAccessPermissions read get_AccessPermissions write set_AccessPermissions;
    property SaveMetafilesAsPng: Boolean read get_SaveMetafilesAsPng write set_SaveMetafilesAsPng;
    property SufficientResolution: Single read get_SufficientResolution write set_SufficientResolution;
    property DrawSlidesFrame: Boolean read get_DrawSlidesFrame write set_DrawSlidesFrame;
    property NotesCommentsLayouting: DNINotesCommentsLayoutingOptions read get_NotesCommentsLayouting;
    property ImageTransparentColor: DDN.System.Drawing.DNColor read get_ImageTransparentColor write set_ImageTransparentColor;
    property ApplyImageTransparent: Boolean read get_ApplyImageTransparent write set_ApplyImageTransparent;
    property AsISaveOptions: DNISaveOptions read get_AsISaveOptions;
  end;

  //-------------namespace: Aspose.Slides.Export----------------
  [DNTypeName('Aspose.Slides.Export.IPptOptions')]
  DNIPptOptions = interface(DNISaveOptions)
  ['{352B25A8-E6E8-4387-9BB7-8EA1747D97BA}']
  { getters & setters } 

    function get_RootDirectoryClsid: DDN.mscorlib.DNGuid;
    procedure set_RootDirectoryClsid(value: DDN.mscorlib.DNGuid);
    function get_AsISaveOptions: DNISaveOptions;

  { propertys } 

    property RootDirectoryClsid: DDN.mscorlib.DNGuid read get_RootDirectoryClsid write set_RootDirectoryClsid;
    property AsISaveOptions: DNISaveOptions read get_AsISaveOptions;
  end;

  //-------------namespace: Aspose.Slides.Export----------------
  [DNTypeName('Aspose.Slides.Export.IPptxOptions')]
  DNIPptxOptions = interface(DNISaveOptions)
  ['{AB682B3A-6BDF-4946-9DA3-DB1498A27D0B}']
  { getters & setters } 

    function get_Conformance: DNConformance;
    procedure set_Conformance(value: DNConformance);
    function get_AsISaveOptions: DNISaveOptions;

  { propertys } 

    property Conformance: DNConformance read get_Conformance write set_Conformance;
    property AsISaveOptions: DNISaveOptions read get_AsISaveOptions;
  end;

  //-------------namespace: Aspose.Slides.Export----------------
  [DNTypeName('Aspose.Slides.Export.IRenderingOptions')]
  DNIRenderingOptions = interface(DNISaveOptions)
  ['{5F8883CD-3CE7-44D4-91A4-775E68FADEBB}']
  { getters & setters } 

    function get_NotesCommentsLayouting: DNINotesCommentsLayoutingOptions;
    function get_AsISaveOptions: DNISaveOptions;

  { propertys } 

    property NotesCommentsLayouting: DNINotesCommentsLayoutingOptions read get_NotesCommentsLayouting;
    property AsISaveOptions: DNISaveOptions read get_AsISaveOptions;
  end;

  //-------------namespace: Aspose.Slides.Export----------------
  [DNTypeName('Aspose.Slides.Export.ISVGOptions')]
  DNISVGOptions = interface(DNISaveOptions)
  ['{2D9C9A99-9C45-4331-A02A-B5BD688FD924}']
  { getters & setters } 

    function get_VectorizeText: Boolean;
    procedure set_VectorizeText(value: Boolean);
    function get_MetafileRasterizationDpi: Int32;
    procedure set_MetafileRasterizationDpi(value: Int32);
    function get_Disable3DText: Boolean;
    procedure set_Disable3DText(value: Boolean);
    function get_DisableGradientSplit: Boolean;
    procedure set_DisableGradientSplit(value: Boolean);
    function get_DisableLineEndCropping: Boolean;
    procedure set_DisableLineEndCropping(value: Boolean);
    function get_JpegQuality: Int32;
    procedure set_JpegQuality(value: Int32);
    function get_ShapeFormattingController: DNISvgShapeFormattingController;
    procedure set_ShapeFormattingController(value: DNISvgShapeFormattingController);
    function get_PicturesCompression: DNPicturesCompression;
    procedure set_PicturesCompression(value: DNPicturesCompression);
    function get_DeletePicturesCroppedAreas: Boolean;
    procedure set_DeletePicturesCroppedAreas(value: Boolean);
    function get_ExternalFontsHandling: DNSvgExternalFontsHandling;
    procedure set_ExternalFontsHandling(value: DNSvgExternalFontsHandling);
    function get_AsISaveOptions: DNISaveOptions;

  { propertys } 

    property VectorizeText: Boolean read get_VectorizeText write set_VectorizeText;
    property MetafileRasterizationDpi: Int32 read get_MetafileRasterizationDpi write set_MetafileRasterizationDpi;
    property Disable3DText: Boolean read get_Disable3DText write set_Disable3DText;
    property DisableGradientSplit: Boolean read get_DisableGradientSplit write set_DisableGradientSplit;
    property DisableLineEndCropping: Boolean read get_DisableLineEndCropping write set_DisableLineEndCropping;
    property JpegQuality: Int32 read get_JpegQuality write set_JpegQuality;
    property ShapeFormattingController: DNISvgShapeFormattingController read get_ShapeFormattingController write set_ShapeFormattingController;
    property PicturesCompression: DNPicturesCompression read get_PicturesCompression write set_PicturesCompression;
    property DeletePicturesCroppedAreas: Boolean read get_DeletePicturesCroppedAreas write set_DeletePicturesCroppedAreas;
    property ExternalFontsHandling: DNSvgExternalFontsHandling read get_ExternalFontsHandling write set_ExternalFontsHandling;
    property AsISaveOptions: DNISaveOptions read get_AsISaveOptions;
  end;

  //-------------namespace: Aspose.Slides.Export----------------
  [DNTypeName('Aspose.Slides.Export.ISwfOptions')]
  DNISwfOptions = interface(DNISaveOptions)
  ['{B74C8887-D592-4A2C-B3CF-55A7AC14CF09}']
  { getters & setters } 

    function get_Compressed: Boolean;
    procedure set_Compressed(value: Boolean);
    function get_ViewerIncluded: Boolean;
    procedure set_ViewerIncluded(value: Boolean);
    function get_ShowPageBorder: Boolean;
    procedure set_ShowPageBorder(value: Boolean);
    function get_ShowHiddenSlides: Boolean;
    procedure set_ShowHiddenSlides(value: Boolean);
    function get_ShowFullScreen: Boolean;
    procedure set_ShowFullScreen(value: Boolean);
    function get_ShowPageStepper: Boolean;
    procedure set_ShowPageStepper(value: Boolean);
    function get_ShowSearch: Boolean;
    procedure set_ShowSearch(value: Boolean);
    function get_ShowTopPane: Boolean;
    procedure set_ShowTopPane(value: Boolean);
    function get_ShowBottomPane: Boolean;
    procedure set_ShowBottomPane(value: Boolean);
    function get_ShowLeftPane: Boolean;
    procedure set_ShowLeftPane(value: Boolean);
    function get_StartOpenLeftPane: Boolean;
    procedure set_StartOpenLeftPane(value: Boolean);
    function get_EnableContextMenu: Boolean;
    procedure set_EnableContextMenu(value: Boolean);
    function get_LogoImageBytes: TArray<Byte>;
    procedure set_LogoImageBytes(value: TArray<Byte>);
    function get_LogoLink: string;
    procedure set_LogoLink(value: string);
    function get_JpegQuality: Int32;
    procedure set_JpegQuality(value: Int32);
    function get_NotesCommentsLayouting: DNINotesCommentsLayoutingOptions;
    function get_AsISaveOptions: DNISaveOptions;

  { propertys } 

    property Compressed: Boolean read get_Compressed write set_Compressed;
    property ViewerIncluded: Boolean read get_ViewerIncluded write set_ViewerIncluded;
    property ShowPageBorder: Boolean read get_ShowPageBorder write set_ShowPageBorder;
    property ShowHiddenSlides: Boolean read get_ShowHiddenSlides write set_ShowHiddenSlides;
    property ShowFullScreen: Boolean read get_ShowFullScreen write set_ShowFullScreen;
    property ShowPageStepper: Boolean read get_ShowPageStepper write set_ShowPageStepper;
    property ShowSearch: Boolean read get_ShowSearch write set_ShowSearch;
    property ShowTopPane: Boolean read get_ShowTopPane write set_ShowTopPane;
    property ShowBottomPane: Boolean read get_ShowBottomPane write set_ShowBottomPane;
    property ShowLeftPane: Boolean read get_ShowLeftPane write set_ShowLeftPane;
    property StartOpenLeftPane: Boolean read get_StartOpenLeftPane write set_StartOpenLeftPane;
    property EnableContextMenu: Boolean read get_EnableContextMenu write set_EnableContextMenu;
    property LogoImageBytes: TArray<Byte> read get_LogoImageBytes write set_LogoImageBytes;
    property LogoLink: string read get_LogoLink write set_LogoLink;
    property JpegQuality: Int32 read get_JpegQuality write set_JpegQuality;
    property NotesCommentsLayouting: DNINotesCommentsLayoutingOptions read get_NotesCommentsLayouting;
    property AsISaveOptions: DNISaveOptions read get_AsISaveOptions;
  end;

  //-------------namespace: Aspose.Slides.Export----------------
  [DNTypeName('Aspose.Slides.Export.ITiffOptions')]
  DNITiffOptions = interface(DNISaveOptions)
  ['{3CB136F3-42AD-4FEE-8F79-CC22E91FC1B7}']
  { getters & setters } 

    function get_ImageSize: DDN.System.Drawing.DNSize;
    procedure set_ImageSize(value: DDN.System.Drawing.DNSize);
    function get_DpiX: UInt32;
    procedure set_DpiX(value: UInt32);
    function get_DpiY: UInt32;
    procedure set_DpiY(value: UInt32);
    function get_ShowHiddenSlides: Boolean;
    procedure set_ShowHiddenSlides(value: Boolean);
    function get_CompressionType: DNTiffCompressionTypes;
    procedure set_CompressionType(value: DNTiffCompressionTypes);
    function get_PixelFormat: DNImagePixelFormat;
    procedure set_PixelFormat(value: DNImagePixelFormat);
    function get_NotesCommentsLayouting: DNINotesCommentsLayoutingOptions;
    function get_AsISaveOptions: DNISaveOptions;

  { propertys } 

    property ImageSize: DDN.System.Drawing.DNSize read get_ImageSize write set_ImageSize;
    property DpiX: UInt32 read get_DpiX write set_DpiX;
    property DpiY: UInt32 read get_DpiY write set_DpiY;
    property ShowHiddenSlides: Boolean read get_ShowHiddenSlides write set_ShowHiddenSlides;
    property CompressionType: DNTiffCompressionTypes read get_CompressionType write set_CompressionType;
    property PixelFormat: DNImagePixelFormat read get_PixelFormat write set_PixelFormat;
    property NotesCommentsLayouting: DNINotesCommentsLayoutingOptions read get_NotesCommentsLayouting;
    property AsISaveOptions: DNISaveOptions read get_AsISaveOptions;
  end;

  //-------------namespace: Aspose.Slides.Export----------------
  [DNTypeName('Aspose.Slides.Export.IXpsOptions')]
  DNIXpsOptions = interface(DNISaveOptions)
  ['{47CC7AD5-3FC5-4013-82A5-904B3272F27C}']
  { getters & setters } 

    function get_SaveMetafilesAsPng: Boolean;
    procedure set_SaveMetafilesAsPng(value: Boolean);
    function get_DrawSlidesFrame: Boolean;
    procedure set_DrawSlidesFrame(value: Boolean);
    function get_ShowHiddenSlides: Boolean;
    procedure set_ShowHiddenSlides(value: Boolean);
    function get_AsISaveOptions: DNISaveOptions;

  { propertys } 

    property SaveMetafilesAsPng: Boolean read get_SaveMetafilesAsPng write set_SaveMetafilesAsPng;
    property DrawSlidesFrame: Boolean read get_DrawSlidesFrame write set_DrawSlidesFrame;
    property ShowHiddenSlides: Boolean read get_ShowHiddenSlides write set_ShowHiddenSlides;
    property AsISaveOptions: DNISaveOptions read get_AsISaveOptions;
  end;

  //-------------namespace: Aspose.Slides.Export.Xaml----------------
  [DNTypeName('Aspose.Slides.Export.Xaml.IXamlOptions')]
  DNIXamlOptions = interface(DNISaveOptions)
  ['{A9879BA4-2360-4883-8139-9007131E5DBD}']
  { getters & setters } 

    function get_ExportHiddenSlides: Boolean;
    procedure set_ExportHiddenSlides(value: Boolean);
    function get_OutputSaver: DNIXamlOutputSaver;
    procedure set_OutputSaver(value: DNIXamlOutputSaver);
    function get_AsISaveOptions: DNISaveOptions;

  { propertys } 

    property ExportHiddenSlides: Boolean read get_ExportHiddenSlides write set_ExportHiddenSlides;
    property OutputSaver: DNIXamlOutputSaver read get_OutputSaver write set_OutputSaver;
    property AsISaveOptions: DNISaveOptions read get_AsISaveOptions;
  end;

  //-------------namespace: Aspose.Slides.Export----------------
  [DNTypeName('Aspose.Slides.Export.ISaveOptionsFactory')]
  DNISaveOptionsFactory = interface(DDN.mscorlib.DNObject)
  ['{0C4EFFDD-0243-4A2A-B689-E3AF6596C89F}']
  { methods } 

    function CreatePptxOptions: DNIPptxOptions;

  end;

  //-------------namespace: Aspose.Slides.Export----------------
  [DNTypeName('Aspose.Slides.Export.ISlideImageFormat')]
  DNISlideImageFormat = interface(DDN.mscorlib.DNObject)
  ['{091E0DD3-6D63-458F-89AB-968D3536EB91}']
  end;

  //-------------namespace: Aspose.Slides.Export----------------
  [DNTypeName('Aspose.Slides.Export.ISvgShape')]
  DNISvgShape = interface(DDN.mscorlib.DNObject)
  ['{F443D824-D5DB-499A-BCD7-B961A808C62C}']
  { getters & setters } 

    function get_Id: string;
    procedure set_Id(value: string);

  { methods } 

    procedure SetEventHandler(eventType: DNSvgEvent; handler: string);

  { propertys } 

    property Id: string read get_Id write set_Id;
  end;

  //-------------namespace: Aspose.Slides.Export----------------
  [DNTypeName('Aspose.Slides.Export.ISvgShapeFormattingController')]
  DNISvgShapeFormattingController = interface(DDN.mscorlib.DNObject)
  ['{52CC5455-5872-4D95-A007-5F0508961F02}']
  { methods } 

    procedure FormatShape(svgShape: DNISvgShape; shape: DNIShape);

  end;

  //-------------namespace: Aspose.Slides.Export----------------
  [DNTypeName('Aspose.Slides.Export.ISvgShapeAndTextFormattingController')]
  DNISvgShapeAndTextFormattingController = interface(DNISvgShapeFormattingController)
  ['{4B79B991-212F-4EA5-81D0-98A1628DCBAD}']
  { getters & setters } 

    function get_AsISvgShapeFormattingController: DNISvgShapeFormattingController;

  { methods } 

    procedure FormatText(svgTSpan: DNISvgTSpan; portion: DNIPortion; textFrame: DNITextFrame);

  { propertys } 

    property AsISvgShapeFormattingController: DNISvgShapeFormattingController read get_AsISvgShapeFormattingController;
  end;

  //-------------namespace: Aspose.Slides.Export----------------
  [DNTypeName('Aspose.Slides.Export.ISvgTSpan')]
  DNISvgTSpan = interface(DDN.mscorlib.DNObject)
  ['{39C646C5-8815-4E74-AE32-BA5DA3D9863A}']
  { getters & setters } 

    function get_Id: string;
    procedure set_Id(value: string);

  { propertys } 

    property Id: string read get_Id write set_Id;
  end;

  //-------------namespace: Aspose.Slides.Export----------------
  [DNTypeName('Aspose.Slides.Export.ITextToHtmlConversionOptions')]
  DNITextToHtmlConversionOptions = interface(DDN.mscorlib.DNObject)
  ['{DF3D9583-A0EA-45C0-AC0B-86F806531AB6}']
  { getters & setters } 

    function get_AddClipboardFragmentHeader: Boolean;
    procedure set_AddClipboardFragmentHeader(value: Boolean);
    function get_TextInheritanceLimit: DNTextInheritanceLimit;
    procedure set_TextInheritanceLimit(value: DNTextInheritanceLimit);
    function get_LinkEmbedController: DNILinkEmbedController;
    procedure set_LinkEmbedController(value: DNILinkEmbedController);
    function get_EncodingName: string;
    procedure set_EncodingName(value: string);

  { propertys } 

    property AddClipboardFragmentHeader: Boolean read get_AddClipboardFragmentHeader write set_AddClipboardFragmentHeader;
    property TextInheritanceLimit: DNTextInheritanceLimit read get_TextInheritanceLimit write set_TextInheritanceLimit;
    property LinkEmbedController: DNILinkEmbedController read get_LinkEmbedController write set_LinkEmbedController;
    property EncodingName: string read get_EncodingName write set_EncodingName;
  end;

  //-------------namespace: Aspose.Slides.Export----------------
  [DNTypeName('Aspose.Slides.Export.IVideoPlayerHtmlControllerFactory')]
  DNIVideoPlayerHtmlControllerFactory = interface(DDN.mscorlib.DNObject)
  ['{91D216AA-A020-4B49-9602-102FBACC6688}']
  { methods } 

    function CreateVideoPlayerHtmlController(path: string; fileName: string; baseUri: string): DNIVideoPlayerHtmlController;

  end;

  //-------------namespace: Aspose.Slides.Export.Web----------------
  [DNTypeName('Aspose.Slides.Export.Web.IOutputFile')]
  DNIOutputFile = interface(DDN.mscorlib.DNObject)
  ['{D573CBDF-8994-4309-A2A6-30542504DE33}']
  { methods } 

    procedure Write(stream: DDN.mscorlib.DNStream);

  end;

  //-------------namespace: Aspose.Slides.Export.Web----------------
  [DNTypeName('Aspose.Slides.Export.Web.IOutputSaver')]
  DNIOutputSaver = interface(DDN.mscorlib.DNObject)
  ['{0DE84C1E-7622-4C44-AC0E-B698DDB9BD1A}']
  { methods } 

    procedure Save(path: string; outputFile: DNIOutputFile);

  end;

  //-------------namespace: Aspose.Slides.Export.Web----------------
  [DNTypeName('Aspose.Slides.Export.Web.ITemplateEngine')]
  DNITemplateEngine = interface(DDN.mscorlib.DNObject)
  ['{6BC53EE0-F4EC-4AEE-913E-F0FCFD59C252}']
  { methods } 

    procedure AddTemplate(key: string; template: string; modelType: DDN.mscorlib.DNType);
    function Compile(key: string; model: DDN.mscorlib.DNObject): string;

  end;

  //-------------namespace: Aspose.Slides.Export.Xaml----------------
  [DNTypeName('Aspose.Slides.Export.Xaml.IXamlOutputSaver')]
  DNIXamlOutputSaver = interface(DDN.mscorlib.DNObject)
  ['{2E92EDCB-710E-499F-A08D-05B4BC0CB299}']
  { methods } 

    procedure Save(path: string; data: TArray<Byte>);

  end;

  //-------------namespace: Aspose.Slides----------------
  [DNTypeName('Aspose.Slides.IAdjustValue')]
  DNIAdjustValue = interface(DDN.mscorlib.DNObject)
  ['{49A49EA8-5A30-49DD-910C-87820DF1E49D}']
  { getters & setters } 

    function get_RawValue: Int64;
    procedure set_RawValue(value: Int64);
    function get_AngleValue: Single;
    procedure set_AngleValue(value: Single);
    function get_Name: string;

  { propertys } 

    property RawValue: Int64 read get_RawValue write set_RawValue;
    property AngleValue: Single read get_AngleValue write set_AngleValue;
    property Name: string read get_Name;
  end;

  //-------------namespace: Aspose.Slides----------------
  [DNTypeName('Aspose.Slides.IAnimationTimeLine')]
  DNIAnimationTimeLine = interface(DDN.mscorlib.DNObject)
  ['{20458136-AAC5-4E8F-9652-7BA6B43E9ABA}']
  { getters & setters } 

    function get_InteractiveSequences: DNISequenceCollection;
    function get_MainSequence: DNISequence;
    function get_TextAnimationCollection: DNITextAnimationCollection;

  { propertys } 

    property InteractiveSequences: DNISequenceCollection read get_InteractiveSequences;
    property MainSequence: DNISequence read get_MainSequence;
    property TextAnimationCollection: DNITextAnimationCollection read get_TextAnimationCollection;
  end;

  //-------------namespace: Aspose.Slides----------------
  [DNTypeName('Aspose.Slides.IAudio')]
  DNIAudio = interface(DDN.mscorlib.DNObject)
  ['{6E8E175F-2CBA-4B54-87FF-CEA960CF4FF7}']
  { getters & setters } 

    function get_ContentType: string;
    function get_BinaryData: TArray<Byte>;

  { methods } 

    function GetStream: DDN.mscorlib.DNStream;

  { propertys } 

    property ContentType: string read get_ContentType;
    property BinaryData: TArray<Byte> read get_BinaryData;
  end;

  //-------------namespace: Aspose.Slides----------------
  [DNTypeName('Aspose.Slides.IBackdrop3DScene')]
  DNIBackdrop3DScene = interface(DDN.mscorlib.DNObject)
  ['{5C27C4AF-7B37-4C09-B417-5C7A67687602}']
  { getters & setters } 

    function get_NormalVector: TArray<Single>;
    procedure set_NormalVector(value: TArray<Single>);
    function get_AnchorPoint: TArray<Single>;
    procedure set_AnchorPoint(value: TArray<Single>);
    function get_UpVector: TArray<Single>;
    procedure set_UpVector(value: TArray<Single>);

  { propertys } 

    property NormalVector: TArray<Single> read get_NormalVector write set_NormalVector;
    property AnchorPoint: TArray<Single> read get_AnchorPoint write set_AnchorPoint;
    property UpVector: TArray<Single> read get_UpVector write set_UpVector;
  end;

  //-------------namespace: Aspose.Slides----------------
  [DNTypeName('Aspose.Slides.IBaseHeaderFooterManager')]
  DNIBaseHeaderFooterManager = interface(DDN.mscorlib.DNObject)
  ['{0D92A7DE-5752-4996-BD56-C57DF650ADB5}']
  end;

  //-------------namespace: Aspose.Slides----------------
  [DNTypeName('Aspose.Slides.IBaseSlideHeaderFooterManager')]
  DNIBaseSlideHeaderFooterManager = interface(DNIBaseHeaderFooterManager)
  ['{457C6D4C-DE01-41FC-99BA-A79086D6DDC5}']
  { getters & setters } 

    function get_IsFooterVisible: Boolean;
    function get_IsSlideNumberVisible: Boolean;
    function get_IsDateTimeVisible: Boolean;
    function get_AsIBaseHeaderFooterManager: DNIBaseHeaderFooterManager;

  { methods } 

    procedure SetFooterVisibility(isVisible: Boolean);
    procedure SetSlideNumberVisibility(isVisible: Boolean);
    procedure SetDateTimeVisibility(isVisible: Boolean);
    procedure SetFooterText(text: string);
    procedure SetDateTimeText(text: string);

  { propertys } 

    property IsFooterVisible: Boolean read get_IsFooterVisible;
    property IsSlideNumberVisible: Boolean read get_IsSlideNumberVisible;
    property IsDateTimeVisible: Boolean read get_IsDateTimeVisible;
    property AsIBaseHeaderFooterManager: DNIBaseHeaderFooterManager read get_AsIBaseHeaderFooterManager;
  end;

  //-------------namespace: Aspose.Slides----------------
  [DNTypeName('Aspose.Slides.IBaseHandoutNotesSlideHeaderFooterManag')]
  DNIBaseHandoutNotesSlideHeaderFooterManag = interface(DNIBaseSlideHeaderFooterManager)
  ['{1C2EA713-FEC5-48F7-A22C-660667646AAD}']
  { getters & setters } 

    function get_IsHeaderVisible: Boolean;
    function get_AsIBaseSlideHeaderFooterManager: DNIBaseSlideHeaderFooterManager;

  { methods } 

    procedure SetHeaderVisibility(isVisible: Boolean);
    procedure SetHeaderText(text: string);

  { propertys } 

    property IsHeaderVisible: Boolean read get_IsHeaderVisible;
    property AsIBaseSlideHeaderFooterManager: DNIBaseSlideHeaderFooterManager read get_AsIBaseSlideHeaderFooterManager;
  end;

  //-------------namespace: Aspose.Slides----------------
  [DNTypeName('Aspose.Slides.IMasterHandoutSlideHeaderFooterManager')]
  DNIMasterHandoutSlideHeaderFooterManager = interface(DNIBaseHandoutNotesSlideHeaderFooterManag)
  ['{2942DDD9-D697-49EE-8474-58C7F755C1EF}']
  { getters & setters } 

    function get_AsIBaseHandoutNotesSlideHeaderFooterManag: DNIBaseHandoutNotesSlideHeaderFooterManag;

  { propertys } 

    property AsIBaseHandoutNotesSlideHeaderFooterManag: DNIBaseHandoutNotesSlideHeaderFooterManag read get_AsIBaseHandoutNotesSlideHeaderFooterManag;
  end;

  //-------------namespace: Aspose.Slides----------------
  [DNTypeName('Aspose.Slides.IMasterNotesSlideHeaderFooterManager')]
  DNIMasterNotesSlideHeaderFooterManager = interface(DNIBaseHandoutNotesSlideHeaderFooterManag)
  ['{E3D2AC78-2FB0-437E-BBE2-E0C0953BD06B}']
  { getters & setters } 

    function get_AsIBaseHandoutNotesSlideHeaderFooterManag: DNIBaseHandoutNotesSlideHeaderFooterManag;

  { methods } 

    procedure SetHeaderAndChildHeadersVisibility(isVisible: Boolean);
    procedure SetHeaderAndChildHeadersText(text: string);
    procedure SetFooterAndChildFootersVisibility(isVisible: Boolean);
    procedure SetSlideNumberAndChildSlideNumbersVisibility(isVisible: Boolean);
    procedure SetDateTimeAndChildDateTimesVisibility(isVisible: Boolean);
    procedure SetFooterAndChildFootersText(text: string);
    procedure SetDateTimeAndChildDateTimesText(text: string);

  { propertys } 

    property AsIBaseHandoutNotesSlideHeaderFooterManag: DNIBaseHandoutNotesSlideHeaderFooterManag read get_AsIBaseHandoutNotesSlideHeaderFooterManag;
  end;

  //-------------namespace: Aspose.Slides----------------
  [DNTypeName('Aspose.Slides.INotesSlideHeaderFooterManager')]
  DNINotesSlideHeaderFooterManager = interface(DNIBaseHandoutNotesSlideHeaderFooterManag)
  ['{05C8CF2B-2624-46D1-96A0-1816205C6AB7}']
  { getters & setters } 

    function get_AsIBaseHandoutNotesSlideHeaderFooterManag: DNIBaseHandoutNotesSlideHeaderFooterManag;

  { propertys } 

    property AsIBaseHandoutNotesSlideHeaderFooterManag: DNIBaseHandoutNotesSlideHeaderFooterManag read get_AsIBaseHandoutNotesSlideHeaderFooterManag;
  end;

  //-------------namespace: Aspose.Slides----------------
  [DNTypeName('Aspose.Slides.ILayoutSlideHeaderFooterManager')]
  DNILayoutSlideHeaderFooterManager = interface(DNIBaseSlideHeaderFooterManager)
  ['{8C7ADC5F-192A-4EBA-8644-8FB1D967C3F6}']
  { getters & setters } 

    function get_AsIBaseSlideHeaderFooterManager: DNIBaseSlideHeaderFooterManager;

  { methods } 

    procedure SetFooterAndChildFootersVisibility(isVisible: Boolean);
    procedure SetSlideNumberAndChildSlideNumbersVisibility(isVisible: Boolean);
    procedure SetDateTimeAndChildDateTimesVisibility(isVisible: Boolean);
    procedure SetFooterAndChildFootersText(text: string);
    procedure SetDateTimeAndChildDateTimesText(text: string);

  { propertys } 

    property AsIBaseSlideHeaderFooterManager: DNIBaseSlideHeaderFooterManager read get_AsIBaseSlideHeaderFooterManager;
  end;

  //-------------namespace: Aspose.Slides----------------
  [DNTypeName('Aspose.Slides.IMasterSlideHeaderFooterManager')]
  DNIMasterSlideHeaderFooterManager = interface(DNIBaseSlideHeaderFooterManager)
  ['{A7077E28-9116-486D-9071-39F70CDCC985}']
  { getters & setters } 

    function get_AsIBaseSlideHeaderFooterManager: DNIBaseSlideHeaderFooterManager;

  { methods } 

    procedure SetFooterAndChildFootersVisibility(isVisible: Boolean);
    procedure SetSlideNumberAndChildSlideNumbersVisibility(isVisible: Boolean);
    procedure SetDateTimeAndChildDateTimesVisibility(isVisible: Boolean);
    procedure SetFooterAndChildFootersText(text: string);
    procedure SetDateTimeAndChildDateTimesText(text: string);

  { propertys } 

    property AsIBaseSlideHeaderFooterManager: DNIBaseSlideHeaderFooterManager read get_AsIBaseSlideHeaderFooterManager;
  end;

  //-------------namespace: Aspose.Slides----------------
  [DNTypeName('Aspose.Slides.ISlideHeaderFooterManager')]
  DNISlideHeaderFooterManager = interface(DNIBaseSlideHeaderFooterManager)
  ['{8186C19C-056F-4636-9A0C-D4BE9276E7CF}']
  { getters & setters } 

    function get_AsIBaseSlideHeaderFooterManager: DNIBaseSlideHeaderFooterManager;

  { propertys } 

    property AsIBaseSlideHeaderFooterManager: DNIBaseSlideHeaderFooterManager read get_AsIBaseSlideHeaderFooterManager;
  end;

  //-------------namespace: Aspose.Slides----------------
  [DNTypeName('Aspose.Slides.IPresentationHeaderFooterManager')]
  DNIPresentationHeaderFooterManager = interface(DNIBaseHeaderFooterManager)
  ['{16D0D0C2-2A16-4887-B5CF-777A02AC56B6}']
  { getters & setters } 

    function get_AsIBaseHeaderFooterManager: DNIBaseHeaderFooterManager;

  { methods } 

    procedure SetAllHeadersVisibility(isVisible: Boolean);
    procedure SetAllFootersVisibility(isVisible: Boolean);
    procedure SetAllSlideNumbersVisibility(isVisible: Boolean);
    procedure SetAllDateTimesVisibility(isVisible: Boolean);
    procedure SetAllHeadersText(text: string);
    procedure SetAllFootersText(text: string);
    procedure SetAllDateTimesText(text: string);
    procedure SetVisibilityOnAllTitleSlides(isVisible: Boolean);

  { propertys } 

    property AsIBaseHeaderFooterManager: DNIBaseHeaderFooterManager read get_AsIBaseHeaderFooterManager;
  end;

  //-------------namespace: Aspose.Slides----------------
  [DNTypeName('Aspose.Slides.IBasePortionFormat')]
  DNIBasePortionFormat = interface(DDN.mscorlib.DNObject)
  ['{7E8F5AE0-6F0F-4EF8-A7D8-E8EEE53652E6}']
  { getters & setters } 

    function get_LineFormat: DNILineFormat;
    function get_FillFormat: DNIFillFormat;
    function get_EffectFormat: DNIEffectFormat;
    function get_HighlightColor: DNIColorFormat;
    function get_UnderlineLineFormat: DNILineFormat;
    function get_UnderlineFillFormat: DNIFillFormat;
    function get_FontBold: DNNullableBool;
    procedure set_FontBold(value: DNNullableBool);
    function get_FontItalic: DNNullableBool;
    procedure set_FontItalic(value: DNNullableBool);
    function get_Kumimoji: DNNullableBool;
    procedure set_Kumimoji(value: DNNullableBool);
    function get_NormaliseHeight: DNNullableBool;
    procedure set_NormaliseHeight(value: DNNullableBool);
    function get_ProofDisabled: DNNullableBool;
    procedure set_ProofDisabled(value: DNNullableBool);
    function get_FontUnderline: DNTextUnderlineType;
    procedure set_FontUnderline(value: DNTextUnderlineType);
    function get_TextCapType: DNTextCapType;
    procedure set_TextCapType(value: DNTextCapType);
    function get_StrikethroughType: DNTextStrikethroughType;
    procedure set_StrikethroughType(value: DNTextStrikethroughType);
    function get_IsHardUnderlineLine: DNNullableBool;
    procedure set_IsHardUnderlineLine(value: DNNullableBool);
    function get_IsHardUnderlineFill: DNNullableBool;
    procedure set_IsHardUnderlineFill(value: DNNullableBool);
    function get_FontHeight: Single;
    procedure set_FontHeight(value: Single);
    function get_LatinFont: DNIFontData;
    procedure set_LatinFont(value: DNIFontData);
    function get_EastAsianFont: DNIFontData;
    procedure set_EastAsianFont(value: DNIFontData);
    function get_ComplexScriptFont: DNIFontData;
    procedure set_ComplexScriptFont(value: DNIFontData);
    function get_SymbolFont: DNIFontData;
    procedure set_SymbolFont(value: DNIFontData);
    function get_Escapement: Single;
    procedure set_Escapement(value: Single);
    function get_KerningMinimalSize: Single;
    procedure set_KerningMinimalSize(value: Single);
    function get_LanguageId: string;
    procedure set_LanguageId(value: string);
    function get_AlternativeLanguageId: string;
    procedure set_AlternativeLanguageId(value: string);
    function get_Spacing: Single;
    procedure set_Spacing(value: Single);

  { propertys } 

    property LineFormat: DNILineFormat read get_LineFormat;
    property FillFormat: DNIFillFormat read get_FillFormat;
    property EffectFormat: DNIEffectFormat read get_EffectFormat;
    property HighlightColor: DNIColorFormat read get_HighlightColor;
    property UnderlineLineFormat: DNILineFormat read get_UnderlineLineFormat;
    property UnderlineFillFormat: DNIFillFormat read get_UnderlineFillFormat;
    property FontBold: DNNullableBool read get_FontBold write set_FontBold;
    property FontItalic: DNNullableBool read get_FontItalic write set_FontItalic;
    property Kumimoji: DNNullableBool read get_Kumimoji write set_Kumimoji;
    property NormaliseHeight: DNNullableBool read get_NormaliseHeight write set_NormaliseHeight;
    property ProofDisabled: DNNullableBool read get_ProofDisabled write set_ProofDisabled;
    property FontUnderline: DNTextUnderlineType read get_FontUnderline write set_FontUnderline;
    property TextCapType: DNTextCapType read get_TextCapType write set_TextCapType;
    property StrikethroughType: DNTextStrikethroughType read get_StrikethroughType write set_StrikethroughType;
    property IsHardUnderlineLine: DNNullableBool read get_IsHardUnderlineLine write set_IsHardUnderlineLine;
    property IsHardUnderlineFill: DNNullableBool read get_IsHardUnderlineFill write set_IsHardUnderlineFill;
    property FontHeight: Single read get_FontHeight write set_FontHeight;
    property LatinFont: DNIFontData read get_LatinFont write set_LatinFont;
    property EastAsianFont: DNIFontData read get_EastAsianFont write set_EastAsianFont;
    property ComplexScriptFont: DNIFontData read get_ComplexScriptFont write set_ComplexScriptFont;
    property SymbolFont: DNIFontData read get_SymbolFont write set_SymbolFont;
    property Escapement: Single read get_Escapement write set_Escapement;
    property KerningMinimalSize: Single read get_KerningMinimalSize write set_KerningMinimalSize;
    property LanguageId: string read get_LanguageId write set_LanguageId;
    property AlternativeLanguageId: string read get_AlternativeLanguageId write set_AlternativeLanguageId;
    property Spacing: Single read get_Spacing write set_Spacing;
  end;

  //-------------namespace: Aspose.Slides.Charts----------------
  [DNTypeName('Aspose.Slides.Charts.IChartPortionFormat')]
  DNIChartPortionFormat = interface(DNIBasePortionFormat)
  ['{4390C872-A26E-48BA-86C0-D030CA3E8A51}']
  { getters & setters } 

    function get_AsIBasePortionFormat: DNIBasePortionFormat;

  { propertys } 

    property AsIBasePortionFormat: DNIBasePortionFormat read get_AsIBasePortionFormat;
  end;

  //-------------namespace: Aspose.Slides----------------
  [DNTypeName('Aspose.Slides.IPortionFormat')]
  DNIPortionFormat = interface(DNIBasePortionFormat)
  ['{E777AE35-C0D9-48EF-8074-CA370A9D12F4}']
  { getters & setters } 

    function get_BookmarkId: string;
    procedure set_BookmarkId(value: string);
    function get_SmartTagClean: Boolean;
    procedure set_SmartTagClean(value: Boolean);
    function get_AsIBasePortionFormat: DNIBasePortionFormat;
    function get_AsIHyperlinkContainer: DNIHyperlinkContainer;

  { methods } 

    function GetEffective: DNIPortionFormatEffectiveData;

  { propertys } 

    property BookmarkId: string read get_BookmarkId write set_BookmarkId;
    property SmartTagClean: Boolean read get_SmartTagClean write set_SmartTagClean;
    property AsIBasePortionFormat: DNIBasePortionFormat read get_AsIBasePortionFormat;
    property AsIHyperlinkContainer: DNIHyperlinkContainer read get_AsIHyperlinkContainer;
  end;

  //-------------namespace: Aspose.Slides----------------
  [DNTypeName('Aspose.Slides.IBasePortionFormatEffectiveData')]
  DNIBasePortionFormatEffectiveData = interface(DDN.mscorlib.DNObject)
  ['{6CEA9887-6292-416C-9763-B3D0A6DE79E5}']
  { getters & setters } 

    function get_LineFormat: DNILineFormatEffectiveData;
    function get_FillFormat: DNIFillFormatEffectiveData;
    function get_EffectFormat: DNIEffectFormatEffectiveData;
    function get_HighlightColor: DDN.System.Drawing.DNColor;
    function get_UnderlineLineFormat: DNILineFormatEffectiveData;
    function get_UnderlineFillFormat: DNIFillFormatEffectiveData;
    function get_FontBold: Boolean;
    function get_FontItalic: Boolean;
    function get_Kumimoji: Boolean;
    function get_NormaliseHeight: Boolean;
    function get_ProofDisabled: Boolean;
    function get_FontUnderline: DNTextUnderlineType;
    function get_TextCapType: DNTextCapType;
    function get_StrikethroughType: DNTextStrikethroughType;
    function get_SmartTagClean: Boolean;
    function get_IsHardUnderlineLine: Boolean;
    function get_IsHardUnderlineFill: Boolean;
    function get_FontHeight: Single;
    function get_LatinFont: DNIFontData;
    function get_EastAsianFont: DNIFontData;
    function get_ComplexScriptFont: DNIFontData;
    function get_SymbolFont: DNIFontData;
    function get_Escapement: Single;
    function get_KerningMinimalSize: Single;
    function get_LanguageId: string;
    function get_AlternativeLanguageId: string;
    function get_Spacing: Single;

  { propertys } 

    property LineFormat: DNILineFormatEffectiveData read get_LineFormat;
    property FillFormat: DNIFillFormatEffectiveData read get_FillFormat;
    property EffectFormat: DNIEffectFormatEffectiveData read get_EffectFormat;
    property HighlightColor: DDN.System.Drawing.DNColor read get_HighlightColor;
    property UnderlineLineFormat: DNILineFormatEffectiveData read get_UnderlineLineFormat;
    property UnderlineFillFormat: DNIFillFormatEffectiveData read get_UnderlineFillFormat;
    property FontBold: Boolean read get_FontBold;
    property FontItalic: Boolean read get_FontItalic;
    property Kumimoji: Boolean read get_Kumimoji;
    property NormaliseHeight: Boolean read get_NormaliseHeight;
    property ProofDisabled: Boolean read get_ProofDisabled;
    property FontUnderline: DNTextUnderlineType read get_FontUnderline;
    property TextCapType: DNTextCapType read get_TextCapType;
    property StrikethroughType: DNTextStrikethroughType read get_StrikethroughType;
    property SmartTagClean: Boolean read get_SmartTagClean;
    property IsHardUnderlineLine: Boolean read get_IsHardUnderlineLine;
    property IsHardUnderlineFill: Boolean read get_IsHardUnderlineFill;
    property FontHeight: Single read get_FontHeight;
    property LatinFont: DNIFontData read get_LatinFont;
    property EastAsianFont: DNIFontData read get_EastAsianFont;
    property ComplexScriptFont: DNIFontData read get_ComplexScriptFont;
    property SymbolFont: DNIFontData read get_SymbolFont;
    property Escapement: Single read get_Escapement;
    property KerningMinimalSize: Single read get_KerningMinimalSize;
    property LanguageId: string read get_LanguageId;
    property AlternativeLanguageId: string read get_AlternativeLanguageId;
    property Spacing: Single read get_Spacing;
  end;

  //-------------namespace: Aspose.Slides----------------
  [DNTypeName('Aspose.Slides.IPortionFormatEffectiveData')]
  DNIPortionFormatEffectiveData = interface(DNIBasePortionFormatEffectiveData)
  ['{757186F8-22ED-4C02-83C5-05B5037610B3}']
  { getters & setters } 

    function get_BookmarkId: string;
    function get_HyperlinkClick: DNIHyperlink;
    function get_HyperlinkMouseOver: DNIHyperlink;
    function get_AsIBasePortionFormatEffectiveData: DNIBasePortionFormatEffectiveData;

  { propertys } 

    property BookmarkId: string read get_BookmarkId;
    property HyperlinkClick: DNIHyperlink read get_HyperlinkClick;
    property HyperlinkMouseOver: DNIHyperlink read get_HyperlinkMouseOver;
    property AsIBasePortionFormatEffectiveData: DNIBasePortionFormatEffectiveData read get_AsIBasePortionFormatEffectiveData;
  end;

  //-------------namespace: Aspose.Slides----------------
  [DNTypeName('Aspose.Slides.IBaseShapeLock')]
  DNIBaseShapeLock = interface(DDN.mscorlib.DNObject)
  ['{3A18D0DA-08E0-4B1C-ADCB-D7C5AD0B5279}']
  { getters & setters } 

    function get_NoLocks: Boolean;

  { propertys } 

    property NoLocks: Boolean read get_NoLocks;
  end;

  //-------------namespace: Aspose.Slides----------------
  [DNTypeName('Aspose.Slides.IAutoShapeLock')]
  DNIAutoShapeLock = interface(DNIBaseShapeLock)
  ['{00B2A808-AD69-46D8-9AC0-2A0ABCB17E1E}']
  { getters & setters } 

    function get_GroupingLocked: Boolean;
    procedure set_GroupingLocked(value: Boolean);
    function get_SelectLocked: Boolean;
    procedure set_SelectLocked(value: Boolean);
    function get_RotateLocked: Boolean;
    procedure set_RotateLocked(value: Boolean);
    function get_AspectRatioLocked: Boolean;
    procedure set_AspectRatioLocked(value: Boolean);
    function get_PositionLocked: Boolean;
    procedure set_PositionLocked(value: Boolean);
    function get_SizeLocked: Boolean;
    procedure set_SizeLocked(value: Boolean);
    function get_EditPointsLocked: Boolean;
    procedure set_EditPointsLocked(value: Boolean);
    function get_AdjustHandlesLocked: Boolean;
    procedure set_AdjustHandlesLocked(value: Boolean);
    function get_ArrowheadsLocked: Boolean;
    procedure set_ArrowheadsLocked(value: Boolean);
    function get_ShapeTypeLocked: Boolean;
    procedure set_ShapeTypeLocked(value: Boolean);
    function get_TextLocked: Boolean;
    procedure set_TextLocked(value: Boolean);
    function get_AsIBaseShapeLock: DNIBaseShapeLock;

  { propertys } 

    property GroupingLocked: Boolean read get_GroupingLocked write set_GroupingLocked;
    property SelectLocked: Boolean read get_SelectLocked write set_SelectLocked;
    property RotateLocked: Boolean read get_RotateLocked write set_RotateLocked;
    property AspectRatioLocked: Boolean read get_AspectRatioLocked write set_AspectRatioLocked;
    property PositionLocked: Boolean read get_PositionLocked write set_PositionLocked;
    property SizeLocked: Boolean read get_SizeLocked write set_SizeLocked;
    property EditPointsLocked: Boolean read get_EditPointsLocked write set_EditPointsLocked;
    property AdjustHandlesLocked: Boolean read get_AdjustHandlesLocked write set_AdjustHandlesLocked;
    property ArrowheadsLocked: Boolean read get_ArrowheadsLocked write set_ArrowheadsLocked;
    property ShapeTypeLocked: Boolean read get_ShapeTypeLocked write set_ShapeTypeLocked;
    property TextLocked: Boolean read get_TextLocked write set_TextLocked;
    property AsIBaseShapeLock: DNIBaseShapeLock read get_AsIBaseShapeLock;
  end;

  //-------------namespace: Aspose.Slides----------------
  [DNTypeName('Aspose.Slides.IConnectorLock')]
  DNIConnectorLock = interface(DNIBaseShapeLock)
  ['{E17362A3-F110-4E61-BBA1-10DFBA941394}']
  { getters & setters } 

    function get_GroupingLocked: Boolean;
    procedure set_GroupingLocked(value: Boolean);
    function get_SelectLocked: Boolean;
    procedure set_SelectLocked(value: Boolean);
    function get_RotateLocked: Boolean;
    procedure set_RotateLocked(value: Boolean);
    function get_AspectRatioLocked: Boolean;
    procedure set_AspectRatioLocked(value: Boolean);
    function get_PositionMove: Boolean;
    procedure set_PositionMove(value: Boolean);
    function get_SizeLocked: Boolean;
    procedure set_SizeLocked(value: Boolean);
    function get_EditPointsLocked: Boolean;
    procedure set_EditPointsLocked(value: Boolean);
    function get_AdjustHandlesLocked: Boolean;
    procedure set_AdjustHandlesLocked(value: Boolean);
    function get_ArrowheadsLocked: Boolean;
    procedure set_ArrowheadsLocked(value: Boolean);
    function get_ShapeTypeLocked: Boolean;
    procedure set_ShapeTypeLocked(value: Boolean);
    function get_AsIBaseShapeLock: DNIBaseShapeLock;

  { propertys } 

    property GroupingLocked: Boolean read get_GroupingLocked write set_GroupingLocked;
    property SelectLocked: Boolean read get_SelectLocked write set_SelectLocked;
    property RotateLocked: Boolean read get_RotateLocked write set_RotateLocked;
    property AspectRatioLocked: Boolean read get_AspectRatioLocked write set_AspectRatioLocked;
    property PositionMove: Boolean read get_PositionMove write set_PositionMove;
    property SizeLocked: Boolean read get_SizeLocked write set_SizeLocked;
    property EditPointsLocked: Boolean read get_EditPointsLocked write set_EditPointsLocked;
    property AdjustHandlesLocked: Boolean read get_AdjustHandlesLocked write set_AdjustHandlesLocked;
    property ArrowheadsLocked: Boolean read get_ArrowheadsLocked write set_ArrowheadsLocked;
    property ShapeTypeLocked: Boolean read get_ShapeTypeLocked write set_ShapeTypeLocked;
    property AsIBaseShapeLock: DNIBaseShapeLock read get_AsIBaseShapeLock;
  end;

  //-------------namespace: Aspose.Slides----------------
  [DNTypeName('Aspose.Slides.IGraphicalObjectLock')]
  DNIGraphicalObjectLock = interface(DNIBaseShapeLock)
  ['{F1F6D7AC-6B8C-4EFE-85A8-1FEED15CACBE}']
  { getters & setters } 

    function get_GroupingLocked: Boolean;
    procedure set_GroupingLocked(value: Boolean);
    function get_DrilldownLocked: Boolean;
    procedure set_DrilldownLocked(value: Boolean);
    function get_SelectLocked: Boolean;
    procedure set_SelectLocked(value: Boolean);
    function get_AspectRatioLocked: Boolean;
    procedure set_AspectRatioLocked(value: Boolean);
    function get_PositionLocked: Boolean;
    procedure set_PositionLocked(value: Boolean);
    function get_SizeLocked: Boolean;
    procedure set_SizeLocked(value: Boolean);
    function get_AsIBaseShapeLock: DNIBaseShapeLock;

  { propertys } 

    property GroupingLocked: Boolean read get_GroupingLocked write set_GroupingLocked;
    property DrilldownLocked: Boolean read get_DrilldownLocked write set_DrilldownLocked;
    property SelectLocked: Boolean read get_SelectLocked write set_SelectLocked;
    property AspectRatioLocked: Boolean read get_AspectRatioLocked write set_AspectRatioLocked;
    property PositionLocked: Boolean read get_PositionLocked write set_PositionLocked;
    property SizeLocked: Boolean read get_SizeLocked write set_SizeLocked;
    property AsIBaseShapeLock: DNIBaseShapeLock read get_AsIBaseShapeLock;
  end;

  //-------------namespace: Aspose.Slides----------------
  [DNTypeName('Aspose.Slides.IGroupShapeLock')]
  DNIGroupShapeLock = interface(DNIBaseShapeLock)
  ['{F6DCF748-FCB1-47BA-A49B-F9E395963E9D}']
  { getters & setters } 

    function get_GroupingLocked: Boolean;
    procedure set_GroupingLocked(value: Boolean);
    function get_UngroupingLocked: Boolean;
    procedure set_UngroupingLocked(value: Boolean);
    function get_SelectLocked: Boolean;
    procedure set_SelectLocked(value: Boolean);
    function get_RotationLocked: Boolean;
    procedure set_RotationLocked(value: Boolean);
    function get_AspectRatioLocked: Boolean;
    procedure set_AspectRatioLocked(value: Boolean);
    function get_PositionLocked: Boolean;
    procedure set_PositionLocked(value: Boolean);
    function get_SizeLocked: Boolean;
    procedure set_SizeLocked(value: Boolean);
    function get_AsIBaseShapeLock: DNIBaseShapeLock;

  { propertys } 

    property GroupingLocked: Boolean read get_GroupingLocked write set_GroupingLocked;
    property UngroupingLocked: Boolean read get_UngroupingLocked write set_UngroupingLocked;
    property SelectLocked: Boolean read get_SelectLocked write set_SelectLocked;
    property RotationLocked: Boolean read get_RotationLocked write set_RotationLocked;
    property AspectRatioLocked: Boolean read get_AspectRatioLocked write set_AspectRatioLocked;
    property PositionLocked: Boolean read get_PositionLocked write set_PositionLocked;
    property SizeLocked: Boolean read get_SizeLocked write set_SizeLocked;
    property AsIBaseShapeLock: DNIBaseShapeLock read get_AsIBaseShapeLock;
  end;

  //-------------namespace: Aspose.Slides----------------
  [DNTypeName('Aspose.Slides.IPictureFrameLock')]
  DNIPictureFrameLock = interface(DNIBaseShapeLock)
  ['{571955F4-210F-456B-A171-B416757BD2E2}']
  { getters & setters } 

    function get_GroupingLocked: Boolean;
    procedure set_GroupingLocked(value: Boolean);
    function get_SelectLocked: Boolean;
    procedure set_SelectLocked(value: Boolean);
    function get_RotationLocked: Boolean;
    procedure set_RotationLocked(value: Boolean);
    function get_AspectRatioLocked: Boolean;
    procedure set_AspectRatioLocked(value: Boolean);
    function get_PositionLocked: Boolean;
    procedure set_PositionLocked(value: Boolean);
    function get_SizeLocked: Boolean;
    procedure set_SizeLocked(value: Boolean);
    function get_EditPointsLocked: Boolean;
    procedure set_EditPointsLocked(value: Boolean);
    function get_AdjustHandlesLocked: Boolean;
    procedure set_AdjustHandlesLocked(value: Boolean);
    function get_ArrowheadsLocked: Boolean;
    procedure set_ArrowheadsLocked(value: Boolean);
    function get_ShapeTypeLocked: Boolean;
    procedure set_ShapeTypeLocked(value: Boolean);
    function get_CropLocked: Boolean;
    procedure set_CropLocked(value: Boolean);
    function get_AsIBaseShapeLock: DNIBaseShapeLock;

  { propertys } 

    property GroupingLocked: Boolean read get_GroupingLocked write set_GroupingLocked;
    property SelectLocked: Boolean read get_SelectLocked write set_SelectLocked;
    property RotationLocked: Boolean read get_RotationLocked write set_RotationLocked;
    property AspectRatioLocked: Boolean read get_AspectRatioLocked write set_AspectRatioLocked;
    property PositionLocked: Boolean read get_PositionLocked write set_PositionLocked;
    property SizeLocked: Boolean read get_SizeLocked write set_SizeLocked;
    property EditPointsLocked: Boolean read get_EditPointsLocked write set_EditPointsLocked;
    property AdjustHandlesLocked: Boolean read get_AdjustHandlesLocked write set_AdjustHandlesLocked;
    property ArrowheadsLocked: Boolean read get_ArrowheadsLocked write set_ArrowheadsLocked;
    property ShapeTypeLocked: Boolean read get_ShapeTypeLocked write set_ShapeTypeLocked;
    property CropLocked: Boolean read get_CropLocked write set_CropLocked;
    property AsIBaseShapeLock: DNIBaseShapeLock read get_AsIBaseShapeLock;
  end;

  //-------------namespace: Aspose.Slides----------------
  [DNTypeName('Aspose.Slides.IBaseTableFormatEffectiveData')]
  DNIBaseTableFormatEffectiveData = interface(DDN.mscorlib.DNObject)
  ['{C731ADBF-C8FD-4FCF-B16E-92916F51B002}']
  { getters & setters } 

    function get_FillFormat: DNIFillFormatEffectiveData;
    function get_BorderLeft: DNILineFormatEffectiveData;
    function get_BorderTop: DNILineFormatEffectiveData;
    function get_BorderRight: DNILineFormatEffectiveData;
    function get_BorderBottom: DNILineFormatEffectiveData;
    function get_BorderDiagonalDown: DNILineFormatEffectiveData;
    function get_BorderDiagonalUp: DNILineFormatEffectiveData;

  { propertys } 

    property FillFormat: DNIFillFormatEffectiveData read get_FillFormat;
    property BorderLeft: DNILineFormatEffectiveData read get_BorderLeft;
    property BorderTop: DNILineFormatEffectiveData read get_BorderTop;
    property BorderRight: DNILineFormatEffectiveData read get_BorderRight;
    property BorderBottom: DNILineFormatEffectiveData read get_BorderBottom;
    property BorderDiagonalDown: DNILineFormatEffectiveData read get_BorderDiagonalDown;
    property BorderDiagonalUp: DNILineFormatEffectiveData read get_BorderDiagonalUp;
  end;

  //-------------namespace: Aspose.Slides----------------
  [DNTypeName('Aspose.Slides.ICellFormatEffectiveData')]
  DNICellFormatEffectiveData = interface(DNIBaseTableFormatEffectiveData)
  ['{2DC4DCC0-4D9E-4792-8622-25F242BA66D7}']
  { getters & setters } 

    function get_AsIBaseTableFormatEffectiveData: DNIBaseTableFormatEffectiveData;

  { propertys } 

    property AsIBaseTableFormatEffectiveData: DNIBaseTableFormatEffectiveData read get_AsIBaseTableFormatEffectiveData;
  end;

  //-------------namespace: Aspose.Slides----------------
  [DNTypeName('Aspose.Slides.IColumnFormatEffectiveData')]
  DNIColumnFormatEffectiveData = interface(DNIBaseTableFormatEffectiveData)
  ['{D76E7AE3-D9C3-4A65-B669-45CF8197E2EA}']
  { getters & setters } 

    function get_AsIBaseTableFormatEffectiveData: DNIBaseTableFormatEffectiveData;

  { propertys } 

    property AsIBaseTableFormatEffectiveData: DNIBaseTableFormatEffectiveData read get_AsIBaseTableFormatEffectiveData;
  end;

  //-------------namespace: Aspose.Slides----------------
  [DNTypeName('Aspose.Slides.IRowFormatEffectiveData')]
  DNIRowFormatEffectiveData = interface(DNIBaseTableFormatEffectiveData)
  ['{4002837D-005C-4E9E-9682-3852B9CC26B9}']
  { getters & setters } 

    function get_AsIBaseTableFormatEffectiveData: DNIBaseTableFormatEffectiveData;

  { propertys } 

    property AsIBaseTableFormatEffectiveData: DNIBaseTableFormatEffectiveData read get_AsIBaseTableFormatEffectiveData;
  end;

  //-------------namespace: Aspose.Slides----------------
  [DNTypeName('Aspose.Slides.ITableFormatEffectiveData')]
  DNITableFormatEffectiveData = interface(DNIBaseTableFormatEffectiveData)
  ['{D6C56FD4-0213-4BE0-B346-5E385BD5BBBD}']
  { getters & setters } 

    function get_AsIBaseTableFormatEffectiveData: DNIBaseTableFormatEffectiveData;

  { propertys } 

    property AsIBaseTableFormatEffectiveData: DNIBaseTableFormatEffectiveData read get_AsIBaseTableFormatEffectiveData;
  end;

  //-------------namespace: Aspose.Slides----------------
  [DNTypeName('Aspose.Slides.IBlobManagementOptions')]
  DNIBlobManagementOptions = interface(DDN.mscorlib.DNObject)
  ['{B5E42A1C-0D87-4DB7-BA43-5F5ACFEB8290}']
  { getters & setters } 

    function get_PresentationLockingBehavior: DNPresentationLockingBehavior;
    procedure set_PresentationLockingBehavior(value: DNPresentationLockingBehavior);
    function get_IsTemporaryFilesAllowed: Boolean;
    procedure set_IsTemporaryFilesAllowed(value: Boolean);
    function get_TempFilesRootPath: string;
    procedure set_TempFilesRootPath(value: string);
    function get_MaxBlobsBytesInMemory: UInt64;
    procedure set_MaxBlobsBytesInMemory(value: UInt64);

  { propertys } 

    property PresentationLockingBehavior: DNPresentationLockingBehavior read get_PresentationLockingBehavior write set_PresentationLockingBehavior;
    property IsTemporaryFilesAllowed: Boolean read get_IsTemporaryFilesAllowed write set_IsTemporaryFilesAllowed;
    property TempFilesRootPath: string read get_TempFilesRootPath write set_TempFilesRootPath;
    property MaxBlobsBytesInMemory: UInt64 read get_MaxBlobsBytesInMemory write set_MaxBlobsBytesInMemory;
  end;

  //-------------namespace: Aspose.Slides----------------
  [DNTypeName('Aspose.Slides.IBulkTextFormattable')]
  DNIBulkTextFormattable = interface(DDN.mscorlib.DNObject)
  ['{FEC9B79B-DBD7-483A-821F-A8CBA03250B2}']
  { methods } 

    procedure SetTextFormat(source: DNIPortionFormat); overload;
    procedure SetTextFormat(source: DNIParagraphFormat); overload;
    procedure SetTextFormat(source: DNITextFrameFormat); overload;

  end;

  //-------------namespace: Aspose.Slides----------------
  [DNTypeName('Aspose.Slides.IBulletFormat')]
  DNIBulletFormat = interface(DDN.mscorlib.DNObject)
  ['{E2F4E958-4B82-4510-8437-967FB948E1E8}']
  { getters & setters } 

    function get_Type: DNBulletType;
    procedure set_Type(value: DNBulletType);
    function get_Char: Char;
    procedure set_Char(value: Char);
    function get_Font: DNIFontData;
    procedure set_Font(value: DNIFontData);
    function get_Height: Single;
    procedure set_Height(value: Single);
    function get_Color: DNIColorFormat;
    function get_Picture: DNISlidesPicture;
    function get_NumberedBulletStartWith: Int16;
    procedure set_NumberedBulletStartWith(value: Int16);
    function get_NumberedBulletStyle: DNNumberedBulletStyle;
    procedure set_NumberedBulletStyle(value: DNNumberedBulletStyle);
    function get_IsBulletHardColor: DNNullableBool;
    procedure set_IsBulletHardColor(value: DNNullableBool);
    function get_IsBulletHardFont: DNNullableBool;
    procedure set_IsBulletHardFont(value: DNNullableBool);

  { methods } 

    procedure ApplyDefaultParagraphIndentsShifts;
    function GetEffective: DNIBulletFormatEffectiveData;

  { propertys } 

    property &Type: DNBulletType read get_Type write set_Type;
    property Char: Char read get_Char write set_Char;
    property Font: DNIFontData read get_Font write set_Font;
    property Height: Single read get_Height write set_Height;
    property Color: DNIColorFormat read get_Color;
    property Picture: DNISlidesPicture read get_Picture;
    property NumberedBulletStartWith: Int16 read get_NumberedBulletStartWith write set_NumberedBulletStartWith;
    property NumberedBulletStyle: DNNumberedBulletStyle read get_NumberedBulletStyle write set_NumberedBulletStyle;
    property IsBulletHardColor: DNNullableBool read get_IsBulletHardColor write set_IsBulletHardColor;
    property IsBulletHardFont: DNNullableBool read get_IsBulletHardFont write set_IsBulletHardFont;
  end;

  //-------------namespace: Aspose.Slides----------------
  [DNTypeName('Aspose.Slides.IBulletFormatEffectiveData')]
  DNIBulletFormatEffectiveData = interface(DDN.mscorlib.DNObject)
  ['{22455686-05FD-47D4-ACAC-DD583B84D55C}']
  { getters & setters } 

    function get_Type: DNBulletType;
    function get_Char: Char;
    function get_ActualBulletValue: string;
    function get_Font: DNIFontData;
    function get_Height: Single;
    function get_NumberedBulletStartWith: Int16;
    function get_NumberedBulletStyle: DNNumberedBulletStyle;
    function get_Color: DDN.System.Drawing.DNColor;
    function get_IsBulletHardColor: Boolean;
    function get_IsBulletHardFont: Boolean;
    function get_Picture: DNIPictureEffectiveData;
    function get_FillFormat: DNIFillFormatEffectiveData;

  { propertys } 

    property &Type: DNBulletType read get_Type;
    property Char: Char read get_Char;
    property ActualBulletValue: string read get_ActualBulletValue;
    property Font: DNIFontData read get_Font;
    property Height: Single read get_Height;
    property NumberedBulletStartWith: Int16 read get_NumberedBulletStartWith;
    property NumberedBulletStyle: DNNumberedBulletStyle read get_NumberedBulletStyle;
    property Color: DDN.System.Drawing.DNColor read get_Color;
    property IsBulletHardColor: Boolean read get_IsBulletHardColor;
    property IsBulletHardFont: Boolean read get_IsBulletHardFont;
    property Picture: DNIPictureEffectiveData read get_Picture;
    property FillFormat: DNIFillFormatEffectiveData read get_FillFormat;
  end;

  //-------------namespace: Aspose.Slides----------------
  [DNTypeName('Aspose.Slides.ICamera')]
  DNICamera = interface(DDN.mscorlib.DNObject)
  ['{E8EDABD0-0E1D-442F-9349-28B28A7D2741}']
  { getters & setters } 

    function get_CameraType: DNCameraPresetType;
    procedure set_CameraType(value: DNCameraPresetType);
    function get_FieldOfViewAngle: Single;
    procedure set_FieldOfViewAngle(value: Single);
    function get_Zoom: Single;
    procedure set_Zoom(value: Single);

  { methods } 

    procedure SetRotation(latitude: Single; longitude: Single; revolution: Single);
    function GetRotation: TArray<Single>;

  { propertys } 

    property CameraType: DNCameraPresetType read get_CameraType write set_CameraType;
    property FieldOfViewAngle: Single read get_FieldOfViewAngle write set_FieldOfViewAngle;
    property Zoom: Single read get_Zoom write set_Zoom;
  end;

  //-------------namespace: Aspose.Slides----------------
  [DNTypeName('Aspose.Slides.ICameraEffectiveData')]
  DNICameraEffectiveData = interface(DDN.mscorlib.DNObject)
  ['{45B98657-476A-4BE7-9C3E-4A1805A483E4}']
  { getters & setters } 

    function get_CameraType: DNCameraPresetType;
    function get_FieldOfViewAngle: Single;
    function get_Zoom: Single;

  { methods } 

    function GetRotation: TArray<Single>;

  { propertys } 

    property CameraType: DNCameraPresetType read get_CameraType;
    property FieldOfViewAngle: Single read get_FieldOfViewAngle;
    property Zoom: Single read get_Zoom;
  end;

  //-------------namespace: Aspose.Slides----------------
  [DNTypeName('Aspose.Slides.ICellFormat')]
  DNICellFormat = interface(DDN.mscorlib.DNObject)
  ['{5DEB8252-0F1C-4195-BB98-1CBBF7F6AE30}']
  { getters & setters } 

    function get_FillFormat: DNIFillFormat;
    function get_BorderLeft: DNILineFormat;
    function get_BorderTop: DNILineFormat;
    function get_BorderRight: DNILineFormat;
    function get_BorderBottom: DNILineFormat;
    function get_BorderDiagonalDown: DNILineFormat;
    function get_BorderDiagonalUp: DNILineFormat;

  { methods } 

    function GetEffective: DNICellFormatEffectiveData;

  { propertys } 

    property FillFormat: DNIFillFormat read get_FillFormat;
    property BorderLeft: DNILineFormat read get_BorderLeft;
    property BorderTop: DNILineFormat read get_BorderTop;
    property BorderRight: DNILineFormat read get_BorderRight;
    property BorderBottom: DNILineFormat read get_BorderBottom;
    property BorderDiagonalDown: DNILineFormat read get_BorderDiagonalDown;
    property BorderDiagonalUp: DNILineFormat read get_BorderDiagonalUp;
  end;

  //-------------namespace: Aspose.Slides----------------
  [DNTypeName('Aspose.Slides.IColorOperation')]
  DNIColorOperation = interface(DDN.mscorlib.DNObject)
  ['{D9E1C445-A827-40A7-B093-D301DBAF0130}']
  { getters & setters } 

    function get_OperationType: DNColorTransformOperation;
    function get_Parameter: Single;

  { propertys } 

    property OperationType: DNColorTransformOperation read get_OperationType;
    property Parameter: Single read get_Parameter;
  end;

  //-------------namespace: Aspose.Slides----------------
  [DNTypeName('Aspose.Slides.IColumnFormat')]
  DNIColumnFormat = interface(DDN.mscorlib.DNObject)
  ['{97013C96-3D09-4242-927A-5ED723C271B1}']
  { methods } 

    function GetEffective: DNIColumnFormatEffectiveData;

  end;

  //-------------namespace: Aspose.Slides----------------
  [DNTypeName('Aspose.Slides.IComment')]
  DNIComment = interface(DDN.mscorlib.DNObject)
  ['{B0A925DF-72CE-4603-90BD-58B5AB6BB967}']
  { getters & setters } 

    function get_Text: string;
    procedure set_Text(value: string);
    function get_CreatedTime: DDN.mscorlib.DNDateTime;
    procedure set_CreatedTime(value: DDN.mscorlib.DNDateTime);
    function get_Slide: DNISlide;
    function get_Author: DNICommentAuthor;
    function get_Position: DDN.System.Drawing.DNPointF;
    procedure set_Position(value: DDN.System.Drawing.DNPointF);
    function get_ParentComment: DNIComment;
    procedure set_ParentComment(value: DNIComment);

  { methods } 

    procedure Remove;

  { propertys } 

    property Text: string read get_Text write set_Text;
    property CreatedTime: DDN.mscorlib.DNDateTime read get_CreatedTime write set_CreatedTime;
    property Slide: DNISlide read get_Slide;
    property Author: DNICommentAuthor read get_Author;
    property Position: DDN.System.Drawing.DNPointF read get_Position write set_Position;
    property ParentComment: DNIComment read get_ParentComment write set_ParentComment;
  end;

  //-------------namespace: Aspose.Slides----------------
  [DNTypeName('Aspose.Slides.ICommentAuthor')]
  DNICommentAuthor = interface(DDN.mscorlib.DNObject)
  ['{8E007050-0F50-42B8-B5D6-0DC8289D12E2}']
  { getters & setters } 

    function get_Name: string;
    procedure set_Name(value: string);
    function get_Initials: string;
    procedure set_Initials(value: string);
    function get_Comments: DNICommentCollection;

  { methods } 

    procedure Remove;

  { propertys } 

    property Name: string read get_Name write set_Name;
    property Initials: string read get_Initials write set_Initials;
    property Comments: DNICommentCollection read get_Comments;
  end;

  //-------------namespace: Aspose.Slides----------------
  [DNTypeName('Aspose.Slides.ICommonSlideViewProperties')]
  DNICommonSlideViewProperties = interface(DDN.mscorlib.DNObject)
  ['{3D691F28-8346-4274-B17F-92DF3D694A74}']
  { getters & setters } 

    function get_Scale: Int32;
    procedure set_Scale(value: Int32);
    function get_VariableScale: Boolean;
    procedure set_VariableScale(value: Boolean);

  { propertys } 

    property Scale: Int32 read get_Scale write set_Scale;
    property VariableScale: Boolean read get_VariableScale write set_VariableScale;
  end;

  //-------------namespace: Aspose.Slides----------------
  [DNTypeName('Aspose.Slides.ICustomData')]
  DNICustomData = interface(DDN.mscorlib.DNObject)
  ['{DA14715A-8BCF-44BD-9A26-9CC4600E956F}']
  { getters & setters } 

    function get_Tags: DNITagCollection;
    function get_CustomXmlParts: DNICustomXmlPartCollection;

  { propertys } 

    property Tags: DNITagCollection read get_Tags;
    property CustomXmlParts: DNICustomXmlPartCollection read get_CustomXmlParts;
  end;

  //-------------namespace: Aspose.Slides----------------
  [DNTypeName('Aspose.Slides.ICustomXmlPart')]
  DNICustomXmlPart = interface(DDN.mscorlib.DNObject)
  ['{664B786F-0236-4617-A999-105A5418F0FD}']
  { getters & setters } 

    function get_XmlAsString: string;
    procedure set_XmlAsString(value: string);
    function get_XmlData: TArray<Byte>;
    procedure set_XmlData(value: TArray<Byte>);
    function get_ItemId: DDN.mscorlib.DNGuid;
    procedure set_ItemId(value: DDN.mscorlib.DNGuid);
    function get_NamespaceSchemas: TArray<string>;

  { methods } 

    procedure Remove;

  { propertys } 

    property XmlAsString: string read get_XmlAsString write set_XmlAsString;
    property XmlData: TArray<Byte> read get_XmlData write set_XmlData;
    property ItemId: DDN.mscorlib.DNGuid read get_ItemId write set_ItemId;
    property NamespaceSchemas: TArray<string> read get_NamespaceSchemas;
  end;

  //-------------namespace: Aspose.Slides----------------
  [DNTypeName('Aspose.Slides.IDigitalSignature')]
  DNIDigitalSignature = interface(DDN.mscorlib.DNObject)
  ['{90381A5B-4353-4400-8CB9-1D5B1EC81E16}']
  { getters & setters } 

    function get_Certificate: DDN.System.DNX509Certificate2;
    function get_IsValid: Boolean;
    function get_SignTime: DDN.mscorlib.DNDateTime;
    function get_Comments: string;
    procedure set_Comments(value: string);

  { propertys } 

    property Certificate: DDN.System.DNX509Certificate2 read get_Certificate;
    property IsValid: Boolean read get_IsValid;
    property SignTime: DDN.mscorlib.DNDateTime read get_SignTime;
    property Comments: string read get_Comments write set_Comments;
  end;

  //-------------namespace: Aspose.Slides----------------
  [DNTypeName('Aspose.Slides.IDocumentProperties')]
  DNIDocumentProperties = interface(DDN.mscorlib.DNObject)
  ['{C509302A-0FD1-4187-B1E6-BCB1C3776B4E}']
  { getters & setters } 

    function get_AppVersion: string;
    function get_NameOfApplication: string;
    procedure set_NameOfApplication(value: string);
    function get_Company: string;
    procedure set_Company(value: string);
    function get_Manager: string;
    procedure set_Manager(value: string);
    function get_PresentationFormat: string;
    procedure set_PresentationFormat(value: string);
    function get_SharedDoc: Boolean;
    procedure set_SharedDoc(value: Boolean);
    function get_ApplicationTemplate: string;
    procedure set_ApplicationTemplate(value: string);
    function get_TotalEditingTime: DDN.mscorlib.DNTimeSpan;
    procedure set_TotalEditingTime(value: DDN.mscorlib.DNTimeSpan);
    function get_Title: string;
    procedure set_Title(value: string);
    function get_Subject: string;
    procedure set_Subject(value: string);
    function get_Author: string;
    procedure set_Author(value: string);
    function get_Keywords: string;
    procedure set_Keywords(value: string);
    function get_Comments: string;
    procedure set_Comments(value: string);
    function get_Category: string;
    procedure set_Category(value: string);
    function get_CreatedTime: DDN.mscorlib.DNDateTime;
    procedure set_CreatedTime(value: DDN.mscorlib.DNDateTime);
    function get_LastSavedTime: DDN.mscorlib.DNDateTime;
    procedure set_LastSavedTime(value: DDN.mscorlib.DNDateTime);
    function get_LastPrinted: DDN.mscorlib.DNDateTime;
    procedure set_LastPrinted(value: DDN.mscorlib.DNDateTime);
    function get_LastSavedBy: string;
    procedure set_LastSavedBy(value: string);
    function get_RevisionNumber: Int32;
    procedure set_RevisionNumber(value: Int32);
    function get_ContentStatus: string;
    procedure set_ContentStatus(value: string);
    function get_ContentType: string;
    procedure set_ContentType(value: string);
    function get_HyperlinkBase: string;
    procedure set_HyperlinkBase(value: string);
    function get_CountOfCustomProperties: Int32;
    function get_Item(name: string): DDN.mscorlib.DNObject;
    procedure set_Item(name: string; value: DDN.mscorlib.DNObject);

  { methods } 

    function GetCustomPropertyName(index: Int32): string;
    function RemoveCustomProperty(name: string): Boolean;
    function ContainsCustomProperty(name: string): Boolean;
    procedure ClearCustomProperties;
    procedure ClearBuiltInProperties;
    procedure GetCustomPropertyValue(name: string; out value: Boolean); overload;
    procedure GetCustomPropertyValue(name: string; out value: Int32); overload;
    procedure GetCustomPropertyValue(name: string; out value: DDN.mscorlib.DNDateTime); overload;
    procedure GetCustomPropertyValue(name: string; out value: string); overload;
    procedure GetCustomPropertyValue(name: string; out value: Single); overload;
    procedure GetCustomPropertyValue(name: string; out value: Double); overload;
    procedure SetCustomPropertyValue(name: string; value: Boolean); overload;
    procedure SetCustomPropertyValue(name: string; value: Int32); overload;
    procedure SetCustomPropertyValue(name: string; value: DDN.mscorlib.DNDateTime); overload;
    procedure SetCustomPropertyValue(name: string; value: string); overload;
    procedure SetCustomPropertyValue(name: string; value: Single); overload;
    procedure SetCustomPropertyValue(name: string; value: Double); overload;

  { propertys } 

    property AppVersion: string read get_AppVersion;
    property NameOfApplication: string read get_NameOfApplication write set_NameOfApplication;
    property Company: string read get_Company write set_Company;
    property Manager: string read get_Manager write set_Manager;
    property PresentationFormat: string read get_PresentationFormat write set_PresentationFormat;
    property SharedDoc: Boolean read get_SharedDoc write set_SharedDoc;
    property ApplicationTemplate: string read get_ApplicationTemplate write set_ApplicationTemplate;
    property TotalEditingTime: DDN.mscorlib.DNTimeSpan read get_TotalEditingTime write set_TotalEditingTime;
    property Title: string read get_Title write set_Title;
    property Subject: string read get_Subject write set_Subject;
    property Author: string read get_Author write set_Author;
    property Keywords: string read get_Keywords write set_Keywords;
    property Comments: string read get_Comments write set_Comments;
    property Category: string read get_Category write set_Category;
    property CreatedTime: DDN.mscorlib.DNDateTime read get_CreatedTime write set_CreatedTime;
    property LastSavedTime: DDN.mscorlib.DNDateTime read get_LastSavedTime write set_LastSavedTime;
    property LastPrinted: DDN.mscorlib.DNDateTime read get_LastPrinted write set_LastPrinted;
    property LastSavedBy: string read get_LastSavedBy write set_LastSavedBy;
    property RevisionNumber: Int32 read get_RevisionNumber write set_RevisionNumber;
    property ContentStatus: string read get_ContentStatus write set_ContentStatus;
    property ContentType: string read get_ContentType write set_ContentType;
    property HyperlinkBase: string read get_HyperlinkBase write set_HyperlinkBase;
    property CountOfCustomProperties: Int32 read get_CountOfCustomProperties;
    property Item[name: string]: DDN.mscorlib.DNObject read get_Item write set_Item; default;
  end;

  //-------------namespace: Aspose.Slides----------------
  [DNTypeName('Aspose.Slides.IEffectParamSource')]
  DNIEffectParamSource = interface(DDN.mscorlib.DNObject)
  ['{09895414-47E4-492A-B121-E78DF3D7BD46}']
  end;

  //-------------namespace: Aspose.Slides----------------
  [DNTypeName('Aspose.Slides.IEffectFormat')]
  DNIEffectFormat = interface(DNIEffectParamSource)
  ['{1B7B9DDA-82CF-44D4-B422-DB2DC70B9B55}']
  { getters & setters } 

    function get_IsNoEffects: Boolean;
    function get_BlurEffect: DNIBlur;
    procedure set_BlurEffect(value: DNIBlur);
    function get_FillOverlayEffect: DNIFillOverlay;
    procedure set_FillOverlayEffect(value: DNIFillOverlay);
    function get_GlowEffect: DNIGlow;
    procedure set_GlowEffect(value: DNIGlow);
    function get_InnerShadowEffect: DNIInnerShadow;
    procedure set_InnerShadowEffect(value: DNIInnerShadow);
    function get_OuterShadowEffect: DNIOuterShadow;
    procedure set_OuterShadowEffect(value: DNIOuterShadow);
    function get_PresetShadowEffect: DNIPresetShadow;
    procedure set_PresetShadowEffect(value: DNIPresetShadow);
    function get_ReflectionEffect: DNIReflection;
    procedure set_ReflectionEffect(value: DNIReflection);
    function get_SoftEdgeEffect: DNISoftEdge;
    procedure set_SoftEdgeEffect(value: DNISoftEdge);
    function get_AsIEffectParamSource: DNIEffectParamSource;

  { methods } 

    procedure SetBlurEffect(radius: Double; grow: Boolean);
    procedure EnableFillOverlayEffect;
    procedure EnableGlowEffect;
    procedure EnableInnerShadowEffect;
    procedure EnableOuterShadowEffect;
    procedure EnablePresetShadowEffect;
    procedure EnableReflectionEffect;
    procedure EnableSoftEdgeEffect;
    procedure DisableBlurEffect;
    procedure DisableFillOverlayEffect;
    procedure DisableGlowEffect;
    procedure DisableInnerShadowEffect;
    procedure DisableOuterShadowEffect;
    procedure DisablePresetShadowEffect;
    procedure DisableReflectionEffect;
    procedure DisableSoftEdgeEffect;
    function GetEffective: DNIEffectFormatEffectiveData;

  { propertys } 

    property IsNoEffects: Boolean read get_IsNoEffects;
    property BlurEffect: DNIBlur read get_BlurEffect write set_BlurEffect;
    property FillOverlayEffect: DNIFillOverlay read get_FillOverlayEffect write set_FillOverlayEffect;
    property GlowEffect: DNIGlow read get_GlowEffect write set_GlowEffect;
    property InnerShadowEffect: DNIInnerShadow read get_InnerShadowEffect write set_InnerShadowEffect;
    property OuterShadowEffect: DNIOuterShadow read get_OuterShadowEffect write set_OuterShadowEffect;
    property PresetShadowEffect: DNIPresetShadow read get_PresetShadowEffect write set_PresetShadowEffect;
    property ReflectionEffect: DNIReflection read get_ReflectionEffect write set_ReflectionEffect;
    property SoftEdgeEffect: DNISoftEdge read get_SoftEdgeEffect write set_SoftEdgeEffect;
    property AsIEffectParamSource: DNIEffectParamSource read get_AsIEffectParamSource;
  end;

  //-------------namespace: Aspose.Slides----------------
  [DNTypeName('Aspose.Slides.IEffectFormatEffectiveData')]
  DNIEffectFormatEffectiveData = interface(DNIEffectParamSource)
  ['{62030CD4-C192-492A-8500-2053C3E34B9B}']
  { getters & setters } 

    function get_IsNoEffects: Boolean;
    function get_BlurEffect: DNIBlurEffectiveData;
    function get_FillOverlayEffect: DNIFillOverlayEffectiveData;
    function get_GlowEffect: DNIGlowEffectiveData;
    function get_InnerShadowEffect: DNIInnerShadowEffectiveData;
    function get_OuterShadowEffect: DNIOuterShadowEffectiveData;
    function get_PresetShadowEffect: DNIPresetShadowEffectiveData;
    function get_ReflectionEffect: DNIReflectionEffectiveData;
    function get_SoftEdgeEffect: DNISoftEdgeEffectiveData;
    function get_AsIEffectParamSource: DNIEffectParamSource;

  { propertys } 

    property IsNoEffects: Boolean read get_IsNoEffects;
    property BlurEffect: DNIBlurEffectiveData read get_BlurEffect;
    property FillOverlayEffect: DNIFillOverlayEffectiveData read get_FillOverlayEffect;
    property GlowEffect: DNIGlowEffectiveData read get_GlowEffect;
    property InnerShadowEffect: DNIInnerShadowEffectiveData read get_InnerShadowEffect;
    property OuterShadowEffect: DNIOuterShadowEffectiveData read get_OuterShadowEffect;
    property PresetShadowEffect: DNIPresetShadowEffectiveData read get_PresetShadowEffect;
    property ReflectionEffect: DNIReflectionEffectiveData read get_ReflectionEffect;
    property SoftEdgeEffect: DNISoftEdgeEffectiveData read get_SoftEdgeEffect;
    property AsIEffectParamSource: DNIEffectParamSource read get_AsIEffectParamSource;
  end;

  //-------------namespace: Aspose.Slides----------------
  [DNTypeName('Aspose.Slides.IFieldType')]
  DNIFieldType = interface(DDN.mscorlib.DNObject)
  ['{AE5D835A-BB03-498F-9F11-80E5B64E5E78}']
  { getters & setters } 

    function get_InternalString: string;
    procedure set_InternalString(value: string);

  { propertys } 

    property InternalString: string read get_InternalString write set_InternalString;
  end;

  //-------------namespace: Aspose.Slides----------------
  [DNTypeName('Aspose.Slides.IFillParamSource')]
  DNIFillParamSource = interface(DDN.mscorlib.DNObject)
  ['{824F901B-F649-4B0D-87C1-49DE1F68599A}']
  end;

  //-------------namespace: Aspose.Slides----------------
  [DNTypeName('Aspose.Slides.IBackgroundEffectiveData')]
  DNIBackgroundEffectiveData = interface(DNIFillParamSource)
  ['{8994E003-95DF-4211-BDF7-72BB8A789495}']
  { getters & setters } 

    function get_FillFormat: DNIFillFormatEffectiveData;
    function get_EffectFormat: DNIEffectFormatEffectiveData;
    function get_AsIFillParamSource: DNIFillParamSource;

  { propertys } 

    property FillFormat: DNIFillFormatEffectiveData read get_FillFormat;
    property EffectFormat: DNIEffectFormatEffectiveData read get_EffectFormat;
    property AsIFillParamSource: DNIFillParamSource read get_AsIFillParamSource;
  end;

  //-------------namespace: Aspose.Slides----------------
  [DNTypeName('Aspose.Slides.IColorFormat')]
  DNIColorFormat = interface(DNIFillParamSource)
  ['{8BB9788C-86C4-405A-B148-164CA233B4A5}']
  { getters & setters } 

    function get_ColorType: DNColorType;
    procedure set_ColorType(value: DNColorType);
    function get_Color: DDN.System.Drawing.DNColor;
    procedure set_Color(value: DDN.System.Drawing.DNColor);
    function get_PresetColor: DNPresetColor;
    procedure set_PresetColor(value: DNPresetColor);
    function get_SystemColor: DNSystemColor;
    procedure set_SystemColor(value: DNSystemColor);
    function get_SchemeColor: DNSchemeColor;
    procedure set_SchemeColor(value: DNSchemeColor);
    function get_R: Byte;
    procedure set_R(value: Byte);
    function get_G: Byte;
    procedure set_G(value: Byte);
    function get_B: Byte;
    procedure set_B(value: Byte);
    function get_FloatR: Single;
    procedure set_FloatR(value: Single);
    function get_FloatG: Single;
    procedure set_FloatG(value: Single);
    function get_FloatB: Single;
    procedure set_FloatB(value: Single);
    function get_Hue: Single;
    procedure set_Hue(value: Single);
    function get_Saturation: Single;
    procedure set_Saturation(value: Single);
    function get_Luminance: Single;
    procedure set_Luminance(value: Single);
    function get_ColorTransform: DNIColorOperationCollection;
    function get_AsIFillParamSource: DNIFillParamSource;

  { methods } 

    function ToString(format: DNColorStringFormat): string;
    procedure CopyFrom(color: DNIColorFormat);

  { propertys } 

    property ColorType: DNColorType read get_ColorType write set_ColorType;
    property Color: DDN.System.Drawing.DNColor read get_Color write set_Color;
    property PresetColor: DNPresetColor read get_PresetColor write set_PresetColor;
    property SystemColor: DNSystemColor read get_SystemColor write set_SystemColor;
    property SchemeColor: DNSchemeColor read get_SchemeColor write set_SchemeColor;
    property R: Byte read get_R write set_R;
    property G: Byte read get_G write set_G;
    property B: Byte read get_B write set_B;
    property FloatR: Single read get_FloatR write set_FloatR;
    property FloatG: Single read get_FloatG write set_FloatG;
    property FloatB: Single read get_FloatB write set_FloatB;
    property Hue: Single read get_Hue write set_Hue;
    property Saturation: Single read get_Saturation write set_Saturation;
    property Luminance: Single read get_Luminance write set_Luminance;
    property ColorTransform: DNIColorOperationCollection read get_ColorTransform;
    property AsIFillParamSource: DNIFillParamSource read get_AsIFillParamSource;
  end;

  //-------------namespace: Aspose.Slides----------------
  [DNTypeName('Aspose.Slides.IFillFormat')]
  DNIFillFormat = interface(DNIFillParamSource)
  ['{61B7250D-128B-4D2F-97F1-2646199B0A15}']
  { getters & setters } 

    function get_FillType: DNFillType;
    procedure set_FillType(value: DNFillType);
    function get_SolidFillColor: DNIColorFormat;
    function get_GradientFormat: DNIGradientFormat;
    function get_PatternFormat: DNIPatternFormat;
    function get_PictureFillFormat: DNIPictureFillFormat;
    function get_RotateWithShape: DNNullableBool;
    procedure set_RotateWithShape(value: DNNullableBool);
    function get_AsIFillParamSource: DNIFillParamSource;

  { methods } 

    function GetEffective: DNIFillFormatEffectiveData;

  { propertys } 

    property FillType: DNFillType read get_FillType write set_FillType;
    property SolidFillColor: DNIColorFormat read get_SolidFillColor;
    property GradientFormat: DNIGradientFormat read get_GradientFormat;
    property PatternFormat: DNIPatternFormat read get_PatternFormat;
    property PictureFillFormat: DNIPictureFillFormat read get_PictureFillFormat;
    property RotateWithShape: DNNullableBool read get_RotateWithShape write set_RotateWithShape;
    property AsIFillParamSource: DNIFillParamSource read get_AsIFillParamSource;
  end;

  //-------------namespace: Aspose.Slides----------------
  [DNTypeName('Aspose.Slides.IFillFormatEffectiveData')]
  DNIFillFormatEffectiveData = interface(DNIFillParamSource)
  ['{016CF6F7-49F7-42C7-BFA1-36007FD92E72}']
  { getters & setters } 

    function get_FillType: DNFillType;
    function get_SolidFillColor: DDN.System.Drawing.DNColor;
    function get_GradientFormat: DNIGradientFormatEffectiveData;
    function get_PatternFormat: DNIPatternFormatEffectiveData;
    function get_PictureFillFormat: DNIPictureFillFormatEffectiveData;
    function get_RotateWithShape: Boolean;
    function get_AsIFillParamSource: DNIFillParamSource;

  { propertys } 

    property FillType: DNFillType read get_FillType;
    property SolidFillColor: DDN.System.Drawing.DNColor read get_SolidFillColor;
    property GradientFormat: DNIGradientFormatEffectiveData read get_GradientFormat;
    property PatternFormat: DNIPatternFormatEffectiveData read get_PatternFormat;
    property PictureFillFormat: DNIPictureFillFormatEffectiveData read get_PictureFillFormat;
    property RotateWithShape: Boolean read get_RotateWithShape;
    property AsIFillParamSource: DNIFillParamSource read get_AsIFillParamSource;
  end;

  //-------------namespace: Aspose.Slides----------------
  [DNTypeName('Aspose.Slides.IGradientFormat')]
  DNIGradientFormat = interface(DNIFillParamSource)
  ['{1CC48ECE-7467-4F7B-A6FC-42B5917FF928}']
  { getters & setters } 

    function get_TileFlip: DNTileFlip;
    procedure set_TileFlip(value: DNTileFlip);
    function get_GradientDirection: DNGradientDirection;
    procedure set_GradientDirection(value: DNGradientDirection);
    function get_LinearGradientAngle: Single;
    procedure set_LinearGradientAngle(value: Single);
    function get_LinearGradientScaled: DNNullableBool;
    procedure set_LinearGradientScaled(value: DNNullableBool);
    function get_GradientShape: DNGradientShape;
    procedure set_GradientShape(value: DNGradientShape);
    function get_GradientStops: DNIGradientStopCollection;
    function get_AsIFillParamSource: DNIFillParamSource;

  { propertys } 

    property TileFlip: DNTileFlip read get_TileFlip write set_TileFlip;
    property GradientDirection: DNGradientDirection read get_GradientDirection write set_GradientDirection;
    property LinearGradientAngle: Single read get_LinearGradientAngle write set_LinearGradientAngle;
    property LinearGradientScaled: DNNullableBool read get_LinearGradientScaled write set_LinearGradientScaled;
    property GradientShape: DNGradientShape read get_GradientShape write set_GradientShape;
    property GradientStops: DNIGradientStopCollection read get_GradientStops;
    property AsIFillParamSource: DNIFillParamSource read get_AsIFillParamSource;
  end;

  //-------------namespace: Aspose.Slides----------------
  [DNTypeName('Aspose.Slides.IGradientFormatEffectiveData')]
  DNIGradientFormatEffectiveData = interface(DNIFillParamSource)
  ['{1D0702A7-E7B3-438F-88EF-F792E92086A1}']
  { getters & setters } 

    function get_TileFlip: DNTileFlip;
    function get_GradientDirection: DNGradientDirection;
    function get_LinearGradientAngle: Single;
    function get_LinearGradientScaled: Boolean;
    function get_GradientShape: DNGradientShape;
    function get_GradientStops: DNIGradientStopCollectionEffectiveData;
    function get_AsIFillParamSource: DNIFillParamSource;

  { propertys } 

    property TileFlip: DNTileFlip read get_TileFlip;
    property GradientDirection: DNGradientDirection read get_GradientDirection;
    property LinearGradientAngle: Single read get_LinearGradientAngle;
    property LinearGradientScaled: Boolean read get_LinearGradientScaled;
    property GradientShape: DNGradientShape read get_GradientShape;
    property GradientStops: DNIGradientStopCollectionEffectiveData read get_GradientStops;
    property AsIFillParamSource: DNIFillParamSource read get_AsIFillParamSource;
  end;

  //-------------namespace: Aspose.Slides----------------
  [DNTypeName('Aspose.Slides.ILineFillFormat')]
  DNILineFillFormat = interface(DNIFillParamSource)
  ['{4B9F2738-8B3E-4D5C-A8EF-A8D9CDCAC280}']
  { getters & setters } 

    function get_FillType: DNFillType;
    procedure set_FillType(value: DNFillType);
    function get_SolidFillColor: DNIColorFormat;
    function get_GradientFormat: DNIGradientFormat;
    function get_PatternFormat: DNIPatternFormat;
    function get_RotateWithShape: DNNullableBool;
    procedure set_RotateWithShape(value: DNNullableBool);
    function get_AsIFillParamSource: DNIFillParamSource;

  { propertys } 

    property FillType: DNFillType read get_FillType write set_FillType;
    property SolidFillColor: DNIColorFormat read get_SolidFillColor;
    property GradientFormat: DNIGradientFormat read get_GradientFormat;
    property PatternFormat: DNIPatternFormat read get_PatternFormat;
    property RotateWithShape: DNNullableBool read get_RotateWithShape write set_RotateWithShape;
    property AsIFillParamSource: DNIFillParamSource read get_AsIFillParamSource;
  end;

  //-------------namespace: Aspose.Slides----------------
  [DNTypeName('Aspose.Slides.ILineFillFormatEffectiveData')]
  DNILineFillFormatEffectiveData = interface(DNIFillParamSource)
  ['{652AFD58-C756-41DC-BE29-678DEC903B22}']
  { getters & setters } 

    function get_FillType: DNFillType;
    function get_SolidFillColor: DDN.System.Drawing.DNColor;
    function get_GradientFormat: DNIGradientFormatEffectiveData;
    function get_PatternFormat: DNIPatternFormatEffectiveData;
    function get_RotateWithShape: Boolean;
    function get_AsIFillParamSource: DNIFillParamSource;

  { propertys } 

    property FillType: DNFillType read get_FillType;
    property SolidFillColor: DDN.System.Drawing.DNColor read get_SolidFillColor;
    property GradientFormat: DNIGradientFormatEffectiveData read get_GradientFormat;
    property PatternFormat: DNIPatternFormatEffectiveData read get_PatternFormat;
    property RotateWithShape: Boolean read get_RotateWithShape;
    property AsIFillParamSource: DNIFillParamSource read get_AsIFillParamSource;
  end;

  //-------------namespace: Aspose.Slides----------------
  [DNTypeName('Aspose.Slides.IPictureFillFormat')]
  DNIPictureFillFormat = interface(DNIFillParamSource)
  ['{7A2950F4-103F-43DE-B978-D6BAD112D916}']
  { getters & setters } 

    function get_Dpi: Int32;
    procedure set_Dpi(value: Int32);
    function get_PictureFillMode: DNPictureFillMode;
    procedure set_PictureFillMode(value: DNPictureFillMode);
    function get_Picture: DNISlidesPicture;
    function get_CropLeft: Single;
    procedure set_CropLeft(value: Single);
    function get_CropTop: Single;
    procedure set_CropTop(value: Single);
    function get_CropRight: Single;
    procedure set_CropRight(value: Single);
    function get_CropBottom: Single;
    procedure set_CropBottom(value: Single);
    function get_StretchOffsetLeft: Single;
    procedure set_StretchOffsetLeft(value: Single);
    function get_StretchOffsetTop: Single;
    procedure set_StretchOffsetTop(value: Single);
    function get_StretchOffsetRight: Single;
    procedure set_StretchOffsetRight(value: Single);
    function get_StretchOffsetBottom: Single;
    procedure set_StretchOffsetBottom(value: Single);
    function get_AsIFillParamSource: DNIFillParamSource;

  { propertys } 

    property Dpi: Int32 read get_Dpi write set_Dpi;
    property PictureFillMode: DNPictureFillMode read get_PictureFillMode write set_PictureFillMode;
    property Picture: DNISlidesPicture read get_Picture;
    property CropLeft: Single read get_CropLeft write set_CropLeft;
    property CropTop: Single read get_CropTop write set_CropTop;
    property CropRight: Single read get_CropRight write set_CropRight;
    property CropBottom: Single read get_CropBottom write set_CropBottom;
    property StretchOffsetLeft: Single read get_StretchOffsetLeft write set_StretchOffsetLeft;
    property StretchOffsetTop: Single read get_StretchOffsetTop write set_StretchOffsetTop;
    property StretchOffsetRight: Single read get_StretchOffsetRight write set_StretchOffsetRight;
    property StretchOffsetBottom: Single read get_StretchOffsetBottom write set_StretchOffsetBottom;
    property AsIFillParamSource: DNIFillParamSource read get_AsIFillParamSource;
  end;

  //-------------namespace: Aspose.Slides----------------
  [DNTypeName('Aspose.Slides.IPictureFillFormatEffectiveData')]
  DNIPictureFillFormatEffectiveData = interface(DNIFillParamSource)
  ['{EEBC709F-E3E5-4F57-B1FB-A8375E637793}']
  { getters & setters } 

    function get_Dpi: Int32;
    function get_PictureFillMode: DNPictureFillMode;
    function get_Picture: DNIPictureEffectiveData;
    function get_CropLeft: Single;
    function get_CropTop: Single;
    function get_CropRight: Single;
    function get_CropBottom: Single;
    function get_AsIFillParamSource: DNIFillParamSource;

  { propertys } 

    property Dpi: Int32 read get_Dpi;
    property PictureFillMode: DNPictureFillMode read get_PictureFillMode;
    property Picture: DNIPictureEffectiveData read get_Picture;
    property CropLeft: Single read get_CropLeft;
    property CropTop: Single read get_CropTop;
    property CropRight: Single read get_CropRight;
    property CropBottom: Single read get_CropBottom;
    property AsIFillParamSource: DNIFillParamSource read get_AsIFillParamSource;
  end;

  //-------------namespace: Aspose.Slides----------------
  [DNTypeName('Aspose.Slides.IFontData')]
  DNIFontData = interface(DDN.mscorlib.DNObject)
  ['{4EDCE609-BA7D-40AC-8C86-333BE2205C3B}']
  { getters & setters } 

    function get_FontName: string;

  { methods } 

    function GetFontName(theme: DNIThemeEffectiveData): string;

  { propertys } 

    property FontName: string read get_FontName;
  end;

  //-------------namespace: Aspose.Slides----------------
  [DNTypeName('Aspose.Slides.IFontDataFactory')]
  DNIFontDataFactory = interface(DDN.mscorlib.DNObject)
  ['{C272B140-F4F7-4F97-B49E-E415078BB342}']
  { methods } 

    function CreateFontData(fontName: string): DNIFontData;

  end;

  //-------------namespace: Aspose.Slides----------------
  [DNTypeName('Aspose.Slides.IFontFallBackRule')]
  DNIFontFallBackRule = interface(DDN.mscorlib.DNObject)
  ['{46E22F9A-A77A-4F0B-AF2C-8F3C1C194269}']
  { getters & setters } 

    function get_RangeStartIndex: UInt32;
    function get_RangeEndIndex: UInt32;
    function get_Count: Int32;
    function get_Item(index: Int32): string;

  { methods } 

    procedure AddFallBackFonts(fontName: string); overload;
    procedure AddFallBackFonts(fontNames: TArray<string>); overload;
    procedure Clear;
    procedure Remove(fontName: string);
    procedure RemoveAt(index: Int32);
    function ToArray: TArray<string>; overload;
    function ToArray(startIndex: Int32; count: Int32): TArray<string>; overload;
    function IndexOf(fontName: string): Int32;

  { propertys } 

    property RangeStartIndex: UInt32 read get_RangeStartIndex;
    property RangeEndIndex: UInt32 read get_RangeEndIndex;
    property Count: Int32 read get_Count;
    property Item[index: Int32]: string read get_Item; default;
  end;

  //-------------namespace: Aspose.Slides----------------
  [DNTypeName('Aspose.Slides.IFonts')]
  DNIFonts = interface(DDN.mscorlib.DNObject)
  ['{0C00FDB2-43A2-4713-83EA-1F4A2D54F8A5}']
  { getters & setters } 

    function get_LatinFont: DNIFontData;
    procedure set_LatinFont(value: DNIFontData);
    function get_EastAsianFont: DNIFontData;
    procedure set_EastAsianFont(value: DNIFontData);
    function get_ComplexScriptFont: DNIFontData;
    procedure set_ComplexScriptFont(value: DNIFontData);

  { propertys } 

    property LatinFont: DNIFontData read get_LatinFont write set_LatinFont;
    property EastAsianFont: DNIFontData read get_EastAsianFont write set_EastAsianFont;
    property ComplexScriptFont: DNIFontData read get_ComplexScriptFont write set_ComplexScriptFont;
  end;

  //-------------namespace: Aspose.Slides----------------
  [DNTypeName('Aspose.Slides.IFontsEffectiveData')]
  DNIFontsEffectiveData = interface(DDN.mscorlib.DNObject)
  ['{52117670-CBDE-4D8B-8D2B-1B4A8A046B06}']
  { getters & setters } 

    function get_LatinFont: DNIFontData;
    function get_EastAsianFont: DNIFontData;
    function get_ComplexScriptFont: DNIFontData;

  { propertys } 

    property LatinFont: DNIFontData read get_LatinFont;
    property EastAsianFont: DNIFontData read get_EastAsianFont;
    property ComplexScriptFont: DNIFontData read get_ComplexScriptFont;
  end;

  //-------------namespace: Aspose.Slides----------------
  [DNTypeName('Aspose.Slides.IFontsLoader')]
  DNIFontsLoader = interface(DDN.mscorlib.DNObject)
  ['{8FE435CB-BF00-48F5-8132-169C628AE9D4}']
  end;

  //-------------namespace: Aspose.Slides----------------
  [DNTypeName('Aspose.Slides.IFontsManager')]
  DNIFontsManager = interface(DDN.mscorlib.DNObject)
  ['{07163211-E4CA-49D2-9D91-299D123616C3}']
  { getters & setters } 

    function get_FontSubstRuleList: DNIFontSubstRuleCollection;
    procedure set_FontSubstRuleList(value: DNIFontSubstRuleCollection);
    function get_FontFallBackRulesCollection: DNIFontFallBackRulesCollection;
    procedure set_FontFallBackRulesCollection(value: DNIFontFallBackRulesCollection);

  { methods } 

    function GetFonts: TArray<DNIFontData>;
    function GetEmbeddedFonts: TArray<DNIFontData>;
    procedure RemoveEmbeddedFont(fontData: DNIFontData);
    procedure AddEmbeddedFont(fontData: DNIFontData; embedFontRule: DNEmbedFontCharacters); overload;
    procedure AddEmbeddedFont(fontData: TArray<Byte>; embedFontRule: DNEmbedFontCharacters); overload;
    procedure ReplaceFont(sourceFont: DNIFontData; destFont: DNIFontData); overload;
    procedure ReplaceFont(substRule: DNIFontSubstRule); overload;
    procedure ReplaceFont(substRules: DNIFontSubstRuleCollection); overload;

  { propertys } 

    property FontSubstRuleList: DNIFontSubstRuleCollection read get_FontSubstRuleList write set_FontSubstRuleList;
    property FontFallBackRulesCollection: DNIFontFallBackRulesCollection read get_FontFallBackRulesCollection write set_FontFallBackRulesCollection;
  end;

  //-------------namespace: Aspose.Slides----------------
  [DNTypeName('Aspose.Slides.IFontSources')]
  DNIFontSources = interface(DDN.mscorlib.DNObject)
  ['{763C0137-470E-453A-88D4-EDAE58D8C4A3}']
  { getters & setters } 

    function get_FontFolders: TArray<string>;
    procedure set_FontFolders(value: TArray<string>);
    function get_MemoryFonts: TArray<TArray<Byte>>;
    procedure set_MemoryFonts(value: TArray<TArray<Byte>>);

  { propertys } 

    property FontFolders: TArray<string> read get_FontFolders write set_FontFolders;
    property MemoryFonts: TArray<TArray<Byte>> read get_MemoryFonts write set_MemoryFonts;
  end;

  //-------------namespace: Aspose.Slides----------------
  [DNTypeName('Aspose.Slides.IFontSubstRule')]
  DNIFontSubstRule = interface(DDN.mscorlib.DNObject)
  ['{032B161D-495E-488D-80E0-FA74B42BB8A0}']
  { getters & setters } 

    function get_SourceFont: DNIFontData;
    function get_DestFont: DNIFontData;
    function get_ReplaceFontCondition: DNFontSubstCondition;

  { propertys } 

    property SourceFont: DNIFontData read get_SourceFont;
    property DestFont: DNIFontData read get_DestFont;
    property ReplaceFontCondition: DNFontSubstCondition read get_ReplaceFontCondition;
  end;

  //-------------namespace: Aspose.Slides----------------
  [DNTypeName('Aspose.Slides.IFormatFactory')]
  DNIFormatFactory = interface(DDN.mscorlib.DNObject)
  ['{85F45231-A82E-4B5B-BDC8-A3B41F995451}']
  { methods } 

    function CreatePortionFormat: DNIPortionFormat;
    function CreateParagraphFormat: DNIParagraphFormat;
    function CreateTextFrameFormat: DNITextFrameFormat;

  end;

  //-------------namespace: Aspose.Slides----------------
  [DNTypeName('Aspose.Slides.IGeometryPath')]
  DNIGeometryPath = interface(DDN.mscorlib.DNObject)
  ['{523516C4-2E84-4229-BFE6-DBAC7E130010}']
  { getters & setters } 

    function get_PathData: TArray<DNIPathSegment>;
    function get_FillMode: DNPathFillModeType;
    procedure set_FillMode(value: DNPathFillModeType);
    function get_Stroke: Boolean;
    procedure set_Stroke(value: Boolean);

  { methods } 

    procedure RemoveAt(index: Int32);
    procedure LineTo(point: DDN.System.Drawing.DNPointF); overload;
    procedure LineTo(x: Single; y: Single); overload;
    procedure LineTo(point: DDN.System.Drawing.DNPointF; index: UInt32); overload;
    procedure LineTo(x: Single; y: Single; index: UInt32); overload;
    procedure CubicBezierTo(point1: DDN.System.Drawing.DNPointF; point2: DDN.System.Drawing.DNPointF; point3: DDN.System.Drawing.DNPointF); overload;
    procedure CubicBezierTo(x1: Single; y1: Single; x2: Single; y2: Single; x3: Single; y3: Single); overload;
    procedure CubicBezierTo(point1: DDN.System.Drawing.DNPointF; point2: DDN.System.Drawing.DNPointF; point3: DDN.System.Drawing.DNPointF; index: UInt32); overload;
    procedure CubicBezierTo(x1: Single; y1: Single; x2: Single; y2: Single; x3: Single; y3: Single; index: UInt32); overload;
    procedure QuadraticBezierTo(point1: DDN.System.Drawing.DNPointF; point2: DDN.System.Drawing.DNPointF); overload;
    procedure QuadraticBezierTo(x1: Single; y1: Single; x2: Single; y2: Single); overload;
    procedure QuadraticBezierTo(point1: DDN.System.Drawing.DNPointF; point2: DDN.System.Drawing.DNPointF; index: UInt32); overload;
    procedure QuadraticBezierTo(x1: Single; y1: Single; x2: Single; y2: Single; index: UInt32); overload;
    procedure CloseFigure;
    procedure MoveTo(point: DDN.System.Drawing.DNPointF); overload;
    procedure MoveTo(x: Single; y: Single); overload;
    procedure ArcTo(width: Single; heigth: Single; startAngle: Single; sweepAngle: Single);

  { propertys } 

    property PathData: TArray<DNIPathSegment> read get_PathData;
    property FillMode: DNPathFillModeType read get_FillMode write set_FillMode;
    property Stroke: Boolean read get_Stroke write set_Stroke;
  end;

  //-------------namespace: Aspose.Slides----------------
  [DNTypeName('Aspose.Slides.IGradientStop')]
  DNIGradientStop = interface(DDN.mscorlib.DNObject)
  ['{E9413ADF-F4DD-4477-BA53-C3EFE0176A98}']
  { getters & setters } 

    function get_Position: Single;
    procedure set_Position(value: Single);
    function get_Color: DNIColorFormat;

  { propertys } 

    property Position: Single read get_Position write set_Position;
    property Color: DNIColorFormat read get_Color;
  end;

  //-------------namespace: Aspose.Slides----------------
  [DNTypeName('Aspose.Slides.IGradientStopEffectiveData')]
  DNIGradientStopEffectiveData = interface(DDN.mscorlib.DNObject)
  ['{0F1CF49D-B4FE-4E7C-B16D-9A4F153B8771}']
  { getters & setters } 

    function get_Position: Single;
    function get_Color: DDN.System.Drawing.DNColor;

  { propertys } 

    property Position: Single read get_Position;
    property Color: DDN.System.Drawing.DNColor read get_Color;
  end;

  //-------------namespace: Aspose.Slides----------------
  [DNTypeName('Aspose.Slides.IHyperlink')]
  DNIHyperlink = interface(DDN.mscorlib.DNObject)
  ['{40DE6723-8070-4D21-8347-89B0923B416D}']
  { getters & setters } 

    function get_ActionType: DNHyperlinkActionType;
    function get_ExternalUrl: string;
    function get_TargetSlide: DNISlide;
    function get_TargetFrame: string;
    procedure set_TargetFrame(value: string);
    function get_Tooltip: string;
    procedure set_Tooltip(value: string);
    function get_History: Boolean;
    procedure set_History(value: Boolean);
    function get_HighlightClick: Boolean;
    procedure set_HighlightClick(value: Boolean);
    function get_StopSoundOnClick: Boolean;
    procedure set_StopSoundOnClick(value: Boolean);
    function get_ColorSource: DNHyperlinkColorSource;
    procedure set_ColorSource(value: DNHyperlinkColorSource);

  { methods } 

    function Equals(hlink: DNIHyperlink): Boolean;

  { propertys } 

    property ActionType: DNHyperlinkActionType read get_ActionType;
    property ExternalUrl: string read get_ExternalUrl;
    property TargetSlide: DNISlide read get_TargetSlide;
    property TargetFrame: string read get_TargetFrame write set_TargetFrame;
    property Tooltip: string read get_Tooltip write set_Tooltip;
    property History: Boolean read get_History write set_History;
    property HighlightClick: Boolean read get_HighlightClick write set_HighlightClick;
    property StopSoundOnClick: Boolean read get_StopSoundOnClick write set_StopSoundOnClick;
    property ColorSource: DNHyperlinkColorSource read get_ColorSource write set_ColorSource;
  end;

  //-------------namespace: Aspose.Slides----------------
  [DNTypeName('Aspose.Slides.IHyperlinkContainer')]
  DNIHyperlinkContainer = interface(DDN.mscorlib.DNObject)
  ['{D7C4BF28-7795-4A4B-A683-F09A1784CF0F}']
  { getters & setters } 

    function get_HyperlinkClick: DNIHyperlink;
    procedure set_HyperlinkClick(value: DNIHyperlink);
    function get_HyperlinkMouseOver: DNIHyperlink;
    procedure set_HyperlinkMouseOver(value: DNIHyperlink);
    function get_HyperlinkManager: DNIHyperlinkManager;

  { propertys } 

    property HyperlinkClick: DNIHyperlink read get_HyperlinkClick write set_HyperlinkClick;
    property HyperlinkMouseOver: DNIHyperlink read get_HyperlinkMouseOver write set_HyperlinkMouseOver;
    property HyperlinkManager: DNIHyperlinkManager read get_HyperlinkManager;
  end;

  //-------------namespace: Aspose.Slides----------------
  [DNTypeName('Aspose.Slides.IHyperlinkManager')]
  DNIHyperlinkManager = interface(DDN.mscorlib.DNObject)
  ['{C470189A-0657-46E5-9F69-E1BF639F154A}']
  { methods } 

    function SetExternalHyperlinkClick(url: string): DNIHyperlink;
    function SetInternalHyperlinkClick(targetSlide: DNISlide): DNIHyperlink;
    procedure RemoveHyperlinkClick;
    function SetExternalHyperlinkMouseOver(url: string): DNIHyperlink;
    function SetInternalHyperlinkMouseOver(targetSlide: DNISlide): DNIHyperlink;
    procedure RemoveHyperlinkMouseOver;
    function SetMacroHyperlinkClick(macroName: string): DNIHyperlink;

  end;

  //-------------namespace: Aspose.Slides----------------
  [DNTypeName('Aspose.Slides.IHyperlinkQueries')]
  DNIHyperlinkQueries = interface(DDN.mscorlib.DNObject)
  ['{14A06FD9-CB20-4802-BD87-7DF1E9A92F8D}']
  { methods } 

    function GetHyperlinkClicks: DDN.mscorlib.DNIList<DNIHyperlinkContainer>;
    function GetHyperlinkMouseOvers: DDN.mscorlib.DNIList<DNIHyperlinkContainer>;
    function GetAnyHyperlinks: DDN.mscorlib.DNIList<DNIHyperlinkContainer>;
    procedure RemoveAllHyperlinks;

  end;

  //-------------namespace: Aspose.Slides----------------
  [DNTypeName('Aspose.Slides.IImageWrapperFactory')]
  DNIImageWrapperFactory = interface(DDN.mscorlib.DNObject)
  ['{F776BB4D-EDDD-4BDC-A5C0-01C6C4C8CAF5}']
  { methods } 

    function CreateImageWrapper(image: DDN.System.Drawing.DNImage): DNIImageWrapper; overload;
    function CreateImageWrapper(stream: DDN.mscorlib.DNStream): DNIImageWrapper; overload;
    function CreateImageWrapper(fileName: string): DNIImageWrapper; overload;

  end;

  //-------------namespace: Aspose.Slides----------------
  [DNTypeName('Aspose.Slides.IInterruptionToken')]
  DNIInterruptionToken = interface(DDN.mscorlib.DNObject)
  ['{021EE33D-FE40-4454-917F-4B5B51DD5BCA}']
  { getters & setters } 

    function get_IsInterruptionRequested: Boolean;

  { methods } 

    procedure ThrowIfInterruptionRequested;

  { propertys } 

    property IsInterruptionRequested: Boolean read get_IsInterruptionRequested;
  end;

  //-------------namespace: Aspose.Slides----------------
  [DNTypeName('Aspose.Slides.IInterruptionTokenSource')]
  DNIInterruptionTokenSource = interface(DDN.mscorlib.DNObject)
  ['{D2ACE326-5BC6-4D92-BD25-A17AEDA0EEF3}']
  { getters & setters } 

    function get_Token: DNIInterruptionToken;
    function get_IsInterruptionRequested: Boolean;

  { methods } 

    procedure Interrupt;

  { propertys } 

    property Token: DNIInterruptionToken read get_Token;
    property IsInterruptionRequested: Boolean read get_IsInterruptionRequested;
  end;

  //-------------namespace: Aspose.Slides----------------
  [DNTypeName('Aspose.Slides.ILicense')]
  DNILicense = interface(DDN.mscorlib.DNObject)
  ['{E5415639-B041-401C-979C-C7B0C82FAA29}']
  { methods } 

    procedure SetLicense(licenseName: string); overload;
    procedure SetLicense(stream: DDN.mscorlib.DNStream); overload;
    procedure ResetLicense;
    function IsLicensed: Boolean;

  end;

  //-------------namespace: Aspose.Slides----------------
  [DNTypeName('Aspose.Slides.ILightRig')]
  DNILightRig = interface(DDN.mscorlib.DNObject)
  ['{B78F909C-F191-40DF-995C-2CC2B6420052}']
  { getters & setters } 

    function get_Direction: DNLightingDirection;
    procedure set_Direction(value: DNLightingDirection);
    function get_LightType: DNLightRigPresetType;
    procedure set_LightType(value: DNLightRigPresetType);

  { methods } 

    procedure SetRotation(latitude: Single; longitude: Single; revolution: Single);
    function GetRotation: TArray<Single>;

  { propertys } 

    property Direction: DNLightingDirection read get_Direction write set_Direction;
    property LightType: DNLightRigPresetType read get_LightType write set_LightType;
  end;

  //-------------namespace: Aspose.Slides----------------
  [DNTypeName('Aspose.Slides.ILightRigEffectiveData')]
  DNILightRigEffectiveData = interface(DDN.mscorlib.DNObject)
  ['{7A2F9AAD-BE54-4CE5-84AF-3BE323364429}']
  { getters & setters } 

    function get_Direction: DNLightingDirection;
    function get_LightType: DNLightRigPresetType;

  { methods } 

    function GetRotation: TArray<Single>;

  { propertys } 

    property Direction: DNLightingDirection read get_Direction;
    property LightType: DNLightRigPresetType read get_LightType;
  end;

  //-------------namespace: Aspose.Slides----------------
  [DNTypeName('Aspose.Slides.ILineParamSource')]
  DNILineParamSource = interface(DDN.mscorlib.DNObject)
  ['{83546540-6B00-4ECF-866F-A77C324F6F5C}']
  end;

  //-------------namespace: Aspose.Slides----------------
  [DNTypeName('Aspose.Slides.ILineFormat')]
  DNILineFormat = interface(DNILineParamSource)
  ['{9E47EDDB-FD3D-4EA1-B08F-8F2973B64B38}']
  { getters & setters } 

    function get_IsFormatNotDefined: Boolean;
    function get_FillFormat: DNILineFillFormat;
    function get_SketchFormat: DNISketchFormat;
    function get_Width: Double;
    procedure set_Width(value: Double);
    function get_DashStyle: DNLineDashStyle;
    procedure set_DashStyle(value: DNLineDashStyle);
    function get_CustomDashPattern: TArray<Single>;
    procedure set_CustomDashPattern(value: TArray<Single>);
    function get_CapStyle: DNLineCapStyle;
    procedure set_CapStyle(value: DNLineCapStyle);
    function get_Style: DNLineStyle;
    procedure set_Style(value: DNLineStyle);
    function get_Alignment: DNLineAlignment;
    procedure set_Alignment(value: DNLineAlignment);
    function get_JoinStyle: DNLineJoinStyle;
    procedure set_JoinStyle(value: DNLineJoinStyle);
    function get_MiterLimit: Single;
    procedure set_MiterLimit(value: Single);
    function get_BeginArrowheadStyle: DNLineArrowheadStyle;
    procedure set_BeginArrowheadStyle(value: DNLineArrowheadStyle);
    function get_EndArrowheadStyle: DNLineArrowheadStyle;
    procedure set_EndArrowheadStyle(value: DNLineArrowheadStyle);
    function get_BeginArrowheadWidth: DNLineArrowheadWidth;
    procedure set_BeginArrowheadWidth(value: DNLineArrowheadWidth);
    function get_EndArrowheadWidth: DNLineArrowheadWidth;
    procedure set_EndArrowheadWidth(value: DNLineArrowheadWidth);
    function get_BeginArrowheadLength: DNLineArrowheadLength;
    procedure set_BeginArrowheadLength(value: DNLineArrowheadLength);
    function get_EndArrowheadLength: DNLineArrowheadLength;
    procedure set_EndArrowheadLength(value: DNLineArrowheadLength);
    function get_AsILineParamSource: DNILineParamSource;

  { methods } 

    function Equals(lineFormat: DNILineFormat): Boolean;
    function GetEffective: DNILineFormatEffectiveData;

  { propertys } 

    property IsFormatNotDefined: Boolean read get_IsFormatNotDefined;
    property FillFormat: DNILineFillFormat read get_FillFormat;
    property SketchFormat: DNISketchFormat read get_SketchFormat;
    property Width: Double read get_Width write set_Width;
    property DashStyle: DNLineDashStyle read get_DashStyle write set_DashStyle;
    property CustomDashPattern: TArray<Single> read get_CustomDashPattern write set_CustomDashPattern;
    property CapStyle: DNLineCapStyle read get_CapStyle write set_CapStyle;
    property Style: DNLineStyle read get_Style write set_Style;
    property Alignment: DNLineAlignment read get_Alignment write set_Alignment;
    property JoinStyle: DNLineJoinStyle read get_JoinStyle write set_JoinStyle;
    property MiterLimit: Single read get_MiterLimit write set_MiterLimit;
    property BeginArrowheadStyle: DNLineArrowheadStyle read get_BeginArrowheadStyle write set_BeginArrowheadStyle;
    property EndArrowheadStyle: DNLineArrowheadStyle read get_EndArrowheadStyle write set_EndArrowheadStyle;
    property BeginArrowheadWidth: DNLineArrowheadWidth read get_BeginArrowheadWidth write set_BeginArrowheadWidth;
    property EndArrowheadWidth: DNLineArrowheadWidth read get_EndArrowheadWidth write set_EndArrowheadWidth;
    property BeginArrowheadLength: DNLineArrowheadLength read get_BeginArrowheadLength write set_BeginArrowheadLength;
    property EndArrowheadLength: DNLineArrowheadLength read get_EndArrowheadLength write set_EndArrowheadLength;
    property AsILineParamSource: DNILineParamSource read get_AsILineParamSource;
  end;

  //-------------namespace: Aspose.Slides----------------
  [DNTypeName('Aspose.Slides.ILineFormatEffectiveData')]
  DNILineFormatEffectiveData = interface(DNILineParamSource)
  ['{82175FE4-0BDE-4AB9-8C6C-C17469B6D197}']
  { getters & setters } 

    function get_FillFormat: DNILineFillFormatEffectiveData;
    function get_SketchFormat: DNISketchFormatEffectiveData;
    function get_Width: Double;
    function get_DashStyle: DNLineDashStyle;
    function get_CustomDashPattern: TArray<Single>;
    function get_CapStyle: DNLineCapStyle;
    function get_Style: DNLineStyle;
    function get_Alignment: DNLineAlignment;
    function get_JoinStyle: DNLineJoinStyle;
    function get_MiterLimit: Single;
    function get_BeginArrowheadStyle: DNLineArrowheadStyle;
    function get_EndArrowheadStyle: DNLineArrowheadStyle;
    function get_BeginArrowheadWidth: DNLineArrowheadWidth;
    function get_EndArrowheadWidth: DNLineArrowheadWidth;
    function get_BeginArrowheadLength: DNLineArrowheadLength;
    function get_EndArrowheadLength: DNLineArrowheadLength;
    function get_AsILineParamSource: DNILineParamSource;

  { methods } 

    function Equals(lf: DNILineFormatEffectiveData): Boolean;

  { propertys } 

    property FillFormat: DNILineFillFormatEffectiveData read get_FillFormat;
    property SketchFormat: DNISketchFormatEffectiveData read get_SketchFormat;
    property Width: Double read get_Width;
    property DashStyle: DNLineDashStyle read get_DashStyle;
    property CustomDashPattern: TArray<Single> read get_CustomDashPattern;
    property CapStyle: DNLineCapStyle read get_CapStyle;
    property Style: DNLineStyle read get_Style;
    property Alignment: DNLineAlignment read get_Alignment;
    property JoinStyle: DNLineJoinStyle read get_JoinStyle;
    property MiterLimit: Single read get_MiterLimit;
    property BeginArrowheadStyle: DNLineArrowheadStyle read get_BeginArrowheadStyle;
    property EndArrowheadStyle: DNLineArrowheadStyle read get_EndArrowheadStyle;
    property BeginArrowheadWidth: DNLineArrowheadWidth read get_BeginArrowheadWidth;
    property EndArrowheadWidth: DNLineArrowheadWidth read get_EndArrowheadWidth;
    property BeginArrowheadLength: DNLineArrowheadLength read get_BeginArrowheadLength;
    property EndArrowheadLength: DNLineArrowheadLength read get_EndArrowheadLength;
    property AsILineParamSource: DNILineParamSource read get_AsILineParamSource;
  end;

  //-------------namespace: Aspose.Slides----------------
  [DNTypeName('Aspose.Slides.ILoadOptions')]
  DNILoadOptions = interface(DDN.mscorlib.DNObject)
  ['{69A7487B-7A45-4228-BBF5-C35F16831394}']
  { getters & setters } 

    function get_LoadFormat: DNLoadFormat;
    procedure set_LoadFormat(value: DNLoadFormat);
    function get_DefaultRegularFont: string;
    procedure set_DefaultRegularFont(value: string);
    function get_DefaultSymbolFont: string;
    procedure set_DefaultSymbolFont(value: string);
    function get_DefaultAsianFont: string;
    procedure set_DefaultAsianFont(value: string);
    function get_Password: string;
    procedure set_Password(value: string);
    function get_OnlyLoadDocumentProperties: Boolean;
    procedure set_OnlyLoadDocumentProperties(value: Boolean);
    function get_WarningCallback: DNIWarningCallback;
    procedure set_WarningCallback(value: DNIWarningCallback);
    function get_BlobManagementOptions: DNIBlobManagementOptions;
    procedure set_BlobManagementOptions(value: DNIBlobManagementOptions);
    function get_DocumentLevelFontSources: DNIFontSources;
    procedure set_DocumentLevelFontSources(value: DNIFontSources);
    function get_InterruptionToken: DNIInterruptionToken;
    procedure set_InterruptionToken(value: DNIInterruptionToken);
    function get_ResourceLoadingCallback: DNIResourceLoadingCallback;
    procedure set_ResourceLoadingCallback(value: DNIResourceLoadingCallback);
    function get_SpreadsheetOptions: DNISpreadsheetOptions;
    procedure set_SpreadsheetOptions(value: DNISpreadsheetOptions);

  { propertys } 

    property LoadFormat: DNLoadFormat read get_LoadFormat write set_LoadFormat;
    property DefaultRegularFont: string read get_DefaultRegularFont write set_DefaultRegularFont;
    property DefaultSymbolFont: string read get_DefaultSymbolFont write set_DefaultSymbolFont;
    property DefaultAsianFont: string read get_DefaultAsianFont write set_DefaultAsianFont;
    property Password: string read get_Password write set_Password;
    property OnlyLoadDocumentProperties: Boolean read get_OnlyLoadDocumentProperties write set_OnlyLoadDocumentProperties;
    property WarningCallback: DNIWarningCallback read get_WarningCallback write set_WarningCallback;
    property BlobManagementOptions: DNIBlobManagementOptions read get_BlobManagementOptions write set_BlobManagementOptions;
    property DocumentLevelFontSources: DNIFontSources read get_DocumentLevelFontSources write set_DocumentLevelFontSources;
    property InterruptionToken: DNIInterruptionToken read get_InterruptionToken write set_InterruptionToken;
    property ResourceLoadingCallback: DNIResourceLoadingCallback read get_ResourceLoadingCallback write set_ResourceLoadingCallback;
    property SpreadsheetOptions: DNISpreadsheetOptions read get_SpreadsheetOptions write set_SpreadsheetOptions;
  end;

  //-------------namespace: Aspose.Slides----------------
  [DNTypeName('Aspose.Slides.IMasterHandoutSlideManager')]
  DNIMasterHandoutSlideManager = interface(DDN.mscorlib.DNObject)
  ['{46A93BF3-B54B-4090-8369-BD212BE16934}']
  { getters & setters } 

    function get_MasterHandoutSlide: DNIMasterHandoutSlide;

  { methods } 

    function SetDefaultMasterHandoutSlide: DNIMasterHandoutSlide;
    procedure RemoveMasterHandoutSlide;

  { propertys } 

    property MasterHandoutSlide: DNIMasterHandoutSlide read get_MasterHandoutSlide;
  end;

  //-------------namespace: Aspose.Slides----------------
  [DNTypeName('Aspose.Slides.IMasterNotesSlideManager')]
  DNIMasterNotesSlideManager = interface(DDN.mscorlib.DNObject)
  ['{7CFD37CA-D181-4F4B-BFE2-223387FE5959}']
  { getters & setters } 

    function get_MasterNotesSlide: DNIMasterNotesSlide;

  { methods } 

    function SetDefaultMasterNotesSlide: DNIMasterNotesSlide;
    procedure RemoveMasterNotesSlide;

  { propertys } 

    property MasterNotesSlide: DNIMasterNotesSlide read get_MasterNotesSlide;
  end;

  //-------------namespace: Aspose.Slides----------------
  [DNTypeName('Aspose.Slides.IMetered')]
  DNIMetered = interface(DDN.mscorlib.DNObject)
  ['{4CEB210B-ED58-4ADE-A3EF-83D4631D9B95}']
  { methods } 

    procedure SetMeteredKey(publicKey: string; privateKey: string);

  end;

  //-------------namespace: Aspose.Slides.Import----------------
  [DNTypeName('Aspose.Slides.Import.IExternalResourceResolver')]
  DNIExternalResourceResolver = interface(DDN.mscorlib.DNObject)
  ['{88FF6EDD-D6D4-43E4-B25A-7806671FE7CA}']
  { methods } 

    function ResolveUri(baseUri: string; relativeUri: string): string;
    function GetEntity(absoluteUri: string): DDN.mscorlib.DNStream;

  end;

  //-------------namespace: Aspose.Slides.Import----------------
  [DNTypeName('Aspose.Slides.Import.IHtmlExternalResolver')]
  DNIHtmlExternalResolver = interface(DNIExternalResourceResolver)
  ['{B80E794A-CCCC-440C-BCDA-12553CCF82CE}']
  { getters & setters } 

    function get_AsIExternalResourceResolver: DNIExternalResourceResolver;

  { propertys } 

    property AsIExternalResourceResolver: DNIExternalResourceResolver read get_AsIExternalResourceResolver;
  end;

  //-------------namespace: Aspose.Slides----------------
  [DNTypeName('Aspose.Slides.INormalViewProperties')]
  DNINormalViewProperties = interface(DDN.mscorlib.DNObject)
  ['{97ED80EA-3D37-445D-BCE8-84F912D82EC0}']
  { getters & setters } 

    function get_ShowOutlineIcons: Boolean;
    procedure set_ShowOutlineIcons(value: Boolean);
    function get_SnapVerticalSplitter: Boolean;
    procedure set_SnapVerticalSplitter(value: Boolean);
    function get_VerticalBarState: DNSplitterBarStateType;
    procedure set_VerticalBarState(value: DNSplitterBarStateType);
    function get_HorizontalBarState: DNSplitterBarStateType;
    procedure set_HorizontalBarState(value: DNSplitterBarStateType);
    function get_PreferSingleView: Boolean;
    procedure set_PreferSingleView(value: Boolean);
    function get_RestoredLeft: DNINormalViewRestoredProperties;
    function get_RestoredTop: DNINormalViewRestoredProperties;

  { propertys } 

    property ShowOutlineIcons: Boolean read get_ShowOutlineIcons write set_ShowOutlineIcons;
    property SnapVerticalSplitter: Boolean read get_SnapVerticalSplitter write set_SnapVerticalSplitter;
    property VerticalBarState: DNSplitterBarStateType read get_VerticalBarState write set_VerticalBarState;
    property HorizontalBarState: DNSplitterBarStateType read get_HorizontalBarState write set_HorizontalBarState;
    property PreferSingleView: Boolean read get_PreferSingleView write set_PreferSingleView;
    property RestoredLeft: DNINormalViewRestoredProperties read get_RestoredLeft;
    property RestoredTop: DNINormalViewRestoredProperties read get_RestoredTop;
  end;

  //-------------namespace: Aspose.Slides----------------
  [DNTypeName('Aspose.Slides.INormalViewRestoredProperties')]
  DNINormalViewRestoredProperties = interface(DDN.mscorlib.DNObject)
  ['{4ED37B54-F6A3-4A55-87CF-0A6E7BCC4E67}']
  { getters & setters } 

    function get_DimensionSize: Single;
    procedure set_DimensionSize(value: Single);
    function get_AutoAdjust: Boolean;
    procedure set_AutoAdjust(value: Boolean);

  { propertys } 

    property DimensionSize: Single read get_DimensionSize write set_DimensionSize;
    property AutoAdjust: Boolean read get_AutoAdjust write set_AutoAdjust;
  end;

  //-------------namespace: Aspose.Slides----------------
  [DNTypeName('Aspose.Slides.INotesSize')]
  DNINotesSize = interface(DDN.mscorlib.DNObject)
  ['{C4A9A67A-96F0-4144-B45D-4EA638B95549}']
  { getters & setters } 

    function get_Size: DDN.System.Drawing.DNSizeF;
    procedure set_Size(value: DDN.System.Drawing.DNSizeF);

  { propertys } 

    property Size: DDN.System.Drawing.DNSizeF read get_Size write set_Size;
  end;

  //-------------namespace: Aspose.Slides----------------
  [DNTypeName('Aspose.Slides.INotesSlideManager')]
  DNINotesSlideManager = interface(DDN.mscorlib.DNObject)
  ['{49915B0B-215F-40FE-83A7-7031F2D0EC24}']
  { getters & setters } 

    function get_NotesSlide: DNINotesSlide;

  { methods } 

    function AddNotesSlide: DNINotesSlide;
    procedure RemoveNotesSlide;

  { propertys } 

    property NotesSlide: DNINotesSlide read get_NotesSlide;
  end;

  //-------------namespace: Aspose.Slides----------------
  [DNTypeName('Aspose.Slides.IOleEmbeddedDataInfo')]
  DNIOleEmbeddedDataInfo = interface(DDN.mscorlib.DNObject)
  ['{27887429-50D1-4B1E-B50E-B2B70F94619D}']
  { getters & setters } 

    function get_EmbeddedFileData: TArray<Byte>;
    function get_EmbeddedFileExtension: string;

  { propertys } 

    property EmbeddedFileData: TArray<Byte> read get_EmbeddedFileData;
    property EmbeddedFileExtension: string read get_EmbeddedFileExtension;
  end;

  //-------------namespace: Aspose.Slides----------------
  [DNTypeName('Aspose.Slides.IParagraphFactory')]
  DNIParagraphFactory = interface(DDN.mscorlib.DNObject)
  ['{591B58B3-CE88-41BA-AC2D-6E06B634666B}']
  { methods } 

    function CreateParagraph: DNIParagraph; overload;
    function CreateParagraph(paragraph: DNIParagraph): DNIParagraph; overload;

  end;

  //-------------namespace: Aspose.Slides----------------
  [DNTypeName('Aspose.Slides.IParagraphFormat')]
  DNIParagraphFormat = interface(DDN.mscorlib.DNObject)
  ['{EC9F1F06-0DB7-4BF4-A09D-33B5A7FD4A06}']
  { getters & setters } 

    function get_Bullet: DNIBulletFormat;
    function get_Depth: Int16;
    procedure set_Depth(value: Int16);
    function get_Alignment: DNTextAlignment;
    procedure set_Alignment(value: DNTextAlignment);
    function get_SpaceWithin: Single;
    procedure set_SpaceWithin(value: Single);
    function get_SpaceBefore: Single;
    procedure set_SpaceBefore(value: Single);
    function get_SpaceAfter: Single;
    procedure set_SpaceAfter(value: Single);
    function get_EastAsianLineBreak: DNNullableBool;
    procedure set_EastAsianLineBreak(value: DNNullableBool);
    function get_RightToLeft: DNNullableBool;
    procedure set_RightToLeft(value: DNNullableBool);
    function get_LatinLineBreak: DNNullableBool;
    procedure set_LatinLineBreak(value: DNNullableBool);
    function get_HangingPunctuation: DNNullableBool;
    procedure set_HangingPunctuation(value: DNNullableBool);
    function get_MarginLeft: Single;
    procedure set_MarginLeft(value: Single);
    function get_MarginRight: Single;
    procedure set_MarginRight(value: Single);
    function get_Indent: Single;
    procedure set_Indent(value: Single);
    function get_DefaultTabSize: Single;
    procedure set_DefaultTabSize(value: Single);
    function get_Tabs: DNITabCollection;
    function get_FontAlignment: DNFontAlignment;
    procedure set_FontAlignment(value: DNFontAlignment);
    function get_DefaultPortionFormat: DNIPortionFormat;

  { methods } 

    function GetEffective: DNIParagraphFormatEffectiveData;

  { propertys } 

    property Bullet: DNIBulletFormat read get_Bullet;
    property Depth: Int16 read get_Depth write set_Depth;
    property Alignment: DNTextAlignment read get_Alignment write set_Alignment;
    property SpaceWithin: Single read get_SpaceWithin write set_SpaceWithin;
    property SpaceBefore: Single read get_SpaceBefore write set_SpaceBefore;
    property SpaceAfter: Single read get_SpaceAfter write set_SpaceAfter;
    property EastAsianLineBreak: DNNullableBool read get_EastAsianLineBreak write set_EastAsianLineBreak;
    property RightToLeft: DNNullableBool read get_RightToLeft write set_RightToLeft;
    property LatinLineBreak: DNNullableBool read get_LatinLineBreak write set_LatinLineBreak;
    property HangingPunctuation: DNNullableBool read get_HangingPunctuation write set_HangingPunctuation;
    property MarginLeft: Single read get_MarginLeft write set_MarginLeft;
    property MarginRight: Single read get_MarginRight write set_MarginRight;
    property Indent: Single read get_Indent write set_Indent;
    property DefaultTabSize: Single read get_DefaultTabSize write set_DefaultTabSize;
    property Tabs: DNITabCollection read get_Tabs;
    property FontAlignment: DNFontAlignment read get_FontAlignment write set_FontAlignment;
    property DefaultPortionFormat: DNIPortionFormat read get_DefaultPortionFormat;
  end;

  //-------------namespace: Aspose.Slides----------------
  [DNTypeName('Aspose.Slides.IParagraphFormatEffectiveData')]
  DNIParagraphFormatEffectiveData = interface(DDN.mscorlib.DNObject)
  ['{448AEBBB-1F0E-4B9E-9862-21EF5F7401F4}']
  { getters & setters } 

    function get_Bullet: DNIBulletFormatEffectiveData;
    function get_Depth: Int16;
    function get_Alignment: DNTextAlignment;
    function get_SpaceWithin: Single;
    function get_SpaceBefore: Single;
    function get_SpaceAfter: Single;
    function get_EastAsianLineBreak: Boolean;
    function get_RightToLeft: Boolean;
    function get_LatinLineBreak: Boolean;
    function get_HangingPunctuation: Boolean;
    function get_MarginLeft: Single;
    function get_MarginRight: Single;
    function get_Indent: Single;
    function get_DefaultTabSize: Single;
    function get_Tabs: TArray<DNITabEffectiveData>;
    function get_FontAlignment: DNFontAlignment;
    function get_DefaultPortionFormat: DNIPortionFormatEffectiveData;

  { propertys } 

    property Bullet: DNIBulletFormatEffectiveData read get_Bullet;
    property Depth: Int16 read get_Depth;
    property Alignment: DNTextAlignment read get_Alignment;
    property SpaceWithin: Single read get_SpaceWithin;
    property SpaceBefore: Single read get_SpaceBefore;
    property SpaceAfter: Single read get_SpaceAfter;
    property EastAsianLineBreak: Boolean read get_EastAsianLineBreak;
    property RightToLeft: Boolean read get_RightToLeft;
    property LatinLineBreak: Boolean read get_LatinLineBreak;
    property HangingPunctuation: Boolean read get_HangingPunctuation;
    property MarginLeft: Single read get_MarginLeft;
    property MarginRight: Single read get_MarginRight;
    property Indent: Single read get_Indent;
    property DefaultTabSize: Single read get_DefaultTabSize;
    property Tabs: TArray<DNITabEffectiveData> read get_Tabs;
    property FontAlignment: DNFontAlignment read get_FontAlignment;
    property DefaultPortionFormat: DNIPortionFormatEffectiveData read get_DefaultPortionFormat;
  end;

  //-------------namespace: Aspose.Slides----------------
  [DNTypeName('Aspose.Slides.IPathSegment')]
  DNIPathSegment = interface(DDN.mscorlib.DNObject)
  ['{EFE76FF7-052F-4045-BFA0-4A82C35B1E98}']
  { getters & setters } 

    function get_SegmentData: TArray<Single>;
    function get_PathCommand: DNPathCommandType;

  { propertys } 

    property SegmentData: TArray<Single> read get_SegmentData;
    property PathCommand: DNPathCommandType read get_PathCommand;
  end;

  //-------------namespace: Aspose.Slides----------------
  [DNTypeName('Aspose.Slides.IPatternFormat')]
  DNIPatternFormat = interface(DDN.mscorlib.DNObject)
  ['{D18E0ABF-4AD5-46FA-8BFF-BBF1E3D16E6D}']
  { getters & setters } 

    function get_PatternStyle: DNPatternStyle;
    procedure set_PatternStyle(value: DNPatternStyle);
    function get_ForeColor: DNIColorFormat;
    function get_BackColor: DNIColorFormat;

  { methods } 

    function GetTileImage(background: DDN.System.Drawing.DNColor; foreground: DDN.System.Drawing.DNColor): DDN.System.Drawing.DNBitmap; overload;
    function GetTileImage(styleColor: DDN.System.Drawing.DNColor): DDN.System.Drawing.DNBitmap; overload;

  { propertys } 

    property PatternStyle: DNPatternStyle read get_PatternStyle write set_PatternStyle;
    property ForeColor: DNIColorFormat read get_ForeColor;
    property BackColor: DNIColorFormat read get_BackColor;
  end;

  //-------------namespace: Aspose.Slides----------------
  [DNTypeName('Aspose.Slides.IPatternFormatEffectiveData')]
  DNIPatternFormatEffectiveData = interface(DDN.mscorlib.DNObject)
  ['{6E45E978-C1EE-467F-A595-62AB4147C2DD}']
  { getters & setters } 

    function get_PatternStyle: DNPatternStyle;
    function get_ForeColor: DDN.System.Drawing.DNColor;
    function get_BackColor: DDN.System.Drawing.DNColor;

  { methods } 

    function GetTileImage(background: DDN.System.Drawing.DNColor; foreground: DDN.System.Drawing.DNColor): DDN.System.Drawing.DNBitmap;

  { propertys } 

    property PatternStyle: DNPatternStyle read get_PatternStyle;
    property ForeColor: DDN.System.Drawing.DNColor read get_ForeColor;
    property BackColor: DDN.System.Drawing.DNColor read get_BackColor;
  end;

  //-------------namespace: Aspose.Slides----------------
  [DNTypeName('Aspose.Slides.IPictureEffectiveData')]
  DNIPictureEffectiveData = interface(DDN.mscorlib.DNObject)
  ['{A7F57FF1-DBB6-4960-A913-4C43D56D4277}']
  { getters & setters } 

    function get_Image: DNIPPImage;
    function get_LinkPathLong: string;
    function get_ImageTransform: DNIImageTransformOCollectionEffectiveData;

  { propertys } 

    property Image: DNIPPImage read get_Image;
    property LinkPathLong: string read get_LinkPathLong;
    property ImageTransform: DNIImageTransformOCollectionEffectiveData read get_ImageTransform;
  end;

  //-------------namespace: Aspose.Slides----------------
  [DNTypeName('Aspose.Slides.IPlaceholder')]
  DNIPlaceholder = interface(DDN.mscorlib.DNObject)
  ['{B084A704-95A7-4D68-95AD-239B957A9BE6}']
  { getters & setters } 

    function get_Orientation: DNOrientation;
    function get_Size: DNPlaceholderSize;
    function get_Type: DNPlaceholderType;
    function get_Index: UInt32;

  { propertys } 

    property Orientation: DNOrientation read get_Orientation;
    property Size: DNPlaceholderSize read get_Size;
    property &Type: DNPlaceholderType read get_Type;
    property Index: UInt32 read get_Index;
  end;

  //-------------namespace: Aspose.Slides----------------
  [DNTypeName('Aspose.Slides.IPortionFactory')]
  DNIPortionFactory = interface(DDN.mscorlib.DNObject)
  ['{4CDD3C98-B7D9-484B-B292-98E316A714CA}']
  { methods } 

    function CreatePortion: DNIPortion; overload;
    function CreatePortion(str: string): DNIPortion; overload;
    function CreatePortion(portion: DNIPortion): DNIPortion; overload;

  end;

  //-------------namespace: Aspose.Slides----------------
  [DNTypeName('Aspose.Slides.IPPImage')]
  DNIPPImage = interface(DDN.mscorlib.DNObject)
  ['{B1608DE5-D5B6-49BE-9FEC-3FD45952BBAB}']
  { getters & setters } 

    function get_BinaryData: TArray<Byte>;
    function get_SystemImage: DDN.System.Drawing.DNImage;
    function get_SvgImage: DNISvgImage;
    procedure set_SvgImage(value: DNISvgImage);
    function get_ContentType: string;
    function get_Width: Int32;
    function get_Height: Int32;
    function get_X: Int32;
    function get_Y: Int32;

  { methods } 

    procedure ReplaceImage(newImageData: TArray<Byte>); overload;
    procedure ReplaceImage(newImage: DDN.System.Drawing.DNImage); overload;
    procedure ReplaceImage(newImage: DNIPPImage); overload;

  { propertys } 

    property BinaryData: TArray<Byte> read get_BinaryData;
    property SystemImage: DDN.System.Drawing.DNImage read get_SystemImage;
    property SvgImage: DNISvgImage read get_SvgImage write set_SvgImage;
    property ContentType: string read get_ContentType;
    property Width: Int32 read get_Width;
    property Height: Int32 read get_Height;
    property X: Int32 read get_X;
    property Y: Int32 read get_Y;
  end;

  //-------------namespace: Aspose.Slides----------------
  [DNTypeName('Aspose.Slides.IPresentationComponent')]
  DNIPresentationComponent = interface(DDN.mscorlib.DNObject)
  ['{BE92D194-16A7-475C-B6AD-D23DB7754EDB}']
  { getters & setters } 

    function get_Presentation: DNIPresentation;

  { propertys } 

    property Presentation: DNIPresentation read get_Presentation;
  end;

  //-------------namespace: Aspose.Slides----------------
  [DNTypeName('Aspose.Slides.ISlideComponent')]
  DNISlideComponent = interface(DNIPresentationComponent)
  ['{052200BE-011C-4905-926E-1CBB4BA120BB}']
  { getters & setters } 

    function get_Slide: DNIBaseSlide;
    function get_AsIPresentationComponent: DNIPresentationComponent;

  { propertys } 

    property Slide: DNIBaseSlide read get_Slide;
    property AsIPresentationComponent: DNIPresentationComponent read get_AsIPresentationComponent;
  end;

  //-------------namespace: Aspose.Slides.Charts----------------
  [DNTypeName('Aspose.Slides.Charts.IAxis')]
  DNIAxis = interface(DNISlideComponent)
  ['{11D375AD-C686-48A1-A377-264C96BFACC0}']
  { getters & setters } 

    function get_AxisBetweenCategories: Boolean;
    procedure set_AxisBetweenCategories(value: Boolean);
    function get_CrossAt: Single;
    procedure set_CrossAt(value: Single);
    function get_DisplayUnit: DNDisplayUnitType;
    procedure set_DisplayUnit(value: DNDisplayUnitType);
    function get_ActualMaxValue: Double;
    function get_ActualMinValue: Double;
    function get_ActualMajorUnit: Double;
    function get_ActualMinorUnit: Double;
    function get_ActualMajorUnitScale: DNTimeUnitType;
    function get_ActualMinorUnitScale: DNTimeUnitType;
    function get_IsAutomaticMaxValue: Boolean;
    procedure set_IsAutomaticMaxValue(value: Boolean);
    function get_MaxValue: Double;
    procedure set_MaxValue(value: Double);
    function get_MinorUnit: Double;
    procedure set_MinorUnit(value: Double);
    function get_IsAutomaticMinorUnit: Boolean;
    procedure set_IsAutomaticMinorUnit(value: Boolean);
    function get_MajorUnit: Double;
    procedure set_MajorUnit(value: Double);
    function get_IsAutomaticMajorUnit: Boolean;
    procedure set_IsAutomaticMajorUnit(value: Boolean);
    function get_IsAutomaticMinValue: Boolean;
    procedure set_IsAutomaticMinValue(value: Boolean);
    function get_MinValue: Double;
    procedure set_MinValue(value: Double);
    function get_IsLogarithmic: Boolean;
    procedure set_IsLogarithmic(value: Boolean);
    function get_LogBase: Double;
    procedure set_LogBase(value: Double);
    function get_IsPlotOrderReversed: Boolean;
    procedure set_IsPlotOrderReversed(value: Boolean);
    function get_IsVisible: Boolean;
    procedure set_IsVisible(value: Boolean);
    function get_MajorTickMark: DNTickMarkType;
    procedure set_MajorTickMark(value: DNTickMarkType);
    function get_MinorTickMark: DNTickMarkType;
    procedure set_MinorTickMark(value: DNTickMarkType);
    function get_TickLabelPosition: DNTickLabelPositionType;
    procedure set_TickLabelPosition(value: DNTickLabelPositionType);
    function get_MajorUnitScale: DNTimeUnitType;
    procedure set_MajorUnitScale(value: DNTimeUnitType);
    function get_MinorUnitScale: DNTimeUnitType;
    procedure set_MinorUnitScale(value: DNTimeUnitType);
    function get_BaseUnitScale: DNTimeUnitType;
    procedure set_BaseUnitScale(value: DNTimeUnitType);
    function get_MinorGridLinesFormat: DNIChartLinesFormat;
    function get_MajorGridLinesFormat: DNIChartLinesFormat;
    function get_ShowMinorGridLines: Boolean;
    function get_ShowMajorGridLines: Boolean;
    function get_Format: DNIAxisFormat;
    function get_Title: DNIChartTitle;
    function get_CrossType: DNCrossesType;
    procedure set_CrossType(value: DNCrossesType);
    function get_Position: DNAxisPositionType;
    procedure set_Position(value: DNAxisPositionType);
    function get_HasTitle: Boolean;
    procedure set_HasTitle(value: Boolean);
    function get_NumberFormat: string;
    procedure set_NumberFormat(value: string);
    function get_IsNumberFormatLinkedToSource: Boolean;
    procedure set_IsNumberFormatLinkedToSource(value: Boolean);
    function get_TickLabelRotationAngle: Single;
    procedure set_TickLabelRotationAngle(value: Single);
    function get_TickLabelSpacing: UInt32;
    procedure set_TickLabelSpacing(value: UInt32);
    function get_IsAutomaticTickLabelSpacing: Boolean;
    procedure set_IsAutomaticTickLabelSpacing(value: Boolean);
    function get_TickMarksSpacing: UInt32;
    procedure set_TickMarksSpacing(value: UInt32);
    function get_IsAutomaticTickMarksSpacing: Boolean;
    procedure set_IsAutomaticTickMarksSpacing(value: Boolean);
    function get_LabelOffset: UInt16;
    procedure set_LabelOffset(value: UInt16);
    function get_CategoryAxisType: DNCategoryAxisType;
    procedure set_CategoryAxisType(value: DNCategoryAxisType);
    function get_AggregationType: DNAxisAggregationType;
    procedure set_AggregationType(value: DNAxisAggregationType);
    function get_BinWidth: Double;
    procedure set_BinWidth(value: Double);
    function get_NumberOfBins: UInt32;
    procedure set_NumberOfBins(value: UInt32);
    function get_IsOverflowBin: Boolean;
    procedure set_IsOverflowBin(value: Boolean);
    function get_IsAutomaticOverflowBin: Boolean;
    procedure set_IsAutomaticOverflowBin(value: Boolean);
    function get_OverflowBin: Double;
    procedure set_OverflowBin(value: Double);
    function get_IsUnderflowBin: Boolean;
    procedure set_IsUnderflowBin(value: Boolean);
    function get_IsAutomaticUnderflowBin: Boolean;
    procedure set_IsAutomaticUnderflowBin(value: Boolean);
    function get_UnderflowBin: Double;
    procedure set_UnderflowBin(value: Double);
    function get_AsIFormattedTextContainer: DNIFormattedTextContainer;

  { methods } 

    procedure SetCategoryAxisTypeAutomatically;

  { propertys } 

    property AxisBetweenCategories: Boolean read get_AxisBetweenCategories write set_AxisBetweenCategories;
    property CrossAt: Single read get_CrossAt write set_CrossAt;
    property DisplayUnit: DNDisplayUnitType read get_DisplayUnit write set_DisplayUnit;
    property ActualMaxValue: Double read get_ActualMaxValue;
    property ActualMinValue: Double read get_ActualMinValue;
    property ActualMajorUnit: Double read get_ActualMajorUnit;
    property ActualMinorUnit: Double read get_ActualMinorUnit;
    property ActualMajorUnitScale: DNTimeUnitType read get_ActualMajorUnitScale;
    property ActualMinorUnitScale: DNTimeUnitType read get_ActualMinorUnitScale;
    property IsAutomaticMaxValue: Boolean read get_IsAutomaticMaxValue write set_IsAutomaticMaxValue;
    property MaxValue: Double read get_MaxValue write set_MaxValue;
    property MinorUnit: Double read get_MinorUnit write set_MinorUnit;
    property IsAutomaticMinorUnit: Boolean read get_IsAutomaticMinorUnit write set_IsAutomaticMinorUnit;
    property MajorUnit: Double read get_MajorUnit write set_MajorUnit;
    property IsAutomaticMajorUnit: Boolean read get_IsAutomaticMajorUnit write set_IsAutomaticMajorUnit;
    property IsAutomaticMinValue: Boolean read get_IsAutomaticMinValue write set_IsAutomaticMinValue;
    property MinValue: Double read get_MinValue write set_MinValue;
    property IsLogarithmic: Boolean read get_IsLogarithmic write set_IsLogarithmic;
    property LogBase: Double read get_LogBase write set_LogBase;
    property IsPlotOrderReversed: Boolean read get_IsPlotOrderReversed write set_IsPlotOrderReversed;
    property IsVisible: Boolean read get_IsVisible write set_IsVisible;
    property MajorTickMark: DNTickMarkType read get_MajorTickMark write set_MajorTickMark;
    property MinorTickMark: DNTickMarkType read get_MinorTickMark write set_MinorTickMark;
    property TickLabelPosition: DNTickLabelPositionType read get_TickLabelPosition write set_TickLabelPosition;
    property MajorUnitScale: DNTimeUnitType read get_MajorUnitScale write set_MajorUnitScale;
    property MinorUnitScale: DNTimeUnitType read get_MinorUnitScale write set_MinorUnitScale;
    property BaseUnitScale: DNTimeUnitType read get_BaseUnitScale write set_BaseUnitScale;
    property MinorGridLinesFormat: DNIChartLinesFormat read get_MinorGridLinesFormat;
    property MajorGridLinesFormat: DNIChartLinesFormat read get_MajorGridLinesFormat;
    property ShowMinorGridLines: Boolean read get_ShowMinorGridLines;
    property ShowMajorGridLines: Boolean read get_ShowMajorGridLines;
    property Format: DNIAxisFormat read get_Format;
    property Title: DNIChartTitle read get_Title;
    property CrossType: DNCrossesType read get_CrossType write set_CrossType;
    property Position: DNAxisPositionType read get_Position write set_Position;
    property HasTitle: Boolean read get_HasTitle write set_HasTitle;
    property NumberFormat: string read get_NumberFormat write set_NumberFormat;
    property IsNumberFormatLinkedToSource: Boolean read get_IsNumberFormatLinkedToSource write set_IsNumberFormatLinkedToSource;
    property TickLabelRotationAngle: Single read get_TickLabelRotationAngle write set_TickLabelRotationAngle;
    property TickLabelSpacing: UInt32 read get_TickLabelSpacing write set_TickLabelSpacing;
    property IsAutomaticTickLabelSpacing: Boolean read get_IsAutomaticTickLabelSpacing write set_IsAutomaticTickLabelSpacing;
    property TickMarksSpacing: UInt32 read get_TickMarksSpacing write set_TickMarksSpacing;
    property IsAutomaticTickMarksSpacing: Boolean read get_IsAutomaticTickMarksSpacing write set_IsAutomaticTickMarksSpacing;
    property LabelOffset: UInt16 read get_LabelOffset write set_LabelOffset;
    property CategoryAxisType: DNCategoryAxisType read get_CategoryAxisType write set_CategoryAxisType;
    property AggregationType: DNAxisAggregationType read get_AggregationType write set_AggregationType;
    property BinWidth: Double read get_BinWidth write set_BinWidth;
    property NumberOfBins: UInt32 read get_NumberOfBins write set_NumberOfBins;
    property IsOverflowBin: Boolean read get_IsOverflowBin write set_IsOverflowBin;
    property IsAutomaticOverflowBin: Boolean read get_IsAutomaticOverflowBin write set_IsAutomaticOverflowBin;
    property OverflowBin: Double read get_OverflowBin write set_OverflowBin;
    property IsUnderflowBin: Boolean read get_IsUnderflowBin write set_IsUnderflowBin;
    property IsAutomaticUnderflowBin: Boolean read get_IsAutomaticUnderflowBin write set_IsAutomaticUnderflowBin;
    property UnderflowBin: Double read get_UnderflowBin write set_UnderflowBin;
    property AsIFormattedTextContainer: DNIFormattedTextContainer read get_AsIFormattedTextContainer;
  end;

  //-------------namespace: Aspose.Slides.Charts----------------
  [DNTypeName('Aspose.Slides.Charts.IChart')]
  DNIChart = interface(DNISlideComponent)
  ['{4CB337F8-3286-42E4-B2B2-EDE6786D141E}']
  { getters & setters } 

    function get_PlotVisibleCellsOnly: Boolean;
    procedure set_PlotVisibleCellsOnly(value: Boolean);
    function get_DisplayBlanksAs: DNDisplayBlanksAsType;
    procedure set_DisplayBlanksAs(value: DNDisplayBlanksAsType);
    function get_ChartData: DNIChartData;
    function get_HasTitle: Boolean;
    procedure set_HasTitle(value: Boolean);
    function get_ChartTitle: DNIChartTitle;
    function get_HasDataTable: Boolean;
    procedure set_HasDataTable(value: Boolean);
    function get_HasLegend: Boolean;
    procedure set_HasLegend(value: Boolean);
    function get_Legend: DNILegend;
    function get_ChartDataTable: DNIDataTable;
    function get_Style: DNStyleType;
    procedure set_Style(value: DNStyleType);
    function get_Type: DNChartType;
    procedure set_Type(value: DNChartType);
    function get_PlotArea: DNIChartPlotArea;
    function get_Rotation3D: DNIRotation3D;
    function get_BackWall: DNIChartWall;
    function get_SideWall: DNIChartWall;
    function get_Floor: DNIChartWall;
    function get_UserShapes: DNIGroupShape;
    function get_Axes: DNIAxesManager;
    function get_ShowDataLabelsOverMaximum: Boolean;
    procedure set_ShowDataLabelsOverMaximum(value: Boolean);
    function get_HasRoundedCorners: Boolean;
    procedure set_HasRoundedCorners(value: Boolean);
    function get_AsIGraphicalObject: DNIGraphicalObject;
    function get_AsIFormattedTextContainer: DNIFormattedTextContainer;
    function get_AsIOverrideThemeable: DNIOverrideThemeable;

  { methods } 

    procedure ValidateChartLayout;

  { propertys } 

    property PlotVisibleCellsOnly: Boolean read get_PlotVisibleCellsOnly write set_PlotVisibleCellsOnly;
    property DisplayBlanksAs: DNDisplayBlanksAsType read get_DisplayBlanksAs write set_DisplayBlanksAs;
    property ChartData: DNIChartData read get_ChartData;
    property HasTitle: Boolean read get_HasTitle write set_HasTitle;
    property ChartTitle: DNIChartTitle read get_ChartTitle;
    property HasDataTable: Boolean read get_HasDataTable write set_HasDataTable;
    property HasLegend: Boolean read get_HasLegend write set_HasLegend;
    property Legend: DNILegend read get_Legend;
    property ChartDataTable: DNIDataTable read get_ChartDataTable;
    property Style: DNStyleType read get_Style write set_Style;
    property &Type: DNChartType read get_Type write set_Type;
    property PlotArea: DNIChartPlotArea read get_PlotArea;
    property Rotation3D: DNIRotation3D read get_Rotation3D;
    property BackWall: DNIChartWall read get_BackWall;
    property SideWall: DNIChartWall read get_SideWall;
    property Floor: DNIChartWall read get_Floor;
    property UserShapes: DNIGroupShape read get_UserShapes;
    property Axes: DNIAxesManager read get_Axes;
    property ShowDataLabelsOverMaximum: Boolean read get_ShowDataLabelsOverMaximum write set_ShowDataLabelsOverMaximum;
    property HasRoundedCorners: Boolean read get_HasRoundedCorners write set_HasRoundedCorners;
    property AsIGraphicalObject: DNIGraphicalObject read get_AsIGraphicalObject;
    property AsIFormattedTextContainer: DNIFormattedTextContainer read get_AsIFormattedTextContainer;
    property AsIOverrideThemeable: DNIOverrideThemeable read get_AsIOverrideThemeable;
  end;

  //-------------namespace: Aspose.Slides.Charts----------------
  [DNTypeName('Aspose.Slides.Charts.IChartComponent')]
  DNIChartComponent = interface(DNISlideComponent)
  ['{6B5D49CF-7267-4622-9FC2-560AE98FBA4A}']
  { getters & setters } 

    function get_Chart: DNIChart;
    function get_AsISlideComponent: DNISlideComponent;

  { propertys } 

    property Chart: DNIChart read get_Chart;
    property AsISlideComponent: DNISlideComponent read get_AsISlideComponent;
  end;

  //-------------namespace: Aspose.Slides.Charts----------------
  [DNTypeName('Aspose.Slides.Charts.IChartSeries')]
  DNIChartSeries = interface(DNISlideComponent)
  ['{E3260D81-77BF-4816-BBEC-31407105ED75}']
  { getters & setters } 

    function get_Explosion: Int32;
    procedure set_Explosion(value: Int32);
    function get_Smooth: Boolean;
    procedure set_Smooth(value: Boolean);
    function get_Marker: DNIMarker;
    function get_Bar3DShape: DNChartShapeType;
    procedure set_Bar3DShape(value: DNChartShapeType);
    function get_Name: DNIStringChartValue;
    function get_DataPoints: DNIChartDataPointCollection;
    function get_Type: DNChartType;
    procedure set_Type(value: DNChartType);
    function get_ParentSeriesGroup: DNIChartSeriesGroup;
    function get_Format: DNIFormat;
    function get_Order: Int32;
    procedure set_Order(value: Int32);
    function get_Labels: DNIDataLabelCollection;
    function get_TrendLines: DNITrendlineCollection;
    function get_ErrorBarsXFormat: DNIErrorBarsFormat;
    function get_ErrorBarsYFormat: DNIErrorBarsFormat;
    function get_PlotOnSecondAxis: Boolean;
    procedure set_PlotOnSecondAxis(value: Boolean);
    function get_NumberFormatOfValues: string;
    procedure set_NumberFormatOfValues(value: string);
    function get_NumberFormatOfXValues: string;
    procedure set_NumberFormatOfXValues(value: string);
    function get_NumberFormatOfYValues: string;
    procedure set_NumberFormatOfYValues(value: string);
    function get_NumberFormatOfBubbleSizes: string;
    procedure set_NumberFormatOfBubbleSizes(value: string);
    function get_InvertIfNegative: Boolean;
    procedure set_InvertIfNegative(value: Boolean);
    function get_InvertedSolidFillColor: DNIColorFormat;
    function get_RelatedLegendEntry: DNILegendEntryProperties;
    function get_ShowInnerPoints: Boolean;
    procedure set_ShowInnerPoints(value: Boolean);
    function get_ShowOutlierPoints: Boolean;
    procedure set_ShowOutlierPoints(value: Boolean);
    function get_ShowMeanMarkers: Boolean;
    procedure set_ShowMeanMarkers(value: Boolean);
    function get_ShowMeanLine: Boolean;
    procedure set_ShowMeanLine(value: Boolean);
    function get_QuartileMethod: DNQuartileMethodType;
    procedure set_QuartileMethod(value: DNQuartileMethodType);
    function get_ShowConnectorLines: Boolean;
    procedure set_ShowConnectorLines(value: Boolean);
    function get_ParentLabelLayout: DNParentLabelLayoutType;
    procedure set_ParentLabelLayout(value: DNParentLabelLayoutType);
    function get_BubbleSizeScale: Int32;
    function get_HasUpDownBars: Boolean;
    function get_GapWidth: Int32;
    function get_GapDepth: Int32;
    function get_IsColorVaried: Boolean;
    function get_HasSeriesLines: Boolean;
    function get_Overlap: SByte;
    function get_SecondPieSize: UInt16;
    function get_PieSplitPosition: Double;
    function get_PieSplitBy: DNPieSplitType;
    function get_DoughnutHoleSize: Byte;
    function get_FirstSliceAngle: UInt16;
    function get_PieSplitCustomPoints: DNIPieSplitCustomPointCollection;
    function get_BubbleSizeRepresentation: DNBubbleSizeRepresentationType;
    function get_AsIChartComponent: DNIChartComponent;

  { methods } 

    function GetAutomaticSeriesColor: DDN.System.Drawing.DNColor;

  { propertys } 

    property Explosion: Int32 read get_Explosion write set_Explosion;
    property Smooth: Boolean read get_Smooth write set_Smooth;
    property Marker: DNIMarker read get_Marker;
    property Bar3DShape: DNChartShapeType read get_Bar3DShape write set_Bar3DShape;
    property Name: DNIStringChartValue read get_Name;
    property DataPoints: DNIChartDataPointCollection read get_DataPoints;
    property &Type: DNChartType read get_Type write set_Type;
    property ParentSeriesGroup: DNIChartSeriesGroup read get_ParentSeriesGroup;
    property Format: DNIFormat read get_Format;
    property Order: Int32 read get_Order write set_Order;
    property Labels: DNIDataLabelCollection read get_Labels;
    property TrendLines: DNITrendlineCollection read get_TrendLines;
    property ErrorBarsXFormat: DNIErrorBarsFormat read get_ErrorBarsXFormat;
    property ErrorBarsYFormat: DNIErrorBarsFormat read get_ErrorBarsYFormat;
    property PlotOnSecondAxis: Boolean read get_PlotOnSecondAxis write set_PlotOnSecondAxis;
    property NumberFormatOfValues: string read get_NumberFormatOfValues write set_NumberFormatOfValues;
    property NumberFormatOfXValues: string read get_NumberFormatOfXValues write set_NumberFormatOfXValues;
    property NumberFormatOfYValues: string read get_NumberFormatOfYValues write set_NumberFormatOfYValues;
    property NumberFormatOfBubbleSizes: string read get_NumberFormatOfBubbleSizes write set_NumberFormatOfBubbleSizes;
    property InvertIfNegative: Boolean read get_InvertIfNegative write set_InvertIfNegative;
    property InvertedSolidFillColor: DNIColorFormat read get_InvertedSolidFillColor;
    property RelatedLegendEntry: DNILegendEntryProperties read get_RelatedLegendEntry;
    property ShowInnerPoints: Boolean read get_ShowInnerPoints write set_ShowInnerPoints;
    property ShowOutlierPoints: Boolean read get_ShowOutlierPoints write set_ShowOutlierPoints;
    property ShowMeanMarkers: Boolean read get_ShowMeanMarkers write set_ShowMeanMarkers;
    property ShowMeanLine: Boolean read get_ShowMeanLine write set_ShowMeanLine;
    property QuartileMethod: DNQuartileMethodType read get_QuartileMethod write set_QuartileMethod;
    property ShowConnectorLines: Boolean read get_ShowConnectorLines write set_ShowConnectorLines;
    property ParentLabelLayout: DNParentLabelLayoutType read get_ParentLabelLayout write set_ParentLabelLayout;
    property BubbleSizeScale: Int32 read get_BubbleSizeScale;
    property HasUpDownBars: Boolean read get_HasUpDownBars;
    property GapWidth: Int32 read get_GapWidth;
    property GapDepth: Int32 read get_GapDepth;
    property IsColorVaried: Boolean read get_IsColorVaried;
    property HasSeriesLines: Boolean read get_HasSeriesLines;
    property Overlap: SByte read get_Overlap;
    property SecondPieSize: UInt16 read get_SecondPieSize;
    property PieSplitPosition: Double read get_PieSplitPosition;
    property PieSplitBy: DNPieSplitType read get_PieSplitBy;
    property DoughnutHoleSize: Byte read get_DoughnutHoleSize;
    property FirstSliceAngle: UInt16 read get_FirstSliceAngle;
    property PieSplitCustomPoints: DNIPieSplitCustomPointCollection read get_PieSplitCustomPoints;
    property BubbleSizeRepresentation: DNBubbleSizeRepresentationType read get_BubbleSizeRepresentation;
    property AsIChartComponent: DNIChartComponent read get_AsIChartComponent;
  end;

  //-------------namespace: Aspose.Slides.Charts----------------
  [DNTypeName('Aspose.Slides.Charts.IChartSeriesGroup')]
  DNIChartSeriesGroup = interface(DNISlideComponent)
  ['{285869C4-F917-4533-8FBE-8E6E4A48C941}']
  { getters & setters } 

    function get_Type: DNCombinableSeriesTypesGroup;
    function get_PlotOnSecondAxis: Boolean;
    function get_Series: DNIChartSeriesReadonlyCollection;
    function get_Item(index: Int32): DNIChartSeries;
    function get_UpDownBars: DNIUpDownBarsManager;
    function get_GapWidth: UInt16;
    procedure set_GapWidth(value: UInt16);
    function get_GapDepth: UInt16;
    procedure set_GapDepth(value: UInt16);
    function get_FirstSliceAngle: UInt16;
    procedure set_FirstSliceAngle(value: UInt16);
    function get_IsColorVaried: Boolean;
    procedure set_IsColorVaried(value: Boolean);
    function get_HasSeriesLines: Boolean;
    procedure set_HasSeriesLines(value: Boolean);
    function get_Overlap: SByte;
    procedure set_Overlap(value: SByte);
    function get_SecondPieSize: UInt16;
    procedure set_SecondPieSize(value: UInt16);
    function get_PieSplitPosition: Double;
    procedure set_PieSplitPosition(value: Double);
    function get_PieSplitBy: DNPieSplitType;
    procedure set_PieSplitBy(value: DNPieSplitType);
    function get_PieSplitCustomPoints: DNIPieSplitCustomPointCollection;
    function get_DoughnutHoleSize: Byte;
    procedure set_DoughnutHoleSize(value: Byte);
    function get_BubbleSizeScale: Int32;
    procedure set_BubbleSizeScale(value: Int32);
    function get_HiLowLinesFormat: DNIChartLinesFormat;
    function get_BubbleSizeRepresentation: DNBubbleSizeRepresentationType;
    procedure set_BubbleSizeRepresentation(value: DNBubbleSizeRepresentationType);
    function get_AsIChartComponent: DNIChartComponent;

  { propertys } 

    property &Type: DNCombinableSeriesTypesGroup read get_Type;
    property PlotOnSecondAxis: Boolean read get_PlotOnSecondAxis;
    property Series: DNIChartSeriesReadonlyCollection read get_Series;
    property Item[index: Int32]: DNIChartSeries read get_Item; default;
    property UpDownBars: DNIUpDownBarsManager read get_UpDownBars;
    property GapWidth: UInt16 read get_GapWidth write set_GapWidth;
    property GapDepth: UInt16 read get_GapDepth write set_GapDepth;
    property FirstSliceAngle: UInt16 read get_FirstSliceAngle write set_FirstSliceAngle;
    property IsColorVaried: Boolean read get_IsColorVaried write set_IsColorVaried;
    property HasSeriesLines: Boolean read get_HasSeriesLines write set_HasSeriesLines;
    property Overlap: SByte read get_Overlap write set_Overlap;
    property SecondPieSize: UInt16 read get_SecondPieSize write set_SecondPieSize;
    property PieSplitPosition: Double read get_PieSplitPosition write set_PieSplitPosition;
    property PieSplitBy: DNPieSplitType read get_PieSplitBy write set_PieSplitBy;
    property PieSplitCustomPoints: DNIPieSplitCustomPointCollection read get_PieSplitCustomPoints;
    property DoughnutHoleSize: Byte read get_DoughnutHoleSize write set_DoughnutHoleSize;
    property BubbleSizeScale: Int32 read get_BubbleSizeScale write set_BubbleSizeScale;
    property HiLowLinesFormat: DNIChartLinesFormat read get_HiLowLinesFormat;
    property BubbleSizeRepresentation: DNBubbleSizeRepresentationType read get_BubbleSizeRepresentation write set_BubbleSizeRepresentation;
    property AsIChartComponent: DNIChartComponent read get_AsIChartComponent;
  end;

  //-------------namespace: Aspose.Slides.Charts----------------
  [DNTypeName('Aspose.Slides.Charts.IDataLabelFormat')]
  DNIDataLabelFormat = interface(DNISlideComponent)
  ['{76AE7DC6-EB92-4F70-B348-355F20C69147}']
  { getters & setters } 

    function get_IsNumberFormatLinkedToSource: Boolean;
    procedure set_IsNumberFormatLinkedToSource(value: Boolean);
    function get_NumberFormat: string;
    procedure set_NumberFormat(value: string);
    function get_Format: DNIFormat;
    function get_Position: DNLegendDataLabelPosition;
    procedure set_Position(value: DNLegendDataLabelPosition);
    function get_ShowLegendKey: Boolean;
    procedure set_ShowLegendKey(value: Boolean);
    function get_ShowValue: Boolean;
    procedure set_ShowValue(value: Boolean);
    function get_ShowCategoryName: Boolean;
    procedure set_ShowCategoryName(value: Boolean);
    function get_ShowSeriesName: Boolean;
    procedure set_ShowSeriesName(value: Boolean);
    function get_ShowPercentage: Boolean;
    procedure set_ShowPercentage(value: Boolean);
    function get_ShowBubbleSize: Boolean;
    procedure set_ShowBubbleSize(value: Boolean);
    function get_ShowLeaderLines: Boolean;
    procedure set_ShowLeaderLines(value: Boolean);
    function get_ShowLabelAsDataCallout: Boolean;
    procedure set_ShowLabelAsDataCallout(value: Boolean);
    function get_ShowLabelValueFromCell: Boolean;
    procedure set_ShowLabelValueFromCell(value: Boolean);
    function get_Separator: string;
    procedure set_Separator(value: string);
    function get_AsIFormattedTextContainer: DNIFormattedTextContainer;

  { propertys } 

    property IsNumberFormatLinkedToSource: Boolean read get_IsNumberFormatLinkedToSource write set_IsNumberFormatLinkedToSource;
    property NumberFormat: string read get_NumberFormat write set_NumberFormat;
    property Format: DNIFormat read get_Format;
    property Position: DNLegendDataLabelPosition read get_Position write set_Position;
    property ShowLegendKey: Boolean read get_ShowLegendKey write set_ShowLegendKey;
    property ShowValue: Boolean read get_ShowValue write set_ShowValue;
    property ShowCategoryName: Boolean read get_ShowCategoryName write set_ShowCategoryName;
    property ShowSeriesName: Boolean read get_ShowSeriesName write set_ShowSeriesName;
    property ShowPercentage: Boolean read get_ShowPercentage write set_ShowPercentage;
    property ShowBubbleSize: Boolean read get_ShowBubbleSize write set_ShowBubbleSize;
    property ShowLeaderLines: Boolean read get_ShowLeaderLines write set_ShowLeaderLines;
    property ShowLabelAsDataCallout: Boolean read get_ShowLabelAsDataCallout write set_ShowLabelAsDataCallout;
    property ShowLabelValueFromCell: Boolean read get_ShowLabelValueFromCell write set_ShowLabelValueFromCell;
    property Separator: string read get_Separator write set_Separator;
    property AsIFormattedTextContainer: DNIFormattedTextContainer read get_AsIFormattedTextContainer;
  end;

  //-------------namespace: Aspose.Slides.Charts----------------
  [DNTypeName('Aspose.Slides.Charts.IDataTable')]
  DNIDataTable = interface(DNISlideComponent)
  ['{9D76731E-13DE-4C35-A7EC-61B496EE2A91}']
  { getters & setters } 

    function get_Format: DNIFormat;
    function get_HasBorderHorizontal: Boolean;
    procedure set_HasBorderHorizontal(value: Boolean);
    function get_HasBorderOutline: Boolean;
    procedure set_HasBorderOutline(value: Boolean);
    function get_HasBorderVertical: Boolean;
    procedure set_HasBorderVertical(value: Boolean);
    function get_ShowLegendKey: Boolean;
    procedure set_ShowLegendKey(value: Boolean);
    function get_AsIFormattedTextContainer: DNIFormattedTextContainer;

  { propertys } 

    property Format: DNIFormat read get_Format;
    property HasBorderHorizontal: Boolean read get_HasBorderHorizontal write set_HasBorderHorizontal;
    property HasBorderOutline: Boolean read get_HasBorderOutline write set_HasBorderOutline;
    property HasBorderVertical: Boolean read get_HasBorderVertical write set_HasBorderVertical;
    property ShowLegendKey: Boolean read get_ShowLegendKey write set_ShowLegendKey;
    property AsIFormattedTextContainer: DNIFormattedTextContainer read get_AsIFormattedTextContainer;
  end;

  //-------------namespace: Aspose.Slides.Charts----------------
  [DNTypeName('Aspose.Slides.Charts.IErrorBarsFormat')]
  DNIErrorBarsFormat = interface(DNISlideComponent)
  ['{336CF957-3066-4A8D-A0B3-1905D4D43B71}']
  { getters & setters } 

    function get_Type: DNErrorBarType;
    procedure set_Type(value: DNErrorBarType);
    function get_ValueType: DNErrorBarValueType;
    procedure set_ValueType(value: DNErrorBarValueType);
    function get_HasEndCap: Boolean;
    procedure set_HasEndCap(value: Boolean);
    function get_Value: Single;
    procedure set_Value(value: Single);
    function get_Format: DNIFormat;
    procedure set_Format(value: DNIFormat);
    function get_IsVisible: Boolean;
    procedure set_IsVisible(value: Boolean);
    function get_AsIChartComponent: DNIChartComponent;

  { propertys } 

    property &Type: DNErrorBarType read get_Type write set_Type;
    property ValueType: DNErrorBarValueType read get_ValueType write set_ValueType;
    property HasEndCap: Boolean read get_HasEndCap write set_HasEndCap;
    property Value: Single read get_Value write set_Value;
    property Format: DNIFormat read get_Format write set_Format;
    property IsVisible: Boolean read get_IsVisible write set_IsVisible;
    property AsIChartComponent: DNIChartComponent read get_AsIChartComponent;
  end;

  //-------------namespace: Aspose.Slides.Charts----------------
  [DNTypeName('Aspose.Slides.Charts.IFormattedTextContainer')]
  DNIFormattedTextContainer = interface(DNISlideComponent)
  ['{CE9203E2-F93D-4934-9D34-E2C57479D3C4}']
  { getters & setters } 

    function get_TextFormat: DNIChartTextFormat;
    function get_AsIChartComponent: DNIChartComponent;

  { propertys } 

    property TextFormat: DNIChartTextFormat read get_TextFormat;
    property AsIChartComponent: DNIChartComponent read get_AsIChartComponent;
  end;

  //-------------namespace: Aspose.Slides.Charts----------------
  [DNTypeName('Aspose.Slides.Charts.ILayoutable')]
  DNILayoutable = interface(DNISlideComponent)
  ['{99110408-B10A-4512-BE85-7ED0EF157776}']
  { getters & setters } 

    function get_X: Single;
    procedure set_X(value: Single);
    function get_Y: Single;
    procedure set_Y(value: Single);
    function get_Width: Single;
    procedure set_Width(value: Single);
    function get_Height: Single;
    procedure set_Height(value: Single);
    function get_Right: Single;
    function get_Bottom: Single;
    function get_AsIChartComponent: DNIChartComponent;

  { propertys } 

    property X: Single read get_X write set_X;
    property Y: Single read get_Y write set_Y;
    property Width: Single read get_Width write set_Width;
    property Height: Single read get_Height write set_Height;
    property Right: Single read get_Right;
    property Bottom: Single read get_Bottom;
    property AsIChartComponent: DNIChartComponent read get_AsIChartComponent;
  end;

  //-------------namespace: Aspose.Slides.Charts----------------
  [DNTypeName('Aspose.Slides.Charts.IChartPlotArea')]
  DNIChartPlotArea = interface(DNILayoutable)
  ['{133FE589-BB5A-4920-A231-FC6E28D76E36}']
  { getters & setters } 

    function get_Format: DNIFormat;
    function get_AsILayoutable: DNILayoutable;
    function get_AsIActualLayout: DNIActualLayout;
    function get_LayoutTargetType: DNLayoutTargetType;
    procedure set_LayoutTargetType(value: DNLayoutTargetType);

  { propertys } 

    property Format: DNIFormat read get_Format;
    property AsILayoutable: DNILayoutable read get_AsILayoutable;
    property AsIActualLayout: DNIActualLayout read get_AsIActualLayout;
    property LayoutTargetType: DNLayoutTargetType read get_LayoutTargetType write set_LayoutTargetType;
  end;

  //-------------namespace: Aspose.Slides.Charts----------------
  [DNTypeName('Aspose.Slides.Charts.IChartTitle')]
  DNIChartTitle = interface(DNILayoutable)
  ['{2B1D0348-78E2-4E4B-AA40-1D0BBC1D7436}']
  { getters & setters } 

    function get_Overlay: Boolean;
    procedure set_Overlay(value: Boolean);
    function get_Format: DNIFormat;
    function get_AsILayoutable: DNILayoutable;
    function get_AsIOverridableText: DNIOverridableText;

  { propertys } 

    property Overlay: Boolean read get_Overlay write set_Overlay;
    property Format: DNIFormat read get_Format;
    property AsILayoutable: DNILayoutable read get_AsILayoutable;
    property AsIOverridableText: DNIOverridableText read get_AsIOverridableText;
  end;

  //-------------namespace: Aspose.Slides.Charts----------------
  [DNTypeName('Aspose.Slides.Charts.IDataLabel')]
  DNIDataLabel = interface(DNILayoutable)
  ['{2ED29D6C-A659-403A-8F59-54153EA2F03B}']
  { getters & setters } 

    function get_IsVisible: Boolean;
    function get_DataLabelFormat: DNIDataLabelFormat;
    function get_ValueFromCell: DNIChartDataCell;
    procedure set_ValueFromCell(value: DNIChartDataCell);
    function get_AsILayoutable: DNILayoutable;
    function get_AsIOverridableText: DNIOverridableText;
    function get_AsIActualLayout: DNIActualLayout;

  { methods } 

    procedure Hide;
    function GetActualLabelText: string;

  { propertys } 

    property IsVisible: Boolean read get_IsVisible;
    property DataLabelFormat: DNIDataLabelFormat read get_DataLabelFormat;
    property ValueFromCell: DNIChartDataCell read get_ValueFromCell write set_ValueFromCell;
    property AsILayoutable: DNILayoutable read get_AsILayoutable;
    property AsIOverridableText: DNIOverridableText read get_AsIOverridableText;
    property AsIActualLayout: DNIActualLayout read get_AsIActualLayout;
  end;

  //-------------namespace: Aspose.Slides.Charts----------------
  [DNTypeName('Aspose.Slides.Charts.ILegend')]
  DNILegend = interface(DNILayoutable)
  ['{4E6DFC6E-DBC3-4B29-8DAF-D789D3A0F79E}']
  { getters & setters } 

    function get_Overlay: Boolean;
    procedure set_Overlay(value: Boolean);
    function get_Position: DNLegendPositionType;
    procedure set_Position(value: DNLegendPositionType);
    function get_Format: DNIFormat;
    function get_Entries: DNILegendEntryCollection;
    function get_AsILayoutable: DNILayoutable;
    function get_AsIFormattedTextContainer: DNIFormattedTextContainer;

  { propertys } 

    property Overlay: Boolean read get_Overlay write set_Overlay;
    property Position: DNLegendPositionType read get_Position write set_Position;
    property Format: DNIFormat read get_Format;
    property Entries: DNILegendEntryCollection read get_Entries;
    property AsILayoutable: DNILayoutable read get_AsILayoutable;
    property AsIFormattedTextContainer: DNIFormattedTextContainer read get_AsIFormattedTextContainer;
  end;

  //-------------namespace: Aspose.Slides.Charts----------------
  [DNTypeName('Aspose.Slides.Charts.ILegendEntryProperties')]
  DNILegendEntryProperties = interface(DNISlideComponent)
  ['{BC3D4F67-D2EF-4A56-9DC0-7096E26BCE7C}']
  { getters & setters } 

    function get_Hide: Boolean;
    procedure set_Hide(value: Boolean);
    function get_AsIFormattedTextContainer: DNIFormattedTextContainer;

  { propertys } 

    property Hide: Boolean read get_Hide write set_Hide;
    property AsIFormattedTextContainer: DNIFormattedTextContainer read get_AsIFormattedTextContainer;
  end;

  //-------------namespace: Aspose.Slides.Charts----------------
  [DNTypeName('Aspose.Slides.Charts.IOverridableText')]
  DNIOverridableText = interface(DNISlideComponent)
  ['{93F47DEE-5F12-4A64-A49C-95DBD065AB01}']
  { getters & setters } 

    function get_TextFrameForOverriding: DNITextFrame;
    function get_AsIFormattedTextContainer: DNIFormattedTextContainer;

  { methods } 

    function AddTextFrameForOverriding(text: string): DNITextFrame;

  { propertys } 

    property TextFrameForOverriding: DNITextFrame read get_TextFrameForOverriding;
    property AsIFormattedTextContainer: DNIFormattedTextContainer read get_AsIFormattedTextContainer;
  end;

  //-------------namespace: Aspose.Slides.Charts----------------
  [DNTypeName('Aspose.Slides.Charts.ITrendline')]
  DNITrendline = interface(DNISlideComponent)
  ['{97C2F9FA-3C6B-425D-8721-CBA4E68C3D76}']
  { getters & setters } 

    function get_TrendlineName: string;
    procedure set_TrendlineName(value: string);
    function get_TrendlineType: DNTrendlineType;
    procedure set_TrendlineType(value: DNTrendlineType);
    function get_Format: DNIFormat;
    procedure set_Format(value: DNIFormat);
    function get_Backward: Double;
    procedure set_Backward(value: Double);
    function get_Forward: Double;
    procedure set_Forward(value: Double);
    function get_Intercept: Double;
    procedure set_Intercept(value: Double);
    function get_DisplayEquation: Boolean;
    procedure set_DisplayEquation(value: Boolean);
    function get_Order: Byte;
    procedure set_Order(value: Byte);
    function get_Period: Byte;
    procedure set_Period(value: Byte);
    function get_DisplayRSquaredValue: Boolean;
    procedure set_DisplayRSquaredValue(value: Boolean);
    function get_RelatedLegendEntry: DNILegendEntryProperties;
    function get_AsIOverridableText: DNIOverridableText;

  { propertys } 

    property TrendlineName: string read get_TrendlineName write set_TrendlineName;
    property TrendlineType: DNTrendlineType read get_TrendlineType write set_TrendlineType;
    property Format: DNIFormat read get_Format write set_Format;
    property Backward: Double read get_Backward write set_Backward;
    property &Forward: Double read get_Forward write set_Forward;
    property Intercept: Double read get_Intercept write set_Intercept;
    property DisplayEquation: Boolean read get_DisplayEquation write set_DisplayEquation;
    property Order: Byte read get_Order write set_Order;
    property Period: Byte read get_Period write set_Period;
    property DisplayRSquaredValue: Boolean read get_DisplayRSquaredValue write set_DisplayRSquaredValue;
    property RelatedLegendEntry: DNILegendEntryProperties read get_RelatedLegendEntry;
    property AsIOverridableText: DNIOverridableText read get_AsIOverridableText;
  end;

  //-------------namespace: Aspose.Slides----------------
  [DNTypeName('Aspose.Slides.IAudioFrame')]
  DNIAudioFrame = interface(DNISlideComponent)
  ['{F576B679-2117-4CA0-80DC-ECA064BE0073}']
  { getters & setters } 

    function get_AudioCdStartTrack: Int32;
    procedure set_AudioCdStartTrack(value: Int32);
    function get_AudioCdStartTrackTime: Int32;
    procedure set_AudioCdStartTrackTime(value: Int32);
    function get_AudioCdEndTrack: Int32;
    procedure set_AudioCdEndTrack(value: Int32);
    function get_AudioCdEndTrackTime: Int32;
    procedure set_AudioCdEndTrackTime(value: Int32);
    function get_Volume: DNAudioVolumeMode;
    procedure set_Volume(value: DNAudioVolumeMode);
    function get_PlayMode: DNAudioPlayModePreset;
    procedure set_PlayMode(value: DNAudioPlayModePreset);
    function get_HideAtShowing: Boolean;
    procedure set_HideAtShowing(value: Boolean);
    function get_PlayLoopMode: Boolean;
    procedure set_PlayLoopMode(value: Boolean);
    function get_PlayAcrossSlides: Boolean;
    procedure set_PlayAcrossSlides(value: Boolean);
    function get_RewindAudio: Boolean;
    procedure set_RewindAudio(value: Boolean);
    function get_Embedded: Boolean;
    function get_LinkPathLong: string;
    procedure set_LinkPathLong(value: string);
    function get_EmbeddedAudio: DNIAudio;
    procedure set_EmbeddedAudio(value: DNIAudio);
    function get_AsIPictureFrame: DNIPictureFrame;

  { propertys } 

    property AudioCdStartTrack: Int32 read get_AudioCdStartTrack write set_AudioCdStartTrack;
    property AudioCdStartTrackTime: Int32 read get_AudioCdStartTrackTime write set_AudioCdStartTrackTime;
    property AudioCdEndTrack: Int32 read get_AudioCdEndTrack write set_AudioCdEndTrack;
    property AudioCdEndTrackTime: Int32 read get_AudioCdEndTrackTime write set_AudioCdEndTrackTime;
    property Volume: DNAudioVolumeMode read get_Volume write set_Volume;
    property PlayMode: DNAudioPlayModePreset read get_PlayMode write set_PlayMode;
    property HideAtShowing: Boolean read get_HideAtShowing write set_HideAtShowing;
    property PlayLoopMode: Boolean read get_PlayLoopMode write set_PlayLoopMode;
    property PlayAcrossSlides: Boolean read get_PlayAcrossSlides write set_PlayAcrossSlides;
    property RewindAudio: Boolean read get_RewindAudio write set_RewindAudio;
    property Embedded: Boolean read get_Embedded;
    property LinkPathLong: string read get_LinkPathLong write set_LinkPathLong;
    property EmbeddedAudio: DNIAudio read get_EmbeddedAudio write set_EmbeddedAudio;
    property AsIPictureFrame: DNIPictureFrame read get_AsIPictureFrame;
  end;

  //-------------namespace: Aspose.Slides----------------
  [DNTypeName('Aspose.Slides.IAutoShape')]
  DNIAutoShape = interface(DNISlideComponent)
  ['{C95895F4-0BED-4CC9-8ECB-07101D097182}']
  { getters & setters } 

    function get_ShapeLock: DNIAutoShapeLock;
    function get_AutoShapeLock: DNIAutoShapeLock;
    function get_TextFrame: DNITextFrame;
    function get_UseBackgroundFill: Boolean;
    procedure set_UseBackgroundFill(value: Boolean);
    function get_AsIGeometryShape: DNIGeometryShape;

  { methods } 

    function AddTextFrame(text: string): DNITextFrame;

  { propertys } 

    property ShapeLock: DNIAutoShapeLock read get_ShapeLock;
    property AutoShapeLock: DNIAutoShapeLock read get_AutoShapeLock;
    property TextFrame: DNITextFrame read get_TextFrame;
    property UseBackgroundFill: Boolean read get_UseBackgroundFill write set_UseBackgroundFill;
    property AsIGeometryShape: DNIGeometryShape read get_AsIGeometryShape;
  end;

  //-------------namespace: Aspose.Slides----------------
  [DNTypeName('Aspose.Slides.IBackground')]
  DNIBackground = interface(DNISlideComponent)
  ['{EDE46FD7-01C9-4DB5-B05E-B4B5CBC6AF2D}']
  { getters & setters } 

    function get_Type: DNBackgroundType;
    procedure set_Type(value: DNBackgroundType);
    function get_FillFormat: DNIFillFormat;
    function get_EffectFormat: DNIEffectFormat;
    function get_StyleColor: DNIColorFormat;
    function get_StyleIndex: UInt16;
    procedure set_StyleIndex(value: UInt16);
    function get_AsISlideComponent: DNISlideComponent;
    function get_AsIFillParamSource: DNIFillParamSource;

  { methods } 

    function GetEffective: DNIBackgroundEffectiveData;

  { propertys } 

    property &Type: DNBackgroundType read get_Type write set_Type;
    property FillFormat: DNIFillFormat read get_FillFormat;
    property EffectFormat: DNIEffectFormat read get_EffectFormat;
    property StyleColor: DNIColorFormat read get_StyleColor;
    property StyleIndex: UInt16 read get_StyleIndex write set_StyleIndex;
    property AsISlideComponent: DNISlideComponent read get_AsISlideComponent;
    property AsIFillParamSource: DNIFillParamSource read get_AsIFillParamSource;
  end;

  //-------------namespace: Aspose.Slides----------------
  [DNTypeName('Aspose.Slides.IBaseSlide')]
  DNIBaseSlide = interface(DNISlideComponent)
  ['{498904F5-979C-4C10-917F-BBFA81DB0294}']
  { getters & setters } 

    function get_Shapes: DNIShapeCollection;
    function get_Controls: DNIControlCollection;
    function get_Name: string;
    procedure set_Name(value: string);
    function get_SlideId: UInt32;
    function get_CustomData: DNICustomData;
    function get_Timeline: DNIAnimationTimeLine;
    function get_SlideShowTransition: DNISlideShowTransition;
    function get_Background: DNIBackground;
    function get_HyperlinkQueries: DNIHyperlinkQueries;
    function get_ShowMasterShapes: Boolean;
    procedure set_ShowMasterShapes(value: Boolean);
    function get_AsIThemeable: DNIThemeable;

  { methods } 

    function FindShapeByAltText(altText: string): DNIShape;
    procedure JoinPortionsWithSameFormatting;
    function Equals(slide: DNIBaseSlide): Boolean;

  { propertys } 

    property Shapes: DNIShapeCollection read get_Shapes;
    property Controls: DNIControlCollection read get_Controls;
    property Name: string read get_Name write set_Name;
    property SlideId: UInt32 read get_SlideId;
    property CustomData: DNICustomData read get_CustomData;
    property Timeline: DNIAnimationTimeLine read get_Timeline;
    property SlideShowTransition: DNISlideShowTransition read get_SlideShowTransition;
    property Background: DNIBackground read get_Background;
    property HyperlinkQueries: DNIHyperlinkQueries read get_HyperlinkQueries;
    property ShowMasterShapes: Boolean read get_ShowMasterShapes write set_ShowMasterShapes;
    property AsIThemeable: DNIThemeable read get_AsIThemeable;
  end;

  //-------------namespace: Aspose.Slides----------------
  [DNTypeName('Aspose.Slides.ILayoutSlide')]
  DNILayoutSlide = interface(DNIBaseSlide)
  ['{26EFF09D-21A8-446C-9C55-729C3792F5EC}']
  { getters & setters } 

    function get_HeaderFooterManager: DNILayoutSlideHeaderFooterManager;
    function get_MasterSlide: DNIMasterSlide;
    procedure set_MasterSlide(value: DNIMasterSlide);
    function get_LayoutType: DNSlideLayoutType;
    function get_HasDependingSlides: Boolean;
    function get_AsIBaseSlide: DNIBaseSlide;
    function get_AsIOverrideThemeable: DNIOverrideThemeable;

  { methods } 

    function GetDependingSlides: TArray<DNISlide>;
    procedure Remove;

  { propertys } 

    property HeaderFooterManager: DNILayoutSlideHeaderFooterManager read get_HeaderFooterManager;
    property MasterSlide: DNIMasterSlide read get_MasterSlide write set_MasterSlide;
    property LayoutType: DNSlideLayoutType read get_LayoutType;
    property HasDependingSlides: Boolean read get_HasDependingSlides;
    property AsIBaseSlide: DNIBaseSlide read get_AsIBaseSlide;
    property AsIOverrideThemeable: DNIOverrideThemeable read get_AsIOverrideThemeable;
  end;

  //-------------namespace: Aspose.Slides----------------
  [DNTypeName('Aspose.Slides.IMasterHandoutSlide')]
  DNIMasterHandoutSlide = interface(DNIBaseSlide)
  ['{BCE36002-0567-4584-8DEA-79AFC25EBAF5}']
  { getters & setters } 

    function get_HeaderFooterManager: DNIMasterHandoutSlideHeaderFooterManager;
    function get_AsIBaseSlide: DNIBaseSlide;
    function get_AsIMasterThemeable: DNIMasterThemeable;

  { propertys } 

    property HeaderFooterManager: DNIMasterHandoutSlideHeaderFooterManager read get_HeaderFooterManager;
    property AsIBaseSlide: DNIBaseSlide read get_AsIBaseSlide;
    property AsIMasterThemeable: DNIMasterThemeable read get_AsIMasterThemeable;
  end;

  //-------------namespace: Aspose.Slides----------------
  [DNTypeName('Aspose.Slides.IMasterNotesSlide')]
  DNIMasterNotesSlide = interface(DNIBaseSlide)
  ['{C30CE610-66B0-490A-AFBD-C96497AE7C57}']
  { getters & setters } 

    function get_HeaderFooterManager: DNIMasterNotesSlideHeaderFooterManager;
    function get_NotesStyle: DNITextStyle;
    function get_AsIBaseSlide: DNIBaseSlide;
    function get_AsIMasterThemeable: DNIMasterThemeable;

  { propertys } 

    property HeaderFooterManager: DNIMasterNotesSlideHeaderFooterManager read get_HeaderFooterManager;
    property NotesStyle: DNITextStyle read get_NotesStyle;
    property AsIBaseSlide: DNIBaseSlide read get_AsIBaseSlide;
    property AsIMasterThemeable: DNIMasterThemeable read get_AsIMasterThemeable;
  end;

  //-------------namespace: Aspose.Slides----------------
  [DNTypeName('Aspose.Slides.IMasterSlide')]
  DNIMasterSlide = interface(DNIBaseSlide)
  ['{748835D2-856E-4455-A222-5D32FBCB32C7}']
  { getters & setters } 

    function get_HeaderFooterManager: DNIMasterSlideHeaderFooterManager;
    function get_TitleStyle: DNITextStyle;
    function get_BodyStyle: DNITextStyle;
    function get_OtherStyle: DNITextStyle;
    function get_LayoutSlides: DNIMasterLayoutSlideCollection;
    function get_Preserve: Boolean;
    procedure set_Preserve(value: Boolean);
    function get_HasDependingSlides: Boolean;
    function get_AsIBaseSlide: DNIBaseSlide;
    function get_AsIMasterThemeable: DNIMasterThemeable;

  { methods } 

    function ApplyExternalThemeToDependingSlides(fname: string): DNIMasterSlide;
    function GetDependingSlides: TArray<DNISlide>;

  { propertys } 

    property HeaderFooterManager: DNIMasterSlideHeaderFooterManager read get_HeaderFooterManager;
    property TitleStyle: DNITextStyle read get_TitleStyle;
    property BodyStyle: DNITextStyle read get_BodyStyle;
    property OtherStyle: DNITextStyle read get_OtherStyle;
    property LayoutSlides: DNIMasterLayoutSlideCollection read get_LayoutSlides;
    property Preserve: Boolean read get_Preserve write set_Preserve;
    property HasDependingSlides: Boolean read get_HasDependingSlides;
    property AsIBaseSlide: DNIBaseSlide read get_AsIBaseSlide;
    property AsIMasterThemeable: DNIMasterThemeable read get_AsIMasterThemeable;
  end;

  //-------------namespace: Aspose.Slides----------------
  [DNTypeName('Aspose.Slides.INotesSlide')]
  DNINotesSlide = interface(DNIBaseSlide)
  ['{6AE7DA80-A80B-48D6-93A4-7C643A9A6A0E}']
  { getters & setters } 

    function get_HeaderFooterManager: DNINotesSlideHeaderFooterManager;
    function get_NotesTextFrame: DNITextFrame;
    function get_ParentSlide: DNISlide;
    function get_AsIBaseSlide: DNIBaseSlide;
    function get_AsIOverrideThemeable: DNIOverrideThemeable;

  { propertys } 

    property HeaderFooterManager: DNINotesSlideHeaderFooterManager read get_HeaderFooterManager;
    property NotesTextFrame: DNITextFrame read get_NotesTextFrame;
    property ParentSlide: DNISlide read get_ParentSlide;
    property AsIBaseSlide: DNIBaseSlide read get_AsIBaseSlide;
    property AsIOverrideThemeable: DNIOverrideThemeable read get_AsIOverrideThemeable;
  end;

  //-------------namespace: Aspose.Slides----------------
  [DNTypeName('Aspose.Slides.ISlide')]
  DNISlide = interface(DNIBaseSlide)
  ['{F4AB4299-A727-404E-8EE6-038598460AC0}']
  { getters & setters } 

    function get_HeaderFooterManager: DNISlideHeaderFooterManager;
    function get_SlideNumber: Int32;
    procedure set_SlideNumber(value: Int32);
    function get_Hidden: Boolean;
    procedure set_Hidden(value: Boolean);
    function get_LayoutSlide: DNILayoutSlide;
    procedure set_LayoutSlide(value: DNILayoutSlide);
    function get_NotesSlideManager: DNINotesSlideManager;
    function get_AsIBaseSlide: DNIBaseSlide;
    function get_AsIOverrideThemeable: DNIOverrideThemeable;

  { methods } 

    function GetThumbnail(scaleX: Single; scaleY: Single): DDN.System.Drawing.DNBitmap; overload;
    function GetThumbnail: DDN.System.Drawing.DNBitmap; overload;
    function GetThumbnail(imageSize: DDN.System.Drawing.DNSize): DDN.System.Drawing.DNBitmap; overload;
    function GetThumbnail(options: DNITiffOptions): DDN.System.Drawing.DNBitmap; overload;
    function GetThumbnail(notesCommentsLayouting: DNINotesCommentsLayoutingOptions): DDN.System.Drawing.DNBitmap; overload;
    function GetThumbnail(notesCommentsLayouting: DNINotesCommentsLayoutingOptions; scaleX: Single; scaleY: Single): DDN.System.Drawing.DNBitmap; overload;
    function GetThumbnail(options: DNINotesCommentsLayoutingOptions; imageSize: DDN.System.Drawing.DNSize): DDN.System.Drawing.DNBitmap; overload;
    function GetThumbnail(options: DNIRenderingOptions): DDN.System.Drawing.DNBitmap; overload;
    function GetThumbnail(options: DNIRenderingOptions; scaleX: Single; scaleY: Single): DDN.System.Drawing.DNBitmap; overload;
    function GetThumbnail(options: DNIRenderingOptions; imageSize: DDN.System.Drawing.DNSize): DDN.System.Drawing.DNBitmap; overload;
    procedure RenderToGraphics(notesCommentsLayouting: DNINotesCommentsLayoutingOptions; graphics: DDN.System.Drawing.DNGraphics; width: Int32; height: Int32); overload;
    procedure RenderToGraphics(notesCommentsLayouting: DNINotesCommentsLayoutingOptions; graphics: DDN.System.Drawing.DNGraphics; scale: Single); overload;
    procedure RenderToGraphics(notesCommentsLayouting: DNINotesCommentsLayoutingOptions; graphics: DDN.System.Drawing.DNGraphics); overload;
    procedure RenderToGraphics(options: DNIRenderingOptions; graphics: DDN.System.Drawing.DNGraphics); overload;
    procedure RenderToGraphics(options: DNIRenderingOptions; graphics: DDN.System.Drawing.DNGraphics; scaleX: Single; scaleY: Single); overload;
    procedure RenderToGraphics(options: DNIRenderingOptions; graphics: DDN.System.Drawing.DNGraphics; renderingSize: DDN.System.Drawing.DNSize); overload;
    function GetSlideComments(author: DNICommentAuthor): TArray<DNIComment>;
    procedure WriteAsSvg(stream: DDN.mscorlib.DNStream); overload;
    procedure WriteAsSvg(stream: DDN.mscorlib.DNStream; svgOptions: DNISVGOptions); overload;
    procedure Remove;
    procedure Reset;

  { propertys } 

    property HeaderFooterManager: DNISlideHeaderFooterManager read get_HeaderFooterManager;
    property SlideNumber: Int32 read get_SlideNumber write set_SlideNumber;
    property Hidden: Boolean read get_Hidden write set_Hidden;
    property LayoutSlide: DNILayoutSlide read get_LayoutSlide write set_LayoutSlide;
    property NotesSlideManager: DNINotesSlideManager read get_NotesSlideManager;
    property AsIBaseSlide: DNIBaseSlide read get_AsIBaseSlide;
    property AsIOverrideThemeable: DNIOverrideThemeable read get_AsIOverrideThemeable;
  end;

  //-------------namespace: Aspose.Slides----------------
  [DNTypeName('Aspose.Slides.ICell')]
  DNICell = interface(DNISlideComponent)
  ['{69E86485-B290-445A-BC6F-25BFC460859B}']
  { getters & setters } 

    function get_OffsetX: Double;
    function get_OffsetY: Double;
    function get_FirstRowIndex: Int32;
    function get_FirstColumnIndex: Int32;
    function get_Width: Double;
    function get_Height: Double;
    function get_MinimalHeight: Double;
    function get_MarginLeft: Double;
    procedure set_MarginLeft(value: Double);
    function get_MarginRight: Double;
    procedure set_MarginRight(value: Double);
    function get_MarginTop: Double;
    procedure set_MarginTop(value: Double);
    function get_MarginBottom: Double;
    procedure set_MarginBottom(value: Double);
    function get_TextVerticalType: DNTextVerticalType;
    procedure set_TextVerticalType(value: DNTextVerticalType);
    function get_TextAnchorType: DNTextAnchorType;
    procedure set_TextAnchorType(value: DNTextAnchorType);
    function get_AnchorCenter: Boolean;
    procedure set_AnchorCenter(value: Boolean);
    function get_FirstColumn: DNIColumn;
    function get_FirstRow: DNIRow;
    function get_ColSpan: Int32;
    function get_RowSpan: Int32;
    function get_TextFrame: DNITextFrame;
    function get_Table: DNITable;
    function get_IsMergedCell: Boolean;
    function get_CellFormat: DNICellFormat;
    function get_AsISlideComponent: DNISlideComponent;

  { methods } 

    procedure SplitByColSpan(index: Int32);
    procedure SplitByRowSpan(index: Int32);
    procedure SplitByHeight(height: Double);
    procedure SplitByWidth(width: Double);

  { propertys } 

    property OffsetX: Double read get_OffsetX;
    property OffsetY: Double read get_OffsetY;
    property FirstRowIndex: Int32 read get_FirstRowIndex;
    property FirstColumnIndex: Int32 read get_FirstColumnIndex;
    property Width: Double read get_Width;
    property Height: Double read get_Height;
    property MinimalHeight: Double read get_MinimalHeight;
    property MarginLeft: Double read get_MarginLeft write set_MarginLeft;
    property MarginRight: Double read get_MarginRight write set_MarginRight;
    property MarginTop: Double read get_MarginTop write set_MarginTop;
    property MarginBottom: Double read get_MarginBottom write set_MarginBottom;
    property TextVerticalType: DNTextVerticalType read get_TextVerticalType write set_TextVerticalType;
    property TextAnchorType: DNTextAnchorType read get_TextAnchorType write set_TextAnchorType;
    property AnchorCenter: Boolean read get_AnchorCenter write set_AnchorCenter;
    property FirstColumn: DNIColumn read get_FirstColumn;
    property FirstRow: DNIRow read get_FirstRow;
    property ColSpan: Int32 read get_ColSpan;
    property RowSpan: Int32 read get_RowSpan;
    property TextFrame: DNITextFrame read get_TextFrame;
    property Table: DNITable read get_Table;
    property IsMergedCell: Boolean read get_IsMergedCell;
    property CellFormat: DNICellFormat read get_CellFormat;
    property AsISlideComponent: DNISlideComponent read get_AsISlideComponent;
  end;

  //-------------namespace: Aspose.Slides----------------
  [DNTypeName('Aspose.Slides.IConnector')]
  DNIConnector = interface(DNISlideComponent)
  ['{18CB7918-A5B5-4839-90F1-5C922A4B1D94}']
  { getters & setters } 

    function get_ShapeLock: DNIConnectorLock;
    function get_ConnectorLock: DNIConnectorLock;
    function get_StartShapeConnectedTo: DNIShape;
    procedure set_StartShapeConnectedTo(value: DNIShape);
    function get_EndShapeConnectedTo: DNIShape;
    procedure set_EndShapeConnectedTo(value: DNIShape);
    function get_StartShapeConnectionSiteIndex: UInt32;
    procedure set_StartShapeConnectionSiteIndex(value: UInt32);
    function get_EndShapeConnectionSiteIndex: UInt32;
    procedure set_EndShapeConnectionSiteIndex(value: UInt32);
    function get_AsIGeometryShape: DNIGeometryShape;

  { methods } 

    procedure Reroute;

  { propertys } 

    property ShapeLock: DNIConnectorLock read get_ShapeLock;
    property ConnectorLock: DNIConnectorLock read get_ConnectorLock;
    property StartShapeConnectedTo: DNIShape read get_StartShapeConnectedTo write set_StartShapeConnectedTo;
    property EndShapeConnectedTo: DNIShape read get_EndShapeConnectedTo write set_EndShapeConnectedTo;
    property StartShapeConnectionSiteIndex: UInt32 read get_StartShapeConnectionSiteIndex write set_StartShapeConnectionSiteIndex;
    property EndShapeConnectionSiteIndex: UInt32 read get_EndShapeConnectionSiteIndex write set_EndShapeConnectionSiteIndex;
    property AsIGeometryShape: DNIGeometryShape read get_AsIGeometryShape;
  end;

  //-------------namespace: Aspose.Slides----------------
  [DNTypeName('Aspose.Slides.IControl')]
  DNIControl = interface(DNISlideComponent)
  ['{F0D7746C-3365-478C-8B4F-A77CCC8C13AD}']
  { getters & setters } 

    function get_Name: string;
    procedure set_Name(value: string);
    function get_ClassId: DDN.mscorlib.DNGuid;
    function get_SubstitutePictureFormat: DNIPictureFillFormat;
    function get_Frame: DNIShapeFrame;
    procedure set_Frame(value: DNIShapeFrame);
    function get_Properties: DNIControlPropertiesCollection;
    function get_Persistence: DNPersistenceType;
    function get_ActiveXControlBinary: TArray<Byte>;
    function get_AsISlideComponent: DNISlideComponent;

  { propertys } 

    property Name: string read get_Name write set_Name;
    property ClassId: DDN.mscorlib.DNGuid read get_ClassId;
    property SubstitutePictureFormat: DNIPictureFillFormat read get_SubstitutePictureFormat;
    property Frame: DNIShapeFrame read get_Frame write set_Frame;
    property Properties: DNIControlPropertiesCollection read get_Properties;
    property Persistence: DNPersistenceType read get_Persistence;
    property ActiveXControlBinary: TArray<Byte> read get_ActiveXControlBinary;
    property AsISlideComponent: DNISlideComponent read get_AsISlideComponent;
  end;

  //-------------namespace: Aspose.Slides----------------
  [DNTypeName('Aspose.Slides.IField')]
  DNIField = interface(DNISlideComponent)
  ['{7A7DE933-A203-446C-BB7A-F24BDA4DC0FB}']
  { getters & setters } 

    function get_Type: DNIFieldType;
    procedure set_Type(value: DNIFieldType);
    function get_AsISlideComponent: DNISlideComponent;

  { propertys } 

    property &Type: DNIFieldType read get_Type write set_Type;
    property AsISlideComponent: DNISlideComponent read get_AsISlideComponent;
  end;

  //-------------namespace: Aspose.Slides----------------
  [DNTypeName('Aspose.Slides.IGeometryShape')]
  DNIGeometryShape = interface(DNISlideComponent)
  ['{BD620214-7EE0-4F63-8A35-95D78A47C678}']
  { getters & setters } 

    function get_ShapeStyle: DNIShapeStyle;
    function get_ShapeType: DNShapeType;
    procedure set_ShapeType(value: DNShapeType);
    function get_Adjustments: DNIAdjustValueCollection;
    function get_AsIShape: DNIShape;

  { methods } 

    function GetGeometryPaths: TArray<DNIGeometryPath>;
    procedure SetGeometryPath(geometryPath: DNIGeometryPath);
    procedure SetGeometryPaths(geometryPaths: TArray<DNIGeometryPath>);
    function CreateShapeElements: TArray<DNIShapeElement>;

  { propertys } 

    property ShapeStyle: DNIShapeStyle read get_ShapeStyle;
    property ShapeType: DNShapeType read get_ShapeType write set_ShapeType;
    property Adjustments: DNIAdjustValueCollection read get_Adjustments;
    property AsIShape: DNIShape read get_AsIShape;
  end;

  //-------------namespace: Aspose.Slides----------------
  [DNTypeName('Aspose.Slides.IGraphicalObject')]
  DNIGraphicalObject = interface(DNISlideComponent)
  ['{F5D2E330-8EE8-4F53-A9E6-6B6C72CE5B0F}']
  { getters & setters } 

    function get_ShapeLock: DNIGraphicalObjectLock;
    function get_GraphicalObjectLock: DNIGraphicalObjectLock;
    function get_AsIShape: DNIShape;

  { propertys } 

    property ShapeLock: DNIGraphicalObjectLock read get_ShapeLock;
    property GraphicalObjectLock: DNIGraphicalObjectLock read get_GraphicalObjectLock;
    property AsIShape: DNIShape read get_AsIShape;
  end;

  //-------------namespace: Aspose.Slides----------------
  [DNTypeName('Aspose.Slides.IGroupShape')]
  DNIGroupShape = interface(DNISlideComponent)
  ['{5CA11DD2-D965-45A2-B56D-A516696C647B}']
  { getters & setters } 

    function get_ShapeLock: DNIGroupShapeLock;
    function get_GroupShapeLock: DNIGroupShapeLock;
    function get_Shapes: DNIShapeCollection;
    function get_AsIShape: DNIShape;

  { propertys } 

    property ShapeLock: DNIGroupShapeLock read get_ShapeLock;
    property GroupShapeLock: DNIGroupShapeLock read get_GroupShapeLock;
    property Shapes: DNIShapeCollection read get_Shapes;
    property AsIShape: DNIShape read get_AsIShape;
  end;

  //-------------namespace: Aspose.Slides----------------
  [DNTypeName('Aspose.Slides.ILegacyDiagram')]
  DNILegacyDiagram = interface(DNISlideComponent)
  ['{363DCF7E-EAE8-46E3-A2EC-F780C2E965E4}']
  { getters & setters } 

    function get_AsIGraphicalObject: DNIGraphicalObject;

  { methods } 

    function ConvertToSmartArt: DNISmartArt;
    function ConvertToGroupShape: DNIGroupShape;

  { propertys } 

    property AsIGraphicalObject: DNIGraphicalObject read get_AsIGraphicalObject;
  end;

  //-------------namespace: Aspose.Slides.Ink----------------
  [DNTypeName('Aspose.Slides.Ink.IInk')]
  DNIInk = interface(DNISlideComponent)
  ['{DB04DB7C-F823-4EF2-BF8A-2014E5FAA6F2}']
  { getters & setters } 

    function get_AsIGraphicalObject: DNIGraphicalObject;

  { propertys } 

    property AsIGraphicalObject: DNIGraphicalObject read get_AsIGraphicalObject;
  end;

  //-------------namespace: Aspose.Slides----------------
  [DNTypeName('Aspose.Slides.IOleObjectFrame')]
  DNIOleObjectFrame = interface(DNISlideComponent)
  ['{849679B6-7AC6-41CC-859D-D3EB9E31CD30}']
  { getters & setters } 

    function get_SubstitutePictureFormat: DNIPictureFillFormat;
    function get_ObjectName: string;
    procedure set_ObjectName(value: string);
    function get_EmbeddedData: DNIOleEmbeddedDataInfo;
    function get_ObjectProgId: string;
    procedure set_ObjectProgId(value: string);
    function get_ObjectData: TArray<Byte>;
    procedure set_ObjectData(value: TArray<Byte>);
    function get_LinkFileName: string;
    function get_LinkPathLong: string;
    procedure set_LinkPathLong(value: string);
    function get_EmbeddedFileLabel: string;
    function get_EmbeddedFileName: string;
    function get_EmbeddedFileExtension: string;
    function get_EmbeddedFileData: TArray<Byte>;
    function get_IsObjectIcon: Boolean;
    procedure set_IsObjectIcon(value: Boolean);
    function get_IsObjectLink: Boolean;
    function get_UpdateAutomatic: Boolean;
    procedure set_UpdateAutomatic(value: Boolean);
    function get_SubstitutePictureTitle: string;
    procedure set_SubstitutePictureTitle(value: string);
    function get_AsIGraphicalObject: DNIGraphicalObject;

  { methods } 

    procedure SetEmbeddedData(embeddedData: DNIOleEmbeddedDataInfo);

  { propertys } 

    property SubstitutePictureFormat: DNIPictureFillFormat read get_SubstitutePictureFormat;
    property ObjectName: string read get_ObjectName write set_ObjectName;
    property EmbeddedData: DNIOleEmbeddedDataInfo read get_EmbeddedData;
    property ObjectProgId: string read get_ObjectProgId write set_ObjectProgId;
    property ObjectData: TArray<Byte> read get_ObjectData write set_ObjectData;
    property LinkFileName: string read get_LinkFileName;
    property LinkPathLong: string read get_LinkPathLong write set_LinkPathLong;
    property EmbeddedFileLabel: string read get_EmbeddedFileLabel;
    property EmbeddedFileName: string read get_EmbeddedFileName;
    property EmbeddedFileExtension: string read get_EmbeddedFileExtension;
    property EmbeddedFileData: TArray<Byte> read get_EmbeddedFileData;
    property IsObjectIcon: Boolean read get_IsObjectIcon write set_IsObjectIcon;
    property IsObjectLink: Boolean read get_IsObjectLink;
    property UpdateAutomatic: Boolean read get_UpdateAutomatic write set_UpdateAutomatic;
    property SubstitutePictureTitle: string read get_SubstitutePictureTitle write set_SubstitutePictureTitle;
    property AsIGraphicalObject: DNIGraphicalObject read get_AsIGraphicalObject;
  end;

  //-------------namespace: Aspose.Slides----------------
  [DNTypeName('Aspose.Slides.IParagraph')]
  DNIParagraph = interface(DNISlideComponent)
  ['{9DF54953-04BE-466C-A019-6BD19BF70CCF}']
  { getters & setters } 

    function get_Portions: DNIPortionCollection;
    function get_ParagraphFormat: DNIParagraphFormat;
    function get_Text: string;
    procedure set_Text(value: string);
    function get_EndParagraphPortionFormat: DNIPortionFormat;
    procedure set_EndParagraphPortionFormat(value: DNIPortionFormat);
    function get_AsISlideComponent: DNISlideComponent;

  { methods } 

    procedure JoinPortionsWithSameFormatting;
    function GetRect: DDN.System.Drawing.DNRectangleF;

  { propertys } 

    property Portions: DNIPortionCollection read get_Portions;
    property ParagraphFormat: DNIParagraphFormat read get_ParagraphFormat;
    property Text: string read get_Text write set_Text;
    property EndParagraphPortionFormat: DNIPortionFormat read get_EndParagraphPortionFormat write set_EndParagraphPortionFormat;
    property AsISlideComponent: DNISlideComponent read get_AsISlideComponent;
  end;

  //-------------namespace: Aspose.Slides----------------
  [DNTypeName('Aspose.Slides.IPictureFrame')]
  DNIPictureFrame = interface(DNISlideComponent)
  ['{E9A99C7C-5087-4FA2-8610-708057025AD9}']
  { getters & setters } 

    function get_ShapeLock: DNIPictureFrameLock;
    function get_PictureFrameLock: DNIPictureFrameLock;
    function get_PictureFormat: DNIPictureFillFormat;
    function get_RelativeScaleHeight: Single;
    procedure set_RelativeScaleHeight(value: Single);
    function get_RelativeScaleWidth: Single;
    procedure set_RelativeScaleWidth(value: Single);
    function get_AsIGeometryShape: DNIGeometryShape;

  { propertys } 

    property ShapeLock: DNIPictureFrameLock read get_ShapeLock;
    property PictureFrameLock: DNIPictureFrameLock read get_PictureFrameLock;
    property PictureFormat: DNIPictureFillFormat read get_PictureFormat;
    property RelativeScaleHeight: Single read get_RelativeScaleHeight write set_RelativeScaleHeight;
    property RelativeScaleWidth: Single read get_RelativeScaleWidth write set_RelativeScaleWidth;
    property AsIGeometryShape: DNIGeometryShape read get_AsIGeometryShape;
  end;

  //-------------namespace: Aspose.Slides----------------
  [DNTypeName('Aspose.Slides.IPortion')]
  DNIPortion = interface(DNISlideComponent)
  ['{76E0EAC6-3A7F-41CC-BCBC-52090B045FF4}']
  { getters & setters } 

    function get_PortionFormat: DNIPortionFormat;
    function get_Text: string;
    procedure set_Text(value: string);
    function get_Field: DNIField;
    function get_AsISlideComponent: DNISlideComponent;

  { methods } 

    procedure AddField(fieldType: DNIFieldType); overload;
    procedure AddField(internalString: string); overload;
    procedure RemoveField;
    function GetRect: DDN.System.Drawing.DNRectangleF;
    function GetCoordinates: DDN.System.Drawing.DNPointF;

  { propertys } 

    property PortionFormat: DNIPortionFormat read get_PortionFormat;
    property Text: string read get_Text write set_Text;
    property Field: DNIField read get_Field;
    property AsISlideComponent: DNISlideComponent read get_AsISlideComponent;
  end;

  //-------------namespace: Aspose.Slides----------------
  [DNTypeName('Aspose.Slides.IShape')]
  DNIShape = interface(DNISlideComponent)
  ['{3623D9D6-A67B-41D1-B22C-DC335CEB9FC7}']
  { getters & setters } 

    function get_IsTextHolder: Boolean;
    function get_Placeholder: DNIPlaceholder;
    function get_CustomData: DNICustomData;
    function get_RawFrame: DNIShapeFrame;
    procedure set_RawFrame(value: DNIShapeFrame);
    function get_Frame: DNIShapeFrame;
    procedure set_Frame(value: DNIShapeFrame);
    function get_LineFormat: DNILineFormat;
    function get_ThreeDFormat: DNIThreeDFormat;
    function get_EffectFormat: DNIEffectFormat;
    function get_FillFormat: DNIFillFormat;
    function get_Hidden: Boolean;
    procedure set_Hidden(value: Boolean);
    function get_ZOrderPosition: Int32;
    function get_ConnectionSiteCount: Int32;
    function get_Rotation: Single;
    procedure set_Rotation(value: Single);
    function get_X: Single;
    procedure set_X(value: Single);
    function get_Y: Single;
    procedure set_Y(value: Single);
    function get_Width: Single;
    procedure set_Width(value: Single);
    function get_Height: Single;
    procedure set_Height(value: Single);
    function get_AlternativeText: string;
    procedure set_AlternativeText(value: string);
    function get_AlternativeTextTitle: string;
    procedure set_AlternativeTextTitle(value: string);
    function get_Name: string;
    procedure set_Name(value: string);
    function get_ShapeLock: DNIBaseShapeLock;
    function get_UniqueId: UInt32;
    function get_OfficeInteropShapeId: UInt32;
    function get_IsGrouped: Boolean;
    function get_BlackWhiteMode: DNBlackWhiteMode;
    procedure set_BlackWhiteMode(value: DNBlackWhiteMode);
    function get_ParentGroup: DNIGroupShape;
    function get_AsIHyperlinkContainer: DNIHyperlinkContainer;
    function get_AsISlideComponent: DNISlideComponent;

  { methods } 

    function AddPlaceholder(placeholderToCopyFrom: DNIPlaceholder): DNIPlaceholder;
    procedure RemovePlaceholder;
    function GetThumbnail: DDN.System.Drawing.DNBitmap; overload;
    function GetThumbnail(bounds: DNShapeThumbnailBounds; scaleX: Single; scaleY: Single): DDN.System.Drawing.DNBitmap; overload;
    procedure WriteAsSvg(stream: DDN.mscorlib.DNStream); overload;
    procedure WriteAsSvg(stream: DDN.mscorlib.DNStream; svgOptions: DNISVGOptions); overload;

  { propertys } 

    property IsTextHolder: Boolean read get_IsTextHolder;
    property Placeholder: DNIPlaceholder read get_Placeholder;
    property CustomData: DNICustomData read get_CustomData;
    property RawFrame: DNIShapeFrame read get_RawFrame write set_RawFrame;
    property Frame: DNIShapeFrame read get_Frame write set_Frame;
    property LineFormat: DNILineFormat read get_LineFormat;
    property ThreeDFormat: DNIThreeDFormat read get_ThreeDFormat;
    property EffectFormat: DNIEffectFormat read get_EffectFormat;
    property FillFormat: DNIFillFormat read get_FillFormat;
    property Hidden: Boolean read get_Hidden write set_Hidden;
    property ZOrderPosition: Int32 read get_ZOrderPosition;
    property ConnectionSiteCount: Int32 read get_ConnectionSiteCount;
    property Rotation: Single read get_Rotation write set_Rotation;
    property X: Single read get_X write set_X;
    property Y: Single read get_Y write set_Y;
    property Width: Single read get_Width write set_Width;
    property Height: Single read get_Height write set_Height;
    property AlternativeText: string read get_AlternativeText write set_AlternativeText;
    property AlternativeTextTitle: string read get_AlternativeTextTitle write set_AlternativeTextTitle;
    property Name: string read get_Name write set_Name;
    property ShapeLock: DNIBaseShapeLock read get_ShapeLock;
    property UniqueId: UInt32 read get_UniqueId;
    property OfficeInteropShapeId: UInt32 read get_OfficeInteropShapeId;
    property IsGrouped: Boolean read get_IsGrouped;
    property BlackWhiteMode: DNBlackWhiteMode read get_BlackWhiteMode write set_BlackWhiteMode;
    property ParentGroup: DNIGroupShape read get_ParentGroup;
    property AsIHyperlinkContainer: DNIHyperlinkContainer read get_AsIHyperlinkContainer;
    property AsISlideComponent: DNISlideComponent read get_AsISlideComponent;
  end;

  //-------------namespace: Aspose.Slides----------------
  [DNTypeName('Aspose.Slides.ITable')]
  DNITable = interface(DNISlideComponent)
  ['{FB809552-527C-47D1-A5E0-734F860C0481}']
  { getters & setters } 

    function get_Item(columnIndex: Int32; rowIndex: Int32): DNICell;
    function get_Rows: DNIRowCollection;
    function get_Columns: DNIColumnCollection;
    function get_TableFormat: DNITableFormat;
    function get_StylePreset: DNTableStylePreset;
    procedure set_StylePreset(value: DNTableStylePreset);
    function get_RightToLeft: Boolean;
    procedure set_RightToLeft(value: Boolean);
    function get_FirstRow: Boolean;
    procedure set_FirstRow(value: Boolean);
    function get_FirstCol: Boolean;
    procedure set_FirstCol(value: Boolean);
    function get_LastRow: Boolean;
    procedure set_LastRow(value: Boolean);
    function get_LastCol: Boolean;
    procedure set_LastCol(value: Boolean);
    function get_HorizontalBanding: Boolean;
    procedure set_HorizontalBanding(value: Boolean);
    function get_VerticalBanding: Boolean;
    procedure set_VerticalBanding(value: Boolean);
    function get_AsIGraphicalObject: DNIGraphicalObject;
    function get_AsIBulkTextFormattable: DNIBulkTextFormattable;

  { methods } 

    function MergeCells(cell1: DNICell; cell2: DNICell; allowSplitting: Boolean): DNICell;

  { propertys } 

    property Item[columnIndex: Int32; rowIndex: Int32]: DNICell read get_Item; default;
    property Rows: DNIRowCollection read get_Rows;
    property Columns: DNIColumnCollection read get_Columns;
    property TableFormat: DNITableFormat read get_TableFormat;
    property StylePreset: DNTableStylePreset read get_StylePreset write set_StylePreset;
    property RightToLeft: Boolean read get_RightToLeft write set_RightToLeft;
    property FirstRow: Boolean read get_FirstRow write set_FirstRow;
    property FirstCol: Boolean read get_FirstCol write set_FirstCol;
    property LastRow: Boolean read get_LastRow write set_LastRow;
    property LastCol: Boolean read get_LastCol write set_LastCol;
    property HorizontalBanding: Boolean read get_HorizontalBanding write set_HorizontalBanding;
    property VerticalBanding: Boolean read get_VerticalBanding write set_VerticalBanding;
    property AsIGraphicalObject: DNIGraphicalObject read get_AsIGraphicalObject;
    property AsIBulkTextFormattable: DNIBulkTextFormattable read get_AsIBulkTextFormattable;
  end;

  //-------------namespace: Aspose.Slides----------------
  [DNTypeName('Aspose.Slides.ITextFrame')]
  DNITextFrame = interface(DNISlideComponent)
  ['{3AC0A339-947B-4A01-8D45-FD5DF99DF046}']
  { getters & setters } 

    function get_Paragraphs: DNIParagraphCollection;
    function get_Text: string;
    procedure set_Text(value: string);
    function get_TextFrameFormat: DNITextFrameFormat;
    function get_HyperlinkQueries: DNIHyperlinkQueries;
    function get_AsISlideComponent: DNISlideComponent;

  { methods } 

    procedure JoinPortionsWithSameFormatting;
    procedure HighlightText(text: string; highlightColor: DDN.System.Drawing.DNColor); overload;
    procedure HighlightText(text: string; highlightColor: DDN.System.Drawing.DNColor; options: DNITextHighlightingOptions); overload;
    procedure HighlightRegex(regex: string; highlightColor: DDN.System.Drawing.DNColor; options: DNITextHighlightingOptions);

  { propertys } 

    property Paragraphs: DNIParagraphCollection read get_Paragraphs;
    property Text: string read get_Text write set_Text;
    property TextFrameFormat: DNITextFrameFormat read get_TextFrameFormat;
    property HyperlinkQueries: DNIHyperlinkQueries read get_HyperlinkQueries;
    property AsISlideComponent: DNISlideComponent read get_AsISlideComponent;
  end;

  //-------------namespace: Aspose.Slides----------------
  [DNTypeName('Aspose.Slides.IVideoFrame')]
  DNIVideoFrame = interface(DNISlideComponent)
  ['{B0BC107E-49E7-4D02-868A-3ED96815F404}']
  { getters & setters } 

    function get_RewindVideo: Boolean;
    procedure set_RewindVideo(value: Boolean);
    function get_PlayLoopMode: Boolean;
    procedure set_PlayLoopMode(value: Boolean);
    function get_HideAtShowing: Boolean;
    procedure set_HideAtShowing(value: Boolean);
    function get_Volume: DNAudioVolumeMode;
    procedure set_Volume(value: DNAudioVolumeMode);
    function get_PlayMode: DNVideoPlayModePreset;
    procedure set_PlayMode(value: DNVideoPlayModePreset);
    function get_FullScreenMode: Boolean;
    procedure set_FullScreenMode(value: Boolean);
    function get_LinkPathLong: string;
    procedure set_LinkPathLong(value: string);
    function get_EmbeddedVideo: DNIVideo;
    procedure set_EmbeddedVideo(value: DNIVideo);
    function get_AsIPictureFrame: DNIPictureFrame;

  { propertys } 

    property RewindVideo: Boolean read get_RewindVideo write set_RewindVideo;
    property PlayLoopMode: Boolean read get_PlayLoopMode write set_PlayLoopMode;
    property HideAtShowing: Boolean read get_HideAtShowing write set_HideAtShowing;
    property Volume: DNAudioVolumeMode read get_Volume write set_Volume;
    property PlayMode: DNVideoPlayModePreset read get_PlayMode write set_PlayMode;
    property FullScreenMode: Boolean read get_FullScreenMode write set_FullScreenMode;
    property LinkPathLong: string read get_LinkPathLong write set_LinkPathLong;
    property EmbeddedVideo: DNIVideo read get_EmbeddedVideo write set_EmbeddedVideo;
    property AsIPictureFrame: DNIPictureFrame read get_AsIPictureFrame;
  end;

  //-------------namespace: Aspose.Slides----------------
  [DNTypeName('Aspose.Slides.IZoomFrame')]
  DNIZoomFrame = interface(DNISlideComponent)
  ['{088F1ACA-A111-4DD3-9926-49BD7E6BA2E4}']
  { getters & setters } 

    function get_ImageType: DNZoomImageType;
    procedure set_ImageType(value: DNZoomImageType);
    function get_ReturnToParent: Boolean;
    procedure set_ReturnToParent(value: Boolean);
    function get_TargetSlide: DNISlide;
    procedure set_TargetSlide(value: DNISlide);
    function get_ShowBackground: Boolean;
    procedure set_ShowBackground(value: Boolean);
    function get_Image: DNIPPImage;
    procedure set_Image(value: DNIPPImage);
    function get_TransitionDuration: Single;
    procedure set_TransitionDuration(value: Single);
    function get_AsIGraphicalObject: DNIGraphicalObject;

  { propertys } 

    property ImageType: DNZoomImageType read get_ImageType write set_ImageType;
    property ReturnToParent: Boolean read get_ReturnToParent write set_ReturnToParent;
    property TargetSlide: DNISlide read get_TargetSlide write set_TargetSlide;
    property ShowBackground: Boolean read get_ShowBackground write set_ShowBackground;
    property Image: DNIPPImage read get_Image write set_Image;
    property TransitionDuration: Single read get_TransitionDuration write set_TransitionDuration;
    property AsIGraphicalObject: DNIGraphicalObject read get_AsIGraphicalObject;
  end;

  //-------------namespace: Aspose.Slides.SmartArt----------------
  [DNTypeName('Aspose.Slides.SmartArt.ISmartArt')]
  DNISmartArt = interface(DNISlideComponent)
  ['{59837C61-35E5-433F-A4F1-803CA00E46C4}']
  { getters & setters } 

    function get_AllNodes: DNISmartArtNodeCollection;
    function get_Nodes: DNISmartArtNodeCollection;
    function get_Layout: DNSmartArtLayoutType;
    procedure set_Layout(value: DNSmartArtLayoutType);
    function get_QuickStyle: DNSmartArtQuickStyleType;
    procedure set_QuickStyle(value: DNSmartArtQuickStyleType);
    function get_ColorStyle: DNSmartArtColorType;
    procedure set_ColorStyle(value: DNSmartArtColorType);
    function get_IsReversed: Boolean;
    procedure set_IsReversed(value: Boolean);
    function get_AsIGraphicalObject: DNIGraphicalObject;

  { propertys } 

    property AllNodes: DNISmartArtNodeCollection read get_AllNodes;
    property Nodes: DNISmartArtNodeCollection read get_Nodes;
    property Layout: DNSmartArtLayoutType read get_Layout write set_Layout;
    property QuickStyle: DNSmartArtQuickStyleType read get_QuickStyle write set_QuickStyle;
    property ColorStyle: DNSmartArtColorType read get_ColorStyle write set_ColorStyle;
    property IsReversed: Boolean read get_IsReversed write set_IsReversed;
    property AsIGraphicalObject: DNIGraphicalObject read get_AsIGraphicalObject;
  end;

  //-------------namespace: Aspose.Slides.SmartArt----------------
  [DNTypeName('Aspose.Slides.SmartArt.ISmartArtShape')]
  DNISmartArtShape = interface(DNISlideComponent)
  ['{92298AD6-E2BF-4D28-9380-C61B3B298893}']
  { getters & setters } 

    function get_TextFrame: DNITextFrame;
    function get_AsIGeometryShape: DNIGeometryShape;

  { propertys } 

    property TextFrame: DNITextFrame read get_TextFrame;
    property AsIGeometryShape: DNIGeometryShape read get_AsIGeometryShape;
  end;

  //-------------namespace: Aspose.Slides.Theme----------------
  [DNTypeName('Aspose.Slides.Theme.IColorScheme')]
  DNIColorScheme = interface(DNISlideComponent)
  ['{AC563F5A-0CF8-43BE-BB35-30EF07610D17}']
  { getters & setters } 

    function get_Item(index: DNColorSchemeIndex): DNIColorFormat;
    function get_Dark1: DNIColorFormat;
    function get_Light1: DNIColorFormat;
    function get_Dark2: DNIColorFormat;
    function get_Light2: DNIColorFormat;
    function get_Accent1: DNIColorFormat;
    function get_Accent2: DNIColorFormat;
    function get_Accent3: DNIColorFormat;
    function get_Accent4: DNIColorFormat;
    function get_Accent5: DNIColorFormat;
    function get_Accent6: DNIColorFormat;
    function get_Hyperlink: DNIColorFormat;
    function get_FollowedHyperlink: DNIColorFormat;
    function get_AsISlideComponent: DNISlideComponent;

  { propertys } 

    property Item[index: DNColorSchemeIndex]: DNIColorFormat read get_Item; default;
    property Dark1: DNIColorFormat read get_Dark1;
    property Light1: DNIColorFormat read get_Light1;
    property Dark2: DNIColorFormat read get_Dark2;
    property Light2: DNIColorFormat read get_Light2;
    property Accent1: DNIColorFormat read get_Accent1;
    property Accent2: DNIColorFormat read get_Accent2;
    property Accent3: DNIColorFormat read get_Accent3;
    property Accent4: DNIColorFormat read get_Accent4;
    property Accent5: DNIColorFormat read get_Accent5;
    property Accent6: DNIColorFormat read get_Accent6;
    property Hyperlink: DNIColorFormat read get_Hyperlink;
    property FollowedHyperlink: DNIColorFormat read get_FollowedHyperlink;
    property AsISlideComponent: DNISlideComponent read get_AsISlideComponent;
  end;

  //-------------namespace: Aspose.Slides.Theme----------------
  [DNTypeName('Aspose.Slides.Theme.IFormatScheme')]
  DNIFormatScheme = interface(DNISlideComponent)
  ['{E5FA4582-AC6D-4053-BB0F-8816F0D11493}']
  { getters & setters } 

    function get_FillStyles: DNIFillFormatCollection;
    function get_LineStyles: DNILineFormatCollection;
    function get_EffectStyles: DNIEffectStyleCollection;
    function get_BackgroundFillStyles: DNIFillFormatCollection;
    function get_AsISlideComponent: DNISlideComponent;

  { propertys } 

    property FillStyles: DNIFillFormatCollection read get_FillStyles;
    property LineStyles: DNILineFormatCollection read get_LineStyles;
    property EffectStyles: DNIEffectStyleCollection read get_EffectStyles;
    property BackgroundFillStyles: DNIFillFormatCollection read get_BackgroundFillStyles;
    property AsISlideComponent: DNISlideComponent read get_AsISlideComponent;
  end;

  //-------------namespace: Aspose.Slides.Theme----------------
  [DNTypeName('Aspose.Slides.Theme.IMasterThemeable')]
  DNIMasterThemeable = interface(DNISlideComponent)
  ['{E5974423-3820-4F98-A492-C9DEDC2605CF}']
  { getters & setters } 

    function get_ThemeManager: DNIMasterThemeManager;
    function get_AsIThemeable: DNIThemeable;

  { propertys } 

    property ThemeManager: DNIMasterThemeManager read get_ThemeManager;
    property AsIThemeable: DNIThemeable read get_AsIThemeable;
  end;

  //-------------namespace: Aspose.Slides.Theme----------------
  [DNTypeName('Aspose.Slides.Theme.IOverrideThemeable')]
  DNIOverrideThemeable = interface(DNISlideComponent)
  ['{77A9619D-183F-4715-82D4-9DEE754AFF82}']
  { getters & setters } 

    function get_ThemeManager: DNIOverrideThemeManager;
    function get_AsIThemeable: DNIThemeable;

  { propertys } 

    property ThemeManager: DNIOverrideThemeManager read get_ThemeManager;
    property AsIThemeable: DNIThemeable read get_AsIThemeable;
  end;

  //-------------namespace: Aspose.Slides.Theme----------------
  [DNTypeName('Aspose.Slides.Theme.IThemeable')]
  DNIThemeable = interface(DNISlideComponent)
  ['{071D61E7-9AA5-482D-A82F-3B4AC288751A}']
  { getters & setters } 

    function get_AsISlideComponent: DNISlideComponent;

  { methods } 

    function CreateThemeEffective: DNIThemeEffectiveData;

  { propertys } 

    property AsISlideComponent: DNISlideComponent read get_AsISlideComponent;
  end;

  //-------------namespace: Aspose.Slides----------------
  [DNTypeName('Aspose.Slides.ISlidesPicture')]
  DNISlidesPicture = interface(DNIPresentationComponent)
  ['{228DC587-C5E7-4BD7-BF73-1501A0091B40}']
  { getters & setters } 

    function get_Image: DNIPPImage;
    procedure set_Image(value: DNIPPImage);
    function get_LinkPathLong: string;
    procedure set_LinkPathLong(value: string);
    function get_ImageTransform: DNIImageTransformOperationCollection;
    function get_AsIPresentationComponent: DNIPresentationComponent;

  { propertys } 

    property Image: DNIPPImage read get_Image write set_Image;
    property LinkPathLong: string read get_LinkPathLong write set_LinkPathLong;
    property ImageTransform: DNIImageTransformOperationCollection read get_ImageTransform;
    property AsIPresentationComponent: DNIPresentationComponent read get_AsIPresentationComponent;
  end;

  //-------------namespace: Aspose.Slides.Theme----------------
  [DNTypeName('Aspose.Slides.Theme.IMasterTheme')]
  DNIMasterTheme = interface(DNIPresentationComponent)
  ['{400856DD-C56C-43CF-8B69-D844BB4B16A0}']
  { getters & setters } 

    function get_ExtraColorSchemes: DNIExtraColorSchemeCollection;
    function get_Name: string;
    procedure set_Name(value: string);
    function get_AsITheme: DNITheme;

  { propertys } 

    property ExtraColorSchemes: DNIExtraColorSchemeCollection read get_ExtraColorSchemes;
    property Name: string read get_Name write set_Name;
    property AsITheme: DNITheme read get_AsITheme;
  end;

  //-------------namespace: Aspose.Slides.Theme----------------
  [DNTypeName('Aspose.Slides.Theme.IOverrideTheme')]
  DNIOverrideTheme = interface(DNIPresentationComponent)
  ['{95CEA239-6E24-4E25-8D3B-1CF6EDE44559}']
  { getters & setters } 

    function get_IsEmpty: Boolean;
    function get_AsITheme: DNITheme;

  { methods } 

    procedure InitColorScheme;
    procedure InitColorSchemeFrom(colorScheme: DNIColorScheme);
    procedure InitColorSchemeFromInherited;
    procedure InitFontScheme;
    procedure InitFontSchemeFrom(fontScheme: DNIFontScheme);
    procedure InitFontSchemeFromInherited;
    procedure InitFormatScheme;
    procedure InitFormatSchemeFrom(formatScheme: DNIFormatScheme);
    procedure InitFormatSchemeFromInherited;
    procedure Clear;

  { propertys } 

    property IsEmpty: Boolean read get_IsEmpty;
    property AsITheme: DNITheme read get_AsITheme;
  end;

  //-------------namespace: Aspose.Slides.Theme----------------
  [DNTypeName('Aspose.Slides.Theme.ITheme')]
  DNITheme = interface(DNIPresentationComponent)
  ['{F057D28D-1BE0-4FDE-AB31-9C7C6221A20C}']
  { getters & setters } 

    function get_ColorScheme: DNIColorScheme;
    function get_FontScheme: DNIFontScheme;
    function get_FormatScheme: DNIFormatScheme;
    function get_AsIPresentationComponent: DNIPresentationComponent;

  { methods } 

    function GetEffective: DNIThemeEffectiveData;

  { propertys } 

    property ColorScheme: DNIColorScheme read get_ColorScheme;
    property FontScheme: DNIFontScheme read get_FontScheme;
    property FormatScheme: DNIFormatScheme read get_FormatScheme;
    property AsIPresentationComponent: DNIPresentationComponent read get_AsIPresentationComponent;
  end;

  //-------------namespace: Aspose.Slides----------------
  [DNTypeName('Aspose.Slides.IPresentationFactory')]
  DNIPresentationFactory = interface(DDN.mscorlib.DNObject)
  ['{F818A1CD-3DFC-45BC-BC3B-7FE35B8BACA8}']
  { methods } 

    function CreatePresentation: DNIPresentation; overload;
    function CreatePresentation(options: DNILoadOptions): DNIPresentation; overload;
    function GetPresentationInfo(&file: string): DNIPresentationInfo; overload;
    function GetPresentationInfo(stream: DDN.mscorlib.DNStream): DNIPresentationInfo; overload;
    function ReadPresentation(data: TArray<Byte>): DNIPresentation; overload;
    function ReadPresentation(data: TArray<Byte>; options: DNILoadOptions): DNIPresentation; overload;
    function ReadPresentation(stream: DDN.mscorlib.DNStream): DNIPresentation; overload;
    function ReadPresentation(stream: DDN.mscorlib.DNStream; options: DNILoadOptions): DNIPresentation; overload;
    function ReadPresentation(&file: string): DNIPresentation; overload;
    function ReadPresentation(&file: string; options: DNILoadOptions): DNIPresentation; overload;
    function GetPresentationText(&file: string; mode: DNTextExtractionArrangingMode): DNIPresentationText; overload;
    function GetPresentationText(stream: DDN.mscorlib.DNStream; mode: DNTextExtractionArrangingMode): DNIPresentationText; overload;
    function GetPresentationText(stream: DDN.mscorlib.DNStream; mode: DNTextExtractionArrangingMode; options: DNILoadOptions): DNIPresentationText; overload;

  end;

  //-------------namespace: Aspose.Slides----------------
  [DNTypeName('Aspose.Slides.IPresentationInfo')]
  DNIPresentationInfo = interface(DDN.mscorlib.DNObject)
  ['{CA4682BB-0EE0-4B71-AB86-7230B21CE0E0}']
  { getters & setters } 

    function get_IsEncrypted: Boolean;
    function get_IsPasswordProtected: Boolean;
    function get_IsWriteProtected: DNNullableBool;
    function get_LoadFormat: DNLoadFormat;

  { methods } 

    function CheckPassword(password: string): Boolean;
    function CheckWriteProtection(password: string): Boolean;
    function ReadDocumentProperties: DNIDocumentProperties;
    procedure UpdateDocumentProperties(documentProperties: DNIDocumentProperties);
    procedure WriteBindedPresentation(stream: DDN.mscorlib.DNStream); overload;
    procedure WriteBindedPresentation(&file: string); overload;

  { propertys } 

    property IsEncrypted: Boolean read get_IsEncrypted;
    property IsPasswordProtected: Boolean read get_IsPasswordProtected;
    property IsWriteProtected: DNNullableBool read get_IsWriteProtected;
    property LoadFormat: DNLoadFormat read get_LoadFormat;
  end;

  //-------------namespace: Aspose.Slides----------------
  [DNTypeName('Aspose.Slides.IPresentationText')]
  DNIPresentationText = interface(DDN.mscorlib.DNObject)
  ['{41194A21-BB06-4664-85F3-F465951E0B66}']
  { getters & setters } 

    function get_SlidesText: TArray<DNISlideText>;

  { propertys } 

    property SlidesText: TArray<DNISlideText> read get_SlidesText;
  end;

  //-------------namespace: Aspose.Slides----------------
  [DNTypeName('Aspose.Slides.IProgressCallback')]
  DNIProgressCallback = interface(DDN.mscorlib.DNObject)
  ['{A7E647E3-5846-4F6C-81A1-93FD198F2DE0}']
  { methods } 

    procedure Reporting(progressValue: Double);

  end;

  //-------------namespace: Aspose.Slides----------------
  [DNTypeName('Aspose.Slides.IProtectionManager')]
  DNIProtectionManager = interface(DDN.mscorlib.DNObject)
  ['{129D2D29-42D2-40FF-8BB2-ECAC77426681}']
  { getters & setters } 

    function get_EncryptDocumentProperties: Boolean;
    procedure set_EncryptDocumentProperties(value: Boolean);
    function get_IsEncrypted: Boolean;
    function get_IsOnlyDocumentPropertiesLoaded: Boolean;
    function get_IsWriteProtected: Boolean;
    function get_EncryptionPassword: string;
    function get_ReadOnlyRecommended: Boolean;
    procedure set_ReadOnlyRecommended(value: Boolean);

  { methods } 

    procedure Encrypt(encryptionPassword: string);
    procedure RemoveEncryption;
    procedure SetWriteProtection(password: string);
    procedure RemoveWriteProtection;
    function CheckWriteProtection(password: string): Boolean;

  { propertys } 

    property EncryptDocumentProperties: Boolean read get_EncryptDocumentProperties write set_EncryptDocumentProperties;
    property IsEncrypted: Boolean read get_IsEncrypted;
    property IsOnlyDocumentPropertiesLoaded: Boolean read get_IsOnlyDocumentPropertiesLoaded;
    property IsWriteProtected: Boolean read get_IsWriteProtected;
    property EncryptionPassword: string read get_EncryptionPassword;
    property ReadOnlyRecommended: Boolean read get_ReadOnlyRecommended write set_ReadOnlyRecommended;
  end;

  //-------------namespace: Aspose.Slides----------------
  [DNTypeName('Aspose.Slides.IResourceLoadingArgs')]
  DNIResourceLoadingArgs = interface(DDN.mscorlib.DNObject)
  ['{9D400075-E75D-4B6F-9394-A5DA2E7F7719}']
  { getters & setters } 

    function get_OriginalUri: string;
    function get_Uri: string;
    procedure set_Uri(value: string);

  { methods } 

    procedure SetData(data: TArray<Byte>);

  { propertys } 

    property OriginalUri: string read get_OriginalUri;
    property Uri: string read get_Uri write set_Uri;
  end;

  //-------------namespace: Aspose.Slides----------------
  [DNTypeName('Aspose.Slides.IResourceLoadingCallback')]
  DNIResourceLoadingCallback = interface(DDN.mscorlib.DNObject)
  ['{2E2F8F8A-07F7-4C9A-A9B8-9B131C680183}']
  { methods } 

    function ResourceLoading(args: DNIResourceLoadingArgs): DNResourceLoadingAction;

  end;

  //-------------namespace: Aspose.Slides----------------
  [DNTypeName('Aspose.Slides.IRowFormat')]
  DNIRowFormat = interface(DDN.mscorlib.DNObject)
  ['{428E7AA6-A07C-43B1-93F2-1A9A644FFA27}']
  { methods } 

    function GetEffective: DNIRowFormatEffectiveData;

  end;

  //-------------namespace: Aspose.Slides----------------
  [DNTypeName('Aspose.Slides.ISection')]
  DNISection = interface(DDN.mscorlib.DNObject)
  ['{B1944A26-0AF3-453C-9C22-0AAAB1B6A4C1}']
  { getters & setters } 

    function get_Name: string;
    procedure set_Name(value: string);
    function get_StartedFromSlide: DNISlide;

  { methods } 

    function GetSlidesListOfSection: DNISectionSlideCollection;

  { propertys } 

    property Name: string read get_Name write set_Name;
    property StartedFromSlide: DNISlide read get_StartedFromSlide;
  end;

  //-------------namespace: Aspose.Slides----------------
  [DNTypeName('Aspose.Slides.IShapeBevel')]
  DNIShapeBevel = interface(DDN.mscorlib.DNObject)
  ['{C3A6D851-E528-4C0E-B149-7F71DB222EB4}']
  { getters & setters } 

    function get_Width: Double;
    procedure set_Width(value: Double);
    function get_Height: Double;
    procedure set_Height(value: Double);
    function get_BevelType: DNBevelPresetType;
    procedure set_BevelType(value: DNBevelPresetType);

  { propertys } 

    property Width: Double read get_Width write set_Width;
    property Height: Double read get_Height write set_Height;
    property BevelType: DNBevelPresetType read get_BevelType write set_BevelType;
  end;

  //-------------namespace: Aspose.Slides----------------
  [DNTypeName('Aspose.Slides.IShapeBevelEffectiveData')]
  DNIShapeBevelEffectiveData = interface(DDN.mscorlib.DNObject)
  ['{B6240660-BBAB-4928-9B0C-55C87BF73E13}']
  { getters & setters } 

    function get_Width: Double;
    function get_Height: Double;
    function get_BevelType: DNBevelPresetType;

  { propertys } 

    property Width: Double read get_Width;
    property Height: Double read get_Height;
    property BevelType: DNBevelPresetType read get_BevelType;
  end;

  //-------------namespace: Aspose.Slides----------------
  [DNTypeName('Aspose.Slides.IShapeElement')]
  DNIShapeElement = interface(DDN.mscorlib.DNObject)
  ['{6F1871CA-E15A-4CF6-B689-3CD65D1F13F4}']
  end;

  //-------------namespace: Aspose.Slides----------------
  [DNTypeName('Aspose.Slides.IShapeStyle')]
  DNIShapeStyle = interface(DDN.mscorlib.DNObject)
  ['{C86306E1-E3EC-4405-9229-59E688A36306}']
  { getters & setters } 

    function get_LineColor: DNIColorFormat;
    function get_LineStyleIndex: UInt16;
    procedure set_LineStyleIndex(value: UInt16);
    function get_FillColor: DNIColorFormat;
    function get_FillStyleIndex: Int16;
    procedure set_FillStyleIndex(value: Int16);
    function get_EffectColor: DNIColorFormat;
    function get_EffectStyleIndex: UInt32;
    procedure set_EffectStyleIndex(value: UInt32);
    function get_FontColor: DNIColorFormat;
    function get_FontCollectionIndex: DNFontCollectionIndex;
    procedure set_FontCollectionIndex(value: DNFontCollectionIndex);

  { propertys } 

    property LineColor: DNIColorFormat read get_LineColor;
    property LineStyleIndex: UInt16 read get_LineStyleIndex write set_LineStyleIndex;
    property FillColor: DNIColorFormat read get_FillColor;
    property FillStyleIndex: Int16 read get_FillStyleIndex write set_FillStyleIndex;
    property EffectColor: DNIColorFormat read get_EffectColor;
    property EffectStyleIndex: UInt32 read get_EffectStyleIndex write set_EffectStyleIndex;
    property FontColor: DNIColorFormat read get_FontColor;
    property FontCollectionIndex: DNFontCollectionIndex read get_FontCollectionIndex write set_FontCollectionIndex;
  end;

  //-------------namespace: Aspose.Slides----------------
  [DNTypeName('Aspose.Slides.ISketchFormat')]
  DNISketchFormat = interface(DDN.mscorlib.DNObject)
  ['{7BDFA1CD-A7F9-40C1-99D9-2EC185FBD018}']
  { getters & setters } 

    function get_SketchType: DNLineSketchType;
    procedure set_SketchType(value: DNLineSketchType);

  { propertys } 

    property SketchType: DNLineSketchType read get_SketchType write set_SketchType;
  end;

  //-------------namespace: Aspose.Slides----------------
  [DNTypeName('Aspose.Slides.ISketchFormatEffectiveData')]
  DNISketchFormatEffectiveData = interface(DDN.mscorlib.DNObject)
  ['{58B0DCA5-1D70-4AD3-A338-803B699B8636}']
  { getters & setters } 

    function get_SketchType: DNLineSketchType;

  { propertys } 

    property SketchType: DNLineSketchType read get_SketchType;
  end;

  //-------------namespace: Aspose.Slides----------------
  [DNTypeName('Aspose.Slides.ISlideShowTransition')]
  DNISlideShowTransition = interface(DDN.mscorlib.DNObject)
  ['{328CA6DA-AD4B-4A60-8B51-78E8A30DF2D8}']
  { getters & setters } 

    function get_Sound: DNIAudio;
    procedure set_Sound(value: DNIAudio);
    function get_SoundMode: DNTransitionSoundMode;
    procedure set_SoundMode(value: DNTransitionSoundMode);
    function get_SoundLoop: Boolean;
    procedure set_SoundLoop(value: Boolean);
    function get_AdvanceOnClick: Boolean;
    procedure set_AdvanceOnClick(value: Boolean);
    function get_AdvanceAfterTime: UInt32;
    procedure set_AdvanceAfterTime(value: UInt32);
    function get_Speed: DNTransitionSpeed;
    procedure set_Speed(value: DNTransitionSpeed);
    function get_Value: DNITransitionValueBase;
    function get_Type: DNTransitionType;
    procedure set_Type(value: DNTransitionType);
    function get_SoundIsBuiltIn: Boolean;
    procedure set_SoundIsBuiltIn(value: Boolean);
    function get_SoundName: string;
    procedure set_SoundName(value: string);

  { propertys } 

    property Sound: DNIAudio read get_Sound write set_Sound;
    property SoundMode: DNTransitionSoundMode read get_SoundMode write set_SoundMode;
    property SoundLoop: Boolean read get_SoundLoop write set_SoundLoop;
    property AdvanceOnClick: Boolean read get_AdvanceOnClick write set_AdvanceOnClick;
    property AdvanceAfterTime: UInt32 read get_AdvanceAfterTime write set_AdvanceAfterTime;
    property Speed: DNTransitionSpeed read get_Speed write set_Speed;
    property Value: DNITransitionValueBase read get_Value;
    property &Type: DNTransitionType read get_Type write set_Type;
    property SoundIsBuiltIn: Boolean read get_SoundIsBuiltIn write set_SoundIsBuiltIn;
    property SoundName: string read get_SoundName write set_SoundName;
  end;

  //-------------namespace: Aspose.Slides----------------
  [DNTypeName('Aspose.Slides.ISlideSize')]
  DNISlideSize = interface(DDN.mscorlib.DNObject)
  ['{4053A48E-4095-4EF5-A52E-D1411D1A2706}']
  { getters & setters } 

    function get_Size: DDN.System.Drawing.DNSizeF;
    function get_Type: DNSlideSizeType;
    function get_Orientation: DNSlideOrienation;
    procedure set_Orientation(value: DNSlideOrienation);

  { methods } 

    procedure SetSize(&type: DNSlideSizeType; scaleType: DNSlideSizeScaleType); overload;
    procedure SetSize(width: Single; height: Single; scaleType: DNSlideSizeScaleType); overload;

  { propertys } 

    property Size: DDN.System.Drawing.DNSizeF read get_Size;
    property &Type: DNSlideSizeType read get_Type;
    property Orientation: DNSlideOrienation read get_Orientation write set_Orientation;
  end;

  //-------------namespace: Aspose.Slides----------------
  [DNTypeName('Aspose.Slides.ISlideText')]
  DNISlideText = interface(DDN.mscorlib.DNObject)
  ['{35388ECE-C290-4A65-A7AF-FBB7CB485C38}']
  { getters & setters } 

    function get_Text: string;
    function get_MasterText: string;
    function get_LayoutText: string;
    function get_NotesText: string;

  { propertys } 

    property Text: string read get_Text;
    property MasterText: string read get_MasterText;
    property LayoutText: string read get_LayoutText;
    property NotesText: string read get_NotesText;
  end;

  //-------------namespace: Aspose.Slides----------------
  [DNTypeName('Aspose.Slides.ISpreadsheetOptions')]
  DNISpreadsheetOptions = interface(DDN.mscorlib.DNObject)
  ['{50F6E98D-690B-4D26-B373-BD71A97064F6}']
  { getters & setters } 

    function get_PreferredCulture: DDN.mscorlib.DNCultureInfo;
    procedure set_PreferredCulture(value: DDN.mscorlib.DNCultureInfo);
    function get_RecoverWorkbookFromChartCache: Boolean;
    procedure set_RecoverWorkbookFromChartCache(value: Boolean);

  { propertys } 

    property PreferredCulture: DDN.mscorlib.DNCultureInfo read get_PreferredCulture write set_PreferredCulture;
    property RecoverWorkbookFromChartCache: Boolean read get_RecoverWorkbookFromChartCache write set_RecoverWorkbookFromChartCache;
  end;

  //-------------namespace: Aspose.Slides----------------
  [DNTypeName('Aspose.Slides.IStreamWrapperFactory')]
  DNIStreamWrapperFactory = interface(DDN.mscorlib.DNObject)
  ['{D784F45F-EB75-4BBB-8582-7D4DDC75C405}']
  { methods } 

    function CreateMemoryStreamWrapper: DNIStreamWrapper; overload;
    function CreateMemoryStreamWrapper(buffer: TArray<Byte>): DNIStreamWrapper; overload;
    function CreateFileStreamWrapper(fileName: string; fileMode: DDN.mscorlib.DNFileMode): DNIStreamWrapper; overload;
    function CreateFileStreamWrapper(fileName: string; fileMode: DDN.mscorlib.DNFileMode; fileAccess: DDN.mscorlib.DNFileAccess): DNIStreamWrapper; overload;

  end;

  //-------------namespace: Aspose.Slides----------------
  [DNTypeName('Aspose.Slides.ISvgImage')]
  DNISvgImage = interface(DDN.mscorlib.DNObject)
  ['{8BB43C22-78D1-4032-A149-82FCD3992F0F}']
  { getters & setters } 

    function get_SvgContent: string;
    function get_SvgData: TArray<Byte>;
    function get_ExternalResourceResolver: DNIExternalResourceResolver;
    function get_BaseUri: string;

  { propertys } 

    property SvgContent: string read get_SvgContent;
    property SvgData: TArray<Byte> read get_SvgData;
    property ExternalResourceResolver: DNIExternalResourceResolver read get_ExternalResourceResolver;
    property BaseUri: string read get_BaseUri;
  end;

  //-------------namespace: Aspose.Slides----------------
  [DNTypeName('Aspose.Slides.ITabFactory')]
  DNITabFactory = interface(DDN.mscorlib.DNObject)
  ['{8267F5C2-A8F9-417D-9A3E-9662898F6ABB}']
  { methods } 

    function CreateTab(position: Double; align: DNTabAlignment): DNITab;

  end;

  //-------------namespace: Aspose.Slides----------------
  [DNTypeName('Aspose.Slides.ITableFormat')]
  DNITableFormat = interface(DDN.mscorlib.DNObject)
  ['{76DCDB6C-A331-46CA-ADFF-7967805761A1}']
  { getters & setters } 

    function get_FillFormat: DNIFillFormat;

  { methods } 

    function GetEffective: DNITableFormatEffectiveData;

  { propertys } 

    property FillFormat: DNIFillFormat read get_FillFormat;
  end;

  //-------------namespace: Aspose.Slides----------------
  [DNTypeName('Aspose.Slides.ITextFrameFormat')]
  DNITextFrameFormat = interface(DDN.mscorlib.DNObject)
  ['{F62AE20A-E3FE-4E8E-8E0C-F5E1C8E2F35B}']
  { getters & setters } 

    function get_TextStyle: DNITextStyle;
    function get_MarginLeft: Double;
    procedure set_MarginLeft(value: Double);
    function get_MarginRight: Double;
    procedure set_MarginRight(value: Double);
    function get_MarginTop: Double;
    procedure set_MarginTop(value: Double);
    function get_MarginBottom: Double;
    procedure set_MarginBottom(value: Double);
    function get_WrapText: DNNullableBool;
    procedure set_WrapText(value: DNNullableBool);
    function get_AnchoringType: DNTextAnchorType;
    procedure set_AnchoringType(value: DNTextAnchorType);
    function get_CenterText: DNNullableBool;
    procedure set_CenterText(value: DNNullableBool);
    function get_TextVerticalType: DNTextVerticalType;
    procedure set_TextVerticalType(value: DNTextVerticalType);
    function get_AutofitType: DNTextAutofitType;
    procedure set_AutofitType(value: DNTextAutofitType);
    function get_ColumnCount: Int32;
    procedure set_ColumnCount(value: Int32);
    function get_ColumnSpacing: Double;
    procedure set_ColumnSpacing(value: Double);
    function get_ThreeDFormat: DNIThreeDFormat;
    function get_KeepTextFlat: Boolean;
    procedure set_KeepTextFlat(value: Boolean);
    function get_RotationAngle: Single;
    procedure set_RotationAngle(value: Single);
    function get_Transform: DNTextShapeType;
    procedure set_Transform(value: DNTextShapeType);

  { methods } 

    function GetEffective: DNITextFrameFormatEffectiveData;

  { propertys } 

    property TextStyle: DNITextStyle read get_TextStyle;
    property MarginLeft: Double read get_MarginLeft write set_MarginLeft;
    property MarginRight: Double read get_MarginRight write set_MarginRight;
    property MarginTop: Double read get_MarginTop write set_MarginTop;
    property MarginBottom: Double read get_MarginBottom write set_MarginBottom;
    property WrapText: DNNullableBool read get_WrapText write set_WrapText;
    property AnchoringType: DNTextAnchorType read get_AnchoringType write set_AnchoringType;
    property CenterText: DNNullableBool read get_CenterText write set_CenterText;
    property TextVerticalType: DNTextVerticalType read get_TextVerticalType write set_TextVerticalType;
    property AutofitType: DNTextAutofitType read get_AutofitType write set_AutofitType;
    property ColumnCount: Int32 read get_ColumnCount write set_ColumnCount;
    property ColumnSpacing: Double read get_ColumnSpacing write set_ColumnSpacing;
    property ThreeDFormat: DNIThreeDFormat read get_ThreeDFormat;
    property KeepTextFlat: Boolean read get_KeepTextFlat write set_KeepTextFlat;
    property RotationAngle: Single read get_RotationAngle write set_RotationAngle;
    property Transform: DNTextShapeType read get_Transform write set_Transform;
  end;

  //-------------namespace: Aspose.Slides----------------
  [DNTypeName('Aspose.Slides.ITextFrameFormatEffectiveData')]
  DNITextFrameFormatEffectiveData = interface(DDN.mscorlib.DNObject)
  ['{AEEC8164-A3A2-48E3-9E4F-67A032ED2DB1}']
  { getters & setters } 

    function get_TextStyle: DNITextStyleEffectiveData;
    function get_MarginLeft: Double;
    function get_MarginRight: Double;
    function get_MarginTop: Double;
    function get_MarginBottom: Double;
    function get_WrapText: Boolean;
    function get_AnchoringType: DNTextAnchorType;
    function get_CenterText: Boolean;
    function get_TextVerticalType: DNTextVerticalType;
    function get_AutofitType: DNTextAutofitType;
    function get_ColumnCount: Int32;
    function get_ColumnSpacing: Single;

  { propertys } 

    property TextStyle: DNITextStyleEffectiveData read get_TextStyle;
    property MarginLeft: Double read get_MarginLeft;
    property MarginRight: Double read get_MarginRight;
    property MarginTop: Double read get_MarginTop;
    property MarginBottom: Double read get_MarginBottom;
    property WrapText: Boolean read get_WrapText;
    property AnchoringType: DNTextAnchorType read get_AnchoringType;
    property CenterText: Boolean read get_CenterText;
    property TextVerticalType: DNTextVerticalType read get_TextVerticalType;
    property AutofitType: DNTextAutofitType read get_AutofitType;
    property ColumnCount: Int32 read get_ColumnCount;
    property ColumnSpacing: Single read get_ColumnSpacing;
  end;

  //-------------namespace: Aspose.Slides----------------
  [DNTypeName('Aspose.Slides.ITextHighlightingOptions')]
  DNITextHighlightingOptions = interface(DDN.mscorlib.DNObject)
  ['{61405ED3-CDAA-4436-AD75-82DABEE68206}']
  { getters & setters } 

    function get_CaseSensitive: Boolean;
    procedure set_CaseSensitive(value: Boolean);
    function get_WholeWordsOnly: Boolean;
    procedure set_WholeWordsOnly(value: Boolean);

  { propertys } 

    property CaseSensitive: Boolean read get_CaseSensitive write set_CaseSensitive;
    property WholeWordsOnly: Boolean read get_WholeWordsOnly write set_WholeWordsOnly;
  end;

  //-------------namespace: Aspose.Slides----------------
  [DNTypeName('Aspose.Slides.ITextStyle')]
  DNITextStyle = interface(DDN.mscorlib.DNObject)
  ['{D1D23C22-F002-42E0-98EE-43F1BF297E35}']
  { getters & setters } 

    function get_DefaultParagraphFormat: DNIParagraphFormat;

  { methods } 

    function GetLevel(index: Int32): DNIParagraphFormat;
    function GetEffective: DNITextStyleEffectiveData;

  { propertys } 

    property DefaultParagraphFormat: DNIParagraphFormat read get_DefaultParagraphFormat;
  end;

  //-------------namespace: Aspose.Slides----------------
  [DNTypeName('Aspose.Slides.ITextStyleEffectiveData')]
  DNITextStyleEffectiveData = interface(DDN.mscorlib.DNObject)
  ['{1259EEA2-A39C-4C21-B962-37842885462F}']
  { getters & setters } 

    function get_DefaultParagraphFormat: DNIParagraphFormatEffectiveData;

  { methods } 

    function GetLevel(index: Int32): DNIParagraphFormatEffectiveData;

  { propertys } 

    property DefaultParagraphFormat: DNIParagraphFormatEffectiveData read get_DefaultParagraphFormat;
  end;

  //-------------namespace: Aspose.Slides----------------
  [DNTypeName('Aspose.Slides.IThreeDParamSource')]
  DNIThreeDParamSource = interface(DDN.mscorlib.DNObject)
  ['{931810F4-D3D4-44E0-8953-A25E766036A9}']
  end;

  //-------------namespace: Aspose.Slides----------------
  [DNTypeName('Aspose.Slides.IThreeDFormat')]
  DNIThreeDFormat = interface(DNIThreeDParamSource)
  ['{1EBFCCFF-739C-4DEB-B04D-E63D9ADC595A}']
  { getters & setters } 

    function get_ContourWidth: Double;
    procedure set_ContourWidth(value: Double);
    function get_ExtrusionHeight: Double;
    procedure set_ExtrusionHeight(value: Double);
    function get_Depth: Double;
    procedure set_Depth(value: Double);
    function get_BevelTop: DNIShapeBevel;
    function get_BevelBottom: DNIShapeBevel;
    function get_ContourColor: DNIColorFormat;
    function get_ExtrusionColor: DNIColorFormat;
    function get_Camera: DNICamera;
    function get_LightRig: DNILightRig;
    function get_Material: DNMaterialPresetType;
    procedure set_Material(value: DNMaterialPresetType);
    function get_AsIThreeDParamSource: DNIThreeDParamSource;

  { methods } 

    function GetEffective: DNIThreeDFormatEffectiveData;

  { propertys } 

    property ContourWidth: Double read get_ContourWidth write set_ContourWidth;
    property ExtrusionHeight: Double read get_ExtrusionHeight write set_ExtrusionHeight;
    property Depth: Double read get_Depth write set_Depth;
    property BevelTop: DNIShapeBevel read get_BevelTop;
    property BevelBottom: DNIShapeBevel read get_BevelBottom;
    property ContourColor: DNIColorFormat read get_ContourColor;
    property ExtrusionColor: DNIColorFormat read get_ExtrusionColor;
    property Camera: DNICamera read get_Camera;
    property LightRig: DNILightRig read get_LightRig;
    property Material: DNMaterialPresetType read get_Material write set_Material;
    property AsIThreeDParamSource: DNIThreeDParamSource read get_AsIThreeDParamSource;
  end;

  //-------------namespace: Aspose.Slides----------------
  [DNTypeName('Aspose.Slides.IThreeDFormatEffectiveData')]
  DNIThreeDFormatEffectiveData = interface(DNIThreeDParamSource)
  ['{8AC0DA79-FF20-467F-ACB2-ACB5AE569BA0}']
  { getters & setters } 

    function get_ContourWidth: Double;
    function get_ExtrusionHeight: Double;
    function get_Depth: Double;
    function get_BevelTop: DNIShapeBevelEffectiveData;
    function get_BevelBottom: DNIShapeBevelEffectiveData;
    function get_ContourColor: DDN.System.Drawing.DNColor;
    function get_ExtrusionColor: DDN.System.Drawing.DNColor;
    function get_Camera: DNICameraEffectiveData;
    function get_LightRig: DNILightRigEffectiveData;
    function get_Material: DNMaterialPresetType;
    function get_AsIThreeDParamSource: DNIThreeDParamSource;

  { propertys } 

    property ContourWidth: Double read get_ContourWidth;
    property ExtrusionHeight: Double read get_ExtrusionHeight;
    property Depth: Double read get_Depth;
    property BevelTop: DNIShapeBevelEffectiveData read get_BevelTop;
    property BevelBottom: DNIShapeBevelEffectiveData read get_BevelBottom;
    property ContourColor: DDN.System.Drawing.DNColor read get_ContourColor;
    property ExtrusionColor: DDN.System.Drawing.DNColor read get_ExtrusionColor;
    property Camera: DNICameraEffectiveData read get_Camera;
    property LightRig: DNILightRigEffectiveData read get_LightRig;
    property Material: DNMaterialPresetType read get_Material;
    property AsIThreeDParamSource: DNIThreeDParamSource read get_AsIThreeDParamSource;
  end;

  //-------------namespace: Aspose.Slides----------------
  [DNTypeName('Aspose.Slides.IVideo')]
  DNIVideo = interface(DDN.mscorlib.DNObject)
  ['{EC14DC83-BB51-44C0-B9A9-6388D0B0F566}']
  { getters & setters } 

    function get_ContentType: string;
    function get_BinaryData: TArray<Byte>;

  { methods } 

    function GetStream: DDN.mscorlib.DNStream;

  { propertys } 

    property ContentType: string read get_ContentType;
    property BinaryData: TArray<Byte> read get_BinaryData;
  end;

  //-------------namespace: Aspose.Slides----------------
  [DNTypeName('Aspose.Slides.IViewProperties')]
  DNIViewProperties = interface(DDN.mscorlib.DNObject)
  ['{50FF25D3-2000-42B7-9E2C-D270A1D1520F}']
  { getters & setters } 

    function get_LastView: DNViewType;
    procedure set_LastView(value: DNViewType);
    function get_ShowComments: DNNullableBool;
    procedure set_ShowComments(value: DNNullableBool);
    function get_SlideViewProperties: DNICommonSlideViewProperties;
    function get_NotesViewProperties: DNICommonSlideViewProperties;
    function get_NormalViewProperties: DNINormalViewProperties;

  { propertys } 

    property LastView: DNViewType read get_LastView write set_LastView;
    property ShowComments: DNNullableBool read get_ShowComments write set_ShowComments;
    property SlideViewProperties: DNICommonSlideViewProperties read get_SlideViewProperties;
    property NotesViewProperties: DNICommonSlideViewProperties read get_NotesViewProperties;
    property NormalViewProperties: DNINormalViewProperties read get_NormalViewProperties;
  end;

  //-------------namespace: Aspose.Slides.MathText----------------
  [DNTypeName('Aspose.Slides.MathText.IMathAccentFactory')]
  DNIMathAccentFactory = interface(DDN.mscorlib.DNObject)
  ['{69343859-FDD8-4CE4-8BEA-5BC61819D5AF}']
  { methods } 

    function CreateMathAccent(element: DNIMathElement): DNIMathAccent; overload;
    function CreateMathAccent(element: DNIMathElement; accentCharacter: Char): DNIMathAccent; overload;

  end;

  //-------------namespace: Aspose.Slides.MathText----------------
  [DNTypeName('Aspose.Slides.MathText.IMathArrayFactory')]
  DNIMathArrayFactory = interface(DDN.mscorlib.DNObject)
  ['{E6B7D316-E822-4B9A-B077-704FC89D44CB}']
  { methods } 

    function CreateMathArray(element: DNIMathElement): DNIMathArray; overload;
    function CreateMathArray(elements: DNIMathElementCollection): DNIMathArray; overload;

  end;

  //-------------namespace: Aspose.Slides.MathText----------------
  [DNTypeName('Aspose.Slides.MathText.IMathBarFactory')]
  DNIMathBarFactory = interface(DDN.mscorlib.DNObject)
  ['{86541BF1-7DAC-4651-B994-6E340CC794F7}']
  { methods } 

    function CreateMathBar(element: DNIMathElement): DNIMathBar; overload;
    function CreateMathBar(element: DNIMathElement; position: DNMathTopBotPositions): DNIMathBar; overload;

  end;

  //-------------namespace: Aspose.Slides.MathText----------------
  [DNTypeName('Aspose.Slides.MathText.IMathBlockFactory')]
  DNIMathBlockFactory = interface(DDN.mscorlib.DNObject)
  ['{A6CB223E-0447-494F-841C-50B110B73ECB}']
  { methods } 

    function CreateMathBlock: DNIMathBlock; overload;
    function CreateMathBlock(mathElement: DNIMathElement): DNIMathBlock; overload;
    function CreateMathBlock(mathElements: DNIMathElementCollection): DNIMathBlock; overload;

  end;

  //-------------namespace: Aspose.Slides.MathText----------------
  [DNTypeName('Aspose.Slides.MathText.IMathBorderBoxFactory')]
  DNIMathBorderBoxFactory = interface(DDN.mscorlib.DNObject)
  ['{0EA8A174-D1F8-4B9D-A7D5-D2C98691D4E2}']
  { methods } 

    function CreateMathBorderBox(element: DNIMathElement): DNIMathBorderBox; overload;
    function CreateMathBorderBox(element: DNIMathElement; hideTop: Boolean; hideBottom: Boolean; hideLeft: Boolean; hideRight: Boolean; strikethroughHorizontal: Boolean; strikethroughVertical: Boolean; strikethroughBottomLeftToTopRight: Boolean; strikethroughTopLeftToBottomRight: Boolean): DNIMathBorderBox; overload;

  end;

  //-------------namespace: Aspose.Slides.MathText----------------
  [DNTypeName('Aspose.Slides.MathText.IMathBoxFactory')]
  DNIMathBoxFactory = interface(DDN.mscorlib.DNObject)
  ['{129988B0-5BF7-41DB-8C41-1216AA794968}']
  { methods } 

    function CreateMathBox(element: DNIMathElement): DNIMathBox;

  end;

  //-------------namespace: Aspose.Slides.MathText----------------
  [DNTypeName('Aspose.Slides.MathText.IMathDelimiterFactory')]
  DNIMathDelimiterFactory = interface(DDN.mscorlib.DNObject)
  ['{91BFC1A6-7AAD-4EE6-877D-001CD86C39D4}']
  { methods } 

    function CreateMathDelimiter(element: DNIMathElement): DNIMathDelimiter; overload;
    function CreateMathDelimiter(mathElements: DNIMathElementCollection): DNIMathDelimiter; overload;

  end;

  //-------------namespace: Aspose.Slides.MathText----------------
  [DNTypeName('Aspose.Slides.MathText.IMathElement')]
  DNIMathElement = interface(DDN.mscorlib.DNObject)
  ['{FB7CA76D-E61E-427A-A0CC-1B494F4D6C82}']
  { methods } 

    function Join(mathElement: DNIMathElement): DNIMathBlock; overload;
    function Join(mathText: string): DNIMathBlock; overload;
    function Divide(denominator: DNIMathElement): DNIMathFraction; overload;
    function Divide(denominator: string): DNIMathFraction; overload;
    function Divide(denominator: DNIMathElement; fractionType: DNMathFractionTypes): DNIMathFraction; overload;
    function Divide(denominator: string; fractionType: DNMathFractionTypes): DNIMathFraction; overload;
    function Enclose: DNIMathDelimiter; overload;
    function Enclose(beginningCharacter: Char; endingCharacter: Char): DNIMathDelimiter; overload;
    function &Function(functionArgument: DNIMathElement): DNIMathFunction; overload;
    function &Function(functionArgument: string): DNIMathFunction; overload;
    function AsArgumentOfFunction(functionName: DNIMathElement): DNIMathFunction; overload;
    function AsArgumentOfFunction(functionName: string): DNIMathFunction; overload;
    function AsArgumentOfFunction(functionType: DNMathFunctionsOfOneArgument): DNIMathFunction; overload;
    function AsArgumentOfFunction(functionType: DNMathFunctionsOfTwoArguments; additionalArgument: DNIMathElement): DNIMathFunction; overload;
    function AsArgumentOfFunction(functionType: DNMathFunctionsOfTwoArguments; additionalArgument: string): DNIMathFunction; overload;
    function SetSubscript(subscript: DNIMathElement): DNIMathSubscriptElement; overload;
    function SetSubscript(subscript: string): DNIMathSubscriptElement; overload;
    function SetSuperscript(superscript: DNIMathElement): DNIMathSuperscriptElement; overload;
    function SetSuperscript(superscript: string): DNIMathSuperscriptElement; overload;
    function SetSubSuperscriptOnTheRight(subscript: DNIMathElement; superscript: DNIMathElement): DNIMathRightSubSuperscriptElement; overload;
    function SetSubSuperscriptOnTheRight(subscript: string; superscript: string): DNIMathRightSubSuperscriptElement; overload;
    function SetSubSuperscriptOnTheLeft(subscript: DNIMathElement; superscript: DNIMathElement): DNIMathLeftSubSuperscriptElement; overload;
    function SetSubSuperscriptOnTheLeft(subscript: string; superscript: string): DNIMathLeftSubSuperscriptElement; overload;
    function Radical(degree: DNIMathElement): DNIMathRadical; overload;
    function Radical(degree: string): DNIMathRadical; overload;
    function SetUpperLimit(limit: DNIMathElement): DNIMathLimit; overload;
    function SetUpperLimit(limit: string): DNIMathLimit; overload;
    function SetLowerLimit(limit: DNIMathElement): DNIMathLimit; overload;
    function SetLowerLimit(limit: string): DNIMathLimit; overload;
    function Nary(&type: DNMathNaryOperatorTypes; lowerLimit: DNIMathElement; upperLimit: DNIMathElement): DNIMathNaryOperator; overload;
    function Nary(&type: DNMathNaryOperatorTypes; lowerLimit: string; upperLimit: string): DNIMathNaryOperator; overload;
    function ToMathArray: DNIMathArray;
    function Integral(integralType: DNMathIntegralTypes; lowerLimit: DNIMathElement; upperLimit: DNIMathElement; limitLocations: DNMathLimitLocations): DNIMathNaryOperator; overload;
    function Integral(integralType: DNMathIntegralTypes; lowerLimit: DNIMathElement; upperLimit: DNIMathElement): DNIMathNaryOperator; overload;
    function Integral(integralType: DNMathIntegralTypes): DNIMathNaryOperator; overload;
    function Integral(integralType: DNMathIntegralTypes; lowerLimit: string; upperLimit: string; limitLocations: DNMathLimitLocations): DNIMathNaryOperator; overload;
    function Integral(integralType: DNMathIntegralTypes; lowerLimit: string; upperLimit: string): DNIMathNaryOperator; overload;
    function Accent(accentCharacter: Char): DNIMathAccent;
    function Overbar: DNIMathBar;
    function Underbar: DNIMathBar;
    function Group: DNIMathGroupingCharacter; overload;
    function Group(character: Char; position: DNMathTopBotPositions; verticalJustification: DNMathTopBotPositions): DNIMathGroupingCharacter; overload;
    function ToBorderBox: DNIMathBorderBox; overload;
    function ToBorderBox(hideTop: Boolean; hideBottom: Boolean; hideLeft: Boolean; hideRight: Boolean; strikethroughHorizontal: Boolean; strikethroughVertical: Boolean; strikethroughBottomLeftToTopRight: Boolean; strikethroughTopLeftToBottomRight: Boolean): DNIMathBorderBox; overload;
    function ToBox: DNIMathBox;

  end;

  //-------------namespace: Aspose.Slides.MathText----------------
  [DNTypeName('Aspose.Slides.MathText.IMathAccent')]
  DNIMathAccent = interface(DNIMathElement)
  ['{6C8401F2-CEBB-462D-B54D-6C41636BC68E}']
  { getters & setters } 

    function get_Base: DNIMathElement;
    function get_Character: Char;
    procedure set_Character(value: Char);
    function get_AsIMathElement: DNIMathElement;

  { propertys } 

    property Base: DNIMathElement read get_Base;
    property Character: Char read get_Character write set_Character;
    property AsIMathElement: DNIMathElement read get_AsIMathElement;
  end;

  //-------------namespace: Aspose.Slides.MathText----------------
  [DNTypeName('Aspose.Slides.MathText.IMathArray')]
  DNIMathArray = interface(DNIMathElement)
  ['{5D1FD859-D43F-4667-BBCC-69A28319620E}']
  { getters & setters } 

    function get_Arguments: DNIMathElementCollection;
    function get_BaseJustification: DNMathVerticalAlignment;
    procedure set_BaseJustification(value: DNMathVerticalAlignment);
    function get_MaximumDistribution: Boolean;
    procedure set_MaximumDistribution(value: Boolean);
    function get_ObjectDistribution: Boolean;
    procedure set_ObjectDistribution(value: Boolean);
    function get_RowSpacingRule: DNMathRowSpacingRule;
    procedure set_RowSpacingRule(value: DNMathRowSpacingRule);
    function get_RowSpacing: UInt32;
    procedure set_RowSpacing(value: UInt32);
    function get_AsIMathElement: DNIMathElement;

  { propertys } 

    property Arguments: DNIMathElementCollection read get_Arguments;
    property BaseJustification: DNMathVerticalAlignment read get_BaseJustification write set_BaseJustification;
    property MaximumDistribution: Boolean read get_MaximumDistribution write set_MaximumDistribution;
    property ObjectDistribution: Boolean read get_ObjectDistribution write set_ObjectDistribution;
    property RowSpacingRule: DNMathRowSpacingRule read get_RowSpacingRule write set_RowSpacingRule;
    property RowSpacing: UInt32 read get_RowSpacing write set_RowSpacing;
    property AsIMathElement: DNIMathElement read get_AsIMathElement;
  end;

  //-------------namespace: Aspose.Slides.MathText----------------
  [DNTypeName('Aspose.Slides.MathText.IMathBar')]
  DNIMathBar = interface(DNIMathElement)
  ['{880DF6F7-7DD4-44ED-9FF5-D941F9868DDB}']
  { getters & setters } 

    function get_Base: DNIMathElement;
    function get_Position: DNMathTopBotPositions;
    procedure set_Position(value: DNMathTopBotPositions);
    function get_AsIMathElement: DNIMathElement;

  { propertys } 

    property Base: DNIMathElement read get_Base;
    property Position: DNMathTopBotPositions read get_Position write set_Position;
    property AsIMathElement: DNIMathElement read get_AsIMathElement;
  end;

  //-------------namespace: Aspose.Slides.MathText----------------
  [DNTypeName('Aspose.Slides.MathText.IMathBorderBox')]
  DNIMathBorderBox = interface(DNIMathElement)
  ['{77C1951D-BF32-4EBD-A3AE-BC54FA45F7D9}']
  { getters & setters } 

    function get_Base: DNIMathElement;
    function get_HideTop: Boolean;
    procedure set_HideTop(value: Boolean);
    function get_HideBottom: Boolean;
    procedure set_HideBottom(value: Boolean);
    function get_HideLeft: Boolean;
    procedure set_HideLeft(value: Boolean);
    function get_HideRight: Boolean;
    procedure set_HideRight(value: Boolean);
    function get_StrikethroughHorizontal: Boolean;
    procedure set_StrikethroughHorizontal(value: Boolean);
    function get_StrikethroughVertical: Boolean;
    procedure set_StrikethroughVertical(value: Boolean);
    function get_StrikethroughBottomLeftToTopRight: Boolean;
    procedure set_StrikethroughBottomLeftToTopRight(value: Boolean);
    function get_StrikethroughTopLeftToBottomRight: Boolean;
    procedure set_StrikethroughTopLeftToBottomRight(value: Boolean);
    function get_AsIMathElement: DNIMathElement;

  { propertys } 

    property Base: DNIMathElement read get_Base;
    property HideTop: Boolean read get_HideTop write set_HideTop;
    property HideBottom: Boolean read get_HideBottom write set_HideBottom;
    property HideLeft: Boolean read get_HideLeft write set_HideLeft;
    property HideRight: Boolean read get_HideRight write set_HideRight;
    property StrikethroughHorizontal: Boolean read get_StrikethroughHorizontal write set_StrikethroughHorizontal;
    property StrikethroughVertical: Boolean read get_StrikethroughVertical write set_StrikethroughVertical;
    property StrikethroughBottomLeftToTopRight: Boolean read get_StrikethroughBottomLeftToTopRight write set_StrikethroughBottomLeftToTopRight;
    property StrikethroughTopLeftToBottomRight: Boolean read get_StrikethroughTopLeftToBottomRight write set_StrikethroughTopLeftToBottomRight;
    property AsIMathElement: DNIMathElement read get_AsIMathElement;
  end;

  //-------------namespace: Aspose.Slides.MathText----------------
  [DNTypeName('Aspose.Slides.MathText.IMathBox')]
  DNIMathBox = interface(DNIMathElement)
  ['{5CCE7B82-99C7-4C94-A252-66769496CF0D}']
  { getters & setters } 

    function get_Base: DNIMathElement;
    function get_OperatorEmulator: Boolean;
    procedure set_OperatorEmulator(value: Boolean);
    function get_NoBreak: Boolean;
    procedure set_NoBreak(value: Boolean);
    function get_Differential: Boolean;
    procedure set_Differential(value: Boolean);
    function get_AlignmentPoint: Boolean;
    procedure set_AlignmentPoint(value: Boolean);
    function get_ExplicitBreak: Byte;
    procedure set_ExplicitBreak(value: Byte);
    function get_AsIMathElement: DNIMathElement;

  { propertys } 

    property Base: DNIMathElement read get_Base;
    property OperatorEmulator: Boolean read get_OperatorEmulator write set_OperatorEmulator;
    property NoBreak: Boolean read get_NoBreak write set_NoBreak;
    property Differential: Boolean read get_Differential write set_Differential;
    property AlignmentPoint: Boolean read get_AlignmentPoint write set_AlignmentPoint;
    property ExplicitBreak: Byte read get_ExplicitBreak write set_ExplicitBreak;
    property AsIMathElement: DNIMathElement read get_AsIMathElement;
  end;

  //-------------namespace: Aspose.Slides.MathText----------------
  [DNTypeName('Aspose.Slides.MathText.IMathDelimiter')]
  DNIMathDelimiter = interface(DNIMathElement)
  ['{41577687-E7B8-454E-83F7-8DFFA14BC696}']
  { getters & setters } 

    function get_Arguments: DNIMathElementCollection;
    function get_BeginningCharacter: Char;
    procedure set_BeginningCharacter(value: Char);
    function get_SeparatorCharacter: Char;
    procedure set_SeparatorCharacter(value: Char);
    function get_EndingCharacter: Char;
    procedure set_EndingCharacter(value: Char);
    function get_GrowToMatchOperandHeight: Boolean;
    procedure set_GrowToMatchOperandHeight(value: Boolean);
    function get_DelimiterShape: DNMathDelimiterShape;
    procedure set_DelimiterShape(value: DNMathDelimiterShape);
    function get_AsIMathElement: DNIMathElement;

  { methods } 

    function Delimit(separatorCharacter: Char): DNIMathDelimiter;

  { propertys } 

    property Arguments: DNIMathElementCollection read get_Arguments;
    property BeginningCharacter: Char read get_BeginningCharacter write set_BeginningCharacter;
    property SeparatorCharacter: Char read get_SeparatorCharacter write set_SeparatorCharacter;
    property EndingCharacter: Char read get_EndingCharacter write set_EndingCharacter;
    property GrowToMatchOperandHeight: Boolean read get_GrowToMatchOperandHeight write set_GrowToMatchOperandHeight;
    property DelimiterShape: DNMathDelimiterShape read get_DelimiterShape write set_DelimiterShape;
    property AsIMathElement: DNIMathElement read get_AsIMathElement;
  end;

  //-------------namespace: Aspose.Slides.MathText----------------
  [DNTypeName('Aspose.Slides.MathText.IMathematicalText')]
  DNIMathematicalText = interface(DNIMathElement)
  ['{9E19C0C0-1CF3-4995-9D78-08EF5E372FA1}']
  { getters & setters } 

    function get_Value: string;
    procedure set_Value(value: string);
    function get_Format: DNIPortionFormat;
    function get_AsIMathElement: DNIMathElement;

  { propertys } 

    property Value: string read get_Value write set_Value;
    property Format: DNIPortionFormat read get_Format;
    property AsIMathElement: DNIMathElement read get_AsIMathElement;
  end;

  //-------------namespace: Aspose.Slides.MathText----------------
  [DNTypeName('Aspose.Slides.MathText.IMathFraction')]
  DNIMathFraction = interface(DNIMathElement)
  ['{F4BC9B17-DB17-4B49-B703-5D936AC10ACA}']
  { getters & setters } 

    function get_FractionType: DNMathFractionTypes;
    procedure set_FractionType(value: DNMathFractionTypes);
    function get_Numerator: DNIMathElement;
    function get_Denominator: DNIMathElement;
    function get_AsIMathElement: DNIMathElement;

  { propertys } 

    property FractionType: DNMathFractionTypes read get_FractionType write set_FractionType;
    property Numerator: DNIMathElement read get_Numerator;
    property Denominator: DNIMathElement read get_Denominator;
    property AsIMathElement: DNIMathElement read get_AsIMathElement;
  end;

  //-------------namespace: Aspose.Slides.MathText----------------
  [DNTypeName('Aspose.Slides.MathText.IMathFunction')]
  DNIMathFunction = interface(DNIMathElement)
  ['{49C41C20-D962-4B15-AE5F-2BE303AF747C}']
  { getters & setters } 

    function get_Name: DNIMathElement;
    function get_Base: DNIMathElement;
    function get_AsIMathElement: DNIMathElement;

  { propertys } 

    property Name: DNIMathElement read get_Name;
    property Base: DNIMathElement read get_Base;
    property AsIMathElement: DNIMathElement read get_AsIMathElement;
  end;

  //-------------namespace: Aspose.Slides.MathText----------------
  [DNTypeName('Aspose.Slides.MathText.IMathGroupingCharacter')]
  DNIMathGroupingCharacter = interface(DNIMathElement)
  ['{A666E821-160B-4ABB-84A5-A979ECB307FA}']
  { getters & setters } 

    function get_Base: DNIMathElement;
    function get_Character: Char;
    procedure set_Character(value: Char);
    function get_Position: DNMathTopBotPositions;
    procedure set_Position(value: DNMathTopBotPositions);
    function get_VerticalJustification: DNMathTopBotPositions;
    procedure set_VerticalJustification(value: DNMathTopBotPositions);
    function get_AsIMathElement: DNIMathElement;

  { propertys } 

    property Base: DNIMathElement read get_Base;
    property Character: Char read get_Character write set_Character;
    property Position: DNMathTopBotPositions read get_Position write set_Position;
    property VerticalJustification: DNMathTopBotPositions read get_VerticalJustification write set_VerticalJustification;
    property AsIMathElement: DNIMathElement read get_AsIMathElement;
  end;

  //-------------namespace: Aspose.Slides.MathText----------------
  [DNTypeName('Aspose.Slides.MathText.IMathLeftSubSuperscriptElement')]
  DNIMathLeftSubSuperscriptElement = interface(DNIMathElement)
  ['{EC46E875-9D31-4850-AE0A-46742E000C0A}']
  { getters & setters } 

    function get_Base: DNIMathElement;
    function get_Subscript: DNIMathElement;
    function get_Superscript: DNIMathElement;
    function get_AsIMathElement: DNIMathElement;

  { propertys } 

    property Base: DNIMathElement read get_Base;
    property Subscript: DNIMathElement read get_Subscript;
    property Superscript: DNIMathElement read get_Superscript;
    property AsIMathElement: DNIMathElement read get_AsIMathElement;
  end;

  //-------------namespace: Aspose.Slides.MathText----------------
  [DNTypeName('Aspose.Slides.MathText.IMathLimit')]
  DNIMathLimit = interface(DNIMathElement)
  ['{FD69407C-FC5A-4822-8505-98216847CF0F}']
  { getters & setters } 

    function get_Base: DNIMathElement;
    function get_Limit: DNIMathElement;
    function get_UpperLimit: Boolean;
    procedure set_UpperLimit(value: Boolean);
    function get_AsIMathElement: DNIMathElement;

  { propertys } 

    property Base: DNIMathElement read get_Base;
    property Limit: DNIMathElement read get_Limit;
    property UpperLimit: Boolean read get_UpperLimit write set_UpperLimit;
    property AsIMathElement: DNIMathElement read get_AsIMathElement;
  end;

  //-------------namespace: Aspose.Slides.MathText----------------
  [DNTypeName('Aspose.Slides.MathText.IMathMatrix')]
  DNIMathMatrix = interface(DNIMathElement)
  ['{9F58CA43-6F69-48F2-ACE9-AFE2C9D62322}']
  { getters & setters } 

    function get_Item(row: Int32; column: Int32): DNIMathElement;
    procedure set_Item(row: Int32; column: Int32; value: DNIMathElement);
    function get_RowCount: Int32;
    function get_ColumnCount: Int32;
    function get_HidePlaceholders: Boolean;
    procedure set_HidePlaceholders(value: Boolean);
    function get_BaseJustification: DNMathVerticalAlignment;
    procedure set_BaseJustification(value: DNMathVerticalAlignment);
    function get_MinColumnWidth: UInt32;
    procedure set_MinColumnWidth(value: UInt32);
    function get_ColumnGapRule: DNMathSpacingRules;
    procedure set_ColumnGapRule(value: DNMathSpacingRules);
    function get_ColumnGap: UInt32;
    procedure set_ColumnGap(value: UInt32);
    function get_RowGapRule: DNMathSpacingRules;
    procedure set_RowGapRule(value: DNMathSpacingRules);
    function get_RowGap: UInt32;
    procedure set_RowGap(value: UInt32);
    function get_AsIMathElement: DNIMathElement;

  { methods } 

    function GetColumnAlignment(columnIndex: Int32): DNMathHorizontalAlignment;
    procedure SetColumnAlignment(columnIndex: Int32; val: DNMathHorizontalAlignment);
    procedure SetColumnsAlignment(columnIndex: Int32; columnsCount: UInt32; val: DNMathHorizontalAlignment);
    procedure InsertRowBefore(rowIndex: Int32);
    procedure InsertRowAfter(rowIndex: Int32);
    procedure DeleteRow(rowIndex: Int32);
    procedure InsertColumnBefore(columnIndex: Int32);
    procedure InsertColumnAfter(columnIndex: Int32);
    procedure DeleteColumn(columnIndex: Int32);

  { propertys } 

    property Item[row: Int32; column: Int32]: DNIMathElement read get_Item write set_Item; default;
    property RowCount: Int32 read get_RowCount;
    property ColumnCount: Int32 read get_ColumnCount;
    property HidePlaceholders: Boolean read get_HidePlaceholders write set_HidePlaceholders;
    property BaseJustification: DNMathVerticalAlignment read get_BaseJustification write set_BaseJustification;
    property MinColumnWidth: UInt32 read get_MinColumnWidth write set_MinColumnWidth;
    property ColumnGapRule: DNMathSpacingRules read get_ColumnGapRule write set_ColumnGapRule;
    property ColumnGap: UInt32 read get_ColumnGap write set_ColumnGap;
    property RowGapRule: DNMathSpacingRules read get_RowGapRule write set_RowGapRule;
    property RowGap: UInt32 read get_RowGap write set_RowGap;
    property AsIMathElement: DNIMathElement read get_AsIMathElement;
  end;

  //-------------namespace: Aspose.Slides.MathText----------------
  [DNTypeName('Aspose.Slides.MathText.IMathNaryOperator')]
  DNIMathNaryOperator = interface(DNIMathElement)
  ['{A3488124-0C15-41E3-9702-562BE569A91A}']
  { getters & setters } 

    function get_Base: DNIMathElement;
    function get_Subscript: DNIMathElement;
    function get_Superscript: DNIMathElement;
    function get_AsIMathElement: DNIMathElement;
    function get_AsIMathNaryOperatorProperties: DNIMathNaryOperatorProperties;

  { propertys } 

    property Base: DNIMathElement read get_Base;
    property Subscript: DNIMathElement read get_Subscript;
    property Superscript: DNIMathElement read get_Superscript;
    property AsIMathElement: DNIMathElement read get_AsIMathElement;
    property AsIMathNaryOperatorProperties: DNIMathNaryOperatorProperties read get_AsIMathNaryOperatorProperties;
  end;

  //-------------namespace: Aspose.Slides.MathText----------------
  [DNTypeName('Aspose.Slides.MathText.IMathRadical')]
  DNIMathRadical = interface(DNIMathElement)
  ['{3A89A730-0F3F-48C6-9EC6-E028A2CBA027}']
  { getters & setters } 

    function get_Base: DNIMathElement;
    function get_Degree: DNIMathElement;
    function get_HideDegree: Boolean;
    procedure set_HideDegree(value: Boolean);
    function get_AsIMathElement: DNIMathElement;

  { propertys } 

    property Base: DNIMathElement read get_Base;
    property Degree: DNIMathElement read get_Degree;
    property HideDegree: Boolean read get_HideDegree write set_HideDegree;
    property AsIMathElement: DNIMathElement read get_AsIMathElement;
  end;

  //-------------namespace: Aspose.Slides.MathText----------------
  [DNTypeName('Aspose.Slides.MathText.IMathRightSubSuperscriptElement')]
  DNIMathRightSubSuperscriptElement = interface(DNIMathElement)
  ['{94B0AD4B-535F-4D51-9429-665AE6F5DE2B}']
  { getters & setters } 

    function get_Base: DNIMathElement;
    function get_Subscript: DNIMathElement;
    function get_Superscript: DNIMathElement;
    function get_AlignScripts: Boolean;
    procedure set_AlignScripts(value: Boolean);
    function get_AsIMathElement: DNIMathElement;

  { propertys } 

    property Base: DNIMathElement read get_Base;
    property Subscript: DNIMathElement read get_Subscript;
    property Superscript: DNIMathElement read get_Superscript;
    property AlignScripts: Boolean read get_AlignScripts write set_AlignScripts;
    property AsIMathElement: DNIMathElement read get_AsIMathElement;
  end;

  //-------------namespace: Aspose.Slides.MathText----------------
  [DNTypeName('Aspose.Slides.MathText.IMathSubscriptElement')]
  DNIMathSubscriptElement = interface(DNIMathElement)
  ['{18BCBDBA-BFB4-42A4-A423-447E0FEE98A0}']
  { getters & setters } 

    function get_Base: DNIMathElement;
    function get_Subscript: DNIMathElement;
    function get_AsIMathElement: DNIMathElement;

  { propertys } 

    property Base: DNIMathElement read get_Base;
    property Subscript: DNIMathElement read get_Subscript;
    property AsIMathElement: DNIMathElement read get_AsIMathElement;
  end;

  //-------------namespace: Aspose.Slides.MathText----------------
  [DNTypeName('Aspose.Slides.MathText.IMathSuperscriptElement')]
  DNIMathSuperscriptElement = interface(DNIMathElement)
  ['{04862968-19ED-447C-A1BC-13883D3B6870}']
  { getters & setters } 

    function get_Base: DNIMathElement;
    function get_Superscript: DNIMathElement;
    function get_AsIMathElement: DNIMathElement;

  { propertys } 

    property Base: DNIMathElement read get_Base;
    property Superscript: DNIMathElement read get_Superscript;
    property AsIMathElement: DNIMathElement read get_AsIMathElement;
  end;

  //-------------namespace: Aspose.Slides.MathText----------------
  [DNTypeName('Aspose.Slides.MathText.IMathematicalTextFactory')]
  DNIMathematicalTextFactory = interface(DDN.mscorlib.DNObject)
  ['{8B6DA85E-0BC1-41C0-A4B2-810A6E1432B8}']
  { methods } 

    function CreateMathematicalText: DNIMathematicalText; overload;
    function CreateMathematicalText(mathSymbol: Char): DNIMathematicalText; overload;
    function CreateMathematicalText(mathText: string): DNIMathematicalText; overload;
    function CreateMathematicalText(mathText: string; portionFormat: DNIPortionFormat): DNIMathematicalText; overload;

  end;

  //-------------namespace: Aspose.Slides.MathText----------------
  [DNTypeName('Aspose.Slides.MathText.IMathFractionFactory')]
  DNIMathFractionFactory = interface(DDN.mscorlib.DNObject)
  ['{56C5787F-7AF8-4ED8-9AD6-13A7EC763A8A}']
  { methods } 

    function CreateMathFraction(numerator: DNIMathElement; denominator: DNIMathElement; fractionType: DNMathFractionTypes): DNIMathFraction; overload;
    function CreateMathFraction(numerator: DNIMathElement; denominator: DNIMathElement): DNIMathFraction; overload;

  end;

  //-------------namespace: Aspose.Slides.MathText----------------
  [DNTypeName('Aspose.Slides.MathText.IMathFunctionFactory')]
  DNIMathFunctionFactory = interface(DDN.mscorlib.DNObject)
  ['{2BAC9EFF-11D9-4203-B9C1-9EE54F36DC5E}']
  { methods } 

    function CreateMathFunction(funcName: DNIMathElement; baseArgument: DNIMathElement): DNIMathFunction; overload;
    function CreateMathFunction(funcName: string; baseArgument: DNIMathElement): DNIMathFunction; overload;

  end;

  //-------------namespace: Aspose.Slides.MathText----------------
  [DNTypeName('Aspose.Slides.MathText.IMathGroupingCharacterFactory')]
  DNIMathGroupingCharacterFactory = interface(DDN.mscorlib.DNObject)
  ['{E985AC6A-6BA7-45DA-A210-693C5CC01DA3}']
  { methods } 

    function CreateMathGroupingCharacter(element: DNIMathElement; character: Char; position: DNMathTopBotPositions; verticalJustification: DNMathTopBotPositions): DNIMathGroupingCharacter; overload;
    function CreateMathGroupingCharacter(element: DNIMathElement): DNIMathGroupingCharacter; overload;

  end;

  //-------------namespace: Aspose.Slides.MathText----------------
  [DNTypeName('Aspose.Slides.MathText.IMathLeftSubSuperscriptElementFactory')]
  DNIMathLeftSubSuperscriptElementFactory = interface(DDN.mscorlib.DNObject)
  ['{0C46099E-4FFA-4910-AC80-909CA4F108C8}']
  { methods } 

    function CreateMathLeftSubSuperscriptElement(baseArg: DNIMathElement; subScript: DNIMathElement; superScript: DNIMathElement): DNIMathLeftSubSuperscriptElement;

  end;

  //-------------namespace: Aspose.Slides.MathText----------------
  [DNTypeName('Aspose.Slides.MathText.IMathLimitFactory')]
  DNIMathLimitFactory = interface(DDN.mscorlib.DNObject)
  ['{4C596335-9CD8-4386-BEDA-FA29108B0A1E}']
  { methods } 

    function CreateMathLimit(baseArg: DNIMathElement; limit: DNIMathElement; upperLimit: Boolean): DNIMathLimit; overload;
    function CreateMathLimit(baseArg: DNIMathElement; limit: DNIMathElement): DNIMathLimit; overload;

  end;

  //-------------namespace: Aspose.Slides.MathText----------------
  [DNTypeName('Aspose.Slides.MathText.IMathMatrixFactory')]
  DNIMathMatrixFactory = interface(DDN.mscorlib.DNObject)
  ['{1E6292DE-35AE-4279-9B7F-D146A9B19B26}']
  { methods } 

    function CreateMathMatrix(rowCount: Int32; columnCount: Int32): DNIMathMatrix;

  end;

  //-------------namespace: Aspose.Slides.MathText----------------
  [DNTypeName('Aspose.Slides.MathText.IMathNaryOperatorFactory')]
  DNIMathNaryOperatorFactory = interface(DDN.mscorlib.DNObject)
  ['{08D63252-2F0F-4B6F-A1C1-807E1D260282}']
  { methods } 

    function CreateMathNaryOperator(operatorSymbol: Char; baseArgument: DNIMathElement; lowerLimit: DNIMathElement; upperLimit: DNIMathElement): DNIMathNaryOperator; overload;
    function CreateMathNaryOperator(operatorSymbol: Char; baseArgument: DNIMathElement; lowerLimit: DNIMathElement): DNIMathNaryOperator; overload;
    function CreateMathNaryOperator(operatorSymbol: Char; baseArgument: DNIMathElement): DNIMathNaryOperator; overload;

  end;

  //-------------namespace: Aspose.Slides.MathText----------------
  [DNTypeName('Aspose.Slides.MathText.IMathNaryOperatorProperties')]
  DNIMathNaryOperatorProperties = interface(DDN.mscorlib.DNObject)
  ['{20CD9F04-67EC-4FAE-8BDD-5DEFFB444930}']
  { getters & setters } 

    function get_Operator: Char;
    procedure set_Operator(value: Char);
    function get_LimitLocation: DNMathLimitLocations;
    procedure set_LimitLocation(value: DNMathLimitLocations);
    function get_GrowToMatchOperandHeight: Boolean;
    procedure set_GrowToMatchOperandHeight(value: Boolean);
    function get_HideSubscript: Boolean;
    procedure set_HideSubscript(value: Boolean);
    function get_HideSuperscript: Boolean;
    procedure set_HideSuperscript(value: Boolean);

  { propertys } 

    property Operator: Char read get_Operator write set_Operator;
    property LimitLocation: DNMathLimitLocations read get_LimitLocation write set_LimitLocation;
    property GrowToMatchOperandHeight: Boolean read get_GrowToMatchOperandHeight write set_GrowToMatchOperandHeight;
    property HideSubscript: Boolean read get_HideSubscript write set_HideSubscript;
    property HideSuperscript: Boolean read get_HideSuperscript write set_HideSuperscript;
  end;

  //-------------namespace: Aspose.Slides.MathText----------------
  [DNTypeName('Aspose.Slides.MathText.IMathParagraphFactory')]
  DNIMathParagraphFactory = interface(DDN.mscorlib.DNObject)
  ['{994DD3A2-7BD8-41C9-8D8C-DD81251B0BBC}']
  { methods } 

    function CreateMathParagraph: DNIMathParagraph; overload;
    function CreateMathParagraph(mathBlock: DNIMathBlock): DNIMathParagraph; overload;

  end;

  //-------------namespace: Aspose.Slides.MathText----------------
  [DNTypeName('Aspose.Slides.MathText.IMathPortion')]
  DNIMathPortion = interface(DDN.mscorlib.DNObject)
  ['{4500E1D4-83E2-4E9A-8617-B44D19902D79}']
  { getters & setters } 

    function get_MathParagraph: DNIMathParagraph;

  { propertys } 

    property MathParagraph: DNIMathParagraph read get_MathParagraph;
  end;

  //-------------namespace: Aspose.Slides.MathText----------------
  [DNTypeName('Aspose.Slides.MathText.IMathRadicalFactory')]
  DNIMathRadicalFactory = interface(DDN.mscorlib.DNObject)
  ['{E017F538-58A9-4049-A21E-07EFB3EB627B}']
  { methods } 

    function CreateMathRadical(baseArgument: DNIMathElement; degreeArgument: DNIMathElement): DNIMathRadical;

  end;

  //-------------namespace: Aspose.Slides.MathText----------------
  [DNTypeName('Aspose.Slides.MathText.IMathRightSubSuperscriptElementFactory')]
  DNIMathRightSubSuperscriptElementFactory = interface(DDN.mscorlib.DNObject)
  ['{C449FD5D-34E8-4D19-AA9F-5C1483F897B5}']
  { methods } 

    function CreateMathRightSubSuperscriptElement(baseArg: DNIMathElement; subScript: DNIMathElement; superScript: DNIMathElement): DNIMathRightSubSuperscriptElement;

  end;

  //-------------namespace: Aspose.Slides.MathText----------------
  [DNTypeName('Aspose.Slides.MathText.IMathSubscriptElementFactory')]
  DNIMathSubscriptElementFactory = interface(DDN.mscorlib.DNObject)
  ['{DFEBE5E4-A1A1-41EC-A4E0-CAFA80E65433}']
  { methods } 

    function CreateMathSubscriptElement(baseArg: DNIMathElement; subScript: DNIMathElement): DNIMathSubscriptElement;

  end;

  //-------------namespace: Aspose.Slides.MathText----------------
  [DNTypeName('Aspose.Slides.MathText.IMathSuperscriptElementFactory')]
  DNIMathSuperscriptElementFactory = interface(DDN.mscorlib.DNObject)
  ['{E9104917-E889-413B-9D51-7B27B8E5AE1B}']
  { methods } 

    function CreateMathSuperscriptElement(baseArg: DNIMathElement; superScript: DNIMathElement): DNIMathSuperscriptElement;

  end;

  //-------------namespace: Aspose.Slides.SlideShow----------------
  [DNTypeName('Aspose.Slides.SlideShow.ITransitionValueBase')]
  DNITransitionValueBase = interface(DDN.mscorlib.DNObject)
  ['{88D7CA12-E9EA-4686-A6F5-CA1649816310}']
  end;

  //-------------namespace: Aspose.Slides.SlideShow----------------
  [DNTypeName('Aspose.Slides.SlideShow.ICornerDirectionTransition')]
  DNICornerDirectionTransition = interface(DNITransitionValueBase)
  ['{AD1E0310-66FE-41EC-B49B-3849FA89EFDC}']
  { getters & setters } 

    function get_Direction: DNTransitionCornerDirectionType;
    procedure set_Direction(value: DNTransitionCornerDirectionType);
    function get_AsITransitionValueBase: DNITransitionValueBase;

  { propertys } 

    property Direction: DNTransitionCornerDirectionType read get_Direction write set_Direction;
    property AsITransitionValueBase: DNITransitionValueBase read get_AsITransitionValueBase;
  end;

  //-------------namespace: Aspose.Slides.SlideShow----------------
  [DNTypeName('Aspose.Slides.SlideShow.IEightDirectionTransition')]
  DNIEightDirectionTransition = interface(DNITransitionValueBase)
  ['{DB442EDE-5CF4-4B94-BB3C-CA34C3A08E3D}']
  { getters & setters } 

    function get_Direction: DNTransitionEightDirectionType;
    procedure set_Direction(value: DNTransitionEightDirectionType);
    function get_AsITransitionValueBase: DNITransitionValueBase;

  { propertys } 

    property Direction: DNTransitionEightDirectionType read get_Direction write set_Direction;
    property AsITransitionValueBase: DNITransitionValueBase read get_AsITransitionValueBase;
  end;

  //-------------namespace: Aspose.Slides.SlideShow----------------
  [DNTypeName('Aspose.Slides.SlideShow.IEmptyTransition')]
  DNIEmptyTransition = interface(DNITransitionValueBase)
  ['{36B1B209-870D-4B9D-B343-DF3B8F9F67B2}']
  { getters & setters } 

    function get_AsITransitionValueBase: DNITransitionValueBase;

  { propertys } 

    property AsITransitionValueBase: DNITransitionValueBase read get_AsITransitionValueBase;
  end;

  //-------------namespace: Aspose.Slides.SlideShow----------------
  [DNTypeName('Aspose.Slides.SlideShow.IFlyThroughTransition')]
  DNIFlyThroughTransition = interface(DNITransitionValueBase)
  ['{C6CB5D47-70FF-42EE-82DB-20958E6E9F9D}']
  { getters & setters } 

    function get_Direction: DNTransitionInOutDirectionType;
    procedure set_Direction(value: DNTransitionInOutDirectionType);
    function get_HasBounce: Boolean;
    procedure set_HasBounce(value: Boolean);
    function get_AsITransitionValueBase: DNITransitionValueBase;

  { propertys } 

    property Direction: DNTransitionInOutDirectionType read get_Direction write set_Direction;
    property HasBounce: Boolean read get_HasBounce write set_HasBounce;
    property AsITransitionValueBase: DNITransitionValueBase read get_AsITransitionValueBase;
  end;

  //-------------namespace: Aspose.Slides.SlideShow----------------
  [DNTypeName('Aspose.Slides.SlideShow.IGlitterTransition')]
  DNIGlitterTransition = interface(DNITransitionValueBase)
  ['{08747224-B633-4179-8168-566950FF6663}']
  { getters & setters } 

    function get_Direction: DNTransitionSideDirectionType;
    procedure set_Direction(value: DNTransitionSideDirectionType);
    function get_Pattern: DNTransitionPattern;
    procedure set_Pattern(value: DNTransitionPattern);
    function get_AsITransitionValueBase: DNITransitionValueBase;

  { propertys } 

    property Direction: DNTransitionSideDirectionType read get_Direction write set_Direction;
    property Pattern: DNTransitionPattern read get_Pattern write set_Pattern;
    property AsITransitionValueBase: DNITransitionValueBase read get_AsITransitionValueBase;
  end;

  //-------------namespace: Aspose.Slides.SlideShow----------------
  [DNTypeName('Aspose.Slides.SlideShow.IInOutTransition')]
  DNIInOutTransition = interface(DNITransitionValueBase)
  ['{3917EAC4-B3F8-4A85-9D7D-F99356555946}']
  { getters & setters } 

    function get_Direction: DNTransitionInOutDirectionType;
    procedure set_Direction(value: DNTransitionInOutDirectionType);
    function get_AsITransitionValueBase: DNITransitionValueBase;

  { propertys } 

    property Direction: DNTransitionInOutDirectionType read get_Direction write set_Direction;
    property AsITransitionValueBase: DNITransitionValueBase read get_AsITransitionValueBase;
  end;

  //-------------namespace: Aspose.Slides.SlideShow----------------
  [DNTypeName('Aspose.Slides.SlideShow.ILeftRightDirectionTransition')]
  DNILeftRightDirectionTransition = interface(DNITransitionValueBase)
  ['{A25AD20C-C615-49A3-80FE-3B38C2E38D23}']
  { getters & setters } 

    function get_Direction: DNTransitionLeftRightDirectionType;
    procedure set_Direction(value: DNTransitionLeftRightDirectionType);
    function get_AsITransitionValueBase: DNITransitionValueBase;

  { propertys } 

    property Direction: DNTransitionLeftRightDirectionType read get_Direction write set_Direction;
    property AsITransitionValueBase: DNITransitionValueBase read get_AsITransitionValueBase;
  end;

  //-------------namespace: Aspose.Slides.SlideShow----------------
  [DNTypeName('Aspose.Slides.SlideShow.IMorphTransition')]
  DNIMorphTransition = interface(DNITransitionValueBase)
  ['{5CACDFFB-0A98-452C-A8BC-7AF49B6B654F}']
  { getters & setters } 

    function get_MorphType: DNTransitionMorphType;
    procedure set_MorphType(value: DNTransitionMorphType);
    function get_AsITransitionValueBase: DNITransitionValueBase;

  { propertys } 

    property MorphType: DNTransitionMorphType read get_MorphType write set_MorphType;
    property AsITransitionValueBase: DNITransitionValueBase read get_AsITransitionValueBase;
  end;

  //-------------namespace: Aspose.Slides.SlideShow----------------
  [DNTypeName('Aspose.Slides.SlideShow.IOptionalBlackTransition')]
  DNIOptionalBlackTransition = interface(DNITransitionValueBase)
  ['{ABE804DF-5FD5-48D8-B6FF-1012509864A7}']
  { getters & setters } 

    function get_FromBlack: Boolean;
    procedure set_FromBlack(value: Boolean);
    function get_AsITransitionValueBase: DNITransitionValueBase;

  { propertys } 

    property FromBlack: Boolean read get_FromBlack write set_FromBlack;
    property AsITransitionValueBase: DNITransitionValueBase read get_AsITransitionValueBase;
  end;

  //-------------namespace: Aspose.Slides.SlideShow----------------
  [DNTypeName('Aspose.Slides.SlideShow.IOrientationTransition')]
  DNIOrientationTransition = interface(DNITransitionValueBase)
  ['{3C6577B9-4D4F-4292-AE2D-34E5C46E33E7}']
  { getters & setters } 

    function get_Direction: DNOrientation;
    procedure set_Direction(value: DNOrientation);
    function get_AsITransitionValueBase: DNITransitionValueBase;

  { propertys } 

    property Direction: DNOrientation read get_Direction write set_Direction;
    property AsITransitionValueBase: DNITransitionValueBase read get_AsITransitionValueBase;
  end;

  //-------------namespace: Aspose.Slides.SlideShow----------------
  [DNTypeName('Aspose.Slides.SlideShow.IRevealTransition')]
  DNIRevealTransition = interface(DNITransitionValueBase)
  ['{0FC1D3E3-3F7A-4223-AE80-AE12959AAFA2}']
  { getters & setters } 

    function get_Direction: DNTransitionLeftRightDirectionType;
    procedure set_Direction(value: DNTransitionLeftRightDirectionType);
    function get_ThroughBlack: Boolean;
    procedure set_ThroughBlack(value: Boolean);
    function get_AsITransitionValueBase: DNITransitionValueBase;

  { propertys } 

    property Direction: DNTransitionLeftRightDirectionType read get_Direction write set_Direction;
    property ThroughBlack: Boolean read get_ThroughBlack write set_ThroughBlack;
    property AsITransitionValueBase: DNITransitionValueBase read get_AsITransitionValueBase;
  end;

  //-------------namespace: Aspose.Slides.SlideShow----------------
  [DNTypeName('Aspose.Slides.SlideShow.IRippleTransition')]
  DNIRippleTransition = interface(DNITransitionValueBase)
  ['{C6A7102E-074E-4197-9678-007669F363D4}']
  { getters & setters } 

    function get_Direction: DNTransitionCornerAndCenterDirectionType;
    procedure set_Direction(value: DNTransitionCornerAndCenterDirectionType);
    function get_AsITransitionValueBase: DNITransitionValueBase;

  { propertys } 

    property Direction: DNTransitionCornerAndCenterDirectionType read get_Direction write set_Direction;
    property AsITransitionValueBase: DNITransitionValueBase read get_AsITransitionValueBase;
  end;

  //-------------namespace: Aspose.Slides.SlideShow----------------
  [DNTypeName('Aspose.Slides.SlideShow.IShredTransition')]
  DNIShredTransition = interface(DNITransitionValueBase)
  ['{BB61FF5D-F3A1-4D5E-9BA7-A252610F0EE3}']
  { getters & setters } 

    function get_Direction: DNTransitionInOutDirectionType;
    procedure set_Direction(value: DNTransitionInOutDirectionType);
    function get_Pattern: DNTransitionShredPattern;
    procedure set_Pattern(value: DNTransitionShredPattern);
    function get_AsITransitionValueBase: DNITransitionValueBase;

  { propertys } 

    property Direction: DNTransitionInOutDirectionType read get_Direction write set_Direction;
    property Pattern: DNTransitionShredPattern read get_Pattern write set_Pattern;
    property AsITransitionValueBase: DNITransitionValueBase read get_AsITransitionValueBase;
  end;

  //-------------namespace: Aspose.Slides.SlideShow----------------
  [DNTypeName('Aspose.Slides.SlideShow.ISideDirectionTransition')]
  DNISideDirectionTransition = interface(DNITransitionValueBase)
  ['{E78A9629-10F1-4E0E-B189-CFFB5E06F689}']
  { getters & setters } 

    function get_Direction: DNTransitionSideDirectionType;
    procedure set_Direction(value: DNTransitionSideDirectionType);
    function get_AsITransitionValueBase: DNITransitionValueBase;

  { propertys } 

    property Direction: DNTransitionSideDirectionType read get_Direction write set_Direction;
    property AsITransitionValueBase: DNITransitionValueBase read get_AsITransitionValueBase;
  end;

  //-------------namespace: Aspose.Slides.SlideShow----------------
  [DNTypeName('Aspose.Slides.SlideShow.ISplitTransition')]
  DNISplitTransition = interface(DNITransitionValueBase)
  ['{8EA9326E-5952-4813-8E87-8E3D26689410}']
  { getters & setters } 

    function get_Direction: DNTransitionInOutDirectionType;
    procedure set_Direction(value: DNTransitionInOutDirectionType);
    function get_Orientation: DNOrientation;
    procedure set_Orientation(value: DNOrientation);
    function get_AsITransitionValueBase: DNITransitionValueBase;

  { propertys } 

    property Direction: DNTransitionInOutDirectionType read get_Direction write set_Direction;
    property Orientation: DNOrientation read get_Orientation write set_Orientation;
    property AsITransitionValueBase: DNITransitionValueBase read get_AsITransitionValueBase;
  end;

  //-------------namespace: Aspose.Slides.SlideShow----------------
  [DNTypeName('Aspose.Slides.SlideShow.IWheelTransition')]
  DNIWheelTransition = interface(DNITransitionValueBase)
  ['{0A5993EC-C7D6-42E8-8209-E30C758F1CD5}']
  { getters & setters } 

    function get_Spokes: UInt32;
    procedure set_Spokes(value: UInt32);
    function get_AsITransitionValueBase: DNITransitionValueBase;

  { propertys } 

    property Spokes: UInt32 read get_Spokes write set_Spokes;
    property AsITransitionValueBase: DNITransitionValueBase read get_AsITransitionValueBase;
  end;

  //-------------namespace: Aspose.Slides.SmartArt----------------
  [DNTypeName('Aspose.Slides.SmartArt.ISmartArtNode')]
  DNISmartArtNode = interface(DDN.mscorlib.DNObject)
  ['{2F9636C7-6E3B-465C-BA75-655B23F31AA7}']
  { getters & setters } 

    function get_ChildNodes: DNISmartArtNodeCollection;
    function get_Shapes: DNISmartArtShapeCollection;
    function get_TextFrame: DNITextFrame;
    function get_IsAssistant: Boolean;
    procedure set_IsAssistant(value: Boolean);
    function get_Level: Int32;
    function get_BulletFillFormat: DNIFillFormat;
    function get_Position: Int32;
    procedure set_Position(value: Int32);
    function get_IsHidden: Boolean;
    function get_OrganizationChartLayout: DNOrganizationChartLayoutType;
    procedure set_OrganizationChartLayout(value: DNOrganizationChartLayoutType);

  { methods } 

    function Remove: Boolean;

  { propertys } 

    property ChildNodes: DNISmartArtNodeCollection read get_ChildNodes;
    property Shapes: DNISmartArtShapeCollection read get_Shapes;
    property TextFrame: DNITextFrame read get_TextFrame;
    property IsAssistant: Boolean read get_IsAssistant write set_IsAssistant;
    property Level: Int32 read get_Level;
    property BulletFillFormat: DNIFillFormat read get_BulletFillFormat;
    property Position: Int32 read get_Position write set_Position;
    property IsHidden: Boolean read get_IsHidden;
    property OrganizationChartLayout: DNOrganizationChartLayoutType read get_OrganizationChartLayout write set_OrganizationChartLayout;
  end;

  //-------------namespace: Aspose.Slides.Theme----------------
  [DNTypeName('Aspose.Slides.Theme.IColorSchemeEffectiveData')]
  DNIColorSchemeEffectiveData = interface(DDN.mscorlib.DNObject)
  ['{39A80416-48AA-41D1-90B2-2DD096B516CC}']
  { getters & setters } 

    function get_Item(index: DNColorSchemeIndex): DDN.System.Drawing.DNColor;
    function get_Dark1: DDN.System.Drawing.DNColor;
    function get_Light1: DDN.System.Drawing.DNColor;
    function get_Dark2: DDN.System.Drawing.DNColor;
    function get_Light2: DDN.System.Drawing.DNColor;
    function get_Accent1: DDN.System.Drawing.DNColor;
    function get_Accent2: DDN.System.Drawing.DNColor;
    function get_Accent3: DDN.System.Drawing.DNColor;
    function get_Accent4: DDN.System.Drawing.DNColor;
    function get_Accent5: DDN.System.Drawing.DNColor;
    function get_Accent6: DDN.System.Drawing.DNColor;
    function get_Hyperlink: DDN.System.Drawing.DNColor;
    function get_FollowedHyperlink: DDN.System.Drawing.DNColor;

  { propertys } 

    property Item[index: DNColorSchemeIndex]: DDN.System.Drawing.DNColor read get_Item; default;
    property Dark1: DDN.System.Drawing.DNColor read get_Dark1;
    property Light1: DDN.System.Drawing.DNColor read get_Light1;
    property Dark2: DDN.System.Drawing.DNColor read get_Dark2;
    property Light2: DDN.System.Drawing.DNColor read get_Light2;
    property Accent1: DDN.System.Drawing.DNColor read get_Accent1;
    property Accent2: DDN.System.Drawing.DNColor read get_Accent2;
    property Accent3: DDN.System.Drawing.DNColor read get_Accent3;
    property Accent4: DDN.System.Drawing.DNColor read get_Accent4;
    property Accent5: DDN.System.Drawing.DNColor read get_Accent5;
    property Accent6: DDN.System.Drawing.DNColor read get_Accent6;
    property Hyperlink: DDN.System.Drawing.DNColor read get_Hyperlink;
    property FollowedHyperlink: DDN.System.Drawing.DNColor read get_FollowedHyperlink;
  end;

  //-------------namespace: Aspose.Slides.Theme----------------
  [DNTypeName('Aspose.Slides.Theme.IEffectStyle')]
  DNIEffectStyle = interface(DDN.mscorlib.DNObject)
  ['{B112BF59-5A82-4556-BCD7-C9BF427CDB1A}']
  { getters & setters } 

    function get_EffectFormat: DNIEffectFormat;
    function get_ThreeDFormat: DNIThreeDFormat;

  { propertys } 

    property EffectFormat: DNIEffectFormat read get_EffectFormat;
    property ThreeDFormat: DNIThreeDFormat read get_ThreeDFormat;
  end;

  //-------------namespace: Aspose.Slides.Theme----------------
  [DNTypeName('Aspose.Slides.Theme.IEffectStyleEffectiveData')]
  DNIEffectStyleEffectiveData = interface(DDN.mscorlib.DNObject)
  ['{6748110D-1E26-4067-97E9-BD184E047AEC}']
  { getters & setters } 

    function get_EffectFormat: DNIEffectFormatEffectiveData;
    function get_ThreeDFormat: DNIThreeDFormatEffectiveData;

  { propertys } 

    property EffectFormat: DNIEffectFormatEffectiveData read get_EffectFormat;
    property ThreeDFormat: DNIThreeDFormatEffectiveData read get_ThreeDFormat;
  end;

  //-------------namespace: Aspose.Slides.Theme----------------
  [DNTypeName('Aspose.Slides.Theme.IExtraColorScheme')]
  DNIExtraColorScheme = interface(DDN.mscorlib.DNObject)
  ['{1A300121-25DA-4599-98D1-50203F9108D1}']
  { getters & setters } 

    function get_Name: string;
    function get_ColorScheme: DNIColorScheme;

  { propertys } 

    property Name: string read get_Name;
    property ColorScheme: DNIColorScheme read get_ColorScheme;
  end;

  //-------------namespace: Aspose.Slides.Theme----------------
  [DNTypeName('Aspose.Slides.Theme.IFontScheme')]
  DNIFontScheme = interface(DDN.mscorlib.DNObject)
  ['{CFAF023E-4B1C-45B0-B21C-61F641C4070D}']
  { getters & setters } 

    function get_Minor: DNIFonts;
    function get_Major: DNIFonts;
    function get_Name: string;
    procedure set_Name(value: string);

  { propertys } 

    property Minor: DNIFonts read get_Minor;
    property Major: DNIFonts read get_Major;
    property Name: string read get_Name write set_Name;
  end;

  //-------------namespace: Aspose.Slides.Theme----------------
  [DNTypeName('Aspose.Slides.Theme.IFontSchemeEffectiveData')]
  DNIFontSchemeEffectiveData = interface(DDN.mscorlib.DNObject)
  ['{3830B6C3-7293-4F2B-9E7A-5F0AB05D05D7}']
  { getters & setters } 

    function get_Minor: DNIFontsEffectiveData;
    function get_Major: DNIFontsEffectiveData;
    function get_Name: string;

  { propertys } 

    property Minor: DNIFontsEffectiveData read get_Minor;
    property Major: DNIFontsEffectiveData read get_Major;
    property Name: string read get_Name;
  end;

  //-------------namespace: Aspose.Slides.Theme----------------
  [DNTypeName('Aspose.Slides.Theme.IFormatSchemeEffectiveData')]
  DNIFormatSchemeEffectiveData = interface(DDN.mscorlib.DNObject)
  ['{EDB668FF-A9A7-4E26-9B7F-1A51C47F22E2}']
  { methods } 

    function GetFillStyles(styleColor: DDN.System.Drawing.DNColor): DNIFillFormatCollectionEffectiveData;
    function GetLineStyles(styleColor: DDN.System.Drawing.DNColor): DNILineFormatCollectionEffectiveData;
    function GetEffectStyles(styleColor: DDN.System.Drawing.DNColor): DNIEffectStyleCollectionEffectiveData;
    function GetBackgroundFillStyles(styleColor: DDN.System.Drawing.DNColor): DNIFillFormatCollectionEffectiveData;

  end;

  //-------------namespace: Aspose.Slides.Theme----------------
  [DNTypeName('Aspose.Slides.Theme.IThemeEffectiveData')]
  DNIThemeEffectiveData = interface(DDN.mscorlib.DNObject)
  ['{89C28913-6DC8-42D6-9EA5-028A04063004}']
  { getters & setters } 

    function get_FontScheme: DNIFontSchemeEffectiveData;
    function get_FormatScheme: DNIFormatSchemeEffectiveData;

  { methods } 

    function GetColorScheme(styleColor: DDN.System.Drawing.DNColor): DNIColorSchemeEffectiveData;

  { propertys } 

    property FontScheme: DNIFontSchemeEffectiveData read get_FontScheme;
    property FormatScheme: DNIFormatSchemeEffectiveData read get_FormatScheme;
  end;

  //-------------namespace: Aspose.Slides.Theme----------------
  [DNTypeName('Aspose.Slides.Theme.IThemeManager')]
  DNIThemeManager = interface(DDN.mscorlib.DNObject)
  ['{42F1CF4F-AE15-4314-837E-6EDE630607C4}']
  { methods } 

    function CreateThemeEffective: DNIThemeEffectiveData;
    procedure ApplyColorScheme(scheme: DNIExtraColorScheme);

  end;

  //-------------namespace: Aspose.Slides.Theme----------------
  [DNTypeName('Aspose.Slides.Theme.IMasterThemeManager')]
  DNIMasterThemeManager = interface(DNIThemeManager)
  ['{ECD85D4E-452C-43D4-A194-75CB372FF2A2}']
  { getters & setters } 

    function get_IsOverrideThemeEnabled: Boolean;
    procedure set_IsOverrideThemeEnabled(value: Boolean);
    function get_OverrideTheme: DNIMasterTheme;
    procedure set_OverrideTheme(value: DNIMasterTheme);
    function get_AsIThemeManager: DNIThemeManager;

  { propertys } 

    property IsOverrideThemeEnabled: Boolean read get_IsOverrideThemeEnabled write set_IsOverrideThemeEnabled;
    property OverrideTheme: DNIMasterTheme read get_OverrideTheme write set_OverrideTheme;
    property AsIThemeManager: DNIThemeManager read get_AsIThemeManager;
  end;

  //-------------namespace: Aspose.Slides.Theme----------------
  [DNTypeName('Aspose.Slides.Theme.IOverrideThemeManager')]
  DNIOverrideThemeManager = interface(DNIThemeManager)
  ['{778502EF-EE3D-4B84-9C60-62C8E155058F}']
  { getters & setters } 

    function get_IsOverrideThemeEnabled: Boolean;
    function get_OverrideTheme: DNIOverrideTheme;
    procedure set_OverrideTheme(value: DNIOverrideTheme);
    function get_AsIThemeManager: DNIThemeManager;

  { propertys } 

    property IsOverrideThemeEnabled: Boolean read get_IsOverrideThemeEnabled;
    property OverrideTheme: DNIOverrideTheme read get_OverrideTheme write set_OverrideTheme;
    property AsIThemeManager: DNIThemeManager read get_AsIThemeManager;
  end;

  //-------------namespace: Aspose.Slides.Vba----------------
  [DNTypeName('Aspose.Slides.Vba.IVbaModule')]
  DNIVbaModule = interface(DDN.mscorlib.DNObject)
  ['{BEDF0867-105A-45FE-A4B3-06D8C8758B9B}']
  { getters & setters } 

    function get_Name: string;
    function get_SourceCode: string;
    procedure set_SourceCode(value: string);

  { propertys } 

    property Name: string read get_Name;
    property SourceCode: string read get_SourceCode write set_SourceCode;
  end;

  //-------------namespace: Aspose.Slides.Vba----------------
  [DNTypeName('Aspose.Slides.Vba.IVbaProject')]
  DNIVbaProject = interface(DDN.mscorlib.DNObject)
  ['{F145A4F2-4EDF-4954-ABC3-43DE4A62B289}']
  { getters & setters } 

    function get_Name: string;
    function get_Modules: DNIVbaModuleCollection;
    function get_References: DNIVbaReferenceCollection;

  { methods } 

    function ToBinary: TArray<Byte>;

  { propertys } 

    property Name: string read get_Name;
    property Modules: DNIVbaModuleCollection read get_Modules;
    property References: DNIVbaReferenceCollection read get_References;
  end;

  //-------------namespace: Aspose.Slides.Vba----------------
  [DNTypeName('Aspose.Slides.Vba.IVbaProjectFactory')]
  DNIVbaProjectFactory = interface(DDN.mscorlib.DNObject)
  ['{DC326EC1-5A22-4F5B-8A0B-014146939D44}']
  { methods } 

    function CreateVbaProject: DNIVbaProject;
    function ReadVbaProject(data: TArray<Byte>): DNIVbaProject;

  end;

  //-------------namespace: Aspose.Slides.Vba----------------
  [DNTypeName('Aspose.Slides.Vba.IVbaReference')]
  DNIVbaReference = interface(DDN.mscorlib.DNObject)
  ['{1277ACBC-9B55-4B1D-AB0E-C114B1E9E74C}']
  { getters & setters } 

    function get_Name: string;
    procedure set_Name(value: string);

  { propertys } 

    property Name: string read get_Name write set_Name;
  end;

  //-------------namespace: Aspose.Slides.Vba----------------
  [DNTypeName('Aspose.Slides.Vba.IVbaReferenceOleTwiddledTypeLib')]
  DNIVbaReferenceOleTwiddledTypeLib = interface(DNIVbaReference)
  ['{A78B3A2C-C490-4A23-B176-D02931CDB9C9}']
  { getters & setters } 

    function get_AsIVbaReference: DNIVbaReference;

  { propertys } 

    property AsIVbaReference: DNIVbaReference read get_AsIVbaReference;
  end;

  //-------------namespace: Aspose.Slides.Vba----------------
  [DNTypeName('Aspose.Slides.Vba.IVbaReferenceOleTypeLib')]
  DNIVbaReferenceOleTypeLib = interface(DNIVbaReference)
  ['{D71DB457-E6BD-4A78-8B6C-132A0DAA2F98}']
  { getters & setters } 

    function get_Libid: string;
    procedure set_Libid(value: string);
    function get_AsIVbaReference: DNIVbaReference;

  { propertys } 

    property Libid: string read get_Libid write set_Libid;
    property AsIVbaReference: DNIVbaReference read get_AsIVbaReference;
  end;

  //-------------namespace: Aspose.Slides.Vba----------------
  [DNTypeName('Aspose.Slides.Vba.IVbaReferenceProject')]
  DNIVbaReferenceProject = interface(DNIVbaReference)
  ['{9149B14E-19BA-44C6-98A0-F16871FC0F95}']
  { getters & setters } 

    function get_AsIVbaReference: DNIVbaReference;

  { propertys } 

    property AsIVbaReference: DNIVbaReference read get_AsIVbaReference;
  end;

  //-------------namespace: Aspose.Slides.Vba----------------
  [DNTypeName('Aspose.Slides.Vba.IVbaReferenceFactory')]
  DNIVbaReferenceFactory = interface(DDN.mscorlib.DNObject)
  ['{95ADE943-DEFE-4AF4-8486-74A93B12D148}']
  { methods } 

    function CreateOleTypeLibReference(name: string; libid: string): DNIVbaReferenceOleTypeLib;

  end;

  //-------------namespace: Aspose.Slides.Warnings----------------
  [DNTypeName('Aspose.Slides.Warnings.IWarningCallback')]
  DNIWarningCallback = interface(DDN.mscorlib.DNObject)
  ['{535FD29D-556F-47DB-A2B8-F3759CB4E7EC}']
  { methods } 

    function Warning(warning: DNIWarningInfo): DNReturnAction;

  end;

  //-------------namespace: Aspose.Slides.Warnings----------------
  [DNTypeName('Aspose.Slides.Warnings.IWarningInfo')]
  DNIWarningInfo = interface(DDN.mscorlib.DNObject)
  ['{D18C1E67-9769-4C03-98A5-16A03A0C0135}']
  { getters & setters } 

    function get_WarningType: DNWarningType;
    function get_Description: string;

  { methods } 

    procedure SendWarning(receiver: DNIWarningCallback);

  { propertys } 

    property WarningType: DNWarningType read get_WarningType;
    property Description: string read get_Description;
  end;

  //-------------namespace: Aspose.Slides.Warnings----------------
  [DNTypeName('Aspose.Slides.Warnings.IKnownIssueWarningInfo')]
  DNIKnownIssueWarningInfo = interface(DNIWarningInfo)
  ['{0788213A-17B3-4E8F-A475-1DF4C291DA35}']
  { getters & setters } 

    function get_AsIWarningInfo: DNIWarningInfo;

  { propertys } 

    property AsIWarningInfo: DNIWarningInfo read get_AsIWarningInfo;
  end;

  //-------------namespace: Aspose.Slides.Warnings----------------
  [DNTypeName('Aspose.Slides.Warnings.INotImplementedWarningInfo')]
  DNINotImplementedWarningInfo = interface(DNIWarningInfo)
  ['{7D8472C9-7877-46A0-A045-B0C5BB1B1096}']
  { getters & setters } 

    function get_AsIWarningInfo: DNIWarningInfo;

  { propertys } 

    property AsIWarningInfo: DNIWarningInfo read get_AsIWarningInfo;
  end;

  //-------------namespace: Aspose.Slides.Warnings----------------
  [DNTypeName('Aspose.Slides.Warnings.IObsoletePresLockingBehaviorWarningInfo')]
  DNIObsoletePresLockingBehaviorWarningInfo = interface(DNIWarningInfo)
  ['{BA7C6117-7392-457F-B07F-FAA18BB63101}']
  { getters & setters } 

    function get_AsIWarningInfo: DNIWarningInfo;

  { propertys } 

    property AsIWarningInfo: DNIWarningInfo read get_AsIWarningInfo;
  end;

  //-------------namespace: Aspose.Slides.Warnings----------------
  [DNTypeName('Aspose.Slides.Warnings.IPresentationSignedWarningInfo')]
  DNIPresentationSignedWarningInfo = interface(DNIWarningInfo)
  ['{DDB47B1F-D375-455A-8F03-DD90F7C77B6D}']
  { getters & setters } 

    function get_AsIWarningInfo: DNIWarningInfo;

  { propertys } 

    property AsIWarningInfo: DNIWarningInfo read get_AsIWarningInfo;
  end;

  //-------------namespace: Aspose.Slides.Animation----------------
  [DNTypeName('Aspose.Slides.Animation.IBehaviorCollection')]
  DNIBehaviorCollection = interface(DDN.mscorlib.DNIEnumerable)
  ['{40609D07-A488-4199-864C-AE7AD7F7D45E}']
  { getters & setters } 

    function get_Item(index: Int32): DNIBehavior;
    procedure set_Item(index: Int32; value: DNIBehavior);
    function get_Count: Int32;
    function get_AsIEnumerable: DDN.mscorlib.DNIEnumerable;

  { methods } 

    procedure Add(item: DNIBehavior);
    function IndexOf(item: DNIBehavior): Int32;
    procedure Insert(index: Int32; item: DNIBehavior);
    function Remove(item: DNIBehavior): Boolean;
    procedure RemoveAt(index: Int32);
    procedure Clear;
    function &Contains(item: DNIBehavior): Boolean;

  { propertys } 

    property Item[index: Int32]: DNIBehavior read get_Item write set_Item; default;
    property Count: Int32 read get_Count;
    property AsIEnumerable: DDN.mscorlib.DNIEnumerable read get_AsIEnumerable;
  end;

  //-------------namespace: Aspose.Slides.Animation----------------
  [DNTypeName('Aspose.Slides.Animation.IBehaviorPropertyCollection')]
  DNIBehaviorPropertyCollection = interface(DDN.mscorlib.DNIEnumerable)
  ['{D5C3C008-291F-4F39-ADD0-C319B9AA2134}']
  { getters & setters } 

    function get_AsIEnumerable: DDN.mscorlib.DNIEnumerable;

  { methods } 

    procedure Add(propertyValue: string);
    function IndexOf(propertyValue: string): Int32;
    procedure Insert(index: Int32; propertyValue: string);
    function Remove(propertyValue: string): Boolean;
    function &Contains(propertyValue: string): Boolean;

  { propertys } 

    property AsIEnumerable: DDN.mscorlib.DNIEnumerable read get_AsIEnumerable;
  end;

  //-------------namespace: Aspose.Slides.Animation----------------
  [DNTypeName('Aspose.Slides.Animation.IMotionPath')]
  DNIMotionPath = interface(DDN.mscorlib.DNIEnumerable)
  ['{3680EF28-E027-4820-B267-1E50B9475468}']
  { getters & setters } 

    function get_Count: Int32;
    function get_Item(index: Int32): DNIMotionCmdPath;
    function get_AsIEnumerable: DDN.mscorlib.DNIEnumerable;

  { methods } 

    function Add(&type: DNMotionCommandPathType; pts: TArray<DDN.System.Drawing.DNPointF>; ptsType: DNMotionPathPointsType; bRelativeCoord: Boolean): DNIMotionCmdPath;
    procedure Insert(index: Int32; &type: DNMotionCommandPathType; pts: TArray<DDN.System.Drawing.DNPointF>; ptsType: DNMotionPathPointsType; bRelativeCoord: Boolean);
    procedure Clear;
    procedure Remove(item: DNIMotionCmdPath);
    procedure RemoveAt(index: Int32);

  { propertys } 

    property Count: Int32 read get_Count;
    property Item[index: Int32]: DNIMotionCmdPath read get_Item; default;
    property AsIEnumerable: DDN.mscorlib.DNIEnumerable read get_AsIEnumerable;
  end;

  //-------------namespace: Aspose.Slides.Animation----------------
  [DNTypeName('Aspose.Slides.Animation.IPointCollection')]
  DNIPointCollection = interface(DDN.mscorlib.DNIEnumerable)
  ['{540E5D77-5ED6-441D-A322-F97E507E2B9A}']
  { getters & setters } 

    function get_Count: Int32;
    function get_Item(index: Int32): DNIPoint;
    function get_AsIEnumerable: DDN.mscorlib.DNIEnumerable;

  { propertys } 

    property Count: Int32 read get_Count;
    property Item[index: Int32]: DNIPoint read get_Item; default;
    property AsIEnumerable: DDN.mscorlib.DNIEnumerable read get_AsIEnumerable;
  end;

  //-------------namespace: Aspose.Slides.Animation----------------
  [DNTypeName('Aspose.Slides.Animation.ISequence')]
  DNISequence = interface(DDN.mscorlib.DNIEnumerable)
  ['{E5DCC028-40E4-4693-83DA-F43013063E91}']
  { getters & setters } 

    function get_Count: Int32;
    function get_Item(index: Int32): DNIEffect;
    function get_TriggerShape: DNIShape;
    procedure set_TriggerShape(value: DNIShape);
    function get_AsIEnumerable: DDN.mscorlib.DNIEnumerable;

  { methods } 

    procedure Remove(item: DNIEffect);
    procedure RemoveAt(index: Int32);
    procedure Clear;
    procedure RemoveByShape(shape: DNIShape);
    function GetEffectsByShape(shape: DNIShape): TArray<DNIEffect>;
    function GetEffectsByParagraph(paragraph: DNIParagraph): TArray<DNIEffect>;
    function GetCount(shape: DNIShape): Int32;
    function AddEffect(shape: DNIShape; effectType: DNEffectType; subtype: DNEffectSubtype; triggerType: DNEffectTriggerType): DNIEffect; overload;
    function AddEffect(paragraph: DNIParagraph; effectType: DNEffectType; subtype: DNEffectSubtype; triggerType: DNEffectTriggerType): DNIEffect; overload;
    function AddEffect(chart: DNIChart; &type: DNEffectChartMajorGroupingType; index: Int32; effectType: DNEffectType; subtype: DNEffectSubtype; triggerType: DNEffectTriggerType): DNIEffect; overload;
    function AddEffect(chart: DNIChart; &type: DNEffectChartMinorGroupingType; seriesIndex: Int32; categoriesIndex: Int32; effectType: DNEffectType; subtype: DNEffectSubtype; triggerType: DNEffectTriggerType): DNIEffect; overload;

  { propertys } 

    property Count: Int32 read get_Count;
    property Item[index: Int32]: DNIEffect read get_Item; default;
    property TriggerShape: DNIShape read get_TriggerShape write set_TriggerShape;
    property AsIEnumerable: DDN.mscorlib.DNIEnumerable read get_AsIEnumerable;
  end;

  //-------------namespace: Aspose.Slides.Animation----------------
  [DNTypeName('Aspose.Slides.Animation.ISequenceCollection')]
  DNISequenceCollection = interface(DDN.mscorlib.DNIEnumerable)
  ['{4DE7E704-C135-491F-A3CD-424C40B71C69}']
  { getters & setters } 

    function get_Count: Int32;
    function get_Item(index: Int32): DNISequence;
    function get_AsIEnumerable: DDN.mscorlib.DNIEnumerable;

  { methods } 

    function Add(shapeTrigger: DNIShape): DNISequence;
    procedure Remove(item: DNISequence);
    procedure RemoveAt(index: Int32);
    procedure Clear;

  { propertys } 

    property Count: Int32 read get_Count;
    property Item[index: Int32]: DNISequence read get_Item; default;
    property AsIEnumerable: DDN.mscorlib.DNIEnumerable read get_AsIEnumerable;
  end;

  //-------------namespace: Aspose.Slides.Charts----------------
  [DNTypeName('Aspose.Slides.Charts.IChartCellCollection')]
  DNIChartCellCollection = interface(DDN.mscorlib.DNIEnumerable)
  ['{8CD3803E-0216-4D96-8867-FF521827D9E8}']
  { getters & setters } 

    function get_Item(index: Int32): DNIChartDataCell;
    function get_Count: Int32;
    function get_AsIEnumerable: DDN.mscorlib.DNIEnumerable;

  { methods } 

    function GetCellsAddress: string;
    function GetConcatenatedValuesFromCells: string;
    procedure Add(chartDataCell: DNIChartDataCell); overload;
    procedure Add(value: DDN.mscorlib.DNObject); overload;
    procedure RemoveAt(index: Int32);

  { propertys } 

    property Item[index: Int32]: DNIChartDataCell read get_Item; default;
    property Count: Int32 read get_Count;
    property AsIEnumerable: DDN.mscorlib.DNIEnumerable read get_AsIEnumerable;
  end;

  //-------------namespace: Aspose.Slides.Charts----------------
  [DNTypeName('Aspose.Slides.Charts.IDataLabelCollection')]
  DNIDataLabelCollection = interface(DDN.mscorlib.DNIEnumerable)
  ['{64F87A24-5CBA-47FA-BD47-6329F1821678}']
  { getters & setters } 

    function get_Item(index: Int32): DNIDataLabel;
    function get_DefaultDataLabelFormat: DNIDataLabelFormat;
    function get_IsVisible: Boolean;
    function get_CountOfVisibleDataLabels: Int32;
    function get_Count: Int32;
    function get_ParentSeries: DNIChartSeries;
    function get_AsIChartComponent: DNIChartComponent;
    function get_AsIEnumerable: DDN.mscorlib.DNIEnumerable;

  { methods } 

    procedure Hide;
    function IndexOf(value: DNIDataLabel): Int32;

  { propertys } 

    property Item[index: Int32]: DNIDataLabel read get_Item; default;
    property DefaultDataLabelFormat: DNIDataLabelFormat read get_DefaultDataLabelFormat;
    property IsVisible: Boolean read get_IsVisible;
    property CountOfVisibleDataLabels: Int32 read get_CountOfVisibleDataLabels;
    property Count: Int32 read get_Count;
    property ParentSeries: DNIChartSeries read get_ParentSeries;
    property AsIChartComponent: DNIChartComponent read get_AsIChartComponent;
    property AsIEnumerable: DDN.mscorlib.DNIEnumerable read get_AsIEnumerable;
  end;

  //-------------namespace: Aspose.Slides.Charts----------------
  [DNTypeName('Aspose.Slides.Charts.IPieSplitCustomPointCollection')]
  DNIPieSplitCustomPointCollection = interface(DDN.mscorlib.DNIEnumerable)
  ['{1189504D-F1C9-4379-B6A1-E38273FA37B3}']
  { getters & setters } 

    function get_Item(index: Int32): DNIChartDataPoint;
    function get_AsIEnumerable: DDN.mscorlib.DNIEnumerable;

  { methods } 

    procedure Add(dataPointIndex: Int32);
    procedure Remove(dataPointIndex: Int32);

  { propertys } 

    property Item[index: Int32]: DNIChartDataPoint read get_Item; default;
    property AsIEnumerable: DDN.mscorlib.DNIEnumerable read get_AsIEnumerable;
  end;

  //-------------namespace: Aspose.Slides.Charts----------------
  [DNTypeName('Aspose.Slides.Charts.ITrendlineCollection')]
  DNITrendlineCollection = interface(DDN.mscorlib.DNIEnumerable)
  ['{423225CF-BD13-49FF-82D4-9C9B3DDCD1C2}']
  { getters & setters } 

    function get_Item(index: Int32): DNITrendline;
    function get_Count: Int32;
    function get_AsIEnumerable: DDN.mscorlib.DNIEnumerable;

  { methods } 

    function Add(trendlineType: DNTrendlineType): DNITrendline;
    procedure Remove(value: DNITrendline);

  { propertys } 

    property Item[index: Int32]: DNITrendline read get_Item; default;
    property Count: Int32 read get_Count;
    property AsIEnumerable: DDN.mscorlib.DNIEnumerable read get_AsIEnumerable;
  end;

  //-------------namespace: Aspose.Slides.Effects----------------
  [DNTypeName('Aspose.Slides.Effects.IImageTransformOperationCollection')]
  DNIImageTransformOperationCollection = interface(DDN.mscorlib.DNIEnumerable)
  ['{7A41712F-E85D-4A01-AA47-FFB741CFAF34}']
  { getters & setters } 

    function get_Item(index: Int32): DNIImageTransformOperation;
    function get_AsIEnumerable: DDN.mscorlib.DNIEnumerable;

  { methods } 

    procedure RemoveAt(index: Int32);
    function AddAlphaBiLevelEffect(threshold: Single): DNIAlphaBiLevel;
    function AddAlphaCeilingEffect: DNIAlphaCeiling;
    function AddAlphaFloorEffect: DNIAlphaFloor;
    function AddAlphaInverseEffect: DNIAlphaInverse;
    function AddAlphaModulateEffect: DNIAlphaModulate;
    function AddAlphaModulateFixedEffect(amount: Single): DNIAlphaModulateFixed;
    function AddAlphaReplaceEffect(alpha: Single): DNIAlphaReplace;
    function AddBiLevelEffect(threshold: Single): DNIBiLevel;
    function AddBlurEffect(radius: Double; grow: Boolean): DNIBlur;
    function AddColorChangeEffect: DNIColorChange;
    function AddColorReplaceEffect: DNIColorReplace;
    function AddDuotoneEffect: DNIDuotone;
    function AddFillOverlayEffect: DNIFillOverlay;
    function AddGrayScaleEffect: DNIGrayScale;
    function AddHSLEffect(hue: Single; saturation: Single; luminance: Single): DNIHSL;
    function AddLuminanceEffect(brightness: Single; contrast: Single): DNILuminance;
    function AddTintEffect(hue: Single; amount: Single): DNITint;

  { propertys } 

    property Item[index: Int32]: DNIImageTransformOperation read get_Item; default;
    property AsIEnumerable: DDN.mscorlib.DNIEnumerable read get_AsIEnumerable;
  end;

  //-------------namespace: Aspose.Slides----------------
  [DNTypeName('Aspose.Slides.IControlPropertiesCollection')]
  DNIControlPropertiesCollection = interface(DDN.mscorlib.DNIEnumerable)
  ['{6F4E6038-BE30-4481-A4C8-1C99072308A1}']
  { getters & setters } 

    function get_Count: Int32;
    function get_Item(name: string): string;
    procedure set_Item(name: string; value: string);
    function get_NamesOfProperties: DDN.mscorlib.DNICollection;
    function get_AsIEnumerable: DDN.mscorlib.DNIEnumerable;

  { methods } 

    procedure Add(name: string; value: string);
    procedure Remove(name: string);
    procedure Clear;

  { propertys } 

    property Count: Int32 read get_Count;
    property Item[name: string]: string read get_Item write set_Item; default;
    property NamesOfProperties: DDN.mscorlib.DNICollection read get_NamesOfProperties;
    property AsIEnumerable: DDN.mscorlib.DNIEnumerable read get_AsIEnumerable;
  end;

  //-------------namespace: Aspose.Slides----------------
  [DNTypeName('Aspose.Slides.IPortionCollection')]
  DNIPortionCollection = interface(DDN.mscorlib.DNIEnumerable)
  ['{2517C566-614F-441E-8FFD-E6C6B631584C}']
  { getters & setters } 

    function get_Item(index: Int32): DNIPortion;
    function get_Count: Int32;
    function get_AsIEnumerable: DDN.mscorlib.DNIEnumerable;

  { methods } 

    procedure Add(value: DNIPortion);
    function IndexOf(item: DNIPortion): Int32;
    procedure Insert(index: Int32; value: DNIPortion);
    procedure Clear;
    function &Contains(item: DNIPortion): Boolean;
    function Remove(item: DNIPortion): Boolean;
    procedure RemoveAt(index: Int32);

  { propertys } 

    property Item[index: Int32]: DNIPortion read get_Item; default;
    property Count: Int32 read get_Count;
    property AsIEnumerable: DDN.mscorlib.DNIEnumerable read get_AsIEnumerable;
  end;

  //-------------namespace: Aspose.Slides.MathText----------------
  [DNTypeName('Aspose.Slides.MathText.IMathBlock')]
  DNIMathBlock = interface(DDN.mscorlib.DNIEnumerable)
  ['{7E1F2264-DA89-4AE1-85C7-0417B6D8EBE7}']
  { getters & setters } 

    function get_AsIMathElementCollection: DNIMathElementCollection;
    function get_AsIMathElement: DNIMathElement;

  { methods } 

    function Delimit(separatorCharacter: Char): DNIMathDelimiter;
    function Enclose(beginningCharacter: Char; endingCharacter: Char; separatorCharacter: Char): DNIMathDelimiter;
    function JoinBlock(other: DNIMathBlock): DNIMathBlock;
    procedure WriteAsMathMl(stream: DDN.mscorlib.DNStream);

  { propertys } 

    property AsIMathElementCollection: DNIMathElementCollection read get_AsIMathElementCollection;
    property AsIMathElement: DNIMathElement read get_AsIMathElement;
  end;

  //-------------namespace: Aspose.Slides.MathText----------------
  [DNTypeName('Aspose.Slides.MathText.IMathBlockCollection')]
  DNIMathBlockCollection = interface(DDN.mscorlib.DNIEnumerable)
  ['{33A9E451-F737-4959-B55E-73D630B3EBC0}']
  { getters & setters } 

    function get_Count: Int32;
    function get_Item(index: Int32): DNIMathBlock;
    procedure set_Item(index: Int32; value: DNIMathBlock);
    function get_AsIEnumerable: DDN.mscorlib.DNIEnumerable;

  { methods } 

    procedure Add(item: DNIMathBlock);
    procedure Insert(index: Int32; item: DNIMathBlock);
    function Remove(item: DNIMathBlock): Boolean;
    procedure RemoveAt(index: Int32);
    function &Contains(item: DNIMathBlock): Boolean;
    function IndexOf(item: DNIMathBlock): Int32;
    procedure Clear;

  { propertys } 

    property Count: Int32 read get_Count;
    property Item[index: Int32]: DNIMathBlock read get_Item write set_Item; default;
    property AsIEnumerable: DDN.mscorlib.DNIEnumerable read get_AsIEnumerable;
  end;

  //-------------namespace: Aspose.Slides.MathText----------------
  [DNTypeName('Aspose.Slides.MathText.IMathElementCollection')]
  DNIMathElementCollection = interface(DDN.mscorlib.DNIEnumerable)
  ['{42B36391-779F-4202-85F4-79537DA2EBBF}']
  { getters & setters } 

    function get_Item(index: Int32): DNIMathElement;
    function get_Count: Int32;
    function get_AsIEnumerable: DDN.mscorlib.DNIEnumerable;

  { methods } 

    procedure Add(item: DNIMathElement);
    function IndexOf(item: DNIMathElement): Int32;
    procedure Insert(index: Int32; item: DNIMathElement);
    procedure Clear;
    function &Contains(item: DNIMathElement): Boolean;
    function Remove(item: DNIMathElement): Boolean;
    procedure RemoveAt(index: Int32);
    procedure CopyTo(&array: TArray<DNIMathElement>; arrayIndex: Int32);

  { propertys } 

    property Item[index: Int32]: DNIMathElement read get_Item; default;
    property Count: Int32 read get_Count;
    property AsIEnumerable: DDN.mscorlib.DNIEnumerable read get_AsIEnumerable;
  end;

  //-------------namespace: Aspose.Slides.MathText----------------
  [DNTypeName('Aspose.Slides.MathText.IMathParagraph')]
  DNIMathParagraph = interface(DDN.mscorlib.DNIEnumerable)
  ['{35FFE60B-ED6B-44B5-88CD-9D26FB2EDA88}']
  { getters & setters } 

    function get_Justification: DNMathJustification;
    procedure set_Justification(value: DNMathJustification);
    function get_AsIMathBlockCollection: DNIMathBlockCollection;

  { methods } 

    procedure WriteAsMathMl(stream: DDN.mscorlib.DNStream);

  { propertys } 

    property Justification: DNMathJustification read get_Justification write set_Justification;
    property AsIMathBlockCollection: DNIMathBlockCollection read get_AsIMathBlockCollection;
  end;

  //-------------namespace: Aspose.Slides.Charts----------------
  [DNTypeName('Aspose.Slides.Charts.IChartSeriesCollection')]
  DNIChartSeriesCollection = interface(DDN.mscorlib.DNObject)
  ['{8CF1E538-0E68-43B6-84AA-94073440D486}']
  { getters & setters } 

    function get_Item(index: Int32): DNIChartSeries;

  { methods } 

    function Add(&type: DNChartType): DNIChartSeries; overload;
    function Insert(index: Int32; &type: DNChartType): DNIChartSeries;
    function Add(cellWithSeriesName: DNIChartDataCell; &type: DNChartType): DNIChartSeries; overload;
    function Add(cellsWithSeriesName: DNIChartCellCollection; &type: DNChartType): DNIChartSeries; overload;
    function Add(name: string; &type: DNChartType): DNIChartSeries; overload;
    function IndexOf(value: DNIChartSeries): Int32;
    procedure Remove(value: DNIChartSeries);
    procedure RemoveAt(index: Int32);
    procedure Clear;

  { propertys } 

    property Item[index: Int32]: DNIChartSeries read get_Item; default;
  end;

  //-------------namespace: Aspose.Slides.Charts----------------
  [DNTypeName('Aspose.Slides.Charts.IChartSeriesReadonlyCollection')]
  DNIChartSeriesReadonlyCollection = interface(DDN.mscorlib.DNObject)
  ['{3D32ACAE-7A7D-4EB2-AA59-C613715402B8}']
  { getters & setters } 

    function get_Item(index: Int32): DNIChartSeries;

  { propertys } 

    property Item[index: Int32]: DNIChartSeries read get_Item; default;
  end;

  //-------------namespace: Aspose.Slides----------------
  [DNTypeName('Aspose.Slides.IParagraphCollection')]
  DNIParagraphCollection = interface(DDN.mscorlib.DNObject)
  ['{8CADF989-4D96-4E85-BD9E-9264C84EBE35}']
  { getters & setters } 

    function get_Item(index: Int32): DNIParagraph;
    function get_Count: Int32;
    function get_AsISlideComponent: DNISlideComponent;
    function get_AsIEnumerable: DDN.mscorlib.DNIEnumerable;

  { methods } 

    procedure Add(value: DNIParagraph); overload;
    function Add(value: DNIParagraphCollection): Int32; overload;
    procedure Insert(index: Int32; value: DNIParagraph); overload;
    procedure Insert(index: Int32; value: DNIParagraphCollection); overload;
    procedure Clear;
    procedure RemoveAt(index: Int32);
    function Remove(item: DNIParagraph): Boolean;
    procedure AddFromHtml(text: string); overload;
    procedure AddFromHtml(text: string; resolver: DNIExternalResourceResolver; uri: string); overload;
    function ExportToHtml(firstParagraphIndex: Int32; paragraphsCount: Int32; options: DNITextToHtmlConversionOptions): string;

  { propertys } 

    property Item[index: Int32]: DNIParagraph read get_Item; default;
    property Count: Int32 read get_Count;
    property AsISlideComponent: DNISlideComponent read get_AsISlideComponent;
    property AsIEnumerable: DDN.mscorlib.DNIEnumerable read get_AsIEnumerable;
  end;

  //-------------namespace: Aspose.Slides.Animation----------------
  [DNTypeName('Aspose.Slides.Animation.ITextAnimationCollection')]
  DNITextAnimationCollection = interface(DDN.mscorlib.DNICollection)
  ['{07EE1E6D-F6BF-46EE-9B99-1D61936D45CB}']
  { getters & setters } 

    function get_Item(index: Int32): DNITextAnimation; overload;
    function get_Item(shape: DNIShape): TArray<DNITextAnimation>; overload;

  { propertys } 

    property Item[index: Int32]: DNITextAnimation read get_Item; default;
    property Item[shape: DNIShape]: TArray<DNITextAnimation> read get_Item; default;
  end;

  //-------------namespace: Aspose.Slides.Charts----------------
  [DNTypeName('Aspose.Slides.Charts.IChartCategoryCollection')]
  DNIChartCategoryCollection = interface(DDN.mscorlib.DNICollection)
  ['{8780A5AA-2263-4462-A768-44400CB3BE35}']
  { getters & setters } 

    function get_Item(index: Int32): DNIChartCategory;
    function get_UseCells: Boolean;
    procedure set_UseCells(value: Boolean);
    function get_GroupingLevelCount: Int32;

  { methods } 

    function Add(chartDataCell: DNIChartDataCell): DNIChartCategory; overload;
    function Add(value: DDN.mscorlib.DNObject): DNIChartCategory; overload;
    function IndexOf(value: DNIChartCategory): Int32;
    procedure Remove(value: DNIChartCategory);
    procedure RemoveAt(index: Int32);
    procedure Clear;

  { propertys } 

    property Item[index: Int32]: DNIChartCategory read get_Item; default;
    property UseCells: Boolean read get_UseCells write set_UseCells;
    property GroupingLevelCount: Int32 read get_GroupingLevelCount;
  end;

  //-------------namespace: Aspose.Slides.Charts----------------
  [DNTypeName('Aspose.Slides.Charts.IChartDataPointCollection')]
  DNIChartDataPointCollection = interface(DDN.mscorlib.DNICollection)
  ['{985DF8C2-9EB6-4748-840C-48469F61917F}']
  { getters & setters } 

    function get_Item(index: Int32): DNIChartDataPoint; overload;
    function get_Item(pt: DNIChartDataPoint): Int32; overload;
    function get_DataSourceTypeForXValues: DNDataSourceType;
    procedure set_DataSourceTypeForXValues(value: DNDataSourceType);
    function get_DataSourceTypeForYValues: DNDataSourceType;
    procedure set_DataSourceTypeForYValues(value: DNDataSourceType);
    function get_DataSourceTypeForBubbleSizes: DNDataSourceType;
    procedure set_DataSourceTypeForBubbleSizes(value: DNDataSourceType);
    function get_DataSourceTypeForValues: DNDataSourceType;
    procedure set_DataSourceTypeForValues(value: DNDataSourceType);
    function get_DataSourceTypeForErrorBarsCustomValues: DNIDataSourceTypeForErrorBarsCustomValues;

  { methods } 

    function GetOrCreateDataPointByIdx(index: UInt32): DNIChartDataPoint;
    function AddDataPointForStockSeries(value: DNIChartDataCell): DNIChartDataPoint; overload;
    function AddDataPointForStockSeries(value: Double): DNIChartDataPoint; overload;
    function AddDataPointForLineSeries(value: DNIChartDataCell): DNIChartDataPoint; overload;
    function AddDataPointForLineSeries(value: Double): DNIChartDataPoint; overload;
    function AddDataPointForScatterSeries(xValue: DNIChartDataCell; yValue: DNIChartDataCell): DNIChartDataPoint; overload;
    function AddDataPointForScatterSeries(xValue: Double; yValue: DNIChartDataCell): DNIChartDataPoint; overload;
    function AddDataPointForScatterSeries(xValue: string; yValue: DNIChartDataCell): DNIChartDataPoint; overload;
    function AddDataPointForScatterSeries(xValue: DNIChartDataCell; yValue: Double): DNIChartDataPoint; overload;
    function AddDataPointForScatterSeries(xValue: Double; yValue: Double): DNIChartDataPoint; overload;
    function AddDataPointForScatterSeries(xValue: string; yValue: Double): DNIChartDataPoint; overload;
    function AddDataPointForRadarSeries(value: DNIChartDataCell): DNIChartDataPoint; overload;
    function AddDataPointForRadarSeries(value: Double): DNIChartDataPoint; overload;
    function AddDataPointForBarSeries(value: DNIChartDataCell): DNIChartDataPoint; overload;
    function AddDataPointForBarSeries(value: Double): DNIChartDataPoint; overload;
    function AddDataPointForAreaSeries(value: DNIChartDataCell): DNIChartDataPoint; overload;
    function AddDataPointForAreaSeries(value: Double): DNIChartDataPoint; overload;
    function AddDataPointForPieSeries(value: DNIChartDataCell): DNIChartDataPoint; overload;
    function AddDataPointForPieSeries(value: Double): DNIChartDataPoint; overload;
    function AddDataPointForDoughnutSeries(value: DNIChartDataCell): DNIChartDataPoint; overload;
    function AddDataPointForDoughnutSeries(value: Double): DNIChartDataPoint; overload;
    function AddDataPointForBubbleSeries(xValue: DNIChartDataCell; yValue: DNIChartDataCell; bubbleSize: DNIChartDataCell): DNIChartDataPoint; overload;
    function AddDataPointForBubbleSeries(xValue: Double; yValue: DNIChartDataCell; bubbleSize: DNIChartDataCell): DNIChartDataPoint; overload;
    function AddDataPointForBubbleSeries(xValue: string; yValue: DNIChartDataCell; bubbleSize: DNIChartDataCell): DNIChartDataPoint; overload;
    function AddDataPointForBubbleSeries(xValue: DNIChartDataCell; yValue: Double; bubbleSize: DNIChartDataCell): DNIChartDataPoint; overload;
    function AddDataPointForBubbleSeries(xValue: Double; yValue: Double; bubbleSize: DNIChartDataCell): DNIChartDataPoint; overload;
    function AddDataPointForBubbleSeries(xValue: string; yValue: Double; bubbleSize: DNIChartDataCell): DNIChartDataPoint; overload;
    function AddDataPointForBubbleSeries(xValue: DNIChartDataCell; yValue: DNIChartDataCell; bubbleSize: Double): DNIChartDataPoint; overload;
    function AddDataPointForBubbleSeries(xValue: Double; yValue: DNIChartDataCell; bubbleSize: Double): DNIChartDataPoint; overload;
    function AddDataPointForBubbleSeries(xValue: string; yValue: DNIChartDataCell; bubbleSize: Double): DNIChartDataPoint; overload;
    function AddDataPointForBubbleSeries(xValue: DNIChartDataCell; yValue: Double; bubbleSize: Double): DNIChartDataPoint; overload;
    function AddDataPointForBubbleSeries(xValue: Double; yValue: Double; bubbleSize: Double): DNIChartDataPoint; overload;
    function AddDataPointForBubbleSeries(xValue: string; yValue: Double; bubbleSize: Double): DNIChartDataPoint; overload;
    function AddDataPointForSurfaceSeries(value: DNIChartDataCell): DNIChartDataPoint; overload;
    function AddDataPointForSurfaceSeries(value: Double): DNIChartDataPoint; overload;
    function AddDataPointForSunburstSeries(sizeValue: DNIChartDataCell): DNIChartDataPoint;
    function AddDataPointForWaterfallSeries(value: DNIChartDataCell): DNIChartDataPoint;
    function AddDataPointForBoxAndWhiskerSeries(value: DNIChartDataCell): DNIChartDataPoint;
    function AddDataPointForTreemapSeries(sizeValue: DNIChartDataCell): DNIChartDataPoint;
    function AddDataPointForHistogramSeries(value: DNIChartDataCell): DNIChartDataPoint;
    function AddDataPointForFunnelSeries(value: DNIChartDataCell): DNIChartDataPoint;
    function AddDataPointForMapSeries(value: DNIChartDataCell): DNIChartDataPoint;
    procedure Clear;
    procedure Remove(value: DNIChartDataPoint);
    procedure RemoveAt(index: Int32);

  { propertys } 

    property Item[index: Int32]: DNIChartDataPoint read get_Item; default;
    property Item[pt: DNIChartDataPoint]: Int32 read get_Item; default;
    property DataSourceTypeForXValues: DNDataSourceType read get_DataSourceTypeForXValues write set_DataSourceTypeForXValues;
    property DataSourceTypeForYValues: DNDataSourceType read get_DataSourceTypeForYValues write set_DataSourceTypeForYValues;
    property DataSourceTypeForBubbleSizes: DNDataSourceType read get_DataSourceTypeForBubbleSizes write set_DataSourceTypeForBubbleSizes;
    property DataSourceTypeForValues: DNDataSourceType read get_DataSourceTypeForValues write set_DataSourceTypeForValues;
    property DataSourceTypeForErrorBarsCustomValues: DNIDataSourceTypeForErrorBarsCustomValues read get_DataSourceTypeForErrorBarsCustomValues;
  end;

  //-------------namespace: Aspose.Slides.Charts----------------
  [DNTypeName('Aspose.Slides.Charts.IChartSeriesGroupCollection')]
  DNIChartSeriesGroupCollection = interface(DDN.mscorlib.DNICollection)
  ['{DF7F2244-5493-41A4-A98C-67AC49282BF6}']
  { getters & setters } 

    function get_Item(ofSeries: DNIChartSeries): DNIChartSeriesGroup; overload;
    function get_Item(index: Int32): DNIChartSeriesGroup; overload;

  { propertys } 

    property Item[ofSeries: DNIChartSeries]: DNIChartSeriesGroup read get_Item; default;
    property Item[index: Int32]: DNIChartSeriesGroup read get_Item; default;
  end;

  //-------------namespace: Aspose.Slides.Effects----------------
  [DNTypeName('Aspose.Slides.Effects.IImageTransformOCollectionEffectiveData')]
  DNIImageTransformOCollectionEffectiveData = interface(DDN.mscorlib.DNICollection)
  ['{35469424-84AE-4CE6-80F0-1EC7141AA779}']
  { getters & setters } 

    function get_Item(index: Int32): DNIEffectEffectiveData;

  { propertys } 

    property Item[index: Int32]: DNIEffectEffectiveData read get_Item; default;
  end;

  //-------------namespace: Aspose.Slides----------------
  [DNTypeName('Aspose.Slides.IAdjustValueCollection')]
  DNIAdjustValueCollection = interface(DDN.mscorlib.DNICollection)
  ['{43018C27-5739-4D78-9666-3D34BFF7EB17}']
  { getters & setters } 

    function get_Item(index: Int32): DNIAdjustValue;
    function get_AsICollection: DDN.mscorlib.DNICollection;
    function get_AsIEnumerable: DDN.mscorlib.DNIEnumerable;

  { propertys } 

    property Item[index: Int32]: DNIAdjustValue read get_Item; default;
    property AsICollection: DDN.mscorlib.DNICollection read get_AsICollection;
    property AsIEnumerable: DDN.mscorlib.DNIEnumerable read get_AsIEnumerable;
  end;

  //-------------namespace: Aspose.Slides----------------
  [DNTypeName('Aspose.Slides.IAudioCollection')]
  DNIAudioCollection = interface(DDN.mscorlib.DNICollection)
  ['{8C3F59DB-38E1-4EAD-ADA3-048A42079890}']
  { getters & setters } 

    function get_Item(index: Int32): DNIAudio;

  { methods } 

    function AddAudio(audio: DNIAudio): DNIAudio; overload;
    function AddAudio(stream: DDN.mscorlib.DNStream): DNIAudio; overload;
    function AddAudio(stream: DDN.mscorlib.DNStream; loadingStreamBehavior: DNLoadingStreamBehavior): DNIAudio; overload;
    function AddAudio(audioData: TArray<Byte>): DNIAudio; overload;

  { propertys } 

    property Item[index: Int32]: DNIAudio read get_Item; default;
  end;

  //-------------namespace: Aspose.Slides----------------
  [DNTypeName('Aspose.Slides.ICellCollection')]
  DNICellCollection = interface(DDN.mscorlib.DNICollection)
  ['{39EFF844-34B3-4AEB-B848-AB708BA1840B}']
  { getters & setters } 

    function get_Item(index: Int32): DNICell;
    function get_AsISlideComponent: DNISlideComponent;

  { propertys } 

    property Item[index: Int32]: DNICell read get_Item; default;
    property AsISlideComponent: DNISlideComponent read get_AsISlideComponent;
  end;

  //-------------namespace: Aspose.Slides----------------
  [DNTypeName('Aspose.Slides.IColorOperationCollection')]
  DNIColorOperationCollection = interface(DDN.mscorlib.DNICollection)
  ['{4779F2AE-C224-41BC-8352-B6B324F271EE}']
  { getters & setters } 

    function get_Item(index: Int32): DNIColorOperation;
    procedure set_Item(index: Int32; value: DNIColorOperation);

  { methods } 

    function Add(operation: DNColorTransformOperation; parameter: Single): DNIColorOperation; overload;
    function Add(operation: DNColorTransformOperation): DNIColorOperation; overload;
    function Insert(position: Int32; operation: DNColorTransformOperation; parameter: Single): DNIColorOperation; overload;
    function Insert(position: Int32; operation: DNColorTransformOperation): DNIColorOperation; overload;
    procedure RemoveAt(index: Int32);
    procedure Clear;

  { propertys } 

    property Item[index: Int32]: DNIColorOperation read get_Item write set_Item; default;
  end;

  //-------------namespace: Aspose.Slides----------------
  [DNTypeName('Aspose.Slides.IColumn')]
  DNIColumn = interface(DDN.mscorlib.DNICollection)
  ['{B5E43E73-512E-4EE2-BB50-9A0BDD9CCE1C}']
  { getters & setters } 

    function get_Width: Double;
    procedure set_Width(value: Double);
    function get_ColumnFormat: DNIColumnFormat;
    function get_AsICellCollection: DNICellCollection;
    function get_AsIBulkTextFormattable: DNIBulkTextFormattable;

  { propertys } 

    property Width: Double read get_Width write set_Width;
    property ColumnFormat: DNIColumnFormat read get_ColumnFormat;
    property AsICellCollection: DNICellCollection read get_AsICellCollection;
    property AsIBulkTextFormattable: DNIBulkTextFormattable read get_AsIBulkTextFormattable;
  end;

  //-------------namespace: Aspose.Slides----------------
  [DNTypeName('Aspose.Slides.IColumnCollection')]
  DNIColumnCollection = interface(DDN.mscorlib.DNICollection)
  ['{22897944-2303-4386-9859-D8809B1194E0}']
  { getters & setters } 

    function get_Item(index: Int32): DNIColumn;

  { methods } 

    function AddClone(templ: DNIColumn; withAttachedColumns: Boolean): TArray<DNIColumn>;
    function InsertClone(index: Int32; templ: DNIColumn; withAttachedColumns: Boolean): TArray<DNIColumn>;
    procedure RemoveAt(firstColumnIndex: Int32; withAttachedRows: Boolean);

  { propertys } 

    property Item[index: Int32]: DNIColumn read get_Item; default;
  end;

  //-------------namespace: Aspose.Slides----------------
  [DNTypeName('Aspose.Slides.ICommentAuthorCollection')]
  DNICommentAuthorCollection = interface(DDN.mscorlib.DNICollection)
  ['{930C9BCB-4267-4AF1-A71B-8E4003FDD1B9}']
  { getters & setters } 

    function get_Item(index: Int32): DNICommentAuthor;

  { methods } 

    function AddAuthor(name: string; initials: string): DNICommentAuthor;
    function ToArray: TArray<DNICommentAuthor>;
    function FindByName(name: string): TArray<DNICommentAuthor>;
    function FindByNameAndInitials(name: string; initials: string): TArray<DNICommentAuthor>;
    procedure RemoveAt(index: Int32);
    procedure Remove(author: DNICommentAuthor);
    procedure Clear;

  { propertys } 

    property Item[index: Int32]: DNICommentAuthor read get_Item; default;
  end;

  //-------------namespace: Aspose.Slides----------------
  [DNTypeName('Aspose.Slides.ICommentCollection')]
  DNICommentCollection = interface(DDN.mscorlib.DNICollection)
  ['{20443DBF-D3AA-4E2A-82CC-9CF6A57FBA07}']
  { getters & setters } 

    function get_Item(index: Int32): DNIComment;

  { methods } 

    function AddComment(text: string; slide: DNISlide; position: DDN.System.Drawing.DNPointF; creationTime: DDN.mscorlib.DNDateTime): DNIComment;
    function InsertComment(index: Int32; text: string; slide: DNISlide; position: DDN.System.Drawing.DNPointF; creationTime: DDN.mscorlib.DNDateTime): DNIComment;
    function ToArray: TArray<DNIComment>; overload;
    function ToArray(startIndex: Int32; count: Int32): TArray<DNIComment>; overload;
    procedure RemoveAt(index: Int32);
    procedure Remove(comment: DNIComment);
    procedure Clear;

  { propertys } 

    property Item[index: Int32]: DNIComment read get_Item; default;
  end;

  //-------------namespace: Aspose.Slides----------------
  [DNTypeName('Aspose.Slides.IControlCollection')]
  DNIControlCollection = interface(DDN.mscorlib.DNICollection)
  ['{E5B27E6D-62BA-4030-BAC4-C0BDDB749AC5}']
  { getters & setters } 

    function get_Item(index: Int32): DNIControl;

  { methods } 

    procedure Remove(item: DNIControl);
    procedure RemoveAt(index: Int32);
    procedure Clear;
    function AddControl(controlType: DNControlType; x: Single; y: Single; width: Single; height: Single): DNIControl;

  { propertys } 

    property Item[index: Int32]: DNIControl read get_Item; default;
  end;

  //-------------namespace: Aspose.Slides----------------
  [DNTypeName('Aspose.Slides.ICustomXmlPartCollection')]
  DNICustomXmlPartCollection = interface(DDN.mscorlib.DNICollection)
  ['{30B57539-3DC9-441C-A4CE-A8A15535854C}']
  { getters & setters } 

    function get_Item(index: Int32): DNICustomXmlPart;

  { methods } 

    function Add(xmlData: TArray<Byte>): DNICustomXmlPart; overload;
    function Add(xmlString: string): DNICustomXmlPart; overload;
    function Add(inputStream: DDN.mscorlib.DNStream): DNICustomXmlPart; overload;
    procedure RemoveAt(index: Int32);
    function Remove(item: DNICustomXmlPart): Boolean;
    procedure Clear;

  { propertys } 

    property Item[index: Int32]: DNICustomXmlPart read get_Item; default;
  end;

  //-------------namespace: Aspose.Slides----------------
  [DNTypeName('Aspose.Slides.IDigitalSignatureCollection')]
  DNIDigitalSignatureCollection = interface(DDN.mscorlib.DNICollection)
  ['{9E676F90-15AD-4F1B-AA52-9C5D1FFD911F}']
  { getters & setters } 

    function get_Item(index: Int32): DNIDigitalSignature;

  { methods } 

    procedure Add(digitalSignature: DNIDigitalSignature);
    procedure RemoveAt(index: Int32);
    procedure Clear;

  { propertys } 

    property Item[index: Int32]: DNIDigitalSignature read get_Item; default;
  end;

  //-------------namespace: Aspose.Slides----------------
  [DNTypeName('Aspose.Slides.IFontFallBackRulesCollection')]
  DNIFontFallBackRulesCollection = interface(DDN.mscorlib.DNICollection)
  ['{196A7474-558E-46CD-A24F-A4A2D34B56F3}']
  { getters & setters } 

    function get_Item(index: Int32): DNIFontFallBackRule;

  { methods } 

    procedure Add(sourceRule: DNIFontFallBackRule);
    procedure Remove(targetRule: DNIFontFallBackRule);

  { propertys } 

    property Item[index: Int32]: DNIFontFallBackRule read get_Item; default;
  end;

  //-------------namespace: Aspose.Slides----------------
  [DNTypeName('Aspose.Slides.IFontSubstRuleCollection')]
  DNIFontSubstRuleCollection = interface(DDN.mscorlib.DNICollection)
  ['{43CAACCE-9C16-401A-BE9E-E3F9FCB941E0}']
  { getters & setters } 

    function get_Item(index: Int32): DNIFontSubstRule;

  { methods } 

    procedure Add(value: DNIFontSubstRule);
    procedure Remove(value: DNIFontSubstRule);

  { propertys } 

    property Item[index: Int32]: DNIFontSubstRule read get_Item; default;
  end;

  //-------------namespace: Aspose.Slides----------------
  [DNTypeName('Aspose.Slides.IGenericCollection`1')]
  DNIGenericCollection<T> = interface(DDN.mscorlib.DNICollection)
  ['{3E4BAE47-1B7D-447F-AF31-FD0A2D703634}']
  { getters & setters } 

    function get_AsICollection: DDN.mscorlib.DNICollection;
    function get_AsIEnumerable: DDN.mscorlib.DNIEnumerable;

  { propertys } 

    property AsICollection: DDN.mscorlib.DNICollection read get_AsICollection;
    property AsIEnumerable: DDN.mscorlib.DNIEnumerable read get_AsIEnumerable;
  end;

  //-------------namespace: Aspose.Slides----------------
  [DNTypeName('Aspose.Slides.IGlobalLayoutSlideCollection')]
  DNIGlobalLayoutSlideCollection = interface(DDN.mscorlib.DNICollection)
  ['{8D7B285A-144F-4B5E-866F-8DB4A5CDE2D6}']
  { getters & setters } 

    function get_AsILayoutSlideCollection: DNILayoutSlideCollection;

  { methods } 

    function AddClone(sourceLayout: DNILayoutSlide): DNILayoutSlide; overload;
    function AddClone(sourceLayout: DNILayoutSlide; destMaster: DNIMasterSlide): DNILayoutSlide; overload;
    function Add(master: DNIMasterSlide; layoutType: DNSlideLayoutType; layoutName: string): DNILayoutSlide;

  { propertys } 

    property AsILayoutSlideCollection: DNILayoutSlideCollection read get_AsILayoutSlideCollection;
  end;

  //-------------namespace: Aspose.Slides----------------
  [DNTypeName('Aspose.Slides.IGradientStopCollection')]
  DNIGradientStopCollection = interface(DDN.mscorlib.DNICollection)
  ['{5C20EE95-8AED-43B7-86E9-AB2339FA932A}']
  { getters & setters } 

    function get_Item(index: Int32): DNIGradientStop;

  { methods } 

    function Add(position: Single; color: DDN.System.Drawing.DNColor): DNIGradientStop; overload;
    function Add(position: Single; presetColor: DNPresetColor): DNIGradientStop; overload;
    function Add(position: Single; schemeColor: DNSchemeColor): DNIGradientStop; overload;
    procedure Insert(index: Int32; position: Single; color: DDN.System.Drawing.DNColor); overload;
    procedure Insert(index: Int32; position: Single; presetColor: DNPresetColor); overload;
    procedure Insert(index: Int32; position: Single; schemeColor: DNSchemeColor); overload;
    procedure RemoveAt(index: Int32);
    procedure Clear;

  { propertys } 

    property Item[index: Int32]: DNIGradientStop read get_Item; default;
  end;

  //-------------namespace: Aspose.Slides----------------
  [DNTypeName('Aspose.Slides.IGradientStopCollectionEffectiveData')]
  DNIGradientStopCollectionEffectiveData = interface(DDN.mscorlib.DNICollection)
  ['{A8A37F95-AD07-4D18-921D-6387DC01A6F7}']
  { getters & setters } 

    function get_Item(index: Int32): DNIGradientStopEffectiveData;

  { propertys } 

    property Item[index: Int32]: DNIGradientStopEffectiveData read get_Item; default;
  end;

  //-------------namespace: Aspose.Slides----------------
  [DNTypeName('Aspose.Slides.IImageCollection')]
  DNIImageCollection = interface(DDN.mscorlib.DNICollection)
  ['{D0E444A6-8D77-46E5-BE19-104D1FC2C968}']
  { getters & setters } 

    function get_Item(index: Int32): DNIPPImage;

  { methods } 

    function AddImage(image: DDN.System.Drawing.DNImage): DNIPPImage; overload;
    function AddImage(stream: DDN.mscorlib.DNMemoryStream): DNIPPImage; overload;
    function AddImage(stream: DDN.mscorlib.DNStream): DNIPPImage; overload;
    function AddImage(stream: DDN.mscorlib.DNStream; loadingStreamBehavior: DNLoadingStreamBehavior): DNIPPImage; overload;
    function AddImage(buffer: TArray<Byte>): DNIPPImage; overload;
    function AddImage(imageSource: DNIPPImage): DNIPPImage; overload;
    function AddImage(svgImage: DNISvgImage): DNIPPImage; overload;

  { propertys } 

    property Item[index: Int32]: DNIPPImage read get_Item; default;
  end;

  //-------------namespace: Aspose.Slides----------------
  [DNTypeName('Aspose.Slides.ILayoutSlideCollection')]
  DNILayoutSlideCollection = interface(DDN.mscorlib.DNICollection)
  ['{105CEE73-CEE2-4A11-895C-346B60C03923}']
  { getters & setters } 

    function get_Item(index: Int32): DNILayoutSlide;

  { methods } 

    function GetByType(&type: DNSlideLayoutType): DNILayoutSlide;
    procedure Remove(value: DNILayoutSlide);
    procedure RemoveUnused;

  { propertys } 

    property Item[index: Int32]: DNILayoutSlide read get_Item; default;
  end;

  //-------------namespace: Aspose.Slides----------------
  [DNTypeName('Aspose.Slides.IMasterLayoutSlideCollection')]
  DNIMasterLayoutSlideCollection = interface(DDN.mscorlib.DNICollection)
  ['{922F7D7D-8DDC-4930-A6BE-3F0799B244B5}']
  { getters & setters } 

    function get_AsILayoutSlideCollection: DNILayoutSlideCollection;

  { methods } 

    function AddClone(sourceLayout: DNILayoutSlide): DNILayoutSlide;
    function InsertClone(index: Int32; sourceLayout: DNILayoutSlide): DNILayoutSlide;
    function Add(layoutType: DNSlideLayoutType; layoutName: string): DNILayoutSlide;
    function Insert(index: Int32; layoutType: DNSlideLayoutType; layoutName: string): DNILayoutSlide;
    procedure RemoveAt(index: Int32);
    procedure Reorder(index: Int32; layoutSlide: DNILayoutSlide);

  { propertys } 

    property AsILayoutSlideCollection: DNILayoutSlideCollection read get_AsILayoutSlideCollection;
  end;

  //-------------namespace: Aspose.Slides----------------
  [DNTypeName('Aspose.Slides.IMasterSlideCollection')]
  DNIMasterSlideCollection = interface(DDN.mscorlib.DNICollection)
  ['{24EF6679-3EF4-472C-A43A-955ED5EDA231}']
  { getters & setters } 

    function get_Item(index: Int32): DNIMasterSlide;

  { methods } 

    procedure Remove(value: DNIMasterSlide);
    procedure RemoveAt(index: Int32);
    procedure RemoveUnused(ignorePreserveField: Boolean);
    function AddClone(sourceMaster: DNIMasterSlide): DNIMasterSlide;
    function InsertClone(index: Int32; sourceMaster: DNIMasterSlide): DNIMasterSlide;

  { propertys } 

    property Item[index: Int32]: DNIMasterSlide read get_Item; default;
  end;

  //-------------namespace: Aspose.Slides----------------
  [DNTypeName('Aspose.Slides.IRow')]
  DNIRow = interface(DDN.mscorlib.DNICollection)
  ['{7A241DB4-03DE-4E61-BDB6-F39380D4F898}']
  { getters & setters } 

    function get_Height: Double;
    function get_MinimalHeight: Double;
    procedure set_MinimalHeight(value: Double);
    function get_RowFormat: DNIRowFormat;
    function get_AsICellCollection: DNICellCollection;
    function get_AsIBulkTextFormattable: DNIBulkTextFormattable;

  { propertys } 

    property Height: Double read get_Height;
    property MinimalHeight: Double read get_MinimalHeight write set_MinimalHeight;
    property RowFormat: DNIRowFormat read get_RowFormat;
    property AsICellCollection: DNICellCollection read get_AsICellCollection;
    property AsIBulkTextFormattable: DNIBulkTextFormattable read get_AsIBulkTextFormattable;
  end;

  //-------------namespace: Aspose.Slides----------------
  [DNTypeName('Aspose.Slides.IRowCollection')]
  DNIRowCollection = interface(DDN.mscorlib.DNICollection)
  ['{0A6D0CA5-19E1-4EEC-838C-8B8363E9356E}']
  { getters & setters } 

    function get_Item(index: Int32): DNIRow;

  { methods } 

    function AddClone(templ: DNIRow; withAttachedRows: Boolean): TArray<DNIRow>;
    function InsertClone(index: Int32; templ: DNIRow; withAttachedRows: Boolean): TArray<DNIRow>;
    procedure RemoveAt(firstRowIndex: Int32; withAttachedRows: Boolean);

  { propertys } 

    property Item[index: Int32]: DNIRow read get_Item; default;
  end;

  //-------------namespace: Aspose.Slides----------------
  [DNTypeName('Aspose.Slides.ISectionCollection')]
  DNISectionCollection = interface(DDN.mscorlib.DNICollection)
  ['{E7CF9D01-581E-4EEB-8C1C-01771550860A}']
  { getters & setters } 

    function get_Item(index: Int32): DNISection;

  { methods } 

    function AddSection(name: string; startedFromSlide: DNISlide): DNISection;
    function AddEmptySection(name: string; index: Int32): DNISection;
    procedure RemoveSectionWithSlides(section: DNISection);
    procedure RemoveSection(section: DNISection);
    procedure ReorderSectionWithSlides(section: DNISection; index: Int32);
    function AppendEmptySection(name: string): DNISection;
    function IndexOf(section: DNISection): Int32;
    procedure Clear;

  { propertys } 

    property Item[index: Int32]: DNISection read get_Item; default;
  end;

  //-------------namespace: Aspose.Slides----------------
  [DNTypeName('Aspose.Slides.ISectionSlideCollection')]
  DNISectionSlideCollection = interface(DDN.mscorlib.DNICollection)
  ['{179F89BF-AC07-48D6-90AB-37D341A9335F}']
  { getters & setters } 

    function get_Item(index: Int32): DNISlide;

  { propertys } 

    property Item[index: Int32]: DNISlide read get_Item; default;
  end;

  //-------------namespace: Aspose.Slides----------------
  [DNTypeName('Aspose.Slides.IShapeCollection')]
  DNIShapeCollection = interface(DDN.mscorlib.DNICollection)
  ['{20E97D2E-2BF3-4EF4-BC09-63B471DEE64F}']
  { getters & setters } 

    function get_Item(index: Int32): DNIShape;
    function get_ParentGroup: DNIGroupShape;

  { methods } 

    function AddChart(&type: DNChartType; x: Single; y: Single; width: Single; height: Single): DNIChart; overload;
    function AddChart(&type: DNChartType; x: Single; y: Single; width: Single; height: Single; initWithSample: Boolean): DNIChart; overload;
    function AddSmartArt(x: Single; y: Single; width: Single; height: Single; layoutType: DNSmartArtLayoutType): DNISmartArt;
    function InsertChart(&type: DNChartType; x: Single; y: Single; width: Single; height: Single; index: Int32): DNIChart; overload;
    function InsertChart(&type: DNChartType; x: Single; y: Single; width: Single; height: Single; index: Int32; initWithSample: Boolean): DNIChart; overload;
    function AddOleObjectFrame(x: Single; y: Single; width: Single; height: Single; dataInfo: DNIOleEmbeddedDataInfo): DNIOleObjectFrame; overload;
    function AddOleObjectFrame(x: Single; y: Single; width: Single; height: Single; className: string; path: string): DNIOleObjectFrame; overload;
    function InsertOleObjectFrame(index: Int32; x: Single; y: Single; width: Single; height: Single; dataInfo: DNIOleEmbeddedDataInfo): DNIOleObjectFrame; overload;
    function InsertOleObjectFrame(index: Int32; x: Single; y: Single; width: Single; height: Single; className: string; path: string): DNIOleObjectFrame; overload;
    function AddZoomFrame(x: Single; y: Single; width: Single; height: Single; slide: DNISlide): DNIZoomFrame; overload;
    function AddZoomFrame(x: Single; y: Single; width: Single; height: Single; slide: DNISlide; image: DNIPPImage): DNIZoomFrame; overload;
    function InsertZoomFrame(index: Int32; x: Single; y: Single; width: Single; height: Single; slide: DNISlide): DNIZoomFrame; overload;
    function InsertZoomFrame(index: Int32; x: Single; y: Single; width: Single; height: Single; slide: DNISlide; image: DNIPPImage): DNIZoomFrame; overload;
    function AddVideoFrame(x: Single; y: Single; width: Single; height: Single; fname: string): DNIVideoFrame; overload;
    function AddVideoFrame(x: Single; y: Single; width: Single; height: Single; video: DNIVideo): DNIVideoFrame; overload;
    function InsertVideoFrame(index: Int32; x: Single; y: Single; width: Single; height: Single; fname: string): DNIVideoFrame;
    function AddAudioFrameCD(x: Single; y: Single; width: Single; height: Single): DNIAudioFrame;
    function InsertAudioFrameCD(index: Int32; x: Single; y: Single; width: Single; height: Single): DNIAudioFrame;
    function AddAudioFrameLinked(x: Single; y: Single; width: Single; height: Single; fname: string): DNIAudioFrame;
    function InsertAudioFrameLinked(index: Int32; x: Single; y: Single; width: Single; height: Single; fname: string): DNIAudioFrame;
    function AddAudioFrameEmbedded(x: Single; y: Single; width: Single; height: Single; audio_stream: DDN.mscorlib.DNStream): DNIAudioFrame; overload;
    function AddAudioFrameEmbedded(x: Single; y: Single; width: Single; height: Single; audio: DNIAudio): DNIAudioFrame; overload;
    function InsertAudioFrameEmbedded(index: Int32; x: Single; y: Single; width: Single; height: Single; audio_stream: DDN.mscorlib.DNStream): DNIAudioFrame; overload;
    function InsertAudioFrameEmbedded(index: Int32; x: Single; y: Single; width: Single; height: Single; audio: DNIAudio): DNIAudioFrame; overload;
    function IndexOf(shape: DNIShape): Int32;
    function ToArray: TArray<DNIShape>; overload;
    function ToArray(startIndex: Int32; count: Int32): TArray<DNIShape>; overload;
    procedure Reorder(index: Int32; shape: DNIShape); overload;
    procedure Reorder(index: Int32; shapes: TArray<DNIShape>); overload;
    function AddAutoShape(shapeType: DNShapeType; x: Single; y: Single; width: Single; height: Single): DNIAutoShape; overload;
    function AddAutoShape(shapeType: DNShapeType; x: Single; y: Single; width: Single; height: Single; createFromTemplate: Boolean): DNIAutoShape; overload;
    function AddMathShape(x: Single; y: Single; width: Single; height: Single): DNIAutoShape;
    function InsertAutoShape(index: Int32; shapeType: DNShapeType; x: Single; y: Single; width: Single; height: Single): DNIAutoShape; overload;
    function InsertAutoShape(index: Int32; shapeType: DNShapeType; x: Single; y: Single; width: Single; height: Single; createFromTemplate: Boolean): DNIAutoShape; overload;
    function AddGroupShape: DNIGroupShape; overload;
    function AddGroupShape(svgImage: DNISvgImage; x: Single; y: Single; width: Single; height: Single): DNIGroupShape; overload;
    function InsertGroupShape(index: Int32): DNIGroupShape;
    function AddConnector(shapeType: DNShapeType; x: Single; y: Single; width: Single; height: Single): DNIConnector; overload;
    function AddConnector(shapeType: DNShapeType; x: Single; y: Single; width: Single; height: Single; createFromTemplate: Boolean): DNIConnector; overload;
    function InsertConnector(index: Int32; shapeType: DNShapeType; x: Single; y: Single; width: Single; height: Single): DNIConnector; overload;
    function InsertConnector(index: Int32; shapeType: DNShapeType; x: Single; y: Single; width: Single; height: Single; createFromTemplate: Boolean): DNIConnector; overload;
    function AddPictureFrame(shapeType: DNShapeType; x: Single; y: Single; width: Single; height: Single; image: DNIPPImage): DNIPictureFrame;
    function InsertPictureFrame(index: Int32; shapeType: DNShapeType; x: Single; y: Single; width: Single; height: Single; image: DNIPPImage): DNIPictureFrame;
    function AddTable(x: Single; y: Single; columnWidths: TArray<Double>; rowHeights: TArray<Double>): DNITable;
    function InsertTable(index: Int32; x: Single; y: Single; columnWidths: TArray<Double>; rowHeights: TArray<Double>): DNITable;
    procedure RemoveAt(index: Int32);
    procedure Remove(shape: DNIShape);
    procedure Clear;
    function AddClone(sourceShape: DNIShape; x: Single; y: Single; width: Single; height: Single): DNIShape; overload;
    function AddClone(sourceShape: DNIShape; x: Single; y: Single): DNIShape; overload;
    function AddClone(sourceShape: DNIShape): DNIShape; overload;
    function InsertClone(index: Int32; sourceShape: DNIShape; x: Single; y: Single; width: Single; height: Single): DNIShape; overload;
    function InsertClone(index: Int32; sourceShape: DNIShape; x: Single; y: Single): DNIShape; overload;
    function InsertClone(index: Int32; sourceShape: DNIShape): DNIShape; overload;

  { propertys } 

    property Item[index: Int32]: DNIShape read get_Item; default;
    property ParentGroup: DNIGroupShape read get_ParentGroup;
  end;

  //-------------namespace: Aspose.Slides----------------
  [DNTypeName('Aspose.Slides.ISlideCollection')]
  DNISlideCollection = interface(DDN.mscorlib.DNICollection)
  ['{F2375DC3-1D00-4E39-8E6C-0FC7FB011474}']
  { getters & setters } 

    function get_Item(index: Int32): DNISlide;

  { methods } 

    function AddClone(sourceSlide: DNISlide): DNISlide; overload;
    function AddClone(sourceSlide: DNISlide; section: DNISection): DNISlide; overload;
    function InsertClone(index: Int32; sourceSlide: DNISlide): DNISlide; overload;
    function AddEmptySlide(layout: DNILayoutSlide): DNISlide;
    function InsertEmptySlide(index: Int32; layout: DNILayoutSlide): DNISlide;
    function AddClone(sourceSlide: DNISlide; destLayout: DNILayoutSlide): DNISlide; overload;
    function InsertClone(index: Int32; sourceSlide: DNISlide; destLayout: DNILayoutSlide): DNISlide; overload;
    function AddClone(sourceSlide: DNISlide; destMaster: DNIMasterSlide; allowCloneMissingLayout: Boolean): DNISlide; overload;
    function InsertClone(index: Int32; sourceSlide: DNISlide; destMaster: DNIMasterSlide; allowCloneMissingLayout: Boolean): DNISlide; overload;
    procedure Remove(value: DNISlide);
    procedure RemoveAt(index: Int32);
    function ToArray: TArray<DNISlide>; overload;
    function ToArray(startIndex: Int32; count: Int32): TArray<DNISlide>; overload;
    procedure Reorder(index: Int32; slide: DNISlide); overload;
    procedure Reorder(index: Int32; slides: TArray<DNISlide>); overload;
    function IndexOf(slide: DNISlide): Int32;
    function AddFromPdf(path: string): TArray<DNISlide>; overload;
    function AddFromPdf(pdfStream: DDN.mscorlib.DNStream): TArray<DNISlide>; overload;
    function AddFromHtml(htmlText: string; resolver: DNIExternalResourceResolver; uri: string): TArray<DNISlide>; overload;
    function AddFromHtml(htmlText: string): TArray<DNISlide>; overload;
    function AddFromHtml(htmlReader: DDN.mscorlib.DNTextReader; resolver: DNIExternalResourceResolver; uri: string): TArray<DNISlide>; overload;
    function AddFromHtml(htmlReader: DDN.mscorlib.DNTextReader): TArray<DNISlide>; overload;
    function AddFromHtml(htmlStream: DDN.mscorlib.DNStream; resolver: DNIExternalResourceResolver; uri: string): TArray<DNISlide>; overload;
    function AddFromHtml(htmlStream: DDN.mscorlib.DNStream): TArray<DNISlide>; overload;
    function InsertFromHtml(index: Int32; htmlText: string; resolver: DNIExternalResourceResolver; uri: string): TArray<DNISlide>; overload;
    function InsertFromHtml(index: Int32; htmlText: string): TArray<DNISlide>; overload;
    function InsertFromHtml(index: Int32; htmlReader: DDN.mscorlib.DNTextReader; resolver: DNIExternalResourceResolver; uri: string): TArray<DNISlide>; overload;
    function InsertFromHtml(index: Int32; htmlReader: DDN.mscorlib.DNTextReader): TArray<DNISlide>; overload;
    function InsertFromHtml(index: Int32; htmlStream: DDN.mscorlib.DNStream; resolver: DNIExternalResourceResolver; uri: string): TArray<DNISlide>; overload;
    function InsertFromHtml(index: Int32; htmlStream: DDN.mscorlib.DNStream): TArray<DNISlide>; overload;

  { propertys } 

    property Item[index: Int32]: DNISlide read get_Item; default;
  end;

  //-------------namespace: Aspose.Slides----------------
  [DNTypeName('Aspose.Slides.ITabCollection')]
  DNITabCollection = interface(DDN.mscorlib.DNICollection)
  ['{48595E9A-14CE-40EC-BF66-0AA0F1617A03}']
  { getters & setters } 

    function get_Item(index: Int32): DNITab;

  { methods } 

    function Add(position: Double; align: DNTabAlignment): DNITab; overload;
    function Add(value: DNITab): Int32; overload;
    procedure Clear;
    procedure RemoveAt(index: Int32);

  { propertys } 

    property Item[index: Int32]: DNITab read get_Item; default;
  end;

  //-------------namespace: Aspose.Slides----------------
  [DNTypeName('Aspose.Slides.ITagCollection')]
  DNITagCollection = interface(DDN.mscorlib.DNICollection)
  ['{D9E9797F-D2E0-4D42-A802-69F41F347DF1}']
  { getters & setters } 

    function get_Item(name: string): string;
    procedure set_Item(name: string; value: string);

  { methods } 

    function Add(name: string; value: string): Int32;
    procedure Remove(name: string);
    function IndexOfName(name: string): Int32;
    function &Contains(name: string): Boolean;
    procedure RemoveAt(index: Int32);
    procedure Clear;
    function GetValueByIndex(index: Int32): string;
    function GetNameByIndex(index: Int32): string;
    function GetNamesOfTags: TArray<string>;

  { propertys } 

    property Item[name: string]: string read get_Item write set_Item; default;
  end;

  //-------------namespace: Aspose.Slides----------------
  [DNTypeName('Aspose.Slides.IVideoCollection')]
  DNIVideoCollection = interface(DDN.mscorlib.DNICollection)
  ['{E77746A2-E55F-487F-A4B0-589345A78E3A}']
  { getters & setters } 

    function get_Item(index: Int32): DNIVideo;

  { methods } 

    function AddVideo(video: DNIVideo): DNIVideo; overload;
    function AddVideo(stream: DDN.mscorlib.DNStream): DNIVideo; overload;
    function AddVideo(stream: DDN.mscorlib.DNStream; loadingStreamBehavior: DNLoadingStreamBehavior): DNIVideo; overload;
    function AddVideo(videoData: TArray<Byte>): DNIVideo; overload;

  { propertys } 

    property Item[index: Int32]: DNIVideo read get_Item; default;
  end;

  //-------------namespace: Aspose.Slides.SmartArt----------------
  [DNTypeName('Aspose.Slides.SmartArt.ISmartArtNodeCollection')]
  DNISmartArtNodeCollection = interface(DDN.mscorlib.DNICollection)
  ['{875ECF0D-327E-41C5-B697-C9DA54B5B8E0}']
  { getters & setters } 

    function get_Item(index: Int32): DNISmartArtNode;

  { methods } 

    function AddNode: DNISmartArtNode;
    procedure RemoveNode(index: Int32); overload;
    procedure RemoveNode(nodeObj: DNISmartArtNode); overload;
    function AddNodeByPosition(position: Int32): DNISmartArtNode;

  { propertys } 

    property Item[index: Int32]: DNISmartArtNode read get_Item; default;
  end;

  //-------------namespace: Aspose.Slides.SmartArt----------------
  [DNTypeName('Aspose.Slides.SmartArt.ISmartArtShapeCollection')]
  DNISmartArtShapeCollection = interface(DDN.mscorlib.DNICollection)
  ['{8C489B44-B181-4618-884D-F8D5FFC372F5}']
  { getters & setters } 

    function get_Item(index: Int32): DNISmartArtShape;

  { propertys } 

    property Item[index: Int32]: DNISmartArtShape read get_Item; default;
  end;

  //-------------namespace: Aspose.Slides.Theme----------------
  [DNTypeName('Aspose.Slides.Theme.IEffectStyleCollection')]
  DNIEffectStyleCollection = interface(DDN.mscorlib.DNICollection)
  ['{E398A77E-D8E9-44A3-9B04-6B386638661C}']
  { getters & setters } 

    function get_Item(index: Int32): DNIEffectStyle;

  { propertys } 

    property Item[index: Int32]: DNIEffectStyle read get_Item; default;
  end;

  //-------------namespace: Aspose.Slides.Theme----------------
  [DNTypeName('Aspose.Slides.Theme.IEffectStyleCollectionEffectiveData')]
  DNIEffectStyleCollectionEffectiveData = interface(DDN.mscorlib.DNICollection)
  ['{AD7BA6EA-9EB0-47A1-9C58-D56B8C22C942}']
  { getters & setters } 

    function get_Item(index: Int32): DNIEffectStyleEffectiveData;

  { propertys } 

    property Item[index: Int32]: DNIEffectStyleEffectiveData read get_Item; default;
  end;

  //-------------namespace: Aspose.Slides.Theme----------------
  [DNTypeName('Aspose.Slides.Theme.IExtraColorSchemeCollection')]
  DNIExtraColorSchemeCollection = interface(DDN.mscorlib.DNICollection)
  ['{0C1CA0D5-DC56-46AF-9139-8FB464076BDA}']
  { getters & setters } 

    function get_Item(index: Int32): DNIExtraColorScheme;

  { propertys } 

    property Item[index: Int32]: DNIExtraColorScheme read get_Item; default;
  end;

  //-------------namespace: Aspose.Slides.Theme----------------
  [DNTypeName('Aspose.Slides.Theme.IFillFormatCollection')]
  DNIFillFormatCollection = interface(DDN.mscorlib.DNICollection)
  ['{23581E97-1388-48A8-BD01-63AC009FB199}']
  { getters & setters } 

    function get_Item(index: Int32): DNIFillFormat;

  { propertys } 

    property Item[index: Int32]: DNIFillFormat read get_Item; default;
  end;

  //-------------namespace: Aspose.Slides.Theme----------------
  [DNTypeName('Aspose.Slides.Theme.IFillFormatCollectionEffectiveData')]
  DNIFillFormatCollectionEffectiveData = interface(DDN.mscorlib.DNICollection)
  ['{8DDC2E01-14C2-4203-90D0-91EAE0CE2DE0}']
  { getters & setters } 

    function get_Item(index: Int32): DNIFillFormatEffectiveData;

  { propertys } 

    property Item[index: Int32]: DNIFillFormatEffectiveData read get_Item; default;
  end;

  //-------------namespace: Aspose.Slides.Theme----------------
  [DNTypeName('Aspose.Slides.Theme.ILineFormatCollection')]
  DNILineFormatCollection = interface(DDN.mscorlib.DNICollection)
  ['{41861141-C524-475E-9E7D-4C5F61E46FEA}']
  { getters & setters } 

    function get_Item(index: Int32): DNILineFormat;

  { propertys } 

    property Item[index: Int32]: DNILineFormat read get_Item; default;
  end;

  //-------------namespace: Aspose.Slides.Theme----------------
  [DNTypeName('Aspose.Slides.Theme.ILineFormatCollectionEffectiveData')]
  DNILineFormatCollectionEffectiveData = interface(DDN.mscorlib.DNICollection)
  ['{5E4EE281-9DF1-4A49-A314-F437121DC57E}']
  { getters & setters } 

    function get_Item(index: Int32): DNILineFormatEffectiveData;

  { propertys } 

    property Item[index: Int32]: DNILineFormatEffectiveData read get_Item; default;
  end;

  //-------------namespace: Aspose.Slides.Vba----------------
  [DNTypeName('Aspose.Slides.Vba.IVbaModuleCollection')]
  DNIVbaModuleCollection = interface(DDN.mscorlib.DNICollection)
  ['{B1368DF3-F881-48B2-BDDD-30FA70AD4781}']
  { getters & setters } 

    function get_Item(index: Int32): DNIVbaModule;

  { methods } 

    function AddEmptyModule(name: string): DNIVbaModule;
    procedure Remove(value: DNIVbaModule);

  { propertys } 

    property Item[index: Int32]: DNIVbaModule read get_Item; default;
  end;

  //-------------namespace: Aspose.Slides.Vba----------------
  [DNTypeName('Aspose.Slides.Vba.IVbaReferenceCollection')]
  DNIVbaReferenceCollection = interface(DDN.mscorlib.DNICollection)
  ['{89178F2E-6121-49E5-9EA7-179F437F4C80}']
  { getters & setters } 

    function get_Item(index: Int32): DNIVbaReference;

  { methods } 

    procedure Add(value: DNIVbaReference);

  { propertys } 

    property Item[index: Int32]: DNIVbaReference read get_Item; default;
  end;

  //-------------namespace: Aspose.Slides----------------
  [DNTypeName('Aspose.Slides.IGenericCloneable`1')]
  DNIGenericCloneable<T> = interface(DDN.mscorlib.DNICloneable)
  ['{D0D4221B-61A1-49E4-96BA-A2C7BDB3689E}']
  { getters & setters } 

    function get_AsICloneable: DDN.mscorlib.DNICloneable;

  { methods } 

    function CloneT: T;

  { propertys } 

    property AsICloneable: DDN.mscorlib.DNICloneable read get_AsICloneable;
  end;

  //-------------namespace: Aspose.Slides----------------
  [DNTypeName('Aspose.Slides.IShapeFrame')]
  DNIShapeFrame = interface(DDN.mscorlib.DNICloneable)
  ['{8A495BAD-AC20-4481-8C43-C53A490533E4}']
  { getters & setters } 

    function get_X: Single;
    function get_Y: Single;
    function get_Width: Single;
    function get_Height: Single;
    function get_Rotation: Single;
    function get_CenterX: Single;
    function get_CenterY: Single;
    function get_FlipH: DNNullableBool;
    function get_FlipV: DNNullableBool;
    function get_Rectangle: DDN.System.Drawing.DNRectangleF;

  { propertys } 

    property X: Single read get_X;
    property Y: Single read get_Y;
    property Width: Single read get_Width;
    property Height: Single read get_Height;
    property Rotation: Single read get_Rotation;
    property CenterX: Single read get_CenterX;
    property CenterY: Single read get_CenterY;
    property FlipH: DNNullableBool read get_FlipH;
    property FlipV: DNNullableBool read get_FlipV;
    property Rectangle: DDN.System.Drawing.DNRectangleF read get_Rectangle;
  end;

  //-------------namespace: Aspose.Slides----------------
  [DNTypeName('Aspose.Slides.ITab')]
  DNITab = interface(DDN.mscorlib.DNIComparable)
  ['{F35F4DFA-9D67-47C9-9D4D-EC9BEE3EF33E}']
  { getters & setters } 

    function get_Position: Double;
    procedure set_Position(value: Double);
    function get_Alignment: DNTabAlignment;
    procedure set_Alignment(value: DNTabAlignment);
    function get_AsIComparable: DDN.mscorlib.DNIComparable;

  { propertys } 

    property Position: Double read get_Position write set_Position;
    property Alignment: DNTabAlignment read get_Alignment write set_Alignment;
    property AsIComparable: DDN.mscorlib.DNIComparable read get_AsIComparable;
  end;

  //-------------namespace: Aspose.Slides----------------
  [DNTypeName('Aspose.Slides.ITabEffectiveData')]
  DNITabEffectiveData = interface(DDN.mscorlib.DNIComparable)
  ['{211F70BC-7F75-450F-AEA2-5B316878D75F}']
  { getters & setters } 

    function get_Position: Double;
    function get_Alignment: DNTabAlignment;
    function get_AsIComparable: DDN.mscorlib.DNIComparable;

  { propertys } 

    property Position: Double read get_Position;
    property Alignment: DNTabAlignment read get_Alignment;
    property AsIComparable: DDN.mscorlib.DNIComparable read get_AsIComparable;
  end;

  //-------------namespace: Aspose.Slides----------------
  [DNTypeName('Aspose.Slides.IImageWrapper')]
  DNIImageWrapper = interface(DDN.mscorlib.DNIDisposable)
  ['{1469C473-95A4-48E4-A158-D3BD8BF9DFA4}']
  { getters & setters } 

    function get_Image: DDN.System.Drawing.DNImage;
    function get_Size: DDN.System.Drawing.DNSize;
    function get_AsIDisposable: DDN.mscorlib.DNIDisposable;

  { methods } 

    procedure Save(fileName: string); overload;
    procedure Save(stream: DDN.mscorlib.DNStream; imageFormat: DNPPImageFormat); overload;
    procedure Save(fileName: string; imageFormat: DNPPImageFormat); overload;

  { propertys } 

    property Image: DDN.System.Drawing.DNImage read get_Image;
    property Size: DDN.System.Drawing.DNSize read get_Size;
    property AsIDisposable: DDN.mscorlib.DNIDisposable read get_AsIDisposable;
  end;

  //-------------namespace: Aspose.Slides----------------
  [DNTypeName('Aspose.Slides.IPresentation')]
  DNIPresentation = interface(DDN.mscorlib.DNIDisposable)
  ['{35314620-7834-4794-A544-E437789339C8}']
  { getters & setters } 

    function get_CurrentDateTime: DDN.mscorlib.DNDateTime;
    procedure set_CurrentDateTime(value: DDN.mscorlib.DNDateTime);
    function get_HeaderFooterManager: DNIPresentationHeaderFooterManager;
    function get_ProtectionManager: DNIProtectionManager;
    function get_Slides: DNISlideCollection;
    function get_Sections: DNISectionCollection;
    function get_SlideSize: DNISlideSize;
    function get_NotesSize: DNINotesSize;
    function get_LayoutSlides: DNIGlobalLayoutSlideCollection;
    function get_Masters: DNIMasterSlideCollection;
    function get_MasterNotesSlideManager: DNIMasterNotesSlideManager;
    function get_MasterHandoutSlideManager: DNIMasterHandoutSlideManager;
    function get_FontsManager: DNIFontsManager;
    function get_DefaultTextStyle: DNITextStyle;
    function get_CommentAuthors: DNICommentAuthorCollection;
    function get_DocumentProperties: DNIDocumentProperties;
    function get_Images: DNIImageCollection;
    function get_Audios: DNIAudioCollection;
    function get_Videos: DNIVideoCollection;
    function get_CustomData: DNICustomData;
    function get_VbaProject: DNIVbaProject;
    procedure set_VbaProject(value: DNIVbaProject);
    function get_SourceFormat: DNSourceFormat;
    function get_MasterTheme: DNIMasterTheme;
    function get_HyperlinkQueries: DNIHyperlinkQueries;
    function get_ViewProperties: DNIViewProperties;
    function get_FirstSlideNumber: Int32;
    procedure set_FirstSlideNumber(value: Int32);
    function get_AllCustomXmlParts: TArray<DNICustomXmlPart>;
    function get_DigitalSignatures: DNIDigitalSignatureCollection;
    function get_AsIDisposable: DDN.mscorlib.DNIDisposable;
    function get_AsIPresentationComponent: DNIPresentationComponent;

  { methods } 

    procedure Save(fname: string; format: DNSaveFormat); overload;
    procedure Save(stream: DDN.mscorlib.DNStream; format: DNSaveFormat); overload;
    procedure Save(fname: string; format: DNSaveFormat; options: DNISaveOptions); overload;
    procedure Save(stream: DDN.mscorlib.DNStream; format: DNSaveFormat; options: DNISaveOptions); overload;
    procedure Save(fname: string; slides: TArray<Int32>; format: DNSaveFormat); overload;
    procedure Save(fname: string; slides: TArray<Int32>; format: DNSaveFormat; options: DNISaveOptions); overload;
    procedure Save(stream: DDN.mscorlib.DNStream; slides: TArray<Int32>; format: DNSaveFormat); overload;
    procedure Save(stream: DDN.mscorlib.DNStream; slides: TArray<Int32>; format: DNSaveFormat; options: DNISaveOptions); overload;
    procedure Save(options: DNIXamlOptions); overload;
    function GetThumbnails(notesCommentsLayouting: DNINotesCommentsLayoutingOptions): TArray<DDN.System.Drawing.DNBitmap>; overload;
    function GetThumbnails(notesCommentsLayouting: DNINotesCommentsLayoutingOptions; slides: TArray<Int32>): TArray<DDN.System.Drawing.DNBitmap>; overload;
    function GetThumbnails(notesCommentsLayouting: DNINotesCommentsLayoutingOptions; scaleX: Single; scaleY: Single): TArray<DDN.System.Drawing.DNBitmap>; overload;
    function GetThumbnails(notesCommentsLayouting: DNINotesCommentsLayoutingOptions; slides: TArray<Int32>; scaleX: Single; scaleY: Single): TArray<DDN.System.Drawing.DNBitmap>; overload;
    function GetThumbnails(notesCommentsLayouting: DNINotesCommentsLayoutingOptions; imageSize: DDN.System.Drawing.DNSize): TArray<DDN.System.Drawing.DNBitmap>; overload;
    function GetThumbnails(notesCommentsLayouting: DNINotesCommentsLayoutingOptions; slides: TArray<Int32>; imageSize: DDN.System.Drawing.DNSize): TArray<DDN.System.Drawing.DNBitmap>; overload;
    function GetThumbnails(options: DNIRenderingOptions): TArray<DDN.System.Drawing.DNBitmap>; overload;
    function GetThumbnails(options: DNIRenderingOptions; slides: TArray<Int32>): TArray<DDN.System.Drawing.DNBitmap>; overload;
    function GetThumbnails(options: DNIRenderingOptions; scaleX: Single; scaleY: Single): TArray<DDN.System.Drawing.DNBitmap>; overload;
    function GetThumbnails(options: DNIRenderingOptions; slides: TArray<Int32>; scaleX: Single; scaleY: Single): TArray<DDN.System.Drawing.DNBitmap>; overload;
    function GetThumbnails(options: DNIRenderingOptions; imageSize: DDN.System.Drawing.DNSize): TArray<DDN.System.Drawing.DNBitmap>; overload;
    function GetThumbnails(options: DNIRenderingOptions; slides: TArray<Int32>; imageSize: DDN.System.Drawing.DNSize): TArray<DDN.System.Drawing.DNBitmap>; overload;
    function GetSlideById(id: UInt32): DNIBaseSlide;
    procedure Print; overload;
    procedure Print(printerSettings: DDN.System.Drawing.DNPrinterSettings); overload;
    procedure Print(printerName: string); overload;
    procedure Print(printerSettings: DDN.System.Drawing.DNPrinterSettings; presName: string); overload;
    procedure JoinPortionsWithSameFormatting;

  { propertys } 

    property CurrentDateTime: DDN.mscorlib.DNDateTime read get_CurrentDateTime write set_CurrentDateTime;
    property HeaderFooterManager: DNIPresentationHeaderFooterManager read get_HeaderFooterManager;
    property ProtectionManager: DNIProtectionManager read get_ProtectionManager;
    property Slides: DNISlideCollection read get_Slides;
    property Sections: DNISectionCollection read get_Sections;
    property SlideSize: DNISlideSize read get_SlideSize;
    property NotesSize: DNINotesSize read get_NotesSize;
    property LayoutSlides: DNIGlobalLayoutSlideCollection read get_LayoutSlides;
    property Masters: DNIMasterSlideCollection read get_Masters;
    property MasterNotesSlideManager: DNIMasterNotesSlideManager read get_MasterNotesSlideManager;
    property MasterHandoutSlideManager: DNIMasterHandoutSlideManager read get_MasterHandoutSlideManager;
    property FontsManager: DNIFontsManager read get_FontsManager;
    property DefaultTextStyle: DNITextStyle read get_DefaultTextStyle;
    property CommentAuthors: DNICommentAuthorCollection read get_CommentAuthors;
    property DocumentProperties: DNIDocumentProperties read get_DocumentProperties;
    property Images: DNIImageCollection read get_Images;
    property Audios: DNIAudioCollection read get_Audios;
    property Videos: DNIVideoCollection read get_Videos;
    property CustomData: DNICustomData read get_CustomData;
    property VbaProject: DNIVbaProject read get_VbaProject write set_VbaProject;
    property SourceFormat: DNSourceFormat read get_SourceFormat;
    property MasterTheme: DNIMasterTheme read get_MasterTheme;
    property HyperlinkQueries: DNIHyperlinkQueries read get_HyperlinkQueries;
    property ViewProperties: DNIViewProperties read get_ViewProperties;
    property FirstSlideNumber: Int32 read get_FirstSlideNumber write set_FirstSlideNumber;
    property AllCustomXmlParts: TArray<DNICustomXmlPart> read get_AllCustomXmlParts;
    property DigitalSignatures: DNIDigitalSignatureCollection read get_DigitalSignatures;
    property AsIDisposable: DDN.mscorlib.DNIDisposable read get_AsIDisposable;
    property AsIPresentationComponent: DNIPresentationComponent read get_AsIPresentationComponent;
  end;

  //-------------namespace: Aspose.Slides----------------
  [DNTypeName('Aspose.Slides.IStreamWrapper')]
  DNIStreamWrapper = interface(DDN.mscorlib.DNIDisposable)
  ['{774C0DFE-E38C-4D3C-8EF1-0C67EE1EF214}']
  { getters & setters } 

    function get_Stream: DDN.mscorlib.DNStream;
    function get_CanRead: Boolean;
    function get_CanSeek: Boolean;
    function get_CanWrite: Boolean;
    function get_Length: Int64;
    function get_Position: Int64;
    function get_AsIDisposable: DDN.mscorlib.DNIDisposable;

  { methods } 

    procedure Close;
    procedure Flush;
    procedure Read(buffer: TArray<Byte>; offset: Int32; count: Int32);
    function ReadByte: Int32;
    function Seek(offset: Int64; origin: DDN.mscorlib.DNSeekOrigin): Int64;
    procedure Write(buffer: TArray<Byte>; offset: Int32; count: Int32);
    procedure WriteByte(value: Byte);

  { propertys } 

    property Stream: DDN.mscorlib.DNStream read get_Stream;
    property CanRead: Boolean read get_CanRead;
    property CanSeek: Boolean read get_CanSeek;
    property CanWrite: Boolean read get_CanWrite;
    property Length: Int64 read get_Length;
    property Position: Int64 read get_Position;
    property AsIDisposable: DDN.mscorlib.DNIDisposable read get_AsIDisposable;
  end;

  //-------------namespace: Aspose.Slides----------------
  DNAdjustValueClass = interface(DNObjectClass)
  ['{A26195D9-E782-52BF-B7A4-226A75F08AAD}']
  end;

  [DNTypeName('Aspose.Slides.AdjustValue')]
  DNAdjustValue = interface(DNIAdjustValue)
  ['{64CA3736-4574-37B6-ACBA-46F9C3D370ED}']
  { getters & setters } 

    function get_RawValue: Int64;
    procedure set_RawValue(value: Int64);
    function get_AngleValue: Single;
    procedure set_AngleValue(value: Single);
    function get_Name: string;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property RawValue: Int64 read get_RawValue write set_RawValue;
    property AngleValue: Single read get_AngleValue write set_AngleValue;
    property Name: string read get_Name;
  end;

  TDNAdjustValue = class(TDNGenericImport<DNAdjustValueClass, DNAdjustValue>) end;

  //-------------namespace: Aspose.Slides----------------
  DNAdjustValueCollectionClass = interface(DNObjectClass)
  ['{0EE3A7EB-C155-5BD0-B0FF-FD97898B3C5F}']
  end;

  [DNTypeName('Aspose.Slides.AdjustValueCollection')]
  DNAdjustValueCollection = interface(DDN.mscorlib.DNICollection)
  ['{FB3DB5BA-0C7D-3CBA-9025-E519BBC0A85E}']
  { getters & setters } 

    function get_Count: Int32;
    function get_IsSynchronized: Boolean;
    function get_SyncRoot: DDN.mscorlib.DNObject;

  { methods } 

    procedure CopyTo(&array: DDN.mscorlib.DNArray; index: Int32);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Count: Int32 read get_Count;
    property IsSynchronized: Boolean read get_IsSynchronized;
    property SyncRoot: DDN.mscorlib.DNObject read get_SyncRoot;
  end;

  TDNAdjustValueCollection = class(TDNGenericImport<DNAdjustValueCollectionClass, DNAdjustValueCollection>) end;

  //-------------namespace: Aspose.Slides.Animation----------------
  DNAnimationTimeLineClass = interface(DDN.mscorlib.DNObjectClass)
  ['{28736BC0-FD72-5229-A44D-E39DA16980F1}']
  end;

  [DNTypeName('Aspose.Slides.Animation.AnimationTimeLine')]
  DNAnimationTimeLine = interface(DDN.mscorlib.DNObject)
  ['{240FBC72-C65D-3C7D-99D6-1BBE2ACC8884}']
  { getters & setters } 

    function get_InteractiveSequences: DNISequenceCollection;
    function get_MainSequence: DNISequence;
    function get_TextAnimationCollection: DNITextAnimationCollection;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property InteractiveSequences: DNISequenceCollection read get_InteractiveSequences;
    property MainSequence: DNISequence read get_MainSequence;
    property TextAnimationCollection: DNITextAnimationCollection read get_TextAnimationCollection;
  end;

  TDNAnimationTimeLine = class(TDNGenericImport<DNAnimationTimeLineClass, DNAnimationTimeLine>) end;

  //-------------namespace: Aspose.Slides.Animation----------------
  DNBehaviorClass = interface(DDN.mscorlib.DNObjectClass)
  ['{6277071D-8AF8-5924-AB64-C120D291F876}']
  end;

  [DNTypeName('Aspose.Slides.Animation.Behavior')]
  DNBehavior = interface(DDN.mscorlib.DNObject)
  ['{5C788F14-505F-3470-B0B4-82AF23664577}']
  { getters & setters } 

    function get_Accumulate: DNNullableBool;
    procedure set_Accumulate(value: DNNullableBool);
    function get_Additive: DNBehaviorAdditiveType;
    procedure set_Additive(value: DNBehaviorAdditiveType);
    function get_Properties: DNIBehaviorPropertyCollection;
    function get_Timing: DNITiming;
    procedure set_Timing(value: DNITiming);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Accumulate: DNNullableBool read get_Accumulate write set_Accumulate;
    property Additive: DNBehaviorAdditiveType read get_Additive write set_Additive;
    property Properties: DNIBehaviorPropertyCollection read get_Properties;
    property Timing: DNITiming read get_Timing write set_Timing;
  end;

  TDNBehavior = class(TDNGenericImport<DNBehaviorClass, DNBehavior>) end;

  //-------------namespace: Aspose.Slides.Animation----------------
  DNColorEffectClass = interface(DNBehaviorClass)
  ['{912B68AF-A382-505E-984C-008090060A58}']
  { constructors } 

    {class} function init: DNColorEffect;

  end;

  [DNTypeName('Aspose.Slides.Animation.ColorEffect')]
  DNColorEffect = interface(DNBehavior)
  ['{252D8725-1F81-4507-B866-5EC798290221}']
  { getters & setters } 

    function get_From: DNIColorFormat;
    procedure set_From(value: DNIColorFormat);
    function get_To: DNIColorFormat;
    procedure set_To(value: DNIColorFormat);
    function get_By: DNIColorOffset;
    procedure set_By(value: DNIColorOffset);
    function get_ColorSpace: DNColorSpace;
    procedure set_ColorSpace(value: DNColorSpace);
    function get_Direction: DNColorDirection;
    procedure set_Direction(value: DNColorDirection);
    function get_Accumulate: DNNullableBool;
    procedure set_Accumulate(value: DNNullableBool);
    function get_Additive: DNBehaviorAdditiveType;
    procedure set_Additive(value: DNBehaviorAdditiveType);
    function get_Properties: DNIBehaviorPropertyCollection;
    function get_Timing: DNITiming;
    procedure set_Timing(value: DNITiming);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property From: DNIColorFormat read get_From write set_From;
    property &To: DNIColorFormat read get_To write set_To;
    property By: DNIColorOffset read get_By write set_By;
    property ColorSpace: DNColorSpace read get_ColorSpace write set_ColorSpace;
    property Direction: DNColorDirection read get_Direction write set_Direction;
    property Accumulate: DNNullableBool read get_Accumulate write set_Accumulate;
    property Additive: DNBehaviorAdditiveType read get_Additive write set_Additive;
    property Properties: DNIBehaviorPropertyCollection read get_Properties;
    property Timing: DNITiming read get_Timing write set_Timing;
  end;

  TDNColorEffect = class(TDNGenericImport<DNColorEffectClass, DNColorEffect>) end;

  //-------------namespace: Aspose.Slides.Animation----------------
  DNCommandEffectClass = interface(DNBehaviorClass)
  ['{1B905149-6BA8-564F-8EC9-B081F881D838}']
  { constructors } 

    {class} function init: DNCommandEffect;

  end;

  [DNTypeName('Aspose.Slides.Animation.CommandEffect')]
  DNCommandEffect = interface(DNBehavior)
  ['{E1E881A2-1C86-4BA4-B201-5145DC1F7D05}']
  { getters & setters } 

    function get_Type: DNCommandEffectType;
    procedure set_Type(value: DNCommandEffectType);
    function get_CommandString: string;
    procedure set_CommandString(value: string);
    function get_ShapeTarget: DNIShape;
    procedure set_ShapeTarget(value: DNIShape);
    function get_Accumulate: DNNullableBool;
    procedure set_Accumulate(value: DNNullableBool);
    function get_Additive: DNBehaviorAdditiveType;
    procedure set_Additive(value: DNBehaviorAdditiveType);
    function get_Properties: DNIBehaviorPropertyCollection;
    function get_Timing: DNITiming;
    procedure set_Timing(value: DNITiming);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property &Type: DNCommandEffectType read get_Type write set_Type;
    property CommandString: string read get_CommandString write set_CommandString;
    property ShapeTarget: DNIShape read get_ShapeTarget write set_ShapeTarget;
    property Accumulate: DNNullableBool read get_Accumulate write set_Accumulate;
    property Additive: DNBehaviorAdditiveType read get_Additive write set_Additive;
    property Properties: DNIBehaviorPropertyCollection read get_Properties;
    property Timing: DNITiming read get_Timing write set_Timing;
  end;

  TDNCommandEffect = class(TDNGenericImport<DNCommandEffectClass, DNCommandEffect>) end;

  //-------------namespace: Aspose.Slides.Animation----------------
  DNFilterEffectClass = interface(DNBehaviorClass)
  ['{140B7064-8388-5486-AE4A-F7A1A84E2D99}']
  { constructors } 

    {class} function init: DNFilterEffect;

  end;

  [DNTypeName('Aspose.Slides.Animation.FilterEffect')]
  DNFilterEffect = interface(DNBehavior)
  ['{DD102C99-F6E5-440B-A9E9-978BBAFF6724}']
  { getters & setters } 

    function get_Reveal: DNFilterEffectRevealType;
    procedure set_Reveal(value: DNFilterEffectRevealType);
    function get_Type: DNFilterEffectType;
    procedure set_Type(value: DNFilterEffectType);
    function get_Subtype: DNFilterEffectSubtype;
    procedure set_Subtype(value: DNFilterEffectSubtype);
    function get_Accumulate: DNNullableBool;
    procedure set_Accumulate(value: DNNullableBool);
    function get_Additive: DNBehaviorAdditiveType;
    procedure set_Additive(value: DNBehaviorAdditiveType);
    function get_Properties: DNIBehaviorPropertyCollection;
    function get_Timing: DNITiming;
    procedure set_Timing(value: DNITiming);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Reveal: DNFilterEffectRevealType read get_Reveal write set_Reveal;
    property &Type: DNFilterEffectType read get_Type write set_Type;
    property Subtype: DNFilterEffectSubtype read get_Subtype write set_Subtype;
    property Accumulate: DNNullableBool read get_Accumulate write set_Accumulate;
    property Additive: DNBehaviorAdditiveType read get_Additive write set_Additive;
    property Properties: DNIBehaviorPropertyCollection read get_Properties;
    property Timing: DNITiming read get_Timing write set_Timing;
  end;

  TDNFilterEffect = class(TDNGenericImport<DNFilterEffectClass, DNFilterEffect>) end;

  //-------------namespace: Aspose.Slides.Animation----------------
  DNMotionEffectClass = interface(DNBehaviorClass)
  ['{02B7BA0E-12ED-56B9-A6D8-71A6BA976092}']
  { constructors } 

    {class} function init: DNMotionEffect;

  end;

  [DNTypeName('Aspose.Slides.Animation.MotionEffect')]
  DNMotionEffect = interface(DNBehavior)
  ['{3F39AAD1-65AD-4B2D-8584-E836994C7389}']
  { getters & setters } 

    function get_From: DDN.System.Drawing.DNPointF;
    procedure set_From(value: DDN.System.Drawing.DNPointF);
    function get_To: DDN.System.Drawing.DNPointF;
    procedure set_To(value: DDN.System.Drawing.DNPointF);
    function get_By: DDN.System.Drawing.DNPointF;
    procedure set_By(value: DDN.System.Drawing.DNPointF);
    function get_RotationCenter: DDN.System.Drawing.DNPointF;
    procedure set_RotationCenter(value: DDN.System.Drawing.DNPointF);
    function get_Origin: DNMotionOriginType;
    procedure set_Origin(value: DNMotionOriginType);
    function get_Path: DNIMotionPath;
    procedure set_Path(value: DNIMotionPath);
    function get_PathEditMode: DNMotionPathEditMode;
    procedure set_PathEditMode(value: DNMotionPathEditMode);
    function get_Angle: Single;
    procedure set_Angle(value: Single);
    function get_Accumulate: DNNullableBool;
    procedure set_Accumulate(value: DNNullableBool);
    function get_Additive: DNBehaviorAdditiveType;
    procedure set_Additive(value: DNBehaviorAdditiveType);
    function get_Properties: DNIBehaviorPropertyCollection;
    function get_Timing: DNITiming;
    procedure set_Timing(value: DNITiming);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property From: DDN.System.Drawing.DNPointF read get_From write set_From;
    property &To: DDN.System.Drawing.DNPointF read get_To write set_To;
    property By: DDN.System.Drawing.DNPointF read get_By write set_By;
    property RotationCenter: DDN.System.Drawing.DNPointF read get_RotationCenter write set_RotationCenter;
    property Origin: DNMotionOriginType read get_Origin write set_Origin;
    property Path: DNIMotionPath read get_Path write set_Path;
    property PathEditMode: DNMotionPathEditMode read get_PathEditMode write set_PathEditMode;
    property Angle: Single read get_Angle write set_Angle;
    property Accumulate: DNNullableBool read get_Accumulate write set_Accumulate;
    property Additive: DNBehaviorAdditiveType read get_Additive write set_Additive;
    property Properties: DNIBehaviorPropertyCollection read get_Properties;
    property Timing: DNITiming read get_Timing write set_Timing;
  end;

  TDNMotionEffect = class(TDNGenericImport<DNMotionEffectClass, DNMotionEffect>) end;

  //-------------namespace: Aspose.Slides.Animation----------------
  DNPropertyEffectClass = interface(DNBehaviorClass)
  ['{E1D24442-9E76-5969-BD44-B658B95F7F87}']
  { constructors } 

    {class} function init: DNPropertyEffect;

  end;

  [DNTypeName('Aspose.Slides.Animation.PropertyEffect')]
  DNPropertyEffect = interface(DNBehavior)
  ['{FF69F8CD-F5E3-4B0C-9012-653F93890460}']
  { getters & setters } 

    function get_From: string;
    procedure set_From(value: string);
    function get_To: string;
    procedure set_To(value: string);
    function get_By: string;
    procedure set_By(value: string);
    function get_ValueType: DNPropertyValueType;
    procedure set_ValueType(value: DNPropertyValueType);
    function get_CalcMode: DNPropertyCalcModeType;
    procedure set_CalcMode(value: DNPropertyCalcModeType);
    function get_Points: DNIPointCollection;
    procedure set_Points(value: DNIPointCollection);
    function get_Accumulate: DNNullableBool;
    procedure set_Accumulate(value: DNNullableBool);
    function get_Additive: DNBehaviorAdditiveType;
    procedure set_Additive(value: DNBehaviorAdditiveType);
    function get_Properties: DNIBehaviorPropertyCollection;
    function get_Timing: DNITiming;
    procedure set_Timing(value: DNITiming);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property From: string read get_From write set_From;
    property &To: string read get_To write set_To;
    property By: string read get_By write set_By;
    property ValueType: DNPropertyValueType read get_ValueType write set_ValueType;
    property CalcMode: DNPropertyCalcModeType read get_CalcMode write set_CalcMode;
    property Points: DNIPointCollection read get_Points write set_Points;
    property Accumulate: DNNullableBool read get_Accumulate write set_Accumulate;
    property Additive: DNBehaviorAdditiveType read get_Additive write set_Additive;
    property Properties: DNIBehaviorPropertyCollection read get_Properties;
    property Timing: DNITiming read get_Timing write set_Timing;
  end;

  TDNPropertyEffect = class(TDNGenericImport<DNPropertyEffectClass, DNPropertyEffect>) end;

  //-------------namespace: Aspose.Slides.Animation----------------
  DNRotationEffectClass = interface(DNBehaviorClass)
  ['{51F23571-F61B-5787-8527-90A256B0903A}']
  { constructors } 

    {class} function init: DNRotationEffect;

  end;

  [DNTypeName('Aspose.Slides.Animation.RotationEffect')]
  DNRotationEffect = interface(DNBehavior)
  ['{83C5425F-6F22-41A2-B8C9-95A46C00162F}']
  { getters & setters } 

    function get_From: Single;
    procedure set_From(value: Single);
    function get_To: Single;
    procedure set_To(value: Single);
    function get_By: Single;
    procedure set_By(value: Single);
    function get_Accumulate: DNNullableBool;
    procedure set_Accumulate(value: DNNullableBool);
    function get_Additive: DNBehaviorAdditiveType;
    procedure set_Additive(value: DNBehaviorAdditiveType);
    function get_Properties: DNIBehaviorPropertyCollection;
    function get_Timing: DNITiming;
    procedure set_Timing(value: DNITiming);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property From: Single read get_From write set_From;
    property &To: Single read get_To write set_To;
    property By: Single read get_By write set_By;
    property Accumulate: DNNullableBool read get_Accumulate write set_Accumulate;
    property Additive: DNBehaviorAdditiveType read get_Additive write set_Additive;
    property Properties: DNIBehaviorPropertyCollection read get_Properties;
    property Timing: DNITiming read get_Timing write set_Timing;
  end;

  TDNRotationEffect = class(TDNGenericImport<DNRotationEffectClass, DNRotationEffect>) end;

  //-------------namespace: Aspose.Slides.Animation----------------
  DNScaleEffectClass = interface(DNBehaviorClass)
  ['{9AB9B7F6-7A34-5329-97CC-5A46E397F4C9}']
  { constructors } 

    {class} function init: DNScaleEffect;

  end;

  [DNTypeName('Aspose.Slides.Animation.ScaleEffect')]
  DNScaleEffect = interface(DNBehavior)
  ['{F38C5F58-D358-4903-A1D2-6A4D7DCA9697}']
  { getters & setters } 

    function get_ZoomContent: DNNullableBool;
    procedure set_ZoomContent(value: DNNullableBool);
    function get_From: DDN.System.Drawing.DNPointF;
    procedure set_From(value: DDN.System.Drawing.DNPointF);
    function get_To: DDN.System.Drawing.DNPointF;
    procedure set_To(value: DDN.System.Drawing.DNPointF);
    function get_By: DDN.System.Drawing.DNPointF;
    procedure set_By(value: DDN.System.Drawing.DNPointF);
    function get_Accumulate: DNNullableBool;
    procedure set_Accumulate(value: DNNullableBool);
    function get_Additive: DNBehaviorAdditiveType;
    procedure set_Additive(value: DNBehaviorAdditiveType);
    function get_Properties: DNIBehaviorPropertyCollection;
    function get_Timing: DNITiming;
    procedure set_Timing(value: DNITiming);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property ZoomContent: DNNullableBool read get_ZoomContent write set_ZoomContent;
    property From: DDN.System.Drawing.DNPointF read get_From write set_From;
    property &To: DDN.System.Drawing.DNPointF read get_To write set_To;
    property By: DDN.System.Drawing.DNPointF read get_By write set_By;
    property Accumulate: DNNullableBool read get_Accumulate write set_Accumulate;
    property Additive: DNBehaviorAdditiveType read get_Additive write set_Additive;
    property Properties: DNIBehaviorPropertyCollection read get_Properties;
    property Timing: DNITiming read get_Timing write set_Timing;
  end;

  TDNScaleEffect = class(TDNGenericImport<DNScaleEffectClass, DNScaleEffect>) end;

  //-------------namespace: Aspose.Slides.Animation----------------
  DNSetEffectClass = interface(DNBehaviorClass)
  ['{53765956-3977-5A63-9C9E-97246989A74B}']
  { constructors } 

    {class} function init: DNSetEffect;

  end;

  [DNTypeName('Aspose.Slides.Animation.SetEffect')]
  DNSetEffect = interface(DNBehavior)
  ['{CBBFF247-5BA0-46FF-A413-76B35FFFBCD8}']
  { getters & setters } 

    function get_To: DDN.mscorlib.DNObject;
    procedure set_To(value: DDN.mscorlib.DNObject);
    function get_Accumulate: DNNullableBool;
    procedure set_Accumulate(value: DNNullableBool);
    function get_Additive: DNBehaviorAdditiveType;
    procedure set_Additive(value: DNBehaviorAdditiveType);
    function get_Properties: DNIBehaviorPropertyCollection;
    function get_Timing: DNITiming;
    procedure set_Timing(value: DNITiming);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property &To: DDN.mscorlib.DNObject read get_To write set_To;
    property Accumulate: DNNullableBool read get_Accumulate write set_Accumulate;
    property Additive: DNBehaviorAdditiveType read get_Additive write set_Additive;
    property Properties: DNIBehaviorPropertyCollection read get_Properties;
    property Timing: DNITiming read get_Timing write set_Timing;
  end;

  TDNSetEffect = class(TDNGenericImport<DNSetEffectClass, DNSetEffect>) end;

  //-------------namespace: Aspose.Slides.Animation----------------
  DNBehaviorCollectionClass = interface(DNObjectClass)
  ['{8C2E4F41-0880-5C78-947E-7009BDE9078B}']
  end;

  [DNTypeName('Aspose.Slides.Animation.BehaviorCollection')]
  DNBehaviorCollection = interface(DDN.mscorlib.DNIEnumerable)
  ['{B8EB4E4E-0EFF-3B9C-8A93-B0CE6A322119}']
  { getters & setters } 

    function get_Count: Int32;
    function get_IsReadOnly: Boolean;

  { methods } 

    function IndexOf(item: DNIBehavior): Int32;
    procedure Insert(index: Int32; item: DNIBehavior);
    procedure CopyTo(&array: TArray<DNIBehavior>; arrayIndex: Int32);
    procedure RemoveAt(index: Int32);
    function &Contains(item: DNIBehavior): Boolean;
    function GetEnumerator: DDN.mscorlib.DNIEnumerator<DNIBehavior>;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Count: Int32 read get_Count;
    property IsReadOnly: Boolean read get_IsReadOnly;
  end;

  TDNBehaviorCollection = class(TDNGenericImport<DNBehaviorCollectionClass, DNBehaviorCollection>) end;

  //-------------namespace: Aspose.Slides.Animation----------------
  DNBehaviorFactoryClass = interface(DNObjectClass)
  ['{EB052847-E4CD-569E-8C8B-6BE2726BB5F8}']
  { constructors } 

    {class} function init: DNBehaviorFactory;

  end;

  [DNTypeName('Aspose.Slides.Animation.BehaviorFactory')]
  DNBehaviorFactory = interface(DNIBehaviorFactory)
  ['{ECF922F5-8512-493E-AF56-750D2E443E2D}']
  { methods } 

    function CreateColorEffect: DNIColorEffect;
    function CreateCommandEffect: DNICommandEffect;
    function CreateFilterEffect: DNIFilterEffect;
    function CreateMotionEffect: DNIMotionEffect;
    function CreatePropertyEffect: DNIPropertyEffect;
    function CreateRotationEffect: DNIRotationEffect;
    function CreateScaleEffect: DNIScaleEffect;
    function CreateSetEffect: DNISetEffect;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNBehaviorFactory = class(TDNGenericImport<DNBehaviorFactoryClass, DNBehaviorFactory>) end;

  //-------------namespace: Aspose.Slides.Animation----------------
  DNBehaviorPropertyClass = interface(DNObjectClass)
  ['{D3C2854C-1982-5D45-92F9-C5E1308F4D58}']
  { static getter & setter } 

    {class} function get_PptX: DNBehaviorProperty;
    {class} function get_PptY: DNBehaviorProperty;
    {class} function get_PptW: DNBehaviorProperty;
    {class} function get_PptH: DNBehaviorProperty;
    {class} function get_PptC: DNBehaviorProperty;
    {class} function get_PptR: DNBehaviorProperty;
    {class} function get_XShear: DNBehaviorProperty;
    {class} function get_YShear: DNBehaviorProperty;
    {class} function get_Image: DNBehaviorProperty;
    {class} function get_ScaleX: DNBehaviorProperty;
    {class} function get_ScaleY: DNBehaviorProperty;
    {class} function get_R: DNBehaviorProperty;
    {class} function get_FillColor: DNBehaviorProperty;
    {class} function get_StyleOpacity: DNBehaviorProperty;
    {class} function get_StyleRotation: DNBehaviorProperty;
    {class} function get_StyleVisibility: DNBehaviorProperty;
    {class} function get_StyleColor: DNBehaviorProperty;
    {class} function get_StyleFontSize: DNBehaviorProperty;
    {class} function get_StyleFontWeight: DNBehaviorProperty;
    {class} function get_StyleFontStyle: DNBehaviorProperty;
    {class} function get_StyleFontFamily: DNBehaviorProperty;
    {class} function get_StyleTextEffectEmboss: DNBehaviorProperty;
    {class} function get_StyleTextShadow: DNBehaviorProperty;
    {class} function get_StyleTextTransform: DNBehaviorProperty;
    {class} function get_StyleTextDecorationUnderline: DNBehaviorProperty;
    {class} function get_StyleTextEffectOutline: DNBehaviorProperty;
    {class} function get_StyleTextDecorationLineThrough: DNBehaviorProperty;
    {class} function get_StyleSRotation: DNBehaviorProperty;
    {class} function get_ImageDataCropTop: DNBehaviorProperty;
    {class} function get_ImageDataCropBottom: DNBehaviorProperty;
    {class} function get_ImageDataCropLeft: DNBehaviorProperty;
    {class} function get_ImageDataCropRight: DNBehaviorProperty;
    {class} function get_ImageDataGain: DNBehaviorProperty;
    {class} function get_ImageDataBlacklevel: DNBehaviorProperty;
    {class} function get_ImageDataGamma: DNBehaviorProperty;
    {class} function get_ImageDataGrayscale: DNBehaviorProperty;
    {class} function get_ImageDataChromakey: DNBehaviorProperty;
    {class} function get_FillOn: DNBehaviorProperty;
    {class} function get_FillType: DNBehaviorProperty;
    {class} function get_Fill_Color: DNBehaviorProperty;
    {class} function get_FillOpacity: DNBehaviorProperty;
    {class} function get_FillColor2: DNBehaviorProperty;
    {class} function get_FillMethod: DNBehaviorProperty;
    {class} function get_FillOpacity2: DNBehaviorProperty;
    {class} function get_FillAngle: DNBehaviorProperty;
    {class} function get_FillFocus: DNBehaviorProperty;
    {class} function get_FillFocusPositionX: DNBehaviorProperty;
    {class} function get_FillFocusPositionY: DNBehaviorProperty;
    {class} function get_FillFocusSizeX: DNBehaviorProperty;
    {class} function get_FillFocusSizeY: DNBehaviorProperty;
    {class} function get_StrokeOn: DNBehaviorProperty;
    {class} function get_StrokeColor: DNBehaviorProperty;
    {class} function get_StrokeWeight: DNBehaviorProperty;
    {class} function get_StrokeOpacity: DNBehaviorProperty;
    {class} function get_StrokeLineStyle: DNBehaviorProperty;
    {class} function get_StrokeDashStyle: DNBehaviorProperty;
    {class} function get_StrokeFillType: DNBehaviorProperty;
    {class} function get_StrokeSrc: DNBehaviorProperty;
    {class} function get_StrokeColor2: DNBehaviorProperty;
    {class} function get_StrokeImageSizeX: DNBehaviorProperty;
    {class} function get_StrokeImageSizeY: DNBehaviorProperty;
    {class} function get_StrokeStartArrow: DNBehaviorProperty;
    {class} function get_StrokeEndArrow: DNBehaviorProperty;
    {class} function get_StrokeStartArrowWidth: DNBehaviorProperty;
    {class} function get_StrokeStartArrowLength: DNBehaviorProperty;
    {class} function get_StrokeEndArrowWidth: DNBehaviorProperty;
    {class} function get_StrokeEndArrowLength: DNBehaviorProperty;
    {class} function get_ShadowOn: DNBehaviorProperty;
    {class} function get_ShadowType: DNBehaviorProperty;
    {class} function get_ShadowColor: DNBehaviorProperty;
    {class} function get_ShadowColor2: DNBehaviorProperty;
    {class} function get_ShadowOpacity: DNBehaviorProperty;
    {class} function get_ShadowOffsetX: DNBehaviorProperty;
    {class} function get_ShadowOffsetY: DNBehaviorProperty;
    {class} function get_ShadowOffset2X: DNBehaviorProperty;
    {class} function get_ShadowOffset2Y: DNBehaviorProperty;
    {class} function get_ShadowOriginX: DNBehaviorProperty;
    {class} function get_ShadowOriginY: DNBehaviorProperty;
    {class} function get_ShadowMatrixXtoX: DNBehaviorProperty;
    {class} function get_ShadowMatrixXtoY: DNBehaviorProperty;
    {class} function get_ShadowMatrixYtoX: DNBehaviorProperty;
    {class} function get_ShadowMatrixYtoY: DNBehaviorProperty;
    {class} function get_ShadowMatrixPerspectiveX: DNBehaviorProperty;
    {class} function get_ShadowMatrixPerspectiveY: DNBehaviorProperty;
    {class} function get_SkewOn: DNBehaviorProperty;
    {class} function get_SkewOffsetX: DNBehaviorProperty;
    {class} function get_SkewOffsetY: DNBehaviorProperty;
    {class} function get_SkewOriginX: DNBehaviorProperty;
    {class} function get_SkewOriginY: DNBehaviorProperty;
    {class} function get_SkewMatrixXtoX: DNBehaviorProperty;
    {class} function get_SkewMatrixXtoY: DNBehaviorProperty;
    {class} function get_SkewMatrixYtoX: DNBehaviorProperty;
    {class} function get_SkewMatrixYtoY: DNBehaviorProperty;
    {class} function get_SkewMatrixPerspectiveX: DNBehaviorProperty;
    {class} function get_SkewMatrixPerspectiveY: DNBehaviorProperty;
    {class} function get_ExtrusionOn: DNBehaviorProperty;
    {class} function get_ExtrusionType: DNBehaviorProperty;
    {class} function get_ExtrusionRender: DNBehaviorProperty;
    {class} function get_ExtrusionViewPointOriginX: DNBehaviorProperty;
    {class} function get_ExtrusionViewPointOriginY: DNBehaviorProperty;
    {class} function get_ExtrusionViewPointX: DNBehaviorProperty;
    {class} function get_ExtrusionViewPointY: DNBehaviorProperty;
    {class} function get_ExtrusionViewPointZ: DNBehaviorProperty;
    {class} function get_ExtrusionPlane: DNBehaviorProperty;
    {class} function get_ExtrusionSkewAngle: DNBehaviorProperty;
    {class} function get_ExtrusionSkewAmt: DNBehaviorProperty;
    {class} function get_ExtrusionBackDepth: DNBehaviorProperty;
    {class} function get_ExtrusionForeDepth: DNBehaviorProperty;
    {class} function get_ExtrusionOrientationX: DNBehaviorProperty;
    {class} function get_ExtrusionOrientationY: DNBehaviorProperty;
    {class} function get_ExtrusionOrientationZ: DNBehaviorProperty;
    {class} function get_ExtrusionOrientationAngle: DNBehaviorProperty;
    {class} function get_ExtrusionColor: DNBehaviorProperty;
    {class} function get_ExtrusionRotationAngleX: DNBehaviorProperty;
    {class} function get_ExtrusionRotationAngleY: DNBehaviorProperty;
    {class} function get_ExtrusionLockRotationCenter: DNBehaviorProperty;
    {class} function get_ExtrusionAutoRotationCenter: DNBehaviorProperty;
    {class} function get_ExtrusionRotationCenterX: DNBehaviorProperty;
    {class} function get_ExtrusionRotationCenterY: DNBehaviorProperty;
    {class} function get_ExtrusionRotationCenterZ: DNBehaviorProperty;
    {class} function get_ExtrusionColorMode: DNBehaviorProperty;

  { static methods } 

    {class} function GetOrCreateByValue(propertyValue: string): DNBehaviorProperty;

  { static propertys } 

    {class} property PptX: DNBehaviorProperty read get_PptX;
    {class} property PptY: DNBehaviorProperty read get_PptY;
    {class} property PptW: DNBehaviorProperty read get_PptW;
    {class} property PptH: DNBehaviorProperty read get_PptH;
    {class} property PptC: DNBehaviorProperty read get_PptC;
    {class} property PptR: DNBehaviorProperty read get_PptR;
    {class} property XShear: DNBehaviorProperty read get_XShear;
    {class} property YShear: DNBehaviorProperty read get_YShear;
    {class} property Image: DNBehaviorProperty read get_Image;
    {class} property ScaleX: DNBehaviorProperty read get_ScaleX;
    {class} property ScaleY: DNBehaviorProperty read get_ScaleY;
    {class} property R: DNBehaviorProperty read get_R;
    {class} property FillColor: DNBehaviorProperty read get_FillColor;
    {class} property StyleOpacity: DNBehaviorProperty read get_StyleOpacity;
    {class} property StyleRotation: DNBehaviorProperty read get_StyleRotation;
    {class} property StyleVisibility: DNBehaviorProperty read get_StyleVisibility;
    {class} property StyleColor: DNBehaviorProperty read get_StyleColor;
    {class} property StyleFontSize: DNBehaviorProperty read get_StyleFontSize;
    {class} property StyleFontWeight: DNBehaviorProperty read get_StyleFontWeight;
    {class} property StyleFontStyle: DNBehaviorProperty read get_StyleFontStyle;
    {class} property StyleFontFamily: DNBehaviorProperty read get_StyleFontFamily;
    {class} property StyleTextEffectEmboss: DNBehaviorProperty read get_StyleTextEffectEmboss;
    {class} property StyleTextShadow: DNBehaviorProperty read get_StyleTextShadow;
    {class} property StyleTextTransform: DNBehaviorProperty read get_StyleTextTransform;
    {class} property StyleTextDecorationUnderline: DNBehaviorProperty read get_StyleTextDecorationUnderline;
    {class} property StyleTextEffectOutline: DNBehaviorProperty read get_StyleTextEffectOutline;
    {class} property StyleTextDecorationLineThrough: DNBehaviorProperty read get_StyleTextDecorationLineThrough;
    {class} property StyleSRotation: DNBehaviorProperty read get_StyleSRotation;
    {class} property ImageDataCropTop: DNBehaviorProperty read get_ImageDataCropTop;
    {class} property ImageDataCropBottom: DNBehaviorProperty read get_ImageDataCropBottom;
    {class} property ImageDataCropLeft: DNBehaviorProperty read get_ImageDataCropLeft;
    {class} property ImageDataCropRight: DNBehaviorProperty read get_ImageDataCropRight;
    {class} property ImageDataGain: DNBehaviorProperty read get_ImageDataGain;
    {class} property ImageDataBlacklevel: DNBehaviorProperty read get_ImageDataBlacklevel;
    {class} property ImageDataGamma: DNBehaviorProperty read get_ImageDataGamma;
    {class} property ImageDataGrayscale: DNBehaviorProperty read get_ImageDataGrayscale;
    {class} property ImageDataChromakey: DNBehaviorProperty read get_ImageDataChromakey;
    {class} property FillOn: DNBehaviorProperty read get_FillOn;
    {class} property FillType: DNBehaviorProperty read get_FillType;
    {class} property Fill_Color: DNBehaviorProperty read get_Fill_Color;
    {class} property FillOpacity: DNBehaviorProperty read get_FillOpacity;
    {class} property FillColor2: DNBehaviorProperty read get_FillColor2;
    {class} property FillMethod: DNBehaviorProperty read get_FillMethod;
    {class} property FillOpacity2: DNBehaviorProperty read get_FillOpacity2;
    {class} property FillAngle: DNBehaviorProperty read get_FillAngle;
    {class} property FillFocus: DNBehaviorProperty read get_FillFocus;
    {class} property FillFocusPositionX: DNBehaviorProperty read get_FillFocusPositionX;
    {class} property FillFocusPositionY: DNBehaviorProperty read get_FillFocusPositionY;
    {class} property FillFocusSizeX: DNBehaviorProperty read get_FillFocusSizeX;
    {class} property FillFocusSizeY: DNBehaviorProperty read get_FillFocusSizeY;
    {class} property StrokeOn: DNBehaviorProperty read get_StrokeOn;
    {class} property StrokeColor: DNBehaviorProperty read get_StrokeColor;
    {class} property StrokeWeight: DNBehaviorProperty read get_StrokeWeight;
    {class} property StrokeOpacity: DNBehaviorProperty read get_StrokeOpacity;
    {class} property StrokeLineStyle: DNBehaviorProperty read get_StrokeLineStyle;
    {class} property StrokeDashStyle: DNBehaviorProperty read get_StrokeDashStyle;
    {class} property StrokeFillType: DNBehaviorProperty read get_StrokeFillType;
    {class} property StrokeSrc: DNBehaviorProperty read get_StrokeSrc;
    {class} property StrokeColor2: DNBehaviorProperty read get_StrokeColor2;
    {class} property StrokeImageSizeX: DNBehaviorProperty read get_StrokeImageSizeX;
    {class} property StrokeImageSizeY: DNBehaviorProperty read get_StrokeImageSizeY;
    {class} property StrokeStartArrow: DNBehaviorProperty read get_StrokeStartArrow;
    {class} property StrokeEndArrow: DNBehaviorProperty read get_StrokeEndArrow;
    {class} property StrokeStartArrowWidth: DNBehaviorProperty read get_StrokeStartArrowWidth;
    {class} property StrokeStartArrowLength: DNBehaviorProperty read get_StrokeStartArrowLength;
    {class} property StrokeEndArrowWidth: DNBehaviorProperty read get_StrokeEndArrowWidth;
    {class} property StrokeEndArrowLength: DNBehaviorProperty read get_StrokeEndArrowLength;
    {class} property ShadowOn: DNBehaviorProperty read get_ShadowOn;
    {class} property ShadowType: DNBehaviorProperty read get_ShadowType;
    {class} property ShadowColor: DNBehaviorProperty read get_ShadowColor;
    {class} property ShadowColor2: DNBehaviorProperty read get_ShadowColor2;
    {class} property ShadowOpacity: DNBehaviorProperty read get_ShadowOpacity;
    {class} property ShadowOffsetX: DNBehaviorProperty read get_ShadowOffsetX;
    {class} property ShadowOffsetY: DNBehaviorProperty read get_ShadowOffsetY;
    {class} property ShadowOffset2X: DNBehaviorProperty read get_ShadowOffset2X;
    {class} property ShadowOffset2Y: DNBehaviorProperty read get_ShadowOffset2Y;
    {class} property ShadowOriginX: DNBehaviorProperty read get_ShadowOriginX;
    {class} property ShadowOriginY: DNBehaviorProperty read get_ShadowOriginY;
    {class} property ShadowMatrixXtoX: DNBehaviorProperty read get_ShadowMatrixXtoX;
    {class} property ShadowMatrixXtoY: DNBehaviorProperty read get_ShadowMatrixXtoY;
    {class} property ShadowMatrixYtoX: DNBehaviorProperty read get_ShadowMatrixYtoX;
    {class} property ShadowMatrixYtoY: DNBehaviorProperty read get_ShadowMatrixYtoY;
    {class} property ShadowMatrixPerspectiveX: DNBehaviorProperty read get_ShadowMatrixPerspectiveX;
    {class} property ShadowMatrixPerspectiveY: DNBehaviorProperty read get_ShadowMatrixPerspectiveY;
    {class} property SkewOn: DNBehaviorProperty read get_SkewOn;
    {class} property SkewOffsetX: DNBehaviorProperty read get_SkewOffsetX;
    {class} property SkewOffsetY: DNBehaviorProperty read get_SkewOffsetY;
    {class} property SkewOriginX: DNBehaviorProperty read get_SkewOriginX;
    {class} property SkewOriginY: DNBehaviorProperty read get_SkewOriginY;
    {class} property SkewMatrixXtoX: DNBehaviorProperty read get_SkewMatrixXtoX;
    {class} property SkewMatrixXtoY: DNBehaviorProperty read get_SkewMatrixXtoY;
    {class} property SkewMatrixYtoX: DNBehaviorProperty read get_SkewMatrixYtoX;
    {class} property SkewMatrixYtoY: DNBehaviorProperty read get_SkewMatrixYtoY;
    {class} property SkewMatrixPerspectiveX: DNBehaviorProperty read get_SkewMatrixPerspectiveX;
    {class} property SkewMatrixPerspectiveY: DNBehaviorProperty read get_SkewMatrixPerspectiveY;
    {class} property ExtrusionOn: DNBehaviorProperty read get_ExtrusionOn;
    {class} property ExtrusionType: DNBehaviorProperty read get_ExtrusionType;
    {class} property ExtrusionRender: DNBehaviorProperty read get_ExtrusionRender;
    {class} property ExtrusionViewPointOriginX: DNBehaviorProperty read get_ExtrusionViewPointOriginX;
    {class} property ExtrusionViewPointOriginY: DNBehaviorProperty read get_ExtrusionViewPointOriginY;
    {class} property ExtrusionViewPointX: DNBehaviorProperty read get_ExtrusionViewPointX;
    {class} property ExtrusionViewPointY: DNBehaviorProperty read get_ExtrusionViewPointY;
    {class} property ExtrusionViewPointZ: DNBehaviorProperty read get_ExtrusionViewPointZ;
    {class} property ExtrusionPlane: DNBehaviorProperty read get_ExtrusionPlane;
    {class} property ExtrusionSkewAngle: DNBehaviorProperty read get_ExtrusionSkewAngle;
    {class} property ExtrusionSkewAmt: DNBehaviorProperty read get_ExtrusionSkewAmt;
    {class} property ExtrusionBackDepth: DNBehaviorProperty read get_ExtrusionBackDepth;
    {class} property ExtrusionForeDepth: DNBehaviorProperty read get_ExtrusionForeDepth;
    {class} property ExtrusionOrientationX: DNBehaviorProperty read get_ExtrusionOrientationX;
    {class} property ExtrusionOrientationY: DNBehaviorProperty read get_ExtrusionOrientationY;
    {class} property ExtrusionOrientationZ: DNBehaviorProperty read get_ExtrusionOrientationZ;
    {class} property ExtrusionOrientationAngle: DNBehaviorProperty read get_ExtrusionOrientationAngle;
    {class} property ExtrusionColor: DNBehaviorProperty read get_ExtrusionColor;
    {class} property ExtrusionRotationAngleX: DNBehaviorProperty read get_ExtrusionRotationAngleX;
    {class} property ExtrusionRotationAngleY: DNBehaviorProperty read get_ExtrusionRotationAngleY;
    {class} property ExtrusionLockRotationCenter: DNBehaviorProperty read get_ExtrusionLockRotationCenter;
    {class} property ExtrusionAutoRotationCenter: DNBehaviorProperty read get_ExtrusionAutoRotationCenter;
    {class} property ExtrusionRotationCenterX: DNBehaviorProperty read get_ExtrusionRotationCenterX;
    {class} property ExtrusionRotationCenterY: DNBehaviorProperty read get_ExtrusionRotationCenterY;
    {class} property ExtrusionRotationCenterZ: DNBehaviorProperty read get_ExtrusionRotationCenterZ;
    {class} property ExtrusionColorMode: DNBehaviorProperty read get_ExtrusionColorMode;
  end;

  [DNTypeName('Aspose.Slides.Animation.BehaviorProperty')]
  DNBehaviorProperty = interface(DNIBehaviorProperty)
  ['{047AF247-3FF3-4DA6-996B-D694B92C691F}']
  { getters & setters } 

    function get_Value: string;
    function get_IsCustom: Boolean;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Value: string read get_Value;
    property IsCustom: Boolean read get_IsCustom;
  end;

  TDNBehaviorProperty = class(TDNGenericImport<DNBehaviorPropertyClass, DNBehaviorProperty>) end;

  //-------------namespace: Aspose.Slides.Animation----------------
  DNBehaviorPropertyCollectionClass = interface(DNObjectClass)
  ['{8647B62E-3DA0-5474-8E22-7C2B858B1E0D}']
  end;

  [DNTypeName('Aspose.Slides.Animation.BehaviorPropertyCollection')]
  DNBehaviorPropertyCollection = interface(DDN.mscorlib.DNIEnumerable)
  ['{49B48AA5-A0A9-32E3-9E4B-E7A32E14A260}']
  { getters & setters } 

    function get_Count: Int32;
    function get_IsReadOnly: Boolean;

  { methods } 

    function IndexOf(item: DNIBehaviorProperty): Int32; overload;
    function IndexOf(propertyValue: string): Int32; overload;
    procedure Insert(index: Int32; item: DNIBehaviorProperty); overload;
    procedure Insert(index: Int32; propertyValue: string); overload;
    procedure CopyTo(&array: TArray<DNIBehaviorProperty>; arrayIndex: Int32);
    procedure RemoveAt(index: Int32);
    function &Contains(item: DNIBehaviorProperty): Boolean; overload;
    function &Contains(propertyValue: string): Boolean; overload;
    function GetEnumerator: DDN.mscorlib.DNIEnumerator<DNIBehaviorProperty>;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Count: Int32 read get_Count;
    property IsReadOnly: Boolean read get_IsReadOnly;
  end;

  TDNBehaviorPropertyCollection = class(TDNGenericImport<DNBehaviorPropertyCollectionClass, DNBehaviorPropertyCollection>) end;

  //-------------namespace: Aspose.Slides.Animation----------------
  DNColorOffsetClass = interface(DNObjectClass)
  ['{CCF4377D-1B79-55FB-A8B8-1207DCB4402D}']
  { constructors } 

    {class} function init: DNColorOffset;

  end;

  [DNTypeName('Aspose.Slides.Animation.ColorOffset')]
  DNColorOffset = interface(DNIColorOffset)
  ['{CADD381F-75AA-423E-8EF5-A0AD26A0B60B}']
  { getters & setters } 

    function get_Value0: Single;
    procedure set_Value0(value: Single);
    function get_Value1: Single;
    procedure set_Value1(value: Single);
    function get_Value2: Single;
    procedure set_Value2(value: Single);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Value0: Single read get_Value0 write set_Value0;
    property Value1: Single read get_Value1 write set_Value1;
    property Value2: Single read get_Value2 write set_Value2;
  end;

  TDNColorOffset = class(TDNGenericImport<DNColorOffsetClass, DNColorOffset>) end;

  //-------------namespace: Aspose.Slides.Animation----------------
  DNEffectClass = interface(DNObjectClass)
  ['{A41830B1-4CE8-5CE8-A583-8DCA8F0AD573}']
  end;

  [DNTypeName('Aspose.Slides.Animation.Effect')]
  DNEffect = interface(DNIEffect)
  ['{EC1899AE-F0B5-34BB-ABCB-FAEFF864EF53}']
  { getters & setters } 

    function get_Sequence: DNISequence;
    function get_TextAnimation: DNITextAnimation;
    function get_PresetClassType: DNEffectPresetClassType;
    procedure set_PresetClassType(value: DNEffectPresetClassType);
    function get_Type: DNEffectType;
    procedure set_Type(value: DNEffectType);
    function get_Subtype: DNEffectSubtype;
    procedure set_Subtype(value: DNEffectSubtype);
    function get_Behaviors: DNIBehaviorCollection;
    procedure set_Behaviors(value: DNIBehaviorCollection);
    function get_Timing: DNITiming;
    procedure set_Timing(value: DNITiming);
    function get_TargetShape: DNIShape;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Sequence: DNISequence read get_Sequence;
    property TextAnimation: DNITextAnimation read get_TextAnimation;
    property PresetClassType: DNEffectPresetClassType read get_PresetClassType write set_PresetClassType;
    property &Type: DNEffectType read get_Type write set_Type;
    property Subtype: DNEffectSubtype read get_Subtype write set_Subtype;
    property Behaviors: DNIBehaviorCollection read get_Behaviors write set_Behaviors;
    property Timing: DNITiming read get_Timing write set_Timing;
    property TargetShape: DNIShape read get_TargetShape;
  end;

  TDNEffect = class(TDNGenericImport<DNEffectClass, DNEffect>) end;

  //-------------namespace: Aspose.Slides.Animation----------------
  DNMotionCmdPathClass = interface(DNObjectClass)
  ['{CF9B1499-643F-5002-A6AA-593147D555AE}']
  end;

  [DNTypeName('Aspose.Slides.Animation.MotionCmdPath')]
  DNMotionCmdPath = interface(DNIMotionCmdPath)
  ['{04B90C84-8CF8-3A16-ABD0-3A140B070809}']
  { getters & setters } 

    function get_Points: TArray<DDN.System.Drawing.DNPointF>;
    procedure set_Points(value: TArray<DDN.System.Drawing.DNPointF>);
    function get_CommandType: DNMotionCommandPathType;
    procedure set_CommandType(value: DNMotionCommandPathType);
    function get_IsRelative: Boolean;
    procedure set_IsRelative(value: Boolean);
    function get_PointsType: DNMotionPathPointsType;
    procedure set_PointsType(value: DNMotionPathPointsType);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Points: TArray<DDN.System.Drawing.DNPointF> read get_Points write set_Points;
    property CommandType: DNMotionCommandPathType read get_CommandType write set_CommandType;
    property IsRelative: Boolean read get_IsRelative write set_IsRelative;
    property PointsType: DNMotionPathPointsType read get_PointsType write set_PointsType;
  end;

  TDNMotionCmdPath = class(TDNGenericImport<DNMotionCmdPathClass, DNMotionCmdPath>) end;

  //-------------namespace: Aspose.Slides.Animation----------------
  DNMotionPathClass = interface(DNObjectClass)
  ['{4EE6DD16-438E-5035-B72C-772FA6DC9A46}']
  { constructors } 

    {class} function init: DNMotionPath;

  end;

  [DNTypeName('Aspose.Slides.Animation.MotionPath')]
  DNMotionPath = interface(DDN.mscorlib.DNIEnumerable)
  ['{564D7ED4-4219-4DA7-A9EB-BED07E257CED}']
  { getters & setters } 

    function get_Count: Int32;

  { methods } 

    procedure Insert(index: Int32; &type: DNMotionCommandPathType; pts: TArray<DDN.System.Drawing.DNPointF>; ptsType: DNMotionPathPointsType; bRelativeCoord: Boolean);
    procedure RemoveAt(index: Int32);
    function GetEnumerator: DDN.mscorlib.DNIEnumerator<DNIMotionCmdPath>;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Count: Int32 read get_Count;
  end;

  TDNMotionPath = class(TDNGenericImport<DNMotionPathClass, DNMotionPath>) end;

  //-------------namespace: Aspose.Slides.Animation----------------
  DNPointClass = interface(DNObjectClass)
  ['{7150421E-D746-5326-A50D-592C58B07938}']
  { constructors } 

    {class} function init: DNPoint; overload;
    {class} function init(time: Single; value: DDN.mscorlib.DNObject; formula: string): DNPoint; overload;

  end;

  [DNTypeName('Aspose.Slides.Animation.Point')]
  DNPoint = interface(DNIPoint)
  ['{9FA02C54-AF92-4AAF-8E6D-7EE9DA10B48E}']
  { getters & setters } 

    function get_Time: Single;
    procedure set_Time(value: Single);
    function get_Value: DDN.mscorlib.DNObject;
    procedure set_Value(value: DDN.mscorlib.DNObject);
    function get_Formula: string;
    procedure set_Formula(value: string);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Time: Single read get_Time write set_Time;
    property Value: DDN.mscorlib.DNObject read get_Value write set_Value;
    property Formula: string read get_Formula write set_Formula;
  end;

  TDNPoint = class(TDNGenericImport<DNPointClass, DNPoint>) end;

  //-------------namespace: Aspose.Slides.Animation----------------
  DNPointCollectionClass = interface(DNObjectClass)
  ['{BDC357BC-2BCF-5B15-8E9E-203B992A6AAF}']
  { constructors } 

    {class} function init: DNPointCollection;

  end;

  [DNTypeName('Aspose.Slides.Animation.PointCollection')]
  DNPointCollection = interface(DDN.mscorlib.DNIEnumerable)
  ['{F5FA705F-CC61-4B57-A634-4F5ACBDAE875}']
  { getters & setters } 

    function get_Count: Int32;

  { methods } 

    function GetEnumerator: DDN.mscorlib.DNIEnumerator<DNIPoint>;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Count: Int32 read get_Count;
  end;

  TDNPointCollection = class(TDNGenericImport<DNPointCollectionClass, DNPointCollection>) end;

  //-------------namespace: Aspose.Slides.Animation----------------
  DNSequenceClass = interface(DNObjectClass)
  ['{BC1305A6-D3E0-53E8-8D05-31B064946E7A}']
  end;

  [DNTypeName('Aspose.Slides.Animation.Sequence')]
  DNSequence = interface(DDN.mscorlib.DNIEnumerable)
  ['{C49BF10C-6D6A-30D1-B185-F27AADB35CE3}']
  { getters & setters } 

    function get_Count: Int32;
    function get_TriggerShape: DNIShape;
    procedure set_TriggerShape(value: DNIShape);

  { methods } 

    procedure RemoveAt(index: Int32);
    function GetEnumerator: DDN.mscorlib.DNIEnumerator<DNIEffect>;
    procedure RemoveByShape(shape: DNIShape);
    function GetEffectsByShape(shape: DNIShape): TArray<DNIEffect>;
    function GetEffectsByParagraph(paragraph: DNIParagraph): TArray<DNIEffect>;
    function GetCount(shape: DNIShape): Int32;
    function AddEffect(shape: DNIShape; effectType: DNEffectType; subtype: DNEffectSubtype; triggerType: DNEffectTriggerType): DNIEffect; overload;
    function AddEffect(paragraph: DNIParagraph; effectType: DNEffectType; subtype: DNEffectSubtype; triggerType: DNEffectTriggerType): DNIEffect; overload;
    function AddEffect(chart: DNIChart; &type: DNEffectChartMajorGroupingType; index: Int32; effectType: DNEffectType; subtype: DNEffectSubtype; triggerType: DNEffectTriggerType): DNIEffect; overload;
    function AddEffect(chart: DNIChart; &type: DNEffectChartMinorGroupingType; seriesIndex: Int32; categoriesIndex: Int32; effectType: DNEffectType; subtype: DNEffectSubtype; triggerType: DNEffectTriggerType): DNIEffect; overload;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Count: Int32 read get_Count;
    property TriggerShape: DNIShape read get_TriggerShape write set_TriggerShape;
  end;

  TDNSequence = class(TDNGenericImport<DNSequenceClass, DNSequence>) end;

  //-------------namespace: Aspose.Slides.Animation----------------
  DNSequenceCollectionClass = interface(DNObjectClass)
  ['{6448537D-4B2D-59DA-A186-24195F162985}']
  end;

  [DNTypeName('Aspose.Slides.Animation.SequenceCollection')]
  DNSequenceCollection = interface(DDN.mscorlib.DNIEnumerable)
  ['{7B8E1828-20F1-3953-A30C-5A05246750F7}']
  { getters & setters } 

    function get_Count: Int32;

  { methods } 

    procedure RemoveAt(index: Int32);
    function GetEnumerator: DDN.mscorlib.DNIEnumerator<DNISequence>;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Count: Int32 read get_Count;
  end;

  TDNSequenceCollection = class(TDNGenericImport<DNSequenceCollectionClass, DNSequenceCollection>) end;

  //-------------namespace: Aspose.Slides.Animation----------------
  DNTextAnimationClass = interface(DNObjectClass)
  ['{B8693E43-9648-5300-8D77-0E578472B5B4}']
  { constructors } 

    {class} function init: DNTextAnimation;

  end;

  [DNTypeName('Aspose.Slides.Animation.TextAnimation')]
  DNTextAnimation = interface(DNITextAnimation)
  ['{59738259-8EAE-43C8-9706-3F497D83C51F}']
  { getters & setters } 

    function get_BuildType: DNBuildType;
    procedure set_BuildType(value: DNBuildType);
    function get_EffectAnimateBackgroundShape: DNIEffect;
    procedure set_EffectAnimateBackgroundShape(value: DNIEffect);

  { methods } 

    function AddEffect(effectType: DNEffectType; subtype: DNEffectSubtype; triggerType: DNEffectTriggerType): DNIEffect;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property BuildType: DNBuildType read get_BuildType write set_BuildType;
    property EffectAnimateBackgroundShape: DNIEffect read get_EffectAnimateBackgroundShape write set_EffectAnimateBackgroundShape;
  end;

  TDNTextAnimation = class(TDNGenericImport<DNTextAnimationClass, DNTextAnimation>) end;

  //-------------namespace: Aspose.Slides.Animation----------------
  DNTextAnimationCollectionClass = interface(DNObjectClass)
  ['{891AA777-EA84-52A9-AB11-E9C8211BAD8C}']
  { constructors } 

    {class} function init: DNTextAnimationCollection;

  end;

  [DNTypeName('Aspose.Slides.Animation.TextAnimationCollection')]
  DNTextAnimationCollection = interface(DDN.mscorlib.DNICollection)
  ['{79B05421-F59C-47C5-8243-2B7ED665241D}']
  { getters & setters } 

    function get_Count: Int32;
    function get_IsSynchronized: Boolean;
    function get_SyncRoot: DDN.mscorlib.DNObject;

  { methods } 

    function Add: DNTextAnimation;
    function GetEnumerator: DDN.mscorlib.DNIEnumerator<DNITextAnimation>;
    procedure CopyTo(&array: DDN.mscorlib.DNArray; index: Int32);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Count: Int32 read get_Count;
    property IsSynchronized: Boolean read get_IsSynchronized;
    property SyncRoot: DDN.mscorlib.DNObject read get_SyncRoot;
  end;

  TDNTextAnimationCollection = class(TDNGenericImport<DNTextAnimationCollectionClass, DNTextAnimationCollection>) end;

  //-------------namespace: Aspose.Slides.Animation----------------
  DNTimingClass = interface(DNObjectClass)
  ['{529DBCB9-118D-51E4-B888-58C0A90EC429}']
  { constructors } 

    {class} function init: DNTiming;

  end;

  [DNTypeName('Aspose.Slides.Animation.Timing')]
  DNTiming = interface(DNITiming)
  ['{CF27B728-1DA1-4424-8E8E-A93C1CC535B4}']
  { getters & setters } 

    function get_Accelerate: Single;
    procedure set_Accelerate(value: Single);
    function get_Decelerate: Single;
    procedure set_Decelerate(value: Single);
    function get_AutoReverse: Boolean;
    procedure set_AutoReverse(value: Boolean);
    function get_Duration: Single;
    procedure set_Duration(value: Single);
    function get_RepeatCount: Single;
    procedure set_RepeatCount(value: Single);
    function get_RepeatDuration: Single;
    procedure set_RepeatDuration(value: Single);
    function get_Restart: DNEffectRestartType;
    procedure set_Restart(value: DNEffectRestartType);
    function get_Speed: Single;
    procedure set_Speed(value: Single);
    function get_TriggerDelayTime: Single;
    procedure set_TriggerDelayTime(value: Single);
    function get_TriggerType: DNEffectTriggerType;
    procedure set_TriggerType(value: DNEffectTriggerType);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Accelerate: Single read get_Accelerate write set_Accelerate;
    property Decelerate: Single read get_Decelerate write set_Decelerate;
    property AutoReverse: Boolean read get_AutoReverse write set_AutoReverse;
    property Duration: Single read get_Duration write set_Duration;
    property RepeatCount: Single read get_RepeatCount write set_RepeatCount;
    property RepeatDuration: Single read get_RepeatDuration write set_RepeatDuration;
    property Restart: DNEffectRestartType read get_Restart write set_Restart;
    property Speed: Single read get_Speed write set_Speed;
    property TriggerDelayTime: Single read get_TriggerDelayTime write set_TriggerDelayTime;
    property TriggerType: DNEffectTriggerType read get_TriggerType write set_TriggerType;
  end;

  TDNTiming = class(TDNGenericImport<DNTimingClass, DNTiming>) end;

  //-------------namespace: Aspose.Slides----------------
  DNAudioClass = interface(DDN.mscorlib.DNObjectClass)
  ['{D049C7D9-3815-5D86-AD27-F1BFC65AE66B}']
  end;

  [DNTypeName('Aspose.Slides.Audio')]
  DNAudio = interface(DDN.mscorlib.DNObject)
  ['{7FB08F4E-F02C-31B6-B9AC-2278FBBD3019}']
  { getters & setters } 

    function get_ContentType: string;
    procedure set_ContentType(value: string);
    function get_BinaryData: TArray<Byte>;

  { methods } 

    function GetStream: DDN.mscorlib.DNStream;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property ContentType: string read get_ContentType write set_ContentType;
    property BinaryData: TArray<Byte> read get_BinaryData;
  end;

  TDNAudio = class(TDNGenericImport<DNAudioClass, DNAudio>) end;

  //-------------namespace: Aspose.Slides----------------
  DNAudioCollectionClass = interface(DNObjectClass)
  ['{A018AD97-214D-50A9-BD29-B86FC17969A4}']
  end;

  [DNTypeName('Aspose.Slides.AudioCollection')]
  DNAudioCollection = interface(DDN.mscorlib.DNICollection)
  ['{65B92ABA-4026-389A-A6DF-7FA21949EC98}']
  { getters & setters } 

    function get_Count: Int32;
    function get_IsSynchronized: Boolean;
    function get_SyncRoot: DDN.mscorlib.DNObject;

  { methods } 

    function AddAudio(audio: DNIAudio): DNIAudio; overload;
    function AddAudio(stream: DDN.mscorlib.DNStream): DNIAudio; overload;
    function AddAudio(stream: DDN.mscorlib.DNStream; loadingStreamBehavior: DNLoadingStreamBehavior): DNIAudio; overload;
    function AddAudio(audioData: TArray<Byte>): DNIAudio; overload;
    procedure CopyTo(&array: DDN.mscorlib.DNArray; index: Int32);
    function GetEnumerator: DDN.mscorlib.DNIEnumerator<DNIAudio>;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Count: Int32 read get_Count;
    property IsSynchronized: Boolean read get_IsSynchronized;
    property SyncRoot: DDN.mscorlib.DNObject read get_SyncRoot;
  end;

  TDNAudioCollection = class(TDNGenericImport<DNAudioCollectionClass, DNAudioCollection>) end;

  //-------------namespace: Aspose.Slides----------------
  DNBaseHeaderFooterManagerClass = interface(DDN.mscorlib.DNObjectClass)
  ['{D0331415-1237-5939-B2B1-EE415A10D953}']
  end;

  [DNTypeName('Aspose.Slides.BaseHeaderFooterManager')]
  DNBaseHeaderFooterManager = interface(DDN.mscorlib.DNObject)
  ['{F5BA929A-D85A-3D33-850D-61FED4B77BB6}']
  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNBaseHeaderFooterManager = class(TDNGenericImport<DNBaseHeaderFooterManagerClass, DNBaseHeaderFooterManager>) end;

  //-------------namespace: Aspose.Slides----------------
  DNBaseSlideHeaderFooterManagerClass = interface(DNBaseHeaderFooterManagerClass)
  ['{FFC54AAF-778F-59FD-87E6-2E0AA50322D7}']
  end;

  [DNTypeName('Aspose.Slides.BaseSlideHeaderFooterManager')]
  DNBaseSlideHeaderFooterManager = interface(DNBaseHeaderFooterManager)
  ['{2C8C2A45-157D-3917-89D5-3A627D9C7B86}']
  { getters & setters } 

    function get_IsFooterVisible: Boolean;
    function get_IsSlideNumberVisible: Boolean;
    function get_IsDateTimeVisible: Boolean;

  { methods } 

    procedure SetFooterVisibility(isVisible: Boolean);
    procedure SetSlideNumberVisibility(isVisible: Boolean);
    procedure SetDateTimeVisibility(isVisible: Boolean);
    procedure SetFooterText(text: string);
    procedure SetDateTimeText(text: string);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property IsFooterVisible: Boolean read get_IsFooterVisible;
    property IsSlideNumberVisible: Boolean read get_IsSlideNumberVisible;
    property IsDateTimeVisible: Boolean read get_IsDateTimeVisible;
  end;

  TDNBaseSlideHeaderFooterManager = class(TDNGenericImport<DNBaseSlideHeaderFooterManagerClass, DNBaseSlideHeaderFooterManager>) end;

  //-------------namespace: Aspose.Slides----------------
  DNBaseHandoutNotesSlideHeaderFooterManagerClass = interface(DNBaseSlideHeaderFooterManagerClass)
  ['{1E585A45-B423-5A68-B202-A376517F4A07}']
  end;

  [DNTypeName('Aspose.Slides.BaseHandoutNotesSlideHeaderFooterManager')]
  DNBaseHandoutNotesSlideHeaderFooterManager = interface(DNBaseSlideHeaderFooterManager)
  ['{895ECC2A-B5E3-3138-84AC-4400EFA253B3}']
  { getters & setters } 

    function get_IsHeaderVisible: Boolean;
    function get_IsFooterVisible: Boolean;
    function get_IsSlideNumberVisible: Boolean;
    function get_IsDateTimeVisible: Boolean;

  { methods } 

    procedure SetHeaderVisibility(isVisible: Boolean);
    procedure SetHeaderText(text: string);
    procedure SetFooterVisibility(isVisible: Boolean);
    procedure SetSlideNumberVisibility(isVisible: Boolean);
    procedure SetDateTimeVisibility(isVisible: Boolean);
    procedure SetFooterText(text: string);
    procedure SetDateTimeText(text: string);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property IsHeaderVisible: Boolean read get_IsHeaderVisible;
    property IsFooterVisible: Boolean read get_IsFooterVisible;
    property IsSlideNumberVisible: Boolean read get_IsSlideNumberVisible;
    property IsDateTimeVisible: Boolean read get_IsDateTimeVisible;
  end;

  TDNBaseHandoutNotesSlideHeaderFooterManager = class(TDNGenericImport<DNBaseHandoutNotesSlideHeaderFooterManagerClass, DNBaseHandoutNotesSlideHeaderFooterManager>) end;

  //-------------namespace: Aspose.Slides----------------
  DNMasterHandoutSlideHeaderFooterManagerClass = interface(DNBaseHandoutNotesSlideHeaderFooterManagerClass)
  ['{1A45C2AC-D7C4-54EA-A43C-D3E131CDFFF8}']
  end;

  [DNTypeName('Aspose.Slides.MasterHandoutSlideHeaderFooterManager')]
  DNMasterHandoutSlideHeaderFooterManager = interface(DNBaseHandoutNotesSlideHeaderFooterManager)
  ['{10E1B10E-AF27-36F2-8D1E-A5C96745F93B}']
  { getters & setters } 

    function get_IsHeaderVisible: Boolean;
    function get_IsFooterVisible: Boolean;
    function get_IsSlideNumberVisible: Boolean;
    function get_IsDateTimeVisible: Boolean;

  { methods } 

    procedure SetHeaderVisibility(isVisible: Boolean);
    procedure SetHeaderText(text: string);
    procedure SetFooterVisibility(isVisible: Boolean);
    procedure SetSlideNumberVisibility(isVisible: Boolean);
    procedure SetDateTimeVisibility(isVisible: Boolean);
    procedure SetFooterText(text: string);
    procedure SetDateTimeText(text: string);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property IsHeaderVisible: Boolean read get_IsHeaderVisible;
    property IsFooterVisible: Boolean read get_IsFooterVisible;
    property IsSlideNumberVisible: Boolean read get_IsSlideNumberVisible;
    property IsDateTimeVisible: Boolean read get_IsDateTimeVisible;
  end;

  TDNMasterHandoutSlideHeaderFooterManager = class(TDNGenericImport<DNMasterHandoutSlideHeaderFooterManagerClass, DNMasterHandoutSlideHeaderFooterManager>) end;

  //-------------namespace: Aspose.Slides----------------
  DNMasterNotesSlideHeaderFooterManagerClass = interface(DNBaseHandoutNotesSlideHeaderFooterManagerClass)
  ['{6E396598-6690-505C-8E69-B7E6539CEC62}']
  end;

  [DNTypeName('Aspose.Slides.MasterNotesSlideHeaderFooterManager')]
  DNMasterNotesSlideHeaderFooterManager = interface(DNBaseHandoutNotesSlideHeaderFooterManager)
  ['{4BB4B4C5-3993-33CF-97E4-0873CD2B2BF9}']
  { getters & setters } 

    function get_IsHeaderVisible: Boolean;
    function get_IsFooterVisible: Boolean;
    function get_IsSlideNumberVisible: Boolean;
    function get_IsDateTimeVisible: Boolean;

  { methods } 

    procedure SetHeaderAndChildHeadersVisibility(isVisible: Boolean);
    procedure SetHeaderAndChildHeadersText(text: string);
    procedure SetFooterAndChildFootersVisibility(isVisible: Boolean);
    procedure SetSlideNumberAndChildSlideNumbersVisibility(isVisible: Boolean);
    procedure SetDateTimeAndChildDateTimesVisibility(isVisible: Boolean);
    procedure SetFooterAndChildFootersText(text: string);
    procedure SetDateTimeAndChildDateTimesText(text: string);
    procedure SetHeaderVisibility(isVisible: Boolean);
    procedure SetHeaderText(text: string);
    procedure SetFooterVisibility(isVisible: Boolean);
    procedure SetSlideNumberVisibility(isVisible: Boolean);
    procedure SetDateTimeVisibility(isVisible: Boolean);
    procedure SetFooterText(text: string);
    procedure SetDateTimeText(text: string);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property IsHeaderVisible: Boolean read get_IsHeaderVisible;
    property IsFooterVisible: Boolean read get_IsFooterVisible;
    property IsSlideNumberVisible: Boolean read get_IsSlideNumberVisible;
    property IsDateTimeVisible: Boolean read get_IsDateTimeVisible;
  end;

  TDNMasterNotesSlideHeaderFooterManager = class(TDNGenericImport<DNMasterNotesSlideHeaderFooterManagerClass, DNMasterNotesSlideHeaderFooterManager>) end;

  //-------------namespace: Aspose.Slides----------------
  DNNotesSlideHeaderFooterManagerClass = interface(DNBaseHandoutNotesSlideHeaderFooterManagerClass)
  ['{7067BDE1-0B36-5DEA-B40C-4F1B82F8D30C}']
  end;

  [DNTypeName('Aspose.Slides.NotesSlideHeaderFooterManager')]
  DNNotesSlideHeaderFooterManager = interface(DNBaseHandoutNotesSlideHeaderFooterManager)
  ['{FD13F041-2EE6-3899-9F8E-36B563ED0F23}']
  { getters & setters } 

    function get_IsHeaderVisible: Boolean;
    function get_IsFooterVisible: Boolean;
    function get_IsSlideNumberVisible: Boolean;
    function get_IsDateTimeVisible: Boolean;

  { methods } 

    procedure SetHeaderVisibility(isVisible: Boolean);
    procedure SetHeaderText(text: string);
    procedure SetFooterVisibility(isVisible: Boolean);
    procedure SetSlideNumberVisibility(isVisible: Boolean);
    procedure SetDateTimeVisibility(isVisible: Boolean);
    procedure SetFooterText(text: string);
    procedure SetDateTimeText(text: string);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property IsHeaderVisible: Boolean read get_IsHeaderVisible;
    property IsFooterVisible: Boolean read get_IsFooterVisible;
    property IsSlideNumberVisible: Boolean read get_IsSlideNumberVisible;
    property IsDateTimeVisible: Boolean read get_IsDateTimeVisible;
  end;

  TDNNotesSlideHeaderFooterManager = class(TDNGenericImport<DNNotesSlideHeaderFooterManagerClass, DNNotesSlideHeaderFooterManager>) end;

  //-------------namespace: Aspose.Slides----------------
  DNLayoutSlideHeaderFooterManagerClass = interface(DNBaseSlideHeaderFooterManagerClass)
  ['{9233F512-A637-504D-B0EA-F006A3C81C51}']
  end;

  [DNTypeName('Aspose.Slides.LayoutSlideHeaderFooterManager')]
  DNLayoutSlideHeaderFooterManager = interface(DNBaseSlideHeaderFooterManager)
  ['{BF25B65B-13ED-35A5-AB9A-5882A5523839}']
  { getters & setters } 

    function get_IsFooterVisible: Boolean;
    function get_IsSlideNumberVisible: Boolean;
    function get_IsDateTimeVisible: Boolean;

  { methods } 

    procedure SetFooterAndChildFootersVisibility(isVisible: Boolean);
    procedure SetSlideNumberAndChildSlideNumbersVisibility(isVisible: Boolean);
    procedure SetDateTimeAndChildDateTimesVisibility(isVisible: Boolean);
    procedure SetFooterAndChildFootersText(text: string);
    procedure SetDateTimeAndChildDateTimesText(text: string);
    procedure SetFooterVisibility(isVisible: Boolean);
    procedure SetSlideNumberVisibility(isVisible: Boolean);
    procedure SetDateTimeVisibility(isVisible: Boolean);
    procedure SetFooterText(text: string);
    procedure SetDateTimeText(text: string);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property IsFooterVisible: Boolean read get_IsFooterVisible;
    property IsSlideNumberVisible: Boolean read get_IsSlideNumberVisible;
    property IsDateTimeVisible: Boolean read get_IsDateTimeVisible;
  end;

  TDNLayoutSlideHeaderFooterManager = class(TDNGenericImport<DNLayoutSlideHeaderFooterManagerClass, DNLayoutSlideHeaderFooterManager>) end;

  //-------------namespace: Aspose.Slides----------------
  DNMasterSlideHeaderFooterManagerClass = interface(DNBaseSlideHeaderFooterManagerClass)
  ['{78DF095C-950D-59BB-9ED0-409405528698}']
  end;

  [DNTypeName('Aspose.Slides.MasterSlideHeaderFooterManager')]
  DNMasterSlideHeaderFooterManager = interface(DNBaseSlideHeaderFooterManager)
  ['{87F905AD-B639-3598-B143-2C5C0E6232B3}']
  { getters & setters } 

    function get_IsFooterVisible: Boolean;
    function get_IsSlideNumberVisible: Boolean;
    function get_IsDateTimeVisible: Boolean;

  { methods } 

    procedure SetFooterAndChildFootersVisibility(isVisible: Boolean);
    procedure SetSlideNumberAndChildSlideNumbersVisibility(isVisible: Boolean);
    procedure SetDateTimeAndChildDateTimesVisibility(isVisible: Boolean);
    procedure SetFooterAndChildFootersText(text: string);
    procedure SetDateTimeAndChildDateTimesText(text: string);
    procedure SetFooterVisibility(isVisible: Boolean);
    procedure SetSlideNumberVisibility(isVisible: Boolean);
    procedure SetDateTimeVisibility(isVisible: Boolean);
    procedure SetFooterText(text: string);
    procedure SetDateTimeText(text: string);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property IsFooterVisible: Boolean read get_IsFooterVisible;
    property IsSlideNumberVisible: Boolean read get_IsSlideNumberVisible;
    property IsDateTimeVisible: Boolean read get_IsDateTimeVisible;
  end;

  TDNMasterSlideHeaderFooterManager = class(TDNGenericImport<DNMasterSlideHeaderFooterManagerClass, DNMasterSlideHeaderFooterManager>) end;

  //-------------namespace: Aspose.Slides----------------
  DNSlideHeaderFooterManagerClass = interface(DNBaseSlideHeaderFooterManagerClass)
  ['{615F81FE-F42A-5A85-B90E-B03A1A11186A}']
  end;

  [DNTypeName('Aspose.Slides.SlideHeaderFooterManager')]
  DNSlideHeaderFooterManager = interface(DNBaseSlideHeaderFooterManager)
  ['{B1CC3E2B-C403-37FE-AF2C-20B7A6EA8620}']
  { getters & setters } 

    function get_IsFooterVisible: Boolean;
    function get_IsSlideNumberVisible: Boolean;
    function get_IsDateTimeVisible: Boolean;

  { methods } 

    procedure SetFooterVisibility(isVisible: Boolean);
    procedure SetSlideNumberVisibility(isVisible: Boolean);
    procedure SetDateTimeVisibility(isVisible: Boolean);
    procedure SetFooterText(text: string);
    procedure SetDateTimeText(text: string);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property IsFooterVisible: Boolean read get_IsFooterVisible;
    property IsSlideNumberVisible: Boolean read get_IsSlideNumberVisible;
    property IsDateTimeVisible: Boolean read get_IsDateTimeVisible;
  end;

  TDNSlideHeaderFooterManager = class(TDNGenericImport<DNSlideHeaderFooterManagerClass, DNSlideHeaderFooterManager>) end;

  //-------------namespace: Aspose.Slides----------------
  DNPresentationHeaderFooterManagerClass = interface(DNBaseHeaderFooterManagerClass)
  ['{5E9BEE21-24FA-58E6-B73C-51F39AD14C5E}']
  end;

  [DNTypeName('Aspose.Slides.PresentationHeaderFooterManager')]
  DNPresentationHeaderFooterManager = interface(DNBaseHeaderFooterManager)
  ['{387D2894-27E5-3D09-95F1-A61060F0EC25}']
  { methods } 

    procedure SetAllHeadersVisibility(isVisible: Boolean);
    procedure SetAllFootersVisibility(isVisible: Boolean);
    procedure SetAllSlideNumbersVisibility(isVisible: Boolean);
    procedure SetAllDateTimesVisibility(isVisible: Boolean);
    procedure SetAllHeadersText(text: string);
    procedure SetAllFootersText(text: string);
    procedure SetAllDateTimesText(text: string);
    procedure SetVisibilityOnAllTitleSlides(isVisible: Boolean);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNPresentationHeaderFooterManager = class(TDNGenericImport<DNPresentationHeaderFooterManagerClass, DNPresentationHeaderFooterManager>) end;

  //-------------namespace: Aspose.Slides----------------
  DNBaseShapeLockClass = interface(DNObjectClass)
  ['{BD332F5A-27CA-5B63-8A71-C84D62E460AF}']
  end;

  [DNTypeName('Aspose.Slides.BaseShapeLock')]
  DNBaseShapeLock = interface(DNIBaseShapeLock)
  ['{EB6FCA1B-2DDB-3BA8-A881-7479F9D94610}']
  { getters & setters } 

    function get_NoLocks: Boolean;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property NoLocks: Boolean read get_NoLocks;
  end;

  TDNBaseShapeLock = class(TDNGenericImport<DNBaseShapeLockClass, DNBaseShapeLock>) end;

  //-------------namespace: Aspose.Slides----------------
  DNAutoShapeLockClass = interface(DNBaseShapeLockClass)
  ['{33F7BFFA-6BE6-5E36-9CA9-37C329676FEC}']
  end;

  [DNTypeName('Aspose.Slides.AutoShapeLock')]
  DNAutoShapeLock = interface(DNBaseShapeLock)
  ['{95D36C4E-1C54-3B07-8DE2-7403A41A528D}']
  { getters & setters } 

    function get_GroupingLocked: Boolean;
    procedure set_GroupingLocked(value: Boolean);
    function get_SelectLocked: Boolean;
    procedure set_SelectLocked(value: Boolean);
    function get_RotateLocked: Boolean;
    procedure set_RotateLocked(value: Boolean);
    function get_AspectRatioLocked: Boolean;
    procedure set_AspectRatioLocked(value: Boolean);
    function get_PositionLocked: Boolean;
    procedure set_PositionLocked(value: Boolean);
    function get_SizeLocked: Boolean;
    procedure set_SizeLocked(value: Boolean);
    function get_EditPointsLocked: Boolean;
    procedure set_EditPointsLocked(value: Boolean);
    function get_AdjustHandlesLocked: Boolean;
    procedure set_AdjustHandlesLocked(value: Boolean);
    function get_ArrowheadsLocked: Boolean;
    procedure set_ArrowheadsLocked(value: Boolean);
    function get_ShapeTypeLocked: Boolean;
    procedure set_ShapeTypeLocked(value: Boolean);
    function get_TextLocked: Boolean;
    procedure set_TextLocked(value: Boolean);
    function get_NoLocks: Boolean;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property GroupingLocked: Boolean read get_GroupingLocked write set_GroupingLocked;
    property SelectLocked: Boolean read get_SelectLocked write set_SelectLocked;
    property RotateLocked: Boolean read get_RotateLocked write set_RotateLocked;
    property AspectRatioLocked: Boolean read get_AspectRatioLocked write set_AspectRatioLocked;
    property PositionLocked: Boolean read get_PositionLocked write set_PositionLocked;
    property SizeLocked: Boolean read get_SizeLocked write set_SizeLocked;
    property EditPointsLocked: Boolean read get_EditPointsLocked write set_EditPointsLocked;
    property AdjustHandlesLocked: Boolean read get_AdjustHandlesLocked write set_AdjustHandlesLocked;
    property ArrowheadsLocked: Boolean read get_ArrowheadsLocked write set_ArrowheadsLocked;
    property ShapeTypeLocked: Boolean read get_ShapeTypeLocked write set_ShapeTypeLocked;
    property TextLocked: Boolean read get_TextLocked write set_TextLocked;
    property NoLocks: Boolean read get_NoLocks;
  end;

  TDNAutoShapeLock = class(TDNGenericImport<DNAutoShapeLockClass, DNAutoShapeLock>) end;

  //-------------namespace: Aspose.Slides----------------
  DNConnectorLockClass = interface(DNBaseShapeLockClass)
  ['{43712512-585D-5805-9609-0EE1F6EB6448}']
  end;

  [DNTypeName('Aspose.Slides.ConnectorLock')]
  DNConnectorLock = interface(DNBaseShapeLock)
  ['{164D4E0D-1D41-3B29-9A18-D61B137A8F4C}']
  { getters & setters } 

    function get_GroupingLocked: Boolean;
    procedure set_GroupingLocked(value: Boolean);
    function get_SelectLocked: Boolean;
    procedure set_SelectLocked(value: Boolean);
    function get_RotateLocked: Boolean;
    procedure set_RotateLocked(value: Boolean);
    function get_AspectRatioLocked: Boolean;
    procedure set_AspectRatioLocked(value: Boolean);
    function get_PositionMove: Boolean;
    procedure set_PositionMove(value: Boolean);
    function get_SizeLocked: Boolean;
    procedure set_SizeLocked(value: Boolean);
    function get_EditPointsLocked: Boolean;
    procedure set_EditPointsLocked(value: Boolean);
    function get_AdjustHandlesLocked: Boolean;
    procedure set_AdjustHandlesLocked(value: Boolean);
    function get_ArrowheadsLocked: Boolean;
    procedure set_ArrowheadsLocked(value: Boolean);
    function get_ShapeTypeLocked: Boolean;
    procedure set_ShapeTypeLocked(value: Boolean);
    function get_NoLocks: Boolean;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property GroupingLocked: Boolean read get_GroupingLocked write set_GroupingLocked;
    property SelectLocked: Boolean read get_SelectLocked write set_SelectLocked;
    property RotateLocked: Boolean read get_RotateLocked write set_RotateLocked;
    property AspectRatioLocked: Boolean read get_AspectRatioLocked write set_AspectRatioLocked;
    property PositionMove: Boolean read get_PositionMove write set_PositionMove;
    property SizeLocked: Boolean read get_SizeLocked write set_SizeLocked;
    property EditPointsLocked: Boolean read get_EditPointsLocked write set_EditPointsLocked;
    property AdjustHandlesLocked: Boolean read get_AdjustHandlesLocked write set_AdjustHandlesLocked;
    property ArrowheadsLocked: Boolean read get_ArrowheadsLocked write set_ArrowheadsLocked;
    property ShapeTypeLocked: Boolean read get_ShapeTypeLocked write set_ShapeTypeLocked;
    property NoLocks: Boolean read get_NoLocks;
  end;

  TDNConnectorLock = class(TDNGenericImport<DNConnectorLockClass, DNConnectorLock>) end;

  //-------------namespace: Aspose.Slides----------------
  DNGraphicalObjectLockClass = interface(DNBaseShapeLockClass)
  ['{1B05B290-D56C-5D31-BAB4-A8423F96B130}']
  end;

  [DNTypeName('Aspose.Slides.GraphicalObjectLock')]
  DNGraphicalObjectLock = interface(DNBaseShapeLock)
  ['{61A6E782-4825-3C4E-8F4C-29316F8025C3}']
  { getters & setters } 

    function get_GroupingLocked: Boolean;
    procedure set_GroupingLocked(value: Boolean);
    function get_DrilldownLocked: Boolean;
    procedure set_DrilldownLocked(value: Boolean);
    function get_SelectLocked: Boolean;
    procedure set_SelectLocked(value: Boolean);
    function get_AspectRatioLocked: Boolean;
    procedure set_AspectRatioLocked(value: Boolean);
    function get_PositionLocked: Boolean;
    procedure set_PositionLocked(value: Boolean);
    function get_SizeLocked: Boolean;
    procedure set_SizeLocked(value: Boolean);
    function get_NoLocks: Boolean;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property GroupingLocked: Boolean read get_GroupingLocked write set_GroupingLocked;
    property DrilldownLocked: Boolean read get_DrilldownLocked write set_DrilldownLocked;
    property SelectLocked: Boolean read get_SelectLocked write set_SelectLocked;
    property AspectRatioLocked: Boolean read get_AspectRatioLocked write set_AspectRatioLocked;
    property PositionLocked: Boolean read get_PositionLocked write set_PositionLocked;
    property SizeLocked: Boolean read get_SizeLocked write set_SizeLocked;
    property NoLocks: Boolean read get_NoLocks;
  end;

  TDNGraphicalObjectLock = class(TDNGenericImport<DNGraphicalObjectLockClass, DNGraphicalObjectLock>) end;

  //-------------namespace: Aspose.Slides----------------
  DNGroupShapeLockClass = interface(DNBaseShapeLockClass)
  ['{4E68DFD5-3A12-5E48-95D2-5D05B17B9123}']
  end;

  [DNTypeName('Aspose.Slides.GroupShapeLock')]
  DNGroupShapeLock = interface(DNBaseShapeLock)
  ['{AF8F4078-8F82-3108-8A31-45BACFD34884}']
  { getters & setters } 

    function get_GroupingLocked: Boolean;
    procedure set_GroupingLocked(value: Boolean);
    function get_UngroupingLocked: Boolean;
    procedure set_UngroupingLocked(value: Boolean);
    function get_SelectLocked: Boolean;
    procedure set_SelectLocked(value: Boolean);
    function get_RotationLocked: Boolean;
    procedure set_RotationLocked(value: Boolean);
    function get_AspectRatioLocked: Boolean;
    procedure set_AspectRatioLocked(value: Boolean);
    function get_PositionLocked: Boolean;
    procedure set_PositionLocked(value: Boolean);
    function get_SizeLocked: Boolean;
    procedure set_SizeLocked(value: Boolean);
    function get_NoLocks: Boolean;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property GroupingLocked: Boolean read get_GroupingLocked write set_GroupingLocked;
    property UngroupingLocked: Boolean read get_UngroupingLocked write set_UngroupingLocked;
    property SelectLocked: Boolean read get_SelectLocked write set_SelectLocked;
    property RotationLocked: Boolean read get_RotationLocked write set_RotationLocked;
    property AspectRatioLocked: Boolean read get_AspectRatioLocked write set_AspectRatioLocked;
    property PositionLocked: Boolean read get_PositionLocked write set_PositionLocked;
    property SizeLocked: Boolean read get_SizeLocked write set_SizeLocked;
    property NoLocks: Boolean read get_NoLocks;
  end;

  TDNGroupShapeLock = class(TDNGenericImport<DNGroupShapeLockClass, DNGroupShapeLock>) end;

  //-------------namespace: Aspose.Slides----------------
  DNPictureFrameLockClass = interface(DNBaseShapeLockClass)
  ['{8F52277C-28BD-5BC2-AB28-1F0C07DBFEA5}']
  end;

  [DNTypeName('Aspose.Slides.PictureFrameLock')]
  DNPictureFrameLock = interface(DNBaseShapeLock)
  ['{16A41EBA-4A30-3A6F-8FC9-F8C7639B6BB7}']
  { getters & setters } 

    function get_GroupingLocked: Boolean;
    procedure set_GroupingLocked(value: Boolean);
    function get_SelectLocked: Boolean;
    procedure set_SelectLocked(value: Boolean);
    function get_RotationLocked: Boolean;
    procedure set_RotationLocked(value: Boolean);
    function get_AspectRatioLocked: Boolean;
    procedure set_AspectRatioLocked(value: Boolean);
    function get_PositionLocked: Boolean;
    procedure set_PositionLocked(value: Boolean);
    function get_SizeLocked: Boolean;
    procedure set_SizeLocked(value: Boolean);
    function get_EditPointsLocked: Boolean;
    procedure set_EditPointsLocked(value: Boolean);
    function get_AdjustHandlesLocked: Boolean;
    procedure set_AdjustHandlesLocked(value: Boolean);
    function get_ArrowheadsLocked: Boolean;
    procedure set_ArrowheadsLocked(value: Boolean);
    function get_ShapeTypeLocked: Boolean;
    procedure set_ShapeTypeLocked(value: Boolean);
    function get_CropLocked: Boolean;
    procedure set_CropLocked(value: Boolean);
    function get_NoLocks: Boolean;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property GroupingLocked: Boolean read get_GroupingLocked write set_GroupingLocked;
    property SelectLocked: Boolean read get_SelectLocked write set_SelectLocked;
    property RotationLocked: Boolean read get_RotationLocked write set_RotationLocked;
    property AspectRatioLocked: Boolean read get_AspectRatioLocked write set_AspectRatioLocked;
    property PositionLocked: Boolean read get_PositionLocked write set_PositionLocked;
    property SizeLocked: Boolean read get_SizeLocked write set_SizeLocked;
    property EditPointsLocked: Boolean read get_EditPointsLocked write set_EditPointsLocked;
    property AdjustHandlesLocked: Boolean read get_AdjustHandlesLocked write set_AdjustHandlesLocked;
    property ArrowheadsLocked: Boolean read get_ArrowheadsLocked write set_ArrowheadsLocked;
    property ShapeTypeLocked: Boolean read get_ShapeTypeLocked write set_ShapeTypeLocked;
    property CropLocked: Boolean read get_CropLocked write set_CropLocked;
    property NoLocks: Boolean read get_NoLocks;
  end;

  TDNPictureFrameLock = class(TDNGenericImport<DNPictureFrameLockClass, DNPictureFrameLock>) end;

  //-------------namespace: Aspose.Slides----------------
  DNBaseSlideClass = interface(DDN.mscorlib.DNObjectClass)
  ['{074A9D29-AE66-518F-8202-CC6DD9FE1ED1}']
  end;

  [DNTypeName('Aspose.Slides.BaseSlide')]
  DNBaseSlide = interface(DDN.mscorlib.DNObject)
  ['{417A38EF-51DD-3A80-9A3F-1F822A1F7C07}']
  { getters & setters } 

    function get_Shapes: DNIShapeCollection;
    function get_Controls: DNIControlCollection;
    function get_Name: string;
    procedure set_Name(value: string);
    function get_SlideId: UInt32;
    function get_CustomData: DNICustomData;
    function get_Timeline: DNIAnimationTimeLine;
    function get_SlideShowTransition: DNISlideShowTransition;
    function get_Background: DNIBackground;
    function get_HyperlinkQueries: DNIHyperlinkQueries;
    function get_ShowMasterShapes: Boolean;
    procedure set_ShowMasterShapes(value: Boolean);
    function get_Presentation: DNIPresentation;

  { methods } 

    function Equals(slide: DNIBaseSlide): Boolean; overload;
    procedure JoinPortionsWithSameFormatting; overload;
    procedure JoinPortionsWithSameFormatting(collection: DNIShapeCollection); overload;
    function CreateThemeEffective: DNIThemeEffectiveData;
    function FindShapeByAltText(altText: string): DNIShape;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean; overload;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Shapes: DNIShapeCollection read get_Shapes;
    property Controls: DNIControlCollection read get_Controls;
    property Name: string read get_Name write set_Name;
    property SlideId: UInt32 read get_SlideId;
    property CustomData: DNICustomData read get_CustomData;
    property Timeline: DNIAnimationTimeLine read get_Timeline;
    property SlideShowTransition: DNISlideShowTransition read get_SlideShowTransition;
    property Background: DNIBackground read get_Background;
    property HyperlinkQueries: DNIHyperlinkQueries read get_HyperlinkQueries;
    property ShowMasterShapes: Boolean read get_ShowMasterShapes write set_ShowMasterShapes;
    property Presentation: DNIPresentation read get_Presentation;
  end;

  TDNBaseSlide = class(TDNGenericImport<DNBaseSlideClass, DNBaseSlide>) end;

  //-------------namespace: Aspose.Slides----------------
  DNLayoutSlideClass = interface(DNBaseSlideClass)
  ['{9B2E23BE-DB09-5B91-812E-14B58548E77C}']
  end;

  [DNTypeName('Aspose.Slides.LayoutSlide')]
  DNLayoutSlide = interface(DNBaseSlide)
  ['{724A61C2-A9C7-3F23-B778-58CA7E09DA03}']
  { getters & setters } 

    function get_HeaderFooterManager: DNILayoutSlideHeaderFooterManager;
    function get_MasterSlide: DNIMasterSlide;
    procedure set_MasterSlide(value: DNIMasterSlide);
    function get_ThemeManager: DNIOverrideThemeManager;
    function get_LayoutType: DNSlideLayoutType;
    function get_HasDependingSlides: Boolean;
    function get_ShowMasterShapes: Boolean;
    procedure set_ShowMasterShapes(value: Boolean);
    function get_Shapes: DNIShapeCollection;
    function get_Controls: DNIControlCollection;
    function get_Name: string;
    procedure set_Name(value: string);
    function get_SlideId: UInt32;
    function get_CustomData: DNICustomData;
    function get_Timeline: DNIAnimationTimeLine;
    function get_SlideShowTransition: DNISlideShowTransition;
    function get_Background: DNIBackground;
    function get_HyperlinkQueries: DNIHyperlinkQueries;
    function get_Presentation: DNIPresentation;

  { methods } 

    function GetDependingSlides: TArray<DNISlide>;
    function Equals(slide: DNIBaseSlide): Boolean; overload;
    procedure JoinPortionsWithSameFormatting; overload;
    procedure JoinPortionsWithSameFormatting(collection: DNIShapeCollection); overload;
    function CreateThemeEffective: DNIThemeEffectiveData;
    function FindShapeByAltText(altText: string): DNIShape;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean; overload;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property HeaderFooterManager: DNILayoutSlideHeaderFooterManager read get_HeaderFooterManager;
    property MasterSlide: DNIMasterSlide read get_MasterSlide write set_MasterSlide;
    property ThemeManager: DNIOverrideThemeManager read get_ThemeManager;
    property LayoutType: DNSlideLayoutType read get_LayoutType;
    property HasDependingSlides: Boolean read get_HasDependingSlides;
    property ShowMasterShapes: Boolean read get_ShowMasterShapes write set_ShowMasterShapes;
    property Shapes: DNIShapeCollection read get_Shapes;
    property Controls: DNIControlCollection read get_Controls;
    property Name: string read get_Name write set_Name;
    property SlideId: UInt32 read get_SlideId;
    property CustomData: DNICustomData read get_CustomData;
    property Timeline: DNIAnimationTimeLine read get_Timeline;
    property SlideShowTransition: DNISlideShowTransition read get_SlideShowTransition;
    property Background: DNIBackground read get_Background;
    property HyperlinkQueries: DNIHyperlinkQueries read get_HyperlinkQueries;
    property Presentation: DNIPresentation read get_Presentation;
  end;

  TDNLayoutSlide = class(TDNGenericImport<DNLayoutSlideClass, DNLayoutSlide>) end;

  //-------------namespace: Aspose.Slides----------------
  DNMasterHandoutSlideClass = interface(DNBaseSlideClass)
  ['{F89E381A-8F26-5238-B409-1BAA4AAA17A6}']
  end;

  [DNTypeName('Aspose.Slides.MasterHandoutSlide')]
  DNMasterHandoutSlide = interface(DNBaseSlide)
  ['{3677F475-914F-3855-8131-553E8FF32513}']
  { getters & setters } 

    function get_ShowMasterShapes: Boolean;
    procedure set_ShowMasterShapes(value: Boolean);
    function get_HeaderFooterManager: DNIMasterHandoutSlideHeaderFooterManager;
    function get_ThemeManager: DNIMasterThemeManager;
    function get_Shapes: DNIShapeCollection;
    function get_Controls: DNIControlCollection;
    function get_Name: string;
    procedure set_Name(value: string);
    function get_SlideId: UInt32;
    function get_CustomData: DNICustomData;
    function get_Timeline: DNIAnimationTimeLine;
    function get_SlideShowTransition: DNISlideShowTransition;
    function get_Background: DNIBackground;
    function get_HyperlinkQueries: DNIHyperlinkQueries;
    function get_Presentation: DNIPresentation;

  { methods } 

    function Equals(slide: DNIBaseSlide): Boolean; overload;
    procedure JoinPortionsWithSameFormatting; overload;
    procedure JoinPortionsWithSameFormatting(collection: DNIShapeCollection); overload;
    function CreateThemeEffective: DNIThemeEffectiveData;
    function FindShapeByAltText(altText: string): DNIShape;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean; overload;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property ShowMasterShapes: Boolean read get_ShowMasterShapes write set_ShowMasterShapes;
    property HeaderFooterManager: DNIMasterHandoutSlideHeaderFooterManager read get_HeaderFooterManager;
    property ThemeManager: DNIMasterThemeManager read get_ThemeManager;
    property Shapes: DNIShapeCollection read get_Shapes;
    property Controls: DNIControlCollection read get_Controls;
    property Name: string read get_Name write set_Name;
    property SlideId: UInt32 read get_SlideId;
    property CustomData: DNICustomData read get_CustomData;
    property Timeline: DNIAnimationTimeLine read get_Timeline;
    property SlideShowTransition: DNISlideShowTransition read get_SlideShowTransition;
    property Background: DNIBackground read get_Background;
    property HyperlinkQueries: DNIHyperlinkQueries read get_HyperlinkQueries;
    property Presentation: DNIPresentation read get_Presentation;
  end;

  TDNMasterHandoutSlide = class(TDNGenericImport<DNMasterHandoutSlideClass, DNMasterHandoutSlide>) end;

  //-------------namespace: Aspose.Slides----------------
  DNMasterNotesSlideClass = interface(DNBaseSlideClass)
  ['{2DBBF7D4-DABC-5987-82A5-D5D236FAA18B}']
  end;

  [DNTypeName('Aspose.Slides.MasterNotesSlide')]
  DNMasterNotesSlide = interface(DNBaseSlide)
  ['{99A32AE6-66F8-3105-85D5-EA653D38A00C}']
  { getters & setters } 

    function get_ShowMasterShapes: Boolean;
    procedure set_ShowMasterShapes(value: Boolean);
    function get_HeaderFooterManager: DNIMasterNotesSlideHeaderFooterManager;
    function get_ThemeManager: DNIMasterThemeManager;
    function get_NotesStyle: DNITextStyle;
    function get_Shapes: DNIShapeCollection;
    function get_Controls: DNIControlCollection;
    function get_Name: string;
    procedure set_Name(value: string);
    function get_SlideId: UInt32;
    function get_CustomData: DNICustomData;
    function get_Timeline: DNIAnimationTimeLine;
    function get_SlideShowTransition: DNISlideShowTransition;
    function get_Background: DNIBackground;
    function get_HyperlinkQueries: DNIHyperlinkQueries;
    function get_Presentation: DNIPresentation;

  { methods } 

    function Equals(slide: DNIBaseSlide): Boolean; overload;
    procedure JoinPortionsWithSameFormatting; overload;
    procedure JoinPortionsWithSameFormatting(collection: DNIShapeCollection); overload;
    function CreateThemeEffective: DNIThemeEffectiveData;
    function FindShapeByAltText(altText: string): DNIShape;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean; overload;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property ShowMasterShapes: Boolean read get_ShowMasterShapes write set_ShowMasterShapes;
    property HeaderFooterManager: DNIMasterNotesSlideHeaderFooterManager read get_HeaderFooterManager;
    property ThemeManager: DNIMasterThemeManager read get_ThemeManager;
    property NotesStyle: DNITextStyle read get_NotesStyle;
    property Shapes: DNIShapeCollection read get_Shapes;
    property Controls: DNIControlCollection read get_Controls;
    property Name: string read get_Name write set_Name;
    property SlideId: UInt32 read get_SlideId;
    property CustomData: DNICustomData read get_CustomData;
    property Timeline: DNIAnimationTimeLine read get_Timeline;
    property SlideShowTransition: DNISlideShowTransition read get_SlideShowTransition;
    property Background: DNIBackground read get_Background;
    property HyperlinkQueries: DNIHyperlinkQueries read get_HyperlinkQueries;
    property Presentation: DNIPresentation read get_Presentation;
  end;

  TDNMasterNotesSlide = class(TDNGenericImport<DNMasterNotesSlideClass, DNMasterNotesSlide>) end;

  //-------------namespace: Aspose.Slides----------------
  DNMasterSlideClass = interface(DNBaseSlideClass)
  ['{082B1536-D238-529A-806F-DC977FF26B50}']
  end;

  [DNTypeName('Aspose.Slides.MasterSlide')]
  DNMasterSlide = interface(DNBaseSlide)
  ['{D15FFD94-209F-36C1-A86F-209BA6FB912E}']
  { getters & setters } 

    function get_HeaderFooterManager: DNIMasterSlideHeaderFooterManager;
    function get_TitleStyle: DNITextStyle;
    function get_BodyStyle: DNITextStyle;
    function get_OtherStyle: DNITextStyle;
    function get_LayoutSlides: DNIMasterLayoutSlideCollection;
    function get_Preserve: Boolean;
    procedure set_Preserve(value: Boolean);
    function get_HasDependingSlides: Boolean;
    function get_ThemeManager: DNIMasterThemeManager;
    function get_Name: string;
    procedure set_Name(value: string);
    function get_ShowMasterShapes: Boolean;
    procedure set_ShowMasterShapes(value: Boolean);
    function get_Shapes: DNIShapeCollection;
    function get_Controls: DNIControlCollection;
    function get_SlideId: UInt32;
    function get_CustomData: DNICustomData;
    function get_Timeline: DNIAnimationTimeLine;
    function get_SlideShowTransition: DNISlideShowTransition;
    function get_Background: DNIBackground;
    function get_HyperlinkQueries: DNIHyperlinkQueries;
    function get_Presentation: DNIPresentation;

  { methods } 

    function ApplyExternalThemeToDependingSlides(fname: string): DNIMasterSlide;
    function GetDependingSlides: TArray<DNISlide>;
    function Equals(slide: DNIBaseSlide): Boolean; overload;
    procedure JoinPortionsWithSameFormatting; overload;
    procedure JoinPortionsWithSameFormatting(collection: DNIShapeCollection); overload;
    function CreateThemeEffective: DNIThemeEffectiveData;
    function FindShapeByAltText(altText: string): DNIShape;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean; overload;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property HeaderFooterManager: DNIMasterSlideHeaderFooterManager read get_HeaderFooterManager;
    property TitleStyle: DNITextStyle read get_TitleStyle;
    property BodyStyle: DNITextStyle read get_BodyStyle;
    property OtherStyle: DNITextStyle read get_OtherStyle;
    property LayoutSlides: DNIMasterLayoutSlideCollection read get_LayoutSlides;
    property Preserve: Boolean read get_Preserve write set_Preserve;
    property HasDependingSlides: Boolean read get_HasDependingSlides;
    property ThemeManager: DNIMasterThemeManager read get_ThemeManager;
    property Name: string read get_Name write set_Name;
    property ShowMasterShapes: Boolean read get_ShowMasterShapes write set_ShowMasterShapes;
    property Shapes: DNIShapeCollection read get_Shapes;
    property Controls: DNIControlCollection read get_Controls;
    property SlideId: UInt32 read get_SlideId;
    property CustomData: DNICustomData read get_CustomData;
    property Timeline: DNIAnimationTimeLine read get_Timeline;
    property SlideShowTransition: DNISlideShowTransition read get_SlideShowTransition;
    property Background: DNIBackground read get_Background;
    property HyperlinkQueries: DNIHyperlinkQueries read get_HyperlinkQueries;
    property Presentation: DNIPresentation read get_Presentation;
  end;

  TDNMasterSlide = class(TDNGenericImport<DNMasterSlideClass, DNMasterSlide>) end;

  //-------------namespace: Aspose.Slides----------------
  DNNotesSlideClass = interface(DNBaseSlideClass)
  ['{74D694CD-C61E-56F6-B976-B333263E91A0}']
  end;

  [DNTypeName('Aspose.Slides.NotesSlide')]
  DNNotesSlide = interface(DNBaseSlide)
  ['{25DC4200-AFC1-33AE-A96B-3FB4922BA253}']
  { getters & setters } 

    function get_HeaderFooterManager: DNINotesSlideHeaderFooterManager;
    function get_NotesTextFrame: DNITextFrame;
    function get_ThemeManager: DNIOverrideThemeManager;
    function get_ParentSlide: DNISlide;
    function get_ShowMasterShapes: Boolean;
    procedure set_ShowMasterShapes(value: Boolean);
    function get_Shapes: DNIShapeCollection;
    function get_Controls: DNIControlCollection;
    function get_Name: string;
    procedure set_Name(value: string);
    function get_SlideId: UInt32;
    function get_CustomData: DNICustomData;
    function get_Timeline: DNIAnimationTimeLine;
    function get_SlideShowTransition: DNISlideShowTransition;
    function get_Background: DNIBackground;
    function get_HyperlinkQueries: DNIHyperlinkQueries;
    function get_Presentation: DNIPresentation;

  { methods } 

    function Equals(slide: DNIBaseSlide): Boolean; overload;
    procedure JoinPortionsWithSameFormatting; overload;
    procedure JoinPortionsWithSameFormatting(collection: DNIShapeCollection); overload;
    function CreateThemeEffective: DNIThemeEffectiveData;
    function FindShapeByAltText(altText: string): DNIShape;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean; overload;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property HeaderFooterManager: DNINotesSlideHeaderFooterManager read get_HeaderFooterManager;
    property NotesTextFrame: DNITextFrame read get_NotesTextFrame;
    property ThemeManager: DNIOverrideThemeManager read get_ThemeManager;
    property ParentSlide: DNISlide read get_ParentSlide;
    property ShowMasterShapes: Boolean read get_ShowMasterShapes write set_ShowMasterShapes;
    property Shapes: DNIShapeCollection read get_Shapes;
    property Controls: DNIControlCollection read get_Controls;
    property Name: string read get_Name write set_Name;
    property SlideId: UInt32 read get_SlideId;
    property CustomData: DNICustomData read get_CustomData;
    property Timeline: DNIAnimationTimeLine read get_Timeline;
    property SlideShowTransition: DNISlideShowTransition read get_SlideShowTransition;
    property Background: DNIBackground read get_Background;
    property HyperlinkQueries: DNIHyperlinkQueries read get_HyperlinkQueries;
    property Presentation: DNIPresentation read get_Presentation;
  end;

  TDNNotesSlide = class(TDNGenericImport<DNNotesSlideClass, DNNotesSlide>) end;

  //-------------namespace: Aspose.Slides----------------
  DNSlideClass = interface(DNBaseSlideClass)
  ['{C9F1929A-A5B7-5400-B063-3448FDDB8040}']
  end;

  [DNTypeName('Aspose.Slides.Slide')]
  DNSlide = interface(DNBaseSlide)
  ['{A99E2439-2B9A-34B0-83FA-84BAD58CCB48}']
  { getters & setters } 

    function get_HeaderFooterManager: DNISlideHeaderFooterManager;
    function get_ThemeManager: DNIOverrideThemeManager;
    function get_SlideNumber: Int32;
    procedure set_SlideNumber(value: Int32);
    function get_Hidden: Boolean;
    procedure set_Hidden(value: Boolean);
    function get_ShowMasterShapes: Boolean;
    procedure set_ShowMasterShapes(value: Boolean);
    function get_LayoutSlide: DNILayoutSlide;
    procedure set_LayoutSlide(value: DNILayoutSlide);
    function get_NotesSlideManager: DNINotesSlideManager;
    function get_Shapes: DNIShapeCollection;
    function get_Controls: DNIControlCollection;
    function get_Name: string;
    procedure set_Name(value: string);
    function get_SlideId: UInt32;
    function get_CustomData: DNICustomData;
    function get_Timeline: DNIAnimationTimeLine;
    function get_SlideShowTransition: DNISlideShowTransition;
    function get_Background: DNIBackground;
    function get_HyperlinkQueries: DNIHyperlinkQueries;
    function get_Presentation: DNIPresentation;

  { methods } 

    function GetThumbnail(scaleX: Single; scaleY: Single): DDN.System.Drawing.DNBitmap; overload;
    function GetThumbnail: DDN.System.Drawing.DNBitmap; overload;
    function GetThumbnail(imageSize: DDN.System.Drawing.DNSize): DDN.System.Drawing.DNBitmap; overload;
    function GetThumbnail(options: DNITiffOptions): DDN.System.Drawing.DNBitmap; overload;
    function GetThumbnail(notesCommentsLayouting: DNINotesCommentsLayoutingOptions): DDN.System.Drawing.DNBitmap; overload;
    function GetThumbnail(notesCommentsLayouting: DNINotesCommentsLayoutingOptions; scaleX: Single; scaleY: Single): DDN.System.Drawing.DNBitmap; overload;
    function GetThumbnail(notesCommentsLayouting: DNINotesCommentsLayoutingOptions; imageSize: DDN.System.Drawing.DNSize): DDN.System.Drawing.DNBitmap; overload;
    function GetThumbnail(options: DNIRenderingOptions): DDN.System.Drawing.DNBitmap; overload;
    function GetThumbnail(options: DNIRenderingOptions; scaleX: Single; scaleY: Single): DDN.System.Drawing.DNBitmap; overload;
    function GetThumbnail(options: DNIRenderingOptions; imageSize: DDN.System.Drawing.DNSize): DDN.System.Drawing.DNBitmap; overload;
    procedure RenderToGraphics(notesCommentsLayouting: DNINotesCommentsLayoutingOptions; graphics: DDN.System.Drawing.DNGraphics; width: Int32; height: Int32); overload;
    procedure RenderToGraphics(notesCommentsLayouting: DNINotesCommentsLayoutingOptions; graphics: DDN.System.Drawing.DNGraphics; scale: Single); overload;
    procedure RenderToGraphics(notesCommentsLayouting: DNINotesCommentsLayoutingOptions; graphics: DDN.System.Drawing.DNGraphics); overload;
    procedure RenderToGraphics(options: DNIRenderingOptions; graphics: DDN.System.Drawing.DNGraphics); overload;
    procedure RenderToGraphics(options: DNIRenderingOptions; graphics: DDN.System.Drawing.DNGraphics; scaleX: Single; scaleY: Single); overload;
    procedure RenderToGraphics(options: DNIRenderingOptions; graphics: DDN.System.Drawing.DNGraphics; renderingSize: DDN.System.Drawing.DNSize); overload;
    procedure WriteAsSvg(stream: DDN.mscorlib.DNStream); overload;
    procedure WriteAsSvg(stream: DDN.mscorlib.DNStream; svgOptions: DNISVGOptions); overload;
    procedure Reset;
    function GetSlideComments(author: DNICommentAuthor): TArray<DNIComment>;
    procedure JoinPortionsWithSameFormatting; overload;
    function Equals(slide: DNIBaseSlide): Boolean; overload;
    procedure JoinPortionsWithSameFormatting(collection: DNIShapeCollection); overload;
    function CreateThemeEffective: DNIThemeEffectiveData;
    function FindShapeByAltText(altText: string): DNIShape;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean; overload;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property HeaderFooterManager: DNISlideHeaderFooterManager read get_HeaderFooterManager;
    property ThemeManager: DNIOverrideThemeManager read get_ThemeManager;
    property SlideNumber: Int32 read get_SlideNumber write set_SlideNumber;
    property Hidden: Boolean read get_Hidden write set_Hidden;
    property ShowMasterShapes: Boolean read get_ShowMasterShapes write set_ShowMasterShapes;
    property LayoutSlide: DNILayoutSlide read get_LayoutSlide write set_LayoutSlide;
    property NotesSlideManager: DNINotesSlideManager read get_NotesSlideManager;
    property Shapes: DNIShapeCollection read get_Shapes;
    property Controls: DNIControlCollection read get_Controls;
    property Name: string read get_Name write set_Name;
    property SlideId: UInt32 read get_SlideId;
    property CustomData: DNICustomData read get_CustomData;
    property Timeline: DNIAnimationTimeLine read get_Timeline;
    property SlideShowTransition: DNISlideShowTransition read get_SlideShowTransition;
    property Background: DNIBackground read get_Background;
    property HyperlinkQueries: DNIHyperlinkQueries read get_HyperlinkQueries;
    property Presentation: DNIPresentation read get_Presentation;
  end;

  TDNSlide = class(TDNGenericImport<DNSlideClass, DNSlide>) end;

  //-------------namespace: Aspose.Slides----------------
  DNBlobManagementOptionsClass = interface(DNObjectClass)
  ['{03A092D2-6D6B-5465-AFA6-4E07DEE9FB4F}']
  { constructors } 

    {class} function init: DNBlobManagementOptions;

  end;

  [DNTypeName('Aspose.Slides.BlobManagementOptions')]
  DNBlobManagementOptions = interface(DNIBlobManagementOptions)
  ['{0C1C9350-276A-4B5F-946A-67E9F691C4E5}']
  { getters & setters } 

    function get_PresentationLockingBehavior: DNPresentationLockingBehavior;
    procedure set_PresentationLockingBehavior(value: DNPresentationLockingBehavior);
    function get_IsTemporaryFilesAllowed: Boolean;
    procedure set_IsTemporaryFilesAllowed(value: Boolean);
    function get_TempFilesRootPath: string;
    procedure set_TempFilesRootPath(value: string);
    function get_MaxBlobsBytesInMemory: UInt64;
    procedure set_MaxBlobsBytesInMemory(value: UInt64);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property PresentationLockingBehavior: DNPresentationLockingBehavior read get_PresentationLockingBehavior write set_PresentationLockingBehavior;
    property IsTemporaryFilesAllowed: Boolean read get_IsTemporaryFilesAllowed write set_IsTemporaryFilesAllowed;
    property TempFilesRootPath: string read get_TempFilesRootPath write set_TempFilesRootPath;
    property MaxBlobsBytesInMemory: UInt64 read get_MaxBlobsBytesInMemory write set_MaxBlobsBytesInMemory;
  end;

  TDNBlobManagementOptions = class(TDNGenericImport<DNBlobManagementOptionsClass, DNBlobManagementOptions>) end;

  //-------------namespace: Aspose.Slides----------------
  DNBuildVersionInfoClass = interface(DDN.mscorlib.DNObjectClass)
  ['{B9DAA28A-C3B0-53E1-A608-401DAFCFEBDE}']
  { static fields getter & setter } 

   function __fakeFieldGet_AssemblyVersion: string;
   function __fakeFieldGet_FileVersion: string;
   function __fakeFieldGet_Product: string;
   function __fakeFieldGet_ProductMajor: Int32;
   function __fakeFieldGet_ProductMinor: Int32;
   function __fakeFieldGet_ReleaseDate: DDN.mscorlib.DNDateTime;

  { static fields } 

    {class} property AssemblyVersion: string read __fakeFieldGet_AssemblyVersion;
    {class} property FileVersion: string read __fakeFieldGet_FileVersion;
    {class} property Product: string read __fakeFieldGet_Product;
    {class} property ProductMajor: Int32 read __fakeFieldGet_ProductMajor;
    {class} property ProductMinor: Int32 read __fakeFieldGet_ProductMinor;
    {class} property ReleaseDate: DDN.mscorlib.DNDateTime read __fakeFieldGet_ReleaseDate;

  end;

  [DNTypeName('Aspose.Slides.BuildVersionInfo')]
  DNBuildVersionInfo = interface(DDN.mscorlib.DNObject)
  ['{7ED8EE34-7758-3B9C-BA33-700BF730D605}']
  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNBuildVersionInfo = class(TDNGenericImport<DNBuildVersionInfoClass, DNBuildVersionInfo>) end;

  //-------------namespace: Aspose.Slides----------------
  DNCellClass = interface(DDN.mscorlib.DNObjectClass)
  ['{E4B55AED-6796-5D6D-8B76-9A302D81D118}']
  end;

  [DNTypeName('Aspose.Slides.Cell')]
  DNCell = interface(DDN.mscorlib.DNObject)
  ['{92F63CCF-6453-3745-8F44-4271F032CD05}']
  { getters & setters } 

    function get_OffsetX: Double;
    function get_OffsetY: Double;
    function get_FirstRowIndex: Int32;
    function get_FirstColumnIndex: Int32;
    function get_Width: Double;
    function get_Height: Double;
    function get_MinimalHeight: Double;
    function get_MarginLeft: Double;
    procedure set_MarginLeft(value: Double);
    function get_MarginRight: Double;
    procedure set_MarginRight(value: Double);
    function get_MarginTop: Double;
    procedure set_MarginTop(value: Double);
    function get_MarginBottom: Double;
    procedure set_MarginBottom(value: Double);
    function get_TextVerticalType: DNTextVerticalType;
    procedure set_TextVerticalType(value: DNTextVerticalType);
    function get_TextAnchorType: DNTextAnchorType;
    procedure set_TextAnchorType(value: DNTextAnchorType);
    function get_AnchorCenter: Boolean;
    procedure set_AnchorCenter(value: Boolean);
    function get_FirstRow: DNIRow;
    function get_FirstColumn: DNIColumn;
    function get_ColSpan: Int32;
    function get_RowSpan: Int32;
    function get_TextFrame: DNITextFrame;
    function get_Table: DNITable;
    function get_IsMergedCell: Boolean;
    function get_CellFormat: DNICellFormat;
    function get_Slide: DNIBaseSlide;
    function get_Presentation: DNIPresentation;

  { methods } 

    procedure SplitByColSpan(index: Int32);
    procedure SplitByRowSpan(index: Int32);
    procedure SplitByHeight(height: Double);
    procedure SplitByWidth(width: Double);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property OffsetX: Double read get_OffsetX;
    property OffsetY: Double read get_OffsetY;
    property FirstRowIndex: Int32 read get_FirstRowIndex;
    property FirstColumnIndex: Int32 read get_FirstColumnIndex;
    property Width: Double read get_Width;
    property Height: Double read get_Height;
    property MinimalHeight: Double read get_MinimalHeight;
    property MarginLeft: Double read get_MarginLeft write set_MarginLeft;
    property MarginRight: Double read get_MarginRight write set_MarginRight;
    property MarginTop: Double read get_MarginTop write set_MarginTop;
    property MarginBottom: Double read get_MarginBottom write set_MarginBottom;
    property TextVerticalType: DNTextVerticalType read get_TextVerticalType write set_TextVerticalType;
    property TextAnchorType: DNTextAnchorType read get_TextAnchorType write set_TextAnchorType;
    property AnchorCenter: Boolean read get_AnchorCenter write set_AnchorCenter;
    property FirstRow: DNIRow read get_FirstRow;
    property FirstColumn: DNIColumn read get_FirstColumn;
    property ColSpan: Int32 read get_ColSpan;
    property RowSpan: Int32 read get_RowSpan;
    property TextFrame: DNITextFrame read get_TextFrame;
    property Table: DNITable read get_Table;
    property IsMergedCell: Boolean read get_IsMergedCell;
    property CellFormat: DNICellFormat read get_CellFormat;
    property Slide: DNIBaseSlide read get_Slide;
    property Presentation: DNIPresentation read get_Presentation;
  end;

  TDNCell = class(TDNGenericImport<DNCellClass, DNCell>) end;

  //-------------namespace: Aspose.Slides----------------
  DNCellCollectionClass = interface(DNObjectClass)
  ['{E3648188-3AB8-5513-95D3-4E8D2EC65C00}']
  end;

  [DNTypeName('Aspose.Slides.CellCollection')]
  DNCellCollection = interface(DDN.mscorlib.DNICollection)
  ['{C28D19B4-F836-3B5E-8F93-5F418D9D921C}']
  { getters & setters } 

    function get_Count: Int32;
    function get_Slide: DNIBaseSlide;
    function get_Presentation: DNIPresentation;
    function get_IsSynchronized: Boolean;
    function get_SyncRoot: DDN.mscorlib.DNObject;

  { methods } 

    function GetEnumerator: DDN.mscorlib.DNIEnumerator<DNICell>;
    procedure CopyTo(&array: DDN.mscorlib.DNArray; index: Int32);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Count: Int32 read get_Count;
    property Slide: DNIBaseSlide read get_Slide;
    property Presentation: DNIPresentation read get_Presentation;
    property IsSynchronized: Boolean read get_IsSynchronized;
    property SyncRoot: DDN.mscorlib.DNObject read get_SyncRoot;
  end;

  TDNCellCollection = class(TDNGenericImport<DNCellCollectionClass, DNCellCollection>) end;

  //-------------namespace: Aspose.Slides----------------
  DNColumnClass = interface(DNCellCollectionClass)
  ['{A7A1C751-125C-5537-B3FC-BC1BE23BE18F}']
  end;

  [DNTypeName('Aspose.Slides.Column')]
  DNColumn = interface(DNCellCollection)
  ['{31CDBA34-8B29-3F38-9792-80BB926F1BAC}']
  { getters & setters } 

    function get_Width: Double;
    procedure set_Width(value: Double);
    function get_ColumnFormat: DNIColumnFormat;
    function get_Count: Int32;
    function get_Slide: DNIBaseSlide;
    function get_Presentation: DNIPresentation;
    function get_IsSynchronized: Boolean;
    function get_SyncRoot: DDN.mscorlib.DNObject;

  { methods } 

    procedure SetTextFormat(source: DNIPortionFormat); overload;
    procedure SetTextFormat(source: DNIParagraphFormat); overload;
    procedure SetTextFormat(source: DNITextFrameFormat); overload;
    function GetEnumerator: DDN.mscorlib.DNIEnumerator<DNICell>;
    procedure CopyTo(&array: DDN.mscorlib.DNArray; index: Int32);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Width: Double read get_Width write set_Width;
    property ColumnFormat: DNIColumnFormat read get_ColumnFormat;
    property Count: Int32 read get_Count;
    property Slide: DNIBaseSlide read get_Slide;
    property Presentation: DNIPresentation read get_Presentation;
    property IsSynchronized: Boolean read get_IsSynchronized;
    property SyncRoot: DDN.mscorlib.DNObject read get_SyncRoot;
  end;

  TDNColumn = class(TDNGenericImport<DNColumnClass, DNColumn>) end;

  //-------------namespace: Aspose.Slides----------------
  DNRowClass = interface(DNCellCollectionClass)
  ['{50DFBA96-E4FC-5DA8-8AF1-6AEF529A2025}']
  end;

  [DNTypeName('Aspose.Slides.Row')]
  DNRow = interface(DNCellCollection)
  ['{A1A1828C-F999-30BB-99BD-52057B04FC1D}']
  { getters & setters } 

    function get_Height: Double;
    function get_MinimalHeight: Double;
    procedure set_MinimalHeight(value: Double);
    function get_RowFormat: DNIRowFormat;
    function get_Count: Int32;
    function get_Slide: DNIBaseSlide;
    function get_Presentation: DNIPresentation;
    function get_IsSynchronized: Boolean;
    function get_SyncRoot: DDN.mscorlib.DNObject;

  { methods } 

    procedure SetTextFormat(source: DNIPortionFormat); overload;
    procedure SetTextFormat(source: DNIParagraphFormat); overload;
    procedure SetTextFormat(source: DNITextFrameFormat); overload;
    function GetEnumerator: DDN.mscorlib.DNIEnumerator<DNICell>;
    procedure CopyTo(&array: DDN.mscorlib.DNArray; index: Int32);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Height: Double read get_Height;
    property MinimalHeight: Double read get_MinimalHeight write set_MinimalHeight;
    property RowFormat: DNIRowFormat read get_RowFormat;
    property Count: Int32 read get_Count;
    property Slide: DNIBaseSlide read get_Slide;
    property Presentation: DNIPresentation read get_Presentation;
    property IsSynchronized: Boolean read get_IsSynchronized;
    property SyncRoot: DDN.mscorlib.DNObject read get_SyncRoot;
  end;

  TDNRow = class(TDNGenericImport<DNRowClass, DNRow>) end;

  //-------------namespace: Aspose.Slides.Charts----------------
  DNAxesManagerClass = interface(DNObjectClass)
  ['{747694C6-B73B-59AE-8965-82FEAEBB8C1B}']
  end;

  [DNTypeName('Aspose.Slides.Charts.AxesManager')]
  DNAxesManager = interface(DNIAxesManager)
  ['{0E94793E-3A1E-38B5-A6BD-2CBD674383E1}']
  { getters & setters } 

    function get_HorizontalAxis: DNIAxis;
    function get_SecondaryHorizontalAxis: DNIAxis;
    function get_VerticalAxis: DNIAxis;
    function get_SecondaryVerticalAxis: DNIAxis;
    function get_SeriesAxis: DNIAxis;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property HorizontalAxis: DNIAxis read get_HorizontalAxis;
    property SecondaryHorizontalAxis: DNIAxis read get_SecondaryHorizontalAxis;
    property VerticalAxis: DNIAxis read get_VerticalAxis;
    property SecondaryVerticalAxis: DNIAxis read get_SecondaryVerticalAxis;
    property SeriesAxis: DNIAxis read get_SeriesAxis;
  end;

  TDNAxesManager = class(TDNGenericImport<DNAxesManagerClass, DNAxesManager>) end;

  //-------------namespace: Aspose.Slides.Charts----------------
  DNAxisClass = interface(DNObjectClass)
  ['{6412DF94-0C0A-52CA-A4C5-56A1359CDF4F}']
  end;

  [DNTypeName('Aspose.Slides.Charts.Axis')]
  DNAxis = interface(DNIAxis)
  ['{7F7278D4-A813-3E1F-BCF4-E100176762E6}']
  { getters & setters } 

    function get_Chart: DNIChart;
    function get_AxisBetweenCategories: Boolean;
    procedure set_AxisBetweenCategories(value: Boolean);
    function get_CategoryAxisType: DNCategoryAxisType;
    procedure set_CategoryAxisType(value: DNCategoryAxisType);
    function get_CrossAt: Single;
    procedure set_CrossAt(value: Single);
    function get_DisplayUnit: DNDisplayUnitType;
    procedure set_DisplayUnit(value: DNDisplayUnitType);
    function get_ActualMaxValue: Double;
    function get_ActualMinValue: Double;
    function get_ActualMajorUnit: Double;
    function get_ActualMinorUnit: Double;
    function get_ActualMajorUnitScale: DNTimeUnitType;
    function get_ActualMinorUnitScale: DNTimeUnitType;
    function get_IsAutomaticMaxValue: Boolean;
    procedure set_IsAutomaticMaxValue(value: Boolean);
    function get_MaxValue: Double;
    procedure set_MaxValue(value: Double);
    function get_MinorUnit: Double;
    procedure set_MinorUnit(value: Double);
    function get_IsAutomaticMinorUnit: Boolean;
    procedure set_IsAutomaticMinorUnit(value: Boolean);
    function get_MajorUnit: Double;
    procedure set_MajorUnit(value: Double);
    function get_IsAutomaticMajorUnit: Boolean;
    procedure set_IsAutomaticMajorUnit(value: Boolean);
    function get_IsAutomaticMinValue: Boolean;
    procedure set_IsAutomaticMinValue(value: Boolean);
    function get_MinValue: Double;
    procedure set_MinValue(value: Double);
    function get_IsLogarithmic: Boolean;
    procedure set_IsLogarithmic(value: Boolean);
    function get_LogBase: Double;
    procedure set_LogBase(value: Double);
    function get_IsPlotOrderReversed: Boolean;
    procedure set_IsPlotOrderReversed(value: Boolean);
    function get_IsVisible: Boolean;
    procedure set_IsVisible(value: Boolean);
    function get_MajorTickMark: DNTickMarkType;
    procedure set_MajorTickMark(value: DNTickMarkType);
    function get_MinorTickMark: DNTickMarkType;
    procedure set_MinorTickMark(value: DNTickMarkType);
    function get_TickLabelPosition: DNTickLabelPositionType;
    procedure set_TickLabelPosition(value: DNTickLabelPositionType);
    function get_MajorUnitScale: DNTimeUnitType;
    procedure set_MajorUnitScale(value: DNTimeUnitType);
    function get_MinorUnitScale: DNTimeUnitType;
    procedure set_MinorUnitScale(value: DNTimeUnitType);
    function get_BaseUnitScale: DNTimeUnitType;
    procedure set_BaseUnitScale(value: DNTimeUnitType);
    function get_MinorGridLinesFormat: DNIChartLinesFormat;
    function get_MajorGridLinesFormat: DNIChartLinesFormat;
    function get_ShowMinorGridLines: Boolean;
    function get_ShowMajorGridLines: Boolean;
    function get_Format: DNIAxisFormat;
    function get_TextFormat: DNIChartTextFormat;
    function get_Title: DNIChartTitle;
    function get_CrossType: DNCrossesType;
    procedure set_CrossType(value: DNCrossesType);
    function get_Position: DNAxisPositionType;
    procedure set_Position(value: DNAxisPositionType);
    function get_HasTitle: Boolean;
    procedure set_HasTitle(value: Boolean);
    function get_NumberFormat: string;
    procedure set_NumberFormat(value: string);
    function get_IsNumberFormatLinkedToSource: Boolean;
    procedure set_IsNumberFormatLinkedToSource(value: Boolean);
    function get_TickLabelRotationAngle: Single;
    procedure set_TickLabelRotationAngle(value: Single);
    function get_TickLabelSpacing: UInt32;
    procedure set_TickLabelSpacing(value: UInt32);
    function get_IsAutomaticTickLabelSpacing: Boolean;
    procedure set_IsAutomaticTickLabelSpacing(value: Boolean);
    function get_TickMarksSpacing: UInt32;
    procedure set_TickMarksSpacing(value: UInt32);
    function get_IsAutomaticTickMarksSpacing: Boolean;
    procedure set_IsAutomaticTickMarksSpacing(value: Boolean);
    function get_LabelOffset: UInt16;
    procedure set_LabelOffset(value: UInt16);
    function get_AggregationType: DNAxisAggregationType;
    procedure set_AggregationType(value: DNAxisAggregationType);
    function get_BinWidth: Double;
    procedure set_BinWidth(value: Double);
    function get_NumberOfBins: UInt32;
    procedure set_NumberOfBins(value: UInt32);
    function get_IsOverflowBin: Boolean;
    procedure set_IsOverflowBin(value: Boolean);
    function get_IsAutomaticOverflowBin: Boolean;
    procedure set_IsAutomaticOverflowBin(value: Boolean);
    function get_OverflowBin: Double;
    procedure set_OverflowBin(value: Double);
    function get_IsUnderflowBin: Boolean;
    procedure set_IsUnderflowBin(value: Boolean);
    function get_IsAutomaticUnderflowBin: Boolean;
    procedure set_IsAutomaticUnderflowBin(value: Boolean);
    function get_UnderflowBin: Double;
    procedure set_UnderflowBin(value: Double);

  { methods } 

    procedure SetCategoryAxisTypeAutomatically;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Chart: DNIChart read get_Chart;
    property AxisBetweenCategories: Boolean read get_AxisBetweenCategories write set_AxisBetweenCategories;
    property CategoryAxisType: DNCategoryAxisType read get_CategoryAxisType write set_CategoryAxisType;
    property CrossAt: Single read get_CrossAt write set_CrossAt;
    property DisplayUnit: DNDisplayUnitType read get_DisplayUnit write set_DisplayUnit;
    property ActualMaxValue: Double read get_ActualMaxValue;
    property ActualMinValue: Double read get_ActualMinValue;
    property ActualMajorUnit: Double read get_ActualMajorUnit;
    property ActualMinorUnit: Double read get_ActualMinorUnit;
    property ActualMajorUnitScale: DNTimeUnitType read get_ActualMajorUnitScale;
    property ActualMinorUnitScale: DNTimeUnitType read get_ActualMinorUnitScale;
    property IsAutomaticMaxValue: Boolean read get_IsAutomaticMaxValue write set_IsAutomaticMaxValue;
    property MaxValue: Double read get_MaxValue write set_MaxValue;
    property MinorUnit: Double read get_MinorUnit write set_MinorUnit;
    property IsAutomaticMinorUnit: Boolean read get_IsAutomaticMinorUnit write set_IsAutomaticMinorUnit;
    property MajorUnit: Double read get_MajorUnit write set_MajorUnit;
    property IsAutomaticMajorUnit: Boolean read get_IsAutomaticMajorUnit write set_IsAutomaticMajorUnit;
    property IsAutomaticMinValue: Boolean read get_IsAutomaticMinValue write set_IsAutomaticMinValue;
    property MinValue: Double read get_MinValue write set_MinValue;
    property IsLogarithmic: Boolean read get_IsLogarithmic write set_IsLogarithmic;
    property LogBase: Double read get_LogBase write set_LogBase;
    property IsPlotOrderReversed: Boolean read get_IsPlotOrderReversed write set_IsPlotOrderReversed;
    property IsVisible: Boolean read get_IsVisible write set_IsVisible;
    property MajorTickMark: DNTickMarkType read get_MajorTickMark write set_MajorTickMark;
    property MinorTickMark: DNTickMarkType read get_MinorTickMark write set_MinorTickMark;
    property TickLabelPosition: DNTickLabelPositionType read get_TickLabelPosition write set_TickLabelPosition;
    property MajorUnitScale: DNTimeUnitType read get_MajorUnitScale write set_MajorUnitScale;
    property MinorUnitScale: DNTimeUnitType read get_MinorUnitScale write set_MinorUnitScale;
    property BaseUnitScale: DNTimeUnitType read get_BaseUnitScale write set_BaseUnitScale;
    property MinorGridLinesFormat: DNIChartLinesFormat read get_MinorGridLinesFormat;
    property MajorGridLinesFormat: DNIChartLinesFormat read get_MajorGridLinesFormat;
    property ShowMinorGridLines: Boolean read get_ShowMinorGridLines;
    property ShowMajorGridLines: Boolean read get_ShowMajorGridLines;
    property Format: DNIAxisFormat read get_Format;
    property TextFormat: DNIChartTextFormat read get_TextFormat;
    property Title: DNIChartTitle read get_Title;
    property CrossType: DNCrossesType read get_CrossType write set_CrossType;
    property Position: DNAxisPositionType read get_Position write set_Position;
    property HasTitle: Boolean read get_HasTitle write set_HasTitle;
    property NumberFormat: string read get_NumberFormat write set_NumberFormat;
    property IsNumberFormatLinkedToSource: Boolean read get_IsNumberFormatLinkedToSource write set_IsNumberFormatLinkedToSource;
    property TickLabelRotationAngle: Single read get_TickLabelRotationAngle write set_TickLabelRotationAngle;
    property TickLabelSpacing: UInt32 read get_TickLabelSpacing write set_TickLabelSpacing;
    property IsAutomaticTickLabelSpacing: Boolean read get_IsAutomaticTickLabelSpacing write set_IsAutomaticTickLabelSpacing;
    property TickMarksSpacing: UInt32 read get_TickMarksSpacing write set_TickMarksSpacing;
    property IsAutomaticTickMarksSpacing: Boolean read get_IsAutomaticTickMarksSpacing write set_IsAutomaticTickMarksSpacing;
    property LabelOffset: UInt16 read get_LabelOffset write set_LabelOffset;
    property AggregationType: DNAxisAggregationType read get_AggregationType write set_AggregationType;
    property BinWidth: Double read get_BinWidth write set_BinWidth;
    property NumberOfBins: UInt32 read get_NumberOfBins write set_NumberOfBins;
    property IsOverflowBin: Boolean read get_IsOverflowBin write set_IsOverflowBin;
    property IsAutomaticOverflowBin: Boolean read get_IsAutomaticOverflowBin write set_IsAutomaticOverflowBin;
    property OverflowBin: Double read get_OverflowBin write set_OverflowBin;
    property IsUnderflowBin: Boolean read get_IsUnderflowBin write set_IsUnderflowBin;
    property IsAutomaticUnderflowBin: Boolean read get_IsAutomaticUnderflowBin write set_IsAutomaticUnderflowBin;
    property UnderflowBin: Double read get_UnderflowBin write set_UnderflowBin;
  end;

  TDNAxis = class(TDNGenericImport<DNAxisClass, DNAxis>) end;

  //-------------namespace: Aspose.Slides.Charts----------------
  DNAxisFormatClass = interface(DNObjectClass)
  ['{2EFA8F8C-C514-51FA-B34C-594D4489C26E}']
  end;

  [DNTypeName('Aspose.Slides.Charts.AxisFormat')]
  DNAxisFormat = interface(DNIAxisFormat)
  ['{B3FA9428-99FD-3555-A906-C7814076950F}']
  { getters & setters } 

    function get_Fill: DNIFillFormat;
    function get_Line: DNILineFormat;
    function get_Effect: DNIEffectFormat;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Fill: DNIFillFormat read get_Fill;
    property Line: DNILineFormat read get_Line;
    property Effect: DNIEffectFormat read get_Effect;
  end;

  TDNAxisFormat = class(TDNGenericImport<DNAxisFormatClass, DNAxisFormat>) end;

  //-------------namespace: Aspose.Slides.Charts----------------
  DNBaseChartValueClass = interface(DDN.mscorlib.DNObjectClass)
  ['{D020277F-0561-5BF9-A6A3-29338B76931F}']
  end;

  [DNTypeName('Aspose.Slides.Charts.BaseChartValue')]
  DNBaseChartValue = interface(DDN.mscorlib.DNObject)
  ['{D4DC9C77-D0F2-3881-814D-BD26A32A7D5F}']
  { getters & setters } 

    function get_DataSourceType: DNDataSourceType;
    procedure set_DataSourceType(value: DNDataSourceType);
    function get_Data: DDN.mscorlib.DNObject;
    procedure set_Data(value: DDN.mscorlib.DNObject);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property DataSourceType: DNDataSourceType read get_DataSourceType write set_DataSourceType;
    property Data: DDN.mscorlib.DNObject read get_Data write set_Data;
  end;

  TDNBaseChartValue = class(TDNGenericImport<DNBaseChartValueClass, DNBaseChartValue>) end;

  //-------------namespace: Aspose.Slides.Charts----------------
  DNDoubleChartValueClass = interface(DNBaseChartValueClass)
  ['{E3D15271-FBF3-55B3-8633-20782ACD4557}']
  end;

  [DNTypeName('Aspose.Slides.Charts.DoubleChartValue')]
  DNDoubleChartValue = interface(DNBaseChartValue)
  ['{C4A2AE82-7910-3C3D-A922-CB0FAB76EC92}']
  { getters & setters } 

    function get_AsCell: DNIChartDataCell;
    procedure set_AsCell(value: DNIChartDataCell);
    function get_AsLiteralDouble: Double;
    procedure set_AsLiteralDouble(value: Double);
    function get_Data: DDN.mscorlib.DNObject;
    procedure set_Data(value: DDN.mscorlib.DNObject);
    function get_DataSourceType: DNDataSourceType;
    procedure set_DataSourceType(value: DNDataSourceType);

  { methods } 

    function ToDouble: Double;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property AsCell: DNIChartDataCell read get_AsCell write set_AsCell;
    property AsLiteralDouble: Double read get_AsLiteralDouble write set_AsLiteralDouble;
    property Data: DDN.mscorlib.DNObject read get_Data write set_Data;
    property DataSourceType: DNDataSourceType read get_DataSourceType write set_DataSourceType;
  end;

  TDNDoubleChartValue = class(TDNGenericImport<DNDoubleChartValueClass, DNDoubleChartValue>) end;

  //-------------namespace: Aspose.Slides.Charts----------------
  DNStringChartValueClass = interface(DNBaseChartValueClass)
  ['{7D6E8E43-5F79-5A6D-BA7B-85346A7E1022}']
  end;

  [DNTypeName('Aspose.Slides.Charts.StringChartValue')]
  DNStringChartValue = interface(DNBaseChartValue)
  ['{FBE06C17-A71B-30E7-90BA-7506CA230887}']
  { getters & setters } 

    function get_AsCells: DNIChartCellCollection;
    procedure set_AsCells(value: DNIChartCellCollection);
    function get_AsLiteralString: string;
    procedure set_AsLiteralString(value: string);
    function get_Data: DDN.mscorlib.DNObject;
    procedure set_Data(value: DDN.mscorlib.DNObject);
    function get_DataSourceType: DNDataSourceType;
    procedure set_DataSourceType(value: DNDataSourceType);

  { methods } 

    function ToString: string;
    procedure SetFromOneCell(cell: DNIChartDataCell);
    function GetCellsAddressInWorkbook: string;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    property AsCells: DNIChartCellCollection read get_AsCells write set_AsCells;
    property AsLiteralString: string read get_AsLiteralString write set_AsLiteralString;
    property Data: DDN.mscorlib.DNObject read get_Data write set_Data;
    property DataSourceType: DNDataSourceType read get_DataSourceType write set_DataSourceType;
  end;

  TDNStringChartValue = class(TDNGenericImport<DNStringChartValueClass, DNStringChartValue>) end;

  //-------------namespace: Aspose.Slides.Charts----------------
  DNStringOrDoubleChartValueClass = interface(DNBaseChartValueClass)
  ['{0B2036D5-79B7-50D3-BF45-F4BAC2B66BFB}']
  end;

  [DNTypeName('Aspose.Slides.Charts.StringOrDoubleChartValue')]
  DNStringOrDoubleChartValue = interface(DNBaseChartValue)
  ['{3E58B255-5743-3606-BE8B-CCEB06976D96}']
  { getters & setters } 

    function get_AsCell: DNIChartDataCell;
    procedure set_AsCell(value: DNIChartDataCell);
    function get_AsLiteralString: string;
    procedure set_AsLiteralString(value: string);
    function get_AsLiteralDouble: Double;
    procedure set_AsLiteralDouble(value: Double);
    function get_Data: DDN.mscorlib.DNObject;
    procedure set_Data(value: DDN.mscorlib.DNObject);
    function get_DataSourceType: DNDataSourceType;
    procedure set_DataSourceType(value: DNDataSourceType);

  { methods } 

    function ToDouble: Double;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property AsCell: DNIChartDataCell read get_AsCell write set_AsCell;
    property AsLiteralString: string read get_AsLiteralString write set_AsLiteralString;
    property AsLiteralDouble: Double read get_AsLiteralDouble write set_AsLiteralDouble;
    property Data: DDN.mscorlib.DNObject read get_Data write set_Data;
    property DataSourceType: DNDataSourceType read get_DataSourceType write set_DataSourceType;
  end;

  TDNStringOrDoubleChartValue = class(TDNGenericImport<DNStringOrDoubleChartValueClass, DNStringOrDoubleChartValue>) end;

  //-------------namespace: Aspose.Slides.Charts----------------
  DNChartCategoryClass = interface(DDN.mscorlib.DNObjectClass)
  ['{126E0D79-6460-5865-9819-37A13C87C2C8}']
  end;

  [DNTypeName('Aspose.Slides.Charts.ChartCategory')]
  DNChartCategory = interface(DDN.mscorlib.DNObject)
  ['{2467F818-9B2F-3A6F-AA93-8368C835A8D8}']
  { getters & setters } 

    function get_UseCell: Boolean;
    function get_AsCell: DNIChartDataCell;
    procedure set_AsCell(value: DNIChartDataCell);
    function get_AsLiteral: DDN.mscorlib.DNObject;
    procedure set_AsLiteral(value: DDN.mscorlib.DNObject);
    function get_Value: DDN.mscorlib.DNObject;
    procedure set_Value(value: DDN.mscorlib.DNObject);
    function get_GroupingLevels: DNIChartCategoryLevelsManager;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property UseCell: Boolean read get_UseCell;
    property AsCell: DNIChartDataCell read get_AsCell write set_AsCell;
    property AsLiteral: DDN.mscorlib.DNObject read get_AsLiteral write set_AsLiteral;
    property Value: DDN.mscorlib.DNObject read get_Value write set_Value;
    property GroupingLevels: DNIChartCategoryLevelsManager read get_GroupingLevels;
  end;

  TDNChartCategory = class(TDNGenericImport<DNChartCategoryClass, DNChartCategory>) end;

  //-------------namespace: Aspose.Slides.Charts----------------
  DNChartCategoryCollectionClass = interface(DNObjectClass)
  ['{9711775A-FAA1-5115-9889-43EE683E478B}']
  end;

  [DNTypeName('Aspose.Slides.Charts.ChartCategoryCollection')]
  DNChartCategoryCollection = interface(DDN.mscorlib.DNICollection)
  ['{76390BCE-63C6-3D95-9AA0-09FA0E3A9B55}']
  { getters & setters } 

    function get_UseCells: Boolean;
    procedure set_UseCells(value: Boolean);
    function get_GroupingLevelCount: Int32;
    function get_Count: Int32;
    function get_IsSynchronized: Boolean;
    function get_SyncRoot: DDN.mscorlib.DNObject;

  { methods } 

    function IndexOf(value: DNIChartCategory): Int32;
    procedure RemoveAt(index: Int32);
    function GetEnumerator: DDN.mscorlib.DNIEnumerator<DNIChartCategory>;
    procedure CopyTo(&array: DDN.mscorlib.DNArray; index: Int32);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property UseCells: Boolean read get_UseCells write set_UseCells;
    property GroupingLevelCount: Int32 read get_GroupingLevelCount;
    property Count: Int32 read get_Count;
    property IsSynchronized: Boolean read get_IsSynchronized;
    property SyncRoot: DDN.mscorlib.DNObject read get_SyncRoot;
  end;

  TDNChartCategoryCollection = class(TDNGenericImport<DNChartCategoryCollectionClass, DNChartCategoryCollection>) end;

  //-------------namespace: Aspose.Slides.Charts----------------
  DNChartCategoryLevelsManagerClass = interface(DNObjectClass)
  ['{410A16FB-1E24-5D37-ADBA-B4E6D529F2F9}']
  end;

  [DNTypeName('Aspose.Slides.Charts.ChartCategoryLevelsManager')]
  DNChartCategoryLevelsManager = interface(DNIChartCategoryLevelsManager)
  ['{1547FB67-F9B2-31F2-A239-9E58B1F17D1E}']
  { methods } 

    procedure SetGroupingItem(level: Int32; value: DDN.mscorlib.DNObject);
    procedure DeleteGroupingItem(level: Int32);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNChartCategoryLevelsManager = class(TDNGenericImport<DNChartCategoryLevelsManagerClass, DNChartCategoryLevelsManager>) end;

  //-------------namespace: Aspose.Slides.Charts----------------
  DNChartCellCollectionClass = interface(DNObjectClass)
  ['{66521374-ED29-5F75-BE54-4A299FE1051C}']
  end;

  [DNTypeName('Aspose.Slides.Charts.ChartCellCollection')]
  DNChartCellCollection = interface(DDN.mscorlib.DNIEnumerable)
  ['{BD651C93-D3A0-3FAE-8158-EAE43EED51E7}']
  { getters & setters } 

    function get_Count: Int32;

  { methods } 

    function GetCellsAddress: string;
    function GetConcatenatedValuesFromCells: string;
    procedure RemoveAt(index: Int32);
    function GetEnumerator: DDN.mscorlib.DNIEnumerator<DNIChartDataCell>;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Count: Int32 read get_Count;
  end;

  TDNChartCellCollection = class(TDNGenericImport<DNChartCellCollectionClass, DNChartCellCollection>) end;

  //-------------namespace: Aspose.Slides.Charts----------------
  DNChartDataClass = interface(DNObjectClass)
  ['{4EA5FE4A-2D7A-5118-AD15-3682B0A63913}']
  end;

  [DNTypeName('Aspose.Slides.Charts.ChartData')]
  DNChartData = interface(DNIChartData)
  ['{C411A3CD-0292-344D-8564-432FD776B05C}']
  { getters & setters } 

    function get_ChartDataWorkbook: DNIChartDataWorkbook;
    function get_Series: DNIChartSeriesCollection;
    function get_SeriesGroups: DNIChartSeriesGroupCollection;
    function get_Categories: DNIChartCategoryCollection;
    function get_UseSecondaryCategories: Boolean;
    procedure set_UseSecondaryCategories(value: Boolean);
    function get_SecondaryCategories: DNIChartCategoryCollection;
    function get_DataSourceType: DNChartDataSourceType;
    function get_ExternalWorkbookPath: string;

  { methods } 

    function ReadWorkbookStream: DDN.mscorlib.DNMemoryStream;
    procedure WriteWorkbookStream(ms: DDN.mscorlib.DNMemoryStream);
    function GetRange: string;
    procedure SetRange(formula: string);
    procedure SetExternalWorkbook(workbookPath: string); overload;
    procedure SetExternalWorkbook(workbookPath: string; updateChartData: Boolean); overload;
    procedure SwitchRowColumn;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property ChartDataWorkbook: DNIChartDataWorkbook read get_ChartDataWorkbook;
    property Series: DNIChartSeriesCollection read get_Series;
    property SeriesGroups: DNIChartSeriesGroupCollection read get_SeriesGroups;
    property Categories: DNIChartCategoryCollection read get_Categories;
    property UseSecondaryCategories: Boolean read get_UseSecondaryCategories write set_UseSecondaryCategories;
    property SecondaryCategories: DNIChartCategoryCollection read get_SecondaryCategories;
    property DataSourceType: DNChartDataSourceType read get_DataSourceType;
    property ExternalWorkbookPath: string read get_ExternalWorkbookPath;
  end;

  TDNChartData = class(TDNGenericImport<DNChartDataClass, DNChartData>) end;

  //-------------namespace: Aspose.Slides.Charts----------------
  DNChartDataCellClass = interface(DNObjectClass)
  ['{43758D76-84C3-56E9-B7A9-B327F1FFE411}']
  end;

  [DNTypeName('Aspose.Slides.Charts.ChartDataCell')]
  DNChartDataCell = interface(DNIChartDataCell)
  ['{47479CCF-6A34-3CA2-B717-CA9B3EB3F678}']
  { getters & setters } 

    function get_Row: Int32;
    function get_Column: Int32;
    function get_Value: DDN.mscorlib.DNObject;
    procedure set_Value(value: DDN.mscorlib.DNObject);
    function get_Formula: string;
    procedure set_Formula(value: string);
    function get_R1C1Formula: string;
    procedure set_R1C1Formula(value: string);
    function get_ChartDataWorksheet: DNIChartDataWorksheet;
    function get_IsHidden: Boolean;
    function get_CustomNumberFormat: string;
    procedure set_CustomNumberFormat(value: string);
    function get_PresetNumberFormat: Byte;
    procedure set_PresetNumberFormat(value: Byte);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Row: Int32 read get_Row;
    property Column: Int32 read get_Column;
    property Value: DDN.mscorlib.DNObject read get_Value write set_Value;
    property Formula: string read get_Formula write set_Formula;
    property R1C1Formula: string read get_R1C1Formula write set_R1C1Formula;
    property ChartDataWorksheet: DNIChartDataWorksheet read get_ChartDataWorksheet;
    property IsHidden: Boolean read get_IsHidden;
    property CustomNumberFormat: string read get_CustomNumberFormat write set_CustomNumberFormat;
    property PresetNumberFormat: Byte read get_PresetNumberFormat write set_PresetNumberFormat;
  end;

  TDNChartDataCell = class(TDNGenericImport<DNChartDataCellClass, DNChartDataCell>) end;

  //-------------namespace: Aspose.Slides.Charts----------------
  DNChartDataPointClass = interface(DDN.mscorlib.DNObjectClass)
  ['{1674392D-78E8-5FA1-BDBF-A72D26A78440}']
  end;

  [DNTypeName('Aspose.Slides.Charts.ChartDataPoint')]
  DNChartDataPoint = interface(DDN.mscorlib.DNObject)
  ['{877550C5-23A3-3A29-8B52-66E4B75EE98B}']
  { getters & setters } 

    function get_XValue: DNIStringOrDoubleChartValue;
    function get_YValue: DNIDoubleChartValue;
    function get_BubbleSize: DNIDoubleChartValue;
    function get_Value: DNIDoubleChartValue;
    function get_SizeValue: DNIDoubleChartValue;
    function get_ColorValue: DNIDoubleChartValue;
    function get_ErrorBarsCustomValues: DNIErrorBarsCustomValues;
    function get_Label: DNIDataLabel;
    function get_IsBubble3D: Boolean;
    procedure set_IsBubble3D(value: Boolean);
    function get_Explosion: Int32;
    procedure set_Explosion(value: Int32);
    function get_Format: DNIFormat;
    procedure set_Format(value: DNIFormat);
    function get_Marker: DNIMarker;
    function get_SetAsTotal: Boolean;
    procedure set_SetAsTotal(value: Boolean);
    function get_RelatedLegendEntry: DNILegendEntryProperties;
    function get_DataPointLevels: DNIChartDataPointLevelsManager;
    function get_InvertIfNegative: Boolean;
    procedure set_InvertIfNegative(value: Boolean);
    function get_ActualX: Single;
    function get_ActualY: Single;
    function get_ActualWidth: Single;
    function get_ActualHeight: Single;

  { methods } 

    function GetAutomaticDataPointColor: DDN.System.Drawing.DNColor;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property XValue: DNIStringOrDoubleChartValue read get_XValue;
    property YValue: DNIDoubleChartValue read get_YValue;
    property BubbleSize: DNIDoubleChartValue read get_BubbleSize;
    property Value: DNIDoubleChartValue read get_Value;
    property SizeValue: DNIDoubleChartValue read get_SizeValue;
    property ColorValue: DNIDoubleChartValue read get_ColorValue;
    property ErrorBarsCustomValues: DNIErrorBarsCustomValues read get_ErrorBarsCustomValues;
    property &Label: DNIDataLabel read get_Label;
    property IsBubble3D: Boolean read get_IsBubble3D write set_IsBubble3D;
    property Explosion: Int32 read get_Explosion write set_Explosion;
    property Format: DNIFormat read get_Format write set_Format;
    property Marker: DNIMarker read get_Marker;
    property SetAsTotal: Boolean read get_SetAsTotal write set_SetAsTotal;
    property RelatedLegendEntry: DNILegendEntryProperties read get_RelatedLegendEntry;
    property DataPointLevels: DNIChartDataPointLevelsManager read get_DataPointLevels;
    property InvertIfNegative: Boolean read get_InvertIfNegative write set_InvertIfNegative;
    property ActualX: Single read get_ActualX;
    property ActualY: Single read get_ActualY;
    property ActualWidth: Single read get_ActualWidth;
    property ActualHeight: Single read get_ActualHeight;
  end;

  TDNChartDataPoint = class(TDNGenericImport<DNChartDataPointClass, DNChartDataPoint>) end;

  //-------------namespace: Aspose.Slides.Charts----------------
  DNChartDataPointCollectionClass = interface(DNObjectClass)
  ['{D07B2A28-049B-5DC4-B250-C47C10C7D5A6}']
  end;

  [DNTypeName('Aspose.Slides.Charts.ChartDataPointCollection')]
  DNChartDataPointCollection = interface(DDN.mscorlib.DNICollection)
  ['{F79C2999-5E51-3DAC-AA77-76BA506484B7}']
  { getters & setters } 

    function get_DataSourceTypeForXValues: DNDataSourceType;
    procedure set_DataSourceTypeForXValues(value: DNDataSourceType);
    function get_DataSourceTypeForYValues: DNDataSourceType;
    procedure set_DataSourceTypeForYValues(value: DNDataSourceType);
    function get_DataSourceTypeForBubbleSizes: DNDataSourceType;
    procedure set_DataSourceTypeForBubbleSizes(value: DNDataSourceType);
    function get_DataSourceTypeForValues: DNDataSourceType;
    procedure set_DataSourceTypeForValues(value: DNDataSourceType);
    function get_DataSourceTypeForErrorBarsCustomValues: DNIDataSourceTypeForErrorBarsCustomValues;
    function get_Count: Int32;
    function get_IsSynchronized: Boolean;
    function get_SyncRoot: DDN.mscorlib.DNObject;

  { methods } 

    function GetOrCreateDataPointByIdx(index: UInt32): DNIChartDataPoint;
    procedure CopyTo(&array: DDN.mscorlib.DNArray; arrayIndex: Int32);
    function GetEnumerator: DDN.mscorlib.DNIEnumerator<DNIChartDataPoint>;
    function AddDataPointForStockSeries(value: DNIChartDataCell): DNIChartDataPoint; overload;
    function AddDataPointForStockSeries(value: Double): DNIChartDataPoint; overload;
    function AddDataPointForLineSeries(value: DNIChartDataCell): DNIChartDataPoint; overload;
    function AddDataPointForLineSeries(value: Double): DNIChartDataPoint; overload;
    function AddDataPointForScatterSeries(xValue: DNIChartDataCell; yValue: DNIChartDataCell): DNIChartDataPoint; overload;
    function AddDataPointForScatterSeries(xValue: Double; yValue: DNIChartDataCell): DNIChartDataPoint; overload;
    function AddDataPointForScatterSeries(xValue: string; yValue: DNIChartDataCell): DNIChartDataPoint; overload;
    function AddDataPointForScatterSeries(xValue: DNIChartDataCell; yValue: Double): DNIChartDataPoint; overload;
    function AddDataPointForScatterSeries(xValue: Double; yValue: Double): DNIChartDataPoint; overload;
    function AddDataPointForScatterSeries(xValue: string; yValue: Double): DNIChartDataPoint; overload;
    function AddDataPointForRadarSeries(value: DNIChartDataCell): DNIChartDataPoint; overload;
    function AddDataPointForRadarSeries(value: Double): DNIChartDataPoint; overload;
    function AddDataPointForBarSeries(value: DNIChartDataCell): DNIChartDataPoint; overload;
    function AddDataPointForBarSeries(value: Double): DNIChartDataPoint; overload;
    function AddDataPointForAreaSeries(value: DNIChartDataCell): DNIChartDataPoint; overload;
    function AddDataPointForAreaSeries(value: Double): DNIChartDataPoint; overload;
    function AddDataPointForPieSeries(value: DNIChartDataCell): DNIChartDataPoint; overload;
    function AddDataPointForPieSeries(value: Double): DNIChartDataPoint; overload;
    function AddDataPointForDoughnutSeries(value: DNIChartDataCell): DNIChartDataPoint; overload;
    function AddDataPointForDoughnutSeries(value: Double): DNIChartDataPoint; overload;
    function AddDataPointForBubbleSeries(xValue: DNIChartDataCell; yValue: DNIChartDataCell; bubbleSize: DNIChartDataCell): DNIChartDataPoint; overload;
    function AddDataPointForBubbleSeries(xValue: Double; yValue: DNIChartDataCell; bubbleSize: DNIChartDataCell): DNIChartDataPoint; overload;
    function AddDataPointForBubbleSeries(xValue: string; yValue: DNIChartDataCell; bubbleSize: DNIChartDataCell): DNIChartDataPoint; overload;
    function AddDataPointForBubbleSeries(xValue: DNIChartDataCell; yValue: Double; bubbleSize: DNIChartDataCell): DNIChartDataPoint; overload;
    function AddDataPointForBubbleSeries(xValue: Double; yValue: Double; bubbleSize: DNIChartDataCell): DNIChartDataPoint; overload;
    function AddDataPointForBubbleSeries(xValue: string; yValue: Double; bubbleSize: DNIChartDataCell): DNIChartDataPoint; overload;
    function AddDataPointForBubbleSeries(xValue: DNIChartDataCell; yValue: DNIChartDataCell; bubbleSize: Double): DNIChartDataPoint; overload;
    function AddDataPointForBubbleSeries(xValue: Double; yValue: DNIChartDataCell; bubbleSize: Double): DNIChartDataPoint; overload;
    function AddDataPointForBubbleSeries(xValue: string; yValue: DNIChartDataCell; bubbleSize: Double): DNIChartDataPoint; overload;
    function AddDataPointForBubbleSeries(xValue: DNIChartDataCell; yValue: Double; bubbleSize: Double): DNIChartDataPoint; overload;
    function AddDataPointForBubbleSeries(xValue: Double; yValue: Double; bubbleSize: Double): DNIChartDataPoint; overload;
    function AddDataPointForBubbleSeries(xValue: string; yValue: Double; bubbleSize: Double): DNIChartDataPoint; overload;
    function AddDataPointForSurfaceSeries(value: DNIChartDataCell): DNIChartDataPoint; overload;
    function AddDataPointForSurfaceSeries(value: Double): DNIChartDataPoint; overload;
    function AddDataPointForSunburstSeries(sizeValue: DNIChartDataCell): DNIChartDataPoint;
    function AddDataPointForTreemapSeries(sizeValue: DNIChartDataCell): DNIChartDataPoint;
    function AddDataPointForBoxAndWhiskerSeries(value: DNIChartDataCell): DNIChartDataPoint;
    function AddDataPointForWaterfallSeries(value: DNIChartDataCell): DNIChartDataPoint;
    function AddDataPointForHistogramSeries(value: DNIChartDataCell): DNIChartDataPoint;
    function AddDataPointForFunnelSeries(value: DNIChartDataCell): DNIChartDataPoint;
    function AddDataPointForMapSeries(value: DNIChartDataCell): DNIChartDataPoint;
    procedure RemoveAt(index: Int32);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property DataSourceTypeForXValues: DNDataSourceType read get_DataSourceTypeForXValues write set_DataSourceTypeForXValues;
    property DataSourceTypeForYValues: DNDataSourceType read get_DataSourceTypeForYValues write set_DataSourceTypeForYValues;
    property DataSourceTypeForBubbleSizes: DNDataSourceType read get_DataSourceTypeForBubbleSizes write set_DataSourceTypeForBubbleSizes;
    property DataSourceTypeForValues: DNDataSourceType read get_DataSourceTypeForValues write set_DataSourceTypeForValues;
    property DataSourceTypeForErrorBarsCustomValues: DNIDataSourceTypeForErrorBarsCustomValues read get_DataSourceTypeForErrorBarsCustomValues;
    property Count: Int32 read get_Count;
    property IsSynchronized: Boolean read get_IsSynchronized;
    property SyncRoot: DDN.mscorlib.DNObject read get_SyncRoot;
  end;

  TDNChartDataPointCollection = class(TDNGenericImport<DNChartDataPointCollectionClass, DNChartDataPointCollection>) end;

  //-------------namespace: Aspose.Slides.Charts----------------
  DNChartDataPointLevelClass = interface(DDN.mscorlib.DNObjectClass)
  ['{23BB4D25-563D-5D30-BCE8-F2358D0A33C4}']
  end;

  [DNTypeName('Aspose.Slides.Charts.ChartDataPointLevel')]
  DNChartDataPointLevel = interface(DDN.mscorlib.DNObject)
  ['{D2AD6771-5E0B-3967-A06C-2EB654169946}']
  { getters & setters } 

    function get_Format: DNIFormat;
    function get_Label: DNIDataLabel;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Format: DNIFormat read get_Format;
    property &Label: DNIDataLabel read get_Label;
  end;

  TDNChartDataPointLevel = class(TDNGenericImport<DNChartDataPointLevelClass, DNChartDataPointLevel>) end;

  //-------------namespace: Aspose.Slides.Charts----------------
  DNChartDataPointLevelsManagerClass = interface(DDN.mscorlib.DNObjectClass)
  ['{6800F631-7BF7-5044-8F81-B1F72AFE9362}']
  end;

  [DNTypeName('Aspose.Slides.Charts.ChartDataPointLevelsManager')]
  DNChartDataPointLevelsManager = interface(DDN.mscorlib.DNObject)
  ['{8B529FC0-1FF2-3052-8B75-40B4A3E435D8}']
  { getters & setters } 

    function get_Count: Int32;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Count: Int32 read get_Count;
  end;

  TDNChartDataPointLevelsManager = class(TDNGenericImport<DNChartDataPointLevelsManagerClass, DNChartDataPointLevelsManager>) end;

  //-------------namespace: Aspose.Slides.Charts----------------
  DNChartDataWorkbookClass = interface(DDN.mscorlib.DNObjectClass)
  ['{7561469C-BEE8-5EA8-8386-31D5D66BAEA1}']
  end;

  [DNTypeName('Aspose.Slides.Charts.ChartDataWorkbook')]
  DNChartDataWorkbook = interface(DDN.mscorlib.DNObject)
  ['{0A4A0FDC-5B02-3B7A-AAE5-547B800CC8F3}']
  { methods } 

    function GetCellCollection(formula: string; skipHiddenCells: Boolean): DNIChartCellCollection;
    function GetCell(worksheetName: string; row: Int32; column: Int32): DNIChartDataCell; overload;
    function GetCell(worksheetIndex: Int32; row: Int32; column: Int32): DNIChartDataCell; overload;
    function GetCell(worksheetIndex: Int32; cellName: string): DNIChartDataCell; overload;
    function GetCell(worksheetIndex: Int32; cellName: string; value: DDN.mscorlib.DNObject): DNIChartDataCell; overload;
    function GetCell(worksheetIndex: Int32; row: Int32; column: Int32; value: DDN.mscorlib.DNObject): DNIChartDataCell; overload;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNChartDataWorkbook = class(TDNGenericImport<DNChartDataWorkbookClass, DNChartDataWorkbook>) end;

  //-------------namespace: Aspose.Slides.Charts----------------
  DNChartDataWorksheetClass = interface(DDN.mscorlib.DNObjectClass)
  ['{EFF5651B-D76A-5F02-82CA-E3DCB3B58B8D}']
  end;

  [DNTypeName('Aspose.Slides.Charts.ChartDataWorksheet')]
  DNChartDataWorksheet = interface(DDN.mscorlib.DNObject)
  ['{6E7F26DA-4C90-3AEC-AACB-7A36507382A4}']
  { getters & setters } 

    function get_Name: string;
    function get_Index: Int32;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Name: string read get_Name;
    property Index: Int32 read get_Index;
  end;

  TDNChartDataWorksheet = class(TDNGenericImport<DNChartDataWorksheetClass, DNChartDataWorksheet>) end;

  //-------------namespace: Aspose.Slides.Charts----------------
  DNChartLinesFormatClass = interface(DDN.mscorlib.DNObjectClass)
  ['{0131C84B-7C85-5CEB-8D4C-B1B376DCA7DB}']
  end;

  [DNTypeName('Aspose.Slides.Charts.ChartLinesFormat')]
  DNChartLinesFormat = interface(DDN.mscorlib.DNObject)
  ['{D00DF7BD-667E-3FC3-A9A2-D8389DE93F5D}']
  { getters & setters } 

    function get_Line: DNILineFormat;
    function get_Effect: DNIEffectFormat;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Line: DNILineFormat read get_Line;
    property Effect: DNIEffectFormat read get_Effect;
  end;

  TDNChartLinesFormat = class(TDNGenericImport<DNChartLinesFormatClass, DNChartLinesFormat>) end;

  //-------------namespace: Aspose.Slides.Charts----------------
  DNChartPlotAreaClass = interface(DNObjectClass)
  ['{4F5C6C28-A3D0-5223-98DB-DC37C073182A}']
  end;

  [DNTypeName('Aspose.Slides.Charts.ChartPlotArea')]
  DNChartPlotArea = interface(DNIChartPlotArea)
  ['{929FB9D9-279E-3816-8128-E68130D75AC3}']
  { getters & setters } 

    function get_Format: DNIFormat;
    function get_X: Single;
    procedure set_X(value: Single);
    function get_Y: Single;
    procedure set_Y(value: Single);
    function get_Width: Single;
    procedure set_Width(value: Single);
    function get_Height: Single;
    procedure set_Height(value: Single);
    function get_Right: Single;
    function get_Bottom: Single;
    function get_Chart: DNIChart;
    function get_IsLocationAutocalculated: Boolean;
    function get_LayoutTargetType: DNLayoutTargetType;
    procedure set_LayoutTargetType(value: DNLayoutTargetType);
    function get_ActualX: Single;
    function get_ActualY: Single;
    function get_ActualWidth: Single;
    function get_ActualHeight: Single;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Format: DNIFormat read get_Format;
    property X: Single read get_X write set_X;
    property Y: Single read get_Y write set_Y;
    property Width: Single read get_Width write set_Width;
    property Height: Single read get_Height write set_Height;
    property Right: Single read get_Right;
    property Bottom: Single read get_Bottom;
    property Chart: DNIChart read get_Chart;
    property IsLocationAutocalculated: Boolean read get_IsLocationAutocalculated;
    property LayoutTargetType: DNLayoutTargetType read get_LayoutTargetType write set_LayoutTargetType;
    property ActualX: Single read get_ActualX;
    property ActualY: Single read get_ActualY;
    property ActualWidth: Single read get_ActualWidth;
    property ActualHeight: Single read get_ActualHeight;
  end;

  TDNChartPlotArea = class(TDNGenericImport<DNChartPlotAreaClass, DNChartPlotArea>) end;

  //-------------namespace: Aspose.Slides.Charts----------------
  DNChartSeriesClass = interface(DNObjectClass)
  ['{8A429F33-D24F-5E41-AE8A-5E9A277DFE7A}']
  end;

  [DNTypeName('Aspose.Slides.Charts.ChartSeries')]
  DNChartSeries = interface(DNIChartSeries)
  ['{21880A75-3FE9-34AF-878C-052D7CBFE8BE}']
  { getters & setters } 

    function get_Chart: DNIChart;
    function get_Explosion: Int32;
    procedure set_Explosion(value: Int32);
    function get_Smooth: Boolean;
    procedure set_Smooth(value: Boolean);
    function get_Name: DNIStringChartValue;
    function get_DataPoints: DNIChartDataPointCollection;
    function get_Type: DNChartType;
    procedure set_Type(value: DNChartType);
    function get_PlotOnSecondAxis: Boolean;
    procedure set_PlotOnSecondAxis(value: Boolean);
    function get_ParentSeriesGroup: DNIChartSeriesGroup;
    function get_Format: DNIFormat;
    function get_Order: Int32;
    procedure set_Order(value: Int32);
    function get_Labels: DNIDataLabelCollection;
    function get_TrendLines: DNITrendlineCollection;
    function get_ErrorBarsXFormat: DNIErrorBarsFormat;
    function get_ErrorBarsYFormat: DNIErrorBarsFormat;
    function get_RelatedLegendEntry: DNILegendEntryProperties;
    function get_NumberFormatOfValues: string;
    procedure set_NumberFormatOfValues(value: string);
    function get_NumberFormatOfXValues: string;
    procedure set_NumberFormatOfXValues(value: string);
    function get_NumberFormatOfYValues: string;
    procedure set_NumberFormatOfYValues(value: string);
    function get_NumberFormatOfBubbleSizes: string;
    procedure set_NumberFormatOfBubbleSizes(value: string);
    function get_Marker: DNIMarker;
    function get_Bar3DShape: DNChartShapeType;
    procedure set_Bar3DShape(value: DNChartShapeType);
    function get_InvertIfNegative: Boolean;
    procedure set_InvertIfNegative(value: Boolean);
    function get_InvertedSolidFillColor: DNIColorFormat;
    function get_ShowInnerPoints: Boolean;
    procedure set_ShowInnerPoints(value: Boolean);
    function get_ShowOutlierPoints: Boolean;
    procedure set_ShowOutlierPoints(value: Boolean);
    function get_ShowMeanMarkers: Boolean;
    procedure set_ShowMeanMarkers(value: Boolean);
    function get_ShowMeanLine: Boolean;
    procedure set_ShowMeanLine(value: Boolean);
    function get_QuartileMethod: DNQuartileMethodType;
    procedure set_QuartileMethod(value: DNQuartileMethodType);
    function get_ShowConnectorLines: Boolean;
    procedure set_ShowConnectorLines(value: Boolean);
    function get_ParentLabelLayout: DNParentLabelLayoutType;
    procedure set_ParentLabelLayout(value: DNParentLabelLayoutType);
    function get_HasUpDownBars: Boolean;
    function get_GapWidth: Int32;
    function get_GapDepth: Int32;
    function get_FirstSliceAngle: UInt16;
    function get_DoughnutHoleSize: Byte;
    function get_Overlap: SByte;
    function get_SecondPieSize: UInt16;
    function get_HasSeriesLines: Boolean;
    function get_BubbleSizeRepresentation: DNBubbleSizeRepresentationType;
    function get_PieSplitPosition: Double;
    function get_PieSplitBy: DNPieSplitType;
    function get_PieSplitCustomPoints: DNIPieSplitCustomPointCollection;
    function get_IsColorVaried: Boolean;
    function get_BubbleSizeScale: Int32;

  { methods } 

    function GetAutomaticSeriesColor: DDN.System.Drawing.DNColor;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Chart: DNIChart read get_Chart;
    property Explosion: Int32 read get_Explosion write set_Explosion;
    property Smooth: Boolean read get_Smooth write set_Smooth;
    property Name: DNIStringChartValue read get_Name;
    property DataPoints: DNIChartDataPointCollection read get_DataPoints;
    property &Type: DNChartType read get_Type write set_Type;
    property PlotOnSecondAxis: Boolean read get_PlotOnSecondAxis write set_PlotOnSecondAxis;
    property ParentSeriesGroup: DNIChartSeriesGroup read get_ParentSeriesGroup;
    property Format: DNIFormat read get_Format;
    property Order: Int32 read get_Order write set_Order;
    property Labels: DNIDataLabelCollection read get_Labels;
    property TrendLines: DNITrendlineCollection read get_TrendLines;
    property ErrorBarsXFormat: DNIErrorBarsFormat read get_ErrorBarsXFormat;
    property ErrorBarsYFormat: DNIErrorBarsFormat read get_ErrorBarsYFormat;
    property RelatedLegendEntry: DNILegendEntryProperties read get_RelatedLegendEntry;
    property NumberFormatOfValues: string read get_NumberFormatOfValues write set_NumberFormatOfValues;
    property NumberFormatOfXValues: string read get_NumberFormatOfXValues write set_NumberFormatOfXValues;
    property NumberFormatOfYValues: string read get_NumberFormatOfYValues write set_NumberFormatOfYValues;
    property NumberFormatOfBubbleSizes: string read get_NumberFormatOfBubbleSizes write set_NumberFormatOfBubbleSizes;
    property Marker: DNIMarker read get_Marker;
    property Bar3DShape: DNChartShapeType read get_Bar3DShape write set_Bar3DShape;
    property InvertIfNegative: Boolean read get_InvertIfNegative write set_InvertIfNegative;
    property InvertedSolidFillColor: DNIColorFormat read get_InvertedSolidFillColor;
    property ShowInnerPoints: Boolean read get_ShowInnerPoints write set_ShowInnerPoints;
    property ShowOutlierPoints: Boolean read get_ShowOutlierPoints write set_ShowOutlierPoints;
    property ShowMeanMarkers: Boolean read get_ShowMeanMarkers write set_ShowMeanMarkers;
    property ShowMeanLine: Boolean read get_ShowMeanLine write set_ShowMeanLine;
    property QuartileMethod: DNQuartileMethodType read get_QuartileMethod write set_QuartileMethod;
    property ShowConnectorLines: Boolean read get_ShowConnectorLines write set_ShowConnectorLines;
    property ParentLabelLayout: DNParentLabelLayoutType read get_ParentLabelLayout write set_ParentLabelLayout;
    property HasUpDownBars: Boolean read get_HasUpDownBars;
    property GapWidth: Int32 read get_GapWidth;
    property GapDepth: Int32 read get_GapDepth;
    property FirstSliceAngle: UInt16 read get_FirstSliceAngle;
    property DoughnutHoleSize: Byte read get_DoughnutHoleSize;
    property Overlap: SByte read get_Overlap;
    property SecondPieSize: UInt16 read get_SecondPieSize;
    property HasSeriesLines: Boolean read get_HasSeriesLines;
    property BubbleSizeRepresentation: DNBubbleSizeRepresentationType read get_BubbleSizeRepresentation;
    property PieSplitPosition: Double read get_PieSplitPosition;
    property PieSplitBy: DNPieSplitType read get_PieSplitBy;
    property PieSplitCustomPoints: DNIPieSplitCustomPointCollection read get_PieSplitCustomPoints;
    property IsColorVaried: Boolean read get_IsColorVaried;
    property BubbleSizeScale: Int32 read get_BubbleSizeScale;
  end;

  TDNChartSeries = class(TDNGenericImport<DNChartSeriesClass, DNChartSeries>) end;

  //-------------namespace: Aspose.Slides.Charts----------------
  DNChartSeriesCollectionClass = interface(DDN.mscorlib.DNObjectClass)
  ['{608A1701-E66B-584B-BC42-CE7390221E81}']
  end;

  [DNTypeName('Aspose.Slides.Charts.ChartSeriesCollection')]
  DNChartSeriesCollection = interface(DDN.mscorlib.DNObject)
  ['{15F060BA-AC94-392A-B046-BCE210AA76B6}']
  { getters & setters } 

    function get_Count: Int32;
    function get_IsSynchronized: Boolean;
    function get_SyncRoot: DDN.mscorlib.DNObject;

  { methods } 

    function Insert(index: Int32; &type: DNChartType): DNIChartSeries;
    function IndexOf(value: DNIChartSeries): Int32;
    procedure RemoveAt(index: Int32);
    function GetEnumerator: DDN.mscorlib.DNIEnumerator<DNIChartSeries>;
    procedure CopyTo(&array: DDN.mscorlib.DNArray; index: Int32);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Count: Int32 read get_Count;
    property IsSynchronized: Boolean read get_IsSynchronized;
    property SyncRoot: DDN.mscorlib.DNObject read get_SyncRoot;
  end;

  TDNChartSeriesCollection = class(TDNGenericImport<DNChartSeriesCollectionClass, DNChartSeriesCollection>) end;

  //-------------namespace: Aspose.Slides.Charts----------------
  DNChartSeriesGroupClass = interface(DNObjectClass)
  ['{1FB9789A-7134-5EF0-A78D-C1724DCE818D}']
  end;

  [DNTypeName('Aspose.Slides.Charts.ChartSeriesGroup')]
  DNChartSeriesGroup = interface(DNIChartSeriesGroup)
  ['{BACE024B-10C1-303E-8608-A8EDECDAF100}']
  { getters & setters } 

    function get_Type: DNCombinableSeriesTypesGroup;
    function get_PlotOnSecondAxis: Boolean;
    function get_Series: DNIChartSeriesReadonlyCollection;
    function get_UpDownBars: DNIUpDownBarsManager;
    function get_GapWidth: UInt16;
    procedure set_GapWidth(value: UInt16);
    function get_GapDepth: UInt16;
    procedure set_GapDepth(value: UInt16);
    function get_FirstSliceAngle: UInt16;
    procedure set_FirstSliceAngle(value: UInt16);
    function get_DoughnutHoleSize: Byte;
    procedure set_DoughnutHoleSize(value: Byte);
    function get_Overlap: SByte;
    procedure set_Overlap(value: SByte);
    function get_SecondPieSize: UInt16;
    procedure set_SecondPieSize(value: UInt16);
    function get_BubbleSizeRepresentation: DNBubbleSizeRepresentationType;
    procedure set_BubbleSizeRepresentation(value: DNBubbleSizeRepresentationType);
    function get_PieSplitPosition: Double;
    procedure set_PieSplitPosition(value: Double);
    function get_PieSplitBy: DNPieSplitType;
    procedure set_PieSplitBy(value: DNPieSplitType);
    function get_IsColorVaried: Boolean;
    procedure set_IsColorVaried(value: Boolean);
    function get_HasSeriesLines: Boolean;
    procedure set_HasSeriesLines(value: Boolean);
    function get_HiLowLinesFormat: DNIChartLinesFormat;
    function get_BubbleSizeScale: Int32;
    procedure set_BubbleSizeScale(value: Int32);
    function get_PieSplitCustomPoints: DNIPieSplitCustomPointCollection;
    function get_Chart: DNIChart;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property &Type: DNCombinableSeriesTypesGroup read get_Type;
    property PlotOnSecondAxis: Boolean read get_PlotOnSecondAxis;
    property Series: DNIChartSeriesReadonlyCollection read get_Series;
    property UpDownBars: DNIUpDownBarsManager read get_UpDownBars;
    property GapWidth: UInt16 read get_GapWidth write set_GapWidth;
    property GapDepth: UInt16 read get_GapDepth write set_GapDepth;
    property FirstSliceAngle: UInt16 read get_FirstSliceAngle write set_FirstSliceAngle;
    property DoughnutHoleSize: Byte read get_DoughnutHoleSize write set_DoughnutHoleSize;
    property Overlap: SByte read get_Overlap write set_Overlap;
    property SecondPieSize: UInt16 read get_SecondPieSize write set_SecondPieSize;
    property BubbleSizeRepresentation: DNBubbleSizeRepresentationType read get_BubbleSizeRepresentation write set_BubbleSizeRepresentation;
    property PieSplitPosition: Double read get_PieSplitPosition write set_PieSplitPosition;
    property PieSplitBy: DNPieSplitType read get_PieSplitBy write set_PieSplitBy;
    property IsColorVaried: Boolean read get_IsColorVaried write set_IsColorVaried;
    property HasSeriesLines: Boolean read get_HasSeriesLines write set_HasSeriesLines;
    property HiLowLinesFormat: DNIChartLinesFormat read get_HiLowLinesFormat;
    property BubbleSizeScale: Int32 read get_BubbleSizeScale write set_BubbleSizeScale;
    property PieSplitCustomPoints: DNIPieSplitCustomPointCollection read get_PieSplitCustomPoints;
    property Chart: DNIChart read get_Chart;
  end;

  TDNChartSeriesGroup = class(TDNGenericImport<DNChartSeriesGroupClass, DNChartSeriesGroup>) end;

  //-------------namespace: Aspose.Slides.Charts----------------
  DNChartTextFormatClass = interface(DDN.mscorlib.DNObjectClass)
  ['{8E1E15A2-545C-507B-89DC-2C2DFDB2EC18}']
  end;

  [DNTypeName('Aspose.Slides.Charts.ChartTextFormat')]
  DNChartTextFormat = interface(DDN.mscorlib.DNObject)
  ['{14B6C241-0E83-3DC0-B650-47C42920B05E}']
  { getters & setters } 

    function get_TextBlockFormat: DNIChartTextBlockFormat;
    function get_ParagraphFormat: DNIChartParagraphFormat;
    function get_PortionFormat: DNIChartPortionFormat;

  { methods } 

    procedure CopyTo(destTextFrame: DNITextFrame);
    procedure CopyFrom(sourceTextFrame: DNITextFrame);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property TextBlockFormat: DNIChartTextBlockFormat read get_TextBlockFormat;
    property ParagraphFormat: DNIChartParagraphFormat read get_ParagraphFormat;
    property PortionFormat: DNIChartPortionFormat read get_PortionFormat;
  end;

  TDNChartTextFormat = class(TDNGenericImport<DNChartTextFormatClass, DNChartTextFormat>) end;

  //-------------namespace: Aspose.Slides.Charts----------------
  DNChartTitleClass = interface(DNObjectClass)
  ['{6161E043-B76D-552A-993D-90E35876C8FD}']
  end;

  [DNTypeName('Aspose.Slides.Charts.ChartTitle')]
  DNChartTitle = interface(DNILayoutable)
  ['{5D882DCF-7198-32DC-9611-6EAE0ECB6DC8}']
  { getters & setters } 

    function get_X: Single;
    procedure set_X(value: Single);
    function get_Y: Single;
    procedure set_Y(value: Single);
    function get_Width: Single;
    procedure set_Width(value: Single);
    function get_Height: Single;
    procedure set_Height(value: Single);
    function get_Right: Single;
    function get_Bottom: Single;
    function get_Overlay: Boolean;
    procedure set_Overlay(value: Boolean);
    function get_Format: DNIFormat;
    function get_TextFrameForOverriding: DNITextFrame;
    function get_TextFormat: DNIChartTextFormat;
    function get_Chart: DNIChart;

  { methods } 

    function AddTextFrameForOverriding(text: string): DNITextFrame;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property X: Single read get_X write set_X;
    property Y: Single read get_Y write set_Y;
    property Width: Single read get_Width write set_Width;
    property Height: Single read get_Height write set_Height;
    property Right: Single read get_Right;
    property Bottom: Single read get_Bottom;
    property Overlay: Boolean read get_Overlay write set_Overlay;
    property Format: DNIFormat read get_Format;
    property TextFrameForOverriding: DNITextFrame read get_TextFrameForOverriding;
    property TextFormat: DNIChartTextFormat read get_TextFormat;
    property Chart: DNIChart read get_Chart;
  end;

  TDNChartTitle = class(TDNGenericImport<DNChartTitleClass, DNChartTitle>) end;

  //-------------namespace: Aspose.Slides.Charts----------------
  DNChartTypeCharacterizerClass = interface(DDN.mscorlib.DNObjectClass)
  ['{C493A479-98D1-53BC-AE5D-13ED316AC70F}']
  { static methods } 

    {class} function IsBar3DChart(chartType: DNChartType): Boolean;
    {class} function Is2DChart(chartType: DNChartType): Boolean;
    {class} function Is3DChart(chartType: DNChartType): Boolean;
    {class} function IsChartTypeColumn(chartType: DNChartType): Boolean;
    {class} function IsChartTypeLine(chartType: DNChartType): Boolean;
    {class} function IsChartTypePie(chartType: DNChartType): Boolean;
    {class} function IsChartTypeBar(chartType: DNChartType): Boolean;
    {class} function IsChartTypeArea(chartType: DNChartType): Boolean;
    {class} function IsChartTypeScatter(chartType: DNChartType): Boolean;
    {class} function IsChartTypeStock(chartType: DNChartType): Boolean;
    {class} function IsChartTypeSurface(chartType: DNChartType): Boolean;
    {class} function IsChartTypeDoughnut(chartType: DNChartType): Boolean;
    {class} function IsChartTypeBubble(chartType: DNChartType): Boolean;
    {class} function IsChartTypeRadar(chartType: DNChartType): Boolean;
    {class} function IsSeriesUsesXValueCoordinate(seriesType: DNChartType): Boolean;
    {class} function IsSeriesUsesYValueCoordinate(seriesType: DNChartType): Boolean;
    {class} function IsSeriesUsesValueCoordinate(seriesType: DNChartType): Boolean;
    {class} function IsSeriesUsesBubbleSizeCoordinate(seriesType: DNChartType): Boolean;
    {class} function HasSeriesTrendLines(seriesType: DNChartType): Boolean;
    {class} function IsErrorBarsXAllowed(seriesType: DNChartType): Boolean;
    {class} function IsErrorBarsYAllowed(seriesType: DNChartType): Boolean;

  end;

  [DNTypeName('Aspose.Slides.Charts.ChartTypeCharacterizer')]
  DNChartTypeCharacterizer = interface(DDN.mscorlib.DNObject)
  ['{1B787FB4-EFF9-37B4-B83E-5DFCFABB4D14}']
  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNChartTypeCharacterizer = class(TDNGenericImport<DNChartTypeCharacterizerClass, DNChartTypeCharacterizer>) end;

  //-------------namespace: Aspose.Slides.Charts----------------
  DNChartWallClass = interface(DDN.mscorlib.DNObjectClass)
  ['{A1BEF600-6ED5-5F6D-8860-55CFD589B887}']
  end;

  [DNTypeName('Aspose.Slides.Charts.ChartWall')]
  DNChartWall = interface(DDN.mscorlib.DNObject)
  ['{811579BA-0918-3D85-AE50-43075A944AD0}']
  { getters & setters } 

    function get_Thickness: Int32;
    procedure set_Thickness(value: Int32);
    function get_Format: DNIFormat;
    function get_PictureType: DNPictureType;
    procedure set_PictureType(value: DNPictureType);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Thickness: Int32 read get_Thickness write set_Thickness;
    property Format: DNIFormat read get_Format;
    property PictureType: DNPictureType read get_PictureType write set_PictureType;
  end;

  TDNChartWall = class(TDNGenericImport<DNChartWallClass, DNChartWall>) end;

  //-------------namespace: Aspose.Slides.Charts----------------
  DNDataLabelClass = interface(DNObjectClass)
  ['{FFB465A0-FFB7-529B-8E87-FEE9EFB3DD5E}']
  { constructors } 

    {class} function init(parentImmediate: DNIChartDataPoint): DNDataLabel;

  end;

  [DNTypeName('Aspose.Slides.Charts.DataLabel')]
  DNDataLabel = interface(DNILayoutable)
  ['{88E074E0-C2F7-3611-BAF0-4177C27C54C1}']
  { getters & setters } 

    function get_Chart: DNIChart;
    function get_IsVisible: Boolean;
    function get_TextFrameForOverriding: DNITextFrame;
    function get_TextFormat: DNIChartTextFormat;
    function get_X: Single;
    procedure set_X(value: Single);
    function get_Y: Single;
    procedure set_Y(value: Single);
    function get_Width: Single;
    procedure set_Width(value: Single);
    function get_Height: Single;
    procedure set_Height(value: Single);
    function get_Right: Single;
    function get_Bottom: Single;
    function get_DataLabelFormat: DNIDataLabelFormat;
    function get_ValueFromCell: DNIChartDataCell;
    procedure set_ValueFromCell(value: DNIChartDataCell);
    function get_ActualX: Single;
    function get_ActualY: Single;
    function get_ActualWidth: Single;
    function get_ActualHeight: Single;

  { methods } 

    procedure Hide;
    function GetActualLabelText: string;
    function AddTextFrameForOverriding(text: string): DNITextFrame;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Chart: DNIChart read get_Chart;
    property IsVisible: Boolean read get_IsVisible;
    property TextFrameForOverriding: DNITextFrame read get_TextFrameForOverriding;
    property TextFormat: DNIChartTextFormat read get_TextFormat;
    property X: Single read get_X write set_X;
    property Y: Single read get_Y write set_Y;
    property Width: Single read get_Width write set_Width;
    property Height: Single read get_Height write set_Height;
    property Right: Single read get_Right;
    property Bottom: Single read get_Bottom;
    property DataLabelFormat: DNIDataLabelFormat read get_DataLabelFormat;
    property ValueFromCell: DNIChartDataCell read get_ValueFromCell write set_ValueFromCell;
    property ActualX: Single read get_ActualX;
    property ActualY: Single read get_ActualY;
    property ActualWidth: Single read get_ActualWidth;
    property ActualHeight: Single read get_ActualHeight;
  end;

  TDNDataLabel = class(TDNGenericImport<DNDataLabelClass, DNDataLabel>) end;

  //-------------namespace: Aspose.Slides.Charts----------------
  DNDataLabelCollectionClass = interface(DNObjectClass)
  ['{240E5C8F-D090-59A4-8768-A62F1530E774}']
  end;

  [DNTypeName('Aspose.Slides.Charts.DataLabelCollection')]
  DNDataLabelCollection = interface(DDN.mscorlib.DNIEnumerable)
  ['{B607735C-22C8-3980-87D5-C877AD79018A}']
  { getters & setters } 

    function get_Chart: DNIChart;
    function get_IsVisible: Boolean;
    function get_CountOfVisibleDataLabels: Int32;
    function get_Count: Int32;
    function get_DefaultDataLabelFormat: DNIDataLabelFormat;
    function get_ParentSeries: DNIChartSeries;

  { methods } 

    function GetEnumerator: DDN.mscorlib.DNIEnumerator<DNIDataLabel>;
    procedure Hide;
    function IndexOf(value: DNIDataLabel): Int32;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Chart: DNIChart read get_Chart;
    property IsVisible: Boolean read get_IsVisible;
    property CountOfVisibleDataLabels: Int32 read get_CountOfVisibleDataLabels;
    property Count: Int32 read get_Count;
    property DefaultDataLabelFormat: DNIDataLabelFormat read get_DefaultDataLabelFormat;
    property ParentSeries: DNIChartSeries read get_ParentSeries;
  end;

  TDNDataLabelCollection = class(TDNGenericImport<DNDataLabelCollectionClass, DNDataLabelCollection>) end;

  //-------------namespace: Aspose.Slides.Charts----------------
  DNDataSourceTypeForErrorBarsCustomValuesClass = interface(DNObjectClass)
  ['{BD38B363-A819-514B-8110-AE273D9D4449}']
  { constructors } 

    {class} function init: DNDataSourceTypeForErrorBarsCustomValues;

  end;

  [DNTypeName('Aspose.Slides.Charts.DataSourceTypeForErrorBarsCustomValues')]
  DNDataSourceTypeForErrorBarsCustomValues = interface(DNIDataSourceTypeForErrorBarsCustomValues)
  ['{59B83C74-D1E6-4E59-949E-A849EC79FA9B}']
  { getters & setters } 

    function get_DataSourceTypeForXMinusValues: DNDataSourceType;
    procedure set_DataSourceTypeForXMinusValues(value: DNDataSourceType);
    function get_DataSourceTypeForXPlusValues: DNDataSourceType;
    procedure set_DataSourceTypeForXPlusValues(value: DNDataSourceType);
    function get_DataSourceTypeForYMinusValues: DNDataSourceType;
    procedure set_DataSourceTypeForYMinusValues(value: DNDataSourceType);
    function get_DataSourceTypeForYPlusValues: DNDataSourceType;
    procedure set_DataSourceTypeForYPlusValues(value: DNDataSourceType);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property DataSourceTypeForXMinusValues: DNDataSourceType read get_DataSourceTypeForXMinusValues write set_DataSourceTypeForXMinusValues;
    property DataSourceTypeForXPlusValues: DNDataSourceType read get_DataSourceTypeForXPlusValues write set_DataSourceTypeForXPlusValues;
    property DataSourceTypeForYMinusValues: DNDataSourceType read get_DataSourceTypeForYMinusValues write set_DataSourceTypeForYMinusValues;
    property DataSourceTypeForYPlusValues: DNDataSourceType read get_DataSourceTypeForYPlusValues write set_DataSourceTypeForYPlusValues;
  end;

  TDNDataSourceTypeForErrorBarsCustomValues = class(TDNGenericImport<DNDataSourceTypeForErrorBarsCustomValuesClass, DNDataSourceTypeForErrorBarsCustomValues>) end;

  //-------------namespace: Aspose.Slides.Charts----------------
  DNDataTableClass = interface(DNObjectClass)
  ['{3D722619-337D-56CF-B047-9B9671C892A4}']
  end;

  [DNTypeName('Aspose.Slides.Charts.DataTable')]
  DNDataTable = interface(DNIDataTable)
  ['{66EFB125-323A-31F6-B19D-8D50060DC04F}']
  { getters & setters } 

    function get_Format: DNIFormat;
    function get_HasBorderHorizontal: Boolean;
    procedure set_HasBorderHorizontal(value: Boolean);
    function get_HasBorderOutline: Boolean;
    procedure set_HasBorderOutline(value: Boolean);
    function get_HasBorderVertical: Boolean;
    procedure set_HasBorderVertical(value: Boolean);
    function get_ShowLegendKey: Boolean;
    procedure set_ShowLegendKey(value: Boolean);
    function get_Chart: DNIChart;
    function get_TextFormat: DNIChartTextFormat;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Format: DNIFormat read get_Format;
    property HasBorderHorizontal: Boolean read get_HasBorderHorizontal write set_HasBorderHorizontal;
    property HasBorderOutline: Boolean read get_HasBorderOutline write set_HasBorderOutline;
    property HasBorderVertical: Boolean read get_HasBorderVertical write set_HasBorderVertical;
    property ShowLegendKey: Boolean read get_ShowLegendKey write set_ShowLegendKey;
    property Chart: DNIChart read get_Chart;
    property TextFormat: DNIChartTextFormat read get_TextFormat;
  end;

  TDNDataTable = class(TDNGenericImport<DNDataTableClass, DNDataTable>) end;

  //-------------namespace: Aspose.Slides.Charts----------------
  DNErrorBarsCustomValuesClass = interface(DNObjectClass)
  ['{9666B36D-41D1-5A15-A839-84D98474123D}']
  end;

  [DNTypeName('Aspose.Slides.Charts.ErrorBarsCustomValues')]
  DNErrorBarsCustomValues = interface(DNIErrorBarsCustomValues)
  ['{7D5E7454-DEB7-3CA3-A6BA-4DBF271476E0}']
  { getters & setters } 

    function get_XMinus: DNIDoubleChartValue;
    function get_YMinus: DNIDoubleChartValue;
    function get_XPlus: DNIDoubleChartValue;
    function get_YPlus: DNIDoubleChartValue;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property XMinus: DNIDoubleChartValue read get_XMinus;
    property YMinus: DNIDoubleChartValue read get_YMinus;
    property XPlus: DNIDoubleChartValue read get_XPlus;
    property YPlus: DNIDoubleChartValue read get_YPlus;
  end;

  TDNErrorBarsCustomValues = class(TDNGenericImport<DNErrorBarsCustomValuesClass, DNErrorBarsCustomValues>) end;

  //-------------namespace: Aspose.Slides.Charts----------------
  DNErrorBarsFormatClass = interface(DNObjectClass)
  ['{3597F3FB-2572-587D-AA07-35071D642856}']
  end;

  [DNTypeName('Aspose.Slides.Charts.ErrorBarsFormat')]
  DNErrorBarsFormat = interface(DNIErrorBarsFormat)
  ['{554E667A-A078-3633-B231-99EC71D4FDB1}']
  { getters & setters } 

    function get_Type: DNErrorBarType;
    procedure set_Type(value: DNErrorBarType);
    function get_ValueType: DNErrorBarValueType;
    procedure set_ValueType(value: DNErrorBarValueType);
    function get_HasEndCap: Boolean;
    procedure set_HasEndCap(value: Boolean);
    function get_Value: Single;
    procedure set_Value(value: Single);
    function get_Format: DNIFormat;
    procedure set_Format(value: DNIFormat);
    function get_Chart: DNIChart;
    function get_IsVisible: Boolean;
    procedure set_IsVisible(value: Boolean);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property &Type: DNErrorBarType read get_Type write set_Type;
    property ValueType: DNErrorBarValueType read get_ValueType write set_ValueType;
    property HasEndCap: Boolean read get_HasEndCap write set_HasEndCap;
    property Value: Single read get_Value write set_Value;
    property Format: DNIFormat read get_Format write set_Format;
    property Chart: DNIChart read get_Chart;
    property IsVisible: Boolean read get_IsVisible write set_IsVisible;
  end;

  TDNErrorBarsFormat = class(TDNGenericImport<DNErrorBarsFormatClass, DNErrorBarsFormat>) end;

  //-------------namespace: Aspose.Slides.Charts----------------
  DNLegendClass = interface(DNObjectClass)
  ['{80C8E96C-4D13-5FA2-BCAD-933EF81D9307}']
  end;

  [DNTypeName('Aspose.Slides.Charts.Legend')]
  DNLegend = interface(DNILayoutable)
  ['{1C7B2479-81EF-367F-9B28-D3C449E24F5C}']
  { getters & setters } 

    function get_X: Single;
    procedure set_X(value: Single);
    function get_Y: Single;
    procedure set_Y(value: Single);
    function get_Width: Single;
    procedure set_Width(value: Single);
    function get_Height: Single;
    procedure set_Height(value: Single);
    function get_Right: Single;
    function get_Bottom: Single;
    function get_Overlay: Boolean;
    procedure set_Overlay(value: Boolean);
    function get_TextFormat: DNIChartTextFormat;
    function get_Position: DNLegendPositionType;
    procedure set_Position(value: DNLegendPositionType);
    function get_Format: DNIFormat;
    function get_Chart: DNIChart;
    function get_Entries: DNILegendEntryCollection;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property X: Single read get_X write set_X;
    property Y: Single read get_Y write set_Y;
    property Width: Single read get_Width write set_Width;
    property Height: Single read get_Height write set_Height;
    property Right: Single read get_Right;
    property Bottom: Single read get_Bottom;
    property Overlay: Boolean read get_Overlay write set_Overlay;
    property TextFormat: DNIChartTextFormat read get_TextFormat;
    property Position: DNLegendPositionType read get_Position write set_Position;
    property Format: DNIFormat read get_Format;
    property Chart: DNIChart read get_Chart;
    property Entries: DNILegendEntryCollection read get_Entries;
  end;

  TDNLegend = class(TDNGenericImport<DNLegendClass, DNLegend>) end;

  //-------------namespace: Aspose.Slides.Charts----------------
  DNLegendEntryCollectionClass = interface(DNObjectClass)
  ['{FDACA39C-16F3-579F-9250-1019409AC0D6}']
  end;

  [DNTypeName('Aspose.Slides.Charts.LegendEntryCollection')]
  DNLegendEntryCollection = interface(DNILegendEntryCollection)
  ['{85004EC7-9E87-38E0-A368-B1C51B5D3564}']
  { getters & setters } 

    function get_Count: Int32;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Count: Int32 read get_Count;
  end;

  TDNLegendEntryCollection = class(TDNGenericImport<DNLegendEntryCollectionClass, DNLegendEntryCollection>) end;

  //-------------namespace: Aspose.Slides.Charts----------------
  DNLegendEntryPropertiesClass = interface(DDN.mscorlib.DNObjectClass)
  ['{4AA76DA9-6319-5317-9F34-70C895D00BC0}']
  end;

  [DNTypeName('Aspose.Slides.Charts.LegendEntryProperties')]
  DNLegendEntryProperties = interface(DDN.mscorlib.DNObject)
  ['{8BADDA88-AF53-360D-91F8-1AED2D46CF21}']
  { getters & setters } 

    function get_TextFormat: DNIChartTextFormat;
    function get_Hide: Boolean;
    procedure set_Hide(value: Boolean);
    function get_Chart: DNIChart;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property TextFormat: DNIChartTextFormat read get_TextFormat;
    property Hide: Boolean read get_Hide write set_Hide;
    property Chart: DNIChart read get_Chart;
  end;

  TDNLegendEntryProperties = class(TDNGenericImport<DNLegendEntryPropertiesClass, DNLegendEntryProperties>) end;

  //-------------namespace: Aspose.Slides.Charts----------------
  DNMarkerClass = interface(DDN.mscorlib.DNObjectClass)
  ['{6EFE17E7-A90A-5A8A-820A-8EA335941B23}']
  end;

  [DNTypeName('Aspose.Slides.Charts.Marker')]
  DNMarker = interface(DDN.mscorlib.DNObject)
  ['{8573E6E8-BE53-345C-A849-06BBCF393B82}']
  { getters & setters } 

    function get_Symbol: DNMarkerStyleType;
    procedure set_Symbol(value: DNMarkerStyleType);
    function get_Format: DNIFormat;
    function get_Size: Int32;
    procedure set_Size(value: Int32);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Symbol: DNMarkerStyleType read get_Symbol write set_Symbol;
    property Format: DNIFormat read get_Format;
    property Size: Int32 read get_Size write set_Size;
  end;

  TDNMarker = class(TDNGenericImport<DNMarkerClass, DNMarker>) end;

  //-------------namespace: Aspose.Slides.Charts----------------
  DNPieSplitCustomPointCollectionClass = interface(DNObjectClass)
  ['{444AC482-C0AD-50BC-AFFA-9B9E9D3DA099}']
  end;

  [DNTypeName('Aspose.Slides.Charts.PieSplitCustomPointCollection')]
  DNPieSplitCustomPointCollection = interface(DDN.mscorlib.DNIEnumerable)
  ['{70C894DB-7447-487A-A44B-63A90BDA3B9F}']
  { getters & setters } 

    function get_Count: Int32;
    function get_IsReadOnly: Boolean;
    function get_IsSynchronized: Boolean;
    function get_SyncRoot: DDN.mscorlib.DNObject;

  { methods } 

    function &Contains(item: DNIChartDataPoint): Boolean;
    procedure CopyTo(&array: TArray<DNIChartDataPoint>; arrayIndex: Int32);
    function GetEnumerator: DDN.mscorlib.DNIEnumerator<DNIChartDataPoint>;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Count: Int32 read get_Count;
    property IsReadOnly: Boolean read get_IsReadOnly;
    property IsSynchronized: Boolean read get_IsSynchronized;
    property SyncRoot: DDN.mscorlib.DNObject read get_SyncRoot;
  end;

  TDNPieSplitCustomPointCollection = class(TDNGenericImport<DNPieSplitCustomPointCollectionClass, DNPieSplitCustomPointCollection>) end;

  //-------------namespace: Aspose.Slides.Charts----------------
  DNRotation3DClass = interface(DDN.mscorlib.DNObjectClass)
  ['{92BDE370-9248-53CD-B3E7-36F431BE596F}']
  end;

  [DNTypeName('Aspose.Slides.Charts.Rotation3D')]
  DNRotation3D = interface(DDN.mscorlib.DNObject)
  ['{4DF37BE8-5166-3A63-B37D-D4041A5E367B}']
  { getters & setters } 

    function get_RotationX: SByte;
    procedure set_RotationX(value: SByte);
    function get_RotationY: UInt16;
    procedure set_RotationY(value: UInt16);
    function get_Perspective: Byte;
    procedure set_Perspective(value: Byte);
    function get_RightAngleAxes: Boolean;
    procedure set_RightAngleAxes(value: Boolean);
    function get_DepthPercents: UInt16;
    procedure set_DepthPercents(value: UInt16);
    function get_HeightPercents: UInt16;
    procedure set_HeightPercents(value: UInt16);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property RotationX: SByte read get_RotationX write set_RotationX;
    property RotationY: UInt16 read get_RotationY write set_RotationY;
    property Perspective: Byte read get_Perspective write set_Perspective;
    property RightAngleAxes: Boolean read get_RightAngleAxes write set_RightAngleAxes;
    property DepthPercents: UInt16 read get_DepthPercents write set_DepthPercents;
    property HeightPercents: UInt16 read get_HeightPercents write set_HeightPercents;
  end;

  TDNRotation3D = class(TDNGenericImport<DNRotation3DClass, DNRotation3D>) end;

  //-------------namespace: Aspose.Slides.Charts----------------
  DNTrendlineClass = interface(DDN.mscorlib.DNObjectClass)
  ['{E75E1BC2-1FEC-5890-8AD1-624FD2BCAD14}']
  end;

  [DNTypeName('Aspose.Slides.Charts.Trendline')]
  DNTrendline = interface(DDN.mscorlib.DNObject)
  ['{2B8D3200-8383-3BBC-B08D-A9F3F6DBEFFA}']
  { getters & setters } 

    function get_TrendlineName: string;
    procedure set_TrendlineName(value: string);
    function get_TrendlineType: DNTrendlineType;
    procedure set_TrendlineType(value: DNTrendlineType);
    function get_Format: DNIFormat;
    procedure set_Format(value: DNIFormat);
    function get_Backward: Double;
    procedure set_Backward(value: Double);
    function get_Forward: Double;
    procedure set_Forward(value: Double);
    function get_Intercept: Double;
    procedure set_Intercept(value: Double);
    function get_DisplayEquation: Boolean;
    procedure set_DisplayEquation(value: Boolean);
    function get_Order: Byte;
    procedure set_Order(value: Byte);
    function get_Period: Byte;
    procedure set_Period(value: Byte);
    function get_DisplayRSquaredValue: Boolean;
    procedure set_DisplayRSquaredValue(value: Boolean);
    function get_RelatedLegendEntry: DNILegendEntryProperties;
    function get_TextFrameForOverriding: DNITextFrame;
    function get_TextFormat: DNIChartTextFormat;
    function get_Chart: DNIChart;

  { methods } 

    function AddTextFrameForOverriding(text: string): DNITextFrame;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property TrendlineName: string read get_TrendlineName write set_TrendlineName;
    property TrendlineType: DNTrendlineType read get_TrendlineType write set_TrendlineType;
    property Format: DNIFormat read get_Format write set_Format;
    property Backward: Double read get_Backward write set_Backward;
    property &Forward: Double read get_Forward write set_Forward;
    property Intercept: Double read get_Intercept write set_Intercept;
    property DisplayEquation: Boolean read get_DisplayEquation write set_DisplayEquation;
    property Order: Byte read get_Order write set_Order;
    property Period: Byte read get_Period write set_Period;
    property DisplayRSquaredValue: Boolean read get_DisplayRSquaredValue write set_DisplayRSquaredValue;
    property RelatedLegendEntry: DNILegendEntryProperties read get_RelatedLegendEntry;
    property TextFrameForOverriding: DNITextFrame read get_TextFrameForOverriding;
    property TextFormat: DNIChartTextFormat read get_TextFormat;
    property Chart: DNIChart read get_Chart;
  end;

  TDNTrendline = class(TDNGenericImport<DNTrendlineClass, DNTrendline>) end;

  //-------------namespace: Aspose.Slides.Charts----------------
  DNTrendlineCollectionClass = interface(DNObjectClass)
  ['{7C88EE54-E424-5047-8F0F-6DF143681ECA}']
  end;

  [DNTypeName('Aspose.Slides.Charts.TrendlineCollection')]
  DNTrendlineCollection = interface(DDN.mscorlib.DNIEnumerable)
  ['{98AA8FAC-8585-32E4-B411-593DFB9A4F47}']
  { getters & setters } 

    function get_Count: Int32;

  { methods } 

    function GetEnumerator: DDN.mscorlib.DNIEnumerator<DNITrendline>;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Count: Int32 read get_Count;
  end;

  TDNTrendlineCollection = class(TDNGenericImport<DNTrendlineCollectionClass, DNTrendlineCollection>) end;

  //-------------namespace: Aspose.Slides.Charts----------------
  DNUpDownBarsManagerClass = interface(DDN.mscorlib.DNObjectClass)
  ['{ABB543D3-92E6-5028-A775-A44287D90FA4}']
  end;

  [DNTypeName('Aspose.Slides.Charts.UpDownBarsManager')]
  DNUpDownBarsManager = interface(DDN.mscorlib.DNObject)
  ['{ACF01FDB-384A-30A1-A58F-1C1EBB0336D4}']
  { getters & setters } 

    function get_UpBarsFormat: DNIFormat;
    function get_DownBarsFormat: DNIFormat;
    function get_HasUpDownBars: Boolean;
    procedure set_HasUpDownBars(value: Boolean);
    function get_GapWidth: Int32;
    procedure set_GapWidth(value: Int32);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property UpBarsFormat: DNIFormat read get_UpBarsFormat;
    property DownBarsFormat: DNIFormat read get_DownBarsFormat;
    property HasUpDownBars: Boolean read get_HasUpDownBars write set_HasUpDownBars;
    property GapWidth: Int32 read get_GapWidth write set_GapWidth;
  end;

  TDNUpDownBarsManager = class(TDNGenericImport<DNUpDownBarsManagerClass, DNUpDownBarsManager>) end;

  //-------------namespace: Aspose.Slides----------------
  DNColorOperationClass = interface(DNObjectClass)
  ['{5E5C71C6-B735-5AC3-94A2-90A220C0F587}']
  { constructors } 

    {class} function init(op: DNColorTransformOperation): DNColorOperation; overload;
    {class} function init(op: DNColorTransformOperation; parameter: Single): DNColorOperation; overload;

  end;

  [DNTypeName('Aspose.Slides.ColorOperation')]
  DNColorOperation = interface(DNIColorOperation)
  ['{60A1186E-7C1D-3841-B41B-92E90F21C591}']
  { getters & setters } 

    function get_OperationType: DNColorTransformOperation;
    function get_Parameter: Single;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property OperationType: DNColorTransformOperation read get_OperationType;
    property Parameter: Single read get_Parameter;
  end;

  TDNColorOperation = class(TDNGenericImport<DNColorOperationClass, DNColorOperation>) end;

  //-------------namespace: Aspose.Slides----------------
  DNColorOperationCollectionClass = interface(DNObjectClass)
  ['{DA0A34FB-8281-51A4-B562-975D62E34C60}']
  end;

  [DNTypeName('Aspose.Slides.ColorOperationCollection')]
  DNColorOperationCollection = interface(DDN.mscorlib.DNICollection)
  ['{E9B6FD44-35D8-346A-8DF2-36AFB3EDD5EE}']
  { getters & setters } 

    function get_Count: Int32;
    function get_IsSynchronized: Boolean;
    function get_SyncRoot: DDN.mscorlib.DNObject;

  { methods } 

    function Insert(position: Int32; operation: DNColorTransformOperation; parameter: Single): DNIColorOperation; overload;
    function Insert(position: Int32; operation: DNColorTransformOperation): DNIColorOperation; overload;
    procedure RemoveAt(index: Int32);
    function GetEnumerator: DDN.mscorlib.DNIEnumerator<DNIColorOperation>;
    procedure CopyTo(&array: DDN.mscorlib.DNArray; index: Int32);
    function Clone: DDN.mscorlib.DNObject;
    function CloneT: DNIColorOperationCollection;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Count: Int32 read get_Count;
    property IsSynchronized: Boolean read get_IsSynchronized;
    property SyncRoot: DDN.mscorlib.DNObject read get_SyncRoot;
  end;

  TDNColorOperationCollection = class(TDNGenericImport<DNColorOperationCollectionClass, DNColorOperationCollection>) end;

  //-------------namespace: Aspose.Slides----------------
  DNColumnCollectionClass = interface(DNObjectClass)
  ['{249FC6F8-8EF3-559D-B445-FDEFA0F46D43}']
  end;

  [DNTypeName('Aspose.Slides.ColumnCollection')]
  DNColumnCollection = interface(DDN.mscorlib.DNICollection)
  ['{F9ABE011-636E-3F65-A5D5-373E95E0DAE3}']
  { getters & setters } 

    function get_Count: Int32;
    function get_IsSynchronized: Boolean;
    function get_SyncRoot: DDN.mscorlib.DNObject;

  { methods } 

    function AddClone(templ: DNIColumn; withAttachedColumns: Boolean): TArray<DNIColumn>;
    function InsertClone(index: Int32; templ: DNIColumn; withAttachedColumns: Boolean): TArray<DNIColumn>;
    procedure RemoveAt(firstColumnIndex: Int32; withAttachedRows: Boolean);
    function GetEnumerator: DDN.mscorlib.DNIEnumerator<DNIColumn>;
    procedure CopyTo(&array: DDN.mscorlib.DNArray; index: Int32);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Count: Int32 read get_Count;
    property IsSynchronized: Boolean read get_IsSynchronized;
    property SyncRoot: DDN.mscorlib.DNObject read get_SyncRoot;
  end;

  TDNColumnCollection = class(TDNGenericImport<DNColumnCollectionClass, DNColumnCollection>) end;

  //-------------namespace: Aspose.Slides----------------
  DNColumnFormatClass = interface(DDN.mscorlib.DNObjectClass)
  ['{54E2732F-6F24-5172-B858-3C88256EE007}']
  end;

  [DNTypeName('Aspose.Slides.ColumnFormat')]
  DNColumnFormat = interface(DDN.mscorlib.DNObject)
  ['{07A0D77D-EAA8-3FD1-B158-D45FEB896D63}']
  { methods } 

    function GetEffective: DNIColumnFormatEffectiveData;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNColumnFormat = class(TDNGenericImport<DNColumnFormatClass, DNColumnFormat>) end;

  //-------------namespace: Aspose.Slides----------------
  DNCommentClass = interface(DDN.mscorlib.DNObjectClass)
  ['{769DAF19-7B55-5BD5-BE2D-32864879B915}']
  end;

  [DNTypeName('Aspose.Slides.Comment')]
  DNComment = interface(DDN.mscorlib.DNObject)
  ['{4F0EAC0D-A764-3C79-8B01-B4A2B6824785}']
  { getters & setters } 

    function get_Text: string;
    procedure set_Text(value: string);
    function get_CreatedTime: DDN.mscorlib.DNDateTime;
    procedure set_CreatedTime(value: DDN.mscorlib.DNDateTime);
    function get_Slide: DNISlide;
    function get_Author: DNICommentAuthor;
    function get_Position: DDN.System.Drawing.DNPointF;
    procedure set_Position(value: DDN.System.Drawing.DNPointF);
    function get_ParentComment: DNIComment;
    procedure set_ParentComment(value: DNIComment);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Text: string read get_Text write set_Text;
    property CreatedTime: DDN.mscorlib.DNDateTime read get_CreatedTime write set_CreatedTime;
    property Slide: DNISlide read get_Slide;
    property Author: DNICommentAuthor read get_Author;
    property Position: DDN.System.Drawing.DNPointF read get_Position write set_Position;
    property ParentComment: DNIComment read get_ParentComment write set_ParentComment;
  end;

  TDNComment = class(TDNGenericImport<DNCommentClass, DNComment>) end;

  //-------------namespace: Aspose.Slides----------------
  DNCommentAuthorClass = interface(DDN.mscorlib.DNObjectClass)
  ['{EB39E859-07CA-50B3-A6E5-D6AFCBD2BDD4}']
  end;

  [DNTypeName('Aspose.Slides.CommentAuthor')]
  DNCommentAuthor = interface(DDN.mscorlib.DNObject)
  ['{0691C10B-FF3E-333D-A3C0-A7ACD44FCE87}']
  { getters & setters } 

    function get_Name: string;
    procedure set_Name(value: string);
    function get_Initials: string;
    procedure set_Initials(value: string);
    function get_Comments: DNICommentCollection;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Name: string read get_Name write set_Name;
    property Initials: string read get_Initials write set_Initials;
    property Comments: DNICommentCollection read get_Comments;
  end;

  TDNCommentAuthor = class(TDNGenericImport<DNCommentAuthorClass, DNCommentAuthor>) end;

  //-------------namespace: Aspose.Slides----------------
  DNCommentAuthorCollectionClass = interface(DNObjectClass)
  ['{C97C58CD-74FE-5BE9-94BA-AF9CEFF80722}']
  end;

  [DNTypeName('Aspose.Slides.CommentAuthorCollection')]
  DNCommentAuthorCollection = interface(DDN.mscorlib.DNICollection)
  ['{DE44D5ED-360E-38DD-8FB1-DACCE7F932D8}']
  { getters & setters } 

    function get_Count: Int32;
    function get_IsSynchronized: Boolean;
    function get_SyncRoot: DDN.mscorlib.DNObject;

  { methods } 

    function AddAuthor(name: string; initials: string): DNICommentAuthor;
    function ToArray: TArray<DNICommentAuthor>;
    function FindByName(name: string): TArray<DNICommentAuthor>;
    function FindByNameAndInitials(name: string; initials: string): TArray<DNICommentAuthor>;
    procedure RemoveAt(index: Int32);
    function GetEnumerator: DDN.mscorlib.DNIEnumerator<DNICommentAuthor>;
    procedure CopyTo(&array: DDN.mscorlib.DNArray; index: Int32);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Count: Int32 read get_Count;
    property IsSynchronized: Boolean read get_IsSynchronized;
    property SyncRoot: DDN.mscorlib.DNObject read get_SyncRoot;
  end;

  TDNCommentAuthorCollection = class(TDNGenericImport<DNCommentAuthorCollectionClass, DNCommentAuthorCollection>) end;

  //-------------namespace: Aspose.Slides----------------
  DNCommentCollectionClass = interface(DNObjectClass)
  ['{22E590F4-0038-52B9-B1D1-F268FCC5519D}']
  end;

  [DNTypeName('Aspose.Slides.CommentCollection')]
  DNCommentCollection = interface(DDN.mscorlib.DNICollection)
  ['{19A7C8D2-BE23-373A-A5BC-E651142CA8A6}']
  { getters & setters } 

    function get_Count: Int32;
    function get_IsSynchronized: Boolean;
    function get_SyncRoot: DDN.mscorlib.DNObject;

  { methods } 

    function AddComment(text: string; slide: DNISlide; position: DDN.System.Drawing.DNPointF; creationTime: DDN.mscorlib.DNDateTime): DNIComment;
    function InsertComment(index: Int32; text: string; slide: DNISlide; position: DDN.System.Drawing.DNPointF; creationTime: DDN.mscorlib.DNDateTime): DNIComment;
    function ToArray: TArray<DNIComment>; overload;
    function ToArray(startIndex: Int32; count: Int32): TArray<DNIComment>; overload;
    procedure RemoveAt(index: Int32);
    function GetEnumerator: DDN.mscorlib.DNIEnumerator<DNIComment>;
    function FindCommentByIdx(idx: Int32): DNIComment;
    procedure CopyTo(&array: DDN.mscorlib.DNArray; index: Int32);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Count: Int32 read get_Count;
    property IsSynchronized: Boolean read get_IsSynchronized;
    property SyncRoot: DDN.mscorlib.DNObject read get_SyncRoot;
  end;

  TDNCommentCollection = class(TDNGenericImport<DNCommentCollectionClass, DNCommentCollection>) end;

  //-------------namespace: Aspose.Slides----------------
  DNCommonSlideViewPropertiesClass = interface(DNObjectClass)
  ['{CFE5E0C6-542E-5E90-AC15-51770C9EA877}']
  end;

  [DNTypeName('Aspose.Slides.CommonSlideViewProperties')]
  DNCommonSlideViewProperties = interface(DNICommonSlideViewProperties)
  ['{58E7321C-F5C4-4B96-AF56-0A1BE37D9805}']
  { getters & setters } 

    function get_Scale: Int32;
    procedure set_Scale(value: Int32);
    function get_VariableScale: Boolean;
    procedure set_VariableScale(value: Boolean);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Scale: Int32 read get_Scale write set_Scale;
    property VariableScale: Boolean read get_VariableScale write set_VariableScale;
  end;

  TDNCommonSlideViewProperties = class(TDNGenericImport<DNCommonSlideViewPropertiesClass, DNCommonSlideViewProperties>) end;

  //-------------namespace: Aspose.Slides----------------
  DNControlClass = interface(DDN.mscorlib.DNObjectClass)
  ['{96EDC4E0-82E7-50E5-B8FB-E6B54CC290D8}']
  end;

  [DNTypeName('Aspose.Slides.Control')]
  DNControl = interface(DDN.mscorlib.DNObject)
  ['{73968D8D-D295-3229-B7A1-068B51C5EDAD}']
  { getters & setters } 

    function get_Persistence: DNPersistenceType;
    function get_Name: string;
    procedure set_Name(value: string);
    function get_ClassId: DDN.mscorlib.DNGuid;
    procedure set_ClassId(value: DDN.mscorlib.DNGuid);
    function get_SubstitutePictureFormat: DNIPictureFillFormat;
    function get_Frame: DNIShapeFrame;
    procedure set_Frame(value: DNIShapeFrame);
    function get_Properties: DNIControlPropertiesCollection;
    function get_ActiveXControlBinary: TArray<Byte>;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Persistence: DNPersistenceType read get_Persistence;
    property Name: string read get_Name write set_Name;
    property ClassId: DDN.mscorlib.DNGuid read get_ClassId write set_ClassId;
    property SubstitutePictureFormat: DNIPictureFillFormat read get_SubstitutePictureFormat;
    property Frame: DNIShapeFrame read get_Frame write set_Frame;
    property Properties: DNIControlPropertiesCollection read get_Properties;
    property ActiveXControlBinary: TArray<Byte> read get_ActiveXControlBinary;
  end;

  TDNControl = class(TDNGenericImport<DNControlClass, DNControl>) end;

  //-------------namespace: Aspose.Slides----------------
  DNControlCollectionClass = interface(DNObjectClass)
  ['{4EA40A70-22AD-5E7E-8C12-C210977A5604}']
  end;

  [DNTypeName('Aspose.Slides.ControlCollection')]
  DNControlCollection = interface(DDN.mscorlib.DNICollection)
  ['{69AA4AE2-C1E1-3272-AD9F-23AB215EF76A}']
  { getters & setters } 

    function get_Count: Int32;
    function get_IsSynchronized: Boolean;
    function get_SyncRoot: DDN.mscorlib.DNObject;

  { methods } 

    function AddControl(controlType: DNControlType; x: Single; y: Single; width: Single; height: Single): DNIControl;
    procedure RemoveAt(index: Int32);
    function GetEnumerator: DDN.mscorlib.DNIEnumerator<DNIControl>;
    procedure CopyTo(&array: DDN.mscorlib.DNArray; index: Int32);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Count: Int32 read get_Count;
    property IsSynchronized: Boolean read get_IsSynchronized;
    property SyncRoot: DDN.mscorlib.DNObject read get_SyncRoot;
  end;

  TDNControlCollection = class(TDNGenericImport<DNControlCollectionClass, DNControlCollection>) end;

  //-------------namespace: Aspose.Slides----------------
  DNControlPropertiesCollectionClass = interface(DNObjectClass)
  ['{1F5D1A46-70ED-582A-9DC7-CF32086E6933}']
  end;

  [DNTypeName('Aspose.Slides.ControlPropertiesCollection')]
  DNControlPropertiesCollection = interface(DDN.mscorlib.DNIEnumerable)
  ['{A127A55A-6EB8-32FD-BD84-7566EE4094AA}']
  { getters & setters } 

    function get_NamesOfProperties: DDN.mscorlib.DNICollection;
    function get_Count: Int32;

  { methods } 

    function GetEnumerator: DDN.mscorlib.DNIEnumerator<DDN.mscorlib.DNKeyValuePair<string, string>>;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property NamesOfProperties: DDN.mscorlib.DNICollection read get_NamesOfProperties;
    property Count: Int32 read get_Count;
  end;

  TDNControlPropertiesCollection = class(TDNGenericImport<DNControlPropertiesCollectionClass, DNControlPropertiesCollection>) end;

  //-------------namespace: Aspose.Slides----------------
  DNCustomDataClass = interface(DDN.mscorlib.DNObjectClass)
  ['{D06AA013-1E18-55AE-9B59-D5B894A12052}']
  end;

  [DNTypeName('Aspose.Slides.CustomData')]
  DNCustomData = interface(DDN.mscorlib.DNObject)
  ['{70C54FDD-64D0-32F6-9398-02AFC976C9BA}']
  { getters & setters } 

    function get_Tags: DNITagCollection;
    function get_CustomXmlParts: DNICustomXmlPartCollection;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Tags: DNITagCollection read get_Tags;
    property CustomXmlParts: DNICustomXmlPartCollection read get_CustomXmlParts;
  end;

  TDNCustomData = class(TDNGenericImport<DNCustomDataClass, DNCustomData>) end;

  //-------------namespace: Aspose.Slides----------------
  DNCustomXmlPartClass = interface(DNObjectClass)
  ['{06677C39-34FB-50C0-8E3D-B0D82EAEB4E2}']
  end;

  [DNTypeName('Aspose.Slides.CustomXmlPart')]
  DNCustomXmlPart = interface(DNICustomXmlPart)
  ['{0CBF4299-D94E-321F-AAA0-8499E43A84B1}']
  { getters & setters } 

    function get_XmlData: TArray<Byte>;
    procedure set_XmlData(value: TArray<Byte>);
    function get_XmlAsString: string;
    procedure set_XmlAsString(value: string);
    function get_ItemId: DDN.mscorlib.DNGuid;
    procedure set_ItemId(value: DDN.mscorlib.DNGuid);
    function get_NamespaceSchemas: TArray<string>;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property XmlData: TArray<Byte> read get_XmlData write set_XmlData;
    property XmlAsString: string read get_XmlAsString write set_XmlAsString;
    property ItemId: DDN.mscorlib.DNGuid read get_ItemId write set_ItemId;
    property NamespaceSchemas: TArray<string> read get_NamespaceSchemas;
  end;

  TDNCustomXmlPart = class(TDNGenericImport<DNCustomXmlPartClass, DNCustomXmlPart>) end;

  //-------------namespace: Aspose.Slides----------------
  DNCustomXmlPartCollectionClass = interface(DNObjectClass)
  ['{DD463366-F7F2-5722-8DB5-70AEDABB2A74}']
  end;

  [DNTypeName('Aspose.Slides.CustomXmlPartCollection')]
  DNCustomXmlPartCollection = interface(DDN.mscorlib.DNICollection)
  ['{10BE3199-9C8B-3E13-9770-E26039CA64BA}']
  { getters & setters } 

    function get_Count: Int32;
    function get_IsSynchronized: Boolean;
    function get_SyncRoot: DDN.mscorlib.DNObject;

  { methods } 

    procedure RemoveAt(index: Int32);
    procedure CopyTo(&array: DDN.mscorlib.DNArray; index: Int32);
    function GetEnumerator: DDN.mscorlib.DNIEnumerator<DNICustomXmlPart>;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Count: Int32 read get_Count;
    property IsSynchronized: Boolean read get_IsSynchronized;
    property SyncRoot: DDN.mscorlib.DNObject read get_SyncRoot;
  end;

  TDNCustomXmlPartCollection = class(TDNGenericImport<DNCustomXmlPartCollectionClass, DNCustomXmlPartCollection>) end;

  //-------------namespace: Aspose.Slides----------------
  DNDigitalSignatureClass = interface(DNObjectClass)
  ['{3C0A8C27-AB26-5649-A5CA-C8B9FE667307}']
  { constructors } 

    {class} function init(certificate: DDN.System.DNX509Certificate2): DNDigitalSignature; overload;
    {class} function init(filePath: string; password: string): DNDigitalSignature; overload;

  end;

  [DNTypeName('Aspose.Slides.DigitalSignature')]
  DNDigitalSignature = interface(DNIDigitalSignature)
  ['{FFA2D5E9-8417-4C00-9724-5EACF9CFD2BE}']
  { getters & setters } 

    function get_Certificate: DDN.System.DNX509Certificate2;
    function get_IsValid: Boolean;
    function get_SignTime: DDN.mscorlib.DNDateTime;
    function get_Comments: string;
    procedure set_Comments(value: string);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Certificate: DDN.System.DNX509Certificate2 read get_Certificate;
    property IsValid: Boolean read get_IsValid;
    property SignTime: DDN.mscorlib.DNDateTime read get_SignTime;
    property Comments: string read get_Comments write set_Comments;
  end;

  TDNDigitalSignature = class(TDNGenericImport<DNDigitalSignatureClass, DNDigitalSignature>) end;

  //-------------namespace: Aspose.Slides----------------
  DNDigitalSignatureCollectionClass = interface(DNObjectClass)
  ['{1CFA22D7-4B79-50F8-B3AE-3D014AB97C65}']
  end;

  [DNTypeName('Aspose.Slides.DigitalSignatureCollection')]
  DNDigitalSignatureCollection = interface(DDN.mscorlib.DNICollection)
  ['{17D57E21-7414-4D52-974B-2110DD2EFDE1}']
  { getters & setters } 

    function get_Count: Int32;
    function get_IsSynchronized: Boolean;
    function get_SyncRoot: DDN.mscorlib.DNObject;

  { methods } 

    procedure RemoveAt(index: Int32);
    function GetEnumerator: DDN.mscorlib.DNIEnumerator<DNIDigitalSignature>;
    procedure CopyTo(&array: DDN.mscorlib.DNArray; index: Int32);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Count: Int32 read get_Count;
    property IsSynchronized: Boolean read get_IsSynchronized;
    property SyncRoot: DDN.mscorlib.DNObject read get_SyncRoot;
  end;

  TDNDigitalSignatureCollection = class(TDNGenericImport<DNDigitalSignatureCollectionClass, DNDigitalSignatureCollection>) end;

  //-------------namespace: Aspose.Slides----------------
  DNDocumentPropertiesClass = interface(DNObjectClass)
  ['{34EB9F45-B34C-5D98-8E7E-2CBEE65D0562}']
  { constructors } 

    {class} function init: DNDocumentProperties;

  end;

  [DNTypeName('Aspose.Slides.DocumentProperties')]
  DNDocumentProperties = interface(DDN.mscorlib.DNICloneable)
  ['{A08571CE-0EBB-45E5-ACBF-54CE6AB0B2DE}']
  { getters & setters } 

    function get_AppVersion: string;
    function get_NameOfApplication: string;
    procedure set_NameOfApplication(value: string);
    function get_Company: string;
    procedure set_Company(value: string);
    function get_Manager: string;
    procedure set_Manager(value: string);
    function get_PresentationFormat: string;
    procedure set_PresentationFormat(value: string);
    function get_SharedDoc: Boolean;
    procedure set_SharedDoc(value: Boolean);
    function get_ApplicationTemplate: string;
    procedure set_ApplicationTemplate(value: string);
    function get_TotalEditingTime: DDN.mscorlib.DNTimeSpan;
    procedure set_TotalEditingTime(value: DDN.mscorlib.DNTimeSpan);
    function get_Title: string;
    procedure set_Title(value: string);
    function get_Subject: string;
    procedure set_Subject(value: string);
    function get_Author: string;
    procedure set_Author(value: string);
    function get_Keywords: string;
    procedure set_Keywords(value: string);
    function get_Comments: string;
    procedure set_Comments(value: string);
    function get_Category: string;
    procedure set_Category(value: string);
    function get_CreatedTime: DDN.mscorlib.DNDateTime;
    procedure set_CreatedTime(value: DDN.mscorlib.DNDateTime);
    function get_LastSavedTime: DDN.mscorlib.DNDateTime;
    procedure set_LastSavedTime(value: DDN.mscorlib.DNDateTime);
    function get_LastPrinted: DDN.mscorlib.DNDateTime;
    procedure set_LastPrinted(value: DDN.mscorlib.DNDateTime);
    function get_LastSavedBy: string;
    procedure set_LastSavedBy(value: string);
    function get_RevisionNumber: Int32;
    procedure set_RevisionNumber(value: Int32);
    function get_ContentStatus: string;
    procedure set_ContentStatus(value: string);
    function get_ContentType: string;
    procedure set_ContentType(value: string);
    function get_HyperlinkBase: string;
    procedure set_HyperlinkBase(value: string);
    function get_CountOfCustomProperties: Int32;

  { methods } 

    function GetCustomPropertyName(index: Int32): string;
    function RemoveCustomProperty(name: string): Boolean;
    function ContainsCustomProperty(name: string): Boolean;
    procedure GetCustomPropertyValue(name: string; out value: Boolean); overload;
    procedure GetCustomPropertyValue(name: string; out value: Int32); overload;
    procedure GetCustomPropertyValue(name: string; out value: DDN.mscorlib.DNDateTime); overload;
    procedure GetCustomPropertyValue(name: string; out value: string); overload;
    procedure GetCustomPropertyValue(name: string; out value: Single); overload;
    procedure GetCustomPropertyValue(name: string; out value: Double); overload;
    procedure SetCustomPropertyValue(name: string; value: Boolean); overload;
    procedure SetCustomPropertyValue(name: string; value: Int32); overload;
    procedure SetCustomPropertyValue(name: string; value: DDN.mscorlib.DNDateTime); overload;
    procedure SetCustomPropertyValue(name: string; value: string); overload;
    procedure SetCustomPropertyValue(name: string; value: Single); overload;
    procedure SetCustomPropertyValue(name: string; value: Double); overload;
    procedure ClearCustomProperties;
    procedure ClearBuiltInProperties;
    function Clone: DDN.mscorlib.DNObject;
    function CloneT: DNIDocumentProperties;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property AppVersion: string read get_AppVersion;
    property NameOfApplication: string read get_NameOfApplication write set_NameOfApplication;
    property Company: string read get_Company write set_Company;
    property Manager: string read get_Manager write set_Manager;
    property PresentationFormat: string read get_PresentationFormat write set_PresentationFormat;
    property SharedDoc: Boolean read get_SharedDoc write set_SharedDoc;
    property ApplicationTemplate: string read get_ApplicationTemplate write set_ApplicationTemplate;
    property TotalEditingTime: DDN.mscorlib.DNTimeSpan read get_TotalEditingTime write set_TotalEditingTime;
    property Title: string read get_Title write set_Title;
    property Subject: string read get_Subject write set_Subject;
    property Author: string read get_Author write set_Author;
    property Keywords: string read get_Keywords write set_Keywords;
    property Comments: string read get_Comments write set_Comments;
    property Category: string read get_Category write set_Category;
    property CreatedTime: DDN.mscorlib.DNDateTime read get_CreatedTime write set_CreatedTime;
    property LastSavedTime: DDN.mscorlib.DNDateTime read get_LastSavedTime write set_LastSavedTime;
    property LastPrinted: DDN.mscorlib.DNDateTime read get_LastPrinted write set_LastPrinted;
    property LastSavedBy: string read get_LastSavedBy write set_LastSavedBy;
    property RevisionNumber: Int32 read get_RevisionNumber write set_RevisionNumber;
    property ContentStatus: string read get_ContentStatus write set_ContentStatus;
    property ContentType: string read get_ContentType write set_ContentType;
    property HyperlinkBase: string read get_HyperlinkBase write set_HyperlinkBase;
    property CountOfCustomProperties: Int32 read get_CountOfCustomProperties;
  end;

  TDNDocumentProperties = class(TDNGenericImport<DNDocumentPropertiesClass, DNDocumentProperties>) end;

  //-------------namespace: Aspose.Slides.DOM.Ole----------------
  DNOleEmbeddedDataInfoClass = interface(DNObjectClass)
  ['{B412FDB2-7915-5040-B2B9-9D6B04A602F3}']
  { constructors } 

    {class} function init: DNOleEmbeddedDataInfo; overload;
    {class} function init(embeddedFileData: TArray<Byte>; embeddedFileExtension: string): DNOleEmbeddedDataInfo; overload;

  end;

  [DNTypeName('Aspose.Slides.DOM.Ole.OleEmbeddedDataInfo')]
  DNOleEmbeddedDataInfo = interface(DNIOleEmbeddedDataInfo)
  ['{899D5B1B-65F9-4965-844F-323388E2F398}']
  { getters & setters } 

    function get_EmbeddedFileData: TArray<Byte>;
    function get_EmbeddedFileExtension: string;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property EmbeddedFileData: TArray<Byte> read get_EmbeddedFileData;
    property EmbeddedFileExtension: string read get_EmbeddedFileExtension;
  end;

  TDNOleEmbeddedDataInfo = class(TDNGenericImport<DNOleEmbeddedDataInfoClass, DNOleEmbeddedDataInfo>) end;

  //-------------namespace: Aspose.Slides.Effects----------------
  DNEffectEffectiveDataClass = interface(DNObjectClass)
  ['{633D2145-3585-5DCC-B912-5355B9C37233}']
  end;

  [DNTypeName('Aspose.Slides.Effects.EffectEffectiveData')]
  DNEffectEffectiveData = interface(DNIEffectEffectiveData)
  ['{2EE36FA9-CFA5-3F0B-901F-220FF90C723F}']
  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNEffectEffectiveData = class(TDNGenericImport<DNEffectEffectiveDataClass, DNEffectEffectiveData>) end;

  //-------------namespace: Aspose.Slides.Effects----------------
  DNAlphaBiLevelEffectiveDataClass = interface(DNEffectEffectiveDataClass)
  ['{E1797ADA-1673-5E10-BD39-3782EAE31D03}']
  end;

  [DNTypeName('Aspose.Slides.Effects.AlphaBiLevelEffectiveData')]
  DNAlphaBiLevelEffectiveData = interface(DNEffectEffectiveData)
  ['{6F0BFCA8-6EA0-38A8-B721-BB09B5F1100B}']
  { getters & setters } 

    function get_Threshold: Single;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Threshold: Single read get_Threshold;
  end;

  TDNAlphaBiLevelEffectiveData = class(TDNGenericImport<DNAlphaBiLevelEffectiveDataClass, DNAlphaBiLevelEffectiveData>) end;

  //-------------namespace: Aspose.Slides.Effects----------------
  DNAlphaCeilingEffectiveDataClass = interface(DNEffectEffectiveDataClass)
  ['{EC54767F-61DF-5622-8D41-EE6B11A7C2BA}']
  end;

  [DNTypeName('Aspose.Slides.Effects.AlphaCeilingEffectiveData')]
  DNAlphaCeilingEffectiveData = interface(DNEffectEffectiveData)
  ['{6575B246-A995-3EB0-9ED4-3BABDD8161A3}']
  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNAlphaCeilingEffectiveData = class(TDNGenericImport<DNAlphaCeilingEffectiveDataClass, DNAlphaCeilingEffectiveData>) end;

  //-------------namespace: Aspose.Slides.Effects----------------
  DNAlphaFloorEffectiveDataClass = interface(DNEffectEffectiveDataClass)
  ['{60904C79-5C64-5A59-BB1F-EF9D4034C924}']
  end;

  [DNTypeName('Aspose.Slides.Effects.AlphaFloorEffectiveData')]
  DNAlphaFloorEffectiveData = interface(DNEffectEffectiveData)
  ['{68A70D23-964D-3B40-8D93-C63F0E6D4145}']
  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNAlphaFloorEffectiveData = class(TDNGenericImport<DNAlphaFloorEffectiveDataClass, DNAlphaFloorEffectiveData>) end;

  //-------------namespace: Aspose.Slides.Effects----------------
  DNAlphaInverseEffectiveDataClass = interface(DNEffectEffectiveDataClass)
  ['{2A578D2A-5E78-5C55-A844-955607AD3689}']
  end;

  [DNTypeName('Aspose.Slides.Effects.AlphaInverseEffectiveData')]
  DNAlphaInverseEffectiveData = interface(DNEffectEffectiveData)
  ['{375D765F-B722-3D98-B747-DF6EB1748DE1}']
  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNAlphaInverseEffectiveData = class(TDNGenericImport<DNAlphaInverseEffectiveDataClass, DNAlphaInverseEffectiveData>) end;

  //-------------namespace: Aspose.Slides.Effects----------------
  DNAlphaModulateEffectiveDataClass = interface(DNEffectEffectiveDataClass)
  ['{8E12926F-1A58-5258-BDB2-363D64681DE8}']
  end;

  [DNTypeName('Aspose.Slides.Effects.AlphaModulateEffectiveData')]
  DNAlphaModulateEffectiveData = interface(DNEffectEffectiveData)
  ['{E0D3499A-AB6A-363A-9D8E-CE26E8E33867}']
  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNAlphaModulateEffectiveData = class(TDNGenericImport<DNAlphaModulateEffectiveDataClass, DNAlphaModulateEffectiveData>) end;

  //-------------namespace: Aspose.Slides.Effects----------------
  DNAlphaModulateFixedEffectiveDataClass = interface(DNEffectEffectiveDataClass)
  ['{DF6AB82E-BAC8-5FFF-890D-64B306D41A4A}']
  end;

  [DNTypeName('Aspose.Slides.Effects.AlphaModulateFixedEffectiveData')]
  DNAlphaModulateFixedEffectiveData = interface(DNEffectEffectiveData)
  ['{AAB9DD53-A064-35E5-89B6-95E27C2C3718}']
  { getters & setters } 

    function get_Amount: Single;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Amount: Single read get_Amount;
  end;

  TDNAlphaModulateFixedEffectiveData = class(TDNGenericImport<DNAlphaModulateFixedEffectiveDataClass, DNAlphaModulateFixedEffectiveData>) end;

  //-------------namespace: Aspose.Slides.Effects----------------
  DNAlphaReplaceEffectiveDataClass = interface(DNEffectEffectiveDataClass)
  ['{BE11AEE4-37F1-56B9-9F22-15A5953C4033}']
  end;

  [DNTypeName('Aspose.Slides.Effects.AlphaReplaceEffectiveData')]
  DNAlphaReplaceEffectiveData = interface(DNEffectEffectiveData)
  ['{2C2D5257-BEC8-3F9A-B4EC-B495D9453BB8}']
  { getters & setters } 

    function get_Alpha: Single;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Alpha: Single read get_Alpha;
  end;

  TDNAlphaReplaceEffectiveData = class(TDNGenericImport<DNAlphaReplaceEffectiveDataClass, DNAlphaReplaceEffectiveData>) end;

  //-------------namespace: Aspose.Slides.Effects----------------
  DNBiLevelEffectiveDataClass = interface(DNEffectEffectiveDataClass)
  ['{A179721F-3D85-53E0-8956-637F5B7971EB}']
  end;

  [DNTypeName('Aspose.Slides.Effects.BiLevelEffectiveData')]
  DNBiLevelEffectiveData = interface(DNEffectEffectiveData)
  ['{B47F0F60-D60A-32FB-A613-EBF28D40B66F}']
  { getters & setters } 

    function get_Threshold: Single;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Threshold: Single read get_Threshold;
  end;

  TDNBiLevelEffectiveData = class(TDNGenericImport<DNBiLevelEffectiveDataClass, DNBiLevelEffectiveData>) end;

  //-------------namespace: Aspose.Slides.Effects----------------
  DNBlurEffectiveDataClass = interface(DNEffectEffectiveDataClass)
  ['{ECEBEED3-8EA0-509E-9151-1BDE13021BBC}']
  end;

  [DNTypeName('Aspose.Slides.Effects.BlurEffectiveData')]
  DNBlurEffectiveData = interface(DNEffectEffectiveData)
  ['{F7AC05F2-6D44-304E-A8E3-B89519E9DE71}']
  { getters & setters } 

    function get_Radius: Double;
    function get_Grow: Boolean;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Radius: Double read get_Radius;
    property Grow: Boolean read get_Grow;
  end;

  TDNBlurEffectiveData = class(TDNGenericImport<DNBlurEffectiveDataClass, DNBlurEffectiveData>) end;

  //-------------namespace: Aspose.Slides.Effects----------------
  DNColorChangeEffectiveDataClass = interface(DNEffectEffectiveDataClass)
  ['{A5909431-21C7-5F8B-8989-65A8009FC803}']
  end;

  [DNTypeName('Aspose.Slides.Effects.ColorChangeEffectiveData')]
  DNColorChangeEffectiveData = interface(DNEffectEffectiveData)
  ['{ACC480E6-6421-3E32-8DCF-A43CE95459E4}']
  { getters & setters } 

    function get_FromColor: DDN.System.Drawing.DNColor;
    function get_ToColor: DDN.System.Drawing.DNColor;
    function get_UseAlpha: Boolean;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property FromColor: DDN.System.Drawing.DNColor read get_FromColor;
    property ToColor: DDN.System.Drawing.DNColor read get_ToColor;
    property UseAlpha: Boolean read get_UseAlpha;
  end;

  TDNColorChangeEffectiveData = class(TDNGenericImport<DNColorChangeEffectiveDataClass, DNColorChangeEffectiveData>) end;

  //-------------namespace: Aspose.Slides.Effects----------------
  DNColorReplaceEffectiveDataClass = interface(DNEffectEffectiveDataClass)
  ['{E82804F5-98CE-5F0C-9206-287480A8485A}']
  end;

  [DNTypeName('Aspose.Slides.Effects.ColorReplaceEffectiveData')]
  DNColorReplaceEffectiveData = interface(DNEffectEffectiveData)
  ['{546EA49B-1DF0-3FC0-AF83-977E8B94FAFB}']
  { getters & setters } 

    function get_Color: DDN.System.Drawing.DNColor;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Color: DDN.System.Drawing.DNColor read get_Color;
  end;

  TDNColorReplaceEffectiveData = class(TDNGenericImport<DNColorReplaceEffectiveDataClass, DNColorReplaceEffectiveData>) end;

  //-------------namespace: Aspose.Slides.Effects----------------
  DNDuotoneEffectiveDataClass = interface(DNEffectEffectiveDataClass)
  ['{E23ACF01-FB87-532C-9BCE-A2F4F33BE042}']
  end;

  [DNTypeName('Aspose.Slides.Effects.DuotoneEffectiveData')]
  DNDuotoneEffectiveData = interface(DNEffectEffectiveData)
  ['{297D14E7-4CC5-3DB3-BF18-3A5CDB37B4FD}']
  { getters & setters } 

    function get_Color1: DDN.System.Drawing.DNColor;
    function get_Color2: DDN.System.Drawing.DNColor;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Color1: DDN.System.Drawing.DNColor read get_Color1;
    property Color2: DDN.System.Drawing.DNColor read get_Color2;
  end;

  TDNDuotoneEffectiveData = class(TDNGenericImport<DNDuotoneEffectiveDataClass, DNDuotoneEffectiveData>) end;

  //-------------namespace: Aspose.Slides.Effects----------------
  DNFillOverlayEffectiveDataClass = interface(DNEffectEffectiveDataClass)
  ['{327AC6C2-83A4-5F4A-9F40-96B0068FD32C}']
  end;

  [DNTypeName('Aspose.Slides.Effects.FillOverlayEffectiveData')]
  DNFillOverlayEffectiveData = interface(DNEffectEffectiveData)
  ['{CDDC7855-3B50-3660-B4BE-0D24B0DDC8E8}']
  { getters & setters } 

    function get_Blend: DNFillBlendMode;
    function get_FillFormat: DNIFillFormatEffectiveData;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Blend: DNFillBlendMode read get_Blend;
    property FillFormat: DNIFillFormatEffectiveData read get_FillFormat;
  end;

  TDNFillOverlayEffectiveData = class(TDNGenericImport<DNFillOverlayEffectiveDataClass, DNFillOverlayEffectiveData>) end;

  //-------------namespace: Aspose.Slides.Effects----------------
  DNGlowEffectiveDataClass = interface(DNEffectEffectiveDataClass)
  ['{9B07C565-8BF2-5C33-999A-D7A1144ACFBE}']
  end;

  [DNTypeName('Aspose.Slides.Effects.GlowEffectiveData')]
  DNGlowEffectiveData = interface(DNEffectEffectiveData)
  ['{D6D0E910-4CDC-3645-B90D-C481A719D91C}']
  { getters & setters } 

    function get_Radius: Double;
    function get_Color: DDN.System.Drawing.DNColor;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Radius: Double read get_Radius;
    property Color: DDN.System.Drawing.DNColor read get_Color;
  end;

  TDNGlowEffectiveData = class(TDNGenericImport<DNGlowEffectiveDataClass, DNGlowEffectiveData>) end;

  //-------------namespace: Aspose.Slides.Effects----------------
  DNGrayScaleEffectiveDataClass = interface(DNEffectEffectiveDataClass)
  ['{54F88478-B4E0-5653-A268-81C3AEB68EBD}']
  end;

  [DNTypeName('Aspose.Slides.Effects.GrayScaleEffectiveData')]
  DNGrayScaleEffectiveData = interface(DNEffectEffectiveData)
  ['{7DEBCCDC-F481-32B0-8F3F-ADCD2F46BCA1}']
  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNGrayScaleEffectiveData = class(TDNGenericImport<DNGrayScaleEffectiveDataClass, DNGrayScaleEffectiveData>) end;

  //-------------namespace: Aspose.Slides.Effects----------------
  DNHSLEffectiveDataClass = interface(DNEffectEffectiveDataClass)
  ['{7E0CB46D-0333-5288-8F5D-E48DEE4DB8A8}']
  end;

  [DNTypeName('Aspose.Slides.Effects.HSLEffectiveData')]
  DNHSLEffectiveData = interface(DNEffectEffectiveData)
  ['{0CE1E487-93E9-3864-8462-A3E00EFCA5E0}']
  { getters & setters } 

    function get_Hue: Single;
    function get_Saturation: Single;
    function get_Luminance: Single;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Hue: Single read get_Hue;
    property Saturation: Single read get_Saturation;
    property Luminance: Single read get_Luminance;
  end;

  TDNHSLEffectiveData = class(TDNGenericImport<DNHSLEffectiveDataClass, DNHSLEffectiveData>) end;

  //-------------namespace: Aspose.Slides.Effects----------------
  DNInnerShadowEffectiveDataClass = interface(DNEffectEffectiveDataClass)
  ['{C24C0C52-66BC-5598-9222-2E5BA3AD0E09}']
  end;

  [DNTypeName('Aspose.Slides.Effects.InnerShadowEffectiveData')]
  DNInnerShadowEffectiveData = interface(DNEffectEffectiveData)
  ['{A814382E-C34C-34BD-8629-79E9EAFB4EBA}']
  { getters & setters } 

    function get_BlurRadius: Double;
    function get_Direction: Single;
    function get_Distance: Double;
    function get_ShadowColor: DDN.System.Drawing.DNColor;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property BlurRadius: Double read get_BlurRadius;
    property Direction: Single read get_Direction;
    property Distance: Double read get_Distance;
    property ShadowColor: DDN.System.Drawing.DNColor read get_ShadowColor;
  end;

  TDNInnerShadowEffectiveData = class(TDNGenericImport<DNInnerShadowEffectiveDataClass, DNInnerShadowEffectiveData>) end;

  //-------------namespace: Aspose.Slides.Effects----------------
  DNLuminanceEffectiveDataClass = interface(DNEffectEffectiveDataClass)
  ['{C83B88D9-2A05-5735-AFC6-6BFB294F3F51}']
  end;

  [DNTypeName('Aspose.Slides.Effects.LuminanceEffectiveData')]
  DNLuminanceEffectiveData = interface(DNEffectEffectiveData)
  ['{A9EE2677-9D5F-3C17-9571-F77AB02897CB}']
  { getters & setters } 

    function get_Brightness: Single;
    function get_Contrast: Single;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Brightness: Single read get_Brightness;
    property Contrast: Single read get_Contrast;
  end;

  TDNLuminanceEffectiveData = class(TDNGenericImport<DNLuminanceEffectiveDataClass, DNLuminanceEffectiveData>) end;

  //-------------namespace: Aspose.Slides.Effects----------------
  DNOuterShadowEffectiveDataClass = interface(DNEffectEffectiveDataClass)
  ['{EC831606-DBDA-5431-8D0E-A2024AE6A95A}']
  end;

  [DNTypeName('Aspose.Slides.Effects.OuterShadowEffectiveData')]
  DNOuterShadowEffectiveData = interface(DNEffectEffectiveData)
  ['{DC0867DE-99E4-38F1-ADF0-BEC74B8439C0}']
  { getters & setters } 

    function get_BlurRadius: Double;
    function get_Direction: Single;
    function get_Distance: Double;
    function get_ShadowColor: DDN.System.Drawing.DNColor;
    function get_RectangleAlign: DNRectangleAlignment;
    function get_SkewHorizontal: Double;
    function get_SkewVertical: Double;
    function get_RotateShadowWithShape: Boolean;
    function get_ScaleHorizontal: Double;
    function get_ScaleVertical: Double;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property BlurRadius: Double read get_BlurRadius;
    property Direction: Single read get_Direction;
    property Distance: Double read get_Distance;
    property ShadowColor: DDN.System.Drawing.DNColor read get_ShadowColor;
    property RectangleAlign: DNRectangleAlignment read get_RectangleAlign;
    property SkewHorizontal: Double read get_SkewHorizontal;
    property SkewVertical: Double read get_SkewVertical;
    property RotateShadowWithShape: Boolean read get_RotateShadowWithShape;
    property ScaleHorizontal: Double read get_ScaleHorizontal;
    property ScaleVertical: Double read get_ScaleVertical;
  end;

  TDNOuterShadowEffectiveData = class(TDNGenericImport<DNOuterShadowEffectiveDataClass, DNOuterShadowEffectiveData>) end;

  //-------------namespace: Aspose.Slides.Effects----------------
  DNPresetShadowEffectiveDataClass = interface(DNEffectEffectiveDataClass)
  ['{627C9A2B-054D-5E24-B394-4F31F4BA5DE8}']
  end;

  [DNTypeName('Aspose.Slides.Effects.PresetShadowEffectiveData')]
  DNPresetShadowEffectiveData = interface(DNEffectEffectiveData)
  ['{C6C02690-3A24-3843-995B-F76586998D58}']
  { getters & setters } 

    function get_Direction: Single;
    function get_Distance: Double;
    function get_ShadowColor: DDN.System.Drawing.DNColor;
    function get_Preset: DNPresetShadowType;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Direction: Single read get_Direction;
    property Distance: Double read get_Distance;
    property ShadowColor: DDN.System.Drawing.DNColor read get_ShadowColor;
    property Preset: DNPresetShadowType read get_Preset;
  end;

  TDNPresetShadowEffectiveData = class(TDNGenericImport<DNPresetShadowEffectiveDataClass, DNPresetShadowEffectiveData>) end;

  //-------------namespace: Aspose.Slides.Effects----------------
  DNReflectionEffectiveDataClass = interface(DNEffectEffectiveDataClass)
  ['{E91E30DF-E6F3-566E-8375-B02974A5E43B}']
  end;

  [DNTypeName('Aspose.Slides.Effects.ReflectionEffectiveData')]
  DNReflectionEffectiveData = interface(DNEffectEffectiveData)
  ['{42D34B94-470F-33B2-8519-43340DD6CFF8}']
  { getters & setters } 

    function get_StartPosAlpha: Single;
    function get_EndPosAlpha: Single;
    function get_FadeDirection: Single;
    function get_StartReflectionOpacity: Single;
    function get_EndReflectionOpacity: Single;
    function get_BlurRadius: Double;
    function get_Direction: Single;
    function get_Distance: Double;
    function get_RectangleAlign: DNRectangleAlignment;
    function get_SkewHorizontal: Double;
    function get_SkewVertical: Double;
    function get_RotateShadowWithShape: Boolean;
    function get_ScaleHorizontal: Double;
    function get_ScaleVertical: Double;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property StartPosAlpha: Single read get_StartPosAlpha;
    property EndPosAlpha: Single read get_EndPosAlpha;
    property FadeDirection: Single read get_FadeDirection;
    property StartReflectionOpacity: Single read get_StartReflectionOpacity;
    property EndReflectionOpacity: Single read get_EndReflectionOpacity;
    property BlurRadius: Double read get_BlurRadius;
    property Direction: Single read get_Direction;
    property Distance: Double read get_Distance;
    property RectangleAlign: DNRectangleAlignment read get_RectangleAlign;
    property SkewHorizontal: Double read get_SkewHorizontal;
    property SkewVertical: Double read get_SkewVertical;
    property RotateShadowWithShape: Boolean read get_RotateShadowWithShape;
    property ScaleHorizontal: Double read get_ScaleHorizontal;
    property ScaleVertical: Double read get_ScaleVertical;
  end;

  TDNReflectionEffectiveData = class(TDNGenericImport<DNReflectionEffectiveDataClass, DNReflectionEffectiveData>) end;

  //-------------namespace: Aspose.Slides.Effects----------------
  DNSoftEdgeEffectiveDataClass = interface(DNEffectEffectiveDataClass)
  ['{75C15E19-DE46-5571-8E0D-9ED59F9DAF77}']
  end;

  [DNTypeName('Aspose.Slides.Effects.SoftEdgeEffectiveData')]
  DNSoftEdgeEffectiveData = interface(DNEffectEffectiveData)
  ['{E5998A56-9443-379D-AC1A-4D7CE8F71E40}']
  { getters & setters } 

    function get_Radius: Double;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Radius: Double read get_Radius;
  end;

  TDNSoftEdgeEffectiveData = class(TDNGenericImport<DNSoftEdgeEffectiveDataClass, DNSoftEdgeEffectiveData>) end;

  //-------------namespace: Aspose.Slides.Effects----------------
  DNTintEffectiveDataClass = interface(DNEffectEffectiveDataClass)
  ['{50BDAC59-5903-5FA4-8BA6-2BB485B34601}']
  end;

  [DNTypeName('Aspose.Slides.Effects.TintEffectiveData')]
  DNTintEffectiveData = interface(DNEffectEffectiveData)
  ['{1B8544D3-3C54-311E-B517-5CE2A8FA4A46}']
  { getters & setters } 

    function get_Hue: Single;
    function get_Amount: Single;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Hue: Single read get_Hue;
    property Amount: Single read get_Amount;
  end;

  TDNTintEffectiveData = class(TDNGenericImport<DNTintEffectiveDataClass, DNTintEffectiveData>) end;

  //-------------namespace: Aspose.Slides.Effects----------------
  DNEffectFactoryClass = interface(DNObjectClass)
  ['{69090C2A-B51F-54E2-AFAC-7E06CD154C77}']
  { constructors } 

    {class} function init: DNEffectFactory;

  end;

  [DNTypeName('Aspose.Slides.Effects.EffectFactory')]
  DNEffectFactory = interface(DNIEffectFactory)
  ['{5F0D20F4-7B74-4C9E-ABC7-97ECF8DD4C8C}']
  { getters & setters } 

    function get_ImageTransformOperationFactory: DNIImageTransformOperationFactory;

  { methods } 

    function CreateGlow: DNIGlow;
    function CreateInnerShadow: DNIInnerShadow;
    function CreateOuterShadow: DNIOuterShadow;
    function CreatePresetShadow: DNIPresetShadow;
    function CreateReflection: DNIReflection;
    function CreateSoftEdge: DNISoftEdge;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property ImageTransformOperationFactory: DNIImageTransformOperationFactory read get_ImageTransformOperationFactory;
  end;

  TDNEffectFactory = class(TDNGenericImport<DNEffectFactoryClass, DNEffectFactory>) end;

  //-------------namespace: Aspose.Slides.Effects----------------
  DNGlowClass = interface(DDN.mscorlib.DNObjectClass)
  ['{F2CF669C-DCB1-5DCC-AFEA-9E249EE0D1B9}']
  end;

  [DNTypeName('Aspose.Slides.Effects.Glow')]
  DNGlow = interface(DDN.mscorlib.DNObject)
  ['{C46642E0-49C6-4590-9E83-2D2FFA9407F0}']
  { getters & setters } 

    function get_Radius: Double;
    procedure set_Radius(value: Double);
    function get_Color: DNIColorFormat;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Radius: Double read get_Radius write set_Radius;
    property Color: DNIColorFormat read get_Color;
  end;

  TDNGlow = class(TDNGenericImport<DNGlowClass, DNGlow>) end;

  //-------------namespace: Aspose.Slides.Effects----------------
  DNImageTransformOCollectionEffectiveDataClass = interface(DNObjectClass)
  ['{E7D83987-F697-5020-AD43-C1C21A5CE4AC}']
  { constructors } 

    {class} function init: DNImageTransformOCollectionEffectiveData;

  end;

  [DNTypeName('Aspose.Slides.Effects.ImageTransformOCollectionEffectiveData')]
  DNImageTransformOCollectionEffectiveData = interface(DDN.mscorlib.DNICollection)
  ['{0349F150-96CE-4B84-B5C5-20778E255690}']
  { getters & setters } 

    function get_Count: Int32;
    function get_IsSynchronized: Boolean;
    function get_SyncRoot: DDN.mscorlib.DNObject;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetEnumerator: DDN.mscorlib.DNIEnumerator<DNIEffectEffectiveData>;
    procedure CopyTo(&array: DDN.mscorlib.DNArray; index: Int32);
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Count: Int32 read get_Count;
    property IsSynchronized: Boolean read get_IsSynchronized;
    property SyncRoot: DDN.mscorlib.DNObject read get_SyncRoot;
  end;

  TDNImageTransformOCollectionEffectiveData = class(TDNGenericImport<DNImageTransformOCollectionEffectiveDataClass, DNImageTransformOCollectionEffectiveData>) end;

  //-------------namespace: Aspose.Slides.Effects----------------
  DNImageTransformOperationFactoryClass = interface(DNObjectClass)
  ['{7A52073A-612D-5493-8E98-8177AE563727}']
  { constructors } 

    {class} function init: DNImageTransformOperationFactory;

  end;

  [DNTypeName('Aspose.Slides.Effects.ImageTransformOperationFactory')]
  DNImageTransformOperationFactory = interface(DNIImageTransformOperationFactory)
  ['{1FE3B39F-5F06-47D2-B919-2031BCCB6F97}']
  { methods } 

    function CreateAlphaBiLevel(threshold: Single): DNIAlphaBiLevel;
    function CreateAlphCeiling: DNIAlphaCeiling;
    function CreateAlphaFloor: DNIAlphaFloor;
    function CreateAlphaInverse: DNIAlphaInverse;
    function CreateAlphaModulate: DNIAlphaModulate;
    function CreateAlphaModulateFixed(amount: Single): DNIAlphaModulateFixed;
    function CreateAlphaReplace(alpha: Single): DNIAlphaReplace;
    function CreateBiLevel(threshold: Single): DNIBiLevel;
    function CreateBlur(radius: Double; grow: Boolean): DNIBlur;
    function CreateColorChange: DNIColorChange;
    function CreateColorReplace: DNIColorReplace;
    function CreateDuotone: DNIDuotone;
    function CreateFillOverlay: DNIFillOverlay;
    function CreateGrayScale: DNIGrayScale;
    function CreateHSL(hue: Single; saturation: Single; luminance: Single): DNIHSL;
    function CreateLuminance(brightness: Single; contrast: Single): DNILuminance;
    function CreateTint(hue: Single; amount: Single): DNITint;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNImageTransformOperationFactory = class(TDNGenericImport<DNImageTransformOperationFactoryClass, DNImageTransformOperationFactory>) end;

  //-------------namespace: Aspose.Slides.Effects----------------
  DNInnerShadowClass = interface(DDN.mscorlib.DNObjectClass)
  ['{8201F854-1AE6-5E1A-95C3-28345789490D}']
  end;

  [DNTypeName('Aspose.Slides.Effects.InnerShadow')]
  DNInnerShadow = interface(DDN.mscorlib.DNObject)
  ['{07CA9AB5-B340-4E90-AAEC-ECFA8D6F4278}']
  { getters & setters } 

    function get_BlurRadius: Double;
    procedure set_BlurRadius(value: Double);
    function get_Direction: Single;
    procedure set_Direction(value: Single);
    function get_Distance: Double;
    procedure set_Distance(value: Double);
    function get_ShadowColor: DNIColorFormat;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property BlurRadius: Double read get_BlurRadius write set_BlurRadius;
    property Direction: Single read get_Direction write set_Direction;
    property Distance: Double read get_Distance write set_Distance;
    property ShadowColor: DNIColorFormat read get_ShadowColor;
  end;

  TDNInnerShadow = class(TDNGenericImport<DNInnerShadowClass, DNInnerShadow>) end;

  //-------------namespace: Aspose.Slides.Effects----------------
  DNOuterShadowClass = interface(DDN.mscorlib.DNObjectClass)
  ['{52E60A97-E8B3-5387-A15F-8BB057D6E8C5}']
  end;

  [DNTypeName('Aspose.Slides.Effects.OuterShadow')]
  DNOuterShadow = interface(DDN.mscorlib.DNObject)
  ['{A276CE41-002A-4FEF-82E3-190A7D8E045A}']
  { getters & setters } 

    function get_BlurRadius: Double;
    procedure set_BlurRadius(value: Double);
    function get_Direction: Single;
    procedure set_Direction(value: Single);
    function get_Distance: Double;
    procedure set_Distance(value: Double);
    function get_ShadowColor: DNIColorFormat;
    function get_RectangleAlign: DNRectangleAlignment;
    procedure set_RectangleAlign(value: DNRectangleAlignment);
    function get_SkewHorizontal: Double;
    procedure set_SkewHorizontal(value: Double);
    function get_SkewVertical: Double;
    procedure set_SkewVertical(value: Double);
    function get_RotateShadowWithShape: Boolean;
    procedure set_RotateShadowWithShape(value: Boolean);
    function get_ScaleHorizontal: Double;
    procedure set_ScaleHorizontal(value: Double);
    function get_ScaleVertical: Double;
    procedure set_ScaleVertical(value: Double);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property BlurRadius: Double read get_BlurRadius write set_BlurRadius;
    property Direction: Single read get_Direction write set_Direction;
    property Distance: Double read get_Distance write set_Distance;
    property ShadowColor: DNIColorFormat read get_ShadowColor;
    property RectangleAlign: DNRectangleAlignment read get_RectangleAlign write set_RectangleAlign;
    property SkewHorizontal: Double read get_SkewHorizontal write set_SkewHorizontal;
    property SkewVertical: Double read get_SkewVertical write set_SkewVertical;
    property RotateShadowWithShape: Boolean read get_RotateShadowWithShape write set_RotateShadowWithShape;
    property ScaleHorizontal: Double read get_ScaleHorizontal write set_ScaleHorizontal;
    property ScaleVertical: Double read get_ScaleVertical write set_ScaleVertical;
  end;

  TDNOuterShadow = class(TDNGenericImport<DNOuterShadowClass, DNOuterShadow>) end;

  //-------------namespace: Aspose.Slides.Effects----------------
  DNPresetShadowClass = interface(DDN.mscorlib.DNObjectClass)
  ['{9F9B4904-D017-5D1E-9B46-8D5167BD78EB}']
  end;

  [DNTypeName('Aspose.Slides.Effects.PresetShadow')]
  DNPresetShadow = interface(DDN.mscorlib.DNObject)
  ['{12B1A87A-D139-4DFA-9B9F-7EAE94EF1A68}']
  { getters & setters } 

    function get_Direction: Single;
    procedure set_Direction(value: Single);
    function get_Distance: Double;
    procedure set_Distance(value: Double);
    function get_ShadowColor: DNIColorFormat;
    function get_Preset: DNPresetShadowType;
    procedure set_Preset(value: DNPresetShadowType);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Direction: Single read get_Direction write set_Direction;
    property Distance: Double read get_Distance write set_Distance;
    property ShadowColor: DNIColorFormat read get_ShadowColor;
    property Preset: DNPresetShadowType read get_Preset write set_Preset;
  end;

  TDNPresetShadow = class(TDNGenericImport<DNPresetShadowClass, DNPresetShadow>) end;

  //-------------namespace: Aspose.Slides.Effects----------------
  DNReflectionClass = interface(DDN.mscorlib.DNObjectClass)
  ['{3C5C6C2D-9075-5D95-83EA-44672AF30F7F}']
  end;

  [DNTypeName('Aspose.Slides.Effects.Reflection')]
  DNReflection = interface(DDN.mscorlib.DNObject)
  ['{2877771A-457A-4F28-B4AA-C66198D19851}']
  { getters & setters } 

    function get_StartPosAlpha: Single;
    procedure set_StartPosAlpha(value: Single);
    function get_EndPosAlpha: Single;
    procedure set_EndPosAlpha(value: Single);
    function get_FadeDirection: Single;
    procedure set_FadeDirection(value: Single);
    function get_StartReflectionOpacity: Single;
    procedure set_StartReflectionOpacity(value: Single);
    function get_EndReflectionOpacity: Single;
    procedure set_EndReflectionOpacity(value: Single);
    function get_BlurRadius: Double;
    procedure set_BlurRadius(value: Double);
    function get_Direction: Single;
    procedure set_Direction(value: Single);
    function get_Distance: Double;
    procedure set_Distance(value: Double);
    function get_RectangleAlign: DNRectangleAlignment;
    procedure set_RectangleAlign(value: DNRectangleAlignment);
    function get_SkewHorizontal: Double;
    procedure set_SkewHorizontal(value: Double);
    function get_SkewVertical: Double;
    procedure set_SkewVertical(value: Double);
    function get_RotateShadowWithShape: Boolean;
    procedure set_RotateShadowWithShape(value: Boolean);
    function get_ScaleHorizontal: Double;
    procedure set_ScaleHorizontal(value: Double);
    function get_ScaleVertical: Double;
    procedure set_ScaleVertical(value: Double);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property StartPosAlpha: Single read get_StartPosAlpha write set_StartPosAlpha;
    property EndPosAlpha: Single read get_EndPosAlpha write set_EndPosAlpha;
    property FadeDirection: Single read get_FadeDirection write set_FadeDirection;
    property StartReflectionOpacity: Single read get_StartReflectionOpacity write set_StartReflectionOpacity;
    property EndReflectionOpacity: Single read get_EndReflectionOpacity write set_EndReflectionOpacity;
    property BlurRadius: Double read get_BlurRadius write set_BlurRadius;
    property Direction: Single read get_Direction write set_Direction;
    property Distance: Double read get_Distance write set_Distance;
    property RectangleAlign: DNRectangleAlignment read get_RectangleAlign write set_RectangleAlign;
    property SkewHorizontal: Double read get_SkewHorizontal write set_SkewHorizontal;
    property SkewVertical: Double read get_SkewVertical write set_SkewVertical;
    property RotateShadowWithShape: Boolean read get_RotateShadowWithShape write set_RotateShadowWithShape;
    property ScaleHorizontal: Double read get_ScaleHorizontal write set_ScaleHorizontal;
    property ScaleVertical: Double read get_ScaleVertical write set_ScaleVertical;
  end;

  TDNReflection = class(TDNGenericImport<DNReflectionClass, DNReflection>) end;

  //-------------namespace: Aspose.Slides.Effects----------------
  DNSoftEdgeClass = interface(DDN.mscorlib.DNObjectClass)
  ['{E3882702-ECF0-54E3-BD13-D731CD63AC7E}']
  end;

  [DNTypeName('Aspose.Slides.Effects.SoftEdge')]
  DNSoftEdge = interface(DDN.mscorlib.DNObject)
  ['{8307610A-8FA0-4F1A-83E2-A8CB1DB14DAE}']
  { getters & setters } 

    function get_Radius: Double;
    procedure set_Radius(value: Double);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Radius: Double read get_Radius write set_Radius;
  end;

  TDNSoftEdge = class(TDNGenericImport<DNSoftEdgeClass, DNSoftEdge>) end;

  //-------------namespace: Aspose.Slides.Export----------------
  DNEmbedAllFontsHtmlControllerClass = interface(DNObjectClass)
  ['{818B97E2-BE4F-5E23-8B4A-6B3D31FD55AD}']
  { constructors } 

    {class} function init: DNEmbedAllFontsHtmlController; overload;
    {class} function init(fontNameExcludeList: TArray<string>): DNEmbedAllFontsHtmlController; overload;

  end;

  [DNTypeName('Aspose.Slides.Export.EmbedAllFontsHtmlController')]
  DNEmbedAllFontsHtmlController = interface(DNIHtmlFormattingController)
  ['{8CCABDBE-3723-4376-9611-FDABA319992A}']
  { methods } 

    procedure WriteDocumentStart(generator: DNIHtmlGenerator; presentation: DNIPresentation);
    procedure WriteDocumentEnd(generator: DNIHtmlGenerator; presentation: DNIPresentation);
    procedure WriteSlideStart(generator: DNIHtmlGenerator; slide: DNISlide);
    procedure WriteSlideEnd(generator: DNIHtmlGenerator; slide: DNISlide);
    procedure WriteShapeStart(generator: DNIHtmlGenerator; shape: DNIShape);
    procedure WriteShapeEnd(generator: DNIHtmlGenerator; shape: DNIShape);
    procedure WriteAllFonts(generator: DNIHtmlGenerator; presentation: DNIPresentation);
    procedure WriteFont(generator: DNIHtmlGenerator; originalFont: DNIFontData; substitutedFont: DNIFontData; fontStyle: string; fontWeight: string; fontData: TArray<Byte>);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNEmbedAllFontsHtmlController = class(TDNGenericImport<DNEmbedAllFontsHtmlControllerClass, DNEmbedAllFontsHtmlController>) end;

  //-------------namespace: Aspose.Slides.Export----------------
  DNEmbeddedEotFontsHtmlControllerClass = interface(DNObjectClass)
  ['{C2900CC7-2B85-5FAD-84B3-A670E8DF0080}']
  { constructors } 

    {class} function init: DNEmbeddedEotFontsHtmlController; overload;
    {class} function init(controller: DNIHtmlFormattingController): DNEmbeddedEotFontsHtmlController; overload;

  end;

  [DNTypeName('Aspose.Slides.Export.EmbeddedEotFontsHtmlController')]
  DNEmbeddedEotFontsHtmlController = interface(DNIHtmlFormattingController)
  ['{BFB8C15A-0505-4DE1-B6FE-E54858D98E87}']
  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNEmbeddedEotFontsHtmlController = class(TDNGenericImport<DNEmbeddedEotFontsHtmlControllerClass, DNEmbeddedEotFontsHtmlController>) end;

  //-------------namespace: Aspose.Slides.Export----------------
  DNEmbeddedWoffFontsHtmlControllerClass = interface(DNObjectClass)
  ['{7B62B1E9-DDEA-5C5A-B4AF-24ADC3552453}']
  { constructors } 

    {class} function init: DNEmbeddedWoffFontsHtmlController; overload;
    {class} function init(controller: DNIHtmlFormattingController): DNEmbeddedWoffFontsHtmlController; overload;

  end;

  [DNTypeName('Aspose.Slides.Export.EmbeddedWoffFontsHtmlController')]
  DNEmbeddedWoffFontsHtmlController = interface(DNIHtmlFormattingController)
  ['{E74F3A0D-CB6C-49F9-B9CE-5CD566FA6756}']
  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNEmbeddedWoffFontsHtmlController = class(TDNGenericImport<DNEmbeddedWoffFontsHtmlControllerClass, DNEmbeddedWoffFontsHtmlController>) end;

  //-------------namespace: Aspose.Slides.Export----------------
  DNHtmlFormatterClass = interface(DNObjectClass)
  ['{41F5AEEE-9096-575E-B533-FAFEDF207D9B}']
  { static methods } 

    {class} function CreateDocumentFormatter(css: string; showSlideTitle: Boolean): DNHtmlFormatter;
    {class} function CreateSlideShowFormatter(css: string; showSlideTitle: Boolean): DNHtmlFormatter;
    {class} function CreateCustomFormatter(formattingController: DNIHtmlFormattingController): DNHtmlFormatter;

  end;

  [DNTypeName('Aspose.Slides.Export.HtmlFormatter')]
  DNHtmlFormatter = interface(DNIHtmlFormatter)
  ['{666AF07D-CCA5-36EA-A772-9EAAA862C94F}']
  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNHtmlFormatter = class(TDNGenericImport<DNHtmlFormatterClass, DNHtmlFormatter>) end;

  //-------------namespace: Aspose.Slides.Export----------------
  DNHtmlGeneratorClass = interface(DNObjectClass)
  ['{559A8898-2525-500B-ACFE-994D3C9DB1C6}']
  end;

  [DNTypeName('Aspose.Slides.Export.HtmlGenerator')]
  DNHtmlGenerator = interface(DNIHtmlGenerator)
  ['{8C2F4514-7092-45DE-8213-A9429E9A5723}']
  { getters & setters } 

    function get_SlideImageSize: DDN.System.Drawing.DNSizeF;
    function get_SlideImageSizeUnit: DNSvgCoordinateUnit;
    function get_SlideImageSizeUnitCode: string;
    function get_PreviousSlideIndex: Int32;
    function get_SlideIndex: Int32;
    function get_NextSlideIndex: Int32;

  { methods } 

    procedure AddHtml(html: string); overload;
    procedure AddHtml(html: TArray<Char>); overload;
    procedure AddHtml(html: TArray<Char>; startIndex: Int32; length: Int32); overload;
    procedure AddText(text: string); overload;
    procedure AddText(text: TArray<Char>); overload;
    procedure AddText(text: TArray<Char>; startIndex: Int32; length: Int32); overload;
    procedure AddAttributeValue(value: string); overload;
    procedure AddAttributeValue(value: TArray<Char>); overload;
    procedure AddAttributeValue(value: TArray<Char>; startIndex: Int32; length: Int32); overload;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property SlideImageSize: DDN.System.Drawing.DNSizeF read get_SlideImageSize;
    property SlideImageSizeUnit: DNSvgCoordinateUnit read get_SlideImageSizeUnit;
    property SlideImageSizeUnitCode: string read get_SlideImageSizeUnitCode;
    property PreviousSlideIndex: Int32 read get_PreviousSlideIndex;
    property SlideIndex: Int32 read get_SlideIndex;
    property NextSlideIndex: Int32 read get_NextSlideIndex;
  end;

  TDNHtmlGenerator = class(TDNGenericImport<DNHtmlGeneratorClass, DNHtmlGenerator>) end;

  //-------------namespace: Aspose.Slides.Export----------------
  DNNotesCommentsLayoutingOptionsClass = interface(DNObjectClass)
  ['{0228C5C4-306C-50A5-AE93-BC70D7FFF5C6}']
  { constructors } 

    {class} function init: DNNotesCommentsLayoutingOptions;

  end;

  [DNTypeName('Aspose.Slides.Export.NotesCommentsLayoutingOptions')]
  DNNotesCommentsLayoutingOptions = interface(DNINotesCommentsLayoutingOptions)
  ['{2DFF82C2-9A6F-41D8-BDD6-1FC8CA7A4943}']
  { getters & setters } 

    function get_ShowCommentsByNoAuthor: Boolean;
    procedure set_ShowCommentsByNoAuthor(value: Boolean);
    function get_NotesPosition: DNNotesPositions;
    procedure set_NotesPosition(value: DNNotesPositions);
    function get_CommentsPosition: DNCommentsPositions;
    procedure set_CommentsPosition(value: DNCommentsPositions);
    function get_CommentsAreaColor: DDN.System.Drawing.DNColor;
    procedure set_CommentsAreaColor(value: DDN.System.Drawing.DNColor);
    function get_CommentsAreaWidth: Int32;
    procedure set_CommentsAreaWidth(value: Int32);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property ShowCommentsByNoAuthor: Boolean read get_ShowCommentsByNoAuthor write set_ShowCommentsByNoAuthor;
    property NotesPosition: DNNotesPositions read get_NotesPosition write set_NotesPosition;
    property CommentsPosition: DNCommentsPositions read get_CommentsPosition write set_CommentsPosition;
    property CommentsAreaColor: DDN.System.Drawing.DNColor read get_CommentsAreaColor write set_CommentsAreaColor;
    property CommentsAreaWidth: Int32 read get_CommentsAreaWidth write set_CommentsAreaWidth;
  end;

  TDNNotesCommentsLayoutingOptions = class(TDNGenericImport<DNNotesCommentsLayoutingOptionsClass, DNNotesCommentsLayoutingOptions>) end;

  //-------------namespace: Aspose.Slides.Export----------------
  DNResponsiveHtmlControllerClass = interface(DNObjectClass)
  ['{30F12704-DA73-570D-8CDA-5C1BC0BFE072}']
  { constructors } 

    {class} function init: DNResponsiveHtmlController; overload;
    {class} function init(controller: DNIHtmlFormattingController): DNResponsiveHtmlController; overload;

  end;

  [DNTypeName('Aspose.Slides.Export.ResponsiveHtmlController')]
  DNResponsiveHtmlController = interface(DNIHtmlFormattingController)
  ['{CBBD65EB-8D2F-4026-90F9-77F225A88DB1}']
  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNResponsiveHtmlController = class(TDNGenericImport<DNResponsiveHtmlControllerClass, DNResponsiveHtmlController>) end;

  //-------------namespace: Aspose.Slides.Export----------------
  DNSaveOptionsClass = interface(DNObjectClass)
  ['{8DEEA909-E566-5708-8734-2A7379ED24B0}']
  end;

  [DNTypeName('Aspose.Slides.Export.SaveOptions')]
  DNSaveOptions = interface(DNISaveOptions)
  ['{2DC84B02-CE7F-3F96-958D-61090CB6A19A}']
  { getters & setters } 

    function get_WarningCallback: DNIWarningCallback;
    procedure set_WarningCallback(value: DNIWarningCallback);
    function get_ProgressCallback: DNIProgressCallback;
    procedure set_ProgressCallback(value: DNIProgressCallback);
    function get_DefaultRegularFont: string;
    procedure set_DefaultRegularFont(value: string);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property WarningCallback: DNIWarningCallback read get_WarningCallback write set_WarningCallback;
    property ProgressCallback: DNIProgressCallback read get_ProgressCallback write set_ProgressCallback;
    property DefaultRegularFont: string read get_DefaultRegularFont write set_DefaultRegularFont;
  end;

  TDNSaveOptions = class(TDNGenericImport<DNSaveOptionsClass, DNSaveOptions>) end;

  //-------------namespace: Aspose.Slides.Export----------------
  DNHtmlOptionsClass = interface(DNSaveOptionsClass)
  ['{FBE14530-F6DF-5617-A0C6-639454AE7FF3}']
  { constructors } 

    {class} function init(linkEmbedController: DNILinkEmbedController): DNHtmlOptions; overload;
    {class} function init: DNHtmlOptions; overload;

  end;

  [DNTypeName('Aspose.Slides.Export.HtmlOptions')]
  DNHtmlOptions = interface(DNSaveOptions)
  ['{5C0C4ABA-9234-48DD-AFB3-3D5A56344E90}']
  { getters & setters } 

    function get_NotesCommentsLayouting: DNINotesCommentsLayoutingOptions;
    function get_ShowHiddenSlides: Boolean;
    procedure set_ShowHiddenSlides(value: Boolean);
    function get_HtmlFormatter: DNIHtmlFormatter;
    procedure set_HtmlFormatter(value: DNIHtmlFormatter);
    function get_SlideImageFormat: DNISlideImageFormat;
    procedure set_SlideImageFormat(value: DNISlideImageFormat);
    function get_JpegQuality: Byte;
    procedure set_JpegQuality(value: Byte);
    function get_PicturesCompression: DNPicturesCompression;
    procedure set_PicturesCompression(value: DNPicturesCompression);
    function get_DeletePicturesCroppedAreas: Boolean;
    procedure set_DeletePicturesCroppedAreas(value: Boolean);
    function get_SvgResponsiveLayout: Boolean;
    procedure set_SvgResponsiveLayout(value: Boolean);
    function get_WarningCallback: DNIWarningCallback;
    procedure set_WarningCallback(value: DNIWarningCallback);
    function get_ProgressCallback: DNIProgressCallback;
    procedure set_ProgressCallback(value: DNIProgressCallback);
    function get_DefaultRegularFont: string;
    procedure set_DefaultRegularFont(value: string);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property NotesCommentsLayouting: DNINotesCommentsLayoutingOptions read get_NotesCommentsLayouting;
    property ShowHiddenSlides: Boolean read get_ShowHiddenSlides write set_ShowHiddenSlides;
    property HtmlFormatter: DNIHtmlFormatter read get_HtmlFormatter write set_HtmlFormatter;
    property SlideImageFormat: DNISlideImageFormat read get_SlideImageFormat write set_SlideImageFormat;
    property JpegQuality: Byte read get_JpegQuality write set_JpegQuality;
    property PicturesCompression: DNPicturesCompression read get_PicturesCompression write set_PicturesCompression;
    property DeletePicturesCroppedAreas: Boolean read get_DeletePicturesCroppedAreas write set_DeletePicturesCroppedAreas;
    property SvgResponsiveLayout: Boolean read get_SvgResponsiveLayout write set_SvgResponsiveLayout;
    property WarningCallback: DNIWarningCallback read get_WarningCallback write set_WarningCallback;
    property ProgressCallback: DNIProgressCallback read get_ProgressCallback write set_ProgressCallback;
    property DefaultRegularFont: string read get_DefaultRegularFont write set_DefaultRegularFont;
  end;

  TDNHtmlOptions = class(TDNGenericImport<DNHtmlOptionsClass, DNHtmlOptions>) end;

  //-------------namespace: Aspose.Slides.Export----------------
  DNPdfOptionsClass = interface(DNSaveOptionsClass)
  ['{64DEED1F-8EE4-5BCD-9D3E-3C333EF60AC6}']
  { constructors } 

    {class} function init: DNPdfOptions;

  end;

  [DNTypeName('Aspose.Slides.Export.PdfOptions')]
  DNPdfOptions = interface(DNSaveOptions)
  ['{9BA5CA66-8A94-4DCD-AE43-F9D3085F02FC}']
  { getters & setters } 

    function get_NotesCommentsLayouting: DNINotesCommentsLayoutingOptions;
    function get_ShowHiddenSlides: Boolean;
    procedure set_ShowHiddenSlides(value: Boolean);
    function get_TextCompression: DNPdfTextCompression;
    procedure set_TextCompression(value: DNPdfTextCompression);
    function get_BestImagesCompressionRatio: Boolean;
    procedure set_BestImagesCompressionRatio(value: Boolean);
    function get_EmbedTrueTypeFontsForASCII: Boolean;
    procedure set_EmbedTrueTypeFontsForASCII(value: Boolean);
    function get_AdditionalCommonFontFamilies: TArray<string>;
    procedure set_AdditionalCommonFontFamilies(value: TArray<string>);
    function get_EmbedFullFonts: Boolean;
    procedure set_EmbedFullFonts(value: Boolean);
    function get_JpegQuality: Byte;
    procedure set_JpegQuality(value: Byte);
    function get_Compliance: DNPdfCompliance;
    procedure set_Compliance(value: DNPdfCompliance);
    function get_Password: string;
    procedure set_Password(value: string);
    function get_AccessPermissions: DNPdfAccessPermissions;
    procedure set_AccessPermissions(value: DNPdfAccessPermissions);
    function get_SaveMetafilesAsPng: Boolean;
    procedure set_SaveMetafilesAsPng(value: Boolean);
    function get_SufficientResolution: Single;
    procedure set_SufficientResolution(value: Single);
    function get_DrawSlidesFrame: Boolean;
    procedure set_DrawSlidesFrame(value: Boolean);
    function get_ImageTransparentColor: DDN.System.Drawing.DNColor;
    procedure set_ImageTransparentColor(value: DDN.System.Drawing.DNColor);
    function get_ApplyImageTransparent: Boolean;
    procedure set_ApplyImageTransparent(value: Boolean);
    function get_WarningCallback: DNIWarningCallback;
    procedure set_WarningCallback(value: DNIWarningCallback);
    function get_ProgressCallback: DNIProgressCallback;
    procedure set_ProgressCallback(value: DNIProgressCallback);
    function get_DefaultRegularFont: string;
    procedure set_DefaultRegularFont(value: string);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property NotesCommentsLayouting: DNINotesCommentsLayoutingOptions read get_NotesCommentsLayouting;
    property ShowHiddenSlides: Boolean read get_ShowHiddenSlides write set_ShowHiddenSlides;
    property TextCompression: DNPdfTextCompression read get_TextCompression write set_TextCompression;
    property BestImagesCompressionRatio: Boolean read get_BestImagesCompressionRatio write set_BestImagesCompressionRatio;
    property EmbedTrueTypeFontsForASCII: Boolean read get_EmbedTrueTypeFontsForASCII write set_EmbedTrueTypeFontsForASCII;
    property AdditionalCommonFontFamilies: TArray<string> read get_AdditionalCommonFontFamilies write set_AdditionalCommonFontFamilies;
    property EmbedFullFonts: Boolean read get_EmbedFullFonts write set_EmbedFullFonts;
    property JpegQuality: Byte read get_JpegQuality write set_JpegQuality;
    property Compliance: DNPdfCompliance read get_Compliance write set_Compliance;
    property Password: string read get_Password write set_Password;
    property AccessPermissions: DNPdfAccessPermissions read get_AccessPermissions write set_AccessPermissions;
    property SaveMetafilesAsPng: Boolean read get_SaveMetafilesAsPng write set_SaveMetafilesAsPng;
    property SufficientResolution: Single read get_SufficientResolution write set_SufficientResolution;
    property DrawSlidesFrame: Boolean read get_DrawSlidesFrame write set_DrawSlidesFrame;
    property ImageTransparentColor: DDN.System.Drawing.DNColor read get_ImageTransparentColor write set_ImageTransparentColor;
    property ApplyImageTransparent: Boolean read get_ApplyImageTransparent write set_ApplyImageTransparent;
    property WarningCallback: DNIWarningCallback read get_WarningCallback write set_WarningCallback;
    property ProgressCallback: DNIProgressCallback read get_ProgressCallback write set_ProgressCallback;
    property DefaultRegularFont: string read get_DefaultRegularFont write set_DefaultRegularFont;
  end;

  TDNPdfOptions = class(TDNGenericImport<DNPdfOptionsClass, DNPdfOptions>) end;

  //-------------namespace: Aspose.Slides.Export----------------
  DNPptOptionsClass = interface(DNSaveOptionsClass)
  ['{01B78F49-E9F2-5670-982F-2C3D25609B47}']
  { constructors } 

    {class} function init: DNPptOptions;

  end;

  [DNTypeName('Aspose.Slides.Export.PptOptions')]
  DNPptOptions = interface(DNSaveOptions)
  ['{1E619FD4-CE04-4BF1-BDBE-249AEB11C02E}']
  { getters & setters } 

    function get_RootDirectoryClsid: DDN.mscorlib.DNGuid;
    procedure set_RootDirectoryClsid(value: DDN.mscorlib.DNGuid);
    function get_WarningCallback: DNIWarningCallback;
    procedure set_WarningCallback(value: DNIWarningCallback);
    function get_ProgressCallback: DNIProgressCallback;
    procedure set_ProgressCallback(value: DNIProgressCallback);
    function get_DefaultRegularFont: string;
    procedure set_DefaultRegularFont(value: string);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property RootDirectoryClsid: DDN.mscorlib.DNGuid read get_RootDirectoryClsid write set_RootDirectoryClsid;
    property WarningCallback: DNIWarningCallback read get_WarningCallback write set_WarningCallback;
    property ProgressCallback: DNIProgressCallback read get_ProgressCallback write set_ProgressCallback;
    property DefaultRegularFont: string read get_DefaultRegularFont write set_DefaultRegularFont;
  end;

  TDNPptOptions = class(TDNGenericImport<DNPptOptionsClass, DNPptOptions>) end;

  //-------------namespace: Aspose.Slides.Export----------------
  DNPptxOptionsClass = interface(DNSaveOptionsClass)
  ['{5F1908DC-15FA-5282-A2FE-AE8B4F94E39F}']
  { constructors } 

    {class} function init: DNPptxOptions;

  end;

  [DNTypeName('Aspose.Slides.Export.PptxOptions')]
  DNPptxOptions = interface(DNSaveOptions)
  ['{3F87C558-7973-421D-80D3-B1B3F9AB403F}']
  { getters & setters } 

    function get_Conformance: DNConformance;
    procedure set_Conformance(value: DNConformance);
    function get_WarningCallback: DNIWarningCallback;
    procedure set_WarningCallback(value: DNIWarningCallback);
    function get_ProgressCallback: DNIProgressCallback;
    procedure set_ProgressCallback(value: DNIProgressCallback);
    function get_DefaultRegularFont: string;
    procedure set_DefaultRegularFont(value: string);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Conformance: DNConformance read get_Conformance write set_Conformance;
    property WarningCallback: DNIWarningCallback read get_WarningCallback write set_WarningCallback;
    property ProgressCallback: DNIProgressCallback read get_ProgressCallback write set_ProgressCallback;
    property DefaultRegularFont: string read get_DefaultRegularFont write set_DefaultRegularFont;
  end;

  TDNPptxOptions = class(TDNGenericImport<DNPptxOptionsClass, DNPptxOptions>) end;

  //-------------namespace: Aspose.Slides.Export----------------
  DNRenderingOptionsClass = interface(DNSaveOptionsClass)
  ['{3A7F727F-78A6-5C99-988E-0BD0619130E3}']
  { constructors } 

    {class} function init: DNRenderingOptions;

  end;

  [DNTypeName('Aspose.Slides.Export.RenderingOptions')]
  DNRenderingOptions = interface(DNSaveOptions)
  ['{12A23569-2657-45BC-8E99-9150A1546D27}']
  { getters & setters } 

    function get_NotesCommentsLayouting: DNINotesCommentsLayoutingOptions;
    function get_WarningCallback: DNIWarningCallback;
    procedure set_WarningCallback(value: DNIWarningCallback);
    function get_ProgressCallback: DNIProgressCallback;
    procedure set_ProgressCallback(value: DNIProgressCallback);
    function get_DefaultRegularFont: string;
    procedure set_DefaultRegularFont(value: string);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property NotesCommentsLayouting: DNINotesCommentsLayoutingOptions read get_NotesCommentsLayouting;
    property WarningCallback: DNIWarningCallback read get_WarningCallback write set_WarningCallback;
    property ProgressCallback: DNIProgressCallback read get_ProgressCallback write set_ProgressCallback;
    property DefaultRegularFont: string read get_DefaultRegularFont write set_DefaultRegularFont;
  end;

  TDNRenderingOptions = class(TDNGenericImport<DNRenderingOptionsClass, DNRenderingOptions>) end;

  //-------------namespace: Aspose.Slides.Export----------------
  DNSVGOptionsClass = interface(DNSaveOptionsClass)
  ['{B60998CD-0CCB-5830-AFB7-9E58D20161BB}']
  { static getter & setter } 

    {class} function get_Default: DNSVGOptions;
    {class} function get_Simple: DNSVGOptions;
    {class} function get_WYSIWYG: DNSVGOptions;

  { constructors } 

    {class} function init: DNSVGOptions; overload;
    {class} function init(linkEmbedController: DNILinkEmbedController): DNSVGOptions; overload;

  { static propertys } 

    {class} property &Default: DNSVGOptions read get_Default;
    {class} property Simple: DNSVGOptions read get_Simple;
    {class} property WYSIWYG: DNSVGOptions read get_WYSIWYG;
  end;

  [DNTypeName('Aspose.Slides.Export.SVGOptions')]
  DNSVGOptions = interface(DNSaveOptions)
  ['{3C6C5045-D90D-42C6-9271-9928D9DCFBAB}']
  { getters & setters } 

    function get_VectorizeText: Boolean;
    procedure set_VectorizeText(value: Boolean);
    function get_MetafileRasterizationDpi: Int32;
    procedure set_MetafileRasterizationDpi(value: Int32);
    function get_Disable3DText: Boolean;
    procedure set_Disable3DText(value: Boolean);
    function get_DisableGradientSplit: Boolean;
    procedure set_DisableGradientSplit(value: Boolean);
    function get_DisableLineEndCropping: Boolean;
    procedure set_DisableLineEndCropping(value: Boolean);
    function get_JpegQuality: Int32;
    procedure set_JpegQuality(value: Int32);
    function get_ShapeFormattingController: DNISvgShapeFormattingController;
    procedure set_ShapeFormattingController(value: DNISvgShapeFormattingController);
    function get_PicturesCompression: DNPicturesCompression;
    procedure set_PicturesCompression(value: DNPicturesCompression);
    function get_DeletePicturesCroppedAreas: Boolean;
    procedure set_DeletePicturesCroppedAreas(value: Boolean);
    function get_ExternalFontsHandling: DNSvgExternalFontsHandling;
    procedure set_ExternalFontsHandling(value: DNSvgExternalFontsHandling);
    function get_WarningCallback: DNIWarningCallback;
    procedure set_WarningCallback(value: DNIWarningCallback);
    function get_ProgressCallback: DNIProgressCallback;
    procedure set_ProgressCallback(value: DNIProgressCallback);
    function get_DefaultRegularFont: string;
    procedure set_DefaultRegularFont(value: string);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property VectorizeText: Boolean read get_VectorizeText write set_VectorizeText;
    property MetafileRasterizationDpi: Int32 read get_MetafileRasterizationDpi write set_MetafileRasterizationDpi;
    property Disable3DText: Boolean read get_Disable3DText write set_Disable3DText;
    property DisableGradientSplit: Boolean read get_DisableGradientSplit write set_DisableGradientSplit;
    property DisableLineEndCropping: Boolean read get_DisableLineEndCropping write set_DisableLineEndCropping;
    property JpegQuality: Int32 read get_JpegQuality write set_JpegQuality;
    property ShapeFormattingController: DNISvgShapeFormattingController read get_ShapeFormattingController write set_ShapeFormattingController;
    property PicturesCompression: DNPicturesCompression read get_PicturesCompression write set_PicturesCompression;
    property DeletePicturesCroppedAreas: Boolean read get_DeletePicturesCroppedAreas write set_DeletePicturesCroppedAreas;
    property ExternalFontsHandling: DNSvgExternalFontsHandling read get_ExternalFontsHandling write set_ExternalFontsHandling;
    property WarningCallback: DNIWarningCallback read get_WarningCallback write set_WarningCallback;
    property ProgressCallback: DNIProgressCallback read get_ProgressCallback write set_ProgressCallback;
    property DefaultRegularFont: string read get_DefaultRegularFont write set_DefaultRegularFont;
  end;

  TDNSVGOptions = class(TDNGenericImport<DNSVGOptionsClass, DNSVGOptions>) end;

  //-------------namespace: Aspose.Slides.Export----------------
  DNSwfOptionsClass = interface(DNSaveOptionsClass)
  ['{DB2435F6-E003-54C0-893E-13C0ED89BC48}']
  { constructors } 

    {class} function init: DNSwfOptions;

  end;

  [DNTypeName('Aspose.Slides.Export.SwfOptions')]
  DNSwfOptions = interface(DNSaveOptions)
  ['{9E1BA884-6771-4DE7-9D8C-F1B96E1B3C90}']
  { getters & setters } 

    function get_ShowHiddenSlides: Boolean;
    procedure set_ShowHiddenSlides(value: Boolean);
    function get_Compressed: Boolean;
    procedure set_Compressed(value: Boolean);
    function get_ViewerIncluded: Boolean;
    procedure set_ViewerIncluded(value: Boolean);
    function get_ShowPageBorder: Boolean;
    procedure set_ShowPageBorder(value: Boolean);
    function get_ShowFullScreen: Boolean;
    procedure set_ShowFullScreen(value: Boolean);
    function get_ShowPageStepper: Boolean;
    procedure set_ShowPageStepper(value: Boolean);
    function get_ShowSearch: Boolean;
    procedure set_ShowSearch(value: Boolean);
    function get_ShowTopPane: Boolean;
    procedure set_ShowTopPane(value: Boolean);
    function get_ShowBottomPane: Boolean;
    procedure set_ShowBottomPane(value: Boolean);
    function get_ShowLeftPane: Boolean;
    procedure set_ShowLeftPane(value: Boolean);
    function get_StartOpenLeftPane: Boolean;
    procedure set_StartOpenLeftPane(value: Boolean);
    function get_EnableContextMenu: Boolean;
    procedure set_EnableContextMenu(value: Boolean);
    function get_LogoImageBytes: TArray<Byte>;
    procedure set_LogoImageBytes(value: TArray<Byte>);
    function get_LogoLink: string;
    procedure set_LogoLink(value: string);
    function get_JpegQuality: Int32;
    procedure set_JpegQuality(value: Int32);
    function get_NotesCommentsLayouting: DNINotesCommentsLayoutingOptions;
    function get_WarningCallback: DNIWarningCallback;
    procedure set_WarningCallback(value: DNIWarningCallback);
    function get_ProgressCallback: DNIProgressCallback;
    procedure set_ProgressCallback(value: DNIProgressCallback);
    function get_DefaultRegularFont: string;
    procedure set_DefaultRegularFont(value: string);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property ShowHiddenSlides: Boolean read get_ShowHiddenSlides write set_ShowHiddenSlides;
    property Compressed: Boolean read get_Compressed write set_Compressed;
    property ViewerIncluded: Boolean read get_ViewerIncluded write set_ViewerIncluded;
    property ShowPageBorder: Boolean read get_ShowPageBorder write set_ShowPageBorder;
    property ShowFullScreen: Boolean read get_ShowFullScreen write set_ShowFullScreen;
    property ShowPageStepper: Boolean read get_ShowPageStepper write set_ShowPageStepper;
    property ShowSearch: Boolean read get_ShowSearch write set_ShowSearch;
    property ShowTopPane: Boolean read get_ShowTopPane write set_ShowTopPane;
    property ShowBottomPane: Boolean read get_ShowBottomPane write set_ShowBottomPane;
    property ShowLeftPane: Boolean read get_ShowLeftPane write set_ShowLeftPane;
    property StartOpenLeftPane: Boolean read get_StartOpenLeftPane write set_StartOpenLeftPane;
    property EnableContextMenu: Boolean read get_EnableContextMenu write set_EnableContextMenu;
    property LogoImageBytes: TArray<Byte> read get_LogoImageBytes write set_LogoImageBytes;
    property LogoLink: string read get_LogoLink write set_LogoLink;
    property JpegQuality: Int32 read get_JpegQuality write set_JpegQuality;
    property NotesCommentsLayouting: DNINotesCommentsLayoutingOptions read get_NotesCommentsLayouting;
    property WarningCallback: DNIWarningCallback read get_WarningCallback write set_WarningCallback;
    property ProgressCallback: DNIProgressCallback read get_ProgressCallback write set_ProgressCallback;
    property DefaultRegularFont: string read get_DefaultRegularFont write set_DefaultRegularFont;
  end;

  TDNSwfOptions = class(TDNGenericImport<DNSwfOptionsClass, DNSwfOptions>) end;

  //-------------namespace: Aspose.Slides.Export----------------
  DNTiffOptionsClass = interface(DNSaveOptionsClass)
  ['{FD8399A9-6981-55EA-9759-C831E1F0F1E2}']
  { constructors } 

    {class} function init: DNTiffOptions;

  end;

  [DNTypeName('Aspose.Slides.Export.TiffOptions')]
  DNTiffOptions = interface(DNSaveOptions)
  ['{2162FE38-D7A4-46CE-978C-ECEDB7AF54C0}']
  { getters & setters } 

    function get_NotesCommentsLayouting: DNINotesCommentsLayoutingOptions;
    function get_ShowHiddenSlides: Boolean;
    procedure set_ShowHiddenSlides(value: Boolean);
    function get_ImageSize: DDN.System.Drawing.DNSize;
    procedure set_ImageSize(value: DDN.System.Drawing.DNSize);
    function get_DpiX: UInt32;
    procedure set_DpiX(value: UInt32);
    function get_DpiY: UInt32;
    procedure set_DpiY(value: UInt32);
    function get_CompressionType: DNTiffCompressionTypes;
    procedure set_CompressionType(value: DNTiffCompressionTypes);
    function get_PixelFormat: DNImagePixelFormat;
    procedure set_PixelFormat(value: DNImagePixelFormat);
    function get_WarningCallback: DNIWarningCallback;
    procedure set_WarningCallback(value: DNIWarningCallback);
    function get_ProgressCallback: DNIProgressCallback;
    procedure set_ProgressCallback(value: DNIProgressCallback);
    function get_DefaultRegularFont: string;
    procedure set_DefaultRegularFont(value: string);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property NotesCommentsLayouting: DNINotesCommentsLayoutingOptions read get_NotesCommentsLayouting;
    property ShowHiddenSlides: Boolean read get_ShowHiddenSlides write set_ShowHiddenSlides;
    property ImageSize: DDN.System.Drawing.DNSize read get_ImageSize write set_ImageSize;
    property DpiX: UInt32 read get_DpiX write set_DpiX;
    property DpiY: UInt32 read get_DpiY write set_DpiY;
    property CompressionType: DNTiffCompressionTypes read get_CompressionType write set_CompressionType;
    property PixelFormat: DNImagePixelFormat read get_PixelFormat write set_PixelFormat;
    property WarningCallback: DNIWarningCallback read get_WarningCallback write set_WarningCallback;
    property ProgressCallback: DNIProgressCallback read get_ProgressCallback write set_ProgressCallback;
    property DefaultRegularFont: string read get_DefaultRegularFont write set_DefaultRegularFont;
  end;

  TDNTiffOptions = class(TDNGenericImport<DNTiffOptionsClass, DNTiffOptions>) end;

  //-------------namespace: Aspose.Slides.Export.Xaml----------------
  DNXamlOptionsClass = interface(DNSaveOptionsClass)
  ['{77480893-C930-53F3-8A96-03FF677CD7BF}']
  { constructors } 

    {class} function init: DNXamlOptions;

  end;

  [DNTypeName('Aspose.Slides.Export.Xaml.XamlOptions')]
  DNXamlOptions = interface(DNSaveOptions)
  ['{9644A63E-6AD4-4D31-8616-CE36FA4E9B66}']
  { getters & setters } 

    function get_ExportHiddenSlides: Boolean;
    procedure set_ExportHiddenSlides(value: Boolean);
    function get_OutputSaver: DNIXamlOutputSaver;
    procedure set_OutputSaver(value: DNIXamlOutputSaver);
    function get_WarningCallback: DNIWarningCallback;
    procedure set_WarningCallback(value: DNIWarningCallback);
    function get_ProgressCallback: DNIProgressCallback;
    procedure set_ProgressCallback(value: DNIProgressCallback);
    function get_DefaultRegularFont: string;
    procedure set_DefaultRegularFont(value: string);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property ExportHiddenSlides: Boolean read get_ExportHiddenSlides write set_ExportHiddenSlides;
    property OutputSaver: DNIXamlOutputSaver read get_OutputSaver write set_OutputSaver;
    property WarningCallback: DNIWarningCallback read get_WarningCallback write set_WarningCallback;
    property ProgressCallback: DNIProgressCallback read get_ProgressCallback write set_ProgressCallback;
    property DefaultRegularFont: string read get_DefaultRegularFont write set_DefaultRegularFont;
  end;

  TDNXamlOptions = class(TDNGenericImport<DNXamlOptionsClass, DNXamlOptions>) end;

  //-------------namespace: Aspose.Slides.Export----------------
  DNXpsOptionsClass = interface(DNSaveOptionsClass)
  ['{7FE44D54-76B7-5831-A38E-280AFF5E009A}']
  { constructors } 

    {class} function init: DNXpsOptions;

  end;

  [DNTypeName('Aspose.Slides.Export.XpsOptions')]
  DNXpsOptions = interface(DNSaveOptions)
  ['{D0C30791-2E61-4B9E-ABFF-D29F298110AC}']
  { getters & setters } 

    function get_ShowHiddenSlides: Boolean;
    procedure set_ShowHiddenSlides(value: Boolean);
    function get_SaveMetafilesAsPng: Boolean;
    procedure set_SaveMetafilesAsPng(value: Boolean);
    function get_DrawSlidesFrame: Boolean;
    procedure set_DrawSlidesFrame(value: Boolean);
    function get_WarningCallback: DNIWarningCallback;
    procedure set_WarningCallback(value: DNIWarningCallback);
    function get_ProgressCallback: DNIProgressCallback;
    procedure set_ProgressCallback(value: DNIProgressCallback);
    function get_DefaultRegularFont: string;
    procedure set_DefaultRegularFont(value: string);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property ShowHiddenSlides: Boolean read get_ShowHiddenSlides write set_ShowHiddenSlides;
    property SaveMetafilesAsPng: Boolean read get_SaveMetafilesAsPng write set_SaveMetafilesAsPng;
    property DrawSlidesFrame: Boolean read get_DrawSlidesFrame write set_DrawSlidesFrame;
    property WarningCallback: DNIWarningCallback read get_WarningCallback write set_WarningCallback;
    property ProgressCallback: DNIProgressCallback read get_ProgressCallback write set_ProgressCallback;
    property DefaultRegularFont: string read get_DefaultRegularFont write set_DefaultRegularFont;
  end;

  TDNXpsOptions = class(TDNGenericImport<DNXpsOptionsClass, DNXpsOptions>) end;

  //-------------namespace: Aspose.Slides.Export----------------
  DNSaveOptionsFactoryClass = interface(DNObjectClass)
  ['{ED26515C-6970-52A0-A301-58955147A22C}']
  { constructors } 

    {class} function init: DNSaveOptionsFactory;

  end;

  [DNTypeName('Aspose.Slides.Export.SaveOptionsFactory')]
  DNSaveOptionsFactory = interface(DNISaveOptionsFactory)
  ['{183C9CD9-EF9A-4D06-806B-EE4EF6239DC5}']
  { methods } 

    function CreatePptxOptions: DNIPptxOptions;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNSaveOptionsFactory = class(TDNGenericImport<DNSaveOptionsFactoryClass, DNSaveOptionsFactory>) end;

  //-------------namespace: Aspose.Slides.Export----------------
  DNSlideImageFormatClass = interface(DNObjectClass)
  ['{82E57C2C-CCAE-56C6-AD6D-A21B058B949A}']
  { constructors } 

    {class} function init: DNSlideImageFormat;

  { static methods } 

    {class} function Svg(options: DNSVGOptions): DNSlideImageFormat;
    {class} function Bitmap(scale: Single; imgFormat: DDN.System.Drawing.DNImageFormat): DNSlideImageFormat;

  end;

  [DNTypeName('Aspose.Slides.Export.SlideImageFormat')]
  DNSlideImageFormat = interface(DNISlideImageFormat)
  ['{84DE2E77-6510-4A9E-A9EE-F7B7DCEBF1FF}']
  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNSlideImageFormat = class(TDNGenericImport<DNSlideImageFormatClass, DNSlideImageFormat>) end;

  //-------------namespace: Aspose.Slides.Export----------------
  DNSvgShapeClass = interface(DNObjectClass)
  ['{81882B5C-70FD-5F8D-B79C-40B4FABE6D39}']
  end;

  [DNTypeName('Aspose.Slides.Export.SvgShape')]
  DNSvgShape = interface(DNISvgShape)
  ['{60E3D62D-F72D-486B-9342-BB04384F459A}']
  { getters & setters } 

    function get_Id: string;
    procedure set_Id(value: string);

  { methods } 

    procedure SetEventHandler(eventType: DNSvgEvent; handler: string);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Id: string read get_Id write set_Id;
  end;

  TDNSvgShape = class(TDNGenericImport<DNSvgShapeClass, DNSvgShape>) end;

  //-------------namespace: Aspose.Slides.Export----------------
  DNSvgTSpanClass = interface(DNObjectClass)
  ['{253A0D1C-DEF9-567D-9D0C-4054F4738F64}']
  end;

  [DNTypeName('Aspose.Slides.Export.SvgTSpan')]
  DNSvgTSpan = interface(DNISvgTSpan)
  ['{94D7739F-523C-425B-896B-B82FE1D95B25}']
  { getters & setters } 

    function get_Id: string;
    procedure set_Id(value: string);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Id: string read get_Id write set_Id;
  end;

  TDNSvgTSpan = class(TDNGenericImport<DNSvgTSpanClass, DNSvgTSpan>) end;

  //-------------namespace: Aspose.Slides.Export----------------
  DNTextToHtmlConversionOptionsClass = interface(DNObjectClass)
  ['{F0309330-C048-5A19-BE2E-31859EBA0DE6}']
  { constructors } 

    {class} function init: DNTextToHtmlConversionOptions;

  end;

  [DNTypeName('Aspose.Slides.Export.TextToHtmlConversionOptions')]
  DNTextToHtmlConversionOptions = interface(DNITextToHtmlConversionOptions)
  ['{9B66DA7E-B5D1-44A9-B508-B7988E85BE1E}']
  { getters & setters } 

    function get_AddClipboardFragmentHeader: Boolean;
    procedure set_AddClipboardFragmentHeader(value: Boolean);
    function get_TextInheritanceLimit: DNTextInheritanceLimit;
    procedure set_TextInheritanceLimit(value: DNTextInheritanceLimit);
    function get_LinkEmbedController: DNILinkEmbedController;
    procedure set_LinkEmbedController(value: DNILinkEmbedController);
    function get_EncodingName: string;
    procedure set_EncodingName(value: string);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property AddClipboardFragmentHeader: Boolean read get_AddClipboardFragmentHeader write set_AddClipboardFragmentHeader;
    property TextInheritanceLimit: DNTextInheritanceLimit read get_TextInheritanceLimit write set_TextInheritanceLimit;
    property LinkEmbedController: DNILinkEmbedController read get_LinkEmbedController write set_LinkEmbedController;
    property EncodingName: string read get_EncodingName write set_EncodingName;
  end;

  TDNTextToHtmlConversionOptions = class(TDNGenericImport<DNTextToHtmlConversionOptionsClass, DNTextToHtmlConversionOptions>) end;

  //-------------namespace: Aspose.Slides.Export----------------
  DNVideoPlayerHtmlControllerClass = interface(DNObjectClass)
  ['{BD91DE7D-2EA2-55BA-B80E-3B84A4375FC3}']
  { constructors } 

    {class} function init(path: string; fileName: string; baseUri: string): DNVideoPlayerHtmlController;

  end;

  [DNTypeName('Aspose.Slides.Export.VideoPlayerHtmlController')]
  DNVideoPlayerHtmlController = interface(DNILinkEmbedController)
  ['{D25A628D-B773-4188-95A2-B178DF9B4F41}']
  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNVideoPlayerHtmlController = class(TDNGenericImport<DNVideoPlayerHtmlControllerClass, DNVideoPlayerHtmlController>) end;

  //-------------namespace: Aspose.Slides.Export----------------
  DNVideoPlayerHtmlControllerFactoryClass = interface(DNObjectClass)
  ['{C3A2145A-306D-5E37-B187-6B2DAA0F234C}']
  { constructors } 

    {class} function init: DNVideoPlayerHtmlControllerFactory;

  end;

  [DNTypeName('Aspose.Slides.Export.VideoPlayerHtmlControllerFactory')]
  DNVideoPlayerHtmlControllerFactory = interface(DNIVideoPlayerHtmlControllerFactory)
  ['{426D4900-2649-4811-95B9-7C98E48BC21D}']
  { methods } 

    function CreateVideoPlayerHtmlController(path: string; fileName: string; baseUri: string): DNIVideoPlayerHtmlController;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNVideoPlayerHtmlControllerFactory = class(TDNGenericImport<DNVideoPlayerHtmlControllerFactoryClass, DNVideoPlayerHtmlControllerFactory>) end;

  //-------------namespace: Aspose.Slides.Export.Web----------------
  DNInputClass = interface(DDN.mscorlib.DNObjectClass)
  ['{DA562DA9-A921-5486-A4BF-15F83084A45C}']
  end;

  [DNTypeName('Aspose.Slides.Export.Web.Input')]
  DNInput = interface(DDN.mscorlib.DNObject)
  ['{BA9282E8-7C63-41EB-8B01-431FD699ADA6}']
  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNInput = class(TDNGenericImport<DNInputClass, DNInput>) end;

  //-------------namespace: Aspose.Slides.Export.Web----------------
  DNOutputClass = interface(DDN.mscorlib.DNObjectClass)
  ['{E16676D2-29E4-5891-8CBA-590EF1D27F71}']
  end;

  [DNTypeName('Aspose.Slides.Export.Web.Output')]
  DNOutput = interface(DDN.mscorlib.DNObject)
  ['{5C4C31FF-9EDD-4DD7-8F40-3DE3B91266C6}']
  { methods } 

    function Add(path: string; image: DNIPPImage): DNIOutputFile; overload;
    function Add(path: string; image: DDN.System.Drawing.DNImage): DNIOutputFile; overload;
    function Add(path: string; video: DNIVideo): DNIOutputFile; overload;
    function Add(path: string; fontData: DNIFontData; fontStyle: DDN.System.Drawing.DNFontStyle): DNIOutputFile; overload;
    function Add(path: string; textContent: string): DNIOutputFile; overload;
    procedure BindResource(outputFile: DNIOutputFile; obj: DDN.mscorlib.DNObject);
    function GetResourcePath(obj: DDN.mscorlib.DNObject): string;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNOutput = class(TDNGenericImport<DNOutputClass, DNOutput>) end;

  //-------------namespace: Aspose.Slides.Export.Web----------------
  DNOutputFileClass = interface(DNObjectClass)
  ['{90041E79-FBA0-5CD4-A791-571EDAFA0353}']
  end;

  [DNTypeName('Aspose.Slides.Export.Web.OutputFile')]
  DNOutputFile = interface(DNIOutputFile)
  ['{811D74F9-84E3-4F44-8434-3220AA41A77C}']
  { methods } 

    procedure Write(stream: DDN.mscorlib.DNStream);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNOutputFile = class(TDNGenericImport<DNOutputFileClass, DNOutputFile>) end;

  //-------------namespace: Aspose.Slides.Export.Web----------------
  DNStorageClass = interface(DDN.mscorlib.DNObjectClass)
  ['{43F6A4C8-6DD1-5312-B633-4C6A29B7DECF}']
  { constructors } 

    {class} function init: DNStorage;

  end;

  [DNTypeName('Aspose.Slides.Export.Web.Storage')]
  DNStorage = interface(DDN.mscorlib.DNObject)
  ['{5F8566AD-656A-4197-89A0-7414FBB5ABEB}']
  { methods } 

    function ContainsKey(key: string): Boolean;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNStorage = class(TDNGenericImport<DNStorageClass, DNStorage>) end;

  //-------------namespace: Aspose.Slides.Export.Web----------------
  DNTemplateContextClass<TObject> = interface(DDN.mscorlib.DNObjectClass)
  ['{F58451F6-9881-5597-B3C9-D1B3AA97E664}']
  end;

  [DNTypeName('Aspose.Slides.Export.Web.TemplateContext`1')]
  DNTemplateContext<TObject> = interface(DDN.mscorlib.DNObject)
  ['{90ED2956-5B54-4F0E-A2D0-229E65C1D214}']
  { getters & setters } 

    function get_Object: TObject;
    function get_Output: DNOutput;
    function get_Local: DNStorage;
    function get_Global: DNStorage;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property &Object: TObject read get_Object;
    property Output: DNOutput read get_Output;
    property Local: DNStorage read get_Local;
    property Global: DNStorage read get_Global;
  end;

  TDNTemplateContext<TObject> = class(TDNGenericImport<DNTemplateContextClass<TObject>, DNTemplateContext<TObject>>) end;

  //-------------namespace: Aspose.Slides.Export.Web----------------
  DNWebDocumentClass = interface(DDN.mscorlib.DNObjectClass)
  ['{90352E2C-624A-5431-A092-4D5C656622C8}']
  { constructors } 

    {class} function init(options: DNWebDocumentOptions): DNWebDocument;

  end;

  [DNTypeName('Aspose.Slides.Export.Web.WebDocument')]
  DNWebDocument = interface(DDN.mscorlib.DNObject)
  ['{1B08C301-FA4C-467E-925C-6D3FE41F0ABB}']
  { getters & setters } 

    function get_Input: DNInput;
    function get_Output: DNOutput;
    function get_Global: DNStorage;

  { methods } 

    procedure Save;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Input: DNInput read get_Input;
    property Output: DNOutput read get_Output;
    property Global: DNStorage read get_Global;
  end;

  TDNWebDocument = class(TDNGenericImport<DNWebDocumentClass, DNWebDocument>) end;

  //-------------namespace: Aspose.Slides.Export.Web----------------
  DNWebDocumentOptionsClass = interface(DDN.mscorlib.DNObjectClass)
  ['{0A3D501B-00EA-5C2D-AFA7-A59978FCDF0F}']
  { constructors } 

    {class} function init: DNWebDocumentOptions;

  end;

  [DNTypeName('Aspose.Slides.Export.Web.WebDocumentOptions')]
  DNWebDocumentOptions = interface(DDN.mscorlib.DNObject)
  ['{2F77B23A-351E-4167-80AA-F1CE0A4CC92E}']
  { getters & setters } 

    function get_TemplateEngine: DNITemplateEngine;
    procedure set_TemplateEngine(value: DNITemplateEngine);
    function get_OutputSaver: DNIOutputSaver;
    procedure set_OutputSaver(value: DNIOutputSaver);
    function get_EmbedImages: Boolean;
    procedure set_EmbedImages(value: Boolean);
    function get_AnimateTransitions: Boolean;
    procedure set_AnimateTransitions(value: Boolean);
    function get_AnimateShapes: Boolean;
    procedure set_AnimateShapes(value: Boolean);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property TemplateEngine: DNITemplateEngine read get_TemplateEngine write set_TemplateEngine;
    property OutputSaver: DNIOutputSaver read get_OutputSaver write set_OutputSaver;
    property EmbedImages: Boolean read get_EmbedImages write set_EmbedImages;
    property AnimateTransitions: Boolean read get_AnimateTransitions write set_AnimateTransitions;
    property AnimateShapes: Boolean read get_AnimateShapes write set_AnimateShapes;
  end;

  TDNWebDocumentOptions = class(TDNGenericImport<DNWebDocumentOptionsClass, DNWebDocumentOptions>) end;

  //-------------namespace: Aspose.Slides----------------
  DNFieldClass = interface(DDN.mscorlib.DNObjectClass)
  ['{2F2AB118-4529-55BA-86A0-86012FAD432A}']
  end;

  [DNTypeName('Aspose.Slides.Field')]
  DNField = interface(DDN.mscorlib.DNObject)
  ['{8119162A-8B98-346F-959E-B593FD05A05A}']
  { getters & setters } 

    function get_Type: DNIFieldType;
    procedure set_Type(value: DNIFieldType);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property &Type: DNIFieldType read get_Type write set_Type;
  end;

  TDNField = class(TDNGenericImport<DNFieldClass, DNField>) end;

  //-------------namespace: Aspose.Slides----------------
  DNFieldTypeClass = interface(DNObjectClass)
  ['{9B60DD6E-6E1B-51D6-A2F6-828159427145}']
  { static getter & setter } 

    {class} function get_SlideNumber: DNFieldType;
    {class} function get_Footer: DNFieldType;
    {class} function get_Header: DNFieldType;
    {class} function get_DateTime: DNFieldType;
    {class} function get_DateTime1: DNFieldType;
    {class} function get_DateTime2: DNFieldType;
    {class} function get_DateTime3: DNFieldType;
    {class} function get_DateTime4: DNFieldType;
    {class} function get_DateTime5: DNFieldType;
    {class} function get_DateTime6: DNFieldType;
    {class} function get_DateTime7: DNFieldType;
    {class} function get_DateTime8: DNFieldType;
    {class} function get_DateTime9: DNFieldType;
    {class} function get_DateTime10: DNFieldType;
    {class} function get_DateTime11: DNFieldType;
    {class} function get_DateTime12: DNFieldType;
    {class} function get_DateTime13: DNFieldType;

  { constructors } 

    {class} function init(str: string): DNFieldType;

  { static propertys } 

    {class} property SlideNumber: DNFieldType read get_SlideNumber;
    {class} property Footer: DNFieldType read get_Footer;
    {class} property Header: DNFieldType read get_Header;
    {class} property DateTime: DNFieldType read get_DateTime;
    {class} property DateTime1: DNFieldType read get_DateTime1;
    {class} property DateTime2: DNFieldType read get_DateTime2;
    {class} property DateTime3: DNFieldType read get_DateTime3;
    {class} property DateTime4: DNFieldType read get_DateTime4;
    {class} property DateTime5: DNFieldType read get_DateTime5;
    {class} property DateTime6: DNFieldType read get_DateTime6;
    {class} property DateTime7: DNFieldType read get_DateTime7;
    {class} property DateTime8: DNFieldType read get_DateTime8;
    {class} property DateTime9: DNFieldType read get_DateTime9;
    {class} property DateTime10: DNFieldType read get_DateTime10;
    {class} property DateTime11: DNFieldType read get_DateTime11;
    {class} property DateTime12: DNFieldType read get_DateTime12;
    {class} property DateTime13: DNFieldType read get_DateTime13;
  end;

  [DNTypeName('Aspose.Slides.FieldType')]
  DNFieldType = interface(DNIFieldType)
  ['{AA78C54F-D714-3BCB-8B00-F2DCF5CC787F}']
  { getters & setters } 

    function get_InternalString: string;
    procedure set_InternalString(value: string);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property InternalString: string read get_InternalString write set_InternalString;
  end;

  TDNFieldType = class(TDNGenericImport<DNFieldTypeClass, DNFieldType>) end;

  //-------------namespace: Aspose.Slides----------------
  DNFontDataClass = interface(DNObjectClass)
  ['{6CC073EC-C43A-5421-9F5F-C247FEEC9030}']
  { constructors } 

    {class} function init(fontName: string): DNFontData;

  end;

  [DNTypeName('Aspose.Slides.FontData')]
  DNFontData = interface(DNIFontData)
  ['{370CBBFF-1916-3C47-896C-8F0ED9A324CD}']
  { getters & setters } 

    function get_FontName: string;

  { methods } 

    function GetFontName(theme: DNIThemeEffectiveData): string;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function ToString: string;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    property FontName: string read get_FontName;
  end;

  TDNFontData = class(TDNGenericImport<DNFontDataClass, DNFontData>) end;

  //-------------namespace: Aspose.Slides----------------
  DNFontDataFactoryClass = interface(DNObjectClass)
  ['{921227FC-4A04-5EE0-9A9D-1D3EC980C260}']
  { constructors } 

    {class} function init: DNFontDataFactory;

  end;

  [DNTypeName('Aspose.Slides.FontDataFactory')]
  DNFontDataFactory = interface(DNIFontDataFactory)
  ['{4F1A30AD-F1D0-4FAD-AA92-088E2F535404}']
  { methods } 

    function CreateFontData(fontName: string): DNIFontData;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNFontDataFactory = class(TDNGenericImport<DNFontDataFactoryClass, DNFontDataFactory>) end;

  //-------------namespace: Aspose.Slides----------------
  DNFontFallBackRuleClass = interface(DNObjectClass)
  ['{55B59D6C-30F5-5752-8E18-9B48D94824F5}']
  { constructors } 

    {class} function init(startIndex: UInt32; endIndex: UInt32; fontNames: string): DNFontFallBackRule; overload;
    {class} function init(startIndex: UInt32; endIndex: UInt32; fontNames: TArray<string>): DNFontFallBackRule; overload;

  end;

  [DNTypeName('Aspose.Slides.FontFallBackRule')]
  DNFontFallBackRule = interface(DNIFontFallBackRule)
  ['{F7973ABD-289C-42A3-8050-1B6F5A3A0850}']
  { getters & setters } 

    function get_RangeStartIndex: UInt32;
    procedure set_RangeStartIndex(value: UInt32);
    function get_RangeEndIndex: UInt32;
    procedure set_RangeEndIndex(value: UInt32);
    function get_Count: Int32;

  { methods } 

    procedure AddFallBackFonts(fontName: string); overload;
    procedure AddFallBackFonts(fontNames: TArray<string>); overload;
    procedure RemoveAt(index: Int32);
    function ToArray: TArray<string>; overload;
    function ToArray(startIndex: Int32; count: Int32): TArray<string>; overload;
    function IndexOf(fontName: string): Int32;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property RangeStartIndex: UInt32 read get_RangeStartIndex write set_RangeStartIndex;
    property RangeEndIndex: UInt32 read get_RangeEndIndex write set_RangeEndIndex;
    property Count: Int32 read get_Count;
  end;

  TDNFontFallBackRule = class(TDNGenericImport<DNFontFallBackRuleClass, DNFontFallBackRule>) end;

  //-------------namespace: Aspose.Slides----------------
  DNFontFallBackRulesCollectionClass = interface(DNObjectClass)
  ['{0D4C1491-671F-5956-AC9B-02AFE12FD6A9}']
  { constructors } 

    {class} function init: DNFontFallBackRulesCollection;

  end;

  [DNTypeName('Aspose.Slides.FontFallBackRulesCollection')]
  DNFontFallBackRulesCollection = interface(DDN.mscorlib.DNICollection)
  ['{A727214F-EE4B-4BF4-8E6F-73989F2A66B4}']
  { getters & setters } 

    function get_Count: Int32;
    function get_IsSynchronized: Boolean;
    function get_SyncRoot: DDN.mscorlib.DNObject;

  { methods } 

    function GetEnumerator: DDN.mscorlib.DNIEnumerator<DNIFontFallBackRule>;
    procedure CopyTo(&array: DDN.mscorlib.DNArray; index: Int32);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Count: Int32 read get_Count;
    property IsSynchronized: Boolean read get_IsSynchronized;
    property SyncRoot: DDN.mscorlib.DNObject read get_SyncRoot;
  end;

  TDNFontFallBackRulesCollection = class(TDNGenericImport<DNFontFallBackRulesCollectionClass, DNFontFallBackRulesCollection>) end;

  //-------------namespace: Aspose.Slides----------------
  DNFontsClass = interface(DNObjectClass)
  ['{DCBAD449-D716-5632-A8F0-403D447EC582}']
  end;

  [DNTypeName('Aspose.Slides.Fonts')]
  DNFonts = interface(DNIFonts)
  ['{838458F8-148C-32BD-B18F-049717DD73AA}']
  { getters & setters } 

    function get_LatinFont: DNIFontData;
    procedure set_LatinFont(value: DNIFontData);
    function get_EastAsianFont: DNIFontData;
    procedure set_EastAsianFont(value: DNIFontData);
    function get_ComplexScriptFont: DNIFontData;
    procedure set_ComplexScriptFont(value: DNIFontData);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property LatinFont: DNIFontData read get_LatinFont write set_LatinFont;
    property EastAsianFont: DNIFontData read get_EastAsianFont write set_EastAsianFont;
    property ComplexScriptFont: DNIFontData read get_ComplexScriptFont write set_ComplexScriptFont;
  end;

  TDNFonts = class(TDNGenericImport<DNFontsClass, DNFonts>) end;

  //-------------namespace: Aspose.Slides----------------
  DNFontsLoaderClass = interface(DNObjectClass)
  ['{69DC88AB-227E-5220-B023-2446553E67CF}']
  { static methods } 

    {class} procedure LoadExternalFonts(directories: TArray<string>);
    {class} procedure LoadExternalFont(data: TArray<Byte>);
    {class} function GetFontFolders: TArray<string>;
    {class} procedure ClearCache;

  end;

  [DNTypeName('Aspose.Slides.FontsLoader')]
  DNFontsLoader = interface(DNIFontsLoader)
  ['{9B591A97-992D-31A8-B5CB-F67F03AD7C9D}']
  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNFontsLoader = class(TDNGenericImport<DNFontsLoaderClass, DNFontsLoader>) end;

  //-------------namespace: Aspose.Slides----------------
  DNFontsManagerClass = interface(DNObjectClass)
  ['{EC0BFA9A-695F-5C4A-B2D3-EA038B709A12}']
  end;

  [DNTypeName('Aspose.Slides.FontsManager')]
  DNFontsManager = interface(DNIFontsManager)
  ['{C2047F26-18CB-32F7-8FFD-B57D02C45E6D}']
  { getters & setters } 

    function get_FontSubstRuleList: DNIFontSubstRuleCollection;
    procedure set_FontSubstRuleList(value: DNIFontSubstRuleCollection);
    function get_FontFallBackRulesCollection: DNIFontFallBackRulesCollection;
    procedure set_FontFallBackRulesCollection(value: DNIFontFallBackRulesCollection);

  { methods } 

    function GetFonts: TArray<DNIFontData>;
    function GetEmbeddedFonts: TArray<DNIFontData>;
    procedure RemoveEmbeddedFont(fontData: DNIFontData);
    procedure AddEmbeddedFont(fontData: DNIFontData; embedFontRule: DNEmbedFontCharacters); overload;
    procedure AddEmbeddedFont(fontData: TArray<Byte>; embedFontRule: DNEmbedFontCharacters); overload;
    procedure ReplaceFont(sourceFont: DNIFontData; destFont: DNIFontData); overload;
    procedure ReplaceFont(substRule: DNIFontSubstRule); overload;
    procedure ReplaceFont(substRules: DNIFontSubstRuleCollection); overload;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property FontSubstRuleList: DNIFontSubstRuleCollection read get_FontSubstRuleList write set_FontSubstRuleList;
    property FontFallBackRulesCollection: DNIFontFallBackRulesCollection read get_FontFallBackRulesCollection write set_FontFallBackRulesCollection;
  end;

  TDNFontsManager = class(TDNGenericImport<DNFontsManagerClass, DNFontsManager>) end;

  //-------------namespace: Aspose.Slides----------------
  DNFontSourcesClass = interface(DNObjectClass)
  ['{8C49C8C8-F0C4-510D-AB05-DEEBB452016A}']
  { constructors } 

    {class} function init: DNFontSources;

  end;

  [DNTypeName('Aspose.Slides.FontSources')]
  DNFontSources = interface(DNIFontSources)
  ['{CE5CEB68-87E3-45DC-9CFE-F1E1A34CC679}']
  { getters & setters } 

    function get_FontFolders: TArray<string>;
    procedure set_FontFolders(value: TArray<string>);
    function get_MemoryFonts: TArray<TArray<Byte>>;
    procedure set_MemoryFonts(value: TArray<TArray<Byte>>);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property FontFolders: TArray<string> read get_FontFolders write set_FontFolders;
    property MemoryFonts: TArray<TArray<Byte>> read get_MemoryFonts write set_MemoryFonts;
  end;

  TDNFontSources = class(TDNGenericImport<DNFontSourcesClass, DNFontSources>) end;

  //-------------namespace: Aspose.Slides----------------
  DNFontSubstRuleClass = interface(DNObjectClass)
  ['{9E20F729-DEB1-5FBF-8DBD-A241A74843BD}']
  { constructors } 

    {class} function init(sourceFont: DNIFontData; destFont: DNIFontData): DNFontSubstRule; overload;
    {class} function init(sourceFont: DNIFontData; destFont: DNIFontData; fontSubstRule: DNFontSubstCondition): DNFontSubstRule; overload;

  end;

  [DNTypeName('Aspose.Slides.FontSubstRule')]
  DNFontSubstRule = interface(DNIFontSubstRule)
  ['{E4A308AD-0DD5-432E-B2F9-46E47BE93AFD}']
  { getters & setters } 

    function get_SourceFont: DNIFontData;
    function get_DestFont: DNIFontData;
    function get_ReplaceFontCondition: DNFontSubstCondition;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property SourceFont: DNIFontData read get_SourceFont;
    property DestFont: DNIFontData read get_DestFont;
    property ReplaceFontCondition: DNFontSubstCondition read get_ReplaceFontCondition;
  end;

  TDNFontSubstRule = class(TDNGenericImport<DNFontSubstRuleClass, DNFontSubstRule>) end;

  //-------------namespace: Aspose.Slides----------------
  DNFontSubstRuleCollectionClass = interface(DNObjectClass)
  ['{27567F45-7050-5D8C-A137-0504AEA194E1}']
  { constructors } 

    {class} function init: DNFontSubstRuleCollection;

  end;

  [DNTypeName('Aspose.Slides.FontSubstRuleCollection')]
  DNFontSubstRuleCollection = interface(DDN.mscorlib.DNICollection)
  ['{CA8BBB80-8368-4298-BBE5-BC930DD2FAFF}']
  { getters & setters } 

    function get_Count: Int32;
    function get_IsSynchronized: Boolean;
    function get_SyncRoot: DDN.mscorlib.DNObject;

  { methods } 

    function GetEnumerator: DDN.mscorlib.DNIEnumerator<DNIFontSubstRule>;
    procedure CopyTo(&array: DDN.mscorlib.DNArray; index: Int32);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Count: Int32 read get_Count;
    property IsSynchronized: Boolean read get_IsSynchronized;
    property SyncRoot: DDN.mscorlib.DNObject read get_SyncRoot;
  end;

  TDNFontSubstRuleCollection = class(TDNGenericImport<DNFontSubstRuleCollectionClass, DNFontSubstRuleCollection>) end;

  //-------------namespace: Aspose.Slides----------------
  DNFormatFactoryClass = interface(DNObjectClass)
  ['{1E0AD5CE-C0CC-5213-AEE4-36AF81FBDF26}']
  { static getter & setter } 

    {class} function get_Instance: DNFormatFactory;

  { constructors } 

    {class} function init: DNFormatFactory;

  { static propertys } 

    {class} property Instance: DNFormatFactory read get_Instance;
  end;

  [DNTypeName('Aspose.Slides.FormatFactory')]
  DNFormatFactory = interface(DNIFormatFactory)
  ['{CBA42315-B497-43AC-81C7-B9D3AF974BC8}']
  { methods } 

    function CreatePortionFormat: DNIPortionFormat;
    function CreateParagraphFormat: DNIParagraphFormat;
    function CreateTextFrameFormat: DNITextFrameFormat;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNFormatFactory = class(TDNGenericImport<DNFormatFactoryClass, DNFormatFactory>) end;

  //-------------namespace: Aspose.Slides----------------
  DNGeometryPathClass = interface(DNObjectClass)
  ['{9AF4F98B-0823-5ABE-B993-C47E64151A84}']
  { constructors } 

    {class} function init: DNGeometryPath;

  end;

  [DNTypeName('Aspose.Slides.GeometryPath')]
  DNGeometryPath = interface(DNIGeometryPath)
  ['{38B45955-5E0A-435D-96A0-B0EDB1AF2D94}']
  { getters & setters } 

    function get_PathData: TArray<DNIPathSegment>;
    function get_FillMode: DNPathFillModeType;
    procedure set_FillMode(value: DNPathFillModeType);
    function get_Stroke: Boolean;
    procedure set_Stroke(value: Boolean);

  { methods } 

    procedure RemoveAt(index: Int32);
    procedure LineTo(point: DDN.System.Drawing.DNPointF); overload;
    procedure LineTo(x: Single; y: Single); overload;
    procedure LineTo(point: DDN.System.Drawing.DNPointF; index: UInt32); overload;
    procedure LineTo(x: Single; y: Single; index: UInt32); overload;
    procedure CubicBezierTo(point1: DDN.System.Drawing.DNPointF; point2: DDN.System.Drawing.DNPointF; point3: DDN.System.Drawing.DNPointF); overload;
    procedure CubicBezierTo(x1: Single; y1: Single; x2: Single; y2: Single; x3: Single; y3: Single); overload;
    procedure CubicBezierTo(point1: DDN.System.Drawing.DNPointF; point2: DDN.System.Drawing.DNPointF; point3: DDN.System.Drawing.DNPointF; index: UInt32); overload;
    procedure CubicBezierTo(x1: Single; y1: Single; x2: Single; y2: Single; x3: Single; y3: Single; index: UInt32); overload;
    procedure QuadraticBezierTo(point1: DDN.System.Drawing.DNPointF; point2: DDN.System.Drawing.DNPointF); overload;
    procedure QuadraticBezierTo(x1: Single; y1: Single; x2: Single; y2: Single); overload;
    procedure QuadraticBezierTo(point1: DDN.System.Drawing.DNPointF; point2: DDN.System.Drawing.DNPointF; index: UInt32); overload;
    procedure QuadraticBezierTo(x1: Single; y1: Single; x2: Single; y2: Single; index: UInt32); overload;
    procedure CloseFigure;
    procedure MoveTo(point: DDN.System.Drawing.DNPointF); overload;
    procedure MoveTo(x: Single; y: Single); overload;
    procedure ArcTo(width: Single; heigth: Single; startAngle: Single; sweepAngle: Single);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property PathData: TArray<DNIPathSegment> read get_PathData;
    property FillMode: DNPathFillModeType read get_FillMode write set_FillMode;
    property Stroke: Boolean read get_Stroke write set_Stroke;
  end;

  TDNGeometryPath = class(TDNGenericImport<DNGeometryPathClass, DNGeometryPath>) end;

  //-------------namespace: Aspose.Slides----------------
  DNGradientStopCollectionEffectiveDataClass = interface(DNObjectClass)
  ['{D03E0937-54E2-5D65-B300-55160970C80D}']
  end;

  [DNTypeName('Aspose.Slides.GradientStopCollectionEffectiveData')]
  DNGradientStopCollectionEffectiveData = interface(DDN.mscorlib.DNICollection)
  ['{FE6CB75B-62DB-3137-8D88-61A9B326320B}']
  { getters & setters } 

    function get_Count: Int32;
    function get_IsSynchronized: Boolean;
    function get_SyncRoot: DDN.mscorlib.DNObject;

  { methods } 

    function GetEnumerator: DDN.mscorlib.DNIEnumerator<DNIGradientStopEffectiveData>;
    procedure CopyTo(&array: DDN.mscorlib.DNArray; index: Int32);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Count: Int32 read get_Count;
    property IsSynchronized: Boolean read get_IsSynchronized;
    property SyncRoot: DDN.mscorlib.DNObject read get_SyncRoot;
  end;

  TDNGradientStopCollectionEffectiveData = class(TDNGenericImport<DNGradientStopCollectionEffectiveDataClass, DNGradientStopCollectionEffectiveData>) end;

  //-------------namespace: Aspose.Slides----------------
  DNGradientStopEffectiveDataClass = interface(DDN.mscorlib.DNObjectClass)
  ['{3FDADE80-C5D6-5939-9607-B133170DD24E}']
  end;

  [DNTypeName('Aspose.Slides.GradientStopEffectiveData')]
  DNGradientStopEffectiveData = interface(DDN.mscorlib.DNObject)
  ['{32BD52B1-0579-3FF0-ABC5-F0ED970637F2}']
  { getters & setters } 

    function get_Position: Single;
    function get_Color: DDN.System.Drawing.DNColor;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Position: Single read get_Position;
    property Color: DDN.System.Drawing.DNColor read get_Color;
  end;

  TDNGradientStopEffectiveData = class(TDNGenericImport<DNGradientStopEffectiveDataClass, DNGradientStopEffectiveData>) end;

  //-------------namespace: Aspose.Slides----------------
  DNHyperlinkManagerClass = interface(DDN.mscorlib.DNObjectClass)
  ['{1D43A82A-DACB-5FBC-A359-E85B821D0E33}']
  end;

  [DNTypeName('Aspose.Slides.HyperlinkManager')]
  DNHyperlinkManager = interface(DDN.mscorlib.DNObject)
  ['{428EF858-9C29-3CEF-9E7B-44390A036B3E}']
  { methods } 

    function SetExternalHyperlinkClick(url: string): DNIHyperlink;
    function SetInternalHyperlinkClick(targetSlide: DNISlide): DNIHyperlink;
    procedure RemoveHyperlinkClick;
    function SetExternalHyperlinkMouseOver(url: string): DNIHyperlink;
    function SetInternalHyperlinkMouseOver(targetSlide: DNISlide): DNIHyperlink;
    procedure RemoveHyperlinkMouseOver;
    function SetMacroHyperlinkClick(macroName: string): DNIHyperlink;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNHyperlinkManager = class(TDNGenericImport<DNHyperlinkManagerClass, DNHyperlinkManager>) end;

  //-------------namespace: Aspose.Slides----------------
  DNHyperlinkQueriesClass = interface(DDN.mscorlib.DNObjectClass)
  ['{A98EAD9A-0F7A-5714-912F-93C7F2D28023}']
  end;

  [DNTypeName('Aspose.Slides.HyperlinkQueries')]
  DNHyperlinkQueries = interface(DDN.mscorlib.DNObject)
  ['{327A41EE-37C8-3695-8801-CFE31A6B7036}']
  { methods } 

    function GetHyperlinkClicks: DDN.mscorlib.DNIList<DNIHyperlinkContainer>;
    function GetHyperlinkMouseOvers: DDN.mscorlib.DNIList<DNIHyperlinkContainer>;
    function GetAnyHyperlinks: DDN.mscorlib.DNIList<DNIHyperlinkContainer>;
    procedure RemoveAllHyperlinks;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNHyperlinkQueries = class(TDNGenericImport<DNHyperlinkQueriesClass, DNHyperlinkQueries>) end;

  //-------------namespace: Aspose.Slides----------------
  DNImageCollectionClass = interface(DNObjectClass)
  ['{C70E585A-95ED-5E35-BA96-D12892FC2E77}']
  end;

  [DNTypeName('Aspose.Slides.ImageCollection')]
  DNImageCollection = interface(DDN.mscorlib.DNICollection)
  ['{7B3D2EE3-9B53-3633-8B8D-8DF2FA09119B}']
  { getters & setters } 

    function get_Count: Int32;
    function get_IsSynchronized: Boolean;
    function get_SyncRoot: DDN.mscorlib.DNObject;

  { methods } 

    function AddImage(imageSource: DNIPPImage): DNIPPImage; overload;
    function AddImage(image: DDN.System.Drawing.DNImage): DNIPPImage; overload;
    function AddImage(stream: DDN.mscorlib.DNMemoryStream): DNIPPImage; overload;
    function AddImage(stream: DDN.mscorlib.DNStream): DNIPPImage; overload;
    function AddImage(stream: DDN.mscorlib.DNStream; loadingStreamBehavior: DNLoadingStreamBehavior): DNIPPImage; overload;
    function AddImage(buffer: TArray<Byte>): DNIPPImage; overload;
    function AddImage(svgImage: DNISvgImage): DNIPPImage; overload;
    function GetEnumerator: DDN.mscorlib.DNIEnumerator<DNIPPImage>;
    procedure CopyTo(&array: DDN.mscorlib.DNArray; index: Int32);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Count: Int32 read get_Count;
    property IsSynchronized: Boolean read get_IsSynchronized;
    property SyncRoot: DDN.mscorlib.DNObject read get_SyncRoot;
  end;

  TDNImageCollection = class(TDNGenericImport<DNImageCollectionClass, DNImageCollection>) end;

  //-------------namespace: Aspose.Slides----------------
  DNImageWrapperClass = interface(DNObjectClass)
  ['{FD26BF77-DDE6-5C84-A8A4-956B9F6ACB76}']
  end;

  [DNTypeName('Aspose.Slides.ImageWrapper')]
  DNImageWrapper = interface(DDN.mscorlib.DNIDisposable)
  ['{6CB16B79-8C40-4E1E-B09B-FC044F4D40BC}']
  { getters & setters } 

    function get_Image: DDN.System.Drawing.DNImage;
    function get_Size: DDN.System.Drawing.DNSize;

  { methods } 

    procedure Dispose;
    procedure Save(fileName: string); overload;
    procedure Save(stream: DDN.mscorlib.DNStream; imageFormat: DNPPImageFormat); overload;
    procedure Save(fileName: string; imageFormat: DNPPImageFormat); overload;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Image: DDN.System.Drawing.DNImage read get_Image;
    property Size: DDN.System.Drawing.DNSize read get_Size;
  end;

  TDNImageWrapper = class(TDNGenericImport<DNImageWrapperClass, DNImageWrapper>) end;

  //-------------namespace: Aspose.Slides----------------
  DNImageWrapperFactoryClass = interface(DNObjectClass)
  ['{1E6A611D-2569-53E0-A7A5-2547CA84F727}']
  { constructors } 

    {class} function init: DNImageWrapperFactory;

  end;

  [DNTypeName('Aspose.Slides.ImageWrapperFactory')]
  DNImageWrapperFactory = interface(DNIImageWrapperFactory)
  ['{3D0394C7-780C-4FF5-AAA0-860822B5F4DC}']
  { methods } 

    function CreateImageWrapper(image: DDN.System.Drawing.DNImage): DNIImageWrapper; overload;
    function CreateImageWrapper(stream: DDN.mscorlib.DNStream): DNIImageWrapper; overload;
    function CreateImageWrapper(fileName: string): DNIImageWrapper; overload;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNImageWrapperFactory = class(TDNGenericImport<DNImageWrapperFactoryClass, DNImageWrapperFactory>) end;

  //-------------namespace: Aspose.Slides.Import----------------
  DNExternalResourceResolverClass = interface(DNObjectClass)
  ['{6EA018B0-F85C-5BDD-94D1-BB29474A427C}']
  { constructors } 

    {class} function init: DNExternalResourceResolver;

  end;

  [DNTypeName('Aspose.Slides.Import.ExternalResourceResolver')]
  DNExternalResourceResolver = interface(DNIExternalResourceResolver)
  ['{072C65CD-599D-4287-9470-509EB3424B0D}']
  { methods } 

    function ResolveUri(baseUri: string; relativeUri: string): string;
    function GetEntity(absoluteUri: string): DDN.mscorlib.DNStream;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNExternalResourceResolver = class(TDNGenericImport<DNExternalResourceResolverClass, DNExternalResourceResolver>) end;

  //-------------namespace: Aspose.Slides.Import----------------
  DNHtmlExternalResolverClass = interface(DNObjectClass)
  ['{2BB93BC4-5B16-5E76-B7AE-D57B17861A44}']
  { constructors } 

    {class} function init: DNHtmlExternalResolver;

  end;

  [DNTypeName('Aspose.Slides.Import.HtmlExternalResolver')]
  DNHtmlExternalResolver = interface(DNIExternalResourceResolver)
  ['{BA8C992C-D69E-4A39-AA4B-DFE73814695A}']
  { methods } 

    function ResolveUri(baseUri: string; relativeUri: string): string;
    function GetEntity(absoluteUri: string): DDN.mscorlib.DNStream;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNHtmlExternalResolver = class(TDNGenericImport<DNHtmlExternalResolverClass, DNHtmlExternalResolver>) end;

  //-------------namespace: Aspose.Slides----------------
  DNInterruptionTokenClass = interface(DNObjectClass)
  ['{E3610588-7B0C-57D3-91FF-07D8826FC492}']
  { static getter & setter } 

    {class} function get_None: DNInterruptionToken;

  { static propertys } 

    {class} property None: DNInterruptionToken read get_None;
  end;

  [DNTypeName('Aspose.Slides.InterruptionToken')]
  DNInterruptionToken = interface(DNIInterruptionToken)
  ['{6F70AC6D-6E20-4F57-B3A8-760698306A18}']
  { getters & setters } 

    function get_IsInterruptionRequested: Boolean;

  { methods } 

    procedure ThrowIfInterruptionRequested;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property IsInterruptionRequested: Boolean read get_IsInterruptionRequested;
  end;

  TDNInterruptionToken = class(TDNGenericImport<DNInterruptionTokenClass, DNInterruptionToken>) end;

  //-------------namespace: Aspose.Slides----------------
  DNInterruptionTokenSourceClass = interface(DNObjectClass)
  ['{4307D1B9-23E6-5A9E-9C5D-C7220D3B9900}']
  { constructors } 

    {class} function init: DNInterruptionTokenSource;

  end;

  [DNTypeName('Aspose.Slides.InterruptionTokenSource')]
  DNInterruptionTokenSource = interface(DNIInterruptionTokenSource)
  ['{02766F24-E0CD-4E29-B337-F357324440CC}']
  { getters & setters } 

    function get_Token: DNIInterruptionToken;
    function get_IsInterruptionRequested: Boolean;

  { methods } 

    procedure Interrupt;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Token: DNIInterruptionToken read get_Token;
    property IsInterruptionRequested: Boolean read get_IsInterruptionRequested;
  end;

  TDNInterruptionTokenSource = class(TDNGenericImport<DNInterruptionTokenSourceClass, DNInterruptionTokenSource>) end;

  //-------------namespace: Aspose.Slides----------------
  DNLayoutSlideCollectionClass = interface(DNObjectClass)
  ['{EAA7CC7E-967B-5713-B620-6CD1213760C8}']
  end;

  [DNTypeName('Aspose.Slides.LayoutSlideCollection')]
  DNLayoutSlideCollection = interface(DDN.mscorlib.DNICollection)
  ['{CBCF019A-6F76-31EC-A9EC-E3E83221AB2D}']
  { getters & setters } 

    function get_Count: Int32;
    function get_IsSynchronized: Boolean;
    function get_SyncRoot: DDN.mscorlib.DNObject;

  { methods } 

    function GetByType(&type: DNSlideLayoutType): DNILayoutSlide;
    procedure RemoveUnused;
    function GetEnumerator: DDN.mscorlib.DNIEnumerator<DNILayoutSlide>;
    procedure CopyTo(&array: DDN.mscorlib.DNArray; index: Int32);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Count: Int32 read get_Count;
    property IsSynchronized: Boolean read get_IsSynchronized;
    property SyncRoot: DDN.mscorlib.DNObject read get_SyncRoot;
  end;

  TDNLayoutSlideCollection = class(TDNGenericImport<DNLayoutSlideCollectionClass, DNLayoutSlideCollection>) end;

  //-------------namespace: Aspose.Slides----------------
  DNGlobalLayoutSlideCollectionClass = interface(DNLayoutSlideCollectionClass)
  ['{7DF69916-1F20-5C2A-9752-7F774699E5F5}']
  end;

  [DNTypeName('Aspose.Slides.GlobalLayoutSlideCollection')]
  DNGlobalLayoutSlideCollection = interface(DNLayoutSlideCollection)
  ['{20FDF52D-5130-3E8E-A383-7805F72BE04A}']
  { getters & setters } 

    function get_Count: Int32;
    function get_IsSynchronized: Boolean;
    function get_SyncRoot: DDN.mscorlib.DNObject;

  { methods } 

    function AddClone(sourceLayout: DNILayoutSlide): DNILayoutSlide; overload;
    function AddClone(sourceLayout: DNILayoutSlide; destMaster: DNIMasterSlide): DNILayoutSlide; overload;
    function GetByType(&type: DNSlideLayoutType): DNILayoutSlide;
    procedure RemoveUnused;
    function GetEnumerator: DDN.mscorlib.DNIEnumerator<DNILayoutSlide>;
    procedure CopyTo(&array: DDN.mscorlib.DNArray; index: Int32);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Count: Int32 read get_Count;
    property IsSynchronized: Boolean read get_IsSynchronized;
    property SyncRoot: DDN.mscorlib.DNObject read get_SyncRoot;
  end;

  TDNGlobalLayoutSlideCollection = class(TDNGenericImport<DNGlobalLayoutSlideCollectionClass, DNGlobalLayoutSlideCollection>) end;

  //-------------namespace: Aspose.Slides----------------
  DNMasterLayoutSlideCollectionClass = interface(DNLayoutSlideCollectionClass)
  ['{60FC10A1-1F43-56D6-A79F-F0AFF10E6D3A}']
  end;

  [DNTypeName('Aspose.Slides.MasterLayoutSlideCollection')]
  DNMasterLayoutSlideCollection = interface(DNLayoutSlideCollection)
  ['{A8682871-9269-33C4-BF21-B65D51256ED5}']
  { getters & setters } 

    function get_Count: Int32;
    function get_IsSynchronized: Boolean;
    function get_SyncRoot: DDN.mscorlib.DNObject;

  { methods } 

    function AddClone(sourceLayout: DNILayoutSlide): DNILayoutSlide;
    function InsertClone(index: Int32; sourceLayout: DNILayoutSlide): DNILayoutSlide;
    function Insert(index: Int32; layoutType: DNSlideLayoutType; layoutName: string): DNILayoutSlide;
    procedure RemoveAt(index: Int32);
    procedure Reorder(index: Int32; layoutSlide: DNILayoutSlide);
    function GetByType(&type: DNSlideLayoutType): DNILayoutSlide;
    procedure RemoveUnused;
    function GetEnumerator: DDN.mscorlib.DNIEnumerator<DNILayoutSlide>;
    procedure CopyTo(&array: DDN.mscorlib.DNArray; index: Int32);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Count: Int32 read get_Count;
    property IsSynchronized: Boolean read get_IsSynchronized;
    property SyncRoot: DDN.mscorlib.DNObject read get_SyncRoot;
  end;

  TDNMasterLayoutSlideCollection = class(TDNGenericImport<DNMasterLayoutSlideCollectionClass, DNMasterLayoutSlideCollection>) end;

  //-------------namespace: Aspose.Slides----------------
  DNLicenseClass = interface(DNObjectClass)
  ['{3D9BC115-30D5-5900-9ED7-100074516673}']
  { constructors } 

    {class} function init: DNLicense;

  end;

  [DNTypeName('Aspose.Slides.License')]
  DNLicense = interface(DNILicense)
  ['{AD3066FA-03F3-4739-8A48-8D3D0C697936}']
  { methods } 

    procedure SetLicense(licenseName: string); overload;
    procedure SetLicense(stream: DDN.mscorlib.DNStream); overload;
    procedure ResetLicense;
    function IsLicensed: Boolean;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNLicense = class(TDNGenericImport<DNLicenseClass, DNLicense>) end;

  //-------------namespace: Aspose.Slides----------------
  DNLoadOptionsClass = interface(DNObjectClass)
  ['{40FE4FF1-A6B6-554C-B58C-893F3F5B5869}']
  { constructors } 

    {class} function init: DNLoadOptions; overload;
    {class} function init(loadFormat: DNLoadFormat): DNLoadOptions; overload;

  end;

  [DNTypeName('Aspose.Slides.LoadOptions')]
  DNLoadOptions = interface(DNILoadOptions)
  ['{7CC1885F-A947-4BBB-B053-7818503E4F02}']
  { getters & setters } 

    function get_LoadFormat: DNLoadFormat;
    procedure set_LoadFormat(value: DNLoadFormat);
    function get_DefaultRegularFont: string;
    procedure set_DefaultRegularFont(value: string);
    function get_DefaultSymbolFont: string;
    procedure set_DefaultSymbolFont(value: string);
    function get_DefaultAsianFont: string;
    procedure set_DefaultAsianFont(value: string);
    function get_Password: string;
    procedure set_Password(value: string);
    function get_OnlyLoadDocumentProperties: Boolean;
    procedure set_OnlyLoadDocumentProperties(value: Boolean);
    function get_WarningCallback: DNIWarningCallback;
    procedure set_WarningCallback(value: DNIWarningCallback);
    function get_BlobManagementOptions: DNIBlobManagementOptions;
    procedure set_BlobManagementOptions(value: DNIBlobManagementOptions);
    function get_DocumentLevelFontSources: DNIFontSources;
    procedure set_DocumentLevelFontSources(value: DNIFontSources);
    function get_InterruptionToken: DNIInterruptionToken;
    procedure set_InterruptionToken(value: DNIInterruptionToken);
    function get_ResourceLoadingCallback: DNIResourceLoadingCallback;
    procedure set_ResourceLoadingCallback(value: DNIResourceLoadingCallback);
    function get_SpreadsheetOptions: DNISpreadsheetOptions;
    procedure set_SpreadsheetOptions(value: DNISpreadsheetOptions);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property LoadFormat: DNLoadFormat read get_LoadFormat write set_LoadFormat;
    property DefaultRegularFont: string read get_DefaultRegularFont write set_DefaultRegularFont;
    property DefaultSymbolFont: string read get_DefaultSymbolFont write set_DefaultSymbolFont;
    property DefaultAsianFont: string read get_DefaultAsianFont write set_DefaultAsianFont;
    property Password: string read get_Password write set_Password;
    property OnlyLoadDocumentProperties: Boolean read get_OnlyLoadDocumentProperties write set_OnlyLoadDocumentProperties;
    property WarningCallback: DNIWarningCallback read get_WarningCallback write set_WarningCallback;
    property BlobManagementOptions: DNIBlobManagementOptions read get_BlobManagementOptions write set_BlobManagementOptions;
    property DocumentLevelFontSources: DNIFontSources read get_DocumentLevelFontSources write set_DocumentLevelFontSources;
    property InterruptionToken: DNIInterruptionToken read get_InterruptionToken write set_InterruptionToken;
    property ResourceLoadingCallback: DNIResourceLoadingCallback read get_ResourceLoadingCallback write set_ResourceLoadingCallback;
    property SpreadsheetOptions: DNISpreadsheetOptions read get_SpreadsheetOptions write set_SpreadsheetOptions;
  end;

  TDNLoadOptions = class(TDNGenericImport<DNLoadOptionsClass, DNLoadOptions>) end;

  //-------------namespace: Aspose.Slides----------------
  DNMasterSlideCollectionClass = interface(DNObjectClass)
  ['{130F5F0C-85BC-5DB3-87AD-6CC1D16DAFB3}']
  end;

  [DNTypeName('Aspose.Slides.MasterSlideCollection')]
  DNMasterSlideCollection = interface(DDN.mscorlib.DNICollection)
  ['{3D617D74-CA33-3DFF-9C61-5407A8BC2320}']
  { getters & setters } 

    function get_Count: Int32;
    function get_IsSynchronized: Boolean;
    function get_SyncRoot: DDN.mscorlib.DNObject;

  { methods } 

    procedure RemoveAt(index: Int32);
    procedure RemoveUnused(ignorePreserveField: Boolean);
    function AddClone(sourceMaster: DNIMasterSlide): DNIMasterSlide;
    function InsertClone(index: Int32; sourceMaster: DNIMasterSlide): DNIMasterSlide;
    procedure CopyTo(&array: DDN.mscorlib.DNArray; index: Int32);
    function GetEnumerator: DDN.mscorlib.DNIEnumerator<DNIMasterSlide>;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Count: Int32 read get_Count;
    property IsSynchronized: Boolean read get_IsSynchronized;
    property SyncRoot: DDN.mscorlib.DNObject read get_SyncRoot;
  end;

  TDNMasterSlideCollection = class(TDNGenericImport<DNMasterSlideCollectionClass, DNMasterSlideCollection>) end;

  //-------------namespace: Aspose.Slides.MathText----------------
  DNMathAccentFactoryClass = interface(DNObjectClass)
  ['{AE1B6019-C140-5AF4-AE44-063A2FEA2BEE}']
  { constructors } 

    {class} function init: DNMathAccentFactory;

  end;

  [DNTypeName('Aspose.Slides.MathText.MathAccentFactory')]
  DNMathAccentFactory = interface(DNIMathAccentFactory)
  ['{6647B5D7-4C08-4CB6-A72D-941C5D3DE8EF}']
  { methods } 

    function CreateMathAccent(element: DNIMathElement): DNIMathAccent; overload;
    function CreateMathAccent(element: DNIMathElement; accentCharacter: Char): DNIMathAccent; overload;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNMathAccentFactory = class(TDNGenericImport<DNMathAccentFactoryClass, DNMathAccentFactory>) end;

  //-------------namespace: Aspose.Slides.MathText----------------
  DNMathArrayFactoryClass = interface(DNObjectClass)
  ['{07D68BB6-6844-5538-A1CA-4CA369F7B224}']
  { constructors } 

    {class} function init: DNMathArrayFactory;

  end;

  [DNTypeName('Aspose.Slides.MathText.MathArrayFactory')]
  DNMathArrayFactory = interface(DNIMathArrayFactory)
  ['{205FA03B-229A-4030-8832-ACBC9B3E5BAB}']
  { methods } 

    function CreateMathArray(element: DNIMathElement): DNIMathArray; overload;
    function CreateMathArray(elements: DNIMathElementCollection): DNIMathArray; overload;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNMathArrayFactory = class(TDNGenericImport<DNMathArrayFactoryClass, DNMathArrayFactory>) end;

  //-------------namespace: Aspose.Slides.MathText----------------
  DNMathBarFactoryClass = interface(DNObjectClass)
  ['{50305D4A-5BE5-5D02-812B-5351688DF88E}']
  { constructors } 

    {class} function init: DNMathBarFactory;

  end;

  [DNTypeName('Aspose.Slides.MathText.MathBarFactory')]
  DNMathBarFactory = interface(DNIMathBarFactory)
  ['{AAEF2AC0-1CD7-4B8D-A8A7-2DE1C7B21D83}']
  { methods } 

    function CreateMathBar(element: DNIMathElement): DNIMathBar; overload;
    function CreateMathBar(element: DNIMathElement; position: DNMathTopBotPositions): DNIMathBar; overload;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNMathBarFactory = class(TDNGenericImport<DNMathBarFactoryClass, DNMathBarFactory>) end;

  //-------------namespace: Aspose.Slides.MathText----------------
  DNMathBlockFactoryClass = interface(DNObjectClass)
  ['{10818370-44CC-575C-94E6-F818911B13DA}']
  { constructors } 

    {class} function init: DNMathBlockFactory;

  end;

  [DNTypeName('Aspose.Slides.MathText.MathBlockFactory')]
  DNMathBlockFactory = interface(DNIMathBlockFactory)
  ['{F8931609-732C-462E-862B-7C4AFEBABAC4}']
  { methods } 

    function CreateMathBlock: DNIMathBlock; overload;
    function CreateMathBlock(mathElement: DNIMathElement): DNIMathBlock; overload;
    function CreateMathBlock(mathElements: DNIMathElementCollection): DNIMathBlock; overload;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNMathBlockFactory = class(TDNGenericImport<DNMathBlockFactoryClass, DNMathBlockFactory>) end;

  //-------------namespace: Aspose.Slides.MathText----------------
  DNMathBorderBoxFactoryClass = interface(DNObjectClass)
  ['{0F2EF50E-F819-504C-B321-CB9F745ADDF1}']
  { constructors } 

    {class} function init: DNMathBorderBoxFactory;

  end;

  [DNTypeName('Aspose.Slides.MathText.MathBorderBoxFactory')]
  DNMathBorderBoxFactory = interface(DNIMathBorderBoxFactory)
  ['{A12E8D5C-CF7C-4B01-841E-28D9E7B6A18C}']
  { methods } 

    function CreateMathBorderBox(element: DNIMathElement): DNIMathBorderBox; overload;
    function CreateMathBorderBox(element: DNIMathElement; hideTop: Boolean; hideBottom: Boolean; hideLeft: Boolean; hideRight: Boolean; strikethroughHorizontal: Boolean; strikethroughVertical: Boolean; strikethroughBottomLeftToTopRight: Boolean; strikethroughTopLeftToBottomRight: Boolean): DNIMathBorderBox; overload;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNMathBorderBoxFactory = class(TDNGenericImport<DNMathBorderBoxFactoryClass, DNMathBorderBoxFactory>) end;

  //-------------namespace: Aspose.Slides.MathText----------------
  DNMathBoxFactoryClass = interface(DNObjectClass)
  ['{6926350E-6C41-52A0-BB63-F7EAC645EE7C}']
  { constructors } 

    {class} function init: DNMathBoxFactory;

  end;

  [DNTypeName('Aspose.Slides.MathText.MathBoxFactory')]
  DNMathBoxFactory = interface(DNIMathBoxFactory)
  ['{DCA3773D-9A1A-4DB2-9C32-082867C77EFD}']
  { methods } 

    function CreateMathBox(element: DNIMathElement): DNIMathBox;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNMathBoxFactory = class(TDNGenericImport<DNMathBoxFactoryClass, DNMathBoxFactory>) end;

  //-------------namespace: Aspose.Slides.MathText----------------
  DNMathDelimiterFactoryClass = interface(DNObjectClass)
  ['{8CC8B4BD-D921-562A-B6FA-19F54CD5170D}']
  { constructors } 

    {class} function init: DNMathDelimiterFactory;

  end;

  [DNTypeName('Aspose.Slides.MathText.MathDelimiterFactory')]
  DNMathDelimiterFactory = interface(DNIMathDelimiterFactory)
  ['{BE017DE6-3962-4C5C-8D0D-5271E5355492}']
  { methods } 

    function CreateMathDelimiter(element: DNIMathElement): DNIMathDelimiter; overload;
    function CreateMathDelimiter(mathElements: DNIMathElementCollection): DNIMathDelimiter; overload;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNMathDelimiterFactory = class(TDNGenericImport<DNMathDelimiterFactoryClass, DNMathDelimiterFactory>) end;

  //-------------namespace: Aspose.Slides.MathText----------------
  DNMathElementBaseClass = interface(DDN.mscorlib.DNObjectClass)
  ['{854DCBC9-BE04-5226-A53A-732F1DF8E105}']
  end;

  [DNTypeName('Aspose.Slides.MathText.MathElementBase')]
  DNMathElementBase = interface(DDN.mscorlib.DNObject)
  ['{A510C3FE-38C4-39D2-B817-4FB4BFDCFA52}']
  { methods } 

    function Join(mathElement: DNIMathElement): DNIMathBlock; overload;
    function Join(mathText: string): DNIMathBlock; overload;
    function Divide(denominator: DNIMathElement): DNIMathFraction; overload;
    function Divide(denominator: string): DNIMathFraction; overload;
    function Divide(denominator: DNIMathElement; fractionType: DNMathFractionTypes): DNIMathFraction; overload;
    function Divide(denominator: string; fractionType: DNMathFractionTypes): DNIMathFraction; overload;
    function Enclose: DNIMathDelimiter; overload;
    function Enclose(beginningCharacter: Char; endingCharacter: Char): DNIMathDelimiter; overload;
    function &Function(functionArgument: DNIMathElement): DNIMathFunction; overload;
    function &Function(functionArgument: string): DNIMathFunction; overload;
    function AsArgumentOfFunction(functionName: DNIMathElement): DNIMathFunction; overload;
    function AsArgumentOfFunction(functionName: string): DNIMathFunction; overload;
    function AsArgumentOfFunction(functionType: DNMathFunctionsOfOneArgument): DNIMathFunction; overload;
    function AsArgumentOfFunction(functionType: DNMathFunctionsOfTwoArguments; additionalArgument: DNIMathElement): DNIMathFunction; overload;
    function AsArgumentOfFunction(functionType: DNMathFunctionsOfTwoArguments; additionalArgument: string): DNIMathFunction; overload;
    function SetSubscript(subscript: DNIMathElement): DNIMathSubscriptElement; overload;
    function SetSubscript(subscript: string): DNIMathSubscriptElement; overload;
    function SetSuperscript(superscript: DNIMathElement): DNIMathSuperscriptElement; overload;
    function SetSuperscript(superscript: string): DNIMathSuperscriptElement; overload;
    function SetSubSuperscriptOnTheRight(subscript: DNIMathElement; superscript: DNIMathElement): DNIMathRightSubSuperscriptElement; overload;
    function SetSubSuperscriptOnTheRight(subscript: string; superscript: string): DNIMathRightSubSuperscriptElement; overload;
    function SetSubSuperscriptOnTheLeft(subscript: DNIMathElement; superscript: DNIMathElement): DNIMathLeftSubSuperscriptElement; overload;
    function SetSubSuperscriptOnTheLeft(subscript: string; superscript: string): DNIMathLeftSubSuperscriptElement; overload;
    function Radical(degree: DNIMathElement): DNIMathRadical; overload;
    function Radical(degree: string): DNIMathRadical; overload;
    function SetUpperLimit(limit: DNIMathElement): DNIMathLimit; overload;
    function SetUpperLimit(limit: string): DNIMathLimit; overload;
    function SetLowerLimit(limit: DNIMathElement): DNIMathLimit; overload;
    function SetLowerLimit(limit: string): DNIMathLimit; overload;
    function Nary(&type: DNMathNaryOperatorTypes; lowerLimit: DNIMathElement; upperLimit: DNIMathElement): DNIMathNaryOperator; overload;
    function Nary(&type: DNMathNaryOperatorTypes; lowerLimit: string; upperLimit: string): DNIMathNaryOperator; overload;
    function ToMathArray: DNIMathArray;
    function Integral(integralType: DNMathIntegralTypes; lowerLimit: DNIMathElement; upperLimit: DNIMathElement; limitLocations: DNMathLimitLocations): DNIMathNaryOperator; overload;
    function Integral(integralType: DNMathIntegralTypes; lowerLimit: DNIMathElement; upperLimit: DNIMathElement): DNIMathNaryOperator; overload;
    function Integral(integralType: DNMathIntegralTypes): DNIMathNaryOperator; overload;
    function Integral(integralType: DNMathIntegralTypes; lowerLimit: string; upperLimit: string; limitLocations: DNMathLimitLocations): DNIMathNaryOperator; overload;
    function Integral(integralType: DNMathIntegralTypes; lowerLimit: string; upperLimit: string): DNIMathNaryOperator; overload;
    function Accent(accentCharacter: Char): DNIMathAccent;
    function Overbar: DNIMathBar;
    function Underbar: DNIMathBar;
    function Group: DNIMathGroupingCharacter; overload;
    function Group(character: Char; position: DNMathTopBotPositions; verticalJustification: DNMathTopBotPositions): DNIMathGroupingCharacter; overload;
    function ToBorderBox: DNIMathBorderBox; overload;
    function ToBorderBox(hideTop: Boolean; hideBottom: Boolean; hideLeft: Boolean; hideRight: Boolean; strikethroughHorizontal: Boolean; strikethroughVertical: Boolean; strikethroughBottomLeftToTopRight: Boolean; strikethroughTopLeftToBottomRight: Boolean): DNIMathBorderBox; overload;
    function ToBox: DNIMathBox;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNMathElementBase = class(TDNGenericImport<DNMathElementBaseClass, DNMathElementBase>) end;

  //-------------namespace: Aspose.Slides.MathText----------------
  DNBaseScriptClass = interface(DNMathElementBaseClass)
  ['{CDB4D71A-1452-5A68-8FA6-70BAAD60CF96}']
  end;

  [DNTypeName('Aspose.Slides.MathText.BaseScript')]
  DNBaseScript = interface(DNMathElementBase)
  ['{64EFF357-5483-3D90-94A5-017AA17715AA}']
  { getters & setters } 

    function get_Base: DNIMathElement;

  { methods } 

    function Join(mathElement: DNIMathElement): DNIMathBlock; overload;
    function Join(mathText: string): DNIMathBlock; overload;
    function Divide(denominator: DNIMathElement): DNIMathFraction; overload;
    function Divide(denominator: string): DNIMathFraction; overload;
    function Divide(denominator: DNIMathElement; fractionType: DNMathFractionTypes): DNIMathFraction; overload;
    function Divide(denominator: string; fractionType: DNMathFractionTypes): DNIMathFraction; overload;
    function Enclose: DNIMathDelimiter; overload;
    function Enclose(beginningCharacter: Char; endingCharacter: Char): DNIMathDelimiter; overload;
    function &Function(functionArgument: DNIMathElement): DNIMathFunction; overload;
    function &Function(functionArgument: string): DNIMathFunction; overload;
    function AsArgumentOfFunction(functionName: DNIMathElement): DNIMathFunction; overload;
    function AsArgumentOfFunction(functionName: string): DNIMathFunction; overload;
    function AsArgumentOfFunction(functionType: DNMathFunctionsOfOneArgument): DNIMathFunction; overload;
    function AsArgumentOfFunction(functionType: DNMathFunctionsOfTwoArguments; additionalArgument: DNIMathElement): DNIMathFunction; overload;
    function AsArgumentOfFunction(functionType: DNMathFunctionsOfTwoArguments; additionalArgument: string): DNIMathFunction; overload;
    function SetSubscript(subscript: DNIMathElement): DNIMathSubscriptElement; overload;
    function SetSubscript(subscript: string): DNIMathSubscriptElement; overload;
    function SetSuperscript(superscript: DNIMathElement): DNIMathSuperscriptElement; overload;
    function SetSuperscript(superscript: string): DNIMathSuperscriptElement; overload;
    function SetSubSuperscriptOnTheRight(subscript: DNIMathElement; superscript: DNIMathElement): DNIMathRightSubSuperscriptElement; overload;
    function SetSubSuperscriptOnTheRight(subscript: string; superscript: string): DNIMathRightSubSuperscriptElement; overload;
    function SetSubSuperscriptOnTheLeft(subscript: DNIMathElement; superscript: DNIMathElement): DNIMathLeftSubSuperscriptElement; overload;
    function SetSubSuperscriptOnTheLeft(subscript: string; superscript: string): DNIMathLeftSubSuperscriptElement; overload;
    function Radical(degree: DNIMathElement): DNIMathRadical; overload;
    function Radical(degree: string): DNIMathRadical; overload;
    function SetUpperLimit(limit: DNIMathElement): DNIMathLimit; overload;
    function SetUpperLimit(limit: string): DNIMathLimit; overload;
    function SetLowerLimit(limit: DNIMathElement): DNIMathLimit; overload;
    function SetLowerLimit(limit: string): DNIMathLimit; overload;
    function Nary(&type: DNMathNaryOperatorTypes; lowerLimit: DNIMathElement; upperLimit: DNIMathElement): DNIMathNaryOperator; overload;
    function Nary(&type: DNMathNaryOperatorTypes; lowerLimit: string; upperLimit: string): DNIMathNaryOperator; overload;
    function ToMathArray: DNIMathArray;
    function Integral(integralType: DNMathIntegralTypes; lowerLimit: DNIMathElement; upperLimit: DNIMathElement; limitLocations: DNMathLimitLocations): DNIMathNaryOperator; overload;
    function Integral(integralType: DNMathIntegralTypes; lowerLimit: DNIMathElement; upperLimit: DNIMathElement): DNIMathNaryOperator; overload;
    function Integral(integralType: DNMathIntegralTypes): DNIMathNaryOperator; overload;
    function Integral(integralType: DNMathIntegralTypes; lowerLimit: string; upperLimit: string; limitLocations: DNMathLimitLocations): DNIMathNaryOperator; overload;
    function Integral(integralType: DNMathIntegralTypes; lowerLimit: string; upperLimit: string): DNIMathNaryOperator; overload;
    function Accent(accentCharacter: Char): DNIMathAccent;
    function Overbar: DNIMathBar;
    function Underbar: DNIMathBar;
    function Group: DNIMathGroupingCharacter; overload;
    function Group(character: Char; position: DNMathTopBotPositions; verticalJustification: DNMathTopBotPositions): DNIMathGroupingCharacter; overload;
    function ToBorderBox: DNIMathBorderBox; overload;
    function ToBorderBox(hideTop: Boolean; hideBottom: Boolean; hideLeft: Boolean; hideRight: Boolean; strikethroughHorizontal: Boolean; strikethroughVertical: Boolean; strikethroughBottomLeftToTopRight: Boolean; strikethroughTopLeftToBottomRight: Boolean): DNIMathBorderBox; overload;
    function ToBox: DNIMathBox;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Base: DNIMathElement read get_Base;
  end;

  TDNBaseScript = class(TDNGenericImport<DNBaseScriptClass, DNBaseScript>) end;

  //-------------namespace: Aspose.Slides.MathText----------------
  DNMathLeftSubSuperscriptElementClass = interface(DNBaseScriptClass)
  ['{858EDF10-1823-5A17-B219-83CEA543F406}']
  { constructors } 

    {class} function init(baseArg: DNIMathElement; subScript: DNIMathElement; superScript: DNIMathElement): DNMathLeftSubSuperscriptElement;

  end;

  [DNTypeName('Aspose.Slides.MathText.MathLeftSubSuperscriptElement')]
  DNMathLeftSubSuperscriptElement = interface(DNBaseScript)
  ['{D2E553CC-AE1F-4822-9BC6-3E421B2200AC}']
  { getters & setters } 

    function get_Subscript: DNIMathElement;
    function get_Superscript: DNIMathElement;
    function get_Base: DNIMathElement;

  { methods } 

    function Join(mathElement: DNIMathElement): DNIMathBlock; overload;
    function Join(mathText: string): DNIMathBlock; overload;
    function Divide(denominator: DNIMathElement): DNIMathFraction; overload;
    function Divide(denominator: string): DNIMathFraction; overload;
    function Divide(denominator: DNIMathElement; fractionType: DNMathFractionTypes): DNIMathFraction; overload;
    function Divide(denominator: string; fractionType: DNMathFractionTypes): DNIMathFraction; overload;
    function Enclose: DNIMathDelimiter; overload;
    function Enclose(beginningCharacter: Char; endingCharacter: Char): DNIMathDelimiter; overload;
    function &Function(functionArgument: DNIMathElement): DNIMathFunction; overload;
    function &Function(functionArgument: string): DNIMathFunction; overload;
    function AsArgumentOfFunction(functionName: DNIMathElement): DNIMathFunction; overload;
    function AsArgumentOfFunction(functionName: string): DNIMathFunction; overload;
    function AsArgumentOfFunction(functionType: DNMathFunctionsOfOneArgument): DNIMathFunction; overload;
    function AsArgumentOfFunction(functionType: DNMathFunctionsOfTwoArguments; additionalArgument: DNIMathElement): DNIMathFunction; overload;
    function AsArgumentOfFunction(functionType: DNMathFunctionsOfTwoArguments; additionalArgument: string): DNIMathFunction; overload;
    function SetSubscript(subscript: DNIMathElement): DNIMathSubscriptElement; overload;
    function SetSubscript(subscript: string): DNIMathSubscriptElement; overload;
    function SetSuperscript(superscript: DNIMathElement): DNIMathSuperscriptElement; overload;
    function SetSuperscript(superscript: string): DNIMathSuperscriptElement; overload;
    function SetSubSuperscriptOnTheRight(subscript: DNIMathElement; superscript: DNIMathElement): DNIMathRightSubSuperscriptElement; overload;
    function SetSubSuperscriptOnTheRight(subscript: string; superscript: string): DNIMathRightSubSuperscriptElement; overload;
    function SetSubSuperscriptOnTheLeft(subscript: DNIMathElement; superscript: DNIMathElement): DNIMathLeftSubSuperscriptElement; overload;
    function SetSubSuperscriptOnTheLeft(subscript: string; superscript: string): DNIMathLeftSubSuperscriptElement; overload;
    function Radical(degree: DNIMathElement): DNIMathRadical; overload;
    function Radical(degree: string): DNIMathRadical; overload;
    function SetUpperLimit(limit: DNIMathElement): DNIMathLimit; overload;
    function SetUpperLimit(limit: string): DNIMathLimit; overload;
    function SetLowerLimit(limit: DNIMathElement): DNIMathLimit; overload;
    function SetLowerLimit(limit: string): DNIMathLimit; overload;
    function Nary(&type: DNMathNaryOperatorTypes; lowerLimit: DNIMathElement; upperLimit: DNIMathElement): DNIMathNaryOperator; overload;
    function Nary(&type: DNMathNaryOperatorTypes; lowerLimit: string; upperLimit: string): DNIMathNaryOperator; overload;
    function ToMathArray: DNIMathArray;
    function Integral(integralType: DNMathIntegralTypes; lowerLimit: DNIMathElement; upperLimit: DNIMathElement; limitLocations: DNMathLimitLocations): DNIMathNaryOperator; overload;
    function Integral(integralType: DNMathIntegralTypes; lowerLimit: DNIMathElement; upperLimit: DNIMathElement): DNIMathNaryOperator; overload;
    function Integral(integralType: DNMathIntegralTypes): DNIMathNaryOperator; overload;
    function Integral(integralType: DNMathIntegralTypes; lowerLimit: string; upperLimit: string; limitLocations: DNMathLimitLocations): DNIMathNaryOperator; overload;
    function Integral(integralType: DNMathIntegralTypes; lowerLimit: string; upperLimit: string): DNIMathNaryOperator; overload;
    function Accent(accentCharacter: Char): DNIMathAccent;
    function Overbar: DNIMathBar;
    function Underbar: DNIMathBar;
    function Group: DNIMathGroupingCharacter; overload;
    function Group(character: Char; position: DNMathTopBotPositions; verticalJustification: DNMathTopBotPositions): DNIMathGroupingCharacter; overload;
    function ToBorderBox: DNIMathBorderBox; overload;
    function ToBorderBox(hideTop: Boolean; hideBottom: Boolean; hideLeft: Boolean; hideRight: Boolean; strikethroughHorizontal: Boolean; strikethroughVertical: Boolean; strikethroughBottomLeftToTopRight: Boolean; strikethroughTopLeftToBottomRight: Boolean): DNIMathBorderBox; overload;
    function ToBox: DNIMathBox;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Subscript: DNIMathElement read get_Subscript;
    property Superscript: DNIMathElement read get_Superscript;
    property Base: DNIMathElement read get_Base;
  end;

  TDNMathLeftSubSuperscriptElement = class(TDNGenericImport<DNMathLeftSubSuperscriptElementClass, DNMathLeftSubSuperscriptElement>) end;

  //-------------namespace: Aspose.Slides.MathText----------------
  DNMathRightSubSuperscriptElementClass = interface(DNBaseScriptClass)
  ['{7E6A0407-1169-5C48-8DA3-CB4DD9E251B8}']
  { constructors } 

    {class} function init(baseArg: DNIMathElement; subScript: DNIMathElement; superScript: DNIMathElement): DNMathRightSubSuperscriptElement;

  end;

  [DNTypeName('Aspose.Slides.MathText.MathRightSubSuperscriptElement')]
  DNMathRightSubSuperscriptElement = interface(DNBaseScript)
  ['{3459E529-468D-4372-89FE-4A23B36E816F}']
  { getters & setters } 

    function get_Subscript: DNIMathElement;
    function get_Superscript: DNIMathElement;
    function get_AlignScripts: Boolean;
    procedure set_AlignScripts(value: Boolean);
    function get_Base: DNIMathElement;

  { methods } 

    function Join(mathElement: DNIMathElement): DNIMathBlock; overload;
    function Join(mathText: string): DNIMathBlock; overload;
    function Divide(denominator: DNIMathElement): DNIMathFraction; overload;
    function Divide(denominator: string): DNIMathFraction; overload;
    function Divide(denominator: DNIMathElement; fractionType: DNMathFractionTypes): DNIMathFraction; overload;
    function Divide(denominator: string; fractionType: DNMathFractionTypes): DNIMathFraction; overload;
    function Enclose: DNIMathDelimiter; overload;
    function Enclose(beginningCharacter: Char; endingCharacter: Char): DNIMathDelimiter; overload;
    function &Function(functionArgument: DNIMathElement): DNIMathFunction; overload;
    function &Function(functionArgument: string): DNIMathFunction; overload;
    function AsArgumentOfFunction(functionName: DNIMathElement): DNIMathFunction; overload;
    function AsArgumentOfFunction(functionName: string): DNIMathFunction; overload;
    function AsArgumentOfFunction(functionType: DNMathFunctionsOfOneArgument): DNIMathFunction; overload;
    function AsArgumentOfFunction(functionType: DNMathFunctionsOfTwoArguments; additionalArgument: DNIMathElement): DNIMathFunction; overload;
    function AsArgumentOfFunction(functionType: DNMathFunctionsOfTwoArguments; additionalArgument: string): DNIMathFunction; overload;
    function SetSubscript(subscript: DNIMathElement): DNIMathSubscriptElement; overload;
    function SetSubscript(subscript: string): DNIMathSubscriptElement; overload;
    function SetSuperscript(superscript: DNIMathElement): DNIMathSuperscriptElement; overload;
    function SetSuperscript(superscript: string): DNIMathSuperscriptElement; overload;
    function SetSubSuperscriptOnTheRight(subscript: DNIMathElement; superscript: DNIMathElement): DNIMathRightSubSuperscriptElement; overload;
    function SetSubSuperscriptOnTheRight(subscript: string; superscript: string): DNIMathRightSubSuperscriptElement; overload;
    function SetSubSuperscriptOnTheLeft(subscript: DNIMathElement; superscript: DNIMathElement): DNIMathLeftSubSuperscriptElement; overload;
    function SetSubSuperscriptOnTheLeft(subscript: string; superscript: string): DNIMathLeftSubSuperscriptElement; overload;
    function Radical(degree: DNIMathElement): DNIMathRadical; overload;
    function Radical(degree: string): DNIMathRadical; overload;
    function SetUpperLimit(limit: DNIMathElement): DNIMathLimit; overload;
    function SetUpperLimit(limit: string): DNIMathLimit; overload;
    function SetLowerLimit(limit: DNIMathElement): DNIMathLimit; overload;
    function SetLowerLimit(limit: string): DNIMathLimit; overload;
    function Nary(&type: DNMathNaryOperatorTypes; lowerLimit: DNIMathElement; upperLimit: DNIMathElement): DNIMathNaryOperator; overload;
    function Nary(&type: DNMathNaryOperatorTypes; lowerLimit: string; upperLimit: string): DNIMathNaryOperator; overload;
    function ToMathArray: DNIMathArray;
    function Integral(integralType: DNMathIntegralTypes; lowerLimit: DNIMathElement; upperLimit: DNIMathElement; limitLocations: DNMathLimitLocations): DNIMathNaryOperator; overload;
    function Integral(integralType: DNMathIntegralTypes; lowerLimit: DNIMathElement; upperLimit: DNIMathElement): DNIMathNaryOperator; overload;
    function Integral(integralType: DNMathIntegralTypes): DNIMathNaryOperator; overload;
    function Integral(integralType: DNMathIntegralTypes; lowerLimit: string; upperLimit: string; limitLocations: DNMathLimitLocations): DNIMathNaryOperator; overload;
    function Integral(integralType: DNMathIntegralTypes; lowerLimit: string; upperLimit: string): DNIMathNaryOperator; overload;
    function Accent(accentCharacter: Char): DNIMathAccent;
    function Overbar: DNIMathBar;
    function Underbar: DNIMathBar;
    function Group: DNIMathGroupingCharacter; overload;
    function Group(character: Char; position: DNMathTopBotPositions; verticalJustification: DNMathTopBotPositions): DNIMathGroupingCharacter; overload;
    function ToBorderBox: DNIMathBorderBox; overload;
    function ToBorderBox(hideTop: Boolean; hideBottom: Boolean; hideLeft: Boolean; hideRight: Boolean; strikethroughHorizontal: Boolean; strikethroughVertical: Boolean; strikethroughBottomLeftToTopRight: Boolean; strikethroughTopLeftToBottomRight: Boolean): DNIMathBorderBox; overload;
    function ToBox: DNIMathBox;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Subscript: DNIMathElement read get_Subscript;
    property Superscript: DNIMathElement read get_Superscript;
    property AlignScripts: Boolean read get_AlignScripts write set_AlignScripts;
    property Base: DNIMathElement read get_Base;
  end;

  TDNMathRightSubSuperscriptElement = class(TDNGenericImport<DNMathRightSubSuperscriptElementClass, DNMathRightSubSuperscriptElement>) end;

  //-------------namespace: Aspose.Slides.MathText----------------
  DNMathSubscriptElementClass = interface(DNBaseScriptClass)
  ['{F8D6E40D-6EC8-5DD5-85EB-1A4C7B37890F}']
  { constructors } 

    {class} function init(baseArg: DNIMathElement; subScript: DNIMathElement): DNMathSubscriptElement;

  end;

  [DNTypeName('Aspose.Slides.MathText.MathSubscriptElement')]
  DNMathSubscriptElement = interface(DNBaseScript)
  ['{AB3DC3B3-F0BA-413D-8FBF-1245403450D5}']
  { getters & setters } 

    function get_Subscript: DNIMathElement;
    function get_Base: DNIMathElement;

  { methods } 

    function Join(mathElement: DNIMathElement): DNIMathBlock; overload;
    function Join(mathText: string): DNIMathBlock; overload;
    function Divide(denominator: DNIMathElement): DNIMathFraction; overload;
    function Divide(denominator: string): DNIMathFraction; overload;
    function Divide(denominator: DNIMathElement; fractionType: DNMathFractionTypes): DNIMathFraction; overload;
    function Divide(denominator: string; fractionType: DNMathFractionTypes): DNIMathFraction; overload;
    function Enclose: DNIMathDelimiter; overload;
    function Enclose(beginningCharacter: Char; endingCharacter: Char): DNIMathDelimiter; overload;
    function &Function(functionArgument: DNIMathElement): DNIMathFunction; overload;
    function &Function(functionArgument: string): DNIMathFunction; overload;
    function AsArgumentOfFunction(functionName: DNIMathElement): DNIMathFunction; overload;
    function AsArgumentOfFunction(functionName: string): DNIMathFunction; overload;
    function AsArgumentOfFunction(functionType: DNMathFunctionsOfOneArgument): DNIMathFunction; overload;
    function AsArgumentOfFunction(functionType: DNMathFunctionsOfTwoArguments; additionalArgument: DNIMathElement): DNIMathFunction; overload;
    function AsArgumentOfFunction(functionType: DNMathFunctionsOfTwoArguments; additionalArgument: string): DNIMathFunction; overload;
    function SetSubscript(subscript: DNIMathElement): DNIMathSubscriptElement; overload;
    function SetSubscript(subscript: string): DNIMathSubscriptElement; overload;
    function SetSuperscript(superscript: DNIMathElement): DNIMathSuperscriptElement; overload;
    function SetSuperscript(superscript: string): DNIMathSuperscriptElement; overload;
    function SetSubSuperscriptOnTheRight(subscript: DNIMathElement; superscript: DNIMathElement): DNIMathRightSubSuperscriptElement; overload;
    function SetSubSuperscriptOnTheRight(subscript: string; superscript: string): DNIMathRightSubSuperscriptElement; overload;
    function SetSubSuperscriptOnTheLeft(subscript: DNIMathElement; superscript: DNIMathElement): DNIMathLeftSubSuperscriptElement; overload;
    function SetSubSuperscriptOnTheLeft(subscript: string; superscript: string): DNIMathLeftSubSuperscriptElement; overload;
    function Radical(degree: DNIMathElement): DNIMathRadical; overload;
    function Radical(degree: string): DNIMathRadical; overload;
    function SetUpperLimit(limit: DNIMathElement): DNIMathLimit; overload;
    function SetUpperLimit(limit: string): DNIMathLimit; overload;
    function SetLowerLimit(limit: DNIMathElement): DNIMathLimit; overload;
    function SetLowerLimit(limit: string): DNIMathLimit; overload;
    function Nary(&type: DNMathNaryOperatorTypes; lowerLimit: DNIMathElement; upperLimit: DNIMathElement): DNIMathNaryOperator; overload;
    function Nary(&type: DNMathNaryOperatorTypes; lowerLimit: string; upperLimit: string): DNIMathNaryOperator; overload;
    function ToMathArray: DNIMathArray;
    function Integral(integralType: DNMathIntegralTypes; lowerLimit: DNIMathElement; upperLimit: DNIMathElement; limitLocations: DNMathLimitLocations): DNIMathNaryOperator; overload;
    function Integral(integralType: DNMathIntegralTypes; lowerLimit: DNIMathElement; upperLimit: DNIMathElement): DNIMathNaryOperator; overload;
    function Integral(integralType: DNMathIntegralTypes): DNIMathNaryOperator; overload;
    function Integral(integralType: DNMathIntegralTypes; lowerLimit: string; upperLimit: string; limitLocations: DNMathLimitLocations): DNIMathNaryOperator; overload;
    function Integral(integralType: DNMathIntegralTypes; lowerLimit: string; upperLimit: string): DNIMathNaryOperator; overload;
    function Accent(accentCharacter: Char): DNIMathAccent;
    function Overbar: DNIMathBar;
    function Underbar: DNIMathBar;
    function Group: DNIMathGroupingCharacter; overload;
    function Group(character: Char; position: DNMathTopBotPositions; verticalJustification: DNMathTopBotPositions): DNIMathGroupingCharacter; overload;
    function ToBorderBox: DNIMathBorderBox; overload;
    function ToBorderBox(hideTop: Boolean; hideBottom: Boolean; hideLeft: Boolean; hideRight: Boolean; strikethroughHorizontal: Boolean; strikethroughVertical: Boolean; strikethroughBottomLeftToTopRight: Boolean; strikethroughTopLeftToBottomRight: Boolean): DNIMathBorderBox; overload;
    function ToBox: DNIMathBox;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Subscript: DNIMathElement read get_Subscript;
    property Base: DNIMathElement read get_Base;
  end;

  TDNMathSubscriptElement = class(TDNGenericImport<DNMathSubscriptElementClass, DNMathSubscriptElement>) end;

  //-------------namespace: Aspose.Slides.MathText----------------
  DNMathSuperscriptElementClass = interface(DNBaseScriptClass)
  ['{7CB36BDE-BAF7-5D00-B0FF-D9E8362017F7}']
  { constructors } 

    {class} function init(baseArg: DNIMathElement; superScript: DNIMathElement): DNMathSuperscriptElement;

  end;

  [DNTypeName('Aspose.Slides.MathText.MathSuperscriptElement')]
  DNMathSuperscriptElement = interface(DNBaseScript)
  ['{472A3056-2BB3-4422-8898-B76AFE34554A}']
  { getters & setters } 

    function get_Superscript: DNIMathElement;
    function get_Base: DNIMathElement;

  { methods } 

    function Join(mathElement: DNIMathElement): DNIMathBlock; overload;
    function Join(mathText: string): DNIMathBlock; overload;
    function Divide(denominator: DNIMathElement): DNIMathFraction; overload;
    function Divide(denominator: string): DNIMathFraction; overload;
    function Divide(denominator: DNIMathElement; fractionType: DNMathFractionTypes): DNIMathFraction; overload;
    function Divide(denominator: string; fractionType: DNMathFractionTypes): DNIMathFraction; overload;
    function Enclose: DNIMathDelimiter; overload;
    function Enclose(beginningCharacter: Char; endingCharacter: Char): DNIMathDelimiter; overload;
    function &Function(functionArgument: DNIMathElement): DNIMathFunction; overload;
    function &Function(functionArgument: string): DNIMathFunction; overload;
    function AsArgumentOfFunction(functionName: DNIMathElement): DNIMathFunction; overload;
    function AsArgumentOfFunction(functionName: string): DNIMathFunction; overload;
    function AsArgumentOfFunction(functionType: DNMathFunctionsOfOneArgument): DNIMathFunction; overload;
    function AsArgumentOfFunction(functionType: DNMathFunctionsOfTwoArguments; additionalArgument: DNIMathElement): DNIMathFunction; overload;
    function AsArgumentOfFunction(functionType: DNMathFunctionsOfTwoArguments; additionalArgument: string): DNIMathFunction; overload;
    function SetSubscript(subscript: DNIMathElement): DNIMathSubscriptElement; overload;
    function SetSubscript(subscript: string): DNIMathSubscriptElement; overload;
    function SetSuperscript(superscript: DNIMathElement): DNIMathSuperscriptElement; overload;
    function SetSuperscript(superscript: string): DNIMathSuperscriptElement; overload;
    function SetSubSuperscriptOnTheRight(subscript: DNIMathElement; superscript: DNIMathElement): DNIMathRightSubSuperscriptElement; overload;
    function SetSubSuperscriptOnTheRight(subscript: string; superscript: string): DNIMathRightSubSuperscriptElement; overload;
    function SetSubSuperscriptOnTheLeft(subscript: DNIMathElement; superscript: DNIMathElement): DNIMathLeftSubSuperscriptElement; overload;
    function SetSubSuperscriptOnTheLeft(subscript: string; superscript: string): DNIMathLeftSubSuperscriptElement; overload;
    function Radical(degree: DNIMathElement): DNIMathRadical; overload;
    function Radical(degree: string): DNIMathRadical; overload;
    function SetUpperLimit(limit: DNIMathElement): DNIMathLimit; overload;
    function SetUpperLimit(limit: string): DNIMathLimit; overload;
    function SetLowerLimit(limit: DNIMathElement): DNIMathLimit; overload;
    function SetLowerLimit(limit: string): DNIMathLimit; overload;
    function Nary(&type: DNMathNaryOperatorTypes; lowerLimit: DNIMathElement; upperLimit: DNIMathElement): DNIMathNaryOperator; overload;
    function Nary(&type: DNMathNaryOperatorTypes; lowerLimit: string; upperLimit: string): DNIMathNaryOperator; overload;
    function ToMathArray: DNIMathArray;
    function Integral(integralType: DNMathIntegralTypes; lowerLimit: DNIMathElement; upperLimit: DNIMathElement; limitLocations: DNMathLimitLocations): DNIMathNaryOperator; overload;
    function Integral(integralType: DNMathIntegralTypes; lowerLimit: DNIMathElement; upperLimit: DNIMathElement): DNIMathNaryOperator; overload;
    function Integral(integralType: DNMathIntegralTypes): DNIMathNaryOperator; overload;
    function Integral(integralType: DNMathIntegralTypes; lowerLimit: string; upperLimit: string; limitLocations: DNMathLimitLocations): DNIMathNaryOperator; overload;
    function Integral(integralType: DNMathIntegralTypes; lowerLimit: string; upperLimit: string): DNIMathNaryOperator; overload;
    function Accent(accentCharacter: Char): DNIMathAccent;
    function Overbar: DNIMathBar;
    function Underbar: DNIMathBar;
    function Group: DNIMathGroupingCharacter; overload;
    function Group(character: Char; position: DNMathTopBotPositions; verticalJustification: DNMathTopBotPositions): DNIMathGroupingCharacter; overload;
    function ToBorderBox: DNIMathBorderBox; overload;
    function ToBorderBox(hideTop: Boolean; hideBottom: Boolean; hideLeft: Boolean; hideRight: Boolean; strikethroughHorizontal: Boolean; strikethroughVertical: Boolean; strikethroughBottomLeftToTopRight: Boolean; strikethroughTopLeftToBottomRight: Boolean): DNIMathBorderBox; overload;
    function ToBox: DNIMathBox;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Superscript: DNIMathElement read get_Superscript;
    property Base: DNIMathElement read get_Base;
  end;

  TDNMathSuperscriptElement = class(TDNGenericImport<DNMathSuperscriptElementClass, DNMathSuperscriptElement>) end;

  //-------------namespace: Aspose.Slides.MathText----------------
  DNMathAccentClass = interface(DNMathElementBaseClass)
  ['{505330ED-0F7D-5C7F-93A2-4BA8851CA314}']
  { constructors } 

    {class} function init(element: DNIMathElement): DNMathAccent; overload;
    {class} function init(element: DNIMathElement; accentCharacter: Char): DNMathAccent; overload;

  end;

  [DNTypeName('Aspose.Slides.MathText.MathAccent')]
  DNMathAccent = interface(DNMathElementBase)
  ['{78502A9C-12D3-4F4E-A3C9-373609D05473}']
  { getters & setters } 

    function get_Base: DNIMathElement;
    function get_Character: Char;
    procedure set_Character(value: Char);

  { methods } 

    function Join(mathElement: DNIMathElement): DNIMathBlock; overload;
    function Join(mathText: string): DNIMathBlock; overload;
    function Divide(denominator: DNIMathElement): DNIMathFraction; overload;
    function Divide(denominator: string): DNIMathFraction; overload;
    function Divide(denominator: DNIMathElement; fractionType: DNMathFractionTypes): DNIMathFraction; overload;
    function Divide(denominator: string; fractionType: DNMathFractionTypes): DNIMathFraction; overload;
    function Enclose: DNIMathDelimiter; overload;
    function Enclose(beginningCharacter: Char; endingCharacter: Char): DNIMathDelimiter; overload;
    function &Function(functionArgument: DNIMathElement): DNIMathFunction; overload;
    function &Function(functionArgument: string): DNIMathFunction; overload;
    function AsArgumentOfFunction(functionName: DNIMathElement): DNIMathFunction; overload;
    function AsArgumentOfFunction(functionName: string): DNIMathFunction; overload;
    function AsArgumentOfFunction(functionType: DNMathFunctionsOfOneArgument): DNIMathFunction; overload;
    function AsArgumentOfFunction(functionType: DNMathFunctionsOfTwoArguments; additionalArgument: DNIMathElement): DNIMathFunction; overload;
    function AsArgumentOfFunction(functionType: DNMathFunctionsOfTwoArguments; additionalArgument: string): DNIMathFunction; overload;
    function SetSubscript(subscript: DNIMathElement): DNIMathSubscriptElement; overload;
    function SetSubscript(subscript: string): DNIMathSubscriptElement; overload;
    function SetSuperscript(superscript: DNIMathElement): DNIMathSuperscriptElement; overload;
    function SetSuperscript(superscript: string): DNIMathSuperscriptElement; overload;
    function SetSubSuperscriptOnTheRight(subscript: DNIMathElement; superscript: DNIMathElement): DNIMathRightSubSuperscriptElement; overload;
    function SetSubSuperscriptOnTheRight(subscript: string; superscript: string): DNIMathRightSubSuperscriptElement; overload;
    function SetSubSuperscriptOnTheLeft(subscript: DNIMathElement; superscript: DNIMathElement): DNIMathLeftSubSuperscriptElement; overload;
    function SetSubSuperscriptOnTheLeft(subscript: string; superscript: string): DNIMathLeftSubSuperscriptElement; overload;
    function Radical(degree: DNIMathElement): DNIMathRadical; overload;
    function Radical(degree: string): DNIMathRadical; overload;
    function SetUpperLimit(limit: DNIMathElement): DNIMathLimit; overload;
    function SetUpperLimit(limit: string): DNIMathLimit; overload;
    function SetLowerLimit(limit: DNIMathElement): DNIMathLimit; overload;
    function SetLowerLimit(limit: string): DNIMathLimit; overload;
    function Nary(&type: DNMathNaryOperatorTypes; lowerLimit: DNIMathElement; upperLimit: DNIMathElement): DNIMathNaryOperator; overload;
    function Nary(&type: DNMathNaryOperatorTypes; lowerLimit: string; upperLimit: string): DNIMathNaryOperator; overload;
    function ToMathArray: DNIMathArray;
    function Integral(integralType: DNMathIntegralTypes; lowerLimit: DNIMathElement; upperLimit: DNIMathElement; limitLocations: DNMathLimitLocations): DNIMathNaryOperator; overload;
    function Integral(integralType: DNMathIntegralTypes; lowerLimit: DNIMathElement; upperLimit: DNIMathElement): DNIMathNaryOperator; overload;
    function Integral(integralType: DNMathIntegralTypes): DNIMathNaryOperator; overload;
    function Integral(integralType: DNMathIntegralTypes; lowerLimit: string; upperLimit: string; limitLocations: DNMathLimitLocations): DNIMathNaryOperator; overload;
    function Integral(integralType: DNMathIntegralTypes; lowerLimit: string; upperLimit: string): DNIMathNaryOperator; overload;
    function Accent(accentCharacter: Char): DNIMathAccent;
    function Overbar: DNIMathBar;
    function Underbar: DNIMathBar;
    function Group: DNIMathGroupingCharacter; overload;
    function Group(character: Char; position: DNMathTopBotPositions; verticalJustification: DNMathTopBotPositions): DNIMathGroupingCharacter; overload;
    function ToBorderBox: DNIMathBorderBox; overload;
    function ToBorderBox(hideTop: Boolean; hideBottom: Boolean; hideLeft: Boolean; hideRight: Boolean; strikethroughHorizontal: Boolean; strikethroughVertical: Boolean; strikethroughBottomLeftToTopRight: Boolean; strikethroughTopLeftToBottomRight: Boolean): DNIMathBorderBox; overload;
    function ToBox: DNIMathBox;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Base: DNIMathElement read get_Base;
    property Character: Char read get_Character write set_Character;
  end;

  TDNMathAccent = class(TDNGenericImport<DNMathAccentClass, DNMathAccent>) end;

  //-------------namespace: Aspose.Slides.MathText----------------
  DNMathArrayClass = interface(DNMathElementBaseClass)
  ['{AA656E2A-AD6C-5984-83CA-C5D659BA3FEC}']
  { constructors } 

    {class} function init(element: DNIMathElement): DNMathArray; overload;
    {class} function init(elements: DDN.mscorlib.DNIEnumerable<DNIMathElement>): DNMathArray; overload;

  end;

  [DNTypeName('Aspose.Slides.MathText.MathArray')]
  DNMathArray = interface(DNMathElementBase)
  ['{DD7612CA-8FED-44F5-B114-FEA248169231}']
  { getters & setters } 

    function get_Arguments: DNIMathElementCollection;
    function get_BaseJustification: DNMathVerticalAlignment;
    procedure set_BaseJustification(value: DNMathVerticalAlignment);
    function get_MaximumDistribution: Boolean;
    procedure set_MaximumDistribution(value: Boolean);
    function get_ObjectDistribution: Boolean;
    procedure set_ObjectDistribution(value: Boolean);
    function get_RowSpacingRule: DNMathRowSpacingRule;
    procedure set_RowSpacingRule(value: DNMathRowSpacingRule);
    function get_RowSpacing: UInt32;
    procedure set_RowSpacing(value: UInt32);

  { methods } 

    function Join(mathElement: DNIMathElement): DNIMathBlock; overload;
    function Join(mathText: string): DNIMathBlock; overload;
    function Divide(denominator: DNIMathElement): DNIMathFraction; overload;
    function Divide(denominator: string): DNIMathFraction; overload;
    function Divide(denominator: DNIMathElement; fractionType: DNMathFractionTypes): DNIMathFraction; overload;
    function Divide(denominator: string; fractionType: DNMathFractionTypes): DNIMathFraction; overload;
    function Enclose: DNIMathDelimiter; overload;
    function Enclose(beginningCharacter: Char; endingCharacter: Char): DNIMathDelimiter; overload;
    function &Function(functionArgument: DNIMathElement): DNIMathFunction; overload;
    function &Function(functionArgument: string): DNIMathFunction; overload;
    function AsArgumentOfFunction(functionName: DNIMathElement): DNIMathFunction; overload;
    function AsArgumentOfFunction(functionName: string): DNIMathFunction; overload;
    function AsArgumentOfFunction(functionType: DNMathFunctionsOfOneArgument): DNIMathFunction; overload;
    function AsArgumentOfFunction(functionType: DNMathFunctionsOfTwoArguments; additionalArgument: DNIMathElement): DNIMathFunction; overload;
    function AsArgumentOfFunction(functionType: DNMathFunctionsOfTwoArguments; additionalArgument: string): DNIMathFunction; overload;
    function SetSubscript(subscript: DNIMathElement): DNIMathSubscriptElement; overload;
    function SetSubscript(subscript: string): DNIMathSubscriptElement; overload;
    function SetSuperscript(superscript: DNIMathElement): DNIMathSuperscriptElement; overload;
    function SetSuperscript(superscript: string): DNIMathSuperscriptElement; overload;
    function SetSubSuperscriptOnTheRight(subscript: DNIMathElement; superscript: DNIMathElement): DNIMathRightSubSuperscriptElement; overload;
    function SetSubSuperscriptOnTheRight(subscript: string; superscript: string): DNIMathRightSubSuperscriptElement; overload;
    function SetSubSuperscriptOnTheLeft(subscript: DNIMathElement; superscript: DNIMathElement): DNIMathLeftSubSuperscriptElement; overload;
    function SetSubSuperscriptOnTheLeft(subscript: string; superscript: string): DNIMathLeftSubSuperscriptElement; overload;
    function Radical(degree: DNIMathElement): DNIMathRadical; overload;
    function Radical(degree: string): DNIMathRadical; overload;
    function SetUpperLimit(limit: DNIMathElement): DNIMathLimit; overload;
    function SetUpperLimit(limit: string): DNIMathLimit; overload;
    function SetLowerLimit(limit: DNIMathElement): DNIMathLimit; overload;
    function SetLowerLimit(limit: string): DNIMathLimit; overload;
    function Nary(&type: DNMathNaryOperatorTypes; lowerLimit: DNIMathElement; upperLimit: DNIMathElement): DNIMathNaryOperator; overload;
    function Nary(&type: DNMathNaryOperatorTypes; lowerLimit: string; upperLimit: string): DNIMathNaryOperator; overload;
    function ToMathArray: DNIMathArray;
    function Integral(integralType: DNMathIntegralTypes; lowerLimit: DNIMathElement; upperLimit: DNIMathElement; limitLocations: DNMathLimitLocations): DNIMathNaryOperator; overload;
    function Integral(integralType: DNMathIntegralTypes; lowerLimit: DNIMathElement; upperLimit: DNIMathElement): DNIMathNaryOperator; overload;
    function Integral(integralType: DNMathIntegralTypes): DNIMathNaryOperator; overload;
    function Integral(integralType: DNMathIntegralTypes; lowerLimit: string; upperLimit: string; limitLocations: DNMathLimitLocations): DNIMathNaryOperator; overload;
    function Integral(integralType: DNMathIntegralTypes; lowerLimit: string; upperLimit: string): DNIMathNaryOperator; overload;
    function Accent(accentCharacter: Char): DNIMathAccent;
    function Overbar: DNIMathBar;
    function Underbar: DNIMathBar;
    function Group: DNIMathGroupingCharacter; overload;
    function Group(character: Char; position: DNMathTopBotPositions; verticalJustification: DNMathTopBotPositions): DNIMathGroupingCharacter; overload;
    function ToBorderBox: DNIMathBorderBox; overload;
    function ToBorderBox(hideTop: Boolean; hideBottom: Boolean; hideLeft: Boolean; hideRight: Boolean; strikethroughHorizontal: Boolean; strikethroughVertical: Boolean; strikethroughBottomLeftToTopRight: Boolean; strikethroughTopLeftToBottomRight: Boolean): DNIMathBorderBox; overload;
    function ToBox: DNIMathBox;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Arguments: DNIMathElementCollection read get_Arguments;
    property BaseJustification: DNMathVerticalAlignment read get_BaseJustification write set_BaseJustification;
    property MaximumDistribution: Boolean read get_MaximumDistribution write set_MaximumDistribution;
    property ObjectDistribution: Boolean read get_ObjectDistribution write set_ObjectDistribution;
    property RowSpacingRule: DNMathRowSpacingRule read get_RowSpacingRule write set_RowSpacingRule;
    property RowSpacing: UInt32 read get_RowSpacing write set_RowSpacing;
  end;

  TDNMathArray = class(TDNGenericImport<DNMathArrayClass, DNMathArray>) end;

  //-------------namespace: Aspose.Slides.MathText----------------
  DNMathBarClass = interface(DNMathElementBaseClass)
  ['{D0992C19-1F54-52AE-A6A9-55E20508CFE6}']
  { constructors } 

    {class} function init(element: DNIMathElement): DNMathBar; overload;
    {class} function init(element: DNIMathElement; position: DNMathTopBotPositions): DNMathBar; overload;

  end;

  [DNTypeName('Aspose.Slides.MathText.MathBar')]
  DNMathBar = interface(DNMathElementBase)
  ['{02D21759-A061-4D41-ABF6-37ABFB005DFA}']
  { getters & setters } 

    function get_Base: DNIMathElement;
    function get_Position: DNMathTopBotPositions;
    procedure set_Position(value: DNMathTopBotPositions);

  { methods } 

    function Join(mathElement: DNIMathElement): DNIMathBlock; overload;
    function Join(mathText: string): DNIMathBlock; overload;
    function Divide(denominator: DNIMathElement): DNIMathFraction; overload;
    function Divide(denominator: string): DNIMathFraction; overload;
    function Divide(denominator: DNIMathElement; fractionType: DNMathFractionTypes): DNIMathFraction; overload;
    function Divide(denominator: string; fractionType: DNMathFractionTypes): DNIMathFraction; overload;
    function Enclose: DNIMathDelimiter; overload;
    function Enclose(beginningCharacter: Char; endingCharacter: Char): DNIMathDelimiter; overload;
    function &Function(functionArgument: DNIMathElement): DNIMathFunction; overload;
    function &Function(functionArgument: string): DNIMathFunction; overload;
    function AsArgumentOfFunction(functionName: DNIMathElement): DNIMathFunction; overload;
    function AsArgumentOfFunction(functionName: string): DNIMathFunction; overload;
    function AsArgumentOfFunction(functionType: DNMathFunctionsOfOneArgument): DNIMathFunction; overload;
    function AsArgumentOfFunction(functionType: DNMathFunctionsOfTwoArguments; additionalArgument: DNIMathElement): DNIMathFunction; overload;
    function AsArgumentOfFunction(functionType: DNMathFunctionsOfTwoArguments; additionalArgument: string): DNIMathFunction; overload;
    function SetSubscript(subscript: DNIMathElement): DNIMathSubscriptElement; overload;
    function SetSubscript(subscript: string): DNIMathSubscriptElement; overload;
    function SetSuperscript(superscript: DNIMathElement): DNIMathSuperscriptElement; overload;
    function SetSuperscript(superscript: string): DNIMathSuperscriptElement; overload;
    function SetSubSuperscriptOnTheRight(subscript: DNIMathElement; superscript: DNIMathElement): DNIMathRightSubSuperscriptElement; overload;
    function SetSubSuperscriptOnTheRight(subscript: string; superscript: string): DNIMathRightSubSuperscriptElement; overload;
    function SetSubSuperscriptOnTheLeft(subscript: DNIMathElement; superscript: DNIMathElement): DNIMathLeftSubSuperscriptElement; overload;
    function SetSubSuperscriptOnTheLeft(subscript: string; superscript: string): DNIMathLeftSubSuperscriptElement; overload;
    function Radical(degree: DNIMathElement): DNIMathRadical; overload;
    function Radical(degree: string): DNIMathRadical; overload;
    function SetUpperLimit(limit: DNIMathElement): DNIMathLimit; overload;
    function SetUpperLimit(limit: string): DNIMathLimit; overload;
    function SetLowerLimit(limit: DNIMathElement): DNIMathLimit; overload;
    function SetLowerLimit(limit: string): DNIMathLimit; overload;
    function Nary(&type: DNMathNaryOperatorTypes; lowerLimit: DNIMathElement; upperLimit: DNIMathElement): DNIMathNaryOperator; overload;
    function Nary(&type: DNMathNaryOperatorTypes; lowerLimit: string; upperLimit: string): DNIMathNaryOperator; overload;
    function ToMathArray: DNIMathArray;
    function Integral(integralType: DNMathIntegralTypes; lowerLimit: DNIMathElement; upperLimit: DNIMathElement; limitLocations: DNMathLimitLocations): DNIMathNaryOperator; overload;
    function Integral(integralType: DNMathIntegralTypes; lowerLimit: DNIMathElement; upperLimit: DNIMathElement): DNIMathNaryOperator; overload;
    function Integral(integralType: DNMathIntegralTypes): DNIMathNaryOperator; overload;
    function Integral(integralType: DNMathIntegralTypes; lowerLimit: string; upperLimit: string; limitLocations: DNMathLimitLocations): DNIMathNaryOperator; overload;
    function Integral(integralType: DNMathIntegralTypes; lowerLimit: string; upperLimit: string): DNIMathNaryOperator; overload;
    function Accent(accentCharacter: Char): DNIMathAccent;
    function Overbar: DNIMathBar;
    function Underbar: DNIMathBar;
    function Group: DNIMathGroupingCharacter; overload;
    function Group(character: Char; position: DNMathTopBotPositions; verticalJustification: DNMathTopBotPositions): DNIMathGroupingCharacter; overload;
    function ToBorderBox: DNIMathBorderBox; overload;
    function ToBorderBox(hideTop: Boolean; hideBottom: Boolean; hideLeft: Boolean; hideRight: Boolean; strikethroughHorizontal: Boolean; strikethroughVertical: Boolean; strikethroughBottomLeftToTopRight: Boolean; strikethroughTopLeftToBottomRight: Boolean): DNIMathBorderBox; overload;
    function ToBox: DNIMathBox;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Base: DNIMathElement read get_Base;
    property Position: DNMathTopBotPositions read get_Position write set_Position;
  end;

  TDNMathBar = class(TDNGenericImport<DNMathBarClass, DNMathBar>) end;

  //-------------namespace: Aspose.Slides.MathText----------------
  DNMathBlockClass = interface(DNMathElementBaseClass)
  ['{567A1E42-4B9C-5AC6-984F-93472E17BB79}']
  { constructors } 

    {class} function init: DNMathBlock; overload;
    {class} function init(mathElement: DNIMathElement): DNMathBlock; overload;
    {class} function init(mathElements: DDN.mscorlib.DNIEnumerable<DNIMathElement>): DNMathBlock; overload;

  end;

  [DNTypeName('Aspose.Slides.MathText.MathBlock')]
  DNMathBlock = interface(DNMathElementBase)
  ['{A5B5C3E7-C169-4EE5-A94C-9C7EF6A4A1B2}']
  { getters & setters } 

    function get_Count: Int32;
    function get_IsReadOnly: Boolean;

  { methods } 

    function &Contains(item: DNIMathElement): Boolean;
    procedure CopyTo(&array: TArray<DNIMathElement>; arrayIndex: Int32);
    function IndexOf(item: DNIMathElement): Int32;
    procedure Insert(index: Int32; item: DNIMathElement);
    procedure RemoveAt(index: Int32);
    function Join(mathElement: DNIMathElement): DNIMathBlock; overload;
    function Join(mathText: string): DNIMathBlock; overload;
    function JoinBlock(other: DNIMathBlock): DNIMathBlock;
    function Delimit(separatorCharacter: Char): DNIMathDelimiter;
    function Enclose(beginningCharacter: Char; endingCharacter: Char): DNIMathDelimiter; overload;
    function Enclose(beginningCharacter: Char; endingCharacter: Char; separatorCharacter: Char): DNIMathDelimiter; overload;
    function ToMathArray: DNIMathArray;
    procedure WriteAsMathMl(stream: DDN.mscorlib.DNStream);
    function Divide(denominator: DNIMathElement): DNIMathFraction; overload;
    function Divide(denominator: string): DNIMathFraction; overload;
    function Divide(denominator: DNIMathElement; fractionType: DNMathFractionTypes): DNIMathFraction; overload;
    function Divide(denominator: string; fractionType: DNMathFractionTypes): DNIMathFraction; overload;
    function Enclose: DNIMathDelimiter; overload;
    function &Function(functionArgument: DNIMathElement): DNIMathFunction; overload;
    function &Function(functionArgument: string): DNIMathFunction; overload;
    function AsArgumentOfFunction(functionName: DNIMathElement): DNIMathFunction; overload;
    function AsArgumentOfFunction(functionName: string): DNIMathFunction; overload;
    function AsArgumentOfFunction(functionType: DNMathFunctionsOfOneArgument): DNIMathFunction; overload;
    function AsArgumentOfFunction(functionType: DNMathFunctionsOfTwoArguments; additionalArgument: DNIMathElement): DNIMathFunction; overload;
    function AsArgumentOfFunction(functionType: DNMathFunctionsOfTwoArguments; additionalArgument: string): DNIMathFunction; overload;
    function SetSubscript(subscript: DNIMathElement): DNIMathSubscriptElement; overload;
    function SetSubscript(subscript: string): DNIMathSubscriptElement; overload;
    function SetSuperscript(superscript: DNIMathElement): DNIMathSuperscriptElement; overload;
    function SetSuperscript(superscript: string): DNIMathSuperscriptElement; overload;
    function SetSubSuperscriptOnTheRight(subscript: DNIMathElement; superscript: DNIMathElement): DNIMathRightSubSuperscriptElement; overload;
    function SetSubSuperscriptOnTheRight(subscript: string; superscript: string): DNIMathRightSubSuperscriptElement; overload;
    function SetSubSuperscriptOnTheLeft(subscript: DNIMathElement; superscript: DNIMathElement): DNIMathLeftSubSuperscriptElement; overload;
    function SetSubSuperscriptOnTheLeft(subscript: string; superscript: string): DNIMathLeftSubSuperscriptElement; overload;
    function Radical(degree: DNIMathElement): DNIMathRadical; overload;
    function Radical(degree: string): DNIMathRadical; overload;
    function SetUpperLimit(limit: DNIMathElement): DNIMathLimit; overload;
    function SetUpperLimit(limit: string): DNIMathLimit; overload;
    function SetLowerLimit(limit: DNIMathElement): DNIMathLimit; overload;
    function SetLowerLimit(limit: string): DNIMathLimit; overload;
    function Nary(&type: DNMathNaryOperatorTypes; lowerLimit: DNIMathElement; upperLimit: DNIMathElement): DNIMathNaryOperator; overload;
    function Nary(&type: DNMathNaryOperatorTypes; lowerLimit: string; upperLimit: string): DNIMathNaryOperator; overload;
    function Integral(integralType: DNMathIntegralTypes; lowerLimit: DNIMathElement; upperLimit: DNIMathElement; limitLocations: DNMathLimitLocations): DNIMathNaryOperator; overload;
    function Integral(integralType: DNMathIntegralTypes; lowerLimit: DNIMathElement; upperLimit: DNIMathElement): DNIMathNaryOperator; overload;
    function Integral(integralType: DNMathIntegralTypes): DNIMathNaryOperator; overload;
    function Integral(integralType: DNMathIntegralTypes; lowerLimit: string; upperLimit: string; limitLocations: DNMathLimitLocations): DNIMathNaryOperator; overload;
    function Integral(integralType: DNMathIntegralTypes; lowerLimit: string; upperLimit: string): DNIMathNaryOperator; overload;
    function Accent(accentCharacter: Char): DNIMathAccent;
    function Overbar: DNIMathBar;
    function Underbar: DNIMathBar;
    function Group: DNIMathGroupingCharacter; overload;
    function Group(character: Char; position: DNMathTopBotPositions; verticalJustification: DNMathTopBotPositions): DNIMathGroupingCharacter; overload;
    function ToBorderBox: DNIMathBorderBox; overload;
    function ToBorderBox(hideTop: Boolean; hideBottom: Boolean; hideLeft: Boolean; hideRight: Boolean; strikethroughHorizontal: Boolean; strikethroughVertical: Boolean; strikethroughBottomLeftToTopRight: Boolean; strikethroughTopLeftToBottomRight: Boolean): DNIMathBorderBox; overload;
    function ToBox: DNIMathBox;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Count: Int32 read get_Count;
    property IsReadOnly: Boolean read get_IsReadOnly;
  end;

  TDNMathBlock = class(TDNGenericImport<DNMathBlockClass, DNMathBlock>) end;

  //-------------namespace: Aspose.Slides.MathText----------------
  DNMathBorderBoxClass = interface(DNMathElementBaseClass)
  ['{E901D8B8-3AAF-51A8-98B9-0D1F1AAB692C}']
  { constructors } 

    {class} function init(element: DNIMathElement): DNMathBorderBox; overload;
    {class} function init(element: DNIMathElement; hideTop: Boolean; hideBottom: Boolean; hideLeft: Boolean; hideRight: Boolean; strikethroughHorizontal: Boolean; strikethroughVertical: Boolean; strikethroughBottomLeftToTopRight: Boolean; strikethroughTopLeftToBottomRight: Boolean): DNMathBorderBox; overload;

  end;

  [DNTypeName('Aspose.Slides.MathText.MathBorderBox')]
  DNMathBorderBox = interface(DNMathElementBase)
  ['{C0555EB1-C12E-43AD-8458-FDECF093727E}']
  { getters & setters } 

    function get_Base: DNIMathElement;
    function get_HideTop: Boolean;
    procedure set_HideTop(value: Boolean);
    function get_HideBottom: Boolean;
    procedure set_HideBottom(value: Boolean);
    function get_HideLeft: Boolean;
    procedure set_HideLeft(value: Boolean);
    function get_HideRight: Boolean;
    procedure set_HideRight(value: Boolean);
    function get_StrikethroughHorizontal: Boolean;
    procedure set_StrikethroughHorizontal(value: Boolean);
    function get_StrikethroughVertical: Boolean;
    procedure set_StrikethroughVertical(value: Boolean);
    function get_StrikethroughBottomLeftToTopRight: Boolean;
    procedure set_StrikethroughBottomLeftToTopRight(value: Boolean);
    function get_StrikethroughTopLeftToBottomRight: Boolean;
    procedure set_StrikethroughTopLeftToBottomRight(value: Boolean);

  { methods } 

    function Join(mathElement: DNIMathElement): DNIMathBlock; overload;
    function Join(mathText: string): DNIMathBlock; overload;
    function Divide(denominator: DNIMathElement): DNIMathFraction; overload;
    function Divide(denominator: string): DNIMathFraction; overload;
    function Divide(denominator: DNIMathElement; fractionType: DNMathFractionTypes): DNIMathFraction; overload;
    function Divide(denominator: string; fractionType: DNMathFractionTypes): DNIMathFraction; overload;
    function Enclose: DNIMathDelimiter; overload;
    function Enclose(beginningCharacter: Char; endingCharacter: Char): DNIMathDelimiter; overload;
    function &Function(functionArgument: DNIMathElement): DNIMathFunction; overload;
    function &Function(functionArgument: string): DNIMathFunction; overload;
    function AsArgumentOfFunction(functionName: DNIMathElement): DNIMathFunction; overload;
    function AsArgumentOfFunction(functionName: string): DNIMathFunction; overload;
    function AsArgumentOfFunction(functionType: DNMathFunctionsOfOneArgument): DNIMathFunction; overload;
    function AsArgumentOfFunction(functionType: DNMathFunctionsOfTwoArguments; additionalArgument: DNIMathElement): DNIMathFunction; overload;
    function AsArgumentOfFunction(functionType: DNMathFunctionsOfTwoArguments; additionalArgument: string): DNIMathFunction; overload;
    function SetSubscript(subscript: DNIMathElement): DNIMathSubscriptElement; overload;
    function SetSubscript(subscript: string): DNIMathSubscriptElement; overload;
    function SetSuperscript(superscript: DNIMathElement): DNIMathSuperscriptElement; overload;
    function SetSuperscript(superscript: string): DNIMathSuperscriptElement; overload;
    function SetSubSuperscriptOnTheRight(subscript: DNIMathElement; superscript: DNIMathElement): DNIMathRightSubSuperscriptElement; overload;
    function SetSubSuperscriptOnTheRight(subscript: string; superscript: string): DNIMathRightSubSuperscriptElement; overload;
    function SetSubSuperscriptOnTheLeft(subscript: DNIMathElement; superscript: DNIMathElement): DNIMathLeftSubSuperscriptElement; overload;
    function SetSubSuperscriptOnTheLeft(subscript: string; superscript: string): DNIMathLeftSubSuperscriptElement; overload;
    function Radical(degree: DNIMathElement): DNIMathRadical; overload;
    function Radical(degree: string): DNIMathRadical; overload;
    function SetUpperLimit(limit: DNIMathElement): DNIMathLimit; overload;
    function SetUpperLimit(limit: string): DNIMathLimit; overload;
    function SetLowerLimit(limit: DNIMathElement): DNIMathLimit; overload;
    function SetLowerLimit(limit: string): DNIMathLimit; overload;
    function Nary(&type: DNMathNaryOperatorTypes; lowerLimit: DNIMathElement; upperLimit: DNIMathElement): DNIMathNaryOperator; overload;
    function Nary(&type: DNMathNaryOperatorTypes; lowerLimit: string; upperLimit: string): DNIMathNaryOperator; overload;
    function ToMathArray: DNIMathArray;
    function Integral(integralType: DNMathIntegralTypes; lowerLimit: DNIMathElement; upperLimit: DNIMathElement; limitLocations: DNMathLimitLocations): DNIMathNaryOperator; overload;
    function Integral(integralType: DNMathIntegralTypes; lowerLimit: DNIMathElement; upperLimit: DNIMathElement): DNIMathNaryOperator; overload;
    function Integral(integralType: DNMathIntegralTypes): DNIMathNaryOperator; overload;
    function Integral(integralType: DNMathIntegralTypes; lowerLimit: string; upperLimit: string; limitLocations: DNMathLimitLocations): DNIMathNaryOperator; overload;
    function Integral(integralType: DNMathIntegralTypes; lowerLimit: string; upperLimit: string): DNIMathNaryOperator; overload;
    function Accent(accentCharacter: Char): DNIMathAccent;
    function Overbar: DNIMathBar;
    function Underbar: DNIMathBar;
    function Group: DNIMathGroupingCharacter; overload;
    function Group(character: Char; position: DNMathTopBotPositions; verticalJustification: DNMathTopBotPositions): DNIMathGroupingCharacter; overload;
    function ToBorderBox: DNIMathBorderBox; overload;
    function ToBorderBox(hideTop: Boolean; hideBottom: Boolean; hideLeft: Boolean; hideRight: Boolean; strikethroughHorizontal: Boolean; strikethroughVertical: Boolean; strikethroughBottomLeftToTopRight: Boolean; strikethroughTopLeftToBottomRight: Boolean): DNIMathBorderBox; overload;
    function ToBox: DNIMathBox;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Base: DNIMathElement read get_Base;
    property HideTop: Boolean read get_HideTop write set_HideTop;
    property HideBottom: Boolean read get_HideBottom write set_HideBottom;
    property HideLeft: Boolean read get_HideLeft write set_HideLeft;
    property HideRight: Boolean read get_HideRight write set_HideRight;
    property StrikethroughHorizontal: Boolean read get_StrikethroughHorizontal write set_StrikethroughHorizontal;
    property StrikethroughVertical: Boolean read get_StrikethroughVertical write set_StrikethroughVertical;
    property StrikethroughBottomLeftToTopRight: Boolean read get_StrikethroughBottomLeftToTopRight write set_StrikethroughBottomLeftToTopRight;
    property StrikethroughTopLeftToBottomRight: Boolean read get_StrikethroughTopLeftToBottomRight write set_StrikethroughTopLeftToBottomRight;
  end;

  TDNMathBorderBox = class(TDNGenericImport<DNMathBorderBoxClass, DNMathBorderBox>) end;

  //-------------namespace: Aspose.Slides.MathText----------------
  DNMathBoxClass = interface(DNMathElementBaseClass)
  ['{A78596B5-404F-5503-8CCC-6083E0BCBC3A}']
  { constructors } 

    {class} function init(element: DNIMathElement): DNMathBox;

  end;

  [DNTypeName('Aspose.Slides.MathText.MathBox')]
  DNMathBox = interface(DNMathElementBase)
  ['{0906F479-1E9C-49D8-B49E-DBC86BE226CE}']
  { getters & setters } 

    function get_Base: DNIMathElement;
    function get_OperatorEmulator: Boolean;
    procedure set_OperatorEmulator(value: Boolean);
    function get_NoBreak: Boolean;
    procedure set_NoBreak(value: Boolean);
    function get_Differential: Boolean;
    procedure set_Differential(value: Boolean);
    function get_AlignmentPoint: Boolean;
    procedure set_AlignmentPoint(value: Boolean);
    function get_ExplicitBreak: Byte;
    procedure set_ExplicitBreak(value: Byte);

  { methods } 

    function Join(mathElement: DNIMathElement): DNIMathBlock; overload;
    function Join(mathText: string): DNIMathBlock; overload;
    function Divide(denominator: DNIMathElement): DNIMathFraction; overload;
    function Divide(denominator: string): DNIMathFraction; overload;
    function Divide(denominator: DNIMathElement; fractionType: DNMathFractionTypes): DNIMathFraction; overload;
    function Divide(denominator: string; fractionType: DNMathFractionTypes): DNIMathFraction; overload;
    function Enclose: DNIMathDelimiter; overload;
    function Enclose(beginningCharacter: Char; endingCharacter: Char): DNIMathDelimiter; overload;
    function &Function(functionArgument: DNIMathElement): DNIMathFunction; overload;
    function &Function(functionArgument: string): DNIMathFunction; overload;
    function AsArgumentOfFunction(functionName: DNIMathElement): DNIMathFunction; overload;
    function AsArgumentOfFunction(functionName: string): DNIMathFunction; overload;
    function AsArgumentOfFunction(functionType: DNMathFunctionsOfOneArgument): DNIMathFunction; overload;
    function AsArgumentOfFunction(functionType: DNMathFunctionsOfTwoArguments; additionalArgument: DNIMathElement): DNIMathFunction; overload;
    function AsArgumentOfFunction(functionType: DNMathFunctionsOfTwoArguments; additionalArgument: string): DNIMathFunction; overload;
    function SetSubscript(subscript: DNIMathElement): DNIMathSubscriptElement; overload;
    function SetSubscript(subscript: string): DNIMathSubscriptElement; overload;
    function SetSuperscript(superscript: DNIMathElement): DNIMathSuperscriptElement; overload;
    function SetSuperscript(superscript: string): DNIMathSuperscriptElement; overload;
    function SetSubSuperscriptOnTheRight(subscript: DNIMathElement; superscript: DNIMathElement): DNIMathRightSubSuperscriptElement; overload;
    function SetSubSuperscriptOnTheRight(subscript: string; superscript: string): DNIMathRightSubSuperscriptElement; overload;
    function SetSubSuperscriptOnTheLeft(subscript: DNIMathElement; superscript: DNIMathElement): DNIMathLeftSubSuperscriptElement; overload;
    function SetSubSuperscriptOnTheLeft(subscript: string; superscript: string): DNIMathLeftSubSuperscriptElement; overload;
    function Radical(degree: DNIMathElement): DNIMathRadical; overload;
    function Radical(degree: string): DNIMathRadical; overload;
    function SetUpperLimit(limit: DNIMathElement): DNIMathLimit; overload;
    function SetUpperLimit(limit: string): DNIMathLimit; overload;
    function SetLowerLimit(limit: DNIMathElement): DNIMathLimit; overload;
    function SetLowerLimit(limit: string): DNIMathLimit; overload;
    function Nary(&type: DNMathNaryOperatorTypes; lowerLimit: DNIMathElement; upperLimit: DNIMathElement): DNIMathNaryOperator; overload;
    function Nary(&type: DNMathNaryOperatorTypes; lowerLimit: string; upperLimit: string): DNIMathNaryOperator; overload;
    function ToMathArray: DNIMathArray;
    function Integral(integralType: DNMathIntegralTypes; lowerLimit: DNIMathElement; upperLimit: DNIMathElement; limitLocations: DNMathLimitLocations): DNIMathNaryOperator; overload;
    function Integral(integralType: DNMathIntegralTypes; lowerLimit: DNIMathElement; upperLimit: DNIMathElement): DNIMathNaryOperator; overload;
    function Integral(integralType: DNMathIntegralTypes): DNIMathNaryOperator; overload;
    function Integral(integralType: DNMathIntegralTypes; lowerLimit: string; upperLimit: string; limitLocations: DNMathLimitLocations): DNIMathNaryOperator; overload;
    function Integral(integralType: DNMathIntegralTypes; lowerLimit: string; upperLimit: string): DNIMathNaryOperator; overload;
    function Accent(accentCharacter: Char): DNIMathAccent;
    function Overbar: DNIMathBar;
    function Underbar: DNIMathBar;
    function Group: DNIMathGroupingCharacter; overload;
    function Group(character: Char; position: DNMathTopBotPositions; verticalJustification: DNMathTopBotPositions): DNIMathGroupingCharacter; overload;
    function ToBorderBox: DNIMathBorderBox; overload;
    function ToBorderBox(hideTop: Boolean; hideBottom: Boolean; hideLeft: Boolean; hideRight: Boolean; strikethroughHorizontal: Boolean; strikethroughVertical: Boolean; strikethroughBottomLeftToTopRight: Boolean; strikethroughTopLeftToBottomRight: Boolean): DNIMathBorderBox; overload;
    function ToBox: DNIMathBox;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Base: DNIMathElement read get_Base;
    property OperatorEmulator: Boolean read get_OperatorEmulator write set_OperatorEmulator;
    property NoBreak: Boolean read get_NoBreak write set_NoBreak;
    property Differential: Boolean read get_Differential write set_Differential;
    property AlignmentPoint: Boolean read get_AlignmentPoint write set_AlignmentPoint;
    property ExplicitBreak: Byte read get_ExplicitBreak write set_ExplicitBreak;
  end;

  TDNMathBox = class(TDNGenericImport<DNMathBoxClass, DNMathBox>) end;

  //-------------namespace: Aspose.Slides.MathText----------------
  DNMathDelimiterClass = interface(DNMathElementBaseClass)
  ['{9F4BF331-34CB-5D88-8AAE-0B69A9B80188}']
  { constructors } 

    {class} function init(element: DNIMathElement): DNMathDelimiter;

  end;

  [DNTypeName('Aspose.Slides.MathText.MathDelimiter')]
  DNMathDelimiter = interface(DNMathElementBase)
  ['{D573CD0E-7688-44F0-9BF2-E3E286CAF028}']
  { getters & setters } 

    function get_Arguments: DNIMathElementCollection;
    function get_BeginningCharacter: Char;
    procedure set_BeginningCharacter(value: Char);
    function get_SeparatorCharacter: Char;
    procedure set_SeparatorCharacter(value: Char);
    function get_EndingCharacter: Char;
    procedure set_EndingCharacter(value: Char);
    function get_GrowToMatchOperandHeight: Boolean;
    procedure set_GrowToMatchOperandHeight(value: Boolean);
    function get_DelimiterShape: DNMathDelimiterShape;
    procedure set_DelimiterShape(value: DNMathDelimiterShape);

  { methods } 

    function Delimit(separatorCharacter: Char): DNIMathDelimiter;
    function Enclose(beginningCharacter: Char; endingCharacter: Char): DNIMathDelimiter; overload;
    function Join(mathElement: DNIMathElement): DNIMathBlock; overload;
    function Join(mathText: string): DNIMathBlock; overload;
    function Divide(denominator: DNIMathElement): DNIMathFraction; overload;
    function Divide(denominator: string): DNIMathFraction; overload;
    function Divide(denominator: DNIMathElement; fractionType: DNMathFractionTypes): DNIMathFraction; overload;
    function Divide(denominator: string; fractionType: DNMathFractionTypes): DNIMathFraction; overload;
    function Enclose: DNIMathDelimiter; overload;
    function &Function(functionArgument: DNIMathElement): DNIMathFunction; overload;
    function &Function(functionArgument: string): DNIMathFunction; overload;
    function AsArgumentOfFunction(functionName: DNIMathElement): DNIMathFunction; overload;
    function AsArgumentOfFunction(functionName: string): DNIMathFunction; overload;
    function AsArgumentOfFunction(functionType: DNMathFunctionsOfOneArgument): DNIMathFunction; overload;
    function AsArgumentOfFunction(functionType: DNMathFunctionsOfTwoArguments; additionalArgument: DNIMathElement): DNIMathFunction; overload;
    function AsArgumentOfFunction(functionType: DNMathFunctionsOfTwoArguments; additionalArgument: string): DNIMathFunction; overload;
    function SetSubscript(subscript: DNIMathElement): DNIMathSubscriptElement; overload;
    function SetSubscript(subscript: string): DNIMathSubscriptElement; overload;
    function SetSuperscript(superscript: DNIMathElement): DNIMathSuperscriptElement; overload;
    function SetSuperscript(superscript: string): DNIMathSuperscriptElement; overload;
    function SetSubSuperscriptOnTheRight(subscript: DNIMathElement; superscript: DNIMathElement): DNIMathRightSubSuperscriptElement; overload;
    function SetSubSuperscriptOnTheRight(subscript: string; superscript: string): DNIMathRightSubSuperscriptElement; overload;
    function SetSubSuperscriptOnTheLeft(subscript: DNIMathElement; superscript: DNIMathElement): DNIMathLeftSubSuperscriptElement; overload;
    function SetSubSuperscriptOnTheLeft(subscript: string; superscript: string): DNIMathLeftSubSuperscriptElement; overload;
    function Radical(degree: DNIMathElement): DNIMathRadical; overload;
    function Radical(degree: string): DNIMathRadical; overload;
    function SetUpperLimit(limit: DNIMathElement): DNIMathLimit; overload;
    function SetUpperLimit(limit: string): DNIMathLimit; overload;
    function SetLowerLimit(limit: DNIMathElement): DNIMathLimit; overload;
    function SetLowerLimit(limit: string): DNIMathLimit; overload;
    function Nary(&type: DNMathNaryOperatorTypes; lowerLimit: DNIMathElement; upperLimit: DNIMathElement): DNIMathNaryOperator; overload;
    function Nary(&type: DNMathNaryOperatorTypes; lowerLimit: string; upperLimit: string): DNIMathNaryOperator; overload;
    function ToMathArray: DNIMathArray;
    function Integral(integralType: DNMathIntegralTypes; lowerLimit: DNIMathElement; upperLimit: DNIMathElement; limitLocations: DNMathLimitLocations): DNIMathNaryOperator; overload;
    function Integral(integralType: DNMathIntegralTypes; lowerLimit: DNIMathElement; upperLimit: DNIMathElement): DNIMathNaryOperator; overload;
    function Integral(integralType: DNMathIntegralTypes): DNIMathNaryOperator; overload;
    function Integral(integralType: DNMathIntegralTypes; lowerLimit: string; upperLimit: string; limitLocations: DNMathLimitLocations): DNIMathNaryOperator; overload;
    function Integral(integralType: DNMathIntegralTypes; lowerLimit: string; upperLimit: string): DNIMathNaryOperator; overload;
    function Accent(accentCharacter: Char): DNIMathAccent;
    function Overbar: DNIMathBar;
    function Underbar: DNIMathBar;
    function Group: DNIMathGroupingCharacter; overload;
    function Group(character: Char; position: DNMathTopBotPositions; verticalJustification: DNMathTopBotPositions): DNIMathGroupingCharacter; overload;
    function ToBorderBox: DNIMathBorderBox; overload;
    function ToBorderBox(hideTop: Boolean; hideBottom: Boolean; hideLeft: Boolean; hideRight: Boolean; strikethroughHorizontal: Boolean; strikethroughVertical: Boolean; strikethroughBottomLeftToTopRight: Boolean; strikethroughTopLeftToBottomRight: Boolean): DNIMathBorderBox; overload;
    function ToBox: DNIMathBox;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Arguments: DNIMathElementCollection read get_Arguments;
    property BeginningCharacter: Char read get_BeginningCharacter write set_BeginningCharacter;
    property SeparatorCharacter: Char read get_SeparatorCharacter write set_SeparatorCharacter;
    property EndingCharacter: Char read get_EndingCharacter write set_EndingCharacter;
    property GrowToMatchOperandHeight: Boolean read get_GrowToMatchOperandHeight write set_GrowToMatchOperandHeight;
    property DelimiterShape: DNMathDelimiterShape read get_DelimiterShape write set_DelimiterShape;
  end;

  TDNMathDelimiter = class(TDNGenericImport<DNMathDelimiterClass, DNMathDelimiter>) end;

  //-------------namespace: Aspose.Slides.MathText----------------
  DNMathematicalTextClass = interface(DNMathElementBaseClass)
  ['{0A5316E4-B4E0-517F-97D3-0B3A066F69CA}']
  { constructors } 

    {class} function init: DNMathematicalText; overload;
    {class} function init(mathSymbol: Char): DNMathematicalText; overload;
    {class} function init(mathText: string): DNMathematicalText; overload;
    {class} function init(mathText: string; portionFormat: DNIPortionFormat): DNMathematicalText; overload;

  end;

  [DNTypeName('Aspose.Slides.MathText.MathematicalText')]
  DNMathematicalText = interface(DNMathElementBase)
  ['{6C0D832C-02EF-46AA-A55C-32191D7DDA99}']
  { getters & setters } 

    function get_Value: string;
    procedure set_Value(value: string);
    function get_Format: DNIPortionFormat;

  { methods } 

    function Join(mathElement: DNIMathElement): DNIMathBlock; overload;
    function Join(mathText: string): DNIMathBlock; overload;
    function Divide(denominator: DNIMathElement): DNIMathFraction; overload;
    function Divide(denominator: string): DNIMathFraction; overload;
    function Divide(denominator: DNIMathElement; fractionType: DNMathFractionTypes): DNIMathFraction; overload;
    function Divide(denominator: string; fractionType: DNMathFractionTypes): DNIMathFraction; overload;
    function Enclose: DNIMathDelimiter; overload;
    function Enclose(beginningCharacter: Char; endingCharacter: Char): DNIMathDelimiter; overload;
    function &Function(functionArgument: DNIMathElement): DNIMathFunction; overload;
    function &Function(functionArgument: string): DNIMathFunction; overload;
    function AsArgumentOfFunction(functionName: DNIMathElement): DNIMathFunction; overload;
    function AsArgumentOfFunction(functionName: string): DNIMathFunction; overload;
    function AsArgumentOfFunction(functionType: DNMathFunctionsOfOneArgument): DNIMathFunction; overload;
    function AsArgumentOfFunction(functionType: DNMathFunctionsOfTwoArguments; additionalArgument: DNIMathElement): DNIMathFunction; overload;
    function AsArgumentOfFunction(functionType: DNMathFunctionsOfTwoArguments; additionalArgument: string): DNIMathFunction; overload;
    function SetSubscript(subscript: DNIMathElement): DNIMathSubscriptElement; overload;
    function SetSubscript(subscript: string): DNIMathSubscriptElement; overload;
    function SetSuperscript(superscript: DNIMathElement): DNIMathSuperscriptElement; overload;
    function SetSuperscript(superscript: string): DNIMathSuperscriptElement; overload;
    function SetSubSuperscriptOnTheRight(subscript: DNIMathElement; superscript: DNIMathElement): DNIMathRightSubSuperscriptElement; overload;
    function SetSubSuperscriptOnTheRight(subscript: string; superscript: string): DNIMathRightSubSuperscriptElement; overload;
    function SetSubSuperscriptOnTheLeft(subscript: DNIMathElement; superscript: DNIMathElement): DNIMathLeftSubSuperscriptElement; overload;
    function SetSubSuperscriptOnTheLeft(subscript: string; superscript: string): DNIMathLeftSubSuperscriptElement; overload;
    function Radical(degree: DNIMathElement): DNIMathRadical; overload;
    function Radical(degree: string): DNIMathRadical; overload;
    function SetUpperLimit(limit: DNIMathElement): DNIMathLimit; overload;
    function SetUpperLimit(limit: string): DNIMathLimit; overload;
    function SetLowerLimit(limit: DNIMathElement): DNIMathLimit; overload;
    function SetLowerLimit(limit: string): DNIMathLimit; overload;
    function Nary(&type: DNMathNaryOperatorTypes; lowerLimit: DNIMathElement; upperLimit: DNIMathElement): DNIMathNaryOperator; overload;
    function Nary(&type: DNMathNaryOperatorTypes; lowerLimit: string; upperLimit: string): DNIMathNaryOperator; overload;
    function ToMathArray: DNIMathArray;
    function Integral(integralType: DNMathIntegralTypes; lowerLimit: DNIMathElement; upperLimit: DNIMathElement; limitLocations: DNMathLimitLocations): DNIMathNaryOperator; overload;
    function Integral(integralType: DNMathIntegralTypes; lowerLimit: DNIMathElement; upperLimit: DNIMathElement): DNIMathNaryOperator; overload;
    function Integral(integralType: DNMathIntegralTypes): DNIMathNaryOperator; overload;
    function Integral(integralType: DNMathIntegralTypes; lowerLimit: string; upperLimit: string; limitLocations: DNMathLimitLocations): DNIMathNaryOperator; overload;
    function Integral(integralType: DNMathIntegralTypes; lowerLimit: string; upperLimit: string): DNIMathNaryOperator; overload;
    function Accent(accentCharacter: Char): DNIMathAccent;
    function Overbar: DNIMathBar;
    function Underbar: DNIMathBar;
    function Group: DNIMathGroupingCharacter; overload;
    function Group(character: Char; position: DNMathTopBotPositions; verticalJustification: DNMathTopBotPositions): DNIMathGroupingCharacter; overload;
    function ToBorderBox: DNIMathBorderBox; overload;
    function ToBorderBox(hideTop: Boolean; hideBottom: Boolean; hideLeft: Boolean; hideRight: Boolean; strikethroughHorizontal: Boolean; strikethroughVertical: Boolean; strikethroughBottomLeftToTopRight: Boolean; strikethroughTopLeftToBottomRight: Boolean): DNIMathBorderBox; overload;
    function ToBox: DNIMathBox;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Value: string read get_Value write set_Value;
    property Format: DNIPortionFormat read get_Format;
  end;

  TDNMathematicalText = class(TDNGenericImport<DNMathematicalTextClass, DNMathematicalText>) end;

  //-------------namespace: Aspose.Slides.MathText----------------
  DNMathFractionClass = interface(DNMathElementBaseClass)
  ['{B5C7CFA0-83C0-56C6-B9DE-D6A2DB369FC3}']
  { constructors } 

    {class} function init(numerator: DNIMathElement; denominator: DNIMathElement; fractionType: DNMathFractionTypes): DNMathFraction; overload;
    {class} function init(numerator: DNIMathElement; denominator: DNIMathElement): DNMathFraction; overload;

  end;

  [DNTypeName('Aspose.Slides.MathText.MathFraction')]
  DNMathFraction = interface(DNMathElementBase)
  ['{DB60C9F5-EE6E-4DB5-A792-2942C8866F69}']
  { getters & setters } 

    function get_FractionType: DNMathFractionTypes;
    procedure set_FractionType(value: DNMathFractionTypes);
    function get_Numerator: DNIMathElement;
    function get_Denominator: DNIMathElement;

  { methods } 

    function Join(mathElement: DNIMathElement): DNIMathBlock; overload;
    function Join(mathText: string): DNIMathBlock; overload;
    function Divide(denominator: DNIMathElement): DNIMathFraction; overload;
    function Divide(denominator: string): DNIMathFraction; overload;
    function Divide(denominator: DNIMathElement; fractionType: DNMathFractionTypes): DNIMathFraction; overload;
    function Divide(denominator: string; fractionType: DNMathFractionTypes): DNIMathFraction; overload;
    function Enclose: DNIMathDelimiter; overload;
    function Enclose(beginningCharacter: Char; endingCharacter: Char): DNIMathDelimiter; overload;
    function &Function(functionArgument: DNIMathElement): DNIMathFunction; overload;
    function &Function(functionArgument: string): DNIMathFunction; overload;
    function AsArgumentOfFunction(functionName: DNIMathElement): DNIMathFunction; overload;
    function AsArgumentOfFunction(functionName: string): DNIMathFunction; overload;
    function AsArgumentOfFunction(functionType: DNMathFunctionsOfOneArgument): DNIMathFunction; overload;
    function AsArgumentOfFunction(functionType: DNMathFunctionsOfTwoArguments; additionalArgument: DNIMathElement): DNIMathFunction; overload;
    function AsArgumentOfFunction(functionType: DNMathFunctionsOfTwoArguments; additionalArgument: string): DNIMathFunction; overload;
    function SetSubscript(subscript: DNIMathElement): DNIMathSubscriptElement; overload;
    function SetSubscript(subscript: string): DNIMathSubscriptElement; overload;
    function SetSuperscript(superscript: DNIMathElement): DNIMathSuperscriptElement; overload;
    function SetSuperscript(superscript: string): DNIMathSuperscriptElement; overload;
    function SetSubSuperscriptOnTheRight(subscript: DNIMathElement; superscript: DNIMathElement): DNIMathRightSubSuperscriptElement; overload;
    function SetSubSuperscriptOnTheRight(subscript: string; superscript: string): DNIMathRightSubSuperscriptElement; overload;
    function SetSubSuperscriptOnTheLeft(subscript: DNIMathElement; superscript: DNIMathElement): DNIMathLeftSubSuperscriptElement; overload;
    function SetSubSuperscriptOnTheLeft(subscript: string; superscript: string): DNIMathLeftSubSuperscriptElement; overload;
    function Radical(degree: DNIMathElement): DNIMathRadical; overload;
    function Radical(degree: string): DNIMathRadical; overload;
    function SetUpperLimit(limit: DNIMathElement): DNIMathLimit; overload;
    function SetUpperLimit(limit: string): DNIMathLimit; overload;
    function SetLowerLimit(limit: DNIMathElement): DNIMathLimit; overload;
    function SetLowerLimit(limit: string): DNIMathLimit; overload;
    function Nary(&type: DNMathNaryOperatorTypes; lowerLimit: DNIMathElement; upperLimit: DNIMathElement): DNIMathNaryOperator; overload;
    function Nary(&type: DNMathNaryOperatorTypes; lowerLimit: string; upperLimit: string): DNIMathNaryOperator; overload;
    function ToMathArray: DNIMathArray;
    function Integral(integralType: DNMathIntegralTypes; lowerLimit: DNIMathElement; upperLimit: DNIMathElement; limitLocations: DNMathLimitLocations): DNIMathNaryOperator; overload;
    function Integral(integralType: DNMathIntegralTypes; lowerLimit: DNIMathElement; upperLimit: DNIMathElement): DNIMathNaryOperator; overload;
    function Integral(integralType: DNMathIntegralTypes): DNIMathNaryOperator; overload;
    function Integral(integralType: DNMathIntegralTypes; lowerLimit: string; upperLimit: string; limitLocations: DNMathLimitLocations): DNIMathNaryOperator; overload;
    function Integral(integralType: DNMathIntegralTypes; lowerLimit: string; upperLimit: string): DNIMathNaryOperator; overload;
    function Accent(accentCharacter: Char): DNIMathAccent;
    function Overbar: DNIMathBar;
    function Underbar: DNIMathBar;
    function Group: DNIMathGroupingCharacter; overload;
    function Group(character: Char; position: DNMathTopBotPositions; verticalJustification: DNMathTopBotPositions): DNIMathGroupingCharacter; overload;
    function ToBorderBox: DNIMathBorderBox; overload;
    function ToBorderBox(hideTop: Boolean; hideBottom: Boolean; hideLeft: Boolean; hideRight: Boolean; strikethroughHorizontal: Boolean; strikethroughVertical: Boolean; strikethroughBottomLeftToTopRight: Boolean; strikethroughTopLeftToBottomRight: Boolean): DNIMathBorderBox; overload;
    function ToBox: DNIMathBox;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property FractionType: DNMathFractionTypes read get_FractionType write set_FractionType;
    property Numerator: DNIMathElement read get_Numerator;
    property Denominator: DNIMathElement read get_Denominator;
  end;

  TDNMathFraction = class(TDNGenericImport<DNMathFractionClass, DNMathFraction>) end;

  //-------------namespace: Aspose.Slides.MathText----------------
  DNMathFunctionClass = interface(DNMathElementBaseClass)
  ['{58919DD6-9611-5770-B007-A7A76C15DA33}']
  { constructors } 

    {class} function init(funcName: DNIMathElement; baseArgument: DNIMathElement): DNMathFunction; overload;
    {class} function init(funcName: string; baseArgument: DNIMathElement): DNMathFunction; overload;

  end;

  [DNTypeName('Aspose.Slides.MathText.MathFunction')]
  DNMathFunction = interface(DNMathElementBase)
  ['{446014F4-5214-4070-8249-42B93AA9B33B}']
  { getters & setters } 

    function get_Name: DNIMathElement;
    function get_Base: DNIMathElement;

  { methods } 

    function Join(mathElement: DNIMathElement): DNIMathBlock; overload;
    function Join(mathText: string): DNIMathBlock; overload;
    function Divide(denominator: DNIMathElement): DNIMathFraction; overload;
    function Divide(denominator: string): DNIMathFraction; overload;
    function Divide(denominator: DNIMathElement; fractionType: DNMathFractionTypes): DNIMathFraction; overload;
    function Divide(denominator: string; fractionType: DNMathFractionTypes): DNIMathFraction; overload;
    function Enclose: DNIMathDelimiter; overload;
    function Enclose(beginningCharacter: Char; endingCharacter: Char): DNIMathDelimiter; overload;
    function &Function(functionArgument: DNIMathElement): DNIMathFunction; overload;
    function &Function(functionArgument: string): DNIMathFunction; overload;
    function AsArgumentOfFunction(functionName: DNIMathElement): DNIMathFunction; overload;
    function AsArgumentOfFunction(functionName: string): DNIMathFunction; overload;
    function AsArgumentOfFunction(functionType: DNMathFunctionsOfOneArgument): DNIMathFunction; overload;
    function AsArgumentOfFunction(functionType: DNMathFunctionsOfTwoArguments; additionalArgument: DNIMathElement): DNIMathFunction; overload;
    function AsArgumentOfFunction(functionType: DNMathFunctionsOfTwoArguments; additionalArgument: string): DNIMathFunction; overload;
    function SetSubscript(subscript: DNIMathElement): DNIMathSubscriptElement; overload;
    function SetSubscript(subscript: string): DNIMathSubscriptElement; overload;
    function SetSuperscript(superscript: DNIMathElement): DNIMathSuperscriptElement; overload;
    function SetSuperscript(superscript: string): DNIMathSuperscriptElement; overload;
    function SetSubSuperscriptOnTheRight(subscript: DNIMathElement; superscript: DNIMathElement): DNIMathRightSubSuperscriptElement; overload;
    function SetSubSuperscriptOnTheRight(subscript: string; superscript: string): DNIMathRightSubSuperscriptElement; overload;
    function SetSubSuperscriptOnTheLeft(subscript: DNIMathElement; superscript: DNIMathElement): DNIMathLeftSubSuperscriptElement; overload;
    function SetSubSuperscriptOnTheLeft(subscript: string; superscript: string): DNIMathLeftSubSuperscriptElement; overload;
    function Radical(degree: DNIMathElement): DNIMathRadical; overload;
    function Radical(degree: string): DNIMathRadical; overload;
    function SetUpperLimit(limit: DNIMathElement): DNIMathLimit; overload;
    function SetUpperLimit(limit: string): DNIMathLimit; overload;
    function SetLowerLimit(limit: DNIMathElement): DNIMathLimit; overload;
    function SetLowerLimit(limit: string): DNIMathLimit; overload;
    function Nary(&type: DNMathNaryOperatorTypes; lowerLimit: DNIMathElement; upperLimit: DNIMathElement): DNIMathNaryOperator; overload;
    function Nary(&type: DNMathNaryOperatorTypes; lowerLimit: string; upperLimit: string): DNIMathNaryOperator; overload;
    function ToMathArray: DNIMathArray;
    function Integral(integralType: DNMathIntegralTypes; lowerLimit: DNIMathElement; upperLimit: DNIMathElement; limitLocations: DNMathLimitLocations): DNIMathNaryOperator; overload;
    function Integral(integralType: DNMathIntegralTypes; lowerLimit: DNIMathElement; upperLimit: DNIMathElement): DNIMathNaryOperator; overload;
    function Integral(integralType: DNMathIntegralTypes): DNIMathNaryOperator; overload;
    function Integral(integralType: DNMathIntegralTypes; lowerLimit: string; upperLimit: string; limitLocations: DNMathLimitLocations): DNIMathNaryOperator; overload;
    function Integral(integralType: DNMathIntegralTypes; lowerLimit: string; upperLimit: string): DNIMathNaryOperator; overload;
    function Accent(accentCharacter: Char): DNIMathAccent;
    function Overbar: DNIMathBar;
    function Underbar: DNIMathBar;
    function Group: DNIMathGroupingCharacter; overload;
    function Group(character: Char; position: DNMathTopBotPositions; verticalJustification: DNMathTopBotPositions): DNIMathGroupingCharacter; overload;
    function ToBorderBox: DNIMathBorderBox; overload;
    function ToBorderBox(hideTop: Boolean; hideBottom: Boolean; hideLeft: Boolean; hideRight: Boolean; strikethroughHorizontal: Boolean; strikethroughVertical: Boolean; strikethroughBottomLeftToTopRight: Boolean; strikethroughTopLeftToBottomRight: Boolean): DNIMathBorderBox; overload;
    function ToBox: DNIMathBox;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Name: DNIMathElement read get_Name;
    property Base: DNIMathElement read get_Base;
  end;

  TDNMathFunction = class(TDNGenericImport<DNMathFunctionClass, DNMathFunction>) end;

  //-------------namespace: Aspose.Slides.MathText----------------
  DNMathGroupingCharacterClass = interface(DNMathElementBaseClass)
  ['{E0291F78-4293-544E-8B81-0B0E1272F805}']
  { constructors } 

    {class} function init(element: DNIMathElement): DNMathGroupingCharacter; overload;
    {class} function init(element: DNIMathElement; character: Char; position: DNMathTopBotPositions; verticalJustification: DNMathTopBotPositions): DNMathGroupingCharacter; overload;

  end;

  [DNTypeName('Aspose.Slides.MathText.MathGroupingCharacter')]
  DNMathGroupingCharacter = interface(DNMathElementBase)
  ['{C51CA666-D080-45E3-9741-C97FCF68E9D5}']
  { getters & setters } 

    function get_Base: DNIMathElement;
    function get_Character: Char;
    procedure set_Character(value: Char);
    function get_Position: DNMathTopBotPositions;
    procedure set_Position(value: DNMathTopBotPositions);
    function get_VerticalJustification: DNMathTopBotPositions;
    procedure set_VerticalJustification(value: DNMathTopBotPositions);

  { methods } 

    function Join(mathElement: DNIMathElement): DNIMathBlock; overload;
    function Join(mathText: string): DNIMathBlock; overload;
    function Divide(denominator: DNIMathElement): DNIMathFraction; overload;
    function Divide(denominator: string): DNIMathFraction; overload;
    function Divide(denominator: DNIMathElement; fractionType: DNMathFractionTypes): DNIMathFraction; overload;
    function Divide(denominator: string; fractionType: DNMathFractionTypes): DNIMathFraction; overload;
    function Enclose: DNIMathDelimiter; overload;
    function Enclose(beginningCharacter: Char; endingCharacter: Char): DNIMathDelimiter; overload;
    function &Function(functionArgument: DNIMathElement): DNIMathFunction; overload;
    function &Function(functionArgument: string): DNIMathFunction; overload;
    function AsArgumentOfFunction(functionName: DNIMathElement): DNIMathFunction; overload;
    function AsArgumentOfFunction(functionName: string): DNIMathFunction; overload;
    function AsArgumentOfFunction(functionType: DNMathFunctionsOfOneArgument): DNIMathFunction; overload;
    function AsArgumentOfFunction(functionType: DNMathFunctionsOfTwoArguments; additionalArgument: DNIMathElement): DNIMathFunction; overload;
    function AsArgumentOfFunction(functionType: DNMathFunctionsOfTwoArguments; additionalArgument: string): DNIMathFunction; overload;
    function SetSubscript(subscript: DNIMathElement): DNIMathSubscriptElement; overload;
    function SetSubscript(subscript: string): DNIMathSubscriptElement; overload;
    function SetSuperscript(superscript: DNIMathElement): DNIMathSuperscriptElement; overload;
    function SetSuperscript(superscript: string): DNIMathSuperscriptElement; overload;
    function SetSubSuperscriptOnTheRight(subscript: DNIMathElement; superscript: DNIMathElement): DNIMathRightSubSuperscriptElement; overload;
    function SetSubSuperscriptOnTheRight(subscript: string; superscript: string): DNIMathRightSubSuperscriptElement; overload;
    function SetSubSuperscriptOnTheLeft(subscript: DNIMathElement; superscript: DNIMathElement): DNIMathLeftSubSuperscriptElement; overload;
    function SetSubSuperscriptOnTheLeft(subscript: string; superscript: string): DNIMathLeftSubSuperscriptElement; overload;
    function Radical(degree: DNIMathElement): DNIMathRadical; overload;
    function Radical(degree: string): DNIMathRadical; overload;
    function SetUpperLimit(limit: DNIMathElement): DNIMathLimit; overload;
    function SetUpperLimit(limit: string): DNIMathLimit; overload;
    function SetLowerLimit(limit: DNIMathElement): DNIMathLimit; overload;
    function SetLowerLimit(limit: string): DNIMathLimit; overload;
    function Nary(&type: DNMathNaryOperatorTypes; lowerLimit: DNIMathElement; upperLimit: DNIMathElement): DNIMathNaryOperator; overload;
    function Nary(&type: DNMathNaryOperatorTypes; lowerLimit: string; upperLimit: string): DNIMathNaryOperator; overload;
    function ToMathArray: DNIMathArray;
    function Integral(integralType: DNMathIntegralTypes; lowerLimit: DNIMathElement; upperLimit: DNIMathElement; limitLocations: DNMathLimitLocations): DNIMathNaryOperator; overload;
    function Integral(integralType: DNMathIntegralTypes; lowerLimit: DNIMathElement; upperLimit: DNIMathElement): DNIMathNaryOperator; overload;
    function Integral(integralType: DNMathIntegralTypes): DNIMathNaryOperator; overload;
    function Integral(integralType: DNMathIntegralTypes; lowerLimit: string; upperLimit: string; limitLocations: DNMathLimitLocations): DNIMathNaryOperator; overload;
    function Integral(integralType: DNMathIntegralTypes; lowerLimit: string; upperLimit: string): DNIMathNaryOperator; overload;
    function Accent(accentCharacter: Char): DNIMathAccent;
    function Overbar: DNIMathBar;
    function Underbar: DNIMathBar;
    function Group: DNIMathGroupingCharacter; overload;
    function Group(character: Char; position: DNMathTopBotPositions; verticalJustification: DNMathTopBotPositions): DNIMathGroupingCharacter; overload;
    function ToBorderBox: DNIMathBorderBox; overload;
    function ToBorderBox(hideTop: Boolean; hideBottom: Boolean; hideLeft: Boolean; hideRight: Boolean; strikethroughHorizontal: Boolean; strikethroughVertical: Boolean; strikethroughBottomLeftToTopRight: Boolean; strikethroughTopLeftToBottomRight: Boolean): DNIMathBorderBox; overload;
    function ToBox: DNIMathBox;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Base: DNIMathElement read get_Base;
    property Character: Char read get_Character write set_Character;
    property Position: DNMathTopBotPositions read get_Position write set_Position;
    property VerticalJustification: DNMathTopBotPositions read get_VerticalJustification write set_VerticalJustification;
  end;

  TDNMathGroupingCharacter = class(TDNGenericImport<DNMathGroupingCharacterClass, DNMathGroupingCharacter>) end;

  //-------------namespace: Aspose.Slides.MathText----------------
  DNMathLimitClass = interface(DNMathElementBaseClass)
  ['{295823D4-0E09-5D0D-8E1D-C7C91067883F}']
  { constructors } 

    {class} function init(baseArg: DNIMathElement; limit: DNIMathElement; upperLimit: Boolean): DNMathLimit; overload;
    {class} function init(baseArg: DNIMathElement; limit: DNIMathElement): DNMathLimit; overload;

  end;

  [DNTypeName('Aspose.Slides.MathText.MathLimit')]
  DNMathLimit = interface(DNMathElementBase)
  ['{93641105-CE37-490B-BD4E-BA61ACB84B3C}']
  { getters & setters } 

    function get_Base: DNIMathElement;
    function get_Limit: DNIMathElement;
    function get_UpperLimit: Boolean;
    procedure set_UpperLimit(value: Boolean);

  { methods } 

    function Join(mathElement: DNIMathElement): DNIMathBlock; overload;
    function Join(mathText: string): DNIMathBlock; overload;
    function Divide(denominator: DNIMathElement): DNIMathFraction; overload;
    function Divide(denominator: string): DNIMathFraction; overload;
    function Divide(denominator: DNIMathElement; fractionType: DNMathFractionTypes): DNIMathFraction; overload;
    function Divide(denominator: string; fractionType: DNMathFractionTypes): DNIMathFraction; overload;
    function Enclose: DNIMathDelimiter; overload;
    function Enclose(beginningCharacter: Char; endingCharacter: Char): DNIMathDelimiter; overload;
    function &Function(functionArgument: DNIMathElement): DNIMathFunction; overload;
    function &Function(functionArgument: string): DNIMathFunction; overload;
    function AsArgumentOfFunction(functionName: DNIMathElement): DNIMathFunction; overload;
    function AsArgumentOfFunction(functionName: string): DNIMathFunction; overload;
    function AsArgumentOfFunction(functionType: DNMathFunctionsOfOneArgument): DNIMathFunction; overload;
    function AsArgumentOfFunction(functionType: DNMathFunctionsOfTwoArguments; additionalArgument: DNIMathElement): DNIMathFunction; overload;
    function AsArgumentOfFunction(functionType: DNMathFunctionsOfTwoArguments; additionalArgument: string): DNIMathFunction; overload;
    function SetSubscript(subscript: DNIMathElement): DNIMathSubscriptElement; overload;
    function SetSubscript(subscript: string): DNIMathSubscriptElement; overload;
    function SetSuperscript(superscript: DNIMathElement): DNIMathSuperscriptElement; overload;
    function SetSuperscript(superscript: string): DNIMathSuperscriptElement; overload;
    function SetSubSuperscriptOnTheRight(subscript: DNIMathElement; superscript: DNIMathElement): DNIMathRightSubSuperscriptElement; overload;
    function SetSubSuperscriptOnTheRight(subscript: string; superscript: string): DNIMathRightSubSuperscriptElement; overload;
    function SetSubSuperscriptOnTheLeft(subscript: DNIMathElement; superscript: DNIMathElement): DNIMathLeftSubSuperscriptElement; overload;
    function SetSubSuperscriptOnTheLeft(subscript: string; superscript: string): DNIMathLeftSubSuperscriptElement; overload;
    function Radical(degree: DNIMathElement): DNIMathRadical; overload;
    function Radical(degree: string): DNIMathRadical; overload;
    function SetUpperLimit(limit: DNIMathElement): DNIMathLimit; overload;
    function SetUpperLimit(limit: string): DNIMathLimit; overload;
    function SetLowerLimit(limit: DNIMathElement): DNIMathLimit; overload;
    function SetLowerLimit(limit: string): DNIMathLimit; overload;
    function Nary(&type: DNMathNaryOperatorTypes; lowerLimit: DNIMathElement; upperLimit: DNIMathElement): DNIMathNaryOperator; overload;
    function Nary(&type: DNMathNaryOperatorTypes; lowerLimit: string; upperLimit: string): DNIMathNaryOperator; overload;
    function ToMathArray: DNIMathArray;
    function Integral(integralType: DNMathIntegralTypes; lowerLimit: DNIMathElement; upperLimit: DNIMathElement; limitLocations: DNMathLimitLocations): DNIMathNaryOperator; overload;
    function Integral(integralType: DNMathIntegralTypes; lowerLimit: DNIMathElement; upperLimit: DNIMathElement): DNIMathNaryOperator; overload;
    function Integral(integralType: DNMathIntegralTypes): DNIMathNaryOperator; overload;
    function Integral(integralType: DNMathIntegralTypes; lowerLimit: string; upperLimit: string; limitLocations: DNMathLimitLocations): DNIMathNaryOperator; overload;
    function Integral(integralType: DNMathIntegralTypes; lowerLimit: string; upperLimit: string): DNIMathNaryOperator; overload;
    function Accent(accentCharacter: Char): DNIMathAccent;
    function Overbar: DNIMathBar;
    function Underbar: DNIMathBar;
    function Group: DNIMathGroupingCharacter; overload;
    function Group(character: Char; position: DNMathTopBotPositions; verticalJustification: DNMathTopBotPositions): DNIMathGroupingCharacter; overload;
    function ToBorderBox: DNIMathBorderBox; overload;
    function ToBorderBox(hideTop: Boolean; hideBottom: Boolean; hideLeft: Boolean; hideRight: Boolean; strikethroughHorizontal: Boolean; strikethroughVertical: Boolean; strikethroughBottomLeftToTopRight: Boolean; strikethroughTopLeftToBottomRight: Boolean): DNIMathBorderBox; overload;
    function ToBox: DNIMathBox;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Base: DNIMathElement read get_Base;
    property Limit: DNIMathElement read get_Limit;
    property UpperLimit: Boolean read get_UpperLimit write set_UpperLimit;
  end;

  TDNMathLimit = class(TDNGenericImport<DNMathLimitClass, DNMathLimit>) end;

  //-------------namespace: Aspose.Slides.MathText----------------
  DNMathMatrixClass = interface(DNMathElementBaseClass)
  ['{0E2301F9-4CCA-56EA-9178-CBA1F450C805}']
  { constructors } 

    {class} function init(rowCount: Int32; columnCount: Int32): DNMathMatrix;

  end;

  [DNTypeName('Aspose.Slides.MathText.MathMatrix')]
  DNMathMatrix = interface(DNMathElementBase)
  ['{A1B96C7D-33EE-4286-A9BF-E03CAD53AA40}']
  { getters & setters } 

    function get_RowCount: Int32;
    function get_ColumnCount: Int32;
    function get_HidePlaceholders: Boolean;
    procedure set_HidePlaceholders(value: Boolean);
    function get_BaseJustification: DNMathVerticalAlignment;
    procedure set_BaseJustification(value: DNMathVerticalAlignment);
    function get_MinColumnWidth: UInt32;
    procedure set_MinColumnWidth(value: UInt32);
    function get_ColumnGapRule: DNMathSpacingRules;
    procedure set_ColumnGapRule(value: DNMathSpacingRules);
    function get_ColumnGap: UInt32;
    procedure set_ColumnGap(value: UInt32);
    function get_RowGapRule: DNMathSpacingRules;
    procedure set_RowGapRule(value: DNMathSpacingRules);
    function get_RowGap: UInt32;
    procedure set_RowGap(value: UInt32);

  { methods } 

    function GetColumnAlignment(columnIndex: Int32): DNMathHorizontalAlignment;
    procedure SetColumnAlignment(columnIndex: Int32; val: DNMathHorizontalAlignment);
    procedure SetColumnsAlignment(columnIndex: Int32; columnsCount: UInt32; val: DNMathHorizontalAlignment);
    procedure InsertRowBefore(rowIndex: Int32);
    procedure InsertRowAfter(rowIndex: Int32);
    procedure DeleteRow(rowIndex: Int32);
    procedure InsertColumnBefore(columnIndex: Int32);
    procedure InsertColumnAfter(columnIndex: Int32);
    procedure DeleteColumn(columnIndex: Int32);
    function Join(mathElement: DNIMathElement): DNIMathBlock; overload;
    function Join(mathText: string): DNIMathBlock; overload;
    function Divide(denominator: DNIMathElement): DNIMathFraction; overload;
    function Divide(denominator: string): DNIMathFraction; overload;
    function Divide(denominator: DNIMathElement; fractionType: DNMathFractionTypes): DNIMathFraction; overload;
    function Divide(denominator: string; fractionType: DNMathFractionTypes): DNIMathFraction; overload;
    function Enclose: DNIMathDelimiter; overload;
    function Enclose(beginningCharacter: Char; endingCharacter: Char): DNIMathDelimiter; overload;
    function &Function(functionArgument: DNIMathElement): DNIMathFunction; overload;
    function &Function(functionArgument: string): DNIMathFunction; overload;
    function AsArgumentOfFunction(functionName: DNIMathElement): DNIMathFunction; overload;
    function AsArgumentOfFunction(functionName: string): DNIMathFunction; overload;
    function AsArgumentOfFunction(functionType: DNMathFunctionsOfOneArgument): DNIMathFunction; overload;
    function AsArgumentOfFunction(functionType: DNMathFunctionsOfTwoArguments; additionalArgument: DNIMathElement): DNIMathFunction; overload;
    function AsArgumentOfFunction(functionType: DNMathFunctionsOfTwoArguments; additionalArgument: string): DNIMathFunction; overload;
    function SetSubscript(subscript: DNIMathElement): DNIMathSubscriptElement; overload;
    function SetSubscript(subscript: string): DNIMathSubscriptElement; overload;
    function SetSuperscript(superscript: DNIMathElement): DNIMathSuperscriptElement; overload;
    function SetSuperscript(superscript: string): DNIMathSuperscriptElement; overload;
    function SetSubSuperscriptOnTheRight(subscript: DNIMathElement; superscript: DNIMathElement): DNIMathRightSubSuperscriptElement; overload;
    function SetSubSuperscriptOnTheRight(subscript: string; superscript: string): DNIMathRightSubSuperscriptElement; overload;
    function SetSubSuperscriptOnTheLeft(subscript: DNIMathElement; superscript: DNIMathElement): DNIMathLeftSubSuperscriptElement; overload;
    function SetSubSuperscriptOnTheLeft(subscript: string; superscript: string): DNIMathLeftSubSuperscriptElement; overload;
    function Radical(degree: DNIMathElement): DNIMathRadical; overload;
    function Radical(degree: string): DNIMathRadical; overload;
    function SetUpperLimit(limit: DNIMathElement): DNIMathLimit; overload;
    function SetUpperLimit(limit: string): DNIMathLimit; overload;
    function SetLowerLimit(limit: DNIMathElement): DNIMathLimit; overload;
    function SetLowerLimit(limit: string): DNIMathLimit; overload;
    function Nary(&type: DNMathNaryOperatorTypes; lowerLimit: DNIMathElement; upperLimit: DNIMathElement): DNIMathNaryOperator; overload;
    function Nary(&type: DNMathNaryOperatorTypes; lowerLimit: string; upperLimit: string): DNIMathNaryOperator; overload;
    function ToMathArray: DNIMathArray;
    function Integral(integralType: DNMathIntegralTypes; lowerLimit: DNIMathElement; upperLimit: DNIMathElement; limitLocations: DNMathLimitLocations): DNIMathNaryOperator; overload;
    function Integral(integralType: DNMathIntegralTypes; lowerLimit: DNIMathElement; upperLimit: DNIMathElement): DNIMathNaryOperator; overload;
    function Integral(integralType: DNMathIntegralTypes): DNIMathNaryOperator; overload;
    function Integral(integralType: DNMathIntegralTypes; lowerLimit: string; upperLimit: string; limitLocations: DNMathLimitLocations): DNIMathNaryOperator; overload;
    function Integral(integralType: DNMathIntegralTypes; lowerLimit: string; upperLimit: string): DNIMathNaryOperator; overload;
    function Accent(accentCharacter: Char): DNIMathAccent;
    function Overbar: DNIMathBar;
    function Underbar: DNIMathBar;
    function Group: DNIMathGroupingCharacter; overload;
    function Group(character: Char; position: DNMathTopBotPositions; verticalJustification: DNMathTopBotPositions): DNIMathGroupingCharacter; overload;
    function ToBorderBox: DNIMathBorderBox; overload;
    function ToBorderBox(hideTop: Boolean; hideBottom: Boolean; hideLeft: Boolean; hideRight: Boolean; strikethroughHorizontal: Boolean; strikethroughVertical: Boolean; strikethroughBottomLeftToTopRight: Boolean; strikethroughTopLeftToBottomRight: Boolean): DNIMathBorderBox; overload;
    function ToBox: DNIMathBox;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property RowCount: Int32 read get_RowCount;
    property ColumnCount: Int32 read get_ColumnCount;
    property HidePlaceholders: Boolean read get_HidePlaceholders write set_HidePlaceholders;
    property BaseJustification: DNMathVerticalAlignment read get_BaseJustification write set_BaseJustification;
    property MinColumnWidth: UInt32 read get_MinColumnWidth write set_MinColumnWidth;
    property ColumnGapRule: DNMathSpacingRules read get_ColumnGapRule write set_ColumnGapRule;
    property ColumnGap: UInt32 read get_ColumnGap write set_ColumnGap;
    property RowGapRule: DNMathSpacingRules read get_RowGapRule write set_RowGapRule;
    property RowGap: UInt32 read get_RowGap write set_RowGap;
  end;

  TDNMathMatrix = class(TDNGenericImport<DNMathMatrixClass, DNMathMatrix>) end;

  //-------------namespace: Aspose.Slides.MathText----------------
  DNMathNaryOperatorClass = interface(DNMathElementBaseClass)
  ['{E03D5862-215A-5DBD-9304-7D1BF250F753}']
  { constructors } 

    {class} function init(operatorSymbol: Char; baseArgument: DNIMathElement; lowerLimit: DNIMathElement; upperLimit: DNIMathElement): DNMathNaryOperator; overload;
    {class} function init(operatorSymbol: Char; baseArgument: DNIMathElement; lowerLimit: DNIMathElement): DNMathNaryOperator; overload;
    {class} function init(operatorSymbol: Char; baseArgument: DNIMathElement): DNMathNaryOperator; overload;

  end;

  [DNTypeName('Aspose.Slides.MathText.MathNaryOperator')]
  DNMathNaryOperator = interface(DNMathElementBase)
  ['{2B879544-23A1-489F-8EB3-5F4B55CB25C5}']
  { getters & setters } 

    function get_Base: DNIMathElement;
    function get_Subscript: DNIMathElement;
    function get_Superscript: DNIMathElement;
    function get_Operator: Char;
    procedure set_Operator(value: Char);
    function get_LimitLocation: DNMathLimitLocations;
    procedure set_LimitLocation(value: DNMathLimitLocations);
    function get_GrowToMatchOperandHeight: Boolean;
    procedure set_GrowToMatchOperandHeight(value: Boolean);
    function get_HideSubscript: Boolean;
    procedure set_HideSubscript(value: Boolean);
    function get_HideSuperscript: Boolean;
    procedure set_HideSuperscript(value: Boolean);

  { methods } 

    function Join(mathElement: DNIMathElement): DNIMathBlock; overload;
    function Join(mathText: string): DNIMathBlock; overload;
    function Divide(denominator: DNIMathElement): DNIMathFraction; overload;
    function Divide(denominator: string): DNIMathFraction; overload;
    function Divide(denominator: DNIMathElement; fractionType: DNMathFractionTypes): DNIMathFraction; overload;
    function Divide(denominator: string; fractionType: DNMathFractionTypes): DNIMathFraction; overload;
    function Enclose: DNIMathDelimiter; overload;
    function Enclose(beginningCharacter: Char; endingCharacter: Char): DNIMathDelimiter; overload;
    function &Function(functionArgument: DNIMathElement): DNIMathFunction; overload;
    function &Function(functionArgument: string): DNIMathFunction; overload;
    function AsArgumentOfFunction(functionName: DNIMathElement): DNIMathFunction; overload;
    function AsArgumentOfFunction(functionName: string): DNIMathFunction; overload;
    function AsArgumentOfFunction(functionType: DNMathFunctionsOfOneArgument): DNIMathFunction; overload;
    function AsArgumentOfFunction(functionType: DNMathFunctionsOfTwoArguments; additionalArgument: DNIMathElement): DNIMathFunction; overload;
    function AsArgumentOfFunction(functionType: DNMathFunctionsOfTwoArguments; additionalArgument: string): DNIMathFunction; overload;
    function SetSubscript(subscript: DNIMathElement): DNIMathSubscriptElement; overload;
    function SetSubscript(subscript: string): DNIMathSubscriptElement; overload;
    function SetSuperscript(superscript: DNIMathElement): DNIMathSuperscriptElement; overload;
    function SetSuperscript(superscript: string): DNIMathSuperscriptElement; overload;
    function SetSubSuperscriptOnTheRight(subscript: DNIMathElement; superscript: DNIMathElement): DNIMathRightSubSuperscriptElement; overload;
    function SetSubSuperscriptOnTheRight(subscript: string; superscript: string): DNIMathRightSubSuperscriptElement; overload;
    function SetSubSuperscriptOnTheLeft(subscript: DNIMathElement; superscript: DNIMathElement): DNIMathLeftSubSuperscriptElement; overload;
    function SetSubSuperscriptOnTheLeft(subscript: string; superscript: string): DNIMathLeftSubSuperscriptElement; overload;
    function Radical(degree: DNIMathElement): DNIMathRadical; overload;
    function Radical(degree: string): DNIMathRadical; overload;
    function SetUpperLimit(limit: DNIMathElement): DNIMathLimit; overload;
    function SetUpperLimit(limit: string): DNIMathLimit; overload;
    function SetLowerLimit(limit: DNIMathElement): DNIMathLimit; overload;
    function SetLowerLimit(limit: string): DNIMathLimit; overload;
    function Nary(&type: DNMathNaryOperatorTypes; lowerLimit: DNIMathElement; upperLimit: DNIMathElement): DNIMathNaryOperator; overload;
    function Nary(&type: DNMathNaryOperatorTypes; lowerLimit: string; upperLimit: string): DNIMathNaryOperator; overload;
    function ToMathArray: DNIMathArray;
    function Integral(integralType: DNMathIntegralTypes; lowerLimit: DNIMathElement; upperLimit: DNIMathElement; limitLocations: DNMathLimitLocations): DNIMathNaryOperator; overload;
    function Integral(integralType: DNMathIntegralTypes; lowerLimit: DNIMathElement; upperLimit: DNIMathElement): DNIMathNaryOperator; overload;
    function Integral(integralType: DNMathIntegralTypes): DNIMathNaryOperator; overload;
    function Integral(integralType: DNMathIntegralTypes; lowerLimit: string; upperLimit: string; limitLocations: DNMathLimitLocations): DNIMathNaryOperator; overload;
    function Integral(integralType: DNMathIntegralTypes; lowerLimit: string; upperLimit: string): DNIMathNaryOperator; overload;
    function Accent(accentCharacter: Char): DNIMathAccent;
    function Overbar: DNIMathBar;
    function Underbar: DNIMathBar;
    function Group: DNIMathGroupingCharacter; overload;
    function Group(character: Char; position: DNMathTopBotPositions; verticalJustification: DNMathTopBotPositions): DNIMathGroupingCharacter; overload;
    function ToBorderBox: DNIMathBorderBox; overload;
    function ToBorderBox(hideTop: Boolean; hideBottom: Boolean; hideLeft: Boolean; hideRight: Boolean; strikethroughHorizontal: Boolean; strikethroughVertical: Boolean; strikethroughBottomLeftToTopRight: Boolean; strikethroughTopLeftToBottomRight: Boolean): DNIMathBorderBox; overload;
    function ToBox: DNIMathBox;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Base: DNIMathElement read get_Base;
    property Subscript: DNIMathElement read get_Subscript;
    property Superscript: DNIMathElement read get_Superscript;
    property Operator: Char read get_Operator write set_Operator;
    property LimitLocation: DNMathLimitLocations read get_LimitLocation write set_LimitLocation;
    property GrowToMatchOperandHeight: Boolean read get_GrowToMatchOperandHeight write set_GrowToMatchOperandHeight;
    property HideSubscript: Boolean read get_HideSubscript write set_HideSubscript;
    property HideSuperscript: Boolean read get_HideSuperscript write set_HideSuperscript;
  end;

  TDNMathNaryOperator = class(TDNGenericImport<DNMathNaryOperatorClass, DNMathNaryOperator>) end;

  //-------------namespace: Aspose.Slides.MathText----------------
  DNMathRadicalClass = interface(DNMathElementBaseClass)
  ['{27C324DB-C062-542E-901F-7AC9E51C87C6}']
  { constructors } 

    {class} function init(baseArgument: DNIMathElement; degreeArgument: DNIMathElement): DNMathRadical;

  end;

  [DNTypeName('Aspose.Slides.MathText.MathRadical')]
  DNMathRadical = interface(DNMathElementBase)
  ['{E42264B9-D074-4326-A8A4-0EDC055695F7}']
  { getters & setters } 

    function get_Base: DNIMathElement;
    function get_Degree: DNIMathElement;
    function get_HideDegree: Boolean;
    procedure set_HideDegree(value: Boolean);

  { methods } 

    function Join(mathElement: DNIMathElement): DNIMathBlock; overload;
    function Join(mathText: string): DNIMathBlock; overload;
    function Divide(denominator: DNIMathElement): DNIMathFraction; overload;
    function Divide(denominator: string): DNIMathFraction; overload;
    function Divide(denominator: DNIMathElement; fractionType: DNMathFractionTypes): DNIMathFraction; overload;
    function Divide(denominator: string; fractionType: DNMathFractionTypes): DNIMathFraction; overload;
    function Enclose: DNIMathDelimiter; overload;
    function Enclose(beginningCharacter: Char; endingCharacter: Char): DNIMathDelimiter; overload;
    function &Function(functionArgument: DNIMathElement): DNIMathFunction; overload;
    function &Function(functionArgument: string): DNIMathFunction; overload;
    function AsArgumentOfFunction(functionName: DNIMathElement): DNIMathFunction; overload;
    function AsArgumentOfFunction(functionName: string): DNIMathFunction; overload;
    function AsArgumentOfFunction(functionType: DNMathFunctionsOfOneArgument): DNIMathFunction; overload;
    function AsArgumentOfFunction(functionType: DNMathFunctionsOfTwoArguments; additionalArgument: DNIMathElement): DNIMathFunction; overload;
    function AsArgumentOfFunction(functionType: DNMathFunctionsOfTwoArguments; additionalArgument: string): DNIMathFunction; overload;
    function SetSubscript(subscript: DNIMathElement): DNIMathSubscriptElement; overload;
    function SetSubscript(subscript: string): DNIMathSubscriptElement; overload;
    function SetSuperscript(superscript: DNIMathElement): DNIMathSuperscriptElement; overload;
    function SetSuperscript(superscript: string): DNIMathSuperscriptElement; overload;
    function SetSubSuperscriptOnTheRight(subscript: DNIMathElement; superscript: DNIMathElement): DNIMathRightSubSuperscriptElement; overload;
    function SetSubSuperscriptOnTheRight(subscript: string; superscript: string): DNIMathRightSubSuperscriptElement; overload;
    function SetSubSuperscriptOnTheLeft(subscript: DNIMathElement; superscript: DNIMathElement): DNIMathLeftSubSuperscriptElement; overload;
    function SetSubSuperscriptOnTheLeft(subscript: string; superscript: string): DNIMathLeftSubSuperscriptElement; overload;
    function Radical(degree: DNIMathElement): DNIMathRadical; overload;
    function Radical(degree: string): DNIMathRadical; overload;
    function SetUpperLimit(limit: DNIMathElement): DNIMathLimit; overload;
    function SetUpperLimit(limit: string): DNIMathLimit; overload;
    function SetLowerLimit(limit: DNIMathElement): DNIMathLimit; overload;
    function SetLowerLimit(limit: string): DNIMathLimit; overload;
    function Nary(&type: DNMathNaryOperatorTypes; lowerLimit: DNIMathElement; upperLimit: DNIMathElement): DNIMathNaryOperator; overload;
    function Nary(&type: DNMathNaryOperatorTypes; lowerLimit: string; upperLimit: string): DNIMathNaryOperator; overload;
    function ToMathArray: DNIMathArray;
    function Integral(integralType: DNMathIntegralTypes; lowerLimit: DNIMathElement; upperLimit: DNIMathElement; limitLocations: DNMathLimitLocations): DNIMathNaryOperator; overload;
    function Integral(integralType: DNMathIntegralTypes; lowerLimit: DNIMathElement; upperLimit: DNIMathElement): DNIMathNaryOperator; overload;
    function Integral(integralType: DNMathIntegralTypes): DNIMathNaryOperator; overload;
    function Integral(integralType: DNMathIntegralTypes; lowerLimit: string; upperLimit: string; limitLocations: DNMathLimitLocations): DNIMathNaryOperator; overload;
    function Integral(integralType: DNMathIntegralTypes; lowerLimit: string; upperLimit: string): DNIMathNaryOperator; overload;
    function Accent(accentCharacter: Char): DNIMathAccent;
    function Overbar: DNIMathBar;
    function Underbar: DNIMathBar;
    function Group: DNIMathGroupingCharacter; overload;
    function Group(character: Char; position: DNMathTopBotPositions; verticalJustification: DNMathTopBotPositions): DNIMathGroupingCharacter; overload;
    function ToBorderBox: DNIMathBorderBox; overload;
    function ToBorderBox(hideTop: Boolean; hideBottom: Boolean; hideLeft: Boolean; hideRight: Boolean; strikethroughHorizontal: Boolean; strikethroughVertical: Boolean; strikethroughBottomLeftToTopRight: Boolean; strikethroughTopLeftToBottomRight: Boolean): DNIMathBorderBox; overload;
    function ToBox: DNIMathBox;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Base: DNIMathElement read get_Base;
    property Degree: DNIMathElement read get_Degree;
    property HideDegree: Boolean read get_HideDegree write set_HideDegree;
  end;

  TDNMathRadical = class(TDNGenericImport<DNMathRadicalClass, DNMathRadical>) end;

  //-------------namespace: Aspose.Slides.MathText----------------
  DNMathematicalTextFactoryClass = interface(DNObjectClass)
  ['{A44EFA59-B481-5DA6-BF87-9AE81B20A92B}']
  { constructors } 

    {class} function init: DNMathematicalTextFactory;

  end;

  [DNTypeName('Aspose.Slides.MathText.MathematicalTextFactory')]
  DNMathematicalTextFactory = interface(DNIMathematicalTextFactory)
  ['{37B10373-08FC-44F0-83B1-65DC80395614}']
  { methods } 

    function CreateMathematicalText: DNIMathematicalText; overload;
    function CreateMathematicalText(mathSymbol: Char): DNIMathematicalText; overload;
    function CreateMathematicalText(mathText: string): DNIMathematicalText; overload;
    function CreateMathematicalText(mathText: string; portionFormat: DNIPortionFormat): DNIMathematicalText; overload;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNMathematicalTextFactory = class(TDNGenericImport<DNMathematicalTextFactoryClass, DNMathematicalTextFactory>) end;

  //-------------namespace: Aspose.Slides.MathText----------------
  DNMathFractionFactoryClass = interface(DNObjectClass)
  ['{E05759B8-AC85-5075-8D31-00AC38538A90}']
  { constructors } 

    {class} function init: DNMathFractionFactory;

  end;

  [DNTypeName('Aspose.Slides.MathText.MathFractionFactory')]
  DNMathFractionFactory = interface(DNIMathFractionFactory)
  ['{BC06DF71-66F4-48F8-B50F-3394496AED3D}']
  { methods } 

    function CreateMathFraction(numerator: DNIMathElement; denominator: DNIMathElement; fractionType: DNMathFractionTypes): DNIMathFraction; overload;
    function CreateMathFraction(numerator: DNIMathElement; denominator: DNIMathElement): DNIMathFraction; overload;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNMathFractionFactory = class(TDNGenericImport<DNMathFractionFactoryClass, DNMathFractionFactory>) end;

  //-------------namespace: Aspose.Slides.MathText----------------
  DNMathFunctionFactoryClass = interface(DNObjectClass)
  ['{DECA063F-E709-5EC5-B3D3-69699882862C}']
  { constructors } 

    {class} function init: DNMathFunctionFactory;

  end;

  [DNTypeName('Aspose.Slides.MathText.MathFunctionFactory')]
  DNMathFunctionFactory = interface(DNIMathFunctionFactory)
  ['{FD0C5323-3F57-4512-A4AC-7F261C5D063C}']
  { methods } 

    function CreateMathFunction(funcName: DNIMathElement; baseArgument: DNIMathElement): DNIMathFunction; overload;
    function CreateMathFunction(funcName: string; baseArgument: DNIMathElement): DNIMathFunction; overload;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNMathFunctionFactory = class(TDNGenericImport<DNMathFunctionFactoryClass, DNMathFunctionFactory>) end;

  //-------------namespace: Aspose.Slides.MathText----------------
  DNMathGroupingCharacterFactoryClass = interface(DNObjectClass)
  ['{95468031-2C2F-5BFE-86D1-19B5B6D03FCB}']
  { constructors } 

    {class} function init: DNMathGroupingCharacterFactory;

  end;

  [DNTypeName('Aspose.Slides.MathText.MathGroupingCharacterFactory')]
  DNMathGroupingCharacterFactory = interface(DNIMathGroupingCharacterFactory)
  ['{8A29D4EA-D06C-4BDB-8F61-85E960F68CBE}']
  { methods } 

    function CreateMathGroupingCharacter(element: DNIMathElement; character: Char; position: DNMathTopBotPositions; verticalJustification: DNMathTopBotPositions): DNIMathGroupingCharacter; overload;
    function CreateMathGroupingCharacter(element: DNIMathElement): DNIMathGroupingCharacter; overload;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNMathGroupingCharacterFactory = class(TDNGenericImport<DNMathGroupingCharacterFactoryClass, DNMathGroupingCharacterFactory>) end;

  //-------------namespace: Aspose.Slides.MathText----------------
  DNMathLeftSubSuperscriptElementFactoryClass = interface(DNObjectClass)
  ['{406792F7-4249-5B5E-940C-26975E0C3CE0}']
  { constructors } 

    {class} function init: DNMathLeftSubSuperscriptElementFactory;

  end;

  [DNTypeName('Aspose.Slides.MathText.MathLeftSubSuperscriptElementFactory')]
  DNMathLeftSubSuperscriptElementFactory = interface(DNIMathLeftSubSuperscriptElementFactory)
  ['{CF61F9FD-DBCF-46EA-9D32-B0F499D4C6F8}']
  { methods } 

    function CreateMathLeftSubSuperscriptElement(baseArg: DNIMathElement; subScript: DNIMathElement; superScript: DNIMathElement): DNIMathLeftSubSuperscriptElement;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNMathLeftSubSuperscriptElementFactory = class(TDNGenericImport<DNMathLeftSubSuperscriptElementFactoryClass, DNMathLeftSubSuperscriptElementFactory>) end;

  //-------------namespace: Aspose.Slides.MathText----------------
  DNMathLimitFactoryClass = interface(DNObjectClass)
  ['{C3F8DF8B-748E-501A-A805-2D9962F7A5BD}']
  { constructors } 

    {class} function init: DNMathLimitFactory;

  end;

  [DNTypeName('Aspose.Slides.MathText.MathLimitFactory')]
  DNMathLimitFactory = interface(DNIMathLimitFactory)
  ['{9B864B6C-754E-4A1F-BEFC-66AE0CF7803C}']
  { methods } 

    function CreateMathLimit(baseArg: DNIMathElement; limit: DNIMathElement; upperLimit: Boolean): DNIMathLimit; overload;
    function CreateMathLimit(baseArg: DNIMathElement; limit: DNIMathElement): DNIMathLimit; overload;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNMathLimitFactory = class(TDNGenericImport<DNMathLimitFactoryClass, DNMathLimitFactory>) end;

  //-------------namespace: Aspose.Slides.MathText----------------
  DNMathMatrixFactoryClass = interface(DNObjectClass)
  ['{36BBEA1A-130A-5EAF-AC41-A87D2CC3078F}']
  { constructors } 

    {class} function init: DNMathMatrixFactory;

  end;

  [DNTypeName('Aspose.Slides.MathText.MathMatrixFactory')]
  DNMathMatrixFactory = interface(DNIMathMatrixFactory)
  ['{DF98A30E-E6BA-40D8-AB4E-B3AC12309B35}']
  { methods } 

    function CreateMathMatrix(rowCount: Int32; columnCount: Int32): DNIMathMatrix;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNMathMatrixFactory = class(TDNGenericImport<DNMathMatrixFactoryClass, DNMathMatrixFactory>) end;

  //-------------namespace: Aspose.Slides.MathText----------------
  DNMathNaryOperatorFactoryClass = interface(DNObjectClass)
  ['{CE21597C-2D22-508B-A3AA-5B6AC2FBC7CB}']
  { constructors } 

    {class} function init: DNMathNaryOperatorFactory;

  end;

  [DNTypeName('Aspose.Slides.MathText.MathNaryOperatorFactory')]
  DNMathNaryOperatorFactory = interface(DNIMathNaryOperatorFactory)
  ['{8E7E895D-CD85-4E6C-ABEC-A5FA03A7CFE9}']
  { methods } 

    function CreateMathNaryOperator(operatorSymbol: Char; baseArgument: DNIMathElement; lowerLimit: DNIMathElement; upperLimit: DNIMathElement): DNIMathNaryOperator; overload;
    function CreateMathNaryOperator(operatorSymbol: Char; baseArgument: DNIMathElement; lowerLimit: DNIMathElement): DNIMathNaryOperator; overload;
    function CreateMathNaryOperator(operatorSymbol: Char; baseArgument: DNIMathElement): DNIMathNaryOperator; overload;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNMathNaryOperatorFactory = class(TDNGenericImport<DNMathNaryOperatorFactoryClass, DNMathNaryOperatorFactory>) end;

  //-------------namespace: Aspose.Slides.MathText----------------
  DNMathParagraphClass = interface(DNObjectClass)
  ['{9537BF4B-E444-55A5-9163-3296B411E344}']
  { constructors } 

    {class} function init: DNMathParagraph; overload;
    {class} function init(mathBlock: DNIMathBlock): DNMathParagraph; overload;

  end;

  [DNTypeName('Aspose.Slides.MathText.MathParagraph')]
  DNMathParagraph = interface(DDN.mscorlib.DNIEnumerable)
  ['{E2173ACA-B662-4556-9118-81A3CF0F2C88}']
  { getters & setters } 

    function get_Justification: DNMathJustification;
    procedure set_Justification(value: DNMathJustification);
    function get_Count: Int32;

  { methods } 

    function &Contains(mathBlock: DNIMathBlock): Boolean;
    function IndexOf(mathBlock: DNIMathBlock): Int32;
    procedure Insert(index: Int32; mathBlock: DNIMathBlock);
    procedure RemoveAt(index: Int32);
    procedure WriteAsMathMl(stream: DDN.mscorlib.DNStream);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Justification: DNMathJustification read get_Justification write set_Justification;
    property Count: Int32 read get_Count;
  end;

  TDNMathParagraph = class(TDNGenericImport<DNMathParagraphClass, DNMathParagraph>) end;

  //-------------namespace: Aspose.Slides.MathText----------------
  DNMathParagraphFactoryClass = interface(DNObjectClass)
  ['{78DECC79-C353-5AFA-A515-C54FA36F5539}']
  { constructors } 

    {class} function init: DNMathParagraphFactory;

  end;

  [DNTypeName('Aspose.Slides.MathText.MathParagraphFactory')]
  DNMathParagraphFactory = interface(DNIMathParagraphFactory)
  ['{59FEE207-5835-4359-96B7-3B0CCC62A3D8}']
  { methods } 

    function CreateMathParagraph: DNIMathParagraph; overload;
    function CreateMathParagraph(mathBlock: DNIMathBlock): DNIMathParagraph; overload;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNMathParagraphFactory = class(TDNGenericImport<DNMathParagraphFactoryClass, DNMathParagraphFactory>) end;

  //-------------namespace: Aspose.Slides.MathText----------------
  DNMathRadicalFactoryClass = interface(DNObjectClass)
  ['{9812C24D-F9F7-5F04-A4B4-2B22EF82B9ED}']
  { constructors } 

    {class} function init: DNMathRadicalFactory;

  end;

  [DNTypeName('Aspose.Slides.MathText.MathRadicalFactory')]
  DNMathRadicalFactory = interface(DNIMathRadicalFactory)
  ['{DCF2ADA6-CF56-4ADB-AAE6-0CA7681FA464}']
  { methods } 

    function CreateMathRadical(baseArgument: DNIMathElement; degreeArgument: DNIMathElement): DNIMathRadical;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNMathRadicalFactory = class(TDNGenericImport<DNMathRadicalFactoryClass, DNMathRadicalFactory>) end;

  //-------------namespace: Aspose.Slides.MathText----------------
  DNMathRightSubSuperscriptElementFactoryClass = interface(DNObjectClass)
  ['{DFA9B279-296D-51C3-9BFD-59E5ECF25213}']
  { constructors } 

    {class} function init: DNMathRightSubSuperscriptElementFactory;

  end;

  [DNTypeName('Aspose.Slides.MathText.MathRightSubSuperscriptElementFactory')]
  DNMathRightSubSuperscriptElementFactory = interface(DNIMathRightSubSuperscriptElementFactory)
  ['{6DC32072-9866-4C68-8E0D-D00634D98999}']
  { methods } 

    function CreateMathRightSubSuperscriptElement(baseArg: DNIMathElement; subScript: DNIMathElement; superScript: DNIMathElement): DNIMathRightSubSuperscriptElement;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNMathRightSubSuperscriptElementFactory = class(TDNGenericImport<DNMathRightSubSuperscriptElementFactoryClass, DNMathRightSubSuperscriptElementFactory>) end;

  //-------------namespace: Aspose.Slides.MathText----------------
  DNMathSubscriptElementFactoryClass = interface(DNObjectClass)
  ['{98387BC0-C4B2-534B-A967-209D2FC9560E}']
  { constructors } 

    {class} function init: DNMathSubscriptElementFactory;

  end;

  [DNTypeName('Aspose.Slides.MathText.MathSubscriptElementFactory')]
  DNMathSubscriptElementFactory = interface(DNIMathSubscriptElementFactory)
  ['{820AEA07-3E4F-4903-8832-66C31D4A65F5}']
  { methods } 

    function CreateMathSubscriptElement(baseArg: DNIMathElement; subScript: DNIMathElement): DNIMathSubscriptElement;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNMathSubscriptElementFactory = class(TDNGenericImport<DNMathSubscriptElementFactoryClass, DNMathSubscriptElementFactory>) end;

  //-------------namespace: Aspose.Slides.MathText----------------
  DNMathSuperscriptElementFactoryClass = interface(DNObjectClass)
  ['{1AC9A764-0416-549B-BFFA-DDFC856D387F}']
  { constructors } 

    {class} function init: DNMathSuperscriptElementFactory;

  end;

  [DNTypeName('Aspose.Slides.MathText.MathSuperscriptElementFactory')]
  DNMathSuperscriptElementFactory = interface(DNIMathSuperscriptElementFactory)
  ['{BF79794D-8E6B-4D0B-873B-B75D746B96C0}']
  { methods } 

    function CreateMathSuperscriptElement(baseArg: DNIMathElement; superScript: DNIMathElement): DNIMathSuperscriptElement;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNMathSuperscriptElementFactory = class(TDNGenericImport<DNMathSuperscriptElementFactoryClass, DNMathSuperscriptElementFactory>) end;

  //-------------namespace: Aspose.Slides----------------
  DNMeteredClass = interface(DDN.mscorlib.DNObjectClass)
  ['{D38E8EAF-3C4F-5DAD-A0F5-7FB73061EA0C}']
  { constructors } 

    {class} function init: DNMetered;

  { static methods } 

    {class} function GetConsumptionQuantity: DDN.mscorlib.DNDecimal;
    {class} function GetConsumptionCredit: DDN.mscorlib.DNDecimal;

  end;

  [DNTypeName('Aspose.Slides.Metered')]
  DNMetered = interface(DDN.mscorlib.DNObject)
  ['{D9EB26C5-DDB7-48E3-BCA5-D5487DE81E31}']
  { methods } 

    procedure SetMeteredKey(publicKey: string; privateKey: string);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNMetered = class(TDNGenericImport<DNMeteredClass, DNMetered>) end;

  //-------------namespace: Aspose.Slides----------------
  DNNormalViewPropertiesClass = interface(DNObjectClass)
  ['{023398C7-0A45-5D6D-B872-67CE3960A564}']
  end;

  [DNTypeName('Aspose.Slides.NormalViewProperties')]
  DNNormalViewProperties = interface(DNINormalViewProperties)
  ['{1E2AA737-F321-4E49-A78D-791209AF8BD3}']
  { getters & setters } 

    function get_ShowOutlineIcons: Boolean;
    procedure set_ShowOutlineIcons(value: Boolean);
    function get_SnapVerticalSplitter: Boolean;
    procedure set_SnapVerticalSplitter(value: Boolean);
    function get_VerticalBarState: DNSplitterBarStateType;
    procedure set_VerticalBarState(value: DNSplitterBarStateType);
    function get_HorizontalBarState: DNSplitterBarStateType;
    procedure set_HorizontalBarState(value: DNSplitterBarStateType);
    function get_PreferSingleView: Boolean;
    procedure set_PreferSingleView(value: Boolean);
    function get_RestoredLeft: DNINormalViewRestoredProperties;
    function get_RestoredTop: DNINormalViewRestoredProperties;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property ShowOutlineIcons: Boolean read get_ShowOutlineIcons write set_ShowOutlineIcons;
    property SnapVerticalSplitter: Boolean read get_SnapVerticalSplitter write set_SnapVerticalSplitter;
    property VerticalBarState: DNSplitterBarStateType read get_VerticalBarState write set_VerticalBarState;
    property HorizontalBarState: DNSplitterBarStateType read get_HorizontalBarState write set_HorizontalBarState;
    property PreferSingleView: Boolean read get_PreferSingleView write set_PreferSingleView;
    property RestoredLeft: DNINormalViewRestoredProperties read get_RestoredLeft;
    property RestoredTop: DNINormalViewRestoredProperties read get_RestoredTop;
  end;

  TDNNormalViewProperties = class(TDNGenericImport<DNNormalViewPropertiesClass, DNNormalViewProperties>) end;

  //-------------namespace: Aspose.Slides----------------
  DNNormalViewRestoredPropertiesClass = interface(DNObjectClass)
  ['{80573F27-FCD2-5754-858C-C1A8285BC915}']
  end;

  [DNTypeName('Aspose.Slides.NormalViewRestoredProperties')]
  DNNormalViewRestoredProperties = interface(DNINormalViewRestoredProperties)
  ['{0BBAD280-C35E-30CD-B0DE-43AE9AA45F2B}']
  { getters & setters } 

    function get_DimensionSize: Single;
    procedure set_DimensionSize(value: Single);
    function get_AutoAdjust: Boolean;
    procedure set_AutoAdjust(value: Boolean);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property DimensionSize: Single read get_DimensionSize write set_DimensionSize;
    property AutoAdjust: Boolean read get_AutoAdjust write set_AutoAdjust;
  end;

  TDNNormalViewRestoredProperties = class(TDNGenericImport<DNNormalViewRestoredPropertiesClass, DNNormalViewRestoredProperties>) end;

  //-------------namespace: Aspose.Slides----------------
  DNNotesSizeClass = interface(DNObjectClass)
  ['{F1CA171F-20C8-5209-899D-C7DF638FCF90}']
  { constructors } 

    {class} function init: DNNotesSize;

  end;

  [DNTypeName('Aspose.Slides.NotesSize')]
  DNNotesSize = interface(DNINotesSize)
  ['{18301B63-E99F-4EC1-B6F9-00B386636C6D}']
  { getters & setters } 

    function get_Size: DDN.System.Drawing.DNSizeF;
    procedure set_Size(value: DDN.System.Drawing.DNSizeF);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Size: DDN.System.Drawing.DNSizeF read get_Size write set_Size;
  end;

  TDNNotesSize = class(TDNGenericImport<DNNotesSizeClass, DNNotesSize>) end;

  //-------------namespace: Aspose.Slides----------------
  DNNotesSlideManagerClass = interface(DDN.mscorlib.DNObjectClass)
  ['{9BD59D7E-7EDD-5BF6-818D-5AD0647ECFB2}']
  end;

  [DNTypeName('Aspose.Slides.NotesSlideManager')]
  DNNotesSlideManager = interface(DDN.mscorlib.DNObject)
  ['{3E44ADC7-123A-3737-933A-7598B33592AB}']
  { getters & setters } 

    function get_NotesSlide: DNINotesSlide;

  { methods } 

    function AddNotesSlide: DNINotesSlide;
    procedure RemoveNotesSlide;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property NotesSlide: DNINotesSlide read get_NotesSlide;
  end;

  TDNNotesSlideManager = class(TDNGenericImport<DNNotesSlideManagerClass, DNNotesSlideManager>) end;

  //-------------namespace: Aspose.Slides----------------
  DNParagraphClass = interface(DDN.mscorlib.DNObjectClass)
  ['{58A62781-603A-5AD4-B164-024BFD403399}']
  { constructors } 

    {class} function init: DNParagraph; overload;
    {class} function init(para: DNParagraph): DNParagraph; overload;

  end;

  [DNTypeName('Aspose.Slides.Paragraph')]
  DNParagraph = interface(DDN.mscorlib.DNObject)
  ['{13A09689-4561-4EB0-AD64-BD08927115E2}']
  { getters & setters } 

    function get_Portions: DNIPortionCollection;
    function get_ParagraphFormat: DNIParagraphFormat;
    function get_Text: string;
    procedure set_Text(value: string);
    function get_EndParagraphPortionFormat: DNIPortionFormat;
    procedure set_EndParagraphPortionFormat(value: DNIPortionFormat);

  { methods } 

    procedure JoinPortionsWithSameFormatting;
    function GetRect: DDN.System.Drawing.DNRectangleF;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Portions: DNIPortionCollection read get_Portions;
    property ParagraphFormat: DNIParagraphFormat read get_ParagraphFormat;
    property Text: string read get_Text write set_Text;
    property EndParagraphPortionFormat: DNIPortionFormat read get_EndParagraphPortionFormat write set_EndParagraphPortionFormat;
  end;

  TDNParagraph = class(TDNGenericImport<DNParagraphClass, DNParagraph>) end;

  //-------------namespace: Aspose.Slides----------------
  DNParagraphCollectionClass = interface(DDN.mscorlib.DNObjectClass)
  ['{7115FD65-9DEE-585A-A01F-2B49408D319A}']
  end;

  [DNTypeName('Aspose.Slides.ParagraphCollection')]
  DNParagraphCollection = interface(DDN.mscorlib.DNObject)
  ['{15B212AE-8349-3A81-9C8E-0F90C56C4489}']
  { getters & setters } 

    function get_Count: Int32;
    function get_IsReadOnly: Boolean;

  { methods } 

    function IndexOf(item: DNIParagraph): Int32;
    procedure Insert(index: Int32; value: DNIParagraph); overload;
    procedure Insert(index: Int32; value: DNIParagraphCollection); overload;
    function &Contains(item: DNIParagraph): Boolean;
    procedure CopyTo(&array: TArray<DNIParagraph>; arrayIndex: Int32);
    procedure RemoveAt(index: Int32);
    function GetEnumerator: DDN.mscorlib.DNIEnumerator<DNIParagraph>;
    procedure AddFromHtml(text: string); overload;
    procedure AddFromHtml(text: string; resolver: DNIExternalResourceResolver; uri: string); overload;
    function ExportToHtml(firstParagraphIndex: Int32; paragraphsCount: Int32; options: DNITextToHtmlConversionOptions): string;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Count: Int32 read get_Count;
    property IsReadOnly: Boolean read get_IsReadOnly;
  end;

  TDNParagraphCollection = class(TDNGenericImport<DNParagraphCollectionClass, DNParagraphCollection>) end;

  //-------------namespace: Aspose.Slides----------------
  DNParagraphFactoryClass = interface(DNObjectClass)
  ['{C35E7932-C551-5B67-B2CA-ABFD4EFFC783}']
  { constructors } 

    {class} function init: DNParagraphFactory;

  end;

  [DNTypeName('Aspose.Slides.ParagraphFactory')]
  DNParagraphFactory = interface(DNIParagraphFactory)
  ['{433F6A50-4B40-4049-9A8D-430AB48DD0DC}']
  { methods } 

    function CreateParagraph: DNIParagraph; overload;
    function CreateParagraph(paragraph: DNIParagraph): DNIParagraph; overload;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNParagraphFactory = class(TDNGenericImport<DNParagraphFactoryClass, DNParagraphFactory>) end;

  //-------------namespace: Aspose.Slides----------------
  DNPathSegmentClass = interface(DNObjectClass)
  ['{C5AAD654-DAB6-53C8-9FD4-A79B3BB1CDF5}']
  end;

  [DNTypeName('Aspose.Slides.PathSegment')]
  DNPathSegment = interface(DNIPathSegment)
  ['{53E6B81D-F33F-4A32-BAF2-3866B524CB25}']
  { getters & setters } 

    function get_SegmentData: TArray<Single>;
    function get_PathCommand: DNPathCommandType;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property SegmentData: TArray<Single> read get_SegmentData;
    property PathCommand: DNPathCommandType read get_PathCommand;
  end;

  TDNPathSegment = class(TDNGenericImport<DNPathSegmentClass, DNPathSegment>) end;

  //-------------namespace: Aspose.Slides----------------
  DNPlaceholderClass = interface(DNObjectClass)
  ['{6C2AB41C-82CA-50CC-B0DA-F81CA0E3EFDB}']
  end;

  [DNTypeName('Aspose.Slides.Placeholder')]
  DNPlaceholder = interface(DNIPlaceholder)
  ['{F18B3BFC-E6A5-32F2-AED6-62971D7D103D}']
  { getters & setters } 

    function get_Orientation: DNOrientation;
    function get_Size: DNPlaceholderSize;
    function get_Type: DNPlaceholderType;
    function get_Index: UInt32;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Orientation: DNOrientation read get_Orientation;
    property Size: DNPlaceholderSize read get_Size;
    property &Type: DNPlaceholderType read get_Type;
    property Index: UInt32 read get_Index;
  end;

  TDNPlaceholder = class(TDNGenericImport<DNPlaceholderClass, DNPlaceholder>) end;

  //-------------namespace: Aspose.Slides----------------
  DNPortionClass = interface(DDN.mscorlib.DNObjectClass)
  ['{6B18AED7-A65F-5EB2-8E39-26E59BC95C26}']
  { constructors } 

    {class} function init: DNPortion; overload;
    {class} function init(str: string): DNPortion; overload;
    {class} function init(portion: DNPortion): DNPortion; overload;

  end;

  [DNTypeName('Aspose.Slides.Portion')]
  DNPortion = interface(DDN.mscorlib.DNObject)
  ['{657E9B28-2FD4-4FC5-BF8B-31F8FFF8A08C}']
  { getters & setters } 

    function get_PortionFormat: DNIPortionFormat;
    function get_Text: string;
    procedure set_Text(value: string);
    function get_Field: DNIField;

  { methods } 

    procedure AddField(fieldType: DNIFieldType); overload;
    procedure AddField(internalString: string); overload;
    procedure RemoveField;
    function GetRect: DDN.System.Drawing.DNRectangleF;
    function GetCoordinates: DDN.System.Drawing.DNPointF;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property PortionFormat: DNIPortionFormat read get_PortionFormat;
    property Text: string read get_Text write set_Text;
    property Field: DNIField read get_Field;
  end;

  TDNPortion = class(TDNGenericImport<DNPortionClass, DNPortion>) end;

  //-------------namespace: Aspose.Slides.MathText----------------
  DNMathPortionClass = interface(DNPortionClass)
  ['{EA98B7C0-3356-5F3D-80C2-88685F82ACD6}']
  { constructors } 

    {class} function init: DNMathPortion;

  end;

  [DNTypeName('Aspose.Slides.MathText.MathPortion')]
  DNMathPortion = interface(DNPortion)
  ['{6DC78CB1-FAEC-43FE-9A6A-CBCDDC36074F}']
  { getters & setters } 

    function get_MathParagraph: DNIMathParagraph;
    function get_PortionFormat: DNIPortionFormat;
    function get_Text: string;
    procedure set_Text(value: string);
    function get_Field: DNIField;

  { methods } 

    procedure AddField(fieldType: DNIFieldType); overload;
    procedure AddField(internalString: string); overload;
    procedure RemoveField;
    function GetRect: DDN.System.Drawing.DNRectangleF;
    function GetCoordinates: DDN.System.Drawing.DNPointF;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property MathParagraph: DNIMathParagraph read get_MathParagraph;
    property PortionFormat: DNIPortionFormat read get_PortionFormat;
    property Text: string read get_Text write set_Text;
    property Field: DNIField read get_Field;
  end;

  TDNMathPortion = class(TDNGenericImport<DNMathPortionClass, DNMathPortion>) end;

  //-------------namespace: Aspose.Slides----------------
  DNPortionCollectionClass = interface(DNObjectClass)
  ['{54D7A6B3-3653-555E-B88A-5F70F4409CF6}']
  end;

  [DNTypeName('Aspose.Slides.PortionCollection')]
  DNPortionCollection = interface(DDN.mscorlib.DNIEnumerable)
  ['{A211D181-B29E-39ED-8898-99117BD68F04}']
  { getters & setters } 

    function get_Count: Int32;
    function get_IsReadOnly: Boolean;

  { methods } 

    function IndexOf(item: DNIPortion): Int32;
    procedure Insert(index: Int32; value: DNIPortion);
    function &Contains(item: DNIPortion): Boolean;
    procedure CopyTo(&array: TArray<DNIPortion>; arrayIndex: Int32);
    procedure RemoveAt(index: Int32);
    function GetEnumerator: DDN.mscorlib.DNIEnumerator<DNIPortion>;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Count: Int32 read get_Count;
    property IsReadOnly: Boolean read get_IsReadOnly;
  end;

  TDNPortionCollection = class(TDNGenericImport<DNPortionCollectionClass, DNPortionCollection>) end;

  //-------------namespace: Aspose.Slides----------------
  DNPortionFactoryClass = interface(DNObjectClass)
  ['{56A70E0B-88AA-5519-A623-28A927C28A90}']
  { constructors } 

    {class} function init: DNPortionFactory;

  end;

  [DNTypeName('Aspose.Slides.PortionFactory')]
  DNPortionFactory = interface(DNIPortionFactory)
  ['{F167E33E-B57B-4CDF-82D8-A93A0076FB2B}']
  { methods } 

    function CreatePortion: DNIPortion; overload;
    function CreatePortion(str: string): DNIPortion; overload;
    function CreatePortion(portion: DNIPortion): DNIPortion; overload;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNPortionFactory = class(TDNGenericImport<DNPortionFactoryClass, DNPortionFactory>) end;

  //-------------namespace: Aspose.Slides----------------
  DNPPImageClass = interface(DNObjectClass)
  ['{F056F7CD-2F17-5035-910B-925E7FD57B74}']
  end;

  [DNTypeName('Aspose.Slides.PPImage')]
  DNPPImage = interface(DDN.mscorlib.DNIDisposable)
  ['{476F193F-99DD-38D0-BD14-0B69CBE6DD5E}']
  { getters & setters } 

    function get_BinaryData: TArray<Byte>;
    function get_SystemImage: DDN.System.Drawing.DNImage;
    function get_SvgImage: DNISvgImage;
    procedure set_SvgImage(value: DNISvgImage);
    function get_ContentType: string;
    function get_Width: Int32;
    function get_Height: Int32;
    function get_X: Int32;
    function get_Y: Int32;

  { methods } 

    procedure ReplaceImage(newImageData: TArray<Byte>); overload;
    procedure ReplaceImage(newImage: DDN.System.Drawing.DNImage); overload;
    procedure ReplaceImage(newImage: DNIPPImage); overload;
    function GetHashCode: Int32;
    procedure Dispose;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property BinaryData: TArray<Byte> read get_BinaryData;
    property SystemImage: DDN.System.Drawing.DNImage read get_SystemImage;
    property SvgImage: DNISvgImage read get_SvgImage write set_SvgImage;
    property ContentType: string read get_ContentType;
    property Width: Int32 read get_Width;
    property Height: Int32 read get_Height;
    property X: Int32 read get_X;
    property Y: Int32 read get_Y;
  end;

  TDNPPImage = class(TDNGenericImport<DNPPImageClass, DNPPImage>) end;

  //-------------namespace: Aspose.Slides----------------
  DNPresentationClass = interface(DNObjectClass)
  ['{634263A3-BDD0-53D8-87B9-1A146A317B68}']
  { constructors } 

    {class} function init: DNPresentation; overload;
    {class} function init(loadOptions: DNLoadOptions): DNPresentation; overload;
    {class} function init(stream: DDN.mscorlib.DNStream): DNPresentation; overload;
    {class} function init(stream: DDN.mscorlib.DNStream; loadOptions: DNLoadOptions): DNPresentation; overload;
    {class} function init(&file: string): DNPresentation; overload;
    {class} function init(&file: string; loadOptions: DNLoadOptions): DNPresentation; overload;

  end;

  [DNTypeName('Aspose.Slides.Presentation')]
  DNPresentation = interface(DDN.mscorlib.DNIDisposable)
  ['{43247D92-4BB9-4883-B807-4B77B186C741}']
  { getters & setters } 

    function get_CurrentDateTime: DDN.mscorlib.DNDateTime;
    procedure set_CurrentDateTime(value: DDN.mscorlib.DNDateTime);
    function get_HeaderFooterManager: DNIPresentationHeaderFooterManager;
    function get_ProtectionManager: DNIProtectionManager;
    function get_Slides: DNISlideCollection;
    function get_Sections: DNISectionCollection;
    function get_SlideSize: DNISlideSize;
    function get_NotesSize: DNINotesSize;
    function get_LayoutSlides: DNIGlobalLayoutSlideCollection;
    function get_Masters: DNIMasterSlideCollection;
    function get_MasterNotesSlideManager: DNIMasterNotesSlideManager;
    function get_MasterHandoutSlideManager: DNIMasterHandoutSlideManager;
    function get_FontsManager: DNIFontsManager;
    function get_DefaultTextStyle: DNITextStyle;
    function get_CommentAuthors: DNICommentAuthorCollection;
    function get_DocumentProperties: DNIDocumentProperties;
    function get_Images: DNIImageCollection;
    function get_Audios: DNIAudioCollection;
    function get_Videos: DNIVideoCollection;
    function get_DigitalSignatures: DNIDigitalSignatureCollection;
    function get_CustomData: DNICustomData;
    function get_AllCustomXmlParts: TArray<DNICustomXmlPart>;
    function get_VbaProject: DNIVbaProject;
    procedure set_VbaProject(value: DNIVbaProject);
    function get_HyperlinkQueries: DNIHyperlinkQueries;
    function get_ViewProperties: DNIViewProperties;
    function get_FirstSlideNumber: Int32;
    procedure set_FirstSlideNumber(value: Int32);
    function get_SourceFormat: DNSourceFormat;
    function get_MasterTheme: DNIMasterTheme;

  { methods } 

    function GetSlideById(id: UInt32): DNIBaseSlide;
    procedure Save(fname: string; format: DNSaveFormat); overload;
    procedure Save(stream: DDN.mscorlib.DNStream; format: DNSaveFormat); overload;
    procedure Save(fname: string; format: DNSaveFormat; options: DNISaveOptions); overload;
    procedure Save(stream: DDN.mscorlib.DNStream; format: DNSaveFormat; options: DNISaveOptions); overload;
    procedure Save(options: DNIXamlOptions); overload;
    function GetThumbnails(notesCommentsLayouting: DNINotesCommentsLayoutingOptions): TArray<DDN.System.Drawing.DNBitmap>; overload;
    function GetThumbnails(notesCommentsLayouting: DNINotesCommentsLayoutingOptions; slides: TArray<Int32>): TArray<DDN.System.Drawing.DNBitmap>; overload;
    function GetThumbnails(notesCommentsLayouting: DNINotesCommentsLayoutingOptions; scaleX: Single; scaleY: Single): TArray<DDN.System.Drawing.DNBitmap>; overload;
    function GetThumbnails(notesCommentsLayouting: DNINotesCommentsLayoutingOptions; slides: TArray<Int32>; scaleX: Single; scaleY: Single): TArray<DDN.System.Drawing.DNBitmap>; overload;
    function GetThumbnails(notesCommentsLayouting: DNINotesCommentsLayoutingOptions; imageSize: DDN.System.Drawing.DNSize): TArray<DDN.System.Drawing.DNBitmap>; overload;
    function GetThumbnails(notesCommentsLayouting: DNINotesCommentsLayoutingOptions; slides: TArray<Int32>; imageSize: DDN.System.Drawing.DNSize): TArray<DDN.System.Drawing.DNBitmap>; overload;
    function GetThumbnails(options: DNIRenderingOptions): TArray<DDN.System.Drawing.DNBitmap>; overload;
    function GetThumbnails(options: DNIRenderingOptions; slides: TArray<Int32>): TArray<DDN.System.Drawing.DNBitmap>; overload;
    function GetThumbnails(options: DNIRenderingOptions; scaleX: Single; scaleY: Single): TArray<DDN.System.Drawing.DNBitmap>; overload;
    function GetThumbnails(options: DNIRenderingOptions; slides: TArray<Int32>; scaleX: Single; scaleY: Single): TArray<DDN.System.Drawing.DNBitmap>; overload;
    function GetThumbnails(options: DNIRenderingOptions; imageSize: DDN.System.Drawing.DNSize): TArray<DDN.System.Drawing.DNBitmap>; overload;
    function GetThumbnails(options: DNIRenderingOptions; slides: TArray<Int32>; imageSize: DDN.System.Drawing.DNSize): TArray<DDN.System.Drawing.DNBitmap>; overload;
    procedure Save(fname: string; slides: TArray<Int32>; format: DNSaveFormat); overload;
    procedure Save(fname: string; slides: TArray<Int32>; format: DNSaveFormat; options: DNISaveOptions); overload;
    procedure Save(stream: DDN.mscorlib.DNStream; slides: TArray<Int32>; format: DNSaveFormat); overload;
    procedure Save(stream: DDN.mscorlib.DNStream; slides: TArray<Int32>; format: DNSaveFormat; options: DNISaveOptions); overload;
    procedure Print; overload;
    procedure Print(printerSettings: DDN.System.Drawing.DNPrinterSettings); overload;
    procedure Print(printerName: string); overload;
    procedure Print(printerSettings: DDN.System.Drawing.DNPrinterSettings; presName: string); overload;
    procedure JoinPortionsWithSameFormatting;
    procedure Dispose;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property CurrentDateTime: DDN.mscorlib.DNDateTime read get_CurrentDateTime write set_CurrentDateTime;
    property HeaderFooterManager: DNIPresentationHeaderFooterManager read get_HeaderFooterManager;
    property ProtectionManager: DNIProtectionManager read get_ProtectionManager;
    property Slides: DNISlideCollection read get_Slides;
    property Sections: DNISectionCollection read get_Sections;
    property SlideSize: DNISlideSize read get_SlideSize;
    property NotesSize: DNINotesSize read get_NotesSize;
    property LayoutSlides: DNIGlobalLayoutSlideCollection read get_LayoutSlides;
    property Masters: DNIMasterSlideCollection read get_Masters;
    property MasterNotesSlideManager: DNIMasterNotesSlideManager read get_MasterNotesSlideManager;
    property MasterHandoutSlideManager: DNIMasterHandoutSlideManager read get_MasterHandoutSlideManager;
    property FontsManager: DNIFontsManager read get_FontsManager;
    property DefaultTextStyle: DNITextStyle read get_DefaultTextStyle;
    property CommentAuthors: DNICommentAuthorCollection read get_CommentAuthors;
    property DocumentProperties: DNIDocumentProperties read get_DocumentProperties;
    property Images: DNIImageCollection read get_Images;
    property Audios: DNIAudioCollection read get_Audios;
    property Videos: DNIVideoCollection read get_Videos;
    property DigitalSignatures: DNIDigitalSignatureCollection read get_DigitalSignatures;
    property CustomData: DNICustomData read get_CustomData;
    property AllCustomXmlParts: TArray<DNICustomXmlPart> read get_AllCustomXmlParts;
    property VbaProject: DNIVbaProject read get_VbaProject write set_VbaProject;
    property HyperlinkQueries: DNIHyperlinkQueries read get_HyperlinkQueries;
    property ViewProperties: DNIViewProperties read get_ViewProperties;
    property FirstSlideNumber: Int32 read get_FirstSlideNumber write set_FirstSlideNumber;
    property SourceFormat: DNSourceFormat read get_SourceFormat;
    property MasterTheme: DNIMasterTheme read get_MasterTheme;
  end;

  TDNPresentation = class(TDNGenericImport<DNPresentationClass, DNPresentation>) end;

  //-------------namespace: Aspose.Slides----------------
  DNPresentationFactoryClass = interface(DNObjectClass)
  ['{84BF782C-6BDF-5C17-8719-A7CA552483A4}']
  { static getter & setter } 

    {class} function get_Instance: DNPresentationFactory;

  { constructors } 

    {class} function init: DNPresentationFactory;

  { static propertys } 

    {class} property Instance: DNPresentationFactory read get_Instance;
  end;

  [DNTypeName('Aspose.Slides.PresentationFactory')]
  DNPresentationFactory = interface(DNIPresentationFactory)
  ['{AE237AFA-7B05-4DA4-BED3-654F6F09FD82}']
  { methods } 

    function CreatePresentation: DNIPresentation; overload;
    function CreatePresentation(options: DNILoadOptions): DNIPresentation; overload;
    function GetPresentationInfo(&file: string): DNIPresentationInfo; overload;
    function GetPresentationInfo(stream: DDN.mscorlib.DNStream): DNIPresentationInfo; overload;
    function ReadPresentation(data: TArray<Byte>): DNIPresentation; overload;
    function ReadPresentation(data: TArray<Byte>; options: DNILoadOptions): DNIPresentation; overload;
    function ReadPresentation(stream: DDN.mscorlib.DNStream): DNIPresentation; overload;
    function ReadPresentation(stream: DDN.mscorlib.DNStream; options: DNILoadOptions): DNIPresentation; overload;
    function ReadPresentation(&file: string): DNIPresentation; overload;
    function ReadPresentation(&file: string; options: DNILoadOptions): DNIPresentation; overload;
    function GetPresentationText(&file: string; mode: DNTextExtractionArrangingMode): DNIPresentationText; overload;
    function GetPresentationText(stream: DDN.mscorlib.DNStream; mode: DNTextExtractionArrangingMode): DNIPresentationText; overload;
    function GetPresentationText(stream: DDN.mscorlib.DNStream; mode: DNTextExtractionArrangingMode; options: DNILoadOptions): DNIPresentationText; overload;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNPresentationFactory = class(TDNGenericImport<DNPresentationFactoryClass, DNPresentationFactory>) end;

  //-------------namespace: Aspose.Slides----------------
  DNPresentationInfoClass = interface(DNObjectClass)
  ['{2530B6D1-2DF8-5C9C-AC96-3DF1526E907A}']
  end;

  [DNTypeName('Aspose.Slides.PresentationInfo')]
  DNPresentationInfo = interface(DNIPresentationInfo)
  ['{6A446241-F30E-40A2-8555-9B263D9C9F72}']
  { getters & setters } 

    function get_IsEncrypted: Boolean;
    function get_IsPasswordProtected: Boolean;
    function get_IsWriteProtected: DNNullableBool;
    function get_LoadFormat: DNLoadFormat;

  { methods } 

    function CheckPassword(password: string): Boolean;
    function CheckWriteProtection(password: string): Boolean;
    function ReadDocumentProperties: DNIDocumentProperties;
    procedure UpdateDocumentProperties(documentProperties: DNIDocumentProperties);
    procedure WriteBindedPresentation(stream: DDN.mscorlib.DNStream); overload;
    procedure WriteBindedPresentation(&file: string); overload;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property IsEncrypted: Boolean read get_IsEncrypted;
    property IsPasswordProtected: Boolean read get_IsPasswordProtected;
    property IsWriteProtected: DNNullableBool read get_IsWriteProtected;
    property LoadFormat: DNLoadFormat read get_LoadFormat;
  end;

  TDNPresentationInfo = class(TDNGenericImport<DNPresentationInfoClass, DNPresentationInfo>) end;

  //-------------namespace: Aspose.Slides----------------
  DNPresentationTextClass = interface(DNObjectClass)
  ['{8841DF94-FF6C-573E-8E44-F2F05CE4C92B}']
  end;

  [DNTypeName('Aspose.Slides.PresentationText')]
  DNPresentationText = interface(DNIPresentationText)
  ['{EFE29F04-5845-4A27-829B-AF1BFBE5B322}']
  { getters & setters } 

    function get_SlidesText: TArray<DNISlideText>;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property SlidesText: TArray<DNISlideText> read get_SlidesText;
  end;

  TDNPresentationText = class(TDNGenericImport<DNPresentationTextClass, DNPresentationText>) end;

  //-------------namespace: Aspose.Slides----------------
  DNProtectionManagerClass = interface(DNObjectClass)
  ['{6DF9111E-C078-56E4-A77E-44AB9FAA590A}']
  end;

  [DNTypeName('Aspose.Slides.ProtectionManager')]
  DNProtectionManager = interface(DNIProtectionManager)
  ['{BEDEA158-5406-32E5-B0C5-144DAA10216A}']
  { getters & setters } 

    function get_EncryptDocumentProperties: Boolean;
    procedure set_EncryptDocumentProperties(value: Boolean);
    function get_IsEncrypted: Boolean;
    function get_IsOnlyDocumentPropertiesLoaded: Boolean;
    function get_IsWriteProtected: Boolean;
    function get_EncryptionPassword: string;
    function get_ReadOnlyRecommended: Boolean;
    procedure set_ReadOnlyRecommended(value: Boolean);

  { methods } 

    procedure Encrypt(encryptionPassword: string);
    procedure RemoveEncryption;
    procedure SetWriteProtection(password: string);
    procedure RemoveWriteProtection;
    function CheckWriteProtection(password: string): Boolean;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property EncryptDocumentProperties: Boolean read get_EncryptDocumentProperties write set_EncryptDocumentProperties;
    property IsEncrypted: Boolean read get_IsEncrypted;
    property IsOnlyDocumentPropertiesLoaded: Boolean read get_IsOnlyDocumentPropertiesLoaded;
    property IsWriteProtected: Boolean read get_IsWriteProtected;
    property EncryptionPassword: string read get_EncryptionPassword;
    property ReadOnlyRecommended: Boolean read get_ReadOnlyRecommended write set_ReadOnlyRecommended;
  end;

  TDNProtectionManager = class(TDNGenericImport<DNProtectionManagerClass, DNProtectionManager>) end;

  //-------------namespace: Aspose.Slides----------------
  DNPVIObjectClass = interface(DDN.mscorlib.DNObjectClass)
  ['{79C19FAF-7E81-5111-9F0A-94E03BA1A5EA}']
  end;

  [DNTypeName('Aspose.Slides.PVIObject')]
  DNPVIObject = interface(DDN.mscorlib.DNObject)
  ['{1ABE4112-0D93-350B-8D25-F5D832369E3F}']
  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNPVIObject = class(TDNGenericImport<DNPVIObjectClass, DNPVIObject>) end;

  //-------------namespace: Aspose.Slides----------------
  DNBackdrop3DSceneClass = interface(DNPVIObjectClass)
  ['{CD0B61B7-0037-57D1-AD90-5FF6D89651B1}']
  end;

  [DNTypeName('Aspose.Slides.Backdrop3DScene')]
  DNBackdrop3DScene = interface(DNPVIObject)
  ['{BA169CBC-A81C-41D5-ACD1-BF86FE58A782}']
  { getters & setters } 

    function get_NormalVector: TArray<Single>;
    procedure set_NormalVector(value: TArray<Single>);
    function get_AnchorPoint: TArray<Single>;
    procedure set_AnchorPoint(value: TArray<Single>);
    function get_UpVector: TArray<Single>;
    procedure set_UpVector(value: TArray<Single>);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property NormalVector: TArray<Single> read get_NormalVector write set_NormalVector;
    property AnchorPoint: TArray<Single> read get_AnchorPoint write set_AnchorPoint;
    property UpVector: TArray<Single> read get_UpVector write set_UpVector;
  end;

  TDNBackdrop3DScene = class(TDNGenericImport<DNBackdrop3DSceneClass, DNBackdrop3DScene>) end;

  //-------------namespace: Aspose.Slides----------------
  DNBackgroundClass = interface(DNPVIObjectClass)
  ['{03E24854-C4B4-5FEC-926B-E53B5A282209}']
  end;

  [DNTypeName('Aspose.Slides.Background')]
  DNBackground = interface(DNPVIObject)
  ['{40A8E8AA-D270-3FE5-B558-C8D5C9135664}']
  { getters & setters } 

    function get_Type: DNBackgroundType;
    procedure set_Type(value: DNBackgroundType);
    function get_FillFormat: DNIFillFormat;
    function get_EffectFormat: DNIEffectFormat;
    function get_StyleColor: DNIColorFormat;
    function get_StyleIndex: UInt16;
    procedure set_StyleIndex(value: UInt16);
    function get_Slide: DNIBaseSlide;
    function get_Presentation: DNIPresentation;

  { methods } 

    function GetEffective: DNIBackgroundEffectiveData;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property &Type: DNBackgroundType read get_Type write set_Type;
    property FillFormat: DNIFillFormat read get_FillFormat;
    property EffectFormat: DNIEffectFormat read get_EffectFormat;
    property StyleColor: DNIColorFormat read get_StyleColor;
    property StyleIndex: UInt16 read get_StyleIndex write set_StyleIndex;
    property Slide: DNIBaseSlide read get_Slide;
    property Presentation: DNIPresentation read get_Presentation;
  end;

  TDNBackground = class(TDNGenericImport<DNBackgroundClass, DNBackground>) end;

  //-------------namespace: Aspose.Slides----------------
  DNBasePortionFormatClass = interface(DNPVIObjectClass)
  ['{19CA78E4-9205-571D-88F3-B987A620707D}']
  end;

  [DNTypeName('Aspose.Slides.BasePortionFormat')]
  DNBasePortionFormat = interface(DNPVIObject)
  ['{BA5FC5BE-3729-3531-A4EB-8FF7628439CC}']
  { getters & setters } 

    function get_LineFormat: DNILineFormat;
    function get_FillFormat: DNIFillFormat;
    function get_EffectFormat: DNIEffectFormat;
    function get_HighlightColor: DNIColorFormat;
    function get_UnderlineLineFormat: DNILineFormat;
    function get_UnderlineFillFormat: DNIFillFormat;
    function get_FontBold: DNNullableBool;
    procedure set_FontBold(value: DNNullableBool);
    function get_FontItalic: DNNullableBool;
    procedure set_FontItalic(value: DNNullableBool);
    function get_Kumimoji: DNNullableBool;
    procedure set_Kumimoji(value: DNNullableBool);
    function get_NormaliseHeight: DNNullableBool;
    procedure set_NormaliseHeight(value: DNNullableBool);
    function get_ProofDisabled: DNNullableBool;
    procedure set_ProofDisabled(value: DNNullableBool);
    function get_FontUnderline: DNTextUnderlineType;
    procedure set_FontUnderline(value: DNTextUnderlineType);
    function get_TextCapType: DNTextCapType;
    procedure set_TextCapType(value: DNTextCapType);
    function get_StrikethroughType: DNTextStrikethroughType;
    procedure set_StrikethroughType(value: DNTextStrikethroughType);
    function get_IsHardUnderlineLine: DNNullableBool;
    procedure set_IsHardUnderlineLine(value: DNNullableBool);
    function get_IsHardUnderlineFill: DNNullableBool;
    procedure set_IsHardUnderlineFill(value: DNNullableBool);
    function get_FontHeight: Single;
    procedure set_FontHeight(value: Single);
    function get_LatinFont: DNIFontData;
    procedure set_LatinFont(value: DNIFontData);
    function get_EastAsianFont: DNIFontData;
    procedure set_EastAsianFont(value: DNIFontData);
    function get_ComplexScriptFont: DNIFontData;
    procedure set_ComplexScriptFont(value: DNIFontData);
    function get_SymbolFont: DNIFontData;
    procedure set_SymbolFont(value: DNIFontData);
    function get_Escapement: Single;
    procedure set_Escapement(value: Single);
    function get_KerningMinimalSize: Single;
    procedure set_KerningMinimalSize(value: Single);
    function get_LanguageId: string;
    procedure set_LanguageId(value: string);
    function get_AlternativeLanguageId: string;
    procedure set_AlternativeLanguageId(value: string);
    function get_Spacing: Single;
    procedure set_Spacing(value: Single);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property LineFormat: DNILineFormat read get_LineFormat;
    property FillFormat: DNIFillFormat read get_FillFormat;
    property EffectFormat: DNIEffectFormat read get_EffectFormat;
    property HighlightColor: DNIColorFormat read get_HighlightColor;
    property UnderlineLineFormat: DNILineFormat read get_UnderlineLineFormat;
    property UnderlineFillFormat: DNIFillFormat read get_UnderlineFillFormat;
    property FontBold: DNNullableBool read get_FontBold write set_FontBold;
    property FontItalic: DNNullableBool read get_FontItalic write set_FontItalic;
    property Kumimoji: DNNullableBool read get_Kumimoji write set_Kumimoji;
    property NormaliseHeight: DNNullableBool read get_NormaliseHeight write set_NormaliseHeight;
    property ProofDisabled: DNNullableBool read get_ProofDisabled write set_ProofDisabled;
    property FontUnderline: DNTextUnderlineType read get_FontUnderline write set_FontUnderline;
    property TextCapType: DNTextCapType read get_TextCapType write set_TextCapType;
    property StrikethroughType: DNTextStrikethroughType read get_StrikethroughType write set_StrikethroughType;
    property IsHardUnderlineLine: DNNullableBool read get_IsHardUnderlineLine write set_IsHardUnderlineLine;
    property IsHardUnderlineFill: DNNullableBool read get_IsHardUnderlineFill write set_IsHardUnderlineFill;
    property FontHeight: Single read get_FontHeight write set_FontHeight;
    property LatinFont: DNIFontData read get_LatinFont write set_LatinFont;
    property EastAsianFont: DNIFontData read get_EastAsianFont write set_EastAsianFont;
    property ComplexScriptFont: DNIFontData read get_ComplexScriptFont write set_ComplexScriptFont;
    property SymbolFont: DNIFontData read get_SymbolFont write set_SymbolFont;
    property Escapement: Single read get_Escapement write set_Escapement;
    property KerningMinimalSize: Single read get_KerningMinimalSize write set_KerningMinimalSize;
    property LanguageId: string read get_LanguageId write set_LanguageId;
    property AlternativeLanguageId: string read get_AlternativeLanguageId write set_AlternativeLanguageId;
    property Spacing: Single read get_Spacing write set_Spacing;
  end;

  TDNBasePortionFormat = class(TDNGenericImport<DNBasePortionFormatClass, DNBasePortionFormat>) end;

  //-------------namespace: Aspose.Slides.Charts----------------
  DNChartPortionFormatClass = interface(DNBasePortionFormatClass)
  ['{9D52D465-3AD0-5D85-B3A9-4277065DD2D9}']
  end;

  [DNTypeName('Aspose.Slides.Charts.ChartPortionFormat')]
  DNChartPortionFormat = interface(DNBasePortionFormat)
  ['{D86403D7-E641-4B4E-BD81-5B3EE0599578}']
  { getters & setters } 

    function get_LineFormat: DNILineFormat;
    function get_FillFormat: DNIFillFormat;
    function get_EffectFormat: DNIEffectFormat;
    function get_HighlightColor: DNIColorFormat;
    function get_UnderlineLineFormat: DNILineFormat;
    function get_UnderlineFillFormat: DNIFillFormat;
    function get_FontBold: DNNullableBool;
    procedure set_FontBold(value: DNNullableBool);
    function get_FontItalic: DNNullableBool;
    procedure set_FontItalic(value: DNNullableBool);
    function get_Kumimoji: DNNullableBool;
    procedure set_Kumimoji(value: DNNullableBool);
    function get_NormaliseHeight: DNNullableBool;
    procedure set_NormaliseHeight(value: DNNullableBool);
    function get_ProofDisabled: DNNullableBool;
    procedure set_ProofDisabled(value: DNNullableBool);
    function get_FontUnderline: DNTextUnderlineType;
    procedure set_FontUnderline(value: DNTextUnderlineType);
    function get_TextCapType: DNTextCapType;
    procedure set_TextCapType(value: DNTextCapType);
    function get_StrikethroughType: DNTextStrikethroughType;
    procedure set_StrikethroughType(value: DNTextStrikethroughType);
    function get_IsHardUnderlineLine: DNNullableBool;
    procedure set_IsHardUnderlineLine(value: DNNullableBool);
    function get_IsHardUnderlineFill: DNNullableBool;
    procedure set_IsHardUnderlineFill(value: DNNullableBool);
    function get_FontHeight: Single;
    procedure set_FontHeight(value: Single);
    function get_LatinFont: DNIFontData;
    procedure set_LatinFont(value: DNIFontData);
    function get_EastAsianFont: DNIFontData;
    procedure set_EastAsianFont(value: DNIFontData);
    function get_ComplexScriptFont: DNIFontData;
    procedure set_ComplexScriptFont(value: DNIFontData);
    function get_SymbolFont: DNIFontData;
    procedure set_SymbolFont(value: DNIFontData);
    function get_Escapement: Single;
    procedure set_Escapement(value: Single);
    function get_KerningMinimalSize: Single;
    procedure set_KerningMinimalSize(value: Single);
    function get_LanguageId: string;
    procedure set_LanguageId(value: string);
    function get_AlternativeLanguageId: string;
    procedure set_AlternativeLanguageId(value: string);
    function get_Spacing: Single;
    procedure set_Spacing(value: Single);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property LineFormat: DNILineFormat read get_LineFormat;
    property FillFormat: DNIFillFormat read get_FillFormat;
    property EffectFormat: DNIEffectFormat read get_EffectFormat;
    property HighlightColor: DNIColorFormat read get_HighlightColor;
    property UnderlineLineFormat: DNILineFormat read get_UnderlineLineFormat;
    property UnderlineFillFormat: DNIFillFormat read get_UnderlineFillFormat;
    property FontBold: DNNullableBool read get_FontBold write set_FontBold;
    property FontItalic: DNNullableBool read get_FontItalic write set_FontItalic;
    property Kumimoji: DNNullableBool read get_Kumimoji write set_Kumimoji;
    property NormaliseHeight: DNNullableBool read get_NormaliseHeight write set_NormaliseHeight;
    property ProofDisabled: DNNullableBool read get_ProofDisabled write set_ProofDisabled;
    property FontUnderline: DNTextUnderlineType read get_FontUnderline write set_FontUnderline;
    property TextCapType: DNTextCapType read get_TextCapType write set_TextCapType;
    property StrikethroughType: DNTextStrikethroughType read get_StrikethroughType write set_StrikethroughType;
    property IsHardUnderlineLine: DNNullableBool read get_IsHardUnderlineLine write set_IsHardUnderlineLine;
    property IsHardUnderlineFill: DNNullableBool read get_IsHardUnderlineFill write set_IsHardUnderlineFill;
    property FontHeight: Single read get_FontHeight write set_FontHeight;
    property LatinFont: DNIFontData read get_LatinFont write set_LatinFont;
    property EastAsianFont: DNIFontData read get_EastAsianFont write set_EastAsianFont;
    property ComplexScriptFont: DNIFontData read get_ComplexScriptFont write set_ComplexScriptFont;
    property SymbolFont: DNIFontData read get_SymbolFont write set_SymbolFont;
    property Escapement: Single read get_Escapement write set_Escapement;
    property KerningMinimalSize: Single read get_KerningMinimalSize write set_KerningMinimalSize;
    property LanguageId: string read get_LanguageId write set_LanguageId;
    property AlternativeLanguageId: string read get_AlternativeLanguageId write set_AlternativeLanguageId;
    property Spacing: Single read get_Spacing write set_Spacing;
  end;

  TDNChartPortionFormat = class(TDNGenericImport<DNChartPortionFormatClass, DNChartPortionFormat>) end;

  //-------------namespace: Aspose.Slides----------------
  DNPortionFormatClass = interface(DNBasePortionFormatClass)
  ['{620FA508-E62A-548F-8CEE-C9AE937FA290}']
  { constructors } 

    {class} function init: DNPortionFormat;

  end;

  [DNTypeName('Aspose.Slides.PortionFormat')]
  DNPortionFormat = interface(DNBasePortionFormat)
  ['{1374F931-0879-44F9-81CF-C217625D4BF1}']
  { getters & setters } 

    function get_BookmarkId: string;
    procedure set_BookmarkId(value: string);
    function get_SmartTagClean: Boolean;
    procedure set_SmartTagClean(value: Boolean);
    function get_HyperlinkClick: DNIHyperlink;
    procedure set_HyperlinkClick(value: DNIHyperlink);
    function get_HyperlinkMouseOver: DNIHyperlink;
    procedure set_HyperlinkMouseOver(value: DNIHyperlink);
    function get_HyperlinkManager: DNIHyperlinkManager;
    function get_LineFormat: DNILineFormat;
    function get_FillFormat: DNIFillFormat;
    function get_EffectFormat: DNIEffectFormat;
    function get_HighlightColor: DNIColorFormat;
    function get_UnderlineLineFormat: DNILineFormat;
    function get_UnderlineFillFormat: DNIFillFormat;
    function get_FontBold: DNNullableBool;
    procedure set_FontBold(value: DNNullableBool);
    function get_FontItalic: DNNullableBool;
    procedure set_FontItalic(value: DNNullableBool);
    function get_Kumimoji: DNNullableBool;
    procedure set_Kumimoji(value: DNNullableBool);
    function get_NormaliseHeight: DNNullableBool;
    procedure set_NormaliseHeight(value: DNNullableBool);
    function get_ProofDisabled: DNNullableBool;
    procedure set_ProofDisabled(value: DNNullableBool);
    function get_FontUnderline: DNTextUnderlineType;
    procedure set_FontUnderline(value: DNTextUnderlineType);
    function get_TextCapType: DNTextCapType;
    procedure set_TextCapType(value: DNTextCapType);
    function get_StrikethroughType: DNTextStrikethroughType;
    procedure set_StrikethroughType(value: DNTextStrikethroughType);
    function get_IsHardUnderlineLine: DNNullableBool;
    procedure set_IsHardUnderlineLine(value: DNNullableBool);
    function get_IsHardUnderlineFill: DNNullableBool;
    procedure set_IsHardUnderlineFill(value: DNNullableBool);
    function get_FontHeight: Single;
    procedure set_FontHeight(value: Single);
    function get_LatinFont: DNIFontData;
    procedure set_LatinFont(value: DNIFontData);
    function get_EastAsianFont: DNIFontData;
    procedure set_EastAsianFont(value: DNIFontData);
    function get_ComplexScriptFont: DNIFontData;
    procedure set_ComplexScriptFont(value: DNIFontData);
    function get_SymbolFont: DNIFontData;
    procedure set_SymbolFont(value: DNIFontData);
    function get_Escapement: Single;
    procedure set_Escapement(value: Single);
    function get_KerningMinimalSize: Single;
    procedure set_KerningMinimalSize(value: Single);
    function get_LanguageId: string;
    procedure set_LanguageId(value: string);
    function get_AlternativeLanguageId: string;
    procedure set_AlternativeLanguageId(value: string);
    function get_Spacing: Single;
    procedure set_Spacing(value: Single);

  { methods } 

    function GetEffective: DNIPortionFormatEffectiveData;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property BookmarkId: string read get_BookmarkId write set_BookmarkId;
    property SmartTagClean: Boolean read get_SmartTagClean write set_SmartTagClean;
    property HyperlinkClick: DNIHyperlink read get_HyperlinkClick write set_HyperlinkClick;
    property HyperlinkMouseOver: DNIHyperlink read get_HyperlinkMouseOver write set_HyperlinkMouseOver;
    property HyperlinkManager: DNIHyperlinkManager read get_HyperlinkManager;
    property LineFormat: DNILineFormat read get_LineFormat;
    property FillFormat: DNIFillFormat read get_FillFormat;
    property EffectFormat: DNIEffectFormat read get_EffectFormat;
    property HighlightColor: DNIColorFormat read get_HighlightColor;
    property UnderlineLineFormat: DNILineFormat read get_UnderlineLineFormat;
    property UnderlineFillFormat: DNIFillFormat read get_UnderlineFillFormat;
    property FontBold: DNNullableBool read get_FontBold write set_FontBold;
    property FontItalic: DNNullableBool read get_FontItalic write set_FontItalic;
    property Kumimoji: DNNullableBool read get_Kumimoji write set_Kumimoji;
    property NormaliseHeight: DNNullableBool read get_NormaliseHeight write set_NormaliseHeight;
    property ProofDisabled: DNNullableBool read get_ProofDisabled write set_ProofDisabled;
    property FontUnderline: DNTextUnderlineType read get_FontUnderline write set_FontUnderline;
    property TextCapType: DNTextCapType read get_TextCapType write set_TextCapType;
    property StrikethroughType: DNTextStrikethroughType read get_StrikethroughType write set_StrikethroughType;
    property IsHardUnderlineLine: DNNullableBool read get_IsHardUnderlineLine write set_IsHardUnderlineLine;
    property IsHardUnderlineFill: DNNullableBool read get_IsHardUnderlineFill write set_IsHardUnderlineFill;
    property FontHeight: Single read get_FontHeight write set_FontHeight;
    property LatinFont: DNIFontData read get_LatinFont write set_LatinFont;
    property EastAsianFont: DNIFontData read get_EastAsianFont write set_EastAsianFont;
    property ComplexScriptFont: DNIFontData read get_ComplexScriptFont write set_ComplexScriptFont;
    property SymbolFont: DNIFontData read get_SymbolFont write set_SymbolFont;
    property Escapement: Single read get_Escapement write set_Escapement;
    property KerningMinimalSize: Single read get_KerningMinimalSize write set_KerningMinimalSize;
    property LanguageId: string read get_LanguageId write set_LanguageId;
    property AlternativeLanguageId: string read get_AlternativeLanguageId write set_AlternativeLanguageId;
    property Spacing: Single read get_Spacing write set_Spacing;
  end;

  TDNPortionFormat = class(TDNGenericImport<DNPortionFormatClass, DNPortionFormat>) end;

  //-------------namespace: Aspose.Slides----------------
  DNBulletFormatClass = interface(DNPVIObjectClass)
  ['{D22F3C57-35AA-5BB4-9B39-D49555BF9756}']
  end;

  [DNTypeName('Aspose.Slides.BulletFormat')]
  DNBulletFormat = interface(DNPVIObject)
  ['{E165BAD1-A5CD-37C5-BF47-3CD01AD668B6}']
  { getters & setters } 

    function get_Type: DNBulletType;
    procedure set_Type(value: DNBulletType);
    function get_Char: Char;
    procedure set_Char(value: Char);
    function get_Font: DNIFontData;
    procedure set_Font(value: DNIFontData);
    function get_Height: Single;
    procedure set_Height(value: Single);
    function get_Color: DNIColorFormat;
    function get_NumberedBulletStartWith: Int16;
    procedure set_NumberedBulletStartWith(value: Int16);
    function get_NumberedBulletStyle: DNNumberedBulletStyle;
    procedure set_NumberedBulletStyle(value: DNNumberedBulletStyle);
    function get_IsBulletHardColor: DNNullableBool;
    procedure set_IsBulletHardColor(value: DNNullableBool);
    function get_IsBulletHardFont: DNNullableBool;
    procedure set_IsBulletHardFont(value: DNNullableBool);
    function get_Picture: DNISlidesPicture;

  { methods } 

    procedure ApplyDefaultParagraphIndentsShifts;
    function GetEffective: DNIBulletFormatEffectiveData;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property &Type: DNBulletType read get_Type write set_Type;
    property Char: Char read get_Char write set_Char;
    property Font: DNIFontData read get_Font write set_Font;
    property Height: Single read get_Height write set_Height;
    property Color: DNIColorFormat read get_Color;
    property NumberedBulletStartWith: Int16 read get_NumberedBulletStartWith write set_NumberedBulletStartWith;
    property NumberedBulletStyle: DNNumberedBulletStyle read get_NumberedBulletStyle write set_NumberedBulletStyle;
    property IsBulletHardColor: DNNullableBool read get_IsBulletHardColor write set_IsBulletHardColor;
    property IsBulletHardFont: DNNullableBool read get_IsBulletHardFont write set_IsBulletHardFont;
    property Picture: DNISlidesPicture read get_Picture;
  end;

  TDNBulletFormat = class(TDNGenericImport<DNBulletFormatClass, DNBulletFormat>) end;

  //-------------namespace: Aspose.Slides----------------
  DNCameraClass = interface(DNPVIObjectClass)
  ['{9669A811-5F17-5F02-87E5-346B58886689}']
  end;

  [DNTypeName('Aspose.Slides.Camera')]
  DNCamera = interface(DNPVIObject)
  ['{4199AC19-4BBC-4893-9A8E-13C810655E63}']
  { getters & setters } 

    function get_CameraType: DNCameraPresetType;
    procedure set_CameraType(value: DNCameraPresetType);
    function get_FieldOfViewAngle: Single;
    procedure set_FieldOfViewAngle(value: Single);
    function get_Zoom: Single;
    procedure set_Zoom(value: Single);

  { methods } 

    procedure SetRotation(latitude: Single; longitude: Single; revolution: Single);
    function GetRotation: TArray<Single>;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property CameraType: DNCameraPresetType read get_CameraType write set_CameraType;
    property FieldOfViewAngle: Single read get_FieldOfViewAngle write set_FieldOfViewAngle;
    property Zoom: Single read get_Zoom write set_Zoom;
  end;

  TDNCamera = class(TDNGenericImport<DNCameraClass, DNCamera>) end;

  //-------------namespace: Aspose.Slides----------------
  DNCellFormatClass = interface(DNPVIObjectClass)
  ['{D2DBDB8B-C246-5BBA-B29A-25ABBB2E0DD3}']
  end;

  [DNTypeName('Aspose.Slides.CellFormat')]
  DNCellFormat = interface(DNPVIObject)
  ['{055273AF-3549-38AB-A525-0A792F517382}']
  { getters & setters } 

    function get_FillFormat: DNIFillFormat;
    function get_BorderLeft: DNILineFormat;
    function get_BorderTop: DNILineFormat;
    function get_BorderRight: DNILineFormat;
    function get_BorderBottom: DNILineFormat;
    function get_BorderDiagonalDown: DNILineFormat;
    function get_BorderDiagonalUp: DNILineFormat;

  { methods } 

    function GetEffective: DNICellFormatEffectiveData;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property FillFormat: DNIFillFormat read get_FillFormat;
    property BorderLeft: DNILineFormat read get_BorderLeft;
    property BorderTop: DNILineFormat read get_BorderTop;
    property BorderRight: DNILineFormat read get_BorderRight;
    property BorderBottom: DNILineFormat read get_BorderBottom;
    property BorderDiagonalDown: DNILineFormat read get_BorderDiagonalDown;
    property BorderDiagonalUp: DNILineFormat read get_BorderDiagonalUp;
  end;

  TDNCellFormat = class(TDNGenericImport<DNCellFormatClass, DNCellFormat>) end;

  //-------------namespace: Aspose.Slides.Charts----------------
  DNDataLabelFormatClass = interface(DNPVIObjectClass)
  ['{19D431E0-6EB9-5BE4-9890-4A8041E6A015}']
  end;

  [DNTypeName('Aspose.Slides.Charts.DataLabelFormat')]
  DNDataLabelFormat = interface(DNPVIObject)
  ['{8CBD23B3-35C5-33E3-9C55-444297EA4F4C}']
  { getters & setters } 

    function get_IsNumberFormatLinkedToSource: Boolean;
    procedure set_IsNumberFormatLinkedToSource(value: Boolean);
    function get_NumberFormat: string;
    procedure set_NumberFormat(value: string);
    function get_Format: DNIFormat;
    function get_Position: DNLegendDataLabelPosition;
    procedure set_Position(value: DNLegendDataLabelPosition);
    function get_ShowLegendKey: Boolean;
    procedure set_ShowLegendKey(value: Boolean);
    function get_ShowValue: Boolean;
    procedure set_ShowValue(value: Boolean);
    function get_ShowCategoryName: Boolean;
    procedure set_ShowCategoryName(value: Boolean);
    function get_ShowSeriesName: Boolean;
    procedure set_ShowSeriesName(value: Boolean);
    function get_ShowPercentage: Boolean;
    procedure set_ShowPercentage(value: Boolean);
    function get_ShowBubbleSize: Boolean;
    procedure set_ShowBubbleSize(value: Boolean);
    function get_ShowLeaderLines: Boolean;
    procedure set_ShowLeaderLines(value: Boolean);
    function get_ShowLabelValueFromCell: Boolean;
    procedure set_ShowLabelValueFromCell(value: Boolean);
    function get_ShowLabelAsDataCallout: Boolean;
    procedure set_ShowLabelAsDataCallout(value: Boolean);
    function get_Separator: string;
    procedure set_Separator(value: string);
    function get_TextFormat: DNIChartTextFormat;
    function get_Chart: DNIChart;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property IsNumberFormatLinkedToSource: Boolean read get_IsNumberFormatLinkedToSource write set_IsNumberFormatLinkedToSource;
    property NumberFormat: string read get_NumberFormat write set_NumberFormat;
    property Format: DNIFormat read get_Format;
    property Position: DNLegendDataLabelPosition read get_Position write set_Position;
    property ShowLegendKey: Boolean read get_ShowLegendKey write set_ShowLegendKey;
    property ShowValue: Boolean read get_ShowValue write set_ShowValue;
    property ShowCategoryName: Boolean read get_ShowCategoryName write set_ShowCategoryName;
    property ShowSeriesName: Boolean read get_ShowSeriesName write set_ShowSeriesName;
    property ShowPercentage: Boolean read get_ShowPercentage write set_ShowPercentage;
    property ShowBubbleSize: Boolean read get_ShowBubbleSize write set_ShowBubbleSize;
    property ShowLeaderLines: Boolean read get_ShowLeaderLines write set_ShowLeaderLines;
    property ShowLabelValueFromCell: Boolean read get_ShowLabelValueFromCell write set_ShowLabelValueFromCell;
    property ShowLabelAsDataCallout: Boolean read get_ShowLabelAsDataCallout write set_ShowLabelAsDataCallout;
    property Separator: string read get_Separator write set_Separator;
    property TextFormat: DNIChartTextFormat read get_TextFormat;
    property Chart: DNIChart read get_Chart;
  end;

  TDNDataLabelFormat = class(TDNGenericImport<DNDataLabelFormatClass, DNDataLabelFormat>) end;

  //-------------namespace: Aspose.Slides.Charts----------------
  DNFormatClass = interface(DNPVIObjectClass)
  ['{8D588E54-427B-58B4-B9E5-7F3C4C4DDD86}']
  end;

  [DNTypeName('Aspose.Slides.Charts.Format')]
  DNFormat = interface(DNPVIObject)
  ['{DEF19A43-465F-3283-B31D-DFB247553A30}']
  { getters & setters } 

    function get_Fill: DNIFillFormat;
    function get_Line: DNILineFormat;
    function get_Effect: DNIEffectFormat;
    function get_Effect3D: DNIThreeDFormat;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Fill: DNIFillFormat read get_Fill;
    property Line: DNILineFormat read get_Line;
    property Effect: DNIEffectFormat read get_Effect;
    property Effect3D: DNIThreeDFormat read get_Effect3D;
  end;

  TDNFormat = class(TDNGenericImport<DNFormatClass, DNFormat>) end;

  //-------------namespace: Aspose.Slides----------------
  DNColorFormatClass = interface(DNPVIObjectClass)
  ['{CBBC066B-6963-5F64-A669-6DC25279A835}']
  end;

  [DNTypeName('Aspose.Slides.ColorFormat')]
  DNColorFormat = interface(DNPVIObject)
  ['{B5A5EF80-0E48-38F7-BFC2-D4527F13B450}']
  { getters & setters } 

    function get_ColorType: DNColorType;
    procedure set_ColorType(value: DNColorType);
    function get_Color: DDN.System.Drawing.DNColor;
    procedure set_Color(value: DDN.System.Drawing.DNColor);
    function get_PresetColor: DNPresetColor;
    procedure set_PresetColor(value: DNPresetColor);
    function get_SystemColor: DNSystemColor;
    procedure set_SystemColor(value: DNSystemColor);
    function get_SchemeColor: DNSchemeColor;
    procedure set_SchemeColor(value: DNSchemeColor);
    function get_R: Byte;
    procedure set_R(value: Byte);
    function get_G: Byte;
    procedure set_G(value: Byte);
    function get_B: Byte;
    procedure set_B(value: Byte);
    function get_FloatR: Single;
    procedure set_FloatR(value: Single);
    function get_FloatG: Single;
    procedure set_FloatG(value: Single);
    function get_FloatB: Single;
    procedure set_FloatB(value: Single);
    function get_Hue: Single;
    procedure set_Hue(value: Single);
    function get_Saturation: Single;
    procedure set_Saturation(value: Single);
    function get_Luminance: Single;
    procedure set_Luminance(value: Single);
    function get_ColorTransform: DNIColorOperationCollection;

  { methods } 

    function ToString(format: DNColorStringFormat): string; overload;
    procedure CopyFrom(color: DNIColorFormat);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string; overload;

  { propertys } 

    property ColorType: DNColorType read get_ColorType write set_ColorType;
    property Color: DDN.System.Drawing.DNColor read get_Color write set_Color;
    property PresetColor: DNPresetColor read get_PresetColor write set_PresetColor;
    property SystemColor: DNSystemColor read get_SystemColor write set_SystemColor;
    property SchemeColor: DNSchemeColor read get_SchemeColor write set_SchemeColor;
    property R: Byte read get_R write set_R;
    property G: Byte read get_G write set_G;
    property B: Byte read get_B write set_B;
    property FloatR: Single read get_FloatR write set_FloatR;
    property FloatG: Single read get_FloatG write set_FloatG;
    property FloatB: Single read get_FloatB write set_FloatB;
    property Hue: Single read get_Hue write set_Hue;
    property Saturation: Single read get_Saturation write set_Saturation;
    property Luminance: Single read get_Luminance write set_Luminance;
    property ColorTransform: DNIColorOperationCollection read get_ColorTransform;
  end;

  TDNColorFormat = class(TDNGenericImport<DNColorFormatClass, DNColorFormat>) end;

  //-------------namespace: Aspose.Slides----------------
  DNEffectFormatClass = interface(DNPVIObjectClass)
  ['{EB17A883-F9DD-56D5-AF63-8C8B1617AEEA}']
  end;

  [DNTypeName('Aspose.Slides.EffectFormat')]
  DNEffectFormat = interface(DNPVIObject)
  ['{9E44FD95-E81C-3F50-9B7F-AB204404DF98}']
  { getters & setters } 

    function get_IsNoEffects: Boolean;
    function get_BlurEffect: DNIBlur;
    procedure set_BlurEffect(value: DNIBlur);
    function get_FillOverlayEffect: DNIFillOverlay;
    procedure set_FillOverlayEffect(value: DNIFillOverlay);
    function get_GlowEffect: DNIGlow;
    procedure set_GlowEffect(value: DNIGlow);
    function get_InnerShadowEffect: DNIInnerShadow;
    procedure set_InnerShadowEffect(value: DNIInnerShadow);
    function get_OuterShadowEffect: DNIOuterShadow;
    procedure set_OuterShadowEffect(value: DNIOuterShadow);
    function get_PresetShadowEffect: DNIPresetShadow;
    procedure set_PresetShadowEffect(value: DNIPresetShadow);
    function get_ReflectionEffect: DNIReflection;
    procedure set_ReflectionEffect(value: DNIReflection);
    function get_SoftEdgeEffect: DNISoftEdge;
    procedure set_SoftEdgeEffect(value: DNISoftEdge);

  { methods } 

    procedure SetBlurEffect(radius: Double; grow: Boolean);
    procedure EnableFillOverlayEffect;
    procedure EnableGlowEffect;
    procedure EnableInnerShadowEffect;
    procedure EnableOuterShadowEffect;
    procedure EnablePresetShadowEffect;
    procedure EnableReflectionEffect;
    procedure EnableSoftEdgeEffect;
    procedure DisableBlurEffect;
    procedure DisableFillOverlayEffect;
    procedure DisableGlowEffect;
    procedure DisableInnerShadowEffect;
    procedure DisableOuterShadowEffect;
    procedure DisablePresetShadowEffect;
    procedure DisableReflectionEffect;
    procedure DisableSoftEdgeEffect;
    function GetEffective: DNIEffectFormatEffectiveData;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property IsNoEffects: Boolean read get_IsNoEffects;
    property BlurEffect: DNIBlur read get_BlurEffect write set_BlurEffect;
    property FillOverlayEffect: DNIFillOverlay read get_FillOverlayEffect write set_FillOverlayEffect;
    property GlowEffect: DNIGlow read get_GlowEffect write set_GlowEffect;
    property InnerShadowEffect: DNIInnerShadow read get_InnerShadowEffect write set_InnerShadowEffect;
    property OuterShadowEffect: DNIOuterShadow read get_OuterShadowEffect write set_OuterShadowEffect;
    property PresetShadowEffect: DNIPresetShadow read get_PresetShadowEffect write set_PresetShadowEffect;
    property ReflectionEffect: DNIReflection read get_ReflectionEffect write set_ReflectionEffect;
    property SoftEdgeEffect: DNISoftEdge read get_SoftEdgeEffect write set_SoftEdgeEffect;
  end;

  TDNEffectFormat = class(TDNGenericImport<DNEffectFormatClass, DNEffectFormat>) end;

  //-------------namespace: Aspose.Slides.Effects----------------
  DNImageTransformOperationClass = interface(DNPVIObjectClass)
  ['{15B99DB9-0ECA-5FEF-BA63-1925C21EE504}']
  end;

  [DNTypeName('Aspose.Slides.Effects.ImageTransformOperation')]
  DNImageTransformOperation = interface(DNPVIObject)
  ['{72B07CE9-9D35-3CA3-BEF8-A40E41FEECE3}']
  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNImageTransformOperation = class(TDNGenericImport<DNImageTransformOperationClass, DNImageTransformOperation>) end;

  //-------------namespace: Aspose.Slides.Effects----------------
  DNAlphaBiLevelClass = interface(DNImageTransformOperationClass)
  ['{639FF50D-A413-5724-B0D5-C84EC735885A}']
  end;

  [DNTypeName('Aspose.Slides.Effects.AlphaBiLevel')]
  DNAlphaBiLevel = interface(DNImageTransformOperation)
  ['{9D328E4E-DE06-30FD-BEAD-1AFDD4667AD4}']
  { getters & setters } 

    function get_Threshold: Single;
    procedure set_Threshold(value: Single);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Threshold: Single read get_Threshold write set_Threshold;
  end;

  TDNAlphaBiLevel = class(TDNGenericImport<DNAlphaBiLevelClass, DNAlphaBiLevel>) end;

  //-------------namespace: Aspose.Slides.Effects----------------
  DNAlphaCeilingClass = interface(DNImageTransformOperationClass)
  ['{3BC8965A-1978-5D0A-AE8B-DA6D6D99452D}']
  end;

  [DNTypeName('Aspose.Slides.Effects.AlphaCeiling')]
  DNAlphaCeiling = interface(DNImageTransformOperation)
  ['{99F0DF48-637B-46BB-A329-3AC45824CCE7}']
  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNAlphaCeiling = class(TDNGenericImport<DNAlphaCeilingClass, DNAlphaCeiling>) end;

  //-------------namespace: Aspose.Slides.Effects----------------
  DNAlphaFloorClass = interface(DNImageTransformOperationClass)
  ['{163A9E34-FEBC-5F88-A27E-9D0A58FCE815}']
  end;

  [DNTypeName('Aspose.Slides.Effects.AlphaFloor')]
  DNAlphaFloor = interface(DNImageTransformOperation)
  ['{C4CC7398-1211-47B5-AAD3-59FCA7658A07}']
  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNAlphaFloor = class(TDNGenericImport<DNAlphaFloorClass, DNAlphaFloor>) end;

  //-------------namespace: Aspose.Slides.Effects----------------
  DNAlphaInverseClass = interface(DNImageTransformOperationClass)
  ['{B202DA76-9BEE-5914-9D36-50ACF3684930}']
  end;

  [DNTypeName('Aspose.Slides.Effects.AlphaInverse')]
  DNAlphaInverse = interface(DNImageTransformOperation)
  ['{1ED8918D-D8BD-412A-90D2-D23DD4A81585}']
  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNAlphaInverse = class(TDNGenericImport<DNAlphaInverseClass, DNAlphaInverse>) end;

  //-------------namespace: Aspose.Slides.Effects----------------
  DNAlphaModulateClass = interface(DNImageTransformOperationClass)
  ['{CD2D2A9E-6ACE-5CF0-9B1A-6EB7A458421A}']
  end;

  [DNTypeName('Aspose.Slides.Effects.AlphaModulate')]
  DNAlphaModulate = interface(DNImageTransformOperation)
  ['{DF2DE752-3B5E-4684-ACA2-5F74D107A5AB}']
  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNAlphaModulate = class(TDNGenericImport<DNAlphaModulateClass, DNAlphaModulate>) end;

  //-------------namespace: Aspose.Slides.Effects----------------
  DNAlphaModulateFixedClass = interface(DNImageTransformOperationClass)
  ['{E38BFB60-83F8-5FB1-A465-27BCB8D14F5A}']
  end;

  [DNTypeName('Aspose.Slides.Effects.AlphaModulateFixed')]
  DNAlphaModulateFixed = interface(DNImageTransformOperation)
  ['{9A8363A1-3D11-3A3D-8B66-08E4BAFF73D2}']
  { getters & setters } 

    function get_Amount: Single;
    procedure set_Amount(value: Single);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Amount: Single read get_Amount write set_Amount;
  end;

  TDNAlphaModulateFixed = class(TDNGenericImport<DNAlphaModulateFixedClass, DNAlphaModulateFixed>) end;

  //-------------namespace: Aspose.Slides.Effects----------------
  DNAlphaReplaceClass = interface(DNImageTransformOperationClass)
  ['{29E40D4F-4688-5138-A3AE-CCCC183C0C85}']
  end;

  [DNTypeName('Aspose.Slides.Effects.AlphaReplace')]
  DNAlphaReplace = interface(DNImageTransformOperation)
  ['{F5F0A28F-F773-35EB-AECC-BAF201147E6A}']
  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNAlphaReplace = class(TDNGenericImport<DNAlphaReplaceClass, DNAlphaReplace>) end;

  //-------------namespace: Aspose.Slides.Effects----------------
  DNBiLevelClass = interface(DNImageTransformOperationClass)
  ['{0D828DBA-4D8F-5A5B-A162-95B56CCFEE31}']
  end;

  [DNTypeName('Aspose.Slides.Effects.BiLevel')]
  DNBiLevel = interface(DNImageTransformOperation)
  ['{F54441AF-EE99-3FE9-96B9-2D0691F6ACBE}']
  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNBiLevel = class(TDNGenericImport<DNBiLevelClass, DNBiLevel>) end;

  //-------------namespace: Aspose.Slides.Effects----------------
  DNBlurClass = interface(DNImageTransformOperationClass)
  ['{DE5B9DAC-4FF1-55F9-9CBF-99A2C0C7868B}']
  end;

  [DNTypeName('Aspose.Slides.Effects.Blur')]
  DNBlur = interface(DNImageTransformOperation)
  ['{BD2A6EFC-F4D4-45A4-9597-F2721FE27CC3}']
  { getters & setters } 

    function get_Radius: Double;
    procedure set_Radius(value: Double);
    function get_Grow: Boolean;
    procedure set_Grow(value: Boolean);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Radius: Double read get_Radius write set_Radius;
    property Grow: Boolean read get_Grow write set_Grow;
  end;

  TDNBlur = class(TDNGenericImport<DNBlurClass, DNBlur>) end;

  //-------------namespace: Aspose.Slides.Effects----------------
  DNColorChangeClass = interface(DNImageTransformOperationClass)
  ['{1C3A91C4-E966-5978-8D18-11E8E5CB92AD}']
  end;

  [DNTypeName('Aspose.Slides.Effects.ColorChange')]
  DNColorChange = interface(DNImageTransformOperation)
  ['{0F0C10B0-8149-49B3-88E9-A7E5CC48AA88}']
  { getters & setters } 

    function get_FromColor: DNIColorFormat;
    function get_ToColor: DNIColorFormat;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property FromColor: DNIColorFormat read get_FromColor;
    property ToColor: DNIColorFormat read get_ToColor;
  end;

  TDNColorChange = class(TDNGenericImport<DNColorChangeClass, DNColorChange>) end;

  //-------------namespace: Aspose.Slides.Effects----------------
  DNColorReplaceClass = interface(DNImageTransformOperationClass)
  ['{F7A0D36F-77CE-5441-9E55-6DB122E2F11E}']
  end;

  [DNTypeName('Aspose.Slides.Effects.ColorReplace')]
  DNColorReplace = interface(DNImageTransformOperation)
  ['{50116F54-8757-49D2-9497-95798B222653}']
  { getters & setters } 

    function get_Color: DNIColorFormat;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Color: DNIColorFormat read get_Color;
  end;

  TDNColorReplace = class(TDNGenericImport<DNColorReplaceClass, DNColorReplace>) end;

  //-------------namespace: Aspose.Slides.Effects----------------
  DNDuotoneClass = interface(DNImageTransformOperationClass)
  ['{FA7DE336-CC5D-52F1-BAFA-52026555CE4D}']
  end;

  [DNTypeName('Aspose.Slides.Effects.Duotone')]
  DNDuotone = interface(DNImageTransformOperation)
  ['{3BD9DE96-F11F-47F7-9F47-572CA5CA7F07}']
  { getters & setters } 

    function get_Color1: DNIColorFormat;
    function get_Color2: DNIColorFormat;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Color1: DNIColorFormat read get_Color1;
    property Color2: DNIColorFormat read get_Color2;
  end;

  TDNDuotone = class(TDNGenericImport<DNDuotoneClass, DNDuotone>) end;

  //-------------namespace: Aspose.Slides.Effects----------------
  DNFillOverlayClass = interface(DNImageTransformOperationClass)
  ['{CF800C6F-2621-5E57-887F-A1D5022D9F58}']
  end;

  [DNTypeName('Aspose.Slides.Effects.FillOverlay')]
  DNFillOverlay = interface(DNImageTransformOperation)
  ['{4A792264-0307-4294-89B5-D511D1A34EDE}']
  { getters & setters } 

    function get_FillFormat: DNIFillFormat;
    function get_Blend: DNFillBlendMode;
    procedure set_Blend(value: DNFillBlendMode);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property FillFormat: DNIFillFormat read get_FillFormat;
    property Blend: DNFillBlendMode read get_Blend write set_Blend;
  end;

  TDNFillOverlay = class(TDNGenericImport<DNFillOverlayClass, DNFillOverlay>) end;

  //-------------namespace: Aspose.Slides.Effects----------------
  DNGrayScaleClass = interface(DNImageTransformOperationClass)
  ['{4FA02265-A8F2-588A-8A36-5074AF3A757B}']
  end;

  [DNTypeName('Aspose.Slides.Effects.GrayScale')]
  DNGrayScale = interface(DNImageTransformOperation)
  ['{847B0403-C75C-4D83-9133-4533DD4D439C}']
  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNGrayScale = class(TDNGenericImport<DNGrayScaleClass, DNGrayScale>) end;

  //-------------namespace: Aspose.Slides.Effects----------------
  DNHSLClass = interface(DNImageTransformOperationClass)
  ['{760538B4-E08F-5D57-AB4D-886B02B88F7D}']
  end;

  [DNTypeName('Aspose.Slides.Effects.HSL')]
  DNHSL = interface(DNImageTransformOperation)
  ['{C3E5089D-4B30-3FE3-92B8-7C303D0470E9}']
  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNHSL = class(TDNGenericImport<DNHSLClass, DNHSL>) end;

  //-------------namespace: Aspose.Slides.Effects----------------
  DNLuminanceClass = interface(DNImageTransformOperationClass)
  ['{878A142E-0A85-56AF-9783-E3E255CFE2B8}']
  end;

  [DNTypeName('Aspose.Slides.Effects.Luminance')]
  DNLuminance = interface(DNImageTransformOperation)
  ['{21AC3DB2-358A-3E97-86C3-8E94B0AED79A}']
  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNLuminance = class(TDNGenericImport<DNLuminanceClass, DNLuminance>) end;

  //-------------namespace: Aspose.Slides.Effects----------------
  DNTintClass = interface(DNImageTransformOperationClass)
  ['{6B9B7CB9-4942-5FAC-941A-C9C6AB27F392}']
  end;

  [DNTypeName('Aspose.Slides.Effects.Tint')]
  DNTint = interface(DNImageTransformOperation)
  ['{20FC2B70-35D3-305E-8F94-EB5835373D89}']
  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNTint = class(TDNGenericImport<DNTintClass, DNTint>) end;

  //-------------namespace: Aspose.Slides.Effects----------------
  DNImageTransformOperationCollectionClass = interface(DNPVIObjectClass)
  ['{0E098959-242D-589C-9B5B-66EED3852214}']
  end;

  [DNTypeName('Aspose.Slides.Effects.ImageTransformOperationCollection')]
  DNImageTransformOperationCollection = interface(DNPVIObject)
  ['{D900ECCD-C99B-389D-9075-CB7AF7D9F467}']
  { getters & setters } 

    function get_Count: Int32;
    function get_IsReadOnly: Boolean;

  { methods } 

    procedure RemoveAt(index: Int32);
    function AddAlphaBiLevelEffect(threshold: Single): DNIAlphaBiLevel;
    function AddAlphaCeilingEffect: DNIAlphaCeiling;
    function AddAlphaFloorEffect: DNIAlphaFloor;
    function AddAlphaInverseEffect: DNIAlphaInverse;
    function AddAlphaModulateEffect: DNIAlphaModulate;
    function AddAlphaModulateFixedEffect(amount: Single): DNIAlphaModulateFixed;
    function AddAlphaReplaceEffect(alpha: Single): DNIAlphaReplace;
    function AddBiLevelEffect(threshold: Single): DNIBiLevel;
    function AddBlurEffect(radius: Double; grow: Boolean): DNIBlur;
    function AddColorChangeEffect: DNIColorChange;
    function AddColorReplaceEffect: DNIColorReplace;
    function AddDuotoneEffect: DNIDuotone;
    function AddFillOverlayEffect: DNIFillOverlay;
    function AddGrayScaleEffect: DNIGrayScale;
    function AddHSLEffect(hue: Single; saturation: Single; luminance: Single): DNIHSL;
    function AddLuminanceEffect(brightness: Single; contrast: Single): DNILuminance;
    function AddTintEffect(hue: Single; amount: Single): DNITint;
    function &Contains(item: DNIImageTransformOperation): Boolean;
    procedure CopyTo(&array: TArray<DNIImageTransformOperation>; arrayIndex: Int32);
    function GetEnumerator: DDN.mscorlib.DNIEnumerator<DNIImageTransformOperation>;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Count: Int32 read get_Count;
    property IsReadOnly: Boolean read get_IsReadOnly;
  end;

  TDNImageTransformOperationCollection = class(TDNGenericImport<DNImageTransformOperationCollectionClass, DNImageTransformOperationCollection>) end;

  //-------------namespace: Aspose.Slides----------------
  DNFillFormatClass = interface(DNPVIObjectClass)
  ['{1743C8D5-396D-5FBD-80D2-09ED343DA4A0}']
  end;

  [DNTypeName('Aspose.Slides.FillFormat')]
  DNFillFormat = interface(DNPVIObject)
  ['{E2413CCF-6632-39EB-8F31-AC422E6CE54F}']
  { getters & setters } 

    function get_FillType: DNFillType;
    procedure set_FillType(value: DNFillType);
    function get_SolidFillColor: DNIColorFormat;
    function get_GradientFormat: DNIGradientFormat;
    function get_PatternFormat: DNIPatternFormat;
    function get_PictureFillFormat: DNIPictureFillFormat;
    function get_RotateWithShape: DNNullableBool;
    procedure set_RotateWithShape(value: DNNullableBool);

  { methods } 

    function GetEffective: DNIFillFormatEffectiveData;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property FillType: DNFillType read get_FillType write set_FillType;
    property SolidFillColor: DNIColorFormat read get_SolidFillColor;
    property GradientFormat: DNIGradientFormat read get_GradientFormat;
    property PatternFormat: DNIPatternFormat read get_PatternFormat;
    property PictureFillFormat: DNIPictureFillFormat read get_PictureFillFormat;
    property RotateWithShape: DNNullableBool read get_RotateWithShape write set_RotateWithShape;
  end;

  TDNFillFormat = class(TDNGenericImport<DNFillFormatClass, DNFillFormat>) end;

  //-------------namespace: Aspose.Slides----------------
  DNGradientFormatClass = interface(DNPVIObjectClass)
  ['{7CC04100-5ADE-5DF9-B956-DA5B8BAC4CFD}']
  end;

  [DNTypeName('Aspose.Slides.GradientFormat')]
  DNGradientFormat = interface(DNPVIObject)
  ['{0719D300-4D31-3437-8BA8-124FA7A61592}']
  { getters & setters } 

    function get_TileFlip: DNTileFlip;
    procedure set_TileFlip(value: DNTileFlip);
    function get_GradientDirection: DNGradientDirection;
    procedure set_GradientDirection(value: DNGradientDirection);
    function get_LinearGradientAngle: Single;
    procedure set_LinearGradientAngle(value: Single);
    function get_LinearGradientScaled: DNNullableBool;
    procedure set_LinearGradientScaled(value: DNNullableBool);
    function get_GradientShape: DNGradientShape;
    procedure set_GradientShape(value: DNGradientShape);
    function get_GradientStops: DNIGradientStopCollection;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property TileFlip: DNTileFlip read get_TileFlip write set_TileFlip;
    property GradientDirection: DNGradientDirection read get_GradientDirection write set_GradientDirection;
    property LinearGradientAngle: Single read get_LinearGradientAngle write set_LinearGradientAngle;
    property LinearGradientScaled: DNNullableBool read get_LinearGradientScaled write set_LinearGradientScaled;
    property GradientShape: DNGradientShape read get_GradientShape write set_GradientShape;
    property GradientStops: DNIGradientStopCollection read get_GradientStops;
  end;

  TDNGradientFormat = class(TDNGenericImport<DNGradientFormatClass, DNGradientFormat>) end;

  //-------------namespace: Aspose.Slides----------------
  DNGradientStopClass = interface(DNPVIObjectClass)
  ['{7A44486D-18C6-538B-9238-FFBDE5C4081A}']
  end;

  [DNTypeName('Aspose.Slides.GradientStop')]
  DNGradientStop = interface(DNPVIObject)
  ['{16C9E179-CE91-340C-B294-6F606B4FA9D8}']
  { getters & setters } 

    function get_Position: Single;
    procedure set_Position(value: Single);
    function get_Color: DNIColorFormat;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Position: Single read get_Position write set_Position;
    property Color: DNIColorFormat read get_Color;
  end;

  TDNGradientStop = class(TDNGenericImport<DNGradientStopClass, DNGradientStop>) end;

  //-------------namespace: Aspose.Slides----------------
  DNGradientStopCollectionClass = interface(DNPVIObjectClass)
  ['{0D6FA51A-26CF-5494-943B-16EB4B244599}']
  end;

  [DNTypeName('Aspose.Slides.GradientStopCollection')]
  DNGradientStopCollection = interface(DNPVIObject)
  ['{E68E20CA-A043-3188-95F3-0AE78E79BA77}']
  { getters & setters } 

    function get_Count: Int32;
    function get_IsSynchronized: Boolean;
    function get_SyncRoot: DDN.mscorlib.DNObject;

  { methods } 

    procedure Insert(index: Int32; position: Single; color: DDN.System.Drawing.DNColor); overload;
    procedure Insert(index: Int32; position: Single; presetColor: DNPresetColor); overload;
    procedure Insert(index: Int32; position: Single; schemeColor: DNSchemeColor); overload;
    procedure RemoveAt(index: Int32);
    function GetEnumerator: DDN.mscorlib.DNIEnumerator<DNIGradientStop>;
    procedure CopyTo(&array: DDN.mscorlib.DNArray; index: Int32);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Count: Int32 read get_Count;
    property IsSynchronized: Boolean read get_IsSynchronized;
    property SyncRoot: DDN.mscorlib.DNObject read get_SyncRoot;
  end;

  TDNGradientStopCollection = class(TDNGenericImport<DNGradientStopCollectionClass, DNGradientStopCollection>) end;

  //-------------namespace: Aspose.Slides----------------
  DNHyperlinkClass = interface(DNPVIObjectClass)
  ['{814D6340-640B-5BF7-B1CF-C022A3370133}']
  { static getter & setter } 

    {class} function get_NoAction: DNHyperlink;
    {class} function get_Media: DNHyperlink;
    {class} function get_NextSlide: DNHyperlink;
    {class} function get_PreviousSlide: DNHyperlink;
    {class} function get_FirstSlide: DNHyperlink;
    {class} function get_LastSlide: DNHyperlink;
    {class} function get_LastVievedSlide: DNHyperlink;
    {class} function get_EndShow: DNHyperlink;

  { constructors } 

    {class} function init(url: string): DNHyperlink; overload;
    {class} function init(slide: DNISlide): DNHyperlink; overload;
    {class} function init(source: DNHyperlink; targetFrame: string; tooltip: string; history: Boolean; stopSoundsOnClick: Boolean; highlightClick: Boolean): DNHyperlink; overload;

  { static propertys } 

    {class} property NoAction: DNHyperlink read get_NoAction;
    {class} property Media: DNHyperlink read get_Media;
    {class} property NextSlide: DNHyperlink read get_NextSlide;
    {class} property PreviousSlide: DNHyperlink read get_PreviousSlide;
    {class} property FirstSlide: DNHyperlink read get_FirstSlide;
    {class} property LastSlide: DNHyperlink read get_LastSlide;
    {class} property LastVievedSlide: DNHyperlink read get_LastVievedSlide;
    {class} property EndShow: DNHyperlink read get_EndShow;
  end;

  [DNTypeName('Aspose.Slides.Hyperlink')]
  DNHyperlink = interface(DNPVIObject)
  ['{C70CC6C3-A109-3C88-8B9A-9AB3315A0B7B}']
  { getters & setters } 

    function get_ActionType: DNHyperlinkActionType;
    function get_ExternalUrl: string;
    function get_TargetSlide: DNISlide;
    function get_TargetFrame: string;
    procedure set_TargetFrame(value: string);
    function get_Tooltip: string;
    procedure set_Tooltip(value: string);
    function get_History: Boolean;
    procedure set_History(value: Boolean);
    function get_HighlightClick: Boolean;
    procedure set_HighlightClick(value: Boolean);
    function get_StopSoundOnClick: Boolean;
    procedure set_StopSoundOnClick(value: Boolean);
    function get_ColorSource: DNHyperlinkColorSource;
    procedure set_ColorSource(value: DNHyperlinkColorSource);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean; overload;
    function Equals(hlink: DNIHyperlink): Boolean; overload;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property ActionType: DNHyperlinkActionType read get_ActionType;
    property ExternalUrl: string read get_ExternalUrl;
    property TargetSlide: DNISlide read get_TargetSlide;
    property TargetFrame: string read get_TargetFrame write set_TargetFrame;
    property Tooltip: string read get_Tooltip write set_Tooltip;
    property History: Boolean read get_History write set_History;
    property HighlightClick: Boolean read get_HighlightClick write set_HighlightClick;
    property StopSoundOnClick: Boolean read get_StopSoundOnClick write set_StopSoundOnClick;
    property ColorSource: DNHyperlinkColorSource read get_ColorSource write set_ColorSource;
  end;

  TDNHyperlink = class(TDNGenericImport<DNHyperlinkClass, DNHyperlink>) end;

  //-------------namespace: Aspose.Slides----------------
  DNLightRigClass = interface(DNPVIObjectClass)
  ['{1148980C-D780-5F3D-BE42-6AF03CDE3914}']
  end;

  [DNTypeName('Aspose.Slides.LightRig')]
  DNLightRig = interface(DNPVIObject)
  ['{5C094089-BE08-42E6-9145-8E35F16D8421}']
  { getters & setters } 

    function get_Direction: DNLightingDirection;
    procedure set_Direction(value: DNLightingDirection);
    function get_LightType: DNLightRigPresetType;
    procedure set_LightType(value: DNLightRigPresetType);

  { methods } 

    procedure SetRotation(latitude: Single; longitude: Single; revolution: Single);
    function GetRotation: TArray<Single>;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Direction: DNLightingDirection read get_Direction write set_Direction;
    property LightType: DNLightRigPresetType read get_LightType write set_LightType;
  end;

  TDNLightRig = class(TDNGenericImport<DNLightRigClass, DNLightRig>) end;

  //-------------namespace: Aspose.Slides----------------
  DNLineFillFormatClass = interface(DNPVIObjectClass)
  ['{7ABD77D7-F471-5B26-AE10-28893C61F6E9}']
  end;

  [DNTypeName('Aspose.Slides.LineFillFormat')]
  DNLineFillFormat = interface(DNPVIObject)
  ['{B2BADB31-998E-3CF6-AF35-1FD8DDCD0E77}']
  { getters & setters } 

    function get_FillType: DNFillType;
    procedure set_FillType(value: DNFillType);
    function get_RotateWithShape: DNNullableBool;
    procedure set_RotateWithShape(value: DNNullableBool);
    function get_SolidFillColor: DNIColorFormat;
    function get_GradientFormat: DNIGradientFormat;
    function get_PatternFormat: DNIPatternFormat;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property FillType: DNFillType read get_FillType write set_FillType;
    property RotateWithShape: DNNullableBool read get_RotateWithShape write set_RotateWithShape;
    property SolidFillColor: DNIColorFormat read get_SolidFillColor;
    property GradientFormat: DNIGradientFormat read get_GradientFormat;
    property PatternFormat: DNIPatternFormat read get_PatternFormat;
  end;

  TDNLineFillFormat = class(TDNGenericImport<DNLineFillFormatClass, DNLineFillFormat>) end;

  //-------------namespace: Aspose.Slides----------------
  DNLineFormatClass = interface(DNPVIObjectClass)
  ['{F82AD5FB-CB36-5C00-87EF-D6D4CE3755EC}']
  end;

  [DNTypeName('Aspose.Slides.LineFormat')]
  DNLineFormat = interface(DNPVIObject)
  ['{1ECC52A1-4013-3DC0-8E97-6482CD58E720}']
  { getters & setters } 

    function get_IsFormatNotDefined: Boolean;
    function get_FillFormat: DNILineFillFormat;
    function get_SketchFormat: DNISketchFormat;
    function get_Width: Double;
    procedure set_Width(value: Double);
    function get_DashStyle: DNLineDashStyle;
    procedure set_DashStyle(value: DNLineDashStyle);
    function get_CustomDashPattern: TArray<Single>;
    procedure set_CustomDashPattern(value: TArray<Single>);
    function get_CapStyle: DNLineCapStyle;
    procedure set_CapStyle(value: DNLineCapStyle);
    function get_Style: DNLineStyle;
    procedure set_Style(value: DNLineStyle);
    function get_Alignment: DNLineAlignment;
    procedure set_Alignment(value: DNLineAlignment);
    function get_JoinStyle: DNLineJoinStyle;
    procedure set_JoinStyle(value: DNLineJoinStyle);
    function get_MiterLimit: Single;
    procedure set_MiterLimit(value: Single);
    function get_BeginArrowheadStyle: DNLineArrowheadStyle;
    procedure set_BeginArrowheadStyle(value: DNLineArrowheadStyle);
    function get_EndArrowheadStyle: DNLineArrowheadStyle;
    procedure set_EndArrowheadStyle(value: DNLineArrowheadStyle);
    function get_BeginArrowheadWidth: DNLineArrowheadWidth;
    procedure set_BeginArrowheadWidth(value: DNLineArrowheadWidth);
    function get_EndArrowheadWidth: DNLineArrowheadWidth;
    procedure set_EndArrowheadWidth(value: DNLineArrowheadWidth);
    function get_BeginArrowheadLength: DNLineArrowheadLength;
    procedure set_BeginArrowheadLength(value: DNLineArrowheadLength);
    function get_EndArrowheadLength: DNLineArrowheadLength;
    procedure set_EndArrowheadLength(value: DNLineArrowheadLength);

  { methods } 

    function Equals(lineFormat: DNILineFormat): Boolean; overload;
    function GetEffective: DNILineFormatEffectiveData;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean; overload;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property IsFormatNotDefined: Boolean read get_IsFormatNotDefined;
    property FillFormat: DNILineFillFormat read get_FillFormat;
    property SketchFormat: DNISketchFormat read get_SketchFormat;
    property Width: Double read get_Width write set_Width;
    property DashStyle: DNLineDashStyle read get_DashStyle write set_DashStyle;
    property CustomDashPattern: TArray<Single> read get_CustomDashPattern write set_CustomDashPattern;
    property CapStyle: DNLineCapStyle read get_CapStyle write set_CapStyle;
    property Style: DNLineStyle read get_Style write set_Style;
    property Alignment: DNLineAlignment read get_Alignment write set_Alignment;
    property JoinStyle: DNLineJoinStyle read get_JoinStyle write set_JoinStyle;
    property MiterLimit: Single read get_MiterLimit write set_MiterLimit;
    property BeginArrowheadStyle: DNLineArrowheadStyle read get_BeginArrowheadStyle write set_BeginArrowheadStyle;
    property EndArrowheadStyle: DNLineArrowheadStyle read get_EndArrowheadStyle write set_EndArrowheadStyle;
    property BeginArrowheadWidth: DNLineArrowheadWidth read get_BeginArrowheadWidth write set_BeginArrowheadWidth;
    property EndArrowheadWidth: DNLineArrowheadWidth read get_EndArrowheadWidth write set_EndArrowheadWidth;
    property BeginArrowheadLength: DNLineArrowheadLength read get_BeginArrowheadLength write set_BeginArrowheadLength;
    property EndArrowheadLength: DNLineArrowheadLength read get_EndArrowheadLength write set_EndArrowheadLength;
  end;

  TDNLineFormat = class(TDNGenericImport<DNLineFormatClass, DNLineFormat>) end;

  //-------------namespace: Aspose.Slides----------------
  DNParagraphFormatClass = interface(DNPVIObjectClass)
  ['{E1BB1CA6-8FBB-5465-AC11-49E425400561}']
  { constructors } 

    {class} function init: DNParagraphFormat;

  end;

  [DNTypeName('Aspose.Slides.ParagraphFormat')]
  DNParagraphFormat = interface(DNPVIObject)
  ['{DF3DE8FF-FE22-4672-8246-F3F2E1D3BF89}']
  { getters & setters } 

    function get_Alignment: DNTextAlignment;
    procedure set_Alignment(value: DNTextAlignment);
    function get_SpaceWithin: Single;
    procedure set_SpaceWithin(value: Single);
    function get_SpaceBefore: Single;
    procedure set_SpaceBefore(value: Single);
    function get_SpaceAfter: Single;
    procedure set_SpaceAfter(value: Single);
    function get_EastAsianLineBreak: DNNullableBool;
    procedure set_EastAsianLineBreak(value: DNNullableBool);
    function get_RightToLeft: DNNullableBool;
    procedure set_RightToLeft(value: DNNullableBool);
    function get_LatinLineBreak: DNNullableBool;
    procedure set_LatinLineBreak(value: DNNullableBool);
    function get_HangingPunctuation: DNNullableBool;
    procedure set_HangingPunctuation(value: DNNullableBool);
    function get_MarginLeft: Single;
    procedure set_MarginLeft(value: Single);
    function get_MarginRight: Single;
    procedure set_MarginRight(value: Single);
    function get_Indent: Single;
    procedure set_Indent(value: Single);
    function get_DefaultTabSize: Single;
    procedure set_DefaultTabSize(value: Single);
    function get_Tabs: DNITabCollection;
    function get_FontAlignment: DNFontAlignment;
    procedure set_FontAlignment(value: DNFontAlignment);

  { methods } 

    function GetEffective: DNIParagraphFormatEffectiveData;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Alignment: DNTextAlignment read get_Alignment write set_Alignment;
    property SpaceWithin: Single read get_SpaceWithin write set_SpaceWithin;
    property SpaceBefore: Single read get_SpaceBefore write set_SpaceBefore;
    property SpaceAfter: Single read get_SpaceAfter write set_SpaceAfter;
    property EastAsianLineBreak: DNNullableBool read get_EastAsianLineBreak write set_EastAsianLineBreak;
    property RightToLeft: DNNullableBool read get_RightToLeft write set_RightToLeft;
    property LatinLineBreak: DNNullableBool read get_LatinLineBreak write set_LatinLineBreak;
    property HangingPunctuation: DNNullableBool read get_HangingPunctuation write set_HangingPunctuation;
    property MarginLeft: Single read get_MarginLeft write set_MarginLeft;
    property MarginRight: Single read get_MarginRight write set_MarginRight;
    property Indent: Single read get_Indent write set_Indent;
    property DefaultTabSize: Single read get_DefaultTabSize write set_DefaultTabSize;
    property Tabs: DNITabCollection read get_Tabs;
    property FontAlignment: DNFontAlignment read get_FontAlignment write set_FontAlignment;
  end;

  TDNParagraphFormat = class(TDNGenericImport<DNParagraphFormatClass, DNParagraphFormat>) end;

  //-------------namespace: Aspose.Slides----------------
  DNPatternFormatClass = interface(DNPVIObjectClass)
  ['{6834213D-FB60-5954-A357-38ACAACE3165}']
  end;

  [DNTypeName('Aspose.Slides.PatternFormat')]
  DNPatternFormat = interface(DNPVIObject)
  ['{4CE513BD-142A-3E6C-A99B-708140841EE2}']
  { getters & setters } 

    function get_PatternStyle: DNPatternStyle;
    procedure set_PatternStyle(value: DNPatternStyle);
    function get_ForeColor: DNIColorFormat;
    function get_BackColor: DNIColorFormat;

  { methods } 

    function GetTileImage(background: DDN.System.Drawing.DNColor; foreground: DDN.System.Drawing.DNColor): DDN.System.Drawing.DNBitmap; overload;
    function GetTileImage(styleColor: DDN.System.Drawing.DNColor): DDN.System.Drawing.DNBitmap; overload;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property PatternStyle: DNPatternStyle read get_PatternStyle write set_PatternStyle;
    property ForeColor: DNIColorFormat read get_ForeColor;
    property BackColor: DNIColorFormat read get_BackColor;
  end;

  TDNPatternFormat = class(TDNGenericImport<DNPatternFormatClass, DNPatternFormat>) end;

  //-------------namespace: Aspose.Slides----------------
  DNPictureClass = interface(DNPVIObjectClass)
  ['{77D045A9-4050-55BA-AD70-A3849FC3D09E}']
  end;

  [DNTypeName('Aspose.Slides.Picture')]
  DNPicture = interface(DNPVIObject)
  ['{83ED52A5-3C84-3DFB-A428-7D505E9DC576}']
  { getters & setters } 

    function get_Image: DNIPPImage;
    procedure set_Image(value: DNIPPImage);
    function get_LinkPathLong: string;
    procedure set_LinkPathLong(value: string);
    function get_ImageTransform: DNIImageTransformOperationCollection;
    function get_Presentation: DNIPresentation;
    function get_Slide: DNIBaseSlide;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Image: DNIPPImage read get_Image write set_Image;
    property LinkPathLong: string read get_LinkPathLong write set_LinkPathLong;
    property ImageTransform: DNIImageTransformOperationCollection read get_ImageTransform;
    property Presentation: DNIPresentation read get_Presentation;
    property Slide: DNIBaseSlide read get_Slide;
  end;

  TDNPicture = class(TDNGenericImport<DNPictureClass, DNPicture>) end;

  //-------------namespace: Aspose.Slides----------------
  DNPictureFillFormatClass = interface(DNPVIObjectClass)
  ['{CF0DEAF3-4579-572D-B412-0E289A80758F}']
  end;

  [DNTypeName('Aspose.Slides.PictureFillFormat')]
  DNPictureFillFormat = interface(DNPVIObject)
  ['{699F7A33-A682-3DEA-B2CA-5980BC9F2D58}']
  { getters & setters } 

    function get_Dpi: Int32;
    procedure set_Dpi(value: Int32);
    function get_PictureFillMode: DNPictureFillMode;
    procedure set_PictureFillMode(value: DNPictureFillMode);
    function get_Picture: DNISlidesPicture;
    function get_CropLeft: Single;
    procedure set_CropLeft(value: Single);
    function get_CropTop: Single;
    procedure set_CropTop(value: Single);
    function get_CropRight: Single;
    procedure set_CropRight(value: Single);
    function get_CropBottom: Single;
    procedure set_CropBottom(value: Single);
    function get_StretchOffsetLeft: Single;
    procedure set_StretchOffsetLeft(value: Single);
    function get_StretchOffsetTop: Single;
    procedure set_StretchOffsetTop(value: Single);
    function get_StretchOffsetRight: Single;
    procedure set_StretchOffsetRight(value: Single);
    function get_StretchOffsetBottom: Single;
    procedure set_StretchOffsetBottom(value: Single);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Dpi: Int32 read get_Dpi write set_Dpi;
    property PictureFillMode: DNPictureFillMode read get_PictureFillMode write set_PictureFillMode;
    property Picture: DNISlidesPicture read get_Picture;
    property CropLeft: Single read get_CropLeft write set_CropLeft;
    property CropTop: Single read get_CropTop write set_CropTop;
    property CropRight: Single read get_CropRight write set_CropRight;
    property CropBottom: Single read get_CropBottom write set_CropBottom;
    property StretchOffsetLeft: Single read get_StretchOffsetLeft write set_StretchOffsetLeft;
    property StretchOffsetTop: Single read get_StretchOffsetTop write set_StretchOffsetTop;
    property StretchOffsetRight: Single read get_StretchOffsetRight write set_StretchOffsetRight;
    property StretchOffsetBottom: Single read get_StretchOffsetBottom write set_StretchOffsetBottom;
  end;

  TDNPictureFillFormat = class(TDNGenericImport<DNPictureFillFormatClass, DNPictureFillFormat>) end;

  //-------------namespace: Aspose.Slides----------------
  DNShapeBevelClass = interface(DNPVIObjectClass)
  ['{5D3E0416-319B-5AF7-9BBF-AB4F22122AFC}']
  { constructors } 

    {class} function init(bIsTopBevel: Boolean): DNShapeBevel;

  end;

  [DNTypeName('Aspose.Slides.ShapeBevel')]
  DNShapeBevel = interface(DNPVIObject)
  ['{144A7C0F-3F50-3F6F-845E-1B7A141FD1BB}']
  { getters & setters } 

    function get_Width: Double;
    procedure set_Width(value: Double);
    function get_Height: Double;
    procedure set_Height(value: Double);
    function get_BevelType: DNBevelPresetType;
    procedure set_BevelType(value: DNBevelPresetType);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Width: Double read get_Width write set_Width;
    property Height: Double read get_Height write set_Height;
    property BevelType: DNBevelPresetType read get_BevelType write set_BevelType;
  end;

  TDNShapeBevel = class(TDNGenericImport<DNShapeBevelClass, DNShapeBevel>) end;

  //-------------namespace: Aspose.Slides----------------
  DNSketchFormatClass = interface(DNPVIObjectClass)
  ['{64CC063E-2462-5429-99AE-42A2E5518E2E}']
  end;

  [DNTypeName('Aspose.Slides.SketchFormat')]
  DNSketchFormat = interface(DNPVIObject)
  ['{4A917CC4-EE53-31BE-B75F-61884A2F8940}']
  { getters & setters } 

    function get_SketchType: DNLineSketchType;
    procedure set_SketchType(value: DNLineSketchType);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property SketchType: DNLineSketchType read get_SketchType write set_SketchType;
  end;

  TDNSketchFormat = class(TDNGenericImport<DNSketchFormatClass, DNSketchFormat>) end;

  //-------------namespace: Aspose.Slides----------------
  DNTabClass = interface(DNPVIObjectClass)
  ['{80015206-99C7-5ECC-9B52-D1340C8A7F17}']
  { constructors } 

    {class} function init(position: Double; align: DNTabAlignment): DNTab;

  end;

  [DNTypeName('Aspose.Slides.Tab')]
  DNTab = interface(DNPVIObject)
  ['{2BDAD4D8-538D-4D32-961F-A2FCB122A7AC}']
  { getters & setters } 

    function get_Position: Double;
    procedure set_Position(value: Double);
    function get_Alignment: DNTabAlignment;
    procedure set_Alignment(value: DNTabAlignment);

  { methods } 

    function CompareTo(obj: DDN.mscorlib.DNObject): Int32;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Position: Double read get_Position write set_Position;
    property Alignment: DNTabAlignment read get_Alignment write set_Alignment;
  end;

  TDNTab = class(TDNGenericImport<DNTabClass, DNTab>) end;

  //-------------namespace: Aspose.Slides----------------
  DNTextFrameFormatClass = interface(DNPVIObjectClass)
  ['{0D2570E4-1E3E-55F3-96B8-5FD505EADFF2}']
  { constructors } 

    {class} function init: DNTextFrameFormat;

  end;

  [DNTypeName('Aspose.Slides.TextFrameFormat')]
  DNTextFrameFormat = interface(DNPVIObject)
  ['{ADC8E6F4-1F10-4B58-A669-C674FEB48D48}']
  { getters & setters } 

    function get_ThreeDFormat: DNIThreeDFormat;
    function get_MarginLeft: Double;
    procedure set_MarginLeft(value: Double);
    function get_MarginRight: Double;
    procedure set_MarginRight(value: Double);
    function get_MarginTop: Double;
    procedure set_MarginTop(value: Double);
    function get_MarginBottom: Double;
    procedure set_MarginBottom(value: Double);
    function get_WrapText: DNNullableBool;
    procedure set_WrapText(value: DNNullableBool);
    function get_AnchoringType: DNTextAnchorType;
    procedure set_AnchoringType(value: DNTextAnchorType);
    function get_CenterText: DNNullableBool;
    procedure set_CenterText(value: DNNullableBool);
    function get_TextVerticalType: DNTextVerticalType;
    procedure set_TextVerticalType(value: DNTextVerticalType);
    function get_AutofitType: DNTextAutofitType;
    procedure set_AutofitType(value: DNTextAutofitType);
    function get_ColumnCount: Int32;
    procedure set_ColumnCount(value: Int32);
    function get_ColumnSpacing: Double;
    procedure set_ColumnSpacing(value: Double);
    function get_RotationAngle: Single;
    procedure set_RotationAngle(value: Single);
    function get_Transform: DNTextShapeType;
    procedure set_Transform(value: DNTextShapeType);
    function get_KeepTextFlat: Boolean;
    procedure set_KeepTextFlat(value: Boolean);

  { methods } 

    function GetEffective: DNITextFrameFormatEffectiveData;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property ThreeDFormat: DNIThreeDFormat read get_ThreeDFormat;
    property MarginLeft: Double read get_MarginLeft write set_MarginLeft;
    property MarginRight: Double read get_MarginRight write set_MarginRight;
    property MarginTop: Double read get_MarginTop write set_MarginTop;
    property MarginBottom: Double read get_MarginBottom write set_MarginBottom;
    property WrapText: DNNullableBool read get_WrapText write set_WrapText;
    property AnchoringType: DNTextAnchorType read get_AnchoringType write set_AnchoringType;
    property CenterText: DNNullableBool read get_CenterText write set_CenterText;
    property TextVerticalType: DNTextVerticalType read get_TextVerticalType write set_TextVerticalType;
    property AutofitType: DNTextAutofitType read get_AutofitType write set_AutofitType;
    property ColumnCount: Int32 read get_ColumnCount write set_ColumnCount;
    property ColumnSpacing: Double read get_ColumnSpacing write set_ColumnSpacing;
    property RotationAngle: Single read get_RotationAngle write set_RotationAngle;
    property Transform: DNTextShapeType read get_Transform write set_Transform;
    property KeepTextFlat: Boolean read get_KeepTextFlat write set_KeepTextFlat;
  end;

  TDNTextFrameFormat = class(TDNGenericImport<DNTextFrameFormatClass, DNTextFrameFormat>) end;

  //-------------namespace: Aspose.Slides----------------
  DNTextStyleClass = interface(DNPVIObjectClass)
  ['{E14168E3-422F-501D-B8D1-A4F7FB815B05}']
  { static fields getter & setter } 

   function __fakeFieldGet_MaxLevelCount: Byte;

  { static fields } 

    {class} property MaxLevelCount: Byte read __fakeFieldGet_MaxLevelCount;

  end;

  [DNTypeName('Aspose.Slides.TextStyle')]
  DNTextStyle = interface(DNPVIObject)
  ['{F1FD463A-17D6-3953-9C6F-BE23AB259669}']
  { getters & setters } 

    function get_DefaultParagraphFormat: DNIParagraphFormat;

  { methods } 

    function GetLevel(index: Int32): DNIParagraphFormat;
    function GetEffective: DNITextStyleEffectiveData;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property DefaultParagraphFormat: DNIParagraphFormat read get_DefaultParagraphFormat;
  end;

  TDNTextStyle = class(TDNGenericImport<DNTextStyleClass, DNTextStyle>) end;

  //-------------namespace: Aspose.Slides----------------
  DNThreeDFormatClass = interface(DNPVIObjectClass)
  ['{A7DD7492-9437-5348-8AAC-FCCAA75C7680}']
  end;

  [DNTypeName('Aspose.Slides.ThreeDFormat')]
  DNThreeDFormat = interface(DNPVIObject)
  ['{54C4BC5C-183B-3284-AF5D-4E9F4D0D7889}']
  { getters & setters } 

    function get_ContourWidth: Double;
    procedure set_ContourWidth(value: Double);
    function get_ExtrusionHeight: Double;
    procedure set_ExtrusionHeight(value: Double);
    function get_Depth: Double;
    procedure set_Depth(value: Double);
    function get_BevelTop: DNIShapeBevel;
    function get_BevelBottom: DNIShapeBevel;
    function get_ContourColor: DNIColorFormat;
    function get_ExtrusionColor: DNIColorFormat;
    function get_Camera: DNICamera;
    function get_LightRig: DNILightRig;
    function get_Material: DNMaterialPresetType;
    procedure set_Material(value: DNMaterialPresetType);

  { methods } 

    function GetEffective: DNIThreeDFormatEffectiveData;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property ContourWidth: Double read get_ContourWidth write set_ContourWidth;
    property ExtrusionHeight: Double read get_ExtrusionHeight write set_ExtrusionHeight;
    property Depth: Double read get_Depth write set_Depth;
    property BevelTop: DNIShapeBevel read get_BevelTop;
    property BevelBottom: DNIShapeBevel read get_BevelBottom;
    property ContourColor: DNIColorFormat read get_ContourColor;
    property ExtrusionColor: DNIColorFormat read get_ExtrusionColor;
    property Camera: DNICamera read get_Camera;
    property LightRig: DNILightRig read get_LightRig;
    property Material: DNMaterialPresetType read get_Material write set_Material;
  end;

  TDNThreeDFormat = class(TDNGenericImport<DNThreeDFormatClass, DNThreeDFormat>) end;

  //-------------namespace: Aspose.Slides----------------
  DNRowCollectionClass = interface(DNObjectClass)
  ['{6F7CACAF-9C45-567E-A191-DB4D66B19A33}']
  end;

  [DNTypeName('Aspose.Slides.RowCollection')]
  DNRowCollection = interface(DDN.mscorlib.DNICollection)
  ['{76C3CD3D-2DEF-34B5-9774-EBF608397A45}']
  { getters & setters } 

    function get_Count: Int32;
    function get_IsSynchronized: Boolean;
    function get_SyncRoot: DDN.mscorlib.DNObject;

  { methods } 

    function AddClone(templ: DNIRow; withAttachedRows: Boolean): TArray<DNIRow>;
    function InsertClone(index: Int32; templ: DNIRow; withAttachedRows: Boolean): TArray<DNIRow>;
    procedure RemoveAt(firstRowIndex: Int32; withAttachedRows: Boolean);
    function GetEnumerator: DDN.mscorlib.DNIEnumerator<DNIRow>;
    procedure CopyTo(&array: DDN.mscorlib.DNArray; index: Int32);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Count: Int32 read get_Count;
    property IsSynchronized: Boolean read get_IsSynchronized;
    property SyncRoot: DDN.mscorlib.DNObject read get_SyncRoot;
  end;

  TDNRowCollection = class(TDNGenericImport<DNRowCollectionClass, DNRowCollection>) end;

  //-------------namespace: Aspose.Slides----------------
  DNRowFormatClass = interface(DDN.mscorlib.DNObjectClass)
  ['{E5762F82-9B5C-50A2-8A42-A438886CBDF9}']
  end;

  [DNTypeName('Aspose.Slides.RowFormat')]
  DNRowFormat = interface(DDN.mscorlib.DNObject)
  ['{7E642E43-FA54-3E60-AC00-529EEC70E23D}']
  { methods } 

    function GetEffective: DNIRowFormatEffectiveData;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNRowFormat = class(TDNGenericImport<DNRowFormatClass, DNRowFormat>) end;

  //-------------namespace: Aspose.Slides----------------
  DNSectionClass = interface(DDN.mscorlib.DNObjectClass)
  ['{5CADC58B-F494-5844-B062-A92073CAEF7A}']
  end;

  [DNTypeName('Aspose.Slides.Section')]
  DNSection = interface(DDN.mscorlib.DNObject)
  ['{57C1D7F6-0090-33E5-9A3C-FC0C7EA03637}']
  { getters & setters } 

    function get_Name: string;
    procedure set_Name(value: string);
    function get_StartedFromSlide: DNISlide;

  { methods } 

    function GetSlidesListOfSection: DNISectionSlideCollection;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Name: string read get_Name write set_Name;
    property StartedFromSlide: DNISlide read get_StartedFromSlide;
  end;

  TDNSection = class(TDNGenericImport<DNSectionClass, DNSection>) end;

  //-------------namespace: Aspose.Slides----------------
  DNSectionCollectionClass = interface(DNObjectClass)
  ['{0A9C2E96-2AA3-5B63-BD99-E97DFE6FE557}']
  end;

  [DNTypeName('Aspose.Slides.SectionCollection')]
  DNSectionCollection = interface(DDN.mscorlib.DNICollection)
  ['{5B4FB11E-B753-3643-9D7C-EF5788C39F62}']
  { getters & setters } 

    function get_Count: Int32;
    function get_IsSynchronized: Boolean;
    function get_SyncRoot: DDN.mscorlib.DNObject;

  { methods } 

    function AddSection(name: string; startedFromSlide: DNISlide): DNISection;
    function AppendEmptySection(name: string): DNISection;
    function AddEmptySection(name: string; index: Int32): DNISection;
    function IndexOf(section: DNISection): Int32;
    procedure RemoveSectionWithSlides(section: DNISection);
    procedure RemoveSection(section: DNISection);
    procedure ReorderSectionWithSlides(section: DNISection; index: Int32);
    procedure CopyTo(&array: DDN.mscorlib.DNArray; index: Int32);
    function GetEnumerator: DDN.mscorlib.DNIEnumerator<DNISection>;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Count: Int32 read get_Count;
    property IsSynchronized: Boolean read get_IsSynchronized;
    property SyncRoot: DDN.mscorlib.DNObject read get_SyncRoot;
  end;

  TDNSectionCollection = class(TDNGenericImport<DNSectionCollectionClass, DNSectionCollection>) end;

  //-------------namespace: Aspose.Slides----------------
  DNSectionSlideCollectionClass = interface(DNObjectClass)
  ['{35178BC2-553C-5A79-91AF-2DD308AA483C}']
  end;

  [DNTypeName('Aspose.Slides.SectionSlideCollection')]
  DNSectionSlideCollection = interface(DDN.mscorlib.DNICollection)
  ['{0E41EF3A-284F-3CCE-B7AF-33BAFC475725}']
  { getters & setters } 

    function get_Count: Int32;
    function get_IsSynchronized: Boolean;
    function get_SyncRoot: DDN.mscorlib.DNObject;

  { methods } 

    procedure CopyTo(&array: DDN.mscorlib.DNArray; index: Int32);
    function GetEnumerator: DDN.mscorlib.DNIEnumerator<DNISlide>;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Count: Int32 read get_Count;
    property IsSynchronized: Boolean read get_IsSynchronized;
    property SyncRoot: DDN.mscorlib.DNObject read get_SyncRoot;
  end;

  TDNSectionSlideCollection = class(TDNGenericImport<DNSectionSlideCollectionClass, DNSectionSlideCollection>) end;

  //-------------namespace: Aspose.Slides----------------
  DNShapeClass = interface(DDN.mscorlib.DNObjectClass)
  ['{E9135A13-8E8B-5A8C-A226-016D3064B86C}']
  end;

  [DNTypeName('Aspose.Slides.Shape')]
  DNShape = interface(DDN.mscorlib.DNObject)
  ['{E1A70A21-5C83-3031-A0C4-FCDCA84C174A}']
  { getters & setters } 

    function get_IsTextHolder: Boolean;
    function get_Placeholder: DNIPlaceholder;
    function get_CustomData: DNICustomData;
    function get_RawFrame: DNIShapeFrame;
    procedure set_RawFrame(value: DNIShapeFrame);
    function get_Frame: DNIShapeFrame;
    procedure set_Frame(value: DNIShapeFrame);
    function get_LineFormat: DNILineFormat;
    function get_ThreeDFormat: DNIThreeDFormat;
    function get_EffectFormat: DNIEffectFormat;
    function get_FillFormat: DNIFillFormat;
    function get_HyperlinkClick: DNIHyperlink;
    procedure set_HyperlinkClick(value: DNIHyperlink);
    function get_HyperlinkMouseOver: DNIHyperlink;
    procedure set_HyperlinkMouseOver(value: DNIHyperlink);
    function get_HyperlinkManager: DNIHyperlinkManager;
    function get_Hidden: Boolean;
    procedure set_Hidden(value: Boolean);
    function get_ZOrderPosition: Int32;
    function get_ConnectionSiteCount: Int32;
    function get_Rotation: Single;
    procedure set_Rotation(value: Single);
    function get_X: Single;
    procedure set_X(value: Single);
    function get_Y: Single;
    procedure set_Y(value: Single);
    function get_Width: Single;
    procedure set_Width(value: Single);
    function get_Height: Single;
    procedure set_Height(value: Single);
    function get_BlackWhiteMode: DNBlackWhiteMode;
    procedure set_BlackWhiteMode(value: DNBlackWhiteMode);
    function get_UniqueId: UInt32;
    function get_OfficeInteropShapeId: UInt32;
    function get_AlternativeText: string;
    procedure set_AlternativeText(value: string);
    function get_AlternativeTextTitle: string;
    procedure set_AlternativeTextTitle(value: string);
    function get_Name: string;
    procedure set_Name(value: string);
    function get_ShapeLock: DNIBaseShapeLock;
    function get_IsGrouped: Boolean;
    function get_ParentGroup: DNIGroupShape;
    function get_Slide: DNIBaseSlide;
    function get_Presentation: DNIPresentation;

  { methods } 

    procedure RemovePlaceholder;
    function AddPlaceholder(placeholderToCopyFrom: DNIPlaceholder): DNIPlaceholder;
    function GetThumbnail: DDN.System.Drawing.DNBitmap; overload;
    function GetThumbnail(bounds: DNShapeThumbnailBounds; scaleX: Single; scaleY: Single): DDN.System.Drawing.DNBitmap; overload;
    procedure WriteAsSvg(stream: DDN.mscorlib.DNStream); overload;
    procedure WriteAsSvg(stream: DDN.mscorlib.DNStream; svgOptions: DNISVGOptions); overload;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property IsTextHolder: Boolean read get_IsTextHolder;
    property Placeholder: DNIPlaceholder read get_Placeholder;
    property CustomData: DNICustomData read get_CustomData;
    property RawFrame: DNIShapeFrame read get_RawFrame write set_RawFrame;
    property Frame: DNIShapeFrame read get_Frame write set_Frame;
    property LineFormat: DNILineFormat read get_LineFormat;
    property ThreeDFormat: DNIThreeDFormat read get_ThreeDFormat;
    property EffectFormat: DNIEffectFormat read get_EffectFormat;
    property FillFormat: DNIFillFormat read get_FillFormat;
    property HyperlinkClick: DNIHyperlink read get_HyperlinkClick write set_HyperlinkClick;
    property HyperlinkMouseOver: DNIHyperlink read get_HyperlinkMouseOver write set_HyperlinkMouseOver;
    property HyperlinkManager: DNIHyperlinkManager read get_HyperlinkManager;
    property Hidden: Boolean read get_Hidden write set_Hidden;
    property ZOrderPosition: Int32 read get_ZOrderPosition;
    property ConnectionSiteCount: Int32 read get_ConnectionSiteCount;
    property Rotation: Single read get_Rotation write set_Rotation;
    property X: Single read get_X write set_X;
    property Y: Single read get_Y write set_Y;
    property Width: Single read get_Width write set_Width;
    property Height: Single read get_Height write set_Height;
    property BlackWhiteMode: DNBlackWhiteMode read get_BlackWhiteMode write set_BlackWhiteMode;
    property UniqueId: UInt32 read get_UniqueId;
    property OfficeInteropShapeId: UInt32 read get_OfficeInteropShapeId;
    property AlternativeText: string read get_AlternativeText write set_AlternativeText;
    property AlternativeTextTitle: string read get_AlternativeTextTitle write set_AlternativeTextTitle;
    property Name: string read get_Name write set_Name;
    property ShapeLock: DNIBaseShapeLock read get_ShapeLock;
    property IsGrouped: Boolean read get_IsGrouped;
    property ParentGroup: DNIGroupShape read get_ParentGroup;
    property Slide: DNIBaseSlide read get_Slide;
    property Presentation: DNIPresentation read get_Presentation;
  end;

  TDNShape = class(TDNGenericImport<DNShapeClass, DNShape>) end;

  //-------------namespace: Aspose.Slides----------------
  DNGeometryShapeClass = interface(DNShapeClass)
  ['{921511E5-1C0D-5217-94B8-5FB6B1323181}']
  end;

  [DNTypeName('Aspose.Slides.GeometryShape')]
  DNGeometryShape = interface(DNShape)
  ['{6CB72E9E-B5BD-3992-8755-5C4B90AD31A0}']
  { getters & setters } 

    function get_ShapeStyle: DNIShapeStyle;
    function get_ShapeType: DNShapeType;
    procedure set_ShapeType(value: DNShapeType);
    function get_Adjustments: DNIAdjustValueCollection;
    function get_IsTextHolder: Boolean;
    function get_Placeholder: DNIPlaceholder;
    function get_CustomData: DNICustomData;
    function get_RawFrame: DNIShapeFrame;
    procedure set_RawFrame(value: DNIShapeFrame);
    function get_Frame: DNIShapeFrame;
    procedure set_Frame(value: DNIShapeFrame);
    function get_LineFormat: DNILineFormat;
    function get_ThreeDFormat: DNIThreeDFormat;
    function get_EffectFormat: DNIEffectFormat;
    function get_FillFormat: DNIFillFormat;
    function get_HyperlinkClick: DNIHyperlink;
    procedure set_HyperlinkClick(value: DNIHyperlink);
    function get_HyperlinkMouseOver: DNIHyperlink;
    procedure set_HyperlinkMouseOver(value: DNIHyperlink);
    function get_HyperlinkManager: DNIHyperlinkManager;
    function get_Hidden: Boolean;
    procedure set_Hidden(value: Boolean);
    function get_ZOrderPosition: Int32;
    function get_ConnectionSiteCount: Int32;
    function get_Rotation: Single;
    procedure set_Rotation(value: Single);
    function get_X: Single;
    procedure set_X(value: Single);
    function get_Y: Single;
    procedure set_Y(value: Single);
    function get_Width: Single;
    procedure set_Width(value: Single);
    function get_Height: Single;
    procedure set_Height(value: Single);
    function get_BlackWhiteMode: DNBlackWhiteMode;
    procedure set_BlackWhiteMode(value: DNBlackWhiteMode);
    function get_UniqueId: UInt32;
    function get_OfficeInteropShapeId: UInt32;
    function get_AlternativeText: string;
    procedure set_AlternativeText(value: string);
    function get_AlternativeTextTitle: string;
    procedure set_AlternativeTextTitle(value: string);
    function get_Name: string;
    procedure set_Name(value: string);
    function get_ShapeLock: DNIBaseShapeLock;
    function get_IsGrouped: Boolean;
    function get_ParentGroup: DNIGroupShape;
    function get_Slide: DNIBaseSlide;
    function get_Presentation: DNIPresentation;

  { methods } 

    function GetGeometryPaths: TArray<DNIGeometryPath>;
    procedure SetGeometryPath(geometryPath: DNIGeometryPath);
    procedure SetGeometryPaths(geometryPaths: TArray<DNIGeometryPath>);
    function CreateShapeElements: TArray<DNIShapeElement>;
    procedure RemovePlaceholder;
    function AddPlaceholder(placeholderToCopyFrom: DNIPlaceholder): DNIPlaceholder;
    function GetThumbnail: DDN.System.Drawing.DNBitmap; overload;
    function GetThumbnail(bounds: DNShapeThumbnailBounds; scaleX: Single; scaleY: Single): DDN.System.Drawing.DNBitmap; overload;
    procedure WriteAsSvg(stream: DDN.mscorlib.DNStream); overload;
    procedure WriteAsSvg(stream: DDN.mscorlib.DNStream; svgOptions: DNISVGOptions); overload;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property ShapeStyle: DNIShapeStyle read get_ShapeStyle;
    property ShapeType: DNShapeType read get_ShapeType write set_ShapeType;
    property Adjustments: DNIAdjustValueCollection read get_Adjustments;
    property IsTextHolder: Boolean read get_IsTextHolder;
    property Placeholder: DNIPlaceholder read get_Placeholder;
    property CustomData: DNICustomData read get_CustomData;
    property RawFrame: DNIShapeFrame read get_RawFrame write set_RawFrame;
    property Frame: DNIShapeFrame read get_Frame write set_Frame;
    property LineFormat: DNILineFormat read get_LineFormat;
    property ThreeDFormat: DNIThreeDFormat read get_ThreeDFormat;
    property EffectFormat: DNIEffectFormat read get_EffectFormat;
    property FillFormat: DNIFillFormat read get_FillFormat;
    property HyperlinkClick: DNIHyperlink read get_HyperlinkClick write set_HyperlinkClick;
    property HyperlinkMouseOver: DNIHyperlink read get_HyperlinkMouseOver write set_HyperlinkMouseOver;
    property HyperlinkManager: DNIHyperlinkManager read get_HyperlinkManager;
    property Hidden: Boolean read get_Hidden write set_Hidden;
    property ZOrderPosition: Int32 read get_ZOrderPosition;
    property ConnectionSiteCount: Int32 read get_ConnectionSiteCount;
    property Rotation: Single read get_Rotation write set_Rotation;
    property X: Single read get_X write set_X;
    property Y: Single read get_Y write set_Y;
    property Width: Single read get_Width write set_Width;
    property Height: Single read get_Height write set_Height;
    property BlackWhiteMode: DNBlackWhiteMode read get_BlackWhiteMode write set_BlackWhiteMode;
    property UniqueId: UInt32 read get_UniqueId;
    property OfficeInteropShapeId: UInt32 read get_OfficeInteropShapeId;
    property AlternativeText: string read get_AlternativeText write set_AlternativeText;
    property AlternativeTextTitle: string read get_AlternativeTextTitle write set_AlternativeTextTitle;
    property Name: string read get_Name write set_Name;
    property ShapeLock: DNIBaseShapeLock read get_ShapeLock;
    property IsGrouped: Boolean read get_IsGrouped;
    property ParentGroup: DNIGroupShape read get_ParentGroup;
    property Slide: DNIBaseSlide read get_Slide;
    property Presentation: DNIPresentation read get_Presentation;
  end;

  TDNGeometryShape = class(TDNGenericImport<DNGeometryShapeClass, DNGeometryShape>) end;

  //-------------namespace: Aspose.Slides----------------
  DNAutoShapeClass = interface(DNGeometryShapeClass)
  ['{91DC0F9E-3438-5306-93F4-3D90F259A11F}']
  end;

  [DNTypeName('Aspose.Slides.AutoShape')]
  DNAutoShape = interface(DNGeometryShape)
  ['{FF17C3C9-28EA-3B13-A7B6-BFD0124BEDE1}']
  { getters & setters } 

    function get_ShapeLock: DNIAutoShapeLock;
    function get_AutoShapeLock: DNIAutoShapeLock;
    function get_TextFrame: DNITextFrame;
    function get_UseBackgroundFill: Boolean;
    procedure set_UseBackgroundFill(value: Boolean);
    function get_ShapeStyle: DNIShapeStyle;
    function get_ShapeType: DNShapeType;
    procedure set_ShapeType(value: DNShapeType);
    function get_Adjustments: DNIAdjustValueCollection;
    function get_IsTextHolder: Boolean;
    function get_Placeholder: DNIPlaceholder;
    function get_CustomData: DNICustomData;
    function get_RawFrame: DNIShapeFrame;
    procedure set_RawFrame(value: DNIShapeFrame);
    function get_Frame: DNIShapeFrame;
    procedure set_Frame(value: DNIShapeFrame);
    function get_LineFormat: DNILineFormat;
    function get_ThreeDFormat: DNIThreeDFormat;
    function get_EffectFormat: DNIEffectFormat;
    function get_FillFormat: DNIFillFormat;
    function get_HyperlinkClick: DNIHyperlink;
    procedure set_HyperlinkClick(value: DNIHyperlink);
    function get_HyperlinkMouseOver: DNIHyperlink;
    procedure set_HyperlinkMouseOver(value: DNIHyperlink);
    function get_HyperlinkManager: DNIHyperlinkManager;
    function get_Hidden: Boolean;
    procedure set_Hidden(value: Boolean);
    function get_ZOrderPosition: Int32;
    function get_ConnectionSiteCount: Int32;
    function get_Rotation: Single;
    procedure set_Rotation(value: Single);
    function get_X: Single;
    procedure set_X(value: Single);
    function get_Y: Single;
    procedure set_Y(value: Single);
    function get_Width: Single;
    procedure set_Width(value: Single);
    function get_Height: Single;
    procedure set_Height(value: Single);
    function get_BlackWhiteMode: DNBlackWhiteMode;
    procedure set_BlackWhiteMode(value: DNBlackWhiteMode);
    function get_UniqueId: UInt32;
    function get_OfficeInteropShapeId: UInt32;
    function get_AlternativeText: string;
    procedure set_AlternativeText(value: string);
    function get_AlternativeTextTitle: string;
    procedure set_AlternativeTextTitle(value: string);
    function get_Name: string;
    procedure set_Name(value: string);
    function get_IsGrouped: Boolean;
    function get_ParentGroup: DNIGroupShape;
    function get_Slide: DNIBaseSlide;
    function get_Presentation: DNIPresentation;

  { methods } 

    function AddTextFrame(text: string): DNITextFrame;
    function GetGeometryPaths: TArray<DNIGeometryPath>;
    procedure SetGeometryPath(geometryPath: DNIGeometryPath);
    procedure SetGeometryPaths(geometryPaths: TArray<DNIGeometryPath>);
    function CreateShapeElements: TArray<DNIShapeElement>;
    procedure RemovePlaceholder;
    function AddPlaceholder(placeholderToCopyFrom: DNIPlaceholder): DNIPlaceholder;
    function GetThumbnail: DDN.System.Drawing.DNBitmap; overload;
    function GetThumbnail(bounds: DNShapeThumbnailBounds; scaleX: Single; scaleY: Single): DDN.System.Drawing.DNBitmap; overload;
    procedure WriteAsSvg(stream: DDN.mscorlib.DNStream); overload;
    procedure WriteAsSvg(stream: DDN.mscorlib.DNStream; svgOptions: DNISVGOptions); overload;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property ShapeLock: DNIAutoShapeLock read get_ShapeLock;
    property AutoShapeLock: DNIAutoShapeLock read get_AutoShapeLock;
    property TextFrame: DNITextFrame read get_TextFrame;
    property UseBackgroundFill: Boolean read get_UseBackgroundFill write set_UseBackgroundFill;
    property ShapeStyle: DNIShapeStyle read get_ShapeStyle;
    property ShapeType: DNShapeType read get_ShapeType write set_ShapeType;
    property Adjustments: DNIAdjustValueCollection read get_Adjustments;
    property IsTextHolder: Boolean read get_IsTextHolder;
    property Placeholder: DNIPlaceholder read get_Placeholder;
    property CustomData: DNICustomData read get_CustomData;
    property RawFrame: DNIShapeFrame read get_RawFrame write set_RawFrame;
    property Frame: DNIShapeFrame read get_Frame write set_Frame;
    property LineFormat: DNILineFormat read get_LineFormat;
    property ThreeDFormat: DNIThreeDFormat read get_ThreeDFormat;
    property EffectFormat: DNIEffectFormat read get_EffectFormat;
    property FillFormat: DNIFillFormat read get_FillFormat;
    property HyperlinkClick: DNIHyperlink read get_HyperlinkClick write set_HyperlinkClick;
    property HyperlinkMouseOver: DNIHyperlink read get_HyperlinkMouseOver write set_HyperlinkMouseOver;
    property HyperlinkManager: DNIHyperlinkManager read get_HyperlinkManager;
    property Hidden: Boolean read get_Hidden write set_Hidden;
    property ZOrderPosition: Int32 read get_ZOrderPosition;
    property ConnectionSiteCount: Int32 read get_ConnectionSiteCount;
    property Rotation: Single read get_Rotation write set_Rotation;
    property X: Single read get_X write set_X;
    property Y: Single read get_Y write set_Y;
    property Width: Single read get_Width write set_Width;
    property Height: Single read get_Height write set_Height;
    property BlackWhiteMode: DNBlackWhiteMode read get_BlackWhiteMode write set_BlackWhiteMode;
    property UniqueId: UInt32 read get_UniqueId;
    property OfficeInteropShapeId: UInt32 read get_OfficeInteropShapeId;
    property AlternativeText: string read get_AlternativeText write set_AlternativeText;
    property AlternativeTextTitle: string read get_AlternativeTextTitle write set_AlternativeTextTitle;
    property Name: string read get_Name write set_Name;
    property IsGrouped: Boolean read get_IsGrouped;
    property ParentGroup: DNIGroupShape read get_ParentGroup;
    property Slide: DNIBaseSlide read get_Slide;
    property Presentation: DNIPresentation read get_Presentation;
  end;

  TDNAutoShape = class(TDNGenericImport<DNAutoShapeClass, DNAutoShape>) end;

  //-------------namespace: Aspose.Slides----------------
  DNConnectorClass = interface(DNGeometryShapeClass)
  ['{ACD0AA14-7FDE-56BB-BD9E-3F1A6C3BD029}']
  end;

  [DNTypeName('Aspose.Slides.Connector')]
  DNConnector = interface(DNGeometryShape)
  ['{2340AA64-B45C-33FC-B0C2-A20BAD4CE09E}']
  { getters & setters } 

    function get_ShapeLock: DNIConnectorLock;
    function get_ConnectorLock: DNIConnectorLock;
    function get_ShapeType: DNShapeType;
    procedure set_ShapeType(value: DNShapeType);
    function get_StartShapeConnectedTo: DNIShape;
    procedure set_StartShapeConnectedTo(value: DNIShape);
    function get_EndShapeConnectedTo: DNIShape;
    procedure set_EndShapeConnectedTo(value: DNIShape);
    function get_StartShapeConnectionSiteIndex: UInt32;
    procedure set_StartShapeConnectionSiteIndex(value: UInt32);
    function get_EndShapeConnectionSiteIndex: UInt32;
    procedure set_EndShapeConnectionSiteIndex(value: UInt32);
    function get_ShapeStyle: DNIShapeStyle;
    function get_Adjustments: DNIAdjustValueCollection;
    function get_IsTextHolder: Boolean;
    function get_Placeholder: DNIPlaceholder;
    function get_CustomData: DNICustomData;
    function get_RawFrame: DNIShapeFrame;
    procedure set_RawFrame(value: DNIShapeFrame);
    function get_Frame: DNIShapeFrame;
    procedure set_Frame(value: DNIShapeFrame);
    function get_LineFormat: DNILineFormat;
    function get_ThreeDFormat: DNIThreeDFormat;
    function get_EffectFormat: DNIEffectFormat;
    function get_FillFormat: DNIFillFormat;
    function get_HyperlinkClick: DNIHyperlink;
    procedure set_HyperlinkClick(value: DNIHyperlink);
    function get_HyperlinkMouseOver: DNIHyperlink;
    procedure set_HyperlinkMouseOver(value: DNIHyperlink);
    function get_HyperlinkManager: DNIHyperlinkManager;
    function get_Hidden: Boolean;
    procedure set_Hidden(value: Boolean);
    function get_ZOrderPosition: Int32;
    function get_ConnectionSiteCount: Int32;
    function get_Rotation: Single;
    procedure set_Rotation(value: Single);
    function get_X: Single;
    procedure set_X(value: Single);
    function get_Y: Single;
    procedure set_Y(value: Single);
    function get_Width: Single;
    procedure set_Width(value: Single);
    function get_Height: Single;
    procedure set_Height(value: Single);
    function get_BlackWhiteMode: DNBlackWhiteMode;
    procedure set_BlackWhiteMode(value: DNBlackWhiteMode);
    function get_UniqueId: UInt32;
    function get_OfficeInteropShapeId: UInt32;
    function get_AlternativeText: string;
    procedure set_AlternativeText(value: string);
    function get_AlternativeTextTitle: string;
    procedure set_AlternativeTextTitle(value: string);
    function get_Name: string;
    procedure set_Name(value: string);
    function get_IsGrouped: Boolean;
    function get_ParentGroup: DNIGroupShape;
    function get_Slide: DNIBaseSlide;
    function get_Presentation: DNIPresentation;

  { methods } 

    procedure Reroute;
    function GetGeometryPaths: TArray<DNIGeometryPath>;
    procedure SetGeometryPath(geometryPath: DNIGeometryPath);
    procedure SetGeometryPaths(geometryPaths: TArray<DNIGeometryPath>);
    function CreateShapeElements: TArray<DNIShapeElement>;
    procedure RemovePlaceholder;
    function AddPlaceholder(placeholderToCopyFrom: DNIPlaceholder): DNIPlaceholder;
    function GetThumbnail: DDN.System.Drawing.DNBitmap; overload;
    function GetThumbnail(bounds: DNShapeThumbnailBounds; scaleX: Single; scaleY: Single): DDN.System.Drawing.DNBitmap; overload;
    procedure WriteAsSvg(stream: DDN.mscorlib.DNStream); overload;
    procedure WriteAsSvg(stream: DDN.mscorlib.DNStream; svgOptions: DNISVGOptions); overload;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property ShapeLock: DNIConnectorLock read get_ShapeLock;
    property ConnectorLock: DNIConnectorLock read get_ConnectorLock;
    property ShapeType: DNShapeType read get_ShapeType write set_ShapeType;
    property StartShapeConnectedTo: DNIShape read get_StartShapeConnectedTo write set_StartShapeConnectedTo;
    property EndShapeConnectedTo: DNIShape read get_EndShapeConnectedTo write set_EndShapeConnectedTo;
    property StartShapeConnectionSiteIndex: UInt32 read get_StartShapeConnectionSiteIndex write set_StartShapeConnectionSiteIndex;
    property EndShapeConnectionSiteIndex: UInt32 read get_EndShapeConnectionSiteIndex write set_EndShapeConnectionSiteIndex;
    property ShapeStyle: DNIShapeStyle read get_ShapeStyle;
    property Adjustments: DNIAdjustValueCollection read get_Adjustments;
    property IsTextHolder: Boolean read get_IsTextHolder;
    property Placeholder: DNIPlaceholder read get_Placeholder;
    property CustomData: DNICustomData read get_CustomData;
    property RawFrame: DNIShapeFrame read get_RawFrame write set_RawFrame;
    property Frame: DNIShapeFrame read get_Frame write set_Frame;
    property LineFormat: DNILineFormat read get_LineFormat;
    property ThreeDFormat: DNIThreeDFormat read get_ThreeDFormat;
    property EffectFormat: DNIEffectFormat read get_EffectFormat;
    property FillFormat: DNIFillFormat read get_FillFormat;
    property HyperlinkClick: DNIHyperlink read get_HyperlinkClick write set_HyperlinkClick;
    property HyperlinkMouseOver: DNIHyperlink read get_HyperlinkMouseOver write set_HyperlinkMouseOver;
    property HyperlinkManager: DNIHyperlinkManager read get_HyperlinkManager;
    property Hidden: Boolean read get_Hidden write set_Hidden;
    property ZOrderPosition: Int32 read get_ZOrderPosition;
    property ConnectionSiteCount: Int32 read get_ConnectionSiteCount;
    property Rotation: Single read get_Rotation write set_Rotation;
    property X: Single read get_X write set_X;
    property Y: Single read get_Y write set_Y;
    property Width: Single read get_Width write set_Width;
    property Height: Single read get_Height write set_Height;
    property BlackWhiteMode: DNBlackWhiteMode read get_BlackWhiteMode write set_BlackWhiteMode;
    property UniqueId: UInt32 read get_UniqueId;
    property OfficeInteropShapeId: UInt32 read get_OfficeInteropShapeId;
    property AlternativeText: string read get_AlternativeText write set_AlternativeText;
    property AlternativeTextTitle: string read get_AlternativeTextTitle write set_AlternativeTextTitle;
    property Name: string read get_Name write set_Name;
    property IsGrouped: Boolean read get_IsGrouped;
    property ParentGroup: DNIGroupShape read get_ParentGroup;
    property Slide: DNIBaseSlide read get_Slide;
    property Presentation: DNIPresentation read get_Presentation;
  end;

  TDNConnector = class(TDNGenericImport<DNConnectorClass, DNConnector>) end;

  //-------------namespace: Aspose.Slides----------------
  DNPictureFrameClass = interface(DNGeometryShapeClass)
  ['{332A0557-8C03-5225-A332-9CE7DC7405B2}']
  end;

  [DNTypeName('Aspose.Slides.PictureFrame')]
  DNPictureFrame = interface(DNGeometryShape)
  ['{B62F5D89-6A42-33AC-958C-CF5907049749}']
  { getters & setters } 

    function get_Height: Single;
    procedure set_Height(value: Single);
    function get_Width: Single;
    procedure set_Width(value: Single);
    function get_ShapeLock: DNIPictureFrameLock;
    function get_PictureFrameLock: DNIPictureFrameLock;
    function get_ShapeType: DNShapeType;
    procedure set_ShapeType(value: DNShapeType);
    function get_PictureFormat: DNIPictureFillFormat;
    function get_RelativeScaleHeight: Single;
    procedure set_RelativeScaleHeight(value: Single);
    function get_RelativeScaleWidth: Single;
    procedure set_RelativeScaleWidth(value: Single);
    function get_ShapeStyle: DNIShapeStyle;
    function get_Adjustments: DNIAdjustValueCollection;
    function get_IsTextHolder: Boolean;
    function get_Placeholder: DNIPlaceholder;
    function get_CustomData: DNICustomData;
    function get_RawFrame: DNIShapeFrame;
    procedure set_RawFrame(value: DNIShapeFrame);
    function get_Frame: DNIShapeFrame;
    procedure set_Frame(value: DNIShapeFrame);
    function get_LineFormat: DNILineFormat;
    function get_ThreeDFormat: DNIThreeDFormat;
    function get_EffectFormat: DNIEffectFormat;
    function get_FillFormat: DNIFillFormat;
    function get_HyperlinkClick: DNIHyperlink;
    procedure set_HyperlinkClick(value: DNIHyperlink);
    function get_HyperlinkMouseOver: DNIHyperlink;
    procedure set_HyperlinkMouseOver(value: DNIHyperlink);
    function get_HyperlinkManager: DNIHyperlinkManager;
    function get_Hidden: Boolean;
    procedure set_Hidden(value: Boolean);
    function get_ZOrderPosition: Int32;
    function get_ConnectionSiteCount: Int32;
    function get_Rotation: Single;
    procedure set_Rotation(value: Single);
    function get_X: Single;
    procedure set_X(value: Single);
    function get_Y: Single;
    procedure set_Y(value: Single);
    function get_BlackWhiteMode: DNBlackWhiteMode;
    procedure set_BlackWhiteMode(value: DNBlackWhiteMode);
    function get_UniqueId: UInt32;
    function get_OfficeInteropShapeId: UInt32;
    function get_AlternativeText: string;
    procedure set_AlternativeText(value: string);
    function get_AlternativeTextTitle: string;
    procedure set_AlternativeTextTitle(value: string);
    function get_Name: string;
    procedure set_Name(value: string);
    function get_IsGrouped: Boolean;
    function get_ParentGroup: DNIGroupShape;
    function get_Slide: DNIBaseSlide;
    function get_Presentation: DNIPresentation;

  { methods } 

    function GetGeometryPaths: TArray<DNIGeometryPath>;
    procedure SetGeometryPath(geometryPath: DNIGeometryPath);
    procedure SetGeometryPaths(geometryPaths: TArray<DNIGeometryPath>);
    function CreateShapeElements: TArray<DNIShapeElement>;
    procedure RemovePlaceholder;
    function AddPlaceholder(placeholderToCopyFrom: DNIPlaceholder): DNIPlaceholder;
    function GetThumbnail: DDN.System.Drawing.DNBitmap; overload;
    function GetThumbnail(bounds: DNShapeThumbnailBounds; scaleX: Single; scaleY: Single): DDN.System.Drawing.DNBitmap; overload;
    procedure WriteAsSvg(stream: DDN.mscorlib.DNStream); overload;
    procedure WriteAsSvg(stream: DDN.mscorlib.DNStream; svgOptions: DNISVGOptions); overload;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Height: Single read get_Height write set_Height;
    property Width: Single read get_Width write set_Width;
    property ShapeLock: DNIPictureFrameLock read get_ShapeLock;
    property PictureFrameLock: DNIPictureFrameLock read get_PictureFrameLock;
    property ShapeType: DNShapeType read get_ShapeType write set_ShapeType;
    property PictureFormat: DNIPictureFillFormat read get_PictureFormat;
    property RelativeScaleHeight: Single read get_RelativeScaleHeight write set_RelativeScaleHeight;
    property RelativeScaleWidth: Single read get_RelativeScaleWidth write set_RelativeScaleWidth;
    property ShapeStyle: DNIShapeStyle read get_ShapeStyle;
    property Adjustments: DNIAdjustValueCollection read get_Adjustments;
    property IsTextHolder: Boolean read get_IsTextHolder;
    property Placeholder: DNIPlaceholder read get_Placeholder;
    property CustomData: DNICustomData read get_CustomData;
    property RawFrame: DNIShapeFrame read get_RawFrame write set_RawFrame;
    property Frame: DNIShapeFrame read get_Frame write set_Frame;
    property LineFormat: DNILineFormat read get_LineFormat;
    property ThreeDFormat: DNIThreeDFormat read get_ThreeDFormat;
    property EffectFormat: DNIEffectFormat read get_EffectFormat;
    property FillFormat: DNIFillFormat read get_FillFormat;
    property HyperlinkClick: DNIHyperlink read get_HyperlinkClick write set_HyperlinkClick;
    property HyperlinkMouseOver: DNIHyperlink read get_HyperlinkMouseOver write set_HyperlinkMouseOver;
    property HyperlinkManager: DNIHyperlinkManager read get_HyperlinkManager;
    property Hidden: Boolean read get_Hidden write set_Hidden;
    property ZOrderPosition: Int32 read get_ZOrderPosition;
    property ConnectionSiteCount: Int32 read get_ConnectionSiteCount;
    property Rotation: Single read get_Rotation write set_Rotation;
    property X: Single read get_X write set_X;
    property Y: Single read get_Y write set_Y;
    property BlackWhiteMode: DNBlackWhiteMode read get_BlackWhiteMode write set_BlackWhiteMode;
    property UniqueId: UInt32 read get_UniqueId;
    property OfficeInteropShapeId: UInt32 read get_OfficeInteropShapeId;
    property AlternativeText: string read get_AlternativeText write set_AlternativeText;
    property AlternativeTextTitle: string read get_AlternativeTextTitle write set_AlternativeTextTitle;
    property Name: string read get_Name write set_Name;
    property IsGrouped: Boolean read get_IsGrouped;
    property ParentGroup: DNIGroupShape read get_ParentGroup;
    property Slide: DNIBaseSlide read get_Slide;
    property Presentation: DNIPresentation read get_Presentation;
  end;

  TDNPictureFrame = class(TDNGenericImport<DNPictureFrameClass, DNPictureFrame>) end;

  //-------------namespace: Aspose.Slides----------------
  DNAudioFrameClass = interface(DNPictureFrameClass)
  ['{8746412F-0602-5883-997A-C00729AA2B33}']
  end;

  [DNTypeName('Aspose.Slides.AudioFrame')]
  DNAudioFrame = interface(DNPictureFrame)
  ['{924439FE-6750-323D-8AC7-CEFAE64C4041}']
  { getters & setters } 

    function get_AudioCdStartTrack: Int32;
    procedure set_AudioCdStartTrack(value: Int32);
    function get_AudioCdStartTrackTime: Int32;
    procedure set_AudioCdStartTrackTime(value: Int32);
    function get_AudioCdEndTrack: Int32;
    procedure set_AudioCdEndTrack(value: Int32);
    function get_AudioCdEndTrackTime: Int32;
    procedure set_AudioCdEndTrackTime(value: Int32);
    function get_Volume: DNAudioVolumeMode;
    procedure set_Volume(value: DNAudioVolumeMode);
    function get_PlayMode: DNAudioPlayModePreset;
    procedure set_PlayMode(value: DNAudioPlayModePreset);
    function get_HideAtShowing: Boolean;
    procedure set_HideAtShowing(value: Boolean);
    function get_PlayLoopMode: Boolean;
    procedure set_PlayLoopMode(value: Boolean);
    function get_PlayAcrossSlides: Boolean;
    procedure set_PlayAcrossSlides(value: Boolean);
    function get_RewindAudio: Boolean;
    procedure set_RewindAudio(value: Boolean);
    function get_Embedded: Boolean;
    function get_LinkPathLong: string;
    procedure set_LinkPathLong(value: string);
    function get_EmbeddedAudio: DNIAudio;
    procedure set_EmbeddedAudio(value: DNIAudio);
    function get_Height: Single;
    procedure set_Height(value: Single);
    function get_Width: Single;
    procedure set_Width(value: Single);
    function get_ShapeLock: DNIPictureFrameLock;
    function get_PictureFrameLock: DNIPictureFrameLock;
    function get_ShapeType: DNShapeType;
    procedure set_ShapeType(value: DNShapeType);
    function get_PictureFormat: DNIPictureFillFormat;
    function get_RelativeScaleHeight: Single;
    procedure set_RelativeScaleHeight(value: Single);
    function get_RelativeScaleWidth: Single;
    procedure set_RelativeScaleWidth(value: Single);
    function get_ShapeStyle: DNIShapeStyle;
    function get_Adjustments: DNIAdjustValueCollection;
    function get_IsTextHolder: Boolean;
    function get_Placeholder: DNIPlaceholder;
    function get_CustomData: DNICustomData;
    function get_RawFrame: DNIShapeFrame;
    procedure set_RawFrame(value: DNIShapeFrame);
    function get_Frame: DNIShapeFrame;
    procedure set_Frame(value: DNIShapeFrame);
    function get_LineFormat: DNILineFormat;
    function get_ThreeDFormat: DNIThreeDFormat;
    function get_EffectFormat: DNIEffectFormat;
    function get_FillFormat: DNIFillFormat;
    function get_HyperlinkClick: DNIHyperlink;
    procedure set_HyperlinkClick(value: DNIHyperlink);
    function get_HyperlinkMouseOver: DNIHyperlink;
    procedure set_HyperlinkMouseOver(value: DNIHyperlink);
    function get_HyperlinkManager: DNIHyperlinkManager;
    function get_Hidden: Boolean;
    procedure set_Hidden(value: Boolean);
    function get_ZOrderPosition: Int32;
    function get_ConnectionSiteCount: Int32;
    function get_Rotation: Single;
    procedure set_Rotation(value: Single);
    function get_X: Single;
    procedure set_X(value: Single);
    function get_Y: Single;
    procedure set_Y(value: Single);
    function get_BlackWhiteMode: DNBlackWhiteMode;
    procedure set_BlackWhiteMode(value: DNBlackWhiteMode);
    function get_UniqueId: UInt32;
    function get_OfficeInteropShapeId: UInt32;
    function get_AlternativeText: string;
    procedure set_AlternativeText(value: string);
    function get_AlternativeTextTitle: string;
    procedure set_AlternativeTextTitle(value: string);
    function get_Name: string;
    procedure set_Name(value: string);
    function get_IsGrouped: Boolean;
    function get_ParentGroup: DNIGroupShape;
    function get_Slide: DNIBaseSlide;
    function get_Presentation: DNIPresentation;

  { methods } 

    function GetGeometryPaths: TArray<DNIGeometryPath>;
    procedure SetGeometryPath(geometryPath: DNIGeometryPath);
    procedure SetGeometryPaths(geometryPaths: TArray<DNIGeometryPath>);
    function CreateShapeElements: TArray<DNIShapeElement>;
    procedure RemovePlaceholder;
    function AddPlaceholder(placeholderToCopyFrom: DNIPlaceholder): DNIPlaceholder;
    function GetThumbnail: DDN.System.Drawing.DNBitmap; overload;
    function GetThumbnail(bounds: DNShapeThumbnailBounds; scaleX: Single; scaleY: Single): DDN.System.Drawing.DNBitmap; overload;
    procedure WriteAsSvg(stream: DDN.mscorlib.DNStream); overload;
    procedure WriteAsSvg(stream: DDN.mscorlib.DNStream; svgOptions: DNISVGOptions); overload;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property AudioCdStartTrack: Int32 read get_AudioCdStartTrack write set_AudioCdStartTrack;
    property AudioCdStartTrackTime: Int32 read get_AudioCdStartTrackTime write set_AudioCdStartTrackTime;
    property AudioCdEndTrack: Int32 read get_AudioCdEndTrack write set_AudioCdEndTrack;
    property AudioCdEndTrackTime: Int32 read get_AudioCdEndTrackTime write set_AudioCdEndTrackTime;
    property Volume: DNAudioVolumeMode read get_Volume write set_Volume;
    property PlayMode: DNAudioPlayModePreset read get_PlayMode write set_PlayMode;
    property HideAtShowing: Boolean read get_HideAtShowing write set_HideAtShowing;
    property PlayLoopMode: Boolean read get_PlayLoopMode write set_PlayLoopMode;
    property PlayAcrossSlides: Boolean read get_PlayAcrossSlides write set_PlayAcrossSlides;
    property RewindAudio: Boolean read get_RewindAudio write set_RewindAudio;
    property Embedded: Boolean read get_Embedded;
    property LinkPathLong: string read get_LinkPathLong write set_LinkPathLong;
    property EmbeddedAudio: DNIAudio read get_EmbeddedAudio write set_EmbeddedAudio;
    property Height: Single read get_Height write set_Height;
    property Width: Single read get_Width write set_Width;
    property ShapeLock: DNIPictureFrameLock read get_ShapeLock;
    property PictureFrameLock: DNIPictureFrameLock read get_PictureFrameLock;
    property ShapeType: DNShapeType read get_ShapeType write set_ShapeType;
    property PictureFormat: DNIPictureFillFormat read get_PictureFormat;
    property RelativeScaleHeight: Single read get_RelativeScaleHeight write set_RelativeScaleHeight;
    property RelativeScaleWidth: Single read get_RelativeScaleWidth write set_RelativeScaleWidth;
    property ShapeStyle: DNIShapeStyle read get_ShapeStyle;
    property Adjustments: DNIAdjustValueCollection read get_Adjustments;
    property IsTextHolder: Boolean read get_IsTextHolder;
    property Placeholder: DNIPlaceholder read get_Placeholder;
    property CustomData: DNICustomData read get_CustomData;
    property RawFrame: DNIShapeFrame read get_RawFrame write set_RawFrame;
    property Frame: DNIShapeFrame read get_Frame write set_Frame;
    property LineFormat: DNILineFormat read get_LineFormat;
    property ThreeDFormat: DNIThreeDFormat read get_ThreeDFormat;
    property EffectFormat: DNIEffectFormat read get_EffectFormat;
    property FillFormat: DNIFillFormat read get_FillFormat;
    property HyperlinkClick: DNIHyperlink read get_HyperlinkClick write set_HyperlinkClick;
    property HyperlinkMouseOver: DNIHyperlink read get_HyperlinkMouseOver write set_HyperlinkMouseOver;
    property HyperlinkManager: DNIHyperlinkManager read get_HyperlinkManager;
    property Hidden: Boolean read get_Hidden write set_Hidden;
    property ZOrderPosition: Int32 read get_ZOrderPosition;
    property ConnectionSiteCount: Int32 read get_ConnectionSiteCount;
    property Rotation: Single read get_Rotation write set_Rotation;
    property X: Single read get_X write set_X;
    property Y: Single read get_Y write set_Y;
    property BlackWhiteMode: DNBlackWhiteMode read get_BlackWhiteMode write set_BlackWhiteMode;
    property UniqueId: UInt32 read get_UniqueId;
    property OfficeInteropShapeId: UInt32 read get_OfficeInteropShapeId;
    property AlternativeText: string read get_AlternativeText write set_AlternativeText;
    property AlternativeTextTitle: string read get_AlternativeTextTitle write set_AlternativeTextTitle;
    property Name: string read get_Name write set_Name;
    property IsGrouped: Boolean read get_IsGrouped;
    property ParentGroup: DNIGroupShape read get_ParentGroup;
    property Slide: DNIBaseSlide read get_Slide;
    property Presentation: DNIPresentation read get_Presentation;
  end;

  TDNAudioFrame = class(TDNGenericImport<DNAudioFrameClass, DNAudioFrame>) end;

  //-------------namespace: Aspose.Slides----------------
  DNVideoFrameClass = interface(DNPictureFrameClass)
  ['{54BBA5E4-7542-566B-AD24-A90A7300281A}']
  end;

  [DNTypeName('Aspose.Slides.VideoFrame')]
  DNVideoFrame = interface(DNPictureFrame)
  ['{7392E3A8-AA6B-33DC-8CDD-5E51BAB7D500}']
  { getters & setters } 

    function get_RewindVideo: Boolean;
    procedure set_RewindVideo(value: Boolean);
    function get_PlayLoopMode: Boolean;
    procedure set_PlayLoopMode(value: Boolean);
    function get_HideAtShowing: Boolean;
    procedure set_HideAtShowing(value: Boolean);
    function get_Volume: DNAudioVolumeMode;
    procedure set_Volume(value: DNAudioVolumeMode);
    function get_PlayMode: DNVideoPlayModePreset;
    procedure set_PlayMode(value: DNVideoPlayModePreset);
    function get_FullScreenMode: Boolean;
    procedure set_FullScreenMode(value: Boolean);
    function get_LinkPathLong: string;
    procedure set_LinkPathLong(value: string);
    function get_EmbeddedVideo: DNIVideo;
    procedure set_EmbeddedVideo(value: DNIVideo);
    function get_Height: Single;
    procedure set_Height(value: Single);
    function get_Width: Single;
    procedure set_Width(value: Single);
    function get_ShapeLock: DNIPictureFrameLock;
    function get_PictureFrameLock: DNIPictureFrameLock;
    function get_ShapeType: DNShapeType;
    procedure set_ShapeType(value: DNShapeType);
    function get_PictureFormat: DNIPictureFillFormat;
    function get_RelativeScaleHeight: Single;
    procedure set_RelativeScaleHeight(value: Single);
    function get_RelativeScaleWidth: Single;
    procedure set_RelativeScaleWidth(value: Single);
    function get_ShapeStyle: DNIShapeStyle;
    function get_Adjustments: DNIAdjustValueCollection;
    function get_IsTextHolder: Boolean;
    function get_Placeholder: DNIPlaceholder;
    function get_CustomData: DNICustomData;
    function get_RawFrame: DNIShapeFrame;
    procedure set_RawFrame(value: DNIShapeFrame);
    function get_Frame: DNIShapeFrame;
    procedure set_Frame(value: DNIShapeFrame);
    function get_LineFormat: DNILineFormat;
    function get_ThreeDFormat: DNIThreeDFormat;
    function get_EffectFormat: DNIEffectFormat;
    function get_FillFormat: DNIFillFormat;
    function get_HyperlinkClick: DNIHyperlink;
    procedure set_HyperlinkClick(value: DNIHyperlink);
    function get_HyperlinkMouseOver: DNIHyperlink;
    procedure set_HyperlinkMouseOver(value: DNIHyperlink);
    function get_HyperlinkManager: DNIHyperlinkManager;
    function get_Hidden: Boolean;
    procedure set_Hidden(value: Boolean);
    function get_ZOrderPosition: Int32;
    function get_ConnectionSiteCount: Int32;
    function get_Rotation: Single;
    procedure set_Rotation(value: Single);
    function get_X: Single;
    procedure set_X(value: Single);
    function get_Y: Single;
    procedure set_Y(value: Single);
    function get_BlackWhiteMode: DNBlackWhiteMode;
    procedure set_BlackWhiteMode(value: DNBlackWhiteMode);
    function get_UniqueId: UInt32;
    function get_OfficeInteropShapeId: UInt32;
    function get_AlternativeText: string;
    procedure set_AlternativeText(value: string);
    function get_AlternativeTextTitle: string;
    procedure set_AlternativeTextTitle(value: string);
    function get_Name: string;
    procedure set_Name(value: string);
    function get_IsGrouped: Boolean;
    function get_ParentGroup: DNIGroupShape;
    function get_Slide: DNIBaseSlide;
    function get_Presentation: DNIPresentation;

  { methods } 

    function GetGeometryPaths: TArray<DNIGeometryPath>;
    procedure SetGeometryPath(geometryPath: DNIGeometryPath);
    procedure SetGeometryPaths(geometryPaths: TArray<DNIGeometryPath>);
    function CreateShapeElements: TArray<DNIShapeElement>;
    procedure RemovePlaceholder;
    function AddPlaceholder(placeholderToCopyFrom: DNIPlaceholder): DNIPlaceholder;
    function GetThumbnail: DDN.System.Drawing.DNBitmap; overload;
    function GetThumbnail(bounds: DNShapeThumbnailBounds; scaleX: Single; scaleY: Single): DDN.System.Drawing.DNBitmap; overload;
    procedure WriteAsSvg(stream: DDN.mscorlib.DNStream); overload;
    procedure WriteAsSvg(stream: DDN.mscorlib.DNStream; svgOptions: DNISVGOptions); overload;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property RewindVideo: Boolean read get_RewindVideo write set_RewindVideo;
    property PlayLoopMode: Boolean read get_PlayLoopMode write set_PlayLoopMode;
    property HideAtShowing: Boolean read get_HideAtShowing write set_HideAtShowing;
    property Volume: DNAudioVolumeMode read get_Volume write set_Volume;
    property PlayMode: DNVideoPlayModePreset read get_PlayMode write set_PlayMode;
    property FullScreenMode: Boolean read get_FullScreenMode write set_FullScreenMode;
    property LinkPathLong: string read get_LinkPathLong write set_LinkPathLong;
    property EmbeddedVideo: DNIVideo read get_EmbeddedVideo write set_EmbeddedVideo;
    property Height: Single read get_Height write set_Height;
    property Width: Single read get_Width write set_Width;
    property ShapeLock: DNIPictureFrameLock read get_ShapeLock;
    property PictureFrameLock: DNIPictureFrameLock read get_PictureFrameLock;
    property ShapeType: DNShapeType read get_ShapeType write set_ShapeType;
    property PictureFormat: DNIPictureFillFormat read get_PictureFormat;
    property RelativeScaleHeight: Single read get_RelativeScaleHeight write set_RelativeScaleHeight;
    property RelativeScaleWidth: Single read get_RelativeScaleWidth write set_RelativeScaleWidth;
    property ShapeStyle: DNIShapeStyle read get_ShapeStyle;
    property Adjustments: DNIAdjustValueCollection read get_Adjustments;
    property IsTextHolder: Boolean read get_IsTextHolder;
    property Placeholder: DNIPlaceholder read get_Placeholder;
    property CustomData: DNICustomData read get_CustomData;
    property RawFrame: DNIShapeFrame read get_RawFrame write set_RawFrame;
    property Frame: DNIShapeFrame read get_Frame write set_Frame;
    property LineFormat: DNILineFormat read get_LineFormat;
    property ThreeDFormat: DNIThreeDFormat read get_ThreeDFormat;
    property EffectFormat: DNIEffectFormat read get_EffectFormat;
    property FillFormat: DNIFillFormat read get_FillFormat;
    property HyperlinkClick: DNIHyperlink read get_HyperlinkClick write set_HyperlinkClick;
    property HyperlinkMouseOver: DNIHyperlink read get_HyperlinkMouseOver write set_HyperlinkMouseOver;
    property HyperlinkManager: DNIHyperlinkManager read get_HyperlinkManager;
    property Hidden: Boolean read get_Hidden write set_Hidden;
    property ZOrderPosition: Int32 read get_ZOrderPosition;
    property ConnectionSiteCount: Int32 read get_ConnectionSiteCount;
    property Rotation: Single read get_Rotation write set_Rotation;
    property X: Single read get_X write set_X;
    property Y: Single read get_Y write set_Y;
    property BlackWhiteMode: DNBlackWhiteMode read get_BlackWhiteMode write set_BlackWhiteMode;
    property UniqueId: UInt32 read get_UniqueId;
    property OfficeInteropShapeId: UInt32 read get_OfficeInteropShapeId;
    property AlternativeText: string read get_AlternativeText write set_AlternativeText;
    property AlternativeTextTitle: string read get_AlternativeTextTitle write set_AlternativeTextTitle;
    property Name: string read get_Name write set_Name;
    property IsGrouped: Boolean read get_IsGrouped;
    property ParentGroup: DNIGroupShape read get_ParentGroup;
    property Slide: DNIBaseSlide read get_Slide;
    property Presentation: DNIPresentation read get_Presentation;
  end;

  TDNVideoFrame = class(TDNGenericImport<DNVideoFrameClass, DNVideoFrame>) end;

  //-------------namespace: Aspose.Slides.SmartArt----------------
  DNSmartArtShapeClass = interface(DNGeometryShapeClass)
  ['{5FABD0CC-870C-59A6-AC9A-B7C8BC06D0F1}']
  end;

  [DNTypeName('Aspose.Slides.SmartArt.SmartArtShape')]
  DNSmartArtShape = interface(DNGeometryShape)
  ['{1F06B1AD-D38F-3004-BD21-A6D7D175D591}']
  { getters & setters } 

    function get_ShapeType: DNShapeType;
    procedure set_ShapeType(value: DNShapeType);
    function get_TextFrame: DNITextFrame;
    function get_ShapeStyle: DNIShapeStyle;
    function get_Adjustments: DNIAdjustValueCollection;
    function get_IsTextHolder: Boolean;
    function get_Placeholder: DNIPlaceholder;
    function get_CustomData: DNICustomData;
    function get_RawFrame: DNIShapeFrame;
    procedure set_RawFrame(value: DNIShapeFrame);
    function get_Frame: DNIShapeFrame;
    procedure set_Frame(value: DNIShapeFrame);
    function get_LineFormat: DNILineFormat;
    function get_ThreeDFormat: DNIThreeDFormat;
    function get_EffectFormat: DNIEffectFormat;
    function get_FillFormat: DNIFillFormat;
    function get_HyperlinkClick: DNIHyperlink;
    procedure set_HyperlinkClick(value: DNIHyperlink);
    function get_HyperlinkMouseOver: DNIHyperlink;
    procedure set_HyperlinkMouseOver(value: DNIHyperlink);
    function get_HyperlinkManager: DNIHyperlinkManager;
    function get_Hidden: Boolean;
    procedure set_Hidden(value: Boolean);
    function get_ZOrderPosition: Int32;
    function get_ConnectionSiteCount: Int32;
    function get_Rotation: Single;
    procedure set_Rotation(value: Single);
    function get_X: Single;
    procedure set_X(value: Single);
    function get_Y: Single;
    procedure set_Y(value: Single);
    function get_Width: Single;
    procedure set_Width(value: Single);
    function get_Height: Single;
    procedure set_Height(value: Single);
    function get_BlackWhiteMode: DNBlackWhiteMode;
    procedure set_BlackWhiteMode(value: DNBlackWhiteMode);
    function get_UniqueId: UInt32;
    function get_OfficeInteropShapeId: UInt32;
    function get_AlternativeText: string;
    procedure set_AlternativeText(value: string);
    function get_AlternativeTextTitle: string;
    procedure set_AlternativeTextTitle(value: string);
    function get_Name: string;
    procedure set_Name(value: string);
    function get_ShapeLock: DNIBaseShapeLock;
    function get_IsGrouped: Boolean;
    function get_ParentGroup: DNIGroupShape;
    function get_Slide: DNIBaseSlide;
    function get_Presentation: DNIPresentation;

  { methods } 

    function GetGeometryPaths: TArray<DNIGeometryPath>;
    procedure SetGeometryPath(geometryPath: DNIGeometryPath);
    procedure SetGeometryPaths(geometryPaths: TArray<DNIGeometryPath>);
    function CreateShapeElements: TArray<DNIShapeElement>;
    procedure RemovePlaceholder;
    function AddPlaceholder(placeholderToCopyFrom: DNIPlaceholder): DNIPlaceholder;
    function GetThumbnail: DDN.System.Drawing.DNBitmap; overload;
    function GetThumbnail(bounds: DNShapeThumbnailBounds; scaleX: Single; scaleY: Single): DDN.System.Drawing.DNBitmap; overload;
    procedure WriteAsSvg(stream: DDN.mscorlib.DNStream); overload;
    procedure WriteAsSvg(stream: DDN.mscorlib.DNStream; svgOptions: DNISVGOptions); overload;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property ShapeType: DNShapeType read get_ShapeType write set_ShapeType;
    property TextFrame: DNITextFrame read get_TextFrame;
    property ShapeStyle: DNIShapeStyle read get_ShapeStyle;
    property Adjustments: DNIAdjustValueCollection read get_Adjustments;
    property IsTextHolder: Boolean read get_IsTextHolder;
    property Placeholder: DNIPlaceholder read get_Placeholder;
    property CustomData: DNICustomData read get_CustomData;
    property RawFrame: DNIShapeFrame read get_RawFrame write set_RawFrame;
    property Frame: DNIShapeFrame read get_Frame write set_Frame;
    property LineFormat: DNILineFormat read get_LineFormat;
    property ThreeDFormat: DNIThreeDFormat read get_ThreeDFormat;
    property EffectFormat: DNIEffectFormat read get_EffectFormat;
    property FillFormat: DNIFillFormat read get_FillFormat;
    property HyperlinkClick: DNIHyperlink read get_HyperlinkClick write set_HyperlinkClick;
    property HyperlinkMouseOver: DNIHyperlink read get_HyperlinkMouseOver write set_HyperlinkMouseOver;
    property HyperlinkManager: DNIHyperlinkManager read get_HyperlinkManager;
    property Hidden: Boolean read get_Hidden write set_Hidden;
    property ZOrderPosition: Int32 read get_ZOrderPosition;
    property ConnectionSiteCount: Int32 read get_ConnectionSiteCount;
    property Rotation: Single read get_Rotation write set_Rotation;
    property X: Single read get_X write set_X;
    property Y: Single read get_Y write set_Y;
    property Width: Single read get_Width write set_Width;
    property Height: Single read get_Height write set_Height;
    property BlackWhiteMode: DNBlackWhiteMode read get_BlackWhiteMode write set_BlackWhiteMode;
    property UniqueId: UInt32 read get_UniqueId;
    property OfficeInteropShapeId: UInt32 read get_OfficeInteropShapeId;
    property AlternativeText: string read get_AlternativeText write set_AlternativeText;
    property AlternativeTextTitle: string read get_AlternativeTextTitle write set_AlternativeTextTitle;
    property Name: string read get_Name write set_Name;
    property ShapeLock: DNIBaseShapeLock read get_ShapeLock;
    property IsGrouped: Boolean read get_IsGrouped;
    property ParentGroup: DNIGroupShape read get_ParentGroup;
    property Slide: DNIBaseSlide read get_Slide;
    property Presentation: DNIPresentation read get_Presentation;
  end;

  TDNSmartArtShape = class(TDNGenericImport<DNSmartArtShapeClass, DNSmartArtShape>) end;

  //-------------namespace: Aspose.Slides----------------
  DNGraphicalObjectClass = interface(DNShapeClass)
  ['{8BBA8D47-C80A-57B7-9CEE-EF1BC2038803}']
  end;

  [DNTypeName('Aspose.Slides.GraphicalObject')]
  DNGraphicalObject = interface(DNShape)
  ['{0D7EABE1-6D23-3385-95A9-681773C60006}']
  { getters & setters } 

    function get_ShapeLock: DNIGraphicalObjectLock;
    function get_GraphicalObjectLock: DNIGraphicalObjectLock;
    function get_IsTextHolder: Boolean;
    function get_Placeholder: DNIPlaceholder;
    function get_CustomData: DNICustomData;
    function get_RawFrame: DNIShapeFrame;
    procedure set_RawFrame(value: DNIShapeFrame);
    function get_Frame: DNIShapeFrame;
    procedure set_Frame(value: DNIShapeFrame);
    function get_LineFormat: DNILineFormat;
    function get_ThreeDFormat: DNIThreeDFormat;
    function get_EffectFormat: DNIEffectFormat;
    function get_FillFormat: DNIFillFormat;
    function get_HyperlinkClick: DNIHyperlink;
    procedure set_HyperlinkClick(value: DNIHyperlink);
    function get_HyperlinkMouseOver: DNIHyperlink;
    procedure set_HyperlinkMouseOver(value: DNIHyperlink);
    function get_HyperlinkManager: DNIHyperlinkManager;
    function get_Hidden: Boolean;
    procedure set_Hidden(value: Boolean);
    function get_ZOrderPosition: Int32;
    function get_ConnectionSiteCount: Int32;
    function get_Rotation: Single;
    procedure set_Rotation(value: Single);
    function get_X: Single;
    procedure set_X(value: Single);
    function get_Y: Single;
    procedure set_Y(value: Single);
    function get_Width: Single;
    procedure set_Width(value: Single);
    function get_Height: Single;
    procedure set_Height(value: Single);
    function get_BlackWhiteMode: DNBlackWhiteMode;
    procedure set_BlackWhiteMode(value: DNBlackWhiteMode);
    function get_UniqueId: UInt32;
    function get_OfficeInteropShapeId: UInt32;
    function get_AlternativeText: string;
    procedure set_AlternativeText(value: string);
    function get_AlternativeTextTitle: string;
    procedure set_AlternativeTextTitle(value: string);
    function get_Name: string;
    procedure set_Name(value: string);
    function get_IsGrouped: Boolean;
    function get_ParentGroup: DNIGroupShape;
    function get_Slide: DNIBaseSlide;
    function get_Presentation: DNIPresentation;

  { methods } 

    procedure RemovePlaceholder;
    function AddPlaceholder(placeholderToCopyFrom: DNIPlaceholder): DNIPlaceholder;
    function GetThumbnail: DDN.System.Drawing.DNBitmap; overload;
    function GetThumbnail(bounds: DNShapeThumbnailBounds; scaleX: Single; scaleY: Single): DDN.System.Drawing.DNBitmap; overload;
    procedure WriteAsSvg(stream: DDN.mscorlib.DNStream); overload;
    procedure WriteAsSvg(stream: DDN.mscorlib.DNStream; svgOptions: DNISVGOptions); overload;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property ShapeLock: DNIGraphicalObjectLock read get_ShapeLock;
    property GraphicalObjectLock: DNIGraphicalObjectLock read get_GraphicalObjectLock;
    property IsTextHolder: Boolean read get_IsTextHolder;
    property Placeholder: DNIPlaceholder read get_Placeholder;
    property CustomData: DNICustomData read get_CustomData;
    property RawFrame: DNIShapeFrame read get_RawFrame write set_RawFrame;
    property Frame: DNIShapeFrame read get_Frame write set_Frame;
    property LineFormat: DNILineFormat read get_LineFormat;
    property ThreeDFormat: DNIThreeDFormat read get_ThreeDFormat;
    property EffectFormat: DNIEffectFormat read get_EffectFormat;
    property FillFormat: DNIFillFormat read get_FillFormat;
    property HyperlinkClick: DNIHyperlink read get_HyperlinkClick write set_HyperlinkClick;
    property HyperlinkMouseOver: DNIHyperlink read get_HyperlinkMouseOver write set_HyperlinkMouseOver;
    property HyperlinkManager: DNIHyperlinkManager read get_HyperlinkManager;
    property Hidden: Boolean read get_Hidden write set_Hidden;
    property ZOrderPosition: Int32 read get_ZOrderPosition;
    property ConnectionSiteCount: Int32 read get_ConnectionSiteCount;
    property Rotation: Single read get_Rotation write set_Rotation;
    property X: Single read get_X write set_X;
    property Y: Single read get_Y write set_Y;
    property Width: Single read get_Width write set_Width;
    property Height: Single read get_Height write set_Height;
    property BlackWhiteMode: DNBlackWhiteMode read get_BlackWhiteMode write set_BlackWhiteMode;
    property UniqueId: UInt32 read get_UniqueId;
    property OfficeInteropShapeId: UInt32 read get_OfficeInteropShapeId;
    property AlternativeText: string read get_AlternativeText write set_AlternativeText;
    property AlternativeTextTitle: string read get_AlternativeTextTitle write set_AlternativeTextTitle;
    property Name: string read get_Name write set_Name;
    property IsGrouped: Boolean read get_IsGrouped;
    property ParentGroup: DNIGroupShape read get_ParentGroup;
    property Slide: DNIBaseSlide read get_Slide;
    property Presentation: DNIPresentation read get_Presentation;
  end;

  TDNGraphicalObject = class(TDNGenericImport<DNGraphicalObjectClass, DNGraphicalObject>) end;

  //-------------namespace: Aspose.Slides.Charts----------------
  DNChartClass = interface(DNGraphicalObjectClass)
  ['{FB957DE7-CBF7-5A8C-9D60-14CF699A4EF0}']
  end;

  [DNTypeName('Aspose.Slides.Charts.Chart')]
  DNChart = interface(DNGraphicalObject)
  ['{A66620B3-20FE-3855-A6EB-D6B16731ABD6}']
  { getters & setters } 

    function get_PlotVisibleCellsOnly: Boolean;
    procedure set_PlotVisibleCellsOnly(value: Boolean);
    function get_DisplayBlanksAs: DNDisplayBlanksAsType;
    procedure set_DisplayBlanksAs(value: DNDisplayBlanksAsType);
    function get_ChartData: DNIChartData;
    function get_HasTitle: Boolean;
    procedure set_HasTitle(value: Boolean);
    function get_ChartTitle: DNIChartTitle;
    function get_HasDataTable: Boolean;
    procedure set_HasDataTable(value: Boolean);
    function get_HasLegend: Boolean;
    procedure set_HasLegend(value: Boolean);
    function get_Legend: DNILegend;
    function get_ChartDataTable: DNIDataTable;
    function get_Style: DNStyleType;
    procedure set_Style(value: DNStyleType);
    function get_Type: DNChartType;
    procedure set_Type(value: DNChartType);
    function get_PlotArea: DNIChartPlotArea;
    function get_Rotation3D: DNIRotation3D;
    function get_BackWall: DNIChartWall;
    function get_SideWall: DNIChartWall;
    function get_Floor: DNIChartWall;
    function get_TextFormat: DNIChartTextFormat;
    function get_ThemeManager: DNIOverrideThemeManager;
    function get_UserShapes: DNIGroupShape;
    function get_Axes: DNIAxesManager;
    function get_ShowDataLabelsOverMaximum: Boolean;
    procedure set_ShowDataLabelsOverMaximum(value: Boolean);
    function get_HasRoundedCorners: Boolean;
    procedure set_HasRoundedCorners(value: Boolean);
    function get_AsIFormattedTextContainer: DNIFormattedTextContainer;
    function get_AsIThemeable: DNIThemeable;
    function get_ShapeLock: DNIGraphicalObjectLock;
    function get_GraphicalObjectLock: DNIGraphicalObjectLock;
    function get_IsTextHolder: Boolean;
    function get_Placeholder: DNIPlaceholder;
    function get_CustomData: DNICustomData;
    function get_RawFrame: DNIShapeFrame;
    procedure set_RawFrame(value: DNIShapeFrame);
    function get_Frame: DNIShapeFrame;
    procedure set_Frame(value: DNIShapeFrame);
    function get_LineFormat: DNILineFormat;
    function get_ThreeDFormat: DNIThreeDFormat;
    function get_EffectFormat: DNIEffectFormat;
    function get_FillFormat: DNIFillFormat;
    function get_HyperlinkClick: DNIHyperlink;
    procedure set_HyperlinkClick(value: DNIHyperlink);
    function get_HyperlinkMouseOver: DNIHyperlink;
    procedure set_HyperlinkMouseOver(value: DNIHyperlink);
    function get_HyperlinkManager: DNIHyperlinkManager;
    function get_Hidden: Boolean;
    procedure set_Hidden(value: Boolean);
    function get_ZOrderPosition: Int32;
    function get_ConnectionSiteCount: Int32;
    function get_Rotation: Single;
    procedure set_Rotation(value: Single);
    function get_X: Single;
    procedure set_X(value: Single);
    function get_Y: Single;
    procedure set_Y(value: Single);
    function get_Width: Single;
    procedure set_Width(value: Single);
    function get_Height: Single;
    procedure set_Height(value: Single);
    function get_BlackWhiteMode: DNBlackWhiteMode;
    procedure set_BlackWhiteMode(value: DNBlackWhiteMode);
    function get_UniqueId: UInt32;
    function get_OfficeInteropShapeId: UInt32;
    function get_AlternativeText: string;
    procedure set_AlternativeText(value: string);
    function get_AlternativeTextTitle: string;
    procedure set_AlternativeTextTitle(value: string);
    function get_Name: string;
    procedure set_Name(value: string);
    function get_IsGrouped: Boolean;
    function get_ParentGroup: DNIGroupShape;
    function get_Slide: DNIBaseSlide;
    function get_Presentation: DNIPresentation;

  { methods } 

    procedure ValidateChartLayout;
    function CreateThemeEffective: DNIThemeEffectiveData;
    procedure RemovePlaceholder;
    function AddPlaceholder(placeholderToCopyFrom: DNIPlaceholder): DNIPlaceholder;
    function GetThumbnail: DDN.System.Drawing.DNBitmap; overload;
    function GetThumbnail(bounds: DNShapeThumbnailBounds; scaleX: Single; scaleY: Single): DDN.System.Drawing.DNBitmap; overload;
    procedure WriteAsSvg(stream: DDN.mscorlib.DNStream); overload;
    procedure WriteAsSvg(stream: DDN.mscorlib.DNStream; svgOptions: DNISVGOptions); overload;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property PlotVisibleCellsOnly: Boolean read get_PlotVisibleCellsOnly write set_PlotVisibleCellsOnly;
    property DisplayBlanksAs: DNDisplayBlanksAsType read get_DisplayBlanksAs write set_DisplayBlanksAs;
    property ChartData: DNIChartData read get_ChartData;
    property HasTitle: Boolean read get_HasTitle write set_HasTitle;
    property ChartTitle: DNIChartTitle read get_ChartTitle;
    property HasDataTable: Boolean read get_HasDataTable write set_HasDataTable;
    property HasLegend: Boolean read get_HasLegend write set_HasLegend;
    property Legend: DNILegend read get_Legend;
    property ChartDataTable: DNIDataTable read get_ChartDataTable;
    property Style: DNStyleType read get_Style write set_Style;
    property &Type: DNChartType read get_Type write set_Type;
    property PlotArea: DNIChartPlotArea read get_PlotArea;
    property Rotation3D: DNIRotation3D read get_Rotation3D;
    property BackWall: DNIChartWall read get_BackWall;
    property SideWall: DNIChartWall read get_SideWall;
    property Floor: DNIChartWall read get_Floor;
    property TextFormat: DNIChartTextFormat read get_TextFormat;
    property ThemeManager: DNIOverrideThemeManager read get_ThemeManager;
    property UserShapes: DNIGroupShape read get_UserShapes;
    property Axes: DNIAxesManager read get_Axes;
    property ShowDataLabelsOverMaximum: Boolean read get_ShowDataLabelsOverMaximum write set_ShowDataLabelsOverMaximum;
    property HasRoundedCorners: Boolean read get_HasRoundedCorners write set_HasRoundedCorners;
    property AsIFormattedTextContainer: DNIFormattedTextContainer read get_AsIFormattedTextContainer;
    property AsIThemeable: DNIThemeable read get_AsIThemeable;
    property ShapeLock: DNIGraphicalObjectLock read get_ShapeLock;
    property GraphicalObjectLock: DNIGraphicalObjectLock read get_GraphicalObjectLock;
    property IsTextHolder: Boolean read get_IsTextHolder;
    property Placeholder: DNIPlaceholder read get_Placeholder;
    property CustomData: DNICustomData read get_CustomData;
    property RawFrame: DNIShapeFrame read get_RawFrame write set_RawFrame;
    property Frame: DNIShapeFrame read get_Frame write set_Frame;
    property LineFormat: DNILineFormat read get_LineFormat;
    property ThreeDFormat: DNIThreeDFormat read get_ThreeDFormat;
    property EffectFormat: DNIEffectFormat read get_EffectFormat;
    property FillFormat: DNIFillFormat read get_FillFormat;
    property HyperlinkClick: DNIHyperlink read get_HyperlinkClick write set_HyperlinkClick;
    property HyperlinkMouseOver: DNIHyperlink read get_HyperlinkMouseOver write set_HyperlinkMouseOver;
    property HyperlinkManager: DNIHyperlinkManager read get_HyperlinkManager;
    property Hidden: Boolean read get_Hidden write set_Hidden;
    property ZOrderPosition: Int32 read get_ZOrderPosition;
    property ConnectionSiteCount: Int32 read get_ConnectionSiteCount;
    property Rotation: Single read get_Rotation write set_Rotation;
    property X: Single read get_X write set_X;
    property Y: Single read get_Y write set_Y;
    property Width: Single read get_Width write set_Width;
    property Height: Single read get_Height write set_Height;
    property BlackWhiteMode: DNBlackWhiteMode read get_BlackWhiteMode write set_BlackWhiteMode;
    property UniqueId: UInt32 read get_UniqueId;
    property OfficeInteropShapeId: UInt32 read get_OfficeInteropShapeId;
    property AlternativeText: string read get_AlternativeText write set_AlternativeText;
    property AlternativeTextTitle: string read get_AlternativeTextTitle write set_AlternativeTextTitle;
    property Name: string read get_Name write set_Name;
    property IsGrouped: Boolean read get_IsGrouped;
    property ParentGroup: DNIGroupShape read get_ParentGroup;
    property Slide: DNIBaseSlide read get_Slide;
    property Presentation: DNIPresentation read get_Presentation;
  end;

  TDNChart = class(TDNGenericImport<DNChartClass, DNChart>) end;

  //-------------namespace: Aspose.Slides.Ink----------------
  DNInkClass = interface(DNGraphicalObjectClass)
  ['{4F56208D-0563-5F9F-B3C9-A60D4FC65F5F}']
  end;

  [DNTypeName('Aspose.Slides.Ink.Ink')]
  DNInk = interface(DNGraphicalObject)
  ['{8BDAB38E-422D-3FCE-9139-4AC1246E73CC}']
  { getters & setters } 

    function get_ShapeLock: DNIGraphicalObjectLock;
    function get_GraphicalObjectLock: DNIGraphicalObjectLock;
    function get_IsTextHolder: Boolean;
    function get_Placeholder: DNIPlaceholder;
    function get_CustomData: DNICustomData;
    function get_RawFrame: DNIShapeFrame;
    procedure set_RawFrame(value: DNIShapeFrame);
    function get_Frame: DNIShapeFrame;
    procedure set_Frame(value: DNIShapeFrame);
    function get_LineFormat: DNILineFormat;
    function get_ThreeDFormat: DNIThreeDFormat;
    function get_EffectFormat: DNIEffectFormat;
    function get_FillFormat: DNIFillFormat;
    function get_HyperlinkClick: DNIHyperlink;
    procedure set_HyperlinkClick(value: DNIHyperlink);
    function get_HyperlinkMouseOver: DNIHyperlink;
    procedure set_HyperlinkMouseOver(value: DNIHyperlink);
    function get_HyperlinkManager: DNIHyperlinkManager;
    function get_Hidden: Boolean;
    procedure set_Hidden(value: Boolean);
    function get_ZOrderPosition: Int32;
    function get_ConnectionSiteCount: Int32;
    function get_Rotation: Single;
    procedure set_Rotation(value: Single);
    function get_X: Single;
    procedure set_X(value: Single);
    function get_Y: Single;
    procedure set_Y(value: Single);
    function get_Width: Single;
    procedure set_Width(value: Single);
    function get_Height: Single;
    procedure set_Height(value: Single);
    function get_BlackWhiteMode: DNBlackWhiteMode;
    procedure set_BlackWhiteMode(value: DNBlackWhiteMode);
    function get_UniqueId: UInt32;
    function get_OfficeInteropShapeId: UInt32;
    function get_AlternativeText: string;
    procedure set_AlternativeText(value: string);
    function get_AlternativeTextTitle: string;
    procedure set_AlternativeTextTitle(value: string);
    function get_Name: string;
    procedure set_Name(value: string);
    function get_IsGrouped: Boolean;
    function get_ParentGroup: DNIGroupShape;
    function get_Slide: DNIBaseSlide;
    function get_Presentation: DNIPresentation;

  { methods } 

    procedure RemovePlaceholder;
    function AddPlaceholder(placeholderToCopyFrom: DNIPlaceholder): DNIPlaceholder;
    function GetThumbnail: DDN.System.Drawing.DNBitmap; overload;
    function GetThumbnail(bounds: DNShapeThumbnailBounds; scaleX: Single; scaleY: Single): DDN.System.Drawing.DNBitmap; overload;
    procedure WriteAsSvg(stream: DDN.mscorlib.DNStream); overload;
    procedure WriteAsSvg(stream: DDN.mscorlib.DNStream; svgOptions: DNISVGOptions); overload;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property ShapeLock: DNIGraphicalObjectLock read get_ShapeLock;
    property GraphicalObjectLock: DNIGraphicalObjectLock read get_GraphicalObjectLock;
    property IsTextHolder: Boolean read get_IsTextHolder;
    property Placeholder: DNIPlaceholder read get_Placeholder;
    property CustomData: DNICustomData read get_CustomData;
    property RawFrame: DNIShapeFrame read get_RawFrame write set_RawFrame;
    property Frame: DNIShapeFrame read get_Frame write set_Frame;
    property LineFormat: DNILineFormat read get_LineFormat;
    property ThreeDFormat: DNIThreeDFormat read get_ThreeDFormat;
    property EffectFormat: DNIEffectFormat read get_EffectFormat;
    property FillFormat: DNIFillFormat read get_FillFormat;
    property HyperlinkClick: DNIHyperlink read get_HyperlinkClick write set_HyperlinkClick;
    property HyperlinkMouseOver: DNIHyperlink read get_HyperlinkMouseOver write set_HyperlinkMouseOver;
    property HyperlinkManager: DNIHyperlinkManager read get_HyperlinkManager;
    property Hidden: Boolean read get_Hidden write set_Hidden;
    property ZOrderPosition: Int32 read get_ZOrderPosition;
    property ConnectionSiteCount: Int32 read get_ConnectionSiteCount;
    property Rotation: Single read get_Rotation write set_Rotation;
    property X: Single read get_X write set_X;
    property Y: Single read get_Y write set_Y;
    property Width: Single read get_Width write set_Width;
    property Height: Single read get_Height write set_Height;
    property BlackWhiteMode: DNBlackWhiteMode read get_BlackWhiteMode write set_BlackWhiteMode;
    property UniqueId: UInt32 read get_UniqueId;
    property OfficeInteropShapeId: UInt32 read get_OfficeInteropShapeId;
    property AlternativeText: string read get_AlternativeText write set_AlternativeText;
    property AlternativeTextTitle: string read get_AlternativeTextTitle write set_AlternativeTextTitle;
    property Name: string read get_Name write set_Name;
    property IsGrouped: Boolean read get_IsGrouped;
    property ParentGroup: DNIGroupShape read get_ParentGroup;
    property Slide: DNIBaseSlide read get_Slide;
    property Presentation: DNIPresentation read get_Presentation;
  end;

  TDNInk = class(TDNGenericImport<DNInkClass, DNInk>) end;

  //-------------namespace: Aspose.Slides----------------
  DNLegacyDiagramClass = interface(DNGraphicalObjectClass)
  ['{949CDCEA-C4EF-5B5B-9962-3DCD5AE0B5F5}']
  end;

  [DNTypeName('Aspose.Slides.LegacyDiagram')]
  DNLegacyDiagram = interface(DNGraphicalObject)
  ['{9E427932-9A61-3409-9562-0D3D278E205C}']
  { getters & setters } 

    function get_AsIGraphicalObject: DNIGraphicalObject;
    function get_ShapeLock: DNIGraphicalObjectLock;
    function get_GraphicalObjectLock: DNIGraphicalObjectLock;
    function get_IsTextHolder: Boolean;
    function get_Placeholder: DNIPlaceholder;
    function get_CustomData: DNICustomData;
    function get_RawFrame: DNIShapeFrame;
    procedure set_RawFrame(value: DNIShapeFrame);
    function get_Frame: DNIShapeFrame;
    procedure set_Frame(value: DNIShapeFrame);
    function get_LineFormat: DNILineFormat;
    function get_ThreeDFormat: DNIThreeDFormat;
    function get_EffectFormat: DNIEffectFormat;
    function get_FillFormat: DNIFillFormat;
    function get_HyperlinkClick: DNIHyperlink;
    procedure set_HyperlinkClick(value: DNIHyperlink);
    function get_HyperlinkMouseOver: DNIHyperlink;
    procedure set_HyperlinkMouseOver(value: DNIHyperlink);
    function get_HyperlinkManager: DNIHyperlinkManager;
    function get_Hidden: Boolean;
    procedure set_Hidden(value: Boolean);
    function get_ZOrderPosition: Int32;
    function get_ConnectionSiteCount: Int32;
    function get_Rotation: Single;
    procedure set_Rotation(value: Single);
    function get_X: Single;
    procedure set_X(value: Single);
    function get_Y: Single;
    procedure set_Y(value: Single);
    function get_Width: Single;
    procedure set_Width(value: Single);
    function get_Height: Single;
    procedure set_Height(value: Single);
    function get_BlackWhiteMode: DNBlackWhiteMode;
    procedure set_BlackWhiteMode(value: DNBlackWhiteMode);
    function get_UniqueId: UInt32;
    function get_OfficeInteropShapeId: UInt32;
    function get_AlternativeText: string;
    procedure set_AlternativeText(value: string);
    function get_AlternativeTextTitle: string;
    procedure set_AlternativeTextTitle(value: string);
    function get_Name: string;
    procedure set_Name(value: string);
    function get_IsGrouped: Boolean;
    function get_ParentGroup: DNIGroupShape;
    function get_Slide: DNIBaseSlide;
    function get_Presentation: DNIPresentation;

  { methods } 

    function ConvertToSmartArt: DNISmartArt;
    function ConvertToGroupShape: DNIGroupShape;
    procedure RemovePlaceholder;
    function AddPlaceholder(placeholderToCopyFrom: DNIPlaceholder): DNIPlaceholder;
    function GetThumbnail: DDN.System.Drawing.DNBitmap; overload;
    function GetThumbnail(bounds: DNShapeThumbnailBounds; scaleX: Single; scaleY: Single): DDN.System.Drawing.DNBitmap; overload;
    procedure WriteAsSvg(stream: DDN.mscorlib.DNStream); overload;
    procedure WriteAsSvg(stream: DDN.mscorlib.DNStream; svgOptions: DNISVGOptions); overload;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property AsIGraphicalObject: DNIGraphicalObject read get_AsIGraphicalObject;
    property ShapeLock: DNIGraphicalObjectLock read get_ShapeLock;
    property GraphicalObjectLock: DNIGraphicalObjectLock read get_GraphicalObjectLock;
    property IsTextHolder: Boolean read get_IsTextHolder;
    property Placeholder: DNIPlaceholder read get_Placeholder;
    property CustomData: DNICustomData read get_CustomData;
    property RawFrame: DNIShapeFrame read get_RawFrame write set_RawFrame;
    property Frame: DNIShapeFrame read get_Frame write set_Frame;
    property LineFormat: DNILineFormat read get_LineFormat;
    property ThreeDFormat: DNIThreeDFormat read get_ThreeDFormat;
    property EffectFormat: DNIEffectFormat read get_EffectFormat;
    property FillFormat: DNIFillFormat read get_FillFormat;
    property HyperlinkClick: DNIHyperlink read get_HyperlinkClick write set_HyperlinkClick;
    property HyperlinkMouseOver: DNIHyperlink read get_HyperlinkMouseOver write set_HyperlinkMouseOver;
    property HyperlinkManager: DNIHyperlinkManager read get_HyperlinkManager;
    property Hidden: Boolean read get_Hidden write set_Hidden;
    property ZOrderPosition: Int32 read get_ZOrderPosition;
    property ConnectionSiteCount: Int32 read get_ConnectionSiteCount;
    property Rotation: Single read get_Rotation write set_Rotation;
    property X: Single read get_X write set_X;
    property Y: Single read get_Y write set_Y;
    property Width: Single read get_Width write set_Width;
    property Height: Single read get_Height write set_Height;
    property BlackWhiteMode: DNBlackWhiteMode read get_BlackWhiteMode write set_BlackWhiteMode;
    property UniqueId: UInt32 read get_UniqueId;
    property OfficeInteropShapeId: UInt32 read get_OfficeInteropShapeId;
    property AlternativeText: string read get_AlternativeText write set_AlternativeText;
    property AlternativeTextTitle: string read get_AlternativeTextTitle write set_AlternativeTextTitle;
    property Name: string read get_Name write set_Name;
    property IsGrouped: Boolean read get_IsGrouped;
    property ParentGroup: DNIGroupShape read get_ParentGroup;
    property Slide: DNIBaseSlide read get_Slide;
    property Presentation: DNIPresentation read get_Presentation;
  end;

  TDNLegacyDiagram = class(TDNGenericImport<DNLegacyDiagramClass, DNLegacyDiagram>) end;

  //-------------namespace: Aspose.Slides----------------
  DNOleObjectFrameClass = interface(DNGraphicalObjectClass)
  ['{48021984-61D7-56B2-B75E-A2CAEDC5805C}']
  end;

  [DNTypeName('Aspose.Slides.OleObjectFrame')]
  DNOleObjectFrame = interface(DNGraphicalObject)
  ['{F85BC4B1-35D2-35A6-8505-2EAA92C384A3}']
  { getters & setters } 

    function get_SubstitutePictureFormat: DNIPictureFillFormat;
    function get_SubstitutePictureTitle: string;
    procedure set_SubstitutePictureTitle(value: string);
    function get_ObjectName: string;
    procedure set_ObjectName(value: string);
    function get_ObjectProgId: string;
    procedure set_ObjectProgId(value: string);
    function get_ObjectData: TArray<Byte>;
    procedure set_ObjectData(value: TArray<Byte>);
    function get_LinkFileName: string;
    function get_LinkPathLong: string;
    procedure set_LinkPathLong(value: string);
    function get_EmbeddedFileLabel: string;
    function get_EmbeddedFileName: string;
    function get_EmbeddedFileExtension: string;
    function get_EmbeddedFileData: TArray<Byte>;
    function get_EmbeddedData: DNIOleEmbeddedDataInfo;
    function get_IsObjectIcon: Boolean;
    procedure set_IsObjectIcon(value: Boolean);
    function get_IsObjectLink: Boolean;
    function get_AsIGraphicalObject: DNIGraphicalObject;
    function get_UpdateAutomatic: Boolean;
    procedure set_UpdateAutomatic(value: Boolean);
    function get_ShapeLock: DNIGraphicalObjectLock;
    function get_GraphicalObjectLock: DNIGraphicalObjectLock;
    function get_IsTextHolder: Boolean;
    function get_Placeholder: DNIPlaceholder;
    function get_CustomData: DNICustomData;
    function get_RawFrame: DNIShapeFrame;
    procedure set_RawFrame(value: DNIShapeFrame);
    function get_Frame: DNIShapeFrame;
    procedure set_Frame(value: DNIShapeFrame);
    function get_LineFormat: DNILineFormat;
    function get_ThreeDFormat: DNIThreeDFormat;
    function get_EffectFormat: DNIEffectFormat;
    function get_FillFormat: DNIFillFormat;
    function get_HyperlinkClick: DNIHyperlink;
    procedure set_HyperlinkClick(value: DNIHyperlink);
    function get_HyperlinkMouseOver: DNIHyperlink;
    procedure set_HyperlinkMouseOver(value: DNIHyperlink);
    function get_HyperlinkManager: DNIHyperlinkManager;
    function get_Hidden: Boolean;
    procedure set_Hidden(value: Boolean);
    function get_ZOrderPosition: Int32;
    function get_ConnectionSiteCount: Int32;
    function get_Rotation: Single;
    procedure set_Rotation(value: Single);
    function get_X: Single;
    procedure set_X(value: Single);
    function get_Y: Single;
    procedure set_Y(value: Single);
    function get_Width: Single;
    procedure set_Width(value: Single);
    function get_Height: Single;
    procedure set_Height(value: Single);
    function get_BlackWhiteMode: DNBlackWhiteMode;
    procedure set_BlackWhiteMode(value: DNBlackWhiteMode);
    function get_UniqueId: UInt32;
    function get_OfficeInteropShapeId: UInt32;
    function get_AlternativeText: string;
    procedure set_AlternativeText(value: string);
    function get_AlternativeTextTitle: string;
    procedure set_AlternativeTextTitle(value: string);
    function get_Name: string;
    procedure set_Name(value: string);
    function get_IsGrouped: Boolean;
    function get_ParentGroup: DNIGroupShape;
    function get_Slide: DNIBaseSlide;
    function get_Presentation: DNIPresentation;

  { methods } 

    procedure SetEmbeddedData(embeddedData: DNIOleEmbeddedDataInfo);
    procedure RemovePlaceholder;
    function AddPlaceholder(placeholderToCopyFrom: DNIPlaceholder): DNIPlaceholder;
    function GetThumbnail: DDN.System.Drawing.DNBitmap; overload;
    function GetThumbnail(bounds: DNShapeThumbnailBounds; scaleX: Single; scaleY: Single): DDN.System.Drawing.DNBitmap; overload;
    procedure WriteAsSvg(stream: DDN.mscorlib.DNStream); overload;
    procedure WriteAsSvg(stream: DDN.mscorlib.DNStream; svgOptions: DNISVGOptions); overload;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property SubstitutePictureFormat: DNIPictureFillFormat read get_SubstitutePictureFormat;
    property SubstitutePictureTitle: string read get_SubstitutePictureTitle write set_SubstitutePictureTitle;
    property ObjectName: string read get_ObjectName write set_ObjectName;
    property ObjectProgId: string read get_ObjectProgId write set_ObjectProgId;
    property ObjectData: TArray<Byte> read get_ObjectData write set_ObjectData;
    property LinkFileName: string read get_LinkFileName;
    property LinkPathLong: string read get_LinkPathLong write set_LinkPathLong;
    property EmbeddedFileLabel: string read get_EmbeddedFileLabel;
    property EmbeddedFileName: string read get_EmbeddedFileName;
    property EmbeddedFileExtension: string read get_EmbeddedFileExtension;
    property EmbeddedFileData: TArray<Byte> read get_EmbeddedFileData;
    property EmbeddedData: DNIOleEmbeddedDataInfo read get_EmbeddedData;
    property IsObjectIcon: Boolean read get_IsObjectIcon write set_IsObjectIcon;
    property IsObjectLink: Boolean read get_IsObjectLink;
    property AsIGraphicalObject: DNIGraphicalObject read get_AsIGraphicalObject;
    property UpdateAutomatic: Boolean read get_UpdateAutomatic write set_UpdateAutomatic;
    property ShapeLock: DNIGraphicalObjectLock read get_ShapeLock;
    property GraphicalObjectLock: DNIGraphicalObjectLock read get_GraphicalObjectLock;
    property IsTextHolder: Boolean read get_IsTextHolder;
    property Placeholder: DNIPlaceholder read get_Placeholder;
    property CustomData: DNICustomData read get_CustomData;
    property RawFrame: DNIShapeFrame read get_RawFrame write set_RawFrame;
    property Frame: DNIShapeFrame read get_Frame write set_Frame;
    property LineFormat: DNILineFormat read get_LineFormat;
    property ThreeDFormat: DNIThreeDFormat read get_ThreeDFormat;
    property EffectFormat: DNIEffectFormat read get_EffectFormat;
    property FillFormat: DNIFillFormat read get_FillFormat;
    property HyperlinkClick: DNIHyperlink read get_HyperlinkClick write set_HyperlinkClick;
    property HyperlinkMouseOver: DNIHyperlink read get_HyperlinkMouseOver write set_HyperlinkMouseOver;
    property HyperlinkManager: DNIHyperlinkManager read get_HyperlinkManager;
    property Hidden: Boolean read get_Hidden write set_Hidden;
    property ZOrderPosition: Int32 read get_ZOrderPosition;
    property ConnectionSiteCount: Int32 read get_ConnectionSiteCount;
    property Rotation: Single read get_Rotation write set_Rotation;
    property X: Single read get_X write set_X;
    property Y: Single read get_Y write set_Y;
    property Width: Single read get_Width write set_Width;
    property Height: Single read get_Height write set_Height;
    property BlackWhiteMode: DNBlackWhiteMode read get_BlackWhiteMode write set_BlackWhiteMode;
    property UniqueId: UInt32 read get_UniqueId;
    property OfficeInteropShapeId: UInt32 read get_OfficeInteropShapeId;
    property AlternativeText: string read get_AlternativeText write set_AlternativeText;
    property AlternativeTextTitle: string read get_AlternativeTextTitle write set_AlternativeTextTitle;
    property Name: string read get_Name write set_Name;
    property IsGrouped: Boolean read get_IsGrouped;
    property ParentGroup: DNIGroupShape read get_ParentGroup;
    property Slide: DNIBaseSlide read get_Slide;
    property Presentation: DNIPresentation read get_Presentation;
  end;

  TDNOleObjectFrame = class(TDNGenericImport<DNOleObjectFrameClass, DNOleObjectFrame>) end;

  //-------------namespace: Aspose.Slides.SmartArt----------------
  DNSmartArtClass = interface(DNGraphicalObjectClass)
  ['{5B8AEC6D-B77B-5BC4-929C-47F5E3ACB329}']
  end;

  [DNTypeName('Aspose.Slides.SmartArt.SmartArt')]
  DNSmartArt = interface(DNGraphicalObject)
  ['{0526B026-AC60-3159-BA3A-1945B64C2BCB}']
  { getters & setters } 

    function get_AllNodes: DNISmartArtNodeCollection;
    function get_Nodes: DNISmartArtNodeCollection;
    function get_Layout: DNSmartArtLayoutType;
    procedure set_Layout(value: DNSmartArtLayoutType);
    function get_QuickStyle: DNSmartArtQuickStyleType;
    procedure set_QuickStyle(value: DNSmartArtQuickStyleType);
    function get_ColorStyle: DNSmartArtColorType;
    procedure set_ColorStyle(value: DNSmartArtColorType);
    function get_IsReversed: Boolean;
    procedure set_IsReversed(value: Boolean);
    function get_ShapeLock: DNIGraphicalObjectLock;
    function get_GraphicalObjectLock: DNIGraphicalObjectLock;
    function get_IsTextHolder: Boolean;
    function get_Placeholder: DNIPlaceholder;
    function get_CustomData: DNICustomData;
    function get_RawFrame: DNIShapeFrame;
    procedure set_RawFrame(value: DNIShapeFrame);
    function get_Frame: DNIShapeFrame;
    procedure set_Frame(value: DNIShapeFrame);
    function get_LineFormat: DNILineFormat;
    function get_ThreeDFormat: DNIThreeDFormat;
    function get_EffectFormat: DNIEffectFormat;
    function get_FillFormat: DNIFillFormat;
    function get_HyperlinkClick: DNIHyperlink;
    procedure set_HyperlinkClick(value: DNIHyperlink);
    function get_HyperlinkMouseOver: DNIHyperlink;
    procedure set_HyperlinkMouseOver(value: DNIHyperlink);
    function get_HyperlinkManager: DNIHyperlinkManager;
    function get_Hidden: Boolean;
    procedure set_Hidden(value: Boolean);
    function get_ZOrderPosition: Int32;
    function get_ConnectionSiteCount: Int32;
    function get_Rotation: Single;
    procedure set_Rotation(value: Single);
    function get_X: Single;
    procedure set_X(value: Single);
    function get_Y: Single;
    procedure set_Y(value: Single);
    function get_Width: Single;
    procedure set_Width(value: Single);
    function get_Height: Single;
    procedure set_Height(value: Single);
    function get_BlackWhiteMode: DNBlackWhiteMode;
    procedure set_BlackWhiteMode(value: DNBlackWhiteMode);
    function get_UniqueId: UInt32;
    function get_OfficeInteropShapeId: UInt32;
    function get_AlternativeText: string;
    procedure set_AlternativeText(value: string);
    function get_AlternativeTextTitle: string;
    procedure set_AlternativeTextTitle(value: string);
    function get_Name: string;
    procedure set_Name(value: string);
    function get_IsGrouped: Boolean;
    function get_ParentGroup: DNIGroupShape;
    function get_Slide: DNIBaseSlide;
    function get_Presentation: DNIPresentation;

  { methods } 

    procedure RemovePlaceholder;
    function AddPlaceholder(placeholderToCopyFrom: DNIPlaceholder): DNIPlaceholder;
    function GetThumbnail: DDN.System.Drawing.DNBitmap; overload;
    function GetThumbnail(bounds: DNShapeThumbnailBounds; scaleX: Single; scaleY: Single): DDN.System.Drawing.DNBitmap; overload;
    procedure WriteAsSvg(stream: DDN.mscorlib.DNStream); overload;
    procedure WriteAsSvg(stream: DDN.mscorlib.DNStream; svgOptions: DNISVGOptions); overload;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property AllNodes: DNISmartArtNodeCollection read get_AllNodes;
    property Nodes: DNISmartArtNodeCollection read get_Nodes;
    property Layout: DNSmartArtLayoutType read get_Layout write set_Layout;
    property QuickStyle: DNSmartArtQuickStyleType read get_QuickStyle write set_QuickStyle;
    property ColorStyle: DNSmartArtColorType read get_ColorStyle write set_ColorStyle;
    property IsReversed: Boolean read get_IsReversed write set_IsReversed;
    property ShapeLock: DNIGraphicalObjectLock read get_ShapeLock;
    property GraphicalObjectLock: DNIGraphicalObjectLock read get_GraphicalObjectLock;
    property IsTextHolder: Boolean read get_IsTextHolder;
    property Placeholder: DNIPlaceholder read get_Placeholder;
    property CustomData: DNICustomData read get_CustomData;
    property RawFrame: DNIShapeFrame read get_RawFrame write set_RawFrame;
    property Frame: DNIShapeFrame read get_Frame write set_Frame;
    property LineFormat: DNILineFormat read get_LineFormat;
    property ThreeDFormat: DNIThreeDFormat read get_ThreeDFormat;
    property EffectFormat: DNIEffectFormat read get_EffectFormat;
    property FillFormat: DNIFillFormat read get_FillFormat;
    property HyperlinkClick: DNIHyperlink read get_HyperlinkClick write set_HyperlinkClick;
    property HyperlinkMouseOver: DNIHyperlink read get_HyperlinkMouseOver write set_HyperlinkMouseOver;
    property HyperlinkManager: DNIHyperlinkManager read get_HyperlinkManager;
    property Hidden: Boolean read get_Hidden write set_Hidden;
    property ZOrderPosition: Int32 read get_ZOrderPosition;
    property ConnectionSiteCount: Int32 read get_ConnectionSiteCount;
    property Rotation: Single read get_Rotation write set_Rotation;
    property X: Single read get_X write set_X;
    property Y: Single read get_Y write set_Y;
    property Width: Single read get_Width write set_Width;
    property Height: Single read get_Height write set_Height;
    property BlackWhiteMode: DNBlackWhiteMode read get_BlackWhiteMode write set_BlackWhiteMode;
    property UniqueId: UInt32 read get_UniqueId;
    property OfficeInteropShapeId: UInt32 read get_OfficeInteropShapeId;
    property AlternativeText: string read get_AlternativeText write set_AlternativeText;
    property AlternativeTextTitle: string read get_AlternativeTextTitle write set_AlternativeTextTitle;
    property Name: string read get_Name write set_Name;
    property IsGrouped: Boolean read get_IsGrouped;
    property ParentGroup: DNIGroupShape read get_ParentGroup;
    property Slide: DNIBaseSlide read get_Slide;
    property Presentation: DNIPresentation read get_Presentation;
  end;

  TDNSmartArt = class(TDNGenericImport<DNSmartArtClass, DNSmartArt>) end;

  //-------------namespace: Aspose.Slides----------------
  DNTableClass = interface(DNGraphicalObjectClass)
  ['{55676675-A886-5294-A78E-26BB1A309E39}']
  end;

  [DNTypeName('Aspose.Slides.Table')]
  DNTable = interface(DNGraphicalObject)
  ['{DEC8992D-C02F-3135-A133-D27E656CAB76}']
  { getters & setters } 

    function get_Rows: DNIRowCollection;
    function get_Columns: DNIColumnCollection;
    function get_TableFormat: DNITableFormat;
    function get_StylePreset: DNTableStylePreset;
    procedure set_StylePreset(value: DNTableStylePreset);
    function get_RightToLeft: Boolean;
    procedure set_RightToLeft(value: Boolean);
    function get_FirstRow: Boolean;
    procedure set_FirstRow(value: Boolean);
    function get_FirstCol: Boolean;
    procedure set_FirstCol(value: Boolean);
    function get_LastRow: Boolean;
    procedure set_LastRow(value: Boolean);
    function get_LastCol: Boolean;
    procedure set_LastCol(value: Boolean);
    function get_HorizontalBanding: Boolean;
    procedure set_HorizontalBanding(value: Boolean);
    function get_VerticalBanding: Boolean;
    procedure set_VerticalBanding(value: Boolean);
    function get_FillFormat: DNIFillFormat;
    function get_ShapeLock: DNIGraphicalObjectLock;
    function get_GraphicalObjectLock: DNIGraphicalObjectLock;
    function get_IsTextHolder: Boolean;
    function get_Placeholder: DNIPlaceholder;
    function get_CustomData: DNICustomData;
    function get_RawFrame: DNIShapeFrame;
    procedure set_RawFrame(value: DNIShapeFrame);
    function get_Frame: DNIShapeFrame;
    procedure set_Frame(value: DNIShapeFrame);
    function get_LineFormat: DNILineFormat;
    function get_ThreeDFormat: DNIThreeDFormat;
    function get_EffectFormat: DNIEffectFormat;
    function get_HyperlinkClick: DNIHyperlink;
    procedure set_HyperlinkClick(value: DNIHyperlink);
    function get_HyperlinkMouseOver: DNIHyperlink;
    procedure set_HyperlinkMouseOver(value: DNIHyperlink);
    function get_HyperlinkManager: DNIHyperlinkManager;
    function get_Hidden: Boolean;
    procedure set_Hidden(value: Boolean);
    function get_ZOrderPosition: Int32;
    function get_ConnectionSiteCount: Int32;
    function get_Rotation: Single;
    procedure set_Rotation(value: Single);
    function get_X: Single;
    procedure set_X(value: Single);
    function get_Y: Single;
    procedure set_Y(value: Single);
    function get_Width: Single;
    procedure set_Width(value: Single);
    function get_Height: Single;
    procedure set_Height(value: Single);
    function get_BlackWhiteMode: DNBlackWhiteMode;
    procedure set_BlackWhiteMode(value: DNBlackWhiteMode);
    function get_UniqueId: UInt32;
    function get_OfficeInteropShapeId: UInt32;
    function get_AlternativeText: string;
    procedure set_AlternativeText(value: string);
    function get_AlternativeTextTitle: string;
    procedure set_AlternativeTextTitle(value: string);
    function get_Name: string;
    procedure set_Name(value: string);
    function get_IsGrouped: Boolean;
    function get_ParentGroup: DNIGroupShape;
    function get_Slide: DNIBaseSlide;
    function get_Presentation: DNIPresentation;

  { methods } 

    function MergeCells(cell1: DNICell; cell2: DNICell; allowSplitting: Boolean): DNICell;
    procedure SetTextFormat(source: DNIPortionFormat); overload;
    procedure SetTextFormat(source: DNIParagraphFormat); overload;
    procedure SetTextFormat(source: DNITextFrameFormat); overload;
    procedure RemovePlaceholder;
    function AddPlaceholder(placeholderToCopyFrom: DNIPlaceholder): DNIPlaceholder;
    function GetThumbnail: DDN.System.Drawing.DNBitmap; overload;
    function GetThumbnail(bounds: DNShapeThumbnailBounds; scaleX: Single; scaleY: Single): DDN.System.Drawing.DNBitmap; overload;
    procedure WriteAsSvg(stream: DDN.mscorlib.DNStream); overload;
    procedure WriteAsSvg(stream: DDN.mscorlib.DNStream; svgOptions: DNISVGOptions); overload;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Rows: DNIRowCollection read get_Rows;
    property Columns: DNIColumnCollection read get_Columns;
    property TableFormat: DNITableFormat read get_TableFormat;
    property StylePreset: DNTableStylePreset read get_StylePreset write set_StylePreset;
    property RightToLeft: Boolean read get_RightToLeft write set_RightToLeft;
    property FirstRow: Boolean read get_FirstRow write set_FirstRow;
    property FirstCol: Boolean read get_FirstCol write set_FirstCol;
    property LastRow: Boolean read get_LastRow write set_LastRow;
    property LastCol: Boolean read get_LastCol write set_LastCol;
    property HorizontalBanding: Boolean read get_HorizontalBanding write set_HorizontalBanding;
    property VerticalBanding: Boolean read get_VerticalBanding write set_VerticalBanding;
    property FillFormat: DNIFillFormat read get_FillFormat;
    property ShapeLock: DNIGraphicalObjectLock read get_ShapeLock;
    property GraphicalObjectLock: DNIGraphicalObjectLock read get_GraphicalObjectLock;
    property IsTextHolder: Boolean read get_IsTextHolder;
    property Placeholder: DNIPlaceholder read get_Placeholder;
    property CustomData: DNICustomData read get_CustomData;
    property RawFrame: DNIShapeFrame read get_RawFrame write set_RawFrame;
    property Frame: DNIShapeFrame read get_Frame write set_Frame;
    property LineFormat: DNILineFormat read get_LineFormat;
    property ThreeDFormat: DNIThreeDFormat read get_ThreeDFormat;
    property EffectFormat: DNIEffectFormat read get_EffectFormat;
    property HyperlinkClick: DNIHyperlink read get_HyperlinkClick write set_HyperlinkClick;
    property HyperlinkMouseOver: DNIHyperlink read get_HyperlinkMouseOver write set_HyperlinkMouseOver;
    property HyperlinkManager: DNIHyperlinkManager read get_HyperlinkManager;
    property Hidden: Boolean read get_Hidden write set_Hidden;
    property ZOrderPosition: Int32 read get_ZOrderPosition;
    property ConnectionSiteCount: Int32 read get_ConnectionSiteCount;
    property Rotation: Single read get_Rotation write set_Rotation;
    property X: Single read get_X write set_X;
    property Y: Single read get_Y write set_Y;
    property Width: Single read get_Width write set_Width;
    property Height: Single read get_Height write set_Height;
    property BlackWhiteMode: DNBlackWhiteMode read get_BlackWhiteMode write set_BlackWhiteMode;
    property UniqueId: UInt32 read get_UniqueId;
    property OfficeInteropShapeId: UInt32 read get_OfficeInteropShapeId;
    property AlternativeText: string read get_AlternativeText write set_AlternativeText;
    property AlternativeTextTitle: string read get_AlternativeTextTitle write set_AlternativeTextTitle;
    property Name: string read get_Name write set_Name;
    property IsGrouped: Boolean read get_IsGrouped;
    property ParentGroup: DNIGroupShape read get_ParentGroup;
    property Slide: DNIBaseSlide read get_Slide;
    property Presentation: DNIPresentation read get_Presentation;
  end;

  TDNTable = class(TDNGenericImport<DNTableClass, DNTable>) end;

  //-------------namespace: Aspose.Slides----------------
  DNZoomFrameClass = interface(DNGraphicalObjectClass)
  ['{AB1967CD-473D-590A-AC6D-93C014EF08AB}']
  end;

  [DNTypeName('Aspose.Slides.ZoomFrame')]
  DNZoomFrame = interface(DNGraphicalObject)
  ['{1220829E-DB7B-307D-A026-0E5EA27F610B}']
  { getters & setters } 

    function get_ImageType: DNZoomImageType;
    procedure set_ImageType(value: DNZoomImageType);
    function get_ReturnToParent: Boolean;
    procedure set_ReturnToParent(value: Boolean);
    function get_TargetSlide: DNISlide;
    procedure set_TargetSlide(value: DNISlide);
    function get_ShowBackground: Boolean;
    procedure set_ShowBackground(value: Boolean);
    function get_Image: DNIPPImage;
    procedure set_Image(value: DNIPPImage);
    function get_TransitionDuration: Single;
    procedure set_TransitionDuration(value: Single);
    function get_ShapeLock: DNIGraphicalObjectLock;
    function get_GraphicalObjectLock: DNIGraphicalObjectLock;
    function get_IsTextHolder: Boolean;
    function get_Placeholder: DNIPlaceholder;
    function get_CustomData: DNICustomData;
    function get_RawFrame: DNIShapeFrame;
    procedure set_RawFrame(value: DNIShapeFrame);
    function get_Frame: DNIShapeFrame;
    procedure set_Frame(value: DNIShapeFrame);
    function get_LineFormat: DNILineFormat;
    function get_ThreeDFormat: DNIThreeDFormat;
    function get_EffectFormat: DNIEffectFormat;
    function get_FillFormat: DNIFillFormat;
    function get_HyperlinkClick: DNIHyperlink;
    procedure set_HyperlinkClick(value: DNIHyperlink);
    function get_HyperlinkMouseOver: DNIHyperlink;
    procedure set_HyperlinkMouseOver(value: DNIHyperlink);
    function get_HyperlinkManager: DNIHyperlinkManager;
    function get_Hidden: Boolean;
    procedure set_Hidden(value: Boolean);
    function get_ZOrderPosition: Int32;
    function get_ConnectionSiteCount: Int32;
    function get_Rotation: Single;
    procedure set_Rotation(value: Single);
    function get_X: Single;
    procedure set_X(value: Single);
    function get_Y: Single;
    procedure set_Y(value: Single);
    function get_Width: Single;
    procedure set_Width(value: Single);
    function get_Height: Single;
    procedure set_Height(value: Single);
    function get_BlackWhiteMode: DNBlackWhiteMode;
    procedure set_BlackWhiteMode(value: DNBlackWhiteMode);
    function get_UniqueId: UInt32;
    function get_OfficeInteropShapeId: UInt32;
    function get_AlternativeText: string;
    procedure set_AlternativeText(value: string);
    function get_AlternativeTextTitle: string;
    procedure set_AlternativeTextTitle(value: string);
    function get_Name: string;
    procedure set_Name(value: string);
    function get_IsGrouped: Boolean;
    function get_ParentGroup: DNIGroupShape;
    function get_Slide: DNIBaseSlide;
    function get_Presentation: DNIPresentation;

  { methods } 

    procedure RemovePlaceholder;
    function AddPlaceholder(placeholderToCopyFrom: DNIPlaceholder): DNIPlaceholder;
    function GetThumbnail: DDN.System.Drawing.DNBitmap; overload;
    function GetThumbnail(bounds: DNShapeThumbnailBounds; scaleX: Single; scaleY: Single): DDN.System.Drawing.DNBitmap; overload;
    procedure WriteAsSvg(stream: DDN.mscorlib.DNStream); overload;
    procedure WriteAsSvg(stream: DDN.mscorlib.DNStream; svgOptions: DNISVGOptions); overload;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property ImageType: DNZoomImageType read get_ImageType write set_ImageType;
    property ReturnToParent: Boolean read get_ReturnToParent write set_ReturnToParent;
    property TargetSlide: DNISlide read get_TargetSlide write set_TargetSlide;
    property ShowBackground: Boolean read get_ShowBackground write set_ShowBackground;
    property Image: DNIPPImage read get_Image write set_Image;
    property TransitionDuration: Single read get_TransitionDuration write set_TransitionDuration;
    property ShapeLock: DNIGraphicalObjectLock read get_ShapeLock;
    property GraphicalObjectLock: DNIGraphicalObjectLock read get_GraphicalObjectLock;
    property IsTextHolder: Boolean read get_IsTextHolder;
    property Placeholder: DNIPlaceholder read get_Placeholder;
    property CustomData: DNICustomData read get_CustomData;
    property RawFrame: DNIShapeFrame read get_RawFrame write set_RawFrame;
    property Frame: DNIShapeFrame read get_Frame write set_Frame;
    property LineFormat: DNILineFormat read get_LineFormat;
    property ThreeDFormat: DNIThreeDFormat read get_ThreeDFormat;
    property EffectFormat: DNIEffectFormat read get_EffectFormat;
    property FillFormat: DNIFillFormat read get_FillFormat;
    property HyperlinkClick: DNIHyperlink read get_HyperlinkClick write set_HyperlinkClick;
    property HyperlinkMouseOver: DNIHyperlink read get_HyperlinkMouseOver write set_HyperlinkMouseOver;
    property HyperlinkManager: DNIHyperlinkManager read get_HyperlinkManager;
    property Hidden: Boolean read get_Hidden write set_Hidden;
    property ZOrderPosition: Int32 read get_ZOrderPosition;
    property ConnectionSiteCount: Int32 read get_ConnectionSiteCount;
    property Rotation: Single read get_Rotation write set_Rotation;
    property X: Single read get_X write set_X;
    property Y: Single read get_Y write set_Y;
    property Width: Single read get_Width write set_Width;
    property Height: Single read get_Height write set_Height;
    property BlackWhiteMode: DNBlackWhiteMode read get_BlackWhiteMode write set_BlackWhiteMode;
    property UniqueId: UInt32 read get_UniqueId;
    property OfficeInteropShapeId: UInt32 read get_OfficeInteropShapeId;
    property AlternativeText: string read get_AlternativeText write set_AlternativeText;
    property AlternativeTextTitle: string read get_AlternativeTextTitle write set_AlternativeTextTitle;
    property Name: string read get_Name write set_Name;
    property IsGrouped: Boolean read get_IsGrouped;
    property ParentGroup: DNIGroupShape read get_ParentGroup;
    property Slide: DNIBaseSlide read get_Slide;
    property Presentation: DNIPresentation read get_Presentation;
  end;

  TDNZoomFrame = class(TDNGenericImport<DNZoomFrameClass, DNZoomFrame>) end;

  //-------------namespace: Aspose.Slides----------------
  DNGroupShapeClass = interface(DNShapeClass)
  ['{580A5088-B93B-5763-AB7C-E1A6F7CFD23C}']
  end;

  [DNTypeName('Aspose.Slides.GroupShape')]
  DNGroupShape = interface(DNShape)
  ['{1A98F2AA-36DA-3BB0-A2D3-DAC85EE1FB3F}']
  { getters & setters } 

    function get_LineFormat: DNILineFormat;
    function get_ShapeLock: DNIGroupShapeLock;
    function get_GroupShapeLock: DNIGroupShapeLock;
    function get_Shapes: DNIShapeCollection;
    function get_AsIShape: DNIShape;
    function get_IsTextHolder: Boolean;
    function get_Placeholder: DNIPlaceholder;
    function get_CustomData: DNICustomData;
    function get_RawFrame: DNIShapeFrame;
    procedure set_RawFrame(value: DNIShapeFrame);
    function get_Frame: DNIShapeFrame;
    procedure set_Frame(value: DNIShapeFrame);
    function get_ThreeDFormat: DNIThreeDFormat;
    function get_EffectFormat: DNIEffectFormat;
    function get_FillFormat: DNIFillFormat;
    function get_HyperlinkClick: DNIHyperlink;
    procedure set_HyperlinkClick(value: DNIHyperlink);
    function get_HyperlinkMouseOver: DNIHyperlink;
    procedure set_HyperlinkMouseOver(value: DNIHyperlink);
    function get_HyperlinkManager: DNIHyperlinkManager;
    function get_Hidden: Boolean;
    procedure set_Hidden(value: Boolean);
    function get_ZOrderPosition: Int32;
    function get_ConnectionSiteCount: Int32;
    function get_Rotation: Single;
    procedure set_Rotation(value: Single);
    function get_X: Single;
    procedure set_X(value: Single);
    function get_Y: Single;
    procedure set_Y(value: Single);
    function get_Width: Single;
    procedure set_Width(value: Single);
    function get_Height: Single;
    procedure set_Height(value: Single);
    function get_BlackWhiteMode: DNBlackWhiteMode;
    procedure set_BlackWhiteMode(value: DNBlackWhiteMode);
    function get_UniqueId: UInt32;
    function get_OfficeInteropShapeId: UInt32;
    function get_AlternativeText: string;
    procedure set_AlternativeText(value: string);
    function get_AlternativeTextTitle: string;
    procedure set_AlternativeTextTitle(value: string);
    function get_Name: string;
    procedure set_Name(value: string);
    function get_IsGrouped: Boolean;
    function get_ParentGroup: DNIGroupShape;
    function get_Slide: DNIBaseSlide;
    function get_Presentation: DNIPresentation;

  { methods } 

    procedure RemovePlaceholder;
    function AddPlaceholder(placeholderToCopyFrom: DNIPlaceholder): DNIPlaceholder;
    function GetThumbnail: DDN.System.Drawing.DNBitmap; overload;
    function GetThumbnail(bounds: DNShapeThumbnailBounds; scaleX: Single; scaleY: Single): DDN.System.Drawing.DNBitmap; overload;
    procedure WriteAsSvg(stream: DDN.mscorlib.DNStream); overload;
    procedure WriteAsSvg(stream: DDN.mscorlib.DNStream; svgOptions: DNISVGOptions); overload;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property LineFormat: DNILineFormat read get_LineFormat;
    property ShapeLock: DNIGroupShapeLock read get_ShapeLock;
    property GroupShapeLock: DNIGroupShapeLock read get_GroupShapeLock;
    property Shapes: DNIShapeCollection read get_Shapes;
    property AsIShape: DNIShape read get_AsIShape;
    property IsTextHolder: Boolean read get_IsTextHolder;
    property Placeholder: DNIPlaceholder read get_Placeholder;
    property CustomData: DNICustomData read get_CustomData;
    property RawFrame: DNIShapeFrame read get_RawFrame write set_RawFrame;
    property Frame: DNIShapeFrame read get_Frame write set_Frame;
    property ThreeDFormat: DNIThreeDFormat read get_ThreeDFormat;
    property EffectFormat: DNIEffectFormat read get_EffectFormat;
    property FillFormat: DNIFillFormat read get_FillFormat;
    property HyperlinkClick: DNIHyperlink read get_HyperlinkClick write set_HyperlinkClick;
    property HyperlinkMouseOver: DNIHyperlink read get_HyperlinkMouseOver write set_HyperlinkMouseOver;
    property HyperlinkManager: DNIHyperlinkManager read get_HyperlinkManager;
    property Hidden: Boolean read get_Hidden write set_Hidden;
    property ZOrderPosition: Int32 read get_ZOrderPosition;
    property ConnectionSiteCount: Int32 read get_ConnectionSiteCount;
    property Rotation: Single read get_Rotation write set_Rotation;
    property X: Single read get_X write set_X;
    property Y: Single read get_Y write set_Y;
    property Width: Single read get_Width write set_Width;
    property Height: Single read get_Height write set_Height;
    property BlackWhiteMode: DNBlackWhiteMode read get_BlackWhiteMode write set_BlackWhiteMode;
    property UniqueId: UInt32 read get_UniqueId;
    property OfficeInteropShapeId: UInt32 read get_OfficeInteropShapeId;
    property AlternativeText: string read get_AlternativeText write set_AlternativeText;
    property AlternativeTextTitle: string read get_AlternativeTextTitle write set_AlternativeTextTitle;
    property Name: string read get_Name write set_Name;
    property IsGrouped: Boolean read get_IsGrouped;
    property ParentGroup: DNIGroupShape read get_ParentGroup;
    property Slide: DNIBaseSlide read get_Slide;
    property Presentation: DNIPresentation read get_Presentation;
  end;

  TDNGroupShape = class(TDNGenericImport<DNGroupShapeClass, DNGroupShape>) end;

  //-------------namespace: Aspose.Slides----------------
  DNShapeCollectionClass = interface(DNObjectClass)
  ['{BBB992F3-3B1C-5476-9574-AB89B628E6F0}']
  end;

  [DNTypeName('Aspose.Slides.ShapeCollection')]
  DNShapeCollection = interface(DDN.mscorlib.DNICollection)
  ['{4D45F021-08C3-3E1E-BE69-9ACF9BD36317}']
  { getters & setters } 

    function get_Count: Int32;
    function get_ParentGroup: DNIGroupShape;
    function get_IsSynchronized: Boolean;
    function get_SyncRoot: DDN.mscorlib.DNObject;

  { methods } 

    function AddChart(&type: DNChartType; x: Single; y: Single; width: Single; height: Single): DNIChart; overload;
    function AddChart(&type: DNChartType; x: Single; y: Single; width: Single; height: Single; initWithSample: Boolean): DNIChart; overload;
    function AddSmartArt(x: Single; y: Single; width: Single; height: Single; layoutType: DNSmartArtLayoutType): DNISmartArt;
    function InsertChart(&type: DNChartType; x: Single; y: Single; width: Single; height: Single; index: Int32): DNIChart; overload;
    function InsertChart(&type: DNChartType; x: Single; y: Single; width: Single; height: Single; index: Int32; initWithSample: Boolean): DNIChart; overload;
    function AddZoomFrame(x: Single; y: Single; width: Single; height: Single; slide: DNISlide): DNIZoomFrame; overload;
    function AddZoomFrame(x: Single; y: Single; width: Single; height: Single; slide: DNISlide; image: DNIPPImage): DNIZoomFrame; overload;
    function InsertZoomFrame(index: Int32; x: Single; y: Single; width: Single; height: Single; slide: DNISlide): DNIZoomFrame; overload;
    function InsertZoomFrame(index: Int32; x: Single; y: Single; width: Single; height: Single; slide: DNISlide; image: DNIPPImage): DNIZoomFrame; overload;
    function AddOleObjectFrame(x: Single; y: Single; width: Single; height: Single; dataInfo: DNIOleEmbeddedDataInfo): DNIOleObjectFrame; overload;
    function AddOleObjectFrame(x: Single; y: Single; width: Single; height: Single; className: string; path: string): DNIOleObjectFrame; overload;
    function InsertOleObjectFrame(index: Int32; x: Single; y: Single; width: Single; height: Single; dataInfo: DNIOleEmbeddedDataInfo): DNIOleObjectFrame; overload;
    function InsertOleObjectFrame(index: Int32; x: Single; y: Single; width: Single; height: Single; className: string; path: string): DNIOleObjectFrame; overload;
    function AddVideoFrame(x: Single; y: Single; width: Single; height: Single; fname: string): DNIVideoFrame; overload;
    function AddVideoFrame(x: Single; y: Single; width: Single; height: Single; video: DNIVideo): DNIVideoFrame; overload;
    function InsertVideoFrame(index: Int32; x: Single; y: Single; width: Single; height: Single; fname: string): DNIVideoFrame;
    function AddAudioFrameCD(x: Single; y: Single; width: Single; height: Single): DNIAudioFrame;
    function InsertAudioFrameCD(index: Int32; x: Single; y: Single; width: Single; height: Single): DNIAudioFrame;
    function AddAudioFrameLinked(x: Single; y: Single; width: Single; height: Single; fname: string): DNIAudioFrame;
    function InsertAudioFrameLinked(index: Int32; x: Single; y: Single; width: Single; height: Single; fname: string): DNIAudioFrame;
    function AddAudioFrameEmbedded(x: Single; y: Single; width: Single; height: Single; audio_stream: DDN.mscorlib.DNStream): DNIAudioFrame; overload;
    function InsertAudioFrameEmbedded(index: Int32; x: Single; y: Single; width: Single; height: Single; audio_stream: DDN.mscorlib.DNStream): DNIAudioFrame; overload;
    function AddAudioFrameEmbedded(x: Single; y: Single; width: Single; height: Single; audio: DNIAudio): DNIAudioFrame; overload;
    function InsertAudioFrameEmbedded(index: Int32; x: Single; y: Single; width: Single; height: Single; audio: DNIAudio): DNIAudioFrame; overload;
    function IndexOf(shape: DNIShape): Int32;
    function ToArray: TArray<DNIShape>; overload;
    function ToArray(startIndex: Int32; count: Int32): TArray<DNIShape>; overload;
    procedure Reorder(index: Int32; shape: DNIShape); overload;
    procedure Reorder(index: Int32; shapes: TArray<DNIShape>); overload;
    function AddAutoShape(shapeType: DNShapeType; x: Single; y: Single; width: Single; height: Single): DNIAutoShape; overload;
    function AddAutoShape(shapeType: DNShapeType; x: Single; y: Single; width: Single; height: Single; createFromTemplate: Boolean): DNIAutoShape; overload;
    function AddMathShape(x: Single; y: Single; width: Single; height: Single): DNIAutoShape;
    function InsertAutoShape(index: Int32; shapeType: DNShapeType; x: Single; y: Single; width: Single; height: Single): DNIAutoShape; overload;
    function InsertAutoShape(index: Int32; shapeType: DNShapeType; x: Single; y: Single; width: Single; height: Single; createFromTemplate: Boolean): DNIAutoShape; overload;
    function AddGroupShape: DNIGroupShape; overload;
    function AddGroupShape(svgImage: DNISvgImage; x: Single; y: Single; width: Single; height: Single): DNIGroupShape; overload;
    function InsertGroupShape(index: Int32): DNIGroupShape;
    function AddConnector(shapeType: DNShapeType; x: Single; y: Single; width: Single; height: Single): DNIConnector; overload;
    function AddConnector(shapeType: DNShapeType; x: Single; y: Single; width: Single; height: Single; createFromTemplate: Boolean): DNIConnector; overload;
    function InsertConnector(index: Int32; shapeType: DNShapeType; x: Single; y: Single; width: Single; height: Single): DNIConnector; overload;
    function InsertConnector(index: Int32; shapeType: DNShapeType; x: Single; y: Single; width: Single; height: Single; createFromTemplate: Boolean): DNIConnector; overload;
    function AddPictureFrame(shapeType: DNShapeType; x: Single; y: Single; width: Single; height: Single; image: DNIPPImage): DNIPictureFrame;
    function InsertPictureFrame(index: Int32; shapeType: DNShapeType; x: Single; y: Single; width: Single; height: Single; image: DNIPPImage): DNIPictureFrame;
    function AddTable(x: Single; y: Single; columnWidths: TArray<Double>; rowHeights: TArray<Double>): DNITable;
    function InsertTable(index: Int32; x: Single; y: Single; columnWidths: TArray<Double>; rowHeights: TArray<Double>): DNITable;
    procedure RemoveAt(index: Int32);
    function GetEnumerator: DDN.mscorlib.DNIEnumerator<DNIShape>;
    function AddClone(sourceShape: DNIShape; x: Single; y: Single; width: Single; height: Single): DNIShape; overload;
    function AddClone(sourceShape: DNIShape; x: Single; y: Single): DNIShape; overload;
    function AddClone(sourceShape: DNIShape): DNIShape; overload;
    function InsertClone(index: Int32; sourceShape: DNIShape; x: Single; y: Single; width: Single; height: Single): DNIShape; overload;
    function InsertClone(index: Int32; sourceShape: DNIShape; x: Single; y: Single): DNIShape; overload;
    function InsertClone(index: Int32; sourceShape: DNIShape): DNIShape; overload;
    procedure CopyTo(&array: DDN.mscorlib.DNArray; index: Int32);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Count: Int32 read get_Count;
    property ParentGroup: DNIGroupShape read get_ParentGroup;
    property IsSynchronized: Boolean read get_IsSynchronized;
    property SyncRoot: DDN.mscorlib.DNObject read get_SyncRoot;
  end;

  TDNShapeCollection = class(TDNGenericImport<DNShapeCollectionClass, DNShapeCollection>) end;

  //-------------namespace: Aspose.Slides----------------
  DNShapeElementClass = interface(DNObjectClass)
  ['{B5A2F513-904D-58A2-B539-F66419DD0CC4}']
  end;

  [DNTypeName('Aspose.Slides.ShapeElement')]
  DNShapeElement = interface(DNIShapeElement)
  ['{1FD43CE3-1145-33AD-805C-AB68403205B3}']
  { getters & setters } 

    function get_ParentShape: DNShape;
    function get_GraphicsPath: DDN.System.Drawing.DNGraphicsPath;
    function get_FillSource: DNShapeElementFillSource;
    function get_StrokeSource: DNShapeElementStrokeSource;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property ParentShape: DNShape read get_ParentShape;
    property GraphicsPath: DDN.System.Drawing.DNGraphicsPath read get_GraphicsPath;
    property FillSource: DNShapeElementFillSource read get_FillSource;
    property StrokeSource: DNShapeElementStrokeSource read get_StrokeSource;
  end;

  TDNShapeElement = class(TDNGenericImport<DNShapeElementClass, DNShapeElement>) end;

  //-------------namespace: Aspose.Slides----------------
  DNShapeFrameClass = interface(DNObjectClass)
  ['{52EB7E74-82FC-5C54-8BD7-6AD3C1B02F5B}']
  { constructors } 

    {class} function init(x: Single; y: Single; width: Single; height: Single; flipH: DNNullableBool; flipV: DNNullableBool; rotationAngle: Single): DNShapeFrame;

  end;

  [DNTypeName('Aspose.Slides.ShapeFrame')]
  DNShapeFrame = interface(DDN.mscorlib.DNICloneable)
  ['{99ED6B73-87FA-4A5D-B614-2D6EDDD40022}']
  { getters & setters } 

    function get_X: Single;
    function get_Y: Single;
    function get_Width: Single;
    function get_Height: Single;
    function get_Rotation: Single;
    function get_CenterX: Single;
    function get_CenterY: Single;
    function get_FlipH: DNNullableBool;
    function get_FlipV: DNNullableBool;
    function get_Rectangle: DDN.System.Drawing.DNRectangleF;

  { methods } 

    function Clone: DDN.mscorlib.DNObject;
    function CloneT: DNIShapeFrame;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean; overload;
    function Equals(value: DNShapeFrame): Boolean; overload;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property X: Single read get_X;
    property Y: Single read get_Y;
    property Width: Single read get_Width;
    property Height: Single read get_Height;
    property Rotation: Single read get_Rotation;
    property CenterX: Single read get_CenterX;
    property CenterY: Single read get_CenterY;
    property FlipH: DNNullableBool read get_FlipH;
    property FlipV: DNNullableBool read get_FlipV;
    property Rectangle: DDN.System.Drawing.DNRectangleF read get_Rectangle;
  end;

  TDNShapeFrame = class(TDNGenericImport<DNShapeFrameClass, DNShapeFrame>) end;

  //-------------namespace: Aspose.Slides----------------
  DNShapeStyleClass = interface(DDN.mscorlib.DNObjectClass)
  ['{CB2012B9-0C17-5E58-A959-33345F9F6259}']
  end;

  [DNTypeName('Aspose.Slides.ShapeStyle')]
  DNShapeStyle = interface(DDN.mscorlib.DNObject)
  ['{22DF9862-B214-3983-892E-97BF2D477024}']
  { getters & setters } 

    function get_LineColor: DNIColorFormat;
    function get_LineStyleIndex: UInt16;
    procedure set_LineStyleIndex(value: UInt16);
    function get_FillColor: DNIColorFormat;
    function get_FillStyleIndex: Int16;
    procedure set_FillStyleIndex(value: Int16);
    function get_EffectColor: DNIColorFormat;
    function get_EffectStyleIndex: UInt32;
    procedure set_EffectStyleIndex(value: UInt32);
    function get_FontColor: DNIColorFormat;
    function get_FontCollectionIndex: DNFontCollectionIndex;
    procedure set_FontCollectionIndex(value: DNFontCollectionIndex);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property LineColor: DNIColorFormat read get_LineColor;
    property LineStyleIndex: UInt16 read get_LineStyleIndex write set_LineStyleIndex;
    property FillColor: DNIColorFormat read get_FillColor;
    property FillStyleIndex: Int16 read get_FillStyleIndex write set_FillStyleIndex;
    property EffectColor: DNIColorFormat read get_EffectColor;
    property EffectStyleIndex: UInt32 read get_EffectStyleIndex write set_EffectStyleIndex;
    property FontColor: DNIColorFormat read get_FontColor;
    property FontCollectionIndex: DNFontCollectionIndex read get_FontCollectionIndex write set_FontCollectionIndex;
  end;

  TDNShapeStyle = class(TDNGenericImport<DNShapeStyleClass, DNShapeStyle>) end;

  //-------------namespace: Aspose.Slides----------------
  DNSlideCollectionClass = interface(DNObjectClass)
  ['{D99BADEC-825D-5B5A-85E4-3ED5B14902E7}']
  end;

  [DNTypeName('Aspose.Slides.SlideCollection')]
  DNSlideCollection = interface(DDN.mscorlib.DNICollection)
  ['{AF0304DE-7C73-33D9-A5C1-94BBAABF9169}']
  { getters & setters } 

    function get_Count: Int32;
    function get_IsSynchronized: Boolean;
    function get_SyncRoot: DDN.mscorlib.DNObject;

  { methods } 

    function AddClone(sourceSlide: DNISlide): DNISlide; overload;
    function AddClone(sourceSlide: DNISlide; section: DNISection): DNISlide; overload;
    function InsertClone(index: Int32; sourceSlide: DNISlide): DNISlide; overload;
    function AddEmptySlide(layout: DNILayoutSlide): DNISlide;
    function InsertEmptySlide(index: Int32; layout: DNILayoutSlide): DNISlide;
    function AddClone(sourceSlide: DNISlide; destLayout: DNILayoutSlide): DNISlide; overload;
    function InsertClone(index: Int32; sourceSlide: DNISlide; destLayout: DNILayoutSlide): DNISlide; overload;
    function AddClone(sourceSlide: DNISlide; destMaster: DNIMasterSlide; allowCloneMissingLayout: Boolean): DNISlide; overload;
    function InsertClone(index: Int32; sourceSlide: DNISlide; destMaster: DNIMasterSlide; allowCloneMissingLayout: Boolean): DNISlide; overload;
    procedure RemoveAt(index: Int32);
    function GetEnumerator: DDN.mscorlib.DNIEnumerator<DNISlide>;
    function ToArray: TArray<DNISlide>; overload;
    function ToArray(startIndex: Int32; count: Int32): TArray<DNISlide>; overload;
    procedure Reorder(index: Int32; slide: DNISlide); overload;
    procedure Reorder(index: Int32; slides: TArray<DNISlide>); overload;
    function IndexOf(slide: DNISlide): Int32;
    function AddFromPdf(path: string): TArray<DNISlide>; overload;
    function AddFromPdf(pdfStream: DDN.mscorlib.DNStream): TArray<DNISlide>; overload;
    function AddFromHtml(htmlText: string; resolver: DNIExternalResourceResolver; uri: string): TArray<DNISlide>; overload;
    function AddFromHtml(htmlText: string): TArray<DNISlide>; overload;
    function AddFromHtml(htmlReader: DDN.mscorlib.DNTextReader; resolver: DNIExternalResourceResolver; uri: string): TArray<DNISlide>; overload;
    function AddFromHtml(htmlReader: DDN.mscorlib.DNTextReader): TArray<DNISlide>; overload;
    function AddFromHtml(htmlStream: DDN.mscorlib.DNStream; resolver: DNIExternalResourceResolver; uri: string): TArray<DNISlide>; overload;
    function AddFromHtml(htmlStream: DDN.mscorlib.DNStream): TArray<DNISlide>; overload;
    function InsertFromHtml(index: Int32; htmlText: string; resolver: DNIExternalResourceResolver; uri: string): TArray<DNISlide>; overload;
    function InsertFromHtml(index: Int32; htmlText: string): TArray<DNISlide>; overload;
    function InsertFromHtml(index: Int32; htmlReader: DDN.mscorlib.DNTextReader; resolver: DNIExternalResourceResolver; uri: string): TArray<DNISlide>; overload;
    function InsertFromHtml(index: Int32; htmlReader: DDN.mscorlib.DNTextReader): TArray<DNISlide>; overload;
    function InsertFromHtml(index: Int32; htmlStream: DDN.mscorlib.DNStream; resolver: DNIExternalResourceResolver; uri: string): TArray<DNISlide>; overload;
    function InsertFromHtml(index: Int32; htmlStream: DDN.mscorlib.DNStream): TArray<DNISlide>; overload;
    procedure CopyTo(&array: DDN.mscorlib.DNArray; index: Int32);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Count: Int32 read get_Count;
    property IsSynchronized: Boolean read get_IsSynchronized;
    property SyncRoot: DDN.mscorlib.DNObject read get_SyncRoot;
  end;

  TDNSlideCollection = class(TDNGenericImport<DNSlideCollectionClass, DNSlideCollection>) end;

  //-------------namespace: Aspose.Slides.SlideShow----------------
  DNSlideShowTransitionClass = interface(DDN.mscorlib.DNObjectClass)
  ['{B36652EF-EA38-5574-863E-FCC4FF92A256}']
  end;

  [DNTypeName('Aspose.Slides.SlideShow.SlideShowTransition')]
  DNSlideShowTransition = interface(DDN.mscorlib.DNObject)
  ['{CDE3B641-18A5-3810-BE02-919293CDA255}']
  { getters & setters } 

    function get_Sound: DNIAudio;
    procedure set_Sound(value: DNIAudio);
    function get_SoundMode: DNTransitionSoundMode;
    procedure set_SoundMode(value: DNTransitionSoundMode);
    function get_SoundLoop: Boolean;
    procedure set_SoundLoop(value: Boolean);
    function get_AdvanceOnClick: Boolean;
    procedure set_AdvanceOnClick(value: Boolean);
    function get_AdvanceAfterTime: UInt32;
    procedure set_AdvanceAfterTime(value: UInt32);
    function get_Speed: DNTransitionSpeed;
    procedure set_Speed(value: DNTransitionSpeed);
    function get_Value: DNITransitionValueBase;
    function get_Type: DNTransitionType;
    procedure set_Type(value: DNTransitionType);
    function get_SoundIsBuiltIn: Boolean;
    procedure set_SoundIsBuiltIn(value: Boolean);
    function get_SoundName: string;
    procedure set_SoundName(value: string);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Sound: DNIAudio read get_Sound write set_Sound;
    property SoundMode: DNTransitionSoundMode read get_SoundMode write set_SoundMode;
    property SoundLoop: Boolean read get_SoundLoop write set_SoundLoop;
    property AdvanceOnClick: Boolean read get_AdvanceOnClick write set_AdvanceOnClick;
    property AdvanceAfterTime: UInt32 read get_AdvanceAfterTime write set_AdvanceAfterTime;
    property Speed: DNTransitionSpeed read get_Speed write set_Speed;
    property Value: DNITransitionValueBase read get_Value;
    property &Type: DNTransitionType read get_Type write set_Type;
    property SoundIsBuiltIn: Boolean read get_SoundIsBuiltIn write set_SoundIsBuiltIn;
    property SoundName: string read get_SoundName write set_SoundName;
  end;

  TDNSlideShowTransition = class(TDNGenericImport<DNSlideShowTransitionClass, DNSlideShowTransition>) end;

  //-------------namespace: Aspose.Slides.SlideShow----------------
  DNTransitionValueBaseClass = interface(DNObjectClass)
  ['{B7E00138-C904-5165-A291-BBE6DB3A8E9F}']
  end;

  [DNTypeName('Aspose.Slides.SlideShow.TransitionValueBase')]
  DNTransitionValueBase = interface(DNITransitionValueBase)
  ['{0B091180-B04E-347D-9A43-B3FDAAF44789}']
  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNTransitionValueBase = class(TDNGenericImport<DNTransitionValueBaseClass, DNTransitionValueBase>) end;

  //-------------namespace: Aspose.Slides.SlideShow----------------
  DNCornerDirectionTransitionClass = interface(DNTransitionValueBaseClass)
  ['{D370DEF6-75DF-58E8-AD09-964B070B596A}']
  end;

  [DNTypeName('Aspose.Slides.SlideShow.CornerDirectionTransition')]
  DNCornerDirectionTransition = interface(DNTransitionValueBase)
  ['{0D08F6D5-AE47-3D95-A185-FF659B8BD245}']
  { getters & setters } 

    function get_Direction: DNTransitionCornerDirectionType;
    procedure set_Direction(value: DNTransitionCornerDirectionType);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Direction: DNTransitionCornerDirectionType read get_Direction write set_Direction;
  end;

  TDNCornerDirectionTransition = class(TDNGenericImport<DNCornerDirectionTransitionClass, DNCornerDirectionTransition>) end;

  //-------------namespace: Aspose.Slides.SlideShow----------------
  DNEightDirectionTransitionClass = interface(DNTransitionValueBaseClass)
  ['{66527FF8-45BF-575E-AFD4-297EBEA4F823}']
  end;

  [DNTypeName('Aspose.Slides.SlideShow.EightDirectionTransition')]
  DNEightDirectionTransition = interface(DNTransitionValueBase)
  ['{BBCBFC2E-4F24-358E-81FD-FE558C3BA809}']
  { getters & setters } 

    function get_Direction: DNTransitionEightDirectionType;
    procedure set_Direction(value: DNTransitionEightDirectionType);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Direction: DNTransitionEightDirectionType read get_Direction write set_Direction;
  end;

  TDNEightDirectionTransition = class(TDNGenericImport<DNEightDirectionTransitionClass, DNEightDirectionTransition>) end;

  //-------------namespace: Aspose.Slides.SlideShow----------------
  DNEmptyTransitionClass = interface(DNTransitionValueBaseClass)
  ['{42107784-A2B0-5150-A8FC-EAE3A1354C2F}']
  end;

  [DNTypeName('Aspose.Slides.SlideShow.EmptyTransition')]
  DNEmptyTransition = interface(DNTransitionValueBase)
  ['{C2C4AF66-3C77-37E5-854D-50A157F6A550}']
  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNEmptyTransition = class(TDNGenericImport<DNEmptyTransitionClass, DNEmptyTransition>) end;

  //-------------namespace: Aspose.Slides.SlideShow----------------
  DNFlyThroughTransitionClass = interface(DNTransitionValueBaseClass)
  ['{7851BF46-D209-50F1-917C-7851663641C8}']
  end;

  [DNTypeName('Aspose.Slides.SlideShow.FlyThroughTransition')]
  DNFlyThroughTransition = interface(DNTransitionValueBase)
  ['{270D7B72-FCB5-3D6A-8696-3F8AB10C202F}']
  { getters & setters } 

    function get_Direction: DNTransitionInOutDirectionType;
    procedure set_Direction(value: DNTransitionInOutDirectionType);
    function get_HasBounce: Boolean;
    procedure set_HasBounce(value: Boolean);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Direction: DNTransitionInOutDirectionType read get_Direction write set_Direction;
    property HasBounce: Boolean read get_HasBounce write set_HasBounce;
  end;

  TDNFlyThroughTransition = class(TDNGenericImport<DNFlyThroughTransitionClass, DNFlyThroughTransition>) end;

  //-------------namespace: Aspose.Slides.SlideShow----------------
  DNGlitterTransitionClass = interface(DNTransitionValueBaseClass)
  ['{871509F4-2019-5AB5-95D6-512484F394EC}']
  end;

  [DNTypeName('Aspose.Slides.SlideShow.GlitterTransition')]
  DNGlitterTransition = interface(DNTransitionValueBase)
  ['{2689AEEA-CADE-3506-BCDC-87EE5549E964}']
  { getters & setters } 

    function get_Direction: DNTransitionSideDirectionType;
    procedure set_Direction(value: DNTransitionSideDirectionType);
    function get_Pattern: DNTransitionPattern;
    procedure set_Pattern(value: DNTransitionPattern);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Direction: DNTransitionSideDirectionType read get_Direction write set_Direction;
    property Pattern: DNTransitionPattern read get_Pattern write set_Pattern;
  end;

  TDNGlitterTransition = class(TDNGenericImport<DNGlitterTransitionClass, DNGlitterTransition>) end;

  //-------------namespace: Aspose.Slides.SlideShow----------------
  DNInOutTransitionClass = interface(DNTransitionValueBaseClass)
  ['{6A06948D-70D2-5081-A40F-EA03D9AC6917}']
  end;

  [DNTypeName('Aspose.Slides.SlideShow.InOutTransition')]
  DNInOutTransition = interface(DNTransitionValueBase)
  ['{5A70219F-5280-3256-89FC-585EAFC01FA0}']
  { getters & setters } 

    function get_Direction: DNTransitionInOutDirectionType;
    procedure set_Direction(value: DNTransitionInOutDirectionType);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Direction: DNTransitionInOutDirectionType read get_Direction write set_Direction;
  end;

  TDNInOutTransition = class(TDNGenericImport<DNInOutTransitionClass, DNInOutTransition>) end;

  //-------------namespace: Aspose.Slides.SlideShow----------------
  DNLeftRightDirectionTransitionClass = interface(DNTransitionValueBaseClass)
  ['{50BE5825-872C-55E5-86C0-2059B78C0E50}']
  end;

  [DNTypeName('Aspose.Slides.SlideShow.LeftRightDirectionTransition')]
  DNLeftRightDirectionTransition = interface(DNTransitionValueBase)
  ['{BC68B90C-77F2-3EFB-85D8-0EC7F9773D04}']
  { getters & setters } 

    function get_Direction: DNTransitionLeftRightDirectionType;
    procedure set_Direction(value: DNTransitionLeftRightDirectionType);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Direction: DNTransitionLeftRightDirectionType read get_Direction write set_Direction;
  end;

  TDNLeftRightDirectionTransition = class(TDNGenericImport<DNLeftRightDirectionTransitionClass, DNLeftRightDirectionTransition>) end;

  //-------------namespace: Aspose.Slides.SlideShow----------------
  DNMorphTransitionClass = interface(DNTransitionValueBaseClass)
  ['{E55C4674-ABED-5F83-8BB8-C192465A5F43}']
  end;

  [DNTypeName('Aspose.Slides.SlideShow.MorphTransition')]
  DNMorphTransition = interface(DNTransitionValueBase)
  ['{031F01A4-6717-31AA-B7AB-686E9FFF6FDA}']
  { getters & setters } 

    function get_MorphType: DNTransitionMorphType;
    procedure set_MorphType(value: DNTransitionMorphType);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property MorphType: DNTransitionMorphType read get_MorphType write set_MorphType;
  end;

  TDNMorphTransition = class(TDNGenericImport<DNMorphTransitionClass, DNMorphTransition>) end;

  //-------------namespace: Aspose.Slides.SlideShow----------------
  DNOptionalBlackTransitionClass = interface(DNTransitionValueBaseClass)
  ['{B7C85635-95D3-5089-BCFF-3CDAFC5435FB}']
  end;

  [DNTypeName('Aspose.Slides.SlideShow.OptionalBlackTransition')]
  DNOptionalBlackTransition = interface(DNTransitionValueBase)
  ['{DFF88790-E569-35D9-A948-53934B64453E}']
  { getters & setters } 

    function get_FromBlack: Boolean;
    procedure set_FromBlack(value: Boolean);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property FromBlack: Boolean read get_FromBlack write set_FromBlack;
  end;

  TDNOptionalBlackTransition = class(TDNGenericImport<DNOptionalBlackTransitionClass, DNOptionalBlackTransition>) end;

  //-------------namespace: Aspose.Slides.SlideShow----------------
  DNOrientationTransitionClass = interface(DNTransitionValueBaseClass)
  ['{5F94B1FE-7086-5F09-9832-6C7F9E748A53}']
  end;

  [DNTypeName('Aspose.Slides.SlideShow.OrientationTransition')]
  DNOrientationTransition = interface(DNTransitionValueBase)
  ['{C99D1892-537F-3925-BA53-E7961AFE86CB}']
  { getters & setters } 

    function get_Direction: DNOrientation;
    procedure set_Direction(value: DNOrientation);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Direction: DNOrientation read get_Direction write set_Direction;
  end;

  TDNOrientationTransition = class(TDNGenericImport<DNOrientationTransitionClass, DNOrientationTransition>) end;

  //-------------namespace: Aspose.Slides.SlideShow----------------
  DNRevealTransitionClass = interface(DNTransitionValueBaseClass)
  ['{E76F2030-580D-57FD-AF2C-B5664933088D}']
  end;

  [DNTypeName('Aspose.Slides.SlideShow.RevealTransition')]
  DNRevealTransition = interface(DNTransitionValueBase)
  ['{A07DD3A2-E63A-35A4-8918-21F63C0C2321}']
  { getters & setters } 

    function get_Direction: DNTransitionLeftRightDirectionType;
    procedure set_Direction(value: DNTransitionLeftRightDirectionType);
    function get_ThroughBlack: Boolean;
    procedure set_ThroughBlack(value: Boolean);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Direction: DNTransitionLeftRightDirectionType read get_Direction write set_Direction;
    property ThroughBlack: Boolean read get_ThroughBlack write set_ThroughBlack;
  end;

  TDNRevealTransition = class(TDNGenericImport<DNRevealTransitionClass, DNRevealTransition>) end;

  //-------------namespace: Aspose.Slides.SlideShow----------------
  DNRippleTransitionClass = interface(DNTransitionValueBaseClass)
  ['{AE2AD47F-52F1-5125-90DD-EBEC01983FEC}']
  end;

  [DNTypeName('Aspose.Slides.SlideShow.RippleTransition')]
  DNRippleTransition = interface(DNTransitionValueBase)
  ['{75DC5B1E-6482-35E8-BC37-CF2145BCB77B}']
  { getters & setters } 

    function get_Direction: DNTransitionCornerAndCenterDirectionType;
    procedure set_Direction(value: DNTransitionCornerAndCenterDirectionType);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Direction: DNTransitionCornerAndCenterDirectionType read get_Direction write set_Direction;
  end;

  TDNRippleTransition = class(TDNGenericImport<DNRippleTransitionClass, DNRippleTransition>) end;

  //-------------namespace: Aspose.Slides.SlideShow----------------
  DNShredTransitionClass = interface(DNTransitionValueBaseClass)
  ['{F49F0179-5DF4-5C75-AA86-65DF00276EC5}']
  end;

  [DNTypeName('Aspose.Slides.SlideShow.ShredTransition')]
  DNShredTransition = interface(DNTransitionValueBase)
  ['{E9C2278B-B9DA-3233-9299-49B51E53F5EB}']
  { getters & setters } 

    function get_Direction: DNTransitionInOutDirectionType;
    procedure set_Direction(value: DNTransitionInOutDirectionType);
    function get_Pattern: DNTransitionShredPattern;
    procedure set_Pattern(value: DNTransitionShredPattern);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Direction: DNTransitionInOutDirectionType read get_Direction write set_Direction;
    property Pattern: DNTransitionShredPattern read get_Pattern write set_Pattern;
  end;

  TDNShredTransition = class(TDNGenericImport<DNShredTransitionClass, DNShredTransition>) end;

  //-------------namespace: Aspose.Slides.SlideShow----------------
  DNSideDirectionTransitionClass = interface(DNTransitionValueBaseClass)
  ['{35D1CDA3-9F65-5AE0-8611-3816390A52EF}']
  end;

  [DNTypeName('Aspose.Slides.SlideShow.SideDirectionTransition')]
  DNSideDirectionTransition = interface(DNTransitionValueBase)
  ['{3E2D81C0-26E5-3819-8B65-3A120DCBA31B}']
  { getters & setters } 

    function get_Direction: DNTransitionSideDirectionType;
    procedure set_Direction(value: DNTransitionSideDirectionType);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Direction: DNTransitionSideDirectionType read get_Direction write set_Direction;
  end;

  TDNSideDirectionTransition = class(TDNGenericImport<DNSideDirectionTransitionClass, DNSideDirectionTransition>) end;

  //-------------namespace: Aspose.Slides.SlideShow----------------
  DNSplitTransitionClass = interface(DNTransitionValueBaseClass)
  ['{BFEDEFA2-8538-5609-8412-260699CA4CFF}']
  end;

  [DNTypeName('Aspose.Slides.SlideShow.SplitTransition')]
  DNSplitTransition = interface(DNTransitionValueBase)
  ['{AA771E87-3A0C-38AD-864B-F1BBC1784604}']
  { getters & setters } 

    function get_Direction: DNTransitionInOutDirectionType;
    procedure set_Direction(value: DNTransitionInOutDirectionType);
    function get_Orientation: DNOrientation;
    procedure set_Orientation(value: DNOrientation);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Direction: DNTransitionInOutDirectionType read get_Direction write set_Direction;
    property Orientation: DNOrientation read get_Orientation write set_Orientation;
  end;

  TDNSplitTransition = class(TDNGenericImport<DNSplitTransitionClass, DNSplitTransition>) end;

  //-------------namespace: Aspose.Slides.SlideShow----------------
  DNWheelTransitionClass = interface(DNTransitionValueBaseClass)
  ['{1DFE7450-A516-5423-A6F9-7C1E3069B72F}']
  end;

  [DNTypeName('Aspose.Slides.SlideShow.WheelTransition')]
  DNWheelTransition = interface(DNTransitionValueBase)
  ['{DC444104-138D-3A9A-968F-F4B2E5AB76D7}']
  { getters & setters } 

    function get_Spokes: UInt32;
    procedure set_Spokes(value: UInt32);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Spokes: UInt32 read get_Spokes write set_Spokes;
  end;

  TDNWheelTransition = class(TDNGenericImport<DNWheelTransitionClass, DNWheelTransition>) end;

  //-------------namespace: Aspose.Slides----------------
  DNSlideSizeClass = interface(DDN.mscorlib.DNObjectClass)
  ['{86A0DC70-DF13-5FA6-8B51-6045142BAC91}']
  end;

  [DNTypeName('Aspose.Slides.SlideSize')]
  DNSlideSize = interface(DDN.mscorlib.DNObject)
  ['{4716A57B-AFD0-4C1D-826F-B9C78CF43667}']
  { getters & setters } 

    function get_Size: DDN.System.Drawing.DNSizeF;
    function get_Type: DNSlideSizeType;
    function get_Orientation: DNSlideOrienation;
    procedure set_Orientation(value: DNSlideOrienation);

  { methods } 

    procedure SetSize(&type: DNSlideSizeType; scaleType: DNSlideSizeScaleType); overload;
    procedure SetSize(width: Single; height: Single; scaleType: DNSlideSizeScaleType); overload;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Size: DDN.System.Drawing.DNSizeF read get_Size;
    property &Type: DNSlideSizeType read get_Type;
    property Orientation: DNSlideOrienation read get_Orientation write set_Orientation;
  end;

  TDNSlideSize = class(TDNGenericImport<DNSlideSizeClass, DNSlideSize>) end;

  //-------------namespace: Aspose.Slides.SmartArt----------------
  DNSmartArtNodeClass = interface(DNObjectClass)
  ['{017CB2A9-B43D-5D9B-A87E-585204ADC9EF}']
  end;

  [DNTypeName('Aspose.Slides.SmartArt.SmartArtNode')]
  DNSmartArtNode = interface(DNISmartArtNode)
  ['{FBA7D224-8326-34FD-8477-2C3102F3EF4A}']
  { getters & setters } 

    function get_ChildNodes: DNISmartArtNodeCollection;
    function get_Shapes: DNISmartArtShapeCollection;
    function get_TextFrame: DNITextFrame;
    function get_IsAssistant: Boolean;
    procedure set_IsAssistant(value: Boolean);
    function get_Level: Int32;
    function get_BulletFillFormat: DNIFillFormat;
    function get_Position: Int32;
    procedure set_Position(value: Int32);
    function get_IsHidden: Boolean;
    function get_OrganizationChartLayout: DNOrganizationChartLayoutType;
    procedure set_OrganizationChartLayout(value: DNOrganizationChartLayoutType);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property ChildNodes: DNISmartArtNodeCollection read get_ChildNodes;
    property Shapes: DNISmartArtShapeCollection read get_Shapes;
    property TextFrame: DNITextFrame read get_TextFrame;
    property IsAssistant: Boolean read get_IsAssistant write set_IsAssistant;
    property Level: Int32 read get_Level;
    property BulletFillFormat: DNIFillFormat read get_BulletFillFormat;
    property Position: Int32 read get_Position write set_Position;
    property IsHidden: Boolean read get_IsHidden;
    property OrganizationChartLayout: DNOrganizationChartLayoutType read get_OrganizationChartLayout write set_OrganizationChartLayout;
  end;

  TDNSmartArtNode = class(TDNGenericImport<DNSmartArtNodeClass, DNSmartArtNode>) end;

  //-------------namespace: Aspose.Slides.SmartArt----------------
  DNSmartArtNodeCollectionClass = interface(DNObjectClass)
  ['{68B35379-4AD4-5763-B214-EB85EE5C1113}']
  end;

  [DNTypeName('Aspose.Slides.SmartArt.SmartArtNodeCollection')]
  DNSmartArtNodeCollection = interface(DDN.mscorlib.DNICollection)
  ['{1383A30C-96A5-3C27-BD04-88B5447BAD80}']
  { getters & setters } 

    function get_Count: Int32;
    function get_IsSynchronized: Boolean;
    function get_SyncRoot: DDN.mscorlib.DNObject;

  { methods } 

    function AddNode: DNISmartArtNode;
    procedure RemoveNode(index: Int32); overload;
    procedure RemoveNode(node: DNISmartArtNode); overload;
    function AddNodeByPosition(position: Int32): DNISmartArtNode;
    function GetEnumerator: DDN.mscorlib.DNIEnumerator<DNISmartArtNode>;
    procedure CopyTo(&array: DDN.mscorlib.DNArray; index: Int32);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Count: Int32 read get_Count;
    property IsSynchronized: Boolean read get_IsSynchronized;
    property SyncRoot: DDN.mscorlib.DNObject read get_SyncRoot;
  end;

  TDNSmartArtNodeCollection = class(TDNGenericImport<DNSmartArtNodeCollectionClass, DNSmartArtNodeCollection>) end;

  //-------------namespace: Aspose.Slides.SmartArt----------------
  DNSmartArtShapeCollectionClass = interface(DNObjectClass)
  ['{6161634E-20B6-5C05-AB77-B07A7F647860}']
  end;

  [DNTypeName('Aspose.Slides.SmartArt.SmartArtShapeCollection')]
  DNSmartArtShapeCollection = interface(DDN.mscorlib.DNICollection)
  ['{0761E651-1987-33AC-9EE4-36822C012E5F}']
  { getters & setters } 

    function get_Count: Int32;
    function get_IsSynchronized: Boolean;
    function get_SyncRoot: DDN.mscorlib.DNObject;

  { methods } 

    procedure CopyTo(&array: DDN.mscorlib.DNArray; index: Int32);
    function GetEnumerator: DDN.mscorlib.DNIEnumerator<DNISmartArtShape>;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Count: Int32 read get_Count;
    property IsSynchronized: Boolean read get_IsSynchronized;
    property SyncRoot: DDN.mscorlib.DNObject read get_SyncRoot;
  end;

  TDNSmartArtShapeCollection = class(TDNGenericImport<DNSmartArtShapeCollectionClass, DNSmartArtShapeCollection>) end;

  //-------------namespace: Aspose.Slides----------------
  DNSpreadsheetOptionsClass = interface(DNObjectClass)
  ['{27CB4A93-2273-5FBE-A7A4-FA2006F010CF}']
  { constructors } 

    {class} function init: DNSpreadsheetOptions;

  end;

  [DNTypeName('Aspose.Slides.SpreadsheetOptions')]
  DNSpreadsheetOptions = interface(DNISpreadsheetOptions)
  ['{849A12E6-F815-45E3-BC79-343A25759044}']
  { getters & setters } 

    function get_PreferredCulture: DDN.mscorlib.DNCultureInfo;
    procedure set_PreferredCulture(value: DDN.mscorlib.DNCultureInfo);
    function get_RecoverWorkbookFromChartCache: Boolean;
    procedure set_RecoverWorkbookFromChartCache(value: Boolean);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property PreferredCulture: DDN.mscorlib.DNCultureInfo read get_PreferredCulture write set_PreferredCulture;
    property RecoverWorkbookFromChartCache: Boolean read get_RecoverWorkbookFromChartCache write set_RecoverWorkbookFromChartCache;
  end;

  TDNSpreadsheetOptions = class(TDNGenericImport<DNSpreadsheetOptionsClass, DNSpreadsheetOptions>) end;

  //-------------namespace: Aspose.Slides----------------
  DNStreamWrapperClass = interface(DNObjectClass)
  ['{F8B75DCB-39AD-546F-9E59-F8BBA5BE8290}']
  end;

  [DNTypeName('Aspose.Slides.StreamWrapper')]
  DNStreamWrapper = interface(DDN.mscorlib.DNIDisposable)
  ['{E6D327AD-ACDB-4F44-8682-350A2A0A93A4}']
  { getters & setters } 

    function get_Stream: DDN.mscorlib.DNStream;
    function get_CanRead: Boolean;
    function get_CanSeek: Boolean;
    function get_CanWrite: Boolean;
    function get_Length: Int64;
    function get_Position: Int64;
    function get_AsIDisposable: DDN.mscorlib.DNIDisposable;

  { methods } 

    procedure Close;
    procedure Flush;
    procedure Read(buffer: TArray<Byte>; offset: Int32; count: Int32);
    function ReadByte: Int32;
    function Seek(offset: Int64; origin: DDN.mscorlib.DNSeekOrigin): Int64;
    procedure Write(buffer: TArray<Byte>; offset: Int32; count: Int32);
    procedure WriteByte(value: Byte);
    procedure Dispose;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Stream: DDN.mscorlib.DNStream read get_Stream;
    property CanRead: Boolean read get_CanRead;
    property CanSeek: Boolean read get_CanSeek;
    property CanWrite: Boolean read get_CanWrite;
    property Length: Int64 read get_Length;
    property Position: Int64 read get_Position;
    property AsIDisposable: DDN.mscorlib.DNIDisposable read get_AsIDisposable;
  end;

  TDNStreamWrapper = class(TDNGenericImport<DNStreamWrapperClass, DNStreamWrapper>) end;

  //-------------namespace: Aspose.Slides----------------
  DNStreamWrapperFactoryClass = interface(DNObjectClass)
  ['{7C96B7E7-E611-5174-9663-3131E83389C3}']
  { constructors } 

    {class} function init: DNStreamWrapperFactory;

  end;

  [DNTypeName('Aspose.Slides.StreamWrapperFactory')]
  DNStreamWrapperFactory = interface(DNIStreamWrapperFactory)
  ['{6B9A3515-0973-4686-BB42-C46B9A5FA12A}']
  { methods } 

    function CreateMemoryStreamWrapper: DNIStreamWrapper; overload;
    function CreateMemoryStreamWrapper(buffer: TArray<Byte>): DNIStreamWrapper; overload;
    function CreateFileStreamWrapper(fileName: string; fileMode: DDN.mscorlib.DNFileMode): DNIStreamWrapper; overload;
    function CreateFileStreamWrapper(fileName: string; fileMode: DDN.mscorlib.DNFileMode; fileAccess: DDN.mscorlib.DNFileAccess): DNIStreamWrapper; overload;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNStreamWrapperFactory = class(TDNGenericImport<DNStreamWrapperFactoryClass, DNStreamWrapperFactory>) end;

  //-------------namespace: Aspose.Slides----------------
  DNSvgImageClass = interface(DNObjectClass)
  ['{9CB4429A-8C1A-5017-8478-FC4AED566B15}']
  { constructors } 

    {class} function init(data: TArray<Byte>): DNSvgImage; overload;
    {class} function init(svgContent: string): DNSvgImage; overload;
    {class} function init(stream: DDN.mscorlib.DNStream): DNSvgImage; overload;
    {class} function init(data: TArray<Byte>; externalResResolver: DNIExternalResourceResolver; baseUri: string): DNSvgImage; overload;
    {class} function init(svgContent: string; externalResResolver: DNIExternalResourceResolver; baseUri: string): DNSvgImage; overload;
    {class} function init(stream: DDN.mscorlib.DNStream; externalResResolver: DNIExternalResourceResolver; baseUri: string): DNSvgImage; overload;

  end;

  [DNTypeName('Aspose.Slides.SvgImage')]
  DNSvgImage = interface(DNISvgImage)
  ['{B6EC6104-5014-350C-88CD-748305AC042A}']
  { getters & setters } 

    function get_SvgData: TArray<Byte>;
    function get_ExternalResourceResolver: DNIExternalResourceResolver;
    function get_BaseUri: string;
    function get_SvgContent: string;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property SvgData: TArray<Byte> read get_SvgData;
    property ExternalResourceResolver: DNIExternalResourceResolver read get_ExternalResourceResolver;
    property BaseUri: string read get_BaseUri;
    property SvgContent: string read get_SvgContent;
  end;

  TDNSvgImage = class(TDNGenericImport<DNSvgImageClass, DNSvgImage>) end;

  //-------------namespace: Aspose.Slides----------------
  DNTabCollectionClass = interface(DNObjectClass)
  ['{3E751340-D671-5CB1-898E-8CBA83F72DBC}']
  end;

  [DNTypeName('Aspose.Slides.TabCollection')]
  DNTabCollection = interface(DDN.mscorlib.DNICollection)
  ['{F01FC68F-247E-3948-BC6B-324094AE04A3}']
  { getters & setters } 

    function get_Count: Int32;
    function get_IsSynchronized: Boolean;
    function get_SyncRoot: DDN.mscorlib.DNObject;

  { methods } 

    procedure RemoveAt(index: Int32);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetEnumerator: DDN.mscorlib.DNIEnumerator<DNITab>;
    procedure CopyTo(&array: DDN.mscorlib.DNArray; index: Int32);
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Count: Int32 read get_Count;
    property IsSynchronized: Boolean read get_IsSynchronized;
    property SyncRoot: DDN.mscorlib.DNObject read get_SyncRoot;
  end;

  TDNTabCollection = class(TDNGenericImport<DNTabCollectionClass, DNTabCollection>) end;

  //-------------namespace: Aspose.Slides----------------
  DNTabFactoryClass = interface(DNObjectClass)
  ['{F92D60EF-CF7D-5C1F-8B8F-D692ABE79FC6}']
  { constructors } 

    {class} function init: DNTabFactory;

  end;

  [DNTypeName('Aspose.Slides.TabFactory')]
  DNTabFactory = interface(DNITabFactory)
  ['{90A20159-5D64-4018-9ADF-334EF580BC93}']
  { methods } 

    function CreateTab(position: Double; align: DNTabAlignment): DNITab;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNTabFactory = class(TDNGenericImport<DNTabFactoryClass, DNTabFactory>) end;

  //-------------namespace: Aspose.Slides----------------
  DNTableFormatClass = interface(DDN.mscorlib.DNObjectClass)
  ['{488137F9-2D7A-578E-88A1-0F4024D78537}']
  end;

  [DNTypeName('Aspose.Slides.TableFormat')]
  DNTableFormat = interface(DDN.mscorlib.DNObject)
  ['{54866D02-5A97-34F9-A840-5F449C828F0D}']
  { getters & setters } 

    function get_FillFormat: DNIFillFormat;

  { methods } 

    function GetEffective: DNITableFormatEffectiveData;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property FillFormat: DNIFillFormat read get_FillFormat;
  end;

  TDNTableFormat = class(TDNGenericImport<DNTableFormatClass, DNTableFormat>) end;

  //-------------namespace: Aspose.Slides----------------
  DNTagCollectionClass = interface(DNObjectClass)
  ['{33FC67F0-6658-59C0-82B8-C270436B7131}']
  end;

  [DNTypeName('Aspose.Slides.TagCollection')]
  DNTagCollection = interface(DDN.mscorlib.DNICollection)
  ['{3E01F299-0518-3937-B6B6-E2751B5A21A6}']
  { getters & setters } 

    function get_Count: Int32;
    function get_IsSynchronized: Boolean;
    function get_SyncRoot: DDN.mscorlib.DNObject;

  { methods } 

    function IndexOfName(name: string): Int32;
    function &Contains(name: string): Boolean;
    procedure RemoveAt(index: Int32);
    function GetValueByIndex(index: Int32): string;
    function GetNameByIndex(index: Int32): string;
    function GetNamesOfTags: TArray<string>;
    procedure CopyTo(&array: DDN.mscorlib.DNArray; index: Int32);
    function GetEnumerator: DDN.mscorlib.DNIEnumerator<DDN.mscorlib.DNKeyValuePair<string, string>>;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Count: Int32 read get_Count;
    property IsSynchronized: Boolean read get_IsSynchronized;
    property SyncRoot: DDN.mscorlib.DNObject read get_SyncRoot;
  end;

  TDNTagCollection = class(TDNGenericImport<DNTagCollectionClass, DNTagCollection>) end;

  //-------------namespace: Aspose.Slides----------------
  DNTextFrameClass = interface(DDN.mscorlib.DNObjectClass)
  ['{4DD0E5C9-321F-55D9-8805-1B72C938C990}']
  end;

  [DNTypeName('Aspose.Slides.TextFrame')]
  DNTextFrame = interface(DDN.mscorlib.DNObject)
  ['{510C8F72-5CF9-3BD1-9261-E3B9EF8CA411}']
  { getters & setters } 

    function get_Paragraphs: DNIParagraphCollection;
    function get_Text: string;
    procedure set_Text(value: string);
    function get_TextFrameFormat: DNITextFrameFormat;
    function get_HyperlinkQueries: DNIHyperlinkQueries;
    function get_Slide: DNIBaseSlide;
    function get_Presentation: DNIPresentation;

  { methods } 

    procedure JoinPortionsWithSameFormatting;
    procedure HighlightText(text: string; highlightColor: DDN.System.Drawing.DNColor); overload;
    procedure HighlightText(text: string; highlightColor: DDN.System.Drawing.DNColor; options: DNITextHighlightingOptions); overload;
    procedure HighlightRegex(regex: string; highlightColor: DDN.System.Drawing.DNColor; options: DNITextHighlightingOptions);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Paragraphs: DNIParagraphCollection read get_Paragraphs;
    property Text: string read get_Text write set_Text;
    property TextFrameFormat: DNITextFrameFormat read get_TextFrameFormat;
    property HyperlinkQueries: DNIHyperlinkQueries read get_HyperlinkQueries;
    property Slide: DNIBaseSlide read get_Slide;
    property Presentation: DNIPresentation read get_Presentation;
  end;

  TDNTextFrame = class(TDNGenericImport<DNTextFrameClass, DNTextFrame>) end;

  //-------------namespace: Aspose.Slides----------------
  DNTextHighlightingOptionsClass = interface(DNObjectClass)
  ['{D85DD71D-33BF-5EB1-943E-09146893FEBD}']
  { constructors } 

    {class} function init: DNTextHighlightingOptions;

  end;

  [DNTypeName('Aspose.Slides.TextHighlightingOptions')]
  DNTextHighlightingOptions = interface(DNITextHighlightingOptions)
  ['{ADF54EB5-7C99-48AD-8F91-7E20CB06E85A}']
  { getters & setters } 

    function get_CaseSensitive: Boolean;
    procedure set_CaseSensitive(value: Boolean);
    function get_WholeWordsOnly: Boolean;
    procedure set_WholeWordsOnly(value: Boolean);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property CaseSensitive: Boolean read get_CaseSensitive write set_CaseSensitive;
    property WholeWordsOnly: Boolean read get_WholeWordsOnly write set_WholeWordsOnly;
  end;

  TDNTextHighlightingOptions = class(TDNGenericImport<DNTextHighlightingOptionsClass, DNTextHighlightingOptions>) end;

  //-------------namespace: Aspose.Slides.Theme----------------
  DNBaseThemeManagerClass = interface(DDN.mscorlib.DNObjectClass)
  ['{670C140D-A7F2-5857-81A2-7949426DDD45}']
  end;

  [DNTypeName('Aspose.Slides.Theme.BaseThemeManager')]
  DNBaseThemeManager = interface(DDN.mscorlib.DNObject)
  ['{D247C15C-CFDA-39DE-BDED-FC0C94789171}']
  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNBaseThemeManager = class(TDNGenericImport<DNBaseThemeManagerClass, DNBaseThemeManager>) end;

  //-------------namespace: Aspose.Slides.Theme----------------
  DNBaseOverrideThemeManagerClass = interface(DNBaseThemeManagerClass)
  ['{01531C71-F1C7-5E27-84E7-D9389FCAB9A3}']
  end;

  [DNTypeName('Aspose.Slides.Theme.BaseOverrideThemeManager')]
  DNBaseOverrideThemeManager = interface(DNBaseThemeManager)
  ['{53E19AFB-C6BE-398B-AA36-DC7A113A1A3C}']
  { getters & setters } 

    function get_OverrideTheme: DNIOverrideTheme;
    procedure set_OverrideTheme(value: DNIOverrideTheme);
    function get_IsOverrideThemeEnabled: Boolean;

  { methods } 

    function CreateThemeEffective: DNIThemeEffectiveData;
    procedure ApplyColorScheme(scheme: DNIExtraColorScheme);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property OverrideTheme: DNIOverrideTheme read get_OverrideTheme write set_OverrideTheme;
    property IsOverrideThemeEnabled: Boolean read get_IsOverrideThemeEnabled;
  end;

  TDNBaseOverrideThemeManager = class(TDNGenericImport<DNBaseOverrideThemeManagerClass, DNBaseOverrideThemeManager>) end;

  //-------------namespace: Aspose.Slides.Theme----------------
  DNChartThemeManagerClass = interface(DNBaseOverrideThemeManagerClass)
  ['{25D89DC4-0958-58AD-9333-DD993AA14270}']
  end;

  [DNTypeName('Aspose.Slides.Theme.ChartThemeManager')]
  DNChartThemeManager = interface(DNBaseOverrideThemeManager)
  ['{E7AD711E-54E3-404D-B6F6-54D3D4CC8BAC}']
  { getters & setters } 

    function get_OverrideTheme: DNIOverrideTheme;
    procedure set_OverrideTheme(value: DNIOverrideTheme);
    function get_IsOverrideThemeEnabled: Boolean;

  { methods } 

    function CreateThemeEffective: DNIThemeEffectiveData;
    procedure ApplyColorScheme(scheme: DNIExtraColorScheme);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property OverrideTheme: DNIOverrideTheme read get_OverrideTheme write set_OverrideTheme;
    property IsOverrideThemeEnabled: Boolean read get_IsOverrideThemeEnabled;
  end;

  TDNChartThemeManager = class(TDNGenericImport<DNChartThemeManagerClass, DNChartThemeManager>) end;

  //-------------namespace: Aspose.Slides.Theme----------------
  DNLayoutSlideThemeManagerClass = interface(DNBaseOverrideThemeManagerClass)
  ['{5C4382E1-F52B-5113-AA89-E8168F0D3EBF}']
  end;

  [DNTypeName('Aspose.Slides.Theme.LayoutSlideThemeManager')]
  DNLayoutSlideThemeManager = interface(DNBaseOverrideThemeManager)
  ['{4FABDE3A-5FEB-4117-8FEF-F5FEDE7AB6AF}']
  { getters & setters } 

    function get_OverrideTheme: DNIOverrideTheme;
    procedure set_OverrideTheme(value: DNIOverrideTheme);
    function get_IsOverrideThemeEnabled: Boolean;

  { methods } 

    function CreateThemeEffective: DNIThemeEffectiveData;
    procedure ApplyColorScheme(scheme: DNIExtraColorScheme);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property OverrideTheme: DNIOverrideTheme read get_OverrideTheme write set_OverrideTheme;
    property IsOverrideThemeEnabled: Boolean read get_IsOverrideThemeEnabled;
  end;

  TDNLayoutSlideThemeManager = class(TDNGenericImport<DNLayoutSlideThemeManagerClass, DNLayoutSlideThemeManager>) end;

  //-------------namespace: Aspose.Slides.Theme----------------
  DNNotesSlideThemeManagerClass = interface(DNBaseOverrideThemeManagerClass)
  ['{6B9A4D7D-1253-5C68-BB98-0D08F248EF20}']
  end;

  [DNTypeName('Aspose.Slides.Theme.NotesSlideThemeManager')]
  DNNotesSlideThemeManager = interface(DNBaseOverrideThemeManager)
  ['{5FBD1037-149A-4B4E-BA5D-E2604E72F5B0}']
  { getters & setters } 

    function get_OverrideTheme: DNIOverrideTheme;
    procedure set_OverrideTheme(value: DNIOverrideTheme);
    function get_IsOverrideThemeEnabled: Boolean;

  { methods } 

    function CreateThemeEffective: DNIThemeEffectiveData;
    procedure ApplyColorScheme(scheme: DNIExtraColorScheme);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property OverrideTheme: DNIOverrideTheme read get_OverrideTheme write set_OverrideTheme;
    property IsOverrideThemeEnabled: Boolean read get_IsOverrideThemeEnabled;
  end;

  TDNNotesSlideThemeManager = class(TDNGenericImport<DNNotesSlideThemeManagerClass, DNNotesSlideThemeManager>) end;

  //-------------namespace: Aspose.Slides.Theme----------------
  DNSlideThemeManagerClass = interface(DNBaseOverrideThemeManagerClass)
  ['{13AB5895-CEB6-57CF-AA2B-4E609C8E780C}']
  end;

  [DNTypeName('Aspose.Slides.Theme.SlideThemeManager')]
  DNSlideThemeManager = interface(DNBaseOverrideThemeManager)
  ['{977F35FD-3CB3-4155-8863-A12742F2B87B}']
  { getters & setters } 

    function get_OverrideTheme: DNIOverrideTheme;
    procedure set_OverrideTheme(value: DNIOverrideTheme);
    function get_IsOverrideThemeEnabled: Boolean;

  { methods } 

    function CreateThemeEffective: DNIThemeEffectiveData;
    procedure ApplyColorScheme(scheme: DNIExtraColorScheme);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property OverrideTheme: DNIOverrideTheme read get_OverrideTheme write set_OverrideTheme;
    property IsOverrideThemeEnabled: Boolean read get_IsOverrideThemeEnabled;
  end;

  TDNSlideThemeManager = class(TDNGenericImport<DNSlideThemeManagerClass, DNSlideThemeManager>) end;

  //-------------namespace: Aspose.Slides.Theme----------------
  DNMasterThemeManagerClass = interface(DNBaseThemeManagerClass)
  ['{11840287-E4DE-5230-9211-4272A617EF7A}']
  end;

  [DNTypeName('Aspose.Slides.Theme.MasterThemeManager')]
  DNMasterThemeManager = interface(DNBaseThemeManager)
  ['{5C045869-97A5-3E63-8388-A2F4ACB6CB2B}']
  { getters & setters } 

    function get_OverrideTheme: DNIMasterTheme;
    procedure set_OverrideTheme(value: DNIMasterTheme);
    function get_IsOverrideThemeEnabled: Boolean;
    procedure set_IsOverrideThemeEnabled(value: Boolean);

  { methods } 

    function CreateThemeEffective: DNIThemeEffectiveData;
    procedure ApplyColorScheme(scheme: DNIExtraColorScheme);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property OverrideTheme: DNIMasterTheme read get_OverrideTheme write set_OverrideTheme;
    property IsOverrideThemeEnabled: Boolean read get_IsOverrideThemeEnabled write set_IsOverrideThemeEnabled;
  end;

  TDNMasterThemeManager = class(TDNGenericImport<DNMasterThemeManagerClass, DNMasterThemeManager>) end;

  //-------------namespace: Aspose.Slides.Theme----------------
  DNColorSchemeClass = interface(DDN.mscorlib.DNObjectClass)
  ['{999E28B6-7741-5D16-9C19-4FF65E552902}']
  end;

  [DNTypeName('Aspose.Slides.Theme.ColorScheme')]
  DNColorScheme = interface(DDN.mscorlib.DNObject)
  ['{0D4BD219-6FF2-343B-BF5D-4A09701FDC37}']
  { getters & setters } 

    function get_Dark1: DNIColorFormat;
    function get_Light1: DNIColorFormat;
    function get_Dark2: DNIColorFormat;
    function get_Light2: DNIColorFormat;
    function get_Accent1: DNIColorFormat;
    function get_Accent2: DNIColorFormat;
    function get_Accent3: DNIColorFormat;
    function get_Accent4: DNIColorFormat;
    function get_Accent5: DNIColorFormat;
    function get_Accent6: DNIColorFormat;
    function get_Hyperlink: DNIColorFormat;
    function get_FollowedHyperlink: DNIColorFormat;
    function get_Slide: DNIBaseSlide;
    function get_Presentation: DNIPresentation;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Dark1: DNIColorFormat read get_Dark1;
    property Light1: DNIColorFormat read get_Light1;
    property Dark2: DNIColorFormat read get_Dark2;
    property Light2: DNIColorFormat read get_Light2;
    property Accent1: DNIColorFormat read get_Accent1;
    property Accent2: DNIColorFormat read get_Accent2;
    property Accent3: DNIColorFormat read get_Accent3;
    property Accent4: DNIColorFormat read get_Accent4;
    property Accent5: DNIColorFormat read get_Accent5;
    property Accent6: DNIColorFormat read get_Accent6;
    property Hyperlink: DNIColorFormat read get_Hyperlink;
    property FollowedHyperlink: DNIColorFormat read get_FollowedHyperlink;
    property Slide: DNIBaseSlide read get_Slide;
    property Presentation: DNIPresentation read get_Presentation;
  end;

  TDNColorScheme = class(TDNGenericImport<DNColorSchemeClass, DNColorScheme>) end;

  //-------------namespace: Aspose.Slides.Theme----------------
  DNEffectStyleClass = interface(DDN.mscorlib.DNObjectClass)
  ['{9BC4DADC-CFED-501C-9A37-BD7B14C2964A}']
  end;

  [DNTypeName('Aspose.Slides.Theme.EffectStyle')]
  DNEffectStyle = interface(DDN.mscorlib.DNObject)
  ['{2B04E996-BA9E-3595-9A92-9C4BA75B5BA1}']
  { getters & setters } 

    function get_EffectFormat: DNIEffectFormat;
    function get_ThreeDFormat: DNIThreeDFormat;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property EffectFormat: DNIEffectFormat read get_EffectFormat;
    property ThreeDFormat: DNIThreeDFormat read get_ThreeDFormat;
  end;

  TDNEffectStyle = class(TDNGenericImport<DNEffectStyleClass, DNEffectStyle>) end;

  //-------------namespace: Aspose.Slides.Theme----------------
  DNEffectStyleCollectionClass = interface(DNObjectClass)
  ['{828826D5-83BF-5A5A-8142-41F2296344B0}']
  end;

  [DNTypeName('Aspose.Slides.Theme.EffectStyleCollection')]
  DNEffectStyleCollection = interface(DDN.mscorlib.DNICollection)
  ['{7821F16E-34F2-3536-99C1-8B531549323B}']
  { getters & setters } 

    function get_Count: Int32;
    function get_IsSynchronized: Boolean;
    function get_SyncRoot: DDN.mscorlib.DNObject;

  { methods } 

    function GetEnumerator: DDN.mscorlib.DNIEnumerator<DNIEffectStyle>;
    procedure CopyTo(&array: DDN.mscorlib.DNArray; index: Int32);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Count: Int32 read get_Count;
    property IsSynchronized: Boolean read get_IsSynchronized;
    property SyncRoot: DDN.mscorlib.DNObject read get_SyncRoot;
  end;

  TDNEffectStyleCollection = class(TDNGenericImport<DNEffectStyleCollectionClass, DNEffectStyleCollection>) end;

  //-------------namespace: Aspose.Slides.Theme----------------
  DNExtraColorSchemeClass = interface(DDN.mscorlib.DNObjectClass)
  ['{EF7A6B08-2931-566F-A9DA-E515DFED7A66}']
  end;

  [DNTypeName('Aspose.Slides.Theme.ExtraColorScheme')]
  DNExtraColorScheme = interface(DDN.mscorlib.DNObject)
  ['{34352584-AAE1-3841-9917-23164FE8971E}']
  { getters & setters } 

    function get_Name: string;
    function get_ColorScheme: DNIColorScheme;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Name: string read get_Name;
    property ColorScheme: DNIColorScheme read get_ColorScheme;
  end;

  TDNExtraColorScheme = class(TDNGenericImport<DNExtraColorSchemeClass, DNExtraColorScheme>) end;

  //-------------namespace: Aspose.Slides.Theme----------------
  DNExtraColorSchemeCollectionClass = interface(DNObjectClass)
  ['{D9CD07BF-4703-5B57-B366-63BE235E398E}']
  end;

  [DNTypeName('Aspose.Slides.Theme.ExtraColorSchemeCollection')]
  DNExtraColorSchemeCollection = interface(DDN.mscorlib.DNICollection)
  ['{0BB49C0E-5CA2-323A-B70C-7985214EA076}']
  { getters & setters } 

    function get_Count: Int32;
    function get_IsSynchronized: Boolean;
    function get_SyncRoot: DDN.mscorlib.DNObject;

  { methods } 

    function GetEnumerator: DDN.mscorlib.DNIEnumerator<DNIExtraColorScheme>;
    procedure CopyTo(&array: DDN.mscorlib.DNArray; index: Int32);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Count: Int32 read get_Count;
    property IsSynchronized: Boolean read get_IsSynchronized;
    property SyncRoot: DDN.mscorlib.DNObject read get_SyncRoot;
  end;

  TDNExtraColorSchemeCollection = class(TDNGenericImport<DNExtraColorSchemeCollectionClass, DNExtraColorSchemeCollection>) end;

  //-------------namespace: Aspose.Slides.Theme----------------
  DNFillFormatCollectionClass = interface(DNObjectClass)
  ['{06A86321-B042-5068-BA5E-C2B15E43D21C}']
  end;

  [DNTypeName('Aspose.Slides.Theme.FillFormatCollection')]
  DNFillFormatCollection = interface(DDN.mscorlib.DNICollection)
  ['{A3E5FF9E-883B-319B-8633-018E83BAFA15}']
  { getters & setters } 

    function get_Count: Int32;
    function get_IsSynchronized: Boolean;
    function get_SyncRoot: DDN.mscorlib.DNObject;

  { methods } 

    function GetEnumerator: DDN.mscorlib.DNIEnumerator<DNIFillFormat>;
    procedure CopyTo(&array: DDN.mscorlib.DNArray; index: Int32);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Count: Int32 read get_Count;
    property IsSynchronized: Boolean read get_IsSynchronized;
    property SyncRoot: DDN.mscorlib.DNObject read get_SyncRoot;
  end;

  TDNFillFormatCollection = class(TDNGenericImport<DNFillFormatCollectionClass, DNFillFormatCollection>) end;

  //-------------namespace: Aspose.Slides.Theme----------------
  DNFontSchemeClass = interface(DDN.mscorlib.DNObjectClass)
  ['{1420161E-3353-5C05-A031-2A01510EAD68}']
  end;

  [DNTypeName('Aspose.Slides.Theme.FontScheme')]
  DNFontScheme = interface(DDN.mscorlib.DNObject)
  ['{6902926D-1B2A-3BDD-84C0-35894653AA4F}']
  { getters & setters } 

    function get_Minor: DNIFonts;
    function get_Major: DNIFonts;
    function get_Name: string;
    procedure set_Name(value: string);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Minor: DNIFonts read get_Minor;
    property Major: DNIFonts read get_Major;
    property Name: string read get_Name write set_Name;
  end;

  TDNFontScheme = class(TDNGenericImport<DNFontSchemeClass, DNFontScheme>) end;

  //-------------namespace: Aspose.Slides.Theme----------------
  DNFormatSchemeClass = interface(DDN.mscorlib.DNObjectClass)
  ['{415BCB90-4139-5338-9595-01A16F91FD2D}']
  end;

  [DNTypeName('Aspose.Slides.Theme.FormatScheme')]
  DNFormatScheme = interface(DDN.mscorlib.DNObject)
  ['{190C69B1-5D6D-3784-A534-6AC283ADA95A}']
  { getters & setters } 

    function get_FillStyles: DNIFillFormatCollection;
    function get_LineStyles: DNILineFormatCollection;
    function get_EffectStyles: DNIEffectStyleCollection;
    function get_BackgroundFillStyles: DNIFillFormatCollection;
    function get_Slide: DNIBaseSlide;
    function get_Presentation: DNIPresentation;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property FillStyles: DNIFillFormatCollection read get_FillStyles;
    property LineStyles: DNILineFormatCollection read get_LineStyles;
    property EffectStyles: DNIEffectStyleCollection read get_EffectStyles;
    property BackgroundFillStyles: DNIFillFormatCollection read get_BackgroundFillStyles;
    property Slide: DNIBaseSlide read get_Slide;
    property Presentation: DNIPresentation read get_Presentation;
  end;

  TDNFormatScheme = class(TDNGenericImport<DNFormatSchemeClass, DNFormatScheme>) end;

  //-------------namespace: Aspose.Slides.Theme----------------
  DNLineFormatCollectionClass = interface(DNObjectClass)
  ['{5A3D4FA3-CE91-55C4-ABFB-6D4CC014489A}']
  end;

  [DNTypeName('Aspose.Slides.Theme.LineFormatCollection')]
  DNLineFormatCollection = interface(DDN.mscorlib.DNICollection)
  ['{6593E713-AF78-36D3-986A-FCC7633C18CD}']
  { getters & setters } 

    function get_Count: Int32;
    function get_IsSynchronized: Boolean;
    function get_SyncRoot: DDN.mscorlib.DNObject;

  { methods } 

    function GetEnumerator: DDN.mscorlib.DNIEnumerator<DNILineFormat>;
    procedure CopyTo(&array: DDN.mscorlib.DNArray; index: Int32);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Count: Int32 read get_Count;
    property IsSynchronized: Boolean read get_IsSynchronized;
    property SyncRoot: DDN.mscorlib.DNObject read get_SyncRoot;
  end;

  TDNLineFormatCollection = class(TDNGenericImport<DNLineFormatCollectionClass, DNLineFormatCollection>) end;

  //-------------namespace: Aspose.Slides.Theme----------------
  DNThemeClass = interface(DDN.mscorlib.DNObjectClass)
  ['{1D568702-F8F0-545E-9136-915141D4099C}']
  end;

  [DNTypeName('Aspose.Slides.Theme.Theme')]
  DNTheme = interface(DDN.mscorlib.DNObject)
  ['{8179B58F-19BF-3C81-87A0-A2666EB22BF0}']
  { getters & setters } 

    function get_ColorScheme: DNIColorScheme;
    function get_FontScheme: DNIFontScheme;
    function get_FormatScheme: DNIFormatScheme;
    function get_Presentation: DNIPresentation;

  { methods } 

    function GetEffective: DNIThemeEffectiveData;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property ColorScheme: DNIColorScheme read get_ColorScheme;
    property FontScheme: DNIFontScheme read get_FontScheme;
    property FormatScheme: DNIFormatScheme read get_FormatScheme;
    property Presentation: DNIPresentation read get_Presentation;
  end;

  TDNTheme = class(TDNGenericImport<DNThemeClass, DNTheme>) end;

  //-------------namespace: Aspose.Slides.Theme----------------
  DNMasterThemeClass = interface(DNThemeClass)
  ['{F773BCFB-3214-5115-BAAF-47611F3E2ACD}']
  end;

  [DNTypeName('Aspose.Slides.Theme.MasterTheme')]
  DNMasterTheme = interface(DNTheme)
  ['{544AB5F2-3223-325D-8D01-78021F67543C}']
  { getters & setters } 

    function get_ColorScheme: DNIColorScheme;
    function get_FontScheme: DNIFontScheme;
    function get_FormatScheme: DNIFormatScheme;
    function get_ExtraColorSchemes: DNIExtraColorSchemeCollection;
    function get_Name: string;
    procedure set_Name(value: string);
    function get_Presentation: DNIPresentation;

  { methods } 

    function GetEffective: DNIThemeEffectiveData;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property ColorScheme: DNIColorScheme read get_ColorScheme;
    property FontScheme: DNIFontScheme read get_FontScheme;
    property FormatScheme: DNIFormatScheme read get_FormatScheme;
    property ExtraColorSchemes: DNIExtraColorSchemeCollection read get_ExtraColorSchemes;
    property Name: string read get_Name write set_Name;
    property Presentation: DNIPresentation read get_Presentation;
  end;

  TDNMasterTheme = class(TDNGenericImport<DNMasterThemeClass, DNMasterTheme>) end;

  //-------------namespace: Aspose.Slides.Theme----------------
  DNOverrideThemeClass = interface(DNThemeClass)
  ['{065F9089-318A-5018-92A3-7BDEBC247AD7}']
  end;

  [DNTypeName('Aspose.Slides.Theme.OverrideTheme')]
  DNOverrideTheme = interface(DNTheme)
  ['{2B3905CC-814C-3F15-A0C8-F2781100026A}']
  { getters & setters } 

    function get_ColorScheme: DNIColorScheme;
    function get_FontScheme: DNIFontScheme;
    function get_FormatScheme: DNIFormatScheme;
    function get_IsEmpty: Boolean;
    function get_Presentation: DNIPresentation;

  { methods } 

    procedure InitColorScheme;
    procedure InitColorSchemeFrom(colorScheme: DNIColorScheme);
    procedure InitColorSchemeFromInherited;
    procedure InitFontScheme;
    procedure InitFontSchemeFrom(fontScheme: DNIFontScheme);
    procedure InitFontSchemeFromInherited;
    procedure InitFormatScheme;
    procedure InitFormatSchemeFrom(formatScheme: DNIFormatScheme);
    procedure InitFormatSchemeFromInherited;
    function GetEffective: DNIThemeEffectiveData;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property ColorScheme: DNIColorScheme read get_ColorScheme;
    property FontScheme: DNIFontScheme read get_FontScheme;
    property FormatScheme: DNIFormatScheme read get_FormatScheme;
    property IsEmpty: Boolean read get_IsEmpty;
    property Presentation: DNIPresentation read get_Presentation;
  end;

  TDNOverrideTheme = class(TDNGenericImport<DNOverrideThemeClass, DNOverrideTheme>) end;

  //-------------namespace: Aspose.Slides.Util----------------
  DNShapeUtilClass = interface(DDN.mscorlib.DNObjectClass)
  ['{9499BE31-8183-5CE6-93F2-3434A1B8FC0D}']
  { static methods } 

    {class} function GraphicsPathToGeometryPath(graphicsPath: DDN.System.Drawing.DNGraphicsPath): DNIGeometryPath;
    {class} function GeometryPathToGraphicsPath(geometryPath: DNIGeometryPath): DDN.System.Drawing.DNGraphicsPath;

  end;

  [DNTypeName('Aspose.Slides.Util.ShapeUtil')]
  DNShapeUtil = interface(DDN.mscorlib.DNObject)
  ['{E6E5A9AF-3D1B-37CB-B290-277B35168DFE}']
  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNShapeUtil = class(TDNGenericImport<DNShapeUtilClass, DNShapeUtil>) end;

  //-------------namespace: Aspose.Slides.Util----------------
  DNSlideUtilClass = interface(DDN.mscorlib.DNObjectClass)
  ['{075F5C5A-F042-561F-BE35-CB4A023DA211}']
  { static methods } 

    {class} function FindShape(pres: DNIPresentation; altText: string): DNIShape; overload;
    {class} function FindShape(slide: DNIBaseSlide; altText: string): DNIShape; overload;
    {class} procedure AlignShapes(alignmentType: DNShapesAlignmentType; alignToSlide: Boolean; shapes: DNIShapeCollection); overload;
    {class} procedure AlignShapes(alignmentType: DNShapesAlignmentType; alignToSlide: Boolean; slide: DNIBaseSlide); overload;
    {class} procedure AlignShapes(alignmentType: DNShapesAlignmentType; alignToSlide: Boolean; slide: DNIBaseSlide; shapeIndexes: TArray<Int32>); overload;
    {class} procedure AlignShapes(alignmentType: DNShapesAlignmentType; alignToSlide: Boolean; groupShape: DNIGroupShape); overload;
    {class} procedure AlignShapes(alignmentType: DNShapesAlignmentType; alignToSlide: Boolean; groupShape: DNIGroupShape; shapeIndexes: TArray<Int32>); overload;
    {class} function GetAllTextBoxes(slide: DNIBaseSlide): TArray<DNITextFrame>;
    {class} function GetAllTextFrames(pres: DNIPresentation; withMasters: Boolean): TArray<DNITextFrame>;

  end;

  [DNTypeName('Aspose.Slides.Util.SlideUtil')]
  DNSlideUtil = interface(DDN.mscorlib.DNObject)
  ['{56008E81-73CC-3EBE-A09C-72002E2F0030}']
  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNSlideUtil = class(TDNGenericImport<DNSlideUtilClass, DNSlideUtil>) end;

  //-------------namespace: Aspose.Slides.Vba----------------
  DNVbaModuleClass = interface(DNObjectClass)
  ['{5ADBBE0A-FC37-5B6A-B8A9-7B306F43909F}']
  end;

  [DNTypeName('Aspose.Slides.Vba.VbaModule')]
  DNVbaModule = interface(DNIVbaModule)
  ['{3F8EC43E-A451-4F07-96D5-AA1D5291B910}']
  { getters & setters } 

    function get_Name: string;
    function get_SourceCode: string;
    procedure set_SourceCode(value: string);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Name: string read get_Name;
    property SourceCode: string read get_SourceCode write set_SourceCode;
  end;

  TDNVbaModule = class(TDNGenericImport<DNVbaModuleClass, DNVbaModule>) end;

  //-------------namespace: Aspose.Slides.Vba----------------
  DNVbaModuleCollectionClass = interface(DNObjectClass)
  ['{C1520983-1980-5B61-AAD8-AB34245A49BE}']
  end;

  [DNTypeName('Aspose.Slides.Vba.VbaModuleCollection')]
  DNVbaModuleCollection = interface(DDN.mscorlib.DNICollection)
  ['{E17AB7D0-A96C-4C90-9D2A-8A17E733A572}']
  { getters & setters } 

    function get_Count: Int32;
    function get_IsSynchronized: Boolean;
    function get_SyncRoot: DDN.mscorlib.DNObject;

  { methods } 

    function AddEmptyModule(name: string): DNIVbaModule;
    function GetEnumerator: DDN.mscorlib.DNIEnumerator<DNIVbaModule>;
    procedure CopyTo(&array: DDN.mscorlib.DNArray; index: Int32);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Count: Int32 read get_Count;
    property IsSynchronized: Boolean read get_IsSynchronized;
    property SyncRoot: DDN.mscorlib.DNObject read get_SyncRoot;
  end;

  TDNVbaModuleCollection = class(TDNGenericImport<DNVbaModuleCollectionClass, DNVbaModuleCollection>) end;

  //-------------namespace: Aspose.Slides.Vba----------------
  DNVbaProjectClass = interface(DNObjectClass)
  ['{98C7A433-04EC-51D0-B2C9-225EE8CDFD56}']
  { constructors } 

    {class} function init: DNVbaProject; overload;
    {class} function init(data: TArray<Byte>): DNVbaProject; overload;

  end;

  [DNTypeName('Aspose.Slides.Vba.VbaProject')]
  DNVbaProject = interface(DNIVbaProject)
  ['{D9841EF7-1913-46DF-BEB0-6E5F2DACCEE2}']
  { getters & setters } 

    function get_Name: string;
    function get_Modules: DNIVbaModuleCollection;
    function get_References: DNIVbaReferenceCollection;

  { methods } 

    function ToBinary: TArray<Byte>;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Name: string read get_Name;
    property Modules: DNIVbaModuleCollection read get_Modules;
    property References: DNIVbaReferenceCollection read get_References;
  end;

  TDNVbaProject = class(TDNGenericImport<DNVbaProjectClass, DNVbaProject>) end;

  //-------------namespace: Aspose.Slides.Vba----------------
  DNVbaProjectFactoryClass = interface(DNObjectClass)
  ['{7667F42C-0051-54A7-A0D2-07C9A7AD91AE}']
  { static getter & setter } 

    {class} function get_Instance: DNVbaProjectFactory;

  { constructors } 

    {class} function init: DNVbaProjectFactory;

  { static propertys } 

    {class} property Instance: DNVbaProjectFactory read get_Instance;
  end;

  [DNTypeName('Aspose.Slides.Vba.VbaProjectFactory')]
  DNVbaProjectFactory = interface(DNIVbaProjectFactory)
  ['{5F121A26-C101-4D65-A22C-F4BB8DA5E009}']
  { methods } 

    function CreateVbaProject: DNIVbaProject;
    function ReadVbaProject(data: TArray<Byte>): DNIVbaProject;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNVbaProjectFactory = class(TDNGenericImport<DNVbaProjectFactoryClass, DNVbaProjectFactory>) end;

  //-------------namespace: Aspose.Slides.Vba----------------
  DNVbaReferenceCollectionClass = interface(DNObjectClass)
  ['{EC92B974-BE62-5425-B455-EAC63CA9A296}']
  end;

  [DNTypeName('Aspose.Slides.Vba.VbaReferenceCollection')]
  DNVbaReferenceCollection = interface(DDN.mscorlib.DNICollection)
  ['{DA88A85A-B0DD-4575-971D-FFCA24C96E2F}']
  { getters & setters } 

    function get_Count: Int32;
    function get_IsSynchronized: Boolean;
    function get_SyncRoot: DDN.mscorlib.DNObject;

  { methods } 

    function GetEnumerator: DDN.mscorlib.DNIEnumerator<DNIVbaReference>;
    procedure CopyTo(&array: DDN.mscorlib.DNArray; index: Int32);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Count: Int32 read get_Count;
    property IsSynchronized: Boolean read get_IsSynchronized;
    property SyncRoot: DDN.mscorlib.DNObject read get_SyncRoot;
  end;

  TDNVbaReferenceCollection = class(TDNGenericImport<DNVbaReferenceCollectionClass, DNVbaReferenceCollection>) end;

  //-------------namespace: Aspose.Slides.Vba----------------
  DNVbaReferenceFactoryClass = interface(DNObjectClass)
  ['{04C8F6C7-397F-507E-AF59-A1E2EF000399}']
  { static getter & setter } 

    {class} function get_Instance: DNVbaReferenceFactory;

  { constructors } 

    {class} function init: DNVbaReferenceFactory;

  { static propertys } 

    {class} property Instance: DNVbaReferenceFactory read get_Instance;
  end;

  [DNTypeName('Aspose.Slides.Vba.VbaReferenceFactory')]
  DNVbaReferenceFactory = interface(DNIVbaReferenceFactory)
  ['{76112CBF-5D2F-48C3-9E0E-495DFBD62612}']
  { methods } 

    function CreateOleTypeLibReference(name: string; libid: string): DNIVbaReferenceOleTypeLib;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNVbaReferenceFactory = class(TDNGenericImport<DNVbaReferenceFactoryClass, DNVbaReferenceFactory>) end;

  //-------------namespace: Aspose.Slides.Vba----------------
  DNVbaReferenceOleTypeLibClass = interface(DNObjectClass)
  ['{DE128BAE-CD23-548D-932F-0FC031DFB909}']
  { constructors } 

    {class} function init(name: string; libid: string): DNVbaReferenceOleTypeLib;

  end;

  [DNTypeName('Aspose.Slides.Vba.VbaReferenceOleTypeLib')]
  DNVbaReferenceOleTypeLib = interface(DNIVbaReference)
  ['{108F1522-B8F2-45E6-B86D-A19134A1AF67}']
  { getters & setters } 

    function get_Name: string;
    procedure set_Name(value: string);
    function get_Libid: string;
    procedure set_Libid(value: string);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Name: string read get_Name write set_Name;
    property Libid: string read get_Libid write set_Libid;
  end;

  TDNVbaReferenceOleTypeLib = class(TDNGenericImport<DNVbaReferenceOleTypeLibClass, DNVbaReferenceOleTypeLib>) end;

  //-------------namespace: Aspose.Slides----------------
  DNVideoClass = interface(DDN.mscorlib.DNObjectClass)
  ['{5A653686-89ED-53BC-A60D-0BC3C0AA38F7}']
  end;

  [DNTypeName('Aspose.Slides.Video')]
  DNVideo = interface(DDN.mscorlib.DNObject)
  ['{36E765B0-CEED-398E-A23A-8E56731642A5}']
  { getters & setters } 

    function get_ContentType: string;
    function get_BinaryData: TArray<Byte>;

  { methods } 

    function GetStream: DDN.mscorlib.DNStream;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property ContentType: string read get_ContentType;
    property BinaryData: TArray<Byte> read get_BinaryData;
  end;

  TDNVideo = class(TDNGenericImport<DNVideoClass, DNVideo>) end;

  //-------------namespace: Aspose.Slides----------------
  DNVideoCollectionClass = interface(DNObjectClass)
  ['{BC61389B-430D-5A9A-8D78-2FDD0A25B54F}']
  end;

  [DNTypeName('Aspose.Slides.VideoCollection')]
  DNVideoCollection = interface(DDN.mscorlib.DNICollection)
  ['{F1ED71E4-A180-3375-AAA7-BC0572434E82}']
  { getters & setters } 

    function get_Count: Int32;
    function get_IsSynchronized: Boolean;
    function get_SyncRoot: DDN.mscorlib.DNObject;

  { methods } 

    function AddVideo(video: DNIVideo): DNIVideo; overload;
    function AddVideo(stream: DDN.mscorlib.DNStream): DNIVideo; overload;
    function AddVideo(stream: DDN.mscorlib.DNStream; loadingStreamBehavior: DNLoadingStreamBehavior): DNIVideo; overload;
    function AddVideo(videoData: TArray<Byte>): DNIVideo; overload;
    procedure CopyTo(&array: DDN.mscorlib.DNArray; index: Int32);
    function GetEnumerator: DDN.mscorlib.DNIEnumerator<DNIVideo>;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Count: Int32 read get_Count;
    property IsSynchronized: Boolean read get_IsSynchronized;
    property SyncRoot: DDN.mscorlib.DNObject read get_SyncRoot;
  end;

  TDNVideoCollection = class(TDNGenericImport<DNVideoCollectionClass, DNVideoCollection>) end;

  //-------------namespace: Aspose.Slides----------------
  DNViewPropertiesClass = interface(DDN.mscorlib.DNObjectClass)
  ['{92995317-26EC-5B35-9D15-7697DCA0DE90}']
  end;

  [DNTypeName('Aspose.Slides.ViewProperties')]
  DNViewProperties = interface(DDN.mscorlib.DNObject)
  ['{4527F139-1E6E-43B4-9B88-8028C225B716}']
  { getters & setters } 

    function get_LastView: DNViewType;
    procedure set_LastView(value: DNViewType);
    function get_ShowComments: DNNullableBool;
    procedure set_ShowComments(value: DNNullableBool);
    function get_NormalViewProperties: DNINormalViewProperties;
    function get_SlideViewProperties: DNICommonSlideViewProperties;
    function get_NotesViewProperties: DNICommonSlideViewProperties;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property LastView: DNViewType read get_LastView write set_LastView;
    property ShowComments: DNNullableBool read get_ShowComments write set_ShowComments;
    property NormalViewProperties: DNINormalViewProperties read get_NormalViewProperties;
    property SlideViewProperties: DNICommonSlideViewProperties read get_SlideViewProperties;
    property NotesViewProperties: DNICommonSlideViewProperties read get_NotesViewProperties;
  end;

  TDNViewProperties = class(TDNGenericImport<DNViewPropertiesClass, DNViewProperties>) end;

  //-------------namespace: Aspose.Slides----------------
  DNInvalidPasswordExceptionClass = interface(DDN.mscorlib.DNExceptionClass)
  ['{F8E194DC-D922-59BB-857C-C14E01321827}']
  { constructors } 

    {class} function init: DNInvalidPasswordException; overload;
    {class} function init(message: string): DNInvalidPasswordException; overload;
    {class} function init(message: string; exception: DDN.mscorlib.DNException): DNInvalidPasswordException; overload;

  end;

  [DNTypeName('Aspose.Slides.InvalidPasswordException')]
  DNInvalidPasswordException = interface(DDN.mscorlib.DNException)
  ['{50F7B82C-F4C2-4DDB-BEE1-A8D0790E59DB}']
  { getters & setters } 

    function get_Message: string;
    function get_Data: DDN.mscorlib.DNIDictionary;
    function get_InnerException: DDN.mscorlib.DNException;
    function get_TargetSite: DDN.mscorlib.DNMethodBase;
    function get_StackTrace: string;
    function get_HelpLink: string;
    procedure set_HelpLink(value: string);
    function get_Source: string;
    procedure set_Source(value: string);
    function get_HResult: Int32;

  { methods } 

    function GetBaseException: DDN.mscorlib.DNException;
    function ToString: string;
    procedure GetObjectData(info: DDN.mscorlib.DNSerializationInfo; context: DDN.mscorlib.DNStreamingContext);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    property Message: string read get_Message;
    property Data: DDN.mscorlib.DNIDictionary read get_Data;
    property InnerException: DDN.mscorlib.DNException read get_InnerException;
    property TargetSite: DDN.mscorlib.DNMethodBase read get_TargetSite;
    property StackTrace: string read get_StackTrace;
    property HelpLink: string read get_HelpLink write set_HelpLink;
    property Source: string read get_Source write set_Source;
    property HResult: Int32 read get_HResult;
  end;

  TDNInvalidPasswordException = class(TDNGenericImport<DNInvalidPasswordExceptionClass, DNInvalidPasswordException>) end;

  //-------------namespace: Aspose.Slides----------------
  DNOdpExceptionClass = interface(DDN.mscorlib.DNExceptionClass)
  ['{BF4C1835-3A7D-58BF-B791-1236702617C0}']
  { constructors } 

    {class} function init: DNOdpException; overload;
    {class} function init(message: string): DNOdpException; overload;
    {class} function init(message: string; exception: DDN.mscorlib.DNException): DNOdpException; overload;

  end;

  [DNTypeName('Aspose.Slides.OdpException')]
  DNOdpException = interface(DDN.mscorlib.DNException)
  ['{7223E594-64C5-4583-BC33-975F198378B0}']
  { getters & setters } 

    function get_Message: string;
    function get_Data: DDN.mscorlib.DNIDictionary;
    function get_InnerException: DDN.mscorlib.DNException;
    function get_TargetSite: DDN.mscorlib.DNMethodBase;
    function get_StackTrace: string;
    function get_HelpLink: string;
    procedure set_HelpLink(value: string);
    function get_Source: string;
    procedure set_Source(value: string);
    function get_HResult: Int32;

  { methods } 

    function GetBaseException: DDN.mscorlib.DNException;
    function ToString: string;
    procedure GetObjectData(info: DDN.mscorlib.DNSerializationInfo; context: DDN.mscorlib.DNStreamingContext);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    property Message: string read get_Message;
    property Data: DDN.mscorlib.DNIDictionary read get_Data;
    property InnerException: DDN.mscorlib.DNException read get_InnerException;
    property TargetSite: DDN.mscorlib.DNMethodBase read get_TargetSite;
    property StackTrace: string read get_StackTrace;
    property HelpLink: string read get_HelpLink write set_HelpLink;
    property Source: string read get_Source write set_Source;
    property HResult: Int32 read get_HResult;
  end;

  TDNOdpException = class(TDNGenericImport<DNOdpExceptionClass, DNOdpException>) end;

  //-------------namespace: Aspose.Slides----------------
  DNOdpReadExceptionClass = interface(DNOdpExceptionClass)
  ['{EE661C5C-D708-5322-9C43-55884E498046}']
  { constructors } 

    {class} function init: DNOdpReadException; overload;
    {class} function init(message: string): DNOdpReadException; overload;
    {class} function init(message: string; exception: DDN.mscorlib.DNException): DNOdpReadException; overload;

  end;

  [DNTypeName('Aspose.Slides.OdpReadException')]
  DNOdpReadException = interface(DNOdpException)
  ['{CF0AD269-23FD-4D9B-A9F8-4C8C5EFD237B}']
  { getters & setters } 

    function get_Message: string;
    function get_Data: DDN.mscorlib.DNIDictionary;
    function get_InnerException: DDN.mscorlib.DNException;
    function get_TargetSite: DDN.mscorlib.DNMethodBase;
    function get_StackTrace: string;
    function get_HelpLink: string;
    procedure set_HelpLink(value: string);
    function get_Source: string;
    procedure set_Source(value: string);
    function get_HResult: Int32;

  { methods } 

    function GetBaseException: DDN.mscorlib.DNException;
    function ToString: string;
    procedure GetObjectData(info: DDN.mscorlib.DNSerializationInfo; context: DDN.mscorlib.DNStreamingContext);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    property Message: string read get_Message;
    property Data: DDN.mscorlib.DNIDictionary read get_Data;
    property InnerException: DDN.mscorlib.DNException read get_InnerException;
    property TargetSite: DDN.mscorlib.DNMethodBase read get_TargetSite;
    property StackTrace: string read get_StackTrace;
    property HelpLink: string read get_HelpLink write set_HelpLink;
    property Source: string read get_Source write set_Source;
    property HResult: Int32 read get_HResult;
  end;

  TDNOdpReadException = class(TDNGenericImport<DNOdpReadExceptionClass, DNOdpReadException>) end;

  //-------------namespace: Aspose.Slides----------------
  DNOOXMLExceptionClass = interface(DDN.mscorlib.DNExceptionClass)
  ['{D15A10BF-1196-5F58-B349-1EC0109BDEB6}']
  { constructors } 

    {class} function init: DNOOXMLException; overload;
    {class} function init(message: string): DNOOXMLException; overload;
    {class} function init(message: string; exception: DDN.mscorlib.DNException): DNOOXMLException; overload;

  end;

  [DNTypeName('Aspose.Slides.OOXMLException')]
  DNOOXMLException = interface(DDN.mscorlib.DNException)
  ['{625093FE-824B-4031-81C4-C2034905D2FC}']
  { getters & setters } 

    function get_Message: string;
    function get_Data: DDN.mscorlib.DNIDictionary;
    function get_InnerException: DDN.mscorlib.DNException;
    function get_TargetSite: DDN.mscorlib.DNMethodBase;
    function get_StackTrace: string;
    function get_HelpLink: string;
    procedure set_HelpLink(value: string);
    function get_Source: string;
    procedure set_Source(value: string);
    function get_HResult: Int32;

  { methods } 

    function GetBaseException: DDN.mscorlib.DNException;
    function ToString: string;
    procedure GetObjectData(info: DDN.mscorlib.DNSerializationInfo; context: DDN.mscorlib.DNStreamingContext);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    property Message: string read get_Message;
    property Data: DDN.mscorlib.DNIDictionary read get_Data;
    property InnerException: DDN.mscorlib.DNException read get_InnerException;
    property TargetSite: DDN.mscorlib.DNMethodBase read get_TargetSite;
    property StackTrace: string read get_StackTrace;
    property HelpLink: string read get_HelpLink write set_HelpLink;
    property Source: string read get_Source write set_Source;
    property HResult: Int32 read get_HResult;
  end;

  TDNOOXMLException = class(TDNGenericImport<DNOOXMLExceptionClass, DNOOXMLException>) end;

  //-------------namespace: Aspose.Slides----------------
  DNOOXMLCorruptFileExceptionClass = interface(DNOOXMLExceptionClass)
  ['{D5035DB1-89CC-5AA2-979B-779BDBB45828}']
  { constructors } 

    {class} function init: DNOOXMLCorruptFileException; overload;
    {class} function init(message: string): DNOOXMLCorruptFileException; overload;
    {class} function init(message: string; exception: DDN.mscorlib.DNException): DNOOXMLCorruptFileException; overload;

  end;

  [DNTypeName('Aspose.Slides.OOXMLCorruptFileException')]
  DNOOXMLCorruptFileException = interface(DNOOXMLException)
  ['{DAE5905C-5248-4960-986F-780BE8E416E9}']
  { getters & setters } 

    function get_Message: string;
    function get_Data: DDN.mscorlib.DNIDictionary;
    function get_InnerException: DDN.mscorlib.DNException;
    function get_TargetSite: DDN.mscorlib.DNMethodBase;
    function get_StackTrace: string;
    function get_HelpLink: string;
    procedure set_HelpLink(value: string);
    function get_Source: string;
    procedure set_Source(value: string);
    function get_HResult: Int32;

  { methods } 

    function GetBaseException: DDN.mscorlib.DNException;
    function ToString: string;
    procedure GetObjectData(info: DDN.mscorlib.DNSerializationInfo; context: DDN.mscorlib.DNStreamingContext);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    property Message: string read get_Message;
    property Data: DDN.mscorlib.DNIDictionary read get_Data;
    property InnerException: DDN.mscorlib.DNException read get_InnerException;
    property TargetSite: DDN.mscorlib.DNMethodBase read get_TargetSite;
    property StackTrace: string read get_StackTrace;
    property HelpLink: string read get_HelpLink write set_HelpLink;
    property Source: string read get_Source write set_Source;
    property HResult: Int32 read get_HResult;
  end;

  TDNOOXMLCorruptFileException = class(TDNGenericImport<DNOOXMLCorruptFileExceptionClass, DNOOXMLCorruptFileException>) end;

  //-------------namespace: Aspose.Slides----------------
  DNPptxExceptionClass = interface(DNOOXMLExceptionClass)
  ['{B6E36CE7-0127-52D9-A728-57E0C83C8CD1}']
  { constructors } 

    {class} function init: DNPptxException; overload;
    {class} function init(message: string): DNPptxException; overload;
    {class} function init(message: string; exception: DDN.mscorlib.DNException): DNPptxException; overload;

  end;

  [DNTypeName('Aspose.Slides.PptxException')]
  DNPptxException = interface(DNOOXMLException)
  ['{9BE14B96-EF22-494B-8F1F-A5C1CD3DD1BA}']
  { getters & setters } 

    function get_Message: string;
    function get_Data: DDN.mscorlib.DNIDictionary;
    function get_InnerException: DDN.mscorlib.DNException;
    function get_TargetSite: DDN.mscorlib.DNMethodBase;
    function get_StackTrace: string;
    function get_HelpLink: string;
    procedure set_HelpLink(value: string);
    function get_Source: string;
    procedure set_Source(value: string);
    function get_HResult: Int32;

  { methods } 

    function GetBaseException: DDN.mscorlib.DNException;
    function ToString: string;
    procedure GetObjectData(info: DDN.mscorlib.DNSerializationInfo; context: DDN.mscorlib.DNStreamingContext);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    property Message: string read get_Message;
    property Data: DDN.mscorlib.DNIDictionary read get_Data;
    property InnerException: DDN.mscorlib.DNException read get_InnerException;
    property TargetSite: DDN.mscorlib.DNMethodBase read get_TargetSite;
    property StackTrace: string read get_StackTrace;
    property HelpLink: string read get_HelpLink write set_HelpLink;
    property Source: string read get_Source write set_Source;
    property HResult: Int32 read get_HResult;
  end;

  TDNPptxException = class(TDNGenericImport<DNPptxExceptionClass, DNPptxException>) end;

  //-------------namespace: Aspose.Slides----------------
  DNPptxEditExceptionClass = interface(DNPptxExceptionClass)
  ['{AFEAC3EF-990F-5022-8D44-83F3DD80CA71}']
  { constructors } 

    {class} function init: DNPptxEditException; overload;
    {class} function init(message: string): DNPptxEditException; overload;
    {class} function init(message: string; exception: DDN.mscorlib.DNException): DNPptxEditException; overload;

  end;

  [DNTypeName('Aspose.Slides.PptxEditException')]
  DNPptxEditException = interface(DNPptxException)
  ['{CDA3676D-3E25-49B6-9406-326ED1468804}']
  { getters & setters } 

    function get_Message: string;
    function get_Data: DDN.mscorlib.DNIDictionary;
    function get_InnerException: DDN.mscorlib.DNException;
    function get_TargetSite: DDN.mscorlib.DNMethodBase;
    function get_StackTrace: string;
    function get_HelpLink: string;
    procedure set_HelpLink(value: string);
    function get_Source: string;
    procedure set_Source(value: string);
    function get_HResult: Int32;

  { methods } 

    function GetBaseException: DDN.mscorlib.DNException;
    function ToString: string;
    procedure GetObjectData(info: DDN.mscorlib.DNSerializationInfo; context: DDN.mscorlib.DNStreamingContext);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    property Message: string read get_Message;
    property Data: DDN.mscorlib.DNIDictionary read get_Data;
    property InnerException: DDN.mscorlib.DNException read get_InnerException;
    property TargetSite: DDN.mscorlib.DNMethodBase read get_TargetSite;
    property StackTrace: string read get_StackTrace;
    property HelpLink: string read get_HelpLink write set_HelpLink;
    property Source: string read get_Source write set_Source;
    property HResult: Int32 read get_HResult;
  end;

  TDNPptxEditException = class(TDNGenericImport<DNPptxEditExceptionClass, DNPptxEditException>) end;

  //-------------namespace: Aspose.Slides.Spreadsheet----------------
  DNCellCircularReferenceExceptionClass = interface(DNPptxEditExceptionClass)
  ['{31E3122B-3541-5387-96D0-8B85786F5E2F}']
  { constructors } 

    {class} function init: DNCellCircularReferenceException; overload;
    {class} function init(message: string): DNCellCircularReferenceException; overload;
    {class} function init(message: string; innerException: DDN.mscorlib.DNException): DNCellCircularReferenceException; overload;
    {class} function init(message: string; reference: string): DNCellCircularReferenceException; overload;

  end;

  [DNTypeName('Aspose.Slides.Spreadsheet.CellCircularReferenceException')]
  DNCellCircularReferenceException = interface(DNPptxEditException)
  ['{17F8045F-B606-4432-8CC6-922E0953977D}']
  { getters & setters } 

    function get_Reference: string;
    function get_Message: string;
    function get_Data: DDN.mscorlib.DNIDictionary;
    function get_InnerException: DDN.mscorlib.DNException;
    function get_TargetSite: DDN.mscorlib.DNMethodBase;
    function get_StackTrace: string;
    function get_HelpLink: string;
    procedure set_HelpLink(value: string);
    function get_Source: string;
    procedure set_Source(value: string);
    function get_HResult: Int32;

  { methods } 

    function GetBaseException: DDN.mscorlib.DNException;
    function ToString: string;
    procedure GetObjectData(info: DDN.mscorlib.DNSerializationInfo; context: DDN.mscorlib.DNStreamingContext);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    property Reference: string read get_Reference;
    property Message: string read get_Message;
    property Data: DDN.mscorlib.DNIDictionary read get_Data;
    property InnerException: DDN.mscorlib.DNException read get_InnerException;
    property TargetSite: DDN.mscorlib.DNMethodBase read get_TargetSite;
    property StackTrace: string read get_StackTrace;
    property HelpLink: string read get_HelpLink write set_HelpLink;
    property Source: string read get_Source write set_Source;
    property HResult: Int32 read get_HResult;
  end;

  TDNCellCircularReferenceException = class(TDNGenericImport<DNCellCircularReferenceExceptionClass, DNCellCircularReferenceException>) end;

  //-------------namespace: Aspose.Slides.Spreadsheet----------------
  DNCellInvalidFormulaExceptionClass = interface(DNPptxEditExceptionClass)
  ['{E7E49970-5CB8-5F78-BD0A-44033565B5C7}']
  { constructors } 

    {class} function init: DNCellInvalidFormulaException; overload;
    {class} function init(message: string): DNCellInvalidFormulaException; overload;
    {class} function init(message: string; innerException: DDN.mscorlib.DNException): DNCellInvalidFormulaException; overload;
    {class} function init(message: string; reference: string): DNCellInvalidFormulaException; overload;

  end;

  [DNTypeName('Aspose.Slides.Spreadsheet.CellInvalidFormulaException')]
  DNCellInvalidFormulaException = interface(DNPptxEditException)
  ['{D0714D67-A449-4649-AF2D-D2FCE25B50B4}']
  { getters & setters } 

    function get_Reference: string;
    function get_Message: string;
    function get_Data: DDN.mscorlib.DNIDictionary;
    function get_InnerException: DDN.mscorlib.DNException;
    function get_TargetSite: DDN.mscorlib.DNMethodBase;
    function get_StackTrace: string;
    function get_HelpLink: string;
    procedure set_HelpLink(value: string);
    function get_Source: string;
    procedure set_Source(value: string);
    function get_HResult: Int32;

  { methods } 

    function GetBaseException: DDN.mscorlib.DNException;
    function ToString: string;
    procedure GetObjectData(info: DDN.mscorlib.DNSerializationInfo; context: DDN.mscorlib.DNStreamingContext);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    property Reference: string read get_Reference;
    property Message: string read get_Message;
    property Data: DDN.mscorlib.DNIDictionary read get_Data;
    property InnerException: DDN.mscorlib.DNException read get_InnerException;
    property TargetSite: DDN.mscorlib.DNMethodBase read get_TargetSite;
    property StackTrace: string read get_StackTrace;
    property HelpLink: string read get_HelpLink write set_HelpLink;
    property Source: string read get_Source write set_Source;
    property HResult: Int32 read get_HResult;
  end;

  TDNCellInvalidFormulaException = class(TDNGenericImport<DNCellInvalidFormulaExceptionClass, DNCellInvalidFormulaException>) end;

  //-------------namespace: Aspose.Slides.Spreadsheet----------------
  DNCellInvalidReferenceExceptionClass = interface(DNPptxEditExceptionClass)
  ['{58B0F1F9-3EA0-5D6B-A252-8D272AD3839A}']
  { constructors } 

    {class} function init: DNCellInvalidReferenceException; overload;
    {class} function init(message: string): DNCellInvalidReferenceException; overload;
    {class} function init(message: string; innerException: DDN.mscorlib.DNException): DNCellInvalidReferenceException; overload;
    {class} function init(message: string; reference: string): DNCellInvalidReferenceException; overload;

  end;

  [DNTypeName('Aspose.Slides.Spreadsheet.CellInvalidReferenceException')]
  DNCellInvalidReferenceException = interface(DNPptxEditException)
  ['{E2159DDF-1E7E-4674-AFFC-540CDC827292}']
  { getters & setters } 

    function get_Reference: string;
    function get_Message: string;
    function get_Data: DDN.mscorlib.DNIDictionary;
    function get_InnerException: DDN.mscorlib.DNException;
    function get_TargetSite: DDN.mscorlib.DNMethodBase;
    function get_StackTrace: string;
    function get_HelpLink: string;
    procedure set_HelpLink(value: string);
    function get_Source: string;
    procedure set_Source(value: string);
    function get_HResult: Int32;

  { methods } 

    function GetBaseException: DDN.mscorlib.DNException;
    function ToString: string;
    procedure GetObjectData(info: DDN.mscorlib.DNSerializationInfo; context: DDN.mscorlib.DNStreamingContext);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    property Reference: string read get_Reference;
    property Message: string read get_Message;
    property Data: DDN.mscorlib.DNIDictionary read get_Data;
    property InnerException: DDN.mscorlib.DNException read get_InnerException;
    property TargetSite: DDN.mscorlib.DNMethodBase read get_TargetSite;
    property StackTrace: string read get_StackTrace;
    property HelpLink: string read get_HelpLink write set_HelpLink;
    property Source: string read get_Source write set_Source;
    property HResult: Int32 read get_HResult;
  end;

  TDNCellInvalidReferenceException = class(TDNGenericImport<DNCellInvalidReferenceExceptionClass, DNCellInvalidReferenceException>) end;

  //-------------namespace: Aspose.Slides.Spreadsheet----------------
  DNCellUnsupportedDataExceptionClass = interface(DNPptxEditExceptionClass)
  ['{FCB7984E-2FCF-51AD-9FDB-F5E69750A83B}']
  { constructors } 

    {class} function init: DNCellUnsupportedDataException; overload;
    {class} function init(message: string): DNCellUnsupportedDataException; overload;
    {class} function init(message: string; innerException: DDN.mscorlib.DNException): DNCellUnsupportedDataException; overload;

  end;

  [DNTypeName('Aspose.Slides.Spreadsheet.CellUnsupportedDataException')]
  DNCellUnsupportedDataException = interface(DNPptxEditException)
  ['{C16A4BA5-5289-4643-A7FB-4178B991BBE0}']
  { getters & setters } 

    function get_Message: string;
    function get_Data: DDN.mscorlib.DNIDictionary;
    function get_InnerException: DDN.mscorlib.DNException;
    function get_TargetSite: DDN.mscorlib.DNMethodBase;
    function get_StackTrace: string;
    function get_HelpLink: string;
    procedure set_HelpLink(value: string);
    function get_Source: string;
    procedure set_Source(value: string);
    function get_HResult: Int32;

  { methods } 

    function GetBaseException: DDN.mscorlib.DNException;
    function ToString: string;
    procedure GetObjectData(info: DDN.mscorlib.DNSerializationInfo; context: DDN.mscorlib.DNStreamingContext);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    property Message: string read get_Message;
    property Data: DDN.mscorlib.DNIDictionary read get_Data;
    property InnerException: DDN.mscorlib.DNException read get_InnerException;
    property TargetSite: DDN.mscorlib.DNMethodBase read get_TargetSite;
    property StackTrace: string read get_StackTrace;
    property HelpLink: string read get_HelpLink write set_HelpLink;
    property Source: string read get_Source write set_Source;
    property HResult: Int32 read get_HResult;
  end;

  TDNCellUnsupportedDataException = class(TDNGenericImport<DNCellUnsupportedDataExceptionClass, DNCellUnsupportedDataException>) end;

  //-------------namespace: Aspose.Slides----------------
  DNPptxReadExceptionClass = interface(DNPptxExceptionClass)
  ['{C12571A4-7018-5587-81B0-52A9FC1466B8}']
  { constructors } 

    {class} function init: DNPptxReadException; overload;
    {class} function init(message: string): DNPptxReadException; overload;
    {class} function init(message: string; exception: DDN.mscorlib.DNException): DNPptxReadException; overload;

  end;

  [DNTypeName('Aspose.Slides.PptxReadException')]
  DNPptxReadException = interface(DNPptxException)
  ['{C647C67B-EF68-403B-AF3F-CCFF86320942}']
  { getters & setters } 

    function get_Message: string;
    function get_Data: DDN.mscorlib.DNIDictionary;
    function get_InnerException: DDN.mscorlib.DNException;
    function get_TargetSite: DDN.mscorlib.DNMethodBase;
    function get_StackTrace: string;
    function get_HelpLink: string;
    procedure set_HelpLink(value: string);
    function get_Source: string;
    procedure set_Source(value: string);
    function get_HResult: Int32;

  { methods } 

    function GetBaseException: DDN.mscorlib.DNException;
    function ToString: string;
    procedure GetObjectData(info: DDN.mscorlib.DNSerializationInfo; context: DDN.mscorlib.DNStreamingContext);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    property Message: string read get_Message;
    property Data: DDN.mscorlib.DNIDictionary read get_Data;
    property InnerException: DDN.mscorlib.DNException read get_InnerException;
    property TargetSite: DDN.mscorlib.DNMethodBase read get_TargetSite;
    property StackTrace: string read get_StackTrace;
    property HelpLink: string read get_HelpLink write set_HelpLink;
    property Source: string read get_Source write set_Source;
    property HResult: Int32 read get_HResult;
  end;

  TDNPptxReadException = class(TDNGenericImport<DNPptxReadExceptionClass, DNPptxReadException>) end;

  //-------------namespace: Aspose.Slides----------------
  DNPptxCorruptFileExceptionClass = interface(DNPptxReadExceptionClass)
  ['{0F361140-9199-5174-9C27-440D0F024D7F}']
  { constructors } 

    {class} function init: DNPptxCorruptFileException; overload;
    {class} function init(message: string): DNPptxCorruptFileException; overload;
    {class} function init(message: string; exception: DDN.mscorlib.DNException): DNPptxCorruptFileException; overload;

  end;

  [DNTypeName('Aspose.Slides.PptxCorruptFileException')]
  DNPptxCorruptFileException = interface(DNPptxReadException)
  ['{0D7DADD4-98BA-4EEB-A7BB-05DF27C4D091}']
  { getters & setters } 

    function get_Message: string;
    function get_Data: DDN.mscorlib.DNIDictionary;
    function get_InnerException: DDN.mscorlib.DNException;
    function get_TargetSite: DDN.mscorlib.DNMethodBase;
    function get_StackTrace: string;
    function get_HelpLink: string;
    procedure set_HelpLink(value: string);
    function get_Source: string;
    procedure set_Source(value: string);
    function get_HResult: Int32;

  { methods } 

    function GetBaseException: DDN.mscorlib.DNException;
    function ToString: string;
    procedure GetObjectData(info: DDN.mscorlib.DNSerializationInfo; context: DDN.mscorlib.DNStreamingContext);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    property Message: string read get_Message;
    property Data: DDN.mscorlib.DNIDictionary read get_Data;
    property InnerException: DDN.mscorlib.DNException read get_InnerException;
    property TargetSite: DDN.mscorlib.DNMethodBase read get_TargetSite;
    property StackTrace: string read get_StackTrace;
    property HelpLink: string read get_HelpLink write set_HelpLink;
    property Source: string read get_Source write set_Source;
    property HResult: Int32 read get_HResult;
  end;

  TDNPptxCorruptFileException = class(TDNGenericImport<DNPptxCorruptFileExceptionClass, DNPptxCorruptFileException>) end;

  //-------------namespace: Aspose.Slides----------------
  DNPptxUnsupportedFormatExceptionClass = interface(DNPptxReadExceptionClass)
  ['{DFDAE425-EC46-53CB-A5E1-A3D6AD0B22E6}']
  { constructors } 

    {class} function init: DNPptxUnsupportedFormatException; overload;
    {class} function init(message: string): DNPptxUnsupportedFormatException; overload;
    {class} function init(message: string; exception: DDN.mscorlib.DNException): DNPptxUnsupportedFormatException; overload;

  end;

  [DNTypeName('Aspose.Slides.PptxUnsupportedFormatException')]
  DNPptxUnsupportedFormatException = interface(DNPptxReadException)
  ['{343A80FE-0550-4569-9062-B69BF9BD7E54}']
  { getters & setters } 

    function get_Message: string;
    function get_Data: DDN.mscorlib.DNIDictionary;
    function get_InnerException: DDN.mscorlib.DNException;
    function get_TargetSite: DDN.mscorlib.DNMethodBase;
    function get_StackTrace: string;
    function get_HelpLink: string;
    procedure set_HelpLink(value: string);
    function get_Source: string;
    procedure set_Source(value: string);
    function get_HResult: Int32;

  { methods } 

    function GetBaseException: DDN.mscorlib.DNException;
    function ToString: string;
    procedure GetObjectData(info: DDN.mscorlib.DNSerializationInfo; context: DDN.mscorlib.DNStreamingContext);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    property Message: string read get_Message;
    property Data: DDN.mscorlib.DNIDictionary read get_Data;
    property InnerException: DDN.mscorlib.DNException read get_InnerException;
    property TargetSite: DDN.mscorlib.DNMethodBase read get_TargetSite;
    property StackTrace: string read get_StackTrace;
    property HelpLink: string read get_HelpLink write set_HelpLink;
    property Source: string read get_Source write set_Source;
    property HResult: Int32 read get_HResult;
  end;

  TDNPptxUnsupportedFormatException = class(TDNGenericImport<DNPptxUnsupportedFormatExceptionClass, DNPptxUnsupportedFormatException>) end;

  //-------------namespace: Aspose.Slides----------------
  DNPptExceptionClass = interface(DDN.mscorlib.DNExceptionClass)
  ['{63A90C90-85BD-5B10-9280-959E69CBBADF}']
  { constructors } 

    {class} function init: DNPptException; overload;
    {class} function init(message: string): DNPptException; overload;
    {class} function init(message: string; exception: DDN.mscorlib.DNException): DNPptException; overload;

  end;

  [DNTypeName('Aspose.Slides.PptException')]
  DNPptException = interface(DDN.mscorlib.DNException)
  ['{B80025B6-795E-4513-9121-A42D351F9B3A}']
  { getters & setters } 

    function get_Message: string;
    function get_Data: DDN.mscorlib.DNIDictionary;
    function get_InnerException: DDN.mscorlib.DNException;
    function get_TargetSite: DDN.mscorlib.DNMethodBase;
    function get_StackTrace: string;
    function get_HelpLink: string;
    procedure set_HelpLink(value: string);
    function get_Source: string;
    procedure set_Source(value: string);
    function get_HResult: Int32;

  { methods } 

    function GetBaseException: DDN.mscorlib.DNException;
    function ToString: string;
    procedure GetObjectData(info: DDN.mscorlib.DNSerializationInfo; context: DDN.mscorlib.DNStreamingContext);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    property Message: string read get_Message;
    property Data: DDN.mscorlib.DNIDictionary read get_Data;
    property InnerException: DDN.mscorlib.DNException read get_InnerException;
    property TargetSite: DDN.mscorlib.DNMethodBase read get_TargetSite;
    property StackTrace: string read get_StackTrace;
    property HelpLink: string read get_HelpLink write set_HelpLink;
    property Source: string read get_Source write set_Source;
    property HResult: Int32 read get_HResult;
  end;

  TDNPptException = class(TDNGenericImport<DNPptExceptionClass, DNPptException>) end;

  //-------------namespace: Aspose.Slides----------------
  DNPptEditExceptionClass = interface(DNPptExceptionClass)
  ['{7A54AA0A-2E09-516F-8272-5403CF14F64D}']
  { constructors } 

    {class} function init: DNPptEditException; overload;
    {class} function init(message: string): DNPptEditException; overload;
    {class} function init(message: string; exception: DDN.mscorlib.DNException): DNPptEditException; overload;

  end;

  [DNTypeName('Aspose.Slides.PptEditException')]
  DNPptEditException = interface(DNPptException)
  ['{65ED44D6-C14D-483B-BC07-50512D3C0B5E}']
  { getters & setters } 

    function get_Message: string;
    function get_Data: DDN.mscorlib.DNIDictionary;
    function get_InnerException: DDN.mscorlib.DNException;
    function get_TargetSite: DDN.mscorlib.DNMethodBase;
    function get_StackTrace: string;
    function get_HelpLink: string;
    procedure set_HelpLink(value: string);
    function get_Source: string;
    procedure set_Source(value: string);
    function get_HResult: Int32;

  { methods } 

    function GetBaseException: DDN.mscorlib.DNException;
    function ToString: string;
    procedure GetObjectData(info: DDN.mscorlib.DNSerializationInfo; context: DDN.mscorlib.DNStreamingContext);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    property Message: string read get_Message;
    property Data: DDN.mscorlib.DNIDictionary read get_Data;
    property InnerException: DDN.mscorlib.DNException read get_InnerException;
    property TargetSite: DDN.mscorlib.DNMethodBase read get_TargetSite;
    property StackTrace: string read get_StackTrace;
    property HelpLink: string read get_HelpLink write set_HelpLink;
    property Source: string read get_Source write set_Source;
    property HResult: Int32 read get_HResult;
  end;

  TDNPptEditException = class(TDNGenericImport<DNPptEditExceptionClass, DNPptEditException>) end;

  //-------------namespace: Aspose.Slides----------------
  DNPptReadExceptionClass = interface(DNPptExceptionClass)
  ['{D7939598-0CDF-5CF5-9994-762B7AE70211}']
  { constructors } 

    {class} function init: DNPptReadException; overload;
    {class} function init(message: string): DNPptReadException; overload;
    {class} function init(message: string; exception: DDN.mscorlib.DNException): DNPptReadException; overload;

  end;

  [DNTypeName('Aspose.Slides.PptReadException')]
  DNPptReadException = interface(DNPptException)
  ['{6D44CB3A-71FD-46AF-848D-666ABE7091FE}']
  { getters & setters } 

    function get_Message: string;
    function get_Data: DDN.mscorlib.DNIDictionary;
    function get_InnerException: DDN.mscorlib.DNException;
    function get_TargetSite: DDN.mscorlib.DNMethodBase;
    function get_StackTrace: string;
    function get_HelpLink: string;
    procedure set_HelpLink(value: string);
    function get_Source: string;
    procedure set_Source(value: string);
    function get_HResult: Int32;

  { methods } 

    function GetBaseException: DDN.mscorlib.DNException;
    function ToString: string;
    procedure GetObjectData(info: DDN.mscorlib.DNSerializationInfo; context: DDN.mscorlib.DNStreamingContext);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    property Message: string read get_Message;
    property Data: DDN.mscorlib.DNIDictionary read get_Data;
    property InnerException: DDN.mscorlib.DNException read get_InnerException;
    property TargetSite: DDN.mscorlib.DNMethodBase read get_TargetSite;
    property StackTrace: string read get_StackTrace;
    property HelpLink: string read get_HelpLink write set_HelpLink;
    property Source: string read get_Source write set_Source;
    property HResult: Int32 read get_HResult;
  end;

  TDNPptReadException = class(TDNGenericImport<DNPptReadExceptionClass, DNPptReadException>) end;

  //-------------namespace: Aspose.Slides----------------
  DNPptCorruptFileExceptionClass = interface(DNPptReadExceptionClass)
  ['{DDD82DFA-F1B9-5771-9793-9581104F3A47}']
  { constructors } 

    {class} function init: DNPptCorruptFileException; overload;
    {class} function init(message: string): DNPptCorruptFileException; overload;
    {class} function init(message: string; exception: DDN.mscorlib.DNException): DNPptCorruptFileException; overload;

  end;

  [DNTypeName('Aspose.Slides.PptCorruptFileException')]
  DNPptCorruptFileException = interface(DNPptReadException)
  ['{685C7A71-77F6-463D-BFFF-4D5461B3A9A9}']
  { getters & setters } 

    function get_Message: string;
    function get_Data: DDN.mscorlib.DNIDictionary;
    function get_InnerException: DDN.mscorlib.DNException;
    function get_TargetSite: DDN.mscorlib.DNMethodBase;
    function get_StackTrace: string;
    function get_HelpLink: string;
    procedure set_HelpLink(value: string);
    function get_Source: string;
    procedure set_Source(value: string);
    function get_HResult: Int32;

  { methods } 

    function GetBaseException: DDN.mscorlib.DNException;
    function ToString: string;
    procedure GetObjectData(info: DDN.mscorlib.DNSerializationInfo; context: DDN.mscorlib.DNStreamingContext);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    property Message: string read get_Message;
    property Data: DDN.mscorlib.DNIDictionary read get_Data;
    property InnerException: DDN.mscorlib.DNException read get_InnerException;
    property TargetSite: DDN.mscorlib.DNMethodBase read get_TargetSite;
    property StackTrace: string read get_StackTrace;
    property HelpLink: string read get_HelpLink write set_HelpLink;
    property Source: string read get_Source write set_Source;
    property HResult: Int32 read get_HResult;
  end;

  TDNPptCorruptFileException = class(TDNGenericImport<DNPptCorruptFileExceptionClass, DNPptCorruptFileException>) end;

  //-------------namespace: Aspose.Slides----------------
  DNPptUnsupportedFormatExceptionClass = interface(DNPptReadExceptionClass)
  ['{928BC1A6-06A2-5787-A9CA-CD4DBB090E8C}']
  { constructors } 

    {class} function init: DNPptUnsupportedFormatException; overload;
    {class} function init(message: string): DNPptUnsupportedFormatException; overload;
    {class} function init(message: string; exception: DDN.mscorlib.DNException): DNPptUnsupportedFormatException; overload;

  end;

  [DNTypeName('Aspose.Slides.PptUnsupportedFormatException')]
  DNPptUnsupportedFormatException = interface(DNPptReadException)
  ['{D8DCB7FD-B04C-417A-8969-D3EB4F492659}']
  { getters & setters } 

    function get_Message: string;
    function get_Data: DDN.mscorlib.DNIDictionary;
    function get_InnerException: DDN.mscorlib.DNException;
    function get_TargetSite: DDN.mscorlib.DNMethodBase;
    function get_StackTrace: string;
    function get_HelpLink: string;
    procedure set_HelpLink(value: string);
    function get_Source: string;
    procedure set_Source(value: string);
    function get_HResult: Int32;

  { methods } 

    function GetBaseException: DDN.mscorlib.DNException;
    function ToString: string;
    procedure GetObjectData(info: DDN.mscorlib.DNSerializationInfo; context: DDN.mscorlib.DNStreamingContext);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    property Message: string read get_Message;
    property Data: DDN.mscorlib.DNIDictionary read get_Data;
    property InnerException: DDN.mscorlib.DNException read get_InnerException;
    property TargetSite: DDN.mscorlib.DNMethodBase read get_TargetSite;
    property StackTrace: string read get_StackTrace;
    property HelpLink: string read get_HelpLink write set_HelpLink;
    property Source: string read get_Source write set_Source;
    property HResult: Int32 read get_HResult;
  end;

  TDNPptUnsupportedFormatException = class(TDNGenericImport<DNPptUnsupportedFormatExceptionClass, DNPptUnsupportedFormatException>) end;

  //-------------namespace: Aspose.Slides.Charts----------------
  DNAxesCompositionNotCombinableExceptionClass = interface(DDN.mscorlib.DNInvalidOperationExceptionClass)
  ['{4DD54A9D-F357-5045-99E7-562A2E83D5B1}']
  { constructors } 

    {class} function init: DNAxesCompositionNotCombinableException; overload;
    {class} function init(message: string): DNAxesCompositionNotCombinableException; overload;
    {class} function init(message: string; exception: DDN.mscorlib.DNException): DNAxesCompositionNotCombinableException; overload;

  end;

  [DNTypeName('Aspose.Slides.Charts.AxesCompositionNotCombinableException')]
  DNAxesCompositionNotCombinableException = interface(DDN.mscorlib.DNInvalidOperationException)
  ['{3CB68FAC-D34E-444F-AF87-738E03F33D0D}']
  { getters & setters } 

    function get_Message: string;
    function get_Data: DDN.mscorlib.DNIDictionary;
    function get_InnerException: DDN.mscorlib.DNException;
    function get_TargetSite: DDN.mscorlib.DNMethodBase;
    function get_StackTrace: string;
    function get_HelpLink: string;
    procedure set_HelpLink(value: string);
    function get_Source: string;
    procedure set_Source(value: string);
    function get_HResult: Int32;

  { methods } 

    function GetBaseException: DDN.mscorlib.DNException;
    function ToString: string;
    procedure GetObjectData(info: DDN.mscorlib.DNSerializationInfo; context: DDN.mscorlib.DNStreamingContext);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    property Message: string read get_Message;
    property Data: DDN.mscorlib.DNIDictionary read get_Data;
    property InnerException: DDN.mscorlib.DNException read get_InnerException;
    property TargetSite: DDN.mscorlib.DNMethodBase read get_TargetSite;
    property StackTrace: string read get_StackTrace;
    property HelpLink: string read get_HelpLink write set_HelpLink;
    property Source: string read get_Source write set_Source;
    property HResult: Int32 read get_HResult;
  end;

  TDNAxesCompositionNotCombinableException = class(TDNGenericImport<DNAxesCompositionNotCombinableExceptionClass, DNAxesCompositionNotCombinableException>) end;

  //-------------namespace: Aspose.Slides.Charts----------------
  DNCannotCombine2DAnd3DChartsExceptionClass = interface(DDN.mscorlib.DNInvalidOperationExceptionClass)
  ['{559640DD-AF7B-5039-9968-5D225C4451EA}']
  { constructors } 

    {class} function init: DNCannotCombine2DAnd3DChartsException; overload;
    {class} function init(message: string): DNCannotCombine2DAnd3DChartsException; overload;
    {class} function init(message: string; exception: DDN.mscorlib.DNException): DNCannotCombine2DAnd3DChartsException; overload;

  end;

  [DNTypeName('Aspose.Slides.Charts.CannotCombine2DAnd3DChartsException')]
  DNCannotCombine2DAnd3DChartsException = interface(DDN.mscorlib.DNInvalidOperationException)
  ['{50A79AD9-B315-4CFE-A4C4-9EC32ADD5341}']
  { getters & setters } 

    function get_Message: string;
    function get_Data: DDN.mscorlib.DNIDictionary;
    function get_InnerException: DDN.mscorlib.DNException;
    function get_TargetSite: DDN.mscorlib.DNMethodBase;
    function get_StackTrace: string;
    function get_HelpLink: string;
    procedure set_HelpLink(value: string);
    function get_Source: string;
    procedure set_Source(value: string);
    function get_HResult: Int32;

  { methods } 

    function GetBaseException: DDN.mscorlib.DNException;
    function ToString: string;
    procedure GetObjectData(info: DDN.mscorlib.DNSerializationInfo; context: DDN.mscorlib.DNStreamingContext);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    property Message: string read get_Message;
    property Data: DDN.mscorlib.DNIDictionary read get_Data;
    property InnerException: DDN.mscorlib.DNException read get_InnerException;
    property TargetSite: DDN.mscorlib.DNMethodBase read get_TargetSite;
    property StackTrace: string read get_StackTrace;
    property HelpLink: string read get_HelpLink write set_HelpLink;
    property Source: string read get_Source write set_Source;
    property HResult: Int32 read get_HResult;
  end;

  TDNCannotCombine2DAnd3DChartsException = class(TDNGenericImport<DNCannotCombine2DAnd3DChartsExceptionClass, DNCannotCombine2DAnd3DChartsException>) end;


implementation

end.
